{
    "filename": "mathcomp/solvable/gseries.v",
    "coq_project": "math-comp",
    "vernac_cmds": [
        [
            "Require Import mathcomp.ssreflect.ssreflect.",
            "VernacRequire",
            "85e251063dc2b5a9653f7bb76dcd176ed36b42a9"
        ],
        [
            "From mathcomp Require Import ssrbool ssrfun eqtype ssrnat seq path fintype bigop.",
            "VernacRequire",
            "9b59e2f5020e647e8c44830b1de591c92c15746c"
        ],
        [
            "From mathcomp Require Import finset fingroup morphism automorphism quotient action.",
            "VernacRequire",
            "75f57abfa4e6d645bf5721d27823eefb6cd5069b"
        ],
        [
            "From mathcomp Require Import commutator center.",
            "VernacRequire",
            "793c42854c4d42d3939e91fdc87bfde712e24352"
        ],
        [
            "Set Implicit Arguments.",
            "VernacSetOption",
            "9e84ff8896f028601d8aded48c1d4aebe60aa584"
        ],
        [
            "Unset Strict Implicit.",
            "VernacUnsetOption",
            "2842adaf6959318f2042805935c46f513bdc0348"
        ],
        [
            "Unset Printing Implicit Defensive.",
            "VernacUnsetOption",
            "444e5f0be4b25d9b1fd556943a447ec10046d151"
        ],
        [
            "Import GroupScope.",
            "VernacImport",
            "89fd18b7dcbcc46edcd02262df11c799856485fc"
        ],
        [
            "Section GroupDefs.",
            "VernacBeginSection",
            "6b663ed084b03004289e40fe83fd6f385e9f9313"
        ],
        [
            "Variable gT : finGroupType.",
            "VernacAssumption",
            "694477e88f23a3b7d6edaa9ed9d49ebe1ee92aa6"
        ],
        [
            "Implicit Types A B U V : {set gT}.",
            "VernacReserve",
            "2717a4645250b3e529ddde41aab062dfc31ab648"
        ],
        [
            "Local Notation groupT := (group_of (Phant gT)).",
            "VernacSyntacticDefinition",
            "d41862a61f1edd4e69208f64659419fce842ad00"
        ],
        [
            "Definition subnormal A B := (A \\subset B) && (iter #|B| (fun N => generated (class_support A N)) B == A).",
            "VernacDefinition",
            "852cb66802ef97000c887c5a12185468f8e7d467"
        ],
        [
            "Definition invariant_factor A B C := [&& A \\subset 'N(B), A \\subset 'N(C) & B <| C].",
            "VernacDefinition",
            "474b19a6ca9267ac5edd3df24445a8cdc13ef4fe"
        ],
        [
            "Definition group_rel_of (r : rel {set gT}) := [rel H G : groupT | r H G].",
            "VernacDefinition",
            "21fbb5541892ddafc8b76ea24daa53a36a24b1af"
        ],
        [
            "Definition stable_factor A V U := ([~: U, A] \\subset V) && (V <| U).",
            "VernacDefinition",
            "89a648485c96833800849692452095735c4d8ece"
        ],
        [
            "Definition central_factor A V U := [&& [~: U, A] \\subset V, V \\subset U & U \\subset A].",
            "VernacDefinition",
            "b2e15fe4880f831845135aecb020d1e3c488e1e5"
        ],
        [
            "Definition maximal A B := [max A of G | G \\proper B].",
            "VernacDefinition",
            "27a47f9e4c6b67f9a942389859101525ae58761e"
        ],
        [
            "Definition maximal_eq A B := (A == B) || maximal A B.",
            "VernacDefinition",
            "39f7622fcb2ef78394168e7ccff948a9d971ea98"
        ],
        [
            "Definition maxnormal A B U := [max A of G | G \\proper B & U \\subset 'N(G)].",
            "VernacDefinition",
            "4601f890942c2272d403c07e4aafcecbbbf578b0"
        ],
        [
            "Definition minnormal A B := [min A of G | G :!=: 1 & B \\subset 'N(G)].",
            "VernacDefinition",
            "8c8eeed8f8e0800b253ed16887d9bccbecc0d9f2"
        ],
        [
            "Definition simple A := minnormal A A.",
            "VernacDefinition",
            "6dedd6317547a16c4aefc4374538e88afd423151"
        ],
        [
            "Definition chief_factor A V U := maxnormal V U A && (U <| A).",
            "VernacDefinition",
            "66a7e85ed7bc2a4013d6aadb02bacec4c4b34699"
        ],
        [
            "End GroupDefs.",
            "VernacEndSegment",
            "886f16a8f72eae162dd4f671471f83bc2eed504c"
        ],
        [
            "Arguments subnormal {gT} A%g B%g.",
            "VernacArguments",
            "ab50961d3fa0ba5cf9cc43f88a2accebbd8d1fff"
        ],
        [
            "Arguments invariant_factor {gT} A%g B%g C%g.",
            "VernacArguments",
            "ed61334dea1556ca4c7fda98091a1c728b8addfe"
        ],
        [
            "Arguments stable_factor {gT} A%g V%g U%g.",
            "VernacArguments",
            "12156758d7d21f33d67a42a740c5a780220afe80"
        ],
        [
            "Arguments central_factor {gT} A%g V%g U%g.",
            "VernacArguments",
            "2f89238524108f32ceaeddc3103bf740680339ef"
        ],
        [
            "Arguments maximal {gT} A%g B%g.",
            "VernacArguments",
            "8646efb51667b3076d7dc6697b94327bca7b316c"
        ],
        [
            "Arguments maximal_eq {gT} A%g B%g.",
            "VernacArguments",
            "125241c612f16722b1d4bac9b81beb5165edabbd"
        ],
        [
            "Arguments maxnormal {gT} A%g B%g U%g.",
            "VernacArguments",
            "d87438d1f8adc56c23d107cf8dc59f544c6888c8"
        ],
        [
            "Arguments minnormal {gT} A%g B%g.",
            "VernacArguments",
            "96c12239e68d951b4cc140c34c429638b9241dc5"
        ],
        [
            "Arguments simple {gT} A%g.",
            "VernacArguments",
            "3687b2595619fb1e49ccb5cabc3c4adfc74605ff"
        ],
        [
            "Arguments chief_factor {gT} A%g V%g U%g.",
            "VernacArguments",
            "84d039bc6c8b40e957ed549e1abc63e903884b58"
        ],
        [
            "Notation \"H <|<| G\" := (subnormal H G) (at level 70, no associativity) : group_scope.",
            "VernacNotation",
            "72cc565fc3c2d08563f3e42346095b800c50f022"
        ],
        [
            "Notation \"A .-invariant\" := (invariant_factor A) (at level 2, format \"A .-invariant\") : group_rel_scope.",
            "VernacNotation",
            "155b0ee72fc76d4eacef7b732e27f4521ab9873b"
        ],
        [
            "Notation \"A .-stable\" := (stable_factor A) (at level 2, format \"A .-stable\") : group_rel_scope.",
            "VernacNotation",
            "149a6540066ac88fbbe4994b47b4ae966cf17bda"
        ],
        [
            "Notation \"A .-central\" := (central_factor A) (at level 2, format \"A .-central\") : group_rel_scope.",
            "VernacNotation",
            "e8e5bfa7a8b26779ef6b80d4f15e62aa668684ed"
        ],
        [
            "Notation \"G .-chief\" := (chief_factor G) (at level 2, format \"G .-chief\") : group_rel_scope.",
            "VernacNotation",
            "651609d513d1c3e68edcdf035e919accfbbd3eb4"
        ],
        [
            "Arguments group_rel_of {gT} r%group_rel_scope _%G _%G : extra scopes.",
            "VernacArguments",
            "f56ef900e01e5f978926b31c7e2bd2fc910e7279"
        ],
        [
            "Notation \"r .-series\" := (path (rel_of_simpl_rel (group_rel_of r))) (at level 2, format \"r .-series\") : group_scope.",
            "VernacNotation",
            "f4fd2208c54e2119de57e07b51ae339e0d20f025"
        ],
        [
            "Section Subnormal.",
            "VernacBeginSection",
            "02c9cd0b7cbe3e5b2dddc0e0143a4c47bae5ae52"
        ],
        [
            "Variable gT : finGroupType.",
            "VernacAssumption",
            "694477e88f23a3b7d6edaa9ed9d49ebe1ee92aa6"
        ],
        [
            "Implicit Types (A B C D : {set gT}) (G H K : {group gT}).",
            "VernacReserve",
            "d431e2961692b66d25df1cbd98f0e721516411dd"
        ],
        [
            "Let setIgr H G := (G :&: H)%G.",
            "VernacDefinition",
            "5295ecb118601968a2b562f5768a1761640084e9"
        ],
        [
            "Let sub_setIgr G H : G \\subset H -> G = setIgr H G.",
            "VernacDefinition",
            "c9e042f2a535c72d88b2631effd5aeec01a74977"
        ],
        [
            "by move/setIidPl/group_inj.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Let path_setIgr H G s : normal.-series H s -> normal.-series (setIgr G H) (map (setIgr G) s).",
            "VernacDefinition",
            "3eb99a0818da285bfd487fa27fdd6b6d9f903c6c"
        ],
        [
            "elim: s H => //= K s IHs H /andP[/andP[sHK nHK] Ksn].",
            "VernacExtend",
            "e686a1895f1799b840b76242f931100819a9ad6c"
        ],
        [
            "by rewrite /normal setSI ?normsIG ?IHs.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma subnormalP H G : reflect (exists2 s, normal.-series H s & last H s = G) (H <|<| G).",
            "VernacStartTheoremProof",
            "c93cb9d57fb4f112af3e150438d486cb86086203"
        ],
        [
            "apply: (iffP andP) => [[sHG snHG] | [s Hsn <-{G}]].",
            "VernacExtend",
            "4bd6fa79b17bcd2bfb7af091fb325367a20385d6"
        ],
        [
            "elim: {G}#|G| {-2}G sHG snHG => [|m IHm] G sHG.",
            "VernacExtend",
            "e686a1895f1799b840b76242f931100819a9ad6c"
        ],
        [
            "by exists [::]; last by apply/eqP; rewrite eq_sym.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "rewrite iterSr => /IHm[|s Hsn defG].",
            "VernacExtend",
            "3c42b53d0efc26db114b00541ac5e7fcb29e6aeb"
        ],
        [
            "by rewrite sub_gen // class_supportEr (bigD1 1) //= conjsg1 subsetUl.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "exists (rcons s G); rewrite ?last_rcons // -cats1 cat_path Hsn defG /=.",
            "VernacExtend",
            "3d5eaf18bac73c6cb9a3e470af0b170554537b27"
        ],
        [
            "rewrite /normal gen_subG class_support_subG //=.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "by rewrite norms_gen ?class_support_norm.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "set f := fun _ => <<_>>; have idf: iter _ f H == H.",
            "VernacExtend",
            "5a669f4ad2118b005921530a069ac8f03fd7f32b"
        ],
        [
            "by elim=> //= m IHm; rewrite (eqP IHm) /f class_support_id genGid.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "elim: {s}(size s) {-2}s (eqxx (size s)) Hsn => [[] //= | m IHm s].",
            "VernacExtend",
            "e686a1895f1799b840b76242f931100819a9ad6c"
        ],
        [
            "case/lastP: s => // s G; rewrite size_rcons last_rcons -cats1 cat_path /=.",
            "VernacExtend",
            "90a2acb29b7a5304b0ab6ba5269c420638ddef63"
        ],
        [
            "set K := last H s => def_m /and3P[Hsn /andP[sKG nKG] _].",
            "VernacExtend",
            "3c42b53d0efc26db114b00541ac5e7fcb29e6aeb"
        ],
        [
            "have:= sKG; rewrite subEproper; case/predU1P=> [<-|prKG]; first exact: IHm.",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "pose L := [group of f G].",
            "VernacExtend",
            "3c5f04de94609049d978298aa02ff35fb35ea7c7"
        ],
        [
            "have sHK: H \\subset K by case/IHm: Hsn.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "have sLK: L \\subset K by rewrite gen_subG class_support_sub_norm.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "rewrite -(subnK (proper_card (sub_proper_trans sLK prKG))) iter_add iterSr.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "have defH: H = setIgr L H by rewrite -sub_setIgr ?sub_gen ?sub_class_support.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "have: normal.-series H (map (setIgr L) s) by rewrite defH path_setIgr.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "case/IHm=> [|_]; first by rewrite size_map.",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "by rewrite {1 2}defH last_map (subset_trans sHK) //= (setIidPr sLK) => /eqP->.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma subnormal_refl G : G <|<| G.",
            "VernacStartTheoremProof",
            "c63542570a600effc2233af891942016bc698a68"
        ],
        [
            "by apply/subnormalP; exists [::].",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma subnormal_trans K H G : H <|<| K -> K <|<| G -> H <|<| G.",
            "VernacStartTheoremProof",
            "ee6269c73fa08b1819e2ac728f4e0aa9cd182eec"
        ],
        [
            "case/subnormalP=> [s1 Hs1 <-] /subnormalP[s2 Hs12 <-].",
            "VernacExtend",
            "e00fff71ff314c991514fc71c41a3556702e444a"
        ],
        [
            "by apply/subnormalP; exists (s1 ++ s2); rewrite ?last_cat // cat_path Hs1.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma normal_subnormal H G : H <| G -> H <|<| G.",
            "VernacStartTheoremProof",
            "83c3ee622e773b8f758d4997be97d32ec1b8a83d"
        ],
        [
            "by move=> nsHG; apply/subnormalP; exists [:: G]; rewrite //= nsHG.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma setI_subnormal G H K : K \\subset G -> H <|<| G -> H :&: K <|<| K.",
            "VernacStartTheoremProof",
            "f80fa206949bd8b284336084a5fb1744712d2538"
        ],
        [
            "move=> sKG /subnormalP[s Hs defG]; apply/subnormalP.",
            "VernacExtend",
            "d6ebf3361f380a12d5c2c9bbb7ea363132c48b36"
        ],
        [
            "exists (map (setIgr K) s); first exact: path_setIgr.",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "rewrite (last_map (setIgr K)) defG.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "by apply: val_inj; rewrite /= (setIidPr sKG).",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma subnormal_sub G H : H <|<| G -> H \\subset G.",
            "VernacStartTheoremProof",
            "fe2ca8b865366f93d5a376e4fae402b2ae94b34c"
        ],
        [
            "by case/andP.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma invariant_subnormal A G H : A \\subset 'N(G) -> A \\subset 'N(H) -> H <|<| G -> exists2 s, (A.-invariant).-series H s & last H s = G.",
            "VernacStartTheoremProof",
            "cc938836e1627240384084157bde05649d0e1c0e"
        ],
        [
            "move=> nGA nHA /andP[]; move: #|G| => m.",
            "VernacExtend",
            "8b784377bdc4d565ff66d4cf36a6041e9354c156"
        ],
        [
            "elim: m => [|m IHm] in G nGA * => sHG.",
            "VernacExtend",
            "3c42b53d0efc26db114b00541ac5e7fcb29e6aeb"
        ],
        [
            "by rewrite eq_sym; exists [::]; last apply/eqP.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "rewrite iterSr; set K := <<_>>.",
            "VernacExtend",
            "c1f58f36c5711f022b4a54717f37c2782f34a159"
        ],
        [
            "have nKA: A \\subset 'N(K) by rewrite norms_gen ?norms_class_support.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "have sHK: H \\subset K by rewrite sub_gen ?sub_class_support.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "case/IHm=> // s Hsn defK; exists (rcons s G); last by rewrite last_rcons.",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "rewrite rcons_path Hsn !andbA defK nGA nKA /= -/K.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "by rewrite gen_subG class_support_subG ?norms_gen ?class_support_norm.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma subnormalEsupport G H : H <|<| G -> H :=: G \\/ <<class_support H G>> \\proper G.",
            "VernacStartTheoremProof",
            "33fc2c849cb5b7cef5c8cc328931641101cbd951"
        ],
        [
            "case/andP=> sHG; set K := <<_>> => /eqP <-.",
            "VernacExtend",
            "ba44c9d0281a02110ce54645304e6d990debd9c0"
        ],
        [
            "have: K \\subset G by rewrite gen_subG class_support_subG.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "rewrite subEproper; case/predU1P=> [defK|]; [left | by right].",
            "VernacExtend",
            "6fed6ead3bd8efa10f41904c14a4d1b7a9d472ad"
        ],
        [
            "by elim: #|G| => //= _ ->.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma subnormalEr G H : H <|<| G -> H :=: G \\/ (exists K : {group gT}, [/\\ H <|<| K, K <| G & K \\proper G]).",
            "VernacStartTheoremProof",
            "c143f064743beede0434f77b7bb7fef212a9a80e"
        ],
        [
            "case/subnormalP=> s Hs <-{G}.",
            "VernacExtend",
            "e00fff71ff314c991514fc71c41a3556702e444a"
        ],
        [
            "elim/last_ind: s Hs => [|s G IHs]; first by left.",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "rewrite last_rcons -cats1 cat_path /= andbT; set K := last H s.",
            "VernacExtend",
            "c1f58f36c5711f022b4a54717f37c2782f34a159"
        ],
        [
            "case/andP=> Hs nsKG; have:= normal_sub nsKG; rewrite subEproper.",
            "VernacExtend",
            "72030757942d2ba787a471fbd4a39cc13d2b9b88"
        ],
        [
            "case/predU1P=> [<- | prKG]; [exact: IHs | right; exists K; split=> //].",
            "VernacExtend",
            "d6fe8c40a8e5395e24817b5f09b269dcb5748579"
        ],
        [
            "by apply/subnormalP; exists s.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma subnormalEl G H : H <|<| G -> H :=: G \\/ (exists K : {group gT}, [/\\ H <| K, K <|<| G & H \\proper K]).",
            "VernacStartTheoremProof",
            "5455d264bf9a3fd1be54e9bb8b97f27b4c359973"
        ],
        [
            "case/subnormalP=> s Hs <-{G}; elim: s H Hs => /= [|K s IHs] H; first by left.",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "case/andP=> nsHK Ks; have:= normal_sub nsHK; rewrite subEproper.",
            "VernacExtend",
            "72030757942d2ba787a471fbd4a39cc13d2b9b88"
        ],
        [
            "case/predU1P=> [-> | prHK]; [exact: IHs | right; exists K; split=> //].",
            "VernacExtend",
            "d6fe8c40a8e5395e24817b5f09b269dcb5748579"
        ],
        [
            "by apply/subnormalP; exists s.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "End Subnormal.",
            "VernacEndSegment",
            "a6796694e1a552fca43dc9b65d58f1f33a37c93b"
        ],
        [
            "Arguments subnormalP {gT H G}.",
            "VernacArguments",
            "821ba42ae4fbaa1fb80c801f4ddc426c25972df6"
        ],
        [
            "Section MorphSubNormal.",
            "VernacBeginSection",
            "46aa25a6a8ff1274c2b67af3313024ce1da05525"
        ],
        [
            "Variable gT : finGroupType.",
            "VernacAssumption",
            "694477e88f23a3b7d6edaa9ed9d49ebe1ee92aa6"
        ],
        [
            "Implicit Type G H K : {group gT}.",
            "VernacReserve",
            "d934fb2556cba7e244425668dbf69ab4b3ba551e"
        ],
        [
            "Lemma morphim_subnormal (rT : finGroupType) G (f : {morphism G >-> rT}) H K : H <|<| K -> f @* H <|<| f @* K.",
            "VernacStartTheoremProof",
            "970267d1b87541aaf51bd8251502228421d24be4"
        ],
        [
            "case/subnormalP => s Hs <-{K}; apply/subnormalP.",
            "VernacExtend",
            "d62e4c271de3f2a9ff5062b8b89d3c57d965c518"
        ],
        [
            "elim: s H Hs => [|K s IHs] H /=; first by exists [::].",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "case/andP=> nsHK /IHs[fs Hfs <-].",
            "VernacExtend",
            "e00fff71ff314c991514fc71c41a3556702e444a"
        ],
        [
            "by exists ([group of f @* K] :: fs); rewrite /= ?morphim_normal.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma quotient_subnormal H G K : G <|<| K -> G / H <|<| K / H.",
            "VernacStartTheoremProof",
            "8e02662bb134cb063eca0cfc6d86e9cf3760c9b6"
        ],
        [
            "exact: morphim_subnormal.",
            "VernacExtend",
            "ce637ff86bafca5d8359473e8c02af644dcbdc43"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "End MorphSubNormal.",
            "VernacEndSegment",
            "36d948c54dd5b8b10c9a9a214b32e806f2b56fcb"
        ],
        [
            "Section MaxProps.",
            "VernacBeginSection",
            "ddf8a8bbc33eb2eee23e72cc23bf690a611d8944"
        ],
        [
            "Variable gT : finGroupType.",
            "VernacAssumption",
            "694477e88f23a3b7d6edaa9ed9d49ebe1ee92aa6"
        ],
        [
            "Implicit Types G H M : {group gT}.",
            "VernacReserve",
            "9a179ae47548415365abf63b42e88679718e234b"
        ],
        [
            "Lemma maximal_eqP M G : reflect (M \\subset G /\\ forall H, M \\subset H -> H \\subset G -> H :=: M \\/ H :=: G) (maximal_eq M G).",
            "VernacStartTheoremProof",
            "2294402ccac84d37f8c20284fa62714a1ad4cb6f"
        ],
        [
            "rewrite subEproper /maximal_eq; case: eqP => [->|_]; first left.",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "by split=> // H sGH sHG; right; apply/eqP; rewrite eqEsubset sHG.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "apply: (iffP maxgroupP) => [] [sMG maxM]; split=> // H.",
            "VernacExtend",
            "5fce7e5361004176d6b434b36b4623c7387f70bb"
        ],
        [
            "by move/maxM=> maxMH; rewrite subEproper; case/predU1P; auto.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "by rewrite properEneq => /andP[/eqP neHG sHG] /maxM[].",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma maximal_exists H G : H \\subset G -> H :=: G \\/ (exists2 M : {group gT}, maximal M G & H \\subset M).",
            "VernacStartTheoremProof",
            "faf42cf33cac3d966fd2e4ffa9f9e83da2621e9d"
        ],
        [
            "rewrite subEproper; case/predU1P=> sHG; first by left.",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "suff [M *]: {M : {group gT} | maximal M G & H \\subset M} by right; exists M.",
            "VernacExtend",
            "d07fc8b2103f140554938023774bf3f75d04ba99"
        ],
        [
            "exact: maxgroup_exists.",
            "VernacExtend",
            "ce637ff86bafca5d8359473e8c02af644dcbdc43"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma mulg_normal_maximal G M H : M <| G -> maximal M G -> H \\subset G -> ~~ (H \\subset M) -> (M * H = G)%g.",
            "VernacStartTheoremProof",
            "72fe10a99ffae522caa7e28965b2cb26d3985ba8"
        ],
        [
            "case/andP=> sMG nMG /maxgroupP[_ maxM] sHG not_sHM.",
            "VernacExtend",
            "e00fff71ff314c991514fc71c41a3556702e444a"
        ],
        [
            "apply/eqP; rewrite eqEproper mul_subG // -norm_joinEr ?(subset_trans sHG) //.",
            "VernacExtend",
            "56c014161b39aecfb3c54301c2409dba4e8e1857"
        ],
        [
            "by apply: contra not_sHM => /maxM <-; rewrite ?joing_subl ?joing_subr.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "End MaxProps.",
            "VernacEndSegment",
            "bde6a4df5a11cbc77dfefb003c7c11fa5ad9c68c"
        ],
        [
            "Section MinProps.",
            "VernacBeginSection",
            "2fd147e9c8caa7072f21802cecce69705017ce57"
        ],
        [
            "Variable gT : finGroupType.",
            "VernacAssumption",
            "694477e88f23a3b7d6edaa9ed9d49ebe1ee92aa6"
        ],
        [
            "Implicit Types G H M : {group gT}.",
            "VernacReserve",
            "9a179ae47548415365abf63b42e88679718e234b"
        ],
        [
            "Lemma minnormal_exists G H : H :!=: 1 -> G \\subset 'N(H) -> {M : {group gT} | minnormal M G & M \\subset H}.",
            "VernacStartTheoremProof",
            "c2fc62b1bb6946fe231965bc8a24937983194096"
        ],
        [
            "by move=> ntH nHG; apply: mingroup_exists (H) _; rewrite ntH.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "End MinProps.",
            "VernacEndSegment",
            "e865366939f80f97fb656b81fba7378c98bf9df4"
        ],
        [
            "Section MorphPreMax.",
            "VernacBeginSection",
            "551700cbd880a7bed253c0c9ae3c18726bd0860f"
        ],
        [
            "Variables (gT rT : finGroupType) (D : {group gT}) (f : {morphism D >-> rT}).",
            "VernacAssumption",
            "944231f8f6fa13f052da0e9f920e07639709a90d"
        ],
        [
            "Variables (M G : {group rT}).",
            "VernacAssumption",
            "e9e15c0d04b651d6c29a4ca1e5e8726f59bcb6f8"
        ],
        [
            "Hypotheses (dM : M \\subset f @* D) (dG : G \\subset f @* D).",
            "VernacAssumption",
            "715f93546264edb7cbc02b47f623573cad7f3120"
        ],
        [
            "Lemma morphpre_maximal : maximal (f @*^-1 M) (f @*^-1 G) = maximal M G.",
            "VernacStartTheoremProof",
            "5808f89b805532ab7736c6c8bc43a235d3dae036"
        ],
        [
            "apply/maxgroupP/maxgroupP; rewrite morphpre_proper //= => [] [ltMG maxM].",
            "VernacExtend",
            "5fce7e5361004176d6b434b36b4623c7387f70bb"
        ],
        [
            "split=> // H ltHG sMH; have dH := subset_trans (proper_sub ltHG) dG.",
            "VernacExtend",
            "d2991b7607b6316c9d43d28c85f87ca601299ca6"
        ],
        [
            "rewrite -(morphpreK dH) [f @*^-1 H]maxM ?morphpreK ?morphpreSK //.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "by rewrite morphpre_proper.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "split=> // H ltHG sMH.",
            "VernacExtend",
            "3c42b53d0efc26db114b00541ac5e7fcb29e6aeb"
        ],
        [
            "have dH: H \\subset D := subset_trans (proper_sub ltHG) (subsetIl D _).",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "have defH: f @*^-1 (f @* H) = H.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "by apply: morphimGK dH; apply: subset_trans sMH; apply: ker_sub_pre.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "rewrite -defH morphpre_proper ?morphimS // in ltHG.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "by rewrite -defH [f @* H]maxM // -(morphpreK dM) morphimS.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma morphpre_maximal_eq : maximal_eq (f @*^-1 M) (f @*^-1 G) = maximal_eq M G.",
            "VernacStartTheoremProof",
            "157f9ebd3cfa22891791144daf7274565df7a285"
        ],
        [
            "by rewrite /maximal_eq morphpre_maximal !eqEsubset !morphpreSK.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "End MorphPreMax.",
            "VernacEndSegment",
            "df27c9fc8d571cd4210174b238ab5ea5b11ec5d3"
        ],
        [
            "Section InjmMax.",
            "VernacBeginSection",
            "c039037768280684b4c0e6c35790f89f3ea46e1d"
        ],
        [
            "Variables (gT rT : finGroupType) (D : {group gT}) (f : {morphism D >-> rT}).",
            "VernacAssumption",
            "944231f8f6fa13f052da0e9f920e07639709a90d"
        ],
        [
            "Variables M G L : {group gT}.",
            "VernacAssumption",
            "416dd7c6e5ec11ebd062fb2d4e397b784cda4f49"
        ],
        [
            "Hypothesis injf : 'injm f.",
            "VernacAssumption",
            "dfe88b2cb5b173c19dfc3fb4cf4ba993ad9b40f5"
        ],
        [
            "Hypotheses (dM : M \\subset D) (dG : G \\subset D) (dL : L \\subset D).",
            "VernacAssumption",
            "e6d994ac4020d43e06169dd04c4836d645a9f9bb"
        ],
        [
            "Lemma injm_maximal : maximal (f @* M) (f @* G) = maximal M G.",
            "VernacStartTheoremProof",
            "4e9670057e310f6f0442dc1b6499ae1d1c50c39b"
        ],
        [
            "rewrite -(morphpre_invm injf) -(morphpre_invm injf G).",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "by rewrite morphpre_maximal ?morphim_invm.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma injm_maximal_eq : maximal_eq (f @* M) (f @* G) = maximal_eq M G.",
            "VernacStartTheoremProof",
            "70bb73701509d83ad333746d15a8f43b05d0bfa7"
        ],
        [
            "by rewrite /maximal_eq injm_maximal // injm_eq.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma injm_maxnormal : maxnormal (f @* M) (f @* G) (f @* L) = maxnormal M G L.",
            "VernacStartTheoremProof",
            "ea8364fa1cd1157af6958db7e8c3a30108a04ac6"
        ],
        [
            "pose injfm := (injm_proper injf, injm_norms, injmSK injf, subsetIl).",
            "VernacExtend",
            "3c5f04de94609049d978298aa02ff35fb35ea7c7"
        ],
        [
            "apply/maxgroupP/maxgroupP; rewrite !injfm // => [[nML maxM]].",
            "VernacExtend",
            "5fce7e5361004176d6b434b36b4623c7387f70bb"
        ],
        [
            "split=> // H nHL sMH; have [/proper_sub sHG _] := andP nHL.",
            "VernacExtend",
            "d2991b7607b6316c9d43d28c85f87ca601299ca6"
        ],
        [
            "have dH := subset_trans sHG dG; apply: (injm_morphim_inj injf) => //.",
            "VernacExtend",
            "af1e5df3b072070e589731222b14b19e1cb478bc"
        ],
        [
            "by apply: maxM; rewrite !injfm.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "split=> // fH nHL sMH; have [/proper_sub sfHG _] := andP nHL.",
            "VernacExtend",
            "d2991b7607b6316c9d43d28c85f87ca601299ca6"
        ],
        [
            "have{sfHG} dfH: fH \\subset f @* D := subset_trans sfHG (morphim_sub f G).",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "by rewrite -(morphpreK dfH) !injfm // in nHL sMH *; rewrite (maxM _ nHL).",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma injm_minnormal : minnormal (f @* M) (f @* G) = minnormal M G.",
            "VernacStartTheoremProof",
            "db3443b21c613ff59600e81221a6173d500e8b8d"
        ],
        [
            "pose injfm := (morphim_injm_eq1 injf, injm_norms, injmSK injf, subsetIl).",
            "VernacExtend",
            "3c5f04de94609049d978298aa02ff35fb35ea7c7"
        ],
        [
            "apply/mingroupP/mingroupP; rewrite !injfm // => [[nML minM]].",
            "VernacExtend",
            "5fce7e5361004176d6b434b36b4623c7387f70bb"
        ],
        [
            "split=> // H nHG sHM; have dH := subset_trans sHM dM.",
            "VernacExtend",
            "d2991b7607b6316c9d43d28c85f87ca601299ca6"
        ],
        [
            "by apply: (injm_morphim_inj injf) => //; apply: minM; rewrite !injfm.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "split=> // fH nHG sHM; have dfH := subset_trans sHM (morphim_sub f M).",
            "VernacExtend",
            "d2991b7607b6316c9d43d28c85f87ca601299ca6"
        ],
        [
            "by rewrite -(morphpreK dfH) !injfm // in nHG sHM *; rewrite (minM _ nHG).",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "End InjmMax.",
            "VernacEndSegment",
            "e05fa698f7e7bb5430facbdf5d8e607c9e0c76ad"
        ],
        [
            "Section QuoMax.",
            "VernacBeginSection",
            "32903c91b02b51f07c3cdbedac6e61549668e09c"
        ],
        [
            "Variables (gT : finGroupType) (K G H : {group gT}).",
            "VernacAssumption",
            "35bd856afd0c5304f92131872bf8760d50a5703d"
        ],
        [
            "Lemma cosetpre_maximal (Q R : {group coset_of K}) : maximal (coset K @*^-1 Q) (coset K @*^-1 R) = maximal Q R.",
            "VernacStartTheoremProof",
            "6a09b6395b1d27b05ad9ef92ef2313ef855df975"
        ],
        [
            "by rewrite morphpre_maximal ?sub_im_coset.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma cosetpre_maximal_eq (Q R : {group coset_of K}) : maximal_eq (coset K @*^-1 Q) (coset K @*^-1 R) = maximal_eq Q R.",
            "VernacStartTheoremProof",
            "45fa2fb7b7f0d61f7aa1a66c3064f2718d50b5d8"
        ],
        [
            "by rewrite /maximal_eq !eqEsubset !cosetpreSK cosetpre_maximal.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma quotient_maximal : K <| G -> K <| H -> maximal (G / K) (H / K) = maximal G H.",
            "VernacStartTheoremProof",
            "a57924c25d2931d2755b55f8594d4ad3d869885a"
        ],
        [
            "by move=> nKG nKH; rewrite -cosetpre_maximal ?quotientGK.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma quotient_maximal_eq : K <| G -> K <| H -> maximal_eq (G / K) (H / K) = maximal_eq G H.",
            "VernacStartTheoremProof",
            "b14cc54ce45803d709f80b226a7678c0f83ad1d1"
        ],
        [
            "by move=> nKG nKH; rewrite -cosetpre_maximal_eq ?quotientGK.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma maximalJ x : maximal (G :^ x) (H :^ x) = maximal G H.",
            "VernacStartTheoremProof",
            "6c60f6538a26f16d436f986aa5aa0f29d9cc0e38"
        ],
        [
            "rewrite -{1}(setTI G) -{1}(setTI H) -!morphim_conj.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "by rewrite injm_maximal ?subsetT ?injm_conj.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma maximal_eqJ x : maximal_eq (G :^ x) (H :^ x) = maximal_eq G H.",
            "VernacStartTheoremProof",
            "ba91625b7693b953b8775095f1367af2eabcbaab"
        ],
        [
            "by rewrite /maximal_eq !eqEsubset !conjSg maximalJ.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "End QuoMax.",
            "VernacEndSegment",
            "a45196f60f66a81952d12e1e895a279afd7a6216"
        ],
        [
            "Section MaxNormalProps.",
            "VernacBeginSection",
            "f6bba265ad6f3d63633e22d4e930053796b1d929"
        ],
        [
            "Variables (gT : finGroupType).",
            "VernacAssumption",
            "694477e88f23a3b7d6edaa9ed9d49ebe1ee92aa6"
        ],
        [
            "Implicit Types (A B C : {set gT}) (G H K L M : {group gT}).",
            "VernacReserve",
            "f6f760c7877a41507a3da6c73e967fec5e165186"
        ],
        [
            "Lemma maxnormal_normal A B : maxnormal A B B -> A <| B.",
            "VernacStartTheoremProof",
            "5ca2a3782b275f192e1881fc7a7b68552691c7bd"
        ],
        [
            "by case/maxsetP=> /and3P[/gen_set_id /= -> pAB nAB]; rewrite /normal proper_sub.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma maxnormal_proper A B C : maxnormal A B C -> A \\proper B.",
            "VernacStartTheoremProof",
            "6a2dd58752c78e1bdb081d3e9f811d2e3743e3f9"
        ],
        [
            "by case/maxsetP=> /and3P[gA pAB _] _; apply: (sub_proper_trans (subset_gen A)).",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma maxnormal_sub A B C : maxnormal A B C -> A \\subset B.",
            "VernacStartTheoremProof",
            "abd7a660e0ce6d42a234aaf411e71dc58ac396fe"
        ],
        [
            "by move=> maxA; rewrite proper_sub //; apply: (maxnormal_proper maxA).",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma ex_maxnormal_ntrivg G : G :!=: 1-> {N : {group gT} | maxnormal N G G}.",
            "VernacStartTheoremProof",
            "c8ac1d11c6d16d4487982036ce28ed81d5a6828f"
        ],
        [
            "move=> ntG; apply: ex_maxgroup; exists [1 gT]%G; rewrite norm1 proper1G.",
            "VernacExtend",
            "2ae3e98e575dbab8b1695783829108b1b7a30901"
        ],
        [
            "by rewrite subsetT ntG.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma maxnormalM G H K : maxnormal H G G -> maxnormal K G G -> H :<>: K -> H * K = G.",
            "VernacStartTheoremProof",
            "8450768bda496cf0393de4b5ccee033465b048fb"
        ],
        [
            "move=> maxH maxK /eqP; apply: contraNeq => ltHK_G.",
            "VernacExtend",
            "d6ebf3361f380a12d5c2c9bbb7ea363132c48b36"
        ],
        [
            "have [nsHG nsKG] := (maxnormal_normal maxH, maxnormal_normal maxK).",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "have cHK: commute H K.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "exact: normC (subset_trans (normal_sub nsHG) (normal_norm nsKG)).",
            "VernacExtend",
            "ce637ff86bafca5d8359473e8c02af644dcbdc43"
        ],
        [
            "wlog suffices: H K {maxH} maxK nsHG nsKG cHK ltHK_G / H \\subset K.",
            "VernacExtend",
            "348aa27e7c84ea4ca2ac06b8a3b3db24e74b6ad7"
        ],
        [
            "by move=> IH; rewrite eqEsubset !IH // -cHK.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "have{maxK} /maxgroupP[_ maxK] := maxK.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "apply/joing_idPr/maxK; rewrite ?joing_subr //= comm_joingE //.",
            "VernacExtend",
            "56c014161b39aecfb3c54301c2409dba4e8e1857"
        ],
        [
            "by rewrite properEneq ltHK_G; apply: normalM.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma maxnormal_minnormal G L M : G \\subset 'N(M) -> L \\subset 'N(G) -> maxnormal M G L -> minnormal (G / M) (L / M).",
            "VernacStartTheoremProof",
            "d0b05f82257b5aa798010c68c501c0880cda6d58"
        ],
        [
            "move=> nMG nGL /maxgroupP[/andP[/andP[sMG ltMG] nML] maxM]; apply/mingroupP.",
            "VernacExtend",
            "d6ebf3361f380a12d5c2c9bbb7ea363132c48b36"
        ],
        [
            "rewrite -subG1 quotient_sub1 ?ltMG ?quotient_norms //.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "split=> // Hb /andP[ntHb nHbL]; have nsMG: M <| G by apply/andP.",
            "VernacExtend",
            "d2991b7607b6316c9d43d28c85f87ca601299ca6"
        ],
        [
            "case/inv_quotientS=> // H defHb sMH sHG; rewrite defHb; congr (_ / M).",
            "VernacExtend",
            "5d2065da6735eb7f30312e156e81044fd654e048"
        ],
        [
            "apply/eqP; rewrite eqEproper sHG /=; apply: contra ntHb => ltHG.",
            "VernacExtend",
            "da24caf87c1bbbad0538b8be68905ec456c78aa7"
        ],
        [
            "have nsMH: M <| H := normalS sMH sHG nsMG.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "rewrite defHb quotientS1 // (maxM H) // ltHG /= -(quotientGK nsMH) -defHb.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "exact: norm_quotient_pre.",
            "VernacExtend",
            "ce637ff86bafca5d8359473e8c02af644dcbdc43"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma minnormal_maxnormal G L M : M <| G -> L \\subset 'N(M) -> minnormal (G / M) (L / M) -> maxnormal M G L.",
            "VernacStartTheoremProof",
            "2f293c15c3857e705f3d2c7576d0306c7715efaf"
        ],
        [
            "case/andP=> sMG nMG nML /mingroupP[/andP[/= ntGM _] minGM]; apply/maxgroupP.",
            "VernacExtend",
            "d62e4c271de3f2a9ff5062b8b89d3c57d965c518"
        ],
        [
            "split=> [|H /andP[/andP[sHG ltHG] nHL] sMH].",
            "VernacExtend",
            "3c42b53d0efc26db114b00541ac5e7fcb29e6aeb"
        ],
        [
            "by rewrite /proper sMG nML andbT; apply: contra ntGM => /quotientS1 ->.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "apply/eqP; rewrite eqEsubset sMH andbT -quotient_sub1 ?(subset_trans sHG) //.",
            "VernacExtend",
            "56c014161b39aecfb3c54301c2409dba4e8e1857"
        ],
        [
            "rewrite subG1; apply: contraR ltHG => ntHM; rewrite -(quotientSGK nMG) //.",
            "VernacExtend",
            "fe8f197e86415fc7f0a74eda9d312128b9473eda"
        ],
        [
            "by rewrite (minGM (H / M)%G) ?quotientS // ntHM quotient_norms.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "End MaxNormalProps.",
            "VernacEndSegment",
            "5d236f2692a9703938ea34407de66f945bd45cf5"
        ],
        [
            "Section Simple.",
            "VernacBeginSection",
            "6e2e7e81671021a59810928eb2f490a42fc027ae"
        ],
        [
            "Implicit Types gT rT : finGroupType.",
            "VernacReserve",
            "a8f8cc577f5b1ea7d7ddc27aebbd738660947541"
        ],
        [
            "Lemma simpleP gT (G : {group gT}) : reflect (G :!=: 1 /\\ forall H : {group gT}, H <| G -> H :=: 1 \\/ H :=: G) (simple G).",
            "VernacStartTheoremProof",
            "675d6f8b110a0f55a9c41b35f179308ab9321d01"
        ],
        [
            "apply: (iffP mingroupP); rewrite normG andbT => [[ntG simG]].",
            "VernacExtend",
            "5fce7e5361004176d6b434b36b4623c7387f70bb"
        ],
        [
            "split=> // N /andP[sNG nNG].",
            "VernacExtend",
            "3c42b53d0efc26db114b00541ac5e7fcb29e6aeb"
        ],
        [
            "by case: (eqsVneq N 1) => [|ntN]; [left | right; apply: simG; rewrite ?ntN].",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "split=> // N /andP[ntN nNG] sNG.",
            "VernacExtend",
            "3c42b53d0efc26db114b00541ac5e7fcb29e6aeb"
        ],
        [
            "by case: (simG N) ntN => // [|->]; [apply/andP | case/eqP].",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma quotient_simple gT (G H : {group gT}) : H <| G -> simple (G / H) = maxnormal H G G.",
            "VernacStartTheoremProof",
            "84f1ba79d190200ba7699c3d9eec4388d29bff9e"
        ],
        [
            "move=> nsHG; have nGH := normal_norm nsHG.",
            "VernacExtend",
            "ccd83c252dcbae3d56f3d057fcb8217878b51901"
        ],
        [
            "by apply/idP/idP; [apply: minnormal_maxnormal | apply: maxnormal_minnormal].",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma isog_simple gT rT (G : {group gT}) (M : {group rT}) : G \\isog M -> simple G = simple M.",
            "VernacStartTheoremProof",
            "1e2f5654d11893140e9b849c1b42ff67243c8bc8"
        ],
        [
            "move=> eqGM; wlog suffices: gT rT G M eqGM / simple M -> simple G.",
            "VernacExtend",
            "33541f5bcc357bbc2a07c2295895b9f3385c3b61"
        ],
        [
            "by move=> IH; apply/idP/idP; apply: IH; rewrite // isog_sym.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "case/isogP: eqGM => f injf <- /simpleP[ntGf simGf].",
            "VernacExtend",
            "e00fff71ff314c991514fc71c41a3556702e444a"
        ],
        [
            "apply/simpleP; split=> [|N nsNG]; first by rewrite -(morphim_injm_eq1 injf).",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "rewrite -(morphim_invm injf (normal_sub nsNG)).",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "have: f @* N <| f @* G by rewrite morphim_normal.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "by case/simGf=> /= ->; [left | right]; rewrite (morphim1, morphim_invm).",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma simple_maxnormal gT (G : {group gT}) : simple G = maxnormal 1 G G.",
            "VernacStartTheoremProof",
            "5cd11f0e6cb8ad01f93c2fb0711e1836ad73267d"
        ],
        [
            "by rewrite -quotient_simple ?normal1 // -(isog_simple (quotient1_isog G)).",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "End Simple.",
            "VernacEndSegment",
            "feaaecbe7e80d836683a5180c8d2172626b14894"
        ],
        [
            "Section Chiefs.",
            "VernacBeginSection",
            "b9810dd13414047dcccd1be1d75c9e8c13669027"
        ],
        [
            "Variable gT : finGroupType.",
            "VernacAssumption",
            "694477e88f23a3b7d6edaa9ed9d49ebe1ee92aa6"
        ],
        [
            "Implicit Types G H U V : {group gT}.",
            "VernacReserve",
            "644eff362264fab8d45c80ccaf3e60b7806f5835"
        ],
        [
            "Lemma chief_factor_minnormal G V U : chief_factor G V U -> minnormal (U / V) (G / V).",
            "VernacStartTheoremProof",
            "ca45de5f54021b9b2dcc09100eebb79a79edc936"
        ],
        [
            "case/andP=> maxV /andP[sUG nUG]; apply: maxnormal_minnormal => //.",
            "VernacExtend",
            "d62e4c271de3f2a9ff5062b8b89d3c57d965c518"
        ],
        [
            "by have /andP[_ nVG] := maxgroupp maxV; apply: subset_trans sUG nVG.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma acts_irrQ G U V : G \\subset 'N(V) -> V <| U -> acts_irreducibly G (U / V) 'Q = minnormal (U / V) (G / V).",
            "VernacStartTheoremProof",
            "6fc7d174df0fa1d77624af5542ba8ff8989067a6"
        ],
        [
            "move=> nVG nsVU; apply/mingroupP/mingroupP; case=> /andP[->] /=.",
            "VernacExtend",
            "1b05ef00a6bc4c06259b49aa79e4d38841eab3ab"
        ],
        [
            "rewrite astabsQ // subsetI nVG /= => nUG minUV.",
            "VernacExtend",
            "3c42b53d0efc26db114b00541ac5e7fcb29e6aeb"
        ],
        [
            "rewrite quotient_norms //; split=> // H /andP[ntH nHG] sHU.",
            "VernacExtend",
            "80e7cce19c53eb5d5a21aafd83e552d37e23084a"
        ],
        [
            "by apply: minUV (sHU); rewrite ntH -(cosetpreK H) actsQ // norm_quotient_pre.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "rewrite sub_quotient_pre // => nUG minU; rewrite astabsQ //.",
            "VernacExtend",
            "82d53976234637e3f0907eb36cddf61d028c6306"
        ],
        [
            "rewrite (subset_trans nUG); last first.",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "by rewrite subsetI subsetIl /= -{2}(quotientGK nsVU) morphpre_norm.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "split=> // H /andP[ntH nHG] sHU.",
            "VernacExtend",
            "3c42b53d0efc26db114b00541ac5e7fcb29e6aeb"
        ],
        [
            "rewrite -{1}(cosetpreK H) astabsQ ?normal_cosetpre ?subsetI ?nVG //= in nHG.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "apply: minU sHU; rewrite ntH; apply: subset_trans (quotientS _ nHG) _.",
            "VernacExtend",
            "da24caf87c1bbbad0538b8be68905ec456c78aa7"
        ],
        [
            "by rewrite -{2}(cosetpreK H) quotient_norm.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma chief_series_exists H G : H <| G -> {s | (G.-chief).-series 1%G s & last 1%G s = H}.",
            "VernacStartTheoremProof",
            "4c60b7701a9c3d7a567e782a1ea3ef8d993ac62f"
        ],
        [
            "elim: {H}_.+1 {-2}H (ltnSn #|H|) => // m IHm U leUm nsUG.",
            "VernacExtend",
            "e686a1895f1799b840b76242f931100819a9ad6c"
        ],
        [
            "have [-> | ntU] := eqVneq U 1%G; first by exists [::].",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "have [V maxV]: {V : {group gT} | maxnormal V U G}.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "by apply: ex_maxgroup; exists 1%G; rewrite proper1G ntU norms1.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "have /andP[ltVU nVG] := maxgroupp maxV.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "have [||s ch_s defV] := IHm V; first exact: leq_trans (proper_card ltVU) _.",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "by rewrite /normal (subset_trans (proper_sub ltVU) (normal_sub nsUG)).",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "exists (rcons s U); last by rewrite last_rcons.",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "by rewrite rcons_path defV /= ch_s /chief_factor; apply/and3P.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "End Chiefs.",
            "VernacEndSegment",
            "596e442386c566989c678f6a8a7d91e838eaf454"
        ],
        [
            "Section Central.",
            "VernacBeginSection",
            "bca0ac27f203dfd1c44abae87899c086ccd1745e"
        ],
        [
            "Variables (gT : finGroupType) (G : {group gT}).",
            "VernacAssumption",
            "26cb7d9f8ae434831772d6c107d7cf3e4590cb48"
        ],
        [
            "Implicit Types H K : {group gT}.",
            "VernacReserve",
            "c3c80d8e595c9f3547434ee7cdd042e060142ab6"
        ],
        [
            "Lemma central_factor_central H K : central_factor G H K -> (K / H) \\subset 'Z(G / H).",
            "VernacStartTheoremProof",
            "b03c1b5a1b147bdf38f7c69ebd10f6d6ad083991"
        ],
        [
            "by case/and3P=> /quotient_cents2r *; rewrite subsetI quotientS.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma central_central_factor H K : (K / H) \\subset 'Z(G / H) -> H <| K -> H <| G -> central_factor G H K.",
            "VernacStartTheoremProof",
            "d19edeb055ffc6622f09adc750c15530bd07aff0"
        ],
        [
            "case/subsetIP=> sKGb cGKb /andP[sHK nHK] /andP[sHG nHG].",
            "VernacExtend",
            "e00fff71ff314c991514fc71c41a3556702e444a"
        ],
        [
            "by rewrite /central_factor -quotient_cents2 // cGKb sHK -(quotientSGK nHK).",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "End Central.",
            "VernacEndSegment",
            "07bd3babece73377e45737d7795e6eef1a325a54"
        ]
    ],
    "proofs": [
        {
            "name": "sub_setIgr",
            "line_nb": 45,
            "steps": [
                {
                    "command": [
                        "by move/setIidPl/group_inj.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "path_setIgr",
            "line_nb": 48,
            "steps": [
                {
                    "command": [
                        "elim: s H => //= K s IHs H /andP[/andP[sHK nHK] Ksn].",
                        "VernacExtend",
                        "e686a1895f1799b840b76242f931100819a9ad6c"
                    ]
                },
                {
                    "command": [
                        "by rewrite /normal setSI ?normsIG ?IHs.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "subnormalP",
            "line_nb": 52,
            "steps": [
                {
                    "command": [
                        "apply: (iffP andP) => [[sHG snHG] | [s Hsn <-{G}]].",
                        "VernacExtend",
                        "4bd6fa79b17bcd2bfb7af091fb325367a20385d6"
                    ]
                },
                {
                    "command": [
                        "elim: {G}#|G| {-2}G sHG snHG => [|m IHm] G sHG.",
                        "VernacExtend",
                        "e686a1895f1799b840b76242f931100819a9ad6c"
                    ]
                },
                {
                    "command": [
                        "by exists [::]; last by apply/eqP; rewrite eq_sym.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "rewrite iterSr => /IHm[|s Hsn defG].",
                        "VernacExtend",
                        "3c42b53d0efc26db114b00541ac5e7fcb29e6aeb"
                    ]
                },
                {
                    "command": [
                        "by rewrite sub_gen // class_supportEr (bigD1 1) //= conjsg1 subsetUl.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "exists (rcons s G); rewrite ?last_rcons // -cats1 cat_path Hsn defG /=.",
                        "VernacExtend",
                        "3d5eaf18bac73c6cb9a3e470af0b170554537b27"
                    ]
                },
                {
                    "command": [
                        "rewrite /normal gen_subG class_support_subG //=.",
                        "VernacExtend",
                        "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
                    ]
                },
                {
                    "command": [
                        "by rewrite norms_gen ?class_support_norm.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "set f := fun _ => <<_>>; have idf: iter _ f H == H.",
                        "VernacExtend",
                        "5a669f4ad2118b005921530a069ac8f03fd7f32b"
                    ]
                },
                {
                    "command": [
                        "by elim=> //= m IHm; rewrite (eqP IHm) /f class_support_id genGid.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "elim: {s}(size s) {-2}s (eqxx (size s)) Hsn => [[] //= | m IHm s].",
                        "VernacExtend",
                        "e686a1895f1799b840b76242f931100819a9ad6c"
                    ]
                },
                {
                    "command": [
                        "case/lastP: s => // s G; rewrite size_rcons last_rcons -cats1 cat_path /=.",
                        "VernacExtend",
                        "90a2acb29b7a5304b0ab6ba5269c420638ddef63"
                    ]
                },
                {
                    "command": [
                        "set K := last H s => def_m /and3P[Hsn /andP[sKG nKG] _].",
                        "VernacExtend",
                        "3c42b53d0efc26db114b00541ac5e7fcb29e6aeb"
                    ]
                },
                {
                    "command": [
                        "have:= sKG; rewrite subEproper; case/predU1P=> [<-|prKG]; first exact: IHm.",
                        "VernacExtend",
                        "3763a4b8db689af316a7372b722bb29806ab4fb6"
                    ]
                },
                {
                    "command": [
                        "pose L := [group of f G].",
                        "VernacExtend",
                        "3c5f04de94609049d978298aa02ff35fb35ea7c7"
                    ]
                },
                {
                    "command": [
                        "have sHK: H \\subset K by case/IHm: Hsn.",
                        "VernacExtend",
                        "406cde1174359c53bf162a2a18c4eede395555f9"
                    ]
                },
                {
                    "command": [
                        "have sLK: L \\subset K by rewrite gen_subG class_support_sub_norm.",
                        "VernacExtend",
                        "406cde1174359c53bf162a2a18c4eede395555f9"
                    ]
                },
                {
                    "command": [
                        "rewrite -(subnK (proper_card (sub_proper_trans sLK prKG))) iter_add iterSr.",
                        "VernacExtend",
                        "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
                    ]
                },
                {
                    "command": [
                        "have defH: H = setIgr L H by rewrite -sub_setIgr ?sub_gen ?sub_class_support.",
                        "VernacExtend",
                        "406cde1174359c53bf162a2a18c4eede395555f9"
                    ]
                },
                {
                    "command": [
                        "have: normal.-series H (map (setIgr L) s) by rewrite defH path_setIgr.",
                        "VernacExtend",
                        "406cde1174359c53bf162a2a18c4eede395555f9"
                    ]
                },
                {
                    "command": [
                        "case/IHm=> [|_]; first by rewrite size_map.",
                        "VernacExtend",
                        "3763a4b8db689af316a7372b722bb29806ab4fb6"
                    ]
                },
                {
                    "command": [
                        "by rewrite {1 2}defH last_map (subset_trans sHK) //= (setIidPr sLK) => /eqP->.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "subnormal_refl",
            "line_nb": 76,
            "steps": [
                {
                    "command": [
                        "by apply/subnormalP; exists [::].",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "subnormal_trans",
            "line_nb": 79,
            "steps": [
                {
                    "command": [
                        "case/subnormalP=> [s1 Hs1 <-] /subnormalP[s2 Hs12 <-].",
                        "VernacExtend",
                        "e00fff71ff314c991514fc71c41a3556702e444a"
                    ]
                },
                {
                    "command": [
                        "by apply/subnormalP; exists (s1 ++ s2); rewrite ?last_cat // cat_path Hs1.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "normal_subnormal",
            "line_nb": 83,
            "steps": [
                {
                    "command": [
                        "by move=> nsHG; apply/subnormalP; exists [:: G]; rewrite //= nsHG.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "subnormal_sub",
            "line_nb": 92,
            "steps": [
                {
                    "command": [
                        "by case/andP.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "invariant_subnormal",
            "line_nb": 95,
            "steps": [
                {
                    "command": [
                        "move=> nGA nHA /andP[]; move: #|G| => m.",
                        "VernacExtend",
                        "8b784377bdc4d565ff66d4cf36a6041e9354c156"
                    ]
                },
                {
                    "command": [
                        "elim: m => [|m IHm] in G nGA * => sHG.",
                        "VernacExtend",
                        "3c42b53d0efc26db114b00541ac5e7fcb29e6aeb"
                    ]
                },
                {
                    "command": [
                        "by rewrite eq_sym; exists [::]; last apply/eqP.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "rewrite iterSr; set K := <<_>>.",
                        "VernacExtend",
                        "c1f58f36c5711f022b4a54717f37c2782f34a159"
                    ]
                },
                {
                    "command": [
                        "have nKA: A \\subset 'N(K) by rewrite norms_gen ?norms_class_support.",
                        "VernacExtend",
                        "406cde1174359c53bf162a2a18c4eede395555f9"
                    ]
                },
                {
                    "command": [
                        "have sHK: H \\subset K by rewrite sub_gen ?sub_class_support.",
                        "VernacExtend",
                        "406cde1174359c53bf162a2a18c4eede395555f9"
                    ]
                },
                {
                    "command": [
                        "case/IHm=> // s Hsn defK; exists (rcons s G); last by rewrite last_rcons.",
                        "VernacExtend",
                        "3763a4b8db689af316a7372b722bb29806ab4fb6"
                    ]
                },
                {
                    "command": [
                        "rewrite rcons_path Hsn !andbA defK nGA nKA /= -/K.",
                        "VernacExtend",
                        "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
                    ]
                },
                {
                    "command": [
                        "by rewrite gen_subG class_support_subG ?norms_gen ?class_support_norm.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "subnormalEsupport",
            "line_nb": 106,
            "steps": [
                {
                    "command": [
                        "case/andP=> sHG; set K := <<_>> => /eqP <-.",
                        "VernacExtend",
                        "ba44c9d0281a02110ce54645304e6d990debd9c0"
                    ]
                },
                {
                    "command": [
                        "have: K \\subset G by rewrite gen_subG class_support_subG.",
                        "VernacExtend",
                        "406cde1174359c53bf162a2a18c4eede395555f9"
                    ]
                },
                {
                    "command": [
                        "rewrite subEproper; case/predU1P=> [defK|]; [left | by right].",
                        "VernacExtend",
                        "6fed6ead3bd8efa10f41904c14a4d1b7a9d472ad"
                    ]
                },
                {
                    "command": [
                        "by elim: #|G| => //= _ ->.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "subnormalEr",
            "line_nb": 112,
            "steps": [
                {
                    "command": [
                        "case/subnormalP=> s Hs <-{G}.",
                        "VernacExtend",
                        "e00fff71ff314c991514fc71c41a3556702e444a"
                    ]
                },
                {
                    "command": [
                        "elim/last_ind: s Hs => [|s G IHs]; first by left.",
                        "VernacExtend",
                        "3763a4b8db689af316a7372b722bb29806ab4fb6"
                    ]
                },
                {
                    "command": [
                        "rewrite last_rcons -cats1 cat_path /= andbT; set K := last H s.",
                        "VernacExtend",
                        "c1f58f36c5711f022b4a54717f37c2782f34a159"
                    ]
                },
                {
                    "command": [
                        "case/andP=> Hs nsKG; have:= normal_sub nsKG; rewrite subEproper.",
                        "VernacExtend",
                        "72030757942d2ba787a471fbd4a39cc13d2b9b88"
                    ]
                },
                {
                    "command": [
                        "case/predU1P=> [<- | prKG]; [exact: IHs | right; exists K; split=> //].",
                        "VernacExtend",
                        "d6fe8c40a8e5395e24817b5f09b269dcb5748579"
                    ]
                },
                {
                    "command": [
                        "by apply/subnormalP; exists s.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "subnormalEl",
            "line_nb": 120,
            "steps": [
                {
                    "command": [
                        "case/subnormalP=> s Hs <-{G}; elim: s H Hs => /= [|K s IHs] H; first by left.",
                        "VernacExtend",
                        "3763a4b8db689af316a7372b722bb29806ab4fb6"
                    ]
                },
                {
                    "command": [
                        "case/andP=> nsHK Ks; have:= normal_sub nsHK; rewrite subEproper.",
                        "VernacExtend",
                        "72030757942d2ba787a471fbd4a39cc13d2b9b88"
                    ]
                },
                {
                    "command": [
                        "case/predU1P=> [-> | prHK]; [exact: IHs | right; exists K; split=> //].",
                        "VernacExtend",
                        "d6fe8c40a8e5395e24817b5f09b269dcb5748579"
                    ]
                },
                {
                    "command": [
                        "by apply/subnormalP; exists s.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "quotient_subnormal",
            "line_nb": 137,
            "steps": [
                {
                    "command": [
                        "exact: morphim_subnormal.",
                        "VernacExtend",
                        "ce637ff86bafca5d8359473e8c02af644dcbdc43"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "maximal_eqP",
            "line_nb": 144,
            "steps": [
                {
                    "command": [
                        "rewrite subEproper /maximal_eq; case: eqP => [->|_]; first left.",
                        "VernacExtend",
                        "3763a4b8db689af316a7372b722bb29806ab4fb6"
                    ]
                },
                {
                    "command": [
                        "by split=> // H sGH sHG; right; apply/eqP; rewrite eqEsubset sHG.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "apply: (iffP maxgroupP) => [] [sMG maxM]; split=> // H.",
                        "VernacExtend",
                        "5fce7e5361004176d6b434b36b4623c7387f70bb"
                    ]
                },
                {
                    "command": [
                        "by move/maxM=> maxMH; rewrite subEproper; case/predU1P; auto.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "by rewrite properEneq => /andP[/eqP neHG sHG] /maxM[].",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "maximal_exists",
            "line_nb": 151,
            "steps": [
                {
                    "command": [
                        "rewrite subEproper; case/predU1P=> sHG; first by left.",
                        "VernacExtend",
                        "3763a4b8db689af316a7372b722bb29806ab4fb6"
                    ]
                },
                {
                    "command": [
                        "suff [M *]: {M : {group gT} | maximal M G & H \\subset M} by right; exists M.",
                        "VernacExtend",
                        "d07fc8b2103f140554938023774bf3f75d04ba99"
                    ]
                },
                {
                    "command": [
                        "exact: maxgroup_exists.",
                        "VernacExtend",
                        "ce637ff86bafca5d8359473e8c02af644dcbdc43"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "mulg_normal_maximal",
            "line_nb": 156,
            "steps": [
                {
                    "command": [
                        "case/andP=> sMG nMG /maxgroupP[_ maxM] sHG not_sHM.",
                        "VernacExtend",
                        "e00fff71ff314c991514fc71c41a3556702e444a"
                    ]
                },
                {
                    "command": [
                        "apply/eqP; rewrite eqEproper mul_subG // -norm_joinEr ?(subset_trans sHG) //.",
                        "VernacExtend",
                        "56c014161b39aecfb3c54301c2409dba4e8e1857"
                    ]
                },
                {
                    "command": [
                        "by apply: contra not_sHM => /maxM <-; rewrite ?joing_subl ?joing_subr.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "minnormal_exists",
            "line_nb": 165,
            "steps": [
                {
                    "command": [
                        "by move=> ntH nHG; apply: mingroup_exists (H) _; rewrite ntH.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "morphpre_maximal",
            "line_nb": 173,
            "steps": [
                {
                    "command": [
                        "apply/maxgroupP/maxgroupP; rewrite morphpre_proper //= => [] [ltMG maxM].",
                        "VernacExtend",
                        "5fce7e5361004176d6b434b36b4623c7387f70bb"
                    ]
                },
                {
                    "command": [
                        "split=> // H ltHG sMH; have dH := subset_trans (proper_sub ltHG) dG.",
                        "VernacExtend",
                        "d2991b7607b6316c9d43d28c85f87ca601299ca6"
                    ]
                },
                {
                    "command": [
                        "rewrite -(morphpreK dH) [f @*^-1 H]maxM ?morphpreK ?morphpreSK //.",
                        "VernacExtend",
                        "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
                    ]
                },
                {
                    "command": [
                        "by rewrite morphpre_proper.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "split=> // H ltHG sMH.",
                        "VernacExtend",
                        "3c42b53d0efc26db114b00541ac5e7fcb29e6aeb"
                    ]
                },
                {
                    "command": [
                        "have dH: H \\subset D := subset_trans (proper_sub ltHG) (subsetIl D _).",
                        "VernacExtend",
                        "406cde1174359c53bf162a2a18c4eede395555f9"
                    ]
                },
                {
                    "command": [
                        "have defH: f @*^-1 (f @* H) = H.",
                        "VernacExtend",
                        "406cde1174359c53bf162a2a18c4eede395555f9"
                    ]
                },
                {
                    "command": [
                        "by apply: morphimGK dH; apply: subset_trans sMH; apply: ker_sub_pre.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "rewrite -defH morphpre_proper ?morphimS // in ltHG.",
                        "VernacExtend",
                        "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
                    ]
                },
                {
                    "command": [
                        "by rewrite -defH [f @* H]maxM // -(morphpreK dM) morphimS.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "morphpre_maximal_eq",
            "line_nb": 185,
            "steps": [
                {
                    "command": [
                        "by rewrite /maximal_eq morphpre_maximal !eqEsubset !morphpreSK.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "injm_maximal",
            "line_nb": 194,
            "steps": [
                {
                    "command": [
                        "rewrite -(morphpre_invm injf) -(morphpre_invm injf G).",
                        "VernacExtend",
                        "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
                    ]
                },
                {
                    "command": [
                        "by rewrite morphpre_maximal ?morphim_invm.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "injm_maximal_eq",
            "line_nb": 198,
            "steps": [
                {
                    "command": [
                        "by rewrite /maximal_eq injm_maximal // injm_eq.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "injm_minnormal",
            "line_nb": 211,
            "steps": [
                {
                    "command": [
                        "pose injfm := (morphim_injm_eq1 injf, injm_norms, injmSK injf, subsetIl).",
                        "VernacExtend",
                        "3c5f04de94609049d978298aa02ff35fb35ea7c7"
                    ]
                },
                {
                    "command": [
                        "apply/mingroupP/mingroupP; rewrite !injfm // => [[nML minM]].",
                        "VernacExtend",
                        "5fce7e5361004176d6b434b36b4623c7387f70bb"
                    ]
                },
                {
                    "command": [
                        "split=> // H nHG sHM; have dH := subset_trans sHM dM.",
                        "VernacExtend",
                        "d2991b7607b6316c9d43d28c85f87ca601299ca6"
                    ]
                },
                {
                    "command": [
                        "by apply: (injm_morphim_inj injf) => //; apply: minM; rewrite !injfm.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "split=> // fH nHG sHM; have dfH := subset_trans sHM (morphim_sub f M).",
                        "VernacExtend",
                        "d2991b7607b6316c9d43d28c85f87ca601299ca6"
                    ]
                },
                {
                    "command": [
                        "by rewrite -(morphpreK dfH) !injfm // in nHG sHM *; rewrite (minM _ nHG).",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "cosetpre_maximal",
            "line_nb": 222,
            "steps": [
                {
                    "command": [
                        "by rewrite morphpre_maximal ?sub_im_coset.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "cosetpre_maximal_eq",
            "line_nb": 225,
            "steps": [
                {
                    "command": [
                        "by rewrite /maximal_eq !eqEsubset !cosetpreSK cosetpre_maximal.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "quotient_maximal",
            "line_nb": 228,
            "steps": [
                {
                    "command": [
                        "by move=> nKG nKH; rewrite -cosetpre_maximal ?quotientGK.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "quotient_maximal_eq",
            "line_nb": 231,
            "steps": [
                {
                    "command": [
                        "by move=> nKG nKH; rewrite -cosetpre_maximal_eq ?quotientGK.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "maximalJ",
            "line_nb": 234,
            "steps": [
                {
                    "command": [
                        "rewrite -{1}(setTI G) -{1}(setTI H) -!morphim_conj.",
                        "VernacExtend",
                        "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
                    ]
                },
                {
                    "command": [
                        "by rewrite injm_maximal ?subsetT ?injm_conj.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "maximal_eqJ",
            "line_nb": 238,
            "steps": [
                {
                    "command": [
                        "by rewrite /maximal_eq !eqEsubset !conjSg maximalJ.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "maxnormal_normal",
            "line_nb": 245,
            "steps": [
                {
                    "command": [
                        "by case/maxsetP=> /and3P[/gen_set_id /= -> pAB nAB]; rewrite /normal proper_sub.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "maxnormal_proper",
            "line_nb": 248,
            "steps": [
                {
                    "command": [
                        "by case/maxsetP=> /and3P[gA pAB _] _; apply: (sub_proper_trans (subset_gen A)).",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "maxnormal_sub",
            "line_nb": 251,
            "steps": [
                {
                    "command": [
                        "by move=> maxA; rewrite proper_sub //; apply: (maxnormal_proper maxA).",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "ex_maxnormal_ntrivg",
            "line_nb": 254,
            "steps": [
                {
                    "command": [
                        "move=> ntG; apply: ex_maxgroup; exists [1 gT]%G; rewrite norm1 proper1G.",
                        "VernacExtend",
                        "2ae3e98e575dbab8b1695783829108b1b7a30901"
                    ]
                },
                {
                    "command": [
                        "by rewrite subsetT ntG.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "maxnormalM",
            "line_nb": 258,
            "steps": [
                {
                    "command": [
                        "move=> maxH maxK /eqP; apply: contraNeq => ltHK_G.",
                        "VernacExtend",
                        "d6ebf3361f380a12d5c2c9bbb7ea363132c48b36"
                    ]
                },
                {
                    "command": [
                        "have [nsHG nsKG] := (maxnormal_normal maxH, maxnormal_normal maxK).",
                        "VernacExtend",
                        "406cde1174359c53bf162a2a18c4eede395555f9"
                    ]
                },
                {
                    "command": [
                        "have cHK: commute H K.",
                        "VernacExtend",
                        "406cde1174359c53bf162a2a18c4eede395555f9"
                    ]
                },
                {
                    "command": [
                        "exact: normC (subset_trans (normal_sub nsHG) (normal_norm nsKG)).",
                        "VernacExtend",
                        "ce637ff86bafca5d8359473e8c02af644dcbdc43"
                    ]
                },
                {
                    "command": [
                        "wlog suffices: H K {maxH} maxK nsHG nsKG cHK ltHK_G / H \\subset K.",
                        "VernacExtend",
                        "348aa27e7c84ea4ca2ac06b8a3b3db24e74b6ad7"
                    ]
                },
                {
                    "command": [
                        "by move=> IH; rewrite eqEsubset !IH // -cHK.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "have{maxK} /maxgroupP[_ maxK] := maxK.",
                        "VernacExtend",
                        "406cde1174359c53bf162a2a18c4eede395555f9"
                    ]
                },
                {
                    "command": [
                        "apply/joing_idPr/maxK; rewrite ?joing_subr //= comm_joingE //.",
                        "VernacExtend",
                        "56c014161b39aecfb3c54301c2409dba4e8e1857"
                    ]
                },
                {
                    "command": [
                        "by rewrite properEneq ltHK_G; apply: normalM.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "simpleP",
            "line_nb": 290,
            "steps": [
                {
                    "command": [
                        "apply: (iffP mingroupP); rewrite normG andbT => [[ntG simG]].",
                        "VernacExtend",
                        "5fce7e5361004176d6b434b36b4623c7387f70bb"
                    ]
                },
                {
                    "command": [
                        "split=> // N /andP[sNG nNG].",
                        "VernacExtend",
                        "3c42b53d0efc26db114b00541ac5e7fcb29e6aeb"
                    ]
                },
                {
                    "command": [
                        "by case: (eqsVneq N 1) => [|ntN]; [left | right; apply: simG; rewrite ?ntN].",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "split=> // N /andP[ntN nNG] sNG.",
                        "VernacExtend",
                        "3c42b53d0efc26db114b00541ac5e7fcb29e6aeb"
                    ]
                },
                {
                    "command": [
                        "by case: (simG N) ntN => // [|->]; [apply/andP | case/eqP].",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "quotient_simple",
            "line_nb": 297,
            "steps": [
                {
                    "command": [
                        "move=> nsHG; have nGH := normal_norm nsHG.",
                        "VernacExtend",
                        "ccd83c252dcbae3d56f3d057fcb8217878b51901"
                    ]
                },
                {
                    "command": [
                        "by apply/idP/idP; [apply: minnormal_maxnormal | apply: maxnormal_minnormal].",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "isog_simple",
            "line_nb": 301,
            "steps": [
                {
                    "command": [
                        "move=> eqGM; wlog suffices: gT rT G M eqGM / simple M -> simple G.",
                        "VernacExtend",
                        "33541f5bcc357bbc2a07c2295895b9f3385c3b61"
                    ]
                },
                {
                    "command": [
                        "by move=> IH; apply/idP/idP; apply: IH; rewrite // isog_sym.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "case/isogP: eqGM => f injf <- /simpleP[ntGf simGf].",
                        "VernacExtend",
                        "e00fff71ff314c991514fc71c41a3556702e444a"
                    ]
                },
                {
                    "command": [
                        "apply/simpleP; split=> [|N nsNG]; first by rewrite -(morphim_injm_eq1 injf).",
                        "VernacExtend",
                        "3763a4b8db689af316a7372b722bb29806ab4fb6"
                    ]
                },
                {
                    "command": [
                        "rewrite -(morphim_invm injf (normal_sub nsNG)).",
                        "VernacExtend",
                        "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
                    ]
                },
                {
                    "command": [
                        "have: f @* N <| f @* G by rewrite morphim_normal.",
                        "VernacExtend",
                        "406cde1174359c53bf162a2a18c4eede395555f9"
                    ]
                },
                {
                    "command": [
                        "by case/simGf=> /= ->; [left | right]; rewrite (morphim1, morphim_invm).",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "simple_maxnormal",
            "line_nb": 310,
            "steps": [
                {
                    "command": [
                        "by rewrite -quotient_simple ?normal1 // -(isog_simple (quotient1_isog G)).",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "chief_series_exists",
            "line_nb": 334,
            "steps": [
                {
                    "command": [
                        "elim: {H}_.+1 {-2}H (ltnSn #|H|) => // m IHm U leUm nsUG.",
                        "VernacExtend",
                        "e686a1895f1799b840b76242f931100819a9ad6c"
                    ]
                },
                {
                    "command": [
                        "have [-> | ntU] := eqVneq U 1%G; first by exists [::].",
                        "VernacExtend",
                        "3763a4b8db689af316a7372b722bb29806ab4fb6"
                    ]
                },
                {
                    "command": [
                        "have [V maxV]: {V : {group gT} | maxnormal V U G}.",
                        "VernacExtend",
                        "406cde1174359c53bf162a2a18c4eede395555f9"
                    ]
                },
                {
                    "command": [
                        "by apply: ex_maxgroup; exists 1%G; rewrite proper1G ntU norms1.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "have /andP[ltVU nVG] := maxgroupp maxV.",
                        "VernacExtend",
                        "406cde1174359c53bf162a2a18c4eede395555f9"
                    ]
                },
                {
                    "command": [
                        "have [||s ch_s defV] := IHm V; first exact: leq_trans (proper_card ltVU) _.",
                        "VernacExtend",
                        "3763a4b8db689af316a7372b722bb29806ab4fb6"
                    ]
                },
                {
                    "command": [
                        "by rewrite /normal (subset_trans (proper_sub ltVU) (normal_sub nsUG)).",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "exists (rcons s U); last by rewrite last_rcons.",
                        "VernacExtend",
                        "3763a4b8db689af316a7372b722bb29806ab4fb6"
                    ]
                },
                {
                    "command": [
                        "by rewrite rcons_path defV /= ch_s /chief_factor; apply/and3P.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "central_factor_central",
            "line_nb": 349,
            "steps": [
                {
                    "command": [
                        "by case/and3P=> /quotient_cents2r *; rewrite subsetI quotientS.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "central_central_factor",
            "line_nb": 352,
            "steps": [
                {
                    "command": [
                        "case/subsetIP=> sKGb cGKb /andP[sHK nHK] /andP[sHG nHG].",
                        "VernacExtend",
                        "e00fff71ff314c991514fc71c41a3556702e444a"
                    ]
                },
                {
                    "command": [
                        "by rewrite /central_factor -quotient_cents2 // cGKb sHK -(quotientSGK nHK).",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        }
    ]
}