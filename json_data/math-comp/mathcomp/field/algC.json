{
    "filename": "mathcomp/field/algC.v",
    "coq_project": "math-comp",
    "vernac_cmds": [
        [
            "Require Import mathcomp.ssreflect.ssreflect.",
            "VernacRequire",
            "85e251063dc2b5a9653f7bb76dcd176ed36b42a9"
        ],
        [
            "From mathcomp Require Import ssrbool ssrfun ssrnat eqtype seq choice div fintype.",
            "VernacRequire",
            "299bf65aebd48608662725edeaf327504e031619"
        ],
        [
            "From mathcomp Require Import path bigop finset prime ssralg poly polydiv mxpoly.",
            "VernacRequire",
            "811e987551b3d7dd9459e858c716e58512db403f"
        ],
        [
            "From mathcomp Require Import generic_quotient countalg closed_field ssrnum ssrint rat intdiv.",
            "VernacRequire",
            "38a1b4beaa7c75b6580ed6dbe96a1b3c37485edb"
        ],
        [
            "From mathcomp Require Import algebraics_fundamentals.",
            "VernacRequire",
            "264a02992da74e2d588dbba92160317335237605"
        ],
        [
            "Set Implicit Arguments.",
            "VernacSetOption",
            "9e84ff8896f028601d8aded48c1d4aebe60aa584"
        ],
        [
            "Unset Strict Implicit.",
            "VernacUnsetOption",
            "2842adaf6959318f2042805935c46f513bdc0348"
        ],
        [
            "Unset Printing Implicit Defensive.",
            "VernacUnsetOption",
            "444e5f0be4b25d9b1fd556943a447ec10046d151"
        ],
        [
            "Import GRing.Theory Num.Theory.",
            "VernacImport",
            "b7c34fb48ecb00de4262e619b1ca3ecacdf18e53"
        ],
        [
            "Local Open Scope ring_scope.",
            "VernacOpenCloseScope",
            "fb9da4a291533574d328be8c8a69d90a14641928"
        ],
        [
            "Lemma ComplexNumMixin (L : closedFieldType) (conj : {rmorphism L -> L}) : involutive conj -> ~ conj =1 id -> {numL | forall x : NumDomainType L numL, `|x| ^+ 2 = x * conj x}.",
            "VernacStartTheoremProof",
            "06f9ab69b11e68d2180c6e7dcc86d62885a8e036"
        ],
        [
            "move=> conjK conj_nt.",
            "VernacExtend",
            "b1b2cb7a3a617cba67460b4eca1f04de3c1cc716"
        ],
        [
            "have nz2: 2%:R != 0 :> L.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "apply/eqP=> char2; apply: conj_nt => e; apply/eqP/idPn=> eJ.",
            "VernacExtend",
            "6e77d60b6fe9e5152bca0bfa572494ee57c5c96d"
        ],
        [
            "have opp_id x: - x = x :> L.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "by apply/esym/eqP; rewrite -addr_eq0 -mulr2n -mulr_natl char2 mul0r.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "have{char2} char2: 2 \\in [char L] by apply/eqP.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "without loss{eJ} eJ: e / conj e = e + 1.",
            "VernacExtend",
            "87d5e7b04148ee8f2e4efcc847e0dfadae0aa4cb"
        ],
        [
            "move/(_ (e / (e + conj e))); apply.",
            "VernacExtend",
            "2408219a516badfffca5dfc0dff226f7b05b4ced"
        ],
        [
            "rewrite fmorph_div rmorphD conjK -{1}[conj e](addNKr e) mulrDl.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "by rewrite opp_id (addrC e) divff // addr_eq0 opp_id.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "pose a := e * conj e; have aJ: conj a = a by rewrite rmorphM conjK mulrC.",
            "VernacExtend",
            "c09d1274557abc8857ed64eb3450db2da906c185"
        ],
        [
            "have [w Dw] := @solve_monicpoly _ 2 (nth 0 [:: e * a; - 1]) isT.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "have{Dw} Dw: w ^+ 2 + w = e * a.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "by rewrite Dw !big_ord_recl big_ord0 /= mulr1 mulN1r addr0 subrK.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "pose b := w + conj w; have bJ: conj b = b by rewrite rmorphD conjK addrC.",
            "VernacExtend",
            "c09d1274557abc8857ed64eb3450db2da906c185"
        ],
        [
            "have Db2: b ^+ 2 + b = a.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "rewrite -Frobenius_autE // rmorphD addrACA Dw /= Frobenius_autE -rmorphX.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "by rewrite -rmorphD Dw rmorphM aJ eJ -mulrDl -{1}[e]opp_id addKr mul1r.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "have /eqP[] := oner_eq0 L; apply: (addrI b); rewrite addr0 -{2}bJ.",
            "VernacExtend",
            "a027ea2906322ee97e674829b54100c8d518288a"
        ],
        [
            "have: (b + e) * (b + conj e) == 0.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "rewrite mulrDl 2!mulrDr -/a addrA addr_eq0 opp_id (mulrC e) -addrA.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "by rewrite -mulrDr eJ addrAC -{2}[e]opp_id subrr add0r mulr1 Db2.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "rewrite mulf_eq0 !addr_eq0 !opp_id => /pred2P[] -> //.",
            "VernacExtend",
            "3c42b53d0efc26db114b00541ac5e7fcb29e6aeb"
        ],
        [
            "by rewrite {2}eJ rmorphD rmorph1.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "have mul2I: injective (fun z : L => z *+ 2).",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "by move=> x y; rewrite /= -mulr_natl -(mulr_natl y) => /mulfI->.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "pose sqrt x : L := sval (sig_eqW (@solve_monicpoly _ 2 (nth 0 [:: x]) isT)).",
            "VernacExtend",
            "3c5f04de94609049d978298aa02ff35fb35ea7c7"
        ],
        [
            "have sqrtK x: sqrt x ^+ 2 = x.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "rewrite /sqrt; case: sig_eqW => /= y ->.",
            "VernacExtend",
            "712d339e99ee17eb7d5033e19ac614eb3ca6b532"
        ],
        [
            "by rewrite !big_ord_recl big_ord0 /= mulr1 mul0r !addr0.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "have sqrtE x y: y ^+ 2 = x -> {b : bool | y = (-1) ^+ b * sqrt x}.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "move=> Dx; exists (y != sqrt x); apply/eqP; rewrite mulr_sign if_neg.",
            "VernacExtend",
            "f02a7c8c7e7b76bbeeea6e0ec2b43ce9a052dc24"
        ],
        [
            "by case: ifPn => //; apply/implyP; rewrite implyNb -eqf_sqr Dx sqrtK.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "pose i := sqrt (- 1).",
            "VernacExtend",
            "3c5f04de94609049d978298aa02ff35fb35ea7c7"
        ],
        [
            "have sqrMi x: (i * x) ^+ 2 = - x ^+ 2 by rewrite exprMn sqrtK mulN1r.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "have iJ : conj i = - i.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "have /sqrtE[b]: conj i ^+ 2 = - 1 by rewrite -rmorphX sqrtK rmorphN1.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "rewrite mulr_sign -/i; case: b => // Ri.",
            "VernacExtend",
            "712d339e99ee17eb7d5033e19ac614eb3ca6b532"
        ],
        [
            "case: conj_nt => z; wlog zJ: z / conj z = - z.",
            "VernacExtend",
            "6fe8b88aca2e06b53931892231e8f864cb34058f"
        ],
        [
            "move/(_ (z - conj z)); rewrite !rmorphB conjK opprB => zJ.",
            "VernacExtend",
            "8261237f0cda1915a4077c28869831c5329103ce"
        ],
        [
            "by apply/mul2I/(canRL (subrK _)); rewrite -addrA zJ // addrC subrK.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "have [-> | nz_z] := eqVneq z 0; first exact: rmorph0.",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "have [u Ru [v Rv Dz]]: exists2 u, conj u = u & exists2 v, conj v = v & (u + z * v) ^+ 2 = z.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "-",
            "VernacBullet",
            "581cab4bf49fa4b495e569bbda96fc8d28fddcc0"
        ],
        [
            "pose y := sqrt z; exists ((y + conj y) / 2%:R).",
            "VernacExtend",
            "8739d26aae202bf2a274e8c9e6dde5a40952ee7f"
        ],
        [
            "by rewrite fmorph_div rmorphD conjK addrC rmorph_nat.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "exists ((y - conj y) / (z *+ 2)).",
            "VernacExtend",
            "af759a6e4635a945453b6c823b59f374d9b2256c"
        ],
        [
            "rewrite fmorph_div rmorphMn zJ mulNrn invrN mulrN -mulNr rmorphB opprB.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "by rewrite conjK.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "rewrite -(mulr_natl z) invfM (mulrC z) !mulrA divfK // -mulrDl addrACA.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "by rewrite subrr addr0 -mulr2n -mulr_natr mulfK ?Neq0 ?sqrtK.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "suffices u0: u = 0 by rewrite -Dz u0 add0r rmorphX rmorphM Rv zJ mulNr sqrrN.",
            "VernacExtend",
            "290ed488b5562e885aa2cac56f3a69b4faa0eaa6"
        ],
        [
            "suffices [b Du]: exists b : bool, u = (-1) ^+ b * i * z * v.",
            "VernacExtend",
            "290ed488b5562e885aa2cac56f3a69b4faa0eaa6"
        ],
        [
            "apply: mul2I; rewrite mul0rn mulr2n -{2}Ru.",
            "VernacExtend",
            "56c014161b39aecfb3c54301c2409dba4e8e1857"
        ],
        [
            "by rewrite Du !rmorphM rmorph_sign Rv Ri zJ !mulrN mulNr subrr.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "have/eqP:= zJ; rewrite -addr_eq0 -{1 2}Dz rmorphX rmorphD rmorphM Ru Rv zJ.",
            "VernacExtend",
            "aa9d5fbc682ed874cd64b2543ca6c859b978e924"
        ],
        [
            "rewrite mulNr sqrrB sqrrD addrACA (addrACA (u ^+ 2)) addNr addr0 -!mulr2n.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "rewrite -mulrnDl -(mul0rn _ 2) (inj_eq mul2I) /= -[rhs in _ + rhs]opprK.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "rewrite -sqrMi subr_eq0 eqf_sqr -mulNr !mulrA.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "by case/pred2P=> ->; [exists false | exists true]; rewrite mulr_sign.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "pose norm x := sqrt x * conj (sqrt x).",
            "VernacExtend",
            "3c5f04de94609049d978298aa02ff35fb35ea7c7"
        ],
        [
            "have normK x : norm x ^+ 2 = x * conj x by rewrite exprMn -rmorphX sqrtK.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "have normE x y : y ^+ 2 = x -> norm x = y * conj y.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "rewrite /norm => /sqrtE[b /(canLR (signrMK b)) <-].",
            "VernacExtend",
            "3c42b53d0efc26db114b00541ac5e7fcb29e6aeb"
        ],
        [
            "by rewrite !rmorphM rmorph_sign mulrACA -mulrA signrMK.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "have norm_eq0 x : norm x = 0 -> x = 0.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "by move/eqP; rewrite mulf_eq0 fmorph_eq0 -mulf_eq0 -expr2 sqrtK => /eqP.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "have normM x y : norm (x * y) = norm x * norm y.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "by rewrite mulrACA -rmorphM; apply: normE; rewrite exprMn !sqrtK.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "have normN x : norm (- x) = norm x.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "by rewrite -mulN1r normM {1}/norm iJ mulrN -expr2 sqrtK opprK mul1r.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "pose le x y := norm (y - x) == y - x; pose lt x y := (y != x) && le x y.",
            "VernacExtend",
            "311b833fadff89b2f7ed817d3cd7cb6971c96a1e"
        ],
        [
            "have posE x: le 0 x = (norm x == x) by rewrite /le subr0.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "have leB x y: le x y = le 0 (y - x) by rewrite posE.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "have posP x : reflect (exists y, x = y * conj y) (le 0 x).",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "rewrite posE; apply: (iffP eqP) => [Dx | [y {x}->]]; first by exists (sqrt x).",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "by rewrite (normE _ _ (normK y)) rmorphM conjK (mulrC (conj _)) -expr2 normK.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "have posJ x : le 0 x -> conj x = x.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "by case/posP=> {x}u ->; rewrite rmorphM conjK mulrC.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "have pos_linear x y : le 0 x -> le 0 y -> le x y || le y x.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "move=> pos_x pos_y; rewrite leB -opprB orbC leB !posE normN -eqf_sqr.",
            "VernacExtend",
            "057edeb0967475c7ea5e8c98c449ddc5613eddc1"
        ],
        [
            "by rewrite normK rmorphB !posJ ?subrr.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "have sposDl x y : lt 0 x -> le 0 y -> lt 0 (x + y).",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "have sqrtJ z : le 0 z -> conj (sqrt z) = sqrt z.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "rewrite posE -{2}[z]sqrtK -subr_eq0 -mulrBr mulf_eq0 subr_eq0.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "by case/pred2P=> ->; rewrite ?rmorph0.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "case/andP=> nz_x /sqrtJ uJ /sqrtJ vJ.",
            "VernacExtend",
            "e00fff71ff314c991514fc71c41a3556702e444a"
        ],
        [
            "set u := sqrt x in uJ; set v := sqrt y in vJ; pose w := u + i * v.",
            "VernacExtend",
            "a1c8e8beaa6287bdfa0be3460af1feb609f7237a"
        ],
        [
            "have ->: x + y = w * conj w.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "rewrite rmorphD rmorphM iJ uJ vJ mulNr mulrC -subr_sqr sqrMi opprK.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "by rewrite !sqrtK.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "apply/andP; split; last by apply/posP; exists w.",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "rewrite -normK expf_eq0 //=; apply: contraNneq nz_x => /norm_eq0 w0.",
            "VernacExtend",
            "634a7639ed2fb7caf62757f84400927f5829b7d5"
        ],
        [
            "rewrite -[x]sqrtK expf_eq0 /= -/u -(inj_eq mul2I) !mulr2n -{2}(rmorph0 conj).",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "by rewrite -w0 rmorphD rmorphM iJ uJ vJ mulNr addrACA subrr addr0.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "have sposD x y : lt 0 x -> lt 0 y -> lt 0 (x + y).",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "by move=> x_gt0 /andP[_]; apply: sposDl.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "have normD x y : le (norm (x + y)) (norm x + norm y).",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "have sposM u v: lt 0 u -> le 0 (u * v) -> le 0 v.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "by rewrite /lt !posE normM andbC => /andP[/eqP-> /mulfI/inj_eq->].",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "have posD u v: le 0 u -> le 0 v -> le 0 (u + v).",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "have [-> | nz_u u_ge0 v_ge0] := eqVneq u 0; first by rewrite add0r.",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "by have /andP[]: lt 0 (u + v) by rewrite sposDl // /lt nz_u.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "have le_sqr u v: conj u = u -> le 0 v -> le (u ^+ 2) (v ^+ 2) -> le u v.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "move=> Ru v_ge0; have [-> // | nz_u] := eqVneq u 0.",
            "VernacExtend",
            "ccd83c252dcbae3d56f3d057fcb8217878b51901"
        ],
        [
            "have [u_gt0 | u_le0 _] := boolP (lt 0 u).",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "by rewrite leB (leB u) subr_sqr mulrC addrC; apply: sposM; apply: sposDl.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "rewrite leB posD // posE normN -addr_eq0; apply/eqP.",
            "VernacExtend",
            "634a7639ed2fb7caf62757f84400927f5829b7d5"
        ],
        [
            "rewrite /lt nz_u posE -subr_eq0 in u_le0; apply: (mulfI u_le0).",
            "VernacExtend",
            "634a7639ed2fb7caf62757f84400927f5829b7d5"
        ],
        [
            "by rewrite mulr0 -subr_sqr normK Ru subrr.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "have pos_norm z: le 0 (norm z) by apply/posP; exists (sqrt z).",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "rewrite le_sqr ?posJ ?posD // sqrrD !normK -normM rmorphD mulrDl !mulrDr.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "rewrite addrA addrC !addrA -(addrC (y * conj y)) !addrA.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "move: (y * _ + _) => u; rewrite -!addrA leB opprD addrACA {u}subrr add0r -leB.",
            "VernacExtend",
            "057edeb0967475c7ea5e8c98c449ddc5613eddc1"
        ],
        [
            "rewrite {}le_sqr ?posD //.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "by rewrite rmorphD !rmorphM !conjK addrC mulrC (mulrC y).",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "rewrite -mulr2n -mulr_natr exprMn normK -natrX mulr_natr sqrrD mulrACA.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "rewrite -rmorphM (mulrC y x) addrAC leB mulrnA mulr2n opprD addrACA.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "rewrite subrr addr0 {2}(mulrC x) rmorphM mulrACA -opprB addrAC -sqrrB -sqrMi.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "apply/posP; exists (i * (x * conj y - y * conj x)); congr (_ * _).",
            "VernacExtend",
            "2882a35ce7cf648d9502b6c4926a05a8282c28c8"
        ],
        [
            "rewrite !(rmorphM, rmorphB) iJ !conjK mulNr -mulrN opprB.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "by rewrite (mulrC x) (mulrC y).",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "by exists (Num.Mixin normD sposD norm_eq0 pos_linear normM (rrefl _) (rrefl _)).",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Module Algebraics.",
            "VernacDefineModule",
            "9fd18123ec71738099626f7a3dbbc0a95d85dfbd"
        ],
        [
            "Module Type Specification.",
            "VernacDeclareModuleType",
            "d25c56e81da47495a119fa0d45f3263f9e840067"
        ],
        [
            "Parameter type : Type.",
            "VernacAssumption",
            "f39a83adafae66bf8f0f2551e97d503b8d5ad23b"
        ],
        [
            "Parameter eqMixin : Equality.class_of type.",
            "VernacAssumption",
            "48213afb9e69519c170e3816a440334427982ad1"
        ],
        [
            "Canonical eqType := EqType type eqMixin.",
            "VernacDefinition",
            "384520d371b7600a2294bf5782e339b44b40c981"
        ],
        [
            "Parameter choiceMixin : Choice.mixin_of type.",
            "VernacAssumption",
            "03d4e7a985f687fffdc1713f7b116c6921a5a8b5"
        ],
        [
            "Canonical choiceType := ChoiceType type choiceMixin.",
            "VernacDefinition",
            "085690adaaec35ccee9d2acda55995cc16938776"
        ],
        [
            "Parameter countMixin : Countable.mixin_of type.",
            "VernacAssumption",
            "cb18f2b024ce72c7e89e456a0bb3da9420ba945e"
        ],
        [
            "Canonical countType := CountType type countMixin.",
            "VernacDefinition",
            "bf9f556715c87d73966a76c09e17a2451c0efe91"
        ],
        [
            "Parameter zmodMixin : GRing.Zmodule.mixin_of type.",
            "VernacAssumption",
            "963823a35d64ad6eccdad667ad42c516a7fee7fa"
        ],
        [
            "Canonical zmodType := ZmodType type zmodMixin.",
            "VernacDefinition",
            "3104e8fa64ed19b644b0f20e08ca61786922e8e8"
        ],
        [
            "Canonical countZmodType := [countZmodType of type].",
            "VernacDefinition",
            "b56fd823a759a979727ff29e0bcf65dd79b6232f"
        ],
        [
            "Parameter ringMixin : GRing.Ring.mixin_of zmodType.",
            "VernacAssumption",
            "6cc2f751a856e68b69e20d818c4127b47e5a5107"
        ],
        [
            "Canonical ringType := RingType type ringMixin.",
            "VernacDefinition",
            "163db992854bfae4ee377dc12b7e6096d98b70f1"
        ],
        [
            "Canonical countRingType := [countRingType of type].",
            "VernacDefinition",
            "0dd31cb15bd3be70859cffc509791a7c4025fadc"
        ],
        [
            "Parameter unitRingMixin : GRing.UnitRing.mixin_of ringType.",
            "VernacAssumption",
            "c71700a0f23803a1e0adacfbcd3b8fdc333e89a0"
        ],
        [
            "Canonical unitRingType := UnitRingType type unitRingMixin.",
            "VernacDefinition",
            "80b55a0da713183ccb648f607bb14327518b81a2"
        ],
        [
            "Axiom mulC : @commutative ringType ringType *%R.",
            "VernacAssumption",
            "2c2123a512a182e9e9bdc6b857e266737e88950c"
        ],
        [
            "Canonical comRingType := ComRingType type mulC.",
            "VernacDefinition",
            "1b4c5959af2d0e900a145362f8db0c97c0b6a2e8"
        ],
        [
            "Canonical comUnitRingType := [comUnitRingType of type].",
            "VernacDefinition",
            "eb63550ed242dba06b8e10832dcd82a080f950c5"
        ],
        [
            "Axiom idomainAxiom : GRing.IntegralDomain.axiom ringType.",
            "VernacAssumption",
            "8818256630d34e80fdbdaabbc7c8756a7b59bed2"
        ],
        [
            "Canonical idomainType := IdomainType type idomainAxiom.",
            "VernacDefinition",
            "0f3e7a85392bf8aeee4863b3ad41beebbcee18d6"
        ],
        [
            "Axiom fieldMixin : GRing.Field.mixin_of unitRingType.",
            "VernacAssumption",
            "f7e0bf21c266e48873a93babdd0ec77267a9c224"
        ],
        [
            "Canonical fieldType := FieldType type fieldMixin.",
            "VernacDefinition",
            "86346ced0f19b67a0539bea7916360ddca8ee5ab"
        ],
        [
            "Parameter decFieldMixin : GRing.DecidableField.mixin_of unitRingType.",
            "VernacAssumption",
            "4e7c84c77c94355247306f6721243eac179c0b10"
        ],
        [
            "Canonical decFieldType := DecFieldType type decFieldMixin.",
            "VernacDefinition",
            "3688fe30e3b7ba7400f40d8d2a19cb645f090cb8"
        ],
        [
            "Axiom closedFieldAxiom : GRing.ClosedField.axiom ringType.",
            "VernacAssumption",
            "2ab1f8b2f69515e3e0cd6b3a9110c0b1cb146aa3"
        ],
        [
            "Canonical closedFieldType := ClosedFieldType type closedFieldAxiom.",
            "VernacDefinition",
            "ddd6b83ecf51633897f4a281c693158240a345de"
        ],
        [
            "Parameter numMixin : Num.mixin_of ringType.",
            "VernacAssumption",
            "213545552658ea786c619822d0e2903b61458012"
        ],
        [
            "Canonical numDomainType := NumDomainType type numMixin.",
            "VernacDefinition",
            "6dc4e65562dae09f0de3ee6298490c210bbca8f2"
        ],
        [
            "Canonical numFieldType := [numFieldType of type].",
            "VernacDefinition",
            "f3737dbf6251821a7ef94e0dbc94ae8058a12475"
        ],
        [
            "Parameter conjMixin : Num.ClosedField.imaginary_mixin_of numDomainType.",
            "VernacAssumption",
            "09c170006d51d67f4c5d5735a38c073a14dcdf99"
        ],
        [
            "Canonical numClosedFieldType := NumClosedFieldType type conjMixin.",
            "VernacDefinition",
            "c237231a7549ad5095ea5ae7eed404b5c072d18f"
        ],
        [
            "Axiom algebraic : integralRange (@ratr unitRingType).",
            "VernacAssumption",
            "09928ad9e19f86063daa1759ca11d21a92851633"
        ],
        [
            "End Specification.",
            "VernacEndSegment",
            "61dd5c808d9d60972150f00000941e7fd4a8d625"
        ],
        [
            "Module Implementation : Specification.",
            "VernacDefineModule",
            "8754e17676f149797b7bd28e1ca1d4a781af1968"
        ],
        [
            "Definition L := tag Fundamental_Theorem_of_Algebraics.",
            "VernacDefinition",
            "f34881a2e71a16bc56faf07ed43bc2a41b4efe8e"
        ],
        [
            "Definition conjL : {rmorphism L -> L} := s2val (tagged Fundamental_Theorem_of_Algebraics).",
            "VernacDefinition",
            "e095693f32dfc4de646805937de361d5b21b32ef"
        ],
        [
            "Fact conjL_K : involutive conjL.",
            "VernacStartTheoremProof",
            "f9e8b4d41c5fb97763bf9bd09c3a48bacd05696d"
        ],
        [
            "exact: s2valP (tagged Fundamental_Theorem_of_Algebraics).",
            "VernacExtend",
            "ce637ff86bafca5d8359473e8c02af644dcbdc43"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Fact conjL_nt : ~ conjL =1 id.",
            "VernacStartTheoremProof",
            "3e7c51345a90dfeffea0325064cb75e68b42fbc8"
        ],
        [
            "exact: s2valP' (tagged Fundamental_Theorem_of_Algebraics).",
            "VernacExtend",
            "ce637ff86bafca5d8359473e8c02af644dcbdc43"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Definition LnumMixin := ComplexNumMixin conjL_K conjL_nt.",
            "VernacDefinition",
            "d5737fa4c023d4b6a94b5c6d4d079519540216d2"
        ],
        [
            "Definition Lnum := NumDomainType L (sval LnumMixin).",
            "VernacDefinition",
            "8aaac82ef5f3a0a7bcc90f94bd2e2292fb061aba"
        ],
        [
            "Definition QtoL := [rmorphism of @ratr [numFieldType of Lnum]].",
            "VernacDefinition",
            "c7caeed90190c8a420c87d25dfb69ea62271d1e5"
        ],
        [
            "Notation pQtoL := (map_poly QtoL).",
            "VernacSyntacticDefinition",
            "c1069f6536e408616a27c413a6a7a688385a39a1"
        ],
        [
            "Definition rootQtoL p_j := if p_j.1 == 0 then 0 else (sval (closed_field_poly_normal (pQtoL p_j.1)))`_p_j.2.",
            "VernacDefinition",
            "e9d0dd2170afa0bf7ffba4fd6128599a0e96e11d"
        ],
        [
            "Definition eq_root p_j q_k := rootQtoL p_j == rootQtoL q_k.",
            "VernacDefinition",
            "619f04f0deab896294b10ff86ee2adc1c39a8c4d"
        ],
        [
            "Fact eq_root_is_equiv : equiv_class_of eq_root.",
            "VernacStartTheoremProof",
            "bb50c0ca42484379fbdf429e6261064fb5f1798e"
        ],
        [
            "by rewrite /eq_root; split=> [ ? | ? ? | ? ? ? ] // /eqP->.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Canonical eq_root_equiv := EquivRelPack eq_root_is_equiv.",
            "VernacDefinition",
            "a871fe82ed86e3f986850374bed447cac6de30fa"
        ],
        [
            "Definition type : Type := {eq_quot eq_root}%qT.",
            "VernacDefinition",
            "73bc761b6bb55de08ee1bed5e5b3ea333763c022"
        ],
        [
            "Definition eqMixin : Equality.class_of type := EquivQuot.eqMixin _.",
            "VernacDefinition",
            "9457b3df93ed3b37bfd191912e17f135dd7e0602"
        ],
        [
            "Canonical eqType := EqType type eqMixin.",
            "VernacDefinition",
            "384520d371b7600a2294bf5782e339b44b40c981"
        ],
        [
            "Definition choiceMixin : Choice.mixin_of type := EquivQuot.choiceMixin _.",
            "VernacDefinition",
            "9484d047f25d2a81b1b8f2742f1fc8054469b648"
        ],
        [
            "Canonical choiceType := ChoiceType type choiceMixin.",
            "VernacDefinition",
            "085690adaaec35ccee9d2acda55995cc16938776"
        ],
        [
            "Definition countMixin : Countable.mixin_of type := CanCountMixin reprK.",
            "VernacDefinition",
            "c63b0b89c037d452b6cd2c03f905c0f1714f252e"
        ],
        [
            "Canonical countType := CountType type countMixin.",
            "VernacDefinition",
            "bf9f556715c87d73966a76c09e17a2451c0efe91"
        ],
        [
            "Definition CtoL (u : type) := rootQtoL (repr u).",
            "VernacDefinition",
            "05fc7d1d0c1aea480db04877cd158d2d88928100"
        ],
        [
            "Fact CtoL_inj : injective CtoL.",
            "VernacStartTheoremProof",
            "e970e577b89784843cbe98b285338a9970ebb7d0"
        ],
        [
            "by move=> u v /eqP eq_uv; rewrite -[u]reprK -[v]reprK; apply/eqmodP.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Fact CtoL_P u : integralOver QtoL (CtoL u).",
            "VernacStartTheoremProof",
            "390c67b041a986aefcdaefa8f6d163e866e50d70"
        ],
        [
            "rewrite /CtoL /rootQtoL; case: (repr u) => p j /=.",
            "VernacExtend",
            "712d339e99ee17eb7d5033e19ac614eb3ca6b532"
        ],
        [
            "case: (closed_field_poly_normal _) => r Dp /=.",
            "VernacExtend",
            "e00fff71ff314c991514fc71c41a3556702e444a"
        ],
        [
            "case: ifPn => [_ | nz_p]; first exact: integral0.",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "have [/(nth_default 0)-> | lt_j_r] := leqP (size r) j; first exact: integral0.",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "apply/integral_algebraic; exists p; rewrite // Dp -mul_polyC rootM orbC.",
            "VernacExtend",
            "a2aa1364aa1d58888958ed52f8a0fe47a40d8757"
        ],
        [
            "by rewrite root_prod_XsubC mem_nth.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Fact LtoC_subproof z : integralOver QtoL z -> {u | CtoL u = z}.",
            "VernacStartTheoremProof",
            "0640291f35d583ffa996638122515d77a7fffc74"
        ],
        [
            "case/sig2_eqW=> p mon_p pz0; rewrite /CtoL.",
            "VernacExtend",
            "90a2acb29b7a5304b0ab6ba5269c420638ddef63"
        ],
        [
            "pose j := index z (sval (closed_field_poly_normal (pQtoL p))).",
            "VernacExtend",
            "3c5f04de94609049d978298aa02ff35fb35ea7c7"
        ],
        [
            "pose u := \\pi_type%qT (p, j); exists u; have /eqmodP/eqP-> := reprK u.",
            "VernacExtend",
            "eaf32c4628a4fb7442c0fe55cd32b271f31fa055"
        ],
        [
            "rewrite /rootQtoL -if_neg monic_neq0 //; apply: nth_index => /=.",
            "VernacExtend",
            "634a7639ed2fb7caf62757f84400927f5829b7d5"
        ],
        [
            "case: (closed_field_poly_normal _) => r /= Dp.",
            "VernacExtend",
            "e00fff71ff314c991514fc71c41a3556702e444a"
        ],
        [
            "by rewrite Dp (monicP _) ?(monic_map QtoL) // scale1r root_prod_XsubC in pz0.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Definition LtoC z Az := sval (@LtoC_subproof z Az).",
            "VernacDefinition",
            "176b207104ddc3f3b19e2d8f913d08cf5d73963d"
        ],
        [
            "Fact LtoC_K z Az : CtoL (@LtoC z Az) = z.",
            "VernacStartTheoremProof",
            "58364b5829e51baaa373864d956d06e2eb9255a0"
        ],
        [
            "exact: (svalP (LtoC_subproof Az)).",
            "VernacExtend",
            "ce637ff86bafca5d8359473e8c02af644dcbdc43"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Fact CtoL_K u : LtoC (CtoL_P u) = u.",
            "VernacStartTheoremProof",
            "cf17728fd1d2ec724e3b219d2970ccff7a7fce74"
        ],
        [
            "by apply: CtoL_inj; rewrite LtoC_K.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Definition zero := LtoC (integral0 _).",
            "VernacDefinition",
            "b3835b5de7d1de1e60b2f39ca26069a45e4f0e35"
        ],
        [
            "Definition add u v := LtoC (integral_add (CtoL_P u) (CtoL_P v)).",
            "VernacDefinition",
            "2415f20adaa4c2e920354d75c49352aac50e8bf4"
        ],
        [
            "Definition opp u := LtoC (integral_opp (CtoL_P u)).",
            "VernacDefinition",
            "95f82010946d509e233d7c4e41e51f103164c72b"
        ],
        [
            "Fact addA : associative add.",
            "VernacStartTheoremProof",
            "df2d558fdcca4c88af404e38651531d985296219"
        ],
        [
            "by move=> u v w; apply: CtoL_inj; rewrite !LtoC_K addrA.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Fact addC : commutative add.",
            "VernacStartTheoremProof",
            "3c97bf4883bcdb110c15ac8e7846755803575dc2"
        ],
        [
            "by move=> u v; apply: CtoL_inj; rewrite !LtoC_K addrC.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Fact add0 : left_id zero add.",
            "VernacStartTheoremProof",
            "da9fdfe5dbe7b5204b811a93fe61b794d1667184"
        ],
        [
            "by move=> u; apply: CtoL_inj; rewrite !LtoC_K add0r.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Fact addN : left_inverse zero opp add.",
            "VernacStartTheoremProof",
            "30e21f4d910cb4fcf178c4e15877a21f7d1d6a7e"
        ],
        [
            "by move=> u; apply: CtoL_inj; rewrite !LtoC_K addNr.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Definition zmodMixin := ZmodMixin addA addC add0 addN.",
            "VernacDefinition",
            "ea0eb8600374dc1e353febfebbb3b0918c238167"
        ],
        [
            "Canonical zmodType := ZmodType type zmodMixin.",
            "VernacDefinition",
            "3104e8fa64ed19b644b0f20e08ca61786922e8e8"
        ],
        [
            "Canonical countZmodType := [countZmodType of type].",
            "VernacDefinition",
            "b56fd823a759a979727ff29e0bcf65dd79b6232f"
        ],
        [
            "Fact CtoL_is_additive : additive CtoL.",
            "VernacStartTheoremProof",
            "337a21de80066d798da6edfc55da07980f27f686"
        ],
        [
            "by move=> u v; rewrite !LtoC_K.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Canonical CtoL_additive := Additive CtoL_is_additive.",
            "VernacDefinition",
            "ebb562e77d0382f94b791436763a1639cf44c51b"
        ],
        [
            "Definition one := LtoC (integral1 _).",
            "VernacDefinition",
            "6fd5c71af5569c8609800f1e0adecd691bdc4a82"
        ],
        [
            "Definition mul u v := LtoC (integral_mul (CtoL_P u) (CtoL_P v)).",
            "VernacDefinition",
            "b035a83f065a22d9560498e2162db133b39aa5e3"
        ],
        [
            "Definition inv u := LtoC (integral_inv (CtoL_P u)).",
            "VernacDefinition",
            "6b208ac03cd5bbb37459e79310998bf7039ed7cc"
        ],
        [
            "Fact mulA : associative mul.",
            "VernacStartTheoremProof",
            "dbba44f9c52e2bdf616026dfcec3a9c3b1ae2bea"
        ],
        [
            "by move=> u v w; apply: CtoL_inj; rewrite !LtoC_K mulrA.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Fact mulC : commutative mul.",
            "VernacStartTheoremProof",
            "e527939294dd94df42fe75c630ee8e741addf0bd"
        ],
        [
            "by move=> u v; apply: CtoL_inj; rewrite !LtoC_K mulrC.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Fact mul1 : left_id one mul.",
            "VernacStartTheoremProof",
            "8bd01ba219ecbeda7c3f1dbc9ccc0403f061e551"
        ],
        [
            "by move=> u; apply: CtoL_inj; rewrite !LtoC_K mul1r.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Fact mulD : left_distributive mul +%R.",
            "VernacStartTheoremProof",
            "40362aa6496e1a75a3d37b415da797bf5a02496e"
        ],
        [
            "by move=> u v w; apply: CtoL_inj; rewrite !LtoC_K mulrDl.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Fact one_nz : one != 0 :> type.",
            "VernacStartTheoremProof",
            "8645677b2b22a25e799ac445610dfa8bcd58364c"
        ],
        [
            "by rewrite -(inj_eq CtoL_inj) !LtoC_K oner_eq0.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Definition ringMixin := ComRingMixin mulA mulC mul1 mulD one_nz.",
            "VernacDefinition",
            "2df5a361349bf2e5d8f70b35967b4d2a63c71114"
        ],
        [
            "Canonical ringType := RingType type ringMixin.",
            "VernacDefinition",
            "163db992854bfae4ee377dc12b7e6096d98b70f1"
        ],
        [
            "Canonical comRingType := ComRingType type mulC.",
            "VernacDefinition",
            "1b4c5959af2d0e900a145362f8db0c97c0b6a2e8"
        ],
        [
            "Canonical countRingType := [countRingType of type].",
            "VernacDefinition",
            "0dd31cb15bd3be70859cffc509791a7c4025fadc"
        ],
        [
            "Fact CtoL_is_multiplicative : multiplicative CtoL.",
            "VernacStartTheoremProof",
            "6093626529d9ed7adb6a8e11b0bdab06762ffd1c"
        ],
        [
            "by split=> [u v|]; rewrite !LtoC_K.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Canonical CtoL_rmorphism := AddRMorphism CtoL_is_multiplicative.",
            "VernacDefinition",
            "893237e651435878d20071782a8916f66e577755"
        ],
        [
            "Fact mulVf : GRing.Field.axiom inv.",
            "VernacStartTheoremProof",
            "1c2ed2fe5147810e49f159bf787ddcccf032331e"
        ],
        [
            "move=> u; rewrite -(inj_eq CtoL_inj) rmorph0 => nz_u.",
            "VernacExtend",
            "8261237f0cda1915a4077c28869831c5329103ce"
        ],
        [
            "by apply: CtoL_inj; rewrite !LtoC_K mulVf.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Fact inv0 : inv 0 = 0.",
            "VernacStartTheoremProof",
            "15208840d582d300755fb80085ffbe088edac3aa"
        ],
        [
            "by apply: CtoL_inj; rewrite !LtoC_K invr0.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Definition unitRingMixin := FieldUnitMixin mulVf inv0.",
            "VernacDefinition",
            "09a4c5ef9746c084acdd91ba151b42e72233afa3"
        ],
        [
            "Canonical unitRingType := UnitRingType type unitRingMixin.",
            "VernacDefinition",
            "80b55a0da713183ccb648f607bb14327518b81a2"
        ],
        [
            "Canonical comUnitRingType := [comUnitRingType of type].",
            "VernacDefinition",
            "eb63550ed242dba06b8e10832dcd82a080f950c5"
        ],
        [
            "Definition fieldMixin := FieldMixin mulVf inv0.",
            "VernacDefinition",
            "cb0917208dadb3afa34e63ec41f574db9b18dfe2"
        ],
        [
            "Definition idomainAxiom := FieldIdomainMixin fieldMixin.",
            "VernacDefinition",
            "a63159d66eca218fc1e116a145949cac3c05e0ff"
        ],
        [
            "Canonical idomainType := IdomainType type idomainAxiom.",
            "VernacDefinition",
            "0f3e7a85392bf8aeee4863b3ad41beebbcee18d6"
        ],
        [
            "Canonical fieldType := FieldType type fieldMixin.",
            "VernacDefinition",
            "86346ced0f19b67a0539bea7916360ddca8ee5ab"
        ],
        [
            "Fact closedFieldAxiom : GRing.ClosedField.axiom ringType.",
            "VernacStartTheoremProof",
            "75e02bf2a6b48c745a21bf043c56db858e956e7b"
        ],
        [
            "move=> n a n_gt0; pose p := 'X^n - \\poly_(i < n) CtoL (a i).",
            "VernacExtend",
            "fef3c4a8f7fcf70b0824f3cce5fb58f2e0ef07fd"
        ],
        [
            "have Ap: {in p : seq L, integralRange QtoL}.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "move=> _ /(nthP 0)[j _ <-]; rewrite coefB coefXn coef_poly.",
            "VernacExtend",
            "057edeb0967475c7ea5e8c98c449ddc5613eddc1"
        ],
        [
            "apply: integral_sub; first exact: integral_nat.",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "by case: ifP => _; [apply: CtoL_P | apply: integral0].",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "have sz_p: size p = n.+1.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "by rewrite size_addl size_polyXn // size_opp ltnS size_poly.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "have [z pz0]: exists z, root p z by apply/closed_rootP; rewrite sz_p eqSS -lt0n.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "have Az: integralOver ratr z.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "by apply: integral_root Ap; rewrite // -size_poly_gt0 sz_p.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "exists (LtoC Az); apply/CtoL_inj; rewrite -[CtoL _]subr0 -(rootP pz0).",
            "VernacExtend",
            "ebf6224993b0310d6b84f46fc5e63a3980bf0fc9"
        ],
        [
            "rewrite rmorphX /= LtoC_K hornerD hornerXn hornerN opprD addNKr opprK.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "rewrite horner_poly rmorph_sum; apply: eq_bigr => k _.",
            "VernacExtend",
            "634a7639ed2fb7caf62757f84400927f5829b7d5"
        ],
        [
            "by rewrite rmorphM rmorphX /= LtoC_K.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Definition decFieldMixin := closed_field_QEMixin closedFieldAxiom.",
            "VernacDefinition",
            "a7e2a87a70f79c873cec7270c9cdd2024f833e23"
        ],
        [
            "Canonical decFieldType := DecFieldType type decFieldMixin.",
            "VernacDefinition",
            "3688fe30e3b7ba7400f40d8d2a19cb645f090cb8"
        ],
        [
            "Canonical closedFieldType := ClosedFieldType type closedFieldAxiom.",
            "VernacDefinition",
            "ddd6b83ecf51633897f4a281c693158240a345de"
        ],
        [
            "Fact conj_subproof u : integralOver QtoL (conjL (CtoL u)).",
            "VernacStartTheoremProof",
            "f6936960e38e469573b0edb1aea780ce94357e7d"
        ],
        [
            "have [p mon_p pu0] := CtoL_P u; exists p => //.",
            "VernacExtend",
            "8431fc4d2460f7908baa11892c1b26797a3f17b8"
        ],
        [
            "rewrite -(fmorph_root conjL) conjL_K map_poly_id // => _ /(nthP 0)[j _ <-].",
            "VernacExtend",
            "3c42b53d0efc26db114b00541ac5e7fcb29e6aeb"
        ],
        [
            "by rewrite coef_map fmorph_rat.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Fact conj_is_rmorphism : rmorphism (fun u => LtoC (conj_subproof u)).",
            "VernacStartTheoremProof",
            "fff4bb831b570a7d7dc5e0d286aebf095eabd924"
        ],
        [
            "do 2?split=> [u v|]; apply: CtoL_inj; last by rewrite !LtoC_K rmorph1.",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "-",
            "VernacBullet",
            "581cab4bf49fa4b495e569bbda96fc8d28fddcc0"
        ],
        [
            "by rewrite LtoC_K 3!{1}rmorphB /= !LtoC_K.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "by rewrite LtoC_K 3!{1}rmorphM /= !LtoC_K.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Definition conj : {rmorphism type -> type} := RMorphism conj_is_rmorphism.",
            "VernacDefinition",
            "4e37a9ec3042e8f3e56f73ce95380325afb5fb94"
        ],
        [
            "Lemma conjK : involutive conj.",
            "VernacStartTheoremProof",
            "d62d7e8db7979a0dd948dde3e7b782dfcb743777"
        ],
        [
            "by move=> u; apply: CtoL_inj; rewrite !LtoC_K conjL_K.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Fact conj_nt : ~ conj =1 id.",
            "VernacStartTheoremProof",
            "3f292b9dac1c471758c3f21266694e481a6ad704"
        ],
        [
            "have [i i2]: exists i : type, i ^+ 2 = -1.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "have [i] := @solve_monicpoly _ 2 (nth 0 [:: -1 : type]) isT.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "by rewrite !big_ord_recl big_ord0 /= mul0r mulr1 !addr0; exists i.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "move/(_ i)/(congr1 CtoL); rewrite LtoC_K => iL_J.",
            "VernacExtend",
            "8261237f0cda1915a4077c28869831c5329103ce"
        ],
        [
            "have/ltr_geF/idP[] := @ltr01 Lnum; rewrite -oppr_ge0 -(rmorphN1 CtoL_rmorphism).",
            "VernacExtend",
            "aa9d5fbc682ed874cd64b2543ca6c859b978e924"
        ],
        [
            "rewrite -i2 rmorphX /= expr2 -{2}iL_J -(svalP LnumMixin).",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "by rewrite exprn_ge0 ?normr_ge0.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Definition numMixin := sval (ComplexNumMixin conjK conj_nt).",
            "VernacDefinition",
            "491b52cac038fa557cbd8520a880669e84e95b41"
        ],
        [
            "Canonical numDomainType := NumDomainType type numMixin.",
            "VernacDefinition",
            "6dc4e65562dae09f0de3ee6298490c210bbca8f2"
        ],
        [
            "Canonical numFieldType := [numFieldType of type].",
            "VernacDefinition",
            "f3737dbf6251821a7ef94e0dbc94ae8058a12475"
        ],
        [
            "Lemma normK u : `|u| ^+ 2 = u * conj u.",
            "VernacStartTheoremProof",
            "c3b65fc9a92c58b70ff1a23df479c0216433ce88"
        ],
        [
            "exact: svalP (ComplexNumMixin conjK conj_nt) u.",
            "VernacExtend",
            "ce637ff86bafca5d8359473e8c02af644dcbdc43"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma algebraic : integralRange (@ratr unitRingType).",
            "VernacStartTheoremProof",
            "57ed0f7e5a438e29646eaeb9998d93b97a158377"
        ],
        [
            "move=> u; have [p mon_p pu0] := CtoL_P u; exists p => {mon_p}//.",
            "VernacExtend",
            "607ef7ae8426c7af043bed1740cc4d7c951b3085"
        ],
        [
            "rewrite -(fmorph_root CtoL_rmorphism) -map_poly_comp; congr (root _ _): pu0.",
            "VernacExtend",
            "a0279e71fd23ac6bde2b8b4402981a70ea719044"
        ],
        [
            "by apply/esym/eq_map_poly; apply: fmorph_eq_rat.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Definition conjMixin := ImaginaryMixin (svalP (imaginary_exists closedFieldType)) (fun x => esym (normK x)).",
            "VernacDefinition",
            "79d5af080aece2bc357dcd4bc03419258d7ad52e"
        ],
        [
            "Canonical numClosedFieldType := NumClosedFieldType type conjMixin.",
            "VernacDefinition",
            "c237231a7549ad5095ea5ae7eed404b5c072d18f"
        ],
        [
            "End Implementation.",
            "VernacEndSegment",
            "2899da28a1f146629936690b4d1d6104069a5410"
        ],
        [
            "Definition divisor := Implementation.type.",
            "VernacDefinition",
            "b9ad75e461e6a279a9a7f267d7fc4737bb486095"
        ],
        [
            "Module Internals.",
            "VernacDefineModule",
            "1a84873037efd714f2173326a0e0e9aa85cdb9b3"
        ],
        [
            "Import Implementation.",
            "VernacImport",
            "33fded8145b8709d767ca78bdda62f1ea1b27a22"
        ],
        [
            "Local Notation algC := type.",
            "VernacSyntacticDefinition",
            "0c1025351b6e19e951d9bfe1fe1321d040d59222"
        ],
        [
            "Local Notation \"z ^*\" := (conj z) (at level 2, format \"z ^*\") : ring_scope.",
            "VernacNotation",
            "411e5fe02045b9ab390fffe130009aa1c970e078"
        ],
        [
            "Local Notation QtoC := (ratr : rat -> algC).",
            "VernacSyntacticDefinition",
            "e70ad9a1164cdaacbd24460c0933188b8f0c96e7"
        ],
        [
            "Local Notation QtoCm := [rmorphism of QtoC].",
            "VernacSyntacticDefinition",
            "030e59a88f4d3ddf4291ba36ef9664e8312dd821"
        ],
        [
            "Local Notation pQtoC := (map_poly QtoC).",
            "VernacSyntacticDefinition",
            "9bd1ca6314d89d3e0be4d3539dab2a08a419b92a"
        ],
        [
            "Local Notation ZtoQ := (intr : int -> rat).",
            "VernacSyntacticDefinition",
            "c34d7df6f6f06fe234c02ea031702940bfaebabc"
        ],
        [
            "Local Notation ZtoC := (intr : int -> algC).",
            "VernacSyntacticDefinition",
            "a19db6d8b2aa708c9cfc84784c43f4a468cd4268"
        ],
        [
            "Local Notation Creal := (Num.real : qualifier 0 algC).",
            "VernacSyntacticDefinition",
            "a4b7f2b4d698eb9163c1a9658381f96b0907f150"
        ],
        [
            "Fact algCi_subproof : {i : algC | i ^+ 2 = -1}.",
            "VernacStartTheoremProof",
            "0b04228e1e1ecf1208321993f0ddddaff238f4f7"
        ],
        [
            "exact: GRing.imaginary_exists.",
            "VernacExtend",
            "ce637ff86bafca5d8359473e8c02af644dcbdc43"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Variant getCrat_spec : Type := GetCrat_spec CtoQ of cancel QtoC CtoQ.",
            "VernacInductive",
            "db0ad004da04412544254bfaf878a862538a6c9f"
        ],
        [
            "Fact getCrat_subproof : getCrat_spec.",
            "VernacStartTheoremProof",
            "40058076c118e20c268e11a5cb8a327718fa6ff0"
        ],
        [
            "have isQ := rat_algebraic_decidable algebraic.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "exists (fun z => if isQ z is left Qz then sval (sig_eqW Qz) else 0) => a.",
            "VernacExtend",
            "3c42b53d0efc26db114b00541ac5e7fcb29e6aeb"
        ],
        [
            "case: (isQ _) => [Qa | []]; last by exists a.",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "by case: (sig_eqW _) => b /= /fmorph_inj.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Fact floorC_subproof x : {m | x \\is Creal -> ZtoC m <= x < ZtoC (m + 1)}.",
            "VernacStartTheoremProof",
            "8fcd7038626ff8576a73c05f13fdc1ac03bae8d7"
        ],
        [
            "have [Rx | _] := boolP (x \\is Creal); last by exists 0.",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "without loss x_ge0: x Rx / x >= 0.",
            "VernacExtend",
            "87d5e7b04148ee8f2e4efcc847e0dfadae0aa4cb"
        ],
        [
            "have [x_ge0 | /ltrW x_le0] := real_ger0P Rx; first exact.",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "case/(_ (- x)) => [||m /(_ isT)]; rewrite ?rpredN ?oppr_ge0 //.",
            "VernacExtend",
            "90a2acb29b7a5304b0ab6ba5269c420638ddef63"
        ],
        [
            "rewrite ler_oppr ltr_oppl -!rmorphN opprD /= ltr_neqAle ler_eqVlt.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "case: eqP => [-> _ | _ /and3P[lt_x_m _ le_m_x]].",
            "VernacExtend",
            "e00fff71ff314c991514fc71c41a3556702e444a"
        ],
        [
            "by exists (- m) => _; rewrite lerr rmorphD ltr_addl ltr01.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "by exists (- m - 1); rewrite le_m_x subrK.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "have /ex_minnP[n lt_x_n1 min_n]: exists n, x < n.+1%:R.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "have [n le_x_n] := rat_algebraic_archimedean algebraic x.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "by exists n; rewrite -(ger0_norm x_ge0) (ltr_trans le_x_n) ?ltr_nat.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "exists n%:Z => _; rewrite addrC -intS lt_x_n1 andbT.",
            "VernacExtend",
            "82d53976234637e3f0907eb36cddf61d028c6306"
        ],
        [
            "case Dn: n => // [n1]; rewrite -Dn.",
            "VernacExtend",
            "90a2acb29b7a5304b0ab6ba5269c420638ddef63"
        ],
        [
            "have [||//|] := @real_lerP _ n%:R x; rewrite ?rpred_nat //.",
            "VernacExtend",
            "aa9d5fbc682ed874cd64b2543ca6c859b978e924"
        ],
        [
            "by rewrite Dn => /min_n; rewrite Dn ltnn.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Fact minCpoly_subproof (x : algC) : {p | p \\is monic & forall q, root (pQtoC q) x = (p %| q)%R}.",
            "VernacStartTheoremProof",
            "9e32a5a624f058660b5b3987a6b7e57b47490d63"
        ],
        [
            "have isQ := rat_algebraic_decidable algebraic.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "have [p [mon_p px0 irr_p]] := minPoly_decidable_closure isQ (algebraic x).",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "exists p => // q; apply/idP/idP=> [qx0 | /dvdpP[r ->]]; last first.",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "by rewrite rmorphM rootM px0 orbT.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "suffices /eqp_dvdl <-: gcdp p q %= p by apply: dvdp_gcdr.",
            "VernacExtend",
            "290ed488b5562e885aa2cac56f3a69b4faa0eaa6"
        ],
        [
            "rewrite irr_p ?dvdp_gcdl ?gtn_eqF // -(size_map_poly QtoCm) gcdp_map /=.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "rewrite (@root_size_gt1 _ x) ?root_gcd ?px0 //.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "by rewrite gcdp_eq0 negb_and map_poly_eq0 monic_neq0.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Definition algC_divisor (x : algC) := x : divisor.",
            "VernacDefinition",
            "c1b199be0f20d7f302210166bb56922f9529f7c6"
        ],
        [
            "Definition int_divisor m := m%:~R : divisor.",
            "VernacDefinition",
            "189a498de6e23f658ff25bc3a6d1c083da9563d8"
        ],
        [
            "Definition nat_divisor n := n%:R : divisor.",
            "VernacDefinition",
            "13ab5147a3cad9a450bf9afb31770b49bb9de320"
        ],
        [
            "End Internals.",
            "VernacEndSegment",
            "1e801ae296b82da487d9ae63b07df78530b4efcb"
        ],
        [
            "Module Import Exports.",
            "VernacDefineModule",
            "f5a1035b94691e963f68c6f9e1df4c47bb9f27d8"
        ],
        [
            "Import Implementation Internals.",
            "VernacImport",
            "4868d5ab370f6a8a07d543302cb7e18596afeaec"
        ],
        [
            "Notation algC := type.",
            "VernacSyntacticDefinition",
            "39f1e3c0b5c4ba00f2487cd4d62bfae288b56c83"
        ],
        [
            "Delimit Scope C_scope with C.",
            "VernacDelimiters",
            "d8ed5469419b87445b8f2f18dcfcb0781d7fe694"
        ],
        [
            "Delimit Scope C_core_scope with Cc.",
            "VernacDelimiters",
            "01e47d32a5f2b5b0d05754847c02c29c9722b549"
        ],
        [
            "Delimit Scope C_expanded_scope with Cx.",
            "VernacDelimiters",
            "ca43a1cf7ff3c6749aea3a64a4cd8b03f255244f"
        ],
        [
            "Open Scope C_core_scope.",
            "VernacOpenCloseScope",
            "1ab886d6d3cd3c8d4cd79e4d8ff728f661d19e1a"
        ],
        [
            "Canonical eqType.",
            "VernacCanonical",
            "dd1ac877a396f552e2a8f23e59be45903d8b15ad"
        ],
        [
            "Canonical choiceType.",
            "VernacCanonical",
            "af7a1759ddd13e2b7e4e1ce16b6a3595a77b5659"
        ],
        [
            "Canonical countType.",
            "VernacCanonical",
            "02fb6756c6e5c7a37c5d8f2aa22109bf5c883f7e"
        ],
        [
            "Canonical zmodType.",
            "VernacCanonical",
            "9a6f278270af4b6ced100d8e0c90c7719a960a86"
        ],
        [
            "Canonical countZmodType.",
            "VernacCanonical",
            "f86b89e65bca8d622a48d313bb5951eefced3243"
        ],
        [
            "Canonical ringType.",
            "VernacCanonical",
            "b7d4c328ac58b23ee4b52bd787434621c20d2c4d"
        ],
        [
            "Canonical countRingType.",
            "VernacCanonical",
            "03a6ac902c3c30f68e752f4df927609bf21f13fc"
        ],
        [
            "Canonical unitRingType.",
            "VernacCanonical",
            "5adf5dbcca23e501d2be7f60fe9ad3def13431b8"
        ],
        [
            "Canonical comRingType.",
            "VernacCanonical",
            "30f9087081da845c9c545aeb8d7375204ed4f1b3"
        ],
        [
            "Canonical comUnitRingType.",
            "VernacCanonical",
            "74522c0e1d11ec46568915dda5f1829b7bbe8a04"
        ],
        [
            "Canonical idomainType.",
            "VernacCanonical",
            "ec8e76c80fed77c2b91406ec8a21033d94f8380d"
        ],
        [
            "Canonical numDomainType.",
            "VernacCanonical",
            "fe84c04789ee4d3b5b33b4feaf2d513d5b21be11"
        ],
        [
            "Canonical fieldType.",
            "VernacCanonical",
            "2f62ae066c69ea008603157a15e19f08a6a6284b"
        ],
        [
            "Canonical numFieldType.",
            "VernacCanonical",
            "92cb8d51df5dfb073beaef41441e663ecc24ff43"
        ],
        [
            "Canonical decFieldType.",
            "VernacCanonical",
            "dd11f9cf737ed8cd67a7804637d9137ba5bbe73f"
        ],
        [
            "Canonical closedFieldType.",
            "VernacCanonical",
            "d87f6d4f82a5d57b760a5db7a0d2e1198b6799d0"
        ],
        [
            "Canonical numClosedFieldType.",
            "VernacCanonical",
            "bec2ad873c62328a73eee10e8cf9a5f6897c7dba"
        ],
        [
            "Notation algCeq := eqType.",
            "VernacSyntacticDefinition",
            "b85bbb6f86aee07ee7e2436057a9b35c162a7154"
        ],
        [
            "Notation algCzmod := zmodType.",
            "VernacSyntacticDefinition",
            "22e25f3661dd438926767b60c5be534693047de5"
        ],
        [
            "Notation algCring := ringType.",
            "VernacSyntacticDefinition",
            "0829c615679df33648953711d3c228e098fb6576"
        ],
        [
            "Notation algCuring := unitRingType.",
            "VernacSyntacticDefinition",
            "bb2d8dc47dee62b65430203da2f88d460c9a45f1"
        ],
        [
            "Notation algCnum := numDomainType.",
            "VernacSyntacticDefinition",
            "6393b6f30c3950b64fb48df5423c96676797ce3c"
        ],
        [
            "Notation algCfield := fieldType.",
            "VernacSyntacticDefinition",
            "b28e5c476229c8ce071c180b1ddb8d111a504cef"
        ],
        [
            "Notation algCnumField := numFieldType.",
            "VernacSyntacticDefinition",
            "42ba8eb7226d6e76063d5c7b18abfd89d96f6fdf"
        ],
        [
            "Notation algCnumClosedField := numClosedFieldType.",
            "VernacSyntacticDefinition",
            "1c07b1a34e038a5592728b7b357f255e6b19e6b9"
        ],
        [
            "Notation Creal := (@Num.Def.Rreal numDomainType).",
            "VernacSyntacticDefinition",
            "739ff861964ad402db3212f34013eb748d3c2b14"
        ],
        [
            "Definition getCrat := let: GetCrat_spec CtoQ _ := getCrat_subproof in CtoQ.",
            "VernacDefinition",
            "4733fb7ff5424f13808944ffcb9b6f60423ce319"
        ],
        [
            "Definition Crat : pred_class := fun x : algC => ratr (getCrat x) == x.",
            "VernacDefinition",
            "a1b5d21ecacab4553223652885dd7133a7bf9cf7"
        ],
        [
            "Definition floorC x := sval (floorC_subproof x).",
            "VernacDefinition",
            "f279abd7716d886ad27b5051c2c5ae351bb5cd94"
        ],
        [
            "Definition Cint : pred_class := fun x : algC => (floorC x)%:~R == x.",
            "VernacDefinition",
            "a468b009a4362dbb75399b0d447a4e92b469dad2"
        ],
        [
            "Definition truncC x := if x >= 0 then `|floorC x|%N else 0%N.",
            "VernacDefinition",
            "0a74acd7edc9f6b2844ae19a6611f644a6835be8"
        ],
        [
            "Definition Cnat : pred_class := fun x : algC => (truncC x)%:R == x.",
            "VernacDefinition",
            "72b8d285ad89d7b8aea2563f48efca0191234a53"
        ],
        [
            "Definition minCpoly x : {poly algC} := let: exist2 p _ _ := minCpoly_subproof x in map_poly ratr p.",
            "VernacDefinition",
            "aa6393d9020b49a9dd338bbbf60e759311dad352"
        ],
        [
            "Coercion nat_divisor : nat >-> divisor.",
            "VernacCoercion",
            "e55a054fb7228b187e3fbbc10678a57f61a78d5b"
        ],
        [
            "Coercion int_divisor : int >-> divisor.",
            "VernacCoercion",
            "72b649a4406f2a08ff7e7b6730ac2af4b7dc316f"
        ],
        [
            "Coercion algC_divisor : algC >-> divisor.",
            "VernacCoercion",
            "a82bca310a78eb55a29ffd5cf8544b487b238795"
        ],
        [
            "Lemma nCdivE (p : nat) : p = p%:R :> divisor.",
            "VernacStartTheoremProof",
            "ddd97ab3d7f258e1e97af75f7d1b1931bdee04e1"
        ],
        [
            "by [].",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma zCdivE (p : int) : p = p%:~R :> divisor.",
            "VernacStartTheoremProof",
            "d2dfa58f437998ae0b11e7373ece1b132659c60c"
        ],
        [
            "by [].",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Definition CdivE := (nCdivE, zCdivE).",
            "VernacDefinition",
            "a85dac61577ef03c3cce17279948be834e39ba16"
        ],
        [
            "Definition dvdC (x : divisor) : pred_class := fun y : algC => if x == 0 then y == 0 else y / x \\in Cint.",
            "VernacDefinition",
            "2af7b5f0213d0c769c00157c85a62ea6a6d280bb"
        ],
        [
            "Notation \"x %| y\" := (y \\in dvdC x) : C_expanded_scope.",
            "VernacNotation",
            "e8f3545a50272e880106557c3c9c7b9e7c3b9bc7"
        ],
        [
            "Notation \"x %| y\" := (@in_mem divisor y (mem (dvdC x))) : C_scope.",
            "VernacNotation",
            "95acf0dbf2a41e8b43481f4fb626bb5241d88e75"
        ],
        [
            "Definition eqCmod (e x y : divisor) := (e %| x - y)%C.",
            "VernacDefinition",
            "c32048ebf33adfb5c2e6cedf3275d98fc5615529"
        ],
        [
            "Notation \"x == y %[mod e ]\" := (eqCmod e x y) : C_scope.",
            "VernacNotation",
            "7c589bbf16749c5b1047c7fd9762ff64e3532483"
        ],
        [
            "Notation \"x != y %[mod e ]\" := (~~ (x == y %[mod e])%C) : C_scope.",
            "VernacNotation",
            "d532773f93be801cdf1758d92097fb68a18f1445"
        ],
        [
            "End Exports.",
            "VernacEndSegment",
            "71efedae7ccffd696e1ffe5d8ae6baa8a4484918"
        ],
        [
            "End Algebraics.",
            "VernacEndSegment",
            "1f79019b00b18647aaa82f5380184e737bfa29d5"
        ],
        [
            "Export Algebraics.Exports.",
            "VernacImport",
            "4597ca6a033f7ad6c07cf5e802957a03f0d47a76"
        ],
        [
            "Section AlgebraicsTheory.",
            "VernacBeginSection",
            "58436c382f978884860d51eed8f40dd7ef297e96"
        ],
        [
            "Implicit Types (x y z : algC) (n : nat) (m : int) (b : bool).",
            "VernacReserve",
            "b7d98eca1a6950e33bc4550b8ac47e389a4520da"
        ],
        [
            "Import Algebraics.Internals.",
            "VernacImport",
            "8c24259700c51fa4aa8a3918880695d75ba482d2"
        ],
        [
            "Local Notation ZtoQ := (intr : int -> rat).",
            "VernacSyntacticDefinition",
            "c34d7df6f6f06fe234c02ea031702940bfaebabc"
        ],
        [
            "Local Notation ZtoC := (intr : int -> algC).",
            "VernacSyntacticDefinition",
            "a19db6d8b2aa708c9cfc84784c43f4a468cd4268"
        ],
        [
            "Local Notation QtoC := (ratr : rat -> algC).",
            "VernacSyntacticDefinition",
            "e70ad9a1164cdaacbd24460c0933188b8f0c96e7"
        ],
        [
            "Local Notation QtoCm := [rmorphism of QtoC].",
            "VernacSyntacticDefinition",
            "030e59a88f4d3ddf4291ba36ef9664e8312dd821"
        ],
        [
            "Local Notation CtoQ := getCrat.",
            "VernacSyntacticDefinition",
            "1cf011e36dd8a7ece3c289b883f5f0b9c2c3b95d"
        ],
        [
            "Local Notation intrp := (map_poly intr).",
            "VernacSyntacticDefinition",
            "63a4877da3f5cbac65596a0ecfcf1e3ed88990bf"
        ],
        [
            "Local Notation pZtoQ := (map_poly ZtoQ).",
            "VernacSyntacticDefinition",
            "cbed48c83552f3eb5804fe7e592e6d13be1b8b94"
        ],
        [
            "Local Notation pZtoC := (map_poly ZtoC).",
            "VernacSyntacticDefinition",
            "8d2ec9ab77e8c502a231d56826f25e600a5a4a06"
        ],
        [
            "Local Notation pQtoC := (map_poly ratr).",
            "VernacSyntacticDefinition",
            "5636bd38b330ad0c188fb8eaed286000e21cd854"
        ],
        [
            "Local Hint Resolve (intr_inj : injective ZtoC) : core.",
            "VernacHints",
            "380c6553ac94f694e7b9a3b30f62171c59616d7c"
        ],
        [
            "Definition eqC_nat n p : (n%:R == p%:R :> algC) = (n == p) := eqr_nat _ n p.",
            "VernacDefinition",
            "2f3bfb90d2bea758eccf3b9becffc23b58009156"
        ],
        [
            "Definition leC_nat n p : (n%:R <= p%:R :> algC) = (n <= p)%N := ler_nat _ n p.",
            "VernacDefinition",
            "db122a270ae24302de99ff8bdc098c88d39985fd"
        ],
        [
            "Definition ltC_nat n p : (n%:R < p%:R :> algC) = (n < p)%N := ltr_nat _ n p.",
            "VernacDefinition",
            "b5bc39de11a1814adee485d4352403aa908dbffc"
        ],
        [
            "Definition Cchar : [char algC] =i pred0 := @char_num _.",
            "VernacDefinition",
            "6ead305fdd3370dc82e2e4be0345882894313a79"
        ],
        [
            "Definition CratrE := let CnF := Algebraics.Implementation.numFieldType in let QtoCm := ratr_rmorphism CnF in ((rmorph0 QtoCm, rmorph1 QtoCm, rmorphMn QtoCm, rmorphN QtoCm, rmorphD QtoCm), (rmorphM QtoCm, rmorphX QtoCm, fmorphV QtoCm), (rmorphMz QtoCm, rmorphXz QtoCm, @ratr_norm CnF, @ratr_sg CnF), =^~ (@ler_rat CnF, @ltr_rat CnF, (inj_eq (fmorph_inj QtoCm)))).",
            "VernacDefinition",
            "cd87741e3069eef57dfcf3717e685bcc6767d8d7"
        ],
        [
            "Definition CintrE := let CnF := Algebraics.Implementation.numFieldType in let ZtoCm := intmul1_rmorphism CnF in ((rmorph0 ZtoCm, rmorph1 ZtoCm, rmorphMn ZtoCm, rmorphN ZtoCm, rmorphD ZtoCm), (rmorphM ZtoCm, rmorphX ZtoCm), (rmorphMz ZtoCm, @intr_norm CnF, @intr_sg CnF), =^~ (@ler_int CnF, @ltr_int CnF, (inj_eq (@intr_inj CnF)))).",
            "VernacDefinition",
            "d7a6d4b697f2dc83d1a3d51a2e4f1b714b37a2fc"
        ],
        [
            "Let nz2 : 2%:R != 0 :> algC.",
            "VernacDefinition",
            "e02f1e5445277639ff7ba888f03b4d650b9260af"
        ],
        [
            "by rewrite -!CintrE.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Definition algC_algebraic x := Algebraics.Implementation.algebraic x.",
            "VernacDefinition",
            "4354494b189f9bf5cf0936f5f7608eb89cd94938"
        ],
        [
            "Lemma Creal0 : 0 \\is Creal.",
            "VernacStartTheoremProof",
            "8c80f1cdc93b4b1f6617e6794b5c75e7c0b3ec38"
        ],
        [
            "exact: rpred0.",
            "VernacExtend",
            "ce637ff86bafca5d8359473e8c02af644dcbdc43"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma Creal1 : 1 \\is Creal.",
            "VernacStartTheoremProof",
            "46824a034b470a54b0c14176fe4e4741dd5c4dc0"
        ],
        [
            "exact: rpred1.",
            "VernacExtend",
            "ce637ff86bafca5d8359473e8c02af644dcbdc43"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Hint Resolve Creal0 Creal1 : core.",
            "VernacHints",
            "0aac3c6e6780fa850b26ff4ee271001461327cec"
        ],
        [
            "Lemma algCrect x : x = 'Re x + 'i * 'Im x.",
            "VernacStartTheoremProof",
            "6a1874fad55ee9758e5e761cc2c9860d82bda254"
        ],
        [
            "by rewrite [LHS]Crect.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma algCreal_Re x : 'Re x \\is Creal.",
            "VernacStartTheoremProof",
            "87ef6946f3bd062ccd3a0e31b0e281207467df5b"
        ],
        [
            "by rewrite Creal_Re.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma algCreal_Im x : 'Im x \\is Creal.",
            "VernacStartTheoremProof",
            "e40995ea3c7aa1f055d5bde9266355148563f5f5"
        ],
        [
            "by rewrite Creal_Im.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Hint Resolve algCreal_Re algCreal_Im : core.",
            "VernacHints",
            "8b74693fa3a3818e64e63937053c7cd82b62d367"
        ],
        [
            "Lemma floorC_itv x : x \\is Creal -> (floorC x)%:~R <= x < (floorC x + 1)%:~R.",
            "VernacStartTheoremProof",
            "04e7beb14c617c30dcac2927cd703ef3cc5ec463"
        ],
        [
            "by rewrite /floorC => Rx; case: (floorC_subproof x) => //= m; apply.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma floorC_def x m : m%:~R <= x < (m + 1)%:~R -> floorC x = m.",
            "VernacStartTheoremProof",
            "004785ed78ddd42721b60c08fa7a113a04d50c0e"
        ],
        [
            "case/andP=> lemx ltxm1; apply/eqP; rewrite eqr_le -!ltz_addr1.",
            "VernacExtend",
            "db5c0dcae9fc8f6605ec5d5bf559f9684231fcd6"
        ],
        [
            "have /floorC_itv/andP[lefx ltxf1]: x \\is Creal.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "by rewrite -[x](subrK m%:~R) rpredD ?realz ?ler_sub_real.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "by rewrite -!(ltr_int [numFieldType of algC]) 2?(@ler_lt_trans _ x).",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma intCK : cancel intr floorC.",
            "VernacStartTheoremProof",
            "480fba9436ac02d01a5431c8cde95f59be8b5dbe"
        ],
        [
            "by move=> m; apply: floorC_def; rewrite ler_int ltr_int ltz_addr1 lerr.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma floorCK : {in Cint, cancel floorC intr}.",
            "VernacStartTheoremProof",
            "57ce0a979b66bc98ead0b950336e10800c4f3a8f"
        ],
        [
            "by move=> z /eqP.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma floorC0 : floorC 0 = 0.",
            "VernacStartTheoremProof",
            "7fff7247171391af5a6f61df0c6eb31dac8e8280"
        ],
        [
            "exact: (intCK 0).",
            "VernacExtend",
            "ce637ff86bafca5d8359473e8c02af644dcbdc43"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma floorC1 : floorC 1 = 1.",
            "VernacStartTheoremProof",
            "ef5cc4ca6abf0c9105ee1d49a05ddc1aaa511f1a"
        ],
        [
            "exact: (intCK 1).",
            "VernacExtend",
            "ce637ff86bafca5d8359473e8c02af644dcbdc43"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Hint Resolve floorC0 floorC1 : core.",
            "VernacHints",
            "523dd50b8f82cf9fa848a55f79c8b28cbf4ce869"
        ],
        [
            "Lemma floorCpK (p : {poly algC}) : p \\is a polyOver Cint -> map_poly intr (map_poly floorC p) = p.",
            "VernacStartTheoremProof",
            "da2eed64abebf8153f4de38719a575c670749bb3"
        ],
        [
            "move/(all_nthP 0)=> Zp; apply/polyP=> i.",
            "VernacExtend",
            "d6ebf3361f380a12d5c2c9bbb7ea363132c48b36"
        ],
        [
            "rewrite coef_map coef_map_id0 //= -[p]coefK coef_poly.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "by case: ifP => [/Zp/floorCK // | _]; rewrite floorC0.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma floorCpP (p : {poly algC}) : p \\is a polyOver Cint -> {q | p = map_poly intr q}.",
            "VernacStartTheoremProof",
            "f6cca0d60283969f8e37a6d27b66198b8c45fe55"
        ],
        [
            "by exists (map_poly floorC p); rewrite floorCpK.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma Cint_int m : m%:~R \\in Cint.",
            "VernacStartTheoremProof",
            "9817a3394d502cf8559ad3fccf4c739536a1cade"
        ],
        [
            "by rewrite unfold_in intCK.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma CintP x : reflect (exists m, x = m%:~R) (x \\in Cint).",
            "VernacStartTheoremProof",
            "817f0f3a2cc2fd06f32272949d88baba3b66a2d0"
        ],
        [
            "by apply: (iffP idP) => [/eqP<-|[m ->]]; [exists (floorC x) | apply: Cint_int].",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma floorCD : {in Cint & Creal, {morph floorC : x y / x + y}}.",
            "VernacStartTheoremProof",
            "5af5cb815eddefa4dd553c61c31c596abfe1ace3"
        ],
        [
            "move=> _ y /CintP[m ->] Ry; apply: floorC_def.",
            "VernacExtend",
            "d6ebf3361f380a12d5c2c9bbb7ea363132c48b36"
        ],
        [
            "by rewrite -addrA 2!rmorphD /= intCK ler_add2l ltr_add2l floorC_itv.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma floorCN : {in Cint, {morph floorC : x / - x}}.",
            "VernacStartTheoremProof",
            "181b046020fc398986eaf3f66a2e16160f6773cf"
        ],
        [
            "by move=> _ /CintP[m ->]; rewrite -rmorphN !intCK.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma floorCM : {in Cint &, {morph floorC : x y / x * y}}.",
            "VernacStartTheoremProof",
            "d7ae1b62d4e603d5c03c5701e3ef7e96b69fea1a"
        ],
        [
            "by move=> _ _ /CintP[m1 ->] /CintP[m2 ->]; rewrite -rmorphM !intCK.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma floorCX n : {in Cint, {morph floorC : x / x ^+ n}}.",
            "VernacStartTheoremProof",
            "08e0423f90751e661ec25ac928183f627fb0d652"
        ],
        [
            "by move=> _ /CintP[m ->]; rewrite -rmorphX !intCK.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma rpred_Cint S (ringS : subringPred S) (kS : keyed_pred ringS) x : x \\in Cint -> x \\in kS.",
            "VernacStartTheoremProof",
            "ea6a8eee52f543c312ca88b9bff57f33c0765cda"
        ],
        [
            "by case/CintP=> m ->; apply: rpred_int.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma Cint0 : 0 \\in Cint.",
            "VernacStartTheoremProof",
            "3ef69610cc3754d85d0e94d9dbc73c26b5126ab9"
        ],
        [
            "exact: (Cint_int 0).",
            "VernacExtend",
            "ce637ff86bafca5d8359473e8c02af644dcbdc43"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma Cint1 : 1 \\in Cint.",
            "VernacStartTheoremProof",
            "f688e25ff638502810895fae39400e7ba9cdfa86"
        ],
        [
            "exact: (Cint_int 1).",
            "VernacExtend",
            "ce637ff86bafca5d8359473e8c02af644dcbdc43"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Hint Resolve Cint0 Cint1 : core.",
            "VernacHints",
            "9b8ae627f63fbcbfbc0e0758ef65a27fd0faa5b1"
        ],
        [
            "Fact Cint_key : pred_key Cint.",
            "VernacStartTheoremProof",
            "a062891223c09bb7a647d58117298c07795b2e04"
        ],
        [
            "by [].",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Fact Cint_subring : subring_closed Cint.",
            "VernacStartTheoremProof",
            "9abff24591784e0290220e36f10fbb8317778818"
        ],
        [
            "by split=> // _ _ /CintP[m ->] /CintP[p ->]; rewrite -(rmorphB, rmorphM) Cint_int.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Canonical Cint_keyed := KeyedPred Cint_key.",
            "VernacDefinition",
            "84eb798bc89fe1e8e18174c7624a6468c1a53f5f"
        ],
        [
            "Canonical Cint_opprPred := OpprPred Cint_subring.",
            "VernacDefinition",
            "e334f533eea2149b66356881693f38623e73ed92"
        ],
        [
            "Canonical Cint_addrPred := AddrPred Cint_subring.",
            "VernacDefinition",
            "698e2a376fd83c46e1bd21a74ce7a92ba0fe805b"
        ],
        [
            "Canonical Cint_mulrPred := MulrPred Cint_subring.",
            "VernacDefinition",
            "ebd46ae279d15da3cc01bb82891a5b4408e9a4d3"
        ],
        [
            "Canonical Cint_zmodPred := ZmodPred Cint_subring.",
            "VernacDefinition",
            "c42620db8f5b340845956c5adccd894f860750c6"
        ],
        [
            "Canonical Cint_semiringPred := SemiringPred Cint_subring.",
            "VernacDefinition",
            "555044bb699df5ba8b9c2088d2a9d89dbb8b422b"
        ],
        [
            "Canonical Cint_smulrPred := SmulrPred Cint_subring.",
            "VernacDefinition",
            "c233aec233683de68b77e5b36cb33e9cbf3da97a"
        ],
        [
            "Canonical Cint_subringPred := SubringPred Cint_subring.",
            "VernacDefinition",
            "91e504dc168b9370531e7df14b9060c086ed73ea"
        ],
        [
            "Lemma Creal_Cint : {subset Cint <= Creal}.",
            "VernacStartTheoremProof",
            "db900a1ce67630240c1f67441416bf9027fbf1c7"
        ],
        [
            "by move=> _ /CintP[m ->]; apply: realz.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma conj_Cint x : x \\in Cint -> x^* = x.",
            "VernacStartTheoremProof",
            "3b520a5fc7712be15d58b7e172887ba3a43c3f69"
        ],
        [
            "by move/Creal_Cint/conj_Creal.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma Cint_normK x : x \\in Cint -> `|x| ^+ 2 = x ^+ 2.",
            "VernacStartTheoremProof",
            "1b8a14b8c1256f1328465e50017c28e9438e0580"
        ],
        [
            "by move/Creal_Cint/real_normK.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma CintEsign x : x \\in Cint -> x = (-1) ^+ (x < 0)%C * `|x|.",
            "VernacStartTheoremProof",
            "24d6d43b5ab91d062f0edc3d8a6bca3a86afdba8"
        ],
        [
            "by move/Creal_Cint/realEsign.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma truncC_itv x : 0 <= x -> (truncC x)%:R <= x < (truncC x).+1%:R.",
            "VernacStartTheoremProof",
            "e9036710a5c49c845f81712c8ff0cd49948c4e5b"
        ],
        [
            "move=> x_ge0; have /andP[lemx ltxm1] := floorC_itv (ger0_real x_ge0).",
            "VernacExtend",
            "ccd83c252dcbae3d56f3d057fcb8217878b51901"
        ],
        [
            "rewrite /truncC x_ge0 -addn1 !pmulrn PoszD gez0_abs ?lemx //.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "by rewrite -ltz_addr1 -(ltr_int [numFieldType of algC]) (ler_lt_trans x_ge0).",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma truncC_def x n : n%:R <= x < n.+1%:R -> truncC x = n.",
            "VernacStartTheoremProof",
            "0dba615ab42a0179aaffc0baa117dd195c724864"
        ],
        [
            "move=> ivt_n_x; have /andP[lenx _] := ivt_n_x.",
            "VernacExtend",
            "ccd83c252dcbae3d56f3d057fcb8217878b51901"
        ],
        [
            "by rewrite /truncC (ler_trans (ler0n _ n)) // (@floorC_def _ n) // addrC -intS.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma natCK n : truncC n%:R = n.",
            "VernacStartTheoremProof",
            "49f0c1759b061b69a75c25b19cd5bf5a909ae882"
        ],
        [
            "by apply: truncC_def; rewrite lerr ltr_nat /=.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma CnatP x : reflect (exists n, x = n%:R) (x \\in Cnat).",
            "VernacStartTheoremProof",
            "4a6c146e0ac2c3ba7a86b3e60f8efd9e91062082"
        ],
        [
            "by apply: (iffP eqP) => [<- | [n ->]]; [exists (truncC x) | rewrite natCK].",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma truncCK : {in Cnat, cancel truncC (GRing.natmul 1)}.",
            "VernacStartTheoremProof",
            "ca33f284892c76b5f9146f8ed7c8713f2450e356"
        ],
        [
            "by move=> x /eqP.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma truncC_gt0 x : (0 < truncC x)%N = (1 <= x).",
            "VernacStartTheoremProof",
            "08fa294fd64c5ffa7344c974e3bda77a1c5e205e"
        ],
        [
            "apply/idP/idP=> [m_gt0 | x_ge1].",
            "VernacExtend",
            "4bd6fa79b17bcd2bfb7af091fb325367a20385d6"
        ],
        [
            "have /truncC_itv/andP[lemx _]: 0 <= x.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "by move: m_gt0; rewrite /truncC; case: ifP.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "by apply: ler_trans lemx; rewrite ler1n.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "have /truncC_itv/andP[_ ltxm1]:= ler_trans ler01 x_ge1.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "by rewrite -ltnS -ltC_nat (ler_lt_trans x_ge1).",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma truncC0Pn x : reflect (truncC x = 0%N) (~~ (1 <= x)).",
            "VernacStartTheoremProof",
            "3524faba2c1cbea98f0322587d5a58d09d3310e6"
        ],
        [
            "by rewrite -truncC_gt0 -eqn0Ngt; apply: eqP.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma truncC0 : truncC 0 = 0%N.",
            "VernacStartTheoremProof",
            "03400aceb56e4ad8fc30d3927260035f097c4d28"
        ],
        [
            "exact: (natCK 0).",
            "VernacExtend",
            "ce637ff86bafca5d8359473e8c02af644dcbdc43"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma truncC1 : truncC 1 = 1%N.",
            "VernacStartTheoremProof",
            "565c52542df3c948bf8d96ca0ba4b7e46f3c0833"
        ],
        [
            "exact: (natCK 1).",
            "VernacExtend",
            "ce637ff86bafca5d8359473e8c02af644dcbdc43"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma truncCD : {in Cnat & Num.nneg, {morph truncC : x y / x + y >-> (x + y)%N}}.",
            "VernacStartTheoremProof",
            "c440e45ee688e095c6b8ca28c069327540ae4269"
        ],
        [
            "move=> _ y /CnatP[n ->] y_ge0; apply: truncC_def.",
            "VernacExtend",
            "d6ebf3361f380a12d5c2c9bbb7ea363132c48b36"
        ],
        [
            "by rewrite -addnS !natrD !natCK ler_add2l ltr_add2l truncC_itv.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma truncCM : {in Cnat &, {morph truncC : x y / x * y >-> (x * y)%N}}.",
            "VernacStartTheoremProof",
            "a372b67f57f5b700b85fb52a07f665e4e4eb7819"
        ],
        [
            "by move=> _ _ /CnatP[n1 ->] /CnatP[n2 ->]; rewrite -natrM !natCK.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma truncCX n : {in Cnat, {morph truncC : x / x ^+ n >-> (x ^ n)%N}}.",
            "VernacStartTheoremProof",
            "e4367880920d174ba3e1aeb5b127963c65c0a350"
        ],
        [
            "by move=> _ /CnatP[n1 ->]; rewrite -natrX !natCK.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma rpred_Cnat S (ringS : semiringPred S) (kS : keyed_pred ringS) x : x \\in Cnat -> x \\in kS.",
            "VernacStartTheoremProof",
            "6f63b261f845c649e501473cd2f1cedaa98e68e1"
        ],
        [
            "by case/CnatP=> n ->; apply: rpred_nat.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma Cnat_nat n : n%:R \\in Cnat.",
            "VernacStartTheoremProof",
            "1a8c682499671bdff5d61bb53f038d3b90012261"
        ],
        [
            "by apply/CnatP; exists n.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma Cnat0 : 0 \\in Cnat.",
            "VernacStartTheoremProof",
            "92a1189fa36e5cca3d693193983149f935de437b"
        ],
        [
            "exact: (Cnat_nat 0).",
            "VernacExtend",
            "ce637ff86bafca5d8359473e8c02af644dcbdc43"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma Cnat1 : 1 \\in Cnat.",
            "VernacStartTheoremProof",
            "994c6fb5b19fb609f3eb4cf87efcda2d4bf140a7"
        ],
        [
            "exact: (Cnat_nat 1).",
            "VernacExtend",
            "ce637ff86bafca5d8359473e8c02af644dcbdc43"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Hint Resolve Cnat_nat Cnat0 Cnat1 : core.",
            "VernacHints",
            "bf32c30ef96217ffc5c536fc092a0011733eae65"
        ],
        [
            "Fact Cnat_key : pred_key Cnat.",
            "VernacStartTheoremProof",
            "b5a8898dd3ea313282293748377cfe20542fd3af"
        ],
        [
            "by [].",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Fact Cnat_semiring : semiring_closed Cnat.",
            "VernacStartTheoremProof",
            "4e53578a8eade1938c5f12908bc9fc8549caebdd"
        ],
        [
            "by do 2![split] => //= _ _ /CnatP[n ->] /CnatP[m ->]; rewrite -(natrD, natrM).",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Canonical Cnat_keyed := KeyedPred Cnat_key.",
            "VernacDefinition",
            "b99d53b5dedeeb2d2aae78b2a5099bf486f542e8"
        ],
        [
            "Canonical Cnat_addrPred := AddrPred Cnat_semiring.",
            "VernacDefinition",
            "961932569597ab1a0b6fee5650245c53f7b2e685"
        ],
        [
            "Canonical Cnat_mulrPred := MulrPred Cnat_semiring.",
            "VernacDefinition",
            "0162c8bd82aecf62317d1ae7af9a7bd98e92bdd4"
        ],
        [
            "Canonical Cnat_semiringPred := SemiringPred Cnat_semiring.",
            "VernacDefinition",
            "e253ad5fcd3287be546442087fe6c189fcaad7a9"
        ],
        [
            "Lemma Cnat_ge0 x : x \\in Cnat -> 0 <= x.",
            "VernacStartTheoremProof",
            "c64a1441b589245898f227ef8d163379fc555e63"
        ],
        [
            "by case/CnatP=> n ->; apply: ler0n.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma Cnat_gt0 x : x \\in Cnat -> (0 < x) = (x != 0).",
            "VernacStartTheoremProof",
            "69cd8c11d892af382bdd919e6406593c9f105214"
        ],
        [
            "by case/CnatP=> n ->; rewrite pnatr_eq0 ltr0n lt0n.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma conj_Cnat x : x \\in Cnat -> x^* = x.",
            "VernacStartTheoremProof",
            "fe026fb43adedb44fa31af9056e9797e30511ff6"
        ],
        [
            "by case/CnatP=> n ->; apply: rmorph_nat.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma norm_Cnat x : x \\in Cnat -> `|x| = x.",
            "VernacStartTheoremProof",
            "2c12429458b6391eda6c455d5b28a6ad45cc0c62"
        ],
        [
            "by move/Cnat_ge0/ger0_norm.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma Creal_Cnat : {subset Cnat <= Creal}.",
            "VernacStartTheoremProof",
            "0f6e2cd2a89f4eb4ae09c2dc996309ce8dc59a77"
        ],
        [
            "by move=> z /conj_Cnat/CrealP.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma Cnat_sum_eq1 (I : finType) (P : pred I) (F : I -> algC) : (forall i, P i -> F i \\in Cnat) -> \\sum_(i | P i) F i = 1 -> {i : I | [/\\ P i, F i = 1 & forall j, j != i -> P j -> F j = 0]}.",
            "VernacStartTheoremProof",
            "af65c63b24712bdac88ae29a2df04e39d0942175"
        ],
        [
            "move=> natF sumF1; pose nF i := truncC (F i).",
            "VernacExtend",
            "fef3c4a8f7fcf70b0824f3cce5fb58f2e0ef07fd"
        ],
        [
            "have{natF} defF i: P i -> F i = (nF i)%:R by move/natF/eqP.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "have{sumF1} /eqP sumF1: (\\sum_(i | P i) nF i == 1)%N.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "by rewrite -eqC_nat natr_sum -(eq_bigr _ defF) sumF1.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "have [i Pi nZfi]: {i : I | P i & nF i != 0%N}.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "by apply/sig2W/exists_inP; rewrite -negb_forall_in -sum_nat_eq0 sumF1.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "have F'ge0 := (leq0n _, etrans (eq_sym _ _) (sum_nat_eq0 (predD1 P i) nF)).",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "rewrite -lt0n in nZfi; have [_] := (leqif_add (leqif_eq nZfi) (F'ge0 _)).",
            "VernacExtend",
            "7be6e3cf9ccbce33486c4b5c6fefdf7a9ad6e52b"
        ],
        [
            "rewrite /= big_andbC -bigD1 // sumF1 => /esym/andP/=[/eqP Fi1 /forall_inP Fi'0].",
            "VernacExtend",
            "3c42b53d0efc26db114b00541ac5e7fcb29e6aeb"
        ],
        [
            "exists i; split=> // [|j neq_ji Pj]; first by rewrite defF // -Fi1.",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "by rewrite defF // (eqP (Fi'0 j _)) // neq_ji.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma Cnat_mul_eq1 x y : x \\in Cnat -> y \\in Cnat -> (x * y == 1) = (x == 1) && (y == 1).",
            "VernacStartTheoremProof",
            "d461b855be8ef0c93bf0f0a5be6929c4af008a88"
        ],
        [
            "by do 2!move/truncCK <-; rewrite -natrM !pnatr_eq1 muln_eq1.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma Cnat_prod_eq1 (I : finType) (P : pred I) (F : I -> algC) : (forall i, P i -> F i \\in Cnat) -> \\prod_(i | P i) F i = 1 -> forall i, P i -> F i = 1.",
            "VernacStartTheoremProof",
            "3a4e9a43dfc99935f6de9a41b843849356a7008a"
        ],
        [
            "move=> natF prodF1; apply/eqfun_inP; rewrite -big_andE.",
            "VernacExtend",
            "f7feb259d6220ca40e8a86b90bd06f137aa140ac"
        ],
        [
            "move: prodF1; elim/(big_load (fun x => x \\in Cnat)): _.",
            "VernacExtend",
            "06880003f1108b2eb418688c7bc6bf1013cf0e4c"
        ],
        [
            "elim/big_rec2: _ => // i all1x x /natF N_Fi [Nx x1all1].",
            "VernacExtend",
            "e686a1895f1799b840b76242f931100819a9ad6c"
        ],
        [
            "by split=> [|/eqP]; rewrite ?rpredM ?Cnat_mul_eq1 // => /andP[-> /eqP].",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma Cint_Cnat : {subset Cnat <= Cint}.",
            "VernacStartTheoremProof",
            "3fcca276daefb4f46a9d12e98d798d506787ed24"
        ],
        [
            "by move=> _ /CnatP[n ->]; rewrite pmulrn Cint_int.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma CintE x : (x \\in Cint) = (x \\in Cnat) || (- x \\in Cnat).",
            "VernacStartTheoremProof",
            "49c5dfaaf7d3e6c5163846069feec490e6a2351b"
        ],
        [
            "apply/idP/idP=> [/CintP[[n | n] ->] | ]; first by rewrite Cnat_nat.",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "by rewrite NegzE opprK Cnat_nat orbT.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "by case/pred2P=> [<- | /(canLR opprK) <-]; rewrite ?rpredN rpred_nat.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma Cnat_norm_Cint x : x \\in Cint -> `|x| \\in Cnat.",
            "VernacStartTheoremProof",
            "e036a508323a32f878ba0ec12f930b6cde53b7ee"
        ],
        [
            "case/CintP=> [m ->]; rewrite [m]intEsign rmorphM rmorph_sign.",
            "VernacExtend",
            "90a2acb29b7a5304b0ab6ba5269c420638ddef63"
        ],
        [
            "by rewrite normrM normr_sign mul1r normr_nat rpred_nat.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma CnatEint x : (x \\in Cnat) = (x \\in Cint) && (0 <= x).",
            "VernacStartTheoremProof",
            "86727cdf7ad1e13ba594edee6ce764790d0377a4"
        ],
        [
            "apply/idP/andP=> [Nx | [Zx x_ge0]]; first by rewrite Cint_Cnat ?Cnat_ge0.",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "by rewrite -(ger0_norm x_ge0) Cnat_norm_Cint.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma CintEge0 x : 0 <= x -> (x \\in Cint) = (x \\in Cnat).",
            "VernacStartTheoremProof",
            "be28d0572703dbde510172a54e633d271e341b3a"
        ],
        [
            "by rewrite CnatEint andbC => ->.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma Cnat_exp_even x n : ~~ odd n -> x \\in Cint -> x ^+ n \\in Cnat.",
            "VernacStartTheoremProof",
            "f088726decb57ef1d142ad00d65b59e7f97f6afd"
        ],
        [
            "rewrite -dvdn2 => /dvdnP[m ->] Zx; rewrite mulnC exprM -Cint_normK ?rpredX //.",
            "VernacExtend",
            "82d53976234637e3f0907eb36cddf61d028c6306"
        ],
        [
            "exact: Cnat_norm_Cint.",
            "VernacExtend",
            "ce637ff86bafca5d8359473e8c02af644dcbdc43"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma norm_Cint_ge1 x : x \\in Cint -> x != 0 -> 1 <= `|x|.",
            "VernacStartTheoremProof",
            "ffd856e164ad68b139ad8805ca21bec38dda0738"
        ],
        [
            "rewrite -normr_eq0 => /Cnat_norm_Cint/CnatP[n ->].",
            "VernacExtend",
            "3c42b53d0efc26db114b00541ac5e7fcb29e6aeb"
        ],
        [
            "by rewrite pnatr_eq0 ler1n lt0n.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma sqr_Cint_ge1 x : x \\in Cint -> x != 0 -> 1 <= x ^+ 2.",
            "VernacStartTheoremProof",
            "bc2ee2b33af197db1b01da350297d69b0af50939"
        ],
        [
            "by move=> Zx nz_x; rewrite -Cint_normK // expr_ge1 ?normr_ge0 ?norm_Cint_ge1.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma Cint_ler_sqr x : x \\in Cint -> x <= x ^+ 2.",
            "VernacStartTheoremProof",
            "d92bd3436f775cd5508e1157bb4c01f15d0e1e20"
        ],
        [
            "move=> Zx; have [-> | nz_x] := eqVneq x 0; first by rewrite expr0n.",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "apply: ler_trans (_ : `|x| <= _); first by rewrite real_ler_norm ?Creal_Cint.",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "by rewrite -Cint_normK // ler_eexpr // norm_Cint_ge1.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma dvdCP x y : reflect (exists2 z, z \\in Cint & y = z * x) (x %| y)%C.",
            "VernacStartTheoremProof",
            "33bce2bd2442978005e98d5ef16ee104eab8d9f3"
        ],
        [
            "rewrite unfold_in; have [-> | nz_x] := altP eqP.",
            "VernacExtend",
            "7be6e3cf9ccbce33486c4b5c6fefdf7a9ad6e52b"
        ],
        [
            "by apply: (iffP eqP) => [-> | [z _ ->]]; first exists 0; rewrite ?mulr0.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "apply: (iffP idP) => [Zyx | [z Zz ->]]; last by rewrite mulfK.",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "by exists (y / x); rewrite ?divfK.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma dvdCP_nat x y : 0 <= x -> 0 <= y -> (x %| y)%C -> {n | y = n%:R * x}.",
            "VernacStartTheoremProof",
            "f61589143968c514e7526656f4591d9fd40fd93e"
        ],
        [
            "move=> x_ge0 y_ge0 x_dv_y; apply: sig_eqW.",
            "VernacExtend",
            "d6ebf3361f380a12d5c2c9bbb7ea363132c48b36"
        ],
        [
            "case/dvdCP: x_dv_y => z Zz -> in y_ge0 *; move: x_ge0 y_ge0 Zz.",
            "VernacExtend",
            "d09d9458d087c74b7317d831afc65fc07a0f6e3f"
        ],
        [
            "rewrite ler_eqVlt => /predU1P[<- | ]; first by exists 22; rewrite !mulr0.",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "by move=> /pmulr_lge0-> /CintEge0-> /CnatP[n ->]; exists n.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma dvdC0 x : (x %| 0)%C.",
            "VernacStartTheoremProof",
            "971bb5b8a742c837961b2a88e93d20cad347453b"
        ],
        [
            "by apply/dvdCP; exists 0; rewrite ?mul0r.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma dvd0C x : (0 %| x)%C = (x == 0).",
            "VernacStartTheoremProof",
            "0e30a117b67e6ce03aa6f412c01876b8c59ca696"
        ],
        [
            "by rewrite unfold_in eqxx.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma dvdC_mull x y z : y \\in Cint -> (x %| z)%C -> (x %| y * z)%C.",
            "VernacStartTheoremProof",
            "fb71b5899582eee2ec9d15b81e3a84174d3af0f2"
        ],
        [
            "move=> Zy /dvdCP[m Zm ->]; apply/dvdCP.",
            "VernacExtend",
            "d6ebf3361f380a12d5c2c9bbb7ea363132c48b36"
        ],
        [
            "by exists (y * m); rewrite ?mulrA ?rpredM.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma dvdC_mulr x y z : y \\in Cint -> (x %| z)%C -> (x %| z * y)%C.",
            "VernacStartTheoremProof",
            "b26a5ba637e031a2e5ec166fad2150a1b8d5ad2e"
        ],
        [
            "by rewrite mulrC; apply: dvdC_mull.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma dvdC_mul2r x y z : y != 0 -> (x * y %| z * y)%C = (x %| z)%C.",
            "VernacStartTheoremProof",
            "18893c20adc9d6ad2a09f44d0c389295e9782199"
        ],
        [
            "move=> nz_y; rewrite !unfold_in !(mulIr_eq0 _ (mulIf nz_y)).",
            "VernacExtend",
            "057edeb0967475c7ea5e8c98c449ddc5613eddc1"
        ],
        [
            "by rewrite mulrAC invfM mulrA divfK.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma dvdC_mul2l x y z : y != 0 -> (y * x %| y * z)%C = (x %| z)%C.",
            "VernacStartTheoremProof",
            "0d7e8a128f913f8fbebec3f4596c222fce0fbe55"
        ],
        [
            "by rewrite !(mulrC y); apply: dvdC_mul2r.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma dvdC_trans x y z : (x %| y)%C -> (y %| z)%C -> (x %| z)%C.",
            "VernacStartTheoremProof",
            "a1ba57692c0c044df08e095c57fbe9a32b82054f"
        ],
        [
            "by move=> x_dv_y /dvdCP[m Zm ->]; apply: dvdC_mull.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma dvdC_refl x : (x %| x)%C.",
            "VernacStartTheoremProof",
            "48ea1b2b569678d820c1223430b9c2e7f88b6f25"
        ],
        [
            "by apply/dvdCP; exists 1; rewrite ?mul1r.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Hint Resolve dvdC_refl : core.",
            "VernacHints",
            "e91e439d3617cf83bfa35e56a1f897bf059d9833"
        ],
        [
            "Fact dvdC_key x : pred_key (dvdC x).",
            "VernacStartTheoremProof",
            "ecde731b683f34a7ff69c9f35bd5eb9fc4944b24"
        ],
        [
            "by [].",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma dvdC_zmod x : zmod_closed (dvdC x).",
            "VernacStartTheoremProof",
            "04db524e56ec40c23fd45d84de5b911c444bf0ea"
        ],
        [
            "split=> [| _ _ /dvdCP[y Zy ->] /dvdCP[z Zz ->]]; first exact: dvdC0.",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "by rewrite -mulrBl dvdC_mull ?rpredB.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Canonical dvdC_keyed x := KeyedPred (dvdC_key x).",
            "VernacDefinition",
            "51855af076ec059193d6570f783a2c9976248802"
        ],
        [
            "Canonical dvdC_opprPred x := OpprPred (dvdC_zmod x).",
            "VernacDefinition",
            "3d3e41331c05785f33b949cceaa0d71b04321197"
        ],
        [
            "Canonical dvdC_addrPred x := AddrPred (dvdC_zmod x).",
            "VernacDefinition",
            "81418700b44cd37ba3bf2ebf65d999de27d08e26"
        ],
        [
            "Canonical dvdC_zmodPred x := ZmodPred (dvdC_zmod x).",
            "VernacDefinition",
            "7d2b03244c1478f509e82a25ec7e1e945504c5fa"
        ],
        [
            "Lemma dvdC_nat (p n : nat) : (p %| n)%C = (p %| n)%N.",
            "VernacStartTheoremProof",
            "7aaeebcb4873307ecadccbc5a0fad87c7a011c70"
        ],
        [
            "rewrite unfold_in CintEge0 ?divr_ge0 ?invr_ge0 ?ler0n // !pnatr_eq0.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "have [-> | nz_p] := altP eqP; first by rewrite dvd0n.",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "apply/CnatP/dvdnP=> [[q def_q] | [q ->]]; exists q.",
            "VernacExtend",
            "cd265cdf9b03cdf5c8c1c695ae373d4c2945a40c"
        ],
        [
            "by apply/eqP; rewrite -eqC_nat natrM -def_q divfK ?pnatr_eq0.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "by rewrite [num in num / _]natrM mulfK ?pnatr_eq0.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma dvdC_int (p : nat) x : x \\in Cint -> (p %| x)%C = (p %| `|floorC x|)%N.",
            "VernacStartTheoremProof",
            "0ae6e860870fcaec96e97b052650bfde9c67ddcf"
        ],
        [
            "move=> Zx; rewrite -{1}(floorCK Zx) {1}[floorC x]intEsign.",
            "VernacExtend",
            "057edeb0967475c7ea5e8c98c449ddc5613eddc1"
        ],
        [
            "by rewrite rmorphMsign rpredMsign dvdC_nat.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma eqCmod_refl e x : (x == x %[mod e])%C.",
            "VernacStartTheoremProof",
            "f7f2041cc172f827ecb1b615a84cb10162e2ba8e"
        ],
        [
            "by rewrite /eqCmod subrr rpred0.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma eqCmodm0 e : (e == 0 %[mod e])%C.",
            "VernacStartTheoremProof",
            "a2f59a9d6e36cb287e1a7d09f92993f8b221fef6"
        ],
        [
            "by rewrite /eqCmod subr0.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Hint Resolve eqCmod_refl eqCmodm0 : core.",
            "VernacHints",
            "1449b0dfb395f7d8837e7f4348a7a78a0878f614"
        ],
        [
            "Lemma eqCmod0 e x : (x == 0 %[mod e])%C = (e %| x)%C.",
            "VernacStartTheoremProof",
            "50bb45098a0f755e160f20427bcdf6e96170de88"
        ],
        [
            "by rewrite /eqCmod subr0.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma eqCmod_sym e x y : ((x == y %[mod e]) = (y == x %[mod e]))%C.",
            "VernacStartTheoremProof",
            "98324c2021f7b095421a2b3815e6bec5e163ed58"
        ],
        [
            "by rewrite /eqCmod -opprB rpredN.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma eqCmod_trans e y x z : (x == y %[mod e] -> y == z %[mod e] -> x == z %[mod e])%C.",
            "VernacStartTheoremProof",
            "c39344107043157f642bcc92aef5ffee3fe895f0"
        ],
        [
            "by move=> Exy Eyz; rewrite /eqCmod -[x](subrK y) -addrA rpredD.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma eqCmod_transl e x y z : (x == y %[mod e])%C -> (x == z %[mod e])%C = (y == z %[mod e])%C.",
            "VernacStartTheoremProof",
            "20d735d3470efd15e6fec7ee4934beb29a258207"
        ],
        [
            "by move/(sym_left_transitive (eqCmod_sym e) (@eqCmod_trans e)).",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma eqCmod_transr e x y z : (x == y %[mod e])%C -> (z == x %[mod e])%C = (z == y %[mod e])%C.",
            "VernacStartTheoremProof",
            "1aa999d880e3dda695621e94d47e62c3094b5dd4"
        ],
        [
            "by move/(sym_right_transitive (eqCmod_sym e) (@eqCmod_trans e)).",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma eqCmodN e x y : (- x == y %[mod e])%C = (x == - y %[mod e])%C.",
            "VernacStartTheoremProof",
            "eb3dd5c4481a9ed770ffb58b355c2216580a59fd"
        ],
        [
            "by rewrite eqCmod_sym /eqCmod !opprK addrC.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma eqCmodDr e x y z : (y + x == z + x %[mod e])%C = (y == z %[mod e])%C.",
            "VernacStartTheoremProof",
            "84455bd954a09fa3e7fc14123dc0b388d9d7116c"
        ],
        [
            "by rewrite /eqCmod addrAC opprD !addrA subrK.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma eqCmodDl e x y z : (x + y == x + z %[mod e])%C = (y == z %[mod e])%C.",
            "VernacStartTheoremProof",
            "9dfbf68c640894023ae47a5e03d7db986f370324"
        ],
        [
            "by rewrite !(addrC x) eqCmodDr.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma eqCmodD e x1 x2 y1 y2 : (x1 == x2 %[mod e] -> y1 == y2 %[mod e] -> x1 + y1 == x2 + y2 %[mod e])%C.",
            "VernacStartTheoremProof",
            "bd28267c3752e613eca2ee281e3f20a65b0258e0"
        ],
        [
            "by rewrite -(eqCmodDl e x2 y1) -(eqCmodDr e y1); apply: eqCmod_trans.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma eqCmod_nat (e m n : nat) : (m == n %[mod e])%C = (m == n %[mod e]).",
            "VernacStartTheoremProof",
            "9fe3a7ec60ba85e25cdd2713111ad1f54551f843"
        ],
        [
            "without loss lenm: m n / (n <= m)%N.",
            "VernacExtend",
            "87d5e7b04148ee8f2e4efcc847e0dfadae0aa4cb"
        ],
        [
            "by move=> IH; case/orP: (leq_total m n) => /IH //; rewrite eqCmod_sym eq_sym.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "by rewrite /eqCmod -natrB // dvdC_nat eqn_mod_dvd.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma eqCmod0_nat (e m : nat) : (m == 0 %[mod e])%C = (e %| m)%N.",
            "VernacStartTheoremProof",
            "5a8ca7858082c07464d5d27768e54287cee48915"
        ],
        [
            "by rewrite eqCmod0 dvdC_nat.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma eqCmodMr e : {in Cint, forall z x y, x == y %[mod e] -> x * z == y * z %[mod e]}%C.",
            "VernacStartTheoremProof",
            "ae7a56e3481e5afc72046771e3652c9e03a91151"
        ],
        [
            "by move=> z Zz x y; rewrite /eqCmod -mulrBl => /dvdC_mulr->.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma eqCmodMl e : {in Cint, forall z x y, x == y %[mod e] -> z * x == z * y %[mod e]}%C.",
            "VernacStartTheoremProof",
            "f7b18a7d58441219dc7032638736278e5939499d"
        ],
        [
            "by move=> z Zz x y Exy; rewrite !(mulrC z) eqCmodMr.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma eqCmodMl0 e : {in Cint, forall x, x * e == 0 %[mod e]}%C.",
            "VernacStartTheoremProof",
            "916d379f7b1f841ab54eec6a7fa933ad2b25cc9e"
        ],
        [
            "by move=> x Zx; rewrite -(mulr0 x) eqCmodMl.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma eqCmodMr0 e : {in Cint, forall x, e * x == 0 %[mod e]}%C.",
            "VernacStartTheoremProof",
            "021d7e22582b64fef86de14cf6f745cde1e0ec2e"
        ],
        [
            "by move=> x Zx; rewrite /= mulrC eqCmodMl0.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma eqCmod_addl_mul e : {in Cint, forall x y, x * e + y == y %[mod e]}%C.",
            "VernacStartTheoremProof",
            "46aae73cdb93c8d41caa3e2b3f28c0fa2e1589e0"
        ],
        [
            "by move=> x Zx y; rewrite -{2}[y]add0r eqCmodDr eqCmodMl0.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma eqCmodM e : {in Cint & Cint, forall x1 y2 x2 y1, x1 == x2 %[mod e] -> y1 == y2 %[mod e] -> x1 * y1 == x2 * y2 %[mod e]}%C.",
            "VernacStartTheoremProof",
            "c1ac6a2fac77e50bb577361bd7f9f11d5dad86ef"
        ],
        [
            "move=> x1 y2 Zx1 Zy2 x2 y1 eq_x /(eqCmodMl Zx1)/eqCmod_trans-> //.",
            "VernacExtend",
            "b1b2cb7a3a617cba67460b4eca1f04de3c1cc716"
        ],
        [
            "exact: eqCmodMr.",
            "VernacExtend",
            "ce637ff86bafca5d8359473e8c02af644dcbdc43"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma ratCK : cancel QtoC CtoQ.",
            "VernacStartTheoremProof",
            "68d322c0bd16bdef3daacf85d5c077e0457fb396"
        ],
        [
            "by rewrite /getCrat; case: getCrat_subproof.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma getCratK : {in Crat, cancel CtoQ QtoC}.",
            "VernacStartTheoremProof",
            "ac48fd8555a3c571f5e6023be5559e4ed99b1e96"
        ],
        [
            "by move=> x /eqP.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma Crat_rat (a : rat) : QtoC a \\in Crat.",
            "VernacStartTheoremProof",
            "bbeae9bbd223223a76d3a39edb97ac981841fd98"
        ],
        [
            "by rewrite unfold_in ratCK.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma CratP x : reflect (exists a, x = QtoC a) (x \\in Crat).",
            "VernacStartTheoremProof",
            "c688a86a769de71fa2cdbf4d52ee4e8bd19aea91"
        ],
        [
            "by apply: (iffP eqP) => [<- | [a ->]]; [exists (CtoQ x) | rewrite ratCK].",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma Crat0 : 0 \\in Crat.",
            "VernacStartTheoremProof",
            "477b261c5fce32701ec74905e42917f9b968f4b3"
        ],
        [
            "by apply/CratP; exists 0; rewrite rmorph0.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma Crat1 : 1 \\in Crat.",
            "VernacStartTheoremProof",
            "3d92a1027a5d4f74edd9e028a4f7d6d012768190"
        ],
        [
            "by apply/CratP; exists 1; rewrite rmorph1.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Hint Resolve Crat0 Crat1 : core.",
            "VernacHints",
            "40b9d58154e4bb35f2ae13c35ca1d51b5fb8edcc"
        ],
        [
            "Fact Crat_key : pred_key Crat.",
            "VernacStartTheoremProof",
            "f7424c858112c28ca4f14ab1f69577760fc16c76"
        ],
        [
            "by [].",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Fact Crat_divring_closed : divring_closed Crat.",
            "VernacStartTheoremProof",
            "cc4da6a252baed3f41221463d8794970c44f50b7"
        ],
        [
            "split=> // _ _ /CratP[x ->] /CratP[y ->].",
            "VernacExtend",
            "3c42b53d0efc26db114b00541ac5e7fcb29e6aeb"
        ],
        [
            "by rewrite -rmorphB Crat_rat.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "by rewrite -fmorph_div Crat_rat.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Canonical Crat_keyed := KeyedPred Crat_key.",
            "VernacDefinition",
            "5e0c45f35d7bc3f4263b6931dd37bd952156d136"
        ],
        [
            "Canonical Crat_opprPred := OpprPred Crat_divring_closed.",
            "VernacDefinition",
            "132bb437e32a54e8935953bb68f017efdf55fcde"
        ],
        [
            "Canonical Crat_addrPred := AddrPred Crat_divring_closed.",
            "VernacDefinition",
            "819291430d6e7ea000fe3fdd5e5f6da08b523479"
        ],
        [
            "Canonical Crat_mulrPred := MulrPred Crat_divring_closed.",
            "VernacDefinition",
            "346d404e7e171bd486ecf44118aa08c1b65112f9"
        ],
        [
            "Canonical Crat_zmodPred := ZmodPred Crat_divring_closed.",
            "VernacDefinition",
            "27b2ed5d14d217cfe0f050555db73198ab57ea95"
        ],
        [
            "Canonical Crat_semiringPred := SemiringPred Crat_divring_closed.",
            "VernacDefinition",
            "dc92fb65871fda2ac418c749ef93f097d54ee091"
        ],
        [
            "Canonical Crat_smulrPred := SmulrPred Crat_divring_closed.",
            "VernacDefinition",
            "979afb703d6e131c5224d51405d3a0ac5f877f25"
        ],
        [
            "Canonical Crat_divrPred := DivrPred Crat_divring_closed.",
            "VernacDefinition",
            "3b0c0be55fd1e33c611cb312f606f65275915932"
        ],
        [
            "Canonical Crat_subringPred := SubringPred Crat_divring_closed.",
            "VernacDefinition",
            "e4ca3e43313d374ccb10eec1f7acd59968b1993a"
        ],
        [
            "Canonical Crat_sdivrPred := SdivrPred Crat_divring_closed.",
            "VernacDefinition",
            "a1484cddd83733bcc3c39ec57ebcf6e2f328b460"
        ],
        [
            "Canonical Crat_divringPred := DivringPred Crat_divring_closed.",
            "VernacDefinition",
            "d91a4577e71af06051c83393be4f5d0ea13b6b1f"
        ],
        [
            "Lemma rpred_Crat S (ringS : divringPred S) (kS : keyed_pred ringS) : {subset Crat <= kS}.",
            "VernacStartTheoremProof",
            "22b622c81e6dbe5426728a87b890c72947ef7647"
        ],
        [
            "by move=> _ /CratP[a ->]; apply: rpred_rat.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma conj_Crat z : z \\in Crat -> z^* = z.",
            "VernacStartTheoremProof",
            "82b9480b4f5d42f28a152b9509c4a94ef8497b0c"
        ],
        [
            "by move/getCratK <-; rewrite fmorph_div !rmorph_int.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma Creal_Crat : {subset Crat <= Creal}.",
            "VernacStartTheoremProof",
            "6c32adb16b310a26923872fefa35ac424d030e8d"
        ],
        [
            "by move=> x /conj_Crat/CrealP.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma Cint_rat a : (QtoC a \\in Cint) = (a \\in Qint).",
            "VernacStartTheoremProof",
            "c6116bc2594730485cc69b617369b5139f8b2aaf"
        ],
        [
            "apply/idP/idP=> [Za | /numqK <-]; last by rewrite rmorph_int Cint_int.",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "apply/QintP; exists (floorC (QtoC a)); apply: (can_inj ratCK).",
            "VernacExtend",
            "9f3f77ec722bb8b204be362b002ee8db012035d4"
        ],
        [
            "by rewrite rmorph_int floorCK.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma minCpolyP x : {p | minCpoly x = pQtoC p /\\ p \\is monic & forall q, root (pQtoC q) x = (p %| q)%R}.",
            "VernacStartTheoremProof",
            "d41c9fa8b6ca072ce45eed65abb292b5a578c456"
        ],
        [
            "by rewrite /minCpoly; case: (minCpoly_subproof x) => p; exists p.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma minCpoly_monic x : minCpoly x \\is monic.",
            "VernacStartTheoremProof",
            "28ec63b62d1aff9284f0402e4b74b3954941722a"
        ],
        [
            "by have [p [-> mon_p] _] := minCpolyP x; rewrite map_monic.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma minCpoly_eq0 x : (minCpoly x == 0) = false.",
            "VernacStartTheoremProof",
            "c74d1e790f8576c63dacf213ea50eb7a1a8ec84b"
        ],
        [
            "exact/negbTE/monic_neq0/minCpoly_monic.",
            "VernacExtend",
            "ce637ff86bafca5d8359473e8c02af644dcbdc43"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma root_minCpoly x : root (minCpoly x) x.",
            "VernacStartTheoremProof",
            "85c019d425a2ddcfc7b62fcfe30a8976a92f4b49"
        ],
        [
            "by have [p [-> _] ->] := minCpolyP x.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma size_minCpoly x : (1 < size (minCpoly x))%N.",
            "VernacStartTheoremProof",
            "8931658c2ebe622bb34f159b1ea6291a790b190d"
        ],
        [
            "by apply: root_size_gt1 (root_minCpoly x); rewrite ?minCpoly_eq0.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Section AutC.",
            "VernacBeginSection",
            "9f11bdef15cdf084f5263139400c79d6d4429dee"
        ],
        [
            "Implicit Type nu : {rmorphism algC -> algC}.",
            "VernacReserve",
            "dace113f01b217ddbc461d313d888e1d30be8ffa"
        ],
        [
            "Lemma aut_Cnat nu : {in Cnat, nu =1 id}.",
            "VernacStartTheoremProof",
            "6ec4a36877ab06b7197abe3e9304b114513781d3"
        ],
        [
            "by move=> _ /CnatP[n ->]; apply: rmorph_nat.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma aut_Cint nu : {in Cint, nu =1 id}.",
            "VernacStartTheoremProof",
            "6887255df0ee2c9d19163d473db76f9ca72f38d4"
        ],
        [
            "by move=> _ /CintP[m ->]; apply: rmorph_int.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma aut_Crat nu : {in Crat, nu =1 id}.",
            "VernacStartTheoremProof",
            "939c91c3ea9a457aacdd2c2feb253ae0e3589167"
        ],
        [
            "by move=> _ /CratP[a ->]; apply: fmorph_rat.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma Cnat_aut nu x : (nu x \\in Cnat) = (x \\in Cnat).",
            "VernacStartTheoremProof",
            "51e50fabf87fd5d185bb687ee4c20f55dd769a6d"
        ],
        [
            "by do [apply/idP/idP=> Nx; have:= aut_Cnat nu Nx] => [/fmorph_inj <- | ->].",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma Cint_aut nu x : (nu x \\in Cint) = (x \\in Cint).",
            "VernacStartTheoremProof",
            "1dc163ae02a72523db9a9f0ac111476cdc9a460c"
        ],
        [
            "by rewrite !CintE -rmorphN !Cnat_aut.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma Crat_aut nu x : (nu x \\in Crat) = (x \\in Crat).",
            "VernacStartTheoremProof",
            "d30f94833caca7a7bf3d104d9a89b24fc0b0bce9"
        ],
        [
            "apply/idP/idP=> /CratP[a] => [|->]; last by rewrite fmorph_rat Crat_rat.",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "by rewrite -(fmorph_rat nu) => /fmorph_inj->; apply: Crat_rat.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma algC_invaut_subproof nu x : {y | nu y = x}.",
            "VernacStartTheoremProof",
            "edea9c2c1bf9d2a0a20b0fd5862e7dd32f680b10"
        ],
        [
            "have [r Dp] := closed_field_poly_normal (minCpoly x).",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "suffices /mapP/sig2_eqW[y _ ->]: x \\in map nu r by exists y.",
            "VernacExtend",
            "290ed488b5562e885aa2cac56f3a69b4faa0eaa6"
        ],
        [
            "rewrite -root_prod_XsubC; congr (root _ x): (root_minCpoly x).",
            "VernacExtend",
            "a0279e71fd23ac6bde2b8b4402981a70ea719044"
        ],
        [
            "have [q [Dq _] _] := minCpolyP x; rewrite Dq -(eq_map_poly (fmorph_rat nu)).",
            "VernacExtend",
            "aa9d5fbc682ed874cd64b2543ca6c859b978e924"
        ],
        [
            "rewrite (map_poly_comp nu) -{q}Dq Dp (monicP (minCpoly_monic x)) scale1r.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "rewrite rmorph_prod big_map; apply: eq_bigr => z _.",
            "VernacExtend",
            "634a7639ed2fb7caf62757f84400927f5829b7d5"
        ],
        [
            "by rewrite rmorphB /= map_polyX map_polyC.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Definition algC_invaut nu x := sval (algC_invaut_subproof nu x).",
            "VernacDefinition",
            "25901a4641f22e3daf12b15209bbed6f15da5d27"
        ],
        [
            "Lemma algC_invautK nu : cancel (algC_invaut nu) nu.",
            "VernacStartTheoremProof",
            "4ae380bda85d3ea67ec44db2cedf50c63853dc1e"
        ],
        [
            "by move=> x; rewrite /algC_invaut; case: algC_invaut_subproof.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma algC_autK nu : cancel nu (algC_invaut nu).",
            "VernacStartTheoremProof",
            "59e26445cd238c0fd0cdd59bb2a2892d794d253d"
        ],
        [
            "exact: inj_can_sym (algC_invautK nu) (fmorph_inj nu).",
            "VernacExtend",
            "ce637ff86bafca5d8359473e8c02af644dcbdc43"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Fact algC_invaut_is_rmorphism nu : rmorphism (algC_invaut nu).",
            "VernacStartTheoremProof",
            "dddd66e5d6f85a975ce84cc13b214f443352b570"
        ],
        [
            "exact: can2_rmorphism (algC_autK nu) (algC_invautK nu).",
            "VernacExtend",
            "ce637ff86bafca5d8359473e8c02af644dcbdc43"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Canonical algC_invaut_additive nu := Additive (algC_invaut_is_rmorphism nu).",
            "VernacDefinition",
            "043c766aeaae5b8e50785459ea7916411a92ad3d"
        ],
        [
            "Canonical algC_invaut_rmorphism nu := RMorphism (algC_invaut_is_rmorphism nu).",
            "VernacDefinition",
            "2781a9240ae8400c4389e99eca623414dedea1e0"
        ],
        [
            "Lemma minCpoly_aut nu x : minCpoly (nu x) = minCpoly x.",
            "VernacStartTheoremProof",
            "681562f3dcf8aa787765674389dee9fcce091c5a"
        ],
        [
            "wlog suffices dvd_nu: nu x / (minCpoly x %| minCpoly (nu x))%R.",
            "VernacExtend",
            "348aa27e7c84ea4ca2ac06b8a3b3db24e74b6ad7"
        ],
        [
            "apply/eqP; rewrite -eqp_monic ?minCpoly_monic //; apply/andP; split=> //.",
            "VernacExtend",
            "317aaa9195ff4c953788629aed9ed3b3494c7b20"
        ],
        [
            "by rewrite -{2}(algC_autK nu x) dvd_nu.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "have [[q [Dq _] min_q] [q1 [Dq1 _] _]] := (minCpolyP x, minCpolyP (nu x)).",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "rewrite Dq Dq1 dvdp_map -min_q -(fmorph_root nu) -map_poly_comp.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "by rewrite (eq_map_poly (fmorph_rat nu)) -Dq1 root_minCpoly.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "End AutC.",
            "VernacEndSegment",
            "6b872c6f0d3a2b0c7cace1174c4ed76127b651e7"
        ],
        [
            "Section AutLmodC.",
            "VernacBeginSection",
            "25c7420bd91b804c2a408aba9aecfe5652b4ee71"
        ],
        [
            "Variables (U V : lmodType algC) (f : {additive U -> V}).",
            "VernacAssumption",
            "a13fe142db22f9a865e394c6e69792a8724070ce"
        ],
        [
            "Lemma raddfZ_Cnat a u : a \\in Cnat -> f (a *: u) = a *: f u.",
            "VernacStartTheoremProof",
            "167d2ff061e4f515a68a0e0ff80ce20b0360086f"
        ],
        [
            "by case/CnatP=> n ->; apply: raddfZnat.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma raddfZ_Cint a u : a \\in Cint -> f (a *: u) = a *: f u.",
            "VernacStartTheoremProof",
            "89fa7306ef20f277a692a0b5f2dc75702523fab2"
        ],
        [
            "by case/CintP=> m ->; rewrite !scaler_int raddfMz.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "End AutLmodC.",
            "VernacEndSegment",
            "f1cf32f5bb1efb2b9aabca223e8108a8fd0f6b62"
        ],
        [
            "Section PredCmod.",
            "VernacBeginSection",
            "65fa5a9157b23f1183cb5958e9ea12ea883c4409"
        ],
        [
            "Variable V : lmodType algC.",
            "VernacAssumption",
            "0c1b79e43a7bd61d37fcedfebab3e1469b960dc0"
        ],
        [
            "Lemma rpredZ_Cnat S (addS : @addrPred V S) (kS : keyed_pred addS) : {in Cnat & kS, forall z u, z *: u \\in kS}.",
            "VernacStartTheoremProof",
            "e3880e109631dd1bc8c1bb0af5fb1791817f0cfb"
        ],
        [
            "by move=> _ u /CnatP[n ->]; apply: rpredZnat.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma rpredZ_Cint S (subS : @zmodPred V S) (kS : keyed_pred subS) : {in Cint & kS, forall z u, z *: u \\in kS}.",
            "VernacStartTheoremProof",
            "7f03e25534523b4d34b9f9d8a046006e3e21c46f"
        ],
        [
            "by move=> _ u /CintP[m ->]; apply: rpredZint.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "End PredCmod.",
            "VernacEndSegment",
            "9fd4c19d357b426f3ed98a73f90bf389346b0956"
        ],
        [
            "End AlgebraicsTheory.",
            "VernacEndSegment",
            "e3d705a28608bba4da73b17da2da74af96623529"
        ],
        [
            "Hint Resolve Creal0 Creal1 Cnat_nat Cnat0 Cnat1 Cint0 Cint1 floorC0 Crat0 Crat1 : core.",
            "VernacHints",
            "3b8ff4fe942b3e7b99ccd138c234300b5daada91"
        ],
        [
            "Hint Resolve dvdC0 dvdC_refl eqCmod_refl eqCmodm0 : core.",
            "VernacHints",
            "93274d038ce4f3c0d7d2bdab65b218696849f8c5"
        ]
    ],
    "proofs": [
        {
            "name": "conjL_K",
            "line_nb": 173,
            "steps": [
                {
                    "command": [
                        "exact: s2valP (tagged Fundamental_Theorem_of_Algebraics).",
                        "VernacExtend",
                        "ce637ff86bafca5d8359473e8c02af644dcbdc43"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "conjL_nt",
            "line_nb": 176,
            "steps": [
                {
                    "command": [
                        "exact: s2valP' (tagged Fundamental_Theorem_of_Algebraics).",
                        "VernacExtend",
                        "ce637ff86bafca5d8359473e8c02af644dcbdc43"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "eq_root_is_equiv",
            "line_nb": 185,
            "steps": [
                {
                    "command": [
                        "by rewrite /eq_root; split=> [ ? | ? ? | ? ? ? ] // /eqP->.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "CtoL_inj",
            "line_nb": 197,
            "steps": [
                {
                    "command": [
                        "by move=> u v /eqP eq_uv; rewrite -[u]reprK -[v]reprK; apply/eqmodP.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "CtoL_P",
            "line_nb": 200,
            "steps": [
                {
                    "command": [
                        "rewrite /CtoL /rootQtoL; case: (repr u) => p j /=.",
                        "VernacExtend",
                        "712d339e99ee17eb7d5033e19ac614eb3ca6b532"
                    ]
                },
                {
                    "command": [
                        "case: (closed_field_poly_normal _) => r Dp /=.",
                        "VernacExtend",
                        "e00fff71ff314c991514fc71c41a3556702e444a"
                    ]
                },
                {
                    "command": [
                        "case: ifPn => [_ | nz_p]; first exact: integral0.",
                        "VernacExtend",
                        "3763a4b8db689af316a7372b722bb29806ab4fb6"
                    ]
                },
                {
                    "command": [
                        "have [/(nth_default 0)-> | lt_j_r] := leqP (size r) j; first exact: integral0.",
                        "VernacExtend",
                        "3763a4b8db689af316a7372b722bb29806ab4fb6"
                    ]
                },
                {
                    "command": [
                        "apply/integral_algebraic; exists p; rewrite // Dp -mul_polyC rootM orbC.",
                        "VernacExtend",
                        "a2aa1364aa1d58888958ed52f8a0fe47a40d8757"
                    ]
                },
                {
                    "command": [
                        "by rewrite root_prod_XsubC mem_nth.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "LtoC_subproof",
            "line_nb": 208,
            "steps": [
                {
                    "command": [
                        "case/sig2_eqW=> p mon_p pz0; rewrite /CtoL.",
                        "VernacExtend",
                        "90a2acb29b7a5304b0ab6ba5269c420638ddef63"
                    ]
                },
                {
                    "command": [
                        "pose j := index z (sval (closed_field_poly_normal (pQtoL p))).",
                        "VernacExtend",
                        "3c5f04de94609049d978298aa02ff35fb35ea7c7"
                    ]
                },
                {
                    "command": [
                        "pose u := \\pi_type%qT (p, j); exists u; have /eqmodP/eqP-> := reprK u.",
                        "VernacExtend",
                        "eaf32c4628a4fb7442c0fe55cd32b271f31fa055"
                    ]
                },
                {
                    "command": [
                        "rewrite /rootQtoL -if_neg monic_neq0 //; apply: nth_index => /=.",
                        "VernacExtend",
                        "634a7639ed2fb7caf62757f84400927f5829b7d5"
                    ]
                },
                {
                    "command": [
                        "case: (closed_field_poly_normal _) => r /= Dp.",
                        "VernacExtend",
                        "e00fff71ff314c991514fc71c41a3556702e444a"
                    ]
                },
                {
                    "command": [
                        "by rewrite Dp (monicP _) ?(monic_map QtoL) // scale1r root_prod_XsubC in pz0.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "LtoC_K",
            "line_nb": 217,
            "steps": [
                {
                    "command": [
                        "exact: (svalP (LtoC_subproof Az)).",
                        "VernacExtend",
                        "ce637ff86bafca5d8359473e8c02af644dcbdc43"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "CtoL_K",
            "line_nb": 220,
            "steps": [
                {
                    "command": [
                        "by apply: CtoL_inj; rewrite LtoC_K.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "addA",
            "line_nb": 226,
            "steps": [
                {
                    "command": [
                        "by move=> u v w; apply: CtoL_inj; rewrite !LtoC_K addrA.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "addC",
            "line_nb": 229,
            "steps": [
                {
                    "command": [
                        "by move=> u v; apply: CtoL_inj; rewrite !LtoC_K addrC.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "add0",
            "line_nb": 232,
            "steps": [
                {
                    "command": [
                        "by move=> u; apply: CtoL_inj; rewrite !LtoC_K add0r.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "addN",
            "line_nb": 235,
            "steps": [
                {
                    "command": [
                        "by move=> u; apply: CtoL_inj; rewrite !LtoC_K addNr.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "CtoL_is_additive",
            "line_nb": 241,
            "steps": [
                {
                    "command": [
                        "by move=> u v; rewrite !LtoC_K.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "mulA",
            "line_nb": 248,
            "steps": [
                {
                    "command": [
                        "by move=> u v w; apply: CtoL_inj; rewrite !LtoC_K mulrA.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "mulC",
            "line_nb": 251,
            "steps": [
                {
                    "command": [
                        "by move=> u v; apply: CtoL_inj; rewrite !LtoC_K mulrC.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "mul1",
            "line_nb": 254,
            "steps": [
                {
                    "command": [
                        "by move=> u; apply: CtoL_inj; rewrite !LtoC_K mul1r.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "mulD",
            "line_nb": 257,
            "steps": [
                {
                    "command": [
                        "by move=> u v w; apply: CtoL_inj; rewrite !LtoC_K mulrDl.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "one_nz",
            "line_nb": 260,
            "steps": [
                {
                    "command": [
                        "by rewrite -(inj_eq CtoL_inj) !LtoC_K oner_eq0.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "CtoL_is_multiplicative",
            "line_nb": 267,
            "steps": [
                {
                    "command": [
                        "by split=> [u v|]; rewrite !LtoC_K.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "mulVf",
            "line_nb": 271,
            "steps": [
                {
                    "command": [
                        "move=> u; rewrite -(inj_eq CtoL_inj) rmorph0 => nz_u.",
                        "VernacExtend",
                        "8261237f0cda1915a4077c28869831c5329103ce"
                    ]
                },
                {
                    "command": [
                        "by apply: CtoL_inj; rewrite !LtoC_K mulVf.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "inv0",
            "line_nb": 275,
            "steps": [
                {
                    "command": [
                        "by apply: CtoL_inj; rewrite !LtoC_K invr0.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "conj_subproof",
            "line_nb": 304,
            "steps": [
                {
                    "command": [
                        "have [p mon_p pu0] := CtoL_P u; exists p => //.",
                        "VernacExtend",
                        "8431fc4d2460f7908baa11892c1b26797a3f17b8"
                    ]
                },
                {
                    "command": [
                        "rewrite -(fmorph_root conjL) conjL_K map_poly_id // => _ /(nthP 0)[j _ <-].",
                        "VernacExtend",
                        "3c42b53d0efc26db114b00541ac5e7fcb29e6aeb"
                    ]
                },
                {
                    "command": [
                        "by rewrite coef_map fmorph_rat.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "conjK",
            "line_nb": 316,
            "steps": [
                {
                    "command": [
                        "by move=> u; apply: CtoL_inj; rewrite !LtoC_K conjL_K.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "conj_nt",
            "line_nb": 319,
            "steps": [
                {
                    "command": [
                        "have [i i2]: exists i : type, i ^+ 2 = -1.",
                        "VernacExtend",
                        "406cde1174359c53bf162a2a18c4eede395555f9"
                    ]
                },
                {
                    "command": [
                        "have [i] := @solve_monicpoly _ 2 (nth 0 [:: -1 : type]) isT.",
                        "VernacExtend",
                        "406cde1174359c53bf162a2a18c4eede395555f9"
                    ]
                },
                {
                    "command": [
                        "by rewrite !big_ord_recl big_ord0 /= mul0r mulr1 !addr0; exists i.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "move/(_ i)/(congr1 CtoL); rewrite LtoC_K => iL_J.",
                        "VernacExtend",
                        "8261237f0cda1915a4077c28869831c5329103ce"
                    ]
                },
                {
                    "command": [
                        "have/ltr_geF/idP[] := @ltr01 Lnum; rewrite -oppr_ge0 -(rmorphN1 CtoL_rmorphism).",
                        "VernacExtend",
                        "aa9d5fbc682ed874cd64b2543ca6c859b978e924"
                    ]
                },
                {
                    "command": [
                        "rewrite -i2 rmorphX /= expr2 -{2}iL_J -(svalP LnumMixin).",
                        "VernacExtend",
                        "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
                    ]
                },
                {
                    "command": [
                        "by rewrite exprn_ge0 ?normr_ge0.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "normK",
            "line_nb": 331,
            "steps": [
                {
                    "command": [
                        "exact: svalP (ComplexNumMixin conjK conj_nt) u.",
                        "VernacExtend",
                        "ce637ff86bafca5d8359473e8c02af644dcbdc43"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "algCi_subproof",
            "line_nb": 353,
            "steps": [
                {
                    "command": [
                        "exact: GRing.imaginary_exists.",
                        "VernacExtend",
                        "ce637ff86bafca5d8359473e8c02af644dcbdc43"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "getCrat_subproof",
            "line_nb": 357,
            "steps": [
                {
                    "command": [
                        "have isQ := rat_algebraic_decidable algebraic.",
                        "VernacExtend",
                        "406cde1174359c53bf162a2a18c4eede395555f9"
                    ]
                },
                {
                    "command": [
                        "exists (fun z => if isQ z is left Qz then sval (sig_eqW Qz) else 0) => a.",
                        "VernacExtend",
                        "3c42b53d0efc26db114b00541ac5e7fcb29e6aeb"
                    ]
                },
                {
                    "command": [
                        "case: (isQ _) => [Qa | []]; last by exists a.",
                        "VernacExtend",
                        "3763a4b8db689af316a7372b722bb29806ab4fb6"
                    ]
                },
                {
                    "command": [
                        "by case: (sig_eqW _) => b /= /fmorph_inj.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "floorC_subproof",
            "line_nb": 363,
            "steps": [
                {
                    "command": [
                        "have [Rx | _] := boolP (x \\is Creal); last by exists 0.",
                        "VernacExtend",
                        "3763a4b8db689af316a7372b722bb29806ab4fb6"
                    ]
                },
                {
                    "command": [
                        "without loss x_ge0: x Rx / x >= 0.",
                        "VernacExtend",
                        "87d5e7b04148ee8f2e4efcc847e0dfadae0aa4cb"
                    ]
                },
                {
                    "command": [
                        "have [x_ge0 | /ltrW x_le0] := real_ger0P Rx; first exact.",
                        "VernacExtend",
                        "3763a4b8db689af316a7372b722bb29806ab4fb6"
                    ]
                },
                {
                    "command": [
                        "case/(_ (- x)) => [||m /(_ isT)]; rewrite ?rpredN ?oppr_ge0 //.",
                        "VernacExtend",
                        "90a2acb29b7a5304b0ab6ba5269c420638ddef63"
                    ]
                },
                {
                    "command": [
                        "rewrite ler_oppr ltr_oppl -!rmorphN opprD /= ltr_neqAle ler_eqVlt.",
                        "VernacExtend",
                        "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
                    ]
                },
                {
                    "command": [
                        "case: eqP => [-> _ | _ /and3P[lt_x_m _ le_m_x]].",
                        "VernacExtend",
                        "e00fff71ff314c991514fc71c41a3556702e444a"
                    ]
                },
                {
                    "command": [
                        "by exists (- m) => _; rewrite lerr rmorphD ltr_addl ltr01.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "by exists (- m - 1); rewrite le_m_x subrK.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "have /ex_minnP[n lt_x_n1 min_n]: exists n, x < n.+1%:R.",
                        "VernacExtend",
                        "406cde1174359c53bf162a2a18c4eede395555f9"
                    ]
                },
                {
                    "command": [
                        "have [n le_x_n] := rat_algebraic_archimedean algebraic x.",
                        "VernacExtend",
                        "406cde1174359c53bf162a2a18c4eede395555f9"
                    ]
                },
                {
                    "command": [
                        "by exists n; rewrite -(ger0_norm x_ge0) (ltr_trans le_x_n) ?ltr_nat.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "exists n%:Z => _; rewrite addrC -intS lt_x_n1 andbT.",
                        "VernacExtend",
                        "82d53976234637e3f0907eb36cddf61d028c6306"
                    ]
                },
                {
                    "command": [
                        "case Dn: n => // [n1]; rewrite -Dn.",
                        "VernacExtend",
                        "90a2acb29b7a5304b0ab6ba5269c420638ddef63"
                    ]
                },
                {
                    "command": [
                        "have [||//|] := @real_lerP _ n%:R x; rewrite ?rpred_nat //.",
                        "VernacExtend",
                        "aa9d5fbc682ed874cd64b2543ca6c859b978e924"
                    ]
                },
                {
                    "command": [
                        "by rewrite Dn => /min_n; rewrite Dn ltnn.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "minCpoly_subproof",
            "line_nb": 380,
            "steps": [
                {
                    "command": [
                        "have isQ := rat_algebraic_decidable algebraic.",
                        "VernacExtend",
                        "406cde1174359c53bf162a2a18c4eede395555f9"
                    ]
                },
                {
                    "command": [
                        "have [p [mon_p px0 irr_p]] := minPoly_decidable_closure isQ (algebraic x).",
                        "VernacExtend",
                        "406cde1174359c53bf162a2a18c4eede395555f9"
                    ]
                },
                {
                    "command": [
                        "exists p => // q; apply/idP/idP=> [qx0 | /dvdpP[r ->]]; last first.",
                        "VernacExtend",
                        "3763a4b8db689af316a7372b722bb29806ab4fb6"
                    ]
                },
                {
                    "command": [
                        "by rewrite rmorphM rootM px0 orbT.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "suffices /eqp_dvdl <-: gcdp p q %= p by apply: dvdp_gcdr.",
                        "VernacExtend",
                        "290ed488b5562e885aa2cac56f3a69b4faa0eaa6"
                    ]
                },
                {
                    "command": [
                        "rewrite irr_p ?dvdp_gcdl ?gtn_eqF // -(size_map_poly QtoCm) gcdp_map /=.",
                        "VernacExtend",
                        "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
                    ]
                },
                {
                    "command": [
                        "rewrite (@root_size_gt1 _ x) ?root_gcd ?px0 //.",
                        "VernacExtend",
                        "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
                    ]
                },
                {
                    "command": [
                        "by rewrite gcdp_eq0 negb_and map_poly_eq0 monic_neq0.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "nCdivE",
            "line_nb": 437,
            "steps": [
                {
                    "command": [
                        "by [].",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "zCdivE",
            "line_nb": 440,
            "steps": [
                {
                    "command": [
                        "by [].",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "nz2",
            "line_nb": 472,
            "steps": [
                {
                    "command": [
                        "by rewrite -!CintrE.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "Creal0",
            "line_nb": 476,
            "steps": [
                {
                    "command": [
                        "exact: rpred0.",
                        "VernacExtend",
                        "ce637ff86bafca5d8359473e8c02af644dcbdc43"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "Creal1",
            "line_nb": 479,
            "steps": [
                {
                    "command": [
                        "exact: rpred1.",
                        "VernacExtend",
                        "ce637ff86bafca5d8359473e8c02af644dcbdc43"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "algCrect",
            "line_nb": 483,
            "steps": [
                {
                    "command": [
                        "by rewrite [LHS]Crect.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "algCreal_Re",
            "line_nb": 486,
            "steps": [
                {
                    "command": [
                        "by rewrite Creal_Re.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "algCreal_Im",
            "line_nb": 489,
            "steps": [
                {
                    "command": [
                        "by rewrite Creal_Im.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "floorC_itv",
            "line_nb": 493,
            "steps": [
                {
                    "command": [
                        "by rewrite /floorC => Rx; case: (floorC_subproof x) => //= m; apply.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "floorC_def",
            "line_nb": 496,
            "steps": [
                {
                    "command": [
                        "case/andP=> lemx ltxm1; apply/eqP; rewrite eqr_le -!ltz_addr1.",
                        "VernacExtend",
                        "db5c0dcae9fc8f6605ec5d5bf559f9684231fcd6"
                    ]
                },
                {
                    "command": [
                        "have /floorC_itv/andP[lefx ltxf1]: x \\is Creal.",
                        "VernacExtend",
                        "406cde1174359c53bf162a2a18c4eede395555f9"
                    ]
                },
                {
                    "command": [
                        "by rewrite -[x](subrK m%:~R) rpredD ?realz ?ler_sub_real.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "by rewrite -!(ltr_int [numFieldType of algC]) 2?(@ler_lt_trans _ x).",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "intCK",
            "line_nb": 502,
            "steps": [
                {
                    "command": [
                        "by move=> m; apply: floorC_def; rewrite ler_int ltr_int ltz_addr1 lerr.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "floorCK",
            "line_nb": 505,
            "steps": [
                {
                    "command": [
                        "by move=> z /eqP.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "floorC0",
            "line_nb": 508,
            "steps": [
                {
                    "command": [
                        "exact: (intCK 0).",
                        "VernacExtend",
                        "ce637ff86bafca5d8359473e8c02af644dcbdc43"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "floorC1",
            "line_nb": 511,
            "steps": [
                {
                    "command": [
                        "exact: (intCK 1).",
                        "VernacExtend",
                        "ce637ff86bafca5d8359473e8c02af644dcbdc43"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "floorCpK",
            "line_nb": 515,
            "steps": [
                {
                    "command": [
                        "move/(all_nthP 0)=> Zp; apply/polyP=> i.",
                        "VernacExtend",
                        "d6ebf3361f380a12d5c2c9bbb7ea363132c48b36"
                    ]
                },
                {
                    "command": [
                        "rewrite coef_map coef_map_id0 //= -[p]coefK coef_poly.",
                        "VernacExtend",
                        "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
                    ]
                },
                {
                    "command": [
                        "by case: ifP => [/Zp/floorCK // | _]; rewrite floorC0.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "floorCpP",
            "line_nb": 520,
            "steps": [
                {
                    "command": [
                        "by exists (map_poly floorC p); rewrite floorCpK.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "Cint_int",
            "line_nb": 523,
            "steps": [
                {
                    "command": [
                        "by rewrite unfold_in intCK.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "CintP",
            "line_nb": 526,
            "steps": [
                {
                    "command": [
                        "by apply: (iffP idP) => [/eqP<-|[m ->]]; [exists (floorC x) | apply: Cint_int].",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "floorCN",
            "line_nb": 533,
            "steps": [
                {
                    "command": [
                        "by move=> _ /CintP[m ->]; rewrite -rmorphN !intCK.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "floorCM",
            "line_nb": 536,
            "steps": [
                {
                    "command": [
                        "by move=> _ _ /CintP[m1 ->] /CintP[m2 ->]; rewrite -rmorphM !intCK.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "floorCX",
            "line_nb": 539,
            "steps": [
                {
                    "command": [
                        "by move=> _ /CintP[m ->]; rewrite -rmorphX !intCK.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "rpred_Cint",
            "line_nb": 542,
            "steps": [
                {
                    "command": [
                        "by case/CintP=> m ->; apply: rpred_int.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "Cint0",
            "line_nb": 545,
            "steps": [
                {
                    "command": [
                        "exact: (Cint_int 0).",
                        "VernacExtend",
                        "ce637ff86bafca5d8359473e8c02af644dcbdc43"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "Cint1",
            "line_nb": 548,
            "steps": [
                {
                    "command": [
                        "exact: (Cint_int 1).",
                        "VernacExtend",
                        "ce637ff86bafca5d8359473e8c02af644dcbdc43"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "Cint_key",
            "line_nb": 552,
            "steps": [
                {
                    "command": [
                        "by [].",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "Cint_subring",
            "line_nb": 555,
            "steps": [
                {
                    "command": [
                        "by split=> // _ _ /CintP[m ->] /CintP[p ->]; rewrite -(rmorphB, rmorphM) Cint_int.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "Creal_Cint",
            "line_nb": 566,
            "steps": [
                {
                    "command": [
                        "by move=> _ /CintP[m ->]; apply: realz.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "conj_Cint",
            "line_nb": 569,
            "steps": [
                {
                    "command": [
                        "by move/Creal_Cint/conj_Creal.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "Cint_normK",
            "line_nb": 572,
            "steps": [
                {
                    "command": [
                        "by move/Creal_Cint/real_normK.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "CintEsign",
            "line_nb": 575,
            "steps": [
                {
                    "command": [
                        "by move/Creal_Cint/realEsign.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "truncC_itv",
            "line_nb": 578,
            "steps": [
                {
                    "command": [
                        "move=> x_ge0; have /andP[lemx ltxm1] := floorC_itv (ger0_real x_ge0).",
                        "VernacExtend",
                        "ccd83c252dcbae3d56f3d057fcb8217878b51901"
                    ]
                },
                {
                    "command": [
                        "rewrite /truncC x_ge0 -addn1 !pmulrn PoszD gez0_abs ?lemx //.",
                        "VernacExtend",
                        "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
                    ]
                },
                {
                    "command": [
                        "by rewrite -ltz_addr1 -(ltr_int [numFieldType of algC]) (ler_lt_trans x_ge0).",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "truncC_def",
            "line_nb": 583,
            "steps": [
                {
                    "command": [
                        "move=> ivt_n_x; have /andP[lenx _] := ivt_n_x.",
                        "VernacExtend",
                        "ccd83c252dcbae3d56f3d057fcb8217878b51901"
                    ]
                },
                {
                    "command": [
                        "by rewrite /truncC (ler_trans (ler0n _ n)) // (@floorC_def _ n) // addrC -intS.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "natCK",
            "line_nb": 587,
            "steps": [
                {
                    "command": [
                        "by apply: truncC_def; rewrite lerr ltr_nat /=.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "CnatP",
            "line_nb": 590,
            "steps": [
                {
                    "command": [
                        "by apply: (iffP eqP) => [<- | [n ->]]; [exists (truncC x) | rewrite natCK].",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "truncCK",
            "line_nb": 593,
            "steps": [
                {
                    "command": [
                        "by move=> x /eqP.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "truncC_gt0",
            "line_nb": 596,
            "steps": [
                {
                    "command": [
                        "apply/idP/idP=> [m_gt0 | x_ge1].",
                        "VernacExtend",
                        "4bd6fa79b17bcd2bfb7af091fb325367a20385d6"
                    ]
                },
                {
                    "command": [
                        "have /truncC_itv/andP[lemx _]: 0 <= x.",
                        "VernacExtend",
                        "406cde1174359c53bf162a2a18c4eede395555f9"
                    ]
                },
                {
                    "command": [
                        "by move: m_gt0; rewrite /truncC; case: ifP.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "by apply: ler_trans lemx; rewrite ler1n.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "have /truncC_itv/andP[_ ltxm1]:= ler_trans ler01 x_ge1.",
                        "VernacExtend",
                        "406cde1174359c53bf162a2a18c4eede395555f9"
                    ]
                },
                {
                    "command": [
                        "by rewrite -ltnS -ltC_nat (ler_lt_trans x_ge1).",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "truncC0Pn",
            "line_nb": 604,
            "steps": [
                {
                    "command": [
                        "by rewrite -truncC_gt0 -eqn0Ngt; apply: eqP.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "truncC0",
            "line_nb": 607,
            "steps": [
                {
                    "command": [
                        "exact: (natCK 0).",
                        "VernacExtend",
                        "ce637ff86bafca5d8359473e8c02af644dcbdc43"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "truncC1",
            "line_nb": 610,
            "steps": [
                {
                    "command": [
                        "exact: (natCK 1).",
                        "VernacExtend",
                        "ce637ff86bafca5d8359473e8c02af644dcbdc43"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "truncCM",
            "line_nb": 617,
            "steps": [
                {
                    "command": [
                        "by move=> _ _ /CnatP[n1 ->] /CnatP[n2 ->]; rewrite -natrM !natCK.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "truncCX",
            "line_nb": 620,
            "steps": [
                {
                    "command": [
                        "by move=> _ /CnatP[n1 ->]; rewrite -natrX !natCK.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "rpred_Cnat",
            "line_nb": 623,
            "steps": [
                {
                    "command": [
                        "by case/CnatP=> n ->; apply: rpred_nat.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "Cnat_nat",
            "line_nb": 626,
            "steps": [
                {
                    "command": [
                        "by apply/CnatP; exists n.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "Cnat0",
            "line_nb": 629,
            "steps": [
                {
                    "command": [
                        "exact: (Cnat_nat 0).",
                        "VernacExtend",
                        "ce637ff86bafca5d8359473e8c02af644dcbdc43"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "Cnat1",
            "line_nb": 632,
            "steps": [
                {
                    "command": [
                        "exact: (Cnat_nat 1).",
                        "VernacExtend",
                        "ce637ff86bafca5d8359473e8c02af644dcbdc43"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "Cnat_key",
            "line_nb": 636,
            "steps": [
                {
                    "command": [
                        "by [].",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "Cnat_semiring",
            "line_nb": 639,
            "steps": [
                {
                    "command": [
                        "by do 2![split] => //= _ _ /CnatP[n ->] /CnatP[m ->]; rewrite -(natrD, natrM).",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "Cnat_ge0",
            "line_nb": 646,
            "steps": [
                {
                    "command": [
                        "by case/CnatP=> n ->; apply: ler0n.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "Cnat_gt0",
            "line_nb": 649,
            "steps": [
                {
                    "command": [
                        "by case/CnatP=> n ->; rewrite pnatr_eq0 ltr0n lt0n.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "conj_Cnat",
            "line_nb": 652,
            "steps": [
                {
                    "command": [
                        "by case/CnatP=> n ->; apply: rmorph_nat.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "norm_Cnat",
            "line_nb": 655,
            "steps": [
                {
                    "command": [
                        "by move/Cnat_ge0/ger0_norm.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "Creal_Cnat",
            "line_nb": 658,
            "steps": [
                {
                    "command": [
                        "by move=> z /conj_Cnat/CrealP.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "Cnat_sum_eq1",
            "line_nb": 661,
            "steps": [
                {
                    "command": [
                        "move=> natF sumF1; pose nF i := truncC (F i).",
                        "VernacExtend",
                        "fef3c4a8f7fcf70b0824f3cce5fb58f2e0ef07fd"
                    ]
                },
                {
                    "command": [
                        "have{natF} defF i: P i -> F i = (nF i)%:R by move/natF/eqP.",
                        "VernacExtend",
                        "406cde1174359c53bf162a2a18c4eede395555f9"
                    ]
                },
                {
                    "command": [
                        "have{sumF1} /eqP sumF1: (\\sum_(i | P i) nF i == 1)%N.",
                        "VernacExtend",
                        "406cde1174359c53bf162a2a18c4eede395555f9"
                    ]
                },
                {
                    "command": [
                        "by rewrite -eqC_nat natr_sum -(eq_bigr _ defF) sumF1.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "have [i Pi nZfi]: {i : I | P i & nF i != 0%N}.",
                        "VernacExtend",
                        "406cde1174359c53bf162a2a18c4eede395555f9"
                    ]
                },
                {
                    "command": [
                        "by apply/sig2W/exists_inP; rewrite -negb_forall_in -sum_nat_eq0 sumF1.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "have F'ge0 := (leq0n _, etrans (eq_sym _ _) (sum_nat_eq0 (predD1 P i) nF)).",
                        "VernacExtend",
                        "406cde1174359c53bf162a2a18c4eede395555f9"
                    ]
                },
                {
                    "command": [
                        "rewrite -lt0n in nZfi; have [_] := (leqif_add (leqif_eq nZfi) (F'ge0 _)).",
                        "VernacExtend",
                        "7be6e3cf9ccbce33486c4b5c6fefdf7a9ad6e52b"
                    ]
                },
                {
                    "command": [
                        "rewrite /= big_andbC -bigD1 // sumF1 => /esym/andP/=[/eqP Fi1 /forall_inP Fi'0].",
                        "VernacExtend",
                        "3c42b53d0efc26db114b00541ac5e7fcb29e6aeb"
                    ]
                },
                {
                    "command": [
                        "exists i; split=> // [|j neq_ji Pj]; first by rewrite defF // -Fi1.",
                        "VernacExtend",
                        "3763a4b8db689af316a7372b722bb29806ab4fb6"
                    ]
                },
                {
                    "command": [
                        "by rewrite defF // (eqP (Fi'0 j _)) // neq_ji.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "Cnat_mul_eq1",
            "line_nb": 674,
            "steps": [
                {
                    "command": [
                        "by do 2!move/truncCK <-; rewrite -natrM !pnatr_eq1 muln_eq1.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "Cnat_prod_eq1",
            "line_nb": 677,
            "steps": [
                {
                    "command": [
                        "move=> natF prodF1; apply/eqfun_inP; rewrite -big_andE.",
                        "VernacExtend",
                        "f7feb259d6220ca40e8a86b90bd06f137aa140ac"
                    ]
                },
                {
                    "command": [
                        "move: prodF1; elim/(big_load (fun x => x \\in Cnat)): _.",
                        "VernacExtend",
                        "06880003f1108b2eb418688c7bc6bf1013cf0e4c"
                    ]
                },
                {
                    "command": [
                        "elim/big_rec2: _ => // i all1x x /natF N_Fi [Nx x1all1].",
                        "VernacExtend",
                        "e686a1895f1799b840b76242f931100819a9ad6c"
                    ]
                },
                {
                    "command": [
                        "by split=> [|/eqP]; rewrite ?rpredM ?Cnat_mul_eq1 // => /andP[-> /eqP].",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "Cint_Cnat",
            "line_nb": 683,
            "steps": [
                {
                    "command": [
                        "by move=> _ /CnatP[n ->]; rewrite pmulrn Cint_int.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "Cnat_norm_Cint",
            "line_nb": 691,
            "steps": [
                {
                    "command": [
                        "case/CintP=> [m ->]; rewrite [m]intEsign rmorphM rmorph_sign.",
                        "VernacExtend",
                        "90a2acb29b7a5304b0ab6ba5269c420638ddef63"
                    ]
                },
                {
                    "command": [
                        "by rewrite normrM normr_sign mul1r normr_nat rpred_nat.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "CnatEint",
            "line_nb": 695,
            "steps": [
                {
                    "command": [
                        "apply/idP/andP=> [Nx | [Zx x_ge0]]; first by rewrite Cint_Cnat ?Cnat_ge0.",
                        "VernacExtend",
                        "3763a4b8db689af316a7372b722bb29806ab4fb6"
                    ]
                },
                {
                    "command": [
                        "by rewrite -(ger0_norm x_ge0) Cnat_norm_Cint.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "CintEge0",
            "line_nb": 699,
            "steps": [
                {
                    "command": [
                        "by rewrite CnatEint andbC => ->.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "Cnat_exp_even",
            "line_nb": 702,
            "steps": [
                {
                    "command": [
                        "rewrite -dvdn2 => /dvdnP[m ->] Zx; rewrite mulnC exprM -Cint_normK ?rpredX //.",
                        "VernacExtend",
                        "82d53976234637e3f0907eb36cddf61d028c6306"
                    ]
                },
                {
                    "command": [
                        "exact: Cnat_norm_Cint.",
                        "VernacExtend",
                        "ce637ff86bafca5d8359473e8c02af644dcbdc43"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "norm_Cint_ge1",
            "line_nb": 706,
            "steps": [
                {
                    "command": [
                        "rewrite -normr_eq0 => /Cnat_norm_Cint/CnatP[n ->].",
                        "VernacExtend",
                        "3c42b53d0efc26db114b00541ac5e7fcb29e6aeb"
                    ]
                },
                {
                    "command": [
                        "by rewrite pnatr_eq0 ler1n lt0n.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "sqr_Cint_ge1",
            "line_nb": 710,
            "steps": [
                {
                    "command": [
                        "by move=> Zx nz_x; rewrite -Cint_normK // expr_ge1 ?normr_ge0 ?norm_Cint_ge1.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "dvdCP",
            "line_nb": 718,
            "steps": [
                {
                    "command": [
                        "rewrite unfold_in; have [-> | nz_x] := altP eqP.",
                        "VernacExtend",
                        "7be6e3cf9ccbce33486c4b5c6fefdf7a9ad6e52b"
                    ]
                },
                {
                    "command": [
                        "by apply: (iffP eqP) => [-> | [z _ ->]]; first exists 0; rewrite ?mulr0.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "apply: (iffP idP) => [Zyx | [z Zz ->]]; last by rewrite mulfK.",
                        "VernacExtend",
                        "3763a4b8db689af316a7372b722bb29806ab4fb6"
                    ]
                },
                {
                    "command": [
                        "by exists (y / x); rewrite ?divfK.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "dvdC0",
            "line_nb": 730,
            "steps": [
                {
                    "command": [
                        "by apply/dvdCP; exists 0; rewrite ?mul0r.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "dvd0C",
            "line_nb": 733,
            "steps": [
                {
                    "command": [
                        "by rewrite unfold_in eqxx.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "dvdC_mulr",
            "line_nb": 740,
            "steps": [
                {
                    "command": [
                        "by rewrite mulrC; apply: dvdC_mull.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "dvdC_mul2r",
            "line_nb": 743,
            "steps": [
                {
                    "command": [
                        "move=> nz_y; rewrite !unfold_in !(mulIr_eq0 _ (mulIf nz_y)).",
                        "VernacExtend",
                        "057edeb0967475c7ea5e8c98c449ddc5613eddc1"
                    ]
                },
                {
                    "command": [
                        "by rewrite mulrAC invfM mulrA divfK.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "dvdC_mul2l",
            "line_nb": 747,
            "steps": [
                {
                    "command": [
                        "by rewrite !(mulrC y); apply: dvdC_mul2r.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "dvdC_trans",
            "line_nb": 750,
            "steps": [
                {
                    "command": [
                        "by move=> x_dv_y /dvdCP[m Zm ->]; apply: dvdC_mull.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "dvdC_refl",
            "line_nb": 753,
            "steps": [
                {
                    "command": [
                        "by apply/dvdCP; exists 1; rewrite ?mul1r.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "dvdC_key",
            "line_nb": 757,
            "steps": [
                {
                    "command": [
                        "by [].",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "dvdC_zmod",
            "line_nb": 760,
            "steps": [
                {
                    "command": [
                        "split=> [| _ _ /dvdCP[y Zy ->] /dvdCP[z Zz ->]]; first exact: dvdC0.",
                        "VernacExtend",
                        "3763a4b8db689af316a7372b722bb29806ab4fb6"
                    ]
                },
                {
                    "command": [
                        "by rewrite -mulrBl dvdC_mull ?rpredB.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "dvdC_nat",
            "line_nb": 768,
            "steps": [
                {
                    "command": [
                        "rewrite unfold_in CintEge0 ?divr_ge0 ?invr_ge0 ?ler0n // !pnatr_eq0.",
                        "VernacExtend",
                        "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
                    ]
                },
                {
                    "command": [
                        "have [-> | nz_p] := altP eqP; first by rewrite dvd0n.",
                        "VernacExtend",
                        "3763a4b8db689af316a7372b722bb29806ab4fb6"
                    ]
                },
                {
                    "command": [
                        "apply/CnatP/dvdnP=> [[q def_q] | [q ->]]; exists q.",
                        "VernacExtend",
                        "cd265cdf9b03cdf5c8c1c695ae373d4c2945a40c"
                    ]
                },
                {
                    "command": [
                        "by apply/eqP; rewrite -eqC_nat natrM -def_q divfK ?pnatr_eq0.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "by rewrite [num in num / _]natrM mulfK ?pnatr_eq0.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "dvdC_int",
            "line_nb": 775,
            "steps": [
                {
                    "command": [
                        "move=> Zx; rewrite -{1}(floorCK Zx) {1}[floorC x]intEsign.",
                        "VernacExtend",
                        "057edeb0967475c7ea5e8c98c449ddc5613eddc1"
                    ]
                },
                {
                    "command": [
                        "by rewrite rmorphMsign rpredMsign dvdC_nat.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "eqCmod_refl",
            "line_nb": 779,
            "steps": [
                {
                    "command": [
                        "by rewrite /eqCmod subrr rpred0.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "eqCmodm0",
            "line_nb": 782,
            "steps": [
                {
                    "command": [
                        "by rewrite /eqCmod subr0.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "eqCmod0",
            "line_nb": 786,
            "steps": [
                {
                    "command": [
                        "by rewrite /eqCmod subr0.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "eqCmod_sym",
            "line_nb": 789,
            "steps": [
                {
                    "command": [
                        "by rewrite /eqCmod -opprB rpredN.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "eqCmod_trans",
            "line_nb": 792,
            "steps": [
                {
                    "command": [
                        "by move=> Exy Eyz; rewrite /eqCmod -[x](subrK y) -addrA rpredD.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "eqCmod_transl",
            "line_nb": 795,
            "steps": [
                {
                    "command": [
                        "by move/(sym_left_transitive (eqCmod_sym e) (@eqCmod_trans e)).",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "eqCmod_transr",
            "line_nb": 798,
            "steps": [
                {
                    "command": [
                        "by move/(sym_right_transitive (eqCmod_sym e) (@eqCmod_trans e)).",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "eqCmodN",
            "line_nb": 801,
            "steps": [
                {
                    "command": [
                        "by rewrite eqCmod_sym /eqCmod !opprK addrC.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "eqCmodDr",
            "line_nb": 804,
            "steps": [
                {
                    "command": [
                        "by rewrite /eqCmod addrAC opprD !addrA subrK.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "eqCmodDl",
            "line_nb": 807,
            "steps": [
                {
                    "command": [
                        "by rewrite !(addrC x) eqCmodDr.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "eqCmodD",
            "line_nb": 810,
            "steps": [
                {
                    "command": [
                        "by rewrite -(eqCmodDl e x2 y1) -(eqCmodDr e y1); apply: eqCmod_trans.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "eqCmod_nat",
            "line_nb": 813,
            "steps": [
                {
                    "command": [
                        "without loss lenm: m n / (n <= m)%N.",
                        "VernacExtend",
                        "87d5e7b04148ee8f2e4efcc847e0dfadae0aa4cb"
                    ]
                },
                {
                    "command": [
                        "by move=> IH; case/orP: (leq_total m n) => /IH //; rewrite eqCmod_sym eq_sym.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "by rewrite /eqCmod -natrB // dvdC_nat eqn_mod_dvd.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "eqCmod0_nat",
            "line_nb": 818,
            "steps": [
                {
                    "command": [
                        "by rewrite eqCmod0 dvdC_nat.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "eqCmodMr",
            "line_nb": 821,
            "steps": [
                {
                    "command": [
                        "by move=> z Zz x y; rewrite /eqCmod -mulrBl => /dvdC_mulr->.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "eqCmodMl",
            "line_nb": 824,
            "steps": [
                {
                    "command": [
                        "by move=> z Zz x y Exy; rewrite !(mulrC z) eqCmodMr.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "eqCmodMl0",
            "line_nb": 827,
            "steps": [
                {
                    "command": [
                        "by move=> x Zx; rewrite -(mulr0 x) eqCmodMl.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "eqCmodMr0",
            "line_nb": 830,
            "steps": [
                {
                    "command": [
                        "by move=> x Zx; rewrite /= mulrC eqCmodMl0.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "eqCmod_addl_mul",
            "line_nb": 833,
            "steps": [
                {
                    "command": [
                        "by move=> x Zx y; rewrite -{2}[y]add0r eqCmodDr eqCmodMl0.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "eqCmodM",
            "line_nb": 836,
            "steps": [
                {
                    "command": [
                        "move=> x1 y2 Zx1 Zy2 x2 y1 eq_x /(eqCmodMl Zx1)/eqCmod_trans-> //.",
                        "VernacExtend",
                        "b1b2cb7a3a617cba67460b4eca1f04de3c1cc716"
                    ]
                },
                {
                    "command": [
                        "exact: eqCmodMr.",
                        "VernacExtend",
                        "ce637ff86bafca5d8359473e8c02af644dcbdc43"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "ratCK",
            "line_nb": 840,
            "steps": [
                {
                    "command": [
                        "by rewrite /getCrat; case: getCrat_subproof.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "getCratK",
            "line_nb": 843,
            "steps": [
                {
                    "command": [
                        "by move=> x /eqP.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "Crat_rat",
            "line_nb": 846,
            "steps": [
                {
                    "command": [
                        "by rewrite unfold_in ratCK.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "CratP",
            "line_nb": 849,
            "steps": [
                {
                    "command": [
                        "by apply: (iffP eqP) => [<- | [a ->]]; [exists (CtoQ x) | rewrite ratCK].",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "Crat0",
            "line_nb": 852,
            "steps": [
                {
                    "command": [
                        "by apply/CratP; exists 0; rewrite rmorph0.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "Crat1",
            "line_nb": 855,
            "steps": [
                {
                    "command": [
                        "by apply/CratP; exists 1; rewrite rmorph1.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "Crat_key",
            "line_nb": 859,
            "steps": [
                {
                    "command": [
                        "by [].",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "Crat_divring_closed",
            "line_nb": 862,
            "steps": [
                {
                    "command": [
                        "split=> // _ _ /CratP[x ->] /CratP[y ->].",
                        "VernacExtend",
                        "3c42b53d0efc26db114b00541ac5e7fcb29e6aeb"
                    ]
                },
                {
                    "command": [
                        "by rewrite -rmorphB Crat_rat.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "by rewrite -fmorph_div Crat_rat.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "rpred_Crat",
            "line_nb": 878,
            "steps": [
                {
                    "command": [
                        "by move=> _ /CratP[a ->]; apply: rpred_rat.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "conj_Crat",
            "line_nb": 881,
            "steps": [
                {
                    "command": [
                        "by move/getCratK <-; rewrite fmorph_div !rmorph_int.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "Creal_Crat",
            "line_nb": 884,
            "steps": [
                {
                    "command": [
                        "by move=> x /conj_Crat/CrealP.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "minCpolyP",
            "line_nb": 892,
            "steps": [
                {
                    "command": [
                        "by rewrite /minCpoly; case: (minCpoly_subproof x) => p; exists p.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "minCpoly_monic",
            "line_nb": 895,
            "steps": [
                {
                    "command": [
                        "by have [p [-> mon_p] _] := minCpolyP x; rewrite map_monic.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "minCpoly_eq0",
            "line_nb": 898,
            "steps": [
                {
                    "command": [
                        "exact/negbTE/monic_neq0/minCpoly_monic.",
                        "VernacExtend",
                        "ce637ff86bafca5d8359473e8c02af644dcbdc43"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "root_minCpoly",
            "line_nb": 901,
            "steps": [
                {
                    "command": [
                        "by have [p [-> _] ->] := minCpolyP x.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "size_minCpoly",
            "line_nb": 904,
            "steps": [
                {
                    "command": [
                        "by apply: root_size_gt1 (root_minCpoly x); rewrite ?minCpoly_eq0.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "aut_Cnat",
            "line_nb": 909,
            "steps": [
                {
                    "command": [
                        "by move=> _ /CnatP[n ->]; apply: rmorph_nat.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "aut_Cint",
            "line_nb": 912,
            "steps": [
                {
                    "command": [
                        "by move=> _ /CintP[m ->]; apply: rmorph_int.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "aut_Crat",
            "line_nb": 915,
            "steps": [
                {
                    "command": [
                        "by move=> _ /CratP[a ->]; apply: fmorph_rat.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "Cnat_aut",
            "line_nb": 918,
            "steps": [
                {
                    "command": [
                        "by do [apply/idP/idP=> Nx; have:= aut_Cnat nu Nx] => [/fmorph_inj <- | ->].",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "Cint_aut",
            "line_nb": 921,
            "steps": [
                {
                    "command": [
                        "by rewrite !CintE -rmorphN !Cnat_aut.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "Crat_aut",
            "line_nb": 924,
            "steps": [
                {
                    "command": [
                        "apply/idP/idP=> /CratP[a] => [|->]; last by rewrite fmorph_rat Crat_rat.",
                        "VernacExtend",
                        "3763a4b8db689af316a7372b722bb29806ab4fb6"
                    ]
                },
                {
                    "command": [
                        "by rewrite -(fmorph_rat nu) => /fmorph_inj->; apply: Crat_rat.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "algC_invautK",
            "line_nb": 938,
            "steps": [
                {
                    "command": [
                        "by move=> x; rewrite /algC_invaut; case: algC_invaut_subproof.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "algC_autK",
            "line_nb": 941,
            "steps": [
                {
                    "command": [
                        "exact: inj_can_sym (algC_invautK nu) (fmorph_inj nu).",
                        "VernacExtend",
                        "ce637ff86bafca5d8359473e8c02af644dcbdc43"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "algC_invaut_is_rmorphism",
            "line_nb": 944,
            "steps": [
                {
                    "command": [
                        "exact: can2_rmorphism (algC_autK nu) (algC_invautK nu).",
                        "VernacExtend",
                        "ce637ff86bafca5d8359473e8c02af644dcbdc43"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "minCpoly_aut",
            "line_nb": 949,
            "steps": [
                {
                    "command": [
                        "wlog suffices dvd_nu: nu x / (minCpoly x %| minCpoly (nu x))%R.",
                        "VernacExtend",
                        "348aa27e7c84ea4ca2ac06b8a3b3db24e74b6ad7"
                    ]
                },
                {
                    "command": [
                        "apply/eqP; rewrite -eqp_monic ?minCpoly_monic //; apply/andP; split=> //.",
                        "VernacExtend",
                        "317aaa9195ff4c953788629aed9ed3b3494c7b20"
                    ]
                },
                {
                    "command": [
                        "by rewrite -{2}(algC_autK nu x) dvd_nu.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "have [[q [Dq _] min_q] [q1 [Dq1 _] _]] := (minCpolyP x, minCpolyP (nu x)).",
                        "VernacExtend",
                        "406cde1174359c53bf162a2a18c4eede395555f9"
                    ]
                },
                {
                    "command": [
                        "rewrite Dq Dq1 dvdp_map -min_q -(fmorph_root nu) -map_poly_comp.",
                        "VernacExtend",
                        "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
                    ]
                },
                {
                    "command": [
                        "by rewrite (eq_map_poly (fmorph_rat nu)) -Dq1 root_minCpoly.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "raddfZ_Cnat",
            "line_nb": 960,
            "steps": [
                {
                    "command": [
                        "by case/CnatP=> n ->; apply: raddfZnat.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "raddfZ_Cint",
            "line_nb": 963,
            "steps": [
                {
                    "command": [
                        "by case/CintP=> m ->; rewrite !scaler_int raddfMz.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "rpredZ_Cnat",
            "line_nb": 969,
            "steps": [
                {
                    "command": [
                        "by move=> _ u /CnatP[n ->]; apply: rpredZnat.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "rpredZ_Cint",
            "line_nb": 972,
            "steps": [
                {
                    "command": [
                        "by move=> _ u /CintP[m ->]; apply: rpredZint.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        }
    ]
}