{
    "filename": "mathcomp/field/cyclotomic.v",
    "coq_project": "math-comp",
    "vernac_cmds": [
        [
            "Require Import mathcomp.ssreflect.ssreflect.",
            "VernacRequire",
            "85e251063dc2b5a9653f7bb76dcd176ed36b42a9"
        ],
        [
            "From mathcomp Require Import ssrbool ssrfun eqtype ssrnat seq path div choice.",
            "VernacRequire",
            "28f7cc4746e8608411d0ebf22fadc6cf30a98194"
        ],
        [
            "From mathcomp Require Import fintype tuple finfun bigop prime ssralg poly finset.",
            "VernacRequire",
            "fab5cc7f7404dfb6565f6b962fccbe62aedbe140"
        ],
        [
            "From mathcomp Require Import fingroup finalg zmodp cyclic.",
            "VernacRequire",
            "16dda5ecc5c3ec4b9a57df77a47f54f6a3c032c4"
        ],
        [
            "From mathcomp Require Import ssrnum ssrint polydiv rat intdiv.",
            "VernacRequire",
            "c0366f0a81a128fb345cf778279dd666574d0d76"
        ],
        [
            "From mathcomp Require Import mxpoly vector falgebra fieldext separable galois algC.",
            "VernacRequire",
            "4bee19c9491f3d60576a022ccf22fffcae838598"
        ],
        [
            "Set Implicit Arguments.",
            "VernacSetOption",
            "9e84ff8896f028601d8aded48c1d4aebe60aa584"
        ],
        [
            "Unset Strict Implicit.",
            "VernacUnsetOption",
            "2842adaf6959318f2042805935c46f513bdc0348"
        ],
        [
            "Unset Printing Implicit Defensive.",
            "VernacUnsetOption",
            "444e5f0be4b25d9b1fd556943a447ec10046d151"
        ],
        [
            "Import GRing.Theory Num.Theory.",
            "VernacImport",
            "b7c34fb48ecb00de4262e619b1ca3ecacdf18e53"
        ],
        [
            "Local Open Scope ring_scope.",
            "VernacOpenCloseScope",
            "fb9da4a291533574d328be8c8a69d90a14641928"
        ],
        [
            "Section CyclotomicPoly.",
            "VernacBeginSection",
            "d91852640a4a201c4567e459d24ddc8d25fcb1a1"
        ],
        [
            "Section Ring.",
            "VernacBeginSection",
            "4d770a0e7a33287fd734255f173f9e9a26afb6de"
        ],
        [
            "Variable R : ringType.",
            "VernacAssumption",
            "103955c3e16ede32f173514da95e3006926aeccd"
        ],
        [
            "Definition cyclotomic (z : R) n := \\prod_(k < n | coprime k n) ('X - (z ^+ k)%:P).",
            "VernacDefinition",
            "bd69843317368d5a16e5f9f30088416751358c64"
        ],
        [
            "Lemma cyclotomic_monic z n : cyclotomic z n \\is monic.",
            "VernacStartTheoremProof",
            "98f116d2aeafbfe2a3a08c66336f3647c0a63540"
        ],
        [
            "exact: monic_prod_XsubC.",
            "VernacExtend",
            "ce637ff86bafca5d8359473e8c02af644dcbdc43"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma size_cyclotomic z n : size (cyclotomic z n) = (totient n).+1.",
            "VernacStartTheoremProof",
            "a343eaded7325e1055499ddf4399729060d1db21"
        ],
        [
            "rewrite /cyclotomic -big_filter filter_index_enum size_prod_XsubC; congr _.+1.",
            "VernacExtend",
            "a0279e71fd23ac6bde2b8b4402981a70ea719044"
        ],
        [
            "rewrite -cardE -sum1_card totient_count_coprime -big_mkcond big_mkord.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "by apply: eq_bigl => k; rewrite coprime_sym.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "End Ring.",
            "VernacEndSegment",
            "7b7590f6c3a2b9e01af4b1d22710ae6db4d7afe7"
        ],
        [
            "Lemma separable_Xn_sub_1 (R : idomainType) n : n%:R != 0 :> R -> @separable_poly R ('X^n - 1).",
            "VernacStartTheoremProof",
            "ede4e8276753d0618d4f7cab7ba4cd5461047c4f"
        ],
        [
            "case: n => [/eqP// | n nz_n]; rewrite /separable_poly linearB /=.",
            "VernacExtend",
            "90a2acb29b7a5304b0ab6ba5269c420638ddef63"
        ],
        [
            "rewrite derivC subr0 derivXn -scaler_nat coprimep_scaler //= exprS -scaleN1r.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "rewrite coprimep_sym coprimep_addl_mul coprimep_scaler ?coprimep1 //.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "by rewrite (signr_eq0 _ 1).",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Section Field.",
            "VernacBeginSection",
            "b5d51fbb732113d6302e934775363f2642ac9c0d"
        ],
        [
            "Variables (F : fieldType) (n : nat) (z : F).",
            "VernacAssumption",
            "10d47b5e5178a4f632eff15bde5dce94076d87a0"
        ],
        [
            "Hypothesis prim_z : n.-primitive_root z.",
            "VernacAssumption",
            "2ebc34201f460161ee867f5f26d9cfe23127b03c"
        ],
        [
            "Let n_gt0 := prim_order_gt0 prim_z.",
            "VernacDefinition",
            "6466fa7583ef1a734e5ca2a865053ed2bc3a84c5"
        ],
        [
            "Lemma root_cyclotomic x : root (cyclotomic z n) x = n.-primitive_root x.",
            "VernacStartTheoremProof",
            "aeaf7c1ace80fba607a52a4da85f2e793f6e5cd2"
        ],
        [
            "rewrite /cyclotomic -big_filter filter_index_enum.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "rewrite -(big_map _ xpredT (fun y => 'X - y%:P)) root_prod_XsubC.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "apply/imageP/idP=> [[k co_k_n ->] | prim_x].",
            "VernacExtend",
            "4bd6fa79b17bcd2bfb7af091fb325367a20385d6"
        ],
        [
            "by rewrite prim_root_exp_coprime.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "have [k Dx] := prim_rootP prim_z (prim_expr_order prim_x).",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "exists (Ordinal (ltn_pmod k n_gt0)) => /=.",
            "VernacExtend",
            "3c42b53d0efc26db114b00541ac5e7fcb29e6aeb"
        ],
        [
            "by rewrite unfold_in /= coprime_modl -(prim_root_exp_coprime k prim_z) -Dx.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "by rewrite prim_expr_mod.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma prod_cyclotomic : 'X^n - 1 = \\prod_(d <- divisors n) cyclotomic (z ^+ (n %/ d)) d.",
            "VernacStartTheoremProof",
            "c05971b7fd34471fa42884642b9667f33d2f011e"
        ],
        [
            "have in_d d: (d %| n)%N -> val (@inord n d) = d by move/dvdn_leq/inordK=> /= ->.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "have dv_n k: (n %/ gcdn k n %| n)%N.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "by rewrite -{3}(divnK (dvdn_gcdr k n)) dvdn_mulr.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "have [uDn _ inDn] := divisors_correct n_gt0.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "have defDn: divisors n = map val (map (@inord n) (divisors n)).",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "by rewrite -map_comp map_id_in // => d; rewrite inDn => /in_d.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "rewrite defDn big_map big_uniq /=; last first.",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "by rewrite -(map_inj_uniq val_inj) -defDn.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "pose h (k : 'I_n) : 'I_n.+1 := inord (n %/ gcdn k n).",
            "VernacExtend",
            "3c5f04de94609049d978298aa02ff35fb35ea7c7"
        ],
        [
            "rewrite -(factor_Xn_sub_1 prim_z) big_mkord.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "rewrite (partition_big h (dvdn^~ n)) /= => [|k _]; last by rewrite in_d ?dv_n.",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "apply: eq_big => d; first by rewrite -(mem_map val_inj) -defDn inDn.",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "set q := (n %/ d)%N => d_dv_n.",
            "VernacExtend",
            "3c42b53d0efc26db114b00541ac5e7fcb29e6aeb"
        ],
        [
            "have [q_gt0 d_gt0]: (0 < q /\\ 0 < d)%N by apply/andP; rewrite -muln_gt0 divnK.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "have fP (k : 'I_d): (q * k < n)%N by rewrite divn_mulAC ?ltn_divLR ?ltn_pmul2l.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "rewrite (reindex (fun k => Ordinal (fP k))); last first.",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "have f'P (k : 'I_n): (k %/ q < d)%N by rewrite ltn_divLR // mulnC divnK.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "exists (fun k => Ordinal (f'P k)) => [k _ | k /eqnP/=].",
            "VernacExtend",
            "3c42b53d0efc26db114b00541ac5e7fcb29e6aeb"
        ],
        [
            "by apply: val_inj; rewrite /= mulKn.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "rewrite in_d // => Dd; apply: val_inj; rewrite /= mulnC divnK // /q -Dd.",
            "VernacExtend",
            "01f04d3f5bba3b876eb4ec7b1c8f26d2e2cced77"
        ],
        [
            "by rewrite divnA ?mulKn ?dvdn_gcdl ?dvdn_gcdr.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "apply: eq_big => k; rewrite ?exprM // -val_eqE in_d //=.",
            "VernacExtend",
            "56c014161b39aecfb3c54301c2409dba4e8e1857"
        ],
        [
            "rewrite -eqn_mul ?dvdn_gcdr ?gcdn_gt0 ?n_gt0 ?orbT //.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "rewrite -[n in gcdn _ n](divnK d_dv_n) -muln_gcdr mulnCA mulnA divnK //.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "by rewrite mulnC eqn_mul // divnn n_gt0 eq_sym.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "End Field.",
            "VernacEndSegment",
            "a3b24fe94a35f8c814b540732719f98810a7a91d"
        ],
        [
            "End CyclotomicPoly.",
            "VernacEndSegment",
            "c681e1a3db326524341edef01d7c50d318484822"
        ],
        [
            "Local Notation ZtoQ := (intr : int -> rat).",
            "VernacSyntacticDefinition",
            "c34d7df6f6f06fe234c02ea031702940bfaebabc"
        ],
        [
            "Local Notation ZtoC := (intr : int -> algC).",
            "VernacSyntacticDefinition",
            "a19db6d8b2aa708c9cfc84784c43f4a468cd4268"
        ],
        [
            "Local Notation QtoC := (ratr : rat -> algC).",
            "VernacSyntacticDefinition",
            "e70ad9a1164cdaacbd24460c0933188b8f0c96e7"
        ],
        [
            "Local Notation intrp := (map_poly intr).",
            "VernacSyntacticDefinition",
            "63a4877da3f5cbac65596a0ecfcf1e3ed88990bf"
        ],
        [
            "Local Notation pZtoQ := (map_poly ZtoQ).",
            "VernacSyntacticDefinition",
            "cbed48c83552f3eb5804fe7e592e6d13be1b8b94"
        ],
        [
            "Local Notation pZtoC := (map_poly ZtoC).",
            "VernacSyntacticDefinition",
            "8d2ec9ab77e8c502a231d56826f25e600a5a4a06"
        ],
        [
            "Local Notation pQtoC := (map_poly ratr).",
            "VernacSyntacticDefinition",
            "5636bd38b330ad0c188fb8eaed286000e21cd854"
        ],
        [
            "Local Hint Resolve (@intr_inj [numDomainType of algC]) : core.",
            "VernacHints",
            "3adc8a23157b0b69218ba9919d67053563d301f8"
        ],
        [
            "Local Notation QtoC_M := (ratr_rmorphism [numFieldType of algC]).",
            "VernacSyntacticDefinition",
            "956ec880ef41528c2fd4ebcddad648959dff6ea6"
        ],
        [
            "Lemma C_prim_root_exists n : (n > 0)%N -> {z : algC | n.-primitive_root z}.",
            "VernacStartTheoremProof",
            "29aaa68446555a4bf274278e4a763c368517dd61"
        ],
        [
            "pose p : {poly algC} := 'X^n - 1; have [r Dp] := closed_field_poly_normal p.",
            "VernacExtend",
            "c09d1274557abc8857ed64eb3450db2da906c185"
        ],
        [
            "move=> n_gt0; apply/sigW; rewrite (monicP _) ?monic_Xn_sub_1 // scale1r in Dp.",
            "VernacExtend",
            "f7feb259d6220ca40e8a86b90bd06f137aa140ac"
        ],
        [
            "have rn1: all n.-unity_root r by apply/allP=> z; rewrite -root_prod_XsubC -Dp.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "have sz_r: (n < (size r).+1)%N.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "by rewrite -(size_prod_XsubC r id) -Dp size_Xn_sub_1.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "have [|z] := hasP (has_prim_root n_gt0 rn1 _ sz_r); last by exists z.",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "by rewrite -separable_prod_XsubC -Dp separable_Xn_sub_1 // pnatr_eq0 -lt0n.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Definition Cyclotomic n : {poly int} := let: exist z _ := C_prim_root_exists (ltn0Sn n.-1) in map_poly floorC (cyclotomic z n).",
            "VernacDefinition",
            "20a88bcfc473ce8879855ef7d4504ae2b1e4e6bf"
        ],
        [
            "Notation \"''Phi_' n\" := (Cyclotomic n) (at level 8, n at level 2, format \"''Phi_' n\").",
            "VernacNotation",
            "a3ac3a13eeb83341c71ed150aab4ab611cdb5645"
        ],
        [
            "Lemma Cyclotomic_monic n : 'Phi_n \\is monic.",
            "VernacStartTheoremProof",
            "31894d701f666916275aa8686bc1535be03bb723"
        ],
        [
            "rewrite /'Phi_n; case: (C_prim_root_exists _) => z /= _.",
            "VernacExtend",
            "712d339e99ee17eb7d5033e19ac614eb3ca6b532"
        ],
        [
            "rewrite monicE lead_coefE coef_map_id0 ?(int_algC_K 0) ?getCint0 //.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "by rewrite size_poly_eq -lead_coefE (monicP (cyclotomic_monic _ _)) (intCK 1).",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma Cintr_Cyclotomic n z : n.-primitive_root z -> pZtoC 'Phi_n = cyclotomic z n.",
            "VernacStartTheoremProof",
            "d37160a285d5c0ac7e1bef469acb2af942fdcb95"
        ],
        [
            "elim: {n}_.+1 {-2}n z (ltnSn n) => // m IHm n z0 le_mn prim_z0.",
            "VernacExtend",
            "e686a1895f1799b840b76242f931100819a9ad6c"
        ],
        [
            "rewrite /'Phi_n; case: (C_prim_root_exists _) => z /=.",
            "VernacExtend",
            "712d339e99ee17eb7d5033e19ac614eb3ca6b532"
        ],
        [
            "have n_gt0 := prim_order_gt0 prim_z0; rewrite prednK // => prim_z.",
            "VernacExtend",
            "8431fc4d2460f7908baa11892c1b26797a3f17b8"
        ],
        [
            "have [uDn _ inDn] := divisors_correct n_gt0.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "pose q := \\prod_(d <- rem n (divisors n)) 'Phi_d.",
            "VernacExtend",
            "3c5f04de94609049d978298aa02ff35fb35ea7c7"
        ],
        [
            "have mon_q: q \\is monic by apply: monic_prod => d _; apply: Cyclotomic_monic.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "have defXn1: cyclotomic z n * pZtoC q = 'X^n - 1.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "rewrite (prod_cyclotomic prim_z) (big_rem n) ?inDn //=.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "rewrite divnn n_gt0 rmorph_prod /=; congr (_ * _).",
            "VernacExtend",
            "a0279e71fd23ac6bde2b8b4402981a70ea719044"
        ],
        [
            "apply: eq_big_seq => d; rewrite mem_rem_uniq ?inE //= inDn => /andP[n'd ddvn].",
            "VernacExtend",
            "5fce7e5361004176d6b434b36b4623c7387f70bb"
        ],
        [
            "rewrite -IHm ?dvdn_prim_root // -ltnS (leq_ltn_trans _ le_mn) //.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "by rewrite ltn_neqAle n'd dvdn_leq.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "have mapXn1 (R1 R2 : ringType) (f : {rmorphism R1 -> R2}): map_poly f ('X^n - 1) = 'X^n - 1.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "-",
            "VernacBullet",
            "581cab4bf49fa4b495e569bbda96fc8d28fddcc0"
        ],
        [
            "by rewrite rmorphB /= rmorph1 map_polyXn.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "have nz_q: pZtoC q != 0.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "by rewrite -size_poly_eq0 size_map_inj_poly // size_poly_eq0 monic_neq0.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "have [r def_zn]: exists r, cyclotomic z n = pZtoC r.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "have defZtoC: ZtoC =1 QtoC \\o ZtoQ by move=> a; rewrite /= rmorph_int.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "have /dvdpP[r0 Dr0]: map_poly ZtoQ q %| 'X^n - 1.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "rewrite -(dvdp_map QtoC_M) mapXn1 -map_poly_comp.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "by rewrite -(eq_map_poly defZtoC) -defXn1 dvdp_mull.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "have [r [a nz_a Dr]] := rat_poly_scale r0.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "exists (zprimitive r); apply: (mulIf nz_q); rewrite defXn1.",
            "VernacExtend",
            "f65ba03ba9c319255cadb09bdd276bfc36e4b6e7"
        ],
        [
            "rewrite -rmorphM -(zprimitive_monic mon_q) -zprimitiveM /=.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "have ->: r * q = a *: ('X^n - 1).",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "apply: (map_inj_poly (intr_inj : injective ZtoQ)) => //.",
            "VernacExtend",
            "4bd6fa79b17bcd2bfb7af091fb325367a20385d6"
        ],
        [
            "rewrite map_polyZ mapXn1 Dr0 Dr -scalerAl scalerKV ?intr_eq0 //.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "by rewrite rmorphM.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "by rewrite zprimitiveZ // zprimitive_monic ?monic_Xn_sub_1 ?mapXn1.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "rewrite floorCpK; last by apply/polyOverP=> i; rewrite def_zn coef_map Cint_int.",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "pose f e (k : 'I_n) := Ordinal (ltn_pmod (k * e) n_gt0).",
            "VernacExtend",
            "3c5f04de94609049d978298aa02ff35fb35ea7c7"
        ],
        [
            "have [e Dz0] := prim_rootP prim_z (prim_expr_order prim_z0).",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "have co_e_n: coprime e n by rewrite -(prim_root_exp_coprime e prim_z) -Dz0.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "have injf: injective (f e).",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "apply: can_inj (f (egcdn e n).1) _ => k; apply: val_inj => /=.",
            "VernacExtend",
            "8d9dae45eeb3a769b8a865cef8ae476451f63802"
        ],
        [
            "rewrite modnMml -mulnA -modnMmr -{1}(mul1n e).",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "by rewrite (chinese_modr co_e_n 0) modnMmr muln1 modn_small.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "rewrite [_ n](reindex_inj injf); apply: eq_big => k /=.",
            "VernacExtend",
            "634a7639ed2fb7caf62757f84400927f5829b7d5"
        ],
        [
            "by rewrite coprime_modl coprime_mull co_e_n andbT.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "by rewrite prim_expr_mod // mulnC exprM -Dz0.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma prod_Cyclotomic n : (n > 0)%N -> \\prod_(d <- divisors n) 'Phi_d = 'X^n - 1.",
            "VernacStartTheoremProof",
            "413bff7bac1df0908fa042f4f5b18c4b80132885"
        ],
        [
            "move=> n_gt0; have [z prim_z] := C_prim_root_exists n_gt0.",
            "VernacExtend",
            "ccd83c252dcbae3d56f3d057fcb8217878b51901"
        ],
        [
            "apply: (map_inj_poly (intr_inj : injective ZtoC)) => //.",
            "VernacExtend",
            "4bd6fa79b17bcd2bfb7af091fb325367a20385d6"
        ],
        [
            "rewrite rmorphB rmorph1 rmorph_prod /= map_polyXn (prod_cyclotomic prim_z).",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "apply: eq_big_seq => d; rewrite -dvdn_divisors // => d_dv_n.",
            "VernacExtend",
            "5fce7e5361004176d6b434b36b4623c7387f70bb"
        ],
        [
            "by rewrite -Cintr_Cyclotomic ?dvdn_prim_root.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma Cyclotomic0 : 'Phi_0 = 1.",
            "VernacStartTheoremProof",
            "16879eadf83a4fa0c3c3513eae64d503bd97d9d8"
        ],
        [
            "rewrite /'Phi_0; case: (C_prim_root_exists _) => z /= _.",
            "VernacExtend",
            "712d339e99ee17eb7d5033e19ac614eb3ca6b532"
        ],
        [
            "by rewrite -[1]polyseqK /cyclotomic big_ord0 map_polyE !polyseq1 /= (intCK 1).",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma size_Cyclotomic n : size 'Phi_n = (totient n).+1.",
            "VernacStartTheoremProof",
            "67deca0c61fe0d21110965879eb6fa54cf8dfc09"
        ],
        [
            "have [-> | n_gt0] := posnP n; first by rewrite Cyclotomic0 polyseq1.",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "have [z prim_z] := C_prim_root_exists n_gt0.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "rewrite -(size_map_inj_poly (can_inj intCK)) //.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "rewrite (Cintr_Cyclotomic prim_z) -[_ n]big_filter filter_index_enum.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "rewrite size_prod_XsubC -cardE totient_count_coprime big_mkord -big_mkcond /=.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "by rewrite (eq_card (fun _ => coprime_sym _ _)) sum1_card.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma minCpoly_cyclotomic n z : n.-primitive_root z -> minCpoly z = cyclotomic z n.",
            "VernacStartTheoremProof",
            "283bffdbba7d75634e6ee9d2fa94de1d09c14012"
        ],
        [
            "move=> prim_z; have n_gt0 := prim_order_gt0 prim_z.",
            "VernacExtend",
            "ccd83c252dcbae3d56f3d057fcb8217878b51901"
        ],
        [
            "have Dpz := Cintr_Cyclotomic prim_z; set pz := cyclotomic z n in Dpz *.",
            "VernacExtend",
            "81881a093b2294c76be3b432fbe83612064d7bc9"
        ],
        [
            "have mon_pz: pz \\is monic by apply: cyclotomic_monic.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "have pz0: root pz z by rewrite root_cyclotomic.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "have [pf [Dpf mon_pf] dv_pf] := minCpolyP z.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "have /dvdpP_rat_int[f [af nz_af Df] [g /esym Dfg]]: pf %| pZtoQ 'Phi_n.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "rewrite -dv_pf; congr (root _ z): pz0; rewrite -Dpz -map_poly_comp.",
            "VernacExtend",
            "9d78117f9fa00d8b79d08aff717709f8d084ba84"
        ],
        [
            "by apply: eq_map_poly => b; rewrite /= rmorph_int.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "without loss{nz_af} [mon_f mon_g]: af f g Df Dfg / f \\is monic /\\ g \\is monic.",
            "VernacExtend",
            "87d5e7b04148ee8f2e4efcc847e0dfadae0aa4cb"
        ],
        [
            "move=> IH; pose cf := lead_coef f; pose cg := lead_coef g.",
            "VernacExtend",
            "81927515fc3ecfba885b46cf7f9013852021d404"
        ],
        [
            "have cfg1: cf * cg = 1.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "by rewrite -lead_coefM Dfg (monicP (Cyclotomic_monic n)).",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "apply: (IH (af *~ cf) (f *~ cg) (g *~ cf)).",
            "VernacExtend",
            "4bd6fa79b17bcd2bfb7af091fb325367a20385d6"
        ],
        [
            "-",
            "VernacBullet",
            "581cab4bf49fa4b495e569bbda96fc8d28fddcc0"
        ],
        [
            "by rewrite rmorphMz -scalerMzr scalerMzl -mulrzA cfg1.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "-",
            "VernacBullet",
            "581cab4bf49fa4b495e569bbda96fc8d28fddcc0"
        ],
        [
            "by rewrite mulrzAl mulrzAr -mulrzA cfg1.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "by rewrite !(intz, =^~ scaler_int) !monicE !lead_coefZ mulrC cfg1.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "have{af Df} Df: pQtoC pf = pZtoC f.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "have:= congr1 lead_coef Df.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "rewrite lead_coefZ lead_coef_map_inj //; last exact: intr_inj.",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "rewrite !(monicP _) // mulr1 Df => <-; rewrite scale1r -map_poly_comp.",
            "VernacExtend",
            "82d53976234637e3f0907eb36cddf61d028c6306"
        ],
        [
            "by apply: eq_map_poly => b; rewrite /= rmorph_int.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "have [/size1_polyC Dg | g_gt1] := leqP (size g) 1.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "rewrite monicE Dg lead_coefC in mon_g.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "by rewrite -Dpz -Dfg Dg (eqP mon_g) mulr1 Dpf.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "have [zk gzk0]: exists zk, root (pZtoC g) zk.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "have [rg] := closed_field_poly_normal (pZtoC g).",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "rewrite lead_coef_map_inj // (monicP mon_g) scale1r => Dg.",
            "VernacExtend",
            "3c42b53d0efc26db114b00541ac5e7fcb29e6aeb"
        ],
        [
            "rewrite -(size_map_inj_poly (can_inj intCK)) // Dg in g_gt1.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "rewrite size_prod_XsubC in g_gt1.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "by exists rg`_0; rewrite Dg root_prod_XsubC mem_nth.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "have [k cokn Dzk]: exists2 k, coprime k n & zk = z ^+ k.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "have: root pz zk by rewrite -Dpz -Dfg rmorphM rootM gzk0 orbT.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "rewrite -[pz]big_filter -(big_map _ xpredT (fun a => 'X - a%:P)).",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "by rewrite root_prod_XsubC => /imageP[k]; exists k.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "have co_fg (R : idomainType): n%:R != 0 :> R -> @coprimep R (intrp f) (intrp g).",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "move=> nz_n; have: separable_poly (intrp ('X^n - 1) : {poly R}).",
            "VernacExtend",
            "ccd83c252dcbae3d56f3d057fcb8217878b51901"
        ],
        [
            "by rewrite rmorphB rmorph1 /= map_polyXn separable_Xn_sub_1.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "rewrite -prod_Cyclotomic // (big_rem n) -?dvdn_divisors //= -Dfg.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "by rewrite !rmorphM /= !separable_mul => /and3P[] /and3P[].",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "suffices fzk0: root (pZtoC f) zk.",
            "VernacExtend",
            "290ed488b5562e885aa2cac56f3a69b4faa0eaa6"
        ],
        [
            "have [] // := negP (coprimep_root (co_fg _ _) fzk0).",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "by rewrite pnatr_eq0 -lt0n.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "move: gzk0 cokn; rewrite {zk}Dzk; elim: {k}_.+1 {-2}k (ltnSn k) => // m IHm k.",
            "VernacExtend",
            "9d0009e9024dcd45b101a0b7756bd6217d27133c"
        ],
        [
            "rewrite ltnS => lekm gzk0 cokn.",
            "VernacExtend",
            "3c42b53d0efc26db114b00541ac5e7fcb29e6aeb"
        ],
        [
            "have [|k_gt1] := leqP k 1; last have [p p_pr /dvdnP[k1 Dk]] := pdivP k_gt1.",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "rewrite -[leq k 1](mem_iota 0 2) !inE => /pred2P[k0 | ->]; last first.",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "by rewrite -Df dv_pf.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "have /eqP := size_Cyclotomic n; rewrite -Dfg size_Mmonic ?monic_neq0 //.",
            "VernacExtend",
            "aa9d5fbc682ed874cd64b2543ca6c859b978e924"
        ],
        [
            "rewrite k0 /coprime gcd0n in cokn; rewrite (eqP cokn).",
            "VernacExtend",
            "2194fcb4d6d52cbae24a29f7ff14a3997f1912fd"
        ],
        [
            "rewrite -(size_map_inj_poly (can_inj intCK)) // -Df -Dpf.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "by rewrite -(subnKC g_gt1) -(subnKC (size_minCpoly z)) !addnS.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "move: cokn; rewrite Dk coprime_mull => /andP[cok1n].",
            "VernacExtend",
            "8261237f0cda1915a4077c28869831c5329103ce"
        ],
        [
            "rewrite prime_coprime // (dvdn_charf (char_Fp p_pr)) => /co_fg {co_fg}.",
            "VernacExtend",
            "3c42b53d0efc26db114b00541ac5e7fcb29e6aeb"
        ],
        [
            "have charFpX: p \\in [char {poly 'F_p}].",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "by rewrite (rmorph_char (polyC_rmorphism _)) ?char_Fp.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "rewrite -(coprimep_pexpr _ _ (prime_gt0 p_pr)) -(Frobenius_autE charFpX).",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "rewrite -[g]comp_polyXr map_comp_poly -horner_map /= Frobenius_autE -rmorphX.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "rewrite -!map_poly_comp (@eq_map_poly _ _ _ (polyC \\o *~%R 1)); last first.",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "by move=> a; rewrite /= !rmorph_int.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "rewrite map_poly_comp -[_.[_]]map_comp_poly /= => co_fg.",
            "VernacExtend",
            "3c42b53d0efc26db114b00541ac5e7fcb29e6aeb"
        ],
        [
            "suffices: coprimep (pZtoC f) (pZtoC (g \\Po 'X^p)).",
            "VernacExtend",
            "290ed488b5562e885aa2cac56f3a69b4faa0eaa6"
        ],
        [
            "move/coprimep_root=> /=/(_ (z ^+ k1))/implyP.",
            "VernacExtend",
            "b1b2cb7a3a617cba67460b4eca1f04de3c1cc716"
        ],
        [
            "rewrite map_comp_poly map_polyXn horner_comp hornerXn.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "rewrite -exprM -Dk [_ == 0]gzk0 implybF => /negP[].",
            "VernacExtend",
            "3c42b53d0efc26db114b00541ac5e7fcb29e6aeb"
        ],
        [
            "have: root pz (z ^+ k1).",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "by rewrite root_cyclotomic // prim_root_exp_coprime.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "rewrite -Dpz -Dfg rmorphM rootM => /orP[] //= /IHm-> //.",
            "VernacExtend",
            "3c42b53d0efc26db114b00541ac5e7fcb29e6aeb"
        ],
        [
            "rewrite (leq_trans _ lekm) // -[k1]muln1 Dk ltn_pmul2l ?prime_gt1 //.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "by have:= ltnW k_gt1; rewrite Dk muln_gt0 => /andP[].",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "suffices: coprimep f (g \\Po 'X^p).",
            "VernacExtend",
            "290ed488b5562e885aa2cac56f3a69b4faa0eaa6"
        ],
        [
            "case/Bezout_coprimepP=> [[u v]]; rewrite -size_poly_eq1.",
            "VernacExtend",
            "90a2acb29b7a5304b0ab6ba5269c420638ddef63"
        ],
        [
            "rewrite -(size_map_inj_poly (can_inj intCK)) // rmorphD !rmorphM /=.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "rewrite size_poly_eq1 => {co_fg}co_fg; apply/Bezout_coprimepP.",
            "VernacExtend",
            "2855640502da0a3b2cfdfcd02ea9662c049d9a24"
        ],
        [
            "by exists (pZtoC u, pZtoC v).",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "apply: contraLR co_fg => /coprimepPn[|d]; first exact: monic_neq0.",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "rewrite andbC -size_poly_eq1 dvdp_gcd => /and3P[sz_d].",
            "VernacExtend",
            "3c42b53d0efc26db114b00541ac5e7fcb29e6aeb"
        ],
        [
            "pose d1 := zprimitive d.",
            "VernacExtend",
            "3c5f04de94609049d978298aa02ff35fb35ea7c7"
        ],
        [
            "have d_dv_mon h: d %| h -> h \\is monic -> exists h1, h = d1 * h1.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "case/Pdiv.Idomain.dvdpP=> [[c h1] /= nz_c Dh] mon_h; exists (zprimitive h1).",
            "VernacExtend",
            "682a104b21a2a9472ade8646172ab14f4259f172"
        ],
        [
            "by rewrite -zprimitiveM mulrC -Dh zprimitiveZ ?zprimitive_monic.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "case/d_dv_mon=> // f1 Df1 /d_dv_mon[|f2 ->].",
            "VernacExtend",
            "e00fff71ff314c991514fc71c41a3556702e444a"
        ],
        [
            "rewrite monicE lead_coefE size_comp_poly size_polyXn /=.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "rewrite comp_polyE coef_sum polySpred ?monic_neq0 //= mulnC.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "rewrite big_ord_recr /= -lead_coefE (monicP mon_g) scale1r.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "rewrite -exprM coefXn eqxx big1 ?add0r // => i _.",
            "VernacExtend",
            "3c42b53d0efc26db114b00541ac5e7fcb29e6aeb"
        ],
        [
            "rewrite coefZ -exprM coefXn eqn_pmul2l ?prime_gt0 //.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "by rewrite eqn_leq leqNgt ltn_ord mulr0.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "have monFp h: h \\is monic -> size (map_poly intr h) = size h.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "by move=> mon_h; rewrite size_poly_eq // -lead_coefE (monicP mon_h) oner_eq0.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "apply/coprimepPn; last exists (map_poly intr d1).",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "by rewrite -size_poly_eq0 monFp // size_poly_eq0 monic_neq0.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "rewrite Df1 !rmorphM dvdp_gcd !dvdp_mulr //= -size_poly_eq1.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "rewrite monFp ?size_zprimitive //.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "rewrite monicE [_ d1]intEsg sgz_lead_primitive -zprimitive_eq0 -/d1.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "rewrite -lead_coef_eq0 -absz_eq0.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "have/esym/eqP := congr1 (absz \\o lead_coef) Df1.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "by rewrite /= (monicP mon_f) lead_coefM abszM muln_eq1 => /andP[/eqP-> _].",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ]
    ],
    "proofs": [
        {
            "name": "cyclotomic_monic",
            "line_nb": 15,
            "steps": [
                {
                    "command": [
                        "exact: monic_prod_XsubC.",
                        "VernacExtend",
                        "ce637ff86bafca5d8359473e8c02af644dcbdc43"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "separable_Xn_sub_1",
            "line_nb": 24,
            "steps": [
                {
                    "command": [
                        "case: n => [/eqP// | n nz_n]; rewrite /separable_poly linearB /=.",
                        "VernacExtend",
                        "90a2acb29b7a5304b0ab6ba5269c420638ddef63"
                    ]
                },
                {
                    "command": [
                        "rewrite derivC subr0 derivXn -scaler_nat coprimep_scaler //= exprS -scaleN1r.",
                        "VernacExtend",
                        "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
                    ]
                },
                {
                    "command": [
                        "rewrite coprimep_sym coprimep_addl_mul coprimep_scaler ?coprimep1 //.",
                        "VernacExtend",
                        "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
                    ]
                },
                {
                    "command": [
                        "by rewrite (signr_eq0 _ 1).",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "root_cyclotomic",
            "line_nb": 34,
            "steps": [
                {
                    "command": [
                        "rewrite /cyclotomic -big_filter filter_index_enum.",
                        "VernacExtend",
                        "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
                    ]
                },
                {
                    "command": [
                        "rewrite -(big_map _ xpredT (fun y => 'X - y%:P)) root_prod_XsubC.",
                        "VernacExtend",
                        "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
                    ]
                },
                {
                    "command": [
                        "apply/imageP/idP=> [[k co_k_n ->] | prim_x].",
                        "VernacExtend",
                        "4bd6fa79b17bcd2bfb7af091fb325367a20385d6"
                    ]
                },
                {
                    "command": [
                        "by rewrite prim_root_exp_coprime.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "have [k Dx] := prim_rootP prim_z (prim_expr_order prim_x).",
                        "VernacExtend",
                        "406cde1174359c53bf162a2a18c4eede395555f9"
                    ]
                },
                {
                    "command": [
                        "exists (Ordinal (ltn_pmod k n_gt0)) => /=.",
                        "VernacExtend",
                        "3c42b53d0efc26db114b00541ac5e7fcb29e6aeb"
                    ]
                },
                {
                    "command": [
                        "by rewrite unfold_in /= coprime_modl -(prim_root_exp_coprime k prim_z) -Dx.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "by rewrite prim_expr_mod.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "prod_cyclotomic",
            "line_nb": 44,
            "steps": [
                {
                    "command": [
                        "have in_d d: (d %| n)%N -> val (@inord n d) = d by move/dvdn_leq/inordK=> /= ->.",
                        "VernacExtend",
                        "406cde1174359c53bf162a2a18c4eede395555f9"
                    ]
                },
                {
                    "command": [
                        "have dv_n k: (n %/ gcdn k n %| n)%N.",
                        "VernacExtend",
                        "406cde1174359c53bf162a2a18c4eede395555f9"
                    ]
                },
                {
                    "command": [
                        "by rewrite -{3}(divnK (dvdn_gcdr k n)) dvdn_mulr.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "have [uDn _ inDn] := divisors_correct n_gt0.",
                        "VernacExtend",
                        "406cde1174359c53bf162a2a18c4eede395555f9"
                    ]
                },
                {
                    "command": [
                        "have defDn: divisors n = map val (map (@inord n) (divisors n)).",
                        "VernacExtend",
                        "406cde1174359c53bf162a2a18c4eede395555f9"
                    ]
                },
                {
                    "command": [
                        "by rewrite -map_comp map_id_in // => d; rewrite inDn => /in_d.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "rewrite defDn big_map big_uniq /=; last first.",
                        "VernacExtend",
                        "3763a4b8db689af316a7372b722bb29806ab4fb6"
                    ]
                },
                {
                    "command": [
                        "by rewrite -(map_inj_uniq val_inj) -defDn.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "pose h (k : 'I_n) : 'I_n.+1 := inord (n %/ gcdn k n).",
                        "VernacExtend",
                        "3c5f04de94609049d978298aa02ff35fb35ea7c7"
                    ]
                },
                {
                    "command": [
                        "rewrite -(factor_Xn_sub_1 prim_z) big_mkord.",
                        "VernacExtend",
                        "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
                    ]
                },
                {
                    "command": [
                        "rewrite (partition_big h (dvdn^~ n)) /= => [|k _]; last by rewrite in_d ?dv_n.",
                        "VernacExtend",
                        "3763a4b8db689af316a7372b722bb29806ab4fb6"
                    ]
                },
                {
                    "command": [
                        "apply: eq_big => d; first by rewrite -(mem_map val_inj) -defDn inDn.",
                        "VernacExtend",
                        "3763a4b8db689af316a7372b722bb29806ab4fb6"
                    ]
                },
                {
                    "command": [
                        "set q := (n %/ d)%N => d_dv_n.",
                        "VernacExtend",
                        "3c42b53d0efc26db114b00541ac5e7fcb29e6aeb"
                    ]
                },
                {
                    "command": [
                        "have [q_gt0 d_gt0]: (0 < q /\\ 0 < d)%N by apply/andP; rewrite -muln_gt0 divnK.",
                        "VernacExtend",
                        "406cde1174359c53bf162a2a18c4eede395555f9"
                    ]
                },
                {
                    "command": [
                        "have fP (k : 'I_d): (q * k < n)%N by rewrite divn_mulAC ?ltn_divLR ?ltn_pmul2l.",
                        "VernacExtend",
                        "406cde1174359c53bf162a2a18c4eede395555f9"
                    ]
                },
                {
                    "command": [
                        "rewrite (reindex (fun k => Ordinal (fP k))); last first.",
                        "VernacExtend",
                        "3763a4b8db689af316a7372b722bb29806ab4fb6"
                    ]
                },
                {
                    "command": [
                        "have f'P (k : 'I_n): (k %/ q < d)%N by rewrite ltn_divLR // mulnC divnK.",
                        "VernacExtend",
                        "406cde1174359c53bf162a2a18c4eede395555f9"
                    ]
                },
                {
                    "command": [
                        "exists (fun k => Ordinal (f'P k)) => [k _ | k /eqnP/=].",
                        "VernacExtend",
                        "3c42b53d0efc26db114b00541ac5e7fcb29e6aeb"
                    ]
                },
                {
                    "command": [
                        "by apply: val_inj; rewrite /= mulKn.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "rewrite in_d // => Dd; apply: val_inj; rewrite /= mulnC divnK // /q -Dd.",
                        "VernacExtend",
                        "01f04d3f5bba3b876eb4ec7b1c8f26d2e2cced77"
                    ]
                },
                {
                    "command": [
                        "by rewrite divnA ?mulKn ?dvdn_gcdl ?dvdn_gcdr.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "apply: eq_big => k; rewrite ?exprM // -val_eqE in_d //=.",
                        "VernacExtend",
                        "56c014161b39aecfb3c54301c2409dba4e8e1857"
                    ]
                },
                {
                    "command": [
                        "rewrite -eqn_mul ?dvdn_gcdr ?gcdn_gt0 ?n_gt0 ?orbT //.",
                        "VernacExtend",
                        "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
                    ]
                },
                {
                    "command": [
                        "rewrite -[n in gcdn _ n](divnK d_dv_n) -muln_gcdr mulnCA mulnA divnK //.",
                        "VernacExtend",
                        "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
                    ]
                },
                {
                    "command": [
                        "by rewrite mulnC eqn_mul // divnn n_gt0 eq_sym.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "C_prim_root_exists",
            "line_nb": 82,
            "steps": [
                {
                    "command": [
                        "pose p : {poly algC} := 'X^n - 1; have [r Dp] := closed_field_poly_normal p.",
                        "VernacExtend",
                        "c09d1274557abc8857ed64eb3450db2da906c185"
                    ]
                },
                {
                    "command": [
                        "move=> n_gt0; apply/sigW; rewrite (monicP _) ?monic_Xn_sub_1 // scale1r in Dp.",
                        "VernacExtend",
                        "f7feb259d6220ca40e8a86b90bd06f137aa140ac"
                    ]
                },
                {
                    "command": [
                        "have rn1: all n.-unity_root r by apply/allP=> z; rewrite -root_prod_XsubC -Dp.",
                        "VernacExtend",
                        "406cde1174359c53bf162a2a18c4eede395555f9"
                    ]
                },
                {
                    "command": [
                        "have sz_r: (n < (size r).+1)%N.",
                        "VernacExtend",
                        "406cde1174359c53bf162a2a18c4eede395555f9"
                    ]
                },
                {
                    "command": [
                        "by rewrite -(size_prod_XsubC r id) -Dp size_Xn_sub_1.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "have [|z] := hasP (has_prim_root n_gt0 rn1 _ sz_r); last by exists z.",
                        "VernacExtend",
                        "3763a4b8db689af316a7372b722bb29806ab4fb6"
                    ]
                },
                {
                    "command": [
                        "by rewrite -separable_prod_XsubC -Dp separable_Xn_sub_1 // pnatr_eq0 -lt0n.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "Cyclotomic_monic",
            "line_nb": 93,
            "steps": [
                {
                    "command": [
                        "rewrite /'Phi_n; case: (C_prim_root_exists _) => z /= _.",
                        "VernacExtend",
                        "712d339e99ee17eb7d5033e19ac614eb3ca6b532"
                    ]
                },
                {
                    "command": [
                        "rewrite monicE lead_coefE coef_map_id0 ?(int_algC_K 0) ?getCint0 //.",
                        "VernacExtend",
                        "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
                    ]
                },
                {
                    "command": [
                        "by rewrite size_poly_eq -lead_coefE (monicP (cyclotomic_monic _ _)) (intCK 1).",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "Cyclotomic0",
            "line_nb": 148,
            "steps": [
                {
                    "command": [
                        "rewrite /'Phi_0; case: (C_prim_root_exists _) => z /= _.",
                        "VernacExtend",
                        "712d339e99ee17eb7d5033e19ac614eb3ca6b532"
                    ]
                },
                {
                    "command": [
                        "by rewrite -[1]polyseqK /cyclotomic big_ord0 map_polyE !polyseq1 /= (intCK 1).",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "size_Cyclotomic",
            "line_nb": 152,
            "steps": [
                {
                    "command": [
                        "have [-> | n_gt0] := posnP n; first by rewrite Cyclotomic0 polyseq1.",
                        "VernacExtend",
                        "3763a4b8db689af316a7372b722bb29806ab4fb6"
                    ]
                },
                {
                    "command": [
                        "have [z prim_z] := C_prim_root_exists n_gt0.",
                        "VernacExtend",
                        "406cde1174359c53bf162a2a18c4eede395555f9"
                    ]
                },
                {
                    "command": [
                        "rewrite -(size_map_inj_poly (can_inj intCK)) //.",
                        "VernacExtend",
                        "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
                    ]
                },
                {
                    "command": [
                        "rewrite (Cintr_Cyclotomic prim_z) -[_ n]big_filter filter_index_enum.",
                        "VernacExtend",
                        "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
                    ]
                },
                {
                    "command": [
                        "rewrite size_prod_XsubC -cardE totient_count_coprime big_mkord -big_mkcond /=.",
                        "VernacExtend",
                        "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
                    ]
                },
                {
                    "command": [
                        "by rewrite (eq_card (fun _ => coprime_sym _ _)) sum1_card.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        }
    ]
}