{
    "filename": "mathcomp/field/fieldext.v",
    "coq_project": "math-comp",
    "vernac_cmds": [
        [
            "Require Import mathcomp.ssreflect.ssreflect.",
            "VernacRequire",
            "85e251063dc2b5a9653f7bb76dcd176ed36b42a9"
        ],
        [
            "From mathcomp Require Import ssrfun ssrbool eqtype ssrnat seq div choice fintype.",
            "VernacRequire",
            "7c784b1aea1e319a7a5f144543a372b8c264860e"
        ],
        [
            "From mathcomp Require Import tuple finfun bigop ssralg finalg zmodp matrix vector falgebra.",
            "VernacRequire",
            "53cab03d9be1c42c33ff553cd4245e2418bfcea5"
        ],
        [
            "From mathcomp Require Import poly polydiv mxpoly generic_quotient.",
            "VernacRequire",
            "1de7cdc11a9b172dbd6be43fcbde9ada68b03652"
        ],
        [
            "Set Implicit Arguments.",
            "VernacSetOption",
            "9e84ff8896f028601d8aded48c1d4aebe60aa584"
        ],
        [
            "Unset Strict Implicit.",
            "VernacUnsetOption",
            "2842adaf6959318f2042805935c46f513bdc0348"
        ],
        [
            "Unset Printing Implicit Defensive.",
            "VernacUnsetOption",
            "444e5f0be4b25d9b1fd556943a447ec10046d151"
        ],
        [
            "Local Open Scope ring_scope.",
            "VernacOpenCloseScope",
            "fb9da4a291533574d328be8c8a69d90a14641928"
        ],
        [
            "Import GRing.Theory.",
            "VernacImport",
            "a0fcf55540300b9b0e54bd28a113c5228ff530f4"
        ],
        [
            "Module FieldExt.",
            "VernacDefineModule",
            "9e28c177480ef3a59608bf3a22170405b3e95146"
        ],
        [
            "Import GRing.",
            "VernacImport",
            "bc56e56cee30c43a7c0faff74a6b6361f835ebb3"
        ],
        [
            "Section FieldExt.",
            "VernacBeginSection",
            "e379432fa2e165a61336b19df129695cdcaadd6c"
        ],
        [
            "Variable R : ringType.",
            "VernacAssumption",
            "103955c3e16ede32f173514da95e3006926aeccd"
        ],
        [
            "Record class_of T := Class { base : Falgebra.class_of R T; comm_ext : commutative (Ring.mul base); idomain_ext : IntegralDomain.axiom (Ring.Pack base); field_ext : Field.mixin_of (UnitRing.Pack base) }.",
            "VernacInductive",
            "c68327a397f1672d90ee948ba8a854c671d9b45b"
        ],
        [
            "Local Coercion base : class_of >-> Falgebra.class_of.",
            "VernacCoercion",
            "59fa6f3271f68c625404465d526d4652cd96af41"
        ],
        [
            "Section Bases.",
            "VernacBeginSection",
            "eb30471e0bc31d72db91cc248ee584c6f9877422"
        ],
        [
            "Variables (T : Type) (c : class_of T).",
            "VernacAssumption",
            "59ce80be3b27a37cdbac87d0c50560de2516544c"
        ],
        [
            "Definition base1 := ComRing.Class (@comm_ext T c).",
            "VernacDefinition",
            "d5991b4f9cfe77249d309efa738adbe73dd2ea7b"
        ],
        [
            "Definition base2 := @ComUnitRing.Class T base1 c.",
            "VernacDefinition",
            "b52f5ec36862e1d4be39acde99584a81ca0da5f5"
        ],
        [
            "Definition base3 := @IntegralDomain.Class T base2 (@idomain_ext T c).",
            "VernacDefinition",
            "8c4acc3fd4bc7d40d1ff984686330d8895580fc1"
        ],
        [
            "Definition base4 := @Field.Class T base3 (@field_ext T c).",
            "VernacDefinition",
            "835ff6f9807d701972424a4a0a096b14343f0b76"
        ],
        [
            "End Bases.",
            "VernacEndSegment",
            "fb5eb55eceb9d3851ec0de25f908ba9f1b659384"
        ],
        [
            "Local Coercion base1 : class_of >-> ComRing.class_of.",
            "VernacCoercion",
            "ab0819741f632df15b6036aa5156abb2b2602a6c"
        ],
        [
            "Local Coercion base2 : class_of >-> ComUnitRing.class_of.",
            "VernacCoercion",
            "066c53e8d28a32362fc1cf95de246898cdf0c8b7"
        ],
        [
            "Local Coercion base3 : class_of >-> IntegralDomain.class_of.",
            "VernacCoercion",
            "e851ac72e1b81997c8393c1e8671865351cdfb5d"
        ],
        [
            "Local Coercion base4 : class_of >-> Field.class_of.",
            "VernacCoercion",
            "e05659d52c49f427d332885e606509422087ada0"
        ],
        [
            "Structure type (phR : phant R) := Pack {sort; _ : class_of sort}.",
            "VernacInductive",
            "78bfdb22887f748fe58a15d412ea69b6a323083f"
        ],
        [
            "Local Coercion sort : type >-> Sortclass.",
            "VernacCoercion",
            "e4478cd37693106f84ed020bd073c4970dc87530"
        ],
        [
            "Variables (phR : phant R) (T : Type) (cT : type phR).",
            "VernacAssumption",
            "c29c1b47135afbce9a566505b9ed44f41969b316"
        ],
        [
            "Definition class := let: Pack _ c := cT return class_of cT in c.",
            "VernacDefinition",
            "037d2d3a3fb5f93be0dcb742c7cc8b0f16e89227"
        ],
        [
            "Let xT := let: Pack T _ := cT in T.",
            "VernacDefinition",
            "0a87c77e3a5ac8febf0910b95d7b998b7cb9cf6d"
        ],
        [
            "Notation xclass := (class : class_of xT).",
            "VernacSyntacticDefinition",
            "e136614fedd7b331a23b54adad5b0bce11895ed4"
        ],
        [
            "Definition pack := fun (bT : Falgebra.type phR) b & phant_id (Falgebra.class bT : Falgebra.class_of R bT) (b : Falgebra.class_of R T) => fun mT Cm IDm Fm & phant_id (Field.class mT) (@Field.Class T (@IntegralDomain.Class T (@ComUnitRing.Class T (@ComRing.Class T b Cm) b) IDm) Fm) => Pack phR (@Class T b Cm IDm Fm).",
            "VernacDefinition",
            "1978a3c1bfd73ac93fdf6f2cd5b95808fe975033"
        ],
        [
            "Definition pack_eta K := let cK := Field.class K in let Cm := ComRing.mixin cK in let IDm := IntegralDomain.mixin cK in let Fm := Field.mixin cK in fun (bT : Falgebra.type phR) b & phant_id (Falgebra.class bT) b => fun cT_ & phant_id (@Class T b) cT_ => @Pack phR T (cT_ Cm IDm Fm).",
            "VernacDefinition",
            "5c3dc8f9e8f332ce1bcb8a78e85fa6062ac5cb61"
        ],
        [
            "Definition eqType := @Equality.Pack cT xclass.",
            "VernacDefinition",
            "6139f412b89e62ff13c9c707c885de4b39151e9d"
        ],
        [
            "Definition choiceType := @Choice.Pack cT xclass.",
            "VernacDefinition",
            "f62d3090382a5ea70b978e0633e0376c4558db55"
        ],
        [
            "Definition zmodType := @Zmodule.Pack cT xclass.",
            "VernacDefinition",
            "d292a93c19cc9e36e99db073c0c14c27655bcd85"
        ],
        [
            "Definition ringType := @Ring.Pack cT xclass.",
            "VernacDefinition",
            "8a9134d1dac21560b6c04dc7467c51b02f0db83e"
        ],
        [
            "Definition unitRingType := @UnitRing.Pack cT xclass.",
            "VernacDefinition",
            "2fc21101404f298267a4a84da270b73575f3bf98"
        ],
        [
            "Definition comRingType := @ComRing.Pack cT xclass.",
            "VernacDefinition",
            "7ae57e52d5bc541f3670f9768868f067c230ad65"
        ],
        [
            "Definition comUnitRingType := @ComUnitRing.Pack cT xclass.",
            "VernacDefinition",
            "f27a825845ae5f4cb6a943bc8d5fa37920701569"
        ],
        [
            "Definition idomainType := @IntegralDomain.Pack cT xclass.",
            "VernacDefinition",
            "3e0200ebcc33abeac163cc9c30b3a33195446b9c"
        ],
        [
            "Definition fieldType := @Field.Pack cT xclass.",
            "VernacDefinition",
            "81fdf5f63ff476c1548f5cd56bda88a32a445f2c"
        ],
        [
            "Definition lmodType := @Lmodule.Pack R phR cT xclass.",
            "VernacDefinition",
            "ce00637124e62ebbeefb88ddd20470c874821839"
        ],
        [
            "Definition lalgType := @Lalgebra.Pack R phR cT xclass.",
            "VernacDefinition",
            "0d72eb2daf3e070740253667bc21e7d02a71c627"
        ],
        [
            "Definition algType := @Algebra.Pack R phR cT xclass.",
            "VernacDefinition",
            "770f84b1d0ffb0fa11981b5dbb2e349abd669efd"
        ],
        [
            "Definition unitAlgType := @UnitAlgebra.Pack R phR cT xclass.",
            "VernacDefinition",
            "d543a1dbcfbfc95c382a7397ac22de4b86004751"
        ],
        [
            "Definition vectType := @Vector.Pack R phR cT xclass.",
            "VernacDefinition",
            "7ac2d99e4fb9562eecadab1ed6ea662bc9f9ca8e"
        ],
        [
            "Definition FalgType := @Falgebra.Pack R phR cT xclass.",
            "VernacDefinition",
            "87f3a28fce86cde997cb032148d84be9b8ecb3d3"
        ],
        [
            "Definition Falg_comRingType := @ComRing.Pack FalgType xclass.",
            "VernacDefinition",
            "080e80a6825121611e5f7d31bb9f11b3faa9225e"
        ],
        [
            "Definition Falg_comUnitRingType := @ComUnitRing.Pack FalgType xclass.",
            "VernacDefinition",
            "a6488661f0812e473c8b6c17ee93a7142b28e55b"
        ],
        [
            "Definition Falg_idomainType := @IntegralDomain.Pack FalgType xclass.",
            "VernacDefinition",
            "643dd970b2ef32a9c01721dec0bb8d7e158a956f"
        ],
        [
            "Definition Falg_fieldType := @Field.Pack FalgType xclass.",
            "VernacDefinition",
            "1902d87252047df72675317dca824008c078f0c1"
        ],
        [
            "Definition vect_comRingType := @ComRing.Pack vectType xclass.",
            "VernacDefinition",
            "fa201ebbb0ce544b3a594904bf9bea132f666baa"
        ],
        [
            "Definition vect_comUnitRingType := @ComUnitRing.Pack vectType xclass.",
            "VernacDefinition",
            "21968d4f7a5b3a25d26a0604df32c2c99d683e45"
        ],
        [
            "Definition vect_idomainType := @IntegralDomain.Pack vectType xclass.",
            "VernacDefinition",
            "7dbc8644fa6a153cc7a52d38442961cf720c5fb4"
        ],
        [
            "Definition vect_fieldType := @Field.Pack vectType xclass.",
            "VernacDefinition",
            "b43c46ecf50aa480a42bdbc674c88224b972a212"
        ],
        [
            "Definition unitAlg_comRingType := @ComRing.Pack unitAlgType xclass.",
            "VernacDefinition",
            "64bd0ff6c0058b65326419d6f285c6bc6eec761f"
        ],
        [
            "Definition unitAlg_comUnitRingType := @ComUnitRing.Pack unitAlgType xclass.",
            "VernacDefinition",
            "03c33e5fa5015742d1ea1d19e34d68951b373ca5"
        ],
        [
            "Definition unitAlg_idomainType := @IntegralDomain.Pack unitAlgType xclass.",
            "VernacDefinition",
            "422dc9a21b9fd0af50fc8b58eae36bf44b67268a"
        ],
        [
            "Definition unitAlg_fieldType := @Field.Pack unitAlgType xclass.",
            "VernacDefinition",
            "58595d32a6c74dd10c0a52ddb4cef06b95bdfd95"
        ],
        [
            "Definition alg_comRingType := @ComRing.Pack algType xclass.",
            "VernacDefinition",
            "36c193e4a6b242187383247b83ab5fd243ae03cb"
        ],
        [
            "Definition alg_comUnitRingType := @ComUnitRing.Pack algType xclass.",
            "VernacDefinition",
            "03eff18059fada542d9bb8d072aec845c1c90a91"
        ],
        [
            "Definition alg_idomainType := @IntegralDomain.Pack algType xclass.",
            "VernacDefinition",
            "bf348e09e17ba2ed17d8cecb818a5fa6b823b5b6"
        ],
        [
            "Definition alg_fieldType := @Field.Pack algType xclass.",
            "VernacDefinition",
            "0b0bdb4b8dd33b60013d4968be9d1c509117f44b"
        ],
        [
            "Definition lalg_comRingType := @ComRing.Pack lalgType xclass.",
            "VernacDefinition",
            "444a8ab793a81a0fafb0ed45812124bac32dcc3d"
        ],
        [
            "Definition lalg_comUnitRingType := @ComUnitRing.Pack lalgType xclass.",
            "VernacDefinition",
            "2f5d25b96d14c2b0de514a647fc51584c4ed2042"
        ],
        [
            "Definition lalg_idomainType := @IntegralDomain.Pack lalgType xclass.",
            "VernacDefinition",
            "bbcb54e7f525bba4c4d2abbcd2a5658d0ded7681"
        ],
        [
            "Definition lalg_fieldType := @Field.Pack lalgType xclass.",
            "VernacDefinition",
            "eb80da0be0e4781607f61dd5bea7d87c34ed8dbb"
        ],
        [
            "Definition lmod_comRingType := @ComRing.Pack lmodType xclass.",
            "VernacDefinition",
            "62e557c665aef14796f628afcceecdc7a9bb4613"
        ],
        [
            "Definition lmod_comUnitRingType := @ComUnitRing.Pack lmodType xclass.",
            "VernacDefinition",
            "29c56a7303ea08ee86b464a0097d113605f2557d"
        ],
        [
            "Definition lmod_idomainType := @IntegralDomain.Pack lmodType xclass.",
            "VernacDefinition",
            "dc6b03232e85ea3082599f7a8181c87d0e9e0621"
        ],
        [
            "Definition lmod_fieldType := @Field.Pack lmodType xclass.",
            "VernacDefinition",
            "e8337190a3a038cb58d905415252a310a29d085a"
        ],
        [
            "End FieldExt.",
            "VernacEndSegment",
            "b5511a4394c4074139cf5717b3580fc97304d42c"
        ],
        [
            "Module Exports.",
            "VernacDefineModule",
            "d4a1114ec53f746523a7dec57823f7f03e51fa24"
        ],
        [
            "Coercion sort : type >-> Sortclass.",
            "VernacCoercion",
            "9e1cbf06afa0d2731dbb8bfd6b9ae32be22a8ae7"
        ],
        [
            "Bind Scope ring_scope with sort.",
            "VernacBindScope",
            "ac04d07dda43f0036576b2a438f8490c7ac4d59b"
        ],
        [
            "Coercion base : class_of >-> Falgebra.class_of.",
            "VernacCoercion",
            "391193fc5fa22423d44814fbb6a53831015fd7f3"
        ],
        [
            "Coercion base4 : class_of >-> Field.class_of.",
            "VernacCoercion",
            "1cb88cf9ef34be0156d1ac8d71c5c1dcf20093ff"
        ],
        [
            "Coercion eqType : type >-> Equality.type.",
            "VernacCoercion",
            "58308c67b5e73c9e004d57c486a5071598a25e8c"
        ],
        [
            "Canonical eqType.",
            "VernacCanonical",
            "dd1ac877a396f552e2a8f23e59be45903d8b15ad"
        ],
        [
            "Coercion choiceType : type >-> Choice.type.",
            "VernacCoercion",
            "bdc8d608f4b963a8606cd33ad18b1977a8bcb78d"
        ],
        [
            "Canonical choiceType.",
            "VernacCanonical",
            "af7a1759ddd13e2b7e4e1ce16b6a3595a77b5659"
        ],
        [
            "Coercion zmodType : type >-> Zmodule.type.",
            "VernacCoercion",
            "4ec9ca49e3551546d7d514a97127c47a11747e3a"
        ],
        [
            "Canonical zmodType.",
            "VernacCanonical",
            "9a6f278270af4b6ced100d8e0c90c7719a960a86"
        ],
        [
            "Coercion ringType : type >-> Ring.type.",
            "VernacCoercion",
            "3563a3bf802f370588b71df18917d551f221a05e"
        ],
        [
            "Canonical ringType.",
            "VernacCanonical",
            "b7d4c328ac58b23ee4b52bd787434621c20d2c4d"
        ],
        [
            "Coercion unitRingType : type >-> UnitRing.type.",
            "VernacCoercion",
            "f3d1399a2d1a8f93182c9b698d4a4a7d12624259"
        ],
        [
            "Canonical unitRingType.",
            "VernacCanonical",
            "5adf5dbcca23e501d2be7f60fe9ad3def13431b8"
        ],
        [
            "Coercion comRingType : type >-> ComRing.type.",
            "VernacCoercion",
            "0b68ec2f3c5c76d295167a623512d46ac31b80ad"
        ],
        [
            "Canonical comRingType.",
            "VernacCanonical",
            "30f9087081da845c9c545aeb8d7375204ed4f1b3"
        ],
        [
            "Coercion comUnitRingType : type >-> ComUnitRing.type.",
            "VernacCoercion",
            "c86b5a5eba0fa8431bb0c4dd719c4f48343ce09a"
        ],
        [
            "Canonical comUnitRingType.",
            "VernacCanonical",
            "74522c0e1d11ec46568915dda5f1829b7bbe8a04"
        ],
        [
            "Coercion idomainType : type >-> IntegralDomain.type.",
            "VernacCoercion",
            "456263ba8f66daa57f4e91cb63c7cf22a8129be1"
        ],
        [
            "Canonical idomainType.",
            "VernacCanonical",
            "ec8e76c80fed77c2b91406ec8a21033d94f8380d"
        ],
        [
            "Coercion fieldType : type >-> Field.type.",
            "VernacCoercion",
            "cd5d92a540c21184fd435cd430d76175833d5fb3"
        ],
        [
            "Canonical fieldType.",
            "VernacCanonical",
            "2f62ae066c69ea008603157a15e19f08a6a6284b"
        ],
        [
            "Coercion lmodType : type >-> Lmodule.type.",
            "VernacCoercion",
            "9ff62a98b0f74b40c781351d02b7295e741840a6"
        ],
        [
            "Canonical lmodType.",
            "VernacCanonical",
            "2508a378d00cff399685e05d31698f84cdfa1eb3"
        ],
        [
            "Coercion lalgType : type >-> Lalgebra.type.",
            "VernacCoercion",
            "8dc4e0c848285451e0f7d1e23771ee90e2b84039"
        ],
        [
            "Canonical lalgType.",
            "VernacCanonical",
            "f31157c914d84396af2f285a028b530262ad3b8e"
        ],
        [
            "Coercion algType : type >-> Algebra.type.",
            "VernacCoercion",
            "968b284465d8da0f4d63a1d5790d12f4562414a8"
        ],
        [
            "Canonical algType.",
            "VernacCanonical",
            "c8e13ad37555d7e21f377ace252393df47527b98"
        ],
        [
            "Coercion unitAlgType : type >-> UnitAlgebra.type.",
            "VernacCoercion",
            "da0ddecaeedc796cfc5e469f058268339eafdccd"
        ],
        [
            "Canonical unitAlgType.",
            "VernacCanonical",
            "dc8b91f44ee0029eada946f9b1526cf7274e957e"
        ],
        [
            "Coercion vectType : type >-> Vector.type.",
            "VernacCoercion",
            "4523914da6c5a8d8d9130c5144d16afb0e57942e"
        ],
        [
            "Canonical vectType.",
            "VernacCanonical",
            "c1ed9e45c59815f9a764670edb025f8ba3df0b85"
        ],
        [
            "Coercion FalgType : type >-> Falgebra.type.",
            "VernacCoercion",
            "3ddf21048ce952e58315e60ab7d32134be7050ab"
        ],
        [
            "Canonical FalgType.",
            "VernacCanonical",
            "7146c22f8a87df293aa96a8324e2fd3a9f4b23d6"
        ],
        [
            "Canonical Falg_comRingType.",
            "VernacCanonical",
            "f1760c6d996f8403c8a3de767504424f720dbebd"
        ],
        [
            "Canonical Falg_comUnitRingType.",
            "VernacCanonical",
            "a5364dea39db34dc6dccba775582f5025b3324e1"
        ],
        [
            "Canonical Falg_idomainType.",
            "VernacCanonical",
            "efb16a59f0c5cf968d9007c533f406893f8027cf"
        ],
        [
            "Canonical Falg_fieldType.",
            "VernacCanonical",
            "ac9fa8740c433dd9660cf46b5e264b64ded87a8b"
        ],
        [
            "Canonical vect_comRingType.",
            "VernacCanonical",
            "3ffbd4b37f8b3ea1c80a1897705f0005c031f837"
        ],
        [
            "Canonical vect_comUnitRingType.",
            "VernacCanonical",
            "894e683885a113e801db9a9791bfd330c61f558e"
        ],
        [
            "Canonical vect_idomainType.",
            "VernacCanonical",
            "f6c77bd149613360d1217837e36d472fd9cfbe82"
        ],
        [
            "Canonical vect_fieldType.",
            "VernacCanonical",
            "5c9decef4cabeb0573c4690815af11ec3310d3db"
        ],
        [
            "Canonical unitAlg_comRingType.",
            "VernacCanonical",
            "6da40d849b678eb3da9fe0d315ae9f15d501f374"
        ],
        [
            "Canonical unitAlg_comUnitRingType.",
            "VernacCanonical",
            "a149dd6517a54fc2d5a0cfd77b98e315c85deb8f"
        ],
        [
            "Canonical unitAlg_idomainType.",
            "VernacCanonical",
            "13e61d158e6a1874ee4305a2734cb494a8d1f075"
        ],
        [
            "Canonical unitAlg_fieldType.",
            "VernacCanonical",
            "17f234bda67e58317a4614151d26c545acefe3a2"
        ],
        [
            "Canonical alg_comRingType.",
            "VernacCanonical",
            "8e7c672cbbd3da24fbbf5b8b1c4f7b37ea5367f7"
        ],
        [
            "Canonical alg_comUnitRingType.",
            "VernacCanonical",
            "a2de48f0b2aa605125f4b41d7f10567e85edd794"
        ],
        [
            "Canonical alg_idomainType.",
            "VernacCanonical",
            "c8859fa2269bc52660f7e241df1656b6c09c9ca2"
        ],
        [
            "Canonical alg_fieldType.",
            "VernacCanonical",
            "547b1c3eab2b5a882a103e97302ce389e0482169"
        ],
        [
            "Canonical lalg_comRingType.",
            "VernacCanonical",
            "d62a8a71e7a5819aff1cc2f2fd733ed4bc18afb9"
        ],
        [
            "Canonical lalg_comUnitRingType.",
            "VernacCanonical",
            "379798fca469d6cd8a98fdccacbf445f6792fa67"
        ],
        [
            "Canonical lalg_idomainType.",
            "VernacCanonical",
            "6d97e77e5458bc6a9ef4f0ce23fed7fac4f06601"
        ],
        [
            "Canonical lalg_fieldType.",
            "VernacCanonical",
            "b0da04d7ef4b359c11e4670793a334e898a4f187"
        ],
        [
            "Canonical lmod_comRingType.",
            "VernacCanonical",
            "7437a27a888a33271d16e8338ba42410cf4458f8"
        ],
        [
            "Canonical lmod_comUnitRingType.",
            "VernacCanonical",
            "b8ceb1afb2f1ec2b9c7e574e44202a4aa4edc06c"
        ],
        [
            "Canonical lmod_idomainType.",
            "VernacCanonical",
            "c601ec549754d48e0f15f6abaeacd81e993227a5"
        ],
        [
            "Canonical lmod_fieldType.",
            "VernacCanonical",
            "eef89befe670af3eba18c3e531c55751a045c1b7"
        ],
        [
            "Notation fieldExtType R := (type (Phant R)).",
            "VernacSyntacticDefinition",
            "a1bc5958439578ab8c3fa52acdd530f4517fccb3"
        ],
        [
            "Notation \"[ 'fieldExtType' F 'of' L ]\" := (@pack _ (Phant F) L _ _ id _ _ _ _ id) (at level 0, format \"[ 'fieldExtType' F 'of' L ]\") : form_scope.",
            "VernacNotation",
            "755bb9a4e909b325eb72ea70ca8fafcae7158d9a"
        ],
        [
            "Notation \"[ 'fieldExtType' F 'of' L 'for' K ]\" := (@pack_eta _ (Phant F) L K _ _ id _ id) (at level 0, format \"[ 'fieldExtType' F 'of' L 'for' K ]\") : form_scope.",
            "VernacNotation",
            "ce49b6387948834c91352b5a4c669b6a449e4ff8"
        ],
        [
            "Notation \"{ 'subfield' L }\" := (@aspace_of _ (FalgType _) (Phant L)) (at level 0, format \"{ 'subfield' L }\") : type_scope.",
            "VernacNotation",
            "92c588020f81a561c897eb07a1b85b683c9c9f21"
        ],
        [
            "End Exports.",
            "VernacEndSegment",
            "71efedae7ccffd696e1ffe5d8ae6baa8a4484918"
        ],
        [
            "End FieldExt.",
            "VernacEndSegment",
            "b5511a4394c4074139cf5717b3580fc97304d42c"
        ],
        [
            "Export FieldExt.Exports.",
            "VernacImport",
            "8e234e7538fcdceb12774c6199f03d1bb01e071f"
        ],
        [
            "Canonical regular_fieldExtType (F : fieldType) := [fieldExtType F of F^o for F].",
            "VernacDefinition",
            "7b8416806887f1c0652a825a1259f37dcf51db55"
        ],
        [
            "Section FieldExtTheory.",
            "VernacBeginSection",
            "dfd7ca721ea9fac1e198587cf8c3792e41c8d9b3"
        ],
        [
            "Variables (F0 : fieldType) (L : fieldExtType F0).",
            "VernacAssumption",
            "1aba39a3ce851f58248c07556d01ea2fb8b235d1"
        ],
        [
            "Implicit Types (U V M : {vspace L}) (E F K : {subfield L}).",
            "VernacReserve",
            "eaed6c28c1bca96178bb69dd9dca81e250e180a3"
        ],
        [
            "Lemma dim_cosetv U x : x != 0 -> \\dim (U * <[x]>) = \\dim U.",
            "VernacStartTheoremProof",
            "81ba1ebc86fa7ea03a2f5de4ce991f15f216cf6d"
        ],
        [
            "move=> nz_x; rewrite -limg_amulr limg_dim_eq //.",
            "VernacExtend",
            "057edeb0967475c7ea5e8c98c449ddc5613eddc1"
        ],
        [
            "apply/eqP; rewrite -subv0; apply/subvP=> y.",
            "VernacExtend",
            "da24caf87c1bbbad0538b8be68905ec456c78aa7"
        ],
        [
            "by rewrite memv_cap memv0 memv_ker lfunE mulf_eq0 (negPf nz_x) orbF => /andP[].",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma prodvC : commutative (@prodv F0 L).",
            "VernacStartTheoremProof",
            "e842456423f1390b7017cc9b342f5aa43802f19f"
        ],
        [
            "move=> U V; without loss suffices subC: U V / (U * V <= V * U)%VS.",
            "VernacExtend",
            "c72e9bb37283b59c58a2f990500032acd79787ea"
        ],
        [
            "by apply/eqP; rewrite eqEsubv !{1}subC.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "by apply/prodvP=> x y Ux Vy; rewrite mulrC memv_mul.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Canonical prodv_comoid := Monoid.ComLaw prodvC.",
            "VernacDefinition",
            "66cb885c51b04eed4bd259a3f8a049ac22ce977b"
        ],
        [
            "Lemma prodvCA : left_commutative (@prodv F0 L).",
            "VernacStartTheoremProof",
            "e949751170cee45e3a75c9f4703ae4e317afd8d7"
        ],
        [
            "exact: Monoid.mulmCA.",
            "VernacExtend",
            "ce637ff86bafca5d8359473e8c02af644dcbdc43"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma prodvAC : right_commutative (@prodv F0 L).",
            "VernacStartTheoremProof",
            "bf88355cb5f89efbb20cb4ff42cfc4069b50fbc8"
        ],
        [
            "exact: Monoid.mulmAC.",
            "VernacExtend",
            "ce637ff86bafca5d8359473e8c02af644dcbdc43"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma algid1 K : algid K = 1.",
            "VernacStartTheoremProof",
            "c9e34eee2a14c34dcb14fb5ba07b07b6751f65c7"
        ],
        [
            "exact/skew_field_algid1/fieldP.",
            "VernacExtend",
            "ce637ff86bafca5d8359473e8c02af644dcbdc43"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma mem1v K : 1 \\in K.",
            "VernacStartTheoremProof",
            "2823a7d9959b7e96b4d210cd2268d45fc155adde"
        ],
        [
            "by rewrite -algid_eq1 algid1.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma sub1v K : (1 <= K)%VS.",
            "VernacStartTheoremProof",
            "c7ce68966f0e498afafbaef43ffd955e12b3fe2a"
        ],
        [
            "exact: mem1v.",
            "VernacExtend",
            "ce637ff86bafca5d8359473e8c02af644dcbdc43"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma subfield_closed K : agenv K = K.",
            "VernacStartTheoremProof",
            "0fb7d37530236cf9c68136e99218dfd25757f0e2"
        ],
        [
            "by apply/eqP; rewrite eqEsubv sub_agenv agenv_sub_modr ?sub1v ?asubv.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma AHom_lker0 (rT : FalgType F0) (f : 'AHom(L, rT)) : lker f == 0%VS.",
            "VernacStartTheoremProof",
            "51cae09ae686378c56cf08afb8eea792acf2e9ff"
        ],
        [
            "by apply/lker0P; apply: fmorph_inj.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma AEnd_lker0 (f : 'AEnd(L)) : lker f == 0%VS.",
            "VernacStartTheoremProof",
            "2a8ff3ff7d14f839992c4c65fe076991d2a16a41"
        ],
        [
            "exact: AHom_lker0.",
            "VernacExtend",
            "ce637ff86bafca5d8359473e8c02af644dcbdc43"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Fact aimg_is_aspace (rT : FalgType F0) (f : 'AHom(L, rT)) (E : {subfield L}) : is_aspace (f @: E).",
            "VernacStartTheoremProof",
            "1c53863a34e38f165ad12896eac2f3db423cf100"
        ],
        [
            "rewrite /is_aspace -aimgM limgS ?prodv_id // has_algid1 //.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "by apply/memv_imgP; exists 1; rewrite ?mem1v ?rmorph1.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Canonical aimg_aspace rT f E := ASpace (@aimg_is_aspace rT f E).",
            "VernacDefinition",
            "ccfd0b80df195f455983da2f98f7ba475ca158e2"
        ],
        [
            "Lemma Fadjoin_idP {K x} : reflect (<<K; x>>%VS = K) (x \\in K).",
            "VernacStartTheoremProof",
            "8d617d745764eadeb62c17e7f12df6354978fd22"
        ],
        [
            "apply: (iffP idP) => [/addv_idPl-> | <-]; first exact: subfield_closed.",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "exact: memv_adjoin.",
            "VernacExtend",
            "ce637ff86bafca5d8359473e8c02af644dcbdc43"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma Fadjoin0 K : <<K; 0>>%VS = K.",
            "VernacStartTheoremProof",
            "07024df65c63952eaf32e5f0177f209bf761b140"
        ],
        [
            "by rewrite addv0 subfield_closed.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma Fadjoin_nil K : <<K & [::]>>%VS = K.",
            "VernacStartTheoremProof",
            "4085670ec2071007cf2aeaa53406dbb5d76f800f"
        ],
        [
            "by rewrite adjoin_nil subfield_closed.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma FadjoinP {K x E} : reflect (K <= E /\\ x \\in E)%VS (<<K; x>>%AS <= E)%VS.",
            "VernacStartTheoremProof",
            "1f5c999599fcfb494d5f8c4c9e0d37aee57d4313"
        ],
        [
            "apply: (iffP idP) => [sKxE | /andP].",
            "VernacExtend",
            "4bd6fa79b17bcd2bfb7af091fb325367a20385d6"
        ],
        [
            "by rewrite (subvP sKxE) ?memv_adjoin // (subv_trans _ sKxE) ?subv_adjoin.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "by rewrite -subv_add => /agenvS; rewrite subfield_closed.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma Fadjoin_seqP {K} {rs : seq L} {E} : reflect (K <= E /\\ {subset rs <= E})%VS (<<K & rs>> <= E)%VS.",
            "VernacStartTheoremProof",
            "bd416f9fb884c3ca2d855e0cf763171ccb75523b"
        ],
        [
            "apply: (iffP idP) => [sKrsE | [sKE /span_subvP/(conj sKE)/andP]].",
            "VernacExtend",
            "4bd6fa79b17bcd2bfb7af091fb325367a20385d6"
        ],
        [
            "split=> [|x rs_x]; first exact: subv_trans (subv_adjoin_seq _ _) sKrsE.",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "by rewrite (subvP sKrsE) ?seqv_sub_adjoin.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "by rewrite -subv_add => /agenvS; rewrite subfield_closed.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma alg_polyOver E p : map_poly (in_alg L) p \\is a polyOver E.",
            "VernacStartTheoremProof",
            "0a210b73187cf17682f58bb20552e903acbf2b60"
        ],
        [
            "by apply/(polyOverS (subvP (sub1v _)))/polyOver1P; exists p.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma sub_adjoin1v x E : (<<1; x>> <= E)%VS = (x \\in E)%VS.",
            "VernacStartTheoremProof",
            "76e61e39e14f9b5b47de86dc11ec38c66ca80c69"
        ],
        [
            "by rewrite (sameP FadjoinP andP) sub1v.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Fact vsval_multiplicative K : multiplicative (vsval : subvs_of K -> L).",
            "VernacStartTheoremProof",
            "bc3c294d6e7b0e2d96567af445b60c4a03a8697b"
        ],
        [
            "by split => //=; apply: algid1.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Canonical vsval_rmorphism K := AddRMorphism (vsval_multiplicative K).",
            "VernacDefinition",
            "b3bba0691bf5d48e3ad99d776e41d1dc955dd29f"
        ],
        [
            "Canonical vsval_lrmorphism K : {lrmorphism subvs_of K -> L} := [lrmorphism of vsval].",
            "VernacDefinition",
            "9f83fbc03614d057ccad91d7657a684b05672615"
        ],
        [
            "Lemma vsval_invf K (w : subvs_of K) : val w^-1 = (vsval w)^-1.",
            "VernacStartTheoremProof",
            "6f04109418d682173c2a91eb36b258f1dfbd897a"
        ],
        [
            "have [-> | Uv] := eqVneq w 0; first by rewrite !invr0.",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "by apply: vsval_invr; rewrite unitfE.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Fact aspace_divr_closed K : divr_closed K.",
            "VernacStartTheoremProof",
            "6ffec2376832e2cda9ccde874aa5bc0c77bdd84f"
        ],
        [
            "by split=> [|u v Ku Kv]; rewrite ?mem1v ?memvM ?memvV.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Canonical aspace_mulrPred K := MulrPred (aspace_divr_closed K).",
            "VernacDefinition",
            "3709dce25585a813b4bb7a2bc1627e1f3f8b8bd2"
        ],
        [
            "Canonical aspace_divrPred K := DivrPred (aspace_divr_closed K).",
            "VernacDefinition",
            "0db80e0824f114c284cc4e0cd54fa2ca4f1f5a9b"
        ],
        [
            "Canonical aspace_smulrPred K := SmulrPred (aspace_divr_closed K).",
            "VernacDefinition",
            "9337140ab97471e82535e59c07d4215c857f9fde"
        ],
        [
            "Canonical aspace_sdivrPred K := SdivrPred (aspace_divr_closed K).",
            "VernacDefinition",
            "5f2b0325de837d09b2234e307288d17087b6d8aa"
        ],
        [
            "Canonical aspace_semiringPred K := SemiringPred (aspace_divr_closed K).",
            "VernacDefinition",
            "019c5108bbb22e85e1e86fe65b03f12d9249ce3e"
        ],
        [
            "Canonical aspace_subringPred K := SubringPred (aspace_divr_closed K).",
            "VernacDefinition",
            "48ca558978416b09106a4ae66470ff01932c9702"
        ],
        [
            "Canonical aspace_subalgPred K := SubalgPred (memv_submod_closed K).",
            "VernacDefinition",
            "825b66c63ef9638653e7cc3fad01be858df84f95"
        ],
        [
            "Canonical aspace_divringPred K := DivringPred (aspace_divr_closed K).",
            "VernacDefinition",
            "0c51d37d2aa798ed3812a3b8e3e5cb32bce34a34"
        ],
        [
            "Canonical aspace_divalgPred K := DivalgPred (memv_submod_closed K).",
            "VernacDefinition",
            "7cc0ff052d225fd0280e7ad4d1f9636a3eba560a"
        ],
        [
            "Definition subvs_mulC K := [comRingMixin of subvs_of K by <:].",
            "VernacDefinition",
            "84598a8aeeaf269306e44de1d9e2239f87a57236"
        ],
        [
            "Canonical subvs_comRingType K := Eval hnf in ComRingType (subvs_of K) (@subvs_mulC K).",
            "VernacDefinition",
            "01c8fcaa83ea59ea96f8345241a5065bc5fd04cd"
        ],
        [
            "Canonical subvs_comUnitRingType K := Eval hnf in [comUnitRingType of subvs_of K].",
            "VernacDefinition",
            "ddc83e91ed65a6bb59b0904a449b74f06e6d0021"
        ],
        [
            "Definition subvs_mul_eq0 K := [idomainMixin of subvs_of K by <:].",
            "VernacDefinition",
            "9c959101d5e2fb016275ff87713ba9c104f0d369"
        ],
        [
            "Canonical subvs_idomainType K := Eval hnf in IdomainType (subvs_of K) (@subvs_mul_eq0 K).",
            "VernacDefinition",
            "c87f1389491940f445a8d0d1280d1fc94d3652e1"
        ],
        [
            "Lemma subvs_fieldMixin K : GRing.Field.mixin_of (@subvs_idomainType K).",
            "VernacStartTheoremProof",
            "f968dfcfa7025324301b021a9f55191d127449a7"
        ],
        [
            "by move=> w nz_w; rewrite unitrE -val_eqE /= vsval_invf algid1 divff.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Canonical subvs_fieldType K := Eval hnf in FieldType (subvs_of K) (@subvs_fieldMixin K).",
            "VernacDefinition",
            "ef4110fb3a0bedddbfd0e0cce5f3e94d7fc5b83d"
        ],
        [
            "Canonical subvs_fieldExtType K := Eval hnf in [fieldExtType F0 of subvs_of K].",
            "VernacDefinition",
            "9858b49e3a680053cc4d481cdde495aa3da4ab01"
        ],
        [
            "Lemma polyOver_subvs {K} {p : {poly L}} : reflect (exists q : {poly subvs_of K}, p = map_poly vsval q) (p \\is a polyOver K).",
            "VernacStartTheoremProof",
            "3a751bfe106c9e3b1734235d94d29e46ac3d67c3"
        ],
        [
            "apply: (iffP polyOverP) => [Hp | [q ->] i]; last by rewrite coef_map // subvsP.",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "exists (\\poly_(i < size p) (Subvs (Hp i))); rewrite -{1}[p]coefK.",
            "VernacExtend",
            "ad3c85e7779312e2259faa2f9c66d14dd86db123"
        ],
        [
            "by apply/polyP=> i; rewrite coef_map !coef_poly; case: ifP.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma divp_polyOver K : {in polyOver K &, forall p q, p %/ q \\is a polyOver K}.",
            "VernacStartTheoremProof",
            "ba47472e506098a3461678326d7dbe21bc51b3ba"
        ],
        [
            "move=> _ _ /polyOver_subvs[p ->] /polyOver_subvs[q ->].",
            "VernacExtend",
            "b1b2cb7a3a617cba67460b4eca1f04de3c1cc716"
        ],
        [
            "by apply/polyOver_subvs; exists (p %/ q); rewrite map_divp.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma modp_polyOver K : {in polyOver K &, forall p q, p %% q \\is a polyOver K}.",
            "VernacStartTheoremProof",
            "918517c5951e7c269b8695bfc301625ee17a0c5a"
        ],
        [
            "move=> _ _ /polyOver_subvs[p ->] /polyOver_subvs[q ->].",
            "VernacExtend",
            "b1b2cb7a3a617cba67460b4eca1f04de3c1cc716"
        ],
        [
            "by apply/polyOver_subvs; exists (p %% q); rewrite map_modp.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma gcdp_polyOver K : {in polyOver K &, forall p q, gcdp p q \\is a polyOver K}.",
            "VernacStartTheoremProof",
            "f191b7f5571de39944b58e894de9ea1cc37e6a7c"
        ],
        [
            "move=> _ _ /polyOver_subvs[p ->] /polyOver_subvs[q ->].",
            "VernacExtend",
            "b1b2cb7a3a617cba67460b4eca1f04de3c1cc716"
        ],
        [
            "by apply/polyOver_subvs; exists (gcdp p q); rewrite gcdp_map.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Fact prodv_is_aspace E F : is_aspace (E * F).",
            "VernacStartTheoremProof",
            "b3118471f040ca185c037dfbd050bfb31bcf7f0f"
        ],
        [
            "rewrite /is_aspace prodvCA -!prodvA prodvA !prodv_id has_algid1 //=.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "by rewrite -[1]mulr1 memv_mul ?mem1v.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Canonical prodv_aspace E F : {subfield L} := ASpace (prodv_is_aspace E F).",
            "VernacDefinition",
            "10ec61ae9efec1af7175600abb673ac28ef567d6"
        ],
        [
            "Fact field_mem_algid E F : algid E \\in F.",
            "VernacStartTheoremProof",
            "e81221b10ac3e63ef289522f1ee8c7d6e56a0a7a"
        ],
        [
            "by rewrite algid1 mem1v.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Canonical capv_aspace E F : {subfield L} := aspace_cap (field_mem_algid E F).",
            "VernacDefinition",
            "4522520a7c01e070cb13c147c58e5960a0516e1b"
        ],
        [
            "Lemma polyOverSv U V : (U <= V)%VS -> {subset polyOver U <= polyOver V}.",
            "VernacStartTheoremProof",
            "0ac03b074a2c0ff3324f35f925d99612a3daf53e"
        ],
        [
            "by move/subvP=> sUV; apply: polyOverS.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma field_subvMl F U : (U <= F * U)%VS.",
            "VernacStartTheoremProof",
            "f37fafe4536dbf8e434a8581a9459dab33468087"
        ],
        [
            "by rewrite -{1}[U]prod1v prodvSl ?sub1v.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma field_subvMr U F : (U <= U * F)%VS.",
            "VernacStartTheoremProof",
            "f035bf36a63f2b2e1bf74fbc387dc655f59bcdde"
        ],
        [
            "by rewrite prodvC field_subvMl.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma field_module_eq F M : (F * M <= M)%VS -> (F * M)%VS = M.",
            "VernacStartTheoremProof",
            "891c3ebc8891a5fdc1d0b530514b29c8d46062bd"
        ],
        [
            "by move=> modM; apply/eqP; rewrite eqEsubv modM field_subvMl.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma sup_field_module F E : (F * E <= E)%VS = (F <= E)%VS.",
            "VernacStartTheoremProof",
            "cd67bada368c1dcc69d1a2b8b7c432bff03bd54a"
        ],
        [
            "apply/idP/idP; first exact: subv_trans (field_subvMr F E).",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "by move/(prodvSl E)/subv_trans->; rewrite ?asubv.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma field_module_dimS F M : (F * M <= M)%VS -> (\\dim F %| \\dim M)%N.",
            "VernacStartTheoremProof",
            "5713df5a75980dce05d2e139775eb1e2f09aaff5"
        ],
        [
            "exact/skew_field_module_dimS/fieldP.",
            "VernacExtend",
            "ce637ff86bafca5d8359473e8c02af644dcbdc43"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma field_dimS F E : (F <= E)%VS -> (\\dim F %| \\dim E)%N.",
            "VernacStartTheoremProof",
            "5796480ab8777db2097d814dbca300d493a0858c"
        ],
        [
            "exact/skew_field_dimS/fieldP.",
            "VernacExtend",
            "ce637ff86bafca5d8359473e8c02af644dcbdc43"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma dim_field_module F M : (F * M <= M)%VS -> \\dim M = (\\dim_F M * \\dim F)%N.",
            "VernacStartTheoremProof",
            "aac7df47f599f1af55fc9557c384be5aa6385d91"
        ],
        [
            "by move/field_module_dimS/divnK.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma dim_sup_field F E : (F <= E)%VS -> \\dim E = (\\dim_F E * \\dim F)%N.",
            "VernacStartTheoremProof",
            "a6e540b18a5466fe363759a157089a44a9887209"
        ],
        [
            "by move/field_dimS/divnK.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma field_module_semisimple F M (m := \\dim_F M) : (F * M <= M)%VS -> {X : m.-tuple L | {subset X <= M} /\\ 0 \\notin X & let FX := (\\sum_(i < m) F * <[X`_i]>)%VS in FX = M /\\ directv FX}.",
            "VernacStartTheoremProof",
            "abc65635d77e539d536de2158af59697cc526317"
        ],
        [
            "move=> modM; have dimM: (m * \\dim F)%N = \\dim M by rewrite -dim_field_module.",
            "VernacExtend",
            "ccd83c252dcbae3d56f3d057fcb8217878b51901"
        ],
        [
            "have [X [defM dxFX nzX]] := skew_field_module_semisimple (@fieldP L) modM.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "have szX: size X == m.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "rewrite -(eqn_pmul2r (adim_gt0 F)) dimM -defM (directvP dxFX) /=.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "rewrite -sum1_size big_distrl; apply/eqP/eq_big_seq => x Xx /=.",
            "VernacExtend",
            "634a7639ed2fb7caf62757f84400927f5829b7d5"
        ],
        [
            "by rewrite mul1n dim_cosetv ?(memPn nzX).",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "rewrite directvE /= !(big_nth 0) (eqP szX) !big_mkord -directvE /= in defM dxFX.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "exists (Tuple szX) => //; split=> // _ /tnthP[i ->]; rewrite (tnth_nth 0) /=.",
            "VernacExtend",
            "28c821d3ffa6b2d34a34ee3b5d1f710106f164c7"
        ],
        [
            "by rewrite -defM memvE (sumv_sup i) ?field_subvMl.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Section FadjoinPolyDefinitions.",
            "VernacBeginSection",
            "c53c0343938cf6c2c209d65f5732c3d74e9bd13b"
        ],
        [
            "Variables (U : {vspace L}) (x : L).",
            "VernacAssumption",
            "c425fbd13c5fe808b3bd5faad470d099f2a00ce5"
        ],
        [
            "Definition adjoin_degree := (\\dim_U <<U; x>>).-1.+1.",
            "VernacDefinition",
            "a106e0dd274cb7655e82a84e5552fb4b2e49126f"
        ],
        [
            "Local Notation n := adjoin_degree.",
            "VernacSyntacticDefinition",
            "5478bfc9924f02109e07b0faec09c5e0e38ce8fb"
        ],
        [
            "Definition Fadjoin_sum := (\\sum_(i < n) U * <[x ^+ i]>)%VS.",
            "VernacDefinition",
            "8f725e9dc2140cb89cc33b19a8a12b7815aed64e"
        ],
        [
            "Definition Fadjoin_poly v : {poly L} := \\poly_(i < n) (sumv_pi Fadjoin_sum (inord i) v / x ^+ i).",
            "VernacDefinition",
            "a8835bfa12999f1df61abcba120b1d574e891460"
        ],
        [
            "Definition minPoly : {poly L} := 'X^n - Fadjoin_poly (x ^+ n).",
            "VernacDefinition",
            "7aef7cef3611bc2dcdc67c8756908d93d0afb4bb"
        ],
        [
            "Lemma size_Fadjoin_poly v : size (Fadjoin_poly v) <= n.",
            "VernacStartTheoremProof",
            "0c1d08defb77469c96c73a83f4344b020c5d7b61"
        ],
        [
            "exact: size_poly.",
            "VernacExtend",
            "ce637ff86bafca5d8359473e8c02af644dcbdc43"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma Fadjoin_polyOver v : Fadjoin_poly v \\is a polyOver U.",
            "VernacStartTheoremProof",
            "82abca21a990ec95eb02203624e359f3c29e24c5"
        ],
        [
            "apply/(all_nthP 0) => i _; rewrite coef_poly /=.",
            "VernacExtend",
            "56c014161b39aecfb3c54301c2409dba4e8e1857"
        ],
        [
            "case: ifP => lti; last exact: mem0v.",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "have /memv_cosetP[y Uy ->] := memv_sum_pi (erefl Fadjoin_sum) (inord i) v.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "rewrite inordK //; have [-> | /mulfK-> //] := eqVneq (x ^+ i) 0.",
            "VernacExtend",
            "7be6e3cf9ccbce33486c4b5c6fefdf7a9ad6e52b"
        ],
        [
            "by rewrite mulr0 mul0r mem0v.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Fact Fadjoin_poly_is_linear : linear_for (in_alg L \\; *:%R) Fadjoin_poly.",
            "VernacStartTheoremProof",
            "f72ff830578f7690847dde9f9cf7e76412fb9a20"
        ],
        [
            "move=> a u v; apply/polyP=> i; rewrite coefD coefZ !coef_poly.",
            "VernacExtend",
            "f7feb259d6220ca40e8a86b90bd06f137aa140ac"
        ],
        [
            "case: ifP => lti; last by rewrite mulr0 addr0.",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "by rewrite linearP mulrA -mulrDl mulr_algl.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Canonical Fadjoin_poly_additive := Additive Fadjoin_poly_is_linear.",
            "VernacDefinition",
            "fc6c151481e0b9e202ae548dc6ad971899094aac"
        ],
        [
            "Canonical Fadjoin_poly_linear := AddLinear Fadjoin_poly_is_linear.",
            "VernacDefinition",
            "cce4a2e8777a418cb4006c8e81426dde755ea768"
        ],
        [
            "Lemma size_minPoly : size minPoly = n.+1.",
            "VernacStartTheoremProof",
            "a9fcc374ea265fc7b27ac6fdbc91a9d62e250b44"
        ],
        [
            "by rewrite size_addl ?size_polyXn // size_opp ltnS size_poly.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma monic_minPoly : minPoly \\is monic.",
            "VernacStartTheoremProof",
            "e71b753a1b8c974fb1f7b328528712e9740c2d2a"
        ],
        [
            "rewrite monicE /lead_coef size_minPoly coefB coefXn eqxx.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "by rewrite nth_default ?subr0 ?size_poly.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "End FadjoinPolyDefinitions.",
            "VernacEndSegment",
            "88cef7b19b79c7b0dcb14b5f536b7ac29eef8b0f"
        ],
        [
            "Section FadjoinPoly.",
            "VernacBeginSection",
            "10483477c90b6ecc10b1560329714c48ec8648bc"
        ],
        [
            "Variables (K : {subfield L}) (x : L).",
            "VernacAssumption",
            "34dd0d882e4d475541db35c9dbed070193a9ef26"
        ],
        [
            "Local Notation n := (adjoin_degree (asval K) x).",
            "VernacSyntacticDefinition",
            "8a5f9b37606d678097ee48423f766893a2810a10"
        ],
        [
            "Local Notation sumKx := (Fadjoin_sum (asval K) x).",
            "VernacSyntacticDefinition",
            "d9b53392984d6ce6c7419cf4d49cee34b8eb4aa2"
        ],
        [
            "Lemma adjoin_degreeE : n = \\dim_K <<K; x>>.",
            "VernacStartTheoremProof",
            "8159f589ce8b55ac42c00b65ab2b42b32e7cb84a"
        ],
        [
            "by rewrite [n]prednK // divn_gt0 ?adim_gt0 // dimvS ?subv_adjoin.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma dim_Fadjoin : \\dim <<K; x>> = (n * \\dim K)%N.",
            "VernacStartTheoremProof",
            "92151c25a301b5e733a9a45252a8cd2d0d73c141"
        ],
        [
            "by rewrite adjoin_degreeE -dim_sup_field ?subv_adjoin.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma adjoin0_deg : adjoin_degree K 0 = 1%N.",
            "VernacStartTheoremProof",
            "34fcc1f78bd871632a7b9e3d0bf1120cb9885b99"
        ],
        [
            "by rewrite /adjoin_degree addv0 subfield_closed divnn adim_gt0.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma adjoin_deg_eq1 : (n == 1%N) = (x \\in K).",
            "VernacStartTheoremProof",
            "7775473040b1416c4b0b8ebc5e865892fdea3fdd"
        ],
        [
            "rewrite (sameP Fadjoin_idP eqP) adjoin_degreeE; have sK_Kx := subv_adjoin K x.",
            "VernacExtend",
            "7be6e3cf9ccbce33486c4b5c6fefdf7a9ad6e52b"
        ],
        [
            "apply/eqP/idP=> [dimKx1 | /eqP->]; last by rewrite divnn adim_gt0.",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "by rewrite eq_sym eqEdim sK_Kx /= (dim_sup_field sK_Kx) dimKx1 mul1n.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma Fadjoin_sum_direct : directv sumKx.",
            "VernacStartTheoremProof",
            "388c6902b8e047e9dfe0247d3394ee197d924a4b"
        ],
        [
            "rewrite directvE /=; case Dn: {-2}n (leqnn n) => // [m] {Dn}.",
            "VernacExtend",
            "712d339e99ee17eb7d5033e19ac614eb3ca6b532"
        ],
        [
            "elim: m => [|m IHm] ltm1n; rewrite ?big_ord1 // !(big_ord_recr m.+1) /=.",
            "VernacExtend",
            "de65c8193056a36f6dbb91fe21357bd770b140db"
        ],
        [
            "do [move/(_ (ltnW ltm1n))/eqP; set S := (\\sum_i _)%VS] in IHm *.",
            "VernacExtend",
            "2ed5ae5c7a1513e882f170a2462d7a7c3c1ca435"
        ],
        [
            "rewrite -IHm dimv_add_leqif; apply/subvP=> z; rewrite memv_cap => /andP[Sz].",
            "VernacExtend",
            "0288f65064e83af8559a49f90a2eba4421e03fd4"
        ],
        [
            "case/memv_cosetP=> y Ky Dz; rewrite memv0 Dz mulf_eq0 expf_eq0 /=.",
            "VernacExtend",
            "90a2acb29b7a5304b0ab6ba5269c420638ddef63"
        ],
        [
            "apply: contraLR ltm1n => /norP[nz_y nz_x].",
            "VernacExtend",
            "4bd6fa79b17bcd2bfb7af091fb325367a20385d6"
        ],
        [
            "rewrite -leqNgt -(leq_pmul2r (adim_gt0 K)) -dim_Fadjoin.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "have{IHm} ->: (m.+1 * \\dim K)%N = \\dim S.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "rewrite -[m.+1]card_ord -sum_nat_const IHm.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "by apply: eq_bigr => i; rewrite dim_cosetv ?expf_neq0.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "apply/dimvS/agenv_sub_modl; first by rewrite (sumv_sup 0) //= prodv1 sub1v.",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "rewrite prodvDl subv_add -[S]big_distrr prodvA prodv_id subvv !big_distrr /=.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "apply/subv_sumP=> i _; rewrite -expv_line prodvCA -expvSl expv_line.",
            "VernacExtend",
            "56c014161b39aecfb3c54301c2409dba4e8e1857"
        ],
        [
            "have [ltim | lemi] := ltnP i m; first by rewrite (sumv_sup (Sub i.+1 _)).",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "have{lemi} /eqP->: i == m :> nat by rewrite eqn_leq leq_ord.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "rewrite -big_distrr -2!{2}(prodv_id K) /= -!prodvA big_distrr -/S prodvSr //=.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "by rewrite -(canLR (mulKf nz_y) Dz) -memvE memv_mul ?rpredV.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Let nz_x_i (i : 'I_n) : x ^+ i != 0.",
            "VernacDefinition",
            "2869307f3921385b1beae590e64b03240f8b8b7b"
        ],
        [
            "by rewrite expf_eq0; case: eqP i => [->|_] [[]] //; rewrite adjoin0_deg.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma Fadjoin_eq_sum : <<K; x>>%VS = sumKx.",
            "VernacStartTheoremProof",
            "780fa1a46757cc45e816a317c02cb122d3a1012b"
        ],
        [
            "apply/esym/eqP; rewrite eqEdim eq_leq ?andbT.",
            "VernacExtend",
            "56c014161b39aecfb3c54301c2409dba4e8e1857"
        ],
        [
            "apply/subv_sumP=> i _; rewrite -agenvM prodvS ?subv_adjoin //.",
            "VernacExtend",
            "56c014161b39aecfb3c54301c2409dba4e8e1857"
        ],
        [
            "by rewrite -expv_line (subv_trans (subX_agenv _ _)) ?agenvS ?addvSr.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "rewrite dim_Fadjoin -[n]card_ord -sum_nat_const (directvP Fadjoin_sum_direct).",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "by apply: eq_bigr => i _; rewrite /= dim_cosetv.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma Fadjoin_poly_eq v : v \\in <<K; x>>%VS -> (Fadjoin_poly K x v).[x] = v.",
            "VernacStartTheoremProof",
            "d8539bc26babd6ea0662120db9dd72baea07fd75"
        ],
        [
            "move/(sumv_pi_sum Fadjoin_eq_sum)=> {2}<-; rewrite horner_poly.",
            "VernacExtend",
            "057edeb0967475c7ea5e8c98c449ddc5613eddc1"
        ],
        [
            "by apply: eq_bigr => i _; rewrite inord_val mulfVK.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma mempx_Fadjoin p : p \\is a polyOver K -> p.[x] \\in <<K; x>>%VS.",
            "VernacStartTheoremProof",
            "2e48853793886cfd40f0314ef7f6795db2003ecd"
        ],
        [
            "move=> Kp; rewrite rpred_horner ?memv_adjoin ?(polyOverS _ Kp) //.",
            "VernacExtend",
            "057edeb0967475c7ea5e8c98c449ddc5613eddc1"
        ],
        [
            "exact: subvP_adjoin.",
            "VernacExtend",
            "ce637ff86bafca5d8359473e8c02af644dcbdc43"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma Fadjoin_polyP {v} : reflect (exists2 p, p \\in polyOver K & v = p.[x]) (v \\in <<K; x>>%VS).",
            "VernacStartTheoremProof",
            "e51883445a29d364a295633bf2160abbfae0c222"
        ],
        [
            "apply: (iffP idP) => [Kx_v | [p Kp ->]]; last exact: mempx_Fadjoin.",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "by exists (Fadjoin_poly K x v); rewrite ?Fadjoin_polyOver ?Fadjoin_poly_eq.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma Fadjoin_poly_unique p v : p \\is a polyOver K -> size p <= n -> p.[x] = v -> Fadjoin_poly K x v = p.",
            "VernacStartTheoremProof",
            "270d7455afcdbbe34a34c658a4ad2decbdc631ed"
        ],
        [
            "have polyKx q i: q \\is a polyOver K -> q`_i * x ^+ i \\in (K * <[x ^+ i]>)%VS.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "by move/polyOverP=> Kq; rewrite memv_mul ?Kq ?memv_line.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "move=> Kp szp Dv; have /Fadjoin_poly_eq/eqP := mempx_Fadjoin Kp.",
            "VernacExtend",
            "ccd83c252dcbae3d56f3d057fcb8217878b51901"
        ],
        [
            "rewrite {1}Dv {Dv} !(@horner_coef_wide _ n) ?size_poly //.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "move/polyKx in Kp; have /polyKx K_pv := Fadjoin_polyOver K x v.",
            "VernacExtend",
            "ccd83c252dcbae3d56f3d057fcb8217878b51901"
        ],
        [
            "rewrite (directv_sum_unique Fadjoin_sum_direct) // => /eqfunP eq_pq.",
            "VernacExtend",
            "3c42b53d0efc26db114b00541ac5e7fcb29e6aeb"
        ],
        [
            "apply/polyP=> i; have [leni|?] := leqP n i; last exact: mulIf (eq_pq (Sub i _)).",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "by rewrite !nth_default ?(leq_trans _ leni) ?size_poly.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma Fadjoin_polyC v : v \\in K -> Fadjoin_poly K x v = v%:P.",
            "VernacStartTheoremProof",
            "6372643c55fc608298dc2b2014c71c3e2aa1ae99"
        ],
        [
            "move=> Kv; apply: Fadjoin_poly_unique; rewrite ?polyOverC ?hornerC //.",
            "VernacExtend",
            "f7feb259d6220ca40e8a86b90bd06f137aa140ac"
        ],
        [
            "by rewrite size_polyC (leq_trans (leq_b1 _)).",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma Fadjoin_polyX : x \\notin K -> Fadjoin_poly K x x = 'X.",
            "VernacStartTheoremProof",
            "fec7763499f96d732b18aac3ed213daef1f9408e"
        ],
        [
            "move=> K'x; apply: Fadjoin_poly_unique; rewrite ?polyOverX ?hornerX //.",
            "VernacExtend",
            "f7feb259d6220ca40e8a86b90bd06f137aa140ac"
        ],
        [
            "by rewrite size_polyX ltn_neqAle andbT eq_sym adjoin_deg_eq1.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma minPolyOver : minPoly K x \\is a polyOver K.",
            "VernacStartTheoremProof",
            "e7bd93b38b876e39291c51037afdf8f55897598c"
        ],
        [
            "by rewrite /minPoly rpredB ?rpredX ?polyOverX ?Fadjoin_polyOver.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma minPolyxx : (minPoly K x).[x] = 0.",
            "VernacStartTheoremProof",
            "13a3f09815a276f5394198a8c88468053014bd38"
        ],
        [
            "by rewrite !hornerE hornerXn Fadjoin_poly_eq ?subrr ?rpredX ?memv_adjoin.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma root_minPoly : root (minPoly K x) x.",
            "VernacStartTheoremProof",
            "572e1dfa5b8f071cebaf3f8b5334748eda558f3c"
        ],
        [
            "exact/rootP/minPolyxx.",
            "VernacExtend",
            "ce637ff86bafca5d8359473e8c02af644dcbdc43"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma Fadjoin_poly_mod p : p \\is a polyOver K -> Fadjoin_poly K x p.[x] = p %% minPoly K x.",
            "VernacStartTheoremProof",
            "e204575ab01fbc409fe57ff9a4fb66adec60b156"
        ],
        [
            "move=> Kp; rewrite {1}(divp_eq p (minPoly K x)) 2!hornerE minPolyxx mulr0 add0r.",
            "VernacExtend",
            "057edeb0967475c7ea5e8c98c449ddc5613eddc1"
        ],
        [
            "apply: Fadjoin_poly_unique => //; first by rewrite modp_polyOver // minPolyOver.",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "by rewrite -ltnS -size_minPoly ltn_modp // monic_neq0 ?monic_minPoly.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma minPoly_XsubC : reflect (minPoly K x = 'X - x%:P) (x \\in K).",
            "VernacStartTheoremProof",
            "c56436f863a8414af0603a4d34d46e3ea3d59b0d"
        ],
        [
            "set p := minPoly K x; apply: (iffP idP) => [Kx | Dp]; last first.",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "suffices ->: x = - p`_0 by rewrite rpredN (polyOverP minPolyOver).",
            "VernacExtend",
            "290ed488b5562e885aa2cac56f3a69b4faa0eaa6"
        ],
        [
            "by rewrite Dp coefB coefX coefC add0r opprK.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "rewrite (@all_roots_prod_XsubC _ p [:: x]) /= ?root_minPoly //.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "by rewrite big_seq1 (monicP (monic_minPoly K x)) scale1r.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "by apply/eqP; rewrite size_minPoly eqSS adjoin_deg_eq1.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma root_small_adjoin_poly p : p \\is a polyOver K -> size p <= n -> root p x = (p == 0).",
            "VernacStartTheoremProof",
            "4536d7926cc9f4a13ddf8b0964dea378796b011d"
        ],
        [
            "move=> Kp szp; apply/rootP/eqP=> [px0 | ->]; last by rewrite horner0.",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "rewrite -(Fadjoin_poly_unique Kp szp px0).",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "by apply: Fadjoin_poly_unique; rewrite ?polyOver0 ?size_poly0 ?horner0.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma minPoly_irr p : p \\is a polyOver K -> p %| minPoly K x -> (p %= minPoly K x) || (p %= 1).",
            "VernacStartTheoremProof",
            "241dfc68fdd57c40ff79aee6c35f1bb68fb0db4c"
        ],
        [
            "rewrite dvdp_eq; set q := _ %/ _ => Kp def_pq.",
            "VernacExtend",
            "80e7cce19c53eb5d5a21aafd83e552d37e23084a"
        ],
        [
            "have Kq: q \\is a polyOver K by rewrite divp_polyOver // minPolyOver.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "move: q Kq def_pq root_minPoly (size_minPoly K x) => q Kq /eqP->.",
            "VernacExtend",
            "b1b2cb7a3a617cba67460b4eca1f04de3c1cc716"
        ],
        [
            "rewrite rootM => pqx0 szpq.",
            "VernacExtend",
            "3c42b53d0efc26db114b00541ac5e7fcb29e6aeb"
        ],
        [
            "have [nzq nzp]: q != 0 /\\ p != 0.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "by apply/norP; rewrite -mulf_eq0 -size_poly_eq0 szpq.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "without loss{pqx0} qx0: q p Kp Kq nzp nzq szpq / root q x.",
            "VernacExtend",
            "87d5e7b04148ee8f2e4efcc847e0dfadae0aa4cb"
        ],
        [
            "move=> IH; case/orP: pqx0 => /IH{IH}IH; first exact: IH.",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "have{IH} /orP[]: (q %= p * q) || (q %= 1) by apply: IH => //; rewrite mulrC.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "by rewrite orbC -{1}[q]mul1r eqp_mul2r // eqp_sym => ->.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "by rewrite -{1}[p]mul1r eqp_sym eqp_mul2r // => ->.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "apply/orP; right; rewrite -size_poly_eq1 eqn_leq lt0n size_poly_eq0 nzp andbT.",
            "VernacExtend",
            "a61b786075f63912d19a92204545dae65f80572b"
        ],
        [
            "rewrite -(leq_add2r (size q)) -leq_subLR subn1 -size_mul // mulrC szpq.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "by rewrite ltnNge; apply: contra nzq => /(root_small_adjoin_poly Kq) <-.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma minPoly_dvdp p : p \\is a polyOver K -> root p x -> (minPoly K x) %| p.",
            "VernacStartTheoremProof",
            "8b1a88ef094b3f1b6032115633406b96a5fcff16"
        ],
        [
            "move=> Kp rootp.",
            "VernacExtend",
            "b1b2cb7a3a617cba67460b4eca1f04de3c1cc716"
        ],
        [
            "have gcdK : gcdp (minPoly K x) p \\is a polyOver K.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "by rewrite gcdp_polyOver ?minPolyOver.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "have /orP[gcd_eqK|gcd_eq1] := minPoly_irr gcdK (dvdp_gcdl (minPoly K x) p).",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "by rewrite -(eqp_dvdl _ gcd_eqK) dvdp_gcdr.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "case/negP: (root1 x).",
            "VernacExtend",
            "e00fff71ff314c991514fc71c41a3556702e444a"
        ],
        [
            "by rewrite -(eqp_root gcd_eq1) root_gcd rootp root_minPoly.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "End FadjoinPoly.",
            "VernacEndSegment",
            "65b85edea9c7bf790ec3c6581c29fe3e99d95fb0"
        ],
        [
            "Lemma minPolyS K E a : (K <= E)%VS -> minPoly E a %| minPoly K a.",
            "VernacStartTheoremProof",
            "07cc40059da954b1d92721f0d81b92e5b1a413aa"
        ],
        [
            "move=> sKE; apply: minPoly_dvdp; last exact: root_minPoly.",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "by apply: (polyOverSv sKE); rewrite minPolyOver.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Arguments Fadjoin_polyP {K x v}.",
            "VernacArguments",
            "e553cb2468e8a4ee16d245fcef1a0f1e3a1e1f9f"
        ],
        [
            "Lemma Fadjoin1_polyP x v : reflect (exists p, v = (map_poly (in_alg L) p).[x]) (v \\in <<1; x>>%VS).",
            "VernacStartTheoremProof",
            "46edb2feeb32039cdc3d00357dc50f74af99c7b2"
        ],
        [
            "apply: (iffP Fadjoin_polyP) => [[_ /polyOver1P]|] [p ->]; first by exists p.",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "by exists (map_poly (in_alg L) p) => //; apply: alg_polyOver.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Section Horner.",
            "VernacBeginSection",
            "71b8138e14761a00798dd2fd650a7d3dc9636fc8"
        ],
        [
            "Variables z : L.",
            "VernacAssumption",
            "7e6f253d59197e9401a1cf814c67ca19104f2389"
        ],
        [
            "Definition fieldExt_horner := horner_morph (fun x => mulrC z (in_alg L x)).",
            "VernacDefinition",
            "bf673d55f134f80eda6a2dfd9f8a5d6e44fd8059"
        ],
        [
            "Canonical fieldExtHorner_additive := [additive of fieldExt_horner].",
            "VernacDefinition",
            "926c6d8ca4515444e97ffa5463b221d21297692d"
        ],
        [
            "Canonical fieldExtHorner_rmorphism := [rmorphism of fieldExt_horner].",
            "VernacDefinition",
            "5d9612c1acbbb957f8cc7812e6fc33ecd6c71a2d"
        ],
        [
            "Lemma fieldExt_hornerC b : fieldExt_horner b%:P = b%:A.",
            "VernacStartTheoremProof",
            "17366af5ec900326fcef41ff63d4a72f03ff0c7d"
        ],
        [
            "exact: horner_morphC.",
            "VernacExtend",
            "ce637ff86bafca5d8359473e8c02af644dcbdc43"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma fieldExt_hornerX : fieldExt_horner 'X = z.",
            "VernacStartTheoremProof",
            "5ed851f796636163d858820a7afdd35d979af76c"
        ],
        [
            "exact: horner_morphX.",
            "VernacExtend",
            "ce637ff86bafca5d8359473e8c02af644dcbdc43"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Fact fieldExt_hornerZ : scalable fieldExt_horner.",
            "VernacStartTheoremProof",
            "9aee91a792893dfee34143e0a48be89bad325035"
        ],
        [
            "move=> a p; rewrite -mul_polyC rmorphM /= fieldExt_hornerC.",
            "VernacExtend",
            "057edeb0967475c7ea5e8c98c449ddc5613eddc1"
        ],
        [
            "by rewrite -scalerAl mul1r.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Canonical fieldExt_horner_linear := AddLinear fieldExt_hornerZ.",
            "VernacDefinition",
            "e4c3c2436bdb47a3304d934f0203768480c7b1f5"
        ],
        [
            "Canonical fieldExt_horner_lrmorhism := [lrmorphism of fieldExt_horner].",
            "VernacDefinition",
            "ccd130fa887c8460c0581d5091a3a8b29c4d3e5e"
        ],
        [
            "End Horner.",
            "VernacEndSegment",
            "339ec84f9d8732dc262dabb96b9179c529ad25e6"
        ],
        [
            "End FieldExtTheory.",
            "VernacEndSegment",
            "520994e12ec90b03b0d34dc9fba52f8c4b789b64"
        ],
        [
            "Notation \"E :&: F\" := (capv_aspace E F) : aspace_scope.",
            "VernacNotation",
            "9e7e1ed01e73e061bef790ab77b2961194b84352"
        ],
        [
            "Notation \"'C_ E [ x ]\" := (capv_aspace E 'C[x]) : aspace_scope.",
            "VernacNotation",
            "a943968369e2bea91af2449634605bd6a7d3a165"
        ],
        [
            "Notation \"'C_ ( E ) [ x ]\" := (capv_aspace E 'C[x]) (only parsing) : aspace_scope.",
            "VernacNotation",
            "970f4fb8f18cd432395b445dbe4058dcb3d34287"
        ],
        [
            "Notation \"'C_ E ( V )\" := (capv_aspace E 'C(V)) : aspace_scope.",
            "VernacNotation",
            "e6d238baa336e3efe81ee38f532eb807e6188d02"
        ],
        [
            "Notation \"'C_ ( E ) ( V )\" := (capv_aspace E 'C(V)) (only parsing) : aspace_scope.",
            "VernacNotation",
            "73f099d53d890a936ea929fc321d929921354a1a"
        ],
        [
            "Notation \"E * F\" := (prodv_aspace E F) : aspace_scope.",
            "VernacNotation",
            "d2a871dd77e95a76f7ef2fa6c89ebff2dead8914"
        ],
        [
            "Notation \"f @: E\" := (aimg_aspace f E) : aspace_scope.",
            "VernacNotation",
            "911c0854654d9248750ad204306b11dfbfa02258"
        ],
        [
            "Arguments Fadjoin_idP {F0 L K x}.",
            "VernacArguments",
            "6e99bd69de13877dd78874d0e38105b5eb96a39f"
        ],
        [
            "Arguments FadjoinP {F0 L K x E}.",
            "VernacArguments",
            "72281e29fd8b5d630e205d65989de5fc0b950b46"
        ],
        [
            "Arguments Fadjoin_seqP {F0 L K rs E}.",
            "VernacArguments",
            "e9692bbbaac4aa35401f1a831b93a7f98d6cc080"
        ],
        [
            "Arguments polyOver_subvs {F0 L K p}.",
            "VernacArguments",
            "400830bb1a635d3cc4775b103fb1793da0c81870"
        ],
        [
            "Arguments Fadjoin_polyP {F0 L K x v}.",
            "VernacArguments",
            "1c19f3422528c5fc8b558854dfd705ee05e4808f"
        ],
        [
            "Arguments Fadjoin1_polyP {F0 L x v}.",
            "VernacArguments",
            "598e5bca24d3bf6dd6c69f0396f2bdc5e6c12664"
        ],
        [
            "Arguments minPoly_XsubC {F0 L K x}.",
            "VernacArguments",
            "a79320b700b17a1c34d9fce57781f2acb9f31ca8"
        ],
        [
            "Section MapMinPoly.",
            "VernacBeginSection",
            "dd8cada309f4c2b1df0f22d2176c6a2420d2fe30"
        ],
        [
            "Variables (F0 : fieldType) (L rL : fieldExtType F0) (f : 'AHom(L, rL)).",
            "VernacAssumption",
            "9a999c1bcf21cd28a502a39e2fe27b8eddc80d90"
        ],
        [
            "Variables (K : {subfield L}) (x : L).",
            "VernacAssumption",
            "34dd0d882e4d475541db35c9dbed070193a9ef26"
        ],
        [
            "Lemma adjoin_degree_aimg : adjoin_degree (f @: K) (f x) = adjoin_degree K x.",
            "VernacStartTheoremProof",
            "3c799c3e38c3086f4893e2272649b3ae2fd75c54"
        ],
        [
            "rewrite !adjoin_degreeE -aimg_adjoin.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "by rewrite !limg_dim_eq ?(eqP (AHom_lker0 f)) ?capv0.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma map_minPoly : map_poly f (minPoly K x) = minPoly (f @: K) (f x).",
            "VernacStartTheoremProof",
            "08f0adee26de9798b60f3e2930f244f9f98787b9"
        ],
        [
            "set fp := minPoly (f @: K) (f x); pose fM := [rmorphism of f].",
            "VernacExtend",
            "dda58a04ca4da9adf6d016079f462c4d6ff69ca8"
        ],
        [
            "have [p Kp Dp]: exists2 p, p \\is a polyOver K & map_poly f p = fp.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "have Kfp: fp \\is a polyOver (f @: K)%VS by apply: minPolyOver.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "exists (map_poly f^-1%VF fp).",
            "VernacExtend",
            "d56738e657232a55547d09fc0790f1747a7353cb"
        ],
        [
            "apply/polyOver_poly=> j _; have /memv_imgP[y Ky ->] := polyOverP Kfp j.",
            "VernacExtend",
            "c574574294cc642b01d157e4c8f21ac2f90e4b5d"
        ],
        [
            "by rewrite lker0_lfunK ?AHom_lker0.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "rewrite -map_poly_comp map_poly_id // => _ /(allP Kfp)/memv_imgP[y _ ->].",
            "VernacExtend",
            "3c42b53d0efc26db114b00541ac5e7fcb29e6aeb"
        ],
        [
            "by rewrite /= limg_lfunVK ?memv_img ?memvf.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "apply/eqP; rewrite -eqp_monic ?monic_map ?monic_minPoly // -Dp eqp_map.",
            "VernacExtend",
            "56c014161b39aecfb3c54301c2409dba4e8e1857"
        ],
        [
            "have: ~~ (p %= 1) by rewrite -size_poly_eq1 -(size_map_poly fM) Dp size_minPoly.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "apply: implyP; rewrite implyNb orbC eqp_sym minPoly_irr //.",
            "VernacExtend",
            "56c014161b39aecfb3c54301c2409dba4e8e1857"
        ],
        [
            "rewrite -(dvdp_map fM) Dp minPoly_dvdp ?fmorph_root ?root_minPoly //.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "by apply/polyOver_poly=> j _; apply/memv_img/polyOverP/minPolyOver.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "End MapMinPoly.",
            "VernacEndSegment",
            "5f5456db1a67f2132ab44cf2257f81150242ea1a"
        ],
        [
            "Section FieldOver.",
            "VernacBeginSection",
            "cb985339cca761ecfbb3991e9f98ec35207c1ad1"
        ],
        [
            "Variables (F0 : fieldType) (L : fieldExtType F0) (F : {subfield L}).",
            "VernacAssumption",
            "41ecc23da1fb58769e2d32401c1e406a9f0e08e4"
        ],
        [
            "Definition fieldOver of {vspace L} : Type := L.",
            "VernacDefinition",
            "d4c040e4be4e3ce6be47ce28705cdb964643de3f"
        ],
        [
            "Local Notation K_F := (subvs_of F).",
            "VernacSyntacticDefinition",
            "bb1b380488556026e641902fec41f849972ceb12"
        ],
        [
            "Local Notation L_F := (fieldOver F).",
            "VernacSyntacticDefinition",
            "ef65a80d462a775712572bd83713fae75cb32393"
        ],
        [
            "Canonical fieldOver_eqType := [eqType of L_F].",
            "VernacDefinition",
            "b485bf9d4d90a38a904704d33f12a018e0f8100d"
        ],
        [
            "Canonical fieldOver_choiceType := [choiceType of L_F].",
            "VernacDefinition",
            "ca26b3b77f8eb75e297b2adf3684c0fc8f9fe261"
        ],
        [
            "Canonical fieldOver_zmodType := [zmodType of L_F].",
            "VernacDefinition",
            "a7a9979876acf57052f110f520c07778eccbd69d"
        ],
        [
            "Canonical fieldOver_ringType := [ringType of L_F].",
            "VernacDefinition",
            "70e6bc99b54c0a44250ad987b7c4a4c7a540aba3"
        ],
        [
            "Canonical fieldOver_unitRingType := [unitRingType of L_F].",
            "VernacDefinition",
            "6b2d9fd7abfd65e008d3d6bf07d9130f70456d6d"
        ],
        [
            "Canonical fieldOver_comRingType := [comRingType of L_F].",
            "VernacDefinition",
            "bef9564ecf2e38b877cea7670c1d19c011a68a64"
        ],
        [
            "Canonical fieldOver_comUnitRingType := [comUnitRingType of L_F].",
            "VernacDefinition",
            "695342abb2ce3cdb728371b316430d5fd1b2333e"
        ],
        [
            "Canonical fieldOver_idomainType := [idomainType of L_F].",
            "VernacDefinition",
            "2a51c982f99ca08cb2a9842e9b5d8eac68476dee"
        ],
        [
            "Canonical fieldOver_fieldType := [fieldType of L_F].",
            "VernacDefinition",
            "7500ca47f771e62904888e96973176c5e0c48614"
        ],
        [
            "Definition fieldOver_scale (a : K_F) (u : L_F) : L_F := vsval a * u.",
            "VernacDefinition",
            "6967562f283ee8a8f54fe68fff5208073f4a2913"
        ],
        [
            "Local Infix \"*F:\" := fieldOver_scale (at level 40).",
            "VernacInfix",
            "b424311424d850410288c41cc30c4abcaba50d2f"
        ],
        [
            "Fact fieldOver_scaleA a b u : a *F: (b *F: u) = (a * b) *F: u.",
            "VernacStartTheoremProof",
            "370e6d67fd12c50d47a86348ec378794b73c7e69"
        ],
        [
            "exact: mulrA.",
            "VernacExtend",
            "ce637ff86bafca5d8359473e8c02af644dcbdc43"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Fact fieldOver_scale1 u : 1 *F: u = u.",
            "VernacStartTheoremProof",
            "2d425cc2b05fbe7ae184cc2c27f237bb569edbb6"
        ],
        [
            "by rewrite /(1 *F: u) /= algid1 mul1r.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Fact fieldOver_scaleDr a u v : a *F: (u + v) = a *F: u + a *F: v.",
            "VernacStartTheoremProof",
            "a0f7538d01f1d94ab4706100319d9e5f1c922be6"
        ],
        [
            "exact: mulrDr.",
            "VernacExtend",
            "ce637ff86bafca5d8359473e8c02af644dcbdc43"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Fact fieldOver_scaleDl v a b : (a + b) *F: v = a *F: v + b *F: v.",
            "VernacStartTheoremProof",
            "c83496f8ef27f3959d59da42087bfbbbbbd93473"
        ],
        [
            "exact: mulrDl.",
            "VernacExtend",
            "ce637ff86bafca5d8359473e8c02af644dcbdc43"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Definition fieldOver_lmodMixin := LmodMixin fieldOver_scaleA fieldOver_scale1 fieldOver_scaleDr fieldOver_scaleDl.",
            "VernacDefinition",
            "b63834d737926109e359b3d6725217c75a8ebcfd"
        ],
        [
            "Canonical fieldOver_lmodType := LmodType K_F L_F fieldOver_lmodMixin.",
            "VernacDefinition",
            "5e25618a6eb3123d44ee101221b984d50fcb5cd0"
        ],
        [
            "Lemma fieldOver_scaleE a (u : L) : a *: (u : L_F) = vsval a * u.",
            "VernacStartTheoremProof",
            "d8946f368a994851a46f8a530580de2672212d47"
        ],
        [
            "by [].",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Fact fieldOver_scaleAl a u v : a *F: (u * v) = (a *F: u) * v.",
            "VernacStartTheoremProof",
            "a813d75620fdc33d74f552e6b5b7764c5522df93"
        ],
        [
            "exact: mulrA.",
            "VernacExtend",
            "ce637ff86bafca5d8359473e8c02af644dcbdc43"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Canonical fieldOver_lalgType := LalgType K_F L_F fieldOver_scaleAl.",
            "VernacDefinition",
            "601d252ca01678f477d61cb2565be29c8def8a6e"
        ],
        [
            "Fact fieldOver_scaleAr a u v : a *F: (u * v) = u * (a *F: v).",
            "VernacStartTheoremProof",
            "f654d37227ef9a6b3113cf7c774ce92549b16406"
        ],
        [
            "exact: mulrCA.",
            "VernacExtend",
            "ce637ff86bafca5d8359473e8c02af644dcbdc43"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Canonical fieldOver_algType := AlgType K_F L_F fieldOver_scaleAr.",
            "VernacDefinition",
            "d797e4c0da17e5217d8da6af191976eadfbc4fd4"
        ],
        [
            "Canonical fieldOver_unitAlgType := [unitAlgType K_F of L_F].",
            "VernacDefinition",
            "24954e01afe110d561a8a951a56e0e59a13db7d3"
        ],
        [
            "Fact fieldOver_vectMixin : Vector.mixin_of fieldOver_lmodType.",
            "VernacStartTheoremProof",
            "b2c7f31246096d00d05c865125b88f5aae343f91"
        ],
        [
            "have [bL [_ nz_bL] [defL dxSbL]] := field_module_semisimple (subvf (F * _)).",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "do [set n := \\dim_F {:L} in bL nz_bL *; set SbL := (\\sum_i _)%VS] in defL dxSbL.",
            "VernacExtend",
            "2ed5ae5c7a1513e882f170a2462d7a7c3c1ca435"
        ],
        [
            "have in_bL i (a : K_F) : val a * (bL`_i : L_F) \\in (F * <[bL`_i]>)%VS.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "by rewrite memv_mul ?(valP a) ?memv_line.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "have nz_bLi (i : 'I_n): bL`_i != 0 by rewrite (memPn nz_bL) ?memt_nth.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "pose r2v (v : 'rV[K_F]_n) : L_F := \\sum_i v 0 i *: (bL`_i : L_F).",
            "VernacExtend",
            "3c5f04de94609049d978298aa02ff35fb35ea7c7"
        ],
        [
            "have r2v_lin: linear r2v.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "move=> a u v; rewrite /r2v scaler_sumr -big_split /=; apply: eq_bigr => i _.",
            "VernacExtend",
            "0fa388cebe8ed6372154caa26cd10c357f123670"
        ],
        [
            "by rewrite scalerA -scalerDl !mxE.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "have v2rP x: {r : 'rV[K_F]_n | x = r2v r}.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "apply: sig_eqW; have /memv_sumP[y Fy ->]: x \\in SbL by rewrite defL memvf.",
            "VernacExtend",
            "c574574294cc642b01d157e4c8f21ac2f90e4b5d"
        ],
        [
            "have /fin_all_exists[r Dr] i: exists r, y i = r *: (bL`_i : L_F).",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "by have /memv_cosetP[a Fa ->] := Fy i isT; exists (Subvs Fa).",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "by exists (\\row_i r i); apply: eq_bigr => i _; rewrite mxE.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "pose v2r x := sval (v2rP x).",
            "VernacExtend",
            "3c5f04de94609049d978298aa02ff35fb35ea7c7"
        ],
        [
            "have v2rK: cancel v2r (Linear r2v_lin) by rewrite /v2r => x; case: (v2rP x).",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "suffices r2vK: cancel r2v v2r.",
            "VernacExtend",
            "290ed488b5562e885aa2cac56f3a69b4faa0eaa6"
        ],
        [
            "by exists n, v2r; [apply: can2_linear v2rK | exists r2v].",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "move=> r; apply/rowP=> i; apply/val_inj/(mulIf (nz_bLi i))/eqP; move: i isT.",
            "VernacExtend",
            "29765d52d1ebc7805de64975ff26cf4e34248a22"
        ],
        [
            "by apply/forall_inP; move/directv_sum_unique: dxSbL => <- //; apply/eqP/v2rK.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Canonical fieldOver_vectType := VectType K_F L_F fieldOver_vectMixin.",
            "VernacDefinition",
            "b9163dee2d36b5c6653d4038b6d157138b3aa257"
        ],
        [
            "Canonical fieldOver_FalgType := [FalgType K_F of L_F].",
            "VernacDefinition",
            "04193ad9b25b985b968f46a0ce388c3e55440e60"
        ],
        [
            "Canonical fieldOver_fieldExtType := [fieldExtType K_F of L_F].",
            "VernacDefinition",
            "db7010a55178433b3190cc3b9f7dacef812e370a"
        ],
        [
            "Implicit Types (V : {vspace L}) (E : {subfield L}).",
            "VernacReserve",
            "97462cd4690535c77f21e2d6b88f89d404eabaf4"
        ],
        [
            "Lemma trivial_fieldOver : (1%VS : {vspace L_F}) =i F.",
            "VernacStartTheoremProof",
            "c4d31e935444f444c9fc927aad44a2685c94ae91"
        ],
        [
            "move=> x; apply/vlineP/idP=> [[{x}x ->] | Fx].",
            "VernacExtend",
            "d6ebf3361f380a12d5c2c9bbb7ea363132c48b36"
        ],
        [
            "by rewrite fieldOver_scaleE mulr1 (valP x).",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "by exists (vsproj F x); rewrite fieldOver_scaleE mulr1 vsprojK.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Definition vspaceOver V := <<vbasis V : seq L_F>>%VS.",
            "VernacDefinition",
            "779d1de4fdbaf365dd8f29101f32f9e77cacd802"
        ],
        [
            "Lemma mem_vspaceOver V : vspaceOver V =i (F * V)%VS.",
            "VernacStartTheoremProof",
            "e49e950cfe5eff6a3cf3eb579a92dffcf661aae6"
        ],
        [
            "move=> y; apply/idP/idP; last rewrite unlock; move/coord_span->.",
            "VernacExtend",
            "ee013142fd2496f1dcf40016e16dbe811dd82008"
        ],
        [
            "rewrite (@memv_suml F0 L) // => i _.",
            "VernacExtend",
            "3c42b53d0efc26db114b00541ac5e7fcb29e6aeb"
        ],
        [
            "by rewrite memv_mul ?subvsP // vbasis_mem ?memt_nth.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "rewrite memv_suml // => ij _; rewrite -tnth_nth; set x := tnth _ ij.",
            "VernacExtend",
            "39b867a039ef6cbde0b79e2a0f18beb583122b27"
        ],
        [
            "have/allpairsP[[u z] /= [Fu Vz {x}->]]: x \\in _ := mem_tnth ij _.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "by rewrite scalerAl (memvZ (Subvs _)) ?memvZ ?memv_span //= vbasis_mem.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma mem_aspaceOver E : (F <= E)%VS -> vspaceOver E =i E.",
            "VernacStartTheoremProof",
            "83f056286964656f083119c05ac945f11bafcb76"
        ],
        [
            "by move=> sFE y; rewrite mem_vspaceOver field_module_eq ?sup_field_module.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Fact aspaceOver_suproof E : is_aspace (vspaceOver E).",
            "VernacStartTheoremProof",
            "2dcbf6c9698cdd44563cb0e22285669b8179cf95"
        ],
        [
            "rewrite /is_aspace has_algid1; last by rewrite mem_vspaceOver (@mem1v _ L).",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "by apply/prodvP=> u v; rewrite !mem_vspaceOver; apply: memvM.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Canonical aspaceOver E := ASpace (aspaceOver_suproof E).",
            "VernacDefinition",
            "e3759bff8ff11a8e86f129befc30014d2b65211b"
        ],
        [
            "Lemma dim_vspaceOver M : (F * M <= M)%VS -> \\dim (vspaceOver M) = \\dim_F M.",
            "VernacStartTheoremProof",
            "6ecd1bc5d6353f2558aaff56ce9f7b57086f9db0"
        ],
        [
            "move=> modM; have [] := field_module_semisimple modM.",
            "VernacExtend",
            "ccd83c252dcbae3d56f3d057fcb8217878b51901"
        ],
        [
            "set n := \\dim_F M => b [Mb nz_b] [defM dx_b].",
            "VernacExtend",
            "3c42b53d0efc26db114b00541ac5e7fcb29e6aeb"
        ],
        [
            "suff: basis_of (vspaceOver M) b by apply: size_basis.",
            "VernacExtend",
            "d07fc8b2103f140554938023774bf3f75d04ba99"
        ],
        [
            "apply/andP; split.",
            "VernacExtend",
            "b146763f64aeff143afb9ba1b7b1a677b4726e0f"
        ],
        [
            "rewrite eqEsubv; apply/andP; split; apply/span_subvP=> u.",
            "VernacExtend",
            "411ab4a64a4ea80a8715dbdaf80775b735845cfc"
        ],
        [
            "by rewrite mem_vspaceOver field_module_eq // => /Mb.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "move/(@vbasis_mem _ _ _ M); rewrite -defM => /memv_sumP[{u}u Fu ->].",
            "VernacExtend",
            "8261237f0cda1915a4077c28869831c5329103ce"
        ],
        [
            "apply: memv_suml => i _; have /memv_cosetP[a Fa ->] := Fu i isT.",
            "VernacExtend",
            "c574574294cc642b01d157e4c8f21ac2f90e4b5d"
        ],
        [
            "by apply: (memvZ (Subvs Fa)); rewrite memv_span ?memt_nth.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "apply/freeP=> a /(directv_sum_independent dx_b) a_0 i.",
            "VernacExtend",
            "4bd6fa79b17bcd2bfb7af091fb325367a20385d6"
        ],
        [
            "have{a_0}: a i *: (b`_i : L_F) == 0.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "by rewrite a_0 {i}// => i _; rewrite memv_mul ?memv_line ?subvsP.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "by rewrite scaler_eq0=> /predU1P[] // /idPn[]; rewrite (memPn nz_b) ?memt_nth.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma dim_aspaceOver E : (F <= E)%VS -> \\dim (vspaceOver E) = \\dim_F E.",
            "VernacStartTheoremProof",
            "1e4fb3945506361b78217aa9a78510bcdbbbbeee"
        ],
        [
            "by rewrite -sup_field_module; apply: dim_vspaceOver.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma vspaceOverP V_F : {V | [/\\ V_F = vspaceOver V, (F * V <= V)%VS & V_F =i V]}.",
            "VernacStartTheoremProof",
            "503390fe421f6424f84594616958c5e1078a39af"
        ],
        [
            "pose V := (F * <<vbasis V_F : seq L>>)%VS.",
            "VernacExtend",
            "3c5f04de94609049d978298aa02ff35fb35ea7c7"
        ],
        [
            "have idV: (F * V)%VS = V by rewrite prodvA prodv_id.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "suffices defVF: V_F = vspaceOver V.",
            "VernacExtend",
            "290ed488b5562e885aa2cac56f3a69b4faa0eaa6"
        ],
        [
            "by exists V; split=> [||u]; rewrite ?defVF ?mem_vspaceOver ?idV.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "apply/vspaceP=> v; rewrite mem_vspaceOver idV.",
            "VernacExtend",
            "56c014161b39aecfb3c54301c2409dba4e8e1857"
        ],
        [
            "do [apply/idP/idP; last rewrite /V unlock] => [/coord_vbasis|/coord_span] ->.",
            "VernacExtend",
            "3c42b53d0efc26db114b00541ac5e7fcb29e6aeb"
        ],
        [
            "by apply: memv_suml => i _; rewrite memv_mul ?subvsP ?memv_span ?memt_nth.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "apply: memv_suml => i _; rewrite -tnth_nth; set xu := tnth _ i.",
            "VernacExtend",
            "c0b55a279182ecd0a9c92c4d7ab71c7e81eac100"
        ],
        [
            "have /allpairsP[[x u] /=]: xu \\in _ := mem_tnth i _.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "case=> /vbasis_mem Fx /vbasis_mem Vu ->.",
            "VernacExtend",
            "e00fff71ff314c991514fc71c41a3556702e444a"
        ],
        [
            "rewrite scalerAl (coord_span Vu) mulr_sumr memv_suml // => j_.",
            "VernacExtend",
            "3c42b53d0efc26db114b00541ac5e7fcb29e6aeb"
        ],
        [
            "by rewrite -scalerCA (memvZ (Subvs _)) ?memvZ // vbasis_mem ?memt_nth.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma aspaceOverP (E_F : {subfield L_F}) : {E | [/\\ E_F = aspaceOver E, (F <= E)%VS & E_F =i E]}.",
            "VernacStartTheoremProof",
            "f0e7da7be7420c23f75746b9430d846d25bea2a3"
        ],
        [
            "have [V [defEF modV memV]] := vspaceOverP E_F.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "have algE: has_algid V && (V * V <= V)%VS.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "rewrite has_algid1; last by rewrite -memV mem1v.",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "by apply/prodvP=> u v; rewrite -!memV; apply: memvM.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "by exists (ASpace algE); rewrite -sup_field_module; split; first apply: val_inj.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "End FieldOver.",
            "VernacEndSegment",
            "beade46219bd9db165d398cb1be49ba1971cc3c5"
        ],
        [
            "Section BaseField.",
            "VernacBeginSection",
            "16dacf87f60f4018d16043956171379504994b58"
        ],
        [
            "Variables (F0 : fieldType) (F : fieldExtType F0) (L : fieldExtType F).",
            "VernacAssumption",
            "697f374a68dfbcde86661d0dec94d376204a07a6"
        ],
        [
            "Definition baseField_type of phant L : Type := L.",
            "VernacDefinition",
            "6715cf2ebceace9f52db03cd7f783fe0e0384586"
        ],
        [
            "Notation L0 := (baseField_type (Phant (FieldExt.sort L))).",
            "VernacSyntacticDefinition",
            "32334db1f3082e1795ba8d34bb8b97170b6d6eac"
        ],
        [
            "Canonical baseField_eqType := [eqType of L0].",
            "VernacDefinition",
            "fa201a4126e2052d818ee2411332db390c61cd09"
        ],
        [
            "Canonical baseField_choiceType := [choiceType of L0].",
            "VernacDefinition",
            "6c97d3fafbe068c84a87d94dabd762fdfe2ea001"
        ],
        [
            "Canonical baseField_zmodType := [zmodType of L0].",
            "VernacDefinition",
            "40e8eebddfaaabd68cbdd49cf85e609eecf8c0aa"
        ],
        [
            "Canonical baseField_ringType := [ringType of L0].",
            "VernacDefinition",
            "89844159444f0bfe55f81a34e1ee0515a6d4e7b2"
        ],
        [
            "Canonical baseField_unitRingType := [unitRingType of L0].",
            "VernacDefinition",
            "95ab8154a47a17db931996e5f63ea9bd6cbfc5e9"
        ],
        [
            "Canonical baseField_comRingType := [comRingType of L0].",
            "VernacDefinition",
            "7d7171a306349f1b18ff550efc32137ac7f71e22"
        ],
        [
            "Canonical baseField_comUnitRingType := [comUnitRingType of L0].",
            "VernacDefinition",
            "7bbf2e4789daf6736982ed2527f242dfcdcebfd4"
        ],
        [
            "Canonical baseField_idomainType := [idomainType of L0].",
            "VernacDefinition",
            "6d4c1331f3ada3617110b0a76b5e8a506e27d22c"
        ],
        [
            "Canonical baseField_fieldType := [fieldType of L0].",
            "VernacDefinition",
            "6514319897d9b56c0c793260a136fdf6ac91f2bb"
        ],
        [
            "Definition baseField_scale (a : F0) (u : L0) : L0 := in_alg F a *: u.",
            "VernacDefinition",
            "c2b0b37ae7d5a5236fab8131d9a1611a01b37243"
        ],
        [
            "Local Infix \"*F0:\" := baseField_scale (at level 40).",
            "VernacInfix",
            "4b4ef6553f8446e40edd92c5bc78bf48388ec1e5"
        ],
        [
            "Fact baseField_scaleA a b u : a *F0: (b *F0: u) = (a * b) *F0: u.",
            "VernacStartTheoremProof",
            "8790c4e0772518cf1408988fce770460efdef8e8"
        ],
        [
            "by rewrite [_ *F0: _]scalerA -rmorphM.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Fact baseField_scale1 u : 1 *F0: u = u.",
            "VernacStartTheoremProof",
            "523dff024af12db533d4e72fd211a970ce5ed6de"
        ],
        [
            "by rewrite /(1 *F0: u) rmorph1 scale1r.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Fact baseField_scaleDr a u v : a *F0: (u + v) = a *F0: u + a *F0: v.",
            "VernacStartTheoremProof",
            "38c21cfe81dc539252a19f2b62acf8cc33f2fa40"
        ],
        [
            "exact: scalerDr.",
            "VernacExtend",
            "ce637ff86bafca5d8359473e8c02af644dcbdc43"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Fact baseField_scaleDl v a b : (a + b) *F0: v = a *F0: v + b *F0: v.",
            "VernacStartTheoremProof",
            "c3ca5399aa7a683191ef4ddd9060d04de2347a40"
        ],
        [
            "by rewrite -scalerDl -rmorphD.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Definition baseField_lmodMixin := LmodMixin baseField_scaleA baseField_scale1 baseField_scaleDr baseField_scaleDl.",
            "VernacDefinition",
            "beea2edcdd157641949028b85dcab82aed854ad4"
        ],
        [
            "Canonical baseField_lmodType := LmodType F0 L0 baseField_lmodMixin.",
            "VernacDefinition",
            "013ff68361f91eaea1b3467044fb1e370bce0b05"
        ],
        [
            "Lemma baseField_scaleE a (u : L) : a *: (u : L0) = a%:A *: u.",
            "VernacStartTheoremProof",
            "fe2794e68cc9721e914e71d5a178b2d856a76a66"
        ],
        [
            "by [].",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Fact baseField_scaleAl a (u v : L0) : a *F0: (u * v) = (a *F0: u) * v.",
            "VernacStartTheoremProof",
            "999eb8dcca9b2ef83b8625fa579902555853038d"
        ],
        [
            "exact: scalerAl.",
            "VernacExtend",
            "ce637ff86bafca5d8359473e8c02af644dcbdc43"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Canonical baseField_lalgType := LalgType F0 L0 baseField_scaleAl.",
            "VernacDefinition",
            "ef8d20ed62a34bfeedb8c04806df5187f8cbdb3a"
        ],
        [
            "Fact baseField_scaleAr a u v : a *F0: (u * v) = u * (a *F0: v).",
            "VernacStartTheoremProof",
            "f71cb7ae808f8f0d8b935a17316dc4bc97d03f2b"
        ],
        [
            "exact: scalerAr.",
            "VernacExtend",
            "ce637ff86bafca5d8359473e8c02af644dcbdc43"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Canonical baseField_algType := AlgType F0 L0 baseField_scaleAr.",
            "VernacDefinition",
            "7e174638bce3ab6e1dfca50676a5ddcb391aaa42"
        ],
        [
            "Canonical baseField_unitAlgType := [unitAlgType F0 of L0].",
            "VernacDefinition",
            "6ec7127dbb6b61bb679408a4f91b8f9dcdd3ffa7"
        ],
        [
            "Let n := \\dim {:F}.",
            "VernacDefinition",
            "a9c7e806f7c9a3165354f5d094576bfc0a80d518"
        ],
        [
            "Let bF : n.-tuple F := vbasis {:F}.",
            "VernacDefinition",
            "357fdd54415081091c3b2034fc04efd153888860"
        ],
        [
            "Let coordF (x : F) := (coord_vbasis (memvf x)).",
            "VernacDefinition",
            "142e8955fccf5dfe6ed164e2e6a3c8ea743ca433"
        ],
        [
            "Fact baseField_vectMixin : Vector.mixin_of baseField_lmodType.",
            "VernacStartTheoremProof",
            "6a8635ba33279813c48fadf6fcdb12ecf1988328"
        ],
        [
            "pose bL := vbasis {:L}; set m := \\dim {:L} in bL.",
            "VernacExtend",
            "9fb5f9e31e2512a271fa21fe890324d2e3052c71"
        ],
        [
            "pose v2r (x : L0) := mxvec (\\matrix_(i, j) coord bF j (coord bL i x)).",
            "VernacExtend",
            "3c5f04de94609049d978298aa02ff35fb35ea7c7"
        ],
        [
            "have v2r_lin: linear v2r.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "move=> a x y; rewrite -linearP; congr (mxvec _); apply/matrixP=> i j.",
            "VernacExtend",
            "dcb80cc02c546d84cccf311f4860161d64102fc1"
        ],
        [
            "by rewrite !mxE linearP mulr_algl linearP.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "pose r2v r := \\sum_(i < m) (\\sum_(j < n) vec_mx r i j *: bF`_j) *: bL`_i.",
            "VernacExtend",
            "3c5f04de94609049d978298aa02ff35fb35ea7c7"
        ],
        [
            "have v2rK: cancel v2r r2v.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "move=> x; transitivity (\\sum_(i < m) coord bL i x *: bL`_i); last first.",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "by rewrite -coord_vbasis ?memvf.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "apply: eq_bigr => i _; rewrite mxvecK; congr (_ *: _ : L).",
            "VernacExtend",
            "91580bd9cdf2cad626638a70b66bf9b00afa41b1"
        ],
        [
            "by rewrite (coordF (coord bL i x)); apply: eq_bigr => j _; rewrite mxE.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "exists (m * n)%N, v2r => //; exists r2v => // r.",
            "VernacExtend",
            "fbaa61af20867a5dfb8bb5213ca8048b258f8f3a"
        ],
        [
            "apply: (canLR vec_mxK); apply/matrixP=> i j; rewrite mxE.",
            "VernacExtend",
            "7d4450169cd8610cf3ff90cd2eeb2f84258ab13d"
        ],
        [
            "by rewrite !coord_sum_free ?(basis_free (vbasisP _)).",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Canonical baseField_vectType := VectType F0 L0 baseField_vectMixin.",
            "VernacDefinition",
            "45f4a09d6b637d7f53f182fe65cc468ce284aaed"
        ],
        [
            "Canonical baseField_FalgType := [FalgType F0 of L0].",
            "VernacDefinition",
            "612e3b636b3764617f94f287501f4a3eb22828da"
        ],
        [
            "Canonical baseField_extFieldType := [fieldExtType F0 of L0].",
            "VernacDefinition",
            "1b5594a29901af40a2ed16b06beca4803f72f1d2"
        ],
        [
            "Let F0ZEZ a x v : a *: ((x *: v : L) : L0) = (a *: x) *: v.",
            "VernacDefinition",
            "72b8a5b55ca47610b587ce7155dd35a1789a2277"
        ],
        [
            "by rewrite [a *: _]scalerA -scalerAl mul1r.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Let baseVspace_basis V : seq L0 := [seq tnth bF ij.2 *: tnth (vbasis V) ij.1 | ij : 'I_(\\dim V) * 'I_n].",
            "VernacDefinition",
            "24406b1cb83010b0a41306bd8822d453374f3c2a"
        ],
        [
            "Definition baseVspace V := <<baseVspace_basis V>>%VS.",
            "VernacDefinition",
            "a1b797e813e26323e89f7b0f8b1e6ce4467fd735"
        ],
        [
            "Lemma mem_baseVspace V : baseVspace V =i V.",
            "VernacStartTheoremProof",
            "94b9c544607ab8ba68fe5745efff9ebd40006897"
        ],
        [
            "move=> y; apply/idP/idP=> [/coord_span->|/coord_vbasis->]; last first.",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "apply: memv_suml => i _; rewrite (coordF (coord _ i (y : L))) scaler_suml -/n.",
            "VernacExtend",
            "56c014161b39aecfb3c54301c2409dba4e8e1857"
        ],
        [
            "apply: memv_suml => j _; rewrite -/bF -F0ZEZ memvZ ?memv_span // -!tnth_nth.",
            "VernacExtend",
            "56c014161b39aecfb3c54301c2409dba4e8e1857"
        ],
        [
            "by apply/imageP; exists (i, j).",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "apply: memv_suml => k _; rewrite nth_image; case: (enum_val k) => i j /=.",
            "VernacExtend",
            "5caed936835e366e9e533d8f19382dcfedbf86d4"
        ],
        [
            "by rewrite F0ZEZ memvZ ?vbasis_mem ?mem_tnth.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma dim_baseVspace V : \\dim (baseVspace V) = (\\dim V * n)%N.",
            "VernacStartTheoremProof",
            "e20d60864ebe8a406436e5acf9509706a9f40866"
        ],
        [
            "pose bV0 := baseVspace_basis V; set m := \\dim V in bV0 *.",
            "VernacExtend",
            "9fb5f9e31e2512a271fa21fe890324d2e3052c71"
        ],
        [
            "suffices /size_basis->: basis_of (baseVspace V) bV0.",
            "VernacExtend",
            "290ed488b5562e885aa2cac56f3a69b4faa0eaa6"
        ],
        [
            "by rewrite card_prod !card_ord.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "rewrite /basis_of eqxx.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "apply/freeP=> s sb0 k; rewrite -(enum_valK k); case/enum_val: k => i j.",
            "VernacExtend",
            "5caed936835e366e9e533d8f19382dcfedbf86d4"
        ],
        [
            "have free_baseP := freeP (basis_free (vbasisP _)).",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "move: j; apply: (free_baseP _ _ fullv); move: i; apply: (free_baseP _ _ V).",
            "VernacExtend",
            "98c4348e968caab8d9a98b9de4fcaeb09895a133"
        ],
        [
            "transitivity (\\sum_i \\sum_j s (enum_rank (i, j)) *: bV0`_(enum_rank (i, j))).",
            "VernacExtend",
            "d6b81116b8df3d0275e66798e9011af34713e3ce"
        ],
        [
            "apply: eq_bigr => i _; rewrite scaler_suml; apply: eq_bigr => j _.",
            "VernacExtend",
            "da24caf87c1bbbad0538b8be68905ec456c78aa7"
        ],
        [
            "by rewrite -F0ZEZ nth_image enum_rankK -!tnth_nth.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "rewrite pair_bigA (reindex _ (onW_bij _ (enum_val_bij _))); apply: etrans sb0.",
            "VernacExtend",
            "634a7639ed2fb7caf62757f84400927f5829b7d5"
        ],
        [
            "by apply: eq_bigr => k _; rewrite -{5 6}[k](enum_valK k); case/enum_val: k.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Fact baseAspace_suproof (E : {subfield L}) : is_aspace (baseVspace E).",
            "VernacStartTheoremProof",
            "8fe44970b87979be86d484511685ff51293a4751"
        ],
        [
            "rewrite /is_aspace has_algid1; last by rewrite mem_baseVspace (mem1v E).",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "by apply/prodvP=> u v; rewrite !mem_baseVspace; apply: memvM.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Canonical baseAspace E := ASpace (baseAspace_suproof E).",
            "VernacDefinition",
            "02e40f689fc92cd5c847bbdbbcd40648b58c0bae"
        ],
        [
            "Fact refBaseField_key : unit.",
            "VernacStartTheoremProof",
            "7c80f6c3aa7e9495610bd45d9aa81426f45af764"
        ],
        [
            "by [].",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Definition refBaseField := locked_with refBaseField_key (baseAspace 1).",
            "VernacDefinition",
            "6eb823f7b4152070eba489e06ad1832574ca4119"
        ],
        [
            "Canonical refBaseField_unlockable := [unlockable of refBaseField].",
            "VernacDefinition",
            "fa93c9b9220b6175390a62de22b646d2ad58b1b0"
        ],
        [
            "Notation F1 := refBaseField.",
            "VernacSyntacticDefinition",
            "f97e9654d75f0e45b946191ca291d9725625d55f"
        ],
        [
            "Lemma dim_refBaseField : \\dim F1 = n.",
            "VernacStartTheoremProof",
            "c663638a8a47368b95b33515eed2deaabedaa588"
        ],
        [
            "by rewrite [F1]unlock dim_baseVspace dimv1 mul1n.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma baseVspace_module V (V0 := baseVspace V) : (F1 * V0 <= V0)%VS.",
            "VernacStartTheoremProof",
            "d17180fe1692e6594ac9d52a5585c887878194b1"
        ],
        [
            "apply/prodvP=> u v; rewrite [F1]unlock !mem_baseVspace => /vlineP[x ->] Vv.",
            "VernacExtend",
            "5fce7e5361004176d6b434b36b4623c7387f70bb"
        ],
        [
            "by rewrite -(@scalerAl F L) mul1r; apply: memvZ.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma sub_baseField (E : {subfield L}) : (F1 <= baseVspace E)%VS.",
            "VernacStartTheoremProof",
            "e7bc7d6035d714284b7c192267d9b40049fbea07"
        ],
        [
            "by rewrite -sup_field_module baseVspace_module.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma vspaceOver_refBase V : vspaceOver F1 (baseVspace V) =i V.",
            "VernacStartTheoremProof",
            "ac4437ce2ebee4c974751f148ed8695d8192741b"
        ],
        [
            "move=> v; rewrite mem_vspaceOver field_module_eq ?baseVspace_module //.",
            "VernacExtend",
            "057edeb0967475c7ea5e8c98c449ddc5613eddc1"
        ],
        [
            "by rewrite mem_baseVspace.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma module_baseVspace M0 : (F1 * M0 <= M0)%VS -> {V | M0 = baseVspace V & M0 =i V}.",
            "VernacStartTheoremProof",
            "7d78053164b4c1bb4cedf7885c8f6b6d1bb622f3"
        ],
        [
            "move=> modM0; pose V := <<vbasis (vspaceOver F1 M0) : seq L>>%VS.",
            "VernacExtend",
            "fef3c4a8f7fcf70b0824f3cce5fb58f2e0ef07fd"
        ],
        [
            "suffices memM0: M0 =i V.",
            "VernacExtend",
            "290ed488b5562e885aa2cac56f3a69b4faa0eaa6"
        ],
        [
            "by exists V => //; apply/vspaceP=> v; rewrite mem_baseVspace memM0.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "move=> v; rewrite -{1}(field_module_eq modM0) -(mem_vspaceOver M0) {}/V.",
            "VernacExtend",
            "057edeb0967475c7ea5e8c98c449ddc5613eddc1"
        ],
        [
            "move: (vspaceOver F1 M0) => M.",
            "VernacExtend",
            "b1b2cb7a3a617cba67460b4eca1f04de3c1cc716"
        ],
        [
            "apply/idP/idP=> [/coord_vbasis|/coord_span]->; apply/memv_suml=> i _.",
            "VernacExtend",
            "8d9dae45eeb3a769b8a865cef8ae476451f63802"
        ],
        [
            "rewrite /(_ *: _) /= /fieldOver_scale; case: (coord _ i _) => /= x.",
            "VernacExtend",
            "712d339e99ee17eb7d5033e19ac614eb3ca6b532"
        ],
        [
            "rewrite {1}[F1]unlock mem_baseVspace => /vlineP[{x}x ->].",
            "VernacExtend",
            "3c42b53d0efc26db114b00541ac5e7fcb29e6aeb"
        ],
        [
            "by rewrite -(@scalerAl F L) mul1r memvZ ?memv_span ?memt_nth.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "move: (coord _ i _) => x; rewrite -[_`_i]mul1r scalerAl -tnth_nth.",
            "VernacExtend",
            "057edeb0967475c7ea5e8c98c449ddc5613eddc1"
        ],
        [
            "have F1x: x%:A \\in F1.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "by rewrite [F1]unlock mem_baseVspace (@memvZ F L) // mem1v.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "by congr (_ \\in M): (memvZ (Subvs F1x) (vbasis_mem (mem_tnth i _))).",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma module_baseAspace (E0 : {subfield L0}) : (F1 <= E0)%VS -> {E | E0 = baseAspace E & E0 =i E}.",
            "VernacStartTheoremProof",
            "16460e7e609eda48aed4e6afe25a06c69768c80a"
        ],
        [
            "rewrite -sup_field_module => /module_baseVspace[E defE0 memE0].",
            "VernacExtend",
            "3c42b53d0efc26db114b00541ac5e7fcb29e6aeb"
        ],
        [
            "suffices algE: is_aspace E by exists (ASpace algE); first apply: val_inj.",
            "VernacExtend",
            "290ed488b5562e885aa2cac56f3a69b4faa0eaa6"
        ],
        [
            "rewrite /is_aspace has_algid1 -?memE0 ?mem1v //.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "by apply/prodvP=> u v; rewrite -!memE0; apply: memvM.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "End BaseField.",
            "VernacEndSegment",
            "aa9cd3fdda1e1fad062d26161efc2d60aceaa041"
        ],
        [
            "Notation baseFieldType L := (baseField_type (Phant L)).",
            "VernacSyntacticDefinition",
            "a577402ffcff41d1dd989072b6b056a381048673"
        ],
        [
            "Section MoreFieldOver.",
            "VernacBeginSection",
            "892721a47eebe22bd53a88777d5a2a89f9103f17"
        ],
        [
            "Variables (F0 : fieldType) (L : fieldExtType F0) (F : {subfield L}).",
            "VernacAssumption",
            "41ecc23da1fb58769e2d32401c1e406a9f0e08e4"
        ],
        [
            "Lemma base_vspaceOver V : baseVspace (vspaceOver F V) =i (F * V)%VS.",
            "VernacStartTheoremProof",
            "dbcf759ed9b4166b42a6e3b11ac85a69c666ca45"
        ],
        [
            "by move=> v; rewrite mem_baseVspace mem_vspaceOver.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma base_moduleOver V : (F * V <= V)%VS -> baseVspace (vspaceOver F V) =i V.",
            "VernacStartTheoremProof",
            "22e8f114db05232890756c18d9dfc6f80ef2c6f9"
        ],
        [
            "by move=> /field_module_eq defV v; rewrite base_vspaceOver defV.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma base_aspaceOver (E : {subfield L}) : (F <= E)%VS -> baseVspace (vspaceOver F E) =i E.",
            "VernacStartTheoremProof",
            "73aff9e2e53aadb9b80a05266b0eb1e254d9506b"
        ],
        [
            "by rewrite -sup_field_module; apply: base_moduleOver.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "End MoreFieldOver.",
            "VernacEndSegment",
            "19f360703b983e9014609ec9b472c4b0ef256c64"
        ],
        [
            "Section SubFieldExtension.",
            "VernacBeginSection",
            "3184f14d80aaa8b6a266ce02e159bdfd947ff069"
        ],
        [
            "Local Open Scope quotient_scope.",
            "VernacOpenCloseScope",
            "d27d8214bf1167cb740fe551598349d95a0016a3"
        ],
        [
            "Variables (F L : fieldType) (iota : {rmorphism F -> L}).",
            "VernacAssumption",
            "4eda64e0e2a8cda5cd8c06aae11eb40e829c9a08"
        ],
        [
            "Variables (z : L) (p : {poly F}).",
            "VernacAssumption",
            "53a573780c25fdcfd4788d72a1dd1f5fb7bd98aa"
        ],
        [
            "Local Notation \"p ^iota\" := (map_poly (GRing.RMorphism.apply iota) p) (at level 2, format \"p ^iota\") : ring_scope.",
            "VernacNotation",
            "7f330bf75029b45365bc042f2c60d83d527fa7b6"
        ],
        [
            "Let wf_p := (p != 0) && root p^iota z.",
            "VernacDefinition",
            "accb3ce0ec9f3adfa1cd543124c229172c78f22e"
        ],
        [
            "Let p0 : {poly F} := if wf_p then (lead_coef p)^-1 *: p else 'X.",
            "VernacDefinition",
            "9018ebf2e0fd77b432fba5e5363f6d1cc3100447"
        ],
        [
            "Let z0 := if wf_p then z else 0.",
            "VernacDefinition",
            "ae6c205f86d490fd9692ff7f3f98127eb366eba1"
        ],
        [
            "Let n := (size p0).-1.",
            "VernacDefinition",
            "e33c73dd4277755907be87bb49d77efa5579eb40"
        ],
        [
            "Let p0_mon : p0 \\is monic.",
            "VernacDefinition",
            "af03932db40f89f172cdbc96e7982446bbc5bda4"
        ],
        [
            "rewrite /p0; case: ifP => [/andP[nz_p _] | _]; last exact: monicX.",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "by rewrite monicE lead_coefZ mulVf ?lead_coef_eq0.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Let nz_p0 : p0 != 0.",
            "VernacDefinition",
            "293b20cf25819f3331cc7b76f85bccacea3c030c"
        ],
        [
            "by rewrite monic_neq0 // p0_mon.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Let p0z0 : root p0^iota z0.",
            "VernacDefinition",
            "b5b79541676c47b0015211b629e24678b882337a"
        ],
        [
            "rewrite /p0 /z0; case: ifP => [/andP[_ pz0]|]; last by rewrite map_polyX rootX.",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "by rewrite map_polyZ rootE hornerZ (rootP pz0) mulr0.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Let n_gt0: 0 < n.",
            "VernacDefinition",
            "b4ecbece90e9944b33dc7a9600dfc79bdcd66cbd"
        ],
        [
            "rewrite /n -subn1 subn_gt0 -(size_map_poly iota).",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "by rewrite (root_size_gt1 _ p0z0) ?map_poly_eq0.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Let z0Ciota : commr_rmorph iota z0.",
            "VernacDefinition",
            "858f5b12b87e701fc2840dee948f74ce97cde217"
        ],
        [
            "by move=> x; apply: mulrC.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Local Notation iotaPz := (horner_morph z0Ciota).",
            "VernacSyntacticDefinition",
            "46e0fdbd10a6b2d66442a348f0b26c1b4bcdde42"
        ],
        [
            "Let iotaFz (x : 'rV[F]_n) := iotaPz (rVpoly x).",
            "VernacDefinition",
            "a443aa492eb18d7e3c5b77bdd05ab718179aa737"
        ],
        [
            "Definition equiv_subfext x y := (iotaFz x == iotaFz y).",
            "VernacDefinition",
            "749a6560757b4ad50237db25d671eb95d9e6ff29"
        ],
        [
            "Fact equiv_subfext_is_equiv : equiv_class_of equiv_subfext.",
            "VernacStartTheoremProof",
            "3cf4b6e205fbad0f442071d11ca9dce635372784"
        ],
        [
            "by rewrite /equiv_subfext; split=> x // y w /eqP->.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Canonical equiv_subfext_equiv := EquivRelPack equiv_subfext_is_equiv.",
            "VernacDefinition",
            "3c371a6fcbdd331dd0e371d72fb25ac950777b87"
        ],
        [
            "Canonical equiv_subfext_encModRel := defaultEncModRel equiv_subfext.",
            "VernacDefinition",
            "7cb2e286758393594427d75b3462bc9e00662f80"
        ],
        [
            "Definition subFExtend := {eq_quot equiv_subfext}.",
            "VernacDefinition",
            "1c28dac5d6bb2afe5d8a7bbe60f7126790ad5723"
        ],
        [
            "Canonical subFExtend_eqType := [eqType of subFExtend].",
            "VernacDefinition",
            "9d43db667d20b7f69bd637d32c7b00a68bb47c5a"
        ],
        [
            "Canonical subFExtend_choiceType := [choiceType of subFExtend].",
            "VernacDefinition",
            "ef6126a98f14cd8d7ef2e2575f16a3bc4030b28c"
        ],
        [
            "Canonical subFExtend_quotType := [quotType of subFExtend].",
            "VernacDefinition",
            "8011514eee78d5e75e37bbd4def493a1d10c89bb"
        ],
        [
            "Canonical subFExtend_eqQuotType := [eqQuotType equiv_subfext of subFExtend].",
            "VernacDefinition",
            "c71625fe172760faa3418586a546a88163f42f78"
        ],
        [
            "Definition subfx_inj := lift_fun1 subFExtend iotaFz.",
            "VernacDefinition",
            "4a32bd1dcdbd8f1513f11e282a32699998f9cf59"
        ],
        [
            "Fact pi_subfx_inj : {mono \\pi : x / iotaFz x >-> subfx_inj x}.",
            "VernacStartTheoremProof",
            "bc61b59e32af2ee9dba2bed24df74dae88429656"
        ],
        [
            "unlock subfx_inj => x; apply/eqP; rewrite -/(equiv_subfext _ x).",
            "VernacExtend",
            "01f04d3f5bba3b876eb4ec7b1c8f26d2e2cced77"
        ],
        [
            "by rewrite -eqmodE reprK.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Canonical pi_subfx_inj_morph := PiMono1 pi_subfx_inj.",
            "VernacDefinition",
            "7281ac927c1bf5057a1b823018781338e94843f3"
        ],
        [
            "Let iotaPz_repr x : iotaPz (rVpoly (repr (\\pi_(subFExtend) x))) = iotaFz x.",
            "VernacDefinition",
            "a4f30054f64298555c30d794fa283c50c1eaef4a"
        ],
        [
            "by rewrite -/(iotaFz _) -!pi_subfx_inj reprK.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Definition subfext0 := lift_cst subFExtend 0.",
            "VernacDefinition",
            "f3d3199afe149b30b5ab960f02dafbad9bd936f7"
        ],
        [
            "Canonical subfext0_morph := PiConst subfext0.",
            "VernacDefinition",
            "4661e146aee95520b72f735c27e7d5a60adcf518"
        ],
        [
            "Definition subfext_add := lift_op2 subFExtend +%R.",
            "VernacDefinition",
            "b751030ed54e8ba33daba653becfa4b3eefce29e"
        ],
        [
            "Fact pi_subfext_add : {morph \\pi : x y / x + y >-> subfext_add x y}.",
            "VernacStartTheoremProof",
            "4015e00f174544a3f077c76b108f95e7c489f0fc"
        ],
        [
            "unlock subfext_add => x y /=; apply/eqmodP/eqP.",
            "VernacExtend",
            "2855640502da0a3b2cfdfcd02ea9662c049d9a24"
        ],
        [
            "by rewrite /iotaFz !linearD /= !iotaPz_repr.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Canonical pi_subfx_add_morph := PiMorph2 pi_subfext_add.",
            "VernacDefinition",
            "2701ae6cdd43933352ee90b93ab1f88e6cc160dd"
        ],
        [
            "Definition subfext_opp := lift_op1 subFExtend -%R.",
            "VernacDefinition",
            "f721fcd79e3c7f2496d58ac58569adc1ce7bd9b3"
        ],
        [
            "Fact pi_subfext_opp : {morph \\pi : x / - x >-> subfext_opp x}.",
            "VernacStartTheoremProof",
            "e2c5a81ff9f77cf984b683b22856d6e7ba1f9e6e"
        ],
        [
            "unlock subfext_opp => y /=; apply/eqmodP/eqP.",
            "VernacExtend",
            "2855640502da0a3b2cfdfcd02ea9662c049d9a24"
        ],
        [
            "by rewrite /iotaFz !linearN /= !iotaPz_repr.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Canonical pi_subfext_opp_morph := PiMorph1 pi_subfext_opp.",
            "VernacDefinition",
            "2a1efda6a57e58528001978de03a78bd46bcf2f6"
        ],
        [
            "Fact addfxA : associative subfext_add.",
            "VernacStartTheoremProof",
            "b8ce5607f1f566656c5f377c32b087cf1ab09d54"
        ],
        [
            "by move=> x y t; rewrite -[x]reprK -[y]reprK -[t]reprK !piE addrA.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Fact addfxC : commutative subfext_add.",
            "VernacStartTheoremProof",
            "0e61e7b05e8bddff07bac0b767644d4f9c7bc86f"
        ],
        [
            "by move=> x y; rewrite -[x]reprK -[y]reprK !piE addrC.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Fact add0fx : left_id subfext0 subfext_add.",
            "VernacStartTheoremProof",
            "718d049aeba8a5508de97443c0c4f0be85c5451d"
        ],
        [
            "by move=> x; rewrite -[x]reprK !piE add0r.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Fact addfxN : left_inverse subfext0 subfext_opp subfext_add.",
            "VernacStartTheoremProof",
            "01247f53bf6fd65ed5176fe535e3b98e15b25ea8"
        ],
        [
            "by move=> x; rewrite -[x]reprK !piE addNr.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Definition subfext_zmodMixin := ZmodMixin addfxA addfxC add0fx addfxN.",
            "VernacDefinition",
            "b2f1b1178f7f304957343c6dd3d06ed7176efa03"
        ],
        [
            "Canonical subfext_zmodType := Eval hnf in ZmodType subFExtend subfext_zmodMixin.",
            "VernacDefinition",
            "8db251dae4acdcca664407866d0f8ba3e945f3e7"
        ],
        [
            "Let poly_rV_modp_K q : rVpoly (poly_rV (q %% p0) : 'rV[F]_n) = q %% p0.",
            "VernacDefinition",
            "e2aff2734670879977017dcfa6e442682d15e505"
        ],
        [
            "by apply: poly_rV_K; rewrite -ltnS -polySpred // ltn_modp.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Let iotaPz_modp q : iotaPz (q %% p0) = iotaPz q.",
            "VernacDefinition",
            "ba46391ac0286439a253333ff634a82c5cc979eb"
        ],
        [
            "rewrite {2}(divp_eq q p0) rmorphD rmorphM /=.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "by rewrite [iotaPz p0](rootP p0z0) mulr0 add0r.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Definition subfx_mul_rep (x y : 'rV[F]_n) : 'rV[F]_n := poly_rV ((rVpoly x) * (rVpoly y) %% p0).",
            "VernacDefinition",
            "553f423517dc2196ad8f576a217de419cbb58555"
        ],
        [
            "Definition subfext_mul := lift_op2 subFExtend subfx_mul_rep.",
            "VernacDefinition",
            "efbac3f1d7e136302127c5c83279bb16f9af92f1"
        ],
        [
            "Fact pi_subfext_mul : {morph \\pi : x y / subfx_mul_rep x y >-> subfext_mul x y}.",
            "VernacStartTheoremProof",
            "b4fabc89e5aa76d450df549534c6a983cb921c8f"
        ],
        [
            "unlock subfext_mul => x y /=; apply/eqmodP/eqP.",
            "VernacExtend",
            "2855640502da0a3b2cfdfcd02ea9662c049d9a24"
        ],
        [
            "by rewrite /iotaFz !poly_rV_modp_K !iotaPz_modp !rmorphM /= !iotaPz_repr.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Canonical pi_subfext_mul_morph := PiMorph2 pi_subfext_mul.",
            "VernacDefinition",
            "59526d4dddaab18fd3dc1a65d4f93da3cb95f647"
        ],
        [
            "Definition subfext1 := lift_cst subFExtend (poly_rV 1).",
            "VernacDefinition",
            "5dfb95758d7d2e27b4cdd3e3a64cd033be6c8cf3"
        ],
        [
            "Canonical subfext1_morph := PiConst subfext1.",
            "VernacDefinition",
            "9a226b9f7f7e414ce2f49e980cca781eb380c15f"
        ],
        [
            "Fact mulfxA : associative (subfext_mul).",
            "VernacStartTheoremProof",
            "e3eb68761dc9ae2c3eebb8b47be26deab462297d"
        ],
        [
            "elim/quotW=> x; elim/quotW=> y; elim/quotW=> w; rewrite !piE /subfx_mul_rep.",
            "VernacExtend",
            "9572fe72a2f3bd006515278f360e2480c39b52e9"
        ],
        [
            "by rewrite !poly_rV_modp_K [_ %% p0 * _]mulrC !modp_mul // mulrA mulrC.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Fact mulfxC : commutative subfext_mul.",
            "VernacStartTheoremProof",
            "8764d274e8b5cc51223177b5568c1d4604695f2e"
        ],
        [
            "by elim/quotW=> x; elim/quotW=> y; rewrite !piE /subfx_mul_rep /= mulrC.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Fact mul1fx : left_id subfext1 subfext_mul.",
            "VernacStartTheoremProof",
            "4336b9f996773498462d8eb923f4e592ccf5b399"
        ],
        [
            "elim/quotW=> x; rewrite !piE /subfx_mul_rep poly_rV_K ?size_poly1 // mul1r.",
            "VernacExtend",
            "de65c8193056a36f6dbb91fe21357bd770b140db"
        ],
        [
            "by rewrite modp_small ?rVpolyK // (polySpred nz_p0) ltnS size_poly.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Fact mulfx_addl : left_distributive subfext_mul subfext_add.",
            "VernacStartTheoremProof",
            "c1f24aa1ea66020fc9e9ea188d4ef9538c77e4b9"
        ],
        [
            "elim/quotW=> x; elim/quotW=> y; elim/quotW=> w; rewrite !piE /subfx_mul_rep.",
            "VernacExtend",
            "9572fe72a2f3bd006515278f360e2480c39b52e9"
        ],
        [
            "by rewrite linearD /= mulrDl modp_add linearD.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Fact nonzero1fx : subfext1 != subfext0.",
            "VernacStartTheoremProof",
            "0428183914d0452d34f1ec0e401a61cf9a1952eb"
        ],
        [
            "rewrite !piE /equiv_subfext /iotaFz !linear0.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "by rewrite poly_rV_K ?rmorph1 ?oner_eq0 // size_poly1.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Definition subfext_comRingMixin := ComRingMixin mulfxA mulfxC mul1fx mulfx_addl nonzero1fx.",
            "VernacDefinition",
            "372bac1410a60f8cbb860dcf64c93167236f8a04"
        ],
        [
            "Canonical subfext_Ring := Eval hnf in RingType subFExtend subfext_comRingMixin.",
            "VernacDefinition",
            "7b73e719bec9d15ff0303a891093541254e6545b"
        ],
        [
            "Canonical subfext_comRing := Eval hnf in ComRingType subFExtend mulfxC.",
            "VernacDefinition",
            "a14ca19f205e8e3161c68ccafc1adbd39bd5a8f3"
        ],
        [
            "Definition subfx_poly_inv (q : {poly F}) : {poly F} := if iotaPz q == 0 then 0 else let r := gdcop q p0 in let: (u, v) := egcdp q r in ((u * q + v * r)`_0)^-1 *: u.",
            "VernacDefinition",
            "b86e1d08473c3739cfc1ea40b59dde54d457351a"
        ],
        [
            "Let subfx_poly_invE q : iotaPz (subfx_poly_inv q) = (iotaPz q)^-1.",
            "VernacDefinition",
            "2149fbf3ba2f776b2728ace4d68134b6d47b9a4c"
        ],
        [
            "rewrite /subfx_poly_inv.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "have [-> | nzq] := altP eqP; first by rewrite rmorph0 invr0.",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "rewrite [nth]lock -[_^-1]mul1r; apply: canRL (mulfK nzq) _; rewrite -rmorphM /=.",
            "VernacExtend",
            "fe8f197e86415fc7f0a74eda9d312128b9473eda"
        ],
        [
            "have rz0: iotaPz (gdcop q p0) = 0.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "by apply/rootP; rewrite gdcop_map root_gdco ?map_poly_eq0 // p0z0 nzq.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "do [case: gdcopP => r _; rewrite (negPf nz_p0) orbF => co_r_q _] in rz0 *.",
            "VernacExtend",
            "2ed5ae5c7a1513e882f170a2462d7a7c3c1ca435"
        ],
        [
            "case: (egcdp q r) (egcdpE q r) => u v /=/eqp_size/esym/eqP.",
            "VernacExtend",
            "e00fff71ff314c991514fc71c41a3556702e444a"
        ],
        [
            "rewrite coprimep_size_gcd 1?coprimep_sym // => /size_poly1P[a nz_a Da].",
            "VernacExtend",
            "3c42b53d0efc26db114b00541ac5e7fcb29e6aeb"
        ],
        [
            "rewrite Da -scalerAl (canRL (addrK _) Da) -lock coefC linearZ linearB /=.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "by rewrite rmorphM /= rz0 mulr0 subr0 horner_morphC -rmorphM mulVf ?rmorph1.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Definition subfx_inv_rep (x : 'rV[F]_n) : 'rV[F]_n := poly_rV (subfx_poly_inv (rVpoly x) %% p0).",
            "VernacDefinition",
            "e8acbef05b610b6433a908f2d97f9fdac0bbd3a6"
        ],
        [
            "Definition subfext_inv := lift_op1 subFExtend subfx_inv_rep.",
            "VernacDefinition",
            "df5e15aa12d1e6061a7c4304e12a7bfe5b7e0b7e"
        ],
        [
            "Fact pi_subfext_inv : {morph \\pi : x / subfx_inv_rep x >-> subfext_inv x}.",
            "VernacStartTheoremProof",
            "8b794917dd32c114424b8765ea158ab95fbf9994"
        ],
        [
            "unlock subfext_inv => x /=; apply/eqmodP/eqP; rewrite /iotaFz.",
            "VernacExtend",
            "01f04d3f5bba3b876eb4ec7b1c8f26d2e2cced77"
        ],
        [
            "by rewrite 2!{1}poly_rV_modp_K 2!{1}iotaPz_modp !subfx_poly_invE iotaPz_repr.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Canonical pi_subfext_inv_morph := PiMorph1 pi_subfext_inv.",
            "VernacDefinition",
            "0e920edcd3902a3289359f0fbedd41691f8049e4"
        ],
        [
            "Fact subfx_fieldAxiom : GRing.Field.axiom (subfext_inv : subFExtend -> subFExtend).",
            "VernacStartTheoremProof",
            "69abef38aea555e1934c1b572640c4dd2d05f7bb"
        ],
        [
            "elim/quotW=> x; apply: contraNeq; rewrite !piE /equiv_subfext /iotaFz !linear0.",
            "VernacExtend",
            "8c9e5024ec19e13281e0187dab3d65b93b116a6a"
        ],
        [
            "apply: contraR => nz_x; rewrite poly_rV_K ?size_poly1 // !poly_rV_modp_K.",
            "VernacExtend",
            "56c014161b39aecfb3c54301c2409dba4e8e1857"
        ],
        [
            "by rewrite iotaPz_modp rmorph1 rmorphM /= iotaPz_modp subfx_poly_invE mulVf.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Fact subfx_inv0 : subfext_inv (0 : subFExtend) = (0 : subFExtend).",
            "VernacStartTheoremProof",
            "218aa1bf9d12450b9115592e922d70bc71da1ebc"
        ],
        [
            "apply/eqP; rewrite !piE /equiv_subfext /iotaFz /subfx_inv_rep !linear0.",
            "VernacExtend",
            "56c014161b39aecfb3c54301c2409dba4e8e1857"
        ],
        [
            "by rewrite /subfx_poly_inv rmorph0 eqxx mod0p !linear0.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Definition subfext_unitRingMixin := FieldUnitMixin subfx_fieldAxiom subfx_inv0.",
            "VernacDefinition",
            "d1e4250ea8222d549c3fee32df63931427020654"
        ],
        [
            "Canonical subfext_unitRingType := Eval hnf in UnitRingType subFExtend subfext_unitRingMixin.",
            "VernacDefinition",
            "0d50a5d2305658abb63cef432374812c249328da"
        ],
        [
            "Canonical subfext_comUnitRing := Eval hnf in [comUnitRingType of subFExtend].",
            "VernacDefinition",
            "3d5ce25084603c77f04971a93e8a62e47dc01349"
        ],
        [
            "Definition subfext_fieldMixin := @FieldMixin _ _ subfx_fieldAxiom subfx_inv0.",
            "VernacDefinition",
            "34d30d2016419d41f5e39f02b9341c454f2f52a9"
        ],
        [
            "Definition subfext_idomainMixin := FieldIdomainMixin subfext_fieldMixin.",
            "VernacDefinition",
            "4092f3abcf23f3ce9409606955a04cc1c208d6b4"
        ],
        [
            "Canonical subfext_idomainType := Eval hnf in IdomainType subFExtend subfext_idomainMixin.",
            "VernacDefinition",
            "6b1fa4aa6416a30a9c556f6f25a48641802d8147"
        ],
        [
            "Canonical subfext_fieldType := Eval hnf in FieldType subFExtend subfext_fieldMixin.",
            "VernacDefinition",
            "e946cd86d09d93b8d4bef3cd9e39fbfd5773b70f"
        ],
        [
            "Fact subfx_inj_is_rmorphism : rmorphism subfx_inj.",
            "VernacStartTheoremProof",
            "5da78d70eb1f0943352b4920d4dc5eec63aece35"
        ],
        [
            "do 2?split; last by rewrite piE /iotaFz poly_rV_K ?rmorph1 ?size_poly1.",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "by elim/quotW=> x; elim/quotW=> y; rewrite !piE /iotaFz linearB rmorphB.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "elim/quotW=> x; elim/quotW=> y; rewrite !piE /subfx_mul_rep /iotaFz.",
            "VernacExtend",
            "85063f5d306f5a99a8097b17f99eda3b8e50e4bd"
        ],
        [
            "by rewrite poly_rV_modp_K iotaPz_modp rmorphM.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Canonical subfx_inj_additive := Additive subfx_inj_is_rmorphism.",
            "VernacDefinition",
            "d1ac7dd05a158054742ae255fa77b1ce1ec284db"
        ],
        [
            "Canonical subfx_inj_rmorphism := RMorphism subfx_inj_is_rmorphism.",
            "VernacDefinition",
            "0b7618746e330d7e4288406e2583e8339aad6a88"
        ],
        [
            "Definition subfx_eval := lift_embed subFExtend (fun q => poly_rV (q %% p0)).",
            "VernacDefinition",
            "a10f02840f285c8a08987e57da392ee69aa94578"
        ],
        [
            "Canonical subfx_eval_morph := PiEmbed subfx_eval.",
            "VernacDefinition",
            "c3ea17d7145ebdd970552954d01a8f47a785ac44"
        ],
        [
            "Definition subfx_root := subfx_eval 'X.",
            "VernacDefinition",
            "e0a6dc02676643da71d84f92d1e5b0f8f5e6826e"
        ],
        [
            "Lemma subfx_eval_is_rmorphism : rmorphism subfx_eval.",
            "VernacStartTheoremProof",
            "e3a49f72ba4048cd97172be0b8dce8d033ba4e6d"
        ],
        [
            "do 2?split=> [x y|] /=; apply/eqP; rewrite piE.",
            "VernacExtend",
            "91390c987889ce5a6686f59ba64c8862af932f2e"
        ],
        [
            "-",
            "VernacBullet",
            "581cab4bf49fa4b495e569bbda96fc8d28fddcc0"
        ],
        [
            "by rewrite -linearB modp_add modNp.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "-",
            "VernacBullet",
            "581cab4bf49fa4b495e569bbda96fc8d28fddcc0"
        ],
        [
            "by rewrite /subfx_mul_rep !poly_rV_modp_K !(modp_mul, mulrC _ y).",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "by rewrite modp_small // size_poly1 -subn_gt0 subn1.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Canonical subfx_eval_additive := Additive subfx_eval_is_rmorphism.",
            "VernacDefinition",
            "b60ddd9cc7593c9ee891a3e4bf1607b8403eb521"
        ],
        [
            "Canonical subfx_eval_rmorphism := AddRMorphism subfx_eval_is_rmorphism.",
            "VernacDefinition",
            "478af87a748336f54b69b7488917a21a90b9365a"
        ],
        [
            "Definition inj_subfx := (subfx_eval \\o polyC).",
            "VernacDefinition",
            "c685818873189f7fb63d9745a8d75c5722fbef3b"
        ],
        [
            "Canonical inj_subfx_addidive := [additive of inj_subfx].",
            "VernacDefinition",
            "1a9a51f967908b9fe7b5f11dc433fca83c125f20"
        ],
        [
            "Canonical inj_subfx_rmorphism := [rmorphism of inj_subfx].",
            "VernacDefinition",
            "11ad6cd1adfba451c56e0fec505389be9e699be3"
        ],
        [
            "Lemma subfxE x: exists p, x = subfx_eval p.",
            "VernacStartTheoremProof",
            "98dd1c051a143b3665faec3b81a784dda37beced"
        ],
        [
            "elim/quotW: x => x; exists (rVpoly x); apply/eqP; rewrite piE /equiv_subfext.",
            "VernacExtend",
            "3981a05576a1fd0a8bddffc853f0aba37aad52a5"
        ],
        [
            "by rewrite /iotaFz poly_rV_modp_K iotaPz_modp.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Definition subfx_scale a x := inj_subfx a * x.",
            "VernacDefinition",
            "10ce72adfc0bda8e7fa89e5ef6f5a22f04031e49"
        ],
        [
            "Fact subfx_scalerA a b x : subfx_scale a (subfx_scale b x) = subfx_scale (a * b) x.",
            "VernacStartTheoremProof",
            "a9cfe38dd8f0c44858c305a826e23119850ceff9"
        ],
        [
            "by rewrite /subfx_scale rmorphM mulrA.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Fact subfx_scaler1r : left_id 1 subfx_scale.",
            "VernacStartTheoremProof",
            "6e568a66183d9bfcbfc1316aa5728d7c31f2c5ad"
        ],
        [
            "by move=> x; rewrite /subfx_scale rmorph1 mul1r.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Fact subfx_scalerDr : right_distributive subfx_scale +%R.",
            "VernacStartTheoremProof",
            "a6e5093935b638c59059d3950dcb2d5489cc1af6"
        ],
        [
            "by move=> a; apply: mulrDr.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Fact subfx_scalerDl x : {morph subfx_scale^~ x : a b / a + b}.",
            "VernacStartTheoremProof",
            "eda5aff16e95f4ebbe1f701d6980a7627ad18fa4"
        ],
        [
            "by move=> a b; rewrite /subfx_scale rmorphD mulrDl.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Definition subfx_lmodMixin := LmodMixin subfx_scalerA subfx_scaler1r subfx_scalerDr subfx_scalerDl.",
            "VernacDefinition",
            "cdb577c5a3ae8970cdd241328900ba9340e03315"
        ],
        [
            "Canonical subfx_lmodType := LmodType F subFExtend subfx_lmodMixin.",
            "VernacDefinition",
            "5d4fc507e47239997aeaf3850274b58fadfe7ab9"
        ],
        [
            "Fact subfx_scaleAl : GRing.Lalgebra.axiom ( *%R : subFExtend -> _).",
            "VernacStartTheoremProof",
            "cb342c70a1ffa7b5f9d1d19525084e4dc6b39474"
        ],
        [
            "by move=> a; apply: mulrA.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Canonical subfx_lalgType := LalgType F subFExtend subfx_scaleAl.",
            "VernacDefinition",
            "39bf6a59c5dd6b697e43eeaa212be01dbe5bb1ea"
        ],
        [
            "Fact subfx_scaleAr : GRing.Algebra.axiom subfx_lalgType.",
            "VernacStartTheoremProof",
            "450fadb5e0bac849901077882d87522bf371c259"
        ],
        [
            "by move=> a; apply: mulrCA.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Canonical subfx_algType := AlgType F subFExtend subfx_scaleAr.",
            "VernacDefinition",
            "529f1c94f9849290dd9a24fa9f88f16e538cd485"
        ],
        [
            "Canonical subfext_unitAlgType := [unitAlgType F of subFExtend].",
            "VernacDefinition",
            "75608d8d907a3187eb1defcb53e69b3c7d440565"
        ],
        [
            "Fact subfx_evalZ : scalable subfx_eval.",
            "VernacStartTheoremProof",
            "16f810028fbaea48ad7eaf7538b47e1ca9910545"
        ],
        [
            "by move=> a q; rewrite -mul_polyC rmorphM.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Canonical subfx_eval_linear := AddLinear subfx_evalZ.",
            "VernacDefinition",
            "69248d1b8ffda37358bfbbe82de07244d52c6496"
        ],
        [
            "Canonical subfx_eval_lrmorphism := [lrmorphism of subfx_eval].",
            "VernacDefinition",
            "8f695acac26af41ba6e58f5a8dc2fca59ec62650"
        ],
        [
            "Hypothesis (pz0 : root p^iota z).",
            "VernacAssumption",
            "b06c12892688a078f3034f8fb9fc184ddf51d980"
        ],
        [
            "Section NonZero.",
            "VernacBeginSection",
            "07c8dd72cec6affe0b0c5301f277774a01237aec"
        ],
        [
            "Hypothesis nz_p : p != 0.",
            "VernacAssumption",
            "ee4c1f3c43ef07418eeea6fb88eafc612b3eec28"
        ],
        [
            "Lemma subfx_inj_eval q : subfx_inj (subfx_eval q) = q^iota.[z].",
            "VernacStartTheoremProof",
            "06b25164a21a9dcaba51c162c06056605b752b80"
        ],
        [
            "by rewrite piE /iotaFz poly_rV_modp_K iotaPz_modp /iotaPz /z0 /wf_p nz_p pz0.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma subfx_inj_root : subfx_inj subfx_root = z.",
            "VernacStartTheoremProof",
            "0c64c3cc39587826d871b110f1543aeb7df63ce3"
        ],
        [
            "by rewrite subfx_inj_eval // map_polyX hornerX.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma subfx_injZ b x : subfx_inj (b *: x) = iota b * subfx_inj x.",
            "VernacStartTheoremProof",
            "ea2ce4c471f4d229335dfb945d7fd988f524613b"
        ],
        [
            "by rewrite rmorphM /= subfx_inj_eval // map_polyC hornerC.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma subfx_inj_base b : subfx_inj b%:A = iota b.",
            "VernacStartTheoremProof",
            "5d71a5f92008c042ca45d140bb2bc65aa23b52dc"
        ],
        [
            "by rewrite subfx_injZ rmorph1 mulr1.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma subfxEroot x : {q | x = (map_poly (in_alg subFExtend) q).[subfx_root]}.",
            "VernacStartTheoremProof",
            "23ddde1e78cb187a9e384b621ad8c12a5668e331"
        ],
        [
            "have /sig_eqW[q ->] := subfxE x; exists q.",
            "VernacExtend",
            "804adcb135af5b75cb68d277881cd6226e645521"
        ],
        [
            "apply: (fmorph_inj subfx_inj_rmorphism).",
            "VernacExtend",
            "4bd6fa79b17bcd2bfb7af091fb325367a20385d6"
        ],
        [
            "rewrite -horner_map /= subfx_inj_root subfx_inj_eval //.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "by rewrite -map_poly_comp (eq_map_poly subfx_inj_base).",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma subfx_irreducibleP : (forall q, root q^iota z -> q != 0 -> size p <= size q) <-> irreducible_poly p.",
            "VernacStartTheoremProof",
            "2c4bd79d69ee02e6c12a2c1a02d47746012baed9"
        ],
        [
            "split=> [min_p | irr_p q qz0 nz_q].",
            "VernacExtend",
            "3c42b53d0efc26db114b00541ac5e7fcb29e6aeb"
        ],
        [
            "split=> [|q nonC_q q_dv_p].",
            "VernacExtend",
            "3c42b53d0efc26db114b00541ac5e7fcb29e6aeb"
        ],
        [
            "by rewrite -(size_map_poly iota) (root_size_gt1 _ pz0) ?map_poly_eq0.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "have /dvdpP[r Dp] := q_dv_p; rewrite -dvdp_size_eqp // eqn_leq dvdp_leq //=.",
            "VernacExtend",
            "aa9d5fbc682ed874cd64b2543ca6c859b978e924"
        ],
        [
            "have [nz_r nz_q]: r != 0 /\\ q != 0 by apply/norP; rewrite -mulf_eq0 -Dp.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "have: root r^iota z || root q^iota z by rewrite -rootM -rmorphM -Dp.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "case/orP=> /min_p; [case/(_ _)/idPn=> // | exact].",
            "VernacExtend",
            "7fcbb7cf0ddcf6bdf8108aa399f7ce86bd308420"
        ],
        [
            "rewrite polySpred // -leqNgt Dp size_mul //= polySpred // -subn2 ltn_subRL.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "by rewrite addSnnS addnC ltn_add2l ltn_neqAle eq_sym nonC_q size_poly_gt0.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "pose r := gcdp p q; have nz_r: r != 0 by rewrite gcdp_eq0 (negPf nz_p).",
            "VernacExtend",
            "c09d1274557abc8857ed64eb3450db2da906c185"
        ],
        [
            "suffices /eqp_size <-: r %= p by rewrite dvdp_leq ?dvdp_gcdr.",
            "VernacExtend",
            "290ed488b5562e885aa2cac56f3a69b4faa0eaa6"
        ],
        [
            "rewrite (irr_p _) ?dvdp_gcdl // -(size_map_poly iota) gtn_eqF //.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "by rewrite (@root_size_gt1 _ z) ?map_poly_eq0 // gcdp_map root_gcd pz0.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "End NonZero.",
            "VernacEndSegment",
            "cf61218c9d0d6d7d093043f7776d412382fa4528"
        ],
        [
            "Section Irreducible.",
            "VernacBeginSection",
            "80b7f904b9916cf02f02bb87bddf1bdb81f9e25e"
        ],
        [
            "Hypothesis irr_p : irreducible_poly p.",
            "VernacAssumption",
            "98119fd0665dde62d12a979e78cff499cc6fb5c4"
        ],
        [
            "Let nz_p : p != 0.",
            "VernacDefinition",
            "5f0abd2cf11477cc8dbc2ccbe782f9c91354f83c"
        ],
        [
            "exact: irredp_neq0.",
            "VernacExtend",
            "ce637ff86bafca5d8359473e8c02af644dcbdc43"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma min_subfx_vectAxiom : Vector.axiom (size p).-1 subfx_lmodType.",
            "VernacStartTheoremProof",
            "0c9a194c84a60daadc56cf86c2ae4114b1ff6ef9"
        ],
        [
            "move/subfx_irreducibleP: irr_p => /=/(_ nz_p) min_p; set d := (size p).-1.",
            "VernacExtend",
            "fd0300d8899563f42d81dc09cab8269e61be7289"
        ],
        [
            "have Dd: d.+1 = size p by rewrite polySpred.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "pose Fz2v x : 'rV_d := poly_rV (sval (sig_eqW (subfxE x)) %% p).",
            "VernacExtend",
            "3c5f04de94609049d978298aa02ff35fb35ea7c7"
        ],
        [
            "pose vFz : 'rV_d -> subFExtend := subfx_eval \\o rVpoly.",
            "VernacExtend",
            "3c5f04de94609049d978298aa02ff35fb35ea7c7"
        ],
        [
            "have FLinj: injective subfx_inj by apply: fmorph_inj.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "have Fz2vK: cancel Fz2v vFz.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "move=> x; rewrite /vFz /Fz2v; case: (sig_eqW _) => /= q ->.",
            "VernacExtend",
            "d7214ac8fd48f4d1cd143edd9d16f6d28386a302"
        ],
        [
            "apply: FLinj; rewrite !subfx_inj_eval // {2}(divp_eq q p) rmorphD rmorphM /=.",
            "VernacExtend",
            "56c014161b39aecfb3c54301c2409dba4e8e1857"
        ],
        [
            "by rewrite !hornerE (eqP pz0) mulr0 add0r poly_rV_K // -ltnS Dd ltn_modpN0.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "suffices vFzK: cancel vFz Fz2v.",
            "VernacExtend",
            "290ed488b5562e885aa2cac56f3a69b4faa0eaa6"
        ],
        [
            "by exists Fz2v; [apply: can2_linear Fz2vK | exists vFz].",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "apply: inj_can_sym Fz2vK _ => v1 v2 /(congr1 subfx_inj)/eqP.",
            "VernacExtend",
            "4bd6fa79b17bcd2bfb7af091fb325367a20385d6"
        ],
        [
            "rewrite -subr_eq0 -!raddfB /= subfx_inj_eval // => /min_p/implyP.",
            "VernacExtend",
            "3c42b53d0efc26db114b00541ac5e7fcb29e6aeb"
        ],
        [
            "rewrite leqNgt implybNN -Dd ltnS size_poly linearB subr_eq0 /=.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "by move/eqP/(can_inj rVpolyK).",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Definition SubfxVectMixin := VectMixin min_subfx_vectAxiom.",
            "VernacDefinition",
            "5891c0b94f73ea387d2b3cf321f4ad187a8eef71"
        ],
        [
            "Definition SubfxVectType := VectType F subFExtend SubfxVectMixin.",
            "VernacDefinition",
            "88b4806e47dfc892d9dfe444249639627b11d120"
        ],
        [
            "Definition SubfxFalgType := Eval simpl in [FalgType F of SubfxVectType].",
            "VernacDefinition",
            "639ac0489abaac823332a6271264dee2a380cdaa"
        ],
        [
            "Definition SubFieldExtType := Eval simpl in [fieldExtType F of SubfxFalgType].",
            "VernacDefinition",
            "7ad6949c19ccd91e793759b09a9ac6828aada62f"
        ],
        [
            "End Irreducible.",
            "VernacEndSegment",
            "93892978c41e27fd94ea308b031b7de4e470e379"
        ],
        [
            "End SubFieldExtension.",
            "VernacEndSegment",
            "b88031688a3cc8422addff7b3819c905e987ad73"
        ],
        [
            "Prenex Implicits subfx_inj.",
            "VernacExtend",
            "d59d8455898defa54ff93dce1db0beb8d616ec6d"
        ],
        [
            "Lemma irredp_FAdjoin (F : fieldType) (p : {poly F}) : irreducible_poly p -> {L : fieldExtType F & \\dim {:L} = (size p).-1 & {z | root (map_poly (in_alg L) p) z & <<1; z>>%VS = fullv}}.",
            "VernacStartTheoremProof",
            "78c11a8b1df1ffb0d3ea0f67abe8589cfa388816"
        ],
        [
            "case=> p_gt1 irr_p; set n := (size p).-1; pose vL := [vectType F of 'rV_n].",
            "VernacExtend",
            "f9ba14427a90554d76d10927b0e4e2afd53ce0df"
        ],
        [
            "have Dn: n.+1 = size p := ltn_predK p_gt1.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "have nz_p: p != 0 by rewrite -size_poly_eq0 -Dn.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "suffices [L dimL [toPF [toL toPF_K toL_K]]]: {L : fieldExtType F & \\dim {:L} = (size p).-1 & {toPF : {linear L -> {poly F}} & {toL : {lrmorphism {poly F} -> L} | cancel toPF toL & forall q, toPF (toL q) = q %% p}}}.",
            "VernacExtend",
            "290ed488b5562e885aa2cac56f3a69b4faa0eaa6"
        ],
        [
            "-",
            "VernacBullet",
            "581cab4bf49fa4b495e569bbda96fc8d28fddcc0"
        ],
        [
            "exists L => //; pose z := toL 'X; set iota := in_alg _.",
            "VernacExtend",
            "49c70df2d2cbbe1d6c2da7b0caa9a60cc32fad50"
        ],
        [
            "suffices q_z q: toPF (map_poly iota q).[z] = q %% p.",
            "VernacExtend",
            "290ed488b5562e885aa2cac56f3a69b4faa0eaa6"
        ],
        [
            "exists z; first by rewrite /root -(can_eq toPF_K) q_z modpp linear0.",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "apply/vspaceP=> x; rewrite memvf; apply/Fadjoin_polyP.",
            "VernacExtend",
            "da24caf87c1bbbad0538b8be68905ec456c78aa7"
        ],
        [
            "exists (map_poly iota (toPF x)).",
            "VernacExtend",
            "d39ae2913244d80d7fc267bd3f05f55d5c8a137b"
        ],
        [
            "by apply/polyOverP=> i; rewrite coef_map memvZ ?mem1v.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "by apply: (can_inj toPF_K); rewrite q_z -toL_K toPF_K.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "elim/poly_ind: q => [|a q IHq].",
            "VernacExtend",
            "e686a1895f1799b840b76242f931100819a9ad6c"
        ],
        [
            "by rewrite map_poly0 horner0 linear0 mod0p.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "rewrite rmorphD rmorphM /= map_polyX map_polyC hornerMXaddC linearD /=.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "rewrite linearZ /= -(rmorph1 toL) toL_K -modp_scalel alg_polyC modp_add.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "congr (_ + _); rewrite -toL_K rmorphM /= -/z; congr (toPF (_ * z)).",
            "VernacExtend",
            "516f18a2bd545145111a2197b98c801fe2c297f5"
        ],
        [
            "by apply: (can_inj toPF_K); rewrite toL_K.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "pose toL q : vL := poly_rV (q %% p); pose toPF (x : vL) := rVpoly x.",
            "VernacExtend",
            "311b833fadff89b2f7ed817d3cd7cb6971c96a1e"
        ],
        [
            "have toL_K q : toPF (toL q) = q %% p.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "by rewrite /toPF poly_rV_K // -ltnS Dn ?ltn_modp -?Dn.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "have toPF_K: cancel toPF toL.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "by move=> x; rewrite /toL modp_small ?rVpolyK // -Dn ltnS size_poly.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "have toPinj := can_inj toPF_K.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "pose mul x y := toL (toPF x * toPF y); pose L1 := toL 1.",
            "VernacExtend",
            "311b833fadff89b2f7ed817d3cd7cb6971c96a1e"
        ],
        [
            "have L1K: toPF L1 = 1 by rewrite toL_K modp_small ?size_poly1.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "have mulC: commutative mul by rewrite /mul => x y; rewrite mulrC.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "have mulA: associative mul.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "by move=> x y z; apply: toPinj; rewrite -!(mulC z) !toL_K !modp_mul mulrCA.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "have mul1: left_id L1 mul.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "by move=> x; apply: toPinj; rewrite mulC !toL_K modp_mul mulr1 -toL_K toPF_K.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "have mulD: left_distributive mul +%R.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "move=> x y z; apply: toPinj; rewrite /toPF raddfD /= -!/(toPF _).",
            "VernacExtend",
            "f7feb259d6220ca40e8a86b90bd06f137aa140ac"
        ],
        [
            "by rewrite !toL_K /toPF raddfD mulrDl modp_add.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "have nzL1: L1 != 0 by rewrite -(inj_eq toPinj) L1K /toPF raddf0 oner_eq0.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "pose mulM := ComRingMixin mulA mulC mul1 mulD nzL1.",
            "VernacExtend",
            "3c5f04de94609049d978298aa02ff35fb35ea7c7"
        ],
        [
            "pose rL := ComRingType (RingType vL mulM) mulC.",
            "VernacExtend",
            "3c5f04de94609049d978298aa02ff35fb35ea7c7"
        ],
        [
            "have mulZl: GRing.Lalgebra.axiom mul.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "move=> a x y; apply: toPinj; rewrite toL_K /toPF !linearZ /= -!/(toPF _).",
            "VernacExtend",
            "f7feb259d6220ca40e8a86b90bd06f137aa140ac"
        ],
        [
            "by rewrite toL_K -scalerAl modp_scalel.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "have mulZr: GRing.Algebra.axiom (LalgType F rL mulZl).",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "by move=> a x y; rewrite !(mulrC x) scalerAl.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "pose aL := AlgType F _ mulZr; pose urL := FalgUnitRingType aL.",
            "VernacExtend",
            "311b833fadff89b2f7ed817d3cd7cb6971c96a1e"
        ],
        [
            "pose uaL := [unitAlgType F of AlgType F urL mulZr].",
            "VernacExtend",
            "3c5f04de94609049d978298aa02ff35fb35ea7c7"
        ],
        [
            "pose faL := [FalgType F of uaL].",
            "VernacExtend",
            "3c5f04de94609049d978298aa02ff35fb35ea7c7"
        ],
        [
            "have unitE: GRing.Field.mixin_of urL.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "move=> x nz_x; apply/unitrP; set q := toPF x.",
            "VernacExtend",
            "087c3b66226a45d8597d03f3e4b691c28cc161ee"
        ],
        [
            "have nz_q: q != 0 by rewrite -(inj_eq toPinj) /toPF raddf0 in nz_x.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "have /Bezout_eq1_coprimepP[u upq1]: coprimep p q.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "apply: contraLR (leq_gcdpr p nz_q) => /irr_p/implyP.",
            "VernacExtend",
            "4bd6fa79b17bcd2bfb7af091fb325367a20385d6"
        ],
        [
            "rewrite dvdp_gcdl -ltnNge /= => /eqp_size->.",
            "VernacExtend",
            "3c42b53d0efc26db114b00541ac5e7fcb29e6aeb"
        ],
        [
            "by rewrite (polySpred nz_p) ltnS size_poly.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "suffices: x * toL u.2 = 1 by exists (toL u.2); rewrite mulrC.",
            "VernacExtend",
            "290ed488b5562e885aa2cac56f3a69b4faa0eaa6"
        ],
        [
            "apply: toPinj; rewrite !toL_K -upq1 modp_mul modp_add mulrC.",
            "VernacExtend",
            "56c014161b39aecfb3c54301c2409dba4e8e1857"
        ],
        [
            "by rewrite modp_mull add0r.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "pose ucrL := [comUnitRingType of ComRingType urL mulC].",
            "VernacExtend",
            "3c5f04de94609049d978298aa02ff35fb35ea7c7"
        ],
        [
            "have mul0 := GRing.Field.IdomainMixin unitE.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "pose fL := FieldType (IdomainType ucrL mul0) unitE.",
            "VernacExtend",
            "3c5f04de94609049d978298aa02ff35fb35ea7c7"
        ],
        [
            "exists [fieldExtType F of faL for fL]; first by rewrite dimvf; apply: mul1n.",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "exists [linear of toPF as rVpoly].",
            "VernacExtend",
            "176a3c4e63751cd0eb2f771bd0761676956915dc"
        ],
        [
            "suffices toLM: lrmorphism (toL : {poly F} -> aL) by exists (LRMorphism toLM).",
            "VernacExtend",
            "290ed488b5562e885aa2cac56f3a69b4faa0eaa6"
        ],
        [
            "have toLlin: linear toL.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "by move=> a q1 q2; rewrite -linearP -modp_scalel -modp_add.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "do ?split; try exact: toLlin; move=> q r /=.",
            "VernacExtend",
            "614f2e7d53e1056315afddacb37fd4939ef167bb"
        ],
        [
            "by apply: toPinj; rewrite !toL_K modp_mul -!(mulrC r) modp_mul.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ]
    ],
    "proofs": [
        {
            "name": "dim_cosetv",
            "line_nb": 144,
            "steps": [
                {
                    "command": [
                        "move=> nz_x; rewrite -limg_amulr limg_dim_eq //.",
                        "VernacExtend",
                        "057edeb0967475c7ea5e8c98c449ddc5613eddc1"
                    ]
                },
                {
                    "command": [
                        "apply/eqP; rewrite -subv0; apply/subvP=> y.",
                        "VernacExtend",
                        "da24caf87c1bbbad0538b8be68905ec456c78aa7"
                    ]
                },
                {
                    "command": [
                        "by rewrite memv_cap memv0 memv_ker lfunE mulf_eq0 (negPf nz_x) orbF => /andP[].",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "prodvC",
            "line_nb": 149,
            "steps": [
                {
                    "command": [
                        "move=> U V; without loss suffices subC: U V / (U * V <= V * U)%VS.",
                        "VernacExtend",
                        "c72e9bb37283b59c58a2f990500032acd79787ea"
                    ]
                },
                {
                    "command": [
                        "by apply/eqP; rewrite eqEsubv !{1}subC.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "by apply/prodvP=> x y Ux Vy; rewrite mulrC memv_mul.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "prodvCA",
            "line_nb": 155,
            "steps": [
                {
                    "command": [
                        "exact: Monoid.mulmCA.",
                        "VernacExtend",
                        "ce637ff86bafca5d8359473e8c02af644dcbdc43"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "prodvAC",
            "line_nb": 158,
            "steps": [
                {
                    "command": [
                        "exact: Monoid.mulmAC.",
                        "VernacExtend",
                        "ce637ff86bafca5d8359473e8c02af644dcbdc43"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "algid1",
            "line_nb": 161,
            "steps": [
                {
                    "command": [
                        "exact/skew_field_algid1/fieldP.",
                        "VernacExtend",
                        "ce637ff86bafca5d8359473e8c02af644dcbdc43"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "mem1v",
            "line_nb": 164,
            "steps": [
                {
                    "command": [
                        "by rewrite -algid_eq1 algid1.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "sub1v",
            "line_nb": 167,
            "steps": [
                {
                    "command": [
                        "exact: mem1v.",
                        "VernacExtend",
                        "ce637ff86bafca5d8359473e8c02af644dcbdc43"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "subfield_closed",
            "line_nb": 170,
            "steps": [
                {
                    "command": [
                        "by apply/eqP; rewrite eqEsubv sub_agenv agenv_sub_modr ?sub1v ?asubv.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "AHom_lker0",
            "line_nb": 173,
            "steps": [
                {
                    "command": [
                        "by apply/lker0P; apply: fmorph_inj.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "AEnd_lker0",
            "line_nb": 176,
            "steps": [
                {
                    "command": [
                        "exact: AHom_lker0.",
                        "VernacExtend",
                        "ce637ff86bafca5d8359473e8c02af644dcbdc43"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "aimg_is_aspace",
            "line_nb": 179,
            "steps": [
                {
                    "command": [
                        "rewrite /is_aspace -aimgM limgS ?prodv_id // has_algid1 //.",
                        "VernacExtend",
                        "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
                    ]
                },
                {
                    "command": [
                        "by apply/memv_imgP; exists 1; rewrite ?mem1v ?rmorph1.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "Fadjoin_idP",
            "line_nb": 184,
            "steps": [
                {
                    "command": [
                        "apply: (iffP idP) => [/addv_idPl-> | <-]; first exact: subfield_closed.",
                        "VernacExtend",
                        "3763a4b8db689af316a7372b722bb29806ab4fb6"
                    ]
                },
                {
                    "command": [
                        "exact: memv_adjoin.",
                        "VernacExtend",
                        "ce637ff86bafca5d8359473e8c02af644dcbdc43"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "Fadjoin0",
            "line_nb": 188,
            "steps": [
                {
                    "command": [
                        "by rewrite addv0 subfield_closed.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "Fadjoin_nil",
            "line_nb": 191,
            "steps": [
                {
                    "command": [
                        "by rewrite adjoin_nil subfield_closed.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "FadjoinP",
            "line_nb": 194,
            "steps": [
                {
                    "command": [
                        "apply: (iffP idP) => [sKxE | /andP].",
                        "VernacExtend",
                        "4bd6fa79b17bcd2bfb7af091fb325367a20385d6"
                    ]
                },
                {
                    "command": [
                        "by rewrite (subvP sKxE) ?memv_adjoin // (subv_trans _ sKxE) ?subv_adjoin.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "by rewrite -subv_add => /agenvS; rewrite subfield_closed.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "Fadjoin_seqP",
            "line_nb": 199,
            "steps": [
                {
                    "command": [
                        "apply: (iffP idP) => [sKrsE | [sKE /span_subvP/(conj sKE)/andP]].",
                        "VernacExtend",
                        "4bd6fa79b17bcd2bfb7af091fb325367a20385d6"
                    ]
                },
                {
                    "command": [
                        "split=> [|x rs_x]; first exact: subv_trans (subv_adjoin_seq _ _) sKrsE.",
                        "VernacExtend",
                        "3763a4b8db689af316a7372b722bb29806ab4fb6"
                    ]
                },
                {
                    "command": [
                        "by rewrite (subvP sKrsE) ?seqv_sub_adjoin.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "by rewrite -subv_add => /agenvS; rewrite subfield_closed.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "alg_polyOver",
            "line_nb": 205,
            "steps": [
                {
                    "command": [
                        "by apply/(polyOverS (subvP (sub1v _)))/polyOver1P; exists p.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "sub_adjoin1v",
            "line_nb": 208,
            "steps": [
                {
                    "command": [
                        "by rewrite (sameP FadjoinP andP) sub1v.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "vsval_multiplicative",
            "line_nb": 211,
            "steps": [
                {
                    "command": [
                        "by split => //=; apply: algid1.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "vsval_invf",
            "line_nb": 216,
            "steps": [
                {
                    "command": [
                        "have [-> | Uv] := eqVneq w 0; first by rewrite !invr0.",
                        "VernacExtend",
                        "3763a4b8db689af316a7372b722bb29806ab4fb6"
                    ]
                },
                {
                    "command": [
                        "by apply: vsval_invr; rewrite unitfE.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "aspace_divr_closed",
            "line_nb": 220,
            "steps": [
                {
                    "command": [
                        "by split=> [|u v Ku Kv]; rewrite ?mem1v ?memvM ?memvV.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "subvs_fieldMixin",
            "line_nb": 237,
            "steps": [
                {
                    "command": [
                        "by move=> w nz_w; rewrite unitrE -val_eqE /= vsval_invf algid1 divff.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "polyOver_subvs",
            "line_nb": 242,
            "steps": [
                {
                    "command": [
                        "apply: (iffP polyOverP) => [Hp | [q ->] i]; last by rewrite coef_map // subvsP.",
                        "VernacExtend",
                        "3763a4b8db689af316a7372b722bb29806ab4fb6"
                    ]
                },
                {
                    "command": [
                        "exists (\\poly_(i < size p) (Subvs (Hp i))); rewrite -{1}[p]coefK.",
                        "VernacExtend",
                        "ad3c85e7779312e2259faa2f9c66d14dd86db123"
                    ]
                },
                {
                    "command": [
                        "by apply/polyP=> i; rewrite coef_map !coef_poly; case: ifP.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "divp_polyOver",
            "line_nb": 247,
            "steps": [
                {
                    "command": [
                        "move=> _ _ /polyOver_subvs[p ->] /polyOver_subvs[q ->].",
                        "VernacExtend",
                        "b1b2cb7a3a617cba67460b4eca1f04de3c1cc716"
                    ]
                },
                {
                    "command": [
                        "by apply/polyOver_subvs; exists (p %/ q); rewrite map_divp.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "modp_polyOver",
            "line_nb": 251,
            "steps": [
                {
                    "command": [
                        "move=> _ _ /polyOver_subvs[p ->] /polyOver_subvs[q ->].",
                        "VernacExtend",
                        "b1b2cb7a3a617cba67460b4eca1f04de3c1cc716"
                    ]
                },
                {
                    "command": [
                        "by apply/polyOver_subvs; exists (p %% q); rewrite map_modp.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "gcdp_polyOver",
            "line_nb": 255,
            "steps": [
                {
                    "command": [
                        "move=> _ _ /polyOver_subvs[p ->] /polyOver_subvs[q ->].",
                        "VernacExtend",
                        "b1b2cb7a3a617cba67460b4eca1f04de3c1cc716"
                    ]
                },
                {
                    "command": [
                        "by apply/polyOver_subvs; exists (gcdp p q); rewrite gcdp_map.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "prodv_is_aspace",
            "line_nb": 259,
            "steps": [
                {
                    "command": [
                        "rewrite /is_aspace prodvCA -!prodvA prodvA !prodv_id has_algid1 //=.",
                        "VernacExtend",
                        "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
                    ]
                },
                {
                    "command": [
                        "by rewrite -[1]mulr1 memv_mul ?mem1v.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "field_mem_algid",
            "line_nb": 264,
            "steps": [
                {
                    "command": [
                        "by rewrite algid1 mem1v.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "polyOverSv",
            "line_nb": 268,
            "steps": [
                {
                    "command": [
                        "by move/subvP=> sUV; apply: polyOverS.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "field_subvMl",
            "line_nb": 271,
            "steps": [
                {
                    "command": [
                        "by rewrite -{1}[U]prod1v prodvSl ?sub1v.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "field_subvMr",
            "line_nb": 274,
            "steps": [
                {
                    "command": [
                        "by rewrite prodvC field_subvMl.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "field_module_eq",
            "line_nb": 277,
            "steps": [
                {
                    "command": [
                        "by move=> modM; apply/eqP; rewrite eqEsubv modM field_subvMl.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "field_module_dimS",
            "line_nb": 284,
            "steps": [
                {
                    "command": [
                        "exact/skew_field_module_dimS/fieldP.",
                        "VernacExtend",
                        "ce637ff86bafca5d8359473e8c02af644dcbdc43"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "field_dimS",
            "line_nb": 287,
            "steps": [
                {
                    "command": [
                        "exact/skew_field_dimS/fieldP.",
                        "VernacExtend",
                        "ce637ff86bafca5d8359473e8c02af644dcbdc43"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "dim_field_module",
            "line_nb": 290,
            "steps": [
                {
                    "command": [
                        "by move/field_module_dimS/divnK.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "dim_sup_field",
            "line_nb": 293,
            "steps": [
                {
                    "command": [
                        "by move/field_dimS/divnK.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "field_module_semisimple",
            "line_nb": 296,
            "steps": [
                {
                    "command": [
                        "move=> modM; have dimM: (m * \\dim F)%N = \\dim M by rewrite -dim_field_module.",
                        "VernacExtend",
                        "ccd83c252dcbae3d56f3d057fcb8217878b51901"
                    ]
                },
                {
                    "command": [
                        "have [X [defM dxFX nzX]] := skew_field_module_semisimple (@fieldP L) modM.",
                        "VernacExtend",
                        "406cde1174359c53bf162a2a18c4eede395555f9"
                    ]
                },
                {
                    "command": [
                        "have szX: size X == m.",
                        "VernacExtend",
                        "406cde1174359c53bf162a2a18c4eede395555f9"
                    ]
                },
                {
                    "command": [
                        "rewrite -(eqn_pmul2r (adim_gt0 F)) dimM -defM (directvP dxFX) /=.",
                        "VernacExtend",
                        "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
                    ]
                },
                {
                    "command": [
                        "rewrite -sum1_size big_distrl; apply/eqP/eq_big_seq => x Xx /=.",
                        "VernacExtend",
                        "634a7639ed2fb7caf62757f84400927f5829b7d5"
                    ]
                },
                {
                    "command": [
                        "by rewrite mul1n dim_cosetv ?(memPn nzX).",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "rewrite directvE /= !(big_nth 0) (eqP szX) !big_mkord -directvE /= in defM dxFX.",
                        "VernacExtend",
                        "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
                    ]
                },
                {
                    "command": [
                        "exists (Tuple szX) => //; split=> // _ /tnthP[i ->]; rewrite (tnth_nth 0) /=.",
                        "VernacExtend",
                        "28c821d3ffa6b2d34a34ee3b5d1f710106f164c7"
                    ]
                },
                {
                    "command": [
                        "by rewrite -defM memvE (sumv_sup i) ?field_subvMl.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "size_Fadjoin_poly",
            "line_nb": 314,
            "steps": [
                {
                    "command": [
                        "exact: size_poly.",
                        "VernacExtend",
                        "ce637ff86bafca5d8359473e8c02af644dcbdc43"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "Fadjoin_polyOver",
            "line_nb": 317,
            "steps": [
                {
                    "command": [
                        "apply/(all_nthP 0) => i _; rewrite coef_poly /=.",
                        "VernacExtend",
                        "56c014161b39aecfb3c54301c2409dba4e8e1857"
                    ]
                },
                {
                    "command": [
                        "case: ifP => lti; last exact: mem0v.",
                        "VernacExtend",
                        "3763a4b8db689af316a7372b722bb29806ab4fb6"
                    ]
                },
                {
                    "command": [
                        "have /memv_cosetP[y Uy ->] := memv_sum_pi (erefl Fadjoin_sum) (inord i) v.",
                        "VernacExtend",
                        "406cde1174359c53bf162a2a18c4eede395555f9"
                    ]
                },
                {
                    "command": [
                        "rewrite inordK //; have [-> | /mulfK-> //] := eqVneq (x ^+ i) 0.",
                        "VernacExtend",
                        "7be6e3cf9ccbce33486c4b5c6fefdf7a9ad6e52b"
                    ]
                },
                {
                    "command": [
                        "by rewrite mulr0 mul0r mem0v.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "Fadjoin_poly_is_linear",
            "line_nb": 324,
            "steps": [
                {
                    "command": [
                        "move=> a u v; apply/polyP=> i; rewrite coefD coefZ !coef_poly.",
                        "VernacExtend",
                        "f7feb259d6220ca40e8a86b90bd06f137aa140ac"
                    ]
                },
                {
                    "command": [
                        "case: ifP => lti; last by rewrite mulr0 addr0.",
                        "VernacExtend",
                        "3763a4b8db689af316a7372b722bb29806ab4fb6"
                    ]
                },
                {
                    "command": [
                        "by rewrite linearP mulrA -mulrDl mulr_algl.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "size_minPoly",
            "line_nb": 331,
            "steps": [
                {
                    "command": [
                        "by rewrite size_addl ?size_polyXn // size_opp ltnS size_poly.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "monic_minPoly",
            "line_nb": 334,
            "steps": [
                {
                    "command": [
                        "rewrite monicE /lead_coef size_minPoly coefB coefXn eqxx.",
                        "VernacExtend",
                        "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
                    ]
                },
                {
                    "command": [
                        "by rewrite nth_default ?subr0 ?size_poly.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "adjoin_degreeE",
            "line_nb": 343,
            "steps": [
                {
                    "command": [
                        "by rewrite [n]prednK // divn_gt0 ?adim_gt0 // dimvS ?subv_adjoin.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "dim_Fadjoin",
            "line_nb": 346,
            "steps": [
                {
                    "command": [
                        "by rewrite adjoin_degreeE -dim_sup_field ?subv_adjoin.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "adjoin0_deg",
            "line_nb": 349,
            "steps": [
                {
                    "command": [
                        "by rewrite /adjoin_degree addv0 subfield_closed divnn adim_gt0.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "adjoin_deg_eq1",
            "line_nb": 352,
            "steps": [
                {
                    "command": [
                        "rewrite (sameP Fadjoin_idP eqP) adjoin_degreeE; have sK_Kx := subv_adjoin K x.",
                        "VernacExtend",
                        "7be6e3cf9ccbce33486c4b5c6fefdf7a9ad6e52b"
                    ]
                },
                {
                    "command": [
                        "apply/eqP/idP=> [dimKx1 | /eqP->]; last by rewrite divnn adim_gt0.",
                        "VernacExtend",
                        "3763a4b8db689af316a7372b722bb29806ab4fb6"
                    ]
                },
                {
                    "command": [
                        "by rewrite eq_sym eqEdim sK_Kx /= (dim_sup_field sK_Kx) dimKx1 mul1n.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "nz_x_i",
            "line_nb": 376,
            "steps": [
                {
                    "command": [
                        "by rewrite expf_eq0; case: eqP i => [->|_] [[]] //; rewrite adjoin0_deg.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "Fadjoin_eq_sum",
            "line_nb": 379,
            "steps": [
                {
                    "command": [
                        "apply/esym/eqP; rewrite eqEdim eq_leq ?andbT.",
                        "VernacExtend",
                        "56c014161b39aecfb3c54301c2409dba4e8e1857"
                    ]
                },
                {
                    "command": [
                        "apply/subv_sumP=> i _; rewrite -agenvM prodvS ?subv_adjoin //.",
                        "VernacExtend",
                        "56c014161b39aecfb3c54301c2409dba4e8e1857"
                    ]
                },
                {
                    "command": [
                        "by rewrite -expv_line (subv_trans (subX_agenv _ _)) ?agenvS ?addvSr.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "rewrite dim_Fadjoin -[n]card_ord -sum_nat_const (directvP Fadjoin_sum_direct).",
                        "VernacExtend",
                        "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
                    ]
                },
                {
                    "command": [
                        "by apply: eq_bigr => i _; rewrite /= dim_cosetv.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "Fadjoin_poly_eq",
            "line_nb": 386,
            "steps": [
                {
                    "command": [
                        "move/(sumv_pi_sum Fadjoin_eq_sum)=> {2}<-; rewrite horner_poly.",
                        "VernacExtend",
                        "057edeb0967475c7ea5e8c98c449ddc5613eddc1"
                    ]
                },
                {
                    "command": [
                        "by apply: eq_bigr => i _; rewrite inord_val mulfVK.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "mempx_Fadjoin",
            "line_nb": 390,
            "steps": [
                {
                    "command": [
                        "move=> Kp; rewrite rpred_horner ?memv_adjoin ?(polyOverS _ Kp) //.",
                        "VernacExtend",
                        "057edeb0967475c7ea5e8c98c449ddc5613eddc1"
                    ]
                },
                {
                    "command": [
                        "exact: subvP_adjoin.",
                        "VernacExtend",
                        "ce637ff86bafca5d8359473e8c02af644dcbdc43"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "Fadjoin_polyP",
            "line_nb": 394,
            "steps": [
                {
                    "command": [
                        "apply: (iffP idP) => [Kx_v | [p Kp ->]]; last exact: mempx_Fadjoin.",
                        "VernacExtend",
                        "3763a4b8db689af316a7372b722bb29806ab4fb6"
                    ]
                },
                {
                    "command": [
                        "by exists (Fadjoin_poly K x v); rewrite ?Fadjoin_polyOver ?Fadjoin_poly_eq.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "Fadjoin_poly_unique",
            "line_nb": 398,
            "steps": [
                {
                    "command": [
                        "have polyKx q i: q \\is a polyOver K -> q`_i * x ^+ i \\in (K * <[x ^+ i]>)%VS.",
                        "VernacExtend",
                        "406cde1174359c53bf162a2a18c4eede395555f9"
                    ]
                },
                {
                    "command": [
                        "by move/polyOverP=> Kq; rewrite memv_mul ?Kq ?memv_line.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "move=> Kp szp Dv; have /Fadjoin_poly_eq/eqP := mempx_Fadjoin Kp.",
                        "VernacExtend",
                        "ccd83c252dcbae3d56f3d057fcb8217878b51901"
                    ]
                },
                {
                    "command": [
                        "rewrite {1}Dv {Dv} !(@horner_coef_wide _ n) ?size_poly //.",
                        "VernacExtend",
                        "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
                    ]
                },
                {
                    "command": [
                        "move/polyKx in Kp; have /polyKx K_pv := Fadjoin_polyOver K x v.",
                        "VernacExtend",
                        "ccd83c252dcbae3d56f3d057fcb8217878b51901"
                    ]
                },
                {
                    "command": [
                        "rewrite (directv_sum_unique Fadjoin_sum_direct) // => /eqfunP eq_pq.",
                        "VernacExtend",
                        "3c42b53d0efc26db114b00541ac5e7fcb29e6aeb"
                    ]
                },
                {
                    "command": [
                        "apply/polyP=> i; have [leni|?] := leqP n i; last exact: mulIf (eq_pq (Sub i _)).",
                        "VernacExtend",
                        "3763a4b8db689af316a7372b722bb29806ab4fb6"
                    ]
                },
                {
                    "command": [
                        "by rewrite !nth_default ?(leq_trans _ leni) ?size_poly.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "minPolyOver",
            "line_nb": 416,
            "steps": [
                {
                    "command": [
                        "by rewrite /minPoly rpredB ?rpredX ?polyOverX ?Fadjoin_polyOver.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "minPolyxx",
            "line_nb": 419,
            "steps": [
                {
                    "command": [
                        "by rewrite !hornerE hornerXn Fadjoin_poly_eq ?subrr ?rpredX ?memv_adjoin.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "root_minPoly",
            "line_nb": 422,
            "steps": [
                {
                    "command": [
                        "exact/rootP/minPolyxx.",
                        "VernacExtend",
                        "ce637ff86bafca5d8359473e8c02af644dcbdc43"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "minPoly_XsubC",
            "line_nb": 430,
            "steps": [
                {
                    "command": [
                        "set p := minPoly K x; apply: (iffP idP) => [Kx | Dp]; last first.",
                        "VernacExtend",
                        "3763a4b8db689af316a7372b722bb29806ab4fb6"
                    ]
                },
                {
                    "command": [
                        "suffices ->: x = - p`_0 by rewrite rpredN (polyOverP minPolyOver).",
                        "VernacExtend",
                        "290ed488b5562e885aa2cac56f3a69b4faa0eaa6"
                    ]
                },
                {
                    "command": [
                        "by rewrite Dp coefB coefX coefC add0r opprK.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "rewrite (@all_roots_prod_XsubC _ p [:: x]) /= ?root_minPoly //.",
                        "VernacExtend",
                        "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
                    ]
                },
                {
                    "command": [
                        "by rewrite big_seq1 (monicP (monic_minPoly K x)) scale1r.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "by apply/eqP; rewrite size_minPoly eqSS adjoin_deg_eq1.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "root_small_adjoin_poly",
            "line_nb": 438,
            "steps": [
                {
                    "command": [
                        "move=> Kp szp; apply/rootP/eqP=> [px0 | ->]; last by rewrite horner0.",
                        "VernacExtend",
                        "3763a4b8db689af316a7372b722bb29806ab4fb6"
                    ]
                },
                {
                    "command": [
                        "rewrite -(Fadjoin_poly_unique Kp szp px0).",
                        "VernacExtend",
                        "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
                    ]
                },
                {
                    "command": [
                        "by apply: Fadjoin_poly_unique; rewrite ?polyOver0 ?size_poly0 ?horner0.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "minPoly_irr",
            "line_nb": 443,
            "steps": [
                {
                    "command": [
                        "rewrite dvdp_eq; set q := _ %/ _ => Kp def_pq.",
                        "VernacExtend",
                        "80e7cce19c53eb5d5a21aafd83e552d37e23084a"
                    ]
                },
                {
                    "command": [
                        "have Kq: q \\is a polyOver K by rewrite divp_polyOver // minPolyOver.",
                        "VernacExtend",
                        "406cde1174359c53bf162a2a18c4eede395555f9"
                    ]
                },
                {
                    "command": [
                        "move: q Kq def_pq root_minPoly (size_minPoly K x) => q Kq /eqP->.",
                        "VernacExtend",
                        "b1b2cb7a3a617cba67460b4eca1f04de3c1cc716"
                    ]
                },
                {
                    "command": [
                        "rewrite rootM => pqx0 szpq.",
                        "VernacExtend",
                        "3c42b53d0efc26db114b00541ac5e7fcb29e6aeb"
                    ]
                },
                {
                    "command": [
                        "have [nzq nzp]: q != 0 /\\ p != 0.",
                        "VernacExtend",
                        "406cde1174359c53bf162a2a18c4eede395555f9"
                    ]
                },
                {
                    "command": [
                        "by apply/norP; rewrite -mulf_eq0 -size_poly_eq0 szpq.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "without loss{pqx0} qx0: q p Kp Kq nzp nzq szpq / root q x.",
                        "VernacExtend",
                        "87d5e7b04148ee8f2e4efcc847e0dfadae0aa4cb"
                    ]
                },
                {
                    "command": [
                        "move=> IH; case/orP: pqx0 => /IH{IH}IH; first exact: IH.",
                        "VernacExtend",
                        "3763a4b8db689af316a7372b722bb29806ab4fb6"
                    ]
                },
                {
                    "command": [
                        "have{IH} /orP[]: (q %= p * q) || (q %= 1) by apply: IH => //; rewrite mulrC.",
                        "VernacExtend",
                        "406cde1174359c53bf162a2a18c4eede395555f9"
                    ]
                },
                {
                    "command": [
                        "by rewrite orbC -{1}[q]mul1r eqp_mul2r // eqp_sym => ->.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "by rewrite -{1}[p]mul1r eqp_sym eqp_mul2r // => ->.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "apply/orP; right; rewrite -size_poly_eq1 eqn_leq lt0n size_poly_eq0 nzp andbT.",
                        "VernacExtend",
                        "a61b786075f63912d19a92204545dae65f80572b"
                    ]
                },
                {
                    "command": [
                        "rewrite -(leq_add2r (size q)) -leq_subLR subn1 -size_mul // mulrC szpq.",
                        "VernacExtend",
                        "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
                    ]
                },
                {
                    "command": [
                        "by rewrite ltnNge; apply: contra nzq => /(root_small_adjoin_poly Kq) <-.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "minPoly_dvdp",
            "line_nb": 459,
            "steps": [
                {
                    "command": [
                        "move=> Kp rootp.",
                        "VernacExtend",
                        "b1b2cb7a3a617cba67460b4eca1f04de3c1cc716"
                    ]
                },
                {
                    "command": [
                        "have gcdK : gcdp (minPoly K x) p \\is a polyOver K.",
                        "VernacExtend",
                        "406cde1174359c53bf162a2a18c4eede395555f9"
                    ]
                },
                {
                    "command": [
                        "by rewrite gcdp_polyOver ?minPolyOver.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "have /orP[gcd_eqK|gcd_eq1] := minPoly_irr gcdK (dvdp_gcdl (minPoly K x) p).",
                        "VernacExtend",
                        "406cde1174359c53bf162a2a18c4eede395555f9"
                    ]
                },
                {
                    "command": [
                        "by rewrite -(eqp_dvdl _ gcd_eqK) dvdp_gcdr.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "case/negP: (root1 x).",
                        "VernacExtend",
                        "e00fff71ff314c991514fc71c41a3556702e444a"
                    ]
                },
                {
                    "command": [
                        "by rewrite -(eqp_root gcd_eq1) root_gcd rootp root_minPoly.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "Fadjoin1_polyP",
            "line_nb": 474,
            "steps": [
                {
                    "command": [
                        "apply: (iffP Fadjoin_polyP) => [[_ /polyOver1P]|] [p ->]; first by exists p.",
                        "VernacExtend",
                        "3763a4b8db689af316a7372b722bb29806ab4fb6"
                    ]
                },
                {
                    "command": [
                        "by exists (map_poly (in_alg L) p) => //; apply: alg_polyOver.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "fieldExt_hornerC",
            "line_nb": 483,
            "steps": [
                {
                    "command": [
                        "exact: horner_morphC.",
                        "VernacExtend",
                        "ce637ff86bafca5d8359473e8c02af644dcbdc43"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "fieldExt_hornerX",
            "line_nb": 486,
            "steps": [
                {
                    "command": [
                        "exact: horner_morphX.",
                        "VernacExtend",
                        "ce637ff86bafca5d8359473e8c02af644dcbdc43"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "fieldExt_hornerZ",
            "line_nb": 489,
            "steps": [
                {
                    "command": [
                        "move=> a p; rewrite -mul_polyC rmorphM /= fieldExt_hornerC.",
                        "VernacExtend",
                        "057edeb0967475c7ea5e8c98c449ddc5613eddc1"
                    ]
                },
                {
                    "command": [
                        "by rewrite -scalerAl mul1r.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "adjoin_degree_aimg",
            "line_nb": 514,
            "steps": [
                {
                    "command": [
                        "rewrite !adjoin_degreeE -aimg_adjoin.",
                        "VernacExtend",
                        "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
                    ]
                },
                {
                    "command": [
                        "by rewrite !limg_dim_eq ?(eqP (AHom_lker0 f)) ?capv0.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "map_minPoly",
            "line_nb": 518,
            "steps": [
                {
                    "command": [
                        "set fp := minPoly (f @: K) (f x); pose fM := [rmorphism of f].",
                        "VernacExtend",
                        "dda58a04ca4da9adf6d016079f462c4d6ff69ca8"
                    ]
                },
                {
                    "command": [
                        "have [p Kp Dp]: exists2 p, p \\is a polyOver K & map_poly f p = fp.",
                        "VernacExtend",
                        "406cde1174359c53bf162a2a18c4eede395555f9"
                    ]
                },
                {
                    "command": [
                        "have Kfp: fp \\is a polyOver (f @: K)%VS by apply: minPolyOver.",
                        "VernacExtend",
                        "406cde1174359c53bf162a2a18c4eede395555f9"
                    ]
                },
                {
                    "command": [
                        "exists (map_poly f^-1%VF fp).",
                        "VernacExtend",
                        "d56738e657232a55547d09fc0790f1747a7353cb"
                    ]
                },
                {
                    "command": [
                        "apply/polyOver_poly=> j _; have /memv_imgP[y Ky ->] := polyOverP Kfp j.",
                        "VernacExtend",
                        "c574574294cc642b01d157e4c8f21ac2f90e4b5d"
                    ]
                },
                {
                    "command": [
                        "by rewrite lker0_lfunK ?AHom_lker0.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "rewrite -map_poly_comp map_poly_id // => _ /(allP Kfp)/memv_imgP[y _ ->].",
                        "VernacExtend",
                        "3c42b53d0efc26db114b00541ac5e7fcb29e6aeb"
                    ]
                },
                {
                    "command": [
                        "by rewrite /= limg_lfunVK ?memv_img ?memvf.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "apply/eqP; rewrite -eqp_monic ?monic_map ?monic_minPoly // -Dp eqp_map.",
                        "VernacExtend",
                        "56c014161b39aecfb3c54301c2409dba4e8e1857"
                    ]
                },
                {
                    "command": [
                        "have: ~~ (p %= 1) by rewrite -size_poly_eq1 -(size_map_poly fM) Dp size_minPoly.",
                        "VernacExtend",
                        "406cde1174359c53bf162a2a18c4eede395555f9"
                    ]
                },
                {
                    "command": [
                        "apply: implyP; rewrite implyNb orbC eqp_sym minPoly_irr //.",
                        "VernacExtend",
                        "56c014161b39aecfb3c54301c2409dba4e8e1857"
                    ]
                },
                {
                    "command": [
                        "rewrite -(dvdp_map fM) Dp minPoly_dvdp ?fmorph_root ?root_minPoly //.",
                        "VernacExtend",
                        "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
                    ]
                },
                {
                    "command": [
                        "by apply/polyOver_poly=> j _; apply/memv_img/polyOverP/minPolyOver.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "fieldOver_scaleA",
            "line_nb": 550,
            "steps": [
                {
                    "command": [
                        "exact: mulrA.",
                        "VernacExtend",
                        "ce637ff86bafca5d8359473e8c02af644dcbdc43"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "fieldOver_scale1",
            "line_nb": 553,
            "steps": [
                {
                    "command": [
                        "by rewrite /(1 *F: u) /= algid1 mul1r.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "fieldOver_scaleDr",
            "line_nb": 556,
            "steps": [
                {
                    "command": [
                        "exact: mulrDr.",
                        "VernacExtend",
                        "ce637ff86bafca5d8359473e8c02af644dcbdc43"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "fieldOver_scaleDl",
            "line_nb": 559,
            "steps": [
                {
                    "command": [
                        "exact: mulrDl.",
                        "VernacExtend",
                        "ce637ff86bafca5d8359473e8c02af644dcbdc43"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "fieldOver_scaleE",
            "line_nb": 564,
            "steps": [
                {
                    "command": [
                        "by [].",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "fieldOver_scaleAl",
            "line_nb": 567,
            "steps": [
                {
                    "command": [
                        "exact: mulrA.",
                        "VernacExtend",
                        "ce637ff86bafca5d8359473e8c02af644dcbdc43"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "fieldOver_scaleAr",
            "line_nb": 571,
            "steps": [
                {
                    "command": [
                        "exact: mulrCA.",
                        "VernacExtend",
                        "ce637ff86bafca5d8359473e8c02af644dcbdc43"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "fieldOver_vectMixin",
            "line_nb": 576,
            "steps": [
                {
                    "command": [
                        "have [bL [_ nz_bL] [defL dxSbL]] := field_module_semisimple (subvf (F * _)).",
                        "VernacExtend",
                        "406cde1174359c53bf162a2a18c4eede395555f9"
                    ]
                },
                {
                    "command": [
                        "do [set n := \\dim_F {:L} in bL nz_bL *; set SbL := (\\sum_i _)%VS] in defL dxSbL.",
                        "VernacExtend",
                        "2ed5ae5c7a1513e882f170a2462d7a7c3c1ca435"
                    ]
                },
                {
                    "command": [
                        "have in_bL i (a : K_F) : val a * (bL`_i : L_F) \\in (F * <[bL`_i]>)%VS.",
                        "VernacExtend",
                        "406cde1174359c53bf162a2a18c4eede395555f9"
                    ]
                },
                {
                    "command": [
                        "by rewrite memv_mul ?(valP a) ?memv_line.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "have nz_bLi (i : 'I_n): bL`_i != 0 by rewrite (memPn nz_bL) ?memt_nth.",
                        "VernacExtend",
                        "406cde1174359c53bf162a2a18c4eede395555f9"
                    ]
                },
                {
                    "command": [
                        "pose r2v (v : 'rV[K_F]_n) : L_F := \\sum_i v 0 i *: (bL`_i : L_F).",
                        "VernacExtend",
                        "3c5f04de94609049d978298aa02ff35fb35ea7c7"
                    ]
                },
                {
                    "command": [
                        "have r2v_lin: linear r2v.",
                        "VernacExtend",
                        "406cde1174359c53bf162a2a18c4eede395555f9"
                    ]
                },
                {
                    "command": [
                        "move=> a u v; rewrite /r2v scaler_sumr -big_split /=; apply: eq_bigr => i _.",
                        "VernacExtend",
                        "0fa388cebe8ed6372154caa26cd10c357f123670"
                    ]
                },
                {
                    "command": [
                        "by rewrite scalerA -scalerDl !mxE.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "have v2rP x: {r : 'rV[K_F]_n | x = r2v r}.",
                        "VernacExtend",
                        "406cde1174359c53bf162a2a18c4eede395555f9"
                    ]
                },
                {
                    "command": [
                        "apply: sig_eqW; have /memv_sumP[y Fy ->]: x \\in SbL by rewrite defL memvf.",
                        "VernacExtend",
                        "c574574294cc642b01d157e4c8f21ac2f90e4b5d"
                    ]
                },
                {
                    "command": [
                        "have /fin_all_exists[r Dr] i: exists r, y i = r *: (bL`_i : L_F).",
                        "VernacExtend",
                        "406cde1174359c53bf162a2a18c4eede395555f9"
                    ]
                },
                {
                    "command": [
                        "by have /memv_cosetP[a Fa ->] := Fy i isT; exists (Subvs Fa).",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "by exists (\\row_i r i); apply: eq_bigr => i _; rewrite mxE.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "pose v2r x := sval (v2rP x).",
                        "VernacExtend",
                        "3c5f04de94609049d978298aa02ff35fb35ea7c7"
                    ]
                },
                {
                    "command": [
                        "have v2rK: cancel v2r (Linear r2v_lin) by rewrite /v2r => x; case: (v2rP x).",
                        "VernacExtend",
                        "406cde1174359c53bf162a2a18c4eede395555f9"
                    ]
                },
                {
                    "command": [
                        "suffices r2vK: cancel r2v v2r.",
                        "VernacExtend",
                        "290ed488b5562e885aa2cac56f3a69b4faa0eaa6"
                    ]
                },
                {
                    "command": [
                        "by exists n, v2r; [apply: can2_linear v2rK | exists r2v].",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "move=> r; apply/rowP=> i; apply/val_inj/(mulIf (nz_bLi i))/eqP; move: i isT.",
                        "VernacExtend",
                        "29765d52d1ebc7805de64975ff26cf4e34248a22"
                    ]
                },
                {
                    "command": [
                        "by apply/forall_inP; move/directv_sum_unique: dxSbL => <- //; apply/eqP/v2rK.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "trivial_fieldOver",
            "line_nb": 602,
            "steps": [
                {
                    "command": [
                        "move=> x; apply/vlineP/idP=> [[{x}x ->] | Fx].",
                        "VernacExtend",
                        "d6ebf3361f380a12d5c2c9bbb7ea363132c48b36"
                    ]
                },
                {
                    "command": [
                        "by rewrite fieldOver_scaleE mulr1 (valP x).",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "by exists (vsproj F x); rewrite fieldOver_scaleE mulr1 vsprojK.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "mem_vspaceOver",
            "line_nb": 608,
            "steps": [
                {
                    "command": [
                        "move=> y; apply/idP/idP; last rewrite unlock; move/coord_span->.",
                        "VernacExtend",
                        "ee013142fd2496f1dcf40016e16dbe811dd82008"
                    ]
                },
                {
                    "command": [
                        "rewrite (@memv_suml F0 L) // => i _.",
                        "VernacExtend",
                        "3c42b53d0efc26db114b00541ac5e7fcb29e6aeb"
                    ]
                },
                {
                    "command": [
                        "by rewrite memv_mul ?subvsP // vbasis_mem ?memt_nth.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "rewrite memv_suml // => ij _; rewrite -tnth_nth; set x := tnth _ ij.",
                        "VernacExtend",
                        "39b867a039ef6cbde0b79e2a0f18beb583122b27"
                    ]
                },
                {
                    "command": [
                        "have/allpairsP[[u z] /= [Fu Vz {x}->]]: x \\in _ := mem_tnth ij _.",
                        "VernacExtend",
                        "406cde1174359c53bf162a2a18c4eede395555f9"
                    ]
                },
                {
                    "command": [
                        "by rewrite scalerAl (memvZ (Subvs _)) ?memvZ ?memv_span //= vbasis_mem.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "mem_aspaceOver",
            "line_nb": 616,
            "steps": [
                {
                    "command": [
                        "by move=> sFE y; rewrite mem_vspaceOver field_module_eq ?sup_field_module.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "aspaceOver_suproof",
            "line_nb": 619,
            "steps": [
                {
                    "command": [
                        "rewrite /is_aspace has_algid1; last by rewrite mem_vspaceOver (@mem1v _ L).",
                        "VernacExtend",
                        "3763a4b8db689af316a7372b722bb29806ab4fb6"
                    ]
                },
                {
                    "command": [
                        "by apply/prodvP=> u v; rewrite !mem_vspaceOver; apply: memvM.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "dim_vspaceOver",
            "line_nb": 624,
            "steps": [
                {
                    "command": [
                        "move=> modM; have [] := field_module_semisimple modM.",
                        "VernacExtend",
                        "ccd83c252dcbae3d56f3d057fcb8217878b51901"
                    ]
                },
                {
                    "command": [
                        "set n := \\dim_F M => b [Mb nz_b] [defM dx_b].",
                        "VernacExtend",
                        "3c42b53d0efc26db114b00541ac5e7fcb29e6aeb"
                    ]
                },
                {
                    "command": [
                        "suff: basis_of (vspaceOver M) b by apply: size_basis.",
                        "VernacExtend",
                        "d07fc8b2103f140554938023774bf3f75d04ba99"
                    ]
                },
                {
                    "command": [
                        "apply/andP; split.",
                        "VernacExtend",
                        "b146763f64aeff143afb9ba1b7b1a677b4726e0f"
                    ]
                },
                {
                    "command": [
                        "rewrite eqEsubv; apply/andP; split; apply/span_subvP=> u.",
                        "VernacExtend",
                        "411ab4a64a4ea80a8715dbdaf80775b735845cfc"
                    ]
                },
                {
                    "command": [
                        "by rewrite mem_vspaceOver field_module_eq // => /Mb.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "move/(@vbasis_mem _ _ _ M); rewrite -defM => /memv_sumP[{u}u Fu ->].",
                        "VernacExtend",
                        "8261237f0cda1915a4077c28869831c5329103ce"
                    ]
                },
                {
                    "command": [
                        "apply: memv_suml => i _; have /memv_cosetP[a Fa ->] := Fu i isT.",
                        "VernacExtend",
                        "c574574294cc642b01d157e4c8f21ac2f90e4b5d"
                    ]
                },
                {
                    "command": [
                        "by apply: (memvZ (Subvs Fa)); rewrite memv_span ?memt_nth.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "apply/freeP=> a /(directv_sum_independent dx_b) a_0 i.",
                        "VernacExtend",
                        "4bd6fa79b17bcd2bfb7af091fb325367a20385d6"
                    ]
                },
                {
                    "command": [
                        "have{a_0}: a i *: (b`_i : L_F) == 0.",
                        "VernacExtend",
                        "406cde1174359c53bf162a2a18c4eede395555f9"
                    ]
                },
                {
                    "command": [
                        "by rewrite a_0 {i}// => i _; rewrite memv_mul ?memv_line ?subvsP.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "by rewrite scaler_eq0=> /predU1P[] // /idPn[]; rewrite (memPn nz_b) ?memt_nth.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "dim_aspaceOver",
            "line_nb": 639,
            "steps": [
                {
                    "command": [
                        "by rewrite -sup_field_module; apply: dim_vspaceOver.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "vspaceOverP",
            "line_nb": 642,
            "steps": [
                {
                    "command": [
                        "pose V := (F * <<vbasis V_F : seq L>>)%VS.",
                        "VernacExtend",
                        "3c5f04de94609049d978298aa02ff35fb35ea7c7"
                    ]
                },
                {
                    "command": [
                        "have idV: (F * V)%VS = V by rewrite prodvA prodv_id.",
                        "VernacExtend",
                        "406cde1174359c53bf162a2a18c4eede395555f9"
                    ]
                },
                {
                    "command": [
                        "suffices defVF: V_F = vspaceOver V.",
                        "VernacExtend",
                        "290ed488b5562e885aa2cac56f3a69b4faa0eaa6"
                    ]
                },
                {
                    "command": [
                        "by exists V; split=> [||u]; rewrite ?defVF ?mem_vspaceOver ?idV.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "apply/vspaceP=> v; rewrite mem_vspaceOver idV.",
                        "VernacExtend",
                        "56c014161b39aecfb3c54301c2409dba4e8e1857"
                    ]
                },
                {
                    "command": [
                        "do [apply/idP/idP; last rewrite /V unlock] => [/coord_vbasis|/coord_span] ->.",
                        "VernacExtend",
                        "3c42b53d0efc26db114b00541ac5e7fcb29e6aeb"
                    ]
                },
                {
                    "command": [
                        "by apply: memv_suml => i _; rewrite memv_mul ?subvsP ?memv_span ?memt_nth.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "apply: memv_suml => i _; rewrite -tnth_nth; set xu := tnth _ i.",
                        "VernacExtend",
                        "c0b55a279182ecd0a9c92c4d7ab71c7e81eac100"
                    ]
                },
                {
                    "command": [
                        "have /allpairsP[[x u] /=]: xu \\in _ := mem_tnth i _.",
                        "VernacExtend",
                        "406cde1174359c53bf162a2a18c4eede395555f9"
                    ]
                },
                {
                    "command": [
                        "case=> /vbasis_mem Fx /vbasis_mem Vu ->.",
                        "VernacExtend",
                        "e00fff71ff314c991514fc71c41a3556702e444a"
                    ]
                },
                {
                    "command": [
                        "rewrite scalerAl (coord_span Vu) mulr_sumr memv_suml // => j_.",
                        "VernacExtend",
                        "3c42b53d0efc26db114b00541ac5e7fcb29e6aeb"
                    ]
                },
                {
                    "command": [
                        "by rewrite -scalerCA (memvZ (Subvs _)) ?memvZ // vbasis_mem ?memt_nth.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "aspaceOverP",
            "line_nb": 656,
            "steps": [
                {
                    "command": [
                        "have [V [defEF modV memV]] := vspaceOverP E_F.",
                        "VernacExtend",
                        "406cde1174359c53bf162a2a18c4eede395555f9"
                    ]
                },
                {
                    "command": [
                        "have algE: has_algid V && (V * V <= V)%VS.",
                        "VernacExtend",
                        "406cde1174359c53bf162a2a18c4eede395555f9"
                    ]
                },
                {
                    "command": [
                        "rewrite has_algid1; last by rewrite -memV mem1v.",
                        "VernacExtend",
                        "3763a4b8db689af316a7372b722bb29806ab4fb6"
                    ]
                },
                {
                    "command": [
                        "by apply/prodvP=> u v; rewrite -!memV; apply: memvM.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "by exists (ASpace algE); rewrite -sup_field_module; split; first apply: val_inj.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "baseField_scaleA",
            "line_nb": 679,
            "steps": [
                {
                    "command": [
                        "by rewrite [_ *F0: _]scalerA -rmorphM.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "baseField_scale1",
            "line_nb": 682,
            "steps": [
                {
                    "command": [
                        "by rewrite /(1 *F0: u) rmorph1 scale1r.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "baseField_scaleDr",
            "line_nb": 685,
            "steps": [
                {
                    "command": [
                        "exact: scalerDr.",
                        "VernacExtend",
                        "ce637ff86bafca5d8359473e8c02af644dcbdc43"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "baseField_scaleDl",
            "line_nb": 688,
            "steps": [
                {
                    "command": [
                        "by rewrite -scalerDl -rmorphD.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "baseField_scaleE",
            "line_nb": 693,
            "steps": [
                {
                    "command": [
                        "by [].",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "baseField_scaleAl",
            "line_nb": 696,
            "steps": [
                {
                    "command": [
                        "exact: scalerAl.",
                        "VernacExtend",
                        "ce637ff86bafca5d8359473e8c02af644dcbdc43"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "baseField_scaleAr",
            "line_nb": 700,
            "steps": [
                {
                    "command": [
                        "exact: scalerAr.",
                        "VernacExtend",
                        "ce637ff86bafca5d8359473e8c02af644dcbdc43"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "F0ZEZ",
            "line_nb": 727,
            "steps": [
                {
                    "command": [
                        "by rewrite [a *: _]scalerA -scalerAl mul1r.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "mem_baseVspace",
            "line_nb": 732,
            "steps": [
                {
                    "command": [
                        "move=> y; apply/idP/idP=> [/coord_span->|/coord_vbasis->]; last first.",
                        "VernacExtend",
                        "3763a4b8db689af316a7372b722bb29806ab4fb6"
                    ]
                },
                {
                    "command": [
                        "apply: memv_suml => i _; rewrite (coordF (coord _ i (y : L))) scaler_suml -/n.",
                        "VernacExtend",
                        "56c014161b39aecfb3c54301c2409dba4e8e1857"
                    ]
                },
                {
                    "command": [
                        "apply: memv_suml => j _; rewrite -/bF -F0ZEZ memvZ ?memv_span // -!tnth_nth.",
                        "VernacExtend",
                        "56c014161b39aecfb3c54301c2409dba4e8e1857"
                    ]
                },
                {
                    "command": [
                        "by apply/imageP; exists (i, j).",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "apply: memv_suml => k _; rewrite nth_image; case: (enum_val k) => i j /=.",
                        "VernacExtend",
                        "5caed936835e366e9e533d8f19382dcfedbf86d4"
                    ]
                },
                {
                    "command": [
                        "by rewrite F0ZEZ memvZ ?vbasis_mem ?mem_tnth.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "baseAspace_suproof",
            "line_nb": 754,
            "steps": [
                {
                    "command": [
                        "rewrite /is_aspace has_algid1; last by rewrite mem_baseVspace (mem1v E).",
                        "VernacExtend",
                        "3763a4b8db689af316a7372b722bb29806ab4fb6"
                    ]
                },
                {
                    "command": [
                        "by apply/prodvP=> u v; rewrite !mem_baseVspace; apply: memvM.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "refBaseField_key",
            "line_nb": 759,
            "steps": [
                {
                    "command": [
                        "by [].",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "dim_refBaseField",
            "line_nb": 765,
            "steps": [
                {
                    "command": [
                        "by rewrite [F1]unlock dim_baseVspace dimv1 mul1n.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "baseVspace_module",
            "line_nb": 768,
            "steps": [
                {
                    "command": [
                        "apply/prodvP=> u v; rewrite [F1]unlock !mem_baseVspace => /vlineP[x ->] Vv.",
                        "VernacExtend",
                        "5fce7e5361004176d6b434b36b4623c7387f70bb"
                    ]
                },
                {
                    "command": [
                        "by rewrite -(@scalerAl F L) mul1r; apply: memvZ.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "sub_baseField",
            "line_nb": 772,
            "steps": [
                {
                    "command": [
                        "by rewrite -sup_field_module baseVspace_module.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "vspaceOver_refBase",
            "line_nb": 775,
            "steps": [
                {
                    "command": [
                        "move=> v; rewrite mem_vspaceOver field_module_eq ?baseVspace_module //.",
                        "VernacExtend",
                        "057edeb0967475c7ea5e8c98c449ddc5613eddc1"
                    ]
                },
                {
                    "command": [
                        "by rewrite mem_baseVspace.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "module_baseVspace",
            "line_nb": 779,
            "steps": [
                {
                    "command": [
                        "move=> modM0; pose V := <<vbasis (vspaceOver F1 M0) : seq L>>%VS.",
                        "VernacExtend",
                        "fef3c4a8f7fcf70b0824f3cce5fb58f2e0ef07fd"
                    ]
                },
                {
                    "command": [
                        "suffices memM0: M0 =i V.",
                        "VernacExtend",
                        "290ed488b5562e885aa2cac56f3a69b4faa0eaa6"
                    ]
                },
                {
                    "command": [
                        "by exists V => //; apply/vspaceP=> v; rewrite mem_baseVspace memM0.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "move=> v; rewrite -{1}(field_module_eq modM0) -(mem_vspaceOver M0) {}/V.",
                        "VernacExtend",
                        "057edeb0967475c7ea5e8c98c449ddc5613eddc1"
                    ]
                },
                {
                    "command": [
                        "move: (vspaceOver F1 M0) => M.",
                        "VernacExtend",
                        "b1b2cb7a3a617cba67460b4eca1f04de3c1cc716"
                    ]
                },
                {
                    "command": [
                        "apply/idP/idP=> [/coord_vbasis|/coord_span]->; apply/memv_suml=> i _.",
                        "VernacExtend",
                        "8d9dae45eeb3a769b8a865cef8ae476451f63802"
                    ]
                },
                {
                    "command": [
                        "rewrite /(_ *: _) /= /fieldOver_scale; case: (coord _ i _) => /= x.",
                        "VernacExtend",
                        "712d339e99ee17eb7d5033e19ac614eb3ca6b532"
                    ]
                },
                {
                    "command": [
                        "rewrite {1}[F1]unlock mem_baseVspace => /vlineP[{x}x ->].",
                        "VernacExtend",
                        "3c42b53d0efc26db114b00541ac5e7fcb29e6aeb"
                    ]
                },
                {
                    "command": [
                        "by rewrite -(@scalerAl F L) mul1r memvZ ?memv_span ?memt_nth.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "move: (coord _ i _) => x; rewrite -[_`_i]mul1r scalerAl -tnth_nth.",
                        "VernacExtend",
                        "057edeb0967475c7ea5e8c98c449ddc5613eddc1"
                    ]
                },
                {
                    "command": [
                        "have F1x: x%:A \\in F1.",
                        "VernacExtend",
                        "406cde1174359c53bf162a2a18c4eede395555f9"
                    ]
                },
                {
                    "command": [
                        "by rewrite [F1]unlock mem_baseVspace (@memvZ F L) // mem1v.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "by congr (_ \\in M): (memvZ (Subvs F1x) (vbasis_mem (mem_tnth i _))).",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "module_baseAspace",
            "line_nb": 794,
            "steps": [
                {
                    "command": [
                        "rewrite -sup_field_module => /module_baseVspace[E defE0 memE0].",
                        "VernacExtend",
                        "3c42b53d0efc26db114b00541ac5e7fcb29e6aeb"
                    ]
                },
                {
                    "command": [
                        "suffices algE: is_aspace E by exists (ASpace algE); first apply: val_inj.",
                        "VernacExtend",
                        "290ed488b5562e885aa2cac56f3a69b4faa0eaa6"
                    ]
                },
                {
                    "command": [
                        "rewrite /is_aspace has_algid1 -?memE0 ?mem1v //.",
                        "VernacExtend",
                        "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
                    ]
                },
                {
                    "command": [
                        "by apply/prodvP=> u v; rewrite -!memE0; apply: memvM.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "base_vspaceOver",
            "line_nb": 804,
            "steps": [
                {
                    "command": [
                        "by move=> v; rewrite mem_baseVspace mem_vspaceOver.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "base_moduleOver",
            "line_nb": 807,
            "steps": [
                {
                    "command": [
                        "by move=> /field_module_eq defV v; rewrite base_vspaceOver defV.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "base_aspaceOver",
            "line_nb": 810,
            "steps": [
                {
                    "command": [
                        "by rewrite -sup_field_module; apply: base_moduleOver.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "p0_mon",
            "line_nb": 823,
            "steps": [
                {
                    "command": [
                        "rewrite /p0; case: ifP => [/andP[nz_p _] | _]; last exact: monicX.",
                        "VernacExtend",
                        "3763a4b8db689af316a7372b722bb29806ab4fb6"
                    ]
                },
                {
                    "command": [
                        "by rewrite monicE lead_coefZ mulVf ?lead_coef_eq0.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "nz_p0",
            "line_nb": 827,
            "steps": [
                {
                    "command": [
                        "by rewrite monic_neq0 // p0_mon.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "p0z0",
            "line_nb": 830,
            "steps": [
                {
                    "command": [
                        "rewrite /p0 /z0; case: ifP => [/andP[_ pz0]|]; last by rewrite map_polyX rootX.",
                        "VernacExtend",
                        "3763a4b8db689af316a7372b722bb29806ab4fb6"
                    ]
                },
                {
                    "command": [
                        "by rewrite map_polyZ rootE hornerZ (rootP pz0) mulr0.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "n_gt0",
            "line_nb": 834,
            "steps": [
                {
                    "command": [
                        "rewrite /n -subn1 subn_gt0 -(size_map_poly iota).",
                        "VernacExtend",
                        "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
                    ]
                },
                {
                    "command": [
                        "by rewrite (root_size_gt1 _ p0z0) ?map_poly_eq0.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "z0Ciota",
            "line_nb": 838,
            "steps": [
                {
                    "command": [
                        "by move=> x; apply: mulrC.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "equiv_subfext_is_equiv",
            "line_nb": 844,
            "steps": [
                {
                    "command": [
                        "by rewrite /equiv_subfext; split=> x // y w /eqP->.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "pi_subfx_inj",
            "line_nb": 855,
            "steps": [
                {
                    "command": [
                        "unlock subfx_inj => x; apply/eqP; rewrite -/(equiv_subfext _ x).",
                        "VernacExtend",
                        "01f04d3f5bba3b876eb4ec7b1c8f26d2e2cced77"
                    ]
                },
                {
                    "command": [
                        "by rewrite -eqmodE reprK.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "iotaPz_repr",
            "line_nb": 860,
            "steps": [
                {
                    "command": [
                        "by rewrite -/(iotaFz _) -!pi_subfx_inj reprK.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "addfxA",
            "line_nb": 877,
            "steps": [
                {
                    "command": [
                        "by move=> x y t; rewrite -[x]reprK -[y]reprK -[t]reprK !piE addrA.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "addfxC",
            "line_nb": 880,
            "steps": [
                {
                    "command": [
                        "by move=> x y; rewrite -[x]reprK -[y]reprK !piE addrC.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "add0fx",
            "line_nb": 883,
            "steps": [
                {
                    "command": [
                        "by move=> x; rewrite -[x]reprK !piE add0r.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "addfxN",
            "line_nb": 886,
            "steps": [
                {
                    "command": [
                        "by move=> x; rewrite -[x]reprK !piE addNr.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "poly_rV_modp_K",
            "line_nb": 891,
            "steps": [
                {
                    "command": [
                        "by apply: poly_rV_K; rewrite -ltnS -polySpred // ltn_modp.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "iotaPz_modp",
            "line_nb": 894,
            "steps": [
                {
                    "command": [
                        "rewrite {2}(divp_eq q p0) rmorphD rmorphM /=.",
                        "VernacExtend",
                        "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
                    ]
                },
                {
                    "command": [
                        "by rewrite [iotaPz p0](rootP p0z0) mulr0 add0r.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "mulfxA",
            "line_nb": 907,
            "steps": [
                {
                    "command": [
                        "elim/quotW=> x; elim/quotW=> y; elim/quotW=> w; rewrite !piE /subfx_mul_rep.",
                        "VernacExtend",
                        "9572fe72a2f3bd006515278f360e2480c39b52e9"
                    ]
                },
                {
                    "command": [
                        "by rewrite !poly_rV_modp_K [_ %% p0 * _]mulrC !modp_mul // mulrA mulrC.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "mulfxC",
            "line_nb": 911,
            "steps": [
                {
                    "command": [
                        "by elim/quotW=> x; elim/quotW=> y; rewrite !piE /subfx_mul_rep /= mulrC.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "mul1fx",
            "line_nb": 914,
            "steps": [
                {
                    "command": [
                        "elim/quotW=> x; rewrite !piE /subfx_mul_rep poly_rV_K ?size_poly1 // mul1r.",
                        "VernacExtend",
                        "de65c8193056a36f6dbb91fe21357bd770b140db"
                    ]
                },
                {
                    "command": [
                        "by rewrite modp_small ?rVpolyK // (polySpred nz_p0) ltnS size_poly.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "mulfx_addl",
            "line_nb": 918,
            "steps": [
                {
                    "command": [
                        "elim/quotW=> x; elim/quotW=> y; elim/quotW=> w; rewrite !piE /subfx_mul_rep.",
                        "VernacExtend",
                        "9572fe72a2f3bd006515278f360e2480c39b52e9"
                    ]
                },
                {
                    "command": [
                        "by rewrite linearD /= mulrDl modp_add linearD.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "nonzero1fx",
            "line_nb": 922,
            "steps": [
                {
                    "command": [
                        "rewrite !piE /equiv_subfext /iotaFz !linear0.",
                        "VernacExtend",
                        "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
                    ]
                },
                {
                    "command": [
                        "by rewrite poly_rV_K ?rmorph1 ?oner_eq0 // size_poly1.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "subfx_poly_invE",
            "line_nb": 930,
            "steps": [
                {
                    "command": [
                        "rewrite /subfx_poly_inv.",
                        "VernacExtend",
                        "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
                    ]
                },
                {
                    "command": [
                        "have [-> | nzq] := altP eqP; first by rewrite rmorph0 invr0.",
                        "VernacExtend",
                        "3763a4b8db689af316a7372b722bb29806ab4fb6"
                    ]
                },
                {
                    "command": [
                        "rewrite [nth]lock -[_^-1]mul1r; apply: canRL (mulfK nzq) _; rewrite -rmorphM /=.",
                        "VernacExtend",
                        "fe8f197e86415fc7f0a74eda9d312128b9473eda"
                    ]
                },
                {
                    "command": [
                        "have rz0: iotaPz (gdcop q p0) = 0.",
                        "VernacExtend",
                        "406cde1174359c53bf162a2a18c4eede395555f9"
                    ]
                },
                {
                    "command": [
                        "by apply/rootP; rewrite gdcop_map root_gdco ?map_poly_eq0 // p0z0 nzq.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "do [case: gdcopP => r _; rewrite (negPf nz_p0) orbF => co_r_q _] in rz0 *.",
                        "VernacExtend",
                        "2ed5ae5c7a1513e882f170a2462d7a7c3c1ca435"
                    ]
                },
                {
                    "command": [
                        "case: (egcdp q r) (egcdpE q r) => u v /=/eqp_size/esym/eqP.",
                        "VernacExtend",
                        "e00fff71ff314c991514fc71c41a3556702e444a"
                    ]
                },
                {
                    "command": [
                        "rewrite coprimep_size_gcd 1?coprimep_sym // => /size_poly1P[a nz_a Da].",
                        "VernacExtend",
                        "3c42b53d0efc26db114b00541ac5e7fcb29e6aeb"
                    ]
                },
                {
                    "command": [
                        "rewrite Da -scalerAl (canRL (addrK _) Da) -lock coefC linearZ linearB /=.",
                        "VernacExtend",
                        "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
                    ]
                },
                {
                    "command": [
                        "by rewrite rmorphM /= rz0 mulr0 subr0 horner_morphC -rmorphM mulVf ?rmorph1.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "pi_subfext_inv",
            "line_nb": 944,
            "steps": [
                {
                    "command": [
                        "unlock subfext_inv => x /=; apply/eqmodP/eqP; rewrite /iotaFz.",
                        "VernacExtend",
                        "01f04d3f5bba3b876eb4ec7b1c8f26d2e2cced77"
                    ]
                },
                {
                    "command": [
                        "by rewrite 2!{1}poly_rV_modp_K 2!{1}iotaPz_modp !subfx_poly_invE iotaPz_repr.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "subfx_fieldAxiom",
            "line_nb": 949,
            "steps": [
                {
                    "command": [
                        "elim/quotW=> x; apply: contraNeq; rewrite !piE /equiv_subfext /iotaFz !linear0.",
                        "VernacExtend",
                        "8c9e5024ec19e13281e0187dab3d65b93b116a6a"
                    ]
                },
                {
                    "command": [
                        "apply: contraR => nz_x; rewrite poly_rV_K ?size_poly1 // !poly_rV_modp_K.",
                        "VernacExtend",
                        "56c014161b39aecfb3c54301c2409dba4e8e1857"
                    ]
                },
                {
                    "command": [
                        "by rewrite iotaPz_modp rmorph1 rmorphM /= iotaPz_modp subfx_poly_invE mulVf.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "subfx_inv0",
            "line_nb": 954,
            "steps": [
                {
                    "command": [
                        "apply/eqP; rewrite !piE /equiv_subfext /iotaFz /subfx_inv_rep !linear0.",
                        "VernacExtend",
                        "56c014161b39aecfb3c54301c2409dba4e8e1857"
                    ]
                },
                {
                    "command": [
                        "by rewrite /subfx_poly_inv rmorph0 eqxx mod0p !linear0.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "subfx_inj_is_rmorphism",
            "line_nb": 965,
            "steps": [
                {
                    "command": [
                        "do 2?split; last by rewrite piE /iotaFz poly_rV_K ?rmorph1 ?size_poly1.",
                        "VernacExtend",
                        "3763a4b8db689af316a7372b722bb29806ab4fb6"
                    ]
                },
                {
                    "command": [
                        "by elim/quotW=> x; elim/quotW=> y; rewrite !piE /iotaFz linearB rmorphB.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "elim/quotW=> x; elim/quotW=> y; rewrite !piE /subfx_mul_rep /iotaFz.",
                        "VernacExtend",
                        "85063f5d306f5a99a8097b17f99eda3b8e50e4bd"
                    ]
                },
                {
                    "command": [
                        "by rewrite poly_rV_modp_K iotaPz_modp rmorphM.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "subfx_eval_is_rmorphism",
            "line_nb": 976,
            "steps": [
                {
                    "command": [
                        "do 2?split=> [x y|] /=; apply/eqP; rewrite piE.",
                        "VernacExtend",
                        "91390c987889ce5a6686f59ba64c8862af932f2e"
                    ]
                },
                {
                    "command": [
                        "-",
                        "VernacBullet",
                        "581cab4bf49fa4b495e569bbda96fc8d28fddcc0"
                    ]
                },
                {
                    "command": [
                        "by rewrite -linearB modp_add modNp.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "-",
                        "VernacBullet",
                        "581cab4bf49fa4b495e569bbda96fc8d28fddcc0"
                    ]
                },
                {
                    "command": [
                        "by rewrite /subfx_mul_rep !poly_rV_modp_K !(modp_mul, mulrC _ y).",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "by rewrite modp_small // size_poly1 -subn_gt0 subn1.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "subfxE",
            "line_nb": 989,
            "steps": [
                {
                    "command": [
                        "elim/quotW: x => x; exists (rVpoly x); apply/eqP; rewrite piE /equiv_subfext.",
                        "VernacExtend",
                        "3981a05576a1fd0a8bddffc853f0aba37aad52a5"
                    ]
                },
                {
                    "command": [
                        "by rewrite /iotaFz poly_rV_modp_K iotaPz_modp.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "subfx_scalerA",
            "line_nb": 994,
            "steps": [
                {
                    "command": [
                        "by rewrite /subfx_scale rmorphM mulrA.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "subfx_scaler1r",
            "line_nb": 997,
            "steps": [
                {
                    "command": [
                        "by move=> x; rewrite /subfx_scale rmorph1 mul1r.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "subfx_scalerDr",
            "line_nb": 1000,
            "steps": [
                {
                    "command": [
                        "by move=> a; apply: mulrDr.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "subfx_scalerDl",
            "line_nb": 1003,
            "steps": [
                {
                    "command": [
                        "by move=> a b; rewrite /subfx_scale rmorphD mulrDl.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "subfx_scaleAl",
            "line_nb": 1008,
            "steps": [
                {
                    "command": [
                        "by move=> a; apply: mulrA.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "subfx_scaleAr",
            "line_nb": 1012,
            "steps": [
                {
                    "command": [
                        "by move=> a; apply: mulrCA.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "subfx_evalZ",
            "line_nb": 1017,
            "steps": [
                {
                    "command": [
                        "by move=> a q; rewrite -mul_polyC rmorphM.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "subfx_inj_eval",
            "line_nb": 1025,
            "steps": [
                {
                    "command": [
                        "by rewrite piE /iotaFz poly_rV_modp_K iotaPz_modp /iotaPz /z0 /wf_p nz_p pz0.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "subfx_inj_root",
            "line_nb": 1028,
            "steps": [
                {
                    "command": [
                        "by rewrite subfx_inj_eval // map_polyX hornerX.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "subfx_injZ",
            "line_nb": 1031,
            "steps": [
                {
                    "command": [
                        "by rewrite rmorphM /= subfx_inj_eval // map_polyC hornerC.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "subfx_inj_base",
            "line_nb": 1034,
            "steps": [
                {
                    "command": [
                        "by rewrite subfx_injZ rmorph1 mulr1.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "subfx_irreducibleP",
            "line_nb": 1043,
            "steps": [
                {
                    "command": [
                        "split=> [min_p | irr_p q qz0 nz_q].",
                        "VernacExtend",
                        "3c42b53d0efc26db114b00541ac5e7fcb29e6aeb"
                    ]
                },
                {
                    "command": [
                        "split=> [|q nonC_q q_dv_p].",
                        "VernacExtend",
                        "3c42b53d0efc26db114b00541ac5e7fcb29e6aeb"
                    ]
                },
                {
                    "command": [
                        "by rewrite -(size_map_poly iota) (root_size_gt1 _ pz0) ?map_poly_eq0.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "have /dvdpP[r Dp] := q_dv_p; rewrite -dvdp_size_eqp // eqn_leq dvdp_leq //=.",
                        "VernacExtend",
                        "aa9d5fbc682ed874cd64b2543ca6c859b978e924"
                    ]
                },
                {
                    "command": [
                        "have [nz_r nz_q]: r != 0 /\\ q != 0 by apply/norP; rewrite -mulf_eq0 -Dp.",
                        "VernacExtend",
                        "406cde1174359c53bf162a2a18c4eede395555f9"
                    ]
                },
                {
                    "command": [
                        "have: root r^iota z || root q^iota z by rewrite -rootM -rmorphM -Dp.",
                        "VernacExtend",
                        "406cde1174359c53bf162a2a18c4eede395555f9"
                    ]
                },
                {
                    "command": [
                        "case/orP=> /min_p; [case/(_ _)/idPn=> // | exact].",
                        "VernacExtend",
                        "7fcbb7cf0ddcf6bdf8108aa399f7ce86bd308420"
                    ]
                },
                {
                    "command": [
                        "rewrite polySpred // -leqNgt Dp size_mul //= polySpred // -subn2 ltn_subRL.",
                        "VernacExtend",
                        "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
                    ]
                },
                {
                    "command": [
                        "by rewrite addSnnS addnC ltn_add2l ltn_neqAle eq_sym nonC_q size_poly_gt0.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "pose r := gcdp p q; have nz_r: r != 0 by rewrite gcdp_eq0 (negPf nz_p).",
                        "VernacExtend",
                        "c09d1274557abc8857ed64eb3450db2da906c185"
                    ]
                },
                {
                    "command": [
                        "suffices /eqp_size <-: r %= p by rewrite dvdp_leq ?dvdp_gcdr.",
                        "VernacExtend",
                        "290ed488b5562e885aa2cac56f3a69b4faa0eaa6"
                    ]
                },
                {
                    "command": [
                        "rewrite (irr_p _) ?dvdp_gcdl // -(size_map_poly iota) gtn_eqF //.",
                        "VernacExtend",
                        "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
                    ]
                },
                {
                    "command": [
                        "by rewrite (@root_size_gt1 _ z) ?map_poly_eq0 // gcdp_map root_gcd pz0.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "min_subfx_vectAxiom",
            "line_nb": 1064,
            "steps": [
                {
                    "command": [
                        "move/subfx_irreducibleP: irr_p => /=/(_ nz_p) min_p; set d := (size p).-1.",
                        "VernacExtend",
                        "fd0300d8899563f42d81dc09cab8269e61be7289"
                    ]
                },
                {
                    "command": [
                        "have Dd: d.+1 = size p by rewrite polySpred.",
                        "VernacExtend",
                        "406cde1174359c53bf162a2a18c4eede395555f9"
                    ]
                },
                {
                    "command": [
                        "pose Fz2v x : 'rV_d := poly_rV (sval (sig_eqW (subfxE x)) %% p).",
                        "VernacExtend",
                        "3c5f04de94609049d978298aa02ff35fb35ea7c7"
                    ]
                },
                {
                    "command": [
                        "pose vFz : 'rV_d -> subFExtend := subfx_eval \\o rVpoly.",
                        "VernacExtend",
                        "3c5f04de94609049d978298aa02ff35fb35ea7c7"
                    ]
                },
                {
                    "command": [
                        "have FLinj: injective subfx_inj by apply: fmorph_inj.",
                        "VernacExtend",
                        "406cde1174359c53bf162a2a18c4eede395555f9"
                    ]
                },
                {
                    "command": [
                        "have Fz2vK: cancel Fz2v vFz.",
                        "VernacExtend",
                        "406cde1174359c53bf162a2a18c4eede395555f9"
                    ]
                },
                {
                    "command": [
                        "move=> x; rewrite /vFz /Fz2v; case: (sig_eqW _) => /= q ->.",
                        "VernacExtend",
                        "d7214ac8fd48f4d1cd143edd9d16f6d28386a302"
                    ]
                },
                {
                    "command": [
                        "apply: FLinj; rewrite !subfx_inj_eval // {2}(divp_eq q p) rmorphD rmorphM /=.",
                        "VernacExtend",
                        "56c014161b39aecfb3c54301c2409dba4e8e1857"
                    ]
                },
                {
                    "command": [
                        "by rewrite !hornerE (eqP pz0) mulr0 add0r poly_rV_K // -ltnS Dd ltn_modpN0.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "suffices vFzK: cancel vFz Fz2v.",
                        "VernacExtend",
                        "290ed488b5562e885aa2cac56f3a69b4faa0eaa6"
                    ]
                },
                {
                    "command": [
                        "by exists Fz2v; [apply: can2_linear Fz2vK | exists vFz].",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "apply: inj_can_sym Fz2vK _ => v1 v2 /(congr1 subfx_inj)/eqP.",
                        "VernacExtend",
                        "4bd6fa79b17bcd2bfb7af091fb325367a20385d6"
                    ]
                },
                {
                    "command": [
                        "rewrite -subr_eq0 -!raddfB /= subfx_inj_eval // => /min_p/implyP.",
                        "VernacExtend",
                        "3c42b53d0efc26db114b00541ac5e7fcb29e6aeb"
                    ]
                },
                {
                    "command": [
                        "rewrite leqNgt implybNN -Dd ltnS size_poly linearB subr_eq0 /=.",
                        "VernacExtend",
                        "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
                    ]
                },
                {
                    "command": [
                        "by move/eqP/(can_inj rVpolyK).",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        }
    ]
}