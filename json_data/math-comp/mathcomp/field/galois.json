{
    "filename": "mathcomp/field/galois.v",
    "coq_project": "math-comp",
    "vernac_cmds": [
        [
            "Require Import mathcomp.ssreflect.ssreflect.",
            "VernacRequire",
            "85e251063dc2b5a9653f7bb76dcd176ed36b42a9"
        ],
        [
            "From mathcomp Require Import ssrbool ssrfun eqtype ssrnat seq div choice fintype.",
            "VernacRequire",
            "e665c6902e70ac801e5b749428ba09cedb8a2b75"
        ],
        [
            "From mathcomp Require Import tuple finfun bigop ssralg poly polydiv.",
            "VernacRequire",
            "cc8d2e7e26749e1763d6d1035a319dc27f2cdb53"
        ],
        [
            "From mathcomp Require Import finset fingroup morphism quotient perm action zmodp cyclic.",
            "VernacRequire",
            "221a1e1b1ade2aef5a5def97fa6435401e1a25d7"
        ],
        [
            "From mathcomp Require Import matrix mxalgebra vector falgebra fieldext separable.",
            "VernacRequire",
            "fa51c07166a23db3888da87c93a501b76f7f0a04"
        ],
        [
            "Set Implicit Arguments.",
            "VernacSetOption",
            "9e84ff8896f028601d8aded48c1d4aebe60aa584"
        ],
        [
            "Unset Strict Implicit.",
            "VernacUnsetOption",
            "2842adaf6959318f2042805935c46f513bdc0348"
        ],
        [
            "Unset Printing Implicit Defensive.",
            "VernacUnsetOption",
            "444e5f0be4b25d9b1fd556943a447ec10046d151"
        ],
        [
            "Reserved Notation \"''Gal' ( A / B )\" (at level 8, A at level 35, format \"''Gal' ( A / B )\").",
            "VernacSyntaxExtension",
            "281e212ddb8226dd1237e1c18bf6d69255d8a18f"
        ],
        [
            "Import GroupScope GRing.Theory.",
            "VernacImport",
            "e9e593badced32f8de606b9f182143860064d3fd"
        ],
        [
            "Local Open Scope ring_scope.",
            "VernacOpenCloseScope",
            "fb9da4a291533574d328be8c8a69d90a14641928"
        ],
        [
            "Section SplittingFieldFor.",
            "VernacBeginSection",
            "2781a4f0973b68dad97efef6e2e500e88f6d75d1"
        ],
        [
            "Variables (F : fieldType) (L : fieldExtType F).",
            "VernacAssumption",
            "504d7156a02d96d143a7859acc875b5c958332f1"
        ],
        [
            "Definition splittingFieldFor (U : {vspace L}) (p : {poly L}) (V : {vspace L}) := exists2 rs, p %= \\prod_(z <- rs) ('X - z%:P) & <<U & rs>>%VS = V.",
            "VernacDefinition",
            "0d10a4fec6e4168cea6bd77201c3582b2d85ecab"
        ],
        [
            "Lemma splittingFieldForS (K M E : {subfield L}) p : (K <= M)%VS -> (M <= E)%VS -> splittingFieldFor K p E -> splittingFieldFor M p E.",
            "VernacStartTheoremProof",
            "852de3408fc9d3938e39130f7d1c09430a97caeb"
        ],
        [
            "move=> sKM sKE [rs Dp genL]; exists rs => //; apply/eqP.",
            "VernacExtend",
            "1947c7e9e09bd3bd1687e7b79563947160de37d3"
        ],
        [
            "rewrite eqEsubv -[in X in _ && (X <= _)%VS]genL adjoin_seqSl // andbT.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "by apply/Fadjoin_seqP; split; rewrite // -genL; apply: seqv_sub_adjoin.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "End SplittingFieldFor.",
            "VernacEndSegment",
            "706e3c803025284c70fa3652ad43efdfa2bbadee"
        ],
        [
            "Section kHom.",
            "VernacBeginSection",
            "e81aa542026e65250b8b080d6c755d0920544c15"
        ],
        [
            "Variables (F : fieldType) (L : fieldExtType F).",
            "VernacAssumption",
            "504d7156a02d96d143a7859acc875b5c958332f1"
        ],
        [
            "Implicit Types (U V : {vspace L}) (K E : {subfield L}) (f g : 'End(L)).",
            "VernacReserve",
            "631935b8e5a1bc8a9b922f5b569a22481a7f140d"
        ],
        [
            "Definition kHom U V f := ahom_in V f && (U <= fixedSpace f)%VS.",
            "VernacDefinition",
            "e10a611f635d8745402f7cd147337900202b0b40"
        ],
        [
            "Lemma kHomP {K V f} : reflect [/\\ {in V &, forall x y, f (x * y) = f x * f y} & {in K, forall x, f x = x}] (kHom K V f).",
            "VernacStartTheoremProof",
            "5e2aaf8a9e15354d5fc33ec3996808a67b0f7603"
        ],
        [
            "apply: (iffP andP) => [[/ahom_inP[fM _] /subvP idKf] | [fM idKf]].",
            "VernacExtend",
            "4bd6fa79b17bcd2bfb7af091fb325367a20385d6"
        ],
        [
            "by split=> // x /idKf/fixedSpaceP.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "split; last by apply/subvP=> x /idKf/fixedSpaceP.",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "by apply/ahom_inP; split=> //; rewrite idKf ?mem1v.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma kAHomP {U V} {f : 'AEnd(L)} : reflect {in U, forall x, f x = x} (kHom U V f).",
            "VernacStartTheoremProof",
            "3a053c21e845394c10f5b951865f5ee451c98c17"
        ],
        [
            "by rewrite /kHom ahomWin; apply: fixedSpacesP.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma kHom1 U V : kHom U V \\1.",
            "VernacStartTheoremProof",
            "88349ad9add2c0b7cf0d04663c7b1d339d7b1079"
        ],
        [
            "by apply/kAHomP => u _; rewrite lfunE.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma k1HomE V f : kHom 1 V f = ahom_in V f.",
            "VernacStartTheoremProof",
            "23f3941957afbce4f96eff7612662121cdfaadb7"
        ],
        [
            "by apply: andb_idr => /ahom_inP[_ f1]; apply/fixedSpaceP.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma kHom_lrmorphism (f : 'End(L)) : reflect (lrmorphism f) (kHom 1 {:L} f).",
            "VernacStartTheoremProof",
            "d81d15ae25ce0880ae2d2a8a69c2e28290b0dcec"
        ],
        [
            "by rewrite k1HomE; apply: ahomP.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma k1AHom V (f : 'AEnd(L)) : kHom 1 V f.",
            "VernacStartTheoremProof",
            "274fba3809711826c6594ab440ec444d7f5b8abe"
        ],
        [
            "by rewrite k1HomE ahomWin.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma kHom_poly_id K E f p : kHom K E f -> p \\is a polyOver K -> map_poly f p = p.",
            "VernacStartTheoremProof",
            "c1f5b790f40abb28f77055ce2f24eaa929c3520b"
        ],
        [
            "by case/kHomP=> _ idKf /polyOverP Kp; apply/polyP=> i; rewrite coef_map /= idKf.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma kHomSl U1 U2 V f : (U1 <= U2)%VS -> kHom U2 V f -> kHom U1 V f.",
            "VernacStartTheoremProof",
            "f1a666e961ea368cf863c56288dbb5564ce7c4f1"
        ],
        [
            "by rewrite /kHom => sU12 /andP[-> /(subv_trans sU12)].",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma kHomSr K V1 V2 f : (V1 <= V2)%VS -> kHom K V2 f -> kHom K V1 f.",
            "VernacStartTheoremProof",
            "a1807304be084fe32ddb3de322053bb90b9f832f"
        ],
        [
            "by move/subvP=> sV12 /kHomP[/(sub_in2 sV12)fM idKf]; apply/kHomP.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma kHomS K1 K2 V1 V2 f : (K1 <= K2)%VS -> (V1 <= V2)%VS -> kHom K2 V2 f -> kHom K1 V1 f.",
            "VernacStartTheoremProof",
            "5f7ffb9888ada62b8a77a37ece4e612e6747ed82"
        ],
        [
            "by move=> sK12 sV12 /(kHomSl sK12)/(kHomSr sV12).",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma kHom_eq K E f g : (K <= E)%VS -> {in E, f =1 g} -> kHom K E f = kHom K E g.",
            "VernacStartTheoremProof",
            "c446cef31ffbcc87dea3221cc5c4050d4aaeb0c6"
        ],
        [
            "move/subvP=> sKE eq_fg; wlog suffices: f g eq_fg / kHom K E f -> kHom K E g.",
            "VernacExtend",
            "33541f5bcc357bbc2a07c2295895b9f3385c3b61"
        ],
        [
            "by move=> IH; apply/idP/idP; apply: IH => x /eq_fg.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "case/kHomP=> fM idKf; apply/kHomP.",
            "VernacExtend",
            "d62e4c271de3f2a9ff5062b8b89d3c57d965c518"
        ],
        [
            "by split=> [x y Ex Ey | x Kx]; rewrite -!eq_fg ?fM ?rpredM // ?idKf ?sKE.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma kHom_inv K E f : kHom K E f -> {in E, {morph f : x / x^-1}}.",
            "VernacStartTheoremProof",
            "7a9194efb371a4f8d32290dffd84793d8badcab3"
        ],
        [
            "case/kHomP=> fM idKf x Ex.",
            "VernacExtend",
            "e00fff71ff314c991514fc71c41a3556702e444a"
        ],
        [
            "case (eqVneq x 0) => [-> | nz_x]; first by rewrite linear0 invr0 linear0.",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "have fxV: f x * f x^-1 = 1 by rewrite -fM ?rpredV ?divff // idKf ?mem1v.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "have Ufx: f x \\is a GRing.unit by apply/unitrPr; exists (f x^-1).",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "by apply: (mulrI Ufx); rewrite divrr.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma kHom_dim K E f : kHom K E f -> \\dim (f @: E) = \\dim E.",
            "VernacStartTheoremProof",
            "cac5cc2a0b03821f38498fdc174a316cc6ad2ca8"
        ],
        [
            "move=> homKf; have [fM idKf] := kHomP homKf.",
            "VernacExtend",
            "ccd83c252dcbae3d56f3d057fcb8217878b51901"
        ],
        [
            "apply/limg_dim_eq/eqP; rewrite -subv0; apply/subvP=> v.",
            "VernacExtend",
            "da24caf87c1bbbad0538b8be68905ec456c78aa7"
        ],
        [
            "rewrite memv_cap memv0 memv_ker => /andP[Ev]; apply: contraLR => nz_v.",
            "VernacExtend",
            "2855640502da0a3b2cfdfcd02ea9662c049d9a24"
        ],
        [
            "by rewrite -unitfE unitrE -(kHom_inv homKf) // -fM ?rpredV ?divff ?idKf ?mem1v.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma kHom_is_rmorphism K E f : kHom K E f -> rmorphism (f \\o vsval : subvs_of E -> L).",
            "VernacStartTheoremProof",
            "e348e3bc44159d8c181bd807c3c06882ab65f48f"
        ],
        [
            "case/kHomP=> fM idKf; split=> [a b|]; first exact: raddfB.",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "by split=> [a b|] /=; [rewrite /= fM ?subvsP | rewrite algid1 idKf // mem1v].",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Definition kHom_rmorphism K E f homKEf := RMorphism (@kHom_is_rmorphism K E f homKEf).",
            "VernacDefinition",
            "864b8f615b507f62b3af76b760c61184453e3067"
        ],
        [
            "Lemma kHom_horner K E f p x : kHom K E f -> p \\is a polyOver E -> x \\in E -> f p.[x] = (map_poly f p).[f x].",
            "VernacStartTheoremProof",
            "1ed0d7bbb1b5b8ea85fbf41cec6f84bdeca7346a"
        ],
        [
            "move=> homKf /polyOver_subvs[{p}p -> Ex]; pose fRM := kHom_rmorphism homKf.",
            "VernacExtend",
            "fef3c4a8f7fcf70b0824f3cce5fb58f2e0ef07fd"
        ],
        [
            "by rewrite (horner_map _ _ (Subvs Ex)) -[f _](horner_map fRM) map_poly_comp.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma kHom_root K E f p x : kHom K E f -> p \\is a polyOver E -> x \\in E -> root p x -> root (map_poly f p) (f x).",
            "VernacStartTheoremProof",
            "6cf09c486a8463dbbac3565c793fad05663f8db4"
        ],
        [
            "by move/kHom_horner=> homKf Ep Ex /rootP px0; rewrite /root -homKf ?px0 ?raddf0.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma kHom_root_id K E f p x : (K <= E)%VS -> kHom K E f -> p \\is a polyOver K -> x \\in E -> root p x -> root p (f x).",
            "VernacStartTheoremProof",
            "413e1130a5b2586de9d37dd557b27fc7dd7f752e"
        ],
        [
            "move=> sKE homKf Kp Ex /(kHom_root homKf (polyOverSv sKE Kp) Ex).",
            "VernacExtend",
            "b1b2cb7a3a617cba67460b4eca1f04de3c1cc716"
        ],
        [
            "by rewrite (kHom_poly_id homKf).",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Section kHomExtend.",
            "VernacBeginSection",
            "4391b5a42df4812479424292f8e86c4966687af8"
        ],
        [
            "Variables (K E : {subfield L}) (f : 'End(L)) (x y : L).",
            "VernacAssumption",
            "ccd3794763fb174cc1bbfe4ea73544f5a4841038"
        ],
        [
            "Fact kHomExtend_subproof : linear (fun z => (map_poly f (Fadjoin_poly E x z)).[y]).",
            "VernacStartTheoremProof",
            "16b484d703210717dc7f71a48f98b07f7ce5db91"
        ],
        [
            "move=> k a b; rewrite linearP /= raddfD hornerE; congr (_ + _).",
            "VernacExtend",
            "485e46f06ecb626ff6a640f6969694ae3ffba974"
        ],
        [
            "rewrite -[rhs in _ = rhs]mulr_algl -hornerZ /=; congr _.[_].",
            "VernacExtend",
            "a0279e71fd23ac6bde2b8b4402981a70ea719044"
        ],
        [
            "by apply/polyP => i; rewrite !(coefZ, coef_map) /= !mulr_algl linearZ.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Definition kHomExtend := linfun (Linear kHomExtend_subproof).",
            "VernacDefinition",
            "4ba5fd5098534f4bf6b94cfda12b0f141d52d36c"
        ],
        [
            "Lemma kHomExtendE z : kHomExtend z = (map_poly f (Fadjoin_poly E x z)).[y].",
            "VernacStartTheoremProof",
            "6f1d6cb408d59e1db7f5db14a20699a3267390e2"
        ],
        [
            "by rewrite lfunE.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Hypotheses (sKE : (K <= E)%VS) (homKf : kHom K E f).",
            "VernacAssumption",
            "b0ac28b1c553aeec5d8cc2dfc24e1dd74f561940"
        ],
        [
            "Local Notation Px := (minPoly E x).",
            "VernacSyntacticDefinition",
            "081db3749c47d546ba151903893b2e5b28a598be"
        ],
        [
            "Hypothesis fPx_y_0 : root (map_poly f Px) y.",
            "VernacAssumption",
            "da602add920c84e29164c3bb8d3d072691b6c95d"
        ],
        [
            "Lemma kHomExtend_id z : z \\in E -> kHomExtend z = f z.",
            "VernacStartTheoremProof",
            "bc1dc991782aeef546130b1f3ed40bf94bc594c7"
        ],
        [
            "by move=> Ez; rewrite kHomExtendE Fadjoin_polyC ?map_polyC ?hornerC.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma kHomExtend_val : kHomExtend x = y.",
            "VernacStartTheoremProof",
            "531370440f96445a587a7060ea96580acf3966a5"
        ],
        [
            "have fX: map_poly f 'X = 'X by rewrite (kHom_poly_id homKf) ?polyOverX.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "have [Ex | E'x] := boolP (x \\in E); last first.",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "by rewrite kHomExtendE Fadjoin_polyX // fX hornerX.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "have:= fPx_y_0; rewrite (minPoly_XsubC Ex) raddfB /= map_polyC fX root_XsubC /=.",
            "VernacExtend",
            "aa9d5fbc682ed874cd64b2543ca6c859b978e924"
        ],
        [
            "by rewrite (kHomExtend_id Ex) => /eqP->.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma kHomExtend_poly p : p \\in polyOver E -> kHomExtend p.[x] = (map_poly f p).[y].",
            "VernacStartTheoremProof",
            "b93a16a95b7dcfaead7b42d33e0396fe030021d8"
        ],
        [
            "move=> Ep; rewrite kHomExtendE (Fadjoin_poly_mod x) //.",
            "VernacExtend",
            "057edeb0967475c7ea5e8c98c449ddc5613eddc1"
        ],
        [
            "rewrite (divp_eq (map_poly f p) (map_poly f Px)).",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "rewrite !hornerE (rootP fPx_y_0) mulr0 add0r.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "have [p1 ->] := polyOver_subvs Ep.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "have [Px1 ->] := polyOver_subvs (minPolyOver E x).",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "by rewrite -map_modp -!map_poly_comp (map_modp (kHom_rmorphism homKf)).",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma kHomExtendP : kHom K <<E; x>> kHomExtend.",
            "VernacStartTheoremProof",
            "e954ca63b9a924c13f5fd1d0fe399def89291f5f"
        ],
        [
            "have [fM idKf] := kHomP homKf.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "apply/kHomP; split=> [|z Kz]; last by rewrite kHomExtend_id ?(subvP sKE) ?idKf.",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "move=> _ _ /Fadjoin_polyP[p Ep ->] /Fadjoin_polyP[q Eq ->].",
            "VernacExtend",
            "b1b2cb7a3a617cba67460b4eca1f04de3c1cc716"
        ],
        [
            "rewrite -hornerM !kHomExtend_poly ?rpredM // -hornerM; congr _.[_].",
            "VernacExtend",
            "a0279e71fd23ac6bde2b8b4402981a70ea719044"
        ],
        [
            "apply/polyP=> i; rewrite coef_map !coefM /= linear_sum /=.",
            "VernacExtend",
            "56c014161b39aecfb3c54301c2409dba4e8e1857"
        ],
        [
            "by apply: eq_bigr => j _; rewrite !coef_map /= fM ?(polyOverP _).",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "End kHomExtend.",
            "VernacEndSegment",
            "5bffe9cfcb61a896c10d45ef866da81b16aab32b"
        ],
        [
            "Definition kAut U V f := kHom U V f && (f @: V == V)%VS.",
            "VernacDefinition",
            "17b11aec81ab55840d1528d09bed49b392a75f1c"
        ],
        [
            "Lemma kAutE K E f : kAut K E f = kHom K E f && (f @: E <= E)%VS.",
            "VernacStartTheoremProof",
            "e8d2a2f37655971e8375b59027184a3bc0acd837"
        ],
        [
            "apply/andP/andP=> [[-> /eqP->] // | [homKf EfE]].",
            "VernacExtend",
            "4bd6fa79b17bcd2bfb7af091fb325367a20385d6"
        ],
        [
            "by rewrite eqEdim EfE /= (kHom_dim homKf).",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma kAutS U1 U2 V f : (U1 <= U2)%VS -> kAut U2 V f -> kAut U1 V f.",
            "VernacStartTheoremProof",
            "9821fdf6c48ef1efcd3bca0c671efee2b5da12f1"
        ],
        [
            "by move=> sU12 /andP[/(kHomSl sU12)homU1f EfE]; apply/andP.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma kHom_kAut_sub K E f : kAut K E f -> kHom K E f.",
            "VernacStartTheoremProof",
            "c2d473b85c3fd21b8add277c5ed8a0376dd9b60f"
        ],
        [
            "by case/andP.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma kAut_eq K E (f g : 'End(L)) : (K <= E)%VS -> {in E, f =1 g} -> kAut K E f = kAut K E g.",
            "VernacStartTheoremProof",
            "351b03207ab502615504abb5dfb8d3df9cad6155"
        ],
        [
            "by move=> sKE eq_fg; rewrite !kAutE (kHom_eq sKE eq_fg) (eq_in_limg eq_fg).",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma kAutfE K f : kAut K {:L} f = kHom K {:L} f.",
            "VernacStartTheoremProof",
            "a46b4a558068afae7d86f0d0fc587331d8157c41"
        ],
        [
            "by rewrite kAutE subvf andbT.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma kAut1E E (f : 'AEnd(L)) : kAut 1 E f = (f @: E <= E)%VS.",
            "VernacStartTheoremProof",
            "8fc6400f91f0c99d0f62faa1c77459d454ff0c49"
        ],
        [
            "by rewrite kAutE k1AHom.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma kAutf_lker0 K f : kHom K {:L} f -> lker f == 0%VS.",
            "VernacStartTheoremProof",
            "052ab4658bfce92984cde78d268910e4ffe54266"
        ],
        [
            "move/(kHomSl (sub1v _))/kHom_lrmorphism=> fM.",
            "VernacExtend",
            "b1b2cb7a3a617cba67460b4eca1f04de3c1cc716"
        ],
        [
            "by apply/lker0P; apply: (fmorph_inj (RMorphism fM)).",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma inv_kHomf K f : kHom K {:L} f -> kHom K {:L} f^-1.",
            "VernacStartTheoremProof",
            "557f1a0a880aca69dab8aa581d32173e94e2886a"
        ],
        [
            "move=> homKf; have [[fM idKf] kerf0] := (kHomP homKf, kAutf_lker0 homKf).",
            "VernacExtend",
            "ccd83c252dcbae3d56f3d057fcb8217878b51901"
        ],
        [
            "have f1K: cancel f^-1%VF f by apply: lker0_lfunVK.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "apply/kHomP; split=> [x y _ _ | x Kx]; apply: (lker0P kerf0).",
            "VernacExtend",
            "09ff90107c05f6bf4f743acb58a064bacfe65029"
        ],
        [
            "by rewrite fM ?memvf ?{1}f1K.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "by rewrite f1K idKf.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma inv_is_ahom (f : 'AEnd(L)) : ahom_in {:L} f^-1.",
            "VernacStartTheoremProof",
            "00053f6e3a0ae5ec1d313e73bd78cdfab288e756"
        ],
        [
            "have /ahomP/kHom_lrmorphism hom1f := valP f.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "exact/ahomP/kHom_lrmorphism/inv_kHomf.",
            "VernacExtend",
            "ce637ff86bafca5d8359473e8c02af644dcbdc43"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Canonical inv_ahom (f : 'AEnd(L)) : 'AEnd(L) := AHom (inv_is_ahom f).",
            "VernacDefinition",
            "62ac0dfab8fd7fa687974c98f7b6e7561a01caea"
        ],
        [
            "Notation \"f ^-1\" := (inv_ahom f) : lrfun_scope.",
            "VernacNotation",
            "453b0c4d7aed2389852bc4f0feb0b3f1494c2cba"
        ],
        [
            "Lemma comp_kHom_img K E f g : kHom K (g @: E) f -> kHom K E g -> kHom K E (f \\o g).",
            "VernacStartTheoremProof",
            "bf6adf73c6be226c89e888da164a36d1386f79fe"
        ],
        [
            "move=> /kHomP[fM idKf] /kHomP[gM idKg]; apply/kHomP; split=> [x y Ex Ey | x Kx].",
            "VernacExtend",
            "b7d55d5cc9e609b184db748f6780e12224901e48"
        ],
        [
            "by rewrite !lfunE /= gM // fM ?memv_img.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "by rewrite lfunE /= idKg ?idKf.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma comp_kHom K E f g : kHom K {:L} f -> kHom K E g -> kHom K E (f \\o g).",
            "VernacStartTheoremProof",
            "31852a135faecd80d4c9457745029b4ed0a2ebcf"
        ],
        [
            "by move/(kHomSr (subvf (g @: E))); apply: comp_kHom_img.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma kHom_extends K E f p U : (K <= E)%VS -> kHom K E f -> p \\is a polyOver K -> splittingFieldFor E p U -> {g | kHom K U g & {in E, f =1 g}}.",
            "VernacStartTheoremProof",
            "613ed46751e7c99da078400bb577a5511a166676"
        ],
        [
            "move=> sKE homEf Kp /sig2_eqW[rs Dp <-{U}].",
            "VernacExtend",
            "b1b2cb7a3a617cba67460b4eca1f04de3c1cc716"
        ],
        [
            "set r := rs; have rs_r: all (mem rs) r by apply/allP.",
            "VernacExtend",
            "5a669f4ad2118b005921530a069ac8f03fd7f32b"
        ],
        [
            "elim: r rs_r => [_|z r IHr /=/andP[rs_z rs_r]] /= in E f sKE homEf *.",
            "VernacExtend",
            "e686a1895f1799b840b76242f931100819a9ad6c"
        ],
        [
            "by exists f; rewrite ?Fadjoin_nil.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "set Ez := <<E; z>>%AS; pose fpEz := map_poly f (minPoly E z).",
            "VernacExtend",
            "dda58a04ca4da9adf6d016079f462c4d6ff69ca8"
        ],
        [
            "suffices{IHr} /sigW[y fpEz_y]: exists y, root fpEz y.",
            "VernacExtend",
            "290ed488b5562e885aa2cac56f3a69b4faa0eaa6"
        ],
        [
            "have homEz_fz: kHom K Ez (kHomExtend E f z y) by apply: kHomExtendP.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "have sKEz: (K <= Ez)%VS := subv_trans sKE (subv_adjoin E z).",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "have [g homGg Dg] := IHr rs_r _ _ sKEz homEz_fz.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "exists g => [|x Ex]; first by rewrite adjoin_cons.",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "by rewrite -Dg ?subvP_adjoin // kHomExtend_id.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "have [m DfpEz]: {m | fpEz %= \\prod_(w <- mask m rs) ('X - w%:P)}.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "apply: dvdp_prod_XsubC; rewrite -(eqp_dvdr _ Dp) -(kHom_poly_id homEf Kp).",
            "VernacExtend",
            "56c014161b39aecfb3c54301c2409dba4e8e1857"
        ],
        [
            "have /polyOver_subvs[q Dq] := polyOverSv sKE Kp.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "have /polyOver_subvs[qz Dqz] := minPolyOver E z.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "rewrite /fpEz Dq Dqz -2?{1}map_poly_comp (dvdp_map (kHom_rmorphism homEf)).",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "rewrite -(dvdp_map [rmorphism of @vsval _ _ E]) -Dqz -Dq.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "by rewrite minPoly_dvdp ?(polyOverSv sKE) // (eqp_root Dp) root_prod_XsubC.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "exists (mask m rs)`_0; rewrite (eqp_root DfpEz) root_prod_XsubC mem_nth //.",
            "VernacExtend",
            "38eb58158e32708cbf22d4f7f6ebbf6b471cd348"
        ],
        [
            "rewrite -ltnS -(size_prod_XsubC _ id) -(eqp_size DfpEz).",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "rewrite size_poly_eq -?lead_coefE ?size_minPoly // (monicP (monic_minPoly E z)).",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "by have [_ idKf] := kHomP homEf; rewrite idKf ?mem1v ?oner_eq0.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "End kHom.",
            "VernacEndSegment",
            "6a462c5880c8526ecca6a268a902cfb5e3e5e77b"
        ],
        [
            "Notation \"f ^-1\" := (inv_ahom f) : lrfun_scope.",
            "VernacNotation",
            "453b0c4d7aed2389852bc4f0feb0b3f1494c2cba"
        ],
        [
            "Arguments kHomP {F L K V f}.",
            "VernacArguments",
            "c78663f2ab309d728aee89b7d3700e3361da2436"
        ],
        [
            "Arguments kAHomP {F L U V f}.",
            "VernacArguments",
            "55d328e622cca1a76a2259ab1d6dca9ae7c9c2c9"
        ],
        [
            "Arguments kHom_lrmorphism {F L f}.",
            "VernacArguments",
            "e71be4a6a5dce84c637ffc3d4cfec2f41da7a552"
        ],
        [
            "Module SplittingField.",
            "VernacDefineModule",
            "7b997e065232bca8a262530487cfc9a2a18cb0c2"
        ],
        [
            "Import GRing.",
            "VernacImport",
            "bc56e56cee30c43a7c0faff74a6b6361f835ebb3"
        ],
        [
            "Section ClassDef.",
            "VernacBeginSection",
            "a5b792261e6c496f5a1a8d0f7da8c96156ca2fed"
        ],
        [
            "Variable F : fieldType.",
            "VernacAssumption",
            "dfbeb3104cff90ac5c843c17124389867a4c6a4a"
        ],
        [
            "Definition axiom (L : fieldExtType F) := exists2 p : {poly L}, p \\is a polyOver 1%VS & splittingFieldFor 1 p {:L}.",
            "VernacDefinition",
            "69979ba01e096da2abdda3b580776ba7b4f56532"
        ],
        [
            "Record class_of (L : Type) : Type := Class {base : FieldExt.class_of F L; _ : axiom (FieldExt.Pack _ base)}.",
            "VernacInductive",
            "312c436e12bee9478dcd4433c2c8a02b10d86018"
        ],
        [
            "Local Coercion base : class_of >-> FieldExt.class_of.",
            "VernacCoercion",
            "180e46c34d58d57963aec83e0bb12c31d1d0fdb2"
        ],
        [
            "Structure type (phF : phant F) := Pack {sort; _ : class_of sort}.",
            "VernacInductive",
            "4338ef9a86568b79790fdec2806f44b608df19b3"
        ],
        [
            "Local Coercion sort : type >-> Sortclass.",
            "VernacCoercion",
            "e4478cd37693106f84ed020bd073c4970dc87530"
        ],
        [
            "Variable (phF : phant F) (T : Type) (cT : type phF).",
            "VernacAssumption",
            "2f623d7d7ee06a2c7da056dd28caf49f1cc54faa"
        ],
        [
            "Definition class := let: Pack _ c as cT' := cT return class_of cT' in c.",
            "VernacDefinition",
            "0e4a80652d474f8010316ff26a5322b5207d82a3"
        ],
        [
            "Let xT := let: Pack T _ := cT in T.",
            "VernacDefinition",
            "0a87c77e3a5ac8febf0910b95d7b998b7cb9cf6d"
        ],
        [
            "Notation xclass := (class : class_of xT).",
            "VernacSyntacticDefinition",
            "e136614fedd7b331a23b54adad5b0bce11895ed4"
        ],
        [
            "Definition clone c of phant_id class c := @Pack phF T c.",
            "VernacDefinition",
            "7883310cf06bd095f500e8971d58f9bc418849e0"
        ],
        [
            "Definition pack b0 (ax0 : axiom (@FieldExt.Pack F (Phant F) T b0)) := fun bT b & phant_id (@FieldExt.class F phF bT) b => fun ax & phant_id ax0 ax => Pack (Phant F) (@Class T b ax).",
            "VernacDefinition",
            "97a3cf117e020537c5b15cd45472e663ac99c219"
        ],
        [
            "Definition eqType := @Equality.Pack cT xclass.",
            "VernacDefinition",
            "6139f412b89e62ff13c9c707c885de4b39151e9d"
        ],
        [
            "Definition choiceType := @Choice.Pack cT xclass.",
            "VernacDefinition",
            "f62d3090382a5ea70b978e0633e0376c4558db55"
        ],
        [
            "Definition zmodType := @Zmodule.Pack cT xclass.",
            "VernacDefinition",
            "d292a93c19cc9e36e99db073c0c14c27655bcd85"
        ],
        [
            "Definition ringType := @Ring.Pack cT xclass.",
            "VernacDefinition",
            "8a9134d1dac21560b6c04dc7467c51b02f0db83e"
        ],
        [
            "Definition unitRingType := @UnitRing.Pack cT xclass.",
            "VernacDefinition",
            "2fc21101404f298267a4a84da270b73575f3bf98"
        ],
        [
            "Definition comRingType := @ComRing.Pack cT xclass.",
            "VernacDefinition",
            "7ae57e52d5bc541f3670f9768868f067c230ad65"
        ],
        [
            "Definition comUnitRingType := @ComUnitRing.Pack cT xclass.",
            "VernacDefinition",
            "f27a825845ae5f4cb6a943bc8d5fa37920701569"
        ],
        [
            "Definition idomainType := @IntegralDomain.Pack cT xclass.",
            "VernacDefinition",
            "3e0200ebcc33abeac163cc9c30b3a33195446b9c"
        ],
        [
            "Definition fieldType := @Field.Pack cT xclass.",
            "VernacDefinition",
            "81fdf5f63ff476c1548f5cd56bda88a32a445f2c"
        ],
        [
            "Definition lmodType := @Lmodule.Pack F phF cT xclass.",
            "VernacDefinition",
            "aa475820f4894a8c826913212432737c0559de13"
        ],
        [
            "Definition lalgType := @Lalgebra.Pack F phF cT xclass.",
            "VernacDefinition",
            "a97ed7ce5e3cd4cceaa9f700b4038ed1cd829760"
        ],
        [
            "Definition algType := @Algebra.Pack F phF cT xclass.",
            "VernacDefinition",
            "3e9e71fc1ec0a1363a3c64b8d3166193829ef716"
        ],
        [
            "Definition unitAlgType := @UnitAlgebra.Pack F phF cT xclass.",
            "VernacDefinition",
            "b389b374b329ffd4694d81cd2934dfa906b886f7"
        ],
        [
            "Definition vectType := @Vector.Pack F phF cT xclass.",
            "VernacDefinition",
            "b67bc28a3bc37283e0c28b67b59bb5fdef69c28a"
        ],
        [
            "Definition FalgType := @Falgebra.Pack F phF cT xclass.",
            "VernacDefinition",
            "138748d10aa917efb15caa4e70e4eaeff752b46a"
        ],
        [
            "Definition fieldExtType := @FieldExt.Pack F phF cT xclass.",
            "VernacDefinition",
            "1053800dcba053711781003618676dd346a600cf"
        ],
        [
            "End ClassDef.",
            "VernacEndSegment",
            "bce1c8832045d8291c44a3fb67e9767782d2745b"
        ],
        [
            "Module Exports.",
            "VernacDefineModule",
            "d4a1114ec53f746523a7dec57823f7f03e51fa24"
        ],
        [
            "Coercion sort : type >-> Sortclass.",
            "VernacCoercion",
            "9e1cbf06afa0d2731dbb8bfd6b9ae32be22a8ae7"
        ],
        [
            "Bind Scope ring_scope with sort.",
            "VernacBindScope",
            "ac04d07dda43f0036576b2a438f8490c7ac4d59b"
        ],
        [
            "Coercion base : class_of >-> FieldExt.class_of.",
            "VernacCoercion",
            "130c421ead76780b649d2be0201362ab2e354ab8"
        ],
        [
            "Coercion eqType : type >-> Equality.type.",
            "VernacCoercion",
            "58308c67b5e73c9e004d57c486a5071598a25e8c"
        ],
        [
            "Canonical eqType.",
            "VernacCanonical",
            "dd1ac877a396f552e2a8f23e59be45903d8b15ad"
        ],
        [
            "Coercion choiceType : type >-> Choice.type.",
            "VernacCoercion",
            "bdc8d608f4b963a8606cd33ad18b1977a8bcb78d"
        ],
        [
            "Canonical choiceType.",
            "VernacCanonical",
            "af7a1759ddd13e2b7e4e1ce16b6a3595a77b5659"
        ],
        [
            "Coercion zmodType : type >-> Zmodule.type.",
            "VernacCoercion",
            "4ec9ca49e3551546d7d514a97127c47a11747e3a"
        ],
        [
            "Canonical zmodType.",
            "VernacCanonical",
            "9a6f278270af4b6ced100d8e0c90c7719a960a86"
        ],
        [
            "Coercion ringType : type >-> Ring.type.",
            "VernacCoercion",
            "3563a3bf802f370588b71df18917d551f221a05e"
        ],
        [
            "Canonical ringType.",
            "VernacCanonical",
            "b7d4c328ac58b23ee4b52bd787434621c20d2c4d"
        ],
        [
            "Coercion unitRingType : type >-> UnitRing.type.",
            "VernacCoercion",
            "f3d1399a2d1a8f93182c9b698d4a4a7d12624259"
        ],
        [
            "Canonical unitRingType.",
            "VernacCanonical",
            "5adf5dbcca23e501d2be7f60fe9ad3def13431b8"
        ],
        [
            "Coercion comRingType : type >-> ComRing.type.",
            "VernacCoercion",
            "0b68ec2f3c5c76d295167a623512d46ac31b80ad"
        ],
        [
            "Canonical comRingType.",
            "VernacCanonical",
            "30f9087081da845c9c545aeb8d7375204ed4f1b3"
        ],
        [
            "Coercion comUnitRingType : type >-> ComUnitRing.type.",
            "VernacCoercion",
            "c86b5a5eba0fa8431bb0c4dd719c4f48343ce09a"
        ],
        [
            "Canonical comUnitRingType.",
            "VernacCanonical",
            "74522c0e1d11ec46568915dda5f1829b7bbe8a04"
        ],
        [
            "Coercion idomainType : type >-> IntegralDomain.type.",
            "VernacCoercion",
            "456263ba8f66daa57f4e91cb63c7cf22a8129be1"
        ],
        [
            "Canonical idomainType.",
            "VernacCanonical",
            "ec8e76c80fed77c2b91406ec8a21033d94f8380d"
        ],
        [
            "Coercion fieldType : type >-> Field.type.",
            "VernacCoercion",
            "cd5d92a540c21184fd435cd430d76175833d5fb3"
        ],
        [
            "Canonical fieldType.",
            "VernacCanonical",
            "2f62ae066c69ea008603157a15e19f08a6a6284b"
        ],
        [
            "Coercion lmodType : type >-> Lmodule.type.",
            "VernacCoercion",
            "9ff62a98b0f74b40c781351d02b7295e741840a6"
        ],
        [
            "Canonical lmodType.",
            "VernacCanonical",
            "2508a378d00cff399685e05d31698f84cdfa1eb3"
        ],
        [
            "Coercion lalgType : type >-> Lalgebra.type.",
            "VernacCoercion",
            "8dc4e0c848285451e0f7d1e23771ee90e2b84039"
        ],
        [
            "Canonical lalgType.",
            "VernacCanonical",
            "f31157c914d84396af2f285a028b530262ad3b8e"
        ],
        [
            "Coercion algType : type >-> Algebra.type.",
            "VernacCoercion",
            "968b284465d8da0f4d63a1d5790d12f4562414a8"
        ],
        [
            "Canonical algType.",
            "VernacCanonical",
            "c8e13ad37555d7e21f377ace252393df47527b98"
        ],
        [
            "Coercion unitAlgType : type >-> UnitAlgebra.type.",
            "VernacCoercion",
            "da0ddecaeedc796cfc5e469f058268339eafdccd"
        ],
        [
            "Canonical unitAlgType.",
            "VernacCanonical",
            "dc8b91f44ee0029eada946f9b1526cf7274e957e"
        ],
        [
            "Coercion vectType : type >-> Vector.type.",
            "VernacCoercion",
            "4523914da6c5a8d8d9130c5144d16afb0e57942e"
        ],
        [
            "Canonical vectType.",
            "VernacCanonical",
            "c1ed9e45c59815f9a764670edb025f8ba3df0b85"
        ],
        [
            "Coercion FalgType : type >-> Falgebra.type.",
            "VernacCoercion",
            "3ddf21048ce952e58315e60ab7d32134be7050ab"
        ],
        [
            "Canonical FalgType.",
            "VernacCanonical",
            "7146c22f8a87df293aa96a8324e2fd3a9f4b23d6"
        ],
        [
            "Coercion fieldExtType : type >-> FieldExt.type.",
            "VernacCoercion",
            "5a91cd8ec8b16a9b088240af26dc6028e7510098"
        ],
        [
            "Canonical fieldExtType.",
            "VernacCanonical",
            "4970b5a57fb207faed542feb3872fc4496fa05d8"
        ],
        [
            "Notation splittingFieldType F := (type (Phant F)).",
            "VernacSyntacticDefinition",
            "0b2cd6402e39563d3c5e26132d19fce80f63445b"
        ],
        [
            "Notation SplittingFieldType F L ax := (@pack _ (Phant F) L _ ax _ _ id _ id).",
            "VernacSyntacticDefinition",
            "73697d8e68de83e35146d0e0eabc2e8e0bc57258"
        ],
        [
            "Notation \"[ 'splittingFieldType' F 'of' L 'for' K ]\" := (@clone _ (Phant F) L K _ idfun) (at level 0, format \"[ 'splittingFieldType' F 'of' L 'for' K ]\") : form_scope.",
            "VernacNotation",
            "e8fa5eeebdfe112fc8807dcb485e0a3e99165048"
        ],
        [
            "Notation \"[ 'splittingFieldType' F 'of' L ]\" := (@clone _ (Phant F) L _ _ id) (at level 0, format \"[ 'splittingFieldType' F 'of' L ]\") : form_scope.",
            "VernacNotation",
            "d496271bcb75b6ee81c7548308a70d086ad84342"
        ],
        [
            "End Exports.",
            "VernacEndSegment",
            "71efedae7ccffd696e1ffe5d8ae6baa8a4484918"
        ],
        [
            "End SplittingField.",
            "VernacEndSegment",
            "5652f56d1c9b35717646d31ff4e9a1bd3d1b7caa"
        ],
        [
            "Export SplittingField.Exports.",
            "VernacImport",
            "761e39af7aac781d313f90b2b95e5da0726d1031"
        ],
        [
            "Lemma normal_field_splitting (F : fieldType) (L : fieldExtType F) : (forall (K : {subfield L}) x, exists r, minPoly K x == \\prod_(y <- r) ('X - y%:P)) -> SplittingField.axiom L.",
            "VernacStartTheoremProof",
            "f6ed26d1c6dac61ff03b69e3512a97680637f30c"
        ],
        [
            "move=> normalL; pose r i := sval (sigW (normalL 1%AS (tnth (vbasis {:L}) i))).",
            "VernacExtend",
            "fef3c4a8f7fcf70b0824f3cce5fb58f2e0ef07fd"
        ],
        [
            "have sz_r i: size (r i) <= \\dim {:L}.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "rewrite -ltnS -(size_prod_XsubC _ id) /r; case: sigW => _ /= /eqP <-.",
            "VernacExtend",
            "712d339e99ee17eb7d5033e19ac614eb3ca6b532"
        ],
        [
            "rewrite size_minPoly ltnS; move: (tnth _ _) => x.",
            "VernacExtend",
            "7e529e80bb2879787ee6d9466056f19f0215c721"
        ],
        [
            "by rewrite adjoin_degreeE dimv1 divn1 dimvS // subvf.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "pose mkf (z : L) := 'X - z%:P.",
            "VernacExtend",
            "3c5f04de94609049d978298aa02ff35fb35ea7c7"
        ],
        [
            "exists (\\prod_i \\prod_(j < \\dim {:L} | j < size (r i)) mkf (r i)`_j).",
            "VernacExtend",
            "691d64bffd7670a5d1d59be0c636980658c0f522"
        ],
        [
            "apply: rpred_prod => i _; rewrite big_ord_narrow /= /r; case: sigW => rs /=.",
            "VernacExtend",
            "5caed936835e366e9e533d8f19382dcfedbf86d4"
        ],
        [
            "by rewrite (big_nth 0) big_mkord => /eqP <- {rs}; apply: minPolyOver.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "rewrite pair_big_dep /= -big_filter filter_index_enum -(big_map _ xpredT mkf).",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "set rF := map _ _; exists rF; first exact: eqpxx.",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "apply/eqP; rewrite eqEsubv subvf -(span_basis (vbasisP {:L})).",
            "VernacExtend",
            "56c014161b39aecfb3c54301c2409dba4e8e1857"
        ],
        [
            "apply/span_subvP=> _ /tnthP[i ->]; set x := tnth _ i.",
            "VernacExtend",
            "ac591433247162d5294d7c948ab3b309c2d6e368"
        ],
        [
            "have /tnthP[j ->]: x \\in in_tuple (r i).",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "by rewrite -root_prod_XsubC /r; case: sigW => _ /=/eqP<-; apply: root_minPoly.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "apply/seqv_sub_adjoin/imageP; rewrite (tnth_nth 0) /in_mem/=.",
            "VernacExtend",
            "56c014161b39aecfb3c54301c2409dba4e8e1857"
        ],
        [
            "by exists (i, widen_ord (sz_r i) j) => /=.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Fact regular_splittingAxiom F : SplittingField.axiom (regular_fieldExtType F).",
            "VernacStartTheoremProof",
            "0216d777b54e798a4615e4528346c52af75b75a7"
        ],
        [
            "exists 1; first exact: rpred1.",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "by exists [::]; [rewrite big_nil eqpxx | rewrite Fadjoin_nil regular_fullv].",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Canonical regular_splittingFieldType (F : fieldType) := SplittingFieldType F F^o (regular_splittingAxiom F).",
            "VernacDefinition",
            "2bcc79d71e7aa7871778222d416e9017422e496b"
        ],
        [
            "Section SplittingFieldTheory.",
            "VernacBeginSection",
            "90ebc68a1513bdfdde58367af52f1b1f822c5236"
        ],
        [
            "Variables (F : fieldType) (L : splittingFieldType F).",
            "VernacAssumption",
            "9f809215af1815c820a0043e8a3303d379a83e3c"
        ],
        [
            "Implicit Types (U V W : {vspace L}).",
            "VernacReserve",
            "a60f85725aa993980b1ed5bb4e618bcf90377fd0"
        ],
        [
            "Implicit Types (K M E : {subfield L}).",
            "VernacReserve",
            "395e2cff054de7bfef4fb1769f1f1037defd0349"
        ],
        [
            "Lemma splittingFieldP : SplittingField.axiom L.",
            "VernacStartTheoremProof",
            "b2e31891d95a3c6098cda719ef8a05408dd88237"
        ],
        [
            "by case: L => ? [].",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma splittingPoly : {p : {poly L} | p \\is a polyOver 1%VS & splittingFieldFor 1 p {:L}}.",
            "VernacStartTheoremProof",
            "2986999672afea6dced8a347cf6e878cf9a03b9f"
        ],
        [
            "pose factF p s := (p \\is a polyOver 1%VS) && (p %= \\prod_(z <- s) ('X - z%:P)).",
            "VernacExtend",
            "3c5f04de94609049d978298aa02ff35fb35ea7c7"
        ],
        [
            "suffices [[p rs] /andP[]]: {ps | factF F L ps.1 ps.2 & <<1 & ps.2>> = {:L}}%VS.",
            "VernacExtend",
            "290ed488b5562e885aa2cac56f3a69b4faa0eaa6"
        ],
        [
            "by exists p; last exists rs.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "apply: sig2_eqW; have [p F0p [rs splitLp genLrs]] := splittingFieldP.",
            "VernacExtend",
            "c574574294cc642b01d157e4c8f21ac2f90e4b5d"
        ],
        [
            "by exists (p, rs); rewrite // /factF F0p splitLp.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Fact fieldOver_splitting E : SplittingField.axiom (fieldOver_fieldExtType E).",
            "VernacStartTheoremProof",
            "cc94c8f2c0413db367693c6d4c3d617c7576d6f7"
        ],
        [
            "have [p Fp [r Dp defL]] := splittingFieldP; exists p.",
            "VernacExtend",
            "b294ed327eaf38a954d3f0d75d32d08637b8cedd"
        ],
        [
            "apply/polyOverP=> j; rewrite trivial_fieldOver.",
            "VernacExtend",
            "56c014161b39aecfb3c54301c2409dba4e8e1857"
        ],
        [
            "by rewrite (subvP (sub1v E)) ?(polyOverP Fp).",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "exists r => //; apply/vspaceP=> x; rewrite memvf.",
            "VernacExtend",
            "01f04d3f5bba3b876eb4ec7b1c8f26d2e2cced77"
        ],
        [
            "have [L0 [_ _ defL0]] := @aspaceOverP _ _ E <<1 & r : seq (fieldOver E)>>.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "rewrite defL0; have: x \\in <<1 & r>>%VS by rewrite defL (@memvf _ L).",
            "VernacExtend",
            "7be6e3cf9ccbce33486c4b5c6fefdf7a9ad6e52b"
        ],
        [
            "apply: subvP; apply/Fadjoin_seqP; rewrite -memvE -defL0 mem1v.",
            "VernacExtend",
            "7d4450169cd8610cf3ff90cd2eeb2f84258ab13d"
        ],
        [
            "by split=> // y r_y; rewrite -defL0 seqv_sub_adjoin.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Canonical fieldOver_splittingFieldType E := SplittingFieldType (subvs_of E) (fieldOver E) (fieldOver_splitting E).",
            "VernacDefinition",
            "159a3d2997f53228aa93aea5352f0469a55a8fc2"
        ],
        [
            "Lemma enum_AEnd : {kAutL : seq 'AEnd(L) | forall f, f \\in kAutL}.",
            "VernacStartTheoremProof",
            "225cd011fbe9e148c2a9fd3319e8e0a0470f2e61"
        ],
        [
            "pose isAutL (s : seq 'AEnd(L)) (f : 'AEnd(L)) := kHom 1 {:L} f = (f \\in s).",
            "VernacExtend",
            "3c5f04de94609049d978298aa02ff35fb35ea7c7"
        ],
        [
            "suffices [kAutL in_kAutL] : {kAutL : seq 'AEnd(L) | forall f, isAutL kAutL f}.",
            "VernacExtend",
            "290ed488b5562e885aa2cac56f3a69b4faa0eaa6"
        ],
        [
            "by exists kAutL => f; rewrite -in_kAutL k1AHom.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "have [p Kp /sig2_eqW[rs Dp defL]] := splittingPoly.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "do [rewrite {}/isAutL -(erefl (asval 1)); set r := rs; set E := 1%AS] in defL *.",
            "VernacExtend",
            "2ed5ae5c7a1513e882f170a2462d7a7c3c1ca435"
        ],
        [
            "have [sKE rs_r]: (1 <= E)%VS /\\ all (mem rs) r by split; last apply/allP.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "elim: r rs_r => [_|z r IHr /=/andP[rs_z rs_r]] /= in (E) sKE defL *.",
            "VernacExtend",
            "e686a1895f1799b840b76242f931100819a9ad6c"
        ],
        [
            "rewrite Fadjoin_nil in defL; exists [tuple \\1%AF] => f; rewrite defL inE.",
            "VernacExtend",
            "7da1e44fc70370c532a4f9a52f0578f62ffee13c"
        ],
        [
            "apply/idP/eqP=> [/kAHomP f1 | ->]; last exact: kHom1.",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "by apply/val_inj/lfunP=> x; rewrite id_lfunE f1 ?memvf.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "do [set Ez := <<E; z>>%VS; rewrite adjoin_cons] in defL.",
            "VernacExtend",
            "2ed5ae5c7a1513e882f170a2462d7a7c3c1ca435"
        ],
        [
            "have sEEz: (E <= Ez)%VS := subv_adjoin E z; have sKEz := subv_trans sKE sEEz.",
            "VernacExtend",
            "6e9d14df7d32ea0bf863301df3f6cb2d4e1b8e96"
        ],
        [
            "have{IHr} [homEz DhomEz] := IHr rs_r _ sKEz defL.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "have Ep: p \\in polyOver E := polyOverSv sKE Kp.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "have{rs_z} pz0: root p z by rewrite (eqp_root Dp) root_prod_XsubC.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "pose pEz := minPoly E z; pose n := \\dim_E Ez.",
            "VernacExtend",
            "311b833fadff89b2f7ed817d3cd7cb6971c96a1e"
        ],
        [
            "have{pz0} [rz DpEz]: {rz : n.-tuple L | pEz %= \\prod_(w <- rz) ('X - w%:P)}.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "have /dvdp_prod_XsubC[m DpEz]: pEz %| \\prod_(w <- rs) ('X - w%:P).",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "by rewrite -(eqp_dvdr _ Dp) minPoly_dvdp ?(polyOverSv sKE).",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "suffices sz_rz: size (mask m rs) == n by exists (Tuple sz_rz).",
            "VernacExtend",
            "290ed488b5562e885aa2cac56f3a69b4faa0eaa6"
        ],
        [
            "rewrite -[n]adjoin_degreeE -eqSS -size_minPoly.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "by rewrite (eqp_size DpEz) size_prod_XsubC.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "have fEz i (y := tnth rz i): {f : 'AEnd(L) | kHom E {:L} f & f z = y}.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "have homEfz: kHom E Ez (kHomExtend E \\1 z y).",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "rewrite kHomExtendP ?kHom1 // lfun1_poly.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "by rewrite (eqp_root DpEz) -/rz root_prod_XsubC mem_tnth.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "have splitFp: splittingFieldFor Ez p {:L}.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "exists rs => //; apply/eqP; rewrite eqEsubv subvf -defL adjoin_seqSr //.",
            "VernacExtend",
            "01f04d3f5bba3b876eb4ec7b1c8f26d2e2cced77"
        ],
        [
            "exact/allP.",
            "VernacExtend",
            "ce637ff86bafca5d8359473e8c02af644dcbdc43"
        ],
        [
            "have [f homLf Df] := kHom_extends sEEz homEfz Ep splitFp.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "have [ahomf _] := andP homLf; exists (AHom ahomf) => //.",
            "VernacExtend",
            "8431fc4d2460f7908baa11892c1b26797a3f17b8"
        ],
        [
            "rewrite -Df ?memv_adjoin ?(kHomExtend_val (kHom1 E E)) // lfun1_poly.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "by rewrite (eqp_root DpEz) root_prod_XsubC mem_tnth.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "exists [seq (s2val (fEz i) \\o f)%AF| i <- enum 'I_n, f <- homEz] => f.",
            "VernacExtend",
            "3c42b53d0efc26db114b00541ac5e7fcb29e6aeb"
        ],
        [
            "apply/idP/allpairsP => [homLf | [[i g] [_ Hg ->]] /=]; last first.",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "by case: (fEz i) => fi /= /comp_kHom->; rewrite ?(kHomSl sEEz) ?DhomEz.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "have /tnthP[i Dfz]: f z \\in rz.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "rewrite memtE /= -root_prod_XsubC -(eqp_root DpEz).",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "by rewrite (kHom_root_id _ homLf) ?memvf ?subvf ?minPolyOver ?root_minPoly.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "case Dfi: (fEz i) => [fi homLfi fi_z]; have kerfi0 := kAutf_lker0 homLfi.",
            "VernacExtend",
            "c6460972b7febd45d9a49b3c1ce4f3fe36b53169"
        ],
        [
            "set fj := (fi ^-1 \\o f)%AF; suffices Hfj : fj \\in homEz.",
            "VernacExtend",
            "8000712a77b7ffa46123cc21d292aebe6ac07c15"
        ],
        [
            "exists (i, fj) => //=; rewrite mem_enum inE Hfj; split => //.",
            "VernacExtend",
            "a86f095f54b646acf73a0c2ed01262e62203b9e4"
        ],
        [
            "by apply/val_inj; rewrite {}Dfi /= (lker0_compVKf kerfi0).",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "rewrite -DhomEz; apply/kAHomP => _ /Fadjoin_polyP[q Eq ->].",
            "VernacExtend",
            "634a7639ed2fb7caf62757f84400927f5829b7d5"
        ],
        [
            "have homLfj: kHom E {:L} fj := comp_kHom (inv_kHomf homLfi) homLf.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "have /kHom_lrmorphism fjM := kHomSl (sub1v _) homLfj.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "rewrite -[fj _](horner_map (RMorphism fjM)) (kHom_poly_id homLfj) //=.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "by rewrite lfunE /= Dfz -fi_z lker0_lfunK.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma splitting_field_normal K x : exists r, minPoly K x == \\prod_(y <- r) ('X - y%:P).",
            "VernacStartTheoremProof",
            "4782e4fb133dd3a30f1bc20fb9036712999d9103"
        ],
        [
            "pose q1 := minPoly 1 x; pose fx_root q (f : 'AEnd(L)) := root q (f x).",
            "VernacExtend",
            "311b833fadff89b2f7ed817d3cd7cb6971c96a1e"
        ],
        [
            "have [[p F0p splitLp] [autL DautL]] := (splittingFieldP, enum_AEnd).",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "suffices{K} autL_px q: q != 0 -> q %| q1 -> size q > 1 -> has (fx_root q) autL.",
            "VernacExtend",
            "290ed488b5562e885aa2cac56f3a69b4faa0eaa6"
        ],
        [
            "set q := minPoly K x; have: q \\is monic := monic_minPoly K x.",
            "VernacExtend",
            "5a669f4ad2118b005921530a069ac8f03fd7f32b"
        ],
        [
            "have: q %| q1 by rewrite minPolyS // sub1v.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "elim: {q}_.+1 {-2}q (ltnSn (size q)) => // d IHd q leqd q_dv_q1 mon_q.",
            "VernacExtend",
            "e686a1895f1799b840b76242f931100819a9ad6c"
        ],
        [
            "have nz_q: q != 0 := monic_neq0 mon_q.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "have [|q_gt1|q_1] := ltngtP (size q) 1; last first; last by rewrite polySpred.",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "by exists nil; rewrite big_nil -eqp_monic ?monic1 // -size_poly_eq1 q_1.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "have /hasP[f autLf /factor_theorem[q2 Dq]] := autL_px q nz_q q_dv_q1 q_gt1.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "have mon_q2: q2 \\is monic by rewrite -(monicMr _ (monicXsubC (f x))) -Dq.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "rewrite Dq size_monicM -?size_poly_eq0 ?size_XsubC ?addn2 //= ltnS in leqd.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "have q2_dv_q1: q2 %| q1 by rewrite (dvdp_trans _ q_dv_q1) // Dq dvdp_mulr.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "rewrite Dq; have [r /eqP->] := IHd q2 leqd q2_dv_q1 mon_q2.",
            "VernacExtend",
            "7be6e3cf9ccbce33486c4b5c6fefdf7a9ad6e52b"
        ],
        [
            "by exists (f x :: r); rewrite big_cons mulrC.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "elim: {q}_.+1 {-2}q (ltnSn (size q)) => // d IHd q leqd nz_q q_dv_q1 q_gt1.",
            "VernacExtend",
            "e686a1895f1799b840b76242f931100819a9ad6c"
        ],
        [
            "without loss{d leqd IHd nz_q q_gt1} irr_q: q q_dv_q1 / irreducible_poly q.",
            "VernacExtend",
            "87d5e7b04148ee8f2e4efcc847e0dfadae0aa4cb"
        ],
        [
            "move=> IHq; apply: wlog_neg => not_autLx_q; apply: IHq => //.",
            "VernacExtend",
            "e374b6c583d80c9d8b579c06df7953342f99f751"
        ],
        [
            "split=> // q2 q2_neq1 q2_dv_q; rewrite -dvdp_size_eqp // eqn_leq dvdp_leq //=.",
            "VernacExtend",
            "82d53976234637e3f0907eb36cddf61d028c6306"
        ],
        [
            "rewrite leqNgt; apply: contra not_autLx_q => ltq2q.",
            "VernacExtend",
            "634a7639ed2fb7caf62757f84400927f5829b7d5"
        ],
        [
            "have nz_q2: q2 != 0 by apply: contraTneq q2_dv_q => ->; rewrite dvd0p.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "have{q2_neq1} q2_gt1: size q2 > 1 by rewrite neq_ltn polySpred in q2_neq1 *.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "have{leqd ltq2q} ltq2d: size q2 < d by apply: leq_trans ltq2q _.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "apply: sub_has (IHd _ ltq2d nz_q2 (dvdp_trans q2_dv_q q_dv_q1) q2_gt1) => f.",
            "VernacExtend",
            "4bd6fa79b17bcd2bfb7af091fb325367a20385d6"
        ],
        [
            "by rewrite /fx_root !root_factor_theorem => /dvdp_trans->.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "have{irr_q} [Lz [inLz [z qz0]]]: {Lz : fieldExtType F & {inLz : 'AHom(L, Lz) & {z : Lz | root (map_poly inLz q) z}}}.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "-",
            "VernacBullet",
            "581cab4bf49fa4b495e569bbda96fc8d28fddcc0"
        ],
        [
            "have [Lz0 _ [z qz0 defLz]] := irredp_FAdjoin irr_q.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "pose Lz := baseField_extFieldType Lz0.",
            "VernacExtend",
            "3c5f04de94609049d978298aa02ff35fb35ea7c7"
        ],
        [
            "pose inLz : {rmorphism L -> Lz} := [rmorphism of in_alg Lz0].",
            "VernacExtend",
            "3c5f04de94609049d978298aa02ff35fb35ea7c7"
        ],
        [
            "have inLzL_linear: linear (locked inLz).",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "move=> a u v; rewrite -(@mulr_algl F Lz) baseField_scaleE.",
            "VernacExtend",
            "057edeb0967475c7ea5e8c98c449ddc5613eddc1"
        ],
        [
            "by rewrite -{1}mulr_algl rmorphD rmorphM -lock.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "have ihLzZ: ahom_in {:L} (linfun (Linear inLzL_linear)).",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "by apply/ahom_inP; split=> [u v|]; rewrite !lfunE (rmorphM, rmorph1).",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "exists Lz, (AHom ihLzZ), z; congr (root _ z): qz0.",
            "VernacExtend",
            "57ba907b7b4e017865d62f1719bd6a4a97cd82ab"
        ],
        [
            "by apply: eq_map_poly => y; rewrite lfunE /= -lock.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "pose imL := [aspace of limg inLz]; pose pz := map_poly inLz p.",
            "VernacExtend",
            "311b833fadff89b2f7ed817d3cd7cb6971c96a1e"
        ],
        [
            "have in_imL u: inLz u \\in imL by rewrite memv_img ?memvf.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "have F0pz: pz \\is a polyOver 1%VS.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "apply/polyOverP=> i; rewrite -(aimg1 inLz) coef_map /= memv_img //.",
            "VernacExtend",
            "56c014161b39aecfb3c54301c2409dba4e8e1857"
        ],
        [
            "exact: (polyOverP F0p).",
            "VernacExtend",
            "ce637ff86bafca5d8359473e8c02af644dcbdc43"
        ],
        [
            "have{splitLp} splitLpz: splittingFieldFor 1 pz imL.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "have [r def_p defL] := splitLp; exists (map inLz r) => [|{def_p}].",
            "VernacExtend",
            "8431fc4d2460f7908baa11892c1b26797a3f17b8"
        ],
        [
            "move: def_p; rewrite -(eqp_map [rmorphism of inLz]) rmorph_prod.",
            "VernacExtend",
            "057edeb0967475c7ea5e8c98c449ddc5613eddc1"
        ],
        [
            "rewrite big_map; congr (_ %= _); apply: eq_big => // y _.",
            "VernacExtend",
            "75f5ff0fb7cf09d432c728351fd923a93d5d7135"
        ],
        [
            "by rewrite rmorphB /= map_polyX map_polyC.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "apply/eqP; rewrite eqEsubv /= -{2}defL {defL}; apply/andP; split.",
            "VernacExtend",
            "c6080ad6de433b4aac1c6523f45011ac63415378"
        ],
        [
            "by apply/Fadjoin_seqP; rewrite sub1v; split=> // _ /mapP[y r_y ->].",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "elim/last_ind: r => [|r y IHr] /=; first by rewrite !Fadjoin_nil aimg1.",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "rewrite map_rcons !adjoin_rcons /=.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "apply/subvP=> _ /memv_imgP[_ /Fadjoin_polyP[p1 r_p1 ->] ->].",
            "VernacExtend",
            "4bd6fa79b17bcd2bfb7af091fb325367a20385d6"
        ],
        [
            "rewrite -horner_map /= mempx_Fadjoin //=; apply/polyOverP=> i.",
            "VernacExtend",
            "634a7639ed2fb7caf62757f84400927f5829b7d5"
        ],
        [
            "by rewrite coef_map (subvP IHr) //= memv_img ?(polyOverP r_p1).",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "have [f homLf fxz]: exists2 f : 'End(Lz), kHom 1 imL f & f (inLz x) = z.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "pose q1z := minPoly 1 (inLz x).",
            "VernacExtend",
            "3c5f04de94609049d978298aa02ff35fb35ea7c7"
        ],
        [
            "have Dq1z: map_poly inLz q1 %| q1z.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "have F0q1z i: exists a, q1z`_i = a%:A by apply/vlineP/polyOverP/minPolyOver.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "have [q2 Dq2]: exists q2, q1z = map_poly inLz q2.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "exists (\\poly_(i < size q1z) (sval (sig_eqW (F0q1z i)))%:A).",
            "VernacExtend",
            "b472c29f8e115c580d897fc5e02ccd94add4ea80"
        ],
        [
            "rewrite -{1}[q1z]coefK; apply/polyP=> i; rewrite coef_map !{1}coef_poly.",
            "VernacExtend",
            "fe8f197e86415fc7f0a74eda9d312128b9473eda"
        ],
        [
            "by case: sig_eqW => a; case: ifP; rewrite /= ?rmorph0 ?linearZ ?rmorph1.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "rewrite Dq2 dvdp_map minPoly_dvdp //.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "apply/polyOverP=> i; have[a] := F0q1z i.",
            "VernacExtend",
            "c574574294cc642b01d157e4c8f21ac2f90e4b5d"
        ],
        [
            "rewrite -(rmorph1 [rmorphism of inLz]) -linearZ.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "by rewrite Dq2 coef_map => /fmorph_inj->; rewrite rpredZ ?mem1v.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "by rewrite -(fmorph_root [rmorphism of inLz]) -Dq2 root_minPoly.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "have q1z_z: root q1z z.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "rewrite !root_factor_theorem in qz0 *.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "by apply: dvdp_trans qz0 (dvdp_trans _ Dq1z); rewrite dvdp_map.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "have map1q1z_z: root (map_poly \\1%VF q1z) z.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "by rewrite map_poly_id => // ? _; rewrite lfunE.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "pose f0 := kHomExtend 1 \\1 (inLz x) z.",
            "VernacExtend",
            "3c5f04de94609049d978298aa02ff35fb35ea7c7"
        ],
        [
            "have{map1q1z_z} hom_f0 : kHom 1 <<1; inLz x>> f0.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "by apply: kHomExtendP map1q1z_z => //; apply: kHom1.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "have{splitLpz} splitLpz: splittingFieldFor <<1; inLz x>> pz imL.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "have [r def_pz defLz] := splitLpz; exists r => //.",
            "VernacExtend",
            "8431fc4d2460f7908baa11892c1b26797a3f17b8"
        ],
        [
            "apply/eqP; rewrite eqEsubv -{2}defLz adjoin_seqSl ?sub1v // andbT.",
            "VernacExtend",
            "56c014161b39aecfb3c54301c2409dba4e8e1857"
        ],
        [
            "apply/Fadjoin_seqP; split; last first.",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "by rewrite /= -[limg _]defLz; apply: seqv_sub_adjoin.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "by apply/FadjoinP/andP; rewrite sub1v memv_img ?memvf.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "have [f homLzf Df] := kHom_extends (sub1v _) hom_f0 F0pz splitLpz.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "have [-> | x'z] := eqVneq (inLz x) z.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "by exists \\1%VF; rewrite ?lfunE ?kHom1.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "exists f => //; rewrite -Df ?memv_adjoin ?(kHomExtend_val (kHom1 1 1)) //.",
            "VernacExtend",
            "82d53976234637e3f0907eb36cddf61d028c6306"
        ],
        [
            "by rewrite lfun1_poly.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "pose f1 := (inLz^-1 \\o f \\o inLz)%VF; have /kHomP[fM fFid] := homLf.",
            "VernacExtend",
            "c09d1274557abc8857ed64eb3450db2da906c185"
        ],
        [
            "have Df1 u: inLz (f1 u) = f (inLz u).",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "rewrite !comp_lfunE limg_lfunVK //= -[limg _]/(asval imL).",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "have [r def_pz defLz] := splitLpz.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "have []: all (mem r) r /\\ inLz u \\in imL by split; first apply/allP.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "rewrite -{1}defLz; elim/last_ind: {-1}r {u}(inLz u) => [|r1 y IHr1] u.",
            "VernacExtend",
            "44a8e3b453c9376c468b4e3e0046f5ac33e11d6d"
        ],
        [
            "by rewrite Fadjoin_nil => _ Fu; rewrite fFid // (subvP (sub1v _)).",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "rewrite all_rcons adjoin_rcons => /andP[rr1 ry] /Fadjoin_polyP[pu r1pu ->].",
            "VernacExtend",
            "3c42b53d0efc26db114b00541ac5e7fcb29e6aeb"
        ],
        [
            "rewrite (kHom_horner homLf) -defLz; last exact: seqv_sub_adjoin; last first.",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "by apply: polyOverS r1pu; apply/subvP/adjoin_seqSr/allP.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "apply: rpred_horner.",
            "VernacExtend",
            "4bd6fa79b17bcd2bfb7af091fb325367a20385d6"
        ],
        [
            "by apply/polyOverP=> i; rewrite coef_map /= defLz IHr1 ?(polyOverP r1pu).",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "rewrite seqv_sub_adjoin // -root_prod_XsubC -(eqp_root def_pz).",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "rewrite (kHom_root_id _ homLf) ?sub1v //.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "by rewrite -defLz seqv_sub_adjoin.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "by rewrite (eqp_root def_pz) root_prod_XsubC.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "suffices f1_is_ahom : ahom_in {:L} f1.",
            "VernacExtend",
            "290ed488b5562e885aa2cac56f3a69b4faa0eaa6"
        ],
        [
            "apply/hasP; exists (AHom f1_is_ahom); first exact: DautL.",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "by rewrite /fx_root -(fmorph_root [rmorphism of inLz]) /= Df1 fxz.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "apply/ahom_inP; split=> [a b _ _|]; apply: (fmorph_inj [rmorphism of inLz]).",
            "VernacExtend",
            "09ff90107c05f6bf4f743acb58a064bacfe65029"
        ],
        [
            "by rewrite rmorphM /= !Df1 rmorphM fM ?in_imL.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "by rewrite /= Df1 /= fFid ?rmorph1 ?mem1v.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma kHom_to_AEnd K E f : kHom K E f -> {g : 'AEnd(L) | {in E, f =1 val g}}.",
            "VernacStartTheoremProof",
            "95349297a483c316d23da6904eb5fe2824d224ff"
        ],
        [
            "move=> homKf; have{homKf} [homFf sFE] := (kHomSl (sub1v K) homKf, sub1v E).",
            "VernacExtend",
            "ccd83c252dcbae3d56f3d057fcb8217878b51901"
        ],
        [
            "have [p Fp /(splittingFieldForS sFE (subvf E))splitLp] := splittingPoly.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "have [g0 homLg0 eq_fg] := kHom_extends sFE homFf Fp splitLp.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "by apply: exist (Sub g0 _) _ => //; apply/ahomP/kHom_lrmorphism.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "End SplittingFieldTheory.",
            "VernacEndSegment",
            "d7137bbc5dd79f77061c977d8904f4bb61174004"
        ],
        [
            "Module Import AEnd_FinGroup.",
            "VernacDefineModule",
            "a9f3e199f6df4769df34c35406b7a38ea32394db"
        ],
        [
            "Section AEnd_FinGroup.",
            "VernacBeginSection",
            "d68ef03d100e20aeae5500e3241be329605b5449"
        ],
        [
            "Variables (F : fieldType) (L : splittingFieldType F).",
            "VernacAssumption",
            "9f809215af1815c820a0043e8a3303d379a83e3c"
        ],
        [
            "Implicit Types (U V W : {vspace L}) (K M E : {subfield L}).",
            "VernacReserve",
            "3c52fe34c7d0b511d46568f43523db3494dfbd48"
        ],
        [
            "Definition inAEnd f := SeqSub (svalP (enum_AEnd L) f).",
            "VernacDefinition",
            "9ab812c167bd3c105e823cc1b9f1b9a73c3ae151"
        ],
        [
            "Fact inAEndK : cancel inAEnd val.",
            "VernacStartTheoremProof",
            "02dc10c29814485cc5bfaaa57b7b8ba4bbed814a"
        ],
        [
            "by [].",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Definition AEnd_countMixin := Eval hnf in CanCountMixin inAEndK.",
            "VernacDefinition",
            "08c16c40744802c8b4a5e03d02911c7a0aa7acac"
        ],
        [
            "Canonical AEnd_countType := Eval hnf in CountType 'AEnd(L) AEnd_countMixin.",
            "VernacDefinition",
            "411d7e6f06de65c4740ea281a156b2cedc832281"
        ],
        [
            "Canonical AEnd_subCountType := Eval hnf in [subCountType of 'AEnd(L)].",
            "VernacDefinition",
            "f1f4513c26c2be98629d7540e2c341cfe4095eb2"
        ],
        [
            "Definition AEnd_finMixin := Eval hnf in CanFinMixin inAEndK.",
            "VernacDefinition",
            "2958cec8fdf4b58ac3c9706cea45e4c4feb6f2d5"
        ],
        [
            "Canonical AEnd_finType := Eval hnf in FinType 'AEnd(L) AEnd_finMixin.",
            "VernacDefinition",
            "b73fc7ac68fa862571fab04b60a9fa09d4499f6e"
        ],
        [
            "Canonical AEnd_subFinType := Eval hnf in [subFinType of 'AEnd(L)].",
            "VernacDefinition",
            "68a996a512b430fcd59f76e39298399a5b138b83"
        ],
        [
            "Definition comp_AEnd (f g : 'AEnd(L)) : 'AEnd(L) := (g \\o f)%AF.",
            "VernacDefinition",
            "c22850598196bdcf0eed9e9b0842cb398a093907"
        ],
        [
            "Fact comp_AEndA : associative comp_AEnd.",
            "VernacStartTheoremProof",
            "465f138451cd0bb4589f9d1b8fa04c869ae2c7e5"
        ],
        [
            "by move=> f g h; apply: val_inj; symmetry; apply: comp_lfunA.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Fact comp_AEnd1l : left_id \\1%AF comp_AEnd.",
            "VernacStartTheoremProof",
            "708872560f715f1845b7b074b333b4210891a639"
        ],
        [
            "by move=> f; apply/val_inj/comp_lfun1r.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Fact comp_AEndK : left_inverse \\1%AF (@inv_ahom _ L) comp_AEnd.",
            "VernacStartTheoremProof",
            "d83055db68033bdaff7cbffa91d7b93b52bb9d0c"
        ],
        [
            "by move=> f; apply/val_inj; rewrite /= lker0_compfV ?AEnd_lker0.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Definition AEnd_baseFinGroupMixin := FinGroup.Mixin comp_AEndA comp_AEnd1l comp_AEndK.",
            "VernacDefinition",
            "c5a6ba4c1e0ac8295c49d949b26e8d7269f6c4a6"
        ],
        [
            "Canonical AEnd_baseFinGroupType := BaseFinGroupType 'AEnd(L) AEnd_baseFinGroupMixin.",
            "VernacDefinition",
            "25c8a723a8079ad18aa4b23258c98f622ab9396a"
        ],
        [
            "Canonical AEnd_finGroupType := FinGroupType comp_AEndK.",
            "VernacDefinition",
            "359d00f738a4596dd688c770ba0279e7fcdd075f"
        ],
        [
            "Definition kAEnd U V := [set f : 'AEnd(L) | kAut U V f].",
            "VernacDefinition",
            "d7ede2021f05f4ec25152bfd305a7cdc9c89ab22"
        ],
        [
            "Definition kAEndf U := kAEnd U {:L}.",
            "VernacDefinition",
            "80b9229aeb9f09c2e52b6a36550028f49d234367"
        ],
        [
            "Lemma kAEnd_group_set K E : group_set (kAEnd K E).",
            "VernacStartTheoremProof",
            "cb86054d0b5f65bca78ad571d17795e0833d2584"
        ],
        [
            "apply/group_setP; split=> [|f g]; first by rewrite inE /kAut kHom1 lim1g eqxx.",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "rewrite !inE !kAutE => /andP[homKf EfE] /andP[/(kHomSr EfE)homKg EgE].",
            "VernacExtend",
            "3c42b53d0efc26db114b00541ac5e7fcb29e6aeb"
        ],
        [
            "by rewrite (comp_kHom_img homKg homKf) limg_comp (subv_trans _ EgE) ?limgS.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Canonical kAEnd_group K E := group (kAEnd_group_set K E).",
            "VernacDefinition",
            "e52b3c856cf32bda7215a1a440c42438660050e0"
        ],
        [
            "Canonical kAEndf_group K := [group of kAEndf K].",
            "VernacDefinition",
            "30fa1f0273bf844d02ed516b6b8265f55aa9117b"
        ],
        [
            "Lemma kAEnd_norm K E : kAEnd K E \\subset 'N(kAEndf E)%g.",
            "VernacStartTheoremProof",
            "5f4264999d34e7cc3a3b6ba490c58fff7012abaa"
        ],
        [
            "apply/subsetP=> x; rewrite -groupV 2!in_set => /andP[_ /eqP ExE].",
            "VernacExtend",
            "5fce7e5361004176d6b434b36b4623c7387f70bb"
        ],
        [
            "apply/subsetP=> _ /imsetP[y homEy ->]; rewrite !in_set !kAutfE in homEy *.",
            "VernacExtend",
            "56c014161b39aecfb3c54301c2409dba4e8e1857"
        ],
        [
            "apply/kAHomP=> u Eu; have idEy := kAHomP homEy; rewrite -ExE in idEy.",
            "VernacExtend",
            "498dcf9c10fa6ece1d0d916281d2a6b32e23441c"
        ],
        [
            "by rewrite !lfunE /= lfunE /= idEy ?memv_img // lker0_lfunVK ?AEnd_lker0.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma mem_kAut_coset K E (g : 'AEnd(L)) : kAut K E g -> g \\in coset (kAEndf E) g.",
            "VernacStartTheoremProof",
            "497d23f6b64686710bfc0c3cc376a117b5056ad8"
        ],
        [
            "move=> autEg; rewrite val_coset ?rcoset_refl //.",
            "VernacExtend",
            "057edeb0967475c7ea5e8c98c449ddc5613eddc1"
        ],
        [
            "by rewrite (subsetP (kAEnd_norm K E)) // inE.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma aut_mem_eqP E (x y : coset_of (kAEndf E)) f g : f \\in x -> g \\in y -> reflect {in E, f =1 g} (x == y).",
            "VernacStartTheoremProof",
            "cbcad3891d88465572ef6cfdf3a8ea84a22e8c7e"
        ],
        [
            "move=> x_f y_g; rewrite -(coset_mem x_f) -(coset_mem y_g).",
            "VernacExtend",
            "057edeb0967475c7ea5e8c98c449ddc5613eddc1"
        ],
        [
            "have [Nf Ng] := (subsetP (coset_norm x) f x_f, subsetP (coset_norm y) g y_g).",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "rewrite (sameP eqP (rcoset_kercosetP Nf Ng)) mem_rcoset inE kAutfE.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "apply: (iffP kAHomP) => idEfg u Eu.",
            "VernacExtend",
            "4bd6fa79b17bcd2bfb7af091fb325367a20385d6"
        ],
        [
            "by rewrite -(mulgKV g f) lfunE /= idEfg.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "by rewrite lfunE /= idEfg // lker0_lfunK ?AEnd_lker0.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "End AEnd_FinGroup.",
            "VernacEndSegment",
            "3242614e9ec5d4d1659c4099c6498c06a0b46e8c"
        ],
        [
            "End AEnd_FinGroup.",
            "VernacEndSegment",
            "3242614e9ec5d4d1659c4099c6498c06a0b46e8c"
        ],
        [
            "Section GaloisTheory.",
            "VernacBeginSection",
            "71a921a13f291ad98b6ef79d5110b95b9be0d756"
        ],
        [
            "Variables (F : fieldType) (L : splittingFieldType F).",
            "VernacAssumption",
            "9f809215af1815c820a0043e8a3303d379a83e3c"
        ],
        [
            "Implicit Types (U V W : {vspace L}).",
            "VernacReserve",
            "a60f85725aa993980b1ed5bb4e618bcf90377fd0"
        ],
        [
            "Implicit Types (K M E : {subfield L}).",
            "VernacReserve",
            "395e2cff054de7bfef4fb1769f1f1037defd0349"
        ],
        [
            "Section gal_of_Definition.",
            "VernacBeginSection",
            "e4aba2a0adbc011952de1247c64ce7d82b4c3f64"
        ],
        [
            "Variable V : {vspace L}.",
            "VernacAssumption",
            "a89e29441fc80240ea2893015c0f8467612cfa4d"
        ],
        [
            "Inductive gal_of := Gal of [subg kAEnd_group 1 <<V>> / kAEndf (agenv V)].",
            "VernacInductive",
            "794308b044c652c4da52f54ada5118bcd331e797"
        ],
        [
            "Definition gal (f : 'AEnd(L)) := Gal (subg _ (coset _ f)).",
            "VernacDefinition",
            "89510ff1518e01958769273f8116de6c9b6cd514"
        ],
        [
            "Definition gal_sgval x := let: Gal u := x in u.",
            "VernacDefinition",
            "32d4045360cf500480f733153952d614ee7fa6e2"
        ],
        [
            "Fact gal_sgvalK : cancel gal_sgval Gal.",
            "VernacStartTheoremProof",
            "3d663444b2084c41e80562be506e43d1f092017e"
        ],
        [
            "by case.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Let gal_sgval_inj := can_inj gal_sgvalK.",
            "VernacDefinition",
            "8179b6a727eafdce12409ed55557fcc75d460820"
        ],
        [
            "Definition gal_eqMixin := CanEqMixin gal_sgvalK.",
            "VernacDefinition",
            "09bd0658e4f2abe2f01082439397d109ac1516cb"
        ],
        [
            "Canonical gal_eqType := Eval hnf in EqType gal_of gal_eqMixin.",
            "VernacDefinition",
            "cf4dd77a0d25d86118114276b9ab625cb22ce477"
        ],
        [
            "Definition gal_choiceMixin := CanChoiceMixin gal_sgvalK.",
            "VernacDefinition",
            "cdf2b968eb6d713b4d2977b5d05e9ac51ecd001b"
        ],
        [
            "Canonical gal_choiceType := Eval hnf in ChoiceType gal_of gal_choiceMixin.",
            "VernacDefinition",
            "cd632060d89da3bd502cbbbd9870504ac1a93434"
        ],
        [
            "Definition gal_countMixin := CanCountMixin gal_sgvalK.",
            "VernacDefinition",
            "ac2fb2fa7dd9d90578a1a901d41bdf937da1e8fe"
        ],
        [
            "Canonical gal_countType := Eval hnf in CountType gal_of gal_countMixin.",
            "VernacDefinition",
            "6ed531968152e9e7a482ba399883b1bc6c44e178"
        ],
        [
            "Definition gal_finMixin := CanFinMixin gal_sgvalK.",
            "VernacDefinition",
            "fc41ad7693a96ed50e57a0eaba613a917a31563c"
        ],
        [
            "Canonical gal_finType := Eval hnf in FinType gal_of gal_finMixin.",
            "VernacDefinition",
            "fbb05707ec8903d1448c9a053b4ba57a8d19b6ca"
        ],
        [
            "Definition gal_one := Gal 1%g.",
            "VernacDefinition",
            "947ff2c46a9c7fb1f5575bef2ab6ec4865326361"
        ],
        [
            "Definition gal_inv x := Gal (gal_sgval x)^-1.",
            "VernacDefinition",
            "e383ed659805691418798834387107dba8d088eb"
        ],
        [
            "Definition gal_mul x y := Gal (gal_sgval x * gal_sgval y).",
            "VernacDefinition",
            "24c672c5b272ac57ed73ba5b6d4403f52cb6055b"
        ],
        [
            "Fact gal_oneP : left_id gal_one gal_mul.",
            "VernacStartTheoremProof",
            "c88a19ada7b7739be1d2cd4daa2b4f36f9a118c7"
        ],
        [
            "by move=> x; apply/gal_sgval_inj/mul1g.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Fact gal_invP : left_inverse gal_one gal_inv gal_mul.",
            "VernacStartTheoremProof",
            "bb93a31d8498f160b6ab1e30d3ff19a1c98e0467"
        ],
        [
            "by move=> x; apply/gal_sgval_inj/mulVg.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Fact gal_mulP : associative gal_mul.",
            "VernacStartTheoremProof",
            "dd6f5c39ba38c3e8f58c66e2a16133c165ae26a7"
        ],
        [
            "by move=> x y z; apply/gal_sgval_inj/mulgA.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Definition gal_finGroupMixin := FinGroup.Mixin gal_mulP gal_oneP gal_invP.",
            "VernacDefinition",
            "4b6b5ccb8a2937f5b2d48a8cec45d9fb169908a7"
        ],
        [
            "Canonical gal_finBaseGroupType := Eval hnf in BaseFinGroupType gal_of gal_finGroupMixin.",
            "VernacDefinition",
            "7dcddc1abf2ac32b2052ca8673dbca7034e040a2"
        ],
        [
            "Canonical gal_finGroupType := Eval hnf in FinGroupType gal_invP.",
            "VernacDefinition",
            "b484e2a278e83432e633b2e14c2dde925229ff93"
        ],
        [
            "Coercion gal_repr u : 'AEnd(L) := repr (sgval (gal_sgval u)).",
            "VernacDefinition",
            "1bc8eb82a868a5f6f7aa31e746d548cc5e1a2c3c"
        ],
        [
            "Fact gal_is_morphism : {in kAEnd 1 (agenv V) &, {morph gal : x y / x * y}%g}.",
            "VernacStartTheoremProof",
            "9a1a300b29fd9385ea18d81c82ee62ba7cad8aa5"
        ],
        [
            "move=> f g /= autEa autEb; congr (Gal _).",
            "VernacExtend",
            "891b4e47d01d65b54df65493918a5af5df35b545"
        ],
        [
            "by rewrite !morphM ?mem_morphim // (subsetP (kAEnd_norm 1 _)).",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Canonical gal_morphism := Morphism gal_is_morphism.",
            "VernacDefinition",
            "970b627a6ffbcbb96fbfb21e7916a8be48a1c8af"
        ],
        [
            "Lemma gal_reprK : cancel gal_repr gal.",
            "VernacStartTheoremProof",
            "273e02270bd23b0ef99f9767b086975246373ac1"
        ],
        [
            "by case=> x; rewrite /gal coset_reprK sgvalK.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma gal_repr_inj : injective gal_repr.",
            "VernacStartTheoremProof",
            "268fa6aa24ec2922e006769f4e22206f87ec16bf"
        ],
        [
            "exact: can_inj gal_reprK.",
            "VernacExtend",
            "ce637ff86bafca5d8359473e8c02af644dcbdc43"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma gal_AEnd x : gal_repr x \\in kAEnd 1 (agenv V).",
            "VernacStartTheoremProof",
            "61081f93b1784d79023c86dd9be2bbf8f12983d5"
        ],
        [
            "rewrite /gal_repr; case/gal_sgval: x => _ /=/morphimP[g Ng autEg ->].",
            "VernacExtend",
            "712d339e99ee17eb7d5033e19ac614eb3ca6b532"
        ],
        [
            "rewrite val_coset //=; case: repr_rcosetP => f; rewrite groupMr // !inE kAut1E.",
            "VernacExtend",
            "1dc1cec635c64f0cc3ec64ea6e4d6c7d5b8f81f6"
        ],
        [
            "by rewrite kAutE -andbA => /and3P[_ /fixedSpace_limg-> _].",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "End gal_of_Definition.",
            "VernacEndSegment",
            "9b2c09d75f8b4a5b07e11b02927ae00562cbedb6"
        ],
        [
            "Prenex Implicits gal_repr.",
            "VernacExtend",
            "f6b19b10067ffe98eb8f11b7c44c5b2797a478d2"
        ],
        [
            "Lemma gal_eqP E {x y : gal_of E} : reflect {in E, x =1 y} (x == y).",
            "VernacStartTheoremProof",
            "1188612e5834493cdfdf28da7a745714c98868c7"
        ],
        [
            "by rewrite -{1}(subfield_closed E); apply: aut_mem_eqP; apply: mem_repr_coset.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma galK E (f : 'AEnd(L)) : (f @: E <= E)%VS -> {in E, gal E f =1 f}.",
            "VernacStartTheoremProof",
            "1c0ef453098b6f6b8690fe59e257cccaf992c8dd"
        ],
        [
            "rewrite -kAut1E -{1 2}(subfield_closed E) => autEf.",
            "VernacExtend",
            "3c42b53d0efc26db114b00541ac5e7fcb29e6aeb"
        ],
        [
            "apply: (aut_mem_eqP (mem_repr_coset _) _ (eqxx _)).",
            "VernacExtend",
            "4bd6fa79b17bcd2bfb7af091fb325367a20385d6"
        ],
        [
            "by rewrite subgK /= ?(mem_kAut_coset autEf) // ?mem_quotient ?inE.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma eq_galP E (f g : 'AEnd(L)) : (f @: E <= E)%VS -> (g @: E <= E)%VS -> reflect {in E, f =1 g} (gal E f == gal E g).",
            "VernacStartTheoremProof",
            "206a51402361a192601e476fd8b0d66cd462568b"
        ],
        [
            "move=> EfE EgE.",
            "VernacExtend",
            "b1b2cb7a3a617cba67460b4eca1f04de3c1cc716"
        ],
        [
            "by apply: (iffP gal_eqP) => Dfg a Ea; have:= Dfg a Ea; rewrite !{1}galK.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma limg_gal E (x : gal_of E) : (x @: E)%VS = E.",
            "VernacStartTheoremProof",
            "bd054f75409f28fe8348389638d068f1eb905a67"
        ],
        [
            "by have:= gal_AEnd x; rewrite inE subfield_closed => /andP[_ /eqP].",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma memv_gal E (x : gal_of E) a : a \\in E -> x a \\in E.",
            "VernacStartTheoremProof",
            "0f1543ff9d865f2bf4749a7370feaed41eaeb876"
        ],
        [
            "by move/(memv_img x); rewrite limg_gal.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma gal_id E a : (1 : gal_of E)%g a = a.",
            "VernacStartTheoremProof",
            "b1248dd0538d8fdf16afe40b9483e584cb0b1c01"
        ],
        [
            "by rewrite /gal_repr repr_coset1 id_lfunE.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma galM E (x y : gal_of E) a : a \\in E -> (x * y)%g a = y (x a).",
            "VernacStartTheoremProof",
            "a70dfdbec00143e2c0ceffa5dc0a68b7fdc600e2"
        ],
        [
            "rewrite /= -comp_lfunE; apply/eq_galP; rewrite ?limg_comp ?limg_gal //.",
            "VernacExtend",
            "fe8f197e86415fc7f0a74eda9d312128b9473eda"
        ],
        [
            "by rewrite morphM /= ?gal_reprK ?gal_AEnd.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma galV E (x : gal_of E) : {in E, (x^-1)%g =1 x^-1%VF}.",
            "VernacStartTheoremProof",
            "c52fa2d77739340a472fa937751d55dbd7ae84df"
        ],
        [
            "move=> a Ea; apply: canRL (lker0_lfunK (AEnd_lker0 _)) _.",
            "VernacExtend",
            "d6ebf3361f380a12d5c2c9bbb7ea363132c48b36"
        ],
        [
            "by rewrite -galM // mulVg gal_id.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Definition galoisG V U := gal V @* <<kAEnd (U :&: V) V>>.",
            "VernacDefinition",
            "5c5f8ef7ac0064c1ccfb4f042010cf926d54ebd8"
        ],
        [
            "Local Notation \"''Gal' ( V / U )\" := (galoisG V U) : group_scope.",
            "VernacNotation",
            "ebc93c42a423edc437e319c9184df14e2eaabb4e"
        ],
        [
            "Canonical galoisG_group E U := Eval hnf in [group of (galoisG E U)].",
            "VernacDefinition",
            "8edc4e320ebfe824f43342fdf35af9adc913c8a7"
        ],
        [
            "Local Notation \"''Gal' ( V / U )\" := (galoisG_group V U) : Group_scope.",
            "VernacNotation",
            "66e2b0378372282ba0fac52ba8f14188bf8d4860"
        ],
        [
            "Section Automorphism.",
            "VernacBeginSection",
            "1a7607070d355e3ba48037c7c80b39ac343dcc7a"
        ],
        [
            "Lemma gal_cap U V : 'Gal(V / U) = 'Gal(V / U :&: V).",
            "VernacStartTheoremProof",
            "9db6edafc56a9366f75a46a8d440288864048f55"
        ],
        [
            "by rewrite /galoisG -capvA capvv.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma gal_kAut K E x : (K <= E)%VS -> (x \\in 'Gal(E / K)) = kAut K E x.",
            "VernacStartTheoremProof",
            "49284f1b83e6c3f3da37230c7b3e0c47122df4b5"
        ],
        [
            "move=> sKE; apply/morphimP/idP=> /= [[g EgE KautEg ->{x}] | KautEx].",
            "VernacExtend",
            "d6ebf3361f380a12d5c2c9bbb7ea363132c48b36"
        ],
        [
            "rewrite genGid !inE kAut1E /= subfield_closed (capv_idPl sKE) in KautEg EgE.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "by apply: etrans KautEg; apply/(kAut_eq sKE); apply: galK.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "exists (x : 'AEnd(L)); rewrite ?gal_reprK ?gal_AEnd //.",
            "VernacExtend",
            "c0df5facb2acbafba755d40abe6c58e7beaa6d0c"
        ],
        [
            "by rewrite (capv_idPl sKE) mem_gen ?inE.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma gal_kHom K E x : (K <= E)%VS -> (x \\in 'Gal(E / K)) = kHom K E x.",
            "VernacStartTheoremProof",
            "c7c26ad715701d6e197aa7d373e250cc4e008d33"
        ],
        [
            "by move/gal_kAut->; rewrite /kAut limg_gal eqxx andbT.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma kAut_to_gal K E f : kAut K E f -> {x : gal_of E | x \\in 'Gal(E / K) & {in E, f =1 x}}.",
            "VernacStartTheoremProof",
            "807367e5d676c8cfbf8a5bf8e1955eb03005bff2"
        ],
        [
            "case/andP=> homKf EfE; have [g Df] := kHom_to_AEnd homKf.",
            "VernacExtend",
            "c6460972b7febd45d9a49b3c1ce4f3fe36b53169"
        ],
        [
            "have{homKf EfE} autEg: kAut (K :&: E) E g.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "rewrite /kAut -(kHom_eq (capvSr _ _) Df) (kHomSl (capvSl _ _) homKf) /=.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "by rewrite -(eq_in_limg Df).",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "have FautEg := kAutS (sub1v _) autEg.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "exists (gal E g) => [|a Ea]; last by rewrite {f}Df // galK // -kAut1E.",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "by rewrite mem_morphim /= ?subfield_closed ?genGid ?inE.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma fixed_gal K E x a : (K <= E)%VS -> x \\in 'Gal(E / K) -> a \\in K -> x a = a.",
            "VernacStartTheoremProof",
            "a223d8c1b5b8776ccfe63dcd3d0025f118a35f3c"
        ],
        [
            "by move/gal_kHom=> -> /kAHomP idKx /idKx.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma fixedPoly_gal K E x p : (K <= E)%VS -> x \\in 'Gal(E / K) -> p \\is a polyOver K -> map_poly x p = p.",
            "VernacStartTheoremProof",
            "d604d15f8dd99f7d055be7698582efc48a24a00a"
        ],
        [
            "move=> sKE galEKx /polyOverP Kp; apply/polyP => i.",
            "VernacExtend",
            "d6ebf3361f380a12d5c2c9bbb7ea363132c48b36"
        ],
        [
            "by rewrite coef_map /= (fixed_gal sKE).",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma root_minPoly_gal K E x a : (K <= E)%VS -> x \\in 'Gal(E / K) -> a \\in E -> root (minPoly K a) (x a).",
            "VernacStartTheoremProof",
            "e671758c01f9d42d1c66743696e117f0dd358f74"
        ],
        [
            "move=> sKE galEKx Ea; have homKx: kHom K E x by rewrite -gal_kHom.",
            "VernacExtend",
            "ccd83c252dcbae3d56f3d057fcb8217878b51901"
        ],
        [
            "have K_Pa := minPolyOver K a; rewrite -[minPoly K a](fixedPoly_gal _ galEKx) //.",
            "VernacExtend",
            "aa9d5fbc682ed874cd64b2543ca6c859b978e924"
        ],
        [
            "by rewrite (kHom_root homKx) ?root_minPoly // (polyOverS (subvP sKE)).",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "End Automorphism.",
            "VernacEndSegment",
            "01df54af9c5eda8ed3e956acd613a21191efd780"
        ],
        [
            "Lemma gal_adjoin_eq K a x y : x \\in 'Gal(<<K; a>> / K) -> y \\in 'Gal(<<K; a>> / K) -> (x == y) = (x a == y a).",
            "VernacStartTheoremProof",
            "815d44ee8aada74690e82ec60c5feefece48a640"
        ],
        [
            "move=> galKa_x galKa_y; apply/idP/eqP=> [/eqP-> // | eq_xy_a].",
            "VernacExtend",
            "d6ebf3361f380a12d5c2c9bbb7ea363132c48b36"
        ],
        [
            "apply/gal_eqP => _ /Fadjoin_polyP[p Kp ->].",
            "VernacExtend",
            "4bd6fa79b17bcd2bfb7af091fb325367a20385d6"
        ],
        [
            "by rewrite -!horner_map !(fixedPoly_gal (subv_adjoin K a)) //= eq_xy_a.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma galS K M E : (K <= M)%VS -> 'Gal(E / M) \\subset 'Gal(E / K).",
            "VernacStartTheoremProof",
            "8337b98e5f60fe4a0cc2565d7008bfa219935b6f"
        ],
        [
            "rewrite gal_cap (gal_cap K E) => sKM; apply/subsetP=> x.",
            "VernacExtend",
            "2855640502da0a3b2cfdfcd02ea9662c049d9a24"
        ],
        [
            "by rewrite !gal_kAut ?capvSr //; apply: kAutS; apply: capvS.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma gal_conjg K E x : 'Gal(E / K) :^ x = 'Gal(E / x @: K).",
            "VernacStartTheoremProof",
            "4a9116286543a43850cae5b7e0fe1cb1245cf68f"
        ],
        [
            "without loss sKE: K / (K <= E)%VS.",
            "VernacExtend",
            "87d5e7b04148ee8f2e4efcc847e0dfadae0aa4cb"
        ],
        [
            "move=> IH_K; rewrite gal_cap {}IH_K ?capvSr //.",
            "VernacExtend",
            "057edeb0967475c7ea5e8c98c449ddc5613eddc1"
        ],
        [
            "transitivity 'Gal(E / x @: K :&: x @: E); last by rewrite limg_gal -gal_cap.",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "congr 'Gal(E / _); apply/eqP; rewrite eqEsubv limg_cap; apply/subvP=> a.",
            "VernacExtend",
            "c6b7aa72429a782754e6d262b1341e10833e475d"
        ],
        [
            "rewrite memv_cap => /andP[/memv_imgP[b Kb ->] /memv_imgP[c Ec] eq_bc].",
            "VernacExtend",
            "3c42b53d0efc26db114b00541ac5e7fcb29e6aeb"
        ],
        [
            "by rewrite memv_img // memv_cap Kb (lker0P (AEnd_lker0 _) _ _ eq_bc).",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "wlog suffices IHx: x K sKE / 'Gal(E / K) :^ x \\subset 'Gal(E / x @: K).",
            "VernacExtend",
            "348aa27e7c84ea4ca2ac06b8a3b3db24e74b6ad7"
        ],
        [
            "apply/eqP; rewrite eqEsubset IHx // -sub_conjgV (subset_trans (IHx _ _ _)) //.",
            "VernacExtend",
            "56c014161b39aecfb3c54301c2409dba4e8e1857"
        ],
        [
            "by apply/subvP=> _ /memv_imgP[a Ka ->]; rewrite memv_gal ?(subvP sKE).",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "rewrite -limg_comp (etrans (eq_in_limg _) (lim1g _)) // => a /(subvP sKE)Ka.",
            "VernacExtend",
            "3c42b53d0efc26db114b00541ac5e7fcb29e6aeb"
        ],
        [
            "by rewrite !lfunE /= -galM // mulgV gal_id.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "apply/subsetP=> _ /imsetP[y galEy ->]; rewrite gal_cap gal_kHom ?capvSr //=.",
            "VernacExtend",
            "56c014161b39aecfb3c54301c2409dba4e8e1857"
        ],
        [
            "apply/kAHomP=> _ /memv_capP[/memv_imgP[a Ka ->] _]; have Ea := subvP sKE a Ka.",
            "VernacExtend",
            "c574574294cc642b01d157e4c8f21ac2f90e4b5d"
        ],
        [
            "by rewrite -galM // -conjgC galM // (fixed_gal sKE galEy).",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Definition fixedField V (A : {set gal_of V}) := (V :&: \\bigcap_(x in A) fixedSpace x)%VS.",
            "VernacDefinition",
            "5448f693df9e5030e1655505e9a745c65b45b78c"
        ],
        [
            "Lemma fixedFieldP E {A : {set gal_of E}} a : a \\in E -> reflect (forall x, x \\in A -> x a = a) (a \\in fixedField A).",
            "VernacStartTheoremProof",
            "afafefb7a16ed909fda4f95085eb8d327095cdb7"
        ],
        [
            "by rewrite memv_cap => ->; apply: (iffP subv_bigcapP) => cAa x /cAa/fixedSpaceP.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma mem_fixedFieldP E (A : {set gal_of E}) a : a \\in fixedField A -> a \\in E /\\ (forall x, x \\in A -> x a = a).",
            "VernacStartTheoremProof",
            "c907197f3cfc964cf0035e23b93af50340684d51"
        ],
        [
            "by move=> fixAa; have [Ea _] := memv_capP fixAa; have:= fixedFieldP Ea fixAa.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Fact fixedField_is_aspace E (A : {set gal_of E}) : is_aspace (fixedField A).",
            "VernacStartTheoremProof",
            "396fb29d3feb8810081ea4dae590790d61a0f2d8"
        ],
        [
            "rewrite /fixedField; elim/big_rec: _ {1}E => [|x K _ IH_K] M.",
            "VernacExtend",
            "44a8e3b453c9376c468b4e3e0046f5ac33e11d6d"
        ],
        [
            "exact: (valP (M :&: _)%AS).",
            "VernacExtend",
            "ce637ff86bafca5d8359473e8c02af644dcbdc43"
        ],
        [
            "by rewrite capvA IH_K.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Canonical fixedField_aspace E A : {subfield L} := ASpace (@fixedField_is_aspace E A).",
            "VernacDefinition",
            "2e874123d5a6c3326462793ace1d3816824149c3"
        ],
        [
            "Lemma fixedField_bound E (A : {set gal_of E}) : (fixedField A <= E)%VS.",
            "VernacStartTheoremProof",
            "d1cab9d197f244277e4a90b370b507bb8bf8a824"
        ],
        [
            "exact: capvSl.",
            "VernacExtend",
            "ce637ff86bafca5d8359473e8c02af644dcbdc43"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma fixedFieldS E (A B : {set gal_of E}) : A \\subset B -> (fixedField B <= fixedField A)%VS.",
            "VernacStartTheoremProof",
            "15724e50e40e5c419814fd42d866b76b265fa87f"
        ],
        [
            "move/subsetP=> sAB; apply/subvP => a /mem_fixedFieldP[Ea cBa].",
            "VernacExtend",
            "d6ebf3361f380a12d5c2c9bbb7ea363132c48b36"
        ],
        [
            "by apply/fixedFieldP; last apply: sub_in1 cBa.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma galois_connection_subv K E : (K <= E)%VS -> (K <= fixedField ('Gal(E / K)))%VS.",
            "VernacStartTheoremProof",
            "a7876f1104d919bc5c2bbc08a658427ca0ab2757"
        ],
        [
            "move=> sKE; apply/subvP => a Ka; have Ea := subvP sKE a Ka.",
            "VernacExtend",
            "fcbc4db6275a8d44907e8ed4b44d2f7f279ee662"
        ],
        [
            "by apply/fixedFieldP=> // x galEx; apply: (fixed_gal sKE).",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma galois_connection_subset E (A : {set gal_of E}): A \\subset 'Gal(E / fixedField A).",
            "VernacStartTheoremProof",
            "1acd24598b8892a544c7b2cbc1425fe3f26580ca"
        ],
        [
            "apply/subsetP => x Ax; rewrite gal_kAut ?capvSl // kAutE limg_gal subvv andbT.",
            "VernacExtend",
            "56c014161b39aecfb3c54301c2409dba4e8e1857"
        ],
        [
            "by apply/kAHomP=> a /mem_fixedFieldP[_ ->].",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma galois_connection K E (A : {set gal_of E}): (K <= E)%VS -> (A \\subset 'Gal(E / K)) = (K <= fixedField A)%VS.",
            "VernacStartTheoremProof",
            "16c06c95506d24fe6e2087e4c904c0b991d03e7a"
        ],
        [
            "move=> sKE; apply/idP/idP => [/fixedFieldS | /(galS E)].",
            "VernacExtend",
            "d6ebf3361f380a12d5c2c9bbb7ea363132c48b36"
        ],
        [
            "by apply: subv_trans; apply galois_connection_subv.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "by apply: subset_trans; apply: galois_connection_subset.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Definition galTrace U V a := \\sum_(x in 'Gal(V / U)) (x a).",
            "VernacDefinition",
            "3098a830659aba4d1484c463a17e4d211511a27f"
        ],
        [
            "Definition galNorm U V a := \\prod_(x in 'Gal(V / U)) (x a).",
            "VernacDefinition",
            "4185cd0668e7451bd8f34f79bd8489d860fc20bb"
        ],
        [
            "Section TraceAndNormMorphism.",
            "VernacBeginSection",
            "aa41e91649557020bc4ff396707e291c4ce95bb3"
        ],
        [
            "Variables U V : {vspace L}.",
            "VernacAssumption",
            "86a7d0cdfc4ab375e159453b15b5fd465277107f"
        ],
        [
            "Fact galTrace_is_additive : additive (galTrace U V).",
            "VernacStartTheoremProof",
            "961f2f245d21b7fee0bf83a912fc37a5e8ce24b7"
        ],
        [
            "by move=> a b /=; rewrite -sumrB; apply: eq_bigr => x _; rewrite rmorphB.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Canonical galTrace_additive := Additive galTrace_is_additive.",
            "VernacDefinition",
            "2c1b4d96ef906a632a88bfab07c33dae333f0b4f"
        ],
        [
            "Lemma galNorm1 : galNorm U V 1 = 1.",
            "VernacStartTheoremProof",
            "71cb999a535c3a66576e0416f419b226d1c7bef8"
        ],
        [
            "by apply: big1 => x _; rewrite rmorph1.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma galNormM : {morph galNorm U V : a b / a * b}.",
            "VernacStartTheoremProof",
            "027747dcd690de0995ad86160b270b2d12bcb8c0"
        ],
        [
            "by move=> a b /=; rewrite -big_split; apply: eq_bigr => x _; rewrite rmorphM.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma galNormV : {morph galNorm U V : a / a^-1}.",
            "VernacStartTheoremProof",
            "c1b6be2772c90e965683ab017b96e5810f0cb417"
        ],
        [
            "by move=> a /=; rewrite -prodfV; apply: eq_bigr => x _; rewrite fmorphV.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma galNormX n : {morph galNorm U V : a / a ^+ n}.",
            "VernacStartTheoremProof",
            "e6119b5ab566a05b1943ac80d0564652eed5c900"
        ],
        [
            "move=> a; elim: n => [|n IHn]; first by apply: galNorm1.",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "by rewrite !exprS galNormM IHn.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma galNorm_prod (I : Type) (r : seq I) (P : pred I) (B : I -> L) : galNorm U V (\\prod_(i <- r | P i) B i) = \\prod_(i <- r | P i) galNorm U V (B i).",
            "VernacStartTheoremProof",
            "4aa0cd81b422328aaad30bf39363ca38accbd3a1"
        ],
        [
            "exact: (big_morph _ galNormM galNorm1).",
            "VernacExtend",
            "ce637ff86bafca5d8359473e8c02af644dcbdc43"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma galNorm0 : galNorm U V 0 = 0.",
            "VernacStartTheoremProof",
            "0232a938008fb68770c984ed67f0ec3b0f9ad7ea"
        ],
        [
            "by rewrite /galNorm (bigD1 1%g) ?group1 // rmorph0 /= mul0r.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma galNorm_eq0 a : (galNorm U V a == 0) = (a == 0).",
            "VernacStartTheoremProof",
            "e2780121c1b98a1402da408b4b042fcb408d9f85"
        ],
        [
            "apply/idP/eqP=> [/prodf_eq0[x _] | ->]; last by rewrite galNorm0.",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "by rewrite fmorph_eq0 => /eqP.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "End TraceAndNormMorphism.",
            "VernacEndSegment",
            "84c069ae37155cad0bbb67ba43d87875b5e58706"
        ],
        [
            "Section TraceAndNormField.",
            "VernacBeginSection",
            "c09697b52bbbfc947c86f00a4ae96978488a03ac"
        ],
        [
            "Variables K E : {subfield L}.",
            "VernacAssumption",
            "3ec58670a78ff5443006e15ebc8f1e7eb45c3f57"
        ],
        [
            "Lemma galTrace_fixedField a : a \\in E -> galTrace K E a \\in fixedField 'Gal(E / K).",
            "VernacStartTheoremProof",
            "6dcee09852da0c2d7a7c17ea7c5d57309e194ecf"
        ],
        [
            "move=> Ea; apply/fixedFieldP=> [|x galEx].",
            "VernacExtend",
            "d6ebf3361f380a12d5c2c9bbb7ea363132c48b36"
        ],
        [
            "by apply: rpred_sum => x _; apply: memv_gal.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "rewrite {2}/galTrace (reindex_acts 'R _ galEx) ?astabsR //=.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "by rewrite rmorph_sum; apply: eq_bigr => y _; rewrite galM ?lfunE.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma galTrace_gal a x : a \\in E -> x \\in 'Gal(E / K) -> galTrace K E (x a) = galTrace K E a.",
            "VernacStartTheoremProof",
            "2dea7e768fe96041ce778a3e5a1936d84d9169e4"
        ],
        [
            "move=> Ea galEx; rewrite {2}/galTrace (reindex_inj (mulgI x)).",
            "VernacExtend",
            "057edeb0967475c7ea5e8c98c449ddc5613eddc1"
        ],
        [
            "by apply: eq_big => [b | b _]; rewrite ?groupMl // galM ?lfunE.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma galNorm_fixedField a : a \\in E -> galNorm K E a \\in fixedField 'Gal(E / K).",
            "VernacStartTheoremProof",
            "a3aa06d17ca0faf6335bc38708dadd04f11f47f6"
        ],
        [
            "move=> Ea; apply/fixedFieldP=> [|x galEx].",
            "VernacExtend",
            "d6ebf3361f380a12d5c2c9bbb7ea363132c48b36"
        ],
        [
            "by apply: rpred_prod => x _; apply: memv_gal.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "rewrite {2}/galNorm (reindex_acts 'R _ galEx) ?astabsR //=.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "by rewrite rmorph_prod; apply: eq_bigr => y _; rewrite galM ?lfunE.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma galNorm_gal a x : a \\in E -> x \\in 'Gal(E / K) -> galNorm K E (x a) = galNorm K E a.",
            "VernacStartTheoremProof",
            "b324a0012f31bd25caeed8fb47416aadf527320c"
        ],
        [
            "move=> Ea galEx; rewrite {2}/galNorm (reindex_inj (mulgI x)).",
            "VernacExtend",
            "057edeb0967475c7ea5e8c98c449ddc5613eddc1"
        ],
        [
            "by apply: eq_big => [b | b _]; rewrite ?groupMl // galM ?lfunE.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "End TraceAndNormField.",
            "VernacEndSegment",
            "43f99ae1e2f338c19b487b189267b1d875307853"
        ],
        [
            "Definition normalField U V := [forall x in kAEndf U, x @: V == V]%VS.",
            "VernacDefinition",
            "9fed14aeba1da2a696e2d6eaf458c98df97e4eac"
        ],
        [
            "Lemma normalField_kAut K M E f : (K <= M <= E)%VS -> normalField K M -> kAut K E f -> kAut K M f.",
            "VernacStartTheoremProof",
            "d3a24881ffb45626932839d38f3409595f67a9a8"
        ],
        [
            "case/andP=> sKM sME nKM /kAut_to_gal[x galEx /(sub_in1 (subvP sME))Df].",
            "VernacExtend",
            "e00fff71ff314c991514fc71c41a3556702e444a"
        ],
        [
            "have sKE := subv_trans sKM sME; rewrite gal_kHom // in galEx.",
            "VernacExtend",
            "aa9d5fbc682ed874cd64b2543ca6c859b978e924"
        ],
        [
            "rewrite (kAut_eq sKM Df) /kAut (kHomSr sME) //= (forall_inP nKM) // inE.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "by rewrite kAutfE; apply/kAHomP; apply: (kAHomP galEx).",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma normalFieldP K E : reflect {in E, forall a, exists2 r, all (mem E) r & minPoly K a = \\prod_(b <- r) ('X - b%:P)} (normalField K E).",
            "VernacStartTheoremProof",
            "36ab5149927a09c25e47fd797d20e1f8f418a99a"
        ],
        [
            "apply: (iffP eqfun_inP) => [nKE a Ea | nKE x]; last first.",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "rewrite inE kAutfE => homKx; suffices: kAut K E x by case/andP=> _ /eqP.",
            "VernacExtend",
            "25fa34a680ad6e8061330521759b0d5387eb169c"
        ],
        [
            "rewrite kAutE (kHomSr (subvf E)) //=; apply/subvP=> _ /memv_imgP[a Ea ->].",
            "VernacExtend",
            "634a7639ed2fb7caf62757f84400927f5829b7d5"
        ],
        [
            "have [r /allP/=srE splitEa] := nKE a Ea.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "rewrite srE // -root_prod_XsubC -splitEa.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "by rewrite -(kHom_poly_id homKx (minPolyOver K a)) fmorph_root root_minPoly.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "have [r /eqP splitKa] := splitting_field_normal K a.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "exists r => //; apply/allP => b; rewrite -root_prod_XsubC -splitKa => pKa_b_0.",
            "VernacExtend",
            "075260d0817e08a7c1e422f0e14d9d7d1b649424"
        ],
        [
            "pose y := kHomExtend K \\1 a b; have [hom1K lf1p] := (kHom1 K K, lfun1_poly).",
            "VernacExtend",
            "c09d1274557abc8857ed64eb3450db2da906c185"
        ],
        [
            "have homKy: kHom K <<K; a>> y by apply/kHomExtendP; rewrite ?lf1p.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "have [[g Dy] [_ idKy]] := (kHom_to_AEnd homKy, kHomP homKy).",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "have <-: g a = b by rewrite -Dy ?memv_adjoin // (kHomExtend_val hom1K) ?lf1p.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "suffices /nKE <-: g \\in kAEndf K by apply: memv_img.",
            "VernacExtend",
            "290ed488b5562e885aa2cac56f3a69b4faa0eaa6"
        ],
        [
            "by rewrite inE kAutfE; apply/kAHomP=> c Kc; rewrite -Dy ?subvP_adjoin ?idKy.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma normalFieldf K : normalField K {:L}.",
            "VernacStartTheoremProof",
            "c9429c57afba256887e37aadf46a981bfd855b3b"
        ],
        [
            "apply/normalFieldP=> a _; have [r /eqP->] := splitting_field_normal K a.",
            "VernacExtend",
            "c574574294cc642b01d157e4c8f21ac2f90e4b5d"
        ],
        [
            "by exists r => //; apply/allP=> b; rewrite /= memvf.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma normalFieldS K M E : (K <= M)%VS -> normalField K E -> normalField M E.",
            "VernacStartTheoremProof",
            "800a622b9ea83addfe0c91caee7dfb607ad3f6ad"
        ],
        [
            "move=> sKM /normalFieldP nKE; apply/normalFieldP=> a Ea.",
            "VernacExtend",
            "d6ebf3361f380a12d5c2c9bbb7ea363132c48b36"
        ],
        [
            "have [r /allP Er splitKa] := nKE a Ea.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "have /dvdp_prod_XsubC[m splitMa]: minPoly M a %| \\prod_(b <- r) ('X - b%:P).",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "by rewrite -splitKa minPolyS.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "exists (mask m r); first by apply/allP=> b /mem_mask/Er.",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "by apply/eqP; rewrite -eqp_monic ?monic_prod_XsubC ?monic_minPoly.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma splitting_normalField E K : (K <= E)%VS -> reflect (exists2 p, p \\is a polyOver K & splittingFieldFor K p E) (normalField K E).",
            "VernacStartTheoremProof",
            "fe4c12b5e3a630e236ef2cccadfb0f9d023a2681"
        ],
        [
            "move=> sKE; apply: (iffP idP) => [nKE| [p Kp [rs Dp defE]]]; last first.",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "apply/forall_inP=> g; rewrite inE kAutE => /andP[homKg _].",
            "VernacExtend",
            "5fce7e5361004176d6b434b36b4623c7387f70bb"
        ],
        [
            "rewrite -dimv_leqif_eq ?limg_dim_eq ?(eqP (AEnd_lker0 g)) ?capv0 //.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "rewrite -defE aimg_adjoin_seq; have [_ /fixedSpace_limg->] := andP homKg.",
            "VernacExtend",
            "7be6e3cf9ccbce33486c4b5c6fefdf7a9ad6e52b"
        ],
        [
            "apply/adjoin_seqSr=> _ /mapP[a rs_a ->].",
            "VernacExtend",
            "4bd6fa79b17bcd2bfb7af091fb325367a20385d6"
        ],
        [
            "rewrite -!root_prod_XsubC -!(eqp_root Dp) in rs_a *.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "by apply: kHom_root_id homKg Kp _ rs_a; rewrite ?subvf ?memvf.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "pose splitK a r := minPoly K a = \\prod_(b <- r) ('X - b%:P).",
            "VernacExtend",
            "3c5f04de94609049d978298aa02ff35fb35ea7c7"
        ],
        [
            "have{nKE} rK_ a: {r | a \\in E -> all (mem E) r /\\ splitK a r}.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "case Ea: (a \\in E); last by exists [::].",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "by have /sig2_eqW[r] := normalFieldP _ _ nKE a Ea; exists r.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "have sXE := basis_mem (vbasisP E); set X : seq L := vbasis E in sXE.",
            "VernacExtend",
            "81881a093b2294c76be3b432fbe83612064d7bc9"
        ],
        [
            "exists (\\prod_(a <- X) minPoly K a).",
            "VernacExtend",
            "5a290c069e87c1e5839e4363edce0a2971528fe5"
        ],
        [
            "by apply: rpred_prod => a _; apply: minPolyOver.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "exists (flatten [seq (sval (rK_ a)) | a <- X]).",
            "VernacExtend",
            "7c1b2fb3147a0447d3ddfd6a8be067831626e847"
        ],
        [
            "move/allP: sXE; elim: X => [|a X IHX]; first by rewrite !big_nil eqpxx.",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "rewrite big_cons /= big_cat /= => /andP[Ea sXE].",
            "VernacExtend",
            "3c42b53d0efc26db114b00541ac5e7fcb29e6aeb"
        ],
        [
            "by case: (rK_ a) => /= r [] // _ <-; apply/eqp_mull/IHX.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "apply/eqP; rewrite eqEsubv; apply/andP; split.",
            "VernacExtend",
            "c6080ad6de433b4aac1c6523f45011ac63415378"
        ],
        [
            "apply/Fadjoin_seqP; split=> // b /flatten_mapP[a /sXE Ea].",
            "VernacExtend",
            "5fce7e5361004176d6b434b36b4623c7387f70bb"
        ],
        [
            "by apply/allP; case: rK_ => r /= [].",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "rewrite -{1}(span_basis (vbasisP E)); apply/span_subvP=> a Xa.",
            "VernacExtend",
            "634a7639ed2fb7caf62757f84400927f5829b7d5"
        ],
        [
            "apply/seqv_sub_adjoin/flatten_mapP; exists a => //; rewrite -root_prod_XsubC.",
            "VernacExtend",
            "945ac9810113bf938ceefee9ae4e6b3a8be91952"
        ],
        [
            "by case: rK_ => /= r [| _ <-]; rewrite ?sXE ?root_minPoly.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma kHom_to_gal K M E f : (K <= M <= E)%VS -> normalField K E -> kHom K M f -> {x | x \\in 'Gal(E / K) & {in M, f =1 x}}.",
            "VernacStartTheoremProof",
            "d5090da963810dffea7af28ebda8cf18acf659c6"
        ],
        [
            "case/andP=> /subvP sKM /subvP sME nKE KhomMf.",
            "VernacExtend",
            "e00fff71ff314c991514fc71c41a3556702e444a"
        ],
        [
            "have [[g Df] [_ idKf]] := (kHom_to_AEnd KhomMf, kHomP KhomMf).",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "suffices /kAut_to_gal[x galEx Dg]: kAut K E g.",
            "VernacExtend",
            "290ed488b5562e885aa2cac56f3a69b4faa0eaa6"
        ],
        [
            "by exists x => //= a Ma; rewrite Df // Dg ?sME.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "have homKg: kHom K {:L} g by apply/kAHomP=> a Ka; rewrite -Df ?sKM ?idKf.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "by rewrite /kAut (kHomSr (subvf _)) // (forall_inP nKE) // inE kAutfE.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma normalField_root_minPoly K E a b : (K <= E)%VS -> normalField K E -> a \\in E -> root (minPoly K a) b -> exists2 x, x \\in 'Gal(E / K) & x a = b.",
            "VernacStartTheoremProof",
            "a5ae85912b7a893bb8fe0873170a9ee886766cf4"
        ],
        [
            "move=> sKE nKE Ea pKa_b_0; pose f := kHomExtend K \\1 a b.",
            "VernacExtend",
            "fef3c4a8f7fcf70b0824f3cce5fb58f2e0ef07fd"
        ],
        [
            "have homKa_f: kHom K <<K; a>> f.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "by apply: kHomExtendP; rewrite ?kHom1 ?lfun1_poly.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "have sK_Ka_E: (K <= <<K; a>> <= E)%VS.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "by rewrite subv_adjoin; apply/FadjoinP; rewrite sKE Ea.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "have [x galEx Df] := kHom_to_gal sK_Ka_E nKE homKa_f; exists x => //.",
            "VernacExtend",
            "8431fc4d2460f7908baa11892c1b26797a3f17b8"
        ],
        [
            "by rewrite -Df ?memv_adjoin // (kHomExtend_val (kHom1 K K)) ?lfun1_poly.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Arguments normalFieldP {K E}.",
            "VernacArguments",
            "5c8792dd7dcb52108f49caca14e76c4a1f619745"
        ],
        [
            "Lemma normalField_factors K E : (K <= E)%VS -> reflect {in E, forall a, exists2 r : seq (gal_of E), r \\subset 'Gal(E / K) & minPoly K a = \\prod_(x <- r) ('X - (x a)%:P)} (normalField K E).",
            "VernacStartTheoremProof",
            "ed9b0739585c75d1f8c59058832b7901812fe31e"
        ],
        [
            "move=> sKE; apply: (iffP idP) => [nKE a Ea | nKE]; last first.",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "apply/normalFieldP=> a Ea; have [r _ ->] := nKE a Ea.",
            "VernacExtend",
            "c574574294cc642b01d157e4c8f21ac2f90e4b5d"
        ],
        [
            "exists [seq x a | x : gal_of E <- r]; last by rewrite big_map.",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "by rewrite all_map; apply/allP=> b _; apply: memv_gal.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "have [r Er splitKa] := normalFieldP nKE a Ea.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "pose f b := [pick x in 'Gal(E / K) | x a == b].",
            "VernacExtend",
            "3c5f04de94609049d978298aa02ff35fb35ea7c7"
        ],
        [
            "exists (pmap f r).",
            "VernacExtend",
            "4627adc015647ef79589b14842bec88d05e0c841"
        ],
        [
            "apply/subsetP=> x; rewrite mem_pmap /f => /mapP[b _].",
            "VernacExtend",
            "5fce7e5361004176d6b434b36b4623c7387f70bb"
        ],
        [
            "by case: (pickP _) => // c /andP[galEc _] [->].",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "rewrite splitKa; have{splitKa}: all (root (minPoly K a)) r.",
            "VernacExtend",
            "7be6e3cf9ccbce33486c4b5c6fefdf7a9ad6e52b"
        ],
        [
            "by apply/allP => b; rewrite splitKa root_prod_XsubC.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "elim: r Er => /= [|b r IHr]; first by rewrite !big_nil.",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "case/andP=> Eb Er /andP[pKa_b_0 /(IHr Er){IHr Er}IHr].",
            "VernacExtend",
            "e00fff71ff314c991514fc71c41a3556702e444a"
        ],
        [
            "have [x galE /eqP xa_b] := normalField_root_minPoly sKE nKE Ea pKa_b_0.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "rewrite /(f b); case: (pickP _) => [y /andP[_ /eqP<-]|/(_ x)/andP[]//].",
            "VernacExtend",
            "712d339e99ee17eb7d5033e19ac614eb3ca6b532"
        ],
        [
            "by rewrite !big_cons IHr.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Definition galois U V := [&& (U <= V)%VS, separable U V & normalField U V].",
            "VernacDefinition",
            "f31dfd9bbe139400153c9565d6eaa51fb17cd812"
        ],
        [
            "Lemma galoisS K M E : (K <= M <= E)%VS -> galois K E -> galois M E.",
            "VernacStartTheoremProof",
            "4c6135951dd9656bf248f85d309f6e5e77ebef1a"
        ],
        [
            "case/andP=> sKM sME /and3P[_ sepUV nUV].",
            "VernacExtend",
            "e00fff71ff314c991514fc71c41a3556702e444a"
        ],
        [
            "by rewrite /galois sME (separableSl sKM) ?(normalFieldS sKM).",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma galois_dim K E : galois K E -> \\dim_K E = #|'Gal(E / K)|.",
            "VernacStartTheoremProof",
            "654d79bade057a79c5c083320f861218738adfdd"
        ],
        [
            "case/and3P=> sKE /eq_adjoin_separable_generator-> // nKE.",
            "VernacExtend",
            "e00fff71ff314c991514fc71c41a3556702e444a"
        ],
        [
            "set a := separable_generator K E in nKE *.",
            "VernacExtend",
            "69a61e99b234580f7b41fa5b9655c87ba9a76f70"
        ],
        [
            "have [r /allP/=Er splitKa] := normalFieldP nKE a (memv_adjoin K a).",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "rewrite (dim_sup_field (subv_adjoin K a)) mulnK ?adim_gt0 //.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "apply/eqP; rewrite -eqSS -adjoin_degreeE -size_minPoly splitKa size_prod_XsubC.",
            "VernacExtend",
            "56c014161b39aecfb3c54301c2409dba4e8e1857"
        ],
        [
            "set n := size r; rewrite eqSS -[n]card_ord.",
            "VernacExtend",
            "8460a73fe74726b8e94ff0752da65e8d48f68f26"
        ],
        [
            "have x_ (i : 'I_n): {x | x \\in 'Gal(<<K; a>> / K) & x a = r`_i}.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "apply/sig2_eqW/normalField_root_minPoly; rewrite ?subv_adjoin ?memv_adjoin //.",
            "VernacExtend",
            "56c014161b39aecfb3c54301c2409dba4e8e1857"
        ],
        [
            "by rewrite splitKa root_prod_XsubC mem_nth.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "have /card_image <-: injective (fun i => s2val (x_ i)).",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "move=> i j /eqP; case: (x_ i) (x_ j) => y /= galEy Dya [z /= galEx Dza].",
            "VernacExtend",
            "a01b3d93f426ff68d360351709a5fa5af822af32"
        ],
        [
            "rewrite gal_adjoin_eq // Dya Dza nth_uniq // => [/(i =P j)//|].",
            "VernacExtend",
            "3c42b53d0efc26db114b00541ac5e7fcb29e6aeb"
        ],
        [
            "by rewrite -separable_prod_XsubC -splitKa; apply: separable_generatorP.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "apply/eqP/eq_card=> x; apply/codomP/idP=> [[i ->] | galEx]; first by case: x_.",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "have /(nthP 0) [i ltin Dxa]: x a \\in r.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "rewrite -root_prod_XsubC -splitKa.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "by rewrite root_minPoly_gal ?memv_adjoin ?subv_adjoin.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "exists (Ordinal ltin); apply/esym/eqP.",
            "VernacExtend",
            "154dcef3d311a8bfd4d5e3c5240cde8ced392664"
        ],
        [
            "by case: x_ => y /= galEy /eqP; rewrite Dxa gal_adjoin_eq.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma galois_factors K E : (K <= E)%VS -> reflect {in E, forall a, exists r, let r_a := [seq x a | x : gal_of E <- r] in [/\\ r \\subset 'Gal(E / K), uniq r_a & minPoly K a = \\prod_(b <- r_a) ('X - b%:P)]} (galois K E).",
            "VernacStartTheoremProof",
            "451666dd40559e4597e72c61a92c0e26038a51ca"
        ],
        [
            "move=> sKE; apply: (iffP and3P) => [[_ sepKE nKE] a Ea | galKE].",
            "VernacExtend",
            "d6ebf3361f380a12d5c2c9bbb7ea363132c48b36"
        ],
        [
            "have [r galEr splitEa] := normalField_factors sKE nKE a Ea.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "exists r; rewrite /= -separable_prod_XsubC !big_map -splitEa.",
            "VernacExtend",
            "1ca7a87a37c23ea32530ef02cff423d0e8f27854"
        ],
        [
            "by split=> //; apply: separableP Ea.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "split=> //.",
            "VernacExtend",
            "3c42b53d0efc26db114b00541ac5e7fcb29e6aeb"
        ],
        [
            "apply/separableP => a /galKE[r [_ Ur_a splitKa]].",
            "VernacExtend",
            "4bd6fa79b17bcd2bfb7af091fb325367a20385d6"
        ],
        [
            "by rewrite /separable_element splitKa separable_prod_XsubC.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "apply/(normalField_factors sKE)=> a /galKE[r [galEr _ ->]].",
            "VernacExtend",
            "4bd6fa79b17bcd2bfb7af091fb325367a20385d6"
        ],
        [
            "by rewrite big_map; exists r.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma splitting_galoisField K E : reflect (exists p, [/\\ p \\is a polyOver K, separable_poly p & splittingFieldFor K p E]) (galois K E).",
            "VernacStartTheoremProof",
            "c6064954f92038c038fb55a36d0e3190be23bb17"
        ],
        [
            "apply: (iffP and3P) => [[sKE sepKE nKE]|[p [Kp sep_p [r Dp defE]]]].",
            "VernacExtend",
            "4bd6fa79b17bcd2bfb7af091fb325367a20385d6"
        ],
        [
            "rewrite (eq_adjoin_separable_generator sepKE) // in nKE *.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "set a := separable_generator K E in nKE *; exists (minPoly K a).",
            "VernacExtend",
            "85249ebf1d6bc8c670eac4e5172f92356ae1040d"
        ],
        [
            "split; first 1 [exact: minPolyOver | exact/separable_generatorP].",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "have [r /= /allP Er splitKa] := normalFieldP nKE a (memv_adjoin _ _).",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "exists r; first by rewrite splitKa eqpxx.",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "apply/eqP; rewrite eqEsubv; apply/andP; split.",
            "VernacExtend",
            "c6080ad6de433b4aac1c6523f45011ac63415378"
        ],
        [
            "by apply/Fadjoin_seqP; split => //; apply: subv_adjoin.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "apply/FadjoinP; split; first exact: subv_adjoin_seq.",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "by rewrite seqv_sub_adjoin // -root_prod_XsubC -splitKa root_minPoly.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "have sKE: (K <= E)%VS by rewrite -defE subv_adjoin_seq.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "split=> //; last by apply/splitting_normalField=> //; exists p; last exists r.",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "rewrite -defE; apply/separable_Fadjoin_seq/allP=> a r_a.",
            "VernacExtend",
            "634a7639ed2fb7caf62757f84400927f5829b7d5"
        ],
        [
            "by apply/separable_elementP; exists p; rewrite (eqp_root Dp) root_prod_XsubC.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma galois_fixedField K E : reflect (fixedField 'Gal(E / K) = K) (galois K E).",
            "VernacStartTheoremProof",
            "a030b3ac02afc2a069857c66210cf33b91390c52"
        ],
        [
            "apply (iffP idP) => [/and3P[sKE /separableP sepKE nKE] | fixedKE].",
            "VernacExtend",
            "3c42b53d0efc26db114b00541ac5e7fcb29e6aeb"
        ],
        [
            "apply/eqP; rewrite eqEsubv galois_connection_subv ?andbT //.",
            "VernacExtend",
            "56c014161b39aecfb3c54301c2409dba4e8e1857"
        ],
        [
            "apply/subvP=> a /mem_fixedFieldP[Ea fixEa]; rewrite -adjoin_deg_eq1.",
            "VernacExtend",
            "56c014161b39aecfb3c54301c2409dba4e8e1857"
        ],
        [
            "have [r /allP Er splitKa] := normalFieldP nKE a Ea.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "rewrite -eqSS -size_minPoly splitKa size_prod_XsubC eqSS -/(size [:: a]).",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "have Ur: uniq r by rewrite -separable_prod_XsubC -splitKa; apply: sepKE.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "rewrite -uniq_size_uniq {Ur}// => b; rewrite inE -root_prod_XsubC -splitKa.",
            "VernacExtend",
            "82d53976234637e3f0907eb36cddf61d028c6306"
        ],
        [
            "apply/eqP/idP=> [-> | pKa_b_0]; first exact: root_minPoly.",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "by have [x /fixEa-> ->] := normalField_root_minPoly sKE nKE Ea pKa_b_0.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "have sKE: (K <= E)%VS by rewrite -fixedKE capvSl.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "apply/galois_factors=> // a Ea.",
            "VernacExtend",
            "4bd6fa79b17bcd2bfb7af091fb325367a20385d6"
        ],
        [
            "pose r_pKa := [seq x a | x : gal_of E in 'Gal(E / K)].",
            "VernacExtend",
            "3c5f04de94609049d978298aa02ff35fb35ea7c7"
        ],
        [
            "have /fin_all_exists2[x_ galEx_ Dx_a] (b : seq_sub r_pKa) := imageP (valP b).",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "exists (codom x_); rewrite -map_comp; set r := map _ _.",
            "VernacExtend",
            "b7054f27be3ef37bc68fb13d484d9fed5a8e3b14"
        ],
        [
            "have r_xa x: x \\in 'Gal(E / K) -> x a \\in r.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "move=> galEx; have r_pKa_xa: x a \\in r_pKa by apply/imageP; exists x.",
            "VernacExtend",
            "ccd83c252dcbae3d56f3d057fcb8217878b51901"
        ],
        [
            "by rewrite [x a](Dx_a (SeqSub r_pKa_xa)); apply: codom_f.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "have Ur: uniq r by apply/injectiveP=> b c /=; rewrite -!Dx_a => /val_inj.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "split=> //; first by apply/subsetP=> _ /codomP[b ->].",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "apply/eqP; rewrite -eqp_monic ?monic_minPoly ?monic_prod_XsubC //.",
            "VernacExtend",
            "56c014161b39aecfb3c54301c2409dba4e8e1857"
        ],
        [
            "apply/andP; split; last first.",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "rewrite uniq_roots_dvdp ?uniq_rootsE // all_map.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "by apply/allP=> b _ /=; rewrite root_minPoly_gal.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "apply: minPoly_dvdp; last by rewrite root_prod_XsubC -(gal_id E a) r_xa ?group1.",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "rewrite -fixedKE; apply/polyOverP => i; apply/fixedFieldP=> [|x galEx].",
            "VernacExtend",
            "51feb8305384ec63057bc47214b50a33a7155fd3"
        ],
        [
            "rewrite (polyOverP _) // big_map rpred_prod // => b _.",
            "VernacExtend",
            "3c42b53d0efc26db114b00541ac5e7fcb29e6aeb"
        ],
        [
            "by rewrite polyOverXsubC memv_gal.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "rewrite -coef_map rmorph_prod; congr (_ : {poly _})`_i.",
            "VernacExtend",
            "a0279e71fd23ac6bde2b8b4402981a70ea719044"
        ],
        [
            "symmetry; rewrite (eq_big_perm (map x r)) /= ?(big_map x).",
            "VernacExtend",
            "ba28bca3513f9c0c3709417402c25d3b87653c7a"
        ],
        [
            "by apply: eq_bigr => b _; rewrite rmorphB /= map_polyX map_polyC.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "have Uxr: uniq (map x r) by rewrite map_inj_uniq //; apply: fmorph_inj.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "have /leq_size_perm: {subset map x r <= r}.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "by rewrite -map_comp => _ /codomP[b ->] /=; rewrite -galM // r_xa ?groupM.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "by rewrite (size_map x) perm_eq_sym; case=> // /uniq_perm_eq->.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma mem_galTrace K E a : galois K E -> a \\in E -> galTrace K E a \\in K.",
            "VernacStartTheoremProof",
            "5147fff28a3370f2b75abde0f7183f060f06af98"
        ],
        [
            "by move/galois_fixedField => {2}<- /galTrace_fixedField.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma mem_galNorm K E a : galois K E -> a \\in E -> galNorm K E a \\in K.",
            "VernacStartTheoremProof",
            "04de223a1bf07083abf303de7e5bf4209aad3938"
        ],
        [
            "by move/galois_fixedField=> {2}<- /galNorm_fixedField.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma gal_independent_contra E (P : pred (gal_of E)) (c_ : gal_of E -> L) x : P x -> c_ x != 0 -> exists2 a, a \\in E & \\sum_(y | P y) c_ y * y a != 0.",
            "VernacStartTheoremProof",
            "529a03082218d1d7f7ce286b2b317dd58ad0e252"
        ],
        [
            "elim: {P}_.+1 c_ x {-2}P (ltnSn #|P|) => // n IHn c_ x P lePn Px nz_cx.",
            "VernacExtend",
            "e686a1895f1799b840b76242f931100819a9ad6c"
        ],
        [
            "rewrite ltnS (cardD1x Px) in lePn; move/IHn: lePn => {n IHn}/=IH_P.",
            "VernacExtend",
            "7e529e80bb2879787ee6d9466056f19f0215c721"
        ],
        [
            "have [/eqfun_inP c_Px'_0 | ] := boolP [forall (y | P y && (y != x)), c_ y == 0].",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "exists 1; rewrite ?mem1v // (bigD1 x Px) /= rmorph1 mulr1.",
            "VernacExtend",
            "49fcc6d4959963de57b5fe7e58ee3f03d60693de"
        ],
        [
            "by rewrite big1 ?addr0 // => y /c_Px'_0->; rewrite mul0r.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "rewrite negb_forall_in => /exists_inP[y Px'y nz_cy].",
            "VernacExtend",
            "3c42b53d0efc26db114b00541ac5e7fcb29e6aeb"
        ],
        [
            "have [Py /gal_eqP/eqlfun_inP/subvPn[a Ea]] := andP Px'y.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "rewrite memv_ker !lfun_simp => nz_yxa; pose d_ y := c_ y * (y a - x a).",
            "VernacExtend",
            "9d8fbc7ebaadb48200c542591ceec3e0f555a812"
        ],
        [
            "have /IH_P[//|b Eb nz_sumb]: d_ y != 0 by rewrite mulf_neq0.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "have [sumb_0|] := eqVneq (\\sum_(z | P z) c_ z * z b) 0; last by exists b.",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "exists (a * b); first exact: rpredM.",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "rewrite -subr_eq0 -[z in _ - z](mulr0 (x a)) -[in z in _ - z]sumb_0.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "rewrite mulr_sumr -sumrB (bigD1 x Px) rmorphM /= mulrCA subrr add0r.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "congr (_ != 0): nz_sumb; apply: eq_bigr => z _.",
            "VernacExtend",
            "385739dd8a4f73703d3828c61e1780a276bfaa31"
        ],
        [
            "by rewrite mulrCA rmorphM -mulrBr -mulrBl mulrA.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma gal_independent E (P : pred (gal_of E)) (c_ : gal_of E -> L) : (forall a, a \\in E -> \\sum_(x | P x) c_ x * x a = 0) -> (forall x, P x -> c_ x = 0).",
            "VernacStartTheoremProof",
            "85a63b59519f99756dcf40ddc026736200ffc3ce"
        ],
        [
            "move=> sum_cP_0 x Px; apply/eqP/idPn=> /(gal_independent_contra Px)[a Ea].",
            "VernacExtend",
            "d6ebf3361f380a12d5c2c9bbb7ea363132c48b36"
        ],
        [
            "by rewrite sum_cP_0 ?eqxx.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma Hilbert's_theorem_90 K E x a : generator 'Gal(E / K) x -> a \\in E -> reflect (exists2 b, b \\in E /\\ b != 0 & a = b / x b) (galNorm K E a == 1).",
            "VernacStartTheoremProof",
            "0cbaa1cd416a40539f08ea437bd836de6bbeef11"
        ],
        [
            "move/(_ =P <[x]>)=> DgalE Ea.",
            "VernacExtend",
            "b1b2cb7a3a617cba67460b4eca1f04de3c1cc716"
        ],
        [
            "have galEx: x \\in 'Gal(E / K) by rewrite DgalE cycle_id.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "apply: (iffP eqP) => [normEa1 | [b [Eb nzb] ->]]; last first.",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "by rewrite galNormM galNormV galNorm_gal // mulfV // galNorm_eq0.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "have [x1 | ntx] := eqVneq x 1%g.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "exists 1; first by rewrite mem1v oner_neq0.",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "by rewrite -{1}normEa1 /galNorm DgalE x1 cycle1 big_set1 !gal_id divr1.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "pose c_ y := \\prod_(i < invm (injm_Zpm x) y) (x ^+ i)%g a.",
            "VernacExtend",
            "3c5f04de94609049d978298aa02ff35fb35ea7c7"
        ],
        [
            "have nz_c1: c_ 1%g != 0 by rewrite /c_ morph1 big_ord0 oner_neq0.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "have [d] := @gal_independent_contra _ (mem 'Gal(E / K)) _ _ (group1 _) nz_c1.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "set b := \\sum_(y in _) _ => Ed nz_b; exists b.",
            "VernacExtend",
            "f3c0689e7c1af9eb89e8dadee16c55c7e313dbf2"
        ],
        [
            "split=> //; apply: rpred_sum => y galEy.",
            "VernacExtend",
            "2855640502da0a3b2cfdfcd02ea9662c049d9a24"
        ],
        [
            "by apply: rpredM; first apply: rpred_prod => i _; apply: memv_gal.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "apply: canRL (mulfK _) _; first by rewrite fmorph_eq0.",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "rewrite rmorph_sum mulr_sumr [b](reindex_acts 'R _ galEx) ?astabsR //=.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "apply: eq_bigr => y galEy; rewrite galM // rmorphM mulrA; congr (_ * _).",
            "VernacExtend",
            "91580bd9cdf2cad626638a70b66bf9b00afa41b1"
        ],
        [
            "have /morphimP[/= i _ _ ->] /=: y \\in Zpm @* Zp #[x] by rewrite im_Zpm -DgalE.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "have <-: Zpm (i + 1) = (Zpm i * x)%g by rewrite morphM ?mem_Zp ?order_gt1.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "rewrite /c_ !invmE ?mem_Zp ?order_gt1 //= addn1; set n := _.+2.",
            "VernacExtend",
            "c1f58f36c5711f022b4a54717f37c2782f34a159"
        ],
        [
            "transitivity (\\prod_(j < i.+1) (x ^+ j)%g a).",
            "VernacExtend",
            "ba3123380b7fe88efbe2d2b5ce50405e39b71495"
        ],
        [
            "rewrite big_ord_recl gal_id rmorph_prod; congr (_ * _).",
            "VernacExtend",
            "a0279e71fd23ac6bde2b8b4402981a70ea719044"
        ],
        [
            "by apply: eq_bigr => j _; rewrite expgSr galM ?lfunE.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "have [/modn_small->//||->] := ltngtP i.+1 n; first by rewrite ltnNge ltn_ord.",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "rewrite modnn big_ord0; apply: etrans normEa1; rewrite /galNorm DgalE -im_Zpm.",
            "VernacExtend",
            "fe8f197e86415fc7f0a74eda9d312128b9473eda"
        ],
        [
            "rewrite morphimEdom big_imset /=; last exact/injmP/injm_Zpm.",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "by apply: eq_bigl => j /=; rewrite mem_Zp ?order_gt1.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Section Matrix.",
            "VernacBeginSection",
            "47fac6877b6ac9cbe7b1cb2b3ec703596b777723"
        ],
        [
            "Variable (E : {subfield L}) (A : {set gal_of E}).",
            "VernacAssumption",
            "574d6e13f1e682273bca7cd682a684db4fbf6b4b"
        ],
        [
            "Let K := fixedField A.",
            "VernacDefinition",
            "3d6846a272dc773039ef2806e71b2b6477ca1227"
        ],
        [
            "Lemma gal_matrix : {w : #|A|.-tuple L | {subset w <= E} /\\ 0 \\notin w & [/\\ \\matrix_(i, j < #|A|) enum_val i (tnth w j) \\in unitmx, directv (\\sum_i K * <[tnth w i]>) & group_set A -> (\\sum_i K * <[tnth w i]>)%VS = E] }.",
            "VernacStartTheoremProof",
            "daffccf3ab748fd4298806288107d709110b6768"
        ],
        [
            "pose nzE (w : #|A|.-tuple L) := {subset w <= E} /\\ 0 \\notin w.",
            "VernacExtend",
            "3c5f04de94609049d978298aa02ff35fb35ea7c7"
        ],
        [
            "pose M w := \\matrix_(i, j < #|A|) nth 1%g (enum A) i (tnth w j).",
            "VernacExtend",
            "3c5f04de94609049d978298aa02ff35fb35ea7c7"
        ],
        [
            "have [w [Ew nzw] uM]: {w : #|A|.-tuple L | nzE w & M w \\in unitmx}.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "rewrite {}/nzE {}/M cardE; have: uniq (enum A) := enum_uniq _.",
            "VernacExtend",
            "7be6e3cf9ccbce33486c4b5c6fefdf7a9ad6e52b"
        ],
        [
            "elim: (enum A) => [|x s IHs] Uxs.",
            "VernacExtend",
            "e686a1895f1799b840b76242f931100819a9ad6c"
        ],
        [
            "by exists [tuple]; rewrite // flatmx0 -(flatmx0 1%:M) unitmx1.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "have [s'x Us]: x \\notin s /\\ uniq s by apply/andP.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "have{IHs} [w [Ew nzw] uM] := IHs Us; set M := \\matrix_(i, j) _ in uM.",
            "VernacExtend",
            "81881a093b2294c76be3b432fbe83612064d7bc9"
        ],
        [
            "pose a := \\row_i x (tnth w i) *m invmx M.",
            "VernacExtend",
            "3c5f04de94609049d978298aa02ff35fb35ea7c7"
        ],
        [
            "pose c_ y := oapp (a 0) (-1) (insub (index y s)).",
            "VernacExtend",
            "3c5f04de94609049d978298aa02ff35fb35ea7c7"
        ],
        [
            "have cx_n1 : c_ x = -1 by rewrite /c_ insubN ?index_mem.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "have nz_cx : c_ x != 0 by rewrite cx_n1 oppr_eq0 oner_neq0.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "have Px: [pred y in x :: s] x := mem_head x s.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "have{Px nz_cx} /sig2W[w0 Ew0 nzS] := gal_independent_contra Px nz_cx.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "exists [tuple of cons w0 w].",
            "VernacExtend",
            "354f2f04f108a34781acf537cdafa80cecc870c8"
        ],
        [
            "split; first by apply/allP; rewrite /= Ew0; apply/allP.",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "rewrite inE negb_or (contraNneq _ nzS) // => <-.",
            "VernacExtend",
            "3c42b53d0efc26db114b00541ac5e7fcb29e6aeb"
        ],
        [
            "by rewrite big1 // => y _; rewrite rmorph0 mulr0.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "rewrite unitmxE -[\\det _]mul1r; set M1 := \\matrix_(i, j < 1 + size s) _.",
            "VernacExtend",
            "c1f58f36c5711f022b4a54717f37c2782f34a159"
        ],
        [
            "have <-: \\det (block_mx 1 (- a) 0 1%:M) = 1 by rewrite det_ublock !det1 mulr1.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "rewrite -det_mulmx -[M1]submxK mulmx_block !mul0mx !mul1mx !add0r !mulNmx.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "have ->: drsubmx M1 = M by apply/matrixP => i j; rewrite !mxE !(tnth_nth 0).",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "have ->: ursubmx M1 - a *m M = 0.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "by apply/rowP=> i; rewrite mulmxKV // !mxE !(tnth_nth 0) subrr.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "rewrite det_lblock unitrM andbC -unitmxE uM unitfE -oppr_eq0.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "congr (_ != 0): nzS; rewrite [_ - _]mx11_scalar det_scalar !mxE opprB /=.",
            "VernacExtend",
            "90723b7805fdae0b93bd8b98ae215a5658363919"
        ],
        [
            "rewrite -big_uniq // big_cons /= cx_n1 mulN1r addrC; congr (_ + _).",
            "VernacExtend",
            "a0279e71fd23ac6bde2b8b4402981a70ea719044"
        ],
        [
            "rewrite (big_nth 1%g) big_mkord; apply: eq_bigr => j _.",
            "VernacExtend",
            "634a7639ed2fb7caf62757f84400927f5829b7d5"
        ],
        [
            "by rewrite /c_ index_uniq // valK; congr (_ * _); rewrite !mxE.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "exists w => [//|]; split=> [||gA].",
            "VernacExtend",
            "fbaa61af20867a5dfb8bb5213ca8048b258f8f3a"
        ],
        [
            "-",
            "VernacBullet",
            "581cab4bf49fa4b495e569bbda96fc8d28fddcc0"
        ],
        [
            "by congr (_ \\in unitmx): uM; apply/matrixP=> i j; rewrite !mxE -enum_val_nth.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "-",
            "VernacBullet",
            "581cab4bf49fa4b495e569bbda96fc8d28fddcc0"
        ],
        [
            "apply/directv_sum_independent=> kw_ Kw_kw sum_kw_0 j _.",
            "VernacExtend",
            "4bd6fa79b17bcd2bfb7af091fb325367a20385d6"
        ],
        [
            "have /fin_all_exists2[k_ Kk_ Dk_] i := memv_cosetP (Kw_kw i isT).",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "pose kv := \\col_i k_ i.",
            "VernacExtend",
            "3c5f04de94609049d978298aa02ff35fb35ea7c7"
        ],
        [
            "transitivity (kv j 0 * tnth w j); first by rewrite !mxE.",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "suffices{j}/(canRL (mulKmx uM))->: M w *m kv = 0 by rewrite mulmx0 mxE mul0r.",
            "VernacExtend",
            "290ed488b5562e885aa2cac56f3a69b4faa0eaa6"
        ],
        [
            "apply/colP=> i; rewrite !mxE; pose Ai := nth 1%g (enum A) i.",
            "VernacExtend",
            "016aa2cff64dd6cc24fe0c79d072118984df7c40"
        ],
        [
            "transitivity (Ai (\\sum_j kw_ j)); last by rewrite sum_kw_0 rmorph0.",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "rewrite rmorph_sum; apply: eq_bigr => j _; rewrite !mxE /= -/Ai.",
            "VernacExtend",
            "fe8f197e86415fc7f0a74eda9d312128b9473eda"
        ],
        [
            "rewrite Dk_ mulrC rmorphM /=; congr (_ * _).",
            "VernacExtend",
            "a0279e71fd23ac6bde2b8b4402981a70ea719044"
        ],
        [
            "by have /mem_fixedFieldP[_ -> //] := Kk_ j; rewrite -mem_enum mem_nth -?cardE.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "pose G := group gA; have G_1 := group1 G; pose iG := enum_rank_in G_1.",
            "VernacExtend",
            "4ba889ca30f6e2df5df28eff953552dcb3277a27"
        ],
        [
            "apply/eqP; rewrite eqEsubv; apply/andP; split.",
            "VernacExtend",
            "c6080ad6de433b4aac1c6523f45011ac63415378"
        ],
        [
            "apply/subv_sumP=> i _; apply: subv_trans (asubv _).",
            "VernacExtend",
            "8d9dae45eeb3a769b8a865cef8ae476451f63802"
        ],
        [
            "by rewrite prodvS ?capvSl // -memvE Ew ?mem_tnth.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "apply/subvP=> w0 Ew0; apply/memv_sumP.",
            "VernacExtend",
            "8d9dae45eeb3a769b8a865cef8ae476451f63802"
        ],
        [
            "pose wv := \\col_(i < #|A|) enum_val i w0; pose v := invmx (M w) *m wv.",
            "VernacExtend",
            "311b833fadff89b2f7ed817d3cd7cb6971c96a1e"
        ],
        [
            "exists (fun i => tnth w i * v i 0) => [i _|]; last first.",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "transitivity (wv (iG 1%g) 0); first by rewrite mxE enum_rankK_in ?gal_id.",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "rewrite -[wv](mulKVmx uM) -/v; rewrite mxE; apply: eq_bigr => i _.",
            "VernacExtend",
            "51e0c63f755e5e2f92b62902843f015ccfc39aeb"
        ],
        [
            "by congr (_ * _); rewrite !mxE -enum_val_nth enum_rankK_in ?gal_id.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "rewrite mulrC memv_mul ?memv_line //; apply/fixedFieldP=> [|x Gx].",
            "VernacExtend",
            "634a7639ed2fb7caf62757f84400927f5829b7d5"
        ],
        [
            "rewrite mxE rpred_sum // => j _; rewrite !mxE rpredM //; last exact: memv_gal.",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "have E_M k l: M w k l \\in E by rewrite mxE memv_gal // Ew ?mem_tnth.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "have Edet n (N : 'M_n) (E_N : forall i j, N i j \\in E): \\det N \\in E.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "by apply: rpred_sum => sigma _; rewrite rpredMsign rpred_prod.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "rewrite /invmx uM 2!mxE mulrC rpred_div ?Edet //.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "by rewrite rpredMsign Edet // => k l; rewrite 2!mxE.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "suffices{i} {2}<-: map_mx x v = v by rewrite [map_mx x v i 0]mxE.",
            "VernacExtend",
            "290ed488b5562e885aa2cac56f3a69b4faa0eaa6"
        ],
        [
            "have uMx: map_mx x (M w) \\in unitmx by rewrite map_unitmx.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "rewrite map_mxM map_invmx /=; apply: canLR {uMx}(mulKmx uMx) _.",
            "VernacExtend",
            "634a7639ed2fb7caf62757f84400927f5829b7d5"
        ],
        [
            "apply/colP=> i; rewrite !mxE; pose ix := iG (enum_val i * x)%g.",
            "VernacExtend",
            "016aa2cff64dd6cc24fe0c79d072118984df7c40"
        ],
        [
            "have Dix b: b \\in E -> enum_val ix b = x (enum_val i b).",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "by move=> Eb; rewrite enum_rankK_in ?groupM ?enum_valP // galM ?lfunE.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "transitivity ((M w *m v) ix 0); first by rewrite mulKVmx // mxE Dix.",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "rewrite mxE; apply: eq_bigr => j _; congr (_ * _).",
            "VernacExtend",
            "470a8ad3c912d4f8cb2e3d688aab7c3a56d118ec"
        ],
        [
            "by rewrite !mxE -!enum_val_nth Dix // ?Ew ?mem_tnth.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "End Matrix.",
            "VernacEndSegment",
            "fcdce8de35351ed99320040d9349c94653e57f32"
        ],
        [
            "Lemma dim_fixedField E (G : {group gal_of E}) : #|G| = \\dim_(fixedField G) E.",
            "VernacStartTheoremProof",
            "3dc42db55683a00e85e23590de573d29a8c0e1bb"
        ],
        [
            "have [w [_ nzw] [_ Edirect /(_ (groupP G))defE]] := gal_matrix G.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "set n := #|G|; set m := \\dim (fixedField G); rewrite -defE (directvP Edirect).",
            "VernacExtend",
            "321844593e706cf8b09ceb5a7a294d03e09ebfd6"
        ],
        [
            "rewrite -[n]card_ord -(@mulnK #|'I_n| m) ?adim_gt0 //= -sum_nat_const.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "congr (_ %/ _)%N; apply: eq_bigr => i _.",
            "VernacExtend",
            "385739dd8a4f73703d3828c61e1780a276bfaa31"
        ],
        [
            "by rewrite dim_cosetv ?(memPn nzw) ?mem_tnth.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma dim_fixed_galois K E (G : {group gal_of E}) : galois K E -> G \\subset 'Gal(E / K) -> \\dim_K (fixedField G) = #|'Gal(E / K) : G|.",
            "VernacStartTheoremProof",
            "8784eee03a459c9642186ed56993f57a26ec51d6"
        ],
        [
            "move=> galE sGgal; have [sFE _ _] := and3P galE; apply/eqP.",
            "VernacExtend",
            "7a69517207288e46da9dd503cb8095e3bbc839fc"
        ],
        [
            "rewrite -divgS // eqn_div ?cardSg // dim_fixedField -galois_dim //.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "by rewrite mulnC muln_divA ?divnK ?field_dimS ?capvSl -?galois_connection.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma gal_fixedField E (G : {group gal_of E}): 'Gal(E / fixedField G) = G.",
            "VernacStartTheoremProof",
            "cf4cd3b89ca8cc2475124c3a187ea0f44e7947f0"
        ],
        [
            "apply/esym/eqP; rewrite eqEcard galois_connection_subset /= (dim_fixedField G).",
            "VernacExtend",
            "56c014161b39aecfb3c54301c2409dba4e8e1857"
        ],
        [
            "rewrite galois_dim //; apply/galois_fixedField/eqP.",
            "VernacExtend",
            "634a7639ed2fb7caf62757f84400927f5829b7d5"
        ],
        [
            "rewrite eqEsubv galois_connection_subv ?capvSl //.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "by rewrite fixedFieldS ?galois_connection_subset.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma gal_generated E (A : {set gal_of E}) : 'Gal(E / fixedField A) = <<A>>.",
            "VernacStartTheoremProof",
            "ecff14867eb136b7035b93606d76808730be4263"
        ],
        [
            "apply/eqP; rewrite eqEsubset gen_subG galois_connection_subset.",
            "VernacExtend",
            "56c014161b39aecfb3c54301c2409dba4e8e1857"
        ],
        [
            "by rewrite -[<<A>>]gal_fixedField galS // fixedFieldS // subset_gen.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma fixedField_galois E (A : {set gal_of E}): galois (fixedField A) E.",
            "VernacStartTheoremProof",
            "b3324ee6ac1e5d16f30bd4643d850acafaf2e274"
        ],
        [
            "have: galois (fixedField <<A>>) E.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "by apply/galois_fixedField; rewrite gal_fixedField.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "by apply: galoisS; rewrite capvSl fixedFieldS // subset_gen.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Section FundamentalTheoremOfGaloisTheory.",
            "VernacBeginSection",
            "c970ad621d9da1a0f1290e9ba37439b142eb2d1e"
        ],
        [
            "Variables E K : {subfield L}.",
            "VernacAssumption",
            "e50e31f2bc285b68735f0cdbbc50d56dc93ad86a"
        ],
        [
            "Hypothesis galKE : galois K E.",
            "VernacAssumption",
            "b72a03ad1adfd0e5aa4061a4154c7318f82153fa"
        ],
        [
            "Section IntermediateField.",
            "VernacBeginSection",
            "cc9b972aaadc1941562a3f289fd4f8fa767a2cf9"
        ],
        [
            "Variable M : {subfield L}.",
            "VernacAssumption",
            "9302121f4e6f9c5a23f16849174b581f0d4eafe8"
        ],
        [
            "Hypothesis (sKME : (K <= M <= E)%VS) (nKM : normalField K M).",
            "VernacAssumption",
            "9d56c382d1d713754dba514ce452784dc4f4099e"
        ],
        [
            "Lemma normalField_galois : galois K M.",
            "VernacStartTheoremProof",
            "609feb52211e9fcafd843821bb9ac9f3199fddee"
        ],
        [
            "have [[sKM sME] [_ sepKE nKE]] := (andP sKME, and3P galKE).",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "by rewrite /galois sKM (separableSr sME).",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Definition normalField_cast (x : gal_of E) : gal_of M := gal M x.",
            "VernacDefinition",
            "0ef3b3f3f7707c94d88ba6e9d0f7ec054e55bacb"
        ],
        [
            "Lemma normalField_cast_eq x : x \\in 'Gal(E / K) -> {in M, normalField_cast x =1 x}.",
            "VernacStartTheoremProof",
            "04d2c7d796034e075702e5da802b932a1750f6c6"
        ],
        [
            "have [sKM sME] := andP sKME; have sKE := subv_trans sKM sME.",
            "VernacExtend",
            "6e9d14df7d32ea0bf863301df3f6cb2d4e1b8e96"
        ],
        [
            "rewrite gal_kAut // => /(normalField_kAut sKME nKM).",
            "VernacExtend",
            "3c42b53d0efc26db114b00541ac5e7fcb29e6aeb"
        ],
        [
            "by rewrite kAutE => /andP[_ /galK].",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma normalField_castM : {in 'Gal(E / K) &, {morph normalField_cast : x y / (x * y)%g}}.",
            "VernacStartTheoremProof",
            "3cccf99ec48cc8f51fa82e3ddbb47190b9479593"
        ],
        [
            "move=> x y galEx galEy /=; apply/eqP/gal_eqP => a Ma.",
            "VernacExtend",
            "d6ebf3361f380a12d5c2c9bbb7ea363132c48b36"
        ],
        [
            "have Ea: a \\in E by have [_ /subvP->] := andP sKME.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "rewrite normalField_cast_eq ?groupM ?galM //=.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "by rewrite normalField_cast_eq ?memv_gal // normalField_cast_eq.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Canonical normalField_cast_morphism := Morphism normalField_castM.",
            "VernacDefinition",
            "c3e5fd31398a2cdf47d13eaeb8c67d47d14f5c56"
        ],
        [
            "Lemma normalField_ker : 'ker normalField_cast = 'Gal(E / M).",
            "VernacStartTheoremProof",
            "ac82da38ce72cc329ccc4d6b1045a5ba7eb835f4"
        ],
        [
            "have [sKM sME] := andP sKME.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "apply/setP=> x; apply/idP/idP=> [kerMx | galEMx].",
            "VernacExtend",
            "8d9dae45eeb3a769b8a865cef8ae476451f63802"
        ],
        [
            "rewrite gal_kHom //; apply/kAHomP=> a Ma.",
            "VernacExtend",
            "634a7639ed2fb7caf62757f84400927f5829b7d5"
        ],
        [
            "by rewrite -normalField_cast_eq ?(dom_ker kerMx) // (mker kerMx) gal_id.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "have galEM: x \\in 'Gal(E / K) := subsetP (galS E sKM) x galEMx.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "apply/kerP=> //; apply/eqP/gal_eqP=> a Ma.",
            "VernacExtend",
            "8d9dae45eeb3a769b8a865cef8ae476451f63802"
        ],
        [
            "by rewrite normalField_cast_eq // gal_id (fixed_gal sME).",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma normalField_normal : 'Gal(E / M) <| 'Gal(E / K).",
            "VernacStartTheoremProof",
            "efdacaec76ae2bab78f7961b809d19cdade10da5"
        ],
        [
            "by rewrite -normalField_ker ker_normal.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma normalField_img : normalField_cast @* 'Gal(E / K) = 'Gal(M / K).",
            "VernacStartTheoremProof",
            "bf8bc60f42184c27950bc16f0238b75dcc7d92dd"
        ],
        [
            "have [[sKM sME] [sKE _ nKE]] := (andP sKME, and3P galKE).",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "apply/setP=> x; apply/idP/idP=> [/morphimP[{x}x galEx _ ->] | galMx].",
            "VernacExtend",
            "8d9dae45eeb3a769b8a865cef8ae476451f63802"
        ],
        [
            "rewrite gal_kHom //; apply/kAHomP=> a Ka; have Ma := subvP sKM a Ka.",
            "VernacExtend",
            "c6ff91ceee22c8fcb242ad6d0dc8ed6693b7fb7e"
        ],
        [
            "by rewrite normalField_cast_eq // (fixed_gal sKE).",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "have /(kHom_to_gal sKME nKE)[y galEy eq_xy]: kHom K M x by rewrite -gal_kHom.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "apply/morphimP; exists y => //; apply/eqP/gal_eqP => a Ha.",
            "VernacExtend",
            "09ff90107c05f6bf4f743acb58a064bacfe65029"
        ],
        [
            "by rewrite normalField_cast_eq // eq_xy.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma normalField_isom : {f : {morphism ('Gal(E / K) / 'Gal(E / M)) >-> gal_of M} | isom ('Gal(E / K) / 'Gal (E / M)) 'Gal(M / K) f & (forall A, f @* (A / 'Gal(E / M)) = normalField_cast @* A) /\\ {in 'Gal(E / K) & M, forall x, f (coset 'Gal (E / M) x) =1 x} }%g.",
            "VernacStartTheoremProof",
            "013f4d27da43d3182570c4191d19ec5f81f59094"
        ],
        [
            "have:= first_isom normalField_cast_morphism; rewrite normalField_ker.",
            "VernacExtend",
            "aa9d5fbc682ed874cd64b2543ca6c859b978e924"
        ],
        [
            "case=> f injf Df; exists f; first by apply/isomP; rewrite Df normalField_img.",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "split=> [//|x a galEx /normalField_cast_eq<- //]; congr ((_ : gal_of M) a).",
            "VernacExtend",
            "d95da12c0095726885402a7f0e86738a30a8e464"
        ],
        [
            "apply: set1_inj; rewrite -!morphim_set1 ?mem_quotient ?Df //.",
            "VernacExtend",
            "56c014161b39aecfb3c54301c2409dba4e8e1857"
        ],
        [
            "by rewrite (subsetP (normal_norm normalField_normal)).",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma normalField_isog : 'Gal(E / K) / 'Gal(E / M) \\isog 'Gal(M / K).",
            "VernacStartTheoremProof",
            "5f9e5c1eee758d05efcb8433f54284bf7bc71e12"
        ],
        [
            "by rewrite -normalField_ker -normalField_img first_isog.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "End IntermediateField.",
            "VernacEndSegment",
            "0c20f3e996cb0d45694b825e3b4b8d5ed31852b4"
        ],
        [
            "Section IntermediateGroup.",
            "VernacBeginSection",
            "3ad7b6d9746d854d596923fa6ad9429c926fb3b8"
        ],
        [
            "Variable G : {group gal_of E}.",
            "VernacAssumption",
            "c3d13b9cfe5e0396b5710b4c0c139863cb1f4284"
        ],
        [
            "Hypothesis nsGgalE : G <| 'Gal(E / K).",
            "VernacAssumption",
            "f20bd6c52abd6840fe91099ead60a9ab2ecab85c"
        ],
        [
            "Lemma normal_fixedField_galois : galois K (fixedField G).",
            "VernacStartTheoremProof",
            "96ef88430d89aa4ffab6fb7b8943c3aafad94603"
        ],
        [
            "have [[sKE sepKE nKE] [sGgal nGgal]] := (and3P galKE, andP nsGgalE).",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "rewrite /galois -(galois_connection _ sKE) sGgal.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "rewrite (separableSr _ sepKE) ?capvSl //; apply/forall_inP=> f autKf.",
            "VernacExtend",
            "634a7639ed2fb7caf62757f84400927f5829b7d5"
        ],
        [
            "rewrite eqEdim limg_dim_eq ?(eqP (AEnd_lker0 _)) ?capv0 // leqnn andbT.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "apply/subvP => _ /memv_imgP[a /mem_fixedFieldP[Ea cGa] ->].",
            "VernacExtend",
            "4bd6fa79b17bcd2bfb7af091fb325367a20385d6"
        ],
        [
            "have /kAut_to_gal[x galEx -> //]: kAut K E f.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "rewrite /kAut (forall_inP nKE) // andbT; apply/kAHomP.",
            "VernacExtend",
            "634a7639ed2fb7caf62757f84400927f5829b7d5"
        ],
        [
            "by move: autKf; rewrite inE kAutfE => /kHomP[].",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "apply/fixedFieldP=> [|y Gy]; first exact: memv_gal.",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "by rewrite -galM // conjgCV galM //= cGa // memJ_norm ?groupV ?(subsetP nGgal).",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "End IntermediateGroup.",
            "VernacEndSegment",
            "7fa829236d98bccb2ddfc1072da3169c493adf2a"
        ],
        [
            "End FundamentalTheoremOfGaloisTheory.",
            "VernacEndSegment",
            "b86353e50cb5c8f0a09bafa7e474e76da1d94cf7"
        ],
        [
            "End GaloisTheory.",
            "VernacEndSegment",
            "d6e21f3288fb6ca50f824a88cd346dbfe22db295"
        ],
        [
            "Prenex Implicits gal_repr gal gal_reprK.",
            "VernacExtend",
            "92579ed6aa8689bb3528837364ac7d7a8475056e"
        ],
        [
            "Arguments gal_repr_inj {F L V} [x1 x2].",
            "VernacArguments",
            "907b87809ca0bfbf7dc68d7e8e09cec81f2c5688"
        ],
        [
            "Notation \"''Gal' ( V / U )\" := (galoisG V U) : group_scope.",
            "VernacNotation",
            "50b1310a593405645f631c8d6bc82b89b08a3400"
        ],
        [
            "Notation \"''Gal' ( V / U )\" := (galoisG_group V U) : Group_scope.",
            "VernacNotation",
            "71da3fe4d2952ec704fd17748b348ab56657b728"
        ],
        [
            "Arguments fixedFieldP {F L E A a}.",
            "VernacArguments",
            "40d25691f45df27c8aea3bbfa6c363277b48dc33"
        ],
        [
            "Arguments normalFieldP {F L K E}.",
            "VernacArguments",
            "3bc8643e00f90a0393cd71efc59c72a924c844b6"
        ],
        [
            "Arguments splitting_galoisField {F L K E}.",
            "VernacArguments",
            "e447efd335f50089a7c5c6aa04de476e9100103f"
        ],
        [
            "Arguments galois_fixedField {F L K E}.",
            "VernacArguments",
            "04581f5e175127046d4e448082f2f4877a58a464"
        ]
    ],
    "proofs": [
        {
            "name": "kHomP",
            "line_nb": 24,
            "steps": [
                {
                    "command": [
                        "apply: (iffP andP) => [[/ahom_inP[fM _] /subvP idKf] | [fM idKf]].",
                        "VernacExtend",
                        "4bd6fa79b17bcd2bfb7af091fb325367a20385d6"
                    ]
                },
                {
                    "command": [
                        "by split=> // x /idKf/fixedSpaceP.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "split; last by apply/subvP=> x /idKf/fixedSpaceP.",
                        "VernacExtend",
                        "3763a4b8db689af316a7372b722bb29806ab4fb6"
                    ]
                },
                {
                    "command": [
                        "by apply/ahom_inP; split=> //; rewrite idKf ?mem1v.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "kAHomP",
            "line_nb": 30,
            "steps": [
                {
                    "command": [
                        "by rewrite /kHom ahomWin; apply: fixedSpacesP.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "kHom1",
            "line_nb": 33,
            "steps": [
                {
                    "command": [
                        "by apply/kAHomP => u _; rewrite lfunE.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "k1HomE",
            "line_nb": 36,
            "steps": [
                {
                    "command": [
                        "by apply: andb_idr => /ahom_inP[_ f1]; apply/fixedSpaceP.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "kHom_lrmorphism",
            "line_nb": 39,
            "steps": [
                {
                    "command": [
                        "by rewrite k1HomE; apply: ahomP.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "k1AHom",
            "line_nb": 42,
            "steps": [
                {
                    "command": [
                        "by rewrite k1HomE ahomWin.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "kHom_poly_id",
            "line_nb": 45,
            "steps": [
                {
                    "command": [
                        "by case/kHomP=> _ idKf /polyOverP Kp; apply/polyP=> i; rewrite coef_map /= idKf.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "kHomSl",
            "line_nb": 48,
            "steps": [
                {
                    "command": [
                        "by rewrite /kHom => sU12 /andP[-> /(subv_trans sU12)].",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "kHomSr",
            "line_nb": 51,
            "steps": [
                {
                    "command": [
                        "by move/subvP=> sV12 /kHomP[/(sub_in2 sV12)fM idKf]; apply/kHomP.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "kHomS",
            "line_nb": 54,
            "steps": [
                {
                    "command": [
                        "by move=> sK12 sV12 /(kHomSl sK12)/(kHomSr sV12).",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "kHom_inv",
            "line_nb": 63,
            "steps": [
                {
                    "command": [
                        "case/kHomP=> fM idKf x Ex.",
                        "VernacExtend",
                        "e00fff71ff314c991514fc71c41a3556702e444a"
                    ]
                },
                {
                    "command": [
                        "case (eqVneq x 0) => [-> | nz_x]; first by rewrite linear0 invr0 linear0.",
                        "VernacExtend",
                        "3763a4b8db689af316a7372b722bb29806ab4fb6"
                    ]
                },
                {
                    "command": [
                        "have fxV: f x * f x^-1 = 1 by rewrite -fM ?rpredV ?divff // idKf ?mem1v.",
                        "VernacExtend",
                        "406cde1174359c53bf162a2a18c4eede395555f9"
                    ]
                },
                {
                    "command": [
                        "have Ufx: f x \\is a GRing.unit by apply/unitrPr; exists (f x^-1).",
                        "VernacExtend",
                        "406cde1174359c53bf162a2a18c4eede395555f9"
                    ]
                },
                {
                    "command": [
                        "by apply: (mulrI Ufx); rewrite divrr.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "kHom_dim",
            "line_nb": 70,
            "steps": [
                {
                    "command": [
                        "move=> homKf; have [fM idKf] := kHomP homKf.",
                        "VernacExtend",
                        "ccd83c252dcbae3d56f3d057fcb8217878b51901"
                    ]
                },
                {
                    "command": [
                        "apply/limg_dim_eq/eqP; rewrite -subv0; apply/subvP=> v.",
                        "VernacExtend",
                        "da24caf87c1bbbad0538b8be68905ec456c78aa7"
                    ]
                },
                {
                    "command": [
                        "rewrite memv_cap memv0 memv_ker => /andP[Ev]; apply: contraLR => nz_v.",
                        "VernacExtend",
                        "2855640502da0a3b2cfdfcd02ea9662c049d9a24"
                    ]
                },
                {
                    "command": [
                        "by rewrite -unitfE unitrE -(kHom_inv homKf) // -fM ?rpredV ?divff ?idKf ?mem1v.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "kHom_is_rmorphism",
            "line_nb": 76,
            "steps": [
                {
                    "command": [
                        "case/kHomP=> fM idKf; split=> [a b|]; first exact: raddfB.",
                        "VernacExtend",
                        "3763a4b8db689af316a7372b722bb29806ab4fb6"
                    ]
                },
                {
                    "command": [
                        "by split=> [a b|] /=; [rewrite /= fM ?subvsP | rewrite algid1 idKf // mem1v].",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "kHom_horner",
            "line_nb": 81,
            "steps": [
                {
                    "command": [
                        "move=> homKf /polyOver_subvs[{p}p -> Ex]; pose fRM := kHom_rmorphism homKf.",
                        "VernacExtend",
                        "fef3c4a8f7fcf70b0824f3cce5fb58f2e0ef07fd"
                    ]
                },
                {
                    "command": [
                        "by rewrite (horner_map _ _ (Subvs Ex)) -[f _](horner_map fRM) map_poly_comp.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "kHom_root",
            "line_nb": 85,
            "steps": [
                {
                    "command": [
                        "by move/kHom_horner=> homKf Ep Ex /rootP px0; rewrite /root -homKf ?px0 ?raddf0.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "kHom_root_id",
            "line_nb": 88,
            "steps": [
                {
                    "command": [
                        "move=> sKE homKf Kp Ex /(kHom_root homKf (polyOverSv sKE Kp) Ex).",
                        "VernacExtend",
                        "b1b2cb7a3a617cba67460b4eca1f04de3c1cc716"
                    ]
                },
                {
                    "command": [
                        "by rewrite (kHom_poly_id homKf).",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "kHomExtendE",
            "line_nb": 100,
            "steps": [
                {
                    "command": [
                        "by rewrite lfunE.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "kHomExtend_id",
            "line_nb": 106,
            "steps": [
                {
                    "command": [
                        "by move=> Ez; rewrite kHomExtendE Fadjoin_polyC ?map_polyC ?hornerC.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "kHomExtend_val",
            "line_nb": 109,
            "steps": [
                {
                    "command": [
                        "have fX: map_poly f 'X = 'X by rewrite (kHom_poly_id homKf) ?polyOverX.",
                        "VernacExtend",
                        "406cde1174359c53bf162a2a18c4eede395555f9"
                    ]
                },
                {
                    "command": [
                        "have [Ex | E'x] := boolP (x \\in E); last first.",
                        "VernacExtend",
                        "3763a4b8db689af316a7372b722bb29806ab4fb6"
                    ]
                },
                {
                    "command": [
                        "by rewrite kHomExtendE Fadjoin_polyX // fX hornerX.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "have:= fPx_y_0; rewrite (minPoly_XsubC Ex) raddfB /= map_polyC fX root_XsubC /=.",
                        "VernacExtend",
                        "aa9d5fbc682ed874cd64b2543ca6c859b978e924"
                    ]
                },
                {
                    "command": [
                        "by rewrite (kHomExtend_id Ex) => /eqP->.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "kHomExtend_poly",
            "line_nb": 116,
            "steps": [
                {
                    "command": [
                        "move=> Ep; rewrite kHomExtendE (Fadjoin_poly_mod x) //.",
                        "VernacExtend",
                        "057edeb0967475c7ea5e8c98c449ddc5613eddc1"
                    ]
                },
                {
                    "command": [
                        "rewrite (divp_eq (map_poly f p) (map_poly f Px)).",
                        "VernacExtend",
                        "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
                    ]
                },
                {
                    "command": [
                        "rewrite !hornerE (rootP fPx_y_0) mulr0 add0r.",
                        "VernacExtend",
                        "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
                    ]
                },
                {
                    "command": [
                        "have [p1 ->] := polyOver_subvs Ep.",
                        "VernacExtend",
                        "406cde1174359c53bf162a2a18c4eede395555f9"
                    ]
                },
                {
                    "command": [
                        "have [Px1 ->] := polyOver_subvs (minPolyOver E x).",
                        "VernacExtend",
                        "406cde1174359c53bf162a2a18c4eede395555f9"
                    ]
                },
                {
                    "command": [
                        "by rewrite -map_modp -!map_poly_comp (map_modp (kHom_rmorphism homKf)).",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "kAutE",
            "line_nb": 134,
            "steps": [
                {
                    "command": [
                        "apply/andP/andP=> [[-> /eqP->] // | [homKf EfE]].",
                        "VernacExtend",
                        "4bd6fa79b17bcd2bfb7af091fb325367a20385d6"
                    ]
                },
                {
                    "command": [
                        "by rewrite eqEdim EfE /= (kHom_dim homKf).",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "kAutS",
            "line_nb": 138,
            "steps": [
                {
                    "command": [
                        "by move=> sU12 /andP[/(kHomSl sU12)homU1f EfE]; apply/andP.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "kHom_kAut_sub",
            "line_nb": 141,
            "steps": [
                {
                    "command": [
                        "by case/andP.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "kAut_eq",
            "line_nb": 144,
            "steps": [
                {
                    "command": [
                        "by move=> sKE eq_fg; rewrite !kAutE (kHom_eq sKE eq_fg) (eq_in_limg eq_fg).",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "kAutfE",
            "line_nb": 147,
            "steps": [
                {
                    "command": [
                        "by rewrite kAutE subvf andbT.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "kAut1E",
            "line_nb": 150,
            "steps": [
                {
                    "command": [
                        "by rewrite kAutE k1AHom.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "kAutf_lker0",
            "line_nb": 153,
            "steps": [
                {
                    "command": [
                        "move/(kHomSl (sub1v _))/kHom_lrmorphism=> fM.",
                        "VernacExtend",
                        "b1b2cb7a3a617cba67460b4eca1f04de3c1cc716"
                    ]
                },
                {
                    "command": [
                        "by apply/lker0P; apply: (fmorph_inj (RMorphism fM)).",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "inv_is_ahom",
            "line_nb": 164,
            "steps": [
                {
                    "command": [
                        "have /ahomP/kHom_lrmorphism hom1f := valP f.",
                        "VernacExtend",
                        "406cde1174359c53bf162a2a18c4eede395555f9"
                    ]
                },
                {
                    "command": [
                        "exact/ahomP/kHom_lrmorphism/inv_kHomf.",
                        "VernacExtend",
                        "ce637ff86bafca5d8359473e8c02af644dcbdc43"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "comp_kHom_img",
            "line_nb": 170,
            "steps": [
                {
                    "command": [
                        "move=> /kHomP[fM idKf] /kHomP[gM idKg]; apply/kHomP; split=> [x y Ex Ey | x Kx].",
                        "VernacExtend",
                        "b7d55d5cc9e609b184db748f6780e12224901e48"
                    ]
                },
                {
                    "command": [
                        "by rewrite !lfunE /= gM // fM ?memv_img.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "by rewrite lfunE /= idKg ?idKf.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "comp_kHom",
            "line_nb": 175,
            "steps": [
                {
                    "command": [
                        "by move/(kHomSr (subvf (g @: E))); apply: comp_kHom_img.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "kHom_extends",
            "line_nb": 178,
            "steps": [
                {
                    "command": [
                        "move=> sKE homEf Kp /sig2_eqW[rs Dp <-{U}].",
                        "VernacExtend",
                        "b1b2cb7a3a617cba67460b4eca1f04de3c1cc716"
                    ]
                },
                {
                    "command": [
                        "set r := rs; have rs_r: all (mem rs) r by apply/allP.",
                        "VernacExtend",
                        "5a669f4ad2118b005921530a069ac8f03fd7f32b"
                    ]
                },
                {
                    "command": [
                        "elim: r rs_r => [_|z r IHr /=/andP[rs_z rs_r]] /= in E f sKE homEf *.",
                        "VernacExtend",
                        "e686a1895f1799b840b76242f931100819a9ad6c"
                    ]
                },
                {
                    "command": [
                        "by exists f; rewrite ?Fadjoin_nil.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "set Ez := <<E; z>>%AS; pose fpEz := map_poly f (minPoly E z).",
                        "VernacExtend",
                        "dda58a04ca4da9adf6d016079f462c4d6ff69ca8"
                    ]
                },
                {
                    "command": [
                        "suffices{IHr} /sigW[y fpEz_y]: exists y, root fpEz y.",
                        "VernacExtend",
                        "290ed488b5562e885aa2cac56f3a69b4faa0eaa6"
                    ]
                },
                {
                    "command": [
                        "have homEz_fz: kHom K Ez (kHomExtend E f z y) by apply: kHomExtendP.",
                        "VernacExtend",
                        "406cde1174359c53bf162a2a18c4eede395555f9"
                    ]
                },
                {
                    "command": [
                        "have sKEz: (K <= Ez)%VS := subv_trans sKE (subv_adjoin E z).",
                        "VernacExtend",
                        "406cde1174359c53bf162a2a18c4eede395555f9"
                    ]
                },
                {
                    "command": [
                        "have [g homGg Dg] := IHr rs_r _ _ sKEz homEz_fz.",
                        "VernacExtend",
                        "406cde1174359c53bf162a2a18c4eede395555f9"
                    ]
                },
                {
                    "command": [
                        "exists g => [|x Ex]; first by rewrite adjoin_cons.",
                        "VernacExtend",
                        "3763a4b8db689af316a7372b722bb29806ab4fb6"
                    ]
                },
                {
                    "command": [
                        "by rewrite -Dg ?subvP_adjoin // kHomExtend_id.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "have [m DfpEz]: {m | fpEz %= \\prod_(w <- mask m rs) ('X - w%:P)}.",
                        "VernacExtend",
                        "406cde1174359c53bf162a2a18c4eede395555f9"
                    ]
                },
                {
                    "command": [
                        "apply: dvdp_prod_XsubC; rewrite -(eqp_dvdr _ Dp) -(kHom_poly_id homEf Kp).",
                        "VernacExtend",
                        "56c014161b39aecfb3c54301c2409dba4e8e1857"
                    ]
                },
                {
                    "command": [
                        "have /polyOver_subvs[q Dq] := polyOverSv sKE Kp.",
                        "VernacExtend",
                        "406cde1174359c53bf162a2a18c4eede395555f9"
                    ]
                },
                {
                    "command": [
                        "have /polyOver_subvs[qz Dqz] := minPolyOver E z.",
                        "VernacExtend",
                        "406cde1174359c53bf162a2a18c4eede395555f9"
                    ]
                },
                {
                    "command": [
                        "rewrite /fpEz Dq Dqz -2?{1}map_poly_comp (dvdp_map (kHom_rmorphism homEf)).",
                        "VernacExtend",
                        "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
                    ]
                },
                {
                    "command": [
                        "rewrite -(dvdp_map [rmorphism of @vsval _ _ E]) -Dqz -Dq.",
                        "VernacExtend",
                        "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
                    ]
                },
                {
                    "command": [
                        "by rewrite minPoly_dvdp ?(polyOverSv sKE) // (eqp_root Dp) root_prod_XsubC.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "exists (mask m rs)`_0; rewrite (eqp_root DfpEz) root_prod_XsubC mem_nth //.",
                        "VernacExtend",
                        "38eb58158e32708cbf22d4f7f6ebbf6b471cd348"
                    ]
                },
                {
                    "command": [
                        "rewrite -ltnS -(size_prod_XsubC _ id) -(eqp_size DfpEz).",
                        "VernacExtend",
                        "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
                    ]
                },
                {
                    "command": [
                        "rewrite size_poly_eq -?lead_coefE ?size_minPoly // (monicP (monic_minPoly E z)).",
                        "VernacExtend",
                        "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
                    ]
                },
                {
                    "command": [
                        "by have [_ idKf] := kHomP homEf; rewrite idKf ?mem1v ?oner_eq0.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "normal_field_splitting",
            "line_nb": 282,
            "steps": [
                {
                    "command": [
                        "move=> normalL; pose r i := sval (sigW (normalL 1%AS (tnth (vbasis {:L}) i))).",
                        "VernacExtend",
                        "fef3c4a8f7fcf70b0824f3cce5fb58f2e0ef07fd"
                    ]
                },
                {
                    "command": [
                        "have sz_r i: size (r i) <= \\dim {:L}.",
                        "VernacExtend",
                        "406cde1174359c53bf162a2a18c4eede395555f9"
                    ]
                },
                {
                    "command": [
                        "rewrite -ltnS -(size_prod_XsubC _ id) /r; case: sigW => _ /= /eqP <-.",
                        "VernacExtend",
                        "712d339e99ee17eb7d5033e19ac614eb3ca6b532"
                    ]
                },
                {
                    "command": [
                        "rewrite size_minPoly ltnS; move: (tnth _ _) => x.",
                        "VernacExtend",
                        "7e529e80bb2879787ee6d9466056f19f0215c721"
                    ]
                },
                {
                    "command": [
                        "by rewrite adjoin_degreeE dimv1 divn1 dimvS // subvf.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "pose mkf (z : L) := 'X - z%:P.",
                        "VernacExtend",
                        "3c5f04de94609049d978298aa02ff35fb35ea7c7"
                    ]
                },
                {
                    "command": [
                        "exists (\\prod_i \\prod_(j < \\dim {:L} | j < size (r i)) mkf (r i)`_j).",
                        "VernacExtend",
                        "691d64bffd7670a5d1d59be0c636980658c0f522"
                    ]
                },
                {
                    "command": [
                        "apply: rpred_prod => i _; rewrite big_ord_narrow /= /r; case: sigW => rs /=.",
                        "VernacExtend",
                        "5caed936835e366e9e533d8f19382dcfedbf86d4"
                    ]
                },
                {
                    "command": [
                        "by rewrite (big_nth 0) big_mkord => /eqP <- {rs}; apply: minPolyOver.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "rewrite pair_big_dep /= -big_filter filter_index_enum -(big_map _ xpredT mkf).",
                        "VernacExtend",
                        "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
                    ]
                },
                {
                    "command": [
                        "set rF := map _ _; exists rF; first exact: eqpxx.",
                        "VernacExtend",
                        "3763a4b8db689af316a7372b722bb29806ab4fb6"
                    ]
                },
                {
                    "command": [
                        "apply/eqP; rewrite eqEsubv subvf -(span_basis (vbasisP {:L})).",
                        "VernacExtend",
                        "56c014161b39aecfb3c54301c2409dba4e8e1857"
                    ]
                },
                {
                    "command": [
                        "apply/span_subvP=> _ /tnthP[i ->]; set x := tnth _ i.",
                        "VernacExtend",
                        "ac591433247162d5294d7c948ab3b309c2d6e368"
                    ]
                },
                {
                    "command": [
                        "have /tnthP[j ->]: x \\in in_tuple (r i).",
                        "VernacExtend",
                        "406cde1174359c53bf162a2a18c4eede395555f9"
                    ]
                },
                {
                    "command": [
                        "by rewrite -root_prod_XsubC /r; case: sigW => _ /=/eqP<-; apply: root_minPoly.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "apply/seqv_sub_adjoin/imageP; rewrite (tnth_nth 0) /in_mem/=.",
                        "VernacExtend",
                        "56c014161b39aecfb3c54301c2409dba4e8e1857"
                    ]
                },
                {
                    "command": [
                        "by exists (i, widen_ord (sz_r i) j) => /=.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "regular_splittingAxiom",
            "line_nb": 301,
            "steps": [
                {
                    "command": [
                        "exists 1; first exact: rpred1.",
                        "VernacExtend",
                        "3763a4b8db689af316a7372b722bb29806ab4fb6"
                    ]
                },
                {
                    "command": [
                        "by exists [::]; [rewrite big_nil eqpxx | rewrite Fadjoin_nil regular_fullv].",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "splittingFieldP",
            "line_nb": 310,
            "steps": [
                {
                    "command": [
                        "by case: L => ? [].",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "splittingPoly",
            "line_nb": 313,
            "steps": [
                {
                    "command": [
                        "pose factF p s := (p \\is a polyOver 1%VS) && (p %= \\prod_(z <- s) ('X - z%:P)).",
                        "VernacExtend",
                        "3c5f04de94609049d978298aa02ff35fb35ea7c7"
                    ]
                },
                {
                    "command": [
                        "suffices [[p rs] /andP[]]: {ps | factF F L ps.1 ps.2 & <<1 & ps.2>> = {:L}}%VS.",
                        "VernacExtend",
                        "290ed488b5562e885aa2cac56f3a69b4faa0eaa6"
                    ]
                },
                {
                    "command": [
                        "by exists p; last exists rs.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "apply: sig2_eqW; have [p F0p [rs splitLp genLrs]] := splittingFieldP.",
                        "VernacExtend",
                        "c574574294cc642b01d157e4c8f21ac2f90e4b5d"
                    ]
                },
                {
                    "command": [
                        "by exists (p, rs); rewrite // /factF F0p splitLp.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "fieldOver_splitting",
            "line_nb": 320,
            "steps": [
                {
                    "command": [
                        "have [p Fp [r Dp defL]] := splittingFieldP; exists p.",
                        "VernacExtend",
                        "b294ed327eaf38a954d3f0d75d32d08637b8cedd"
                    ]
                },
                {
                    "command": [
                        "apply/polyOverP=> j; rewrite trivial_fieldOver.",
                        "VernacExtend",
                        "56c014161b39aecfb3c54301c2409dba4e8e1857"
                    ]
                },
                {
                    "command": [
                        "by rewrite (subvP (sub1v E)) ?(polyOverP Fp).",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "exists r => //; apply/vspaceP=> x; rewrite memvf.",
                        "VernacExtend",
                        "01f04d3f5bba3b876eb4ec7b1c8f26d2e2cced77"
                    ]
                },
                {
                    "command": [
                        "have [L0 [_ _ defL0]] := @aspaceOverP _ _ E <<1 & r : seq (fieldOver E)>>.",
                        "VernacExtend",
                        "406cde1174359c53bf162a2a18c4eede395555f9"
                    ]
                },
                {
                    "command": [
                        "rewrite defL0; have: x \\in <<1 & r>>%VS by rewrite defL (@memvf _ L).",
                        "VernacExtend",
                        "7be6e3cf9ccbce33486c4b5c6fefdf7a9ad6e52b"
                    ]
                },
                {
                    "command": [
                        "apply: subvP; apply/Fadjoin_seqP; rewrite -memvE -defL0 mem1v.",
                        "VernacExtend",
                        "7d4450169cd8610cf3ff90cd2eeb2f84258ab13d"
                    ]
                },
                {
                    "command": [
                        "by split=> // y r_y; rewrite -defL0 seqv_sub_adjoin.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "enum_AEnd",
            "line_nb": 331,
            "steps": [
                {
                    "command": [
                        "pose isAutL (s : seq 'AEnd(L)) (f : 'AEnd(L)) := kHom 1 {:L} f = (f \\in s).",
                        "VernacExtend",
                        "3c5f04de94609049d978298aa02ff35fb35ea7c7"
                    ]
                },
                {
                    "command": [
                        "suffices [kAutL in_kAutL] : {kAutL : seq 'AEnd(L) | forall f, isAutL kAutL f}.",
                        "VernacExtend",
                        "290ed488b5562e885aa2cac56f3a69b4faa0eaa6"
                    ]
                },
                {
                    "command": [
                        "by exists kAutL => f; rewrite -in_kAutL k1AHom.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "have [p Kp /sig2_eqW[rs Dp defL]] := splittingPoly.",
                        "VernacExtend",
                        "406cde1174359c53bf162a2a18c4eede395555f9"
                    ]
                },
                {
                    "command": [
                        "do [rewrite {}/isAutL -(erefl (asval 1)); set r := rs; set E := 1%AS] in defL *.",
                        "VernacExtend",
                        "2ed5ae5c7a1513e882f170a2462d7a7c3c1ca435"
                    ]
                },
                {
                    "command": [
                        "have [sKE rs_r]: (1 <= E)%VS /\\ all (mem rs) r by split; last apply/allP.",
                        "VernacExtend",
                        "406cde1174359c53bf162a2a18c4eede395555f9"
                    ]
                },
                {
                    "command": [
                        "elim: r rs_r => [_|z r IHr /=/andP[rs_z rs_r]] /= in (E) sKE defL *.",
                        "VernacExtend",
                        "e686a1895f1799b840b76242f931100819a9ad6c"
                    ]
                },
                {
                    "command": [
                        "rewrite Fadjoin_nil in defL; exists [tuple \\1%AF] => f; rewrite defL inE.",
                        "VernacExtend",
                        "7da1e44fc70370c532a4f9a52f0578f62ffee13c"
                    ]
                },
                {
                    "command": [
                        "apply/idP/eqP=> [/kAHomP f1 | ->]; last exact: kHom1.",
                        "VernacExtend",
                        "3763a4b8db689af316a7372b722bb29806ab4fb6"
                    ]
                },
                {
                    "command": [
                        "by apply/val_inj/lfunP=> x; rewrite id_lfunE f1 ?memvf.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "do [set Ez := <<E; z>>%VS; rewrite adjoin_cons] in defL.",
                        "VernacExtend",
                        "2ed5ae5c7a1513e882f170a2462d7a7c3c1ca435"
                    ]
                },
                {
                    "command": [
                        "have sEEz: (E <= Ez)%VS := subv_adjoin E z; have sKEz := subv_trans sKE sEEz.",
                        "VernacExtend",
                        "6e9d14df7d32ea0bf863301df3f6cb2d4e1b8e96"
                    ]
                },
                {
                    "command": [
                        "have{IHr} [homEz DhomEz] := IHr rs_r _ sKEz defL.",
                        "VernacExtend",
                        "406cde1174359c53bf162a2a18c4eede395555f9"
                    ]
                },
                {
                    "command": [
                        "have Ep: p \\in polyOver E := polyOverSv sKE Kp.",
                        "VernacExtend",
                        "406cde1174359c53bf162a2a18c4eede395555f9"
                    ]
                },
                {
                    "command": [
                        "have{rs_z} pz0: root p z by rewrite (eqp_root Dp) root_prod_XsubC.",
                        "VernacExtend",
                        "406cde1174359c53bf162a2a18c4eede395555f9"
                    ]
                },
                {
                    "command": [
                        "pose pEz := minPoly E z; pose n := \\dim_E Ez.",
                        "VernacExtend",
                        "311b833fadff89b2f7ed817d3cd7cb6971c96a1e"
                    ]
                },
                {
                    "command": [
                        "have{pz0} [rz DpEz]: {rz : n.-tuple L | pEz %= \\prod_(w <- rz) ('X - w%:P)}.",
                        "VernacExtend",
                        "406cde1174359c53bf162a2a18c4eede395555f9"
                    ]
                },
                {
                    "command": [
                        "have /dvdp_prod_XsubC[m DpEz]: pEz %| \\prod_(w <- rs) ('X - w%:P).",
                        "VernacExtend",
                        "406cde1174359c53bf162a2a18c4eede395555f9"
                    ]
                },
                {
                    "command": [
                        "by rewrite -(eqp_dvdr _ Dp) minPoly_dvdp ?(polyOverSv sKE).",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "suffices sz_rz: size (mask m rs) == n by exists (Tuple sz_rz).",
                        "VernacExtend",
                        "290ed488b5562e885aa2cac56f3a69b4faa0eaa6"
                    ]
                },
                {
                    "command": [
                        "rewrite -[n]adjoin_degreeE -eqSS -size_minPoly.",
                        "VernacExtend",
                        "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
                    ]
                },
                {
                    "command": [
                        "by rewrite (eqp_size DpEz) size_prod_XsubC.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "have fEz i (y := tnth rz i): {f : 'AEnd(L) | kHom E {:L} f & f z = y}.",
                        "VernacExtend",
                        "406cde1174359c53bf162a2a18c4eede395555f9"
                    ]
                },
                {
                    "command": [
                        "have homEfz: kHom E Ez (kHomExtend E \\1 z y).",
                        "VernacExtend",
                        "406cde1174359c53bf162a2a18c4eede395555f9"
                    ]
                },
                {
                    "command": [
                        "rewrite kHomExtendP ?kHom1 // lfun1_poly.",
                        "VernacExtend",
                        "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
                    ]
                },
                {
                    "command": [
                        "by rewrite (eqp_root DpEz) -/rz root_prod_XsubC mem_tnth.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "have splitFp: splittingFieldFor Ez p {:L}.",
                        "VernacExtend",
                        "406cde1174359c53bf162a2a18c4eede395555f9"
                    ]
                },
                {
                    "command": [
                        "exists rs => //; apply/eqP; rewrite eqEsubv subvf -defL adjoin_seqSr //.",
                        "VernacExtend",
                        "01f04d3f5bba3b876eb4ec7b1c8f26d2e2cced77"
                    ]
                },
                {
                    "command": [
                        "exact/allP.",
                        "VernacExtend",
                        "ce637ff86bafca5d8359473e8c02af644dcbdc43"
                    ]
                },
                {
                    "command": [
                        "have [f homLf Df] := kHom_extends sEEz homEfz Ep splitFp.",
                        "VernacExtend",
                        "406cde1174359c53bf162a2a18c4eede395555f9"
                    ]
                },
                {
                    "command": [
                        "have [ahomf _] := andP homLf; exists (AHom ahomf) => //.",
                        "VernacExtend",
                        "8431fc4d2460f7908baa11892c1b26797a3f17b8"
                    ]
                },
                {
                    "command": [
                        "rewrite -Df ?memv_adjoin ?(kHomExtend_val (kHom1 E E)) // lfun1_poly.",
                        "VernacExtend",
                        "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
                    ]
                },
                {
                    "command": [
                        "by rewrite (eqp_root DpEz) root_prod_XsubC mem_tnth.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "exists [seq (s2val (fEz i) \\o f)%AF| i <- enum 'I_n, f <- homEz] => f.",
                        "VernacExtend",
                        "3c42b53d0efc26db114b00541ac5e7fcb29e6aeb"
                    ]
                },
                {
                    "command": [
                        "apply/idP/allpairsP => [homLf | [[i g] [_ Hg ->]] /=]; last first.",
                        "VernacExtend",
                        "3763a4b8db689af316a7372b722bb29806ab4fb6"
                    ]
                },
                {
                    "command": [
                        "by case: (fEz i) => fi /= /comp_kHom->; rewrite ?(kHomSl sEEz) ?DhomEz.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "have /tnthP[i Dfz]: f z \\in rz.",
                        "VernacExtend",
                        "406cde1174359c53bf162a2a18c4eede395555f9"
                    ]
                },
                {
                    "command": [
                        "rewrite memtE /= -root_prod_XsubC -(eqp_root DpEz).",
                        "VernacExtend",
                        "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
                    ]
                },
                {
                    "command": [
                        "by rewrite (kHom_root_id _ homLf) ?memvf ?subvf ?minPolyOver ?root_minPoly.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "case Dfi: (fEz i) => [fi homLfi fi_z]; have kerfi0 := kAutf_lker0 homLfi.",
                        "VernacExtend",
                        "c6460972b7febd45d9a49b3c1ce4f3fe36b53169"
                    ]
                },
                {
                    "command": [
                        "set fj := (fi ^-1 \\o f)%AF; suffices Hfj : fj \\in homEz.",
                        "VernacExtend",
                        "8000712a77b7ffa46123cc21d292aebe6ac07c15"
                    ]
                },
                {
                    "command": [
                        "exists (i, fj) => //=; rewrite mem_enum inE Hfj; split => //.",
                        "VernacExtend",
                        "a86f095f54b646acf73a0c2ed01262e62203b9e4"
                    ]
                },
                {
                    "command": [
                        "by apply/val_inj; rewrite {}Dfi /= (lker0_compVKf kerfi0).",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "rewrite -DhomEz; apply/kAHomP => _ /Fadjoin_polyP[q Eq ->].",
                        "VernacExtend",
                        "634a7639ed2fb7caf62757f84400927f5829b7d5"
                    ]
                },
                {
                    "command": [
                        "have homLfj: kHom E {:L} fj := comp_kHom (inv_kHomf homLfi) homLf.",
                        "VernacExtend",
                        "406cde1174359c53bf162a2a18c4eede395555f9"
                    ]
                },
                {
                    "command": [
                        "have /kHom_lrmorphism fjM := kHomSl (sub1v _) homLfj.",
                        "VernacExtend",
                        "406cde1174359c53bf162a2a18c4eede395555f9"
                    ]
                },
                {
                    "command": [
                        "rewrite -[fj _](horner_map (RMorphism fjM)) (kHom_poly_id homLfj) //=.",
                        "VernacExtend",
                        "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
                    ]
                },
                {
                    "command": [
                        "by rewrite lfunE /= Dfz -fi_z lker0_lfunK.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "kHom_to_AEnd",
            "line_nb": 491,
            "steps": [
                {
                    "command": [
                        "move=> homKf; have{homKf} [homFf sFE] := (kHomSl (sub1v K) homKf, sub1v E).",
                        "VernacExtend",
                        "ccd83c252dcbae3d56f3d057fcb8217878b51901"
                    ]
                },
                {
                    "command": [
                        "have [p Fp /(splittingFieldForS sFE (subvf E))splitLp] := splittingPoly.",
                        "VernacExtend",
                        "406cde1174359c53bf162a2a18c4eede395555f9"
                    ]
                },
                {
                    "command": [
                        "have [g0 homLg0 eq_fg] := kHom_extends sFE homFf Fp splitLp.",
                        "VernacExtend",
                        "406cde1174359c53bf162a2a18c4eede395555f9"
                    ]
                },
                {
                    "command": [
                        "by apply: exist (Sub g0 _) _ => //; apply/ahomP/kHom_lrmorphism.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "inAEndK",
            "line_nb": 503,
            "steps": [
                {
                    "command": [
                        "by [].",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "comp_AEndA",
            "line_nb": 513,
            "steps": [
                {
                    "command": [
                        "by move=> f g h; apply: val_inj; symmetry; apply: comp_lfunA.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "comp_AEnd1l",
            "line_nb": 516,
            "steps": [
                {
                    "command": [
                        "by move=> f; apply/val_inj/comp_lfun1r.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "comp_AEndK",
            "line_nb": 519,
            "steps": [
                {
                    "command": [
                        "by move=> f; apply/val_inj; rewrite /= lker0_compfV ?AEnd_lker0.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "kAEnd_group_set",
            "line_nb": 527,
            "steps": [
                {
                    "command": [
                        "apply/group_setP; split=> [|f g]; first by rewrite inE /kAut kHom1 lim1g eqxx.",
                        "VernacExtend",
                        "3763a4b8db689af316a7372b722bb29806ab4fb6"
                    ]
                },
                {
                    "command": [
                        "rewrite !inE !kAutE => /andP[homKf EfE] /andP[/(kHomSr EfE)homKg EgE].",
                        "VernacExtend",
                        "3c42b53d0efc26db114b00541ac5e7fcb29e6aeb"
                    ]
                },
                {
                    "command": [
                        "by rewrite (comp_kHom_img homKg homKf) limg_comp (subv_trans _ EgE) ?limgS.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "kAEnd_norm",
            "line_nb": 534,
            "steps": [
                {
                    "command": [
                        "apply/subsetP=> x; rewrite -groupV 2!in_set => /andP[_ /eqP ExE].",
                        "VernacExtend",
                        "5fce7e5361004176d6b434b36b4623c7387f70bb"
                    ]
                },
                {
                    "command": [
                        "apply/subsetP=> _ /imsetP[y homEy ->]; rewrite !in_set !kAutfE in homEy *.",
                        "VernacExtend",
                        "56c014161b39aecfb3c54301c2409dba4e8e1857"
                    ]
                },
                {
                    "command": [
                        "apply/kAHomP=> u Eu; have idEy := kAHomP homEy; rewrite -ExE in idEy.",
                        "VernacExtend",
                        "498dcf9c10fa6ece1d0d916281d2a6b32e23441c"
                    ]
                },
                {
                    "command": [
                        "by rewrite !lfunE /= lfunE /= idEy ?memv_img // lker0_lfunVK ?AEnd_lker0.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "mem_kAut_coset",
            "line_nb": 540,
            "steps": [
                {
                    "command": [
                        "move=> autEg; rewrite val_coset ?rcoset_refl //.",
                        "VernacExtend",
                        "057edeb0967475c7ea5e8c98c449ddc5613eddc1"
                    ]
                },
                {
                    "command": [
                        "by rewrite (subsetP (kAEnd_norm K E)) // inE.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "aut_mem_eqP",
            "line_nb": 544,
            "steps": [
                {
                    "command": [
                        "move=> x_f y_g; rewrite -(coset_mem x_f) -(coset_mem y_g).",
                        "VernacExtend",
                        "057edeb0967475c7ea5e8c98c449ddc5613eddc1"
                    ]
                },
                {
                    "command": [
                        "have [Nf Ng] := (subsetP (coset_norm x) f x_f, subsetP (coset_norm y) g y_g).",
                        "VernacExtend",
                        "406cde1174359c53bf162a2a18c4eede395555f9"
                    ]
                },
                {
                    "command": [
                        "rewrite (sameP eqP (rcoset_kercosetP Nf Ng)) mem_rcoset inE kAutfE.",
                        "VernacExtend",
                        "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
                    ]
                },
                {
                    "command": [
                        "apply: (iffP kAHomP) => idEfg u Eu.",
                        "VernacExtend",
                        "4bd6fa79b17bcd2bfb7af091fb325367a20385d6"
                    ]
                },
                {
                    "command": [
                        "by rewrite -(mulgKV g f) lfunE /= idEfg.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "by rewrite lfunE /= idEfg // lker0_lfunK ?AEnd_lker0.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "gal_sgvalK",
            "line_nb": 563,
            "steps": [
                {
                    "command": [
                        "by case.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "gal_oneP",
            "line_nb": 578,
            "steps": [
                {
                    "command": [
                        "by move=> x; apply/gal_sgval_inj/mul1g.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "gal_invP",
            "line_nb": 581,
            "steps": [
                {
                    "command": [
                        "by move=> x; apply/gal_sgval_inj/mulVg.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "gal_mulP",
            "line_nb": 584,
            "steps": [
                {
                    "command": [
                        "by move=> x y z; apply/gal_sgval_inj/mulgA.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "gal_reprK",
            "line_nb": 596,
            "steps": [
                {
                    "command": [
                        "by case=> x; rewrite /gal coset_reprK sgvalK.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "gal_repr_inj",
            "line_nb": 599,
            "steps": [
                {
                    "command": [
                        "exact: can_inj gal_reprK.",
                        "VernacExtend",
                        "ce637ff86bafca5d8359473e8c02af644dcbdc43"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "gal_AEnd",
            "line_nb": 602,
            "steps": [
                {
                    "command": [
                        "rewrite /gal_repr; case/gal_sgval: x => _ /=/morphimP[g Ng autEg ->].",
                        "VernacExtend",
                        "712d339e99ee17eb7d5033e19ac614eb3ca6b532"
                    ]
                },
                {
                    "command": [
                        "rewrite val_coset //=; case: repr_rcosetP => f; rewrite groupMr // !inE kAut1E.",
                        "VernacExtend",
                        "1dc1cec635c64f0cc3ec64ea6e4d6c7d5b8f81f6"
                    ]
                },
                {
                    "command": [
                        "by rewrite kAutE -andbA => /and3P[_ /fixedSpace_limg-> _].",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "gal_eqP",
            "line_nb": 609,
            "steps": [
                {
                    "command": [
                        "by rewrite -{1}(subfield_closed E); apply: aut_mem_eqP; apply: mem_repr_coset.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "eq_galP",
            "line_nb": 617,
            "steps": [
                {
                    "command": [
                        "move=> EfE EgE.",
                        "VernacExtend",
                        "b1b2cb7a3a617cba67460b4eca1f04de3c1cc716"
                    ]
                },
                {
                    "command": [
                        "by apply: (iffP gal_eqP) => Dfg a Ea; have:= Dfg a Ea; rewrite !{1}galK.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "limg_gal",
            "line_nb": 621,
            "steps": [
                {
                    "command": [
                        "by have:= gal_AEnd x; rewrite inE subfield_closed => /andP[_ /eqP].",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "memv_gal",
            "line_nb": 624,
            "steps": [
                {
                    "command": [
                        "by move/(memv_img x); rewrite limg_gal.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "gal_id",
            "line_nb": 627,
            "steps": [
                {
                    "command": [
                        "by rewrite /gal_repr repr_coset1 id_lfunE.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "gal_cap",
            "line_nb": 643,
            "steps": [
                {
                    "command": [
                        "by rewrite /galoisG -capvA capvv.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "gal_kAut",
            "line_nb": 646,
            "steps": [
                {
                    "command": [
                        "move=> sKE; apply/morphimP/idP=> /= [[g EgE KautEg ->{x}] | KautEx].",
                        "VernacExtend",
                        "d6ebf3361f380a12d5c2c9bbb7ea363132c48b36"
                    ]
                },
                {
                    "command": [
                        "rewrite genGid !inE kAut1E /= subfield_closed (capv_idPl sKE) in KautEg EgE.",
                        "VernacExtend",
                        "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
                    ]
                },
                {
                    "command": [
                        "by apply: etrans KautEg; apply/(kAut_eq sKE); apply: galK.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "exists (x : 'AEnd(L)); rewrite ?gal_reprK ?gal_AEnd //.",
                        "VernacExtend",
                        "c0df5facb2acbafba755d40abe6c58e7beaa6d0c"
                    ]
                },
                {
                    "command": [
                        "by rewrite (capv_idPl sKE) mem_gen ?inE.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "gal_kHom",
            "line_nb": 653,
            "steps": [
                {
                    "command": [
                        "by move/gal_kAut->; rewrite /kAut limg_gal eqxx andbT.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "kAut_to_gal",
            "line_nb": 656,
            "steps": [
                {
                    "command": [
                        "case/andP=> homKf EfE; have [g Df] := kHom_to_AEnd homKf.",
                        "VernacExtend",
                        "c6460972b7febd45d9a49b3c1ce4f3fe36b53169"
                    ]
                },
                {
                    "command": [
                        "have{homKf EfE} autEg: kAut (K :&: E) E g.",
                        "VernacExtend",
                        "406cde1174359c53bf162a2a18c4eede395555f9"
                    ]
                },
                {
                    "command": [
                        "rewrite /kAut -(kHom_eq (capvSr _ _) Df) (kHomSl (capvSl _ _) homKf) /=.",
                        "VernacExtend",
                        "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
                    ]
                },
                {
                    "command": [
                        "by rewrite -(eq_in_limg Df).",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "have FautEg := kAutS (sub1v _) autEg.",
                        "VernacExtend",
                        "406cde1174359c53bf162a2a18c4eede395555f9"
                    ]
                },
                {
                    "command": [
                        "exists (gal E g) => [|a Ea]; last by rewrite {f}Df // galK // -kAut1E.",
                        "VernacExtend",
                        "3763a4b8db689af316a7372b722bb29806ab4fb6"
                    ]
                },
                {
                    "command": [
                        "by rewrite mem_morphim /= ?subfield_closed ?genGid ?inE.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "fixed_gal",
            "line_nb": 665,
            "steps": [
                {
                    "command": [
                        "by move/gal_kHom=> -> /kAHomP idKx /idKx.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "fixedPoly_gal",
            "line_nb": 668,
            "steps": [
                {
                    "command": [
                        "move=> sKE galEKx /polyOverP Kp; apply/polyP => i.",
                        "VernacExtend",
                        "d6ebf3361f380a12d5c2c9bbb7ea363132c48b36"
                    ]
                },
                {
                    "command": [
                        "by rewrite coef_map /= (fixed_gal sKE).",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "root_minPoly_gal",
            "line_nb": 672,
            "steps": [
                {
                    "command": [
                        "move=> sKE galEKx Ea; have homKx: kHom K E x by rewrite -gal_kHom.",
                        "VernacExtend",
                        "ccd83c252dcbae3d56f3d057fcb8217878b51901"
                    ]
                },
                {
                    "command": [
                        "have K_Pa := minPolyOver K a; rewrite -[minPoly K a](fixedPoly_gal _ galEKx) //.",
                        "VernacExtend",
                        "aa9d5fbc682ed874cd64b2543ca6c859b978e924"
                    ]
                },
                {
                    "command": [
                        "by rewrite (kHom_root homKx) ?root_minPoly // (polyOverS (subvP sKE)).",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "gal_adjoin_eq",
            "line_nb": 678,
            "steps": [
                {
                    "command": [
                        "move=> galKa_x galKa_y; apply/idP/eqP=> [/eqP-> // | eq_xy_a].",
                        "VernacExtend",
                        "d6ebf3361f380a12d5c2c9bbb7ea363132c48b36"
                    ]
                },
                {
                    "command": [
                        "apply/gal_eqP => _ /Fadjoin_polyP[p Kp ->].",
                        "VernacExtend",
                        "4bd6fa79b17bcd2bfb7af091fb325367a20385d6"
                    ]
                },
                {
                    "command": [
                        "by rewrite -!horner_map !(fixedPoly_gal (subv_adjoin K a)) //= eq_xy_a.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "galS",
            "line_nb": 683,
            "steps": [
                {
                    "command": [
                        "rewrite gal_cap (gal_cap K E) => sKM; apply/subsetP=> x.",
                        "VernacExtend",
                        "2855640502da0a3b2cfdfcd02ea9662c049d9a24"
                    ]
                },
                {
                    "command": [
                        "by rewrite !gal_kAut ?capvSr //; apply: kAutS; apply: capvS.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "gal_conjg",
            "line_nb": 687,
            "steps": [
                {
                    "command": [
                        "without loss sKE: K / (K <= E)%VS.",
                        "VernacExtend",
                        "87d5e7b04148ee8f2e4efcc847e0dfadae0aa4cb"
                    ]
                },
                {
                    "command": [
                        "move=> IH_K; rewrite gal_cap {}IH_K ?capvSr //.",
                        "VernacExtend",
                        "057edeb0967475c7ea5e8c98c449ddc5613eddc1"
                    ]
                },
                {
                    "command": [
                        "transitivity 'Gal(E / x @: K :&: x @: E); last by rewrite limg_gal -gal_cap.",
                        "VernacExtend",
                        "3763a4b8db689af316a7372b722bb29806ab4fb6"
                    ]
                },
                {
                    "command": [
                        "congr 'Gal(E / _); apply/eqP; rewrite eqEsubv limg_cap; apply/subvP=> a.",
                        "VernacExtend",
                        "c6b7aa72429a782754e6d262b1341e10833e475d"
                    ]
                },
                {
                    "command": [
                        "rewrite memv_cap => /andP[/memv_imgP[b Kb ->] /memv_imgP[c Ec] eq_bc].",
                        "VernacExtend",
                        "3c42b53d0efc26db114b00541ac5e7fcb29e6aeb"
                    ]
                },
                {
                    "command": [
                        "by rewrite memv_img // memv_cap Kb (lker0P (AEnd_lker0 _) _ _ eq_bc).",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "wlog suffices IHx: x K sKE / 'Gal(E / K) :^ x \\subset 'Gal(E / x @: K).",
                        "VernacExtend",
                        "348aa27e7c84ea4ca2ac06b8a3b3db24e74b6ad7"
                    ]
                },
                {
                    "command": [
                        "apply/eqP; rewrite eqEsubset IHx // -sub_conjgV (subset_trans (IHx _ _ _)) //.",
                        "VernacExtend",
                        "56c014161b39aecfb3c54301c2409dba4e8e1857"
                    ]
                },
                {
                    "command": [
                        "by apply/subvP=> _ /memv_imgP[a Ka ->]; rewrite memv_gal ?(subvP sKE).",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "rewrite -limg_comp (etrans (eq_in_limg _) (lim1g _)) // => a /(subvP sKE)Ka.",
                        "VernacExtend",
                        "3c42b53d0efc26db114b00541ac5e7fcb29e6aeb"
                    ]
                },
                {
                    "command": [
                        "by rewrite !lfunE /= -galM // mulgV gal_id.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "apply/subsetP=> _ /imsetP[y galEy ->]; rewrite gal_cap gal_kHom ?capvSr //=.",
                        "VernacExtend",
                        "56c014161b39aecfb3c54301c2409dba4e8e1857"
                    ]
                },
                {
                    "command": [
                        "apply/kAHomP=> _ /memv_capP[/memv_imgP[a Ka ->] _]; have Ea := subvP sKE a Ka.",
                        "VernacExtend",
                        "c574574294cc642b01d157e4c8f21ac2f90e4b5d"
                    ]
                },
                {
                    "command": [
                        "by rewrite -galM // -conjgC galM // (fixed_gal sKE galEy).",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "fixedFieldP",
            "line_nb": 704,
            "steps": [
                {
                    "command": [
                        "by rewrite memv_cap => ->; apply: (iffP subv_bigcapP) => cAa x /cAa/fixedSpaceP.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "mem_fixedFieldP",
            "line_nb": 707,
            "steps": [
                {
                    "command": [
                        "by move=> fixAa; have [Ea _] := memv_capP fixAa; have:= fixedFieldP Ea fixAa.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "fixedField_is_aspace",
            "line_nb": 710,
            "steps": [
                {
                    "command": [
                        "rewrite /fixedField; elim/big_rec: _ {1}E => [|x K _ IH_K] M.",
                        "VernacExtend",
                        "44a8e3b453c9376c468b4e3e0046f5ac33e11d6d"
                    ]
                },
                {
                    "command": [
                        "exact: (valP (M :&: _)%AS).",
                        "VernacExtend",
                        "ce637ff86bafca5d8359473e8c02af644dcbdc43"
                    ]
                },
                {
                    "command": [
                        "by rewrite capvA IH_K.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "fixedField_bound",
            "line_nb": 716,
            "steps": [
                {
                    "command": [
                        "exact: capvSl.",
                        "VernacExtend",
                        "ce637ff86bafca5d8359473e8c02af644dcbdc43"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "fixedFieldS",
            "line_nb": 719,
            "steps": [
                {
                    "command": [
                        "move/subsetP=> sAB; apply/subvP => a /mem_fixedFieldP[Ea cBa].",
                        "VernacExtend",
                        "d6ebf3361f380a12d5c2c9bbb7ea363132c48b36"
                    ]
                },
                {
                    "command": [
                        "by apply/fixedFieldP; last apply: sub_in1 cBa.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "galois_connection_subv",
            "line_nb": 723,
            "steps": [
                {
                    "command": [
                        "move=> sKE; apply/subvP => a Ka; have Ea := subvP sKE a Ka.",
                        "VernacExtend",
                        "fcbc4db6275a8d44907e8ed4b44d2f7f279ee662"
                    ]
                },
                {
                    "command": [
                        "by apply/fixedFieldP=> // x galEx; apply: (fixed_gal sKE).",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "galois_connection_subset",
            "line_nb": 727,
            "steps": [
                {
                    "command": [
                        "apply/subsetP => x Ax; rewrite gal_kAut ?capvSl // kAutE limg_gal subvv andbT.",
                        "VernacExtend",
                        "56c014161b39aecfb3c54301c2409dba4e8e1857"
                    ]
                },
                {
                    "command": [
                        "by apply/kAHomP=> a /mem_fixedFieldP[_ ->].",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "galois_connection",
            "line_nb": 731,
            "steps": [
                {
                    "command": [
                        "move=> sKE; apply/idP/idP => [/fixedFieldS | /(galS E)].",
                        "VernacExtend",
                        "d6ebf3361f380a12d5c2c9bbb7ea363132c48b36"
                    ]
                },
                {
                    "command": [
                        "by apply: subv_trans; apply galois_connection_subv.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "by apply: subset_trans; apply: galois_connection_subset.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "galTrace_is_additive",
            "line_nb": 740,
            "steps": [
                {
                    "command": [
                        "by move=> a b /=; rewrite -sumrB; apply: eq_bigr => x _; rewrite rmorphB.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "galNorm1",
            "line_nb": 744,
            "steps": [
                {
                    "command": [
                        "by apply: big1 => x _; rewrite rmorph1.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "galNormM",
            "line_nb": 747,
            "steps": [
                {
                    "command": [
                        "by move=> a b /=; rewrite -big_split; apply: eq_bigr => x _; rewrite rmorphM.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "galNormV",
            "line_nb": 750,
            "steps": [
                {
                    "command": [
                        "by move=> a /=; rewrite -prodfV; apply: eq_bigr => x _; rewrite fmorphV.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "galNormX",
            "line_nb": 753,
            "steps": [
                {
                    "command": [
                        "move=> a; elim: n => [|n IHn]; first by apply: galNorm1.",
                        "VernacExtend",
                        "3763a4b8db689af316a7372b722bb29806ab4fb6"
                    ]
                },
                {
                    "command": [
                        "by rewrite !exprS galNormM IHn.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "galNorm_prod",
            "line_nb": 757,
            "steps": [
                {
                    "command": [
                        "exact: (big_morph _ galNormM galNorm1).",
                        "VernacExtend",
                        "ce637ff86bafca5d8359473e8c02af644dcbdc43"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "galNorm0",
            "line_nb": 760,
            "steps": [
                {
                    "command": [
                        "by rewrite /galNorm (bigD1 1%g) ?group1 // rmorph0 /= mul0r.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "galNorm_eq0",
            "line_nb": 763,
            "steps": [
                {
                    "command": [
                        "apply/idP/eqP=> [/prodf_eq0[x _] | ->]; last by rewrite galNorm0.",
                        "VernacExtend",
                        "3763a4b8db689af316a7372b722bb29806ab4fb6"
                    ]
                },
                {
                    "command": [
                        "by rewrite fmorph_eq0 => /eqP.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "galTrace_gal",
            "line_nb": 776,
            "steps": [
                {
                    "command": [
                        "move=> Ea galEx; rewrite {2}/galTrace (reindex_inj (mulgI x)).",
                        "VernacExtend",
                        "057edeb0967475c7ea5e8c98c449ddc5613eddc1"
                    ]
                },
                {
                    "command": [
                        "by apply: eq_big => [b | b _]; rewrite ?groupMl // galM ?lfunE.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "galNorm_gal",
            "line_nb": 786,
            "steps": [
                {
                    "command": [
                        "move=> Ea galEx; rewrite {2}/galNorm (reindex_inj (mulgI x)).",
                        "VernacExtend",
                        "057edeb0967475c7ea5e8c98c449ddc5613eddc1"
                    ]
                },
                {
                    "command": [
                        "by apply: eq_big => [b | b _]; rewrite ?groupMl // galM ?lfunE.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "normalField_kAut",
            "line_nb": 792,
            "steps": [
                {
                    "command": [
                        "case/andP=> sKM sME nKM /kAut_to_gal[x galEx /(sub_in1 (subvP sME))Df].",
                        "VernacExtend",
                        "e00fff71ff314c991514fc71c41a3556702e444a"
                    ]
                },
                {
                    "command": [
                        "have sKE := subv_trans sKM sME; rewrite gal_kHom // in galEx.",
                        "VernacExtend",
                        "aa9d5fbc682ed874cd64b2543ca6c859b978e924"
                    ]
                },
                {
                    "command": [
                        "rewrite (kAut_eq sKM Df) /kAut (kHomSr sME) //= (forall_inP nKM) // inE.",
                        "VernacExtend",
                        "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
                    ]
                },
                {
                    "command": [
                        "by rewrite kAutfE; apply/kAHomP; apply: (kAHomP galEx).",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "normalFieldP",
            "line_nb": 798,
            "steps": [
                {
                    "command": [
                        "apply: (iffP eqfun_inP) => [nKE a Ea | nKE x]; last first.",
                        "VernacExtend",
                        "3763a4b8db689af316a7372b722bb29806ab4fb6"
                    ]
                },
                {
                    "command": [
                        "rewrite inE kAutfE => homKx; suffices: kAut K E x by case/andP=> _ /eqP.",
                        "VernacExtend",
                        "25fa34a680ad6e8061330521759b0d5387eb169c"
                    ]
                },
                {
                    "command": [
                        "rewrite kAutE (kHomSr (subvf E)) //=; apply/subvP=> _ /memv_imgP[a Ea ->].",
                        "VernacExtend",
                        "634a7639ed2fb7caf62757f84400927f5829b7d5"
                    ]
                },
                {
                    "command": [
                        "have [r /allP/=srE splitEa] := nKE a Ea.",
                        "VernacExtend",
                        "406cde1174359c53bf162a2a18c4eede395555f9"
                    ]
                },
                {
                    "command": [
                        "rewrite srE // -root_prod_XsubC -splitEa.",
                        "VernacExtend",
                        "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
                    ]
                },
                {
                    "command": [
                        "by rewrite -(kHom_poly_id homKx (minPolyOver K a)) fmorph_root root_minPoly.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "have [r /eqP splitKa] := splitting_field_normal K a.",
                        "VernacExtend",
                        "406cde1174359c53bf162a2a18c4eede395555f9"
                    ]
                },
                {
                    "command": [
                        "exists r => //; apply/allP => b; rewrite -root_prod_XsubC -splitKa => pKa_b_0.",
                        "VernacExtend",
                        "075260d0817e08a7c1e422f0e14d9d7d1b649424"
                    ]
                },
                {
                    "command": [
                        "pose y := kHomExtend K \\1 a b; have [hom1K lf1p] := (kHom1 K K, lfun1_poly).",
                        "VernacExtend",
                        "c09d1274557abc8857ed64eb3450db2da906c185"
                    ]
                },
                {
                    "command": [
                        "have homKy: kHom K <<K; a>> y by apply/kHomExtendP; rewrite ?lf1p.",
                        "VernacExtend",
                        "406cde1174359c53bf162a2a18c4eede395555f9"
                    ]
                },
                {
                    "command": [
                        "have [[g Dy] [_ idKy]] := (kHom_to_AEnd homKy, kHomP homKy).",
                        "VernacExtend",
                        "406cde1174359c53bf162a2a18c4eede395555f9"
                    ]
                },
                {
                    "command": [
                        "have <-: g a = b by rewrite -Dy ?memv_adjoin // (kHomExtend_val hom1K) ?lf1p.",
                        "VernacExtend",
                        "406cde1174359c53bf162a2a18c4eede395555f9"
                    ]
                },
                {
                    "command": [
                        "suffices /nKE <-: g \\in kAEndf K by apply: memv_img.",
                        "VernacExtend",
                        "290ed488b5562e885aa2cac56f3a69b4faa0eaa6"
                    ]
                },
                {
                    "command": [
                        "by rewrite inE kAutfE; apply/kAHomP=> c Kc; rewrite -Dy ?subvP_adjoin ?idKy.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "normalFieldf",
            "line_nb": 814,
            "steps": [
                {
                    "command": [
                        "apply/normalFieldP=> a _; have [r /eqP->] := splitting_field_normal K a.",
                        "VernacExtend",
                        "c574574294cc642b01d157e4c8f21ac2f90e4b5d"
                    ]
                },
                {
                    "command": [
                        "by exists r => //; apply/allP=> b; rewrite /= memvf.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "normalFieldS",
            "line_nb": 818,
            "steps": [
                {
                    "command": [
                        "move=> sKM /normalFieldP nKE; apply/normalFieldP=> a Ea.",
                        "VernacExtend",
                        "d6ebf3361f380a12d5c2c9bbb7ea363132c48b36"
                    ]
                },
                {
                    "command": [
                        "have [r /allP Er splitKa] := nKE a Ea.",
                        "VernacExtend",
                        "406cde1174359c53bf162a2a18c4eede395555f9"
                    ]
                },
                {
                    "command": [
                        "have /dvdp_prod_XsubC[m splitMa]: minPoly M a %| \\prod_(b <- r) ('X - b%:P).",
                        "VernacExtend",
                        "406cde1174359c53bf162a2a18c4eede395555f9"
                    ]
                },
                {
                    "command": [
                        "by rewrite -splitKa minPolyS.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "exists (mask m r); first by apply/allP=> b /mem_mask/Er.",
                        "VernacExtend",
                        "3763a4b8db689af316a7372b722bb29806ab4fb6"
                    ]
                },
                {
                    "command": [
                        "by apply/eqP; rewrite -eqp_monic ?monic_prod_XsubC ?monic_minPoly.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "splitting_normalField",
            "line_nb": 826,
            "steps": [
                {
                    "command": [
                        "move=> sKE; apply: (iffP idP) => [nKE| [p Kp [rs Dp defE]]]; last first.",
                        "VernacExtend",
                        "3763a4b8db689af316a7372b722bb29806ab4fb6"
                    ]
                },
                {
                    "command": [
                        "apply/forall_inP=> g; rewrite inE kAutE => /andP[homKg _].",
                        "VernacExtend",
                        "5fce7e5361004176d6b434b36b4623c7387f70bb"
                    ]
                },
                {
                    "command": [
                        "rewrite -dimv_leqif_eq ?limg_dim_eq ?(eqP (AEnd_lker0 g)) ?capv0 //.",
                        "VernacExtend",
                        "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
                    ]
                },
                {
                    "command": [
                        "rewrite -defE aimg_adjoin_seq; have [_ /fixedSpace_limg->] := andP homKg.",
                        "VernacExtend",
                        "7be6e3cf9ccbce33486c4b5c6fefdf7a9ad6e52b"
                    ]
                },
                {
                    "command": [
                        "apply/adjoin_seqSr=> _ /mapP[a rs_a ->].",
                        "VernacExtend",
                        "4bd6fa79b17bcd2bfb7af091fb325367a20385d6"
                    ]
                },
                {
                    "command": [
                        "rewrite -!root_prod_XsubC -!(eqp_root Dp) in rs_a *.",
                        "VernacExtend",
                        "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
                    ]
                },
                {
                    "command": [
                        "by apply: kHom_root_id homKg Kp _ rs_a; rewrite ?subvf ?memvf.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "pose splitK a r := minPoly K a = \\prod_(b <- r) ('X - b%:P).",
                        "VernacExtend",
                        "3c5f04de94609049d978298aa02ff35fb35ea7c7"
                    ]
                },
                {
                    "command": [
                        "have{nKE} rK_ a: {r | a \\in E -> all (mem E) r /\\ splitK a r}.",
                        "VernacExtend",
                        "406cde1174359c53bf162a2a18c4eede395555f9"
                    ]
                },
                {
                    "command": [
                        "case Ea: (a \\in E); last by exists [::].",
                        "VernacExtend",
                        "3763a4b8db689af316a7372b722bb29806ab4fb6"
                    ]
                },
                {
                    "command": [
                        "by have /sig2_eqW[r] := normalFieldP _ _ nKE a Ea; exists r.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "have sXE := basis_mem (vbasisP E); set X : seq L := vbasis E in sXE.",
                        "VernacExtend",
                        "81881a093b2294c76be3b432fbe83612064d7bc9"
                    ]
                },
                {
                    "command": [
                        "exists (\\prod_(a <- X) minPoly K a).",
                        "VernacExtend",
                        "5a290c069e87c1e5839e4363edce0a2971528fe5"
                    ]
                },
                {
                    "command": [
                        "by apply: rpred_prod => a _; apply: minPolyOver.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "exists (flatten [seq (sval (rK_ a)) | a <- X]).",
                        "VernacExtend",
                        "7c1b2fb3147a0447d3ddfd6a8be067831626e847"
                    ]
                },
                {
                    "command": [
                        "move/allP: sXE; elim: X => [|a X IHX]; first by rewrite !big_nil eqpxx.",
                        "VernacExtend",
                        "3763a4b8db689af316a7372b722bb29806ab4fb6"
                    ]
                },
                {
                    "command": [
                        "rewrite big_cons /= big_cat /= => /andP[Ea sXE].",
                        "VernacExtend",
                        "3c42b53d0efc26db114b00541ac5e7fcb29e6aeb"
                    ]
                },
                {
                    "command": [
                        "by case: (rK_ a) => /= r [] // _ <-; apply/eqp_mull/IHX.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "apply/eqP; rewrite eqEsubv; apply/andP; split.",
                        "VernacExtend",
                        "c6080ad6de433b4aac1c6523f45011ac63415378"
                    ]
                },
                {
                    "command": [
                        "apply/Fadjoin_seqP; split=> // b /flatten_mapP[a /sXE Ea].",
                        "VernacExtend",
                        "5fce7e5361004176d6b434b36b4623c7387f70bb"
                    ]
                },
                {
                    "command": [
                        "by apply/allP; case: rK_ => r /= [].",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "rewrite -{1}(span_basis (vbasisP E)); apply/span_subvP=> a Xa.",
                        "VernacExtend",
                        "634a7639ed2fb7caf62757f84400927f5829b7d5"
                    ]
                },
                {
                    "command": [
                        "apply/seqv_sub_adjoin/flatten_mapP; exists a => //; rewrite -root_prod_XsubC.",
                        "VernacExtend",
                        "945ac9810113bf938ceefee9ae4e6b3a8be91952"
                    ]
                },
                {
                    "command": [
                        "by case: rK_ => /= r [| _ <-]; rewrite ?sXE ?root_minPoly.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "kHom_to_gal",
            "line_nb": 852,
            "steps": [
                {
                    "command": [
                        "case/andP=> /subvP sKM /subvP sME nKE KhomMf.",
                        "VernacExtend",
                        "e00fff71ff314c991514fc71c41a3556702e444a"
                    ]
                },
                {
                    "command": [
                        "have [[g Df] [_ idKf]] := (kHom_to_AEnd KhomMf, kHomP KhomMf).",
                        "VernacExtend",
                        "406cde1174359c53bf162a2a18c4eede395555f9"
                    ]
                },
                {
                    "command": [
                        "suffices /kAut_to_gal[x galEx Dg]: kAut K E g.",
                        "VernacExtend",
                        "290ed488b5562e885aa2cac56f3a69b4faa0eaa6"
                    ]
                },
                {
                    "command": [
                        "by exists x => //= a Ma; rewrite Df // Dg ?sME.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "have homKg: kHom K {:L} g by apply/kAHomP=> a Ka; rewrite -Df ?sKM ?idKf.",
                        "VernacExtend",
                        "406cde1174359c53bf162a2a18c4eede395555f9"
                    ]
                },
                {
                    "command": [
                        "by rewrite /kAut (kHomSr (subvf _)) // (forall_inP nKE) // inE kAutfE.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "normalField_root_minPoly",
            "line_nb": 860,
            "steps": [
                {
                    "command": [
                        "move=> sKE nKE Ea pKa_b_0; pose f := kHomExtend K \\1 a b.",
                        "VernacExtend",
                        "fef3c4a8f7fcf70b0824f3cce5fb58f2e0ef07fd"
                    ]
                },
                {
                    "command": [
                        "have homKa_f: kHom K <<K; a>> f.",
                        "VernacExtend",
                        "406cde1174359c53bf162a2a18c4eede395555f9"
                    ]
                },
                {
                    "command": [
                        "by apply: kHomExtendP; rewrite ?kHom1 ?lfun1_poly.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "have sK_Ka_E: (K <= <<K; a>> <= E)%VS.",
                        "VernacExtend",
                        "406cde1174359c53bf162a2a18c4eede395555f9"
                    ]
                },
                {
                    "command": [
                        "by rewrite subv_adjoin; apply/FadjoinP; rewrite sKE Ea.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "have [x galEx Df] := kHom_to_gal sK_Ka_E nKE homKa_f; exists x => //.",
                        "VernacExtend",
                        "8431fc4d2460f7908baa11892c1b26797a3f17b8"
                    ]
                },
                {
                    "command": [
                        "by rewrite -Df ?memv_adjoin // (kHomExtend_val (kHom1 K K)) ?lfun1_poly.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "normalField_factors",
            "line_nb": 870,
            "steps": [
                {
                    "command": [
                        "move=> sKE; apply: (iffP idP) => [nKE a Ea | nKE]; last first.",
                        "VernacExtend",
                        "3763a4b8db689af316a7372b722bb29806ab4fb6"
                    ]
                },
                {
                    "command": [
                        "apply/normalFieldP=> a Ea; have [r _ ->] := nKE a Ea.",
                        "VernacExtend",
                        "c574574294cc642b01d157e4c8f21ac2f90e4b5d"
                    ]
                },
                {
                    "command": [
                        "exists [seq x a | x : gal_of E <- r]; last by rewrite big_map.",
                        "VernacExtend",
                        "3763a4b8db689af316a7372b722bb29806ab4fb6"
                    ]
                },
                {
                    "command": [
                        "by rewrite all_map; apply/allP=> b _; apply: memv_gal.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "have [r Er splitKa] := normalFieldP nKE a Ea.",
                        "VernacExtend",
                        "406cde1174359c53bf162a2a18c4eede395555f9"
                    ]
                },
                {
                    "command": [
                        "pose f b := [pick x in 'Gal(E / K) | x a == b].",
                        "VernacExtend",
                        "3c5f04de94609049d978298aa02ff35fb35ea7c7"
                    ]
                },
                {
                    "command": [
                        "exists (pmap f r).",
                        "VernacExtend",
                        "4627adc015647ef79589b14842bec88d05e0c841"
                    ]
                },
                {
                    "command": [
                        "apply/subsetP=> x; rewrite mem_pmap /f => /mapP[b _].",
                        "VernacExtend",
                        "5fce7e5361004176d6b434b36b4623c7387f70bb"
                    ]
                },
                {
                    "command": [
                        "by case: (pickP _) => // c /andP[galEc _] [->].",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "rewrite splitKa; have{splitKa}: all (root (minPoly K a)) r.",
                        "VernacExtend",
                        "7be6e3cf9ccbce33486c4b5c6fefdf7a9ad6e52b"
                    ]
                },
                {
                    "command": [
                        "by apply/allP => b; rewrite splitKa root_prod_XsubC.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "elim: r Er => /= [|b r IHr]; first by rewrite !big_nil.",
                        "VernacExtend",
                        "3763a4b8db689af316a7372b722bb29806ab4fb6"
                    ]
                },
                {
                    "command": [
                        "case/andP=> Eb Er /andP[pKa_b_0 /(IHr Er){IHr Er}IHr].",
                        "VernacExtend",
                        "e00fff71ff314c991514fc71c41a3556702e444a"
                    ]
                },
                {
                    "command": [
                        "have [x galE /eqP xa_b] := normalField_root_minPoly sKE nKE Ea pKa_b_0.",
                        "VernacExtend",
                        "406cde1174359c53bf162a2a18c4eede395555f9"
                    ]
                },
                {
                    "command": [
                        "rewrite /(f b); case: (pickP _) => [y /andP[_ /eqP<-]|/(_ x)/andP[]//].",
                        "VernacExtend",
                        "712d339e99ee17eb7d5033e19ac614eb3ca6b532"
                    ]
                },
                {
                    "command": [
                        "by rewrite !big_cons IHr.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "galoisS",
            "line_nb": 889,
            "steps": [
                {
                    "command": [
                        "case/andP=> sKM sME /and3P[_ sepUV nUV].",
                        "VernacExtend",
                        "e00fff71ff314c991514fc71c41a3556702e444a"
                    ]
                },
                {
                    "command": [
                        "by rewrite /galois sME (separableSl sKM) ?(normalFieldS sKM).",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "galois_factors",
            "line_nb": 914,
            "steps": [
                {
                    "command": [
                        "move=> sKE; apply: (iffP and3P) => [[_ sepKE nKE] a Ea | galKE].",
                        "VernacExtend",
                        "d6ebf3361f380a12d5c2c9bbb7ea363132c48b36"
                    ]
                },
                {
                    "command": [
                        "have [r galEr splitEa] := normalField_factors sKE nKE a Ea.",
                        "VernacExtend",
                        "406cde1174359c53bf162a2a18c4eede395555f9"
                    ]
                },
                {
                    "command": [
                        "exists r; rewrite /= -separable_prod_XsubC !big_map -splitEa.",
                        "VernacExtend",
                        "1ca7a87a37c23ea32530ef02cff423d0e8f27854"
                    ]
                },
                {
                    "command": [
                        "by split=> //; apply: separableP Ea.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "split=> //.",
                        "VernacExtend",
                        "3c42b53d0efc26db114b00541ac5e7fcb29e6aeb"
                    ]
                },
                {
                    "command": [
                        "apply/separableP => a /galKE[r [_ Ur_a splitKa]].",
                        "VernacExtend",
                        "4bd6fa79b17bcd2bfb7af091fb325367a20385d6"
                    ]
                },
                {
                    "command": [
                        "by rewrite /separable_element splitKa separable_prod_XsubC.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "apply/(normalField_factors sKE)=> a /galKE[r [galEr _ ->]].",
                        "VernacExtend",
                        "4bd6fa79b17bcd2bfb7af091fb325367a20385d6"
                    ]
                },
                {
                    "command": [
                        "by rewrite big_map; exists r.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "splitting_galoisField",
            "line_nb": 925,
            "steps": [
                {
                    "command": [
                        "apply: (iffP and3P) => [[sKE sepKE nKE]|[p [Kp sep_p [r Dp defE]]]].",
                        "VernacExtend",
                        "4bd6fa79b17bcd2bfb7af091fb325367a20385d6"
                    ]
                },
                {
                    "command": [
                        "rewrite (eq_adjoin_separable_generator sepKE) // in nKE *.",
                        "VernacExtend",
                        "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
                    ]
                },
                {
                    "command": [
                        "set a := separable_generator K E in nKE *; exists (minPoly K a).",
                        "VernacExtend",
                        "85249ebf1d6bc8c670eac4e5172f92356ae1040d"
                    ]
                },
                {
                    "command": [
                        "split; first 1 [exact: minPolyOver | exact/separable_generatorP].",
                        "VernacExtend",
                        "3763a4b8db689af316a7372b722bb29806ab4fb6"
                    ]
                },
                {
                    "command": [
                        "have [r /= /allP Er splitKa] := normalFieldP nKE a (memv_adjoin _ _).",
                        "VernacExtend",
                        "406cde1174359c53bf162a2a18c4eede395555f9"
                    ]
                },
                {
                    "command": [
                        "exists r; first by rewrite splitKa eqpxx.",
                        "VernacExtend",
                        "3763a4b8db689af316a7372b722bb29806ab4fb6"
                    ]
                },
                {
                    "command": [
                        "apply/eqP; rewrite eqEsubv; apply/andP; split.",
                        "VernacExtend",
                        "c6080ad6de433b4aac1c6523f45011ac63415378"
                    ]
                },
                {
                    "command": [
                        "by apply/Fadjoin_seqP; split => //; apply: subv_adjoin.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "apply/FadjoinP; split; first exact: subv_adjoin_seq.",
                        "VernacExtend",
                        "3763a4b8db689af316a7372b722bb29806ab4fb6"
                    ]
                },
                {
                    "command": [
                        "by rewrite seqv_sub_adjoin // -root_prod_XsubC -splitKa root_minPoly.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "have sKE: (K <= E)%VS by rewrite -defE subv_adjoin_seq.",
                        "VernacExtend",
                        "406cde1174359c53bf162a2a18c4eede395555f9"
                    ]
                },
                {
                    "command": [
                        "split=> //; last by apply/splitting_normalField=> //; exists p; last exists r.",
                        "VernacExtend",
                        "3763a4b8db689af316a7372b722bb29806ab4fb6"
                    ]
                },
                {
                    "command": [
                        "rewrite -defE; apply/separable_Fadjoin_seq/allP=> a r_a.",
                        "VernacExtend",
                        "634a7639ed2fb7caf62757f84400927f5829b7d5"
                    ]
                },
                {
                    "command": [
                        "by apply/separable_elementP; exists p; rewrite (eqp_root Dp) root_prod_XsubC.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "mem_galTrace",
            "line_nb": 977,
            "steps": [
                {
                    "command": [
                        "by move/galois_fixedField => {2}<- /galTrace_fixedField.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "mem_galNorm",
            "line_nb": 980,
            "steps": [
                {
                    "command": [
                        "by move/galois_fixedField=> {2}<- /galNorm_fixedField.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "gal_independent_contra",
            "line_nb": 983,
            "steps": [
                {
                    "command": [
                        "elim: {P}_.+1 c_ x {-2}P (ltnSn #|P|) => // n IHn c_ x P lePn Px nz_cx.",
                        "VernacExtend",
                        "e686a1895f1799b840b76242f931100819a9ad6c"
                    ]
                },
                {
                    "command": [
                        "rewrite ltnS (cardD1x Px) in lePn; move/IHn: lePn => {n IHn}/=IH_P.",
                        "VernacExtend",
                        "7e529e80bb2879787ee6d9466056f19f0215c721"
                    ]
                },
                {
                    "command": [
                        "have [/eqfun_inP c_Px'_0 | ] := boolP [forall (y | P y && (y != x)), c_ y == 0].",
                        "VernacExtend",
                        "406cde1174359c53bf162a2a18c4eede395555f9"
                    ]
                },
                {
                    "command": [
                        "exists 1; rewrite ?mem1v // (bigD1 x Px) /= rmorph1 mulr1.",
                        "VernacExtend",
                        "49fcc6d4959963de57b5fe7e58ee3f03d60693de"
                    ]
                },
                {
                    "command": [
                        "by rewrite big1 ?addr0 // => y /c_Px'_0->; rewrite mul0r.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "rewrite negb_forall_in => /exists_inP[y Px'y nz_cy].",
                        "VernacExtend",
                        "3c42b53d0efc26db114b00541ac5e7fcb29e6aeb"
                    ]
                },
                {
                    "command": [
                        "have [Py /gal_eqP/eqlfun_inP/subvPn[a Ea]] := andP Px'y.",
                        "VernacExtend",
                        "406cde1174359c53bf162a2a18c4eede395555f9"
                    ]
                },
                {
                    "command": [
                        "rewrite memv_ker !lfun_simp => nz_yxa; pose d_ y := c_ y * (y a - x a).",
                        "VernacExtend",
                        "9d8fbc7ebaadb48200c542591ceec3e0f555a812"
                    ]
                },
                {
                    "command": [
                        "have /IH_P[//|b Eb nz_sumb]: d_ y != 0 by rewrite mulf_neq0.",
                        "VernacExtend",
                        "406cde1174359c53bf162a2a18c4eede395555f9"
                    ]
                },
                {
                    "command": [
                        "have [sumb_0|] := eqVneq (\\sum_(z | P z) c_ z * z b) 0; last by exists b.",
                        "VernacExtend",
                        "3763a4b8db689af316a7372b722bb29806ab4fb6"
                    ]
                },
                {
                    "command": [
                        "exists (a * b); first exact: rpredM.",
                        "VernacExtend",
                        "3763a4b8db689af316a7372b722bb29806ab4fb6"
                    ]
                },
                {
                    "command": [
                        "rewrite -subr_eq0 -[z in _ - z](mulr0 (x a)) -[in z in _ - z]sumb_0.",
                        "VernacExtend",
                        "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
                    ]
                },
                {
                    "command": [
                        "rewrite mulr_sumr -sumrB (bigD1 x Px) rmorphM /= mulrCA subrr add0r.",
                        "VernacExtend",
                        "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
                    ]
                },
                {
                    "command": [
                        "congr (_ != 0): nz_sumb; apply: eq_bigr => z _.",
                        "VernacExtend",
                        "385739dd8a4f73703d3828c61e1780a276bfaa31"
                    ]
                },
                {
                    "command": [
                        "by rewrite mulrCA rmorphM -mulrBr -mulrBl mulrA.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "gal_independent",
            "line_nb": 1000,
            "steps": [
                {
                    "command": [
                        "move=> sum_cP_0 x Px; apply/eqP/idPn=> /(gal_independent_contra Px)[a Ea].",
                        "VernacExtend",
                        "d6ebf3361f380a12d5c2c9bbb7ea363132c48b36"
                    ]
                },
                {
                    "command": [
                        "by rewrite sum_cP_0 ?eqxx.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "dim_fixedField",
            "line_nb": 1107,
            "steps": [
                {
                    "command": [
                        "have [w [_ nzw] [_ Edirect /(_ (groupP G))defE]] := gal_matrix G.",
                        "VernacExtend",
                        "406cde1174359c53bf162a2a18c4eede395555f9"
                    ]
                },
                {
                    "command": [
                        "set n := #|G|; set m := \\dim (fixedField G); rewrite -defE (directvP Edirect).",
                        "VernacExtend",
                        "321844593e706cf8b09ceb5a7a294d03e09ebfd6"
                    ]
                },
                {
                    "command": [
                        "rewrite -[n]card_ord -(@mulnK #|'I_n| m) ?adim_gt0 //= -sum_nat_const.",
                        "VernacExtend",
                        "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
                    ]
                },
                {
                    "command": [
                        "congr (_ %/ _)%N; apply: eq_bigr => i _.",
                        "VernacExtend",
                        "385739dd8a4f73703d3828c61e1780a276bfaa31"
                    ]
                },
                {
                    "command": [
                        "by rewrite dim_cosetv ?(memPn nzw) ?mem_tnth.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "gal_generated",
            "line_nb": 1125,
            "steps": [
                {
                    "command": [
                        "apply/eqP; rewrite eqEsubset gen_subG galois_connection_subset.",
                        "VernacExtend",
                        "56c014161b39aecfb3c54301c2409dba4e8e1857"
                    ]
                },
                {
                    "command": [
                        "by rewrite -[<<A>>]gal_fixedField galS // fixedFieldS // subset_gen.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "fixedField_galois",
            "line_nb": 1129,
            "steps": [
                {
                    "command": [
                        "have: galois (fixedField <<A>>) E.",
                        "VernacExtend",
                        "406cde1174359c53bf162a2a18c4eede395555f9"
                    ]
                },
                {
                    "command": [
                        "by apply/galois_fixedField; rewrite gal_fixedField.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "by apply: galoisS; rewrite capvSl fixedFieldS // subset_gen.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "normalField_galois",
            "line_nb": 1140,
            "steps": [
                {
                    "command": [
                        "have [[sKM sME] [_ sepKE nKE]] := (andP sKME, and3P galKE).",
                        "VernacExtend",
                        "406cde1174359c53bf162a2a18c4eede395555f9"
                    ]
                },
                {
                    "command": [
                        "by rewrite /galois sKM (separableSr sME).",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "normalField_cast_eq",
            "line_nb": 1145,
            "steps": [
                {
                    "command": [
                        "have [sKM sME] := andP sKME; have sKE := subv_trans sKM sME.",
                        "VernacExtend",
                        "6e9d14df7d32ea0bf863301df3f6cb2d4e1b8e96"
                    ]
                },
                {
                    "command": [
                        "rewrite gal_kAut // => /(normalField_kAut sKME nKM).",
                        "VernacExtend",
                        "3c42b53d0efc26db114b00541ac5e7fcb29e6aeb"
                    ]
                },
                {
                    "command": [
                        "by rewrite kAutE => /andP[_ /galK].",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "normalField_castM",
            "line_nb": 1150,
            "steps": [
                {
                    "command": [
                        "move=> x y galEx galEy /=; apply/eqP/gal_eqP => a Ma.",
                        "VernacExtend",
                        "d6ebf3361f380a12d5c2c9bbb7ea363132c48b36"
                    ]
                },
                {
                    "command": [
                        "have Ea: a \\in E by have [_ /subvP->] := andP sKME.",
                        "VernacExtend",
                        "406cde1174359c53bf162a2a18c4eede395555f9"
                    ]
                },
                {
                    "command": [
                        "rewrite normalField_cast_eq ?groupM ?galM //=.",
                        "VernacExtend",
                        "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
                    ]
                },
                {
                    "command": [
                        "by rewrite normalField_cast_eq ?memv_gal // normalField_cast_eq.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "normalField_ker",
            "line_nb": 1157,
            "steps": [
                {
                    "command": [
                        "have [sKM sME] := andP sKME.",
                        "VernacExtend",
                        "406cde1174359c53bf162a2a18c4eede395555f9"
                    ]
                },
                {
                    "command": [
                        "apply/setP=> x; apply/idP/idP=> [kerMx | galEMx].",
                        "VernacExtend",
                        "8d9dae45eeb3a769b8a865cef8ae476451f63802"
                    ]
                },
                {
                    "command": [
                        "rewrite gal_kHom //; apply/kAHomP=> a Ma.",
                        "VernacExtend",
                        "634a7639ed2fb7caf62757f84400927f5829b7d5"
                    ]
                },
                {
                    "command": [
                        "by rewrite -normalField_cast_eq ?(dom_ker kerMx) // (mker kerMx) gal_id.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "have galEM: x \\in 'Gal(E / K) := subsetP (galS E sKM) x galEMx.",
                        "VernacExtend",
                        "406cde1174359c53bf162a2a18c4eede395555f9"
                    ]
                },
                {
                    "command": [
                        "apply/kerP=> //; apply/eqP/gal_eqP=> a Ma.",
                        "VernacExtend",
                        "8d9dae45eeb3a769b8a865cef8ae476451f63802"
                    ]
                },
                {
                    "command": [
                        "by rewrite normalField_cast_eq // gal_id (fixed_gal sME).",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "normalField_normal",
            "line_nb": 1166,
            "steps": [
                {
                    "command": [
                        "by rewrite -normalField_ker ker_normal.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "normalField_img",
            "line_nb": 1169,
            "steps": [
                {
                    "command": [
                        "have [[sKM sME] [sKE _ nKE]] := (andP sKME, and3P galKE).",
                        "VernacExtend",
                        "406cde1174359c53bf162a2a18c4eede395555f9"
                    ]
                },
                {
                    "command": [
                        "apply/setP=> x; apply/idP/idP=> [/morphimP[{x}x galEx _ ->] | galMx].",
                        "VernacExtend",
                        "8d9dae45eeb3a769b8a865cef8ae476451f63802"
                    ]
                },
                {
                    "command": [
                        "rewrite gal_kHom //; apply/kAHomP=> a Ka; have Ma := subvP sKM a Ka.",
                        "VernacExtend",
                        "c6ff91ceee22c8fcb242ad6d0dc8ed6693b7fb7e"
                    ]
                },
                {
                    "command": [
                        "by rewrite normalField_cast_eq // (fixed_gal sKE).",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "have /(kHom_to_gal sKME nKE)[y galEy eq_xy]: kHom K M x by rewrite -gal_kHom.",
                        "VernacExtend",
                        "406cde1174359c53bf162a2a18c4eede395555f9"
                    ]
                },
                {
                    "command": [
                        "apply/morphimP; exists y => //; apply/eqP/gal_eqP => a Ha.",
                        "VernacExtend",
                        "09ff90107c05f6bf4f743acb58a064bacfe65029"
                    ]
                },
                {
                    "command": [
                        "by rewrite normalField_cast_eq // eq_xy.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "normalField_isog",
            "line_nb": 1185,
            "steps": [
                {
                    "command": [
                        "by rewrite -normalField_ker -normalField_img first_isog.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        }
    ]
}