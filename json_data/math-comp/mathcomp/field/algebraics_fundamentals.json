{
    "filename": "mathcomp/field/algebraics_fundamentals.v",
    "coq_project": "math-comp",
    "vernac_cmds": [
        [
            "Require Import mathcomp.ssreflect.ssreflect.",
            "VernacRequire",
            "85e251063dc2b5a9653f7bb76dcd176ed36b42a9"
        ],
        [
            "From mathcomp Require Import ssrbool ssrfun ssrnat eqtype seq choice div fintype.",
            "VernacRequire",
            "299bf65aebd48608662725edeaf327504e031619"
        ],
        [
            "From mathcomp Require Import path tuple bigop finset prime ssralg poly polydiv mxpoly.",
            "VernacRequire",
            "41ebb61493a14ccc8170387a032670dc7d383b06"
        ],
        [
            "From mathcomp Require Import countalg closed_field ssrnum ssrint rat intdiv.",
            "VernacRequire",
            "b8b0f28836ef2c8a8f21e65829253baf4a7ffeb6"
        ],
        [
            "From mathcomp Require Import fingroup finalg zmodp cyclic pgroup sylow.",
            "VernacRequire",
            "0ca8d41716498ed7ee90f2667f49e40b746f0eee"
        ],
        [
            "From mathcomp Require Import vector falgebra fieldext separable galois.",
            "VernacRequire",
            "8b4d4f5fefd01e52a2eeb326c1de24512ce94b8a"
        ],
        [
            "Set Implicit Arguments.",
            "VernacSetOption",
            "9e84ff8896f028601d8aded48c1d4aebe60aa584"
        ],
        [
            "Unset Strict Implicit.",
            "VernacUnsetOption",
            "2842adaf6959318f2042805935c46f513bdc0348"
        ],
        [
            "Unset Printing Implicit Defensive.",
            "VernacUnsetOption",
            "444e5f0be4b25d9b1fd556943a447ec10046d151"
        ],
        [
            "Import GroupScope GRing.Theory Num.Theory.",
            "VernacImport",
            "8d87fd9194cd0dee18ad3305b14d36d18908f225"
        ],
        [
            "Local Open Scope ring_scope.",
            "VernacOpenCloseScope",
            "fb9da4a291533574d328be8c8a69d90a14641928"
        ],
        [
            "Local Notation \"p ^ f\" := (map_poly f p) : ring_scope.",
            "VernacNotation",
            "eff2b61e775764510ade185749b1aece38411816"
        ],
        [
            "Local Notation \"p ^@\" := (p ^ in_alg _) (at level 2, format \"p ^@\"): ring_scope.",
            "VernacNotation",
            "41b0829702ea72f942cbd32b49899653a9e50920"
        ],
        [
            "Local Notation \"<< E ; u >>\" := <<E; u>>%VS.",
            "VernacNotation",
            "d0eeef91b336cb4500bc28adb04fee2d491391b5"
        ],
        [
            "Local Notation Qmorphism C := {rmorphism rat -> C}.",
            "VernacSyntacticDefinition",
            "9a8405dfd64cbd8f54382a4c106cfec1a2033743"
        ],
        [
            "Lemma rat_algebraic_archimedean (C : numFieldType) (QtoC : Qmorphism C) : integralRange QtoC -> Num.archimedean_axiom C.",
            "VernacStartTheoremProof",
            "f70a1c98b59bd2ffa0227805068ef269e0c995a2"
        ],
        [
            "move=> algC x.",
            "VernacExtend",
            "b1b2cb7a3a617cba67460b4eca1f04de3c1cc716"
        ],
        [
            "without loss x_ge0: x / 0 <= x by rewrite -normr_id; apply; apply: normr_ge0.",
            "VernacExtend",
            "87d5e7b04148ee8f2e4efcc847e0dfadae0aa4cb"
        ],
        [
            "have [-> | nz_x] := eqVneq x 0; first by exists 1%N; rewrite normr0.",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "have [p mon_p px0] := algC x; exists (\\sum_(j < size p) `|numq p`_j|)%N.",
            "VernacExtend",
            "aa6483a43139e56e09d22f88e3436461395a69d5"
        ],
        [
            "rewrite ger0_norm // real_ltrNge ?rpred_nat ?ger0_real //.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "apply: contraL px0 => lb_x; rewrite rootE gtr_eqF // horner_coef size_map_poly.",
            "VernacExtend",
            "56c014161b39aecfb3c54301c2409dba4e8e1857"
        ],
        [
            "have x_gt0 k: 0 < x ^+ k by rewrite exprn_gt0 // ltr_def nz_x.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "move: lb_x; rewrite polySpred ?monic_neq0 // !big_ord_recr coef_map /=.",
            "VernacExtend",
            "057edeb0967475c7ea5e8c98c449ddc5613eddc1"
        ],
        [
            "rewrite -lead_coefE (monicP mon_p) natrD rmorph1 mul1r => lb_x.",
            "VernacExtend",
            "3c42b53d0efc26db114b00541ac5e7fcb29e6aeb"
        ],
        [
            "case: _.-1 (lb_x) => [|n]; first by rewrite !big_ord0 !add0r ltr01.",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "rewrite -ltr_subl_addl add0r -(ler_pmul2r (x_gt0 n)) -exprS.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "apply: ltr_le_trans; rewrite mulrDl mul1r ltr_spaddr // -sumrN.",
            "VernacExtend",
            "56c014161b39aecfb3c54301c2409dba4e8e1857"
        ],
        [
            "rewrite natr_sum mulr_suml ler_sum // => j _.",
            "VernacExtend",
            "3c42b53d0efc26db114b00541ac5e7fcb29e6aeb"
        ],
        [
            "rewrite coef_map /= fmorph_eq_rat (ler_trans (real_ler_norm _)) //.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "by rewrite rpredN rpredM ?rpred_rat ?rpredX // ger0_real.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "rewrite normrN normrM ler_pmul //=.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "rewrite normf_div -!intr_norm -!abszE ler_pimulr ?ler0n //.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "by rewrite invf_le1 ?ler1n ?ltr0n ?absz_gt0 ?denq_eq0.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "rewrite normrX ger0_norm ?(ltrW x_gt0) // ler_weexpn2l ?leq_ord //.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "by rewrite (ler_trans _ lb_x) // -natrD addn1 ler1n.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Definition decidable_embedding sT T (f : sT -> T) := forall y, decidable (exists x, y = f x).",
            "VernacDefinition",
            "74a96c6e72805802d8a604188118816eb7983f23"
        ],
        [
            "Lemma rat_algebraic_decidable (C : fieldType) (QtoC : Qmorphism C) : integralRange QtoC -> decidable_embedding QtoC.",
            "VernacStartTheoremProof",
            "5250a246d633be7b03711c186ad00969daf603d5"
        ],
        [
            "have QtoCinj: injective QtoC by apply: fmorph_inj.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "pose ZtoQ : int -> rat := intr; pose ZtoC : int -> C := intr.",
            "VernacExtend",
            "311b833fadff89b2f7ed817d3cd7cb6971c96a1e"
        ],
        [
            "have ZtoQinj: injective ZtoQ by apply: intr_inj.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "have defZtoC: ZtoC =1 QtoC \\o ZtoQ by move=> m; rewrite /= rmorph_int.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "move=> algC x; have /sig2_eqW[q mon_q qx0] := algC x; pose d := (size q).-1.",
            "VernacExtend",
            "0d2d1f46a70792d5bd924378895a9803e8de88f9"
        ],
        [
            "have [n ub_n]: {n | forall y, root q y -> `|y| < n}.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "have [n1 ub_n1] := monic_Cauchy_bound mon_q.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "have /monic_Cauchy_bound[n2 ub_n2]: (-1) ^+ d *: (q \\Po - 'X) \\is monic.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "rewrite monicE lead_coefZ lead_coef_comp ?size_opp ?size_polyX // -/d.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "by rewrite lead_coef_opp lead_coefX (monicP mon_q) (mulrC 1) signrMK.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "exists (Num.max n1 n2) => y; rewrite ltrNge ler_normr !ler_maxl rootE.",
            "VernacExtend",
            "82d53976234637e3f0907eb36cddf61d028c6306"
        ],
        [
            "apply: contraL => /orP[]/andP[] => [/ub_n1/gtr_eqF->// | _ /ub_n2/gtr_eqF].",
            "VernacExtend",
            "3c42b53d0efc26db114b00541ac5e7fcb29e6aeb"
        ],
        [
            "by rewrite hornerZ horner_comp !hornerE opprK mulf_eq0 signr_eq0 => /= ->.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "have [p [a nz_a Dq]] := rat_poly_scale q; pose N := Num.bound `|n * a%:~R|.",
            "VernacExtend",
            "fa6ff0c3d4595d45015144bd8c25fb5ac62ed42b"
        ],
        [
            "pose xa : seq rat := [seq (m%:R - N%:R) / a%:~R | m <- iota 0 N.*2].",
            "VernacExtend",
            "3c5f04de94609049d978298aa02ff35fb35ea7c7"
        ],
        [
            "have [/sig2_eqW[y _ ->] | xa'x] := @mapP _ _ QtoC xa x; first by left; exists y.",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "right=> [[y Dx]]; case: xa'x; exists y => //.",
            "VernacExtend",
            "04b3eba992c379e413268c1f569b0c4c91eaabb3"
        ],
        [
            "have{x Dx qx0} qy0: root q y by rewrite Dx fmorph_root in qx0.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "have /dvdzP[b Da]: (denq y %| a)%Z.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "have /Gauss_dvdzl <-: coprimez (denq y) (numq y ^+ d).",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "by rewrite coprimez_sym coprimez_expl //; apply: coprime_num_den.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "pose p1 : {poly int} := a *: 'X^d - p.",
            "VernacExtend",
            "3c5f04de94609049d978298aa02ff35fb35ea7c7"
        ],
        [
            "have Dp1: p1 ^ intr = a%:~R *: ('X^d - q).",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "by rewrite rmorphB linearZ /= map_polyXn scalerBr Dq scalerKV ?intr_eq0.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "apply/dvdzP; exists (\\sum_(i < d) p1`_i * numq y ^+ i * denq y ^+ (d - i.+1)).",
            "VernacExtend",
            "8bee221ba47f959820148be04b7b16729eba5d2f"
        ],
        [
            "apply: ZtoQinj; rewrite /ZtoQ rmorphM mulr_suml rmorph_sum /=.",
            "VernacExtend",
            "56c014161b39aecfb3c54301c2409dba4e8e1857"
        ],
        [
            "transitivity ((p1 ^ intr).[y] * (denq y ^+ d)%:~R).",
            "VernacExtend",
            "672f32a19b8cee2096095ed2a8ad50cb5c49a4f9"
        ],
        [
            "rewrite Dp1 !hornerE hornerXn (rootP qy0) subr0.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "by rewrite !rmorphX /= numqE exprMn mulrA.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "have sz_p1: (size (p1 ^ ZtoQ)%R <= d)%N.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "rewrite Dp1 size_scale ?intr_eq0 //; apply/leq_sizeP=> i.",
            "VernacExtend",
            "634a7639ed2fb7caf62757f84400927f5829b7d5"
        ],
        [
            "rewrite leq_eqVlt eq_sym -polySpred ?monic_neq0 // coefB coefXn.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "case: eqP => [-> _ | _ /(nth_default 0)->//].",
            "VernacExtend",
            "e00fff71ff314c991514fc71c41a3556702e444a"
        ],
        [
            "by rewrite -lead_coefE (monicP mon_q).",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "rewrite (horner_coef_wide _ sz_p1) mulr_suml; apply: eq_bigr => i _.",
            "VernacExtend",
            "634a7639ed2fb7caf62757f84400927f5829b7d5"
        ],
        [
            "rewrite -!mulrA -exprSr coef_map !rmorphM !rmorphX /= numqE exprMn -mulrA.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "by rewrite -exprD -addSnnS subnKC.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "pose m := `|(numq y * b + N)%R|%N.",
            "VernacExtend",
            "3c5f04de94609049d978298aa02ff35fb35ea7c7"
        ],
        [
            "have Dm: m%:R = `|y * a%:~R + N%:R|.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "by rewrite pmulrn abszE intr_norm Da rmorphD !rmorphM /= numqE mulrAC mulrA.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "have ltr_Qnat n1 n2 : (n1%:R < n2%:R :> rat = _) := ltr_nat _ n1 n2.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "have ub_y: `|y * a%:~R| < N%:R.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "apply: ler_lt_trans (archi_boundP (normr_ge0 _)); rewrite !normrM.",
            "VernacExtend",
            "56c014161b39aecfb3c54301c2409dba4e8e1857"
        ],
        [
            "by rewrite ler_pmul ?normr_ge0 // (ler_trans _ (ler_norm n)) ?ltrW ?ub_n.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "apply/mapP; exists m.",
            "VernacExtend",
            "d6b5519a7c4a57fe85fc5d9529e6950ccf717c30"
        ],
        [
            "rewrite mem_iota /= add0n -addnn -ltr_Qnat Dm natrD.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "by rewrite (ler_lt_trans (ler_norm_add _ _)) // normr_nat ltr_add2r.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "rewrite Dm ger0_norm ?addrK ?mulfK ?intr_eq0 // -ler_subl_addl sub0r.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "by rewrite (ler_trans (ler_norm _)) ?normrN ?ltrW.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma minPoly_decidable_closure (F : fieldType) (L : closedFieldType) (FtoL : {rmorphism F -> L}) x : decidable_embedding FtoL -> integralOver FtoL x -> {p | [/\\ p \\is monic, root (p ^ FtoL) x & irreducible_poly p]}.",
            "VernacStartTheoremProof",
            "3a49b6273ab66523a11d827ec2ef1a59635a4baf"
        ],
        [
            "move=> isF /sig2W[p /monicP mon_p px0].",
            "VernacExtend",
            "b1b2cb7a3a617cba67460b4eca1f04de3c1cc716"
        ],
        [
            "have [r Dp] := closed_field_poly_normal (p ^ FtoL); pose n := size r.",
            "VernacExtend",
            "fa6ff0c3d4595d45015144bd8c25fb5ac62ed42b"
        ],
        [
            "rewrite lead_coef_map {}mon_p rmorph1 scale1r in Dp.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "pose Fpx q := (q \\is a polyOver isF) && root q x.",
            "VernacExtend",
            "3c5f04de94609049d978298aa02ff35fb35ea7c7"
        ],
        [
            "have FpxF q: Fpx (q ^ FtoL) = root (q ^ FtoL) x.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "by rewrite /Fpx polyOver_poly // => j _; apply/sumboolP; exists q`_j.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "pose p_ (I : {set 'I_n}) := \\prod_(i <- enum I) ('X - (r`_i)%:P).",
            "VernacExtend",
            "3c5f04de94609049d978298aa02ff35fb35ea7c7"
        ],
        [
            "have{px0 Dp} /ex_minset[I /minsetP[/andP[FpI pIx0] minI]]: exists I, Fpx (p_ I).",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "exists setT; suffices ->: p_ setT = p ^ FtoL by rewrite FpxF.",
            "VernacExtend",
            "ae8016658d84690efb282af29a4c99b644511b7d"
        ],
        [
            "by rewrite Dp (big_nth 0) big_mkord /p_ (eq_enum (in_set _)) big_filter.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "have{p} [p DpI]: {p | p_ I = p ^ FtoL}.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "exists (p_ I ^ (fun y => if isF y is left Fy then sval (sig_eqW Fy) else 0)).",
            "VernacExtend",
            "cf6fd35d8f8daec69c4ab27ba529a7c114a171d5"
        ],
        [
            "rewrite -map_poly_comp map_poly_id // => y /(allP FpI) /=.",
            "VernacExtend",
            "3c42b53d0efc26db114b00541ac5e7fcb29e6aeb"
        ],
        [
            "by rewrite unfold_in; case: (isF y) => // Fy _; case: (sig_eqW _).",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "have mon_pI: p_ I \\is monic by apply: monic_prod_XsubC.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "have mon_p: p \\is monic by rewrite -(map_monic FtoL) -DpI.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "exists p; rewrite -DpI; split=> //; split=> [|q nCq q_dv_p].",
            "VernacExtend",
            "697a0a616c3ad27f423f23d35b6810c437a12050"
        ],
        [
            "by rewrite -(size_map_poly FtoL) -DpI (root_size_gt1 _ pIx0) ?monic_neq0.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "rewrite -dvdp_size_eqp //; apply/eqP.",
            "VernacExtend",
            "634a7639ed2fb7caf62757f84400927f5829b7d5"
        ],
        [
            "without loss mon_q: q nCq q_dv_p / q \\is monic.",
            "VernacExtend",
            "87d5e7b04148ee8f2e4efcc847e0dfadae0aa4cb"
        ],
        [
            "move=> IHq; pose a := lead_coef q; pose q1 := a^-1 *: q.",
            "VernacExtend",
            "81927515fc3ecfba885b46cf7f9013852021d404"
        ],
        [
            "have nz_a: a != 0 by rewrite lead_coef_eq0 (dvdpN0 q_dv_p) ?monic_neq0.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "have /IHq IHq1: q1 \\is monic by rewrite monicE lead_coefZ mulVf.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "by rewrite -IHq1 ?size_scale ?dvdp_scalel ?invr_eq0.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "without loss{nCq} qx0: q mon_q q_dv_p / root (q ^ FtoL) x.",
            "VernacExtend",
            "87d5e7b04148ee8f2e4efcc847e0dfadae0aa4cb"
        ],
        [
            "have /dvdpP[q1 Dp] := q_dv_p; rewrite DpI Dp rmorphM rootM -implyNb in pIx0.",
            "VernacExtend",
            "aa9d5fbc682ed874cd64b2543ca6c859b978e924"
        ],
        [
            "have mon_q1: q1 \\is monic by rewrite Dp monicMr in mon_p.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "move=> IH; apply: (IH) (implyP pIx0 _) => //; apply: contra nCq => /IH IHq1.",
            "VernacExtend",
            "e374b6c583d80c9d8b579c06df7953342f99f751"
        ],
        [
            "rewrite -(subnn (size q1)) {1}IHq1 ?Dp ?dvdp_mulr // polySpred ?monic_neq0 //.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "by rewrite eqSS size_monicM ?monic_neq0 // -!subn1 subnAC addKn.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "have /dvdp_prod_XsubC[m Dq]: q ^ FtoL %| p_ I by rewrite DpI dvdp_map.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "pose B := [set j in mask m (enum I)]; have{Dq} Dq: q ^ FtoL = p_ B.",
            "VernacExtend",
            "c09d1274557abc8857ed64eb3450db2da906c185"
        ],
        [
            "apply/eqP; rewrite -eqp_monic ?monic_map ?monic_prod_XsubC //.",
            "VernacExtend",
            "56c014161b39aecfb3c54301c2409dba4e8e1857"
        ],
        [
            "congr (_ %= _): Dq; apply: eq_big_perm => //.",
            "VernacExtend",
            "385739dd8a4f73703d3828c61e1780a276bfaa31"
        ],
        [
            "by rewrite uniq_perm_eq ?mask_uniq ?enum_uniq // => j; rewrite mem_enum inE.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "rewrite -!(size_map_poly FtoL) Dq -DpI (minI B) // -?Dq ?FpxF //.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "by apply/subsetP=> j; rewrite inE => /mem_mask; rewrite mem_enum.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma alg_integral (F : fieldType) (L : fieldExtType F) : integralRange (in_alg L).",
            "VernacStartTheoremProof",
            "b76564e5f689ab30e1c865d6e29a398bc0645164"
        ],
        [
            "move=> x; have [/polyOver1P[p Dp]] := (minPolyOver 1 x, monic_minPoly 1 x).",
            "VernacExtend",
            "ccd83c252dcbae3d56f3d057fcb8217878b51901"
        ],
        [
            "by rewrite Dp map_monic; exists p; rewrite // -Dp root_minPoly.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Prenex Implicits alg_integral.",
            "VernacExtend",
            "9efa0560d9b1942deb8678b70bcca316eea733a9"
        ],
        [
            "Import DefaultKeying GRing.DefaultPred.",
            "VernacImport",
            "e5535ff698c91d4b56a71d6a898c6ec4be51a92a"
        ],
        [
            "Arguments map_poly_inj {F R} f [p1 p2].",
            "VernacArguments",
            "b5adb3bf26431e77becf30658d1357ef59636d50"
        ],
        [
            "Theorem Fundamental_Theorem_of_Algebraics : {L : closedFieldType & {conj : {rmorphism L -> L} | involutive conj & ~ conj =1 id}}.",
            "VernacStartTheoremProof",
            "7b900aa599b41722bf6dd961f3b5ca7939f38f66"
        ],
        [
            "have maxn3 n1 n2 n3: {m | [/\\ n1 <= m, n2 <= m & n3 <= m]%N}.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "by exists (maxn n1 (maxn n2 n3)); apply/and3P; rewrite -!geq_max.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "have [C [/= QtoC algC]] := countable_algebraic_closure [countFieldType of rat].",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "exists C; have [i Di2] := GRing.imaginary_exists C.",
            "VernacExtend",
            "14f8ff688822064c1e691c1be5a7bdf0f5d6b0a7"
        ],
        [
            "pose Qfield := fieldExtType rat; pose Cmorph (L : Qfield) := {rmorphism L -> C}.",
            "VernacExtend",
            "311b833fadff89b2f7ed817d3cd7cb6971c96a1e"
        ],
        [
            "have charQ (L : Qfield): [char L] =i pred0 := ftrans (char_lalg L) (char_num _).",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "have sepQ (L : Qfield) (K E : {subfield L}): separable K E.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "by apply/separableP=> u _; apply: charf0_separable.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "pose genQfield z L := {LtoC : Cmorph L & {u | LtoC u = z & <<1; u>> = fullv}}.",
            "VernacExtend",
            "3c5f04de94609049d978298aa02ff35fb35ea7c7"
        ],
        [
            "have /all_tag[Q /all_tag[ofQ genQz]] z: {Qz : Qfield & genQfield z Qz}.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "have [|p [/monic_neq0 nzp pz0 irr_p]] := minPoly_decidable_closure _ (algC z).",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "exact: rat_algebraic_decidable.",
            "VernacExtend",
            "ce637ff86bafca5d8359473e8c02af644dcbdc43"
        ],
        [
            "pose Qz := SubFieldExtType pz0 irr_p.",
            "VernacExtend",
            "3c5f04de94609049d978298aa02ff35fb35ea7c7"
        ],
        [
            "pose QzC := subfx_inj_rmorphism QtoC z p.",
            "VernacExtend",
            "3c5f04de94609049d978298aa02ff35fb35ea7c7"
        ],
        [
            "exists Qz, QzC, (subfx_root QtoC z p); first exact: subfx_inj_root.",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "apply/vspaceP=> u; rewrite memvf; apply/Fadjoin1_polyP.",
            "VernacExtend",
            "da24caf87c1bbbad0538b8be68905ec456c78aa7"
        ],
        [
            "by have [q] := subfxEroot pz0 nzp u; exists q.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "have pQof z p: p^@ ^ ofQ z = p ^ QtoC.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "by rewrite -map_poly_comp; apply: eq_map_poly => x; rewrite !fmorph_eq_rat.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "have pQof2 z p u: ofQ z p^@.[u] = (p ^ QtoC).[ofQ z u].",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "by rewrite -horner_map pQof.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "have PET_Qz z (E : {subfield Q z}): {u | <<1; u>> = E}.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "exists (separable_generator 1 E).",
            "VernacExtend",
            "c9e1cda658018938226659ffad3f892fb07a4208"
        ],
        [
            "by rewrite -eq_adjoin_separable_generator ?sub1v.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "pose gen z x := exists q, x = (q ^ QtoC).[z].",
            "VernacExtend",
            "3c5f04de94609049d978298aa02ff35fb35ea7c7"
        ],
        [
            "have PET2 x y: {z | gen z x & gen z y}.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "pose Gxy := (x, y) = let: (p, q, z) := _ in ((p ^ QtoC).[z], (q ^ QtoC).[z]).",
            "VernacExtend",
            "3c5f04de94609049d978298aa02ff35fb35ea7c7"
        ],
        [
            "suffices [[[p q] z] []]: {w | Gxy w} by exists z; [exists p | exists q].",
            "VernacExtend",
            "290ed488b5562e885aa2cac56f3a69b4faa0eaa6"
        ],
        [
            "apply/sig_eqW; have /integral_algebraic[px nz_px pxx0] := algC x.",
            "VernacExtend",
            "c574574294cc642b01d157e4c8f21ac2f90e4b5d"
        ],
        [
            "have /integral_algebraic[py nz_py pyy0] := algC y.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "have [n [[p Dx] [q Dy]]] := char0_PET nz_px pxx0 nz_py pyy0 (char_num _).",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "by exists (p, q, y *+ n - x); congr (_, _).",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "have gen_inQ z x: gen z x -> {u | ofQ z u = x}.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "have [u Dz _] := genQz z => /sig_eqW[q ->].",
            "VernacExtend",
            "3c42b53d0efc26db114b00541ac5e7fcb29e6aeb"
        ],
        [
            "by exists q^@.[u]; rewrite pQof2 Dz.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "have gen_ofP z u v: reflect (gen (ofQ z u) (ofQ z v)) (v \\in <<1; u>>).",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "apply: (iffP Fadjoin1_polyP) => [[q ->]|]; first by rewrite pQof2; exists q.",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "by case=> q; rewrite -pQof2 => /fmorph_inj->; exists q.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "have /all_tag[sQ genP] z: {s : pred C & forall x, reflect (gen z x) (x \\in s)}.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "apply: all_tag (fun x => reflect (gen z x)) _ => x.",
            "VernacExtend",
            "4bd6fa79b17bcd2bfb7af091fb325367a20385d6"
        ],
        [
            "have [w /gen_inQ[u <-] /gen_inQ[v <-]] := PET2 z x.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "by exists (v \\in <<1; u>>)%VS; apply: gen_ofP.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "have sQtrans: transitive (fun x z => x \\in sQ z).",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "move=> x y z /genP[p ->] /genP[q ->]; apply/genP; exists (p \\Po q).",
            "VernacExtend",
            "cabc24561c611562c81cef5e0beb65bd076faebd"
        ],
        [
            "by rewrite map_comp_poly horner_comp.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "have sQid z: z \\in sQ z by apply/genP; exists 'X; rewrite map_polyX hornerX.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "have{gen_ofP} sQof2 z u v: (ofQ z u \\in sQ (ofQ z v)) = (u \\in <<1; v>>%VS).",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "exact/genP/(gen_ofP z).",
            "VernacExtend",
            "ce637ff86bafca5d8359473e8c02af644dcbdc43"
        ],
        [
            "have sQof z v: ofQ z v \\in sQ z.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "by have [u Dz defQz] := genQz z; rewrite -[in sQ z]Dz sQof2 defQz memvf.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "have{gen_inQ} sQ_inQ z x z_x := gen_inQ z x (genP z x z_x).",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "have /all_sig[inQ inQ_K] z: {inQ | {in sQ z, cancel inQ (ofQ z)}}.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "by apply: all_sig_cond (fun x u => ofQ z u = x) 0 _ => x /sQ_inQ.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "have ofQ_K z: cancel (ofQ z) (inQ z).",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "by move=> x; have /inQ_K/fmorph_inj := sQof z x.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "have sQring z: divring_closed (sQ z).",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "have sQ_1: 1 \\in sQ z by rewrite -(rmorph1 (ofQ z)) sQof.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "by split=> // x y /inQ_K<- /inQ_K<- /=; rewrite -(rmorphB, fmorph_div) sQof.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "have sQopp z : oppr_closed (sQ z) := sQring z.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "have sQadd z : addr_closed (sQ z) := sQring z.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "have sQmul z : mulr_closed (sQ z) := sQring z.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "have sQinv z : invr_closed (sQ z) := sQring z.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "pose morph_ofQ x z Qxz := forall u, ofQ z (Qxz u) = ofQ x u.",
            "VernacExtend",
            "3c5f04de94609049d978298aa02ff35fb35ea7c7"
        ],
        [
            "have QtoQ z x: x \\in sQ z -> {Qxz : 'AHom(Q x, Q z) | morph_ofQ x z Qxz}.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "move=> z_x; pose Qxz u := inQ z (ofQ x u).",
            "VernacExtend",
            "fef3c4a8f7fcf70b0824f3cce5fb58f2e0ef07fd"
        ],
        [
            "have QxzE u: ofQ z (Qxz u) = ofQ x u by apply/inQ_K/(sQtrans x).",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "suffices /rat_lrmorphism QxzM: rmorphism Qxz.",
            "VernacExtend",
            "290ed488b5562e885aa2cac56f3a69b4faa0eaa6"
        ],
        [
            "by exists (linfun_ahom (LRMorphism QxzM)) => u; rewrite lfunE QxzE.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "split=> [u v|]; first by apply: (canLR (ofQ_K z)); rewrite !rmorphB !QxzE.",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "by split=> [u v|]; apply: (canLR (ofQ_K z)); rewrite ?rmorph1 ?rmorphM ?QxzE.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "pose sQs z s := all (mem (sQ z)) s.",
            "VernacExtend",
            "3c5f04de94609049d978298aa02ff35fb35ea7c7"
        ],
        [
            "have inQsK z s: sQs z s -> map (ofQ z) (map (inQ z) s) = s.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "by rewrite -map_comp => /allP/(_ _ _)/inQ_K; apply: map_id_in.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "have inQpK z p: p \\is a polyOver (sQ z) -> (p ^ inQ z) ^ ofQ z = p.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "by move=> /allP/(_ _ _)/inQ_K/=/map_poly_id; rewrite -map_poly_comp.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "have{gen PET2 genP} PET s: {z | sQs z s & <<1 & map (inQ z) s>>%VS = fullv}.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "have [y /inQsK Ds]: {y | sQs y s}.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "elim: s => [|x s /= [y IHs]]; first by exists 0.",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "have [z /genP z_x /genP z_y] := PET2 x y.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "by exists z; rewrite /= {x}z_x; apply: sub_all IHs => x /sQtrans/= ->.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "have [w defQs] := PET_Qz _ <<1 & map (inQ y) s>>%AS; pose z := ofQ y w.",
            "VernacExtend",
            "fa6ff0c3d4595d45015144bd8c25fb5ac62ed42b"
        ],
        [
            "have z_s: sQs z s.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "rewrite -Ds /sQs all_map; apply/allP=> u s_u /=.",
            "VernacExtend",
            "634a7639ed2fb7caf62757f84400927f5829b7d5"
        ],
        [
            "by rewrite sQof2 defQs seqv_sub_adjoin.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "have [[u Dz defQz] [Qzy QzyE]] := (genQz z, QtoQ y z (sQof y w)).",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "exists z => //; apply/eqP; rewrite eqEsubv subvf /= -defQz.",
            "VernacExtend",
            "01f04d3f5bba3b876eb4ec7b1c8f26d2e2cced77"
        ],
        [
            "rewrite -(limg_ker0 _ _ (AHom_lker0 Qzy)) aimg_adjoin_seq aimg_adjoin aimg1.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "rewrite -[map _ _](mapK (ofQ_K y)) -(map_comp (ofQ y)) (eq_map QzyE) inQsK //.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "by rewrite -defQs -(canLR (ofQ_K y) Dz) -QzyE ofQ_K.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "pose rp s := \\prod_(z <- s) ('X - z%:P).",
            "VernacExtend",
            "3c5f04de94609049d978298aa02ff35fb35ea7c7"
        ],
        [
            "have map_rp (f : {rmorphism _}) s: rp _ s ^ f = rp _ (map f s).",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "rewrite rmorph_prod /rp big_map; apply: eq_bigr => x _.",
            "VernacExtend",
            "634a7639ed2fb7caf62757f84400927f5829b7d5"
        ],
        [
            "by rewrite rmorphB /= map_polyX map_polyC.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "pose is_Gal z := SplittingField.axiom (Q z).",
            "VernacExtend",
            "3c5f04de94609049d978298aa02ff35fb35ea7c7"
        ],
        [
            "have galQ x: {z | x \\in sQ z & is_Gal z}.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "have /sig2W[p mon_p pz0] := algC x.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "have [s Dp] := closed_field_poly_normal (p ^ QtoC).",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "rewrite (monicP _) ?monic_map // scale1r in Dp; have [z z_s defQz] := PET s.",
            "VernacExtend",
            "7be6e3cf9ccbce33486c4b5c6fefdf7a9ad6e52b"
        ],
        [
            "exists z; first by apply/(allP z_s); rewrite -root_prod_XsubC -Dp.",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "exists p^@; first exact: alg_polyOver.",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "exists (map (inQ z) s); last by apply/vspaceP=> u; rewrite defQz memvf.",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "by rewrite -(eqp_map (ofQ z)) pQof Dp map_rp inQsK ?eqpxx.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "pose is_realC x := {R : archiFieldType & {rmorphism Q x -> R}}.",
            "VernacExtend",
            "3c5f04de94609049d978298aa02ff35fb35ea7c7"
        ],
        [
            "pose realC := {x : C & is_realC x}.",
            "VernacExtend",
            "3c5f04de94609049d978298aa02ff35fb35ea7c7"
        ],
        [
            "pose has_Rroot (xR : realC) p c (Rx := sQ (tag xR)) := [&& p \\is a polyOver Rx, p \\is monic, c \\in Rx & p.[0] == - c ^+ 2].",
            "VernacExtend",
            "3c5f04de94609049d978298aa02ff35fb35ea7c7"
        ],
        [
            "pose root_in (xR : realC) p := exists2 w, w \\in sQ (tag xR) & root p w.",
            "VernacExtend",
            "3c5f04de94609049d978298aa02ff35fb35ea7c7"
        ],
        [
            "pose extendsR (xR yR : realC) := tag xR \\in sQ (tag yR).",
            "VernacExtend",
            "3c5f04de94609049d978298aa02ff35fb35ea7c7"
        ],
        [
            "have add_Rroot xR p c: {yR | extendsR xR yR & has_Rroot xR p c -> root_in yR p}.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "rewrite {}/extendsR; case: (has_Rroot xR p c) / and4P; last by exists xR.",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "case: xR => x [R QxR] /= [/inQpK <-]; move: (p ^ _) => {p}p mon_p /inQ_K<- Dc.",
            "VernacExtend",
            "d09d9458d087c74b7317d831afc65fc07a0f6e3f"
        ],
        [
            "have{c Dc} p0_le0: (p ^ QxR).[0] <= 0.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "rewrite horner_coef0 coef_map -[p`_0]ofQ_K -coef_map -horner_coef0 (eqP Dc).",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "by rewrite -rmorphX -rmorphN ofQ_K /= rmorphN rmorphX oppr_le0 sqr_ge0.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "have [s Dp] := closed_field_poly_normal (p ^ ofQ x).",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "have{Dp} /all_and2[s_p p_s] y: root (p ^ ofQ x) y <-> (y \\in s).",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "by rewrite Dp (monicP mon_p) scale1r root_prod_XsubC.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "rewrite map_monic in mon_p; have [z /andP[z_x /allP/=z_s] _] := PET (x :: s).",
            "VernacExtend",
            "7be6e3cf9ccbce33486c4b5c6fefdf7a9ad6e52b"
        ],
        [
            "have{z_x} [[Qxz QxzE] Dx] := (QtoQ z x z_x, inQ_K z x z_x).",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "pose Qx := <<1; inQ z x>>%AS; pose QxzM := [rmorphism of Qxz].",
            "VernacExtend",
            "311b833fadff89b2f7ed817d3cd7cb6971c96a1e"
        ],
        [
            "have pQwx q1: q1 \\is a polyOver Qx -> {q | q1 = q ^ Qxz}.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "move/polyOverP=> Qx_q1; exists ((q1 ^ ofQ z) ^ inQ x).",
            "VernacExtend",
            "0788912c6573576227847969f704a8fd2123aacc"
        ],
        [
            "apply: (map_poly_inj (ofQ z)); rewrite -map_poly_comp (eq_map_poly QxzE).",
            "VernacExtend",
            "56c014161b39aecfb3c54301c2409dba4e8e1857"
        ],
        [
            "by rewrite inQpK ?polyOver_poly // => j _; rewrite -Dx sQof2 Qx_q1.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "have /all_sig[t_ Dt] u: {t | <<1; t>> = <<Qx; u>>} by apply: PET_Qz.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "suffices{p_s}[u Ry px0]: {u : Q z & is_realC (ofQ z (t_ u)) & ofQ z u \\in s}.",
            "VernacExtend",
            "290ed488b5562e885aa2cac56f3a69b4faa0eaa6"
        ],
        [
            "exists (Tagged is_realC Ry) => [|_] /=.",
            "VernacExtend",
            "3c42b53d0efc26db114b00541ac5e7fcb29e6aeb"
        ],
        [
            "by rewrite -Dx sQof2 Dt subvP_adjoin ?memv_adjoin.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "by exists (ofQ z u); rewrite ?p_s // sQof2 Dt memv_adjoin.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "without loss{z_s s_p} [u Dp s_y]: p mon_p p0_le0 / {u | minPoly Qx u = p ^ Qxz & ofQ z u \\in s}.",
            "VernacExtend",
            "87d5e7b04148ee8f2e4efcc847e0dfadae0aa4cb"
        ],
        [
            "-",
            "VernacBullet",
            "581cab4bf49fa4b495e569bbda96fc8d28fddcc0"
        ],
        [
            "move=> IHp; move: {2}_.+1 (ltnSn (size p)) => d.",
            "VernacExtend",
            "8b784377bdc4d565ff66d4cf36a6041e9354c156"
        ],
        [
            "elim: d => // d IHd in p mon_p s_p p0_le0 *; rewrite ltnS => le_p_d.",
            "VernacExtend",
            "5c0d3b68844697b312245da3ed2c1b277720f6af"
        ],
        [
            "have /closed_rootP/sig_eqW[y py0]: size (p ^ ofQ x) != 1%N.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "rewrite size_map_poly size_poly_eq1 eqp_monic ?rpred1 //.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "by apply: contraTneq p0_le0 => ->; rewrite rmorph1 hornerC ltr_geF ?ltr01.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "have /s_p s_y := py0; have /z_s/sQ_inQ[u Dy] := s_y.",
            "VernacExtend",
            "6e9d14df7d32ea0bf863301df3f6cb2d4e1b8e96"
        ],
        [
            "have /pQwx[q Dq] := minPolyOver Qx u.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "have mon_q: q \\is monic by have:= monic_minPoly Qx u; rewrite Dq map_monic.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "have /dvdpP/sig_eqW[r Dp]: q %| p.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "rewrite -(dvdp_map QxzM) -Dq minPoly_dvdp //.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "by apply: polyOver_poly => j _; rewrite -sQof2 QxzE Dx.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "by rewrite -(fmorph_root (ofQ z)) Dy -map_poly_comp (eq_map_poly QxzE).",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "have mon_r: r \\is monic by rewrite Dp monicMr in mon_p.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "have [q0_le0 | q0_gt0] := lerP ((q ^ QxR).[0]) 0.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "by apply: (IHp q) => //; exists u; rewrite ?Dy.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "have r0_le0: (r ^ QxR).[0] <= 0.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "by rewrite -(ler_pmul2r q0_gt0) mul0r -hornerM -rmorphM -Dp.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "apply: (IHd r mon_r) => // [w rw0|].",
            "VernacExtend",
            "4bd6fa79b17bcd2bfb7af091fb325367a20385d6"
        ],
        [
            "by rewrite s_p // Dp rmorphM rootM rw0.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "apply: leq_trans le_p_d; rewrite Dp size_Mmonic ?monic_neq0 // addnC.",
            "VernacExtend",
            "56c014161b39aecfb3c54301c2409dba4e8e1857"
        ],
        [
            "by rewrite -(size_map_poly QxzM q) -Dq size_minPoly !ltnS leq_addl.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "exists u => {s s_y}//; set y := ofQ z (t_ u); set p1 := minPoly Qx u in Dp.",
            "VernacExtend",
            "afc9251f7fa9e9d46662dd7a118dffa669bde05a"
        ],
        [
            "have /QtoQ[Qyz QyzE]: y \\in sQ z := sQof z (t_ u).",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "pose q1_ v := Fadjoin_poly Qx u (Qyz v).",
            "VernacExtend",
            "3c5f04de94609049d978298aa02ff35fb35ea7c7"
        ],
        [
            "have{QyzE} QyzE v: Qyz v = (q1_ v).[u].",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "by rewrite Fadjoin_poly_eq // -Dt -sQof2 QyzE sQof.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "have /all_sig2[q_ coqp Dq] v: {q | v != 0 -> coprimep p q & q ^ Qxz = q1_ v}.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "have /pQwx[q Dq]: q1_ v \\is a polyOver Qx by apply: Fadjoin_polyOver.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "exists q => // nz_v; rewrite -(coprimep_map QxzM) -Dp -Dq -gcdp_eqp1.",
            "VernacExtend",
            "82d53976234637e3f0907eb36cddf61d028c6306"
        ],
        [
            "have /minPoly_irr/orP[] // := dvdp_gcdl p1 (q1_ v).",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "by rewrite gcdp_polyOver ?minPolyOver ?Fadjoin_polyOver.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "rewrite -/p1 {1}/eqp dvdp_gcd => /and3P[_ _ /dvdp_leq/=/implyP].",
            "VernacExtend",
            "3c42b53d0efc26db114b00541ac5e7fcb29e6aeb"
        ],
        [
            "rewrite size_minPoly ltnNge size_poly (contraNneq _ nz_v) // => q1v0.",
            "VernacExtend",
            "3c42b53d0efc26db114b00541ac5e7fcb29e6aeb"
        ],
        [
            "by rewrite -(fmorph_eq0 [rmorphism of Qyz]) /= QyzE q1v0 horner0.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "pose h2 : R := 2%:R^-1; have nz2: 2%:R != 0 :> R by rewrite pnatr_eq0.",
            "VernacExtend",
            "c09d1274557abc8857ed64eb3450db2da906c185"
        ],
        [
            "pose itv ab := [pred c : R | ab.1 <= c <= ab.2].",
            "VernacExtend",
            "3c5f04de94609049d978298aa02ff35fb35ea7c7"
        ],
        [
            "pose wid ab : R := ab.2 - ab.1; pose mid ab := (ab.1 + ab.2) * h2.",
            "VernacExtend",
            "311b833fadff89b2f7ed817d3cd7cb6971c96a1e"
        ],
        [
            "pose sub_itv ab cd := cd.1 <= ab.1 :> R /\\ ab.2 <= cd.2 :> R.",
            "VernacExtend",
            "3c5f04de94609049d978298aa02ff35fb35ea7c7"
        ],
        [
            "pose xup q ab := [/\\ q.[ab.1] <= 0, q.[ab.2] >= 0 & ab.1 <= ab.2 :> R].",
            "VernacExtend",
            "3c5f04de94609049d978298aa02ff35fb35ea7c7"
        ],
        [
            "pose narrow q ab (c := mid ab) := if q.[c] >= 0 then (ab.1, c) else (c, ab.2).",
            "VernacExtend",
            "3c5f04de94609049d978298aa02ff35fb35ea7c7"
        ],
        [
            "pose find k q := iter k (narrow q).",
            "VernacExtend",
            "3c5f04de94609049d978298aa02ff35fb35ea7c7"
        ],
        [
            "have findP k q ab (cd := find k q ab): xup q ab -> [/\\ xup q cd, sub_itv cd ab & wid cd = wid ab / (2 ^ k)%:R].",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "-",
            "VernacBullet",
            "581cab4bf49fa4b495e569bbda96fc8d28fddcc0"
        ],
        [
            "rewrite {}/cd; case: ab => a b xq_ab.",
            "VernacExtend",
            "712d339e99ee17eb7d5033e19ac614eb3ca6b532"
        ],
        [
            "elim: k => /= [|k]; first by rewrite divr1.",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "case: (find k q _) => c d [[/= qc_le0 qd_ge0 le_cd] [/= le_ac le_db] Dcd].",
            "VernacExtend",
            "e00fff71ff314c991514fc71c41a3556702e444a"
        ],
        [
            "have [/= le_ce le_ed] := midf_le le_cd; set e := _ / _ in le_ce le_ed.",
            "VernacExtend",
            "81881a093b2294c76be3b432fbe83612064d7bc9"
        ],
        [
            "rewrite expnSr natrM invfM mulrA -{}Dcd /narrow /= -[mid _]/e.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "have [qe_ge0 // | /ltrW qe_le0] := lerP 0 q.[e].",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "do ?split=> //=; [exact: (ler_trans le_ed) | apply: canRL (mulfK nz2) _].",
            "VernacExtend",
            "0c1447d2319f58457f2f1a4fb47fce1ef6440ddc"
        ],
        [
            "by rewrite mulrBl divfK // mulr_natr opprD addrACA subrr add0r.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "do ?split=> //=; [exact: (ler_trans le_ac) | apply: canRL (mulfK nz2) _].",
            "VernacExtend",
            "0c1447d2319f58457f2f1a4fb47fce1ef6440ddc"
        ],
        [
            "by rewrite mulrBl divfK // mulr_natr opprD addrACA subrr addr0.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "have find_root r q ab: xup q ab -> {n | forall x, x \\in itv (find n q ab) ->`|(r * q).[x]| < h2}.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "-",
            "VernacBullet",
            "581cab4bf49fa4b495e569bbda96fc8d28fddcc0"
        ],
        [
            "move=> xab; have ub_ab := poly_itv_bound _ ab.1 ab.2.",
            "VernacExtend",
            "ccd83c252dcbae3d56f3d057fcb8217878b51901"
        ],
        [
            "have [Mu MuP] := ub_ab r; have /all_sig[Mq MqP] j := ub_ab q^`N(j).",
            "VernacExtend",
            "6e9d14df7d32ea0bf863301df3f6cb2d4e1b8e96"
        ],
        [
            "pose d := wid ab; pose dq := \\poly_(i < (size q).-1) Mq i.+1.",
            "VernacExtend",
            "311b833fadff89b2f7ed817d3cd7cb6971c96a1e"
        ],
        [
            "have d_ge0: 0 <= d by rewrite subr_ge0; case: xab.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "have [Mdq MdqP] := poly_disk_bound dq d.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "pose n := Num.bound (Mu * Mdq * d); exists n => c /= /andP[].",
            "VernacExtend",
            "801cf49622ecacdc7aba5baf9428af93fd6cae3f"
        ],
        [
            "have{xab} [[]] := findP n _ _ xab; case: (find n q ab) => a1 b1 /=.",
            "VernacExtend",
            "c6d2532ed4a224baf57de7930305ff767fdbd834"
        ],
        [
            "rewrite -/d => qa1_le0 qb1_ge0 le_ab1 [/= le_aa1 le_b1b] Dab1 le_a1c le_cb1.",
            "VernacExtend",
            "3c42b53d0efc26db114b00541ac5e7fcb29e6aeb"
        ],
        [
            "have /MuP lbMu: c \\in itv ab.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "by rewrite !inE (ler_trans le_aa1) ?(ler_trans le_cb1).",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "have Mu_ge0: 0 <= Mu by rewrite (ler_trans _ lbMu) ?normr_ge0.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "have Mdq_ge0: 0 <= Mdq.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "by rewrite (ler_trans _ (MdqP 0 _)) ?normr_ge0 ?normr0.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "suffices lb1 a2 b2 (ab1 := (a1, b1)) (ab2 := (a2, b2)) : xup q ab2 /\\ sub_itv ab2 ab1 -> q.[b2] - q.[a2] <= Mdq * wid ab1.",
            "VernacExtend",
            "290ed488b5562e885aa2cac56f3a69b4faa0eaa6"
        ],
        [
            "+",
            "VernacBullet",
            "3ddfc0515f916e562bacf863647e0107cb15aa13"
        ],
        [
            "apply: ler_lt_trans (_ : Mu * Mdq * wid (a1, b1) < h2); last first.",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "rewrite {}Dab1 mulrA ltr_pdivr_mulr ?ltr0n ?expn_gt0 //.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "rewrite (ltr_le_trans (archi_boundP _)) ?mulr_ge0 ?ltr_nat // -/n.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "rewrite ler_pdivl_mull ?ltr0n // -natrM ler_nat.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "by case: n => // n; rewrite expnS leq_pmul2l // ltn_expl.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "rewrite -mulrA hornerM normrM ler_pmul ?normr_ge0 //.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "have [/ltrW qc_le0 | qc_ge0] := ltrP q.[c] 0.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "by apply: ler_trans (lb1 c b1 _); rewrite ?ler0_norm ?ler_paddl.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "by apply: ler_trans (lb1 a1 c _); rewrite ?ger0_norm ?ler_paddr ?oppr_ge0.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "case{c le_a1c le_cb1 lbMu}=> [[/=qa2_le0 qb2_ge0 le_ab2] [/=le_a12 le_b21]].",
            "VernacExtend",
            "e00fff71ff314c991514fc71c41a3556702e444a"
        ],
        [
            "pose h := b2 - a2; have h_ge0: 0 <= h by rewrite subr_ge0.",
            "VernacExtend",
            "c09d1274557abc8857ed64eb3450db2da906c185"
        ],
        [
            "have [-> | nz_q] := eqVneq q 0.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "by rewrite !horner0 subrr mulr_ge0 ?subr_ge0.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "rewrite -(subrK a2 b2) (addrC h) (nderiv_taylor q (mulrC a2 h)).",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "rewrite (polySpred nz_q) big_ord_recl /= mulr1 nderivn0 addrC addKr.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "have [le_aa2 le_b2b] := (ler_trans le_aa1 le_a12, ler_trans le_b21 le_b1b).",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "have /MqP MqPx1: a2 \\in itv ab by rewrite inE le_aa2 (ler_trans le_ab2).",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "apply: ler_trans (ler_trans (ler_norm _) (ler_norm_sum _ _ _)) _.",
            "VernacExtend",
            "4bd6fa79b17bcd2bfb7af091fb325367a20385d6"
        ],
        [
            "apply: ler_trans (_ : `|dq.[h] * h| <= _); last first.",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "by rewrite normrM ler_pmul ?normr_ge0 ?MdqP // ?ger0_norm ?ler_sub ?h_ge0.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "rewrite horner_poly ger0_norm ?mulr_ge0 ?sumr_ge0 // => [|j _]; last first.",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "by rewrite mulr_ge0 ?exprn_ge0 // (ler_trans _ (MqPx1 _)) ?normr_ge0.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "rewrite mulr_suml ler_sum // => j _; rewrite normrM -mulrA -exprSr.",
            "VernacExtend",
            "82d53976234637e3f0907eb36cddf61d028c6306"
        ],
        [
            "by rewrite ler_pmul ?normr_ge0 // normrX ger0_norm.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "have [ab0 xab0]: {ab | xup (p ^ QxR) ab}.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "have /monic_Cauchy_bound[b pb_gt0]: p ^ QxR \\is monic by apply: monic_map.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "by exists (0, `|b|); rewrite /xup normr_ge0 p0_le0 ltrW ?pb_gt0 ?ler_norm.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "pose ab_ n := find n (p ^ QxR) ab0; pose Iab_ n := itv (ab_ n).",
            "VernacExtend",
            "311b833fadff89b2f7ed817d3cd7cb6971c96a1e"
        ],
        [
            "pose lim v a := (q_ v ^ QxR).[a]; pose nlim v n := lim v (ab_ n).2.",
            "VernacExtend",
            "311b833fadff89b2f7ed817d3cd7cb6971c96a1e"
        ],
        [
            "have lim0 a: lim 0 a = 0.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "rewrite /lim; suffices /eqP ->: q_ 0 == 0 by rewrite rmorph0 horner0.",
            "VernacExtend",
            "41b532ffae01a2c813d8937c09f0e12945b891e8"
        ],
        [
            "by rewrite -(map_poly_eq0 QxzM) Dq /q1_ !raddf0.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "have limN v a: lim (- v) a = - lim v a.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "rewrite /lim; suffices ->: q_ (- v) = - q_ v by rewrite rmorphN hornerN.",
            "VernacExtend",
            "41b532ffae01a2c813d8937c09f0e12945b891e8"
        ],
        [
            "by apply: (map_poly_inj QxzM); rewrite Dq /q1_ !raddfN /= Dq.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "pose lim_nz n v := exists2 e, e > 0 & {in Iab_ n, forall a, e < `|lim v a| }.",
            "VernacExtend",
            "3c5f04de94609049d978298aa02ff35fb35ea7c7"
        ],
        [
            "have /(all_sig_cond 0%N)[n_ nzP] v: v != 0 -> {n | lim_nz n v}.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "move=> nz_v; do [move/(_ v nz_v); rewrite -(coprimep_map QxR)] in coqp.",
            "VernacExtend",
            "22b510de5a19ae026f48022a3dcf9db1d297df52"
        ],
        [
            "have /sig_eqW[r r_pq_1] := Bezout_eq1_coprimepP _ _ coqp.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "have /(find_root r.1)[n ub_rp] := xab0; exists n.",
            "VernacExtend",
            "30fa52401874cdb9983426e929ee523d6e901a90"
        ],
        [
            "have [M Mgt0 ubM]: {M | 0 < M & {in Iab_ n, forall a, `|r.2.[a]| <= M}}.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "have [M ubM] := poly_itv_bound r.2 (ab_ n).1 (ab_ n).2.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "exists (Num.max 1 M) => [|s /ubM vM]; first by rewrite ltr_maxr ltr01.",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "by rewrite ler_maxr orbC vM.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "exists (h2 / M) => [|a xn_a]; first by rewrite divr_gt0 ?invr_gt0 ?ltr0n.",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "rewrite ltr_pdivr_mulr // -(ltr_add2l h2) -mulr2n -mulr_natl divff //.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "rewrite -normr1 -(hornerC 1 a) -[1%:P]r_pq_1 hornerD.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "rewrite ?(ler_lt_trans (ler_norm_add _ _)) ?ltr_le_add ?ub_rp //.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "by rewrite mulrC hornerM normrM ler_wpmul2l ?ubM.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "have ab_le m n: (m <= n)%N -> (ab_ n).2 \\in Iab_ m.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "move/subnKC=> <-; move: {n}(n - m)%N => n; rewrite /ab_.",
            "VernacExtend",
            "ea0cb90c655c5664c1e4bd5e8281f3783b29707c"
        ],
        [
            "have /(findP m)[/(findP n)[[_ _]]] := xab0.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "rewrite /find -iter_add -!/(find _ _) -!/(ab_ _) addnC !inE.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "by move: (ab_ _) => /= ab_mn le_ab_mn [/ler_trans->].",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "pose lt v w := 0 < nlim (w - v) (n_ (w - v)).",
            "VernacExtend",
            "3c5f04de94609049d978298aa02ff35fb35ea7c7"
        ],
        [
            "have posN v: lt 0 (- v) = lt v 0 by rewrite /lt subr0 add0r.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "have posB v w: lt 0 (w - v) = lt v w by rewrite /lt subr0.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "have posE n v: (n_ v <= n)%N -> lt 0 v = (0 < nlim v n).",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "rewrite /lt subr0 /nlim => /ab_le; set a := _.2; set b := _.2 => Iv_a.",
            "VernacExtend",
            "be3cfb230cf80a94111ad68bb7a187436d277c8b"
        ],
        [
            "have [-> | /nzP[e e_gt0]] := eqVneq v 0; first by rewrite !lim0 ltrr.",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "move: (n_ v) => m in Iv_a b * => v_gte.",
            "VernacExtend",
            "3c42b53d0efc26db114b00541ac5e7fcb29e6aeb"
        ],
        [
            "without loss lt0v: v v_gte / 0 < lim v b.",
            "VernacExtend",
            "87d5e7b04148ee8f2e4efcc847e0dfadae0aa4cb"
        ],
        [
            "move=> IHv; apply/idP/idP => [v_gt0 | /ltrW]; first by rewrite -IHv.",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "rewrite ltr_def -normr_gt0 ?(ltr_trans _ (v_gte _ _)) ?ab_le //=.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "rewrite !lerNgt -!oppr_gt0 -!limN; apply: contra => v_lt0.",
            "VernacExtend",
            "634a7639ed2fb7caf62757f84400927f5829b7d5"
        ],
        [
            "by rewrite -IHv // => c /v_gte; rewrite limN normrN.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "rewrite lt0v (ltr_trans e_gt0) ?(ltr_le_trans (v_gte a Iv_a)) //.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "rewrite ger0_norm // lerNgt; apply/negP=> /ltrW lev0.",
            "VernacExtend",
            "634a7639ed2fb7caf62757f84400927f5829b7d5"
        ],
        [
            "have [le_a le_ab] : _ /\\ a <= b := andP Iv_a.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "have xab: xup (q_ v ^ QxR) (a, b) by move/ltrW in lt0v.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "have /(find_root (h2 / e)%:P)[n1] := xab; have /(findP n1)[[_ _]] := xab.",
            "VernacExtend",
            "6e9d14df7d32ea0bf863301df3f6cb2d4e1b8e96"
        ],
        [
            "case: (find _ _ _) => c d /= le_cd [/= le_ac le_db] _ /(_ c)/implyP.",
            "VernacExtend",
            "e00fff71ff314c991514fc71c41a3556702e444a"
        ],
        [
            "rewrite inE lerr le_cd hornerM hornerC normrM ler_gtF //.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "rewrite ger0_norm ?divr_ge0 ?invr_ge0 ?ler0n ?(ltrW e_gt0) // mulrAC.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "rewrite ler_pdivl_mulr // ler_wpmul2l ?invr_ge0 ?ler0n // ltrW // v_gte //=.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "by rewrite inE -/b (ler_trans le_a) //= (ler_trans le_cd).",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "pose lim_pos m v := exists2 e, e > 0 & forall n, (m <= n)%N -> e < nlim v n.",
            "VernacExtend",
            "3c5f04de94609049d978298aa02ff35fb35ea7c7"
        ],
        [
            "have posP v: reflect (exists m, lim_pos m v) (lt 0 v).",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "apply: (iffP idP) => [v_gt0|[m [e e_gt0 v_gte]]]; last first.",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "by rewrite (posE _ _ (leq_maxl _ m)) (ltr_trans e_gt0) ?v_gte ?leq_maxr.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "have [|e e_gt0 v_gte] := nzP v.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "by apply: contraTneq v_gt0 => ->; rewrite /lt subr0 /nlim lim0 ltrr.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "exists (n_ v), e => // n le_vn; rewrite (posE n) // in v_gt0.",
            "VernacExtend",
            "82d53976234637e3f0907eb36cddf61d028c6306"
        ],
        [
            "by rewrite -(ger0_norm (ltrW v_gt0)) v_gte ?ab_le.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "have posNneg v: lt 0 v -> ~~ lt v 0.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "case/posP=> m [d d_gt0 v_gtd]; rewrite -posN.",
            "VernacExtend",
            "90a2acb29b7a5304b0ab6ba5269c420638ddef63"
        ],
        [
            "apply: contraL d_gt0 => /posP[n [e e_gt0 nv_gte]].",
            "VernacExtend",
            "4bd6fa79b17bcd2bfb7af091fb325367a20385d6"
        ],
        [
            "rewrite ltr_gtF // (ltr_trans (v_gtd _ (leq_maxl m n))) // -oppr_gt0.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "by rewrite /nlim -limN (ltr_trans e_gt0) ?nv_gte ?leq_maxr.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "have posVneg v: v != 0 -> lt 0 v || lt v 0.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "case/nzP=> e e_gt0 v_gte; rewrite -posN; set w := - v.",
            "VernacExtend",
            "b4538aa86bc588f611040617f56efb8d6f601582"
        ],
        [
            "have [m [le_vm le_wm _]] := maxn3 (n_ v) (n_ w) 0%N; rewrite !(posE m) //.",
            "VernacExtend",
            "aa9d5fbc682ed874cd64b2543ca6c859b978e924"
        ],
        [
            "by rewrite /nlim limN -ltr_normr (ltr_trans e_gt0) ?v_gte ?ab_le.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "have posD v w: lt 0 v -> lt 0 w -> lt 0 (v + w).",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "move=> /posP[m [d d_gt0 v_gtd]] /posP[n [e e_gt0 w_gte]].",
            "VernacExtend",
            "b1b2cb7a3a617cba67460b4eca1f04de3c1cc716"
        ],
        [
            "apply/posP; exists (maxn m n), (d + e) => [|k]; first exact: addr_gt0.",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "rewrite geq_max => /andP[le_mk le_nk]; rewrite /nlim /lim.",
            "VernacExtend",
            "82d53976234637e3f0907eb36cddf61d028c6306"
        ],
        [
            "have ->: q_ (v + w) = q_ v + q_ w.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "by apply: (map_poly_inj QxzM); rewrite rmorphD /= !{1}Dq /q1_ !raddfD.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "by rewrite rmorphD hornerD ltr_add ?v_gtd ?w_gte.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "have posM v w: lt 0 v -> lt 0 w -> lt 0 (v * w).",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "move=> /posP[m [d d_gt0 v_gtd]] /posP[n [e e_gt0 w_gte]].",
            "VernacExtend",
            "b1b2cb7a3a617cba67460b4eca1f04de3c1cc716"
        ],
        [
            "have /dvdpP[r /(canRL (subrK _))Dqvw]: p %| q_ (v * w) - q_ v * q_ w.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "rewrite -(dvdp_map QxzM) rmorphB rmorphM /= !Dq -Dp minPoly_dvdp //.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "by rewrite rpredB 1?rpredM ?Fadjoin_polyOver.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "by rewrite rootE !hornerE -!QyzE rmorphM subrr.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "have /(find_root ((d * e)^-1 *: r ^ QxR))[N ub_rp] := xab0.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "pose f := d * e * h2; apply/posP; exists (maxn N (maxn m n)), f => [|k].",
            "VernacExtend",
            "8c117eafae32c744dfd315859b178968d2f75cff"
        ],
        [
            "by rewrite !mulr_gt0 ?invr_gt0 ?ltr0n.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "rewrite !geq_max => /and3P[/ab_le/ub_rp{ub_rp}ub_rp le_mk le_nk].",
            "VernacExtend",
            "3c42b53d0efc26db114b00541ac5e7fcb29e6aeb"
        ],
        [
            "rewrite -(ltr_add2r f) -mulr2n -mulr_natr divfK // /nlim /lim Dqvw.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "rewrite rmorphD hornerD /= -addrA -ltr_subl_addl ler_lt_add //.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "by rewrite rmorphM hornerM ler_pmul ?ltrW ?v_gtd ?w_gte.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "rewrite -ltr_pdivr_mull ?mulr_gt0 // (ler_lt_trans _ ub_rp) //.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "by rewrite -scalerAl hornerZ -rmorphM mulrN -normrN ler_norm.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "pose le v w := (w == v) || lt v w.",
            "VernacExtend",
            "3c5f04de94609049d978298aa02ff35fb35ea7c7"
        ],
        [
            "pose abs v := if le 0 v then v else - v.",
            "VernacExtend",
            "3c5f04de94609049d978298aa02ff35fb35ea7c7"
        ],
        [
            "have absN v: abs (- v) = abs v.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "rewrite /abs /le oppr_eq0 opprK posN.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "have [-> | /posVneg/orP[v_gt0 | v_lt0]] := altP eqP; first by rewrite oppr0.",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "by rewrite v_gt0 /= -if_neg posNneg.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "by rewrite v_lt0 /= -if_neg -(opprK v) posN posNneg ?posN.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "have absE v: le 0 v -> abs v = v by rewrite /abs => ->.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "pose QyNum := RealLtMixin posD posM posNneg posB posVneg absN absE (rrefl _).",
            "VernacExtend",
            "3c5f04de94609049d978298aa02ff35fb35ea7c7"
        ],
        [
            "pose QyNumField := [numFieldType of NumDomainType (Q y) QyNum].",
            "VernacExtend",
            "3c5f04de94609049d978298aa02ff35fb35ea7c7"
        ],
        [
            "pose Ry := [realFieldType of RealDomainType _ (RealLeAxiom QyNumField)].",
            "VernacExtend",
            "3c5f04de94609049d978298aa02ff35fb35ea7c7"
        ],
        [
            "have archiRy := @rat_algebraic_archimedean Ry _ alg_integral.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "by exists (ArchiFieldType Ry archiRy); apply: [rmorphism of idfun].",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "have some_realC: realC.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "suffices /all_sig[f QfK] x: {a | in_alg (Q 0) a = x}.",
            "VernacExtend",
            "290ed488b5562e885aa2cac56f3a69b4faa0eaa6"
        ],
        [
            "exists 0, [archiFieldType of rat], f.",
            "VernacExtend",
            "6059216dad626d10f20d5bbbd61f3a92ff000eed"
        ],
        [
            "exact: can2_rmorphism (inj_can_sym QfK (fmorph_inj _)) QfK.",
            "VernacExtend",
            "ce637ff86bafca5d8359473e8c02af644dcbdc43"
        ],
        [
            "have /Fadjoin1_polyP/sig_eqW[q]: x \\in <<1; 0>>%VS by rewrite -sQof2 rmorph0.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "by exists q.[0]; rewrite -horner_map rmorph0.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "pose fix xR n : realC := if n isn't n'.+1 then some_realC else if unpickle (nth 0%N (CodeSeq.decode n') 1) isn't Some (p, c) then xR n' else tag (add_Rroot (xR n') p c).",
            "VernacExtend",
            "be59184aeceac70e4255bd58cff677d981339a6d"
        ],
        [
            "pose x_ n := tag (xR n).",
            "VernacExtend",
            "3c5f04de94609049d978298aa02ff35fb35ea7c7"
        ],
        [
            "have sRle m n: (m <= n)%N -> {subset sQ (x_ m) <= sQ (x_ n)}.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "move/subnK <-; elim: {n}(n - m)%N => // n IHn x /IHn{IHn}Rx.",
            "VernacExtend",
            "b2c453bcfb72d2a5d1b17de8ea415b01549924fb"
        ],
        [
            "rewrite addSn /x_ /=; case: (unpickle _) => [[p c]|] //=.",
            "VernacExtend",
            "712d339e99ee17eb7d5033e19ac614eb3ca6b532"
        ],
        [
            "by case: (add_Rroot _ _ _) => yR /= /(sQtrans _ x)->.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "have xRroot n p c: has_Rroot (xR n) p c -> {m | n <= m & root_in (xR m) p}%N.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "case/and4P=> Rp mon_p Rc Dc; pose m := CodeSeq.code [:: n; pickle (p, c)].",
            "VernacExtend",
            "61f7313c68f88d92a678d74fe9c99999257a468e"
        ],
        [
            "have le_n_m: (n <= m)%N by apply/ltnW/(allP (CodeSeq.ltn_code _))/mem_head.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "exists m.+1; rewrite ?leqW /x_ //= CodeSeq.codeK pickleK.",
            "VernacExtend",
            "597aa7389b1a79c4260c03a6050917123cd26dff"
        ],
        [
            "case: (add_Rroot _ _ _) => yR /= _; apply; apply/and4P.",
            "VernacExtend",
            "9d6b76f990200881b2ad88253a470329f84113d9"
        ],
        [
            "by split=> //; first apply: polyOverS Rp; apply: (sRle n).",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "have /all_sig[z_ /all_and3[Ri_R Ri_i defRi]] n (x := x_ n): {z | [/\\ x \\in sQ z, i \\in sQ z & <<<<1; inQ z x>>; inQ z i>> = fullv]}.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "-",
            "VernacBullet",
            "581cab4bf49fa4b495e569bbda96fc8d28fddcc0"
        ],
        [
            "have [z /and3P[z_x z_i _] Dzi] := PET [:: x; i].",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "by exists z; rewrite -adjoin_seq1 -adjoin_cons.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "pose i_ n := inQ (z_ n) i; pose R_ n := <<1; inQ (z_ n) (x_ n)>>%AS.",
            "VernacExtend",
            "311b833fadff89b2f7ed817d3cd7cb6971c96a1e"
        ],
        [
            "have memRi n: <<R_ n; i_ n>> =i predT by move=> u; rewrite defRi memvf.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "have sCle m n: (m <= n)%N -> {subset sQ (z_ m) <= sQ (z_ n)}.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "move/sRle=> Rmn _ /sQ_inQ[u <-].",
            "VernacExtend",
            "b1b2cb7a3a617cba67460b4eca1f04de3c1cc716"
        ],
        [
            "have /Fadjoin_polyP[p /polyOverP Rp ->] := memRi m u.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "rewrite -horner_map inQ_K ?rpred_horner //=; apply/polyOver_poly=> j _.",
            "VernacExtend",
            "634a7639ed2fb7caf62757f84400927f5829b7d5"
        ],
        [
            "by apply: sQtrans (Ri_R n); rewrite Rmn // -(inQ_K _ _ (Ri_R m)) sQof2.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "have R'i n: i \\notin sQ (x_ n).",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "rewrite /x_; case: (xR n) => x [Rn QxR] /=.",
            "VernacExtend",
            "712d339e99ee17eb7d5033e19ac614eb3ca6b532"
        ],
        [
            "apply: contraL (@ltr01 Rn) => /sQ_inQ[v Di].",
            "VernacExtend",
            "4bd6fa79b17bcd2bfb7af091fb325367a20385d6"
        ],
        [
            "suffices /eqP <-: - QxR v ^+ 2 == 1 by rewrite oppr_gt0 -lerNgt sqr_ge0.",
            "VernacExtend",
            "290ed488b5562e885aa2cac56f3a69b4faa0eaa6"
        ],
        [
            "rewrite -rmorphX -rmorphN fmorph_eq1 -(fmorph_eq1 (ofQ x)) rmorphN eqr_oppLR.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "by rewrite rmorphX Di Di2.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "have szX2_1: size ('X^2 + 1) = 3.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "by move=> R; rewrite size_addl ?size_polyXn ?size_poly1.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "have minp_i n (p_i := minPoly (R_ n) (i_ n)): p_i = 'X^2 + 1.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "have p_dv_X2_1: p_i %| 'X^2 + 1.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "rewrite minPoly_dvdp ?rpredD ?rpredX ?rpred1 ?polyOverX //.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "rewrite -(fmorph_root (ofQ _)) inQ_K // rmorphD rmorph1 /= map_polyXn.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "by rewrite rootE hornerD hornerXn hornerC Di2 addNr.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "apply/eqP; rewrite -eqp_monic ?monic_minPoly //; last first.",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "by rewrite monicE lead_coefE szX2_1 coefD coefXn coefC addr0.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "rewrite -dvdp_size_eqp // eqn_leq dvdp_leq -?size_poly_eq0 ?szX2_1 //= ltnNge.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "by rewrite size_minPoly ltnS leq_eqVlt orbF adjoin_deg_eq1 -sQof2 !inQ_K.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "have /all_sig[n_ FTA] z: {n | z \\in sQ (z_ n)}.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "without loss [z_i gal_z]: z / i \\in sQ z /\\ is_Gal z.",
            "VernacExtend",
            "87d5e7b04148ee8f2e4efcc847e0dfadae0aa4cb"
        ],
        [
            "have [y /and3P[/sQtrans y_z /sQtrans y_i _] _] := PET [:: z; i].",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "have [t /sQtrans t_y gal_t] := galQ y.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "by case/(_ t)=> [|n]; last exists n; rewrite ?y_z ?y_i ?t_y.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "apply/sig_eqW; have n := 0%N.",
            "VernacExtend",
            "c574574294cc642b01d157e4c8f21ac2f90e4b5d"
        ],
        [
            "have [p]: exists p, [&& p \\is monic, root p z & p \\is a polyOver (sQ (z_ n))].",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "have [p mon_p pz0] := algC z; exists (p ^ QtoC).",
            "VernacExtend",
            "28fd3b2108dded6b628fa73946df18f3b3d23a50"
        ],
        [
            "by rewrite map_monic mon_p pz0 -(pQof (z_ n)); apply/polyOver_poly.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "elim: {p}_.+1 {-2}p n (ltnSn (size p)) => // d IHd p n lepd pz0.",
            "VernacExtend",
            "e686a1895f1799b840b76242f931100819a9ad6c"
        ],
        [
            "have [t [t_C t_z gal_t]]: exists t, [/\\ z_ n \\in sQ t, z \\in sQ t & is_Gal t].",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "have [y /and3P[y_C y_z _]] := PET [:: z_ n; z].",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "by have [t /(sQtrans y)t_y] := galQ y; exists t; rewrite !t_y.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "pose Qt := SplittingFieldType rat (Q t) gal_t; have /QtoQ[CnQt CnQtE] := t_C.",
            "VernacExtend",
            "c09d1274557abc8857ed64eb3450db2da906c185"
        ],
        [
            "pose Rn : {subfield Qt} := (CnQt @: R_ n)%AS; pose i_t : Qt := CnQt (i_ n).",
            "VernacExtend",
            "311b833fadff89b2f7ed817d3cd7cb6971c96a1e"
        ],
        [
            "pose Cn : {subfield Qt} := <<Rn; i_t>>%AS.",
            "VernacExtend",
            "3c5f04de94609049d978298aa02ff35fb35ea7c7"
        ],
        [
            "have defCn: Cn = limg CnQt :> {vspace Q t} by rewrite /= -aimg_adjoin defRi.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "have memRn u: (u \\in Rn) = (ofQ t u \\in sQ (x_ n)).",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "by rewrite /= aimg_adjoin aimg1 -sQof2 CnQtE inQ_K.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "have memCn u: (u \\in Cn) = (ofQ t u \\in sQ (z_ n)).",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "have [v Dv genCn] := genQz (z_ n).",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "by rewrite -Dv -CnQtE sQof2 defCn -genCn aimg_adjoin aimg1.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "have Dit: ofQ t i_t = i by rewrite CnQtE inQ_K.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "have Dit2: i_t ^+ 2 = -1.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "by apply: (fmorph_inj (ofQ t)); rewrite rmorphX rmorphN1 Dit.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "have dimCn: \\dim_Rn Cn = 2.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "rewrite -adjoin_degreeE adjoin_degree_aimg.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "by apply: succn_inj; rewrite -size_minPoly minp_i.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "have /sQ_inQ[u_z Dz] := t_z; pose Rz := <<Cn; u_z>>%AS.",
            "VernacExtend",
            "fa6ff0c3d4595d45015144bd8c25fb5ac62ed42b"
        ],
        [
            "have{p lepd pz0} le_Rz_d: (\\dim_Cn Rz < d)%N.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "rewrite -ltnS -adjoin_degreeE -size_minPoly (leq_trans _ lepd) // !ltnS.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "have{pz0} [mon_p pz0 Cp] := and3P pz0.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "have{Cp} Dp: ((p ^ inQ (z_ n)) ^ CnQt) ^ ofQ t = p.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "by rewrite -map_poly_comp (eq_map_poly CnQtE) inQpK.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "rewrite -Dp size_map_poly dvdp_leq ?monic_neq0 -?(map_monic (ofQ _)) ?Dp //.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "rewrite defCn minPoly_dvdp //; try by rewrite -(fmorph_root (ofQ t)) Dz Dp.",
            "VernacExtend",
            "768b2f88f8c65ebded32bd7dc9c8ffec8f100548"
        ],
        [
            "by apply/polyOver_poly=> j _; rewrite memv_img ?memvf.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "have [sRCn sCnRz]: (Rn <= Cn)%VS /\\ (Cn <= Rz)%VS by rewrite !subv_adjoin.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "have sRnRz := subv_trans sRCn sCnRz.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "have{gal_z} galRz: galois Rn Rz.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "apply/and3P; split=> //; apply/splitting_normalField=> //.",
            "VernacExtend",
            "09ff90107c05f6bf4f743acb58a064bacfe65029"
        ],
        [
            "pose u : SplittingFieldType rat (Q z) gal_z := inQ z z.",
            "VernacExtend",
            "3c5f04de94609049d978298aa02ff35fb35ea7c7"
        ],
        [
            "have /QtoQ[Qzt QztE] := t_z; exists (minPoly 1 u ^ Qzt).",
            "VernacExtend",
            "7697c05394708e07c89c04710ded73b5f29466da"
        ],
        [
            "have /polyOver1P[q ->] := minPolyOver 1 u; apply/polyOver_poly=> j _.",
            "VernacExtend",
            "af1e5df3b072070e589731222b14b19e1cb478bc"
        ],
        [
            "by rewrite coef_map linearZZ rmorph1 rpredZ ?rpred1.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "have [s /eqP Ds] := splitting_field_normal 1 u.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "rewrite Ds; exists (map Qzt s); first by rewrite map_rp eqpxx.",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "apply/eqP; rewrite eqEsubv; apply/andP; split.",
            "VernacExtend",
            "c6080ad6de433b4aac1c6523f45011ac63415378"
        ],
        [
            "apply/Fadjoin_seqP; split=> // _ /mapP[w s_w ->].",
            "VernacExtend",
            "5fce7e5361004176d6b434b36b4623c7387f70bb"
        ],
        [
            "by rewrite (subvP (adjoinSl u_z (sub1v _))) // -sQof2 Dz QztE.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "rewrite /= adjoinC (Fadjoin_idP _) -/Rz; last first.",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "by rewrite (subvP (adjoinSl _ (sub1v _))) // -sQof2 Dz Dit.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "rewrite /= -adjoin_seq1 adjoin_seqSr //; apply/allP=> /=; rewrite andbT.",
            "VernacExtend",
            "fe8f197e86415fc7f0a74eda9d312128b9473eda"
        ],
        [
            "rewrite -(mem_map (fmorph_inj (ofQ _))) -map_comp (eq_map QztE); apply/mapP.",
            "VernacExtend",
            "634a7639ed2fb7caf62757f84400927f5829b7d5"
        ],
        [
            "by exists u; rewrite ?inQ_K // -root_prod_XsubC -Ds root_minPoly.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "have galCz: galois Cn Rz by rewrite (galoisS _ galRz) ?sRCn.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "have [Cz | C'z]:= boolP (u_z \\in Cn); first by exists n; rewrite -Dz -memCn.",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "pose G := 'Gal(Rz / Cn)%G; have{C'z} ntG: G :!=: 1%g.",
            "VernacExtend",
            "c09d1274557abc8857ed64eb3450db2da906c185"
        ],
        [
            "rewrite trivg_card1 -galois_dim 1?(galoisS _ galCz) ?subvv //=.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "by rewrite -adjoin_degreeE adjoin_deg_eq1.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "pose extRz m := exists2 w, ofQ t w \\in sQ (z_ m) & w \\in [predD Rz & Cn].",
            "VernacExtend",
            "3c5f04de94609049d978298aa02ff35fb35ea7c7"
        ],
        [
            "suffices [m le_n_m [w Cw /andP[C'w Rz_w]]]: exists2 m, (n <= m)%N & extRz m.",
            "VernacExtend",
            "290ed488b5562e885aa2cac56f3a69b4faa0eaa6"
        ],
        [
            "pose p := minPoly <<Cn; w>> u_z; apply: (IHd (p ^ ofQ t) m).",
            "VernacExtend",
            "5634a4c046b3abb6374cef97e00ebda261abde4c"
        ],
        [
            "apply: leq_trans le_Rz_d; rewrite size_map_poly size_minPoly ltnS.",
            "VernacExtend",
            "56c014161b39aecfb3c54301c2409dba4e8e1857"
        ],
        [
            "rewrite adjoin_degreeE adjoinC (addv_idPl Rz_w) agenv_id.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "rewrite ltn_divLR ?adim_gt0 // mulnC.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "rewrite muln_divCA ?field_dimS ?subv_adjoin // ltn_Pmulr ?adim_gt0 //.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "by rewrite -adjoin_degreeE ltnNge leq_eqVlt orbF adjoin_deg_eq1.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "rewrite map_monic monic_minPoly -Dz fmorph_root root_minPoly /=.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "have /polyOverP Cw_p: p \\is a polyOver <<Cn; w>>%VS by apply: minPolyOver.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "apply/polyOver_poly=> j _; have /Fadjoin_polyP[q Cq {j}->] := Cw_p j.",
            "VernacExtend",
            "c574574294cc642b01d157e4c8f21ac2f90e4b5d"
        ],
        [
            "rewrite -horner_map rpred_horner //; apply/polyOver_poly=> j _.",
            "VernacExtend",
            "634a7639ed2fb7caf62757f84400927f5829b7d5"
        ],
        [
            "by rewrite (sCle n) // -memCn (polyOverP Cq).",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "have [evenG | oddG] := boolP (2.-group G); last first.",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "have [P /and3P[sPG evenP oddPG]] := Sylow_exists 2 'Gal(Rz / Rn).",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "have [w defQw] := PET_Qz t [aspace of fixedField P].",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "pose pw := minPoly Rn w; pose p := (- pw * (pw \\Po - 'X)) ^ ofQ t.",
            "VernacExtend",
            "311b833fadff89b2f7ed817d3cd7cb6971c96a1e"
        ],
        [
            "have sz_pw: (size pw).-1 = #|'Gal(Rz / Rn) : P|.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "rewrite size_minPoly adjoin_degreeE -dim_fixed_galois //= -defQw.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "congr (\\dim_Rn _); apply/esym/eqP; rewrite eqEsubv adjoinSl ?sub1v //=.",
            "VernacExtend",
            "e02c5e37d306c924c86ea325376d95ddc0d1741e"
        ],
        [
            "by apply/FadjoinP; rewrite memv_adjoin /= defQw -galois_connection.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "have mon_p: p \\is monic.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "have mon_pw: pw \\is monic := monic_minPoly _ _.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "rewrite map_monic mulNr -mulrN monicMl // monicE.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "rewrite !(lead_coef_opp, lead_coef_comp) ?size_opp ?size_polyX //.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "by rewrite lead_coefX sz_pw -signr_odd odd_2'nat oddPG mulrN1 opprK.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "have Dp0: p.[0] = - ofQ t pw.[0] ^+ 2.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "rewrite -(rmorph0 (ofQ t)) horner_map hornerM rmorphM.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "by rewrite horner_comp !hornerN hornerX oppr0 rmorphN mulNr.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "have Rpw: pw \\is a polyOver Rn by apply: minPolyOver.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "have Rp: p \\is a polyOver (sQ (x_ n)).",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "apply/polyOver_poly=> j _; rewrite -memRn; apply: polyOverP j => /=.",
            "VernacExtend",
            "da24caf87c1bbbad0538b8be68905ec456c78aa7"
        ],
        [
            "by rewrite rpredM 1?polyOver_comp ?rpredN ?polyOverX.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "have Rp0: ofQ t pw.[0] \\in sQ (x_ n) by rewrite -memRn rpred_horner ?rpred0.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "have [|{mon_p Rp Rp0 Dp0}m lenm p_Rm_0] := xRroot n p (ofQ t pw.[0]).",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "by rewrite /has_Rroot mon_p Rp Rp0 -Dp0 /=.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "have{p_Rm_0} [y Ry pw_y]: {y | y \\in sQ (x_ m) & root (pw ^ ofQ t) y}.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "apply/sig2W; have [y Ry] := p_Rm_0.",
            "VernacExtend",
            "c574574294cc642b01d157e4c8f21ac2f90e4b5d"
        ],
        [
            "rewrite [p]rmorphM /= map_comp_poly !rmorphN /= map_polyX.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "rewrite rootM rootN root_comp hornerN hornerX.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "by case/orP; [exists y | exists (- y)]; rewrite ?rpredN.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "have [u Rz_u Dy]: exists2 u, u \\in Rz & y = ofQ t u.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "have Rz_w: w \\in Rz by rewrite -sub_adjoin1v defQw capvSl.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "have [sg [Gsg _ Dpw]] := galois_factors sRnRz galRz w Rz_w.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "set s := map _ sg in Dpw.",
            "VernacExtend",
            "69a61e99b234580f7b41fa5b9655c87ba9a76f70"
        ],
        [
            "have /mapP[u /mapP[g Gg Du] ->]: y \\in map (ofQ t) s.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "by rewrite -root_prod_XsubC -/(rp C _) -map_rp -[rp _ _]Dpw.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "by exists u; rewrite // Du memv_gal.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "have{pw_y} pw_u: root pw u by rewrite -(fmorph_root (ofQ t)) -Dy.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "exists m => //; exists u; first by rewrite -Dy; apply: sQtrans Ry _.",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "rewrite inE /= Rz_u andbT; apply: contra oddG => Cu.",
            "VernacExtend",
            "634a7639ed2fb7caf62757f84400927f5829b7d5"
        ],
        [
            "suffices: 2.-group 'Gal(Rz / Rn).",
            "VernacExtend",
            "290ed488b5562e885aa2cac56f3a69b4faa0eaa6"
        ],
        [
            "apply: pnat_dvd; rewrite -!galois_dim // ?(galoisS _ galQr) ?sRCz //.",
            "VernacExtend",
            "56c014161b39aecfb3c54301c2409dba4e8e1857"
        ],
        [
            "rewrite dvdn_divLR ?field_dimS ?adim_gt0 //.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "by rewrite mulnC muln_divCA ?field_dimS ?dvdn_mulr.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "congr (2.-group _): evenP; apply/eqP.",
            "VernacExtend",
            "385739dd8a4f73703d3828c61e1780a276bfaa31"
        ],
        [
            "rewrite eqEsubset sPG -indexg_eq1 (pnat_1 _ oddPG) // -sz_pw.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "have (pu := minPoly Rn u): (pu %= pw) || (pu %= 1).",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "by rewrite minPoly_irr ?minPoly_dvdp ?minPolyOver.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "rewrite /= -size_poly_eq1 {1}size_minPoly orbF => /eqp_size <-.",
            "VernacExtend",
            "3c42b53d0efc26db114b00541ac5e7fcb29e6aeb"
        ],
        [
            "rewrite size_minPoly /= adjoin_degreeE (@pnat_dvd _ 2) // -dimCn.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "rewrite dvdn_divLR ?divnK ?adim_gt0 ?field_dimS ?subv_adjoin //.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "exact/FadjoinP.",
            "VernacExtend",
            "ce637ff86bafca5d8359473e8c02af644dcbdc43"
        ],
        [
            "have [w Rz_w deg_w]: exists2 w, w \\in Rz & adjoin_degree Cn w = 2.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "have [P sPG iPG]: exists2 P : {group gal_of Rz}, P \\subset G & #|G : P| = 2.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "have [_ _ [k oG]] := pgroup_pdiv evenG ntG.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "have [P [sPG _ oP]] := normal_pgroup evenG (normal_refl G) (leq_pred _).",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "by exists P => //; rewrite -divgS // oP oG pfactorK // -expnB ?subSnn.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "have [w defQw] := PET_Qz _ [aspace of fixedField P].",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "exists w; first by rewrite -sub_adjoin1v defQw capvSl.",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "rewrite adjoin_degreeE -iPG -dim_fixed_galois // -defQw; congr (\\dim_Cn _).",
            "VernacExtend",
            "a0279e71fd23ac6bde2b8b4402981a70ea719044"
        ],
        [
            "apply/esym/eqP; rewrite eqEsubv adjoinSl ?sub1v //=; apply/FadjoinP.",
            "VernacExtend",
            "da24caf87c1bbbad0538b8be68905ec456c78aa7"
        ],
        [
            "by rewrite memv_adjoin /= defQw -galois_connection.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "have nz2: 2%:R != 0 :> Qt by move/charf0P: (charQ (Q t)) => ->.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "without loss{deg_w} [C'w Cw2]: w Rz_w / w \\notin Cn /\\ w ^+ 2 \\in Cn.",
            "VernacExtend",
            "87d5e7b04148ee8f2e4efcc847e0dfadae0aa4cb"
        ],
        [
            "pose p := minPoly Cn w; pose v := p`_1 / 2%:R.",
            "VernacExtend",
            "311b833fadff89b2f7ed817d3cd7cb6971c96a1e"
        ],
        [
            "have /polyOverP Cp: p \\is a polyOver Cn := minPolyOver Cn w.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "have Cv: v \\in Cn by rewrite rpred_div ?rpred_nat ?Cp.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "move/(_ (v + w)); apply; first by rewrite rpredD // subvP_adjoin.",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "split; first by rewrite rpredDl // -adjoin_deg_eq1 deg_w.",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "rewrite addrC -[_ ^+ 2]subr0 -(rootP (root_minPoly Cn w)) -/p.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "rewrite sqrrD [_ - _]addrAC rpredD ?rpredX // -mulr_natr -mulrA divfK //.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "rewrite [w ^+ 2 + _]addrC mulrC -rpredN opprB horner_coef.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "have /monicP := monic_minPoly Cn w; rewrite lead_coefE size_minPoly deg_w.",
            "VernacExtend",
            "aa9d5fbc682ed874cd64b2543ca6c859b978e924"
        ],
        [
            "by rewrite 2!big_ord_recl big_ord1 => ->; rewrite mulr1 mul1r addrK Cp.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "without loss R'w2: w Rz_w C'w Cw2 / w ^+ 2 \\notin Rn.",
            "VernacExtend",
            "87d5e7b04148ee8f2e4efcc847e0dfadae0aa4cb"
        ],
        [
            "move=> IHw; have [Rw2 | /IHw] := boolP (w ^+ 2 \\in Rn); last exact.",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "have R'it: i_t \\notin Rn by rewrite memRn Dit.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "pose v := 1 + i_t; have R'v: v \\notin Rn by rewrite rpredDl ?rpred1.",
            "VernacExtend",
            "c09d1274557abc8857ed64eb3450db2da906c185"
        ],
        [
            "have Cv: v \\in Cn by rewrite rpredD ?rpred1 ?memv_adjoin.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "have nz_v: v != 0 by rewrite (memPnC R'v) ?rpred0.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "apply: (IHw (v * w)); last 1 [|] || by rewrite fpredMl // subvP_adjoin.",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "by rewrite exprMn rpredM // rpredX.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "rewrite exprMn fpredMr //=; last by rewrite expf_eq0 (memPnC C'w) ?rpred0.",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "by rewrite sqrrD Dit2 expr1n addrC addKr -mulrnAl fpredMl ?rpred_nat.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "pose rect_w2 u v := [/\\ u \\in Rn, v \\in Rn & u + i_t * (v * 2%:R) = w ^+ 2].",
            "VernacExtend",
            "3c5f04de94609049d978298aa02ff35fb35ea7c7"
        ],
        [
            "have{Cw2} [u [v [Ru Rv Dw2]]]: {u : Qt & {v | rect_w2 u v}}.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "rewrite /rect_w2 -(Fadjoin_poly_eq Cw2); set p := Fadjoin_poly Rn i_t _.",
            "VernacExtend",
            "c1f58f36c5711f022b4a54717f37c2782f34a159"
        ],
        [
            "have /polyOverP Rp: p \\is a polyOver Rn by apply: Fadjoin_polyOver.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "exists p`_0, (p`_1 / 2%:R); split; rewrite ?rpred_div ?rpred_nat //.",
            "VernacExtend",
            "85198b026979e45803877e472781f1e71235888a"
        ],
        [
            "rewrite divfK // (horner_coef_wide _ (size_Fadjoin_poly _ _ _)) -/p.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "by rewrite adjoin_degreeE dimCn big_ord_recl big_ord1 mulr1 mulrC.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "pose p := Poly [:: - (ofQ t v ^+ 2); 0; - ofQ t u; 0; 1].",
            "VernacExtend",
            "3c5f04de94609049d978298aa02ff35fb35ea7c7"
        ],
        [
            "have [|m lenm [x Rx px0]] := xRroot n p (ofQ t v).",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "rewrite /has_Rroot 2!unfold_in lead_coefE horner_coef0 -memRn Rv.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "rewrite (@PolyK _ 1) ?oner_eq0 //= !eqxx !rpred0 ?rpred1 ?rpredN //=.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "by rewrite !andbT rpredX -memRn.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "suffices [y Cy Dy2]: {y | y \\in sQ (z_ m) & ofQ t w ^+ 2 == y ^+ 2}.",
            "VernacExtend",
            "290ed488b5562e885aa2cac56f3a69b4faa0eaa6"
        ],
        [
            "exists m => //; exists w; last by rewrite inE C'w.",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "by move: Dy2; rewrite eqf_sqr => /pred2P[]->; rewrite ?rpredN.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "exists (x + i * (ofQ t v / x)).",
            "VernacExtend",
            "1722b5cce8fb717d678438a694c5411fb287c15a"
        ],
        [
            "rewrite rpredD 1?rpredM ?rpred_div //= (sQtrans (x_ m)) //.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "by rewrite (sRle n) // -memRn.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "rewrite rootE /horner (@PolyK _ 1) ?oner_eq0 //= ?addr0 ?mul0r in px0.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "rewrite add0r mul1r -mulrA -expr2 subr_eq0 in px0.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "have nz_x2: x ^+ 2 != 0.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "apply: contraNneq R'w2 => y2_0; rewrite -Dw2 mulrCA.",
            "VernacExtend",
            "56c014161b39aecfb3c54301c2409dba4e8e1857"
        ],
        [
            "suffices /eqP->: v == 0 by rewrite mul0r addr0.",
            "VernacExtend",
            "290ed488b5562e885aa2cac56f3a69b4faa0eaa6"
        ],
        [
            "by rewrite y2_0 mulr0 eq_sym sqrf_eq0 fmorph_eq0 in px0.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "apply/eqP/esym/(mulIf nz_x2); rewrite -exprMn -rmorphX -Dw2 rmorphD rmorphM.",
            "VernacExtend",
            "56c014161b39aecfb3c54301c2409dba4e8e1857"
        ],
        [
            "rewrite Dit mulrDl -expr2 mulrA divfK; last by rewrite expf_eq0 in nz_x2.",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "rewrite mulr_natr addrC sqrrD exprMn Di2 mulN1r -(eqP px0) -mulNr opprB.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "by rewrite -mulrnAl -mulrnAr -rmorphMn -!mulrDl addrAC subrK.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "have inFTA n z: (n_ z <= n)%N -> z = ofQ (z_ n) (inQ (z_ n) z).",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "by move/sCle=> le_zn; rewrite inQ_K ?le_zn.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "pose is_cj n cj := {in R_ n, cj =1 id} /\\ cj (i_ n) = - i_ n.",
            "VernacExtend",
            "3c5f04de94609049d978298aa02ff35fb35ea7c7"
        ],
        [
            "have /all_sig[cj_ /all_and2[cj_R cj_i]] n: {cj : 'AEnd(Q (z_ n)) | is_cj n cj}.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "have cj_P: root (minPoly (R_ n) (i_ n) ^ \\1%VF) (- i_ n).",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "rewrite minp_i -(fmorph_root (ofQ _)) !rmorphD !rmorph1 /= !map_polyXn.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "by rewrite rmorphN inQ_K // rootE hornerD hornerXn hornerC sqrrN Di2 addNr.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "have cj_M: ahom_in fullv (kHomExtend (R_ n) \\1 (i_ n) (- i_ n)).",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "by rewrite -defRi -k1HomE kHomExtendP ?sub1v ?kHom1.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "exists (AHom cj_M); split=> [y /kHomExtend_id->|]; first by rewrite ?id_lfunE.",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "by rewrite (kHomExtend_val (kHom1 1 _)).",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "pose conj_ n z := ofQ _ (cj_ n (inQ _ z)); pose conj z := conj_ (n_ z) z.",
            "VernacExtend",
            "311b833fadff89b2f7ed817d3cd7cb6971c96a1e"
        ],
        [
            "have conjK n m z: (n_ z <= n)%N -> (n <= m)%N -> conj_ m (conj_ n z) = z.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "move/sCle=> le_z_n le_n_m; have /le_z_n/sQ_inQ[u <-] := FTA z.",
            "VernacExtend",
            "ccd83c252dcbae3d56f3d057fcb8217878b51901"
        ],
        [
            "have /QtoQ[Qmn QmnE]: z_ n \\in sQ (z_ m) by rewrite (sCle n).",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "rewrite /conj_ ofQ_K -!QmnE !ofQ_K -!comp_lfunE; congr (ofQ _ _).",
            "VernacExtend",
            "a0279e71fd23ac6bde2b8b4402981a70ea719044"
        ],
        [
            "move: u (memRi n u); apply/eqlfun_inP/FadjoinP; split=> /=.",
            "VernacExtend",
            "b7d55d5cc9e609b184db748f6780e12224901e48"
        ],
        [
            "apply/eqlfun_inP=> y Ry; rewrite !comp_lfunE !cj_R //.",
            "VernacExtend",
            "56c014161b39aecfb3c54301c2409dba4e8e1857"
        ],
        [
            "by move: Ry; rewrite -!sQof2 QmnE !inQ_K //; apply: sRle.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "apply/eqlfunP; rewrite !comp_lfunE cj_i !linearN /=.",
            "VernacExtend",
            "56c014161b39aecfb3c54301c2409dba4e8e1857"
        ],
        [
            "suffices ->: Qmn (i_ n) = i_ m by rewrite cj_i ?opprK.",
            "VernacExtend",
            "290ed488b5562e885aa2cac56f3a69b4faa0eaa6"
        ],
        [
            "by apply: (fmorph_inj (ofQ _)); rewrite QmnE !inQ_K.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "have conjE n z: (n_ z <= n)%N -> conj z = conj_ n z.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "move/leq_trans=> le_zn; set x := conj z; set y := conj_ n z.",
            "VernacExtend",
            "2ed4407a743960054f801c19fd623f6ef3da7a83"
        ],
        [
            "have [m [le_xm le_ym le_nm]] := maxn3 (n_ x) (n_ y) n.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "by have /conjK/=/can_in_inj := leqnn m; apply; rewrite ?conjK // le_zn.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "suffices conjM: rmorphism conj.",
            "VernacExtend",
            "290ed488b5562e885aa2cac56f3a69b4faa0eaa6"
        ],
        [
            "exists (RMorphism conjM) => [z | /(_ i)/eqP/idPn[]] /=.",
            "VernacExtend",
            "3c42b53d0efc26db114b00541ac5e7fcb29e6aeb"
        ],
        [
            "by have [n [/conjE-> /(conjK (n_ z))->]] := maxn3 (n_ (conj z)) (n_ z) 0%N.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "rewrite /conj/conj_ cj_i rmorphN inQ_K // eq_sym -addr_eq0 -mulr2n -mulr_natl.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "rewrite mulf_neq0 ?(memPnC (R'i 0%N)) ?rpred0 //.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "by have /charf0P-> := ftrans (fmorph_char QtoC) (char_num _).",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "do 2?split=> [x y|]; last pose n1 := n_ 1.",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "-",
            "VernacBullet",
            "581cab4bf49fa4b495e569bbda96fc8d28fddcc0"
        ],
        [
            "have [m [le_xm le_ym le_xym]] := maxn3 (n_ x) (n_ y) (n_ (x - y)).",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "by rewrite !(conjE m) // (inFTA m x) // (inFTA m y) -?rmorphB /conj_ ?ofQ_K.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "-",
            "VernacBullet",
            "581cab4bf49fa4b495e569bbda96fc8d28fddcc0"
        ],
        [
            "have [m [le_xm le_ym le_xym]] := maxn3 (n_ x) (n_ y) (n_ (x * y)).",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "by rewrite !(conjE m) // (inFTA m x) // (inFTA m y) -?rmorphM /conj_ ?ofQ_K.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "by rewrite /conj -/n1 -(rmorph1 (ofQ (z_ n1))) /conj_ ofQ_K !rmorph1.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ]
    ],
    "proofs": [
        {
            "name": "rat_algebraic_archimedean",
            "line_nb": 15,
            "steps": [
                {
                    "command": [
                        "move=> algC x.",
                        "VernacExtend",
                        "b1b2cb7a3a617cba67460b4eca1f04de3c1cc716"
                    ]
                },
                {
                    "command": [
                        "without loss x_ge0: x / 0 <= x by rewrite -normr_id; apply; apply: normr_ge0.",
                        "VernacExtend",
                        "87d5e7b04148ee8f2e4efcc847e0dfadae0aa4cb"
                    ]
                },
                {
                    "command": [
                        "have [-> | nz_x] := eqVneq x 0; first by exists 1%N; rewrite normr0.",
                        "VernacExtend",
                        "3763a4b8db689af316a7372b722bb29806ab4fb6"
                    ]
                },
                {
                    "command": [
                        "have [p mon_p px0] := algC x; exists (\\sum_(j < size p) `|numq p`_j|)%N.",
                        "VernacExtend",
                        "aa6483a43139e56e09d22f88e3436461395a69d5"
                    ]
                },
                {
                    "command": [
                        "rewrite ger0_norm // real_ltrNge ?rpred_nat ?ger0_real //.",
                        "VernacExtend",
                        "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
                    ]
                },
                {
                    "command": [
                        "apply: contraL px0 => lb_x; rewrite rootE gtr_eqF // horner_coef size_map_poly.",
                        "VernacExtend",
                        "56c014161b39aecfb3c54301c2409dba4e8e1857"
                    ]
                },
                {
                    "command": [
                        "have x_gt0 k: 0 < x ^+ k by rewrite exprn_gt0 // ltr_def nz_x.",
                        "VernacExtend",
                        "406cde1174359c53bf162a2a18c4eede395555f9"
                    ]
                },
                {
                    "command": [
                        "move: lb_x; rewrite polySpred ?monic_neq0 // !big_ord_recr coef_map /=.",
                        "VernacExtend",
                        "057edeb0967475c7ea5e8c98c449ddc5613eddc1"
                    ]
                },
                {
                    "command": [
                        "rewrite -lead_coefE (monicP mon_p) natrD rmorph1 mul1r => lb_x.",
                        "VernacExtend",
                        "3c42b53d0efc26db114b00541ac5e7fcb29e6aeb"
                    ]
                },
                {
                    "command": [
                        "case: _.-1 (lb_x) => [|n]; first by rewrite !big_ord0 !add0r ltr01.",
                        "VernacExtend",
                        "3763a4b8db689af316a7372b722bb29806ab4fb6"
                    ]
                },
                {
                    "command": [
                        "rewrite -ltr_subl_addl add0r -(ler_pmul2r (x_gt0 n)) -exprS.",
                        "VernacExtend",
                        "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
                    ]
                },
                {
                    "command": [
                        "apply: ltr_le_trans; rewrite mulrDl mul1r ltr_spaddr // -sumrN.",
                        "VernacExtend",
                        "56c014161b39aecfb3c54301c2409dba4e8e1857"
                    ]
                },
                {
                    "command": [
                        "rewrite natr_sum mulr_suml ler_sum // => j _.",
                        "VernacExtend",
                        "3c42b53d0efc26db114b00541ac5e7fcb29e6aeb"
                    ]
                },
                {
                    "command": [
                        "rewrite coef_map /= fmorph_eq_rat (ler_trans (real_ler_norm _)) //.",
                        "VernacExtend",
                        "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
                    ]
                },
                {
                    "command": [
                        "by rewrite rpredN rpredM ?rpred_rat ?rpredX // ger0_real.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "rewrite normrN normrM ler_pmul //=.",
                        "VernacExtend",
                        "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
                    ]
                },
                {
                    "command": [
                        "rewrite normf_div -!intr_norm -!abszE ler_pimulr ?ler0n //.",
                        "VernacExtend",
                        "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
                    ]
                },
                {
                    "command": [
                        "by rewrite invf_le1 ?ler1n ?ltr0n ?absz_gt0 ?denq_eq0.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "rewrite normrX ger0_norm ?(ltrW x_gt0) // ler_weexpn2l ?leq_ord //.",
                        "VernacExtend",
                        "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
                    ]
                },
                {
                    "command": [
                        "by rewrite (ler_trans _ lb_x) // -natrD addn1 ler1n.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "rat_algebraic_decidable",
            "line_nb": 38,
            "steps": [
                {
                    "command": [
                        "have QtoCinj: injective QtoC by apply: fmorph_inj.",
                        "VernacExtend",
                        "406cde1174359c53bf162a2a18c4eede395555f9"
                    ]
                },
                {
                    "command": [
                        "pose ZtoQ : int -> rat := intr; pose ZtoC : int -> C := intr.",
                        "VernacExtend",
                        "311b833fadff89b2f7ed817d3cd7cb6971c96a1e"
                    ]
                },
                {
                    "command": [
                        "have ZtoQinj: injective ZtoQ by apply: intr_inj.",
                        "VernacExtend",
                        "406cde1174359c53bf162a2a18c4eede395555f9"
                    ]
                },
                {
                    "command": [
                        "have defZtoC: ZtoC =1 QtoC \\o ZtoQ by move=> m; rewrite /= rmorph_int.",
                        "VernacExtend",
                        "406cde1174359c53bf162a2a18c4eede395555f9"
                    ]
                },
                {
                    "command": [
                        "move=> algC x; have /sig2_eqW[q mon_q qx0] := algC x; pose d := (size q).-1.",
                        "VernacExtend",
                        "0d2d1f46a70792d5bd924378895a9803e8de88f9"
                    ]
                },
                {
                    "command": [
                        "have [n ub_n]: {n | forall y, root q y -> `|y| < n}.",
                        "VernacExtend",
                        "406cde1174359c53bf162a2a18c4eede395555f9"
                    ]
                },
                {
                    "command": [
                        "have [n1 ub_n1] := monic_Cauchy_bound mon_q.",
                        "VernacExtend",
                        "406cde1174359c53bf162a2a18c4eede395555f9"
                    ]
                },
                {
                    "command": [
                        "have /monic_Cauchy_bound[n2 ub_n2]: (-1) ^+ d *: (q \\Po - 'X) \\is monic.",
                        "VernacExtend",
                        "406cde1174359c53bf162a2a18c4eede395555f9"
                    ]
                },
                {
                    "command": [
                        "rewrite monicE lead_coefZ lead_coef_comp ?size_opp ?size_polyX // -/d.",
                        "VernacExtend",
                        "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
                    ]
                },
                {
                    "command": [
                        "by rewrite lead_coef_opp lead_coefX (monicP mon_q) (mulrC 1) signrMK.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "exists (Num.max n1 n2) => y; rewrite ltrNge ler_normr !ler_maxl rootE.",
                        "VernacExtend",
                        "82d53976234637e3f0907eb36cddf61d028c6306"
                    ]
                },
                {
                    "command": [
                        "apply: contraL => /orP[]/andP[] => [/ub_n1/gtr_eqF->// | _ /ub_n2/gtr_eqF].",
                        "VernacExtend",
                        "3c42b53d0efc26db114b00541ac5e7fcb29e6aeb"
                    ]
                },
                {
                    "command": [
                        "by rewrite hornerZ horner_comp !hornerE opprK mulf_eq0 signr_eq0 => /= ->.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "have [p [a nz_a Dq]] := rat_poly_scale q; pose N := Num.bound `|n * a%:~R|.",
                        "VernacExtend",
                        "fa6ff0c3d4595d45015144bd8c25fb5ac62ed42b"
                    ]
                },
                {
                    "command": [
                        "pose xa : seq rat := [seq (m%:R - N%:R) / a%:~R | m <- iota 0 N.*2].",
                        "VernacExtend",
                        "3c5f04de94609049d978298aa02ff35fb35ea7c7"
                    ]
                },
                {
                    "command": [
                        "have [/sig2_eqW[y _ ->] | xa'x] := @mapP _ _ QtoC xa x; first by left; exists y.",
                        "VernacExtend",
                        "3763a4b8db689af316a7372b722bb29806ab4fb6"
                    ]
                },
                {
                    "command": [
                        "right=> [[y Dx]]; case: xa'x; exists y => //.",
                        "VernacExtend",
                        "04b3eba992c379e413268c1f569b0c4c91eaabb3"
                    ]
                },
                {
                    "command": [
                        "have{x Dx qx0} qy0: root q y by rewrite Dx fmorph_root in qx0.",
                        "VernacExtend",
                        "406cde1174359c53bf162a2a18c4eede395555f9"
                    ]
                },
                {
                    "command": [
                        "have /dvdzP[b Da]: (denq y %| a)%Z.",
                        "VernacExtend",
                        "406cde1174359c53bf162a2a18c4eede395555f9"
                    ]
                },
                {
                    "command": [
                        "have /Gauss_dvdzl <-: coprimez (denq y) (numq y ^+ d).",
                        "VernacExtend",
                        "406cde1174359c53bf162a2a18c4eede395555f9"
                    ]
                },
                {
                    "command": [
                        "by rewrite coprimez_sym coprimez_expl //; apply: coprime_num_den.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "pose p1 : {poly int} := a *: 'X^d - p.",
                        "VernacExtend",
                        "3c5f04de94609049d978298aa02ff35fb35ea7c7"
                    ]
                },
                {
                    "command": [
                        "have Dp1: p1 ^ intr = a%:~R *: ('X^d - q).",
                        "VernacExtend",
                        "406cde1174359c53bf162a2a18c4eede395555f9"
                    ]
                },
                {
                    "command": [
                        "by rewrite rmorphB linearZ /= map_polyXn scalerBr Dq scalerKV ?intr_eq0.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "apply/dvdzP; exists (\\sum_(i < d) p1`_i * numq y ^+ i * denq y ^+ (d - i.+1)).",
                        "VernacExtend",
                        "8bee221ba47f959820148be04b7b16729eba5d2f"
                    ]
                },
                {
                    "command": [
                        "apply: ZtoQinj; rewrite /ZtoQ rmorphM mulr_suml rmorph_sum /=.",
                        "VernacExtend",
                        "56c014161b39aecfb3c54301c2409dba4e8e1857"
                    ]
                },
                {
                    "command": [
                        "transitivity ((p1 ^ intr).[y] * (denq y ^+ d)%:~R).",
                        "VernacExtend",
                        "672f32a19b8cee2096095ed2a8ad50cb5c49a4f9"
                    ]
                },
                {
                    "command": [
                        "rewrite Dp1 !hornerE hornerXn (rootP qy0) subr0.",
                        "VernacExtend",
                        "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
                    ]
                },
                {
                    "command": [
                        "by rewrite !rmorphX /= numqE exprMn mulrA.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "have sz_p1: (size (p1 ^ ZtoQ)%R <= d)%N.",
                        "VernacExtend",
                        "406cde1174359c53bf162a2a18c4eede395555f9"
                    ]
                },
                {
                    "command": [
                        "rewrite Dp1 size_scale ?intr_eq0 //; apply/leq_sizeP=> i.",
                        "VernacExtend",
                        "634a7639ed2fb7caf62757f84400927f5829b7d5"
                    ]
                },
                {
                    "command": [
                        "rewrite leq_eqVlt eq_sym -polySpred ?monic_neq0 // coefB coefXn.",
                        "VernacExtend",
                        "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
                    ]
                },
                {
                    "command": [
                        "case: eqP => [-> _ | _ /(nth_default 0)->//].",
                        "VernacExtend",
                        "e00fff71ff314c991514fc71c41a3556702e444a"
                    ]
                },
                {
                    "command": [
                        "by rewrite -lead_coefE (monicP mon_q).",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "rewrite (horner_coef_wide _ sz_p1) mulr_suml; apply: eq_bigr => i _.",
                        "VernacExtend",
                        "634a7639ed2fb7caf62757f84400927f5829b7d5"
                    ]
                },
                {
                    "command": [
                        "rewrite -!mulrA -exprSr coef_map !rmorphM !rmorphX /= numqE exprMn -mulrA.",
                        "VernacExtend",
                        "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
                    ]
                },
                {
                    "command": [
                        "by rewrite -exprD -addSnnS subnKC.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "pose m := `|(numq y * b + N)%R|%N.",
                        "VernacExtend",
                        "3c5f04de94609049d978298aa02ff35fb35ea7c7"
                    ]
                },
                {
                    "command": [
                        "have Dm: m%:R = `|y * a%:~R + N%:R|.",
                        "VernacExtend",
                        "406cde1174359c53bf162a2a18c4eede395555f9"
                    ]
                },
                {
                    "command": [
                        "by rewrite pmulrn abszE intr_norm Da rmorphD !rmorphM /= numqE mulrAC mulrA.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "have ltr_Qnat n1 n2 : (n1%:R < n2%:R :> rat = _) := ltr_nat _ n1 n2.",
                        "VernacExtend",
                        "406cde1174359c53bf162a2a18c4eede395555f9"
                    ]
                },
                {
                    "command": [
                        "have ub_y: `|y * a%:~R| < N%:R.",
                        "VernacExtend",
                        "406cde1174359c53bf162a2a18c4eede395555f9"
                    ]
                },
                {
                    "command": [
                        "apply: ler_lt_trans (archi_boundP (normr_ge0 _)); rewrite !normrM.",
                        "VernacExtend",
                        "56c014161b39aecfb3c54301c2409dba4e8e1857"
                    ]
                },
                {
                    "command": [
                        "by rewrite ler_pmul ?normr_ge0 // (ler_trans _ (ler_norm n)) ?ltrW ?ub_n.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "apply/mapP; exists m.",
                        "VernacExtend",
                        "d6b5519a7c4a57fe85fc5d9529e6950ccf717c30"
                    ]
                },
                {
                    "command": [
                        "rewrite mem_iota /= add0n -addnn -ltr_Qnat Dm natrD.",
                        "VernacExtend",
                        "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
                    ]
                },
                {
                    "command": [
                        "by rewrite (ler_lt_trans (ler_norm_add _ _)) // normr_nat ltr_add2r.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "rewrite Dm ger0_norm ?addrK ?mulfK ?intr_eq0 // -ler_subl_addl sub0r.",
                        "VernacExtend",
                        "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
                    ]
                },
                {
                    "command": [
                        "by rewrite (ler_trans (ler_norm _)) ?normrN ?ltrW.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "alg_integral",
            "line_nb": 128,
            "steps": [
                {
                    "command": [
                        "move=> x; have [/polyOver1P[p Dp]] := (minPolyOver 1 x, monic_minPoly 1 x).",
                        "VernacExtend",
                        "ccd83c252dcbae3d56f3d057fcb8217878b51901"
                    ]
                },
                {
                    "command": [
                        "by rewrite Dp map_monic; exists p; rewrite // -Dp root_minPoly.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        }
    ]
}