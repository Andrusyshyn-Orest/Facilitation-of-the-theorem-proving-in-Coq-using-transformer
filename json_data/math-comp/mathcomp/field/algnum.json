{
    "filename": "mathcomp/field/algnum.v",
    "coq_project": "math-comp",
    "vernac_cmds": [
        [
            "Require Import mathcomp.ssreflect.ssreflect.",
            "VernacRequire",
            "85e251063dc2b5a9653f7bb76dcd176ed36b42a9"
        ],
        [
            "From mathcomp Require Import ssrbool ssrfun eqtype ssrnat seq path div choice.",
            "VernacRequire",
            "28f7cc4746e8608411d0ebf22fadc6cf30a98194"
        ],
        [
            "From mathcomp Require Import fintype tuple finfun bigop prime ssralg finalg zmodp poly.",
            "VernacRequire",
            "480d8c77adfa67e92c9219e18ff53a7e552c9139"
        ],
        [
            "From mathcomp Require Import ssrnum ssrint rat polydiv intdiv algC matrix mxalgebra mxpoly.",
            "VernacRequire",
            "bb7f46da0c03d8c95e439471bd460a98d9df4f0e"
        ],
        [
            "From mathcomp Require Import vector falgebra fieldext separable galois cyclotomic.",
            "VernacRequire",
            "bbb674c622b030bbb8af5f404aaac0f6f64481c8"
        ],
        [
            "Set Implicit Arguments.",
            "VernacSetOption",
            "9e84ff8896f028601d8aded48c1d4aebe60aa584"
        ],
        [
            "Unset Strict Implicit.",
            "VernacUnsetOption",
            "2842adaf6959318f2042805935c46f513bdc0348"
        ],
        [
            "Unset Printing Implicit Defensive.",
            "VernacUnsetOption",
            "444e5f0be4b25d9b1fd556943a447ec10046d151"
        ],
        [
            "Import GRing.Theory Num.Theory.",
            "VernacImport",
            "b7c34fb48ecb00de4262e619b1ca3ecacdf18e53"
        ],
        [
            "Local Open Scope ring_scope.",
            "VernacOpenCloseScope",
            "fb9da4a291533574d328be8c8a69d90a14641928"
        ],
        [
            "Local Notation ZtoQ := (intr : int -> rat).",
            "VernacSyntacticDefinition",
            "c34d7df6f6f06fe234c02ea031702940bfaebabc"
        ],
        [
            "Local Notation ZtoC := (intr : int -> algC).",
            "VernacSyntacticDefinition",
            "a19db6d8b2aa708c9cfc84784c43f4a468cd4268"
        ],
        [
            "Local Notation QtoC := (ratr : rat -> algC).",
            "VernacSyntacticDefinition",
            "e70ad9a1164cdaacbd24460c0933188b8f0c96e7"
        ],
        [
            "Local Notation intrp := (map_poly intr).",
            "VernacSyntacticDefinition",
            "63a4877da3f5cbac65596a0ecfcf1e3ed88990bf"
        ],
        [
            "Local Notation pZtoQ := (map_poly ZtoQ).",
            "VernacSyntacticDefinition",
            "cbed48c83552f3eb5804fe7e592e6d13be1b8b94"
        ],
        [
            "Local Notation pZtoC := (map_poly ZtoC).",
            "VernacSyntacticDefinition",
            "8d2ec9ab77e8c502a231d56826f25e600a5a4a06"
        ],
        [
            "Local Notation pQtoC := (map_poly ratr).",
            "VernacSyntacticDefinition",
            "5636bd38b330ad0c188fb8eaed286000e21cd854"
        ],
        [
            "Local Hint Resolve (intr_inj : injective ZtoC) : core.",
            "VernacHints",
            "380c6553ac94f694e7b9a3b30f62171c59616d7c"
        ],
        [
            "Local Notation QtoCm := [rmorphism of QtoC].",
            "VernacSyntacticDefinition",
            "030e59a88f4d3ddf4291ba36ef9664e8312dd821"
        ],
        [
            "Lemma algC_PET (s : seq algC) : {z | exists a : nat ^ size s, z = \\sum_(i < size s) s`_i *+ a i & exists ps, s = [seq (pQtoC p).[z] | p <- ps]}.",
            "VernacStartTheoremProof",
            "4b6c62d4398f3b5bac611e62a2d29ffc25b80ee3"
        ],
        [
            "elim: s => [|x s [z /sig_eqW[a Dz] /sig_eqW[ps Ds]]].",
            "VernacExtend",
            "e686a1895f1799b840b76242f931100819a9ad6c"
        ],
        [
            "by exists 0; [exists [ffun _ => 2]; rewrite big_ord0 | exists nil].",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "have r_exists (y : algC): {r | r != 0 & root (pQtoC r) y}.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "have [r [_ mon_r] dv_r] := minCpolyP y.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "by exists r; rewrite ?monic_neq0 ?dv_r.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "suffices /sig_eqW[[n [|px [|pz []]]]// [Dpx Dpz]]: exists np, let zn := x *+ np.1 + z in [:: x; z] = [seq (pQtoC p).[zn] | p <- np.2].",
            "VernacExtend",
            "290ed488b5562e885aa2cac56f3a69b4faa0eaa6"
        ],
        [
            "-",
            "VernacBullet",
            "581cab4bf49fa4b495e569bbda96fc8d28fddcc0"
        ],
        [
            "exists (x *+ n + z).",
            "VernacExtend",
            "9e66987d04b9fc2629b146c8929af4b4b6490c04"
        ],
        [
            "exists [ffun i => oapp a n (unlift ord0 i)].",
            "VernacExtend",
            "b18c334c1db02499d0e661cba91866f34a22b40b"
        ],
        [
            "rewrite /= big_ord_recl ffunE unlift_none Dz; congr (_ + _).",
            "VernacExtend",
            "a0279e71fd23ac6bde2b8b4402981a70ea719044"
        ],
        [
            "by apply: eq_bigr => i _; rewrite ffunE liftK.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "exists (px :: [seq p \\Po pz | p <- ps]); rewrite /= -Dpx; congr (_ :: _).",
            "VernacExtend",
            "2d6e1a3c1f9e5f17a2d2f16c62c026bd5ec1127d"
        ],
        [
            "rewrite -map_comp Ds; apply: eq_map => p /=.",
            "VernacExtend",
            "634a7639ed2fb7caf62757f84400927f5829b7d5"
        ],
        [
            "by rewrite map_comp_poly horner_comp -Dpz.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "have [rx nz_rx rx0] := r_exists x.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "have [rz nz_rz rz0] := r_exists (- z).",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "have char0_Q: [char rat] =i pred0 by apply: char_num.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "have [n [[pz Dpz] [px Dpx]]] := char0_PET nz_rz rz0 nz_rx rx0 char0_Q.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "by exists (n, [:: px; - pz]); rewrite /= !raddfN hornerN -[z]opprK Dpz Dpx.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Canonical subfx_unitAlgType (F L : fieldType) iota (z : L) p := Eval hnf in [unitAlgType F of subFExtend iota z p].",
            "VernacDefinition",
            "2ec11766f38435734b8609438432cafa6cae39dc"
        ],
        [
            "Lemma num_field_exists (s : seq algC) : {Qs : fieldExtType rat & {QsC : {rmorphism Qs -> algC} & {s1 : seq Qs | map QsC s1 = s & <<1 & s1>>%VS = fullv}}}.",
            "VernacStartTheoremProof",
            "c6d00728d58f87f4651c9cd5c6b5509acfa03964"
        ],
        [
            "have [z /sig_eqW[a Dz] /sig_eqW[ps Ds]] := algC_PET s.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "suffices [Qs [QsC [z1 z1C z1gen]]]: {Qs : fieldExtType rat & {QsC : {rmorphism Qs -> algC} & {z1 : Qs | QsC z1 = z & forall xx, exists p, fieldExt_horner z1 p = xx}}}.",
            "VernacExtend",
            "290ed488b5562e885aa2cac56f3a69b4faa0eaa6"
        ],
        [
            "-",
            "VernacBullet",
            "581cab4bf49fa4b495e569bbda96fc8d28fddcc0"
        ],
        [
            "set inQs := fieldExt_horner z1 in z1gen *; pose s1 := map inQs ps.",
            "VernacExtend",
            "dda58a04ca4da9adf6d016079f462c4d6ff69ca8"
        ],
        [
            "have inQsK p: QsC (inQs p) = (pQtoC p).[z].",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "rewrite /= -horner_map z1C -map_poly_comp; congr _.[z].",
            "VernacExtend",
            "a0279e71fd23ac6bde2b8b4402981a70ea719044"
        ],
        [
            "apply: eq_map_poly => b /=; apply: canRL (mulfK _) _.",
            "VernacExtend",
            "8d9dae45eeb3a769b8a865cef8ae476451f63802"
        ],
        [
            "by rewrite intr_eq0 denq_eq0.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "rewrite /= mulrzr -rmorphMz scalerMzl -{1}[b]divq_num_den -mulrzr.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "by rewrite divfK ?intr_eq0 ?denq_eq0 // scaler_int rmorph_int.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "exists Qs, QsC, s1; first by rewrite -map_comp Ds (eq_map inQsK).",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "have sz_ps: size ps = size s by rewrite Ds size_map.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "apply/vspaceP=> x; rewrite memvf; have [p {x}<-] := z1gen x.",
            "VernacExtend",
            "88e21057fc6b7102e6280fe7858222ef45ddbdf0"
        ],
        [
            "elim/poly_ind: p => [|p b ApQs]; first by rewrite /inQs rmorph0 mem0v.",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "rewrite /inQs rmorphD rmorphM /= fieldExt_hornerX fieldExt_hornerC -/inQs /=.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "suffices ->: z1 = \\sum_(i < size s) s1`_i *+ a i.",
            "VernacExtend",
            "290ed488b5562e885aa2cac56f3a69b4faa0eaa6"
        ],
        [
            "rewrite memvD ?memvZ ?mem1v ?memvM ?memv_suml // => i _.",
            "VernacExtend",
            "3c42b53d0efc26db114b00541ac5e7fcb29e6aeb"
        ],
        [
            "by rewrite rpredMn ?seqv_sub_adjoin ?mem_nth // size_map sz_ps.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "apply: (fmorph_inj QsC); rewrite z1C Dz rmorph_sum; apply: eq_bigr => i _.",
            "VernacExtend",
            "da24caf87c1bbbad0538b8be68905ec456c78aa7"
        ],
        [
            "by rewrite rmorphMn {1}Ds !(nth_map 0) ?sz_ps //= inQsK.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "have [r [Dr /monic_neq0 nz_r] dv_r] := minCpolyP z.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "have rz0: root (pQtoC r) z by rewrite dv_r.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "have irr_r: irreducible_poly r.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "by apply/(subfx_irreducibleP rz0 nz_r)=> q qz0 nzq; rewrite dvdp_leq // -dv_r.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "exists (SubFieldExtType rz0 irr_r), (subfx_inj_rmorphism QtoCm z r).",
            "VernacExtend",
            "a0be94b25add645579610a7b298d6ce416e6b04a"
        ],
        [
            "exists (subfx_root _ z r) => [|x]; first exact: subfx_inj_root.",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "by have{x} [p ->] := subfxEroot rz0 nz_r x; exists p.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Definition in_Crat_span s x := exists a : rat ^ size s, x = \\sum_i QtoC (a i) * s`_i.",
            "VernacDefinition",
            "b2347c18df7a6f333eada4455aca24412772bf2d"
        ],
        [
            "Fact Crat_span_subproof s x : decidable (in_Crat_span s x).",
            "VernacStartTheoremProof",
            "4103fe49b0a552351a5a695cf2fb818b9f688564"
        ],
        [
            "have [Qxs [QxsC [[|x1 s1] // [<- <-] {x s} _]]] := num_field_exists (x :: s).",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "have QxsC_Z a zz: QxsC (a *: zz) = QtoC a * QxsC zz.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "rewrite mulrAC; apply: (canRL (mulfK _)); first by rewrite intr_eq0 denq_eq0.",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "by rewrite mulrzr mulrzl -!rmorphMz scalerMzl -mulrzr -numqE scaler_int.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "apply: decP (x1 \\in <<in_tuple s1>>%VS) _; rewrite /in_Crat_span size_map.",
            "VernacExtend",
            "56c014161b39aecfb3c54301c2409dba4e8e1857"
        ],
        [
            "apply: (iffP idP) => [/coord_span-> | [a Dx]].",
            "VernacExtend",
            "4bd6fa79b17bcd2bfb7af091fb325367a20385d6"
        ],
        [
            "move: (coord _) => a; exists [ffun i => a i x1]; rewrite rmorph_sum.",
            "VernacExtend",
            "a8f0ea3bf0b2e85b135094366dd15585d6bbfb9b"
        ],
        [
            "by apply: eq_bigr => i _; rewrite ffunE (nth_map 0).",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "have{Dx} ->: x1 = \\sum_i a i *: s1`_i.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "apply: (fmorph_inj QxsC); rewrite Dx rmorph_sum.",
            "VernacExtend",
            "56c014161b39aecfb3c54301c2409dba4e8e1857"
        ],
        [
            "by apply: eq_bigr => i _; rewrite QxsC_Z (nth_map 0).",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "by apply: memv_suml => i _; rewrite memvZ ?memv_span ?mem_nth.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Definition Crat_span s : pred algC := Crat_span_subproof s.",
            "VernacDefinition",
            "5ad9a80e1029accc5c28031dfdf093f7652f2027"
        ],
        [
            "Lemma Crat_spanP s x : reflect (in_Crat_span s x) (x \\in Crat_span s).",
            "VernacStartTheoremProof",
            "ccb04eff35e6d95eeb0dbb555f1cdfb80a81d471"
        ],
        [
            "exact: sumboolP.",
            "VernacExtend",
            "ce637ff86bafca5d8359473e8c02af644dcbdc43"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Fact Crat_span_key s : pred_key (Crat_span s).",
            "VernacStartTheoremProof",
            "11d3804ab277cbc8f635422e24879fe54ad11507"
        ],
        [
            "by [].",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Canonical Crat_span_keyed s := KeyedPred (Crat_span_key s).",
            "VernacDefinition",
            "2e8c7b43d7aded054a8abc1998ddc912b11da70e"
        ],
        [
            "Lemma mem_Crat_span s : {subset s <= Crat_span s}.",
            "VernacStartTheoremProof",
            "f496baba51df1b0669d42ceec70021096b82c231"
        ],
        [
            "move=> _ /(nthP 0)[ix ltxs <-]; pose i0 := Ordinal ltxs.",
            "VernacExtend",
            "fef3c4a8f7fcf70b0824f3cce5fb58f2e0ef07fd"
        ],
        [
            "apply/Crat_spanP; exists [ffun i => (i == i0)%:R].",
            "VernacExtend",
            "3880d457db694c1b9897b9a879a05955b45d5510"
        ],
        [
            "rewrite (bigD1 i0) //= ffunE eqxx // rmorph1 mul1r.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "by rewrite big1 ?addr0 // => i; rewrite ffunE rmorph_nat mulr_natl => /negbTE->.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Fact Crat_span_zmod_closed s : zmod_closed (Crat_span s).",
            "VernacStartTheoremProof",
            "e6ac9e5444bca64dfa55f3f51e0a1c02d32e0ea7"
        ],
        [
            "split=> [|_ _ /Crat_spanP[x ->] /Crat_spanP[y ->]].",
            "VernacExtend",
            "3c42b53d0efc26db114b00541ac5e7fcb29e6aeb"
        ],
        [
            "apply/Crat_spanP; exists 0.",
            "VernacExtend",
            "21cb72e03041990491a307522af850ef917c0b03"
        ],
        [
            "by apply/esym/big1=> i _; rewrite ffunE rmorph0 mul0r.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "apply/Crat_spanP; exists (x - y); rewrite -sumrB; apply: eq_bigr => i _.",
            "VernacExtend",
            "e4c544f551090040dcc68ecc99b283594be84ff1"
        ],
        [
            "by rewrite -mulrBl -rmorphB !ffunE.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Canonical Crat_span_opprPred s := OpprPred (Crat_span_zmod_closed s).",
            "VernacDefinition",
            "786d8961b1ab14856575a7a2a42a39556697c3d0"
        ],
        [
            "Canonical Crat_span_addrPred s := AddrPred (Crat_span_zmod_closed s).",
            "VernacDefinition",
            "3cb50188f830345145a07582e2d26c8e21974cb6"
        ],
        [
            "Canonical Crat_span_zmodPred s := ZmodPred (Crat_span_zmod_closed s).",
            "VernacDefinition",
            "0c877dffd85e14a89ec645e97f8b14ca1d4ef2ec"
        ],
        [
            "Section MoreAlgCaut.",
            "VernacBeginSection",
            "8d884c3e3fc91128c88f793c71719505d1e04656"
        ],
        [
            "Implicit Type rR : unitRingType.",
            "VernacReserve",
            "dbac084d9de631b2ea58182ec1de714c9f4705b8"
        ],
        [
            "Lemma alg_num_field (Qz : fieldExtType rat) a : a%:A = ratr a :> Qz.",
            "VernacStartTheoremProof",
            "2607d6dfff2e2f520dea08c5676fd12a9974a938"
        ],
        [
            "by rewrite -in_algE fmorph_eq_rat.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma rmorphZ_num (Qz : fieldExtType rat) rR (f : {rmorphism Qz -> rR}) a x : f (a *: x) = ratr a * f x.",
            "VernacStartTheoremProof",
            "bd6b08f263ece9775c449e22a724e897e4f1b64e"
        ],
        [
            "by rewrite -mulr_algl rmorphM alg_num_field fmorph_rat.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma fmorph_numZ (Qz1 Qz2 : fieldExtType rat) (f : {rmorphism Qz1 -> Qz2}) : scalable f.",
            "VernacStartTheoremProof",
            "3541a362df8c6e9e7bc2c008cfca070030eac37d"
        ],
        [
            "by move=> a x; rewrite rmorphZ_num -alg_num_field mulr_algl.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Definition NumLRmorphism Qz1 Qz2 f := AddLRMorphism (@fmorph_numZ Qz1 Qz2 f).",
            "VernacDefinition",
            "8dad8a539d830a3b66671c0d80ea9d9b9c5a4d43"
        ],
        [
            "End MoreAlgCaut.",
            "VernacEndSegment",
            "76d3eec14f2be203f20b0c04d9f0e5c91f061e20"
        ],
        [
            "Section NumFieldProj.",
            "VernacBeginSection",
            "e4822c1826161a09b31444e031332c80fd5c31ca"
        ],
        [
            "Variables (Qn : fieldExtType rat) (QnC : {rmorphism Qn -> algC}).",
            "VernacAssumption",
            "3ddcc5527539c9d2af898e8b2fb360c2f7b26eb9"
        ],
        [
            "Lemma Crat_spanZ b a : {in Crat_span b, forall x, ratr a * x \\in Crat_span b}.",
            "VernacStartTheoremProof",
            "577a977fb9815c30fbadd179a564dffab6b6b830"
        ],
        [
            "move=> _ /Crat_spanP[a1 ->]; apply/Crat_spanP; exists [ffun i => a * a1 i].",
            "VernacExtend",
            "9f7d315d69958f06ba946decf97b54379cd62abc"
        ],
        [
            "by rewrite mulr_sumr; apply: eq_bigr => i _; rewrite ffunE mulrA -rmorphM.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma Crat_spanM b : {in Crat & Crat_span b, forall a x, a * x \\in Crat_span b}.",
            "VernacStartTheoremProof",
            "43ccd29a20e281372482389eac44ed7e0739f40e"
        ],
        [
            "by move=> _ x /CratP[a ->]; apply: Crat_spanZ.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma num_field_proj : {CtoQn | CtoQn 0 = 0 & cancel QnC CtoQn}.",
            "VernacStartTheoremProof",
            "41520f2e70d35dee0f49756b091591d1d74ed24c"
        ],
        [
            "pose b := vbasis {:Qn}.",
            "VernacExtend",
            "3c5f04de94609049d978298aa02ff35fb35ea7c7"
        ],
        [
            "have Qn_bC (u : {x | x \\in Crat_span (map QnC b)}): {y | QnC y = sval u}.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "case: u => _ /= /Crat_spanP/sig_eqW[a ->].",
            "VernacExtend",
            "e00fff71ff314c991514fc71c41a3556702e444a"
        ],
        [
            "exists (\\sum_i a i *: b`_i); rewrite rmorph_sum; apply: eq_bigr => i _.",
            "VernacExtend",
            "db26aa6727af727e908464d2cc564b40f6a4e15c"
        ],
        [
            "by rewrite rmorphZ_num (nth_map 0) // -(size_map QnC).",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "pose CtoQn x := oapp (fun u => sval (Qn_bC u)) 0 (insub x).",
            "VernacExtend",
            "3c5f04de94609049d978298aa02ff35fb35ea7c7"
        ],
        [
            "suffices QnCK: cancel QnC CtoQn by exists CtoQn; rewrite // -(rmorph0 QnC).",
            "VernacExtend",
            "290ed488b5562e885aa2cac56f3a69b4faa0eaa6"
        ],
        [
            "move=> x; rewrite /CtoQn insubT => /= [|Qn_x]; last first.",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "by case: (Qn_bC _) => x1 /= /fmorph_inj.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "rewrite (coord_vbasis (memvf x)) rmorph_sum rpred_sum // => i _.",
            "VernacExtend",
            "3c42b53d0efc26db114b00541ac5e7fcb29e6aeb"
        ],
        [
            "rewrite rmorphZ_num Crat_spanZ ?mem_Crat_span // -/b.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "by rewrite -tnth_nth -tnth_map mem_tnth.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma restrict_aut_to_num_field (nu : {rmorphism algC -> algC}) : (forall x, exists y, nu (QnC x) = QnC y) -> {nu0 : {lrmorphism Qn -> Qn} | {morph QnC : x / nu0 x >-> nu x}}.",
            "VernacStartTheoremProof",
            "820b8d8b26b8235b9680f24a80505a7f7c039091"
        ],
        [
            "move=> Qn_nu; pose nu0 x := sval (sig_eqW (Qn_nu x)).",
            "VernacExtend",
            "fef3c4a8f7fcf70b0824f3cce5fb58f2e0ef07fd"
        ],
        [
            "have QnC_nu0: {morph QnC : x / nu0 x >-> nu x}.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "by rewrite /nu0 => x; case: (sig_eqW _).",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "suffices nu0M: rmorphism nu0 by exists (NumLRmorphism (RMorphism nu0M)).",
            "VernacExtend",
            "290ed488b5562e885aa2cac56f3a69b4faa0eaa6"
        ],
        [
            "do 2?split=> [x y|]; apply: (fmorph_inj QnC); rewrite ?QnC_nu0 ?rmorph1 //.",
            "VernacExtend",
            "91390c987889ce5a6686f59ba64c8862af932f2e"
        ],
        [
            "by rewrite ?(rmorphB, QnC_nu0).",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "by rewrite ?(rmorphM, QnC_nu0).",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma map_Qnum_poly (nu : {rmorphism algC -> algC}) p : p \\in polyOver 1%VS -> map_poly (nu \\o QnC) p = (map_poly QnC p).",
            "VernacStartTheoremProof",
            "98c7bd5b1077913ee3a1b5a8c6eb596c723caefd"
        ],
        [
            "move=> Qp; apply/polyP=> i; rewrite /= !coef_map /=.",
            "VernacExtend",
            "f7feb259d6220ca40e8a86b90bd06f137aa140ac"
        ],
        [
            "have /vlineP[a ->]: p`_i \\in 1%VS by apply: polyOverP.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "by rewrite alg_num_field !fmorph_rat.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "End NumFieldProj.",
            "VernacEndSegment",
            "4356695b4019199af09071cee4667be19df49b30"
        ],
        [
            "Lemma restrict_aut_to_normal_num_field (Qn : splittingFieldType rat) (QnC : {rmorphism Qn -> algC})(nu : {rmorphism algC -> algC}) : {nu0 : {lrmorphism Qn -> Qn} | {morph QnC : x / nu0 x >-> nu x}}.",
            "VernacStartTheoremProof",
            "ee1b9cb8feaf207cc07654e012973bc55435dcb9"
        ],
        [
            "apply: restrict_aut_to_num_field => x.",
            "VernacExtend",
            "4bd6fa79b17bcd2bfb7af091fb325367a20385d6"
        ],
        [
            "case: (splitting_field_normal 1%AS x) => rs /eqP Hrs.",
            "VernacExtend",
            "e00fff71ff314c991514fc71c41a3556702e444a"
        ],
        [
            "have: root (map_poly (nu \\o QnC) (minPoly 1%AS x)) (nu (QnC x)).",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "by rewrite fmorph_root root_minPoly.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "rewrite map_Qnum_poly ?minPolyOver // Hrs.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "rewrite [map_poly _ _](_:_ = \\prod_(y <- map QnC rs) ('X - y%:P)); last first.",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "rewrite big_map rmorph_prod; apply eq_bigr => i _.",
            "VernacExtend",
            "80e7cce19c53eb5d5a21aafd83e552d37e23084a"
        ],
        [
            "by rewrite rmorphB /= map_polyX map_polyC.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "rewrite root_prod_XsubC.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "by case/mapP => y _ ?; exists y.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma dec_Cint_span (V : vectType algC) m (s : m.-tuple V) v : decidable (inIntSpan s v).",
            "VernacStartTheoremProof",
            "4d306ec7793b28835304dca6f82b1835b456bda1"
        ],
        [
            "have s_s (i : 'I_m): s`_i \\in <<s>>%VS by rewrite memv_span ?memt_nth.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "have s_Zs a: \\sum_(i < m) s`_i *~ a i \\in <<s>>%VS.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "by rewrite memv_suml // => i _; rewrite -scaler_int memvZ.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "case s_v: (v \\in <<s>>%VS); last by right=> [[a Dv]]; rewrite Dv s_Zs in s_v.",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "pose IzT := {: 'I_m * 'I_(\\dim <<s>>)}; pose Iz := 'I_#|IzT|.",
            "VernacExtend",
            "311b833fadff89b2f7ed817d3cd7cb6971c96a1e"
        ],
        [
            "pose b := vbasis <<s>>.",
            "VernacExtend",
            "3c5f04de94609049d978298aa02ff35fb35ea7c7"
        ],
        [
            "pose z_s := [seq coord b ij.2 (tnth s ij.1) | ij : IzT].",
            "VernacExtend",
            "3c5f04de94609049d978298aa02ff35fb35ea7c7"
        ],
        [
            "pose rank2 j i: Iz := enum_rank (i, j); pose val21 (p : Iz) := (enum_val p).1.",
            "VernacExtend",
            "311b833fadff89b2f7ed817d3cd7cb6971c96a1e"
        ],
        [
            "pose inQzs w := [forall j, Crat_span z_s (coord b j w)].",
            "VernacExtend",
            "3c5f04de94609049d978298aa02ff35fb35ea7c7"
        ],
        [
            "have enum_pairK j: {in predT, cancel (rank2 j) val21}.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "by move=> i; rewrite /val21 enum_rankK.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "have Qz_Zs a: inQzs (\\sum_(i < m) s`_i *~ a i).",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "apply/forallP=> j; apply/Crat_spanP; rewrite /in_Crat_span size_map -cardE.",
            "VernacExtend",
            "7d4450169cd8610cf3ff90cd2eeb2f84258ab13d"
        ],
        [
            "exists [ffun ij => (a (val21 ij))%:Q *+ ((enum_val ij).2 == j)].",
            "VernacExtend",
            "9404643d3daff8aa726ed3dffc24ea1ac2e9a324"
        ],
        [
            "rewrite linear_sum {1}(reindex_onto _ _ (enum_pairK j)).",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "rewrite big_mkcond; apply: eq_bigr => ij _ /=; rewrite nth_image (tnth_nth 0).",
            "VernacExtend",
            "fe8f197e86415fc7f0a74eda9d312128b9473eda"
        ],
        [
            "rewrite (can2_eq (@enum_rankK _) (@enum_valK _)) ffunE -scaler_int /val21.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "case Dij: (enum_val ij) => [i j1]; rewrite xpair_eqE eqxx /= eq_sym -mulrb.",
            "VernacExtend",
            "90a2acb29b7a5304b0ab6ba5269c420638ddef63"
        ],
        [
            "by rewrite linearZ rmorphMn rmorph_int mulrnAl; case: eqP => // ->.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "case Qz_v: (inQzs v); last by right=> [[a Dv]]; rewrite Dv Qz_Zs in Qz_v.",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "have [Qz [QzC [z1s Dz_s _]]] := num_field_exists z_s.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "have sz_z1s: size z1s = #|IzT| by rewrite -(size_map QzC) Dz_s size_map cardE.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "have xv j: {x | coord b j v = QzC x}.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "apply: sig_eqW; have /Crat_spanP[x ->] := forallP Qz_v j.",
            "VernacExtend",
            "c574574294cc642b01d157e4c8f21ac2f90e4b5d"
        ],
        [
            "exists (\\sum_ij x ij *: z1s`_ij); rewrite rmorph_sum.",
            "VernacExtend",
            "c5abb1bcc5cc1499dbf1103d83bcbbf3c8c3e0e2"
        ],
        [
            "apply: eq_bigr => ij _; rewrite mulrAC.",
            "VernacExtend",
            "56c014161b39aecfb3c54301c2409dba4e8e1857"
        ],
        [
            "apply: canLR (mulfK _) _; first by rewrite intr_eq0 denq_neq0.",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "rewrite mulrzr -rmorphMz scalerMzl -(mulrzr (x _)) -numqE scaler_int.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "by rewrite rmorphMz mulrzl -(nth_map _ 0) ?Dz_s // -(size_map QzC) Dz_s.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "pose sz := [tuple [ffun j => z1s`_(rank2 j i)] | i < m].",
            "VernacExtend",
            "3c5f04de94609049d978298aa02ff35fb35ea7c7"
        ],
        [
            "have [Zsv | Zs'v] := dec_Qint_span sz [ffun j => sval (xv j)].",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "left; have{Zsv} [a Dv] := Zsv; exists a.",
            "VernacExtend",
            "536e9d33052e3e19799762dc092dd1433427664c"
        ],
        [
            "transitivity (\\sum_j \\sum_(i < m) QzC ((sz`_i *~ a i) j) *: b`_j).",
            "VernacExtend",
            "ebaba6f99b8ec2234829c99893d78d2ec652d952"
        ],
        [
            "rewrite {1}(coord_vbasis s_v) -/b; apply: eq_bigr => j _.",
            "VernacExtend",
            "634a7639ed2fb7caf62757f84400927f5829b7d5"
        ],
        [
            "rewrite -scaler_suml; congr (_ *: _).",
            "VernacExtend",
            "a0279e71fd23ac6bde2b8b4402981a70ea719044"
        ],
        [
            "have{Dv} /ffunP/(_ j) := Dv; rewrite sum_ffunE !ffunE -rmorph_sum => <-.",
            "VernacExtend",
            "8431fc4d2460f7908baa11892c1b26797a3f17b8"
        ],
        [
            "by case: (xv j).",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "rewrite exchange_big; apply: eq_bigr => i _.",
            "VernacExtend",
            "634a7639ed2fb7caf62757f84400927f5829b7d5"
        ],
        [
            "rewrite (coord_vbasis (s_s i)) -/b mulrz_suml; apply: eq_bigr => j _.",
            "VernacExtend",
            "634a7639ed2fb7caf62757f84400927f5829b7d5"
        ],
        [
            "rewrite scalerMzl ffunMzE rmorphMz; congr ((_ *~ _) *: _).",
            "VernacExtend",
            "a0279e71fd23ac6bde2b8b4402981a70ea719044"
        ],
        [
            "rewrite nth_mktuple ffunE -(nth_map _ 0) ?sz_z1s // Dz_s.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "by rewrite nth_image enum_rankK /= (tnth_nth 0).",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "right=> [[a Dv]]; case: Zs'v; exists a.",
            "VernacExtend",
            "8d276a61fb11330708b96e2b2f1854b98dc57397"
        ],
        [
            "apply/ffunP=> j; rewrite sum_ffunE !ffunE; apply: (fmorph_inj QzC).",
            "VernacExtend",
            "da24caf87c1bbbad0538b8be68905ec456c78aa7"
        ],
        [
            "case: (xv j) => /= _ <-; rewrite Dv linear_sum rmorph_sum.",
            "VernacExtend",
            "90a2acb29b7a5304b0ab6ba5269c420638ddef63"
        ],
        [
            "apply: eq_bigr => i _; rewrite nth_mktuple raddfMz !ffunMzE rmorphMz ffunE.",
            "VernacExtend",
            "56c014161b39aecfb3c54301c2409dba4e8e1857"
        ],
        [
            "by rewrite -(nth_map _ 0 QzC) ?sz_z1s // Dz_s nth_image enum_rankK -tnth_nth.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Definition Cint_span (s : seq algC) : pred algC := fun x => dec_Cint_span (in_tuple [seq \\row_(i < 1) y | y <- s]) (\\row_i x).",
            "VernacDefinition",
            "200e7e650cfaeb152d6b5207d37413ea0e3bcd70"
        ],
        [
            "Fact Cint_span_key s : pred_key (Cint_span s).",
            "VernacStartTheoremProof",
            "1e9558c3ef26e7f513deb59d632d1622fd661f94"
        ],
        [
            "by [].",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Canonical Cint_span_keyed s := KeyedPred (Cint_span_key s).",
            "VernacDefinition",
            "b016a23737bcdbf8dccc6603c812df33f5461fb7"
        ],
        [
            "Lemma Cint_spanP n (s : n.-tuple algC) x : reflect (inIntSpan s x) (x \\in Cint_span s).",
            "VernacStartTheoremProof",
            "97b48e503db6e6f927fdc4adc183664952a0f5a8"
        ],
        [
            "rewrite unfold_in; case: (dec_Cint_span _ _) => [Zs_x | Zs'x] /=.",
            "VernacExtend",
            "712d339e99ee17eb7d5033e19ac614eb3ca6b532"
        ],
        [
            "left; have{Zs_x} [] := Zs_x; rewrite /= size_map size_tuple => a /rowP/(_ 0).",
            "VernacExtend",
            "d2a26ac609cba0450fd94aa0dc5f1bd5be083ad3"
        ],
        [
            "rewrite !mxE => ->; exists a; rewrite summxE; apply: eq_bigr => i _.",
            "VernacExtend",
            "0f2f605b05d1a234fb4b4947d4311c7c39f9b937"
        ],
        [
            "by rewrite -scaler_int (nth_map 0) ?size_tuple // !mxE mulrzl.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "right=> [[a Dx]]; have{Zs'x} [] := Zs'x.",
            "VernacExtend",
            "d2991b7607b6316c9d43d28c85f87ca601299ca6"
        ],
        [
            "rewrite /inIntSpan /= size_map size_tuple; exists a.",
            "VernacExtend",
            "44daa6fca1c550f35496357f75825e76f841caa2"
        ],
        [
            "apply/rowP=> i0; rewrite !mxE summxE Dx; apply: eq_bigr => i _.",
            "VernacExtend",
            "da24caf87c1bbbad0538b8be68905ec456c78aa7"
        ],
        [
            "by rewrite -scaler_int mxE mulrzl (nth_map 0) ?size_tuple // !mxE.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma mem_Cint_span s : {subset s <= Cint_span s}.",
            "VernacStartTheoremProof",
            "7b94af360664381b02e258161c7e0f03b2f1c6b9"
        ],
        [
            "move=> _ /(nthP 0)[ix ltxs <-]; apply/(Cint_spanP (in_tuple s)).",
            "VernacExtend",
            "d6ebf3361f380a12d5c2c9bbb7ea363132c48b36"
        ],
        [
            "exists [ffun i => i == Ordinal ltxs : int].",
            "VernacExtend",
            "a4d52cc0e1b332037c571968f2bc141d8e96951e"
        ],
        [
            "rewrite (bigD1 (Ordinal ltxs)) //= ffunE eqxx.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "by rewrite big1 ?addr0 // => i; rewrite ffunE => /negbTE->.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma Cint_span_zmod_closed s : zmod_closed (Cint_span s).",
            "VernacStartTheoremProof",
            "b590bdf50ad794bb40fdc0ab1eb83aaf4e9db61b"
        ],
        [
            "have sP := Cint_spanP (in_tuple s); split=> [|_ _ /sP[x ->] /sP[y ->]].",
            "VernacExtend",
            "8431fc4d2460f7908baa11892c1b26797a3f17b8"
        ],
        [
            "by apply/sP; exists 0; rewrite big1 // => i; rewrite ffunE.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "apply/sP; exists (x - y); rewrite -sumrB; apply: eq_bigr => i _.",
            "VernacExtend",
            "e4c544f551090040dcc68ecc99b283594be84ff1"
        ],
        [
            "by rewrite !ffunE raddfB.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Canonical Cint_span_opprPred s := OpprPred (Cint_span_zmod_closed s).",
            "VernacDefinition",
            "d36dd6b137e33a4e06b2dae8365cb9c85653f064"
        ],
        [
            "Canonical Cint_span_addrPred s := AddrPred (Cint_span_zmod_closed s).",
            "VernacDefinition",
            "0ed6d0f427011840b95e73e36e01e81d2de5a1bb"
        ],
        [
            "Canonical Cint_span_zmodPred s := ZmodPred (Cint_span_zmod_closed s).",
            "VernacDefinition",
            "b64e92d6f693c7a60e2b5627565ca4462eabf69a"
        ],
        [
            "Lemma extend_algC_subfield_aut (Qs : fieldExtType rat) (QsC : {rmorphism Qs -> algC}) (phi : {rmorphism Qs -> Qs}) : {nu : {rmorphism algC -> algC} | {morph QsC : x / phi x >-> nu x}}.",
            "VernacStartTheoremProof",
            "7b4473ad65034f284a9950a069f8f4b552fa15c7"
        ],
        [
            "pose numF_inj (Qr : fieldExtType rat) := {rmorphism Qr -> algC}.",
            "VernacExtend",
            "3c5f04de94609049d978298aa02ff35fb35ea7c7"
        ],
        [
            "pose subAut := {Qr : _ & numF_inj Qr * {lrmorphism Qr -> Qr}}%type.",
            "VernacExtend",
            "3c5f04de94609049d978298aa02ff35fb35ea7c7"
        ],
        [
            "pose SubAut := existT _ _ (_, _) : subAut.",
            "VernacExtend",
            "3c5f04de94609049d978298aa02ff35fb35ea7c7"
        ],
        [
            "pose Sdom (mu : subAut) := projT1 mu.",
            "VernacExtend",
            "3c5f04de94609049d978298aa02ff35fb35ea7c7"
        ],
        [
            "pose Sinj (mu : subAut) : {rmorphism Sdom mu -> algC} := (projT2 mu).1.",
            "VernacExtend",
            "3c5f04de94609049d978298aa02ff35fb35ea7c7"
        ],
        [
            "pose Saut (mu : subAut) : {rmorphism Sdom mu -> Sdom mu} := (projT2 mu).2.",
            "VernacExtend",
            "3c5f04de94609049d978298aa02ff35fb35ea7c7"
        ],
        [
            "have SinjZ Qr (QrC : numF_inj Qr) a x: QrC (a *: x) = QtoC a * QrC x.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "rewrite mulrAC; apply: canRL (mulfK _) _.",
            "VernacExtend",
            "634a7639ed2fb7caf62757f84400927f5829b7d5"
        ],
        [
            "by rewrite intr_eq0 denq_neq0.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "by rewrite mulrzr mulrzl -!rmorphMz scalerMzl -scaler_int -mulrzr -numqE.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "have Sinj_poly Qr (QrC : numF_inj Qr) p: map_poly QrC (map_poly (in_alg Qr) p) = pQtoC p.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "-",
            "VernacBullet",
            "581cab4bf49fa4b495e569bbda96fc8d28fddcc0"
        ],
        [
            "rewrite -map_poly_comp; apply: eq_map_poly => a.",
            "VernacExtend",
            "634a7639ed2fb7caf62757f84400927f5829b7d5"
        ],
        [
            "by rewrite /= SinjZ rmorph1 mulr1.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "have ext1 mu0 x: {mu1 | exists y, x = Sinj mu1 y & exists2 in01 : {lrmorphism _}, Sinj mu0 =1 Sinj mu1 \\o in01 & {morph in01: y / Saut mu0 y >-> Saut mu1 y}}.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "-",
            "VernacBullet",
            "581cab4bf49fa4b495e569bbda96fc8d28fddcc0"
        ],
        [
            "pose b0 := vbasis {:Sdom mu0}.",
            "VernacExtend",
            "3c5f04de94609049d978298aa02ff35fb35ea7c7"
        ],
        [
            "have [z _ /sig_eqW[[|px ps] // [Dx Ds]]] := algC_PET (x :: map (Sinj mu0) b0).",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "have [p [_ mon_p] /(_ p) pz0] := minCpolyP z; rewrite dvdpp in pz0.",
            "VernacExtend",
            "aa9d5fbc682ed874cd64b2543ca6c859b978e924"
        ],
        [
            "have [r Dr] := closed_field_poly_normal (pQtoC p : {poly algC}).",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "rewrite lead_coef_map {mon_p}(monicP mon_p) rmorph1 scale1r in Dr.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "have{pz0} rz: z \\in r by rewrite -root_prod_XsubC -Dr.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "have [Qr [QrC [rr Drr genQr]]] := num_field_exists r.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "have{rz} [zz Dz]: {zz | QrC zz = z}.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "by move: rz; rewrite -Drr => /mapP/sig2_eqW[zz]; exists zz.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "have{ps Ds} [in01 Din01]: {in01 : {lrmorphism _} | Sinj mu0 =1 QrC \\o in01}.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "have in01P y: {yy | Sinj mu0 y = QrC yy}.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "exists (\\sum_i coord b0 i y *: (map_poly (in_alg Qr) ps`_i).[zz]).",
            "VernacExtend",
            "41e1f3173015cc654752c2f3a56bec5d1dc90431"
        ],
        [
            "rewrite {1}(coord_vbasis (memvf y)) !rmorph_sum; apply: eq_bigr => i _.",
            "VernacExtend",
            "634a7639ed2fb7caf62757f84400927f5829b7d5"
        ],
        [
            "rewrite !SinjZ; congr (_ * _); rewrite -(nth_map _ 0) ?size_tuple // Ds.",
            "VernacExtend",
            "9d78117f9fa00d8b79d08aff717709f8d084ba84"
        ],
        [
            "rewrite -horner_map Dz Sinj_poly (nth_map 0) //.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "by have:= congr1 size Ds; rewrite !size_map size_tuple => <-.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "pose in01 y := sval (in01P y).",
            "VernacExtend",
            "3c5f04de94609049d978298aa02ff35fb35ea7c7"
        ],
        [
            "have Din01 y: Sinj mu0 y = QrC (in01 y) by rewrite /in01; case: (in01P y).",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "suffices in01M: lrmorphism in01 by exists (LRMorphism in01M).",
            "VernacExtend",
            "290ed488b5562e885aa2cac56f3a69b4faa0eaa6"
        ],
        [
            "pose rwM := (=^~ Din01, SinjZ, rmorph1, rmorphB, rmorphM).",
            "VernacExtend",
            "3c5f04de94609049d978298aa02ff35fb35ea7c7"
        ],
        [
            "by do 3?split; try move=> ? ?; apply: (fmorph_inj QrC); rewrite !rwM.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "have {z zz Dz px Dx} Dx: exists xx, x = QrC xx.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "exists (map_poly (in_alg Qr) px).[zz].",
            "VernacExtend",
            "a4981391730e37357382e605158afb168bd2143f"
        ],
        [
            "by rewrite -horner_map Dz Sinj_poly Dx.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "pose lin01 := linfun in01; pose K := (lin01 @: fullv)%VS.",
            "VernacExtend",
            "311b833fadff89b2f7ed817d3cd7cb6971c96a1e"
        ],
        [
            "have memK y: reflect (exists yy, y = in01 yy) (y \\in K).",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "apply: (iffP memv_imgP) => [[yy _ ->] | [yy ->]]; by exists yy; rewrite ?lfunE ?memvf.",
            "VernacExtend",
            "9ba8844f90da4a48c6c9ed986dcaebadc0623e9f"
        ],
        [
            "have algK: is_aspace K.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "rewrite /is_aspace has_algid1; last first.",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "by apply/memK; exists 1; rewrite rmorph1.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "apply/prodvP=> _ _ /memK[y1 ->] /memK[y2 ->].",
            "VernacExtend",
            "4bd6fa79b17bcd2bfb7af091fb325367a20385d6"
        ],
        [
            "by apply/memK; exists (y1 * y2); rewrite rmorphM.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "have ker_in01: lker lin01 == 0%VS.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "by apply/lker0P=> y1 y2; rewrite !lfunE; apply: fmorph_inj.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "pose f := (lin01 \\o linfun (Saut mu0) \\o lin01^-1)%VF.",
            "VernacExtend",
            "3c5f04de94609049d978298aa02ff35fb35ea7c7"
        ],
        [
            "have Df y: f (in01 y) = in01 (Saut mu0 y).",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "transitivity (f (lin01 y)); first by rewrite !lfunE.",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "by do 4!rewrite lfunE /=; rewrite lker0_lfunK.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "have hom_f: kHom 1 (ASpace algK) f.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "apply/kHomP; split=> [_ _ /memK[y1 ->] /memK[y2 ->] |_ /vlineP[a ->]].",
            "VernacExtend",
            "5fce7e5361004176d6b434b36b4623c7387f70bb"
        ],
        [
            "by rewrite -rmorphM !Df !rmorphM.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "by rewrite -(rmorph1 in01) -linearZ /= Df {1}linearZ /= rmorph1.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "pose pr := map_poly (in_alg Qr) p.",
            "VernacExtend",
            "3c5f04de94609049d978298aa02ff35fb35ea7c7"
        ],
        [
            "have Qpr: pr \\is a polyOver 1%VS.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "by apply/polyOverP=> i; rewrite coef_map memvZ ?memv_line.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "have splitQr: splittingFieldFor K pr fullv.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "apply: splittingFieldForS (sub1v (Sub K algK)) (subvf _) _; exists rr => //.",
            "VernacExtend",
            "5fce7e5361004176d6b434b36b4623c7387f70bb"
        ],
        [
            "congr (_ %= _): (eqpxx pr); apply/(map_poly_inj QrC).",
            "VernacExtend",
            "385739dd8a4f73703d3828c61e1780a276bfaa31"
        ],
        [
            "rewrite Sinj_poly Dr -Drr big_map rmorph_prod; apply: eq_bigr => zz _.",
            "VernacExtend",
            "634a7639ed2fb7caf62757f84400927f5829b7d5"
        ],
        [
            "by rewrite rmorphB /= map_polyX map_polyC.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "have [f1 aut_f1 Df1]:= kHom_extends (sub1v (ASpace algK)) hom_f Qpr splitQr.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "pose nu := LRMorphism (kHom_lrmorphism aut_f1).",
            "VernacExtend",
            "3c5f04de94609049d978298aa02ff35fb35ea7c7"
        ],
        [
            "exists (SubAut Qr QrC nu) => //; exists in01 => //= y.",
            "VernacExtend",
            "fbaa61af20867a5dfb8bb5213ca8048b258f8f3a"
        ],
        [
            "by rewrite -Df -Df1 //; apply/memK; exists y.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "have phiZ: scalable phi.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "move=> a y; do 2!rewrite -mulr_algl -in_algE.",
            "VernacExtend",
            "22b510de5a19ae026f48022a3dcf9db1d297df52"
        ],
        [
            "by rewrite -[a]divq_num_den !(fmorph_div, rmorphM, rmorph_int).",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "pose fix ext n := if n is i.+1 then oapp (fun x => s2val (ext1 (ext i) x)) (ext i) (unpickle i) else SubAut Qs QsC (AddLRMorphism phiZ).",
            "VernacExtend",
            "be59184aeceac70e4255bd58cff677d981339a6d"
        ],
        [
            "have mem_ext x n: (pickle x < n)%N -> {xx | Sinj (ext n) xx = x}.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "move=> ltxn; apply: sig_eqW; elim: n ltxn => // n IHn.",
            "VernacExtend",
            "583b2b8a2730353ee034319e6111f157f36519ab"
        ],
        [
            "rewrite ltnS leq_eqVlt => /predU1P[<- | /IHn[xx <-]] /=.",
            "VernacExtend",
            "3c42b53d0efc26db114b00541ac5e7fcb29e6aeb"
        ],
        [
            "by rewrite pickleK /=; case: (ext1 _ x) => mu [xx]; exists xx.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "case: (unpickle n) => /= [y|]; last by exists xx.",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "case: (ext1 _ y) => mu /= _ [in_mu inj_in_mu _].",
            "VernacExtend",
            "e00fff71ff314c991514fc71c41a3556702e444a"
        ],
        [
            "by exists (in_mu xx); rewrite inj_in_mu.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "pose nu x := Sinj _ (Saut _ (sval (mem_ext x _ (ltnSn _)))).",
            "VernacExtend",
            "3c5f04de94609049d978298aa02ff35fb35ea7c7"
        ],
        [
            "have nu_inj n y: nu (Sinj (ext n) y) = Sinj (ext n) (Saut (ext n) y).",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "rewrite /nu; case: (mem_ext _ _ _); move: _.+1 => n1 y1 Dy /=.",
            "VernacExtend",
            "f0b646e3773567ccd6c4a75851abf71dbc3ffe2d"
        ],
        [
            "without loss /subnK Dn1: n n1 y y1 Dy / (n <= n1)%N.",
            "VernacExtend",
            "87d5e7b04148ee8f2e4efcc847e0dfadae0aa4cb"
        ],
        [
            "by move=> IH; case/orP: (leq_total n n1) => /IH => [/(_ y) | /(_ y1)]->.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "elim: {n}(_ - n)%N {-1}n => [|k IHk] n in Dn1 y Dy *.",
            "VernacExtend",
            "e686a1895f1799b840b76242f931100819a9ad6c"
        ],
        [
            "by move: y1 Dy; rewrite -Dn1 => y1 /fmorph_inj ->.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "rewrite addSnnS in Dn1; move/IHk: Dn1 => /=.",
            "VernacExtend",
            "7e529e80bb2879787ee6d9466056f19f0215c721"
        ],
        [
            "case: (unpickle _) => [z|] /=; last exact.",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "case: (ext1 _ _) => mu /= _ [in_mu Dinj Daut].",
            "VernacExtend",
            "e00fff71ff314c991514fc71c41a3556702e444a"
        ],
        [
            "by rewrite Dy => /(_ _ (Dinj _))->; rewrite -Daut Dinj.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "suffices nuM: rmorphism nu.",
            "VernacExtend",
            "290ed488b5562e885aa2cac56f3a69b4faa0eaa6"
        ],
        [
            "by exists (RMorphism nuM) => x; rewrite /= (nu_inj 0%N).",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "pose le_nu (x : algC) n := (pickle x < n)%N.",
            "VernacExtend",
            "3c5f04de94609049d978298aa02ff35fb35ea7c7"
        ],
        [
            "have max3 x1 x2 x3: exists n, [/\\ le_nu x1 n, le_nu x2 n & le_nu x3 n].",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "exists (maxn (pickle x1) (maxn (pickle x2) (pickle x3))).+1.",
            "VernacExtend",
            "7ceee14cb32189395e8927be1030c32d65c31388"
        ],
        [
            "by apply/and3P; rewrite /le_nu !ltnS -!geq_max.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "do 2?split; try move=> x1 x2.",
            "VernacExtend",
            "87b6e6b9002d2c15daa825256c4f4fd244ad611c"
        ],
        [
            "-",
            "VernacBullet",
            "581cab4bf49fa4b495e569bbda96fc8d28fddcc0"
        ],
        [
            "have [n] := max3 (x1 - x2) x1 x2.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "case=> /mem_ext[y Dx] /mem_ext[y1 Dx1] /mem_ext[y2 Dx2].",
            "VernacExtend",
            "e00fff71ff314c991514fc71c41a3556702e444a"
        ],
        [
            "rewrite -Dx nu_inj; rewrite -Dx1 -Dx2 -rmorphB in Dx.",
            "VernacExtend",
            "2194fcb4d6d52cbae24a29f7ff14a3997f1912fd"
        ],
        [
            "by rewrite (fmorph_inj _ Dx) !rmorphB -!nu_inj Dx1 Dx2.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "-",
            "VernacBullet",
            "581cab4bf49fa4b495e569bbda96fc8d28fddcc0"
        ],
        [
            "have [n] := max3 (x1 * x2) x1 x2.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "case=> /mem_ext[y Dx] /mem_ext[y1 Dx1] /mem_ext[y2 Dx2].",
            "VernacExtend",
            "e00fff71ff314c991514fc71c41a3556702e444a"
        ],
        [
            "rewrite -Dx nu_inj; rewrite -Dx1 -Dx2 -rmorphM in Dx.",
            "VernacExtend",
            "2194fcb4d6d52cbae24a29f7ff14a3997f1912fd"
        ],
        [
            "by rewrite (fmorph_inj _ Dx) !rmorphM -!nu_inj Dx1 Dx2.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "by rewrite -(rmorph1 QsC) (nu_inj 0%N) !rmorph1.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma Qn_aut_exists k n : coprime k n -> {u : {rmorphism algC -> algC} | forall z, z ^+ n = 1 -> u z = z ^+ k}.",
            "VernacStartTheoremProof",
            "683fae7dd23db2f8d8fa41a85254ef1ca1f3c62f"
        ],
        [
            "have [-> /eqnP | n_gt0 co_k_n] := posnP n.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "by rewrite gcdn0 => ->; exists [rmorphism of idfun].",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "have [z prim_z] := C_prim_root_exists n_gt0.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "have [Qn [QnC [[|zn []] // [Dz]]] genQn] := num_field_exists [:: z].",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "pose phi := kHomExtend 1 \\1 zn (zn ^+ k).",
            "VernacExtend",
            "3c5f04de94609049d978298aa02ff35fb35ea7c7"
        ],
        [
            "have homQn1: kHom 1 1 (\\1%VF : 'End(Qn)) by rewrite kHom1.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "have pzn_zk0: root (map_poly \\1%VF (minPoly 1 zn)) (zn ^+ k).",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "rewrite -(fmorph_root QnC) rmorphX Dz -map_poly_comp.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "rewrite (@eq_map_poly _ _ _ QnC) => [|a]; last by rewrite /= id_lfunE.",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "set p1 := map_poly _ _.",
            "VernacExtend",
            "69a61e99b234580f7b41fa5b9655c87ba9a76f70"
        ],
        [
            "have [q1 Dp1]: exists q1, p1 = pQtoC q1.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "have aP i: (minPoly 1 zn)`_i \\in 1%VS.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "by apply/polyOverP; apply: minPolyOver.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "have{aP} a_ i := sig_eqW (vlineP _ _ (aP i)).",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "exists (\\poly_(i < size (minPoly 1 zn)) sval (a_ i)).",
            "VernacExtend",
            "662538485cf618f74894f6826aa70ffe74ee95fd"
        ],
        [
            "apply/polyP=> i; rewrite coef_poly coef_map coef_poly /=.",
            "VernacExtend",
            "56c014161b39aecfb3c54301c2409dba4e8e1857"
        ],
        [
            "case: ifP => _; rewrite ?rmorph0 //; case: (a_ i) => a /= ->.",
            "VernacExtend",
            "1dd33488047dbf70f12e12a749f59bfa780f9e04"
        ],
        [
            "apply: canRL (mulfK _) _; first by rewrite intr_eq0 denq_eq0.",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "by rewrite mulrzr -rmorphMz scalerMzl -mulrzr -numqE scaler_int rmorph_int.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "have: root p1 z by rewrite -Dz fmorph_root root_minPoly.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "rewrite Dp1; have [q2 [Dq2 _] ->] := minCpolyP z.",
            "VernacExtend",
            "7be6e3cf9ccbce33486c4b5c6fefdf7a9ad6e52b"
        ],
        [
            "case/dvdpP=> r1 ->; rewrite rmorphM rootM /= -Dq2; apply/orP; right.",
            "VernacExtend",
            "1d8c711233001145557c0d15f97f3f5fe5859bae"
        ],
        [
            "rewrite (minCpoly_cyclotomic prim_z) /cyclotomic.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "rewrite (bigD1 (Ordinal (ltn_pmod k n_gt0))) ?coprime_modl //=.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "by rewrite rootM root_XsubC prim_expr_mod ?eqxx.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "have phiM: lrmorphism phi.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "by apply/kHom_lrmorphism; rewrite -genQn span_seq1 /= kHomExtendP.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "have [nu Dnu] := extend_algC_subfield_aut QnC (RMorphism phiM).",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "exists nu => _ /(prim_rootP prim_z)[i ->].",
            "VernacExtend",
            "3c42b53d0efc26db114b00541ac5e7fcb29e6aeb"
        ],
        [
            "rewrite rmorphX exprAC -Dz -Dnu /= -{1}[zn]hornerX /phi.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "rewrite (kHomExtend_poly homQn1) ?polyOverX //.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "rewrite map_polyE map_id_in => [|?]; last by rewrite id_lfunE.",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "by rewrite polyseqK hornerX rmorphX.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Definition Aint : pred_class := fun x : algC => minCpoly x \\is a polyOver Cint.",
            "VernacDefinition",
            "189abbb00fc2590a57d0dbe34f15b383cf9ee401"
        ],
        [
            "Fact Aint_key : pred_key Aint.",
            "VernacStartTheoremProof",
            "d8126e0b3e154b1ef92078a831de9aa4bf9fe0d4"
        ],
        [
            "by [].",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Canonical Aint_keyed := KeyedPred Aint_key.",
            "VernacDefinition",
            "5741f316b22937c40d60971c2ca8de1670e5684f"
        ],
        [
            "Lemma root_monic_Aint p x : root p x -> p \\is monic -> p \\is a polyOver Cint -> x \\in Aint.",
            "VernacStartTheoremProof",
            "b10a0cacd3ddfae6e0502bccc82c80ddf910f398"
        ],
        [
            "have pZtoQtoC pz: pQtoC (pZtoQ pz) = pZtoC pz.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "by rewrite -map_poly_comp; apply: eq_map_poly => b; rewrite /= rmorph_int.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "move=> px0 mon_p /floorCpP[pz Dp]; rewrite unfold_in.",
            "VernacExtend",
            "057edeb0967475c7ea5e8c98c449ddc5613eddc1"
        ],
        [
            "move: px0; rewrite Dp -pZtoQtoC; have [q [-> mon_q] ->] := minCpolyP x.",
            "VernacExtend",
            "9354a6a63df0e9a0c9866f63e8fbdb6d124eb491"
        ],
        [
            "case/dvdpP_rat_int=> qz [a nz_a Dq] [r].",
            "VernacExtend",
            "e00fff71ff314c991514fc71c41a3556702e444a"
        ],
        [
            "move/(congr1 (fun q1 => lead_coef (a *: pZtoQ q1))).",
            "VernacExtend",
            "b1b2cb7a3a617cba67460b4eca1f04de3c1cc716"
        ],
        [
            "rewrite rmorphM scalerAl -Dq lead_coefZ lead_coefM /=.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "have /monicP->: pZtoQ pz \\is monic by rewrite -(map_monic QtoCm) pZtoQtoC -Dp.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "rewrite (monicP mon_q) mul1r mulr1 lead_coef_map_inj //; last exact: intr_inj.",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "rewrite Dq => ->; apply/polyOverP=> i; rewrite !(coefZ, coef_map).",
            "VernacExtend",
            "01f04d3f5bba3b876eb4ec7b1c8f26d2e2cced77"
        ],
        [
            "by rewrite -rmorphM /= rmorph_int Cint_int.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma Cint_rat_Aint z : z \\in Crat -> z \\in Aint -> z \\in Cint.",
            "VernacStartTheoremProof",
            "5be7e3b297df39f4c62ff9c5d7b5dc356eacff01"
        ],
        [
            "case/CratP=> a ->{z} /polyOverP/(_ 0%N).",
            "VernacExtend",
            "e00fff71ff314c991514fc71c41a3556702e444a"
        ],
        [
            "have [p [Dp mon_p] dv_p] := minCpolyP (ratr a); rewrite Dp coef_map.",
            "VernacExtend",
            "aa9d5fbc682ed874cd64b2543ca6c859b978e924"
        ],
        [
            "suffices /eqP->: p == 'X - a%:P by rewrite polyseqXsubC /= rmorphN rpredN.",
            "VernacExtend",
            "290ed488b5562e885aa2cac56f3a69b4faa0eaa6"
        ],
        [
            "rewrite -eqp_monic ?monicXsubC // irredp_XsubC //.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "by rewrite -(size_map_poly QtoCm) -Dp neq_ltn size_minCpoly orbT.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "by rewrite -dv_p fmorph_root root_XsubC.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma Aint_Cint : {subset Cint <= Aint}.",
            "VernacStartTheoremProof",
            "70b6127857570c56643e23d6ffce1064b191310e"
        ],
        [
            "move=> x; rewrite -polyOverXsubC.",
            "VernacExtend",
            "057edeb0967475c7ea5e8c98c449ddc5613eddc1"
        ],
        [
            "by apply: root_monic_Aint; rewrite ?monicXsubC ?root_XsubC.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma Aint_int x : x%:~R \\in Aint.",
            "VernacStartTheoremProof",
            "91bd9a6447b861e2ddb27ee9256bbc010085b343"
        ],
        [
            "by rewrite Aint_Cint ?Cint_int.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma Aint0 : 0 \\in Aint.",
            "VernacStartTheoremProof",
            "fdf1c90d39c930949dd22d41f4f7d9c169ae6a56"
        ],
        [
            "exact: (Aint_int 0).",
            "VernacExtend",
            "ce637ff86bafca5d8359473e8c02af644dcbdc43"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma Aint1 : 1 \\in Aint.",
            "VernacStartTheoremProof",
            "83749040c4d73cd119f51617bdd743b3ad5f894f"
        ],
        [
            "exact: (Aint_int 1).",
            "VernacExtend",
            "ce637ff86bafca5d8359473e8c02af644dcbdc43"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Hint Resolve Aint0 Aint1 : core.",
            "VernacHints",
            "a480df24227b4b077cc44597b07ecb4504958e72"
        ],
        [
            "Lemma Aint_unity_root n x : (n > 0)%N -> n.-unity_root x -> x \\in Aint.",
            "VernacStartTheoremProof",
            "c947dc4242cb7c9740ca273e755915225c98983f"
        ],
        [
            "move=> n_gt0 xn1; apply: root_monic_Aint xn1 (monic_Xn_sub_1 _ n_gt0) _.",
            "VernacExtend",
            "d6ebf3361f380a12d5c2c9bbb7ea363132c48b36"
        ],
        [
            "by apply/polyOverP=> i; rewrite coefB coefC -mulrb coefXn /= rpredB ?rpred_nat.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma Aint_prim_root n z : n.-primitive_root z -> z \\in Aint.",
            "VernacStartTheoremProof",
            "33d7157c5c14c73d3a41f297d337ccbe141f3524"
        ],
        [
            "move=> pr_z; apply/(Aint_unity_root (prim_order_gt0 pr_z))/unity_rootP.",
            "VernacExtend",
            "d6ebf3361f380a12d5c2c9bbb7ea363132c48b36"
        ],
        [
            "exact: prim_expr_order.",
            "VernacExtend",
            "ce637ff86bafca5d8359473e8c02af644dcbdc43"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma Aint_Cnat : {subset Cnat <= Aint}.",
            "VernacStartTheoremProof",
            "855fa1737b6a1e3b467631f4c32b94bdf3244a04"
        ],
        [
            "by move=> z /Cint_Cnat/Aint_Cint.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma Aint_subring_exists (X : seq algC) : {subset X <= Aint} -> {S : pred algC & subring_closed S /\\ {subset X <= S} & {Y : {n : nat & n.-tuple algC} & {subset tagged Y <= S} & forall x, reflect (inIntSpan (tagged Y) x) (x \\in S)}}.",
            "VernacStartTheoremProof",
            "d90bb92ef3d3dd3fcfa7599abb5f8f285d845ef8"
        ],
        [
            "move=> AZ_X; pose m := (size X).+1.",
            "VernacExtend",
            "fef3c4a8f7fcf70b0824f3cce5fb58f2e0ef07fd"
        ],
        [
            "pose n (i : 'I_m) := (size (minCpoly X`_i)).-2; pose N := (\\max_i n i).+1.",
            "VernacExtend",
            "311b833fadff89b2f7ed817d3cd7cb6971c96a1e"
        ],
        [
            "pose IY := family (fun i => [pred e : 'I_N | e <= n i]%N).",
            "VernacExtend",
            "3c5f04de94609049d978298aa02ff35fb35ea7c7"
        ],
        [
            "have IY_0: 0 \\in IY by apply/familyP=> // i; rewrite ffunE.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "pose inIY := enum_rank_in IY_0.",
            "VernacExtend",
            "3c5f04de94609049d978298aa02ff35fb35ea7c7"
        ],
        [
            "pose Y := [seq \\prod_(i < m) X`_i ^+ (f : 'I_N ^ m) i | f in IY].",
            "VernacExtend",
            "3c5f04de94609049d978298aa02ff35fb35ea7c7"
        ],
        [
            "have S_P := Cint_spanP [tuple of Y]; set S := Cint_span _ in S_P.",
            "VernacExtend",
            "81881a093b2294c76be3b432fbe83612064d7bc9"
        ],
        [
            "have sYS: {subset Y <= S} by apply: mem_Cint_span.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "have S_1: 1 \\in S.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "by apply/sYS/imageP; exists 0 => //; rewrite big1 // => i; rewrite ffunE.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "have SmulX (i : 'I_m): {in S, forall x, x * X`_i \\in S}.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "move=> _ /S_P[x ->]; rewrite mulr_suml rpred_sum // => j _.",
            "VernacExtend",
            "8261237f0cda1915a4077c28869831c5329103ce"
        ],
        [
            "rewrite mulrzAl rpredMz {x}// nth_image mulrC (bigD1 i) //= mulrA -exprS.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "move: {j}(enum_val j) (familyP (enum_valP j)) => f fP.",
            "VernacExtend",
            "b1b2cb7a3a617cba67460b4eca1f04de3c1cc716"
        ],
        [
            "have:= fP i; rewrite inE /= leq_eqVlt => /predU1P[-> | fi_ltn]; last first.",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "apply/sYS/imageP; have fiK: (inord (f i).+1 : 'I_N) = (f i).+1 :> nat.",
            "VernacExtend",
            "c574574294cc642b01d157e4c8f21ac2f90e4b5d"
        ],
        [
            "by rewrite inordK // ltnS (bigmax_sup i).",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "exists (finfun [eta f with i |-> inord (f i).+1]).",
            "VernacExtend",
            "b0aa3c36fbbc06e284443c045b2612019277cc97"
        ],
        [
            "apply/familyP=> i1; rewrite inE ffunE /= fun_if fiK.",
            "VernacExtend",
            "56c014161b39aecfb3c54301c2409dba4e8e1857"
        ],
        [
            "by case: eqP => [-> // | _]; apply: fP.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "rewrite (bigD1 i isT) ffunE /= eqxx fiK; congr (_ * _).",
            "VernacExtend",
            "a0279e71fd23ac6bde2b8b4402981a70ea719044"
        ],
        [
            "by apply: eq_bigr => i1; rewrite ffunE /= => /negPf->.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "have [/monicP ] := (minCpoly_monic X`_i, root_minCpoly X`_i).",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "rewrite /root horner_coef lead_coefE -(subnKC (size_minCpoly _)) subn2.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "rewrite big_ord_recr /= addrC addr_eq0 => ->; rewrite mul1r => /eqP->.",
            "VernacExtend",
            "fbaa61af20867a5dfb8bb5213ca8048b258f8f3a"
        ],
        [
            "have /floorCpP[p Dp]: X`_i \\in Aint.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "by have [/(nth_default 0)-> | /(mem_nth 0)/AZ_X] := leqP (size X) i.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "rewrite -/(n i) Dp mulNr rpredN // mulr_suml rpred_sum // => [[e le_e]] /= _.",
            "VernacExtend",
            "3c42b53d0efc26db114b00541ac5e7fcb29e6aeb"
        ],
        [
            "rewrite coef_map -mulrA mulrzl rpredMz ?sYS //; apply/imageP.",
            "VernacExtend",
            "634a7639ed2fb7caf62757f84400927f5829b7d5"
        ],
        [
            "have eK: (inord e : 'I_N) = e :> nat by rewrite inordK // ltnS (bigmax_sup i).",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "exists (finfun [eta f with i |-> inord e]).",
            "VernacExtend",
            "af36e513608fb92c959ace1e9916050ed0bb56aa"
        ],
        [
            "apply/familyP=> i1; rewrite inE ffunE /= fun_if eK.",
            "VernacExtend",
            "56c014161b39aecfb3c54301c2409dba4e8e1857"
        ],
        [
            "by case: eqP => [-> // | _]; apply: fP.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "rewrite (bigD1 i isT) ffunE /= eqxx eK; congr (_ * _).",
            "VernacExtend",
            "a0279e71fd23ac6bde2b8b4402981a70ea719044"
        ],
        [
            "by apply: eq_bigr => i1; rewrite ffunE /= => /negPf->.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "exists S; last by exists (Tagged (fun n => n.-tuple _) [tuple of Y]).",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "split=> [|x Xx]; last first.",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "by rewrite -[x]mul1r -(nth_index 0 Xx) (SmulX (Ordinal _)) // ltnS index_size.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "split=> // x y Sx Sy; first by rewrite rpredB.",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "case/S_P: Sy => {y}[y ->]; rewrite mulr_sumr rpred_sum //= => j.",
            "VernacExtend",
            "ba44c9d0281a02110ce54645304e6d990debd9c0"
        ],
        [
            "rewrite mulrzAr rpredMz {y}// nth_image; move: {j}(enum_val j) => f.",
            "VernacExtend",
            "7e529e80bb2879787ee6d9466056f19f0215c721"
        ],
        [
            "elim/big_rec: _ => [|i y _ IHy] in x Sx *; first by rewrite mulr1.",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "rewrite mulrA {y}IHy //.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "elim: {f}(f i : nat) => [|e IHe] in x Sx *; first by rewrite mulr1.",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "by rewrite exprS mulrA IHe // SmulX.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Section AlgIntSubring.",
            "VernacBeginSection",
            "c40a5bfedf862e2d09a63654d0521e33f4706f7e"
        ],
        [
            "Import DefaultKeying GRing.DefaultPred perm.",
            "VernacImport",
            "54fa003b87b5db284ca018ac45eb9f6c59ca7acf"
        ],
        [
            "Theorem fin_Csubring_Aint S n (Y : n.-tuple algC) : mulr_closed S -> (forall x, reflect (inIntSpan Y x) (x \\in S)) -> {subset S <= Aint}.",
            "VernacStartTheoremProof",
            "c36093c72572b2dc740ee0f4004e7dfeb985a30f"
        ],
        [
            "have ZP_C c: (ZtoC c)%:P \\is a polyOver Cint by rewrite raddfMz rpred_int.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "move=> mulS S_P x Sx; pose v := \\row_(i < n) Y`_i.",
            "VernacExtend",
            "fef3c4a8f7fcf70b0824f3cce5fb58f2e0ef07fd"
        ],
        [
            "have [v0 | nz_v] := eqVneq v 0.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "case/S_P: Sx => {x}x ->; rewrite big1 ?isAlgInt0 // => i _.",
            "VernacExtend",
            "ba44c9d0281a02110ce54645304e6d990debd9c0"
        ],
        [
            "by have /rowP/(_ i) := v0; rewrite !mxE => ->; rewrite mul0rz.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "have sYS (i : 'I_n): x * Y`_i \\in S.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "by rewrite rpredM //; apply/S_P/Cint_spanP/mem_Cint_span/memt_nth.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "pose A := \\matrix_(i, j < n) sval (sig_eqW (S_P _ (sYS j))) i.",
            "VernacExtend",
            "3c5f04de94609049d978298aa02ff35fb35ea7c7"
        ],
        [
            "pose p := char_poly (map_mx ZtoC A).",
            "VernacExtend",
            "3c5f04de94609049d978298aa02ff35fb35ea7c7"
        ],
        [
            "have: p \\is a polyOver Cint.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "rewrite rpred_sum // => s _; rewrite rpredMsign rpred_prod // => j _.",
            "VernacExtend",
            "fbaa61af20867a5dfb8bb5213ca8048b258f8f3a"
        ],
        [
            "by rewrite !mxE /= rpredB ?rpredMn ?polyOverX.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "apply: root_monic_Aint (char_poly_monic _).",
            "VernacExtend",
            "4bd6fa79b17bcd2bfb7af091fb325367a20385d6"
        ],
        [
            "rewrite -eigenvalue_root_char; apply/eigenvalueP; exists v => //.",
            "VernacExtend",
            "0288f65064e83af8559a49f90a2eba4421e03fd4"
        ],
        [
            "apply/rowP=> j; case dAj: (sig_eqW (S_P _ (sYS j))) => [a DxY].",
            "VernacExtend",
            "20ec428e50c31e1399aee62c5a532bc8417a4b29"
        ],
        [
            "by rewrite !mxE DxY; apply: eq_bigr => i _; rewrite !mxE dAj /= mulrzr.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Corollary Aint_subring : subring_closed Aint.",
            "VernacStartTheoremProof",
            "769de90e000b854a05bd5d4bb43635181bf33664"
        ],
        [
            "suff rAZ: {in Aint &, forall x y, (x - y \\in Aint) * (x * y \\in Aint)}.",
            "VernacExtend",
            "d07fc8b2103f140554938023774bf3f75d04ba99"
        ],
        [
            "by split=> // x y AZx AZy; rewrite rAZ.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "move=> x y AZx AZy.",
            "VernacExtend",
            "b1b2cb7a3a617cba67460b4eca1f04de3c1cc716"
        ],
        [
            "have [|S [ringS] ] := @Aint_subring_exists [:: x; y]; first exact/allP/and3P.",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "move=> /allP/and3P[Sx Sy _] [Y _ genYS].",
            "VernacExtend",
            "b1b2cb7a3a617cba67460b4eca1f04de3c1cc716"
        ],
        [
            "have AZ_S := fin_Csubring_Aint ringS genYS.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "by have [_ S_B S_M] := ringS; rewrite !AZ_S ?S_B ?S_M.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Canonical Aint_opprPred := OpprPred Aint_subring.",
            "VernacDefinition",
            "847f08f50aa6df99526ef1c494d148b51f0a701a"
        ],
        [
            "Canonical Aint_addrPred := AddrPred Aint_subring.",
            "VernacDefinition",
            "03ca49c90b5ce213d16fb1fe9e4639487f951e23"
        ],
        [
            "Canonical Aint_mulrPred := MulrPred Aint_subring.",
            "VernacDefinition",
            "5ebc7f4fa82156ed78aef8f34e48c6cea54f6725"
        ],
        [
            "Canonical Aint_zmodPred := ZmodPred Aint_subring.",
            "VernacDefinition",
            "6321bcb7fb23c639c7238705b5a7c08c1749ecbe"
        ],
        [
            "Canonical Aint_semiringPred := SemiringPred Aint_subring.",
            "VernacDefinition",
            "a40b6294c12c272997aa0e4fd04cb791d6df3bb9"
        ],
        [
            "Canonical Aint_smulrPred := SmulrPred Aint_subring.",
            "VernacDefinition",
            "2d8f51dbd8a1ab5a41d7c28a727dcf1e50b68b2d"
        ],
        [
            "Canonical Aint_subringPred := SubringPred Aint_subring.",
            "VernacDefinition",
            "a73f3bfbda10d3b6c69ae90382c7eb13f8c5b665"
        ],
        [
            "End AlgIntSubring.",
            "VernacEndSegment",
            "1ac9f94b1e3b8e2f3f780673f6275ee327c818f9"
        ],
        [
            "Lemma Aint_aut (nu : {rmorphism algC -> algC}) x : (nu x \\in Aint) = (x \\in Aint).",
            "VernacStartTheoremProof",
            "1580658d228aab51cb7dc11fa6e14d4499b315b4"
        ],
        [
            "by rewrite !unfold_in minCpoly_aut.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Definition dvdA (e : Algebraics.divisor) : pred_class := fun z : algC => if e == 0 then z == 0 else z / e \\in Aint.",
            "VernacDefinition",
            "50e87948b35c40591eb42471139c4777b24616be"
        ],
        [
            "Fact dvdA_key e : pred_key (dvdA e).",
            "VernacStartTheoremProof",
            "1dbdaac80ab8fc37504f94685e730d7eb3f6a122"
        ],
        [
            "by [].",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Canonical dvdA_keyed e := KeyedPred (dvdA_key e).",
            "VernacDefinition",
            "1c4d5da3b94d5582bf5654d129f18e92e79f56bd"
        ],
        [
            "Delimit Scope algC_scope with A.",
            "VernacDelimiters",
            "ffa26268ba5e876a8424c3c4f41e6c3b7ef0976e"
        ],
        [
            "Delimit Scope algC_expanded_scope with Ax.",
            "VernacDelimiters",
            "f77decd31321000377cc558f33318943a96caed0"
        ],
        [
            "Notation \"e %| x\" := (x \\in dvdA e) : algC_expanded_scope.",
            "VernacNotation",
            "66932580b57527c91e2126f1d10e2eba3e5b4147"
        ],
        [
            "Notation \"e %| x\" := (@in_mem Algebraics.divisor x (mem (dvdA e))) : algC_scope.",
            "VernacNotation",
            "24bdd5c141e9c6b76cd53588aee7c13625c10304"
        ],
        [
            "Fact dvdA_zmod_closed e : zmod_closed (dvdA e).",
            "VernacStartTheoremProof",
            "ec31ae157e7e281b7f8c0bfde1d845362593e9ba"
        ],
        [
            "split=> [|x y]; first by rewrite unfold_in mul0r eqxx rpred0 ?if_same.",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "rewrite ![(e %| _)%A]unfold_in.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "case: ifP => [_ x0 /eqP-> | _]; first by rewrite subr0.",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "by rewrite mulrBl; apply: rpredB.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Canonical dvdA_opprPred e := OpprPred (dvdA_zmod_closed e).",
            "VernacDefinition",
            "0a36ea1299a1625aefdff108aca18ad5bce4b8ed"
        ],
        [
            "Canonical dvdA_addrPred e := AddrPred (dvdA_zmod_closed e).",
            "VernacDefinition",
            "1eb1e0e8804efe3aa0a5b1131b2b0a4e6fe2cf48"
        ],
        [
            "Canonical dvdA_zmodPred e := ZmodPred (dvdA_zmod_closed e).",
            "VernacDefinition",
            "3ade25e7b5fea35130b3b8fc791cc9197b465eda"
        ],
        [
            "Definition eqAmod (e x y : Algebraics.divisor) := (e %| x - y)%A.",
            "VernacDefinition",
            "20988d2da639f181cecf52dee467b04835255687"
        ],
        [
            "Notation \"x == y %[mod e ]\" := (eqAmod e x y) : algC_scope.",
            "VernacNotation",
            "90fd272fbdb52bf12024612d82b510b085cdfa0a"
        ],
        [
            "Notation \"x != y %[mod e ]\" := (~~ (eqAmod e x y)) : algC_scope.",
            "VernacNotation",
            "9174d8243b2efbdb963e2dfbe72ef1bf4776e8d3"
        ],
        [
            "Lemma eqAmod_refl e x : (x == x %[mod e])%A.",
            "VernacStartTheoremProof",
            "b6161e4a2f9e7ff0c20022875a2a99623a979eb8"
        ],
        [
            "by rewrite /eqAmod subrr rpred0.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Hint Resolve eqAmod_refl : core.",
            "VernacHints",
            "90bea651f78488ba458e9befa87de73a78c2783b"
        ],
        [
            "Lemma eqAmod_sym e x y : ((x == y %[mod e]) = (y == x %[mod e]))%A.",
            "VernacStartTheoremProof",
            "5626576d1f36c1ffb9d20ed7289c1398f6853038"
        ],
        [
            "by rewrite /eqAmod -opprB rpredN.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma eqAmod_trans e y x z : (x == y %[mod e] -> y == z %[mod e] -> x == z %[mod e])%A.",
            "VernacStartTheoremProof",
            "1852e956728a4893d631831e8392cc9c94f7a74d"
        ],
        [
            "by move=> Exy Eyz; rewrite /eqAmod -[x](subrK y) -addrA rpredD.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma eqAmod_transl e x y z : (x == y %[mod e])%A -> (x == z %[mod e])%A = (y == z %[mod e])%A.",
            "VernacStartTheoremProof",
            "edc1ecc44d27b87d6bcd2d47bc09d1e2b29df010"
        ],
        [
            "by move/(sym_left_transitive (eqAmod_sym e) (@eqAmod_trans e)).",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma eqAmod_transr e x y z : (x == y %[mod e])%A -> (z == x %[mod e])%A = (z == y %[mod e])%A.",
            "VernacStartTheoremProof",
            "3eb5b00081c9dddfd9f6c47ab651e29a96142863"
        ],
        [
            "by move/(sym_right_transitive (eqAmod_sym e) (@eqAmod_trans e)).",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma eqAmod0 e x : (x == 0 %[mod e])%A = (e %| x)%A.",
            "VernacStartTheoremProof",
            "189c3e0a49a28bfb2c0bdf9874ce7dd832da3fc5"
        ],
        [
            "by rewrite /eqAmod subr0.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma eqAmodN e x y : (- x == y %[mod e])%A = (x == - y %[mod e])%A.",
            "VernacStartTheoremProof",
            "c2b6e69f3daf78093b184c3f79092868f2589adf"
        ],
        [
            "by rewrite eqAmod_sym /eqAmod !opprK addrC.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma eqAmodDr e x y z : (y + x == z + x %[mod e])%A = (y == z %[mod e])%A.",
            "VernacStartTheoremProof",
            "9296e6854d23a2e5b9c1a557dadaac540a61e134"
        ],
        [
            "by rewrite /eqAmod addrAC opprD !addrA subrK.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma eqAmodDl e x y z : (x + y == x + z %[mod e])%A = (y == z %[mod e])%A.",
            "VernacStartTheoremProof",
            "5061a773874d240273439f5f7c8b0f30a2cb349c"
        ],
        [
            "by rewrite !(addrC x) eqAmodDr.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma eqAmodD e x1 x2 y1 y2 : (x1 == x2 %[mod e] -> y1 == y2 %[mod e] -> x1 + y1 == x2 + y2 %[mod e])%A.",
            "VernacStartTheoremProof",
            "c6d7f7fc98d8202f931191cbef860c4aa7229176"
        ],
        [
            "by rewrite -(eqAmodDl e x2 y1) -(eqAmodDr e y1); apply: eqAmod_trans.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma eqAmodm0 e : (e == 0 %[mod e])%A.",
            "VernacStartTheoremProof",
            "dccc6d804edc4798aadc5af6ae0965cfa90609cf"
        ],
        [
            "by rewrite /eqAmod subr0 unfold_in; case: ifPn => // /divff->.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Hint Resolve eqAmodm0 : core.",
            "VernacHints",
            "1cd17074bf3158982bba82fa287da394e38534b2"
        ],
        [
            "Lemma eqAmodMr e : {in Aint, forall z x y, x == y %[mod e] -> x * z == y * z %[mod e]}%A.",
            "VernacStartTheoremProof",
            "0d2e55cb65853ca8efd952e390b47c1323110c3f"
        ],
        [
            "move=> z Zz x y.",
            "VernacExtend",
            "b1b2cb7a3a617cba67460b4eca1f04de3c1cc716"
        ],
        [
            "rewrite /eqAmod -mulrBl ![(e %| _)%A]unfold_in mulf_eq0 mulrAC.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "by case: ifP => [_ -> // | _ Exy]; apply: rpredM.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma eqAmodMl e : {in Aint, forall z x y, x == y %[mod e] -> z * x == z * y %[mod e]}%A.",
            "VernacStartTheoremProof",
            "e45da8722442876a97ba9d8f50aba491b716ad32"
        ],
        [
            "by move=> z Zz x y Exy; rewrite !(mulrC z) eqAmodMr.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma eqAmodMl0 e : {in Aint, forall x, x * e == 0 %[mod e]}%A.",
            "VernacStartTheoremProof",
            "5ca196bf2bb07fd2e77aa3611f2e13c7edc85037"
        ],
        [
            "by move=> x Zx; rewrite -(mulr0 x) eqAmodMl.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma eqAmodMr0 e : {in Aint, forall x, e * x == 0 %[mod e]}%A.",
            "VernacStartTheoremProof",
            "e48f0e7ee7454b9a2d3ad85a60c949c939115fbf"
        ],
        [
            "by move=> x Zx; rewrite /= mulrC eqAmodMl0.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma eqAmod_addl_mul e : {in Aint, forall x y, x * e + y == y %[mod e]}%A.",
            "VernacStartTheoremProof",
            "53ac9bcf747bd99385e252fa8e88d3f472b3cfeb"
        ],
        [
            "by move=> x Zx y; rewrite -{2}[y]add0r eqAmodDr eqAmodMl0.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma eqAmodM e : {in Aint &, forall x1 y2 x2 y1, x1 == x2 %[mod e] -> y1 == y2 %[mod e] -> x1 * y1 == x2 * y2 %[mod e]}%A.",
            "VernacStartTheoremProof",
            "2d0228f93e5161e3a51ab3cb68e900afe62d95b1"
        ],
        [
            "move=> x1 y2 Zx1 Zy2 x2 y1 eq_x /(eqAmodMl Zx1)/eqAmod_trans-> //.",
            "VernacExtend",
            "b1b2cb7a3a617cba67460b4eca1f04de3c1cc716"
        ],
        [
            "exact: eqAmodMr.",
            "VernacExtend",
            "ce637ff86bafca5d8359473e8c02af644dcbdc43"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma eqAmod_rat : {in Crat & &, forall e m n, (m == n %[mod e])%A = (m == n %[mod e])%C}.",
            "VernacStartTheoremProof",
            "8305fb189668b8ee89d796f35b8dca378469fd0a"
        ],
        [
            "move=> e m n Qe Qm Qn; rewrite /eqCmod unfold_in /eqAmod unfold_in.",
            "VernacExtend",
            "057edeb0967475c7ea5e8c98c449ddc5613eddc1"
        ],
        [
            "case: ifPn => // nz_e; apply/idP/idP=> [/Cint_rat_Aint | /Aint_Cint] -> //.",
            "VernacExtend",
            "d62e4c271de3f2a9ff5062b8b89d3c57d965c518"
        ],
        [
            "by rewrite rpred_div ?rpredB.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma eqAmod0_rat : {in Crat &, forall e n, (n == 0 %[mod e])%A = (e %| n)%C}.",
            "VernacStartTheoremProof",
            "d6bf371597b410957ff76e04d7c35fe46ecebff8"
        ],
        [
            "by move=> e n Qe Qn; rewrite /= eqAmod_rat /eqCmod ?subr0 ?Crat0.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma eqAmod_nat (e m n : nat) : (m == n %[mod e])%A = (m == n %[mod e])%N.",
            "VernacStartTheoremProof",
            "9e4b5c69bd17a3de06e40c73f0ac856aa6a08903"
        ],
        [
            "by rewrite eqAmod_rat ?rpred_nat // eqCmod_nat.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma eqAmod0_nat (e m : nat) : (m == 0 %[mod e])%A = (e %| m)%N.",
            "VernacStartTheoremProof",
            "8696fa363998c1049b40a28284d353547724323f"
        ],
        [
            "by rewrite eqAmod0_rat ?rpred_nat // dvdC_nat.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Definition orderC x := let p := minCpoly x in oapp val 0%N [pick n : 'I_(2 * size p ^ 2) | p == intrp 'Phi_n].",
            "VernacDefinition",
            "d0eab20441c2b3f21fda53a347b8b139f8304c5f"
        ],
        [
            "Notation \"#[ x ]\" := (orderC x) : C_scope.",
            "VernacNotation",
            "cce6365580442ab4a9b36f6fe4a394b0000fc194"
        ],
        [
            "Lemma exp_orderC x : x ^+ #[x]%C = 1.",
            "VernacStartTheoremProof",
            "7a659dc3a0438d816ee372e6b3cc8baea2193b30"
        ],
        [
            "rewrite /orderC; case: pickP => //= [] [n _] /= /eqP Dp.",
            "VernacExtend",
            "712d339e99ee17eb7d5033e19ac614eb3ca6b532"
        ],
        [
            "have n_gt0: (0 < n)%N.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "rewrite lt0n; apply: contraTneq (size_minCpoly x) => n0.",
            "VernacExtend",
            "634a7639ed2fb7caf62757f84400927f5829b7d5"
        ],
        [
            "by rewrite Dp n0 Cyclotomic0 rmorph1 size_poly1.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "have [z prim_z] := C_prim_root_exists n_gt0.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "rewrite prim_expr_order // -(root_cyclotomic prim_z).",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "by rewrite -Cintr_Cyclotomic // -Dp root_minCpoly.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma dvdn_orderC x n : (#[x]%C %| n)%N = (x ^+ n == 1).",
            "VernacStartTheoremProof",
            "1156543c44034a45c7603e41ee86dc0d9ba67adb"
        ],
        [
            "apply/idP/eqP=> [|x_n_1]; first by apply: expr_dvd; apply: exp_orderC.",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "have [-> | n_gt0] := posnP n; first by rewrite dvdn0.",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "have [m prim_x m_dv_n] := prim_order_exists n_gt0 x_n_1.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "have{n_gt0} m_gt0 := dvdn_gt0 n_gt0 m_dv_n; congr (_ %| n)%N: m_dv_n.",
            "VernacExtend",
            "8b36d8df19012ff2ae335c75805a3480d7519235"
        ],
        [
            "pose p := minCpoly x; have Dp: p = cyclotomic x m := minCpoly_cyclotomic prim_x.",
            "VernacExtend",
            "c09d1274557abc8857ed64eb3450db2da906c185"
        ],
        [
            "rewrite /orderC; case: pickP => /= [k /eqP Dp_k | no_k]; last first.",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "suffices lt_m_2p: (m < 2 * size p ^ 2)%N.",
            "VernacExtend",
            "290ed488b5562e885aa2cac56f3a69b4faa0eaa6"
        ],
        [
            "have /eqP[] := no_k (Ordinal lt_m_2p).",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "by rewrite /= -/p Dp -Cintr_Cyclotomic.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "rewrite Dp size_cyclotomic (sqrnD 1) addnAC mulnDr -add1n leq_add //.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "suffices: (m <= \\prod_(q <- primes m | q == 2) q * totient m ^ 2)%N.",
            "VernacExtend",
            "290ed488b5562e885aa2cac56f3a69b4faa0eaa6"
        ],
        [
            "have [m_even | m_odd] := boolP (2 \\in primes m).",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "by rewrite -big_filter filter_pred1_uniq ?primes_uniq // big_seq1.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "by rewrite big_hasC ?has_pred1 // => /leq_trans-> //; apply: leq_addl.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "rewrite big_mkcond totientE // -mulnn -!big_split /=.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "rewrite {1}[m]prod_prime_decomp // prime_decompE big_map /= !big_seq.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "elim/big_ind2: _ => // [n1 m1 n2 m2 | q]; first exact: leq_mul.",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "rewrite mem_primes => /and3P[q_pr _ q_dv_m].",
            "VernacExtend",
            "3c42b53d0efc26db114b00541ac5e7fcb29e6aeb"
        ],
        [
            "rewrite lognE q_pr m_gt0 q_dv_m /=; move: (logn q _) => k.",
            "VernacExtend",
            "7e529e80bb2879787ee6d9466056f19f0215c721"
        ],
        [
            "rewrite !mulnA expnS leq_mul //.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "case: (ltngtP q) => // [|q_gt2 | ->]; first by rewrite ltnNge prime_gt1.",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "rewrite mul1n mulnAC mulnn -{1}[q]muln1 leq_mul ?expn_gt0 ?prime_gt0 //.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "by rewrite -(subnKC q_gt2) (ltn_exp2l 1).",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "by rewrite !muln1 -expnS (ltn_exp2l 0).",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "have k_prim_x: k.-primitive_root x.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "have k_gt0: (0 < k)%N.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "rewrite lt0n; apply: contraTneq (size_minCpoly x) => k0.",
            "VernacExtend",
            "634a7639ed2fb7caf62757f84400927f5829b7d5"
        ],
        [
            "by rewrite Dp_k k0 Cyclotomic0 rmorph1 size_poly1.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "have [z prim_z] := C_prim_root_exists k_gt0.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "rewrite -(root_cyclotomic prim_z) -Cintr_Cyclotomic //.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "by rewrite -Dp_k root_minCpoly.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "apply/eqP; rewrite eqn_dvd !(@prim_order_dvd _ _ x) //.",
            "VernacExtend",
            "56c014161b39aecfb3c54301c2409dba4e8e1857"
        ],
        [
            "by rewrite !prim_expr_order ?eqxx.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ]
    ],
    "proofs": [
        {
            "name": "Crat_spanP",
            "line_nb": 86,
            "steps": [
                {
                    "command": [
                        "exact: sumboolP.",
                        "VernacExtend",
                        "ce637ff86bafca5d8359473e8c02af644dcbdc43"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "Crat_span_key",
            "line_nb": 89,
            "steps": [
                {
                    "command": [
                        "by [].",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "mem_Crat_span",
            "line_nb": 93,
            "steps": [
                {
                    "command": [
                        "move=> _ /(nthP 0)[ix ltxs <-]; pose i0 := Ordinal ltxs.",
                        "VernacExtend",
                        "fef3c4a8f7fcf70b0824f3cce5fb58f2e0ef07fd"
                    ]
                },
                {
                    "command": [
                        "apply/Crat_spanP; exists [ffun i => (i == i0)%:R].",
                        "VernacExtend",
                        "3880d457db694c1b9897b9a879a05955b45d5510"
                    ]
                },
                {
                    "command": [
                        "rewrite (bigD1 i0) //= ffunE eqxx // rmorph1 mul1r.",
                        "VernacExtend",
                        "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
                    ]
                },
                {
                    "command": [
                        "by rewrite big1 ?addr0 // => i; rewrite ffunE rmorph_nat mulr_natl => /negbTE->.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "Crat_span_zmod_closed",
            "line_nb": 99,
            "steps": [
                {
                    "command": [
                        "split=> [|_ _ /Crat_spanP[x ->] /Crat_spanP[y ->]].",
                        "VernacExtend",
                        "3c42b53d0efc26db114b00541ac5e7fcb29e6aeb"
                    ]
                },
                {
                    "command": [
                        "apply/Crat_spanP; exists 0.",
                        "VernacExtend",
                        "21cb72e03041990491a307522af850ef917c0b03"
                    ]
                },
                {
                    "command": [
                        "by apply/esym/big1=> i _; rewrite ffunE rmorph0 mul0r.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "apply/Crat_spanP; exists (x - y); rewrite -sumrB; apply: eq_bigr => i _.",
                        "VernacExtend",
                        "e4c544f551090040dcc68ecc99b283594be84ff1"
                    ]
                },
                {
                    "command": [
                        "by rewrite -mulrBl -rmorphB !ffunE.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "alg_num_field",
            "line_nb": 111,
            "steps": [
                {
                    "command": [
                        "by rewrite -in_algE fmorph_eq_rat.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "rmorphZ_num",
            "line_nb": 114,
            "steps": [
                {
                    "command": [
                        "by rewrite -mulr_algl rmorphM alg_num_field fmorph_rat.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "fmorph_numZ",
            "line_nb": 117,
            "steps": [
                {
                    "command": [
                        "by move=> a x; rewrite rmorphZ_num -alg_num_field mulr_algl.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "Crat_spanZ",
            "line_nb": 124,
            "steps": [
                {
                    "command": [
                        "move=> _ /Crat_spanP[a1 ->]; apply/Crat_spanP; exists [ffun i => a * a1 i].",
                        "VernacExtend",
                        "9f7d315d69958f06ba946decf97b54379cd62abc"
                    ]
                },
                {
                    "command": [
                        "by rewrite mulr_sumr; apply: eq_bigr => i _; rewrite ffunE mulrA -rmorphM.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "Crat_spanM",
            "line_nb": 128,
            "steps": [
                {
                    "command": [
                        "by move=> _ x /CratP[a ->]; apply: Crat_spanZ.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "num_field_proj",
            "line_nb": 131,
            "steps": [
                {
                    "command": [
                        "pose b := vbasis {:Qn}.",
                        "VernacExtend",
                        "3c5f04de94609049d978298aa02ff35fb35ea7c7"
                    ]
                },
                {
                    "command": [
                        "have Qn_bC (u : {x | x \\in Crat_span (map QnC b)}): {y | QnC y = sval u}.",
                        "VernacExtend",
                        "406cde1174359c53bf162a2a18c4eede395555f9"
                    ]
                },
                {
                    "command": [
                        "case: u => _ /= /Crat_spanP/sig_eqW[a ->].",
                        "VernacExtend",
                        "e00fff71ff314c991514fc71c41a3556702e444a"
                    ]
                },
                {
                    "command": [
                        "exists (\\sum_i a i *: b`_i); rewrite rmorph_sum; apply: eq_bigr => i _.",
                        "VernacExtend",
                        "db26aa6727af727e908464d2cc564b40f6a4e15c"
                    ]
                },
                {
                    "command": [
                        "by rewrite rmorphZ_num (nth_map 0) // -(size_map QnC).",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "pose CtoQn x := oapp (fun u => sval (Qn_bC u)) 0 (insub x).",
                        "VernacExtend",
                        "3c5f04de94609049d978298aa02ff35fb35ea7c7"
                    ]
                },
                {
                    "command": [
                        "suffices QnCK: cancel QnC CtoQn by exists CtoQn; rewrite // -(rmorph0 QnC).",
                        "VernacExtend",
                        "290ed488b5562e885aa2cac56f3a69b4faa0eaa6"
                    ]
                },
                {
                    "command": [
                        "move=> x; rewrite /CtoQn insubT => /= [|Qn_x]; last first.",
                        "VernacExtend",
                        "3763a4b8db689af316a7372b722bb29806ab4fb6"
                    ]
                },
                {
                    "command": [
                        "by case: (Qn_bC _) => x1 /= /fmorph_inj.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "rewrite (coord_vbasis (memvf x)) rmorph_sum rpred_sum // => i _.",
                        "VernacExtend",
                        "3c42b53d0efc26db114b00541ac5e7fcb29e6aeb"
                    ]
                },
                {
                    "command": [
                        "rewrite rmorphZ_num Crat_spanZ ?mem_Crat_span // -/b.",
                        "VernacExtend",
                        "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
                    ]
                },
                {
                    "command": [
                        "by rewrite -tnth_nth -tnth_map mem_tnth.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "restrict_aut_to_num_field",
            "line_nb": 145,
            "steps": [
                {
                    "command": [
                        "move=> Qn_nu; pose nu0 x := sval (sig_eqW (Qn_nu x)).",
                        "VernacExtend",
                        "fef3c4a8f7fcf70b0824f3cce5fb58f2e0ef07fd"
                    ]
                },
                {
                    "command": [
                        "have QnC_nu0: {morph QnC : x / nu0 x >-> nu x}.",
                        "VernacExtend",
                        "406cde1174359c53bf162a2a18c4eede395555f9"
                    ]
                },
                {
                    "command": [
                        "by rewrite /nu0 => x; case: (sig_eqW _).",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "suffices nu0M: rmorphism nu0 by exists (NumLRmorphism (RMorphism nu0M)).",
                        "VernacExtend",
                        "290ed488b5562e885aa2cac56f3a69b4faa0eaa6"
                    ]
                },
                {
                    "command": [
                        "do 2?split=> [x y|]; apply: (fmorph_inj QnC); rewrite ?QnC_nu0 ?rmorph1 //.",
                        "VernacExtend",
                        "91390c987889ce5a6686f59ba64c8862af932f2e"
                    ]
                },
                {
                    "command": [
                        "by rewrite ?(rmorphB, QnC_nu0).",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "by rewrite ?(rmorphM, QnC_nu0).",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "map_Qnum_poly",
            "line_nb": 154,
            "steps": [
                {
                    "command": [
                        "move=> Qp; apply/polyP=> i; rewrite /= !coef_map /=.",
                        "VernacExtend",
                        "f7feb259d6220ca40e8a86b90bd06f137aa140ac"
                    ]
                },
                {
                    "command": [
                        "have /vlineP[a ->]: p`_i \\in 1%VS by apply: polyOverP.",
                        "VernacExtend",
                        "406cde1174359c53bf162a2a18c4eede395555f9"
                    ]
                },
                {
                    "command": [
                        "by rewrite alg_num_field !fmorph_rat.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "restrict_aut_to_normal_num_field",
            "line_nb": 160,
            "steps": [
                {
                    "command": [
                        "apply: restrict_aut_to_num_field => x.",
                        "VernacExtend",
                        "4bd6fa79b17bcd2bfb7af091fb325367a20385d6"
                    ]
                },
                {
                    "command": [
                        "case: (splitting_field_normal 1%AS x) => rs /eqP Hrs.",
                        "VernacExtend",
                        "e00fff71ff314c991514fc71c41a3556702e444a"
                    ]
                },
                {
                    "command": [
                        "have: root (map_poly (nu \\o QnC) (minPoly 1%AS x)) (nu (QnC x)).",
                        "VernacExtend",
                        "406cde1174359c53bf162a2a18c4eede395555f9"
                    ]
                },
                {
                    "command": [
                        "by rewrite fmorph_root root_minPoly.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "rewrite map_Qnum_poly ?minPolyOver // Hrs.",
                        "VernacExtend",
                        "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
                    ]
                },
                {
                    "command": [
                        "rewrite [map_poly _ _](_:_ = \\prod_(y <- map QnC rs) ('X - y%:P)); last first.",
                        "VernacExtend",
                        "3763a4b8db689af316a7372b722bb29806ab4fb6"
                    ]
                },
                {
                    "command": [
                        "rewrite big_map rmorph_prod; apply eq_bigr => i _.",
                        "VernacExtend",
                        "80e7cce19c53eb5d5a21aafd83e552d37e23084a"
                    ]
                },
                {
                    "command": [
                        "by rewrite rmorphB /= map_polyX map_polyC.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "rewrite root_prod_XsubC.",
                        "VernacExtend",
                        "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
                    ]
                },
                {
                    "command": [
                        "by case/mapP => y _ ?; exists y.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "Cint_span_key",
            "line_nb": 222,
            "steps": [
                {
                    "command": [
                        "by [].",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "Cint_spanP",
            "line_nb": 226,
            "steps": [
                {
                    "command": [
                        "rewrite unfold_in; case: (dec_Cint_span _ _) => [Zs_x | Zs'x] /=.",
                        "VernacExtend",
                        "712d339e99ee17eb7d5033e19ac614eb3ca6b532"
                    ]
                },
                {
                    "command": [
                        "left; have{Zs_x} [] := Zs_x; rewrite /= size_map size_tuple => a /rowP/(_ 0).",
                        "VernacExtend",
                        "d2a26ac609cba0450fd94aa0dc5f1bd5be083ad3"
                    ]
                },
                {
                    "command": [
                        "rewrite !mxE => ->; exists a; rewrite summxE; apply: eq_bigr => i _.",
                        "VernacExtend",
                        "0f2f605b05d1a234fb4b4947d4311c7c39f9b937"
                    ]
                },
                {
                    "command": [
                        "by rewrite -scaler_int (nth_map 0) ?size_tuple // !mxE mulrzl.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "right=> [[a Dx]]; have{Zs'x} [] := Zs'x.",
                        "VernacExtend",
                        "d2991b7607b6316c9d43d28c85f87ca601299ca6"
                    ]
                },
                {
                    "command": [
                        "rewrite /inIntSpan /= size_map size_tuple; exists a.",
                        "VernacExtend",
                        "44daa6fca1c550f35496357f75825e76f841caa2"
                    ]
                },
                {
                    "command": [
                        "apply/rowP=> i0; rewrite !mxE summxE Dx; apply: eq_bigr => i _.",
                        "VernacExtend",
                        "da24caf87c1bbbad0538b8be68905ec456c78aa7"
                    ]
                },
                {
                    "command": [
                        "by rewrite -scaler_int mxE mulrzl (nth_map 0) ?size_tuple // !mxE.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "Cint_span_zmod_closed",
            "line_nb": 242,
            "steps": [
                {
                    "command": [
                        "have sP := Cint_spanP (in_tuple s); split=> [|_ _ /sP[x ->] /sP[y ->]].",
                        "VernacExtend",
                        "8431fc4d2460f7908baa11892c1b26797a3f17b8"
                    ]
                },
                {
                    "command": [
                        "by apply/sP; exists 0; rewrite big1 // => i; rewrite ffunE.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "apply/sP; exists (x - y); rewrite -sumrB; apply: eq_bigr => i _.",
                        "VernacExtend",
                        "e4c544f551090040dcc68ecc99b283594be84ff1"
                    ]
                },
                {
                    "command": [
                        "by rewrite !ffunE raddfB.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "Aint_key",
            "line_nb": 399,
            "steps": [
                {
                    "command": [
                        "by [].",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "root_monic_Aint",
            "line_nb": 403,
            "steps": [
                {
                    "command": [
                        "have pZtoQtoC pz: pQtoC (pZtoQ pz) = pZtoC pz.",
                        "VernacExtend",
                        "406cde1174359c53bf162a2a18c4eede395555f9"
                    ]
                },
                {
                    "command": [
                        "by rewrite -map_poly_comp; apply: eq_map_poly => b; rewrite /= rmorph_int.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "move=> px0 mon_p /floorCpP[pz Dp]; rewrite unfold_in.",
                        "VernacExtend",
                        "057edeb0967475c7ea5e8c98c449ddc5613eddc1"
                    ]
                },
                {
                    "command": [
                        "move: px0; rewrite Dp -pZtoQtoC; have [q [-> mon_q] ->] := minCpolyP x.",
                        "VernacExtend",
                        "9354a6a63df0e9a0c9866f63e8fbdb6d124eb491"
                    ]
                },
                {
                    "command": [
                        "case/dvdpP_rat_int=> qz [a nz_a Dq] [r].",
                        "VernacExtend",
                        "e00fff71ff314c991514fc71c41a3556702e444a"
                    ]
                },
                {
                    "command": [
                        "move/(congr1 (fun q1 => lead_coef (a *: pZtoQ q1))).",
                        "VernacExtend",
                        "b1b2cb7a3a617cba67460b4eca1f04de3c1cc716"
                    ]
                },
                {
                    "command": [
                        "rewrite rmorphM scalerAl -Dq lead_coefZ lead_coefM /=.",
                        "VernacExtend",
                        "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
                    ]
                },
                {
                    "command": [
                        "have /monicP->: pZtoQ pz \\is monic by rewrite -(map_monic QtoCm) pZtoQtoC -Dp.",
                        "VernacExtend",
                        "406cde1174359c53bf162a2a18c4eede395555f9"
                    ]
                },
                {
                    "command": [
                        "rewrite (monicP mon_q) mul1r mulr1 lead_coef_map_inj //; last exact: intr_inj.",
                        "VernacExtend",
                        "3763a4b8db689af316a7372b722bb29806ab4fb6"
                    ]
                },
                {
                    "command": [
                        "rewrite Dq => ->; apply/polyOverP=> i; rewrite !(coefZ, coef_map).",
                        "VernacExtend",
                        "01f04d3f5bba3b876eb4ec7b1c8f26d2e2cced77"
                    ]
                },
                {
                    "command": [
                        "by rewrite -rmorphM /= rmorph_int Cint_int.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "Cint_rat_Aint",
            "line_nb": 416,
            "steps": [
                {
                    "command": [
                        "case/CratP=> a ->{z} /polyOverP/(_ 0%N).",
                        "VernacExtend",
                        "e00fff71ff314c991514fc71c41a3556702e444a"
                    ]
                },
                {
                    "command": [
                        "have [p [Dp mon_p] dv_p] := minCpolyP (ratr a); rewrite Dp coef_map.",
                        "VernacExtend",
                        "aa9d5fbc682ed874cd64b2543ca6c859b978e924"
                    ]
                },
                {
                    "command": [
                        "suffices /eqP->: p == 'X - a%:P by rewrite polyseqXsubC /= rmorphN rpredN.",
                        "VernacExtend",
                        "290ed488b5562e885aa2cac56f3a69b4faa0eaa6"
                    ]
                },
                {
                    "command": [
                        "rewrite -eqp_monic ?monicXsubC // irredp_XsubC //.",
                        "VernacExtend",
                        "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
                    ]
                },
                {
                    "command": [
                        "by rewrite -(size_map_poly QtoCm) -Dp neq_ltn size_minCpoly orbT.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "by rewrite -dv_p fmorph_root root_XsubC.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "Aint_Cint",
            "line_nb": 424,
            "steps": [
                {
                    "command": [
                        "move=> x; rewrite -polyOverXsubC.",
                        "VernacExtend",
                        "057edeb0967475c7ea5e8c98c449ddc5613eddc1"
                    ]
                },
                {
                    "command": [
                        "by apply: root_monic_Aint; rewrite ?monicXsubC ?root_XsubC.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "Aint_int",
            "line_nb": 428,
            "steps": [
                {
                    "command": [
                        "by rewrite Aint_Cint ?Cint_int.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "Aint0",
            "line_nb": 431,
            "steps": [
                {
                    "command": [
                        "exact: (Aint_int 0).",
                        "VernacExtend",
                        "ce637ff86bafca5d8359473e8c02af644dcbdc43"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "Aint1",
            "line_nb": 434,
            "steps": [
                {
                    "command": [
                        "exact: (Aint_int 1).",
                        "VernacExtend",
                        "ce637ff86bafca5d8359473e8c02af644dcbdc43"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "Aint_unity_root",
            "line_nb": 438,
            "steps": [
                {
                    "command": [
                        "move=> n_gt0 xn1; apply: root_monic_Aint xn1 (monic_Xn_sub_1 _ n_gt0) _.",
                        "VernacExtend",
                        "d6ebf3361f380a12d5c2c9bbb7ea363132c48b36"
                    ]
                },
                {
                    "command": [
                        "by apply/polyOverP=> i; rewrite coefB coefC -mulrb coefXn /= rpredB ?rpred_nat.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "Aint_Cnat",
            "line_nb": 446,
            "steps": [
                {
                    "command": [
                        "by move=> z /Cint_Cnat/Aint_Cint.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "Aint_subring",
            "line_nb": 516,
            "steps": [
                {
                    "command": [
                        "suff rAZ: {in Aint &, forall x y, (x - y \\in Aint) * (x * y \\in Aint)}.",
                        "VernacExtend",
                        "d07fc8b2103f140554938023774bf3f75d04ba99"
                    ]
                },
                {
                    "command": [
                        "by split=> // x y AZx AZy; rewrite rAZ.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "move=> x y AZx AZy.",
                        "VernacExtend",
                        "b1b2cb7a3a617cba67460b4eca1f04de3c1cc716"
                    ]
                },
                {
                    "command": [
                        "have [|S [ringS] ] := @Aint_subring_exists [:: x; y]; first exact/allP/and3P.",
                        "VernacExtend",
                        "3763a4b8db689af316a7372b722bb29806ab4fb6"
                    ]
                },
                {
                    "command": [
                        "move=> /allP/and3P[Sx Sy _] [Y _ genYS].",
                        "VernacExtend",
                        "b1b2cb7a3a617cba67460b4eca1f04de3c1cc716"
                    ]
                },
                {
                    "command": [
                        "have AZ_S := fin_Csubring_Aint ringS genYS.",
                        "VernacExtend",
                        "406cde1174359c53bf162a2a18c4eede395555f9"
                    ]
                },
                {
                    "command": [
                        "by have [_ S_B S_M] := ringS; rewrite !AZ_S ?S_B ?S_M.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "Aint_aut",
            "line_nb": 533,
            "steps": [
                {
                    "command": [
                        "by rewrite !unfold_in minCpoly_aut.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "dvdA_key",
            "line_nb": 537,
            "steps": [
                {
                    "command": [
                        "by [].",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "dvdA_zmod_closed",
            "line_nb": 545,
            "steps": [
                {
                    "command": [
                        "split=> [|x y]; first by rewrite unfold_in mul0r eqxx rpred0 ?if_same.",
                        "VernacExtend",
                        "3763a4b8db689af316a7372b722bb29806ab4fb6"
                    ]
                },
                {
                    "command": [
                        "rewrite ![(e %| _)%A]unfold_in.",
                        "VernacExtend",
                        "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
                    ]
                },
                {
                    "command": [
                        "case: ifP => [_ x0 /eqP-> | _]; first by rewrite subr0.",
                        "VernacExtend",
                        "3763a4b8db689af316a7372b722bb29806ab4fb6"
                    ]
                },
                {
                    "command": [
                        "by rewrite mulrBl; apply: rpredB.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "eqAmod_refl",
            "line_nb": 557,
            "steps": [
                {
                    "command": [
                        "by rewrite /eqAmod subrr rpred0.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "eqAmod_sym",
            "line_nb": 561,
            "steps": [
                {
                    "command": [
                        "by rewrite /eqAmod -opprB rpredN.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "eqAmod_trans",
            "line_nb": 564,
            "steps": [
                {
                    "command": [
                        "by move=> Exy Eyz; rewrite /eqAmod -[x](subrK y) -addrA rpredD.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "eqAmod_transl",
            "line_nb": 567,
            "steps": [
                {
                    "command": [
                        "by move/(sym_left_transitive (eqAmod_sym e) (@eqAmod_trans e)).",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "eqAmod_transr",
            "line_nb": 570,
            "steps": [
                {
                    "command": [
                        "by move/(sym_right_transitive (eqAmod_sym e) (@eqAmod_trans e)).",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "eqAmod0",
            "line_nb": 573,
            "steps": [
                {
                    "command": [
                        "by rewrite /eqAmod subr0.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "eqAmodN",
            "line_nb": 576,
            "steps": [
                {
                    "command": [
                        "by rewrite eqAmod_sym /eqAmod !opprK addrC.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "eqAmodDr",
            "line_nb": 579,
            "steps": [
                {
                    "command": [
                        "by rewrite /eqAmod addrAC opprD !addrA subrK.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "eqAmodDl",
            "line_nb": 582,
            "steps": [
                {
                    "command": [
                        "by rewrite !(addrC x) eqAmodDr.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "eqAmodD",
            "line_nb": 585,
            "steps": [
                {
                    "command": [
                        "by rewrite -(eqAmodDl e x2 y1) -(eqAmodDr e y1); apply: eqAmod_trans.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "eqAmodm0",
            "line_nb": 588,
            "steps": [
                {
                    "command": [
                        "by rewrite /eqAmod subr0 unfold_in; case: ifPn => // /divff->.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "eqAmodMr",
            "line_nb": 592,
            "steps": [
                {
                    "command": [
                        "move=> z Zz x y.",
                        "VernacExtend",
                        "b1b2cb7a3a617cba67460b4eca1f04de3c1cc716"
                    ]
                },
                {
                    "command": [
                        "rewrite /eqAmod -mulrBl ![(e %| _)%A]unfold_in mulf_eq0 mulrAC.",
                        "VernacExtend",
                        "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
                    ]
                },
                {
                    "command": [
                        "by case: ifP => [_ -> // | _ Exy]; apply: rpredM.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "eqAmodMl",
            "line_nb": 597,
            "steps": [
                {
                    "command": [
                        "by move=> z Zz x y Exy; rewrite !(mulrC z) eqAmodMr.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "eqAmodMl0",
            "line_nb": 600,
            "steps": [
                {
                    "command": [
                        "by move=> x Zx; rewrite -(mulr0 x) eqAmodMl.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "eqAmodMr0",
            "line_nb": 603,
            "steps": [
                {
                    "command": [
                        "by move=> x Zx; rewrite /= mulrC eqAmodMl0.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "eqAmod_addl_mul",
            "line_nb": 606,
            "steps": [
                {
                    "command": [
                        "by move=> x Zx y; rewrite -{2}[y]add0r eqAmodDr eqAmodMl0.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "eqAmodM",
            "line_nb": 609,
            "steps": [
                {
                    "command": [
                        "move=> x1 y2 Zx1 Zy2 x2 y1 eq_x /(eqAmodMl Zx1)/eqAmod_trans-> //.",
                        "VernacExtend",
                        "b1b2cb7a3a617cba67460b4eca1f04de3c1cc716"
                    ]
                },
                {
                    "command": [
                        "exact: eqAmodMr.",
                        "VernacExtend",
                        "ce637ff86bafca5d8359473e8c02af644dcbdc43"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "eqAmod_rat",
            "line_nb": 613,
            "steps": [
                {
                    "command": [
                        "move=> e m n Qe Qm Qn; rewrite /eqCmod unfold_in /eqAmod unfold_in.",
                        "VernacExtend",
                        "057edeb0967475c7ea5e8c98c449ddc5613eddc1"
                    ]
                },
                {
                    "command": [
                        "case: ifPn => // nz_e; apply/idP/idP=> [/Cint_rat_Aint | /Aint_Cint] -> //.",
                        "VernacExtend",
                        "d62e4c271de3f2a9ff5062b8b89d3c57d965c518"
                    ]
                },
                {
                    "command": [
                        "by rewrite rpred_div ?rpredB.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "eqAmod0_rat",
            "line_nb": 618,
            "steps": [
                {
                    "command": [
                        "by move=> e n Qe Qn; rewrite /= eqAmod_rat /eqCmod ?subr0 ?Crat0.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "eqAmod_nat",
            "line_nb": 621,
            "steps": [
                {
                    "command": [
                        "by rewrite eqAmod_rat ?rpred_nat // eqCmod_nat.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "eqAmod0_nat",
            "line_nb": 624,
            "steps": [
                {
                    "command": [
                        "by rewrite eqAmod0_rat ?rpred_nat // dvdC_nat.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "exp_orderC",
            "line_nb": 629,
            "steps": [
                {
                    "command": [
                        "rewrite /orderC; case: pickP => //= [] [n _] /= /eqP Dp.",
                        "VernacExtend",
                        "712d339e99ee17eb7d5033e19ac614eb3ca6b532"
                    ]
                },
                {
                    "command": [
                        "have n_gt0: (0 < n)%N.",
                        "VernacExtend",
                        "406cde1174359c53bf162a2a18c4eede395555f9"
                    ]
                },
                {
                    "command": [
                        "rewrite lt0n; apply: contraTneq (size_minCpoly x) => n0.",
                        "VernacExtend",
                        "634a7639ed2fb7caf62757f84400927f5829b7d5"
                    ]
                },
                {
                    "command": [
                        "by rewrite Dp n0 Cyclotomic0 rmorph1 size_poly1.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "have [z prim_z] := C_prim_root_exists n_gt0.",
                        "VernacExtend",
                        "406cde1174359c53bf162a2a18c4eede395555f9"
                    ]
                },
                {
                    "command": [
                        "rewrite prim_expr_order // -(root_cyclotomic prim_z).",
                        "VernacExtend",
                        "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
                    ]
                },
                {
                    "command": [
                        "by rewrite -Cintr_Cyclotomic // -Dp root_minCpoly.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        }
    ]
}