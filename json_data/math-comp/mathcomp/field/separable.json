{
    "filename": "mathcomp/field/separable.v",
    "coq_project": "math-comp",
    "vernac_cmds": [
        [
            "Require Import mathcomp.ssreflect.ssreflect.",
            "VernacRequire",
            "85e251063dc2b5a9653f7bb76dcd176ed36b42a9"
        ],
        [
            "From mathcomp Require Import ssrbool ssrfun eqtype ssrnat seq div choice fintype.",
            "VernacRequire",
            "e665c6902e70ac801e5b749428ba09cedb8a2b75"
        ],
        [
            "From mathcomp Require Import tuple finfun bigop finset prime binomial ssralg poly polydiv.",
            "VernacRequire",
            "2f4a7f045f8098bcf9f78a3c3993599d440fc739"
        ],
        [
            "From mathcomp Require Import fingroup perm morphism quotient gproduct finalg zmodp cyclic.",
            "VernacRequire",
            "11b924695ed319b40e97124b44310ce04f20115b"
        ],
        [
            "From mathcomp Require Import matrix mxalgebra mxpoly polyXY vector falgebra fieldext.",
            "VernacRequire",
            "f8df3913fcc4b617219538a5541a82ded93f68d0"
        ],
        [
            "Set Implicit Arguments.",
            "VernacSetOption",
            "9e84ff8896f028601d8aded48c1d4aebe60aa584"
        ],
        [
            "Unset Strict Implicit.",
            "VernacUnsetOption",
            "2842adaf6959318f2042805935c46f513bdc0348"
        ],
        [
            "Unset Printing Implicit Defensive.",
            "VernacUnsetOption",
            "444e5f0be4b25d9b1fd556943a447ec10046d151"
        ],
        [
            "Local Open Scope ring_scope.",
            "VernacOpenCloseScope",
            "fb9da4a291533574d328be8c8a69d90a14641928"
        ],
        [
            "Import GRing.Theory.",
            "VernacImport",
            "a0fcf55540300b9b0e54bd28a113c5228ff530f4"
        ],
        [
            "Section SeparablePoly.",
            "VernacBeginSection",
            "fdb6e4077a92c0469c882bb31badf35b2687c92b"
        ],
        [
            "Variable R : idomainType.",
            "VernacAssumption",
            "cbab1d9d04a0bef334944e593ca6e504cfbe949c"
        ],
        [
            "Implicit Types p q d u v : {poly R}.",
            "VernacReserve",
            "6c672bfe4fd641f13fb73414f996f9424ada1718"
        ],
        [
            "Definition separable_poly p := coprimep p p^`().",
            "VernacDefinition",
            "892787071c4d68ead8d8ff853a97fe7067b4a002"
        ],
        [
            "Local Notation separable := separable_poly.",
            "VernacSyntacticDefinition",
            "fe166d6b4d961614ccc5f14c403436aa9e5e09e8"
        ],
        [
            "Local Notation lcn_neq0 := (Pdiv.Idomain.lc_expn_scalp_neq0 _).",
            "VernacSyntacticDefinition",
            "cebe153e0f5ee47ab30a5995ef495e46e51bf7e4"
        ],
        [
            "Lemma separable_poly_neq0 p : separable p -> p != 0.",
            "VernacStartTheoremProof",
            "4860cce0635f366a459013aca415797247991339"
        ],
        [
            "by apply: contraTneq => ->; rewrite /separable deriv0 coprime0p eqp01.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma poly_square_freeP p : (forall u v, u * v %| p -> coprimep u v) <-> (forall u, size u != 1%N -> ~~ (u ^+ 2 %| p)).",
            "VernacStartTheoremProof",
            "5771ef1cf6829818990aa38b757b3d593db26b59"
        ],
        [
            "split=> [sq'p u | sq'p u v dvd_uv_p].",
            "VernacExtend",
            "3c42b53d0efc26db114b00541ac5e7fcb29e6aeb"
        ],
        [
            "by apply: contra => /sq'p; rewrite coprimepp.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "rewrite coprimep_def (contraLR (sq'p _)) // (dvdp_trans _ dvd_uv_p) //.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "by rewrite dvdp_mul ?dvdp_gcdl ?dvdp_gcdr.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma separable_polyP {p} : reflect [/\\ forall u v, u * v %| p -> coprimep u v & forall u, u %| p -> 1 < size u -> u^`() != 0] (separable p).",
            "VernacStartTheoremProof",
            "010dbb5b991726280f4df2f6572b282f8882f574"
        ],
        [
            "apply: (iffP idP) => [sep_p | [sq'p nz_der1p]].",
            "VernacExtend",
            "4bd6fa79b17bcd2bfb7af091fb325367a20385d6"
        ],
        [
            "split=> [u v | u u_dv_p]; last first.",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "apply: contraTneq => u'0; rewrite -leqNgt -(eqnP sep_p).",
            "VernacExtend",
            "56c014161b39aecfb3c54301c2409dba4e8e1857"
        ],
        [
            "rewrite dvdp_leq -?size_poly_eq0 ?(eqnP sep_p) // dvdp_gcd u_dv_p.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "have /dvdp_scaler <-: lead_coef u ^+ scalp p u != 0 by rewrite lcn_neq0.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "by rewrite -derivZ -Pdiv.Idomain.divpK //= derivM u'0 mulr0 addr0 dvdp_mull.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "rewrite Pdiv.Idomain.dvdp_eq mulrCA mulrA; set c := _ ^+ _ => /eqP Dcp.",
            "VernacExtend",
            "80e7cce19c53eb5d5a21aafd83e552d37e23084a"
        ],
        [
            "have nz_c: c != 0 by rewrite lcn_neq0.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "move: sep_p; rewrite coprimep_sym -[separable _](coprimep_scalel _ _ nz_c).",
            "VernacExtend",
            "057edeb0967475c7ea5e8c98c449ddc5613eddc1"
        ],
        [
            "rewrite -(coprimep_scaler _ _ nz_c) -derivZ Dcp derivM coprimep_mull.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "by rewrite coprimep_addl_mul !coprimep_mulr -andbA => /and4P[].",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "rewrite /separable coprimep_def eqn_leq size_poly_gt0; set g := gcdp _ _.",
            "VernacExtend",
            "c1f58f36c5711f022b4a54717f37c2782f34a159"
        ],
        [
            "have nz_g: g != 0.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "rewrite -dvd0p dvdp_gcd -(mulr0 0); apply/nandP; left.",
            "VernacExtend",
            "b5c6eb8f4088040d9dfd48a39246f897d117ec2b"
        ],
        [
            "by have /poly_square_freeP-> := sq'p; rewrite ?size_poly0.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "have [g_p]: g %| p /\\ g %| p^`() by rewrite dvdp_gcdr ?dvdp_gcdl.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "pose c := lead_coef g ^+ scalp p g; have nz_c: c != 0 by rewrite lcn_neq0.",
            "VernacExtend",
            "c09d1274557abc8857ed64eb3450db2da906c185"
        ],
        [
            "have Dcp: c *: p = p %/ g * g by rewrite Pdiv.Idomain.divpK.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "rewrite nz_g andbT leqNgt -(dvdp_scaler _ _ nz_c) -derivZ Dcp derivM.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "rewrite dvdp_addr; last by rewrite dvdp_mull.",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "rewrite Gauss_dvdpr; last by rewrite sq'p // mulrC -Dcp dvdp_scalel.",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "by apply: contraL => /nz_der1p nz_g'; rewrite gtNdvdp ?nz_g' ?lt_size_deriv.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma separable_coprime p u v : separable p -> u * v %| p -> coprimep u v.",
            "VernacStartTheoremProof",
            "53ac7458f29971a3ec31d4921d39c96ba33ce1d6"
        ],
        [
            "by move=> /separable_polyP[sq'p _] /sq'p.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma separable_nosquare p u k : separable p -> 1 < k -> size u != 1%N -> (u ^+ k %| p) = false.",
            "VernacStartTheoremProof",
            "d9f8cdda3d6423cc312215f5933998e4c5a634cc"
        ],
        [
            "move=> /separable_polyP[/poly_square_freeP sq'p _] /subnKC <- /sq'p.",
            "VernacExtend",
            "b1b2cb7a3a617cba67460b4eca1f04de3c1cc716"
        ],
        [
            "by apply: contraNF; apply: dvdp_trans; rewrite exprD dvdp_mulr.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma separable_deriv_eq0 p u : separable p -> u %| p -> 1 < size u -> (u^`() == 0) = false.",
            "VernacStartTheoremProof",
            "4b5350d039621c937b3ea74630c5ce2b951238e0"
        ],
        [
            "by move=> /separable_polyP[_ nz_der1p] u_p /nz_der1p/negPf->.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma dvdp_separable p q : q %| p -> separable p -> separable q.",
            "VernacStartTheoremProof",
            "08c448d2cf88ae83d1fcf7f9cd5ddea30e44be09"
        ],
        [
            "move=> /(dvdp_trans _)q_dv_p /separable_polyP[sq'p nz_der1p].",
            "VernacExtend",
            "b1b2cb7a3a617cba67460b4eca1f04de3c1cc716"
        ],
        [
            "by apply/separable_polyP; split=> [u v /q_dv_p/sq'p | u /q_dv_p/nz_der1p].",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma separable_mul p q : separable (p * q) = [&& separable p, separable q & coprimep p q].",
            "VernacStartTheoremProof",
            "f1bc2e138dda400614fbaa2ca21990a4a432bb1a"
        ],
        [
            "apply/idP/and3P => [sep_pq | [sep_p seq_q co_pq]].",
            "VernacExtend",
            "4bd6fa79b17bcd2bfb7af091fb325367a20385d6"
        ],
        [
            "rewrite !(dvdp_separable _ sep_pq) ?dvdp_mulIr ?dvdp_mulIl //.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "by rewrite (separable_coprime sep_pq).",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "rewrite /separable derivM coprimep_mull {1}addrC mulrC !coprimep_addl_mul.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "by rewrite !coprimep_mulr (coprimep_sym q p) co_pq !andbT; apply/andP.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma eqp_separable p q : p %= q -> separable p = separable q.",
            "VernacStartTheoremProof",
            "0e283fd5c845dbcc48e1e2b7b0633a54b23e6acf"
        ],
        [
            "by case/andP=> p_q q_p; apply/idP/idP=> /dvdp_separable->.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma separable_root p x : separable (p * ('X - x%:P)) = separable p && ~~ root p x.",
            "VernacStartTheoremProof",
            "f4ba722342e3588a2d198597538efed22366da23"
        ],
        [
            "rewrite separable_mul; apply: andb_id2l => seq_p.",
            "VernacExtend",
            "634a7639ed2fb7caf62757f84400927f5829b7d5"
        ],
        [
            "by rewrite /separable derivXsubC coprimep1 coprimep_XsubC.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma separable_prod_XsubC (r : seq R) : separable (\\prod_(x <- r) ('X - x%:P)) = uniq r.",
            "VernacStartTheoremProof",
            "9b32478f711f3db7b787873a1686e8e9065c4fcf"
        ],
        [
            "elim: r => [|x r IH]; first by rewrite big_nil /separable_poly coprime1p.",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "by rewrite big_cons mulrC separable_root IH root_prod_XsubC andbC.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma make_separable p : p != 0 -> separable (p %/ gcdp p p^`()).",
            "VernacStartTheoremProof",
            "47120f17fdfa69a189b0340eb2bab985641854c9"
        ],
        [
            "set g := gcdp p p^`() => nz_p; apply/separable_polyP.",
            "VernacExtend",
            "2855640502da0a3b2cfdfcd02ea9662c049d9a24"
        ],
        [
            "have max_dvd_u (u : {poly R}): 1 < size u -> exists k, ~~ (u ^+ k %| p).",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "move=> u_gt1; exists (size p); rewrite gtNdvdp // polySpred //.",
            "VernacExtend",
            "f668b1fc1e083642728486eb31e75c433ed096cd"
        ],
        [
            "by rewrite -(ltn_subRL 1) subn1 size_exp leq_pmull // -(subnKC u_gt1).",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "split=> [|u u_pg u_gt1]; last first.",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "apply/eqP=> u'0 /=; have [k /negP[]] := max_dvd_u u u_gt1.",
            "VernacExtend",
            "c574574294cc642b01d157e4c8f21ac2f90e4b5d"
        ],
        [
            "elim: k => [|k IHk]; first by rewrite dvd1p.",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "suffices: u ^+ k.+1 %| (p %/ g) * g.",
            "VernacExtend",
            "290ed488b5562e885aa2cac56f3a69b4faa0eaa6"
        ],
        [
            "by rewrite Pdiv.Idomain.divpK ?dvdp_gcdl // dvdp_scaler ?lcn_neq0.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "rewrite exprS dvdp_mul // dvdp_gcd IHk //=.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "suffices: u ^+ k %| (p %/ u ^+ k * u ^+ k)^`().",
            "VernacExtend",
            "290ed488b5562e885aa2cac56f3a69b4faa0eaa6"
        ],
        [
            "by rewrite Pdiv.Idomain.divpK // derivZ dvdp_scaler ?lcn_neq0.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "by rewrite !derivCE u'0 mul0r mul0rn mulr0 addr0 dvdp_mull.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "have pg_dv_p: p %/ g %| p by rewrite divp_dvd ?dvdp_gcdl.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "apply/poly_square_freeP=> u; rewrite neq_ltn ltnS leqn0 size_poly_eq0.",
            "VernacExtend",
            "56c014161b39aecfb3c54301c2409dba4e8e1857"
        ],
        [
            "case/predU1P=> [-> | /max_dvd_u[k]].",
            "VernacExtend",
            "e00fff71ff314c991514fc71c41a3556702e444a"
        ],
        [
            "by apply: contra nz_p; rewrite expr0n -dvd0p => /dvdp_trans->.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "apply: contra => u2_dv_pg; case: k; [by rewrite dvd1p | elim=> [|n IHn]].",
            "VernacExtend",
            "b50d6d1611264eb451b5b267428fcd9dc27846ab"
        ],
        [
            "exact: dvdp_trans (dvdp_mulr _ _) (dvdp_trans u2_dv_pg pg_dv_p).",
            "VernacExtend",
            "ce637ff86bafca5d8359473e8c02af644dcbdc43"
        ],
        [
            "suff: u ^+ n.+2 %| (p %/ g) * g.",
            "VernacExtend",
            "d07fc8b2103f140554938023774bf3f75d04ba99"
        ],
        [
            "by rewrite Pdiv.Idomain.divpK ?dvdp_gcdl // dvdp_scaler ?lcn_neq0.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "rewrite -add2n exprD dvdp_mul // dvdp_gcd.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "rewrite (dvdp_trans _ IHn) ?exprS ?dvdp_mull //=.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "suff: u ^+ n %| ((p %/ u ^+ n.+1) * u ^+ n.+1)^`().",
            "VernacExtend",
            "d07fc8b2103f140554938023774bf3f75d04ba99"
        ],
        [
            "by rewrite Pdiv.Idomain.divpK // derivZ dvdp_scaler ?lcn_neq0.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "by rewrite !derivCE dvdp_add // -1?mulr_natl ?exprS !dvdp_mull.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "End SeparablePoly.",
            "VernacEndSegment",
            "03d8a14fc953b63f7c3fa384659cb947ef2701c0"
        ],
        [
            "Arguments separable_polyP {R p}.",
            "VernacArguments",
            "13af1f57c6bd94e001817c71f24152941ca5380d"
        ],
        [
            "Lemma separable_map (F : fieldType) (R : idomainType) (f : {rmorphism F -> R}) (p : {poly F}) : separable_poly (map_poly f p) = separable_poly p.",
            "VernacStartTheoremProof",
            "7e7419a19be63499501cb5bf1e70f811a7eb3c5b"
        ],
        [
            "by rewrite /separable_poly deriv_map /coprimep -gcdp_map size_map_poly.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Section InfinitePrimitiveElementTheorem.",
            "VernacBeginSection",
            "31ed66b9028d2878aee8095d5a9af320162c37bc"
        ],
        [
            "Local Notation \"p ^ f\" := (map_poly f p) : ring_scope.",
            "VernacNotation",
            "eff2b61e775764510ade185749b1aece38411816"
        ],
        [
            "Variables (F L : fieldType) (iota : {rmorphism F -> L}).",
            "VernacAssumption",
            "4eda64e0e2a8cda5cd8c06aae11eb40e829c9a08"
        ],
        [
            "Variables (x y : L) (p : {poly F}).",
            "VernacAssumption",
            "cb30e63b82bb8ea541a91012821fed37cff8a87b"
        ],
        [
            "Hypotheses (nz_p : p != 0) (px_0 : root (p ^ iota) x).",
            "VernacAssumption",
            "cd3f7a322bcb5c0238bc95753560306e6a4856a6"
        ],
        [
            "Let inFz z w := exists q, (q ^ iota).[z] = w.",
            "VernacDefinition",
            "293b0c234bbf3515225568d8c7078e7f30dd5405"
        ],
        [
            "Lemma large_field_PET q : root (q ^ iota) y -> separable_poly q -> exists2 r, r != 0 & forall t (z := iota t * y - x), ~~ root r (iota t) -> inFz z x /\\ inFz z y.",
            "VernacStartTheoremProof",
            "d3872bfb8bc860b1ea96185505f9c5154e7d6bcf"
        ],
        [
            "move=> qy_0 sep_q; have nz_q := separable_poly_neq0 sep_q.",
            "VernacExtend",
            "ccd83c252dcbae3d56f3d057fcb8217878b51901"
        ],
        [
            "have /factor_theorem[q0 Dq] := qy_0.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "set p1 := p ^ iota \\Po ('X + x%:P); set q1 := q0 \\Po ('X + y%:P).",
            "VernacExtend",
            "7405ffc63057f1493a790d3f39e251cc5fefe81f"
        ],
        [
            "have nz_p1: p1 != 0.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "apply: contraNneq nz_p => /(canRL (fun r => comp_polyXaddC_K r _))/eqP.",
            "VernacExtend",
            "4bd6fa79b17bcd2bfb7af091fb325367a20385d6"
        ],
        [
            "by rewrite comp_poly0 map_poly_eq0.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "have{sep_q} nz_q10: q1.[0] != 0.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "move: sep_q; rewrite -(separable_map iota) Dq separable_root => /andP[_].",
            "VernacExtend",
            "8261237f0cda1915a4077c28869831c5329103ce"
        ],
        [
            "by rewrite horner_comp !hornerE.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "have nz_q1: q1 != 0 by apply: contraNneq nz_q10 => ->; rewrite horner0.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "pose p2 := p1 ^ polyC \\Po ('X * 'Y); pose q2 := q1 ^ polyC.",
            "VernacExtend",
            "311b833fadff89b2f7ed817d3cd7cb6971c96a1e"
        ],
        [
            "have /Bezout_coprimepP[[u v]]: coprimep p2 q2.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "rewrite coprimep_def eqn_leq leqNgt andbC size_poly_gt0 gcdp_eq0 poly_XmY_eq0.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "by rewrite map_polyC_eq0 (negPf nz_p1) -resultant_eq0 div_annihilant_neq0.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "rewrite -size_poly_eq1 => /size_poly1P[r nzr Dr]; exists r => {nzr}// t z nz_rt.",
            "VernacExtend",
            "fbaa61af20867a5dfb8bb5213ca8048b258f8f3a"
        ],
        [
            "have [r1 nz_r1 r1z_0]: algebraicOver iota z.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "apply/algebraic_sub; last by exists p.",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "by apply: algebraic_mul; [apply: algebraic_id | exists q].",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "pose Fz := subFExtend iota z r1; pose kappa : Fz -> L := subfx_inj.",
            "VernacExtend",
            "311b833fadff89b2f7ed817d3cd7cb6971c96a1e"
        ],
        [
            "pose kappa' := inj_subfx iota z r1.",
            "VernacExtend",
            "3c5f04de94609049d978298aa02ff35fb35ea7c7"
        ],
        [
            "have /eq_map_poly Diota: kappa \\o kappa' =1 iota.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "by move=> w; rewrite /kappa /= subfx_inj_eval // map_polyC hornerC.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "suffices [y3]: exists y3, y = kappa y3.",
            "VernacExtend",
            "290ed488b5562e885aa2cac56f3a69b4faa0eaa6"
        ],
        [
            "have [q3 ->] := subfxE y3; rewrite /kappa subfx_inj_eval // => Dy.",
            "VernacExtend",
            "8431fc4d2460f7908baa11892c1b26797a3f17b8"
        ],
        [
            "split; [exists (t *: q3 - 'X) | by exists q3].",
            "VernacExtend",
            "59cb56a1d7f387eda892cc9dd574a452d113bb64"
        ],
        [
            "by rewrite rmorphB linearZ /= map_polyX !hornerE -Dy opprB addrC addrNK.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "pose p0 := p ^ iota \\Po (iota t *: 'X - z%:P).",
            "VernacExtend",
            "3c5f04de94609049d978298aa02ff35fb35ea7c7"
        ],
        [
            "have co_p0_q0: coprimep p0 q0.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "pose at_t := horner_eval (iota t); have at_t0: at_t 0 = 0 by apply: rmorph0.",
            "VernacExtend",
            "c09d1274557abc8857ed64eb3450db2da906c185"
        ],
        [
            "have /map_polyK polyCK: cancel polyC at_t by move=> w; apply: hornerC.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "have ->: p0 = p2 ^ at_t \\Po ('X - y%:P).",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "rewrite map_comp_poly polyCK // rmorphM /= map_polyC map_polyX /=.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "rewrite horner_evalE hornerX.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "rewrite -!comp_polyA comp_polyM comp_polyD !comp_polyC !comp_polyX.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "by rewrite mulrC mulrBr mul_polyC addrAC -addrA -opprB -rmorphM -rmorphB.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "have ->: q0 = q2 ^ at_t \\Po ('X - y%:P) by rewrite polyCK ?comp_polyXaddC_K.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "apply/coprimep_comp_poly/Bezout_coprimepP; exists (u ^ at_t, v ^ at_t).",
            "VernacExtend",
            "6afc8ff5d6e223a95c4a0a615ff0bcdf272347a6"
        ],
        [
            "by rewrite -!rmorphM -rmorphD Dr /= map_polyC polyC_eqp1.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "have{co_p0_q0}: gcdp p0 (q ^ iota) %= 'X - y%:P.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "rewrite /eqp Dq (eqp_dvdl _ (Gauss_gcdpr _ _)) // dvdp_gcdr dvdp_gcd.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "rewrite dvdp_mull // -root_factor_theorem rootE horner_comp !hornerE.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "by rewrite opprB addrC subrK.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "have{p0} [p3 ->]: exists p3, p0 = p3 ^ kappa.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "exists (p ^ kappa' \\Po (kappa' t *: 'X - (subfx_eval iota z r1 'X)%:P)).",
            "VernacExtend",
            "16a799133dd10ee3c7a1c6300ac4f3bbacfbbacd"
        ],
        [
            "rewrite map_comp_poly rmorphB linearZ /= map_polyC map_polyX /=.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "rewrite !subfx_inj_eval // map_polyC hornerC map_polyX hornerX.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "by rewrite -map_poly_comp Diota.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "rewrite -Diota map_poly_comp -gcdp_map /= -/kappa.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "move: (gcdp _ _) => r3 /eqpf_eq[c nz_c Dr3].",
            "VernacExtend",
            "b1b2cb7a3a617cba67460b4eca1f04de3c1cc716"
        ],
        [
            "exists (- (r3`_0 / r3`_1)); rewrite [kappa _]rmorphN fmorph_div -!coef_map Dr3.",
            "VernacExtend",
            "f7fb1bb888d64f8de2a45eebb7fe4580723af4e4"
        ],
        [
            "by rewrite !coefZ polyseqXsubC mulr1 mulrC mulKf ?opprK.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma char0_PET (q : {poly F}) : q != 0 -> root (q ^ iota) y -> [char F] =i pred0 -> exists n, let z := y *+ n - x in inFz z x /\\ inFz z y.",
            "VernacStartTheoremProof",
            "81ca06f164ac16461895fc73aa86a92d2c23107e"
        ],
        [
            "move=> nz_q qy_0 /charf0P charF0.",
            "VernacExtend",
            "b1b2cb7a3a617cba67460b4eca1f04de3c1cc716"
        ],
        [
            "without loss{nz_q} sep_q: q qy_0 / separable_poly q.",
            "VernacExtend",
            "87d5e7b04148ee8f2e4efcc847e0dfadae0aa4cb"
        ],
        [
            "move=> IHq; apply: IHq (make_separable nz_q).",
            "VernacExtend",
            "d6ebf3361f380a12d5c2c9bbb7ea363132c48b36"
        ],
        [
            "have /dvdpP[q1 Dq] := dvdp_gcdl q q^`().",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "rewrite {1}Dq mulpK ?gcdp_eq0; last by apply/nandP; left.",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "have [n [r nz_ry Dr]] := multiplicity_XsubC (q ^ iota) y.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "rewrite map_poly_eq0 nz_q /= in nz_ry.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "case: n => [|n] in Dr; first by rewrite Dr mulr1 (negPf nz_ry) in qy_0.",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "have: ('X - y%:P) ^+ n.+1 %| q ^ iota by rewrite Dr dvdp_mulIr.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "rewrite Dq rmorphM /= gcdp_map -(eqp_dvdr _ (gcdp_mul2l _ _ _)) -deriv_map Dr.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "rewrite dvdp_gcd derivM deriv_exp derivXsubC mul1r !mulrA dvdp_mulIr /=.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "rewrite mulrDr mulrA dvdp_addr ?dvdp_mulIr // exprS -scaler_nat -!scalerAr.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "rewrite dvdp_scaler -?(rmorph_nat iota) ?fmorph_eq0 ?charF0 //.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "rewrite mulrA dvdp_mul2r ?expf_neq0 ?polyXsubC_eq0 //.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "by rewrite Gauss_dvdpl ?dvdp_XsubCl // coprimep_sym coprimep_XsubC.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "have [r nz_r PETxy] := large_field_PET qy_0 sep_q.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "pose ts := mkseq (fun n => iota n%:R) (size r).",
            "VernacExtend",
            "3c5f04de94609049d978298aa02ff35fb35ea7c7"
        ],
        [
            "have /(max_ring_poly_roots nz_r)/=/implyP: uniq_roots ts.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "rewrite uniq_rootsE mkseq_uniq // => m n eq_mn; apply/eqP; rewrite eqn_leq.",
            "VernacExtend",
            "01f04d3f5bba3b876eb4ec7b1c8f26d2e2cced77"
        ],
        [
            "wlog suffices: m n eq_mn / m <= n by move=> IHmn; rewrite !IHmn.",
            "VernacExtend",
            "348aa27e7c84ea4ca2ac06b8a3b3db24e74b6ad7"
        ],
        [
            "move/fmorph_inj/eqP: eq_mn; rewrite -subr_eq0 leqNgt; apply: contraL => lt_mn.",
            "VernacExtend",
            "0fa388cebe8ed6372154caa26cd10c357f123670"
        ],
        [
            "by rewrite -natrB ?(ltnW lt_mn) // charF0 -lt0n subn_gt0.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "rewrite size_mkseq ltnn implybF all_map => /allPn[n _ /= /PETxy].",
            "VernacExtend",
            "3c42b53d0efc26db114b00541ac5e7fcb29e6aeb"
        ],
        [
            "by rewrite rmorph_nat mulr_natl; exists n.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "End InfinitePrimitiveElementTheorem.",
            "VernacEndSegment",
            "b172fdcfcb76a99205b964d4a973245a01bca66c"
        ],
        [
            "Section Separable.",
            "VernacBeginSection",
            "048292c8ba285ee776967dba528be1e2e59336eb"
        ],
        [
            "Variables (F : fieldType) (L : fieldExtType F).",
            "VernacAssumption",
            "504d7156a02d96d143a7859acc875b5c958332f1"
        ],
        [
            "Implicit Types (U V W : {vspace L}) (E K M : {subfield L}) (D : 'End(L)).",
            "VernacReserve",
            "c51b1010635087751385c679bef14a249c7e323e"
        ],
        [
            "Section Derivation.",
            "VernacBeginSection",
            "1d3e5e1663541de915e58579f87390050bb9c222"
        ],
        [
            "Variables (K : {vspace L}) (D : 'End(L)).",
            "VernacAssumption",
            "0501f32336e5a7f86364a686c6449556b32bef76"
        ],
        [
            "Definition Derivation (s := vbasis K) : bool := all (fun u => all (fun v => D (u * v) == D u * v + u * D v) s) s.",
            "VernacDefinition",
            "a24fda55ebdacc82828505ad0b47d4943915c66c"
        ],
        [
            "Hypothesis derD : Derivation.",
            "VernacAssumption",
            "d6ff1f4105da24cb785b8fb62320c5497ae9711f"
        ],
        [
            "Lemma Derivation_mul : {in K &, forall u v, D (u * v) = D u * v + u * D v}.",
            "VernacStartTheoremProof",
            "0508ab23ce8ceff9ab8a65f1841a0e9c23648d0d"
        ],
        [
            "move=> u v /coord_vbasis-> /coord_vbasis->.",
            "VernacExtend",
            "b1b2cb7a3a617cba67460b4eca1f04de3c1cc716"
        ],
        [
            "rewrite !(mulr_sumr, linear_sum) -big_split; apply: eq_bigr => /= j _.",
            "VernacExtend",
            "634a7639ed2fb7caf62757f84400927f5829b7d5"
        ],
        [
            "rewrite !mulr_suml linear_sum -big_split; apply: eq_bigr => /= i _.",
            "VernacExtend",
            "634a7639ed2fb7caf62757f84400927f5829b7d5"
        ],
        [
            "rewrite !(=^~ scalerAl, linearZZ) -!scalerAr linearZZ -!scalerDr !scalerA /=.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "by congr (_ *: _); apply/eqP; rewrite (allP (allP derD _ _)) ?memt_nth.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma Derivation_mul_poly (Dp := map_poly D) : {in polyOver K &, forall p q, Dp (p * q) = Dp p * q + p * Dp q}.",
            "VernacStartTheoremProof",
            "ebb81213ba28601eb9dc8b2ec06a4e01e3f97c1e"
        ],
        [
            "move=> p q Kp Kq; apply/polyP=> i; rewrite {}/Dp coefD coef_map /= !coefM.",
            "VernacExtend",
            "f7feb259d6220ca40e8a86b90bd06f137aa140ac"
        ],
        [
            "rewrite linear_sum -big_split; apply: eq_bigr => /= j _.",
            "VernacExtend",
            "634a7639ed2fb7caf62757f84400927f5829b7d5"
        ],
        [
            "by rewrite !{1}coef_map Derivation_mul ?(polyOverP _).",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "End Derivation.",
            "VernacEndSegment",
            "f667572841d81dac81f33e561e759aaaeab47eb9"
        ],
        [
            "Lemma DerivationS E K D : (K <= E)%VS -> Derivation E D -> Derivation K D.",
            "VernacStartTheoremProof",
            "d976f9b79c96772908caee213d092540df04b68e"
        ],
        [
            "move/subvP=> sKE derD; apply/allP=> x Kx; apply/allP=> y Ky; apply/eqP.",
            "VernacExtend",
            "29621d81bf85c762c569ad91eb2e12a43855954a"
        ],
        [
            "by rewrite (Derivation_mul derD) ?sKE // vbasis_mem.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Section DerivationAlgebra.",
            "VernacBeginSection",
            "c604c58b1c1f579b14d47a61cb41b89e57de6d08"
        ],
        [
            "Variables (E : {subfield L}) (D : 'End(L)).",
            "VernacAssumption",
            "b38508bd66af4947ab8716b59eb684ae5308fdb5"
        ],
        [
            "Hypothesis derD : Derivation E D.",
            "VernacAssumption",
            "7112f844eaa76c81e54b4d50a28ebfaa760199bb"
        ],
        [
            "Lemma Derivation1 : D 1 = 0.",
            "VernacStartTheoremProof",
            "f8236fb38756a01ebb6a573c4017e5b14a93dcd9"
        ],
        [
            "apply: (addIr (D (1 * 1))); rewrite add0r {1}mul1r.",
            "VernacExtend",
            "56c014161b39aecfb3c54301c2409dba4e8e1857"
        ],
        [
            "by rewrite (Derivation_mul derD) ?mem1v // mulr1 mul1r.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma Derivation_scalar x : x \\in 1%VS -> D x = 0.",
            "VernacStartTheoremProof",
            "e841a60e55c4e2e33fb404fe0174cf53aec25226"
        ],
        [
            "by case/vlineP=> y ->; rewrite linearZ /= Derivation1 scaler0.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma Derivation_exp x m : x \\in E -> D (x ^+ m) = x ^+ m.-1 *+ m * D x.",
            "VernacStartTheoremProof",
            "aafc9dfe461a5de43070167be9a186ed2cf3babd"
        ],
        [
            "move=> Ex; case: m; first by rewrite expr0 mulr0n mul0r Derivation1.",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "elim=> [|m IHm]; first by rewrite mul1r.",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "rewrite exprS (Derivation_mul derD) //; last by apply: rpredX.",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "by rewrite mulrC IHm mulrA mulrnAr -exprS -mulrDl.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma Derivation_horner p x : p \\is a polyOver E -> x \\in E -> D p.[x] = (map_poly D p).[x] + p^`().[x] * D x.",
            "VernacStartTheoremProof",
            "1666d5f8fa7595ec3c6177ed6092f0efa3adc15e"
        ],
        [
            "move=> Ep Ex; elim/poly_ind: p Ep => [|p c IHp] /polyOverP EpXc.",
            "VernacExtend",
            "06880003f1108b2eb418688c7bc6bf1013cf0e4c"
        ],
        [
            "by rewrite !(raddf0, horner0) mul0r add0r.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "have Ep: p \\is a polyOver E.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "by apply/polyOverP=> i; have:= EpXc i.+1; rewrite coefD coefMX coefC addr0.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "have->: map_poly D (p * 'X + c%:P) = map_poly D p * 'X + (D c)%:P.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "apply/polyP=> i; rewrite !(coefD, coefMX, coef_map) /= linearD /= !coefC.",
            "VernacExtend",
            "56c014161b39aecfb3c54301c2409dba4e8e1857"
        ],
        [
            "by rewrite !(fun_if D) linear0.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "rewrite derivMXaddC !hornerE mulrDl mulrAC addrAC linearD /=; congr (_ + _).",
            "VernacExtend",
            "a0279e71fd23ac6bde2b8b4402981a70ea719044"
        ],
        [
            "by rewrite addrCA -mulrDl -IHp // addrC (Derivation_mul derD) ?rpred_horner.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "End DerivationAlgebra.",
            "VernacEndSegment",
            "2c2c3bcf522a6f388d72ca614f80615bd2d3c399"
        ],
        [
            "Definition separable_element U x := separable_poly (minPoly U x).",
            "VernacDefinition",
            "9b7c91658c0099eaef37e25d33274f39ba8020a5"
        ],
        [
            "Section SeparableElement.",
            "VernacBeginSection",
            "f5f97047ffb60f4832da104423d9385828915a43"
        ],
        [
            "Variables (K : {subfield L}) (x : L).",
            "VernacAssumption",
            "34dd0d882e4d475541db35c9dbed070193a9ef26"
        ],
        [
            "Let sKxK : (K <= <<K; x>>)%VS := subv_adjoin K x.",
            "VernacDefinition",
            "cb26ea69f5af03825c29ff368d1b0363a36c791c"
        ],
        [
            "Let Kx_x : x \\in <<K; x>>%VS := memv_adjoin K x.",
            "VernacDefinition",
            "74689da4d8ba4c3aca57064b62309c6996a67d42"
        ],
        [
            "Lemma separable_elementP : reflect (exists f, [/\\ f \\is a polyOver K, root f x & separable_poly f]) (separable_element K x).",
            "VernacStartTheoremProof",
            "05b9e1fb9aafd838c62c40b89e6cd70209a45ef7"
        ],
        [
            "apply: (iffP idP) => [sep_x | [f [Kf /(minPoly_dvdp Kf)/dvdpP[g ->]]]].",
            "VernacExtend",
            "4bd6fa79b17bcd2bfb7af091fb325367a20385d6"
        ],
        [
            "by exists (minPoly K x); rewrite minPolyOver root_minPoly.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "by rewrite separable_mul => /and3P[].",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma base_separable : x \\in K -> separable_element K x.",
            "VernacStartTheoremProof",
            "ae43ab4f6234911ea5c9a80191845c33dd5dbc5a"
        ],
        [
            "move=> Kx; apply/separable_elementP; exists ('X - x%:P).",
            "VernacExtend",
            "7f63ce926d886fe2ec19bed7b719a52d74b3ae12"
        ],
        [
            "by rewrite polyOverXsubC root_XsubC /separable_poly !derivCE coprimep1.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma separable_nz_der : separable_element K x = ((minPoly K x)^`() != 0).",
            "VernacStartTheoremProof",
            "10354790d9e146d392bb6d6a76964b1a5432f232"
        ],
        [
            "rewrite /separable_element /separable_poly.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "apply/idP/idP=> [|nzPx'].",
            "VernacExtend",
            "4bd6fa79b17bcd2bfb7af091fb325367a20385d6"
        ],
        [
            "by apply: contraTneq => ->; rewrite coprimep0 -size_poly_eq1 size_minPoly.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "have gcdK : gcdp (minPoly K x) (minPoly K x)^`() \\in polyOver K.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "by rewrite gcdp_polyOver ?polyOver_deriv // minPolyOver.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "rewrite -gcdp_eqp1 -size_poly_eq1 -dvdp1.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "have /orP[/andP[_]|/andP[]//] := minPoly_irr gcdK (dvdp_gcdl _ _).",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "rewrite dvdp_gcd dvdpp /= => /(dvdp_leq nzPx')/leq_trans/(_ (size_poly _ _)).",
            "VernacExtend",
            "3c42b53d0efc26db114b00541ac5e7fcb29e6aeb"
        ],
        [
            "by rewrite size_minPoly ltnn.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma separablePn : reflect (exists2 p, p \\in [char L] & exists2 g, g \\is a polyOver K & minPoly K x = g \\Po 'X^p) (~~ separable_element K x).",
            "VernacStartTheoremProof",
            "5a138d1f55d231b14eb8778cda3045508dee18ac"
        ],
        [
            "rewrite separable_nz_der negbK; set f := minPoly K x.",
            "VernacExtend",
            "c1f58f36c5711f022b4a54717f37c2782f34a159"
        ],
        [
            "apply: (iffP eqP) => [f'0 | [p Hp [g _ ->]]]; last first.",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "by rewrite deriv_comp derivXn -scaler_nat (charf0 Hp) scale0r mulr0.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "pose n := adjoin_degree K x; have sz_f: size f = n.+1 := size_minPoly K x.",
            "VernacExtend",
            "c09d1274557abc8857ed64eb3450db2da906c185"
        ],
        [
            "have fn1: f`_n = 1 by rewrite -(monicP (monic_minPoly K x)) lead_coefE sz_f.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "have dimKx: (adjoin_degree K x)%:R == 0 :> L.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "by rewrite -(coef0 _ n.-1) -f'0 coef_deriv fn1.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "have /natf0_char[// | p charLp] := dimKx.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "have /dvdnP[r Dn]: (p %| n)%N by rewrite (dvdn_charf charLp).",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "exists p => //; exists (\\poly_(i < r.+1) f`_(i * p)).",
            "VernacExtend",
            "8a2e2e91876ce6ad2a02a1994a28d948969ddd9f"
        ],
        [
            "by apply: polyOver_poly => i _; rewrite (polyOverP _) ?minPolyOver.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "rewrite comp_polyE size_poly_eq -?Dn ?fn1 ?oner_eq0 //.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "have pr_p := charf_prime charLp; have p_gt0 := prime_gt0 pr_p.",
            "VernacExtend",
            "6e9d14df7d32ea0bf863301df3f6cb2d4e1b8e96"
        ],
        [
            "apply/polyP=> i; rewrite coef_sum.",
            "VernacExtend",
            "56c014161b39aecfb3c54301c2409dba4e8e1857"
        ],
        [
            "have [[{i} i ->] | p'i] := altP (@dvdnP p i); last first.",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "rewrite big1 => [|j _]; last first.",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "rewrite coefZ -exprM coefXn [_ == _](contraNF _ p'i) ?mulr0 // => /eqP->.",
            "VernacExtend",
            "3c42b53d0efc26db114b00541ac5e7fcb29e6aeb"
        ],
        [
            "by rewrite dvdn_mulr.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "rewrite (dvdn_charf charLp) in p'i; apply: mulfI p'i _ _ _.",
            "VernacExtend",
            "634a7639ed2fb7caf62757f84400927f5829b7d5"
        ],
        [
            "by rewrite mulr0 mulr_natl; case: i => // i; rewrite -coef_deriv f'0 coef0.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "have [ltri | leir] := leqP r.+1 i.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "rewrite nth_default ?sz_f ?Dn ?ltn_pmul2r ?big1 // => j _.",
            "VernacExtend",
            "3c42b53d0efc26db114b00541ac5e7fcb29e6aeb"
        ],
        [
            "rewrite coefZ -exprM coefXn mulnC gtn_eqF ?mulr0 //.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "by rewrite ltn_pmul2l ?(leq_trans _ ltri).",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "rewrite (bigD1 (Sub i _)) //= big1 ?addr0 => [|j i'j]; last first.",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "by rewrite coefZ -exprM coefXn mulnC eqn_pmul2l // mulr_natr mulrb ifN_eqC.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "by rewrite coef_poly leir coefZ -exprM coefXn mulnC eqxx mulr1.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma separable_root_der : separable_element K x (+) root (minPoly K x)^`() x.",
            "VernacStartTheoremProof",
            "0286a7d5bdaf2b7b5a72ed3211872bb009156efa"
        ],
        [
            "have KpKx': _^`() \\is a polyOver K := polyOver_deriv (minPolyOver K x).",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "rewrite separable_nz_der addNb (root_small_adjoin_poly KpKx') ?addbb //.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "by rewrite (leq_trans (size_poly _ _)) ?size_minPoly.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma Derivation_separable D : Derivation <<K; x>> D -> separable_element K x -> D x = - (map_poly D (minPoly K x)).[x] / (minPoly K x)^`().[x].",
            "VernacStartTheoremProof",
            "683eaa01eb6baf3b9e0acba5612f6104d66f848f"
        ],
        [
            "move=> derD sepKx; have:= separable_root_der; rewrite {}sepKx -sub0r => nzKx'x.",
            "VernacExtend",
            "607ef7ae8426c7af043bed1740cc4d7c951b3085"
        ],
        [
            "apply: canRL (mulfK nzKx'x) (canRL (addrK _) _); rewrite mulrC addrC.",
            "VernacExtend",
            "56c014161b39aecfb3c54301c2409dba4e8e1857"
        ],
        [
            "rewrite -(Derivation_horner derD) ?minPolyxx ?linear0 //.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "exact: polyOverSv sKxK _ (minPolyOver _ _).",
            "VernacExtend",
            "ce637ff86bafca5d8359473e8c02af644dcbdc43"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Section ExtendDerivation.",
            "VernacBeginSection",
            "9118cc1c1c6654dfb1cf8d2cbe6236ea0924fe23"
        ],
        [
            "Variable D : 'End(L).",
            "VernacAssumption",
            "5a9c778c8af1bf14aa62f5df643416a0d6176ed4"
        ],
        [
            "Let Dx E := - (map_poly D (minPoly E x)).[x] / ((minPoly E x)^`()).[x].",
            "VernacDefinition",
            "14794acc93c2aded964cb85d4961e56490cdd110"
        ],
        [
            "Fact extendDerivation_subproof E (adjEx := Fadjoin_poly E x) : let body y (p := adjEx y) := (map_poly D p).[x] + p^`().[x] * Dx E in linear body.",
            "VernacStartTheoremProof",
            "a3e07a32cfc985c00508760d7eae14ffd578480a"
        ],
        [
            "move: Dx => C /= a u v.",
            "VernacExtend",
            "b1b2cb7a3a617cba67460b4eca1f04de3c1cc716"
        ],
        [
            "rewrite /adjEx linearP /= -mul_polyC derivD derivM derivC mul0r add0r -/adjEx.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "rewrite !hornerE /= -scalerAl mul1r raddfD /=.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "have ->: map_poly D (a%:A%:P * adjEx u) = a%:A%:P * map_poly D (adjEx u).",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "apply/polyP=> i; rewrite !mul_polyC !coef_map !coefZ !mulr_algl /= linearZ.",
            "VernacExtend",
            "56c014161b39aecfb3c54301c2409dba4e8e1857"
        ],
        [
            "by rewrite coef_map.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "rewrite !hornerE !mulr_algl mulrDl scalerDr -scalerAl -!addrA; congr (_ + _).",
            "VernacExtend",
            "a0279e71fd23ac6bde2b8b4402981a70ea719044"
        ],
        [
            "by rewrite addrCA.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Definition extendDerivation E : 'End(L) := linfun (Linear (extendDerivation_subproof E)).",
            "VernacDefinition",
            "f93c58564c5a76e6f234d0293cabb48dca553944"
        ],
        [
            "Hypothesis derD : Derivation K D.",
            "VernacAssumption",
            "c93173a1517a39d020c29344952172cf9860bb9e"
        ],
        [
            "Lemma extendDerivation_id y : y \\in K -> extendDerivation K y = D y.",
            "VernacStartTheoremProof",
            "e9866f1a7fd230b3dddf57b086d8cf2a75007b9c"
        ],
        [
            "move=> yK; rewrite lfunE /= Fadjoin_polyC // derivC map_polyC hornerC.",
            "VernacExtend",
            "057edeb0967475c7ea5e8c98c449ddc5613eddc1"
        ],
        [
            "by rewrite horner0 mul0r addr0.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma extendDerivation_horner p : p \\is a polyOver K -> separable_element K x -> extendDerivation K p.[x] = (map_poly D p).[x] + p^`().[x] * Dx K.",
            "VernacStartTheoremProof",
            "69fd9703385abbafdcb95d0f3ec628b1974d3ea6"
        ],
        [
            "move=> Kp sepKx; have:= separable_root_der; rewrite {}sepKx /= => nz_pKx'x.",
            "VernacExtend",
            "607ef7ae8426c7af043bed1740cc4d7c951b3085"
        ],
        [
            "rewrite {-1}(divp_eq p (minPoly K x)) lfunE /= Fadjoin_poly_mod // raddfD /=.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "rewrite {1}(Derivation_mul_poly derD) ?divp_polyOver ?minPolyOver //.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "rewrite derivD derivM !{1}hornerD !{1}hornerM minPolyxx !{1}mulr0 !{1}add0r.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "rewrite mulrDl addrA [_ + (_ * _ * _)]addrC {2}/Dx -mulrA -/Dx.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "by rewrite [_ / _]mulrC (mulVKf nz_pKx'x) mulrN addKr.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma extendDerivationP : separable_element K x -> Derivation <<K; x>> (extendDerivation K).",
            "VernacStartTheoremProof",
            "13187fb22f10ee77d9fb2bda20d26fb4cb83926a"
        ],
        [
            "move=> sep; apply/allP=> u /vbasis_mem Hu; apply/allP=> v /vbasis_mem Hv.",
            "VernacExtend",
            "e374b6c583d80c9d8b579c06df7953342f99f751"
        ],
        [
            "apply/eqP.",
            "VernacExtend",
            "4bd6fa79b17bcd2bfb7af091fb325367a20385d6"
        ],
        [
            "rewrite -(Fadjoin_poly_eq Hu) -(Fadjoin_poly_eq Hv) -hornerM.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "rewrite !{1}extendDerivation_horner ?{1}rpredM ?Fadjoin_polyOver //.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "rewrite (Derivation_mul_poly derD) ?Fadjoin_polyOver //.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "rewrite derivM !{1}hornerD !{1}hornerM !{1}mulrDl !{1}mulrDr -!addrA.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "congr (_ + _); rewrite [Dx K]lock -!{1}mulrA !{1}addrA; congr (_ + _).",
            "VernacExtend",
            "516f18a2bd545145111a2197b98c801fe2c297f5"
        ],
        [
            "by rewrite addrC; congr (_ * _ + _); rewrite mulrC.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "End ExtendDerivation.",
            "VernacEndSegment",
            "145ee3c0da43ab3cb44e16fb11b90468116c8a64"
        ],
        [
            "Lemma Derivation_separableP : reflect (forall D, Derivation <<K; x>> D -> K <= lker D -> <<K; x>> <= lker D)%VS (separable_element K x).",
            "VernacStartTheoremProof",
            "fd1a1f14e4874b4401c7a6a8607d098f7f797722"
        ],
        [
            "apply: (iffP idP) => [sepKx D derD /subvP DK_0 | derKx_0].",
            "VernacExtend",
            "4bd6fa79b17bcd2bfb7af091fb325367a20385d6"
        ],
        [
            "have{DK_0} DK_0 q: q \\is a polyOver K -> map_poly D q = 0.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "move=> /polyOverP Kq; apply/polyP=> i; apply/eqP.",
            "VernacExtend",
            "e374b6c583d80c9d8b579c06df7953342f99f751"
        ],
        [
            "by rewrite coef0 coef_map -memv_ker DK_0.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "apply/subvP=> _ /Fadjoin_polyP[p Kp ->]; rewrite memv_ker.",
            "VernacExtend",
            "56c014161b39aecfb3c54301c2409dba4e8e1857"
        ],
        [
            "rewrite (Derivation_horner derD) ?(polyOverSv sKxK) //.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "rewrite (Derivation_separable derD sepKx) !DK_0 ?minPolyOver //.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "by rewrite horner0 oppr0 mul0r mulr0 addr0.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "apply: wlog_neg; rewrite {1}separable_nz_der negbK => /eqP pKx'_0.",
            "VernacExtend",
            "5fce7e5361004176d6b434b36b4623c7387f70bb"
        ],
        [
            "have Dlin: linear (fun y => (Fadjoin_poly K x y)^`().[x]).",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "move=> a u v; rewrite linearP /= -mul_polyC derivD derivM derivC mul0r add0r.",
            "VernacExtend",
            "057edeb0967475c7ea5e8c98c449ddc5613eddc1"
        ],
        [
            "by rewrite hornerD hornerM hornerC -scalerAl mul1r.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "pose D := linfun (Linear Dlin); apply: base_separable.",
            "VernacExtend",
            "5634a4c046b3abb6374cef97e00ebda261abde4c"
        ],
        [
            "have DK_0: (K <= lker D)%VS.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "apply/subvP=> v Kv; rewrite memv_ker lfunE /= Fadjoin_polyC //.",
            "VernacExtend",
            "56c014161b39aecfb3c54301c2409dba4e8e1857"
        ],
        [
            "by rewrite derivC horner0.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "have Dder: Derivation <<K; x>> D.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "apply/allP=> u /vbasis_mem Kx_u; apply/allP=> v /vbasis_mem Kx_v.",
            "VernacExtend",
            "8d9dae45eeb3a769b8a865cef8ae476451f63802"
        ],
        [
            "rewrite !lfunE /= -{-2}(Fadjoin_poly_eq Kx_u) -{-3}(Fadjoin_poly_eq Kx_v).",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "rewrite -!hornerM -hornerD -derivM.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "rewrite Fadjoin_poly_mod ?rpredM ?Fadjoin_polyOver //.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "rewrite {2}(divp_eq (_ * _) (minPoly K x)) derivD derivM pKx'_0 mulr0 addr0.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "by rewrite hornerD hornerM minPolyxx mulr0 add0r.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "have{Dder DK_0}: x \\in lker D by apply: subvP Kx_x; apply: derKx_0.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "apply: contraLR => K'x; rewrite memv_ker lfunE /= Fadjoin_polyX //.",
            "VernacExtend",
            "56c014161b39aecfb3c54301c2409dba4e8e1857"
        ],
        [
            "by rewrite derivX hornerC oner_eq0.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "End SeparableElement.",
            "VernacEndSegment",
            "8c55a3edd49b26955bd25b9e5e32b845464c9b73"
        ],
        [
            "Arguments separable_elementP {K x}.",
            "VernacArguments",
            "ea420bddb987da954dd440a5e5afd451726e51ef"
        ],
        [
            "Lemma separable_elementS K E x : (K <= E)%VS -> separable_element K x -> separable_element E x.",
            "VernacStartTheoremProof",
            "50cf87f98591f65817a81e8b8109efe367e15362"
        ],
        [
            "move=> sKE /separable_elementP[f [fK rootf sepf]]; apply/separable_elementP.",
            "VernacExtend",
            "d6ebf3361f380a12d5c2c9bbb7ea363132c48b36"
        ],
        [
            "by exists f; rewrite (polyOverSv sKE).",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma adjoin_separableP {K x} : reflect (forall y, y \\in <<K; x>>%VS -> separable_element K y) (separable_element K x).",
            "VernacStartTheoremProof",
            "cfc7d9b5c6075c9c1f4d108f195b6b5e9a1ca504"
        ],
        [
            "apply: (iffP idP) => [sepKx | -> //]; last exact: memv_adjoin.",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "move=> _ /Fadjoin_polyP[q Kq ->]; apply/Derivation_separableP=> D derD DK_0.",
            "VernacExtend",
            "d6ebf3361f380a12d5c2c9bbb7ea363132c48b36"
        ],
        [
            "apply/subvP=> _ /Fadjoin_polyP[p Kp ->].",
            "VernacExtend",
            "4bd6fa79b17bcd2bfb7af091fb325367a20385d6"
        ],
        [
            "rewrite memv_ker -(extendDerivation_id x D (mempx_Fadjoin _ Kp)).",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "have sepFyx: (separable_element <<K; q.[x]>> x).",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "by apply: (separable_elementS (subv_adjoin _ _)).",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "have KyxEqKx: (<< <<K; q.[x]>>; x>> = <<K; x>>)%VS.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "apply/eqP; rewrite eqEsubv andbC adjoinSl ?subv_adjoin //=.",
            "VernacExtend",
            "56c014161b39aecfb3c54301c2409dba4e8e1857"
        ],
        [
            "apply/FadjoinP/andP; rewrite memv_adjoin andbT.",
            "VernacExtend",
            "56c014161b39aecfb3c54301c2409dba4e8e1857"
        ],
        [
            "by apply/FadjoinP/andP; rewrite subv_adjoin mempx_Fadjoin.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "have:= extendDerivationP derD sepFyx; rewrite KyxEqKx => derDx.",
            "VernacExtend",
            "8431fc4d2460f7908baa11892c1b26797a3f17b8"
        ],
        [
            "rewrite -horner_comp (Derivation_horner derDx) ?memv_adjoin //; last first.",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "by apply: (polyOverSv (subv_adjoin _ _)); apply: polyOver_comp.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "set Dx_p := map_poly _; have Dx_p_0 t: t \\is a polyOver K -> (Dx_p t).[x] = 0.",
            "VernacExtend",
            "5a669f4ad2118b005921530a069ac8f03fd7f32b"
        ],
        [
            "move/polyOverP=> Kt; congr (_.[x] = 0): (horner0 x); apply/esym/polyP => i.",
            "VernacExtend",
            "89de36e5aef0ebd726b6f55b2950d4d03c758898"
        ],
        [
            "have /eqP Dti_0: D t`_i == 0 by rewrite -memv_ker (subvP DK_0) ?Kt.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "by rewrite coef0 coef_map /= {1}extendDerivation_id ?subvP_adjoin.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "rewrite (Derivation_separable derDx sepKx) -/Dx_p Dx_p_0 ?polyOver_comp //.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "by rewrite add0r mulrCA Dx_p_0 ?minPolyOver ?oppr0 ?mul0r.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma separable_exponent K x : exists n, [char L].-nat n && separable_element K (x ^+ n).",
            "VernacStartTheoremProof",
            "139fa03da6e8fe439d34664069968466f6bf51b7"
        ],
        [
            "pose d := adjoin_degree K x; move: {2}d.+1 (ltnSn d) => n.",
            "VernacExtend",
            "e891a25a6863a3b6bdbcdcd246d29abfada2d2a0"
        ],
        [
            "elim: n => // n IHn in x @d *; rewrite ltnS => le_d_n.",
            "VernacExtend",
            "5c0d3b68844697b312245da3ed2c1b277720f6af"
        ],
        [
            "have [[p charLp]|] := altP (separablePn K x); last by rewrite negbK; exists 1%N.",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "case=> g Kg defKx; have p_pr := charf_prime charLp.",
            "VernacExtend",
            "c6460972b7febd45d9a49b3c1ce4f3fe36b53169"
        ],
        [
            "suffices /IHn[m /andP[charLm sepKxpm]]: adjoin_degree K (x ^+ p) < n.",
            "VernacExtend",
            "290ed488b5562e885aa2cac56f3a69b4faa0eaa6"
        ],
        [
            "by exists (p * m)%N; rewrite pnat_mul pnatE // charLp charLm exprM.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "apply: leq_trans le_d_n; rewrite -ltnS -!size_minPoly.",
            "VernacExtend",
            "56c014161b39aecfb3c54301c2409dba4e8e1857"
        ],
        [
            "have nzKx: minPoly K x != 0 by rewrite monic_neq0 ?monic_minPoly.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "have nzg: g != 0 by apply: contra_eqN defKx => /eqP->; rewrite comp_poly0.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "apply: leq_ltn_trans (dvdp_leq nzg _) _.",
            "VernacExtend",
            "4bd6fa79b17bcd2bfb7af091fb325367a20385d6"
        ],
        [
            "by rewrite minPoly_dvdp // rootE -hornerXn -horner_comp -defKx minPolyxx.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "rewrite (polySpred nzKx) ltnS defKx size_comp_poly size_polyXn /=.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "suffices g_gt1: 1 < size g by rewrite -(subnKC g_gt1) ltn_Pmulr ?prime_gt1.",
            "VernacExtend",
            "290ed488b5562e885aa2cac56f3a69b4faa0eaa6"
        ],
        [
            "apply: contra_eqT (size_minPoly K x); rewrite defKx -leqNgt => /size1_polyC->.",
            "VernacExtend",
            "5fce7e5361004176d6b434b36b4623c7387f70bb"
        ],
        [
            "by rewrite comp_polyC size_polyC; case: (_ != 0).",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma charf0_separable K : [char L] =i pred0 -> forall x, separable_element K x.",
            "VernacStartTheoremProof",
            "e0953f04a047e5ddd3175abb1335f16388c0ce9d"
        ],
        [
            "move=> charL0 x; have [n /andP[charLn]] := separable_exponent K x.",
            "VernacExtend",
            "ccd83c252dcbae3d56f3d057fcb8217878b51901"
        ],
        [
            "by rewrite (pnat_1 charLn (sub_in_pnat _ charLn)) // => p _; rewrite charL0.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma charf_p_separable K x e p : p \\in [char L] -> separable_element K x = (x \\in <<K; x ^+ (p ^ e.+1)>>%VS).",
            "VernacStartTheoremProof",
            "9fdd80ff6cece451f98a3e6118b8d2571be968ed"
        ],
        [
            "move=> charLp; apply/idP/idP=> [sepKx | /Fadjoin_poly_eq]; last first.",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "set m := p ^ _; set f := Fadjoin_poly K _ x => Dx; apply/separable_elementP.",
            "VernacExtend",
            "b87ec010aa2a5f9486b6d08ff10965d85f3692cb"
        ],
        [
            "have mL0: m%:R = 0 :> L by apply/eqP; rewrite -(dvdn_charf charLp) dvdn_exp.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "exists ('X - (f \\Po 'X^m)); split.",
            "VernacExtend",
            "0a51e435390c6cf12bc9e1dfcc7fc332e7244f9a"
        ],
        [
            "-",
            "VernacBullet",
            "581cab4bf49fa4b495e569bbda96fc8d28fddcc0"
        ],
        [
            "by rewrite rpredB ?polyOver_comp ?rpredX ?polyOverX ?Fadjoin_polyOver.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "-",
            "VernacBullet",
            "581cab4bf49fa4b495e569bbda96fc8d28fddcc0"
        ],
        [
            "by rewrite rootE !hornerE horner_comp hornerXn Dx subrr.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "rewrite /separable_poly !(derivE, deriv_comp) -mulr_natr -rmorphMn /= mL0.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "by rewrite !mulr0 subr0 coprimep1.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "without loss{e} ->: e x sepKx / e = 0%N.",
            "VernacExtend",
            "87d5e7b04148ee8f2e4efcc847e0dfadae0aa4cb"
        ],
        [
            "move=> IH; elim: {e}e.+1 => [|e]; [exact: memv_adjoin | apply: subvP].",
            "VernacExtend",
            "6d9bcf894535ce0e518bd38736d10611dfbc509d"
        ],
        [
            "apply/FadjoinP/andP; rewrite subv_adjoin expnSr exprM (IH 0%N) //.",
            "VernacExtend",
            "56c014161b39aecfb3c54301c2409dba4e8e1857"
        ],
        [
            "by have /adjoin_separableP-> := sepKx; rewrite ?rpredX ?memv_adjoin.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "set K' := <<K; x ^+ p>>%VS; have sKK': (K <= K')%VS := subv_adjoin _ _.",
            "VernacExtend",
            "5a669f4ad2118b005921530a069ac8f03fd7f32b"
        ],
        [
            "pose q := minPoly K' x; pose g := 'X^p - (x ^+ p)%:P.",
            "VernacExtend",
            "311b833fadff89b2f7ed817d3cd7cb6971c96a1e"
        ],
        [
            "have [K'g]: g \\is a polyOver K' /\\ q \\is a polyOver K'.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "by rewrite minPolyOver rpredB ?rpredX ?polyOverX // polyOverC memv_adjoin.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "have /dvdpP[c Dq]: 'X - x%:P %| q by rewrite dvdp_XsubCl root_minPoly.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "have co_c_g: coprimep c g.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "have charPp: p \\in [char {poly L}] := rmorph_char (polyC_rmorphism _) charLp.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "rewrite /g polyC_exp -!(Frobenius_autE charPp) -rmorphB coprimep_expr //.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "have: separable_poly q := separable_elementS sKK' sepKx.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "by rewrite Dq separable_mul => /and3P[].",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "have{g K'g co_c_g} /size_poly1P[a nz_a Dc]: size c == 1%N.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "suffices c_dv_g: c %| g by rewrite -(eqp_size (dvdp_gcd_idl c_dv_g)).",
            "VernacExtend",
            "290ed488b5562e885aa2cac56f3a69b4faa0eaa6"
        ],
        [
            "have: q %| g by rewrite minPoly_dvdp // rootE !hornerE hornerXn subrr.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "by apply: dvdp_trans; rewrite Dq dvdp_mulIl.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "rewrite {q}Dq {c}Dc mulrBr -rmorphM -rmorphN -cons_poly_def qualifE.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "by rewrite polyseq_cons !polyseqC nz_a /= rpredN andbCA => /and3P[/fpredMl->].",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma charf_n_separable K x n : [char L].-nat n -> 1 < n -> separable_element K x = (x \\in <<K; x ^+ n>>%VS).",
            "VernacStartTheoremProof",
            "b10f63bb25c6afc2c0910070f094a4565e73be26"
        ],
        [
            "rewrite -pi_pdiv; set p := pdiv n => charLn pi_n_p.",
            "VernacExtend",
            "80e7cce19c53eb5d5a21aafd83e552d37e23084a"
        ],
        [
            "have charLp: p \\in [char L] := pnatPpi charLn pi_n_p.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "have <-: (n`_p)%N = n by rewrite -(eq_partn n (charf_eq charLp)) part_pnat_id.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "by rewrite p_part lognE -mem_primes pi_n_p -charf_p_separable.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Definition purely_inseparable_element U x := x ^+ ex_minn (separable_exponent <<U>> x) \\in U.",
            "VernacDefinition",
            "f1d640cf170b85c36df802dc7e3c3fcc19dfee57"
        ],
        [
            "Lemma purely_inseparable_elementP {K x} : reflect (exists2 n, [char L].-nat n & x ^+ n \\in K) (purely_inseparable_element K x).",
            "VernacStartTheoremProof",
            "5e671c696adec2fc194642a79723003d09d20513"
        ],
        [
            "rewrite /purely_inseparable_element.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "case: ex_minnP => n /andP[charLn /=]; rewrite subfield_closed => sepKxn min_xn.",
            "VernacExtend",
            "ba44c9d0281a02110ce54645304e6d990debd9c0"
        ],
        [
            "apply: (iffP idP) => [Kxn | [m charLm Kxm]]; first by exists n.",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "have{min_xn}: n <= m by rewrite min_xn ?charLm ?base_separable.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "rewrite leq_eqVlt => /predU1P[-> // | ltnm]; pose p := pdiv m.",
            "VernacExtend",
            "9d8fbc7ebaadb48200c542591ceec3e0f555a812"
        ],
        [
            "have m_gt1: 1 < m by have [/leq_ltn_trans->] := andP charLn.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "have charLp: p \\in [char L] by rewrite (pnatPpi charLm) ?pi_pdiv.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "have [/p_natP[em Dm] /p_natP[en Dn]]: p.-nat m /\\ p.-nat n.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "by rewrite -!(eq_pnat _ (charf_eq charLp)).",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "rewrite Dn Dm ltn_exp2l ?prime_gt1 ?pdiv_prime // in ltnm.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "rewrite -(Fadjoin_idP Kxm) Dm -(subnKC ltnm) addSnnS expnD exprM -Dn.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "by rewrite -charf_p_separable.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma separable_inseparable_element K x : separable_element K x && purely_inseparable_element K x = (x \\in K).",
            "VernacStartTheoremProof",
            "f10447e41b62d5748781b6063bd48102c2c563c6"
        ],
        [
            "rewrite /purely_inseparable_element; case: ex_minnP => [[|m]] //=.",
            "VernacExtend",
            "712d339e99ee17eb7d5033e19ac614eb3ca6b532"
        ],
        [
            "rewrite subfield_closed; case: m => /= [-> //| m _ /(_ 1%N)/implyP/= insepKx].",
            "VernacExtend",
            "712d339e99ee17eb7d5033e19ac614eb3ca6b532"
        ],
        [
            "by rewrite (negPf insepKx) (contraNF (@base_separable K x) insepKx).",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma base_inseparable K x : x \\in K -> purely_inseparable_element K x.",
            "VernacStartTheoremProof",
            "9b0d224ccef7cc740d818ddeeb9d35122995bdfb"
        ],
        [
            "by rewrite -separable_inseparable_element => /andP[].",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma sub_inseparable K E x : (K <= E)%VS -> purely_inseparable_element K x -> purely_inseparable_element E x.",
            "VernacStartTheoremProof",
            "6a9663cc09be3f941f208e720c55c16ee58d6c91"
        ],
        [
            "move/subvP=> sKE /purely_inseparable_elementP[n charLn /sKE Exn].",
            "VernacExtend",
            "b1b2cb7a3a617cba67460b4eca1f04de3c1cc716"
        ],
        [
            "by apply/purely_inseparable_elementP; exists n.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Section PrimitiveElementTheorem.",
            "VernacBeginSection",
            "55707ee1dff0ca6d8f059dd870c814da40052969"
        ],
        [
            "Variables (K : {subfield L}) (x y : L).",
            "VernacAssumption",
            "1400b7ee8d177c478908093a84b7b6cfa9bc127d"
        ],
        [
            "Section FiniteCase.",
            "VernacBeginSection",
            "62cc8d55881683d4f4fd4faa39988541886112f7"
        ],
        [
            "Variable N : nat.",
            "VernacAssumption",
            "7a21ce6e0b7a9a3c651f9e720c3f6cb82e6e7d82"
        ],
        [
            "Let K_is_large := exists s, [/\\ uniq s, {subset s <= K} & N < size s].",
            "VernacDefinition",
            "317bda4e135d0bc415c17f523cf4d9082f52f5aa"
        ],
        [
            "Let cyclic_or_large (z : L) : z != 0 -> K_is_large \\/ exists a, z ^+ a.+1 = 1.",
            "VernacDefinition",
            "61c7f25c06705606750a1ea237e8ddcf6b8f56b1"
        ],
        [
            "move=> nz_z; pose d := adjoin_degree K z.",
            "VernacExtend",
            "fef3c4a8f7fcf70b0824f3cce5fb58f2e0ef07fd"
        ],
        [
            "pose h0 (i : 'I_(N ^ d).+1) (j : 'I_d) := (Fadjoin_poly K z (z ^+ i))`_j.",
            "VernacExtend",
            "3c5f04de94609049d978298aa02ff35fb35ea7c7"
        ],
        [
            "pose s := undup [seq h0 i j | i <- enum 'I_(N ^ d).+1, j <- enum 'I_d].",
            "VernacExtend",
            "3c5f04de94609049d978298aa02ff35fb35ea7c7"
        ],
        [
            "have s_h0 i j: h0 i j \\in s.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "by rewrite mem_undup; apply/allpairsP; exists (i, j); rewrite !mem_enum.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "pose h i := [ffun j => Ordinal (etrans (index_mem _ _) (s_h0 i j))].",
            "VernacExtend",
            "3c5f04de94609049d978298aa02ff35fb35ea7c7"
        ],
        [
            "pose h' (f : {ffun 'I_d -> 'I_(size s)}) := \\sum_(j < d) s`_(f j) * z ^+ j.",
            "VernacExtend",
            "3c5f04de94609049d978298aa02ff35fb35ea7c7"
        ],
        [
            "have hK i: h' (h i) = z ^+ i.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "have Kz_zi: z ^+ i \\in <<K; z>>%VS by rewrite rpredX ?memv_adjoin.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "rewrite -(Fadjoin_poly_eq Kz_zi) (horner_coef_wide z (size_poly _ _)) -/d.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "by apply: eq_bigr => j _; rewrite ffunE /= nth_index.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "have [inj_h | ] := altP (@injectiveP _ _ h).",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "left; exists s; split=> [|zi_j|]; rewrite ?undup_uniq ?mem_undup //=.",
            "VernacExtend",
            "95a439869e1cd9f325085da6e4fed57cb5ffba9b"
        ],
        [
            "by case/allpairsP=> ij [_ _ ->]; apply/polyOverP/Fadjoin_polyOver.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "rewrite -[size s]card_ord -(@ltn_exp2r _ _ d) // -{2}[d]card_ord -card_ffun.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "by rewrite -[_.+1]card_ord -(card_image inj_h) max_card.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "case/injectivePn=> i1 [i2 i1'2 /(congr1 h')]; rewrite !hK => eq_zi12; right.",
            "VernacExtend",
            "0234748959137076e5c5f05b36174698f15935c6"
        ],
        [
            "without loss{i1'2} lti12: i1 i2 eq_zi12 / i1 < i2.",
            "VernacExtend",
            "87d5e7b04148ee8f2e4efcc847e0dfadae0aa4cb"
        ],
        [
            "by move=> IH; move: i1'2; rewrite neq_ltn => /orP[]; apply: IH.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "by exists (i2 - i1.+1)%N; rewrite subnSK ?expfB // eq_zi12 divff ?expf_neq0.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma finite_PET : K_is_large \\/ exists z, (<< <<K; y>>; x>> = <<K; z>>)%VS.",
            "VernacStartTheoremProof",
            "047d388e5d6a85b98247ae3af696fe8faf430538"
        ],
        [
            "have [-> | /cyclic_or_large[|[a Dxa]]] := eqVneq x 0; first 2 [by left].",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "by rewrite addv0 subfield_closed; right; exists y.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "have [-> | /cyclic_or_large[|[b Dyb]]] := eqVneq y 0; first 2 [by left].",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "by rewrite addv0 subfield_closed; right; exists x.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "pose h0 (ij : 'I_a.+1 * 'I_b.+1) := x ^+ ij.1 * y ^+ ij.2.",
            "VernacExtend",
            "3c5f04de94609049d978298aa02ff35fb35ea7c7"
        ],
        [
            "pose H := <<[set ij | h0 ij == 1%R]>>%G; pose h (u : coset_of H) := h0 (repr u).",
            "VernacExtend",
            "311b833fadff89b2f7ed817d3cd7cb6971c96a1e"
        ],
        [
            "have h0M: {morph h0: ij1 ij2 / (ij1 * ij2)%g >-> ij1 * ij2}.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "by rewrite /h0 => [] [i1 j1] [i2 j2] /=; rewrite mulrACA -!exprD !expr_mod.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "have memH ij: (ij \\in H) = (h0 ij == 1).",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "rewrite /= gen_set_id ?inE //; apply/group_setP; rewrite inE [h0 _]mulr1.",
            "VernacExtend",
            "fe8f197e86415fc7f0a74eda9d312128b9473eda"
        ],
        [
            "by split=> // ? ?; rewrite !inE h0M => /eqP-> /eqP->; rewrite mulr1.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "have nH ij: ij \\in 'N(H)%g.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "by apply/(subsetP (cent_sub _))/centP=> ij1 _; congr (_, _); rewrite Zp_mulgC.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "have hE ij: h (coset H ij) = h0 ij.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "rewrite /h val_coset //; case: repr_rcosetP => ij1.",
            "VernacExtend",
            "712d339e99ee17eb7d5033e19ac614eb3ca6b532"
        ],
        [
            "by rewrite memH h0M => /eqP->; rewrite mul1r.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "have h1: h 1%g = 1 by rewrite /h repr_coset1 [h0 _]mulr1.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "have hM: {morph h: u v / (u * v)%g >-> u * v}.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "by do 2![move=> u; have{u} [? _ ->] := cosetP u]; rewrite -morphM // !hE h0M.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "have /cyclicP[w defW]: cyclic [set: coset_of H].",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "apply: field_mul_group_cyclic (in2W hM) _ => u _; have [ij _ ->] := cosetP u.",
            "VernacExtend",
            "c574574294cc642b01d157e4c8f21ac2f90e4b5d"
        ],
        [
            "by split=> [/eqP | -> //]; rewrite hE -memH => /coset_id.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "have Kw_h ij t: h0 ij = t -> t \\in <<K; h w>>%VS.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "have /cycleP[k Dk]: coset H ij \\in <[w]>%g by rewrite -defW inE.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "rewrite -hE {}Dk => <-; elim: k => [|k IHk]; first by rewrite h1 rpred1.",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "by rewrite expgS hM rpredM // memv_adjoin.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "right; exists (h w); apply/eqP; rewrite eqEsubv !(sameP FadjoinP andP).",
            "VernacExtend",
            "bf33779514f5af1c6c0fd88ddd65fa40651b2038"
        ],
        [
            "rewrite subv_adjoin (subv_trans (subv_adjoin K y)) ?subv_adjoin //=.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "rewrite (Kw_h (0, inZp 1)) 1?(Kw_h (inZp 1, 0)) /h0 ?mulr1 ?mul1r ?expr_mod //=.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "by rewrite rpredM ?rpredX ?memv_adjoin // subvP_adjoin ?memv_adjoin.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "End FiniteCase.",
            "VernacEndSegment",
            "c3910a45a420f5fff1575eaed40ceb64c123acdb"
        ],
        [
            "Hypothesis sepKy : separable_element K y.",
            "VernacAssumption",
            "157f9cc40b340d96172086eaf2ab7b8b4805f92d"
        ],
        [
            "Lemma Primitive_Element_Theorem : exists z, (<< <<K; y>>; x>> = <<K; z>>)%VS.",
            "VernacStartTheoremProof",
            "a1aeae4197038b59cace94ecc68525aa4a5791b7"
        ],
        [
            "have /polyOver_subvs[p Dp]: minPoly K x \\is a polyOver K := minPolyOver K x.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "have nz_pKx: minPoly K x != 0 by rewrite monic_neq0 ?monic_minPoly.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "have{nz_pKx} nz_p: p != 0 by rewrite Dp map_poly_eq0 in nz_pKx.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "have{Dp} px0: root (map_poly vsval p) x by rewrite -Dp root_minPoly.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "have [q0 [Kq0 q0y0 sepKq0]] := separable_elementP sepKy.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "have /polyOver_subvs[q Dq]: minPoly K y \\is a polyOver K := minPolyOver K y.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "have qy0: root (map_poly vsval q) y by rewrite -Dq root_minPoly.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "have sep_pKy: separable_poly (minPoly K y).",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "by rewrite (dvdp_separable _ sepKq0) ?minPoly_dvdp.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "have{sep_pKy} sep_q: separable_poly q by rewrite Dq separable_map in sep_pKy.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "have [r nz_r PETr] := large_field_PET nz_p px0 qy0 sep_q.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "have [[s [Us Ks /ltnW leNs]] | //] := finite_PET (size r).",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "have{s Us leNs} /allPn[t {Ks}/Ks Kt nz_rt]: ~~ all (root r) s.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "by apply: contraTN leNs; rewrite -ltnNge => /max_poly_roots->.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "have{PETr} [/= [p1 Dx] [q1 Dy]] := PETr (Subvs Kt) nz_rt.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "set z := t * y - x in Dx Dy; exists z; apply/eqP.",
            "VernacExtend",
            "fd3f5ce8798f42850716edb6c719cc704149efc9"
        ],
        [
            "rewrite eqEsubv !(sameP FadjoinP andP) subv_adjoin.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "have Kz_p1z (r1 : {poly subvs_of K}): (map_poly vsval r1).[z] \\in <<K; z>>%VS.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "rewrite rpred_horner ?memv_adjoin ?(polyOverSv (subv_adjoin K z)) //.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "by apply/polyOver_subvs; exists r1.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "rewrite -{1}Dx -{1}Dy !{Dx Dy}Kz_p1z /=.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "rewrite (subv_trans (subv_adjoin K y)) ?subv_adjoin // rpredB ?memv_adjoin //.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "by rewrite subvP_adjoin // rpredM ?memv_adjoin ?subvP_adjoin.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma adjoin_separable : separable_element <<K; y>> x -> separable_element K x.",
            "VernacStartTheoremProof",
            "ffa49bfe7d211b10a0e61c5234cfbb6724d0e28d"
        ],
        [
            "have /Derivation_separableP derKy := sepKy => /Derivation_separableP derKy_x.",
            "VernacExtend",
            "3c42b53d0efc26db114b00541ac5e7fcb29e6aeb"
        ],
        [
            "have [z defKz] := Primitive_Element_Theorem.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "suffices /adjoin_separableP: separable_element K z.",
            "VernacExtend",
            "290ed488b5562e885aa2cac56f3a69b4faa0eaa6"
        ],
        [
            "by apply; rewrite -defKz memv_adjoin.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "apply/Derivation_separableP=> D; rewrite -defKz => derKxyD DK_0.",
            "VernacExtend",
            "5fce7e5361004176d6b434b36b4623c7387f70bb"
        ],
        [
            "suffices derKyD: Derivation <<K; y>>%VS D by rewrite derKy_x // derKy.",
            "VernacExtend",
            "290ed488b5562e885aa2cac56f3a69b4faa0eaa6"
        ],
        [
            "by apply: DerivationS derKxyD; apply: subv_adjoin.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "End PrimitiveElementTheorem.",
            "VernacEndSegment",
            "a66acd03efff1dc443ade87066c39ec4fa779a77"
        ],
        [
            "Lemma strong_Primitive_Element_Theorem K x y : separable_element <<K; x>> y -> exists2 z : L, (<< <<K; y>>; x>> = <<K; z>>)%VS & separable_element K x -> separable_element K y.",
            "VernacStartTheoremProof",
            "2352fca0d26f6f2485a33251ba0a970a89c61bad"
        ],
        [
            "move=> sepKx_y; have [n /andP[charLn sepKyn]] := separable_exponent K y.",
            "VernacExtend",
            "ccd83c252dcbae3d56f3d057fcb8217878b51901"
        ],
        [
            "have adjK_C z t: (<<<<K; z>>; t>> = <<<<K; t>>; z>>)%VS.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "by rewrite !agenv_add_id -!addvA (addvC <[_]>%VS).",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "have [z defKz] := Primitive_Element_Theorem x sepKyn.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "exists z => [|/adjoin_separable->]; rewrite ?sepKx_y // -defKz.",
            "VernacExtend",
            "82d53976234637e3f0907eb36cddf61d028c6306"
        ],
        [
            "have [|n_gt1|-> //] := ltngtP n 1%N; first by case: (n) charLn.",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "apply/eqP; rewrite !(adjK_C _ x) eqEsubv; apply/andP.",
            "VernacExtend",
            "da24caf87c1bbbad0538b8be68905ec456c78aa7"
        ],
        [
            "split; apply/FadjoinP/andP; rewrite subv_adjoin ?rpredX ?memv_adjoin //=.",
            "VernacExtend",
            "ce0ddc7eeb46e538d9a1cb9001c2d720b774ad81"
        ],
        [
            "by rewrite -charf_n_separable ?sepKx_y.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Definition separable U W : bool := all (separable_element U) (vbasis W).",
            "VernacDefinition",
            "4fc113b12be44dcb756bf7dfb1381b5efe446e6f"
        ],
        [
            "Definition purely_inseparable U W : bool := all (purely_inseparable_element U) (vbasis W).",
            "VernacDefinition",
            "20def2cdb8004956181fe75be7688fec677afb3f"
        ],
        [
            "Lemma separable_add K x y : separable_element K x -> separable_element K y -> separable_element K (x + y).",
            "VernacStartTheoremProof",
            "3e6d294ad1fcf4bf35a2932df8cfdcd89e2a0f20"
        ],
        [
            "move/(separable_elementS (subv_adjoin K y))=> sepKy_x sepKy.",
            "VernacExtend",
            "b1b2cb7a3a617cba67460b4eca1f04de3c1cc716"
        ],
        [
            "have [z defKz] := Primitive_Element_Theorem x sepKy.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "have /(adjoin_separableP _): x + y \\in <<K; z>>%VS.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "by rewrite -defKz rpredD ?memv_adjoin // subvP_adjoin ?memv_adjoin.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "apply; apply: adjoin_separable sepKy (adjoin_separable sepKy_x _).",
            "VernacExtend",
            "ca95919851f741ec38f9dba657fdfd7504d0d9f8"
        ],
        [
            "by rewrite defKz base_separable ?memv_adjoin.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma separable_sum I r (P : pred I) (v_ : I -> L) K : (forall i, P i -> separable_element K (v_ i)) -> separable_element K (\\sum_(i <- r | P i) v_ i).",
            "VernacStartTheoremProof",
            "c02bd07c54570a17cb6a3c292237d9e00b018709"
        ],
        [
            "move=> sepKi.",
            "VernacExtend",
            "b1b2cb7a3a617cba67460b4eca1f04de3c1cc716"
        ],
        [
            "by elim/big_ind: _; [apply/base_separable/mem0v | apply: separable_add |].",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma inseparable_add K x y : purely_inseparable_element K x -> purely_inseparable_element K y -> purely_inseparable_element K (x + y).",
            "VernacStartTheoremProof",
            "57f7c82c55fce0c8bb98f355a968080a9c02772b"
        ],
        [
            "have insepP := purely_inseparable_elementP.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "move=> /insepP[n charLn Kxn] /insepP[m charLm Kym]; apply/insepP.",
            "VernacExtend",
            "d6ebf3361f380a12d5c2c9bbb7ea363132c48b36"
        ],
        [
            "have charLnm: [char L].-nat (n * m)%N by rewrite pnat_mul charLn.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "by exists (n * m)%N; rewrite ?exprDn_char // {2}mulnC !exprM memvD // rpredX.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma inseparable_sum I r (P : pred I) (v_ : I -> L) K : (forall i, P i -> purely_inseparable_element K (v_ i)) -> purely_inseparable_element K (\\sum_(i <- r | P i) v_ i).",
            "VernacStartTheoremProof",
            "96e757243a062bd4a147072b7c53186bb2ab3f74"
        ],
        [
            "move=> insepKi.",
            "VernacExtend",
            "b1b2cb7a3a617cba67460b4eca1f04de3c1cc716"
        ],
        [
            "by elim/big_ind: _; [apply/base_inseparable/mem0v | apply: inseparable_add |].",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma separableP {K E} : reflect (forall y, y \\in E -> separable_element K y) (separable K E).",
            "VernacStartTheoremProof",
            "5634cf7c06b5338bab3ae01f5515453b09c3fa14"
        ],
        [
            "apply/(iffP idP)=> [/allP|] sepK_E; last by apply/allP=> x /vbasis_mem/sepK_E.",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "move=> y /coord_vbasis->; apply/separable_sum=> i _.",
            "VernacExtend",
            "d6ebf3361f380a12d5c2c9bbb7ea363132c48b36"
        ],
        [
            "have: separable_element K (vbasis E)`_i by apply/sepK_E/memt_nth.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "by move/adjoin_separableP; apply; rewrite rpredZ ?memv_adjoin.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma purely_inseparableP {K E} : reflect (forall y, y \\in E -> purely_inseparable_element K y) (purely_inseparable K E).",
            "VernacStartTheoremProof",
            "ddab24e6bf7f6b493a6fc2231df010847d0ebaae"
        ],
        [
            "apply/(iffP idP)=> [/allP|] sep'K_E; last by apply/allP=> x /vbasis_mem/sep'K_E.",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "move=> y /coord_vbasis->; apply/inseparable_sum=> i _.",
            "VernacExtend",
            "d6ebf3361f380a12d5c2c9bbb7ea363132c48b36"
        ],
        [
            "have: purely_inseparable_element K (vbasis E)`_i by apply/sep'K_E/memt_nth.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "case/purely_inseparable_elementP=> n charLn K_Ein.",
            "VernacExtend",
            "e00fff71ff314c991514fc71c41a3556702e444a"
        ],
        [
            "by apply/purely_inseparable_elementP; exists n; rewrite // exprZn rpredZ.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma adjoin_separable_eq K x : separable_element K x = separable K <<K; x>>%VS.",
            "VernacStartTheoremProof",
            "5b1ea7d564bed6f606d599879b4a7afcd465aeaf"
        ],
        [
            "exact: sameP adjoin_separableP separableP.",
            "VernacExtend",
            "ce637ff86bafca5d8359473e8c02af644dcbdc43"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma separable_inseparable_decomposition E K : {x | x \\in E /\\ separable_element K x & purely_inseparable <<K; x>> E}.",
            "VernacStartTheoremProof",
            "b7d232fada2bbf4aa1bf85649a607634605f8c83"
        ],
        [
            "without loss sKE: K / (K <= E)%VS.",
            "VernacExtend",
            "87d5e7b04148ee8f2e4efcc847e0dfadae0aa4cb"
        ],
        [
            "case/(_ _ (capvSr K E)) => x [Ex sepKEx] /purely_inseparableP sep'KExE.",
            "VernacExtend",
            "e00fff71ff314c991514fc71c41a3556702e444a"
        ],
        [
            "exists x; first by split; last exact/(separable_elementS _ sepKEx)/capvSl.",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "apply/purely_inseparableP=> y /sep'KExE; apply: sub_inseparable.",
            "VernacExtend",
            "8d9dae45eeb3a769b8a865cef8ae476451f63802"
        ],
        [
            "exact/adjoinSl/capvSl.",
            "VernacExtend",
            "ce637ff86bafca5d8359473e8c02af644dcbdc43"
        ],
        [
            "pose E_ i := (vbasis E)`_i; pose fP i := separable_exponent K (E_ i).",
            "VernacExtend",
            "311b833fadff89b2f7ed817d3cd7cb6971c96a1e"
        ],
        [
            "pose f i := E_ i ^+ ex_minn (fP i); pose s := mkseq f (\\dim E).",
            "VernacExtend",
            "311b833fadff89b2f7ed817d3cd7cb6971c96a1e"
        ],
        [
            "pose K' := <<K & s>>%VS.",
            "VernacExtend",
            "3c5f04de94609049d978298aa02ff35fb35ea7c7"
        ],
        [
            "have sepKs: all (separable_element K) s.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "by rewrite all_map /f; apply/allP=> i _ /=; case: ex_minnP => m /andP[].",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "have [x sepKx defKx]: {x | x \\in E /\\ separable_element K x & K' = <<K; x>>%VS}.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "have: all (mem E) s.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "rewrite all_map; apply/allP=> i; rewrite mem_iota => ltis /=.",
            "VernacExtend",
            "0288f65064e83af8559a49f90a2eba4421e03fd4"
        ],
        [
            "by rewrite rpredX // vbasis_mem // memt_nth.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "rewrite {}/K'; elim/last_ind: s sepKs => [|s t IHs].",
            "VernacExtend",
            "44a8e3b453c9376c468b4e3e0046f5ac33e11d6d"
        ],
        [
            "by exists 0; [rewrite base_separable mem0v | rewrite adjoin_nil addv0].",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "rewrite adjoin_rcons !all_rcons => /andP[sepKt sepKs] /andP[/= Et Es].",
            "VernacExtend",
            "3c42b53d0efc26db114b00541ac5e7fcb29e6aeb"
        ],
        [
            "have{IHs sepKs Es} [y [Ey sepKy] ->{s}] := IHs sepKs Es.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "have /sig_eqW[x defKx] := Primitive_Element_Theorem t sepKy.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "exists x; [split | exact: defKx].",
            "VernacExtend",
            "cbb1d9987e22058cfd3035455723ee58c66ce52e"
        ],
        [
            "suffices: (<<K; x>> <= E)%VS by case/FadjoinP.",
            "VernacExtend",
            "290ed488b5562e885aa2cac56f3a69b4faa0eaa6"
        ],
        [
            "by rewrite -defKx !(sameP FadjoinP andP) sKE Ey Et.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "apply/adjoin_separableP=> z; rewrite -defKx => Kyt_z.",
            "VernacExtend",
            "5fce7e5361004176d6b434b36b4623c7387f70bb"
        ],
        [
            "apply: adjoin_separable sepKy _; apply: adjoin_separableP Kyt_z.",
            "VernacExtend",
            "8d9dae45eeb3a769b8a865cef8ae476451f63802"
        ],
        [
            "exact: separable_elementS (subv_adjoin K y) sepKt.",
            "VernacExtend",
            "ce637ff86bafca5d8359473e8c02af644dcbdc43"
        ],
        [
            "exists x; rewrite // -defKx; apply/(all_nthP 0)=> i; rewrite size_tuple => ltiE.",
            "VernacExtend",
            "30edf2cef8e0ed66ed8f6362fbf12eb600aba818"
        ],
        [
            "apply/purely_inseparable_elementP.",
            "VernacExtend",
            "4bd6fa79b17bcd2bfb7af091fb325367a20385d6"
        ],
        [
            "exists (ex_minn (fP i)); first by case: ex_minnP => n /andP[].",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "by apply/seqv_sub_adjoin/map_f; rewrite mem_iota.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Definition separable_generator K E : L := s2val (locked (separable_inseparable_decomposition E K)).",
            "VernacDefinition",
            "e42681ff3dbdf7c05756592a4dc1ed553cb2840a"
        ],
        [
            "Lemma separable_generator_mem E K : separable_generator K E \\in E.",
            "VernacStartTheoremProof",
            "c4b7cfa1b37731e7ebddac2f252f476ae467efe6"
        ],
        [
            "by rewrite /separable_generator; case: (locked _) => ? [].",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma separable_generatorP E K : separable_element K (separable_generator K E).",
            "VernacStartTheoremProof",
            "2dc15f115a1254b583ab2386e0a276ea60cff164"
        ],
        [
            "by rewrite /separable_generator; case: (locked _) => ? [].",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma separable_generator_maximal E K : purely_inseparable <<K; separable_generator K E>> E.",
            "VernacStartTheoremProof",
            "fc3713742c88988a37e8d886e067c3305981bbdd"
        ],
        [
            "by rewrite /separable_generator; case: (locked _).",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma sub_adjoin_separable_generator E K : separable K E -> (E <= <<K; separable_generator K E>>)%VS.",
            "VernacStartTheoremProof",
            "1ff0743b6f9e4f46c1b5e7c00f2cb90d99638632"
        ],
        [
            "move/separableP=> sepK_E; apply/subvP=> v Ev.",
            "VernacExtend",
            "d6ebf3361f380a12d5c2c9bbb7ea363132c48b36"
        ],
        [
            "rewrite -separable_inseparable_element.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "have /purely_inseparableP-> // := separable_generator_maximal E K.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "by rewrite (separable_elementS _ (sepK_E _ Ev)) // subv_adjoin.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma eq_adjoin_separable_generator E K : separable K E -> (K <= E)%VS -> E = <<K; separable_generator K E>>%VS :> {vspace _}.",
            "VernacStartTheoremProof",
            "55cede039325a9e8b0712526f19955752d8e9878"
        ],
        [
            "move=> sepK_E sKE; apply/eqP; rewrite eqEsubv sub_adjoin_separable_generator //.",
            "VernacExtend",
            "f7feb259d6220ca40e8a86b90bd06f137aa140ac"
        ],
        [
            "by apply/FadjoinP/andP; rewrite sKE separable_generator_mem.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma separable_refl K : separable K K.",
            "VernacStartTheoremProof",
            "4826ad01545aefc24d688a2efdadd645a849b118"
        ],
        [
            "by apply/separableP; apply: base_separable.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma separable_trans M K E : separable K M -> separable M E -> separable K E.",
            "VernacStartTheoremProof",
            "ea43bdf5c7731afd6373700cabbe79e060dafbd6"
        ],
        [
            "move/sub_adjoin_separable_generator.",
            "VernacExtend",
            "b1b2cb7a3a617cba67460b4eca1f04de3c1cc716"
        ],
        [
            "set x := separable_generator K M => sMKx /separableP sepM_E.",
            "VernacExtend",
            "3c42b53d0efc26db114b00541ac5e7fcb29e6aeb"
        ],
        [
            "apply/separableP => w /sepM_E/(separable_elementS sMKx).",
            "VernacExtend",
            "4bd6fa79b17bcd2bfb7af091fb325367a20385d6"
        ],
        [
            "case/strong_Primitive_Element_Theorem => _ _ -> //.",
            "VernacExtend",
            "e00fff71ff314c991514fc71c41a3556702e444a"
        ],
        [
            "exact: separable_generatorP.",
            "VernacExtend",
            "ce637ff86bafca5d8359473e8c02af644dcbdc43"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma separableS K1 K2 E2 E1 : (K1 <= K2)%VS -> (E2 <= E1)%VS -> separable K1 E1 -> separable K2 E2.",
            "VernacStartTheoremProof",
            "b318b3aa4be91a8a3a0302686d78d2ff195eb7a4"
        ],
        [
            "move=> sK12 /subvP sE21 /separableP sepK1_E1.",
            "VernacExtend",
            "b1b2cb7a3a617cba67460b4eca1f04de3c1cc716"
        ],
        [
            "by apply/separableP=> y /sE21/sepK1_E1/(separable_elementS sK12).",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma separableSl K M E : (K <= M)%VS -> separable K E -> separable M E.",
            "VernacStartTheoremProof",
            "684740bd22c024e7552dfa1c329f12fab4e9d1c8"
        ],
        [
            "by move/separableS; apply.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma separableSr K M E : (M <= E)%VS -> separable K E -> separable K M.",
            "VernacStartTheoremProof",
            "7ba1700c04800eb1f121092a21ae347a1ac697da"
        ],
        [
            "exact: separableS.",
            "VernacExtend",
            "ce637ff86bafca5d8359473e8c02af644dcbdc43"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma separable_Fadjoin_seq K rs : all (separable_element K) rs -> separable K <<K & rs>>.",
            "VernacStartTheoremProof",
            "23a24677802af1bd0b9e6b9f3a86a61f34fa41f2"
        ],
        [
            "elim/last_ind: rs => [|s x IHs] in K *.",
            "VernacExtend",
            "e686a1895f1799b840b76242f931100819a9ad6c"
        ],
        [
            "by rewrite adjoin_nil subfield_closed separable_refl.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "rewrite all_rcons adjoin_rcons => /andP[sepKx /IHs/separable_trans-> //].",
            "VernacExtend",
            "3c42b53d0efc26db114b00541ac5e7fcb29e6aeb"
        ],
        [
            "by rewrite -adjoin_separable_eq (separable_elementS _ sepKx) ?subv_adjoin_seq.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma purely_inseparable_refl K : purely_inseparable K K.",
            "VernacStartTheoremProof",
            "be34d297e2271539101dc54be86b26113c27549e"
        ],
        [
            "by apply/purely_inseparableP; apply: base_inseparable.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma purely_inseparable_trans M K E : purely_inseparable K M -> purely_inseparable M E -> purely_inseparable K E.",
            "VernacStartTheoremProof",
            "3bda602223c975427d2535c6b66c1a95c4d4e355"
        ],
        [
            "have insepP := purely_inseparableP => /insepP insepK_M /insepP insepM_E.",
            "VernacExtend",
            "3c42b53d0efc26db114b00541ac5e7fcb29e6aeb"
        ],
        [
            "have insepPe := purely_inseparable_elementP.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "apply/insepP=> x /insepM_E/insepPe[n charLn /insepK_M/insepPe[m charLm Kxnm]].",
            "VernacExtend",
            "4bd6fa79b17bcd2bfb7af091fb325367a20385d6"
        ],
        [
            "by apply/insepPe; exists (n * m)%N; rewrite ?exprM // pnat_mul charLn charLm.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "End Separable.",
            "VernacEndSegment",
            "2532034c3fa84b2b7b09db2f6e0a6f153a1d3a2d"
        ],
        [
            "Arguments separable_elementP {F L K x}.",
            "VernacArguments",
            "2cbee68b96f224e60fc025e97f519e6447f83952"
        ],
        [
            "Arguments separablePn {F L K x}.",
            "VernacArguments",
            "4420d9b997e30f6b483490c4362afdb3d8b544ee"
        ],
        [
            "Arguments Derivation_separableP {F L K x}.",
            "VernacArguments",
            "051e42839be50966d550d3a979af9e744e04f6ff"
        ],
        [
            "Arguments adjoin_separableP {F L K x}.",
            "VernacArguments",
            "b04d62719eaee7cf7479ac2d8cce90aa79a633fe"
        ],
        [
            "Arguments purely_inseparable_elementP {F L K x}.",
            "VernacArguments",
            "433670954f9d88ac75718caabf9727a3d07e4344"
        ],
        [
            "Arguments separableP {F L K E}.",
            "VernacArguments",
            "57b8ec2bc4d972323e4674c681acb3e3d7ef465e"
        ],
        [
            "Arguments purely_inseparableP {F L K E}.",
            "VernacArguments",
            "4bb3674d8f5f96b312e56e8890c682e3fe4f3351"
        ]
    ],
    "proofs": [
        {
            "name": "separable_poly_neq0",
            "line_nb": 16,
            "steps": [
                {
                    "command": [
                        "by apply: contraTneq => ->; rewrite /separable deriv0 coprime0p eqp01.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "poly_square_freeP",
            "line_nb": 19,
            "steps": [
                {
                    "command": [
                        "split=> [sq'p u | sq'p u v dvd_uv_p].",
                        "VernacExtend",
                        "3c42b53d0efc26db114b00541ac5e7fcb29e6aeb"
                    ]
                },
                {
                    "command": [
                        "by apply: contra => /sq'p; rewrite coprimepp.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "rewrite coprimep_def (contraLR (sq'p _)) // (dvdp_trans _ dvd_uv_p) //.",
                        "VernacExtend",
                        "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
                    ]
                },
                {
                    "command": [
                        "by rewrite dvdp_mul ?dvdp_gcdl ?dvdp_gcdr.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "separable_polyP",
            "line_nb": 25,
            "steps": [
                {
                    "command": [
                        "apply: (iffP idP) => [sep_p | [sq'p nz_der1p]].",
                        "VernacExtend",
                        "4bd6fa79b17bcd2bfb7af091fb325367a20385d6"
                    ]
                },
                {
                    "command": [
                        "split=> [u v | u u_dv_p]; last first.",
                        "VernacExtend",
                        "3763a4b8db689af316a7372b722bb29806ab4fb6"
                    ]
                },
                {
                    "command": [
                        "apply: contraTneq => u'0; rewrite -leqNgt -(eqnP sep_p).",
                        "VernacExtend",
                        "56c014161b39aecfb3c54301c2409dba4e8e1857"
                    ]
                },
                {
                    "command": [
                        "rewrite dvdp_leq -?size_poly_eq0 ?(eqnP sep_p) // dvdp_gcd u_dv_p.",
                        "VernacExtend",
                        "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
                    ]
                },
                {
                    "command": [
                        "have /dvdp_scaler <-: lead_coef u ^+ scalp p u != 0 by rewrite lcn_neq0.",
                        "VernacExtend",
                        "406cde1174359c53bf162a2a18c4eede395555f9"
                    ]
                },
                {
                    "command": [
                        "by rewrite -derivZ -Pdiv.Idomain.divpK //= derivM u'0 mulr0 addr0 dvdp_mull.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "rewrite Pdiv.Idomain.dvdp_eq mulrCA mulrA; set c := _ ^+ _ => /eqP Dcp.",
                        "VernacExtend",
                        "80e7cce19c53eb5d5a21aafd83e552d37e23084a"
                    ]
                },
                {
                    "command": [
                        "have nz_c: c != 0 by rewrite lcn_neq0.",
                        "VernacExtend",
                        "406cde1174359c53bf162a2a18c4eede395555f9"
                    ]
                },
                {
                    "command": [
                        "move: sep_p; rewrite coprimep_sym -[separable _](coprimep_scalel _ _ nz_c).",
                        "VernacExtend",
                        "057edeb0967475c7ea5e8c98c449ddc5613eddc1"
                    ]
                },
                {
                    "command": [
                        "rewrite -(coprimep_scaler _ _ nz_c) -derivZ Dcp derivM coprimep_mull.",
                        "VernacExtend",
                        "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
                    ]
                },
                {
                    "command": [
                        "by rewrite coprimep_addl_mul !coprimep_mulr -andbA => /and4P[].",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "rewrite /separable coprimep_def eqn_leq size_poly_gt0; set g := gcdp _ _.",
                        "VernacExtend",
                        "c1f58f36c5711f022b4a54717f37c2782f34a159"
                    ]
                },
                {
                    "command": [
                        "have nz_g: g != 0.",
                        "VernacExtend",
                        "406cde1174359c53bf162a2a18c4eede395555f9"
                    ]
                },
                {
                    "command": [
                        "rewrite -dvd0p dvdp_gcd -(mulr0 0); apply/nandP; left.",
                        "VernacExtend",
                        "b5c6eb8f4088040d9dfd48a39246f897d117ec2b"
                    ]
                },
                {
                    "command": [
                        "by have /poly_square_freeP-> := sq'p; rewrite ?size_poly0.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "have [g_p]: g %| p /\\ g %| p^`() by rewrite dvdp_gcdr ?dvdp_gcdl.",
                        "VernacExtend",
                        "406cde1174359c53bf162a2a18c4eede395555f9"
                    ]
                },
                {
                    "command": [
                        "pose c := lead_coef g ^+ scalp p g; have nz_c: c != 0 by rewrite lcn_neq0.",
                        "VernacExtend",
                        "c09d1274557abc8857ed64eb3450db2da906c185"
                    ]
                },
                {
                    "command": [
                        "have Dcp: c *: p = p %/ g * g by rewrite Pdiv.Idomain.divpK.",
                        "VernacExtend",
                        "406cde1174359c53bf162a2a18c4eede395555f9"
                    ]
                },
                {
                    "command": [
                        "rewrite nz_g andbT leqNgt -(dvdp_scaler _ _ nz_c) -derivZ Dcp derivM.",
                        "VernacExtend",
                        "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
                    ]
                },
                {
                    "command": [
                        "rewrite dvdp_addr; last by rewrite dvdp_mull.",
                        "VernacExtend",
                        "3763a4b8db689af316a7372b722bb29806ab4fb6"
                    ]
                },
                {
                    "command": [
                        "rewrite Gauss_dvdpr; last by rewrite sq'p // mulrC -Dcp dvdp_scalel.",
                        "VernacExtend",
                        "3763a4b8db689af316a7372b722bb29806ab4fb6"
                    ]
                },
                {
                    "command": [
                        "by apply: contraL => /nz_der1p nz_g'; rewrite gtNdvdp ?nz_g' ?lt_size_deriv.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "separable_coprime",
            "line_nb": 49,
            "steps": [
                {
                    "command": [
                        "by move=> /separable_polyP[sq'p _] /sq'p.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "separable_nosquare",
            "line_nb": 52,
            "steps": [
                {
                    "command": [
                        "move=> /separable_polyP[/poly_square_freeP sq'p _] /subnKC <- /sq'p.",
                        "VernacExtend",
                        "b1b2cb7a3a617cba67460b4eca1f04de3c1cc716"
                    ]
                },
                {
                    "command": [
                        "by apply: contraNF; apply: dvdp_trans; rewrite exprD dvdp_mulr.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "separable_deriv_eq0",
            "line_nb": 56,
            "steps": [
                {
                    "command": [
                        "by move=> /separable_polyP[_ nz_der1p] u_p /nz_der1p/negPf->.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "dvdp_separable",
            "line_nb": 59,
            "steps": [
                {
                    "command": [
                        "move=> /(dvdp_trans _)q_dv_p /separable_polyP[sq'p nz_der1p].",
                        "VernacExtend",
                        "b1b2cb7a3a617cba67460b4eca1f04de3c1cc716"
                    ]
                },
                {
                    "command": [
                        "by apply/separable_polyP; split=> [u v /q_dv_p/sq'p | u /q_dv_p/nz_der1p].",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "separable_mul",
            "line_nb": 63,
            "steps": [
                {
                    "command": [
                        "apply/idP/and3P => [sep_pq | [sep_p seq_q co_pq]].",
                        "VernacExtend",
                        "4bd6fa79b17bcd2bfb7af091fb325367a20385d6"
                    ]
                },
                {
                    "command": [
                        "rewrite !(dvdp_separable _ sep_pq) ?dvdp_mulIr ?dvdp_mulIl //.",
                        "VernacExtend",
                        "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
                    ]
                },
                {
                    "command": [
                        "by rewrite (separable_coprime sep_pq).",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "rewrite /separable derivM coprimep_mull {1}addrC mulrC !coprimep_addl_mul.",
                        "VernacExtend",
                        "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
                    ]
                },
                {
                    "command": [
                        "by rewrite !coprimep_mulr (coprimep_sym q p) co_pq !andbT; apply/andP.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "eqp_separable",
            "line_nb": 70,
            "steps": [
                {
                    "command": [
                        "by case/andP=> p_q q_p; apply/idP/idP=> /dvdp_separable->.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "separable_root",
            "line_nb": 73,
            "steps": [
                {
                    "command": [
                        "rewrite separable_mul; apply: andb_id2l => seq_p.",
                        "VernacExtend",
                        "634a7639ed2fb7caf62757f84400927f5829b7d5"
                    ]
                },
                {
                    "command": [
                        "by rewrite /separable derivXsubC coprimep1 coprimep_XsubC.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "separable_prod_XsubC",
            "line_nb": 77,
            "steps": [
                {
                    "command": [
                        "elim: r => [|x r IH]; first by rewrite big_nil /separable_poly coprime1p.",
                        "VernacExtend",
                        "3763a4b8db689af316a7372b722bb29806ab4fb6"
                    ]
                },
                {
                    "command": [
                        "by rewrite big_cons mulrC separable_root IH root_prod_XsubC andbC.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "separable_map",
            "line_nb": 111,
            "steps": [
                {
                    "command": [
                        "by rewrite /separable_poly deriv_map /coprimep -gcdp_map size_map_poly.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "char0_PET",
            "line_nb": 173,
            "steps": [
                {
                    "command": [
                        "move=> nz_q qy_0 /charf0P charF0.",
                        "VernacExtend",
                        "b1b2cb7a3a617cba67460b4eca1f04de3c1cc716"
                    ]
                },
                {
                    "command": [
                        "without loss{nz_q} sep_q: q qy_0 / separable_poly q.",
                        "VernacExtend",
                        "87d5e7b04148ee8f2e4efcc847e0dfadae0aa4cb"
                    ]
                },
                {
                    "command": [
                        "move=> IHq; apply: IHq (make_separable nz_q).",
                        "VernacExtend",
                        "d6ebf3361f380a12d5c2c9bbb7ea363132c48b36"
                    ]
                },
                {
                    "command": [
                        "have /dvdpP[q1 Dq] := dvdp_gcdl q q^`().",
                        "VernacExtend",
                        "406cde1174359c53bf162a2a18c4eede395555f9"
                    ]
                },
                {
                    "command": [
                        "rewrite {1}Dq mulpK ?gcdp_eq0; last by apply/nandP; left.",
                        "VernacExtend",
                        "3763a4b8db689af316a7372b722bb29806ab4fb6"
                    ]
                },
                {
                    "command": [
                        "have [n [r nz_ry Dr]] := multiplicity_XsubC (q ^ iota) y.",
                        "VernacExtend",
                        "406cde1174359c53bf162a2a18c4eede395555f9"
                    ]
                },
                {
                    "command": [
                        "rewrite map_poly_eq0 nz_q /= in nz_ry.",
                        "VernacExtend",
                        "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
                    ]
                },
                {
                    "command": [
                        "case: n => [|n] in Dr; first by rewrite Dr mulr1 (negPf nz_ry) in qy_0.",
                        "VernacExtend",
                        "3763a4b8db689af316a7372b722bb29806ab4fb6"
                    ]
                },
                {
                    "command": [
                        "have: ('X - y%:P) ^+ n.+1 %| q ^ iota by rewrite Dr dvdp_mulIr.",
                        "VernacExtend",
                        "406cde1174359c53bf162a2a18c4eede395555f9"
                    ]
                },
                {
                    "command": [
                        "rewrite Dq rmorphM /= gcdp_map -(eqp_dvdr _ (gcdp_mul2l _ _ _)) -deriv_map Dr.",
                        "VernacExtend",
                        "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
                    ]
                },
                {
                    "command": [
                        "rewrite dvdp_gcd derivM deriv_exp derivXsubC mul1r !mulrA dvdp_mulIr /=.",
                        "VernacExtend",
                        "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
                    ]
                },
                {
                    "command": [
                        "rewrite mulrDr mulrA dvdp_addr ?dvdp_mulIr // exprS -scaler_nat -!scalerAr.",
                        "VernacExtend",
                        "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
                    ]
                },
                {
                    "command": [
                        "rewrite dvdp_scaler -?(rmorph_nat iota) ?fmorph_eq0 ?charF0 //.",
                        "VernacExtend",
                        "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
                    ]
                },
                {
                    "command": [
                        "rewrite mulrA dvdp_mul2r ?expf_neq0 ?polyXsubC_eq0 //.",
                        "VernacExtend",
                        "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
                    ]
                },
                {
                    "command": [
                        "by rewrite Gauss_dvdpl ?dvdp_XsubCl // coprimep_sym coprimep_XsubC.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "have [r nz_r PETxy] := large_field_PET qy_0 sep_q.",
                        "VernacExtend",
                        "406cde1174359c53bf162a2a18c4eede395555f9"
                    ]
                },
                {
                    "command": [
                        "pose ts := mkseq (fun n => iota n%:R) (size r).",
                        "VernacExtend",
                        "3c5f04de94609049d978298aa02ff35fb35ea7c7"
                    ]
                },
                {
                    "command": [
                        "have /(max_ring_poly_roots nz_r)/=/implyP: uniq_roots ts.",
                        "VernacExtend",
                        "406cde1174359c53bf162a2a18c4eede395555f9"
                    ]
                },
                {
                    "command": [
                        "rewrite uniq_rootsE mkseq_uniq // => m n eq_mn; apply/eqP; rewrite eqn_leq.",
                        "VernacExtend",
                        "01f04d3f5bba3b876eb4ec7b1c8f26d2e2cced77"
                    ]
                },
                {
                    "command": [
                        "wlog suffices: m n eq_mn / m <= n by move=> IHmn; rewrite !IHmn.",
                        "VernacExtend",
                        "348aa27e7c84ea4ca2ac06b8a3b3db24e74b6ad7"
                    ]
                },
                {
                    "command": [
                        "move/fmorph_inj/eqP: eq_mn; rewrite -subr_eq0 leqNgt; apply: contraL => lt_mn.",
                        "VernacExtend",
                        "0fa388cebe8ed6372154caa26cd10c357f123670"
                    ]
                },
                {
                    "command": [
                        "by rewrite -natrB ?(ltnW lt_mn) // charF0 -lt0n subn_gt0.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "rewrite size_mkseq ltnn implybF all_map => /allPn[n _ /= /PETxy].",
                        "VernacExtend",
                        "3c42b53d0efc26db114b00541ac5e7fcb29e6aeb"
                    ]
                },
                {
                    "command": [
                        "by rewrite rmorph_nat mulr_natl; exists n.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "Derivation_mul",
            "line_nb": 207,
            "steps": [
                {
                    "command": [
                        "move=> u v /coord_vbasis-> /coord_vbasis->.",
                        "VernacExtend",
                        "b1b2cb7a3a617cba67460b4eca1f04de3c1cc716"
                    ]
                },
                {
                    "command": [
                        "rewrite !(mulr_sumr, linear_sum) -big_split; apply: eq_bigr => /= j _.",
                        "VernacExtend",
                        "634a7639ed2fb7caf62757f84400927f5829b7d5"
                    ]
                },
                {
                    "command": [
                        "rewrite !mulr_suml linear_sum -big_split; apply: eq_bigr => /= i _.",
                        "VernacExtend",
                        "634a7639ed2fb7caf62757f84400927f5829b7d5"
                    ]
                },
                {
                    "command": [
                        "rewrite !(=^~ scalerAl, linearZZ) -!scalerAr linearZZ -!scalerDr !scalerA /=.",
                        "VernacExtend",
                        "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
                    ]
                },
                {
                    "command": [
                        "by congr (_ *: _); apply/eqP; rewrite (allP (allP derD _ _)) ?memt_nth.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "Derivation_mul_poly",
            "line_nb": 214,
            "steps": [
                {
                    "command": [
                        "move=> p q Kp Kq; apply/polyP=> i; rewrite {}/Dp coefD coef_map /= !coefM.",
                        "VernacExtend",
                        "f7feb259d6220ca40e8a86b90bd06f137aa140ac"
                    ]
                },
                {
                    "command": [
                        "rewrite linear_sum -big_split; apply: eq_bigr => /= j _.",
                        "VernacExtend",
                        "634a7639ed2fb7caf62757f84400927f5829b7d5"
                    ]
                },
                {
                    "command": [
                        "by rewrite !{1}coef_map Derivation_mul ?(polyOverP _).",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "Derivation1",
            "line_nb": 227,
            "steps": [
                {
                    "command": [
                        "apply: (addIr (D (1 * 1))); rewrite add0r {1}mul1r.",
                        "VernacExtend",
                        "56c014161b39aecfb3c54301c2409dba4e8e1857"
                    ]
                },
                {
                    "command": [
                        "by rewrite (Derivation_mul derD) ?mem1v // mulr1 mul1r.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "Derivation_scalar",
            "line_nb": 231,
            "steps": [
                {
                    "command": [
                        "by case/vlineP=> y ->; rewrite linearZ /= Derivation1 scaler0.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "Derivation_exp",
            "line_nb": 234,
            "steps": [
                {
                    "command": [
                        "move=> Ex; case: m; first by rewrite expr0 mulr0n mul0r Derivation1.",
                        "VernacExtend",
                        "3763a4b8db689af316a7372b722bb29806ab4fb6"
                    ]
                },
                {
                    "command": [
                        "elim=> [|m IHm]; first by rewrite mul1r.",
                        "VernacExtend",
                        "3763a4b8db689af316a7372b722bb29806ab4fb6"
                    ]
                },
                {
                    "command": [
                        "rewrite exprS (Derivation_mul derD) //; last by apply: rpredX.",
                        "VernacExtend",
                        "3763a4b8db689af316a7372b722bb29806ab4fb6"
                    ]
                },
                {
                    "command": [
                        "by rewrite mulrC IHm mulrA mulrnAr -exprS -mulrDl.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "separable_elementP",
            "line_nb": 257,
            "steps": [
                {
                    "command": [
                        "apply: (iffP idP) => [sep_x | [f [Kf /(minPoly_dvdp Kf)/dvdpP[g ->]]]].",
                        "VernacExtend",
                        "4bd6fa79b17bcd2bfb7af091fb325367a20385d6"
                    ]
                },
                {
                    "command": [
                        "by exists (minPoly K x); rewrite minPolyOver root_minPoly.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "by rewrite separable_mul => /and3P[].",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "separablePn",
            "line_nb": 277,
            "steps": [
                {
                    "command": [
                        "rewrite separable_nz_der negbK; set f := minPoly K x.",
                        "VernacExtend",
                        "c1f58f36c5711f022b4a54717f37c2782f34a159"
                    ]
                },
                {
                    "command": [
                        "apply: (iffP eqP) => [f'0 | [p Hp [g _ ->]]]; last first.",
                        "VernacExtend",
                        "3763a4b8db689af316a7372b722bb29806ab4fb6"
                    ]
                },
                {
                    "command": [
                        "by rewrite deriv_comp derivXn -scaler_nat (charf0 Hp) scale0r mulr0.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "pose n := adjoin_degree K x; have sz_f: size f = n.+1 := size_minPoly K x.",
                        "VernacExtend",
                        "c09d1274557abc8857ed64eb3450db2da906c185"
                    ]
                },
                {
                    "command": [
                        "have fn1: f`_n = 1 by rewrite -(monicP (monic_minPoly K x)) lead_coefE sz_f.",
                        "VernacExtend",
                        "406cde1174359c53bf162a2a18c4eede395555f9"
                    ]
                },
                {
                    "command": [
                        "have dimKx: (adjoin_degree K x)%:R == 0 :> L.",
                        "VernacExtend",
                        "406cde1174359c53bf162a2a18c4eede395555f9"
                    ]
                },
                {
                    "command": [
                        "by rewrite -(coef0 _ n.-1) -f'0 coef_deriv fn1.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "have /natf0_char[// | p charLp] := dimKx.",
                        "VernacExtend",
                        "406cde1174359c53bf162a2a18c4eede395555f9"
                    ]
                },
                {
                    "command": [
                        "have /dvdnP[r Dn]: (p %| n)%N by rewrite (dvdn_charf charLp).",
                        "VernacExtend",
                        "406cde1174359c53bf162a2a18c4eede395555f9"
                    ]
                },
                {
                    "command": [
                        "exists p => //; exists (\\poly_(i < r.+1) f`_(i * p)).",
                        "VernacExtend",
                        "8a2e2e91876ce6ad2a02a1994a28d948969ddd9f"
                    ]
                },
                {
                    "command": [
                        "by apply: polyOver_poly => i _; rewrite (polyOverP _) ?minPolyOver.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "rewrite comp_polyE size_poly_eq -?Dn ?fn1 ?oner_eq0 //.",
                        "VernacExtend",
                        "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
                    ]
                },
                {
                    "command": [
                        "have pr_p := charf_prime charLp; have p_gt0 := prime_gt0 pr_p.",
                        "VernacExtend",
                        "6e9d14df7d32ea0bf863301df3f6cb2d4e1b8e96"
                    ]
                },
                {
                    "command": [
                        "apply/polyP=> i; rewrite coef_sum.",
                        "VernacExtend",
                        "56c014161b39aecfb3c54301c2409dba4e8e1857"
                    ]
                },
                {
                    "command": [
                        "have [[{i} i ->] | p'i] := altP (@dvdnP p i); last first.",
                        "VernacExtend",
                        "3763a4b8db689af316a7372b722bb29806ab4fb6"
                    ]
                },
                {
                    "command": [
                        "rewrite big1 => [|j _]; last first.",
                        "VernacExtend",
                        "3763a4b8db689af316a7372b722bb29806ab4fb6"
                    ]
                },
                {
                    "command": [
                        "rewrite coefZ -exprM coefXn [_ == _](contraNF _ p'i) ?mulr0 // => /eqP->.",
                        "VernacExtend",
                        "3c42b53d0efc26db114b00541ac5e7fcb29e6aeb"
                    ]
                },
                {
                    "command": [
                        "by rewrite dvdn_mulr.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "rewrite (dvdn_charf charLp) in p'i; apply: mulfI p'i _ _ _.",
                        "VernacExtend",
                        "634a7639ed2fb7caf62757f84400927f5829b7d5"
                    ]
                },
                {
                    "command": [
                        "by rewrite mulr0 mulr_natl; case: i => // i; rewrite -coef_deriv f'0 coef0.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "have [ltri | leir] := leqP r.+1 i.",
                        "VernacExtend",
                        "406cde1174359c53bf162a2a18c4eede395555f9"
                    ]
                },
                {
                    "command": [
                        "rewrite nth_default ?sz_f ?Dn ?ltn_pmul2r ?big1 // => j _.",
                        "VernacExtend",
                        "3c42b53d0efc26db114b00541ac5e7fcb29e6aeb"
                    ]
                },
                {
                    "command": [
                        "rewrite coefZ -exprM coefXn mulnC gtn_eqF ?mulr0 //.",
                        "VernacExtend",
                        "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
                    ]
                },
                {
                    "command": [
                        "by rewrite ltn_pmul2l ?(leq_trans _ ltri).",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "rewrite (bigD1 (Sub i _)) //= big1 ?addr0 => [|j i'j]; last first.",
                        "VernacExtend",
                        "3763a4b8db689af316a7372b722bb29806ab4fb6"
                    ]
                },
                {
                    "command": [
                        "by rewrite coefZ -exprM coefXn mulnC eqn_pmul2l // mulr_natr mulrb ifN_eqC.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "by rewrite coef_poly leir coefZ -exprM coefXn mulnC eqxx mulr1.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "separable_root_der",
            "line_nb": 306,
            "steps": [
                {
                    "command": [
                        "have KpKx': _^`() \\is a polyOver K := polyOver_deriv (minPolyOver K x).",
                        "VernacExtend",
                        "406cde1174359c53bf162a2a18c4eede395555f9"
                    ]
                },
                {
                    "command": [
                        "rewrite separable_nz_der addNb (root_small_adjoin_poly KpKx') ?addbb //.",
                        "VernacExtend",
                        "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
                    ]
                },
                {
                    "command": [
                        "by rewrite (leq_trans (size_poly _ _)) ?size_minPoly.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "Derivation_separable",
            "line_nb": 311,
            "steps": [
                {
                    "command": [
                        "move=> derD sepKx; have:= separable_root_der; rewrite {}sepKx -sub0r => nzKx'x.",
                        "VernacExtend",
                        "607ef7ae8426c7af043bed1740cc4d7c951b3085"
                    ]
                },
                {
                    "command": [
                        "apply: canRL (mulfK nzKx'x) (canRL (addrK _) _); rewrite mulrC addrC.",
                        "VernacExtend",
                        "56c014161b39aecfb3c54301c2409dba4e8e1857"
                    ]
                },
                {
                    "command": [
                        "rewrite -(Derivation_horner derD) ?minPolyxx ?linear0 //.",
                        "VernacExtend",
                        "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
                    ]
                },
                {
                    "command": [
                        "exact: polyOverSv sKxK _ (minPolyOver _ _).",
                        "VernacExtend",
                        "ce637ff86bafca5d8359473e8c02af644dcbdc43"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "extendDerivation_id",
            "line_nb": 332,
            "steps": [
                {
                    "command": [
                        "move=> yK; rewrite lfunE /= Fadjoin_polyC // derivC map_polyC hornerC.",
                        "VernacExtend",
                        "057edeb0967475c7ea5e8c98c449ddc5613eddc1"
                    ]
                },
                {
                    "command": [
                        "by rewrite horner0 mul0r addr0.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "extendDerivation_horner",
            "line_nb": 336,
            "steps": [
                {
                    "command": [
                        "move=> Kp sepKx; have:= separable_root_der; rewrite {}sepKx /= => nz_pKx'x.",
                        "VernacExtend",
                        "607ef7ae8426c7af043bed1740cc4d7c951b3085"
                    ]
                },
                {
                    "command": [
                        "rewrite {-1}(divp_eq p (minPoly K x)) lfunE /= Fadjoin_poly_mod // raddfD /=.",
                        "VernacExtend",
                        "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
                    ]
                },
                {
                    "command": [
                        "rewrite {1}(Derivation_mul_poly derD) ?divp_polyOver ?minPolyOver //.",
                        "VernacExtend",
                        "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
                    ]
                },
                {
                    "command": [
                        "rewrite derivD derivM !{1}hornerD !{1}hornerM minPolyxx !{1}mulr0 !{1}add0r.",
                        "VernacExtend",
                        "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
                    ]
                },
                {
                    "command": [
                        "rewrite mulrDl addrA [_ + (_ * _ * _)]addrC {2}/Dx -mulrA -/Dx.",
                        "VernacExtend",
                        "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
                    ]
                },
                {
                    "command": [
                        "by rewrite [_ / _]mulrC (mulVKf nz_pKx'x) mulrN addKr.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "adjoin_separableP",
            "line_nb": 389,
            "steps": [
                {
                    "command": [
                        "apply: (iffP idP) => [sepKx | -> //]; last exact: memv_adjoin.",
                        "VernacExtend",
                        "3763a4b8db689af316a7372b722bb29806ab4fb6"
                    ]
                },
                {
                    "command": [
                        "move=> _ /Fadjoin_polyP[q Kq ->]; apply/Derivation_separableP=> D derD DK_0.",
                        "VernacExtend",
                        "d6ebf3361f380a12d5c2c9bbb7ea363132c48b36"
                    ]
                },
                {
                    "command": [
                        "apply/subvP=> _ /Fadjoin_polyP[p Kp ->].",
                        "VernacExtend",
                        "4bd6fa79b17bcd2bfb7af091fb325367a20385d6"
                    ]
                },
                {
                    "command": [
                        "rewrite memv_ker -(extendDerivation_id x D (mempx_Fadjoin _ Kp)).",
                        "VernacExtend",
                        "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
                    ]
                },
                {
                    "command": [
                        "have sepFyx: (separable_element <<K; q.[x]>> x).",
                        "VernacExtend",
                        "406cde1174359c53bf162a2a18c4eede395555f9"
                    ]
                },
                {
                    "command": [
                        "by apply: (separable_elementS (subv_adjoin _ _)).",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "have KyxEqKx: (<< <<K; q.[x]>>; x>> = <<K; x>>)%VS.",
                        "VernacExtend",
                        "406cde1174359c53bf162a2a18c4eede395555f9"
                    ]
                },
                {
                    "command": [
                        "apply/eqP; rewrite eqEsubv andbC adjoinSl ?subv_adjoin //=.",
                        "VernacExtend",
                        "56c014161b39aecfb3c54301c2409dba4e8e1857"
                    ]
                },
                {
                    "command": [
                        "apply/FadjoinP/andP; rewrite memv_adjoin andbT.",
                        "VernacExtend",
                        "56c014161b39aecfb3c54301c2409dba4e8e1857"
                    ]
                },
                {
                    "command": [
                        "by apply/FadjoinP/andP; rewrite subv_adjoin mempx_Fadjoin.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "have:= extendDerivationP derD sepFyx; rewrite KyxEqKx => derDx.",
                        "VernacExtend",
                        "8431fc4d2460f7908baa11892c1b26797a3f17b8"
                    ]
                },
                {
                    "command": [
                        "rewrite -horner_comp (Derivation_horner derDx) ?memv_adjoin //; last first.",
                        "VernacExtend",
                        "3763a4b8db689af316a7372b722bb29806ab4fb6"
                    ]
                },
                {
                    "command": [
                        "by apply: (polyOverSv (subv_adjoin _ _)); apply: polyOver_comp.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "set Dx_p := map_poly _; have Dx_p_0 t: t \\is a polyOver K -> (Dx_p t).[x] = 0.",
                        "VernacExtend",
                        "5a669f4ad2118b005921530a069ac8f03fd7f32b"
                    ]
                },
                {
                    "command": [
                        "move/polyOverP=> Kt; congr (_.[x] = 0): (horner0 x); apply/esym/polyP => i.",
                        "VernacExtend",
                        "89de36e5aef0ebd726b6f55b2950d4d03c758898"
                    ]
                },
                {
                    "command": [
                        "have /eqP Dti_0: D t`_i == 0 by rewrite -memv_ker (subvP DK_0) ?Kt.",
                        "VernacExtend",
                        "406cde1174359c53bf162a2a18c4eede395555f9"
                    ]
                },
                {
                    "command": [
                        "by rewrite coef0 coef_map /= {1}extendDerivation_id ?subvP_adjoin.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "rewrite (Derivation_separable derDx sepKx) -/Dx_p Dx_p_0 ?polyOver_comp //.",
                        "VernacExtend",
                        "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
                    ]
                },
                {
                    "command": [
                        "by rewrite add0r mulrCA Dx_p_0 ?minPolyOver ?oppr0 ?mul0r.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "charf0_separable",
            "line_nb": 427,
            "steps": [
                {
                    "command": [
                        "move=> charL0 x; have [n /andP[charLn]] := separable_exponent K x.",
                        "VernacExtend",
                        "ccd83c252dcbae3d56f3d057fcb8217878b51901"
                    ]
                },
                {
                    "command": [
                        "by rewrite (pnat_1 charLn (sub_in_pnat _ charLn)) // => p _; rewrite charL0.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "charf_n_separable",
            "line_nb": 463,
            "steps": [
                {
                    "command": [
                        "rewrite -pi_pdiv; set p := pdiv n => charLn pi_n_p.",
                        "VernacExtend",
                        "80e7cce19c53eb5d5a21aafd83e552d37e23084a"
                    ]
                },
                {
                    "command": [
                        "have charLp: p \\in [char L] := pnatPpi charLn pi_n_p.",
                        "VernacExtend",
                        "406cde1174359c53bf162a2a18c4eede395555f9"
                    ]
                },
                {
                    "command": [
                        "have <-: (n`_p)%N = n by rewrite -(eq_partn n (charf_eq charLp)) part_pnat_id.",
                        "VernacExtend",
                        "406cde1174359c53bf162a2a18c4eede395555f9"
                    ]
                },
                {
                    "command": [
                        "by rewrite p_part lognE -mem_primes pi_n_p -charf_p_separable.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "purely_inseparable_elementP",
            "line_nb": 470,
            "steps": [
                {
                    "command": [
                        "rewrite /purely_inseparable_element.",
                        "VernacExtend",
                        "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
                    ]
                },
                {
                    "command": [
                        "case: ex_minnP => n /andP[charLn /=]; rewrite subfield_closed => sepKxn min_xn.",
                        "VernacExtend",
                        "ba44c9d0281a02110ce54645304e6d990debd9c0"
                    ]
                },
                {
                    "command": [
                        "apply: (iffP idP) => [Kxn | [m charLm Kxm]]; first by exists n.",
                        "VernacExtend",
                        "3763a4b8db689af316a7372b722bb29806ab4fb6"
                    ]
                },
                {
                    "command": [
                        "have{min_xn}: n <= m by rewrite min_xn ?charLm ?base_separable.",
                        "VernacExtend",
                        "406cde1174359c53bf162a2a18c4eede395555f9"
                    ]
                },
                {
                    "command": [
                        "rewrite leq_eqVlt => /predU1P[-> // | ltnm]; pose p := pdiv m.",
                        "VernacExtend",
                        "9d8fbc7ebaadb48200c542591ceec3e0f555a812"
                    ]
                },
                {
                    "command": [
                        "have m_gt1: 1 < m by have [/leq_ltn_trans->] := andP charLn.",
                        "VernacExtend",
                        "406cde1174359c53bf162a2a18c4eede395555f9"
                    ]
                },
                {
                    "command": [
                        "have charLp: p \\in [char L] by rewrite (pnatPpi charLm) ?pi_pdiv.",
                        "VernacExtend",
                        "406cde1174359c53bf162a2a18c4eede395555f9"
                    ]
                },
                {
                    "command": [
                        "have [/p_natP[em Dm] /p_natP[en Dn]]: p.-nat m /\\ p.-nat n.",
                        "VernacExtend",
                        "406cde1174359c53bf162a2a18c4eede395555f9"
                    ]
                },
                {
                    "command": [
                        "by rewrite -!(eq_pnat _ (charf_eq charLp)).",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "rewrite Dn Dm ltn_exp2l ?prime_gt1 ?pdiv_prime // in ltnm.",
                        "VernacExtend",
                        "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
                    ]
                },
                {
                    "command": [
                        "rewrite -(Fadjoin_idP Kxm) Dm -(subnKC ltnm) addSnnS expnD exprM -Dn.",
                        "VernacExtend",
                        "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
                    ]
                },
                {
                    "command": [
                        "by rewrite -charf_p_separable.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "separable_inseparable_element",
            "line_nb": 484,
            "steps": [
                {
                    "command": [
                        "rewrite /purely_inseparable_element; case: ex_minnP => [[|m]] //=.",
                        "VernacExtend",
                        "712d339e99ee17eb7d5033e19ac614eb3ca6b532"
                    ]
                },
                {
                    "command": [
                        "rewrite subfield_closed; case: m => /= [-> //| m _ /(_ 1%N)/implyP/= insepKx].",
                        "VernacExtend",
                        "712d339e99ee17eb7d5033e19ac614eb3ca6b532"
                    ]
                },
                {
                    "command": [
                        "by rewrite (negPf insepKx) (contraNF (@base_separable K x) insepKx).",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "base_inseparable",
            "line_nb": 489,
            "steps": [
                {
                    "command": [
                        "by rewrite -separable_inseparable_element => /andP[].",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "sub_inseparable",
            "line_nb": 492,
            "steps": [
                {
                    "command": [
                        "move/subvP=> sKE /purely_inseparable_elementP[n charLn /sKE Exn].",
                        "VernacExtend",
                        "b1b2cb7a3a617cba67460b4eca1f04de3c1cc716"
                    ]
                },
                {
                    "command": [
                        "by apply/purely_inseparable_elementP; exists n.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "cyclic_or_large",
            "line_nb": 501,
            "steps": [
                {
                    "command": [
                        "move=> nz_z; pose d := adjoin_degree K z.",
                        "VernacExtend",
                        "fef3c4a8f7fcf70b0824f3cce5fb58f2e0ef07fd"
                    ]
                },
                {
                    "command": [
                        "pose h0 (i : 'I_(N ^ d).+1) (j : 'I_d) := (Fadjoin_poly K z (z ^+ i))`_j.",
                        "VernacExtend",
                        "3c5f04de94609049d978298aa02ff35fb35ea7c7"
                    ]
                },
                {
                    "command": [
                        "pose s := undup [seq h0 i j | i <- enum 'I_(N ^ d).+1, j <- enum 'I_d].",
                        "VernacExtend",
                        "3c5f04de94609049d978298aa02ff35fb35ea7c7"
                    ]
                },
                {
                    "command": [
                        "have s_h0 i j: h0 i j \\in s.",
                        "VernacExtend",
                        "406cde1174359c53bf162a2a18c4eede395555f9"
                    ]
                },
                {
                    "command": [
                        "by rewrite mem_undup; apply/allpairsP; exists (i, j); rewrite !mem_enum.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "pose h i := [ffun j => Ordinal (etrans (index_mem _ _) (s_h0 i j))].",
                        "VernacExtend",
                        "3c5f04de94609049d978298aa02ff35fb35ea7c7"
                    ]
                },
                {
                    "command": [
                        "pose h' (f : {ffun 'I_d -> 'I_(size s)}) := \\sum_(j < d) s`_(f j) * z ^+ j.",
                        "VernacExtend",
                        "3c5f04de94609049d978298aa02ff35fb35ea7c7"
                    ]
                },
                {
                    "command": [
                        "have hK i: h' (h i) = z ^+ i.",
                        "VernacExtend",
                        "406cde1174359c53bf162a2a18c4eede395555f9"
                    ]
                },
                {
                    "command": [
                        "have Kz_zi: z ^+ i \\in <<K; z>>%VS by rewrite rpredX ?memv_adjoin.",
                        "VernacExtend",
                        "406cde1174359c53bf162a2a18c4eede395555f9"
                    ]
                },
                {
                    "command": [
                        "rewrite -(Fadjoin_poly_eq Kz_zi) (horner_coef_wide z (size_poly _ _)) -/d.",
                        "VernacExtend",
                        "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
                    ]
                },
                {
                    "command": [
                        "by apply: eq_bigr => j _; rewrite ffunE /= nth_index.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "have [inj_h | ] := altP (@injectiveP _ _ h).",
                        "VernacExtend",
                        "406cde1174359c53bf162a2a18c4eede395555f9"
                    ]
                },
                {
                    "command": [
                        "left; exists s; split=> [|zi_j|]; rewrite ?undup_uniq ?mem_undup //=.",
                        "VernacExtend",
                        "95a439869e1cd9f325085da6e4fed57cb5ffba9b"
                    ]
                },
                {
                    "command": [
                        "by case/allpairsP=> ij [_ _ ->]; apply/polyOverP/Fadjoin_polyOver.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "rewrite -[size s]card_ord -(@ltn_exp2r _ _ d) // -{2}[d]card_ord -card_ffun.",
                        "VernacExtend",
                        "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
                    ]
                },
                {
                    "command": [
                        "by rewrite -[_.+1]card_ord -(card_image inj_h) max_card.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "case/injectivePn=> i1 [i2 i1'2 /(congr1 h')]; rewrite !hK => eq_zi12; right.",
                        "VernacExtend",
                        "0234748959137076e5c5f05b36174698f15935c6"
                    ]
                },
                {
                    "command": [
                        "without loss{i1'2} lti12: i1 i2 eq_zi12 / i1 < i2.",
                        "VernacExtend",
                        "87d5e7b04148ee8f2e4efcc847e0dfadae0aa4cb"
                    ]
                },
                {
                    "command": [
                        "by move=> IH; move: i1'2; rewrite neq_ltn => /orP[]; apply: IH.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "by exists (i2 - i1.+1)%N; rewrite subnSK ?expfB // eq_zi12 divff ?expf_neq0.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "finite_PET",
            "line_nb": 523,
            "steps": [
                {
                    "command": [
                        "have [-> | /cyclic_or_large[|[a Dxa]]] := eqVneq x 0; first 2 [by left].",
                        "VernacExtend",
                        "3763a4b8db689af316a7372b722bb29806ab4fb6"
                    ]
                },
                {
                    "command": [
                        "by rewrite addv0 subfield_closed; right; exists y.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "have [-> | /cyclic_or_large[|[b Dyb]]] := eqVneq y 0; first 2 [by left].",
                        "VernacExtend",
                        "3763a4b8db689af316a7372b722bb29806ab4fb6"
                    ]
                },
                {
                    "command": [
                        "by rewrite addv0 subfield_closed; right; exists x.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "pose h0 (ij : 'I_a.+1 * 'I_b.+1) := x ^+ ij.1 * y ^+ ij.2.",
                        "VernacExtend",
                        "3c5f04de94609049d978298aa02ff35fb35ea7c7"
                    ]
                },
                {
                    "command": [
                        "pose H := <<[set ij | h0 ij == 1%R]>>%G; pose h (u : coset_of H) := h0 (repr u).",
                        "VernacExtend",
                        "311b833fadff89b2f7ed817d3cd7cb6971c96a1e"
                    ]
                },
                {
                    "command": [
                        "have h0M: {morph h0: ij1 ij2 / (ij1 * ij2)%g >-> ij1 * ij2}.",
                        "VernacExtend",
                        "406cde1174359c53bf162a2a18c4eede395555f9"
                    ]
                },
                {
                    "command": [
                        "by rewrite /h0 => [] [i1 j1] [i2 j2] /=; rewrite mulrACA -!exprD !expr_mod.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "have memH ij: (ij \\in H) = (h0 ij == 1).",
                        "VernacExtend",
                        "406cde1174359c53bf162a2a18c4eede395555f9"
                    ]
                },
                {
                    "command": [
                        "rewrite /= gen_set_id ?inE //; apply/group_setP; rewrite inE [h0 _]mulr1.",
                        "VernacExtend",
                        "fe8f197e86415fc7f0a74eda9d312128b9473eda"
                    ]
                },
                {
                    "command": [
                        "by split=> // ? ?; rewrite !inE h0M => /eqP-> /eqP->; rewrite mulr1.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "have nH ij: ij \\in 'N(H)%g.",
                        "VernacExtend",
                        "406cde1174359c53bf162a2a18c4eede395555f9"
                    ]
                },
                {
                    "command": [
                        "by apply/(subsetP (cent_sub _))/centP=> ij1 _; congr (_, _); rewrite Zp_mulgC.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "have hE ij: h (coset H ij) = h0 ij.",
                        "VernacExtend",
                        "406cde1174359c53bf162a2a18c4eede395555f9"
                    ]
                },
                {
                    "command": [
                        "rewrite /h val_coset //; case: repr_rcosetP => ij1.",
                        "VernacExtend",
                        "712d339e99ee17eb7d5033e19ac614eb3ca6b532"
                    ]
                },
                {
                    "command": [
                        "by rewrite memH h0M => /eqP->; rewrite mul1r.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "have h1: h 1%g = 1 by rewrite /h repr_coset1 [h0 _]mulr1.",
                        "VernacExtend",
                        "406cde1174359c53bf162a2a18c4eede395555f9"
                    ]
                },
                {
                    "command": [
                        "have hM: {morph h: u v / (u * v)%g >-> u * v}.",
                        "VernacExtend",
                        "406cde1174359c53bf162a2a18c4eede395555f9"
                    ]
                },
                {
                    "command": [
                        "by do 2![move=> u; have{u} [? _ ->] := cosetP u]; rewrite -morphM // !hE h0M.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "have /cyclicP[w defW]: cyclic [set: coset_of H].",
                        "VernacExtend",
                        "406cde1174359c53bf162a2a18c4eede395555f9"
                    ]
                },
                {
                    "command": [
                        "apply: field_mul_group_cyclic (in2W hM) _ => u _; have [ij _ ->] := cosetP u.",
                        "VernacExtend",
                        "c574574294cc642b01d157e4c8f21ac2f90e4b5d"
                    ]
                },
                {
                    "command": [
                        "by split=> [/eqP | -> //]; rewrite hE -memH => /coset_id.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "have Kw_h ij t: h0 ij = t -> t \\in <<K; h w>>%VS.",
                        "VernacExtend",
                        "406cde1174359c53bf162a2a18c4eede395555f9"
                    ]
                },
                {
                    "command": [
                        "have /cycleP[k Dk]: coset H ij \\in <[w]>%g by rewrite -defW inE.",
                        "VernacExtend",
                        "406cde1174359c53bf162a2a18c4eede395555f9"
                    ]
                },
                {
                    "command": [
                        "rewrite -hE {}Dk => <-; elim: k => [|k IHk]; first by rewrite h1 rpred1.",
                        "VernacExtend",
                        "3763a4b8db689af316a7372b722bb29806ab4fb6"
                    ]
                },
                {
                    "command": [
                        "by rewrite expgS hM rpredM // memv_adjoin.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "right; exists (h w); apply/eqP; rewrite eqEsubv !(sameP FadjoinP andP).",
                        "VernacExtend",
                        "bf33779514f5af1c6c0fd88ddd65fa40651b2038"
                    ]
                },
                {
                    "command": [
                        "rewrite subv_adjoin (subv_trans (subv_adjoin K y)) ?subv_adjoin //=.",
                        "VernacExtend",
                        "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
                    ]
                },
                {
                    "command": [
                        "rewrite (Kw_h (0, inZp 1)) 1?(Kw_h (inZp 1, 0)) /h0 ?mulr1 ?mul1r ?expr_mod //=.",
                        "VernacExtend",
                        "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
                    ]
                },
                {
                    "command": [
                        "by rewrite rpredM ?rpredX ?memv_adjoin // subvP_adjoin ?memv_adjoin.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "adjoin_separable",
            "line_nb": 582,
            "steps": [
                {
                    "command": [
                        "have /Derivation_separableP derKy := sepKy => /Derivation_separableP derKy_x.",
                        "VernacExtend",
                        "3c42b53d0efc26db114b00541ac5e7fcb29e6aeb"
                    ]
                },
                {
                    "command": [
                        "have [z defKz] := Primitive_Element_Theorem.",
                        "VernacExtend",
                        "406cde1174359c53bf162a2a18c4eede395555f9"
                    ]
                },
                {
                    "command": [
                        "suffices /adjoin_separableP: separable_element K z.",
                        "VernacExtend",
                        "290ed488b5562e885aa2cac56f3a69b4faa0eaa6"
                    ]
                },
                {
                    "command": [
                        "by apply; rewrite -defKz memv_adjoin.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "apply/Derivation_separableP=> D; rewrite -defKz => derKxyD DK_0.",
                        "VernacExtend",
                        "5fce7e5361004176d6b434b36b4623c7387f70bb"
                    ]
                },
                {
                    "command": [
                        "suffices derKyD: Derivation <<K; y>>%VS D by rewrite derKy_x // derKy.",
                        "VernacExtend",
                        "290ed488b5562e885aa2cac56f3a69b4faa0eaa6"
                    ]
                },
                {
                    "command": [
                        "by apply: DerivationS derKxyD; apply: subv_adjoin.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "separable_add",
            "line_nb": 605,
            "steps": [
                {
                    "command": [
                        "move/(separable_elementS (subv_adjoin K y))=> sepKy_x sepKy.",
                        "VernacExtend",
                        "b1b2cb7a3a617cba67460b4eca1f04de3c1cc716"
                    ]
                },
                {
                    "command": [
                        "have [z defKz] := Primitive_Element_Theorem x sepKy.",
                        "VernacExtend",
                        "406cde1174359c53bf162a2a18c4eede395555f9"
                    ]
                },
                {
                    "command": [
                        "have /(adjoin_separableP _): x + y \\in <<K; z>>%VS.",
                        "VernacExtend",
                        "406cde1174359c53bf162a2a18c4eede395555f9"
                    ]
                },
                {
                    "command": [
                        "by rewrite -defKz rpredD ?memv_adjoin // subvP_adjoin ?memv_adjoin.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "apply; apply: adjoin_separable sepKy (adjoin_separable sepKy_x _).",
                        "VernacExtend",
                        "ca95919851f741ec38f9dba657fdfd7504d0d9f8"
                    ]
                },
                {
                    "command": [
                        "by rewrite defKz base_separable ?memv_adjoin.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "separable_sum",
            "line_nb": 613,
            "steps": [
                {
                    "command": [
                        "move=> sepKi.",
                        "VernacExtend",
                        "b1b2cb7a3a617cba67460b4eca1f04de3c1cc716"
                    ]
                },
                {
                    "command": [
                        "by elim/big_ind: _; [apply/base_separable/mem0v | apply: separable_add |].",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "inseparable_sum",
            "line_nb": 623,
            "steps": [
                {
                    "command": [
                        "move=> insepKi.",
                        "VernacExtend",
                        "b1b2cb7a3a617cba67460b4eca1f04de3c1cc716"
                    ]
                },
                {
                    "command": [
                        "by elim/big_ind: _; [apply/base_inseparable/mem0v | apply: inseparable_add |].",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "separableP",
            "line_nb": 627,
            "steps": [
                {
                    "command": [
                        "apply/(iffP idP)=> [/allP|] sepK_E; last by apply/allP=> x /vbasis_mem/sepK_E.",
                        "VernacExtend",
                        "3763a4b8db689af316a7372b722bb29806ab4fb6"
                    ]
                },
                {
                    "command": [
                        "move=> y /coord_vbasis->; apply/separable_sum=> i _.",
                        "VernacExtend",
                        "d6ebf3361f380a12d5c2c9bbb7ea363132c48b36"
                    ]
                },
                {
                    "command": [
                        "have: separable_element K (vbasis E)`_i by apply/sepK_E/memt_nth.",
                        "VernacExtend",
                        "406cde1174359c53bf162a2a18c4eede395555f9"
                    ]
                },
                {
                    "command": [
                        "by move/adjoin_separableP; apply; rewrite rpredZ ?memv_adjoin.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "purely_inseparableP",
            "line_nb": 633,
            "steps": [
                {
                    "command": [
                        "apply/(iffP idP)=> [/allP|] sep'K_E; last by apply/allP=> x /vbasis_mem/sep'K_E.",
                        "VernacExtend",
                        "3763a4b8db689af316a7372b722bb29806ab4fb6"
                    ]
                },
                {
                    "command": [
                        "move=> y /coord_vbasis->; apply/inseparable_sum=> i _.",
                        "VernacExtend",
                        "d6ebf3361f380a12d5c2c9bbb7ea363132c48b36"
                    ]
                },
                {
                    "command": [
                        "have: purely_inseparable_element K (vbasis E)`_i by apply/sep'K_E/memt_nth.",
                        "VernacExtend",
                        "406cde1174359c53bf162a2a18c4eede395555f9"
                    ]
                },
                {
                    "command": [
                        "case/purely_inseparable_elementP=> n charLn K_Ein.",
                        "VernacExtend",
                        "e00fff71ff314c991514fc71c41a3556702e444a"
                    ]
                },
                {
                    "command": [
                        "by apply/purely_inseparable_elementP; exists n; rewrite // exprZn rpredZ.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "adjoin_separable_eq",
            "line_nb": 640,
            "steps": [
                {
                    "command": [
                        "exact: sameP adjoin_separableP separableP.",
                        "VernacExtend",
                        "ce637ff86bafca5d8359473e8c02af644dcbdc43"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "separable_generator_mem",
            "line_nb": 675,
            "steps": [
                {
                    "command": [
                        "by rewrite /separable_generator; case: (locked _) => ? [].",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "separable_generatorP",
            "line_nb": 678,
            "steps": [
                {
                    "command": [
                        "by rewrite /separable_generator; case: (locked _) => ? [].",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "separable_generator_maximal",
            "line_nb": 681,
            "steps": [
                {
                    "command": [
                        "by rewrite /separable_generator; case: (locked _).",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "sub_adjoin_separable_generator",
            "line_nb": 684,
            "steps": [
                {
                    "command": [
                        "move/separableP=> sepK_E; apply/subvP=> v Ev.",
                        "VernacExtend",
                        "d6ebf3361f380a12d5c2c9bbb7ea363132c48b36"
                    ]
                },
                {
                    "command": [
                        "rewrite -separable_inseparable_element.",
                        "VernacExtend",
                        "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
                    ]
                },
                {
                    "command": [
                        "have /purely_inseparableP-> // := separable_generator_maximal E K.",
                        "VernacExtend",
                        "406cde1174359c53bf162a2a18c4eede395555f9"
                    ]
                },
                {
                    "command": [
                        "by rewrite (separable_elementS _ (sepK_E _ Ev)) // subv_adjoin.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "eq_adjoin_separable_generator",
            "line_nb": 690,
            "steps": [
                {
                    "command": [
                        "move=> sepK_E sKE; apply/eqP; rewrite eqEsubv sub_adjoin_separable_generator //.",
                        "VernacExtend",
                        "f7feb259d6220ca40e8a86b90bd06f137aa140ac"
                    ]
                },
                {
                    "command": [
                        "by apply/FadjoinP/andP; rewrite sKE separable_generator_mem.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "separable_refl",
            "line_nb": 694,
            "steps": [
                {
                    "command": [
                        "by apply/separableP; apply: base_separable.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "separable_trans",
            "line_nb": 697,
            "steps": [
                {
                    "command": [
                        "move/sub_adjoin_separable_generator.",
                        "VernacExtend",
                        "b1b2cb7a3a617cba67460b4eca1f04de3c1cc716"
                    ]
                },
                {
                    "command": [
                        "set x := separable_generator K M => sMKx /separableP sepM_E.",
                        "VernacExtend",
                        "3c42b53d0efc26db114b00541ac5e7fcb29e6aeb"
                    ]
                },
                {
                    "command": [
                        "apply/separableP => w /sepM_E/(separable_elementS sMKx).",
                        "VernacExtend",
                        "4bd6fa79b17bcd2bfb7af091fb325367a20385d6"
                    ]
                },
                {
                    "command": [
                        "case/strong_Primitive_Element_Theorem => _ _ -> //.",
                        "VernacExtend",
                        "e00fff71ff314c991514fc71c41a3556702e444a"
                    ]
                },
                {
                    "command": [
                        "exact: separable_generatorP.",
                        "VernacExtend",
                        "ce637ff86bafca5d8359473e8c02af644dcbdc43"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "separableS",
            "line_nb": 704,
            "steps": [
                {
                    "command": [
                        "move=> sK12 /subvP sE21 /separableP sepK1_E1.",
                        "VernacExtend",
                        "b1b2cb7a3a617cba67460b4eca1f04de3c1cc716"
                    ]
                },
                {
                    "command": [
                        "by apply/separableP=> y /sE21/sepK1_E1/(separable_elementS sK12).",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "separableSl",
            "line_nb": 708,
            "steps": [
                {
                    "command": [
                        "by move/separableS; apply.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "separableSr",
            "line_nb": 711,
            "steps": [
                {
                    "command": [
                        "exact: separableS.",
                        "VernacExtend",
                        "ce637ff86bafca5d8359473e8c02af644dcbdc43"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "separable_Fadjoin_seq",
            "line_nb": 714,
            "steps": [
                {
                    "command": [
                        "elim/last_ind: rs => [|s x IHs] in K *.",
                        "VernacExtend",
                        "e686a1895f1799b840b76242f931100819a9ad6c"
                    ]
                },
                {
                    "command": [
                        "by rewrite adjoin_nil subfield_closed separable_refl.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "rewrite all_rcons adjoin_rcons => /andP[sepKx /IHs/separable_trans-> //].",
                        "VernacExtend",
                        "3c42b53d0efc26db114b00541ac5e7fcb29e6aeb"
                    ]
                },
                {
                    "command": [
                        "by rewrite -adjoin_separable_eq (separable_elementS _ sepKx) ?subv_adjoin_seq.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "purely_inseparable_refl",
            "line_nb": 720,
            "steps": [
                {
                    "command": [
                        "by apply/purely_inseparableP; apply: base_inseparable.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "purely_inseparable_trans",
            "line_nb": 723,
            "steps": [
                {
                    "command": [
                        "have insepP := purely_inseparableP => /insepP insepK_M /insepP insepM_E.",
                        "VernacExtend",
                        "3c42b53d0efc26db114b00541ac5e7fcb29e6aeb"
                    ]
                },
                {
                    "command": [
                        "have insepPe := purely_inseparable_elementP.",
                        "VernacExtend",
                        "406cde1174359c53bf162a2a18c4eede395555f9"
                    ]
                },
                {
                    "command": [
                        "apply/insepP=> x /insepM_E/insepPe[n charLn /insepK_M/insepPe[m charLm Kxnm]].",
                        "VernacExtend",
                        "4bd6fa79b17bcd2bfb7af091fb325367a20385d6"
                    ]
                },
                {
                    "command": [
                        "by apply/insepPe; exists (n * m)%N; rewrite ?exprM // pnat_mul charLn charLm.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        }
    ]
}