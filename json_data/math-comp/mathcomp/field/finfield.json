{
    "filename": "mathcomp/field/finfield.v",
    "coq_project": "math-comp",
    "vernac_cmds": [
        [
            "Require Import mathcomp.ssreflect.ssreflect.",
            "VernacRequire",
            "85e251063dc2b5a9653f7bb76dcd176ed36b42a9"
        ],
        [
            "From mathcomp Require Import ssrfun ssrbool eqtype ssrnat seq choice fintype div.",
            "VernacRequire",
            "7220ddb2f90c8280c97dd70a97bc08b493915e98"
        ],
        [
            "From mathcomp Require Import tuple bigop prime finset fingroup ssralg poly polydiv.",
            "VernacRequire",
            "50d10f7cb41e80c3918e8356d208b9a0e1d56197"
        ],
        [
            "From mathcomp Require Import morphism action finalg zmodp cyclic center pgroup abelian.",
            "VernacRequire",
            "a763cfe4add9427ebf69f3bee4ee4ce9a85f8fd8"
        ],
        [
            "From mathcomp Require Import matrix mxpoly vector falgebra fieldext separable galois.",
            "VernacRequire",
            "99cd34bb4401bdba1856ddea33301c111b502742"
        ],
        [
            "From mathcomp Require ssrnum ssrint algC cyclotomic.",
            "VernacRequire",
            "ab417d13bc8fb15b0678da6645639115fe5b8278"
        ],
        [
            "Set Implicit Arguments.",
            "VernacSetOption",
            "9e84ff8896f028601d8aded48c1d4aebe60aa584"
        ],
        [
            "Unset Strict Implicit.",
            "VernacUnsetOption",
            "2842adaf6959318f2042805935c46f513bdc0348"
        ],
        [
            "Unset Printing Implicit Defensive.",
            "VernacUnsetOption",
            "444e5f0be4b25d9b1fd556943a447ec10046d151"
        ],
        [
            "Import GroupScope GRing.Theory FinRing.Theory.",
            "VernacImport",
            "b564e8b643ac1677c7a854dfcd70c16dcc198df6"
        ],
        [
            "Local Open Scope ring_scope.",
            "VernacOpenCloseScope",
            "fb9da4a291533574d328be8c8a69d90a14641928"
        ],
        [
            "Section FinRing.",
            "VernacBeginSection",
            "dbdb98053b9dfe46b374802bca84b66b7d26edf4"
        ],
        [
            "Variable R : finRingType.",
            "VernacAssumption",
            "0b9516943677968f3b346ea66b832e501981521a"
        ],
        [
            "Lemma finRing_nontrivial : [set: R] != 1%g.",
            "VernacStartTheoremProof",
            "5321eee2c97c84dca21c23d8e551b94450a60b98"
        ],
        [
            "by apply/trivgPn; exists 1; rewrite ?inE ?oner_neq0.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma finRing_gt1 : 1 < #|R|.",
            "VernacStartTheoremProof",
            "0677c03cc16a6f33a437e73f62179745a6ea0ca4"
        ],
        [
            "by rewrite -cardsT cardG_gt1 finRing_nontrivial.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "End FinRing.",
            "VernacEndSegment",
            "ce73f6b0e0d9c68a0fb0e0d76cac33e2577aa268"
        ],
        [
            "Section FinField.",
            "VernacBeginSection",
            "17a880fa6b27c1ab3775a06b792ccc3215a58278"
        ],
        [
            "Variable F : finFieldType.",
            "VernacAssumption",
            "8f6b88f2458ff412a0390b1a919310e1d22b5745"
        ],
        [
            "Lemma card_finField_unit : #|[set: {unit F}]| = #|F|.-1.",
            "VernacStartTheoremProof",
            "0367e3f0fdf88ed163b4ccad7013059bc7df1a48"
        ],
        [
            "by rewrite -(cardC1 0) cardsT card_sub; apply: eq_card => x; rewrite unitfE.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Definition finField_unit x (nz_x : x != 0) := FinRing.unit F (etrans (unitfE x) nz_x).",
            "VernacDefinition",
            "685ab0b4c4f128f27d08cc4eea0fb19e390e8d19"
        ],
        [
            "Lemma expf_card x : x ^+ #|F| = x :> F.",
            "VernacStartTheoremProof",
            "8f3903fdb47890744c1d46215e3f281fc90e7117"
        ],
        [
            "rewrite -[RHS]mulr1 -(ltn_predK (finRing_gt1 F)) exprS.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "apply/eqP; rewrite -subr_eq0 -mulrBr mulf_eq0 subr_eq0 -implyNb -unitfE.",
            "VernacExtend",
            "56c014161b39aecfb3c54301c2409dba4e8e1857"
        ],
        [
            "apply/implyP=> Ux; rewrite -(val_unitX _ (Sub x _)) -val_unit1 val_eqE.",
            "VernacExtend",
            "56c014161b39aecfb3c54301c2409dba4e8e1857"
        ],
        [
            "by rewrite -order_dvdn -card_finField_unit order_dvdG ?inE.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma finField_genPoly : 'X^#|F| - 'X = \\prod_x ('X - x%:P) :> {poly F}.",
            "VernacStartTheoremProof",
            "abc919764e46cbd6a15a23c2c7ae1d01c28bb646"
        ],
        [
            "set n := #|F|; set oppX := - 'X; set pF := LHS.",
            "VernacExtend",
            "6f9acefb35d3c4fa4eb78a0e027eeb287acf16a4"
        ],
        [
            "have le_oppX_n: size oppX <= n by rewrite size_opp size_polyX finRing_gt1.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "have: size pF = (size (enum F)).+1 by rewrite -cardE size_addl size_polyXn.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "move/all_roots_prod_XsubC->; last by rewrite uniq_rootsE enum_uniq.",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "by rewrite enumT lead_coefDl ?size_polyXn // lead_coefXn scale1r.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "by apply/allP=> x _; rewrite rootE !hornerE hornerXn expf_card subrr.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma finCharP : {p | prime p & p \\in [char F]}.",
            "VernacStartTheoremProof",
            "2098c216d6e36a5f497212c2c4ecddd7a15d7716"
        ],
        [
            "pose e := exponent [set: F]; have e_gt0: e > 0 by apply: exponent_gt0.",
            "VernacExtend",
            "c09d1274557abc8857ed64eb3450db2da906c185"
        ],
        [
            "have: e%:R == 0 :> F by rewrite -zmodXgE expg_exponent // inE.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "by case/natf0_char/sigW=> // p charFp; exists p; rewrite ?(charf_prime charFp).",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma finField_is_abelem : is_abelem [set: F].",
            "VernacStartTheoremProof",
            "6039083e3098fac480cd7bd8aa1b38b51a5d7e06"
        ],
        [
            "have [p pr_p charFp] := finCharP.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "by apply/is_abelemP; exists p; last apply: fin_ring_char_abelem.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma card_finCharP p n : #|F| = (p ^ n)%N -> prime p -> p \\in [char F].",
            "VernacStartTheoremProof",
            "9460f3ddcb62349626a347dd39d66e7c165363ec"
        ],
        [
            "move=> oF pr_p; rewrite inE pr_p -order_dvdn.",
            "VernacExtend",
            "057edeb0967475c7ea5e8c98c449ddc5613eddc1"
        ],
        [
            "rewrite (abelem_order_p finField_is_abelem) ?inE ?oner_neq0 //=.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "have n_gt0: n > 0 by rewrite -(ltn_exp2l _ _ (prime_gt1 pr_p)) -oF finRing_gt1.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "by rewrite cardsT oF -(prednK n_gt0) pdiv_pfactor.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "End FinField.",
            "VernacEndSegment",
            "071f5a46120755b5140c06ba1f3908b978eae474"
        ],
        [
            "Section CardVspace.",
            "VernacBeginSection",
            "54ee59996d703cb5858002f86605f5c3918be88a"
        ],
        [
            "Variables (F : finFieldType) (T : finType).",
            "VernacAssumption",
            "f57f35d480cf888a0ba8b249045f07dcd094bb26"
        ],
        [
            "Section Vector.",
            "VernacBeginSection",
            "b8a3bdfce0d551acbbd9ab61b8e5399d0120c2d9"
        ],
        [
            "Variable cvT : Vector.class_of F T.",
            "VernacAssumption",
            "b33ec04cb7ae83eddf6d1516d683a2635d16d26a"
        ],
        [
            "Let vT := Vector.Pack (Phant F) cvT.",
            "VernacDefinition",
            "7bd3b0596893438276b4d091f11834df009fe5bc"
        ],
        [
            "Lemma card_vspace (V : {vspace vT}) : #|V| = (#|F| ^ \\dim V)%N.",
            "VernacStartTheoremProof",
            "44919ae697bad1de65a85288a9d6e2c1e1a06d94"
        ],
        [
            "set n := \\dim V; pose V2rV v := \\row_i coord (vbasis V) i v.",
            "VernacExtend",
            "dda58a04ca4da9adf6d016079f462c4d6ff69ca8"
        ],
        [
            "pose rV2V (rv : 'rV_n) := \\sum_i rv 0 i *: (vbasis V)`_i.",
            "VernacExtend",
            "3c5f04de94609049d978298aa02ff35fb35ea7c7"
        ],
        [
            "have rV2V_K: cancel rV2V V2rV.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "have freeV: free (vbasis V) := basis_free (vbasisP V).",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "by move=> rv; apply/rowP=> i; rewrite mxE coord_sum_free.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "rewrite -[n]mul1n -card_matrix -(card_imset _ (can_inj rV2V_K)).",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "apply: eq_card => v; apply/idP/imsetP=> [/coord_vbasis-> | [rv _ ->]].",
            "VernacExtend",
            "8d9dae45eeb3a769b8a865cef8ae476451f63802"
        ],
        [
            "by exists (V2rV v) => //; apply: eq_bigr => i _; rewrite mxE.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "by apply: (@rpred_sum vT) => i _; rewrite rpredZ ?vbasis_mem ?memt_nth.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma card_vspacef : #|{: vT}%VS| = #|T|.",
            "VernacStartTheoremProof",
            "f2b9433d53ba5bca9ac6a96d26a79aa68c6f5040"
        ],
        [
            "by apply: eq_card => v; rewrite (@memvf _ vT).",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "End Vector.",
            "VernacEndSegment",
            "604ff1634b93fff5783f9ce821f3bc0c46f688fb"
        ],
        [
            "Variable caT : Falgebra.class_of F T.",
            "VernacAssumption",
            "1bc9c3c28c77a75c8bce1142a991964245958ab8"
        ],
        [
            "Let aT := Falgebra.Pack (Phant F) caT.",
            "VernacDefinition",
            "31ef783dc5e0d7703bd16bbf22848c2a82676a1a"
        ],
        [
            "Lemma card_vspace1 : #|(1%VS : {vspace aT})| = #|F|.",
            "VernacStartTheoremProof",
            "295dab917890425d7c29aeb8ce9cb1314e8994a1"
        ],
        [
            "by rewrite card_vspace (dimv1 aT).",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "End CardVspace.",
            "VernacEndSegment",
            "4f0296ea81bfed5fec9c7cbb1fee03b2152c893e"
        ],
        [
            "Lemma VectFinMixin (R : finRingType) (vT : vectType R) : Finite.mixin_of vT.",
            "VernacStartTheoremProof",
            "ef3b0ea884048dd4ccf982523cbc8a902b178508"
        ],
        [
            "have v2rK := @Vector.InternalTheory.v2rK R vT.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "exact: CanFinMixin (v2rK : @cancel _ (CountType vT (CanCountMixin v2rK)) _ _).",
            "VernacExtend",
            "ce637ff86bafca5d8359473e8c02af644dcbdc43"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Module FinVector.",
            "VernacDefineModule",
            "d82d8c0b128a7e89f9c2bcd8f15ce6d2ce46a646"
        ],
        [
            "Section Interfaces.",
            "VernacBeginSection",
            "59fbdb2cb1df281a58d0bf46d506d70b8ff1b8ac"
        ],
        [
            "Variable F : finFieldType.",
            "VernacAssumption",
            "8f6b88f2458ff412a0390b1a919310e1d22b5745"
        ],
        [
            "Implicit Types (vT : vectType F) (aT : FalgType F) (fT : fieldExtType F).",
            "VernacReserve",
            "45d4dd5915a63f33c95bba667cab03f4694315fe"
        ],
        [
            "Canonical vect_finType vT := FinType vT (VectFinMixin vT).",
            "VernacDefinition",
            "a287792aaf7b0fcc465c2e8699124ecc5b17afe3"
        ],
        [
            "Canonical Falg_finType aT := FinType aT (VectFinMixin aT).",
            "VernacDefinition",
            "9dba6439c472066cfa4e03887b8dd86ef9b269e3"
        ],
        [
            "Canonical fieldExt_finType fT := FinType fT (VectFinMixin fT).",
            "VernacDefinition",
            "12999316c15d1e8f768551a4e8fc674791786140"
        ],
        [
            "Canonical Falg_finRingType aT := [finRingType of aT].",
            "VernacDefinition",
            "07d67dee587af58f0f0c231005c4ad6f6dd207d3"
        ],
        [
            "Canonical fieldExt_finRingType fT := [finRingType of fT].",
            "VernacDefinition",
            "3c1a92ce438286c08a2e968070602e801d7ba6b0"
        ],
        [
            "Canonical fieldExt_finFieldType fT := [finFieldType of fT].",
            "VernacDefinition",
            "5643853b86cdfb96a8872256de2364c8bf9ce8b9"
        ],
        [
            "Lemma finField_splittingField_axiom fT : SplittingField.axiom fT.",
            "VernacStartTheoremProof",
            "f7d7a28933eed3f4eab3531c65c66c04b924b6a4"
        ],
        [
            "exists ('X^#|fT| - 'X); first by rewrite rpredB 1?rpredX ?polyOverX.",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "exists (enum fT); first by rewrite enumT finField_genPoly eqpxx.",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "by apply/vspaceP=> x; rewrite memvf seqv_sub_adjoin ?mem_enum.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "End Interfaces.",
            "VernacEndSegment",
            "5c327dc4e89032b1dcbba534035a0f6d20411847"
        ],
        [
            "End FinVector.",
            "VernacEndSegment",
            "bac4d7f41580516d604138982c9fdae33bb47d5e"
        ],
        [
            "Notation FinFieldExtType := FinVector.fieldExt_finFieldType.",
            "VernacSyntacticDefinition",
            "e370cdcca42b1f4721a22840aae2fe368c083df2"
        ],
        [
            "Notation FinSplittingFieldAxiom := (FinVector.finField_splittingField_axiom _).",
            "VernacSyntacticDefinition",
            "a532e00d68c866ad165fd29194bf0aeeb987b930"
        ],
        [
            "Notation FinSplittingFieldType F L := (SplittingFieldType F L FinSplittingFieldAxiom).",
            "VernacSyntacticDefinition",
            "6cc6fa2b3f2d70c1e13a996f53bee483f1549986"
        ],
        [
            "Section PrimeChar.",
            "VernacBeginSection",
            "91a411984d354123d4736fa71e1ae8f05777e2d4"
        ],
        [
            "Variable p : nat.",
            "VernacAssumption",
            "981ac4bb8674cf2cc0a9bf436584a314bb426aa4"
        ],
        [
            "Section PrimeCharRing.",
            "VernacBeginSection",
            "3082131e18f07769fb0cf54b2721fffb5919fbd3"
        ],
        [
            "Variable R0 : ringType.",
            "VernacAssumption",
            "ebea74231c8f3f006ec8c79591b5ec315d5476ec"
        ],
        [
            "Definition PrimeCharType of p \\in [char R0] : predArgType := R0.",
            "VernacDefinition",
            "da1ce9fbe18fe273724cd76ca618c49b217e240d"
        ],
        [
            "Hypothesis charRp : p \\in [char R0].",
            "VernacAssumption",
            "522b4ee2013101ca1febbf3a33b271fdc0406f55"
        ],
        [
            "Local Notation R := (PrimeCharType charRp).",
            "VernacSyntacticDefinition",
            "14f942974be942998380b15c9fac79ab5044e5b5"
        ],
        [
            "Implicit Types (a b : 'F_p) (x y : R).",
            "VernacReserve",
            "bacadc704ff555776e93a83d7e7e6c42b82b49ca"
        ],
        [
            "Canonical primeChar_eqType := [eqType of R].",
            "VernacDefinition",
            "203b17bf0147a6cbef7fa600a214733f191678a3"
        ],
        [
            "Canonical primeChar_choiceType := [choiceType of R].",
            "VernacDefinition",
            "3b2e286aba3eaf8e335ae4f1355531267efb3b3d"
        ],
        [
            "Canonical primeChar_zmodType := [zmodType of R].",
            "VernacDefinition",
            "32b7157c0eb15a831ee421fe29769c88fc73e52c"
        ],
        [
            "Canonical primeChar_ringType := [ringType of R].",
            "VernacDefinition",
            "29ae6334015a542e5a4d210a0dbd86a421c6fefd"
        ],
        [
            "Definition primeChar_scale a x := a%:R * x.",
            "VernacDefinition",
            "66af6658878af1ac565448e45c0c9514e6cc8025"
        ],
        [
            "Local Infix \"*p:\" := primeChar_scale (at level 40).",
            "VernacInfix",
            "43935ead930238ea81d36e728e7cdb141cc86ea2"
        ],
        [
            "Let natrFp n : (inZp n : 'F_p)%:R = n%:R :> R.",
            "VernacDefinition",
            "cc43a6c845efc80b34dd56caf499215329950811"
        ],
        [
            "rewrite [in RHS](divn_eq n p) natrD mulrnA (mulrn_char charRp) add0r.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "by rewrite /= (Fp_cast (charf_prime charRp)).",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma primeChar_scaleA a b x : a *p: (b *p: x) = (a * b) *p: x.",
            "VernacStartTheoremProof",
            "80aad34cbf983f5a9a6bb6c325f8741702b60294"
        ],
        [
            "by rewrite /primeChar_scale mulrA -natrM natrFp.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma primeChar_scale1 : left_id 1 primeChar_scale.",
            "VernacStartTheoremProof",
            "560b9bc137defe937d1c2f27c03153163b0f230d"
        ],
        [
            "by move=> x; rewrite /primeChar_scale mul1r.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma primeChar_scaleDr : right_distributive primeChar_scale +%R.",
            "VernacStartTheoremProof",
            "6046863217555c527110e63fd72fa5a8589eca24"
        ],
        [
            "by move=> a x y /=; rewrite /primeChar_scale mulrDr.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma primeChar_scaleDl x : {morph primeChar_scale^~ x: a b / a + b}.",
            "VernacStartTheoremProof",
            "f3e4dba9465bb77208e00e4104fc8bc3899798ec"
        ],
        [
            "by move=> a b; rewrite /primeChar_scale natrFp natrD mulrDl.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Definition primeChar_lmodMixin := LmodMixin primeChar_scaleA primeChar_scale1 primeChar_scaleDr primeChar_scaleDl.",
            "VernacDefinition",
            "1fdb5ffc399c646e53808f12327e9c60cad54f7d"
        ],
        [
            "Canonical primeChar_lmodType := LmodType 'F_p R primeChar_lmodMixin.",
            "VernacDefinition",
            "853db5c02d4671fb5637e44b640e2d13adb6bc4d"
        ],
        [
            "Lemma primeChar_scaleAl : GRing.Lalgebra.axiom ( *%R : R -> R -> R).",
            "VernacStartTheoremProof",
            "cc2b6d91c4354bf28dce99613f79542f4fee9205"
        ],
        [
            "by move=> a x y; apply: mulrA.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Canonical primeChar_LalgType := LalgType 'F_p R primeChar_scaleAl.",
            "VernacDefinition",
            "31367463e0d068c4cc5f707d98dc008838cc18c0"
        ],
        [
            "Lemma primeChar_scaleAr : GRing.Algebra.axiom primeChar_LalgType.",
            "VernacStartTheoremProof",
            "33faf40570857810a1a7c05c9d209ef70ac35981"
        ],
        [
            "by move=> a x y; rewrite ![a *: _]mulr_natl mulrnAr.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Canonical primeChar_algType := AlgType 'F_p R primeChar_scaleAr.",
            "VernacDefinition",
            "ec512acd48b4cbee8dca83f2461a1b79e6dc553f"
        ],
        [
            "End PrimeCharRing.",
            "VernacEndSegment",
            "2157dffd18139f30b5203a017c0c2362545f5870"
        ],
        [
            "Local Notation type := @PrimeCharType.",
            "VernacSyntacticDefinition",
            "5b7f869e2ac7fa131ed69d616d4e42e4793b410e"
        ],
        [
            "Canonical primeChar_unitRingType (R : unitRingType) charRp := [unitRingType of type R charRp].",
            "VernacDefinition",
            "79375ce70a9ebde6cb8a702c21e60ea7a67cd943"
        ],
        [
            "Canonical primeChar_unitAlgType (R : unitRingType) charRp := [unitAlgType 'F_p of type R charRp].",
            "VernacDefinition",
            "f93178bd691c5e5149573448537dacaca00f646c"
        ],
        [
            "Canonical primeChar_comRingType (R : comRingType) charRp := [comRingType of type R charRp].",
            "VernacDefinition",
            "692d5338128b4c6d5b8ab5355164146807c3b6ba"
        ],
        [
            "Canonical primeChar_comUnitRingType (R : comUnitRingType) charRp := [comUnitRingType of type R charRp].",
            "VernacDefinition",
            "e746c975b75abed8f6e1ee97e3edb73b3b419869"
        ],
        [
            "Canonical primeChar_idomainType (R : idomainType) charRp := [idomainType of type R charRp].",
            "VernacDefinition",
            "bc5103dcfe4c4c78a603877f49b76347f4910937"
        ],
        [
            "Canonical primeChar_fieldType (F : fieldType) charFp := [fieldType of type F charFp].",
            "VernacDefinition",
            "b0ece66ee59e0c93e764c58c230ae4fa11192884"
        ],
        [
            "Section FinRing.",
            "VernacBeginSection",
            "dbdb98053b9dfe46b374802bca84b66b7d26edf4"
        ],
        [
            "Variables (R0 : finRingType) (charRp : p \\in [char R0]).",
            "VernacAssumption",
            "a09cfd3a6b523e30ace67ffb8cd4ea28f6799d86"
        ],
        [
            "Local Notation R := (type _ charRp).",
            "VernacSyntacticDefinition",
            "9a2a088a5bf80efa41b1fb353b53aaa2fbb27c53"
        ],
        [
            "Canonical primeChar_finType := [finType of R].",
            "VernacDefinition",
            "88d97ce93bb3877938481ee11e726b19d3b2dd11"
        ],
        [
            "Canonical primeChar_finZmodType := [finZmodType of R].",
            "VernacDefinition",
            "66d5229770f2a777e31718d07cadfe33bf026766"
        ],
        [
            "Canonical primeChar_baseGroupType := [baseFinGroupType of R for +%R].",
            "VernacDefinition",
            "620d7992850480156645736f12ccabc2d717cfa4"
        ],
        [
            "Canonical primeChar_groupType := [finGroupType of R for +%R].",
            "VernacDefinition",
            "e66febe08cbf773fb151886fbb74c6cdfb1962da"
        ],
        [
            "Canonical primeChar_finRingType := [finRingType of R].",
            "VernacDefinition",
            "5cec0416aac95b65dc1106e1921decb46739161b"
        ],
        [
            "Canonical primeChar_finLmodType := [finLmodType 'F_p of R].",
            "VernacDefinition",
            "5fcc841bbdd793d15b609ed1248f18d2787fec88"
        ],
        [
            "Canonical primeChar_finLalgType := [finLalgType 'F_p of R].",
            "VernacDefinition",
            "82eb24914b4593adc4053229abc3f5f665bc4b5e"
        ],
        [
            "Canonical primeChar_finAlgType := [finAlgType 'F_p of R].",
            "VernacDefinition",
            "30976dc9f496b42e726b712ea1ad89ef6b75be98"
        ],
        [
            "Let pr_p : prime p.",
            "VernacDefinition",
            "319834522615508a158e4e50917ada8ea365dd5b"
        ],
        [
            "exact: charf_prime charRp.",
            "VernacExtend",
            "ce637ff86bafca5d8359473e8c02af644dcbdc43"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma primeChar_abelem : p.-abelem [set: R].",
            "VernacStartTheoremProof",
            "704955b9c18fd05d38c88e5eb0f7d7e805267d81"
        ],
        [
            "exact: fin_Fp_lmod_abelem.",
            "VernacExtend",
            "ce637ff86bafca5d8359473e8c02af644dcbdc43"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma primeChar_pgroup : p.-group [set: R].",
            "VernacStartTheoremProof",
            "0c00c3f05102f1cb300458f446d34c419373cc17"
        ],
        [
            "by case/and3P: primeChar_abelem.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma order_primeChar x : x != 0 :> R -> #[x]%g = p.",
            "VernacStartTheoremProof",
            "b0dfadb355c1ca105cbb9ea4160e081c30748721"
        ],
        [
            "by apply: (abelem_order_p primeChar_abelem); rewrite inE.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Let n := logn p #|R|.",
            "VernacDefinition",
            "52771e677e8219f06ff2bf405928f0fd9e775ca7"
        ],
        [
            "Lemma card_primeChar : #|R| = (p ^ n)%N.",
            "VernacStartTheoremProof",
            "4b77538d752dff647b8e58fa87b32643c363f2d6"
        ],
        [
            "by rewrite /n -cardsT {1}(card_pgroup primeChar_pgroup).",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma primeChar_vectAxiom : Vector.axiom n (primeChar_lmodType charRp).",
            "VernacStartTheoremProof",
            "0c704f364c25def051d0dbe66f8e6a5787d34bee"
        ],
        [
            "have /isog_isom/=[f /isomP[injf im_f]]: [set: R] \\isog [set: 'rV['F_p]_n].",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "rewrite (@isog_abelem_card _ _ p) fin_Fp_lmod_abelem //=.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "by rewrite !cardsT card_primeChar card_matrix mul1n card_Fp.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "exists f; last by exists (invm injf) => x; rewrite ?invmE ?invmK ?im_f ?inE.",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "move=> a x y; rewrite [a *: _]mulr_natl morphM ?morphX ?inE // zmodXgE.",
            "VernacExtend",
            "057edeb0967475c7ea5e8c98c449ddc5613eddc1"
        ],
        [
            "by congr (_ + _); rewrite -scaler_nat natr_Zp.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Definition primeChar_vectMixin := Vector.Mixin primeChar_vectAxiom.",
            "VernacDefinition",
            "1bd0c12f6335d6e786c6084ab19aecaf4e149a80"
        ],
        [
            "Canonical primeChar_vectType := VectType 'F_p R primeChar_vectMixin.",
            "VernacDefinition",
            "445aa8697e60a4fd403fae649311daef4c009d7c"
        ],
        [
            "Lemma primeChar_dimf : \\dim {:primeChar_vectType} = n.",
            "VernacStartTheoremProof",
            "79448189115ab1e4a252857e714a7392a40b59f8"
        ],
        [
            "by rewrite dimvf.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "End FinRing.",
            "VernacEndSegment",
            "ce73f6b0e0d9c68a0fb0e0d76cac33e2577aa268"
        ],
        [
            "Canonical primeChar_finUnitRingType (R : finUnitRingType) charRp := [finUnitRingType of type R charRp].",
            "VernacDefinition",
            "16914f4bcb44ce131c6edddf2c7b4aa2a94b4bde"
        ],
        [
            "Canonical primeChar_finUnitAlgType (R : finUnitRingType) charRp := [finUnitAlgType 'F_p of type R charRp].",
            "VernacDefinition",
            "a808c97186fc6016bd7f6ced9ff818914f32a3e9"
        ],
        [
            "Canonical primeChar_FalgType (R : finUnitRingType) charRp := [FalgType 'F_p of type R charRp].",
            "VernacDefinition",
            "d152e39250af5c6a9c7b4c4d2fb5d639bff3f8fa"
        ],
        [
            "Canonical primeChar_finComRingType (R : finComRingType) charRp := [finComRingType of type R charRp].",
            "VernacDefinition",
            "059d67477e6583ad54734f788ad86878166d2098"
        ],
        [
            "Canonical primeChar_finComUnitRingType (R : finComUnitRingType) charRp := [finComUnitRingType of type R charRp].",
            "VernacDefinition",
            "9445396d4caa81e6bb6a3e495c419eaa76df5801"
        ],
        [
            "Canonical primeChar_finIdomainType (R : finIdomainType) charRp := [finIdomainType of type R charRp].",
            "VernacDefinition",
            "3793f35818cffcaebf9f60a21760d7b75ddc8cb2"
        ],
        [
            "Section FinField.",
            "VernacBeginSection",
            "17a880fa6b27c1ab3775a06b792ccc3215a58278"
        ],
        [
            "Variables (F0 : finFieldType) (charFp : p \\in [char F0]).",
            "VernacAssumption",
            "6c948642ea867bb799e3c8192a1a122f14fa6f69"
        ],
        [
            "Local Notation F := (type _ charFp).",
            "VernacSyntacticDefinition",
            "5bc0f616392a35098adccadd6ad7c502636736d1"
        ],
        [
            "Canonical primeChar_finFieldType := [finFieldType of F].",
            "VernacDefinition",
            "aeabb454c53277ad4be05b86cdac817a04c3744d"
        ],
        [
            "Canonical primeChar_fieldExtType := [fieldExtType 'F_p of F for F0].",
            "VernacDefinition",
            "48fef3e8e5844d5a588423150d23a9415286714f"
        ],
        [
            "Canonical primeChar_splittingFieldType := FinSplittingFieldType 'F_p F.",
            "VernacDefinition",
            "bea945b6aeeec323171d9fc28f3fe2d852ee65e5"
        ],
        [
            "End FinField.",
            "VernacEndSegment",
            "071f5a46120755b5140c06ba1f3908b978eae474"
        ],
        [
            "End PrimeChar.",
            "VernacEndSegment",
            "f5bb28d1e47f747cb6f25ba1c9c46313cd99f857"
        ],
        [
            "Section FinSplittingField.",
            "VernacBeginSection",
            "02805655288fe61f9f37ed88ecd63a7cb1fb2490"
        ],
        [
            "Variable F : finFieldType.",
            "VernacAssumption",
            "8f6b88f2458ff412a0390b1a919310e1d22b5745"
        ],
        [
            "Let order (L : vectType F) (K : {vspace L}) := (#|F| ^ \\dim K)%N.",
            "VernacDefinition",
            "becf16432a5bbd6184756bd392f39d7ee0469856"
        ],
        [
            "Section FinGalois.",
            "VernacBeginSection",
            "4bf7f990109c9219067ad0497db49e7b971b599c"
        ],
        [
            "Variable L : splittingFieldType F.",
            "VernacAssumption",
            "1c6f26144d57f98764696ebf389f2b2a90ad62f4"
        ],
        [
            "Implicit Types (a b : F) (x y : L) (K E : {subfield L}).",
            "VernacReserve",
            "ff1499ee3a30db88dea050a649332ef5eb66a0fd"
        ],
        [
            "Let galL K : galois K {:L}.",
            "VernacDefinition",
            "46b046c14a6385560e6ade301b4a397eaff3e66f"
        ],
        [
            "without loss {K} ->: K / K = 1%AS.",
            "VernacExtend",
            "87d5e7b04148ee8f2e4efcc847e0dfadae0aa4cb"
        ],
        [
            "by move=> IH_K; apply: galoisS (IH_K _ (erefl _)); rewrite sub1v subvf.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "apply/splitting_galoisField; pose finL := FinFieldExtType L.",
            "VernacExtend",
            "41a5d270ebe915260e741ffb363e6d99709a9cff"
        ],
        [
            "exists ('X^#|finL| - 'X); split; first by rewrite rpredB 1?rpredX ?polyOverX.",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "rewrite (finField_genPoly finL) -big_filter.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "by rewrite separable_prod_XsubC ?(enum_uniq finL).",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "exists (enum finL); first by rewrite enumT (finField_genPoly finL) eqpxx.",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "by apply/vspaceP=> x; rewrite memvf seqv_sub_adjoin ?(mem_enum finL).",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Fact galLgen K : {alpha | generator 'Gal({:L} / K) alpha & forall x, alpha x = x ^+ order K}.",
            "VernacStartTheoremProof",
            "fee6c144f10459872427062c05d605e1681c3ac6"
        ],
        [
            "without loss{K} ->: K / K = 1%AS; last rewrite /order dimv1 expn1.",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "case/(_ 1%AS)=> // alpha /eqP-defGalL; rewrite /order dimv1 expn1 => Dalpha.",
            "VernacExtend",
            "ba44c9d0281a02110ce54645304e6d990debd9c0"
        ],
        [
            "exists (alpha ^+ \\dim K)%g => [|x]; last first.",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "elim: (\\dim K) => [|n IHn]; first by rewrite gal_id.",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "by rewrite expgSr galM ?memvf // IHn Dalpha expnSr exprM.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "have sGalLK: 'Gal({:L} / K) \\subset <[alpha]> by rewrite -defGalL galS ?sub1v.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "rewrite /generator {sGalLK}(eq_subG_cyclic _ sGalLK) ?cycle_cyclic ?cycleX //.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "rewrite -orderE orderXdiv orderE -defGalL -?{1}galois_dim ?dimv1 ?divn1 //.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "by rewrite field_dimS ?subvf.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "pose f x := x ^+ #|F|.",
            "VernacExtend",
            "3c5f04de94609049d978298aa02ff35fb35ea7c7"
        ],
        [
            "have idfP x: reflect (f x = x) (x \\in 1%VS).",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "apply: (iffP (vlineP _ _)) => [[a ->] | xFx].",
            "VernacExtend",
            "4bd6fa79b17bcd2bfb7af091fb325367a20385d6"
        ],
        [
            "by rewrite -in_algE -[LHS]rmorphX expf_card.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "pose q := map_poly (in_alg L) ('X^#|F| - 'X).",
            "VernacExtend",
            "3c5f04de94609049d978298aa02ff35fb35ea7c7"
        ],
        [
            "have: root q x.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "rewrite /q rmorphB /= map_polyXn map_polyX.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "by rewrite rootE !(hornerE, hornerXn) [x ^+ _]xFx subrr.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "have{q} ->: q = \\prod_(z <- [seq b%:A | b : F]) ('X - z%:P).",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "rewrite /q finField_genPoly rmorph_prod big_map enumT.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "by apply: eq_bigr => b _; rewrite rmorphB /= map_polyX map_polyC.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "by rewrite root_prod_XsubC => /mapP[a]; exists a.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "have fM: rmorphism f.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "rewrite /f; do 2?split=> [x y|]; rewrite ?exprMn ?expr1n //.",
            "VernacExtend",
            "77727a14a632d1fc59f513955776bf7c29b79629"
        ],
        [
            "have [p _ charFp] := finCharP F; rewrite (card_primeChar charFp).",
            "VernacExtend",
            "aa9d5fbc682ed874cd64b2543ca6c859b978e924"
        ],
        [
            "elim: (logn _ _) => // n IHn; rewrite expnSr !exprM {}IHn.",
            "VernacExtend",
            "de65c8193056a36f6dbb91fe21357bd770b140db"
        ],
        [
            "by rewrite -(char_lalg L) in charFp; rewrite -Frobenius_autE rmorphB.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "have fZ: linear f.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "move=> a x y; rewrite -mulr_algl [f _](rmorphD (RMorphism fM)) rmorphM /=.",
            "VernacExtend",
            "057edeb0967475c7ea5e8c98c449ddc5613eddc1"
        ],
        [
            "by rewrite (idfP _ _) ?mulr_algl ?memvZ // memv_line.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "have /kAut_to_gal[alpha galLalpha Dalpha]: kAut 1 {:L} (linfun (Linear fZ)).",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "rewrite kAutfE; apply/kHomP; split=> [x y _ _ | x /idfP]; rewrite !lfunE //=.",
            "VernacExtend",
            "973ea40551376b84174b5c46cddc941522854480"
        ],
        [
            "exact: (rmorphM (RMorphism fM)).",
            "VernacExtend",
            "ce637ff86bafca5d8359473e8c02af644dcbdc43"
        ],
        [
            "have{Dalpha} Dalpha: alpha =1 f by move=> a; rewrite -Dalpha ?memvf ?lfunE.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "suffices <-: fixedField [set alpha] = 1%AS.",
            "VernacExtend",
            "290ed488b5562e885aa2cac56f3a69b4faa0eaa6"
        ],
        [
            "by rewrite gal_generated /generator; exists alpha.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "apply/vspaceP=> x; apply/fixedFieldP/idfP; rewrite ?memvf // => id_x.",
            "VernacExtend",
            "1d32417824786a65f5ff40d1d9dc083be853a4a7"
        ],
        [
            "by rewrite -Dalpha id_x ?set11.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "by move=> _ /set1P->; rewrite Dalpha.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma finField_galois K E : (K <= E)%VS -> galois K E.",
            "VernacStartTheoremProof",
            "812519f5248bc11e86617de6064273cb2ed5c9a8"
        ],
        [
            "move=> sKE; have /galois_fixedField <- := galL E.",
            "VernacExtend",
            "ccd83c252dcbae3d56f3d057fcb8217878b51901"
        ],
        [
            "rewrite normal_fixedField_galois // -sub_abelian_normal ?galS //.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "apply: abelianS (galS _ (sub1v _)) _.",
            "VernacExtend",
            "4bd6fa79b17bcd2bfb7af091fb325367a20385d6"
        ],
        [
            "by have [alpha /('Gal(_ / _) =P _)-> _] := galLgen 1; apply: cycle_abelian.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma finField_galois_generator K E : (K <= E)%VS -> {alpha | generator 'Gal(E / K) alpha & {in E, forall x, alpha x = x ^+ order K}}.",
            "VernacStartTheoremProof",
            "a3e9036882922f639f7044e6fb075aba973f6a25"
        ],
        [
            "move=> sKE; have [alpha defGalLK Dalpha] := galLgen K.",
            "VernacExtend",
            "ccd83c252dcbae3d56f3d057fcb8217878b51901"
        ],
        [
            "have inKL_E: (K <= E <= {:L})%VS by rewrite sKE subvf.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "have nKE: normalField K E by have/and3P[] := finField_galois sKE.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "have galLKalpha: alpha \\in 'Gal({:L} / K).",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "by rewrite (('Gal(_ / _) =P _) defGalLK) cycle_id.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "exists (normalField_cast _ alpha) => [|x Ex]; last first.",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "by rewrite (normalField_cast_eq inKL_E).",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "rewrite /generator -(morphim_cycle (normalField_cast_morphism inKL_E nKE)) //.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "by rewrite -((_ =P <[alpha]>) defGalLK) normalField_img.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "End FinGalois.",
            "VernacEndSegment",
            "5b24e68134fff05b8ffe4964b1d2d9bba77487d9"
        ],
        [
            "Lemma Fermat's_little_theorem (L : fieldExtType F) (K : {subfield L}) a : (a \\in K) = (a ^+ order K == a).",
            "VernacStartTheoremProof",
            "dc9ceafd94ce8708f36320a4040f351b60dd2fe3"
        ],
        [
            "move: K a; wlog [{L}L -> K a]: L / exists galL : splittingFieldType F, L = galL.",
            "VernacExtend",
            "6dbaea969dd2e1a08b50e55e2e4c4949c4d27249"
        ],
        [
            "by pose galL := (FinSplittingFieldType F L) => /(_ galL); apply; exists galL.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "have /galois_fixedField fixLK := finField_galois (subvf K).",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "have [alpha defGalLK Dalpha] := finField_galois_generator (subvf K).",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "rewrite -Dalpha ?memvf // -{1}fixLK (('Gal(_ / _) =P _) defGalLK).",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "rewrite /cycle -gal_generated (galois_fixedField _) ?fixedField_galois //.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "by apply/fixedFieldP/eqP=> [|-> | alpha_x _ /set1P->]; rewrite ?memvf ?set11.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "End FinSplittingField.",
            "VernacEndSegment",
            "450257b655df5a1e53b38ec2c98903f0d1791298"
        ],
        [
            "Section FinFieldExists.",
            "VernacBeginSection",
            "4e7f16ff7442c91fc80677f94063c8bee778197d"
        ],
        [
            "Let map_poly_extField (F : fieldType) (L : fieldExtType F) := map_poly (in_alg L) : {poly F} -> {poly L}.",
            "VernacDefinition",
            "2ee4f42f714efca689213197cd98634e278d93d6"
        ],
        [
            "Local Notation \"p ^%:A\" := (map_poly_extField _ p) (at level 2, format \"p ^%:A\") : ring_scope.",
            "VernacNotation",
            "6e39a576883b27b631670862eeb030a913d127f3"
        ],
        [
            "Lemma FinSplittingFieldFor (F : finFieldType) (p : {poly F}) : p != 0 -> {L : splittingFieldType F | splittingFieldFor 1 p^%:A {:L}}.",
            "VernacStartTheoremProof",
            "0799b5ef8b84cdcaa7aae23117567c86930d7cbf"
        ],
        [
            "have mapXsubC (f : {rmorphism _}) x: map_poly f ('X - x%:P) = 'X - (f x)%:P.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "by rewrite rmorphB /= map_polyX map_polyC.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "move=> nz_p; pose splits q := {zs | q %= \\prod_(z <- zs) ('X - z%:P)}.",
            "VernacExtend",
            "fef3c4a8f7fcf70b0824f3cce5fb58f2e0ef07fd"
        ],
        [
            "suffices [L splitLp]: {L : fieldExtType F | splittingFieldFor 1 p^%:A {:L}}.",
            "VernacExtend",
            "290ed488b5562e885aa2cac56f3a69b4faa0eaa6"
        ],
        [
            "by exists (FinSplittingFieldType F L).",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "suffices [L [ys Dp]]: {L : fieldExtType F & splits L p^%:A}.",
            "VernacExtend",
            "290ed488b5562e885aa2cac56f3a69b4faa0eaa6"
        ],
        [
            "pose Lp := subvs_of <<1 & ys>>; pose toL := linfun (vsval : Lp -> L).",
            "VernacExtend",
            "311b833fadff89b2f7ed817d3cd7cb6971c96a1e"
        ],
        [
            "have [zs Dys]: {zs | map toL zs = ys}.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "exists (map (vsproj _) ys); rewrite -map_comp map_id_in // => y ys_y.",
            "VernacExtend",
            "a2d3b7196bf3714468559972333e1a4014aadc88"
        ],
        [
            "by rewrite /= lfunE /= vsprojK ?seqv_sub_adjoin.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "exists [fieldExtType F of Lp], zs.",
            "VernacExtend",
            "8610381e57a6908bb3be9ae81d22255aa03fa3ac"
        ],
        [
            "set lhs := (lhs in lhs %= _); set rhs := (rhs in _ %= rhs).",
            "VernacExtend",
            "7405ffc63057f1493a790d3f39e251cc5fefe81f"
        ],
        [
            "suffices: map_poly toL lhs %= map_poly toL rhs by rewrite eqp_map.",
            "VernacExtend",
            "290ed488b5562e885aa2cac56f3a69b4faa0eaa6"
        ],
        [
            "rewrite -Dys big_map in Dp; apply: etrans Dp; apply: congr2.",
            "VernacExtend",
            "51feb8305384ec63057bc47214b50a33a7155fd3"
        ],
        [
            "by rewrite -map_poly_comp; apply/eq_map_poly=> x; apply: rmorph_alg.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "by rewrite rmorph_prod; apply/eq_bigr=> z _; apply mapXsubC.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "set Lzs := LHS; pose Lys := (toL @: Lzs)%VS; apply/vspaceP=> u.",
            "VernacExtend",
            "3388395703a52e46b6d64a8dfd4072cbe76e470c"
        ],
        [
            "have: val u \\in Lys by rewrite /Lys aimg_adjoin_seq aimg1 Dys (valP u).",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "by case/memv_imgP=> v Lzs_v; rewrite memvf lfunE => /val_inj->.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "move: {2}_.+1 (ltnSn (size p)) => n; elim: n => // n IHn in F p nz_p * => lbn.",
            "VernacExtend",
            "8261237f0cda1915a4077c28869831c5329103ce"
        ],
        [
            "have [Cp|C'p] := leqP (size p) 1.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "pose L := [fieldExtType F of F^o for F]; exists L, [::].",
            "VernacExtend",
            "6e1bd61de2992954bfbc213da093893b2582c032"
        ],
        [
            "by rewrite big_nil -size_poly_eq1 size_map_poly eqn_leq Cp size_poly_gt0.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "have [r r_dv_p irr_r]: {r | r %| p & irreducible_poly r}.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "pose rVp (v : 'rV_n) (r := rVpoly v) := (1 < size r) && (r %| p).",
            "VernacExtend",
            "3c5f04de94609049d978298aa02ff35fb35ea7c7"
        ],
        [
            "have [v0 Dp]: {v0 | rVpoly v0 = p & rVp v0}.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "by exists (poly_rV p); rewrite /rVp poly_rV_K ?C'p /=.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "case/(arg_minP (size \\o rVpoly))=> /= v; set r := rVpoly v.",
            "VernacExtend",
            "5ced22bf51d40cd3bfc1a1ee7adc8994d4475320"
        ],
        [
            "case/andP=> C'r r_dv_p min_r; exists r => //; split=> // q C'q q_dv_r.",
            "VernacExtend",
            "72e880078fb607de26a67bd241d717d95e1ced6b"
        ],
        [
            "have nz_r: r != 0 by rewrite -size_poly_gt0 ltnW.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "have le_q_r: size q <= size r by rewrite dvdp_leq.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "have [u Dq]: {u : 'rV_n | rVpoly u = q}.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "by exists (poly_rV q); rewrite poly_rV_K ?(leq_trans le_q_r) ?size_poly.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "rewrite -dvdp_size_eqp // eqn_leq le_q_r -Dq min_r // /rVp Dq.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "rewrite ltn_neqAle eq_sym C'q size_poly_gt0 (dvdpN0 q_dv_r) //=.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "exact: dvdp_trans q_dv_r r_dv_p.",
            "VernacExtend",
            "ce637ff86bafca5d8359473e8c02af644dcbdc43"
        ],
        [
            "have{irr_r} [K _ [x rx0 defK]] := irredp_FAdjoin irr_r.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "have{r rx0 r_dv_p} /factor_theorem/sig_eqW[q Dp]: root p^%:A x.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "by rewrite -(divpK r_dv_p) [_^%:A]rmorphM rootM rx0 orbT.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "have Dszp: size p = size (q * ('X - x%:P)) by rewrite -Dp size_map_poly.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "have nz_q: q != 0.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "by move: nz_p; rewrite -size_poly_eq0 Dszp size_poly_eq0 mulf_eq0 => /norP[].",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "have [L [zs Dq]]: {L : fieldExtType K & splits L q^%:A}.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "apply: (IHn (FinFieldExtType K) q nz_q).",
            "VernacExtend",
            "4bd6fa79b17bcd2bfb7af091fb325367a20385d6"
        ],
        [
            "by rewrite ltnS Dszp size_mul ?polyXsubC_eq0 ?size_XsubC ?addn2 in lbn.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "suffices: splits L p^%:A^%:A.",
            "VernacExtend",
            "290ed488b5562e885aa2cac56f3a69b4faa0eaa6"
        ],
        [
            "rewrite -[_^%:A]map_poly_comp -(eq_map_poly (fun a => baseField_scaleE a 1)).",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "by exists [fieldExtType F of baseFieldType L].",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "exists (x%:A :: zs); rewrite big_cons; set rhs := _ * _.",
            "VernacExtend",
            "f5a04e44151e605efc1e3a3cb8849b91ae878195"
        ],
        [
            "by rewrite Dp mulrC [_^%:A]rmorphM /= mapXsubC /= eqp_mull.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma PrimePowerField p k (m := (p ^ k)%N) : prime p -> 0 < k -> {Fm : finFieldType | p \\in [char Fm] & #|Fm| = m}.",
            "VernacStartTheoremProof",
            "f5ed7d0723e513cf3ad1a850c0db336c5d3ed51a"
        ],
        [
            "move=> pr_p k_gt0; have m_gt1: m > 1 by rewrite (ltn_exp2l 0) ?prime_gt1.",
            "VernacExtend",
            "ccd83c252dcbae3d56f3d057fcb8217878b51901"
        ],
        [
            "have m_gt0 := ltnW m_gt1; have m1_gt0: m.-1 > 0 by rewrite -ltnS prednK.",
            "VernacExtend",
            "6e9d14df7d32ea0bf863301df3f6cb2d4e1b8e96"
        ],
        [
            "pose q := 'X^m - 'X; have Dq R: q R = ('X^m.-1 - 1) * ('X - 0).",
            "VernacExtend",
            "c09d1274557abc8857ed64eb3450db2da906c185"
        ],
        [
            "by rewrite subr0 mulrBl mul1r -exprSr prednK.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "have /FinSplittingFieldFor[/= L splitLq]: q [ringType of 'F_p] != 0.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "by rewrite Dq monic_neq0 ?rpredM ?monicXsubC ?monic_Xn_sub_1.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "rewrite [_^%:A]rmorphB rmorphX /= map_polyX -/(q L) in splitLq.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "have charL: p \\in [char L] by rewrite char_lalg char_Fp.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "pose Fm := FinFieldExtType L; exists Fm => //.",
            "VernacExtend",
            "801cf49622ecacdc7aba5baf9428af93fd6cae3f"
        ],
        [
            "have /finField_galois_generator[/= a _ Da]: (1 <= {:L})%VS by apply: sub1v.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "pose Em := fixedSpace (a ^+ k)%g; rewrite card_Fp //= dimv1 expn1 in Da.",
            "VernacExtend",
            "de7a4b42b1ef81b17722dd81c9c5b9378b46a6e7"
        ],
        [
            "have{splitLq} [zs DqL defL] := splitLq.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "have Uzs: uniq zs.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "rewrite -separable_prod_XsubC -(eqp_separable DqL) Dq separable_root andbC.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "rewrite /root !hornerE subr_eq0 eq_sym hornerXn expr0n gtn_eqF ?oner_eq0 //=.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "rewrite cyclotomic.separable_Xn_sub_1 // -subn1 natrB // subr_eq0.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "by rewrite natrX charf0 // expr0n gtn_eqF // eq_sym oner_eq0.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "suffices /eq_card->: Fm =i zs.",
            "VernacExtend",
            "290ed488b5562e885aa2cac56f3a69b4faa0eaa6"
        ],
        [
            "apply: succn_inj; rewrite (card_uniqP _) //= -(size_prod_XsubC _ id).",
            "VernacExtend",
            "56c014161b39aecfb3c54301c2409dba4e8e1857"
        ],
        [
            "by rewrite -(eqp_size DqL) size_addl size_polyXn // size_opp size_polyX.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "have in_zs: zs =i Em.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "move=> z; rewrite -root_prod_XsubC -(eqp_root DqL) (sameP fixedSpaceP eqP).",
            "VernacExtend",
            "057edeb0967475c7ea5e8c98c449ddc5613eddc1"
        ],
        [
            "rewrite /root !hornerE subr_eq0 /= hornerXn /m; congr (_ == z).",
            "VernacExtend",
            "a0279e71fd23ac6bde2b8b4402981a70ea719044"
        ],
        [
            "elim: (k) => [|i IHi]; first by rewrite gal_id.",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "by rewrite expgSr expnSr exprM IHi galM ?Da ?memvf.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "suffices defEm: Em = {:L}%VS by move=> z; rewrite in_zs defEm memvf.",
            "VernacExtend",
            "290ed488b5562e885aa2cac56f3a69b4faa0eaa6"
        ],
        [
            "apply/eqP; rewrite eqEsubv subvf -defL -[Em]subfield_closed agenvS //.",
            "VernacExtend",
            "56c014161b39aecfb3c54301c2409dba4e8e1857"
        ],
        [
            "by rewrite subv_add sub1v; apply/span_subvP=> z; rewrite in_zs.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "End FinFieldExists.",
            "VernacEndSegment",
            "f784e5e467d00a2168c5f3404173ae2483d155ca"
        ],
        [
            "Section FinDomain.",
            "VernacBeginSection",
            "42b260cd1741889721c059638cea2f9ca0fc1a05"
        ],
        [
            "Import ssrnum ssrint algC cyclotomic Num.Theory.",
            "VernacImport",
            "4446f68985316f6bfff3a6fac3ffe875fa816e50"
        ],
        [
            "Local Infix \"%|\" := dvdn.",
            "VernacInfix",
            "a33437279b5248fd79bd08da7413245c6d824edb"
        ],
        [
            "Variable R : finUnitRingType.",
            "VernacAssumption",
            "b82defa0009df2ed7d298e3423cdeffe2631a1d4"
        ],
        [
            "Hypothesis domR : GRing.IntegralDomain.axiom R.",
            "VernacAssumption",
            "ffb3b0dc6bcd1f30c6f386d923fb31dff264d509"
        ],
        [
            "Implicit Types x y : R.",
            "VernacReserve",
            "a698213249308a1927c4fb90fb6e1fbc35157508"
        ],
        [
            "Let lregR x : x != 0 -> GRing.lreg x.",
            "VernacDefinition",
            "b1e50137c14daf38b64d3b885e358d677a036ff9"
        ],
        [
            "by move=> xnz; apply: mulrI0_lreg => y /domR/orP[/idPn | /eqP].",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma finDomain_field : GRing.Field.mixin_of R.",
            "VernacStartTheoremProof",
            "f3a2475268bc2a6b6e4f15ecb26935f3559aece6"
        ],
        [
            "move=> x /lregR-regx; apply/unitrP; exists (invF regx 1).",
            "VernacExtend",
            "f7280c147f54c92c41b6690373a21e3439698808"
        ],
        [
            "by split; first apply: (regx); rewrite ?mulrA f_invF // mulr1 mul1r.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Theorem finDomain_mulrC : @commutative R R *%R.",
            "VernacStartTheoremProof",
            "93812776230e69768aa0ea3036035de5409d0797"
        ],
        [
            "have fieldR := finDomain_field.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "have [p p_pr charRp]: exists2 p, prime p & p \\in [char R].",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "have [e /prod_prime_decomp->]: {e | (e > 0)%N & e%:R == 0 :> R}.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "by exists #|[set: R]%G|; rewrite // -order_dvdn order_dvdG ?inE.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "rewrite big_seq; elim/big_rec: _ => [|[p m] /= n]; first by rewrite oner_eq0.",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "case/mem_prime_decomp=> p_pr _ _ IHn.",
            "VernacExtend",
            "e00fff71ff314c991514fc71c41a3556702e444a"
        ],
        [
            "elim: m => [|m IHm]; rewrite ?mul1n {IHn}// expnS -mulnA natrM.",
            "VernacExtend",
            "de65c8193056a36f6dbb91fe21357bd770b140db"
        ],
        [
            "by case/eqP/domR/orP=> //; exists p; last apply/andP.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "pose Rp := PrimeCharType charRp; pose L : {vspace Rp} := fullv.",
            "VernacExtend",
            "311b833fadff89b2f7ed817d3cd7cb6971c96a1e"
        ],
        [
            "pose G := [set: {unit R}]; pose ofG : {unit R} -> Rp := val.",
            "VernacExtend",
            "311b833fadff89b2f7ed817d3cd7cb6971c96a1e"
        ],
        [
            "pose projG (E : {vspace Rp}) := [preim ofG of E].",
            "VernacExtend",
            "3c5f04de94609049d978298aa02ff35fb35ea7c7"
        ],
        [
            "have inG t nzt: Sub t (finDomain_field nzt) \\in G by rewrite inE.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "have card_projG E: #|projG E| = (p ^ \\dim E - 1)%N.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "transitivity #|E|.-1; last by rewrite subn1 card_vspace card_Fp.",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "rewrite (cardD1 0) mem0v (card_preim val_inj) /=.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "apply: eq_card => x; congr (_ && _); rewrite [LHS]codom_val.",
            "VernacExtend",
            "98f94695a805e5f847aa685a527be11f8216971a"
        ],
        [
            "by apply/idP/idP=> [/(memPn _ _)-> | /fieldR]; rewrite ?unitr0.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "pose C u := 'C[ofG u]%AS; pose Q := 'C(L)%AS; pose q := (p ^ \\dim Q)%N.",
            "VernacExtend",
            "a37246b98b083397f6e69dfe0e1d317fcad6a9d6"
        ],
        [
            "have defC u: 'C[u] =i projG (C u).",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "by move=> v; rewrite cent1E !inE (sameP cent1vP eqP).",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "have defQ: 'Z(G) =i projG Q.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "move=> u; rewrite !inE.",
            "VernacExtend",
            "057edeb0967475c7ea5e8c98c449ddc5613eddc1"
        ],
        [
            "apply/centP/centvP=> cGu v _; last exact/val_inj/cGu/memvf.",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "by have [-> | /inG/cGu[]] := eqVneq v 0; first by rewrite commr0.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "have q_gt1: (1 < q)%N by rewrite (ltn_exp2l 0) ?prime_gt1 ?adim_gt0.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "pose n := \\dim_Q L; have oG: #|G| = (q ^ n - 1)%N.",
            "VernacExtend",
            "c09d1274557abc8857ed64eb3450db2da906c185"
        ],
        [
            "rewrite -expnM mulnC divnK ?skew_field_dimS ?subvf // -card_projG.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "by apply: eq_card => u; rewrite !inE memvf.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "have oZ: #|'Z(G)| = (q - 1)%N by rewrite -card_projG; apply: eq_card.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "suffices n_le1: (n <= 1)%N.",
            "VernacExtend",
            "290ed488b5562e885aa2cac56f3a69b4faa0eaa6"
        ],
        [
            "move=> u v; apply/centvsP: (memvf (u : Rp)) (memvf (v : Rp)) => {u v}.",
            "VernacExtend",
            "d6ebf3361f380a12d5c2c9bbb7ea363132c48b36"
        ],
        [
            "rewrite -(geq_leqif (dimv_leqif_sup (subvf Q))) -/L.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "by rewrite leq_divLR ?mul1n ?skew_field_dimS ?subvf in n_le1.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "without loss n_gt1: / (1 < n)%N by rewrite ltnNge; apply: wlog_neg.",
            "VernacExtend",
            "87d5e7b04148ee8f2e4efcc847e0dfadae0aa4cb"
        ],
        [
            "have [q_gt0 n_gt0] := (ltnW q_gt1, ltnW n_gt1).",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "have [z z_prim] := C_prim_root_exists n_gt0.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "have zn1: z ^+ n = 1 by apply: prim_expr_order.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "have /eqP-n1z: `|z| == 1.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "by rewrite -(pexpr_eq1 n_gt0) ?normr_ge0 // -normrX zn1 normr1.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "suffices /eqP/normC_sub_eq[t n1t [Dq Dz]]: `|q%:R - z| == `|q%:R| - `|z|.",
            "VernacExtend",
            "290ed488b5562e885aa2cac56f3a69b4faa0eaa6"
        ],
        [
            "suffices z1: z == 1 by rewrite leq_eqVlt -dvdn1 (prim_order_dvd z_prim) z1.",
            "VernacExtend",
            "290ed488b5562e885aa2cac56f3a69b4faa0eaa6"
        ],
        [
            "by rewrite Dz n1z mul1r -(eqr_pmuln2r q_gt0) Dq normr_nat mulr_natl.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "pose aq d : algC := (cyclotomic (z ^+ (n %/ d)) d).[q%:R].",
            "VernacExtend",
            "3c5f04de94609049d978298aa02ff35fb35ea7c7"
        ],
        [
            "suffices: `|aq n| <= (q - 1)%:R.",
            "VernacExtend",
            "290ed488b5562e885aa2cac56f3a69b4faa0eaa6"
        ],
        [
            "rewrite eqr_le ler_sub_dist andbT n1z normr_nat natrB //; apply: ler_trans.",
            "VernacExtend",
            "634a7639ed2fb7caf62757f84400927f5829b7d5"
        ],
        [
            "rewrite {}/aq horner_prod divnn n_gt0 expr1 normr_prod.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "rewrite (bigD1 (Ordinal n_gt1)) ?coprime1n //= !hornerE ler_pemulr //.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "elim/big_ind: _ => // [|d _]; first exact: mulr_ege1.",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "rewrite !hornerE; apply: ler_trans (ler_sub_dist _ _).",
            "VernacExtend",
            "634a7639ed2fb7caf62757f84400927f5829b7d5"
        ],
        [
            "by rewrite normr_nat normrX n1z expr1n ler_subr_addl (leC_nat 2).",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "have Zaq d: d %| n -> aq d \\in Cint.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "move/(dvdn_prim_root z_prim)=> zd_prim.",
            "VernacExtend",
            "b1b2cb7a3a617cba67460b4eca1f04de3c1cc716"
        ],
        [
            "rewrite rpred_horner ?rpred_nat //= -Cintr_Cyclotomic //.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "by apply/polyOverP=> i; rewrite coef_map ?rpred_int.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "suffices: (aq n %| (q - 1)%:R)%C.",
            "VernacExtend",
            "290ed488b5562e885aa2cac56f3a69b4faa0eaa6"
        ],
        [
            "rewrite {1}[aq n]CintEsign ?Zaq // -(rpredMsign _ (aq n < 0)%R).",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "rewrite dvdC_mul2l ?signr_eq0 //.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "have /CnatP[m ->]: `|aq n| \\in Cnat by rewrite Cnat_norm_Cint ?Zaq.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "by rewrite leC_nat dvdC_nat; apply: dvdn_leq; rewrite subn_gt0.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "have prod_aq m: m %| n -> \\prod_(d < n.+1 | d %| m) aq d = (q ^ m - 1)%:R.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "move=> m_dv_n; transitivity ('X^m - 1).[q%:R : algC]; last first.",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "by rewrite !hornerE hornerXn -natrX natrB ?expn_gt0 ?prime_gt0.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "rewrite (prod_cyclotomic (dvdn_prim_root z_prim m_dv_n)).",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "have def_divm: perm_eq (divisors m) [seq d <- index_iota 0 n.+1 | d %| m].",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "rewrite uniq_perm_eq ?divisors_uniq ?filter_uniq ?iota_uniq // => d.",
            "VernacExtend",
            "3c42b53d0efc26db114b00541ac5e7fcb29e6aeb"
        ],
        [
            "rewrite -dvdn_divisors ?(dvdn_gt0 n_gt0) // mem_filter mem_iota ltnS /=.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "by apply/esym/andb_idr=> d_dv_m; rewrite dvdn_leq ?(dvdn_trans d_dv_m).",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "rewrite (eq_big_perm _ def_divm) big_filter big_mkord horner_prod.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "by apply: eq_bigr => d d_dv_m; rewrite -exprM muln_divA ?divnK.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "have /rpredBl<-: (aq n %| #|G|%:R)%C.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "rewrite oG -prod_aq // (bigD1 ord_max) //= dvdC_mulr //.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "by apply: rpred_prod => d /andP[/Zaq].",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "rewrite center_class_formula addrC oZ natrD addKr natr_sum /=.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "apply: rpred_sum => _ /imsetP[u /setDP[_ Z'u] ->]; rewrite -/G /=.",
            "VernacExtend",
            "56c014161b39aecfb3c54301c2409dba4e8e1857"
        ],
        [
            "have sQC: (Q <= C u)%VS by apply/subvP=> v /centvP-cLv; apply/cent1vP/cLv/memvf.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "have{sQC} /dvdnP[m Dm]: \\dim Q %| \\dim (C u) by apply: skew_field_dimS.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "have m_dv_n: m %| n by rewrite dvdn_divRL // -?Dm ?skew_field_dimS ?subvf.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "have m_gt0: (0 < m)%N := dvdn_gt0 n_gt0 m_dv_n.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "have{Dm} oCu: #|'C[u]| = (q ^ m - 1)%N.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "by rewrite -expnM mulnC -Dm (eq_card (defC u)) card_projG.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "have ->: #|u ^: G|%:R = \\prod_(d < n.+1 | d %| n) (aq d / aq d ^+ (d %| m)).",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "rewrite -index_cent1 natf_indexg ?subsetT //= setTI prodf_div prod_aq // -oG.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "congr (_ / _); rewrite big_mkcond oCu -prod_aq //= big_mkcond /=.",
            "VernacExtend",
            "90723b7805fdae0b93bd8b98ae215a5658363919"
        ],
        [
            "by apply: eq_bigr => d _; case: ifP => [/dvdn_trans->| _]; rewrite ?if_same.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "rewrite (bigD1 ord_max) //= [n %| m](contraNF _ Z'u) => [|n_dv_m]; last first.",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "rewrite -sub_cent1 subEproper eq_sym eqEcard subsetT oG oCu leq_sub2r //.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "by rewrite leq_exp2l // dvdn_leq.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "rewrite divr1 dvdC_mulr //; apply/rpred_prod => d /andP[/Zaq-Zaqd _].",
            "VernacExtend",
            "634a7639ed2fb7caf62757f84400927f5829b7d5"
        ],
        [
            "have [-> | nz_aqd] := eqVneq (aq d) 0; first by rewrite mul0r.",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "by rewrite -[aq d]expr1 -exprB ?leq_b1 ?unitfE ?rpredX.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Definition FinDomainFieldType : finFieldType := let fin_unit_class := FinRing.UnitRing.class R in let com_class := GRing.ComRing.Class finDomain_mulrC in let com_unit_class := @GRing.ComUnitRing.Class R com_class fin_unit_class in let dom_class := @GRing.IntegralDomain.Class R com_unit_class domR in let field_class := @GRing.Field.Class R dom_class finDomain_field in let finfield_class := @FinRing.Field.Class R field_class fin_unit_class in FinRing.Field.Pack finfield_class.",
            "VernacDefinition",
            "c343932dfbc6a4da4fd9cad1b723e4aea7e1a0d4"
        ],
        [
            "Definition FinDomainSplittingFieldType p (charRp : p \\in [char R]) := let RoverFp := @primeChar_splittingFieldType p FinDomainFieldType charRp in [splittingFieldType 'F_p of R for RoverFp].",
            "VernacDefinition",
            "c6974a7c083730de0195fa42dab42591257f41f3"
        ],
        [
            "End FinDomain.",
            "VernacEndSegment",
            "bb44e75fb75bb46f723af9344969629363e0398c"
        ]
    ],
    "proofs": [
        {
            "name": "finRing_nontrivial",
            "line_nb": 13,
            "steps": [
                {
                    "command": [
                        "by apply/trivgPn; exists 1; rewrite ?inE ?oner_neq0.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "finRing_gt1",
            "line_nb": 16,
            "steps": [
                {
                    "command": [
                        "by rewrite -cardsT cardG_gt1 finRing_nontrivial.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "card_finField_unit",
            "line_nb": 22,
            "steps": [
                {
                    "command": [
                        "by rewrite -(cardC1 0) cardsT card_sub; apply: eq_card => x; rewrite unitfE.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "expf_card",
            "line_nb": 26,
            "steps": [
                {
                    "command": [
                        "rewrite -[RHS]mulr1 -(ltn_predK (finRing_gt1 F)) exprS.",
                        "VernacExtend",
                        "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
                    ]
                },
                {
                    "command": [
                        "apply/eqP; rewrite -subr_eq0 -mulrBr mulf_eq0 subr_eq0 -implyNb -unitfE.",
                        "VernacExtend",
                        "56c014161b39aecfb3c54301c2409dba4e8e1857"
                    ]
                },
                {
                    "command": [
                        "apply/implyP=> Ux; rewrite -(val_unitX _ (Sub x _)) -val_unit1 val_eqE.",
                        "VernacExtend",
                        "56c014161b39aecfb3c54301c2409dba4e8e1857"
                    ]
                },
                {
                    "command": [
                        "by rewrite -order_dvdn -card_finField_unit order_dvdG ?inE.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "finField_genPoly",
            "line_nb": 32,
            "steps": [
                {
                    "command": [
                        "set n := #|F|; set oppX := - 'X; set pF := LHS.",
                        "VernacExtend",
                        "6f9acefb35d3c4fa4eb78a0e027eeb287acf16a4"
                    ]
                },
                {
                    "command": [
                        "have le_oppX_n: size oppX <= n by rewrite size_opp size_polyX finRing_gt1.",
                        "VernacExtend",
                        "406cde1174359c53bf162a2a18c4eede395555f9"
                    ]
                },
                {
                    "command": [
                        "have: size pF = (size (enum F)).+1 by rewrite -cardE size_addl size_polyXn.",
                        "VernacExtend",
                        "406cde1174359c53bf162a2a18c4eede395555f9"
                    ]
                },
                {
                    "command": [
                        "move/all_roots_prod_XsubC->; last by rewrite uniq_rootsE enum_uniq.",
                        "VernacExtend",
                        "3763a4b8db689af316a7372b722bb29806ab4fb6"
                    ]
                },
                {
                    "command": [
                        "by rewrite enumT lead_coefDl ?size_polyXn // lead_coefXn scale1r.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "by apply/allP=> x _; rewrite rootE !hornerE hornerXn expf_card subrr.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "finCharP",
            "line_nb": 40,
            "steps": [
                {
                    "command": [
                        "pose e := exponent [set: F]; have e_gt0: e > 0 by apply: exponent_gt0.",
                        "VernacExtend",
                        "c09d1274557abc8857ed64eb3450db2da906c185"
                    ]
                },
                {
                    "command": [
                        "have: e%:R == 0 :> F by rewrite -zmodXgE expg_exponent // inE.",
                        "VernacExtend",
                        "406cde1174359c53bf162a2a18c4eede395555f9"
                    ]
                },
                {
                    "command": [
                        "by case/natf0_char/sigW=> // p charFp; exists p; rewrite ?(charf_prime charFp).",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "finField_is_abelem",
            "line_nb": 45,
            "steps": [
                {
                    "command": [
                        "have [p pr_p charFp] := finCharP.",
                        "VernacExtend",
                        "406cde1174359c53bf162a2a18c4eede395555f9"
                    ]
                },
                {
                    "command": [
                        "by apply/is_abelemP; exists p; last apply: fin_ring_char_abelem.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "card_finCharP",
            "line_nb": 49,
            "steps": [
                {
                    "command": [
                        "move=> oF pr_p; rewrite inE pr_p -order_dvdn.",
                        "VernacExtend",
                        "057edeb0967475c7ea5e8c98c449ddc5613eddc1"
                    ]
                },
                {
                    "command": [
                        "rewrite (abelem_order_p finField_is_abelem) ?inE ?oner_neq0 //=.",
                        "VernacExtend",
                        "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
                    ]
                },
                {
                    "command": [
                        "have n_gt0: n > 0 by rewrite -(ltn_exp2l _ _ (prime_gt1 pr_p)) -oF finRing_gt1.",
                        "VernacExtend",
                        "406cde1174359c53bf162a2a18c4eede395555f9"
                    ]
                },
                {
                    "command": [
                        "by rewrite cardsT oF -(prednK n_gt0) pdiv_pfactor.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "card_vspace",
            "line_nb": 61,
            "steps": [
                {
                    "command": [
                        "set n := \\dim V; pose V2rV v := \\row_i coord (vbasis V) i v.",
                        "VernacExtend",
                        "dda58a04ca4da9adf6d016079f462c4d6ff69ca8"
                    ]
                },
                {
                    "command": [
                        "pose rV2V (rv : 'rV_n) := \\sum_i rv 0 i *: (vbasis V)`_i.",
                        "VernacExtend",
                        "3c5f04de94609049d978298aa02ff35fb35ea7c7"
                    ]
                },
                {
                    "command": [
                        "have rV2V_K: cancel rV2V V2rV.",
                        "VernacExtend",
                        "406cde1174359c53bf162a2a18c4eede395555f9"
                    ]
                },
                {
                    "command": [
                        "have freeV: free (vbasis V) := basis_free (vbasisP V).",
                        "VernacExtend",
                        "406cde1174359c53bf162a2a18c4eede395555f9"
                    ]
                },
                {
                    "command": [
                        "by move=> rv; apply/rowP=> i; rewrite mxE coord_sum_free.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "rewrite -[n]mul1n -card_matrix -(card_imset _ (can_inj rV2V_K)).",
                        "VernacExtend",
                        "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
                    ]
                },
                {
                    "command": [
                        "apply: eq_card => v; apply/idP/imsetP=> [/coord_vbasis-> | [rv _ ->]].",
                        "VernacExtend",
                        "8d9dae45eeb3a769b8a865cef8ae476451f63802"
                    ]
                },
                {
                    "command": [
                        "by exists (V2rV v) => //; apply: eq_bigr => i _; rewrite mxE.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "by apply: (@rpred_sum vT) => i _; rewrite rpredZ ?vbasis_mem ?memt_nth.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "card_vspacef",
            "line_nb": 72,
            "steps": [
                {
                    "command": [
                        "by apply: eq_card => v; rewrite (@memvf _ vT).",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "card_vspace1",
            "line_nb": 78,
            "steps": [
                {
                    "command": [
                        "by rewrite card_vspace (dimv1 aT).",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "VectFinMixin",
            "line_nb": 82,
            "steps": [
                {
                    "command": [
                        "have v2rK := @Vector.InternalTheory.v2rK R vT.",
                        "VernacExtend",
                        "406cde1174359c53bf162a2a18c4eede395555f9"
                    ]
                },
                {
                    "command": [
                        "exact: CanFinMixin (v2rK : @cancel _ (CountType vT (CanCountMixin v2rK)) _ _).",
                        "VernacExtend",
                        "ce637ff86bafca5d8359473e8c02af644dcbdc43"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "finField_splittingField_axiom",
            "line_nb": 96,
            "steps": [
                {
                    "command": [
                        "exists ('X^#|fT| - 'X); first by rewrite rpredB 1?rpredX ?polyOverX.",
                        "VernacExtend",
                        "3763a4b8db689af316a7372b722bb29806ab4fb6"
                    ]
                },
                {
                    "command": [
                        "exists (enum fT); first by rewrite enumT finField_genPoly eqpxx.",
                        "VernacExtend",
                        "3763a4b8db689af316a7372b722bb29806ab4fb6"
                    ]
                },
                {
                    "command": [
                        "by apply/vspaceP=> x; rewrite memvf seqv_sub_adjoin ?mem_enum.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "natrFp",
            "line_nb": 120,
            "steps": [
                {
                    "command": [
                        "rewrite [in RHS](divn_eq n p) natrD mulrnA (mulrn_char charRp) add0r.",
                        "VernacExtend",
                        "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
                    ]
                },
                {
                    "command": [
                        "by rewrite /= (Fp_cast (charf_prime charRp)).",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "primeChar_scaleA",
            "line_nb": 124,
            "steps": [
                {
                    "command": [
                        "by rewrite /primeChar_scale mulrA -natrM natrFp.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "primeChar_scale1",
            "line_nb": 127,
            "steps": [
                {
                    "command": [
                        "by move=> x; rewrite /primeChar_scale mul1r.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "primeChar_scaleDr",
            "line_nb": 130,
            "steps": [
                {
                    "command": [
                        "by move=> a x y /=; rewrite /primeChar_scale mulrDr.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "primeChar_scaleDl",
            "line_nb": 133,
            "steps": [
                {
                    "command": [
                        "by move=> a b; rewrite /primeChar_scale natrFp natrD mulrDl.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "primeChar_scaleAl",
            "line_nb": 138,
            "steps": [
                {
                    "command": [
                        "by move=> a x y; apply: mulrA.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "primeChar_scaleAr",
            "line_nb": 142,
            "steps": [
                {
                    "command": [
                        "by move=> a x y; rewrite ![a *: _]mulr_natl mulrnAr.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "pr_p",
            "line_nb": 165,
            "steps": [
                {
                    "command": [
                        "exact: charf_prime charRp.",
                        "VernacExtend",
                        "ce637ff86bafca5d8359473e8c02af644dcbdc43"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "primeChar_abelem",
            "line_nb": 168,
            "steps": [
                {
                    "command": [
                        "exact: fin_Fp_lmod_abelem.",
                        "VernacExtend",
                        "ce637ff86bafca5d8359473e8c02af644dcbdc43"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "primeChar_pgroup",
            "line_nb": 171,
            "steps": [
                {
                    "command": [
                        "by case/and3P: primeChar_abelem.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "order_primeChar",
            "line_nb": 174,
            "steps": [
                {
                    "command": [
                        "by apply: (abelem_order_p primeChar_abelem); rewrite inE.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "card_primeChar",
            "line_nb": 178,
            "steps": [
                {
                    "command": [
                        "by rewrite /n -cardsT {1}(card_pgroup primeChar_pgroup).",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "primeChar_vectAxiom",
            "line_nb": 181,
            "steps": [
                {
                    "command": [
                        "have /isog_isom/=[f /isomP[injf im_f]]: [set: R] \\isog [set: 'rV['F_p]_n].",
                        "VernacExtend",
                        "406cde1174359c53bf162a2a18c4eede395555f9"
                    ]
                },
                {
                    "command": [
                        "rewrite (@isog_abelem_card _ _ p) fin_Fp_lmod_abelem //=.",
                        "VernacExtend",
                        "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
                    ]
                },
                {
                    "command": [
                        "by rewrite !cardsT card_primeChar card_matrix mul1n card_Fp.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "exists f; last by exists (invm injf) => x; rewrite ?invmE ?invmK ?im_f ?inE.",
                        "VernacExtend",
                        "3763a4b8db689af316a7372b722bb29806ab4fb6"
                    ]
                },
                {
                    "command": [
                        "move=> a x y; rewrite [a *: _]mulr_natl morphM ?morphX ?inE // zmodXgE.",
                        "VernacExtend",
                        "057edeb0967475c7ea5e8c98c449ddc5613eddc1"
                    ]
                },
                {
                    "command": [
                        "by congr (_ + _); rewrite -scaler_nat natr_Zp.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "primeChar_dimf",
            "line_nb": 191,
            "steps": [
                {
                    "command": [
                        "by rewrite dimvf.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "galL",
            "line_nb": 215,
            "steps": [
                {
                    "command": [
                        "without loss {K} ->: K / K = 1%AS.",
                        "VernacExtend",
                        "87d5e7b04148ee8f2e4efcc847e0dfadae0aa4cb"
                    ]
                },
                {
                    "command": [
                        "by move=> IH_K; apply: galoisS (IH_K _ (erefl _)); rewrite sub1v subvf.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "apply/splitting_galoisField; pose finL := FinFieldExtType L.",
                        "VernacExtend",
                        "41a5d270ebe915260e741ffb363e6d99709a9cff"
                    ]
                },
                {
                    "command": [
                        "exists ('X^#|finL| - 'X); split; first by rewrite rpredB 1?rpredX ?polyOverX.",
                        "VernacExtend",
                        "3763a4b8db689af316a7372b722bb29806ab4fb6"
                    ]
                },
                {
                    "command": [
                        "rewrite (finField_genPoly finL) -big_filter.",
                        "VernacExtend",
                        "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
                    ]
                },
                {
                    "command": [
                        "by rewrite separable_prod_XsubC ?(enum_uniq finL).",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "exists (enum finL); first by rewrite enumT (finField_genPoly finL) eqpxx.",
                        "VernacExtend",
                        "3763a4b8db689af316a7372b722bb29806ab4fb6"
                    ]
                },
                {
                    "command": [
                        "by apply/vspaceP=> x; rewrite memvf seqv_sub_adjoin ?(mem_enum finL).",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "galLgen",
            "line_nb": 225,
            "steps": [
                {
                    "command": [
                        "without loss{K} ->: K / K = 1%AS; last rewrite /order dimv1 expn1.",
                        "VernacExtend",
                        "3763a4b8db689af316a7372b722bb29806ab4fb6"
                    ]
                },
                {
                    "command": [
                        "case/(_ 1%AS)=> // alpha /eqP-defGalL; rewrite /order dimv1 expn1 => Dalpha.",
                        "VernacExtend",
                        "ba44c9d0281a02110ce54645304e6d990debd9c0"
                    ]
                },
                {
                    "command": [
                        "exists (alpha ^+ \\dim K)%g => [|x]; last first.",
                        "VernacExtend",
                        "3763a4b8db689af316a7372b722bb29806ab4fb6"
                    ]
                },
                {
                    "command": [
                        "elim: (\\dim K) => [|n IHn]; first by rewrite gal_id.",
                        "VernacExtend",
                        "3763a4b8db689af316a7372b722bb29806ab4fb6"
                    ]
                },
                {
                    "command": [
                        "by rewrite expgSr galM ?memvf // IHn Dalpha expnSr exprM.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "have sGalLK: 'Gal({:L} / K) \\subset <[alpha]> by rewrite -defGalL galS ?sub1v.",
                        "VernacExtend",
                        "406cde1174359c53bf162a2a18c4eede395555f9"
                    ]
                },
                {
                    "command": [
                        "rewrite /generator {sGalLK}(eq_subG_cyclic _ sGalLK) ?cycle_cyclic ?cycleX //.",
                        "VernacExtend",
                        "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
                    ]
                },
                {
                    "command": [
                        "rewrite -orderE orderXdiv orderE -defGalL -?{1}galois_dim ?dimv1 ?divn1 //.",
                        "VernacExtend",
                        "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
                    ]
                },
                {
                    "command": [
                        "by rewrite field_dimS ?subvf.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "pose f x := x ^+ #|F|.",
                        "VernacExtend",
                        "3c5f04de94609049d978298aa02ff35fb35ea7c7"
                    ]
                },
                {
                    "command": [
                        "have idfP x: reflect (f x = x) (x \\in 1%VS).",
                        "VernacExtend",
                        "406cde1174359c53bf162a2a18c4eede395555f9"
                    ]
                },
                {
                    "command": [
                        "apply: (iffP (vlineP _ _)) => [[a ->] | xFx].",
                        "VernacExtend",
                        "4bd6fa79b17bcd2bfb7af091fb325367a20385d6"
                    ]
                },
                {
                    "command": [
                        "by rewrite -in_algE -[LHS]rmorphX expf_card.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "pose q := map_poly (in_alg L) ('X^#|F| - 'X).",
                        "VernacExtend",
                        "3c5f04de94609049d978298aa02ff35fb35ea7c7"
                    ]
                },
                {
                    "command": [
                        "have: root q x.",
                        "VernacExtend",
                        "406cde1174359c53bf162a2a18c4eede395555f9"
                    ]
                },
                {
                    "command": [
                        "rewrite /q rmorphB /= map_polyXn map_polyX.",
                        "VernacExtend",
                        "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
                    ]
                },
                {
                    "command": [
                        "by rewrite rootE !(hornerE, hornerXn) [x ^+ _]xFx subrr.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "have{q} ->: q = \\prod_(z <- [seq b%:A | b : F]) ('X - z%:P).",
                        "VernacExtend",
                        "406cde1174359c53bf162a2a18c4eede395555f9"
                    ]
                },
                {
                    "command": [
                        "rewrite /q finField_genPoly rmorph_prod big_map enumT.",
                        "VernacExtend",
                        "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
                    ]
                },
                {
                    "command": [
                        "by apply: eq_bigr => b _; rewrite rmorphB /= map_polyX map_polyC.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "by rewrite root_prod_XsubC => /mapP[a]; exists a.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "have fM: rmorphism f.",
                        "VernacExtend",
                        "406cde1174359c53bf162a2a18c4eede395555f9"
                    ]
                },
                {
                    "command": [
                        "rewrite /f; do 2?split=> [x y|]; rewrite ?exprMn ?expr1n //.",
                        "VernacExtend",
                        "77727a14a632d1fc59f513955776bf7c29b79629"
                    ]
                },
                {
                    "command": [
                        "have [p _ charFp] := finCharP F; rewrite (card_primeChar charFp).",
                        "VernacExtend",
                        "aa9d5fbc682ed874cd64b2543ca6c859b978e924"
                    ]
                },
                {
                    "command": [
                        "elim: (logn _ _) => // n IHn; rewrite expnSr !exprM {}IHn.",
                        "VernacExtend",
                        "de65c8193056a36f6dbb91fe21357bd770b140db"
                    ]
                },
                {
                    "command": [
                        "by rewrite -(char_lalg L) in charFp; rewrite -Frobenius_autE rmorphB.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "have fZ: linear f.",
                        "VernacExtend",
                        "406cde1174359c53bf162a2a18c4eede395555f9"
                    ]
                },
                {
                    "command": [
                        "move=> a x y; rewrite -mulr_algl [f _](rmorphD (RMorphism fM)) rmorphM /=.",
                        "VernacExtend",
                        "057edeb0967475c7ea5e8c98c449ddc5613eddc1"
                    ]
                },
                {
                    "command": [
                        "by rewrite (idfP _ _) ?mulr_algl ?memvZ // memv_line.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "have /kAut_to_gal[alpha galLalpha Dalpha]: kAut 1 {:L} (linfun (Linear fZ)).",
                        "VernacExtend",
                        "406cde1174359c53bf162a2a18c4eede395555f9"
                    ]
                },
                {
                    "command": [
                        "rewrite kAutfE; apply/kHomP; split=> [x y _ _ | x /idfP]; rewrite !lfunE //=.",
                        "VernacExtend",
                        "973ea40551376b84174b5c46cddc941522854480"
                    ]
                },
                {
                    "command": [
                        "exact: (rmorphM (RMorphism fM)).",
                        "VernacExtend",
                        "ce637ff86bafca5d8359473e8c02af644dcbdc43"
                    ]
                },
                {
                    "command": [
                        "have{Dalpha} Dalpha: alpha =1 f by move=> a; rewrite -Dalpha ?memvf ?lfunE.",
                        "VernacExtend",
                        "406cde1174359c53bf162a2a18c4eede395555f9"
                    ]
                },
                {
                    "command": [
                        "suffices <-: fixedField [set alpha] = 1%AS.",
                        "VernacExtend",
                        "290ed488b5562e885aa2cac56f3a69b4faa0eaa6"
                    ]
                },
                {
                    "command": [
                        "by rewrite gal_generated /generator; exists alpha.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "apply/vspaceP=> x; apply/fixedFieldP/idfP; rewrite ?memvf // => id_x.",
                        "VernacExtend",
                        "1d32417824786a65f5ff40d1d9dc083be853a4a7"
                    ]
                },
                {
                    "command": [
                        "by rewrite -Dalpha id_x ?set11.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "by move=> _ /set1P->; rewrite Dalpha.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "finField_galois_generator",
            "line_nb": 271,
            "steps": [
                {
                    "command": [
                        "move=> sKE; have [alpha defGalLK Dalpha] := galLgen K.",
                        "VernacExtend",
                        "ccd83c252dcbae3d56f3d057fcb8217878b51901"
                    ]
                },
                {
                    "command": [
                        "have inKL_E: (K <= E <= {:L})%VS by rewrite sKE subvf.",
                        "VernacExtend",
                        "406cde1174359c53bf162a2a18c4eede395555f9"
                    ]
                },
                {
                    "command": [
                        "have nKE: normalField K E by have/and3P[] := finField_galois sKE.",
                        "VernacExtend",
                        "406cde1174359c53bf162a2a18c4eede395555f9"
                    ]
                },
                {
                    "command": [
                        "have galLKalpha: alpha \\in 'Gal({:L} / K).",
                        "VernacExtend",
                        "406cde1174359c53bf162a2a18c4eede395555f9"
                    ]
                },
                {
                    "command": [
                        "by rewrite (('Gal(_ / _) =P _) defGalLK) cycle_id.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "exists (normalField_cast _ alpha) => [|x Ex]; last first.",
                        "VernacExtend",
                        "3763a4b8db689af316a7372b722bb29806ab4fb6"
                    ]
                },
                {
                    "command": [
                        "by rewrite (normalField_cast_eq inKL_E).",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "rewrite /generator -(morphim_cycle (normalField_cast_morphism inKL_E nKE)) //.",
                        "VernacExtend",
                        "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
                    ]
                },
                {
                    "command": [
                        "by rewrite -((_ =P <[alpha]>) defGalLK) normalField_img.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "Fermat's_little_theorem",
            "line_nb": 283,
            "steps": [
                {
                    "command": [
                        "move: K a; wlog [{L}L -> K a]: L / exists galL : splittingFieldType F, L = galL.",
                        "VernacExtend",
                        "6dbaea969dd2e1a08b50e55e2e4c4949c4d27249"
                    ]
                },
                {
                    "command": [
                        "by pose galL := (FinSplittingFieldType F L) => /(_ galL); apply; exists galL.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "have /galois_fixedField fixLK := finField_galois (subvf K).",
                        "VernacExtend",
                        "406cde1174359c53bf162a2a18c4eede395555f9"
                    ]
                },
                {
                    "command": [
                        "have [alpha defGalLK Dalpha] := finField_galois_generator (subvf K).",
                        "VernacExtend",
                        "406cde1174359c53bf162a2a18c4eede395555f9"
                    ]
                },
                {
                    "command": [
                        "rewrite -Dalpha ?memvf // -{1}fixLK (('Gal(_ / _) =P _) defGalLK).",
                        "VernacExtend",
                        "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
                    ]
                },
                {
                    "command": [
                        "rewrite /cycle -gal_generated (galois_fixedField _) ?fixedField_galois //.",
                        "VernacExtend",
                        "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
                    ]
                },
                {
                    "command": [
                        "by apply/fixedFieldP/eqP=> [|-> | alpha_x _ /set1P->]; rewrite ?memvf ?set11.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "lregR",
            "line_nb": 385,
            "steps": [
                {
                    "command": [
                        "by move=> xnz; apply: mulrI0_lreg => y /domR/orP[/idPn | /eqP].",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "finDomain_field",
            "line_nb": 388,
            "steps": [
                {
                    "command": [
                        "move=> x /lregR-regx; apply/unitrP; exists (invF regx 1).",
                        "VernacExtend",
                        "f7280c147f54c92c41b6690373a21e3439698808"
                    ]
                },
                {
                    "command": [
                        "by split; first apply: (regx); rewrite ?mulrA f_invF // mulr1 mul1r.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        }
    ]
}