{
    "filename": "mathcomp/algebra/ssralg.v",
    "coq_project": "math-comp",
    "vernac_cmds": [
        [
            "Require Import mathcomp.ssreflect.ssreflect.",
            "VernacRequire",
            "85e251063dc2b5a9653f7bb76dcd176ed36b42a9"
        ],
        [
            "From mathcomp Require Import ssrfun ssrbool eqtype ssrnat div seq choice fintype.",
            "VernacRequire",
            "2b25058518114ec0e7721db53b935146c42f3555"
        ],
        [
            "From mathcomp Require Import finfun bigop prime binomial.",
            "VernacRequire",
            "f46a2b4a07be2c8071c56077964b06015b86e765"
        ],
        [
            "Set Implicit Arguments.",
            "VernacSetOption",
            "9e84ff8896f028601d8aded48c1d4aebe60aa584"
        ],
        [
            "Unset Strict Implicit.",
            "VernacUnsetOption",
            "2842adaf6959318f2042805935c46f513bdc0348"
        ],
        [
            "Unset Printing Implicit Defensive.",
            "VernacUnsetOption",
            "444e5f0be4b25d9b1fd556943a447ec10046d151"
        ],
        [
            "Reserved Notation \"+%R\" (at level 0).",
            "VernacSyntaxExtension",
            "97a90b8b0326cb3e2878730fa94240e8482d15fb"
        ],
        [
            "Reserved Notation \"-%R\" (at level 0).",
            "VernacSyntaxExtension",
            "eba3c3e6d4a95ae9771a6895f9197a0bf7e73d78"
        ],
        [
            "Reserved Notation \"*%R\" (at level 0, format \" *%R\").",
            "VernacSyntaxExtension",
            "59fe2c70bbacf2e47c7662cf3e00538aec57cdf4"
        ],
        [
            "Reserved Notation \"*:%R\" (at level 0, format \" *:%R\").",
            "VernacSyntaxExtension",
            "97b0129acda0cd04e0a8a19c98c1314dab243942"
        ],
        [
            "Reserved Notation \"n %:R\" (at level 2, left associativity, format \"n %:R\").",
            "VernacSyntaxExtension",
            "f690422be750bf327f9c534cba6b4dcbde53d834"
        ],
        [
            "Reserved Notation \"k %:A\" (at level 2, left associativity, format \"k %:A\").",
            "VernacSyntaxExtension",
            "46540644b4bd81805f959ecfee668dc3f50b204b"
        ],
        [
            "Reserved Notation \"[ 'char' F ]\" (at level 0, format \"[ 'char' F ]\").",
            "VernacSyntaxExtension",
            "de5ec8d10eab9fb3de012b0cbf5be7abd4418ffa"
        ],
        [
            "Reserved Notation \"x %:T\" (at level 2, left associativity, format \"x %:T\").",
            "VernacSyntaxExtension",
            "bdf543074317632e424cf56254546ff1d1405f87"
        ],
        [
            "Reserved Notation \"''X_' i\" (at level 8, i at level 2, format \"''X_' i\").",
            "VernacSyntaxExtension",
            "dbe123d9a2e9417368ad05d392e531e86465a412"
        ],
        [
            "Reserved Notation \"''exists' ''X_' i , f\" (at level 199, i at level 2, right associativity, format \"'[hv' ''exists' ''X_' i , '/ ' f ']'\").",
            "VernacSyntaxExtension",
            "362cb3a8693f94c66d257ca702e5025fedf26e7f"
        ],
        [
            "Reserved Notation \"''forall' ''X_' i , f\" (at level 199, i at level 2, right associativity, format \"'[hv' ''forall' ''X_' i , '/ ' f ']'\").",
            "VernacSyntaxExtension",
            "681212fa7415f06639584acd98453ed69799fea2"
        ],
        [
            "Reserved Notation \"x ^f\" (at level 2, left associativity, format \"x ^f\").",
            "VernacSyntaxExtension",
            "058fb665dc3e313962beee63a25f0aa18adbf5dc"
        ],
        [
            "Reserved Notation \"\\0\" (at level 0).",
            "VernacSyntaxExtension",
            "3b8d07397474ffb26d9c6a21ab6820b524f93ba7"
        ],
        [
            "Reserved Notation \"f \\+ g\" (at level 50, left associativity).",
            "VernacSyntaxExtension",
            "8b05c6c9ef16d7d3385aee6f6d37686d1349213b"
        ],
        [
            "Reserved Notation \"f \\- g\" (at level 50, left associativity).",
            "VernacSyntaxExtension",
            "10eb779a5b6d48a994b21bc314772f51adc30fbf"
        ],
        [
            "Reserved Notation \"a \\*o f\" (at level 40).",
            "VernacSyntaxExtension",
            "adb42d5ba4aef56b48e11e4f270dd382a02a9056"
        ],
        [
            "Reserved Notation \"a \\o* f\" (at level 40).",
            "VernacSyntaxExtension",
            "b05a8ccf2787cc7aa40a1a03c49fc75f12e14617"
        ],
        [
            "Reserved Notation \"a \\*: f\" (at level 40).",
            "VernacSyntaxExtension",
            "14728e0216773b0e260a6802d6d0bf50f9b26fa4"
        ],
        [
            "Delimit Scope ring_scope with R.",
            "VernacDelimiters",
            "951b7cce7872867139ad9cef42375176f0fd677f"
        ],
        [
            "Delimit Scope term_scope with T.",
            "VernacDelimiters",
            "a30e3203cc2b32a60af90adec3d47ab708902aa8"
        ],
        [
            "Local Open Scope ring_scope.",
            "VernacOpenCloseScope",
            "fb9da4a291533574d328be8c8a69d90a14641928"
        ],
        [
            "Module Import GRing.",
            "VernacDefineModule",
            "43253ea484f22fcfbc4905fc60bae89134307d3d"
        ],
        [
            "Import Monoid.Theory.",
            "VernacImport",
            "668847cb44619a233f3430564d48b00fafb02450"
        ],
        [
            "Module Zmodule.",
            "VernacDefineModule",
            "25bf6169acfb8d2655754fab334cdb51dd825942"
        ],
        [
            "Record mixin_of (V : Type) : Type := Mixin { zero : V; opp : V -> V; add : V -> V -> V; _ : associative add; _ : commutative add; _ : left_id zero add; _ : left_inverse zero opp add }.",
            "VernacInductive",
            "29618f43caa3a6da62e1b5c8bc570a01f271bc3e"
        ],
        [
            "Section ClassDef.",
            "VernacBeginSection",
            "a5b792261e6c496f5a1a8d0f7da8c96156ca2fed"
        ],
        [
            "Record class_of T := Class { base : Choice.class_of T; mixin : mixin_of T }.",
            "VernacInductive",
            "c8715ec343d3d1feee4020d2f0adbdca578c0d18"
        ],
        [
            "Local Coercion base : class_of >-> Choice.class_of.",
            "VernacCoercion",
            "d83493046a5d9087ea18e45eb84fd49a84eedb81"
        ],
        [
            "Structure type := Pack {sort; _ : class_of sort}.",
            "VernacInductive",
            "42b0161295055637e72e97af35c3d44479cc946b"
        ],
        [
            "Local Coercion sort : type >-> Sortclass.",
            "VernacCoercion",
            "e4478cd37693106f84ed020bd073c4970dc87530"
        ],
        [
            "Variables (T : Type) (cT : type).",
            "VernacAssumption",
            "eb35f5737a32cba56acb24ac87490232dc2dfcb9"
        ],
        [
            "Definition class := let: Pack _ c as cT' := cT return class_of cT' in c.",
            "VernacDefinition",
            "0e4a80652d474f8010316ff26a5322b5207d82a3"
        ],
        [
            "Definition clone c of phant_id class c := @Pack T c.",
            "VernacDefinition",
            "e082321bed0d5d4d78139419fead577313b82668"
        ],
        [
            "Let xT := let: Pack T _ := cT in T.",
            "VernacDefinition",
            "0a87c77e3a5ac8febf0910b95d7b998b7cb9cf6d"
        ],
        [
            "Notation xclass := (class : class_of xT).",
            "VernacSyntacticDefinition",
            "e136614fedd7b331a23b54adad5b0bce11895ed4"
        ],
        [
            "Definition pack m := fun bT b & phant_id (Choice.class bT) b => Pack (@Class T b m).",
            "VernacDefinition",
            "1052f934c21b4426e2b39eec9220bf0f553c822e"
        ],
        [
            "Definition eqType := @Equality.Pack cT xclass.",
            "VernacDefinition",
            "6139f412b89e62ff13c9c707c885de4b39151e9d"
        ],
        [
            "Definition choiceType := @Choice.Pack cT xclass.",
            "VernacDefinition",
            "f62d3090382a5ea70b978e0633e0376c4558db55"
        ],
        [
            "End ClassDef.",
            "VernacEndSegment",
            "bce1c8832045d8291c44a3fb67e9767782d2745b"
        ],
        [
            "Module Exports.",
            "VernacDefineModule",
            "d4a1114ec53f746523a7dec57823f7f03e51fa24"
        ],
        [
            "Coercion base : class_of >-> Choice.class_of.",
            "VernacCoercion",
            "0fd77195a8e6f400b16548cfc0dc57a383882923"
        ],
        [
            "Coercion mixin : class_of >-> mixin_of.",
            "VernacCoercion",
            "6e94763ee53fdac946511987d81c3f6daccc67c3"
        ],
        [
            "Coercion sort : type >-> Sortclass.",
            "VernacCoercion",
            "9e1cbf06afa0d2731dbb8bfd6b9ae32be22a8ae7"
        ],
        [
            "Bind Scope ring_scope with sort.",
            "VernacBindScope",
            "ac04d07dda43f0036576b2a438f8490c7ac4d59b"
        ],
        [
            "Coercion eqType : type >-> Equality.type.",
            "VernacCoercion",
            "58308c67b5e73c9e004d57c486a5071598a25e8c"
        ],
        [
            "Canonical eqType.",
            "VernacCanonical",
            "dd1ac877a396f552e2a8f23e59be45903d8b15ad"
        ],
        [
            "Coercion choiceType : type >-> Choice.type.",
            "VernacCoercion",
            "bdc8d608f4b963a8606cd33ad18b1977a8bcb78d"
        ],
        [
            "Canonical choiceType.",
            "VernacCanonical",
            "af7a1759ddd13e2b7e4e1ce16b6a3595a77b5659"
        ],
        [
            "Notation zmodType := type.",
            "VernacSyntacticDefinition",
            "28bd9e2837f0ec65a447a079344cb35acbb7e2e4"
        ],
        [
            "Notation ZmodType T m := (@pack T m _ _ id).",
            "VernacSyntacticDefinition",
            "5083fa7121e216e9455633b13e06b7d25c1216bb"
        ],
        [
            "Notation ZmodMixin := Mixin.",
            "VernacSyntacticDefinition",
            "e7d46574fa427061761a55b16e6a001ce094661d"
        ],
        [
            "Notation \"[ 'zmodType' 'of' T 'for' cT ]\" := (@clone T cT _ idfun) (at level 0, format \"[ 'zmodType' 'of' T 'for' cT ]\") : form_scope.",
            "VernacNotation",
            "9b55b00137205e67af51c1d51544fcd83c39a21c"
        ],
        [
            "Notation \"[ 'zmodType' 'of' T ]\" := (@clone T _ _ id) (at level 0, format \"[ 'zmodType' 'of' T ]\") : form_scope.",
            "VernacNotation",
            "fb4c2b6c4daa69afe6084ca7e78e9769da34ecc9"
        ],
        [
            "End Exports.",
            "VernacEndSegment",
            "71efedae7ccffd696e1ffe5d8ae6baa8a4484918"
        ],
        [
            "End Zmodule.",
            "VernacEndSegment",
            "119828d54949a4099cd3ff33eddfda25fdcd5d5d"
        ],
        [
            "Import Zmodule.Exports.",
            "VernacImport",
            "5177f06c4b16049920bc1fb163a79fa6a066b330"
        ],
        [
            "Definition zero V := Zmodule.zero (Zmodule.class V).",
            "VernacDefinition",
            "21d15fab227f7cac227ead73e55d5df67029bb18"
        ],
        [
            "Definition opp V := Zmodule.opp (Zmodule.class V).",
            "VernacDefinition",
            "3fa7fd64a342996148eb52167202f5022ce9863f"
        ],
        [
            "Definition add V := Zmodule.add (Zmodule.class V).",
            "VernacDefinition",
            "ddf25db7d24b6bda34dbd1079b211da9b944eb24"
        ],
        [
            "Local Notation \"0\" := (zero _) : ring_scope.",
            "VernacNotation",
            "c2524ca7ac841e863ebd0058d34e750cd7a811d6"
        ],
        [
            "Local Notation \"-%R\" := (@opp _) : ring_scope.",
            "VernacNotation",
            "269e65b68d159eaf52534807c630dcee2551571e"
        ],
        [
            "Local Notation \"- x\" := (opp x) : ring_scope.",
            "VernacNotation",
            "f529ebf3571d3e90bff031f09e12535066927e26"
        ],
        [
            "Local Notation \"+%R\" := (@add _) : ring_scope.",
            "VernacNotation",
            "238188a51fb8b822cc03d653f634c0c467ea3562"
        ],
        [
            "Local Notation \"x + y\" := (add x y) : ring_scope.",
            "VernacNotation",
            "b86c7d503b87685e06b7ece02c9ef2e0845109be"
        ],
        [
            "Local Notation \"x - y\" := (x + - y) : ring_scope.",
            "VernacNotation",
            "f06d2438d4f3a4ddf5485c60bf009f61ebdf056e"
        ],
        [
            "Definition natmul V x n := nosimpl iterop _ n +%R x (zero V).",
            "VernacDefinition",
            "f6d071cb483caca65b505ee7df4c713ffcd151cf"
        ],
        [
            "Local Notation \"x *+ n\" := (natmul x n) : ring_scope.",
            "VernacNotation",
            "bb6f0be8d3f6d5a3ebef46a7b317d69e466a0ea5"
        ],
        [
            "Local Notation \"x *- n\" := (- (x *+ n)) : ring_scope.",
            "VernacNotation",
            "3034bc95c7f380a9a96badb69dda175070d86e87"
        ],
        [
            "Local Notation \"\\sum_ ( i <- r | P ) F\" := (\\big[+%R/0]_(i <- r | P) F).",
            "VernacNotation",
            "92c2522d37abe026076cb2d8407b385b09a701da"
        ],
        [
            "Local Notation \"\\sum_ ( m <= i < n ) F\" := (\\big[+%R/0]_(m <= i < n) F).",
            "VernacNotation",
            "f156f1db9a604667635faa590e8c4a14ff92c96c"
        ],
        [
            "Local Notation \"\\sum_ ( i < n ) F\" := (\\big[+%R/0]_(i < n) F).",
            "VernacNotation",
            "cbe1e5df02c034d66bdf607fba6f2de8e6086422"
        ],
        [
            "Local Notation \"\\sum_ ( i 'in' A ) F\" := (\\big[+%R/0]_(i in A) F).",
            "VernacNotation",
            "5f6fe778ed103bbe5c71071505134065ffda7e30"
        ],
        [
            "Local Notation \"s `_ i\" := (nth 0 s i) : ring_scope.",
            "VernacNotation",
            "7e7469f9077eca3fdd708541943a3e879d042d25"
        ],
        [
            "Section ZmoduleTheory.",
            "VernacBeginSection",
            "16bf9b58ed9c386087e2d5bcaa62ebb95a99fad0"
        ],
        [
            "Variable V : zmodType.",
            "VernacAssumption",
            "20fc0561595510560fba41d84ed764f8530e7ac1"
        ],
        [
            "Implicit Types x y : V.",
            "VernacReserve",
            "2db50cd26c6b8d662bc602fd9b8289fc24d7e3cc"
        ],
        [
            "Lemma addrA : @associative V +%R.",
            "VernacStartTheoremProof",
            "68f09162aa865cfbb79c7eefe4d901468eb947d9"
        ],
        [
            "by case V => T [? []].",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma addrC : @commutative V V +%R.",
            "VernacStartTheoremProof",
            "9cccf2c13730eaf7c0b5677127a47b1b39a3b679"
        ],
        [
            "by case V => T [? []].",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma add0r : @left_id V V 0 +%R.",
            "VernacStartTheoremProof",
            "6e14cddc0c4868703cadb254a11af3ea2028dba0"
        ],
        [
            "by case V => T [? []].",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma addNr : @left_inverse V V V 0 -%R +%R.",
            "VernacStartTheoremProof",
            "38334c3c01779cafe0fe47a27586fa182b47054a"
        ],
        [
            "by case V => T [? []].",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma addr0 : @right_id V V 0 +%R.",
            "VernacStartTheoremProof",
            "b7739a0aaf9cab087e74bf493d25337f31e030b9"
        ],
        [
            "by move=> x; rewrite addrC add0r.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma addrN : @right_inverse V V V 0 -%R +%R.",
            "VernacStartTheoremProof",
            "3a1e46f87f9c3e6a149e31a12239e3ad37bf4923"
        ],
        [
            "by move=> x; rewrite addrC addNr.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Definition subrr := addrN.",
            "VernacDefinition",
            "5076063b4c3f183d852abf7fdead7229fd9da694"
        ],
        [
            "Canonical add_monoid := Monoid.Law addrA add0r addr0.",
            "VernacDefinition",
            "65485e090e8e87809d4b698b0668a8e36baad19d"
        ],
        [
            "Canonical add_comoid := Monoid.ComLaw addrC.",
            "VernacDefinition",
            "f68a6b6a046ab0addd057eef5771b3524151ef5d"
        ],
        [
            "Lemma addrCA : @left_commutative V V +%R.",
            "VernacStartTheoremProof",
            "9d5815ad11f17ef8358ec869d9a22141357ed22e"
        ],
        [
            "exact: mulmCA.",
            "VernacExtend",
            "ce637ff86bafca5d8359473e8c02af644dcbdc43"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma addrAC : @right_commutative V V +%R.",
            "VernacStartTheoremProof",
            "8b60aa2e111f4a42032b37433c6d830deff74fdc"
        ],
        [
            "exact: mulmAC.",
            "VernacExtend",
            "ce637ff86bafca5d8359473e8c02af644dcbdc43"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma addrACA : @interchange V +%R +%R.",
            "VernacStartTheoremProof",
            "5796f6c5fd1d55649c91e84faef9f75ddc1feaf9"
        ],
        [
            "exact: mulmACA.",
            "VernacExtend",
            "ce637ff86bafca5d8359473e8c02af644dcbdc43"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma addKr : @left_loop V V -%R +%R.",
            "VernacStartTheoremProof",
            "c8614bfd61be46421fe8da8a8228a087bb60f7ba"
        ],
        [
            "by move=> x y; rewrite addrA addNr add0r.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma addNKr : @rev_left_loop V V -%R +%R.",
            "VernacStartTheoremProof",
            "d5e6289b99ffd8f4f6027770c2919097502a7ca0"
        ],
        [
            "by move=> x y; rewrite addrA addrN add0r.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma addrK : @right_loop V V -%R +%R.",
            "VernacStartTheoremProof",
            "741c0a7cb06ab4717d10cf3aba8505f308a3e209"
        ],
        [
            "by move=> x y; rewrite -addrA addrN addr0.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma addrNK : @rev_right_loop V V -%R +%R.",
            "VernacStartTheoremProof",
            "73ceb5a4fe940d80e504bc1715e5e96ef0479422"
        ],
        [
            "by move=> x y; rewrite -addrA addNr addr0.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Definition subrK := addrNK.",
            "VernacDefinition",
            "05324dd606d7e8366f091436f0fee3a1bc65527f"
        ],
        [
            "Lemma subKr x : involutive (fun y => x - y).",
            "VernacStartTheoremProof",
            "46a685a34795b6979e0d945e5d23b1e14fb92016"
        ],
        [
            "by move=> y; apply: (canLR (addrK _)); rewrite addrC subrK.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma addrI : @right_injective V V V +%R.",
            "VernacStartTheoremProof",
            "7fb974cdc341868a7b3527249a2e91b67522752c"
        ],
        [
            "by move=> x; apply: can_inj (addKr x).",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma addIr : @left_injective V V V +%R.",
            "VernacStartTheoremProof",
            "0abdfb7e40c5fe592d904ad84c6cfc518d482925"
        ],
        [
            "by move=> y; apply: can_inj (addrK y).",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma subrI : right_injective (fun x y => x - y).",
            "VernacStartTheoremProof",
            "0df5eb6f15d11ef787e7bb0d6c945314ebd0c224"
        ],
        [
            "by move=> x; apply: can_inj (subKr x).",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma subIr : left_injective (fun x y => x - y).",
            "VernacStartTheoremProof",
            "b2746e32b227e99e8eef1d6e93ea2cf8f86b315e"
        ],
        [
            "by move=> y; apply: addIr.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma opprK : @involutive V -%R.",
            "VernacStartTheoremProof",
            "cff520194d1f71aa46e1ec78be3bf1228c64edd2"
        ],
        [
            "by move=> x; apply: (@subIr x); rewrite addNr addrN.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma oppr_inj : @injective V V -%R.",
            "VernacStartTheoremProof",
            "8fa64bf1e808a4fe106a3bf0de1d5ed01a7b00a0"
        ],
        [
            "exact: inv_inj opprK.",
            "VernacExtend",
            "ce637ff86bafca5d8359473e8c02af644dcbdc43"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma oppr0 : -0 = 0 :> V.",
            "VernacStartTheoremProof",
            "814e304656e7bf77661bdc3d0eed65fa98bcd753"
        ],
        [
            "by rewrite -[-0]add0r subrr.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma oppr_eq0 x : (- x == 0) = (x == 0).",
            "VernacStartTheoremProof",
            "1db86fc3b53d93721756a8f9d03436ab29e89256"
        ],
        [
            "by rewrite (inv_eq opprK) oppr0.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma subr0 x : x - 0 = x.",
            "VernacStartTheoremProof",
            "d2065276dec2e3b6a524702dafb0f96fbe4b82e1"
        ],
        [
            "by rewrite oppr0 addr0.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma sub0r x : 0 - x = - x.",
            "VernacStartTheoremProof",
            "62fad4b2b513062c024c1858c508462eeed7f213"
        ],
        [
            "by rewrite add0r.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma opprB x y : - (x - y) = y - x.",
            "VernacStartTheoremProof",
            "92a38527fa0fdacb08c401d376953a42a9934a25"
        ],
        [
            "by apply: (canRL (addrK x)); rewrite addrC subKr.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma opprD : {morph -%R: x y / x + y : V}.",
            "VernacStartTheoremProof",
            "60a1d4bce6fb0def5713ae49a50f73f7fb8e6409"
        ],
        [
            "by move=> x y; rewrite -[y in LHS]opprK opprB addrC.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma addrKA z x y : (x + z) - (z + y) = x - y.",
            "VernacStartTheoremProof",
            "9665b7c407f7019468d7afbdd3738fcc1236f10c"
        ],
        [
            "by rewrite opprD addrA addrK.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma subrKA z x y : (x - z) + (z + y) = x + y.",
            "VernacStartTheoremProof",
            "7238954fec56f2132f3208688f2243c08b707dfa"
        ],
        [
            "by rewrite addrA addrNK.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma addr0_eq x y : x + y = 0 -> - x = y.",
            "VernacStartTheoremProof",
            "11f8b13e351072d9d0f5dc03a2933b70c088c530"
        ],
        [
            "by rewrite -[-x]addr0 => <-; rewrite addKr.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma subr0_eq x y : x - y = 0 -> x = y.",
            "VernacStartTheoremProof",
            "598610c1a903060f1dd6b401d5caff5f146516c2"
        ],
        [
            "by move/addr0_eq/oppr_inj.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma subr_eq x y z : (x - z == y) = (x == y + z).",
            "VernacStartTheoremProof",
            "a430b90f26639051d6fd79625c2d9628b7f97bfa"
        ],
        [
            "exact: can2_eq (subrK z) (addrK z) x y.",
            "VernacExtend",
            "ce637ff86bafca5d8359473e8c02af644dcbdc43"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma subr_eq0 x y : (x - y == 0) = (x == y).",
            "VernacStartTheoremProof",
            "48e28656d4216a85ecb28fdce3e335ae51d79c58"
        ],
        [
            "by rewrite subr_eq add0r.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma addr_eq0 x y : (x + y == 0) = (x == - y).",
            "VernacStartTheoremProof",
            "9cd11a2e74001911a108be778d40449dcdccbc34"
        ],
        [
            "by rewrite -[y in LHS]opprK subr_eq0.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma eqr_opp x y : (- x == - y) = (x == y).",
            "VernacStartTheoremProof",
            "3fc2cef7f370471051ca972b18917b148caff82a"
        ],
        [
            "exact: can_eq opprK x y.",
            "VernacExtend",
            "ce637ff86bafca5d8359473e8c02af644dcbdc43"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma eqr_oppLR x y : (- x == y) = (x == - y).",
            "VernacStartTheoremProof",
            "960357dc01653e9e627458710e1eff146172aa9d"
        ],
        [
            "exact: inv_eq opprK x y.",
            "VernacExtend",
            "ce637ff86bafca5d8359473e8c02af644dcbdc43"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma mulr0n x : x *+ 0 = 0.",
            "VernacStartTheoremProof",
            "c22aa89ec4ef2f95a99ac90793abb2bbf63871d3"
        ],
        [
            "by [].",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma mulr1n x : x *+ 1 = x.",
            "VernacStartTheoremProof",
            "f015a652ca43d61d9eca8195ab5335f9003c1411"
        ],
        [
            "by [].",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma mulr2n x : x *+ 2 = x + x.",
            "VernacStartTheoremProof",
            "00e51cddbe0c47df0fac80888707835183022f21"
        ],
        [
            "by [].",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma mulrS x n : x *+ n.+1 = x + x *+ n.",
            "VernacStartTheoremProof",
            "5242b3cdcb0e97ed4f4fbe188971951b149381ac"
        ],
        [
            "by case: n => //=; rewrite addr0.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma mulrSr x n : x *+ n.+1 = x *+ n + x.",
            "VernacStartTheoremProof",
            "7e896b6fa0a62a39d94e5cfbe8defcafa96ebb56"
        ],
        [
            "by rewrite addrC mulrS.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma mulrb x (b : bool) : x *+ b = (if b then x else 0).",
            "VernacStartTheoremProof",
            "6947ba9999a189a3fc21eafcd9816d47fb98cc14"
        ],
        [
            "by case: b.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma mul0rn n : 0 *+ n = 0 :> V.",
            "VernacStartTheoremProof",
            "70cae4c9f0aefa658d2419f8b2ad6fd5e8d3c48a"
        ],
        [
            "by elim: n => // n IHn; rewrite mulrS add0r.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma mulNrn x n : (- x) *+ n = x *- n.",
            "VernacStartTheoremProof",
            "b6feaf9674b04bab6d09115ddcc93f4813fd38e0"
        ],
        [
            "by elim: n => [|n IHn]; rewrite ?oppr0 // !mulrS opprD IHn.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma mulrnDl n : {morph (fun x => x *+ n) : x y / x + y}.",
            "VernacStartTheoremProof",
            "6d0387abd6ce8500a0343c5fb67421fae6f54b99"
        ],
        [
            "move=> x y; elim: n => [|n IHn]; rewrite ?addr0 // !mulrS.",
            "VernacExtend",
            "cbbd752ffe762291637c91622d62599b0c60d123"
        ],
        [
            "by rewrite addrCA -!addrA -IHn -addrCA.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma mulrnDr x m n : x *+ (m + n) = x *+ m + x *+ n.",
            "VernacStartTheoremProof",
            "466cb0fc5d9835671d5eb233c2b8b8d4d8d4645b"
        ],
        [
            "elim: m => [|m IHm]; first by rewrite add0r.",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "by rewrite !mulrS IHm addrA.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma mulrnBl n : {morph (fun x => x *+ n) : x y / x - y}.",
            "VernacStartTheoremProof",
            "d7e08e9dcf18a5989a24dd3209bf978e9e52c8aa"
        ],
        [
            "move=> x y; elim: n => [|n IHn]; rewrite ?subr0 // !mulrS -!addrA; congr(_ + _).",
            "VernacExtend",
            "c7b7130081c973b6de18fa852d0e11215e34422b"
        ],
        [
            "by rewrite addrC IHn -!addrA opprD [_ - y]addrC.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma mulrnBr x m n : n <= m -> x *+ (m - n) = x *+ m - x *+ n.",
            "VernacStartTheoremProof",
            "4a4aab6a9ad6df43ada0343e093c30f75640eab4"
        ],
        [
            "elim: m n => [|m IHm] [|n le_n_m]; rewrite ?subr0 // {}IHm //.",
            "VernacExtend",
            "de65c8193056a36f6dbb91fe21357bd770b140db"
        ],
        [
            "by rewrite mulrSr mulrS opprD addrA addrK.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma mulrnA x m n : x *+ (m * n) = x *+ m *+ n.",
            "VernacStartTheoremProof",
            "12a26d9e8bf00594c059eff55cd4390dfa05aec1"
        ],
        [
            "by rewrite mulnC; elim: n => //= n IHn; rewrite mulrS mulrnDr IHn.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma mulrnAC x m n : x *+ m *+ n = x *+ n *+ m.",
            "VernacStartTheoremProof",
            "d17909365ecb6f7e3ef01738895fc767506f5268"
        ],
        [
            "by rewrite -!mulrnA mulnC.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma sumrN I r P (F : I -> V) : (\\sum_(i <- r | P i) - F i = - (\\sum_(i <- r | P i) F i)).",
            "VernacStartTheoremProof",
            "061862119c4c63402db3b3621ff2ed070798f360"
        ],
        [
            "by rewrite (big_morph _ opprD oppr0).",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma sumrB I r (P : pred I) (F1 F2 : I -> V) : \\sum_(i <- r | P i) (F1 i - F2 i) = \\sum_(i <- r | P i) F1 i - \\sum_(i <- r | P i) F2 i.",
            "VernacStartTheoremProof",
            "e615493521e018e4502498af925c4d5d0695becf"
        ],
        [
            "by rewrite -sumrN -big_split /=.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma sumrMnl I r P (F : I -> V) n : \\sum_(i <- r | P i) F i *+ n = (\\sum_(i <- r | P i) F i) *+ n.",
            "VernacStartTheoremProof",
            "448347adcf1087c78ae8dafede5f06cfc2e4dbf7"
        ],
        [
            "by rewrite (big_morph _ (mulrnDl n) (mul0rn _)).",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma sumrMnr x I r P (F : I -> nat) : \\sum_(i <- r | P i) x *+ F i = x *+ (\\sum_(i <- r | P i) F i).",
            "VernacStartTheoremProof",
            "53117a721059fc9d44d8c7b593fa5b9c6941e659"
        ],
        [
            "by rewrite (big_morph _ (mulrnDr x) (erefl _)).",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma sumr_const (I : finType) (A : pred I) (x : V) : \\sum_(i in A) x = x *+ #|A|.",
            "VernacStartTheoremProof",
            "6faff1c414c9354b84c4234d14ca1dd08a36d698"
        ],
        [
            "by rewrite big_const -iteropE.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma telescope_sumr n m (f : nat -> V) : n <= m -> \\sum_(n <= k < m) (f k.+1 - f k) = f m - f n.",
            "VernacStartTheoremProof",
            "1647446088a7c800f0c50be59846fd5b8055fbdf"
        ],
        [
            "rewrite leq_eqVlt => /predU1P[-> | ]; first by rewrite subrr big_geq.",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "case: m => // m lenm; rewrite sumrB big_nat_recr // big_nat_recl //=.",
            "VernacExtend",
            "90a2acb29b7a5304b0ab6ba5269c420638ddef63"
        ],
        [
            "by rewrite addrC opprD addrA subrK addrC.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Section ClosedPredicates.",
            "VernacBeginSection",
            "867c96696ba4b124a23204102a22dbe3e9a8b988"
        ],
        [
            "Variable S : predPredType V.",
            "VernacAssumption",
            "8d29f06394746277a2ed9736458b24217276c15f"
        ],
        [
            "Definition addr_closed := 0 \\in S /\\ {in S &, forall u v, u + v \\in S}.",
            "VernacDefinition",
            "1e4ce24e4e8d57ddecd2382c8fdcf90d0697e788"
        ],
        [
            "Definition oppr_closed := {in S, forall u, - u \\in S}.",
            "VernacDefinition",
            "240f06c9fbfd5ece56c69dfc1dcd5e2c37f4a33d"
        ],
        [
            "Definition subr_2closed := {in S &, forall u v, u - v \\in S}.",
            "VernacDefinition",
            "533c5b5f2bad89e6e50c0437116eb90f18ca083c"
        ],
        [
            "Definition zmod_closed := 0 \\in S /\\ subr_2closed.",
            "VernacDefinition",
            "26a6c3a13752da48387046ca34ecde9f5d0c58a1"
        ],
        [
            "Lemma zmod_closedN : zmod_closed -> oppr_closed.",
            "VernacStartTheoremProof",
            "b5bb17f4002d3d824445fab562f59527e6166d6d"
        ],
        [
            "by case=> S0 SB y Sy; rewrite -sub0r !SB.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma zmod_closedD : zmod_closed -> addr_closed.",
            "VernacStartTheoremProof",
            "bfb11dd5cfde8b7dd203804bfe0b43ce388709ec"
        ],
        [
            "by case=> S0 SB; split=> // y z Sy Sz; rewrite -[z]opprK -[- z]sub0r !SB.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "End ClosedPredicates.",
            "VernacEndSegment",
            "6238d5ef0852f49433340e32287fd9e002b055ef"
        ],
        [
            "End ZmoduleTheory.",
            "VernacEndSegment",
            "55b7c55601197b3bcf56cba3def2c6f3a68d8890"
        ],
        [
            "Arguments addrI {V} y [x1 x2].",
            "VernacArguments",
            "0eaba4730dd94e6b4e162cdfd54d8df3f1cc13cf"
        ],
        [
            "Arguments addIr {V} x [x1 x2].",
            "VernacArguments",
            "9f2caeb64d6f9ff1977b186feeb41ffd420d1611"
        ],
        [
            "Arguments opprK {V}.",
            "VernacArguments",
            "fbb3f689b085c59f5c2b2a33030a7daeba8e25c9"
        ],
        [
            "Arguments oppr_inj {V} [x1 x2].",
            "VernacArguments",
            "2fd259d2f00e4aef653a0d83e4ad71a1efc49a33"
        ],
        [
            "Module Ring.",
            "VernacDefineModule",
            "5bf4f69ca3a3fb532f140968d6684a6996ca9694"
        ],
        [
            "Record mixin_of (R : zmodType) : Type := Mixin { one : R; mul : R -> R -> R; _ : associative mul; _ : left_id one mul; _ : right_id one mul; _ : left_distributive mul +%R; _ : right_distributive mul +%R; _ : one != 0 }.",
            "VernacInductive",
            "91bb09a50f54ebeb9fb03d832d407166c5622395"
        ],
        [
            "Definition EtaMixin R one mul mulA mul1x mulx1 mul_addl mul_addr nz1 := let _ := @Mixin R one mul mulA mul1x mulx1 mul_addl mul_addr nz1 in @Mixin (Zmodule.Pack (Zmodule.class R)) _ _ mulA mul1x mulx1 mul_addl mul_addr nz1.",
            "VernacDefinition",
            "379b918cb5bfba81fe4d7a9e09abc110d1597568"
        ],
        [
            "Section ClassDef.",
            "VernacBeginSection",
            "a5b792261e6c496f5a1a8d0f7da8c96156ca2fed"
        ],
        [
            "Record class_of (R : Type) : Type := Class { base : Zmodule.class_of R; mixin : mixin_of (Zmodule.Pack base) }.",
            "VernacInductive",
            "936f5dd4de24aadd6145c5724168f5b04cd68f19"
        ],
        [
            "Local Coercion base : class_of >-> Zmodule.class_of.",
            "VernacCoercion",
            "68e8ba329ae1f00405d87329a27c956044fe2e34"
        ],
        [
            "Structure type := Pack {sort; _ : class_of sort}.",
            "VernacInductive",
            "42b0161295055637e72e97af35c3d44479cc946b"
        ],
        [
            "Local Coercion sort : type >-> Sortclass.",
            "VernacCoercion",
            "e4478cd37693106f84ed020bd073c4970dc87530"
        ],
        [
            "Variables (T : Type) (cT : type).",
            "VernacAssumption",
            "eb35f5737a32cba56acb24ac87490232dc2dfcb9"
        ],
        [
            "Definition class := let: Pack _ c as cT' := cT return class_of cT' in c.",
            "VernacDefinition",
            "0e4a80652d474f8010316ff26a5322b5207d82a3"
        ],
        [
            "Definition clone c of phant_id class c := @Pack T c.",
            "VernacDefinition",
            "e082321bed0d5d4d78139419fead577313b82668"
        ],
        [
            "Let xT := let: Pack T _ := cT in T.",
            "VernacDefinition",
            "0a87c77e3a5ac8febf0910b95d7b998b7cb9cf6d"
        ],
        [
            "Notation xclass := (class : class_of xT).",
            "VernacSyntacticDefinition",
            "e136614fedd7b331a23b54adad5b0bce11895ed4"
        ],
        [
            "Definition pack b0 (m0 : mixin_of (@Zmodule.Pack T b0)) := fun bT b & phant_id (Zmodule.class bT) b => fun m & phant_id m0 m => Pack (@Class T b m).",
            "VernacDefinition",
            "8369e34b890bbc63fa38ab8303291fa0fc4d264b"
        ],
        [
            "Definition eqType := @Equality.Pack cT xclass.",
            "VernacDefinition",
            "6139f412b89e62ff13c9c707c885de4b39151e9d"
        ],
        [
            "Definition choiceType := @Choice.Pack cT xclass.",
            "VernacDefinition",
            "f62d3090382a5ea70b978e0633e0376c4558db55"
        ],
        [
            "Definition zmodType := @Zmodule.Pack cT xclass.",
            "VernacDefinition",
            "d292a93c19cc9e36e99db073c0c14c27655bcd85"
        ],
        [
            "End ClassDef.",
            "VernacEndSegment",
            "bce1c8832045d8291c44a3fb67e9767782d2745b"
        ],
        [
            "Module Exports.",
            "VernacDefineModule",
            "d4a1114ec53f746523a7dec57823f7f03e51fa24"
        ],
        [
            "Coercion base : class_of >-> Zmodule.class_of.",
            "VernacCoercion",
            "4b79ddf621a0d4e9cfade93739b1a32cae9c89ae"
        ],
        [
            "Coercion mixin : class_of >-> mixin_of.",
            "VernacCoercion",
            "6e94763ee53fdac946511987d81c3f6daccc67c3"
        ],
        [
            "Coercion sort : type >-> Sortclass.",
            "VernacCoercion",
            "9e1cbf06afa0d2731dbb8bfd6b9ae32be22a8ae7"
        ],
        [
            "Bind Scope ring_scope with sort.",
            "VernacBindScope",
            "ac04d07dda43f0036576b2a438f8490c7ac4d59b"
        ],
        [
            "Coercion eqType : type >-> Equality.type.",
            "VernacCoercion",
            "58308c67b5e73c9e004d57c486a5071598a25e8c"
        ],
        [
            "Canonical eqType.",
            "VernacCanonical",
            "dd1ac877a396f552e2a8f23e59be45903d8b15ad"
        ],
        [
            "Coercion choiceType : type >-> Choice.type.",
            "VernacCoercion",
            "bdc8d608f4b963a8606cd33ad18b1977a8bcb78d"
        ],
        [
            "Canonical choiceType.",
            "VernacCanonical",
            "af7a1759ddd13e2b7e4e1ce16b6a3595a77b5659"
        ],
        [
            "Coercion zmodType : type >-> Zmodule.type.",
            "VernacCoercion",
            "4ec9ca49e3551546d7d514a97127c47a11747e3a"
        ],
        [
            "Canonical zmodType.",
            "VernacCanonical",
            "9a6f278270af4b6ced100d8e0c90c7719a960a86"
        ],
        [
            "Notation ringType := type.",
            "VernacSyntacticDefinition",
            "b523d573a8b9e992e0e5495a1127c52ad707b6b9"
        ],
        [
            "Notation RingType T m := (@pack T _ m _ _ id _ id).",
            "VernacSyntacticDefinition",
            "d4cef43a0725ab9cd1c3b53352607e7799ea0434"
        ],
        [
            "Notation RingMixin := Mixin.",
            "VernacSyntacticDefinition",
            "8853d53a176873748ee4ee80953aa1bb754923a3"
        ],
        [
            "Notation \"[ 'ringType' 'of' T 'for' cT ]\" := (@clone T cT _ idfun) (at level 0, format \"[ 'ringType' 'of' T 'for' cT ]\") : form_scope.",
            "VernacNotation",
            "5804812ec331db923236cc70e4da57e4f2a6bb3f"
        ],
        [
            "Notation \"[ 'ringType' 'of' T ]\" := (@clone T _ _ id) (at level 0, format \"[ 'ringType' 'of' T ]\") : form_scope.",
            "VernacNotation",
            "8f96c24287cb6b3b1d0f9567d569d76c056bfd3c"
        ],
        [
            "End Exports.",
            "VernacEndSegment",
            "71efedae7ccffd696e1ffe5d8ae6baa8a4484918"
        ],
        [
            "End Ring.",
            "VernacEndSegment",
            "7b7590f6c3a2b9e01af4b1d22710ae6db4d7afe7"
        ],
        [
            "Import Ring.Exports.",
            "VernacImport",
            "2d876526cb12892d457f2aa2a1216384a59b1505"
        ],
        [
            "Definition one (R : ringType) : R := Ring.one (Ring.class R).",
            "VernacDefinition",
            "31dcabe3f002b2d1ff4394b1f6d05d3e1dba0701"
        ],
        [
            "Definition mul (R : ringType) : R -> R -> R := Ring.mul (Ring.class R).",
            "VernacDefinition",
            "47fc96ce7dd2f9ee89806499442389aeedc2a246"
        ],
        [
            "Definition exp R x n := nosimpl iterop _ n (@mul R) x (one R).",
            "VernacDefinition",
            "e7539a330a6a2a201f341f3678fbfe82219e770e"
        ],
        [
            "Notation sign R b := (exp (- one R) (nat_of_bool b)) (only parsing).",
            "VernacSyntacticDefinition",
            "65e250bee63d27b80762a6e959bd670917530efb"
        ],
        [
            "Definition comm R x y := @mul R x y = mul y x.",
            "VernacDefinition",
            "c4b911c3ca8cad1da89e57fd48a21c5a4c6aae0b"
        ],
        [
            "Definition lreg R x := injective (@mul R x).",
            "VernacDefinition",
            "bfcea32f1710a05f481fe85bbb71117e5df6a15a"
        ],
        [
            "Definition rreg R x := injective ((@mul R)^~ x).",
            "VernacDefinition",
            "05ce3e8510c6ce1a3265cd157a0db65c1781e2a8"
        ],
        [
            "Local Notation \"1\" := (one _) : ring_scope.",
            "VernacNotation",
            "4be24d2ef7a6f133db1430fa873074ca67d79465"
        ],
        [
            "Local Notation \"- 1\" := (- (1)) : ring_scope.",
            "VernacNotation",
            "63e0fe880a95541d11ca027668c5fd5d87ca80ee"
        ],
        [
            "Local Notation \"n %:R\" := (1 *+ n) : ring_scope.",
            "VernacNotation",
            "5fb0ca5b9d7c6dae9fe326a0cbf813e268a0a0b3"
        ],
        [
            "Local Notation \"*%R\" := (@mul _).",
            "VernacNotation",
            "71b3463310e1fe394540873f1cd665ca93acca30"
        ],
        [
            "Local Notation \"x * y\" := (mul x y) : ring_scope.",
            "VernacNotation",
            "7b04812a679fb7f6a5d4d4ba329dd003d0199824"
        ],
        [
            "Local Notation \"x ^+ n\" := (exp x n) : ring_scope.",
            "VernacNotation",
            "ed8e9c288e2bea18258186063cdc9f3e30451f52"
        ],
        [
            "Local Notation \"\\prod_ ( i <- r | P ) F\" := (\\big[*%R/1]_(i <- r | P) F).",
            "VernacNotation",
            "84362cdc607482b4e15e50e2741225b2f29e100a"
        ],
        [
            "Local Notation \"\\prod_ ( i | P ) F\" := (\\big[*%R/1]_(i | P) F).",
            "VernacNotation",
            "d128dd5d7b8c3b0281ee649c279d43e805e43499"
        ],
        [
            "Local Notation \"\\prod_ ( i 'in' A ) F\" := (\\big[*%R/1]_(i in A) F).",
            "VernacNotation",
            "6cbcac0728e81e112156e72f52c4071ebbc571d5"
        ],
        [
            "Local Notation \"\\prod_ ( m <= i < n ) F\" := (\\big[*%R/1%R]_(m <= i < n) F%R).",
            "VernacNotation",
            "9feab09a526ebb1d5bf31b58f27dcd6cbff32a6b"
        ],
        [
            "Definition char (R : Ring.type) of phant R : nat_pred := [pred p | prime p & p%:R == 0 :> R].",
            "VernacDefinition",
            "ac97b958ace575d0dda5ce2fe0531e434101f6cc"
        ],
        [
            "Local Notation \"[ 'char' R ]\" := (char (Phant R)) : ring_scope.",
            "VernacNotation",
            "9bce286c7a20ba660c788ba47037a6232c370a41"
        ],
        [
            "Definition converse R : Type := R.",
            "VernacDefinition",
            "250cb2d876f41a8bce9cee222339827df3ca862c"
        ],
        [
            "Local Notation \"R ^c\" := (converse R) (at level 2, format \"R ^c\") : type_scope.",
            "VernacNotation",
            "876f1a1bc6e2a6e5739056a299db1dba02444285"
        ],
        [
            "Section RingTheory.",
            "VernacBeginSection",
            "0ffab8ad3c75b0c668f177c613f220da3f5bce47"
        ],
        [
            "Variable R : ringType.",
            "VernacAssumption",
            "103955c3e16ede32f173514da95e3006926aeccd"
        ],
        [
            "Implicit Types x y : R.",
            "VernacReserve",
            "a698213249308a1927c4fb90fb6e1fbc35157508"
        ],
        [
            "Lemma mulrA : @associative R *%R.",
            "VernacStartTheoremProof",
            "4ae79f37f95a213ebba85b1711aca49115025944"
        ],
        [
            "by case R => T [? []].",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma mul1r : @left_id R R 1 *%R.",
            "VernacStartTheoremProof",
            "14ccc89d3fa79607b90d0f8b0c6c3cb9855dd38b"
        ],
        [
            "by case R => T [? []].",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma mulr1 : @right_id R R 1 *%R.",
            "VernacStartTheoremProof",
            "f434ad656d1c838db7ef29332cb31a24cd62f8a8"
        ],
        [
            "by case R => T [? []].",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma mulrDl : @left_distributive R R *%R +%R.",
            "VernacStartTheoremProof",
            "f4947be80835acd8f3fc8314f824eb97cf489d75"
        ],
        [
            "by case R => T [? []].",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma mulrDr : @right_distributive R R *%R +%R.",
            "VernacStartTheoremProof",
            "14edf074751856cfb6bd9c06558c6ac9a88d4955"
        ],
        [
            "by case R => T [? []].",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma oner_neq0 : 1 != 0 :> R.",
            "VernacStartTheoremProof",
            "125b3d3d6224def3ec36157381c2e475785ba96a"
        ],
        [
            "by case R => T [? []].",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma oner_eq0 : (1 == 0 :> R) = false.",
            "VernacStartTheoremProof",
            "a5848f589ab8793053908fe584be0113882fcc29"
        ],
        [
            "exact: negbTE oner_neq0.",
            "VernacExtend",
            "ce637ff86bafca5d8359473e8c02af644dcbdc43"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma mul0r : @left_zero R R 0 *%R.",
            "VernacStartTheoremProof",
            "c17a3bc16cf545bbc78f7fe8f6ac4628c3be1380"
        ],
        [
            "by move=> x; apply: (addIr (1 * x)); rewrite -mulrDl !add0r mul1r.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma mulr0 : @right_zero R R 0 *%R.",
            "VernacStartTheoremProof",
            "157f5c4ba4b1ce4b03a90154362cffb1fe3ab0b0"
        ],
        [
            "by move=> x; apply: (addIr (x * 1)); rewrite -mulrDr !add0r mulr1.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma mulrN x y : x * (- y) = - (x * y).",
            "VernacStartTheoremProof",
            "eb63b53de0d5e93fe49848d427213a5a62bbb9be"
        ],
        [
            "by apply: (addrI (x * y)); rewrite -mulrDr !subrr mulr0.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma mulNr x y : (- x) * y = - (x * y).",
            "VernacStartTheoremProof",
            "f19fdd2cbc7f2ee3fc661046eaf183ba2eed7900"
        ],
        [
            "by apply: (addrI (x * y)); rewrite -mulrDl !subrr mul0r.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma mulrNN x y : (- x) * (- y) = x * y.",
            "VernacStartTheoremProof",
            "3783e9ac79e3a5f4c840a6d27fc80555d5425c0e"
        ],
        [
            "by rewrite mulrN mulNr opprK.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma mulN1r x : -1 * x = - x.",
            "VernacStartTheoremProof",
            "721b59877c2154392d3efd75ad67a791f959b9af"
        ],
        [
            "by rewrite mulNr mul1r.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma mulrN1 x : x * -1 = - x.",
            "VernacStartTheoremProof",
            "66718a7d628b13f014b43455821541fde1af5398"
        ],
        [
            "by rewrite mulrN mulr1.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Canonical mul_monoid := Monoid.Law mulrA mul1r mulr1.",
            "VernacDefinition",
            "63e96043d4466c4c5eedd4b69fae5b3632fc6fd5"
        ],
        [
            "Canonical muloid := Monoid.MulLaw mul0r mulr0.",
            "VernacDefinition",
            "689b324ce8e9657c549e8f4aed1ba5c958b30d0f"
        ],
        [
            "Canonical addoid := Monoid.AddLaw mulrDl mulrDr.",
            "VernacDefinition",
            "25d9c4df99e0fad7403ddb276b2d66a7c6e9476a"
        ],
        [
            "Lemma mulr_suml I r P (F : I -> R) x : (\\sum_(i <- r | P i) F i) * x = \\sum_(i <- r | P i) F i * x.",
            "VernacStartTheoremProof",
            "01de538373e085f2471b661faa71a5e6dc4b1b80"
        ],
        [
            "exact: big_distrl.",
            "VernacExtend",
            "ce637ff86bafca5d8359473e8c02af644dcbdc43"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma mulr_sumr I r P (F : I -> R) x : x * (\\sum_(i <- r | P i) F i) = \\sum_(i <- r | P i) x * F i.",
            "VernacStartTheoremProof",
            "3d1127a4db891305029ad7ada52c8f88a465b8c2"
        ],
        [
            "exact: big_distrr.",
            "VernacExtend",
            "ce637ff86bafca5d8359473e8c02af644dcbdc43"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma mulrBl x y z : (y - z) * x = y * x - z * x.",
            "VernacStartTheoremProof",
            "aa7da7335eb18f131548206ea45428c612f399f8"
        ],
        [
            "by rewrite mulrDl mulNr.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma mulrBr x y z : x * (y - z) = x * y - x * z.",
            "VernacStartTheoremProof",
            "d2caa4b3fbb0f84a06d78bc8dc0cfe2f188a4106"
        ],
        [
            "by rewrite mulrDr mulrN.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma mulrnAl x y n : (x *+ n) * y = (x * y) *+ n.",
            "VernacStartTheoremProof",
            "81286da2797ec7b59c0e856c058763453fb49ea1"
        ],
        [
            "by elim: n => [|n IHn]; rewrite ?mul0r // !mulrS mulrDl IHn.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma mulrnAr x y n : x * (y *+ n) = (x * y) *+ n.",
            "VernacStartTheoremProof",
            "de561d09266b6f79fd8ad143ff0910b2a9d2047c"
        ],
        [
            "by elim: n => [|n IHn]; rewrite ?mulr0 // !mulrS mulrDr IHn.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma mulr_natl x n : n%:R * x = x *+ n.",
            "VernacStartTheoremProof",
            "99f59df935ce6b4daea43c197aa59c304503b0f8"
        ],
        [
            "by rewrite mulrnAl mul1r.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma mulr_natr x n : x * n%:R = x *+ n.",
            "VernacStartTheoremProof",
            "cdc95ba6b1493d6b13d43f90a12c6bedaf11eb5a"
        ],
        [
            "by rewrite mulrnAr mulr1.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma natrD m n : (m + n)%:R = m%:R + n%:R :> R.",
            "VernacStartTheoremProof",
            "508a1509fe264dae55e73a23d66f39e2ff7b9ff5"
        ],
        [
            "exact: mulrnDr.",
            "VernacExtend",
            "ce637ff86bafca5d8359473e8c02af644dcbdc43"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma natrB m n : n <= m -> (m - n)%:R = m%:R - n%:R :> R.",
            "VernacStartTheoremProof",
            "13be81bb2f17b88f54ed88374dd85b3e6b6c2982"
        ],
        [
            "exact: mulrnBr.",
            "VernacExtend",
            "ce637ff86bafca5d8359473e8c02af644dcbdc43"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Definition natr_sum := big_morph (natmul 1) natrD (mulr0n 1).",
            "VernacDefinition",
            "42cc7dd3e50290b57c442e84521ce96a3d53698b"
        ],
        [
            "Lemma natrM m n : (m * n)%:R = m%:R * n%:R :> R.",
            "VernacStartTheoremProof",
            "7968e5a6506372a17493e8f1e0565bc373370961"
        ],
        [
            "by rewrite mulrnA -mulr_natr.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma expr0 x : x ^+ 0 = 1.",
            "VernacStartTheoremProof",
            "7858b8bb16aa2d9b3ad77b6540bcdfc6a818882f"
        ],
        [
            "by [].",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma expr1 x : x ^+ 1 = x.",
            "VernacStartTheoremProof",
            "14c0cdb433e255b521741e9c2ec45bb8a6e6353f"
        ],
        [
            "by [].",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma expr2 x : x ^+ 2 = x * x.",
            "VernacStartTheoremProof",
            "3020a55c3cae9f9a9551d3b17c5f62c7fa4440d7"
        ],
        [
            "by [].",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma exprS x n : x ^+ n.+1 = x * x ^+ n.",
            "VernacStartTheoremProof",
            "e48793f2ecd3cd0919ea3e729a515f2282381a67"
        ],
        [
            "by case: n => //; rewrite mulr1.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma expr0n n : 0 ^+ n = (n == 0%N)%:R :> R.",
            "VernacStartTheoremProof",
            "b0aea2c3d16be09be0c023e0a54ff473c2fd6ecf"
        ],
        [
            "by case: n => // n; rewrite exprS mul0r.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma expr1n n : 1 ^+ n = 1 :> R.",
            "VernacStartTheoremProof",
            "130ff48c237bb3e8dc57ae4c43d7ed58c0ff7cc9"
        ],
        [
            "by elim: n => // n IHn; rewrite exprS mul1r.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma exprD x m n : x ^+ (m + n) = x ^+ m * x ^+ n.",
            "VernacStartTheoremProof",
            "6ef1d4439e4da896abf1501794ca44a8d049cfe4"
        ],
        [
            "by elim: m => [|m IHm]; rewrite ?mul1r // !exprS -mulrA -IHm.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma exprSr x n : x ^+ n.+1 = x ^+ n * x.",
            "VernacStartTheoremProof",
            "4ea561969bacd1d11038a08d090cd4cdadf96329"
        ],
        [
            "by rewrite -addn1 exprD expr1.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma commr_sym x y : comm x y -> comm y x.",
            "VernacStartTheoremProof",
            "90391e04b73b5506e020cb9ce57764f4dd995d8d"
        ],
        [
            "by [].",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma commr_refl x : comm x x.",
            "VernacStartTheoremProof",
            "319b059e9325ebdc0d7e23b60a4f73bb6bb4966f"
        ],
        [
            "by [].",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma commr0 x : comm x 0.",
            "VernacStartTheoremProof",
            "d72d30db4d74c080ad1de1d812f292f9d74eacbf"
        ],
        [
            "by rewrite /comm mulr0 mul0r.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma commr1 x : comm x 1.",
            "VernacStartTheoremProof",
            "e119378bba64f76c1747afc900b5969f45762597"
        ],
        [
            "by rewrite /comm mulr1 mul1r.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma commrN x y : comm x y -> comm x (- y).",
            "VernacStartTheoremProof",
            "74f8fa00ee169a94b9cd08fc4ac957a6240b3a6f"
        ],
        [
            "by move=> com_xy; rewrite /comm mulrN com_xy mulNr.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma commrN1 x : comm x (-1).",
            "VernacStartTheoremProof",
            "0d8d9db0c99bf040ceee9df104eb4e0cc1e2ce4e"
        ],
        [
            "exact/commrN/commr1.",
            "VernacExtend",
            "ce637ff86bafca5d8359473e8c02af644dcbdc43"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma commrD x y z : comm x y -> comm x z -> comm x (y + z).",
            "VernacStartTheoremProof",
            "e9396e0dc17f50e8796a20131ba2298a41c9edc2"
        ],
        [
            "by rewrite /comm mulrDl mulrDr => -> ->.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma commrMn x y n : comm x y -> comm x (y *+ n).",
            "VernacStartTheoremProof",
            "c49a2a098acea80861ae253666a7ea18c3d4c050"
        ],
        [
            "rewrite /comm => com_xy.",
            "VernacExtend",
            "3c42b53d0efc26db114b00541ac5e7fcb29e6aeb"
        ],
        [
            "by elim: n => [|n IHn]; rewrite ?commr0 // mulrS commrD.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma commrM x y z : comm x y -> comm x z -> comm x (y * z).",
            "VernacStartTheoremProof",
            "2a2a60d11e7eb8ac043bfc03a3b206647fe0140b"
        ],
        [
            "by move=> com_xy; rewrite /comm mulrA com_xy -!mulrA => ->.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma commr_nat x n : comm x n%:R.",
            "VernacStartTheoremProof",
            "1b33a13635ed4d1ef0994df82286d927cbf3476c"
        ],
        [
            "exact/commrMn/commr1.",
            "VernacExtend",
            "ce637ff86bafca5d8359473e8c02af644dcbdc43"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma commrX x y n : comm x y -> comm x (y ^+ n).",
            "VernacStartTheoremProof",
            "8f40aacb8bb30a5af3cd55a76bf471fb81d43d0b"
        ],
        [
            "rewrite /comm => com_xy.",
            "VernacExtend",
            "3c42b53d0efc26db114b00541ac5e7fcb29e6aeb"
        ],
        [
            "by elim: n => [|n IHn]; rewrite ?commr1 // exprS commrM.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma exprMn_comm x y n : comm x y -> (x * y) ^+ n = x ^+ n * y ^+ n.",
            "VernacStartTheoremProof",
            "61cd6bd9de40d761648bc0ea4c5c35e9bb9fb629"
        ],
        [
            "move=> com_xy; elim: n => /= [|n IHn]; first by rewrite mulr1.",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "by rewrite !exprS IHn !mulrA; congr (_ * _); rewrite -!mulrA -commrX.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma commr_sign x n : comm x ((-1) ^+ n).",
            "VernacStartTheoremProof",
            "00ff90213dfbe7e8981596c1172139dc86a3ca4e"
        ],
        [
            "exact: (commrX n (commrN1 x)).",
            "VernacExtend",
            "ce637ff86bafca5d8359473e8c02af644dcbdc43"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma exprMn_n x m n : (x *+ m) ^+ n = x ^+ n *+ (m ^ n) :> R.",
            "VernacStartTheoremProof",
            "f2374bbe5fb73cf34bd4973ed795365bc7072cc9"
        ],
        [
            "elim: n => [|n IHn]; first by rewrite mulr1n.",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "rewrite exprS IHn -mulr_natr -mulrA -commr_nat mulr_natr -mulrnA -expnSr.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "by rewrite -mulr_natr mulrA -exprS mulr_natr.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma exprM x m n : x ^+ (m * n) = x ^+ m ^+ n.",
            "VernacStartTheoremProof",
            "07e884157e2b686819ddde9934a6f1c7a241c653"
        ],
        [
            "elim: m => [|m IHm]; first by rewrite expr1n.",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "by rewrite mulSn exprD IHm exprS exprMn_comm //; apply: commrX.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma exprAC x m n : (x ^+ m) ^+ n = (x ^+ n) ^+ m.",
            "VernacStartTheoremProof",
            "d83b4e02e94fa48d12469e666aa84c6647a3104b"
        ],
        [
            "by rewrite -!exprM mulnC.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma expr_mod n x i : x ^+ n = 1 -> x ^+ (i %% n) = x ^+ i.",
            "VernacStartTheoremProof",
            "7140fb14ca36d8206ed10b0ac5a455cb3e904e98"
        ],
        [
            "move=> xn1; rewrite {2}(divn_eq i n) exprD mulnC exprM xn1.",
            "VernacExtend",
            "057edeb0967475c7ea5e8c98c449ddc5613eddc1"
        ],
        [
            "by rewrite expr1n mul1r.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma expr_dvd n x i : x ^+ n = 1 -> n %| i -> x ^+ i = 1.",
            "VernacStartTheoremProof",
            "fdde45dbe9f9bf69aea5ffbc1dc3c665444bf2fe"
        ],
        [
            "by move=> xn1 dvd_n_i; rewrite -(expr_mod i xn1) (eqnP dvd_n_i).",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma natrX n k : (n ^ k)%:R = n%:R ^+ k :> R.",
            "VernacStartTheoremProof",
            "21ebb605cd34071c0ffab90374218efb95b5c887"
        ],
        [
            "by rewrite exprMn_n expr1n.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma signr_odd n : (-1) ^+ (odd n) = (-1) ^+ n :> R.",
            "VernacStartTheoremProof",
            "f9e76b04acbf59656ea095b60eac5b099d393644"
        ],
        [
            "elim: n => //= n IHn; rewrite exprS -{}IHn.",
            "VernacExtend",
            "de65c8193056a36f6dbb91fe21357bd770b140db"
        ],
        [
            "by case/odd: n; rewrite !mulN1r ?opprK.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma signr_eq0 n : ((-1) ^+ n == 0 :> R) = false.",
            "VernacStartTheoremProof",
            "c138a054822b6aab7e01777591bfb6bc6bce9c44"
        ],
        [
            "by rewrite -signr_odd; case: odd; rewrite ?oppr_eq0 oner_eq0.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma mulr_sign (b : bool) x : (-1) ^+ b * x = (if b then - x else x).",
            "VernacStartTheoremProof",
            "90df92bba7df345c4ffb8b4fcb73b2fb66669a7f"
        ],
        [
            "by case: b; rewrite ?mulNr mul1r.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma signr_addb b1 b2 : (-1) ^+ (b1 (+) b2) = (-1) ^+ b1 * (-1) ^+ b2 :> R.",
            "VernacStartTheoremProof",
            "f404021f05ccc5c26bfa566aa07d6b027d6ab2e9"
        ],
        [
            "by rewrite mulr_sign; case: b1 b2 => [] []; rewrite ?opprK.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma signrE (b : bool) : (-1) ^+ b = 1 - b.*2%:R :> R.",
            "VernacStartTheoremProof",
            "3215134108cd8afcd6a9f7d80a9d3d372dbce575"
        ],
        [
            "by case: b; rewrite ?subr0 // opprD addNKr.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma signrN b : (-1) ^+ (~~ b) = - (-1) ^+ b :> R.",
            "VernacStartTheoremProof",
            "73f244b6bd1eb037c205cb7247f906a951894f27"
        ],
        [
            "by case: b; rewrite ?opprK.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma mulr_signM (b1 b2 : bool) x1 x2 : ((-1) ^+ b1 * x1) * ((-1) ^+ b2 * x2) = (-1) ^+ (b1 (+) b2) * (x1 * x2).",
            "VernacStartTheoremProof",
            "622a82ba2bc5d0a1465022b91c70f3220cf89064"
        ],
        [
            "by rewrite signr_addb -!mulrA; congr (_ * _); rewrite !mulrA commr_sign.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma exprNn x n : (- x) ^+ n = (-1) ^+ n * x ^+ n :> R.",
            "VernacStartTheoremProof",
            "6a2eab29eb1c4b72b0c917084cbc500fe42e6add"
        ],
        [
            "by rewrite -mulN1r exprMn_comm // /comm mulN1r mulrN mulr1.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma sqrrN x : (- x) ^+ 2 = x ^+ 2.",
            "VernacStartTheoremProof",
            "63c646dcf6d59cc3be5e6f66d34845397fb89661"
        ],
        [
            "exact: mulrNN.",
            "VernacExtend",
            "ce637ff86bafca5d8359473e8c02af644dcbdc43"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma sqrr_sign n : ((-1) ^+ n) ^+ 2 = 1 :> R.",
            "VernacStartTheoremProof",
            "ccaaa4298874bc9d9fc8ad9995358d5b4c96e0ff"
        ],
        [
            "by rewrite exprAC sqrrN !expr1n.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma signrMK n : @involutive R ( *%R ((-1) ^+ n)).",
            "VernacStartTheoremProof",
            "34c03c76871fbe902b6603686878ea3f32a05cf8"
        ],
        [
            "by move=> x; rewrite mulrA -expr2 sqrr_sign mul1r.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma lastr_eq0 (s : seq R) x : x != 0 -> (last x s == 0) = (last 1 s == 0).",
            "VernacStartTheoremProof",
            "08af573231727d3de37996991480d9d66e36de96"
        ],
        [
            "by case: s => [|y s] /negPf // ->; rewrite oner_eq0.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma mulrI_eq0 x y : lreg x -> (x * y == 0) = (y == 0).",
            "VernacStartTheoremProof",
            "a583d65fd94253e848bc26eb80d35452242c9911"
        ],
        [
            "by move=> reg_x; rewrite -{1}(mulr0 x) (inj_eq reg_x).",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma lreg_neq0 x : lreg x -> x != 0.",
            "VernacStartTheoremProof",
            "b99aaa3799aee4c459f8a46be4da00ed9207a607"
        ],
        [
            "by move=> reg_x; rewrite -[x]mulr1 mulrI_eq0 ?oner_eq0.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma mulrI0_lreg x : (forall y, x * y = 0 -> y = 0) -> lreg x.",
            "VernacStartTheoremProof",
            "78bda82ed8563f60bd2515f709c192d19ec2d378"
        ],
        [
            "move=> reg_x y z eq_xy_xz; apply/eqP; rewrite -subr_eq0 [y - z]reg_x //.",
            "VernacExtend",
            "f7feb259d6220ca40e8a86b90bd06f137aa140ac"
        ],
        [
            "by rewrite mulrBr eq_xy_xz subrr.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma lregN x : lreg x -> lreg (- x).",
            "VernacStartTheoremProof",
            "a0b14728fdc3d4e8a440d8069cd292e7a91b5302"
        ],
        [
            "by move=> reg_x y z; rewrite !mulNr => /oppr_inj/reg_x.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma lreg1 : lreg (1 : R).",
            "VernacStartTheoremProof",
            "2fdd6bf6f2ec58207b5dd1de3bb3c08bfda60428"
        ],
        [
            "by move=> x y; rewrite !mul1r.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma lregM x y : lreg x -> lreg y -> lreg (x * y).",
            "VernacStartTheoremProof",
            "0149e03b21fa622234aea1fd4a07a666343e801d"
        ],
        [
            "by move=> reg_x reg_y z t; rewrite -!mulrA => /reg_x/reg_y.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma lregX x n : lreg x -> lreg (x ^+ n).",
            "VernacStartTheoremProof",
            "52d2169f182af48dddcebb655b8ad0249b48ec84"
        ],
        [
            "by move=> reg_x; elim: n => [|n]; [apply: lreg1 | rewrite exprS; apply: lregM].",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma lreg_sign n : lreg ((-1) ^+ n : R).",
            "VernacStartTheoremProof",
            "82eea9e6a256a29a3186d98ffdf79ef03ea7e2c3"
        ],
        [
            "by apply: lregX; apply: lregN; apply: lreg1.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma prodr_const (I : finType) (A : pred I) (x : R) : \\prod_(i in A) x = x ^+ #|A|.",
            "VernacStartTheoremProof",
            "97901a56703afabdb1dcbba98fe7ac786bfc19d3"
        ],
        [
            "by rewrite big_const -iteropE.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma prodrXr x I r P (F : I -> nat) : \\prod_(i <- r | P i) x ^+ F i = x ^+ (\\sum_(i <- r | P i) F i).",
            "VernacStartTheoremProof",
            "bf9a81bf1d93cdae4c706967fbb1312feef0f59f"
        ],
        [
            "by rewrite (big_morph _ (exprD _) (erefl _)).",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma prodrN (I : finType) (A : pred I) (F : I -> R) : \\prod_(i in A) - F i = (- 1) ^+ #|A| * \\prod_(i in A) F i.",
            "VernacStartTheoremProof",
            "5e4a79dce49fc9f91335894df57b59be97960d10"
        ],
        [
            "rewrite -sum1_card; elim/big_rec3: _ => [|i x n _ _ ->]; first by rewrite mulr1.",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "by rewrite exprS !mulrA mulN1r !mulNr commrX //; apply: commrN1.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma prodrMn n (I : finType) (A : pred I) (F : I -> R) : \\prod_(i in A) (F i *+ n) = \\prod_(i in A) F i *+ n ^ #|A|.",
            "VernacStartTheoremProof",
            "6339f023b7faef2205cd8a660ddb64db562fcfd2"
        ],
        [
            "rewrite -sum1_card; elim/big_rec3: _ => // i x m _ _ ->.",
            "VernacExtend",
            "44a8e3b453c9376c468b4e3e0046f5ac33e11d6d"
        ],
        [
            "by rewrite mulrnAr mulrnAl expnS mulrnA.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma natr_prod I r P (F : I -> nat) : (\\prod_(i <- r | P i) F i)%:R = \\prod_(i <- r | P i) (F i)%:R :> R.",
            "VernacStartTheoremProof",
            "4fd04e6d4db90bbe0b40b6cb6b976e4c19559598"
        ],
        [
            "exact: (big_morph _ natrM).",
            "VernacExtend",
            "ce637ff86bafca5d8359473e8c02af644dcbdc43"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma exprDn_comm x y n (cxy : comm x y) : (x + y) ^+ n = \\sum_(i < n.+1) (x ^+ (n - i) * y ^+ i) *+ 'C(n, i).",
            "VernacStartTheoremProof",
            "790066e8de4b256cd30d1826889c4d16d7f137f9"
        ],
        [
            "elim: n => [|n IHn]; rewrite big_ord_recl mulr1 ?big_ord0 ?addr0 //=.",
            "VernacExtend",
            "de65c8193056a36f6dbb91fe21357bd770b140db"
        ],
        [
            "rewrite exprS {}IHn /= mulrDl !big_distrr /= big_ord_recl mulr1 subn0.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "rewrite !big_ord_recr /= !binn !subnn !mul1r !subn0 bin0 !exprS -addrA.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "congr (_ + _); rewrite addrA -big_split /=; congr (_ + _).",
            "VernacExtend",
            "516f18a2bd545145111a2197b98c801fe2c297f5"
        ],
        [
            "apply: eq_bigr => i _; rewrite !mulrnAr !mulrA -exprS -subSn ?(valP i) //.",
            "VernacExtend",
            "56c014161b39aecfb3c54301c2409dba4e8e1857"
        ],
        [
            "by rewrite subSS (commrX _ (commr_sym cxy)) -mulrA -exprS -mulrnDr.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma exprBn_comm x y n (cxy : comm x y) : (x - y) ^+ n = \\sum_(i < n.+1) ((-1) ^+ i * x ^+ (n - i) * y ^+ i) *+ 'C(n, i).",
            "VernacStartTheoremProof",
            "25e19de861b5f84a7136f75b966337a28baed2e0"
        ],
        [
            "rewrite exprDn_comm; last exact: commrN.",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "by apply: eq_bigr => i _; congr (_ *+ _); rewrite -commr_sign -mulrA -exprNn.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma subrXX_comm x y n (cxy : comm x y) : x ^+ n - y ^+ n = (x - y) * (\\sum_(i < n) x ^+ (n.-1 - i) * y ^+ i).",
            "VernacStartTheoremProof",
            "98c517921fd5ca922f11af6a5abfd2dd5ae15f7f"
        ],
        [
            "case: n => [|n]; first by rewrite big_ord0 mulr0 subrr.",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "rewrite mulrBl !big_distrr big_ord_recl big_ord_recr /= subnn mulr1 mul1r.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "rewrite subn0 -!exprS opprD -!addrA; congr (_ + _); rewrite addrA -sumrB.",
            "VernacExtend",
            "9d78117f9fa00d8b79d08aff717709f8d084ba84"
        ],
        [
            "rewrite big1 ?add0r // => i _; rewrite !mulrA -exprS -subSn ?(valP i) //.",
            "VernacExtend",
            "82d53976234637e3f0907eb36cddf61d028c6306"
        ],
        [
            "by rewrite subSS (commrX _ (commr_sym cxy)) -mulrA -exprS subrr.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma exprD1n x n : (x + 1) ^+ n = \\sum_(i < n.+1) x ^+ i *+ 'C(n, i).",
            "VernacStartTheoremProof",
            "be1bfc5d0acf3e13f2e3e3d0875654d3523069ad"
        ],
        [
            "rewrite addrC (exprDn_comm n (commr_sym (commr1 x))).",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "by apply: eq_bigr => i _; rewrite expr1n mul1r.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma subrX1 x n : x ^+ n - 1 = (x - 1) * (\\sum_(i < n) x ^+ i).",
            "VernacStartTheoremProof",
            "84c739ddd32721170255ab36b1a76a6b2cb4df38"
        ],
        [
            "rewrite -!(opprB 1) mulNr -{1}(expr1n n).",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "rewrite (subrXX_comm _ (commr_sym (commr1 x))); congr (- (_ * _)).",
            "VernacExtend",
            "a0279e71fd23ac6bde2b8b4402981a70ea719044"
        ],
        [
            "by apply: eq_bigr => i _; rewrite expr1n mul1r.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma sqrrD1 x : (x + 1) ^+ 2 = x ^+ 2 + x *+ 2 + 1.",
            "VernacStartTheoremProof",
            "64898658481782230fd47800cec753eb7ce60d2d"
        ],
        [
            "rewrite exprD1n !big_ord_recr big_ord0 /= add0r.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "by rewrite addrC addrA addrAC.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma sqrrB1 x : (x - 1) ^+ 2 = x ^+ 2 - x *+ 2 + 1.",
            "VernacStartTheoremProof",
            "ec57f537dc8c9600fdd5073229bb899d92a0cbaa"
        ],
        [
            "by rewrite -sqrrN opprB addrC sqrrD1 sqrrN mulNrn.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma subr_sqr_1 x : x ^+ 2 - 1 = (x - 1) * (x + 1).",
            "VernacStartTheoremProof",
            "4ce47c520cb8718d332ae0f431654b8fb025ca52"
        ],
        [
            "by rewrite subrX1 !big_ord_recr big_ord0 /= addrAC add0r.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Definition Frobenius_aut p of p \\in [char R] := fun x => x ^+ p.",
            "VernacDefinition",
            "4793b8a354db139b67edf974c72f4f1e258d39c4"
        ],
        [
            "Section FrobeniusAutomorphism.",
            "VernacBeginSection",
            "0c99661469d7f08ed346877e162397b003b5cab4"
        ],
        [
            "Variable p : nat.",
            "VernacAssumption",
            "981ac4bb8674cf2cc0a9bf436584a314bb426aa4"
        ],
        [
            "Hypothesis charFp : p \\in [char R].",
            "VernacAssumption",
            "0deb6b7f2efb8b076f66fa746398c437048beb31"
        ],
        [
            "Lemma charf0 : p%:R = 0 :> R.",
            "VernacStartTheoremProof",
            "d4018447d6f879098020ef9b7a239630b1e3d697"
        ],
        [
            "by apply/eqP; case/andP: charFp.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma charf_prime : prime p.",
            "VernacStartTheoremProof",
            "4412bedaec6ec720c16aa5a5dc02edce4f28441f"
        ],
        [
            "by case/andP: charFp.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Hint Resolve charf_prime : core.",
            "VernacHints",
            "99b565deb67f9db1cf8c6784807934515bbceaf0"
        ],
        [
            "Lemma mulrn_char x : x *+ p = 0.",
            "VernacStartTheoremProof",
            "a5e1c99c4a0b8a1b8877c4df828bfc1a5b4856a4"
        ],
        [
            "by rewrite -mulr_natl charf0 mul0r.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma natr_mod_char n : (n %% p)%:R = n%:R :> R.",
            "VernacStartTheoremProof",
            "197f3446b36659cfe62b56953c12f7a30ab098be"
        ],
        [
            "by rewrite {2}(divn_eq n p) natrD mulrnA mulrn_char add0r.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma dvdn_charf n : (p %| n)%N = (n%:R == 0 :> R).",
            "VernacStartTheoremProof",
            "6a429e362fce0a17f0672fcd5c9e147f0b0824b6"
        ],
        [
            "apply/idP/eqP=> [/dvdnP[n' ->]|n0]; first by rewrite natrM charf0 mulr0.",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "apply/idPn; rewrite -prime_coprime // => /eqnP pn1.",
            "VernacExtend",
            "5fce7e5361004176d6b434b36b4623c7387f70bb"
        ],
        [
            "have [a _ /dvdnP[b]] := Bezoutl n (prime_gt0 charf_prime).",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "move/(congr1 (fun m => m%:R : R))/eqP.",
            "VernacExtend",
            "b1b2cb7a3a617cba67460b4eca1f04de3c1cc716"
        ],
        [
            "by rewrite natrD !natrM charf0 n0 !mulr0 pn1 addr0 oner_eq0.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma charf_eq : [char R] =i (p : nat_pred).",
            "VernacStartTheoremProof",
            "5cd795dd7ffb1a060aeff60fd1b4755e53c3a53a"
        ],
        [
            "move=> q; apply/andP/eqP=> [[q_pr q0] | ->]; last by rewrite charf0.",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "by apply/eqP; rewrite eq_sym -dvdn_prime2 // dvdn_charf.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma bin_lt_charf_0 k : 0 < k < p -> 'C(p, k)%:R = 0 :> R.",
            "VernacStartTheoremProof",
            "b9aa3b0cf07c149cd6ffe6a8512c0e1d8d44b2d4"
        ],
        [
            "by move=> lt0kp; apply/eqP; rewrite -dvdn_charf prime_dvd_bin.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Local Notation \"x ^f\" := (Frobenius_aut charFp x).",
            "VernacNotation",
            "fc9d75a83dd4c3f6317bed5838f2de10bbefdd78"
        ],
        [
            "Lemma Frobenius_autE x : x^f = x ^+ p.",
            "VernacStartTheoremProof",
            "8016f65ca1f2f6a9f6ae58a9d8c2b0db85863c26"
        ],
        [
            "by [].",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Local Notation fE := Frobenius_autE.",
            "VernacSyntacticDefinition",
            "f36dadcf5a082ef8a58528fc12193fac9d99d881"
        ],
        [
            "Lemma Frobenius_aut0 : 0^f = 0.",
            "VernacStartTheoremProof",
            "4c2d23484b376f4d1403cbe2ef47ec30fd3d906e"
        ],
        [
            "by rewrite fE -(prednK (prime_gt0 charf_prime)) exprS mul0r.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma Frobenius_aut1 : 1^f = 1.",
            "VernacStartTheoremProof",
            "86ece94ffe1e6f91de57a3de4578d37b33525457"
        ],
        [
            "by rewrite fE expr1n.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma Frobenius_autD_comm x y (cxy : comm x y) : (x + y)^f = x^f + y^f.",
            "VernacStartTheoremProof",
            "659c748c1050971e7a25bae36be232241d4ce98b"
        ],
        [
            "have defp := prednK (prime_gt0 charf_prime).",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "rewrite !fE exprDn_comm // big_ord_recr subnn -defp big_ord_recl /= defp.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "rewrite subn0 mulr1 mul1r bin0 binn big1 ?addr0 // => i _.",
            "VernacExtend",
            "3c42b53d0efc26db114b00541ac5e7fcb29e6aeb"
        ],
        [
            "by rewrite -mulr_natl bin_lt_charf_0 ?mul0r //= -{2}defp ltnS (valP i).",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma Frobenius_autMn x n : (x *+ n)^f = x^f *+ n.",
            "VernacStartTheoremProof",
            "3578b02e00602f918fc902ff4e22faf7cec8f499"
        ],
        [
            "elim: n => [|n IHn]; first exact: Frobenius_aut0.",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "by rewrite !mulrS Frobenius_autD_comm ?IHn //; apply: commrMn.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma Frobenius_aut_nat n : (n%:R)^f = n%:R.",
            "VernacStartTheoremProof",
            "fd32dc483da98ccaca0850c8344469c49df05803"
        ],
        [
            "by rewrite Frobenius_autMn Frobenius_aut1.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma Frobenius_autM_comm x y : comm x y -> (x * y)^f = x^f * y^f.",
            "VernacStartTheoremProof",
            "6ae619e3ae91aa9eb17e92284b77b7c09b65809e"
        ],
        [
            "exact: exprMn_comm.",
            "VernacExtend",
            "ce637ff86bafca5d8359473e8c02af644dcbdc43"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma Frobenius_autX x n : (x ^+ n)^f = x^f ^+ n.",
            "VernacStartTheoremProof",
            "a86348be8fbfcfef1fd9e56dae984fe617b9c592"
        ],
        [
            "by rewrite !fE -!exprM mulnC.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma Frobenius_autN x : (- x)^f = - x^f.",
            "VernacStartTheoremProof",
            "bca6455df6d4cb430810f2d3125277ea0a077874"
        ],
        [
            "apply/eqP; rewrite -subr_eq0 opprK addrC.",
            "VernacExtend",
            "56c014161b39aecfb3c54301c2409dba4e8e1857"
        ],
        [
            "by rewrite -(Frobenius_autD_comm (commrN _)) // subrr Frobenius_aut0.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma Frobenius_autB_comm x y : comm x y -> (x - y)^f = x^f - y^f.",
            "VernacStartTheoremProof",
            "8e0cca8999979834158bc8cdd0c2c196ef13a57a"
        ],
        [
            "by move/commrN/Frobenius_autD_comm->; rewrite Frobenius_autN.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "End FrobeniusAutomorphism.",
            "VernacEndSegment",
            "68361a09d134732975e735b41dc05b161f0bf8f5"
        ],
        [
            "Lemma exprNn_char x n : [char R].-nat n -> (- x) ^+ n = - (x ^+ n).",
            "VernacStartTheoremProof",
            "273ef99231f7b8188e017392eda8b48d2e710f1f"
        ],
        [
            "pose p := pdiv n; have [|n_gt1 charRn] := leqP n 1; first by case: (n) => [|[]].",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "have charRp: p \\in [char R] by rewrite (pnatPpi charRn) // pi_pdiv.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "have /p_natP[e ->]: p.-nat n by rewrite -(eq_pnat _ (charf_eq charRp)).",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "elim: e => // e IHe; rewrite expnSr !exprM {}IHe.",
            "VernacExtend",
            "de65c8193056a36f6dbb91fe21357bd770b140db"
        ],
        [
            "by rewrite -Frobenius_autE Frobenius_autN.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Section Char2.",
            "VernacBeginSection",
            "4bd0e05753c74bd88f562dd616decb75898af331"
        ],
        [
            "Hypothesis charR2 : 2 \\in [char R].",
            "VernacAssumption",
            "617ff8b92a3c5d3f85def3336048f42cebfbf072"
        ],
        [
            "Lemma addrr_char2 x : x + x = 0.",
            "VernacStartTheoremProof",
            "f882df9564371e7a269785949c659e18d646139a"
        ],
        [
            "by rewrite -mulr2n mulrn_char.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma oppr_char2 x : - x = x.",
            "VernacStartTheoremProof",
            "56469cfd7cfed59e2879e56986d5d02290b2cfb9"
        ],
        [
            "by apply/esym/eqP; rewrite -addr_eq0 addrr_char2.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma subr_char2 x y : x - y = x + y.",
            "VernacStartTheoremProof",
            "9d12c38cea9aefbe43a5c5715510cbdde539dbcb"
        ],
        [
            "by rewrite oppr_char2.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma addrK_char2 x : involutive (+%R^~ x).",
            "VernacStartTheoremProof",
            "1987a74a59829d7097c4afec700865b9c2e86c5a"
        ],
        [
            "by move=> y; rewrite /= -subr_char2 addrK.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma addKr_char2 x : involutive (+%R x).",
            "VernacStartTheoremProof",
            "90f2f77b2268f0809523ff900c2780d463a46555"
        ],
        [
            "by move=> y; rewrite -{1}[x]oppr_char2 addKr.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "End Char2.",
            "VernacEndSegment",
            "75b6e36088348700b00d6150a5903e67e100d559"
        ],
        [
            "Canonical converse_eqType := [eqType of R^c].",
            "VernacDefinition",
            "aa8a00ca983b776ff6ba0ec5f56d0741e0dafa9a"
        ],
        [
            "Canonical converse_choiceType := [choiceType of R^c].",
            "VernacDefinition",
            "a52970da59f8f79022cb95d3a295547feef70799"
        ],
        [
            "Canonical converse_zmodType := [zmodType of R^c].",
            "VernacDefinition",
            "56ccadcf6b50ae10fe0a233fe110ff738672522a"
        ],
        [
            "Definition converse_ringMixin := let mul' x y := y * x in let mulrA' x y z := esym (mulrA z y x) in let mulrDl' x y z := mulrDr z x y in let mulrDr' x y z := mulrDl y z x in @Ring.Mixin converse_zmodType 1 mul' mulrA' mulr1 mul1r mulrDl' mulrDr' oner_neq0.",
            "VernacDefinition",
            "01d4347a7762e1b62af21a5c119cb5d70f32c177"
        ],
        [
            "Canonical converse_ringType := RingType R^c converse_ringMixin.",
            "VernacDefinition",
            "b7b7b20bbc1feb8067cbef57f4c232fcb40ba033"
        ],
        [
            "Section ClosedPredicates.",
            "VernacBeginSection",
            "867c96696ba4b124a23204102a22dbe3e9a8b988"
        ],
        [
            "Variable S : predPredType R.",
            "VernacAssumption",
            "a0753d5b124c8560ac0473057f8ec3fe1e565ca0"
        ],
        [
            "Definition mulr_2closed := {in S &, forall u v, u * v \\in S}.",
            "VernacDefinition",
            "2749d08c179563f52d8688a11da9594ea71e5e08"
        ],
        [
            "Definition mulr_closed := 1 \\in S /\\ mulr_2closed.",
            "VernacDefinition",
            "d2e73b6fdbb02846f9569f9d3a4554b99d3a3e73"
        ],
        [
            "Definition smulr_closed := -1 \\in S /\\ mulr_2closed.",
            "VernacDefinition",
            "6db151f3af2f0cfb75ec364f250d72a5a60c5c01"
        ],
        [
            "Definition semiring_closed := addr_closed S /\\ mulr_closed.",
            "VernacDefinition",
            "559bfe9b4d7d8e84a0df26e5a5d51890095b9eae"
        ],
        [
            "Definition subring_closed := [/\\ 1 \\in S, subr_2closed S & mulr_2closed].",
            "VernacDefinition",
            "11d6613b7c9c6bfef49ad34b0798bb4345c0e819"
        ],
        [
            "Lemma smulr_closedM : smulr_closed -> mulr_closed.",
            "VernacStartTheoremProof",
            "f2bbe82d28635da3bc83642d94d1997dcfa0282f"
        ],
        [
            "by case=> SN1 SM; split=> //; rewrite -[1]mulr1 -mulrNN SM.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma smulr_closedN : smulr_closed -> oppr_closed S.",
            "VernacStartTheoremProof",
            "327eb2ac077e59ced7e4ede9f5ee5416f8b082d3"
        ],
        [
            "by case=> SN1 SM x Sx; rewrite -mulN1r SM.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma semiring_closedD : semiring_closed -> addr_closed S.",
            "VernacStartTheoremProof",
            "315435e9bcb905a9330152291794912abd514bf1"
        ],
        [
            "by case.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma semiring_closedM : semiring_closed -> mulr_closed.",
            "VernacStartTheoremProof",
            "efb2cd89255a013ca11ed915fbb76d4e147cfcd1"
        ],
        [
            "by case.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma subring_closedB : subring_closed -> zmod_closed S.",
            "VernacStartTheoremProof",
            "0fd2ee25fcc8969e2f562e6bf60c643838195876"
        ],
        [
            "by case=> S1 SB _; split; rewrite // -(subrr 1) SB.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma subring_closedM : subring_closed -> smulr_closed.",
            "VernacStartTheoremProof",
            "dfd6ecdab6ed65fbc088bc267ce2ab74237c6e58"
        ],
        [
            "by case=> S1 SB SM; split; rewrite ?(zmod_closedN (subring_closedB _)).",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma subring_closed_semi : subring_closed -> semiring_closed.",
            "VernacStartTheoremProof",
            "1aad67c9487abe26ad867aee18ddc5921ee956ec"
        ],
        [
            "by move=> ringS; split; [apply/zmod_closedD/subring_closedB | case: ringS].",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "End ClosedPredicates.",
            "VernacEndSegment",
            "6238d5ef0852f49433340e32287fd9e002b055ef"
        ],
        [
            "End RingTheory.",
            "VernacEndSegment",
            "60a2fd3593c117dd433533c87c351fef62375f26"
        ],
        [
            "Section RightRegular.",
            "VernacBeginSection",
            "d33f4c9bb7bb4c629d68f38bfdb55859a7c83787"
        ],
        [
            "Variable R : ringType.",
            "VernacAssumption",
            "103955c3e16ede32f173514da95e3006926aeccd"
        ],
        [
            "Implicit Types x y : R.",
            "VernacReserve",
            "a698213249308a1927c4fb90fb6e1fbc35157508"
        ],
        [
            "Let Rc := converse_ringType R.",
            "VernacDefinition",
            "7e081a6de8ce8a3a516c893d9fab33efff3e2549"
        ],
        [
            "Lemma mulIr_eq0 x y : rreg x -> (y * x == 0) = (y == 0).",
            "VernacStartTheoremProof",
            "a0c7bbffbba6ef1cb342db1789ce426500ca6dbb"
        ],
        [
            "exact: (@mulrI_eq0 Rc).",
            "VernacExtend",
            "ce637ff86bafca5d8359473e8c02af644dcbdc43"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma mulIr0_rreg x : (forall y, y * x = 0 -> y = 0) -> rreg x.",
            "VernacStartTheoremProof",
            "9e1ed5033d79c003939478ddfc20d7639b979f69"
        ],
        [
            "exact: (@mulrI0_lreg Rc).",
            "VernacExtend",
            "ce637ff86bafca5d8359473e8c02af644dcbdc43"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma rreg_neq0 x : rreg x -> x != 0.",
            "VernacStartTheoremProof",
            "30fd1951dd26ca3258ad0b3b430a657ebf0ecd1f"
        ],
        [
            "exact: (@lreg_neq0 Rc).",
            "VernacExtend",
            "ce637ff86bafca5d8359473e8c02af644dcbdc43"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma rregN x : rreg x -> rreg (- x).",
            "VernacStartTheoremProof",
            "b6aba6d6856b1c6e0dd81c6a49367af3037f230d"
        ],
        [
            "exact: (@lregN Rc).",
            "VernacExtend",
            "ce637ff86bafca5d8359473e8c02af644dcbdc43"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma rreg1 : rreg (1 : R).",
            "VernacStartTheoremProof",
            "089454ff4f62bdb25de31e5d6ff2092fb1e3d541"
        ],
        [
            "exact: (@lreg1 Rc).",
            "VernacExtend",
            "ce637ff86bafca5d8359473e8c02af644dcbdc43"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma rregM x y : rreg x -> rreg y -> rreg (x * y).",
            "VernacStartTheoremProof",
            "eb8a263b8b6fba52b39865997b4be1a0b974d233"
        ],
        [
            "by move=> reg_x reg_y; apply: (@lregM Rc).",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma revrX x n : (x : Rc) ^+ n = (x : R) ^+ n.",
            "VernacStartTheoremProof",
            "6a25400695f38f3a50c618ca915df6e2fb965bd9"
        ],
        [
            "by elim: n => // n IHn; rewrite exprS exprSr IHn.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma rregX x n : rreg x -> rreg (x ^+ n).",
            "VernacStartTheoremProof",
            "01b9b4a1d4125ec1f9faaff57ec29efe9f1ad307"
        ],
        [
            "by move/(@lregX Rc x n); rewrite revrX.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "End RightRegular.",
            "VernacEndSegment",
            "7d226b2e38e1d1c708b1935ee2df275dfffbdeef"
        ],
        [
            "Module Lmodule.",
            "VernacDefineModule",
            "d295f3db80d21739dd8d76dc6b6555e5d803308a"
        ],
        [
            "Structure mixin_of (R : ringType) (V : zmodType) : Type := Mixin { scale : R -> V -> V; _ : forall a b v, scale a (scale b v) = scale (a * b) v; _ : left_id 1 scale; _ : right_distributive scale +%R; _ : forall v, {morph scale^~ v: a b / a + b} }.",
            "VernacInductive",
            "c7bf281fc2dd2e6b1c05b37f20bb03436516829a"
        ],
        [
            "Section ClassDef.",
            "VernacBeginSection",
            "a5b792261e6c496f5a1a8d0f7da8c96156ca2fed"
        ],
        [
            "Variable R : ringType.",
            "VernacAssumption",
            "103955c3e16ede32f173514da95e3006926aeccd"
        ],
        [
            "Structure class_of V := Class { base : Zmodule.class_of V; mixin : mixin_of R (Zmodule.Pack base) }.",
            "VernacInductive",
            "590e2ccd1019caeeb2e1ef49265f1382dd4576e2"
        ],
        [
            "Local Coercion base : class_of >-> Zmodule.class_of.",
            "VernacCoercion",
            "68e8ba329ae1f00405d87329a27c956044fe2e34"
        ],
        [
            "Structure type (phR : phant R) := Pack {sort; _ : class_of sort}.",
            "VernacInductive",
            "78bfdb22887f748fe58a15d412ea69b6a323083f"
        ],
        [
            "Local Coercion sort : type >-> Sortclass.",
            "VernacCoercion",
            "e4478cd37693106f84ed020bd073c4970dc87530"
        ],
        [
            "Variable (phR : phant R) (T : Type) (cT : type phR).",
            "VernacAssumption",
            "c29c1b47135afbce9a566505b9ed44f41969b316"
        ],
        [
            "Definition class := let: Pack _ c as cT' := cT return class_of cT' in c.",
            "VernacDefinition",
            "0e4a80652d474f8010316ff26a5322b5207d82a3"
        ],
        [
            "Definition clone c of phant_id class c := @Pack phR T c.",
            "VernacDefinition",
            "37d5147ec25756853db3ea8f93466e928b7aedd0"
        ],
        [
            "Let xT := let: Pack T _ := cT in T.",
            "VernacDefinition",
            "0a87c77e3a5ac8febf0910b95d7b998b7cb9cf6d"
        ],
        [
            "Notation xclass := (class : class_of xT).",
            "VernacSyntacticDefinition",
            "e136614fedd7b331a23b54adad5b0bce11895ed4"
        ],
        [
            "Definition pack b0 (m0 : mixin_of R (@Zmodule.Pack T b0)) := fun bT b & phant_id (Zmodule.class bT) b => fun m & phant_id m0 m => Pack phR (@Class T b m).",
            "VernacDefinition",
            "13e08ce005a13d1a129e2d2dfb3c521335571c17"
        ],
        [
            "Definition eqType := @Equality.Pack cT xclass.",
            "VernacDefinition",
            "6139f412b89e62ff13c9c707c885de4b39151e9d"
        ],
        [
            "Definition choiceType := @Choice.Pack cT xclass.",
            "VernacDefinition",
            "f62d3090382a5ea70b978e0633e0376c4558db55"
        ],
        [
            "Definition zmodType := @Zmodule.Pack cT xclass.",
            "VernacDefinition",
            "d292a93c19cc9e36e99db073c0c14c27655bcd85"
        ],
        [
            "End ClassDef.",
            "VernacEndSegment",
            "bce1c8832045d8291c44a3fb67e9767782d2745b"
        ],
        [
            "Module Import Exports.",
            "VernacDefineModule",
            "f5a1035b94691e963f68c6f9e1df4c47bb9f27d8"
        ],
        [
            "Coercion base : class_of >-> Zmodule.class_of.",
            "VernacCoercion",
            "4b79ddf621a0d4e9cfade93739b1a32cae9c89ae"
        ],
        [
            "Coercion mixin : class_of >-> mixin_of.",
            "VernacCoercion",
            "6e94763ee53fdac946511987d81c3f6daccc67c3"
        ],
        [
            "Coercion sort : type >-> Sortclass.",
            "VernacCoercion",
            "9e1cbf06afa0d2731dbb8bfd6b9ae32be22a8ae7"
        ],
        [
            "Bind Scope ring_scope with sort.",
            "VernacBindScope",
            "ac04d07dda43f0036576b2a438f8490c7ac4d59b"
        ],
        [
            "Coercion eqType : type >-> Equality.type.",
            "VernacCoercion",
            "58308c67b5e73c9e004d57c486a5071598a25e8c"
        ],
        [
            "Canonical eqType.",
            "VernacCanonical",
            "dd1ac877a396f552e2a8f23e59be45903d8b15ad"
        ],
        [
            "Coercion choiceType : type >-> Choice.type.",
            "VernacCoercion",
            "bdc8d608f4b963a8606cd33ad18b1977a8bcb78d"
        ],
        [
            "Canonical choiceType.",
            "VernacCanonical",
            "af7a1759ddd13e2b7e4e1ce16b6a3595a77b5659"
        ],
        [
            "Coercion zmodType : type >-> Zmodule.type.",
            "VernacCoercion",
            "4ec9ca49e3551546d7d514a97127c47a11747e3a"
        ],
        [
            "Canonical zmodType.",
            "VernacCanonical",
            "9a6f278270af4b6ced100d8e0c90c7719a960a86"
        ],
        [
            "Notation lmodType R := (type (Phant R)).",
            "VernacSyntacticDefinition",
            "ee8702ebf1bda0bcd3c8360b46d260df16cbc199"
        ],
        [
            "Notation LmodType R T m := (@pack _ (Phant R) T _ m _ _ id _ id).",
            "VernacSyntacticDefinition",
            "dfb5687b23bb7a2d3166f98bf63c996433e157e4"
        ],
        [
            "Notation LmodMixin := Mixin.",
            "VernacSyntacticDefinition",
            "e3048a6368ad93f99a66e248c42f59256d92f3cb"
        ],
        [
            "Notation \"[ 'lmodType' R 'of' T 'for' cT ]\" := (@clone _ (Phant R) T cT _ idfun) (at level 0, format \"[ 'lmodType' R 'of' T 'for' cT ]\") : form_scope.",
            "VernacNotation",
            "19c514ebbc296a585c8006842d7d9520cde48502"
        ],
        [
            "Notation \"[ 'lmodType' R 'of' T ]\" := (@clone _ (Phant R) T _ _ id) (at level 0, format \"[ 'lmodType' R 'of' T ]\") : form_scope.",
            "VernacNotation",
            "d2fbd1c7bb0f9994ca55076fb76b5d3f114250cd"
        ],
        [
            "End Exports.",
            "VernacEndSegment",
            "71efedae7ccffd696e1ffe5d8ae6baa8a4484918"
        ],
        [
            "End Lmodule.",
            "VernacEndSegment",
            "e6bdd93d33c160a15f877bf12d492e9b99d4801b"
        ],
        [
            "Import Lmodule.Exports.",
            "VernacImport",
            "35a0fc10f5f5a34cb622633d337df624a71d827a"
        ],
        [
            "Definition scale (R : ringType) (V : lmodType R) := Lmodule.scale (Lmodule.class V).",
            "VernacDefinition",
            "70115bc470a5c0eef21ba45af9bb88913e3dde0d"
        ],
        [
            "Local Notation \"*:%R\" := (@scale _ _).",
            "VernacNotation",
            "b334e8944ba2a61be9cc6d29efa2775fc8787ab7"
        ],
        [
            "Local Notation \"a *: v\" := (scale a v) : ring_scope.",
            "VernacNotation",
            "7cb7de839951836d7f18f7edee1778ad48977a11"
        ],
        [
            "Section LmoduleTheory.",
            "VernacBeginSection",
            "1e6abe9e9d81f2631688c99a15cbed31e6fa3679"
        ],
        [
            "Variables (R : ringType) (V : lmodType R).",
            "VernacAssumption",
            "4026b99bf4480b55c17477bd0e47e2ee4d103dc5"
        ],
        [
            "Implicit Types (a b c : R) (u v : V).",
            "VernacReserve",
            "a9d28251db2f64c26a481f0917d3c6f63f780789"
        ],
        [
            "Local Notation \"*:%R\" := (@scale R V).",
            "VernacNotation",
            "5f1211dc91f3c0729671ba3e6357fb57f58a8647"
        ],
        [
            "Lemma scalerA a b v : a *: (b *: v) = a * b *: v.",
            "VernacStartTheoremProof",
            "aa5803041396a25609dc87576f582e05813a7c8c"
        ],
        [
            "by case: V v => ? [] ? [].",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma scale1r : @left_id R V 1 *:%R.",
            "VernacStartTheoremProof",
            "dc01300dca66dfcd7c2b57beb8ec13c2d3defddd"
        ],
        [
            "by case: V => ? [] ? [].",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma scalerDr a : {morph *:%R a : u v / u + v}.",
            "VernacStartTheoremProof",
            "0a2b13397b7380e731e463c4b3fb1ec5fdc82e40"
        ],
        [
            "by case: V a => ? [] ? [].",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma scalerDl v : {morph *:%R^~ v : a b / a + b}.",
            "VernacStartTheoremProof",
            "e750ad1485b2a6a8a59a7d871a92ab6cef144a18"
        ],
        [
            "by case: V v => ? [] ? [].",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma scale0r v : 0 *: v = 0.",
            "VernacStartTheoremProof",
            "e0f42d227056e3a5d3068b4bad70316ff72d835d"
        ],
        [
            "by apply: (addIr (1 *: v)); rewrite -scalerDl !add0r.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma scaler0 a : a *: 0 = 0 :> V.",
            "VernacStartTheoremProof",
            "e14901e587194c128de53d9a2a27e68bec8f59fd"
        ],
        [
            "by rewrite -{1}(scale0r 0) scalerA mulr0 scale0r.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma scaleNr a v : - a *: v = - (a *: v).",
            "VernacStartTheoremProof",
            "70f8011e181854c4c6825e2bd1654ca7cf4b9bdc"
        ],
        [
            "by apply: (addIr (a *: v)); rewrite -scalerDl !addNr scale0r.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma scaleN1r v : (- 1) *: v = - v.",
            "VernacStartTheoremProof",
            "01cff5285239ddcfc503f4d05f5a8a0c08679e86"
        ],
        [
            "by rewrite scaleNr scale1r.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma scalerN a v : a *: (- v) = - (a *: v).",
            "VernacStartTheoremProof",
            "18632b1c1488c194b75b0fa6457b77cd968e0be2"
        ],
        [
            "by apply: (addIr (a *: v)); rewrite -scalerDr !addNr scaler0.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma scalerBl a b v : (a - b) *: v = a *: v - b *: v.",
            "VernacStartTheoremProof",
            "41159b21aa1d48bf73d08b3083510f99cd0b6d1e"
        ],
        [
            "by rewrite scalerDl scaleNr.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma scalerBr a u v : a *: (u - v) = a *: u - a *: v.",
            "VernacStartTheoremProof",
            "e796516e799b2fc7e14111966f23eae6125e4113"
        ],
        [
            "by rewrite scalerDr scalerN.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma scaler_nat n v : n%:R *: v = v *+ n.",
            "VernacStartTheoremProof",
            "48c397d0e4ac3fa0e33e9d71779a3acd1f0bf8f1"
        ],
        [
            "elim: n => /= [|n ]; first by rewrite scale0r.",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "by rewrite !mulrS scalerDl ?scale1r => ->.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma scaler_sign (b : bool) v: (-1) ^+ b *: v = (if b then - v else v).",
            "VernacStartTheoremProof",
            "3e54902241d03d99c993a2db167f8cb254bc3442"
        ],
        [
            "by case: b; rewrite ?scaleNr scale1r.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma signrZK n : @involutive V ( *:%R ((-1) ^+ n)).",
            "VernacStartTheoremProof",
            "8f3ae5093f5d8066946270eee743633b60946c40"
        ],
        [
            "by move=> u; rewrite scalerA -expr2 sqrr_sign scale1r.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma scalerMnl a v n : a *: v *+ n = (a *+ n) *: v.",
            "VernacStartTheoremProof",
            "d3c8be3accb2bb92ca364baa944641f034540836"
        ],
        [
            "elim: n => [|n IHn]; first by rewrite !mulr0n scale0r.",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "by rewrite !mulrSr IHn scalerDl.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma scalerMnr a v n : a *: v *+ n = a *: (v *+ n).",
            "VernacStartTheoremProof",
            "8e682e0147b4d7f1fd28269451effef041139b1c"
        ],
        [
            "elim: n => [|n IHn]; first by rewrite !mulr0n scaler0.",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "by rewrite !mulrSr IHn scalerDr.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma scaler_suml v I r (P : pred I) F : (\\sum_(i <- r | P i) F i) *: v = \\sum_(i <- r | P i) F i *: v.",
            "VernacStartTheoremProof",
            "7d9b798971549394f339812b0f14a656016ed23c"
        ],
        [
            "exact: (big_morph _ (scalerDl v) (scale0r v)).",
            "VernacExtend",
            "ce637ff86bafca5d8359473e8c02af644dcbdc43"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma scaler_sumr a I r (P : pred I) (F : I -> V) : a *: (\\sum_(i <- r | P i) F i) = \\sum_(i <- r | P i) a *: F i.",
            "VernacStartTheoremProof",
            "bd7bc7316a4f5b5c72eba45db224f51b1ecde771"
        ],
        [
            "exact: big_endo (scalerDr a) (scaler0 a) I r P F.",
            "VernacExtend",
            "ce637ff86bafca5d8359473e8c02af644dcbdc43"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Section ClosedPredicates.",
            "VernacBeginSection",
            "867c96696ba4b124a23204102a22dbe3e9a8b988"
        ],
        [
            "Variable S : predPredType V.",
            "VernacAssumption",
            "8d29f06394746277a2ed9736458b24217276c15f"
        ],
        [
            "Definition scaler_closed := forall a, {in S, forall v, a *: v \\in S}.",
            "VernacDefinition",
            "0f3ef93d7ec1c76815366097197a204b024c8af0"
        ],
        [
            "Definition linear_closed := forall a, {in S &, forall u v, a *: u + v \\in S}.",
            "VernacDefinition",
            "06a72c2faf6a08d1332bbd654f35ea591a520e0d"
        ],
        [
            "Definition submod_closed := 0 \\in S /\\ linear_closed.",
            "VernacDefinition",
            "db7e3b75f7402bfc60bdd1208c4829561f1bf6bf"
        ],
        [
            "Lemma linear_closedB : linear_closed -> subr_2closed S.",
            "VernacStartTheoremProof",
            "b40bd8f60bc67c7334fecf13837a961b2042b434"
        ],
        [
            "by move=> Slin u v Su Sv; rewrite addrC -scaleN1r Slin.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma submod_closedB : submod_closed -> zmod_closed S.",
            "VernacStartTheoremProof",
            "d8e4ad7d00abcdc626d7df7d4bb6cfe2f18631e3"
        ],
        [
            "by case=> S0 /linear_closedB.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma submod_closedZ : submod_closed -> scaler_closed.",
            "VernacStartTheoremProof",
            "7887310f8c5ae56c8d3549255465927ed768452f"
        ],
        [
            "by case=> S0 Slin a v Sv; rewrite -[a *: v]addr0 Slin.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "End ClosedPredicates.",
            "VernacEndSegment",
            "6238d5ef0852f49433340e32287fd9e002b055ef"
        ],
        [
            "End LmoduleTheory.",
            "VernacEndSegment",
            "ead467200db3e7415f6e3cd8e73f3eb1e7c6fae6"
        ],
        [
            "Module Lalgebra.",
            "VernacDefineModule",
            "dfab40fc0b7aca504c6f53cdfe1b206211e4a182"
        ],
        [
            "Definition axiom (R : ringType) (V : lmodType R) (mul : V -> V -> V) := forall a u v, a *: mul u v = mul (a *: u) v.",
            "VernacDefinition",
            "74c59d0e5a2ab1ffdbc37b2283da0dc777a384d0"
        ],
        [
            "Section ClassDef.",
            "VernacBeginSection",
            "a5b792261e6c496f5a1a8d0f7da8c96156ca2fed"
        ],
        [
            "Variable R : ringType.",
            "VernacAssumption",
            "103955c3e16ede32f173514da95e3006926aeccd"
        ],
        [
            "Record class_of (T : Type) : Type := Class { base : Ring.class_of T; mixin : Lmodule.mixin_of R (Zmodule.Pack base); ext : @axiom R (Lmodule.Pack _ (Lmodule.Class mixin)) (Ring.mul base) }.",
            "VernacInductive",
            "a7f398d05fe744d70c4666b2c9827f51314177b1"
        ],
        [
            "Definition base2 R m := Lmodule.Class (@mixin R m).",
            "VernacDefinition",
            "4192994fa230bcb75de6b8d63f92ada4833c4834"
        ],
        [
            "Local Coercion base : class_of >-> Ring.class_of.",
            "VernacCoercion",
            "a1be4957282ccf9cb5ecc846b44d29a115416bbe"
        ],
        [
            "Local Coercion base2 : class_of >-> Lmodule.class_of.",
            "VernacCoercion",
            "7a043ecb22e6b2621dbbf111a0751919e0882453"
        ],
        [
            "Structure type (phR : phant R) := Pack {sort; _ : class_of sort}.",
            "VernacInductive",
            "78bfdb22887f748fe58a15d412ea69b6a323083f"
        ],
        [
            "Local Coercion sort : type >-> Sortclass.",
            "VernacCoercion",
            "e4478cd37693106f84ed020bd073c4970dc87530"
        ],
        [
            "Variable (phR : phant R) (T : Type) (cT : type phR).",
            "VernacAssumption",
            "c29c1b47135afbce9a566505b9ed44f41969b316"
        ],
        [
            "Definition class := let: Pack _ c as cT' := cT return class_of cT' in c.",
            "VernacDefinition",
            "0e4a80652d474f8010316ff26a5322b5207d82a3"
        ],
        [
            "Definition clone c of phant_id class c := @Pack phR T c.",
            "VernacDefinition",
            "37d5147ec25756853db3ea8f93466e928b7aedd0"
        ],
        [
            "Let xT := let: Pack T _ := cT in T.",
            "VernacDefinition",
            "0a87c77e3a5ac8febf0910b95d7b998b7cb9cf6d"
        ],
        [
            "Notation xclass := (class : class_of xT).",
            "VernacSyntacticDefinition",
            "e136614fedd7b331a23b54adad5b0bce11895ed4"
        ],
        [
            "Definition pack T b0 mul0 (axT : @axiom R (@Lmodule.Pack R _ T b0) mul0) := fun bT b & phant_id (Ring.class bT) (b : Ring.class_of T) => fun mT m & phant_id (@Lmodule.class R phR mT) (@Lmodule.Class R T b m) => fun ax & phant_id axT ax => Pack (Phant R) (@Class T b m ax).",
            "VernacDefinition",
            "3ef9448a16b1a96d47ff4b9dd4f61595e0b31bba"
        ],
        [
            "Definition eqType := @Equality.Pack cT xclass.",
            "VernacDefinition",
            "6139f412b89e62ff13c9c707c885de4b39151e9d"
        ],
        [
            "Definition choiceType := @Choice.Pack cT xclass.",
            "VernacDefinition",
            "f62d3090382a5ea70b978e0633e0376c4558db55"
        ],
        [
            "Definition zmodType := @Zmodule.Pack cT xclass.",
            "VernacDefinition",
            "d292a93c19cc9e36e99db073c0c14c27655bcd85"
        ],
        [
            "Definition ringType := @Ring.Pack cT xclass.",
            "VernacDefinition",
            "8a9134d1dac21560b6c04dc7467c51b02f0db83e"
        ],
        [
            "Definition lmodType := @Lmodule.Pack R phR cT xclass.",
            "VernacDefinition",
            "ce00637124e62ebbeefb88ddd20470c874821839"
        ],
        [
            "Definition lmod_ringType := @Lmodule.Pack R phR ringType xclass.",
            "VernacDefinition",
            "d311386032e4b13d065651de6a698d950fc396c7"
        ],
        [
            "End ClassDef.",
            "VernacEndSegment",
            "bce1c8832045d8291c44a3fb67e9767782d2745b"
        ],
        [
            "Module Exports.",
            "VernacDefineModule",
            "d4a1114ec53f746523a7dec57823f7f03e51fa24"
        ],
        [
            "Coercion base : class_of >-> Ring.class_of.",
            "VernacCoercion",
            "a708b936f7f0c0b9a13e29435fe8a33ccf121548"
        ],
        [
            "Coercion base2 : class_of >-> Lmodule.class_of.",
            "VernacCoercion",
            "bd827b2aa51a8c9185f55646b8eff8540ffda2ed"
        ],
        [
            "Coercion sort : type >-> Sortclass.",
            "VernacCoercion",
            "9e1cbf06afa0d2731dbb8bfd6b9ae32be22a8ae7"
        ],
        [
            "Bind Scope ring_scope with sort.",
            "VernacBindScope",
            "ac04d07dda43f0036576b2a438f8490c7ac4d59b"
        ],
        [
            "Coercion eqType : type >-> Equality.type.",
            "VernacCoercion",
            "58308c67b5e73c9e004d57c486a5071598a25e8c"
        ],
        [
            "Canonical eqType.",
            "VernacCanonical",
            "dd1ac877a396f552e2a8f23e59be45903d8b15ad"
        ],
        [
            "Coercion choiceType : type >-> Choice.type.",
            "VernacCoercion",
            "bdc8d608f4b963a8606cd33ad18b1977a8bcb78d"
        ],
        [
            "Canonical choiceType.",
            "VernacCanonical",
            "af7a1759ddd13e2b7e4e1ce16b6a3595a77b5659"
        ],
        [
            "Coercion zmodType : type >-> Zmodule.type.",
            "VernacCoercion",
            "4ec9ca49e3551546d7d514a97127c47a11747e3a"
        ],
        [
            "Canonical zmodType.",
            "VernacCanonical",
            "9a6f278270af4b6ced100d8e0c90c7719a960a86"
        ],
        [
            "Coercion ringType : type >-> Ring.type.",
            "VernacCoercion",
            "3563a3bf802f370588b71df18917d551f221a05e"
        ],
        [
            "Canonical ringType.",
            "VernacCanonical",
            "b7d4c328ac58b23ee4b52bd787434621c20d2c4d"
        ],
        [
            "Coercion lmodType : type >-> Lmodule.type.",
            "VernacCoercion",
            "9ff62a98b0f74b40c781351d02b7295e741840a6"
        ],
        [
            "Canonical lmodType.",
            "VernacCanonical",
            "2508a378d00cff399685e05d31698f84cdfa1eb3"
        ],
        [
            "Canonical lmod_ringType.",
            "VernacCanonical",
            "973fdde02596be0c29ff31a54ea856ad1175b568"
        ],
        [
            "Notation lalgType R := (type (Phant R)).",
            "VernacSyntacticDefinition",
            "5c19ac2cb982518c7b3c735b2ccab25e6b1f6f0a"
        ],
        [
            "Notation LalgType R T a := (@pack _ (Phant R) T _ _ a _ _ id _ _ id _ id).",
            "VernacSyntacticDefinition",
            "7053b0dc40583c8f37feea80a2336fe9cde1898c"
        ],
        [
            "Notation \"[ 'lalgType' R 'of' T 'for' cT ]\" := (@clone _ (Phant R) T cT _ idfun) (at level 0, format \"[ 'lalgType' R 'of' T 'for' cT ]\") : form_scope.",
            "VernacNotation",
            "c8fea7a4ca051e104b2785b32b547fff5b49d3c5"
        ],
        [
            "Notation \"[ 'lalgType' R 'of' T ]\" := (@clone _ (Phant R) T _ _ id) (at level 0, format \"[ 'lalgType' R 'of' T ]\") : form_scope.",
            "VernacNotation",
            "742288e2cd66aa052b24d3b869e3f41fae519563"
        ],
        [
            "End Exports.",
            "VernacEndSegment",
            "71efedae7ccffd696e1ffe5d8ae6baa8a4484918"
        ],
        [
            "End Lalgebra.",
            "VernacEndSegment",
            "19ee64bd1eb274f27c0456419fd9ab4478871f98"
        ],
        [
            "Import Lalgebra.Exports.",
            "VernacImport",
            "efd4f601470a546af1e17ed4172d4fd85a099d1c"
        ],
        [
            "Local Notation \"k %:A\" := (k *: 1) : ring_scope.",
            "VernacNotation",
            "3b602c8bcfe268404f75e80a57352577ff4cabd9"
        ],
        [
            "Definition regular R : Type := R.",
            "VernacDefinition",
            "2392cb927febbc97e1a2ba34cdbdbad4c5b8f5cb"
        ],
        [
            "Local Notation \"R ^o\" := (regular R) (at level 2, format \"R ^o\") : type_scope.",
            "VernacNotation",
            "a1553490d498632675f9598739bde1e77b9a418e"
        ],
        [
            "Section LalgebraTheory.",
            "VernacBeginSection",
            "62ebf4ae008b6855652fb0871e4f26e06e050577"
        ],
        [
            "Variables (R : ringType) (A : lalgType R).",
            "VernacAssumption",
            "a067d910aa6c8abe89b1128e2da3c078183e6834"
        ],
        [
            "Implicit Types x y : A.",
            "VernacReserve",
            "6cdb17bd9895a045a265568b4f36ad2655bdb52e"
        ],
        [
            "Lemma scalerAl k (x y : A) : k *: (x * y) = k *: x * y.",
            "VernacStartTheoremProof",
            "c7ec68711672a1c7185f5ff0f52fd9508f2eb2c2"
        ],
        [
            "by case: A k x y => ? [].",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma mulr_algl a x : a%:A * x = a *: x.",
            "VernacStartTheoremProof",
            "9f6aac4876ea900015c71a279b97c8e9e35368ab"
        ],
        [
            "by rewrite -scalerAl mul1r.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Canonical regular_eqType := [eqType of R^o].",
            "VernacDefinition",
            "d307b59b1d421e9078d18c8738c13d0df1e84fc1"
        ],
        [
            "Canonical regular_choiceType := [choiceType of R^o].",
            "VernacDefinition",
            "6a5cfd47164e93904ed3b79ed5850742c11d65bc"
        ],
        [
            "Canonical regular_zmodType := [zmodType of R^o].",
            "VernacDefinition",
            "fd7aae1a9bed5eb632543381269d8a35c90b6a8a"
        ],
        [
            "Canonical regular_ringType := [ringType of R^o].",
            "VernacDefinition",
            "47ab48ae5fa4a699e3e2a593a946da1a7efabd55"
        ],
        [
            "Definition regular_lmodMixin := let mkMixin := @Lmodule.Mixin R regular_zmodType (@mul R) in mkMixin (@mulrA R) (@mul1r R) (@mulrDr R) (fun v a b => mulrDl a b v).",
            "VernacDefinition",
            "50c1cbf4a0924df71c6c7edfcf18694f8663a54e"
        ],
        [
            "Canonical regular_lmodType := LmodType R R^o regular_lmodMixin.",
            "VernacDefinition",
            "d4ea508c91b08e19edeeb2f1cdace1aa69532cf0"
        ],
        [
            "Canonical regular_lalgType := LalgType R R^o (@mulrA regular_ringType).",
            "VernacDefinition",
            "25bae60e9ba7d3e9ed18531fd25f39f84eebedf5"
        ],
        [
            "Section ClosedPredicates.",
            "VernacBeginSection",
            "867c96696ba4b124a23204102a22dbe3e9a8b988"
        ],
        [
            "Variable S : predPredType A.",
            "VernacAssumption",
            "3e17c683746ddb78242740391958a6c77f6d5755"
        ],
        [
            "Definition subalg_closed := [/\\ 1 \\in S, linear_closed S & mulr_2closed S].",
            "VernacDefinition",
            "3e50b1ef69f122f1fba97ef57b04fbf68c1d95df"
        ],
        [
            "Lemma subalg_closedZ : subalg_closed -> submod_closed S.",
            "VernacStartTheoremProof",
            "5c86b2184594fa7b034bc00d8375d29d8cfe057c"
        ],
        [
            "by case=> S1 Slin _; split; rewrite // -(subrr 1) linear_closedB.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma subalg_closedBM : subalg_closed -> subring_closed S.",
            "VernacStartTheoremProof",
            "29393b4e2dc02458819c58c0145a79e8b2e75f4d"
        ],
        [
            "by case=> S1 Slin SM; split=> //; apply: linear_closedB.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "End ClosedPredicates.",
            "VernacEndSegment",
            "6238d5ef0852f49433340e32287fd9e002b055ef"
        ],
        [
            "End LalgebraTheory.",
            "VernacEndSegment",
            "041ca0a3b2cf77296718c7cdc47a777819ab85fb"
        ],
        [
            "Module Additive.",
            "VernacDefineModule",
            "b2593dca9aff2a04bc4b1e31c137a3e33d7ff087"
        ],
        [
            "Section ClassDef.",
            "VernacBeginSection",
            "a5b792261e6c496f5a1a8d0f7da8c96156ca2fed"
        ],
        [
            "Variables U V : zmodType.",
            "VernacAssumption",
            "2d5d88240bba109b8dfe9bf4547680bd4eb80c0c"
        ],
        [
            "Definition axiom (f : U -> V) := {morph f : x y / x - y}.",
            "VernacDefinition",
            "1b57be2cfe639e4c0ec44fc4fc286945352b3c7b"
        ],
        [
            "Structure map (phUV : phant (U -> V)) := Pack {apply; _ : axiom apply}.",
            "VernacInductive",
            "3a162aa1168c097949fc0c576817fa8dc717ac5d"
        ],
        [
            "Local Coercion apply : map >-> Funclass.",
            "VernacCoercion",
            "6b1698c04735c8b1016fdce698430a6a0807a839"
        ],
        [
            "Variables (phUV : phant (U -> V)) (f g : U -> V) (cF : map phUV).",
            "VernacAssumption",
            "809864a368d3caa33981e9c375f59d408b334468"
        ],
        [
            "Definition class := let: Pack _ c as cF' := cF return axiom cF' in c.",
            "VernacDefinition",
            "cec1c7f44f822eeffcf3ca9058253b4b7bdcd30b"
        ],
        [
            "Definition clone fA of phant_id g (apply cF) & phant_id fA class := @Pack phUV f fA.",
            "VernacDefinition",
            "a739ec63c60bd88f69b960e86525c3fcf88a8f22"
        ],
        [
            "End ClassDef.",
            "VernacEndSegment",
            "bce1c8832045d8291c44a3fb67e9767782d2745b"
        ],
        [
            "Module Exports.",
            "VernacDefineModule",
            "d4a1114ec53f746523a7dec57823f7f03e51fa24"
        ],
        [
            "Notation additive f := (axiom f).",
            "VernacSyntacticDefinition",
            "43d5b9b2b7500a5ec1d66d8a7b64a81fe98f1c6e"
        ],
        [
            "Coercion apply : map >-> Funclass.",
            "VernacCoercion",
            "d1b4f6021d79ee27ab09a2bfa027ea0b0b7f7d54"
        ],
        [
            "Notation Additive fA := (Pack (Phant _) fA).",
            "VernacSyntacticDefinition",
            "16506ac73911121b3b1353aa799ebb140022ff54"
        ],
        [
            "Notation \"{ 'additive' fUV }\" := (map (Phant fUV)) (at level 0, format \"{ 'additive' fUV }\") : ring_scope.",
            "VernacNotation",
            "8a250415a5933a2edb2e05f8e2690c3b30cba779"
        ],
        [
            "Notation \"[ 'additive' 'of' f 'as' g ]\" := (@clone _ _ _ f g _ _ idfun id) (at level 0, format \"[ 'additive' 'of' f 'as' g ]\") : form_scope.",
            "VernacNotation",
            "32e8bff1dc67790b2ef0113a303e04dcf72e9f2c"
        ],
        [
            "Notation \"[ 'additive' 'of' f ]\" := (@clone _ _ _ f f _ _ id id) (at level 0, format \"[ 'additive' 'of' f ]\") : form_scope.",
            "VernacNotation",
            "5524f5a154080ae18a60500805f154614c81ebc6"
        ],
        [
            "End Exports.",
            "VernacEndSegment",
            "71efedae7ccffd696e1ffe5d8ae6baa8a4484918"
        ],
        [
            "End Additive.",
            "VernacEndSegment",
            "73bb5b1c75211ef95c10fea430b244ebd0815a16"
        ],
        [
            "Include Additive.Exports.",
            "VernacInclude",
            "82b3a50e0728de3dd8716f722019d62763c783c3"
        ],
        [
            "Section LiftedZmod.",
            "VernacBeginSection",
            "1a096b1abdf68557d84d1f556cd31f0234778aa5"
        ],
        [
            "Variables (U : Type) (V : zmodType).",
            "VernacAssumption",
            "10f12449cb93482797f07ca929ce13266c459d48"
        ],
        [
            "Definition null_fun_head (phV : phant V) of U : V := let: Phant := phV in 0.",
            "VernacDefinition",
            "a859111c066862dbb46e7dd4dd15ba269a62cfec"
        ],
        [
            "Definition add_fun_head t (f g : U -> V) x := let: tt := t in f x + g x.",
            "VernacDefinition",
            "87a80dafe4797a56b9f92ccfdb0e30f6747cd2c9"
        ],
        [
            "Definition sub_fun_head t (f g : U -> V) x := let: tt := t in f x - g x.",
            "VernacDefinition",
            "d8c731d616e7c06b5b92c4f96b4793dd4600efe4"
        ],
        [
            "End LiftedZmod.",
            "VernacEndSegment",
            "5c8f9def8205fcc39ddc1ad9f90fdd561eb459ea"
        ],
        [
            "Section LiftedRing.",
            "VernacBeginSection",
            "ac43aedede0364570db687da829abd33b4de7994"
        ],
        [
            "Variables (R : ringType) (T : Type).",
            "VernacAssumption",
            "5c5979d1650693f5d858933cea66b2c722f1dca9"
        ],
        [
            "Implicit Type f : T -> R.",
            "VernacReserve",
            "dc10fd62da9d48ca8d8c48ff765d597c10d00567"
        ],
        [
            "Definition mull_fun_head t a f x := let: tt := t in a * f x.",
            "VernacDefinition",
            "8b8796bb402f564c257b82b51f510acded2a27a1"
        ],
        [
            "Definition mulr_fun_head t a f x := let: tt := t in f x * a.",
            "VernacDefinition",
            "deb3f0bcff47000dfd94bc310d8b43692804f2e7"
        ],
        [
            "End LiftedRing.",
            "VernacEndSegment",
            "86bc0fd2012e9e4e0d4a1f92888df56f5de4b112"
        ],
        [
            "Section LiftedScale.",
            "VernacBeginSection",
            "26096f901c2df6ff007d7606f6a9f1f85c8eebcc"
        ],
        [
            "Variables (R : ringType) (U : Type) (V : lmodType R) (A : lalgType R).",
            "VernacAssumption",
            "fc40bd07771993265b28830a1d5791111dcbb244"
        ],
        [
            "Definition scale_fun_head t a (f : U -> V) x := let: tt := t in a *: f x.",
            "VernacDefinition",
            "1fe1927fe601ee62c6bec2636e6347d11285323d"
        ],
        [
            "Definition in_alg_head (phA : phant A) k : A := let: Phant := phA in k%:A.",
            "VernacDefinition",
            "b29adf9c4866be24810dcd72eb382f4641cbd6bc"
        ],
        [
            "End LiftedScale.",
            "VernacEndSegment",
            "69d28908312223c05eab6183b11fe77fedef7ec1"
        ],
        [
            "Notation null_fun V := (null_fun_head (Phant V)) (only parsing).",
            "VernacSyntacticDefinition",
            "6c5278c89d9024f92257482ec65a9a37a641efc7"
        ],
        [
            "Local Notation in_alg_loc A := (in_alg_head (Phant A)) (only parsing).",
            "VernacSyntacticDefinition",
            "d7e431250582f19f4aabc90a740132fff7bb7dab"
        ],
        [
            "Local Notation \"\\0\" := (null_fun _) : ring_scope.",
            "VernacNotation",
            "18809471bd19916040571e68f33719fffef79923"
        ],
        [
            "Local Notation \"f \\+ g\" := (add_fun_head tt f g) : ring_scope.",
            "VernacNotation",
            "9026838d1171de8de4253ac406e54b632bb436ed"
        ],
        [
            "Local Notation \"f \\- g\" := (sub_fun_head tt f g) : ring_scope.",
            "VernacNotation",
            "772ef886f7a057b1c15d7c5341ec29bdb4ee924a"
        ],
        [
            "Local Notation \"a \\*: f\" := (scale_fun_head tt a f) : ring_scope.",
            "VernacNotation",
            "f68ce2df4737e2ad46a9e6e791e01588d95fa54c"
        ],
        [
            "Local Notation \"x \\*o f\" := (mull_fun_head tt x f) : ring_scope.",
            "VernacNotation",
            "1bfdffaa26744aa99b0ba90cc8a4f87c772cbc31"
        ],
        [
            "Local Notation \"x \\o* f\" := (mulr_fun_head tt x f) : ring_scope.",
            "VernacNotation",
            "95fe5bc9950d400e1c6224c7afb8569ae15d1eee"
        ],
        [
            "Section AdditiveTheory.",
            "VernacBeginSection",
            "802fceb75aa6d116dbe4788466acbc83927b0f93"
        ],
        [
            "Section Properties.",
            "VernacBeginSection",
            "7e2e8a2a6f5d6b0dc7ec0c9707dea0b804f3861f"
        ],
        [
            "Variables (U V : zmodType) (k : unit) (f : {additive U -> V}).",
            "VernacAssumption",
            "e0cacb94ab7c6771fa79436ae340a248e088918c"
        ],
        [
            "Lemma raddfB : {morph f : x y / x - y}.",
            "VernacStartTheoremProof",
            "010fe4726c5eab65b2dc3afe12e1e747ec7d218f"
        ],
        [
            "exact: Additive.class.",
            "VernacExtend",
            "ce637ff86bafca5d8359473e8c02af644dcbdc43"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma raddf0 : f 0 = 0.",
            "VernacStartTheoremProof",
            "b5a46e40098f2103c076f690c1f27d6da20d4d6e"
        ],
        [
            "by rewrite -[0]subr0 raddfB subrr.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma raddf_eq0 x : injective f -> (f x == 0) = (x == 0).",
            "VernacStartTheoremProof",
            "6c75cb8bd882092aa3025b386b85bf63fcc65a1d"
        ],
        [
            "by move=> /inj_eq <-; rewrite raddf0.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma raddfN : {morph f : x / - x}.",
            "VernacStartTheoremProof",
            "18ca2a0f557deaca347f4653390092fa7608ed2c"
        ],
        [
            "by move=> x /=; rewrite -sub0r raddfB raddf0 sub0r.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma raddfD : {morph f : x y / x + y}.",
            "VernacStartTheoremProof",
            "35b9740efc3fdca3a228b5a312e93f91ab25661c"
        ],
        [
            "by move=> x y; rewrite -[y]opprK raddfB -raddfN.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma raddfMn n : {morph f : x / x *+ n}.",
            "VernacStartTheoremProof",
            "76a439c79017ea9ad5c1591eabcd0e972e0ccc2a"
        ],
        [
            "by elim: n => [|n IHn] x /=; rewrite ?raddf0 // !mulrS raddfD IHn.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma raddfMNn n : {morph f : x / x *- n}.",
            "VernacStartTheoremProof",
            "dc7ac09ebdcd2aef63f23831e46512a67d35f6f7"
        ],
        [
            "by move=> x /=; rewrite raddfN raddfMn.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma raddf_sum I r (P : pred I) E : f (\\sum_(i <- r | P i) E i) = \\sum_(i <- r | P i) f (E i).",
            "VernacStartTheoremProof",
            "b7e0e629bdd488da613f390a65eaadaf9eae1242"
        ],
        [
            "exact: (big_morph f raddfD raddf0).",
            "VernacExtend",
            "ce637ff86bafca5d8359473e8c02af644dcbdc43"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma can2_additive f' : cancel f f' -> cancel f' f -> additive f'.",
            "VernacStartTheoremProof",
            "fcb4fbf6a518c2929562ba9fc90f1407f7b3b385"
        ],
        [
            "by move=> fK f'K x y /=; apply: (canLR fK); rewrite raddfB !f'K.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma bij_additive : bijective f -> exists2 f' : {additive V -> U}, cancel f f' & cancel f' f.",
            "VernacStartTheoremProof",
            "6c1679431bee9d3e6e144ea2abb93bb011962e92"
        ],
        [
            "by case=> f' fK f'K; exists (Additive (can2_additive fK f'K)).",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Fact locked_is_additive : additive (locked_with k (f : U -> V)).",
            "VernacStartTheoremProof",
            "069cb62cf583e6d8db550afe69cfdecfab9e4c9d"
        ],
        [
            "by case: k f => [] [].",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Canonical locked_additive := Additive locked_is_additive.",
            "VernacDefinition",
            "310e28d6e072f0698d6b2bdedab764bfcc0f66f3"
        ],
        [
            "End Properties.",
            "VernacEndSegment",
            "aa92f2fb951d93f9345c3b97356b8e42ae399029"
        ],
        [
            "Section RingProperties.",
            "VernacBeginSection",
            "ce24936884cdb345141ffddaff08bf9b21cbf61a"
        ],
        [
            "Variables (R S : ringType) (f : {additive R -> S}).",
            "VernacAssumption",
            "96f9beaa291464302b2b3acff6b942c0d151b742"
        ],
        [
            "Lemma raddfMnat n x : f (n%:R * x) = n%:R * f x.",
            "VernacStartTheoremProof",
            "d14b4061b3f9941e08ee75545a56d9cda08a1dfe"
        ],
        [
            "by rewrite !mulr_natl raddfMn.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma raddfMsign n x : f ((-1) ^+ n * x) = (-1) ^+ n * f x.",
            "VernacStartTheoremProof",
            "8ecbb7adf38afb5404afbfa0d8408229977a496d"
        ],
        [
            "by rewrite !(mulr_sign, =^~ signr_odd) (fun_if f) raddfN.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Variables (U : lmodType R) (V : lmodType S) (h : {additive U -> V}).",
            "VernacAssumption",
            "a1446c5a7a9b15711ab7372462d279a3a07ae214"
        ],
        [
            "Lemma raddfZnat n u : h (n%:R *: u) = n%:R *: h u.",
            "VernacStartTheoremProof",
            "36e3b2ed5569b9196181bedf13cd15babdc5e7d5"
        ],
        [
            "by rewrite !scaler_nat raddfMn.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma raddfZsign n u : h ((-1) ^+ n *: u) = (-1) ^+ n *: h u.",
            "VernacStartTheoremProof",
            "b995f0f71f919471e391eb944f121467eace9a33"
        ],
        [
            "by rewrite !(scaler_sign, =^~ signr_odd) (fun_if h) raddfN.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "End RingProperties.",
            "VernacEndSegment",
            "d3ab2d8f4fb492fefa795460c8cfb08f5db768cc"
        ],
        [
            "Section AddFun.",
            "VernacBeginSection",
            "1c0b545b72be70a158dc438f07e86eb18e0c7a93"
        ],
        [
            "Variables (U V W : zmodType) (f g : {additive V -> W}) (h : {additive U -> V}).",
            "VernacAssumption",
            "bb1fe3bab6b08c071f2da5d445a8702659f27d62"
        ],
        [
            "Fact idfun_is_additive : additive (@idfun U).",
            "VernacStartTheoremProof",
            "42f196b0deddd0a23517ff1467c0af9b403a8a2f"
        ],
        [
            "by [].",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Canonical idfun_additive := Additive idfun_is_additive.",
            "VernacDefinition",
            "e384e4ce2d1e5d7dc334d4e0b1264d7a3cabf8e2"
        ],
        [
            "Fact comp_is_additive : additive (f \\o h).",
            "VernacStartTheoremProof",
            "7cc7da4387c1805b1e11fdedcf2d3df72133c62d"
        ],
        [
            "by move=> x y /=; rewrite !raddfB.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Canonical comp_additive := Additive comp_is_additive.",
            "VernacDefinition",
            "06c8413972e5b08bdeae8e6f8cac07497f9b7dd2"
        ],
        [
            "Fact opp_is_additive : additive (-%R : U -> U).",
            "VernacStartTheoremProof",
            "c847140431cfb1dc3cd678998a5859c5f2b97492"
        ],
        [
            "by move=> x y; rewrite /= opprD.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Canonical opp_additive := Additive opp_is_additive.",
            "VernacDefinition",
            "222cd5336bc8d87ef63b0171ab54dcdb10975641"
        ],
        [
            "Fact null_fun_is_additive : additive (\\0 : U -> V).",
            "VernacStartTheoremProof",
            "d32de92f6383ea7ef406c65d2f81445717765326"
        ],
        [
            "by move=> /=; rewrite subr0.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Canonical null_fun_additive := Additive null_fun_is_additive.",
            "VernacDefinition",
            "3e00fae9813463bf6bf391327f1084895736648e"
        ],
        [
            "Fact add_fun_is_additive : additive (f \\+ g).",
            "VernacStartTheoremProof",
            "827dbed0a7da5a60304c3b27170b16d73737108f"
        ],
        [
            "by move=> x y /=; rewrite !raddfB addrCA -!addrA addrCA -opprD.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Canonical add_fun_additive := Additive add_fun_is_additive.",
            "VernacDefinition",
            "cea8f43ac6bded2187a3704e4c6cf78cc888be5e"
        ],
        [
            "Fact sub_fun_is_additive : additive (f \\- g).",
            "VernacStartTheoremProof",
            "f19992958f625d94a0d24e3d90fc1bd41cb19e07"
        ],
        [
            "by move=> x y /=; rewrite !raddfB addrAC -!addrA -!opprD addrAC addrA.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Canonical sub_fun_additive := Additive sub_fun_is_additive.",
            "VernacDefinition",
            "5e6428752c8989c659f93f5e13195f276da8cdcb"
        ],
        [
            "End AddFun.",
            "VernacEndSegment",
            "773e2690afeffc5675ed3b0fdea3dd9296d2e67d"
        ],
        [
            "Section MulFun.",
            "VernacBeginSection",
            "436cd5bdcf0b4e48e577401a28d0c45ee79bac16"
        ],
        [
            "Variables (R : ringType) (U : zmodType).",
            "VernacAssumption",
            "43ab1c4f709b0e55b031bab39fb030a485f71099"
        ],
        [
            "Variables (a : R) (f : {additive U -> R}).",
            "VernacAssumption",
            "765650606b1c89349164afb0060399f036f0725a"
        ],
        [
            "Fact mull_fun_is_additive : additive (a \\*o f).",
            "VernacStartTheoremProof",
            "5455a6a8f034bd456279009d3a582dfa63e0a360"
        ],
        [
            "by move=> x y /=; rewrite raddfB mulrBr.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Canonical mull_fun_additive := Additive mull_fun_is_additive.",
            "VernacDefinition",
            "a628a78c1b6715cbdf2efc346c753b23d307a9b4"
        ],
        [
            "Fact mulr_fun_is_additive : additive (a \\o* f).",
            "VernacStartTheoremProof",
            "61cc4344a5991fe5628ee0fd7b0965defd73a379"
        ],
        [
            "by move=> x y /=; rewrite raddfB mulrBl.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Canonical mulr_fun_additive := Additive mulr_fun_is_additive.",
            "VernacDefinition",
            "229d4da98bacf591e82abd9185d2965157b0fd27"
        ],
        [
            "End MulFun.",
            "VernacEndSegment",
            "37d0960f96adfd50690348f2e13560d227fbba16"
        ],
        [
            "Section ScaleFun.",
            "VernacBeginSection",
            "00d578d52599b4ff6de4a39ab1c9b4ab6f74e894"
        ],
        [
            "Variables (R : ringType) (U : zmodType) (V : lmodType R).",
            "VernacAssumption",
            "365d748ad14ede46c7571fad3e8653f794d98b9f"
        ],
        [
            "Variables (a : R) (f : {additive U -> V}).",
            "VernacAssumption",
            "700ddfe772c106d145305344f545eec5085c29ca"
        ],
        [
            "Canonical scale_additive := Additive (@scalerBr R V a).",
            "VernacDefinition",
            "e1b77b0820b312bbc935386188a43320d0532518"
        ],
        [
            "Canonical scale_fun_additive := [additive of a \\*: f as f \\; *:%R a].",
            "VernacDefinition",
            "cd2514f0d4ea8758e338c470368429194e5112fd"
        ],
        [
            "End ScaleFun.",
            "VernacEndSegment",
            "e75664baa80c6d24bf91144f18d4edfad343bb0f"
        ],
        [
            "End AdditiveTheory.",
            "VernacEndSegment",
            "841c7e870c7003a89e5971313e40e1c107ee28ac"
        ],
        [
            "Module RMorphism.",
            "VernacDefineModule",
            "663be0dc72cb9e34963dc0f9d446beea1c620ac6"
        ],
        [
            "Section ClassDef.",
            "VernacBeginSection",
            "a5b792261e6c496f5a1a8d0f7da8c96156ca2fed"
        ],
        [
            "Variables R S : ringType.",
            "VernacAssumption",
            "6f2ae411fe9d9fd0a7ae0ad9f195d75bc14abc20"
        ],
        [
            "Definition mixin_of (f : R -> S) := {morph f : x y / x * y}%R * (f 1 = 1) : Prop.",
            "VernacDefinition",
            "be4e8d8f49cbb65212e9b6d37b6d699f4da88597"
        ],
        [
            "Record class_of f : Prop := Class {base : additive f; mixin : mixin_of f}.",
            "VernacInductive",
            "16e0a4e39a7efd23f2ad966e2491d057a197378a"
        ],
        [
            "Local Coercion base : class_of >-> additive.",
            "VernacCoercion",
            "fb6e5d458fc7529d00039290e950b61eda84a212"
        ],
        [
            "Structure map (phRS : phant (R -> S)) := Pack {apply; _ : class_of apply}.",
            "VernacInductive",
            "1935d0cfc32353ccf0a4b7e563355b47608c0f06"
        ],
        [
            "Local Coercion apply : map >-> Funclass.",
            "VernacCoercion",
            "6b1698c04735c8b1016fdce698430a6a0807a839"
        ],
        [
            "Variables (phRS : phant (R -> S)) (f g : R -> S) (cF : map phRS).",
            "VernacAssumption",
            "d6b06177f1dbd41308f21756836f8ea72892ebde"
        ],
        [
            "Definition class := let: Pack _ c as cF' := cF return class_of cF' in c.",
            "VernacDefinition",
            "4bd0d25e46e4db34ffa04206bd9978757463d540"
        ],
        [
            "Definition clone fM of phant_id g (apply cF) & phant_id fM class := @Pack phRS f fM.",
            "VernacDefinition",
            "d5258909de5247145b44adf2f94c7b4a3dfe46cf"
        ],
        [
            "Definition pack (fM : mixin_of f) := fun (bF : Additive.map phRS) fA & phant_id (Additive.class bF) fA => Pack phRS (Class fA fM).",
            "VernacDefinition",
            "12b5c3c2f877e6a93e76fbcc8b917b7ddf2b2388"
        ],
        [
            "Canonical additive := Additive.Pack phRS class.",
            "VernacDefinition",
            "371dc5c1196d286b5b2ac49feca949bb9212c88d"
        ],
        [
            "End ClassDef.",
            "VernacEndSegment",
            "bce1c8832045d8291c44a3fb67e9767782d2745b"
        ],
        [
            "Module Exports.",
            "VernacDefineModule",
            "d4a1114ec53f746523a7dec57823f7f03e51fa24"
        ],
        [
            "Notation multiplicative f := (mixin_of f).",
            "VernacSyntacticDefinition",
            "0a46729b457f65d047a4d18874e9f0bdc9ff2458"
        ],
        [
            "Notation rmorphism f := (class_of f).",
            "VernacSyntacticDefinition",
            "fb5bd7523a27cac3aaaa77d35547b984669f8ef6"
        ],
        [
            "Coercion base : rmorphism >-> Additive.axiom.",
            "VernacCoercion",
            "20e3d4a6ee0dba88f2f1e4e9c57c4111120390c8"
        ],
        [
            "Coercion mixin : rmorphism >-> multiplicative.",
            "VernacCoercion",
            "28cd6cded317a47095d036ab199c67f85ecfb12f"
        ],
        [
            "Coercion apply : map >-> Funclass.",
            "VernacCoercion",
            "d1b4f6021d79ee27ab09a2bfa027ea0b0b7f7d54"
        ],
        [
            "Notation RMorphism fM := (Pack (Phant _) fM).",
            "VernacSyntacticDefinition",
            "0f58c7c8dfec7e29b577f151cc435fe24210f0ba"
        ],
        [
            "Notation AddRMorphism fM := (pack fM id).",
            "VernacSyntacticDefinition",
            "68bb3fca6af896623d2383e706b24fa82d4fb894"
        ],
        [
            "Notation \"{ 'rmorphism' fRS }\" := (map (Phant fRS)) (at level 0, format \"{ 'rmorphism' fRS }\") : ring_scope.",
            "VernacNotation",
            "46f765a74edc4adb33d1603671c4faa2a68371a8"
        ],
        [
            "Notation \"[ 'rmorphism' 'of' f 'as' g ]\" := (@clone _ _ _ f g _ _ idfun id) (at level 0, format \"[ 'rmorphism' 'of' f 'as' g ]\") : form_scope.",
            "VernacNotation",
            "bc1eced5141ef59ad3dd55b9e7d0b25b49d6b08f"
        ],
        [
            "Notation \"[ 'rmorphism' 'of' f ]\" := (@clone _ _ _ f f _ _ id id) (at level 0, format \"[ 'rmorphism' 'of' f ]\") : form_scope.",
            "VernacNotation",
            "53e8f33108d6423bd16578aec50384eb8be29389"
        ],
        [
            "Coercion additive : map >-> Additive.map.",
            "VernacCoercion",
            "b10d6a6e876e369f8ed5a0848bfa1ec1c6e353f6"
        ],
        [
            "Canonical additive.",
            "VernacCanonical",
            "2490534dc5a24033d0a5efd23fe4472eba31cd62"
        ],
        [
            "End Exports.",
            "VernacEndSegment",
            "71efedae7ccffd696e1ffe5d8ae6baa8a4484918"
        ],
        [
            "End RMorphism.",
            "VernacEndSegment",
            "0916c8f071391d273f6f3a92a5a3044c8e7a239f"
        ],
        [
            "Include RMorphism.Exports.",
            "VernacInclude",
            "70b6bdd4572b63dd37682fb0a89dd4613846c8e3"
        ],
        [
            "Section RmorphismTheory.",
            "VernacBeginSection",
            "48da0175b24fc23d612a08c75e7b52e4e10d2cae"
        ],
        [
            "Section Properties.",
            "VernacBeginSection",
            "7e2e8a2a6f5d6b0dc7ec0c9707dea0b804f3861f"
        ],
        [
            "Variables (R S : ringType) (k : unit) (f : {rmorphism R -> S}).",
            "VernacAssumption",
            "fa89d9c473077fd803c2e24acb7fc87df9e16dc0"
        ],
        [
            "Lemma rmorph0 : f 0 = 0.",
            "VernacStartTheoremProof",
            "c2a0ab5b0adbb1d2d54872c4bdd9a125df923b93"
        ],
        [
            "exact: raddf0.",
            "VernacExtend",
            "ce637ff86bafca5d8359473e8c02af644dcbdc43"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma rmorphN : {morph f : x / - x}.",
            "VernacStartTheoremProof",
            "9d1ab695826dcaf31596fbc170e670f0ed27004d"
        ],
        [
            "exact: raddfN.",
            "VernacExtend",
            "ce637ff86bafca5d8359473e8c02af644dcbdc43"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma rmorphD : {morph f : x y / x + y}.",
            "VernacStartTheoremProof",
            "155f56969e05e39856dc1b7e9d337d592e167efa"
        ],
        [
            "exact: raddfD.",
            "VernacExtend",
            "ce637ff86bafca5d8359473e8c02af644dcbdc43"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma rmorphB : {morph f: x y / x - y}.",
            "VernacStartTheoremProof",
            "0b307d7c4d9e5465c10fb9b5a8dda04d4f0fe7b8"
        ],
        [
            "exact: raddfB.",
            "VernacExtend",
            "ce637ff86bafca5d8359473e8c02af644dcbdc43"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma rmorphMn n : {morph f : x / x *+ n}.",
            "VernacStartTheoremProof",
            "5b00351c3b4b9ea2c223abf29fc080520d285661"
        ],
        [
            "exact: raddfMn.",
            "VernacExtend",
            "ce637ff86bafca5d8359473e8c02af644dcbdc43"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma rmorphMNn n : {morph f : x / x *- n}.",
            "VernacStartTheoremProof",
            "446f49883a6803883ef8898c400fe14b3350426c"
        ],
        [
            "exact: raddfMNn.",
            "VernacExtend",
            "ce637ff86bafca5d8359473e8c02af644dcbdc43"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma rmorph_sum I r (P : pred I) E : f (\\sum_(i <- r | P i) E i) = \\sum_(i <- r | P i) f (E i).",
            "VernacStartTheoremProof",
            "b6e3f5cdb9fc84c5204795db73c70a685918a472"
        ],
        [
            "exact: raddf_sum.",
            "VernacExtend",
            "ce637ff86bafca5d8359473e8c02af644dcbdc43"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma rmorphMsign n : {morph f : x / (- 1) ^+ n * x}.",
            "VernacStartTheoremProof",
            "363adb818ffed9edd4d32f06a2e99a6c42c2b4d0"
        ],
        [
            "exact: raddfMsign.",
            "VernacExtend",
            "ce637ff86bafca5d8359473e8c02af644dcbdc43"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma rmorphismP : rmorphism f.",
            "VernacStartTheoremProof",
            "b1fd9091c7692ffb715810c473e49bc5f4a60174"
        ],
        [
            "exact: RMorphism.class.",
            "VernacExtend",
            "ce637ff86bafca5d8359473e8c02af644dcbdc43"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma rmorphismMP : multiplicative f.",
            "VernacStartTheoremProof",
            "478a72e7484104d113ab6d9c39ebab0da42b82d3"
        ],
        [
            "exact: rmorphismP.",
            "VernacExtend",
            "ce637ff86bafca5d8359473e8c02af644dcbdc43"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma rmorph1 : f 1 = 1.",
            "VernacStartTheoremProof",
            "2f2b488658c020459434b7d1dd87fdb335849d8b"
        ],
        [
            "by case: rmorphismMP.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma rmorphM : {morph f: x y / x * y}.",
            "VernacStartTheoremProof",
            "7d8b20f42c4405f226d88f6cfd4c2363d37119a3"
        ],
        [
            "by case: rmorphismMP.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma rmorph_prod I r (P : pred I) E : f (\\prod_(i <- r | P i) E i) = \\prod_(i <- r | P i) f (E i).",
            "VernacStartTheoremProof",
            "01712c72c0f5283e02fdac69d42d84d66fbcf319"
        ],
        [
            "exact: (big_morph f rmorphM rmorph1).",
            "VernacExtend",
            "ce637ff86bafca5d8359473e8c02af644dcbdc43"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma rmorphX n : {morph f: x / x ^+ n}.",
            "VernacStartTheoremProof",
            "07224e92546ae72176c9612750ef950dd90c0b76"
        ],
        [
            "by elim: n => [|n IHn] x; rewrite ?rmorph1 // !exprS rmorphM IHn.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma rmorph_nat n : f n%:R = n%:R.",
            "VernacStartTheoremProof",
            "40516f0eccc1eaccc12c47679aa08d913d1ed46f"
        ],
        [
            "by rewrite rmorphMn rmorph1.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma rmorphN1 : f (- 1) = (- 1).",
            "VernacStartTheoremProof",
            "5da5d19c5fbe22f33e024face4899df87704a0dc"
        ],
        [
            "by rewrite rmorphN rmorph1.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma rmorph_sign n : f ((- 1) ^+ n) = (- 1) ^+ n.",
            "VernacStartTheoremProof",
            "8b4a2d4bafb23fa7b5ac0f162608b18f12ab3635"
        ],
        [
            "by rewrite rmorphX rmorphN1.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma rmorph_char p : p \\in [char R] -> p \\in [char S].",
            "VernacStartTheoremProof",
            "d52fe5697a35227227e026a491d7f9a31fc002d9"
        ],
        [
            "by rewrite !inE -rmorph_nat => /andP[-> /= /eqP->]; rewrite rmorph0.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma rmorph_eq_nat x n : injective f -> (f x == n%:R) = (x == n%:R).",
            "VernacStartTheoremProof",
            "db6fcc0f261d538330c13eb1b12ae8060c98d600"
        ],
        [
            "by move/inj_eq <-; rewrite rmorph_nat.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma rmorph_eq1 x : injective f -> (f x == 1) = (x == 1).",
            "VernacStartTheoremProof",
            "f81e4daf82804cece404a7946a2dee37a913c638"
        ],
        [
            "exact: rmorph_eq_nat 1%N.",
            "VernacExtend",
            "ce637ff86bafca5d8359473e8c02af644dcbdc43"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma can2_rmorphism f' : cancel f f' -> cancel f' f -> rmorphism f'.",
            "VernacStartTheoremProof",
            "8f737c3e851cd60e25acaf1134fd2d066a20b97c"
        ],
        [
            "move=> fK f'K; split; first exact: can2_additive fK f'K.",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "by split=> [x y|]; apply: (canLR fK); rewrite /= (rmorphM, rmorph1) ?f'K.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma bij_rmorphism : bijective f -> exists2 f' : {rmorphism S -> R}, cancel f f' & cancel f' f.",
            "VernacStartTheoremProof",
            "2877d2fcd8cbc0cc3ff4dfa23c605588b5d35678"
        ],
        [
            "by case=> f' fK f'K; exists (RMorphism (can2_rmorphism fK f'K)).",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Fact locked_is_multiplicative : multiplicative (locked_with k (f : R -> S)).",
            "VernacStartTheoremProof",
            "aedce4ae495a1ed7cbea2a31ec9da93a99f192c1"
        ],
        [
            "by case: k f => [] [? []].",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Canonical locked_rmorphism := AddRMorphism locked_is_multiplicative.",
            "VernacDefinition",
            "af494b3845edc9eb2a5d1a8f52157f11b4ef2874"
        ],
        [
            "End Properties.",
            "VernacEndSegment",
            "aa92f2fb951d93f9345c3b97356b8e42ae399029"
        ],
        [
            "Section Projections.",
            "VernacBeginSection",
            "9b1091b3fb773ae6165b13e1d25bafc4c3e2e8a0"
        ],
        [
            "Variables (R S T : ringType) (f : {rmorphism S -> T}) (g : {rmorphism R -> S}).",
            "VernacAssumption",
            "c3d7b6624ba9a9a528eba1797297a1727cbf0ceb"
        ],
        [
            "Fact idfun_is_multiplicative : multiplicative (@idfun R).",
            "VernacStartTheoremProof",
            "3d9013e9fb1e6a5b3836f39746c3f110ce9b1dc1"
        ],
        [
            "by [].",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Canonical idfun_rmorphism := AddRMorphism idfun_is_multiplicative.",
            "VernacDefinition",
            "67b7723306c69c9d6b8e8eec3d572e6742d0473b"
        ],
        [
            "Fact comp_is_multiplicative : multiplicative (f \\o g).",
            "VernacStartTheoremProof",
            "8e3e5e59b76513a1ef7a5b71a1e1f6d0c9e079d3"
        ],
        [
            "by split=> [x y|] /=; rewrite ?rmorph1 ?rmorphM.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Canonical comp_rmorphism := AddRMorphism comp_is_multiplicative.",
            "VernacDefinition",
            "2aedffd5ee8f667b647ca30aa3443b49d9cbfb95"
        ],
        [
            "End Projections.",
            "VernacEndSegment",
            "3e3f9f60f4d12c977b1bb631a375005ad9edc440"
        ],
        [
            "Section InAlgebra.",
            "VernacBeginSection",
            "c77e023506636fdeec09c5b22951e82410c7d34e"
        ],
        [
            "Variables (R : ringType) (A : lalgType R).",
            "VernacAssumption",
            "a067d910aa6c8abe89b1128e2da3c078183e6834"
        ],
        [
            "Fact in_alg_is_rmorphism : rmorphism (in_alg_loc A).",
            "VernacStartTheoremProof",
            "583dabd9b240b3557fe2a4499d9990d17abe03c7"
        ],
        [
            "split=> [x y|]; first exact: scalerBl.",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "by split=> [x y|] /=; rewrite ?scale1r // -scalerAl mul1r scalerA.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Canonical in_alg_additive := Additive in_alg_is_rmorphism.",
            "VernacDefinition",
            "79efa461955f213b49b18f9e461747427ea5b76c"
        ],
        [
            "Canonical in_alg_rmorphism := RMorphism in_alg_is_rmorphism.",
            "VernacDefinition",
            "def25d9e40901e1ad466969c80e4d31e1cf9f521"
        ],
        [
            "Lemma in_algE a : in_alg_loc A a = a%:A.",
            "VernacStartTheoremProof",
            "8bbb9642812e67f471c9099fd9729aefebb28114"
        ],
        [
            "by [].",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "End InAlgebra.",
            "VernacEndSegment",
            "44985630cd1c4fb6e24f05f1988f6257a5d14419"
        ],
        [
            "End RmorphismTheory.",
            "VernacEndSegment",
            "9e0bfc4be9609cc4091479cf50eba89d807a6caf"
        ],
        [
            "Module Scale.",
            "VernacDefineModule",
            "804c2d5b43fb1bfe8121a5e26f92f42757c3def7"
        ],
        [
            "Section ScaleLaw.",
            "VernacBeginSection",
            "8ad7b6a0718d8ca4d73e98e84d67b61c2e01751f"
        ],
        [
            "Structure law (R : ringType) (V : zmodType) (s : R -> V -> V) := Law { op : R -> V -> V; _ : op = s; _ : op (-1) =1 -%R; _ : forall a, additive (op a) }.",
            "VernacInductive",
            "a1a536ec064d8f5587a2ff0e06f5d765cc3cdf29"
        ],
        [
            "Definition mul_law R := Law (erefl *%R) (@mulN1r R) (@mulrBr R).",
            "VernacDefinition",
            "0c7c2447548fd07aa324c93e7df63a93c937fcb9"
        ],
        [
            "Definition scale_law R U := Law (erefl *:%R) (@scaleN1r R U) (@scalerBr R U).",
            "VernacDefinition",
            "4d545051d71e755f95e3e9200ca9c6c4637d97de"
        ],
        [
            "Variables (R : ringType) (V : zmodType) (s : R -> V -> V) (s_law : law s).",
            "VernacAssumption",
            "99d4911f8843ef1a72487b44f0f407b1e96c8812"
        ],
        [
            "Local Notation s_op := (op s_law).",
            "VernacSyntacticDefinition",
            "1bfb25a2192803ed7d89d2271544bb664f7884ef"
        ],
        [
            "Lemma opE : s_op = s.",
            "VernacStartTheoremProof",
            "c21a0d2f994f23bf7fbd91e225192bbe8c029d61"
        ],
        [
            "by case: s_law.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma N1op : s_op (-1) =1 -%R.",
            "VernacStartTheoremProof",
            "53418e0c571a0799652f0e30b4eb1812573c9e63"
        ],
        [
            "by case: s_law.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Fact opB a : additive (s_op a).",
            "VernacStartTheoremProof",
            "4c2a26c6154a615abee4f3352777899977b04eba"
        ],
        [
            "by case: s_law.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Definition op_additive a := Additive (opB a).",
            "VernacDefinition",
            "c3d9c4122bd2f028a9a688b541b3dd108f583d90"
        ],
        [
            "Variables (aR : ringType) (nu : {rmorphism aR -> R}).",
            "VernacAssumption",
            "c3411e7c6a566b8ac90e8da1cceef5476ae2a7c2"
        ],
        [
            "Fact comp_opE : nu \\; s_op = nu \\; s.",
            "VernacStartTheoremProof",
            "5b27c72bb31397ca0692a9d544b7ebbea95eab0a"
        ],
        [
            "exact: congr1 opE.",
            "VernacExtend",
            "ce637ff86bafca5d8359473e8c02af644dcbdc43"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Fact compN1op : (nu \\; s_op) (-1) =1 -%R.",
            "VernacStartTheoremProof",
            "a94bb5ec4d32d15a7e22844a4d4fdb078c4226fc"
        ],
        [
            "by move=> v; rewrite /= rmorphN1 N1op.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Definition comp_law : law (nu \\; s) := Law comp_opE compN1op (fun a => opB _).",
            "VernacDefinition",
            "fda741ab7f9d6fb311e76dad07be3449d58a0789"
        ],
        [
            "End ScaleLaw.",
            "VernacEndSegment",
            "c1d828a9fcbdf28751d761ed1d5585b1be66f3ad"
        ],
        [
            "End Scale.",
            "VernacEndSegment",
            "8dc824bcd477b96336dc31fa428297b5bbaf965d"
        ],
        [
            "Module Linear.",
            "VernacDefineModule",
            "26776ead8d894c80f747153fa201ff41375400a3"
        ],
        [
            "Section ClassDef.",
            "VernacBeginSection",
            "a5b792261e6c496f5a1a8d0f7da8c96156ca2fed"
        ],
        [
            "Variables (R : ringType) (U : lmodType R) (V : zmodType) (s : R -> V -> V).",
            "VernacAssumption",
            "bc3812b46b440fc07370922b98af91a8f5e04ca8"
        ],
        [
            "Implicit Type phUV : phant (U -> V).",
            "VernacReserve",
            "36c3846ee7bebef68adf42ec89c9543c6ca9cbb7"
        ],
        [
            "Local Coercion Scale.op : Scale.law >-> Funclass.",
            "VernacCoercion",
            "82881b3390f65bc3ebbdda8edf670ff9f46a618e"
        ],
        [
            "Definition axiom (f : U -> V) (s_law : Scale.law s) of s = s_law := forall a, {morph f : u v / a *: u + v >-> s a u + v}.",
            "VernacDefinition",
            "5877fe50fdb1ebc948dbe7eb463a9a3b8b60d488"
        ],
        [
            "Definition mixin_of (f : U -> V) := forall a, {morph f : v / a *: v >-> s a v}.",
            "VernacDefinition",
            "3dfd755ccb5eb1b092ca39466c30461668201cd5"
        ],
        [
            "Record class_of f : Prop := Class {base : additive f; mixin : mixin_of f}.",
            "VernacInductive",
            "16e0a4e39a7efd23f2ad966e2491d057a197378a"
        ],
        [
            "Local Coercion base : class_of >-> additive.",
            "VernacCoercion",
            "fb6e5d458fc7529d00039290e950b61eda84a212"
        ],
        [
            "Lemma class_of_axiom f s_law Ds : @axiom f s_law Ds -> class_of f.",
            "VernacStartTheoremProof",
            "58432a970f01129fb4a7340ea3e3e7e0ae0e2d0d"
        ],
        [
            "move=> fL; have fB: additive f.",
            "VernacExtend",
            "ccd83c252dcbae3d56f3d057fcb8217878b51901"
        ],
        [
            "by move=> x y /=; rewrite -scaleN1r addrC fL Ds Scale.N1op addrC.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "by split=> // a v /=; rewrite -[a *: v](addrK v) fB fL addrK Ds.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Structure map (phUV : phant (U -> V)) := Pack {apply; _ : class_of apply}.",
            "VernacInductive",
            "bfd3b4ebd0a73943aa6b5be6160d1edab38c04e6"
        ],
        [
            "Local Coercion apply : map >-> Funclass.",
            "VernacCoercion",
            "6b1698c04735c8b1016fdce698430a6a0807a839"
        ],
        [
            "Variables (phUV : phant (U -> V)) (f g : U -> V) (cF : map phUV).",
            "VernacAssumption",
            "809864a368d3caa33981e9c375f59d408b334468"
        ],
        [
            "Definition class := let: Pack _ c as cF' := cF return class_of cF' in c.",
            "VernacDefinition",
            "4bd0d25e46e4db34ffa04206bd9978757463d540"
        ],
        [
            "Definition clone fL of phant_id g (apply cF) & phant_id fL class := @Pack phUV f fL.",
            "VernacDefinition",
            "3a750c8e5be8ef29d162600b8bc16cae547d06fb"
        ],
        [
            "Definition pack (fZ : mixin_of f) := fun (bF : Additive.map phUV) fA & phant_id (Additive.class bF) fA => Pack phUV (Class fA fZ).",
            "VernacDefinition",
            "5baa8ac912eea5679594a0b282422fa9c0e64de3"
        ],
        [
            "Canonical additive := Additive.Pack phUV class.",
            "VernacDefinition",
            "3abe272772f79d45ee99d741fc41f695b2df224a"
        ],
        [
            "Notation mapUV := (map (Phant (U -> V))).",
            "VernacSyntacticDefinition",
            "3aa0b4b1373671614ac7cb39673bb9fde10a5dad"
        ],
        [
            "Definition map_class := mapUV.",
            "VernacDefinition",
            "2179a033de67f3fa78b83fc333ca634803012682"
        ],
        [
            "Definition map_at (a : R) := mapUV.",
            "VernacDefinition",
            "bf4d6d8820a4fa46b7aaa429203bda80b9d49b97"
        ],
        [
            "Structure map_for a s_a := MapFor {map_for_map : mapUV; _ : s a = s_a}.",
            "VernacInductive",
            "6d32e7d22bd0ca16e90a1f854547793c041ee6d6"
        ],
        [
            "Definition unify_map_at a (f : map_at a) := MapFor f (erefl (s a)).",
            "VernacDefinition",
            "a127cd68039d206bf047e83f44c723e2eb24f312"
        ],
        [
            "Structure wrapped := Wrap {unwrap : mapUV}.",
            "VernacInductive",
            "94d79f8e10e91319cbfc74016b98cc7ac7811b07"
        ],
        [
            "Definition wrap (f : map_class) := Wrap f.",
            "VernacDefinition",
            "73aed251c55b5ab8cd74a2c8eab12abe09d40d61"
        ],
        [
            "End ClassDef.",
            "VernacEndSegment",
            "bce1c8832045d8291c44a3fb67e9767782d2745b"
        ],
        [
            "Module Exports.",
            "VernacDefineModule",
            "d4a1114ec53f746523a7dec57823f7f03e51fa24"
        ],
        [
            "Canonical Scale.mul_law.",
            "VernacCanonical",
            "cbb060b2a905b1b255ddb9d96cd4aef4a1ad11cc"
        ],
        [
            "Canonical Scale.scale_law.",
            "VernacCanonical",
            "8ddd384775dec4b9bab12d61dfc905ba2876cf06"
        ],
        [
            "Canonical Scale.comp_law.",
            "VernacCanonical",
            "4e25347235a8d1463d2896ecba8e0f4acf201153"
        ],
        [
            "Canonical Scale.op_additive.",
            "VernacCanonical",
            "2f9934f7e1629711c8acaaec2d91bc52669c1c5d"
        ],
        [
            "Delimit Scope linear_ring_scope with linR.",
            "VernacDelimiters",
            "8173940679b2ca1e1eaa27d43664fc59438bfddc"
        ],
        [
            "Notation \"a *: u\" := (@Scale.op _ _ *:%R _ a u) : linear_ring_scope.",
            "VernacNotation",
            "c472f874184e3f76142ec86483ed1b03514afa60"
        ],
        [
            "Notation \"a * u\" := (@Scale.op _ _ *%R _ a u) : linear_ring_scope.",
            "VernacNotation",
            "09942dd0dd6aa4f3f9d1ccb77614ba84a6e75834"
        ],
        [
            "Notation \"a *:^ nu u\" := (@Scale.op _ _ (nu \\; *:%R) _ a u) (at level 40, nu at level 1, format \"a *:^ nu u\") : linear_ring_scope.",
            "VernacNotation",
            "7e1b96fa7cf22705d65aa4da6a70ba64ddbee0ce"
        ],
        [
            "Notation \"a *^ nu u\" := (@Scale.op _ _ (nu \\; *%R) _ a u) (at level 40, nu at level 1, format \"a *^ nu u\") : linear_ring_scope.",
            "VernacNotation",
            "d40de24ffe7f0f7eb0138d2aabbfd8e8323d9ae8"
        ],
        [
            "Notation scalable_for s f := (mixin_of s f).",
            "VernacSyntacticDefinition",
            "9a328ee6d8490f775f1bf30c4c46723f84cfa3f5"
        ],
        [
            "Notation scalable f := (scalable_for *:%R f).",
            "VernacSyntacticDefinition",
            "04d62a37868bd4ce89e26e044ec160d44f7a5aad"
        ],
        [
            "Notation linear_for s f := (axiom f (erefl s)).",
            "VernacSyntacticDefinition",
            "5da55fec32df13d4e72def69c854cecf9f32016a"
        ],
        [
            "Notation linear f := (linear_for *:%R f).",
            "VernacSyntacticDefinition",
            "107a4bb2cb9b621e03c38c035fa0754398e972f7"
        ],
        [
            "Notation scalar f := (linear_for *%R f).",
            "VernacSyntacticDefinition",
            "ec13a66c1439d0f87612927f3fb55c169d08969f"
        ],
        [
            "Notation lmorphism_for s f := (class_of s f).",
            "VernacSyntacticDefinition",
            "81fe901d9a2ee5f1efb70468b09a53c58601fdf9"
        ],
        [
            "Notation lmorphism f := (lmorphism_for *:%R f).",
            "VernacSyntacticDefinition",
            "31bb68ae827e8f9682596b6f827fa0f6c50c2431"
        ],
        [
            "Coercion class_of_axiom : axiom >-> lmorphism_for.",
            "VernacCoercion",
            "29b919d642fdc60fc7632a2fc9faf93cd2760cd4"
        ],
        [
            "Coercion base : lmorphism_for >-> Additive.axiom.",
            "VernacCoercion",
            "dd33f957b6a2c3a3796489dacd6bfb0d78dccb19"
        ],
        [
            "Coercion mixin : lmorphism_for >-> scalable.",
            "VernacCoercion",
            "389305d35590562ac88b7511ea1d8e24dd3fb976"
        ],
        [
            "Coercion apply : map >-> Funclass.",
            "VernacCoercion",
            "d1b4f6021d79ee27ab09a2bfa027ea0b0b7f7d54"
        ],
        [
            "Notation Linear fL := (Pack (Phant _) fL).",
            "VernacSyntacticDefinition",
            "cb6b4c2513c87fd0775a403037a568e50c83b9cf"
        ],
        [
            "Notation AddLinear fZ := (pack fZ id).",
            "VernacSyntacticDefinition",
            "607c071c1601d938e873933cd9bc557fb62283e2"
        ],
        [
            "Notation \"{ 'linear' fUV | s }\" := (map s (Phant fUV)) (at level 0, format \"{ 'linear' fUV | s }\") : ring_scope.",
            "VernacNotation",
            "72028a827729ca3d1cc981ae770086856a11b73c"
        ],
        [
            "Notation \"{ 'linear' fUV }\" := {linear fUV | *:%R} (at level 0, format \"{ 'linear' fUV }\") : ring_scope.",
            "VernacNotation",
            "0d5e7af309d05e2949d8b2450fbb99b187ac8e0c"
        ],
        [
            "Notation \"{ 'scalar' U }\" := {linear U -> _ | *%R} (at level 0, format \"{ 'scalar' U }\") : ring_scope.",
            "VernacNotation",
            "de349fad1b5b9ec4f71404589b6e48dfdbbc14c1"
        ],
        [
            "Notation \"[ 'linear' 'of' f 'as' g ]\" := (@clone _ _ _ _ _ f g _ _ idfun id) (at level 0, format \"[ 'linear' 'of' f 'as' g ]\") : form_scope.",
            "VernacNotation",
            "fdb8f10cb28dd5e8a299fb92644751633cd899c8"
        ],
        [
            "Notation \"[ 'linear' 'of' f ]\" := (@clone _ _ _ _ _ f f _ _ id id) (at level 0, format \"[ 'linear' 'of' f ]\") : form_scope.",
            "VernacNotation",
            "42c76243dabfa31bf37c059197ab8e3020f9fb36"
        ],
        [
            "Coercion additive : map >-> Additive.map.",
            "VernacCoercion",
            "b10d6a6e876e369f8ed5a0848bfa1ec1c6e353f6"
        ],
        [
            "Canonical additive.",
            "VernacCanonical",
            "2490534dc5a24033d0a5efd23fe4472eba31cd62"
        ],
        [
            "Coercion map_for_map : map_for >-> map.",
            "VernacCoercion",
            "1c206eb7150de2740728da68d125ded71a242cc1"
        ],
        [
            "Coercion unify_map_at : map_at >-> map_for.",
            "VernacCoercion",
            "2ade3ff86cb386e59ecad2c95e1be6bce32e8b5b"
        ],
        [
            "Canonical unify_map_at.",
            "VernacCanonical",
            "6fb89bacae47b6ec58ded8f3d549a7dbecca8dce"
        ],
        [
            "Coercion unwrap : wrapped >-> map.",
            "VernacCoercion",
            "653328e9ba72a648eb51d6160109b0e302dad939"
        ],
        [
            "Coercion wrap : map_class >-> wrapped.",
            "VernacCoercion",
            "b764b1531c00b9bbaa36244c1ae71e6072eb6217"
        ],
        [
            "Canonical wrap.",
            "VernacCanonical",
            "c60fd2fb107f150983e058ae17f1256aca555bad"
        ],
        [
            "End Exports.",
            "VernacEndSegment",
            "71efedae7ccffd696e1ffe5d8ae6baa8a4484918"
        ],
        [
            "End Linear.",
            "VernacEndSegment",
            "650f655f21276c75f543f8ea3c6de3cbb24f6f06"
        ],
        [
            "Include Linear.Exports.",
            "VernacInclude",
            "37af05be8928d7efcff6f6b41c2e531f48cf849f"
        ],
        [
            "Section LinearTheory.",
            "VernacBeginSection",
            "721c453db0c762d9b0548597c14b749a983d084d"
        ],
        [
            "Variable R : ringType.",
            "VernacAssumption",
            "103955c3e16ede32f173514da95e3006926aeccd"
        ],
        [
            "Section GenericProperties.",
            "VernacBeginSection",
            "729c2484b15ff4e5ee9fbbb4779cffe3a08b297a"
        ],
        [
            "Variables (U : lmodType R) (V : zmodType) (s : R -> V -> V) (k : unit).",
            "VernacAssumption",
            "f75316d07d60c3f6d086eb3b5656c63bf80255bd"
        ],
        [
            "Variable f : {linear U -> V | s}.",
            "VernacAssumption",
            "70121bcbc9f1e129a69814eb2cad7d35a92bf4e7"
        ],
        [
            "Lemma linear0 : f 0 = 0.",
            "VernacStartTheoremProof",
            "b7c748df2b2dd6090212797adfec1dacdd411e86"
        ],
        [
            "exact: raddf0.",
            "VernacExtend",
            "ce637ff86bafca5d8359473e8c02af644dcbdc43"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma linearN : {morph f : x / - x}.",
            "VernacStartTheoremProof",
            "755c9c4f2a09bae74ffe64054855242991f212f0"
        ],
        [
            "exact: raddfN.",
            "VernacExtend",
            "ce637ff86bafca5d8359473e8c02af644dcbdc43"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma linearD : {morph f : x y / x + y}.",
            "VernacStartTheoremProof",
            "476514c74ccab1ee95a1ac18db8caa35622ab9b2"
        ],
        [
            "exact: raddfD.",
            "VernacExtend",
            "ce637ff86bafca5d8359473e8c02af644dcbdc43"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma linearB : {morph f : x y / x - y}.",
            "VernacStartTheoremProof",
            "b09afab9838eeac78f6804f45ed18500d200acc0"
        ],
        [
            "exact: raddfB.",
            "VernacExtend",
            "ce637ff86bafca5d8359473e8c02af644dcbdc43"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma linearMn n : {morph f : x / x *+ n}.",
            "VernacStartTheoremProof",
            "62dd6617b5492c9c51e7a8ece3bd9c50a3fff3e6"
        ],
        [
            "exact: raddfMn.",
            "VernacExtend",
            "ce637ff86bafca5d8359473e8c02af644dcbdc43"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma linearMNn n : {morph f : x / x *- n}.",
            "VernacStartTheoremProof",
            "6e4640a64dff7e53e376c54607682d4eecb57ea3"
        ],
        [
            "exact: raddfMNn.",
            "VernacExtend",
            "ce637ff86bafca5d8359473e8c02af644dcbdc43"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma linear_sum I r (P : pred I) E : f (\\sum_(i <- r | P i) E i) = \\sum_(i <- r | P i) f (E i).",
            "VernacStartTheoremProof",
            "2110d9d80487ce77b9da8a31c212abf66e6bbac5"
        ],
        [
            "exact: raddf_sum.",
            "VernacExtend",
            "ce637ff86bafca5d8359473e8c02af644dcbdc43"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma linearZ_LR : scalable_for s f.",
            "VernacStartTheoremProof",
            "927772a34b45b5647279bf2c57f3c0d3a7c6e439"
        ],
        [
            "by case: f => ? [].",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma linearP a : {morph f : u v / a *: u + v >-> s a u + v}.",
            "VernacStartTheoremProof",
            "1c9fac5ddb038baed9b1518155ce8325e7a7b5a9"
        ],
        [
            "by move=> u v /=; rewrite linearD linearZ_LR.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Fact locked_is_scalable : scalable_for s (locked_with k (f : U -> V)).",
            "VernacStartTheoremProof",
            "cfbcaabc75b1d8f04709217b0b5d4156f7b2de15"
        ],
        [
            "by case: k f => [] [? []].",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Canonical locked_linear := AddLinear locked_is_scalable.",
            "VernacDefinition",
            "9d183ecb4fa894a2359c7fc8d5e06fbdd5b1bc82"
        ],
        [
            "End GenericProperties.",
            "VernacEndSegment",
            "6867749457ac8db072a3298c39b4d14383026d1c"
        ],
        [
            "Section BidirectionalLinearZ.",
            "VernacBeginSection",
            "978835ecc6db807075c2503329805d630ef7d611"
        ],
        [
            "Variables (U : lmodType R) (V : zmodType) (s : R -> V -> V).",
            "VernacAssumption",
            "b38b4a0e8be6c57a2a561c3a0d3ea9bc6ab0ec57"
        ],
        [
            "Variables (S : ringType) (h : S -> V -> V) (h_law : Scale.law h).",
            "VernacAssumption",
            "f6759935a0662b42a83a0f86ff52d21eae372e76"
        ],
        [
            "Lemma linearZ c a (h_c := Scale.op h_law c) (f : Linear.map_for U s a h_c) u : f (a *: u) = h_c (Linear.wrap f u).",
            "VernacStartTheoremProof",
            "6d32aad443b4bbe38b8cfdb4e49b11595022647c"
        ],
        [
            "by rewrite linearZ_LR; case: f => f /= ->.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "End BidirectionalLinearZ.",
            "VernacEndSegment",
            "c40a7178e533f3cfe3aa1e51de65434d2db6a66e"
        ],
        [
            "Section LmodProperties.",
            "VernacBeginSection",
            "0d2d519c1a0a1decc7a2f9c67838392fa4306aee"
        ],
        [
            "Variables (U V : lmodType R) (f : {linear U -> V}).",
            "VernacAssumption",
            "9bf756d8b308225c5d696595a61b53b2fa96350e"
        ],
        [
            "Lemma linearZZ : scalable f.",
            "VernacStartTheoremProof",
            "2c9a3a500f0f44f6493755dee5553345f2cf99ce"
        ],
        [
            "exact: linearZ_LR.",
            "VernacExtend",
            "ce637ff86bafca5d8359473e8c02af644dcbdc43"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma linearPZ : linear f.",
            "VernacStartTheoremProof",
            "2c0738cba1290cf6e2093dd188e6ad1ba8b38c25"
        ],
        [
            "exact: linearP.",
            "VernacExtend",
            "ce637ff86bafca5d8359473e8c02af644dcbdc43"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma can2_linear f' : cancel f f' -> cancel f' f -> linear f'.",
            "VernacStartTheoremProof",
            "645778bc093d9a3ee3321660737bf631f7a2da41"
        ],
        [
            "by move=> fK f'K a x y /=; apply: (canLR fK); rewrite linearP !f'K.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma bij_linear : bijective f -> exists2 f' : {linear V -> U}, cancel f f' & cancel f' f.",
            "VernacStartTheoremProof",
            "8daa2b05eb1d006d9dd8418dd69d6b24aef2541f"
        ],
        [
            "by case=> f' fK f'K; exists (Linear (can2_linear fK f'K)).",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "End LmodProperties.",
            "VernacEndSegment",
            "5d7053724cade39c30341315ce9bc7bc3efbf25d"
        ],
        [
            "Section ScalarProperties.",
            "VernacBeginSection",
            "2e811a836b7c5f48c0024cc307ed7b954d3eb60c"
        ],
        [
            "Variable (U : lmodType R) (f : {scalar U}).",
            "VernacAssumption",
            "250271962ce578092b8b18eb23d47a26a758941d"
        ],
        [
            "Lemma scalarZ : scalable_for *%R f.",
            "VernacStartTheoremProof",
            "041b2409a63390e7ef42484a6d82a9343a032efa"
        ],
        [
            "exact: linearZ_LR.",
            "VernacExtend",
            "ce637ff86bafca5d8359473e8c02af644dcbdc43"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma scalarP : scalar f.",
            "VernacStartTheoremProof",
            "4b2bada1a06e81c92a453bba7da039a1ea181cde"
        ],
        [
            "exact: linearP.",
            "VernacExtend",
            "ce637ff86bafca5d8359473e8c02af644dcbdc43"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "End ScalarProperties.",
            "VernacEndSegment",
            "36b12a835246f7e910fbb2e4653829b64f452d3c"
        ],
        [
            "Section LinearLmod.",
            "VernacBeginSection",
            "a7c3a167ddedcac38e8bbebf5e45f510fae95861"
        ],
        [
            "Variables (W U : lmodType R) (V : zmodType) (s : R -> V -> V).",
            "VernacAssumption",
            "b4f362f68ae5091418f933337a62e2cd3cd013c0"
        ],
        [
            "Variables (f : {linear U -> V | s}) (h : {linear W -> U}).",
            "VernacAssumption",
            "b5a777ad3f7e08e931c6abcd43a40bd70c59dbb7"
        ],
        [
            "Lemma idfun_is_scalable : scalable (@idfun U).",
            "VernacStartTheoremProof",
            "e9b520a00f61e057899ef24a069beb290c04a67d"
        ],
        [
            "by [].",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Canonical idfun_linear := AddLinear idfun_is_scalable.",
            "VernacDefinition",
            "27af92e7c2b5b2882ef5307d9313ca81f3f0cf7d"
        ],
        [
            "Lemma opp_is_scalable : scalable (-%R : U -> U).",
            "VernacStartTheoremProof",
            "56749e6d84eb090e680b84c2d7ef8bda6b59e2fb"
        ],
        [
            "by move=> a v /=; rewrite scalerN.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Canonical opp_linear := AddLinear opp_is_scalable.",
            "VernacDefinition",
            "3283d669eb2f7e84ecd312d37a431bc6b472ba7b"
        ],
        [
            "Lemma comp_is_scalable : scalable_for s (f \\o h).",
            "VernacStartTheoremProof",
            "39bff89db304a083325ce92ab9d0ecf9fd8af48f"
        ],
        [
            "by move=> a v /=; rewrite !linearZ_LR.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Canonical comp_linear := AddLinear comp_is_scalable.",
            "VernacDefinition",
            "6e9272a5f545d84c6a0cf9cd28ecc5c53445ae0c"
        ],
        [
            "Variables (s_law : Scale.law s) (g : {linear U -> V | Scale.op s_law}).",
            "VernacAssumption",
            "938220bc1426f2213da99e5287d73e155d779045"
        ],
        [
            "Let Ds : s =1 Scale.op s_law.",
            "VernacDefinition",
            "0f5359d02708a3692eac7b04cecd76fe6bdca9f6"
        ],
        [
            "by rewrite Scale.opE.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma null_fun_is_scalable : scalable_for (Scale.op s_law) (\\0 : U -> V).",
            "VernacStartTheoremProof",
            "bccf9702ae8ecb77c29265d9c1dc71e46eb38c76"
        ],
        [
            "by move=> a v /=; rewrite raddf0.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Canonical null_fun_linear := AddLinear null_fun_is_scalable.",
            "VernacDefinition",
            "2691ce251aed78f86ab86cae41b275478cddb5f6"
        ],
        [
            "Lemma add_fun_is_scalable : scalable_for s (f \\+ g).",
            "VernacStartTheoremProof",
            "0bea39cc75c3671c2491adbec853cd948ba19995"
        ],
        [
            "by move=> a u; rewrite /= !linearZ_LR !Ds raddfD.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Canonical add_fun_linear := AddLinear add_fun_is_scalable.",
            "VernacDefinition",
            "4571f6b2fcae6f40fb03c6e5ef9be4c20fa29de5"
        ],
        [
            "Lemma sub_fun_is_scalable : scalable_for s (f \\- g).",
            "VernacStartTheoremProof",
            "ddc2798ade7a710f038f59521abda58b2b1230c4"
        ],
        [
            "by move=> a u; rewrite /= !linearZ_LR !Ds raddfB.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Canonical sub_fun_linear := AddLinear sub_fun_is_scalable.",
            "VernacDefinition",
            "c625e52a5694956d4bb38f87bfff5e936cee7593"
        ],
        [
            "End LinearLmod.",
            "VernacEndSegment",
            "e576f70c7d8013423ad348e93db6fa23433088d5"
        ],
        [
            "Section LinearLalg.",
            "VernacBeginSection",
            "b9e5bb0aaef0e310e973d9e99268db1e83d314f7"
        ],
        [
            "Variables (A : lalgType R) (U : lmodType R).",
            "VernacAssumption",
            "c8c5374b74ba6565fe36bfb235046af9e589fa5b"
        ],
        [
            "Variables (a : A) (f : {linear U -> A}).",
            "VernacAssumption",
            "0ef8734c3616499549335991e800c714addbfaf8"
        ],
        [
            "Fact mulr_fun_is_scalable : scalable (a \\o* f).",
            "VernacStartTheoremProof",
            "b4d567534877a39b47ee68691d80bd2d71786c9a"
        ],
        [
            "by move=> k x /=; rewrite linearZ scalerAl.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Canonical mulr_fun_linear := AddLinear mulr_fun_is_scalable.",
            "VernacDefinition",
            "6ac6f07c7ef67a2a845c8815bd95b8c2a4fd54d8"
        ],
        [
            "End LinearLalg.",
            "VernacEndSegment",
            "6435471a23baa49f000e42897079a0c018697729"
        ],
        [
            "End LinearTheory.",
            "VernacEndSegment",
            "c3761b26d291ea5de8b009f01024ec0d6319b041"
        ],
        [
            "Module LRMorphism.",
            "VernacDefineModule",
            "84515e993397ec571bf1aa85ef1bfffa9fb87808"
        ],
        [
            "Section ClassDef.",
            "VernacBeginSection",
            "a5b792261e6c496f5a1a8d0f7da8c96156ca2fed"
        ],
        [
            "Variables (R : ringType) (A : lalgType R) (B : ringType) (s : R -> B -> B).",
            "VernacAssumption",
            "c8ba35383df9c0d4d368be2b002742601f516797"
        ],
        [
            "Record class_of (f : A -> B) : Prop := Class {base : rmorphism f; mixin : scalable_for s f}.",
            "VernacInductive",
            "1230ddf19406153bd525ffaab5184622f54a5537"
        ],
        [
            "Local Coercion base : class_of >-> rmorphism.",
            "VernacCoercion",
            "101916ca63ad5cf27501e7b4200275307282107e"
        ],
        [
            "Definition base2 f (fLM : class_of f) := Linear.Class fLM (mixin fLM).",
            "VernacDefinition",
            "641bb2752652d9fcde7ad8169d9577508a8256bc"
        ],
        [
            "Local Coercion base2 : class_of >-> lmorphism.",
            "VernacCoercion",
            "81983bd044782323351b48cb8bba128b79a19642"
        ],
        [
            "Structure map (phAB : phant (A -> B)) := Pack {apply; _ : class_of apply}.",
            "VernacInductive",
            "c9727dff020a2cc04bae585b6f70cf52a5b928ff"
        ],
        [
            "Local Coercion apply : map >-> Funclass.",
            "VernacCoercion",
            "6b1698c04735c8b1016fdce698430a6a0807a839"
        ],
        [
            "Variables (phAB : phant (A -> B)) (f : A -> B) (cF : map phAB).",
            "VernacAssumption",
            "03c66b09348acc741c898574ace32864d34b8167"
        ],
        [
            "Definition class := let: Pack _ c as cF' := cF return class_of cF' in c.",
            "VernacDefinition",
            "4bd0d25e46e4db34ffa04206bd9978757463d540"
        ],
        [
            "Definition clone := fun (g : RMorphism.map phAB) fM & phant_id (RMorphism.class g) fM => fun (h : Linear.map s phAB) fZ & phant_id (Linear.mixin (Linear.class h)) fZ => Pack phAB (@Class f fM fZ).",
            "VernacDefinition",
            "953f8b6f0b01138c632602769953a4d65b284437"
        ],
        [
            "Definition pack (fZ : scalable_for s f) := fun (g : RMorphism.map phAB) fM & phant_id (RMorphism.class g) fM => Pack phAB (Class fM fZ).",
            "VernacDefinition",
            "e9da556239e3d4105b6523e9d09273564e2ef98b"
        ],
        [
            "Canonical additive := Additive.Pack phAB class.",
            "VernacDefinition",
            "f975006d77b7bb5c557b035ca9ae235bb10b778c"
        ],
        [
            "Canonical rmorphism := RMorphism.Pack phAB class.",
            "VernacDefinition",
            "db5d9636ca26624f2bdb0c92afeda63ce0eaefa7"
        ],
        [
            "Canonical linear := Linear.Pack phAB class.",
            "VernacDefinition",
            "9c73ec4d7a9a24d45ccb8c7514fcdcaf965b662b"
        ],
        [
            "Canonical join_rmorphism := @RMorphism.Pack _ _ phAB linear class.",
            "VernacDefinition",
            "5a479519f172a49fcea3b86fe576a798fd37fe92"
        ],
        [
            "Canonical join_linear := @Linear.Pack R A B s phAB rmorphism class.",
            "VernacDefinition",
            "7d63b201f738acb32eef86845ad70fec967684b0"
        ],
        [
            "End ClassDef.",
            "VernacEndSegment",
            "bce1c8832045d8291c44a3fb67e9767782d2745b"
        ],
        [
            "Module Exports.",
            "VernacDefineModule",
            "d4a1114ec53f746523a7dec57823f7f03e51fa24"
        ],
        [
            "Notation lrmorphism_for s f := (class_of s f).",
            "VernacSyntacticDefinition",
            "a54f3d7729513fc3eab5440820eba125c0dfbe6a"
        ],
        [
            "Notation lrmorphism f := (lrmorphism_for *:%R f).",
            "VernacSyntacticDefinition",
            "fb9a2d1809757221309e311ec5252459d96c9e83"
        ],
        [
            "Coercion base : lrmorphism_for >-> RMorphism.class_of.",
            "VernacCoercion",
            "729f8a1ba9e7117b6f761bfa5b6f0e4d2fb63e37"
        ],
        [
            "Coercion base2 : lrmorphism_for >-> lmorphism_for.",
            "VernacCoercion",
            "6d823eb2bde3f23fcfdd0d88ace121fd0e1e6dd7"
        ],
        [
            "Coercion apply : map >-> Funclass.",
            "VernacCoercion",
            "d1b4f6021d79ee27ab09a2bfa027ea0b0b7f7d54"
        ],
        [
            "Notation LRMorphism f_lrM := (Pack (Phant _) (Class f_lrM f_lrM)).",
            "VernacSyntacticDefinition",
            "a753fd786dd97c749752d3881401b5e578b4b8c0"
        ],
        [
            "Notation AddLRMorphism fZ := (pack fZ id).",
            "VernacSyntacticDefinition",
            "970a6460637ef6c36d44c1d0d9f1028cc2852a78"
        ],
        [
            "Notation \"{ 'lrmorphism' fAB | s }\" := (map s (Phant fAB)) (at level 0, format \"{ 'lrmorphism' fAB | s }\") : ring_scope.",
            "VernacNotation",
            "7432c08c757b0a3ac81c46e65e2284ec345c5db0"
        ],
        [
            "Notation \"{ 'lrmorphism' fAB }\" := {lrmorphism fAB | *:%R} (at level 0, format \"{ 'lrmorphism' fAB }\") : ring_scope.",
            "VernacNotation",
            "122b1f9b6e3c0e5efbb4f9523fa6631eda7ea4a6"
        ],
        [
            "Notation \"[ 'lrmorphism' 'of' f ]\" := (@clone _ _ _ _ _ f _ _ id _ _ id) (at level 0, format \"[ 'lrmorphism' 'of' f ]\") : form_scope.",
            "VernacNotation",
            "d4e524295ecf9c70c90afd77dfbbb83ec9969bda"
        ],
        [
            "Coercion additive : map >-> Additive.map.",
            "VernacCoercion",
            "b10d6a6e876e369f8ed5a0848bfa1ec1c6e353f6"
        ],
        [
            "Canonical additive.",
            "VernacCanonical",
            "2490534dc5a24033d0a5efd23fe4472eba31cd62"
        ],
        [
            "Coercion rmorphism : map >-> RMorphism.map.",
            "VernacCoercion",
            "6a8f4a9a9c4fa39e6819189c7d55b80f19c282a8"
        ],
        [
            "Canonical rmorphism.",
            "VernacCanonical",
            "fa8ed95f87dda5dc54237b9ba27dd6daaeb1c896"
        ],
        [
            "Coercion linear : map >-> Linear.map.",
            "VernacCoercion",
            "ccc97345283c1a6b29b6fbfb12c3d756eb0ee236"
        ],
        [
            "Canonical linear.",
            "VernacCanonical",
            "536c11f2cab447a2ea9b388982503756352b7b9e"
        ],
        [
            "Canonical join_rmorphism.",
            "VernacCanonical",
            "f339ac8d4bb9a68ad10b094dd7cec9579be22a00"
        ],
        [
            "Canonical join_linear.",
            "VernacCanonical",
            "4ac609bf373f362fb91f59ed4c09f1c4a6c89688"
        ],
        [
            "End Exports.",
            "VernacEndSegment",
            "71efedae7ccffd696e1ffe5d8ae6baa8a4484918"
        ],
        [
            "End LRMorphism.",
            "VernacEndSegment",
            "6fe22639039daed4aecbd37aae89548acc2476f0"
        ],
        [
            "Include LRMorphism.Exports.",
            "VernacInclude",
            "580ccbe35265b8222643a34f8202de6cec6a06af"
        ],
        [
            "Section LRMorphismTheory.",
            "VernacBeginSection",
            "4a1cc16b9a6ceb058f9d9d836c73a24ba391e48f"
        ],
        [
            "Variables (R : ringType) (A B : lalgType R) (C : ringType) (s : R -> C -> C).",
            "VernacAssumption",
            "15f6bcf3e1abceb27c2b4bda375d424a5e20c5d3"
        ],
        [
            "Variables (k : unit) (f : {lrmorphism A -> B}) (g : {lrmorphism B -> C | s}).",
            "VernacAssumption",
            "e59a09b1954cadd42f331264ef35549d351d822a"
        ],
        [
            "Definition idfun_lrmorphism := [lrmorphism of @idfun A].",
            "VernacDefinition",
            "2f1f340023cbf47ec14f431107a3d28c5c0af1ef"
        ],
        [
            "Definition comp_lrmorphism := [lrmorphism of g \\o f].",
            "VernacDefinition",
            "340a8aa5b4ab620e7bfd17d2862d0144b397c45c"
        ],
        [
            "Definition locked_lrmorphism := [lrmorphism of locked_with k (f : A -> B)].",
            "VernacDefinition",
            "667153b929a411d329e3df1f592a4767c689f8a1"
        ],
        [
            "Lemma rmorph_alg a : f a%:A = a%:A.",
            "VernacStartTheoremProof",
            "b2055f0fc3f33d73a96f06449b657662322241c2"
        ],
        [
            "by rewrite linearZ rmorph1.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma lrmorphismP : lrmorphism f.",
            "VernacStartTheoremProof",
            "64f62c876076717911a692ff0790329d2ecfb639"
        ],
        [
            "exact: LRMorphism.class.",
            "VernacExtend",
            "ce637ff86bafca5d8359473e8c02af644dcbdc43"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma can2_lrmorphism f' : cancel f f' -> cancel f' f -> lrmorphism f'.",
            "VernacStartTheoremProof",
            "d62626a1fca14261081cc28cf4c181c44dd022ef"
        ],
        [
            "by move=> fK f'K; split; [apply: (can2_rmorphism fK) | apply: (can2_linear fK)].",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma bij_lrmorphism : bijective f -> exists2 f' : {lrmorphism B -> A}, cancel f f' & cancel f' f.",
            "VernacStartTheoremProof",
            "6469ac9c98882796006973f72cd83e924810f4ed"
        ],
        [
            "by case/bij_rmorphism=> f' fK f'K; exists (AddLRMorphism (can2_linear fK f'K)).",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "End LRMorphismTheory.",
            "VernacEndSegment",
            "380bd13b18fc324f927098638a39497eff7b45de"
        ],
        [
            "Module ComRing.",
            "VernacDefineModule",
            "2c6ee21c188436fd6a6405df31aede4b2ac194c9"
        ],
        [
            "Definition RingMixin R one mul mulA mulC mul1x mul_addl := let mulx1 := Monoid.mulC_id mulC mul1x in let mul_addr := Monoid.mulC_dist mulC mul_addl in @Ring.EtaMixin R one mul mulA mul1x mulx1 mul_addl mul_addr.",
            "VernacDefinition",
            "ba0203b1813c2343a98e14b84829969627263e8f"
        ],
        [
            "Section ClassDef.",
            "VernacBeginSection",
            "a5b792261e6c496f5a1a8d0f7da8c96156ca2fed"
        ],
        [
            "Record class_of R := Class {base : Ring.class_of R; mixin : commutative (Ring.mul base)}.",
            "VernacInductive",
            "1e35bd3ff51e3428332d4f6a29fd4bfab57f268f"
        ],
        [
            "Local Coercion base : class_of >-> Ring.class_of.",
            "VernacCoercion",
            "a1be4957282ccf9cb5ecc846b44d29a115416bbe"
        ],
        [
            "Structure type := Pack {sort; _ : class_of sort}.",
            "VernacInductive",
            "42b0161295055637e72e97af35c3d44479cc946b"
        ],
        [
            "Local Coercion sort : type >-> Sortclass.",
            "VernacCoercion",
            "e4478cd37693106f84ed020bd073c4970dc87530"
        ],
        [
            "Variable (T : Type) (cT : type).",
            "VernacAssumption",
            "eb35f5737a32cba56acb24ac87490232dc2dfcb9"
        ],
        [
            "Definition class := let: Pack _ c as cT' := cT return class_of cT' in c.",
            "VernacDefinition",
            "0e4a80652d474f8010316ff26a5322b5207d82a3"
        ],
        [
            "Definition clone c of phant_id class c := @Pack T c.",
            "VernacDefinition",
            "e082321bed0d5d4d78139419fead577313b82668"
        ],
        [
            "Let xT := let: Pack T _ := cT in T.",
            "VernacDefinition",
            "0a87c77e3a5ac8febf0910b95d7b998b7cb9cf6d"
        ],
        [
            "Notation xclass := (class : class_of xT).",
            "VernacSyntacticDefinition",
            "e136614fedd7b331a23b54adad5b0bce11895ed4"
        ],
        [
            "Definition pack mul0 (m0 : @commutative T T mul0) := fun bT b & phant_id (Ring.class bT) b => fun m & phant_id m0 m => Pack (@Class T b m).",
            "VernacDefinition",
            "b9654e3a90f72a00d64b3bee3d9d3d7eff5994e7"
        ],
        [
            "Definition eqType := @Equality.Pack cT xclass.",
            "VernacDefinition",
            "6139f412b89e62ff13c9c707c885de4b39151e9d"
        ],
        [
            "Definition choiceType := @Choice.Pack cT xclass.",
            "VernacDefinition",
            "f62d3090382a5ea70b978e0633e0376c4558db55"
        ],
        [
            "Definition zmodType := @Zmodule.Pack cT xclass.",
            "VernacDefinition",
            "d292a93c19cc9e36e99db073c0c14c27655bcd85"
        ],
        [
            "Definition ringType := @Ring.Pack cT xclass.",
            "VernacDefinition",
            "8a9134d1dac21560b6c04dc7467c51b02f0db83e"
        ],
        [
            "End ClassDef.",
            "VernacEndSegment",
            "bce1c8832045d8291c44a3fb67e9767782d2745b"
        ],
        [
            "Module Exports.",
            "VernacDefineModule",
            "d4a1114ec53f746523a7dec57823f7f03e51fa24"
        ],
        [
            "Coercion base : class_of >-> Ring.class_of.",
            "VernacCoercion",
            "a708b936f7f0c0b9a13e29435fe8a33ccf121548"
        ],
        [
            "Arguments mixin [R].",
            "VernacArguments",
            "3e176ba6f49dca282a138b8de5c937ef2231cbbf"
        ],
        [
            "Coercion mixin : class_of >-> commutative.",
            "VernacCoercion",
            "8d83a7116defe792627ad4f278050303224035b5"
        ],
        [
            "Coercion sort : type >-> Sortclass.",
            "VernacCoercion",
            "9e1cbf06afa0d2731dbb8bfd6b9ae32be22a8ae7"
        ],
        [
            "Bind Scope ring_scope with sort.",
            "VernacBindScope",
            "ac04d07dda43f0036576b2a438f8490c7ac4d59b"
        ],
        [
            "Coercion eqType : type >-> Equality.type.",
            "VernacCoercion",
            "58308c67b5e73c9e004d57c486a5071598a25e8c"
        ],
        [
            "Canonical eqType.",
            "VernacCanonical",
            "dd1ac877a396f552e2a8f23e59be45903d8b15ad"
        ],
        [
            "Coercion choiceType : type >-> Choice.type.",
            "VernacCoercion",
            "bdc8d608f4b963a8606cd33ad18b1977a8bcb78d"
        ],
        [
            "Canonical choiceType.",
            "VernacCanonical",
            "af7a1759ddd13e2b7e4e1ce16b6a3595a77b5659"
        ],
        [
            "Coercion zmodType : type >-> Zmodule.type.",
            "VernacCoercion",
            "4ec9ca49e3551546d7d514a97127c47a11747e3a"
        ],
        [
            "Canonical zmodType.",
            "VernacCanonical",
            "9a6f278270af4b6ced100d8e0c90c7719a960a86"
        ],
        [
            "Coercion ringType : type >-> Ring.type.",
            "VernacCoercion",
            "3563a3bf802f370588b71df18917d551f221a05e"
        ],
        [
            "Canonical ringType.",
            "VernacCanonical",
            "b7d4c328ac58b23ee4b52bd787434621c20d2c4d"
        ],
        [
            "Notation comRingType := type.",
            "VernacSyntacticDefinition",
            "327cf234935a873e999375ed051c76e32add23ae"
        ],
        [
            "Notation ComRingType T m := (@pack T _ m _ _ id _ id).",
            "VernacSyntacticDefinition",
            "47129b342109bbd54ee7ad9a60f6df23ef2b0bbc"
        ],
        [
            "Notation ComRingMixin := RingMixin.",
            "VernacSyntacticDefinition",
            "ecbc97df89fb58f330ec4d0b72d61f6401591109"
        ],
        [
            "Notation \"[ 'comRingType' 'of' T 'for' cT ]\" := (@clone T cT _ idfun) (at level 0, format \"[ 'comRingType' 'of' T 'for' cT ]\") : form_scope.",
            "VernacNotation",
            "1fcb628273544f812c5cab6981f944f524476b2b"
        ],
        [
            "Notation \"[ 'comRingType' 'of' T ]\" := (@clone T _ _ id) (at level 0, format \"[ 'comRingType' 'of' T ]\") : form_scope.",
            "VernacNotation",
            "9e073eb2dfe1adee033d31fb9a3672ff6279b4dd"
        ],
        [
            "End Exports.",
            "VernacEndSegment",
            "71efedae7ccffd696e1ffe5d8ae6baa8a4484918"
        ],
        [
            "End ComRing.",
            "VernacEndSegment",
            "84f10fa8719c4f0a765cd39a06ddbe908e0cff8c"
        ],
        [
            "Import ComRing.Exports.",
            "VernacImport",
            "5a4cedb38cc8856b690ba0061c49f7da61ba620e"
        ],
        [
            "Section ComRingTheory.",
            "VernacBeginSection",
            "a1a80e7e33ba92ed2df9cdf2aef81f7f9f750682"
        ],
        [
            "Variable R : comRingType.",
            "VernacAssumption",
            "7f1904bb8d32aac32a2864c2db512ee3df1e5ee6"
        ],
        [
            "Implicit Types x y : R.",
            "VernacReserve",
            "a698213249308a1927c4fb90fb6e1fbc35157508"
        ],
        [
            "Lemma mulrC : @commutative R R *%R.",
            "VernacStartTheoremProof",
            "a79de14e8bf09fb2c81200e64f89fc7853685556"
        ],
        [
            "by case: R => T [].",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Canonical mul_comoid := Monoid.ComLaw mulrC.",
            "VernacDefinition",
            "0f78114388d505ae4610172c1d66f90e661b138d"
        ],
        [
            "Lemma mulrCA : @left_commutative R R *%R.",
            "VernacStartTheoremProof",
            "be36d3853d358f2b3cb0477e2652de92cf8ca0b5"
        ],
        [
            "exact: mulmCA.",
            "VernacExtend",
            "ce637ff86bafca5d8359473e8c02af644dcbdc43"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma mulrAC : @right_commutative R R *%R.",
            "VernacStartTheoremProof",
            "15e919480e1836bc5c58e3dd78ae83c47279143c"
        ],
        [
            "exact: mulmAC.",
            "VernacExtend",
            "ce637ff86bafca5d8359473e8c02af644dcbdc43"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma mulrACA : @interchange R *%R *%R.",
            "VernacStartTheoremProof",
            "5a83dabadc7312634ed35fc4d6eeda5aa264c1ba"
        ],
        [
            "exact: mulmACA.",
            "VernacExtend",
            "ce637ff86bafca5d8359473e8c02af644dcbdc43"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma exprMn n : {morph (fun x => x ^+ n) : x y / x * y}.",
            "VernacStartTheoremProof",
            "77ec1edeb6a6edf908785f5420cc6746f02860e0"
        ],
        [
            "by move=> x y; apply: exprMn_comm; apply: mulrC.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma prodrXl n I r (P : pred I) (F : I -> R) : \\prod_(i <- r | P i) F i ^+ n = (\\prod_(i <- r | P i) F i) ^+ n.",
            "VernacStartTheoremProof",
            "02168ac2c08f014c8d8a0867596668d6f7355106"
        ],
        [
            "by rewrite (big_morph _ (exprMn n) (expr1n _ n)).",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma prodr_undup_exp_count (I : eqType) r (P : pred I) (F : I -> R) : \\prod_(i <- undup r | P i) F i ^+ count_mem i r = \\prod_(i <- r | P i) F i.",
            "VernacStartTheoremProof",
            "9ca45089c1a064a945ef710e6b357ca604ed4609"
        ],
        [
            "exact: big_undup_iterop_count.",
            "VernacExtend",
            "ce637ff86bafca5d8359473e8c02af644dcbdc43"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma exprDn x y n : (x + y) ^+ n = \\sum_(i < n.+1) (x ^+ (n - i) * y ^+ i) *+ 'C(n, i).",
            "VernacStartTheoremProof",
            "56fe2e0a981baaef3c13176c3793ff7c29187a23"
        ],
        [
            "by rewrite exprDn_comm //; apply: mulrC.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma exprBn x y n : (x - y) ^+ n = \\sum_(i < n.+1) ((-1) ^+ i * x ^+ (n - i) * y ^+ i) *+ 'C(n, i).",
            "VernacStartTheoremProof",
            "08396aecc6a29d889cd177b132ac2c34fe5eaa4c"
        ],
        [
            "by rewrite exprBn_comm //; apply: mulrC.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma subrXX x y n : x ^+ n - y ^+ n = (x - y) * (\\sum_(i < n) x ^+ (n.-1 - i) * y ^+ i).",
            "VernacStartTheoremProof",
            "601a4be5d189e8c689ed9bb76f88ec0e25c86fb6"
        ],
        [
            "by rewrite -subrXX_comm //; apply: mulrC.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma sqrrD x y : (x + y) ^+ 2 = x ^+ 2 + x * y *+ 2 + y ^+ 2.",
            "VernacStartTheoremProof",
            "d37d155852369057db083a7b6cf2cf18fdf14b54"
        ],
        [
            "by rewrite exprDn !big_ord_recr big_ord0 /= add0r mulr1 mul1r.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma sqrrB x y : (x - y) ^+ 2 = x ^+ 2 - x * y *+ 2 + y ^+ 2.",
            "VernacStartTheoremProof",
            "25b3d2dd6ac1321e192ff0b47e2983e94c18ca81"
        ],
        [
            "by rewrite sqrrD mulrN mulNrn sqrrN.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma subr_sqr x y : x ^+ 2 - y ^+ 2 = (x - y) * (x + y).",
            "VernacStartTheoremProof",
            "66bbb4209bc12d30f127ba0a7d97a94717d4fe62"
        ],
        [
            "by rewrite subrXX !big_ord_recr big_ord0 /= add0r mulr1 mul1r.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma subr_sqrDB x y : (x + y) ^+ 2 - (x - y) ^+ 2 = x * y *+ 4.",
            "VernacStartTheoremProof",
            "1dda7756a083095be0dab2cfa50355f840cf7102"
        ],
        [
            "rewrite sqrrD sqrrB -!(addrAC _ (y ^+ 2)) opprB.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "by rewrite addrC addrA subrK -mulrnDr.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Section FrobeniusAutomorphism.",
            "VernacBeginSection",
            "0c99661469d7f08ed346877e162397b003b5cab4"
        ],
        [
            "Variables (p : nat) (charRp : p \\in [char R]).",
            "VernacAssumption",
            "641f881792b2a1a367dcb5132f09014503280a70"
        ],
        [
            "Lemma Frobenius_aut_is_rmorphism : rmorphism (Frobenius_aut charRp).",
            "VernacStartTheoremProof",
            "7989f773a6feb0e5763fafb339f4a791f524bfb2"
        ],
        [
            "split=> [x y|]; first exact: Frobenius_autB_comm (mulrC _ _).",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "split=> [x y|]; first exact: Frobenius_autM_comm (mulrC _ _).",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "exact: Frobenius_aut1.",
            "VernacExtend",
            "ce637ff86bafca5d8359473e8c02af644dcbdc43"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Canonical Frobenius_aut_additive := Additive Frobenius_aut_is_rmorphism.",
            "VernacDefinition",
            "d26a8a5c57c116dfe16b7930b6df477886fad589"
        ],
        [
            "Canonical Frobenius_aut_rmorphism := RMorphism Frobenius_aut_is_rmorphism.",
            "VernacDefinition",
            "0f5f277d69979a95501915e09535ce25fcba32e2"
        ],
        [
            "End FrobeniusAutomorphism.",
            "VernacEndSegment",
            "68361a09d134732975e735b41dc05b161f0bf8f5"
        ],
        [
            "Lemma exprDn_char x y n : [char R].-nat n -> (x + y) ^+ n = x ^+ n + y ^+ n.",
            "VernacStartTheoremProof",
            "cb29790f264b14166f1de6a605b30837e687036f"
        ],
        [
            "pose p := pdiv n; have [|n_gt1 charRn] := leqP n 1; first by case: (n) => [|[]].",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "have charRp: p \\in [char R] by rewrite (pnatPpi charRn) ?pi_pdiv.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "have{charRn} /p_natP[e ->]: p.-nat n by rewrite -(eq_pnat _ (charf_eq charRp)).",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "by elim: e => // e IHe; rewrite !expnSr !exprM IHe -Frobenius_autE rmorphD.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma rmorph_comm (S : ringType) (f : {rmorphism R -> S}) x y : comm (f x) (f y).",
            "VernacStartTheoremProof",
            "12e787d161b741638e6e0fb9c96db2f4cc097169"
        ],
        [
            "by red; rewrite -!rmorphM mulrC.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Section ScaleLinear.",
            "VernacBeginSection",
            "68a4f36531affaf8e3aefc3c5ad7e42b8c808448"
        ],
        [
            "Variables (U V : lmodType R) (b : R) (f : {linear U -> V}).",
            "VernacAssumption",
            "a2b5f7b9652ab2541d9885dba096b3aa52657162"
        ],
        [
            "Lemma scale_is_scalable : scalable ( *:%R b : V -> V).",
            "VernacStartTheoremProof",
            "95beb49bdf961a593f6f69464e8300c5c49cd6c7"
        ],
        [
            "by move=> a v /=; rewrite !scalerA mulrC.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Canonical scale_linear := AddLinear scale_is_scalable.",
            "VernacDefinition",
            "63f191fac02debfb6ccccaea705fb8896233bcf3"
        ],
        [
            "Lemma scale_fun_is_scalable : scalable (b \\*: f).",
            "VernacStartTheoremProof",
            "1a12fd66891952102f8494d4e1bdb60a5f9e5a43"
        ],
        [
            "by move=> a v /=; rewrite !linearZ.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Canonical scale_fun_linear := AddLinear scale_fun_is_scalable.",
            "VernacDefinition",
            "28b7a26d60af6250d7db5ec5b2f543d51f389d23"
        ],
        [
            "End ScaleLinear.",
            "VernacEndSegment",
            "0ce6fb24da38eff5cb90b57fcf0216081149dec1"
        ],
        [
            "End ComRingTheory.",
            "VernacEndSegment",
            "3eac67bf03eaf56105e499da6280b699bb256f11"
        ],
        [
            "Module Algebra.",
            "VernacDefineModule",
            "e4b564747a51be4e65516ab86df7d660b692f49d"
        ],
        [
            "Section Mixin.",
            "VernacBeginSection",
            "2522bcb01c265dd126d0fa79e72892a08957e427"
        ],
        [
            "Variables (R : ringType) (A : lalgType R).",
            "VernacAssumption",
            "a067d910aa6c8abe89b1128e2da3c078183e6834"
        ],
        [
            "Definition axiom := forall k (x y : A), k *: (x * y) = x * (k *: y).",
            "VernacDefinition",
            "1a39a1962b21f5e03635621dc2d67b7a574936d3"
        ],
        [
            "Lemma comm_axiom : phant A -> commutative (@mul A) -> axiom.",
            "VernacStartTheoremProof",
            "6a256dd348b9de2e02d9ea5de4886237f194beab"
        ],
        [
            "by move=> _ commA k x y; rewrite commA scalerAl commA.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "End Mixin.",
            "VernacEndSegment",
            "d77c610f43cecbb48863d0152b6ecb72970259c2"
        ],
        [
            "Section ClassDef.",
            "VernacBeginSection",
            "a5b792261e6c496f5a1a8d0f7da8c96156ca2fed"
        ],
        [
            "Variable R : ringType.",
            "VernacAssumption",
            "103955c3e16ede32f173514da95e3006926aeccd"
        ],
        [
            "Record class_of (T : Type) : Type := Class { base : Lalgebra.class_of R T; mixin : axiom (Lalgebra.Pack _ base) }.",
            "VernacInductive",
            "7effde5abff0d93190df6abe39960d6685833619"
        ],
        [
            "Local Coercion base : class_of >-> Lalgebra.class_of.",
            "VernacCoercion",
            "5e39d8974de9f85c017f972defc1db95c8897603"
        ],
        [
            "Structure type (phR : phant R) := Pack {sort; _ : class_of sort}.",
            "VernacInductive",
            "78bfdb22887f748fe58a15d412ea69b6a323083f"
        ],
        [
            "Local Coercion sort : type >-> Sortclass.",
            "VernacCoercion",
            "e4478cd37693106f84ed020bd073c4970dc87530"
        ],
        [
            "Variable (phR : phant R) (T : Type) (cT : type phR).",
            "VernacAssumption",
            "c29c1b47135afbce9a566505b9ed44f41969b316"
        ],
        [
            "Definition class := let: Pack _ c as cT' := cT return class_of cT' in c.",
            "VernacDefinition",
            "0e4a80652d474f8010316ff26a5322b5207d82a3"
        ],
        [
            "Definition clone c of phant_id class c := @Pack phR T c.",
            "VernacDefinition",
            "37d5147ec25756853db3ea8f93466e928b7aedd0"
        ],
        [
            "Let xT := let: Pack T _ := cT in T.",
            "VernacDefinition",
            "0a87c77e3a5ac8febf0910b95d7b998b7cb9cf6d"
        ],
        [
            "Notation xclass := (class : class_of xT).",
            "VernacSyntacticDefinition",
            "e136614fedd7b331a23b54adad5b0bce11895ed4"
        ],
        [
            "Definition pack b0 (ax0 : @axiom R b0) := fun bT b & phant_id (@Lalgebra.class R phR bT) b => fun ax & phant_id ax0 ax => Pack phR (@Class T b ax).",
            "VernacDefinition",
            "daee29a8824de8ad45d05334d583bb3913d55f9c"
        ],
        [
            "Definition eqType := @Equality.Pack cT xclass.",
            "VernacDefinition",
            "6139f412b89e62ff13c9c707c885de4b39151e9d"
        ],
        [
            "Definition choiceType := @Choice.Pack cT xclass.",
            "VernacDefinition",
            "f62d3090382a5ea70b978e0633e0376c4558db55"
        ],
        [
            "Definition zmodType := @Zmodule.Pack cT xclass.",
            "VernacDefinition",
            "d292a93c19cc9e36e99db073c0c14c27655bcd85"
        ],
        [
            "Definition ringType := @Ring.Pack cT xclass.",
            "VernacDefinition",
            "8a9134d1dac21560b6c04dc7467c51b02f0db83e"
        ],
        [
            "Definition lmodType := @Lmodule.Pack R phR cT xclass.",
            "VernacDefinition",
            "ce00637124e62ebbeefb88ddd20470c874821839"
        ],
        [
            "Definition lalgType := @Lalgebra.Pack R phR cT xclass.",
            "VernacDefinition",
            "0d72eb2daf3e070740253667bc21e7d02a71c627"
        ],
        [
            "End ClassDef.",
            "VernacEndSegment",
            "bce1c8832045d8291c44a3fb67e9767782d2745b"
        ],
        [
            "Module Exports.",
            "VernacDefineModule",
            "d4a1114ec53f746523a7dec57823f7f03e51fa24"
        ],
        [
            "Coercion base : class_of >-> Lalgebra.class_of.",
            "VernacCoercion",
            "5875b1e547236d606cc20d039a0a16193867cba1"
        ],
        [
            "Coercion sort : type >-> Sortclass.",
            "VernacCoercion",
            "9e1cbf06afa0d2731dbb8bfd6b9ae32be22a8ae7"
        ],
        [
            "Bind Scope ring_scope with sort.",
            "VernacBindScope",
            "ac04d07dda43f0036576b2a438f8490c7ac4d59b"
        ],
        [
            "Coercion eqType : type >-> Equality.type.",
            "VernacCoercion",
            "58308c67b5e73c9e004d57c486a5071598a25e8c"
        ],
        [
            "Canonical eqType.",
            "VernacCanonical",
            "dd1ac877a396f552e2a8f23e59be45903d8b15ad"
        ],
        [
            "Coercion choiceType : type >-> Choice.type.",
            "VernacCoercion",
            "bdc8d608f4b963a8606cd33ad18b1977a8bcb78d"
        ],
        [
            "Canonical choiceType.",
            "VernacCanonical",
            "af7a1759ddd13e2b7e4e1ce16b6a3595a77b5659"
        ],
        [
            "Coercion zmodType : type >-> Zmodule.type.",
            "VernacCoercion",
            "4ec9ca49e3551546d7d514a97127c47a11747e3a"
        ],
        [
            "Canonical zmodType.",
            "VernacCanonical",
            "9a6f278270af4b6ced100d8e0c90c7719a960a86"
        ],
        [
            "Coercion ringType : type >-> Ring.type.",
            "VernacCoercion",
            "3563a3bf802f370588b71df18917d551f221a05e"
        ],
        [
            "Canonical ringType.",
            "VernacCanonical",
            "b7d4c328ac58b23ee4b52bd787434621c20d2c4d"
        ],
        [
            "Coercion lmodType : type >-> Lmodule.type.",
            "VernacCoercion",
            "9ff62a98b0f74b40c781351d02b7295e741840a6"
        ],
        [
            "Canonical lmodType.",
            "VernacCanonical",
            "2508a378d00cff399685e05d31698f84cdfa1eb3"
        ],
        [
            "Coercion lalgType : type >-> Lalgebra.type.",
            "VernacCoercion",
            "8dc4e0c848285451e0f7d1e23771ee90e2b84039"
        ],
        [
            "Canonical lalgType.",
            "VernacCanonical",
            "f31157c914d84396af2f285a028b530262ad3b8e"
        ],
        [
            "Notation algType R := (type (Phant R)).",
            "VernacSyntacticDefinition",
            "d64a5d4c588b43768746864ae8f9d25c8770438f"
        ],
        [
            "Notation AlgType R A ax := (@pack _ (Phant R) A _ ax _ _ id _ id).",
            "VernacSyntacticDefinition",
            "571b6aaf6d88dd14b53a62a33bacbd74681d250c"
        ],
        [
            "Notation CommAlgType R A := (AlgType R A (comm_axiom (Phant A) (@mulrC _))).",
            "VernacSyntacticDefinition",
            "707b499eedfd7867d051c293854f955ef100636d"
        ],
        [
            "Notation \"[ 'algType' R 'of' T 'for' cT ]\" := (@clone _ (Phant R) T cT _ idfun) (at level 0, format \"[ 'algType' R 'of' T 'for' cT ]\") : form_scope.",
            "VernacNotation",
            "7435c8fa9ebf955caa315430360f830bf42fc93e"
        ],
        [
            "Notation \"[ 'algType' R 'of' T ]\" := (@clone _ (Phant R) T _ _ id) (at level 0, format \"[ 'algType' R 'of' T ]\") : form_scope.",
            "VernacNotation",
            "5983d2174130a92830b282ba8b55a890302f9791"
        ],
        [
            "End Exports.",
            "VernacEndSegment",
            "71efedae7ccffd696e1ffe5d8ae6baa8a4484918"
        ],
        [
            "End Algebra.",
            "VernacEndSegment",
            "1373be42e3c84520d2b6f119ec42c3af6c674e67"
        ],
        [
            "Import Algebra.Exports.",
            "VernacImport",
            "a8d7d2482451361a1a3d07605ad2cf874b0134e8"
        ],
        [
            "Section AlgebraTheory.",
            "VernacBeginSection",
            "696c387a9a05cf9f1c99a3030522a94037dcd140"
        ],
        [
            "Variables (R : comRingType) (A : algType R).",
            "VernacAssumption",
            "58aabb2c75982880ecbc2b44ef43a0a37133b0ab"
        ],
        [
            "Implicit Types (k : R) (x y : A).",
            "VernacReserve",
            "8b0802fe78fa92b9af11f5ec95abc0f5e160d725"
        ],
        [
            "Lemma scalerAr k x y : k *: (x * y) = x * (k *: y).",
            "VernacStartTheoremProof",
            "fca91279f5a92ca0ef522c72d9492d7a654681fe"
        ],
        [
            "by case: A k x y => T [].",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma scalerCA k x y : k *: x * y = x * (k *: y).",
            "VernacStartTheoremProof",
            "727532424f7aeb06198af7ca3323e46381820622"
        ],
        [
            "by rewrite -scalerAl scalerAr.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma mulr_algr a x : x * a%:A = a *: x.",
            "VernacStartTheoremProof",
            "4a3d34bec6ff06755fd56bdb95c0d21f03ce874d"
        ],
        [
            "by rewrite -scalerAr mulr1.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma exprZn k x n : (k *: x) ^+ n = k ^+ n *: x ^+ n.",
            "VernacStartTheoremProof",
            "f2d182abdd3912a5c71eb0ab61e1856e02764b7c"
        ],
        [
            "elim: n => [|n IHn]; first by rewrite !expr0 scale1r.",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "by rewrite !exprS IHn -scalerA scalerAr scalerAl.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma scaler_prod I r (P : pred I) (F : I -> R) (G : I -> A) : \\prod_(i <- r | P i) (F i *: G i) = \\prod_(i <- r | P i) F i *: \\prod_(i <- r | P i) G i.",
            "VernacStartTheoremProof",
            "b467ab4e888cec244471067bcf8470a5f95b8057"
        ],
        [
            "elim/big_rec3: _ => [|i x a _ _ ->]; first by rewrite scale1r.",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "by rewrite -scalerAl -scalerAr scalerA.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma scaler_prodl (I : finType) (S : pred I) (F : I -> A) k : \\prod_(i in S) (k *: F i) = k ^+ #|S| *: \\prod_(i in S) F i.",
            "VernacStartTheoremProof",
            "98d7b1ff53fbf6715a7a43ecf73767729adcc729"
        ],
        [
            "by rewrite scaler_prod prodr_const.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma scaler_prodr (I : finType) (S : pred I) (F : I -> R) x : \\prod_(i in S) (F i *: x) = \\prod_(i in S) F i *: x ^+ #|S|.",
            "VernacStartTheoremProof",
            "7623b22644ff93a6895e9889d7907c99a6466b60"
        ],
        [
            "by rewrite scaler_prod prodr_const.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Canonical regular_comRingType := [comRingType of R^o].",
            "VernacDefinition",
            "3f13030bd271e9d4c44e0b96f45542473a25efea"
        ],
        [
            "Canonical regular_algType := CommAlgType R R^o.",
            "VernacDefinition",
            "6ec1e5a30ac94f1b263e3121dc9aa74148774f25"
        ],
        [
            "Variables (U : lmodType R) (a : A) (f : {linear U -> A}).",
            "VernacAssumption",
            "fb3ce6d49b378085622843ecf00eb66f1b490409"
        ],
        [
            "Lemma mull_fun_is_scalable : scalable (a \\*o f).",
            "VernacStartTheoremProof",
            "e7933c87baffca98baa1638b854ca956db3d001d"
        ],
        [
            "by move=> k x /=; rewrite linearZ scalerAr.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Canonical mull_fun_linear := AddLinear mull_fun_is_scalable.",
            "VernacDefinition",
            "bd133d6f589f4da0e1ef81ab99089b4b0b35bed5"
        ],
        [
            "End AlgebraTheory.",
            "VernacEndSegment",
            "8b914a4ce5efdd671290c7baa1ba6a745dbd99c7"
        ],
        [
            "Module UnitRing.",
            "VernacDefineModule",
            "66da99d9add705f605f03dcf5ec659f11a8aa78e"
        ],
        [
            "Record mixin_of (R : ringType) : Type := Mixin { unit : pred R; inv : R -> R; _ : {in unit, left_inverse 1 inv *%R}; _ : {in unit, right_inverse 1 inv *%R}; _ : forall x y, y * x = 1 /\\ x * y = 1 -> unit x; _ : {in [predC unit], inv =1 id} }.",
            "VernacInductive",
            "562703e1ab4598715691c37507a060b0dd77dfe8"
        ],
        [
            "Definition EtaMixin R unit inv mulVr mulrV unitP inv_out := let _ := @Mixin R unit inv mulVr mulrV unitP inv_out in @Mixin (Ring.Pack (Ring.class R)) unit inv mulVr mulrV unitP inv_out.",
            "VernacDefinition",
            "7cc47e98376a433b6d8f4cc60ccb8582da99087b"
        ],
        [
            "Section ClassDef.",
            "VernacBeginSection",
            "a5b792261e6c496f5a1a8d0f7da8c96156ca2fed"
        ],
        [
            "Record class_of (R : Type) : Type := Class { base : Ring.class_of R; mixin : mixin_of (Ring.Pack base) }.",
            "VernacInductive",
            "4e1e9dde372782630e466d0adbbc4c4557d62c79"
        ],
        [
            "Local Coercion base : class_of >-> Ring.class_of.",
            "VernacCoercion",
            "a1be4957282ccf9cb5ecc846b44d29a115416bbe"
        ],
        [
            "Structure type := Pack {sort; _ : class_of sort}.",
            "VernacInductive",
            "42b0161295055637e72e97af35c3d44479cc946b"
        ],
        [
            "Local Coercion sort : type >-> Sortclass.",
            "VernacCoercion",
            "e4478cd37693106f84ed020bd073c4970dc87530"
        ],
        [
            "Variables (T : Type) (cT : type).",
            "VernacAssumption",
            "eb35f5737a32cba56acb24ac87490232dc2dfcb9"
        ],
        [
            "Definition class := let: Pack _ c as cT' := cT return class_of cT' in c.",
            "VernacDefinition",
            "0e4a80652d474f8010316ff26a5322b5207d82a3"
        ],
        [
            "Definition clone c of phant_id class c := @Pack T c.",
            "VernacDefinition",
            "e082321bed0d5d4d78139419fead577313b82668"
        ],
        [
            "Let xT := let: Pack T _ := cT in T.",
            "VernacDefinition",
            "0a87c77e3a5ac8febf0910b95d7b998b7cb9cf6d"
        ],
        [
            "Notation xclass := (class : class_of xT).",
            "VernacSyntacticDefinition",
            "e136614fedd7b331a23b54adad5b0bce11895ed4"
        ],
        [
            "Definition pack b0 (m0 : mixin_of (@Ring.Pack T b0)) := fun bT b & phant_id (Ring.class bT) b => fun m & phant_id m0 m => Pack (@Class T b m).",
            "VernacDefinition",
            "e1ef7280358a7f39e0b8e4609f6a63317468fbb0"
        ],
        [
            "Definition eqType := @Equality.Pack cT xclass.",
            "VernacDefinition",
            "6139f412b89e62ff13c9c707c885de4b39151e9d"
        ],
        [
            "Definition choiceType := @Choice.Pack cT xclass.",
            "VernacDefinition",
            "f62d3090382a5ea70b978e0633e0376c4558db55"
        ],
        [
            "Definition zmodType := @Zmodule.Pack cT xclass.",
            "VernacDefinition",
            "d292a93c19cc9e36e99db073c0c14c27655bcd85"
        ],
        [
            "Definition ringType := @Ring.Pack cT xclass.",
            "VernacDefinition",
            "8a9134d1dac21560b6c04dc7467c51b02f0db83e"
        ],
        [
            "End ClassDef.",
            "VernacEndSegment",
            "bce1c8832045d8291c44a3fb67e9767782d2745b"
        ],
        [
            "Module Exports.",
            "VernacDefineModule",
            "d4a1114ec53f746523a7dec57823f7f03e51fa24"
        ],
        [
            "Coercion base : class_of >-> Ring.class_of.",
            "VernacCoercion",
            "a708b936f7f0c0b9a13e29435fe8a33ccf121548"
        ],
        [
            "Coercion mixin : class_of >-> mixin_of.",
            "VernacCoercion",
            "6e94763ee53fdac946511987d81c3f6daccc67c3"
        ],
        [
            "Coercion sort : type >-> Sortclass.",
            "VernacCoercion",
            "9e1cbf06afa0d2731dbb8bfd6b9ae32be22a8ae7"
        ],
        [
            "Bind Scope ring_scope with sort.",
            "VernacBindScope",
            "ac04d07dda43f0036576b2a438f8490c7ac4d59b"
        ],
        [
            "Coercion eqType : type >-> Equality.type.",
            "VernacCoercion",
            "58308c67b5e73c9e004d57c486a5071598a25e8c"
        ],
        [
            "Canonical eqType.",
            "VernacCanonical",
            "dd1ac877a396f552e2a8f23e59be45903d8b15ad"
        ],
        [
            "Coercion choiceType : type >-> Choice.type.",
            "VernacCoercion",
            "bdc8d608f4b963a8606cd33ad18b1977a8bcb78d"
        ],
        [
            "Canonical choiceType.",
            "VernacCanonical",
            "af7a1759ddd13e2b7e4e1ce16b6a3595a77b5659"
        ],
        [
            "Coercion zmodType : type >-> Zmodule.type.",
            "VernacCoercion",
            "4ec9ca49e3551546d7d514a97127c47a11747e3a"
        ],
        [
            "Canonical zmodType.",
            "VernacCanonical",
            "9a6f278270af4b6ced100d8e0c90c7719a960a86"
        ],
        [
            "Coercion ringType : type >-> Ring.type.",
            "VernacCoercion",
            "3563a3bf802f370588b71df18917d551f221a05e"
        ],
        [
            "Canonical ringType.",
            "VernacCanonical",
            "b7d4c328ac58b23ee4b52bd787434621c20d2c4d"
        ],
        [
            "Notation unitRingType := type.",
            "VernacSyntacticDefinition",
            "c82061edd36fe01e3c13b7c8a2d740cc87c846d8"
        ],
        [
            "Notation UnitRingType T m := (@pack T _ m _ _ id _ id).",
            "VernacSyntacticDefinition",
            "0b7f5663026ffd860cefcbed0631a6376e567ec8"
        ],
        [
            "Notation UnitRingMixin := EtaMixin.",
            "VernacSyntacticDefinition",
            "1426f96ae95795851a333bd2d7b43ea163299776"
        ],
        [
            "Notation \"[ 'unitRingType' 'of' T 'for' cT ]\" := (@clone T cT _ idfun) (at level 0, format \"[ 'unitRingType' 'of' T 'for' cT ]\") : form_scope.",
            "VernacNotation",
            "89513ca35a860b5b9059e889aed73a206c80e6d8"
        ],
        [
            "Notation \"[ 'unitRingType' 'of' T ]\" := (@clone T _ _ id) (at level 0, format \"[ 'unitRingType' 'of' T ]\") : form_scope.",
            "VernacNotation",
            "df2209065b151f040998e161e2d65855c163663c"
        ],
        [
            "End Exports.",
            "VernacEndSegment",
            "71efedae7ccffd696e1ffe5d8ae6baa8a4484918"
        ],
        [
            "End UnitRing.",
            "VernacEndSegment",
            "b4d22ffc709e390b56b13a1ba3d45f87f9ab0694"
        ],
        [
            "Import UnitRing.Exports.",
            "VernacImport",
            "40e06c1940ce839262f18446bdc041584b3c1aae"
        ],
        [
            "Definition unit {R : unitRingType} := [qualify a u : R | UnitRing.unit (UnitRing.class R) u].",
            "VernacDefinition",
            "f00444f0976b56eed12f39dda1ce6dae564deae9"
        ],
        [
            "Fact unit_key R : pred_key (@unit R).",
            "VernacStartTheoremProof",
            "0253f8e7b3f881963a6a761e565d844d844f3b29"
        ],
        [
            "by [].",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Canonical unit_keyed R := KeyedQualifier (@unit_key R).",
            "VernacDefinition",
            "37c8da76e36cbe44f0a355713389f4bb0ed9fc69"
        ],
        [
            "Definition inv {R : unitRingType} : R -> R := UnitRing.inv (UnitRing.class R).",
            "VernacDefinition",
            "e6133aebd7463ec512ecd0098e150f5cd00c730c"
        ],
        [
            "Local Notation \"x ^-1\" := (inv x).",
            "VernacNotation",
            "5c1c1fd55da62ae55cecb856b554b15b44373aaa"
        ],
        [
            "Local Notation \"x / y\" := (x * y^-1).",
            "VernacNotation",
            "d5fb688adbbbbf2a6ec784d01059667861a716f8"
        ],
        [
            "Local Notation \"x ^- n\" := ((x ^+ n)^-1).",
            "VernacNotation",
            "b3a540ad21dee576fdd41f3196f9521b36fd9752"
        ],
        [
            "Section UnitRingTheory.",
            "VernacBeginSection",
            "7de747d65a1a368b4621891ffe4b8eac5607d79e"
        ],
        [
            "Variable R : unitRingType.",
            "VernacAssumption",
            "7091a2a91a14247c9bb358aacf762b043d2cb667"
        ],
        [
            "Implicit Types x y : R.",
            "VernacReserve",
            "a698213249308a1927c4fb90fb6e1fbc35157508"
        ],
        [
            "Lemma divrr : {in unit, right_inverse 1 (@inv R) *%R}.",
            "VernacStartTheoremProof",
            "b8fe49eee3239466b40be4ed733ccc911256b6a1"
        ],
        [
            "by case: R => T [? []].",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Definition mulrV := divrr.",
            "VernacDefinition",
            "7a82cdc65ecdabacbaf0ec155d58e64d34e25c5e"
        ],
        [
            "Lemma mulVr : {in unit, left_inverse 1 (@inv R) *%R}.",
            "VernacStartTheoremProof",
            "f844759f00523e1726913b693c9671915581dfb6"
        ],
        [
            "by case: R => T [? []].",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma invr_out x : x \\isn't a unit -> x^-1 = x.",
            "VernacStartTheoremProof",
            "27d0bf7b3f4567cd7ad86e1e87579b3d9a57d332"
        ],
        [
            "by case: R x => T [? []].",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma unitrP x : reflect (exists y, y * x = 1 /\\ x * y = 1) (x \\is a unit).",
            "VernacStartTheoremProof",
            "246bc4d7909173a8f550e9e4aeaa49211e9f474b"
        ],
        [
            "apply: (iffP idP) => [Ux | []]; last by case: R x => T [? []].",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "by exists x^-1; rewrite divrr ?mulVr.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma mulKr : {in unit, left_loop (@inv R) *%R}.",
            "VernacStartTheoremProof",
            "87cbf14ce21538c55a073ed45e7f5bf64f7279cf"
        ],
        [
            "by move=> x Ux y; rewrite mulrA mulVr ?mul1r.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma mulVKr : {in unit, rev_left_loop (@inv R) *%R}.",
            "VernacStartTheoremProof",
            "3c9722dd1825309816c0aec376debeb13ec802b0"
        ],
        [
            "by move=> x Ux y; rewrite mulrA mulrV ?mul1r.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma mulrK : {in unit, right_loop (@inv R) *%R}.",
            "VernacStartTheoremProof",
            "d279386f183309bc001330cd70679ec24726e735"
        ],
        [
            "by move=> x Ux y; rewrite -mulrA divrr ?mulr1.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma mulrVK : {in unit, rev_right_loop (@inv R) *%R}.",
            "VernacStartTheoremProof",
            "bb57e79f4d18e2a0b99851345674ce6f9f01d72a"
        ],
        [
            "by move=> x Ux y; rewrite -mulrA mulVr ?mulr1.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Definition divrK := mulrVK.",
            "VernacDefinition",
            "856ec491cbcad06432630e4082ac0c9599e5e057"
        ],
        [
            "Lemma mulrI : {in @unit R, right_injective *%R}.",
            "VernacStartTheoremProof",
            "f3a36dae96f3dcd9dd7e269b20874bb6d503fc81"
        ],
        [
            "by move=> x Ux; apply: can_inj (mulKr Ux).",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma mulIr : {in @unit R, left_injective *%R}.",
            "VernacStartTheoremProof",
            "d381570883a55cc43691c59a3126b43a2fdbcfcc"
        ],
        [
            "by move=> x Ux; apply: can_inj (mulrK Ux).",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma telescope_prodr n m (f : nat -> R) : (forall k, n < k < m -> f k \\is a unit) -> n < m -> \\prod_(n <= k < m) (f k / f k.+1) = f n / f m.",
            "VernacStartTheoremProof",
            "36a7efa37a67806beca966ae91749aaa762468ab"
        ],
        [
            "move=> Uf /subnK-Dm; do [rewrite -{}Dm; move: {m}(m - _)%N => m] in Uf *.",
            "VernacExtend",
            "22b510de5a19ae026f48022a3dcf9db1d297df52"
        ],
        [
            "rewrite unlock /index_iota -addSnnS addnK /= -mulrA; congr (_ * _).",
            "VernacExtend",
            "a0279e71fd23ac6bde2b8b4402981a70ea719044"
        ],
        [
            "have{Uf}: all [preim f of unit] (iota n.+1 m).",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "by apply/allP=> k; rewrite mem_iota addnC => /Uf.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "elim: m n => [|m IHm] n /=; first by rewrite mulr1.",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "by rewrite -mulrA addSnnS => /andP[/mulKr-> /IHm].",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma commrV x y : comm x y -> comm x y^-1.",
            "VernacStartTheoremProof",
            "20a47487167672420cfd7f33cfecd667a0a104b5"
        ],
        [
            "have [Uy cxy | /invr_out-> //] := boolP (y \\in unit).",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "by apply: (canLR (mulrK Uy)); rewrite -mulrA cxy mulKr.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma unitrE x : (x \\is a unit) = (x / x == 1).",
            "VernacStartTheoremProof",
            "3d3e2508120af68c633033dd160319ab98741acc"
        ],
        [
            "apply/idP/eqP=> [Ux | xx1]; first exact: divrr.",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "by apply/unitrP; exists x^-1; rewrite -commrV.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma invrK : involutive (@inv R).",
            "VernacStartTheoremProof",
            "0b2c63fe7858078364b05e3cc7b0e08af33ca820"
        ],
        [
            "move=> x; case Ux: (x \\in unit); last by rewrite !invr_out ?Ux.",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "rewrite -(mulrK Ux _^-1) -mulrA commrV ?mulKr //.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "by apply/unitrP; exists x; rewrite divrr ?mulVr.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma invr_inj : injective (@inv R).",
            "VernacStartTheoremProof",
            "fc2e1b437c866b76677bdae32ddce60f3d96f723"
        ],
        [
            "exact: inv_inj invrK.",
            "VernacExtend",
            "ce637ff86bafca5d8359473e8c02af644dcbdc43"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma unitrV x : (x^-1 \\in unit) = (x \\in unit).",
            "VernacStartTheoremProof",
            "7c45a22cbe26e3bba0478c6f26f7f319c52551a3"
        ],
        [
            "by rewrite !unitrE invrK commrV.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma unitr1 : 1 \\in @unit R.",
            "VernacStartTheoremProof",
            "c6a104f486a0a0fc3bb8dbfd71950666eae4f84b"
        ],
        [
            "by apply/unitrP; exists 1; rewrite mulr1.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma invr1 : 1^-1 = 1 :> R.",
            "VernacStartTheoremProof",
            "09b5601ec6726fbb9c64f1df176a60741ab8beab"
        ],
        [
            "by rewrite -{2}(mulVr unitr1) mulr1.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma div1r x : 1 / x = x^-1.",
            "VernacStartTheoremProof",
            "8751e288e14bc3ac3851a1c1f651620b2f2a02a7"
        ],
        [
            "by rewrite mul1r.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma divr1 x : x / 1 = x.",
            "VernacStartTheoremProof",
            "79413195b13d98dcb440457a7d45e05c592026aa"
        ],
        [
            "by rewrite invr1 mulr1.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma natr_div m d : d %| m -> d%:R \\is a @unit R -> (m %/ d)%:R = m%:R / d%:R :> R.",
            "VernacStartTheoremProof",
            "c944cfc8acc7490da21a91158d30a707d3b3acc4"
        ],
        [
            "by rewrite dvdn_eq => /eqP def_m unit_d; rewrite -{2}def_m natrM mulrK.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma divrI : {in unit, right_injective (fun x y => x / y)}.",
            "VernacStartTheoremProof",
            "2284fbfa7a1df52ee030edaad06065154492034f"
        ],
        [
            "by move=> x /mulrI/inj_comp; apply; apply: invr_inj.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma divIr : {in unit, left_injective (fun x y => x / y)}.",
            "VernacStartTheoremProof",
            "fbe910ef749474c151abdc8c231646495e923724"
        ],
        [
            "by move=> x; rewrite -unitrV => /mulIr.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma unitr0 : (0 \\is a @unit R) = false.",
            "VernacStartTheoremProof",
            "8559dfdc703900d7ed134ac2cbec172ed5db366f"
        ],
        [
            "by apply/unitrP=> [[x [_ /esym/eqP]]]; rewrite mul0r oner_eq0.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma invr0 : 0^-1 = 0 :> R.",
            "VernacStartTheoremProof",
            "76cf97bd729c91c0035cd60673bce412ef97c094"
        ],
        [
            "by rewrite invr_out ?unitr0.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma unitrN1 : -1 \\is a @unit R.",
            "VernacStartTheoremProof",
            "9bd587e27fbbe7b0831d50ffbf54f44dfb5c8ff4"
        ],
        [
            "by apply/unitrP; exists (-1); rewrite mulrNN mulr1.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma invrN1 : (-1)^-1 = -1 :> R.",
            "VernacStartTheoremProof",
            "cf46e69c7f0500c5614dbfd19bbb6e38d41d6b6d"
        ],
        [
            "by rewrite -{2}(divrr unitrN1) mulN1r opprK.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma invr_sign n : ((-1) ^- n) = (-1) ^+ n :> R.",
            "VernacStartTheoremProof",
            "8bfef206c4910932b8c3b2b6094838902241ae98"
        ],
        [
            "by rewrite -signr_odd; case: (odd n); rewrite (invr1, invrN1).",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma unitrMl x y : y \\is a unit -> (x * y \\is a unit) = (x \\is a unit).",
            "VernacStartTheoremProof",
            "d0e37cb4e0cebd83220bd1015273976061d21031"
        ],
        [
            "move=> Uy; wlog Ux: x y Uy / x \\is a unit => [WHxy|].",
            "VernacExtend",
            "8261237f0cda1915a4077c28869831c5329103ce"
        ],
        [
            "by apply/idP/idP=> Ux; first rewrite -(mulrK Uy x); rewrite WHxy ?unitrV.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "rewrite Ux; apply/unitrP; exists (y^-1 * x^-1).",
            "VernacExtend",
            "a4fa58265b8031e592d242aa93628cff0acc1a51"
        ],
        [
            "by rewrite -!mulrA mulKr ?mulrA ?mulrK ?divrr ?mulVr.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma unitrMr x y : x \\is a unit -> (x * y \\is a unit) = (y \\is a unit).",
            "VernacStartTheoremProof",
            "1706cf15fd082b164a1f1097765cfbbfa1d22304"
        ],
        [
            "move=> Ux; apply/idP/idP=> [Uxy | Uy]; last by rewrite unitrMl.",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "by rewrite -(mulKr Ux y) unitrMl ?unitrV.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma invrM : {in unit &, forall x y, (x * y)^-1 = y^-1 * x^-1}.",
            "VernacStartTheoremProof",
            "5cfa1b298fd4535d8aaedd0d9a142b840d9954af"
        ],
        [
            "move=> x y Ux Uy; have Uxy: (x * y \\in unit) by rewrite unitrMl.",
            "VernacExtend",
            "ccd83c252dcbae3d56f3d057fcb8217878b51901"
        ],
        [
            "by apply: (mulrI Uxy); rewrite divrr ?mulrA ?mulrK ?divrr.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma unitrM_comm x y : comm x y -> (x * y \\is a unit) = (x \\is a unit) && (y \\is a unit).",
            "VernacStartTheoremProof",
            "b4d488468af677e144cde406378ee772499b32f7"
        ],
        [
            "move=> cxy; apply/idP/andP=> [Uxy | [Ux Uy]]; last by rewrite unitrMl.",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "suffices Ux: x \\in unit by rewrite unitrMr in Uxy.",
            "VernacExtend",
            "290ed488b5562e885aa2cac56f3a69b4faa0eaa6"
        ],
        [
            "apply/unitrP; case/unitrP: Uxy => z [zxy xyz]; exists (y * z).",
            "VernacExtend",
            "aa8863642e3acd1cec285effc5265ccee6912f89"
        ],
        [
            "rewrite mulrA xyz -{1}[y]mul1r -{1}zxy cxy -!mulrA (mulrA x) (mulrA _ z) xyz.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "by rewrite mul1r -cxy.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma unitrX x n : x \\is a unit -> x ^+ n \\is a unit.",
            "VernacStartTheoremProof",
            "f6fdd8c4117a28b67c58e3d6cea81d04eb1dce85"
        ],
        [
            "by move=> Ux; elim: n => [|n IHn]; rewrite ?unitr1 // exprS unitrMl.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma unitrX_pos x n : n > 0 -> (x ^+ n \\in unit) = (x \\in unit).",
            "VernacStartTheoremProof",
            "8ee9bf25832d2675ab9bfdd585987dd14acea14d"
        ],
        [
            "case: n => // n _; rewrite exprS unitrM_comm; last exact: commrX.",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "by case Ux: (x \\is a unit); rewrite // unitrX.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma exprVn x n : x^-1 ^+ n = x ^- n.",
            "VernacStartTheoremProof",
            "0926abd89de27c87d5b3dcbc242450a9e65c0e23"
        ],
        [
            "elim: n => [|n IHn]; first by rewrite !expr0 ?invr1.",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "case Ux: (x \\is a unit); first by rewrite exprSr exprS IHn -invrM // unitrX.",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "by rewrite !invr_out ?unitrX_pos ?Ux.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma exprB m n x : n <= m -> x \\is a unit -> x ^+ (m - n) = x ^+ m / x ^+ n.",
            "VernacStartTheoremProof",
            "381d3c56d3e54686e7ca7c5572c9664c27030ae1"
        ],
        [
            "by move/subnK=> {2}<- Ux; rewrite exprD mulrK ?unitrX.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma invr_neq0 x : x != 0 -> x^-1 != 0.",
            "VernacStartTheoremProof",
            "9244bf638293d7a7a9e92b51585850e2536cc8c6"
        ],
        [
            "move=> nx0; case Ux: (x \\is a unit); last by rewrite invr_out ?Ux.",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "by apply/eqP=> x'0; rewrite -unitrV x'0 unitr0 in Ux.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma invr_eq0 x : (x^-1 == 0) = (x == 0).",
            "VernacStartTheoremProof",
            "7b8795aff23c653d34eb473ee4c51281ca9d647f"
        ],
        [
            "by apply: negb_inj; apply/idP/idP; move/invr_neq0; rewrite ?invrK.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma invr_eq1 x : (x^-1 == 1) = (x == 1).",
            "VernacStartTheoremProof",
            "e0ee83f0c52b36e3280bca1e9abb27cd567dea2a"
        ],
        [
            "by rewrite (inv_eq invrK) invr1.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma rev_unitrP (x y : R^c) : y * x = 1 /\\ x * y = 1 -> x \\is a unit.",
            "VernacStartTheoremProof",
            "046b159e691e9270feba65321451abd69137d739"
        ],
        [
            "by case=> [yx1 xy1]; apply/unitrP; exists y.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Definition converse_unitRingMixin := @UnitRing.Mixin _ ((unit : pred_class) : pred R^c) _ mulrV mulVr rev_unitrP invr_out.",
            "VernacDefinition",
            "25e187fdb4652cf16e67fd3aff94fc23cb122e68"
        ],
        [
            "Canonical converse_unitRingType := UnitRingType R^c converse_unitRingMixin.",
            "VernacDefinition",
            "c855ddbf6937ebd8756c17bba8b5d36232db9e5a"
        ],
        [
            "Canonical regular_unitRingType := [unitRingType of R^o].",
            "VernacDefinition",
            "6ff65a24b7c956114dde8fa925169288e3d5ac96"
        ],
        [
            "Section ClosedPredicates.",
            "VernacBeginSection",
            "867c96696ba4b124a23204102a22dbe3e9a8b988"
        ],
        [
            "Variables S : predPredType R.",
            "VernacAssumption",
            "a0753d5b124c8560ac0473057f8ec3fe1e565ca0"
        ],
        [
            "Definition invr_closed := {in S, forall x, x^-1 \\in S}.",
            "VernacDefinition",
            "719bda6a16d4dc7ea7d6bc9cca30df07665b1ef7"
        ],
        [
            "Definition divr_2closed := {in S &, forall x y, x / y \\in S}.",
            "VernacDefinition",
            "5d7ecad007f0536f408b71f34477ae276f6b12c6"
        ],
        [
            "Definition divr_closed := 1 \\in S /\\ divr_2closed.",
            "VernacDefinition",
            "15655766eb38c6a0a8bc45910e444b702393f13c"
        ],
        [
            "Definition sdivr_closed := -1 \\in S /\\ divr_2closed.",
            "VernacDefinition",
            "43dd5e77b37e3058d55b4f0d7a245890bd8dd1f0"
        ],
        [
            "Definition divring_closed := [/\\ 1 \\in S, subr_2closed S & divr_2closed].",
            "VernacDefinition",
            "0432b5d0f15dfb3058fff4def796f5644a71bdaa"
        ],
        [
            "Lemma divr_closedV : divr_closed -> invr_closed.",
            "VernacStartTheoremProof",
            "bb3c69f7e5f8d4b9587414f8411dd16d18aef10c"
        ],
        [
            "by case=> S1 Sdiv x Sx; rewrite -[x^-1]mul1r Sdiv.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma divr_closedM : divr_closed -> mulr_closed S.",
            "VernacStartTheoremProof",
            "069c5d1fc71ee11e36c45847141937bfc5e61ad1"
        ],
        [
            "by case=> S1 Sdiv; split=> // x y Sx Sy; rewrite -[y]invrK -[y^-1]mul1r !Sdiv.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma sdivr_closed_div : sdivr_closed -> divr_closed.",
            "VernacStartTheoremProof",
            "35f77d6aa85174a29a79d1dbd42f9cbfd186e0cc"
        ],
        [
            "by case=> SN1 Sdiv; split; rewrite // -(divrr unitrN1) Sdiv.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma sdivr_closedM : sdivr_closed -> smulr_closed S.",
            "VernacStartTheoremProof",
            "62e8ca7e4f7a9c0000dc0ec942c8d993e76d322c"
        ],
        [
            "by move=> Sdiv; have [_ SM] := divr_closedM (sdivr_closed_div Sdiv); case: Sdiv.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma divring_closedBM : divring_closed -> subring_closed S.",
            "VernacStartTheoremProof",
            "0c83df9e939cb7ebb630f0c4c98eb6fc004c9bfb"
        ],
        [
            "by case=> S1 SB Sdiv; split=> //; case: divr_closedM.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma divring_closed_div : divring_closed -> sdivr_closed.",
            "VernacStartTheoremProof",
            "35a1ae0218924c5576865c19ed0a9c0d9135b80a"
        ],
        [
            "case=> S1 SB Sdiv; split; rewrite ?zmod_closedN //.",
            "VernacExtend",
            "7490335248ac33c0aa69698a687c1a5cbe9f554e"
        ],
        [
            "exact/subring_closedB/divring_closedBM.",
            "VernacExtend",
            "ce637ff86bafca5d8359473e8c02af644dcbdc43"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "End ClosedPredicates.",
            "VernacEndSegment",
            "6238d5ef0852f49433340e32287fd9e002b055ef"
        ],
        [
            "End UnitRingTheory.",
            "VernacEndSegment",
            "fbeeb66dc8f07fc863a01c5dce37f85d4eadb510"
        ],
        [
            "Arguments invrK {R}.",
            "VernacArguments",
            "883c135fadf64ddd57a49da830e7d5d61391a3b8"
        ],
        [
            "Arguments invr_inj {R} [x1 x2].",
            "VernacArguments",
            "1929204a58c431f83ab564f1aa3fdcbd260c2309"
        ],
        [
            "Section UnitRingMorphism.",
            "VernacBeginSection",
            "1fbdac13cca6e13c7cfce147fdfa7810bf690b85"
        ],
        [
            "Variables (R S : unitRingType) (f : {rmorphism R -> S}).",
            "VernacAssumption",
            "c966ff7b1ea3a8a48ccbdaaf1d5d6c826b7fc885"
        ],
        [
            "Lemma rmorph_unit x : x \\in unit -> f x \\in unit.",
            "VernacStartTheoremProof",
            "11ae933c78a1c50b25fe4b246c703ab16d9a0f2a"
        ],
        [
            "case/unitrP=> y [yx1 xy1]; apply/unitrP.",
            "VernacExtend",
            "d62e4c271de3f2a9ff5062b8b89d3c57d965c518"
        ],
        [
            "by exists (f y); rewrite -!rmorphM // yx1 xy1 rmorph1.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma rmorphV : {in unit, {morph f: x / x^-1}}.",
            "VernacStartTheoremProof",
            "3f1038809f7ac7079c473eac6d0dbf14baa71e9f"
        ],
        [
            "move=> x Ux; rewrite /= -[(f x)^-1]mul1r.",
            "VernacExtend",
            "057edeb0967475c7ea5e8c98c449ddc5613eddc1"
        ],
        [
            "by apply: (canRL (mulrK (rmorph_unit Ux))); rewrite -rmorphM mulVr ?rmorph1.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma rmorph_div x y : y \\in unit -> f (x / y) = f x / f y.",
            "VernacStartTheoremProof",
            "44b73bb28512ed2e19b1ff89939ef884b877c8f3"
        ],
        [
            "by move=> Uy; rewrite rmorphM rmorphV.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "End UnitRingMorphism.",
            "VernacEndSegment",
            "ae01237e6d7e110feb5d5cee9d22c7363ac45485"
        ],
        [
            "Module ComUnitRing.",
            "VernacDefineModule",
            "706b51f0cb9bf92d09296b7c1aed052a575f0166"
        ],
        [
            "Section Mixin.",
            "VernacBeginSection",
            "2522bcb01c265dd126d0fa79e72892a08957e427"
        ],
        [
            "Variables (R : comRingType) (unit : pred R) (inv : R -> R).",
            "VernacAssumption",
            "a09645e9b7592ea5bb5ff41bae388b8faef8f02a"
        ],
        [
            "Hypothesis mulVx : {in unit, left_inverse 1 inv *%R}.",
            "VernacAssumption",
            "3f4f4c62431a40804c6b1b6d828d5bd43555fada"
        ],
        [
            "Hypothesis unitPl : forall x y, y * x = 1 -> unit x.",
            "VernacAssumption",
            "b2c79930055650718f6c76e9ae373f94937d12ee"
        ],
        [
            "Fact mulC_mulrV : {in unit, right_inverse 1 inv *%R}.",
            "VernacStartTheoremProof",
            "0af274afc5d7263bb7519d024ed9e0d7ca616068"
        ],
        [
            "by move=> x Ux /=; rewrite mulrC mulVx.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Fact mulC_unitP x y : y * x = 1 /\\ x * y = 1 -> unit x.",
            "VernacStartTheoremProof",
            "571c14b497274f9bac0ecaab8b4a4e50bd8ba8af"
        ],
        [
            "by case=> yx _; apply: unitPl yx.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Definition Mixin := UnitRingMixin mulVx mulC_mulrV mulC_unitP.",
            "VernacDefinition",
            "e358c46c507a43b7544d1d2cb7413a9bd543a331"
        ],
        [
            "End Mixin.",
            "VernacEndSegment",
            "d77c610f43cecbb48863d0152b6ecb72970259c2"
        ],
        [
            "Section ClassDef.",
            "VernacBeginSection",
            "a5b792261e6c496f5a1a8d0f7da8c96156ca2fed"
        ],
        [
            "Record class_of (R : Type) : Type := Class { base : ComRing.class_of R; mixin : UnitRing.mixin_of (Ring.Pack base) }.",
            "VernacInductive",
            "8bb59482a89642e59f2ba0df4d7d364568bfc85b"
        ],
        [
            "Local Coercion base : class_of >-> ComRing.class_of.",
            "VernacCoercion",
            "9b109d76be312300da820eb0fd01829fae40e9b5"
        ],
        [
            "Definition base2 R m := UnitRing.Class (@mixin R m).",
            "VernacDefinition",
            "13f8f21f22d080c79b34c1920a05b320a9a49597"
        ],
        [
            "Local Coercion base2 : class_of >-> UnitRing.class_of.",
            "VernacCoercion",
            "fe83f39b95c4205ac6893b90be27a4f53a4ee2f3"
        ],
        [
            "Structure type := Pack {sort; _ : class_of sort}.",
            "VernacInductive",
            "42b0161295055637e72e97af35c3d44479cc946b"
        ],
        [
            "Local Coercion sort : type >-> Sortclass.",
            "VernacCoercion",
            "e4478cd37693106f84ed020bd073c4970dc87530"
        ],
        [
            "Variables (T : Type) (cT : type).",
            "VernacAssumption",
            "eb35f5737a32cba56acb24ac87490232dc2dfcb9"
        ],
        [
            "Definition class := let: Pack _ c as cT' := cT return class_of cT' in c.",
            "VernacDefinition",
            "0e4a80652d474f8010316ff26a5322b5207d82a3"
        ],
        [
            "Let xT := let: Pack T _ := cT in T.",
            "VernacDefinition",
            "0a87c77e3a5ac8febf0910b95d7b998b7cb9cf6d"
        ],
        [
            "Notation xclass := (class : class_of xT).",
            "VernacSyntacticDefinition",
            "e136614fedd7b331a23b54adad5b0bce11895ed4"
        ],
        [
            "Definition pack := fun bT b & phant_id (ComRing.class bT) (b : ComRing.class_of T) => fun mT m & phant_id (UnitRing.class mT) (@UnitRing.Class T b m) => Pack (@Class T b m).",
            "VernacDefinition",
            "68fb5451cb3d221b7115e8c652510614229f2dd7"
        ],
        [
            "Definition eqType := @Equality.Pack cT xclass.",
            "VernacDefinition",
            "6139f412b89e62ff13c9c707c885de4b39151e9d"
        ],
        [
            "Definition choiceType := @Choice.Pack cT xclass.",
            "VernacDefinition",
            "f62d3090382a5ea70b978e0633e0376c4558db55"
        ],
        [
            "Definition zmodType := @Zmodule.Pack cT xclass.",
            "VernacDefinition",
            "d292a93c19cc9e36e99db073c0c14c27655bcd85"
        ],
        [
            "Definition ringType := @Ring.Pack cT xclass.",
            "VernacDefinition",
            "8a9134d1dac21560b6c04dc7467c51b02f0db83e"
        ],
        [
            "Definition comRingType := @ComRing.Pack cT xclass.",
            "VernacDefinition",
            "7ae57e52d5bc541f3670f9768868f067c230ad65"
        ],
        [
            "Definition unitRingType := @UnitRing.Pack cT xclass.",
            "VernacDefinition",
            "2fc21101404f298267a4a84da270b73575f3bf98"
        ],
        [
            "Definition com_unitRingType := @UnitRing.Pack comRingType xclass.",
            "VernacDefinition",
            "5921d450acb9ef8e6492820466aea3d3cc80f85f"
        ],
        [
            "End ClassDef.",
            "VernacEndSegment",
            "bce1c8832045d8291c44a3fb67e9767782d2745b"
        ],
        [
            "Module Import Exports.",
            "VernacDefineModule",
            "f5a1035b94691e963f68c6f9e1df4c47bb9f27d8"
        ],
        [
            "Coercion base : class_of >-> ComRing.class_of.",
            "VernacCoercion",
            "e3b2dede93ca68dd5ef4097d64ea2196dae55023"
        ],
        [
            "Coercion mixin : class_of >-> UnitRing.mixin_of.",
            "VernacCoercion",
            "bdf755c93644d39227f1f786ac05a0dbee229d5e"
        ],
        [
            "Coercion base2 : class_of >-> UnitRing.class_of.",
            "VernacCoercion",
            "b810f32aea33cebab11ce660fb4bb1fcdf8fe4d9"
        ],
        [
            "Coercion sort : type >-> Sortclass.",
            "VernacCoercion",
            "9e1cbf06afa0d2731dbb8bfd6b9ae32be22a8ae7"
        ],
        [
            "Bind Scope ring_scope with sort.",
            "VernacBindScope",
            "ac04d07dda43f0036576b2a438f8490c7ac4d59b"
        ],
        [
            "Coercion eqType : type >-> Equality.type.",
            "VernacCoercion",
            "58308c67b5e73c9e004d57c486a5071598a25e8c"
        ],
        [
            "Canonical eqType.",
            "VernacCanonical",
            "dd1ac877a396f552e2a8f23e59be45903d8b15ad"
        ],
        [
            "Coercion choiceType : type >-> Choice.type.",
            "VernacCoercion",
            "bdc8d608f4b963a8606cd33ad18b1977a8bcb78d"
        ],
        [
            "Canonical choiceType.",
            "VernacCanonical",
            "af7a1759ddd13e2b7e4e1ce16b6a3595a77b5659"
        ],
        [
            "Coercion zmodType : type >-> Zmodule.type.",
            "VernacCoercion",
            "4ec9ca49e3551546d7d514a97127c47a11747e3a"
        ],
        [
            "Canonical zmodType.",
            "VernacCanonical",
            "9a6f278270af4b6ced100d8e0c90c7719a960a86"
        ],
        [
            "Coercion ringType : type >-> Ring.type.",
            "VernacCoercion",
            "3563a3bf802f370588b71df18917d551f221a05e"
        ],
        [
            "Canonical ringType.",
            "VernacCanonical",
            "b7d4c328ac58b23ee4b52bd787434621c20d2c4d"
        ],
        [
            "Coercion comRingType : type >-> ComRing.type.",
            "VernacCoercion",
            "0b68ec2f3c5c76d295167a623512d46ac31b80ad"
        ],
        [
            "Canonical comRingType.",
            "VernacCanonical",
            "30f9087081da845c9c545aeb8d7375204ed4f1b3"
        ],
        [
            "Coercion unitRingType : type >-> UnitRing.type.",
            "VernacCoercion",
            "f3d1399a2d1a8f93182c9b698d4a4a7d12624259"
        ],
        [
            "Canonical unitRingType.",
            "VernacCanonical",
            "5adf5dbcca23e501d2be7f60fe9ad3def13431b8"
        ],
        [
            "Canonical com_unitRingType.",
            "VernacCanonical",
            "8d5fbd3c5aebfe6b2ad82f061e19a78d7fd86c5c"
        ],
        [
            "Notation comUnitRingType := type.",
            "VernacSyntacticDefinition",
            "5cfa489285ba820c0d5e592c99a160283a769335"
        ],
        [
            "Notation ComUnitRingMixin := Mixin.",
            "VernacSyntacticDefinition",
            "6d709b149c09067aa491e565930b52c0a28de09e"
        ],
        [
            "Notation \"[ 'comUnitRingType' 'of' T ]\" := (@pack T _ _ id _ _ id) (at level 0, format \"[ 'comUnitRingType' 'of' T ]\") : form_scope.",
            "VernacNotation",
            "8feffa32813cc2825e4c69a4ec66c405694e8076"
        ],
        [
            "End Exports.",
            "VernacEndSegment",
            "71efedae7ccffd696e1ffe5d8ae6baa8a4484918"
        ],
        [
            "End ComUnitRing.",
            "VernacEndSegment",
            "c9a495f3b8daffdd0a8e8987f74b75d8873762da"
        ],
        [
            "Import ComUnitRing.Exports.",
            "VernacImport",
            "2230590c344bbaa156736153c8a2f27917835f78"
        ],
        [
            "Module UnitAlgebra.",
            "VernacDefineModule",
            "e5c91542d8b55150309196739ad1d642881078ab"
        ],
        [
            "Section ClassDef.",
            "VernacBeginSection",
            "a5b792261e6c496f5a1a8d0f7da8c96156ca2fed"
        ],
        [
            "Variable R : ringType.",
            "VernacAssumption",
            "103955c3e16ede32f173514da95e3006926aeccd"
        ],
        [
            "Record class_of (T : Type) : Type := Class { base : Algebra.class_of R T; mixin : GRing.UnitRing.mixin_of (Ring.Pack base) }.",
            "VernacInductive",
            "58e865ee8610b3e636ef5b9a9d8218b406ac9988"
        ],
        [
            "Definition base2 R m := UnitRing.Class (@mixin R m).",
            "VernacDefinition",
            "13f8f21f22d080c79b34c1920a05b320a9a49597"
        ],
        [
            "Local Coercion base : class_of >-> Algebra.class_of.",
            "VernacCoercion",
            "4257f37aaae47ea80545ebb577c87f979cb15fa4"
        ],
        [
            "Local Coercion base2 : class_of >-> UnitRing.class_of.",
            "VernacCoercion",
            "fe83f39b95c4205ac6893b90be27a4f53a4ee2f3"
        ],
        [
            "Structure type (phR : phant R) := Pack {sort; _ : class_of sort}.",
            "VernacInductive",
            "78bfdb22887f748fe58a15d412ea69b6a323083f"
        ],
        [
            "Local Coercion sort : type >-> Sortclass.",
            "VernacCoercion",
            "e4478cd37693106f84ed020bd073c4970dc87530"
        ],
        [
            "Variable (phR : phant R) (T : Type) (cT : type phR).",
            "VernacAssumption",
            "c29c1b47135afbce9a566505b9ed44f41969b316"
        ],
        [
            "Definition class := let: Pack _ c as cT' := cT return class_of cT' in c.",
            "VernacDefinition",
            "0e4a80652d474f8010316ff26a5322b5207d82a3"
        ],
        [
            "Let xT := let: Pack T _ := cT in T.",
            "VernacDefinition",
            "0a87c77e3a5ac8febf0910b95d7b998b7cb9cf6d"
        ],
        [
            "Notation xclass := (class : class_of xT).",
            "VernacSyntacticDefinition",
            "e136614fedd7b331a23b54adad5b0bce11895ed4"
        ],
        [
            "Definition pack := fun bT b & phant_id (@Algebra.class R phR bT) (b : Algebra.class_of R T) => fun mT m & phant_id (UnitRing.mixin (UnitRing.class mT)) m => Pack (Phant R) (@Class T b m).",
            "VernacDefinition",
            "5dde2dc54c41d274717c2480b533cea411c8c996"
        ],
        [
            "Definition eqType := @Equality.Pack cT xclass.",
            "VernacDefinition",
            "6139f412b89e62ff13c9c707c885de4b39151e9d"
        ],
        [
            "Definition choiceType := @Choice.Pack cT xclass.",
            "VernacDefinition",
            "f62d3090382a5ea70b978e0633e0376c4558db55"
        ],
        [
            "Definition zmodType := @Zmodule.Pack cT xclass.",
            "VernacDefinition",
            "d292a93c19cc9e36e99db073c0c14c27655bcd85"
        ],
        [
            "Definition ringType := @Ring.Pack cT xclass.",
            "VernacDefinition",
            "8a9134d1dac21560b6c04dc7467c51b02f0db83e"
        ],
        [
            "Definition unitRingType := @UnitRing.Pack cT xclass.",
            "VernacDefinition",
            "2fc21101404f298267a4a84da270b73575f3bf98"
        ],
        [
            "Definition lmodType := @Lmodule.Pack R phR cT xclass.",
            "VernacDefinition",
            "ce00637124e62ebbeefb88ddd20470c874821839"
        ],
        [
            "Definition lalgType := @Lalgebra.Pack R phR cT xclass.",
            "VernacDefinition",
            "0d72eb2daf3e070740253667bc21e7d02a71c627"
        ],
        [
            "Definition algType := @Algebra.Pack R phR cT xclass.",
            "VernacDefinition",
            "770f84b1d0ffb0fa11981b5dbb2e349abd669efd"
        ],
        [
            "Definition lmod_unitRingType := @Lmodule.Pack R phR unitRingType xclass.",
            "VernacDefinition",
            "9f5d2bd86c24d43ad56436c3d4d925fa3db73ec7"
        ],
        [
            "Definition lalg_unitRingType := @Lalgebra.Pack R phR unitRingType xclass.",
            "VernacDefinition",
            "e07a25db1351e41f540d9821f8ae676b04c14aec"
        ],
        [
            "Definition alg_unitRingType := @Algebra.Pack R phR unitRingType xclass.",
            "VernacDefinition",
            "c8c510e2ec2252f9aa39e379c4b7a01ccea1bcc5"
        ],
        [
            "End ClassDef.",
            "VernacEndSegment",
            "bce1c8832045d8291c44a3fb67e9767782d2745b"
        ],
        [
            "Module Exports.",
            "VernacDefineModule",
            "d4a1114ec53f746523a7dec57823f7f03e51fa24"
        ],
        [
            "Coercion base : class_of >-> Algebra.class_of.",
            "VernacCoercion",
            "2d796d85d696d79d2dda50708fa4d91e0910fa41"
        ],
        [
            "Coercion base2 : class_of >-> UnitRing.class_of.",
            "VernacCoercion",
            "b810f32aea33cebab11ce660fb4bb1fcdf8fe4d9"
        ],
        [
            "Coercion sort : type >-> Sortclass.",
            "VernacCoercion",
            "9e1cbf06afa0d2731dbb8bfd6b9ae32be22a8ae7"
        ],
        [
            "Bind Scope ring_scope with sort.",
            "VernacBindScope",
            "ac04d07dda43f0036576b2a438f8490c7ac4d59b"
        ],
        [
            "Coercion eqType : type >-> Equality.type.",
            "VernacCoercion",
            "58308c67b5e73c9e004d57c486a5071598a25e8c"
        ],
        [
            "Canonical eqType.",
            "VernacCanonical",
            "dd1ac877a396f552e2a8f23e59be45903d8b15ad"
        ],
        [
            "Coercion choiceType : type >-> Choice.type.",
            "VernacCoercion",
            "bdc8d608f4b963a8606cd33ad18b1977a8bcb78d"
        ],
        [
            "Canonical choiceType.",
            "VernacCanonical",
            "af7a1759ddd13e2b7e4e1ce16b6a3595a77b5659"
        ],
        [
            "Coercion zmodType : type >-> Zmodule.type.",
            "VernacCoercion",
            "4ec9ca49e3551546d7d514a97127c47a11747e3a"
        ],
        [
            "Canonical zmodType.",
            "VernacCanonical",
            "9a6f278270af4b6ced100d8e0c90c7719a960a86"
        ],
        [
            "Coercion ringType : type >-> Ring.type.",
            "VernacCoercion",
            "3563a3bf802f370588b71df18917d551f221a05e"
        ],
        [
            "Canonical ringType.",
            "VernacCanonical",
            "b7d4c328ac58b23ee4b52bd787434621c20d2c4d"
        ],
        [
            "Coercion unitRingType : type >-> UnitRing.type.",
            "VernacCoercion",
            "f3d1399a2d1a8f93182c9b698d4a4a7d12624259"
        ],
        [
            "Canonical unitRingType.",
            "VernacCanonical",
            "5adf5dbcca23e501d2be7f60fe9ad3def13431b8"
        ],
        [
            "Coercion lmodType : type >-> Lmodule.type.",
            "VernacCoercion",
            "9ff62a98b0f74b40c781351d02b7295e741840a6"
        ],
        [
            "Canonical lmodType.",
            "VernacCanonical",
            "2508a378d00cff399685e05d31698f84cdfa1eb3"
        ],
        [
            "Coercion lalgType : type >-> Lalgebra.type.",
            "VernacCoercion",
            "8dc4e0c848285451e0f7d1e23771ee90e2b84039"
        ],
        [
            "Canonical lalgType.",
            "VernacCanonical",
            "f31157c914d84396af2f285a028b530262ad3b8e"
        ],
        [
            "Coercion algType : type >-> Algebra.type.",
            "VernacCoercion",
            "968b284465d8da0f4d63a1d5790d12f4562414a8"
        ],
        [
            "Canonical algType.",
            "VernacCanonical",
            "c8e13ad37555d7e21f377ace252393df47527b98"
        ],
        [
            "Canonical lmod_unitRingType.",
            "VernacCanonical",
            "0feeac075ffcfb86ff196c50b24180a86658b71a"
        ],
        [
            "Canonical lalg_unitRingType.",
            "VernacCanonical",
            "e9f1027169447278bd515c907addc52a4cd5d772"
        ],
        [
            "Canonical alg_unitRingType.",
            "VernacCanonical",
            "925a094a17bcd7346533c1aa6020155638c63f66"
        ],
        [
            "Notation unitAlgType R := (type (Phant R)).",
            "VernacSyntacticDefinition",
            "80308938422949123cd8cfc84f9cf1106e2356b4"
        ],
        [
            "Notation \"[ 'unitAlgType' R 'of' T ]\" := (@pack _ (Phant R) T _ _ id _ _ id) (at level 0, format \"[ 'unitAlgType' R 'of' T ]\") : form_scope.",
            "VernacNotation",
            "f2fce0ea810a6a225e84dcd27e8ec3e4c6b7bfb4"
        ],
        [
            "End Exports.",
            "VernacEndSegment",
            "71efedae7ccffd696e1ffe5d8ae6baa8a4484918"
        ],
        [
            "End UnitAlgebra.",
            "VernacEndSegment",
            "42a388fb3e7ff2d28fbdc75a68dc748a141774af"
        ],
        [
            "Import UnitAlgebra.Exports.",
            "VernacImport",
            "ec4795d9f6a82cbbbd9c99cc1eb7de74cb7c9ec7"
        ],
        [
            "Section ComUnitRingTheory.",
            "VernacBeginSection",
            "74048013248d40f1d4ec626fd74b565b48e4c7fe"
        ],
        [
            "Variable R : comUnitRingType.",
            "VernacAssumption",
            "41cfe2068730b999f2c5d4b15e7cfda930d59847"
        ],
        [
            "Implicit Types x y : R.",
            "VernacReserve",
            "a698213249308a1927c4fb90fb6e1fbc35157508"
        ],
        [
            "Lemma unitrM x y : (x * y \\in unit) = (x \\in unit) && (y \\in unit).",
            "VernacStartTheoremProof",
            "7869070f7ed2bf17e4fdc4059d223926c81bc1aa"
        ],
        [
            "by apply: unitrM_comm; apply: mulrC.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma unitrPr x : reflect (exists y, x * y = 1) (x \\in unit).",
            "VernacStartTheoremProof",
            "fb61f1ddab0909904e3603b490abdaf9ef45019c"
        ],
        [
            "by apply: (iffP (unitrP x)) => [[y []] | [y]]; exists y; rewrite // mulrC.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma mulr1_eq x y : x * y = 1 -> x^-1 = y.",
            "VernacStartTheoremProof",
            "730d27c7f3ff7fd2dcd54eeb35b3abd0f7dc16c2"
        ],
        [
            "by move=> xy_eq1; rewrite -[LHS]mulr1 -xy_eq1; apply/mulKr/unitrPr; exists y.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma divr1_eq x y : x / y = 1 -> x = y.",
            "VernacStartTheoremProof",
            "fed5b3b191621521e056ef67fbdd380ed3587510"
        ],
        [
            "by move/mulr1_eq/invr_inj.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma divKr x : x \\is a unit -> {in unit, involutive (fun y => x / y)}.",
            "VernacStartTheoremProof",
            "b6d51579f026c7604b3ace217e37a337e3c95dcf"
        ],
        [
            "by move=> Ux y Uy; rewrite /= invrM ?unitrV // invrK mulrC divrK.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma expr_div_n x y n : (x / y) ^+ n = x ^+ n / y ^+ n.",
            "VernacStartTheoremProof",
            "c7238d049fc3739ece07185ef01740b66b6dad29"
        ],
        [
            "by rewrite exprMn exprVn.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Canonical regular_comUnitRingType := [comUnitRingType of R^o].",
            "VernacDefinition",
            "6a6e603385f4e52df42cdb1989769b8924dfce3e"
        ],
        [
            "Canonical regular_unitAlgType := [unitAlgType R of R^o].",
            "VernacDefinition",
            "02ef801efaa81bc73f537c26562997572ebce619"
        ],
        [
            "End ComUnitRingTheory.",
            "VernacEndSegment",
            "70e4604123f272d478b8d222c29375011eff5d15"
        ],
        [
            "Section UnitAlgebraTheory.",
            "VernacBeginSection",
            "7629277320d976337797f03346f5eb96c15e90e7"
        ],
        [
            "Variable (R : comUnitRingType) (A : unitAlgType R).",
            "VernacAssumption",
            "352cde5ab2532f0a586654df0c2a6890635588ad"
        ],
        [
            "Implicit Types (k : R) (x y : A).",
            "VernacReserve",
            "8b0802fe78fa92b9af11f5ec95abc0f5e160d725"
        ],
        [
            "Lemma scaler_injl : {in unit, @right_injective R A A *:%R}.",
            "VernacStartTheoremProof",
            "6eea31b43ccb6b744a3286794930808e8e3f2924"
        ],
        [
            "move=> k Uk x1 x2 Hx1x2.",
            "VernacExtend",
            "b1b2cb7a3a617cba67460b4eca1f04de3c1cc716"
        ],
        [
            "by rewrite -[x1]scale1r -(mulVr Uk) -scalerA Hx1x2 scalerA mulVr // scale1r.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma scaler_unit k x : k \\in unit -> (k *: x \\in unit) = (x \\in unit).",
            "VernacStartTheoremProof",
            "5fe3b71c320fe83dc52a4a4ec1e96bb77030c59e"
        ],
        [
            "move=> Uk; apply/idP/idP=> [Ukx | Ux]; apply/unitrP; last first.",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "exists (k^-1 *: x^-1).",
            "VernacExtend",
            "320feee5e579cc0d73b8835e39c58b42da95108b"
        ],
        [
            "by rewrite -!scalerAl -!scalerAr !scalerA !mulVr // !mulrV // scale1r.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "exists (k *: (k *: x)^-1); split.",
            "VernacExtend",
            "c30e210594ef0c666cebfe6a44c7057d4991ec07"
        ],
        [
            "apply: (mulrI Ukx).",
            "VernacExtend",
            "4bd6fa79b17bcd2bfb7af091fb325367a20385d6"
        ],
        [
            "by rewrite mulr1 mulrA -scalerAr mulrV // -scalerAl mul1r.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "apply: (mulIr Ukx).",
            "VernacExtend",
            "4bd6fa79b17bcd2bfb7af091fb325367a20385d6"
        ],
        [
            "by rewrite mul1r -mulrA -scalerAl mulVr // -scalerAr mulr1.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma invrZ k x : k \\in unit -> x \\in unit -> (k *: x)^-1 = k^-1 *: x^-1.",
            "VernacStartTheoremProof",
            "16bc49ebc555cbeb24fec91ff1fe09e8384b9e34"
        ],
        [
            "move=> Uk Ux; have Ukx: (k *: x \\in unit) by rewrite scaler_unit.",
            "VernacExtend",
            "ccd83c252dcbae3d56f3d057fcb8217878b51901"
        ],
        [
            "apply: (mulIr Ukx).",
            "VernacExtend",
            "4bd6fa79b17bcd2bfb7af091fb325367a20385d6"
        ],
        [
            "by rewrite mulVr // -scalerAl -scalerAr scalerA !mulVr // scale1r.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Section ClosedPredicates.",
            "VernacBeginSection",
            "867c96696ba4b124a23204102a22dbe3e9a8b988"
        ],
        [
            "Variables S : predPredType A.",
            "VernacAssumption",
            "3e17c683746ddb78242740391958a6c77f6d5755"
        ],
        [
            "Definition divalg_closed := [/\\ 1 \\in S, linear_closed S & divr_2closed S].",
            "VernacDefinition",
            "5504ea2b17c388a219aa0edb8cf732c0a85b4743"
        ],
        [
            "Lemma divalg_closedBdiv : divalg_closed -> divring_closed S.",
            "VernacStartTheoremProof",
            "49510e3cc6d9ee9014bd810580dcce6c50c6f6b8"
        ],
        [
            "by case=> S1 /linear_closedB.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma divalg_closedZ : divalg_closed -> subalg_closed S.",
            "VernacStartTheoremProof",
            "39933c09205c751ebc81aaa210ed463ae6f2af68"
        ],
        [
            "by case=> S1 Slin Sdiv; split=> //; have [] := @divr_closedM A S.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "End ClosedPredicates.",
            "VernacEndSegment",
            "6238d5ef0852f49433340e32287fd9e002b055ef"
        ],
        [
            "End UnitAlgebraTheory.",
            "VernacEndSegment",
            "8743226114fb9336df1d625435de6bd8b83b7b83"
        ],
        [
            "Module Pred.",
            "VernacDefineModule",
            "9c056a2247f81e2d67319a65fd1cf75e2c3ea723"
        ],
        [
            "Structure opp V S := Opp {opp_key : pred_key S; _ : @oppr_closed V S}.",
            "VernacInductive",
            "97dccae3ff2984d468e6538a20d979fc3de78e5b"
        ],
        [
            "Structure add V S := Add {add_key : pred_key S; _ : @addr_closed V S}.",
            "VernacInductive",
            "df97457fdf0af8182ea94eec846b00ffa7107fe3"
        ],
        [
            "Structure mul R S := Mul {mul_key : pred_key S; _ : @mulr_closed R S}.",
            "VernacInductive",
            "aafad224d46b8e1cc60b2d84adca088ac386311e"
        ],
        [
            "Structure zmod V S := Zmod {zmod_add : add S; _ : @oppr_closed V S}.",
            "VernacInductive",
            "d3f548786a9308f0317915a8af73e9689b71df0d"
        ],
        [
            "Structure semiring R S := Semiring {semiring_add : add S; _ : @mulr_closed R S}.",
            "VernacInductive",
            "42f86d0e2b9073efbb5a4b4ee11a243a0e298b46"
        ],
        [
            "Structure smul R S := Smul {smul_opp : opp S; _ : @mulr_closed R S}.",
            "VernacInductive",
            "3aef1f303c8fe261b602b01e0350e1eb306c55f7"
        ],
        [
            "Structure div R S := Div {div_mul : mul S; _ : @invr_closed R S}.",
            "VernacInductive",
            "a856b66a712f5f5dc0ab39962f7585a878aa9bcf"
        ],
        [
            "Structure submod R V S := Submod {submod_zmod : zmod S; _ : @scaler_closed R V S}.",
            "VernacInductive",
            "92b9f678cce3b169abee0f62cb13ef0db91404a8"
        ],
        [
            "Structure subring R S := Subring {subring_zmod : zmod S; _ : @mulr_closed R S}.",
            "VernacInductive",
            "3d9909f231e510d632786ee5a3629bfba73948bd"
        ],
        [
            "Structure sdiv R S := Sdiv {sdiv_smul : smul S; _ : @invr_closed R S}.",
            "VernacInductive",
            "68b186920c0c4a8274f0eda78c4a4ec571dfecc5"
        ],
        [
            "Structure subalg (R : ringType) (A : lalgType R) S := Subalg {subalg_ring : subring S; _ : @scaler_closed R A S}.",
            "VernacInductive",
            "2909d0296ee38f30891603529f1f2f2f3b54dd1e"
        ],
        [
            "Structure divring R S := Divring {divring_ring : subring S; _ : @invr_closed R S}.",
            "VernacInductive",
            "bb1d28882db48cc859ad72e5075d607f235b1592"
        ],
        [
            "Structure divalg (R : ringType) (A : unitAlgType R) S := Divalg {divalg_ring : divring S; _ : @scaler_closed R A S}.",
            "VernacInductive",
            "d16bf8b726303321fd628dd35a5f9ea84d4d3ce4"
        ],
        [
            "Section Subtyping.",
            "VernacBeginSection",
            "b8fad9075103cf0396a4553618a124bbd120cf55"
        ],
        [
            "Ltac done := case=> *; assumption.",
            "VernacExtend",
            "3c9b2fe14416f2d8904393d83284bd67bc31cea5"
        ],
        [
            "Fact zmod_oppr R S : @zmod R S -> oppr_closed S.",
            "VernacStartTheoremProof",
            "f85227f5dc8d81202c9f4f88f6b09a34ae6597b0"
        ],
        [
            "by [].",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Fact semiring_mulr R S : @semiring R S -> mulr_closed S.",
            "VernacStartTheoremProof",
            "09e9c3593019303fbd24aabf7af7784d4be07589"
        ],
        [
            "by [].",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Fact smul_mulr R S : @smul R S -> mulr_closed S.",
            "VernacStartTheoremProof",
            "f568b4dd36ed4f6a0fb1a8f5a20d6d9c7e847470"
        ],
        [
            "by [].",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Fact submod_scaler R V S : @submod R V S -> scaler_closed S.",
            "VernacStartTheoremProof",
            "fbffc25ec93245a6da819e97a9ca6754baffd8a4"
        ],
        [
            "by [].",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Fact subring_mulr R S : @subring R S -> mulr_closed S.",
            "VernacStartTheoremProof",
            "b84468ec0420914e7912f533b0c074d214202d4a"
        ],
        [
            "by [].",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Fact sdiv_invr R S : @sdiv R S -> invr_closed S.",
            "VernacStartTheoremProof",
            "614a78ab44887a9088446711fe34f6674953f1cd"
        ],
        [
            "by [].",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Fact subalg_scaler R A S : @subalg R A S -> scaler_closed S.",
            "VernacStartTheoremProof",
            "ed569324b01ee2c4ae607d91808369071992b200"
        ],
        [
            "by [].",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Fact divring_invr R S : @divring R S -> invr_closed S.",
            "VernacStartTheoremProof",
            "0ea96b6c593987fdea5d71d52e6c0813765ca6a7"
        ],
        [
            "by [].",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Fact divalg_scaler R A S : @divalg R A S -> scaler_closed S.",
            "VernacStartTheoremProof",
            "5648355b1346f350e75ff18b4436b4ba663b04f6"
        ],
        [
            "by [].",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Definition zmod_opp R S (addS : @zmod R S) := Opp (add_key (zmod_add addS)) (zmod_oppr addS).",
            "VernacDefinition",
            "fdc3bd9ff6aed332327ea9b9c161ae0fea144661"
        ],
        [
            "Definition semiring_mul R S (ringS : @semiring R S) := Mul (add_key (semiring_add ringS)) (semiring_mulr ringS).",
            "VernacDefinition",
            "b27988bcadff4a7f0abd6c7f23861bf873cb999c"
        ],
        [
            "Definition smul_mul R S (mulS : @smul R S) := Mul (opp_key (smul_opp mulS)) (smul_mulr mulS).",
            "VernacDefinition",
            "3a5610670baabb3c432895af1adc3cc1c2089192"
        ],
        [
            "Definition subring_semi R S (ringS : @subring R S) := Semiring (zmod_add (subring_zmod ringS)) (subring_mulr ringS).",
            "VernacDefinition",
            "de04ecf8f33f9214328937fcf1c9b0afb73ea4ea"
        ],
        [
            "Definition subring_smul R S (ringS : @subring R S) := Smul (zmod_opp (subring_zmod ringS)) (subring_mulr ringS).",
            "VernacDefinition",
            "a73c44473fc65ce84c704f109e0be1e711dc6f8c"
        ],
        [
            "Definition sdiv_div R S (divS : @sdiv R S) := Div (smul_mul (sdiv_smul divS)) (sdiv_invr divS).",
            "VernacDefinition",
            "dd0cece0a8a4a84e215429f51361ba96ce9d9220"
        ],
        [
            "Definition subalg_submod R A S (algS : @subalg R A S) := Submod (subring_zmod (subalg_ring algS)) (subalg_scaler algS).",
            "VernacDefinition",
            "2a36f71903cae1764880446a0604884326a4b3d1"
        ],
        [
            "Definition divring_sdiv R S (ringS : @divring R S) := Sdiv (subring_smul (divring_ring ringS)) (divring_invr ringS).",
            "VernacDefinition",
            "6841f4726b4bad48f0484ed85d5120c75c3d566e"
        ],
        [
            "Definition divalg_alg R A S (algS : @divalg R A S) := Subalg (divring_ring (divalg_ring algS)) (divalg_scaler algS).",
            "VernacDefinition",
            "0bac9f5138fbbaf67d918eff0dd535facf946d39"
        ],
        [
            "End Subtyping.",
            "VernacEndSegment",
            "13007a8c52b495dda30fbd19c2a27e7fe4f5ac92"
        ],
        [
            "Section Extensionality.",
            "VernacBeginSection",
            "fef2c0825b072d51bff37065769e1dd7dcbe3238"
        ],
        [
            "Lemma opp_ext (U : zmodType) S k (kS : @keyed_pred U S k) : oppr_closed kS -> oppr_closed S.",
            "VernacStartTheoremProof",
            "3cbf3ba4cb93951fe5e759ab7f697b69894e1d9b"
        ],
        [
            "by move=> oppS x; rewrite -!(keyed_predE kS); apply: oppS.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma add_ext (U : zmodType) S k (kS : @keyed_pred U S k) : addr_closed kS -> addr_closed S.",
            "VernacStartTheoremProof",
            "c1ecb9817f7074b61321fad3ac626e0bd1d2e391"
        ],
        [
            "by case=> S0 addS; split=> [|x y]; rewrite -!(keyed_predE kS) //; apply: addS.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma mul_ext (R : ringType) S k (kS : @keyed_pred R S k) : mulr_closed kS -> mulr_closed S.",
            "VernacStartTheoremProof",
            "c4f1554a937fe1a034a655a58668caed2468a7c9"
        ],
        [
            "by case=> S1 mulS; split=> [|x y]; rewrite -!(keyed_predE kS) //; apply: mulS.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma scale_ext (R : ringType) (U : lmodType R) S k (kS : @keyed_pred U S k) : scaler_closed kS -> scaler_closed S.",
            "VernacStartTheoremProof",
            "e15d22927675e8c004b7561b731c8a74add3be89"
        ],
        [
            "by move=> linS a x; rewrite -!(keyed_predE kS); apply: linS.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma inv_ext (R : unitRingType) S k (kS : @keyed_pred R S k) : invr_closed kS -> invr_closed S.",
            "VernacStartTheoremProof",
            "2649930de52621805c1a506785c4f3df4236fc64"
        ],
        [
            "by move=> invS x; rewrite -!(keyed_predE kS); apply: invS.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "End Extensionality.",
            "VernacEndSegment",
            "35bfb1e3b301b5c235f0f3e32da85761f43fe8ae"
        ],
        [
            "Module Default.",
            "VernacDefineModule",
            "153240f185ee7c559f24ab51a66ef4525cd3190d"
        ],
        [
            "Definition opp V S oppS := @Opp V S (DefaultPredKey S) oppS.",
            "VernacDefinition",
            "ee6e9d9ac8d7137ddbf894ff5761da1b4c32f0e6"
        ],
        [
            "Definition add V S addS := @Add V S (DefaultPredKey S) addS.",
            "VernacDefinition",
            "dc4198211612ad40af7be0fc6669c0efa6e6c776"
        ],
        [
            "Definition mul R S mulS := @Mul R S (DefaultPredKey S) mulS.",
            "VernacDefinition",
            "94a74a187afa7996c1fef4f073aac2b7b3895819"
        ],
        [
            "Definition zmod V S addS oppS := @Zmod V S (add addS) oppS.",
            "VernacDefinition",
            "db4f7afe182ff14ce51c6d80f2fb7df3c8355967"
        ],
        [
            "Definition semiring R S addS mulS := @Semiring R S (add addS) mulS.",
            "VernacDefinition",
            "1068f46270b28df158c6ab3c9a51178da13a687f"
        ],
        [
            "Definition smul R S oppS mulS := @Smul R S (opp oppS) mulS.",
            "VernacDefinition",
            "70de6b743ebcbd1d89c20e4ea0a3c3099c3601d1"
        ],
        [
            "Definition div R S mulS invS := @Div R S (mul mulS) invS.",
            "VernacDefinition",
            "293187c4d1b1414e7e8f10e7201fe5cced5e0377"
        ],
        [
            "Definition submod R V S addS oppS linS := @Submod R V S (zmod addS oppS) linS.",
            "VernacDefinition",
            "c45464e951654510b81debc399e9611fb07c9c39"
        ],
        [
            "Definition subring R S addS oppS mulS := @Subring R S (zmod addS oppS) mulS.",
            "VernacDefinition",
            "6c0f46eb174c46dd5c68408d1d9639a3bdd3c035"
        ],
        [
            "Definition sdiv R S oppS mulS invS := @Sdiv R S (smul oppS mulS) invS.",
            "VernacDefinition",
            "daa3653884a01917ad39d806e00dcf559de3bf98"
        ],
        [
            "Definition subalg R A S addS oppS mulS linS := @Subalg R A S (subring addS oppS mulS) linS.",
            "VernacDefinition",
            "ddf4a353f50c612817479d2813f26c766aa8f053"
        ],
        [
            "Definition divring R S addS oppS mulS invS := @Divring R S (subring addS oppS mulS) invS.",
            "VernacDefinition",
            "4312262d4025b6db8c42aa979902fa1417ba0204"
        ],
        [
            "Definition divalg R A S addS oppS mulS invS linS := @Divalg R A S (divring addS oppS mulS invS) linS.",
            "VernacDefinition",
            "42f170671cabae5ee91dc8153eea53bf1487fc0c"
        ],
        [
            "End Default.",
            "VernacEndSegment",
            "fed6e9e365a2daf38d4c8d2533e99171606fdea5"
        ],
        [
            "Module Exports.",
            "VernacDefineModule",
            "d4a1114ec53f746523a7dec57823f7f03e51fa24"
        ],
        [
            "Notation oppr_closed := oppr_closed.",
            "VernacSyntacticDefinition",
            "d48179a6321a773e2401506625899f5346b516eb"
        ],
        [
            "Notation addr_closed := addr_closed.",
            "VernacSyntacticDefinition",
            "02f5d2c75e260d08022158fee7003450aa304a28"
        ],
        [
            "Notation mulr_closed := mulr_closed.",
            "VernacSyntacticDefinition",
            "67e3481658a9d05170493a8de05e397839caceb6"
        ],
        [
            "Notation zmod_closed := zmod_closed.",
            "VernacSyntacticDefinition",
            "0164f9b3ed8a343915a96f1d39a79e80664ee722"
        ],
        [
            "Notation smulr_closed := smulr_closed.",
            "VernacSyntacticDefinition",
            "9a73b0d0b641ef07fd9c854b264caa93782f6a0e"
        ],
        [
            "Notation invr_closed := invr_closed.",
            "VernacSyntacticDefinition",
            "9222c074568a726c04bf704ff717f23350ef5f63"
        ],
        [
            "Notation divr_closed := divr_closed.",
            "VernacSyntacticDefinition",
            "6910a396e3f3101e72d83654bad5b4f1cc8a0fc4"
        ],
        [
            "Notation scaler_closed := scaler_closed.",
            "VernacSyntacticDefinition",
            "048e449292d0bd73a8eb62fa36a2a3d8204cd29a"
        ],
        [
            "Notation linear_closed := linear_closed.",
            "VernacSyntacticDefinition",
            "acd7d8c2f0bef7ac2911cc6b70bcc74e315fdc04"
        ],
        [
            "Notation submod_closed := submod_closed.",
            "VernacSyntacticDefinition",
            "3178be83447730c5be2597d9b09f9e649f375f03"
        ],
        [
            "Notation semiring_closed := semiring_closed.",
            "VernacSyntacticDefinition",
            "664d6386150fa7b5ef8582af3363cf4546e1619d"
        ],
        [
            "Notation subring_closed := subring_closed.",
            "VernacSyntacticDefinition",
            "0fd10a496630d1aff620129d28ced0d19f8e99c5"
        ],
        [
            "Notation sdivr_closed := sdivr_closed.",
            "VernacSyntacticDefinition",
            "1a66c4a3311feb40f796b32702d9761d8f98ed82"
        ],
        [
            "Notation subalg_closed := subalg_closed.",
            "VernacSyntacticDefinition",
            "25cd6842b335333005025f083571f03b7becee48"
        ],
        [
            "Notation divring_closed := divring_closed.",
            "VernacSyntacticDefinition",
            "654fb6cbe8502aad7d4e73fbc883fbbc884d38fe"
        ],
        [
            "Notation divalg_closed := divalg_closed.",
            "VernacSyntacticDefinition",
            "d969b11f690008f470300eabfa1fdfd3daa87477"
        ],
        [
            "Coercion zmod_closedD : zmod_closed >-> addr_closed.",
            "VernacCoercion",
            "e1c977dbafcd5b960f6236e0db7494905c6574f5"
        ],
        [
            "Coercion zmod_closedN : zmod_closed >-> oppr_closed.",
            "VernacCoercion",
            "d1f4043ec375d1e4b0967e9014743703cc011ead"
        ],
        [
            "Coercion smulr_closedN : smulr_closed >-> oppr_closed.",
            "VernacCoercion",
            "f4c48ce0d501accdd34eff51a5fb804904a01b43"
        ],
        [
            "Coercion smulr_closedM : smulr_closed >-> mulr_closed.",
            "VernacCoercion",
            "2edca2370feaddcb312e73c0e10d782f5cef02c0"
        ],
        [
            "Coercion divr_closedV : divr_closed >-> invr_closed.",
            "VernacCoercion",
            "2321e146ea58dfc15567e7ef717671ae49b558ac"
        ],
        [
            "Coercion divr_closedM : divr_closed >-> mulr_closed.",
            "VernacCoercion",
            "7de43a46c9a663aa326d185858d264aaf3be87d6"
        ],
        [
            "Coercion submod_closedZ : submod_closed >-> scaler_closed.",
            "VernacCoercion",
            "76120e4807f2e49e39719b66573d7d74df4a9202"
        ],
        [
            "Coercion submod_closedB : submod_closed >-> zmod_closed.",
            "VernacCoercion",
            "eb1a01757fa3003388936a4c9b53e0732db584a9"
        ],
        [
            "Coercion semiring_closedD : semiring_closed >-> addr_closed.",
            "VernacCoercion",
            "445ce0ca9fe785548c3db8fe254fe5d6a372e32f"
        ],
        [
            "Coercion semiring_closedM : semiring_closed >-> mulr_closed.",
            "VernacCoercion",
            "5c2a673c3a9ef5f6f4e175c39fbf6c9dada30e6a"
        ],
        [
            "Coercion subring_closedB : subring_closed >-> zmod_closed.",
            "VernacCoercion",
            "c12d2a53c42109fb04ff8d87233fca55ed20d52f"
        ],
        [
            "Coercion subring_closedM : subring_closed >-> smulr_closed.",
            "VernacCoercion",
            "7995f186892049ed08c9625bc96e5dfb1080786e"
        ],
        [
            "Coercion subring_closed_semi : subring_closed >-> semiring_closed.",
            "VernacCoercion",
            "d6b211a73fd954dd2cb71558cd049de328a4ca52"
        ],
        [
            "Coercion sdivr_closedM : sdivr_closed >-> smulr_closed.",
            "VernacCoercion",
            "dba2b71b99b2575c9aea0a28deb6588fc94a0cb9"
        ],
        [
            "Coercion sdivr_closed_div : sdivr_closed >-> divr_closed.",
            "VernacCoercion",
            "e3c876be8889f63ceb4969ef0cbb27d09497c508"
        ],
        [
            "Coercion subalg_closedZ : subalg_closed >-> submod_closed.",
            "VernacCoercion",
            "f2cecf94e7f8894ace8efabd1f96e338291f4e04"
        ],
        [
            "Coercion subalg_closedBM : subalg_closed >-> subring_closed.",
            "VernacCoercion",
            "0cd3f54c21613e3b21ecdbe084da696b455f39a0"
        ],
        [
            "Coercion divring_closedBM : divring_closed >-> subring_closed.",
            "VernacCoercion",
            "e9eedd96d073413602adb867245d8511177b174b"
        ],
        [
            "Coercion divring_closed_div : divring_closed >-> sdivr_closed.",
            "VernacCoercion",
            "ec3f0b38992c4426d46a22c1e9eb85d83960dee2"
        ],
        [
            "Coercion divalg_closedZ : divalg_closed >-> subalg_closed.",
            "VernacCoercion",
            "ff91a47c225b9ee2a940ee67b25a81ab86fb4d30"
        ],
        [
            "Coercion divalg_closedBdiv : divalg_closed >-> divring_closed.",
            "VernacCoercion",
            "bf599f5d2683aa15132aa3417fcf8d5bde74300a"
        ],
        [
            "Coercion opp_key : opp >-> pred_key.",
            "VernacCoercion",
            "04b7a8d8444468a75a6debe23455af9b2e9110b2"
        ],
        [
            "Coercion add_key : add >-> pred_key.",
            "VernacCoercion",
            "621b01e6108ea6a99c411f5499f2cabf5b30b86a"
        ],
        [
            "Coercion mul_key : mul >-> pred_key.",
            "VernacCoercion",
            "9d201f7ea119e81e32cefb23aa170b67877ad4e6"
        ],
        [
            "Coercion zmod_opp : zmod >-> opp.",
            "VernacCoercion",
            "f8883e49fc825e704ce58fdeec2e3b0022d18776"
        ],
        [
            "Canonical zmod_opp.",
            "VernacCanonical",
            "465b6a4e5abffe7bc1ed61eab3411dca96e8a882"
        ],
        [
            "Coercion zmod_add : zmod >-> add.",
            "VernacCoercion",
            "710074d3654ab05f9512d32505ee037cd38f7a9b"
        ],
        [
            "Coercion semiring_add : semiring >-> add.",
            "VernacCoercion",
            "041d8d9ed02a05b92229df47a408d213e4a23c6d"
        ],
        [
            "Coercion semiring_mul : semiring >-> mul.",
            "VernacCoercion",
            "e75d65568d3c13347f66c77d8d680e2113b9d891"
        ],
        [
            "Canonical semiring_mul.",
            "VernacCanonical",
            "9696c07a47cfd0d9ba2fd652979f10f9c445c18a"
        ],
        [
            "Coercion smul_opp : smul >-> opp.",
            "VernacCoercion",
            "29a235a423b398b97dc259eea3ae9408c7df01e0"
        ],
        [
            "Coercion smul_mul : smul >-> mul.",
            "VernacCoercion",
            "dc0e7c04747446b7236f7a8287b5e168773d8454"
        ],
        [
            "Canonical smul_mul.",
            "VernacCanonical",
            "c9c50bb7ae5d14d63e841735578a2e0207542c4f"
        ],
        [
            "Coercion div_mul : div >-> mul.",
            "VernacCoercion",
            "618beb79a3a512549bcf7e0ef21dc545de9f18b2"
        ],
        [
            "Coercion submod_zmod : submod >-> zmod.",
            "VernacCoercion",
            "6354db6acb4dbd7831e4a2fa10f585642b3f3b6c"
        ],
        [
            "Coercion subring_zmod : subring >-> zmod.",
            "VernacCoercion",
            "ae2e7d5985cbeb2c9e6ced82e4166ce4bee9fe9f"
        ],
        [
            "Coercion subring_semi : subring >-> semiring.",
            "VernacCoercion",
            "8ed991d24d6221420ae43b5485afde765bf9a768"
        ],
        [
            "Canonical subring_semi.",
            "VernacCanonical",
            "4e97a0bbacb40ad5b707f7c05974ec76f2784900"
        ],
        [
            "Coercion subring_smul : subring >-> smul.",
            "VernacCoercion",
            "08fe35c276c1e42b90884a296375d08129af3dd6"
        ],
        [
            "Canonical subring_smul.",
            "VernacCanonical",
            "497a22ba1b0a7c0a954acdbea8a2609e147ce46f"
        ],
        [
            "Coercion sdiv_smul : sdiv >-> smul.",
            "VernacCoercion",
            "5468ca3b106324fd6f83ab276b677a2b0e87446c"
        ],
        [
            "Coercion sdiv_div : sdiv >-> div.",
            "VernacCoercion",
            "bd06661e9f3b5746a8f9f234bd6d2180f97a2e21"
        ],
        [
            "Canonical sdiv_div.",
            "VernacCanonical",
            "c346c22e13496365fa3b339c3418830e6c83d8cd"
        ],
        [
            "Coercion subalg_submod : subalg >-> submod.",
            "VernacCoercion",
            "e6e4a206c586a9073d1cce4e167f1f7af043aca7"
        ],
        [
            "Canonical subalg_submod.",
            "VernacCanonical",
            "42418140795309bc8287881e824e4b8de5febe09"
        ],
        [
            "Coercion subalg_ring : subalg >-> subring.",
            "VernacCoercion",
            "68d5fd11443ea502049f68705bd475ac3139a81b"
        ],
        [
            "Coercion divring_ring : divring >-> subring.",
            "VernacCoercion",
            "2100fde5262985085353bf37a1d4cb79be33fcc1"
        ],
        [
            "Coercion divring_sdiv : divring >-> sdiv.",
            "VernacCoercion",
            "993d9ea614f847957cafb838732da905c194397f"
        ],
        [
            "Canonical divring_sdiv.",
            "VernacCanonical",
            "e1f611d5f725e5625dd4c823ca3ebe2275fc99b0"
        ],
        [
            "Coercion divalg_alg : divalg >-> subalg.",
            "VernacCoercion",
            "228d6b1a2e7cb20b9428d8de5f7f58deecd61094"
        ],
        [
            "Canonical divalg_alg.",
            "VernacCanonical",
            "563d72f3ced61d6a7e61f37d2b6033f8b2581cd2"
        ],
        [
            "Coercion divalg_ring : divalg >-> divring.",
            "VernacCoercion",
            "b0cb9e0b4ace055cc11040d10693308c2c5c2b3e"
        ],
        [
            "Notation opprPred := opp.",
            "VernacSyntacticDefinition",
            "d3c48fe581c00dda5d08b1568f1bf3aa50fa43e7"
        ],
        [
            "Notation addrPred := add.",
            "VernacSyntacticDefinition",
            "74a45749c09d5c4e432966cf0cd822866358b384"
        ],
        [
            "Notation mulrPred := mul.",
            "VernacSyntacticDefinition",
            "1438927fb19d14f7daa59a6dfc457637ec8083c4"
        ],
        [
            "Notation zmodPred := zmod.",
            "VernacSyntacticDefinition",
            "de2d516fa432ff3e0f1f50a71ac7111d746555b1"
        ],
        [
            "Notation semiringPred := semiring.",
            "VernacSyntacticDefinition",
            "eff72fc88ca81478948e7851b661bd3b141f269d"
        ],
        [
            "Notation smulrPred := smul.",
            "VernacSyntacticDefinition",
            "27fae42ee93b4a2e0e92825d7cddda9d80bce963"
        ],
        [
            "Notation divrPred := div.",
            "VernacSyntacticDefinition",
            "2b18bbc7dfa6e834274e70177889a54e75a9d2cb"
        ],
        [
            "Notation submodPred := submod.",
            "VernacSyntacticDefinition",
            "798b289e54c8ef5f3d9397dc3b1cb97af8a5091d"
        ],
        [
            "Notation subringPred := subring.",
            "VernacSyntacticDefinition",
            "c78cbb58dd6a395621321ce9a7093b7de627ad40"
        ],
        [
            "Notation sdivrPred := sdiv.",
            "VernacSyntacticDefinition",
            "6381b0fa54c2f3d40f12f38d858bf444e899ed4b"
        ],
        [
            "Notation subalgPred := subalg.",
            "VernacSyntacticDefinition",
            "16062e0c136ee27b787c8ed21d7053855a166730"
        ],
        [
            "Notation divringPred := divring.",
            "VernacSyntacticDefinition",
            "77b69a637871356a9bc5ba929ef94d46450407e9"
        ],
        [
            "Notation divalgPred := divalg.",
            "VernacSyntacticDefinition",
            "ba417d3cf769e99387b8b1a3f9ebfd56beecad9e"
        ],
        [
            "Definition OpprPred U S k kS NkS := Opp k (@opp_ext U S k kS NkS).",
            "VernacDefinition",
            "cf6badef097234f9e2ae9e3826f91e5e0fffac33"
        ],
        [
            "Definition AddrPred U S k kS DkS := Add k (@add_ext U S k kS DkS).",
            "VernacDefinition",
            "ef56271f3ebdee5e75ab3eb4a7384f5a86dc9d6a"
        ],
        [
            "Definition MulrPred R S k kS MkS := Mul k (@mul_ext R S k kS MkS).",
            "VernacDefinition",
            "b4f38bad3d52031a12e5d41788a21e8974eacd8a"
        ],
        [
            "Definition ZmodPred U S k kS NkS := Zmod k (@opp_ext U S k kS NkS).",
            "VernacDefinition",
            "c65a935a035378ceb07697249573a85062bccbf2"
        ],
        [
            "Definition SemiringPred R S k kS MkS := Semiring k (@mul_ext R S k kS MkS).",
            "VernacDefinition",
            "08151d4732f194b25817cf143549615ff1c384c9"
        ],
        [
            "Definition SmulrPred R S k kS MkS := Smul k (@mul_ext R S k kS MkS).",
            "VernacDefinition",
            "4be60fe0556e4c22070644d183246c29bdae21eb"
        ],
        [
            "Definition DivrPred R S k kS VkS := Div k (@inv_ext R S k kS VkS).",
            "VernacDefinition",
            "1dd92eaf9d630e57d92ae2bece303410a4922601"
        ],
        [
            "Definition SubmodPred R U S k kS ZkS := Submod k (@scale_ext R U S k kS ZkS).",
            "VernacDefinition",
            "c48ff1d0e8de6929bfdc7a2efefe921bb6c14923"
        ],
        [
            "Definition SubringPred R S k kS MkS := Subring k (@mul_ext R S k kS MkS).",
            "VernacDefinition",
            "225171041bbefb4e62a6a10fc7c38238e134ce4c"
        ],
        [
            "Definition SdivrPred R S k kS VkS := Sdiv k (@inv_ext R S k kS VkS).",
            "VernacDefinition",
            "8ea87dafe7fa41060a87c4af468691ab78ec812f"
        ],
        [
            "Definition SubalgPred (R : ringType) (A : lalgType R) S k kS ZkS := Subalg k (@scale_ext R A S k kS ZkS).",
            "VernacDefinition",
            "d6fb305635639392b0fb620fde34ab285dfaa1c5"
        ],
        [
            "Definition DivringPred R S k kS VkS := Divring k (@inv_ext R S k kS VkS).",
            "VernacDefinition",
            "caa66d0498fbbcab19fc0f24f0752103195ea57d"
        ],
        [
            "Definition DivalgPred (R : ringType) (A : unitAlgType R) S k kS ZkS := Divalg k (@scale_ext R A S k kS ZkS).",
            "VernacDefinition",
            "924c9e84bb0bb44a3505477aed0c35e5739ba248"
        ],
        [
            "End Exports.",
            "VernacEndSegment",
            "71efedae7ccffd696e1ffe5d8ae6baa8a4484918"
        ],
        [
            "End Pred.",
            "VernacEndSegment",
            "33c66513b346eab6ca79f2dd6383d895dd72ea2a"
        ],
        [
            "Import Pred.Exports.",
            "VernacImport",
            "3917feae560a7af83a852405ed61a10b802419ae"
        ],
        [
            "Module DefaultPred.",
            "VernacDefineModule",
            "ba550c7648b44f01e0e14e41e5e85304745c137d"
        ],
        [
            "Canonical Pred.Default.opp.",
            "VernacCanonical",
            "a0d68fb0dc0931bc3aad57224e1522f61ca391b9"
        ],
        [
            "Canonical Pred.Default.add.",
            "VernacCanonical",
            "73d298ab571c623550a3bd0350812a66a65de139"
        ],
        [
            "Canonical Pred.Default.mul.",
            "VernacCanonical",
            "c216010874c18ce6c1d9bc5aa1a1b59a35d27665"
        ],
        [
            "Canonical Pred.Default.zmod.",
            "VernacCanonical",
            "0394038ef1cd73f1701eaee47f676a38843e2235"
        ],
        [
            "Canonical Pred.Default.semiring.",
            "VernacCanonical",
            "be30b06ceb3e6f56f13e2f766c4387134f567563"
        ],
        [
            "Canonical Pred.Default.smul.",
            "VernacCanonical",
            "07404a74d90ab491f77a128f803f5494dc43458e"
        ],
        [
            "Canonical Pred.Default.div.",
            "VernacCanonical",
            "437a86bcae8ea177cc65cce53cd37beb0256eb3f"
        ],
        [
            "Canonical Pred.Default.submod.",
            "VernacCanonical",
            "6eb38413e7fd9165e05e9b83c0d56d69a483e22f"
        ],
        [
            "Canonical Pred.Default.subring.",
            "VernacCanonical",
            "67b4a8d53429658b5582d50fa58e1018e56f9531"
        ],
        [
            "Canonical Pred.Default.sdiv.",
            "VernacCanonical",
            "2e97a97570ddc51fb9b23b1ce4de3e728d645826"
        ],
        [
            "Canonical Pred.Default.subalg.",
            "VernacCanonical",
            "1783740394da3e5108dfe30916ec336c673f0c47"
        ],
        [
            "Canonical Pred.Default.divring.",
            "VernacCanonical",
            "db9cd5956cdafca9812ae4467aefeed167fc73eb"
        ],
        [
            "Canonical Pred.Default.divalg.",
            "VernacCanonical",
            "bcdac349ef529a4ba75cc8f46729f06bfa00dea8"
        ],
        [
            "End DefaultPred.",
            "VernacEndSegment",
            "8131889ae941c101be2aa174e8665054feb95235"
        ],
        [
            "Section ZmodulePred.",
            "VernacBeginSection",
            "d68b58ff4a9ff6fbf10b1462b2db33a16fb59097"
        ],
        [
            "Variables (V : zmodType) (S : predPredType V).",
            "VernacAssumption",
            "c849017470d262978f29d669bf8d31e75529953a"
        ],
        [
            "Section Add.",
            "VernacBeginSection",
            "2ed14f7f1ad853e4f3f0cb096277c692eceb9417"
        ],
        [
            "Variables (addS : addrPred S) (kS : keyed_pred addS).",
            "VernacAssumption",
            "3061887804bc70b2f0e0c47e2aea2d6577674b1e"
        ],
        [
            "Lemma rpred0D : addr_closed kS.",
            "VernacStartTheoremProof",
            "12092f16bb4f5638a7b8cb46cc98f6983ab31014"
        ],
        [
            "by split=> [|x y]; rewrite !keyed_predE; case: addS => _ [_]//; apply.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma rpred0 : 0 \\in kS.",
            "VernacStartTheoremProof",
            "f73ad861bd7efb2bc716fedcad9f38511d0c98ba"
        ],
        [
            "by case: rpred0D.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma rpredD : {in kS &, forall u v, u + v \\in kS}.",
            "VernacStartTheoremProof",
            "f668498fa3303152ee37c947e81e7f57a91b5a58"
        ],
        [
            "by case: rpred0D.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma rpred_sum I r (P : pred I) F : (forall i, P i -> F i \\in kS) -> \\sum_(i <- r | P i) F i \\in kS.",
            "VernacStartTheoremProof",
            "dff7a8a8f09739bde145b04b0061f132d90e4638"
        ],
        [
            "by move=> IH; elim/big_ind: _; [apply: rpred0 | apply: rpredD |].",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma rpredMn n : {in kS, forall u, u *+ n \\in kS}.",
            "VernacStartTheoremProof",
            "d175140c6bdc060e50de681862fc9435a8493ff1"
        ],
        [
            "by move=> u Su; rewrite -(card_ord n) -sumr_const rpred_sum.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "End Add.",
            "VernacEndSegment",
            "b8e94d4921ed3e2aaeaaa2cb5717ea846a213d62"
        ],
        [
            "Section Opp.",
            "VernacBeginSection",
            "7eb6458130be04514a0491c28bcf5bfef35c558f"
        ],
        [
            "Variables (oppS : opprPred S) (kS : keyed_pred oppS).",
            "VernacAssumption",
            "5ae4df0737ee07fe413540992ba5473dc2e65965"
        ],
        [
            "Lemma rpredNr : oppr_closed kS.",
            "VernacStartTheoremProof",
            "90e821e0e09b19b0f56008fa832b0bec7fd08bee"
        ],
        [
            "by move=> x; rewrite !keyed_predE; case: oppS => _; apply.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma rpredN : {mono -%R: u / u \\in kS}.",
            "VernacStartTheoremProof",
            "dc15e8be05285d3fee8d03fd63da1120477c4695"
        ],
        [
            "by move=> u; apply/idP/idP=> /rpredNr; rewrite ?opprK; apply.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "End Opp.",
            "VernacEndSegment",
            "fbecc9d6bb680229bcbb8eadf799371ade51ec3a"
        ],
        [
            "Section Sub.",
            "VernacBeginSection",
            "9de344d6a7d3e671a25ff64ade01242e739c6450"
        ],
        [
            "Variables (subS : zmodPred S) (kS : keyed_pred subS).",
            "VernacAssumption",
            "ec466a52f5c31514ddcbbddf7999326cf56b3f20"
        ],
        [
            "Lemma rpredB : {in kS &, forall u v, u - v \\in kS}.",
            "VernacStartTheoremProof",
            "1aee4668a960901bc33d04926051d91e31deb410"
        ],
        [
            "by move=> u v Su Sv; rewrite /= rpredD ?rpredN.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma rpredMNn n : {in kS, forall u, u *- n \\in kS}.",
            "VernacStartTheoremProof",
            "8b2e86642190b86e6403c02c1e7d1a39fc9f33a9"
        ],
        [
            "by move=> u Su; rewrite /= rpredN rpredMn.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma rpredDr x y : x \\in kS -> (y + x \\in kS) = (y \\in kS).",
            "VernacStartTheoremProof",
            "6f54332cbe06151cdd2f5e06fac18d11a3ddafab"
        ],
        [
            "move=> Sx; apply/idP/idP=> [Sxy | /rpredD-> //].",
            "VernacExtend",
            "d6ebf3361f380a12d5c2c9bbb7ea363132c48b36"
        ],
        [
            "by rewrite -(addrK x y) rpredB.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma rpredDl x y : x \\in kS -> (x + y \\in kS) = (y \\in kS).",
            "VernacStartTheoremProof",
            "769072fa381aed47fc0dc069a7de1eba6515b75d"
        ],
        [
            "by rewrite addrC; apply: rpredDr.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma rpredBr x y : x \\in kS -> (y - x \\in kS) = (y \\in kS).",
            "VernacStartTheoremProof",
            "5e87a3d212cd99aff873c48cd4cfe5267fb9cdcc"
        ],
        [
            "by rewrite -rpredN; apply: rpredDr.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma rpredBl x y : x \\in kS -> (x - y \\in kS) = (y \\in kS).",
            "VernacStartTheoremProof",
            "303f955554e240e75b89f46a6c89617d24082a6c"
        ],
        [
            "by rewrite -(rpredN _ y); apply: rpredDl.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "End Sub.",
            "VernacEndSegment",
            "681f38c35b77c042dd4ab4bba0d0b29f5f9866dd"
        ],
        [
            "End ZmodulePred.",
            "VernacEndSegment",
            "d6f91a8f502d83df0f54b6e6a50bd36f26c6cdd3"
        ],
        [
            "Section RingPred.",
            "VernacBeginSection",
            "ea3c181b11e61ec63c8b7c7c46c13a7c5c84bf55"
        ],
        [
            "Variables (R : ringType) (S : predPredType R).",
            "VernacAssumption",
            "b4b74cb3894702812027c88da547ee8b250cbd68"
        ],
        [
            "Lemma rpredMsign (oppS : opprPred S) (kS : keyed_pred oppS) n x : ((-1) ^+ n * x \\in kS) = (x \\in kS).",
            "VernacStartTheoremProof",
            "2d7171dd62436ba666c9ae5b23aefb474d99352f"
        ],
        [
            "by rewrite -signr_odd mulr_sign; case: ifP => // _; rewrite rpredN.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Section Mul.",
            "VernacBeginSection",
            "4e3a40737f00d4a89f1ad24bd721c80525b3bc93"
        ],
        [
            "Variables (mulS : mulrPred S) (kS : keyed_pred mulS).",
            "VernacAssumption",
            "5aa0ff1e46c39561a8e83942e0dbe4ab36cddef1"
        ],
        [
            "Lemma rpred1M : mulr_closed kS.",
            "VernacStartTheoremProof",
            "26c5342ac1c3f0fb86941a7ff0bab79e1fe370bd"
        ],
        [
            "by split=> [|x y]; rewrite !keyed_predE; case: mulS => _ [_] //; apply.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma rpred1 : 1 \\in kS.",
            "VernacStartTheoremProof",
            "b23f49ddcae4af180cd713a88a30541a04151369"
        ],
        [
            "by case: rpred1M.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma rpredM : {in kS &, forall u v, u * v \\in kS}.",
            "VernacStartTheoremProof",
            "83b6dafa9b95780286be77bdfe4b966d7f4194f9"
        ],
        [
            "by case: rpred1M.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma rpred_prod I r (P : pred I) F : (forall i, P i -> F i \\in kS) -> \\prod_(i <- r | P i) F i \\in kS.",
            "VernacStartTheoremProof",
            "3d848bbb6251c7cc043fd75e5748b7a8eaf03f38"
        ],
        [
            "by move=> IH; elim/big_ind: _; [apply: rpred1 | apply: rpredM |].",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma rpredX n : {in kS, forall u, u ^+ n \\in kS}.",
            "VernacStartTheoremProof",
            "39cbdc964f6ca79469b40882057bf028a0fbeed6"
        ],
        [
            "by move=> u Su; rewrite -(card_ord n) -prodr_const rpred_prod.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "End Mul.",
            "VernacEndSegment",
            "f4c1828069b879244fd298506775511f3e2cf7a9"
        ],
        [
            "Lemma rpred_nat (rngS : semiringPred S) (kS : keyed_pred rngS) n : n%:R \\in kS.",
            "VernacStartTheoremProof",
            "620aeabc051e2dfbb96c43bb5f80f72ed144cc86"
        ],
        [
            "by rewrite rpredMn ?rpred1.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma rpredN1 (mulS : smulrPred S) (kS : keyed_pred mulS) : -1 \\in kS.",
            "VernacStartTheoremProof",
            "1c4b755aad962b57e36e126f3f53006287e994b0"
        ],
        [
            "by rewrite rpredN rpred1.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma rpred_sign (mulS : smulrPred S) (kS : keyed_pred mulS) n : (-1) ^+ n \\in kS.",
            "VernacStartTheoremProof",
            "a4ef27d06c37423822205fc0fea16c3064862d15"
        ],
        [
            "by rewrite rpredX ?rpredN1.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "End RingPred.",
            "VernacEndSegment",
            "e1b6f3e50300bdd1988ad1d35613eb623ea2dfb8"
        ],
        [
            "Section LmodPred.",
            "VernacBeginSection",
            "c41b1231aafdfe237796fedd302f31bc4549e28d"
        ],
        [
            "Variables (R : ringType) (V : lmodType R) (S : predPredType V).",
            "VernacAssumption",
            "d767df171e4fb723773e6e29e5ee50ad9ee7fa2f"
        ],
        [
            "Lemma rpredZsign (oppS : opprPred S) (kS : keyed_pred oppS) n u : ((-1) ^+ n *: u \\in kS) = (u \\in kS).",
            "VernacStartTheoremProof",
            "38962fd5dcf721b0f02ac1a230cc8cb91cabc85f"
        ],
        [
            "by rewrite -signr_odd scaler_sign fun_if if_arg rpredN if_same.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma rpredZnat (addS : addrPred S) (kS : keyed_pred addS) n : {in kS, forall u, n%:R *: u \\in kS}.",
            "VernacStartTheoremProof",
            "12d2427c3030dfcf08ebc9bce406929bc3f3c2ee"
        ],
        [
            "by move=> u Su; rewrite /= scaler_nat rpredMn.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma rpredZ (linS : submodPred S) (kS : keyed_pred linS) : scaler_closed kS.",
            "VernacStartTheoremProof",
            "b17b0200c6fae5544e71ad488058e440b49dfcf4"
        ],
        [
            "by move=> a u; rewrite !keyed_predE; case: {kS}linS => _; apply.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "End LmodPred.",
            "VernacEndSegment",
            "4f58c3294bd4f22c306026e9dc20dee23a2a8891"
        ],
        [
            "Section UnitRingPred.",
            "VernacBeginSection",
            "75440efa827ce58623cd10140b26f64f081281a6"
        ],
        [
            "Variable R : unitRingType.",
            "VernacAssumption",
            "7091a2a91a14247c9bb358aacf762b043d2cb667"
        ],
        [
            "Section Div.",
            "VernacBeginSection",
            "c2d0178bab0ab43fcbf7db712bce6c4a9341ca17"
        ],
        [
            "Variables (S : predPredType R) (divS : divrPred S) (kS : keyed_pred divS).",
            "VernacAssumption",
            "3f95c158ebf1eb14aa1a80822538da208da8b36a"
        ],
        [
            "Lemma rpredVr x : x \\in kS -> x^-1 \\in kS.",
            "VernacStartTheoremProof",
            "8c94a2534d52cfa9e6763f8a2d813d85037c7c2a"
        ],
        [
            "by rewrite !keyed_predE; case: divS x.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma rpredV x : (x^-1 \\in kS) = (x \\in kS).",
            "VernacStartTheoremProof",
            "a290a3500496588b728aa4eca007ed0a28562424"
        ],
        [
            "by apply/idP/idP=> /rpredVr; rewrite ?invrK.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma rpred_div : {in kS &, forall x y, x / y \\in kS}.",
            "VernacStartTheoremProof",
            "12bda09cc3f855506aeed45d06b64a61a4cb56f0"
        ],
        [
            "by move=> x y Sx Sy; rewrite /= rpredM ?rpredV.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma rpredXN n : {in kS, forall x, x ^- n \\in kS}.",
            "VernacStartTheoremProof",
            "fffbd2833e999c2e6527153f61c474b43c3fae20"
        ],
        [
            "by move=> x Sx; rewrite /= rpredV rpredX.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma rpredMl x y : x \\in kS -> x \\is a unit-> (x * y \\in kS) = (y \\in kS).",
            "VernacStartTheoremProof",
            "aa3e6bd954fcc35a641d2bd8fd434d5c0d04f705"
        ],
        [
            "move=> Sx Ux; apply/idP/idP=> [Sxy | /(rpredM Sx)-> //].",
            "VernacExtend",
            "d6ebf3361f380a12d5c2c9bbb7ea363132c48b36"
        ],
        [
            "by rewrite -(mulKr Ux y); rewrite rpredM ?rpredV.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma rpredMr x y : x \\in kS -> x \\is a unit -> (y * x \\in kS) = (y \\in kS).",
            "VernacStartTheoremProof",
            "08c1a2c8b4bc674588dd9f3882aa7899e0f7663c"
        ],
        [
            "move=> Sx Ux; apply/idP/idP=> [Sxy | /rpredM-> //].",
            "VernacExtend",
            "d6ebf3361f380a12d5c2c9bbb7ea363132c48b36"
        ],
        [
            "by rewrite -(mulrK Ux y); rewrite rpred_div.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma rpred_divr x y : x \\in kS -> x \\is a unit -> (y / x \\in kS) = (y \\in kS).",
            "VernacStartTheoremProof",
            "b93c423de4df7ca3ed5f849c778314c8ed83bcb7"
        ],
        [
            "by rewrite -rpredV -unitrV; apply: rpredMr.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma rpred_divl x y : x \\in kS -> x \\is a unit -> (x / y \\in kS) = (y \\in kS).",
            "VernacStartTheoremProof",
            "c6dee58876e6e4b27546f1799d2523e80303cb32"
        ],
        [
            "by rewrite -(rpredV y); apply: rpredMl.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "End Div.",
            "VernacEndSegment",
            "775cf3f699d7aa9a040034481b8b1b01a41550f9"
        ],
        [
            "Fact unitr_sdivr_closed : @sdivr_closed R unit.",
            "VernacStartTheoremProof",
            "6e659de62b66885b2a349faf4e58863a7461176d"
        ],
        [
            "by split=> [|x y Ux Uy]; rewrite ?unitrN1 // unitrMl ?unitrV.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Canonical unit_opprPred := OpprPred unitr_sdivr_closed.",
            "VernacDefinition",
            "373651ad651bd619bb0cb5c1c76fe7df024ed8b2"
        ],
        [
            "Canonical unit_mulrPred := MulrPred unitr_sdivr_closed.",
            "VernacDefinition",
            "71c4b6f2f6e7c6d65c48123cbbc1fe9edb542753"
        ],
        [
            "Canonical unit_divrPred := DivrPred unitr_sdivr_closed.",
            "VernacDefinition",
            "fa5e498b10ea3b676698b48d8f04f8b1655d65b2"
        ],
        [
            "Canonical unit_smulrPred := SmulrPred unitr_sdivr_closed.",
            "VernacDefinition",
            "40a91631b9031c2ecc7c59a5d44de8c5a5c330e0"
        ],
        [
            "Canonical unit_sdivrPred := SdivrPred unitr_sdivr_closed.",
            "VernacDefinition",
            "48336c60f4b48bd1ae2bfd9363df6b6b0e16679d"
        ],
        [
            "Implicit Type x : R.",
            "VernacReserve",
            "b8d5cc8667b55ed31a1422a334fba4e69548af40"
        ],
        [
            "Lemma unitrN x : (- x \\is a unit) = (x \\is a unit).",
            "VernacStartTheoremProof",
            "b70ff6ef47a4a95232933ee5c67846a2b9c73ea5"
        ],
        [
            "exact: rpredN.",
            "VernacExtend",
            "ce637ff86bafca5d8359473e8c02af644dcbdc43"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma invrN x : (- x)^-1 = - x^-1.",
            "VernacStartTheoremProof",
            "087604b04003a4fef0e9a4ab1bb92022f03496a0"
        ],
        [
            "have [Ux | U'x] := boolP (x \\is a unit); last by rewrite !invr_out ?unitrN.",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "by rewrite -mulN1r invrM ?unitrN1 // invrN1 mulrN1.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma invr_signM n x : ((-1) ^+ n * x)^-1 = (-1) ^+ n * x^-1.",
            "VernacStartTheoremProof",
            "80cbe5e5e9efdbb4482e864278fa70e05953b342"
        ],
        [
            "by rewrite -signr_odd !mulr_sign; case: ifP => // _; rewrite invrN.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma divr_signM (b1 b2 : bool) x1 x2: ((-1) ^+ b1 * x1) / ((-1) ^+ b2 * x2) = (-1) ^+ (b1 (+) b2) * (x1 / x2).",
            "VernacStartTheoremProof",
            "46f2275246e41c03d70444afa15e9bd8a0baaf47"
        ],
        [
            "by rewrite invr_signM mulr_signM.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "End UnitRingPred.",
            "VernacEndSegment",
            "266677153ecb5f64d10d19cfddd75f5278813230"
        ],
        [
            "Section TermDef.",
            "VernacBeginSection",
            "7c4a9a417ddf1d1902185b8c4707fd7e97fdb94d"
        ],
        [
            "Variable R : Type.",
            "VernacAssumption",
            "ab8b7c03c13a438d85be3477064b5f670ea3b2a7"
        ],
        [
            "Inductive term : Type := | Var of nat | Const of R | NatConst of nat | Add of term & term | Opp of term | NatMul of term & nat | Mul of term & term | Inv of term | Exp of term & nat.",
            "VernacInductive",
            "44c66db5096a44ddeccadac62330d6e74457e13b"
        ],
        [
            "Inductive formula : Type := | Bool of bool | Equal of term & term | Unit of term | And of formula & formula | Or of formula & formula | Implies of formula & formula | Not of formula | Exists of nat & formula | Forall of nat & formula.",
            "VernacInductive",
            "b8bda8c825a660b36850330a063e7778c839c42e"
        ],
        [
            "End TermDef.",
            "VernacEndSegment",
            "99e805cbe1798350393a24fbd62513c4bddb65e1"
        ],
        [
            "Bind Scope term_scope with term.",
            "VernacBindScope",
            "9fac6bbd2768157eb78410370d731c0ac77cef1f"
        ],
        [
            "Bind Scope term_scope with formula.",
            "VernacBindScope",
            "2b842525ada6f6145ed64898f67c2d2a09769631"
        ],
        [
            "Arguments Add {R} t1%T t2%T.",
            "VernacArguments",
            "499a8e8ef246618cb89e3282ab159834d50347a2"
        ],
        [
            "Arguments Opp {R} t1%T.",
            "VernacArguments",
            "911a40e2b9009782f0c9ff5947a0f06c4aacd006"
        ],
        [
            "Arguments NatMul {R} t1%T n%N.",
            "VernacArguments",
            "23a4562d17fbcb46dc85cfb015dca2d297d4d743"
        ],
        [
            "Arguments Mul {R} t1%T t2%T.",
            "VernacArguments",
            "aa6dd56395dcfc1fe1d30e812c0128ea8f4e39a8"
        ],
        [
            "Arguments Inv {R} t1%T.",
            "VernacArguments",
            "39c96ec9d1467d5f69b5e36b3a5f9cbf250356d5"
        ],
        [
            "Arguments Exp {R} t1%T n%N.",
            "VernacArguments",
            "0f84f98cdbae71c0fbf1c770946e71d209a3fe34"
        ],
        [
            "Arguments Equal {R} t1%T t2%T.",
            "VernacArguments",
            "754aedfb827961c09784b718ac032808add70046"
        ],
        [
            "Arguments Unit {R} t1%T.",
            "VernacArguments",
            "abf1a509325ab699fc65eca00ab7d73bd401a4b2"
        ],
        [
            "Arguments And {R} f1%T f2%T.",
            "VernacArguments",
            "2dd8c231d6f9853094b9a2d2b80df2d1193efeef"
        ],
        [
            "Arguments Or {R} f1%T f2%T.",
            "VernacArguments",
            "97c18f27c749cb7a3903a07722f2f1111dd2a724"
        ],
        [
            "Arguments Implies {R} f1%T f2%T.",
            "VernacArguments",
            "02b0614f1d1d48f4a453393fd4d5f0b19125f23a"
        ],
        [
            "Arguments Not {R} f1%T.",
            "VernacArguments",
            "cc6ebf7abedd708a5a62cc0a2c4983a39593b1ec"
        ],
        [
            "Arguments Exists {R} i%N f1%T.",
            "VernacArguments",
            "e7555909c54e445f71b005d931af0b2c2d529e1b"
        ],
        [
            "Arguments Forall {R} i%N f1%T.",
            "VernacArguments",
            "acad14dc038596e3d527a917dd6d532f179a8ad5"
        ],
        [
            "Arguments Bool {R} b.",
            "VernacArguments",
            "6d3bb369a8136d172e9a33795321e0054360af3d"
        ],
        [
            "Arguments Const {R} x.",
            "VernacArguments",
            "10e34340f165e3fe4806be4dcdb894e35e538f1d"
        ],
        [
            "Notation True := (Bool true).",
            "VernacSyntacticDefinition",
            "47f391aa168c9ace4f8642de46ff8591cb356d77"
        ],
        [
            "Notation False := (Bool false).",
            "VernacSyntacticDefinition",
            "d53dc6a1c1e1b6a01576e10284fe857e14d82222"
        ],
        [
            "Local Notation \"''X_' i\" := (Var _ i) : term_scope.",
            "VernacNotation",
            "e8d11fe6c1731bbf3753e6322f9b8e35912ea07e"
        ],
        [
            "Local Notation \"n %:R\" := (NatConst _ n) : term_scope.",
            "VernacNotation",
            "aef105520868a209e5a34ac2f7fa6a051d81ca53"
        ],
        [
            "Local Notation \"x %:T\" := (Const x) : term_scope.",
            "VernacNotation",
            "106fd29172fffd1488bf43eea82b93ee6538ada3"
        ],
        [
            "Local Notation \"0\" := 0%:R%T : term_scope.",
            "VernacNotation",
            "e53a1466013e2fca1faffb279bf2fdda7b846306"
        ],
        [
            "Local Notation \"1\" := 1%:R%T : term_scope.",
            "VernacNotation",
            "5cf8ef86e657bbc8c167a60953ea1edb5f240c1e"
        ],
        [
            "Local Infix \"+\" := Add : term_scope.",
            "VernacInfix",
            "f158edccc493878f7a5fe0784e7876c77186b8ec"
        ],
        [
            "Local Notation \"- t\" := (Opp t) : term_scope.",
            "VernacNotation",
            "ac83e21c4beb12623c4de7f99663a85ec552fbc0"
        ],
        [
            "Local Notation \"t - u\" := (Add t (- u)) : term_scope.",
            "VernacNotation",
            "4f72a7929bbeea2f692a29d2e3381648d7307d88"
        ],
        [
            "Local Infix \"*\" := Mul : term_scope.",
            "VernacInfix",
            "77ac6ae5ce5f76aa5436d7ee625a28bbb29483a0"
        ],
        [
            "Local Infix \"*+\" := NatMul : term_scope.",
            "VernacInfix",
            "df47dc07c5fd32c4f85d1c59dd9c2d37e61e3a5a"
        ],
        [
            "Local Notation \"t ^-1\" := (Inv t) : term_scope.",
            "VernacNotation",
            "bca79fcf7fae030452ab6519e5e82a4462658405"
        ],
        [
            "Local Notation \"t / u\" := (Mul t u^-1) : term_scope.",
            "VernacNotation",
            "8a014eccfcfb746ba1e26d74223173b22216296f"
        ],
        [
            "Local Infix \"^+\" := Exp : term_scope.",
            "VernacInfix",
            "cc674555eb55096fa238d601b72e1c446967085e"
        ],
        [
            "Local Infix \"==\" := Equal : term_scope.",
            "VernacInfix",
            "05f462eb4e86a53114b1c22c7497e88b2523e784"
        ],
        [
            "Local Infix \"/\\\" := And : term_scope.",
            "VernacInfix",
            "2b52109eaae0ca9bdff068b2eae748d14955b0dc"
        ],
        [
            "Local Infix \"\\/\" := Or : term_scope.",
            "VernacInfix",
            "e95c51da7b44e57956ffdaa71c37074faa9ae0fb"
        ],
        [
            "Local Infix \"==>\" := Implies : term_scope.",
            "VernacInfix",
            "87aef4001b814c5137c76e90eb90fe76a99a6328"
        ],
        [
            "Local Notation \"~ f\" := (Not f) : term_scope.",
            "VernacNotation",
            "928cccdd38261a55f101370e3ea12907c70e3044"
        ],
        [
            "Local Notation \"x != y\" := (Not (x == y)) : term_scope.",
            "VernacNotation",
            "260cf6430121f8de0fa1de0ed13febb3545ec190"
        ],
        [
            "Local Notation \"''exists' ''X_' i , f\" := (Exists i f) : term_scope.",
            "VernacNotation",
            "f7531555f60afbc0adf4fb71fb15d5fc3cebad3a"
        ],
        [
            "Local Notation \"''forall' ''X_' i , f\" := (Forall i f) : term_scope.",
            "VernacNotation",
            "a75698cb31f2782c453b57665faaaa668f5632ee"
        ],
        [
            "Section Substitution.",
            "VernacBeginSection",
            "b7d6fa10634785670e99033cf5b4f8efcd9c0673"
        ],
        [
            "Variable R : Type.",
            "VernacAssumption",
            "ab8b7c03c13a438d85be3477064b5f670ea3b2a7"
        ],
        [
            "Fixpoint tsubst (t : term R) (s : nat * term R) := match t with | 'X_i => if i == s.1 then s.2 else t | _%:T | _%:R => t | t1 + t2 => tsubst t1 s + tsubst t2 s | - t1 => - tsubst t1 s | t1 *+ n => tsubst t1 s *+ n | t1 * t2 => tsubst t1 s * tsubst t2 s | t1^-1 => (tsubst t1 s)^-1 | t1 ^+ n => tsubst t1 s ^+ n end%T.",
            "VernacFixpoint",
            "f979938d60796f76ee0be83541a5c7f2f1b3e178"
        ],
        [
            "Fixpoint fsubst (f : formula R) (s : nat * term R) := match f with | Bool _ => f | t1 == t2 => tsubst t1 s == tsubst t2 s | Unit t1 => Unit (tsubst t1 s) | f1 /\\ f2 => fsubst f1 s /\\ fsubst f2 s | f1 \\/ f2 => fsubst f1 s \\/ fsubst f2 s | f1 ==> f2 => fsubst f1 s ==> fsubst f2 s | ~ f1 => ~ fsubst f1 s | ('exists 'X_i, f1) => 'exists 'X_i, if i == s.1 then f1 else fsubst f1 s | ('forall 'X_i, f1) => 'forall 'X_i, if i == s.1 then f1 else fsubst f1 s end%T.",
            "VernacFixpoint",
            "fe4f47f6e408a8c35d516643ca8cd1ba92539c02"
        ],
        [
            "End Substitution.",
            "VernacEndSegment",
            "f9426696e714319e42c6de126b7f0271a0328ad1"
        ],
        [
            "Section EvalTerm.",
            "VernacBeginSection",
            "c18e5bff260d42f0ecb259376b65d3ac7647c030"
        ],
        [
            "Variable R : unitRingType.",
            "VernacAssumption",
            "7091a2a91a14247c9bb358aacf762b043d2cb667"
        ],
        [
            "Fixpoint eval (e : seq R) (t : term R) {struct t} : R := match t with | ('X_i)%T => e`_i | (x%:T)%T => x | (n%:R)%T => n%:R | (t1 + t2)%T => eval e t1 + eval e t2 | (- t1)%T => - eval e t1 | (t1 *+ n)%T => eval e t1 *+ n | (t1 * t2)%T => eval e t1 * eval e t2 | t1^-1%T => (eval e t1)^-1 | (t1 ^+ n)%T => eval e t1 ^+ n end.",
            "VernacFixpoint",
            "874679cbcb51817da1ecdf67ff8fa6b20a1435f2"
        ],
        [
            "Definition same_env (e e' : seq R) := nth 0 e =1 nth 0 e'.",
            "VernacDefinition",
            "2eb5a76c82a2f0db4739f89d5827d8fffc1afef3"
        ],
        [
            "Lemma eq_eval e e' t : same_env e e' -> eval e t = eval e' t.",
            "VernacStartTheoremProof",
            "719a21e0d7a540f234f10ce851c75c764b21d48b"
        ],
        [
            "by move=> eq_e; elim: t => //= t1 -> // t2 ->.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma eval_tsubst e t s : eval e (tsubst t s) = eval (set_nth 0 e s.1 (eval e s.2)) t.",
            "VernacStartTheoremProof",
            "5614dc2b7ba5125accd954b49ee1df13088065fb"
        ],
        [
            "case: s => i u; elim: t => //=; do 2?[move=> ? -> //] => j.",
            "VernacExtend",
            "58b3fa15c8632d89a426c1550da6d1e6e29a238b"
        ],
        [
            "by rewrite nth_set_nth /=; case: (_ == _).",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Fixpoint holds (e : seq R) (f : formula R) {struct f} : Prop := match f with | Bool b => b | (t1 == t2)%T => eval e t1 = eval e t2 | Unit t1 => eval e t1 \\in unit | (f1 /\\ f2)%T => holds e f1 /\\ holds e f2 | (f1 \\/ f2)%T => holds e f1 \\/ holds e f2 | (f1 ==> f2)%T => holds e f1 -> holds e f2 | (~ f1)%T => ~ holds e f1 | ('exists 'X_i, f1)%T => exists x, holds (set_nth 0 e i x) f1 | ('forall 'X_i, f1)%T => forall x, holds (set_nth 0 e i x) f1 end.",
            "VernacFixpoint",
            "9df46ba16cecda1664b04a465cebd5f3371394d5"
        ],
        [
            "Lemma same_env_sym e e' : same_env e e' -> same_env e' e.",
            "VernacStartTheoremProof",
            "cb7233348c72b30f664104efd5ef745b816096a2"
        ],
        [
            "exact: fsym.",
            "VernacExtend",
            "ce637ff86bafca5d8359473e8c02af644dcbdc43"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma eq_holds e e' f : same_env e e' -> holds e f -> holds e' f.",
            "VernacStartTheoremProof",
            "47c5da9789108402bc1cba9b86456e07c367d021"
        ],
        [
            "pose sv := set_nth (0 : R).",
            "VernacExtend",
            "3c5f04de94609049d978298aa02ff35fb35ea7c7"
        ],
        [
            "have eq_i i v e1 e2: same_env e1 e2 -> same_env (sv e1 i v) (sv e2 i v).",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "by move=> eq_e j; rewrite !nth_set_nth /= eq_e.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "elim: f e e' => //=.",
            "VernacExtend",
            "e686a1895f1799b840b76242f931100819a9ad6c"
        ],
        [
            "-",
            "VernacBullet",
            "581cab4bf49fa4b495e569bbda96fc8d28fddcc0"
        ],
        [
            "by move=> t1 t2 e e' eq_e; rewrite !(eq_eval _ eq_e).",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "-",
            "VernacBullet",
            "581cab4bf49fa4b495e569bbda96fc8d28fddcc0"
        ],
        [
            "by move=> t e e' eq_e; rewrite (eq_eval _ eq_e).",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "-",
            "VernacBullet",
            "581cab4bf49fa4b495e569bbda96fc8d28fddcc0"
        ],
        [
            "by move=> f1 IH1 f2 IH2 e e' eq_e; move/IH2: (eq_e); move/IH1: eq_e; tauto.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "-",
            "VernacBullet",
            "581cab4bf49fa4b495e569bbda96fc8d28fddcc0"
        ],
        [
            "by move=> f1 IH1 f2 IH2 e e' eq_e; move/IH2: (eq_e); move/IH1: eq_e; tauto.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "-",
            "VernacBullet",
            "581cab4bf49fa4b495e569bbda96fc8d28fddcc0"
        ],
        [
            "by move=> f1 IH1 f2 IH2 e e' eq_e f12; move/IH1: (same_env_sym eq_e); eauto.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "-",
            "VernacBullet",
            "581cab4bf49fa4b495e569bbda96fc8d28fddcc0"
        ],
        [
            "by move=> f1 IH1 e e'; move/same_env_sym; move/IH1; tauto.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "-",
            "VernacBullet",
            "581cab4bf49fa4b495e569bbda96fc8d28fddcc0"
        ],
        [
            "by move=> i f1 IH1 e e'; move/(eq_i i)=> eq_e [x f_ex]; exists x; eauto.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "by move=> i f1 IH1 e e'; move/(eq_i i); eauto.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma holds_fsubst e f i v : holds e (fsubst f (i, v%:T)%T) <-> holds (set_nth 0 e i v) f.",
            "VernacStartTheoremProof",
            "38b62906a52eedc810a2b0b938658d1be616b795"
        ],
        [
            "elim: f e => //=; do [ by move=> *; rewrite !eval_tsubst | move=> f1 IHf1 f2 IHf2 e; move: (IHf1 e) (IHf2 e); tauto | move=> f IHf e; move: (IHf e); tauto | move=> j f IHf e].",
            "VernacExtend",
            "76a5e31afa9f762ef77303567a3381de5e93bd22"
        ],
        [
            "-",
            "VernacBullet",
            "581cab4bf49fa4b495e569bbda96fc8d28fddcc0"
        ],
        [
            "case eq_ji: (j == i); first rewrite (eqP eq_ji).",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "by split=> [] [x f_x]; exists x; rewrite set_set_nth eqxx in f_x *.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "split=> [] [x f_x]; exists x; move: f_x; rewrite set_set_nth eq_sym eq_ji; have:= IHf (set_nth 0 e j x); tauto.",
            "VernacExtend",
            "d18e8faf1d8f65c26a052bd90b36c8fb42bd95ea"
        ],
        [
            "case eq_ji: (j == i); first rewrite (eqP eq_ji).",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "by split=> [] f_ x; move: (f_ x); rewrite set_set_nth eqxx.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "split=> [] f_ x; move: (IHf (set_nth 0 e j x)) (f_ x); by rewrite set_set_nth eq_sym eq_ji; tauto.",
            "VernacExtend",
            "d8f601ed755ccf1a2b28f741584fdd753f9fe5da"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Fixpoint rterm (t : term R) := match t with | _^-1 => false | t1 + t2 | t1 * t2 => rterm t1 && rterm t2 | - t1 | t1 *+ _ | t1 ^+ _ => rterm t1 | _ => true end%T.",
            "VernacFixpoint",
            "0804ebd3ecfb5a9cb1c925cc487bf5b8f73139ef"
        ],
        [
            "Fixpoint rformula (f : formula R) := match f with | Bool _ => true | t1 == t2 => rterm t1 && rterm t2 | Unit t1 => false | f1 /\\ f2 | f1 \\/ f2 | f1 ==> f2 => rformula f1 && rformula f2 | ~ f1 | ('exists 'X__, f1) | ('forall 'X__, f1) => rformula f1 end%T.",
            "VernacFixpoint",
            "fe2856856470a36f3669603da33cb70203cb47ac"
        ],
        [
            "Fixpoint ub_var (t : term R) := match t with | 'X_i => i.+1 | t1 + t2 | t1 * t2 => maxn (ub_var t1) (ub_var t2) | - t1 | t1 *+ _ | t1 ^+ _ | t1^-1 => ub_var t1 | _ => 0%N end%T.",
            "VernacFixpoint",
            "e8053fccb10b394bafa5649355c8d3d1a4d746ab"
        ],
        [
            "Fixpoint to_rterm (t : term R) (r : seq (term R)) (n : nat) {struct t} := match t with | t1^-1 => let: (t1', r1) := to_rterm t1 r n in ('X_(n + size r1), rcons r1 t1') | t1 + t2 => let: (t1', r1) := to_rterm t1 r n in let: (t2', r2) := to_rterm t2 r1 n in (t1' + t2', r2) | - t1 => let: (t1', r1) := to_rterm t1 r n in (- t1', r1) | t1 *+ m => let: (t1', r1) := to_rterm t1 r n in (t1' *+ m, r1) | t1 * t2 => let: (t1', r1) := to_rterm t1 r n in let: (t2', r2) := to_rterm t2 r1 n in (Mul t1' t2', r2) | t1 ^+ m => let: (t1', r1) := to_rterm t1 r n in (t1' ^+ m, r1) | _ => (t, r) end%T.",
            "VernacFixpoint",
            "74c61f6db7c07f339eb8474829a5bc9d88108f5e"
        ],
        [
            "Lemma to_rterm_id t r n : rterm t -> to_rterm t r n = (t, r).",
            "VernacStartTheoremProof",
            "a41bd57dbee4c980621e23d82a1c0151e9f0af78"
        ],
        [
            "elim: t r n => //.",
            "VernacExtend",
            "e686a1895f1799b840b76242f931100819a9ad6c"
        ],
        [
            "-",
            "VernacBullet",
            "581cab4bf49fa4b495e569bbda96fc8d28fddcc0"
        ],
        [
            "by move=> t1 IHt1 t2 IHt2 r n /= /andP[rt1 rt2]; rewrite {}IHt1 // IHt2.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "-",
            "VernacBullet",
            "581cab4bf49fa4b495e569bbda96fc8d28fddcc0"
        ],
        [
            "by move=> t IHt r n /= rt; rewrite {}IHt.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "-",
            "VernacBullet",
            "581cab4bf49fa4b495e569bbda96fc8d28fddcc0"
        ],
        [
            "by move=> t IHt r n m /= rt; rewrite {}IHt.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "-",
            "VernacBullet",
            "581cab4bf49fa4b495e569bbda96fc8d28fddcc0"
        ],
        [
            "by move=> t1 IHt1 t2 IHt2 r n /= /andP[rt1 rt2]; rewrite {}IHt1 // IHt2.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "-",
            "VernacBullet",
            "581cab4bf49fa4b495e569bbda96fc8d28fddcc0"
        ],
        [
            "by move=> t IHt r n m /= rt; rewrite {}IHt.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Definition eq0_rform t1 := let m := ub_var t1 in let: (t1', r1) := to_rterm t1 [::] m in let fix loop r i := match r with | [::] => t1' == 0 | t :: r' => let f := 'X_i * t == 1 /\\ t * 'X_i == 1 in 'forall 'X_i, (f \\/ 'X_i == t /\\ ~ ('exists 'X_i, f)) ==> loop r' i.+1 end%T in loop r1 m.",
            "VernacDefinition",
            "bdd46a8e1e8026150a42cef6337dec0ff6894604"
        ],
        [
            "Fixpoint to_rform f := match f with | Bool b => f | t1 == t2 => eq0_rform (t1 - t2) | Unit t1 => eq0_rform (t1 * t1^-1 - 1) | f1 /\\ f2 => to_rform f1 /\\ to_rform f2 | f1 \\/ f2 => to_rform f1 \\/ to_rform f2 | f1 ==> f2 => to_rform f1 ==> to_rform f2 | ~ f1 => ~ to_rform f1 | ('exists 'X_i, f1) => 'exists 'X_i, to_rform f1 | ('forall 'X_i, f1) => 'forall 'X_i, to_rform f1 end%T.",
            "VernacFixpoint",
            "c3ef20d418cc72b2fb7f5d8c7b9952e2ccc432cd"
        ],
        [
            "Lemma to_rform_rformula f : rformula (to_rform f).",
            "VernacStartTheoremProof",
            "06aab170ae1db78beb19856c711bbd5d2dce3d44"
        ],
        [
            "suffices eq0_ring t1: rformula (eq0_rform t1) by elim: f => //= => f1 ->.",
            "VernacExtend",
            "290ed488b5562e885aa2cac56f3a69b4faa0eaa6"
        ],
        [
            "rewrite /eq0_rform; move: (ub_var t1) => m; set tr := _ m.",
            "VernacExtend",
            "f4422a5fae4db5cd3803f00530b1a05297d39743"
        ],
        [
            "suffices: all rterm (tr.1 :: tr.2).",
            "VernacExtend",
            "290ed488b5562e885aa2cac56f3a69b4faa0eaa6"
        ],
        [
            "case: tr => {t1} t1 r /= /andP[t1_r].",
            "VernacExtend",
            "e00fff71ff314c991514fc71c41a3556702e444a"
        ],
        [
            "by elim: r m => [|t r IHr] m; rewrite /= ?andbT // => /andP[->]; apply: IHr.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "have: all rterm [::] by [].",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "rewrite {}/tr; elim: t1 [::] => //=.",
            "VernacExtend",
            "44a8e3b453c9376c468b4e3e0046f5ac33e11d6d"
        ],
        [
            "-",
            "VernacBullet",
            "581cab4bf49fa4b495e569bbda96fc8d28fddcc0"
        ],
        [
            "move=> t1 IHt1 t2 IHt2 r.",
            "VernacExtend",
            "b1b2cb7a3a617cba67460b4eca1f04de3c1cc716"
        ],
        [
            "move/IHt1; case: to_rterm => {t1 r IHt1} t1 r /= /andP[t1_r].",
            "VernacExtend",
            "a01b3d93f426ff68d360351709a5fa5af822af32"
        ],
        [
            "move/IHt2; case: to_rterm => {t2 r IHt2} t2 r /= /andP[t2_r].",
            "VernacExtend",
            "a01b3d93f426ff68d360351709a5fa5af822af32"
        ],
        [
            "by rewrite t1_r t2_r.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "-",
            "VernacBullet",
            "581cab4bf49fa4b495e569bbda96fc8d28fddcc0"
        ],
        [
            "by move=> t1 IHt1 r /IHt1; case: to_rterm.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "-",
            "VernacBullet",
            "581cab4bf49fa4b495e569bbda96fc8d28fddcc0"
        ],
        [
            "by move=> t1 IHt1 n r /IHt1; case: to_rterm.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "-",
            "VernacBullet",
            "581cab4bf49fa4b495e569bbda96fc8d28fddcc0"
        ],
        [
            "move=> t1 IHt1 t2 IHt2 r.",
            "VernacExtend",
            "b1b2cb7a3a617cba67460b4eca1f04de3c1cc716"
        ],
        [
            "move/IHt1; case: to_rterm => {t1 r IHt1} t1 r /= /andP[t1_r].",
            "VernacExtend",
            "a01b3d93f426ff68d360351709a5fa5af822af32"
        ],
        [
            "move/IHt2; case: to_rterm => {t2 r IHt2} t2 r /= /andP[t2_r].",
            "VernacExtend",
            "a01b3d93f426ff68d360351709a5fa5af822af32"
        ],
        [
            "by rewrite t1_r t2_r.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "-",
            "VernacBullet",
            "581cab4bf49fa4b495e569bbda96fc8d28fddcc0"
        ],
        [
            "move=> t1 IHt1 r.",
            "VernacExtend",
            "b1b2cb7a3a617cba67460b4eca1f04de3c1cc716"
        ],
        [
            "by move/IHt1; case: to_rterm => {t1 r IHt1} t1 r /=; rewrite all_rcons.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "-",
            "VernacBullet",
            "581cab4bf49fa4b495e569bbda96fc8d28fddcc0"
        ],
        [
            "by move=> t1 IHt1 n r /IHt1; case: to_rterm.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma to_rformP e f : holds e (to_rform f) <-> holds e f.",
            "VernacStartTheoremProof",
            "49a59b3b1964e23941a9c4771479779a65db507d"
        ],
        [
            "suffices{e f} equal0_equiv e t1 t2: holds e (eq0_rform (t1 - t2)) <-> (eval e t1 == eval e t2).",
            "VernacExtend",
            "290ed488b5562e885aa2cac56f3a69b4faa0eaa6"
        ],
        [
            "-",
            "VernacBullet",
            "581cab4bf49fa4b495e569bbda96fc8d28fddcc0"
        ],
        [
            "elim: f e => /=; try tauto.",
            "VernacExtend",
            "210b4e57b08e866e6ebe11f73854baa46f65d2a7"
        ],
        [
            "+",
            "VernacBullet",
            "3ddfc0515f916e562bacf863647e0107cb15aa13"
        ],
        [
            "move=> t1 t2 e.",
            "VernacExtend",
            "b1b2cb7a3a617cba67460b4eca1f04de3c1cc716"
        ],
        [
            "by split; [move/equal0_equiv/eqP | move/eqP/equal0_equiv].",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "+",
            "VernacBullet",
            "3ddfc0515f916e562bacf863647e0107cb15aa13"
        ],
        [
            "by move=> t1 e; rewrite unitrE; apply: equal0_equiv.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "+",
            "VernacBullet",
            "3ddfc0515f916e562bacf863647e0107cb15aa13"
        ],
        [
            "by move=> f1 IHf1 f2 IHf2 e; move: (IHf1 e) (IHf2 e); tauto.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "+",
            "VernacBullet",
            "3ddfc0515f916e562bacf863647e0107cb15aa13"
        ],
        [
            "by move=> f1 IHf1 f2 IHf2 e; move: (IHf1 e) (IHf2 e); tauto.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "+",
            "VernacBullet",
            "3ddfc0515f916e562bacf863647e0107cb15aa13"
        ],
        [
            "by move=> f1 IHf1 f2 IHf2 e; move: (IHf1 e) (IHf2 e); tauto.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "+",
            "VernacBullet",
            "3ddfc0515f916e562bacf863647e0107cb15aa13"
        ],
        [
            "by move=> f1 IHf1 e; move: (IHf1 e); tauto.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "+",
            "VernacBullet",
            "3ddfc0515f916e562bacf863647e0107cb15aa13"
        ],
        [
            "by move=> n f1 IHf1 e; split=> [] [x] /IHf1; exists x.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "+",
            "VernacBullet",
            "3ddfc0515f916e562bacf863647e0107cb15aa13"
        ],
        [
            "by move=> n f1 IHf1 e; split=> Hx x; apply/IHf1.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "rewrite -(add0r (eval e t2)) -(can2_eq (subrK _) (addrK _)).",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "rewrite -/(eval e (t1 - t2)); move: (t1 - t2)%T => {t1 t2} t.",
            "VernacExtend",
            "7e529e80bb2879787ee6d9466056f19f0215c721"
        ],
        [
            "have sub_var_tsubst s t0: s.1 >= ub_var t0 -> tsubst t0 s = t0.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "elim: t0 {t} => //=.",
            "VernacExtend",
            "e686a1895f1799b840b76242f931100819a9ad6c"
        ],
        [
            "-",
            "VernacBullet",
            "581cab4bf49fa4b495e569bbda96fc8d28fddcc0"
        ],
        [
            "by move=> n; case: ltngtP.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "-",
            "VernacBullet",
            "581cab4bf49fa4b495e569bbda96fc8d28fddcc0"
        ],
        [
            "by move=> t1 IHt1 t2 IHt2; rewrite geq_max => /andP[/IHt1-> /IHt2->].",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "-",
            "VernacBullet",
            "581cab4bf49fa4b495e569bbda96fc8d28fddcc0"
        ],
        [
            "by move=> t1 IHt1 /IHt1->.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "-",
            "VernacBullet",
            "581cab4bf49fa4b495e569bbda96fc8d28fddcc0"
        ],
        [
            "by move=> t1 IHt1 n /IHt1->.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "-",
            "VernacBullet",
            "581cab4bf49fa4b495e569bbda96fc8d28fddcc0"
        ],
        [
            "by move=> t1 IHt1 t2 IHt2; rewrite geq_max => /andP[/IHt1-> /IHt2->].",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "-",
            "VernacBullet",
            "581cab4bf49fa4b495e569bbda96fc8d28fddcc0"
        ],
        [
            "by move=> t1 IHt1 /IHt1->.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "-",
            "VernacBullet",
            "581cab4bf49fa4b495e569bbda96fc8d28fddcc0"
        ],
        [
            "by move=> t1 IHt1 n /IHt1->.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "pose fix rsub t' m r : term R := if r is u :: r' then tsubst (rsub t' m.+1 r') (m, u^-1)%T else t'.",
            "VernacExtend",
            "be59184aeceac70e4255bd58cff677d981339a6d"
        ],
        [
            "pose fix ub_sub m r : Prop := if r is u :: r' then ub_var u <= m /\\ ub_sub m.+1 r' else true.",
            "VernacExtend",
            "be59184aeceac70e4255bd58cff677d981339a6d"
        ],
        [
            "suffices{t} rsub_to_r t r0 m: m >= ub_var t -> ub_sub m r0 -> let: (t', r) := to_rterm t r0 m in [/\\ take (size r0) r = r0, ub_var t' <= m + size r, ub_sub m r & rsub t' m r = t].",
            "VernacExtend",
            "290ed488b5562e885aa2cac56f3a69b4faa0eaa6"
        ],
        [
            "-",
            "VernacBullet",
            "581cab4bf49fa4b495e569bbda96fc8d28fddcc0"
        ],
        [
            "have:= rsub_to_r t [::] _ (leqnn _); rewrite /eq0_rform.",
            "VernacExtend",
            "aa9d5fbc682ed874cd64b2543ca6c859b978e924"
        ],
        [
            "case: (to_rterm _ _ _) => [t1' r1] [//|_ _ ub_r1 def_t].",
            "VernacExtend",
            "e00fff71ff314c991514fc71c41a3556702e444a"
        ],
        [
            "rewrite -{2}def_t {def_t}.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "elim: r1 (ub_var t) e ub_r1 => [|u r1 IHr1] m e /= => [_|[ub_u ub_r1]].",
            "VernacExtend",
            "3c42b53d0efc26db114b00541ac5e7fcb29e6aeb"
        ],
        [
            "by split=> /eqP.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "rewrite eval_tsubst /=; set y := eval e u; split=> t_eq0.",
            "VernacExtend",
            "ee6f95d9a37eb9fd26e9c84c7cb80dd1aaecc234"
        ],
        [
            "apply/IHr1=> //; apply: t_eq0.",
            "VernacExtend",
            "8d9dae45eeb3a769b8a865cef8ae476451f63802"
        ],
        [
            "rewrite nth_set_nth /= eqxx -(eval_tsubst e u (m, Const _)).",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "rewrite sub_var_tsubst //= -/y.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "case Uy: (y \\in unit); [left | right]; first by rewrite mulVr ?divrr.",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "split=> [|[z]]; first by rewrite invr_out ?Uy.",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "rewrite nth_set_nth /= eqxx.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "rewrite -!(eval_tsubst _ _ (m, Const _)) !sub_var_tsubst // -/y => yz1.",
            "VernacExtend",
            "3c42b53d0efc26db114b00541ac5e7fcb29e6aeb"
        ],
        [
            "by case/unitrP: Uy; exists z.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "move=> x def_x; apply/IHr1=> //; suff ->: x = y^-1 by []; move: def_x.",
            "VernacExtend",
            "ae1a6a008712375aefce714d9892cdefed48b699"
        ],
        [
            "rewrite nth_set_nth /= eqxx -(eval_tsubst e u (m, Const _)).",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "rewrite sub_var_tsubst //= -/y; case=> [[xy1 yx1] | [xy nUy]].",
            "VernacExtend",
            "712d339e99ee17eb7d5033e19ac614eb3ca6b532"
        ],
        [
            "by rewrite -[y^-1]mul1r -[1]xy1 mulrK //; apply/unitrP; exists x.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "rewrite invr_out //; apply/unitrP=> [[z yz1]]; case: nUy; exists z.",
            "VernacExtend",
            "a78af2519cb019339623f53f247125048cee4872"
        ],
        [
            "rewrite nth_set_nth /= eqxx -!(eval_tsubst _ _ (m, _%:T)%T).",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "by rewrite !sub_var_tsubst.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "have rsub_id r t0 n: ub_var t0 <= n -> rsub t0 n r = t0.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "by elim: r n => //= t1 r IHr n let0n; rewrite IHr ?sub_var_tsubst ?leqW.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "have rsub_acc r s t1 m1: ub_var t1 <= m1 + size r -> rsub t1 m1 (r ++ s) = rsub t1 m1 r.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "elim: r t1 m1 => [|t1 r IHr] t2 m1 /=; first by rewrite addn0; apply: rsub_id.",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "by move=> letmr; rewrite IHr ?addSnnS.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "elim: t r0 m => /=; try do [ by move=> n r m hlt hub; rewrite take_size (ltn_addr _ hlt) rsub_id | by move=> n r m hlt hub; rewrite leq0n take_size rsub_id | move=> t1 IHt1 t2 IHt2 r m; rewrite geq_max; case/andP=> hub1 hub2 hmr; case: to_rterm {IHt1 hub1 hmr}(IHt1 r m hub1 hmr) => t1' r1; case=> htake1 hub1' hsub1 <-; case: to_rterm {IHt2 hub2 hsub1}(IHt2 r1 m hub2 hsub1) => t2' r2 /=; rewrite geq_max; case=> htake2 -> hsub2 /= <-; rewrite -{1 2}(cat_take_drop (size r1) r2) htake2; set r3 := drop _ _; rewrite size_cat addnA (leq_trans _ (leq_addr _ _)) //; split=> {hsub2}//; first by [rewrite takel_cat // -htake1 size_take geq_min leqnn orbT]; rewrite -(rsub_acc r1 r3 t1') {hub1'}// -{htake1}htake2 {r3}cat_take_drop; by elim: r2 m => //= u r2 IHr2 m; rewrite IHr2 | do [ move=> t1 IHt1 r m; do 2!move/IHt1=> {IHt1}IHt1 | move=> t1 IHt1 n r m; do 2!move/IHt1=> {IHt1}IHt1]; case: to_rterm IHt1 => t1' r1 [-> -> hsub1 <-]; split=> {hsub1}//; by elim: r1 m => //= u r1 IHr1 m; rewrite IHr1].",
            "VernacExtend",
            "509985c8c44ec3c027510075d3834b5f1b7c7de7"
        ],
        [
            "move=> t1 IH r m letm /IH {IH} /(_ letm) {letm}.",
            "VernacExtend",
            "b1b2cb7a3a617cba67460b4eca1f04de3c1cc716"
        ],
        [
            "case: to_rterm => t1' r1 /= [def_r ub_t1' ub_r1 <-].",
            "VernacExtend",
            "e00fff71ff314c991514fc71c41a3556702e444a"
        ],
        [
            "rewrite size_rcons addnS leqnn -{1}cats1 takel_cat ?def_r; last first.",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "by rewrite -def_r size_take geq_min leqnn orbT.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "elim: r1 m ub_r1 ub_t1' {def_r} => /= [|u r1 IHr1] m => [_|[->]].",
            "VernacExtend",
            "3c42b53d0efc26db114b00541ac5e7fcb29e6aeb"
        ],
        [
            "by rewrite addn0 eqxx.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "by rewrite -addSnnS => /IHr1 IH /IH[_ _ ub_r1 ->].",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Fixpoint qf_form (f : formula R) := match f with | Bool _ | _ == _ | Unit _ => true | f1 /\\ f2 | f1 \\/ f2 | f1 ==> f2 => qf_form f1 && qf_form f2 | ~ f1 => qf_form f1 | _ => false end%T.",
            "VernacFixpoint",
            "dfc31975514e4fc300cd8ae6b1bcfa8c27ad71bb"
        ],
        [
            "Definition qf_eval e := fix loop (f : formula R) : bool := match f with | Bool b => b | t1 == t2 => (eval e t1 == eval e t2)%bool | Unit t1 => eval e t1 \\in unit | f1 /\\ f2 => loop f1 && loop f2 | f1 \\/ f2 => loop f1 || loop f2 | f1 ==> f2 => (loop f1 ==> loop f2)%bool | ~ f1 => ~~ loop f1 |_ => false end%T.",
            "VernacDefinition",
            "c309202f5e2337b8e60305b8f00955d7cddfc2c9"
        ],
        [
            "Lemma qf_evalP e f : qf_form f -> reflect (holds e f) (qf_eval e f).",
            "VernacStartTheoremProof",
            "3f4a5ba8cef13d00b31435de990c833d4def5178"
        ],
        [
            "elim: f => //=; try by move=> *; apply: idP.",
            "VernacExtend",
            "4f3ff96ca2d1111d66bee768f7796420a56e669b"
        ],
        [
            "-",
            "VernacBullet",
            "581cab4bf49fa4b495e569bbda96fc8d28fddcc0"
        ],
        [
            "by move=> t1 t2 _; apply: eqP.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "-",
            "VernacBullet",
            "581cab4bf49fa4b495e569bbda96fc8d28fddcc0"
        ],
        [
            "move=> f1 IHf1 f2 IHf2 /= /andP[/IHf1[] f1T]; last by right; case.",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "by case/IHf2; [left | right; case].",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "-",
            "VernacBullet",
            "581cab4bf49fa4b495e569bbda96fc8d28fddcc0"
        ],
        [
            "move=> f1 IHf1 f2 IHf2 /= /andP[/IHf1[] f1F]; first by do 2 left.",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "by case/IHf2; [left; right | right; case].",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "-",
            "VernacBullet",
            "581cab4bf49fa4b495e569bbda96fc8d28fddcc0"
        ],
        [
            "move=> f1 IHf1 f2 IHf2 /= /andP[/IHf1[] f1T]; last by left.",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "by case/IHf2; [left | right; move/(_ f1T)].",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "by move=> f1 IHf1 /IHf1[]; [right | left].",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Implicit Type bc : seq (term R) * seq (term R).",
            "VernacReserve",
            "c8d2b4ce243f0ee634f92fdfa29499a8b9a052be"
        ],
        [
            "Definition and_dnf bcs1 bcs2 := \\big[cat/nil]_(bc1 <- bcs1) map (fun bc2 => (bc1.1 ++ bc2.1, bc1.2 ++ bc2.2)) bcs2.",
            "VernacDefinition",
            "5aa216aa3c815b67745cddd922ed46bdba5457a7"
        ],
        [
            "Fixpoint qf_to_dnf (f : formula R) (neg : bool) {struct f} := match f with | Bool b => if b (+) neg then [:: ([::], [::])] else [::] | t1 == t2 => [:: if neg then ([::], [:: t1 - t2]) else ([:: t1 - t2], [::])] | f1 /\\ f2 => (if neg then cat else and_dnf) [rec f1, neg] [rec f2, neg] | f1 \\/ f2 => (if neg then and_dnf else cat) [rec f1, neg] [rec f2, neg] | f1 ==> f2 => (if neg then and_dnf else cat) [rec f1, ~~ neg] [rec f2, neg] | ~ f1 => [rec f1, ~~ neg] | _ => if neg then [:: ([::], [::])] else [::] end%T where \"[ 'rec' f , neg ]\" := (qf_to_dnf f neg).",
            "VernacFixpoint",
            "447d1430ffa9b24643da3b5362ee286fa84fa9ad"
        ],
        [
            "Definition dnf_to_form := let pos_lit t := And (t == 0) in let neg_lit t := And (t != 0) in let cls bc := Or (foldr pos_lit True bc.1 /\\ foldr neg_lit True bc.2) in foldr cls False.",
            "VernacDefinition",
            "38d50a1b1abc775dc9c1bc7ede5de8f084c3b713"
        ],
        [
            "Lemma cat_dnfP e bcs1 bcs2 : qf_eval e (dnf_to_form (bcs1 ++ bcs2)) = qf_eval e (dnf_to_form bcs1 \\/ dnf_to_form bcs2).",
            "VernacStartTheoremProof",
            "0bb098b6bdca786bab7a6d69be4f8d32ddb7fe0a"
        ],
        [
            "by elim: bcs1 => //= bc1 bcs1 IH1; rewrite -orbA; congr orb; rewrite IH1.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma and_dnfP e bcs1 bcs2 : qf_eval e (dnf_to_form (and_dnf bcs1 bcs2)) = qf_eval e (dnf_to_form bcs1 /\\ dnf_to_form bcs2).",
            "VernacStartTheoremProof",
            "f2db9846145d9297e753ac5f1ea9e4f9acc7e1dd"
        ],
        [
            "elim: bcs1 => [|bc1 bcs1 IH1] /=; first by rewrite /and_dnf big_nil.",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "rewrite /and_dnf big_cons -/(and_dnf bcs1 bcs2) cat_dnfP /=.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "rewrite {}IH1 /= andb_orl; congr orb.",
            "VernacExtend",
            "a0279e71fd23ac6bde2b8b4402981a70ea719044"
        ],
        [
            "elim: bcs2 bc1 {bcs1} => [|bc2 bcs2 IH] bc1 /=; first by rewrite andbF.",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "rewrite {}IH /= andb_orr; congr orb => {bcs2}.",
            "VernacExtend",
            "80e7cce19c53eb5d5a21aafd83e552d37e23084a"
        ],
        [
            "suffices aux (l1 l2 : seq (term R)) g : let redg := foldr (And \\o g) True in qf_eval e (redg (l1 ++ l2)) = qf_eval e (redg l1 /\\ redg l2)%T.",
            "VernacExtend",
            "290ed488b5562e885aa2cac56f3a69b4faa0eaa6"
        ],
        [
            "+",
            "VernacBullet",
            "3ddfc0515f916e562bacf863647e0107cb15aa13"
        ],
        [
            "by rewrite 2!aux /= 2!andbA -andbA -andbCA andbA andbCA andbA.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "by elim: l1 => [| t1 l1 IHl1] //=; rewrite -andbA IHl1.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma qf_to_dnfP e : let qev f b := qf_eval e (dnf_to_form (qf_to_dnf f b)) in forall f, qf_form f && rformula f -> qev f false = qf_eval e f.",
            "VernacStartTheoremProof",
            "16ae1f867dd0696c75a8ae18b044e7dc478af3fa"
        ],
        [
            "move=> qev; have qevT f: qev f true = ~~ qev f false.",
            "VernacExtend",
            "ccd83c252dcbae3d56f3d057fcb8217878b51901"
        ],
        [
            "rewrite {}/qev; elim: f => //=; do [by case | move=> f1 IH1 f2 IH2 | ].",
            "VernacExtend",
            "1536c2f2a562f0eddab39fc5d78c2812ad3afe48"
        ],
        [
            "-",
            "VernacBullet",
            "581cab4bf49fa4b495e569bbda96fc8d28fddcc0"
        ],
        [
            "by move=> t1 t2; rewrite !andbT !orbF.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "-",
            "VernacBullet",
            "581cab4bf49fa4b495e569bbda96fc8d28fddcc0"
        ],
        [
            "by rewrite and_dnfP cat_dnfP negb_and -IH1 -IH2.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "-",
            "VernacBullet",
            "581cab4bf49fa4b495e569bbda96fc8d28fddcc0"
        ],
        [
            "by rewrite and_dnfP cat_dnfP negb_or -IH1 -IH2.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "-",
            "VernacBullet",
            "581cab4bf49fa4b495e569bbda96fc8d28fddcc0"
        ],
        [
            "by rewrite and_dnfP cat_dnfP /= negb_or IH1 -IH2 negbK.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "by move=> t1 ->; rewrite negbK.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "rewrite /qev; elim=> //=; first by case.",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "-",
            "VernacBullet",
            "581cab4bf49fa4b495e569bbda96fc8d28fddcc0"
        ],
        [
            "by move=> t1 t2 _; rewrite subr_eq0 !andbT orbF.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "-",
            "VernacBullet",
            "581cab4bf49fa4b495e569bbda96fc8d28fddcc0"
        ],
        [
            "move=> f1 IH1 f2 IH2; rewrite andbCA -andbA andbCA andbA; case/andP.",
            "VernacExtend",
            "d7214ac8fd48f4d1cd143edd9d16f6d28386a302"
        ],
        [
            "by rewrite and_dnfP /= => /IH1-> /IH2->.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "-",
            "VernacBullet",
            "581cab4bf49fa4b495e569bbda96fc8d28fddcc0"
        ],
        [
            "move=> f1 IH1 f2 IH2; rewrite andbCA -andbA andbCA andbA; case/andP.",
            "VernacExtend",
            "d7214ac8fd48f4d1cd143edd9d16f6d28386a302"
        ],
        [
            "by rewrite cat_dnfP /= => /IH1-> => /IH2->.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "-",
            "VernacBullet",
            "581cab4bf49fa4b495e569bbda96fc8d28fddcc0"
        ],
        [
            "move=> f1 IH1 f2 IH2; rewrite andbCA -andbA andbCA andbA; case/andP.",
            "VernacExtend",
            "d7214ac8fd48f4d1cd143edd9d16f6d28386a302"
        ],
        [
            "by rewrite cat_dnfP /= [qf_eval _ _]qevT -implybE => /IH1 <- /IH2->.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "by move=> f1 IH1 /IH1 <-; rewrite -qevT.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma dnf_to_form_qf bcs : qf_form (dnf_to_form bcs).",
            "VernacStartTheoremProof",
            "516575d859143421e4563d9f2110eda6b1d3e973"
        ],
        [
            "by elim: bcs => //= [[clT clF] _ ->] /=; elim: clT => //=; elim: clF.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Definition dnf_rterm cl := all rterm cl.1 && all rterm cl.2.",
            "VernacDefinition",
            "1360bf4691c37b9052067a802ec8f6da6a4b0d9c"
        ],
        [
            "Lemma qf_to_dnf_rterm f b : rformula f -> all dnf_rterm (qf_to_dnf f b).",
            "VernacStartTheoremProof",
            "8999dbb7d298e91049d9b6b3622a5d8ad13f0c01"
        ],
        [
            "set ok := all dnf_rterm.",
            "VernacExtend",
            "69a61e99b234580f7b41fa5b9655c87ba9a76f70"
        ],
        [
            "have cat_ok bcs1 bcs2: ok bcs1 -> ok bcs2 -> ok (bcs1 ++ bcs2).",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "by move=> ok1 ok2; rewrite [ok _]all_cat; apply/andP.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "have and_ok bcs1 bcs2: ok bcs1 -> ok bcs2 -> ok (and_dnf bcs1 bcs2).",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "rewrite /and_dnf unlock; elim: bcs1 => //= cl1 bcs1 IH1; rewrite -andbA.",
            "VernacExtend",
            "c376f01ebc4f30ac37ca603296f6548f23fe4a48"
        ],
        [
            "case/and3P=> ok11 ok12 ok1 ok2; rewrite cat_ok ?{}IH1 {bcs1 ok1}//.",
            "VernacExtend",
            "90a2acb29b7a5304b0ab6ba5269c420638ddef63"
        ],
        [
            "elim: bcs2 ok2 => //= cl2 bcs2 IH2 /andP[ok2 /IH2->].",
            "VernacExtend",
            "e686a1895f1799b840b76242f931100819a9ad6c"
        ],
        [
            "by rewrite /dnf_rterm !all_cat ok11 ok12 /= !andbT.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "elim: f b => //=; [ by do 2!case | | | | | by auto | | ]; try by repeat case/andP || intro; case: ifP; auto.",
            "VernacExtend",
            "1095d4c376d9dcbe0cb6e4e509fdfa8879374edb"
        ],
        [
            "by rewrite /dnf_rterm => ?? [] /= ->.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma dnf_to_rform bcs : rformula (dnf_to_form bcs) = all dnf_rterm bcs.",
            "VernacStartTheoremProof",
            "053f44ce9069e37c0fafc38a61b843d62ce20a50"
        ],
        [
            "elim: bcs => //= [[cl1 cl2] bcs ->]; rewrite {2}/dnf_rterm /=; congr (_ && _).",
            "VernacExtend",
            "83e0da6cd588b2015d8d3a2ef57d8e81c8765df8"
        ],
        [
            "by congr andb; [elim: cl1 | elim: cl2] => //= t cl ->; rewrite andbT.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Section If.",
            "VernacBeginSection",
            "106aee2a8ea32bbb8c558f82b51dff761a75f612"
        ],
        [
            "Variables (pred_f then_f else_f : formula R).",
            "VernacAssumption",
            "4b08852fee8c3d4f24ad87a36a2bd41dd281190b"
        ],
        [
            "Definition If := (pred_f /\\ then_f \\/ ~ pred_f /\\ else_f)%T.",
            "VernacDefinition",
            "91d14c8c34cd9d6b0229633c9faa9124305e666e"
        ],
        [
            "Lemma If_form_qf : qf_form pred_f -> qf_form then_f -> qf_form else_f -> qf_form If.",
            "VernacStartTheoremProof",
            "7da6345ab9f0c8ce45fa4e43038ea12e59b3749a"
        ],
        [
            "by move=> /= -> -> ->.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma If_form_rf : rformula pred_f -> rformula then_f -> rformula else_f -> rformula If.",
            "VernacStartTheoremProof",
            "b0e227c3f3a994dfbcb109673888c6d7d110301d"
        ],
        [
            "by move=> /= -> -> ->.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma eval_If e : let ev := qf_eval e in ev If = (if ev pred_f then ev then_f else ev else_f).",
            "VernacStartTheoremProof",
            "b91ee0b0a42f5b6f986f93b05621f76ebd18f26f"
        ],
        [
            "by rewrite /=; case: ifP => _; rewrite ?orbF.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "End If.",
            "VernacEndSegment",
            "c31585221b764c90d01d834cab764b9788938fe3"
        ],
        [
            "Section Pick.",
            "VernacBeginSection",
            "ec8d42ecb31bc7da17f0518fd47ad820bcab4cf2"
        ],
        [
            "Variables (I : finType) (pred_f then_f : I -> formula R) (else_f : formula R).",
            "VernacAssumption",
            "78ba7466619dba07cf02a8b310c7f86a359a2a88"
        ],
        [
            "Definition Pick := \\big[Or/False]_(p : {ffun pred I}) ((\\big[And/True]_i (if p i then pred_f i else ~ pred_f i)) /\\ (if pick p is Some i then then_f i else else_f))%T.",
            "VernacDefinition",
            "7e388fc5de84e3a4e046036f47f75c9031873fd5"
        ],
        [
            "Lemma Pick_form_qf : (forall i, qf_form (pred_f i)) -> (forall i, qf_form (then_f i)) -> qf_form else_f -> qf_form Pick.",
            "VernacStartTheoremProof",
            "b431daa15848e72974392522c1c09d6e58607127"
        ],
        [
            "move=> qfp qft qfe; have mA := (big_morph qf_form) true andb.",
            "VernacExtend",
            "ccd83c252dcbae3d56f3d057fcb8217878b51901"
        ],
        [
            "rewrite mA // big1 //= => p _.",
            "VernacExtend",
            "3c42b53d0efc26db114b00541ac5e7fcb29e6aeb"
        ],
        [
            "rewrite mA // big1 => [|i _]; first by case: pick.",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "by rewrite fun_if if_same /= qfp.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma eval_Pick e (qev := qf_eval e) : let P i := qev (pred_f i) in qev Pick = (if pick P is Some i then qev (then_f i) else qev else_f).",
            "VernacStartTheoremProof",
            "67d86042e175d7eaf96be95521eaf9ed2e1582e6"
        ],
        [
            "move=> P; rewrite ((big_morph qev) false orb) //= big_orE /=.",
            "VernacExtend",
            "057edeb0967475c7ea5e8c98c449ddc5613eddc1"
        ],
        [
            "apply/existsP/idP=> [[p] | true_at_P].",
            "VernacExtend",
            "4bd6fa79b17bcd2bfb7af091fb325367a20385d6"
        ],
        [
            "rewrite ((big_morph qev) true andb) //= big_andE /=.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "case/andP=> /forallP-eq_p_P.",
            "VernacExtend",
            "e00fff71ff314c991514fc71c41a3556702e444a"
        ],
        [
            "rewrite (@eq_pick _ _ P) => [|i]; first by case: pick.",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "by move/(_ i): eq_p_P => /=; case: (p i) => //=; move/negbTE.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "exists [ffun i => P i] => /=; apply/andP; split.",
            "VernacExtend",
            "b209b2632cb5dcb4781b24e07e884eee39f5fc33"
        ],
        [
            "rewrite ((big_morph qev) true andb) //= big_andE /=.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "by apply/forallP=> i; rewrite /= ffunE; case Pi: (P i) => //=; apply: negbT.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "rewrite (@eq_pick _ _ P) => [|i]; first by case: pick true_at_P.",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "by rewrite ffunE.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "End Pick.",
            "VernacEndSegment",
            "f426b1bb19c82a32a573be5e146c322426a4cddf"
        ],
        [
            "Section MultiQuant.",
            "VernacBeginSection",
            "3aecd89ae7975b6b9659a290d34db6551c302dec"
        ],
        [
            "Variable f : formula R.",
            "VernacAssumption",
            "cd520b023a6100a38f24a8336ba6e9b27d2cbe71"
        ],
        [
            "Implicit Types (I : seq nat) (e : seq R).",
            "VernacReserve",
            "910c8a224fde6074e678a400073f81eeb3b63d56"
        ],
        [
            "Lemma foldExistsP I e : (exists2 e', {in [predC I], same_env e e'} & holds e' f) <-> holds e (foldr Exists f I).",
            "VernacStartTheoremProof",
            "15297fbe6c8a025a5455b523bd16355d2ec19b1a"
        ],
        [
            "elim: I e => /= [|i I IHi] e.",
            "VernacExtend",
            "e686a1895f1799b840b76242f931100819a9ad6c"
        ],
        [
            "by split=> [[e' eq_e] |]; [apply: eq_holds => i; rewrite eq_e | exists e].",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "split=> [[e' eq_e f_e'] | [x]]; last set e_x := set_nth 0 e i x.",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "exists e'`_i; apply/IHi; exists e' => // j.",
            "VernacExtend",
            "6a12a8ac9ae3f7ce7501cee63888aaf88066d8b3"
        ],
        [
            "by have:= eq_e j; rewrite nth_set_nth /= !inE; case: eqP => // ->.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "case/IHi=> e' eq_e f_e'; exists e' => // j.",
            "VernacExtend",
            "ba44c9d0281a02110ce54645304e6d990debd9c0"
        ],
        [
            "by have:= eq_e j; rewrite nth_set_nth /= !inE; case: eqP.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma foldForallP I e : (forall e', {in [predC I], same_env e e'} -> holds e' f) <-> holds e (foldr Forall f I).",
            "VernacStartTheoremProof",
            "6f1c29bd2f05a2dfe6b3fa7f589e3fa9e472e090"
        ],
        [
            "elim: I e => /= [|i I IHi] e.",
            "VernacExtend",
            "e686a1895f1799b840b76242f931100819a9ad6c"
        ],
        [
            "by split=> [|f_e e' eq_e]; [apply | apply: eq_holds f_e => i; rewrite eq_e].",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "split=> [f_e' x | f_e e' eq_e]; first set e_x := set_nth 0 e i x.",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "apply/IHi=> e' eq_e; apply: f_e' => j.",
            "VernacExtend",
            "8d9dae45eeb3a769b8a865cef8ae476451f63802"
        ],
        [
            "by have:= eq_e j; rewrite nth_set_nth /= !inE; case: eqP.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "move/IHi: (f_e e'`_i); apply=> j.",
            "VernacExtend",
            "d6ebf3361f380a12d5c2c9bbb7ea363132c48b36"
        ],
        [
            "by have:= eq_e j; rewrite nth_set_nth /= !inE; case: eqP => // ->.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "End MultiQuant.",
            "VernacEndSegment",
            "e1892fc29d24ea03e9a3ad4004a4dda8ec93c932"
        ],
        [
            "End EvalTerm.",
            "VernacEndSegment",
            "d3e720271c8858367afec99c2eafd7e0359a505a"
        ],
        [
            "Prenex Implicits dnf_rterm.",
            "VernacExtend",
            "6c199aa238b732b40e8534b188f6f77b44856025"
        ],
        [
            "Module IntegralDomain.",
            "VernacDefineModule",
            "40d778a66faae51a21c0c92cf1bf343c3aaea78c"
        ],
        [
            "Definition axiom (R : ringType) := forall x y : R, x * y = 0 -> (x == 0) || (y == 0).",
            "VernacDefinition",
            "f5867e394a4cc30a4d1d8d789943816be01261fa"
        ],
        [
            "Section ClassDef.",
            "VernacBeginSection",
            "a5b792261e6c496f5a1a8d0f7da8c96156ca2fed"
        ],
        [
            "Record class_of (R : Type) : Type := Class {base : ComUnitRing.class_of R; mixin : axiom (Ring.Pack base)}.",
            "VernacInductive",
            "4cfc05e8ae8b24c263b26de747d4ec8c9bd1b21f"
        ],
        [
            "Local Coercion base : class_of >-> ComUnitRing.class_of.",
            "VernacCoercion",
            "bba0b3a6947c2d016431f3b3341c2e26490c11d6"
        ],
        [
            "Structure type := Pack {sort; _ : class_of sort}.",
            "VernacInductive",
            "42b0161295055637e72e97af35c3d44479cc946b"
        ],
        [
            "Local Coercion sort : type >-> Sortclass.",
            "VernacCoercion",
            "e4478cd37693106f84ed020bd073c4970dc87530"
        ],
        [
            "Variable (T : Type) (cT : type).",
            "VernacAssumption",
            "eb35f5737a32cba56acb24ac87490232dc2dfcb9"
        ],
        [
            "Definition class := let: Pack _ c as cT' := cT return class_of cT' in c.",
            "VernacDefinition",
            "0e4a80652d474f8010316ff26a5322b5207d82a3"
        ],
        [
            "Definition clone c of phant_id class c := @Pack T c.",
            "VernacDefinition",
            "e082321bed0d5d4d78139419fead577313b82668"
        ],
        [
            "Let xT := let: Pack T _ := cT in T.",
            "VernacDefinition",
            "0a87c77e3a5ac8febf0910b95d7b998b7cb9cf6d"
        ],
        [
            "Notation xclass := (class : class_of xT).",
            "VernacSyntacticDefinition",
            "e136614fedd7b331a23b54adad5b0bce11895ed4"
        ],
        [
            "Definition pack b0 (m0 : axiom (@Ring.Pack T b0)) := fun bT b & phant_id (ComUnitRing.class bT) b => fun m & phant_id m0 m => Pack (@Class T b m).",
            "VernacDefinition",
            "9365b9023cce49f7b78599b4b282b0f1d31af4a3"
        ],
        [
            "Definition eqType := @Equality.Pack cT xclass.",
            "VernacDefinition",
            "6139f412b89e62ff13c9c707c885de4b39151e9d"
        ],
        [
            "Definition choiceType := @Choice.Pack cT xclass.",
            "VernacDefinition",
            "f62d3090382a5ea70b978e0633e0376c4558db55"
        ],
        [
            "Definition zmodType := @Zmodule.Pack cT xclass.",
            "VernacDefinition",
            "d292a93c19cc9e36e99db073c0c14c27655bcd85"
        ],
        [
            "Definition ringType := @Ring.Pack cT xclass.",
            "VernacDefinition",
            "8a9134d1dac21560b6c04dc7467c51b02f0db83e"
        ],
        [
            "Definition comRingType := @ComRing.Pack cT xclass.",
            "VernacDefinition",
            "7ae57e52d5bc541f3670f9768868f067c230ad65"
        ],
        [
            "Definition unitRingType := @UnitRing.Pack cT xclass.",
            "VernacDefinition",
            "2fc21101404f298267a4a84da270b73575f3bf98"
        ],
        [
            "Definition comUnitRingType := @ComUnitRing.Pack cT xclass.",
            "VernacDefinition",
            "f27a825845ae5f4cb6a943bc8d5fa37920701569"
        ],
        [
            "End ClassDef.",
            "VernacEndSegment",
            "bce1c8832045d8291c44a3fb67e9767782d2745b"
        ],
        [
            "Module Exports.",
            "VernacDefineModule",
            "d4a1114ec53f746523a7dec57823f7f03e51fa24"
        ],
        [
            "Coercion base : class_of >-> ComUnitRing.class_of.",
            "VernacCoercion",
            "c3a45d8566e43a693b091ed8acdc0edb02b26a73"
        ],
        [
            "Arguments mixin [R] c [x y].",
            "VernacArguments",
            "d1687e2cee851148caeb3ee24cc99fe22458036d"
        ],
        [
            "Coercion mixin : class_of >-> axiom.",
            "VernacCoercion",
            "0086151c4c0329a9750624bfd94047307b04364a"
        ],
        [
            "Coercion sort : type >-> Sortclass.",
            "VernacCoercion",
            "9e1cbf06afa0d2731dbb8bfd6b9ae32be22a8ae7"
        ],
        [
            "Bind Scope ring_scope with sort.",
            "VernacBindScope",
            "ac04d07dda43f0036576b2a438f8490c7ac4d59b"
        ],
        [
            "Coercion eqType : type >-> Equality.type.",
            "VernacCoercion",
            "58308c67b5e73c9e004d57c486a5071598a25e8c"
        ],
        [
            "Canonical eqType.",
            "VernacCanonical",
            "dd1ac877a396f552e2a8f23e59be45903d8b15ad"
        ],
        [
            "Coercion choiceType : type >-> Choice.type.",
            "VernacCoercion",
            "bdc8d608f4b963a8606cd33ad18b1977a8bcb78d"
        ],
        [
            "Canonical choiceType.",
            "VernacCanonical",
            "af7a1759ddd13e2b7e4e1ce16b6a3595a77b5659"
        ],
        [
            "Coercion zmodType : type >-> Zmodule.type.",
            "VernacCoercion",
            "4ec9ca49e3551546d7d514a97127c47a11747e3a"
        ],
        [
            "Canonical zmodType.",
            "VernacCanonical",
            "9a6f278270af4b6ced100d8e0c90c7719a960a86"
        ],
        [
            "Coercion ringType : type >-> Ring.type.",
            "VernacCoercion",
            "3563a3bf802f370588b71df18917d551f221a05e"
        ],
        [
            "Canonical ringType.",
            "VernacCanonical",
            "b7d4c328ac58b23ee4b52bd787434621c20d2c4d"
        ],
        [
            "Coercion comRingType : type >-> ComRing.type.",
            "VernacCoercion",
            "0b68ec2f3c5c76d295167a623512d46ac31b80ad"
        ],
        [
            "Canonical comRingType.",
            "VernacCanonical",
            "30f9087081da845c9c545aeb8d7375204ed4f1b3"
        ],
        [
            "Coercion unitRingType : type >-> UnitRing.type.",
            "VernacCoercion",
            "f3d1399a2d1a8f93182c9b698d4a4a7d12624259"
        ],
        [
            "Canonical unitRingType.",
            "VernacCanonical",
            "5adf5dbcca23e501d2be7f60fe9ad3def13431b8"
        ],
        [
            "Coercion comUnitRingType : type >-> ComUnitRing.type.",
            "VernacCoercion",
            "c86b5a5eba0fa8431bb0c4dd719c4f48343ce09a"
        ],
        [
            "Canonical comUnitRingType.",
            "VernacCanonical",
            "74522c0e1d11ec46568915dda5f1829b7bbe8a04"
        ],
        [
            "Notation idomainType := type.",
            "VernacSyntacticDefinition",
            "385cfcfeb35a546243c4623943a455953cf55574"
        ],
        [
            "Notation IdomainType T m := (@pack T _ m _ _ id _ id).",
            "VernacSyntacticDefinition",
            "120d8d2789149f95211f6cb98fa96d2142251ed1"
        ],
        [
            "Notation \"[ 'idomainType' 'of' T 'for' cT ]\" := (@clone T cT _ idfun) (at level 0, format \"[ 'idomainType' 'of' T 'for' cT ]\") : form_scope.",
            "VernacNotation",
            "4dcf83adac51c2709b4ff08bf295762f099a890a"
        ],
        [
            "Notation \"[ 'idomainType' 'of' T ]\" := (@clone T _ _ id) (at level 0, format \"[ 'idomainType' 'of' T ]\") : form_scope.",
            "VernacNotation",
            "243a9adbc737e239d4b459093a3a7fa972d9d6ec"
        ],
        [
            "End Exports.",
            "VernacEndSegment",
            "71efedae7ccffd696e1ffe5d8ae6baa8a4484918"
        ],
        [
            "End IntegralDomain.",
            "VernacEndSegment",
            "05d18f840c68e5ca3047d6bc145d04b98938edc6"
        ],
        [
            "Import IntegralDomain.Exports.",
            "VernacImport",
            "24bb1a18bb44e645735f768560e8aec64991e939"
        ],
        [
            "Section IntegralDomainTheory.",
            "VernacBeginSection",
            "72e155c1589cfc17ac879dc9e774884bbad9f4cc"
        ],
        [
            "Variable R : idomainType.",
            "VernacAssumption",
            "cbab1d9d04a0bef334944e593ca6e504cfbe949c"
        ],
        [
            "Implicit Types x y : R.",
            "VernacReserve",
            "a698213249308a1927c4fb90fb6e1fbc35157508"
        ],
        [
            "Lemma mulf_eq0 x y : (x * y == 0) = (x == 0) || (y == 0).",
            "VernacStartTheoremProof",
            "edfffe23c9c74d70bb45d6b0ba200e9634b90c11"
        ],
        [
            "apply/eqP/idP; first by case: R x y => T [].",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "by case/pred2P=> ->; rewrite (mulr0, mul0r).",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma prodf_eq0 (I : finType) (P : pred I) (F : I -> R) : reflect (exists2 i, P i & (F i == 0)) (\\prod_(i | P i) F i == 0).",
            "VernacStartTheoremProof",
            "725866ca0d1be61bc61109052710fab7af0b1f5a"
        ],
        [
            "apply: (iffP idP) => [|[i Pi /eqP Fi0]]; last first.",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "by rewrite (bigD1 i) //= Fi0 mul0r.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "elim: (index_enum _) => [|i r IHr]; first by rewrite big_nil oner_eq0.",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "rewrite big_cons /=; have [Pi | _] := ifP; last exact: IHr.",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "by rewrite mulf_eq0; case/orP=> // Fi0; exists i.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma prodf_seq_eq0 I r (P : pred I) (F : I -> R) : (\\prod_(i <- r | P i) F i == 0) = has (fun i => P i && (F i == 0)) r.",
            "VernacStartTheoremProof",
            "fb0abb1e8293819ad0511e2695b05b0ac783128d"
        ],
        [
            "by rewrite (big_morph _ mulf_eq0 (oner_eq0 _)) big_has_cond.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma mulf_neq0 x y : x != 0 -> y != 0 -> x * y != 0.",
            "VernacStartTheoremProof",
            "5ea162a2545af7e81a4c34f4c75941fc53b6a183"
        ],
        [
            "by move=> x0 y0; rewrite mulf_eq0; apply/norP.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma prodf_neq0 (I : finType) (P : pred I) (F : I -> R) : reflect (forall i, P i -> (F i != 0)) (\\prod_(i | P i) F i != 0).",
            "VernacStartTheoremProof",
            "8954679934ed597e1372474d59a104032ee9f3e0"
        ],
        [
            "by rewrite (sameP (prodf_eq0 _ _) exists_inP) negb_exists_in; apply: forall_inP.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma prodf_seq_neq0 I r (P : pred I) (F : I -> R) : (\\prod_(i <- r | P i) F i != 0) = all (fun i => P i ==> (F i != 0)) r.",
            "VernacStartTheoremProof",
            "8468d4cc7334cdc3771f6e9053d7b6c41196180b"
        ],
        [
            "rewrite prodf_seq_eq0 -all_predC; apply: eq_all => i /=.",
            "VernacExtend",
            "634a7639ed2fb7caf62757f84400927f5829b7d5"
        ],
        [
            "by rewrite implybE negb_and.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma expf_eq0 x n : (x ^+ n == 0) = (n > 0) && (x == 0).",
            "VernacStartTheoremProof",
            "c93568bf7eed2db26e5cdaaf93dbcc2538b7b628"
        ],
        [
            "elim: n => [|n IHn]; first by rewrite oner_eq0.",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "by rewrite exprS mulf_eq0 IHn andKb.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma sqrf_eq0 x : (x ^+ 2 == 0) = (x == 0).",
            "VernacStartTheoremProof",
            "bbe86c2d33ca98cd457fa4c5507c94b970d7a6ac"
        ],
        [
            "exact: expf_eq0.",
            "VernacExtend",
            "ce637ff86bafca5d8359473e8c02af644dcbdc43"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma expf_neq0 x m : x != 0 -> x ^+ m != 0.",
            "VernacStartTheoremProof",
            "5ea5d7dc3f6f39cf19660fdb5ce21a26ee35ff93"
        ],
        [
            "by move=> x_nz; rewrite expf_eq0; apply/nandP; right.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma natf_neq0 n : (n%:R != 0 :> R) = [char R]^'.-nat n.",
            "VernacStartTheoremProof",
            "bed569d4412cf56cd337fd1183a6310e63c62d9f"
        ],
        [
            "have [-> | /prod_prime_decomp->] := posnP n; first by rewrite eqxx.",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "rewrite !big_seq; elim/big_rec: _ => [|[p e] s /=]; first by rewrite oner_eq0.",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "case/mem_prime_decomp=> p_pr _ _; rewrite pnat_mul pnat_exp eqn0Ngt orbC => <-.",
            "VernacExtend",
            "ba44c9d0281a02110ce54645304e6d990debd9c0"
        ],
        [
            "by rewrite natrM natrX mulf_eq0 expf_eq0 negb_or negb_and pnatE ?inE p_pr.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma natf0_char n : n > 0 -> n%:R == 0 :> R -> exists p, p \\in [char R].",
            "VernacStartTheoremProof",
            "11c3836965c729cc84c57815b17e6c7bd305901b"
        ],
        [
            "move=> n_gt0 nR_0; exists (pdiv n`_[char R]).",
            "VernacExtend",
            "78e7d67d2ccb2fdb59a93a81ae29eade30f3f99f"
        ],
        [
            "apply: pnatP (pdiv_dvd _); rewrite ?part_pnat // ?pdiv_prime //.",
            "VernacExtend",
            "56c014161b39aecfb3c54301c2409dba4e8e1857"
        ],
        [
            "by rewrite ltn_neqAle eq_sym partn_eq1 // -natf_neq0 nR_0 /=.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma charf'_nat n : [char R]^'.-nat n = (n%:R != 0 :> R).",
            "VernacStartTheoremProof",
            "d6f986b503dd2e30790c64607e51258a497924a9"
        ],
        [
            "have [-> | n_gt0] := posnP n; first by rewrite eqxx.",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "apply/idP/idP => [|nz_n]; last first.",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "by apply/pnatP=> // p p_pr p_dvd_n; apply: contra nz_n => /dvdn_charf <-.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "apply: contraL => n0; have [// | p charRp] := natf0_char _ n0.",
            "VernacExtend",
            "c574574294cc642b01d157e4c8f21ac2f90e4b5d"
        ],
        [
            "have [p_pr _] := andP charRp; rewrite (eq_pnat _ (eq_negn (charf_eq charRp))).",
            "VernacExtend",
            "aa9d5fbc682ed874cd64b2543ca6c859b978e924"
        ],
        [
            "by rewrite p'natE // (dvdn_charf charRp) n0.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma charf0P : [char R] =i pred0 <-> (forall n, (n%:R == 0 :> R) = (n == 0)%N).",
            "VernacStartTheoremProof",
            "5ea2fb4853cc0bf554c4a3cf11babbea30a077db"
        ],
        [
            "split=> charF0 n; last by rewrite !inE charF0 andbC; case: eqP => // ->.",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "have [-> | n_gt0] := posnP; first exact: eqxx.",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "by apply/negP; case/natf0_char=> // p; rewrite charF0.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma eqf_sqr x y : (x ^+ 2 == y ^+ 2) = (x == y) || (x == - y).",
            "VernacStartTheoremProof",
            "a8c91063e0c973cbbb81e8e2eb4d7bff7de0b8bc"
        ],
        [
            "by rewrite -subr_eq0 subr_sqr mulf_eq0 subr_eq0 addr_eq0.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma mulfI x : x != 0 -> injective ( *%R x).",
            "VernacStartTheoremProof",
            "753ce8cc7eaef00e6bbcae5518f077e8a46b841f"
        ],
        [
            "move=> nz_x y z; apply: contra_eq => neq_yz.",
            "VernacExtend",
            "d6ebf3361f380a12d5c2c9bbb7ea363132c48b36"
        ],
        [
            "by rewrite -subr_eq0 -mulrBr mulf_neq0 ?subr_eq0.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma mulIf x : x != 0 -> injective ( *%R^~ x).",
            "VernacStartTheoremProof",
            "8baf9e47513cd4e263f46e5abedd4cf002928dca"
        ],
        [
            "by move=> nz_x y z; rewrite -!(mulrC x); apply: mulfI.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma divfI x : x != 0 -> injective (fun y => x / y).",
            "VernacStartTheoremProof",
            "4fb9ef30f54d6b07614046cb274c31d6664fc466"
        ],
        [
            "by move/mulfI/inj_comp; apply; apply: invr_inj.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma divIf y : y != 0 -> injective (fun x => x / y).",
            "VernacStartTheoremProof",
            "3fb7e587155641afc4dc7f7e8b75144de1498783"
        ],
        [
            "by rewrite -invr_eq0; apply: mulIf.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma sqrf_eq1 x : (x ^+ 2 == 1) = (x == 1) || (x == -1).",
            "VernacStartTheoremProof",
            "8d8fccbb3f9b557225ec7ee55c5232dbdda3c335"
        ],
        [
            "by rewrite -subr_eq0 subr_sqr_1 mulf_eq0 subr_eq0 addr_eq0.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma expfS_eq1 x n : (x ^+ n.+1 == 1) = (x == 1) || (\\sum_(i < n.+1) x ^+ i == 0).",
            "VernacStartTheoremProof",
            "a722e79962434abf824efc79982aa202831e9d67"
        ],
        [
            "by rewrite -![_ == 1]subr_eq0 subrX1 mulf_eq0.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma lregP x : reflect (lreg x) (x != 0).",
            "VernacStartTheoremProof",
            "6b1352540efbcc8c2abb6969a34d4a27d8926f77"
        ],
        [
            "by apply: (iffP idP) => [/mulfI | /lreg_neq0].",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma rregP x : reflect (rreg x) (x != 0).",
            "VernacStartTheoremProof",
            "e2f00e6eea8d4f14b31c98303edc05b3f1a202ae"
        ],
        [
            "by apply: (iffP idP) => [/mulIf | /rreg_neq0].",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Canonical regular_idomainType := [idomainType of R^o].",
            "VernacDefinition",
            "013921cf9c47b609fd99cc3c90f6192dce37bbba"
        ],
        [
            "End IntegralDomainTheory.",
            "VernacEndSegment",
            "462a5b3b4927cc6ad2445f8992bca5cfcc4947dd"
        ],
        [
            "Arguments lregP {R x}.",
            "VernacArguments",
            "c71f7ee3cd23ee05d555f3345c529eace3f9dd11"
        ],
        [
            "Arguments rregP {R x}.",
            "VernacArguments",
            "4558702a5d6fb7af1edb0d33ba6f76cd96b6663e"
        ],
        [
            "Module Field.",
            "VernacDefineModule",
            "1e22a8b26476316f68df1c1ef3452c0e53a9f8ad"
        ],
        [
            "Definition mixin_of (R : unitRingType) := forall x : R, x != 0 -> x \\in unit.",
            "VernacDefinition",
            "f818dc1385a47c99378a57c478d5a20bf0116c0e"
        ],
        [
            "Lemma IdomainMixin R : mixin_of R -> IntegralDomain.axiom R.",
            "VernacStartTheoremProof",
            "8c0db0349fc4f137a77d66cbdb5467b5913f7df3"
        ],
        [
            "move=> m x y xy0; apply/norP=> [[]] /m Ux /m.",
            "VernacExtend",
            "d6ebf3361f380a12d5c2c9bbb7ea363132c48b36"
        ],
        [
            "by rewrite -(unitrMr _ Ux) xy0 unitr0.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Section Mixins.",
            "VernacBeginSection",
            "f185e97ba95a632fa35473f569cf321fce90fb31"
        ],
        [
            "Definition axiom (R : ringType) inv := forall x : R, x != 0 -> inv x * x = 1.",
            "VernacDefinition",
            "4e385a67145ef0eba39033d1c4b1ccd1a1a97aeb"
        ],
        [
            "Variables (R : comRingType) (inv : R -> R).",
            "VernacAssumption",
            "7503a9a58ac14d6a3c7831c61a027ae4418a1503"
        ],
        [
            "Hypotheses (mulVf : axiom inv) (inv0 : inv 0 = 0).",
            "VernacAssumption",
            "69b759427252c106bdcc54d204b66ac13d546183"
        ],
        [
            "Fact intro_unit (x y : R) : y * x = 1 -> x != 0.",
            "VernacStartTheoremProof",
            "6968597519c635fbe65409a00f3dbf3d7e8731cf"
        ],
        [
            "by move=> yx1; apply: contraNneq (oner_neq0 R) => x0; rewrite -yx1 x0 mulr0.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Fact inv_out : {in predC (predC1 0), inv =1 id}.",
            "VernacStartTheoremProof",
            "78077ff75cb8659f79cefea9ddf8382ae513df4d"
        ],
        [
            "by move=> x /negbNE/eqP->.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Definition UnitMixin := ComUnitRing.Mixin mulVf intro_unit inv_out.",
            "VernacDefinition",
            "25dbb783dca6c337e8ea4e769465c86bf9193908"
        ],
        [
            "Definition UnitRingType := [comUnitRingType of UnitRingType R UnitMixin].",
            "VernacDefinition",
            "370d8528374afad9621c823fd28ed635f82dcbdc"
        ],
        [
            "Definition IdomainType := IdomainType UnitRingType (@IdomainMixin UnitRingType (fun => id)).",
            "VernacDefinition",
            "4f7627676852738ffd345adeb13feec43f19e06c"
        ],
        [
            "Lemma Mixin : mixin_of IdomainType.",
            "VernacStartTheoremProof",
            "3b87e58e88d6e272240704d5706b7d571b60e8a5"
        ],
        [
            "by [].",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "End Mixins.",
            "VernacEndSegment",
            "8c29f14041452bf33af9c4562886d60287df9e37"
        ],
        [
            "Section ClassDef.",
            "VernacBeginSection",
            "a5b792261e6c496f5a1a8d0f7da8c96156ca2fed"
        ],
        [
            "Record class_of (F : Type) : Type := Class { base : IntegralDomain.class_of F; mixin : mixin_of (UnitRing.Pack base) }.",
            "VernacInductive",
            "a8281bf0f9b9c1af5ce4b5021c8004a8c972d1c3"
        ],
        [
            "Local Coercion base : class_of >-> IntegralDomain.class_of.",
            "VernacCoercion",
            "70f8fd9b5f07422f70ce94214ee4fa98df1892c1"
        ],
        [
            "Structure type := Pack {sort; _ : class_of sort}.",
            "VernacInductive",
            "42b0161295055637e72e97af35c3d44479cc946b"
        ],
        [
            "Local Coercion sort : type >-> Sortclass.",
            "VernacCoercion",
            "e4478cd37693106f84ed020bd073c4970dc87530"
        ],
        [
            "Variable (T : Type) (cT : type).",
            "VernacAssumption",
            "eb35f5737a32cba56acb24ac87490232dc2dfcb9"
        ],
        [
            "Definition class := let: Pack _ c as cT' := cT return class_of cT' in c.",
            "VernacDefinition",
            "0e4a80652d474f8010316ff26a5322b5207d82a3"
        ],
        [
            "Definition clone c of phant_id class c := @Pack T c.",
            "VernacDefinition",
            "e082321bed0d5d4d78139419fead577313b82668"
        ],
        [
            "Let xT := let: Pack T _ := cT in T.",
            "VernacDefinition",
            "0a87c77e3a5ac8febf0910b95d7b998b7cb9cf6d"
        ],
        [
            "Notation xclass := (class : class_of xT).",
            "VernacSyntacticDefinition",
            "e136614fedd7b331a23b54adad5b0bce11895ed4"
        ],
        [
            "Definition pack b0 (m0 : mixin_of (@UnitRing.Pack T b0)) := fun bT b & phant_id (IntegralDomain.class bT) b => fun m & phant_id m0 m => Pack (@Class T b m).",
            "VernacDefinition",
            "6f0425e763b173228e237036265c251bc41937ad"
        ],
        [
            "Definition eqType := @Equality.Pack cT xclass.",
            "VernacDefinition",
            "6139f412b89e62ff13c9c707c885de4b39151e9d"
        ],
        [
            "Definition choiceType := @Choice.Pack cT xclass.",
            "VernacDefinition",
            "f62d3090382a5ea70b978e0633e0376c4558db55"
        ],
        [
            "Definition zmodType := @Zmodule.Pack cT xclass.",
            "VernacDefinition",
            "d292a93c19cc9e36e99db073c0c14c27655bcd85"
        ],
        [
            "Definition ringType := @Ring.Pack cT xclass.",
            "VernacDefinition",
            "8a9134d1dac21560b6c04dc7467c51b02f0db83e"
        ],
        [
            "Definition comRingType := @ComRing.Pack cT xclass.",
            "VernacDefinition",
            "7ae57e52d5bc541f3670f9768868f067c230ad65"
        ],
        [
            "Definition unitRingType := @UnitRing.Pack cT xclass.",
            "VernacDefinition",
            "2fc21101404f298267a4a84da270b73575f3bf98"
        ],
        [
            "Definition comUnitRingType := @ComUnitRing.Pack cT xclass.",
            "VernacDefinition",
            "f27a825845ae5f4cb6a943bc8d5fa37920701569"
        ],
        [
            "Definition idomainType := @IntegralDomain.Pack cT xclass.",
            "VernacDefinition",
            "3e0200ebcc33abeac163cc9c30b3a33195446b9c"
        ],
        [
            "End ClassDef.",
            "VernacEndSegment",
            "bce1c8832045d8291c44a3fb67e9767782d2745b"
        ],
        [
            "Module Exports.",
            "VernacDefineModule",
            "d4a1114ec53f746523a7dec57823f7f03e51fa24"
        ],
        [
            "Coercion base : class_of >-> IntegralDomain.class_of.",
            "VernacCoercion",
            "14501e17f126f53b31478b173567d29417f7720c"
        ],
        [
            "Arguments mixin [F] c [x].",
            "VernacArguments",
            "1d4de2ed21ed07d2893656bec94d4ad09f134c21"
        ],
        [
            "Coercion mixin : class_of >-> mixin_of.",
            "VernacCoercion",
            "6e94763ee53fdac946511987d81c3f6daccc67c3"
        ],
        [
            "Coercion sort : type >-> Sortclass.",
            "VernacCoercion",
            "9e1cbf06afa0d2731dbb8bfd6b9ae32be22a8ae7"
        ],
        [
            "Bind Scope ring_scope with sort.",
            "VernacBindScope",
            "ac04d07dda43f0036576b2a438f8490c7ac4d59b"
        ],
        [
            "Coercion eqType : type >-> Equality.type.",
            "VernacCoercion",
            "58308c67b5e73c9e004d57c486a5071598a25e8c"
        ],
        [
            "Canonical eqType.",
            "VernacCanonical",
            "dd1ac877a396f552e2a8f23e59be45903d8b15ad"
        ],
        [
            "Coercion choiceType : type >-> Choice.type.",
            "VernacCoercion",
            "bdc8d608f4b963a8606cd33ad18b1977a8bcb78d"
        ],
        [
            "Canonical choiceType.",
            "VernacCanonical",
            "af7a1759ddd13e2b7e4e1ce16b6a3595a77b5659"
        ],
        [
            "Coercion zmodType : type >-> Zmodule.type.",
            "VernacCoercion",
            "4ec9ca49e3551546d7d514a97127c47a11747e3a"
        ],
        [
            "Canonical zmodType.",
            "VernacCanonical",
            "9a6f278270af4b6ced100d8e0c90c7719a960a86"
        ],
        [
            "Coercion ringType : type >-> Ring.type.",
            "VernacCoercion",
            "3563a3bf802f370588b71df18917d551f221a05e"
        ],
        [
            "Canonical ringType.",
            "VernacCanonical",
            "b7d4c328ac58b23ee4b52bd787434621c20d2c4d"
        ],
        [
            "Coercion comRingType : type >-> ComRing.type.",
            "VernacCoercion",
            "0b68ec2f3c5c76d295167a623512d46ac31b80ad"
        ],
        [
            "Canonical comRingType.",
            "VernacCanonical",
            "30f9087081da845c9c545aeb8d7375204ed4f1b3"
        ],
        [
            "Coercion unitRingType : type >-> UnitRing.type.",
            "VernacCoercion",
            "f3d1399a2d1a8f93182c9b698d4a4a7d12624259"
        ],
        [
            "Canonical unitRingType.",
            "VernacCanonical",
            "5adf5dbcca23e501d2be7f60fe9ad3def13431b8"
        ],
        [
            "Coercion comUnitRingType : type >-> ComUnitRing.type.",
            "VernacCoercion",
            "c86b5a5eba0fa8431bb0c4dd719c4f48343ce09a"
        ],
        [
            "Canonical comUnitRingType.",
            "VernacCanonical",
            "74522c0e1d11ec46568915dda5f1829b7bbe8a04"
        ],
        [
            "Coercion idomainType : type >-> IntegralDomain.type.",
            "VernacCoercion",
            "456263ba8f66daa57f4e91cb63c7cf22a8129be1"
        ],
        [
            "Canonical idomainType.",
            "VernacCanonical",
            "ec8e76c80fed77c2b91406ec8a21033d94f8380d"
        ],
        [
            "Notation fieldType := type.",
            "VernacSyntacticDefinition",
            "f67659e409e2ca4655e075c0c1846df2c571875e"
        ],
        [
            "Notation FieldType T m := (@pack T _ m _ _ id _ id).",
            "VernacSyntacticDefinition",
            "849cf411ae7fa0fca1be541bb2dceee4b3424e63"
        ],
        [
            "Arguments Mixin {R inv} mulVf inv0 [x] nz_x.",
            "VernacArguments",
            "0fefbfd5b7a41da7e9fcd7bd7b2725646e1bf1c4"
        ],
        [
            "Notation FieldUnitMixin := UnitMixin.",
            "VernacSyntacticDefinition",
            "b4e6c2e0536d7af3c8a80236e11e428bfde802a4"
        ],
        [
            "Notation FieldIdomainMixin := IdomainMixin.",
            "VernacSyntacticDefinition",
            "5b3e68bddbd8bafe0972443ddac66de64b5869cc"
        ],
        [
            "Notation FieldMixin := Mixin.",
            "VernacSyntacticDefinition",
            "a8014f793ee5259a254b31aefffdbaa1c4a122c9"
        ],
        [
            "Notation \"[ 'fieldType' 'of' T 'for' cT ]\" := (@clone T cT _ idfun) (at level 0, format \"[ 'fieldType' 'of' T 'for' cT ]\") : form_scope.",
            "VernacNotation",
            "4ea12e1fb317ac545d5c18d014b23377d5beeb17"
        ],
        [
            "Notation \"[ 'fieldType' 'of' T ]\" := (@clone T _ _ id) (at level 0, format \"[ 'fieldType' 'of' T ]\") : form_scope.",
            "VernacNotation",
            "204b435e9c90f5dd2fd900633eeb71c744be5b2b"
        ],
        [
            "End Exports.",
            "VernacEndSegment",
            "71efedae7ccffd696e1ffe5d8ae6baa8a4484918"
        ],
        [
            "End Field.",
            "VernacEndSegment",
            "a3b24fe94a35f8c814b540732719f98810a7a91d"
        ],
        [
            "Import Field.Exports.",
            "VernacImport",
            "1a8ca644349517d9a02acb47177311a57f17c725"
        ],
        [
            "Section FieldTheory.",
            "VernacBeginSection",
            "38e3641158b5a9e2a71e0b068351a071d7eb34d5"
        ],
        [
            "Variable F : fieldType.",
            "VernacAssumption",
            "dfbeb3104cff90ac5c843c17124389867a4c6a4a"
        ],
        [
            "Implicit Types x y : F.",
            "VernacReserve",
            "7cadf5e84ccc82fdd8236672c79612628679ff75"
        ],
        [
            "Lemma fieldP : Field.mixin_of F.",
            "VernacStartTheoremProof",
            "ff448de934d51b3a2b2a1ade0e0e013b9fd01b70"
        ],
        [
            "by case: F => T [].",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma unitfE x : (x \\in unit) = (x != 0).",
            "VernacStartTheoremProof",
            "956b5c83412ae44e7e1fc5da18e49a8670c2b0bd"
        ],
        [
            "by apply/idP/idP=> [/(memPn _)-> | /fieldP]; rewrite ?unitr0.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma mulVf x : x != 0 -> x^-1 * x = 1.",
            "VernacStartTheoremProof",
            "c6bd0b46c4610c0ffdb1787ec1d067aa920faa7a"
        ],
        [
            "by rewrite -unitfE; apply: mulVr.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma divff x : x != 0 -> x / x = 1.",
            "VernacStartTheoremProof",
            "8465dd6c621d3982869cd9f5564755fcf22a646c"
        ],
        [
            "by rewrite -unitfE; apply: divrr.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Definition mulfV := divff.",
            "VernacDefinition",
            "7e42cb2e29485cfaba127e4e7f4eb7b592b25eba"
        ],
        [
            "Lemma mulKf x : x != 0 -> cancel ( *%R x) ( *%R x^-1).",
            "VernacStartTheoremProof",
            "e96dd975dc274cf2c7916da60ed459917c605e77"
        ],
        [
            "by rewrite -unitfE; apply: mulKr.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma mulVKf x : x != 0 -> cancel ( *%R x^-1) ( *%R x).",
            "VernacStartTheoremProof",
            "261623d89ec5f770ec49036f9316709f35190831"
        ],
        [
            "by rewrite -unitfE; apply: mulVKr.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma mulfK x : x != 0 -> cancel ( *%R^~ x) ( *%R^~ x^-1).",
            "VernacStartTheoremProof",
            "0ae1bb5dfe07fe19d19eed62075358622b0df507"
        ],
        [
            "by rewrite -unitfE; apply: mulrK.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma mulfVK x : x != 0 -> cancel ( *%R^~ x^-1) ( *%R^~ x).",
            "VernacStartTheoremProof",
            "b39c1febfbda153db0b68e817cf4fd1ec9ce1a0f"
        ],
        [
            "by rewrite -unitfE; apply: divrK.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Definition divfK := mulfVK.",
            "VernacDefinition",
            "133280c3cb684ca6bef6261c1a137c63b93a7c38"
        ],
        [
            "Lemma invfM : {morph @inv F : x y / x * y}.",
            "VernacStartTheoremProof",
            "bc81ea109c989b1ac35ce746de2b332c66188e36"
        ],
        [
            "move=> x y; case: (eqVneq x 0) => [-> |nzx]; first by rewrite !(mul0r, invr0).",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "case: (eqVneq y 0) => [-> |nzy]; first by rewrite !(mulr0, invr0).",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "by rewrite mulrC invrM ?unitfE.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma invf_div x y : (x / y)^-1 = y / x.",
            "VernacStartTheoremProof",
            "03424c694c83907eef4ddb9a53a7bdd5e5d0367f"
        ],
        [
            "by rewrite invfM invrK mulrC.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma divKf x : x != 0 -> involutive (fun y => x / y).",
            "VernacStartTheoremProof",
            "db6715cc95b95a5ae264ff3857a1ac0da9950e7b"
        ],
        [
            "by move=> nz_x y; rewrite invf_div mulrC divfK.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma expfB_cond m n x : (x == 0) + n <= m -> x ^+ (m - n) = x ^+ m / x ^+ n.",
            "VernacStartTheoremProof",
            "6b002dbda703a07a4df4a5ec26f72d189c3183ef"
        ],
        [
            "move/subnK=> <-; rewrite addnA addnK !exprD.",
            "VernacExtend",
            "057edeb0967475c7ea5e8c98c449ddc5613eddc1"
        ],
        [
            "have [-> | nz_x] := altP eqP; first by rewrite !mulr0 !mul0r.",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "by rewrite mulfK ?expf_neq0.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma expfB m n x : n < m -> x ^+ (m - n) = x ^+ m / x ^+ n.",
            "VernacStartTheoremProof",
            "306389307ab69453158fff5c74a1b22ff4559d77"
        ],
        [
            "by move=> lt_n_m; apply: expfB_cond; case: eqP => // _; apply: ltnW.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma prodfV I r (P : pred I) (E : I -> F) : \\prod_(i <- r | P i) (E i)^-1 = (\\prod_(i <- r | P i) E i)^-1.",
            "VernacStartTheoremProof",
            "57d62f7fc2e89dfe52c30bfb1199954fba6dd6f6"
        ],
        [
            "by rewrite (big_morph _ invfM (invr1 F)).",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma prodf_div I r (P : pred I) (E D : I -> F) : \\prod_(i <- r | P i) (E i / D i) = \\prod_(i <- r | P i) E i / \\prod_(i <- r | P i) D i.",
            "VernacStartTheoremProof",
            "a084150006bb14395ca2d4553f7c2da78be6616d"
        ],
        [
            "by rewrite big_split prodfV.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma telescope_prodf n m (f : nat -> F) : (forall k, n < k < m -> f k != 0) -> n < m -> \\prod_(n <= k < m) (f k.+1 / f k) = f m / f n.",
            "VernacStartTheoremProof",
            "73c694f56a432ceaa5e47c3953a53a542911bf00"
        ],
        [
            "move=> nz_f ltnm; apply: invr_inj; rewrite prodf_div !invf_div -prodf_div.",
            "VernacExtend",
            "f7feb259d6220ca40e8a86b90bd06f137aa140ac"
        ],
        [
            "by apply: telescope_prodr => // k /nz_f; rewrite unitfE.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma addf_div x1 y1 x2 y2 : y1 != 0 -> y2 != 0 -> x1 / y1 + x2 / y2 = (x1 * y2 + x2 * y1) / (y1 * y2).",
            "VernacStartTheoremProof",
            "847beeecec19a56a9354e0d9be4aff66f3236822"
        ],
        [
            "by move=> nzy1 nzy2; rewrite invfM mulrDl !mulrA mulrAC !mulfK.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma mulf_div x1 y1 x2 y2 : (x1 / y1) * (x2 / y2) = (x1 * x2) / (y1 * y2).",
            "VernacStartTheoremProof",
            "960d021815bd5e2053424342a09afe214d5fef76"
        ],
        [
            "by rewrite mulrACA -invfM.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma char0_natf_div : [char F] =i pred0 -> forall m d, d %| m -> (m %/ d)%:R = m%:R / d%:R :> F.",
            "VernacStartTheoremProof",
            "881910151bfa710de33bb68d22bd714f78408e93"
        ],
        [
            "move/charf0P=> char0F m [|d] d_dv_m; first by rewrite divn0 invr0 mulr0.",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "by rewrite natr_div // unitfE char0F.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Section FieldMorphismInj.",
            "VernacBeginSection",
            "7dd5b71f424dad16d6408bc327fe771ee40acc5d"
        ],
        [
            "Variables (R : ringType) (f : {rmorphism F -> R}).",
            "VernacAssumption",
            "ff73c9a65a6d821cde9b6855fcecacf474989040"
        ],
        [
            "Lemma fmorph_eq0 x : (f x == 0) = (x == 0).",
            "VernacStartTheoremProof",
            "99fc6d6abadcea547192209e8c21f8f1a677cf37"
        ],
        [
            "have [-> | nz_x] := altP (x =P _); first by rewrite rmorph0 eqxx.",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "apply/eqP; move/(congr1 ( *%R (f x^-1)))/eqP.",
            "VernacExtend",
            "86bb0d3d5ae27b38aac15f69d532d662f1518315"
        ],
        [
            "by rewrite -rmorphM mulVf // mulr0 rmorph1 ?oner_eq0.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma fmorph_inj : injective f.",
            "VernacStartTheoremProof",
            "ed45160a00c2497657323026094bc68f34d91d10"
        ],
        [
            "move=> x y eqfxy; apply/eqP; rewrite -subr_eq0 -fmorph_eq0 rmorphB //.",
            "VernacExtend",
            "f7feb259d6220ca40e8a86b90bd06f137aa140ac"
        ],
        [
            "by rewrite eqfxy subrr.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma fmorph_eq1 x : (f x == 1) = (x == 1).",
            "VernacStartTheoremProof",
            "22801b198332909b642b9447f00f5b20d6d979de"
        ],
        [
            "by rewrite -(inj_eq fmorph_inj) rmorph1.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma fmorph_char : [char R] =i [char F].",
            "VernacStartTheoremProof",
            "5fb494abfca8f66b6d865f615ff472b3a2518f1a"
        ],
        [
            "by move=> p; rewrite !inE -fmorph_eq0 rmorph_nat.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "End FieldMorphismInj.",
            "VernacEndSegment",
            "d4810a88177dc0c556a97f82e394404b4edd7ab1"
        ],
        [
            "Section FieldMorphismInv.",
            "VernacBeginSection",
            "02cc195aa4732ded7c05bdfc79cea8fafac8b5c1"
        ],
        [
            "Variables (R : unitRingType) (f : {rmorphism F -> R}).",
            "VernacAssumption",
            "9a65d744a4604e8d026f7ab2eb48588b777a5d13"
        ],
        [
            "Lemma fmorph_unit x : (f x \\in unit) = (x != 0).",
            "VernacStartTheoremProof",
            "a47a803e76a610ceb457b991731ef766e93a88a2"
        ],
        [
            "have [-> |] := altP (x =P _); first by rewrite rmorph0 unitr0.",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "by rewrite -unitfE; apply: rmorph_unit.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma fmorphV : {morph f: x / x^-1}.",
            "VernacStartTheoremProof",
            "9d82e76c13a2ed1543ae18f535d40f321c3eca25"
        ],
        [
            "move=> x; have [-> | nz_x] := eqVneq x 0; first by rewrite !(invr0, rmorph0).",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "by rewrite rmorphV ?unitfE.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma fmorph_div : {morph f : x y / x / y}.",
            "VernacStartTheoremProof",
            "722577c9c897e2b927f9a01ae924674d8bb50c26"
        ],
        [
            "by move=> x y; rewrite rmorphM fmorphV.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "End FieldMorphismInv.",
            "VernacEndSegment",
            "c7d5eebfe8dba08f8f2583d56461f87db2dff85f"
        ],
        [
            "Canonical regular_fieldType := [fieldType of F^o].",
            "VernacDefinition",
            "79e13af4af9a575bf9af013ab2b49dab01d54601"
        ],
        [
            "Section ModuleTheory.",
            "VernacBeginSection",
            "194a037ef26fa923205b41ebe260d78a40817076"
        ],
        [
            "Variable V : lmodType F.",
            "VernacAssumption",
            "ab74b69d171814ff376a8e14c2890ed97509c620"
        ],
        [
            "Implicit Types (a : F) (v : V).",
            "VernacReserve",
            "2d7fd90b680abd936900431868d4811bb9b666c3"
        ],
        [
            "Lemma scalerK a : a != 0 -> cancel ( *:%R a : V -> V) ( *:%R a^-1).",
            "VernacStartTheoremProof",
            "f7d8a13918df0cd7a8ec5295630df663a0561a6b"
        ],
        [
            "by move=> nz_a v; rewrite scalerA mulVf // scale1r.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma scalerKV a : a != 0 -> cancel ( *:%R a^-1 : V -> V) ( *:%R a).",
            "VernacStartTheoremProof",
            "5583c333c26d4c9b7c90cf56877cab0d3870c58f"
        ],
        [
            "by rewrite -invr_eq0 -{3}[a]invrK; apply: scalerK.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma scalerI a : a != 0 -> injective ( *:%R a : V -> V).",
            "VernacStartTheoremProof",
            "bbec0e4d2ca11678a3eb28779125ce190fb40bb3"
        ],
        [
            "by move=> nz_a; apply: can_inj (scalerK nz_a).",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma scaler_eq0 a v : (a *: v == 0) = (a == 0) || (v == 0).",
            "VernacStartTheoremProof",
            "209065b09e0932d8fa359ae6aa2ff744b7e68f88"
        ],
        [
            "have [-> | nz_a] := altP (a =P _); first by rewrite scale0r eqxx.",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "by rewrite (can2_eq (scalerK nz_a) (scalerKV nz_a)) scaler0.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma rpredZeq S (modS : submodPred S) (kS : keyed_pred modS) a v : (a *: v \\in kS) = (a == 0) || (v \\in kS).",
            "VernacStartTheoremProof",
            "a094ff8286e732546d5678f5782d8206305e819f"
        ],
        [
            "have [-> | nz_a] := altP eqP; first by rewrite scale0r rpred0.",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "by apply/idP/idP; first rewrite -{2}(scalerK nz_a v); apply: rpredZ.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "End ModuleTheory.",
            "VernacEndSegment",
            "1789a844ceed25e02b9575f3ab58224ced17d04d"
        ],
        [
            "Lemma char_lalg (A : lalgType F) : [char A] =i [char F].",
            "VernacStartTheoremProof",
            "cfc6909c7cebda9320a28ba5c6085dd3b2377ca4"
        ],
        [
            "by move=> p; rewrite inE -scaler_nat scaler_eq0 oner_eq0 orbF.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Section Predicates.",
            "VernacBeginSection",
            "9df9f8e47ebf8f05e97818dc41a6decf2caadceb"
        ],
        [
            "Context (S : pred_class) (divS : @divrPred F S) (kS : keyed_pred divS).",
            "VernacContext",
            "aaa9488cc65e0098243e10e4f1f839a854c6e1c5"
        ],
        [
            "Lemma fpredMl x y : x \\in kS -> x != 0 -> (x * y \\in kS) = (y \\in kS).",
            "VernacStartTheoremProof",
            "93d5168299c9433c005e10df2bfcf746ce14e68b"
        ],
        [
            "by rewrite -!unitfE; apply: rpredMl.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma fpredMr x y : x \\in kS -> x != 0 -> (y * x \\in kS) = (y \\in kS).",
            "VernacStartTheoremProof",
            "81a7fb41516ab791fcc0238d5f271883edd0e9d6"
        ],
        [
            "by rewrite -!unitfE; apply: rpredMr.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma fpred_divl x y : x \\in kS -> x != 0 -> (x / y \\in kS) = (y \\in kS).",
            "VernacStartTheoremProof",
            "c557ed75f9483e999dc1f8e77806efee202d07b2"
        ],
        [
            "by rewrite -!unitfE; apply: rpred_divl.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma fpred_divr x y : x \\in kS -> x != 0 -> (y / x \\in kS) = (y \\in kS).",
            "VernacStartTheoremProof",
            "3cadf1f5d69783bb2e06bd83957abe86aa1f0e63"
        ],
        [
            "by rewrite -!unitfE; apply: rpred_divr.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "End Predicates.",
            "VernacEndSegment",
            "ecbe5da6427239d32e444fa4d516db31ac039acd"
        ],
        [
            "End FieldTheory.",
            "VernacEndSegment",
            "4b550eaf8121325dceba62dfc3f8dd9994691b4c"
        ],
        [
            "Arguments fmorph_inj {F R} f [x1 x2].",
            "VernacArguments",
            "d1d7334bc387a492a68f8728f16ac2e0771ae61b"
        ],
        [
            "Module DecidableField.",
            "VernacDefineModule",
            "598f77391aea3d6453123d2848e584df4e2f642c"
        ],
        [
            "Definition axiom (R : unitRingType) (s : seq R -> pred (formula R)) := forall e f, reflect (holds e f) (s e f).",
            "VernacDefinition",
            "21a81e2fbd7ea0ebaf259684c947f8ee6ef3aa04"
        ],
        [
            "Record mixin_of (R : unitRingType) : Type := Mixin { sat : seq R -> pred (formula R); satP : axiom sat}.",
            "VernacInductive",
            "b0010a27b7498a3d992d43a4da84b86f6bea8f08"
        ],
        [
            "Section ClassDef.",
            "VernacBeginSection",
            "a5b792261e6c496f5a1a8d0f7da8c96156ca2fed"
        ],
        [
            "Record class_of (F : Type) : Type := Class {base : Field.class_of F; mixin : mixin_of (UnitRing.Pack base)}.",
            "VernacInductive",
            "37e63023a521215d282d32b3524eeabac9705122"
        ],
        [
            "Local Coercion base : class_of >-> Field.class_of.",
            "VernacCoercion",
            "ccf80559f53b06e77811bae4a880f5cda70c28d5"
        ],
        [
            "Structure type := Pack {sort; _ : class_of sort}.",
            "VernacInductive",
            "42b0161295055637e72e97af35c3d44479cc946b"
        ],
        [
            "Local Coercion sort : type >-> Sortclass.",
            "VernacCoercion",
            "e4478cd37693106f84ed020bd073c4970dc87530"
        ],
        [
            "Variable (T : Type) (cT : type).",
            "VernacAssumption",
            "eb35f5737a32cba56acb24ac87490232dc2dfcb9"
        ],
        [
            "Definition class := let: Pack _ c as cT' := cT return class_of cT' in c.",
            "VernacDefinition",
            "0e4a80652d474f8010316ff26a5322b5207d82a3"
        ],
        [
            "Definition clone c of phant_id class c := @Pack T c.",
            "VernacDefinition",
            "e082321bed0d5d4d78139419fead577313b82668"
        ],
        [
            "Let xT := let: Pack T _ := cT in T.",
            "VernacDefinition",
            "0a87c77e3a5ac8febf0910b95d7b998b7cb9cf6d"
        ],
        [
            "Notation xclass := (class : class_of xT).",
            "VernacSyntacticDefinition",
            "e136614fedd7b331a23b54adad5b0bce11895ed4"
        ],
        [
            "Definition pack b0 (m0 : mixin_of (@UnitRing.Pack T b0)) := fun bT b & phant_id (Field.class bT) b => fun m & phant_id m0 m => Pack (@Class T b m).",
            "VernacDefinition",
            "b27a9010a7315291e5913a046123a16f21e9c566"
        ],
        [
            "Definition eqType := @Equality.Pack cT xclass.",
            "VernacDefinition",
            "6139f412b89e62ff13c9c707c885de4b39151e9d"
        ],
        [
            "Definition choiceType := @Choice.Pack cT xclass.",
            "VernacDefinition",
            "f62d3090382a5ea70b978e0633e0376c4558db55"
        ],
        [
            "Definition zmodType := @Zmodule.Pack cT xclass.",
            "VernacDefinition",
            "d292a93c19cc9e36e99db073c0c14c27655bcd85"
        ],
        [
            "Definition ringType := @Ring.Pack cT xclass.",
            "VernacDefinition",
            "8a9134d1dac21560b6c04dc7467c51b02f0db83e"
        ],
        [
            "Definition comRingType := @ComRing.Pack cT xclass.",
            "VernacDefinition",
            "7ae57e52d5bc541f3670f9768868f067c230ad65"
        ],
        [
            "Definition unitRingType := @UnitRing.Pack cT xclass.",
            "VernacDefinition",
            "2fc21101404f298267a4a84da270b73575f3bf98"
        ],
        [
            "Definition comUnitRingType := @ComUnitRing.Pack cT xclass.",
            "VernacDefinition",
            "f27a825845ae5f4cb6a943bc8d5fa37920701569"
        ],
        [
            "Definition idomainType := @IntegralDomain.Pack cT xclass.",
            "VernacDefinition",
            "3e0200ebcc33abeac163cc9c30b3a33195446b9c"
        ],
        [
            "Definition fieldType := @Field.Pack cT xclass.",
            "VernacDefinition",
            "81fdf5f63ff476c1548f5cd56bda88a32a445f2c"
        ],
        [
            "End ClassDef.",
            "VernacEndSegment",
            "bce1c8832045d8291c44a3fb67e9767782d2745b"
        ],
        [
            "Module Exports.",
            "VernacDefineModule",
            "d4a1114ec53f746523a7dec57823f7f03e51fa24"
        ],
        [
            "Coercion base : class_of >-> Field.class_of.",
            "VernacCoercion",
            "6dee6c0681b4a4ce6e552ef128227b6fbb900047"
        ],
        [
            "Coercion mixin : class_of >-> mixin_of.",
            "VernacCoercion",
            "6e94763ee53fdac946511987d81c3f6daccc67c3"
        ],
        [
            "Coercion sort : type >-> Sortclass.",
            "VernacCoercion",
            "9e1cbf06afa0d2731dbb8bfd6b9ae32be22a8ae7"
        ],
        [
            "Bind Scope ring_scope with sort.",
            "VernacBindScope",
            "ac04d07dda43f0036576b2a438f8490c7ac4d59b"
        ],
        [
            "Coercion eqType : type >-> Equality.type.",
            "VernacCoercion",
            "58308c67b5e73c9e004d57c486a5071598a25e8c"
        ],
        [
            "Canonical eqType.",
            "VernacCanonical",
            "dd1ac877a396f552e2a8f23e59be45903d8b15ad"
        ],
        [
            "Coercion choiceType : type >-> Choice.type.",
            "VernacCoercion",
            "bdc8d608f4b963a8606cd33ad18b1977a8bcb78d"
        ],
        [
            "Canonical choiceType.",
            "VernacCanonical",
            "af7a1759ddd13e2b7e4e1ce16b6a3595a77b5659"
        ],
        [
            "Coercion zmodType : type >-> Zmodule.type.",
            "VernacCoercion",
            "4ec9ca49e3551546d7d514a97127c47a11747e3a"
        ],
        [
            "Canonical zmodType.",
            "VernacCanonical",
            "9a6f278270af4b6ced100d8e0c90c7719a960a86"
        ],
        [
            "Coercion ringType : type >-> Ring.type.",
            "VernacCoercion",
            "3563a3bf802f370588b71df18917d551f221a05e"
        ],
        [
            "Canonical ringType.",
            "VernacCanonical",
            "b7d4c328ac58b23ee4b52bd787434621c20d2c4d"
        ],
        [
            "Coercion comRingType : type >-> ComRing.type.",
            "VernacCoercion",
            "0b68ec2f3c5c76d295167a623512d46ac31b80ad"
        ],
        [
            "Canonical comRingType.",
            "VernacCanonical",
            "30f9087081da845c9c545aeb8d7375204ed4f1b3"
        ],
        [
            "Coercion unitRingType : type >-> UnitRing.type.",
            "VernacCoercion",
            "f3d1399a2d1a8f93182c9b698d4a4a7d12624259"
        ],
        [
            "Canonical unitRingType.",
            "VernacCanonical",
            "5adf5dbcca23e501d2be7f60fe9ad3def13431b8"
        ],
        [
            "Coercion comUnitRingType : type >-> ComUnitRing.type.",
            "VernacCoercion",
            "c86b5a5eba0fa8431bb0c4dd719c4f48343ce09a"
        ],
        [
            "Canonical comUnitRingType.",
            "VernacCanonical",
            "74522c0e1d11ec46568915dda5f1829b7bbe8a04"
        ],
        [
            "Coercion idomainType : type >-> IntegralDomain.type.",
            "VernacCoercion",
            "456263ba8f66daa57f4e91cb63c7cf22a8129be1"
        ],
        [
            "Canonical idomainType.",
            "VernacCanonical",
            "ec8e76c80fed77c2b91406ec8a21033d94f8380d"
        ],
        [
            "Coercion fieldType : type >-> Field.type.",
            "VernacCoercion",
            "cd5d92a540c21184fd435cd430d76175833d5fb3"
        ],
        [
            "Canonical fieldType.",
            "VernacCanonical",
            "2f62ae066c69ea008603157a15e19f08a6a6284b"
        ],
        [
            "Notation decFieldType := type.",
            "VernacSyntacticDefinition",
            "82ce449bd546f599dec480bb450be20536374984"
        ],
        [
            "Notation DecFieldType T m := (@pack T _ m _ _ id _ id).",
            "VernacSyntacticDefinition",
            "240e164fbc506ee0e76660935353a14dd970235d"
        ],
        [
            "Notation DecFieldMixin := Mixin.",
            "VernacSyntacticDefinition",
            "350441d0330b75a106cb06d41de8b33463290147"
        ],
        [
            "Notation \"[ 'decFieldType' 'of' T 'for' cT ]\" := (@clone T cT _ idfun) (at level 0, format \"[ 'decFieldType' 'of' T 'for' cT ]\") : form_scope.",
            "VernacNotation",
            "337188269da82f9265e69840f57ab708e6bf2905"
        ],
        [
            "Notation \"[ 'decFieldType' 'of' T ]\" := (@clone T _ _ id) (at level 0, format \"[ 'decFieldType' 'of' T ]\") : form_scope.",
            "VernacNotation",
            "625f58ed81fa39b885bde7422316325b8fdb1531"
        ],
        [
            "End Exports.",
            "VernacEndSegment",
            "71efedae7ccffd696e1ffe5d8ae6baa8a4484918"
        ],
        [
            "End DecidableField.",
            "VernacEndSegment",
            "444de6c65f212861522d75c33fd3321fd56888c4"
        ],
        [
            "Import DecidableField.Exports.",
            "VernacImport",
            "635117c1c997e2e4d23488112ea16ab12c7ea361"
        ],
        [
            "Section DecidableFieldTheory.",
            "VernacBeginSection",
            "d961d6c23af9ee2b60a7a544299e09ef041b56f6"
        ],
        [
            "Variable F : decFieldType.",
            "VernacAssumption",
            "f6255a5bd3c15c78ce93297f324bf69e6be70322"
        ],
        [
            "Definition sat := DecidableField.sat (DecidableField.class F).",
            "VernacDefinition",
            "a7d81f9e7b3aebe0f6e03c5243f036f2701352ba"
        ],
        [
            "Lemma satP : DecidableField.axiom sat.",
            "VernacStartTheoremProof",
            "cb7aa81213a7090e7d57e4e76fe43e3261d2ff4e"
        ],
        [
            "exact: DecidableField.satP.",
            "VernacExtend",
            "ce637ff86bafca5d8359473e8c02af644dcbdc43"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Fact sol_subproof n f : reflect (exists s, (size s == n) && sat s f) (sat [::] (foldr Exists f (iota 0 n))).",
            "VernacStartTheoremProof",
            "d026c8431eef7a12b3681cd8850a797fd992a945"
        ],
        [
            "apply: (iffP (satP _ _)) => [|[s]]; last first.",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "case/andP=> /eqP sz_s /satP f_s; apply/foldExistsP.",
            "VernacExtend",
            "d62e4c271de3f2a9ff5062b8b89d3c57d965c518"
        ],
        [
            "exists s => // i; rewrite !inE mem_iota -leqNgt add0n => le_n_i.",
            "VernacExtend",
            "fbaa61af20867a5dfb8bb5213ca8048b258f8f3a"
        ],
        [
            "by rewrite !nth_default ?sz_s.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "case/foldExistsP=> e e0 f_e; set s := take n (set_nth 0 e n 0).",
            "VernacExtend",
            "5ced22bf51d40cd3bfc1a1ee7adc8994d4475320"
        ],
        [
            "have sz_s: size s = n by rewrite size_take size_set_nth leq_max leqnn.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "exists s; rewrite sz_s eqxx; apply/satP; apply: eq_holds f_e => i.",
            "VernacExtend",
            "5eb3518873582944035a99f0b1a8d01aac93bf3f"
        ],
        [
            "case: (leqP n i) => [le_n_i | lt_i_n].",
            "VernacExtend",
            "e00fff71ff314c991514fc71c41a3556702e444a"
        ],
        [
            "by rewrite -e0 ?nth_default ?sz_s // !inE mem_iota -leqNgt.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "by rewrite nth_take // nth_set_nth /= eq_sym eqn_leq leqNgt lt_i_n.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Definition sol n f := if sol_subproof n f is ReflectT sP then xchoose sP else nseq n 0.",
            "VernacDefinition",
            "6ab346e57cf46e6bd0c3e8a7067ef9a5d8849884"
        ],
        [
            "Lemma size_sol n f : size (sol n f) = n.",
            "VernacStartTheoremProof",
            "d88b8dcc53a1ac0c06204c222686b6e87ce68704"
        ],
        [
            "rewrite /sol; case: sol_subproof => [sP | _]; last exact: size_nseq.",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "by case/andP: (xchooseP sP) => /eqP.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma solP n f : reflect (exists2 s, size s = n & holds s f) (sat (sol n f) f).",
            "VernacStartTheoremProof",
            "e3132755cf1021ec8947d82cf9818384684603f6"
        ],
        [
            "rewrite /sol; case: sol_subproof => [sP | sPn].",
            "VernacExtend",
            "712d339e99ee17eb7d5033e19ac614eb3ca6b532"
        ],
        [
            "case/andP: (xchooseP sP) => _ ->; left.",
            "VernacExtend",
            "08d8bcc832169db9dfdcdf324ec995b3c016cb52"
        ],
        [
            "by case: sP => s; case/andP; move/eqP=> <-; move/satP; exists s.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "apply: (iffP (satP _ _)); first by exists (nseq n 0); rewrite ?size_nseq.",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "by case=> s sz_s; move/satP=> f_s; case: sPn; exists s; rewrite sz_s eqxx.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma eq_sat f1 f2 : (forall e, holds e f1 <-> holds e f2) -> sat^~ f1 =1 sat^~ f2.",
            "VernacStartTheoremProof",
            "50ce8a2486a284d338aff5955c17dd49e0ca0bb4"
        ],
        [
            "by move=> eqf12 e; apply/satP/satP; case: (eqf12 e).",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma eq_sol f1 f2 : (forall e, holds e f1 <-> holds e f2) -> sol^~ f1 =1 sol^~ f2.",
            "VernacStartTheoremProof",
            "2630fcd776843da47e98e415e92423b1417748cb"
        ],
        [
            "rewrite /sol => /eq_sat eqf12 n.",
            "VernacExtend",
            "3c42b53d0efc26db114b00541ac5e7fcb29e6aeb"
        ],
        [
            "do 2![case: sol_subproof] => //= [f1s f2s | ns1 [s f2s] | [s f1s] []].",
            "VernacExtend",
            "3c42b53d0efc26db114b00541ac5e7fcb29e6aeb"
        ],
        [
            "-",
            "VernacBullet",
            "581cab4bf49fa4b495e569bbda96fc8d28fddcc0"
        ],
        [
            "by apply: eq_xchoose => s; rewrite eqf12.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "-",
            "VernacBullet",
            "581cab4bf49fa4b495e569bbda96fc8d28fddcc0"
        ],
        [
            "by case: ns1; exists s; rewrite -eqf12.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "by exists s; rewrite eqf12.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "End DecidableFieldTheory.",
            "VernacEndSegment",
            "fc960756db0dde6cc8ab38435b7f9cf1f01b70c0"
        ],
        [
            "Arguments satP {F e f}.",
            "VernacArguments",
            "0e74cc5cf69a42d1167a85c7375d7c163658be0f"
        ],
        [
            "Arguments solP {F n f}.",
            "VernacArguments",
            "278bf349f086c1a0b8855a1fbe667ef229459114"
        ],
        [
            "Section QE_Mixin.",
            "VernacBeginSection",
            "6baba8f9c69ee561fe2fe56ddce4f581081e3a39"
        ],
        [
            "Variable F : Field.type.",
            "VernacAssumption",
            "21e2bce4a5c62250bfd38a0084b57a67737e66d0"
        ],
        [
            "Implicit Type f : formula F.",
            "VernacReserve",
            "dd44c443f0143c890ab4d306b3cac329455a1ef4"
        ],
        [
            "Variable proj : nat -> seq (term F) * seq (term F) -> formula F.",
            "VernacAssumption",
            "d3dce051e126526c41bf6491512f4a8d15e2b16f"
        ],
        [
            "Definition wf_QE_proj := forall i bc (bc_i := proj i bc), dnf_rterm bc -> qf_form bc_i && rformula bc_i.",
            "VernacDefinition",
            "a3387fbcec57a5f86ce32607ee55d86af9c5b3cf"
        ],
        [
            "Definition valid_QE_proj := forall i bc (ex_i_bc := ('exists 'X_i, dnf_to_form [:: bc])%T) e, dnf_rterm bc -> reflect (holds e ex_i_bc) (qf_eval e (proj i bc)).",
            "VernacDefinition",
            "6bb65e70944a39d3e88985aa02539208c3200ba6"
        ],
        [
            "Hypotheses (wf_proj : wf_QE_proj) (ok_proj : valid_QE_proj).",
            "VernacAssumption",
            "eaa4363681b7c872fdf1e1337f45d67cc31d1fe7"
        ],
        [
            "Let elim_aux f n := foldr Or False (map (proj n) (qf_to_dnf f false)).",
            "VernacDefinition",
            "9dfa624741c3cda0a8242d0d4bbb8d0dc786fbc1"
        ],
        [
            "Fixpoint quantifier_elim f := match f with | f1 /\\ f2 => (quantifier_elim f1) /\\ (quantifier_elim f2) | f1 \\/ f2 => (quantifier_elim f1) \\/ (quantifier_elim f2) | f1 ==> f2 => (~ quantifier_elim f1) \\/ (quantifier_elim f2) | ~ f => ~ quantifier_elim f | ('exists 'X_n, f) => elim_aux (quantifier_elim f) n | ('forall 'X_n, f) => ~ elim_aux (~ quantifier_elim f) n | _ => f end%T.",
            "VernacFixpoint",
            "fc1d49a9788e6e17e259ef2a04187846cfd3ac6d"
        ],
        [
            "Lemma quantifier_elim_wf f : let qf := quantifier_elim f in rformula f -> qf_form qf && rformula qf.",
            "VernacStartTheoremProof",
            "48ee7f5c5432a5747f36f902bea19903575be91e"
        ],
        [
            "suffices aux_wf f0 n : let qf := elim_aux f0 n in rformula f0 -> qf_form qf && rformula qf.",
            "VernacExtend",
            "290ed488b5562e885aa2cac56f3a69b4faa0eaa6"
        ],
        [
            "-",
            "VernacBullet",
            "581cab4bf49fa4b495e569bbda96fc8d28fddcc0"
        ],
        [
            "by elim: f => //=; do ?[ move=> f1 IH1 f2 IH2; case/andP=> rf1 rf2; case/andP:(IH1 rf1)=> -> ->; case/andP:(IH2 rf2)=> -> -> // | move=> n f1 IH rf1; case/andP: (IH rf1)=> qff rf; rewrite aux_wf ].",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "rewrite /elim_aux => rf.",
            "VernacExtend",
            "3c42b53d0efc26db114b00541ac5e7fcb29e6aeb"
        ],
        [
            "suffices or_wf fs : let ofs := foldr Or False fs in all (@qf_form F) fs && all (@rformula F) fs -> qf_form ofs && rformula ofs.",
            "VernacExtend",
            "290ed488b5562e885aa2cac56f3a69b4faa0eaa6"
        ],
        [
            "-",
            "VernacBullet",
            "581cab4bf49fa4b495e569bbda96fc8d28fddcc0"
        ],
        [
            "apply: or_wf.",
            "VernacExtend",
            "4bd6fa79b17bcd2bfb7af091fb325367a20385d6"
        ],
        [
            "suffices map_proj_wf bcs: let mbcs := map (proj n) bcs in all dnf_rterm bcs -> all (@qf_form _) mbcs && all (@rformula _) mbcs.",
            "VernacExtend",
            "290ed488b5562e885aa2cac56f3a69b4faa0eaa6"
        ],
        [
            "by apply: map_proj_wf; apply: qf_to_dnf_rterm.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "elim: bcs => [|bc bcs ihb] bcsr //= /andP[rbc rbcs].",
            "VernacExtend",
            "e686a1895f1799b840b76242f931100819a9ad6c"
        ],
        [
            "by rewrite andbAC andbA wf_proj //= andbC ihb.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "elim: fs => //= g gs ihg; rewrite -andbA => /and4P[-> qgs -> rgs] /=.",
            "VernacExtend",
            "5c0d3b68844697b312245da3ed2c1b277720f6af"
        ],
        [
            "by apply: ihg; rewrite qgs rgs.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma quantifier_elim_rformP e f : rformula f -> reflect (holds e f) (qf_eval e (quantifier_elim f)).",
            "VernacStartTheoremProof",
            "f40a7049b12641c3f798dd9cb637e6cb34982437"
        ],
        [
            "pose rc e n f := exists x, qf_eval (set_nth 0 e n x) f.",
            "VernacExtend",
            "3c5f04de94609049d978298aa02ff35fb35ea7c7"
        ],
        [
            "have auxP f0 e0 n0: qf_form f0 && rformula f0 -> reflect (rc e0 n0 f0) (qf_eval e0 (elim_aux f0 n0)).",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "+",
            "VernacBullet",
            "3ddfc0515f916e562bacf863647e0107cb15aa13"
        ],
        [
            "rewrite /elim_aux => cf; set bcs := qf_to_dnf f0 false.",
            "VernacExtend",
            "c9a8452e0e06a4c3ac19bcd1b0a42d11d8e194b2"
        ],
        [
            "apply: (@iffP (rc e0 n0 (dnf_to_form bcs))); last first.",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "-",
            "VernacBullet",
            "581cab4bf49fa4b495e569bbda96fc8d28fddcc0"
        ],
        [
            "by case=> x; rewrite -qf_to_dnfP //; exists x.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "-",
            "VernacBullet",
            "581cab4bf49fa4b495e569bbda96fc8d28fddcc0"
        ],
        [
            "by case=> x; rewrite qf_to_dnfP //; exists x.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "have: all dnf_rterm bcs by case/andP: cf => _; apply: qf_to_dnf_rterm.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "elim: {f0 cf}bcs => [|bc bcs IHbcs] /=; first by right; case.",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "case/andP=> r_bc /IHbcs {IHbcs}bcsP.",
            "VernacExtend",
            "e00fff71ff314c991514fc71c41a3556702e444a"
        ],
        [
            "have f_qf := dnf_to_form_qf [:: bc].",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "case: ok_proj => //= [ex_x|no_x].",
            "VernacExtend",
            "e00fff71ff314c991514fc71c41a3556702e444a"
        ],
        [
            "left; case: ex_x => x /(qf_evalP _ f_qf); rewrite /= orbF => bc_x.",
            "VernacExtend",
            "657df8210a508817145389d87462a77bdd363e32"
        ],
        [
            "by exists x; rewrite /= bc_x.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "apply: (iffP bcsP) => [[x bcs_x] | [x]] /=.",
            "VernacExtend",
            "4bd6fa79b17bcd2bfb7af091fb325367a20385d6"
        ],
        [
            "by exists x; rewrite /= bcs_x orbT.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "case/orP => [bc_x|]; last by exists x.",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "by case: no_x; exists x; apply/(qf_evalP _ f_qf); rewrite /= bc_x.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "elim: f e => //.",
            "VernacExtend",
            "e686a1895f1799b840b76242f931100819a9ad6c"
        ],
        [
            "-",
            "VernacBullet",
            "581cab4bf49fa4b495e569bbda96fc8d28fddcc0"
        ],
        [
            "by move=> b e _; apply: idP.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "-",
            "VernacBullet",
            "581cab4bf49fa4b495e569bbda96fc8d28fddcc0"
        ],
        [
            "by move=> t1 t2 e _; apply: eqP.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "-",
            "VernacBullet",
            "581cab4bf49fa4b495e569bbda96fc8d28fddcc0"
        ],
        [
            "move=> f1 IH1 f2 IH2 e /= /andP[/IH1[] f1e]; last by right; case.",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "by case/IH2; [left | right; case].",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "-",
            "VernacBullet",
            "581cab4bf49fa4b495e569bbda96fc8d28fddcc0"
        ],
        [
            "move=> f1 IH1 f2 IH2 e /= /andP[/IH1[] f1e]; first by do 2!left.",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "by case/IH2; [left; right | right; case].",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "-",
            "VernacBullet",
            "581cab4bf49fa4b495e569bbda96fc8d28fddcc0"
        ],
        [
            "move=> f1 IH1 f2 IH2 e /= /andP[/IH1[] f1e]; last by left.",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "by case/IH2; [left | right; move/(_ f1e)].",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "-",
            "VernacBullet",
            "581cab4bf49fa4b495e569bbda96fc8d28fddcc0"
        ],
        [
            "by move=> f IHf e /= /IHf[]; [right | left].",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "-",
            "VernacBullet",
            "581cab4bf49fa4b495e569bbda96fc8d28fddcc0"
        ],
        [
            "move=> n f IHf e /= rf; have rqf := quantifier_elim_wf rf.",
            "VernacExtend",
            "ccd83c252dcbae3d56f3d057fcb8217878b51901"
        ],
        [
            "by apply: (iffP (auxP _ _ _ rqf)) => [] [x]; exists x; apply/IHf.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "move=> n f IHf e /= rf; have rqf := quantifier_elim_wf rf.",
            "VernacExtend",
            "ccd83c252dcbae3d56f3d057fcb8217878b51901"
        ],
        [
            "case: auxP => // [f_x|no_x]; first by right=> no_x; case: f_x => x /IHf[].",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "by left=> x; apply/IHf=> //; apply/idPn=> f_x; case: no_x; exists x.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Definition proj_sat e f := qf_eval e (quantifier_elim (to_rform f)).",
            "VernacDefinition",
            "88d04d101c19a63ee6b8f74c4e391cc5d9457e5c"
        ],
        [
            "Lemma proj_satP : DecidableField.axiom proj_sat.",
            "VernacStartTheoremProof",
            "0c3423247b3ee1837a829e46d38913aeb8babf9f"
        ],
        [
            "move=> e f; have fP := quantifier_elim_rformP e (to_rform_rformula f).",
            "VernacExtend",
            "ccd83c252dcbae3d56f3d057fcb8217878b51901"
        ],
        [
            "by apply: (iffP fP); move/to_rformP.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Definition QEdecFieldMixin := DecidableField.Mixin proj_satP.",
            "VernacDefinition",
            "d6e14e5a3e84b6c84203206e0aa5c1a1c6ffebfc"
        ],
        [
            "End QE_Mixin.",
            "VernacEndSegment",
            "c59d528313bbe3d771bd9daa14a9806d1b253143"
        ],
        [
            "Module ClosedField.",
            "VernacDefineModule",
            "dbb3493a79e743a5293733f6ed64030b59e22bc9"
        ],
        [
            "Definition axiom (R : ringType) := forall n (P : nat -> R), n > 0 -> exists x : R, x ^+ n = \\sum_(i < n) P i * (x ^+ i).",
            "VernacDefinition",
            "abe72f2e7444f74b1d42c1b873e8b14a77c41ce0"
        ],
        [
            "Section ClassDef.",
            "VernacBeginSection",
            "a5b792261e6c496f5a1a8d0f7da8c96156ca2fed"
        ],
        [
            "Record class_of (F : Type) : Type := Class {base : DecidableField.class_of F; _ : axiom (Ring.Pack base)}.",
            "VernacInductive",
            "242009df5802603c40adf8421a7430322b18dfe3"
        ],
        [
            "Local Coercion base : class_of >-> DecidableField.class_of.",
            "VernacCoercion",
            "d63c9891513548abd9781dbbaefe88c31b46e50b"
        ],
        [
            "Structure type := Pack {sort; _ : class_of sort}.",
            "VernacInductive",
            "42b0161295055637e72e97af35c3d44479cc946b"
        ],
        [
            "Local Coercion sort : type >-> Sortclass.",
            "VernacCoercion",
            "e4478cd37693106f84ed020bd073c4970dc87530"
        ],
        [
            "Variable (T : Type) (cT : type).",
            "VernacAssumption",
            "eb35f5737a32cba56acb24ac87490232dc2dfcb9"
        ],
        [
            "Definition class := let: Pack _ c as cT' := cT return class_of cT' in c.",
            "VernacDefinition",
            "0e4a80652d474f8010316ff26a5322b5207d82a3"
        ],
        [
            "Definition clone c of phant_id class c := @Pack T c.",
            "VernacDefinition",
            "e082321bed0d5d4d78139419fead577313b82668"
        ],
        [
            "Let xT := let: Pack T _ := cT in T.",
            "VernacDefinition",
            "0a87c77e3a5ac8febf0910b95d7b998b7cb9cf6d"
        ],
        [
            "Notation xclass := (class : class_of xT).",
            "VernacSyntacticDefinition",
            "e136614fedd7b331a23b54adad5b0bce11895ed4"
        ],
        [
            "Definition pack b0 (m0 : axiom (@Ring.Pack T b0)) := fun bT b & phant_id (DecidableField.class bT) b => fun m & phant_id m0 m => Pack (@Class T b m).",
            "VernacDefinition",
            "a9a03a01eb56834808f239fb566ec62f0123e2a7"
        ],
        [
            "Definition eqType := @Equality.Pack cT xclass.",
            "VernacDefinition",
            "6139f412b89e62ff13c9c707c885de4b39151e9d"
        ],
        [
            "Definition choiceType := @Choice.Pack cT xclass.",
            "VernacDefinition",
            "f62d3090382a5ea70b978e0633e0376c4558db55"
        ],
        [
            "Definition zmodType := @Zmodule.Pack cT xclass.",
            "VernacDefinition",
            "d292a93c19cc9e36e99db073c0c14c27655bcd85"
        ],
        [
            "Definition ringType := @Ring.Pack cT xclass.",
            "VernacDefinition",
            "8a9134d1dac21560b6c04dc7467c51b02f0db83e"
        ],
        [
            "Definition comRingType := @ComRing.Pack cT xclass.",
            "VernacDefinition",
            "7ae57e52d5bc541f3670f9768868f067c230ad65"
        ],
        [
            "Definition unitRingType := @UnitRing.Pack cT xclass.",
            "VernacDefinition",
            "2fc21101404f298267a4a84da270b73575f3bf98"
        ],
        [
            "Definition comUnitRingType := @ComUnitRing.Pack cT xclass.",
            "VernacDefinition",
            "f27a825845ae5f4cb6a943bc8d5fa37920701569"
        ],
        [
            "Definition idomainType := @IntegralDomain.Pack cT xclass.",
            "VernacDefinition",
            "3e0200ebcc33abeac163cc9c30b3a33195446b9c"
        ],
        [
            "Definition fieldType := @Field.Pack cT xclass.",
            "VernacDefinition",
            "81fdf5f63ff476c1548f5cd56bda88a32a445f2c"
        ],
        [
            "Definition decFieldType := @DecidableField.Pack cT class.",
            "VernacDefinition",
            "e0fede0148b25ae83632cc2cf16488ec3f1f4073"
        ],
        [
            "End ClassDef.",
            "VernacEndSegment",
            "bce1c8832045d8291c44a3fb67e9767782d2745b"
        ],
        [
            "Module Exports.",
            "VernacDefineModule",
            "d4a1114ec53f746523a7dec57823f7f03e51fa24"
        ],
        [
            "Coercion base : class_of >-> DecidableField.class_of.",
            "VernacCoercion",
            "d72124bc95268a034d63c70abcc240d2dce46761"
        ],
        [
            "Coercion sort : type >-> Sortclass.",
            "VernacCoercion",
            "9e1cbf06afa0d2731dbb8bfd6b9ae32be22a8ae7"
        ],
        [
            "Bind Scope ring_scope with sort.",
            "VernacBindScope",
            "ac04d07dda43f0036576b2a438f8490c7ac4d59b"
        ],
        [
            "Coercion eqType : type >-> Equality.type.",
            "VernacCoercion",
            "58308c67b5e73c9e004d57c486a5071598a25e8c"
        ],
        [
            "Canonical eqType.",
            "VernacCanonical",
            "dd1ac877a396f552e2a8f23e59be45903d8b15ad"
        ],
        [
            "Coercion choiceType : type >-> Choice.type.",
            "VernacCoercion",
            "bdc8d608f4b963a8606cd33ad18b1977a8bcb78d"
        ],
        [
            "Canonical choiceType.",
            "VernacCanonical",
            "af7a1759ddd13e2b7e4e1ce16b6a3595a77b5659"
        ],
        [
            "Coercion zmodType : type >-> Zmodule.type.",
            "VernacCoercion",
            "4ec9ca49e3551546d7d514a97127c47a11747e3a"
        ],
        [
            "Canonical zmodType.",
            "VernacCanonical",
            "9a6f278270af4b6ced100d8e0c90c7719a960a86"
        ],
        [
            "Coercion ringType : type >-> Ring.type.",
            "VernacCoercion",
            "3563a3bf802f370588b71df18917d551f221a05e"
        ],
        [
            "Canonical ringType.",
            "VernacCanonical",
            "b7d4c328ac58b23ee4b52bd787434621c20d2c4d"
        ],
        [
            "Coercion comRingType : type >-> ComRing.type.",
            "VernacCoercion",
            "0b68ec2f3c5c76d295167a623512d46ac31b80ad"
        ],
        [
            "Canonical comRingType.",
            "VernacCanonical",
            "30f9087081da845c9c545aeb8d7375204ed4f1b3"
        ],
        [
            "Coercion unitRingType : type >-> UnitRing.type.",
            "VernacCoercion",
            "f3d1399a2d1a8f93182c9b698d4a4a7d12624259"
        ],
        [
            "Canonical unitRingType.",
            "VernacCanonical",
            "5adf5dbcca23e501d2be7f60fe9ad3def13431b8"
        ],
        [
            "Coercion comUnitRingType : type >-> ComUnitRing.type.",
            "VernacCoercion",
            "c86b5a5eba0fa8431bb0c4dd719c4f48343ce09a"
        ],
        [
            "Canonical comUnitRingType.",
            "VernacCanonical",
            "74522c0e1d11ec46568915dda5f1829b7bbe8a04"
        ],
        [
            "Coercion idomainType : type >-> IntegralDomain.type.",
            "VernacCoercion",
            "456263ba8f66daa57f4e91cb63c7cf22a8129be1"
        ],
        [
            "Canonical idomainType.",
            "VernacCanonical",
            "ec8e76c80fed77c2b91406ec8a21033d94f8380d"
        ],
        [
            "Coercion fieldType : type >-> Field.type.",
            "VernacCoercion",
            "cd5d92a540c21184fd435cd430d76175833d5fb3"
        ],
        [
            "Canonical fieldType.",
            "VernacCanonical",
            "2f62ae066c69ea008603157a15e19f08a6a6284b"
        ],
        [
            "Coercion decFieldType : type >-> DecidableField.type.",
            "VernacCoercion",
            "6212d93e5d9cbb02f3dc1f72cd1ced5a714d5946"
        ],
        [
            "Canonical decFieldType.",
            "VernacCanonical",
            "dd11f9cf737ed8cd67a7804637d9137ba5bbe73f"
        ],
        [
            "Notation closedFieldType := type.",
            "VernacSyntacticDefinition",
            "64de0f90342865a76243e534d35c4ade9b88341c"
        ],
        [
            "Notation ClosedFieldType T m := (@pack T _ m _ _ id _ id).",
            "VernacSyntacticDefinition",
            "e14a8246446b2a92e5eeb1ff3a166024eb88ed54"
        ],
        [
            "Notation \"[ 'closedFieldType' 'of' T 'for' cT ]\" := (@clone T cT _ idfun) (at level 0, format \"[ 'closedFieldType' 'of' T 'for' cT ]\") : form_scope.",
            "VernacNotation",
            "14766f16ad17c423414acbef669c9e764fd54d5d"
        ],
        [
            "Notation \"[ 'closedFieldType' 'of' T ]\" := (@clone T _ _ id) (at level 0, format \"[ 'closedFieldType' 'of' T ]\") : form_scope.",
            "VernacNotation",
            "8a0a9218e25f300c193c788437c5e9ef2c61fda4"
        ],
        [
            "End Exports.",
            "VernacEndSegment",
            "71efedae7ccffd696e1ffe5d8ae6baa8a4484918"
        ],
        [
            "End ClosedField.",
            "VernacEndSegment",
            "cc7b395c5d4a2febf205a006b1ebc3411123c7c4"
        ],
        [
            "Import ClosedField.Exports.",
            "VernacImport",
            "d5c524ca793ee407172ce4ad2769f6adb11dfd2c"
        ],
        [
            "Section ClosedFieldTheory.",
            "VernacBeginSection",
            "2c1ea011401797a9f1bb51523dff5d539324ea76"
        ],
        [
            "Variable F : closedFieldType.",
            "VernacAssumption",
            "fd638bbd122fe7fca85649eafc49337e70b155c4"
        ],
        [
            "Lemma solve_monicpoly : ClosedField.axiom F.",
            "VernacStartTheoremProof",
            "6c7b0670e747b527fd623ffed422c86f90bbfc74"
        ],
        [
            "by case: F => ? [].",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma imaginary_exists : {i : F | i ^+ 2 = -1}.",
            "VernacStartTheoremProof",
            "24d3545c833bef3080371d7f3297e1ee1ee1e987"
        ],
        [
            "have /sig_eqW[i Di2] := @solve_monicpoly 2 (nth 0 [:: -1]) isT.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "by exists i; rewrite Di2 !big_ord_recl big_ord0 mul0r mulr1 !addr0.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "End ClosedFieldTheory.",
            "VernacEndSegment",
            "3e6c32b4fca746280f8cc677a34c34748553393c"
        ],
        [
            "Module SubType.",
            "VernacDefineModule",
            "2eda5cfe09c1b157a63a05c56910cd4e30185a47"
        ],
        [
            "Section Zmodule.",
            "VernacBeginSection",
            "91db113e92db3597ba1a6239a953976b1283212f"
        ],
        [
            "Variables (V : zmodType) (S : predPredType V).",
            "VernacAssumption",
            "c849017470d262978f29d669bf8d31e75529953a"
        ],
        [
            "Variables (subS : zmodPred S) (kS : keyed_pred subS).",
            "VernacAssumption",
            "ec466a52f5c31514ddcbbddf7999326cf56b3f20"
        ],
        [
            "Variable U : subType (mem kS).",
            "VernacAssumption",
            "fe076ac5d755d79edeaf0152a6a48c91e4117f20"
        ],
        [
            "Let inU v Sv : U := Sub v Sv.",
            "VernacDefinition",
            "5cabaeeb3e5317cd8b671678c85641dc79d395b3"
        ],
        [
            "Let zeroU := inU (rpred0 kS).",
            "VernacDefinition",
            "896c4483fb0e6d4cc81722775fc576a515fcbb29"
        ],
        [
            "Let oppU (u : U) := inU (rpredNr (valP u)).",
            "VernacDefinition",
            "5648d5ee393e10dd2c5de7c711efbc159c0e5682"
        ],
        [
            "Let addU (u1 u2 : U) := inU (rpredD (valP u1) (valP u2)).",
            "VernacDefinition",
            "7bfbcbfdca4e6adacd7c385035dd8663f25ab755"
        ],
        [
            "Fact addA : associative addU.",
            "VernacStartTheoremProof",
            "91b5e12d33c930b2c30488c0fcc3c630ad91b123"
        ],
        [
            "by move=> u1 u2 u3; apply: val_inj; rewrite !SubK addrA.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Fact addC : commutative addU.",
            "VernacStartTheoremProof",
            "ca41d491e0f02d1d4666a725162a0d3eeb97f56b"
        ],
        [
            "by move=> u1 u2; apply: val_inj; rewrite !SubK addrC.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Fact add0 : left_id zeroU addU.",
            "VernacStartTheoremProof",
            "6c01c4c93c1dd503e3b2162acce12b5005eee5c6"
        ],
        [
            "by move=> u; apply: val_inj; rewrite !SubK add0r.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Fact addN : left_inverse zeroU oppU addU.",
            "VernacStartTheoremProof",
            "78acc997078fa61f5105094ab2133dd8017b67cf"
        ],
        [
            "by move=> u; apply: val_inj; rewrite !SubK addNr.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Definition zmodMixin of phant U := ZmodMixin addA addC add0 addN.",
            "VernacDefinition",
            "c2aa40407a400ceec6cb14dc31ea9fbe1bb9a58b"
        ],
        [
            "End Zmodule.",
            "VernacEndSegment",
            "119828d54949a4099cd3ff33eddfda25fdcd5d5d"
        ],
        [
            "Section Ring.",
            "VernacBeginSection",
            "4d770a0e7a33287fd734255f173f9e9a26afb6de"
        ],
        [
            "Variables (R : ringType) (S : predPredType R).",
            "VernacAssumption",
            "b4b74cb3894702812027c88da547ee8b250cbd68"
        ],
        [
            "Variables (ringS : subringPred S) (kS : keyed_pred ringS).",
            "VernacAssumption",
            "05baf833de3682b3160073f39f1871d0b7f295f1"
        ],
        [
            "Definition cast_zmodType (V : zmodType) T (VeqT : V = T :> Type) := let cast mV := let: erefl in _ = T := VeqT return Zmodule.class_of T in mV in Zmodule.Pack (cast (Zmodule.class V)).",
            "VernacDefinition",
            "cdf7392bd05f5fcab53dbc325cb54f9cd4692a36"
        ],
        [
            "Variable (T : subType (mem kS)) (V : zmodType) (VeqT: V = T :> Type).",
            "VernacAssumption",
            "d4a56408e2e9b65a12a6a0506f275d0845e65301"
        ],
        [
            "Let inT x Sx : T := Sub x Sx.",
            "VernacDefinition",
            "1f7e67c58d553d7ff56525352784ad0241b69957"
        ],
        [
            "Let oneT := inT (rpred1 kS).",
            "VernacDefinition",
            "635ef9fe3e7653b7843f2ac066ee1e0f104346d0"
        ],
        [
            "Let mulT (u1 u2 : T) := inT (rpredM (valP u1) (valP u2)).",
            "VernacDefinition",
            "178e6a952fa5919d0d23f5c7729495789b37193e"
        ],
        [
            "Let T' := cast_zmodType VeqT.",
            "VernacDefinition",
            "3378d6cd270451865f4446e495d8224a101c97ae"
        ],
        [
            "Hypothesis valM : {morph (val : T' -> R) : x y / x - y}.",
            "VernacAssumption",
            "e15e9ee8fefc109fcb4952fc31526e4fc7bfb833"
        ],
        [
            "Let val0 : val (0 : T') = 0.",
            "VernacDefinition",
            "8c5c0036106d8fcefe89f17f763b42705df994a7"
        ],
        [
            "by rewrite -(subrr (0 : T')) valM subrr.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Let valD : {morph (val : T' -> R): x y / x + y}.",
            "VernacDefinition",
            "87aa133c88b027b7a631027dd40cf38551385cfa"
        ],
        [
            "by move=> u v; rewrite -{1}[v]opprK -[- v]sub0r !valM val0 sub0r opprK.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Fact mulA : @associative T' mulT.",
            "VernacStartTheoremProof",
            "69e56e1e6bb4d65e0264d2976443407e572dfef3"
        ],
        [
            "by move=> u1 u2 u3; apply: val_inj; rewrite !SubK mulrA.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Fact mul1l : left_id oneT mulT.",
            "VernacStartTheoremProof",
            "4cfb5c1e668b4c0c696f7f8981fbd10645b0c53b"
        ],
        [
            "by move=> u; apply: val_inj; rewrite !SubK mul1r.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Fact mul1r : right_id oneT mulT.",
            "VernacStartTheoremProof",
            "cdcb84b41ca5432986860bae3d398b01c2d0facd"
        ],
        [
            "by move=> u; apply: val_inj; rewrite !SubK mulr1.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Fact mulDl : @left_distributive T' T' mulT +%R.",
            "VernacStartTheoremProof",
            "dabaa9cd2c342df86eabe046606d115c4003b1eb"
        ],
        [
            "by move=> u1 u2 u3; apply: val_inj; rewrite !(SubK, valD) mulrDl.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Fact mulDr : @right_distributive T' T' mulT +%R.",
            "VernacStartTheoremProof",
            "0b11c48e16d1e1f8b0f72c0fa5d9857b77d9bbeb"
        ],
        [
            "by move=> u1 u2 u3; apply: val_inj; rewrite !(SubK, valD) mulrDr.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Fact nz1 : oneT != 0 :> T'.",
            "VernacStartTheoremProof",
            "843210b0c5e47ed9ebff97897fc448689f3b1d10"
        ],
        [
            "by apply: contraNneq (oner_neq0 R) => eq10; rewrite -val0 -eq10 SubK.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Definition ringMixin := RingMixin mulA mul1l mul1r mulDl mulDr nz1.",
            "VernacDefinition",
            "0ac2a2d23ce668287d260e2158ceebd9d5a12798"
        ],
        [
            "End Ring.",
            "VernacEndSegment",
            "7b7590f6c3a2b9e01af4b1d22710ae6db4d7afe7"
        ],
        [
            "Section Lmodule.",
            "VernacBeginSection",
            "1f6a6595278c27e466e250ad901ff60283c708c3"
        ],
        [
            "Variables (R : ringType) (V : lmodType R) (S : predPredType V).",
            "VernacAssumption",
            "d767df171e4fb723773e6e29e5ee50ad9ee7fa2f"
        ],
        [
            "Variables (linS : submodPred S) (kS : keyed_pred linS).",
            "VernacAssumption",
            "5d4acacd2a67c52dbb81f4689a53fd946f707a96"
        ],
        [
            "Variables (W : subType (mem kS)) (Z : zmodType) (ZeqW : Z = W :> Type).",
            "VernacAssumption",
            "28eecd09a34212c3e31d734f1e24ab6e5d42ca5f"
        ],
        [
            "Let scaleW a (w : W) := (Sub _ : _ -> W) (rpredZ a (valP w)).",
            "VernacDefinition",
            "75235b3a50ea32d23ac3985c38a6c936f4bd0934"
        ],
        [
            "Let W' := cast_zmodType ZeqW.",
            "VernacDefinition",
            "2b2bf6edd1ad94d1943a11d3529d70c92f897f4e"
        ],
        [
            "Hypothesis valD : {morph (val : W' -> V) : x y / x + y}.",
            "VernacAssumption",
            "d474b7fba4d5d7cf2f5ff5f1999954b674aaa5ef"
        ],
        [
            "Fact scaleA a b (w : W') : scaleW a (scaleW b w) = scaleW (a * b) w.",
            "VernacStartTheoremProof",
            "8c0beb020dbe1aa100aff83647098a9da123888b"
        ],
        [
            "by apply: val_inj; rewrite !SubK scalerA.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Fact scale1 : left_id 1 scaleW.",
            "VernacStartTheoremProof",
            "16b4e06d2889d55b5e98dbc4a563763e21e74723"
        ],
        [
            "by move=> w; apply: val_inj; rewrite !SubK scale1r.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Fact scaleDr : @right_distributive R W' scaleW +%R.",
            "VernacStartTheoremProof",
            "b5d064a8b17b56eeb45d8601eef80bd2de9f7ce9"
        ],
        [
            "by move=> a w w2; apply: val_inj; rewrite !(SubK, valD) scalerDr.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Fact scaleDl w : {morph (scaleW^~ w : R -> W') : a b / a + b}.",
            "VernacStartTheoremProof",
            "c9b1796825456a5473447d9ae19359e125a2a198"
        ],
        [
            "by move=> a b; apply: val_inj; rewrite !(SubK, valD) scalerDl.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Definition lmodMixin := LmodMixin scaleA scale1 scaleDr scaleDl.",
            "VernacDefinition",
            "de13d46045a3a5d79bfe42145cfd36ad3eba06b3"
        ],
        [
            "End Lmodule.",
            "VernacEndSegment",
            "e6bdd93d33c160a15f877bf12d492e9b99d4801b"
        ],
        [
            "Lemma lalgMixin (R : ringType) (A : lalgType R) (B : lmodType R) (f : B -> A) : phant B -> injective f -> scalable f -> forall mulB, {morph f : x y / mulB x y >-> x * y} -> Lalgebra.axiom mulB.",
            "VernacStartTheoremProof",
            "6b939f919af226b468bcdb7345b7aad95032883b"
        ],
        [
            "by move=> _ injf fZ mulB fM a x y; apply: injf; rewrite !(fZ, fM) scalerAl.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma comRingMixin (R : comRingType) (T : ringType) (f : T -> R) : phant T -> injective f -> {morph f : x y / x * y} -> commutative (@mul T).",
            "VernacStartTheoremProof",
            "8802987dfdfcb6afb866d4e15c508bb5309e09cd"
        ],
        [
            "by move=> _ inj_f fM x y; apply: inj_f; rewrite !fM mulrC.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma algMixin (R : comRingType) (A : algType R) (B : lalgType R) (f : B -> A) : phant B -> injective f -> {morph f : x y / x * y} -> scalable f -> @Algebra.axiom R B.",
            "VernacStartTheoremProof",
            "30a741b40d2c21994ee72defe06f785ace766fc0"
        ],
        [
            "by move=> _ inj_f fM fZ a x y; apply: inj_f; rewrite !(fM, fZ) scalerAr.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Section UnitRing.",
            "VernacBeginSection",
            "d52bb0d2ad7491212ae4605b35037871c91c3195"
        ],
        [
            "Definition cast_ringType (Q : ringType) T (QeqT : Q = T :> Type) := let cast rQ := let: erefl in _ = T := QeqT return Ring.class_of T in rQ in Ring.Pack (cast (Ring.class Q)).",
            "VernacDefinition",
            "e40b06b5b24574e3a4359050d2040922864df9d7"
        ],
        [
            "Variables (R : unitRingType) (S : predPredType R).",
            "VernacAssumption",
            "c3a517558a2678ab6a2bc5b7a47849bacc8493c9"
        ],
        [
            "Variables (ringS : divringPred S) (kS : keyed_pred ringS).",
            "VernacAssumption",
            "9fa3600e13f66c41e4c3e2339ac5e96f82e0adbc"
        ],
        [
            "Variables (T : subType (mem kS)) (Q : ringType) (QeqT : Q = T :> Type).",
            "VernacAssumption",
            "8bedfde25b501cc31cfc06608b740e3bd5731060"
        ],
        [
            "Let inT x Sx : T := Sub x Sx.",
            "VernacDefinition",
            "1f7e67c58d553d7ff56525352784ad0241b69957"
        ],
        [
            "Let invT (u : T) := inT (rpredVr (valP u)).",
            "VernacDefinition",
            "a97e0a776ec36b4d9620e30afad5c0bbc452496c"
        ],
        [
            "Let unitT := [qualify a u : T | val u \\is a unit].",
            "VernacDefinition",
            "7b9390334908dd711af6f8ae204c4d03eb435f66"
        ],
        [
            "Let T' := cast_ringType QeqT.",
            "VernacDefinition",
            "f424ec52948f88a6ba501ae9fa90e24839a5c8e0"
        ],
        [
            "Hypothesis val1 : val (1 : T') = 1.",
            "VernacAssumption",
            "2b8eb7330ee111563d8173041423b986ec257643"
        ],
        [
            "Hypothesis valM : {morph (val : T' -> R) : x y / x * y}.",
            "VernacAssumption",
            "c322237216fb0b47c233a6973c571ca2e6ec263b"
        ],
        [
            "Fact mulVr : {in (unitT : predPredType T'), left_inverse (1 : T') invT (@mul T')}.",
            "VernacStartTheoremProof",
            "8a54e58b3f6a317a164161727f0a6faf6c66098f"
        ],
        [
            "by move=> u Uu; apply: val_inj; rewrite val1 valM SubK mulVr.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Fact mulrV : {in unitT, right_inverse (1 : T') invT (@mul T')}.",
            "VernacStartTheoremProof",
            "079d7c35df0c828d9f78bba2307c0c68f60b7646"
        ],
        [
            "by move=> u Uu; apply: val_inj; rewrite val1 valM SubK mulrV.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Fact unitP (u v : T') : v * u = 1 /\\ u * v = 1 -> u \\in unitT.",
            "VernacStartTheoremProof",
            "37aa3e99595a258d1817412d67a5e204da9b6108"
        ],
        [
            "by case=> vu1 uv1; apply/unitrP; exists (val v); rewrite -!valM vu1 uv1.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Fact unit_id : {in [predC unitT], invT =1 id}.",
            "VernacStartTheoremProof",
            "c02e84d6c7c69ae931118f52c7216c0bd9a09da4"
        ],
        [
            "by move=> u /invr_out def_u1; apply: val_inj; rewrite SubK.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Definition unitRingMixin := UnitRingMixin mulVr mulrV unitP unit_id.",
            "VernacDefinition",
            "4f9e863acf0b09fbcbf6bfaa944211d8c5f33918"
        ],
        [
            "End UnitRing.",
            "VernacEndSegment",
            "b4d22ffc709e390b56b13a1ba3d45f87f9ab0694"
        ],
        [
            "Lemma idomainMixin (R : idomainType) (T : ringType) (f : T -> R) : phant T -> injective f -> f 0 = 0 -> {morph f : u v / u * v} -> @IntegralDomain.axiom T.",
            "VernacStartTheoremProof",
            "54f9bf55fd0029809f61d8bfa2ec382f1dc0e9c0"
        ],
        [
            "move=> _ injf f0 fM u v uv0.",
            "VernacExtend",
            "b1b2cb7a3a617cba67460b4eca1f04de3c1cc716"
        ],
        [
            "by rewrite -!(inj_eq injf) !f0 -mulf_eq0 -fM uv0 f0.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma fieldMixin (F : fieldType) (K : unitRingType) (f : K -> F) : phant K -> injective f -> f 0 = 0 -> {mono f : u / u \\in unit} -> @Field.mixin_of K.",
            "VernacStartTheoremProof",
            "7c5bc7bf6a1b7f8708ebabd1578034a80e66a6bd"
        ],
        [
            "by move=> _ injf f0 fU u; rewrite -fU unitfE -f0 inj_eq.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Module Exports.",
            "VernacDefineModule",
            "d4a1114ec53f746523a7dec57823f7f03e51fa24"
        ],
        [
            "Notation \"[ 'zmodMixin' 'of' U 'by' <: ]\" := (zmodMixin (Phant U)) (at level 0, format \"[ 'zmodMixin' 'of' U 'by' <: ]\") : form_scope.",
            "VernacNotation",
            "e697e88387667c45ca759b93a9043a3da2b7e29a"
        ],
        [
            "Notation \"[ 'ringMixin' 'of' R 'by' <: ]\" := (@ringMixin _ _ _ _ _ _ (@erefl Type R%type) (rrefl _)) (at level 0, format \"[ 'ringMixin' 'of' R 'by' <: ]\") : form_scope.",
            "VernacNotation",
            "92d24907ff4c073c423af2b53633a5e65936c1d0"
        ],
        [
            "Notation \"[ 'lmodMixin' 'of' U 'by' <: ]\" := (@lmodMixin _ _ _ _ _ _ _ (@erefl Type U%type) (rrefl _)) (at level 0, format \"[ 'lmodMixin' 'of' U 'by' <: ]\") : form_scope.",
            "VernacNotation",
            "20e7d817f8452a75b6f082202222cf00aa8e897f"
        ],
        [
            "Notation \"[ 'lalgMixin' 'of' A 'by' <: ]\" := ((lalgMixin (Phant A) val_inj (rrefl _)) *%R (rrefl _)) (at level 0, format \"[ 'lalgMixin' 'of' A 'by' <: ]\") : form_scope.",
            "VernacNotation",
            "f0aff6fec2887e4bca048e380c32968a360fa3a2"
        ],
        [
            "Notation \"[ 'comRingMixin' 'of' R 'by' <: ]\" := (comRingMixin (Phant R) val_inj (rrefl _)) (at level 0, format \"[ 'comRingMixin' 'of' R 'by' <: ]\") : form_scope.",
            "VernacNotation",
            "aa1367d077425bc1aeb604ac02d640194355ee92"
        ],
        [
            "Notation \"[ 'algMixin' 'of' A 'by' <: ]\" := (algMixin (Phant A) val_inj (rrefl _) (rrefl _)) (at level 0, format \"[ 'algMixin' 'of' A 'by' <: ]\") : form_scope.",
            "VernacNotation",
            "86686fcdc1a7db018d2211a054da017f6dca2d19"
        ],
        [
            "Notation \"[ 'unitRingMixin' 'of' R 'by' <: ]\" := (@unitRingMixin _ _ _ _ _ _ (@erefl Type R%type) (erefl _) (rrefl _)) (at level 0, format \"[ 'unitRingMixin' 'of' R 'by' <: ]\") : form_scope.",
            "VernacNotation",
            "7febc809ea817f8a65e50dab4dc9c14a3e92352a"
        ],
        [
            "Notation \"[ 'idomainMixin' 'of' R 'by' <: ]\" := (idomainMixin (Phant R) val_inj (erefl _) (rrefl _)) (at level 0, format \"[ 'idomainMixin' 'of' R 'by' <: ]\") : form_scope.",
            "VernacNotation",
            "c6e0cf970622b1b9508afe4930069baa2fffbdc2"
        ],
        [
            "Notation \"[ 'fieldMixin' 'of' F 'by' <: ]\" := (fieldMixin (Phant F) val_inj (erefl _) (frefl _)) (at level 0, format \"[ 'fieldMixin' 'of' F 'by' <: ]\") : form_scope.",
            "VernacNotation",
            "3c6e35594391fcaf3d7c413f67190d078b1b136e"
        ],
        [
            "End Exports.",
            "VernacEndSegment",
            "71efedae7ccffd696e1ffe5d8ae6baa8a4484918"
        ],
        [
            "End SubType.",
            "VernacEndSegment",
            "717c8fd3415349902418150381cf991d5b14d0c5"
        ],
        [
            "Module Theory.",
            "VernacDefineModule",
            "ee0e24a0dfafd6fabdc3e744c74d7c5a9c820de0"
        ],
        [
            "Definition addrA := addrA.",
            "VernacDefinition",
            "91135cae83538a13e9da0591d962ab206711586d"
        ],
        [
            "Definition addrC := addrC.",
            "VernacDefinition",
            "04eee5da772268fb028a4d72e91803c2e400836d"
        ],
        [
            "Definition add0r := add0r.",
            "VernacDefinition",
            "dc47001763fd7eaa1620fa16cec5baae323f58d7"
        ],
        [
            "Definition addNr := addNr.",
            "VernacDefinition",
            "0fc1673f72cfd7291e1573ee0cf27d11a9351dfa"
        ],
        [
            "Definition addr0 := addr0.",
            "VernacDefinition",
            "547e9b3effd99f67939ffd7a2e34e661f4afac6f"
        ],
        [
            "Definition addrN := addrN.",
            "VernacDefinition",
            "83db09654df35bb810ed77e493f557ecac3a1a75"
        ],
        [
            "Definition subrr := subrr.",
            "VernacDefinition",
            "7258f49e06bd2ac09426af229106cf159e823d30"
        ],
        [
            "Definition addrCA := addrCA.",
            "VernacDefinition",
            "a495e1ca0846a1388635815a8e4b1fa367d5b60d"
        ],
        [
            "Definition addrAC := addrAC.",
            "VernacDefinition",
            "590cca1c2ff64ec3398c2364771b37a2ef34b524"
        ],
        [
            "Definition addrACA := addrACA.",
            "VernacDefinition",
            "9a64a4591bd7472439ebaadd09b9b403c782f82c"
        ],
        [
            "Definition addKr := addKr.",
            "VernacDefinition",
            "1dbe865a9aaef649039f0055d4fce456b58ce8d4"
        ],
        [
            "Definition addNKr := addNKr.",
            "VernacDefinition",
            "f336436eeeeed0dc34492154e8674b1f2929cd75"
        ],
        [
            "Definition addrK := addrK.",
            "VernacDefinition",
            "940368128e422cac5200d9e53dfde260d69658cd"
        ],
        [
            "Definition addrNK := addrNK.",
            "VernacDefinition",
            "cab3b6d07e129657881cccc78e48948a83519325"
        ],
        [
            "Definition subrK := subrK.",
            "VernacDefinition",
            "4f8b12d1afa3021957509e04027ee72946428a1d"
        ],
        [
            "Definition subKr := subKr.",
            "VernacDefinition",
            "25439c4a9fd47b62396b6ddaa03c16897b1b1888"
        ],
        [
            "Definition addrI := @addrI.",
            "VernacDefinition",
            "5db6c81e84741f461888849eba85742c44e50f97"
        ],
        [
            "Definition addIr := @addIr.",
            "VernacDefinition",
            "5fa8b8fc77e5fe755851ab27284e3a00d5d4527f"
        ],
        [
            "Definition subrI := @subrI.",
            "VernacDefinition",
            "db0433084d93b2c031b3fb66b835d508148c9c77"
        ],
        [
            "Definition subIr := @subIr.",
            "VernacDefinition",
            "214933ef0c99e3faa3b1791ca040e8162d41c056"
        ],
        [
            "Arguments addrI {V} y [x1 x2].",
            "VernacArguments",
            "0eaba4730dd94e6b4e162cdfd54d8df3f1cc13cf"
        ],
        [
            "Arguments addIr {V} x [x1 x2].",
            "VernacArguments",
            "9f2caeb64d6f9ff1977b186feeb41ffd420d1611"
        ],
        [
            "Arguments subrI {V} y [x1 x2].",
            "VernacArguments",
            "be2b675fcdd100ca10674c8ee1f237114c779a09"
        ],
        [
            "Arguments subIr {V} x [x1 x2].",
            "VernacArguments",
            "2076dad0e4f5e4dff9004865a4fca007fd66248f"
        ],
        [
            "Definition opprK := @opprK.",
            "VernacDefinition",
            "7e551c57c99d99dc66178dda388830d0032fcf11"
        ],
        [
            "Arguments opprK {V}.",
            "VernacArguments",
            "fbb3f689b085c59f5c2b2a33030a7daeba8e25c9"
        ],
        [
            "Definition oppr_inj := @oppr_inj.",
            "VernacDefinition",
            "8607a929f6bdfe856b6019dfd2d90d020f918e23"
        ],
        [
            "Arguments oppr_inj {V} [x1 x2].",
            "VernacArguments",
            "2fd259d2f00e4aef653a0d83e4ad71a1efc49a33"
        ],
        [
            "Definition oppr0 := oppr0.",
            "VernacDefinition",
            "88f3b09e7fcc586037b3dfe0141520fc91b6aae2"
        ],
        [
            "Definition oppr_eq0 := oppr_eq0.",
            "VernacDefinition",
            "5e044304c562586c9003a7db3b128293bff684e2"
        ],
        [
            "Definition opprD := opprD.",
            "VernacDefinition",
            "7dd44a80d4eb8462c5787970c0c86ed4bbef2106"
        ],
        [
            "Definition opprB := opprB.",
            "VernacDefinition",
            "b916d12f1c804dfbb149a0464aeb82361413d8fc"
        ],
        [
            "Definition subr0 := subr0.",
            "VernacDefinition",
            "79524dd4cdf22978f49351b3caaf2c7b41ffe116"
        ],
        [
            "Definition sub0r := sub0r.",
            "VernacDefinition",
            "b32c703ccc055acc8ac4c5d6f350c92a0be3616a"
        ],
        [
            "Definition subr_eq := subr_eq.",
            "VernacDefinition",
            "0d8715cd1664d2c3e3165bf4e6f8bec5ce69c9a1"
        ],
        [
            "Definition addr0_eq := addr0_eq.",
            "VernacDefinition",
            "69475613334eba640f2799ea78c4c8249a4e054c"
        ],
        [
            "Definition subr0_eq := subr0_eq.",
            "VernacDefinition",
            "349f8648209eeba76fa00c9956635cd642eec2fe"
        ],
        [
            "Definition subr_eq0 := subr_eq0.",
            "VernacDefinition",
            "44978a1bf65deecb62e249ccb67acfbb62c6ed07"
        ],
        [
            "Definition addr_eq0 := addr_eq0.",
            "VernacDefinition",
            "c9a342ba71a0885e5d68e1904d5d49c99b04b80d"
        ],
        [
            "Definition eqr_opp := eqr_opp.",
            "VernacDefinition",
            "636dfb41475fa996be776498d16b00c549fd848d"
        ],
        [
            "Definition eqr_oppLR := eqr_oppLR.",
            "VernacDefinition",
            "a3ae1d34af07cda5c5174dba73eb967c8dd08809"
        ],
        [
            "Definition sumrN := sumrN.",
            "VernacDefinition",
            "a0a9fdaf96fca521a73d7ac7a75f5b9ba86439ad"
        ],
        [
            "Definition sumrB := sumrB.",
            "VernacDefinition",
            "6be30b48eebef94b27d1a5a4aa19e42f87f26707"
        ],
        [
            "Definition sumrMnl := sumrMnl.",
            "VernacDefinition",
            "3bfbc6f4939b56137bebf81dd021812c37c47918"
        ],
        [
            "Definition sumrMnr := sumrMnr.",
            "VernacDefinition",
            "3d74ffd550ae64840b4b392fa9b6af4411c9b0e6"
        ],
        [
            "Definition sumr_const := sumr_const.",
            "VernacDefinition",
            "55fdf2fdf2f15dc064629f92989354be32087a85"
        ],
        [
            "Definition telescope_sumr := telescope_sumr.",
            "VernacDefinition",
            "d4b298045a59340cf622b473932b301cf91fb7d0"
        ],
        [
            "Definition mulr0n := mulr0n.",
            "VernacDefinition",
            "8bc58a8575ce287134034ce138ff0c29f2390975"
        ],
        [
            "Definition mulr1n := mulr1n.",
            "VernacDefinition",
            "ab1a883c5f0d558247bf14852345210f32197a74"
        ],
        [
            "Definition mulr2n := mulr2n.",
            "VernacDefinition",
            "f78f9fd01718da65d630df40fb633d59cfca83ff"
        ],
        [
            "Definition mulrS := mulrS.",
            "VernacDefinition",
            "baaaf725a0a3110c2e074a23389be002f919da24"
        ],
        [
            "Definition mulrSr := mulrSr.",
            "VernacDefinition",
            "bb87681924aed02a856ea50a585d40271de817a2"
        ],
        [
            "Definition mulrb := mulrb.",
            "VernacDefinition",
            "b305964f0a4442378e0605b040c0cd642be5edb9"
        ],
        [
            "Definition mul0rn := mul0rn.",
            "VernacDefinition",
            "8690d13617d3e6cfd7fe8c64e8244f467d647e8b"
        ],
        [
            "Definition mulNrn := mulNrn.",
            "VernacDefinition",
            "93faf405e4cba5c62210d0f539b44193885c5a32"
        ],
        [
            "Definition mulrnDl := mulrnDl.",
            "VernacDefinition",
            "4335aba4b2f5163fe73c55010f1740ea0b35d90b"
        ],
        [
            "Definition mulrnDr := mulrnDr.",
            "VernacDefinition",
            "42fee5612c90bad3611e40bff9d8b579203183a6"
        ],
        [
            "Definition mulrnBl := mulrnBl.",
            "VernacDefinition",
            "866185ead87d6ec2c6a2879c6a8feeb9959fe29c"
        ],
        [
            "Definition mulrnBr := mulrnBr.",
            "VernacDefinition",
            "b3a302f2350c3c18802d91b599039a66f9dfb3b9"
        ],
        [
            "Definition mulrnA := mulrnA.",
            "VernacDefinition",
            "ae344046ffc89b4b477b26ea783da3a10a594915"
        ],
        [
            "Definition mulrnAC := mulrnAC.",
            "VernacDefinition",
            "bfc5307a5f68840887ea64532f9dd826c3aaf5de"
        ],
        [
            "Definition mulrA := mulrA.",
            "VernacDefinition",
            "5eafe0174d7b3c4be1ed5f16e9481eccd1ea0100"
        ],
        [
            "Definition mul1r := mul1r.",
            "VernacDefinition",
            "3b3995d70c3c73b92a7cf0057d8284bd057bffcb"
        ],
        [
            "Definition mulr1 := mulr1.",
            "VernacDefinition",
            "073a8e4201d9a6cdc60a449f89399f26fc4dfac3"
        ],
        [
            "Definition mulrDl := mulrDl.",
            "VernacDefinition",
            "243b02feb413c4e4f017bf9e007a79a8d9dc9f9d"
        ],
        [
            "Definition mulrDr := mulrDr.",
            "VernacDefinition",
            "b5753182301e63810344a72bed406524f63c6f46"
        ],
        [
            "Definition oner_neq0 := oner_neq0.",
            "VernacDefinition",
            "5a5eb04d793e456873a3642edbebbd2e950f5d47"
        ],
        [
            "Definition oner_eq0 := oner_eq0.",
            "VernacDefinition",
            "046c9872c338307840c2593c3766d10841aac637"
        ],
        [
            "Definition mul0r := mul0r.",
            "VernacDefinition",
            "896183f1d5381305b862f071e1273cd1cdc67196"
        ],
        [
            "Definition mulr0 := mulr0.",
            "VernacDefinition",
            "5445bce44864d9978bef2b9153128625d2159a29"
        ],
        [
            "Definition mulrN := mulrN.",
            "VernacDefinition",
            "0c7133666a59f3f4d94fcdde84c3df6410c30144"
        ],
        [
            "Definition mulNr := mulNr.",
            "VernacDefinition",
            "e06c538c9c6c7852296dc199b2ce05d7863ae2f9"
        ],
        [
            "Definition mulrNN := mulrNN.",
            "VernacDefinition",
            "693ad48798e6540e472675363642eed364d1850e"
        ],
        [
            "Definition mulN1r := mulN1r.",
            "VernacDefinition",
            "c4a385f0421ea130105d6f6976602fdb1401e375"
        ],
        [
            "Definition mulrN1 := mulrN1.",
            "VernacDefinition",
            "3c2e62f83f59e3159a756f9095f0092d62dbb6ea"
        ],
        [
            "Definition mulr_suml := mulr_suml.",
            "VernacDefinition",
            "60beefbf86769e6c85c68a30f54fd09883c6f5de"
        ],
        [
            "Definition mulr_sumr := mulr_sumr.",
            "VernacDefinition",
            "180a797137c19539d3b4fd0585909e25b95ee9da"
        ],
        [
            "Definition mulrBl := mulrBl.",
            "VernacDefinition",
            "e2c285e513bef8151275e9bd1f6de28284d352a8"
        ],
        [
            "Definition mulrBr := mulrBr.",
            "VernacDefinition",
            "4be8e0d16b19fcf6132b1b0c674bd67ae2bb8ede"
        ],
        [
            "Definition mulrnAl := mulrnAl.",
            "VernacDefinition",
            "dcc52d419ec5b8f913fac773b2bab41c98e9d73e"
        ],
        [
            "Definition mulrnAr := mulrnAr.",
            "VernacDefinition",
            "d5c7f85654eb31f2139779863e5776bd7d1c947e"
        ],
        [
            "Definition mulr_natl := mulr_natl.",
            "VernacDefinition",
            "b3d709fd37762ac4d3c47827f11342b2a601e319"
        ],
        [
            "Definition mulr_natr := mulr_natr.",
            "VernacDefinition",
            "9cb3bdef7083e3506830ce44cf0471a00708e628"
        ],
        [
            "Definition natrD := natrD.",
            "VernacDefinition",
            "27b2872b2cfa95c80017cbbfa4c81da597ac4fac"
        ],
        [
            "Definition natrB := natrB.",
            "VernacDefinition",
            "fd5fae18e5ff978382d58485f361dce376e509dc"
        ],
        [
            "Definition natr_sum := natr_sum.",
            "VernacDefinition",
            "05920fdc1d1755563dd6947b7e178666d725a5ca"
        ],
        [
            "Definition natrM := natrM.",
            "VernacDefinition",
            "4a8a12c5477b8521134937d70e12e1bfeea7683d"
        ],
        [
            "Definition natrX := natrX.",
            "VernacDefinition",
            "64c9f859c5874f38eb1d8e26240c7c702f5ab599"
        ],
        [
            "Definition expr0 := expr0.",
            "VernacDefinition",
            "789843d11cfb1e2ef6da70e77f42154031d39a2a"
        ],
        [
            "Definition exprS := exprS.",
            "VernacDefinition",
            "d807c42cf6bb4bd5615906bbf5ce734c9215a7a2"
        ],
        [
            "Definition expr1 := expr1.",
            "VernacDefinition",
            "d6c676e7f58b9eea3d595acd5d24efbb8f5724ff"
        ],
        [
            "Definition expr2 := expr2.",
            "VernacDefinition",
            "db3ded8a15c5267a1224c0c5fba903ec5de56573"
        ],
        [
            "Definition expr0n := expr0n.",
            "VernacDefinition",
            "80131142a559411429cb112ec5b9aafad79d1ce9"
        ],
        [
            "Definition expr1n := expr1n.",
            "VernacDefinition",
            "ba6fd04f38c984895e88202b21297a50a272ac00"
        ],
        [
            "Definition exprD := exprD.",
            "VernacDefinition",
            "15b978e1089fc97cd03c91c96b56192a33120475"
        ],
        [
            "Definition exprSr := exprSr.",
            "VernacDefinition",
            "96610f14f5739491e3917680e7ee0273bf5aba2c"
        ],
        [
            "Definition commr_sym := commr_sym.",
            "VernacDefinition",
            "daddea174c6a1fd28f5036cfa2016ff83e4ffb68"
        ],
        [
            "Definition commr_refl := commr_refl.",
            "VernacDefinition",
            "35018c60c029da31b7935de63ad878572b479d57"
        ],
        [
            "Definition commr0 := commr0.",
            "VernacDefinition",
            "e53cd2d3a0a91bf708bff1b721414cfa81772ba9"
        ],
        [
            "Definition commr1 := commr1.",
            "VernacDefinition",
            "056ab4ee6da00a54df288760b3baa43bfb8964d6"
        ],
        [
            "Definition commrN := commrN.",
            "VernacDefinition",
            "a9bbc4529cc82217614d565f33b9bc0fd37783aa"
        ],
        [
            "Definition commrN1 := commrN1.",
            "VernacDefinition",
            "69de846aa2210b652d137596a8c6244583bc3732"
        ],
        [
            "Definition commrD := commrD.",
            "VernacDefinition",
            "66310140ab6a2820aa936ce621addbe7b127b579"
        ],
        [
            "Definition commrMn := commrMn.",
            "VernacDefinition",
            "e50a6db296f0fa1c818688df7122f3aa90b770ba"
        ],
        [
            "Definition commrM := commrM.",
            "VernacDefinition",
            "20909122099556c703b7251dd3b394b402250157"
        ],
        [
            "Definition commr_nat := commr_nat.",
            "VernacDefinition",
            "6eb05d2f2dcd4b2b1576a1b47084a1a9988a2bd0"
        ],
        [
            "Definition commrX := commrX.",
            "VernacDefinition",
            "07fee074683202a376e9d39feafaa4cb92ea4c0a"
        ],
        [
            "Definition exprMn_comm := exprMn_comm.",
            "VernacDefinition",
            "4c8c91c426064dd6d533e15e1baa149eec717d1e"
        ],
        [
            "Definition commr_sign := commr_sign.",
            "VernacDefinition",
            "e2c7e1077d98730b4a8f0cfec8f8b33d606c6a56"
        ],
        [
            "Definition exprMn_n := exprMn_n.",
            "VernacDefinition",
            "025d6ee5626a89d4e78df5a0e6b8a8022913fadf"
        ],
        [
            "Definition exprM := exprM.",
            "VernacDefinition",
            "66e4dcc9428dbca86a3d0ebc5ab0357380d1eda5"
        ],
        [
            "Definition exprAC := exprAC.",
            "VernacDefinition",
            "473bb7e1129730f4adee4efcbd89567f4fe32693"
        ],
        [
            "Definition expr_mod := expr_mod.",
            "VernacDefinition",
            "03c3c2f3e350596e228ef033a6d135aa6f231564"
        ],
        [
            "Definition expr_dvd := expr_dvd.",
            "VernacDefinition",
            "f468c569a2bc91a5d733ad850ba3daf322e13162"
        ],
        [
            "Definition signr_odd := signr_odd.",
            "VernacDefinition",
            "783fee7e1bbb3d9e3e06000ce59c900700b2f19d"
        ],
        [
            "Definition signr_eq0 := signr_eq0.",
            "VernacDefinition",
            "5797a4013f396177f1ee5f015698b7f93a08df8f"
        ],
        [
            "Definition mulr_sign := mulr_sign.",
            "VernacDefinition",
            "7b2f568dec1a246e499d09498a4a1cd054bbc7ad"
        ],
        [
            "Definition signr_addb := signr_addb.",
            "VernacDefinition",
            "7b6231ff437c1f5366fb39d1822cda5c156ce1be"
        ],
        [
            "Definition signrN := signrN.",
            "VernacDefinition",
            "209e36a05c837942371f1ea43eff291583e85bde"
        ],
        [
            "Definition signrE := signrE.",
            "VernacDefinition",
            "64444644a4f26dee2ab475fb3f9306c398bf12f8"
        ],
        [
            "Definition mulr_signM := mulr_signM.",
            "VernacDefinition",
            "b3e643ac0da485a0d911784a55545608f6935f54"
        ],
        [
            "Definition exprNn := exprNn.",
            "VernacDefinition",
            "4a3528c325029f1d27ddf3cce1f6107d0b9e75d0"
        ],
        [
            "Definition sqrrN := sqrrN.",
            "VernacDefinition",
            "760c6289621527316866dc66f56039eb1f5b149c"
        ],
        [
            "Definition sqrr_sign := sqrr_sign.",
            "VernacDefinition",
            "56ffda3ece35d466fe60a90da0da542c4944f433"
        ],
        [
            "Definition signrMK := signrMK.",
            "VernacDefinition",
            "1195c2f0fb75549bea275f8920c2868dcd34a416"
        ],
        [
            "Definition mulrI_eq0 := mulrI_eq0.",
            "VernacDefinition",
            "1b6b93449c046b3da9a3af92f8f98ef17906871c"
        ],
        [
            "Definition lreg_neq0 := lreg_neq0.",
            "VernacDefinition",
            "950413559030adcb94eae90fcd7ddfbc608b3563"
        ],
        [
            "Definition mulrI0_lreg := mulrI0_lreg.",
            "VernacDefinition",
            "9709d321c3756921ab374734aead2de51871f6c9"
        ],
        [
            "Definition lregN := lregN.",
            "VernacDefinition",
            "d93461f6cf255dbe2c344f3f7342153cd4eb8e71"
        ],
        [
            "Definition lreg1 := lreg1.",
            "VernacDefinition",
            "fdc8b95e57fe66797e805cab09278947068f4919"
        ],
        [
            "Definition lregM := lregM.",
            "VernacDefinition",
            "6e92c219c13cc0e20e84f169feba852bd16ffa98"
        ],
        [
            "Definition lregX := lregX.",
            "VernacDefinition",
            "13e49a4c261daaae4699efdec218fbf6af2db25e"
        ],
        [
            "Definition lreg_sign := lreg_sign.",
            "VernacDefinition",
            "fa4b5e2fb0a91ad9a72a6da0e023744e970fc24c"
        ],
        [
            "Definition lregP {R x} := @lregP R x.",
            "VernacDefinition",
            "3230df13418f37f375f79718d567d306b0b5c814"
        ],
        [
            "Definition mulIr_eq0 := mulIr_eq0.",
            "VernacDefinition",
            "6356c7b21e3844beefefc46475749596fd7e4620"
        ],
        [
            "Definition mulIr0_rreg := mulIr0_rreg.",
            "VernacDefinition",
            "3b3beb772836984b590ac301ed443471b912c019"
        ],
        [
            "Definition rreg_neq0 := rreg_neq0.",
            "VernacDefinition",
            "1701992a66e2ca332b423a7fb0625e395f7f629b"
        ],
        [
            "Definition rregN := rregN.",
            "VernacDefinition",
            "7f673137b2f6a743b1df4533dd8eb3e0a574053c"
        ],
        [
            "Definition rreg1 := rreg1.",
            "VernacDefinition",
            "1a926c52127401dde5f8debf37e59bc8cdda3eca"
        ],
        [
            "Definition rregM := rregM.",
            "VernacDefinition",
            "5fa92c89bafad7d408768c485b60be4935dd16bc"
        ],
        [
            "Definition revrX := revrX.",
            "VernacDefinition",
            "7eed5f579f7bb78fcf276f23062b4d52ea9fc473"
        ],
        [
            "Definition rregX := rregX.",
            "VernacDefinition",
            "713adb45190c87be2bbbf1462be044acae05c359"
        ],
        [
            "Definition rregP {R x} := @rregP R x.",
            "VernacDefinition",
            "5da99a4a87374bd80a116630b6711bcf3b59c910"
        ],
        [
            "Definition exprDn_comm := exprDn_comm.",
            "VernacDefinition",
            "1e6f4691ac69de196be72fc04273fcebcb00c3b4"
        ],
        [
            "Definition exprBn_comm := exprBn_comm.",
            "VernacDefinition",
            "33f41133c5401095ee92e9acc67daf0a3752387d"
        ],
        [
            "Definition subrXX_comm := subrXX_comm.",
            "VernacDefinition",
            "d0cbf82037e73397339ce8ad8a40309fe9b3d2db"
        ],
        [
            "Definition exprD1n := exprD1n.",
            "VernacDefinition",
            "272c1b9ccf5ee26e89c331b03e6858cf5c615599"
        ],
        [
            "Definition subrX1 := subrX1.",
            "VernacDefinition",
            "33d066dc927f795ea6e4ae1f84e24055db76dbc3"
        ],
        [
            "Definition sqrrD1 := sqrrD1.",
            "VernacDefinition",
            "caefea318cc86343815eef007a05ce014519b71d"
        ],
        [
            "Definition sqrrB1 := sqrrB1.",
            "VernacDefinition",
            "f995c64ec22efe0bed7d989743192fb5942cf2cf"
        ],
        [
            "Definition subr_sqr_1 := subr_sqr_1.",
            "VernacDefinition",
            "1aae1204b3653565851ff85ce3c842db38b0756a"
        ],
        [
            "Definition charf0 := charf0.",
            "VernacDefinition",
            "0b96a1d72caa8e3e27228a7d49486b38b56b20ea"
        ],
        [
            "Definition charf_prime := charf_prime.",
            "VernacDefinition",
            "9221f36986b8e07a24b9489b07ccf5ca5f407109"
        ],
        [
            "Definition mulrn_char := mulrn_char.",
            "VernacDefinition",
            "56210e96e4fb0b3f77384f53d5fc60ccf66581eb"
        ],
        [
            "Definition dvdn_charf := dvdn_charf.",
            "VernacDefinition",
            "d6a868b5d66310427c3acfde2dc0f39d949e3202"
        ],
        [
            "Definition charf_eq := charf_eq.",
            "VernacDefinition",
            "520022141d96d809e7db32657d4f23f11b2fc47f"
        ],
        [
            "Definition bin_lt_charf_0 := bin_lt_charf_0.",
            "VernacDefinition",
            "72225fd4884e79d8fbc01c19052dd822b97b7476"
        ],
        [
            "Definition Frobenius_autE := Frobenius_autE.",
            "VernacDefinition",
            "965d21e678c604ba091b7bdb3a7cc0c9201bc7d9"
        ],
        [
            "Definition Frobenius_aut0 := Frobenius_aut0.",
            "VernacDefinition",
            "e288479056269937d98d13c635c0aef7726000a0"
        ],
        [
            "Definition Frobenius_aut1 := Frobenius_aut1.",
            "VernacDefinition",
            "5572c8f5a957fdb7495e0fd5026387242ce839cb"
        ],
        [
            "Definition Frobenius_autD_comm := Frobenius_autD_comm.",
            "VernacDefinition",
            "5e84cf4fbc3654a3e5c545cb0f04017e549f7d3a"
        ],
        [
            "Definition Frobenius_autMn := Frobenius_autMn.",
            "VernacDefinition",
            "f40c8de3c386acb40760925120b2665e945eabc3"
        ],
        [
            "Definition Frobenius_aut_nat := Frobenius_aut_nat.",
            "VernacDefinition",
            "40b6f991f8966050a14c3f08df6edd68eae14b80"
        ],
        [
            "Definition Frobenius_autM_comm := Frobenius_autM_comm.",
            "VernacDefinition",
            "23b519cb46a79114a6c4706b5b45695b269cfbd7"
        ],
        [
            "Definition Frobenius_autX := Frobenius_autX.",
            "VernacDefinition",
            "b4bbc048a5891ff1d27af349eed745c20149546f"
        ],
        [
            "Definition Frobenius_autN := Frobenius_autN.",
            "VernacDefinition",
            "2b6552b0d05730b112009c56e536793d8f82bf52"
        ],
        [
            "Definition Frobenius_autB_comm := Frobenius_autB_comm.",
            "VernacDefinition",
            "5ea6a00dca78fe43d7bc07ec6ce23ffd7f1de4a4"
        ],
        [
            "Definition exprNn_char := exprNn_char.",
            "VernacDefinition",
            "f30f1b67efe57641f2dfdbe6c022dd5e5bfde35c"
        ],
        [
            "Definition addrr_char2 := addrr_char2.",
            "VernacDefinition",
            "872a7c9cae897ec620bb36a068e15066678cb6b4"
        ],
        [
            "Definition oppr_char2 := oppr_char2.",
            "VernacDefinition",
            "398051e069d1d77a04bf5d7c3adbf5a731990522"
        ],
        [
            "Definition addrK_char2 := addrK_char2.",
            "VernacDefinition",
            "eb74498ec98009ce09b9f6f77df727871163e299"
        ],
        [
            "Definition addKr_char2 := addKr_char2.",
            "VernacDefinition",
            "6683560be2362b1f960b4785b3f0758c5d64327e"
        ],
        [
            "Definition prodr_const := prodr_const.",
            "VernacDefinition",
            "93d6f5cd8bbe2110f746a0f85efdba6e26148836"
        ],
        [
            "Definition mulrC := mulrC.",
            "VernacDefinition",
            "6679796a2edde8f09e638ac305bb7eef11c472aa"
        ],
        [
            "Definition mulrCA := mulrCA.",
            "VernacDefinition",
            "5e754b5d4453d338dd50838106b0b615cf0380cb"
        ],
        [
            "Definition mulrAC := mulrAC.",
            "VernacDefinition",
            "7c9def22ff7dc95170ea41a173033fa0d86f653f"
        ],
        [
            "Definition mulrACA := mulrACA.",
            "VernacDefinition",
            "543a145f3b7b4c6ac9be6743b52d77d54ef8524c"
        ],
        [
            "Definition exprMn := exprMn.",
            "VernacDefinition",
            "baf7a7711c731e66033187ee528372e79b2bb3c2"
        ],
        [
            "Definition prodrXl := prodrXl.",
            "VernacDefinition",
            "576cad3af796c897a4f86eba2609f1b74ef56dd1"
        ],
        [
            "Definition prodrXr := prodrXr.",
            "VernacDefinition",
            "ffd0d8a00e2676737cc666ac9029ec21ee45319d"
        ],
        [
            "Definition prodrN := prodrN.",
            "VernacDefinition",
            "c7190477c59b0110be1689f11a844560e55e4b1c"
        ],
        [
            "Definition prodrMn := prodrMn.",
            "VernacDefinition",
            "4b1f63180cf984dcbdfda86027b74c1bf454f4b7"
        ],
        [
            "Definition natr_prod := natr_prod.",
            "VernacDefinition",
            "e73d48a1aa3a61fa357db282382ec159fa456ce9"
        ],
        [
            "Definition prodr_undup_exp_count := prodr_undup_exp_count.",
            "VernacDefinition",
            "63c04c2f42cf13ac3b7199e5f2e04c9d4fa1acb3"
        ],
        [
            "Definition exprDn := exprDn.",
            "VernacDefinition",
            "11675bab17db884a904ec6d0bdc06e2511a3215b"
        ],
        [
            "Definition exprBn := exprBn.",
            "VernacDefinition",
            "2d4be61018289260fb20fc91a0ea75fc0ebd150e"
        ],
        [
            "Definition subrXX := subrXX.",
            "VernacDefinition",
            "216d1eef56da634eef56be8b42d6931929cdfcbc"
        ],
        [
            "Definition sqrrD := sqrrD.",
            "VernacDefinition",
            "8f9aca2d5600c78cbbee0dc389fea4bcebf6d7e0"
        ],
        [
            "Definition sqrrB := sqrrB.",
            "VernacDefinition",
            "20572d0b42922e7fb75611827a0f5f5e1e5bc42d"
        ],
        [
            "Definition subr_sqr := subr_sqr.",
            "VernacDefinition",
            "c21f7f08a0fa03ca22250c610545f66d14c1a6c4"
        ],
        [
            "Definition subr_sqrDB := subr_sqrDB.",
            "VernacDefinition",
            "bc4fb0516a3d5a8c97b41a199426b973e8b71f9a"
        ],
        [
            "Definition exprDn_char := exprDn_char.",
            "VernacDefinition",
            "be52cfec58e067378f9171936d3e977497d55813"
        ],
        [
            "Definition mulrV := mulrV.",
            "VernacDefinition",
            "6b39e3f90f689fe2ef20df5ef2ffb17aafee4695"
        ],
        [
            "Definition divrr := divrr.",
            "VernacDefinition",
            "996debbe01dc139c01ef456c546e710626f54287"
        ],
        [
            "Definition mulVr := mulVr.",
            "VernacDefinition",
            "6fbc1bf60f226762e1fcfb73d71ca9bd5fcd3b52"
        ],
        [
            "Definition invr_out := invr_out.",
            "VernacDefinition",
            "4d8f9ca6c4abe30ef66e6ec99492c3ddeb5f230c"
        ],
        [
            "Definition unitrP {R x} := @unitrP R x.",
            "VernacDefinition",
            "1c18538abdfbd8b863ebabb3dd84ec5b503f7bb9"
        ],
        [
            "Definition mulKr := mulKr.",
            "VernacDefinition",
            "59baacb43cd9aec1fa61ed97579d9ebf1479be2e"
        ],
        [
            "Definition mulVKr := mulVKr.",
            "VernacDefinition",
            "814477ba3f9e69644d063441b3c7f984757ee98e"
        ],
        [
            "Definition mulrK := mulrK.",
            "VernacDefinition",
            "ba071a10f4ce571591d12d4408bdb83ef4fd2643"
        ],
        [
            "Definition mulrVK := mulrVK.",
            "VernacDefinition",
            "20ea4dc6b3f5ae7cf8cca06eb331a0eb16bb6fc4"
        ],
        [
            "Definition divrK := divrK.",
            "VernacDefinition",
            "513021956ae5dbe15aff2005314011144f5cec9e"
        ],
        [
            "Definition mulrI := mulrI.",
            "VernacDefinition",
            "f7eb09497d626bb05fa7453b86f8b0f9c4940105"
        ],
        [
            "Definition mulIr := mulIr.",
            "VernacDefinition",
            "a0e03c9b5b5d8efc15359eee87472aef43fda924"
        ],
        [
            "Definition divrI := divrI.",
            "VernacDefinition",
            "321f52734b7423eeb5106ea92a6eeb8b290f493b"
        ],
        [
            "Definition divIr := divIr.",
            "VernacDefinition",
            "d790a322009ce19e2342775fb764668494437e57"
        ],
        [
            "Definition telescope_prodr := telescope_prodr.",
            "VernacDefinition",
            "c09b4b5006bd1cc4f2b6c22811dbacb288d743c2"
        ],
        [
            "Definition commrV := commrV.",
            "VernacDefinition",
            "5242fd7695604b8536902b37429d33ea5265c181"
        ],
        [
            "Definition unitrE := unitrE.",
            "VernacDefinition",
            "1c42676d03c7b6902a8e747daf955ee7cef5c3a3"
        ],
        [
            "Definition invrK := @invrK.",
            "VernacDefinition",
            "d89f6c170e6ecb66909f0d1359dbf2b8257da91a"
        ],
        [
            "Arguments invrK {R}.",
            "VernacArguments",
            "883c135fadf64ddd57a49da830e7d5d61391a3b8"
        ],
        [
            "Definition invr_inj := @invr_inj.",
            "VernacDefinition",
            "1b6b28105a3bfe66ac41b4d057929e46c2804feb"
        ],
        [
            "Arguments invr_inj {R} [x1 x2].",
            "VernacArguments",
            "1929204a58c431f83ab564f1aa3fdcbd260c2309"
        ],
        [
            "Definition unitrV := unitrV.",
            "VernacDefinition",
            "d0edc9d238a8abcda003da30cfef958e5f952977"
        ],
        [
            "Definition unitr1 := unitr1.",
            "VernacDefinition",
            "7d638048b312d4a94949f2a9bcdb719a43bfdc94"
        ],
        [
            "Definition invr1 := invr1.",
            "VernacDefinition",
            "cdd13463ff08c6580e64670c3de46ec478df6c6b"
        ],
        [
            "Definition divr1 := divr1.",
            "VernacDefinition",
            "fca96569b763a50c5a4949d3df136582bf86de4d"
        ],
        [
            "Definition div1r := div1r.",
            "VernacDefinition",
            "41f4385ce121b562e19d5dfadf3f59690a13162b"
        ],
        [
            "Definition natr_div := natr_div.",
            "VernacDefinition",
            "440eb5f825a56ca573ef684252a269c575c5173f"
        ],
        [
            "Definition unitr0 := unitr0.",
            "VernacDefinition",
            "fe5906d743bcd228963157e753fe3e6e63d50104"
        ],
        [
            "Definition invr0 := invr0.",
            "VernacDefinition",
            "9c15712a6d2489b04ebd7ba629576d4eac712fc3"
        ],
        [
            "Definition unitrN1 := unitrN1.",
            "VernacDefinition",
            "2f546cc7d1860aed06fd14e83d6235ed9a456fa2"
        ],
        [
            "Definition unitrN := unitrN.",
            "VernacDefinition",
            "73c5dbb4378cc9851d42b7450831ca85c0fb49b1"
        ],
        [
            "Definition invrN1 := invrN1.",
            "VernacDefinition",
            "b4eab4dce3cf7abfadc428c4f4d94a98da5aed6f"
        ],
        [
            "Definition invrN := invrN.",
            "VernacDefinition",
            "2d14c41a7f9588d5e0eb25a88f7bcff8f713306d"
        ],
        [
            "Definition invr_sign := invr_sign.",
            "VernacDefinition",
            "1150c1f47568275dd616a834b40f9a2188279948"
        ],
        [
            "Definition unitrMl := unitrMl.",
            "VernacDefinition",
            "7140d1a2c18781978eba81c3445338e376ce5707"
        ],
        [
            "Definition unitrMr := unitrMr.",
            "VernacDefinition",
            "ddf3b10ae4bca8d3350d88b9c9128483a938676a"
        ],
        [
            "Definition invrM := invrM.",
            "VernacDefinition",
            "c2512b8522bf33c4b492ab8c4d6e8da896d68a3a"
        ],
        [
            "Definition invr_eq0 := invr_eq0.",
            "VernacDefinition",
            "48781da0ab091059acc3599bf0ad6daf59e02b66"
        ],
        [
            "Definition invr_eq1 := invr_eq1.",
            "VernacDefinition",
            "94866c5824229fabc68e36617afd125d5b9a83de"
        ],
        [
            "Definition invr_neq0 := invr_neq0.",
            "VernacDefinition",
            "eed88be102770a7a5d380ebd678f800c0fb8f141"
        ],
        [
            "Definition unitrM_comm := unitrM_comm.",
            "VernacDefinition",
            "9472c6f7739088260fe85f751ee4eeeb92730ad3"
        ],
        [
            "Definition unitrX := unitrX.",
            "VernacDefinition",
            "b1a08f45e737f3af5c46b8e524c05b29880c70d2"
        ],
        [
            "Definition unitrX_pos := unitrX_pos.",
            "VernacDefinition",
            "0c561b756a5e0c13d4cf7cb5b32387cdcd1291ea"
        ],
        [
            "Definition exprVn := exprVn.",
            "VernacDefinition",
            "4f7f6a1cffd48b326ef2d3c48a7889724c598235"
        ],
        [
            "Definition exprB := exprB.",
            "VernacDefinition",
            "c977c896f8f9a69770fc655158ea9f4c3a4cb08d"
        ],
        [
            "Definition invr_signM := invr_signM.",
            "VernacDefinition",
            "89952f8b7abe308ab927941bedac42e3bda17b37"
        ],
        [
            "Definition divr_signM := divr_signM.",
            "VernacDefinition",
            "e3146240ce55811420616264a3ff9c92fb1b8be2"
        ],
        [
            "Definition rpred0D := rpred0D.",
            "VernacDefinition",
            "16687a9206555cd0a9517fe4789030fa259db553"
        ],
        [
            "Definition rpred0 := rpred0.",
            "VernacDefinition",
            "7f8f3457e42cda3b3e4340397aee87d08beee861"
        ],
        [
            "Definition rpredD := rpredD.",
            "VernacDefinition",
            "04985c6a67020df7fdf13aed0be2abd7c80f3d09"
        ],
        [
            "Definition rpredNr := rpredNr.",
            "VernacDefinition",
            "66619c79a6829a60d83fa56b1a57c7b919eba204"
        ],
        [
            "Definition rpred_sum := rpred_sum.",
            "VernacDefinition",
            "c36f3fd4c5d77683ec1e242a9326b6d6acfe64ff"
        ],
        [
            "Definition rpredMn := rpredMn.",
            "VernacDefinition",
            "0869c57961a205c8aa36dcae1648443813c9237f"
        ],
        [
            "Definition rpredN := rpredN.",
            "VernacDefinition",
            "6fd9d263312f750c37d37ebd4a554d386b20db55"
        ],
        [
            "Definition rpredB := rpredB.",
            "VernacDefinition",
            "e07d70db83ffb9bd11fd8c7e21e287ee9f9b24de"
        ],
        [
            "Definition rpredMNn := rpredMNn.",
            "VernacDefinition",
            "b4b50844909e25e5049362e62fb6fd2e35ab0a9f"
        ],
        [
            "Definition rpredDr := rpredDr.",
            "VernacDefinition",
            "4f0a8f9b00f641b77e16b277c0d0c0da57de5bec"
        ],
        [
            "Definition rpredDl := rpredDl.",
            "VernacDefinition",
            "ba42471f8580169c91d7d43862ff81f5569ae36a"
        ],
        [
            "Definition rpredBr := rpredBr.",
            "VernacDefinition",
            "cde307eddd5d30dd263743f7853fe5b7fe99022d"
        ],
        [
            "Definition rpredBl := rpredBl.",
            "VernacDefinition",
            "051f59bcfcadacb76dcb41c559763998bc7b191c"
        ],
        [
            "Definition rpredMsign := rpredMsign.",
            "VernacDefinition",
            "70cd6ec6f38ac05194ce7e88576d11a73017aee4"
        ],
        [
            "Definition rpred1M := rpred1M.",
            "VernacDefinition",
            "1f37e21a01b0239db7ea8ea95080ec9c5a71b67f"
        ],
        [
            "Definition rpred1 := rpred1.",
            "VernacDefinition",
            "32c06957c5b17975ba25f1c5ec64c3f259396011"
        ],
        [
            "Definition rpredM := rpredM.",
            "VernacDefinition",
            "2db7cc7794258e55f330bc7f775e2098314d00c0"
        ],
        [
            "Definition rpred_prod := rpred_prod.",
            "VernacDefinition",
            "9c269598716f4e1993593c64aee66b1895047766"
        ],
        [
            "Definition rpredX := rpredX.",
            "VernacDefinition",
            "564f94ef6a6e5839f18782ab2733ec05172e4187"
        ],
        [
            "Definition rpred_nat := rpred_nat.",
            "VernacDefinition",
            "376ad0b604328fa0bb12c8e8bbdaa636144975f9"
        ],
        [
            "Definition rpredN1 := rpredN1.",
            "VernacDefinition",
            "7ae739620468f02b6a3948bb72489ac26bf42612"
        ],
        [
            "Definition rpred_sign := rpred_sign.",
            "VernacDefinition",
            "1739ef7a55d1e5af8fc99e67d24be13f1080c192"
        ],
        [
            "Definition rpredZsign := rpredZsign.",
            "VernacDefinition",
            "e625ccb5b09e700bf27ed29680094f7c7e61ecbc"
        ],
        [
            "Definition rpredZnat := rpredZnat.",
            "VernacDefinition",
            "5d96c26b0e562d8e4331f9721bf3ad79ba18a400"
        ],
        [
            "Definition rpredZ := rpredZ.",
            "VernacDefinition",
            "3f0a0cce7d279f5906fe4ed38d7e6ff24c159302"
        ],
        [
            "Definition rpredVr := rpredVr.",
            "VernacDefinition",
            "e4767219569b91bde5422a2407ebab7cab17dd7e"
        ],
        [
            "Definition rpredV := rpredV.",
            "VernacDefinition",
            "23b9c715cc3995b68c98e39a192a642621bda3d4"
        ],
        [
            "Definition rpred_div := rpred_div.",
            "VernacDefinition",
            "d17928922899bc60913650bde517b436b160ed69"
        ],
        [
            "Definition rpredXN := rpredXN.",
            "VernacDefinition",
            "e4bc0a7830bbd041c704be8fd2912811aff74282"
        ],
        [
            "Definition rpredZeq := rpredZeq.",
            "VernacDefinition",
            "5f167c0cc0eeff9a208e04101eceb3cb52ce8a05"
        ],
        [
            "Definition char_lalg := char_lalg.",
            "VernacDefinition",
            "540cfee5c2d59fd89f688d242a8da4d475fc59db"
        ],
        [
            "Definition rpredMr := rpredMr.",
            "VernacDefinition",
            "fcaa59b140077b1f18ce150045794442bdde67ba"
        ],
        [
            "Definition rpredMl := rpredMl.",
            "VernacDefinition",
            "4f8b107f5fc75ccaad868de4d495700cc9ac0262"
        ],
        [
            "Definition rpred_divr := rpred_divr.",
            "VernacDefinition",
            "d8c0016d871aecc48d7f63689b6916bdbf98ac8f"
        ],
        [
            "Definition rpred_divl := rpred_divl.",
            "VernacDefinition",
            "6ffd7c4c2de8b2bb75a0e7c5473b816adb395713"
        ],
        [
            "Definition eq_eval := eq_eval.",
            "VernacDefinition",
            "46d484075baf85ed42abcaa00daf8f100f26d4c7"
        ],
        [
            "Definition eval_tsubst := eval_tsubst.",
            "VernacDefinition",
            "3f3d870e54cc63914b104d19adc222179aef6670"
        ],
        [
            "Definition eq_holds := eq_holds.",
            "VernacDefinition",
            "455aadcacec8990b2c81049a1de3cdf68541cd0d"
        ],
        [
            "Definition holds_fsubst := holds_fsubst.",
            "VernacDefinition",
            "bbf6a33900b8d4840115bbf4d10a694337f54691"
        ],
        [
            "Definition unitrM := unitrM.",
            "VernacDefinition",
            "469809b1ac62ea43fb9585adbb885a6ae6c7c444"
        ],
        [
            "Definition unitrPr {R x} := @unitrPr R x.",
            "VernacDefinition",
            "c48d475c7a1bffdbf80808fee4ed85c8139dda2f"
        ],
        [
            "Definition expr_div_n := expr_div_n.",
            "VernacDefinition",
            "696e40cf5f72f5b096d254632f84ee7870ab1551"
        ],
        [
            "Definition mulr1_eq := mulr1_eq.",
            "VernacDefinition",
            "18bdce0f4dfea693148252670bf793d6f8db4af7"
        ],
        [
            "Definition divr1_eq := divr1_eq.",
            "VernacDefinition",
            "52caf182785128903f98e61c4d2f35c16842e954"
        ],
        [
            "Definition divKr := divKr.",
            "VernacDefinition",
            "e7f2eb1bea8e987cfe411abb10216ccb5f9661c8"
        ],
        [
            "Definition mulf_eq0 := mulf_eq0.",
            "VernacDefinition",
            "19f0c8909fa0e47f65a9e5f7a6817a1664ce3108"
        ],
        [
            "Definition prodf_eq0 := prodf_eq0.",
            "VernacDefinition",
            "689e6f1c09fe18743c08731f053b4b10aa71ceb4"
        ],
        [
            "Definition prodf_seq_eq0 := prodf_seq_eq0.",
            "VernacDefinition",
            "a3ef5360e080d7ded596c56fe420c1bfb269a663"
        ],
        [
            "Definition mulf_neq0 := mulf_neq0.",
            "VernacDefinition",
            "6a0d4d3109a9eeeb7ede90a7780a5432efbbd549"
        ],
        [
            "Definition prodf_neq0 := prodf_neq0.",
            "VernacDefinition",
            "ea61ebab70a7b467e07ac96eefd9b38be5064a0f"
        ],
        [
            "Definition prodf_seq_neq0 := prodf_seq_neq0.",
            "VernacDefinition",
            "48716a8ad06a11bbe886209de5adb2d62649e746"
        ],
        [
            "Definition expf_eq0 := expf_eq0.",
            "VernacDefinition",
            "e9d3d1424aaadfe5a1fd660af1f47ad92eeb8611"
        ],
        [
            "Definition sqrf_eq0 := sqrf_eq0.",
            "VernacDefinition",
            "e5c7ffaa21548651b2da4746f6b4ed76941da1fd"
        ],
        [
            "Definition expf_neq0 := expf_neq0.",
            "VernacDefinition",
            "03b6944639403c266ff7c5ec454afdce128c45f9"
        ],
        [
            "Definition natf_neq0 := natf_neq0.",
            "VernacDefinition",
            "7fb06acb73826ceb371fbbb6995e928898476d33"
        ],
        [
            "Definition natf0_char := natf0_char.",
            "VernacDefinition",
            "2ba7bb242e05a87fbc570d9885b40fd9f61f2a23"
        ],
        [
            "Definition charf'_nat := charf'_nat.",
            "VernacDefinition",
            "3d62c5f2131837e27d165a16ff7f494d890a750f"
        ],
        [
            "Definition charf0P := charf0P.",
            "VernacDefinition",
            "2bb0a28c4659ea07c243939493e3ffb1e3491787"
        ],
        [
            "Definition eqf_sqr := eqf_sqr.",
            "VernacDefinition",
            "a67470da0bcb308895ab6c82f8c54c6d81c58655"
        ],
        [
            "Definition mulfI := mulfI.",
            "VernacDefinition",
            "ba8f04dfa718bbfbc889ddbfa10aa838763a15b9"
        ],
        [
            "Definition mulIf := mulIf.",
            "VernacDefinition",
            "cfc67e59e48c7f1a25e50b1e00a4236a88261738"
        ],
        [
            "Definition divfI := divfI.",
            "VernacDefinition",
            "af012fb97b98b3924b6a1cb77698ad5610d2799e"
        ],
        [
            "Definition divIf := divIf.",
            "VernacDefinition",
            "029842c39c5f4b9cd4ed6a8f54b3a6d343a96bf4"
        ],
        [
            "Definition sqrf_eq1 := sqrf_eq1.",
            "VernacDefinition",
            "2acb528657f36ec0db322f0dbb64d3eadaa87673"
        ],
        [
            "Definition expfS_eq1 := expfS_eq1.",
            "VernacDefinition",
            "6f8d2fad32f0561de4fca649cc08e6e5c60ae81b"
        ],
        [
            "Definition fieldP := fieldP.",
            "VernacDefinition",
            "43c49c60650cb7f3c6cf7b63390d42ebd29da33d"
        ],
        [
            "Definition unitfE := unitfE.",
            "VernacDefinition",
            "bf6f2945adcceaf5996c15ab075ea3e816792a78"
        ],
        [
            "Definition mulVf := mulVf.",
            "VernacDefinition",
            "229939ad455e440b2cff88c86cf9e8664c6d4618"
        ],
        [
            "Definition mulfV := mulfV.",
            "VernacDefinition",
            "3db1b3dfe765c66b856f31def14c998cc5ae0cec"
        ],
        [
            "Definition divff := divff.",
            "VernacDefinition",
            "d831dec065ce33f2db4c74b3e3058bbef1d1ab68"
        ],
        [
            "Definition mulKf := mulKf.",
            "VernacDefinition",
            "1d062aa696bfcf834816431f16cc5ac33eff31b8"
        ],
        [
            "Definition mulVKf := mulVKf.",
            "VernacDefinition",
            "e9389f46e9e9da1d387bc18a64c2ebd34f72d9a0"
        ],
        [
            "Definition mulfK := mulfK.",
            "VernacDefinition",
            "387f347ef0fad3e48a727a0e9c05fdfd5582479f"
        ],
        [
            "Definition mulfVK := mulfVK.",
            "VernacDefinition",
            "ba0dc87f6536dd8989bbd20b74487d5e2c51febf"
        ],
        [
            "Definition divfK := divfK.",
            "VernacDefinition",
            "0793d87501c32f82abe0207e6f2fa74f1cbab1e5"
        ],
        [
            "Definition divKf := divKf.",
            "VernacDefinition",
            "0410b62a564305f0d59d59cf0e15c6c3240b18ed"
        ],
        [
            "Definition invfM := invfM.",
            "VernacDefinition",
            "abeebc1b7dbe09dbcf061d94dc20ae5ed1a1c19b"
        ],
        [
            "Definition invf_div := invf_div.",
            "VernacDefinition",
            "ac2069e0d0ccdbe65099e02b1e37c3f72d640121"
        ],
        [
            "Definition expfB_cond := expfB_cond.",
            "VernacDefinition",
            "4c78d5e77c6832883a96745645cd3365e3f25647"
        ],
        [
            "Definition expfB := expfB.",
            "VernacDefinition",
            "eb48378ce306ab085b04c3e23eec331bd1772871"
        ],
        [
            "Definition prodfV := prodfV.",
            "VernacDefinition",
            "d87ae00f6cc3e1a2b8e60ab22076dbbd4484da9d"
        ],
        [
            "Definition prodf_div := prodf_div.",
            "VernacDefinition",
            "f8b03d9bf8cab05f90a17350768004e0850aa440"
        ],
        [
            "Definition telescope_prodf := telescope_prodf.",
            "VernacDefinition",
            "5537e007cacea1a4877f10242f3f4b346cb3d81c"
        ],
        [
            "Definition addf_div := addf_div.",
            "VernacDefinition",
            "c9baa6130a4b1fae6d2147d7b1bdaccb1b37cef2"
        ],
        [
            "Definition mulf_div := mulf_div.",
            "VernacDefinition",
            "72ce74a7dd8576b611352e27b96d466be45c9bef"
        ],
        [
            "Definition char0_natf_div := char0_natf_div.",
            "VernacDefinition",
            "633c61d52d4150d5d9ea0aa136838732ba3ac581"
        ],
        [
            "Definition fpredMr := fpredMr.",
            "VernacDefinition",
            "2678086a130d7044661b231689dc7422823c2814"
        ],
        [
            "Definition fpredMl := fpredMl.",
            "VernacDefinition",
            "8a1ad9903321bd76d90eec573f32723485631c51"
        ],
        [
            "Definition fpred_divr := fpred_divr.",
            "VernacDefinition",
            "2279ed717fb6e9540773b9388a2068b0832e52be"
        ],
        [
            "Definition fpred_divl := fpred_divl.",
            "VernacDefinition",
            "a6227b653a1bf3301eba12fc77e714c314220e29"
        ],
        [
            "Definition satP {F e f} := @satP F e f.",
            "VernacDefinition",
            "b5cbc67582472ef7b0901ada28e5b8f3af27cc63"
        ],
        [
            "Definition eq_sat := eq_sat.",
            "VernacDefinition",
            "03b1a388402771da7f55a2383d4ba3649817dbe4"
        ],
        [
            "Definition solP {F n f} := @solP F n f.",
            "VernacDefinition",
            "2d6d21e58d3a5c8446f90044daaf7b4fce3fea2d"
        ],
        [
            "Definition eq_sol := eq_sol.",
            "VernacDefinition",
            "9594cc93729121ef0dc5479aba40810480ffd614"
        ],
        [
            "Definition size_sol := size_sol.",
            "VernacDefinition",
            "0b34253eac2f8cc6b1cbd44cf1a469d20f2a5659"
        ],
        [
            "Definition solve_monicpoly := solve_monicpoly.",
            "VernacDefinition",
            "f2187ab4c11f6377532487d24293588e4f15ef69"
        ],
        [
            "Definition raddf0 := raddf0.",
            "VernacDefinition",
            "e4ac044a2d211821692f10a8aa0c05102500e4dc"
        ],
        [
            "Definition raddf_eq0 := raddf_eq0.",
            "VernacDefinition",
            "a131d8b46b1395df9f7b712ac9e7bf1ffcca1a44"
        ],
        [
            "Definition raddfN := raddfN.",
            "VernacDefinition",
            "83fea9f530af6e251d7e9b06da2f1c4e65d44aef"
        ],
        [
            "Definition raddfD := raddfD.",
            "VernacDefinition",
            "d8c4ef95784a2d2656a714e82de62a4107d2e969"
        ],
        [
            "Definition raddfB := raddfB.",
            "VernacDefinition",
            "7ed53b9ecf863fe9c8873619cbda6ffb5a9f63d1"
        ],
        [
            "Definition raddf_sum := raddf_sum.",
            "VernacDefinition",
            "e8a3cc0dd8b9e3f4aee454fa71b828782b4181e7"
        ],
        [
            "Definition raddfMn := raddfMn.",
            "VernacDefinition",
            "4073603ac7b69dd746fa01fb7963558287bb3897"
        ],
        [
            "Definition raddfMNn := raddfMNn.",
            "VernacDefinition",
            "946728a33abd9b21b9edca056c4303cf389fb97d"
        ],
        [
            "Definition raddfMnat := raddfMnat.",
            "VernacDefinition",
            "e6520c70eb49194e35062b893cde398ea955d527"
        ],
        [
            "Definition raddfMsign := raddfMsign.",
            "VernacDefinition",
            "95440d2dd2945e84fad3034bad1701e1f71045f0"
        ],
        [
            "Definition can2_additive := can2_additive.",
            "VernacDefinition",
            "0341945787f6293dd5c28dfb2f11f1e92d30aeb6"
        ],
        [
            "Definition bij_additive := bij_additive.",
            "VernacDefinition",
            "2788d8a95420895837dfc02312b5c63342f80693"
        ],
        [
            "Definition rmorph0 := rmorph0.",
            "VernacDefinition",
            "409c87e80a4abe16d4ada65048a1f617fbfede68"
        ],
        [
            "Definition rmorphN := rmorphN.",
            "VernacDefinition",
            "ec04eef4d6e51760a961c707a5df43401046381b"
        ],
        [
            "Definition rmorphD := rmorphD.",
            "VernacDefinition",
            "d61616e4f8cad467dd1d8ec0c033d8a5162001b1"
        ],
        [
            "Definition rmorphB := rmorphB.",
            "VernacDefinition",
            "b52d78a56f85da6b0d93b4318fef50937d732dc0"
        ],
        [
            "Definition rmorph_sum := rmorph_sum.",
            "VernacDefinition",
            "df1810b6583c1b2c877fe1dab301244c463efaf1"
        ],
        [
            "Definition rmorphMn := rmorphMn.",
            "VernacDefinition",
            "793dcfc4f3ddea1b57e2476dabe2102e4779e557"
        ],
        [
            "Definition rmorphMNn := rmorphMNn.",
            "VernacDefinition",
            "a5b1c1446aa0cdf96cf2cdbb60edfb026d891fc1"
        ],
        [
            "Definition rmorphismP := rmorphismP.",
            "VernacDefinition",
            "6c8fa73e541422b03f7bdf47d1b6f34ef910e2f6"
        ],
        [
            "Definition rmorphismMP := rmorphismMP.",
            "VernacDefinition",
            "12d8f52cd2218cdf38dbd53b903c168a576a61df"
        ],
        [
            "Definition rmorph1 := rmorph1.",
            "VernacDefinition",
            "00cc39753ec2840badca6b82d1be55f0db028a7d"
        ],
        [
            "Definition rmorph_eq1 := rmorph_eq1.",
            "VernacDefinition",
            "b62307e3d68894023560a18fc2dc162fa230a33f"
        ],
        [
            "Definition rmorphM := rmorphM.",
            "VernacDefinition",
            "ef9ed0f606be844b9a27c334da13aaf90372b259"
        ],
        [
            "Definition rmorphMsign := rmorphMsign.",
            "VernacDefinition",
            "565535399d591970a02eb429f34c4964e9232433"
        ],
        [
            "Definition rmorph_nat := rmorph_nat.",
            "VernacDefinition",
            "03be5ca6f1592d7bf2d9dea91456ea1e9c9e4465"
        ],
        [
            "Definition rmorph_eq_nat := rmorph_eq_nat.",
            "VernacDefinition",
            "47c79ee12a57764fb219aa846998f1cdee42d71f"
        ],
        [
            "Definition rmorph_prod := rmorph_prod.",
            "VernacDefinition",
            "ad47a651a052068a7c5af4ce63c098deee37ec5c"
        ],
        [
            "Definition rmorphX := rmorphX.",
            "VernacDefinition",
            "cd3498b5c966c7ea7a7a46fa929193fa36cddd97"
        ],
        [
            "Definition rmorphN1 := rmorphN1.",
            "VernacDefinition",
            "7502693fe33d2309c2312ff90b6d45bb92b22378"
        ],
        [
            "Definition rmorph_sign := rmorph_sign.",
            "VernacDefinition",
            "bdad2e369041d1d2b938029e3d19263c5e300ccf"
        ],
        [
            "Definition rmorph_char := rmorph_char.",
            "VernacDefinition",
            "0843e46d6fcf4432db0608824aa83d0739b284ad"
        ],
        [
            "Definition can2_rmorphism := can2_rmorphism.",
            "VernacDefinition",
            "ba26ade6f9e24ffaae6bb660022bf75e1e56e91a"
        ],
        [
            "Definition bij_rmorphism := bij_rmorphism.",
            "VernacDefinition",
            "a9b60571ce4c766dc72e5fb516ea614c2bd5b3d4"
        ],
        [
            "Definition rmorph_comm := rmorph_comm.",
            "VernacDefinition",
            "7619a692a90975181c74e043c9cb18fc111f6beb"
        ],
        [
            "Definition rmorph_unit := rmorph_unit.",
            "VernacDefinition",
            "946a9b0f4ef3d51833c0f575c08a0f9d710b1a80"
        ],
        [
            "Definition rmorphV := rmorphV.",
            "VernacDefinition",
            "28b39bf5875df42a8a78e6c9936850f9fd48996c"
        ],
        [
            "Definition rmorph_div := rmorph_div.",
            "VernacDefinition",
            "d80523ba70d3ad93d04d3dc75457351b9779043b"
        ],
        [
            "Definition fmorph_eq0 := fmorph_eq0.",
            "VernacDefinition",
            "5645c9d8da3101ec90a54dc0e71eb14bd83f5d3a"
        ],
        [
            "Definition fmorph_inj := @fmorph_inj.",
            "VernacDefinition",
            "3129f79a89e3aaf5514773a3ee58cfb4c2533245"
        ],
        [
            "Arguments fmorph_inj {F R} f [x1 x2].",
            "VernacArguments",
            "d1d7334bc387a492a68f8728f16ac2e0771ae61b"
        ],
        [
            "Definition fmorph_eq1 := fmorph_eq1.",
            "VernacDefinition",
            "6a91fd85ef355184101fd7c0c247d37c10e049a1"
        ],
        [
            "Definition fmorph_char := fmorph_char.",
            "VernacDefinition",
            "cced3283d939fd3ac5ff82ff876fae80bdda38d7"
        ],
        [
            "Definition fmorph_unit := fmorph_unit.",
            "VernacDefinition",
            "ec61d2b243a57941dbffc5d51a3f55c0285ae7fa"
        ],
        [
            "Definition fmorphV := fmorphV.",
            "VernacDefinition",
            "6d378c81477fabeb8d2b49d8dbf8e8fc33cd629c"
        ],
        [
            "Definition fmorph_div := fmorph_div.",
            "VernacDefinition",
            "0f2aeb9a5ccd4de06d731837b654f32228bd613e"
        ],
        [
            "Definition scalerA := scalerA.",
            "VernacDefinition",
            "244cf8c7052a4032d2233799b4de53bdab92edbe"
        ],
        [
            "Definition scale1r := scale1r.",
            "VernacDefinition",
            "010d911ca70f6dbd0bc35e046dfbb0b3229b07b5"
        ],
        [
            "Definition scalerDr := scalerDr.",
            "VernacDefinition",
            "3f74089add921a92f013c37eb6971895667fd193"
        ],
        [
            "Definition scalerDl := scalerDl.",
            "VernacDefinition",
            "72abf9a5d15c1168cffcc01ef1c2e310419ba8cc"
        ],
        [
            "Definition scaler0 := scaler0.",
            "VernacDefinition",
            "01dfaef5c2eb2731b4551b9b9575432864edcdc2"
        ],
        [
            "Definition scale0r := scale0r.",
            "VernacDefinition",
            "1cd78a2091ea5f3291d765463ee3b58068a6616e"
        ],
        [
            "Definition scaleNr := scaleNr.",
            "VernacDefinition",
            "3397aee5f053fe8523d884ed06d7ee027c5565d6"
        ],
        [
            "Definition scaleN1r := scaleN1r.",
            "VernacDefinition",
            "5c7d8db034eb7c68de70aba9e42005630ec061eb"
        ],
        [
            "Definition scalerN := scalerN.",
            "VernacDefinition",
            "343bb30b16b77f5edfd3f40b1834c1d622a933ba"
        ],
        [
            "Definition scalerBl := scalerBl.",
            "VernacDefinition",
            "922f2bec3c9e8aede645d1be2394ca1b08d86a25"
        ],
        [
            "Definition scalerBr := scalerBr.",
            "VernacDefinition",
            "4670bc920ae23ad4bfcaf50080a2f83b4f5e0402"
        ],
        [
            "Definition scaler_nat := scaler_nat.",
            "VernacDefinition",
            "7856352f833f6432571f32c7e9f1fcf5414f0cd6"
        ],
        [
            "Definition scalerMnl := scalerMnl.",
            "VernacDefinition",
            "123cac9cddbc9c5af5d36ae61119337029f20d7e"
        ],
        [
            "Definition scalerMnr := scalerMnr.",
            "VernacDefinition",
            "bc02232ed62b48b3b7dfedb32d08477cdc7500d4"
        ],
        [
            "Definition scaler_suml := scaler_suml.",
            "VernacDefinition",
            "d6f91694ade97dcdbde3103b1a237f522be4e03d"
        ],
        [
            "Definition scaler_sumr := scaler_sumr.",
            "VernacDefinition",
            "956c955b1f3428640a61774eb13f647653f6acfb"
        ],
        [
            "Definition scaler_eq0 := scaler_eq0.",
            "VernacDefinition",
            "27b38ba5d1e77a60f5833395f50bbff351165a1b"
        ],
        [
            "Definition scalerK := scalerK.",
            "VernacDefinition",
            "64cd505605ac246514dee9bb067066ad973c40f7"
        ],
        [
            "Definition scalerKV := scalerKV.",
            "VernacDefinition",
            "c7a6daae546bb941a8c4da143387e1551e941d0b"
        ],
        [
            "Definition scalerI := scalerI.",
            "VernacDefinition",
            "8811e8d60fb316f2b40e87f9e629dd29f0009747"
        ],
        [
            "Definition scalerAl := scalerAl.",
            "VernacDefinition",
            "724d5058754b827edb9ff38eaf9fb94f5d260a0f"
        ],
        [
            "Definition mulr_algl := mulr_algl.",
            "VernacDefinition",
            "9f9c4b0c7e88f0da63895365829c6a21e2f2aa43"
        ],
        [
            "Definition scaler_sign := scaler_sign.",
            "VernacDefinition",
            "4027e8fecedb8e9c53aaf5302b49cd01b6033198"
        ],
        [
            "Definition signrZK := signrZK.",
            "VernacDefinition",
            "53c63bb69ebee6b712b1b8517d48164a5bb19789"
        ],
        [
            "Definition scalerCA := scalerCA.",
            "VernacDefinition",
            "5b2d208649d173fc14c12053bb7256196920418b"
        ],
        [
            "Definition scalerAr := scalerAr.",
            "VernacDefinition",
            "c81c7ee54d0acfeb847e2722705767c7fbe549bc"
        ],
        [
            "Definition mulr_algr := mulr_algr.",
            "VernacDefinition",
            "d20b80842ad8aa593a1c61c661706e7e35ac8163"
        ],
        [
            "Definition exprZn := exprZn.",
            "VernacDefinition",
            "49e4577746d24199b7680b2ba9f3d58bdaec9bd3"
        ],
        [
            "Definition scaler_prodl := scaler_prodl.",
            "VernacDefinition",
            "230fb2e7a692d1ba30cf83d089b1be4cf241baae"
        ],
        [
            "Definition scaler_prodr := scaler_prodr.",
            "VernacDefinition",
            "78b7a44f7b4e274ddaefae728ed538d4665d011b"
        ],
        [
            "Definition scaler_prod := scaler_prod.",
            "VernacDefinition",
            "29330a5aa4d4bdd156f4e68c1cc0c12cffdbe540"
        ],
        [
            "Definition scaler_injl := scaler_injl.",
            "VernacDefinition",
            "c2156d3ca05d8df9bdc1bcf9819f98c20bc874a3"
        ],
        [
            "Definition scaler_unit := scaler_unit.",
            "VernacDefinition",
            "44f42c6c92cf085857bb66a629fb8f3393cd5727"
        ],
        [
            "Definition invrZ := invrZ.",
            "VernacDefinition",
            "20493be25d3ecbb9ab4597ab5780239a547de795"
        ],
        [
            "Definition raddfZnat := raddfZnat.",
            "VernacDefinition",
            "65a9e8ed48e66d5122de5b82c9c0a772b7d3da42"
        ],
        [
            "Definition raddfZsign := raddfZsign.",
            "VernacDefinition",
            "6f5e26dbee00f2ff943b86435736608785b2a282"
        ],
        [
            "Definition in_algE := in_algE.",
            "VernacDefinition",
            "39e3715c090b80189aacb07e5a4a10fd16067b83"
        ],
        [
            "Definition linear0 := linear0.",
            "VernacDefinition",
            "656fa9351eebbef330251abf6b1689acba14edaf"
        ],
        [
            "Definition linearN := linearN.",
            "VernacDefinition",
            "6a4ed5eea42a06d525e877cb1ba175a18775ef0c"
        ],
        [
            "Definition linearD := linearD.",
            "VernacDefinition",
            "3d390e6ad86853e00a99f94efeb00603a9fc0989"
        ],
        [
            "Definition linearB := linearB.",
            "VernacDefinition",
            "ea9ac5b9c239f42be5768fcce359a8ffab676778"
        ],
        [
            "Definition linear_sum := linear_sum.",
            "VernacDefinition",
            "e56f16675897ac29f724ea49e1136f69048fe5f8"
        ],
        [
            "Definition linearMn := linearMn.",
            "VernacDefinition",
            "5f6e76ace7ce452bb4752ababbffb7242bd6e582"
        ],
        [
            "Definition linearMNn := linearMNn.",
            "VernacDefinition",
            "1b2265143ed7fed72d04f2cebee5b81e320cd0d4"
        ],
        [
            "Definition linearP := linearP.",
            "VernacDefinition",
            "5d41b906462fab001e2333782e8378af29da6327"
        ],
        [
            "Definition linearZ_LR := linearZ_LR.",
            "VernacDefinition",
            "0a2a9f96e279454da07ea6da997fdecb7228fdff"
        ],
        [
            "Definition linearZ := linearZ.",
            "VernacDefinition",
            "044d40f0114c6e9c7f940da8d7244d7d37fb60e9"
        ],
        [
            "Definition linearPZ := linearPZ.",
            "VernacDefinition",
            "8dd9d07dec425a732a4d2acbefb87e6a40eba6df"
        ],
        [
            "Definition linearZZ := linearZZ.",
            "VernacDefinition",
            "2ab458a6cf132c68c46e31085006966fd237fd4c"
        ],
        [
            "Definition scalarP := scalarP.",
            "VernacDefinition",
            "913f6ca1baa592a3d32d84c079827e07242227b2"
        ],
        [
            "Definition scalarZ := scalarZ.",
            "VernacDefinition",
            "d44661e72f6be230f7d9e48fa3b0bddb83c28015"
        ],
        [
            "Definition can2_linear := can2_linear.",
            "VernacDefinition",
            "e3435e838f83a43eeba37c84c1db9c85f9490b25"
        ],
        [
            "Definition bij_linear := bij_linear.",
            "VernacDefinition",
            "dd48db1549cc381490e333cde6fd274684984a41"
        ],
        [
            "Definition rmorph_alg := rmorph_alg.",
            "VernacDefinition",
            "b0563382661932e8c4e5fe532c63433e3904bc48"
        ],
        [
            "Definition lrmorphismP := lrmorphismP.",
            "VernacDefinition",
            "30ce4ff7ef2789ba23c97ee7f63b4c12fd371382"
        ],
        [
            "Definition can2_lrmorphism := can2_lrmorphism.",
            "VernacDefinition",
            "6cc94eb6c818116e94fba0173dc28deb0467010a"
        ],
        [
            "Definition bij_lrmorphism := bij_lrmorphism.",
            "VernacDefinition",
            "043d0e095af85b5cfa89c4f93d343086467e64c3"
        ],
        [
            "Definition imaginary_exists := imaginary_exists.",
            "VernacDefinition",
            "034c12307b184e5c27dac25cf246d577b04d0e79"
        ],
        [
            "Notation null_fun V := (null_fun V) (only parsing).",
            "VernacSyntacticDefinition",
            "b103727a87efdc39277139cbc46cc89f3f6deb92"
        ],
        [
            "Notation in_alg A := (in_alg_loc A).",
            "VernacSyntacticDefinition",
            "c56b3766f5a1ca861e3da57f4f589174f57e30c9"
        ],
        [
            "End Theory.",
            "VernacEndSegment",
            "3b5383a8665fcdb23b7893346ca6ee697173139d"
        ],
        [
            "Notation in_alg A := (in_alg_loc A).",
            "VernacSyntacticDefinition",
            "c56b3766f5a1ca861e3da57f4f589174f57e30c9"
        ],
        [
            "End GRing.",
            "VernacEndSegment",
            "b4c846b2f886385dc844a92167c33e9f0bcbe86e"
        ],
        [
            "Export Zmodule.Exports Ring.Exports Lmodule.Exports Lalgebra.Exports.",
            "VernacImport",
            "db09f48ca222395355b86ef69a1adacbc470c2a4"
        ],
        [
            "Export Additive.Exports RMorphism.Exports Linear.Exports LRMorphism.Exports.",
            "VernacImport",
            "276a9e5337195afee5d6bce45002e1600db210c9"
        ],
        [
            "Export ComRing.Exports Algebra.Exports UnitRing.Exports UnitAlgebra.Exports.",
            "VernacImport",
            "78e515617b75add8119c79d172b6709259e6eee5"
        ],
        [
            "Export ComUnitRing.Exports IntegralDomain.Exports Field.Exports.",
            "VernacImport",
            "2b25b6681ba622c179e8cbb47aac6ad33f31ec99"
        ],
        [
            "Export DecidableField.Exports ClosedField.Exports.",
            "VernacImport",
            "4d4b9502f6a4afa164333672d51f28b4249300ed"
        ],
        [
            "Export Pred.Exports SubType.Exports.",
            "VernacImport",
            "a6040399ca10a4eb84aed1c362111e011c4e6c90"
        ],
        [
            "Notation QEdecFieldMixin := QEdecFieldMixin.",
            "VernacSyntacticDefinition",
            "1d18b03f054b678a36ad95c8e8ba24e4c326617b"
        ],
        [
            "Notation \"0\" := (zero _) : ring_scope.",
            "VernacNotation",
            "c7d6c870a2abca7634c12dbc7882eff474ae3c3c"
        ],
        [
            "Notation \"-%R\" := (@opp _) : ring_scope.",
            "VernacNotation",
            "a77bd0820b984ec0758d2b5e7a6a5f928ece76e3"
        ],
        [
            "Notation \"- x\" := (opp x) : ring_scope.",
            "VernacNotation",
            "318ceaa41bd535269c210f868e43725d5dd63196"
        ],
        [
            "Notation \"+%R\" := (@add _).",
            "VernacNotation",
            "b1c0390c7d345a52a58b97f2146be4f9098e9b58"
        ],
        [
            "Notation \"x + y\" := (add x y) : ring_scope.",
            "VernacNotation",
            "28087737b35ec95dda8d2de926e0fad5ec11777e"
        ],
        [
            "Notation \"x - y\" := (add x (- y)) : ring_scope.",
            "VernacNotation",
            "a1c307534b78b77f7bf47d9bcbc4cedd46a43510"
        ],
        [
            "Notation \"x *+ n\" := (natmul x n) : ring_scope.",
            "VernacNotation",
            "3f5b2c46bc3615c5b58558343f920c11e9d57b37"
        ],
        [
            "Notation \"x *- n\" := (opp (x *+ n)) : ring_scope.",
            "VernacNotation",
            "28de6d3d63742fd342037a6ee5054b2190bca4fc"
        ],
        [
            "Notation \"s `_ i\" := (seq.nth 0%R s%R i) : ring_scope.",
            "VernacNotation",
            "186e765d1925e9352c594ba0962f619ed372b49f"
        ],
        [
            "Notation support := 0.-support.",
            "VernacSyntacticDefinition",
            "beaa822c471f17f59ab8254e60c33acd3dae7978"
        ],
        [
            "Notation \"1\" := (one _) : ring_scope.",
            "VernacNotation",
            "e23fdb28174795fce3e7dcd70aca07d29c5e9c75"
        ],
        [
            "Notation \"- 1\" := (opp 1) : ring_scope.",
            "VernacNotation",
            "9ef6a2ae50aea6b6d0a24138552c8ed08fdb4192"
        ],
        [
            "Notation \"n %:R\" := (natmul 1 n) : ring_scope.",
            "VernacNotation",
            "aa3324cd6baf748cbc5b9b1065c6b7eb2568bc70"
        ],
        [
            "Notation \"[ 'char' R ]\" := (char (Phant R)) : ring_scope.",
            "VernacNotation",
            "b9b2da0643a14aebc3ffd29aea8a55a6af19187a"
        ],
        [
            "Notation Frobenius_aut chRp := (Frobenius_aut chRp).",
            "VernacSyntacticDefinition",
            "95b343f35d79261a9c4c641235fac1e477a11051"
        ],
        [
            "Notation \"*%R\" := (@mul _).",
            "VernacNotation",
            "8db362ae53e7996ad21e376394a57241a0a5547f"
        ],
        [
            "Notation \"x * y\" := (mul x y) : ring_scope.",
            "VernacNotation",
            "52d4bb58c0b6c990995fab43dea4b2ef19eda25a"
        ],
        [
            "Notation \"x ^+ n\" := (exp x n) : ring_scope.",
            "VernacNotation",
            "3b5f230959dafc381eac93a805b8b0abfae59c7c"
        ],
        [
            "Notation \"x ^-1\" := (inv x) : ring_scope.",
            "VernacNotation",
            "1cd35b69eb16772352624cf9a7a2b5e47e7e5c16"
        ],
        [
            "Notation \"x ^- n\" := (inv (x ^+ n)) : ring_scope.",
            "VernacNotation",
            "8ed8d49d9d8a8a79c2c771f7a02af31d0464764c"
        ],
        [
            "Notation \"x / y\" := (mul x y^-1) : ring_scope.",
            "VernacNotation",
            "3109d717b27a9bc3ec0b82ef2eff7331856a400e"
        ],
        [
            "Notation \"*:%R\" := (@scale _ _).",
            "VernacNotation",
            "ccb50cb9b00b35c6bbe6d465316a835b2d99f63f"
        ],
        [
            "Notation \"a *: m\" := (scale a m) : ring_scope.",
            "VernacNotation",
            "ae9af783fddffc95a25006abe32a84ac3edc3bfa"
        ],
        [
            "Notation \"k %:A\" := (scale k 1) : ring_scope.",
            "VernacNotation",
            "d3bbbd38b5ab4ba551e99c509e9bb4c98e2a3caf"
        ],
        [
            "Notation \"\\0\" := (null_fun _) : ring_scope.",
            "VernacNotation",
            "5d7c839665c6411ba24472517dddc5e80b930f98"
        ],
        [
            "Notation \"f \\+ g\" := (add_fun_head tt f g) : ring_scope.",
            "VernacNotation",
            "230a7e53567a660b68e5f7de8dac135508bad696"
        ],
        [
            "Notation \"f \\- g\" := (sub_fun_head tt f g) : ring_scope.",
            "VernacNotation",
            "674ba301b45c30bb7ef143011e0c473e1ad2065f"
        ],
        [
            "Notation \"a \\*: f\" := (scale_fun_head tt a f) : ring_scope.",
            "VernacNotation",
            "73bc91c94c6dafaab9ad653d21c204784d91428c"
        ],
        [
            "Notation \"x \\*o f\" := (mull_fun_head tt x f) : ring_scope.",
            "VernacNotation",
            "bb542dbdb6eed45a942dd9e688239a7a78f4210a"
        ],
        [
            "Notation \"x \\o* f\" := (mulr_fun_head tt x f) : ring_scope.",
            "VernacNotation",
            "1a13ebc234edf17fff4cd8c63f2b01124bea8262"
        ],
        [
            "Notation \"\\sum_ ( i <- r | P ) F\" := (\\big[+%R/0%R]_(i <- r | P%B) F%R) : ring_scope.",
            "VernacNotation",
            "423543f022871e8f8db2259a75f863dea9090ab9"
        ],
        [
            "Notation \"\\sum_ ( i <- r ) F\" := (\\big[+%R/0%R]_(i <- r) F%R) : ring_scope.",
            "VernacNotation",
            "7f302510ba0f1f94ac28fc8b53b9c5eda2d22433"
        ],
        [
            "Notation \"\\sum_ ( m <= i < n | P ) F\" := (\\big[+%R/0%R]_(m <= i < n | P%B) F%R) : ring_scope.",
            "VernacNotation",
            "e43d27cdaa6cd10c0ca2c11f8a0f082be005033a"
        ],
        [
            "Notation \"\\sum_ ( m <= i < n ) F\" := (\\big[+%R/0%R]_(m <= i < n) F%R) : ring_scope.",
            "VernacNotation",
            "972d074d85a912e8fcd9ecce450531565f9f7dac"
        ],
        [
            "Notation \"\\sum_ ( i | P ) F\" := (\\big[+%R/0%R]_(i | P%B) F%R) : ring_scope.",
            "VernacNotation",
            "5bef81c56e5f3c375b99ae049661ee6ac889269f"
        ],
        [
            "Notation \"\\sum_ i F\" := (\\big[+%R/0%R]_i F%R) : ring_scope.",
            "VernacNotation",
            "822e8a2ee50ab0337d16f5a4dfd166db072891e4"
        ],
        [
            "Notation \"\\sum_ ( i : t | P ) F\" := (\\big[+%R/0%R]_(i : t | P%B) F%R) (only parsing) : ring_scope.",
            "VernacNotation",
            "83564418b85767cd12ed64964ced07ba73e54421"
        ],
        [
            "Notation \"\\sum_ ( i : t ) F\" := (\\big[+%R/0%R]_(i : t) F%R) (only parsing) : ring_scope.",
            "VernacNotation",
            "dd86989356e2657ced362f051bf34b2023333f18"
        ],
        [
            "Notation \"\\sum_ ( i < n | P ) F\" := (\\big[+%R/0%R]_(i < n | P%B) F%R) : ring_scope.",
            "VernacNotation",
            "fdc7aa4c41988157afd8b152c85fccb54f9715f4"
        ],
        [
            "Notation \"\\sum_ ( i < n ) F\" := (\\big[+%R/0%R]_(i < n) F%R) : ring_scope.",
            "VernacNotation",
            "17eff160db6b21b3c4e8aeff191085d0466fb97a"
        ],
        [
            "Notation \"\\sum_ ( i 'in' A | P ) F\" := (\\big[+%R/0%R]_(i in A | P%B) F%R) : ring_scope.",
            "VernacNotation",
            "3664ef52903438dfba75b779678016a477cf0379"
        ],
        [
            "Notation \"\\sum_ ( i 'in' A ) F\" := (\\big[+%R/0%R]_(i in A) F%R) : ring_scope.",
            "VernacNotation",
            "baf170194b7c85ff2ce230387d3d842c3226894c"
        ],
        [
            "Notation \"\\prod_ ( i <- r | P ) F\" := (\\big[*%R/1%R]_(i <- r | P%B) F%R) : ring_scope.",
            "VernacNotation",
            "9ed8805b424b6cb9498f2b81f625023f9ded2a9e"
        ],
        [
            "Notation \"\\prod_ ( i <- r ) F\" := (\\big[*%R/1%R]_(i <- r) F%R) : ring_scope.",
            "VernacNotation",
            "b2510d674cb01150678dbfa2c39c6487164dcf77"
        ],
        [
            "Notation \"\\prod_ ( m <= i < n | P ) F\" := (\\big[*%R/1%R]_(m <= i < n | P%B) F%R) : ring_scope.",
            "VernacNotation",
            "821c470066ac5065daf2f85bd1c4d98971789c03"
        ],
        [
            "Notation \"\\prod_ ( m <= i < n ) F\" := (\\big[*%R/1%R]_(m <= i < n) F%R) : ring_scope.",
            "VernacNotation",
            "fe3717d91fb12f2404bbb680249436d93dc1457e"
        ],
        [
            "Notation \"\\prod_ ( i | P ) F\" := (\\big[*%R/1%R]_(i | P%B) F%R) : ring_scope.",
            "VernacNotation",
            "9e125d4d81f009b701456c84c8d453fbeb5b267e"
        ],
        [
            "Notation \"\\prod_ i F\" := (\\big[*%R/1%R]_i F%R) : ring_scope.",
            "VernacNotation",
            "f9949c7bd64ead59250531339ac40bf20551ff2a"
        ],
        [
            "Notation \"\\prod_ ( i : t | P ) F\" := (\\big[*%R/1%R]_(i : t | P%B) F%R) (only parsing) : ring_scope.",
            "VernacNotation",
            "f04a0b2755963e1072c4d1175227bc48b4cef494"
        ],
        [
            "Notation \"\\prod_ ( i : t ) F\" := (\\big[*%R/1%R]_(i : t) F%R) (only parsing) : ring_scope.",
            "VernacNotation",
            "b24736e5b199205c604f58a31f221fb57012a768"
        ],
        [
            "Notation \"\\prod_ ( i < n | P ) F\" := (\\big[*%R/1%R]_(i < n | P%B) F%R) : ring_scope.",
            "VernacNotation",
            "6a4e34d6d9d1904bedbb52798d9c4feed22ca49f"
        ],
        [
            "Notation \"\\prod_ ( i < n ) F\" := (\\big[*%R/1%R]_(i < n) F%R) : ring_scope.",
            "VernacNotation",
            "5840c5ed39df46aad33bf2926ab096674f58c366"
        ],
        [
            "Notation \"\\prod_ ( i 'in' A | P ) F\" := (\\big[*%R/1%R]_(i in A | P%B) F%R) : ring_scope.",
            "VernacNotation",
            "548d70d15ce3e94d2b5bdc9f05f678053cd94a73"
        ],
        [
            "Notation \"\\prod_ ( i 'in' A ) F\" := (\\big[*%R/1%R]_(i in A) F%R) : ring_scope.",
            "VernacNotation",
            "9ff17b3ed982385a822f4542621ae7ef58e06d52"
        ],
        [
            "Canonical add_monoid.",
            "VernacCanonical",
            "6448aaf3033dcc5fd72a2a401727b9825691a21d"
        ],
        [
            "Canonical add_comoid.",
            "VernacCanonical",
            "9e82020dbca1e9c137cf398eaaf23385f61f9862"
        ],
        [
            "Canonical mul_monoid.",
            "VernacCanonical",
            "925ea174dd8102d5bd13ff14a7a886d832e9d44c"
        ],
        [
            "Canonical mul_comoid.",
            "VernacCanonical",
            "5895c6279cb945c69a5caf4bf0bdcb53371d916c"
        ],
        [
            "Canonical muloid.",
            "VernacCanonical",
            "285f8f95dcb3d62f9d564a09b913f969805fc0da"
        ],
        [
            "Canonical addoid.",
            "VernacCanonical",
            "62ce4c45a7aa70bdfded6d0cbb9acb2d5009d1cf"
        ],
        [
            "Canonical locked_additive.",
            "VernacCanonical",
            "c14aa1e873ac1e4c68e552ca12147383221739f6"
        ],
        [
            "Canonical locked_rmorphism.",
            "VernacCanonical",
            "2fd48ba5f914733f9b14ddf7bca9df9a59238f93"
        ],
        [
            "Canonical locked_linear.",
            "VernacCanonical",
            "aa0260fc56ba4c1bb5cf3702a741c92c9fa5dcb9"
        ],
        [
            "Canonical locked_lrmorphism.",
            "VernacCanonical",
            "a889d4b6cf409f26bfeff871378af435bff9eb50"
        ],
        [
            "Canonical idfun_additive.",
            "VernacCanonical",
            "32d58181675620a997fcfb17a819eeba097bb1eb"
        ],
        [
            "Canonical idfun_rmorphism.",
            "VernacCanonical",
            "9b1df752f9dc764a48ea2fcdb3d21e8a025152b4"
        ],
        [
            "Canonical idfun_linear.",
            "VernacCanonical",
            "793e4d6ec6347c5c64d5ba9f4317ca2b7bba5fcc"
        ],
        [
            "Canonical idfun_lrmorphism.",
            "VernacCanonical",
            "304af96595ef969f13449ab07ac33f3d0161a62e"
        ],
        [
            "Canonical comp_additive.",
            "VernacCanonical",
            "e745501bb9d761e57046283dfe5d5253c364aca4"
        ],
        [
            "Canonical comp_rmorphism.",
            "VernacCanonical",
            "907995df182e1dca2f70d2d3a054408ab5d9a927"
        ],
        [
            "Canonical comp_linear.",
            "VernacCanonical",
            "eae7f8307fff2a0ec56fd90e9f2fa15b09fe2de1"
        ],
        [
            "Canonical comp_lrmorphism.",
            "VernacCanonical",
            "2090dd0dc187464621c7adaa894895bee901f6d9"
        ],
        [
            "Canonical opp_additive.",
            "VernacCanonical",
            "305db62a5ddfdd7a2166a216c5a4c1c3ede562ab"
        ],
        [
            "Canonical opp_linear.",
            "VernacCanonical",
            "e0a508d613d2d2ad19853398214b499569bdcf4a"
        ],
        [
            "Canonical scale_additive.",
            "VernacCanonical",
            "b02bfb1633d7d6b9ef22be34a463b4d4b8249801"
        ],
        [
            "Canonical scale_linear.",
            "VernacCanonical",
            "163fb81385b55682c49b6c9507beaa9a627ba9c3"
        ],
        [
            "Canonical null_fun_additive.",
            "VernacCanonical",
            "895181dd5240c6708b7836510fe63b9ba0e7f595"
        ],
        [
            "Canonical null_fun_linear.",
            "VernacCanonical",
            "238d916894cde406305d031d9f0d1f4cdb15eee1"
        ],
        [
            "Canonical scale_fun_additive.",
            "VernacCanonical",
            "1739deeceb747f0d443333cf77b583f7a856cfcc"
        ],
        [
            "Canonical scale_fun_linear.",
            "VernacCanonical",
            "77ac4530442ec031d345eca55cbc50291a793d11"
        ],
        [
            "Canonical add_fun_additive.",
            "VernacCanonical",
            "1645b4c74c34a7252be34b607897f75ced8e99e3"
        ],
        [
            "Canonical add_fun_linear.",
            "VernacCanonical",
            "5d4fce28ed0846a47fee6fb96ee5c1bd6f4013f8"
        ],
        [
            "Canonical sub_fun_additive.",
            "VernacCanonical",
            "e9687588165fc3ec6eea50340841bcac7f5f98ed"
        ],
        [
            "Canonical sub_fun_linear.",
            "VernacCanonical",
            "0ca6bac3e2993c3e0d1ad97103e471996b896bcd"
        ],
        [
            "Canonical mull_fun_additive.",
            "VernacCanonical",
            "69db4f75786104c3ef89a9aff9052c029ac02acd"
        ],
        [
            "Canonical mull_fun_linear.",
            "VernacCanonical",
            "78a91dfd67a4c91379dfa773263929fc1b174577"
        ],
        [
            "Canonical mulr_fun_additive.",
            "VernacCanonical",
            "fdf2cf0f6781895d598abd779a2e5b69c88c89d5"
        ],
        [
            "Canonical mulr_fun_linear.",
            "VernacCanonical",
            "20de173829008c7a4a04cef1f4894fe0d59847d0"
        ],
        [
            "Canonical Frobenius_aut_additive.",
            "VernacCanonical",
            "304e1a1dae9982767e473efd38c3b4374fc4851f"
        ],
        [
            "Canonical Frobenius_aut_rmorphism.",
            "VernacCanonical",
            "7e9f60e9dabd40179aee2d80146f75dd20ed806f"
        ],
        [
            "Canonical in_alg_additive.",
            "VernacCanonical",
            "1dd503436b97d33a42a3927471947971dbcf5f34"
        ],
        [
            "Canonical in_alg_rmorphism.",
            "VernacCanonical",
            "186a5259846e1e93665ccf00df1abb33fcbf80f9"
        ],
        [
            "Notation \"R ^c\" := (converse R) (at level 2, format \"R ^c\") : type_scope.",
            "VernacNotation",
            "ae174faa4e12787c0fa0d6a0a61288bcddc94358"
        ],
        [
            "Canonical converse_eqType.",
            "VernacCanonical",
            "9d93790234e1160c1f0b7d2e479ea617f61f3005"
        ],
        [
            "Canonical converse_choiceType.",
            "VernacCanonical",
            "f1ec3bc0c57bfd8c1c24332e25332e095caf8649"
        ],
        [
            "Canonical converse_zmodType.",
            "VernacCanonical",
            "b9e6feba07ab1473ee0c976140d6e4de7753ccc8"
        ],
        [
            "Canonical converse_ringType.",
            "VernacCanonical",
            "cf8156f4983d432dc87313c4d8872126402468b7"
        ],
        [
            "Canonical converse_unitRingType.",
            "VernacCanonical",
            "85b954ce66b064b1c0a116a5f5a33a634703519a"
        ],
        [
            "Notation \"R ^o\" := (regular R) (at level 2, format \"R ^o\") : type_scope.",
            "VernacNotation",
            "293298281bf315632bba4ce5d19c263b7bd38a91"
        ],
        [
            "Canonical regular_eqType.",
            "VernacCanonical",
            "1407084ae85b2603f7c7da1606974d25341f27eb"
        ],
        [
            "Canonical regular_choiceType.",
            "VernacCanonical",
            "f2d2b6cc8bbf323c1a4f2db2119b271fd26959c9"
        ],
        [
            "Canonical regular_zmodType.",
            "VernacCanonical",
            "e74a23b9d416e688222859f9807b09ca5f6482c7"
        ],
        [
            "Canonical regular_ringType.",
            "VernacCanonical",
            "7901a9ee0f26f5b0e9e8664a17ffa75666074b6d"
        ],
        [
            "Canonical regular_lmodType.",
            "VernacCanonical",
            "674581bc0f282ac549fa24ce8a9a305a6a6c2d3d"
        ],
        [
            "Canonical regular_lalgType.",
            "VernacCanonical",
            "e84b30b36b10eee184fe7591841322112b12d67d"
        ],
        [
            "Canonical regular_comRingType.",
            "VernacCanonical",
            "601d3d352dd51a691f92fe44e80207d929d119eb"
        ],
        [
            "Canonical regular_algType.",
            "VernacCanonical",
            "2e101d7cfd4b640f8bfaf8f079a77681b9bbda5b"
        ],
        [
            "Canonical regular_unitRingType.",
            "VernacCanonical",
            "b1a353cdcd48cb1ec712f8ae5fc8452816442058"
        ],
        [
            "Canonical regular_comUnitRingType.",
            "VernacCanonical",
            "22d69dc8c816d175cdfdca7e16e0e7232d3a249f"
        ],
        [
            "Canonical regular_unitAlgType.",
            "VernacCanonical",
            "490ed314fb0763864a6829fd0040bfdb3b12af47"
        ],
        [
            "Canonical regular_idomainType.",
            "VernacCanonical",
            "f0ed873034edde55b36b3dba57b64e0d717d214c"
        ],
        [
            "Canonical regular_fieldType.",
            "VernacCanonical",
            "40be23eeb2798cf9fd17ea2b6c17a0c52480d447"
        ],
        [
            "Canonical unit_keyed.",
            "VernacCanonical",
            "c9b7d1eaf511f24ddf8512a26a618f31539bfc2c"
        ],
        [
            "Canonical unit_opprPred.",
            "VernacCanonical",
            "43b89cfc25eb8a78c7c0216619b821fa5d474ae6"
        ],
        [
            "Canonical unit_mulrPred.",
            "VernacCanonical",
            "096cd629bbf9d165c8fb795d865f7814f7c3fd92"
        ],
        [
            "Canonical unit_smulrPred.",
            "VernacCanonical",
            "33080017795c0b9f45e0f366955b5511359e1b7b"
        ],
        [
            "Canonical unit_divrPred.",
            "VernacCanonical",
            "8aaaf210315e94bb33c6b9851fb7084534490c2e"
        ],
        [
            "Canonical unit_sdivrPred.",
            "VernacCanonical",
            "f5e7b6819ac6fb71b1ac35576e622f1c7088863b"
        ],
        [
            "Bind Scope term_scope with term.",
            "VernacBindScope",
            "9fac6bbd2768157eb78410370d731c0ac77cef1f"
        ],
        [
            "Bind Scope term_scope with formula.",
            "VernacBindScope",
            "2b842525ada6f6145ed64898f67c2d2a09769631"
        ],
        [
            "Notation \"''X_' i\" := (Var _ i) : term_scope.",
            "VernacNotation",
            "0fe01dbb547ca8a35b91f1e8cddd7dd165f282ee"
        ],
        [
            "Notation \"n %:R\" := (NatConst _ n) : term_scope.",
            "VernacNotation",
            "b04a90f11aedcd421cad34a346528cbb14cb581a"
        ],
        [
            "Notation \"0\" := 0%:R%T : term_scope.",
            "VernacNotation",
            "c96573d5886d8bf0aa1b8aafba57541f854a8832"
        ],
        [
            "Notation \"1\" := 1%:R%T : term_scope.",
            "VernacNotation",
            "858ddaf86c726ef50aaf01d83aa2462fab6af284"
        ],
        [
            "Notation \"x %:T\" := (Const x) : term_scope.",
            "VernacNotation",
            "d64d71364f060e32b36b832b0e39f41f6cf77a42"
        ],
        [
            "Infix \"+\" := Add : term_scope.",
            "VernacInfix",
            "d5dccc2bacfab3fa9914db54d5378c9d3e81f354"
        ],
        [
            "Notation \"- t\" := (Opp t) : term_scope.",
            "VernacNotation",
            "d4574cd13eab5557e3a200a63c6c05de91240def"
        ],
        [
            "Notation \"t - u\" := (Add t (- u)) : term_scope.",
            "VernacNotation",
            "52ce3886efb061829eb603e62ffb07633a432627"
        ],
        [
            "Infix \"*\" := Mul : term_scope.",
            "VernacInfix",
            "063a82c0cf4117eec76a17d8756758e82cb5b361"
        ],
        [
            "Infix \"*+\" := NatMul : term_scope.",
            "VernacInfix",
            "a8bee6ca1340ac12cbcb335e2f510f203f15c28b"
        ],
        [
            "Notation \"t ^-1\" := (Inv t) : term_scope.",
            "VernacNotation",
            "a6f4cbf6a309f89e24dbbf727d65a3767f0708ae"
        ],
        [
            "Notation \"t / u\" := (Mul t u^-1) : term_scope.",
            "VernacNotation",
            "91a9129ba9b3d3173505b347926b6c88a9387e7c"
        ],
        [
            "Infix \"^+\" := Exp : term_scope.",
            "VernacInfix",
            "b587bc9fdaf6d56951a583e169ad3128d460d52b"
        ],
        [
            "Infix \"==\" := Equal : term_scope.",
            "VernacInfix",
            "5e9c7b21ac7b7d0abc7de167b79088e0970e78d4"
        ],
        [
            "Notation \"x != y\" := (GRing.Not (x == y)) : term_scope.",
            "VernacNotation",
            "c9e4325af87d6e42ec24f865d66415faed5e6cb2"
        ],
        [
            "Infix \"/\\\" := And : term_scope.",
            "VernacInfix",
            "3dc48d76845d7a0b90dea12e4b3050964d0f5847"
        ],
        [
            "Infix \"\\/\" := Or : term_scope.",
            "VernacInfix",
            "58b2d3807464f98bcb47d51b87af337a185ccbee"
        ],
        [
            "Infix \"==>\" := Implies : term_scope.",
            "VernacInfix",
            "c733b40a4bcf60aeb9605c411668761dd487f33b"
        ],
        [
            "Notation \"~ f\" := (Not f) : term_scope.",
            "VernacNotation",
            "afe47f3a9a04d80f97cf253d1a2d3305a5b5ef94"
        ],
        [
            "Notation \"''exists' ''X_' i , f\" := (Exists i f) : term_scope.",
            "VernacNotation",
            "8a59f0162f63fbb427dc5f58a898c632e09d23e2"
        ],
        [
            "Notation \"''forall' ''X_' i , f\" := (Forall i f) : term_scope.",
            "VernacNotation",
            "b3d61dc0f968a2cbcfa38dcbec217cf0c680cf31"
        ],
        [
            "Section FinFunZmod.",
            "VernacBeginSection",
            "5671d5da7eb0ba311131abf8def5d1070a4e216d"
        ],
        [
            "Variable (aT : finType) (rT : zmodType).",
            "VernacAssumption",
            "7b820abac1af9909342ae3d4793ccc9e7f90a8e1"
        ],
        [
            "Implicit Types f g : {ffun aT -> rT}.",
            "VernacReserve",
            "b9c504d1806d570fcde8782c6302ed52535206fa"
        ],
        [
            "Definition ffun_zero := [ffun a : aT => (0 : rT)].",
            "VernacDefinition",
            "53d70fb0695439ece8342ae4fd20f01bcdcca152"
        ],
        [
            "Definition ffun_opp f := [ffun a => - f a].",
            "VernacDefinition",
            "c37b5864a4a3a09fbfca05ac7980f6adde4621e1"
        ],
        [
            "Definition ffun_add f g := [ffun a => f a + g a].",
            "VernacDefinition",
            "f0fdb6dd9982f3bb920b8d99a394913dbe1e2597"
        ],
        [
            "Fact ffun_addA : associative ffun_add.",
            "VernacStartTheoremProof",
            "b94ab025dec780e6f8b3b09df5a9b85e90fee1a1"
        ],
        [
            "by move=> f1 f2 f3; apply/ffunP=> a; rewrite !ffunE addrA.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Fact ffun_addC : commutative ffun_add.",
            "VernacStartTheoremProof",
            "994c2e8346d10e8e0a4ee3ad133ad3d4be466939"
        ],
        [
            "by move=> f1 f2; apply/ffunP=> a; rewrite !ffunE addrC.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Fact ffun_add0 : left_id ffun_zero ffun_add.",
            "VernacStartTheoremProof",
            "cc86341af2c9a0daa38bc16edf4faea5b5927a29"
        ],
        [
            "by move=> f; apply/ffunP=> a; rewrite !ffunE add0r.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Fact ffun_addN : left_inverse ffun_zero ffun_opp ffun_add.",
            "VernacStartTheoremProof",
            "23c5b2b6e5fd7834c0078f7658c933a14bde9ca6"
        ],
        [
            "by move=> f; apply/ffunP=> a; rewrite !ffunE addNr.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Definition ffun_zmodMixin := Zmodule.Mixin ffun_addA ffun_addC ffun_add0 ffun_addN.",
            "VernacDefinition",
            "35827b2f3c7c8f70cb8a9490ca1e63b866292f46"
        ],
        [
            "Canonical ffun_zmodType := Eval hnf in ZmodType _ ffun_zmodMixin.",
            "VernacDefinition",
            "dcfb15d71566e6df27de6b3755fd7b75d79c6402"
        ],
        [
            "Section Sum.",
            "VernacBeginSection",
            "3ad78400a33340a8325b476a9bd416e802acffdc"
        ],
        [
            "Variables (I : Type) (r : seq I) (P : pred I) (F : I -> {ffun aT -> rT}).",
            "VernacAssumption",
            "96e2ec9d425bbafdf789c457ebf2da2481a57339"
        ],
        [
            "Lemma sum_ffunE x : (\\sum_(i <- r | P i) F i) x = \\sum_(i <- r | P i) F i x.",
            "VernacStartTheoremProof",
            "f6bc93cf121d76b32be8f3747ba9d6e97b7c0590"
        ],
        [
            "by elim/big_rec2: _ => // [|i _ y _ <-]; rewrite !ffunE.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma sum_ffun : \\sum_(i <- r | P i) F i = [ffun x => \\sum_(i <- r | P i) F i x].",
            "VernacStartTheoremProof",
            "163c00b516db5a354981dac2d7ab1bb5a4c0f6a3"
        ],
        [
            "by apply/ffunP=> i; rewrite sum_ffunE ffunE.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "End Sum.",
            "VernacEndSegment",
            "4f3bb45ccb2f8ea2c3019bac94947a402ddc1169"
        ],
        [
            "Lemma ffunMnE f n x : (f *+ n) x = f x *+ n.",
            "VernacStartTheoremProof",
            "35c780901f1e8ace422287e07fa818e23d95eccf"
        ],
        [
            "by rewrite -[n]card_ord -!sumr_const sum_ffunE.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "End FinFunZmod.",
            "VernacEndSegment",
            "5e90cf098a5d1c581c72ddd1628f61f161f9d78d"
        ],
        [
            "Section FinFunRing.",
            "VernacBeginSection",
            "9633f18e5dd7a10076bff3cce8e7f4d4d412ab21"
        ],
        [
            "Variable (aT : finType) (R : ringType) (a : aT).",
            "VernacAssumption",
            "597cc71a078d4147f4d113073af1f03a643cd29e"
        ],
        [
            "Definition ffun_one : {ffun aT -> R} := [ffun => 1].",
            "VernacDefinition",
            "8d8933f245297bd15dc3523eff2a48d5dcc5a9bf"
        ],
        [
            "Definition ffun_mul (f g : {ffun aT -> R}) := [ffun x => f x * g x].",
            "VernacDefinition",
            "31d9c7181d6f8cfd38c3d6b00418631de604a9f8"
        ],
        [
            "Fact ffun_mulA : associative ffun_mul.",
            "VernacStartTheoremProof",
            "63eca10866c80b24f00ca51c35468c080740cafb"
        ],
        [
            "by move=> f1 f2 f3; apply/ffunP=> i; rewrite !ffunE mulrA.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Fact ffun_mul_1l : left_id ffun_one ffun_mul.",
            "VernacStartTheoremProof",
            "0b6809aa2444e4ee9d31284f2b0b5eb898678fb3"
        ],
        [
            "by move=> f; apply/ffunP=> i; rewrite !ffunE mul1r.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Fact ffun_mul_1r : right_id ffun_one ffun_mul.",
            "VernacStartTheoremProof",
            "8167d60b71cba80e458874c1572a4ec26c3a6a46"
        ],
        [
            "by move=> f; apply/ffunP=> i; rewrite !ffunE mulr1.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Fact ffun_mul_addl : left_distributive ffun_mul (@ffun_add _ _).",
            "VernacStartTheoremProof",
            "91f82a0d7b45e67a0c2eae86df064166081fd482"
        ],
        [
            "by move=> f1 f2 f3; apply/ffunP=> i; rewrite !ffunE mulrDl.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Fact ffun_mul_addr : right_distributive ffun_mul (@ffun_add _ _).",
            "VernacStartTheoremProof",
            "8aa0768d15f2d5a2e6a7f78820a63f7ba8836375"
        ],
        [
            "by move=> f1 f2 f3; apply/ffunP=> i; rewrite !ffunE mulrDr.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Fact ffun1_nonzero : ffun_one != 0.",
            "VernacStartTheoremProof",
            "8365ed4f8261787803140aaad7fcdcf35d3505bf"
        ],
        [
            "by apply/eqP => /ffunP/(_ a)/eqP; rewrite !ffunE oner_eq0.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Definition ffun_ringMixin := RingMixin ffun_mulA ffun_mul_1l ffun_mul_1r ffun_mul_addl ffun_mul_addr ffun1_nonzero.",
            "VernacDefinition",
            "ac93d425e0a6b27b8293576e41ed56b3a7592145"
        ],
        [
            "Definition ffun_ringType := Eval hnf in RingType {ffun aT -> R} ffun_ringMixin.",
            "VernacDefinition",
            "68a5dc037eb1d9a9e4b4e0eb5553cea9f34c1d7a"
        ],
        [
            "End FinFunRing.",
            "VernacEndSegment",
            "f41fbc9b0d2e6186f36047afe576a4a0489ca0be"
        ],
        [
            "Section FinFunComRing.",
            "VernacBeginSection",
            "107e492fcf09c3a041689162f58bfd37e09d5e9c"
        ],
        [
            "Variable (aT : finType) (R : comRingType) (a : aT).",
            "VernacAssumption",
            "87319a9dfbd5196f4d54c45f46037b37deb5757e"
        ],
        [
            "Fact ffun_mulC : commutative (@ffun_mul aT R).",
            "VernacStartTheoremProof",
            "283370c68762c92b2e7c1a875094e1ff66444259"
        ],
        [
            "by move=> f1 f2; apply/ffunP=> i; rewrite !ffunE mulrC.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Definition ffun_comRingType := Eval hnf in ComRingType (ffun_ringType R a) ffun_mulC.",
            "VernacDefinition",
            "753d6998b87a7d6315ec8a5ae60e692b5552b904"
        ],
        [
            "End FinFunComRing.",
            "VernacEndSegment",
            "c4b2bf03c59afe8b94d09986baf93b8cb35f4528"
        ],
        [
            "Section FinFunLmod.",
            "VernacBeginSection",
            "42b8348ffda35967504829a56371ba8169d370f9"
        ],
        [
            "Variable (R : ringType) (aT : finType) (rT : lmodType R).",
            "VernacAssumption",
            "1cc4ceba0030b8060b8a68f15b7e25be6aa113c9"
        ],
        [
            "Implicit Types f g : {ffun aT -> rT}.",
            "VernacReserve",
            "b9c504d1806d570fcde8782c6302ed52535206fa"
        ],
        [
            "Definition ffun_scale k f := [ffun a => k *: f a].",
            "VernacDefinition",
            "641175ee9d342af92afd9e7ade25d9581be37935"
        ],
        [
            "Fact ffun_scaleA k1 k2 f : ffun_scale k1 (ffun_scale k2 f) = ffun_scale (k1 * k2) f.",
            "VernacStartTheoremProof",
            "205a63b6223486000b526ba11d86f81a740c5e6e"
        ],
        [
            "by apply/ffunP=> a; rewrite !ffunE scalerA.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Fact ffun_scale1 : left_id 1 ffun_scale.",
            "VernacStartTheoremProof",
            "e5b805c62243bed41a7443e56c3ca7b5659365ae"
        ],
        [
            "by move=> f; apply/ffunP=> a; rewrite !ffunE scale1r.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Fact ffun_scale_addr k : {morph (ffun_scale k) : x y / x + y}.",
            "VernacStartTheoremProof",
            "f4ff8d7fdeaefcac54071c588447e397a7c44894"
        ],
        [
            "by move=> f g; apply/ffunP=> a; rewrite !ffunE scalerDr.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Fact ffun_scale_addl u : {morph (ffun_scale)^~ u : k1 k2 / k1 + k2}.",
            "VernacStartTheoremProof",
            "fb7d90143827ddc8080bdccfe29a964d1b7cde58"
        ],
        [
            "by move=> k1 k2; apply/ffunP=> a; rewrite !ffunE scalerDl.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Definition ffun_lmodMixin := LmodMixin ffun_scaleA ffun_scale1 ffun_scale_addr ffun_scale_addl.",
            "VernacDefinition",
            "908cb76d310a7de5062507b58aeed98642bfb0c1"
        ],
        [
            "Canonical ffun_lmodType := Eval hnf in LmodType R {ffun aT -> rT} ffun_lmodMixin.",
            "VernacDefinition",
            "8298c96066d0a97d54f9cabe7192ed297b6c55e8"
        ],
        [
            "End FinFunLmod.",
            "VernacEndSegment",
            "dcc429fd3192b92146dd280d4c527fe44df5f976"
        ],
        [
            "Section PairZmod.",
            "VernacBeginSection",
            "027497ca14487bf9055f15ce227ca85079b5e692"
        ],
        [
            "Variables M1 M2 : zmodType.",
            "VernacAssumption",
            "dbaef933b49624886d4b5249107e8fc39acf6ee6"
        ],
        [
            "Definition opp_pair (x : M1 * M2) := (- x.1, - x.2).",
            "VernacDefinition",
            "27860f7be87fdea58f7a6fc497546577c61a8790"
        ],
        [
            "Definition add_pair (x y : M1 * M2) := (x.1 + y.1, x.2 + y.2).",
            "VernacDefinition",
            "0dd9868b3e66ff2ca7b9ffb1c7cd1f5c4c6551df"
        ],
        [
            "Fact pair_addA : associative add_pair.",
            "VernacStartTheoremProof",
            "b76ad79e55ba22dd4d3352dcca5446651f329316"
        ],
        [
            "by move=> x y z; congr (_, _); apply: addrA.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Fact pair_addC : commutative add_pair.",
            "VernacStartTheoremProof",
            "0fa87f3d29dd791977e082b45c0ae1b65da93bcf"
        ],
        [
            "by move=> x y; congr (_, _); apply: addrC.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Fact pair_add0 : left_id (0, 0) add_pair.",
            "VernacStartTheoremProof",
            "946a885304fa7dde8b2d8e5456fca136d7aaf683"
        ],
        [
            "by case=> x1 x2; congr (_, _); apply: add0r.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Fact pair_addN : left_inverse (0, 0) opp_pair add_pair.",
            "VernacStartTheoremProof",
            "bf707793a4ade12f7c3300c3de617864e5a22e68"
        ],
        [
            "by move=> x; congr (_, _); apply: addNr.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Definition pair_zmodMixin := ZmodMixin pair_addA pair_addC pair_add0 pair_addN.",
            "VernacDefinition",
            "d306bb7e31b4c474690ddf6adcd6e81880db46a4"
        ],
        [
            "Canonical pair_zmodType := Eval hnf in ZmodType (M1 * M2) pair_zmodMixin.",
            "VernacDefinition",
            "3603c2aef1f430549d82df96358a2339e5e0f569"
        ],
        [
            "End PairZmod.",
            "VernacEndSegment",
            "967d1f609209098803ee75722285e4551a9aa5f8"
        ],
        [
            "Section PairRing.",
            "VernacBeginSection",
            "b74a4f54d3ae2aa3ab472c71e7ad44239e4699a4"
        ],
        [
            "Variables R1 R2 : ringType.",
            "VernacAssumption",
            "26eed1388db28f57473809170856bed6b56af29b"
        ],
        [
            "Definition mul_pair (x y : R1 * R2) := (x.1 * y.1, x.2 * y.2).",
            "VernacDefinition",
            "041206b5092993da0d7f35de421f1fd7df036f98"
        ],
        [
            "Fact pair_mulA : associative mul_pair.",
            "VernacStartTheoremProof",
            "d42456745ebe8a875a14596e2ae6bd48dfa3ab0f"
        ],
        [
            "by move=> x y z; congr (_, _); apply: mulrA.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Fact pair_mul1l : left_id (1, 1) mul_pair.",
            "VernacStartTheoremProof",
            "a092ba8df407a314c8014da7716542313ce4e379"
        ],
        [
            "by case=> x1 x2; congr (_, _); apply: mul1r.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Fact pair_mul1r : right_id (1, 1) mul_pair.",
            "VernacStartTheoremProof",
            "9b52bca8305e9ffa819f8318908802209c184492"
        ],
        [
            "by case=> x1 x2; congr (_, _); apply: mulr1.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Fact pair_mulDl : left_distributive mul_pair +%R.",
            "VernacStartTheoremProof",
            "6ee6665f3a2de70fef4284326d24dc96a0fe6deb"
        ],
        [
            "by move=> x y z; congr (_, _); apply: mulrDl.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Fact pair_mulDr : right_distributive mul_pair +%R.",
            "VernacStartTheoremProof",
            "903e46b545a94900c8473cb628aaee91a9937fec"
        ],
        [
            "by move=> x y z; congr (_, _); apply: mulrDr.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Fact pair_one_neq0 : (1, 1) != 0 :> R1 * R2.",
            "VernacStartTheoremProof",
            "bc428bc12850704299fa6f933d1cb156248d6f5d"
        ],
        [
            "by rewrite xpair_eqE oner_eq0.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Definition pair_ringMixin := RingMixin pair_mulA pair_mul1l pair_mul1r pair_mulDl pair_mulDr pair_one_neq0.",
            "VernacDefinition",
            "0672815e8f13e5800f0fc5519e21ecb5296e21cd"
        ],
        [
            "Canonical pair_ringType := Eval hnf in RingType (R1 * R2) pair_ringMixin.",
            "VernacDefinition",
            "73087cac696daf1266317400fb420681b11ccc1b"
        ],
        [
            "End PairRing.",
            "VernacEndSegment",
            "ba2c9f9dfb0a21426288bb4b72583758c27c0680"
        ],
        [
            "Section PairComRing.",
            "VernacBeginSection",
            "f3fb55a67bdeb63009800e5c1d1fb9cb2a2ca794"
        ],
        [
            "Variables R1 R2 : comRingType.",
            "VernacAssumption",
            "66428c00b8660d3efa7f554aa02fa6fc4bcba64d"
        ],
        [
            "Fact pair_mulC : commutative (@mul_pair R1 R2).",
            "VernacStartTheoremProof",
            "0ffe096818b1094b409f2f29da163b055322756f"
        ],
        [
            "by move=> x y; congr (_, _); apply: mulrC.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Canonical pair_comRingType := Eval hnf in ComRingType (R1 * R2) pair_mulC.",
            "VernacDefinition",
            "8d2d4dcec6a371e1d9ca4e0b8b203bf7da20a877"
        ],
        [
            "End PairComRing.",
            "VernacEndSegment",
            "93fc5e2016ba12ec5d9807e18597c936914506a4"
        ],
        [
            "Section PairLmod.",
            "VernacBeginSection",
            "a8c5421da50fadc5990663667192e07e42002274"
        ],
        [
            "Variables (R : ringType) (V1 V2 : lmodType R).",
            "VernacAssumption",
            "638db15fcf302984597f8021a1174aa9882e22b4"
        ],
        [
            "Definition scale_pair a (v : V1 * V2) : V1 * V2 := (a *: v.1, a *: v.2).",
            "VernacDefinition",
            "9b084084e52ee1b5dafd7ab10308eeac158a07b9"
        ],
        [
            "Fact pair_scaleA a b u : scale_pair a (scale_pair b u) = scale_pair (a * b) u.",
            "VernacStartTheoremProof",
            "787b2a31fe259552d20c24f1723387ae29338ac7"
        ],
        [
            "by congr (_, _); apply: scalerA.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Fact pair_scale1 u : scale_pair 1 u = u.",
            "VernacStartTheoremProof",
            "cb08a288676e3783c9164ccadf218141d2519dfb"
        ],
        [
            "by case: u => u1 u2; congr (_, _); apply: scale1r.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Fact pair_scaleDr : right_distributive scale_pair +%R.",
            "VernacStartTheoremProof",
            "89148d7cd5f4a7f2b6e294f72d999a5f23512671"
        ],
        [
            "by move=> a u v; congr (_, _); apply: scalerDr.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Fact pair_scaleDl u : {morph scale_pair^~ u: a b / a + b}.",
            "VernacStartTheoremProof",
            "fdbfa3346c9a7a4e74245d854be46e71211248d1"
        ],
        [
            "by move=> a b; congr (_, _); apply: scalerDl.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Definition pair_lmodMixin := LmodMixin pair_scaleA pair_scale1 pair_scaleDr pair_scaleDl.",
            "VernacDefinition",
            "45a2320e3b2527dae42e64722a1d72e92e419259"
        ],
        [
            "Canonical pair_lmodType := Eval hnf in LmodType R (V1 * V2) pair_lmodMixin.",
            "VernacDefinition",
            "cd80ad847940c27324b33b9f26eadb622fe54490"
        ],
        [
            "End PairLmod.",
            "VernacEndSegment",
            "ccd68a1ea0760a630b65c21e2d1410d10c1fc54e"
        ],
        [
            "Section PairLalg.",
            "VernacBeginSection",
            "e244ed5aa0be2fd515fe57f45a304325a0c800db"
        ],
        [
            "Variables (R : ringType) (A1 A2 : lalgType R).",
            "VernacAssumption",
            "2aac1bccf3ed58e3e6c0ed1cd17bb5c27c975de2"
        ],
        [
            "Fact pair_scaleAl a (u v : A1 * A2) : a *: (u * v) = (a *: u) * v.",
            "VernacStartTheoremProof",
            "89d545ec3b5e8b955c47de8ef44ea0bfd1381ac0"
        ],
        [
            "by congr (_, _); apply: scalerAl.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Canonical pair_lalgType := Eval hnf in LalgType R (A1 * A2) pair_scaleAl.",
            "VernacDefinition",
            "2b3a5df32fc8849a588d5f814722d5a89ae48029"
        ],
        [
            "End PairLalg.",
            "VernacEndSegment",
            "719340c643d9220beeff82372a777efe901489dc"
        ],
        [
            "Section PairAlg.",
            "VernacBeginSection",
            "3d8f42a443a2b26fbf2b456d1a5f6badab8c44ba"
        ],
        [
            "Variables (R : comRingType) (A1 A2 : algType R).",
            "VernacAssumption",
            "f6e5ae5c53f4bff2c8b4f54bcd7565ee7bf921a2"
        ],
        [
            "Fact pair_scaleAr a (u v : A1 * A2) : a *: (u * v) = u * (a *: v).",
            "VernacStartTheoremProof",
            "83c7519a494d36e19892b727d0b36f2b263fb2fd"
        ],
        [
            "by congr (_, _); apply: scalerAr.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Canonical pair_algType := Eval hnf in AlgType R (A1 * A2) pair_scaleAr.",
            "VernacDefinition",
            "74c43c37c303e564878ac6b49239c90aca4fd2fc"
        ],
        [
            "End PairAlg.",
            "VernacEndSegment",
            "e466be3005d5b5b4cd92e4e02655f4d6f2da7801"
        ],
        [
            "Section PairUnitRing.",
            "VernacBeginSection",
            "d3f08966066f771d8dda1185c901c47d52ed3ca5"
        ],
        [
            "Variables R1 R2 : unitRingType.",
            "VernacAssumption",
            "319dcae52e99570e57c68dbd8828dedeeb9866db"
        ],
        [
            "Definition pair_unitr := [qualify a x : R1 * R2 | (x.1 \\is a GRing.unit) && (x.2 \\is a GRing.unit)].",
            "VernacDefinition",
            "be0ca203e04943fea5950a4eb8c7c0a69ab18584"
        ],
        [
            "Definition pair_invr x := if x \\is a pair_unitr then (x.1^-1, x.2^-1) else x.",
            "VernacDefinition",
            "a98eb71d74dbe3e6e66f11a5e028d8d1f5301947"
        ],
        [
            "Lemma pair_mulVl : {in pair_unitr, left_inverse 1 pair_invr *%R}.",
            "VernacStartTheoremProof",
            "70ade355ebac254da935d87df48a1baa0d5b2c3b"
        ],
        [
            "rewrite /pair_invr=> x; case: ifP => // /andP[Ux1 Ux2] _.",
            "VernacExtend",
            "4a95f82aca0fc9a50f43053eca44fc9141212abe"
        ],
        [
            "by congr (_, _); apply: mulVr.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma pair_mulVr : {in pair_unitr, right_inverse 1 pair_invr *%R}.",
            "VernacStartTheoremProof",
            "656827b6ebee26b6cd4f769d026575922ab245ee"
        ],
        [
            "rewrite /pair_invr=> x; case: ifP => // /andP[Ux1 Ux2] _.",
            "VernacExtend",
            "4a95f82aca0fc9a50f43053eca44fc9141212abe"
        ],
        [
            "by congr (_, _); apply: mulrV.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma pair_unitP x y : y * x = 1 /\\ x * y = 1 -> x \\is a pair_unitr.",
            "VernacStartTheoremProof",
            "e5085efc63aa991bfc8333d8fd2320b1bfadb8e5"
        ],
        [
            "case=> [[y1x y2x] [x1y x2y]]; apply/andP.",
            "VernacExtend",
            "d62e4c271de3f2a9ff5062b8b89d3c57d965c518"
        ],
        [
            "by split; apply/unitrP; [exists y.1 | exists y.2].",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma pair_invr_out : {in [predC pair_unitr], pair_invr =1 id}.",
            "VernacStartTheoremProof",
            "eac6ac97bf1854f2d6b35cadbec6117feb7d1f3c"
        ],
        [
            "by rewrite /pair_invr => x /negPf/= ->.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Definition pair_unitRingMixin := UnitRingMixin pair_mulVl pair_mulVr pair_unitP pair_invr_out.",
            "VernacDefinition",
            "c41fdba68f5612858e3518b741205b8934c4ec63"
        ],
        [
            "Canonical pair_unitRingType := Eval hnf in UnitRingType (R1 * R2) pair_unitRingMixin.",
            "VernacDefinition",
            "3166b8b7ec521f38189d3d603ade176be60abfd3"
        ],
        [
            "End PairUnitRing.",
            "VernacEndSegment",
            "33f2bb8a7fb531dbcde805237ebee91668a62899"
        ],
        [
            "Canonical pair_comUnitRingType (R1 R2 : comUnitRingType) := Eval hnf in [comUnitRingType of R1 * R2].",
            "VernacDefinition",
            "480f8cd6000996fdf75282ffce8bb5a4fa3b39be"
        ],
        [
            "Canonical pair_unitAlgType (R : comUnitRingType) (A1 A2 : unitAlgType R) := Eval hnf in [unitAlgType R of A1 * A2].",
            "VernacDefinition",
            "fd06a1bdda8388cfcc08cb803ad572e38b58310c"
        ]
    ],
    "proofs": [
        {
            "name": "addrA",
            "line_nb": 82,
            "steps": [
                {
                    "command": [
                        "by case V => T [? []].",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "addrC",
            "line_nb": 85,
            "steps": [
                {
                    "command": [
                        "by case V => T [? []].",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "add0r",
            "line_nb": 88,
            "steps": [
                {
                    "command": [
                        "by case V => T [? []].",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "addNr",
            "line_nb": 91,
            "steps": [
                {
                    "command": [
                        "by case V => T [? []].",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "addr0",
            "line_nb": 94,
            "steps": [
                {
                    "command": [
                        "by move=> x; rewrite addrC add0r.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "addrN",
            "line_nb": 97,
            "steps": [
                {
                    "command": [
                        "by move=> x; rewrite addrC addNr.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "addrCA",
            "line_nb": 103,
            "steps": [
                {
                    "command": [
                        "exact: mulmCA.",
                        "VernacExtend",
                        "ce637ff86bafca5d8359473e8c02af644dcbdc43"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "addrAC",
            "line_nb": 106,
            "steps": [
                {
                    "command": [
                        "exact: mulmAC.",
                        "VernacExtend",
                        "ce637ff86bafca5d8359473e8c02af644dcbdc43"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "addrACA",
            "line_nb": 109,
            "steps": [
                {
                    "command": [
                        "exact: mulmACA.",
                        "VernacExtend",
                        "ce637ff86bafca5d8359473e8c02af644dcbdc43"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "addKr",
            "line_nb": 112,
            "steps": [
                {
                    "command": [
                        "by move=> x y; rewrite addrA addNr add0r.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "addNKr",
            "line_nb": 115,
            "steps": [
                {
                    "command": [
                        "by move=> x y; rewrite addrA addrN add0r.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "addrK",
            "line_nb": 118,
            "steps": [
                {
                    "command": [
                        "by move=> x y; rewrite -addrA addrN addr0.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "addrNK",
            "line_nb": 121,
            "steps": [
                {
                    "command": [
                        "by move=> x y; rewrite -addrA addNr addr0.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "subKr",
            "line_nb": 125,
            "steps": [
                {
                    "command": [
                        "by move=> y; apply: (canLR (addrK _)); rewrite addrC subrK.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "addrI",
            "line_nb": 128,
            "steps": [
                {
                    "command": [
                        "by move=> x; apply: can_inj (addKr x).",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "addIr",
            "line_nb": 131,
            "steps": [
                {
                    "command": [
                        "by move=> y; apply: can_inj (addrK y).",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "subrI",
            "line_nb": 134,
            "steps": [
                {
                    "command": [
                        "by move=> x; apply: can_inj (subKr x).",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "subIr",
            "line_nb": 137,
            "steps": [
                {
                    "command": [
                        "by move=> y; apply: addIr.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "opprK",
            "line_nb": 140,
            "steps": [
                {
                    "command": [
                        "by move=> x; apply: (@subIr x); rewrite addNr addrN.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "oppr_inj",
            "line_nb": 143,
            "steps": [
                {
                    "command": [
                        "exact: inv_inj opprK.",
                        "VernacExtend",
                        "ce637ff86bafca5d8359473e8c02af644dcbdc43"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "oppr0",
            "line_nb": 146,
            "steps": [
                {
                    "command": [
                        "by rewrite -[-0]add0r subrr.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "oppr_eq0",
            "line_nb": 149,
            "steps": [
                {
                    "command": [
                        "by rewrite (inv_eq opprK) oppr0.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "subr0",
            "line_nb": 152,
            "steps": [
                {
                    "command": [
                        "by rewrite oppr0 addr0.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "sub0r",
            "line_nb": 155,
            "steps": [
                {
                    "command": [
                        "by rewrite add0r.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "opprB",
            "line_nb": 158,
            "steps": [
                {
                    "command": [
                        "by apply: (canRL (addrK x)); rewrite addrC subKr.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "opprD",
            "line_nb": 161,
            "steps": [
                {
                    "command": [
                        "by move=> x y; rewrite -[y in LHS]opprK opprB addrC.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "addrKA",
            "line_nb": 164,
            "steps": [
                {
                    "command": [
                        "by rewrite opprD addrA addrK.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "subrKA",
            "line_nb": 167,
            "steps": [
                {
                    "command": [
                        "by rewrite addrA addrNK.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "addr0_eq",
            "line_nb": 170,
            "steps": [
                {
                    "command": [
                        "by rewrite -[-x]addr0 => <-; rewrite addKr.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "subr0_eq",
            "line_nb": 173,
            "steps": [
                {
                    "command": [
                        "by move/addr0_eq/oppr_inj.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "subr_eq",
            "line_nb": 176,
            "steps": [
                {
                    "command": [
                        "exact: can2_eq (subrK z) (addrK z) x y.",
                        "VernacExtend",
                        "ce637ff86bafca5d8359473e8c02af644dcbdc43"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "subr_eq0",
            "line_nb": 179,
            "steps": [
                {
                    "command": [
                        "by rewrite subr_eq add0r.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "addr_eq0",
            "line_nb": 182,
            "steps": [
                {
                    "command": [
                        "by rewrite -[y in LHS]opprK subr_eq0.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "eqr_opp",
            "line_nb": 185,
            "steps": [
                {
                    "command": [
                        "exact: can_eq opprK x y.",
                        "VernacExtend",
                        "ce637ff86bafca5d8359473e8c02af644dcbdc43"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "eqr_oppLR",
            "line_nb": 188,
            "steps": [
                {
                    "command": [
                        "exact: inv_eq opprK x y.",
                        "VernacExtend",
                        "ce637ff86bafca5d8359473e8c02af644dcbdc43"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "mulr0n",
            "line_nb": 191,
            "steps": [
                {
                    "command": [
                        "by [].",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "mulr1n",
            "line_nb": 194,
            "steps": [
                {
                    "command": [
                        "by [].",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "mulr2n",
            "line_nb": 197,
            "steps": [
                {
                    "command": [
                        "by [].",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "mulrS",
            "line_nb": 200,
            "steps": [
                {
                    "command": [
                        "by case: n => //=; rewrite addr0.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "mulrSr",
            "line_nb": 203,
            "steps": [
                {
                    "command": [
                        "by rewrite addrC mulrS.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "mulrb",
            "line_nb": 206,
            "steps": [
                {
                    "command": [
                        "by case: b.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "mul0rn",
            "line_nb": 209,
            "steps": [
                {
                    "command": [
                        "by elim: n => // n IHn; rewrite mulrS add0r.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "mulNrn",
            "line_nb": 212,
            "steps": [
                {
                    "command": [
                        "by elim: n => [|n IHn]; rewrite ?oppr0 // !mulrS opprD IHn.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "mulrnDl",
            "line_nb": 215,
            "steps": [
                {
                    "command": [
                        "move=> x y; elim: n => [|n IHn]; rewrite ?addr0 // !mulrS.",
                        "VernacExtend",
                        "cbbd752ffe762291637c91622d62599b0c60d123"
                    ]
                },
                {
                    "command": [
                        "by rewrite addrCA -!addrA -IHn -addrCA.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "mulrnDr",
            "line_nb": 219,
            "steps": [
                {
                    "command": [
                        "elim: m => [|m IHm]; first by rewrite add0r.",
                        "VernacExtend",
                        "3763a4b8db689af316a7372b722bb29806ab4fb6"
                    ]
                },
                {
                    "command": [
                        "by rewrite !mulrS IHm addrA.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "mulrnBr",
            "line_nb": 227,
            "steps": [
                {
                    "command": [
                        "elim: m n => [|m IHm] [|n le_n_m]; rewrite ?subr0 // {}IHm //.",
                        "VernacExtend",
                        "de65c8193056a36f6dbb91fe21357bd770b140db"
                    ]
                },
                {
                    "command": [
                        "by rewrite mulrSr mulrS opprD addrA addrK.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "mulrnA",
            "line_nb": 231,
            "steps": [
                {
                    "command": [
                        "by rewrite mulnC; elim: n => //= n IHn; rewrite mulrS mulrnDr IHn.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "mulrnAC",
            "line_nb": 234,
            "steps": [
                {
                    "command": [
                        "by rewrite -!mulrnA mulnC.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "sumrN",
            "line_nb": 237,
            "steps": [
                {
                    "command": [
                        "by rewrite (big_morph _ opprD oppr0).",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "sumrB",
            "line_nb": 240,
            "steps": [
                {
                    "command": [
                        "by rewrite -sumrN -big_split /=.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "sumrMnl",
            "line_nb": 243,
            "steps": [
                {
                    "command": [
                        "by rewrite (big_morph _ (mulrnDl n) (mul0rn _)).",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "sumrMnr",
            "line_nb": 246,
            "steps": [
                {
                    "command": [
                        "by rewrite (big_morph _ (mulrnDr x) (erefl _)).",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "sumr_const",
            "line_nb": 249,
            "steps": [
                {
                    "command": [
                        "by rewrite big_const -iteropE.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "telescope_sumr",
            "line_nb": 252,
            "steps": [
                {
                    "command": [
                        "rewrite leq_eqVlt => /predU1P[-> | ]; first by rewrite subrr big_geq.",
                        "VernacExtend",
                        "3763a4b8db689af316a7372b722bb29806ab4fb6"
                    ]
                },
                {
                    "command": [
                        "case: m => // m lenm; rewrite sumrB big_nat_recr // big_nat_recl //=.",
                        "VernacExtend",
                        "90a2acb29b7a5304b0ab6ba5269c420638ddef63"
                    ]
                },
                {
                    "command": [
                        "by rewrite addrC opprD addrA subrK addrC.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "zmod_closedN",
            "line_nb": 263,
            "steps": [
                {
                    "command": [
                        "by case=> S0 SB y Sy; rewrite -sub0r !SB.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "zmod_closedD",
            "line_nb": 266,
            "steps": [
                {
                    "command": [
                        "by case=> S0 SB; split=> // y z Sy Sz; rewrite -[z]opprK -[- z]sub0r !SB.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "mulrA",
            "line_nb": 336,
            "steps": [
                {
                    "command": [
                        "by case R => T [? []].",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "mul1r",
            "line_nb": 339,
            "steps": [
                {
                    "command": [
                        "by case R => T [? []].",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "mulr1",
            "line_nb": 342,
            "steps": [
                {
                    "command": [
                        "by case R => T [? []].",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "mulrDl",
            "line_nb": 345,
            "steps": [
                {
                    "command": [
                        "by case R => T [? []].",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "mulrDr",
            "line_nb": 348,
            "steps": [
                {
                    "command": [
                        "by case R => T [? []].",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "oner_neq0",
            "line_nb": 351,
            "steps": [
                {
                    "command": [
                        "by case R => T [? []].",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "oner_eq0",
            "line_nb": 354,
            "steps": [
                {
                    "command": [
                        "exact: negbTE oner_neq0.",
                        "VernacExtend",
                        "ce637ff86bafca5d8359473e8c02af644dcbdc43"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "mul0r",
            "line_nb": 357,
            "steps": [
                {
                    "command": [
                        "by move=> x; apply: (addIr (1 * x)); rewrite -mulrDl !add0r mul1r.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "mulr0",
            "line_nb": 360,
            "steps": [
                {
                    "command": [
                        "by move=> x; apply: (addIr (x * 1)); rewrite -mulrDr !add0r mulr1.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "mulrN",
            "line_nb": 363,
            "steps": [
                {
                    "command": [
                        "by apply: (addrI (x * y)); rewrite -mulrDr !subrr mulr0.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "mulNr",
            "line_nb": 366,
            "steps": [
                {
                    "command": [
                        "by apply: (addrI (x * y)); rewrite -mulrDl !subrr mul0r.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "mulrNN",
            "line_nb": 369,
            "steps": [
                {
                    "command": [
                        "by rewrite mulrN mulNr opprK.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "mulN1r",
            "line_nb": 372,
            "steps": [
                {
                    "command": [
                        "by rewrite mulNr mul1r.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "mulrN1",
            "line_nb": 375,
            "steps": [
                {
                    "command": [
                        "by rewrite mulrN mulr1.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "mulr_suml",
            "line_nb": 381,
            "steps": [
                {
                    "command": [
                        "exact: big_distrl.",
                        "VernacExtend",
                        "ce637ff86bafca5d8359473e8c02af644dcbdc43"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "mulr_sumr",
            "line_nb": 384,
            "steps": [
                {
                    "command": [
                        "exact: big_distrr.",
                        "VernacExtend",
                        "ce637ff86bafca5d8359473e8c02af644dcbdc43"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "mulrBl",
            "line_nb": 387,
            "steps": [
                {
                    "command": [
                        "by rewrite mulrDl mulNr.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "mulrBr",
            "line_nb": 390,
            "steps": [
                {
                    "command": [
                        "by rewrite mulrDr mulrN.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "mulrnAl",
            "line_nb": 393,
            "steps": [
                {
                    "command": [
                        "by elim: n => [|n IHn]; rewrite ?mul0r // !mulrS mulrDl IHn.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "mulrnAr",
            "line_nb": 396,
            "steps": [
                {
                    "command": [
                        "by elim: n => [|n IHn]; rewrite ?mulr0 // !mulrS mulrDr IHn.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "mulr_natl",
            "line_nb": 399,
            "steps": [
                {
                    "command": [
                        "by rewrite mulrnAl mul1r.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "mulr_natr",
            "line_nb": 402,
            "steps": [
                {
                    "command": [
                        "by rewrite mulrnAr mulr1.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "natrD",
            "line_nb": 405,
            "steps": [
                {
                    "command": [
                        "exact: mulrnDr.",
                        "VernacExtend",
                        "ce637ff86bafca5d8359473e8c02af644dcbdc43"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "natrB",
            "line_nb": 408,
            "steps": [
                {
                    "command": [
                        "exact: mulrnBr.",
                        "VernacExtend",
                        "ce637ff86bafca5d8359473e8c02af644dcbdc43"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "natrM",
            "line_nb": 412,
            "steps": [
                {
                    "command": [
                        "by rewrite mulrnA -mulr_natr.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "expr0",
            "line_nb": 415,
            "steps": [
                {
                    "command": [
                        "by [].",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "expr1",
            "line_nb": 418,
            "steps": [
                {
                    "command": [
                        "by [].",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "expr2",
            "line_nb": 421,
            "steps": [
                {
                    "command": [
                        "by [].",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "exprS",
            "line_nb": 424,
            "steps": [
                {
                    "command": [
                        "by case: n => //; rewrite mulr1.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "expr0n",
            "line_nb": 427,
            "steps": [
                {
                    "command": [
                        "by case: n => // n; rewrite exprS mul0r.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "expr1n",
            "line_nb": 430,
            "steps": [
                {
                    "command": [
                        "by elim: n => // n IHn; rewrite exprS mul1r.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "exprD",
            "line_nb": 433,
            "steps": [
                {
                    "command": [
                        "by elim: m => [|m IHm]; rewrite ?mul1r // !exprS -mulrA -IHm.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "exprSr",
            "line_nb": 436,
            "steps": [
                {
                    "command": [
                        "by rewrite -addn1 exprD expr1.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "commr_sym",
            "line_nb": 439,
            "steps": [
                {
                    "command": [
                        "by [].",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "commr_refl",
            "line_nb": 442,
            "steps": [
                {
                    "command": [
                        "by [].",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "commr0",
            "line_nb": 445,
            "steps": [
                {
                    "command": [
                        "by rewrite /comm mulr0 mul0r.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "commr1",
            "line_nb": 448,
            "steps": [
                {
                    "command": [
                        "by rewrite /comm mulr1 mul1r.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "commrN",
            "line_nb": 451,
            "steps": [
                {
                    "command": [
                        "by move=> com_xy; rewrite /comm mulrN com_xy mulNr.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "commrN1",
            "line_nb": 454,
            "steps": [
                {
                    "command": [
                        "exact/commrN/commr1.",
                        "VernacExtend",
                        "ce637ff86bafca5d8359473e8c02af644dcbdc43"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "commrD",
            "line_nb": 457,
            "steps": [
                {
                    "command": [
                        "by rewrite /comm mulrDl mulrDr => -> ->.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "commrMn",
            "line_nb": 460,
            "steps": [
                {
                    "command": [
                        "rewrite /comm => com_xy.",
                        "VernacExtend",
                        "3c42b53d0efc26db114b00541ac5e7fcb29e6aeb"
                    ]
                },
                {
                    "command": [
                        "by elim: n => [|n IHn]; rewrite ?commr0 // mulrS commrD.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "commrM",
            "line_nb": 464,
            "steps": [
                {
                    "command": [
                        "by move=> com_xy; rewrite /comm mulrA com_xy -!mulrA => ->.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "commr_nat",
            "line_nb": 467,
            "steps": [
                {
                    "command": [
                        "exact/commrMn/commr1.",
                        "VernacExtend",
                        "ce637ff86bafca5d8359473e8c02af644dcbdc43"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "commrX",
            "line_nb": 470,
            "steps": [
                {
                    "command": [
                        "rewrite /comm => com_xy.",
                        "VernacExtend",
                        "3c42b53d0efc26db114b00541ac5e7fcb29e6aeb"
                    ]
                },
                {
                    "command": [
                        "by elim: n => [|n IHn]; rewrite ?commr1 // exprS commrM.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "exprMn_comm",
            "line_nb": 474,
            "steps": [
                {
                    "command": [
                        "move=> com_xy; elim: n => /= [|n IHn]; first by rewrite mulr1.",
                        "VernacExtend",
                        "3763a4b8db689af316a7372b722bb29806ab4fb6"
                    ]
                },
                {
                    "command": [
                        "by rewrite !exprS IHn !mulrA; congr (_ * _); rewrite -!mulrA -commrX.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "commr_sign",
            "line_nb": 478,
            "steps": [
                {
                    "command": [
                        "exact: (commrX n (commrN1 x)).",
                        "VernacExtend",
                        "ce637ff86bafca5d8359473e8c02af644dcbdc43"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "exprMn_n",
            "line_nb": 481,
            "steps": [
                {
                    "command": [
                        "elim: n => [|n IHn]; first by rewrite mulr1n.",
                        "VernacExtend",
                        "3763a4b8db689af316a7372b722bb29806ab4fb6"
                    ]
                },
                {
                    "command": [
                        "rewrite exprS IHn -mulr_natr -mulrA -commr_nat mulr_natr -mulrnA -expnSr.",
                        "VernacExtend",
                        "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
                    ]
                },
                {
                    "command": [
                        "by rewrite -mulr_natr mulrA -exprS mulr_natr.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "exprM",
            "line_nb": 486,
            "steps": [
                {
                    "command": [
                        "elim: m => [|m IHm]; first by rewrite expr1n.",
                        "VernacExtend",
                        "3763a4b8db689af316a7372b722bb29806ab4fb6"
                    ]
                },
                {
                    "command": [
                        "by rewrite mulSn exprD IHm exprS exprMn_comm //; apply: commrX.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "exprAC",
            "line_nb": 490,
            "steps": [
                {
                    "command": [
                        "by rewrite -!exprM mulnC.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "expr_mod",
            "line_nb": 493,
            "steps": [
                {
                    "command": [
                        "move=> xn1; rewrite {2}(divn_eq i n) exprD mulnC exprM xn1.",
                        "VernacExtend",
                        "057edeb0967475c7ea5e8c98c449ddc5613eddc1"
                    ]
                },
                {
                    "command": [
                        "by rewrite expr1n mul1r.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "expr_dvd",
            "line_nb": 497,
            "steps": [
                {
                    "command": [
                        "by move=> xn1 dvd_n_i; rewrite -(expr_mod i xn1) (eqnP dvd_n_i).",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "natrX",
            "line_nb": 500,
            "steps": [
                {
                    "command": [
                        "by rewrite exprMn_n expr1n.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "signr_odd",
            "line_nb": 503,
            "steps": [
                {
                    "command": [
                        "elim: n => //= n IHn; rewrite exprS -{}IHn.",
                        "VernacExtend",
                        "de65c8193056a36f6dbb91fe21357bd770b140db"
                    ]
                },
                {
                    "command": [
                        "by case/odd: n; rewrite !mulN1r ?opprK.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "signr_eq0",
            "line_nb": 507,
            "steps": [
                {
                    "command": [
                        "by rewrite -signr_odd; case: odd; rewrite ?oppr_eq0 oner_eq0.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "mulr_sign",
            "line_nb": 510,
            "steps": [
                {
                    "command": [
                        "by case: b; rewrite ?mulNr mul1r.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "signr_addb",
            "line_nb": 513,
            "steps": [
                {
                    "command": [
                        "by rewrite mulr_sign; case: b1 b2 => [] []; rewrite ?opprK.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "signrE",
            "line_nb": 516,
            "steps": [
                {
                    "command": [
                        "by case: b; rewrite ?subr0 // opprD addNKr.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "signrN",
            "line_nb": 519,
            "steps": [
                {
                    "command": [
                        "by case: b; rewrite ?opprK.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "mulr_signM",
            "line_nb": 522,
            "steps": [
                {
                    "command": [
                        "by rewrite signr_addb -!mulrA; congr (_ * _); rewrite !mulrA commr_sign.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "exprNn",
            "line_nb": 525,
            "steps": [
                {
                    "command": [
                        "by rewrite -mulN1r exprMn_comm // /comm mulN1r mulrN mulr1.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "sqrrN",
            "line_nb": 528,
            "steps": [
                {
                    "command": [
                        "exact: mulrNN.",
                        "VernacExtend",
                        "ce637ff86bafca5d8359473e8c02af644dcbdc43"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "sqrr_sign",
            "line_nb": 531,
            "steps": [
                {
                    "command": [
                        "by rewrite exprAC sqrrN !expr1n.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "signrMK",
            "line_nb": 534,
            "steps": [
                {
                    "command": [
                        "by move=> x; rewrite mulrA -expr2 sqrr_sign mul1r.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "lastr_eq0",
            "line_nb": 537,
            "steps": [
                {
                    "command": [
                        "by case: s => [|y s] /negPf // ->; rewrite oner_eq0.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "mulrI_eq0",
            "line_nb": 540,
            "steps": [
                {
                    "command": [
                        "by move=> reg_x; rewrite -{1}(mulr0 x) (inj_eq reg_x).",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "lreg_neq0",
            "line_nb": 543,
            "steps": [
                {
                    "command": [
                        "by move=> reg_x; rewrite -[x]mulr1 mulrI_eq0 ?oner_eq0.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "mulrI0_lreg",
            "line_nb": 546,
            "steps": [
                {
                    "command": [
                        "move=> reg_x y z eq_xy_xz; apply/eqP; rewrite -subr_eq0 [y - z]reg_x //.",
                        "VernacExtend",
                        "f7feb259d6220ca40e8a86b90bd06f137aa140ac"
                    ]
                },
                {
                    "command": [
                        "by rewrite mulrBr eq_xy_xz subrr.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "lregN",
            "line_nb": 550,
            "steps": [
                {
                    "command": [
                        "by move=> reg_x y z; rewrite !mulNr => /oppr_inj/reg_x.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "lreg1",
            "line_nb": 553,
            "steps": [
                {
                    "command": [
                        "by move=> x y; rewrite !mul1r.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "lregM",
            "line_nb": 556,
            "steps": [
                {
                    "command": [
                        "by move=> reg_x reg_y z t; rewrite -!mulrA => /reg_x/reg_y.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "lregX",
            "line_nb": 559,
            "steps": [
                {
                    "command": [
                        "by move=> reg_x; elim: n => [|n]; [apply: lreg1 | rewrite exprS; apply: lregM].",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "lreg_sign",
            "line_nb": 562,
            "steps": [
                {
                    "command": [
                        "by apply: lregX; apply: lregN; apply: lreg1.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "prodr_const",
            "line_nb": 565,
            "steps": [
                {
                    "command": [
                        "by rewrite big_const -iteropE.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "prodrXr",
            "line_nb": 568,
            "steps": [
                {
                    "command": [
                        "by rewrite (big_morph _ (exprD _) (erefl _)).",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "prodrN",
            "line_nb": 571,
            "steps": [
                {
                    "command": [
                        "rewrite -sum1_card; elim/big_rec3: _ => [|i x n _ _ ->]; first by rewrite mulr1.",
                        "VernacExtend",
                        "3763a4b8db689af316a7372b722bb29806ab4fb6"
                    ]
                },
                {
                    "command": [
                        "by rewrite exprS !mulrA mulN1r !mulNr commrX //; apply: commrN1.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "prodrMn",
            "line_nb": 575,
            "steps": [
                {
                    "command": [
                        "rewrite -sum1_card; elim/big_rec3: _ => // i x m _ _ ->.",
                        "VernacExtend",
                        "44a8e3b453c9376c468b4e3e0046f5ac33e11d6d"
                    ]
                },
                {
                    "command": [
                        "by rewrite mulrnAr mulrnAl expnS mulrnA.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "natr_prod",
            "line_nb": 579,
            "steps": [
                {
                    "command": [
                        "exact: (big_morph _ natrM).",
                        "VernacExtend",
                        "ce637ff86bafca5d8359473e8c02af644dcbdc43"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "exprBn_comm",
            "line_nb": 590,
            "steps": [
                {
                    "command": [
                        "rewrite exprDn_comm; last exact: commrN.",
                        "VernacExtend",
                        "3763a4b8db689af316a7372b722bb29806ab4fb6"
                    ]
                },
                {
                    "command": [
                        "by apply: eq_bigr => i _; congr (_ *+ _); rewrite -commr_sign -mulrA -exprNn.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "subrXX_comm",
            "line_nb": 594,
            "steps": [
                {
                    "command": [
                        "case: n => [|n]; first by rewrite big_ord0 mulr0 subrr.",
                        "VernacExtend",
                        "3763a4b8db689af316a7372b722bb29806ab4fb6"
                    ]
                },
                {
                    "command": [
                        "rewrite mulrBl !big_distrr big_ord_recl big_ord_recr /= subnn mulr1 mul1r.",
                        "VernacExtend",
                        "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
                    ]
                },
                {
                    "command": [
                        "rewrite subn0 -!exprS opprD -!addrA; congr (_ + _); rewrite addrA -sumrB.",
                        "VernacExtend",
                        "9d78117f9fa00d8b79d08aff717709f8d084ba84"
                    ]
                },
                {
                    "command": [
                        "rewrite big1 ?add0r // => i _; rewrite !mulrA -exprS -subSn ?(valP i) //.",
                        "VernacExtend",
                        "82d53976234637e3f0907eb36cddf61d028c6306"
                    ]
                },
                {
                    "command": [
                        "by rewrite subSS (commrX _ (commr_sym cxy)) -mulrA -exprS subrr.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "exprD1n",
            "line_nb": 601,
            "steps": [
                {
                    "command": [
                        "rewrite addrC (exprDn_comm n (commr_sym (commr1 x))).",
                        "VernacExtend",
                        "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
                    ]
                },
                {
                    "command": [
                        "by apply: eq_bigr => i _; rewrite expr1n mul1r.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "sqrrD1",
            "line_nb": 610,
            "steps": [
                {
                    "command": [
                        "rewrite exprD1n !big_ord_recr big_ord0 /= add0r.",
                        "VernacExtend",
                        "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
                    ]
                },
                {
                    "command": [
                        "by rewrite addrC addrA addrAC.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "sqrrB1",
            "line_nb": 614,
            "steps": [
                {
                    "command": [
                        "by rewrite -sqrrN opprB addrC sqrrD1 sqrrN mulNrn.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "subr_sqr_1",
            "line_nb": 617,
            "steps": [
                {
                    "command": [
                        "by rewrite subrX1 !big_ord_recr big_ord0 /= addrAC add0r.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "charf0",
            "line_nb": 624,
            "steps": [
                {
                    "command": [
                        "by apply/eqP; case/andP: charFp.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "charf_prime",
            "line_nb": 627,
            "steps": [
                {
                    "command": [
                        "by case/andP: charFp.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "mulrn_char",
            "line_nb": 631,
            "steps": [
                {
                    "command": [
                        "by rewrite -mulr_natl charf0 mul0r.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "natr_mod_char",
            "line_nb": 634,
            "steps": [
                {
                    "command": [
                        "by rewrite {2}(divn_eq n p) natrD mulrnA mulrn_char add0r.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "dvdn_charf",
            "line_nb": 637,
            "steps": [
                {
                    "command": [
                        "apply/idP/eqP=> [/dvdnP[n' ->]|n0]; first by rewrite natrM charf0 mulr0.",
                        "VernacExtend",
                        "3763a4b8db689af316a7372b722bb29806ab4fb6"
                    ]
                },
                {
                    "command": [
                        "apply/idPn; rewrite -prime_coprime // => /eqnP pn1.",
                        "VernacExtend",
                        "5fce7e5361004176d6b434b36b4623c7387f70bb"
                    ]
                },
                {
                    "command": [
                        "have [a _ /dvdnP[b]] := Bezoutl n (prime_gt0 charf_prime).",
                        "VernacExtend",
                        "406cde1174359c53bf162a2a18c4eede395555f9"
                    ]
                },
                {
                    "command": [
                        "move/(congr1 (fun m => m%:R : R))/eqP.",
                        "VernacExtend",
                        "b1b2cb7a3a617cba67460b4eca1f04de3c1cc716"
                    ]
                },
                {
                    "command": [
                        "by rewrite natrD !natrM charf0 n0 !mulr0 pn1 addr0 oner_eq0.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "charf_eq",
            "line_nb": 644,
            "steps": [
                {
                    "command": [
                        "move=> q; apply/andP/eqP=> [[q_pr q0] | ->]; last by rewrite charf0.",
                        "VernacExtend",
                        "3763a4b8db689af316a7372b722bb29806ab4fb6"
                    ]
                },
                {
                    "command": [
                        "by apply/eqP; rewrite eq_sym -dvdn_prime2 // dvdn_charf.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "bin_lt_charf_0",
            "line_nb": 648,
            "steps": [
                {
                    "command": [
                        "by move=> lt0kp; apply/eqP; rewrite -dvdn_charf prime_dvd_bin.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "Frobenius_autE",
            "line_nb": 652,
            "steps": [
                {
                    "command": [
                        "by [].",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "Frobenius_aut0",
            "line_nb": 656,
            "steps": [
                {
                    "command": [
                        "by rewrite fE -(prednK (prime_gt0 charf_prime)) exprS mul0r.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "Frobenius_aut1",
            "line_nb": 659,
            "steps": [
                {
                    "command": [
                        "by rewrite fE expr1n.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "Frobenius_autD_comm",
            "line_nb": 662,
            "steps": [
                {
                    "command": [
                        "have defp := prednK (prime_gt0 charf_prime).",
                        "VernacExtend",
                        "406cde1174359c53bf162a2a18c4eede395555f9"
                    ]
                },
                {
                    "command": [
                        "rewrite !fE exprDn_comm // big_ord_recr subnn -defp big_ord_recl /= defp.",
                        "VernacExtend",
                        "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
                    ]
                },
                {
                    "command": [
                        "rewrite subn0 mulr1 mul1r bin0 binn big1 ?addr0 // => i _.",
                        "VernacExtend",
                        "3c42b53d0efc26db114b00541ac5e7fcb29e6aeb"
                    ]
                },
                {
                    "command": [
                        "by rewrite -mulr_natl bin_lt_charf_0 ?mul0r //= -{2}defp ltnS (valP i).",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "Frobenius_autMn",
            "line_nb": 668,
            "steps": [
                {
                    "command": [
                        "elim: n => [|n IHn]; first exact: Frobenius_aut0.",
                        "VernacExtend",
                        "3763a4b8db689af316a7372b722bb29806ab4fb6"
                    ]
                },
                {
                    "command": [
                        "by rewrite !mulrS Frobenius_autD_comm ?IHn //; apply: commrMn.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "Frobenius_aut_nat",
            "line_nb": 672,
            "steps": [
                {
                    "command": [
                        "by rewrite Frobenius_autMn Frobenius_aut1.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "Frobenius_autM_comm",
            "line_nb": 675,
            "steps": [
                {
                    "command": [
                        "exact: exprMn_comm.",
                        "VernacExtend",
                        "ce637ff86bafca5d8359473e8c02af644dcbdc43"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "Frobenius_autX",
            "line_nb": 678,
            "steps": [
                {
                    "command": [
                        "by rewrite !fE -!exprM mulnC.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "Frobenius_autN",
            "line_nb": 681,
            "steps": [
                {
                    "command": [
                        "apply/eqP; rewrite -subr_eq0 opprK addrC.",
                        "VernacExtend",
                        "56c014161b39aecfb3c54301c2409dba4e8e1857"
                    ]
                },
                {
                    "command": [
                        "by rewrite -(Frobenius_autD_comm (commrN _)) // subrr Frobenius_aut0.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "Frobenius_autB_comm",
            "line_nb": 685,
            "steps": [
                {
                    "command": [
                        "by move/commrN/Frobenius_autD_comm->; rewrite Frobenius_autN.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "exprNn_char",
            "line_nb": 689,
            "steps": [
                {
                    "command": [
                        "pose p := pdiv n; have [|n_gt1 charRn] := leqP n 1; first by case: (n) => [|[]].",
                        "VernacExtend",
                        "3763a4b8db689af316a7372b722bb29806ab4fb6"
                    ]
                },
                {
                    "command": [
                        "have charRp: p \\in [char R] by rewrite (pnatPpi charRn) // pi_pdiv.",
                        "VernacExtend",
                        "406cde1174359c53bf162a2a18c4eede395555f9"
                    ]
                },
                {
                    "command": [
                        "have /p_natP[e ->]: p.-nat n by rewrite -(eq_pnat _ (charf_eq charRp)).",
                        "VernacExtend",
                        "406cde1174359c53bf162a2a18c4eede395555f9"
                    ]
                },
                {
                    "command": [
                        "elim: e => // e IHe; rewrite expnSr !exprM {}IHe.",
                        "VernacExtend",
                        "de65c8193056a36f6dbb91fe21357bd770b140db"
                    ]
                },
                {
                    "command": [
                        "by rewrite -Frobenius_autE Frobenius_autN.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "addrr_char2",
            "line_nb": 698,
            "steps": [
                {
                    "command": [
                        "by rewrite -mulr2n mulrn_char.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "oppr_char2",
            "line_nb": 701,
            "steps": [
                {
                    "command": [
                        "by apply/esym/eqP; rewrite -addr_eq0 addrr_char2.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "subr_char2",
            "line_nb": 704,
            "steps": [
                {
                    "command": [
                        "by rewrite oppr_char2.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "addrK_char2",
            "line_nb": 707,
            "steps": [
                {
                    "command": [
                        "by move=> y; rewrite /= -subr_char2 addrK.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "addKr_char2",
            "line_nb": 710,
            "steps": [
                {
                    "command": [
                        "by move=> y; rewrite -{1}[x]oppr_char2 addKr.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "smulr_closedM",
            "line_nb": 726,
            "steps": [
                {
                    "command": [
                        "by case=> SN1 SM; split=> //; rewrite -[1]mulr1 -mulrNN SM.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "smulr_closedN",
            "line_nb": 729,
            "steps": [
                {
                    "command": [
                        "by case=> SN1 SM x Sx; rewrite -mulN1r SM.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "semiring_closedD",
            "line_nb": 732,
            "steps": [
                {
                    "command": [
                        "by case.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "semiring_closedM",
            "line_nb": 735,
            "steps": [
                {
                    "command": [
                        "by case.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "subring_closedB",
            "line_nb": 738,
            "steps": [
                {
                    "command": [
                        "by case=> S1 SB _; split; rewrite // -(subrr 1) SB.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "subring_closedM",
            "line_nb": 741,
            "steps": [
                {
                    "command": [
                        "by case=> S1 SB SM; split; rewrite ?(zmod_closedN (subring_closedB _)).",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "subring_closed_semi",
            "line_nb": 744,
            "steps": [
                {
                    "command": [
                        "by move=> ringS; split; [apply/zmod_closedD/subring_closedB | case: ringS].",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "mulIr_eq0",
            "line_nb": 753,
            "steps": [
                {
                    "command": [
                        "exact: (@mulrI_eq0 Rc).",
                        "VernacExtend",
                        "ce637ff86bafca5d8359473e8c02af644dcbdc43"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "mulIr0_rreg",
            "line_nb": 756,
            "steps": [
                {
                    "command": [
                        "exact: (@mulrI0_lreg Rc).",
                        "VernacExtend",
                        "ce637ff86bafca5d8359473e8c02af644dcbdc43"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "rreg_neq0",
            "line_nb": 759,
            "steps": [
                {
                    "command": [
                        "exact: (@lreg_neq0 Rc).",
                        "VernacExtend",
                        "ce637ff86bafca5d8359473e8c02af644dcbdc43"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "rregN",
            "line_nb": 762,
            "steps": [
                {
                    "command": [
                        "exact: (@lregN Rc).",
                        "VernacExtend",
                        "ce637ff86bafca5d8359473e8c02af644dcbdc43"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "rreg1",
            "line_nb": 765,
            "steps": [
                {
                    "command": [
                        "exact: (@lreg1 Rc).",
                        "VernacExtend",
                        "ce637ff86bafca5d8359473e8c02af644dcbdc43"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "rregM",
            "line_nb": 768,
            "steps": [
                {
                    "command": [
                        "by move=> reg_x reg_y; apply: (@lregM Rc).",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "revrX",
            "line_nb": 771,
            "steps": [
                {
                    "command": [
                        "by elim: n => // n IHn; rewrite exprS exprSr IHn.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "rregX",
            "line_nb": 774,
            "steps": [
                {
                    "command": [
                        "by move/(@lregX Rc x n); rewrite revrX.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "scalerA",
            "line_nb": 822,
            "steps": [
                {
                    "command": [
                        "by case: V v => ? [] ? [].",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "scale1r",
            "line_nb": 825,
            "steps": [
                {
                    "command": [
                        "by case: V => ? [] ? [].",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "scalerDr",
            "line_nb": 828,
            "steps": [
                {
                    "command": [
                        "by case: V a => ? [] ? [].",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "scalerDl",
            "line_nb": 831,
            "steps": [
                {
                    "command": [
                        "by case: V v => ? [] ? [].",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "scale0r",
            "line_nb": 834,
            "steps": [
                {
                    "command": [
                        "by apply: (addIr (1 *: v)); rewrite -scalerDl !add0r.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "scaler0",
            "line_nb": 837,
            "steps": [
                {
                    "command": [
                        "by rewrite -{1}(scale0r 0) scalerA mulr0 scale0r.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "scaleNr",
            "line_nb": 840,
            "steps": [
                {
                    "command": [
                        "by apply: (addIr (a *: v)); rewrite -scalerDl !addNr scale0r.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "scaleN1r",
            "line_nb": 843,
            "steps": [
                {
                    "command": [
                        "by rewrite scaleNr scale1r.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "scalerN",
            "line_nb": 846,
            "steps": [
                {
                    "command": [
                        "by apply: (addIr (a *: v)); rewrite -scalerDr !addNr scaler0.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "scalerBl",
            "line_nb": 849,
            "steps": [
                {
                    "command": [
                        "by rewrite scalerDl scaleNr.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "scalerBr",
            "line_nb": 852,
            "steps": [
                {
                    "command": [
                        "by rewrite scalerDr scalerN.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "scaler_nat",
            "line_nb": 855,
            "steps": [
                {
                    "command": [
                        "elim: n => /= [|n ]; first by rewrite scale0r.",
                        "VernacExtend",
                        "3763a4b8db689af316a7372b722bb29806ab4fb6"
                    ]
                },
                {
                    "command": [
                        "by rewrite !mulrS scalerDl ?scale1r => ->.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "scaler_sign",
            "line_nb": 859,
            "steps": [
                {
                    "command": [
                        "by case: b; rewrite ?scaleNr scale1r.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "signrZK",
            "line_nb": 862,
            "steps": [
                {
                    "command": [
                        "by move=> u; rewrite scalerA -expr2 sqrr_sign scale1r.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "scalerMnl",
            "line_nb": 865,
            "steps": [
                {
                    "command": [
                        "elim: n => [|n IHn]; first by rewrite !mulr0n scale0r.",
                        "VernacExtend",
                        "3763a4b8db689af316a7372b722bb29806ab4fb6"
                    ]
                },
                {
                    "command": [
                        "by rewrite !mulrSr IHn scalerDl.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "scalerMnr",
            "line_nb": 869,
            "steps": [
                {
                    "command": [
                        "elim: n => [|n IHn]; first by rewrite !mulr0n scaler0.",
                        "VernacExtend",
                        "3763a4b8db689af316a7372b722bb29806ab4fb6"
                    ]
                },
                {
                    "command": [
                        "by rewrite !mulrSr IHn scalerDr.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "scaler_suml",
            "line_nb": 873,
            "steps": [
                {
                    "command": [
                        "exact: (big_morph _ (scalerDl v) (scale0r v)).",
                        "VernacExtend",
                        "ce637ff86bafca5d8359473e8c02af644dcbdc43"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "scaler_sumr",
            "line_nb": 876,
            "steps": [
                {
                    "command": [
                        "exact: big_endo (scalerDr a) (scaler0 a) I r P F.",
                        "VernacExtend",
                        "ce637ff86bafca5d8359473e8c02af644dcbdc43"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "linear_closedB",
            "line_nb": 884,
            "steps": [
                {
                    "command": [
                        "by move=> Slin u v Su Sv; rewrite addrC -scaleN1r Slin.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "submod_closedB",
            "line_nb": 887,
            "steps": [
                {
                    "command": [
                        "by case=> S0 /linear_closedB.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "submod_closedZ",
            "line_nb": 890,
            "steps": [
                {
                    "command": [
                        "by case=> S0 Slin a v Sv; rewrite -[a *: v]addr0 Slin.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "scalerAl",
            "line_nb": 947,
            "steps": [
                {
                    "command": [
                        "by case: A k x y => ? [].",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "mulr_algl",
            "line_nb": 950,
            "steps": [
                {
                    "command": [
                        "by rewrite -scalerAl mul1r.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "subalg_closedZ",
            "line_nb": 963,
            "steps": [
                {
                    "command": [
                        "by case=> S1 Slin _; split; rewrite // -(subrr 1) linear_closedB.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "subalg_closedBM",
            "line_nb": 966,
            "steps": [
                {
                    "command": [
                        "by case=> S1 Slin SM; split=> //; apply: linear_closedB.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "raddfB",
            "line_nb": 1019,
            "steps": [
                {
                    "command": [
                        "exact: Additive.class.",
                        "VernacExtend",
                        "ce637ff86bafca5d8359473e8c02af644dcbdc43"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "raddf0",
            "line_nb": 1022,
            "steps": [
                {
                    "command": [
                        "by rewrite -[0]subr0 raddfB subrr.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "raddf_eq0",
            "line_nb": 1025,
            "steps": [
                {
                    "command": [
                        "by move=> /inj_eq <-; rewrite raddf0.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "raddfN",
            "line_nb": 1028,
            "steps": [
                {
                    "command": [
                        "by move=> x /=; rewrite -sub0r raddfB raddf0 sub0r.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "raddfD",
            "line_nb": 1031,
            "steps": [
                {
                    "command": [
                        "by move=> x y; rewrite -[y]opprK raddfB -raddfN.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "raddfMn",
            "line_nb": 1034,
            "steps": [
                {
                    "command": [
                        "by elim: n => [|n IHn] x /=; rewrite ?raddf0 // !mulrS raddfD IHn.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "raddfMNn",
            "line_nb": 1037,
            "steps": [
                {
                    "command": [
                        "by move=> x /=; rewrite raddfN raddfMn.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "raddf_sum",
            "line_nb": 1040,
            "steps": [
                {
                    "command": [
                        "exact: (big_morph f raddfD raddf0).",
                        "VernacExtend",
                        "ce637ff86bafca5d8359473e8c02af644dcbdc43"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "can2_additive",
            "line_nb": 1043,
            "steps": [
                {
                    "command": [
                        "by move=> fK f'K x y /=; apply: (canLR fK); rewrite raddfB !f'K.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "bij_additive",
            "line_nb": 1046,
            "steps": [
                {
                    "command": [
                        "by case=> f' fK f'K; exists (Additive (can2_additive fK f'K)).",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "locked_is_additive",
            "line_nb": 1049,
            "steps": [
                {
                    "command": [
                        "by case: k f => [] [].",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "raddfMnat",
            "line_nb": 1056,
            "steps": [
                {
                    "command": [
                        "by rewrite !mulr_natl raddfMn.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "raddfMsign",
            "line_nb": 1059,
            "steps": [
                {
                    "command": [
                        "by rewrite !(mulr_sign, =^~ signr_odd) (fun_if f) raddfN.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "raddfZnat",
            "line_nb": 1063,
            "steps": [
                {
                    "command": [
                        "by rewrite !scaler_nat raddfMn.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "raddfZsign",
            "line_nb": 1066,
            "steps": [
                {
                    "command": [
                        "by rewrite !(scaler_sign, =^~ signr_odd) (fun_if h) raddfN.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "idfun_is_additive",
            "line_nb": 1072,
            "steps": [
                {
                    "command": [
                        "by [].",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "comp_is_additive",
            "line_nb": 1076,
            "steps": [
                {
                    "command": [
                        "by move=> x y /=; rewrite !raddfB.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "opp_is_additive",
            "line_nb": 1080,
            "steps": [
                {
                    "command": [
                        "by move=> x y; rewrite /= opprD.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "null_fun_is_additive",
            "line_nb": 1084,
            "steps": [
                {
                    "command": [
                        "by move=> /=; rewrite subr0.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "add_fun_is_additive",
            "line_nb": 1088,
            "steps": [
                {
                    "command": [
                        "by move=> x y /=; rewrite !raddfB addrCA -!addrA addrCA -opprD.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "sub_fun_is_additive",
            "line_nb": 1092,
            "steps": [
                {
                    "command": [
                        "by move=> x y /=; rewrite !raddfB addrAC -!addrA -!opprD addrAC addrA.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "mull_fun_is_additive",
            "line_nb": 1100,
            "steps": [
                {
                    "command": [
                        "by move=> x y /=; rewrite raddfB mulrBr.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "mulr_fun_is_additive",
            "line_nb": 1104,
            "steps": [
                {
                    "command": [
                        "by move=> x y /=; rewrite raddfB mulrBl.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "rmorph0",
            "line_nb": 1149,
            "steps": [
                {
                    "command": [
                        "exact: raddf0.",
                        "VernacExtend",
                        "ce637ff86bafca5d8359473e8c02af644dcbdc43"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "rmorphN",
            "line_nb": 1152,
            "steps": [
                {
                    "command": [
                        "exact: raddfN.",
                        "VernacExtend",
                        "ce637ff86bafca5d8359473e8c02af644dcbdc43"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "rmorphD",
            "line_nb": 1155,
            "steps": [
                {
                    "command": [
                        "exact: raddfD.",
                        "VernacExtend",
                        "ce637ff86bafca5d8359473e8c02af644dcbdc43"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "rmorphB",
            "line_nb": 1158,
            "steps": [
                {
                    "command": [
                        "exact: raddfB.",
                        "VernacExtend",
                        "ce637ff86bafca5d8359473e8c02af644dcbdc43"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "rmorphMn",
            "line_nb": 1161,
            "steps": [
                {
                    "command": [
                        "exact: raddfMn.",
                        "VernacExtend",
                        "ce637ff86bafca5d8359473e8c02af644dcbdc43"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "rmorphMNn",
            "line_nb": 1164,
            "steps": [
                {
                    "command": [
                        "exact: raddfMNn.",
                        "VernacExtend",
                        "ce637ff86bafca5d8359473e8c02af644dcbdc43"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "rmorph_sum",
            "line_nb": 1167,
            "steps": [
                {
                    "command": [
                        "exact: raddf_sum.",
                        "VernacExtend",
                        "ce637ff86bafca5d8359473e8c02af644dcbdc43"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "rmorphMsign",
            "line_nb": 1170,
            "steps": [
                {
                    "command": [
                        "exact: raddfMsign.",
                        "VernacExtend",
                        "ce637ff86bafca5d8359473e8c02af644dcbdc43"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "rmorphismP",
            "line_nb": 1173,
            "steps": [
                {
                    "command": [
                        "exact: RMorphism.class.",
                        "VernacExtend",
                        "ce637ff86bafca5d8359473e8c02af644dcbdc43"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "rmorphismMP",
            "line_nb": 1176,
            "steps": [
                {
                    "command": [
                        "exact: rmorphismP.",
                        "VernacExtend",
                        "ce637ff86bafca5d8359473e8c02af644dcbdc43"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "rmorph1",
            "line_nb": 1179,
            "steps": [
                {
                    "command": [
                        "by case: rmorphismMP.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "rmorphM",
            "line_nb": 1182,
            "steps": [
                {
                    "command": [
                        "by case: rmorphismMP.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "rmorph_prod",
            "line_nb": 1185,
            "steps": [
                {
                    "command": [
                        "exact: (big_morph f rmorphM rmorph1).",
                        "VernacExtend",
                        "ce637ff86bafca5d8359473e8c02af644dcbdc43"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "rmorphX",
            "line_nb": 1188,
            "steps": [
                {
                    "command": [
                        "by elim: n => [|n IHn] x; rewrite ?rmorph1 // !exprS rmorphM IHn.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "rmorph_nat",
            "line_nb": 1191,
            "steps": [
                {
                    "command": [
                        "by rewrite rmorphMn rmorph1.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "rmorphN1",
            "line_nb": 1194,
            "steps": [
                {
                    "command": [
                        "by rewrite rmorphN rmorph1.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "rmorph_sign",
            "line_nb": 1197,
            "steps": [
                {
                    "command": [
                        "by rewrite rmorphX rmorphN1.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "rmorph_char",
            "line_nb": 1200,
            "steps": [
                {
                    "command": [
                        "by rewrite !inE -rmorph_nat => /andP[-> /= /eqP->]; rewrite rmorph0.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "rmorph_eq_nat",
            "line_nb": 1203,
            "steps": [
                {
                    "command": [
                        "by move/inj_eq <-; rewrite rmorph_nat.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "rmorph_eq1",
            "line_nb": 1206,
            "steps": [
                {
                    "command": [
                        "exact: rmorph_eq_nat 1%N.",
                        "VernacExtend",
                        "ce637ff86bafca5d8359473e8c02af644dcbdc43"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "can2_rmorphism",
            "line_nb": 1209,
            "steps": [
                {
                    "command": [
                        "move=> fK f'K; split; first exact: can2_additive fK f'K.",
                        "VernacExtend",
                        "3763a4b8db689af316a7372b722bb29806ab4fb6"
                    ]
                },
                {
                    "command": [
                        "by split=> [x y|]; apply: (canLR fK); rewrite /= (rmorphM, rmorph1) ?f'K.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "bij_rmorphism",
            "line_nb": 1213,
            "steps": [
                {
                    "command": [
                        "by case=> f' fK f'K; exists (RMorphism (can2_rmorphism fK f'K)).",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "locked_is_multiplicative",
            "line_nb": 1216,
            "steps": [
                {
                    "command": [
                        "by case: k f => [] [? []].",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "idfun_is_multiplicative",
            "line_nb": 1223,
            "steps": [
                {
                    "command": [
                        "by [].",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "comp_is_multiplicative",
            "line_nb": 1227,
            "steps": [
                {
                    "command": [
                        "by split=> [x y|] /=; rewrite ?rmorph1 ?rmorphM.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "in_alg_is_rmorphism",
            "line_nb": 1234,
            "steps": [
                {
                    "command": [
                        "split=> [x y|]; first exact: scalerBl.",
                        "VernacExtend",
                        "3763a4b8db689af316a7372b722bb29806ab4fb6"
                    ]
                },
                {
                    "command": [
                        "by split=> [x y|] /=; rewrite ?scale1r // -scalerAl mul1r scalerA.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "in_algE",
            "line_nb": 1240,
            "steps": [
                {
                    "command": [
                        "by [].",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "opE",
            "line_nb": 1252,
            "steps": [
                {
                    "command": [
                        "by case: s_law.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "N1op",
            "line_nb": 1255,
            "steps": [
                {
                    "command": [
                        "by case: s_law.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "opB",
            "line_nb": 1258,
            "steps": [
                {
                    "command": [
                        "by case: s_law.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "comp_opE",
            "line_nb": 1263,
            "steps": [
                {
                    "command": [
                        "exact: congr1 opE.",
                        "VernacExtend",
                        "ce637ff86bafca5d8359473e8c02af644dcbdc43"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "compN1op",
            "line_nb": 1266,
            "steps": [
                {
                    "command": [
                        "by move=> v; rewrite /= rmorphN1 N1op.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "class_of_axiom",
            "line_nb": 1281,
            "steps": [
                {
                    "command": [
                        "move=> fL; have fB: additive f.",
                        "VernacExtend",
                        "ccd83c252dcbae3d56f3d057fcb8217878b51901"
                    ]
                },
                {
                    "command": [
                        "by move=> x y /=; rewrite -scaleN1r addrC fL Ds Scale.N1op addrC.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "by split=> // a v /=; rewrite -[a *: v](addrK v) fB fL addrK Ds.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "linear0",
            "line_nb": 1345,
            "steps": [
                {
                    "command": [
                        "exact: raddf0.",
                        "VernacExtend",
                        "ce637ff86bafca5d8359473e8c02af644dcbdc43"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "linearN",
            "line_nb": 1348,
            "steps": [
                {
                    "command": [
                        "exact: raddfN.",
                        "VernacExtend",
                        "ce637ff86bafca5d8359473e8c02af644dcbdc43"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "linearD",
            "line_nb": 1351,
            "steps": [
                {
                    "command": [
                        "exact: raddfD.",
                        "VernacExtend",
                        "ce637ff86bafca5d8359473e8c02af644dcbdc43"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "linearB",
            "line_nb": 1354,
            "steps": [
                {
                    "command": [
                        "exact: raddfB.",
                        "VernacExtend",
                        "ce637ff86bafca5d8359473e8c02af644dcbdc43"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "linearMn",
            "line_nb": 1357,
            "steps": [
                {
                    "command": [
                        "exact: raddfMn.",
                        "VernacExtend",
                        "ce637ff86bafca5d8359473e8c02af644dcbdc43"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "linearMNn",
            "line_nb": 1360,
            "steps": [
                {
                    "command": [
                        "exact: raddfMNn.",
                        "VernacExtend",
                        "ce637ff86bafca5d8359473e8c02af644dcbdc43"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "linear_sum",
            "line_nb": 1363,
            "steps": [
                {
                    "command": [
                        "exact: raddf_sum.",
                        "VernacExtend",
                        "ce637ff86bafca5d8359473e8c02af644dcbdc43"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "linearZ_LR",
            "line_nb": 1366,
            "steps": [
                {
                    "command": [
                        "by case: f => ? [].",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "linearP",
            "line_nb": 1369,
            "steps": [
                {
                    "command": [
                        "by move=> u v /=; rewrite linearD linearZ_LR.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "locked_is_scalable",
            "line_nb": 1372,
            "steps": [
                {
                    "command": [
                        "by case: k f => [] [? []].",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "linearZ",
            "line_nb": 1380,
            "steps": [
                {
                    "command": [
                        "by rewrite linearZ_LR; case: f => f /= ->.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "linearZZ",
            "line_nb": 1386,
            "steps": [
                {
                    "command": [
                        "exact: linearZ_LR.",
                        "VernacExtend",
                        "ce637ff86bafca5d8359473e8c02af644dcbdc43"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "linearPZ",
            "line_nb": 1389,
            "steps": [
                {
                    "command": [
                        "exact: linearP.",
                        "VernacExtend",
                        "ce637ff86bafca5d8359473e8c02af644dcbdc43"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "can2_linear",
            "line_nb": 1392,
            "steps": [
                {
                    "command": [
                        "by move=> fK f'K a x y /=; apply: (canLR fK); rewrite linearP !f'K.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "bij_linear",
            "line_nb": 1395,
            "steps": [
                {
                    "command": [
                        "by case=> f' fK f'K; exists (Linear (can2_linear fK f'K)).",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "scalarZ",
            "line_nb": 1401,
            "steps": [
                {
                    "command": [
                        "exact: linearZ_LR.",
                        "VernacExtend",
                        "ce637ff86bafca5d8359473e8c02af644dcbdc43"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "scalarP",
            "line_nb": 1404,
            "steps": [
                {
                    "command": [
                        "exact: linearP.",
                        "VernacExtend",
                        "ce637ff86bafca5d8359473e8c02af644dcbdc43"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "idfun_is_scalable",
            "line_nb": 1411,
            "steps": [
                {
                    "command": [
                        "by [].",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "opp_is_scalable",
            "line_nb": 1415,
            "steps": [
                {
                    "command": [
                        "by move=> a v /=; rewrite scalerN.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "comp_is_scalable",
            "line_nb": 1419,
            "steps": [
                {
                    "command": [
                        "by move=> a v /=; rewrite !linearZ_LR.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "Ds",
            "line_nb": 1424,
            "steps": [
                {
                    "command": [
                        "by rewrite Scale.opE.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "null_fun_is_scalable",
            "line_nb": 1427,
            "steps": [
                {
                    "command": [
                        "by move=> a v /=; rewrite raddf0.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "add_fun_is_scalable",
            "line_nb": 1431,
            "steps": [
                {
                    "command": [
                        "by move=> a u; rewrite /= !linearZ_LR !Ds raddfD.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "sub_fun_is_scalable",
            "line_nb": 1435,
            "steps": [
                {
                    "command": [
                        "by move=> a u; rewrite /= !linearZ_LR !Ds raddfB.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "mulr_fun_is_scalable",
            "line_nb": 1443,
            "steps": [
                {
                    "command": [
                        "by move=> k x /=; rewrite linearZ scalerAl.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "rmorph_alg",
            "line_nb": 1496,
            "steps": [
                {
                    "command": [
                        "by rewrite linearZ rmorph1.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "lrmorphismP",
            "line_nb": 1499,
            "steps": [
                {
                    "command": [
                        "exact: LRMorphism.class.",
                        "VernacExtend",
                        "ce637ff86bafca5d8359473e8c02af644dcbdc43"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "can2_lrmorphism",
            "line_nb": 1502,
            "steps": [
                {
                    "command": [
                        "by move=> fK f'K; split; [apply: (can2_rmorphism fK) | apply: (can2_linear fK)].",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "bij_lrmorphism",
            "line_nb": 1505,
            "steps": [
                {
                    "command": [
                        "by case/bij_rmorphism=> f' fK f'K; exists (AddLRMorphism (can2_linear fK f'K)).",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "mulrC",
            "line_nb": 1552,
            "steps": [
                {
                    "command": [
                        "by case: R => T [].",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "mulrCA",
            "line_nb": 1556,
            "steps": [
                {
                    "command": [
                        "exact: mulmCA.",
                        "VernacExtend",
                        "ce637ff86bafca5d8359473e8c02af644dcbdc43"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "mulrAC",
            "line_nb": 1559,
            "steps": [
                {
                    "command": [
                        "exact: mulmAC.",
                        "VernacExtend",
                        "ce637ff86bafca5d8359473e8c02af644dcbdc43"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "mulrACA",
            "line_nb": 1562,
            "steps": [
                {
                    "command": [
                        "exact: mulmACA.",
                        "VernacExtend",
                        "ce637ff86bafca5d8359473e8c02af644dcbdc43"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "exprMn",
            "line_nb": 1565,
            "steps": [
                {
                    "command": [
                        "by move=> x y; apply: exprMn_comm; apply: mulrC.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "prodrXl",
            "line_nb": 1568,
            "steps": [
                {
                    "command": [
                        "by rewrite (big_morph _ (exprMn n) (expr1n _ n)).",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "prodr_undup_exp_count",
            "line_nb": 1571,
            "steps": [
                {
                    "command": [
                        "exact: big_undup_iterop_count.",
                        "VernacExtend",
                        "ce637ff86bafca5d8359473e8c02af644dcbdc43"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "exprDn",
            "line_nb": 1574,
            "steps": [
                {
                    "command": [
                        "by rewrite exprDn_comm //; apply: mulrC.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "exprBn",
            "line_nb": 1577,
            "steps": [
                {
                    "command": [
                        "by rewrite exprBn_comm //; apply: mulrC.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "subrXX",
            "line_nb": 1580,
            "steps": [
                {
                    "command": [
                        "by rewrite -subrXX_comm //; apply: mulrC.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "sqrrD",
            "line_nb": 1583,
            "steps": [
                {
                    "command": [
                        "by rewrite exprDn !big_ord_recr big_ord0 /= add0r mulr1 mul1r.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "sqrrB",
            "line_nb": 1586,
            "steps": [
                {
                    "command": [
                        "by rewrite sqrrD mulrN mulNrn sqrrN.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "subr_sqr",
            "line_nb": 1589,
            "steps": [
                {
                    "command": [
                        "by rewrite subrXX !big_ord_recr big_ord0 /= add0r mulr1 mul1r.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "subr_sqrDB",
            "line_nb": 1592,
            "steps": [
                {
                    "command": [
                        "rewrite sqrrD sqrrB -!(addrAC _ (y ^+ 2)) opprB.",
                        "VernacExtend",
                        "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
                    ]
                },
                {
                    "command": [
                        "by rewrite addrC addrA subrK -mulrnDr.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "Frobenius_aut_is_rmorphism",
            "line_nb": 1598,
            "steps": [
                {
                    "command": [
                        "split=> [x y|]; first exact: Frobenius_autB_comm (mulrC _ _).",
                        "VernacExtend",
                        "3763a4b8db689af316a7372b722bb29806ab4fb6"
                    ]
                },
                {
                    "command": [
                        "split=> [x y|]; first exact: Frobenius_autM_comm (mulrC _ _).",
                        "VernacExtend",
                        "3763a4b8db689af316a7372b722bb29806ab4fb6"
                    ]
                },
                {
                    "command": [
                        "exact: Frobenius_aut1.",
                        "VernacExtend",
                        "ce637ff86bafca5d8359473e8c02af644dcbdc43"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "exprDn_char",
            "line_nb": 1606,
            "steps": [
                {
                    "command": [
                        "pose p := pdiv n; have [|n_gt1 charRn] := leqP n 1; first by case: (n) => [|[]].",
                        "VernacExtend",
                        "3763a4b8db689af316a7372b722bb29806ab4fb6"
                    ]
                },
                {
                    "command": [
                        "have charRp: p \\in [char R] by rewrite (pnatPpi charRn) ?pi_pdiv.",
                        "VernacExtend",
                        "406cde1174359c53bf162a2a18c4eede395555f9"
                    ]
                },
                {
                    "command": [
                        "have{charRn} /p_natP[e ->]: p.-nat n by rewrite -(eq_pnat _ (charf_eq charRp)).",
                        "VernacExtend",
                        "406cde1174359c53bf162a2a18c4eede395555f9"
                    ]
                },
                {
                    "command": [
                        "by elim: e => // e IHe; rewrite !expnSr !exprM IHe -Frobenius_autE rmorphD.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "rmorph_comm",
            "line_nb": 1612,
            "steps": [
                {
                    "command": [
                        "by red; rewrite -!rmorphM mulrC.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "scale_is_scalable",
            "line_nb": 1617,
            "steps": [
                {
                    "command": [
                        "by move=> a v /=; rewrite !scalerA mulrC.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "scale_fun_is_scalable",
            "line_nb": 1621,
            "steps": [
                {
                    "command": [
                        "by move=> a v /=; rewrite !linearZ.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "comm_axiom",
            "line_nb": 1631,
            "steps": [
                {
                    "command": [
                        "by move=> _ commA k x y; rewrite commA scalerAl commA.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "scalerAr",
            "line_nb": 1681,
            "steps": [
                {
                    "command": [
                        "by case: A k x y => T [].",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "scalerCA",
            "line_nb": 1684,
            "steps": [
                {
                    "command": [
                        "by rewrite -scalerAl scalerAr.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "mulr_algr",
            "line_nb": 1687,
            "steps": [
                {
                    "command": [
                        "by rewrite -scalerAr mulr1.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "exprZn",
            "line_nb": 1690,
            "steps": [
                {
                    "command": [
                        "elim: n => [|n IHn]; first by rewrite !expr0 scale1r.",
                        "VernacExtend",
                        "3763a4b8db689af316a7372b722bb29806ab4fb6"
                    ]
                },
                {
                    "command": [
                        "by rewrite !exprS IHn -scalerA scalerAr scalerAl.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "scaler_prod",
            "line_nb": 1694,
            "steps": [
                {
                    "command": [
                        "elim/big_rec3: _ => [|i x a _ _ ->]; first by rewrite scale1r.",
                        "VernacExtend",
                        "3763a4b8db689af316a7372b722bb29806ab4fb6"
                    ]
                },
                {
                    "command": [
                        "by rewrite -scalerAl -scalerAr scalerA.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "scaler_prodl",
            "line_nb": 1698,
            "steps": [
                {
                    "command": [
                        "by rewrite scaler_prod prodr_const.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "scaler_prodr",
            "line_nb": 1701,
            "steps": [
                {
                    "command": [
                        "by rewrite scaler_prod prodr_const.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "mull_fun_is_scalable",
            "line_nb": 1707,
            "steps": [
                {
                    "command": [
                        "by move=> k x /=; rewrite linearZ scalerAr.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "unit_key",
            "line_nb": 1753,
            "steps": [
                {
                    "command": [
                        "by [].",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "divrr",
            "line_nb": 1764,
            "steps": [
                {
                    "command": [
                        "by case: R => T [? []].",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "mulVr",
            "line_nb": 1768,
            "steps": [
                {
                    "command": [
                        "by case: R => T [? []].",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "invr_out",
            "line_nb": 1771,
            "steps": [
                {
                    "command": [
                        "by case: R x => T [? []].",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "unitrP",
            "line_nb": 1774,
            "steps": [
                {
                    "command": [
                        "apply: (iffP idP) => [Ux | []]; last by case: R x => T [? []].",
                        "VernacExtend",
                        "3763a4b8db689af316a7372b722bb29806ab4fb6"
                    ]
                },
                {
                    "command": [
                        "by exists x^-1; rewrite divrr ?mulVr.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "mulKr",
            "line_nb": 1778,
            "steps": [
                {
                    "command": [
                        "by move=> x Ux y; rewrite mulrA mulVr ?mul1r.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "mulVKr",
            "line_nb": 1781,
            "steps": [
                {
                    "command": [
                        "by move=> x Ux y; rewrite mulrA mulrV ?mul1r.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "mulrK",
            "line_nb": 1784,
            "steps": [
                {
                    "command": [
                        "by move=> x Ux y; rewrite -mulrA divrr ?mulr1.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "mulrVK",
            "line_nb": 1787,
            "steps": [
                {
                    "command": [
                        "by move=> x Ux y; rewrite -mulrA mulVr ?mulr1.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "mulrI",
            "line_nb": 1791,
            "steps": [
                {
                    "command": [
                        "by move=> x Ux; apply: can_inj (mulKr Ux).",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "mulIr",
            "line_nb": 1794,
            "steps": [
                {
                    "command": [
                        "by move=> x Ux; apply: can_inj (mulrK Ux).",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "commrV",
            "line_nb": 1805,
            "steps": [
                {
                    "command": [
                        "have [Uy cxy | /invr_out-> //] := boolP (y \\in unit).",
                        "VernacExtend",
                        "406cde1174359c53bf162a2a18c4eede395555f9"
                    ]
                },
                {
                    "command": [
                        "by apply: (canLR (mulrK Uy)); rewrite -mulrA cxy mulKr.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "unitrE",
            "line_nb": 1809,
            "steps": [
                {
                    "command": [
                        "apply/idP/eqP=> [Ux | xx1]; first exact: divrr.",
                        "VernacExtend",
                        "3763a4b8db689af316a7372b722bb29806ab4fb6"
                    ]
                },
                {
                    "command": [
                        "by apply/unitrP; exists x^-1; rewrite -commrV.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "invrK",
            "line_nb": 1813,
            "steps": [
                {
                    "command": [
                        "move=> x; case Ux: (x \\in unit); last by rewrite !invr_out ?Ux.",
                        "VernacExtend",
                        "3763a4b8db689af316a7372b722bb29806ab4fb6"
                    ]
                },
                {
                    "command": [
                        "rewrite -(mulrK Ux _^-1) -mulrA commrV ?mulKr //.",
                        "VernacExtend",
                        "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
                    ]
                },
                {
                    "command": [
                        "by apply/unitrP; exists x; rewrite divrr ?mulVr.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "invr_inj",
            "line_nb": 1818,
            "steps": [
                {
                    "command": [
                        "exact: inv_inj invrK.",
                        "VernacExtend",
                        "ce637ff86bafca5d8359473e8c02af644dcbdc43"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "unitrV",
            "line_nb": 1821,
            "steps": [
                {
                    "command": [
                        "by rewrite !unitrE invrK commrV.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "unitr1",
            "line_nb": 1824,
            "steps": [
                {
                    "command": [
                        "by apply/unitrP; exists 1; rewrite mulr1.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "invr1",
            "line_nb": 1827,
            "steps": [
                {
                    "command": [
                        "by rewrite -{2}(mulVr unitr1) mulr1.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "div1r",
            "line_nb": 1830,
            "steps": [
                {
                    "command": [
                        "by rewrite mul1r.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "divr1",
            "line_nb": 1833,
            "steps": [
                {
                    "command": [
                        "by rewrite invr1 mulr1.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "natr_div",
            "line_nb": 1836,
            "steps": [
                {
                    "command": [
                        "by rewrite dvdn_eq => /eqP def_m unit_d; rewrite -{2}def_m natrM mulrK.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "divrI",
            "line_nb": 1839,
            "steps": [
                {
                    "command": [
                        "by move=> x /mulrI/inj_comp; apply; apply: invr_inj.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "divIr",
            "line_nb": 1842,
            "steps": [
                {
                    "command": [
                        "by move=> x; rewrite -unitrV => /mulIr.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "unitr0",
            "line_nb": 1845,
            "steps": [
                {
                    "command": [
                        "by apply/unitrP=> [[x [_ /esym/eqP]]]; rewrite mul0r oner_eq0.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "invr0",
            "line_nb": 1848,
            "steps": [
                {
                    "command": [
                        "by rewrite invr_out ?unitr0.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "unitrN1",
            "line_nb": 1851,
            "steps": [
                {
                    "command": [
                        "by apply/unitrP; exists (-1); rewrite mulrNN mulr1.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "invrN1",
            "line_nb": 1854,
            "steps": [
                {
                    "command": [
                        "by rewrite -{2}(divrr unitrN1) mulN1r opprK.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "invr_sign",
            "line_nb": 1857,
            "steps": [
                {
                    "command": [
                        "by rewrite -signr_odd; case: (odd n); rewrite (invr1, invrN1).",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "unitrMl",
            "line_nb": 1860,
            "steps": [
                {
                    "command": [
                        "move=> Uy; wlog Ux: x y Uy / x \\is a unit => [WHxy|].",
                        "VernacExtend",
                        "8261237f0cda1915a4077c28869831c5329103ce"
                    ]
                },
                {
                    "command": [
                        "by apply/idP/idP=> Ux; first rewrite -(mulrK Uy x); rewrite WHxy ?unitrV.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "rewrite Ux; apply/unitrP; exists (y^-1 * x^-1).",
                        "VernacExtend",
                        "a4fa58265b8031e592d242aa93628cff0acc1a51"
                    ]
                },
                {
                    "command": [
                        "by rewrite -!mulrA mulKr ?mulrA ?mulrK ?divrr ?mulVr.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "unitrMr",
            "line_nb": 1866,
            "steps": [
                {
                    "command": [
                        "move=> Ux; apply/idP/idP=> [Uxy | Uy]; last by rewrite unitrMl.",
                        "VernacExtend",
                        "3763a4b8db689af316a7372b722bb29806ab4fb6"
                    ]
                },
                {
                    "command": [
                        "by rewrite -(mulKr Ux y) unitrMl ?unitrV.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "invrM",
            "line_nb": 1870,
            "steps": [
                {
                    "command": [
                        "move=> x y Ux Uy; have Uxy: (x * y \\in unit) by rewrite unitrMl.",
                        "VernacExtend",
                        "ccd83c252dcbae3d56f3d057fcb8217878b51901"
                    ]
                },
                {
                    "command": [
                        "by apply: (mulrI Uxy); rewrite divrr ?mulrA ?mulrK ?divrr.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "unitrM_comm",
            "line_nb": 1874,
            "steps": [
                {
                    "command": [
                        "move=> cxy; apply/idP/andP=> [Uxy | [Ux Uy]]; last by rewrite unitrMl.",
                        "VernacExtend",
                        "3763a4b8db689af316a7372b722bb29806ab4fb6"
                    ]
                },
                {
                    "command": [
                        "suffices Ux: x \\in unit by rewrite unitrMr in Uxy.",
                        "VernacExtend",
                        "290ed488b5562e885aa2cac56f3a69b4faa0eaa6"
                    ]
                },
                {
                    "command": [
                        "apply/unitrP; case/unitrP: Uxy => z [zxy xyz]; exists (y * z).",
                        "VernacExtend",
                        "aa8863642e3acd1cec285effc5265ccee6912f89"
                    ]
                },
                {
                    "command": [
                        "rewrite mulrA xyz -{1}[y]mul1r -{1}zxy cxy -!mulrA (mulrA x) (mulrA _ z) xyz.",
                        "VernacExtend",
                        "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
                    ]
                },
                {
                    "command": [
                        "by rewrite mul1r -cxy.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "unitrX",
            "line_nb": 1881,
            "steps": [
                {
                    "command": [
                        "by move=> Ux; elim: n => [|n IHn]; rewrite ?unitr1 // exprS unitrMl.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "unitrX_pos",
            "line_nb": 1884,
            "steps": [
                {
                    "command": [
                        "case: n => // n _; rewrite exprS unitrM_comm; last exact: commrX.",
                        "VernacExtend",
                        "3763a4b8db689af316a7372b722bb29806ab4fb6"
                    ]
                },
                {
                    "command": [
                        "by case Ux: (x \\is a unit); rewrite // unitrX.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "exprVn",
            "line_nb": 1888,
            "steps": [
                {
                    "command": [
                        "elim: n => [|n IHn]; first by rewrite !expr0 ?invr1.",
                        "VernacExtend",
                        "3763a4b8db689af316a7372b722bb29806ab4fb6"
                    ]
                },
                {
                    "command": [
                        "case Ux: (x \\is a unit); first by rewrite exprSr exprS IHn -invrM // unitrX.",
                        "VernacExtend",
                        "3763a4b8db689af316a7372b722bb29806ab4fb6"
                    ]
                },
                {
                    "command": [
                        "by rewrite !invr_out ?unitrX_pos ?Ux.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "exprB",
            "line_nb": 1893,
            "steps": [
                {
                    "command": [
                        "by move/subnK=> {2}<- Ux; rewrite exprD mulrK ?unitrX.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "invr_neq0",
            "line_nb": 1896,
            "steps": [
                {
                    "command": [
                        "move=> nx0; case Ux: (x \\is a unit); last by rewrite invr_out ?Ux.",
                        "VernacExtend",
                        "3763a4b8db689af316a7372b722bb29806ab4fb6"
                    ]
                },
                {
                    "command": [
                        "by apply/eqP=> x'0; rewrite -unitrV x'0 unitr0 in Ux.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "invr_eq0",
            "line_nb": 1900,
            "steps": [
                {
                    "command": [
                        "by apply: negb_inj; apply/idP/idP; move/invr_neq0; rewrite ?invrK.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "invr_eq1",
            "line_nb": 1903,
            "steps": [
                {
                    "command": [
                        "by rewrite (inv_eq invrK) invr1.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "rev_unitrP",
            "line_nb": 1906,
            "steps": [
                {
                    "command": [
                        "by case=> [yx1 xy1]; apply/unitrP; exists y.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "divr_closedV",
            "line_nb": 1919,
            "steps": [
                {
                    "command": [
                        "by case=> S1 Sdiv x Sx; rewrite -[x^-1]mul1r Sdiv.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "divr_closedM",
            "line_nb": 1922,
            "steps": [
                {
                    "command": [
                        "by case=> S1 Sdiv; split=> // x y Sx Sy; rewrite -[y]invrK -[y^-1]mul1r !Sdiv.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "sdivr_closed_div",
            "line_nb": 1925,
            "steps": [
                {
                    "command": [
                        "by case=> SN1 Sdiv; split; rewrite // -(divrr unitrN1) Sdiv.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "sdivr_closedM",
            "line_nb": 1928,
            "steps": [
                {
                    "command": [
                        "by move=> Sdiv; have [_ SM] := divr_closedM (sdivr_closed_div Sdiv); case: Sdiv.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "divring_closedBM",
            "line_nb": 1931,
            "steps": [
                {
                    "command": [
                        "by case=> S1 SB Sdiv; split=> //; case: divr_closedM.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "divring_closed_div",
            "line_nb": 1934,
            "steps": [
                {
                    "command": [
                        "case=> S1 SB Sdiv; split; rewrite ?zmod_closedN //.",
                        "VernacExtend",
                        "7490335248ac33c0aa69698a687c1a5cbe9f554e"
                    ]
                },
                {
                    "command": [
                        "exact/subring_closedB/divring_closedBM.",
                        "VernacExtend",
                        "ce637ff86bafca5d8359473e8c02af644dcbdc43"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "rmorphV",
            "line_nb": 1948,
            "steps": [
                {
                    "command": [
                        "move=> x Ux; rewrite /= -[(f x)^-1]mul1r.",
                        "VernacExtend",
                        "057edeb0967475c7ea5e8c98c449ddc5613eddc1"
                    ]
                },
                {
                    "command": [
                        "by apply: (canRL (mulrK (rmorph_unit Ux))); rewrite -rmorphM mulVr ?rmorph1.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "rmorph_div",
            "line_nb": 1952,
            "steps": [
                {
                    "command": [
                        "by move=> Uy; rewrite rmorphM rmorphV.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "mulC_mulrV",
            "line_nb": 1961,
            "steps": [
                {
                    "command": [
                        "by move=> x Ux /=; rewrite mulrC mulVx.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "mulC_unitP",
            "line_nb": 1964,
            "steps": [
                {
                    "command": [
                        "by case=> yx _; apply: unitPl yx.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "unitrM",
            "line_nb": 2072,
            "steps": [
                {
                    "command": [
                        "by apply: unitrM_comm; apply: mulrC.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "unitrPr",
            "line_nb": 2075,
            "steps": [
                {
                    "command": [
                        "by apply: (iffP (unitrP x)) => [[y []] | [y]]; exists y; rewrite // mulrC.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "mulr1_eq",
            "line_nb": 2078,
            "steps": [
                {
                    "command": [
                        "by move=> xy_eq1; rewrite -[LHS]mulr1 -xy_eq1; apply/mulKr/unitrPr; exists y.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "divr1_eq",
            "line_nb": 2081,
            "steps": [
                {
                    "command": [
                        "by move/mulr1_eq/invr_inj.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "divKr",
            "line_nb": 2084,
            "steps": [
                {
                    "command": [
                        "by move=> Ux y Uy; rewrite /= invrM ?unitrV // invrK mulrC divrK.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "expr_div_n",
            "line_nb": 2087,
            "steps": [
                {
                    "command": [
                        "by rewrite exprMn exprVn.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "scaler_injl",
            "line_nb": 2096,
            "steps": [
                {
                    "command": [
                        "move=> k Uk x1 x2 Hx1x2.",
                        "VernacExtend",
                        "b1b2cb7a3a617cba67460b4eca1f04de3c1cc716"
                    ]
                },
                {
                    "command": [
                        "by rewrite -[x1]scale1r -(mulVr Uk) -scalerA Hx1x2 scalerA mulVr // scale1r.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "divalg_closedBdiv",
            "line_nb": 2118,
            "steps": [
                {
                    "command": [
                        "by case=> S1 /linear_closedB.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "divalg_closedZ",
            "line_nb": 2121,
            "steps": [
                {
                    "command": [
                        "by case=> S1 Slin Sdiv; split=> //; have [] := @divr_closedM A S.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "zmod_oppr",
            "line_nb": 2142,
            "steps": [
                {
                    "command": [
                        "by [].",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "semiring_mulr",
            "line_nb": 2145,
            "steps": [
                {
                    "command": [
                        "by [].",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "smul_mulr",
            "line_nb": 2148,
            "steps": [
                {
                    "command": [
                        "by [].",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "submod_scaler",
            "line_nb": 2151,
            "steps": [
                {
                    "command": [
                        "by [].",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "subring_mulr",
            "line_nb": 2154,
            "steps": [
                {
                    "command": [
                        "by [].",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "sdiv_invr",
            "line_nb": 2157,
            "steps": [
                {
                    "command": [
                        "by [].",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "subalg_scaler",
            "line_nb": 2160,
            "steps": [
                {
                    "command": [
                        "by [].",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "divring_invr",
            "line_nb": 2163,
            "steps": [
                {
                    "command": [
                        "by [].",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "divalg_scaler",
            "line_nb": 2166,
            "steps": [
                {
                    "command": [
                        "by [].",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "opp_ext",
            "line_nb": 2180,
            "steps": [
                {
                    "command": [
                        "by move=> oppS x; rewrite -!(keyed_predE kS); apply: oppS.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "add_ext",
            "line_nb": 2183,
            "steps": [
                {
                    "command": [
                        "by case=> S0 addS; split=> [|x y]; rewrite -!(keyed_predE kS) //; apply: addS.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "mul_ext",
            "line_nb": 2186,
            "steps": [
                {
                    "command": [
                        "by case=> S1 mulS; split=> [|x y]; rewrite -!(keyed_predE kS) //; apply: mulS.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "scale_ext",
            "line_nb": 2189,
            "steps": [
                {
                    "command": [
                        "by move=> linS a x; rewrite -!(keyed_predE kS); apply: linS.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "inv_ext",
            "line_nb": 2192,
            "steps": [
                {
                    "command": [
                        "by move=> invS x; rewrite -!(keyed_predE kS); apply: invS.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "rpred0D",
            "line_nb": 2328,
            "steps": [
                {
                    "command": [
                        "by split=> [|x y]; rewrite !keyed_predE; case: addS => _ [_]//; apply.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "rpred0",
            "line_nb": 2331,
            "steps": [
                {
                    "command": [
                        "by case: rpred0D.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "rpredD",
            "line_nb": 2334,
            "steps": [
                {
                    "command": [
                        "by case: rpred0D.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "rpred_sum",
            "line_nb": 2337,
            "steps": [
                {
                    "command": [
                        "by move=> IH; elim/big_ind: _; [apply: rpred0 | apply: rpredD |].",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "rpredMn",
            "line_nb": 2340,
            "steps": [
                {
                    "command": [
                        "by move=> u Su; rewrite -(card_ord n) -sumr_const rpred_sum.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "rpredNr",
            "line_nb": 2346,
            "steps": [
                {
                    "command": [
                        "by move=> x; rewrite !keyed_predE; case: oppS => _; apply.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "rpredN",
            "line_nb": 2349,
            "steps": [
                {
                    "command": [
                        "by move=> u; apply/idP/idP=> /rpredNr; rewrite ?opprK; apply.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "rpredB",
            "line_nb": 2355,
            "steps": [
                {
                    "command": [
                        "by move=> u v Su Sv; rewrite /= rpredD ?rpredN.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "rpredMNn",
            "line_nb": 2358,
            "steps": [
                {
                    "command": [
                        "by move=> u Su; rewrite /= rpredN rpredMn.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "rpredDr",
            "line_nb": 2361,
            "steps": [
                {
                    "command": [
                        "move=> Sx; apply/idP/idP=> [Sxy | /rpredD-> //].",
                        "VernacExtend",
                        "d6ebf3361f380a12d5c2c9bbb7ea363132c48b36"
                    ]
                },
                {
                    "command": [
                        "by rewrite -(addrK x y) rpredB.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "rpredDl",
            "line_nb": 2365,
            "steps": [
                {
                    "command": [
                        "by rewrite addrC; apply: rpredDr.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "rpredBr",
            "line_nb": 2368,
            "steps": [
                {
                    "command": [
                        "by rewrite -rpredN; apply: rpredDr.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "rpredBl",
            "line_nb": 2371,
            "steps": [
                {
                    "command": [
                        "by rewrite -(rpredN _ y); apply: rpredDl.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "rpredMsign",
            "line_nb": 2378,
            "steps": [
                {
                    "command": [
                        "by rewrite -signr_odd mulr_sign; case: ifP => // _; rewrite rpredN.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "rpred1M",
            "line_nb": 2383,
            "steps": [
                {
                    "command": [
                        "by split=> [|x y]; rewrite !keyed_predE; case: mulS => _ [_] //; apply.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "rpred1",
            "line_nb": 2386,
            "steps": [
                {
                    "command": [
                        "by case: rpred1M.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "rpredM",
            "line_nb": 2389,
            "steps": [
                {
                    "command": [
                        "by case: rpred1M.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "rpred_prod",
            "line_nb": 2392,
            "steps": [
                {
                    "command": [
                        "by move=> IH; elim/big_ind: _; [apply: rpred1 | apply: rpredM |].",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "rpredX",
            "line_nb": 2395,
            "steps": [
                {
                    "command": [
                        "by move=> u Su; rewrite -(card_ord n) -prodr_const rpred_prod.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "rpred_nat",
            "line_nb": 2399,
            "steps": [
                {
                    "command": [
                        "by rewrite rpredMn ?rpred1.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "rpredN1",
            "line_nb": 2402,
            "steps": [
                {
                    "command": [
                        "by rewrite rpredN rpred1.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "rpred_sign",
            "line_nb": 2405,
            "steps": [
                {
                    "command": [
                        "by rewrite rpredX ?rpredN1.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "rpredZsign",
            "line_nb": 2411,
            "steps": [
                {
                    "command": [
                        "by rewrite -signr_odd scaler_sign fun_if if_arg rpredN if_same.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "rpredZnat",
            "line_nb": 2414,
            "steps": [
                {
                    "command": [
                        "by move=> u Su; rewrite /= scaler_nat rpredMn.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "rpredZ",
            "line_nb": 2417,
            "steps": [
                {
                    "command": [
                        "by move=> a u; rewrite !keyed_predE; case: {kS}linS => _; apply.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "rpredVr",
            "line_nb": 2425,
            "steps": [
                {
                    "command": [
                        "by rewrite !keyed_predE; case: divS x.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "rpredV",
            "line_nb": 2428,
            "steps": [
                {
                    "command": [
                        "by apply/idP/idP=> /rpredVr; rewrite ?invrK.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "rpred_div",
            "line_nb": 2431,
            "steps": [
                {
                    "command": [
                        "by move=> x y Sx Sy; rewrite /= rpredM ?rpredV.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "rpredXN",
            "line_nb": 2434,
            "steps": [
                {
                    "command": [
                        "by move=> x Sx; rewrite /= rpredV rpredX.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "rpredMl",
            "line_nb": 2437,
            "steps": [
                {
                    "command": [
                        "move=> Sx Ux; apply/idP/idP=> [Sxy | /(rpredM Sx)-> //].",
                        "VernacExtend",
                        "d6ebf3361f380a12d5c2c9bbb7ea363132c48b36"
                    ]
                },
                {
                    "command": [
                        "by rewrite -(mulKr Ux y); rewrite rpredM ?rpredV.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "rpredMr",
            "line_nb": 2441,
            "steps": [
                {
                    "command": [
                        "move=> Sx Ux; apply/idP/idP=> [Sxy | /rpredM-> //].",
                        "VernacExtend",
                        "d6ebf3361f380a12d5c2c9bbb7ea363132c48b36"
                    ]
                },
                {
                    "command": [
                        "by rewrite -(mulrK Ux y); rewrite rpred_div.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "rpred_divr",
            "line_nb": 2445,
            "steps": [
                {
                    "command": [
                        "by rewrite -rpredV -unitrV; apply: rpredMr.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "rpred_divl",
            "line_nb": 2448,
            "steps": [
                {
                    "command": [
                        "by rewrite -(rpredV y); apply: rpredMl.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "unitr_sdivr_closed",
            "line_nb": 2452,
            "steps": [
                {
                    "command": [
                        "by split=> [|x y Ux Uy]; rewrite ?unitrN1 // unitrMl ?unitrV.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "unitrN",
            "line_nb": 2461,
            "steps": [
                {
                    "command": [
                        "exact: rpredN.",
                        "VernacExtend",
                        "ce637ff86bafca5d8359473e8c02af644dcbdc43"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "invrN",
            "line_nb": 2464,
            "steps": [
                {
                    "command": [
                        "have [Ux | U'x] := boolP (x \\is a unit); last by rewrite !invr_out ?unitrN.",
                        "VernacExtend",
                        "3763a4b8db689af316a7372b722bb29806ab4fb6"
                    ]
                },
                {
                    "command": [
                        "by rewrite -mulN1r invrM ?unitrN1 // invrN1 mulrN1.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "invr_signM",
            "line_nb": 2468,
            "steps": [
                {
                    "command": [
                        "by rewrite -signr_odd !mulr_sign; case: ifP => // _; rewrite invrN.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "divr_signM",
            "line_nb": 2471,
            "steps": [
                {
                    "command": [
                        "by rewrite invr_signM mulr_signM.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "eq_eval",
            "line_nb": 2530,
            "steps": [
                {
                    "command": [
                        "by move=> eq_e; elim: t => //= t1 -> // t2 ->.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "eval_tsubst",
            "line_nb": 2533,
            "steps": [
                {
                    "command": [
                        "case: s => i u; elim: t => //=; do 2?[move=> ? -> //] => j.",
                        "VernacExtend",
                        "58b3fa15c8632d89a426c1550da6d1e6e29a238b"
                    ]
                },
                {
                    "command": [
                        "by rewrite nth_set_nth /=; case: (_ == _).",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "same_env_sym",
            "line_nb": 2538,
            "steps": [
                {
                    "command": [
                        "exact: fsym.",
                        "VernacExtend",
                        "ce637ff86bafca5d8359473e8c02af644dcbdc43"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "eq_holds",
            "line_nb": 2541,
            "steps": [
                {
                    "command": [
                        "pose sv := set_nth (0 : R).",
                        "VernacExtend",
                        "3c5f04de94609049d978298aa02ff35fb35ea7c7"
                    ]
                },
                {
                    "command": [
                        "have eq_i i v e1 e2: same_env e1 e2 -> same_env (sv e1 i v) (sv e2 i v).",
                        "VernacExtend",
                        "406cde1174359c53bf162a2a18c4eede395555f9"
                    ]
                },
                {
                    "command": [
                        "by move=> eq_e j; rewrite !nth_set_nth /= eq_e.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "elim: f e e' => //=.",
                        "VernacExtend",
                        "e686a1895f1799b840b76242f931100819a9ad6c"
                    ]
                },
                {
                    "command": [
                        "-",
                        "VernacBullet",
                        "581cab4bf49fa4b495e569bbda96fc8d28fddcc0"
                    ]
                },
                {
                    "command": [
                        "by move=> t1 t2 e e' eq_e; rewrite !(eq_eval _ eq_e).",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "-",
                        "VernacBullet",
                        "581cab4bf49fa4b495e569bbda96fc8d28fddcc0"
                    ]
                },
                {
                    "command": [
                        "by move=> t e e' eq_e; rewrite (eq_eval _ eq_e).",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "-",
                        "VernacBullet",
                        "581cab4bf49fa4b495e569bbda96fc8d28fddcc0"
                    ]
                },
                {
                    "command": [
                        "by move=> f1 IH1 f2 IH2 e e' eq_e; move/IH2: (eq_e); move/IH1: eq_e; tauto.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "-",
                        "VernacBullet",
                        "581cab4bf49fa4b495e569bbda96fc8d28fddcc0"
                    ]
                },
                {
                    "command": [
                        "by move=> f1 IH1 f2 IH2 e e' eq_e; move/IH2: (eq_e); move/IH1: eq_e; tauto.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "-",
                        "VernacBullet",
                        "581cab4bf49fa4b495e569bbda96fc8d28fddcc0"
                    ]
                },
                {
                    "command": [
                        "by move=> f1 IH1 f2 IH2 e e' eq_e f12; move/IH1: (same_env_sym eq_e); eauto.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "-",
                        "VernacBullet",
                        "581cab4bf49fa4b495e569bbda96fc8d28fddcc0"
                    ]
                },
                {
                    "command": [
                        "by move=> f1 IH1 e e'; move/same_env_sym; move/IH1; tauto.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "-",
                        "VernacBullet",
                        "581cab4bf49fa4b495e569bbda96fc8d28fddcc0"
                    ]
                },
                {
                    "command": [
                        "by move=> i f1 IH1 e e'; move/(eq_i i)=> eq_e [x f_ex]; exists x; eauto.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "by move=> i f1 IH1 e e'; move/(eq_i i); eauto.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "holds_fsubst",
            "line_nb": 2562,
            "steps": [
                {
                    "command": [
                        "elim: f e => //=; do [ by move=> *; rewrite !eval_tsubst | move=> f1 IHf1 f2 IHf2 e; move: (IHf1 e) (IHf2 e); tauto | move=> f IHf e; move: (IHf e); tauto | move=> j f IHf e].",
                        "VernacExtend",
                        "76a5e31afa9f762ef77303567a3381de5e93bd22"
                    ]
                },
                {
                    "command": [
                        "-",
                        "VernacBullet",
                        "581cab4bf49fa4b495e569bbda96fc8d28fddcc0"
                    ]
                },
                {
                    "command": [
                        "case eq_ji: (j == i); first rewrite (eqP eq_ji).",
                        "VernacExtend",
                        "3763a4b8db689af316a7372b722bb29806ab4fb6"
                    ]
                },
                {
                    "command": [
                        "by split=> [] [x f_x]; exists x; rewrite set_set_nth eqxx in f_x *.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "split=> [] [x f_x]; exists x; move: f_x; rewrite set_set_nth eq_sym eq_ji; have:= IHf (set_nth 0 e j x); tauto.",
                        "VernacExtend",
                        "d18e8faf1d8f65c26a052bd90b36c8fb42bd95ea"
                    ]
                },
                {
                    "command": [
                        "case eq_ji: (j == i); first rewrite (eqP eq_ji).",
                        "VernacExtend",
                        "3763a4b8db689af316a7372b722bb29806ab4fb6"
                    ]
                },
                {
                    "command": [
                        "by split=> [] f_ x; move: (f_ x); rewrite set_set_nth eqxx.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "split=> [] f_ x; move: (IHf (set_nth 0 e j x)) (f_ x); by rewrite set_set_nth eq_sym eq_ji; tauto.",
                        "VernacExtend",
                        "d8f601ed755ccf1a2b28f741584fdd753f9fe5da"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "to_rterm_id",
            "line_nb": 2576,
            "steps": [
                {
                    "command": [
                        "elim: t r n => //.",
                        "VernacExtend",
                        "e686a1895f1799b840b76242f931100819a9ad6c"
                    ]
                },
                {
                    "command": [
                        "-",
                        "VernacBullet",
                        "581cab4bf49fa4b495e569bbda96fc8d28fddcc0"
                    ]
                },
                {
                    "command": [
                        "by move=> t1 IHt1 t2 IHt2 r n /= /andP[rt1 rt2]; rewrite {}IHt1 // IHt2.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "-",
                        "VernacBullet",
                        "581cab4bf49fa4b495e569bbda96fc8d28fddcc0"
                    ]
                },
                {
                    "command": [
                        "by move=> t IHt r n /= rt; rewrite {}IHt.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "-",
                        "VernacBullet",
                        "581cab4bf49fa4b495e569bbda96fc8d28fddcc0"
                    ]
                },
                {
                    "command": [
                        "by move=> t IHt r n m /= rt; rewrite {}IHt.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "-",
                        "VernacBullet",
                        "581cab4bf49fa4b495e569bbda96fc8d28fddcc0"
                    ]
                },
                {
                    "command": [
                        "by move=> t1 IHt1 t2 IHt2 r n /= /andP[rt1 rt2]; rewrite {}IHt1 // IHt2.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "-",
                        "VernacBullet",
                        "581cab4bf49fa4b495e569bbda96fc8d28fddcc0"
                    ]
                },
                {
                    "command": [
                        "by move=> t IHt r n m /= rt; rewrite {}IHt.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "to_rform_rformula",
            "line_nb": 2591,
            "steps": [
                {
                    "command": [
                        "suffices eq0_ring t1: rformula (eq0_rform t1) by elim: f => //= => f1 ->.",
                        "VernacExtend",
                        "290ed488b5562e885aa2cac56f3a69b4faa0eaa6"
                    ]
                },
                {
                    "command": [
                        "rewrite /eq0_rform; move: (ub_var t1) => m; set tr := _ m.",
                        "VernacExtend",
                        "f4422a5fae4db5cd3803f00530b1a05297d39743"
                    ]
                },
                {
                    "command": [
                        "suffices: all rterm (tr.1 :: tr.2).",
                        "VernacExtend",
                        "290ed488b5562e885aa2cac56f3a69b4faa0eaa6"
                    ]
                },
                {
                    "command": [
                        "case: tr => {t1} t1 r /= /andP[t1_r].",
                        "VernacExtend",
                        "e00fff71ff314c991514fc71c41a3556702e444a"
                    ]
                },
                {
                    "command": [
                        "by elim: r m => [|t r IHr] m; rewrite /= ?andbT // => /andP[->]; apply: IHr.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "have: all rterm [::] by [].",
                        "VernacExtend",
                        "406cde1174359c53bf162a2a18c4eede395555f9"
                    ]
                },
                {
                    "command": [
                        "rewrite {}/tr; elim: t1 [::] => //=.",
                        "VernacExtend",
                        "44a8e3b453c9376c468b4e3e0046f5ac33e11d6d"
                    ]
                },
                {
                    "command": [
                        "-",
                        "VernacBullet",
                        "581cab4bf49fa4b495e569bbda96fc8d28fddcc0"
                    ]
                },
                {
                    "command": [
                        "move=> t1 IHt1 t2 IHt2 r.",
                        "VernacExtend",
                        "b1b2cb7a3a617cba67460b4eca1f04de3c1cc716"
                    ]
                },
                {
                    "command": [
                        "move/IHt1; case: to_rterm => {t1 r IHt1} t1 r /= /andP[t1_r].",
                        "VernacExtend",
                        "a01b3d93f426ff68d360351709a5fa5af822af32"
                    ]
                },
                {
                    "command": [
                        "move/IHt2; case: to_rterm => {t2 r IHt2} t2 r /= /andP[t2_r].",
                        "VernacExtend",
                        "a01b3d93f426ff68d360351709a5fa5af822af32"
                    ]
                },
                {
                    "command": [
                        "by rewrite t1_r t2_r.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "-",
                        "VernacBullet",
                        "581cab4bf49fa4b495e569bbda96fc8d28fddcc0"
                    ]
                },
                {
                    "command": [
                        "by move=> t1 IHt1 r /IHt1; case: to_rterm.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "-",
                        "VernacBullet",
                        "581cab4bf49fa4b495e569bbda96fc8d28fddcc0"
                    ]
                },
                {
                    "command": [
                        "by move=> t1 IHt1 n r /IHt1; case: to_rterm.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "-",
                        "VernacBullet",
                        "581cab4bf49fa4b495e569bbda96fc8d28fddcc0"
                    ]
                },
                {
                    "command": [
                        "move=> t1 IHt1 t2 IHt2 r.",
                        "VernacExtend",
                        "b1b2cb7a3a617cba67460b4eca1f04de3c1cc716"
                    ]
                },
                {
                    "command": [
                        "move/IHt1; case: to_rterm => {t1 r IHt1} t1 r /= /andP[t1_r].",
                        "VernacExtend",
                        "a01b3d93f426ff68d360351709a5fa5af822af32"
                    ]
                },
                {
                    "command": [
                        "move/IHt2; case: to_rterm => {t2 r IHt2} t2 r /= /andP[t2_r].",
                        "VernacExtend",
                        "a01b3d93f426ff68d360351709a5fa5af822af32"
                    ]
                },
                {
                    "command": [
                        "by rewrite t1_r t2_r.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "-",
                        "VernacBullet",
                        "581cab4bf49fa4b495e569bbda96fc8d28fddcc0"
                    ]
                },
                {
                    "command": [
                        "move=> t1 IHt1 r.",
                        "VernacExtend",
                        "b1b2cb7a3a617cba67460b4eca1f04de3c1cc716"
                    ]
                },
                {
                    "command": [
                        "by move/IHt1; case: to_rterm => {t1 r IHt1} t1 r /=; rewrite all_rcons.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "-",
                        "VernacBullet",
                        "581cab4bf49fa4b495e569bbda96fc8d28fddcc0"
                    ]
                },
                {
                    "command": [
                        "by move=> t1 IHt1 n r /IHt1; case: to_rterm.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "to_rformP",
            "line_nb": 2619,
            "steps": [
                {
                    "command": [
                        "suffices{e f} equal0_equiv e t1 t2: holds e (eq0_rform (t1 - t2)) <-> (eval e t1 == eval e t2).",
                        "VernacExtend",
                        "290ed488b5562e885aa2cac56f3a69b4faa0eaa6"
                    ]
                },
                {
                    "command": [
                        "-",
                        "VernacBullet",
                        "581cab4bf49fa4b495e569bbda96fc8d28fddcc0"
                    ]
                },
                {
                    "command": [
                        "elim: f e => /=; try tauto.",
                        "VernacExtend",
                        "210b4e57b08e866e6ebe11f73854baa46f65d2a7"
                    ]
                },
                {
                    "command": [
                        "+",
                        "VernacBullet",
                        "3ddfc0515f916e562bacf863647e0107cb15aa13"
                    ]
                },
                {
                    "command": [
                        "move=> t1 t2 e.",
                        "VernacExtend",
                        "b1b2cb7a3a617cba67460b4eca1f04de3c1cc716"
                    ]
                },
                {
                    "command": [
                        "by split; [move/equal0_equiv/eqP | move/eqP/equal0_equiv].",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "+",
                        "VernacBullet",
                        "3ddfc0515f916e562bacf863647e0107cb15aa13"
                    ]
                },
                {
                    "command": [
                        "by move=> t1 e; rewrite unitrE; apply: equal0_equiv.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "+",
                        "VernacBullet",
                        "3ddfc0515f916e562bacf863647e0107cb15aa13"
                    ]
                },
                {
                    "command": [
                        "by move=> f1 IHf1 f2 IHf2 e; move: (IHf1 e) (IHf2 e); tauto.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "+",
                        "VernacBullet",
                        "3ddfc0515f916e562bacf863647e0107cb15aa13"
                    ]
                },
                {
                    "command": [
                        "by move=> f1 IHf1 f2 IHf2 e; move: (IHf1 e) (IHf2 e); tauto.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "+",
                        "VernacBullet",
                        "3ddfc0515f916e562bacf863647e0107cb15aa13"
                    ]
                },
                {
                    "command": [
                        "by move=> f1 IHf1 f2 IHf2 e; move: (IHf1 e) (IHf2 e); tauto.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "+",
                        "VernacBullet",
                        "3ddfc0515f916e562bacf863647e0107cb15aa13"
                    ]
                },
                {
                    "command": [
                        "by move=> f1 IHf1 e; move: (IHf1 e); tauto.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "+",
                        "VernacBullet",
                        "3ddfc0515f916e562bacf863647e0107cb15aa13"
                    ]
                },
                {
                    "command": [
                        "by move=> n f1 IHf1 e; split=> [] [x] /IHf1; exists x.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "+",
                        "VernacBullet",
                        "3ddfc0515f916e562bacf863647e0107cb15aa13"
                    ]
                },
                {
                    "command": [
                        "by move=> n f1 IHf1 e; split=> Hx x; apply/IHf1.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "rewrite -(add0r (eval e t2)) -(can2_eq (subrK _) (addrK _)).",
                        "VernacExtend",
                        "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
                    ]
                },
                {
                    "command": [
                        "rewrite -/(eval e (t1 - t2)); move: (t1 - t2)%T => {t1 t2} t.",
                        "VernacExtend",
                        "7e529e80bb2879787ee6d9466056f19f0215c721"
                    ]
                },
                {
                    "command": [
                        "have sub_var_tsubst s t0: s.1 >= ub_var t0 -> tsubst t0 s = t0.",
                        "VernacExtend",
                        "406cde1174359c53bf162a2a18c4eede395555f9"
                    ]
                },
                {
                    "command": [
                        "elim: t0 {t} => //=.",
                        "VernacExtend",
                        "e686a1895f1799b840b76242f931100819a9ad6c"
                    ]
                },
                {
                    "command": [
                        "-",
                        "VernacBullet",
                        "581cab4bf49fa4b495e569bbda96fc8d28fddcc0"
                    ]
                },
                {
                    "command": [
                        "by move=> n; case: ltngtP.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "-",
                        "VernacBullet",
                        "581cab4bf49fa4b495e569bbda96fc8d28fddcc0"
                    ]
                },
                {
                    "command": [
                        "by move=> t1 IHt1 t2 IHt2; rewrite geq_max => /andP[/IHt1-> /IHt2->].",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "-",
                        "VernacBullet",
                        "581cab4bf49fa4b495e569bbda96fc8d28fddcc0"
                    ]
                },
                {
                    "command": [
                        "by move=> t1 IHt1 /IHt1->.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "-",
                        "VernacBullet",
                        "581cab4bf49fa4b495e569bbda96fc8d28fddcc0"
                    ]
                },
                {
                    "command": [
                        "by move=> t1 IHt1 n /IHt1->.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "-",
                        "VernacBullet",
                        "581cab4bf49fa4b495e569bbda96fc8d28fddcc0"
                    ]
                },
                {
                    "command": [
                        "by move=> t1 IHt1 t2 IHt2; rewrite geq_max => /andP[/IHt1-> /IHt2->].",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "-",
                        "VernacBullet",
                        "581cab4bf49fa4b495e569bbda96fc8d28fddcc0"
                    ]
                },
                {
                    "command": [
                        "by move=> t1 IHt1 /IHt1->.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "-",
                        "VernacBullet",
                        "581cab4bf49fa4b495e569bbda96fc8d28fddcc0"
                    ]
                },
                {
                    "command": [
                        "by move=> t1 IHt1 n /IHt1->.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "pose fix rsub t' m r : term R := if r is u :: r' then tsubst (rsub t' m.+1 r') (m, u^-1)%T else t'.",
                        "VernacExtend",
                        "be59184aeceac70e4255bd58cff677d981339a6d"
                    ]
                },
                {
                    "command": [
                        "pose fix ub_sub m r : Prop := if r is u :: r' then ub_var u <= m /\\ ub_sub m.+1 r' else true.",
                        "VernacExtend",
                        "be59184aeceac70e4255bd58cff677d981339a6d"
                    ]
                },
                {
                    "command": [
                        "suffices{t} rsub_to_r t r0 m: m >= ub_var t -> ub_sub m r0 -> let: (t', r) := to_rterm t r0 m in [/\\ take (size r0) r = r0, ub_var t' <= m + size r, ub_sub m r & rsub t' m r = t].",
                        "VernacExtend",
                        "290ed488b5562e885aa2cac56f3a69b4faa0eaa6"
                    ]
                },
                {
                    "command": [
                        "-",
                        "VernacBullet",
                        "581cab4bf49fa4b495e569bbda96fc8d28fddcc0"
                    ]
                },
                {
                    "command": [
                        "have:= rsub_to_r t [::] _ (leqnn _); rewrite /eq0_rform.",
                        "VernacExtend",
                        "aa9d5fbc682ed874cd64b2543ca6c859b978e924"
                    ]
                },
                {
                    "command": [
                        "case: (to_rterm _ _ _) => [t1' r1] [//|_ _ ub_r1 def_t].",
                        "VernacExtend",
                        "e00fff71ff314c991514fc71c41a3556702e444a"
                    ]
                },
                {
                    "command": [
                        "rewrite -{2}def_t {def_t}.",
                        "VernacExtend",
                        "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
                    ]
                },
                {
                    "command": [
                        "elim: r1 (ub_var t) e ub_r1 => [|u r1 IHr1] m e /= => [_|[ub_u ub_r1]].",
                        "VernacExtend",
                        "3c42b53d0efc26db114b00541ac5e7fcb29e6aeb"
                    ]
                },
                {
                    "command": [
                        "by split=> /eqP.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "rewrite eval_tsubst /=; set y := eval e u; split=> t_eq0.",
                        "VernacExtend",
                        "ee6f95d9a37eb9fd26e9c84c7cb80dd1aaecc234"
                    ]
                },
                {
                    "command": [
                        "apply/IHr1=> //; apply: t_eq0.",
                        "VernacExtend",
                        "8d9dae45eeb3a769b8a865cef8ae476451f63802"
                    ]
                },
                {
                    "command": [
                        "rewrite nth_set_nth /= eqxx -(eval_tsubst e u (m, Const _)).",
                        "VernacExtend",
                        "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
                    ]
                },
                {
                    "command": [
                        "rewrite sub_var_tsubst //= -/y.",
                        "VernacExtend",
                        "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
                    ]
                },
                {
                    "command": [
                        "case Uy: (y \\in unit); [left | right]; first by rewrite mulVr ?divrr.",
                        "VernacExtend",
                        "3763a4b8db689af316a7372b722bb29806ab4fb6"
                    ]
                },
                {
                    "command": [
                        "split=> [|[z]]; first by rewrite invr_out ?Uy.",
                        "VernacExtend",
                        "3763a4b8db689af316a7372b722bb29806ab4fb6"
                    ]
                },
                {
                    "command": [
                        "rewrite nth_set_nth /= eqxx.",
                        "VernacExtend",
                        "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
                    ]
                },
                {
                    "command": [
                        "rewrite -!(eval_tsubst _ _ (m, Const _)) !sub_var_tsubst // -/y => yz1.",
                        "VernacExtend",
                        "3c42b53d0efc26db114b00541ac5e7fcb29e6aeb"
                    ]
                },
                {
                    "command": [
                        "by case/unitrP: Uy; exists z.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "move=> x def_x; apply/IHr1=> //; suff ->: x = y^-1 by []; move: def_x.",
                        "VernacExtend",
                        "ae1a6a008712375aefce714d9892cdefed48b699"
                    ]
                },
                {
                    "command": [
                        "rewrite nth_set_nth /= eqxx -(eval_tsubst e u (m, Const _)).",
                        "VernacExtend",
                        "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
                    ]
                },
                {
                    "command": [
                        "rewrite sub_var_tsubst //= -/y; case=> [[xy1 yx1] | [xy nUy]].",
                        "VernacExtend",
                        "712d339e99ee17eb7d5033e19ac614eb3ca6b532"
                    ]
                },
                {
                    "command": [
                        "by rewrite -[y^-1]mul1r -[1]xy1 mulrK //; apply/unitrP; exists x.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "rewrite invr_out //; apply/unitrP=> [[z yz1]]; case: nUy; exists z.",
                        "VernacExtend",
                        "a78af2519cb019339623f53f247125048cee4872"
                    ]
                },
                {
                    "command": [
                        "rewrite nth_set_nth /= eqxx -!(eval_tsubst _ _ (m, _%:T)%T).",
                        "VernacExtend",
                        "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
                    ]
                },
                {
                    "command": [
                        "by rewrite !sub_var_tsubst.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "have rsub_id r t0 n: ub_var t0 <= n -> rsub t0 n r = t0.",
                        "VernacExtend",
                        "406cde1174359c53bf162a2a18c4eede395555f9"
                    ]
                },
                {
                    "command": [
                        "by elim: r n => //= t1 r IHr n let0n; rewrite IHr ?sub_var_tsubst ?leqW.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "have rsub_acc r s t1 m1: ub_var t1 <= m1 + size r -> rsub t1 m1 (r ++ s) = rsub t1 m1 r.",
                        "VernacExtend",
                        "406cde1174359c53bf162a2a18c4eede395555f9"
                    ]
                },
                {
                    "command": [
                        "elim: r t1 m1 => [|t1 r IHr] t2 m1 /=; first by rewrite addn0; apply: rsub_id.",
                        "VernacExtend",
                        "3763a4b8db689af316a7372b722bb29806ab4fb6"
                    ]
                },
                {
                    "command": [
                        "by move=> letmr; rewrite IHr ?addSnnS.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "elim: t r0 m => /=; try do [ by move=> n r m hlt hub; rewrite take_size (ltn_addr _ hlt) rsub_id | by move=> n r m hlt hub; rewrite leq0n take_size rsub_id | move=> t1 IHt1 t2 IHt2 r m; rewrite geq_max; case/andP=> hub1 hub2 hmr; case: to_rterm {IHt1 hub1 hmr}(IHt1 r m hub1 hmr) => t1' r1; case=> htake1 hub1' hsub1 <-; case: to_rterm {IHt2 hub2 hsub1}(IHt2 r1 m hub2 hsub1) => t2' r2 /=; rewrite geq_max; case=> htake2 -> hsub2 /= <-; rewrite -{1 2}(cat_take_drop (size r1) r2) htake2; set r3 := drop _ _; rewrite size_cat addnA (leq_trans _ (leq_addr _ _)) //; split=> {hsub2}//; first by [rewrite takel_cat // -htake1 size_take geq_min leqnn orbT]; rewrite -(rsub_acc r1 r3 t1') {hub1'}// -{htake1}htake2 {r3}cat_take_drop; by elim: r2 m => //= u r2 IHr2 m; rewrite IHr2 | do [ move=> t1 IHt1 r m; do 2!move/IHt1=> {IHt1}IHt1 | move=> t1 IHt1 n r m; do 2!move/IHt1=> {IHt1}IHt1]; case: to_rterm IHt1 => t1' r1 [-> -> hsub1 <-]; split=> {hsub1}//; by elim: r1 m => //= u r1 IHr1 m; rewrite IHr1].",
                        "VernacExtend",
                        "509985c8c44ec3c027510075d3834b5f1b7c7de7"
                    ]
                },
                {
                    "command": [
                        "move=> t1 IH r m letm /IH {IH} /(_ letm) {letm}.",
                        "VernacExtend",
                        "b1b2cb7a3a617cba67460b4eca1f04de3c1cc716"
                    ]
                },
                {
                    "command": [
                        "case: to_rterm => t1' r1 /= [def_r ub_t1' ub_r1 <-].",
                        "VernacExtend",
                        "e00fff71ff314c991514fc71c41a3556702e444a"
                    ]
                },
                {
                    "command": [
                        "rewrite size_rcons addnS leqnn -{1}cats1 takel_cat ?def_r; last first.",
                        "VernacExtend",
                        "3763a4b8db689af316a7372b722bb29806ab4fb6"
                    ]
                },
                {
                    "command": [
                        "by rewrite -def_r size_take geq_min leqnn orbT.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "elim: r1 m ub_r1 ub_t1' {def_r} => /= [|u r1 IHr1] m => [_|[->]].",
                        "VernacExtend",
                        "3c42b53d0efc26db114b00541ac5e7fcb29e6aeb"
                    ]
                },
                {
                    "command": [
                        "by rewrite addn0 eqxx.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "by rewrite -addSnnS => /IHr1 IH /IH[_ _ ub_r1 ->].",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "qf_evalP",
            "line_nb": 2699,
            "steps": [
                {
                    "command": [
                        "elim: f => //=; try by move=> *; apply: idP.",
                        "VernacExtend",
                        "4f3ff96ca2d1111d66bee768f7796420a56e669b"
                    ]
                },
                {
                    "command": [
                        "-",
                        "VernacBullet",
                        "581cab4bf49fa4b495e569bbda96fc8d28fddcc0"
                    ]
                },
                {
                    "command": [
                        "by move=> t1 t2 _; apply: eqP.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "-",
                        "VernacBullet",
                        "581cab4bf49fa4b495e569bbda96fc8d28fddcc0"
                    ]
                },
                {
                    "command": [
                        "move=> f1 IHf1 f2 IHf2 /= /andP[/IHf1[] f1T]; last by right; case.",
                        "VernacExtend",
                        "3763a4b8db689af316a7372b722bb29806ab4fb6"
                    ]
                },
                {
                    "command": [
                        "by case/IHf2; [left | right; case].",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "-",
                        "VernacBullet",
                        "581cab4bf49fa4b495e569bbda96fc8d28fddcc0"
                    ]
                },
                {
                    "command": [
                        "move=> f1 IHf1 f2 IHf2 /= /andP[/IHf1[] f1F]; first by do 2 left.",
                        "VernacExtend",
                        "3763a4b8db689af316a7372b722bb29806ab4fb6"
                    ]
                },
                {
                    "command": [
                        "by case/IHf2; [left; right | right; case].",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "-",
                        "VernacBullet",
                        "581cab4bf49fa4b495e569bbda96fc8d28fddcc0"
                    ]
                },
                {
                    "command": [
                        "move=> f1 IHf1 f2 IHf2 /= /andP[/IHf1[] f1T]; last by left.",
                        "VernacExtend",
                        "3763a4b8db689af316a7372b722bb29806ab4fb6"
                    ]
                },
                {
                    "command": [
                        "by case/IHf2; [left | right; move/(_ f1T)].",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "by move=> f1 IHf1 /IHf1[]; [right | left].",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "cat_dnfP",
            "line_nb": 2718,
            "steps": [
                {
                    "command": [
                        "by elim: bcs1 => //= bc1 bcs1 IH1; rewrite -orbA; congr orb; rewrite IH1.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "qf_to_dnfP",
            "line_nb": 2732,
            "steps": [
                {
                    "command": [
                        "move=> qev; have qevT f: qev f true = ~~ qev f false.",
                        "VernacExtend",
                        "ccd83c252dcbae3d56f3d057fcb8217878b51901"
                    ]
                },
                {
                    "command": [
                        "rewrite {}/qev; elim: f => //=; do [by case | move=> f1 IH1 f2 IH2 | ].",
                        "VernacExtend",
                        "1536c2f2a562f0eddab39fc5d78c2812ad3afe48"
                    ]
                },
                {
                    "command": [
                        "-",
                        "VernacBullet",
                        "581cab4bf49fa4b495e569bbda96fc8d28fddcc0"
                    ]
                },
                {
                    "command": [
                        "by move=> t1 t2; rewrite !andbT !orbF.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "-",
                        "VernacBullet",
                        "581cab4bf49fa4b495e569bbda96fc8d28fddcc0"
                    ]
                },
                {
                    "command": [
                        "by rewrite and_dnfP cat_dnfP negb_and -IH1 -IH2.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "-",
                        "VernacBullet",
                        "581cab4bf49fa4b495e569bbda96fc8d28fddcc0"
                    ]
                },
                {
                    "command": [
                        "by rewrite and_dnfP cat_dnfP negb_or -IH1 -IH2.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "-",
                        "VernacBullet",
                        "581cab4bf49fa4b495e569bbda96fc8d28fddcc0"
                    ]
                },
                {
                    "command": [
                        "by rewrite and_dnfP cat_dnfP /= negb_or IH1 -IH2 negbK.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "by move=> t1 ->; rewrite negbK.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "rewrite /qev; elim=> //=; first by case.",
                        "VernacExtend",
                        "3763a4b8db689af316a7372b722bb29806ab4fb6"
                    ]
                },
                {
                    "command": [
                        "-",
                        "VernacBullet",
                        "581cab4bf49fa4b495e569bbda96fc8d28fddcc0"
                    ]
                },
                {
                    "command": [
                        "by move=> t1 t2 _; rewrite subr_eq0 !andbT orbF.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "-",
                        "VernacBullet",
                        "581cab4bf49fa4b495e569bbda96fc8d28fddcc0"
                    ]
                },
                {
                    "command": [
                        "move=> f1 IH1 f2 IH2; rewrite andbCA -andbA andbCA andbA; case/andP.",
                        "VernacExtend",
                        "d7214ac8fd48f4d1cd143edd9d16f6d28386a302"
                    ]
                },
                {
                    "command": [
                        "by rewrite and_dnfP /= => /IH1-> /IH2->.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "-",
                        "VernacBullet",
                        "581cab4bf49fa4b495e569bbda96fc8d28fddcc0"
                    ]
                },
                {
                    "command": [
                        "move=> f1 IH1 f2 IH2; rewrite andbCA -andbA andbCA andbA; case/andP.",
                        "VernacExtend",
                        "d7214ac8fd48f4d1cd143edd9d16f6d28386a302"
                    ]
                },
                {
                    "command": [
                        "by rewrite cat_dnfP /= => /IH1-> => /IH2->.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "-",
                        "VernacBullet",
                        "581cab4bf49fa4b495e569bbda96fc8d28fddcc0"
                    ]
                },
                {
                    "command": [
                        "move=> f1 IH1 f2 IH2; rewrite andbCA -andbA andbCA andbA; case/andP.",
                        "VernacExtend",
                        "d7214ac8fd48f4d1cd143edd9d16f6d28386a302"
                    ]
                },
                {
                    "command": [
                        "by rewrite cat_dnfP /= [qf_eval _ _]qevT -implybE => /IH1 <- /IH2->.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "by move=> f1 IH1 /IH1 <-; rewrite -qevT.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "dnf_to_form_qf",
            "line_nb": 2758,
            "steps": [
                {
                    "command": [
                        "by elim: bcs => //= [[clT clF] _ ->] /=; elim: clT => //=; elim: clF.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "qf_to_dnf_rterm",
            "line_nb": 2762,
            "steps": [
                {
                    "command": [
                        "set ok := all dnf_rterm.",
                        "VernacExtend",
                        "69a61e99b234580f7b41fa5b9655c87ba9a76f70"
                    ]
                },
                {
                    "command": [
                        "have cat_ok bcs1 bcs2: ok bcs1 -> ok bcs2 -> ok (bcs1 ++ bcs2).",
                        "VernacExtend",
                        "406cde1174359c53bf162a2a18c4eede395555f9"
                    ]
                },
                {
                    "command": [
                        "by move=> ok1 ok2; rewrite [ok _]all_cat; apply/andP.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "have and_ok bcs1 bcs2: ok bcs1 -> ok bcs2 -> ok (and_dnf bcs1 bcs2).",
                        "VernacExtend",
                        "406cde1174359c53bf162a2a18c4eede395555f9"
                    ]
                },
                {
                    "command": [
                        "rewrite /and_dnf unlock; elim: bcs1 => //= cl1 bcs1 IH1; rewrite -andbA.",
                        "VernacExtend",
                        "c376f01ebc4f30ac37ca603296f6548f23fe4a48"
                    ]
                },
                {
                    "command": [
                        "case/and3P=> ok11 ok12 ok1 ok2; rewrite cat_ok ?{}IH1 {bcs1 ok1}//.",
                        "VernacExtend",
                        "90a2acb29b7a5304b0ab6ba5269c420638ddef63"
                    ]
                },
                {
                    "command": [
                        "elim: bcs2 ok2 => //= cl2 bcs2 IH2 /andP[ok2 /IH2->].",
                        "VernacExtend",
                        "e686a1895f1799b840b76242f931100819a9ad6c"
                    ]
                },
                {
                    "command": [
                        "by rewrite /dnf_rterm !all_cat ok11 ok12 /= !andbT.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "elim: f b => //=; [ by do 2!case | | | | | by auto | | ]; try by repeat case/andP || intro; case: ifP; auto.",
                        "VernacExtend",
                        "1095d4c376d9dcbe0cb6e4e509fdfa8879374edb"
                    ]
                },
                {
                    "command": [
                        "by rewrite /dnf_rterm => ?? [] /= ->.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "If_form_qf",
            "line_nb": 2781,
            "steps": [
                {
                    "command": [
                        "by move=> /= -> -> ->.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "If_form_rf",
            "line_nb": 2784,
            "steps": [
                {
                    "command": [
                        "by move=> /= -> -> ->.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "eval_If",
            "line_nb": 2787,
            "steps": [
                {
                    "command": [
                        "by rewrite /=; case: ifP => _; rewrite ?orbF.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "Pick_form_qf",
            "line_nb": 2794,
            "steps": [
                {
                    "command": [
                        "move=> qfp qft qfe; have mA := (big_morph qf_form) true andb.",
                        "VernacExtend",
                        "ccd83c252dcbae3d56f3d057fcb8217878b51901"
                    ]
                },
                {
                    "command": [
                        "rewrite mA // big1 //= => p _.",
                        "VernacExtend",
                        "3c42b53d0efc26db114b00541ac5e7fcb29e6aeb"
                    ]
                },
                {
                    "command": [
                        "rewrite mA // big1 => [|i _]; first by case: pick.",
                        "VernacExtend",
                        "3763a4b8db689af316a7372b722bb29806ab4fb6"
                    ]
                },
                {
                    "command": [
                        "by rewrite fun_if if_same /= qfp.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "eval_Pick",
            "line_nb": 2800,
            "steps": [
                {
                    "command": [
                        "move=> P; rewrite ((big_morph qev) false orb) //= big_orE /=.",
                        "VernacExtend",
                        "057edeb0967475c7ea5e8c98c449ddc5613eddc1"
                    ]
                },
                {
                    "command": [
                        "apply/existsP/idP=> [[p] | true_at_P].",
                        "VernacExtend",
                        "4bd6fa79b17bcd2bfb7af091fb325367a20385d6"
                    ]
                },
                {
                    "command": [
                        "rewrite ((big_morph qev) true andb) //= big_andE /=.",
                        "VernacExtend",
                        "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
                    ]
                },
                {
                    "command": [
                        "case/andP=> /forallP-eq_p_P.",
                        "VernacExtend",
                        "e00fff71ff314c991514fc71c41a3556702e444a"
                    ]
                },
                {
                    "command": [
                        "rewrite (@eq_pick _ _ P) => [|i]; first by case: pick.",
                        "VernacExtend",
                        "3763a4b8db689af316a7372b722bb29806ab4fb6"
                    ]
                },
                {
                    "command": [
                        "by move/(_ i): eq_p_P => /=; case: (p i) => //=; move/negbTE.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "exists [ffun i => P i] => /=; apply/andP; split.",
                        "VernacExtend",
                        "b209b2632cb5dcb4781b24e07e884eee39f5fc33"
                    ]
                },
                {
                    "command": [
                        "rewrite ((big_morph qev) true andb) //= big_andE /=.",
                        "VernacExtend",
                        "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
                    ]
                },
                {
                    "command": [
                        "by apply/forallP=> i; rewrite /= ffunE; case Pi: (P i) => //=; apply: negbT.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "rewrite (@eq_pick _ _ P) => [|i]; first by case: pick true_at_P.",
                        "VernacExtend",
                        "3763a4b8db689af316a7372b722bb29806ab4fb6"
                    ]
                },
                {
                    "command": [
                        "by rewrite ffunE.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "foldExistsP",
            "line_nb": 2817,
            "steps": [
                {
                    "command": [
                        "elim: I e => /= [|i I IHi] e.",
                        "VernacExtend",
                        "e686a1895f1799b840b76242f931100819a9ad6c"
                    ]
                },
                {
                    "command": [
                        "by split=> [[e' eq_e] |]; [apply: eq_holds => i; rewrite eq_e | exists e].",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "split=> [[e' eq_e f_e'] | [x]]; last set e_x := set_nth 0 e i x.",
                        "VernacExtend",
                        "3763a4b8db689af316a7372b722bb29806ab4fb6"
                    ]
                },
                {
                    "command": [
                        "exists e'`_i; apply/IHi; exists e' => // j.",
                        "VernacExtend",
                        "6a12a8ac9ae3f7ce7501cee63888aaf88066d8b3"
                    ]
                },
                {
                    "command": [
                        "by have:= eq_e j; rewrite nth_set_nth /= !inE; case: eqP => // ->.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "case/IHi=> e' eq_e f_e'; exists e' => // j.",
                        "VernacExtend",
                        "ba44c9d0281a02110ce54645304e6d990debd9c0"
                    ]
                },
                {
                    "command": [
                        "by have:= eq_e j; rewrite nth_set_nth /= !inE; case: eqP.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "foldForallP",
            "line_nb": 2826,
            "steps": [
                {
                    "command": [
                        "elim: I e => /= [|i I IHi] e.",
                        "VernacExtend",
                        "e686a1895f1799b840b76242f931100819a9ad6c"
                    ]
                },
                {
                    "command": [
                        "by split=> [|f_e e' eq_e]; [apply | apply: eq_holds f_e => i; rewrite eq_e].",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "split=> [f_e' x | f_e e' eq_e]; first set e_x := set_nth 0 e i x.",
                        "VernacExtend",
                        "3763a4b8db689af316a7372b722bb29806ab4fb6"
                    ]
                },
                {
                    "command": [
                        "apply/IHi=> e' eq_e; apply: f_e' => j.",
                        "VernacExtend",
                        "8d9dae45eeb3a769b8a865cef8ae476451f63802"
                    ]
                },
                {
                    "command": [
                        "by have:= eq_e j; rewrite nth_set_nth /= !inE; case: eqP.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "move/IHi: (f_e e'`_i); apply=> j.",
                        "VernacExtend",
                        "d6ebf3361f380a12d5c2c9bbb7ea363132c48b36"
                    ]
                },
                {
                    "command": [
                        "by have:= eq_e j; rewrite nth_set_nth /= !inE; case: eqP => // ->.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "prodf_seq_eq0",
            "line_nb": 2900,
            "steps": [
                {
                    "command": [
                        "by rewrite (big_morph _ mulf_eq0 (oner_eq0 _)) big_has_cond.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "mulf_neq0",
            "line_nb": 2903,
            "steps": [
                {
                    "command": [
                        "by move=> x0 y0; rewrite mulf_eq0; apply/norP.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "prodf_neq0",
            "line_nb": 2906,
            "steps": [
                {
                    "command": [
                        "by rewrite (sameP (prodf_eq0 _ _) exists_inP) negb_exists_in; apply: forall_inP.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "prodf_seq_neq0",
            "line_nb": 2909,
            "steps": [
                {
                    "command": [
                        "rewrite prodf_seq_eq0 -all_predC; apply: eq_all => i /=.",
                        "VernacExtend",
                        "634a7639ed2fb7caf62757f84400927f5829b7d5"
                    ]
                },
                {
                    "command": [
                        "by rewrite implybE negb_and.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "expf_eq0",
            "line_nb": 2913,
            "steps": [
                {
                    "command": [
                        "elim: n => [|n IHn]; first by rewrite oner_eq0.",
                        "VernacExtend",
                        "3763a4b8db689af316a7372b722bb29806ab4fb6"
                    ]
                },
                {
                    "command": [
                        "by rewrite exprS mulf_eq0 IHn andKb.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "sqrf_eq0",
            "line_nb": 2917,
            "steps": [
                {
                    "command": [
                        "exact: expf_eq0.",
                        "VernacExtend",
                        "ce637ff86bafca5d8359473e8c02af644dcbdc43"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "expf_neq0",
            "line_nb": 2920,
            "steps": [
                {
                    "command": [
                        "by move=> x_nz; rewrite expf_eq0; apply/nandP; right.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "natf_neq0",
            "line_nb": 2923,
            "steps": [
                {
                    "command": [
                        "have [-> | /prod_prime_decomp->] := posnP n; first by rewrite eqxx.",
                        "VernacExtend",
                        "3763a4b8db689af316a7372b722bb29806ab4fb6"
                    ]
                },
                {
                    "command": [
                        "rewrite !big_seq; elim/big_rec: _ => [|[p e] s /=]; first by rewrite oner_eq0.",
                        "VernacExtend",
                        "3763a4b8db689af316a7372b722bb29806ab4fb6"
                    ]
                },
                {
                    "command": [
                        "case/mem_prime_decomp=> p_pr _ _; rewrite pnat_mul pnat_exp eqn0Ngt orbC => <-.",
                        "VernacExtend",
                        "ba44c9d0281a02110ce54645304e6d990debd9c0"
                    ]
                },
                {
                    "command": [
                        "by rewrite natrM natrX mulf_eq0 expf_eq0 negb_or negb_and pnatE ?inE p_pr.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "natf0_char",
            "line_nb": 2929,
            "steps": [
                {
                    "command": [
                        "move=> n_gt0 nR_0; exists (pdiv n`_[char R]).",
                        "VernacExtend",
                        "78e7d67d2ccb2fdb59a93a81ae29eade30f3f99f"
                    ]
                },
                {
                    "command": [
                        "apply: pnatP (pdiv_dvd _); rewrite ?part_pnat // ?pdiv_prime //.",
                        "VernacExtend",
                        "56c014161b39aecfb3c54301c2409dba4e8e1857"
                    ]
                },
                {
                    "command": [
                        "by rewrite ltn_neqAle eq_sym partn_eq1 // -natf_neq0 nR_0 /=.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "charf0P",
            "line_nb": 2942,
            "steps": [
                {
                    "command": [
                        "split=> charF0 n; last by rewrite !inE charF0 andbC; case: eqP => // ->.",
                        "VernacExtend",
                        "3763a4b8db689af316a7372b722bb29806ab4fb6"
                    ]
                },
                {
                    "command": [
                        "have [-> | n_gt0] := posnP; first exact: eqxx.",
                        "VernacExtend",
                        "3763a4b8db689af316a7372b722bb29806ab4fb6"
                    ]
                },
                {
                    "command": [
                        "by apply/negP; case/natf0_char=> // p; rewrite charF0.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "eqf_sqr",
            "line_nb": 2947,
            "steps": [
                {
                    "command": [
                        "by rewrite -subr_eq0 subr_sqr mulf_eq0 subr_eq0 addr_eq0.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "mulfI",
            "line_nb": 2950,
            "steps": [
                {
                    "command": [
                        "move=> nz_x y z; apply: contra_eq => neq_yz.",
                        "VernacExtend",
                        "d6ebf3361f380a12d5c2c9bbb7ea363132c48b36"
                    ]
                },
                {
                    "command": [
                        "by rewrite -subr_eq0 -mulrBr mulf_neq0 ?subr_eq0.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "mulIf",
            "line_nb": 2954,
            "steps": [
                {
                    "command": [
                        "by move=> nz_x y z; rewrite -!(mulrC x); apply: mulfI.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "divfI",
            "line_nb": 2957,
            "steps": [
                {
                    "command": [
                        "by move/mulfI/inj_comp; apply; apply: invr_inj.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "divIf",
            "line_nb": 2960,
            "steps": [
                {
                    "command": [
                        "by rewrite -invr_eq0; apply: mulIf.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "sqrf_eq1",
            "line_nb": 2963,
            "steps": [
                {
                    "command": [
                        "by rewrite -subr_eq0 subr_sqr_1 mulf_eq0 subr_eq0 addr_eq0.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "expfS_eq1",
            "line_nb": 2966,
            "steps": [
                {
                    "command": [
                        "by rewrite -![_ == 1]subr_eq0 subrX1 mulf_eq0.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "lregP",
            "line_nb": 2969,
            "steps": [
                {
                    "command": [
                        "by apply: (iffP idP) => [/mulfI | /lreg_neq0].",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "rregP",
            "line_nb": 2972,
            "steps": [
                {
                    "command": [
                        "by apply: (iffP idP) => [/mulIf | /rreg_neq0].",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "IdomainMixin",
            "line_nb": 2981,
            "steps": [
                {
                    "command": [
                        "move=> m x y xy0; apply/norP=> [[]] /m Ux /m.",
                        "VernacExtend",
                        "d6ebf3361f380a12d5c2c9bbb7ea363132c48b36"
                    ]
                },
                {
                    "command": [
                        "by rewrite -(unitrMr _ Ux) xy0 unitr0.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "intro_unit",
            "line_nb": 2989,
            "steps": [
                {
                    "command": [
                        "by move=> yx1; apply: contraNneq (oner_neq0 R) => x0; rewrite -yx1 x0 mulr0.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "inv_out",
            "line_nb": 2992,
            "steps": [
                {
                    "command": [
                        "by move=> x /negbNE/eqP->.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "Mixin",
            "line_nb": 2998,
            "steps": [
                {
                    "command": [
                        "by [].",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "fieldP",
            "line_nb": 3058,
            "steps": [
                {
                    "command": [
                        "by case: F => T [].",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "unitfE",
            "line_nb": 3061,
            "steps": [
                {
                    "command": [
                        "by apply/idP/idP=> [/(memPn _)-> | /fieldP]; rewrite ?unitr0.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "mulVf",
            "line_nb": 3064,
            "steps": [
                {
                    "command": [
                        "by rewrite -unitfE; apply: mulVr.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "divff",
            "line_nb": 3067,
            "steps": [
                {
                    "command": [
                        "by rewrite -unitfE; apply: divrr.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "mulKf",
            "line_nb": 3071,
            "steps": [
                {
                    "command": [
                        "by rewrite -unitfE; apply: mulKr.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "mulVKf",
            "line_nb": 3074,
            "steps": [
                {
                    "command": [
                        "by rewrite -unitfE; apply: mulVKr.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "mulfK",
            "line_nb": 3077,
            "steps": [
                {
                    "command": [
                        "by rewrite -unitfE; apply: mulrK.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "mulfVK",
            "line_nb": 3080,
            "steps": [
                {
                    "command": [
                        "by rewrite -unitfE; apply: divrK.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "invfM",
            "line_nb": 3084,
            "steps": [
                {
                    "command": [
                        "move=> x y; case: (eqVneq x 0) => [-> |nzx]; first by rewrite !(mul0r, invr0).",
                        "VernacExtend",
                        "3763a4b8db689af316a7372b722bb29806ab4fb6"
                    ]
                },
                {
                    "command": [
                        "case: (eqVneq y 0) => [-> |nzy]; first by rewrite !(mulr0, invr0).",
                        "VernacExtend",
                        "3763a4b8db689af316a7372b722bb29806ab4fb6"
                    ]
                },
                {
                    "command": [
                        "by rewrite mulrC invrM ?unitfE.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "invf_div",
            "line_nb": 3089,
            "steps": [
                {
                    "command": [
                        "by rewrite invfM invrK mulrC.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "divKf",
            "line_nb": 3092,
            "steps": [
                {
                    "command": [
                        "by move=> nz_x y; rewrite invf_div mulrC divfK.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "expfB_cond",
            "line_nb": 3095,
            "steps": [
                {
                    "command": [
                        "move/subnK=> <-; rewrite addnA addnK !exprD.",
                        "VernacExtend",
                        "057edeb0967475c7ea5e8c98c449ddc5613eddc1"
                    ]
                },
                {
                    "command": [
                        "have [-> | nz_x] := altP eqP; first by rewrite !mulr0 !mul0r.",
                        "VernacExtend",
                        "3763a4b8db689af316a7372b722bb29806ab4fb6"
                    ]
                },
                {
                    "command": [
                        "by rewrite mulfK ?expf_neq0.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "expfB",
            "line_nb": 3100,
            "steps": [
                {
                    "command": [
                        "by move=> lt_n_m; apply: expfB_cond; case: eqP => // _; apply: ltnW.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "prodfV",
            "line_nb": 3103,
            "steps": [
                {
                    "command": [
                        "by rewrite (big_morph _ invfM (invr1 F)).",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "prodf_div",
            "line_nb": 3106,
            "steps": [
                {
                    "command": [
                        "by rewrite big_split prodfV.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "telescope_prodf",
            "line_nb": 3109,
            "steps": [
                {
                    "command": [
                        "move=> nz_f ltnm; apply: invr_inj; rewrite prodf_div !invf_div -prodf_div.",
                        "VernacExtend",
                        "f7feb259d6220ca40e8a86b90bd06f137aa140ac"
                    ]
                },
                {
                    "command": [
                        "by apply: telescope_prodr => // k /nz_f; rewrite unitfE.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "addf_div",
            "line_nb": 3113,
            "steps": [
                {
                    "command": [
                        "by move=> nzy1 nzy2; rewrite invfM mulrDl !mulrA mulrAC !mulfK.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "mulf_div",
            "line_nb": 3116,
            "steps": [
                {
                    "command": [
                        "by rewrite mulrACA -invfM.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "char0_natf_div",
            "line_nb": 3119,
            "steps": [
                {
                    "command": [
                        "move/charf0P=> char0F m [|d] d_dv_m; first by rewrite divn0 invr0 mulr0.",
                        "VernacExtend",
                        "3763a4b8db689af316a7372b722bb29806ab4fb6"
                    ]
                },
                {
                    "command": [
                        "by rewrite natr_div // unitfE char0F.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "fmorph_eq0",
            "line_nb": 3125,
            "steps": [
                {
                    "command": [
                        "have [-> | nz_x] := altP (x =P _); first by rewrite rmorph0 eqxx.",
                        "VernacExtend",
                        "3763a4b8db689af316a7372b722bb29806ab4fb6"
                    ]
                },
                {
                    "command": [
                        "apply/eqP; move/(congr1 ( *%R (f x^-1)))/eqP.",
                        "VernacExtend",
                        "86bb0d3d5ae27b38aac15f69d532d662f1518315"
                    ]
                },
                {
                    "command": [
                        "by rewrite -rmorphM mulVf // mulr0 rmorph1 ?oner_eq0.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "fmorph_inj",
            "line_nb": 3130,
            "steps": [
                {
                    "command": [
                        "move=> x y eqfxy; apply/eqP; rewrite -subr_eq0 -fmorph_eq0 rmorphB //.",
                        "VernacExtend",
                        "f7feb259d6220ca40e8a86b90bd06f137aa140ac"
                    ]
                },
                {
                    "command": [
                        "by rewrite eqfxy subrr.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "fmorph_eq1",
            "line_nb": 3134,
            "steps": [
                {
                    "command": [
                        "by rewrite -(inj_eq fmorph_inj) rmorph1.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "fmorph_char",
            "line_nb": 3137,
            "steps": [
                {
                    "command": [
                        "by move=> p; rewrite !inE -fmorph_eq0 rmorph_nat.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "fmorph_unit",
            "line_nb": 3143,
            "steps": [
                {
                    "command": [
                        "have [-> |] := altP (x =P _); first by rewrite rmorph0 unitr0.",
                        "VernacExtend",
                        "3763a4b8db689af316a7372b722bb29806ab4fb6"
                    ]
                },
                {
                    "command": [
                        "by rewrite -unitfE; apply: rmorph_unit.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "fmorphV",
            "line_nb": 3147,
            "steps": [
                {
                    "command": [
                        "move=> x; have [-> | nz_x] := eqVneq x 0; first by rewrite !(invr0, rmorph0).",
                        "VernacExtend",
                        "3763a4b8db689af316a7372b722bb29806ab4fb6"
                    ]
                },
                {
                    "command": [
                        "by rewrite rmorphV ?unitfE.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "fmorph_div",
            "line_nb": 3151,
            "steps": [
                {
                    "command": [
                        "by move=> x y; rewrite rmorphM fmorphV.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "scalerK",
            "line_nb": 3159,
            "steps": [
                {
                    "command": [
                        "by move=> nz_a v; rewrite scalerA mulVf // scale1r.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "scalerKV",
            "line_nb": 3162,
            "steps": [
                {
                    "command": [
                        "by rewrite -invr_eq0 -{3}[a]invrK; apply: scalerK.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "scalerI",
            "line_nb": 3165,
            "steps": [
                {
                    "command": [
                        "by move=> nz_a; apply: can_inj (scalerK nz_a).",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "scaler_eq0",
            "line_nb": 3168,
            "steps": [
                {
                    "command": [
                        "have [-> | nz_a] := altP (a =P _); first by rewrite scale0r eqxx.",
                        "VernacExtend",
                        "3763a4b8db689af316a7372b722bb29806ab4fb6"
                    ]
                },
                {
                    "command": [
                        "by rewrite (can2_eq (scalerK nz_a) (scalerKV nz_a)) scaler0.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "rpredZeq",
            "line_nb": 3172,
            "steps": [
                {
                    "command": [
                        "have [-> | nz_a] := altP eqP; first by rewrite scale0r rpred0.",
                        "VernacExtend",
                        "3763a4b8db689af316a7372b722bb29806ab4fb6"
                    ]
                },
                {
                    "command": [
                        "by apply/idP/idP; first rewrite -{2}(scalerK nz_a v); apply: rpredZ.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "char_lalg",
            "line_nb": 3177,
            "steps": [
                {
                    "command": [
                        "by move=> p; rewrite inE -scaler_nat scaler_eq0 oner_eq0 orbF.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "fpredMl",
            "line_nb": 3182,
            "steps": [
                {
                    "command": [
                        "by rewrite -!unitfE; apply: rpredMl.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "fpredMr",
            "line_nb": 3185,
            "steps": [
                {
                    "command": [
                        "by rewrite -!unitfE; apply: rpredMr.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "fpred_divl",
            "line_nb": 3188,
            "steps": [
                {
                    "command": [
                        "by rewrite -!unitfE; apply: rpred_divl.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "fpred_divr",
            "line_nb": 3191,
            "steps": [
                {
                    "command": [
                        "by rewrite -!unitfE; apply: rpred_divr.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "satP",
            "line_nb": 3255,
            "steps": [
                {
                    "command": [
                        "exact: DecidableField.satP.",
                        "VernacExtend",
                        "ce637ff86bafca5d8359473e8c02af644dcbdc43"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "size_sol",
            "line_nb": 3271,
            "steps": [
                {
                    "command": [
                        "rewrite /sol; case: sol_subproof => [sP | _]; last exact: size_nseq.",
                        "VernacExtend",
                        "3763a4b8db689af316a7372b722bb29806ab4fb6"
                    ]
                },
                {
                    "command": [
                        "by case/andP: (xchooseP sP) => /eqP.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "eq_sat",
            "line_nb": 3282,
            "steps": [
                {
                    "command": [
                        "by move=> eqf12 e; apply/satP/satP; case: (eqf12 e).",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "eq_sol",
            "line_nb": 3285,
            "steps": [
                {
                    "command": [
                        "rewrite /sol => /eq_sat eqf12 n.",
                        "VernacExtend",
                        "3c42b53d0efc26db114b00541ac5e7fcb29e6aeb"
                    ]
                },
                {
                    "command": [
                        "do 2![case: sol_subproof] => //= [f1s f2s | ns1 [s f2s] | [s f1s] []].",
                        "VernacExtend",
                        "3c42b53d0efc26db114b00541ac5e7fcb29e6aeb"
                    ]
                },
                {
                    "command": [
                        "-",
                        "VernacBullet",
                        "581cab4bf49fa4b495e569bbda96fc8d28fddcc0"
                    ]
                },
                {
                    "command": [
                        "by apply: eq_xchoose => s; rewrite eqf12.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "-",
                        "VernacBullet",
                        "581cab4bf49fa4b495e569bbda96fc8d28fddcc0"
                    ]
                },
                {
                    "command": [
                        "by case: ns1; exists s; rewrite -eqf12.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "by exists s; rewrite eqf12.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "quantifier_elim_wf",
            "line_nb": 3306,
            "steps": [
                {
                    "command": [
                        "suffices aux_wf f0 n : let qf := elim_aux f0 n in rformula f0 -> qf_form qf && rformula qf.",
                        "VernacExtend",
                        "290ed488b5562e885aa2cac56f3a69b4faa0eaa6"
                    ]
                },
                {
                    "command": [
                        "-",
                        "VernacBullet",
                        "581cab4bf49fa4b495e569bbda96fc8d28fddcc0"
                    ]
                },
                {
                    "command": [
                        "by elim: f => //=; do ?[ move=> f1 IH1 f2 IH2; case/andP=> rf1 rf2; case/andP:(IH1 rf1)=> -> ->; case/andP:(IH2 rf2)=> -> -> // | move=> n f1 IH rf1; case/andP: (IH rf1)=> qff rf; rewrite aux_wf ].",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "rewrite /elim_aux => rf.",
                        "VernacExtend",
                        "3c42b53d0efc26db114b00541ac5e7fcb29e6aeb"
                    ]
                },
                {
                    "command": [
                        "suffices or_wf fs : let ofs := foldr Or False fs in all (@qf_form F) fs && all (@rformula F) fs -> qf_form ofs && rformula ofs.",
                        "VernacExtend",
                        "290ed488b5562e885aa2cac56f3a69b4faa0eaa6"
                    ]
                },
                {
                    "command": [
                        "-",
                        "VernacBullet",
                        "581cab4bf49fa4b495e569bbda96fc8d28fddcc0"
                    ]
                },
                {
                    "command": [
                        "apply: or_wf.",
                        "VernacExtend",
                        "4bd6fa79b17bcd2bfb7af091fb325367a20385d6"
                    ]
                },
                {
                    "command": [
                        "suffices map_proj_wf bcs: let mbcs := map (proj n) bcs in all dnf_rterm bcs -> all (@qf_form _) mbcs && all (@rformula _) mbcs.",
                        "VernacExtend",
                        "290ed488b5562e885aa2cac56f3a69b4faa0eaa6"
                    ]
                },
                {
                    "command": [
                        "by apply: map_proj_wf; apply: qf_to_dnf_rterm.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "elim: bcs => [|bc bcs ihb] bcsr //= /andP[rbc rbcs].",
                        "VernacExtend",
                        "e686a1895f1799b840b76242f931100819a9ad6c"
                    ]
                },
                {
                    "command": [
                        "by rewrite andbAC andbA wf_proj //= andbC ihb.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "elim: fs => //= g gs ihg; rewrite -andbA => /and4P[-> qgs -> rgs] /=.",
                        "VernacExtend",
                        "5c0d3b68844697b312245da3ed2c1b277720f6af"
                    ]
                },
                {
                    "command": [
                        "by apply: ihg; rewrite qgs rgs.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "proj_satP",
            "line_nb": 3366,
            "steps": [
                {
                    "command": [
                        "move=> e f; have fP := quantifier_elim_rformP e (to_rform_rformula f).",
                        "VernacExtend",
                        "ccd83c252dcbae3d56f3d057fcb8217878b51901"
                    ]
                },
                {
                    "command": [
                        "by apply: (iffP fP); move/to_rformP.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "solve_monicpoly",
            "line_nb": 3429,
            "steps": [
                {
                    "command": [
                        "by case: F => ? [].",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "imaginary_exists",
            "line_nb": 3432,
            "steps": [
                {
                    "command": [
                        "have /sig_eqW[i Di2] := @solve_monicpoly 2 (nth 0 [:: -1]) isT.",
                        "VernacExtend",
                        "406cde1174359c53bf162a2a18c4eede395555f9"
                    ]
                },
                {
                    "command": [
                        "by exists i; rewrite Di2 !big_ord_recl big_ord0 mul0r mulr1 !addr0.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "addA",
            "line_nb": 3446,
            "steps": [
                {
                    "command": [
                        "by move=> u1 u2 u3; apply: val_inj; rewrite !SubK addrA.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "addC",
            "line_nb": 3449,
            "steps": [
                {
                    "command": [
                        "by move=> u1 u2; apply: val_inj; rewrite !SubK addrC.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "add0",
            "line_nb": 3452,
            "steps": [
                {
                    "command": [
                        "by move=> u; apply: val_inj; rewrite !SubK add0r.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "addN",
            "line_nb": 3455,
            "steps": [
                {
                    "command": [
                        "by move=> u; apply: val_inj; rewrite !SubK addNr.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "val0",
            "line_nb": 3470,
            "steps": [
                {
                    "command": [
                        "by rewrite -(subrr (0 : T')) valM subrr.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "valD",
            "line_nb": 3473,
            "steps": [
                {
                    "command": [
                        "by move=> u v; rewrite -{1}[v]opprK -[- v]sub0r !valM val0 sub0r opprK.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "mulA",
            "line_nb": 3476,
            "steps": [
                {
                    "command": [
                        "by move=> u1 u2 u3; apply: val_inj; rewrite !SubK mulrA.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "mul1l",
            "line_nb": 3479,
            "steps": [
                {
                    "command": [
                        "by move=> u; apply: val_inj; rewrite !SubK mul1r.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "mulDl",
            "line_nb": 3485,
            "steps": [
                {
                    "command": [
                        "by move=> u1 u2 u3; apply: val_inj; rewrite !(SubK, valD) mulrDl.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "mulDr",
            "line_nb": 3488,
            "steps": [
                {
                    "command": [
                        "by move=> u1 u2 u3; apply: val_inj; rewrite !(SubK, valD) mulrDr.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "nz1",
            "line_nb": 3491,
            "steps": [
                {
                    "command": [
                        "by apply: contraNneq (oner_neq0 R) => eq10; rewrite -val0 -eq10 SubK.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "scaleA",
            "line_nb": 3503,
            "steps": [
                {
                    "command": [
                        "by apply: val_inj; rewrite !SubK scalerA.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "scale1",
            "line_nb": 3506,
            "steps": [
                {
                    "command": [
                        "by move=> w; apply: val_inj; rewrite !SubK scale1r.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "scaleDr",
            "line_nb": 3509,
            "steps": [
                {
                    "command": [
                        "by move=> a w w2; apply: val_inj; rewrite !(SubK, valD) scalerDr.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "scaleDl",
            "line_nb": 3512,
            "steps": [
                {
                    "command": [
                        "by move=> a b; apply: val_inj; rewrite !(SubK, valD) scalerDl.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "lalgMixin",
            "line_nb": 3517,
            "steps": [
                {
                    "command": [
                        "by move=> _ injf fZ mulB fM a x y; apply: injf; rewrite !(fZ, fM) scalerAl.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "comRingMixin",
            "line_nb": 3520,
            "steps": [
                {
                    "command": [
                        "by move=> _ inj_f fM x y; apply: inj_f; rewrite !fM mulrC.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "algMixin",
            "line_nb": 3523,
            "steps": [
                {
                    "command": [
                        "by move=> _ inj_f fM fZ a x y; apply: inj_f; rewrite !(fM, fZ) scalerAr.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "mulrV",
            "line_nb": 3540,
            "steps": [
                {
                    "command": [
                        "by move=> u Uu; apply: val_inj; rewrite val1 valM SubK mulrV.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "unitP",
            "line_nb": 3543,
            "steps": [
                {
                    "command": [
                        "by case=> vu1 uv1; apply/unitrP; exists (val v); rewrite -!valM vu1 uv1.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "unit_id",
            "line_nb": 3546,
            "steps": [
                {
                    "command": [
                        "by move=> u /invr_out def_u1; apply: val_inj; rewrite SubK.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "idomainMixin",
            "line_nb": 3551,
            "steps": [
                {
                    "command": [
                        "move=> _ injf f0 fM u v uv0.",
                        "VernacExtend",
                        "b1b2cb7a3a617cba67460b4eca1f04de3c1cc716"
                    ]
                },
                {
                    "command": [
                        "by rewrite -!(inj_eq injf) !f0 -mulf_eq0 -fM uv0 f0.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "fieldMixin",
            "line_nb": 3555,
            "steps": [
                {
                    "command": [
                        "by move=> _ injf f0 fU u; rewrite -fU unitfE -f0 inj_eq.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "ffun_addA",
            "line_nb": 4169,
            "steps": [
                {
                    "command": [
                        "by move=> f1 f2 f3; apply/ffunP=> a; rewrite !ffunE addrA.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "ffun_addC",
            "line_nb": 4172,
            "steps": [
                {
                    "command": [
                        "by move=> f1 f2; apply/ffunP=> a; rewrite !ffunE addrC.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "ffun_add0",
            "line_nb": 4175,
            "steps": [
                {
                    "command": [
                        "by move=> f; apply/ffunP=> a; rewrite !ffunE add0r.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "ffun_addN",
            "line_nb": 4178,
            "steps": [
                {
                    "command": [
                        "by move=> f; apply/ffunP=> a; rewrite !ffunE addNr.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "sum_ffunE",
            "line_nb": 4185,
            "steps": [
                {
                    "command": [
                        "by elim/big_rec2: _ => // [|i _ y _ <-]; rewrite !ffunE.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "sum_ffun",
            "line_nb": 4188,
            "steps": [
                {
                    "command": [
                        "by apply/ffunP=> i; rewrite sum_ffunE ffunE.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "ffunMnE",
            "line_nb": 4192,
            "steps": [
                {
                    "command": [
                        "by rewrite -[n]card_ord -!sumr_const sum_ffunE.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "ffun_mulA",
            "line_nb": 4200,
            "steps": [
                {
                    "command": [
                        "by move=> f1 f2 f3; apply/ffunP=> i; rewrite !ffunE mulrA.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "ffun_mul_1l",
            "line_nb": 4203,
            "steps": [
                {
                    "command": [
                        "by move=> f; apply/ffunP=> i; rewrite !ffunE mul1r.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "ffun_mul_1r",
            "line_nb": 4206,
            "steps": [
                {
                    "command": [
                        "by move=> f; apply/ffunP=> i; rewrite !ffunE mulr1.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "ffun_mul_addl",
            "line_nb": 4209,
            "steps": [
                {
                    "command": [
                        "by move=> f1 f2 f3; apply/ffunP=> i; rewrite !ffunE mulrDl.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "ffun_mul_addr",
            "line_nb": 4212,
            "steps": [
                {
                    "command": [
                        "by move=> f1 f2 f3; apply/ffunP=> i; rewrite !ffunE mulrDr.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "ffun1_nonzero",
            "line_nb": 4215,
            "steps": [
                {
                    "command": [
                        "by apply/eqP => /ffunP/(_ a)/eqP; rewrite !ffunE oner_eq0.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "ffun_mulC",
            "line_nb": 4223,
            "steps": [
                {
                    "command": [
                        "by move=> f1 f2; apply/ffunP=> i; rewrite !ffunE mulrC.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "ffun_scaleA",
            "line_nb": 4232,
            "steps": [
                {
                    "command": [
                        "by apply/ffunP=> a; rewrite !ffunE scalerA.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "ffun_scale1",
            "line_nb": 4235,
            "steps": [
                {
                    "command": [
                        "by move=> f; apply/ffunP=> a; rewrite !ffunE scale1r.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "ffun_scale_addr",
            "line_nb": 4238,
            "steps": [
                {
                    "command": [
                        "by move=> f g; apply/ffunP=> a; rewrite !ffunE scalerDr.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "ffun_scale_addl",
            "line_nb": 4241,
            "steps": [
                {
                    "command": [
                        "by move=> k1 k2; apply/ffunP=> a; rewrite !ffunE scalerDl.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "pair_addA",
            "line_nb": 4251,
            "steps": [
                {
                    "command": [
                        "by move=> x y z; congr (_, _); apply: addrA.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "pair_addC",
            "line_nb": 4254,
            "steps": [
                {
                    "command": [
                        "by move=> x y; congr (_, _); apply: addrC.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "pair_add0",
            "line_nb": 4257,
            "steps": [
                {
                    "command": [
                        "by case=> x1 x2; congr (_, _); apply: add0r.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "pair_addN",
            "line_nb": 4260,
            "steps": [
                {
                    "command": [
                        "by move=> x; congr (_, _); apply: addNr.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "pair_mulA",
            "line_nb": 4269,
            "steps": [
                {
                    "command": [
                        "by move=> x y z; congr (_, _); apply: mulrA.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "pair_mul1l",
            "line_nb": 4272,
            "steps": [
                {
                    "command": [
                        "by case=> x1 x2; congr (_, _); apply: mul1r.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "pair_mul1r",
            "line_nb": 4275,
            "steps": [
                {
                    "command": [
                        "by case=> x1 x2; congr (_, _); apply: mulr1.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "pair_mulDl",
            "line_nb": 4278,
            "steps": [
                {
                    "command": [
                        "by move=> x y z; congr (_, _); apply: mulrDl.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "pair_mulDr",
            "line_nb": 4281,
            "steps": [
                {
                    "command": [
                        "by move=> x y z; congr (_, _); apply: mulrDr.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "pair_one_neq0",
            "line_nb": 4284,
            "steps": [
                {
                    "command": [
                        "by rewrite xpair_eqE oner_eq0.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "pair_mulC",
            "line_nb": 4292,
            "steps": [
                {
                    "command": [
                        "by move=> x y; congr (_, _); apply: mulrC.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "pair_scaleA",
            "line_nb": 4300,
            "steps": [
                {
                    "command": [
                        "by congr (_, _); apply: scalerA.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "pair_scale1",
            "line_nb": 4303,
            "steps": [
                {
                    "command": [
                        "by case: u => u1 u2; congr (_, _); apply: scale1r.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "pair_scaleDr",
            "line_nb": 4306,
            "steps": [
                {
                    "command": [
                        "by move=> a u v; congr (_, _); apply: scalerDr.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "pair_scaleDl",
            "line_nb": 4309,
            "steps": [
                {
                    "command": [
                        "by move=> a b; congr (_, _); apply: scalerDl.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "pair_scaleAl",
            "line_nb": 4317,
            "steps": [
                {
                    "command": [
                        "by congr (_, _); apply: scalerAl.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "pair_scaleAr",
            "line_nb": 4324,
            "steps": [
                {
                    "command": [
                        "by congr (_, _); apply: scalerAr.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "pair_mulVl",
            "line_nb": 4333,
            "steps": [
                {
                    "command": [
                        "rewrite /pair_invr=> x; case: ifP => // /andP[Ux1 Ux2] _.",
                        "VernacExtend",
                        "4a95f82aca0fc9a50f43053eca44fc9141212abe"
                    ]
                },
                {
                    "command": [
                        "by congr (_, _); apply: mulVr.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "pair_mulVr",
            "line_nb": 4337,
            "steps": [
                {
                    "command": [
                        "rewrite /pair_invr=> x; case: ifP => // /andP[Ux1 Ux2] _.",
                        "VernacExtend",
                        "4a95f82aca0fc9a50f43053eca44fc9141212abe"
                    ]
                },
                {
                    "command": [
                        "by congr (_, _); apply: mulrV.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "pair_invr_out",
            "line_nb": 4345,
            "steps": [
                {
                    "command": [
                        "by rewrite /pair_invr => x /negPf/= ->.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        }
    ]
}