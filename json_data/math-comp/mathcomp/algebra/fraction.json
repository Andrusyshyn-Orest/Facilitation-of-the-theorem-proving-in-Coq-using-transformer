{
    "filename": "mathcomp/algebra/fraction.v",
    "coq_project": "math-comp",
    "vernac_cmds": [
        [
            "Require Import mathcomp.ssreflect.ssreflect.",
            "VernacRequire",
            "85e251063dc2b5a9653f7bb76dcd176ed36b42a9"
        ],
        [
            "From mathcomp Require Import ssrfun ssrbool eqtype ssrnat div seq choice tuple.",
            "VernacRequire",
            "3fad103dee4ec1ec49c469ca1bc7ca0eeead32a2"
        ],
        [
            "From mathcomp Require Import bigop ssralg poly polydiv generic_quotient.",
            "VernacRequire",
            "eebac4d40601688b023595be3132c999d5dfe403"
        ],
        [
            "Set Implicit Arguments.",
            "VernacSetOption",
            "9e84ff8896f028601d8aded48c1d4aebe60aa584"
        ],
        [
            "Unset Strict Implicit.",
            "VernacUnsetOption",
            "2842adaf6959318f2042805935c46f513bdc0348"
        ],
        [
            "Unset Printing Implicit Defensive.",
            "VernacUnsetOption",
            "444e5f0be4b25d9b1fd556943a447ec10046d151"
        ],
        [
            "Import GRing.Theory.",
            "VernacImport",
            "a0fcf55540300b9b0e54bd28a113c5228ff530f4"
        ],
        [
            "Local Open Scope ring_scope.",
            "VernacOpenCloseScope",
            "fb9da4a291533574d328be8c8a69d90a14641928"
        ],
        [
            "Local Open Scope quotient_scope.",
            "VernacOpenCloseScope",
            "d27d8214bf1167cb740fe551598349d95a0016a3"
        ],
        [
            "Reserved Notation \"{ 'ratio' T }\" (at level 0, format \"{ 'ratio' T }\").",
            "VernacSyntaxExtension",
            "2aaa1ccab9af7640a3b7e0b171961ed31d64937f"
        ],
        [
            "Reserved Notation \"{ 'fraction' T }\" (at level 0, format \"{ 'fraction' T }\").",
            "VernacSyntaxExtension",
            "deb25e4453106fb8c39ac1f5872c109ba4082bb5"
        ],
        [
            "Reserved Notation \"x %:F\" (at level 2, format \"x %:F\").",
            "VernacSyntaxExtension",
            "5d7af9b69436b32f80d603060e8297dc3066c0ce"
        ],
        [
            "Section FracDomain.",
            "VernacBeginSection",
            "4d93c8837d3746bf4db3e93c390e49cf7cdd06e0"
        ],
        [
            "Variable R : ringType.",
            "VernacAssumption",
            "103955c3e16ede32f173514da95e3006926aeccd"
        ],
        [
            "Inductive ratio := mkRatio { frac :> R * R; _ : frac.2 != 0 }.",
            "VernacInductive",
            "15df03f097ca8f20086c5a23e51b08d076b73f1c"
        ],
        [
            "Definition ratio_of of phant R := ratio.",
            "VernacDefinition",
            "9c9cd416e966ce8818579e9d377f953931d1ee78"
        ],
        [
            "Local Notation \"{ 'ratio' T }\" := (ratio_of (Phant T)).",
            "VernacNotation",
            "227450f360f8a89ba31115cc97fb168dc1aab935"
        ],
        [
            "Canonical ratio_subType := Eval hnf in [subType for frac].",
            "VernacDefinition",
            "2b9ed7f79a54eb292266ab3996df1ab8a3962faf"
        ],
        [
            "Canonical ratio_of_subType := Eval hnf in [subType of {ratio R}].",
            "VernacDefinition",
            "2732cf0acaa2df9ce0feaa94f72b9dc1c7bcf36e"
        ],
        [
            "Definition ratio_EqMixin := [eqMixin of ratio by <:].",
            "VernacDefinition",
            "01fbd21b93dfe611f789a7790fa8ffcf1a1d2290"
        ],
        [
            "Canonical ratio_eqType := EqType ratio ratio_EqMixin.",
            "VernacDefinition",
            "78b49a2601d314bbf08294f720f979b09061d88b"
        ],
        [
            "Canonical ratio_of_eqType := Eval hnf in [eqType of {ratio R}].",
            "VernacDefinition",
            "acd7d0eabbef16d515b0568b687f1501bcdf14f5"
        ],
        [
            "Definition ratio_ChoiceMixin := [choiceMixin of ratio by <:].",
            "VernacDefinition",
            "bee6161baacea88c9c21e3eade84a3947e3ea92f"
        ],
        [
            "Canonical ratio_choiceType := ChoiceType ratio ratio_ChoiceMixin.",
            "VernacDefinition",
            "147ba610080a9cf436b4f8dfb96d15321a2eb7f1"
        ],
        [
            "Canonical ratio_of_choiceType := Eval hnf in [choiceType of {ratio R}].",
            "VernacDefinition",
            "94e0a0900349d5480d2aee7344b8ee567e677943"
        ],
        [
            "Lemma denom_ratioP : forall f : ratio, f.2 != 0.",
            "VernacStartTheoremProof",
            "e38fc32b354c5d8a02edfaae34485f59933da32a"
        ],
        [
            "by case.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Definition ratio0 := (@mkRatio (0, 1) (oner_neq0 _)).",
            "VernacDefinition",
            "f998d6661e3e3cddeb9b75bade7dba611cba5b61"
        ],
        [
            "Definition Ratio x y : {ratio R} := insubd ratio0 (x, y).",
            "VernacDefinition",
            "01081398b1c6ca6ce653a9fbd5fd7426d4de75d8"
        ],
        [
            "Lemma numer_Ratio x y : y != 0 -> (Ratio x y).1 = x.",
            "VernacStartTheoremProof",
            "c41e943f6afc08dfe67c359bef0bee1a58a80a31"
        ],
        [
            "by move=> ny0; rewrite /Ratio /insubd insubT.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma denom_Ratio x y : y != 0 -> (Ratio x y).2 = y.",
            "VernacStartTheoremProof",
            "56297e4f51231f0e100c6bf5e415b0b96599f373"
        ],
        [
            "by move=> ny0; rewrite /Ratio /insubd insubT.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Definition numden_Ratio := (numer_Ratio, denom_Ratio).",
            "VernacDefinition",
            "5f0697fe7bb9772ae150266e5ba4af95aca902a5"
        ],
        [
            "Variant Ratio_spec (n d : R) : {ratio R} -> R -> R -> Type := | RatioNull of d = 0 : Ratio_spec n d ratio0 n 0 | RatioNonNull (d_neq0 : d != 0) : Ratio_spec n d (@mkRatio (n, d) d_neq0) n d.",
            "VernacInductive",
            "f29f35d43bf8566ec1979c1599222d816d390a35"
        ],
        [
            "Lemma RatioP n d : Ratio_spec n d (Ratio n d) n d.",
            "VernacStartTheoremProof",
            "8f3b0b4388d83e3c364a6cab9744ce81f4389bcd"
        ],
        [
            "rewrite /Ratio /insubd; case: insubP=> /= [x /= d_neq0 hx|].",
            "VernacExtend",
            "712d339e99ee17eb7d5033e19ac614eb3ca6b532"
        ],
        [
            "have ->: x = @mkRatio (n, d) d_neq0 by apply: val_inj.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "by constructor.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "by rewrite negbK=> /eqP hx; rewrite {2}hx; constructor.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma Ratio0 x : Ratio x 0 = ratio0.",
            "VernacStartTheoremProof",
            "34273957cb53ea26aa0fa3ac701a9d9776a21964"
        ],
        [
            "by rewrite /Ratio /insubd; case: insubP; rewrite //= eqxx.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "End FracDomain.",
            "VernacEndSegment",
            "aa117a88d0b347293670a27892129f090f12843a"
        ],
        [
            "Notation \"{ 'ratio' T }\" := (ratio_of (Phant T)).",
            "VernacNotation",
            "54f35ddbe8ea077473e347c7465e9e57b6c82cf5"
        ],
        [
            "Identity Coercion type_fracdomain_of : ratio_of >-> ratio.",
            "VernacIdentityCoercion",
            "34a1f927181e336bc67051054c4d3231ba427439"
        ],
        [
            "Notation \"'\\n_' x\" := (frac x).1 (at level 8, x at level 2, format \"'\\n_' x\").",
            "VernacNotation",
            "11e5bab531df7887977550117d7bdaa6a903375d"
        ],
        [
            "Notation \"'\\d_' x\" := (frac x).2 (at level 8, x at level 2, format \"'\\d_' x\").",
            "VernacNotation",
            "c9375982bd38b2b7972ca04707cc6d25c3f1b903"
        ],
        [
            "Module FracField.",
            "VernacDefineModule",
            "a53eb08f308b8154111b58afe79f8dcf081f927f"
        ],
        [
            "Section FracField.",
            "VernacBeginSection",
            "7f05d14fd31e0b545f0dc22110bf2e74c59cbcdf"
        ],
        [
            "Variable R : idomainType.",
            "VernacAssumption",
            "cbab1d9d04a0bef334944e593ca6e504cfbe949c"
        ],
        [
            "Local Notation frac := (R * R).",
            "VernacSyntacticDefinition",
            "b2f34cdb867dde65eb046bce17e2e913b2ddaa8f"
        ],
        [
            "Local Notation dom := (ratio R).",
            "VernacSyntacticDefinition",
            "4243607595373d0ef36fbca72e04aa70f428cba3"
        ],
        [
            "Local Notation domP := denom_ratioP.",
            "VernacSyntacticDefinition",
            "bfbb6900aee4a14b6db5c544b5a28f0085868fc3"
        ],
        [
            "Implicit Types x y z : dom.",
            "VernacReserve",
            "84d05c4d0e34eafee5023ea44de271c925e7d224"
        ],
        [
            "Local Notation equivf_notation x y := (\\n_x * \\d_y == \\d_x * \\n_y).",
            "VernacSyntacticDefinition",
            "eb486985f97487196b4cab23d55fefd8e1a6359e"
        ],
        [
            "Definition equivf x y := equivf_notation x y.",
            "VernacDefinition",
            "d6290bed6ee9e65ec1a0272555109624fcd64d76"
        ],
        [
            "Lemma equivfE x y : equivf x y = equivf_notation x y.",
            "VernacStartTheoremProof",
            "e279c393ea04f8913b73d372b36eb8c86d029e21"
        ],
        [
            "by [].",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma equivf_refl : reflexive equivf.",
            "VernacStartTheoremProof",
            "1f797afb53ce94b5cfb9f49da582628f2ce181f0"
        ],
        [
            "by move=> x; rewrite /equivf mulrC.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma equivf_sym : symmetric equivf.",
            "VernacStartTheoremProof",
            "ba566e9e921b5094f78875a82417e7b74a9a959d"
        ],
        [
            "by move=> x y; rewrite /equivf eq_sym; congr (_==_); rewrite mulrC.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma equivf_trans : transitive equivf.",
            "VernacStartTheoremProof",
            "3690b1530a49de3bbacd9710e72197e1ed6e9cb2"
        ],
        [
            "move=> [x Px] [y Py] [z Pz]; rewrite /equivf /= mulrC => /eqP xy /eqP yz.",
            "VernacExtend",
            "8261237f0cda1915a4077c28869831c5329103ce"
        ],
        [
            "by rewrite -(inj_eq (mulfI Px)) mulrA xy -mulrA yz mulrCA.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Canonical equivf_equiv := EquivRel equivf equivf_refl equivf_sym equivf_trans.",
            "VernacDefinition",
            "c266ba36b04e05ea03e23f47625cda2b19db4f13"
        ],
        [
            "Definition type := {eq_quot equivf}.",
            "VernacDefinition",
            "a4e010581b4d830b988ee4af62cffe41a6bdb636"
        ],
        [
            "Definition type_of of phant R := type.",
            "VernacDefinition",
            "3cf13e474099a614476387e79acfb78eb1598e6e"
        ],
        [
            "Notation \"{ 'fraction' T }\" := (type_of (Phant T)).",
            "VernacNotation",
            "b4d0279c3c1bedcccb1971566ec329fd646fd1d0"
        ],
        [
            "Canonical frac_quotType := [quotType of type].",
            "VernacDefinition",
            "3b023ed7a12052adda835baf2d4f4a36ce90f660"
        ],
        [
            "Canonical frac_eqType := [eqType of type].",
            "VernacDefinition",
            "f9d91a086b99ae0427d18cd4015c26fb7f374171"
        ],
        [
            "Canonical frac_choiceType := [choiceType of type].",
            "VernacDefinition",
            "19771f850290e34fbf7fabeb9e6961242a6a2f0a"
        ],
        [
            "Canonical frac_eqQuotType := [eqQuotType equivf of type].",
            "VernacDefinition",
            "97dc782984c5814894c0be1d4673289a3c48f9a1"
        ],
        [
            "Canonical frac_of_quotType := [quotType of {fraction R}].",
            "VernacDefinition",
            "4d75137c184a924d30ab8586c98d58cca9f780ab"
        ],
        [
            "Canonical frac_of_eqType := [eqType of {fraction R}].",
            "VernacDefinition",
            "c03da2ac855826098a558f991bd28df5c5ef6407"
        ],
        [
            "Canonical frac_of_choiceType := [choiceType of {fraction R}].",
            "VernacDefinition",
            "efb7409815a06dc5ceaa769a60fe686b9aa23f92"
        ],
        [
            "Canonical frac_of_eqQuotType := [eqQuotType equivf of {fraction R}].",
            "VernacDefinition",
            "f532853e9fc9657a6950d648e330c14f528c99fb"
        ],
        [
            "Lemma equivf_def (x y : ratio R) : x == y %[mod type] = (\\n_x * \\d_y == \\d_x * \\n_y).",
            "VernacStartTheoremProof",
            "368dbaa0802c8c987563401438614b0c6cba5ba4"
        ],
        [
            "by rewrite eqmodE.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma equivf_r x : \\n_x * \\d_(repr (\\pi_type x)) = \\d_x * \\n_(repr (\\pi_type x)).",
            "VernacStartTheoremProof",
            "2ab1277f1fdecaf92c97a3f929e0982cbe113472"
        ],
        [
            "by apply/eqP; rewrite -equivf_def reprK.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma equivf_l x : \\n_(repr (\\pi_type x)) * \\d_x = \\d_(repr (\\pi_type x)) * \\n_x.",
            "VernacStartTheoremProof",
            "94065d8475a61f2bf201a21a542a0aeec6c0ad39"
        ],
        [
            "by apply/eqP; rewrite -equivf_def reprK.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma numer0 x : (\\n_x == 0) = (x == (ratio0 R) %[mod_eq equivf]).",
            "VernacStartTheoremProof",
            "ed517f6ff20348279cb9941278cadb44494de581"
        ],
        [
            "by rewrite eqmodE /= !equivfE // mulr1 mulr0.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma Ratio_numden : forall x, Ratio \\n_x \\d_x = x.",
            "VernacStartTheoremProof",
            "b8c12ff4877713c3c26bfc92161afe86badb1990"
        ],
        [
            "case=> [[n d] /= nd]; rewrite /Ratio /insubd; apply: val_inj=> /=.",
            "VernacExtend",
            "7b10d760ecce4015b43936eb8ee3a43374e85678"
        ],
        [
            "by case: insubP=> //=; rewrite nd.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Definition tofrac := lift_embed {fraction R} (fun x : R => Ratio x 1).",
            "VernacDefinition",
            "34e593bc3383bc6707e20e170d91251db571296c"
        ],
        [
            "Canonical tofrac_pi_morph := PiEmbed tofrac.",
            "VernacDefinition",
            "7eb90a0cafc4a7e5682e1805c19527eea76f0f16"
        ],
        [
            "Notation \"x %:F\" := (@tofrac x).",
            "VernacNotation",
            "861ad848b37879f54d82adb673efe1c8ad495438"
        ],
        [
            "Implicit Types a b c : type.",
            "VernacReserve",
            "409fdb0a4a5db4af62aaac3dc5e51acdba4cf12a"
        ],
        [
            "Definition addf x y : dom := Ratio (\\n_x * \\d_y + \\n_y * \\d_x) (\\d_x * \\d_y).",
            "VernacDefinition",
            "0df157a888aef224ab2b3724d93139e36ab37e92"
        ],
        [
            "Definition add := lift_op2 {fraction R} addf.",
            "VernacDefinition",
            "9f83c128b5536d964572d11aad07119cd1b8df98"
        ],
        [
            "Lemma pi_add : {morph \\pi : x y / addf x y >-> add x y}.",
            "VernacStartTheoremProof",
            "9c0f1463ec8852e58846a72bb0acb923ba2fcf9b"
        ],
        [
            "move=> x y; unlock add; apply/eqmodP; rewrite /= equivfE.",
            "VernacExtend",
            "c9f9ca35a24a7c1980ca3c1f7dbf4074d4301015"
        ],
        [
            "rewrite /addf /= !numden_Ratio ?mulf_neq0 ?domP //.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "rewrite mulrDr mulrDl eq_sym; apply/eqP.",
            "VernacExtend",
            "634a7639ed2fb7caf62757f84400927f5829b7d5"
        ],
        [
            "rewrite !mulrA ![_ * \\n__]mulrC !mulrA equivf_l.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "congr (_ + _); first by rewrite -mulrA mulrCA !mulrA.",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "rewrite -!mulrA [X in _ * X]mulrCA !mulrA equivf_l.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "by rewrite mulrC !mulrA -mulrA mulrC mulrA.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Canonical pi_add_morph := PiMorph2 pi_add.",
            "VernacDefinition",
            "ea1fb9a47e32f065b120a1a4031ee6bf32b01e82"
        ],
        [
            "Definition oppf x : dom := Ratio (- \\n_x) \\d_x.",
            "VernacDefinition",
            "f852d30ef1b54e0f2e8302e9bd55edf441017ec5"
        ],
        [
            "Definition opp := lift_op1 {fraction R} oppf.",
            "VernacDefinition",
            "b3e878f706d99a4a9377c6321f399fb8e9a54ab7"
        ],
        [
            "Lemma pi_opp : {morph \\pi : x / oppf x >-> opp x}.",
            "VernacStartTheoremProof",
            "8a2a1793f77189b659a9ad66f63022c8aa149a92"
        ],
        [
            "move=> x; unlock opp; apply/eqmodP; rewrite /= /equivf /oppf /=.",
            "VernacExtend",
            "c9f9ca35a24a7c1980ca3c1f7dbf4074d4301015"
        ],
        [
            "by rewrite !numden_Ratio ?(domP,mulf_neq0) // mulNr mulrN -equivf_r.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Canonical pi_opp_morph := PiMorph1 pi_opp.",
            "VernacDefinition",
            "629e3ce46ae5c434a3fa8c36da459042dde2e09f"
        ],
        [
            "Definition mulf x y : dom := Ratio (\\n_x * \\n_y) (\\d_x * \\d_y).",
            "VernacDefinition",
            "37a4ccf1d132745dbe355108a0450f31834fcc15"
        ],
        [
            "Definition mul := lift_op2 {fraction R} mulf.",
            "VernacDefinition",
            "a9f40d7d3c2a443eae1b1782dcdad00a9b3dbce9"
        ],
        [
            "Lemma pi_mul : {morph \\pi : x y / mulf x y >-> mul x y}.",
            "VernacStartTheoremProof",
            "3efa0b9c898c4411a000a0fff3406897bd1950fd"
        ],
        [
            "move=> x y; unlock mul; apply/eqmodP=> /=.",
            "VernacExtend",
            "b18dfd151fde64ab592b0cd3a5cdb6865c16f217"
        ],
        [
            "rewrite equivfE /= /addf /= !numden_Ratio ?mulf_neq0 ?domP //.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "rewrite mulrAC !mulrA -mulrA equivf_r -equivf_l.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "by rewrite mulrA ![_ * \\d_y]mulrC !mulrA.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Canonical pi_mul_morph := PiMorph2 pi_mul.",
            "VernacDefinition",
            "47998f73c2f1fa4bbebfd3bf25681dd0dd2ac129"
        ],
        [
            "Definition invf x : dom := Ratio \\d_x \\n_x.",
            "VernacDefinition",
            "29a16333e6d9cc973cb6a8579560e273e2d6eea6"
        ],
        [
            "Definition inv := lift_op1 {fraction R} invf.",
            "VernacDefinition",
            "ddcd219e5bfdb25b85ae136f11ac4b8d03ee1aca"
        ],
        [
            "Lemma pi_inv : {morph \\pi : x / invf x >-> inv x}.",
            "VernacStartTheoremProof",
            "375985c2401006f290996408be0a30018157cdcf"
        ],
        [
            "move=> x; unlock inv; apply/eqmodP=> /=; rewrite equivfE /invf eq_sym.",
            "VernacExtend",
            "c9f9ca35a24a7c1980ca3c1f7dbf4074d4301015"
        ],
        [
            "do 2?case: RatioP=> /= [/eqP|]; rewrite ?mul0r ?mul1r -?equivf_def ?numer0 ?reprK //.",
            "VernacExtend",
            "f8a765f8b8158bfb954eb4eeb20c0cb6489ecdb4"
        ],
        [
            "by move=> hx /eqP hx'; rewrite hx' eqxx in hx.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "by move=> /eqP ->; rewrite eqxx.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Canonical pi_inv_morph := PiMorph1 pi_inv.",
            "VernacDefinition",
            "814c07e60feaad294f2f26770030d62a81a3831c"
        ],
        [
            "Lemma addA : associative add.",
            "VernacStartTheoremProof",
            "b86768ea35b7a9a9c4a3865fd328d6f23fc42d97"
        ],
        [
            "elim/quotW=> x; elim/quotW=> y; elim/quotW=> z; rewrite !piE.",
            "VernacExtend",
            "9572fe72a2f3bd006515278f360e2480c39b52e9"
        ],
        [
            "rewrite /addf /= !numden_Ratio ?mulf_neq0 ?domP // !mulrDl !mulrA !addrA.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "by congr (\\pi (Ratio (_ + _ + _) _)); rewrite mulrAC.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma addC : commutative add.",
            "VernacStartTheoremProof",
            "3246083ec82798774002bb68b2a0460ae680cab7"
        ],
        [
            "by elim/quotW=> x; elim/quotW=> y; rewrite !piE /addf addrC [\\d__ * _]mulrC.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma add0_l : left_id 0%:F add.",
            "VernacStartTheoremProof",
            "cb1ea78102bb09a425fa666d62257bcca7f7d567"
        ],
        [
            "elim/quotW=> x; rewrite !piE /addf !numden_Ratio ?oner_eq0 //.",
            "VernacExtend",
            "de65c8193056a36f6dbb91fe21357bd770b140db"
        ],
        [
            "by rewrite mul0r mul1r mulr1 add0r Ratio_numden.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma addN_l : left_inverse 0%:F opp add.",
            "VernacStartTheoremProof",
            "0de5092e0b2dd76b80c8da2afb19351ed873fb2c"
        ],
        [
            "elim/quotW=> x; apply/eqP; rewrite piE /equivf.",
            "VernacExtend",
            "8c9e5024ec19e13281e0187dab3d65b93b116a6a"
        ],
        [
            "rewrite /addf /oppf !numden_Ratio ?(oner_eq0, mulf_neq0, domP) //.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "by rewrite mulr1 mulr0 mulNr addNr.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Definition frac_zmodMixin := ZmodMixin addA addC add0_l addN_l.",
            "VernacDefinition",
            "49a3a68d8e9b2a6e7b066173e962e45a5e9e19bf"
        ],
        [
            "Canonical frac_zmodType := Eval hnf in ZmodType type frac_zmodMixin.",
            "VernacDefinition",
            "1914f7afa96255f499e23dc2a66610ad2ba30a3e"
        ],
        [
            "Lemma mulA : associative mul.",
            "VernacStartTheoremProof",
            "34680a1336ead1a0ec3015099205d0bb60583bb4"
        ],
        [
            "elim/quotW=> x; elim/quotW=> y; elim/quotW=> z; rewrite !piE.",
            "VernacExtend",
            "9572fe72a2f3bd006515278f360e2480c39b52e9"
        ],
        [
            "by rewrite /mulf !numden_Ratio ?mulf_neq0 ?domP // !mulrA.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma mulC : commutative mul.",
            "VernacStartTheoremProof",
            "7982460b12783801bb7ad11bd7cbb852b05fb591"
        ],
        [
            "elim/quotW=> x; elim/quotW=> y; rewrite !piE /mulf.",
            "VernacExtend",
            "85063f5d306f5a99a8097b17f99eda3b8e50e4bd"
        ],
        [
            "by rewrite [_ * (\\d_x)]mulrC [_ * (\\n_x)]mulrC.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma mul1_l : left_id 1%:F mul.",
            "VernacStartTheoremProof",
            "09fe20f4e5bf37dc0b10ab8a64d9189f6eff0d6f"
        ],
        [
            "elim/quotW=> x; rewrite !piE /mulf.",
            "VernacExtend",
            "de65c8193056a36f6dbb91fe21357bd770b140db"
        ],
        [
            "by rewrite !numden_Ratio ?oner_eq0 // !mul1r Ratio_numden.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma mul_addl : left_distributive mul add.",
            "VernacStartTheoremProof",
            "22671733709bd5300b8073b6c7e9bd8c245d92d4"
        ],
        [
            "elim/quotW=> x; elim/quotW=> y; elim/quotW=> z; apply/eqP.",
            "VernacExtend",
            "0716c5096a80d88cf5944e8fc89e8c0691c9cfe0"
        ],
        [
            "rewrite !piE /equivf /mulf /addf !numden_Ratio ?mulf_neq0 ?domP //; apply/eqP.",
            "VernacExtend",
            "634a7639ed2fb7caf62757f84400927f5829b7d5"
        ],
        [
            "rewrite !(mulrDr, mulrDl) !mulrA; congr (_ * _ + _ * _).",
            "VernacExtend",
            "a0279e71fd23ac6bde2b8b4402981a70ea719044"
        ],
        [
            "rewrite ![_ * \\n_z]mulrC -!mulrA; congr (_ * _).",
            "VernacExtend",
            "a0279e71fd23ac6bde2b8b4402981a70ea719044"
        ],
        [
            "rewrite ![\\d_y * _]mulrC !mulrA; congr (_ * _ * _).",
            "VernacExtend",
            "a0279e71fd23ac6bde2b8b4402981a70ea719044"
        ],
        [
            "by rewrite [X in _ = X]mulrC mulrA.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "rewrite ![_ * \\n_z]mulrC -!mulrA; congr (_ * _).",
            "VernacExtend",
            "a0279e71fd23ac6bde2b8b4402981a70ea719044"
        ],
        [
            "rewrite ![\\d_x * _]mulrC !mulrA; congr (_ * _ * _).",
            "VernacExtend",
            "a0279e71fd23ac6bde2b8b4402981a70ea719044"
        ],
        [
            "by rewrite -mulrA mulrC [X in X * _] mulrC.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma nonzero1 : 1%:F != 0%:F :> type.",
            "VernacStartTheoremProof",
            "0e66bf3d68bf8815b9b698576b91fea6157026ca"
        ],
        [
            "by rewrite piE equivfE !numden_Ratio ?mul1r ?oner_eq0.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Definition frac_comRingMixin := ComRingMixin mulA mulC mul1_l mul_addl nonzero1.",
            "VernacDefinition",
            "dd41fb665d86ea7a72adcd79dbdecd54a0ae5e26"
        ],
        [
            "Canonical frac_ringType := Eval hnf in RingType type frac_comRingMixin.",
            "VernacDefinition",
            "ee1996017fdbfa02e9ad4434809fa4eee415daa6"
        ],
        [
            "Canonical frac_comRingType := Eval hnf in ComRingType type mulC.",
            "VernacDefinition",
            "8478b3b5a4feb8327eabf9ce655c7e43c5f6bfa7"
        ],
        [
            "Lemma mulV_l : forall a, a != 0%:F -> mul (inv a) a = 1%:F.",
            "VernacStartTheoremProof",
            "625bcf7d506e72fd02f446f8188f405376ab835d"
        ],
        [
            "elim/quotW=> x /=; rewrite !piE.",
            "VernacExtend",
            "de65c8193056a36f6dbb91fe21357bd770b140db"
        ],
        [
            "rewrite /equivf !numden_Ratio ?oner_eq0 // mulr1 mulr0=> nx0.",
            "VernacExtend",
            "3c42b53d0efc26db114b00541ac5e7fcb29e6aeb"
        ],
        [
            "apply/eqmodP; rewrite /= equivfE.",
            "VernacExtend",
            "56c014161b39aecfb3c54301c2409dba4e8e1857"
        ],
        [
            "by rewrite !numden_Ratio ?(oner_eq0, mulf_neq0, domP) // !mulr1 mulrC.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma inv0 : inv 0%:F = 0%:F.",
            "VernacStartTheoremProof",
            "4bf3726da6d9d183d2f1f0f2605832a2c0efa53f"
        ],
        [
            "rewrite !piE /invf !numden_Ratio ?oner_eq0 // /Ratio /insubd.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "do 2?case: insubP; rewrite //= ?eqxx ?oner_eq0 // => u _ hu _.",
            "VernacExtend",
            "094b338bf6c0d13ff5245b8af0ad89a4e08010fb"
        ],
        [
            "by congr \\pi; apply: val_inj; rewrite /= hu.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Definition RatFieldUnitMixin := FieldUnitMixin mulV_l inv0.",
            "VernacDefinition",
            "c5a193ba0b0436eece0d33d6efe7ddd39d24b524"
        ],
        [
            "Canonical frac_unitRingType := Eval hnf in UnitRingType type RatFieldUnitMixin.",
            "VernacDefinition",
            "c3cdedacee282673af188183f819adc476f3fddd"
        ],
        [
            "Canonical frac_comUnitRingType := [comUnitRingType of type].",
            "VernacDefinition",
            "1d5fbb1252487264fa1a77153dbd8363e013e260"
        ],
        [
            "Lemma field_axiom : GRing.Field.mixin_of frac_unitRingType.",
            "VernacStartTheoremProof",
            "f8fb495d0c37c27e776d3af8cd93dc638a32897d"
        ],
        [
            "exact.",
            "VernacExtend",
            "6f8ef2f79d9f700fa94a7c87b5cc8bcbd915dec6"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Definition RatFieldIdomainMixin := (FieldIdomainMixin field_axiom).",
            "VernacDefinition",
            "77b929415b13f5eaf0c17c8794c5bde256e74792"
        ],
        [
            "Canonical frac_idomainType := Eval hnf in IdomainType type (FieldIdomainMixin field_axiom).",
            "VernacDefinition",
            "691b90f8251a7d4e9e906754cc5fc43384944d44"
        ],
        [
            "Canonical frac_fieldType := FieldType type field_axiom.",
            "VernacDefinition",
            "3d60e26929146c294af7320c08c32e0e945bdf4d"
        ],
        [
            "End FracField.",
            "VernacEndSegment",
            "e7c16d69bfebf23817e1fd1208c697b780c8ce55"
        ],
        [
            "End FracField.",
            "VernacEndSegment",
            "e7c16d69bfebf23817e1fd1208c697b780c8ce55"
        ],
        [
            "Notation \"{ 'fraction' T }\" := (FracField.type_of (Phant T)).",
            "VernacNotation",
            "145d95d2c5c361ebb71ab63e9c036624d8e13515"
        ],
        [
            "Notation equivf := (@FracField.equivf _).",
            "VernacSyntacticDefinition",
            "5b752895e3e5c22afa45bf05f572a68b31443c9d"
        ],
        [
            "Hint Resolve denom_ratioP : core.",
            "VernacHints",
            "6af4f28ddc639e62b6de0907e93354c7f9a4b25b"
        ],
        [
            "Section Canonicals.",
            "VernacBeginSection",
            "cd53b43dfaf414fec8f32ac1c2318179a812fd86"
        ],
        [
            "Variable R : idomainType.",
            "VernacAssumption",
            "cbab1d9d04a0bef334944e593ca6e504cfbe949c"
        ],
        [
            "Canonical FracField.frac_quotType.",
            "VernacCanonical",
            "f30eb772c3cf420d7056b5871a8a3399f9955cad"
        ],
        [
            "Canonical FracField.frac_eqType.",
            "VernacCanonical",
            "3504ad24e38d07725937bc3314e6ff33e759ead4"
        ],
        [
            "Canonical FracField.frac_choiceType.",
            "VernacCanonical",
            "ee507e161e6ac11f5fb6e49444ee45820441420a"
        ],
        [
            "Canonical FracField.frac_zmodType.",
            "VernacCanonical",
            "684788571b869768695dc035a9f613761862a37f"
        ],
        [
            "Canonical FracField.frac_ringType.",
            "VernacCanonical",
            "d6d40b54bfd0167373f0af0693f1bdf091bb6fd3"
        ],
        [
            "Canonical FracField.frac_comRingType.",
            "VernacCanonical",
            "0e254e92c8825521590a10e755b5cf3d0b081177"
        ],
        [
            "Canonical FracField.frac_unitRingType.",
            "VernacCanonical",
            "3fe1a972398e410675b24b414649758878e362d9"
        ],
        [
            "Canonical FracField.frac_comUnitRingType.",
            "VernacCanonical",
            "30a74c66b696d4e3367a8eddef4eabf8cbd29c47"
        ],
        [
            "Canonical FracField.frac_idomainType.",
            "VernacCanonical",
            "09b691d4f3657d9dcce7c00d467ec3c4cc102ad2"
        ],
        [
            "Canonical FracField.frac_fieldType.",
            "VernacCanonical",
            "a66c9fb4221e227760a59f00256abc07bc4e280a"
        ],
        [
            "Canonical FracField.tofrac_pi_morph.",
            "VernacCanonical",
            "5aef5514600592b3603e02100b3bac973716ac6e"
        ],
        [
            "Canonical frac_of_quotType := Eval hnf in [quotType of {fraction R}].",
            "VernacDefinition",
            "836395addd2c1ad9deba18f29b4293e7a9eb2889"
        ],
        [
            "Canonical frac_of_eqType := Eval hnf in [eqType of {fraction R}].",
            "VernacDefinition",
            "49b5217b2445be3f2e9ff27469ef8e0e5e74ed47"
        ],
        [
            "Canonical frac_of_choiceType := Eval hnf in [choiceType of {fraction R}].",
            "VernacDefinition",
            "dc725bad4288d04adb76f79c2d7aec25213de89c"
        ],
        [
            "Canonical frac_of_zmodType := Eval hnf in [zmodType of {fraction R}].",
            "VernacDefinition",
            "e604bbc0c629cf2ba410f782d091faf3fd6677fa"
        ],
        [
            "Canonical frac_of_ringType := Eval hnf in [ringType of {fraction R}].",
            "VernacDefinition",
            "380f16dde76e9c0429c9a5eb2c9a650538bf49d9"
        ],
        [
            "Canonical frac_of_comRingType := Eval hnf in [comRingType of {fraction R}].",
            "VernacDefinition",
            "ba4eebed05ffa7da7f29bd382aa6be47d04db7fa"
        ],
        [
            "Canonical frac_of_unitRingType := Eval hnf in [unitRingType of {fraction R}].",
            "VernacDefinition",
            "7d8fd503fffb9e8c2365d46f5ec8e7243671fd8a"
        ],
        [
            "Canonical frac_of_comUnitRingType := Eval hnf in [comUnitRingType of {fraction R}].",
            "VernacDefinition",
            "67e0749ed23b65387629d5dff516e67dd92e3d24"
        ],
        [
            "Canonical frac_of_idomainType := Eval hnf in [idomainType of {fraction R}].",
            "VernacDefinition",
            "e98cacc56f5e922adfc3796ba99a77b094958dc7"
        ],
        [
            "Canonical frac_of_fieldType := Eval hnf in [fieldType of {fraction R}].",
            "VernacDefinition",
            "86a7ecbf045afea60f87015a28e7d4b22bd6ad0d"
        ],
        [
            "End Canonicals.",
            "VernacEndSegment",
            "a4e3fa8ffffcc298c6afb610e020b8c1a69cfcd0"
        ],
        [
            "Section FracFieldTheory.",
            "VernacBeginSection",
            "cebd9bb81b5e143d6fa781961651f364ecc76e8b"
        ],
        [
            "Import FracField.",
            "VernacImport",
            "40af4aefddbda49d403080452c6aaa218f8e0196"
        ],
        [
            "Variable R : idomainType.",
            "VernacAssumption",
            "cbab1d9d04a0bef334944e593ca6e504cfbe949c"
        ],
        [
            "Lemma Ratio_numden (x : {ratio R}) : Ratio \\n_x \\d_x = x.",
            "VernacStartTheoremProof",
            "21e1ae8d6537b306d5e824fc0a7d2383f20da3e1"
        ],
        [
            "exact: FracField.Ratio_numden.",
            "VernacExtend",
            "ce637ff86bafca5d8359473e8c02af644dcbdc43"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Local Notation tofrac := (@FracField.tofrac R).",
            "VernacSyntacticDefinition",
            "4d2bb4b74a8c1b78a986d98bb9d757b98354e497"
        ],
        [
            "Local Notation \"x %:F\" := (tofrac x).",
            "VernacNotation",
            "6e799eeee5afb17dafe0241a2bbc343abfd506a6"
        ],
        [
            "Lemma tofrac_is_additive: additive tofrac.",
            "VernacStartTheoremProof",
            "44d288972356529b579af245ec33a32fd7b90720"
        ],
        [
            "move=> p q /=; unlock tofrac.",
            "VernacExtend",
            "6b722e8eee271f4675b171211ec83fb6f9eb2c52"
        ],
        [
            "rewrite -[X in _ = _ + X]pi_opp -[X in _ = X]pi_add.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "by rewrite /addf /oppf /= !numden_Ratio ?(oner_neq0, mul1r, mulr1).",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Canonical tofrac_additive := Additive tofrac_is_additive.",
            "VernacDefinition",
            "f6aa5160154cb4c47713b0417372e82d7cdd06ed"
        ],
        [
            "Lemma tofrac_is_multiplicative: multiplicative tofrac.",
            "VernacStartTheoremProof",
            "5eb71d67caf2586e26814ab845b105986e8b3daa"
        ],
        [
            "split=> [p q|//]; unlock tofrac; rewrite -[X in _ = X]pi_mul.",
            "VernacExtend",
            "a8c3dfa14d58d327cc905c43c6d142086907a042"
        ],
        [
            "by rewrite /mulf /= !numden_Ratio ?(oner_neq0, mul1r, mulr1).",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Canonical tofrac_rmorphism := AddRMorphism tofrac_is_multiplicative.",
            "VernacDefinition",
            "fae99232a5d468908e1c5f9097f88770436ce0b6"
        ],
        [
            "Lemma tofrac0 : 0%:F = 0.",
            "VernacStartTheoremProof",
            "72beb9781cbcbca13b41153a94d5d64629020ed5"
        ],
        [
            "exact: rmorph0.",
            "VernacExtend",
            "ce637ff86bafca5d8359473e8c02af644dcbdc43"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma tofracN : {morph tofrac: x / - x}.",
            "VernacStartTheoremProof",
            "1e404641fde3be72d1902d4898bf7fe3100f8180"
        ],
        [
            "exact: rmorphN.",
            "VernacExtend",
            "ce637ff86bafca5d8359473e8c02af644dcbdc43"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma tofracD : {morph tofrac: x y / x + y}.",
            "VernacStartTheoremProof",
            "3d2338d53f9b6ff722a2f1f5ed4a06c973ea699b"
        ],
        [
            "exact: rmorphD.",
            "VernacExtend",
            "ce637ff86bafca5d8359473e8c02af644dcbdc43"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma tofracB : {morph tofrac: x y / x - y}.",
            "VernacStartTheoremProof",
            "1bd36dd39b7c0aef35c572afffc74bef74e21bc1"
        ],
        [
            "exact: rmorphB.",
            "VernacExtend",
            "ce637ff86bafca5d8359473e8c02af644dcbdc43"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma tofracMn n : {morph tofrac: x / x *+ n}.",
            "VernacStartTheoremProof",
            "1255e96db2c9f46ee32f9242b800c964ee00cb25"
        ],
        [
            "exact: rmorphMn.",
            "VernacExtend",
            "ce637ff86bafca5d8359473e8c02af644dcbdc43"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma tofracMNn n : {morph tofrac: x / x *- n}.",
            "VernacStartTheoremProof",
            "a9657ae0e929b9ff9bb191fc772eea5f3f0b47b1"
        ],
        [
            "exact: rmorphMNn.",
            "VernacExtend",
            "ce637ff86bafca5d8359473e8c02af644dcbdc43"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma tofrac1 : 1%:F = 1.",
            "VernacStartTheoremProof",
            "c1dfa4a51cf3202d0e371dc836744b64a8ee5bc8"
        ],
        [
            "exact: rmorph1.",
            "VernacExtend",
            "ce637ff86bafca5d8359473e8c02af644dcbdc43"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma tofracM : {morph tofrac: x y / x * y}.",
            "VernacStartTheoremProof",
            "dc481dceecf8f01b2875795c414fb108b618f703"
        ],
        [
            "exact: rmorphM.",
            "VernacExtend",
            "ce637ff86bafca5d8359473e8c02af644dcbdc43"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma tofracX n : {morph tofrac: x / x ^+ n}.",
            "VernacStartTheoremProof",
            "feb68d195e4193d9eb87d0f4da2409d4a01cf925"
        ],
        [
            "exact: rmorphX.",
            "VernacExtend",
            "ce637ff86bafca5d8359473e8c02af644dcbdc43"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma tofrac_eq (p q : R): (p%:F == q%:F) = (p == q).",
            "VernacStartTheoremProof",
            "44be44a4cdbf92113cdc41cc5be56205384836a8"
        ],
        [
            "apply/eqP/eqP=> [|->//]; unlock tofrac=> /eqmodP /eqP /=.",
            "VernacExtend",
            "5fce7e5361004176d6b434b36b4623c7387f70bb"
        ],
        [
            "by rewrite !numden_Ratio ?(oner_eq0, mul1r, mulr1).",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma tofrac_eq0 (p : R): (p%:F == 0) = (p == 0).",
            "VernacStartTheoremProof",
            "21ffe3e49304e0daac4512bbc9cc9762faf580ab"
        ],
        [
            "by rewrite tofrac_eq.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "End FracFieldTheory.",
            "VernacEndSegment",
            "826cd8a62997a3e5800326e5611b1f681f355df7"
        ]
    ],
    "proofs": [
        {
            "name": "denom_ratioP",
            "line_nb": 25,
            "steps": [
                {
                    "command": [
                        "by case.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "numer_Ratio",
            "line_nb": 30,
            "steps": [
                {
                    "command": [
                        "by move=> ny0; rewrite /Ratio /insubd insubT.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "denom_Ratio",
            "line_nb": 33,
            "steps": [
                {
                    "command": [
                        "by move=> ny0; rewrite /Ratio /insubd insubT.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "RatioP",
            "line_nb": 38,
            "steps": [
                {
                    "command": [
                        "rewrite /Ratio /insubd; case: insubP=> /= [x /= d_neq0 hx|].",
                        "VernacExtend",
                        "712d339e99ee17eb7d5033e19ac614eb3ca6b532"
                    ]
                },
                {
                    "command": [
                        "have ->: x = @mkRatio (n, d) d_neq0 by apply: val_inj.",
                        "VernacExtend",
                        "406cde1174359c53bf162a2a18c4eede395555f9"
                    ]
                },
                {
                    "command": [
                        "by constructor.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "by rewrite negbK=> /eqP hx; rewrite {2}hx; constructor.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "Ratio0",
            "line_nb": 44,
            "steps": [
                {
                    "command": [
                        "by rewrite /Ratio /insubd; case: insubP; rewrite //= eqxx.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "equivfE",
            "line_nb": 61,
            "steps": [
                {
                    "command": [
                        "by [].",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "equivf_refl",
            "line_nb": 64,
            "steps": [
                {
                    "command": [
                        "by move=> x; rewrite /equivf mulrC.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "equivf_sym",
            "line_nb": 67,
            "steps": [
                {
                    "command": [
                        "by move=> x y; rewrite /equivf eq_sym; congr (_==_); rewrite mulrC.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "equivf_trans",
            "line_nb": 70,
            "steps": [
                {
                    "command": [
                        "move=> [x Px] [y Py] [z Pz]; rewrite /equivf /= mulrC => /eqP xy /eqP yz.",
                        "VernacExtend",
                        "8261237f0cda1915a4077c28869831c5329103ce"
                    ]
                },
                {
                    "command": [
                        "by rewrite -(inj_eq (mulfI Px)) mulrA xy -mulrA yz mulrCA.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "equivf_def",
            "line_nb": 86,
            "steps": [
                {
                    "command": [
                        "by rewrite eqmodE.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "equivf_r",
            "line_nb": 89,
            "steps": [
                {
                    "command": [
                        "by apply/eqP; rewrite -equivf_def reprK.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "equivf_l",
            "line_nb": 92,
            "steps": [
                {
                    "command": [
                        "by apply/eqP; rewrite -equivf_def reprK.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "numer0",
            "line_nb": 95,
            "steps": [
                {
                    "command": [
                        "by rewrite eqmodE /= !equivfE // mulr1 mulr0.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "Ratio_numden",
            "line_nb": 98,
            "steps": [
                {
                    "command": [
                        "case=> [[n d] /= nd]; rewrite /Ratio /insubd; apply: val_inj=> /=.",
                        "VernacExtend",
                        "7b10d760ecce4015b43936eb8ee3a43374e85678"
                    ]
                },
                {
                    "command": [
                        "by case: insubP=> //=; rewrite nd.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "pi_opp",
            "line_nb": 120,
            "steps": [
                {
                    "command": [
                        "move=> x; unlock opp; apply/eqmodP; rewrite /= /equivf /oppf /=.",
                        "VernacExtend",
                        "c9f9ca35a24a7c1980ca3c1f7dbf4074d4301015"
                    ]
                },
                {
                    "command": [
                        "by rewrite !numden_Ratio ?(domP,mulf_neq0) // mulNr mulrN -equivf_r.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "pi_mul",
            "line_nb": 127,
            "steps": [
                {
                    "command": [
                        "move=> x y; unlock mul; apply/eqmodP=> /=.",
                        "VernacExtend",
                        "b18dfd151fde64ab592b0cd3a5cdb6865c16f217"
                    ]
                },
                {
                    "command": [
                        "rewrite equivfE /= /addf /= !numden_Ratio ?mulf_neq0 ?domP //.",
                        "VernacExtend",
                        "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
                    ]
                },
                {
                    "command": [
                        "rewrite mulrAC !mulrA -mulrA equivf_r -equivf_l.",
                        "VernacExtend",
                        "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
                    ]
                },
                {
                    "command": [
                        "by rewrite mulrA ![_ * \\d_y]mulrC !mulrA.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "pi_inv",
            "line_nb": 136,
            "steps": [
                {
                    "command": [
                        "move=> x; unlock inv; apply/eqmodP=> /=; rewrite equivfE /invf eq_sym.",
                        "VernacExtend",
                        "c9f9ca35a24a7c1980ca3c1f7dbf4074d4301015"
                    ]
                },
                {
                    "command": [
                        "do 2?case: RatioP=> /= [/eqP|]; rewrite ?mul0r ?mul1r -?equivf_def ?numer0 ?reprK //.",
                        "VernacExtend",
                        "f8a765f8b8158bfb954eb4eeb20c0cb6489ecdb4"
                    ]
                },
                {
                    "command": [
                        "by move=> hx /eqP hx'; rewrite hx' eqxx in hx.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "by move=> /eqP ->; rewrite eqxx.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "addA",
            "line_nb": 143,
            "steps": [
                {
                    "command": [
                        "elim/quotW=> x; elim/quotW=> y; elim/quotW=> z; rewrite !piE.",
                        "VernacExtend",
                        "9572fe72a2f3bd006515278f360e2480c39b52e9"
                    ]
                },
                {
                    "command": [
                        "rewrite /addf /= !numden_Ratio ?mulf_neq0 ?domP // !mulrDl !mulrA !addrA.",
                        "VernacExtend",
                        "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
                    ]
                },
                {
                    "command": [
                        "by congr (\\pi (Ratio (_ + _ + _) _)); rewrite mulrAC.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "addC",
            "line_nb": 148,
            "steps": [
                {
                    "command": [
                        "by elim/quotW=> x; elim/quotW=> y; rewrite !piE /addf addrC [\\d__ * _]mulrC.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "add0_l",
            "line_nb": 151,
            "steps": [
                {
                    "command": [
                        "elim/quotW=> x; rewrite !piE /addf !numden_Ratio ?oner_eq0 //.",
                        "VernacExtend",
                        "de65c8193056a36f6dbb91fe21357bd770b140db"
                    ]
                },
                {
                    "command": [
                        "by rewrite mul0r mul1r mulr1 add0r Ratio_numden.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "addN_l",
            "line_nb": 155,
            "steps": [
                {
                    "command": [
                        "elim/quotW=> x; apply/eqP; rewrite piE /equivf.",
                        "VernacExtend",
                        "8c9e5024ec19e13281e0187dab3d65b93b116a6a"
                    ]
                },
                {
                    "command": [
                        "rewrite /addf /oppf !numden_Ratio ?(oner_eq0, mulf_neq0, domP) //.",
                        "VernacExtend",
                        "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
                    ]
                },
                {
                    "command": [
                        "by rewrite mulr1 mulr0 mulNr addNr.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "mulA",
            "line_nb": 162,
            "steps": [
                {
                    "command": [
                        "elim/quotW=> x; elim/quotW=> y; elim/quotW=> z; rewrite !piE.",
                        "VernacExtend",
                        "9572fe72a2f3bd006515278f360e2480c39b52e9"
                    ]
                },
                {
                    "command": [
                        "by rewrite /mulf !numden_Ratio ?mulf_neq0 ?domP // !mulrA.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "mulC",
            "line_nb": 166,
            "steps": [
                {
                    "command": [
                        "elim/quotW=> x; elim/quotW=> y; rewrite !piE /mulf.",
                        "VernacExtend",
                        "85063f5d306f5a99a8097b17f99eda3b8e50e4bd"
                    ]
                },
                {
                    "command": [
                        "by rewrite [_ * (\\d_x)]mulrC [_ * (\\n_x)]mulrC.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "mul1_l",
            "line_nb": 170,
            "steps": [
                {
                    "command": [
                        "elim/quotW=> x; rewrite !piE /mulf.",
                        "VernacExtend",
                        "de65c8193056a36f6dbb91fe21357bd770b140db"
                    ]
                },
                {
                    "command": [
                        "by rewrite !numden_Ratio ?oner_eq0 // !mul1r Ratio_numden.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "nonzero1",
            "line_nb": 185,
            "steps": [
                {
                    "command": [
                        "by rewrite piE equivfE !numden_Ratio ?mul1r ?oner_eq0.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "mulV_l",
            "line_nb": 191,
            "steps": [
                {
                    "command": [
                        "elim/quotW=> x /=; rewrite !piE.",
                        "VernacExtend",
                        "de65c8193056a36f6dbb91fe21357bd770b140db"
                    ]
                },
                {
                    "command": [
                        "rewrite /equivf !numden_Ratio ?oner_eq0 // mulr1 mulr0=> nx0.",
                        "VernacExtend",
                        "3c42b53d0efc26db114b00541ac5e7fcb29e6aeb"
                    ]
                },
                {
                    "command": [
                        "apply/eqmodP; rewrite /= equivfE.",
                        "VernacExtend",
                        "56c014161b39aecfb3c54301c2409dba4e8e1857"
                    ]
                },
                {
                    "command": [
                        "by rewrite !numden_Ratio ?(oner_eq0, mulf_neq0, domP) // !mulr1 mulrC.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "inv0",
            "line_nb": 197,
            "steps": [
                {
                    "command": [
                        "rewrite !piE /invf !numden_Ratio ?oner_eq0 // /Ratio /insubd.",
                        "VernacExtend",
                        "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
                    ]
                },
                {
                    "command": [
                        "do 2?case: insubP; rewrite //= ?eqxx ?oner_eq0 // => u _ hu _.",
                        "VernacExtend",
                        "094b338bf6c0d13ff5245b8af0ad89a4e08010fb"
                    ]
                },
                {
                    "command": [
                        "by congr \\pi; apply: val_inj; rewrite /= hu.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "field_axiom",
            "line_nb": 205,
            "steps": [
                {
                    "command": [
                        "exact.",
                        "VernacExtend",
                        "6f8ef2f79d9f700fa94a7c87b5cc8bcbd915dec6"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "tofrac_is_additive",
            "line_nb": 248,
            "steps": [
                {
                    "command": [
                        "move=> p q /=; unlock tofrac.",
                        "VernacExtend",
                        "6b722e8eee271f4675b171211ec83fb6f9eb2c52"
                    ]
                },
                {
                    "command": [
                        "rewrite -[X in _ = _ + X]pi_opp -[X in _ = X]pi_add.",
                        "VernacExtend",
                        "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
                    ]
                },
                {
                    "command": [
                        "by rewrite /addf /oppf /= !numden_Ratio ?(oner_neq0, mul1r, mulr1).",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "tofrac_is_multiplicative",
            "line_nb": 254,
            "steps": [
                {
                    "command": [
                        "split=> [p q|//]; unlock tofrac; rewrite -[X in _ = X]pi_mul.",
                        "VernacExtend",
                        "a8c3dfa14d58d327cc905c43c6d142086907a042"
                    ]
                },
                {
                    "command": [
                        "by rewrite /mulf /= !numden_Ratio ?(oner_neq0, mul1r, mulr1).",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "tofrac0",
            "line_nb": 259,
            "steps": [
                {
                    "command": [
                        "exact: rmorph0.",
                        "VernacExtend",
                        "ce637ff86bafca5d8359473e8c02af644dcbdc43"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "tofracN",
            "line_nb": 262,
            "steps": [
                {
                    "command": [
                        "exact: rmorphN.",
                        "VernacExtend",
                        "ce637ff86bafca5d8359473e8c02af644dcbdc43"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "tofracD",
            "line_nb": 265,
            "steps": [
                {
                    "command": [
                        "exact: rmorphD.",
                        "VernacExtend",
                        "ce637ff86bafca5d8359473e8c02af644dcbdc43"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "tofracB",
            "line_nb": 268,
            "steps": [
                {
                    "command": [
                        "exact: rmorphB.",
                        "VernacExtend",
                        "ce637ff86bafca5d8359473e8c02af644dcbdc43"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "tofracMn",
            "line_nb": 271,
            "steps": [
                {
                    "command": [
                        "exact: rmorphMn.",
                        "VernacExtend",
                        "ce637ff86bafca5d8359473e8c02af644dcbdc43"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "tofracMNn",
            "line_nb": 274,
            "steps": [
                {
                    "command": [
                        "exact: rmorphMNn.",
                        "VernacExtend",
                        "ce637ff86bafca5d8359473e8c02af644dcbdc43"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "tofrac1",
            "line_nb": 277,
            "steps": [
                {
                    "command": [
                        "exact: rmorph1.",
                        "VernacExtend",
                        "ce637ff86bafca5d8359473e8c02af644dcbdc43"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "tofracM",
            "line_nb": 280,
            "steps": [
                {
                    "command": [
                        "exact: rmorphM.",
                        "VernacExtend",
                        "ce637ff86bafca5d8359473e8c02af644dcbdc43"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "tofracX",
            "line_nb": 283,
            "steps": [
                {
                    "command": [
                        "exact: rmorphX.",
                        "VernacExtend",
                        "ce637ff86bafca5d8359473e8c02af644dcbdc43"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "tofrac_eq",
            "line_nb": 286,
            "steps": [
                {
                    "command": [
                        "apply/eqP/eqP=> [|->//]; unlock tofrac=> /eqmodP /eqP /=.",
                        "VernacExtend",
                        "5fce7e5361004176d6b434b36b4623c7387f70bb"
                    ]
                },
                {
                    "command": [
                        "by rewrite !numden_Ratio ?(oner_eq0, mul1r, mulr1).",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "tofrac_eq0",
            "line_nb": 290,
            "steps": [
                {
                    "command": [
                        "by rewrite tofrac_eq.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        }
    ]
}