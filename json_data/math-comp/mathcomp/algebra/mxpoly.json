{
    "filename": "mathcomp/algebra/mxpoly.v",
    "coq_project": "math-comp",
    "vernac_cmds": [
        [
            "Require Import mathcomp.ssreflect.ssreflect.",
            "VernacRequire",
            "85e251063dc2b5a9653f7bb76dcd176ed36b42a9"
        ],
        [
            "From mathcomp Require Import ssrfun ssrbool eqtype ssrnat seq div fintype tuple.",
            "VernacRequire",
            "d84512001bc938826ba3c64515b7e072c8f2a575"
        ],
        [
            "From mathcomp Require Import finfun bigop fingroup perm ssralg zmodp matrix mxalgebra.",
            "VernacRequire",
            "18569781fc3601baeaf53bc7fbe46eb530b2abb5"
        ],
        [
            "From mathcomp Require Import poly polydiv.",
            "VernacRequire",
            "1757994ec018d91a1cd6094118c1cbf30d40e91f"
        ],
        [
            "Set Implicit Arguments.",
            "VernacSetOption",
            "9e84ff8896f028601d8aded48c1d4aebe60aa584"
        ],
        [
            "Unset Strict Implicit.",
            "VernacUnsetOption",
            "2842adaf6959318f2042805935c46f513bdc0348"
        ],
        [
            "Unset Printing Implicit Defensive.",
            "VernacUnsetOption",
            "444e5f0be4b25d9b1fd556943a447ec10046d151"
        ],
        [
            "Import GRing.Theory.",
            "VernacImport",
            "a0fcf55540300b9b0e54bd28a113c5228ff530f4"
        ],
        [
            "Import Monoid.Theory.",
            "VernacImport",
            "668847cb44619a233f3430564d48b00fafb02450"
        ],
        [
            "Local Open Scope ring_scope.",
            "VernacOpenCloseScope",
            "fb9da4a291533574d328be8c8a69d90a14641928"
        ],
        [
            "Import Pdiv.Idomain.",
            "VernacImport",
            "af7cad478afdc0c38a1a5e0c4d81573dd53c2568"
        ],
        [
            "Section RowPoly.",
            "VernacBeginSection",
            "5d582e32aa5860cb2aa64ff37d6df9e81f844693"
        ],
        [
            "Variables (R : ringType) (d : nat).",
            "VernacAssumption",
            "0a82c94b37538b0ddf50cf15dbbc55844a383d2b"
        ],
        [
            "Implicit Types u v : 'rV[R]_d.",
            "VernacReserve",
            "a37941dde692164445f8f221b6150712a6e08f1d"
        ],
        [
            "Implicit Types p q : {poly R}.",
            "VernacReserve",
            "e955cd8bb2af797f65cbef5dadd14cef37523981"
        ],
        [
            "Definition rVpoly v := \\poly_(k < d) (if insub k is Some i then v 0 i else 0).",
            "VernacDefinition",
            "31201917568cc44f16a3d9bca4f1cac5fcf0c2ec"
        ],
        [
            "Definition poly_rV p := \\row_(i < d) p`_i.",
            "VernacDefinition",
            "1d7e461945f051309dfedf455758789ed22e9d09"
        ],
        [
            "Lemma coef_rVpoly v k : (rVpoly v)`_k = if insub k is Some i then v 0 i else 0.",
            "VernacStartTheoremProof",
            "38effb5c7842c3aa595832eeff6abd106d425acd"
        ],
        [
            "by rewrite coef_poly; case: insubP => [i ->|]; rewrite ?if_same.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma coef_rVpoly_ord v (i : 'I_d) : (rVpoly v)`_i = v 0 i.",
            "VernacStartTheoremProof",
            "57d1b84f4576bcbef53c9796f99c388059e00afc"
        ],
        [
            "by rewrite coef_rVpoly valK.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma rVpoly_delta i : rVpoly (delta_mx 0 i) = 'X^i.",
            "VernacStartTheoremProof",
            "6a5cae59e8e8764c96b3fabde71c47c6d8300c54"
        ],
        [
            "apply/polyP=> j; rewrite coef_rVpoly coefXn.",
            "VernacExtend",
            "56c014161b39aecfb3c54301c2409dba4e8e1857"
        ],
        [
            "case: insubP => [k _ <- | j_ge_d]; first by rewrite mxE.",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "by case: eqP j_ge_d => // ->; rewrite ltn_ord.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma rVpolyK : cancel rVpoly poly_rV.",
            "VernacStartTheoremProof",
            "ed3bd4284c62fd93ca5d452e09c1f908aba7da14"
        ],
        [
            "by move=> u; apply/rowP=> i; rewrite mxE coef_rVpoly_ord.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma poly_rV_K p : size p <= d -> rVpoly (poly_rV p) = p.",
            "VernacStartTheoremProof",
            "f9c54188051810eec2329260b907bb836f70845e"
        ],
        [
            "move=> le_p_d; apply/polyP=> k; rewrite coef_rVpoly.",
            "VernacExtend",
            "f7feb259d6220ca40e8a86b90bd06f137aa140ac"
        ],
        [
            "case: insubP => [i _ <- | ]; first by rewrite mxE.",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "by rewrite -ltnNge => le_d_l; rewrite nth_default ?(leq_trans le_p_d).",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma poly_rV_is_linear : linear poly_rV.",
            "VernacStartTheoremProof",
            "55450d29e6d631c12e369f78a4380535ab1df6b5"
        ],
        [
            "by move=> a p q; apply/rowP=> i; rewrite !mxE coefD coefZ.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Canonical poly_rV_additive := Additive poly_rV_is_linear.",
            "VernacDefinition",
            "6d7239180ec677e993b0ad55332436da516471a2"
        ],
        [
            "Canonical poly_rV_linear := Linear poly_rV_is_linear.",
            "VernacDefinition",
            "8570ee16949679526115e385b3c35f7da15ce373"
        ],
        [
            "Lemma rVpoly_is_linear : linear rVpoly.",
            "VernacStartTheoremProof",
            "c0712c94baf7534a83b3a2b221ba3f6185c9131a"
        ],
        [
            "move=> a u v; apply/polyP=> k; rewrite coefD coefZ !coef_rVpoly.",
            "VernacExtend",
            "f7feb259d6220ca40e8a86b90bd06f137aa140ac"
        ],
        [
            "by case: insubP => [i _ _ | _]; rewrite ?mxE // mulr0 addr0.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Canonical rVpoly_additive := Additive rVpoly_is_linear.",
            "VernacDefinition",
            "4ad24eaae868cb155f2ccf5a6b64435f1d31c23b"
        ],
        [
            "Canonical rVpoly_linear := Linear rVpoly_is_linear.",
            "VernacDefinition",
            "de5fb07cca8a539646587ee623c2a3ab11947171"
        ],
        [
            "End RowPoly.",
            "VernacEndSegment",
            "59ee79d6e5f967c8be39257f87065cf322b3dcb1"
        ],
        [
            "Prenex Implicits rVpoly rVpolyK.",
            "VernacExtend",
            "5096c1e50f9dd1333f1f876961a5d695adecdb0e"
        ],
        [
            "Arguments poly_rV {R d}.",
            "VernacArguments",
            "d71da2edef1a6e40c1954187e231ede59a1e014f"
        ],
        [
            "Arguments poly_rV_K {R d} [p] le_p_d.",
            "VernacArguments",
            "4b141172fb0d9ce54639987b8c4ed243dbeda88e"
        ],
        [
            "Section Resultant.",
            "VernacBeginSection",
            "fed16d5042bd256b5795fe21a12072cefb4697b5"
        ],
        [
            "Variables (R : ringType) (p q : {poly R}).",
            "VernacAssumption",
            "71a021ee9a25a07d105605acc2d607818036f251"
        ],
        [
            "Let dS := ((size q).-1 + (size p).-1)%N.",
            "VernacDefinition",
            "11d58712c669c5e22bb1810272c5e04afa95613e"
        ],
        [
            "Local Notation band r := (lin1_mx (poly_rV \\o r \\o* rVpoly)).",
            "VernacSyntacticDefinition",
            "cc344937b3205ae569dd1a233dfeb6c57b8febb7"
        ],
        [
            "Definition Sylvester_mx : 'M[R]_dS := col_mx (band p) (band q).",
            "VernacDefinition",
            "8ec6b309ba98dbefb696fc9b07604e1d05014f12"
        ],
        [
            "Lemma Sylvester_mxE (i j : 'I_dS) : let S_ r k := r`_(j - k) *+ (k <= j) in Sylvester_mx i j = match split i with inl k => S_ p k | inr k => S_ q k end.",
            "VernacStartTheoremProof",
            "85694360ac5e8fef6ec10dad44c81c07b537240a"
        ],
        [
            "move=> S_; rewrite mxE; case: {i}(split i) => i; rewrite !mxE /=; by rewrite rVpoly_delta coefXnM ltnNge if_neg -mulrb.",
            "VernacExtend",
            "0deecc1be2a51fd1530b09013518982b43a5a96c"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Definition resultant := \\det Sylvester_mx.",
            "VernacDefinition",
            "33ef8e6c4b43ad362cd2109963eb65d6cd0ba7cf"
        ],
        [
            "End Resultant.",
            "VernacEndSegment",
            "c57d59f810b4936a7ed1d5f1a072a03ab3343786"
        ],
        [
            "Prenex Implicits Sylvester_mx resultant.",
            "VernacExtend",
            "25cce0ef1b4dfb0ac079dde038833b43339256dd"
        ],
        [
            "Lemma resultant_in_ideal (R : comRingType) (p q : {poly R}) : size p > 1 -> size q > 1 -> {uv : {poly R} * {poly R} | size uv.1 < size q /\\ size uv.2 < size p & (resultant p q)%:P = uv.1 * p + uv.2 * q}.",
            "VernacStartTheoremProof",
            "14b5080d66a3a2a6c48b03e720dc3f1e695da2ae"
        ],
        [
            "move=> p_nc q_nc; pose dp := (size p).-1; pose dq := (size q).-1.",
            "VernacExtend",
            "81927515fc3ecfba885b46cf7f9013852021d404"
        ],
        [
            "pose S := Sylvester_mx p q; pose dS := (dq + dp)%N.",
            "VernacExtend",
            "311b833fadff89b2f7ed817d3cd7cb6971c96a1e"
        ],
        [
            "have dS_gt0: dS > 0 by rewrite /dS /dq -(subnKC q_nc).",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "pose j0 := Ordinal dS_gt0.",
            "VernacExtend",
            "3c5f04de94609049d978298aa02ff35fb35ea7c7"
        ],
        [
            "pose Ss0 := col_mx (p *: \\col_(i < dq) 'X^i) (q *: \\col_(i < dp) 'X^i).",
            "VernacExtend",
            "3c5f04de94609049d978298aa02ff35fb35ea7c7"
        ],
        [
            "pose Ss := \\matrix_(i, j) (if j == j0 then Ss0 i 0 else (S i j)%:P).",
            "VernacExtend",
            "3c5f04de94609049d978298aa02ff35fb35ea7c7"
        ],
        [
            "pose u ds s := \\sum_(i < ds) cofactor Ss (s i) j0 * 'X^i.",
            "VernacExtend",
            "3c5f04de94609049d978298aa02ff35fb35ea7c7"
        ],
        [
            "exists (u _ (lshift dp), u _ ((rshift dq) _)).",
            "VernacExtend",
            "f075dba68c6d292dffea63b5df9d3289e6d3beb3"
        ],
        [
            "suffices sz_u ds s: ds > 1 -> size (u ds.-1 s) < ds by rewrite !sz_u.",
            "VernacExtend",
            "290ed488b5562e885aa2cac56f3a69b4faa0eaa6"
        ],
        [
            "move/ltn_predK=> {2}<-; apply: leq_trans (size_sum _ _ _) _.",
            "VernacExtend",
            "d6ebf3361f380a12d5c2c9bbb7ea363132c48b36"
        ],
        [
            "apply/bigmax_leqP=> i _.",
            "VernacExtend",
            "4bd6fa79b17bcd2bfb7af091fb325367a20385d6"
        ],
        [
            "have ->: cofactor Ss (s i) j0 = (cofactor S (s i) j0)%:P.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "rewrite rmorphM rmorph_sign -det_map_mx; congr (_ * \\det _).",
            "VernacExtend",
            "a0279e71fd23ac6bde2b8b4402981a70ea719044"
        ],
        [
            "by apply/matrixP=> i' j'; rewrite !mxE.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "apply: leq_trans (size_mul_leq _ _) (leq_trans _ (valP i)).",
            "VernacExtend",
            "4bd6fa79b17bcd2bfb7af091fb325367a20385d6"
        ],
        [
            "by rewrite size_polyC size_polyXn addnS /= -add1n leq_add2r leq_b1.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "transitivity (\\det Ss); last first.",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "rewrite (expand_det_col Ss j0) big_split_ord !big_distrl /=.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "by congr (_ + _); apply: eq_bigr => i _; rewrite mxE eqxx (col_mxEu, col_mxEd) !mxE mulrC mulrA mulrAC.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "pose S_ j1 := map_mx polyC (\\matrix_(i, j) S i (if j == j0 then j1 else j)).",
            "VernacExtend",
            "3c5f04de94609049d978298aa02ff35fb35ea7c7"
        ],
        [
            "pose Ss0_ i dj := \\poly_(j < dj) S i (insubd j0 j).",
            "VernacExtend",
            "3c5f04de94609049d978298aa02ff35fb35ea7c7"
        ],
        [
            "pose Ss_ dj := \\matrix_(i, j) (if j == j0 then Ss0_ i dj else (S i j)%:P).",
            "VernacExtend",
            "3c5f04de94609049d978298aa02ff35fb35ea7c7"
        ],
        [
            "have{Ss u} ->: Ss = Ss_ dS.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "apply/matrixP=> i j; rewrite mxE [in X in _ = X]mxE; case: (j == j0) => {j}//.",
            "VernacExtend",
            "5caed936835e366e9e533d8f19382dcfedbf86d4"
        ],
        [
            "apply/polyP=> k; rewrite coef_poly Sylvester_mxE mxE.",
            "VernacExtend",
            "56c014161b39aecfb3c54301c2409dba4e8e1857"
        ],
        [
            "have [k_ge_dS | k_lt_dS] := leqP dS k.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "case: (split i) => {i}i; rewrite !mxE coefMXn; case: ifP => // /negbT; rewrite -ltnNge ltnS => hi.",
            "VernacExtend",
            "23a652d5d7305439b0679e7d89b6b78edd9bba7b"
        ],
        [
            "apply: (leq_sizeP _ _ (leqnn (size p))); rewrite -(ltn_predK p_nc).",
            "VernacExtend",
            "56c014161b39aecfb3c54301c2409dba4e8e1857"
        ],
        [
            "by rewrite ltn_subRL (leq_trans _ k_ge_dS) // ltn_add2r.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "-",
            "VernacBullet",
            "581cab4bf49fa4b495e569bbda96fc8d28fddcc0"
        ],
        [
            "apply: (leq_sizeP _ _ (leqnn (size q))); rewrite -(ltn_predK q_nc).",
            "VernacExtend",
            "56c014161b39aecfb3c54301c2409dba4e8e1857"
        ],
        [
            "by rewrite ltn_subRL (leq_trans _ k_ge_dS) // addnC ltn_add2l.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "by rewrite insubdK //; case: (split i) => {i}i; rewrite !mxE coefMXn; case: leqP.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "elim: {-2}dS (leqnn dS) (dS_gt0) => // dj IHj dj_lt_dS _.",
            "VernacExtend",
            "e686a1895f1799b840b76242f931100819a9ad6c"
        ],
        [
            "pose j1 := Ordinal dj_lt_dS; pose rj0T (A : 'M[{poly R}]_dS) := row j0 A^T.",
            "VernacExtend",
            "311b833fadff89b2f7ed817d3cd7cb6971c96a1e"
        ],
        [
            "have: rj0T (Ss_ dj.+1) = 'X^dj *: rj0T (S_ j1) + 1 *: rj0T (Ss_ dj).",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "apply/rowP=> i; apply/polyP=> k; rewrite scale1r !(Sylvester_mxE, mxE) eqxx.",
            "VernacExtend",
            "7d4450169cd8610cf3ff90cd2eeb2f84258ab13d"
        ],
        [
            "rewrite coefD coefXnM coefC !coef_poly ltnS subn_eq0 ltn_neqAle andbC.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "case: (leqP k dj) => [k_le_dj | k_gt_dj] /=; last by rewrite addr0.",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "rewrite Sylvester_mxE insubdK; last exact: leq_ltn_trans (dj_lt_dS).",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "by case: eqP => [-> | _]; rewrite (addr0, add0r).",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "rewrite -det_tr => /determinant_multilinear->; try by apply/matrixP=> i j; rewrite !mxE eq_sym (negPf (neq_lift _ _)).",
            "VernacExtend",
            "9e1ddabc19dbcde2cd0d438099a629085ca31577"
        ],
        [
            "have [dj0 | dj_gt0] := posnP dj; rewrite ?dj0 !mul1r.",
            "VernacExtend",
            "aa9d5fbc682ed874cd64b2543ca6c859b978e924"
        ],
        [
            "rewrite !det_tr det_map_mx addrC (expand_det_col _ j0) big1 => [|i _].",
            "VernacExtend",
            "3c42b53d0efc26db114b00541ac5e7fcb29e6aeb"
        ],
        [
            "rewrite add0r; congr (\\det _)%:P.",
            "VernacExtend",
            "a0279e71fd23ac6bde2b8b4402981a70ea719044"
        ],
        [
            "apply/matrixP=> i j; rewrite [in X in _ = X]mxE; case: eqP => // ->.",
            "VernacExtend",
            "5caed936835e366e9e533d8f19382dcfedbf86d4"
        ],
        [
            "by congr (S i _); apply: val_inj.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "by rewrite mxE /= [Ss0_ _ _]poly_def big_ord0 mul0r.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "have /determinant_alternate->: j1 != j0 by rewrite -val_eqE -lt0n.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "by rewrite mulr0 add0r det_tr IHj // ltnW.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "by move=> i; rewrite !mxE if_same.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma resultant_eq0 (R : idomainType) (p q : {poly R}) : (resultant p q == 0) = (size (gcdp p q) > 1).",
            "VernacStartTheoremProof",
            "95098f179d4a7fc80fa8acfe7e1fa3c89d047906"
        ],
        [
            "have dvdpp := dvdpp; set r := gcdp p q.",
            "VernacExtend",
            "81881a093b2294c76be3b432fbe83612064d7bc9"
        ],
        [
            "pose dp := (size p).-1; pose dq := (size q).-1.",
            "VernacExtend",
            "311b833fadff89b2f7ed817d3cd7cb6971c96a1e"
        ],
        [
            "have /andP[r_p r_q]: (r %| p) && (r %| q) by rewrite -dvdp_gcd.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "apply/det0P/idP=> [[uv nz_uv] | r_nonC].",
            "VernacExtend",
            "4bd6fa79b17bcd2bfb7af091fb325367a20385d6"
        ],
        [
            "have [p0 _ | p_nz] := eqVneq p 0.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "have: dq + dp > 0.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "rewrite lt0n; apply: contraNneq nz_uv => dqp0.",
            "VernacExtend",
            "634a7639ed2fb7caf62757f84400927f5829b7d5"
        ],
        [
            "by rewrite dqp0 in uv *; rewrite [uv]thinmx0.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "by rewrite /dp /dq /r p0 size_poly0 addn0 gcd0p -subn1 subn_gt0.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "do [rewrite -[uv]hsubmxK -{1}row_mx0 mul_row_col !mul_rV_lin1 /=] in nz_uv *.",
            "VernacExtend",
            "2ed5ae5c7a1513e882f170a2462d7a7c3c1ca435"
        ],
        [
            "set u := rVpoly _; set v := rVpoly _; pose m := gcdp (v * p) (v * q).",
            "VernacExtend",
            "a1c8e8beaa6287bdfa0be3460af1feb609f7237a"
        ],
        [
            "have lt_vp: size v < size p by rewrite (polySpred p_nz) ltnS size_poly.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "move/(congr1 rVpoly)/eqP; rewrite -linearD linear0 poly_rV_K; last first.",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "rewrite (leq_trans (size_add _ _)) // geq_max.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "rewrite !(leq_trans (size_mul_leq _ _)) // -subn1 leq_subLR.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "by rewrite addnC addnA leq_add ?leqSpred ?size_poly.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "by rewrite addnCA leq_add ?leqSpred ?size_poly.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "rewrite addrC addr_eq0 => /eqP vq_up.",
            "VernacExtend",
            "3c42b53d0efc26db114b00541ac5e7fcb29e6aeb"
        ],
        [
            "have nz_v: v != 0.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "apply: contraNneq nz_uv => v0; apply/eqP.",
            "VernacExtend",
            "8d9dae45eeb3a769b8a865cef8ae476451f63802"
        ],
        [
            "congr row_mx; apply: (can_inj rVpolyK); rewrite linear0 // -/u.",
            "VernacExtend",
            "e02c5e37d306c924c86ea325376d95ddc0d1741e"
        ],
        [
            "by apply: contra_eq vq_up; rewrite v0 mul0r -addr_eq0 add0r => /mulf_neq0->.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "have r_nz: r != 0 := dvdpN0 r_p p_nz.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "have /dvdpP [[c w] /= nz_c wv]: v %| m by rewrite dvdp_gcd !dvdp_mulr.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "have m_wd d: m %| v * d -> w %| d.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "case/dvdpP=> [[k f]] /= nz_k /(congr1 ( *:%R c)).",
            "VernacExtend",
            "e00fff71ff314c991514fc71c41a3556702e444a"
        ],
        [
            "rewrite mulrC scalerA scalerAl scalerAr wv mulrA => /(mulIf nz_v)def_fw.",
            "VernacExtend",
            "3c42b53d0efc26db114b00541ac5e7fcb29e6aeb"
        ],
        [
            "by apply/dvdpP; exists (c * k, f); rewrite //= mulf_neq0.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "have w_r: w %| r by rewrite dvdp_gcd !m_wd ?dvdp_gcdl ?dvdp_gcdr.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "have w_nz: w != 0 := dvdpN0 w_r r_nz.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "have p_m: p %| m by rewrite dvdp_gcd vq_up -mulNr !dvdp_mull.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "rewrite (leq_trans _ (dvdp_leq r_nz w_r)) // -(ltn_add2l (size v)).",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "rewrite addnC -ltn_subRL subn1 -size_mul // mulrC -wv size_scale //.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "rewrite (leq_trans lt_vp) // dvdp_leq // -size_poly_eq0.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "by rewrite -(size_scale _ nz_c) size_poly_eq0 wv mulf_neq0.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "have [[c p'] /= nz_c p'r] := dvdpP _ _ r_p.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "have [[k q'] /= nz_k q'r] := dvdpP _ _ r_q.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "have def_r := subnKC r_nonC; have r_nz: r != 0 by rewrite -size_poly_eq0 -def_r.",
            "VernacExtend",
            "6e9d14df7d32ea0bf863301df3f6cb2d4e1b8e96"
        ],
        [
            "have le_p'_dp: size p' <= dp.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "have [-> | nz_p'] := eqVneq p' 0; first by rewrite size_poly0.",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "by rewrite /dp -(size_scale p nz_c) p'r size_mul // addnC -def_r leq_addl.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "have le_q'_dq: size q' <= dq.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "have [-> | nz_q'] := eqVneq q' 0; first by rewrite size_poly0.",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "by rewrite /dq -(size_scale q nz_k) q'r size_mul // addnC -def_r leq_addl.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "exists (row_mx (- c *: poly_rV q') (k *: poly_rV p')).",
            "VernacExtend",
            "a1ec810de0d0514ffabfc7b8fae973f2df5f9cb2"
        ],
        [
            "apply: contraNneq r_nz; rewrite -row_mx0; case/eq_row_mx=> q0 p0.",
            "VernacExtend",
            "5caed936835e366e9e533d8f19382dcfedbf86d4"
        ],
        [
            "have{p0} p0: p = 0.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "apply/eqP; rewrite -size_poly_eq0 -(size_scale p nz_c) p'r.",
            "VernacExtend",
            "56c014161b39aecfb3c54301c2409dba4e8e1857"
        ],
        [
            "rewrite -(size_scale _ nz_k) scalerAl -(poly_rV_K le_p'_dp) -linearZ p0.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "by rewrite linear0 mul0r size_poly0.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "rewrite /r p0 gcd0p -size_poly_eq0 -(size_scale q nz_k) q'r.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "rewrite -(size_scale _ nz_c) scalerAl -(poly_rV_K le_q'_dq) -linearZ.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "by rewrite -[c]opprK scaleNr q0 !linear0 mul0r size_poly0.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "rewrite mul_row_col scaleNr mulNmx !mul_rV_lin1 /= !linearZ /= !poly_rV_K //.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "by rewrite !scalerCA p'r q'r mulrCA addNr.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Section HornerMx.",
            "VernacBeginSection",
            "08aad25b27e1a2a1f590344d69190ad272d19d2a"
        ],
        [
            "Variables (R : comRingType) (n' : nat).",
            "VernacAssumption",
            "5b085a92b7b3b25e081bd092bc8d4d0d16849a11"
        ],
        [
            "Local Notation n := n'.+1.",
            "VernacSyntacticDefinition",
            "a44d7133197df31a38212ab1d7bfb6ec0dc123a2"
        ],
        [
            "Variable A : 'M[R]_n.",
            "VernacAssumption",
            "8c75c0f7d5cef9f0364fe6889118e26d3d9676f4"
        ],
        [
            "Implicit Types p q : {poly R}.",
            "VernacReserve",
            "e955cd8bb2af797f65cbef5dadd14cef37523981"
        ],
        [
            "Definition horner_mx := horner_morph (fun a => scalar_mx_comm a A).",
            "VernacDefinition",
            "db1c2a49cbf0cf4e901592b625bb9f7d9471ec7b"
        ],
        [
            "Canonical horner_mx_additive := [additive of horner_mx].",
            "VernacDefinition",
            "e50321503d66615b22de6fc98565ffe0f964272a"
        ],
        [
            "Canonical horner_mx_rmorphism := [rmorphism of horner_mx].",
            "VernacDefinition",
            "51ebf73b7a9ee2eeded5e6c3df78149bde86193c"
        ],
        [
            "Lemma horner_mx_C a : horner_mx a%:P = a%:M.",
            "VernacStartTheoremProof",
            "2696d68b3b279995148bbfe076a2406cb712e67a"
        ],
        [
            "exact: horner_morphC.",
            "VernacExtend",
            "ce637ff86bafca5d8359473e8c02af644dcbdc43"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma horner_mx_X : horner_mx 'X = A.",
            "VernacStartTheoremProof",
            "5ab868c0aa3ecfc8890737caf634a7ad5beb2ed1"
        ],
        [
            "exact: horner_morphX.",
            "VernacExtend",
            "ce637ff86bafca5d8359473e8c02af644dcbdc43"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma horner_mxZ : scalable horner_mx.",
            "VernacStartTheoremProof",
            "b77aac425bca7438bd4bb700ed81d09ca3edd90b"
        ],
        [
            "move=> a p /=; rewrite -mul_polyC rmorphM /=.",
            "VernacExtend",
            "057edeb0967475c7ea5e8c98c449ddc5613eddc1"
        ],
        [
            "by rewrite horner_mx_C [_ * _]mul_scalar_mx.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Canonical horner_mx_linear := AddLinear horner_mxZ.",
            "VernacDefinition",
            "57ef900d9a83eb1cfde723d7a97972cb77712d1f"
        ],
        [
            "Canonical horner_mx_lrmorphism := [lrmorphism of horner_mx].",
            "VernacDefinition",
            "5e9e05d37edcca8983c28e3113c964c0cabece4e"
        ],
        [
            "Definition powers_mx d := \\matrix_(i < d) mxvec (A ^+ i).",
            "VernacDefinition",
            "0a67666dc41c41946825da4616820db071165d0a"
        ],
        [
            "Lemma horner_rVpoly m (u : 'rV_m) : horner_mx (rVpoly u) = vec_mx (u *m powers_mx m).",
            "VernacStartTheoremProof",
            "b6f6d3b317c73477882cf2a16ee21677b18d6441"
        ],
        [
            "rewrite mulmx_sum_row linear_sum [rVpoly u]poly_def rmorph_sum.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "apply: eq_bigr => i _.",
            "VernacExtend",
            "4bd6fa79b17bcd2bfb7af091fb325367a20385d6"
        ],
        [
            "by rewrite valK !linearZ rmorphX /= horner_mx_X rowK /= mxvecK.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "End HornerMx.",
            "VernacEndSegment",
            "474c5f9dd8b905c77b76b71beef027803c9ce788"
        ],
        [
            "Prenex Implicits horner_mx powers_mx.",
            "VernacExtend",
            "defd366a0824c01d861ad6a5bad30e8fdeb2205c"
        ],
        [
            "Section CharPoly.",
            "VernacBeginSection",
            "2b985152068c98bd751d8e0dedc26cc02b240495"
        ],
        [
            "Variables (R : ringType) (n : nat) (A : 'M[R]_n).",
            "VernacAssumption",
            "054b45dd631c8361403b174f683fe724b29c88a4"
        ],
        [
            "Implicit Types p q : {poly R}.",
            "VernacReserve",
            "e955cd8bb2af797f65cbef5dadd14cef37523981"
        ],
        [
            "Definition char_poly_mx := 'X%:M - map_mx (@polyC R) A.",
            "VernacDefinition",
            "47afd83caf83520e0b8fca5703f1dec3e772d003"
        ],
        [
            "Definition char_poly := \\det char_poly_mx.",
            "VernacDefinition",
            "fb2abb6a4fd87ea34c3764d0db53f69a1607cae5"
        ],
        [
            "Let diagA := [seq A i i | i : 'I_n].",
            "VernacDefinition",
            "1ee61d550bdba550c563f12fdac1e9be93155c3a"
        ],
        [
            "Let size_diagA : size diagA = n.",
            "VernacDefinition",
            "58bdebd4c7ad2d11891aea71c7fe64ad63bc2fdc"
        ],
        [
            "by rewrite size_image card_ord.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Let split_diagA : exists2 q, \\prod_(x <- diagA) ('X - x%:P) + q = char_poly & size q <= n.-1.",
            "VernacDefinition",
            "ca043694798365a62f6098207b88a1b5035a9c13"
        ],
        [
            "rewrite [char_poly](bigD1 1%g) //=; set q := \\sum_(s | _) _; exists q.",
            "VernacExtend",
            "9f8eb62189d01e907e35e7f4cafa868c0bd84286"
        ],
        [
            "congr (_ + _); rewrite odd_perm1 mul1r big_map enumT; apply: eq_bigr => i _.",
            "VernacExtend",
            "775b998c29d59f89d853e0c4a629d4a3388abe3b"
        ],
        [
            "by rewrite !mxE perm1 eqxx.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "apply: leq_trans {q}(size_sum _ _ _) _; apply/bigmax_leqP=> s nt_s.",
            "VernacExtend",
            "8d9dae45eeb3a769b8a865cef8ae476451f63802"
        ],
        [
            "have{nt_s} [i nfix_i]: exists i, s i != i.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "apply/existsP; rewrite -negb_forall; apply: contra nt_s => s_1.",
            "VernacExtend",
            "da24caf87c1bbbad0538b8be68905ec456c78aa7"
        ],
        [
            "by apply/eqP; apply/permP=> i; apply/eqP; rewrite perm1 (forallP s_1).",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "apply: leq_trans (_ : #|[pred j | s j == j]|.+1 <= n.-1).",
            "VernacExtend",
            "4bd6fa79b17bcd2bfb7af091fb325367a20385d6"
        ],
        [
            "rewrite -sum1_card (@big_mkcond nat) /= size_Msign.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "apply: (big_ind2 (fun p m => size p <= m.+1)) => [| p mp q mq IHp IHq | j _].",
            "VernacExtend",
            "4bd6fa79b17bcd2bfb7af091fb325367a20385d6"
        ],
        [
            "-",
            "VernacBullet",
            "581cab4bf49fa4b495e569bbda96fc8d28fddcc0"
        ],
        [
            "by rewrite size_poly1.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "-",
            "VernacBullet",
            "581cab4bf49fa4b495e569bbda96fc8d28fddcc0"
        ],
        [
            "apply: leq_trans (size_mul_leq _ _) _.",
            "VernacExtend",
            "4bd6fa79b17bcd2bfb7af091fb325367a20385d6"
        ],
        [
            "by rewrite -subn1 -addnS leq_subLR addnA leq_add.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "rewrite !mxE eq_sym !inE; case: (s j == j); first by rewrite polyseqXsubC.",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "by rewrite sub0r size_opp size_polyC leq_b1.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "rewrite -{8}[n]card_ord -(cardC (pred2 (s i) i)) card2 nfix_i !ltnS.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "apply: subset_leq_card; apply/subsetP=> j; move/(_ =P j)=> fix_j.",
            "VernacExtend",
            "6cee8938e4c92292ae66c56557669b6bd87a33e5"
        ],
        [
            "rewrite !inE -{1}fix_j (inj_eq perm_inj) orbb.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "by apply: contraNneq nfix_i => <-; rewrite fix_j.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma size_char_poly : size char_poly = n.+1.",
            "VernacStartTheoremProof",
            "db01c215a8bafbe3999047e0ab28a32121f0f786"
        ],
        [
            "have [q <- lt_q_n] := split_diagA; have le_q_n := leq_trans lt_q_n (leq_pred n).",
            "VernacExtend",
            "6e9d14df7d32ea0bf863301df3f6cb2d4e1b8e96"
        ],
        [
            "by rewrite size_addl size_prod_XsubC size_diagA.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma char_poly_monic : char_poly \\is monic.",
            "VernacStartTheoremProof",
            "eedf0854166fdc38626ff48f2b88b60ef86ea1c1"
        ],
        [
            "rewrite monicE -(monicP (monic_prod_XsubC diagA xpredT id)).",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "rewrite !lead_coefE size_char_poly.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "have [q <- lt_q_n] := split_diagA; have le_q_n := leq_trans lt_q_n (leq_pred n).",
            "VernacExtend",
            "6e9d14df7d32ea0bf863301df3f6cb2d4e1b8e96"
        ],
        [
            "by rewrite size_prod_XsubC size_diagA coefD (nth_default 0 le_q_n) addr0.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma char_poly_trace : n > 0 -> char_poly`_n.-1 = - \\tr A.",
            "VernacStartTheoremProof",
            "738abc447d94dd3b88dee4daf651358c06d6c0a8"
        ],
        [
            "move=> n_gt0; have [q <- lt_q_n] := split_diagA; set p := \\prod_(x <- _) _.",
            "VernacExtend",
            "6906082dc4e4de681fde447f312d63a57f7b8e2d"
        ],
        [
            "rewrite coefD {q lt_q_n}(nth_default 0 lt_q_n) addr0.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "have{n_gt0} ->: p`_n.-1 = ('X * p)`_n by rewrite coefXM eqn0Ngt n_gt0.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "have ->: \\tr A = \\sum_(x <- diagA) x by rewrite big_map enumT.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "rewrite -size_diagA {}/p; elim: diagA => [|x d IHd].",
            "VernacExtend",
            "44a8e3b453c9376c468b4e3e0046f5ac33e11d6d"
        ],
        [
            "by rewrite !big_nil mulr1 coefX oppr0.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "rewrite !big_cons coefXM mulrBl coefB IHd opprD addrC; congr (- _ + _).",
            "VernacExtend",
            "a0279e71fd23ac6bde2b8b4402981a70ea719044"
        ],
        [
            "rewrite mul_polyC coefZ [size _]/= -(size_prod_XsubC _ id) -lead_coefE.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "by rewrite (monicP _) ?monic_prod_XsubC ?mulr1.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma char_poly_det : char_poly`_0 = (- 1) ^+ n * \\det A.",
            "VernacStartTheoremProof",
            "4c70b87ea5e354dcbb997d0aaf2254080f3f6119"
        ],
        [
            "rewrite big_distrr coef_sum [0%N]lock /=; apply: eq_bigr => s _.",
            "VernacExtend",
            "634a7639ed2fb7caf62757f84400927f5829b7d5"
        ],
        [
            "rewrite -{1}rmorphN -rmorphX mul_polyC coefZ /=.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "rewrite mulrA -exprD addnC exprD -mulrA -lock; congr (_ * _).",
            "VernacExtend",
            "a0279e71fd23ac6bde2b8b4402981a70ea719044"
        ],
        [
            "transitivity (\\prod_(i < n) - A i (s i)); last by rewrite prodrN card_ord.",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "elim: (index_enum _) => [|i e IHe]; rewrite !(big_nil, big_cons) ?coef1 //.",
            "VernacExtend",
            "de65c8193056a36f6dbb91fe21357bd770b140db"
        ],
        [
            "by rewrite coefM big_ord1 IHe !mxE coefB coefC coefMn coefX mul0rn sub0r.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "End CharPoly.",
            "VernacEndSegment",
            "1ae82ecf6ceb8bde880804dda738ad144fe51394"
        ],
        [
            "Prenex Implicits char_poly_mx char_poly.",
            "VernacExtend",
            "6f6e7bf373f718c47e9a77e1b3970436927aed86"
        ],
        [
            "Lemma mx_poly_ring_isom (R : ringType) n' (n := n'.+1) : exists phi : {rmorphism 'M[{poly R}]_n -> {poly 'M[R]_n}}, [/\\ bijective phi, forall p, phi p%:M = map_poly scalar_mx p, forall A, phi (map_mx polyC A) = A%:P & forall A i j k, (phi A)`_k i j = (A i j)`_k].",
            "VernacStartTheoremProof",
            "21a7d0a4fa8bc998ef2199d79eb98f9952dee0ce"
        ],
        [
            "set M_RX := 'M[{poly R}]_n; set MR_X := ({poly 'M[R]_n}).",
            "VernacExtend",
            "7405ffc63057f1493a790d3f39e251cc5fefe81f"
        ],
        [
            "pose Msize (A : M_RX) := \\max_i \\max_j size (A i j).",
            "VernacExtend",
            "3c5f04de94609049d978298aa02ff35fb35ea7c7"
        ],
        [
            "pose phi (A : M_RX) := \\poly_(k < Msize A) \\matrix_(i, j) (A i j)`_k.",
            "VernacExtend",
            "3c5f04de94609049d978298aa02ff35fb35ea7c7"
        ],
        [
            "have coef_phi A i j k: (phi A)`_k i j = (A i j)`_k.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "rewrite coef_poly; case: (ltnP k _) => le_m_k; rewrite mxE // nth_default //.",
            "VernacExtend",
            "1dc1cec635c64f0cc3ec64ea6e4d6c7d5b8f81f6"
        ],
        [
            "by apply: leq_trans (leq_trans (leq_bigmax i) le_m_k); apply: (leq_bigmax j).",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "have phi_is_rmorphism : rmorphism phi.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "do 2?[split=> [A B|]]; apply/polyP=> k; apply/matrixP=> i j; last 1 first.",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "-",
            "VernacBullet",
            "581cab4bf49fa4b495e569bbda96fc8d28fddcc0"
        ],
        [
            "rewrite coef_phi mxE coefMn !coefC.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "by case: (k == _); rewrite ?mxE ?mul0rn.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "-",
            "VernacBullet",
            "581cab4bf49fa4b495e569bbda96fc8d28fddcc0"
        ],
        [
            "by rewrite !(coef_phi, mxE, coefD, coefN).",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "rewrite !coef_phi !mxE !coefM summxE coef_sum.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "pose F k1 k2 := (A i k1)`_k2 * (B k1 j)`_(k - k2).",
            "VernacExtend",
            "3c5f04de94609049d978298aa02ff35fb35ea7c7"
        ],
        [
            "transitivity (\\sum_k1 \\sum_(k2 < k.+1) F k1 k2); rewrite {}/F.",
            "VernacExtend",
            "705f663cb8724b2b0a595a93392e4b6dcdded521"
        ],
        [
            "by apply: eq_bigr=> k1 _; rewrite coefM.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "rewrite exchange_big /=; apply: eq_bigr => k2 _.",
            "VernacExtend",
            "634a7639ed2fb7caf62757f84400927f5829b7d5"
        ],
        [
            "by rewrite mxE; apply: eq_bigr => k1 _; rewrite !coef_phi.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "have bij_phi: bijective phi.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "exists (fun P : MR_X => \\matrix_(i, j) \\poly_(k < size P) P`_k i j) => [A|P].",
            "VernacExtend",
            "3c42b53d0efc26db114b00541ac5e7fcb29e6aeb"
        ],
        [
            "apply/matrixP=> i j; rewrite mxE; apply/polyP=> k.",
            "VernacExtend",
            "da24caf87c1bbbad0538b8be68905ec456c78aa7"
        ],
        [
            "rewrite coef_poly -coef_phi.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "by case: leqP => // P_le_k; rewrite nth_default ?mxE.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "apply/polyP=> k; apply/matrixP=> i j; rewrite coef_phi mxE coef_poly.",
            "VernacExtend",
            "7d4450169cd8610cf3ff90cd2eeb2f84258ab13d"
        ],
        [
            "by case: leqP => // P_le_k; rewrite nth_default ?mxE.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "exists (RMorphism phi_is_rmorphism).",
            "VernacExtend",
            "2a79cd503498776c8c8a5de8774669de52c2169e"
        ],
        [
            "split=> // [p | A]; apply/polyP=> k; apply/matrixP=> i j.",
            "VernacExtend",
            "c03c49ee818673107bc66d70827b13050eb69520"
        ],
        [
            "by rewrite coef_phi coef_map !mxE coefMn.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "by rewrite coef_phi !mxE !coefC; case k; last rewrite /= mxE.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Theorem Cayley_Hamilton (R : comRingType) n' (A : 'M[R]_n'.+1) : horner_mx A (char_poly A) = 0.",
            "VernacStartTheoremProof",
            "8266b1324aad6d53001ea54eefb07091e7b676da"
        ],
        [
            "have [phi [_ phiZ phiC _]] := mx_poly_ring_isom R n'.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "apply/rootP/factor_theorem; rewrite -phiZ -mul_adj_mx rmorphM.",
            "VernacExtend",
            "56c014161b39aecfb3c54301c2409dba4e8e1857"
        ],
        [
            "by move: (phi _) => q; exists q; rewrite rmorphB phiC phiZ map_polyX.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma eigenvalue_root_char (F : fieldType) n (A : 'M[F]_n) a : eigenvalue A a = root (char_poly A) a.",
            "VernacStartTheoremProof",
            "986ba060f3940166b7c14e1bbb7623b7636c503f"
        ],
        [
            "transitivity (\\det (a%:M - A) == 0).",
            "VernacExtend",
            "59fdff1c5f75f52948f9ae7ab6fdf61d320d6864"
        ],
        [
            "apply/eigenvalueP/det0P=> [[v Av_av v_nz] | [v v_nz Av_av]]; exists v => //.",
            "VernacExtend",
            "5fce7e5361004176d6b434b36b4623c7387f70bb"
        ],
        [
            "by rewrite mulmxBr Av_av mul_mx_scalar subrr.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "by apply/eqP; rewrite -mul_mx_scalar eq_sym -subr_eq0 -mulmxBr Av_av.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "congr (_ == 0); rewrite horner_sum; apply: eq_bigr => s _.",
            "VernacExtend",
            "775b998c29d59f89d853e0c4a629d4a3388abe3b"
        ],
        [
            "rewrite hornerM horner_exp !hornerE; congr (_ * _).",
            "VernacExtend",
            "a0279e71fd23ac6bde2b8b4402981a70ea719044"
        ],
        [
            "rewrite (big_morph _ (fun p q => hornerM p q a) (hornerC 1 a)).",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "by apply: eq_bigr => i _; rewrite !mxE !(hornerE, hornerMn).",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Definition companionmx {R : ringType} (p : seq R) (d := (size p).-1) := \\matrix_(i < d, j < d) if (i == d.-1 :> nat) then - p`_j else (i.+1 == j :> nat)%:R.",
            "VernacDefinition",
            "42b95f9a73fe94ba4525f912e2729f6d13035128"
        ],
        [
            "Lemma companionmxK {R : comRingType} (p : {poly R}) : p \\is monic -> char_poly (companionmx p) = p.",
            "VernacStartTheoremProof",
            "c93b136547c1137fa8ddb8d61faacd2439c78059"
        ],
        [
            "pose D n : 'M[{poly R}]_n := \\matrix_(i, j) ('X *+ (i == j.+1 :> nat) - ((i == j)%:R)%:P).",
            "VernacExtend",
            "3c5f04de94609049d978298aa02ff35fb35ea7c7"
        ],
        [
            "have detD n : \\det (D n) = (-1) ^+ n.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "elim: n => [|n IHn]; first by rewrite det_mx00.",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "rewrite (expand_det_row _ ord0) big_ord_recl !mxE /= sub0r.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "rewrite big1 ?addr0; last by move=> i _; rewrite !mxE /= subrr mul0r.",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "rewrite /cofactor mul1r [X in \\det X](_ : _ = D _) ?IHn ?exprS//.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "by apply/matrixP=> i j; rewrite !mxE /= /bump !add1n eqSS.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "elim/poly_ind: p => [|p c IHp].",
            "VernacExtend",
            "e686a1895f1799b840b76242f931100819a9ad6c"
        ],
        [
            "by rewrite monicE lead_coef0 eq_sym oner_eq0.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "have [->|p_neq0] := eqVneq p 0.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "rewrite mul0r add0r monicE lead_coefC => /eqP->.",
            "VernacExtend",
            "3c42b53d0efc26db114b00541ac5e7fcb29e6aeb"
        ],
        [
            "by rewrite /companionmx /char_poly size_poly1 det_mx00.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "rewrite monicE lead_coefDl ?lead_coefMX => [p_monic|]; last first.",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "rewrite size_polyC size_mulX ?polyX_eq0// ltnS.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "by rewrite (leq_trans (leq_b1 _)) ?size_poly_gt0.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "rewrite -[in RHS]IHp // /companionmx size_MXaddC (negPf p_neq0) /=.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "rewrite /char_poly polySpred //.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "have [->|spV1_gt0] := posnP (size p).-1.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "rewrite [X in \\det X]mx11_scalar det_scalar1 !mxE ?eqxx det_mx00.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "by rewrite mul1r -horner_coef0 hornerMXaddC mulr0 add0r rmorphN opprK.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "rewrite (expand_det_col _ ord0) /= -[(size p).-1]prednK //.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "rewrite big_ord_recr big_ord_recl/= big1 ?add0r //=; last first.",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "move=> i _; rewrite !mxE -val_eqE /= /bump leq0n add1n eqSS.",
            "VernacExtend",
            "057edeb0967475c7ea5e8c98c449ddc5613eddc1"
        ],
        [
            "by rewrite ltn_eqF ?subrr ?mul0r.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "rewrite !mxE ?subnn -horner_coef0 /= hornerMXaddC.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "rewrite !(eqxx, mulr0, add0r, addr0, subr0, rmorphN, opprK)/=.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "rewrite mulrC /cofactor; congr (_ * 'X + _).",
            "VernacExtend",
            "a0279e71fd23ac6bde2b8b4402981a70ea719044"
        ],
        [
            "rewrite /cofactor -signr_odd odd_add addbb mul1r; congr (\\det _).",
            "VernacExtend",
            "a0279e71fd23ac6bde2b8b4402981a70ea719044"
        ],
        [
            "apply/matrixP => i j; rewrite !mxE -val_eqE coefD coefMX coefC.",
            "VernacExtend",
            "56c014161b39aecfb3c54301c2409dba4e8e1857"
        ],
        [
            "by rewrite /= /bump /= !add1n !eqSS addr0.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "rewrite /cofactor [X in \\det X](_ : _ = D _).",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "by rewrite detD /= addn0 -signr_odd -signr_addb addbb mulr1.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "apply/matrixP=> i j; rewrite !mxE -!val_eqE /= /bump /=.",
            "VernacExtend",
            "56c014161b39aecfb3c54301c2409dba4e8e1857"
        ],
        [
            "by rewrite leqNgt ltn_ord add0n add1n [_ == _.-2.+1]ltn_eqF.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma mulmx_delta_companion (R : ringType) (p : seq R) (i: 'I_(size p).-1) (i_small : i.+1 < (size p).-1): delta_mx 0 i *m companionmx p = delta_mx 0 (Ordinal i_small) :> 'rV__.",
            "VernacStartTheoremProof",
            "07ad125be9ee9ee6c7b28033becb718e4ff5cb2c"
        ],
        [
            "apply/rowP => j; rewrite !mxE (bigD1 i) //= ?(=^~val_eqE, mxE) /= eqxx mul1r.",
            "VernacExtend",
            "56c014161b39aecfb3c54301c2409dba4e8e1857"
        ],
        [
            "rewrite ltn_eqF ?big1 ?addr0 1?eq_sym //; last first.",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "by rewrite -ltnS prednK // (leq_trans _ i_small).",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "by move=> k /negPf ki_eqF; rewrite !mxE eqxx ki_eqF mul0r.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Section MinPoly.",
            "VernacBeginSection",
            "ee3ab4a00e6c6f9333b6ae52dbdbfab8b9b54b79"
        ],
        [
            "Variables (F : fieldType) (n' : nat).",
            "VernacAssumption",
            "5f063a9cbb4a131f92ea049d7f44bca7f37d6ac7"
        ],
        [
            "Local Notation n := n'.+1.",
            "VernacSyntacticDefinition",
            "a44d7133197df31a38212ab1d7bfb6ec0dc123a2"
        ],
        [
            "Variable A : 'M[F]_n.",
            "VernacAssumption",
            "15c2a809d5f4e22d767823f2ae052e344a968a11"
        ],
        [
            "Implicit Types p q : {poly F}.",
            "VernacReserve",
            "2aa20a27a3d54d7def82c4592b6d95cb9515e797"
        ],
        [
            "Fact degree_mxminpoly_proof : exists d, \\rank (powers_mx A d.+1) <= d.",
            "VernacStartTheoremProof",
            "185b5d38ce7af41df78a53a4561b6fcf545662fd"
        ],
        [
            "by exists (n ^ 2)%N; rewrite rank_leq_col.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Definition degree_mxminpoly := ex_minn degree_mxminpoly_proof.",
            "VernacDefinition",
            "7c88dcf6d6ea5444826c6e645bde705fabc48b15"
        ],
        [
            "Local Notation d := degree_mxminpoly.",
            "VernacSyntacticDefinition",
            "929e2e37cc49460f8a3591cf0ade0fc5cf038d3f"
        ],
        [
            "Local Notation Ad := (powers_mx A d).",
            "VernacSyntacticDefinition",
            "9236827fb6636dc18dc4dd41887e169c13f80a65"
        ],
        [
            "Lemma mxminpoly_nonconstant : d > 0.",
            "VernacStartTheoremProof",
            "08e5a3176ef29be37117f66c4c613064bf30cc22"
        ],
        [
            "rewrite /d; case: ex_minnP; case=> //; rewrite leqn0 mxrank_eq0; move/eqP.",
            "VernacExtend",
            "e9dbafa8138c19f6ac6e3fd97af9ab98da37e310"
        ],
        [
            "move/row_matrixP; move/(_ 0); move/eqP; rewrite rowK row0 mxvec_eq0.",
            "VernacExtend",
            "4bc1dc9bb0e66c38274e37a00a32341819f5d0f1"
        ],
        [
            "by rewrite -mxrank_eq0 mxrank1.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma minpoly_mx1 : (1%:M \\in Ad)%MS.",
            "VernacStartTheoremProof",
            "3079a8729cb450edb4ab0118408c8c090c06d266"
        ],
        [
            "by apply: (eq_row_sub (Ordinal mxminpoly_nonconstant)); rewrite rowK.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma minpoly_mx_free : row_free Ad.",
            "VernacStartTheoremProof",
            "b9b16e0640ae2354d5def87d0f75668eacfa035e"
        ],
        [
            "have:= mxminpoly_nonconstant; rewrite /d; case: ex_minnP; case=> // d' _.",
            "VernacExtend",
            "d5380bf3ad1f2a942e505ae2ab93e3ec55f14be9"
        ],
        [
            "move/(_ d'); move/implyP; rewrite ltnn implybF -ltnS ltn_neqAle.",
            "VernacExtend",
            "ea0cb90c655c5664c1e4bd5e8281f3783b29707c"
        ],
        [
            "by rewrite rank_leq_row andbT negbK.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma horner_mx_mem p : (horner_mx A p \\in Ad)%MS.",
            "VernacStartTheoremProof",
            "6b1791af2616b37b5c59243559fc2a54edf850c5"
        ],
        [
            "elim/poly_ind: p => [|p a IHp]; first by rewrite rmorph0 // linear0 sub0mx.",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "rewrite rmorphD rmorphM /= horner_mx_C horner_mx_X.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "rewrite addrC -scalemx1 linearP /= -(mul_vec_lin (mulmxr_linear _ A)).",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "case/submxP: IHp => u ->{p}.",
            "VernacExtend",
            "e00fff71ff314c991514fc71c41a3556702e444a"
        ],
        [
            "have: (powers_mx A (1 + d) <= Ad)%MS.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "rewrite -(geq_leqif (mxrank_leqif_sup _)).",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "by rewrite (eqnP minpoly_mx_free) /d; case: ex_minnP.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "rewrite addnC; apply/row_subP=> i.",
            "VernacExtend",
            "634a7639ed2fb7caf62757f84400927f5829b7d5"
        ],
        [
            "by apply: eq_row_sub (lshift 1 i) _; rewrite !rowK.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "apply: submx_trans; rewrite addmx_sub ?scalemx_sub //.",
            "VernacExtend",
            "56c014161b39aecfb3c54301c2409dba4e8e1857"
        ],
        [
            "by apply: (eq_row_sub 0); rewrite rowK.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "rewrite -mulmxA mulmx_sub {u}//; apply/row_subP=> i.",
            "VernacExtend",
            "634a7639ed2fb7caf62757f84400927f5829b7d5"
        ],
        [
            "rewrite row_mul rowK mul_vec_lin /= mulmxE -exprSr.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "by apply: (eq_row_sub (rshift 1 i)); rewrite rowK.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Definition mx_inv_horner B := rVpoly (mxvec B *m pinvmx Ad).",
            "VernacDefinition",
            "4aebbc90f5b52b468011ae0884a5dd76e984ec29"
        ],
        [
            "Lemma mx_inv_horner0 : mx_inv_horner 0 = 0.",
            "VernacStartTheoremProof",
            "66101f2ca2a67f09f47b584b0bb577faf79e8693"
        ],
        [
            "by rewrite /mx_inv_horner !(linear0, mul0mx).",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma mx_inv_hornerK B : (B \\in Ad)%MS -> horner_mx A (mx_inv_horner B) = B.",
            "VernacStartTheoremProof",
            "36b6c5932e9ce7da3c885709426b329d9647dcb5"
        ],
        [
            "by move=> sBAd; rewrite horner_rVpoly mulmxKpV ?mxvecK.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma minpoly_mxM B C : (B \\in Ad -> C \\in Ad -> B * C \\in Ad)%MS.",
            "VernacStartTheoremProof",
            "46c3dbe3eadca84e15d3d05718dffd522b70d983"
        ],
        [
            "move=> AdB AdC; rewrite -(mx_inv_hornerK AdB) -(mx_inv_hornerK AdC).",
            "VernacExtend",
            "057edeb0967475c7ea5e8c98c449ddc5613eddc1"
        ],
        [
            "by rewrite -rmorphM ?horner_mx_mem.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma minpoly_mx_ring : mxring Ad.",
            "VernacStartTheoremProof",
            "e070b82ece3792107ebb72909c7d739008371f28"
        ],
        [
            "apply/andP; split; first by apply/mulsmx_subP; apply: minpoly_mxM.",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "apply/mxring_idP; exists 1%:M; split=> *; rewrite ?mulmx1 ?mul1mx //.",
            "VernacExtend",
            "a18ef52b94902a4405e9607357a3f7e142145a08"
        ],
        [
            "by rewrite -mxrank_eq0 mxrank1.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "exact: minpoly_mx1.",
            "VernacExtend",
            "ce637ff86bafca5d8359473e8c02af644dcbdc43"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Definition mxminpoly := 'X^d - mx_inv_horner (A ^+ d).",
            "VernacDefinition",
            "27b430583e04f7b67c8e1cf39aec78dfa9d90061"
        ],
        [
            "Local Notation p_A := mxminpoly.",
            "VernacSyntacticDefinition",
            "477425d0652765afc4b8c974b85d4ecf9fa0ad87"
        ],
        [
            "Lemma size_mxminpoly : size p_A = d.+1.",
            "VernacStartTheoremProof",
            "5e8db9adc07f387f01262a49dc04377c0a49bc41"
        ],
        [
            "by rewrite size_addl ?size_polyXn // size_opp ltnS size_poly.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma mxminpoly_monic : p_A \\is monic.",
            "VernacStartTheoremProof",
            "3f17b231d685cf6255b5f453efb3b07ea748165f"
        ],
        [
            "rewrite monicE /lead_coef size_mxminpoly coefB coefXn eqxx /=.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "by rewrite nth_default ?size_poly // subr0.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma size_mod_mxminpoly p : size (p %% p_A) <= d.",
            "VernacStartTheoremProof",
            "b3e20dc41a056170dec52fb73f9c73e6402ccd37"
        ],
        [
            "by rewrite -ltnS -size_mxminpoly ltn_modp // -size_poly_eq0 size_mxminpoly.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma mx_root_minpoly : horner_mx A p_A = 0.",
            "VernacStartTheoremProof",
            "eb43639625f31555cc5d937ec2c12fba6f1639ce"
        ],
        [
            "rewrite rmorphB -{3}(horner_mx_X A) -rmorphX /=.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "by rewrite mx_inv_hornerK ?subrr ?horner_mx_mem.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma horner_rVpolyK (u : 'rV_d) : mx_inv_horner (horner_mx A (rVpoly u)) = rVpoly u.",
            "VernacStartTheoremProof",
            "225692de6dd7fd985a509e0456e1ed6211aa2d7a"
        ],
        [
            "congr rVpoly; rewrite horner_rVpoly vec_mxK.",
            "VernacExtend",
            "90723b7805fdae0b93bd8b98ae215a5658363919"
        ],
        [
            "by apply: (row_free_inj minpoly_mx_free); rewrite mulmxKpV ?submxMl.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma horner_mxK p : mx_inv_horner (horner_mx A p) = p %% p_A.",
            "VernacStartTheoremProof",
            "ff16ea86e7e5d5371f06afb3c511a6703fe61e56"
        ],
        [
            "rewrite {1}(Pdiv.IdomainMonic.divp_eq mxminpoly_monic p) rmorphD rmorphM /=.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "rewrite mx_root_minpoly mulr0 add0r.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "by rewrite -(poly_rV_K (size_mod_mxminpoly _)) horner_rVpolyK.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma mxminpoly_min p : horner_mx A p = 0 -> p_A %| p.",
            "VernacStartTheoremProof",
            "855b29f77787af6ce3f50259b14d34d311617196"
        ],
        [
            "by move=> pA0; rewrite /dvdp -horner_mxK pA0 mx_inv_horner0.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma horner_rVpoly_inj : injective (horner_mx A \\o rVpoly : 'rV_d -> 'M_n).",
            "VernacStartTheoremProof",
            "8b008789b6666b01daf0301031597769a139d18c"
        ],
        [
            "apply: can_inj (poly_rV \\o mx_inv_horner) _ => u /=.",
            "VernacExtend",
            "4bd6fa79b17bcd2bfb7af091fb325367a20385d6"
        ],
        [
            "by rewrite horner_rVpolyK rVpolyK.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma mxminpoly_linear_is_scalar : (d <= 1) = is_scalar_mx A.",
            "VernacStartTheoremProof",
            "b0d21e5972c973eaf6c183e7f53beb3b8f07069e"
        ],
        [
            "have scalP := has_non_scalar_mxP minpoly_mx1.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "rewrite leqNgt -(eqnP minpoly_mx_free); apply/scalP/idP=> [|[[B]]].",
            "VernacExtend",
            "634a7639ed2fb7caf62757f84400927f5829b7d5"
        ],
        [
            "case scalA: (is_scalar_mx A); [by right | left].",
            "VernacExtend",
            "0b71d550d1734a15236329f121aae615a86c6240"
        ],
        [
            "by exists A; rewrite ?scalA // -{1}(horner_mx_X A) horner_mx_mem.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "move/mx_inv_hornerK=> <- nsB; case/is_scalar_mxP=> a defA; case/negP: nsB.",
            "VernacExtend",
            "fd777b019349da348ceeb72ef62c9f8d707a4c0b"
        ],
        [
            "move: {B}(_ B); apply: poly_ind => [|p c].",
            "VernacExtend",
            "d6ebf3361f380a12d5c2c9bbb7ea363132c48b36"
        ],
        [
            "by rewrite rmorph0 ?mx0_is_scalar.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "rewrite rmorphD ?rmorphM /= horner_mx_X defA; case/is_scalar_mxP=> b ->.",
            "VernacExtend",
            "712d339e99ee17eb7d5033e19ac614eb3ca6b532"
        ],
        [
            "by rewrite -rmorphM horner_mx_C -rmorphD /= scalar_mx_is_scalar.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma mxminpoly_dvd_char : p_A %| char_poly A.",
            "VernacStartTheoremProof",
            "18e577fbe5fef54d34be81a5caa0d75411c20206"
        ],
        [
            "by apply: mxminpoly_min; apply: Cayley_Hamilton.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma eigenvalue_root_min a : eigenvalue A a = root p_A a.",
            "VernacStartTheoremProof",
            "641e0e9671eb38f3cfc6114f59ebee86f1f08524"
        ],
        [
            "apply/idP/idP=> Aa; last first.",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "rewrite eigenvalue_root_char !root_factor_theorem in Aa *.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "exact: dvdp_trans Aa mxminpoly_dvd_char.",
            "VernacExtend",
            "ce637ff86bafca5d8359473e8c02af644dcbdc43"
        ],
        [
            "have{Aa} [v Av_av v_nz] := eigenvalueP Aa.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "apply: contraR v_nz => pa_nz; rewrite -{pa_nz}(eqmx_eq0 (eqmx_scale _ pa_nz)).",
            "VernacExtend",
            "56c014161b39aecfb3c54301c2409dba4e8e1857"
        ],
        [
            "apply/eqP; rewrite -(mulmx0 _ v) -mx_root_minpoly.",
            "VernacExtend",
            "56c014161b39aecfb3c54301c2409dba4e8e1857"
        ],
        [
            "elim/poly_ind: p_A => [|p c IHp].",
            "VernacExtend",
            "e686a1895f1799b840b76242f931100819a9ad6c"
        ],
        [
            "by rewrite rmorph0 horner0 scale0r mulmx0.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "rewrite !hornerE rmorphD rmorphM /= horner_mx_X horner_mx_C scalerDl.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "by rewrite -scalerA mulmxDr mul_mx_scalar mulmxA -IHp -scalemxAl Av_av.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "End MinPoly.",
            "VernacEndSegment",
            "cdb5283237047d59ad1245641880b21f62d58e5e"
        ],
        [
            "Prenex Implicits degree_mxminpoly mxminpoly mx_inv_horner.",
            "VernacExtend",
            "15e41766eaef5c1c0bb8ed567773224c2e8ae09d"
        ],
        [
            "Arguments mx_inv_hornerK {F n' A} [B] AnB.",
            "VernacArguments",
            "be126bb377dc9bfa81b3d5bc271f2362e9068b35"
        ],
        [
            "Arguments horner_rVpoly_inj {F n' A} [u1 u2] eq_u12A : rename.",
            "VernacArguments",
            "a18052bd14131791b3a2d1b4fb73bf7c21dec939"
        ],
        [
            "Section MapRingMatrix.",
            "VernacBeginSection",
            "77102f00c4057d5c1ed8de4853f2145766e23393"
        ],
        [
            "Variables (aR rR : ringType) (f : {rmorphism aR -> rR}).",
            "VernacAssumption",
            "c87bf8a0e21dfb063f6f4c841aac5a29c5218bee"
        ],
        [
            "Local Notation \"A ^f\" := (map_mx (GRing.RMorphism.apply f) A) : ring_scope.",
            "VernacNotation",
            "fdd56b787c68a0a7db0b3da67e4eb05e59fd1829"
        ],
        [
            "Local Notation fp := (map_poly (GRing.RMorphism.apply f)).",
            "VernacSyntacticDefinition",
            "5ead321be6f2b53b35e5ae16743ea28b673dfb73"
        ],
        [
            "Variables (d n : nat) (A : 'M[aR]_n).",
            "VernacAssumption",
            "3a118ae4f46e264667909a67e60925c8a669d398"
        ],
        [
            "Lemma map_rVpoly (u : 'rV_d) : fp (rVpoly u) = rVpoly u^f.",
            "VernacStartTheoremProof",
            "9c4f7d3e8b27ac63f9c6ed7ea11b2083ec6b3c8e"
        ],
        [
            "apply/polyP=> k; rewrite coef_map !coef_rVpoly.",
            "VernacExtend",
            "56c014161b39aecfb3c54301c2409dba4e8e1857"
        ],
        [
            "by case: (insub k) => [i|]; rewrite /= ?rmorph0 // mxE.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma map_poly_rV p : (poly_rV p)^f = poly_rV (fp p) :> 'rV_d.",
            "VernacStartTheoremProof",
            "6157c734a1bd8d36754d24539fe02e09f46e8233"
        ],
        [
            "by apply/rowP=> j; rewrite !mxE coef_map.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma map_char_poly_mx : map_mx fp (char_poly_mx A) = char_poly_mx A^f.",
            "VernacStartTheoremProof",
            "5a1c3ce00bb8bf60c19f89d9b2b79ea77f909f3d"
        ],
        [
            "rewrite raddfB /= map_scalar_mx /= map_polyX; congr (_ - _).",
            "VernacExtend",
            "a0279e71fd23ac6bde2b8b4402981a70ea719044"
        ],
        [
            "by apply/matrixP=> i j; rewrite !mxE map_polyC.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma map_char_poly : fp (char_poly A) = char_poly A^f.",
            "VernacStartTheoremProof",
            "f0f8cef3de5cf3be333825f072c476b56e0c911b"
        ],
        [
            "by rewrite -det_map_mx map_char_poly_mx.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "End MapRingMatrix.",
            "VernacEndSegment",
            "3e6de5efab856a4cfa84bd9a892c305cb0c958d4"
        ],
        [
            "Section MapResultant.",
            "VernacBeginSection",
            "fe3b9cb0267ea3f68f6a60c9787c9450d33ed336"
        ],
        [
            "Lemma map_resultant (aR rR : ringType) (f : {rmorphism {poly aR} -> rR}) p q : f (lead_coef p) != 0 -> f (lead_coef q) != 0 -> f (resultant p q)= resultant (map_poly f p) (map_poly f q).",
            "VernacStartTheoremProof",
            "e2bc17b12e363bf495a0f5773c62159c46c6d045"
        ],
        [
            "move=> nz_fp nz_fq; rewrite /resultant /Sylvester_mx !size_map_poly_id0 //.",
            "VernacExtend",
            "057edeb0967475c7ea5e8c98c449ddc5613eddc1"
        ],
        [
            "rewrite -det_map_mx /= map_col_mx; congr (\\det (col_mx _ _)); by apply: map_lin1_mx => v; rewrite map_poly_rV rmorphM /= map_rVpoly.",
            "VernacExtend",
            "2886f56332d1f966bf41f3bed1c61163ea91d1d5"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "End MapResultant.",
            "VernacEndSegment",
            "a715aa685d3d0336f823f9c0095e41231b11de8d"
        ],
        [
            "Section MapComRing.",
            "VernacBeginSection",
            "b968045fc914b63cf84e3b61930ce02af5ba54c2"
        ],
        [
            "Variables (aR rR : comRingType) (f : {rmorphism aR -> rR}).",
            "VernacAssumption",
            "27f75ccfe820a83202301793567c4372fd200206"
        ],
        [
            "Local Notation \"A ^f\" := (map_mx f A) : ring_scope.",
            "VernacNotation",
            "d033ebfb6b3ca0334a58d61928e620230e19b20e"
        ],
        [
            "Local Notation fp := (map_poly f).",
            "VernacSyntacticDefinition",
            "af1abc3439edea9288610d8078adb7fcd0af0a4f"
        ],
        [
            "Variables (n' : nat) (A : 'M[aR]_n'.+1).",
            "VernacAssumption",
            "99c712405e0a892f5a99bb9c6e035933a1e6a596"
        ],
        [
            "Lemma map_powers_mx e : (powers_mx A e)^f = powers_mx A^f e.",
            "VernacStartTheoremProof",
            "16948e8121c9594528a3967dbde5971069bb73f4"
        ],
        [
            "by apply/row_matrixP=> i; rewrite -map_row !rowK map_mxvec rmorphX.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma map_horner_mx p : (horner_mx A p)^f = horner_mx A^f (fp p).",
            "VernacStartTheoremProof",
            "ea520c3cd588f46a7a20f230494fbae8c3f1a4b2"
        ],
        [
            "rewrite -[p](poly_rV_K (leqnn _)) map_rVpoly.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "by rewrite !horner_rVpoly map_vec_mx map_mxM map_powers_mx.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "End MapComRing.",
            "VernacEndSegment",
            "d3b5719c49b2c860d80a19fba02a5d938f2cf521"
        ],
        [
            "Section MapField.",
            "VernacBeginSection",
            "23c9a583685370e6ea2ea36288497133c9af8751"
        ],
        [
            "Variables (aF rF : fieldType) (f : {rmorphism aF -> rF}).",
            "VernacAssumption",
            "4f593e63392c9ceb07dc931d4908b7172e87f501"
        ],
        [
            "Local Notation \"A ^f\" := (map_mx f A) : ring_scope.",
            "VernacNotation",
            "d033ebfb6b3ca0334a58d61928e620230e19b20e"
        ],
        [
            "Local Notation fp := (map_poly f).",
            "VernacSyntacticDefinition",
            "af1abc3439edea9288610d8078adb7fcd0af0a4f"
        ],
        [
            "Variables (n' : nat) (A : 'M[aF]_n'.+1) (p : {poly aF}).",
            "VernacAssumption",
            "7149c6c096473c85cb53a7b7e9cd85ec6a30219b"
        ],
        [
            "Lemma map_mx_companion (e := congr1 predn (size_map_poly _ _)) : (companionmx p)^f = castmx (e, e) (companionmx (fp p)).",
            "VernacStartTheoremProof",
            "7b9909fa6cc3c9c15b2de7a75292d63141dfa4bf"
        ],
        [
            "apply/matrixP => i j; rewrite !(castmxE, mxE) /= (fun_if f).",
            "VernacExtend",
            "56c014161b39aecfb3c54301c2409dba4e8e1857"
        ],
        [
            "by rewrite rmorphN coef_map size_map_poly rmorph_nat.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma companion_map_poly (e := esym (congr1 predn (size_map_poly _ _))) : companionmx (fp p) = castmx (e, e) (companionmx p)^f.",
            "VernacStartTheoremProof",
            "9f48adb2c6ebfc02f79772f6657f7b4d79625ae2"
        ],
        [
            "by rewrite map_mx_companion castmx_comp castmx_id.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma degree_mxminpoly_map : degree_mxminpoly A^f = degree_mxminpoly A.",
            "VernacStartTheoremProof",
            "bcfe6035953c9038425fe894b6588f7237f3ac75"
        ],
        [
            "by apply: eq_ex_minn => e; rewrite -map_powers_mx mxrank_map.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma mxminpoly_map : mxminpoly A^f = fp (mxminpoly A).",
            "VernacStartTheoremProof",
            "85f3b1c4477b628f8dfd5ec3ab69fd395acc9729"
        ],
        [
            "rewrite rmorphB; congr (_ - _).",
            "VernacExtend",
            "a0279e71fd23ac6bde2b8b4402981a70ea719044"
        ],
        [
            "by rewrite /= map_polyXn degree_mxminpoly_map.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "rewrite degree_mxminpoly_map -rmorphX /=.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "apply/polyP=> i; rewrite coef_map //= !coef_rVpoly degree_mxminpoly_map.",
            "VernacExtend",
            "56c014161b39aecfb3c54301c2409dba4e8e1857"
        ],
        [
            "case/insub: i => [i|]; last by rewrite rmorph0.",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "by rewrite -map_powers_mx -map_pinvmx // -map_mxvec -map_mxM // mxE.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma map_mx_inv_horner u : fp (mx_inv_horner A u) = mx_inv_horner A^f u^f.",
            "VernacStartTheoremProof",
            "a939343b3ce3dce4e0b22e13c65a382881ac0feb"
        ],
        [
            "rewrite map_rVpoly map_mxM map_mxvec map_pinvmx map_powers_mx.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "by rewrite /mx_inv_horner degree_mxminpoly_map.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "End MapField.",
            "VernacEndSegment",
            "ebcb8f413d1b9a1797eb1937836b1b524620f026"
        ],
        [
            "Section IntegralOverRing.",
            "VernacBeginSection",
            "7b416b5ea041aec794309a59ef5b967d19731b59"
        ],
        [
            "Definition integralOver (R K : ringType) (RtoK : R -> K) (z : K) := exists2 p, p \\is monic & root (map_poly RtoK p) z.",
            "VernacDefinition",
            "8164de222b1c5117790c894fdda41448a2e49e98"
        ],
        [
            "Definition integralRange R K RtoK := forall z, @integralOver R K RtoK z.",
            "VernacDefinition",
            "1aeeb648aa98b4265934fad7842aeb1d28ba6fa4"
        ],
        [
            "Variables (B R K : ringType) (BtoR : B -> R) (RtoK : {rmorphism R -> K}).",
            "VernacAssumption",
            "07be17de635ea93e4438a6fd43471a5dc68c4eef"
        ],
        [
            "Lemma integral_rmorph x : integralOver BtoR x -> integralOver (RtoK \\o BtoR) (RtoK x).",
            "VernacStartTheoremProof",
            "f688a5a844f4ae3e4cc72c038513346224a5cec5"
        ],
        [
            "by case=> p; exists p; rewrite // map_poly_comp rmorph_root.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma integral_id x : integralOver RtoK (RtoK x).",
            "VernacStartTheoremProof",
            "bebae8c0a744aeda0217cbad004146c9de4490a8"
        ],
        [
            "by exists ('X - x%:P); rewrite ?monicXsubC ?rmorph_root ?root_XsubC.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma integral_nat n : integralOver RtoK n%:R.",
            "VernacStartTheoremProof",
            "319e01e493f8e52cf32d078c44bc8be4bd590848"
        ],
        [
            "by rewrite -(rmorph_nat RtoK); apply: integral_id.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma integral0 : integralOver RtoK 0.",
            "VernacStartTheoremProof",
            "87655db1cc9712031b69a6b1da59f88f05af905a"
        ],
        [
            "exact: (integral_nat 0).",
            "VernacExtend",
            "ce637ff86bafca5d8359473e8c02af644dcbdc43"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma integral1 : integralOver RtoK 1.",
            "VernacStartTheoremProof",
            "ffa989a28327e195326323c4b1ebba0ca7a32787"
        ],
        [
            "exact: (integral_nat 1).",
            "VernacExtend",
            "ce637ff86bafca5d8359473e8c02af644dcbdc43"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma integral_poly (p : {poly K}) : (forall i, integralOver RtoK p`_i) <-> {in p : seq K, integralRange RtoK}.",
            "VernacStartTheoremProof",
            "3172c8df66a54007dff0154f114c2746f341f802"
        ],
        [
            "split=> intRp => [_ /(nthP 0)[i _ <-] // | i]; rewrite -[p]coefK coef_poly.",
            "VernacExtend",
            "82d53976234637e3f0907eb36cddf61d028c6306"
        ],
        [
            "by case: ifP => [ltip | _]; [apply/intRp/mem_nth | apply: integral0].",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "End IntegralOverRing.",
            "VernacEndSegment",
            "0af89f27c467b146fffc95a5a8126925f76d81f5"
        ],
        [
            "Section IntegralOverComRing.",
            "VernacBeginSection",
            "1425770b33a9e4d8d13e0b518abdef63894f02fb"
        ],
        [
            "Variables (R K : comRingType) (RtoK : {rmorphism R -> K}).",
            "VernacAssumption",
            "6993fd981c9a06413ac99336d7a3c11150243d3f"
        ],
        [
            "Lemma integral_horner_root w (p q : {poly K}) : p \\is monic -> root p w -> {in p : seq K, integralRange RtoK} -> {in q : seq K, integralRange RtoK} -> integralOver RtoK q.[w].",
            "VernacStartTheoremProof",
            "99e26126d4f5839b06b4510d5c58e3379ca17dfb"
        ],
        [
            "move=> mon_p pw0 intRp intRq.",
            "VernacExtend",
            "b1b2cb7a3a617cba67460b4eca1f04de3c1cc716"
        ],
        [
            "pose memR y := exists x, y = RtoK x.",
            "VernacExtend",
            "3c5f04de94609049d978298aa02ff35fb35ea7c7"
        ],
        [
            "have memRid x: memR (RtoK x) by exists x.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "have memR_nat n: memR n%:R by rewrite -(rmorph_nat RtoK).",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "have [memR0 memR1]: memR 0 * memR 1 := (memR_nat 0%N, memR_nat 1%N).",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "have memRN1: memR (- 1) by exists (- 1); rewrite rmorphN1.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "pose rVin (E : K -> Prop) n (a : 'rV[K]_n) := forall i, E (a 0 i).",
            "VernacExtend",
            "3c5f04de94609049d978298aa02ff35fb35ea7c7"
        ],
        [
            "pose pXin (E : K -> Prop) (r : {poly K}) := forall i, E r`_i.",
            "VernacExtend",
            "3c5f04de94609049d978298aa02ff35fb35ea7c7"
        ],
        [
            "pose memM E n (X : 'rV_n) y := exists a, rVin E n a /\\ y = (a *m X^T) 0 0.",
            "VernacExtend",
            "3c5f04de94609049d978298aa02ff35fb35ea7c7"
        ],
        [
            "pose finM E S := exists n, exists X, forall y, memM E n X y <-> S y.",
            "VernacExtend",
            "3c5f04de94609049d978298aa02ff35fb35ea7c7"
        ],
        [
            "have tensorM E n1 n2 X Y: finM E (memM (memM E n2 Y) n1 X).",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "exists (n1 * n2)%N, (mxvec (X^T *m Y)) => y.",
            "VernacExtend",
            "3c42b53d0efc26db114b00541ac5e7fcb29e6aeb"
        ],
        [
            "split=> [[a [Ea Dy]] | [a1 [/fin_all_exists[a /all_and2[Ea Da1]] ->]]].",
            "VernacExtend",
            "3c42b53d0efc26db114b00541ac5e7fcb29e6aeb"
        ],
        [
            "exists (Y *m (vec_mx a)^T); split=> [i|].",
            "VernacExtend",
            "ea7d21ca563c8195e49c2b582244022834ffc0f2"
        ],
        [
            "exists (row i (vec_mx a)); split=> [j|]; first by rewrite !mxE; apply: Ea.",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "by rewrite -row_mul -{1}[Y]trmxK -trmx_mul !mxE.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "by rewrite -[Y]trmxK -!trmx_mul mulmxA -mxvec_dotmul trmx_mul trmxK vec_mxK.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "exists (mxvec (\\matrix_i a i)); split.",
            "VernacExtend",
            "b541b80dda86715c922757731273e3e7fc29a4f9"
        ],
        [
            "by case/mxvec_indexP=> i j; rewrite mxvecE mxE; apply: Ea.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "rewrite -[mxvec _]trmxK -trmx_mul mxvec_dotmul -mulmxA trmx_mul !mxE.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "apply: eq_bigr => i _; rewrite Da1 !mxE; congr (_ * _).",
            "VernacExtend",
            "91580bd9cdf2cad626638a70b66bf9b00afa41b1"
        ],
        [
            "by apply: eq_bigr => j _; rewrite !mxE.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "suffices [m [X [[u [_ Du]] idealM]]]: exists m, exists X, let M := memM memR m X in M 1 /\\ forall y, M y -> M (q.[w] * y).",
            "VernacExtend",
            "290ed488b5562e885aa2cac56f3a69b4faa0eaa6"
        ],
        [
            "-",
            "VernacBullet",
            "581cab4bf49fa4b495e569bbda96fc8d28fddcc0"
        ],
        [
            "do [set M := memM _ m X; move: q.[w] => z] in idealM *.",
            "VernacExtend",
            "2ed5ae5c7a1513e882f170a2462d7a7c3c1ca435"
        ],
        [
            "have MX i: M (X 0 i).",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "by exists (delta_mx 0 i); split=> [j|]; rewrite -?rowE !mxE.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "have /fin_all_exists[a /all_and2[Fa Da1]] i := idealM _ (MX i).",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "have /fin_all_exists[r Dr] i := fin_all_exists (Fa i).",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "pose A := \\matrix_(i, j) r j i; pose B := z%:M - map_mx RtoK A.",
            "VernacExtend",
            "311b833fadff89b2f7ed817d3cd7cb6971c96a1e"
        ],
        [
            "have XB0: X *m B = 0.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "apply/eqP; rewrite mulmxBr mul_mx_scalar subr_eq0; apply/eqP/rowP=> i.",
            "VernacExtend",
            "da24caf87c1bbbad0538b8be68905ec456c78aa7"
        ],
        [
            "by rewrite !mxE Da1 mxE; apply: eq_bigr=> j _; rewrite !mxE mulrC Dr.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "exists (char_poly A); first exact: char_poly_monic.",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "have: (\\det B *: (u *m X^T)) 0 0 == 0.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "rewrite scalemxAr -linearZ -mul_mx_scalar -mul_mx_adj mulmxA XB0 /=.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "by rewrite mul0mx trmx0 mulmx0 mxE.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "rewrite mxE -Du mulr1 rootE -horner_evalE -!det_map_mx; congr (\\det _ == 0).",
            "VernacExtend",
            "a0279e71fd23ac6bde2b8b4402981a70ea719044"
        ],
        [
            "rewrite !raddfB /= !map_scalar_mx /= map_polyX horner_evalE hornerX.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "by apply/matrixP=> i j; rewrite !mxE map_polyC /horner_eval hornerC.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "pose gen1 x E y := exists2 r, pXin E r & y = r.[x]; pose gen := foldr gen1 memR.",
            "VernacExtend",
            "311b833fadff89b2f7ed817d3cd7cb6971c96a1e"
        ],
        [
            "have gen1S (E : K -> Prop) x y: E 0 -> E y -> gen1 x E y.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "by exists y%:P => [i|]; rewrite ?hornerC ?coefC //; case: ifP.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "have genR S y: memR y -> gen S y.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "by elim: S => //= x S IH in y * => /IH; apply: gen1S; apply: IH.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "have gen0 := genR _ 0 memR0; have gen_1 := genR _ 1 memR1.",
            "VernacExtend",
            "6e9d14df7d32ea0bf863301df3f6cb2d4e1b8e96"
        ],
        [
            "have{gen1S} genS S y: y \\in S -> gen S y.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "elim: S => //= x S IH /predU1P[-> | /IH//]; last exact: gen1S.",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "by exists 'X => [i|]; rewrite ?hornerX // coefX; apply: genR.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "pose propD (R : K -> Prop) := forall x y, R x -> R y -> R (x + y).",
            "VernacExtend",
            "3c5f04de94609049d978298aa02ff35fb35ea7c7"
        ],
        [
            "have memRD: propD memR.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "by move=> _ _ [a ->] [b ->]; exists (a + b); rewrite rmorphD.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "have genD S: propD (gen S).",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "elim: S => //= x S IH _ _ [r1 Sr1 ->] [r2 Sr2 ->]; rewrite -hornerD.",
            "VernacExtend",
            "de65c8193056a36f6dbb91fe21357bd770b140db"
        ],
        [
            "by exists (r1 + r2) => // i; rewrite coefD; apply: IH.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "have gen_sum S := big_ind _ (gen0 S) (genD S).",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "pose propM (R : K -> Prop) := forall x y, R x -> R y -> R (x * y).",
            "VernacExtend",
            "3c5f04de94609049d978298aa02ff35fb35ea7c7"
        ],
        [
            "have memRM: propM memR.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "by move=> _ _ [a ->] [b ->]; exists (a * b); rewrite rmorphM.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "have genM S: propM (gen S).",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "elim: S => //= x S IH _ _ [r1 Sr1 ->] [r2 Sr2 ->]; rewrite -hornerM.",
            "VernacExtend",
            "de65c8193056a36f6dbb91fe21357bd770b140db"
        ],
        [
            "by exists (r1 * r2) => // i; rewrite coefM; apply: gen_sum => j _; apply: IH.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "have gen_horner S r y: pXin (gen S) r -> gen S y -> gen S r.[y].",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "move=> Sq Sy; rewrite horner_coef; apply: gen_sum => [[i _] /= _].",
            "VernacExtend",
            "0fa388cebe8ed6372154caa26cd10c357f123670"
        ],
        [
            "by elim: {2}i => [|n IHn]; rewrite ?mulr1 // exprSr mulrA; apply: genM.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "pose S := w :: q ++ p; suffices [m [X defX]]: finM memR (gen S).",
            "VernacExtend",
            "5b6695ad242372f9089bd81df53ff1a22d3618ba"
        ],
        [
            "exists m, X => M; split=> [|y /defX Xy]; first exact/defX.",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "apply/defX/genM => //; apply: gen_horner => // [i|]; last exact/genS/mem_head.",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "rewrite -[q]coefK coef_poly; case: ifP => // lt_i_q.",
            "VernacExtend",
            "712d339e99ee17eb7d5033e19ac614eb3ca6b532"
        ],
        [
            "by apply: genS; rewrite inE mem_cat mem_nth ?orbT.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "pose intR R y := exists r, [/\\ r \\is monic, root r y & pXin R r].",
            "VernacExtend",
            "3c5f04de94609049d978298aa02ff35fb35ea7c7"
        ],
        [
            "pose fix genI s := if s is y :: s1 then intR (gen s1) y /\\ genI s1 else True.",
            "VernacExtend",
            "be59184aeceac70e4255bd58cff677d981339a6d"
        ],
        [
            "have{mon_p pw0 intRp intRq}: genI S.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "split; set S1 := _ ++ _; first exists p.",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "split=> // i; rewrite -[p]coefK coef_poly; case: ifP => // lt_i_p.",
            "VernacExtend",
            "2289f2bfae5d151681d361796cca422ec04b24ad"
        ],
        [
            "by apply: genS; rewrite mem_cat orbC mem_nth.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "have: all (mem S1) S1 by apply/allP.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "elim: {-1}S1 => //= y S2 IH /andP[S1y S12]; split; last exact: IH.",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "have{q S S1 IH S1y S12 intRp intRq} [q mon_q qx0]: integralOver RtoK y.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "by move: S1y; rewrite mem_cat => /orP[]; [apply: intRq | apply: intRp].",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "exists (map_poly RtoK q); split=> // [|i]; first exact: monic_map.",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "by rewrite coef_map /=; apply: genR.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "elim: {w p q}S => /= [_|x S IH [[p [mon_p px0 Sp]] /IH{IH}[m2 [X2 defS]]]].",
            "VernacExtend",
            "e686a1895f1799b840b76242f931100819a9ad6c"
        ],
        [
            "exists 1%N, 1 => y; split=> [[a [Fa ->]] | Fy].",
            "VernacExtend",
            "fbaa61af20867a5dfb8bb5213ca8048b258f8f3a"
        ],
        [
            "by rewrite tr_scalar_mx mulmx1; apply: Fa.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "by exists y%:M; split=> [i|]; rewrite 1?ord1 ?tr_scalar_mx ?mulmx1 mxE.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "pose m1 := (size p).-1; pose X1 := \\row_(i < m1) x ^+ i.",
            "VernacExtend",
            "311b833fadff89b2f7ed817d3cd7cb6971c96a1e"
        ],
        [
            "have [m [X defM]] := tensorM memR m1 m2 X1 X2; set M := memM _ _ _ in defM.",
            "VernacExtend",
            "81881a093b2294c76be3b432fbe83612064d7bc9"
        ],
        [
            "exists m, X => y; rewrite -/M; split=> [/defM[a [M2a]] | [q Sq]] -> {y}.",
            "VernacExtend",
            "a86f095f54b646acf73a0c2ed01262e62203b9e4"
        ],
        [
            "exists (rVpoly a) => [i|].",
            "VernacExtend",
            "3c42b53d0efc26db114b00541ac5e7fcb29e6aeb"
        ],
        [
            "by rewrite coef_rVpoly; case/insub: i => // i; apply/defS/M2a.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "rewrite mxE (horner_coef_wide _ (size_poly _ _)) -/(rVpoly a).",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "by apply: eq_bigr => i _; rewrite coef_rVpoly_ord !mxE.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "have M_0: M 0 by exists 0; split=> [i|]; rewrite ?mul0mx mxE.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "have M_D: propD M.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "move=> _ _ [a [Fa ->]] [b [Fb ->]]; exists (a + b).",
            "VernacExtend",
            "463c8f9f852be5fbe06114f560fd78fe4cd427e4"
        ],
        [
            "by rewrite mulmxDl !mxE; split=> // i; rewrite mxE; apply: memRD.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "have{M_0 M_D} Msum := big_ind _ M_0 M_D.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "rewrite horner_coef; apply: (Msum) => i _; case: i q`_i {Sq}(Sq i) => /=.",
            "VernacExtend",
            "e653a755ab5d693b79348e5a2832d3e386fea3c7"
        ],
        [
            "elim: {q}(size q) => // n IHn i i_le_n y Sy.",
            "VernacExtend",
            "e686a1895f1799b840b76242f931100819a9ad6c"
        ],
        [
            "have [i_lt_m1 | m1_le_i] := ltnP i m1.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "apply/defM; exists (y *: delta_mx 0 (Ordinal i_lt_m1)); split=> [j|].",
            "VernacExtend",
            "e8114e889ef77adc3d10398ad22ebee776c940cb"
        ],
        [
            "by apply/defS; rewrite !mxE /= mulr_natr; case: eqP.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "by rewrite -scalemxAl -rowE !mxE.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "rewrite -(subnK m1_le_i) exprD -[x ^+ m1]subr0 -(rootP px0) horner_coef.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "rewrite polySpred ?monic_neq0 // -/m1 big_ord_recr /= -lead_coefE.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "rewrite opprD addrC (monicP mon_p) mul1r subrK !mulrN -mulNr !mulr_sumr.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "apply: Msum => j _; rewrite mulrA mulrACA -exprD; apply: IHn.",
            "VernacExtend",
            "da24caf87c1bbbad0538b8be68905ec456c78aa7"
        ],
        [
            "by rewrite -addnS addnC addnBA // leq_subLR leq_add.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "by rewrite -mulN1r; do 2!apply: (genM) => //; apply: genR.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma integral_root_monic u p : p \\is monic -> root p u -> {in p : seq K, integralRange RtoK} -> integralOver RtoK u.",
            "VernacStartTheoremProof",
            "01a74f978b26a94d11aa04f91a4cd92272af89df"
        ],
        [
            "move=> mon_p pu0 intRp; rewrite -[u]hornerX.",
            "VernacExtend",
            "057edeb0967475c7ea5e8c98c449ddc5613eddc1"
        ],
        [
            "apply: integral_horner_root mon_p pu0 intRp _.",
            "VernacExtend",
            "4bd6fa79b17bcd2bfb7af091fb325367a20385d6"
        ],
        [
            "by apply/integral_poly => i; rewrite coefX; apply: integral_nat.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Hint Resolve (integral0 RtoK) (integral1 RtoK) (@monicXsubC K) : core.",
            "VernacHints",
            "3c5650f17af22b546aede8bc8eac3607daf05161"
        ],
        [
            "Let XsubC0 (u : K) : root ('X - u%:P) u.",
            "VernacDefinition",
            "c22af601ab577e349b2b32ae800f722911b12ae7"
        ],
        [
            "by rewrite root_XsubC.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Let intR_XsubC u : integralOver RtoK (- u) -> {in 'X - u%:P : seq K, integralRange RtoK}.",
            "VernacDefinition",
            "cab3b82943542925ae4cd6c41781c4fbd8c88022"
        ],
        [
            "by move=> intRu v; rewrite polyseqXsubC !inE => /pred2P[]->.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma integral_opp u : integralOver RtoK u -> integralOver RtoK (- u).",
            "VernacStartTheoremProof",
            "6a832daa3491770eac70d2f058978b05931130db"
        ],
        [
            "by rewrite -{1}[u]opprK => /intR_XsubC/integral_root_monic; apply.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma integral_horner (p : {poly K}) u : {in p : seq K, integralRange RtoK} -> integralOver RtoK u -> integralOver RtoK p.[u].",
            "VernacStartTheoremProof",
            "fc0079a9e4b1431ab5236bcf7803caaa92b86020"
        ],
        [
            "by move=> ? /integral_opp/intR_XsubC/integral_horner_root; apply.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma integral_sub u v : integralOver RtoK u -> integralOver RtoK v -> integralOver RtoK (u - v).",
            "VernacStartTheoremProof",
            "dd012e823179be0fe0ec39bc9bff75d8a37655bd"
        ],
        [
            "move=> intRu /integral_opp/intR_XsubC/integral_horner/(_ intRu).",
            "VernacExtend",
            "b1b2cb7a3a617cba67460b4eca1f04de3c1cc716"
        ],
        [
            "by rewrite !hornerE.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma integral_add u v : integralOver RtoK u -> integralOver RtoK v -> integralOver RtoK (u + v).",
            "VernacStartTheoremProof",
            "95587b3f1ff3bcb6714c11de1e844e8123e00ca1"
        ],
        [
            "by rewrite -{2}[v]opprK => intRu /integral_opp; apply: integral_sub.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma integral_mul u v : integralOver RtoK u -> integralOver RtoK v -> integralOver RtoK (u * v).",
            "VernacStartTheoremProof",
            "92c9f169ade839de3efa9b1641a34ef8709182ed"
        ],
        [
            "rewrite -{2}[v]hornerX -hornerZ => intRu; apply: integral_horner.",
            "VernacExtend",
            "2855640502da0a3b2cfdfcd02ea9662c049d9a24"
        ],
        [
            "by apply/integral_poly=> i; rewrite coefZ coefX mulr_natr mulrb; case: ifP.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "End IntegralOverComRing.",
            "VernacEndSegment",
            "b938975d6d005810df7b2627d7302ccaa3b10ea9"
        ],
        [
            "Section IntegralOverField.",
            "VernacBeginSection",
            "2ca1e7c0e50dcc923b84accb1287f0837e4d9aa4"
        ],
        [
            "Variables (F E : fieldType) (FtoE : {rmorphism F -> E}).",
            "VernacAssumption",
            "705013ed0a32c663a610d2ed3502dbc1b22a3864"
        ],
        [
            "Definition algebraicOver (fFtoE : F -> E) u := exists2 p, p != 0 & root (map_poly fFtoE p) u.",
            "VernacDefinition",
            "009740f87f08873f030fa206a5b8263bf8d2f8f7"
        ],
        [
            "Notation mk_mon p := ((lead_coef p)^-1 *: p).",
            "VernacSyntacticDefinition",
            "5663639ca359456f383daa06fb6e63ce57ed8a5b"
        ],
        [
            "Lemma integral_algebraic u : algebraicOver FtoE u <-> integralOver FtoE u.",
            "VernacStartTheoremProof",
            "fc832b5b483abf6549b3f017b0158a18f56f9617"
        ],
        [
            "split=> [] [p p_nz pu0]; last by exists p; rewrite ?monic_neq0.",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "exists (mk_mon p); first by rewrite monicE lead_coefZ mulVf ?lead_coef_eq0.",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "by rewrite linearZ rootE hornerZ (rootP pu0) mulr0.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma algebraic_id a : algebraicOver FtoE (FtoE a).",
            "VernacStartTheoremProof",
            "020d81e64a83a0df7281d5df5b55822d05cd6073"
        ],
        [
            "exact/integral_algebraic/integral_id.",
            "VernacExtend",
            "ce637ff86bafca5d8359473e8c02af644dcbdc43"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma algebraic0 : algebraicOver FtoE 0.",
            "VernacStartTheoremProof",
            "83e072a2773e33a270b535384ea4c755911b7cf4"
        ],
        [
            "exact/integral_algebraic/integral0.",
            "VernacExtend",
            "ce637ff86bafca5d8359473e8c02af644dcbdc43"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma algebraic1 : algebraicOver FtoE 1.",
            "VernacStartTheoremProof",
            "88d7c3bf1604a07bdc0b3bf9f6508a71f8f64c2d"
        ],
        [
            "exact/integral_algebraic/integral1.",
            "VernacExtend",
            "ce637ff86bafca5d8359473e8c02af644dcbdc43"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma algebraic_opp x : algebraicOver FtoE x -> algebraicOver FtoE (- x).",
            "VernacStartTheoremProof",
            "d9d04d75e287d23afd7ac59a5651cb5ac2b4e99c"
        ],
        [
            "by move/integral_algebraic/integral_opp/integral_algebraic.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma algebraic_add x y : algebraicOver FtoE x -> algebraicOver FtoE y -> algebraicOver FtoE (x + y).",
            "VernacStartTheoremProof",
            "3cbe38ae3bc63aca6021050b9a2f0db2db47f033"
        ],
        [
            "move/integral_algebraic=> intFx /integral_algebraic intFy.",
            "VernacExtend",
            "b1b2cb7a3a617cba67460b4eca1f04de3c1cc716"
        ],
        [
            "exact/integral_algebraic/integral_add.",
            "VernacExtend",
            "ce637ff86bafca5d8359473e8c02af644dcbdc43"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma algebraic_sub x y : algebraicOver FtoE x -> algebraicOver FtoE y -> algebraicOver FtoE (x - y).",
            "VernacStartTheoremProof",
            "56cc1188d81a8d7cd264b1467e8f85bd5d4f464a"
        ],
        [
            "by move=> algFx /algebraic_opp; apply: algebraic_add.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma algebraic_mul x y : algebraicOver FtoE x -> algebraicOver FtoE y -> algebraicOver FtoE (x * y).",
            "VernacStartTheoremProof",
            "f3b9ee70c121a20a1b806dd6fe7f1b4d18ae3367"
        ],
        [
            "move/integral_algebraic=> intFx /integral_algebraic intFy.",
            "VernacExtend",
            "b1b2cb7a3a617cba67460b4eca1f04de3c1cc716"
        ],
        [
            "exact/integral_algebraic/integral_mul.",
            "VernacExtend",
            "ce637ff86bafca5d8359473e8c02af644dcbdc43"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma algebraic_inv u : algebraicOver FtoE u -> algebraicOver FtoE u^-1.",
            "VernacStartTheoremProof",
            "653ad67f14846d83171137fc4c4bc5e451cd4dda"
        ],
        [
            "have [-> | /expf_neq0 nz_u_n] := eqVneq u 0; first by rewrite invr0.",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "case=> p nz_p pu0; exists (Poly (rev p)).",
            "VernacExtend",
            "f1d2ea843e5d3b0e931ec151701fd984466e4d52"
        ],
        [
            "apply/eqP=> /polyP/(_ 0%N); rewrite coef_Poly coef0 nth_rev ?size_poly_gt0 //.",
            "VernacExtend",
            "56c014161b39aecfb3c54301c2409dba4e8e1857"
        ],
        [
            "by apply/eqP; rewrite subn1 lead_coef_eq0.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "apply/eqP/(mulfI (nz_u_n (size p).-1)); rewrite mulr0 -(rootP pu0).",
            "VernacExtend",
            "56c014161b39aecfb3c54301c2409dba4e8e1857"
        ],
        [
            "rewrite (@horner_coef_wide _ (size p)); last first.",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "by rewrite size_map_poly -(size_rev p) size_Poly.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "rewrite horner_coef mulr_sumr size_map_poly.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "rewrite [rhs in _ = rhs](reindex_inj rev_ord_inj) /=.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "apply: eq_bigr => i _; rewrite !coef_map coef_Poly nth_rev // mulrCA.",
            "VernacExtend",
            "56c014161b39aecfb3c54301c2409dba4e8e1857"
        ],
        [
            "by congr (_ * _); rewrite -{1}(subnKC (valP i)) addSn addnC exprD exprVn ?mulfK.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma algebraic_div x y : algebraicOver FtoE x -> algebraicOver FtoE y -> algebraicOver FtoE (x / y).",
            "VernacStartTheoremProof",
            "ba1840886f64290bde946830a77aa02a6bd3aabf"
        ],
        [
            "by move=> algFx /algebraic_inv; apply: algebraic_mul.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma integral_inv x : integralOver FtoE x -> integralOver FtoE x^-1.",
            "VernacStartTheoremProof",
            "5c729babe679dc851577d241a11ce6990064e2b2"
        ],
        [
            "by move/integral_algebraic/algebraic_inv/integral_algebraic.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma integral_div x y : integralOver FtoE x -> integralOver FtoE y -> integralOver FtoE (x / y).",
            "VernacStartTheoremProof",
            "23c8d069a849af4d434eb2c707da612837ffe87d"
        ],
        [
            "by move=> algFx /integral_inv; apply: integral_mul.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma integral_root p u : p != 0 -> root p u -> {in p : seq E, integralRange FtoE} -> integralOver FtoE u.",
            "VernacStartTheoremProof",
            "8d6318a485e17418e1900122ff2aab40cbeedd70"
        ],
        [
            "move=> nz_p pu0 algFp.",
            "VernacExtend",
            "b1b2cb7a3a617cba67460b4eca1f04de3c1cc716"
        ],
        [
            "have mon_p1: mk_mon p \\is monic.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "by rewrite monicE lead_coefZ mulVf ?lead_coef_eq0.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "have p1u0: root (mk_mon p) u by rewrite rootE hornerZ (rootP pu0) mulr0.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "apply: integral_root_monic mon_p1 p1u0 _ => _ /(nthP 0)[i ltip <-].",
            "VernacExtend",
            "4bd6fa79b17bcd2bfb7af091fb325367a20385d6"
        ],
        [
            "rewrite coefZ mulrC; rewrite size_scale ?invr_eq0 ?lead_coef_eq0 // in ltip.",
            "VernacExtend",
            "2194fcb4d6d52cbae24a29f7ff14a3997f1912fd"
        ],
        [
            "by apply: integral_div; apply/algFp/mem_nth; rewrite -?polySpred.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "End IntegralOverField.",
            "VernacEndSegment",
            "ff49228803a468fc3e097d4f41dabf7f0cf464f2"
        ],
        [
            "Module MatrixFormula.",
            "VernacDefineModule",
            "56b4a5fa329eb4f1894f824efdb0598e74897785"
        ],
        [
            "Section MatrixFormula.",
            "VernacBeginSection",
            "c47e6f4eb275e540e46d864c3965573f217515f0"
        ],
        [
            "Variable F : fieldType.",
            "VernacAssumption",
            "dfbeb3104cff90ac5c843c17124389867a4c6a4a"
        ],
        [
            "Local Notation False := GRing.False.",
            "VernacSyntacticDefinition",
            "c98fe9db3c87bcaf7289792779d227be932397ee"
        ],
        [
            "Local Notation True := GRing.True.",
            "VernacSyntacticDefinition",
            "65d04640212e91d9afdad3cc23d8abccbd298e8f"
        ],
        [
            "Local Notation And := GRing.And (only parsing).",
            "VernacSyntacticDefinition",
            "424e3a0eec56f1ff36d80aa26e18ae4ce6e8878e"
        ],
        [
            "Local Notation Add := GRing.Add (only parsing).",
            "VernacSyntacticDefinition",
            "de6201e1b6454e9e818bddaaba83dff66a6e68dc"
        ],
        [
            "Local Notation Bool b := (GRing.Bool b%bool).",
            "VernacSyntacticDefinition",
            "823d9861055fb59f25e193fcc9306ac3ff06da3e"
        ],
        [
            "Local Notation term := (GRing.term F).",
            "VernacSyntacticDefinition",
            "3d7bedaf601b32a867443e8a5bdebe953a8310de"
        ],
        [
            "Local Notation form := (GRing.formula F).",
            "VernacSyntacticDefinition",
            "4fe58c2a7c56cdb65302c99593552b9aebf1bb6d"
        ],
        [
            "Local Notation eval := GRing.eval.",
            "VernacSyntacticDefinition",
            "15e217040e35a98a078491aa50cb104b7fca2a9b"
        ],
        [
            "Local Notation holds := GRing.holds.",
            "VernacSyntacticDefinition",
            "86f3d8b7735695e61244f0519a6311fc6abc3c7f"
        ],
        [
            "Local Notation qf_form := GRing.qf_form.",
            "VernacSyntacticDefinition",
            "9493778ef8681a5dd1fd8da9a33bd739ac2558d9"
        ],
        [
            "Local Notation qf_eval := GRing.qf_eval.",
            "VernacSyntacticDefinition",
            "15970cd748cb2c77c6ba8a552781f5455678d9d2"
        ],
        [
            "Definition eval_mx (e : seq F) := @map_mx term F (eval e).",
            "VernacDefinition",
            "5fe4d94c4619c4be2daf98af029e25ee75799571"
        ],
        [
            "Definition mx_term := @map_mx F term GRing.Const.",
            "VernacDefinition",
            "092cf8ed98e4630b0531d8a3065217be1662b4c6"
        ],
        [
            "Lemma eval_mx_term e m n (A : 'M_(m, n)) : eval_mx e (mx_term A) = A.",
            "VernacStartTheoremProof",
            "f7c138fb3cf5e559335cc517f08a86beaf10ac68"
        ],
        [
            "by apply/matrixP=> i j; rewrite !mxE.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Definition mulmx_term m n p (A : 'M[term]_(m, n)) (B : 'M_(n, p)) := \\matrix_(i, k) (\\big[Add/0]_j (A i j * B j k))%T.",
            "VernacDefinition",
            "fdf78edb73bd43a13b769438329eb315530bc43b"
        ],
        [
            "Lemma eval_mulmx e m n p (A : 'M[term]_(m, n)) (B : 'M_(n, p)) : eval_mx e (mulmx_term A B) = eval_mx e A *m eval_mx e B.",
            "VernacStartTheoremProof",
            "414cf6653a2516fc142a00137c252c5f68a9a26f"
        ],
        [
            "apply/matrixP=> i k; rewrite !mxE /= ((big_morph (eval e)) 0 +%R) //=.",
            "VernacExtend",
            "56c014161b39aecfb3c54301c2409dba4e8e1857"
        ],
        [
            "by apply: eq_bigr => j _; rewrite /= !mxE.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Local Notation morphAnd f := ((big_morph f) true andb).",
            "VernacSyntacticDefinition",
            "eb53dd11d71c27185c4832688e3ae6fcac07f057"
        ],
        [
            "Let Schur m n (A : 'M[term]_(1 + m, 1 + n)) (a := A 0 0) := \\matrix_(i, j) (drsubmx A i j - a^-1 * dlsubmx A i 0%R * ursubmx A 0%R j)%T.",
            "VernacDefinition",
            "088ad214230483a42abfd030d5dc191296d5110f"
        ],
        [
            "Fixpoint mxrank_form (r m n : nat) : 'M_(m, n) -> form := match m, n return 'M_(m, n) -> form with | m'.+1, n'.+1 => fun A : 'M_(1 + m', 1 + n') => let nzA k := A k.1 k.2 != 0 in let xSchur k := Schur (xrow k.1 0%R (xcol k.2 0%R A)) in let recf k := Bool (r > 0) /\\ mxrank_form r.-1 (xSchur k) in GRing.Pick nzA recf (Bool (r == 0%N)) | _, _ => fun _ => Bool (r == 0%N) end%T.",
            "VernacFixpoint",
            "f20d9e7eac6883a251fcd55c8358f5be6573e391"
        ],
        [
            "Lemma mxrank_form_qf r m n (A : 'M_(m, n)) : qf_form (mxrank_form r A).",
            "VernacStartTheoremProof",
            "00b2c8865139ac78b3eeef4d7394e4645054c35a"
        ],
        [
            "by elim: m r n A => [|m IHm] r [|n] A //=; rewrite GRing.Pick_form_qf /=.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma eval_mxrank e r m n (A : 'M_(m, n)) : qf_eval e (mxrank_form r A) = (\\rank (eval_mx e A) == r).",
            "VernacStartTheoremProof",
            "f758f311e1ee720c730773ddfc65db26ad5b3a42"
        ],
        [
            "elim: m r n A => [|m IHm] r [|n] A /=; try by case r.",
            "VernacExtend",
            "4f3ff96ca2d1111d66bee768f7796420a56e669b"
        ],
        [
            "rewrite GRing.eval_Pick /mxrank unlock /=; set pf := fun _ => _.",
            "VernacExtend",
            "c1f58f36c5711f022b4a54717f37c2782f34a159"
        ],
        [
            "rewrite -(@eq_pick _ pf) => [|k]; rewrite {}/pf ?mxE // eq_sym.",
            "VernacExtend",
            "82d53976234637e3f0907eb36cddf61d028c6306"
        ],
        [
            "case: pick => [[i j]|] //=; set B := _ - _; have:= mxrankE B.",
            "VernacExtend",
            "acc0604db0f20b0bdae6a0171f6334cd21a1f00a"
        ],
        [
            "case: (Gaussian_elimination B) r => [[_ _] _] [|r] //= <-; rewrite {}IHm eqSS.",
            "VernacExtend",
            "90a2acb29b7a5304b0ab6ba5269c420638ddef63"
        ],
        [
            "by congr (\\rank _ == r); apply/matrixP=> k l; rewrite !(mxE, big_ord1) !tpermR.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma eval_vec_mx e m n (u : 'rV_(m * n)) : eval_mx e (vec_mx u) = vec_mx (eval_mx e u).",
            "VernacStartTheoremProof",
            "8d108a2af9ab37e50ac12d323c0a75b04c27c833"
        ],
        [
            "by apply/matrixP=> i j; rewrite !mxE.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma eval_mxvec e m n (A : 'M_(m, n)) : eval_mx e (mxvec A) = mxvec (eval_mx e A).",
            "VernacStartTheoremProof",
            "b7e3b2656d6d975b088a3dad2f6097c9263ba95b"
        ],
        [
            "by rewrite -{2}[A]mxvecK eval_vec_mx vec_mxK.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Section Subsetmx.",
            "VernacBeginSection",
            "eab9375cfe5af36346dd19f6ea76aeb224d7a13f"
        ],
        [
            "Variables (m1 m2 n : nat) (A : 'M[term]_(m1, n)) (B : 'M[term]_(m2, n)).",
            "VernacAssumption",
            "dbbece432bdc249528597e92b1f51a5d40857d22"
        ],
        [
            "Definition submx_form := \\big[And/True]_(r < n.+1) (mxrank_form r (col_mx A B) ==> mxrank_form r B)%T.",
            "VernacDefinition",
            "65852d08bd8bd1f450316c9a2900eef5e271d873"
        ],
        [
            "Lemma eval_col_mx e : eval_mx e (col_mx A B) = col_mx (eval_mx e A) (eval_mx e B).",
            "VernacStartTheoremProof",
            "afb2fac94c70d43db5f1aca959fad341d6705148"
        ],
        [
            "by apply/matrixP=> i j; do 2![rewrite !mxE //; case: split => ?].",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma submx_form_qf : qf_form submx_form.",
            "VernacStartTheoremProof",
            "e6eadcc9f5a35ec0d13183f30e3e346713b69c13"
        ],
        [
            "by rewrite (morphAnd (@qf_form _)) ?big1 //= => r _; rewrite !mxrank_form_qf.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma eval_submx e : qf_eval e submx_form = (eval_mx e A <= eval_mx e B)%MS.",
            "VernacStartTheoremProof",
            "15912dcefdbe077bedabb921eaf1b4f879d1ac13"
        ],
        [
            "rewrite (morphAnd (qf_eval e)) //= big_andE /=.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "apply/forallP/idP=> /= [|sAB d]; last first.",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "rewrite !eval_mxrank eval_col_mx -addsmxE; apply/implyP=> /eqP <-.",
            "VernacExtend",
            "634a7639ed2fb7caf62757f84400927f5829b7d5"
        ],
        [
            "by rewrite mxrank_leqif_sup ?addsmxSr // addsmx_sub sAB /=.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "move/(_ (inord (\\rank (eval_mx e (col_mx A B))))).",
            "VernacExtend",
            "b1b2cb7a3a617cba67460b4eca1f04de3c1cc716"
        ],
        [
            "rewrite inordK ?ltnS ?rank_leq_col // !eval_mxrank eqxx /= eval_col_mx.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "by rewrite -addsmxE mxrank_leqif_sup ?addsmxSr // addsmx_sub; case/andP.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "End Subsetmx.",
            "VernacEndSegment",
            "a207d412613eb6a53f750e67d4524508bac42bb5"
        ],
        [
            "Section Env.",
            "VernacBeginSection",
            "f09e7e20d7c0885bb1a110109d58551f0fd26e28"
        ],
        [
            "Variable d : nat.",
            "VernacAssumption",
            "8e9a797faa721ab742e33c1b02f5b8df43d0fe8e"
        ],
        [
            "Definition seq_of_rV (v : 'rV_d) : seq F := fgraph [ffun i => v 0 i].",
            "VernacDefinition",
            "4cf917d3d4fd7d9e06fdffe8bd88e4c70f495370"
        ],
        [
            "Lemma size_seq_of_rV v : size (seq_of_rV v) = d.",
            "VernacStartTheoremProof",
            "3c4685db5b83a263df674e3727d9cdaebfb74a79"
        ],
        [
            "by rewrite tuple.size_tuple card_ord.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma nth_seq_of_rV x0 v (i : 'I_d) : nth x0 (seq_of_rV v) i = v 0 i.",
            "VernacStartTheoremProof",
            "8769b966740510e3512e82ab81871c25b3d4c75a"
        ],
        [
            "by rewrite nth_fgraph_ord ffunE.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Definition row_var k : 'rV[term]_d := \\row_i ('X_(k * d + i))%T.",
            "VernacDefinition",
            "46950cc754081dd78b00c78d632f3d03e8d2b3a5"
        ],
        [
            "Definition row_env (e : seq 'rV_d) := flatten (map seq_of_rV e).",
            "VernacDefinition",
            "5bbfa1b98c00dd6df97c0e9a7e977477eac72015"
        ],
        [
            "Lemma nth_row_env e k (i : 'I_d) : (row_env e)`_(k * d + i) = e`_k 0 i.",
            "VernacStartTheoremProof",
            "816b3a8a054b7c240ab3e37c5ee68b33ab539fd3"
        ],
        [
            "elim: e k => [|v e IHe] k; first by rewrite !nth_nil mxE.",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "rewrite /row_env /= nth_cat size_seq_of_rV.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "case: k => [|k]; first by rewrite (valP i) nth_seq_of_rV.",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "by rewrite mulSn -addnA -if_neg -leqNgt leq_addr addKn IHe.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma eval_row_var e k : eval_mx (row_env e) (row_var k) = e`_k :> 'rV_d.",
            "VernacStartTheoremProof",
            "65b984e0271d59678f8d6ebb8bb5c988eba00226"
        ],
        [
            "by apply/rowP=> i; rewrite !mxE /= nth_row_env.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Definition Exists_row_form k (f : form) := foldr GRing.Exists f (codom (fun i : 'I_d => k * d + i)%N).",
            "VernacDefinition",
            "9a69c1af9825d2f6b9fbe5c65d0254567b0d7643"
        ],
        [
            "Lemma Exists_rowP e k f : d > 0 -> ((exists v : 'rV[F]_d, holds (row_env (set_nth 0 e k v)) f) <-> holds (row_env e) (Exists_row_form k f)).",
            "VernacStartTheoremProof",
            "529c973093af180fabf819a4e19a652ad373f7d3"
        ],
        [
            "move=> d_gt0; pose i_ j := Ordinal (ltn_pmod j d_gt0).",
            "VernacExtend",
            "fef3c4a8f7fcf70b0824f3cce5fb58f2e0ef07fd"
        ],
        [
            "have d_eq j: (j = j %/ d * d + i_ j)%N := divn_eq j d.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "split=> [[v f_v] | ]; last case/GRing.foldExistsP=> e' ee' f_e'.",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "apply/GRing.foldExistsP; exists (row_env (set_nth 0 e k v)) => {f f_v}// j.",
            "VernacExtend",
            "5fce7e5361004176d6b434b36b4623c7387f70bb"
        ],
        [
            "rewrite [j]d_eq !nth_row_env nth_set_nth /=; case: eqP => // ->.",
            "VernacExtend",
            "712d339e99ee17eb7d5033e19ac614eb3ca6b532"
        ],
        [
            "by case/imageP; exists (i_ j).",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "exists (\\row_i e'`_(k * d + i)); apply: eq_holds f_e' => j /=.",
            "VernacExtend",
            "b49ba2d25b404ae78a92de139110be0d7cf30433"
        ],
        [
            "move/(_ j): ee'; rewrite [j]d_eq !nth_row_env nth_set_nth /=.",
            "VernacExtend",
            "057edeb0967475c7ea5e8c98c449ddc5613eddc1"
        ],
        [
            "case: eqP => [-> | ne_j_k -> //]; first by rewrite mxE.",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "apply/mapP=> [[r lt_r_d]]; rewrite -d_eq => def_j; case: ne_j_k.",
            "VernacExtend",
            "eb0a7935a6af453dd4e1da41ce0302efcc507f4e"
        ],
        [
            "by rewrite def_j divnMDl // divn_small ?addn0.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "End Env.",
            "VernacEndSegment",
            "0dc6fa4fa33e4f8a8633e189d57fb77908fbee7a"
        ],
        [
            "End MatrixFormula.",
            "VernacEndSegment",
            "fffd7b9786126aaa7a9e347163ff3770830faabf"
        ],
        [
            "End MatrixFormula.",
            "VernacEndSegment",
            "fffd7b9786126aaa7a9e347163ff3770830faabf"
        ]
    ],
    "proofs": [
        {
            "name": "coef_rVpoly",
            "line_nb": 17,
            "steps": [
                {
                    "command": [
                        "by rewrite coef_poly; case: insubP => [i ->|]; rewrite ?if_same.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "coef_rVpoly_ord",
            "line_nb": 20,
            "steps": [
                {
                    "command": [
                        "by rewrite coef_rVpoly valK.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "rVpoly_delta",
            "line_nb": 23,
            "steps": [
                {
                    "command": [
                        "apply/polyP=> j; rewrite coef_rVpoly coefXn.",
                        "VernacExtend",
                        "56c014161b39aecfb3c54301c2409dba4e8e1857"
                    ]
                },
                {
                    "command": [
                        "case: insubP => [k _ <- | j_ge_d]; first by rewrite mxE.",
                        "VernacExtend",
                        "3763a4b8db689af316a7372b722bb29806ab4fb6"
                    ]
                },
                {
                    "command": [
                        "by case: eqP j_ge_d => // ->; rewrite ltn_ord.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "rVpolyK",
            "line_nb": 28,
            "steps": [
                {
                    "command": [
                        "by move=> u; apply/rowP=> i; rewrite mxE coef_rVpoly_ord.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "poly_rV_K",
            "line_nb": 31,
            "steps": [
                {
                    "command": [
                        "move=> le_p_d; apply/polyP=> k; rewrite coef_rVpoly.",
                        "VernacExtend",
                        "f7feb259d6220ca40e8a86b90bd06f137aa140ac"
                    ]
                },
                {
                    "command": [
                        "case: insubP => [i _ <- | ]; first by rewrite mxE.",
                        "VernacExtend",
                        "3763a4b8db689af316a7372b722bb29806ab4fb6"
                    ]
                },
                {
                    "command": [
                        "by rewrite -ltnNge => le_d_l; rewrite nth_default ?(leq_trans le_p_d).",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "poly_rV_is_linear",
            "line_nb": 36,
            "steps": [
                {
                    "command": [
                        "by move=> a p q; apply/rowP=> i; rewrite !mxE coefD coefZ.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "rVpoly_is_linear",
            "line_nb": 41,
            "steps": [
                {
                    "command": [
                        "move=> a u v; apply/polyP=> k; rewrite coefD coefZ !coef_rVpoly.",
                        "VernacExtend",
                        "f7feb259d6220ca40e8a86b90bd06f137aa140ac"
                    ]
                },
                {
                    "command": [
                        "by case: insubP => [i _ _ | _]; rewrite ?mxE // mulr0 addr0.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "Sylvester_mxE",
            "line_nb": 56,
            "steps": [
                {
                    "command": [
                        "move=> S_; rewrite mxE; case: {i}(split i) => i; rewrite !mxE /=; by rewrite rVpoly_delta coefXnM ltnNge if_neg -mulrb.",
                        "VernacExtend",
                        "0deecc1be2a51fd1530b09013518982b43a5a96c"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "horner_mx_C",
            "line_nb": 180,
            "steps": [
                {
                    "command": [
                        "exact: horner_morphC.",
                        "VernacExtend",
                        "ce637ff86bafca5d8359473e8c02af644dcbdc43"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "horner_mx_X",
            "line_nb": 183,
            "steps": [
                {
                    "command": [
                        "exact: horner_morphX.",
                        "VernacExtend",
                        "ce637ff86bafca5d8359473e8c02af644dcbdc43"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "horner_mxZ",
            "line_nb": 186,
            "steps": [
                {
                    "command": [
                        "move=> a p /=; rewrite -mul_polyC rmorphM /=.",
                        "VernacExtend",
                        "057edeb0967475c7ea5e8c98c449ddc5613eddc1"
                    ]
                },
                {
                    "command": [
                        "by rewrite horner_mx_C [_ * _]mul_scalar_mx.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "horner_rVpoly",
            "line_nb": 193,
            "steps": [
                {
                    "command": [
                        "rewrite mulmx_sum_row linear_sum [rVpoly u]poly_def rmorph_sum.",
                        "VernacExtend",
                        "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
                    ]
                },
                {
                    "command": [
                        "apply: eq_bigr => i _.",
                        "VernacExtend",
                        "4bd6fa79b17bcd2bfb7af091fb325367a20385d6"
                    ]
                },
                {
                    "command": [
                        "by rewrite valK !linearZ rmorphX /= horner_mx_X rowK /= mxvecK.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "size_diagA",
            "line_nb": 206,
            "steps": [
                {
                    "command": [
                        "by rewrite size_image card_ord.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "size_char_poly",
            "line_nb": 232,
            "steps": [
                {
                    "command": [
                        "have [q <- lt_q_n] := split_diagA; have le_q_n := leq_trans lt_q_n (leq_pred n).",
                        "VernacExtend",
                        "6e9d14df7d32ea0bf863301df3f6cb2d4e1b8e96"
                    ]
                },
                {
                    "command": [
                        "by rewrite size_addl size_prod_XsubC size_diagA.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "char_poly_monic",
            "line_nb": 236,
            "steps": [
                {
                    "command": [
                        "rewrite monicE -(monicP (monic_prod_XsubC diagA xpredT id)).",
                        "VernacExtend",
                        "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
                    ]
                },
                {
                    "command": [
                        "rewrite !lead_coefE size_char_poly.",
                        "VernacExtend",
                        "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
                    ]
                },
                {
                    "command": [
                        "have [q <- lt_q_n] := split_diagA; have le_q_n := leq_trans lt_q_n (leq_pred n).",
                        "VernacExtend",
                        "6e9d14df7d32ea0bf863301df3f6cb2d4e1b8e96"
                    ]
                },
                {
                    "command": [
                        "by rewrite size_prod_XsubC size_diagA coefD (nth_default 0 le_q_n) addr0.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "mx_poly_ring_isom",
            "line_nb": 263,
            "steps": [
                {
                    "command": [
                        "set M_RX := 'M[{poly R}]_n; set MR_X := ({poly 'M[R]_n}).",
                        "VernacExtend",
                        "7405ffc63057f1493a790d3f39e251cc5fefe81f"
                    ]
                },
                {
                    "command": [
                        "pose Msize (A : M_RX) := \\max_i \\max_j size (A i j).",
                        "VernacExtend",
                        "3c5f04de94609049d978298aa02ff35fb35ea7c7"
                    ]
                },
                {
                    "command": [
                        "pose phi (A : M_RX) := \\poly_(k < Msize A) \\matrix_(i, j) (A i j)`_k.",
                        "VernacExtend",
                        "3c5f04de94609049d978298aa02ff35fb35ea7c7"
                    ]
                },
                {
                    "command": [
                        "have coef_phi A i j k: (phi A)`_k i j = (A i j)`_k.",
                        "VernacExtend",
                        "406cde1174359c53bf162a2a18c4eede395555f9"
                    ]
                },
                {
                    "command": [
                        "rewrite coef_poly; case: (ltnP k _) => le_m_k; rewrite mxE // nth_default //.",
                        "VernacExtend",
                        "1dc1cec635c64f0cc3ec64ea6e4d6c7d5b8f81f6"
                    ]
                },
                {
                    "command": [
                        "by apply: leq_trans (leq_trans (leq_bigmax i) le_m_k); apply: (leq_bigmax j).",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "have phi_is_rmorphism : rmorphism phi.",
                        "VernacExtend",
                        "406cde1174359c53bf162a2a18c4eede395555f9"
                    ]
                },
                {
                    "command": [
                        "do 2?[split=> [A B|]]; apply/polyP=> k; apply/matrixP=> i j; last 1 first.",
                        "VernacExtend",
                        "3763a4b8db689af316a7372b722bb29806ab4fb6"
                    ]
                },
                {
                    "command": [
                        "-",
                        "VernacBullet",
                        "581cab4bf49fa4b495e569bbda96fc8d28fddcc0"
                    ]
                },
                {
                    "command": [
                        "rewrite coef_phi mxE coefMn !coefC.",
                        "VernacExtend",
                        "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
                    ]
                },
                {
                    "command": [
                        "by case: (k == _); rewrite ?mxE ?mul0rn.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "-",
                        "VernacBullet",
                        "581cab4bf49fa4b495e569bbda96fc8d28fddcc0"
                    ]
                },
                {
                    "command": [
                        "by rewrite !(coef_phi, mxE, coefD, coefN).",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "rewrite !coef_phi !mxE !coefM summxE coef_sum.",
                        "VernacExtend",
                        "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
                    ]
                },
                {
                    "command": [
                        "pose F k1 k2 := (A i k1)`_k2 * (B k1 j)`_(k - k2).",
                        "VernacExtend",
                        "3c5f04de94609049d978298aa02ff35fb35ea7c7"
                    ]
                },
                {
                    "command": [
                        "transitivity (\\sum_k1 \\sum_(k2 < k.+1) F k1 k2); rewrite {}/F.",
                        "VernacExtend",
                        "705f663cb8724b2b0a595a93392e4b6dcdded521"
                    ]
                },
                {
                    "command": [
                        "by apply: eq_bigr=> k1 _; rewrite coefM.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "rewrite exchange_big /=; apply: eq_bigr => k2 _.",
                        "VernacExtend",
                        "634a7639ed2fb7caf62757f84400927f5829b7d5"
                    ]
                },
                {
                    "command": [
                        "by rewrite mxE; apply: eq_bigr => k1 _; rewrite !coef_phi.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "have bij_phi: bijective phi.",
                        "VernacExtend",
                        "406cde1174359c53bf162a2a18c4eede395555f9"
                    ]
                },
                {
                    "command": [
                        "exists (fun P : MR_X => \\matrix_(i, j) \\poly_(k < size P) P`_k i j) => [A|P].",
                        "VernacExtend",
                        "3c42b53d0efc26db114b00541ac5e7fcb29e6aeb"
                    ]
                },
                {
                    "command": [
                        "apply/matrixP=> i j; rewrite mxE; apply/polyP=> k.",
                        "VernacExtend",
                        "da24caf87c1bbbad0538b8be68905ec456c78aa7"
                    ]
                },
                {
                    "command": [
                        "rewrite coef_poly -coef_phi.",
                        "VernacExtend",
                        "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
                    ]
                },
                {
                    "command": [
                        "by case: leqP => // P_le_k; rewrite nth_default ?mxE.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "apply/polyP=> k; apply/matrixP=> i j; rewrite coef_phi mxE coef_poly.",
                        "VernacExtend",
                        "7d4450169cd8610cf3ff90cd2eeb2f84258ab13d"
                    ]
                },
                {
                    "command": [
                        "by case: leqP => // P_le_k; rewrite nth_default ?mxE.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "exists (RMorphism phi_is_rmorphism).",
                        "VernacExtend",
                        "2a79cd503498776c8c8a5de8774669de52c2169e"
                    ]
                },
                {
                    "command": [
                        "split=> // [p | A]; apply/polyP=> k; apply/matrixP=> i j.",
                        "VernacExtend",
                        "c03c49ee818673107bc66d70827b13050eb69520"
                    ]
                },
                {
                    "command": [
                        "by rewrite coef_phi coef_map !mxE coefMn.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "by rewrite coef_phi !mxE !coefC; case k; last rewrite /= mxE.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "Cayley_Hamilton",
            "line_nb": 295,
            "steps": [
                {
                    "command": [
                        "have [phi [_ phiZ phiC _]] := mx_poly_ring_isom R n'.",
                        "VernacExtend",
                        "406cde1174359c53bf162a2a18c4eede395555f9"
                    ]
                },
                {
                    "command": [
                        "apply/rootP/factor_theorem; rewrite -phiZ -mul_adj_mx rmorphM.",
                        "VernacExtend",
                        "56c014161b39aecfb3c54301c2409dba4e8e1857"
                    ]
                },
                {
                    "command": [
                        "by move: (phi _) => q; exists q; rewrite rmorphB phiC phiZ map_polyX.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "mulmx_delta_companion",
            "line_nb": 347,
            "steps": [
                {
                    "command": [
                        "apply/rowP => j; rewrite !mxE (bigD1 i) //= ?(=^~val_eqE, mxE) /= eqxx mul1r.",
                        "VernacExtend",
                        "56c014161b39aecfb3c54301c2409dba4e8e1857"
                    ]
                },
                {
                    "command": [
                        "rewrite ltn_eqF ?big1 ?addr0 1?eq_sym //; last first.",
                        "VernacExtend",
                        "3763a4b8db689af316a7372b722bb29806ab4fb6"
                    ]
                },
                {
                    "command": [
                        "by rewrite -ltnS prednK // (leq_trans _ i_small).",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "by move=> k /negPf ki_eqF; rewrite !mxE eqxx ki_eqF mul0r.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "degree_mxminpoly_proof",
            "line_nb": 358,
            "steps": [
                {
                    "command": [
                        "by exists (n ^ 2)%N; rewrite rank_leq_col.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "mxminpoly_nonconstant",
            "line_nb": 364,
            "steps": [
                {
                    "command": [
                        "rewrite /d; case: ex_minnP; case=> //; rewrite leqn0 mxrank_eq0; move/eqP.",
                        "VernacExtend",
                        "e9dbafa8138c19f6ac6e3fd97af9ab98da37e310"
                    ]
                },
                {
                    "command": [
                        "move/row_matrixP; move/(_ 0); move/eqP; rewrite rowK row0 mxvec_eq0.",
                        "VernacExtend",
                        "4bc1dc9bb0e66c38274e37a00a32341819f5d0f1"
                    ]
                },
                {
                    "command": [
                        "by rewrite -mxrank_eq0 mxrank1.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "minpoly_mx1",
            "line_nb": 369,
            "steps": [
                {
                    "command": [
                        "by apply: (eq_row_sub (Ordinal mxminpoly_nonconstant)); rewrite rowK.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "minpoly_mx_free",
            "line_nb": 372,
            "steps": [
                {
                    "command": [
                        "have:= mxminpoly_nonconstant; rewrite /d; case: ex_minnP; case=> // d' _.",
                        "VernacExtend",
                        "d5380bf3ad1f2a942e505ae2ab93e3ec55f14be9"
                    ]
                },
                {
                    "command": [
                        "move/(_ d'); move/implyP; rewrite ltnn implybF -ltnS ltn_neqAle.",
                        "VernacExtend",
                        "ea0cb90c655c5664c1e4bd5e8281f3783b29707c"
                    ]
                },
                {
                    "command": [
                        "by rewrite rank_leq_row andbT negbK.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "horner_mx_mem",
            "line_nb": 377,
            "steps": [
                {
                    "command": [
                        "elim/poly_ind: p => [|p a IHp]; first by rewrite rmorph0 // linear0 sub0mx.",
                        "VernacExtend",
                        "3763a4b8db689af316a7372b722bb29806ab4fb6"
                    ]
                },
                {
                    "command": [
                        "rewrite rmorphD rmorphM /= horner_mx_C horner_mx_X.",
                        "VernacExtend",
                        "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
                    ]
                },
                {
                    "command": [
                        "rewrite addrC -scalemx1 linearP /= -(mul_vec_lin (mulmxr_linear _ A)).",
                        "VernacExtend",
                        "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
                    ]
                },
                {
                    "command": [
                        "case/submxP: IHp => u ->{p}.",
                        "VernacExtend",
                        "e00fff71ff314c991514fc71c41a3556702e444a"
                    ]
                },
                {
                    "command": [
                        "have: (powers_mx A (1 + d) <= Ad)%MS.",
                        "VernacExtend",
                        "406cde1174359c53bf162a2a18c4eede395555f9"
                    ]
                },
                {
                    "command": [
                        "rewrite -(geq_leqif (mxrank_leqif_sup _)).",
                        "VernacExtend",
                        "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
                    ]
                },
                {
                    "command": [
                        "by rewrite (eqnP minpoly_mx_free) /d; case: ex_minnP.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "rewrite addnC; apply/row_subP=> i.",
                        "VernacExtend",
                        "634a7639ed2fb7caf62757f84400927f5829b7d5"
                    ]
                },
                {
                    "command": [
                        "by apply: eq_row_sub (lshift 1 i) _; rewrite !rowK.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "apply: submx_trans; rewrite addmx_sub ?scalemx_sub //.",
                        "VernacExtend",
                        "56c014161b39aecfb3c54301c2409dba4e8e1857"
                    ]
                },
                {
                    "command": [
                        "by apply: (eq_row_sub 0); rewrite rowK.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "rewrite -mulmxA mulmx_sub {u}//; apply/row_subP=> i.",
                        "VernacExtend",
                        "634a7639ed2fb7caf62757f84400927f5829b7d5"
                    ]
                },
                {
                    "command": [
                        "rewrite row_mul rowK mul_vec_lin /= mulmxE -exprSr.",
                        "VernacExtend",
                        "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
                    ]
                },
                {
                    "command": [
                        "by apply: (eq_row_sub (rshift 1 i)); rewrite rowK.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "mx_inv_horner0",
            "line_nb": 394,
            "steps": [
                {
                    "command": [
                        "by rewrite /mx_inv_horner !(linear0, mul0mx).",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "mx_inv_hornerK",
            "line_nb": 397,
            "steps": [
                {
                    "command": [
                        "by move=> sBAd; rewrite horner_rVpoly mulmxKpV ?mxvecK.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "minpoly_mxM",
            "line_nb": 400,
            "steps": [
                {
                    "command": [
                        "move=> AdB AdC; rewrite -(mx_inv_hornerK AdB) -(mx_inv_hornerK AdC).",
                        "VernacExtend",
                        "057edeb0967475c7ea5e8c98c449ddc5613eddc1"
                    ]
                },
                {
                    "command": [
                        "by rewrite -rmorphM ?horner_mx_mem.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "minpoly_mx_ring",
            "line_nb": 404,
            "steps": [
                {
                    "command": [
                        "apply/andP; split; first by apply/mulsmx_subP; apply: minpoly_mxM.",
                        "VernacExtend",
                        "3763a4b8db689af316a7372b722bb29806ab4fb6"
                    ]
                },
                {
                    "command": [
                        "apply/mxring_idP; exists 1%:M; split=> *; rewrite ?mulmx1 ?mul1mx //.",
                        "VernacExtend",
                        "a18ef52b94902a4405e9607357a3f7e142145a08"
                    ]
                },
                {
                    "command": [
                        "by rewrite -mxrank_eq0 mxrank1.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "exact: minpoly_mx1.",
                        "VernacExtend",
                        "ce637ff86bafca5d8359473e8c02af644dcbdc43"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "size_mxminpoly",
            "line_nb": 412,
            "steps": [
                {
                    "command": [
                        "by rewrite size_addl ?size_polyXn // size_opp ltnS size_poly.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "mxminpoly_monic",
            "line_nb": 415,
            "steps": [
                {
                    "command": [
                        "rewrite monicE /lead_coef size_mxminpoly coefB coefXn eqxx /=.",
                        "VernacExtend",
                        "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
                    ]
                },
                {
                    "command": [
                        "by rewrite nth_default ?size_poly // subr0.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "size_mod_mxminpoly",
            "line_nb": 419,
            "steps": [
                {
                    "command": [
                        "by rewrite -ltnS -size_mxminpoly ltn_modp // -size_poly_eq0 size_mxminpoly.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "mx_root_minpoly",
            "line_nb": 422,
            "steps": [
                {
                    "command": [
                        "rewrite rmorphB -{3}(horner_mx_X A) -rmorphX /=.",
                        "VernacExtend",
                        "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
                    ]
                },
                {
                    "command": [
                        "by rewrite mx_inv_hornerK ?subrr ?horner_mx_mem.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "horner_rVpolyK",
            "line_nb": 426,
            "steps": [
                {
                    "command": [
                        "congr rVpoly; rewrite horner_rVpoly vec_mxK.",
                        "VernacExtend",
                        "90723b7805fdae0b93bd8b98ae215a5658363919"
                    ]
                },
                {
                    "command": [
                        "by apply: (row_free_inj minpoly_mx_free); rewrite mulmxKpV ?submxMl.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "horner_mxK",
            "line_nb": 430,
            "steps": [
                {
                    "command": [
                        "rewrite {1}(Pdiv.IdomainMonic.divp_eq mxminpoly_monic p) rmorphD rmorphM /=.",
                        "VernacExtend",
                        "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
                    ]
                },
                {
                    "command": [
                        "rewrite mx_root_minpoly mulr0 add0r.",
                        "VernacExtend",
                        "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
                    ]
                },
                {
                    "command": [
                        "by rewrite -(poly_rV_K (size_mod_mxminpoly _)) horner_rVpolyK.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "mxminpoly_min",
            "line_nb": 435,
            "steps": [
                {
                    "command": [
                        "by move=> pA0; rewrite /dvdp -horner_mxK pA0 mx_inv_horner0.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "horner_rVpoly_inj",
            "line_nb": 438,
            "steps": [
                {
                    "command": [
                        "apply: can_inj (poly_rV \\o mx_inv_horner) _ => u /=.",
                        "VernacExtend",
                        "4bd6fa79b17bcd2bfb7af091fb325367a20385d6"
                    ]
                },
                {
                    "command": [
                        "by rewrite horner_rVpolyK rVpolyK.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "mxminpoly_dvd_char",
            "line_nb": 453,
            "steps": [
                {
                    "command": [
                        "by apply: mxminpoly_min; apply: Cayley_Hamilton.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "eigenvalue_root_min",
            "line_nb": 456,
            "steps": [
                {
                    "command": [
                        "apply/idP/idP=> Aa; last first.",
                        "VernacExtend",
                        "3763a4b8db689af316a7372b722bb29806ab4fb6"
                    ]
                },
                {
                    "command": [
                        "rewrite eigenvalue_root_char !root_factor_theorem in Aa *.",
                        "VernacExtend",
                        "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
                    ]
                },
                {
                    "command": [
                        "exact: dvdp_trans Aa mxminpoly_dvd_char.",
                        "VernacExtend",
                        "ce637ff86bafca5d8359473e8c02af644dcbdc43"
                    ]
                },
                {
                    "command": [
                        "have{Aa} [v Av_av v_nz] := eigenvalueP Aa.",
                        "VernacExtend",
                        "406cde1174359c53bf162a2a18c4eede395555f9"
                    ]
                },
                {
                    "command": [
                        "apply: contraR v_nz => pa_nz; rewrite -{pa_nz}(eqmx_eq0 (eqmx_scale _ pa_nz)).",
                        "VernacExtend",
                        "56c014161b39aecfb3c54301c2409dba4e8e1857"
                    ]
                },
                {
                    "command": [
                        "apply/eqP; rewrite -(mulmx0 _ v) -mx_root_minpoly.",
                        "VernacExtend",
                        "56c014161b39aecfb3c54301c2409dba4e8e1857"
                    ]
                },
                {
                    "command": [
                        "elim/poly_ind: p_A => [|p c IHp].",
                        "VernacExtend",
                        "e686a1895f1799b840b76242f931100819a9ad6c"
                    ]
                },
                {
                    "command": [
                        "by rewrite rmorph0 horner0 scale0r mulmx0.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "rewrite !hornerE rmorphD rmorphM /= horner_mx_X horner_mx_C scalerDl.",
                        "VernacExtend",
                        "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
                    ]
                },
                {
                    "command": [
                        "by rewrite -scalerA mulmxDr mul_mx_scalar mulmxA -IHp -scalemxAl Av_av.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "map_rVpoly",
            "line_nb": 477,
            "steps": [
                {
                    "command": [
                        "apply/polyP=> k; rewrite coef_map !coef_rVpoly.",
                        "VernacExtend",
                        "56c014161b39aecfb3c54301c2409dba4e8e1857"
                    ]
                },
                {
                    "command": [
                        "by case: (insub k) => [i|]; rewrite /= ?rmorph0 // mxE.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "map_poly_rV",
            "line_nb": 481,
            "steps": [
                {
                    "command": [
                        "by apply/rowP=> j; rewrite !mxE coef_map.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "map_char_poly",
            "line_nb": 488,
            "steps": [
                {
                    "command": [
                        "by rewrite -det_map_mx map_char_poly_mx.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "map_resultant",
            "line_nb": 493,
            "steps": [
                {
                    "command": [
                        "move=> nz_fp nz_fq; rewrite /resultant /Sylvester_mx !size_map_poly_id0 //.",
                        "VernacExtend",
                        "057edeb0967475c7ea5e8c98c449ddc5613eddc1"
                    ]
                },
                {
                    "command": [
                        "rewrite -det_map_mx /= map_col_mx; congr (\\det (col_mx _ _)); by apply: map_lin1_mx => v; rewrite map_poly_rV rmorphM /= map_rVpoly.",
                        "VernacExtend",
                        "2886f56332d1f966bf41f3bed1c61163ea91d1d5"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "map_powers_mx",
            "line_nb": 503,
            "steps": [
                {
                    "command": [
                        "by apply/row_matrixP=> i; rewrite -map_row !rowK map_mxvec rmorphX.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "map_horner_mx",
            "line_nb": 506,
            "steps": [
                {
                    "command": [
                        "rewrite -[p](poly_rV_K (leqnn _)) map_rVpoly.",
                        "VernacExtend",
                        "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
                    ]
                },
                {
                    "command": [
                        "by rewrite !horner_rVpoly map_vec_mx map_mxM map_powers_mx.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "map_mx_companion",
            "line_nb": 516,
            "steps": [
                {
                    "command": [
                        "apply/matrixP => i j; rewrite !(castmxE, mxE) /= (fun_if f).",
                        "VernacExtend",
                        "56c014161b39aecfb3c54301c2409dba4e8e1857"
                    ]
                },
                {
                    "command": [
                        "by rewrite rmorphN coef_map size_map_poly rmorph_nat.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "companion_map_poly",
            "line_nb": 520,
            "steps": [
                {
                    "command": [
                        "by rewrite map_mx_companion castmx_comp castmx_id.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "degree_mxminpoly_map",
            "line_nb": 523,
            "steps": [
                {
                    "command": [
                        "by apply: eq_ex_minn => e; rewrite -map_powers_mx mxrank_map.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "map_mx_inv_horner",
            "line_nb": 534,
            "steps": [
                {
                    "command": [
                        "rewrite map_rVpoly map_mxM map_mxvec map_pinvmx map_powers_mx.",
                        "VernacExtend",
                        "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
                    ]
                },
                {
                    "command": [
                        "by rewrite /mx_inv_horner degree_mxminpoly_map.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "integral_rmorph",
            "line_nb": 543,
            "steps": [
                {
                    "command": [
                        "by case=> p; exists p; rewrite // map_poly_comp rmorph_root.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "integral_id",
            "line_nb": 546,
            "steps": [
                {
                    "command": [
                        "by exists ('X - x%:P); rewrite ?monicXsubC ?rmorph_root ?root_XsubC.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "integral_nat",
            "line_nb": 549,
            "steps": [
                {
                    "command": [
                        "by rewrite -(rmorph_nat RtoK); apply: integral_id.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "integral0",
            "line_nb": 552,
            "steps": [
                {
                    "command": [
                        "exact: (integral_nat 0).",
                        "VernacExtend",
                        "ce637ff86bafca5d8359473e8c02af644dcbdc43"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "integral1",
            "line_nb": 555,
            "steps": [
                {
                    "command": [
                        "exact: (integral_nat 1).",
                        "VernacExtend",
                        "ce637ff86bafca5d8359473e8c02af644dcbdc43"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "integral_poly",
            "line_nb": 558,
            "steps": [
                {
                    "command": [
                        "split=> intRp => [_ /(nthP 0)[i _ <-] // | i]; rewrite -[p]coefK coef_poly.",
                        "VernacExtend",
                        "82d53976234637e3f0907eb36cddf61d028c6306"
                    ]
                },
                {
                    "command": [
                        "by case: ifP => [ltip | _]; [apply/intRp/mem_nth | apply: integral0].",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "integral_root_monic",
            "line_nb": 677,
            "steps": [
                {
                    "command": [
                        "move=> mon_p pu0 intRp; rewrite -[u]hornerX.",
                        "VernacExtend",
                        "057edeb0967475c7ea5e8c98c449ddc5613eddc1"
                    ]
                },
                {
                    "command": [
                        "apply: integral_horner_root mon_p pu0 intRp _.",
                        "VernacExtend",
                        "4bd6fa79b17bcd2bfb7af091fb325367a20385d6"
                    ]
                },
                {
                    "command": [
                        "by apply/integral_poly => i; rewrite coefX; apply: integral_nat.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "XsubC0",
            "line_nb": 683,
            "steps": [
                {
                    "command": [
                        "by rewrite root_XsubC.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "intR_XsubC",
            "line_nb": 686,
            "steps": [
                {
                    "command": [
                        "by move=> intRu v; rewrite polyseqXsubC !inE => /pred2P[]->.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "integral_opp",
            "line_nb": 689,
            "steps": [
                {
                    "command": [
                        "by rewrite -{1}[u]opprK => /intR_XsubC/integral_root_monic; apply.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "integral_horner",
            "line_nb": 692,
            "steps": [
                {
                    "command": [
                        "by move=> ? /integral_opp/intR_XsubC/integral_horner_root; apply.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "integral_sub",
            "line_nb": 695,
            "steps": [
                {
                    "command": [
                        "move=> intRu /integral_opp/intR_XsubC/integral_horner/(_ intRu).",
                        "VernacExtend",
                        "b1b2cb7a3a617cba67460b4eca1f04de3c1cc716"
                    ]
                },
                {
                    "command": [
                        "by rewrite !hornerE.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "integral_add",
            "line_nb": 699,
            "steps": [
                {
                    "command": [
                        "by rewrite -{2}[v]opprK => intRu /integral_opp; apply: integral_sub.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "integral_algebraic",
            "line_nb": 711,
            "steps": [
                {
                    "command": [
                        "split=> [] [p p_nz pu0]; last by exists p; rewrite ?monic_neq0.",
                        "VernacExtend",
                        "3763a4b8db689af316a7372b722bb29806ab4fb6"
                    ]
                },
                {
                    "command": [
                        "exists (mk_mon p); first by rewrite monicE lead_coefZ mulVf ?lead_coef_eq0.",
                        "VernacExtend",
                        "3763a4b8db689af316a7372b722bb29806ab4fb6"
                    ]
                },
                {
                    "command": [
                        "by rewrite linearZ rootE hornerZ (rootP pu0) mulr0.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "algebraic_id",
            "line_nb": 716,
            "steps": [
                {
                    "command": [
                        "exact/integral_algebraic/integral_id.",
                        "VernacExtend",
                        "ce637ff86bafca5d8359473e8c02af644dcbdc43"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "algebraic0",
            "line_nb": 719,
            "steps": [
                {
                    "command": [
                        "exact/integral_algebraic/integral0.",
                        "VernacExtend",
                        "ce637ff86bafca5d8359473e8c02af644dcbdc43"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "algebraic1",
            "line_nb": 722,
            "steps": [
                {
                    "command": [
                        "exact/integral_algebraic/integral1.",
                        "VernacExtend",
                        "ce637ff86bafca5d8359473e8c02af644dcbdc43"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "algebraic_opp",
            "line_nb": 725,
            "steps": [
                {
                    "command": [
                        "by move/integral_algebraic/integral_opp/integral_algebraic.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "algebraic_add",
            "line_nb": 728,
            "steps": [
                {
                    "command": [
                        "move/integral_algebraic=> intFx /integral_algebraic intFy.",
                        "VernacExtend",
                        "b1b2cb7a3a617cba67460b4eca1f04de3c1cc716"
                    ]
                },
                {
                    "command": [
                        "exact/integral_algebraic/integral_add.",
                        "VernacExtend",
                        "ce637ff86bafca5d8359473e8c02af644dcbdc43"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "algebraic_sub",
            "line_nb": 732,
            "steps": [
                {
                    "command": [
                        "by move=> algFx /algebraic_opp; apply: algebraic_add.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "algebraic_mul",
            "line_nb": 735,
            "steps": [
                {
                    "command": [
                        "move/integral_algebraic=> intFx /integral_algebraic intFy.",
                        "VernacExtend",
                        "b1b2cb7a3a617cba67460b4eca1f04de3c1cc716"
                    ]
                },
                {
                    "command": [
                        "exact/integral_algebraic/integral_mul.",
                        "VernacExtend",
                        "ce637ff86bafca5d8359473e8c02af644dcbdc43"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "algebraic_inv",
            "line_nb": 739,
            "steps": [
                {
                    "command": [
                        "have [-> | /expf_neq0 nz_u_n] := eqVneq u 0; first by rewrite invr0.",
                        "VernacExtend",
                        "3763a4b8db689af316a7372b722bb29806ab4fb6"
                    ]
                },
                {
                    "command": [
                        "case=> p nz_p pu0; exists (Poly (rev p)).",
                        "VernacExtend",
                        "f1d2ea843e5d3b0e931ec151701fd984466e4d52"
                    ]
                },
                {
                    "command": [
                        "apply/eqP=> /polyP/(_ 0%N); rewrite coef_Poly coef0 nth_rev ?size_poly_gt0 //.",
                        "VernacExtend",
                        "56c014161b39aecfb3c54301c2409dba4e8e1857"
                    ]
                },
                {
                    "command": [
                        "by apply/eqP; rewrite subn1 lead_coef_eq0.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "apply/eqP/(mulfI (nz_u_n (size p).-1)); rewrite mulr0 -(rootP pu0).",
                        "VernacExtend",
                        "56c014161b39aecfb3c54301c2409dba4e8e1857"
                    ]
                },
                {
                    "command": [
                        "rewrite (@horner_coef_wide _ (size p)); last first.",
                        "VernacExtend",
                        "3763a4b8db689af316a7372b722bb29806ab4fb6"
                    ]
                },
                {
                    "command": [
                        "by rewrite size_map_poly -(size_rev p) size_Poly.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "rewrite horner_coef mulr_sumr size_map_poly.",
                        "VernacExtend",
                        "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
                    ]
                },
                {
                    "command": [
                        "rewrite [rhs in _ = rhs](reindex_inj rev_ord_inj) /=.",
                        "VernacExtend",
                        "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
                    ]
                },
                {
                    "command": [
                        "apply: eq_bigr => i _; rewrite !coef_map coef_Poly nth_rev // mulrCA.",
                        "VernacExtend",
                        "56c014161b39aecfb3c54301c2409dba4e8e1857"
                    ]
                },
                {
                    "command": [
                        "by congr (_ * _); rewrite -{1}(subnKC (valP i)) addSn addnC exprD exprVn ?mulfK.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "algebraic_div",
            "line_nb": 752,
            "steps": [
                {
                    "command": [
                        "by move=> algFx /algebraic_inv; apply: algebraic_mul.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "integral_inv",
            "line_nb": 755,
            "steps": [
                {
                    "command": [
                        "by move/integral_algebraic/algebraic_inv/integral_algebraic.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "integral_div",
            "line_nb": 758,
            "steps": [
                {
                    "command": [
                        "by move=> algFx /integral_inv; apply: integral_mul.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "integral_root",
            "line_nb": 761,
            "steps": [
                {
                    "command": [
                        "move=> nz_p pu0 algFp.",
                        "VernacExtend",
                        "b1b2cb7a3a617cba67460b4eca1f04de3c1cc716"
                    ]
                },
                {
                    "command": [
                        "have mon_p1: mk_mon p \\is monic.",
                        "VernacExtend",
                        "406cde1174359c53bf162a2a18c4eede395555f9"
                    ]
                },
                {
                    "command": [
                        "by rewrite monicE lead_coefZ mulVf ?lead_coef_eq0.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "have p1u0: root (mk_mon p) u by rewrite rootE hornerZ (rootP pu0) mulr0.",
                        "VernacExtend",
                        "406cde1174359c53bf162a2a18c4eede395555f9"
                    ]
                },
                {
                    "command": [
                        "apply: integral_root_monic mon_p1 p1u0 _ => _ /(nthP 0)[i ltip <-].",
                        "VernacExtend",
                        "4bd6fa79b17bcd2bfb7af091fb325367a20385d6"
                    ]
                },
                {
                    "command": [
                        "rewrite coefZ mulrC; rewrite size_scale ?invr_eq0 ?lead_coef_eq0 // in ltip.",
                        "VernacExtend",
                        "2194fcb4d6d52cbae24a29f7ff14a3997f1912fd"
                    ]
                },
                {
                    "command": [
                        "by apply: integral_div; apply/algFp/mem_nth; rewrite -?polySpred.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "eval_mx_term",
            "line_nb": 787,
            "steps": [
                {
                    "command": [
                        "by apply/matrixP=> i j; rewrite !mxE.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "eval_mulmx",
            "line_nb": 791,
            "steps": [
                {
                    "command": [
                        "apply/matrixP=> i k; rewrite !mxE /= ((big_morph (eval e)) 0 +%R) //=.",
                        "VernacExtend",
                        "56c014161b39aecfb3c54301c2409dba4e8e1857"
                    ]
                },
                {
                    "command": [
                        "by apply: eq_bigr => j _; rewrite /= !mxE.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "mxrank_form_qf",
            "line_nb": 798,
            "steps": [
                {
                    "command": [
                        "by elim: m r n A => [|m IHm] r [|n] A //=; rewrite GRing.Pick_form_qf /=.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "eval_mxrank",
            "line_nb": 801,
            "steps": [
                {
                    "command": [
                        "elim: m r n A => [|m IHm] r [|n] A /=; try by case r.",
                        "VernacExtend",
                        "4f3ff96ca2d1111d66bee768f7796420a56e669b"
                    ]
                },
                {
                    "command": [
                        "rewrite GRing.eval_Pick /mxrank unlock /=; set pf := fun _ => _.",
                        "VernacExtend",
                        "c1f58f36c5711f022b4a54717f37c2782f34a159"
                    ]
                },
                {
                    "command": [
                        "rewrite -(@eq_pick _ pf) => [|k]; rewrite {}/pf ?mxE // eq_sym.",
                        "VernacExtend",
                        "82d53976234637e3f0907eb36cddf61d028c6306"
                    ]
                },
                {
                    "command": [
                        "case: pick => [[i j]|] //=; set B := _ - _; have:= mxrankE B.",
                        "VernacExtend",
                        "acc0604db0f20b0bdae6a0171f6334cd21a1f00a"
                    ]
                },
                {
                    "command": [
                        "case: (Gaussian_elimination B) r => [[_ _] _] [|r] //= <-; rewrite {}IHm eqSS.",
                        "VernacExtend",
                        "90a2acb29b7a5304b0ab6ba5269c420638ddef63"
                    ]
                },
                {
                    "command": [
                        "by congr (\\rank _ == r); apply/matrixP=> k l; rewrite !(mxE, big_ord1) !tpermR.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "eval_vec_mx",
            "line_nb": 809,
            "steps": [
                {
                    "command": [
                        "by apply/matrixP=> i j; rewrite !mxE.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "eval_mxvec",
            "line_nb": 812,
            "steps": [
                {
                    "command": [
                        "by rewrite -{2}[A]mxvecK eval_vec_mx vec_mxK.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "eval_col_mx",
            "line_nb": 818,
            "steps": [
                {
                    "command": [
                        "by apply/matrixP=> i j; do 2![rewrite !mxE //; case: split => ?].",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "submx_form_qf",
            "line_nb": 821,
            "steps": [
                {
                    "command": [
                        "by rewrite (morphAnd (@qf_form _)) ?big1 //= => r _; rewrite !mxrank_form_qf.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "eval_submx",
            "line_nb": 824,
            "steps": [
                {
                    "command": [
                        "rewrite (morphAnd (qf_eval e)) //= big_andE /=.",
                        "VernacExtend",
                        "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
                    ]
                },
                {
                    "command": [
                        "apply/forallP/idP=> /= [|sAB d]; last first.",
                        "VernacExtend",
                        "3763a4b8db689af316a7372b722bb29806ab4fb6"
                    ]
                },
                {
                    "command": [
                        "rewrite !eval_mxrank eval_col_mx -addsmxE; apply/implyP=> /eqP <-.",
                        "VernacExtend",
                        "634a7639ed2fb7caf62757f84400927f5829b7d5"
                    ]
                },
                {
                    "command": [
                        "by rewrite mxrank_leqif_sup ?addsmxSr // addsmx_sub sAB /=.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "move/(_ (inord (\\rank (eval_mx e (col_mx A B))))).",
                        "VernacExtend",
                        "b1b2cb7a3a617cba67460b4eca1f04de3c1cc716"
                    ]
                },
                {
                    "command": [
                        "rewrite inordK ?ltnS ?rank_leq_col // !eval_mxrank eqxx /= eval_col_mx.",
                        "VernacExtend",
                        "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
                    ]
                },
                {
                    "command": [
                        "by rewrite -addsmxE mxrank_leqif_sup ?addsmxSr // addsmx_sub; case/andP.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "size_seq_of_rV",
            "line_nb": 837,
            "steps": [
                {
                    "command": [
                        "by rewrite tuple.size_tuple card_ord.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "nth_seq_of_rV",
            "line_nb": 840,
            "steps": [
                {
                    "command": [
                        "by rewrite nth_fgraph_ord ffunE.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "nth_row_env",
            "line_nb": 845,
            "steps": [
                {
                    "command": [
                        "elim: e k => [|v e IHe] k; first by rewrite !nth_nil mxE.",
                        "VernacExtend",
                        "3763a4b8db689af316a7372b722bb29806ab4fb6"
                    ]
                },
                {
                    "command": [
                        "rewrite /row_env /= nth_cat size_seq_of_rV.",
                        "VernacExtend",
                        "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
                    ]
                },
                {
                    "command": [
                        "case: k => [|k]; first by rewrite (valP i) nth_seq_of_rV.",
                        "VernacExtend",
                        "3763a4b8db689af316a7372b722bb29806ab4fb6"
                    ]
                },
                {
                    "command": [
                        "by rewrite mulSn -addnA -if_neg -leqNgt leq_addr addKn IHe.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "eval_row_var",
            "line_nb": 851,
            "steps": [
                {
                    "command": [
                        "by apply/rowP=> i; rewrite !mxE /= nth_row_env.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "Exists_rowP",
            "line_nb": 855,
            "steps": [
                {
                    "command": [
                        "move=> d_gt0; pose i_ j := Ordinal (ltn_pmod j d_gt0).",
                        "VernacExtend",
                        "fef3c4a8f7fcf70b0824f3cce5fb58f2e0ef07fd"
                    ]
                },
                {
                    "command": [
                        "have d_eq j: (j = j %/ d * d + i_ j)%N := divn_eq j d.",
                        "VernacExtend",
                        "406cde1174359c53bf162a2a18c4eede395555f9"
                    ]
                },
                {
                    "command": [
                        "split=> [[v f_v] | ]; last case/GRing.foldExistsP=> e' ee' f_e'.",
                        "VernacExtend",
                        "3763a4b8db689af316a7372b722bb29806ab4fb6"
                    ]
                },
                {
                    "command": [
                        "apply/GRing.foldExistsP; exists (row_env (set_nth 0 e k v)) => {f f_v}// j.",
                        "VernacExtend",
                        "5fce7e5361004176d6b434b36b4623c7387f70bb"
                    ]
                },
                {
                    "command": [
                        "rewrite [j]d_eq !nth_row_env nth_set_nth /=; case: eqP => // ->.",
                        "VernacExtend",
                        "712d339e99ee17eb7d5033e19ac614eb3ca6b532"
                    ]
                },
                {
                    "command": [
                        "by case/imageP; exists (i_ j).",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "exists (\\row_i e'`_(k * d + i)); apply: eq_holds f_e' => j /=.",
                        "VernacExtend",
                        "b49ba2d25b404ae78a92de139110be0d7cf30433"
                    ]
                },
                {
                    "command": [
                        "move/(_ j): ee'; rewrite [j]d_eq !nth_row_env nth_set_nth /=.",
                        "VernacExtend",
                        "057edeb0967475c7ea5e8c98c449ddc5613eddc1"
                    ]
                },
                {
                    "command": [
                        "case: eqP => [-> | ne_j_k -> //]; first by rewrite mxE.",
                        "VernacExtend",
                        "3763a4b8db689af316a7372b722bb29806ab4fb6"
                    ]
                },
                {
                    "command": [
                        "apply/mapP=> [[r lt_r_d]]; rewrite -d_eq => def_j; case: ne_j_k.",
                        "VernacExtend",
                        "eb0a7935a6af453dd4e1da41ce0302efcc507f4e"
                    ]
                },
                {
                    "command": [
                        "by rewrite def_j divnMDl // divn_small ?addn0.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        }
    ]
}