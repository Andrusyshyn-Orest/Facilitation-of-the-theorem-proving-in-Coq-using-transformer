{
    "filename": "mathcomp/algebra/mxalgebra.v",
    "coq_project": "math-comp",
    "vernac_cmds": [
        [
            "Require Import mathcomp.ssreflect.ssreflect.",
            "VernacRequire",
            "85e251063dc2b5a9653f7bb76dcd176ed36b42a9"
        ],
        [
            "From mathcomp Require Import ssrbool ssrfun eqtype ssrnat seq div choice fintype.",
            "VernacRequire",
            "e665c6902e70ac801e5b749428ba09cedb8a2b75"
        ],
        [
            "From mathcomp Require Import finfun bigop prime binomial ssralg finset fingroup finalg.",
            "VernacRequire",
            "8235a382c70902fcb0205a0c4f79a0cccaafb41a"
        ],
        [
            "From mathcomp Require Import perm zmodp matrix.",
            "VernacRequire",
            "d93f7c45f5e629e62ee3a115f1bdd87b1da52ad7"
        ],
        [
            "Set Implicit Arguments.",
            "VernacSetOption",
            "9e84ff8896f028601d8aded48c1d4aebe60aa584"
        ],
        [
            "Unset Strict Implicit.",
            "VernacUnsetOption",
            "2842adaf6959318f2042805935c46f513bdc0348"
        ],
        [
            "Unset Printing Implicit Defensive.",
            "VernacUnsetOption",
            "444e5f0be4b25d9b1fd556943a447ec10046d151"
        ],
        [
            "Import GroupScope.",
            "VernacImport",
            "89fd18b7dcbcc46edcd02262df11c799856485fc"
        ],
        [
            "Import GRing.Theory.",
            "VernacImport",
            "a0fcf55540300b9b0e54bd28a113c5228ff530f4"
        ],
        [
            "Local Open Scope ring_scope.",
            "VernacOpenCloseScope",
            "fb9da4a291533574d328be8c8a69d90a14641928"
        ],
        [
            "Reserved Notation \"\\rank A\" (at level 10, A at level 8, format \"\\rank A\").",
            "VernacSyntaxExtension",
            "a913c34a7085a53f06b0c5ee95939da9faeec956"
        ],
        [
            "Reserved Notation \"A ^C\" (at level 8, format \"A ^C\").",
            "VernacSyntaxExtension",
            "87963ec5844c43c6c046d1bfab8a106f94070d2a"
        ],
        [
            "Notation \"''A_' ( m , n )\" := 'M_(m, n ^ 2) (at level 8, format \"''A_' ( m , n )\") : type_scope.",
            "VernacNotation",
            "3618ebf55a468c444e46c687f5663c3601ce417e"
        ],
        [
            "Notation \"''A_' ( n )\" := 'A_(n ^ 2, n) (at level 8, only parsing) : type_scope.",
            "VernacNotation",
            "6396731095cbecc2f5d107a99d524c85d58c3308"
        ],
        [
            "Notation \"''A_' n\" := 'A_(n) (at level 8, n at next level, format \"''A_' n\") : type_scope.",
            "VernacNotation",
            "940f090b5eee6a7a06c684cb969413b55cd176ee"
        ],
        [
            "Notation \"''A' [ F ]_ ( m , n )\" := 'M[F]_(m, n ^ 2) (at level 8, only parsing) : type_scope.",
            "VernacNotation",
            "dc39d02c0ae613ec7f0f52950940e8b6144ea869"
        ],
        [
            "Notation \"''A' [ F ]_ ( n )\" := 'A[F]_(n ^ 2, n) (at level 8, only parsing) : type_scope.",
            "VernacNotation",
            "09246add2d5868a9db44831925b5bdb59e4d84be"
        ],
        [
            "Notation \"''A' [ F ]_ n\" := 'A[F]_(n) (at level 8, n at level 2, only parsing) : type_scope.",
            "VernacNotation",
            "4f7aee1e1c75a4a93b0cae3415ef047b8a6ea5d5"
        ],
        [
            "Delimit Scope matrix_set_scope with MS.",
            "VernacDelimiters",
            "a76615f1c615d7c9100443439b6a86c2a8996d99"
        ],
        [
            "Local Notation simp := (Monoid.Theory.simpm, oppr0).",
            "VernacSyntacticDefinition",
            "c294ac53ec92e510e9b97547f5de1920e6894ec9"
        ],
        [
            "Section RowSpaceTheory.",
            "VernacBeginSection",
            "e2450a07287ac7f7a872741e29ff94a7aa483e89"
        ],
        [
            "Variable F : fieldType.",
            "VernacAssumption",
            "dfbeb3104cff90ac5c843c17124389867a4c6a4a"
        ],
        [
            "Implicit Types m n p r : nat.",
            "VernacReserve",
            "cddf0e5290033a75fbdccdb4f01be2159eaf30cd"
        ],
        [
            "Local Notation \"''M_' ( m , n )\" := 'M[F]_(m, n) : type_scope.",
            "VernacNotation",
            "79ce99135e63ea1d1622f499a12f81c9e4ea09c8"
        ],
        [
            "Local Notation \"''M_' n\" := 'M[F]_(n, n) : type_scope.",
            "VernacNotation",
            "63b914dd1748c6861f41072c5237a39c3c30ceda"
        ],
        [
            "Fixpoint Gaussian_elimination {m n} : 'M_(m, n) -> 'M_m * 'M_n * nat := match m, n with | _.+1, _.+1 => fun A : 'M_(1 + _, 1 + _) => if [pick ij | A ij.1 ij.2 != 0] is Some (i, j) then let a := A i j in let A1 := xrow i 0 (xcol j 0 A) in let u := ursubmx A1 in let v := a^-1 *: dlsubmx A1 in let: (L, U, r) := Gaussian_elimination (drsubmx A1 - v *m u) in (xrow i 0 (block_mx 1 0 v L), xcol j 0 (block_mx a%:M u 0 U), r.+1) else (1%:M, 1%:M, 0%N) | _, _ => fun _ => (1%:M, 1%:M, 0%N) end.",
            "VernacFixpoint",
            "cbe0622503a72b0c44650ea3fba1d7970d4ee1eb"
        ],
        [
            "Section Defs.",
            "VernacBeginSection",
            "0538f5188d53d77ea5d8ba0fff0a7cfc5485e666"
        ],
        [
            "Variables (m n : nat) (A : 'M_(m, n)).",
            "VernacAssumption",
            "fb2393bb9ef7dae8beee9bd07c75bad40bf8ffd1"
        ],
        [
            "Fact Gaussian_elimination_key : unit.",
            "VernacStartTheoremProof",
            "f197a80e742a5d112e7a6da63d4088db94df6cdb"
        ],
        [
            "by [].",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Let LUr := locked_with Gaussian_elimination_key (@Gaussian_elimination) m n A.",
            "VernacDefinition",
            "f1a134bf752b8f921ccd000365879e3ed9942258"
        ],
        [
            "Definition col_ebase := LUr.1.1.",
            "VernacDefinition",
            "d4532a3b91a9a5beddb8a8ac4bbc9fedd49d9ab0"
        ],
        [
            "Definition row_ebase := LUr.1.2.",
            "VernacDefinition",
            "10446aa178b00c91ded5e88d5d92c12790bc61a4"
        ],
        [
            "Definition mxrank := if [|| m == 0 | n == 0]%N then 0%N else LUr.2.",
            "VernacDefinition",
            "8b0a4434788c53670cb999cbf2c821ba250e7b99"
        ],
        [
            "Definition row_free := mxrank == m.",
            "VernacDefinition",
            "0072290004ebb074760125ebf951b0d668d99ef6"
        ],
        [
            "Definition row_full := mxrank == n.",
            "VernacDefinition",
            "d8234aadfc2d5c9b30b07bfadb45f4d7ec78d734"
        ],
        [
            "Definition row_base : 'M_(mxrank, n) := pid_mx mxrank *m row_ebase.",
            "VernacDefinition",
            "0ad6afbfd0d607f1fcac30154d12d430a510d315"
        ],
        [
            "Definition col_base : 'M_(m, mxrank) := col_ebase *m pid_mx mxrank.",
            "VernacDefinition",
            "a1f567c739762e7076f8bc4f72f946de93ba5dcd"
        ],
        [
            "Definition complmx : 'M_n := copid_mx mxrank *m row_ebase.",
            "VernacDefinition",
            "c219ce4e0c6c9e6ffc431cbf27c2f5f34238336d"
        ],
        [
            "Definition kermx : 'M_m := copid_mx mxrank *m invmx col_ebase.",
            "VernacDefinition",
            "08de85d6f20d7c7918f070f85c0aaac6bfeeedd2"
        ],
        [
            "Definition cokermx : 'M_n := invmx row_ebase *m copid_mx mxrank.",
            "VernacDefinition",
            "8634f9a076fe1da7f259a6a1f81bb36da8e82197"
        ],
        [
            "Definition pinvmx : 'M_(n, m) := invmx row_ebase *m pid_mx mxrank *m invmx col_ebase.",
            "VernacDefinition",
            "af64c10f9dae4766c5515fab7d803f73f3f6a95e"
        ],
        [
            "End Defs.",
            "VernacEndSegment",
            "e5c42fff3384ffa717a0ec819d3b7eaff5043179"
        ],
        [
            "Arguments mxrank {m%N n%N} A%MS.",
            "VernacArguments",
            "b44ee8cf4d1951b22b702ef8ddc0d94f2cc563ed"
        ],
        [
            "Local Notation \"\\rank A\" := (mxrank A) : nat_scope.",
            "VernacNotation",
            "a6e56d616a0a6423370d1d4e327b450696d5885c"
        ],
        [
            "Arguments complmx {m%N n%N} A%MS.",
            "VernacArguments",
            "549675bfc52d16d685f14aef704a579a286f19d7"
        ],
        [
            "Local Notation \"A ^C\" := (complmx A) : matrix_set_scope.",
            "VernacNotation",
            "d9dd6dcadbb9f783c27fc94334c64224361fa059"
        ],
        [
            "Definition submx_def := idfun (fun m1 m2 n (A : 'M_(m1, n)) (B : 'M_(m2, n)) => A *m cokermx B == 0).",
            "VernacDefinition",
            "8abf5e0c0b17470226d4998e1360cf28f35942f3"
        ],
        [
            "Fact submx_key : unit.",
            "VernacStartTheoremProof",
            "e6b59f20520bc4beb1785deeaac281646c8baf42"
        ],
        [
            "by [].",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Definition submx := locked_with submx_key submx_def.",
            "VernacDefinition",
            "2e7e5182504913767609fcb0d44f0a9528acfa2c"
        ],
        [
            "Canonical submx_unlockable := [unlockable fun submx].",
            "VernacDefinition",
            "698d03e59a7417ed9f0bf7a32f05ef7245c98a2e"
        ],
        [
            "Arguments submx {m1%N m2%N n%N} A%MS B%MS : rename.",
            "VernacArguments",
            "c1cd93c9cccd7be8b46e624afb794136e9e4cd6d"
        ],
        [
            "Local Notation \"A <= B\" := (submx A B) : matrix_set_scope.",
            "VernacNotation",
            "2b33e637ecc31da90494fb1ec32c95c9577a95d1"
        ],
        [
            "Local Notation \"A <= B <= C\" := ((A <= B) && (B <= C))%MS : matrix_set_scope.",
            "VernacNotation",
            "cee3bd4c0884821486314af1d95bf7d64bdd3cbc"
        ],
        [
            "Local Notation \"A == B\" := (A <= B <= A)%MS : matrix_set_scope.",
            "VernacNotation",
            "1956de038e508d0ed7b6666d2b6d4531ef21888c"
        ],
        [
            "Definition ltmx m1 m2 n (A : 'M_(m1, n)) (B : 'M_(m2, n)) := (A <= B)%MS && ~~ (B <= A)%MS.",
            "VernacDefinition",
            "49eeb77853c346456f4f39cad3867679d33b671e"
        ],
        [
            "Arguments ltmx {m1%N m2%N n%N} A%MS B%MS.",
            "VernacArguments",
            "0977e50c05fd50985e2c58b5b48391951757b755"
        ],
        [
            "Local Notation \"A < B\" := (ltmx A B) : matrix_set_scope.",
            "VernacNotation",
            "b0edf480e61975fcfbe9a1ceb9e20b2bb64de354"
        ],
        [
            "Definition eqmx m1 m2 n (A : 'M_(m1, n)) (B : 'M_(m2, n)) := prod (\\rank A = \\rank B) (forall m3 (C : 'M_(m3, n)), ((A <= C) = (B <= C)) * ((C <= A) = (C <= B)))%MS.",
            "VernacDefinition",
            "b10604900aa3762769e16c19f3ff4dceb22817cd"
        ],
        [
            "Arguments eqmx {m1%N m2%N n%N} A%MS B%MS.",
            "VernacArguments",
            "9b3e944314626be09786da464d40f5a6105daec1"
        ],
        [
            "Local Notation \"A :=: B\" := (eqmx A B) : matrix_set_scope.",
            "VernacNotation",
            "b48d86d3aaa9c670891f969d8c39fb790f19a059"
        ],
        [
            "Section LtmxIdentities.",
            "VernacBeginSection",
            "f29a4dc7a448e7ba9de07e622185216cfed3df15"
        ],
        [
            "Variables (m1 m2 n : nat) (A : 'M_(m1, n)) (B : 'M_(m2, n)).",
            "VernacAssumption",
            "206f8e3f6b22763a1e22cd9471677d9e5f2b26b7"
        ],
        [
            "Lemma ltmxE : (A < B)%MS = ((A <= B)%MS && ~~ (B <= A)%MS).",
            "VernacStartTheoremProof",
            "d65daf779730a324605ea4fd2a08cd66ae1efc00"
        ],
        [
            "by [].",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma ltmxW : (A < B)%MS -> (A <= B)%MS.",
            "VernacStartTheoremProof",
            "1fc0351d6e838e13b8b027c4497a1438f73ce3aa"
        ],
        [
            "by case/andP.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma ltmxEneq : (A < B)%MS = (A <= B)%MS && ~~ (A == B)%MS.",
            "VernacStartTheoremProof",
            "07466cee182fd0afeaaf8c80971a7be8efd7f285"
        ],
        [
            "by apply: andb_id2l => ->.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma submxElt : (A <= B)%MS = (A == B)%MS || (A < B)%MS.",
            "VernacStartTheoremProof",
            "d8596ef41583a07b730c3851126ec4d83a05940c"
        ],
        [
            "by rewrite -andb_orr orbN andbT.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "End LtmxIdentities.",
            "VernacEndSegment",
            "82e3d875ec40049d3f6a1ea9895d85e7e2f5eaf6"
        ],
        [
            "Let qidmx m n (A : 'M_(m, n)) := if m == n then A == pid_mx n else row_full A.",
            "VernacDefinition",
            "a267b1b8d2560169ab535498a98181640ccdb18c"
        ],
        [
            "Let equivmx m n (A : 'M_(m, n)) idA (B : 'M_n) := (B == A)%MS && (qidmx B == idA).",
            "VernacDefinition",
            "d18b90f48971160131476143efe5171f6c89e7cf"
        ],
        [
            "Let equivmx_spec m n (A : 'M_(m, n)) idA (B : 'M_n) := prod (B :=: A)%MS (qidmx B = idA).",
            "VernacDefinition",
            "ff2e3389ee79ea35f92dc4f7b4c2838d6a7296dc"
        ],
        [
            "Definition genmx_witness m n (A : 'M_(m, n)) : 'M_n := if row_full A then 1%:M else pid_mx (\\rank A) *m row_ebase A.",
            "VernacDefinition",
            "87b361c0a2ec30deddfb3ada549fad33c34501db"
        ],
        [
            "Definition genmx_def := idfun (fun m n (A : 'M_(m, n)) => choose (equivmx A (row_full A)) (genmx_witness A) : 'M_n).",
            "VernacDefinition",
            "abe89e85ec95755d753c6be789f03e228c9b06d2"
        ],
        [
            "Fact genmx_key : unit.",
            "VernacStartTheoremProof",
            "2c188da12012c943aeba34fdffd6f8fa1cf75c83"
        ],
        [
            "by [].",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Definition genmx := locked_with genmx_key genmx_def.",
            "VernacDefinition",
            "2068945763f57831efb51fff125df95930e9688b"
        ],
        [
            "Canonical genmx_unlockable := [unlockable fun genmx].",
            "VernacDefinition",
            "55afdf4022521108171fbb2bce956f8ba0a68e2d"
        ],
        [
            "Local Notation \"<< A >>\" := (genmx A) : matrix_set_scope.",
            "VernacNotation",
            "6f50ba0a114059e521a74f492069f9d7aad58cec"
        ],
        [
            "Let addsmx_nop m n (A : 'M_(m, n)) := conform_mx <<A>>%MS A.",
            "VernacDefinition",
            "dde079e806d0902065572fe6f973995c13ea0da6"
        ],
        [
            "Definition addsmx_def := idfun (fun m1 m2 n (A : 'M_(m1, n)) (B : 'M_(m2, n)) => if A == 0 then addsmx_nop B else if B == 0 then addsmx_nop A else <<col_mx A B>>%MS : 'M_n).",
            "VernacDefinition",
            "4bce73e959d7b4217202b59342dae33f92250153"
        ],
        [
            "Fact addsmx_key : unit.",
            "VernacStartTheoremProof",
            "9d3ddaeba77f122f263ac6e67b477d817b3d7af2"
        ],
        [
            "by [].",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Definition addsmx := locked_with addsmx_key addsmx_def.",
            "VernacDefinition",
            "05076594d28807476a52ba9ca86e450ebe90409e"
        ],
        [
            "Canonical addsmx_unlockable := [unlockable fun addsmx].",
            "VernacDefinition",
            "1d49388ecae33437393482b0b4c0e9b7a6234d77"
        ],
        [
            "Arguments addsmx {m1%N m2%N n%N} A%MS B%MS : rename.",
            "VernacArguments",
            "624cfc7616f4298e6d74db8a2ab892e088640bc1"
        ],
        [
            "Local Notation \"A + B\" := (addsmx A B) : matrix_set_scope.",
            "VernacNotation",
            "e71f28cc224ccdc997c43b45def0340ed6c953ba"
        ],
        [
            "Local Notation \"\\sum_ ( i | P ) B\" := (\\big[addsmx/0]_(i | P) B%MS) : matrix_set_scope.",
            "VernacNotation",
            "54a7228579a00e392baeed64d87bde2e03be2b16"
        ],
        [
            "Local Notation \"\\sum_ ( i <- r | P ) B\" := (\\big[addsmx/0]_(i <- r | P) B%MS) : matrix_set_scope.",
            "VernacNotation",
            "68a95e5ae21795f20367ecc8702cda9929a9fe68"
        ],
        [
            "Let capmx_witness m n (A : 'M_(m, n)) := if row_full A then conform_mx 1%:M A else <<A>>%MS.",
            "VernacDefinition",
            "7de108d319f823974c424b028c3da9235d498fe9"
        ],
        [
            "Let capmx_norm m n (A : 'M_(m, n)) := choose (equivmx A (qidmx A)) (capmx_witness A).",
            "VernacDefinition",
            "787c54372c4c98b497e4c6c26fe1375a1a7ac73a"
        ],
        [
            "Let capmx_nop m n (A : 'M_(m, n)) := conform_mx (capmx_norm A) A.",
            "VernacDefinition",
            "caad14bfcdf7f86754a383c3f16d8ad299428f68"
        ],
        [
            "Definition capmx_gen m1 m2 n (A : 'M_(m1, n)) (B : 'M_(m2, n)) := lsubmx (kermx (col_mx A B)) *m A.",
            "VernacDefinition",
            "701e5e4cdc808ddf6f8a527e3592b7a91580feed"
        ],
        [
            "Definition capmx_def := idfun (fun m1 m2 n (A : 'M_(m1, n)) (B : 'M_(m2, n)) => if qidmx A then capmx_nop B else if qidmx B then capmx_nop A else if row_full B then capmx_norm A else capmx_norm (capmx_gen A B) : 'M_n).",
            "VernacDefinition",
            "b7fc921329fbbee91577a2ce19f1b3cfb9f0fe9c"
        ],
        [
            "Fact capmx_key : unit.",
            "VernacStartTheoremProof",
            "129f957fcf249fd48553711c739260ae0e9b74c8"
        ],
        [
            "by [].",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Definition capmx := locked_with capmx_key capmx_def.",
            "VernacDefinition",
            "0e28c94e0f94816b5ec2678af8c79ee0534ccd4f"
        ],
        [
            "Canonical capmx_unlockable := [unlockable fun capmx].",
            "VernacDefinition",
            "4585197411b8e0c84535dc7b2e4aea163d347b75"
        ],
        [
            "Arguments capmx {m1%N m2%N n%N} A%MS B%MS : rename.",
            "VernacArguments",
            "f0bc7a13e4c0b51edb6bf8721bbc6f4b0fe66688"
        ],
        [
            "Local Notation \"A :&: B\" := (capmx A B) : matrix_set_scope.",
            "VernacNotation",
            "203c4ea91ba14ac07dc4543bf42a1be7d6f7c09b"
        ],
        [
            "Local Notation \"\\bigcap_ ( i | P ) B\" := (\\big[capmx/1%:M]_(i | P) B) : matrix_set_scope.",
            "VernacNotation",
            "ab4701e9c620c4855800d976e018ba0cda5a1d5c"
        ],
        [
            "Definition diffmx_def := idfun (fun m1 m2 n (A : 'M_(m1, n)) (B : 'M_(m2, n)) => <<capmx_gen A (capmx_gen A B)^C>>%MS : 'M_n).",
            "VernacDefinition",
            "f714a64d52d25b934a47b62138d21095777e3c98"
        ],
        [
            "Fact diffmx_key : unit.",
            "VernacStartTheoremProof",
            "a2e5ff448af35419bead8d78e4a4e8cccc6b9fb2"
        ],
        [
            "by [].",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Definition diffmx := locked_with diffmx_key diffmx_def.",
            "VernacDefinition",
            "df15b025a73caf04abc3266d201c626f673467bb"
        ],
        [
            "Canonical diffmx_unlockable := [unlockable fun diffmx].",
            "VernacDefinition",
            "7b6ea13abaf5568ce18b0c98ed09ea61a1f00578"
        ],
        [
            "Arguments diffmx {m1%N m2%N n%N} A%MS B%MS : rename.",
            "VernacArguments",
            "5de0e03bc23b504b63094ba71562c6d73a723a7c"
        ],
        [
            "Local Notation \"A :\\: B\" := (diffmx A B) : matrix_set_scope.",
            "VernacNotation",
            "327df119f3b9075ae7602b37d1cecb87e8b69ef7"
        ],
        [
            "Definition proj_mx n (U V : 'M_n) : 'M_n := pinvmx (col_mx U V) *m col_mx U 0.",
            "VernacDefinition",
            "7fef341d10bb24f967c471a061ad6a093b1e32fa"
        ],
        [
            "Local Notation GaussE := Gaussian_elimination.",
            "VernacSyntacticDefinition",
            "7b0dc967ab9a8b73eaf6735ba89d02d01c4cb6f3"
        ],
        [
            "Fact mxrankE m n (A : 'M_(m, n)) : \\rank A = (GaussE A).2.",
            "VernacStartTheoremProof",
            "8c7dc9fa227ec43513ed75d8ebec55a4e910615f"
        ],
        [
            "by rewrite /mxrank unlock /=; case: m n A => [|m] [|n].",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma rank_leq_row m n (A : 'M_(m, n)) : \\rank A <= m.",
            "VernacStartTheoremProof",
            "87af7ff2f8b4bf852031b9cbc06f2850ed301f6e"
        ],
        [
            "rewrite mxrankE.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "elim: m n A => [|m IHm] [|n] //= A; case: pickP => [[i j] _|] //=.",
            "VernacExtend",
            "df63f96bedbb0673aecb42521d90011325a86c94"
        ],
        [
            "by move: (_ - _) => B; case: GaussE (IHm _ B) => [[L U] r] /=.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma row_leq_rank m n (A : 'M_(m, n)) : (m <= \\rank A) = row_free A.",
            "VernacStartTheoremProof",
            "2117e60efb450d103e0057f0b22691648c89c993"
        ],
        [
            "by rewrite /row_free eqn_leq rank_leq_row.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma rank_leq_col m n (A : 'M_(m, n)) : \\rank A <= n.",
            "VernacStartTheoremProof",
            "667b6fc2862599d12fc7541f584ff82fcfd6a178"
        ],
        [
            "rewrite mxrankE.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "elim: m n A => [|m IHm] [|n] //= A; case: pickP => [[i j] _|] //=.",
            "VernacExtend",
            "df63f96bedbb0673aecb42521d90011325a86c94"
        ],
        [
            "by move: (_ - _) => B; case: GaussE (IHm _ B) => [[L U] r] /=.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma col_leq_rank m n (A : 'M_(m, n)) : (n <= \\rank A) = row_full A.",
            "VernacStartTheoremProof",
            "fa2206ce7ef7bc197bbb8b95d1452b3f890edccd"
        ],
        [
            "by rewrite /row_full eqn_leq rank_leq_col.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Let unitmx1F := @unitmx1 F.",
            "VernacDefinition",
            "5faf1b553c0d8a44ef49253550901968a01b781d"
        ],
        [
            "Lemma row_ebase_unit m n (A : 'M_(m, n)) : row_ebase A \\in unitmx.",
            "VernacStartTheoremProof",
            "00115dfe459c148a0ad24f64b31d8b7f7e65caf0"
        ],
        [
            "rewrite /row_ebase unlock; elim: m n A => [|m IHm] [|n] //= A.",
            "VernacExtend",
            "44a8e3b453c9376c468b4e3e0046f5ac33e11d6d"
        ],
        [
            "case: pickP => [[i j] /= nzAij | //=]; move: (_ - _) => B.",
            "VernacExtend",
            "d09d9458d087c74b7317d831afc65fc07a0f6e3f"
        ],
        [
            "case: GaussE (IHm _ B) => [[L U] r] /= uU.",
            "VernacExtend",
            "e00fff71ff314c991514fc71c41a3556702e444a"
        ],
        [
            "rewrite unitmxE xcolE det_mulmx (@det_ublock _ 1) det_scalar1 !unitrM.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "by rewrite unitfE nzAij -!unitmxE uU unitmx_perm.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma col_ebase_unit m n (A : 'M_(m, n)) : col_ebase A \\in unitmx.",
            "VernacStartTheoremProof",
            "503001dced5d16697c30f55aa406b4c47429e789"
        ],
        [
            "rewrite /col_ebase unlock; elim: m n A => [|m IHm] [|n] //= A.",
            "VernacExtend",
            "44a8e3b453c9376c468b4e3e0046f5ac33e11d6d"
        ],
        [
            "case: pickP => [[i j] _|] //=; move: (_ - _) => B.",
            "VernacExtend",
            "d09d9458d087c74b7317d831afc65fc07a0f6e3f"
        ],
        [
            "case: GaussE (IHm _ B) => [[L U] r] /= uL.",
            "VernacExtend",
            "e00fff71ff314c991514fc71c41a3556702e444a"
        ],
        [
            "rewrite unitmxE xrowE det_mulmx (@det_lblock _ 1) det1 mul1r unitrM.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "by rewrite -unitmxE unitmx_perm.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Hint Resolve rank_leq_row rank_leq_col row_ebase_unit col_ebase_unit : core.",
            "VernacHints",
            "9eb6db607afe9745ebaae0863f0f00d9957a3318"
        ],
        [
            "Lemma mulmx_ebase m n (A : 'M_(m, n)) : col_ebase A *m pid_mx (\\rank A) *m row_ebase A = A.",
            "VernacStartTheoremProof",
            "a4a47fe498bb26ff85162eead9edfdcb9fbe76dc"
        ],
        [
            "rewrite mxrankE /col_ebase /row_ebase unlock.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "elim: m n A => [n A | m IHm]; first by rewrite [A]flatmx0 [_ *m _]flatmx0.",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "case=> [A | n]; first by rewrite [_ *m _]thinmx0 [A]thinmx0.",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "rewrite -(add1n m) -?(add1n n) => A /=.",
            "VernacExtend",
            "3c42b53d0efc26db114b00541ac5e7fcb29e6aeb"
        ],
        [
            "case: pickP => [[i0 j0] | A0] /=; last first.",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "apply/matrixP=> i j; rewrite pid_mx_0 mulmx0 mul0mx mxE.",
            "VernacExtend",
            "56c014161b39aecfb3c54301c2409dba4e8e1857"
        ],
        [
            "by move/eqP: (A0 (i, j)).",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "set a := A i0 j0 => nz_a; set A1 := xrow _ _ _.",
            "VernacExtend",
            "c9a8452e0e06a4c3ac19bcd1b0a42d11d8e194b2"
        ],
        [
            "set u := ursubmx _; set v := _ *: _; set B : 'M_(m, n) := _ - _.",
            "VernacExtend",
            "6f9acefb35d3c4fa4eb78a0e027eeb287acf16a4"
        ],
        [
            "move: (rank_leq_col B) (rank_leq_row B) {IHm}(IHm n B); rewrite mxrankE.",
            "VernacExtend",
            "057edeb0967475c7ea5e8c98c449ddc5613eddc1"
        ],
        [
            "case: (GaussE B) => [[L U] r] /= r_m r_n defB.",
            "VernacExtend",
            "e00fff71ff314c991514fc71c41a3556702e444a"
        ],
        [
            "have ->: pid_mx (1 + r) = block_mx 1 0 0 (pid_mx r) :> 'M[F]_(1 + m, 1 + n).",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "rewrite -(subnKC r_m) -(subnKC r_n) pid_mx_block -col_mx0 -row_mx0.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "by rewrite block_mxA castmx_id col_mx0 row_mx0 -scalar_mx_block -pid_mx_block.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "rewrite xcolE xrowE mulmxA -xcolE -!mulmxA.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "rewrite !(addr0, add0r, mulmx0, mul0mx, mulmx_block, mul1mx) mulmxA defB.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "rewrite addrC subrK mul_mx_scalar scalerA divff // scale1r.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "have ->: a%:M = ulsubmx A1 by rewrite [_ A1]mx11_scalar !mxE !lshift0 !tpermR.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "rewrite submxK /A1 xrowE !xcolE -!mulmxA mulmxA -!perm_mxM !tperm2 !perm_mx1.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "by rewrite mulmx1 mul1mx.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma mulmx_base m n (A : 'M_(m, n)) : col_base A *m row_base A = A.",
            "VernacStartTheoremProof",
            "3b78e6807c0e1f605a08e00d86abcb90bf34da4f"
        ],
        [
            "by rewrite mulmxA -[col_base A *m _]mulmxA pid_mx_id ?mulmx_ebase.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma mulmx1_min_rank r m n (A : 'M_(m, n)) M N : M *m A *m N = 1%:M :> 'M_r -> r <= \\rank A.",
            "VernacStartTheoremProof",
            "b4a2136e7dda5ec101334c52547b882805756be8"
        ],
        [
            "by rewrite -{1}(mulmx_base A) mulmxA -mulmxA; move/mulmx1_min.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Arguments mulmx1_min_rank [r m n A].",
            "VernacArguments",
            "6cd5748f68e69908035e2568b230dfd7e9564e39"
        ],
        [
            "Lemma mulmx_max_rank r m n (M : 'M_(m, r)) (N : 'M_(r, n)) : \\rank (M *m N) <= r.",
            "VernacStartTheoremProof",
            "4e2b5fd842c78d88191a39105435a13a03538bb8"
        ],
        [
            "set MN := M *m N; set rMN := \\rank _.",
            "VernacExtend",
            "7405ffc63057f1493a790d3f39e251cc5fefe81f"
        ],
        [
            "pose L : 'M_(rMN, m) := pid_mx rMN *m invmx (col_ebase MN).",
            "VernacExtend",
            "3c5f04de94609049d978298aa02ff35fb35ea7c7"
        ],
        [
            "pose U : 'M_(n, rMN) := invmx (row_ebase MN) *m pid_mx rMN.",
            "VernacExtend",
            "3c5f04de94609049d978298aa02ff35fb35ea7c7"
        ],
        [
            "suffices: L *m M *m (N *m U) = 1%:M by apply: mulmx1_min.",
            "VernacExtend",
            "290ed488b5562e885aa2cac56f3a69b4faa0eaa6"
        ],
        [
            "rewrite mulmxA -(mulmxA L) -[M *m N]mulmx_ebase -/MN.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "by rewrite !mulmxA mulmxKV // mulmxK // !pid_mx_id /rMN ?pid_mx_1.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Arguments mulmx_max_rank [r m n].",
            "VernacArguments",
            "62574ece097c9c92e427c45dd512dc6bcea16f07"
        ],
        [
            "Lemma mxrank_tr m n (A : 'M_(m, n)) : \\rank A^T = \\rank A.",
            "VernacStartTheoremProof",
            "f3cc8ebe58eb0401e5f5ed8abaf4ef587bb974cb"
        ],
        [
            "apply/eqP; rewrite eqn_leq -{3}[A]trmxK -{1}(mulmx_base A) -{1}(mulmx_base A^T).",
            "VernacExtend",
            "56c014161b39aecfb3c54301c2409dba4e8e1857"
        ],
        [
            "by rewrite !trmx_mul !mulmx_max_rank.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma mxrank_add m n (A B : 'M_(m, n)) : \\rank (A + B)%R <= \\rank A + \\rank B.",
            "VernacStartTheoremProof",
            "74dc03592974c18906a1d84cae353b9835b25a03"
        ],
        [
            "by rewrite -{1}(mulmx_base A) -{1}(mulmx_base B) -mul_row_col mulmx_max_rank.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma mxrankM_maxl m n p (A : 'M_(m, n)) (B : 'M_(n, p)) : \\rank (A *m B) <= \\rank A.",
            "VernacStartTheoremProof",
            "27396328d760ae0460b95949dc9b85f4c2db8b82"
        ],
        [
            "by rewrite -{1}(mulmx_base A) -mulmxA mulmx_max_rank.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma mxrankM_maxr m n p (A : 'M_(m, n)) (B : 'M_(n, p)) : \\rank (A *m B) <= \\rank B.",
            "VernacStartTheoremProof",
            "ae61a7add61456ab309c97f9aa96dd1828199d6b"
        ],
        [
            "by rewrite -mxrank_tr -(mxrank_tr B) trmx_mul mxrankM_maxl.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma mxrank_scale m n a (A : 'M_(m, n)) : \\rank (a *: A) <= \\rank A.",
            "VernacStartTheoremProof",
            "4530ac06d280b82ff96e22903261fa2d420d92d3"
        ],
        [
            "by rewrite -mul_scalar_mx mxrankM_maxr.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma mxrank_scale_nz m n a (A : 'M_(m, n)) : a != 0 -> \\rank (a *: A) = \\rank A.",
            "VernacStartTheoremProof",
            "73b0d61dbd6895304559747855193143dc02a342"
        ],
        [
            "move=> nza; apply/eqP; rewrite eqn_leq -{3}[A]scale1r -(mulVf nza).",
            "VernacExtend",
            "f7feb259d6220ca40e8a86b90bd06f137aa140ac"
        ],
        [
            "by rewrite -scalerA !mxrank_scale.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma mxrank_opp m n (A : 'M_(m, n)) : \\rank (- A) = \\rank A.",
            "VernacStartTheoremProof",
            "74af1ec6855bd61dfb6d62a8d23675462af7e0f5"
        ],
        [
            "by rewrite -scaleN1r mxrank_scale_nz // oppr_eq0 oner_eq0.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma mxrank0 m n : \\rank (0 : 'M_(m, n)) = 0%N.",
            "VernacStartTheoremProof",
            "fcb47a285511581b305dcda4e7125531f434836f"
        ],
        [
            "by apply/eqP; rewrite -leqn0 -(@mulmx0 _ m 0 n 0) mulmx_max_rank.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma mxrank_eq0 m n (A : 'M_(m, n)) : (\\rank A == 0%N) = (A == 0).",
            "VernacStartTheoremProof",
            "2478100a55c042bf1d20b5fe30f140f0dfcd221f"
        ],
        [
            "apply/eqP/eqP=> [rA0 | ->{A}]; last exact: mxrank0.",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "move: (col_base A) (row_base A) (mulmx_base A); rewrite rA0 => Ac Ar <-.",
            "VernacExtend",
            "8261237f0cda1915a4077c28869831c5329103ce"
        ],
        [
            "by rewrite [Ac]thinmx0 mul0mx.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma mulmx_coker m n (A : 'M_(m, n)) : A *m cokermx A = 0.",
            "VernacStartTheoremProof",
            "593999ba86c252532b2bef682a6aa33fb50ff34f"
        ],
        [
            "by rewrite -{1}[A]mulmx_ebase -!mulmxA mulKVmx // mul_pid_mx_copid ?mulmx0.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma submxE m1 m2 n (A : 'M_(m1, n)) (B : 'M_(m2, n)) : (A <= B)%MS = (A *m cokermx B == 0).",
            "VernacStartTheoremProof",
            "7d05141eae91735aae55a461c7fed412414e0547"
        ],
        [
            "by rewrite unlock.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma mulmxKpV m1 m2 n (A : 'M_(m1, n)) (B : 'M_(m2, n)) : (A <= B)%MS -> A *m pinvmx B *m B = A.",
            "VernacStartTheoremProof",
            "8a3280ef110a141e3043382ef87661734f1a6418"
        ],
        [
            "rewrite submxE !mulmxA mulmxBr mulmx1 subr_eq0 => /eqP defA.",
            "VernacExtend",
            "3c42b53d0efc26db114b00541ac5e7fcb29e6aeb"
        ],
        [
            "rewrite -{4}[B]mulmx_ebase -!mulmxA mulKmx //.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "by rewrite (mulmxA (pid_mx _)) pid_mx_id // !mulmxA -{}defA mulmxKV.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma submxP m1 m2 n (A : 'M_(m1, n)) (B : 'M_(m2, n)) : reflect (exists D, A = D *m B) (A <= B)%MS.",
            "VernacStartTheoremProof",
            "17fc5b7ea5b4ae55413f446604f4ec65e0a560df"
        ],
        [
            "apply: (iffP idP) => [/mulmxKpV | [D ->]]; first by exists (A *m pinvmx B).",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "by rewrite submxE -mulmxA mulmx_coker mulmx0.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Arguments submxP {m1 m2 n A B}.",
            "VernacArguments",
            "4df05bb40648e4559ecf7378d7deb83d125a37cf"
        ],
        [
            "Lemma submx_refl m n (A : 'M_(m, n)) : (A <= A)%MS.",
            "VernacStartTheoremProof",
            "f90ce3f4c3a6edba1d15f4c2307f947f6e8d1ae9"
        ],
        [
            "by rewrite submxE mulmx_coker.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Hint Resolve submx_refl : core.",
            "VernacHints",
            "54628c5ca783b2d45ce3b6e9c5e571cf45136daf"
        ],
        [
            "Lemma submxMl m n p (D : 'M_(m, n)) (A : 'M_(n, p)) : (D *m A <= A)%MS.",
            "VernacStartTheoremProof",
            "2e2a45046dcd1359a2b073c4b02e686dd7fbfd68"
        ],
        [
            "by rewrite submxE -mulmxA mulmx_coker mulmx0.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma submxMr m1 m2 n p (A : 'M_(m1, n)) (B : 'M_(m2, n)) (C : 'M_(n, p)) : (A <= B)%MS -> (A *m C <= B *m C)%MS.",
            "VernacStartTheoremProof",
            "c9156886a41fa4913a4c94ce72337198a7211467"
        ],
        [
            "by case/submxP=> D ->; rewrite -mulmxA submxMl.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma mulmx_sub m n1 n2 p (C : 'M_(m, n1)) A (B : 'M_(n2, p)) : (A <= B -> C *m A <= B)%MS.",
            "VernacStartTheoremProof",
            "38ae1b09e9eed481e58b216f975cc505553c8592"
        ],
        [
            "by case/submxP=> D ->; rewrite mulmxA submxMl.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma submx_trans m1 m2 m3 n (A : 'M_(m1, n)) (B : 'M_(m2, n)) (C : 'M_(m3, n)) : (A <= B -> B <= C -> A <= C)%MS.",
            "VernacStartTheoremProof",
            "2a29c4ed15e69d3a200883a85ed499ff31c4f46a"
        ],
        [
            "by case/submxP=> D ->{A}; apply: mulmx_sub.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma ltmx_sub_trans m1 m2 m3 n (A : 'M_(m1, n)) (B : 'M_(m2, n)) (C : 'M_(m3, n)) : (A < B)%MS -> (B <= C)%MS -> (A < C)%MS.",
            "VernacStartTheoremProof",
            "776dbbfc63a80eefc69048e973447a85b0d5442a"
        ],
        [
            "case/andP=> sAB ltAB sBC; rewrite ltmxE (submx_trans sAB) //.",
            "VernacExtend",
            "90a2acb29b7a5304b0ab6ba5269c420638ddef63"
        ],
        [
            "by apply: contra ltAB; apply: submx_trans.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma sub_ltmx_trans m1 m2 m3 n (A : 'M_(m1, n)) (B : 'M_(m2, n)) (C : 'M_(m3, n)) : (A <= B)%MS -> (B < C)%MS -> (A < C)%MS.",
            "VernacStartTheoremProof",
            "7985fae43ea56defdddfbc42aac9479e01b2e0da"
        ],
        [
            "move=> sAB /andP[sBC ltBC]; rewrite ltmxE (submx_trans sAB) //.",
            "VernacExtend",
            "057edeb0967475c7ea5e8c98c449ddc5613eddc1"
        ],
        [
            "by apply: contra ltBC => sCA; apply: submx_trans sAB.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma ltmx_trans m n : transitive (@ltmx m m n).",
            "VernacStartTheoremProof",
            "ae5798617d3bc9835d407eb827a693dcf6a87513"
        ],
        [
            "by move=> A B C; move/ltmxW; apply: sub_ltmx_trans.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma ltmx_irrefl m n : irreflexive (@ltmx m m n).",
            "VernacStartTheoremProof",
            "4f18b8d3e03174c538531ab6ec32c4acd13eeac0"
        ],
        [
            "by move=> A; rewrite /ltmx submx_refl andbF.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma sub0mx m1 m2 n (A : 'M_(m2, n)) : ((0 : 'M_(m1, n)) <= A)%MS.",
            "VernacStartTheoremProof",
            "3e689742f49ff7a8cbffe405b8cf7df64e78cd52"
        ],
        [
            "by rewrite submxE mul0mx.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma submx0null m1 m2 n (A : 'M[F]_(m1, n)) : (A <= (0 : 'M_(m2, n)))%MS -> A = 0.",
            "VernacStartTheoremProof",
            "635720362c8ff1baf0ae7b0a3bff733ee34ccdad"
        ],
        [
            "by case/submxP=> D; rewrite mulmx0.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma submx0 m n (A : 'M_(m, n)) : (A <= (0 : 'M_n))%MS = (A == 0).",
            "VernacStartTheoremProof",
            "e14b1648b44bd9cd2d71e8850b3e2c6a93b9f959"
        ],
        [
            "by apply/idP/eqP=> [|->]; [apply: submx0null | apply: sub0mx].",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma lt0mx m n (A : 'M_(m, n)) : ((0 : 'M_n) < A)%MS = (A != 0).",
            "VernacStartTheoremProof",
            "df464af6f057ff2ad1b1c4b6fbca755232a7b9df"
        ],
        [
            "by rewrite /ltmx sub0mx submx0.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma ltmx0 m n (A : 'M[F]_(m, n)) : (A < (0 : 'M_n))%MS = false.",
            "VernacStartTheoremProof",
            "bc8787ac0b786226beb4607aba44c4a660bbd4da"
        ],
        [
            "by rewrite /ltmx sub0mx andbF.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma eqmx0P m n (A : 'M_(m, n)) : reflect (A = 0) (A == (0 : 'M_n))%MS.",
            "VernacStartTheoremProof",
            "e0b3de9cbc6ab1f2091413b4adb3a2ddbd5e3498"
        ],
        [
            "by rewrite submx0 sub0mx andbT; apply: eqP.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma eqmx_eq0 m1 m2 n (A : 'M_(m1, n)) (B : 'M_(m2, n)) : (A :=: B)%MS -> (A == 0) = (B == 0).",
            "VernacStartTheoremProof",
            "bca9f50082e59ca699df1c5ce4c65877aeed173d"
        ],
        [
            "by move=> eqAB; rewrite -!submx0 eqAB.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma addmx_sub m1 m2 n (A : 'M_(m1, n)) (B : 'M_(m1, n)) (C : 'M_(m2, n)) : (A <= C)%MS -> (B <= C)%MS -> ((A + B)%R <= C)%MS.",
            "VernacStartTheoremProof",
            "8d1a6b86cf8b9714aa998b95bbf7214e7988b93a"
        ],
        [
            "by case/submxP=> A' ->; case/submxP=> B' ->; rewrite -mulmxDl submxMl.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma summx_sub m1 m2 n (B : 'M_(m2, n)) I (r : seq I) (P : pred I) (A_ : I -> 'M_(m1, n)) : (forall i, P i -> A_ i <= B)%MS -> ((\\sum_(i <- r | P i) A_ i)%R <= B)%MS.",
            "VernacStartTheoremProof",
            "b9c9bad5c3fd0bbe64d34df9140f9d701ab7de97"
        ],
        [
            "by move=> leAB; elim/big_ind: _ => // [|C D]; [apply/sub0mx | apply/addmx_sub].",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma scalemx_sub m1 m2 n a (A : 'M_(m1, n)) (B : 'M_(m2, n)) : (A <= B)%MS -> (a *: A <= B)%MS.",
            "VernacStartTheoremProof",
            "ec5aec2e0d06b8171694f460b32b3baeaa832c67"
        ],
        [
            "by case/submxP=> A' ->; rewrite scalemxAl submxMl.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma row_sub m n i (A : 'M_(m, n)) : (row i A <= A)%MS.",
            "VernacStartTheoremProof",
            "765e42b7450466e5d98995de0be3984d61e048a2"
        ],
        [
            "by rewrite rowE submxMl.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma eq_row_sub m n v (A : 'M_(m, n)) i : row i A = v -> (v <= A)%MS.",
            "VernacStartTheoremProof",
            "87d076a618d76afc56cd2523c02496cef3700283"
        ],
        [
            "by move <-; rewrite row_sub.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma nz_row_sub m n (A : 'M_(m, n)) : (nz_row A <= A)%MS.",
            "VernacStartTheoremProof",
            "1938df06811dd04b0417d6daecbb27c7393465b8"
        ],
        [
            "by rewrite /nz_row; case: pickP => [i|] _; rewrite ?row_sub ?sub0mx.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma row_subP m1 m2 n (A : 'M_(m1, n)) (B : 'M_(m2, n)) : reflect (forall i, row i A <= B)%MS (A <= B)%MS.",
            "VernacStartTheoremProof",
            "5b321f50ab77f3c959a56b0371972061932701c1"
        ],
        [
            "apply: (iffP idP) => [sAB i|sAB].",
            "VernacExtend",
            "4bd6fa79b17bcd2bfb7af091fb325367a20385d6"
        ],
        [
            "by apply: submx_trans sAB; apply: row_sub.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "rewrite submxE; apply/eqP/row_matrixP=> i; apply/eqP.",
            "VernacExtend",
            "51feb8305384ec63057bc47214b50a33a7155fd3"
        ],
        [
            "by rewrite row_mul row0 -submxE.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Arguments row_subP {m1 m2 n A B}.",
            "VernacArguments",
            "e0ad82842a6fb77e2db1028a21bbb171aaa9c61c"
        ],
        [
            "Lemma rV_subP m1 m2 n (A : 'M_(m1, n)) (B : 'M_(m2, n)) : reflect (forall v : 'rV_n, v <= A -> v <= B)%MS (A <= B)%MS.",
            "VernacStartTheoremProof",
            "604d0486f1ed544228d7e233b1a7b9c8cdbb4852"
        ],
        [
            "apply: (iffP idP) => [sAB v Av | sAB]; first exact: submx_trans sAB.",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "by apply/row_subP=> i; rewrite sAB ?row_sub.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Arguments rV_subP {m1 m2 n A B}.",
            "VernacArguments",
            "edffc54de5c8761b17c591b9994bccd84bd8f1bf"
        ],
        [
            "Lemma row_subPn m1 m2 n (A : 'M_(m1, n)) (B : 'M_(m2, n)) : reflect (exists i, ~~ (row i A <= B)%MS) (~~ (A <= B)%MS).",
            "VernacStartTheoremProof",
            "7fb6ccfda03907ebdb779148204776f7797ea375"
        ],
        [
            "by rewrite (sameP row_subP forallP) negb_forall; apply: existsP.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma sub_rVP n (u v : 'rV_n) : reflect (exists a, u = a *: v) (u <= v)%MS.",
            "VernacStartTheoremProof",
            "939bd0d6ae5584f47ea755312971560b5fb9d58b"
        ],
        [
            "apply: (iffP submxP) => [[w ->] | [a ->]].",
            "VernacExtend",
            "4bd6fa79b17bcd2bfb7af091fb325367a20385d6"
        ],
        [
            "by exists (w 0 0); rewrite -mul_scalar_mx -mx11_scalar.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "by exists a%:M; rewrite mul_scalar_mx.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma rank_rV n (v : 'rV_n) : \\rank v = (v != 0).",
            "VernacStartTheoremProof",
            "67d56ba02661aff79d0b5e31804da3bc78622f6b"
        ],
        [
            "case: eqP => [-> | nz_v]; first by rewrite mxrank0.",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "by apply/eqP; rewrite eqn_leq rank_leq_row lt0n mxrank_eq0; apply/eqP.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma rowV0Pn m n (A : 'M_(m, n)) : reflect (exists2 v : 'rV_n, v <= A & v != 0)%MS (A != 0).",
            "VernacStartTheoremProof",
            "126fb89fa41a63ff50b287b05bd40e929e8210cd"
        ],
        [
            "rewrite -submx0; apply: (iffP idP) => [| [v svA]]; last first.",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "by rewrite -submx0; apply: contra (submx_trans _).",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "by case/row_subPn=> i; rewrite submx0; exists (row i A); rewrite ?row_sub.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma rowV0P m n (A : 'M_(m, n)) : reflect (forall v : 'rV_n, v <= A -> v = 0)%MS (A == 0).",
            "VernacStartTheoremProof",
            "e5884d85637e6c3cb17e07e077cba676daabcae0"
        ],
        [
            "rewrite -[A == 0]negbK; case: rowV0Pn => IH.",
            "VernacExtend",
            "712d339e99ee17eb7d5033e19ac614eb3ca6b532"
        ],
        [
            "by right; case: IH => v svA nzv IH; case/eqP: nzv; apply: IH.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "by left=> v svA; apply/eqP; apply/idPn=> nzv; case: IH; exists v.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma submx_full m1 m2 n (A : 'M_(m1, n)) (B : 'M_(m2, n)) : row_full B -> (A <= B)%MS.",
            "VernacStartTheoremProof",
            "bf676377f59872688816cf33e74f83b09a98db47"
        ],
        [
            "by rewrite submxE /cokermx => /eqnP->; rewrite /copid_mx pid_mx_1 subrr !mulmx0.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma row_fullP m n (A : 'M_(m, n)) : reflect (exists B, B *m A = 1%:M) (row_full A).",
            "VernacStartTheoremProof",
            "f5c3235250e8ed2476c9fe87720ef8309b30d159"
        ],
        [
            "apply: (iffP idP) => [Afull | [B kA]].",
            "VernacExtend",
            "4bd6fa79b17bcd2bfb7af091fb325367a20385d6"
        ],
        [
            "by exists (1%:M *m pinvmx A); apply: mulmxKpV (submx_full _ Afull).",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "by rewrite [_ A]eqn_leq rank_leq_col (mulmx1_min_rank B 1%:M) ?mulmx1.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Arguments row_fullP {m n A}.",
            "VernacArguments",
            "9d0f64f6188a73cef8a4fdf06d1e9a8d127d7665"
        ],
        [
            "Lemma row_full_inj m n p A : row_full A -> injective (@mulmx _ m n p A).",
            "VernacStartTheoremProof",
            "737838d7521802f8677aeffbeb16a237e0af9e95"
        ],
        [
            "case/row_fullP=> A' A'K; apply: can_inj (mulmx A') _ => B.",
            "VernacExtend",
            "d62e4c271de3f2a9ff5062b8b89d3c57d965c518"
        ],
        [
            "by rewrite mulmxA A'K mul1mx.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma row_freeP m n (A : 'M_(m, n)) : reflect (exists B, A *m B = 1%:M) (row_free A).",
            "VernacStartTheoremProof",
            "802e5ad6858b2f0e92504ecb7cecb640cd29f7f5"
        ],
        [
            "rewrite /row_free -mxrank_tr.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "apply: (iffP row_fullP) => [] [B kA]; by exists B^T; rewrite -trmx1 -kA trmx_mul ?trmxK.",
            "VernacExtend",
            "9ba8844f90da4a48c6c9ed986dcaebadc0623e9f"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma row_free_inj m n p A : row_free A -> injective ((@mulmx _ m n p)^~ A).",
            "VernacStartTheoremProof",
            "2aef455e3d2442948822f87fb049e9fcdadb0ad2"
        ],
        [
            "case/row_freeP=> A' AK; apply: can_inj (mulmx^~ A') _ => B.",
            "VernacExtend",
            "d62e4c271de3f2a9ff5062b8b89d3c57d965c518"
        ],
        [
            "by rewrite -mulmxA AK mulmx1.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma row_free_unit n (A : 'M_n) : row_free A = (A \\in unitmx).",
            "VernacStartTheoremProof",
            "2fb5090212d8532822f30358d7ed1af70a6dcaa9"
        ],
        [
            "apply/row_fullP/idP=> [[A'] | uA]; first by case/mulmx1_unit.",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "by exists (invmx A); rewrite mulVmx.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma row_full_unit n (A : 'M_n) : row_full A = (A \\in unitmx).",
            "VernacStartTheoremProof",
            "d50c79f75dd032d04434b6ad2e433f53b36dfb57"
        ],
        [
            "exact: row_free_unit.",
            "VernacExtend",
            "ce637ff86bafca5d8359473e8c02af644dcbdc43"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma mxrank_unit n (A : 'M_n) : A \\in unitmx -> \\rank A = n.",
            "VernacStartTheoremProof",
            "b3e4e88a2f4618ab2d3394b5d10fdb3081161afb"
        ],
        [
            "by rewrite -row_full_unit => /eqnP.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma mxrank1 n : \\rank (1%:M : 'M_n) = n.",
            "VernacStartTheoremProof",
            "fe78d23146028458d48627c292b5e27bcf62647b"
        ],
        [
            "by apply: mxrank_unit; apply: unitmx1.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma mxrank_delta m n i j : \\rank (delta_mx i j : 'M_(m, n)) = 1%N.",
            "VernacStartTheoremProof",
            "aa2405931ae53ffc46ac68626e8607844959acb9"
        ],
        [
            "apply/eqP; rewrite eqn_leq lt0n mxrank_eq0.",
            "VernacExtend",
            "56c014161b39aecfb3c54301c2409dba4e8e1857"
        ],
        [
            "rewrite -{1}(mul_delta_mx (0 : 'I_1)) mulmx_max_rank.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "by apply/eqP; move/matrixP; move/(_ i j); move/eqP; rewrite !mxE !eqxx oner_eq0.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma mxrankS m1 m2 n (A : 'M_(m1, n)) (B : 'M_(m2, n)) : (A <= B)%MS -> \\rank A <= \\rank B.",
            "VernacStartTheoremProof",
            "c626a7290e2db1e78e5670d9a7f69b3ccad7fb5c"
        ],
        [
            "by case/submxP=> D ->; rewrite mxrankM_maxr.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma submx1 m n (A : 'M_(m, n)) : (A <= 1%:M)%MS.",
            "VernacStartTheoremProof",
            "146d6d2ce75a686d431f1f946e36435b19d062c9"
        ],
        [
            "by rewrite submx_full // row_full_unit unitmx1.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma sub1mx m n (A : 'M_(m, n)) : (1%:M <= A)%MS = row_full A.",
            "VernacStartTheoremProof",
            "e0b2a03858554bc811d777cd59584f27070ab7f7"
        ],
        [
            "apply/idP/idP; last exact: submx_full.",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "by move/mxrankS; rewrite mxrank1 col_leq_rank.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma ltmx1 m n (A : 'M_(m, n)) : (A < 1%:M)%MS = ~~ row_full A.",
            "VernacStartTheoremProof",
            "029f1d76d2c73b324b833197d5635f470b78c969"
        ],
        [
            "by rewrite /ltmx sub1mx submx1.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma lt1mx m n (A : 'M_(m, n)) : (1%:M < A)%MS = false.",
            "VernacStartTheoremProof",
            "7364ede49b5dce7a2c0d49c0e76796d03de27cdd"
        ],
        [
            "by rewrite /ltmx submx1 andbF.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma eqmxP m1 m2 n (A : 'M_(m1, n)) (B : 'M_(m2, n)) : reflect (A :=: B)%MS (A == B)%MS.",
            "VernacStartTheoremProof",
            "48719347728fc9dc3ed43bd04b854a586f707909"
        ],
        [
            "apply: (iffP andP) => [[sAB sBA] | eqAB]; last by rewrite !eqAB.",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "split=> [|m3 C]; first by apply/eqP; rewrite eqn_leq !mxrankS.",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "split; first by apply/idP/idP; apply: submx_trans.",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "by apply/idP/idP=> sC; apply: submx_trans sC _.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Arguments eqmxP {m1 m2 n A B}.",
            "VernacArguments",
            "ed4607e56c54076c074a9ec84ecad5deb75d1279"
        ],
        [
            "Lemma rV_eqP m1 m2 n (A : 'M_(m1, n)) (B : 'M_(m2, n)) : reflect (forall u : 'rV_n, (u <= A) = (u <= B))%MS (A == B)%MS.",
            "VernacStartTheoremProof",
            "752d396ced83ea396cb646d815ae5c1443dfb04f"
        ],
        [
            "apply: (iffP idP) => [eqAB u | eqAB]; first by rewrite (eqmxP eqAB).",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "by apply/andP; split; apply/rV_subP=> u; rewrite eqAB.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma eqmx_refl m1 n (A : 'M_(m1, n)) : (A :=: A)%MS.",
            "VernacStartTheoremProof",
            "8204b388b95dfcad0347f6fa52f973ed90de63e4"
        ],
        [
            "by [].",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma eqmx_sym m1 m2 n (A : 'M_(m1, n)) (B : 'M_(m2, n)) : (A :=: B)%MS -> (B :=: A)%MS.",
            "VernacStartTheoremProof",
            "e721d770539ec8e7fde19bf79f03d7d8fce569f7"
        ],
        [
            "by move=> eqAB; split=> [|m3 C]; rewrite !eqAB.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma eqmx_trans m1 m2 m3 n (A : 'M_(m1, n)) (B : 'M_(m2, n)) (C : 'M_(m3, n)) : (A :=: B)%MS -> (B :=: C)%MS -> (A :=: C)%MS.",
            "VernacStartTheoremProof",
            "2dac5646c68403bbee8d3cb8d5428853ca0ef7aa"
        ],
        [
            "by move=> eqAB eqBC; split=> [|m4 D]; rewrite !eqAB !eqBC.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma eqmx_rank m1 m2 n (A : 'M_(m1, n)) (B : 'M_(m2, n)) : (A == B)%MS -> \\rank A = \\rank B.",
            "VernacStartTheoremProof",
            "48e734475d8e2e0cc3270ac199171904d8eafefc"
        ],
        [
            "by move/eqmxP->.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma lt_eqmx m1 m2 m3 n (A : 'M_(m1, n)) (B : 'M_(m2, n)) : (A :=: B)%MS -> forall C : 'M_(m3, n), (((A < C) = (B < C))%MS * ((C < A) = (C < B))%MS)%type.",
            "VernacStartTheoremProof",
            "67a50628bdefa72cdb58ddb2d8a3d2fd285c4251"
        ],
        [
            "by move=> eqAB C; rewrite /ltmx !eqAB.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma eqmxMr m1 m2 n p (A : 'M_(m1, n)) (B : 'M_(m2, n)) (C : 'M_(n, p)) : (A :=: B)%MS -> (A *m C :=: B *m C)%MS.",
            "VernacStartTheoremProof",
            "cd63bf3737a5ed2df03dc83c574f144891a76f9c"
        ],
        [
            "by move=> eqAB; apply/eqmxP; rewrite !submxMr ?eqAB.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma eqmxMfull m n p (A : 'M_(m, n)) (B : 'M_(n, p)) : row_full A -> (A *m B :=: B)%MS.",
            "VernacStartTheoremProof",
            "1dff925978ba8c67d30fe34ac2774e1028c939af"
        ],
        [
            "case/row_fullP=> A' A'A; apply/eqmxP; rewrite submxMl /=.",
            "VernacExtend",
            "db5c0dcae9fc8f6605ec5d5bf559f9684231fcd6"
        ],
        [
            "by apply/submxP; exists A'; rewrite mulmxA A'A mul1mx.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma eqmx0 m n : ((0 : 'M[F]_(m, n)) :=: (0 : 'M_n))%MS.",
            "VernacStartTheoremProof",
            "0ec43a71ed6575eae98b884bd3ceb0956a3c3837"
        ],
        [
            "by apply/eqmxP; rewrite !sub0mx.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma eqmx_scale m n a (A : 'M_(m, n)) : a != 0 -> (a *: A :=: A)%MS.",
            "VernacStartTheoremProof",
            "7104fbfb20eaf43746f94e6048090ffbace083e4"
        ],
        [
            "move=> nz_a; apply/eqmxP; rewrite scalemx_sub //.",
            "VernacExtend",
            "f7feb259d6220ca40e8a86b90bd06f137aa140ac"
        ],
        [
            "by rewrite -{1}[A]scale1r -(mulVf nz_a) -scalerA scalemx_sub.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma eqmx_opp m n (A : 'M_(m, n)) : (- A :=: A)%MS.",
            "VernacStartTheoremProof",
            "2064a46f01aaf76c70d1c5e99fe4fa615ed0d8fa"
        ],
        [
            "by rewrite -scaleN1r; apply: eqmx_scale => //; rewrite oppr_eq0 oner_eq0.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma submxMfree m1 m2 n p (A : 'M_(m1, n)) (B : 'M_(m2, n)) (C : 'M_(n, p)) : row_free C -> (A *m C <= B *m C)%MS = (A <= B)%MS.",
            "VernacStartTheoremProof",
            "e78447d769a9c9903671a489a14c9b462791e8a3"
        ],
        [
            "case/row_freeP=> C' C_C'_1; apply/idP/idP=> sAB; last exact: submxMr.",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "by rewrite -[A]mulmx1 -[B]mulmx1 -C_C'_1 !mulmxA submxMr.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma eqmxMfree m1 m2 n p (A : 'M_(m1, n)) (B : 'M_(m2, n)) (C : 'M_(n, p)) : row_free C -> (A *m C :=: B *m C)%MS -> (A :=: B)%MS.",
            "VernacStartTheoremProof",
            "b7f5a6803d237a7cb7bb243b725b9a9aa3b9e6b8"
        ],
        [
            "by move=> Cfree eqAB; apply/eqmxP; move/eqmxP: eqAB; rewrite !submxMfree.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma mxrankMfree m n p (A : 'M_(m, n)) (B : 'M_(n, p)) : row_free B -> \\rank (A *m B) = \\rank A.",
            "VernacStartTheoremProof",
            "786584774e3cf395204738590e2b2897e9bf58df"
        ],
        [
            "by move=> Bfree; rewrite -mxrank_tr trmx_mul eqmxMfull /row_full mxrank_tr.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma eq_row_base m n (A : 'M_(m, n)) : (row_base A :=: A)%MS.",
            "VernacStartTheoremProof",
            "341c481e063ce2e9c4979edb2145cf42e5797b11"
        ],
        [
            "apply/eqmxP; apply/andP; split; apply/submxP.",
            "VernacExtend",
            "38eca8dc37d3ddf5fb24e0c31f19137f33debf79"
        ],
        [
            "exists (pid_mx (\\rank A) *m invmx (col_ebase A)).",
            "VernacExtend",
            "fa8d5b8800693eda82eb31b739d45e3120dc9489"
        ],
        [
            "by rewrite -{8}[A]mulmx_ebase !mulmxA mulmxKV // pid_mx_id.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "exists (col_ebase A *m pid_mx (\\rank A)).",
            "VernacExtend",
            "09870c972282abdc5304a84a1cc1c73f31eb4330"
        ],
        [
            "by rewrite mulmxA -(mulmxA _ _ (pid_mx _)) pid_mx_id // mulmx_ebase.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Let qidmx_eq1 n (A : 'M_n) : qidmx A = (A == 1%:M).",
            "VernacDefinition",
            "adeead37c19d084e897edc44df3ef6c396da6975"
        ],
        [
            "by rewrite /qidmx eqxx pid_mx_1.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Let genmx_witnessP m n (A : 'M_(m, n)) : equivmx A (row_full A) (genmx_witness A).",
            "VernacDefinition",
            "5f4e0daa6ccb2f6e67410f1082c2d0419a234cb6"
        ],
        [
            "rewrite /equivmx qidmx_eq1 /genmx_witness.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "case fullA: (row_full A); first by rewrite eqxx sub1mx submx1 fullA.",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "set B := _ *m _; have defB : (B == A)%MS.",
            "VernacExtend",
            "5a669f4ad2118b005921530a069ac8f03fd7f32b"
        ],
        [
            "apply/andP; split; apply/submxP.",
            "VernacExtend",
            "acf5855cc010871228abcccac05ae5fee2482818"
        ],
        [
            "exists (pid_mx (\\rank A) *m invmx (col_ebase A)).",
            "VernacExtend",
            "fa8d5b8800693eda82eb31b739d45e3120dc9489"
        ],
        [
            "by rewrite -{3}[A]mulmx_ebase !mulmxA mulmxKV // pid_mx_id.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "exists (col_ebase A *m pid_mx (\\rank A)).",
            "VernacExtend",
            "09870c972282abdc5304a84a1cc1c73f31eb4330"
        ],
        [
            "by rewrite mulmxA -(mulmxA _ _ (pid_mx _)) pid_mx_id // mulmx_ebase.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "rewrite defB -negb_add addbF; case: eqP defB => // ->.",
            "VernacExtend",
            "712d339e99ee17eb7d5033e19ac614eb3ca6b532"
        ],
        [
            "by rewrite sub1mx fullA.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma genmxE m n (A : 'M_(m, n)) : (<<A>> :=: A)%MS.",
            "VernacStartTheoremProof",
            "c2a55c4e8adc7f8b01a77a8f0377f34c0c653a41"
        ],
        [
            "by rewrite unlock; apply/eqmxP; case/andP: (chooseP (genmx_witnessP A)).",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma eq_genmx m1 m2 n (A : 'M_(m1, n)) (B : 'M_(m2, n)) : (A :=: B -> <<A>> = <<B>>)%MS.",
            "VernacStartTheoremProof",
            "d2cb622fdcd4f3e67fe4a7dc21c749768877bd00"
        ],
        [
            "move=> eqAB; rewrite unlock.",
            "VernacExtend",
            "057edeb0967475c7ea5e8c98c449ddc5613eddc1"
        ],
        [
            "have{eqAB} eqAB: equivmx A (row_full A) =1 equivmx B (row_full B).",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "by move=> C; rewrite /row_full /equivmx !eqAB.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "rewrite (eq_choose eqAB) (choose_id _ (genmx_witnessP B)) //.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "by rewrite -eqAB genmx_witnessP.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma genmxP m1 m2 n (A : 'M_(m1, n)) (B : 'M_(m2, n)) : reflect (<<A>> = <<B>>)%MS (A == B)%MS.",
            "VernacStartTheoremProof",
            "3852fcd5a9e5c9503d830bf70dfb72c0c166c314"
        ],
        [
            "apply: (iffP idP) => eqAB; first exact: eq_genmx (eqmxP _).",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "by rewrite -!(genmxE A) eqAB !genmxE andbb.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Arguments genmxP {m1 m2 n A B}.",
            "VernacArguments",
            "003df91f63799a506860b72c3f02fcfd2ba64091"
        ],
        [
            "Lemma genmx0 m n : <<0 : 'M_(m, n)>>%MS = 0.",
            "VernacStartTheoremProof",
            "c65719c66c3140029d05e13eb30f0f126f9befd1"
        ],
        [
            "by apply/eqP; rewrite -submx0 genmxE sub0mx.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma genmx1 n : <<1%:M : 'M_n>>%MS = 1%:M.",
            "VernacStartTheoremProof",
            "e8bb1bdd34c27ce324796342095647dcc8ea8b77"
        ],
        [
            "rewrite unlock; case/andP: (chooseP (@genmx_witnessP n n 1%:M)) => _ /eqP.",
            "VernacExtend",
            "712d339e99ee17eb7d5033e19ac614eb3ca6b532"
        ],
        [
            "by rewrite qidmx_eq1 row_full_unit unitmx1 => /eqP.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma genmx_id m n (A : 'M_(m, n)) : (<<<<A>>>> = <<A>>)%MS.",
            "VernacStartTheoremProof",
            "b5454a52d43288e8f93d63d42eb764d4217a5237"
        ],
        [
            "by apply: eq_genmx; apply: genmxE.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma row_base_free m n (A : 'M_(m, n)) : row_free (row_base A).",
            "VernacStartTheoremProof",
            "67dba821614df9af89c8ee3d02f3ee1c3c4c2cec"
        ],
        [
            "by apply/eqnP; rewrite eq_row_base.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma mxrank_gen m n (A : 'M_(m, n)) : \\rank <<A>> = \\rank A.",
            "VernacStartTheoremProof",
            "9c226a6e4fcbfad05ddbf71944ab9292ae125d79"
        ],
        [
            "by rewrite genmxE.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma col_base_full m n (A : 'M_(m, n)) : row_full (col_base A).",
            "VernacStartTheoremProof",
            "562302026da0f454362a48d2e72042f074a094ed"
        ],
        [
            "apply/row_fullP; exists (pid_mx (\\rank A) *m invmx (col_ebase A)).",
            "VernacExtend",
            "e390ff232080cbeb24672774382c4b70bbff3ceb"
        ],
        [
            "by rewrite !mulmxA mulmxKV // pid_mx_id // pid_mx_1.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Hint Resolve row_base_free col_base_full : core.",
            "VernacHints",
            "590cdb577289304e5d9b5a011aedf89467b1f138"
        ],
        [
            "Lemma mxrank_leqif_sup m1 m2 n (A : 'M_(m1, n)) (B : 'M_(m2, n)) : (A <= B)%MS -> \\rank A <= \\rank B ?= iff (B <= A)%MS.",
            "VernacStartTheoremProof",
            "1617bda644d04a26b13be8f266a052f86aaa3887"
        ],
        [
            "move=> sAB; split; first by rewrite mxrankS.",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "apply/idP/idP=> [| sBA]; last by rewrite eqn_leq !mxrankS.",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "case/submxP: sAB => D ->; rewrite -{-2}(mulmx_base B) mulmxA.",
            "VernacExtend",
            "90a2acb29b7a5304b0ab6ba5269c420638ddef63"
        ],
        [
            "rewrite mxrankMfree // => /row_fullP[E kE].",
            "VernacExtend",
            "3c42b53d0efc26db114b00541ac5e7fcb29e6aeb"
        ],
        [
            "by rewrite -{1}[row_base B]mul1mx -kE -(mulmxA E) (mulmxA _ E) submxMl.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma mxrank_leqif_eq m1 m2 n (A : 'M_(m1, n)) (B : 'M_(m2, n)) : (A <= B)%MS -> \\rank A <= \\rank B ?= iff (A == B)%MS.",
            "VernacStartTheoremProof",
            "2fcb0af2d4d20bde10cd9cbed4958e009c67cfb0"
        ],
        [
            "by move=> sAB; rewrite sAB; apply: mxrank_leqif_sup.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma ltmxErank m1 m2 n (A : 'M_(m1, n)) (B : 'M_(m2, n)) : (A < B)%MS = (A <= B)%MS && (\\rank A < \\rank B).",
            "VernacStartTheoremProof",
            "eb02165316e875f2983a290029a5b1f44ccb747b"
        ],
        [
            "by apply: andb_id2l => sAB; rewrite (ltn_leqif (mxrank_leqif_sup sAB)).",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma rank_ltmx m1 m2 n (A : 'M_(m1, n)) (B : 'M_(m2, n)) : (A < B)%MS -> \\rank A < \\rank B.",
            "VernacStartTheoremProof",
            "2dc3dfc36326e8dbbca66c25323f812c311894a6"
        ],
        [
            "by rewrite ltmxErank => /andP[].",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma eqmx_cast m1 m2 n (A : 'M_(m1, n)) e : ((castmx e A : 'M_(m2, n)) :=: A)%MS.",
            "VernacStartTheoremProof",
            "28d771c799087a9da931b8e220955c6ba1a40dca"
        ],
        [
            "by case: e A; case: m2 / => A e; rewrite castmx_id.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma eqmx_conform m1 m2 n (A : 'M_(m1, n)) (B : 'M_(m2, n)) : (conform_mx A B :=: A \\/ conform_mx A B :=: B)%MS.",
            "VernacStartTheoremProof",
            "e6e2a1b7fa00c5b45761005beeca23a9f0a9991d"
        ],
        [
            "case: (eqVneq m2 m1) => [-> | neqm12] in B *.",
            "VernacExtend",
            "e00fff71ff314c991514fc71c41a3556702e444a"
        ],
        [
            "by right; rewrite conform_mx_id.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "by left; rewrite nonconform_mx ?neqm12.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Let eqmx_sum_nop m n (A : 'M_(m, n)) : (addsmx_nop A :=: A)%MS.",
            "VernacDefinition",
            "8cf9e563fe6108f34ee3d3bc6710dc66ecca958b"
        ],
        [
            "case: (eqmx_conform <<A>>%MS A) => // eq_id_gen.",
            "VernacExtend",
            "e00fff71ff314c991514fc71c41a3556702e444a"
        ],
        [
            "exact: eqmx_trans (genmxE A).",
            "VernacExtend",
            "ce637ff86bafca5d8359473e8c02af644dcbdc43"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Section AddsmxSub.",
            "VernacBeginSection",
            "c7a110e77b914d2c6fac36615e9329e1c153e876"
        ],
        [
            "Variable (m1 m2 n : nat) (A : 'M[F]_(m1, n)) (B : 'M[F]_(m2, n)).",
            "VernacAssumption",
            "98b3e1d69b88d5b3804cdbefe7511c65ecf4efb9"
        ],
        [
            "Lemma col_mx_sub m3 (C : 'M_(m3, n)) : (col_mx A B <= C)%MS = (A <= C)%MS && (B <= C)%MS.",
            "VernacStartTheoremProof",
            "dfbfce4278dfe3f2b218e375ab34af0a4f6dba66"
        ],
        [
            "rewrite !submxE mul_col_mx -col_mx0.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "by apply/eqP/andP; [case/eq_col_mx=> -> -> | case; do 2!move/eqP->].",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma addsmxE : (A + B :=: col_mx A B)%MS.",
            "VernacStartTheoremProof",
            "5f78590dd9d10286f3fa3eee525fec0fc768fbc4"
        ],
        [
            "have:= submx_refl (col_mx A B); rewrite col_mx_sub; case/andP=> sAS sBS.",
            "VernacExtend",
            "3ce4f03148eef327ef1c0ea0b904dc833d71f154"
        ],
        [
            "rewrite unlock; do 2?case: eqP => [AB0 | _]; last exact: genmxE.",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "by apply/eqmxP; rewrite !eqmx_sum_nop sBS col_mx_sub AB0 sub0mx /=.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "by apply/eqmxP; rewrite !eqmx_sum_nop sAS col_mx_sub AB0 sub0mx andbT /=.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma addsmx_sub m3 (C : 'M_(m3, n)) : (A + B <= C)%MS = (A <= C)%MS && (B <= C)%MS.",
            "VernacStartTheoremProof",
            "819ca32c389e91001cf94c63e2906abb735cf32d"
        ],
        [
            "by rewrite addsmxE col_mx_sub.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma addsmxSl : (A <= A + B)%MS.",
            "VernacStartTheoremProof",
            "06f20b2fb20f80e5bf1921d8d0eee2c4961d7ae8"
        ],
        [
            "by have:= submx_refl (A + B)%MS; rewrite addsmx_sub; case/andP.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma addsmxSr : (B <= A + B)%MS.",
            "VernacStartTheoremProof",
            "836baa9d5e903867604244843d8dfd7443660a9f"
        ],
        [
            "by have:= submx_refl (A + B)%MS; rewrite addsmx_sub; case/andP.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma addsmx_idPr : reflect (A + B :=: B)%MS (A <= B)%MS.",
            "VernacStartTheoremProof",
            "fdcd21d7f141605ec4b095408a89ff9d24817877"
        ],
        [
            "have:= @eqmxP _ _ _ (A + B)%MS B.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "by rewrite addsmxSr addsmx_sub submx_refl !andbT.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma addsmx_idPl : reflect (A + B :=: A)%MS (B <= A)%MS.",
            "VernacStartTheoremProof",
            "bdee7a9f78ec64d55704f2c1be02684af1510c10"
        ],
        [
            "have:= @eqmxP _ _ _ (A + B)%MS A.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "by rewrite addsmxSl addsmx_sub submx_refl !andbT.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "End AddsmxSub.",
            "VernacEndSegment",
            "0f98a35fe56b5f9da46d50cdc7a4113cee8d68b0"
        ],
        [
            "Lemma adds0mx m1 m2 n (B : 'M_(m2, n)) : ((0 : 'M_(m1, n)) + B :=: B)%MS.",
            "VernacStartTheoremProof",
            "8cb78e2be4856477d8a1126ae98aa70ec6750266"
        ],
        [
            "by apply/eqmxP; rewrite addsmx_sub sub0mx addsmxSr /= andbT.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma addsmx0 m1 m2 n (A : 'M_(m1, n)) : (A + (0 : 'M_(m2, n)) :=: A)%MS.",
            "VernacStartTheoremProof",
            "cb64f36ddfd2d30828721bb103ef441b47c8097e"
        ],
        [
            "by apply/eqmxP; rewrite addsmx_sub sub0mx addsmxSl /= !andbT.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Let addsmx_nop_eq0 m n (A : 'M_(m, n)) : (addsmx_nop A == 0) = (A == 0).",
            "VernacDefinition",
            "30bff2114a1d1583c6f3457014085fab2d290605"
        ],
        [
            "by rewrite -!submx0 eqmx_sum_nop.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Let addsmx_nop0 m n : addsmx_nop (0 : 'M_(m, n)) = 0.",
            "VernacDefinition",
            "dd99d6e4350a6ab72dfa2fdcbeda68b4365022a4"
        ],
        [
            "by apply/eqP; rewrite addsmx_nop_eq0.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Let addsmx_nop_id n (A : 'M_n) : addsmx_nop A = A.",
            "VernacDefinition",
            "abac873c26ce464fb7dbea09f850d5e280f38f29"
        ],
        [
            "exact: conform_mx_id.",
            "VernacExtend",
            "ce637ff86bafca5d8359473e8c02af644dcbdc43"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma addsmxC m1 m2 n (A : 'M_(m1, n)) (B : 'M_(m2, n)) : (A + B = B + A)%MS.",
            "VernacStartTheoremProof",
            "3491757c17a4489caea0c5b4798bf252824d676d"
        ],
        [
            "have: (A + B == B + A)%MS.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "by apply/andP; rewrite !addsmx_sub andbC -addsmx_sub andbC -addsmx_sub.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "move/genmxP; rewrite [@addsmx]unlock -!submx0 !submx0.",
            "VernacExtend",
            "057edeb0967475c7ea5e8c98c449ddc5613eddc1"
        ],
        [
            "by do 2!case: eqP => [// -> | _]; rewrite ?genmx_id ?addsmx_nop0.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma adds0mx_id m1 n (B : 'M_n) : ((0 : 'M_(m1, n)) + B)%MS = B.",
            "VernacStartTheoremProof",
            "d996b9e6461047a063cd67f45762e3a6009d29b7"
        ],
        [
            "by rewrite unlock eqxx addsmx_nop_id.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma addsmx0_id m2 n (A : 'M_n) : (A + (0 : 'M_(m2, n)))%MS = A.",
            "VernacStartTheoremProof",
            "da2811ca9f2b153cc0cdd61f07aaded9f6eabc60"
        ],
        [
            "by rewrite addsmxC adds0mx_id.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma addsmxA m1 m2 m3 n (A : 'M_(m1, n)) (B : 'M_(m2, n)) (C : 'M_(m3, n)) : (A + (B + C) = A + B + C)%MS.",
            "VernacStartTheoremProof",
            "3de655f60f72beb5612530c358470552287d0ab6"
        ],
        [
            "have: (A + (B + C) :=: A + B + C)%MS.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "by apply/eqmxP/andP; rewrite !addsmx_sub -andbA andbA -!addsmx_sub.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "rewrite {1 3}[in @addsmx m1]unlock [in @addsmx n]unlock !addsmx_nop_id -!submx0.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "rewrite !addsmx_sub ![@addsmx]unlock -!submx0; move/eq_genmx.",
            "VernacExtend",
            "7e529e80bb2879787ee6d9466056f19f0215c721"
        ],
        [
            "by do 3!case: (_ <= 0)%MS; rewrite //= !genmx_id.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Canonical addsmx_monoid n := Monoid.Law (@addsmxA n n n n) (@adds0mx_id n n) (@addsmx0_id n n).",
            "VernacDefinition",
            "26e640ed3cade32cbd3957e7fe8ea99b9c89b274"
        ],
        [
            "Canonical addsmx_comoid n := Monoid.ComLaw (@addsmxC n n n).",
            "VernacDefinition",
            "dd777310ce5fa22171cb475364453aea990ea1e9"
        ],
        [
            "Lemma addsmxMr m1 m2 n p (A : 'M_(m1, n)) (B : 'M_(m2, n)) (C : 'M_(n, p)) : ((A + B)%MS *m C :=: A *m C + B *m C)%MS.",
            "VernacStartTheoremProof",
            "d0d39206525a09738c30dc128b313926bf6ff573"
        ],
        [
            "by apply/eqmxP; rewrite !addsmxE -!mul_col_mx !submxMr ?addsmxE.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma addsmxS m1 m2 m3 m4 n (A : 'M_(m1, n)) (B : 'M_(m2, n)) (C : 'M_(m3, n)) (D : 'M_(m4, n)) : (A <= C -> B <= D -> A + B <= C + D)%MS.",
            "VernacStartTheoremProof",
            "dc646f9793c614ef58c1aee03163232d059c26c5"
        ],
        [
            "move=> sAC sBD.",
            "VernacExtend",
            "b1b2cb7a3a617cba67460b4eca1f04de3c1cc716"
        ],
        [
            "by rewrite addsmx_sub {1}addsmxC !(submx_trans _ (addsmxSr _ _)).",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma addmx_sub_adds m m1 m2 n (A : 'M_(m, n)) (B : 'M_(m, n)) (C : 'M_(m1, n)) (D : 'M_(m2, n)) : (A <= C -> B <= D -> (A + B)%R <= C + D)%MS.",
            "VernacStartTheoremProof",
            "e61a0a522d1ea8c208511f2b993c936be715bad8"
        ],
        [
            "move=> sAC; move/(addsmxS sAC); apply: submx_trans.",
            "VernacExtend",
            "039a00b0dce1e4f2531d76077ff1806d71d5b41c"
        ],
        [
            "by rewrite addmx_sub ?addsmxSl ?addsmxSr.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma addsmx_addKl n m1 m2 (A : 'M_(m1, n)) (B C : 'M_(m2, n)) : (B <= A)%MS -> (A + (B + C)%R :=: A + C)%MS.",
            "VernacStartTheoremProof",
            "e7c7002b016cbc69c0f0938c2ef3c79ac02fb7f5"
        ],
        [
            "move=> sBA; apply/eqmxP; rewrite !addsmx_sub !addsmxSl.",
            "VernacExtend",
            "f7feb259d6220ca40e8a86b90bd06f137aa140ac"
        ],
        [
            "by rewrite -{3}[C](addKr B) !addmx_sub_adds ?eqmx_opp.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma addsmx_addKr n m1 m2 (A B : 'M_(m1, n)) (C : 'M_(m2, n)) : (B <= C)%MS -> ((A + B)%R + C :=: A + C)%MS.",
            "VernacStartTheoremProof",
            "6a0a61f44da6a0df8a357156ad1ca588cd48aa20"
        ],
        [
            "by rewrite -!(addsmxC C) addrC; apply: addsmx_addKl.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma adds_eqmx m1 m2 m3 m4 n (A : 'M_(m1, n)) (B : 'M_(m2, n)) (C : 'M_(m3, n)) (D : 'M_(m4, n)) : (A :=: C -> B :=: D -> A + B :=: C + D)%MS.",
            "VernacStartTheoremProof",
            "a45508415b76365d2f98464725baffcb56ad5cfc"
        ],
        [
            "by move=> eqAC eqBD; apply/eqmxP; rewrite !addsmxS ?eqAC ?eqBD.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma genmx_adds m1 m2 n (A : 'M_(m1, n)) (B : 'M_(m2, n)) : (<<(A + B)%MS>> = <<A>> + <<B>>)%MS.",
            "VernacStartTheoremProof",
            "b174908bc6f877915692d06b81417a713c4380a0"
        ],
        [
            "rewrite -(eq_genmx (adds_eqmx (genmxE A) (genmxE B))).",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "by rewrite [@addsmx]unlock !addsmx_nop_id !(fun_if (@genmx _ _)) !genmx_id.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma sub_addsmxP m1 m2 m3 n (A : 'M_(m1, n)) (B : 'M_(m2, n)) (C : 'M_(m3, n)) : reflect (exists u, A = u.1 *m B + u.2 *m C) (A <= B + C)%MS.",
            "VernacStartTheoremProof",
            "953cc127f02e4212eae3c28b1aba2e0933433003"
        ],
        [
            "apply: (iffP idP) => [|[u ->]]; last by rewrite addmx_sub_adds ?submxMl.",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "rewrite addsmxE; case/submxP=> u ->; exists (lsubmx u, rsubmx u).",
            "VernacExtend",
            "376de734d1b5ba9ab4830c18466c1480eefd2c62"
        ],
        [
            "by rewrite -mul_row_col hsubmxK.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Arguments sub_addsmxP {m1 m2 m3 n A B C}.",
            "VernacArguments",
            "9e84018b5a75c6b78b3efa13f2cc198c47f3930c"
        ],
        [
            "Variable I : finType.",
            "VernacAssumption",
            "856be18b55de00e7335ba4b72e8c9c11fdcf1b9c"
        ],
        [
            "Implicit Type P : pred I.",
            "VernacReserve",
            "f0631cda8f869743c295189070e37edf36c8a7e6"
        ],
        [
            "Lemma genmx_sums P n (B_ : I -> 'M_n) : <<(\\sum_(i | P i) B_ i)%MS>>%MS = (\\sum_(i | P i) <<B_ i>>)%MS.",
            "VernacStartTheoremProof",
            "7a0fdb1eeb54a8ad7f231f70a898de6a9c918afc"
        ],
        [
            "exact: (big_morph _ (@genmx_adds n n n) (@genmx0 n n)).",
            "VernacExtend",
            "ce637ff86bafca5d8359473e8c02af644dcbdc43"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma sumsmx_sup i0 P m n (A : 'M_(m, n)) (B_ : I -> 'M_n) : P i0 -> (A <= B_ i0)%MS -> (A <= \\sum_(i | P i) B_ i)%MS.",
            "VernacStartTheoremProof",
            "838f0fd034500f93afc561a3e7b72d755927f5f6"
        ],
        [
            "by move=> Pi0 sAB; apply: submx_trans sAB _; rewrite (bigD1 i0) // addsmxSl.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Arguments sumsmx_sup i0 [P m n A B_].",
            "VernacArguments",
            "5725f030e69131b580f91920f484c3857c5c5adb"
        ],
        [
            "Lemma sumsmx_subP P m n (A_ : I -> 'M_n) (B : 'M_(m, n)) : reflect (forall i, P i -> A_ i <= B)%MS (\\sum_(i | P i) A_ i <= B)%MS.",
            "VernacStartTheoremProof",
            "3293b7d823a86e40b6fcae5bf4d2fc07df53d1d6"
        ],
        [
            "apply: (iffP idP) => [sAB i Pi | sAB].",
            "VernacExtend",
            "4bd6fa79b17bcd2bfb7af091fb325367a20385d6"
        ],
        [
            "by apply: submx_trans sAB; apply: sumsmx_sup Pi _.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "by elim/big_rec: _ => [|i Ai Pi sAiB]; rewrite ?sub0mx // addsmx_sub sAB.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma summx_sub_sums P m n (A : I -> 'M[F]_(m, n)) B : (forall i, P i -> A i <= B i)%MS -> ((\\sum_(i | P i) A i)%R <= \\sum_(i | P i) B i)%MS.",
            "VernacStartTheoremProof",
            "f9091bef46ebb8469dc44e1bda0712d652eea682"
        ],
        [
            "by move=> sAB; apply: summx_sub => i Pi; rewrite (sumsmx_sup i) ?sAB.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma sumsmxS P n (A B : I -> 'M[F]_n) : (forall i, P i -> A i <= B i)%MS -> (\\sum_(i | P i) A i <= \\sum_(i | P i) B i)%MS.",
            "VernacStartTheoremProof",
            "50bf4a88e5171c8e9a2cf552bb6c0029ce0291cf"
        ],
        [
            "by move=> sAB; apply/sumsmx_subP=> i Pi; rewrite (sumsmx_sup i) ?sAB.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma eqmx_sums P n (A B : I -> 'M[F]_n) : (forall i, P i -> A i :=: B i)%MS -> (\\sum_(i | P i) A i :=: \\sum_(i | P i) B i)%MS.",
            "VernacStartTheoremProof",
            "3a7bcc9df647b97f2c31ba3921cdb87a0cab8a74"
        ],
        [
            "by move=> eqAB; apply/eqmxP; rewrite !sumsmxS // => i; move/eqAB->.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma sub_sumsmxP P m n (A : 'M_(m, n)) (B_ : I -> 'M_n) : reflect (exists u_, A = \\sum_(i | P i) u_ i *m B_ i) (A <= \\sum_(i | P i) B_ i)%MS.",
            "VernacStartTheoremProof",
            "d422f3b2ac68bbf1f6fb9a8d9fbda0524e6e7929"
        ],
        [
            "apply: (iffP idP) => [| [u_ ->]]; last first.",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "by apply: summx_sub_sums => i _; apply: submxMl.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "elim: {P}_.+1 {-2}P A (ltnSn #|P|) => // b IHb P A.",
            "VernacExtend",
            "e686a1895f1799b840b76242f931100819a9ad6c"
        ],
        [
            "case: (pickP P) => [i Pi | P0 _]; last first.",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "rewrite big_pred0 //; move/submx0null->.",
            "VernacExtend",
            "9d45b3f5079bd11fa9301fef8a859fbbb0c29729"
        ],
        [
            "by exists (fun _ => 0); rewrite big_pred0.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "rewrite (cardD1x Pi) (bigD1 i) //= => /IHb{b IHb} /= IHi /sub_addsmxP[u ->].",
            "VernacExtend",
            "3c42b53d0efc26db114b00541ac5e7fcb29e6aeb"
        ],
        [
            "have [u_ ->] := IHi _ (submxMl u.2 _).",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "exists [eta u_ with i |-> u.1]; rewrite (bigD1 i Pi) /= eqxx; congr (_ + _).",
            "VernacExtend",
            "e76467d7151e1fd4abf410e8cdf6f4aa03088874"
        ],
        [
            "by apply: eq_bigr => j /andP[_ /negPf->].",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma sumsmxMr_gen P m n A (B : 'M[F]_(m, n)) : ((\\sum_(i | P i) A i)%MS *m B :=: \\sum_(i | P i) <<A i *m B>>)%MS.",
            "VernacStartTheoremProof",
            "2745129ec342a29fcfe9da0c7fd7e62186c1c9d8"
        ],
        [
            "apply/eqmxP/andP; split; last first.",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "by apply/sumsmx_subP=> i Pi; rewrite genmxE submxMr ?(sumsmx_sup i).",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "have [u ->] := sub_sumsmxP _ _ _ (submx_refl (\\sum_(i | P i) A i)%MS).",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "by rewrite mulmx_suml summx_sub_sums // => i _; rewrite genmxE -mulmxA submxMl.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma sumsmxMr P n (A_ : I -> 'M[F]_n) (B : 'M_n) : ((\\sum_(i | P i) A_ i)%MS *m B :=: \\sum_(i | P i) (A_ i *m B))%MS.",
            "VernacStartTheoremProof",
            "d173f99818c4a77ad648f8f4418e3dcf75c59198"
        ],
        [
            "by apply: eqmx_trans (sumsmxMr_gen _ _ _) (eqmx_sums _) => i _; apply: genmxE.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma rank_pid_mx m n r : r <= m -> r <= n -> \\rank (pid_mx r : 'M_(m, n)) = r.",
            "VernacStartTheoremProof",
            "0387bbe13a727552aabd47fcf0a68745dd402b43"
        ],
        [
            "do 2!move/subnKC <-; rewrite pid_mx_block block_mxEv row_mx0 -addsmxE addsmx0.",
            "VernacExtend",
            "f8a765f8b8158bfb954eb4eeb20c0cb6489ecdb4"
        ],
        [
            "by rewrite -mxrank_tr tr_row_mx trmx0 trmx1 -addsmxE addsmx0 mxrank1.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma rank_copid_mx n r : r <= n -> \\rank (copid_mx r : 'M_n) = (n - r)%N.",
            "VernacStartTheoremProof",
            "e95e7e9a687fe1ec6f7a0313f735f42cb558429d"
        ],
        [
            "move/subnKC <-; rewrite /copid_mx pid_mx_block scalar_mx_block.",
            "VernacExtend",
            "01eaddc5beea13e116fcc5de5430a824e6e09efb"
        ],
        [
            "rewrite opp_block_mx !oppr0 add_block_mx !addr0 subrr block_mxEv row_mx0.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "rewrite -addsmxE adds0mx -mxrank_tr tr_row_mx trmx0 trmx1.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "by rewrite -addsmxE adds0mx mxrank1 addKn.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma mxrank_compl m n (A : 'M_(m, n)) : \\rank A^C = (n - \\rank A)%N.",
            "VernacStartTheoremProof",
            "f5d61f1541e693a8abed058684b4ae42238f6b0b"
        ],
        [
            "by rewrite mxrankMfree ?row_free_unit ?rank_copid_mx.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma mxrank_ker m n (A : 'M_(m, n)) : \\rank (kermx A) = (m - \\rank A)%N.",
            "VernacStartTheoremProof",
            "7d26f8124af9c673376eb3f718fdbc4adf40ef6b"
        ],
        [
            "by rewrite mxrankMfree ?row_free_unit ?unitmx_inv ?rank_copid_mx.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma kermx_eq0 n m (A : 'M_(m, n)) : (kermx A == 0) = row_free A.",
            "VernacStartTheoremProof",
            "087df840e315049ec1f9810980fe73b287990225"
        ],
        [
            "by rewrite -mxrank_eq0 mxrank_ker subn_eq0 row_leq_rank.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma mxrank_coker m n (A : 'M_(m, n)) : \\rank (cokermx A) = (n - \\rank A)%N.",
            "VernacStartTheoremProof",
            "a5dc2996ec45c104b29c11994381c2a7ee975322"
        ],
        [
            "by rewrite eqmxMfull ?row_full_unit ?unitmx_inv ?rank_copid_mx.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma cokermx_eq0 n m (A : 'M_(m, n)) : (cokermx A == 0) = row_full A.",
            "VernacStartTheoremProof",
            "2f7ab91aeedcbd8fe36d1d5ef637f85c6c241d1c"
        ],
        [
            "by rewrite -mxrank_eq0 mxrank_coker subn_eq0 col_leq_rank.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma mulmx_ker m n (A : 'M_(m, n)) : kermx A *m A = 0.",
            "VernacStartTheoremProof",
            "c7cd4bba5261d2f58da7c215f227f81b264e0c12"
        ],
        [
            "by rewrite -{2}[A]mulmx_ebase !mulmxA mulmxKV // mul_copid_mx_pid ?mul0mx.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma mulmxKV_ker m n p (A : 'M_(n, p)) (B : 'M_(m, n)) : B *m A = 0 -> B *m col_ebase A *m kermx A = B.",
            "VernacStartTheoremProof",
            "69510c891aa27389387db9f31ea11b033399a18d"
        ],
        [
            "rewrite mulmxA mulmxBr mulmx1 mulmxBl mulmxK //.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "rewrite -{1}[A]mulmx_ebase !mulmxA => /(canRL (mulmxK (row_ebase_unit A))).",
            "VernacExtend",
            "3c42b53d0efc26db114b00541ac5e7fcb29e6aeb"
        ],
        [
            "rewrite mul0mx // => BA0; apply: (canLR (addrK _)).",
            "VernacExtend",
            "2855640502da0a3b2cfdfcd02ea9662c049d9a24"
        ],
        [
            "by rewrite -(pid_mx_id _ _ n (rank_leq_col A)) mulmxA BA0 !mul0mx addr0.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma sub_kermxP p m n (A : 'M_(m, n)) (B : 'M_(p, m)) : reflect (B *m A = 0) (B <= kermx A)%MS.",
            "VernacStartTheoremProof",
            "6ef665b54625c943837c9f158f8d03e715c20f0f"
        ],
        [
            "apply: (iffP submxP) => [[D ->]|]; first by rewrite -mulmxA mulmx_ker mulmx0.",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "by move/mulmxKV_ker; exists (B *m col_ebase A).",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma mulmx0_rank_max m n p (A : 'M_(m, n)) (B : 'M_(n, p)) : A *m B = 0 -> \\rank A + \\rank B <= n.",
            "VernacStartTheoremProof",
            "a2b860595e3dcaf347ae563f559a5485d18b7c78"
        ],
        [
            "move=> AB0; rewrite -{3}(subnK (rank_leq_row B)) leq_add2r.",
            "VernacExtend",
            "057edeb0967475c7ea5e8c98c449ddc5613eddc1"
        ],
        [
            "by rewrite -mxrank_ker mxrankS //; apply/sub_kermxP.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma mxrank_Frobenius m n p q (A : 'M_(m, n)) B (C : 'M_(p, q)) : \\rank (A *m B) + \\rank (B *m C) <= \\rank B + \\rank (A *m B *m C).",
            "VernacStartTheoremProof",
            "1974a45ee969343a3b9f4a59e2869dbd7ba53c98"
        ],
        [
            "rewrite -{2}(mulmx_base (A *m B)) -mulmxA (eqmxMfull _ (col_base_full _)).",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "set C2 := row_base _ *m C.",
            "VernacExtend",
            "69a61e99b234580f7b41fa5b9655c87ba9a76f70"
        ],
        [
            "rewrite -{1}(subnK (rank_leq_row C2)) -(mxrank_ker C2) addnAC leq_add2r.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "rewrite addnC -{1}(mulmx_base B) -mulmxA eqmxMfull //.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "set C1 := _ *m C; rewrite -{2}(subnKC (rank_leq_row C1)) leq_add2l -mxrank_ker.",
            "VernacExtend",
            "8460a73fe74726b8e94ff0752da65e8d48f68f26"
        ],
        [
            "rewrite -(mxrankMfree _ (row_base_free (A *m B))).",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "have: (row_base (A *m B) <= row_base B)%MS by rewrite !eq_row_base submxMl.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "case/submxP=> D defD; rewrite defD mulmxA mxrankMfree ?mxrankS //.",
            "VernacExtend",
            "90a2acb29b7a5304b0ab6ba5269c420638ddef63"
        ],
        [
            "by apply/sub_kermxP; rewrite -mulmxA (mulmxA D) -defD -/C2 mulmx_ker.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma mxrank_mul_min m n p (A : 'M_(m, n)) (B : 'M_(n, p)) : \\rank A + \\rank B - n <= \\rank (A *m B).",
            "VernacStartTheoremProof",
            "81665ee36b065463e17b8ee48cedb5aee5d1e93c"
        ],
        [
            "by have:= mxrank_Frobenius A 1%:M B; rewrite mulmx1 mul1mx mxrank1 leq_subLR.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma addsmx_compl_full m n (A : 'M_(m, n)) : row_full (A + A^C)%MS.",
            "VernacStartTheoremProof",
            "57fddb65512ee3edbc77456e53525f2b57123034"
        ],
        [
            "rewrite /row_full addsmxE; apply/row_fullP.",
            "VernacExtend",
            "634a7639ed2fb7caf62757f84400927f5829b7d5"
        ],
        [
            "exists (row_mx (pinvmx A) (cokermx A)); rewrite mul_row_col.",
            "VernacExtend",
            "97eae54ef9242b267799e0f39fc7641ab2da8b83"
        ],
        [
            "rewrite -{2}[A]mulmx_ebase -!mulmxA mulKmx // -mulmxDr !mulmxA.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "by rewrite pid_mx_id ?copid_mx_id // -mulmxDl addrC subrK mul1mx mulVmx.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma sub_capmx_gen m1 m2 m3 n (A : 'M_(m1, n)) (B : 'M_(m2, n)) (C : 'M_(m3, n)) : (A <= capmx_gen B C)%MS = (A <= B)%MS && (A <= C)%MS.",
            "VernacStartTheoremProof",
            "650cbc654ab014d20d7d4a3909e991300f91630b"
        ],
        [
            "apply/idP/andP=> [sAI | [/submxP[B' ->{A}] /submxP[C' eqBC']]].",
            "VernacExtend",
            "4bd6fa79b17bcd2bfb7af091fb325367a20385d6"
        ],
        [
            "rewrite !(submx_trans sAI) ?submxMl // /capmx_gen.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "have:= mulmx_ker (col_mx B C); set K := kermx _.",
            "VernacExtend",
            "81881a093b2294c76be3b432fbe83612064d7bc9"
        ],
        [
            "rewrite -{1}[K]hsubmxK mul_row_col; move/(canRL (addrK _))->.",
            "VernacExtend",
            "9d45b3f5079bd11fa9301fef8a859fbbb0c29729"
        ],
        [
            "by rewrite add0r -mulNmx submxMl.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "have: (row_mx B' (- C') <= kermx (col_mx B C))%MS.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "by apply/sub_kermxP; rewrite mul_row_col eqBC' mulNmx subrr.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "case/submxP=> D; rewrite -[kermx _]hsubmxK mul_mx_row.",
            "VernacExtend",
            "90a2acb29b7a5304b0ab6ba5269c420638ddef63"
        ],
        [
            "by case/eq_row_mx=> -> _; rewrite -mulmxA submxMl.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Let capmx_witnessP m n (A : 'M_(m, n)) : equivmx A (qidmx A) (capmx_witness A).",
            "VernacDefinition",
            "87f09c30466ecfb588d951b9b42d22afcbde13dd"
        ],
        [
            "rewrite /equivmx qidmx_eq1 /qidmx /capmx_witness.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "rewrite -sub1mx; case s1A: (1%:M <= A)%MS => /=; last first.",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "rewrite !genmxE submx_refl /= -negb_add; apply: contra {s1A}(negbT s1A).",
            "VernacExtend",
            "634a7639ed2fb7caf62757f84400927f5829b7d5"
        ],
        [
            "case: eqP => [<- _| _]; first by rewrite genmxE.",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "by case: eqP A => //= -> A; move/eqP->; rewrite pid_mx_1.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "case: (m =P n) => [-> | ne_mn] in A s1A *.",
            "VernacExtend",
            "e00fff71ff314c991514fc71c41a3556702e444a"
        ],
        [
            "by rewrite conform_mx_id submx_refl pid_mx_1 eqxx.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "by rewrite nonconform_mx ?submx1 ?s1A ?eqxx //; case: eqP.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Let capmx_normP m n (A : 'M_(m, n)) : equivmx_spec A (qidmx A) (capmx_norm A).",
            "VernacDefinition",
            "9618c2e63455a666e9d5ac5637a17445380f8b0e"
        ],
        [
            "by case/andP: (chooseP (capmx_witnessP A)) => /eqmxP defN /eqP.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Let capmx_norm_eq m1 m2 n (A : 'M_(m1, n)) (B : 'M_(m2, n)) : qidmx A = qidmx B -> (A == B)%MS -> capmx_norm A = capmx_norm B.",
            "VernacDefinition",
            "5327d88d5d5eb9f886cfa91ef9dcb67dd5b5bfa1"
        ],
        [
            "move=> eqABid /eqmxP eqAB.",
            "VernacExtend",
            "b1b2cb7a3a617cba67460b4eca1f04de3c1cc716"
        ],
        [
            "have{eqABid eqAB} eqAB: equivmx A (qidmx A) =1 equivmx B (qidmx B).",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "by move=> C; rewrite /equivmx eqABid !eqAB.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "rewrite {1}/capmx_norm (eq_choose eqAB).",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "by apply: choose_id; first rewrite -eqAB; apply: capmx_witnessP.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Let capmx_nopP m n (A : 'M_(m, n)) : equivmx_spec A (qidmx A) (capmx_nop A).",
            "VernacDefinition",
            "5837242a2fdc81494918569b241d65eb0692ff40"
        ],
        [
            "rewrite /capmx_nop; case: (eqVneq m n) => [-> | ne_mn] in A *.",
            "VernacExtend",
            "712d339e99ee17eb7d5033e19ac614eb3ca6b532"
        ],
        [
            "by rewrite conform_mx_id.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "by rewrite nonconform_mx ?ne_mn //; apply: capmx_normP.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Let sub_qidmx m1 m2 n (A : 'M_(m1, n)) (B : 'M_(m2, n)) : qidmx B -> (A <= B)%MS.",
            "VernacDefinition",
            "7114e0024bbf3ee22ac315577785fb8d2fff6dc8"
        ],
        [
            "rewrite /qidmx => idB; apply: {A}submx_trans (submx1 A) _.",
            "VernacExtend",
            "2855640502da0a3b2cfdfcd02ea9662c049d9a24"
        ],
        [
            "by case: eqP B idB => [-> _ /eqP-> | _ B]; rewrite (=^~ sub1mx, pid_mx_1).",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Let qidmx_cap m1 m2 n (A : 'M_(m1, n)) (B : 'M_(m2, n)) : qidmx (A :&: B)%MS = qidmx A && qidmx B.",
            "VernacDefinition",
            "cb0f998d05875938a848bb7c060df9466b5f3207"
        ],
        [
            "rewrite unlock -sub1mx.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "case idA: (qidmx A); case idB: (qidmx B); try by rewrite capmx_nopP.",
            "VernacExtend",
            "2906658ba5c272b473591a601bf1dd046b109346"
        ],
        [
            "case s1B: (_ <= B)%MS; first by rewrite capmx_normP.",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "apply/idP=> /(sub_qidmx 1%:M).",
            "VernacExtend",
            "4bd6fa79b17bcd2bfb7af091fb325367a20385d6"
        ],
        [
            "by rewrite capmx_normP sub_capmx_gen s1B andbF.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Let capmx_eq_norm m1 m2 n (A : 'M_(m1, n)) (B : 'M_(m2, n)) : qidmx A = qidmx B -> (A :&: B)%MS = capmx_norm (A :&: B)%MS.",
            "VernacDefinition",
            "de2ec7406f38b34fca4b9d5df3c37ef50d512f4b"
        ],
        [
            "move=> eqABid; rewrite unlock -sub1mx {}eqABid.",
            "VernacExtend",
            "057edeb0967475c7ea5e8c98c449ddc5613eddc1"
        ],
        [
            "have norm_id m (C : 'M_(m, n)) (N := capmx_norm C) : capmx_norm N = N.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "by apply: capmx_norm_eq; rewrite ?capmx_normP ?andbb.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "case idB: (qidmx B); last by case: ifP; rewrite norm_id.",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "rewrite /capmx_nop; case: (eqVneq m2 n) => [-> | neqm2n] in B idB *.",
            "VernacExtend",
            "712d339e99ee17eb7d5033e19ac614eb3ca6b532"
        ],
        [
            "have idN := idB; rewrite -{1}capmx_normP !qidmx_eq1 in idN idB.",
            "VernacExtend",
            "aa9d5fbc682ed874cd64b2543ca6c859b978e924"
        ],
        [
            "by rewrite conform_mx_id (eqP idN) (eqP idB).",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "by rewrite nonconform_mx ?neqm2n ?norm_id.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma capmxE m1 m2 n (A : 'M_(m1, n)) (B : 'M_(m2, n)) : (A :&: B :=: capmx_gen A B)%MS.",
            "VernacStartTheoremProof",
            "f19da5f7ce1b6cc4ada5a5da08627aefdd1e6208"
        ],
        [
            "rewrite unlock -sub1mx; apply/eqmxP.",
            "VernacExtend",
            "634a7639ed2fb7caf62757f84400927f5829b7d5"
        ],
        [
            "have:= submx_refl (capmx_gen A B); rewrite !sub_capmx_gen => /andP[sIA sIB].",
            "VernacExtend",
            "8431fc4d2460f7908baa11892c1b26797a3f17b8"
        ],
        [
            "case idA: (qidmx A); first by rewrite !capmx_nopP submx_refl sub_qidmx.",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "case idB: (qidmx B); first by rewrite !capmx_nopP submx_refl sub_qidmx.",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "case s1B: (1%:M <= B)%MS; rewrite !capmx_normP ?sub_capmx_gen sIA ?sIB //=.",
            "VernacExtend",
            "90a2acb29b7a5304b0ab6ba5269c420638ddef63"
        ],
        [
            "by rewrite submx_refl (submx_trans (submx1 _)).",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma capmxSl m1 m2 n (A : 'M_(m1, n)) (B : 'M_(m2, n)) : (A :&: B <= A)%MS.",
            "VernacStartTheoremProof",
            "3616abddcba388c5a61645b203b8e69ecdc39aac"
        ],
        [
            "by rewrite capmxE submxMl.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma sub_capmx m m1 m2 n (A : 'M_(m, n)) (B : 'M_(m1, n)) (C : 'M_(m2, n)) : (A <= B :&: C)%MS = (A <= B)%MS && (A <= C)%MS.",
            "VernacStartTheoremProof",
            "aab795e8e04c3643709122de8ecffe38ae23a20e"
        ],
        [
            "by rewrite capmxE sub_capmx_gen.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma capmxC m1 m2 n (A : 'M_(m1, n)) (B : 'M_(m2, n)) : (A :&: B = B :&: A)%MS.",
            "VernacStartTheoremProof",
            "7107be60bcff33de27b6d5d72fc2eceea2bc8dd9"
        ],
        [
            "have [eqAB|] := eqVneq (qidmx A) (qidmx B).",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "rewrite (capmx_eq_norm eqAB) (capmx_eq_norm (esym eqAB)).",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "apply: capmx_norm_eq; first by rewrite !qidmx_cap andbC.",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "by apply/andP; split; rewrite !sub_capmx andbC -sub_capmx.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "by rewrite negb_eqb !unlock => /addbP <-; case: (qidmx A).",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma capmxSr m1 m2 n (A : 'M_(m1, n)) (B : 'M_(m2, n)) : (A :&: B <= B)%MS.",
            "VernacStartTheoremProof",
            "369b1633acd2189275c1c11db0acb3f69d0be4ae"
        ],
        [
            "by rewrite capmxC capmxSl.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma capmx_idPr n m1 m2 (A : 'M_(m1, n)) (B : 'M_(m2, n)) : reflect (A :&: B :=: B)%MS (B <= A)%MS.",
            "VernacStartTheoremProof",
            "e7913ddfe49dcd468a691178cda6e2449c75ef1e"
        ],
        [
            "have:= @eqmxP _ _ _ (A :&: B)%MS B.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "by rewrite capmxSr sub_capmx submx_refl !andbT.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma capmx_idPl n m1 m2 (A : 'M_(m1, n)) (B : 'M_(m2, n)) : reflect (A :&: B :=: A)%MS (A <= B)%MS.",
            "VernacStartTheoremProof",
            "a2e1b9d149ec8aae8a7084c1e159e92ec75964be"
        ],
        [
            "by rewrite capmxC; apply: capmx_idPr.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma capmxS m1 m2 m3 m4 n (A : 'M_(m1, n)) (B : 'M_(m2, n)) (C : 'M_(m3, n)) (D : 'M_(m4, n)) : (A <= C -> B <= D -> A :&: B <= C :&: D)%MS.",
            "VernacStartTheoremProof",
            "b8f8e0299758c95f27ca20a7a22d03f0db889657"
        ],
        [
            "by move=> sAC sBD; rewrite sub_capmx {1}capmxC !(submx_trans (capmxSr _ _)).",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma cap_eqmx m1 m2 m3 m4 n (A : 'M_(m1, n)) (B : 'M_(m2, n)) (C : 'M_(m3, n)) (D : 'M_(m4, n)) : (A :=: C -> B :=: D -> A :&: B :=: C :&: D)%MS.",
            "VernacStartTheoremProof",
            "286128cbfac077cca047cf0eff8ab4b89472f59a"
        ],
        [
            "by move=> eqAC eqBD; apply/eqmxP; rewrite !capmxS ?eqAC ?eqBD.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma capmxMr m1 m2 n p (A : 'M_(m1, n)) (B : 'M_(m2, n)) (C : 'M_(n, p)) : ((A :&: B) *m C <= A *m C :&: B *m C)%MS.",
            "VernacStartTheoremProof",
            "ea20e9f7e25d399e3a194cacbb5fae238b017367"
        ],
        [
            "by rewrite sub_capmx !submxMr ?capmxSl ?capmxSr.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma cap0mx m1 m2 n (A : 'M_(m2, n)) : ((0 : 'M_(m1, n)) :&: A)%MS = 0.",
            "VernacStartTheoremProof",
            "72ec6de3e50e09c541e2d27a7c651707ab45df31"
        ],
        [
            "exact: submx0null (capmxSl _ _).",
            "VernacExtend",
            "ce637ff86bafca5d8359473e8c02af644dcbdc43"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma capmx0 m1 m2 n (A : 'M_(m1, n)) : (A :&: (0 : 'M_(m2, n)))%MS = 0.",
            "VernacStartTheoremProof",
            "6c2ec1aa56cde9ff0bc4f1e9aefc450e97bc5d44"
        ],
        [
            "exact: submx0null (capmxSr _ _).",
            "VernacExtend",
            "ce637ff86bafca5d8359473e8c02af644dcbdc43"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma capmxT m1 m2 n (A : 'M_(m1, n)) (B : 'M_(m2, n)) : row_full B -> (A :&: B :=: A)%MS.",
            "VernacStartTheoremProof",
            "5e840c1c5afa9a5d43eeb967e47a50a50447917e"
        ],
        [
            "rewrite -sub1mx => s1B; apply/eqmxP.",
            "VernacExtend",
            "2855640502da0a3b2cfdfcd02ea9662c049d9a24"
        ],
        [
            "by rewrite capmxSl sub_capmx submx_refl (submx_trans (submx1 A)).",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma capTmx m1 m2 n (A : 'M_(m1, n)) (B : 'M_(m2, n)) : row_full A -> (A :&: B :=: B)%MS.",
            "VernacStartTheoremProof",
            "1f17e3fefdbaaa4d81cc759e82d87348c41a8edd"
        ],
        [
            "by move=> Afull; apply/eqmxP; rewrite capmxC !capmxT ?andbb.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Let capmx_nop_id n (A : 'M_n) : capmx_nop A = A.",
            "VernacDefinition",
            "e6a5e236fc7f9b862f9ab7e553c40d737dc35433"
        ],
        [
            "by rewrite /capmx_nop conform_mx_id.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma cap1mx n (A : 'M_n) : (1%:M :&: A = A)%MS.",
            "VernacStartTheoremProof",
            "ae192385da56303e70b2d0376255a72be056ccad"
        ],
        [
            "by rewrite unlock qidmx_eq1 eqxx capmx_nop_id.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma capmx1 n (A : 'M_n) : (A :&: 1%:M = A)%MS.",
            "VernacStartTheoremProof",
            "5d8810e33b01ca50dad556b160b586ccaf6f0383"
        ],
        [
            "by rewrite capmxC cap1mx.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma genmx_cap m1 m2 n (A : 'M_(m1, n)) (B : 'M_(m2, n)) : <<A :&: B>>%MS = (<<A>> :&: <<B>>)%MS.",
            "VernacStartTheoremProof",
            "cf7f2036cedb40b4a20a8394dbc1094e82b803f7"
        ],
        [
            "rewrite -(eq_genmx (cap_eqmx (genmxE A) (genmxE B))).",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "case idAB: (qidmx <<A>> || qidmx <<B>>)%MS.",
            "VernacExtend",
            "e00fff71ff314c991514fc71c41a3556702e444a"
        ],
        [
            "rewrite [@capmx]unlock !capmx_nop_id !(fun_if (@genmx _ _)) !genmx_id.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "by case: (qidmx _) idAB => //= ->.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "case idA: (qidmx _) idAB => //= idB; rewrite {2}capmx_eq_norm ?idA //.",
            "VernacExtend",
            "90a2acb29b7a5304b0ab6ba5269c420638ddef63"
        ],
        [
            "set C := (_ :&: _)%MS; have eq_idC: row_full C = qidmx C.",
            "VernacExtend",
            "5a669f4ad2118b005921530a069ac8f03fd7f32b"
        ],
        [
            "rewrite qidmx_cap idA -sub1mx sub_capmx genmxE; apply/andP=> [[s1A]].",
            "VernacExtend",
            "634a7639ed2fb7caf62757f84400927f5829b7d5"
        ],
        [
            "by case/idP: idA; rewrite qidmx_eq1 -genmx1 (sameP eqP genmxP) submx1.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "rewrite unlock /capmx_norm eq_idC.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "by apply: choose_id (capmx_witnessP _); rewrite -eq_idC genmx_witnessP.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma capmxA m1 m2 m3 n (A : 'M_(m1, n)) (B : 'M_(m2, n)) (C : 'M_(m3, n)) : (A :&: (B :&: C) = A :&: B :&: C)%MS.",
            "VernacStartTheoremProof",
            "c9ad7d75339693f4b39864647b79d1307bb93ca0"
        ],
        [
            "rewrite (capmxC A B) capmxC; wlog idA: m1 m3 A C / qidmx A.",
            "VernacExtend",
            "2a14a7fa61474f74a894f5848d62940f4487cef5"
        ],
        [
            "move=> IH; case idA: (qidmx A); first exact: IH.",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "case idC: (qidmx C); first by rewrite -IH.",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "rewrite (@capmx_eq_norm n m3) ?qidmx_cap ?idA ?idC ?andbF //.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "rewrite capmx_eq_norm ?qidmx_cap ?idA ?idC ?andbF //.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "apply: capmx_norm_eq; first by rewrite !qidmx_cap andbAC.",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "by apply/andP; split; rewrite !sub_capmx andbAC -!sub_capmx.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "rewrite -!(capmxC A) [in @capmx m1]unlock idA capmx_nop_id.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "have [eqBC |] :=eqVneq (qidmx B) (qidmx C).",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "rewrite (@capmx_eq_norm n) ?capmx_nopP // capmx_eq_norm //.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "by apply: capmx_norm_eq; rewrite ?qidmx_cap ?capmxS ?capmx_nopP.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "by rewrite !unlock capmx_nopP capmx_nop_id; do 2?case: (qidmx _) => //.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Canonical capmx_monoid n := Monoid.Law (@capmxA n n n n) (@cap1mx n) (@capmx1 n).",
            "VernacDefinition",
            "55954e7595aa949228f7a62d051c2238c29410f8"
        ],
        [
            "Canonical capmx_comoid n := Monoid.ComLaw (@capmxC n n n).",
            "VernacDefinition",
            "4ed26aa223337ee88ce25ecf1b9e69ebf8221bbc"
        ],
        [
            "Lemma bigcapmx_inf i0 P m n (A_ : I -> 'M_n) (B : 'M_(m, n)) : P i0 -> (A_ i0 <= B -> \\bigcap_(i | P i) A_ i <= B)%MS.",
            "VernacStartTheoremProof",
            "1fc51dc9ca480a37467b388dadbb9a94a74a9349"
        ],
        [
            "by move=> Pi0; apply: submx_trans; rewrite (bigD1 i0) // capmxSl.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma sub_bigcapmxP P m n (A : 'M_(m, n)) (B_ : I -> 'M_n) : reflect (forall i, P i -> A <= B_ i)%MS (A <= \\bigcap_(i | P i) B_ i)%MS.",
            "VernacStartTheoremProof",
            "81be692de651cdcc3aa2b7974038f2f21b53fae8"
        ],
        [
            "apply: (iffP idP) => [sAB i Pi | sAB].",
            "VernacExtend",
            "4bd6fa79b17bcd2bfb7af091fb325367a20385d6"
        ],
        [
            "by apply: (submx_trans sAB); rewrite (bigcapmx_inf Pi).",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "by elim/big_rec: _ => [|i Pi C sAC]; rewrite ?submx1 // sub_capmx sAB.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma genmx_bigcap P n (A_ : I -> 'M_n) : (<<\\bigcap_(i | P i) A_ i>> = \\bigcap_(i | P i) <<A_ i>>)%MS.",
            "VernacStartTheoremProof",
            "04096ae04abf6f5b6a81747f322b1051394ec24b"
        ],
        [
            "exact: (big_morph _ (@genmx_cap n n n) (@genmx1 n)).",
            "VernacExtend",
            "ce637ff86bafca5d8359473e8c02af644dcbdc43"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma matrix_modl m1 m2 m3 n (A : 'M_(m1, n)) (B : 'M_(m2, n)) (C : 'M_(m3, n)) : (A <= C -> A + (B :&: C) :=: (A + B) :&: C)%MS.",
            "VernacStartTheoremProof",
            "f579b989cdcd6a550892345ce169fc57b3cb876d"
        ],
        [
            "move=> sAC; set D := ((A + B) :&: C)%MS; apply/eqmxP.",
            "VernacExtend",
            "970b9c2037ffb4f7bcf7f1168364d12b25042ba5"
        ],
        [
            "rewrite sub_capmx addsmxS ?capmxSl // addsmx_sub sAC capmxSr /=.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "have: (D <= B + A)%MS by rewrite addsmxC capmxSl.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "case/sub_addsmxP=> u defD; rewrite defD addrC addmx_sub_adds ?submxMl //.",
            "VernacExtend",
            "90a2acb29b7a5304b0ab6ba5269c420638ddef63"
        ],
        [
            "rewrite sub_capmx submxMl -[_ *m B](addrK (u.2 *m A)) -defD.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "by rewrite addmx_sub ?capmxSr // eqmx_opp mulmx_sub.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma matrix_modr m1 m2 m3 n (A : 'M_(m1, n)) (B : 'M_(m2, n)) (C : 'M_(m3, n)) : (C <= A -> (A :&: B) + C :=: A :&: (B + C))%MS.",
            "VernacStartTheoremProof",
            "e52f84d95b2c26dce97afb5bff0d52fd84898e33"
        ],
        [
            "by rewrite !(capmxC A) -!(addsmxC C); apply: matrix_modl.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma capmx_compl m n (A : 'M_(m, n)) : (A :&: A^C)%MS = 0.",
            "VernacStartTheoremProof",
            "408240b24ec11265463c1624c55cdf145da55516"
        ],
        [
            "set D := (A :&: A^C)%MS; have: (D <= D)%MS by [].",
            "VernacExtend",
            "5a669f4ad2118b005921530a069ac8f03fd7f32b"
        ],
        [
            "rewrite sub_capmx andbC => /andP[/submxP[B defB]].",
            "VernacExtend",
            "3c42b53d0efc26db114b00541ac5e7fcb29e6aeb"
        ],
        [
            "rewrite submxE => /eqP; rewrite defB -!mulmxA mulKVmx ?copid_mx_id //.",
            "VernacExtend",
            "82d53976234637e3f0907eb36cddf61d028c6306"
        ],
        [
            "by rewrite mulmxA => ->; rewrite mul0mx.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma mxrank_mul_ker m n p (A : 'M_(m, n)) (B : 'M_(n, p)) : (\\rank (A *m B) + \\rank (A :&: kermx B))%N = \\rank A.",
            "VernacStartTheoremProof",
            "94ec6ccaa264c20ec55ee895cba0851cc148dd3c"
        ],
        [
            "apply/eqP; set K := kermx B; set C := (A :&: K)%MS.",
            "VernacExtend",
            "696b1aefa501a7b8014abfa315ab937c7db167de"
        ],
        [
            "rewrite -(eqmxMr B (eq_row_base A)); set K' := _ *m B.",
            "VernacExtend",
            "c1f58f36c5711f022b4a54717f37c2782f34a159"
        ],
        [
            "rewrite -{2}(subnKC (rank_leq_row K')) -mxrank_ker eqn_add2l.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "rewrite -(mxrankMfree _ (row_base_free A)) mxrank_leqif_sup.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "rewrite sub_capmx -(eq_row_base A) submxMl.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "by apply/sub_kermxP; rewrite -mulmxA mulmx_ker.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "have /submxP[C' defC]: (C <= row_base A)%MS by rewrite eq_row_base capmxSl.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "rewrite defC submxMr //; apply/sub_kermxP.",
            "VernacExtend",
            "634a7639ed2fb7caf62757f84400927f5829b7d5"
        ],
        [
            "by rewrite mulmxA -defC; apply/sub_kermxP; rewrite capmxSr.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma mxrank_injP m n p (A : 'M_(m, n)) (f : 'M_(n, p)) : reflect (\\rank (A *m f) = \\rank A) ((A :&: kermx f)%MS == 0).",
            "VernacStartTheoremProof",
            "68a3d280ae6c99654a2f2a7ee8a4ff1ec7582dfb"
        ],
        [
            "rewrite -mxrank_eq0 -(eqn_add2l (\\rank (A *m f))).",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "by rewrite mxrank_mul_ker addn0 eq_sym; apply: eqP.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma mxrank_disjoint_sum m1 m2 n (A : 'M_(m1, n)) (B : 'M_(m2, n)) : (A :&: B)%MS = 0 -> \\rank (A + B)%MS = (\\rank A + \\rank B)%N.",
            "VernacStartTheoremProof",
            "bd8bc527d9587050abe14aa0ecaf201856e1bcce"
        ],
        [
            "move=> AB0; pose Ar := row_base A; pose Br := row_base B.",
            "VernacExtend",
            "81927515fc3ecfba885b46cf7f9013852021d404"
        ],
        [
            "have [Afree Bfree]: row_free Ar /\\ row_free Br by rewrite !row_base_free.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "have: (Ar :&: Br <= A :&: B)%MS by rewrite capmxS ?eq_row_base.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "rewrite {}AB0 submx0 -mxrank_eq0 capmxE mxrankMfree //.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "set Cr := col_mx Ar Br; set Crl := lsubmx _; rewrite mxrank_eq0 => /eqP Crl0.",
            "VernacExtend",
            "a2f08e669f79fa0b4159cbbd568b5a0f40eb3ee7"
        ],
        [
            "rewrite -(adds_eqmx (eq_row_base _) (eq_row_base _)) addsmxE -/Cr.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "suffices K0: kermx Cr = 0.",
            "VernacExtend",
            "290ed488b5562e885aa2cac56f3a69b4faa0eaa6"
        ],
        [
            "by apply/eqP; rewrite eqn_leq rank_leq_row -subn_eq0 -mxrank_ker K0 mxrank0.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "move/eqP: (mulmx_ker Cr); rewrite -[kermx Cr]hsubmxK mul_row_col -/Crl Crl0.",
            "VernacExtend",
            "057edeb0967475c7ea5e8c98c449ddc5613eddc1"
        ],
        [
            "rewrite mul0mx add0r -mxrank_eq0 mxrankMfree // mxrank_eq0 => /eqP->.",
            "VernacExtend",
            "3c42b53d0efc26db114b00541ac5e7fcb29e6aeb"
        ],
        [
            "exact: row_mx0.",
            "VernacExtend",
            "ce637ff86bafca5d8359473e8c02af644dcbdc43"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma diffmxE m1 m2 n (A : 'M_(m1, n)) (B : 'M_(m2, n)) : (A :\\: B :=: A :&: (capmx_gen A B)^C)%MS.",
            "VernacStartTheoremProof",
            "28bad6e9eeccef9364910778f9cde77d21ff363a"
        ],
        [
            "by rewrite unlock; apply/eqmxP; rewrite !genmxE !capmxE andbb.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma genmx_diff m1 m2 n (A : 'M_(m1, n)) (B : 'M_(m2, n)) : (<<A :\\: B>> = A :\\: B)%MS.",
            "VernacStartTheoremProof",
            "ad5047e10853613c34f5c03c13a62fc8ff555074"
        ],
        [
            "by rewrite [@diffmx]unlock genmx_id.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma diffmxSl m1 m2 n (A : 'M_(m1, n)) (B : 'M_(m2, n)) : (A :\\: B <= A)%MS.",
            "VernacStartTheoremProof",
            "144eb38f3b660471887207fbfad350e8f98d1366"
        ],
        [
            "by rewrite diffmxE capmxSl.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma capmx_diff m1 m2 n (A : 'M_(m1, n)) (B : 'M_(m2, n)) : ((A :\\: B) :&: B)%MS = 0.",
            "VernacStartTheoremProof",
            "875b1007d24a1a76f94663d63574352f9e7c9f3c"
        ],
        [
            "apply/eqP; pose C := capmx_gen A B; rewrite -submx0 -(capmx_compl C).",
            "VernacExtend",
            "1d56ea0c5dee74815623eb92efea2fa677be18c5"
        ],
        [
            "by rewrite sub_capmx -capmxE sub_capmx andbAC -sub_capmx -diffmxE -sub_capmx.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma addsmx_diff_cap_eq m1 m2 n (A : 'M_(m1, n)) (B : 'M_(m2, n)) : (A :\\: B + A :&: B :=: A)%MS.",
            "VernacStartTheoremProof",
            "9b051f35b0a181f4c857162c1073bca069bcb001"
        ],
        [
            "apply/eqmxP; rewrite addsmx_sub capmxSl diffmxSl /=.",
            "VernacExtend",
            "56c014161b39aecfb3c54301c2409dba4e8e1857"
        ],
        [
            "set C := (A :\\: B)%MS; set D := capmx_gen A B.",
            "VernacExtend",
            "7405ffc63057f1493a790d3f39e251cc5fefe81f"
        ],
        [
            "suffices sACD: (A <= C + D)%MS.",
            "VernacExtend",
            "290ed488b5562e885aa2cac56f3a69b4faa0eaa6"
        ],
        [
            "by rewrite (submx_trans sACD) ?addsmxS ?capmxE.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "have:= addsmx_compl_full D; rewrite /row_full addsmxE.",
            "VernacExtend",
            "aa9d5fbc682ed874cd64b2543ca6c859b978e924"
        ],
        [
            "case/row_fullP=> U /(congr1 (mulmx A)); rewrite mulmx1.",
            "VernacExtend",
            "90a2acb29b7a5304b0ab6ba5269c420638ddef63"
        ],
        [
            "rewrite -[U]hsubmxK mul_row_col mulmxDr addrC 2!mulmxA.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "set V := _ *m _ => defA; rewrite -defA; move/(canRL (addrK _)): defA => defV.",
            "VernacExtend",
            "575d26f3e28532d1d961d47d4859bd228fbb6e16"
        ],
        [
            "suffices /submxP[W ->]: (V <= C)%MS by rewrite -mul_row_col addsmxE submxMl.",
            "VernacExtend",
            "290ed488b5562e885aa2cac56f3a69b4faa0eaa6"
        ],
        [
            "rewrite diffmxE sub_capmx {1}defV -mulNmx addmx_sub 1?mulmx_sub //.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "by rewrite -capmxE capmxSl.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma mxrank_cap_compl m1 m2 n (A : 'M_(m1, n)) (B : 'M_(m2, n)) : (\\rank (A :&: B) + \\rank (A :\\: B))%N = \\rank A.",
            "VernacStartTheoremProof",
            "5e459d6d5caa39eac20545bbcac5dabd66e9bc3f"
        ],
        [
            "rewrite addnC -mxrank_disjoint_sum ?addsmx_diff_cap_eq //.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "by rewrite (capmxC A) capmxA capmx_diff cap0mx.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma mxrank_sum_cap m1 m2 n (A : 'M_(m1, n)) (B : 'M_(m2, n)) : (\\rank (A + B) + \\rank (A :&: B) = \\rank A + \\rank B)%N.",
            "VernacStartTheoremProof",
            "c3df1447809defee72b8fba1df8566c1c2b62243"
        ],
        [
            "set C := (A :&: B)%MS; set D := (A :\\: B)%MS.",
            "VernacExtend",
            "7405ffc63057f1493a790d3f39e251cc5fefe81f"
        ],
        [
            "have rDB: \\rank (A + B)%MS = \\rank (D + B)%MS.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "apply/eqP; rewrite mxrank_leqif_sup; first by rewrite addsmxS ?diffmxSl.",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "by rewrite addsmx_sub addsmxSr -(addsmx_diff_cap_eq A B) addsmxS ?capmxSr.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "rewrite {1}rDB mxrank_disjoint_sum ?capmx_diff //.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "by rewrite addnC addnA mxrank_cap_compl.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma mxrank_adds_leqif m1 m2 n (A : 'M_(m1, n)) (B : 'M_(m2, n)) : \\rank (A + B) <= \\rank A + \\rank B ?= iff (A :&: B <= (0 : 'M_n))%MS.",
            "VernacStartTheoremProof",
            "bb3b88c11ef303e4b77c156eeccf5c1d36b3c1cd"
        ],
        [
            "rewrite -mxrank_sum_cap; split; first exact: leq_addr.",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "by rewrite addnC (@eqn_add2r _ 0) eq_sym mxrank_eq0 -submx0.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma proj_mx_sub m n U V (W : 'M_(m, n)) : (W *m proj_mx U V <= U)%MS.",
            "VernacStartTheoremProof",
            "6273cd7528f3fcab53abb09f7017462f81d7e28c"
        ],
        [
            "by rewrite !mulmx_sub // -addsmxE addsmx0.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma proj_mx_compl_sub m n U V (W : 'M_(m, n)) : (W <= U + V -> W - W *m proj_mx U V <= V)%MS.",
            "VernacStartTheoremProof",
            "344bfff0b875ec796260b58b4cb9725e1e49e571"
        ],
        [
            "rewrite addsmxE => sWUV; rewrite mulmxA -{1}(mulmxKpV sWUV) -mulmxBr.",
            "VernacExtend",
            "82d53976234637e3f0907eb36cddf61d028c6306"
        ],
        [
            "by rewrite mulmx_sub // opp_col_mx add_col_mx subrr subr0 -addsmxE adds0mx.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma proj_mx_id m n U V (W : 'M_(m, n)) : (U :&: V = 0)%MS -> (W <= U)%MS -> W *m proj_mx U V = W.",
            "VernacStartTheoremProof",
            "48db0ddd904ebe72ab99aeab2d57c9814fcdeda9"
        ],
        [
            "move=> dxUV sWU; apply/eqP; rewrite -subr_eq0 -submx0 -dxUV.",
            "VernacExtend",
            "f7feb259d6220ca40e8a86b90bd06f137aa140ac"
        ],
        [
            "rewrite sub_capmx addmx_sub ?eqmx_opp ?proj_mx_sub //= -eqmx_opp opprB.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "by rewrite proj_mx_compl_sub // (submx_trans sWU) ?addsmxSl.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma proj_mx_0 m n U V (W : 'M_(m, n)) : (U :&: V = 0)%MS -> (W <= V)%MS -> W *m proj_mx U V = 0.",
            "VernacStartTheoremProof",
            "36101b4060d2e583b4b56c829e4f2d4b7e7b4a73"
        ],
        [
            "move=> dxUV sWV; apply/eqP; rewrite -submx0 -dxUV.",
            "VernacExtend",
            "f7feb259d6220ca40e8a86b90bd06f137aa140ac"
        ],
        [
            "rewrite sub_capmx proj_mx_sub /= -[_ *m _](subrK W) addmx_sub // -eqmx_opp.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "by rewrite opprB proj_mx_compl_sub // (submx_trans sWV) ?addsmxSr.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma add_proj_mx m n U V (W : 'M_(m, n)) : (U :&: V = 0)%MS -> (W <= U + V)%MS -> W *m proj_mx U V + W *m proj_mx V U = W.",
            "VernacStartTheoremProof",
            "84a7f26b94d51446c84942f5ee4f397b1066203f"
        ],
        [
            "move=> dxUV sWUV; apply/eqP; rewrite -subr_eq0 -submx0 -dxUV.",
            "VernacExtend",
            "f7feb259d6220ca40e8a86b90bd06f137aa140ac"
        ],
        [
            "rewrite -addrA sub_capmx {2}addrCA -!(opprB W).",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "by rewrite !{1}addmx_sub ?proj_mx_sub ?eqmx_opp ?proj_mx_compl_sub // addsmxC.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma proj_mx_proj n (U V : 'M_n) : let P := proj_mx U V in (U :&: V = 0)%MS -> P *m P = P.",
            "VernacStartTheoremProof",
            "ef7e67a093ba1e84d596d51428dc1fdbf9e50510"
        ],
        [
            "by move=> P dxUV; rewrite -{-2}[P]mul1mx proj_mx_id ?proj_mx_sub.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma complete_unitmx m n (U : 'M_(m, n)) (f : 'M_n) : \\rank (U *m f) = \\rank U -> {g : 'M_n | g \\in unitmx & U *m f = U *m g}.",
            "VernacStartTheoremProof",
            "26d0a6680d724b642073237af2468c6e30aaf0c0"
        ],
        [
            "move=> injfU; pose V := <<U>>%MS; pose W := V *m f.",
            "VernacExtend",
            "81927515fc3ecfba885b46cf7f9013852021d404"
        ],
        [
            "pose g := proj_mx V (V^C)%MS *m f + cokermx V *m row_ebase W.",
            "VernacExtend",
            "3c5f04de94609049d978298aa02ff35fb35ea7c7"
        ],
        [
            "have defW: V *m g = W.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "rewrite mulmxDr mulmxA proj_mx_id ?genmxE ?capmx_compl //.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "by rewrite mulmxA mulmx_coker mul0mx addr0.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "exists g; last first.",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "have /submxP[u ->]: (U <= V)%MS by rewrite genmxE.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "by rewrite -!mulmxA defW.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "rewrite -row_full_unit -sub1mx; apply/submxP.",
            "VernacExtend",
            "634a7639ed2fb7caf62757f84400927f5829b7d5"
        ],
        [
            "have: (invmx (col_ebase W) *m W <= V *m g)%MS by rewrite defW submxMl.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "case/submxP=> v def_v; exists (invmx (row_ebase W) *m (v *m V + (V^C)%MS)).",
            "VernacExtend",
            "e60a15b0bbbdbbea9f61a964b753767b3c6a39af"
        ],
        [
            "rewrite -mulmxA mulmxDl -mulmxA -def_v -{3}[W]mulmx_ebase -mulmxA.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "rewrite mulKmx ?col_ebase_unit // [_ *m g]mulmxDr mulmxA.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "rewrite (proj_mx_0 (capmx_compl _)) // mul0mx add0r 2!mulmxA.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "rewrite mulmxK ?row_ebase_unit // copid_mx_id ?rank_leq_row //.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "rewrite (eqmxMr _ (genmxE U)) injfU genmxE addrC -mulmxDl subrK.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "by rewrite mul1mx mulVmx ?row_ebase_unit.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma eqmxMunitP m n (U V : 'M_(m, n)) : reflect (exists2 P, P \\in unitmx & U = P *m V) (U == V)%MS.",
            "VernacStartTheoremProof",
            "4cf42cbdcadf0ef05abc17f53715d26d35c76a9b"
        ],
        [
            "apply: (iffP eqmxP) => [eqUV | [P Punit ->]]; last first.",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "by apply/eqmxMfull; rewrite row_full_unit.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "have [D defU]: exists D, U = D *m V by apply/submxP; rewrite eqUV.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "have{eqUV} [Pt Pt_unit defUt]: {Pt | Pt \\in unitmx & V^T *m D^T = V^T *m Pt}.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "by apply/complete_unitmx; rewrite -trmx_mul -defU !mxrank_tr eqUV.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "by exists Pt^T; last apply/trmx_inj; rewrite ?unitmx_tr // defU !trmx_mul trmxK.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma eq_rank_unitmx m1 m2 n (U : 'M_(m1, n)) (V : 'M_(m2, n)) : \\rank U = \\rank V -> {f : 'M_n | f \\in unitmx & V :=: U *m f}%MS.",
            "VernacStartTheoremProof",
            "68999abf4412c39d43c9a394e0a3e5c455ae413b"
        ],
        [
            "move=> eqrUV; pose f := invmx (row_ebase <<U>>%MS) *m row_ebase <<V>>%MS.",
            "VernacExtend",
            "fef3c4a8f7fcf70b0824f3cce5fb58f2e0ef07fd"
        ],
        [
            "have defUf: (<<U>> *m f :=: <<V>>)%MS.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "rewrite -[<<U>>%MS]mulmx_ebase mulmxA mulmxK ?row_ebase_unit // -mulmxA.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "rewrite genmxE eqrUV -genmxE -{3}[<<V>>%MS]mulmx_ebase -mulmxA.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "move: (pid_mx _ *m _) => W; apply/eqmxP.",
            "VernacExtend",
            "d6ebf3361f380a12d5c2c9bbb7ea363132c48b36"
        ],
        [
            "by rewrite !eqmxMfull ?andbb // row_full_unit col_ebase_unit.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "have{defUf} defV: (V :=: U *m f)%MS.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "by apply/eqmxP; rewrite -!(eqmxMr f (genmxE U)) !defUf !genmxE andbb.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "have injfU: \\rank (U *m f) = \\rank U by rewrite -defV eqrUV.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "by have [g injg defUg] := complete_unitmx injfU; exists g; rewrite -?defUg.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Section SumExpr.",
            "VernacBeginSection",
            "747769b7917665a44bf45181589e4c14ede3be83"
        ],
        [
            "Inductive mxsum_spec n : forall m, 'M[F]_(m, n) -> nat -> Prop := | TrivialMxsum m A : @mxsum_spec n m A (\\rank A) | ProperMxsum m1 m2 T1 T2 r1 r2 of @mxsum_spec n m1 T1 r1 & @mxsum_spec n m2 T2 r2 : mxsum_spec (T1 + T2)%MS (r1 + r2)%N.",
            "VernacInductive",
            "73593815dfa696a5d56ed2ffc4271b8c15e563fd"
        ],
        [
            "Arguments mxsum_spec {n%N m%N} T%MS r%N.",
            "VernacArguments",
            "bfc837c21a6eb6d9d7132d6e97919497078b2a67"
        ],
        [
            "Structure mxsum_expr m n := Mxsum { mxsum_val :> wrapped 'M_(m, n); mxsum_rank : wrapped nat; _ : mxsum_spec (unwrap mxsum_val) (unwrap mxsum_rank) }.",
            "VernacInductive",
            "db746d1d26e4aa39d8815767c7f4f1924fec0467"
        ],
        [
            "Canonical trivial_mxsum m n A := @Mxsum m n (Wrap A) (Wrap (\\rank A)) (TrivialMxsum A).",
            "VernacDefinition",
            "56f806129958fba55fd9219a47e2ad117a711dc6"
        ],
        [
            "Structure proper_mxsum_expr n := ProperMxsumExpr { proper_mxsum_val :> 'M_n; proper_mxsum_rank : nat; _ : mxsum_spec proper_mxsum_val proper_mxsum_rank }.",
            "VernacInductive",
            "5c1b8a4c460e6a3441698bbde539cc0bdb8aa0c7"
        ],
        [
            "Definition proper_mxsumP n (S : proper_mxsum_expr n) := let: ProperMxsumExpr _ _ termS := S return mxsum_spec S (proper_mxsum_rank S) in termS.",
            "VernacDefinition",
            "73232db1c93b88945013980c9b3a3f88d5e2db04"
        ],
        [
            "Canonical sum_mxsum n (S : proper_mxsum_expr n) := @Mxsum n n (wrap (S : 'M_n)) (wrap (proper_mxsum_rank S)) (proper_mxsumP S).",
            "VernacDefinition",
            "fc4120f4e2899df02b13d2594c326f54b5224974"
        ],
        [
            "Section Binary.",
            "VernacBeginSection",
            "8908223fcd57007ccd5be8ab84562ce4be8ccef9"
        ],
        [
            "Variable (m1 m2 n : nat) (S1 : mxsum_expr m1 n) (S2 : mxsum_expr m2 n).",
            "VernacAssumption",
            "8724c2eab5c94c56030269e0ece243b4f4e3eeb6"
        ],
        [
            "Fact binary_mxsum_proof : mxsum_spec (unwrap S1 + unwrap S2) (unwrap (mxsum_rank S1) + unwrap (mxsum_rank S2)).",
            "VernacStartTheoremProof",
            "55f04ea6f4948358e97197f040ad53ee1d318110"
        ],
        [
            "by case: S1 S2 => [A1 r1 A1P] [A2 r2 A2P]; right.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Canonical binary_mxsum_expr := ProperMxsumExpr binary_mxsum_proof.",
            "VernacDefinition",
            "3476f1a160a09fa6f1ef5295d51fe9694039de1f"
        ],
        [
            "End Binary.",
            "VernacEndSegment",
            "ad4494d99314ec118c96d237505ebf72e4b52437"
        ],
        [
            "Section Nary.",
            "VernacBeginSection",
            "575038350397523abef95ce5c70a1ce5ba69c34d"
        ],
        [
            "Context J (r : seq J) (P : pred J) n (S_ : J -> mxsum_expr n n).",
            "VernacContext",
            "a1a8988a5f15f205820edb61e499140e7963e695"
        ],
        [
            "Fact nary_mxsum_proof : mxsum_spec (\\sum_(j <- r | P j) unwrap (S_ j)) (\\sum_(j <- r | P j) unwrap (mxsum_rank (S_ j))).",
            "VernacStartTheoremProof",
            "56c5196a804ebdccb901ac677ad47ed62b95a185"
        ],
        [
            "elim/big_rec2: _ => [|j]; first by rewrite -(mxrank0 n n); left.",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "by case: (S_ j); right.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Canonical nary_mxsum_expr := ProperMxsumExpr nary_mxsum_proof.",
            "VernacDefinition",
            "375f10a721cf4b63e00534f4d7e4f4cedc1daca0"
        ],
        [
            "End Nary.",
            "VernacEndSegment",
            "35b40e13f5a9cb9b00711ca2374790fc599203d2"
        ],
        [
            "Definition mxdirect_def m n T of phantom 'M_(m, n) (unwrap (mxsum_val T)) := \\rank (unwrap T) == unwrap (mxsum_rank T).",
            "VernacDefinition",
            "4881a1d22654e00bb80d054cbfb0b8a91bb76903"
        ],
        [
            "End SumExpr.",
            "VernacEndSegment",
            "fb122c36b7c1a32116925c09a99e28127d665e34"
        ],
        [
            "Notation mxdirect A := (mxdirect_def (Phantom 'M_(_,_) A%MS)).",
            "VernacSyntacticDefinition",
            "15c8f03298b19bdf76082ebadba3c1899064f99c"
        ],
        [
            "Lemma mxdirectP n (S : proper_mxsum_expr n) : reflect (\\rank S = proper_mxsum_rank S) (mxdirect S).",
            "VernacStartTheoremProof",
            "57f726debce29d1073f688923084513ff37bf91b"
        ],
        [
            "exact: eqnP.",
            "VernacExtend",
            "ce637ff86bafca5d8359473e8c02af644dcbdc43"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Arguments mxdirectP {n S}.",
            "VernacArguments",
            "c5945daed560b6152f793403891f3615e2e7c084"
        ],
        [
            "Lemma mxdirect_trivial m n A : mxdirect (unwrap (@trivial_mxsum m n A)).",
            "VernacStartTheoremProof",
            "199a7bd9d2a089ba42d1f0b9d0d5dbae0477ce5a"
        ],
        [
            "exact: eqxx.",
            "VernacExtend",
            "ce637ff86bafca5d8359473e8c02af644dcbdc43"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma mxrank_sum_leqif m n (S : mxsum_expr m n) : \\rank (unwrap S) <= unwrap (mxsum_rank S) ?= iff mxdirect (unwrap S).",
            "VernacStartTheoremProof",
            "e6f4b1930b885acdeedb7c75e4a1344545697c6f"
        ],
        [
            "rewrite /mxdirect_def; case: S => [[A] [r] /= defAr]; split=> //=.",
            "VernacExtend",
            "2253759ff5c580854290fce82296a80357452125"
        ],
        [
            "elim: m A r / defAr => // m1 m2 A1 A2 r1 r2 _ leAr1 _ leAr2.",
            "VernacExtend",
            "e686a1895f1799b840b76242f931100819a9ad6c"
        ],
        [
            "by apply: leq_trans (leq_add leAr1 leAr2); rewrite mxrank_adds_leqif.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma mxdirectE m n (S : mxsum_expr m n) : mxdirect (unwrap S) = (\\rank (unwrap S) == unwrap (mxsum_rank S)).",
            "VernacStartTheoremProof",
            "c89ff402bdbe7b43414c0fd9294ffa0c0a7ee977"
        ],
        [
            "by [].",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma mxdirectEgeq m n (S : mxsum_expr m n) : mxdirect (unwrap S) = (\\rank (unwrap S) >= unwrap (mxsum_rank S)).",
            "VernacStartTheoremProof",
            "d8ab6e1ff9e6f9835c54f571c957e8addc9f5b42"
        ],
        [
            "by rewrite (geq_leqif (mxrank_sum_leqif S)).",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Section BinaryDirect.",
            "VernacBeginSection",
            "8f8c7a402dcd85d763ef56d331fa3bd3fb4a3341"
        ],
        [
            "Variables m1 m2 n : nat.",
            "VernacAssumption",
            "0feafffeb6487882cb42196554e62e9e9874f02e"
        ],
        [
            "Lemma mxdirect_addsE (S1 : mxsum_expr m1 n) (S2 : mxsum_expr m2 n) : mxdirect (unwrap S1 + unwrap S2) = [&& mxdirect (unwrap S1), mxdirect (unwrap S2) & unwrap S1 :&: unwrap S2 == 0]%MS.",
            "VernacStartTheoremProof",
            "b895fe16ffd4f2b901a79c8022cb27edcba9f972"
        ],
        [
            "rewrite (@mxdirectE n) /=.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "have:= leqif_add (mxrank_sum_leqif S1) (mxrank_sum_leqif S2).",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "move/(leqif_trans (mxrank_adds_leqif (unwrap S1) (unwrap S2)))=> ->.",
            "VernacExtend",
            "b1b2cb7a3a617cba67460b4eca1f04de3c1cc716"
        ],
        [
            "by rewrite andbC -andbA submx0.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma mxdirect_addsP (A : 'M_(m1, n)) (B : 'M_(m2, n)) : reflect (A :&: B = 0)%MS (mxdirect (A + B)).",
            "VernacStartTheoremProof",
            "dc7905be1871b523e581665d95c516a77dbdf5d7"
        ],
        [
            "by rewrite mxdirect_addsE !mxdirect_trivial; apply: eqP.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "End BinaryDirect.",
            "VernacEndSegment",
            "07ff5c9a889bbf74b00246681676dba071fc8b54"
        ],
        [
            "Section NaryDirect.",
            "VernacBeginSection",
            "8ed36cf162e318db1783d9f05b5739bdc71017bf"
        ],
        [
            "Variables (P : pred I) (n : nat).",
            "VernacAssumption",
            "7fa5691e585d6a66b39443240851eac0667d000b"
        ],
        [
            "Let TIsum A_ i := (A_ i :&: (\\sum_(j | P j && (j != i)) A_ j) = 0 :> 'M_n)%MS.",
            "VernacDefinition",
            "5be4c402ea29c4c837674257bb27499382f4c596"
        ],
        [
            "Let mxdirect_sums_recP (S_ : I -> mxsum_expr n n) : reflect (forall i, P i -> mxdirect (unwrap (S_ i)) /\\ TIsum (unwrap \\o S_) i) (mxdirect (\\sum_(i | P i) (unwrap (S_ i)))).",
            "VernacDefinition",
            "e06cadece4a3787dafb3dbcfc57a0c30a45652b5"
        ],
        [
            "rewrite /TIsum; apply: (iffP eqnP) => /= [dxS i Pi | dxS].",
            "VernacExtend",
            "634a7639ed2fb7caf62757f84400927f5829b7d5"
        ],
        [
            "set Si' := (\\sum_(j | _) unwrap (S_ j))%MS.",
            "VernacExtend",
            "69a61e99b234580f7b41fa5b9655c87ba9a76f70"
        ],
        [
            "have: mxdirect (unwrap (S_ i) + Si') by apply/eqnP; rewrite /= -!(bigD1 i).",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "by rewrite mxdirect_addsE => /and3P[-> _ /eqP].",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "elim: _.+1 {-2 4}P (subxx P) (ltnSn #|P|) => // m IHm Q; move/subsetP=> sQP.",
            "VernacExtend",
            "989401386cd39cd1438e3fa67734cdc58d3fb2ea"
        ],
        [
            "case: (pickP Q) => [i Qi | Q0]; last by rewrite !big_pred0 ?mxrank0.",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "rewrite (cardD1x Qi) !((bigD1 i) Q) //=.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "move/IHm=> <- {IHm}/=; last by apply/subsetP=> j /andP[/sQP].",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "case: (dxS i (sQP i Qi)) => /eqnP=> <- TiQ_0; rewrite mxrank_disjoint_sum //.",
            "VernacExtend",
            "82d53976234637e3f0907eb36cddf61d028c6306"
        ],
        [
            "apply/eqP; rewrite -submx0 -{2}TiQ_0 capmxS //=.",
            "VernacExtend",
            "56c014161b39aecfb3c54301c2409dba4e8e1857"
        ],
        [
            "by apply/sumsmx_subP=> j /= /andP[Qj i'j]; rewrite (sumsmx_sup j) ?[P j]sQP.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma mxdirect_sumsP (A_ : I -> 'M_n) : reflect (forall i, P i -> A_ i :&: (\\sum_(j | P j && (j != i)) A_ j) = 0)%MS (mxdirect (\\sum_(i | P i) A_ i)).",
            "VernacStartTheoremProof",
            "694cbca308c453fa9d3f3d78b0acfb86e0cfae55"
        ],
        [
            "apply: (iffP (mxdirect_sums_recP _)) => dxA i /dxA; first by case.",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "by rewrite mxdirect_trivial.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma mxdirect_sumsE (S_ : I -> mxsum_expr n n) (xunwrap := unwrap) : reflect (and (forall i, P i -> mxdirect (unwrap (S_ i))) (mxdirect (\\sum_(i | P i) (xunwrap (S_ i))))) (mxdirect (\\sum_(i | P i) (unwrap (S_ i)))).",
            "VernacStartTheoremProof",
            "c2216dd4e0b91372f6e74a5ac2d55d207066c4b4"
        ],
        [
            "apply: (iffP (mxdirect_sums_recP _)) => [dxS | [dxS_ dxS] i Pi].",
            "VernacExtend",
            "4bd6fa79b17bcd2bfb7af091fb325367a20385d6"
        ],
        [
            "by do [split; last apply/mxdirect_sumsP] => i; case/dxS.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "by split; [apply: dxS_ | apply: mxdirect_sumsP Pi].",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "End NaryDirect.",
            "VernacEndSegment",
            "edd2841af8e4a3baa456dae58d866a1312074d8e"
        ],
        [
            "Section SubDaddsmx.",
            "VernacBeginSection",
            "91a86bf83442e95d981df6621739a5e63a1b1f5a"
        ],
        [
            "Variables m m1 m2 n : nat.",
            "VernacAssumption",
            "dcf4c080a60e573f957b21a792e2495353a154cc"
        ],
        [
            "Variables (A : 'M[F]_(m, n)) (B1 : 'M[F]_(m1, n)) (B2 : 'M[F]_(m2, n)).",
            "VernacAssumption",
            "620ebed9580c8b5c990a8b54eb221258f12e9238"
        ],
        [
            "Variant sub_daddsmx_spec : Prop := SubDaddsmxSpec A1 A2 of (A1 <= B1)%MS & (A2 <= B2)%MS & A = A1 + A2 & forall C1 C2, (C1 <= B1)%MS -> (C2 <= B2)%MS -> A = C1 + C2 -> C1 = A1 /\\ C2 = A2.",
            "VernacInductive",
            "f3dbf7665d2fa82a155ccb351378776a3a95b175"
        ],
        [
            "Lemma sub_daddsmx : (B1 :&: B2 = 0)%MS -> (A <= B1 + B2)%MS -> sub_daddsmx_spec.",
            "VernacStartTheoremProof",
            "eaf9832ca86d8c0cfe89eed81d9c1fce306d8472"
        ],
        [
            "move=> dxB /sub_addsmxP[u defA].",
            "VernacExtend",
            "b1b2cb7a3a617cba67460b4eca1f04de3c1cc716"
        ],
        [
            "exists (u.1 *m B1) (u.2 *m B2); rewrite ?submxMl // => C1 C2 sCB1 sCB2.",
            "VernacExtend",
            "c34c8da6028d8c1852bd60896dffb4b76d1c3b6d"
        ],
        [
            "move/(canLR (addrK _)) => defC1.",
            "VernacExtend",
            "b1b2cb7a3a617cba67460b4eca1f04de3c1cc716"
        ],
        [
            "suffices: (C2 - u.2 *m B2 <= B1 :&: B2)%MS.",
            "VernacExtend",
            "290ed488b5562e885aa2cac56f3a69b4faa0eaa6"
        ],
        [
            "by rewrite dxB submx0 subr_eq0 -defC1 defA; move/eqP->; rewrite addrK.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "rewrite sub_capmx -opprB -{1}(canLR (addKr _) defA) -addrA defC1.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "by rewrite !(eqmx_opp, addmx_sub) ?submxMl.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "End SubDaddsmx.",
            "VernacEndSegment",
            "940c5f569fe7677cc6a967a723f484434e4883a2"
        ],
        [
            "Section SubDsumsmx.",
            "VernacBeginSection",
            "a0de07b7a658bb620f72fa9b3d0f17632649f9ac"
        ],
        [
            "Variables (P : pred I) (m n : nat) (A : 'M[F]_(m, n)) (B : I -> 'M[F]_n).",
            "VernacAssumption",
            "11908346f3360c73a9a852e9ebf500a99c1d3403"
        ],
        [
            "Variant sub_dsumsmx_spec : Prop := SubDsumsmxSpec A_ of forall i, P i -> (A_ i <= B i)%MS & A = \\sum_(i | P i) A_ i & forall C, (forall i, P i -> C i <= B i)%MS -> A = \\sum_(i | P i) C i -> {in SimplPred P, C =1 A_}.",
            "VernacInductive",
            "d432fe7483737b9735508d6a5f2d8cb84fd78697"
        ],
        [
            "Lemma sub_dsumsmx : mxdirect (\\sum_(i | P i) B i) -> (A <= \\sum_(i | P i) B i)%MS -> sub_dsumsmx_spec.",
            "VernacStartTheoremProof",
            "e4ced2b8c56a648597b66a2cccf59ec7b15daee5"
        ],
        [
            "move/mxdirect_sumsP=> dxB /sub_sumsmxP[u defA].",
            "VernacExtend",
            "b1b2cb7a3a617cba67460b4eca1f04de3c1cc716"
        ],
        [
            "pose A_ i := u i *m B i.",
            "VernacExtend",
            "3c5f04de94609049d978298aa02ff35fb35ea7c7"
        ],
        [
            "exists A_ => //= [i _ | C sCB defAC i Pi]; first exact: submxMl.",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "apply/eqP; rewrite -subr_eq0 -submx0 -{dxB}(dxB i Pi) /=.",
            "VernacExtend",
            "56c014161b39aecfb3c54301c2409dba4e8e1857"
        ],
        [
            "rewrite sub_capmx addmx_sub ?eqmx_opp ?submxMl ?sCB //=.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "rewrite -(subrK A (C i)) -addrA -opprB addmx_sub ?eqmx_opp //.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "rewrite addrC defAC (bigD1 i) // addKr /= summx_sub // => j Pi'j.",
            "VernacExtend",
            "3c42b53d0efc26db114b00541ac5e7fcb29e6aeb"
        ],
        [
            "by rewrite (sumsmx_sup j) ?sCB //; case/andP: Pi'j.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "rewrite addrC defA (bigD1 i) // addKr /= summx_sub // => j Pi'j.",
            "VernacExtend",
            "3c42b53d0efc26db114b00541ac5e7fcb29e6aeb"
        ],
        [
            "by rewrite (sumsmx_sup j) ?submxMl.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "End SubDsumsmx.",
            "VernacEndSegment",
            "88f702258a7e2d211e2e0d35f7ccd71d4914aa2a"
        ],
        [
            "Section Eigenspace.",
            "VernacBeginSection",
            "29cc1820434d5a6e789fc8876e7eb17bcd18b4f7"
        ],
        [
            "Variables (n : nat) (g : 'M_n).",
            "VernacAssumption",
            "24538e1b709fa32c7c801b96e0199567289f91a7"
        ],
        [
            "Definition eigenspace a := kermx (g - a%:M).",
            "VernacDefinition",
            "b0c0c034e6573c689b30f7f6e8eda51a5904076a"
        ],
        [
            "Definition eigenvalue : pred F := fun a => eigenspace a != 0.",
            "VernacDefinition",
            "a7c834ab1e553c753155336807111707b71ca8b7"
        ],
        [
            "Lemma eigenspaceP a m (W : 'M_(m, n)) : reflect (W *m g = a *: W) (W <= eigenspace a)%MS.",
            "VernacStartTheoremProof",
            "7f012cfa7a7246325821d36bcbb4e4082dc96521"
        ],
        [
            "rewrite (sameP (sub_kermxP _ _) eqP).",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "by rewrite mulmxBr subr_eq0 mul_mx_scalar; apply: eqP.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma eigenvalueP a : reflect (exists2 v : 'rV_n, v *m g = a *: v & v != 0) (eigenvalue a).",
            "VernacStartTheoremProof",
            "a3d9ca0f0d881d1b562e5082758a46963119b5ef"
        ],
        [
            "by apply: (iffP (rowV0Pn _)) => [] [v]; move/eigenspaceP; exists v.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma mxdirect_sum_eigenspace (P : pred I) a_ : {in P &, injective a_} -> mxdirect (\\sum_(i | P i) eigenspace (a_ i)).",
            "VernacStartTheoremProof",
            "0dca447e57dd32f308bc62608df9fcabc0038c5d"
        ],
        [
            "elim: {P}_.+1 {-2}P (ltnSn #|P|) => // m IHm P lePm inj_a.",
            "VernacExtend",
            "e686a1895f1799b840b76242f931100819a9ad6c"
        ],
        [
            "apply/mxdirect_sumsP=> i Pi; apply/eqP/rowV0P => v.",
            "VernacExtend",
            "8d9dae45eeb3a769b8a865cef8ae476451f63802"
        ],
        [
            "rewrite sub_capmx => /andP[/eigenspaceP def_vg].",
            "VernacExtend",
            "3c42b53d0efc26db114b00541ac5e7fcb29e6aeb"
        ],
        [
            "set Vi' := (\\sum_(i | _) _)%MS => Vi'v.",
            "VernacExtend",
            "3c42b53d0efc26db114b00541ac5e7fcb29e6aeb"
        ],
        [
            "have dxVi': mxdirect Vi'.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "rewrite (cardD1x Pi) in lePm; apply: IHm => //.",
            "VernacExtend",
            "634a7639ed2fb7caf62757f84400927f5829b7d5"
        ],
        [
            "by apply: sub_in2 inj_a => j /andP[].",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "case/sub_dsumsmx: Vi'v => // u Vi'u def_v _.",
            "VernacExtend",
            "e00fff71ff314c991514fc71c41a3556702e444a"
        ],
        [
            "rewrite def_v big1 // => j Pi'j; apply/eqP.",
            "VernacExtend",
            "2855640502da0a3b2cfdfcd02ea9662c049d9a24"
        ],
        [
            "have nz_aij: a_ i - a_ j != 0.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "by case/andP: Pi'j => Pj ne_ji; rewrite subr_eq0 eq_sym (inj_in_eq inj_a).",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "case: (sub_dsumsmx dxVi' (sub0mx 1 _)) => C _ _ uniqC.",
            "VernacExtend",
            "e00fff71ff314c991514fc71c41a3556702e444a"
        ],
        [
            "rewrite -(eqmx_eq0 (eqmx_scale _ nz_aij)).",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "rewrite (uniqC (fun k => (a_ i - a_ k) *: u k)) => // [|k Pi'k|].",
            "VernacExtend",
            "3c42b53d0efc26db114b00541ac5e7fcb29e6aeb"
        ],
        [
            "-",
            "VernacBullet",
            "581cab4bf49fa4b495e569bbda96fc8d28fddcc0"
        ],
        [
            "by rewrite -(uniqC (fun _ => 0)) ?big1 // => k Pi'k; apply: sub0mx.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "-",
            "VernacBullet",
            "581cab4bf49fa4b495e569bbda96fc8d28fddcc0"
        ],
        [
            "by rewrite scalemx_sub ?Vi'u.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "rewrite -{1}(subrr (v *m g)) {1}def_vg def_v scaler_sumr mulmx_suml -sumrB.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "by apply: eq_bigr => k /Vi'u/eigenspaceP->; rewrite scalerBl.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "End Eigenspace.",
            "VernacEndSegment",
            "4159d24b9e1de347536c2a81be465678e4a0b051"
        ],
        [
            "End RowSpaceTheory.",
            "VernacEndSegment",
            "cc5d2c2fdbacb708f3e37cb1048738d28524b960"
        ],
        [
            "Hint Resolve submx_refl : core.",
            "VernacHints",
            "54628c5ca783b2d45ce3b6e9c5e571cf45136daf"
        ],
        [
            "Arguments submxP {F m1 m2 n A B}.",
            "VernacArguments",
            "165c93a365993aae23bcf2a6be9c2695e0e1187c"
        ],
        [
            "Arguments eq_row_sub [F m n v A].",
            "VernacArguments",
            "5d14d394035cfff311ede63afb5c3cd876509fe3"
        ],
        [
            "Arguments row_subP {F m1 m2 n A B}.",
            "VernacArguments",
            "dcfb5be0de4cbdb7dcca550bd1544750e53ec357"
        ],
        [
            "Arguments rV_subP {F m1 m2 n A B}.",
            "VernacArguments",
            "72980b5ff6d3ac51a494b362b41de98657292bba"
        ],
        [
            "Arguments row_subPn {F m1 m2 n A B}.",
            "VernacArguments",
            "e5b91ca52e5f1ff223734a7db5fad20cd8587c65"
        ],
        [
            "Arguments sub_rVP {F n u v}.",
            "VernacArguments",
            "a62c8d224d91d8064d175464b5dbe82d89c353c4"
        ],
        [
            "Arguments rV_eqP {F m1 m2 n A B}.",
            "VernacArguments",
            "12ee2159c504825a091633f08d7ddaefc8c0f75c"
        ],
        [
            "Arguments rowV0Pn {F m n A}.",
            "VernacArguments",
            "15318b80759cebb76f6548f31c1347c9d73518ca"
        ],
        [
            "Arguments rowV0P {F m n A}.",
            "VernacArguments",
            "e7f8969c5b3bd180a043e9c3b77143ac09b614e9"
        ],
        [
            "Arguments eqmx0P {F m n A}.",
            "VernacArguments",
            "a9a7814d74fe01b2400eed8d512c445fedb09c38"
        ],
        [
            "Arguments row_fullP {F m n A}.",
            "VernacArguments",
            "2a6ea89f7739f681260cc7e4d71139c4e1687333"
        ],
        [
            "Arguments row_freeP {F m n A}.",
            "VernacArguments",
            "8e179ff4a8468921bcffd228f1974b08b379f7bf"
        ],
        [
            "Arguments eqmxP {F m1 m2 n A B}.",
            "VernacArguments",
            "458f310ce48a490429c7f15d787806b92e3936b4"
        ],
        [
            "Arguments genmxP {F m1 m2 n A B}.",
            "VernacArguments",
            "9f3060a677515ecf9ba49d046e69616e29ade10c"
        ],
        [
            "Arguments addsmx_idPr {F m1 m2 n A B}.",
            "VernacArguments",
            "5fc60cb6582ee15c606135cc16872acf40b84482"
        ],
        [
            "Arguments addsmx_idPl {F m1 m2 n A B}.",
            "VernacArguments",
            "c62feeaac33836b7562b47bc1277e57eeaa5cdad"
        ],
        [
            "Arguments sub_addsmxP {F m1 m2 m3 n A B C}.",
            "VernacArguments",
            "afebbb7a481279b158808772b2d96fae344f356b"
        ],
        [
            "Arguments sumsmx_sup [F I] i0 [P m n A B_].",
            "VernacArguments",
            "b7c7399654a23e000e6957a29ba6770929399b69"
        ],
        [
            "Arguments sumsmx_subP {F I P m n A_ B}.",
            "VernacArguments",
            "6c3544f44c8098968b2dd3fa37dddc703519e285"
        ],
        [
            "Arguments sub_sumsmxP {F I P m n A B_}.",
            "VernacArguments",
            "85af0cc75e7f9dfe29d4c069aae0dda4cff76838"
        ],
        [
            "Arguments sub_kermxP {F p m n A B}.",
            "VernacArguments",
            "0493df5475ad499bc7f261aa3c15d21c56ae3242"
        ],
        [
            "Arguments capmx_idPr {F n m1 m2 A B}.",
            "VernacArguments",
            "f37b7e0e227450566898b9bbffff8f7eab2336f4"
        ],
        [
            "Arguments capmx_idPl {F n m1 m2 A B}.",
            "VernacArguments",
            "7da273047d063de20219c95b448a20d4ca0118f5"
        ],
        [
            "Arguments bigcapmx_inf [F I] i0 [P m n A_ B].",
            "VernacArguments",
            "ac1265a7db289f49cc7eafa2245cc36f5cad1d53"
        ],
        [
            "Arguments sub_bigcapmxP {F I P m n A B_}.",
            "VernacArguments",
            "47da558436cba33ccae75a761a45f3cbffac95d7"
        ],
        [
            "Arguments mxrank_injP {F m n} p [A f].",
            "VernacArguments",
            "4c656c9971ee7d16d705d2dff864cd2a291a2a8b"
        ],
        [
            "Arguments mxdirectP {F n S}.",
            "VernacArguments",
            "c8b5da21b07d585d98397dffd8ca6643f7049720"
        ],
        [
            "Arguments mxdirect_addsP {F m1 m2 n A B}.",
            "VernacArguments",
            "421c7524a66c344b665c7750fd3ecfa897d0cf82"
        ],
        [
            "Arguments mxdirect_sumsP {F I P n A_}.",
            "VernacArguments",
            "d84e37202a33196baf83dad1c361e86fba593c33"
        ],
        [
            "Arguments mxdirect_sumsE {F I P n S_}.",
            "VernacArguments",
            "83bae24f2734c4c70c122d0319b2575bd32ea5cc"
        ],
        [
            "Arguments eigenspaceP {F n g a m W}.",
            "VernacArguments",
            "c7137e40e7c5c00441f9b95d0315ec78005c2e2f"
        ],
        [
            "Arguments eigenvalueP {F n g a}.",
            "VernacArguments",
            "7e444e81d52a266e0998fdbb7b4a9c9e1f8bf2f0"
        ],
        [
            "Arguments mxrank {F m%N n%N} A%MS.",
            "VernacArguments",
            "ad17a587e12d22be42275aad21f129c4418c86d1"
        ],
        [
            "Arguments complmx {F m%N n%N} A%MS.",
            "VernacArguments",
            "d7ab9ef9dd68fa8ff208900f7ad8ca0d6920911b"
        ],
        [
            "Arguments row_full {F m%N n%N} A%MS.",
            "VernacArguments",
            "45320c982ae63e68ea047afdb04a217c543335e9"
        ],
        [
            "Arguments submx {F m1%N m2%N n%N} A%MS B%MS : rename.",
            "VernacArguments",
            "fe254e2f952c28861f39f8ea677bbb8a86c9c1f4"
        ],
        [
            "Arguments ltmx {F m1%N m2%N n%N} A%MS B%MS.",
            "VernacArguments",
            "7be8e297e2f359bf51d90021fda26a8910d838ec"
        ],
        [
            "Arguments eqmx {F m1%N m2%N n%N} A%MS B%MS.",
            "VernacArguments",
            "4dd94f37589a9afb6b38bc0f459a869adbca2e1c"
        ],
        [
            "Arguments addsmx {F m1%N m2%N n%N} A%MS B%MS : rename.",
            "VernacArguments",
            "8442ed39a937e35c4511e80288869cfe4994442c"
        ],
        [
            "Arguments capmx {F m1%N m2%N n%N} A%MS B%MS : rename.",
            "VernacArguments",
            "94a7a88f256a38cc2056db417ceb0556cb24994a"
        ],
        [
            "Arguments diffmx {F m1%N m2%N n%N} A%MS B%MS : rename.",
            "VernacArguments",
            "cdf35fd869e016205e5b43a61c780d615b50c6d7"
        ],
        [
            "Arguments genmx {F m%N n%N} A%R : rename.",
            "VernacArguments",
            "92cb3fc81515ea1d6557a6a26ba5008751703313"
        ],
        [
            "Notation \"\\rank A\" := (mxrank A) : nat_scope.",
            "VernacNotation",
            "e08bf702e2e13e2edda9300be7e53c2e27844a99"
        ],
        [
            "Notation \"<< A >>\" := (genmx A) : matrix_set_scope.",
            "VernacNotation",
            "51fd7e8138f17dbcb55bd8f10495abfafaae3f96"
        ],
        [
            "Notation \"A ^C\" := (complmx A) : matrix_set_scope.",
            "VernacNotation",
            "9da9428a8d7dd62a6781e82ab227955733a2ceb9"
        ],
        [
            "Notation \"A <= B\" := (submx A B) : matrix_set_scope.",
            "VernacNotation",
            "895692cc4425647ce2a1b70105ee1d869ceeec67"
        ],
        [
            "Notation \"A < B\" := (ltmx A B) : matrix_set_scope.",
            "VernacNotation",
            "6d7f3355706a90804098cb424ab0b52a256c12fa"
        ],
        [
            "Notation \"A <= B <= C\" := ((submx A B) && (submx B C)) : matrix_set_scope.",
            "VernacNotation",
            "2c070e71a7b11e27021bdf18b5c30cb01e87a523"
        ],
        [
            "Notation \"A < B <= C\" := (ltmx A B && submx B C) : matrix_set_scope.",
            "VernacNotation",
            "6f9f6bb806f3dfa1a707b754d4161abca86b728d"
        ],
        [
            "Notation \"A <= B < C\" := (submx A B && ltmx B C) : matrix_set_scope.",
            "VernacNotation",
            "525a80959ae460de6ee053201782f0f08dcf7600"
        ],
        [
            "Notation \"A < B < C\" := (ltmx A B && ltmx B C) : matrix_set_scope.",
            "VernacNotation",
            "80c7acf55d413e7eac1ce147caffe307aad5eaf3"
        ],
        [
            "Notation \"A == B\" := ((submx A B) && (submx B A)) : matrix_set_scope.",
            "VernacNotation",
            "9b78901ae9dab2dd09c3ab575d1c57832c89ec25"
        ],
        [
            "Notation \"A :=: B\" := (eqmx A B) : matrix_set_scope.",
            "VernacNotation",
            "c4534a100e60acb8e2f76204deb81d0473f54941"
        ],
        [
            "Notation \"A + B\" := (addsmx A B) : matrix_set_scope.",
            "VernacNotation",
            "a0f8d6cd55e2f40f72d8801b49267591d088233a"
        ],
        [
            "Notation \"A :&: B\" := (capmx A B) : matrix_set_scope.",
            "VernacNotation",
            "dd5400fe1298456fed7e74a8e099250cc3a77595"
        ],
        [
            "Notation \"A :\\: B\" := (diffmx A B) : matrix_set_scope.",
            "VernacNotation",
            "e680f64a3e5f57586dcb180ce4e9d9b63403ec09"
        ],
        [
            "Notation mxdirect S := (mxdirect_def (Phantom 'M_(_,_) S%MS)).",
            "VernacSyntacticDefinition",
            "58fe485dcc33979ab084f2c6d181530e978e5e09"
        ],
        [
            "Notation \"\\sum_ ( i <- r | P ) B\" := (\\big[addsmx/0%R]_(i <- r | P%B) B%MS) : matrix_set_scope.",
            "VernacNotation",
            "314429f95ee14c1da360e877b700224676432e12"
        ],
        [
            "Notation \"\\sum_ ( i <- r ) B\" := (\\big[addsmx/0%R]_(i <- r) B%MS) : matrix_set_scope.",
            "VernacNotation",
            "0d1d5e46871d58ef5a8d860a554f40e9ae643d99"
        ],
        [
            "Notation \"\\sum_ ( m <= i < n | P ) B\" := (\\big[addsmx/0%R]_(m <= i < n | P%B) B%MS) : matrix_set_scope.",
            "VernacNotation",
            "29914603b7312bb0095cc6f28262626e2b633be5"
        ],
        [
            "Notation \"\\sum_ ( m <= i < n ) B\" := (\\big[addsmx/0%R]_(m <= i < n) B%MS) : matrix_set_scope.",
            "VernacNotation",
            "8697ba934f792269e7575f46d6def364332ec1f1"
        ],
        [
            "Notation \"\\sum_ ( i | P ) B\" := (\\big[addsmx/0%R]_(i | P%B) B%MS) : matrix_set_scope.",
            "VernacNotation",
            "22b16d622343003d1cb107b55c0c262b5f68d202"
        ],
        [
            "Notation \"\\sum_ i B\" := (\\big[addsmx/0%R]_i B%MS) : matrix_set_scope.",
            "VernacNotation",
            "500e684585cab0f772131d8f61bf2bbfad2f0633"
        ],
        [
            "Notation \"\\sum_ ( i : t | P ) B\" := (\\big[addsmx/0%R]_(i : t | P%B) B%MS) (only parsing) : matrix_set_scope.",
            "VernacNotation",
            "f183c6bf5f54156af91886ca9380a1cdebb7378b"
        ],
        [
            "Notation \"\\sum_ ( i : t ) B\" := (\\big[addsmx/0%R]_(i : t) B%MS) (only parsing) : matrix_set_scope.",
            "VernacNotation",
            "61938fb66df4ef5774c82546122fe41f85c2dbc2"
        ],
        [
            "Notation \"\\sum_ ( i < n | P ) B\" := (\\big[addsmx/0%R]_(i < n | P%B) B%MS) : matrix_set_scope.",
            "VernacNotation",
            "6929373c2effe0385ee86be79ec7c1a8dd4e6cde"
        ],
        [
            "Notation \"\\sum_ ( i < n ) B\" := (\\big[addsmx/0%R]_(i < n) B%MS) : matrix_set_scope.",
            "VernacNotation",
            "8012830af5620c4113e2f28e7ff0708d8cc83ddb"
        ],
        [
            "Notation \"\\sum_ ( i 'in' A | P ) B\" := (\\big[addsmx/0%R]_(i in A | P%B) B%MS) : matrix_set_scope.",
            "VernacNotation",
            "afabeee9781fb1c5690f46b4c9f09d5b6bce9bb8"
        ],
        [
            "Notation \"\\sum_ ( i 'in' A ) B\" := (\\big[addsmx/0%R]_(i in A) B%MS) : matrix_set_scope.",
            "VernacNotation",
            "28f26ede69db296cb7a0e65e93def9e5438cc5bf"
        ],
        [
            "Notation \"\\bigcap_ ( i <- r | P ) B\" := (\\big[capmx/1%:M]_(i <- r | P%B) B%MS) : matrix_set_scope.",
            "VernacNotation",
            "dfc97da1162b756d46f282b16e642db6c64d9346"
        ],
        [
            "Notation \"\\bigcap_ ( i <- r ) B\" := (\\big[capmx/1%:M]_(i <- r) B%MS) : matrix_set_scope.",
            "VernacNotation",
            "127b798afbf37f34c1ac89ca3fbedfa87e17e3c6"
        ],
        [
            "Notation \"\\bigcap_ ( m <= i < n | P ) B\" := (\\big[capmx/1%:M]_(m <= i < n | P%B) B%MS) : matrix_set_scope.",
            "VernacNotation",
            "e21216da88d594db4d949f1a418e03905a6227fd"
        ],
        [
            "Notation \"\\bigcap_ ( m <= i < n ) B\" := (\\big[capmx/1%:M]_(m <= i < n) B%MS) : matrix_set_scope.",
            "VernacNotation",
            "72c79edb69f8b2479d9eba14f91b9f8b0548eeba"
        ],
        [
            "Notation \"\\bigcap_ ( i | P ) B\" := (\\big[capmx/1%:M]_(i | P%B) B%MS) : matrix_set_scope.",
            "VernacNotation",
            "db228628a52bab49b9f7ad6f69e081df6e6ec067"
        ],
        [
            "Notation \"\\bigcap_ i B\" := (\\big[capmx/1%:M]_i B%MS) : matrix_set_scope.",
            "VernacNotation",
            "0a127bbb8e2ab215d71574d9646153326eb6b0eb"
        ],
        [
            "Notation \"\\bigcap_ ( i : t | P ) B\" := (\\big[capmx/1%:M]_(i : t | P%B) B%MS) (only parsing) : matrix_set_scope.",
            "VernacNotation",
            "fdaed46a72e4ce73635e18b91ac64db2e6a3ddb6"
        ],
        [
            "Notation \"\\bigcap_ ( i : t ) B\" := (\\big[capmx/1%:M]_(i : t) B%MS) (only parsing) : matrix_set_scope.",
            "VernacNotation",
            "67846d66cb6940724c026b328f657ad1b05b6300"
        ],
        [
            "Notation \"\\bigcap_ ( i < n | P ) B\" := (\\big[capmx/1%:M]_(i < n | P%B) B%MS) : matrix_set_scope.",
            "VernacNotation",
            "6928210faa5e1fe4d1813bb446695d43ad1c14e5"
        ],
        [
            "Notation \"\\bigcap_ ( i < n ) B\" := (\\big[capmx/1%:M]_(i < n) B%MS) : matrix_set_scope.",
            "VernacNotation",
            "972a40f57943c15dd49d100e47aaddaa2386afae"
        ],
        [
            "Notation \"\\bigcap_ ( i 'in' A | P ) B\" := (\\big[capmx/1%:M]_(i in A | P%B) B%MS) : matrix_set_scope.",
            "VernacNotation",
            "cea6c5d2edfcda843f8b496201a515bb76de5c3c"
        ],
        [
            "Notation \"\\bigcap_ ( i 'in' A ) B\" := (\\big[capmx/1%:M]_(i in A) B%MS) : matrix_set_scope.",
            "VernacNotation",
            "f8cb3351e6ed501a4c444f77d42288d4f0d5526a"
        ],
        [
            "Section DirectSums.",
            "VernacBeginSection",
            "a5f9e00185bcacc50fc480639b1c5a80f2f44131"
        ],
        [
            "Variables (F : fieldType) (I : finType) (P : pred I).",
            "VernacAssumption",
            "968ee9adf895e79505e86bd7cf0eebc4b8cb1f6e"
        ],
        [
            "Lemma mxdirect_delta n f : {in P &, injective f} -> mxdirect (\\sum_(i | P i) <<delta_mx 0 (f i) : 'rV[F]_n>>).",
            "VernacStartTheoremProof",
            "560c2e0978547c74da4553b17ea73ea714dffb33"
        ],
        [
            "pose fP := image f P => Uf; have UfP: uniq fP by apply/dinjectiveP.",
            "VernacExtend",
            "d2991b7607b6316c9d43d28c85f87ca601299ca6"
        ],
        [
            "suffices /mxdirectP : mxdirect (\\sum_i <<delta_mx 0 i : 'rV[F]_n>>).",
            "VernacExtend",
            "290ed488b5562e885aa2cac56f3a69b4faa0eaa6"
        ],
        [
            "rewrite /= !(bigID [mem fP] predT) -!big_uniq //= !big_map !big_filter.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "by move/mxdirectP; rewrite mxdirect_addsE => /andP[].",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "apply/mxdirectP=> /=; transitivity (mxrank (1%:M : 'M[F]_n)).",
            "VernacExtend",
            "2f210654871c4a9b3eec94d1b51b33836d65a2e3"
        ],
        [
            "apply/eqmx_rank; rewrite submx1 mx1_sum_delta summx_sub_sums // => i _.",
            "VernacExtend",
            "5fce7e5361004176d6b434b36b4623c7387f70bb"
        ],
        [
            "by rewrite -(mul_delta_mx (0 : 'I_1)) genmxE submxMl.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "rewrite mxrank1 -[LHS]card_ord -sum1_card.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "by apply/eq_bigr=> i _; rewrite /= mxrank_gen mxrank_delta.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "End DirectSums.",
            "VernacEndSegment",
            "d49efeb77533f30346ea425e96b8ce042a31a205"
        ],
        [
            "Section CardGL.",
            "VernacBeginSection",
            "aace47fbe19cb71086cf9dd2d68fe88f2f8880e7"
        ],
        [
            "Variable F : finFieldType.",
            "VernacAssumption",
            "8f6b88f2458ff412a0390b1a919310e1d22b5745"
        ],
        [
            "Lemma card_GL n : n > 0 -> #|'GL_n[F]| = (#|F| ^ 'C(n, 2) * \\prod_(1 <= i < n.+1) (#|F| ^ i - 1))%N.",
            "VernacStartTheoremProof",
            "f185cba7cb9d0d87ec1f51b03d0cf12c5cdd5835"
        ],
        [
            "case: n => // n' _; set n := n'.+1; set p := #|F|.",
            "VernacExtend",
            "f4ca15579cffe1e0ea1d940cc33140fcfbe07e75"
        ],
        [
            "rewrite big_nat_rev big_add1 -triangular_sum expn_sum -big_split /=.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "pose fr m := [pred A : 'M[F]_(m, n) | \\rank A == m].",
            "VernacExtend",
            "3c5f04de94609049d978298aa02ff35fb35ea7c7"
        ],
        [
            "set m := {-7}n; transitivity #|fr m|.",
            "VernacExtend",
            "2b75951a07df6c8c4c659adb94644bfd6da539e8"
        ],
        [
            "by rewrite cardsT /= card_sub; apply: eq_card => A; rewrite -row_free_unit.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "elim: m (leqnn m : m <= n) => [_|m IHm]; last move/ltnW=> le_mn.",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "rewrite (@eq_card1 _ (0 : 'M_(0, n))) ?big_geq //= => A.",
            "VernacExtend",
            "3c42b53d0efc26db114b00541ac5e7fcb29e6aeb"
        ],
        [
            "by rewrite flatmx0 !inE !eqxx.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "rewrite big_nat_recr // -{}IHm //= !subSS mulnBr muln1 -expnD subnKC //.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "rewrite -sum_nat_const /= -sum1_card -add1n.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "rewrite (partition_big dsubmx (fr m)) /= => [|A]; last first.",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "rewrite !inE -{1}(vsubmxK A); move: {A}(_ A) (_ A) => Ad Au Afull.",
            "VernacExtend",
            "7e529e80bb2879787ee6d9466056f19f0215c721"
        ],
        [
            "rewrite eqn_leq rank_leq_row -(leq_add2l (\\rank Au)) -mxrank_sum_cap.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "rewrite {1 3}[@mxrank]lock addsmxE (eqnP Afull) -lock -addnA.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "by rewrite leq_add ?rank_leq_row ?leq_addr.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "apply: eq_bigr => A rAm; rewrite (reindex (col_mx^~ A)) /=; last first.",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "exists usubmx => [v _ | vA]; first by rewrite col_mxKu.",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "by case/andP=> _ /eqP <-; rewrite vsubmxK.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "transitivity #|~: [set v *m A | v in 'rV_m]|; last first.",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "rewrite cardsCs setCK card_imset ?card_matrix ?card_ord ?mul1n //.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "have [B AB1] := row_freeP rAm; apply: can_inj (mulmx^~ B) _ => v.",
            "VernacExtend",
            "af1e5df3b072070e589731222b14b19e1cb478bc"
        ],
        [
            "by rewrite -mulmxA AB1 mulmx1.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "rewrite -sum1_card; apply: eq_bigl => v; rewrite !inE col_mxKd eqxx.",
            "VernacExtend",
            "fe8f197e86415fc7f0a74eda9d312128b9473eda"
        ],
        [
            "rewrite andbT eqn_leq rank_leq_row /= -(leq_add2r (\\rank (v :&: A)%MS)).",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "rewrite -addsmxE mxrank_sum_cap (eqnP rAm) addnAC leq_add2r.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "rewrite (ltn_leqif (mxrank_leqif_sup _)) ?capmxSl // sub_capmx submx_refl.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "by congr (~~ _); apply/submxP/imsetP=> [] [u]; exists u.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma LUP_card_GL n : n > 0 -> #|'GL_n[F]| = (#|F| ^ 'C(n, 2) * \\prod_(1 <= i < n.+1) (#|F| ^ i - 1))%N.",
            "VernacStartTheoremProof",
            "1a8113aa38a08be206c19d6f1257bebc9674da77"
        ],
        [
            "case: n => // n' _; set n := n'.+1; set p := #|F|.",
            "VernacExtend",
            "f4ca15579cffe1e0ea1d940cc33140fcfbe07e75"
        ],
        [
            "rewrite cardsT /= card_sub /GRing.unit /= big_add1 /= -triangular_sum -/n.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "elim: {n'}n => [|n IHn].",
            "VernacExtend",
            "e686a1895f1799b840b76242f931100819a9ad6c"
        ],
        [
            "rewrite !big_geq // mul1n (@eq_card _ _ predT) ?card_matrix //= => M.",
            "VernacExtend",
            "3c42b53d0efc26db114b00541ac5e7fcb29e6aeb"
        ],
        [
            "by rewrite {1}[M]flatmx0 -(flatmx0 1%:M) unitmx1.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "rewrite !big_nat_recr //= expnD mulnAC mulnA -{}IHn -mulnA mulnC.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "set LHS := #|_|; rewrite -[n.+1]muln1 -{2}[n]mul1n {}/LHS.",
            "VernacExtend",
            "8460a73fe74726b8e94ff0752da65e8d48f68f26"
        ],
        [
            "rewrite -!card_matrix subn1 -(cardC1 0) -mulnA; set nzC := predC1 _.",
            "VernacExtend",
            "c1f58f36c5711f022b4a54717f37c2782f34a159"
        ],
        [
            "rewrite -sum1_card (partition_big lsubmx nzC) => [|A]; last first.",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "rewrite unitmxE unitfE; apply: contra; move/eqP=> v0.",
            "VernacExtend",
            "399d290ad8c436d6764653e1c02126831ee79b9d"
        ],
        [
            "rewrite -[A]hsubmxK v0 -[n.+1]/(1 + n)%N -col_mx0.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "rewrite -[rsubmx _]vsubmxK -det_tr tr_row_mx !tr_col_mx !trmx0.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "by rewrite det_lblock [0]mx11_scalar det_scalar1 mxE mul0r.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "rewrite -sum_nat_const; apply: eq_bigr; rewrite /= -[n.+1]/(1 + n)%N => v nzv.",
            "VernacExtend",
            "0288f65064e83af8559a49f90a2eba4421e03fd4"
        ],
        [
            "case: (pickP (fun i => v i 0 != 0)) => [k nza | v0]; last first.",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "by case/eqP: nzv; apply/colP=> i; move/eqP: (v0 i); rewrite mxE.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "have xrkK: involutive (@xrow F _ _ 0 k).",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "by move=> m A /=; rewrite /xrow -row_permM tperm2 row_perm1.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "rewrite (reindex_inj (inv_inj (xrkK (1 + n)%N))) /= -[n.+1]/(1 + n)%N.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "rewrite (partition_big ursubmx xpredT) //= -sum_nat_const.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "apply: eq_bigr => u _; set a : F := v _ _ in nza.",
            "VernacExtend",
            "ac591433247162d5294d7c948ab3b309c2d6e368"
        ],
        [
            "set v1 : 'cV_(1 + n) := xrow 0 k v.",
            "VernacExtend",
            "69a61e99b234580f7b41fa5b9655c87ba9a76f70"
        ],
        [
            "have def_a: usubmx v1 = a%:M.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "by rewrite [_ v1]mx11_scalar mxE lshift0 mxE tpermL.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "pose Schur := dsubmx v1 *m (a^-1 *: u).",
            "VernacExtend",
            "3c5f04de94609049d978298aa02ff35fb35ea7c7"
        ],
        [
            "pose L : 'M_(1 + n) := block_mx a%:M 0 (dsubmx v1) 1%:M.",
            "VernacExtend",
            "3c5f04de94609049d978298aa02ff35fb35ea7c7"
        ],
        [
            "pose U B : 'M_(1 + n) := block_mx 1 (a^-1 *: u) 0 B.",
            "VernacExtend",
            "3c5f04de94609049d978298aa02ff35fb35ea7c7"
        ],
        [
            "rewrite (reindex (fun B => L *m U B)); last first.",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "exists (fun A1 => drsubmx A1 - Schur) => [B _ | A1].",
            "VernacExtend",
            "3c42b53d0efc26db114b00541ac5e7fcb29e6aeb"
        ],
        [
            "by rewrite mulmx_block block_mxKdr mul1mx addrC addKr.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "rewrite !inE mulmx_block !mulmx0 mul0mx !mulmx1 !addr0 mul1mx addrC subrK.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "rewrite mul_scalar_mx scalerA divff // scale1r andbC; case/and3P => /eqP <- _.",
            "VernacExtend",
            "712d339e99ee17eb7d5033e19ac614eb3ca6b532"
        ],
        [
            "rewrite -{1}(hsubmxK A1) xrowE mul_mx_row row_mxKl -xrowE => /eqP def_v.",
            "VernacExtend",
            "3c42b53d0efc26db114b00541ac5e7fcb29e6aeb"
        ],
        [
            "rewrite -def_a block_mxEh vsubmxK /v1 -def_v xrkK.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "apply: trmx_inj; rewrite tr_row_mx tr_col_mx trmx_ursub trmx_drsub trmx_lsub.",
            "VernacExtend",
            "56c014161b39aecfb3c54301c2409dba4e8e1857"
        ],
        [
            "by rewrite hsubmxK vsubmxK.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "rewrite -sum1_card; apply: eq_bigl => B; rewrite xrowE unitmxE.",
            "VernacExtend",
            "fe8f197e86415fc7f0a74eda9d312128b9473eda"
        ],
        [
            "rewrite !det_mulmx unitrM -unitmxE unitmx_perm det_lblock det_ublock.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "rewrite !det_scalar1 det1 mulr1 mul1r unitrM unitfE nza -unitmxE.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "rewrite mulmx_block !mulmx0 mul0mx !addr0 !mulmx1 mul1mx block_mxKur.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "rewrite mul_scalar_mx scalerA divff // scale1r eqxx andbT.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "by rewrite block_mxEh mul_mx_row row_mxKl -def_a vsubmxK -xrowE xrkK eqxx andbT.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma card_GL_1 : #|'GL_1[F]| = #|F|.-1.",
            "VernacStartTheoremProof",
            "9a456edd8fa56be74ce0c489328d77192e5aba6d"
        ],
        [
            "by rewrite card_GL // mul1n big_nat1 expn1 subn1.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma card_GL_2 : #|'GL_2[F]| = (#|F| * #|F|.-1 ^ 2 * #|F|.+1)%N.",
            "VernacStartTheoremProof",
            "ed1508a1a00906d8ca9d383839447f109046c710"
        ],
        [
            "rewrite card_GL // big_ltn // big_nat1 expn1 -(addn1 #|F|) -subn1 -!mulnA.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "by rewrite -subn_sqr.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "End CardGL.",
            "VernacEndSegment",
            "2eb684fe499d0a3b05720cafd98f8dc568b0e011"
        ],
        [
            "Lemma logn_card_GL_p n p : prime p -> logn p #|'GL_n(p)| = 'C(n, 2).",
            "VernacStartTheoremProof",
            "292fe8cda60ffc8169e35091fd3d1c5ddf3f30e3"
        ],
        [
            "move=> p_pr; have p_gt1 := prime_gt1 p_pr.",
            "VernacExtend",
            "ccd83c252dcbae3d56f3d057fcb8217878b51901"
        ],
        [
            "have p_i_gt0: p ^ _ > 0 by move=> i; rewrite expn_gt0 ltnW.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "rewrite (card_GL _ (ltn0Sn n.-1)) card_ord Fp_cast // big_add1 /=.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "pose p'gt0 m := m > 0 /\\ logn p m = 0%N.",
            "VernacExtend",
            "3c5f04de94609049d978298aa02ff35fb35ea7c7"
        ],
        [
            "suffices [Pgt0 p'P]: p'gt0 (\\prod_(0 <= i < n.-1.+1) (p ^ i.+1 - 1))%N.",
            "VernacExtend",
            "290ed488b5562e885aa2cac56f3a69b4faa0eaa6"
        ],
        [
            "by rewrite lognM // p'P pfactorK //; case n.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "apply big_ind => [|m1 m2 [m10 p'm1] [m20]|i _]; rewrite {}/p'gt0 ?logn1 //.",
            "VernacExtend",
            "82d53976234637e3f0907eb36cddf61d028c6306"
        ],
        [
            "by rewrite muln_gt0 m10 lognM ?p'm1.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "rewrite lognE -if_neg subn_gt0 p_pr /= -{1 2}(exp1n i.+1) ltn_exp2r // p_gt1.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "by rewrite dvdn_subr ?dvdn_exp // gtnNdvd.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Section MatrixAlgebra.",
            "VernacBeginSection",
            "302cd89745ecab31a63eb1a8bab98ac188747f5c"
        ],
        [
            "Variables F : fieldType.",
            "VernacAssumption",
            "dfbeb3104cff90ac5c843c17124389867a4c6a4a"
        ],
        [
            "Local Notation \"A \\in R\" := (@submx F _ _ _ (mxvec A) R).",
            "VernacNotation",
            "93361346f6f531d6d7928ae2a3fe76f0836d6d8d"
        ],
        [
            "Lemma mem0mx m n (R : 'A_(m, n)) : 0 \\in R.",
            "VernacStartTheoremProof",
            "fdf7732bfc96d8a52b585ed821a887a6b004ee12"
        ],
        [
            "by rewrite linear0 sub0mx.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma memmx0 n A : (A \\in (0 : 'A_n)) -> A = 0.",
            "VernacStartTheoremProof",
            "f23852e3c6a3f334c8e4b428700ca171c2e0e363"
        ],
        [
            "by rewrite submx0 mxvec_eq0; move/eqP.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma memmx1 n (A : 'M_n) : (A \\in mxvec 1%:M) = is_scalar_mx A.",
            "VernacStartTheoremProof",
            "7f55b6c0cf8969b1e1f6a74ac6f25bc47d35e18b"
        ],
        [
            "apply/sub_rVP/is_scalar_mxP=> [[a] | [a ->]].",
            "VernacExtend",
            "4bd6fa79b17bcd2bfb7af091fb325367a20385d6"
        ],
        [
            "by rewrite -linearZ scale_scalar_mx mulr1 => /(can_inj mxvecK); exists a.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "by exists a; rewrite -linearZ scale_scalar_mx mulr1.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma memmx_subP m1 m2 n (R1 : 'A_(m1, n)) (R2 : 'A_(m2, n)) : reflect (forall A, A \\in R1 -> A \\in R2) (R1 <= R2)%MS.",
            "VernacStartTheoremProof",
            "4ab28e22f86594cd7340558dc0d80397218d0631"
        ],
        [
            "apply: (iffP idP) => [sR12 A R1_A | sR12]; first exact: submx_trans sR12.",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "by apply/rV_subP=> vA; rewrite -(vec_mxK vA); apply: sR12.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Arguments memmx_subP {m1 m2 n R1 R2}.",
            "VernacArguments",
            "d189b2258222f365b34bf5b4d4a95bb17e9a3ea4"
        ],
        [
            "Lemma memmx_eqP m1 m2 n (R1 : 'A_(m1, n)) (R2 : 'A_(m2, n)) : reflect (forall A, (A \\in R1) = (A \\in R2)) (R1 == R2)%MS.",
            "VernacStartTheoremProof",
            "655c6ede0c6a6d335a0d0420e601abe9f782fa0d"
        ],
        [
            "apply: (iffP eqmxP) => [eqR12 A | eqR12]; first by rewrite eqR12.",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "by apply/eqmxP; apply/rV_eqP=> vA; rewrite -(vec_mxK vA) eqR12.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Arguments memmx_eqP {m1 m2 n R1 R2}.",
            "VernacArguments",
            "555e27257ad3f748632dee8cffd3cb7ee183e40e"
        ],
        [
            "Lemma memmx_addsP m1 m2 n A (R1 : 'A_(m1, n)) (R2 : 'A_(m2, n)) : reflect (exists D, [/\\ D.1 \\in R1, D.2 \\in R2 & A = D.1 + D.2]) (A \\in R1 + R2)%MS.",
            "VernacStartTheoremProof",
            "84f8d874713218aee51cd2dd7918371efaf98ec9"
        ],
        [
            "apply: (iffP sub_addsmxP) => [[u /(canRL mxvecK)->] | [D []]].",
            "VernacExtend",
            "4bd6fa79b17bcd2bfb7af091fb325367a20385d6"
        ],
        [
            "exists (vec_mx (u.1 *m R1), vec_mx (u.2 *m R2)).",
            "VernacExtend",
            "0ac70646edffc75c9ecd5fb6c36d5bd9c45acef9"
        ],
        [
            "by rewrite /= linearD !vec_mxK !submxMl.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "case/submxP=> u1 defD1 /submxP[u2 defD2] ->.",
            "VernacExtend",
            "e00fff71ff314c991514fc71c41a3556702e444a"
        ],
        [
            "by exists (u1, u2); rewrite linearD /= defD1 defD2.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Arguments memmx_addsP {m1 m2 n A R1 R2}.",
            "VernacArguments",
            "abed297506643b3a12400885a7ba9da52e6c003b"
        ],
        [
            "Lemma memmx_sumsP (I : finType) (P : pred I) n (A : 'M_n) R_ : reflect (exists2 A_, A = \\sum_(i | P i) A_ i & forall i, A_ i \\in R_ i) (A \\in \\sum_(i | P i) R_ i)%MS.",
            "VernacStartTheoremProof",
            "fe1472f3060bfaab24bc6667732936237bfd69ac"
        ],
        [
            "apply: (iffP sub_sumsmxP) => [[C defA] | [A_ -> R_A] {A}].",
            "VernacExtend",
            "4bd6fa79b17bcd2bfb7af091fb325367a20385d6"
        ],
        [
            "exists (fun i => vec_mx (C i *m R_ i)) => [|i].",
            "VernacExtend",
            "3c42b53d0efc26db114b00541ac5e7fcb29e6aeb"
        ],
        [
            "by rewrite -linear_sum -defA /= mxvecK.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "by rewrite vec_mxK submxMl.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "exists (fun i => mxvec (A_ i) *m pinvmx (R_ i)).",
            "VernacExtend",
            "e5cdb64a1e9c6e7aa08e956c16b90c1f06c4755c"
        ],
        [
            "by rewrite linear_sum; apply: eq_bigr => i _; rewrite mulmxKpV.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Arguments memmx_sumsP {I P n A R_}.",
            "VernacArguments",
            "4aceb15d0e486581c2e73aa18731f1bdf96eae58"
        ],
        [
            "Lemma has_non_scalar_mxP m n (R : 'A_(m, n)) : (1%:M \\in R)%MS -> reflect (exists2 A, A \\in R & ~~ is_scalar_mx A)%MS (1 < \\rank R).",
            "VernacStartTheoremProof",
            "7618f1d56cbc14547417548bb52f8d178b21f594"
        ],
        [
            "case: (posnP n) => [-> | n_gt0] in R *; set S := mxvec _ => sSR.",
            "VernacExtend",
            "ba44c9d0281a02110ce54645304e6d990debd9c0"
        ],
        [
            "by rewrite [R]thinmx0 mxrank0; right; case; rewrite /is_scalar_mx ?insubF.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "have rankS: \\rank S = 1%N.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "apply/eqP; rewrite eqn_leq rank_leq_row lt0n mxrank_eq0 mxvec_eq0.",
            "VernacExtend",
            "56c014161b39aecfb3c54301c2409dba4e8e1857"
        ],
        [
            "by rewrite -mxrank_eq0 mxrank1 -lt0n.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "rewrite -{2}rankS (ltn_leqif (mxrank_leqif_sup sSR)).",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "apply: (iffP idP) => [/row_subPn[i] | [A sAR]].",
            "VernacExtend",
            "4bd6fa79b17bcd2bfb7af091fb325367a20385d6"
        ],
        [
            "rewrite -[row i R]vec_mxK memmx1; set A := vec_mx _ => nsA.",
            "VernacExtend",
            "80e7cce19c53eb5d5a21aafd83e552d37e23084a"
        ],
        [
            "by exists A; rewrite // vec_mxK row_sub.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "by rewrite -memmx1; apply/contra/submx_trans.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Definition mulsmx m1 m2 n (R1 : 'A[F]_(m1, n)) (R2 : 'A_(m2, n)) := (\\sum_i <<R1 *m lin_mx (mulmxr (vec_mx (row i R2)))>>)%MS.",
            "VernacDefinition",
            "51a2e5391e32bd6292ec3211f42c18186232152e"
        ],
        [
            "Arguments mulsmx {m1%N m2%N n%N} R1%MS R2%MS.",
            "VernacArguments",
            "c209d465258388abf67022ebd6305b0b6de25d5a"
        ],
        [
            "Local Notation \"R1 * R2\" := (mulsmx R1 R2) : matrix_set_scope.",
            "VernacNotation",
            "33285be2941a2227f1908ba06af15abe296c7ed2"
        ],
        [
            "Lemma genmx_muls m1 m2 n (R1 : 'A_(m1, n)) (R2 : 'A_(m2, n)) : <<(R1 * R2)%MS>>%MS = (R1 * R2)%MS.",
            "VernacStartTheoremProof",
            "aca571abc2dd0f13600d7d81395a309cacc3087c"
        ],
        [
            "by rewrite genmx_sums; apply: eq_bigr => i; rewrite genmx_id.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma mem_mulsmx m1 m2 n (R1 : 'A_(m1, n)) (R2 : 'A_(m2, n)) A1 A2 : (A1 \\in R1 -> A2 \\in R2 -> A1 *m A2 \\in R1 * R2)%MS.",
            "VernacStartTheoremProof",
            "0616721c64265e20112f82569890d2bafbd22295"
        ],
        [
            "move=> R_A1 R_A2; rewrite -[A2]mxvecK; case/submxP: R_A2 => a ->{A2}.",
            "VernacExtend",
            "d7214ac8fd48f4d1cd143edd9d16f6d28386a302"
        ],
        [
            "rewrite mulmx_sum_row !linear_sum summx_sub // => i _.",
            "VernacExtend",
            "3c42b53d0efc26db114b00541ac5e7fcb29e6aeb"
        ],
        [
            "rewrite !linearZ scalemx_sub {a}//= (sumsmx_sup i) // genmxE.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "rewrite -[A1]mxvecK; case/submxP: R_A1 => a ->{A1}.",
            "VernacExtend",
            "712d339e99ee17eb7d5033e19ac614eb3ca6b532"
        ],
        [
            "by apply/submxP; exists a; rewrite mulmxA mul_rV_lin.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma mulsmx_subP m1 m2 m n (R1 : 'A_(m1, n)) (R2 : 'A_(m2, n)) (R : 'A_(m, n)) : reflect (forall A1 A2, A1 \\in R1 -> A2 \\in R2 -> A1 *m A2 \\in R) (R1 * R2 <= R)%MS.",
            "VernacStartTheoremProof",
            "a8c429c61430fdc6f105f4941e61473ff8bd2c2a"
        ],
        [
            "apply: (iffP memmx_subP) => [sR12R A1 A2 R_A1 R_A2 | sR12R A].",
            "VernacExtend",
            "4bd6fa79b17bcd2bfb7af091fb325367a20385d6"
        ],
        [
            "by rewrite sR12R ?mem_mulsmx.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "case/memmx_sumsP=> A_ -> R_A; rewrite linear_sum summx_sub //= => j _.",
            "VernacExtend",
            "ba44c9d0281a02110ce54645304e6d990debd9c0"
        ],
        [
            "rewrite (submx_trans (R_A _)) // genmxE; apply/row_subP=> i.",
            "VernacExtend",
            "634a7639ed2fb7caf62757f84400927f5829b7d5"
        ],
        [
            "by rewrite row_mul mul_rV_lin sR12R ?vec_mxK ?row_sub.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Arguments mulsmx_subP {m1 m2 m n R1 R2 R}.",
            "VernacArguments",
            "131c10f2e7e32fed121a8cb30780bb3623860778"
        ],
        [
            "Lemma mulsmxS m1 m2 m3 m4 n (R1 : 'A_(m1, n)) (R2 : 'A_(m2, n)) (R3 : 'A_(m3, n)) (R4 : 'A_(m4, n)) : (R1 <= R3 -> R2 <= R4 -> R1 * R2 <= R3 * R4)%MS.",
            "VernacStartTheoremProof",
            "41be97d947754d9287fdebfbf3765f0d4889d5d8"
        ],
        [
            "move=> sR13 sR24; apply/mulsmx_subP=> A1 A2 R_A1 R_A2.",
            "VernacExtend",
            "d6ebf3361f380a12d5c2c9bbb7ea363132c48b36"
        ],
        [
            "by apply: mem_mulsmx; [apply: submx_trans sR13 | apply: submx_trans sR24].",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma muls_eqmx m1 m2 m3 m4 n (R1 : 'A_(m1, n)) (R2 : 'A_(m2, n)) (R3 : 'A_(m3, n)) (R4 : 'A_(m4, n)) : (R1 :=: R3 -> R2 :=: R4 -> R1 * R2 = R3 * R4)%MS.",
            "VernacStartTheoremProof",
            "29c2357add4a1827bb3fc028e1058dce1fa1f587"
        ],
        [
            "move=> eqR13 eqR24; rewrite -(genmx_muls R1 R2) -(genmx_muls R3 R4).",
            "VernacExtend",
            "057edeb0967475c7ea5e8c98c449ddc5613eddc1"
        ],
        [
            "by apply/genmxP; rewrite !mulsmxS ?eqR13 ?eqR24.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma mulsmxP m1 m2 n A (R1 : 'A_(m1, n)) (R2 : 'A_(m2, n)) : reflect (exists2 A1, forall i, A1 i \\in R1 & exists2 A2, forall i, A2 i \\in R2 & A = \\sum_(i < n ^ 2) A1 i *m A2 i) (A \\in R1 * R2)%MS.",
            "VernacStartTheoremProof",
            "b67ba7f5301267dc6e6e60fba8a78ba5b41e2544"
        ],
        [
            "apply: (iffP idP) => [R_A|[A1 R_A1 [A2 R_A2 ->{A}]]]; last first.",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "by rewrite linear_sum summx_sub // => i _; rewrite mem_mulsmx.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "have{R_A}: (A \\in R1 * <<R2>>)%MS.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "by apply: memmx_subP R_A; rewrite mulsmxS ?genmxE.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "case/memmx_sumsP=> A_ -> R_A; pose A2_ i := vec_mx (row i <<R2>>%MS).",
            "VernacExtend",
            "61f7313c68f88d92a678d74fe9c99999257a468e"
        ],
        [
            "pose A1_ i := mxvec (A_ i) *m pinvmx (R1 *m lin_mx (mulmxr (A2_ i))) *m R1.",
            "VernacExtend",
            "3c5f04de94609049d978298aa02ff35fb35ea7c7"
        ],
        [
            "exists (vec_mx \\o A1_) => [i|]; first by rewrite vec_mxK submxMl.",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "exists A2_ => [i|]; first by rewrite vec_mxK -(genmxE R2) row_sub.",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "apply: eq_bigr => i _; rewrite -[_ *m _](mx_rV_lin (mulmxr_linear _ _)).",
            "VernacExtend",
            "56c014161b39aecfb3c54301c2409dba4e8e1857"
        ],
        [
            "by rewrite -mulmxA mulmxKpV ?mxvecK // -(genmxE (_ *m _)) R_A.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Arguments mulsmxP {m1 m2 n A R1 R2}.",
            "VernacArguments",
            "d6530b656b5f965d17b30d06fe969888bb55a155"
        ],
        [
            "Lemma mulsmxA m1 m2 m3 n (R1 : 'A_(m1, n)) (R2 : 'A_(m2, n)) (R3 : 'A_(m3, n)) : (R1 * (R2 * R3) = R1 * R2 * R3)%MS.",
            "VernacStartTheoremProof",
            "9e0f4918844488aead141ab41827ea87a69ab019"
        ],
        [
            "rewrite -(genmx_muls (_ * _)%MS) -genmx_muls; apply/genmxP; apply/andP; split.",
            "VernacExtend",
            "cb8d656d85946675fe947c6b8efa24ce39488367"
        ],
        [
            "apply/mulsmx_subP=> A1 A23 R_A1; case/mulsmxP=> A2 R_A2 [A3 R_A3 ->{A23}].",
            "VernacExtend",
            "20ec428e50c31e1399aee62c5a532bc8417a4b29"
        ],
        [
            "by rewrite !linear_sum summx_sub //= => i _; rewrite mulmxA !mem_mulsmx.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "apply/mulsmx_subP=> _ A3 /mulsmxP[A1 R_A1 [A2 R_A2 ->]] R_A3.",
            "VernacExtend",
            "4bd6fa79b17bcd2bfb7af091fb325367a20385d6"
        ],
        [
            "rewrite mulmx_suml linear_sum summx_sub //= => i _.",
            "VernacExtend",
            "3c42b53d0efc26db114b00541ac5e7fcb29e6aeb"
        ],
        [
            "by rewrite -mulmxA !mem_mulsmx.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma mulsmx_addl m1 m2 m3 n (R1 : 'A_(m1, n)) (R2 : 'A_(m2, n)) (R3 : 'A_(m3, n)) : ((R1 + R2) * R3 = R1 * R3 + R2 * R3)%MS.",
            "VernacStartTheoremProof",
            "24a85ad66a4dd0c33fdcbda2302bc8d3ad49e5d9"
        ],
        [
            "rewrite -(genmx_muls R2 R3) -(genmx_muls R1 R3) -genmx_muls -genmx_adds.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "apply/genmxP; rewrite andbC addsmx_sub !mulsmxS ?addsmxSl ?addsmxSr //=.",
            "VernacExtend",
            "56c014161b39aecfb3c54301c2409dba4e8e1857"
        ],
        [
            "apply/mulsmx_subP=> _ A3 /memmx_addsP[A [R_A1 R_A2 ->]] R_A3.",
            "VernacExtend",
            "4bd6fa79b17bcd2bfb7af091fb325367a20385d6"
        ],
        [
            "by rewrite mulmxDl linearD addmx_sub_adds ?mem_mulsmx.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma mulsmx_addr m1 m2 m3 n (R1 : 'A_(m1, n)) (R2 : 'A_(m2, n)) (R3 : 'A_(m3, n)) : (R1 * (R2 + R3) = R1 * R2 + R1 * R3)%MS.",
            "VernacStartTheoremProof",
            "4d7af37e073f6137519c586236b75846ea912607"
        ],
        [
            "rewrite -(genmx_muls R1 R3) -(genmx_muls R1 R2) -genmx_muls -genmx_adds.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "apply/genmxP; rewrite andbC addsmx_sub !mulsmxS ?addsmxSl ?addsmxSr //=.",
            "VernacExtend",
            "56c014161b39aecfb3c54301c2409dba4e8e1857"
        ],
        [
            "apply/mulsmx_subP=> A1 _ R_A1 /memmx_addsP[A [R_A2 R_A3 ->]].",
            "VernacExtend",
            "4bd6fa79b17bcd2bfb7af091fb325367a20385d6"
        ],
        [
            "by rewrite mulmxDr linearD addmx_sub_adds ?mem_mulsmx.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma mulsmx0 m1 m2 n (R1 : 'A_(m1, n)) : (R1 * (0 : 'A_(m2, n)) = 0)%MS.",
            "VernacStartTheoremProof",
            "32d92e4473bbcd9caf7545cc69bb672a550f1e7d"
        ],
        [
            "apply/eqP; rewrite -submx0; apply/mulsmx_subP=> A1 A0 _.",
            "VernacExtend",
            "da24caf87c1bbbad0538b8be68905ec456c78aa7"
        ],
        [
            "by rewrite [A0 \\in 0]eqmx0 => /memmx0->; rewrite mulmx0 mem0mx.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma muls0mx m1 m2 n (R2 : 'A_(m2, n)) : ((0 : 'A_(m1, n)) * R2 = 0)%MS.",
            "VernacStartTheoremProof",
            "3d9beac70838e8bed690e23d5feb551c986cee88"
        ],
        [
            "apply/eqP; rewrite -submx0; apply/mulsmx_subP=> A0 A2.",
            "VernacExtend",
            "da24caf87c1bbbad0538b8be68905ec456c78aa7"
        ],
        [
            "by rewrite [A0 \\in 0]eqmx0 => /memmx0->; rewrite mul0mx mem0mx.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Definition left_mx_ideal m1 m2 n (R1 : 'A_(m1, n)) (R2 : 'A_(m2, n)) := (R1 * R2 <= R2)%MS.",
            "VernacDefinition",
            "b000d96b22327d8742fa8910d80cd9e5265441f3"
        ],
        [
            "Definition right_mx_ideal m1 m2 n (R1 : 'A_(m1, n)) (R2 : 'A_(m2, n)) := (R2 * R1 <= R2)%MS.",
            "VernacDefinition",
            "6992682e178b1df9fe1f08ca808e738031416be7"
        ],
        [
            "Definition mx_ideal m1 m2 n (R1 : 'A_(m1, n)) (R2 : 'A_(m2, n)) := left_mx_ideal R1 R2 && right_mx_ideal R1 R2.",
            "VernacDefinition",
            "6358586df46b3c45be5d0aca54f0a72f548e80b3"
        ],
        [
            "Definition mxring_id m n (R : 'A_(m, n)) e := [/\\ e != 0, e \\in R, forall A, A \\in R -> e *m A = A & forall A, A \\in R -> A *m e = A]%MS.",
            "VernacDefinition",
            "a9f08d7a78bc4e0b32e19bcc66bdc400a9dc1bdb"
        ],
        [
            "Definition has_mxring_id m n (R : 'A[F]_(m , n)) := (R != 0) && (row_mx 0 (row_mx (mxvec R) (mxvec R)) <= row_mx (cokermx R) (row_mx (lin_mx (mulmx R \\o lin_mulmx)) (lin_mx (mulmx R \\o lin_mulmxr))))%MS.",
            "VernacDefinition",
            "c44c5b6cc5ca4808bbf81ccd81fe9c0f5d610f35"
        ],
        [
            "Definition mxring m n (R : 'A_(m, n)) := left_mx_ideal R R && has_mxring_id R.",
            "VernacDefinition",
            "dabc227a6bdabcbaeab7451abb3e692953330af3"
        ],
        [
            "Lemma mxring_idP m n (R : 'A_(m, n)) : reflect (exists e, mxring_id R e) (has_mxring_id R).",
            "VernacStartTheoremProof",
            "46a200701c528dcd81131e7cb482a68c6a79cef4"
        ],
        [
            "apply: (iffP andP) => [[nzR] | [e [nz_e Re ideR idRe]]].",
            "VernacExtend",
            "4bd6fa79b17bcd2bfb7af091fb325367a20385d6"
        ],
        [
            "case/submxP=> v; rewrite -[v]vec_mxK; move/vec_mx: v => e.",
            "VernacExtend",
            "c5cb6672fdde6b3af11f77240bf9bbcee9174e45"
        ],
        [
            "rewrite !mul_mx_row; case/eq_row_mx => /eqP.",
            "VernacExtend",
            "712d339e99ee17eb7d5033e19ac614eb3ca6b532"
        ],
        [
            "rewrite eq_sym -submxE => Re.",
            "VernacExtend",
            "3c42b53d0efc26db114b00541ac5e7fcb29e6aeb"
        ],
        [
            "case/eq_row_mx; rewrite !{1}mul_rV_lin1 /= mxvecK.",
            "VernacExtend",
            "90a2acb29b7a5304b0ab6ba5269c420638ddef63"
        ],
        [
            "set u := (_ *m _) => /(can_inj mxvecK) idRe /(can_inj mxvecK) ideR.",
            "VernacExtend",
            "3c42b53d0efc26db114b00541ac5e7fcb29e6aeb"
        ],
        [
            "exists e; split=> // [ | A /submxP[a defA] | A /submxP[a defA]].",
            "VernacExtend",
            "9367a6adff36c85076f4b20454c9e00bd756194f"
        ],
        [
            "-",
            "VernacBullet",
            "581cab4bf49fa4b495e569bbda96fc8d28fddcc0"
        ],
        [
            "by apply: contra nzR; rewrite ideR => /eqP->; rewrite !linear0.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "-",
            "VernacBullet",
            "581cab4bf49fa4b495e569bbda96fc8d28fddcc0"
        ],
        [
            "by rewrite -{2}[A]mxvecK defA idRe mulmxA mx_rV_lin -defA /= mxvecK.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "by rewrite -{2}[A]mxvecK defA ideR mulmxA mx_rV_lin -defA /= mxvecK.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "split.",
            "VernacExtend",
            "55abc140132bd88981001ac656020469a8d503eb"
        ],
        [
            "by apply: contraNneq nz_e => R0; rewrite R0 eqmx0 in Re; rewrite (memmx0 Re).",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "apply/submxP; exists (mxvec e); rewrite !mul_mx_row !{1}mul_rV_lin1.",
            "VernacExtend",
            "fb55e36c7ba02ce34e7f705976c13a4814506132"
        ],
        [
            "rewrite submxE in Re; rewrite {Re}(eqP Re).",
            "VernacExtend",
            "2194fcb4d6d52cbae24a29f7ff14a3997f1912fd"
        ],
        [
            "congr (row_mx 0 (row_mx (mxvec _) (mxvec _))); apply/row_matrixP=> i.",
            "VernacExtend",
            "385739dd8a4f73703d3828c61e1780a276bfaa31"
        ],
        [
            "by rewrite !row_mul !mul_rV_lin1 /= mxvecK ideR vec_mxK ?row_sub.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "by rewrite !row_mul !mul_rV_lin1 /= mxvecK idRe vec_mxK ?row_sub.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Arguments mxring_idP {m n R}.",
            "VernacArguments",
            "57cd66f94ce2cbced9532364fe88cf31f4501205"
        ],
        [
            "Section CentMxDef.",
            "VernacBeginSection",
            "53c93740c100f9cb843ce306b5c48d21f529aa60"
        ],
        [
            "Variables (m n : nat) (R : 'A[F]_(m, n)).",
            "VernacAssumption",
            "d8cb4bdb8b54021b6a91614de9e96130c113db25"
        ],
        [
            "Definition cent_mx_fun (B : 'M[F]_n) := R *m lin_mx (mulmxr B \\- mulmx B).",
            "VernacDefinition",
            "9bd24ff17f76edd61631c1f8de3decc4664a334c"
        ],
        [
            "Lemma cent_mx_fun_is_linear : linear cent_mx_fun.",
            "VernacStartTheoremProof",
            "844f2610b4e71e8b015d364795ee3d7c604efeff"
        ],
        [
            "move=> a A B; apply/row_matrixP=> i; rewrite linearP row_mul mul_rV_lin.",
            "VernacExtend",
            "f7feb259d6220ca40e8a86b90bd06f137aa140ac"
        ],
        [
            "rewrite /= {-3}[row]lock row_mul mul_rV_lin -lock row_mul mul_rV_lin.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "by rewrite -linearP -(linearP [linear of mulmx _ \\- mulmxr _]).",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Canonical cent_mx_fun_additive := Additive cent_mx_fun_is_linear.",
            "VernacDefinition",
            "431d9d8b3ddfdf35586183caa5ab16006bba9490"
        ],
        [
            "Canonical cent_mx_fun_linear := Linear cent_mx_fun_is_linear.",
            "VernacDefinition",
            "b4d16422f88ef63a63b4e37a6b60389b1188265e"
        ],
        [
            "Definition cent_mx := kermx (lin_mx cent_mx_fun).",
            "VernacDefinition",
            "04e0262a6b8ad4a78f5fbbe5bc6f8a73bfc5350b"
        ],
        [
            "Definition center_mx := (R :&: cent_mx)%MS.",
            "VernacDefinition",
            "36800ef9f68551a9e8adab3be1fc4e111950938c"
        ],
        [
            "End CentMxDef.",
            "VernacEndSegment",
            "f985c293311468d314dc536bb5af39f1c1b171cf"
        ],
        [
            "Local Notation \"''C' ( R )\" := (cent_mx R) : matrix_set_scope.",
            "VernacNotation",
            "3da807a06c9c5b50d772e4ab3b6bdb8689227a34"
        ],
        [
            "Local Notation \"''Z' ( R )\" := (center_mx R) : matrix_set_scope.",
            "VernacNotation",
            "f3dae87ff3d7b09bb4e037b161166c72702ffd34"
        ],
        [
            "Lemma cent_rowP m n B (R : 'A_(m, n)) : reflect (forall i (A := vec_mx (row i R)), A *m B = B *m A) (B \\in 'C(R))%MS.",
            "VernacStartTheoremProof",
            "6cdde69679aa7cf09587adad5f016d7a4d9510fd"
        ],
        [
            "apply: (iffP sub_kermxP); rewrite mul_vec_lin => cBE.",
            "VernacExtend",
            "5fce7e5361004176d6b434b36b4623c7387f70bb"
        ],
        [
            "move/(canRL mxvecK): cBE => cBE i A /=; move/(congr1 (row i)): cBE.",
            "VernacExtend",
            "8b784377bdc4d565ff66d4cf36a6041e9354c156"
        ],
        [
            "rewrite row_mul mul_rV_lin -/A; move/(canRL mxvecK).",
            "VernacExtend",
            "7e529e80bb2879787ee6d9466056f19f0215c721"
        ],
        [
            "by move/(canRL (subrK _)); rewrite !linear0 add0r.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "apply: (canLR vec_mxK); apply/row_matrixP=> i.",
            "VernacExtend",
            "8d9dae45eeb3a769b8a865cef8ae476451f63802"
        ],
        [
            "by rewrite row_mul mul_rV_lin /= cBE subrr !linear0.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Arguments cent_rowP {m n B R}.",
            "VernacArguments",
            "7668dd78c9633167762e6cc6ff806052c100acfb"
        ],
        [
            "Lemma cent_mxP m n B (R : 'A_(m, n)) : reflect (forall A, A \\in R -> A *m B = B *m A) (B \\in 'C(R))%MS.",
            "VernacStartTheoremProof",
            "ceeb5a810cd1b4de6ff8285e8041bee239841e61"
        ],
        [
            "apply: (iffP cent_rowP) => cEB => [A sAE | i A].",
            "VernacExtend",
            "3c42b53d0efc26db114b00541ac5e7fcb29e6aeb"
        ],
        [
            "rewrite -[A]mxvecK -(mulmxKpV sAE); move: (mxvec A *m _) => u.",
            "VernacExtend",
            "7e529e80bb2879787ee6d9466056f19f0215c721"
        ],
        [
            "rewrite !mulmx_sum_row !linear_sum mulmx_suml; apply: eq_bigr => i _ /=.",
            "VernacExtend",
            "634a7639ed2fb7caf62757f84400927f5829b7d5"
        ],
        [
            "by rewrite !linearZ -scalemxAl /= cEB.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "by rewrite cEB // vec_mxK row_sub.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Arguments cent_mxP {m n B R}.",
            "VernacArguments",
            "c01b7fb88ab6b397b2da0e00d7112f3a9701fc1e"
        ],
        [
            "Lemma scalar_mx_cent m n a (R : 'A_(m, n)) : (a%:M \\in 'C(R))%MS.",
            "VernacStartTheoremProof",
            "7d10f684f6ce644f02f718c0de3d759b01b6beec"
        ],
        [
            "by apply/cent_mxP=> A _; apply: scalar_mxC.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma center_mx_sub m n (R : 'A_(m, n)) : ('Z(R) <= R)%MS.",
            "VernacStartTheoremProof",
            "3761d127459f531aafb4403ab75c6f8662ba0ab0"
        ],
        [
            "exact: capmxSl.",
            "VernacExtend",
            "ce637ff86bafca5d8359473e8c02af644dcbdc43"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma center_mxP m n A (R : 'A_(m, n)) : reflect (A \\in R /\\ forall B, B \\in R -> B *m A = A *m B) (A \\in 'Z(R))%MS.",
            "VernacStartTheoremProof",
            "fe0a3627c9212bef78a42cd791d9b744569048f8"
        ],
        [
            "rewrite sub_capmx; case R_A: (A \\in R); last by right; case.",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "by apply: (iffP cent_mxP) => [cAR | [_ cAR]].",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Arguments center_mxP {m n A R}.",
            "VernacArguments",
            "447c1b618bcdb8e1a438738c16bc8e8681c50750"
        ],
        [
            "Lemma mxring_id_uniq m n (R : 'A_(m, n)) e1 e2 : mxring_id R e1 -> mxring_id R e2 -> e1 = e2.",
            "VernacStartTheoremProof",
            "a80254b005be635b863ef4bdae7adebbc82e39fc"
        ],
        [
            "by case=> [_ Re1 idRe1 _] [_ Re2 _ ide2R]; rewrite -(idRe1 _ Re2) ide2R.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma cent_mx_ideal m n (R : 'A_(m, n)) : left_mx_ideal 'C(R)%MS 'C(R)%MS.",
            "VernacStartTheoremProof",
            "d06df30e441e9160d4079484bd442fb680541c24"
        ],
        [
            "apply/mulsmx_subP=> A1 A2 C_A1 C_A2; apply/cent_mxP=> B R_B.",
            "VernacExtend",
            "8d9dae45eeb3a769b8a865cef8ae476451f63802"
        ],
        [
            "by rewrite mulmxA (cent_mxP C_A1) // -!mulmxA (cent_mxP C_A2).",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma cent_mx_ring m n (R : 'A_(m, n)) : n > 0 -> mxring 'C(R)%MS.",
            "VernacStartTheoremProof",
            "63a2ae77bc6748821989237753f7be1cce776cd2"
        ],
        [
            "move=> n_gt0; rewrite /mxring cent_mx_ideal; apply/mxring_idP.",
            "VernacExtend",
            "0fa388cebe8ed6372154caa26cd10c357f123670"
        ],
        [
            "exists 1%:M; split=> [||A _|A _]; rewrite ?mulmx1 ?mul1mx ?scalar_mx_cent //.",
            "VernacExtend",
            "0173c99dee17be2d58645c7b04a174d7685c5cad"
        ],
        [
            "by rewrite -mxrank_eq0 mxrank1 -lt0n.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma mxdirect_adds_center m1 m2 n (R1 : 'A_(m1, n)) (R2 : 'A_(m2, n)) : mx_ideal (R1 + R2)%MS R1 -> mx_ideal (R1 + R2)%MS R2 -> mxdirect (R1 + R2) -> ('Z((R1 + R2)%MS) :=: 'Z(R1) + 'Z(R2))%MS.",
            "VernacStartTheoremProof",
            "7c0b753a35f197c1e5d02eb280e75fd6cc3249f3"
        ],
        [
            "case/andP=> idlR1 idrR1 /andP[idlR2 idrR2] /mxdirect_addsP dxR12.",
            "VernacExtend",
            "e00fff71ff314c991514fc71c41a3556702e444a"
        ],
        [
            "apply/eqmxP/andP; split.",
            "VernacExtend",
            "b146763f64aeff143afb9ba1b7b1a677b4726e0f"
        ],
        [
            "apply/memmx_subP=> z0; rewrite sub_capmx => /andP[].",
            "VernacExtend",
            "5fce7e5361004176d6b434b36b4623c7387f70bb"
        ],
        [
            "case/memmx_addsP=> z [R1z1 R2z2 ->{z0}] Cz.",
            "VernacExtend",
            "e00fff71ff314c991514fc71c41a3556702e444a"
        ],
        [
            "rewrite linearD addmx_sub_adds //= ?sub_capmx ?R1z1 ?R2z2 /=.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "apply/cent_mxP=> A R1_A; have R_A := submx_trans R1_A (addsmxSl R1 R2).",
            "VernacExtend",
            "c574574294cc642b01d157e4c8f21ac2f90e4b5d"
        ],
        [
            "have Rz2 := submx_trans R2z2 (addsmxSr R1 R2).",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "rewrite -{1}[z.1](addrK z.2) mulmxBr (cent_mxP Cz) // mulmxDl.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "rewrite [A *m z.2]memmx0 1?[z.2 *m A]memmx0 ?addrK //.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "by rewrite -dxR12 sub_capmx (mulsmx_subP idlR1) // (mulsmx_subP idrR2).",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "by rewrite -dxR12 sub_capmx (mulsmx_subP idrR1) // (mulsmx_subP idlR2).",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "apply/cent_mxP=> A R2_A; have R_A := submx_trans R2_A (addsmxSr R1 R2).",
            "VernacExtend",
            "c574574294cc642b01d157e4c8f21ac2f90e4b5d"
        ],
        [
            "have Rz1 := submx_trans R1z1 (addsmxSl R1 R2).",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "rewrite -{1}[z.2](addKr z.1) mulmxDr (cent_mxP Cz) // mulmxDl.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "rewrite mulmxN [A *m z.1]memmx0 1?[z.1 *m A]memmx0 ?addKr //.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "by rewrite -dxR12 sub_capmx (mulsmx_subP idrR1) // (mulsmx_subP idlR2).",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "by rewrite -dxR12 sub_capmx (mulsmx_subP idlR1) // (mulsmx_subP idrR2).",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "rewrite addsmx_sub; apply/andP; split.",
            "VernacExtend",
            "563747ab88f591bd67f85e19847b20501f275f62"
        ],
        [
            "apply/memmx_subP=> z; rewrite sub_capmx => /andP[R1z cR1z].",
            "VernacExtend",
            "5fce7e5361004176d6b434b36b4623c7387f70bb"
        ],
        [
            "have Rz := submx_trans R1z (addsmxSl R1 R2).",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "rewrite sub_capmx Rz; apply/cent_mxP=> A0.",
            "VernacExtend",
            "634a7639ed2fb7caf62757f84400927f5829b7d5"
        ],
        [
            "case/memmx_addsP=> A [R1_A1 R2_A2] ->{A0}.",
            "VernacExtend",
            "e00fff71ff314c991514fc71c41a3556702e444a"
        ],
        [
            "have R_A2 := submx_trans R2_A2 (addsmxSr R1 R2).",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "rewrite mulmxDl mulmxDr (cent_mxP cR1z) //; congr (_ + _).",
            "VernacExtend",
            "a0279e71fd23ac6bde2b8b4402981a70ea719044"
        ],
        [
            "rewrite [A.2 *m z]memmx0 1?[z *m A.2]memmx0 //.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "by rewrite -dxR12 sub_capmx (mulsmx_subP idrR1) // (mulsmx_subP idlR2).",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "by rewrite -dxR12 sub_capmx (mulsmx_subP idlR1) // (mulsmx_subP idrR2).",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "apply/memmx_subP=> z; rewrite !sub_capmx => /andP[R2z cR2z].",
            "VernacExtend",
            "5fce7e5361004176d6b434b36b4623c7387f70bb"
        ],
        [
            "have Rz := submx_trans R2z (addsmxSr R1 R2); rewrite Rz.",
            "VernacExtend",
            "aa9d5fbc682ed874cd64b2543ca6c859b978e924"
        ],
        [
            "apply/cent_mxP=> _ /memmx_addsP[A [R1_A1 R2_A2 ->]].",
            "VernacExtend",
            "4bd6fa79b17bcd2bfb7af091fb325367a20385d6"
        ],
        [
            "rewrite mulmxDl mulmxDr (cent_mxP cR2z _ R2_A2) //; congr (_ + _).",
            "VernacExtend",
            "a0279e71fd23ac6bde2b8b4402981a70ea719044"
        ],
        [
            "have R_A1 := submx_trans R1_A1 (addsmxSl R1 R2).",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "rewrite [A.1 *m z]memmx0 1?[z *m A.1]memmx0 //.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "by rewrite -dxR12 sub_capmx (mulsmx_subP idlR1) // (mulsmx_subP idrR2).",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "by rewrite -dxR12 sub_capmx (mulsmx_subP idrR1) // (mulsmx_subP idlR2).",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma mxdirect_sums_center (I : finType) m n (R : 'A_(m, n)) R_ : (\\sum_i R_ i :=: R)%MS -> mxdirect (\\sum_i R_ i) -> (forall i : I, mx_ideal R (R_ i)) -> ('Z(R) :=: \\sum_i 'Z(R_ i))%MS.",
            "VernacStartTheoremProof",
            "a43649a797662627fcc33f69e51296487aafd41f"
        ],
        [
            "move=> defR dxR idealR.",
            "VernacExtend",
            "b1b2cb7a3a617cba67460b4eca1f04de3c1cc716"
        ],
        [
            "have sR_R: (R_ _ <= R)%MS by move=> i; rewrite -defR (sumsmx_sup i).",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "have anhR i j A B : i != j -> A \\in R_ i -> B \\in R_ j -> A *m B = 0.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "move=> ne_ij RiA RjB; apply: memmx0.",
            "VernacExtend",
            "d6ebf3361f380a12d5c2c9bbb7ea363132c48b36"
        ],
        [
            "have [[_ idRiR] [idRRj _]] := (andP (idealR i), andP (idealR j)).",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "rewrite -(mxdirect_sumsP dxR j) // sub_capmx (sumsmx_sup i) //.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "by rewrite (mulsmx_subP idRRj) // (memmx_subP (sR_R i)).",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "by rewrite (mulsmx_subP idRiR) // (memmx_subP (sR_R j)).",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "apply/eqmxP/andP; split.",
            "VernacExtend",
            "b146763f64aeff143afb9ba1b7b1a677b4726e0f"
        ],
        [
            "apply/memmx_subP=> Z; rewrite sub_capmx => /andP[].",
            "VernacExtend",
            "5fce7e5361004176d6b434b36b4623c7387f70bb"
        ],
        [
            "rewrite -{1}defR => /memmx_sumsP[z ->{Z} Rz cRz].",
            "VernacExtend",
            "3c42b53d0efc26db114b00541ac5e7fcb29e6aeb"
        ],
        [
            "apply/memmx_sumsP; exists z => // i; rewrite sub_capmx Rz.",
            "VernacExtend",
            "945ac9810113bf938ceefee9ae4e6b3a8be91952"
        ],
        [
            "apply/cent_mxP=> A RiA; have:= cent_mxP cRz A (memmx_subP (sR_R i) A RiA).",
            "VernacExtend",
            "c574574294cc642b01d157e4c8f21ac2f90e4b5d"
        ],
        [
            "rewrite (bigD1 i) //= mulmxDl mulmxDr mulmx_suml mulmx_sumr.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "by rewrite !big1 ?addr0 // => j; last rewrite eq_sym; move/anhR->.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "apply/sumsmx_subP => i _; apply/memmx_subP=> z; rewrite sub_capmx.",
            "VernacExtend",
            "7d4450169cd8610cf3ff90cd2eeb2f84258ab13d"
        ],
        [
            "case/andP=> Riz cRiz; rewrite sub_capmx (memmx_subP (sR_R i)) //=.",
            "VernacExtend",
            "90a2acb29b7a5304b0ab6ba5269c420638ddef63"
        ],
        [
            "apply/cent_mxP=> A; rewrite -{1}defR; case/memmx_sumsP=> a -> R_a.",
            "VernacExtend",
            "5caed936835e366e9e533d8f19382dcfedbf86d4"
        ],
        [
            "rewrite (bigD1 i) // mulmxDl mulmxDr mulmx_suml mulmx_sumr.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "rewrite !big1 => [|j|j]; first by rewrite !addr0 (cent_mxP cRiz).",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "by rewrite eq_sym => /anhR->.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "by move/anhR->.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "End MatrixAlgebra.",
            "VernacEndSegment",
            "c24a322126aa3dabbcf79c5fdeeebbfb19b853a0"
        ],
        [
            "Arguments mulsmx {F m1%N m2%N n%N} R1%MS R2%MS.",
            "VernacArguments",
            "8cba697d2ac4b7f0f11903e326de7886d99d3248"
        ],
        [
            "Arguments left_mx_ideal {F m1%N m2%N n%N} R%MS S%MS : rename.",
            "VernacArguments",
            "5459e994181ad085285d0463d0f78672c09ddd53"
        ],
        [
            "Arguments right_mx_ideal {F m1%N m2%N n%N} R%MS S%MS : rename.",
            "VernacArguments",
            "6b86b734826f0193caa5c4a3ab7cbba6c0dda3de"
        ],
        [
            "Arguments mx_ideal {F m1%N m2%N n%N} R%MS S%MS : rename.",
            "VernacArguments",
            "fe33877ff3b9bc765224941c1eea2259061b0c86"
        ],
        [
            "Arguments mxring_id {F m%N n%N} R%MS e%R.",
            "VernacArguments",
            "19715a15d60736424343bafcab8ddf42440bc466"
        ],
        [
            "Arguments has_mxring_id {F m%N n%N} R%MS.",
            "VernacArguments",
            "bfa66fdbfcbf286aa4af6de973ff9ddb3f47b068"
        ],
        [
            "Arguments mxring {F m%N n%N} R%MS.",
            "VernacArguments",
            "ab74ca69a99b12cff239f9d9af485865ce3f1b28"
        ],
        [
            "Arguments cent_mx {F m%N n%N} R%MS.",
            "VernacArguments",
            "3c809d8e551e47dd2373b9d61a41d376d4f29ce2"
        ],
        [
            "Arguments center_mx {F m%N n%N} R%MS.",
            "VernacArguments",
            "b68729363784a87d25dc1612c8a24cc8831b0934"
        ],
        [
            "Notation \"A \\in R\" := (submx (mxvec A) R) : matrix_set_scope.",
            "VernacNotation",
            "43be5378f5f45d3a64de7ef9a2424e86d384922f"
        ],
        [
            "Notation \"R * S\" := (mulsmx R S) : matrix_set_scope.",
            "VernacNotation",
            "247baa23d7f7df3d9eb3d3e698419023e1e85a1c"
        ],
        [
            "Notation \"''C' ( R )\" := (cent_mx R) : matrix_set_scope.",
            "VernacNotation",
            "6086e09ebeb13ce05e788e7fd572ca68e1138764"
        ],
        [
            "Notation \"''C_' R ( S )\" := (R :&: 'C(S))%MS : matrix_set_scope.",
            "VernacNotation",
            "31fe9b0e9d26d4896f0d7912940883f102024af6"
        ],
        [
            "Notation \"''C_' ( R ) ( S )\" := ('C_R(S))%MS (only parsing) : matrix_set_scope.",
            "VernacNotation",
            "9fd7bf1c90d3f31c8302635adeeab8744cdfae91"
        ],
        [
            "Notation \"''Z' ( R )\" := (center_mx R) : matrix_set_scope.",
            "VernacNotation",
            "d2ad985c209e82a0eb1bb889d7e04d4809219f37"
        ],
        [
            "Arguments memmx_subP {F m1 m2 n R1 R2}.",
            "VernacArguments",
            "5dfe377bfd3a8dfb5d1f14658db5d0f1d79db109"
        ],
        [
            "Arguments memmx_eqP {F m1 m2 n R1 R2}.",
            "VernacArguments",
            "2575f865ce0f926503fd788d27ae16d8418fe734"
        ],
        [
            "Arguments memmx_addsP {F m1 m2 n} A [R1 R2].",
            "VernacArguments",
            "d7974eb2c76c795b61d31f152f4aab0b268008dc"
        ],
        [
            "Arguments memmx_sumsP {F I P n A R_}.",
            "VernacArguments",
            "4a446d04996ae58554f593702dbf8600951f5bf3"
        ],
        [
            "Arguments mulsmx_subP {F m1 m2 m n R1 R2 R}.",
            "VernacArguments",
            "c2d81a2e86b4f0da8fcb6a511db901acac162704"
        ],
        [
            "Arguments mulsmxP {F m1 m2 n A R1 R2}.",
            "VernacArguments",
            "5e59c9b7dd507f13f7b614b157ffa51080ff3026"
        ],
        [
            "Arguments mxring_idP F {m n R}.",
            "VernacArguments",
            "80907496a54ec608610b138cf8b86121ea69d10b"
        ],
        [
            "Arguments cent_rowP {F m n B R}.",
            "VernacArguments",
            "be40643ee25db05b1fa340a154ce573bb003421b"
        ],
        [
            "Arguments cent_mxP {F m n B R}.",
            "VernacArguments",
            "3cf04debfa6ecaff3196a33b6009ca5f15373d39"
        ],
        [
            "Arguments center_mxP {F m n A R}.",
            "VernacArguments",
            "1adb9b8ac213385e03a23ba29d8c87f3812eef3d"
        ],
        [
            "Section MapMatrixSpaces.",
            "VernacBeginSection",
            "0b6a209fa57cdfe4cc5ca3a79e13e1177e5735d8"
        ],
        [
            "Variables (aF rF : fieldType) (f : {rmorphism aF -> rF}).",
            "VernacAssumption",
            "4f593e63392c9ceb07dc931d4908b7172e87f501"
        ],
        [
            "Local Notation \"A ^f\" := (map_mx f A) : ring_scope.",
            "VernacNotation",
            "d033ebfb6b3ca0334a58d61928e620230e19b20e"
        ],
        [
            "Lemma Gaussian_elimination_map m n (A : 'M_(m, n)) : Gaussian_elimination A^f = ((col_ebase A)^f, (row_ebase A)^f, \\rank A).",
            "VernacStartTheoremProof",
            "7d3d01dc4d715abcdcbf2d4eff927e07b6420447"
        ],
        [
            "rewrite mxrankE /row_ebase /col_ebase unlock.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "elim: m n A => [|m IHm] [|n] A /=; rewrite ?map_mx1 //.",
            "VernacExtend",
            "de65c8193056a36f6dbb91fe21357bd770b140db"
        ],
        [
            "set pAnz := [pred k | A k.1 k.2 != 0].",
            "VernacExtend",
            "69a61e99b234580f7b41fa5b9655c87ba9a76f70"
        ],
        [
            "rewrite (@eq_pick _ _ pAnz) => [|k]; last by rewrite /= mxE fmorph_eq0.",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "case: {+}(pick _) => [[i j]|]; last by rewrite !map_mx1.",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "rewrite mxE -fmorphV -map_xcol -map_xrow -map_dlsubmx -map_drsubmx.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "rewrite -map_ursubmx -map_mxZ -map_mxM -map_mx_sub {}IHm /=.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "case: {+}(Gaussian_elimination _) => [[L U] r] /=; rewrite map_xrow map_xcol.",
            "VernacExtend",
            "90a2acb29b7a5304b0ab6ba5269c420638ddef63"
        ],
        [
            "by rewrite !(@map_block_mx _ _ f 1 _ 1) !map_mx0 ?map_mx1 ?map_scalar_mx.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma mxrank_map m n (A : 'M_(m, n)) : \\rank A^f = \\rank A.",
            "VernacStartTheoremProof",
            "fe23e90d1a6f9457cab6b75e49e8dd558b041cad"
        ],
        [
            "by rewrite mxrankE Gaussian_elimination_map.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma row_free_map m n (A : 'M_(m, n)) : row_free A^f = row_free A.",
            "VernacStartTheoremProof",
            "0a6cf4469e31becd9a05331305b7dcbcce41dbf0"
        ],
        [
            "by rewrite /row_free mxrank_map.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma row_full_map m n (A : 'M_(m, n)) : row_full A^f = row_full A.",
            "VernacStartTheoremProof",
            "3f3bbe9c9d5d1d01c2fb951cd1fc9a09f354c979"
        ],
        [
            "by rewrite /row_full mxrank_map.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma map_row_ebase m n (A : 'M_(m, n)) : (row_ebase A)^f = row_ebase A^f.",
            "VernacStartTheoremProof",
            "783082744e99c84b4f673b384b2a901162abd1a1"
        ],
        [
            "by rewrite {2}/row_ebase unlock Gaussian_elimination_map.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma map_col_ebase m n (A : 'M_(m, n)) : (col_ebase A)^f = col_ebase A^f.",
            "VernacStartTheoremProof",
            "187d7f9b865fa5cc50f46d970e5e0ebf9b20225c"
        ],
        [
            "by rewrite {2}/col_ebase unlock Gaussian_elimination_map.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma map_row_base m n (A : 'M_(m, n)) : (row_base A)^f = castmx (mxrank_map A, erefl n) (row_base A^f).",
            "VernacStartTheoremProof",
            "633246ff0d950b8f6d0f94cdaaad7ecd4c57594c"
        ],
        [
            "move: (mxrank_map A); rewrite {2}/row_base mxrank_map => eqrr.",
            "VernacExtend",
            "8261237f0cda1915a4077c28869831c5329103ce"
        ],
        [
            "by rewrite castmx_id map_mxM map_pid_mx map_row_ebase.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma map_col_base m n (A : 'M_(m, n)) : (col_base A)^f = castmx (erefl m, mxrank_map A) (col_base A^f).",
            "VernacStartTheoremProof",
            "77ac04b1ebf8451b13372f772c23094694b16b1d"
        ],
        [
            "move: (mxrank_map A); rewrite {2}/col_base mxrank_map => eqrr.",
            "VernacExtend",
            "8261237f0cda1915a4077c28869831c5329103ce"
        ],
        [
            "by rewrite castmx_id map_mxM map_pid_mx map_col_ebase.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma map_pinvmx m n (A : 'M_(m, n)) : (pinvmx A)^f = pinvmx A^f.",
            "VernacStartTheoremProof",
            "3307f68da8eb86891fc6ffd6569340477d1690bc"
        ],
        [
            "rewrite !map_mxM !map_invmx map_row_ebase map_col_ebase.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "by rewrite map_pid_mx -mxrank_map.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma map_kermx m n (A : 'M_(m, n)) : (kermx A)^f = kermx A^f.",
            "VernacStartTheoremProof",
            "b4d40e34d2aa785f4bdee65498b20a7cf52d9e6b"
        ],
        [
            "by rewrite !map_mxM map_invmx map_col_ebase -mxrank_map map_copid_mx.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma map_cokermx m n (A : 'M_(m, n)) : (cokermx A)^f = cokermx A^f.",
            "VernacStartTheoremProof",
            "14df02d5cb21c30cfc7af1dfcaa0bdbfc2996008"
        ],
        [
            "by rewrite !map_mxM map_invmx map_row_ebase -mxrank_map map_copid_mx.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma map_submx m1 m2 n (A : 'M_(m1, n)) (B : 'M_(m2, n)) : (A^f <= B^f)%MS = (A <= B)%MS.",
            "VernacStartTheoremProof",
            "f1a0dc7d0bea38df3a88a7b9b1462704cb76269c"
        ],
        [
            "by rewrite !submxE -map_cokermx -map_mxM map_mx_eq0.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma map_ltmx m1 m2 n (A : 'M_(m1, n)) (B : 'M_(m2, n)) : (A^f < B^f)%MS = (A < B)%MS.",
            "VernacStartTheoremProof",
            "584badce1c63e7567d968688476addeb4788b4d9"
        ],
        [
            "by rewrite /ltmx !map_submx.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma map_eqmx m1 m2 n (A : 'M_(m1, n)) (B : 'M_(m2, n)) : (A^f :=: B^f)%MS <-> (A :=: B)%MS.",
            "VernacStartTheoremProof",
            "2ece907506c51ff9d486ef3361c776a0db937419"
        ],
        [
            "split=> [/eqmxP|eqAB]; first by rewrite !map_submx => /eqmxP.",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "by apply/eqmxP; rewrite !map_submx !eqAB !submx_refl.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma map_genmx m n (A : 'M_(m, n)) : (<<A>>^f :=: <<A^f>>)%MS.",
            "VernacStartTheoremProof",
            "c71b0492d1cef4df6a68e4215dcb8aceabd43130"
        ],
        [
            "by apply/eqmxP; rewrite !(genmxE, map_submx) andbb.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma map_addsmx m1 m2 n (A : 'M_(m1, n)) (B : 'M_(m2, n)) : (((A + B)%MS)^f :=: A^f + B^f)%MS.",
            "VernacStartTheoremProof",
            "4006f81976d4c1f94d83b8c653ff17ee033ff15e"
        ],
        [
            "by apply/eqmxP; rewrite !addsmxE -map_col_mx !map_submx !addsmxE andbb.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma map_capmx_gen m1 m2 n (A : 'M_(m1, n)) (B : 'M_(m2, n)) : (capmx_gen A B)^f = capmx_gen A^f B^f.",
            "VernacStartTheoremProof",
            "b6a2b0f59e9274064040840ba9b6223517f88156"
        ],
        [
            "by rewrite map_mxM map_lsubmx map_kermx map_col_mx.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma map_capmx m1 m2 n (A : 'M_(m1, n)) (B : 'M_(m2, n)) : ((A :&: B)^f :=: A^f :&: B^f)%MS.",
            "VernacStartTheoremProof",
            "bc495e2ae31a2453fbef3592d99ebb9bbe8c050c"
        ],
        [
            "by apply/eqmxP; rewrite !capmxE -map_capmx_gen !map_submx -!capmxE andbb.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma map_complmx m n (A : 'M_(m, n)) : (A^C^f = A^f^C)%MS.",
            "VernacStartTheoremProof",
            "56730a75e0cf1ba4370425dc7058806eede97bd8"
        ],
        [
            "by rewrite map_mxM map_row_ebase -mxrank_map map_copid_mx.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma map_diffmx m1 m2 n (A : 'M_(m1, n)) (B : 'M_(m2, n)) : ((A :\\: B)^f :=: A^f :\\: B^f)%MS.",
            "VernacStartTheoremProof",
            "5a2da1f393005910cf44744a497e31f35a2b75f5"
        ],
        [
            "apply/eqmxP; rewrite !diffmxE -map_capmx_gen -map_complmx.",
            "VernacExtend",
            "56c014161b39aecfb3c54301c2409dba4e8e1857"
        ],
        [
            "by rewrite -!map_capmx !map_submx -!diffmxE andbb.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma map_eigenspace n (g : 'M_n) a : (eigenspace g a)^f = eigenspace g^f (f a).",
            "VernacStartTheoremProof",
            "dfe8ecc6f7316fff3374105d0318cc9e35bac65c"
        ],
        [
            "by rewrite map_kermx map_mx_sub ?map_scalar_mx.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma eigenvalue_map n (g : 'M_n) a : eigenvalue g^f (f a) = eigenvalue g a.",
            "VernacStartTheoremProof",
            "71352ee9635a807830bd56f06f437c3cac950fb8"
        ],
        [
            "by rewrite /eigenvalue -map_eigenspace map_mx_eq0.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma memmx_map m n A (E : 'A_(m, n)) : (A^f \\in E^f)%MS = (A \\in E)%MS.",
            "VernacStartTheoremProof",
            "d90cb645cfac63e70ab345ff3d12d1c9be759219"
        ],
        [
            "by rewrite -map_mxvec map_submx.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma map_mulsmx m1 m2 n (E1 : 'A_(m1, n)) (E2 : 'A_(m2, n)) : ((E1 * E2)%MS^f :=: E1^f * E2^f)%MS.",
            "VernacStartTheoremProof",
            "2615c0054220a1164afb78daa863e90ed32336ce"
        ],
        [
            "rewrite /mulsmx; elim/big_rec2: _ => [|i A Af _ eqA]; first by rewrite map_mx0.",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "apply: (eqmx_trans (map_addsmx _ _)); apply: adds_eqmx {A Af}eqA.",
            "VernacExtend",
            "8d9dae45eeb3a769b8a865cef8ae476451f63802"
        ],
        [
            "apply/eqmxP; rewrite !map_genmx !genmxE map_mxM.",
            "VernacExtend",
            "56c014161b39aecfb3c54301c2409dba4e8e1857"
        ],
        [
            "apply/rV_eqP=> u; congr (u <= _ *m _)%MS.",
            "VernacExtend",
            "0fc412f71bc6f463112dd7d405085259e70a06c5"
        ],
        [
            "by apply: map_lin_mx => //= A; rewrite map_mxM // map_vec_mx map_row.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma map_cent_mx m n (E : 'A_(m, n)) : ('C(E)%MS)^f = 'C(E^f)%MS.",
            "VernacStartTheoremProof",
            "1eff762a53fa3ea3f9b067e1bac2606826ca0989"
        ],
        [
            "rewrite map_kermx //; congr (kermx _); apply: map_lin_mx => // A.",
            "VernacExtend",
            "75f5ff0fb7cf09d432c728351fd923a93d5d7135"
        ],
        [
            "rewrite map_mxM //; congr (_ *m _); apply: map_lin_mx => //= B.",
            "VernacExtend",
            "75f5ff0fb7cf09d432c728351fd923a93d5d7135"
        ],
        [
            "by rewrite map_mx_sub ? map_mxM.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma map_center_mx m n (E : 'A_(m, n)) : (('Z(E))^f :=: 'Z(E^f))%MS.",
            "VernacStartTheoremProof",
            "67446c2b4660d4950762ac9a10ab574903b1d2d3"
        ],
        [
            "by rewrite /center_mx -map_cent_mx; apply: map_capmx.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "End MapMatrixSpaces.",
            "VernacEndSegment",
            "b6327983a5a32a9b67a844ba72ba35bd1e1ce5a0"
        ]
    ],
    "proofs": [
        {
            "name": "Gaussian_elimination_key",
            "line_nb": 28,
            "steps": [
                {
                    "command": [
                        "by [].",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "submx_key",
            "line_nb": 49,
            "steps": [
                {
                    "command": [
                        "by [].",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "ltmxE",
            "line_nb": 66,
            "steps": [
                {
                    "command": [
                        "by [].",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "ltmxW",
            "line_nb": 69,
            "steps": [
                {
                    "command": [
                        "by case/andP.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "ltmxEneq",
            "line_nb": 72,
            "steps": [
                {
                    "command": [
                        "by apply: andb_id2l => ->.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "submxElt",
            "line_nb": 75,
            "steps": [
                {
                    "command": [
                        "by rewrite -andb_orr orbN andbT.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "genmx_key",
            "line_nb": 84,
            "steps": [
                {
                    "command": [
                        "by [].",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "addsmx_key",
            "line_nb": 92,
            "steps": [
                {
                    "command": [
                        "by [].",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "capmx_key",
            "line_nb": 106,
            "steps": [
                {
                    "command": [
                        "by [].",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "diffmx_key",
            "line_nb": 115,
            "steps": [
                {
                    "command": [
                        "by [].",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "mxrankE",
            "line_nb": 124,
            "steps": [
                {
                    "command": [
                        "by rewrite /mxrank unlock /=; case: m n A => [|m] [|n].",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "rank_leq_row",
            "line_nb": 127,
            "steps": [
                {
                    "command": [
                        "rewrite mxrankE.",
                        "VernacExtend",
                        "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
                    ]
                },
                {
                    "command": [
                        "elim: m n A => [|m IHm] [|n] //= A; case: pickP => [[i j] _|] //=.",
                        "VernacExtend",
                        "df63f96bedbb0673aecb42521d90011325a86c94"
                    ]
                },
                {
                    "command": [
                        "by move: (_ - _) => B; case: GaussE (IHm _ B) => [[L U] r] /=.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "row_leq_rank",
            "line_nb": 132,
            "steps": [
                {
                    "command": [
                        "by rewrite /row_free eqn_leq rank_leq_row.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "rank_leq_col",
            "line_nb": 135,
            "steps": [
                {
                    "command": [
                        "rewrite mxrankE.",
                        "VernacExtend",
                        "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
                    ]
                },
                {
                    "command": [
                        "elim: m n A => [|m IHm] [|n] //= A; case: pickP => [[i j] _|] //=.",
                        "VernacExtend",
                        "df63f96bedbb0673aecb42521d90011325a86c94"
                    ]
                },
                {
                    "command": [
                        "by move: (_ - _) => B; case: GaussE (IHm _ B) => [[L U] r] /=.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "col_leq_rank",
            "line_nb": 140,
            "steps": [
                {
                    "command": [
                        "by rewrite /row_full eqn_leq rank_leq_col.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "row_ebase_unit",
            "line_nb": 144,
            "steps": [
                {
                    "command": [
                        "rewrite /row_ebase unlock; elim: m n A => [|m IHm] [|n] //= A.",
                        "VernacExtend",
                        "44a8e3b453c9376c468b4e3e0046f5ac33e11d6d"
                    ]
                },
                {
                    "command": [
                        "case: pickP => [[i j] /= nzAij | //=]; move: (_ - _) => B.",
                        "VernacExtend",
                        "d09d9458d087c74b7317d831afc65fc07a0f6e3f"
                    ]
                },
                {
                    "command": [
                        "case: GaussE (IHm _ B) => [[L U] r] /= uU.",
                        "VernacExtend",
                        "e00fff71ff314c991514fc71c41a3556702e444a"
                    ]
                },
                {
                    "command": [
                        "rewrite unitmxE xcolE det_mulmx (@det_ublock _ 1) det_scalar1 !unitrM.",
                        "VernacExtend",
                        "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
                    ]
                },
                {
                    "command": [
                        "by rewrite unitfE nzAij -!unitmxE uU unitmx_perm.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "col_ebase_unit",
            "line_nb": 151,
            "steps": [
                {
                    "command": [
                        "rewrite /col_ebase unlock; elim: m n A => [|m IHm] [|n] //= A.",
                        "VernacExtend",
                        "44a8e3b453c9376c468b4e3e0046f5ac33e11d6d"
                    ]
                },
                {
                    "command": [
                        "case: pickP => [[i j] _|] //=; move: (_ - _) => B.",
                        "VernacExtend",
                        "d09d9458d087c74b7317d831afc65fc07a0f6e3f"
                    ]
                },
                {
                    "command": [
                        "case: GaussE (IHm _ B) => [[L U] r] /= uL.",
                        "VernacExtend",
                        "e00fff71ff314c991514fc71c41a3556702e444a"
                    ]
                },
                {
                    "command": [
                        "rewrite unitmxE xrowE det_mulmx (@det_lblock _ 1) det1 mul1r unitrM.",
                        "VernacExtend",
                        "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
                    ]
                },
                {
                    "command": [
                        "by rewrite -unitmxE unitmx_perm.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "mulmx_ebase",
            "line_nb": 159,
            "steps": [
                {
                    "command": [
                        "rewrite mxrankE /col_ebase /row_ebase unlock.",
                        "VernacExtend",
                        "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
                    ]
                },
                {
                    "command": [
                        "elim: m n A => [n A | m IHm]; first by rewrite [A]flatmx0 [_ *m _]flatmx0.",
                        "VernacExtend",
                        "3763a4b8db689af316a7372b722bb29806ab4fb6"
                    ]
                },
                {
                    "command": [
                        "case=> [A | n]; first by rewrite [_ *m _]thinmx0 [A]thinmx0.",
                        "VernacExtend",
                        "3763a4b8db689af316a7372b722bb29806ab4fb6"
                    ]
                },
                {
                    "command": [
                        "rewrite -(add1n m) -?(add1n n) => A /=.",
                        "VernacExtend",
                        "3c42b53d0efc26db114b00541ac5e7fcb29e6aeb"
                    ]
                },
                {
                    "command": [
                        "case: pickP => [[i0 j0] | A0] /=; last first.",
                        "VernacExtend",
                        "3763a4b8db689af316a7372b722bb29806ab4fb6"
                    ]
                },
                {
                    "command": [
                        "apply/matrixP=> i j; rewrite pid_mx_0 mulmx0 mul0mx mxE.",
                        "VernacExtend",
                        "56c014161b39aecfb3c54301c2409dba4e8e1857"
                    ]
                },
                {
                    "command": [
                        "by move/eqP: (A0 (i, j)).",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "set a := A i0 j0 => nz_a; set A1 := xrow _ _ _.",
                        "VernacExtend",
                        "c9a8452e0e06a4c3ac19bcd1b0a42d11d8e194b2"
                    ]
                },
                {
                    "command": [
                        "set u := ursubmx _; set v := _ *: _; set B : 'M_(m, n) := _ - _.",
                        "VernacExtend",
                        "6f9acefb35d3c4fa4eb78a0e027eeb287acf16a4"
                    ]
                },
                {
                    "command": [
                        "move: (rank_leq_col B) (rank_leq_row B) {IHm}(IHm n B); rewrite mxrankE.",
                        "VernacExtend",
                        "057edeb0967475c7ea5e8c98c449ddc5613eddc1"
                    ]
                },
                {
                    "command": [
                        "case: (GaussE B) => [[L U] r] /= r_m r_n defB.",
                        "VernacExtend",
                        "e00fff71ff314c991514fc71c41a3556702e444a"
                    ]
                },
                {
                    "command": [
                        "have ->: pid_mx (1 + r) = block_mx 1 0 0 (pid_mx r) :> 'M[F]_(1 + m, 1 + n).",
                        "VernacExtend",
                        "406cde1174359c53bf162a2a18c4eede395555f9"
                    ]
                },
                {
                    "command": [
                        "rewrite -(subnKC r_m) -(subnKC r_n) pid_mx_block -col_mx0 -row_mx0.",
                        "VernacExtend",
                        "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
                    ]
                },
                {
                    "command": [
                        "by rewrite block_mxA castmx_id col_mx0 row_mx0 -scalar_mx_block -pid_mx_block.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "rewrite xcolE xrowE mulmxA -xcolE -!mulmxA.",
                        "VernacExtend",
                        "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
                    ]
                },
                {
                    "command": [
                        "rewrite !(addr0, add0r, mulmx0, mul0mx, mulmx_block, mul1mx) mulmxA defB.",
                        "VernacExtend",
                        "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
                    ]
                },
                {
                    "command": [
                        "rewrite addrC subrK mul_mx_scalar scalerA divff // scale1r.",
                        "VernacExtend",
                        "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
                    ]
                },
                {
                    "command": [
                        "have ->: a%:M = ulsubmx A1 by rewrite [_ A1]mx11_scalar !mxE !lshift0 !tpermR.",
                        "VernacExtend",
                        "406cde1174359c53bf162a2a18c4eede395555f9"
                    ]
                },
                {
                    "command": [
                        "rewrite submxK /A1 xrowE !xcolE -!mulmxA mulmxA -!perm_mxM !tperm2 !perm_mx1.",
                        "VernacExtend",
                        "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
                    ]
                },
                {
                    "command": [
                        "by rewrite mulmx1 mul1mx.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "mulmx_base",
            "line_nb": 181,
            "steps": [
                {
                    "command": [
                        "by rewrite mulmxA -[col_base A *m _]mulmxA pid_mx_id ?mulmx_ebase.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "mulmx1_min_rank",
            "line_nb": 184,
            "steps": [
                {
                    "command": [
                        "by rewrite -{1}(mulmx_base A) mulmxA -mulmxA; move/mulmx1_min.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "mulmx_max_rank",
            "line_nb": 188,
            "steps": [
                {
                    "command": [
                        "set MN := M *m N; set rMN := \\rank _.",
                        "VernacExtend",
                        "7405ffc63057f1493a790d3f39e251cc5fefe81f"
                    ]
                },
                {
                    "command": [
                        "pose L : 'M_(rMN, m) := pid_mx rMN *m invmx (col_ebase MN).",
                        "VernacExtend",
                        "3c5f04de94609049d978298aa02ff35fb35ea7c7"
                    ]
                },
                {
                    "command": [
                        "pose U : 'M_(n, rMN) := invmx (row_ebase MN) *m pid_mx rMN.",
                        "VernacExtend",
                        "3c5f04de94609049d978298aa02ff35fb35ea7c7"
                    ]
                },
                {
                    "command": [
                        "suffices: L *m M *m (N *m U) = 1%:M by apply: mulmx1_min.",
                        "VernacExtend",
                        "290ed488b5562e885aa2cac56f3a69b4faa0eaa6"
                    ]
                },
                {
                    "command": [
                        "rewrite mulmxA -(mulmxA L) -[M *m N]mulmx_ebase -/MN.",
                        "VernacExtend",
                        "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
                    ]
                },
                {
                    "command": [
                        "by rewrite !mulmxA mulmxKV // mulmxK // !pid_mx_id /rMN ?pid_mx_1.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "mxrank_tr",
            "line_nb": 197,
            "steps": [
                {
                    "command": [
                        "apply/eqP; rewrite eqn_leq -{3}[A]trmxK -{1}(mulmx_base A) -{1}(mulmx_base A^T).",
                        "VernacExtend",
                        "56c014161b39aecfb3c54301c2409dba4e8e1857"
                    ]
                },
                {
                    "command": [
                        "by rewrite !trmx_mul !mulmx_max_rank.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "mxrank_add",
            "line_nb": 201,
            "steps": [
                {
                    "command": [
                        "by rewrite -{1}(mulmx_base A) -{1}(mulmx_base B) -mul_row_col mulmx_max_rank.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "mxrankM_maxl",
            "line_nb": 204,
            "steps": [
                {
                    "command": [
                        "by rewrite -{1}(mulmx_base A) -mulmxA mulmx_max_rank.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "mxrankM_maxr",
            "line_nb": 207,
            "steps": [
                {
                    "command": [
                        "by rewrite -mxrank_tr -(mxrank_tr B) trmx_mul mxrankM_maxl.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "mxrank_scale",
            "line_nb": 210,
            "steps": [
                {
                    "command": [
                        "by rewrite -mul_scalar_mx mxrankM_maxr.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "mxrank_scale_nz",
            "line_nb": 213,
            "steps": [
                {
                    "command": [
                        "move=> nza; apply/eqP; rewrite eqn_leq -{3}[A]scale1r -(mulVf nza).",
                        "VernacExtend",
                        "f7feb259d6220ca40e8a86b90bd06f137aa140ac"
                    ]
                },
                {
                    "command": [
                        "by rewrite -scalerA !mxrank_scale.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "mxrank_opp",
            "line_nb": 217,
            "steps": [
                {
                    "command": [
                        "by rewrite -scaleN1r mxrank_scale_nz // oppr_eq0 oner_eq0.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "mxrank0",
            "line_nb": 220,
            "steps": [
                {
                    "command": [
                        "by apply/eqP; rewrite -leqn0 -(@mulmx0 _ m 0 n 0) mulmx_max_rank.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "mxrank_eq0",
            "line_nb": 223,
            "steps": [
                {
                    "command": [
                        "apply/eqP/eqP=> [rA0 | ->{A}]; last exact: mxrank0.",
                        "VernacExtend",
                        "3763a4b8db689af316a7372b722bb29806ab4fb6"
                    ]
                },
                {
                    "command": [
                        "move: (col_base A) (row_base A) (mulmx_base A); rewrite rA0 => Ac Ar <-.",
                        "VernacExtend",
                        "8261237f0cda1915a4077c28869831c5329103ce"
                    ]
                },
                {
                    "command": [
                        "by rewrite [Ac]thinmx0 mul0mx.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "mulmx_coker",
            "line_nb": 228,
            "steps": [
                {
                    "command": [
                        "by rewrite -{1}[A]mulmx_ebase -!mulmxA mulKVmx // mul_pid_mx_copid ?mulmx0.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "submxE",
            "line_nb": 231,
            "steps": [
                {
                    "command": [
                        "by rewrite unlock.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "mulmxKpV",
            "line_nb": 234,
            "steps": [
                {
                    "command": [
                        "rewrite submxE !mulmxA mulmxBr mulmx1 subr_eq0 => /eqP defA.",
                        "VernacExtend",
                        "3c42b53d0efc26db114b00541ac5e7fcb29e6aeb"
                    ]
                },
                {
                    "command": [
                        "rewrite -{4}[B]mulmx_ebase -!mulmxA mulKmx //.",
                        "VernacExtend",
                        "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
                    ]
                },
                {
                    "command": [
                        "by rewrite (mulmxA (pid_mx _)) pid_mx_id // !mulmxA -{}defA mulmxKV.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "submxP",
            "line_nb": 239,
            "steps": [
                {
                    "command": [
                        "apply: (iffP idP) => [/mulmxKpV | [D ->]]; first by exists (A *m pinvmx B).",
                        "VernacExtend",
                        "3763a4b8db689af316a7372b722bb29806ab4fb6"
                    ]
                },
                {
                    "command": [
                        "by rewrite submxE -mulmxA mulmx_coker mulmx0.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "submx_refl",
            "line_nb": 244,
            "steps": [
                {
                    "command": [
                        "by rewrite submxE mulmx_coker.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "submxMl",
            "line_nb": 248,
            "steps": [
                {
                    "command": [
                        "by rewrite submxE -mulmxA mulmx_coker mulmx0.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "submxMr",
            "line_nb": 251,
            "steps": [
                {
                    "command": [
                        "by case/submxP=> D ->; rewrite -mulmxA submxMl.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "mulmx_sub",
            "line_nb": 254,
            "steps": [
                {
                    "command": [
                        "by case/submxP=> D ->; rewrite mulmxA submxMl.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "submx_trans",
            "line_nb": 257,
            "steps": [
                {
                    "command": [
                        "by case/submxP=> D ->{A}; apply: mulmx_sub.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "ltmx_sub_trans",
            "line_nb": 260,
            "steps": [
                {
                    "command": [
                        "case/andP=> sAB ltAB sBC; rewrite ltmxE (submx_trans sAB) //.",
                        "VernacExtend",
                        "90a2acb29b7a5304b0ab6ba5269c420638ddef63"
                    ]
                },
                {
                    "command": [
                        "by apply: contra ltAB; apply: submx_trans.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "sub_ltmx_trans",
            "line_nb": 264,
            "steps": [
                {
                    "command": [
                        "move=> sAB /andP[sBC ltBC]; rewrite ltmxE (submx_trans sAB) //.",
                        "VernacExtend",
                        "057edeb0967475c7ea5e8c98c449ddc5613eddc1"
                    ]
                },
                {
                    "command": [
                        "by apply: contra ltBC => sCA; apply: submx_trans sAB.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "ltmx_trans",
            "line_nb": 268,
            "steps": [
                {
                    "command": [
                        "by move=> A B C; move/ltmxW; apply: sub_ltmx_trans.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "ltmx_irrefl",
            "line_nb": 271,
            "steps": [
                {
                    "command": [
                        "by move=> A; rewrite /ltmx submx_refl andbF.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "sub0mx",
            "line_nb": 274,
            "steps": [
                {
                    "command": [
                        "by rewrite submxE mul0mx.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "submx0null",
            "line_nb": 277,
            "steps": [
                {
                    "command": [
                        "by case/submxP=> D; rewrite mulmx0.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "submx0",
            "line_nb": 280,
            "steps": [
                {
                    "command": [
                        "by apply/idP/eqP=> [|->]; [apply: submx0null | apply: sub0mx].",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "lt0mx",
            "line_nb": 283,
            "steps": [
                {
                    "command": [
                        "by rewrite /ltmx sub0mx submx0.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "ltmx0",
            "line_nb": 286,
            "steps": [
                {
                    "command": [
                        "by rewrite /ltmx sub0mx andbF.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "eqmx0P",
            "line_nb": 289,
            "steps": [
                {
                    "command": [
                        "by rewrite submx0 sub0mx andbT; apply: eqP.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "eqmx_eq0",
            "line_nb": 292,
            "steps": [
                {
                    "command": [
                        "by move=> eqAB; rewrite -!submx0 eqAB.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "addmx_sub",
            "line_nb": 295,
            "steps": [
                {
                    "command": [
                        "by case/submxP=> A' ->; case/submxP=> B' ->; rewrite -mulmxDl submxMl.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "summx_sub",
            "line_nb": 298,
            "steps": [
                {
                    "command": [
                        "by move=> leAB; elim/big_ind: _ => // [|C D]; [apply/sub0mx | apply/addmx_sub].",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "scalemx_sub",
            "line_nb": 301,
            "steps": [
                {
                    "command": [
                        "by case/submxP=> A' ->; rewrite scalemxAl submxMl.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "row_sub",
            "line_nb": 304,
            "steps": [
                {
                    "command": [
                        "by rewrite rowE submxMl.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "eq_row_sub",
            "line_nb": 307,
            "steps": [
                {
                    "command": [
                        "by move <-; rewrite row_sub.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "nz_row_sub",
            "line_nb": 310,
            "steps": [
                {
                    "command": [
                        "by rewrite /nz_row; case: pickP => [i|] _; rewrite ?row_sub ?sub0mx.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "rV_subP",
            "line_nb": 320,
            "steps": [
                {
                    "command": [
                        "apply: (iffP idP) => [sAB v Av | sAB]; first exact: submx_trans sAB.",
                        "VernacExtend",
                        "3763a4b8db689af316a7372b722bb29806ab4fb6"
                    ]
                },
                {
                    "command": [
                        "by apply/row_subP=> i; rewrite sAB ?row_sub.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "row_subPn",
            "line_nb": 325,
            "steps": [
                {
                    "command": [
                        "by rewrite (sameP row_subP forallP) negb_forall; apply: existsP.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "sub_rVP",
            "line_nb": 328,
            "steps": [
                {
                    "command": [
                        "apply: (iffP submxP) => [[w ->] | [a ->]].",
                        "VernacExtend",
                        "4bd6fa79b17bcd2bfb7af091fb325367a20385d6"
                    ]
                },
                {
                    "command": [
                        "by exists (w 0 0); rewrite -mul_scalar_mx -mx11_scalar.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "by exists a%:M; rewrite mul_scalar_mx.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "rank_rV",
            "line_nb": 333,
            "steps": [
                {
                    "command": [
                        "case: eqP => [-> | nz_v]; first by rewrite mxrank0.",
                        "VernacExtend",
                        "3763a4b8db689af316a7372b722bb29806ab4fb6"
                    ]
                },
                {
                    "command": [
                        "by apply/eqP; rewrite eqn_leq rank_leq_row lt0n mxrank_eq0; apply/eqP.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "rowV0P",
            "line_nb": 342,
            "steps": [
                {
                    "command": [
                        "rewrite -[A == 0]negbK; case: rowV0Pn => IH.",
                        "VernacExtend",
                        "712d339e99ee17eb7d5033e19ac614eb3ca6b532"
                    ]
                },
                {
                    "command": [
                        "by right; case: IH => v svA nzv IH; case/eqP: nzv; apply: IH.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "by left=> v svA; apply/eqP; apply/idPn=> nzv; case: IH; exists v.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "submx_full",
            "line_nb": 347,
            "steps": [
                {
                    "command": [
                        "by rewrite submxE /cokermx => /eqnP->; rewrite /copid_mx pid_mx_1 subrr !mulmx0.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "row_fullP",
            "line_nb": 350,
            "steps": [
                {
                    "command": [
                        "apply: (iffP idP) => [Afull | [B kA]].",
                        "VernacExtend",
                        "4bd6fa79b17bcd2bfb7af091fb325367a20385d6"
                    ]
                },
                {
                    "command": [
                        "by exists (1%:M *m pinvmx A); apply: mulmxKpV (submx_full _ Afull).",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "by rewrite [_ A]eqn_leq rank_leq_col (mulmx1_min_rank B 1%:M) ?mulmx1.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "row_full_inj",
            "line_nb": 356,
            "steps": [
                {
                    "command": [
                        "case/row_fullP=> A' A'K; apply: can_inj (mulmx A') _ => B.",
                        "VernacExtend",
                        "d62e4c271de3f2a9ff5062b8b89d3c57d965c518"
                    ]
                },
                {
                    "command": [
                        "by rewrite mulmxA A'K mul1mx.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "row_freeP",
            "line_nb": 360,
            "steps": [
                {
                    "command": [
                        "rewrite /row_free -mxrank_tr.",
                        "VernacExtend",
                        "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
                    ]
                },
                {
                    "command": [
                        "apply: (iffP row_fullP) => [] [B kA]; by exists B^T; rewrite -trmx1 -kA trmx_mul ?trmxK.",
                        "VernacExtend",
                        "9ba8844f90da4a48c6c9ed986dcaebadc0623e9f"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "row_free_inj",
            "line_nb": 364,
            "steps": [
                {
                    "command": [
                        "case/row_freeP=> A' AK; apply: can_inj (mulmx^~ A') _ => B.",
                        "VernacExtend",
                        "d62e4c271de3f2a9ff5062b8b89d3c57d965c518"
                    ]
                },
                {
                    "command": [
                        "by rewrite -mulmxA AK mulmx1.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "row_free_unit",
            "line_nb": 368,
            "steps": [
                {
                    "command": [
                        "apply/row_fullP/idP=> [[A'] | uA]; first by case/mulmx1_unit.",
                        "VernacExtend",
                        "3763a4b8db689af316a7372b722bb29806ab4fb6"
                    ]
                },
                {
                    "command": [
                        "by exists (invmx A); rewrite mulVmx.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "row_full_unit",
            "line_nb": 372,
            "steps": [
                {
                    "command": [
                        "exact: row_free_unit.",
                        "VernacExtend",
                        "ce637ff86bafca5d8359473e8c02af644dcbdc43"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "mxrank_unit",
            "line_nb": 375,
            "steps": [
                {
                    "command": [
                        "by rewrite -row_full_unit => /eqnP.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "mxrank1",
            "line_nb": 378,
            "steps": [
                {
                    "command": [
                        "by apply: mxrank_unit; apply: unitmx1.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "mxrank_delta",
            "line_nb": 381,
            "steps": [
                {
                    "command": [
                        "apply/eqP; rewrite eqn_leq lt0n mxrank_eq0.",
                        "VernacExtend",
                        "56c014161b39aecfb3c54301c2409dba4e8e1857"
                    ]
                },
                {
                    "command": [
                        "rewrite -{1}(mul_delta_mx (0 : 'I_1)) mulmx_max_rank.",
                        "VernacExtend",
                        "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
                    ]
                },
                {
                    "command": [
                        "by apply/eqP; move/matrixP; move/(_ i j); move/eqP; rewrite !mxE !eqxx oner_eq0.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "mxrankS",
            "line_nb": 386,
            "steps": [
                {
                    "command": [
                        "by case/submxP=> D ->; rewrite mxrankM_maxr.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "submx1",
            "line_nb": 389,
            "steps": [
                {
                    "command": [
                        "by rewrite submx_full // row_full_unit unitmx1.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "ltmx1",
            "line_nb": 396,
            "steps": [
                {
                    "command": [
                        "by rewrite /ltmx sub1mx submx1.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "lt1mx",
            "line_nb": 399,
            "steps": [
                {
                    "command": [
                        "by rewrite /ltmx submx1 andbF.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "eqmxP",
            "line_nb": 402,
            "steps": [
                {
                    "command": [
                        "apply: (iffP andP) => [[sAB sBA] | eqAB]; last by rewrite !eqAB.",
                        "VernacExtend",
                        "3763a4b8db689af316a7372b722bb29806ab4fb6"
                    ]
                },
                {
                    "command": [
                        "split=> [|m3 C]; first by apply/eqP; rewrite eqn_leq !mxrankS.",
                        "VernacExtend",
                        "3763a4b8db689af316a7372b722bb29806ab4fb6"
                    ]
                },
                {
                    "command": [
                        "split; first by apply/idP/idP; apply: submx_trans.",
                        "VernacExtend",
                        "3763a4b8db689af316a7372b722bb29806ab4fb6"
                    ]
                },
                {
                    "command": [
                        "by apply/idP/idP=> sC; apply: submx_trans sC _.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "rV_eqP",
            "line_nb": 409,
            "steps": [
                {
                    "command": [
                        "apply: (iffP idP) => [eqAB u | eqAB]; first by rewrite (eqmxP eqAB).",
                        "VernacExtend",
                        "3763a4b8db689af316a7372b722bb29806ab4fb6"
                    ]
                },
                {
                    "command": [
                        "by apply/andP; split; apply/rV_subP=> u; rewrite eqAB.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "eqmx_refl",
            "line_nb": 413,
            "steps": [
                {
                    "command": [
                        "by [].",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "eqmx_sym",
            "line_nb": 416,
            "steps": [
                {
                    "command": [
                        "by move=> eqAB; split=> [|m3 C]; rewrite !eqAB.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "eqmx_trans",
            "line_nb": 419,
            "steps": [
                {
                    "command": [
                        "by move=> eqAB eqBC; split=> [|m4 D]; rewrite !eqAB !eqBC.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "eqmx_rank",
            "line_nb": 422,
            "steps": [
                {
                    "command": [
                        "by move/eqmxP->.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "lt_eqmx",
            "line_nb": 425,
            "steps": [
                {
                    "command": [
                        "by move=> eqAB C; rewrite /ltmx !eqAB.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "eqmxMr",
            "line_nb": 428,
            "steps": [
                {
                    "command": [
                        "by move=> eqAB; apply/eqmxP; rewrite !submxMr ?eqAB.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "eqmxMfull",
            "line_nb": 431,
            "steps": [
                {
                    "command": [
                        "case/row_fullP=> A' A'A; apply/eqmxP; rewrite submxMl /=.",
                        "VernacExtend",
                        "db5c0dcae9fc8f6605ec5d5bf559f9684231fcd6"
                    ]
                },
                {
                    "command": [
                        "by apply/submxP; exists A'; rewrite mulmxA A'A mul1mx.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "eqmx0",
            "line_nb": 435,
            "steps": [
                {
                    "command": [
                        "by apply/eqmxP; rewrite !sub0mx.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "eqmx_scale",
            "line_nb": 438,
            "steps": [
                {
                    "command": [
                        "move=> nz_a; apply/eqmxP; rewrite scalemx_sub //.",
                        "VernacExtend",
                        "f7feb259d6220ca40e8a86b90bd06f137aa140ac"
                    ]
                },
                {
                    "command": [
                        "by rewrite -{1}[A]scale1r -(mulVf nz_a) -scalerA scalemx_sub.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "eqmx_opp",
            "line_nb": 442,
            "steps": [
                {
                    "command": [
                        "by rewrite -scaleN1r; apply: eqmx_scale => //; rewrite oppr_eq0 oner_eq0.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "submxMfree",
            "line_nb": 445,
            "steps": [
                {
                    "command": [
                        "case/row_freeP=> C' C_C'_1; apply/idP/idP=> sAB; last exact: submxMr.",
                        "VernacExtend",
                        "3763a4b8db689af316a7372b722bb29806ab4fb6"
                    ]
                },
                {
                    "command": [
                        "by rewrite -[A]mulmx1 -[B]mulmx1 -C_C'_1 !mulmxA submxMr.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "eqmxMfree",
            "line_nb": 449,
            "steps": [
                {
                    "command": [
                        "by move=> Cfree eqAB; apply/eqmxP; move/eqmxP: eqAB; rewrite !submxMfree.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "mxrankMfree",
            "line_nb": 452,
            "steps": [
                {
                    "command": [
                        "by move=> Bfree; rewrite -mxrank_tr trmx_mul eqmxMfull /row_full mxrank_tr.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "qidmx_eq1",
            "line_nb": 462,
            "steps": [
                {
                    "command": [
                        "by rewrite /qidmx eqxx pid_mx_1.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "genmxE",
            "line_nb": 477,
            "steps": [
                {
                    "command": [
                        "by rewrite unlock; apply/eqmxP; case/andP: (chooseP (genmx_witnessP A)).",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "eq_genmx",
            "line_nb": 480,
            "steps": [
                {
                    "command": [
                        "move=> eqAB; rewrite unlock.",
                        "VernacExtend",
                        "057edeb0967475c7ea5e8c98c449ddc5613eddc1"
                    ]
                },
                {
                    "command": [
                        "have{eqAB} eqAB: equivmx A (row_full A) =1 equivmx B (row_full B).",
                        "VernacExtend",
                        "406cde1174359c53bf162a2a18c4eede395555f9"
                    ]
                },
                {
                    "command": [
                        "by move=> C; rewrite /row_full /equivmx !eqAB.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "rewrite (eq_choose eqAB) (choose_id _ (genmx_witnessP B)) //.",
                        "VernacExtend",
                        "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
                    ]
                },
                {
                    "command": [
                        "by rewrite -eqAB genmx_witnessP.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "genmxP",
            "line_nb": 487,
            "steps": [
                {
                    "command": [
                        "apply: (iffP idP) => eqAB; first exact: eq_genmx (eqmxP _).",
                        "VernacExtend",
                        "3763a4b8db689af316a7372b722bb29806ab4fb6"
                    ]
                },
                {
                    "command": [
                        "by rewrite -!(genmxE A) eqAB !genmxE andbb.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "genmx0",
            "line_nb": 492,
            "steps": [
                {
                    "command": [
                        "by apply/eqP; rewrite -submx0 genmxE sub0mx.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "genmx1",
            "line_nb": 495,
            "steps": [
                {
                    "command": [
                        "rewrite unlock; case/andP: (chooseP (@genmx_witnessP n n 1%:M)) => _ /eqP.",
                        "VernacExtend",
                        "712d339e99ee17eb7d5033e19ac614eb3ca6b532"
                    ]
                },
                {
                    "command": [
                        "by rewrite qidmx_eq1 row_full_unit unitmx1 => /eqP.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "genmx_id",
            "line_nb": 499,
            "steps": [
                {
                    "command": [
                        "by apply: eq_genmx; apply: genmxE.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "row_base_free",
            "line_nb": 502,
            "steps": [
                {
                    "command": [
                        "by apply/eqnP; rewrite eq_row_base.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "mxrank_gen",
            "line_nb": 505,
            "steps": [
                {
                    "command": [
                        "by rewrite genmxE.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "col_base_full",
            "line_nb": 508,
            "steps": [
                {
                    "command": [
                        "apply/row_fullP; exists (pid_mx (\\rank A) *m invmx (col_ebase A)).",
                        "VernacExtend",
                        "e390ff232080cbeb24672774382c4b70bbff3ceb"
                    ]
                },
                {
                    "command": [
                        "by rewrite !mulmxA mulmxKV // pid_mx_id // pid_mx_1.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "mxrank_leqif_eq",
            "line_nb": 520,
            "steps": [
                {
                    "command": [
                        "by move=> sAB; rewrite sAB; apply: mxrank_leqif_sup.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "ltmxErank",
            "line_nb": 523,
            "steps": [
                {
                    "command": [
                        "by apply: andb_id2l => sAB; rewrite (ltn_leqif (mxrank_leqif_sup sAB)).",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "rank_ltmx",
            "line_nb": 526,
            "steps": [
                {
                    "command": [
                        "by rewrite ltmxErank => /andP[].",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "eqmx_cast",
            "line_nb": 529,
            "steps": [
                {
                    "command": [
                        "by case: e A; case: m2 / => A e; rewrite castmx_id.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "eqmx_conform",
            "line_nb": 532,
            "steps": [
                {
                    "command": [
                        "case: (eqVneq m2 m1) => [-> | neqm12] in B *.",
                        "VernacExtend",
                        "e00fff71ff314c991514fc71c41a3556702e444a"
                    ]
                },
                {
                    "command": [
                        "by right; rewrite conform_mx_id.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "by left; rewrite nonconform_mx ?neqm12.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "eqmx_sum_nop",
            "line_nb": 537,
            "steps": [
                {
                    "command": [
                        "case: (eqmx_conform <<A>>%MS A) => // eq_id_gen.",
                        "VernacExtend",
                        "e00fff71ff314c991514fc71c41a3556702e444a"
                    ]
                },
                {
                    "command": [
                        "exact: eqmx_trans (genmxE A).",
                        "VernacExtend",
                        "ce637ff86bafca5d8359473e8c02af644dcbdc43"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "col_mx_sub",
            "line_nb": 543,
            "steps": [
                {
                    "command": [
                        "rewrite !submxE mul_col_mx -col_mx0.",
                        "VernacExtend",
                        "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
                    ]
                },
                {
                    "command": [
                        "by apply/eqP/andP; [case/eq_col_mx=> -> -> | case; do 2!move/eqP->].",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "addsmxE",
            "line_nb": 547,
            "steps": [
                {
                    "command": [
                        "have:= submx_refl (col_mx A B); rewrite col_mx_sub; case/andP=> sAS sBS.",
                        "VernacExtend",
                        "3ce4f03148eef327ef1c0ea0b904dc833d71f154"
                    ]
                },
                {
                    "command": [
                        "rewrite unlock; do 2?case: eqP => [AB0 | _]; last exact: genmxE.",
                        "VernacExtend",
                        "3763a4b8db689af316a7372b722bb29806ab4fb6"
                    ]
                },
                {
                    "command": [
                        "by apply/eqmxP; rewrite !eqmx_sum_nop sBS col_mx_sub AB0 sub0mx /=.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "by apply/eqmxP; rewrite !eqmx_sum_nop sAS col_mx_sub AB0 sub0mx andbT /=.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "addsmx_sub",
            "line_nb": 553,
            "steps": [
                {
                    "command": [
                        "by rewrite addsmxE col_mx_sub.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "addsmxSl",
            "line_nb": 556,
            "steps": [
                {
                    "command": [
                        "by have:= submx_refl (A + B)%MS; rewrite addsmx_sub; case/andP.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "addsmxSr",
            "line_nb": 559,
            "steps": [
                {
                    "command": [
                        "by have:= submx_refl (A + B)%MS; rewrite addsmx_sub; case/andP.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "addsmx_idPr",
            "line_nb": 562,
            "steps": [
                {
                    "command": [
                        "have:= @eqmxP _ _ _ (A + B)%MS B.",
                        "VernacExtend",
                        "406cde1174359c53bf162a2a18c4eede395555f9"
                    ]
                },
                {
                    "command": [
                        "by rewrite addsmxSr addsmx_sub submx_refl !andbT.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "addsmx_idPl",
            "line_nb": 566,
            "steps": [
                {
                    "command": [
                        "have:= @eqmxP _ _ _ (A + B)%MS A.",
                        "VernacExtend",
                        "406cde1174359c53bf162a2a18c4eede395555f9"
                    ]
                },
                {
                    "command": [
                        "by rewrite addsmxSl addsmx_sub submx_refl !andbT.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "adds0mx",
            "line_nb": 571,
            "steps": [
                {
                    "command": [
                        "by apply/eqmxP; rewrite addsmx_sub sub0mx addsmxSr /= andbT.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "addsmx0",
            "line_nb": 574,
            "steps": [
                {
                    "command": [
                        "by apply/eqmxP; rewrite addsmx_sub sub0mx addsmxSl /= !andbT.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "addsmx_nop_eq0",
            "line_nb": 577,
            "steps": [
                {
                    "command": [
                        "by rewrite -!submx0 eqmx_sum_nop.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "addsmx_nop0",
            "line_nb": 580,
            "steps": [
                {
                    "command": [
                        "by apply/eqP; rewrite addsmx_nop_eq0.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "addsmx_nop_id",
            "line_nb": 583,
            "steps": [
                {
                    "command": [
                        "exact: conform_mx_id.",
                        "VernacExtend",
                        "ce637ff86bafca5d8359473e8c02af644dcbdc43"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "addsmxC",
            "line_nb": 586,
            "steps": [
                {
                    "command": [
                        "have: (A + B == B + A)%MS.",
                        "VernacExtend",
                        "406cde1174359c53bf162a2a18c4eede395555f9"
                    ]
                },
                {
                    "command": [
                        "by apply/andP; rewrite !addsmx_sub andbC -addsmx_sub andbC -addsmx_sub.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "move/genmxP; rewrite [@addsmx]unlock -!submx0 !submx0.",
                        "VernacExtend",
                        "057edeb0967475c7ea5e8c98c449ddc5613eddc1"
                    ]
                },
                {
                    "command": [
                        "by do 2!case: eqP => [// -> | _]; rewrite ?genmx_id ?addsmx_nop0.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "adds0mx_id",
            "line_nb": 592,
            "steps": [
                {
                    "command": [
                        "by rewrite unlock eqxx addsmx_nop_id.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "addsmx0_id",
            "line_nb": 595,
            "steps": [
                {
                    "command": [
                        "by rewrite addsmxC adds0mx_id.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "addsmxA",
            "line_nb": 598,
            "steps": [
                {
                    "command": [
                        "have: (A + (B + C) :=: A + B + C)%MS.",
                        "VernacExtend",
                        "406cde1174359c53bf162a2a18c4eede395555f9"
                    ]
                },
                {
                    "command": [
                        "by apply/eqmxP/andP; rewrite !addsmx_sub -andbA andbA -!addsmx_sub.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "rewrite {1 3}[in @addsmx m1]unlock [in @addsmx n]unlock !addsmx_nop_id -!submx0.",
                        "VernacExtend",
                        "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
                    ]
                },
                {
                    "command": [
                        "rewrite !addsmx_sub ![@addsmx]unlock -!submx0; move/eq_genmx.",
                        "VernacExtend",
                        "7e529e80bb2879787ee6d9466056f19f0215c721"
                    ]
                },
                {
                    "command": [
                        "by do 3!case: (_ <= 0)%MS; rewrite //= !genmx_id.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "addsmxMr",
            "line_nb": 607,
            "steps": [
                {
                    "command": [
                        "by apply/eqmxP; rewrite !addsmxE -!mul_col_mx !submxMr ?addsmxE.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "addsmxS",
            "line_nb": 610,
            "steps": [
                {
                    "command": [
                        "move=> sAC sBD.",
                        "VernacExtend",
                        "b1b2cb7a3a617cba67460b4eca1f04de3c1cc716"
                    ]
                },
                {
                    "command": [
                        "by rewrite addsmx_sub {1}addsmxC !(submx_trans _ (addsmxSr _ _)).",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "addsmx_addKl",
            "line_nb": 618,
            "steps": [
                {
                    "command": [
                        "move=> sBA; apply/eqmxP; rewrite !addsmx_sub !addsmxSl.",
                        "VernacExtend",
                        "f7feb259d6220ca40e8a86b90bd06f137aa140ac"
                    ]
                },
                {
                    "command": [
                        "by rewrite -{3}[C](addKr B) !addmx_sub_adds ?eqmx_opp.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "addsmx_addKr",
            "line_nb": 622,
            "steps": [
                {
                    "command": [
                        "by rewrite -!(addsmxC C) addrC; apply: addsmx_addKl.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "adds_eqmx",
            "line_nb": 625,
            "steps": [
                {
                    "command": [
                        "by move=> eqAC eqBD; apply/eqmxP; rewrite !addsmxS ?eqAC ?eqBD.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "genmx_adds",
            "line_nb": 628,
            "steps": [
                {
                    "command": [
                        "rewrite -(eq_genmx (adds_eqmx (genmxE A) (genmxE B))).",
                        "VernacExtend",
                        "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
                    ]
                },
                {
                    "command": [
                        "by rewrite [@addsmx]unlock !addsmx_nop_id !(fun_if (@genmx _ _)) !genmx_id.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "genmx_sums",
            "line_nb": 640,
            "steps": [
                {
                    "command": [
                        "exact: (big_morph _ (@genmx_adds n n n) (@genmx0 n n)).",
                        "VernacExtend",
                        "ce637ff86bafca5d8359473e8c02af644dcbdc43"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "sumsmx_sup",
            "line_nb": 643,
            "steps": [
                {
                    "command": [
                        "by move=> Pi0 sAB; apply: submx_trans sAB _; rewrite (bigD1 i0) // addsmxSl.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "sumsmx_subP",
            "line_nb": 647,
            "steps": [
                {
                    "command": [
                        "apply: (iffP idP) => [sAB i Pi | sAB].",
                        "VernacExtend",
                        "4bd6fa79b17bcd2bfb7af091fb325367a20385d6"
                    ]
                },
                {
                    "command": [
                        "by apply: submx_trans sAB; apply: sumsmx_sup Pi _.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "by elim/big_rec: _ => [|i Ai Pi sAiB]; rewrite ?sub0mx // addsmx_sub sAB.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "summx_sub_sums",
            "line_nb": 652,
            "steps": [
                {
                    "command": [
                        "by move=> sAB; apply: summx_sub => i Pi; rewrite (sumsmx_sup i) ?sAB.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "sumsmxS",
            "line_nb": 655,
            "steps": [
                {
                    "command": [
                        "by move=> sAB; apply/sumsmx_subP=> i Pi; rewrite (sumsmx_sup i) ?sAB.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "eqmx_sums",
            "line_nb": 658,
            "steps": [
                {
                    "command": [
                        "by move=> eqAB; apply/eqmxP; rewrite !sumsmxS // => i; move/eqAB->.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "sumsmxMr_gen",
            "line_nb": 673,
            "steps": [
                {
                    "command": [
                        "apply/eqmxP/andP; split; last first.",
                        "VernacExtend",
                        "3763a4b8db689af316a7372b722bb29806ab4fb6"
                    ]
                },
                {
                    "command": [
                        "by apply/sumsmx_subP=> i Pi; rewrite genmxE submxMr ?(sumsmx_sup i).",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "have [u ->] := sub_sumsmxP _ _ _ (submx_refl (\\sum_(i | P i) A i)%MS).",
                        "VernacExtend",
                        "406cde1174359c53bf162a2a18c4eede395555f9"
                    ]
                },
                {
                    "command": [
                        "by rewrite mulmx_suml summx_sub_sums // => i _; rewrite genmxE -mulmxA submxMl.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "sumsmxMr",
            "line_nb": 679,
            "steps": [
                {
                    "command": [
                        "by apply: eqmx_trans (sumsmxMr_gen _ _ _) (eqmx_sums _) => i _; apply: genmxE.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "rank_pid_mx",
            "line_nb": 682,
            "steps": [
                {
                    "command": [
                        "do 2!move/subnKC <-; rewrite pid_mx_block block_mxEv row_mx0 -addsmxE addsmx0.",
                        "VernacExtend",
                        "f8a765f8b8158bfb954eb4eeb20c0cb6489ecdb4"
                    ]
                },
                {
                    "command": [
                        "by rewrite -mxrank_tr tr_row_mx trmx0 trmx1 -addsmxE addsmx0 mxrank1.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "rank_copid_mx",
            "line_nb": 686,
            "steps": [
                {
                    "command": [
                        "move/subnKC <-; rewrite /copid_mx pid_mx_block scalar_mx_block.",
                        "VernacExtend",
                        "01eaddc5beea13e116fcc5de5430a824e6e09efb"
                    ]
                },
                {
                    "command": [
                        "rewrite opp_block_mx !oppr0 add_block_mx !addr0 subrr block_mxEv row_mx0.",
                        "VernacExtend",
                        "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
                    ]
                },
                {
                    "command": [
                        "rewrite -addsmxE adds0mx -mxrank_tr tr_row_mx trmx0 trmx1.",
                        "VernacExtend",
                        "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
                    ]
                },
                {
                    "command": [
                        "by rewrite -addsmxE adds0mx mxrank1 addKn.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "mxrank_compl",
            "line_nb": 692,
            "steps": [
                {
                    "command": [
                        "by rewrite mxrankMfree ?row_free_unit ?rank_copid_mx.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "mxrank_ker",
            "line_nb": 695,
            "steps": [
                {
                    "command": [
                        "by rewrite mxrankMfree ?row_free_unit ?unitmx_inv ?rank_copid_mx.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "kermx_eq0",
            "line_nb": 698,
            "steps": [
                {
                    "command": [
                        "by rewrite -mxrank_eq0 mxrank_ker subn_eq0 row_leq_rank.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "mxrank_coker",
            "line_nb": 701,
            "steps": [
                {
                    "command": [
                        "by rewrite eqmxMfull ?row_full_unit ?unitmx_inv ?rank_copid_mx.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "cokermx_eq0",
            "line_nb": 704,
            "steps": [
                {
                    "command": [
                        "by rewrite -mxrank_eq0 mxrank_coker subn_eq0 col_leq_rank.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "mulmx_ker",
            "line_nb": 707,
            "steps": [
                {
                    "command": [
                        "by rewrite -{2}[A]mulmx_ebase !mulmxA mulmxKV // mul_copid_mx_pid ?mul0mx.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "mulmx0_rank_max",
            "line_nb": 720,
            "steps": [
                {
                    "command": [
                        "move=> AB0; rewrite -{3}(subnK (rank_leq_row B)) leq_add2r.",
                        "VernacExtend",
                        "057edeb0967475c7ea5e8c98c449ddc5613eddc1"
                    ]
                },
                {
                    "command": [
                        "by rewrite -mxrank_ker mxrankS //; apply/sub_kermxP.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "mxrank_Frobenius",
            "line_nb": 724,
            "steps": [
                {
                    "command": [
                        "rewrite -{2}(mulmx_base (A *m B)) -mulmxA (eqmxMfull _ (col_base_full _)).",
                        "VernacExtend",
                        "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
                    ]
                },
                {
                    "command": [
                        "set C2 := row_base _ *m C.",
                        "VernacExtend",
                        "69a61e99b234580f7b41fa5b9655c87ba9a76f70"
                    ]
                },
                {
                    "command": [
                        "rewrite -{1}(subnK (rank_leq_row C2)) -(mxrank_ker C2) addnAC leq_add2r.",
                        "VernacExtend",
                        "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
                    ]
                },
                {
                    "command": [
                        "rewrite addnC -{1}(mulmx_base B) -mulmxA eqmxMfull //.",
                        "VernacExtend",
                        "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
                    ]
                },
                {
                    "command": [
                        "set C1 := _ *m C; rewrite -{2}(subnKC (rank_leq_row C1)) leq_add2l -mxrank_ker.",
                        "VernacExtend",
                        "8460a73fe74726b8e94ff0752da65e8d48f68f26"
                    ]
                },
                {
                    "command": [
                        "rewrite -(mxrankMfree _ (row_base_free (A *m B))).",
                        "VernacExtend",
                        "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
                    ]
                },
                {
                    "command": [
                        "have: (row_base (A *m B) <= row_base B)%MS by rewrite !eq_row_base submxMl.",
                        "VernacExtend",
                        "406cde1174359c53bf162a2a18c4eede395555f9"
                    ]
                },
                {
                    "command": [
                        "case/submxP=> D defD; rewrite defD mulmxA mxrankMfree ?mxrankS //.",
                        "VernacExtend",
                        "90a2acb29b7a5304b0ab6ba5269c420638ddef63"
                    ]
                },
                {
                    "command": [
                        "by apply/sub_kermxP; rewrite -mulmxA (mulmxA D) -defD -/C2 mulmx_ker.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "mxrank_mul_min",
            "line_nb": 735,
            "steps": [
                {
                    "command": [
                        "by have:= mxrank_Frobenius A 1%:M B; rewrite mulmx1 mul1mx mxrank1 leq_subLR.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "sub_capmx_gen",
            "line_nb": 744,
            "steps": [
                {
                    "command": [
                        "apply/idP/andP=> [sAI | [/submxP[B' ->{A}] /submxP[C' eqBC']]].",
                        "VernacExtend",
                        "4bd6fa79b17bcd2bfb7af091fb325367a20385d6"
                    ]
                },
                {
                    "command": [
                        "rewrite !(submx_trans sAI) ?submxMl // /capmx_gen.",
                        "VernacExtend",
                        "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
                    ]
                },
                {
                    "command": [
                        "have:= mulmx_ker (col_mx B C); set K := kermx _.",
                        "VernacExtend",
                        "81881a093b2294c76be3b432fbe83612064d7bc9"
                    ]
                },
                {
                    "command": [
                        "rewrite -{1}[K]hsubmxK mul_row_col; move/(canRL (addrK _))->.",
                        "VernacExtend",
                        "9d45b3f5079bd11fa9301fef8a859fbbb0c29729"
                    ]
                },
                {
                    "command": [
                        "by rewrite add0r -mulNmx submxMl.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "have: (row_mx B' (- C') <= kermx (col_mx B C))%MS.",
                        "VernacExtend",
                        "406cde1174359c53bf162a2a18c4eede395555f9"
                    ]
                },
                {
                    "command": [
                        "by apply/sub_kermxP; rewrite mul_row_col eqBC' mulNmx subrr.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "case/submxP=> D; rewrite -[kermx _]hsubmxK mul_mx_row.",
                        "VernacExtend",
                        "90a2acb29b7a5304b0ab6ba5269c420638ddef63"
                    ]
                },
                {
                    "command": [
                        "by case/eq_row_mx=> -> _; rewrite -mulmxA submxMl.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "capmx_witnessP",
            "line_nb": 755,
            "steps": [
                {
                    "command": [
                        "rewrite /equivmx qidmx_eq1 /qidmx /capmx_witness.",
                        "VernacExtend",
                        "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
                    ]
                },
                {
                    "command": [
                        "rewrite -sub1mx; case s1A: (1%:M <= A)%MS => /=; last first.",
                        "VernacExtend",
                        "3763a4b8db689af316a7372b722bb29806ab4fb6"
                    ]
                },
                {
                    "command": [
                        "rewrite !genmxE submx_refl /= -negb_add; apply: contra {s1A}(negbT s1A).",
                        "VernacExtend",
                        "634a7639ed2fb7caf62757f84400927f5829b7d5"
                    ]
                },
                {
                    "command": [
                        "case: eqP => [<- _| _]; first by rewrite genmxE.",
                        "VernacExtend",
                        "3763a4b8db689af316a7372b722bb29806ab4fb6"
                    ]
                },
                {
                    "command": [
                        "by case: eqP A => //= -> A; move/eqP->; rewrite pid_mx_1.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "case: (m =P n) => [-> | ne_mn] in A s1A *.",
                        "VernacExtend",
                        "e00fff71ff314c991514fc71c41a3556702e444a"
                    ]
                },
                {
                    "command": [
                        "by rewrite conform_mx_id submx_refl pid_mx_1 eqxx.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "by rewrite nonconform_mx ?submx1 ?s1A ?eqxx //; case: eqP.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "capmx_normP",
            "line_nb": 765,
            "steps": [
                {
                    "command": [
                        "by case/andP: (chooseP (capmx_witnessP A)) => /eqmxP defN /eqP.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "capmx_norm_eq",
            "line_nb": 768,
            "steps": [
                {
                    "command": [
                        "move=> eqABid /eqmxP eqAB.",
                        "VernacExtend",
                        "b1b2cb7a3a617cba67460b4eca1f04de3c1cc716"
                    ]
                },
                {
                    "command": [
                        "have{eqABid eqAB} eqAB: equivmx A (qidmx A) =1 equivmx B (qidmx B).",
                        "VernacExtend",
                        "406cde1174359c53bf162a2a18c4eede395555f9"
                    ]
                },
                {
                    "command": [
                        "by move=> C; rewrite /equivmx eqABid !eqAB.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "rewrite {1}/capmx_norm (eq_choose eqAB).",
                        "VernacExtend",
                        "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
                    ]
                },
                {
                    "command": [
                        "by apply: choose_id; first rewrite -eqAB; apply: capmx_witnessP.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "capmx_nopP",
            "line_nb": 775,
            "steps": [
                {
                    "command": [
                        "rewrite /capmx_nop; case: (eqVneq m n) => [-> | ne_mn] in A *.",
                        "VernacExtend",
                        "712d339e99ee17eb7d5033e19ac614eb3ca6b532"
                    ]
                },
                {
                    "command": [
                        "by rewrite conform_mx_id.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "by rewrite nonconform_mx ?ne_mn //; apply: capmx_normP.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "sub_qidmx",
            "line_nb": 780,
            "steps": [
                {
                    "command": [
                        "rewrite /qidmx => idB; apply: {A}submx_trans (submx1 A) _.",
                        "VernacExtend",
                        "2855640502da0a3b2cfdfcd02ea9662c049d9a24"
                    ]
                },
                {
                    "command": [
                        "by case: eqP B idB => [-> _ /eqP-> | _ B]; rewrite (=^~ sub1mx, pid_mx_1).",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "qidmx_cap",
            "line_nb": 784,
            "steps": [
                {
                    "command": [
                        "rewrite unlock -sub1mx.",
                        "VernacExtend",
                        "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
                    ]
                },
                {
                    "command": [
                        "case idA: (qidmx A); case idB: (qidmx B); try by rewrite capmx_nopP.",
                        "VernacExtend",
                        "2906658ba5c272b473591a601bf1dd046b109346"
                    ]
                },
                {
                    "command": [
                        "case s1B: (_ <= B)%MS; first by rewrite capmx_normP.",
                        "VernacExtend",
                        "3763a4b8db689af316a7372b722bb29806ab4fb6"
                    ]
                },
                {
                    "command": [
                        "apply/idP=> /(sub_qidmx 1%:M).",
                        "VernacExtend",
                        "4bd6fa79b17bcd2bfb7af091fb325367a20385d6"
                    ]
                },
                {
                    "command": [
                        "by rewrite capmx_normP sub_capmx_gen s1B andbF.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "capmx_eq_norm",
            "line_nb": 791,
            "steps": [
                {
                    "command": [
                        "move=> eqABid; rewrite unlock -sub1mx {}eqABid.",
                        "VernacExtend",
                        "057edeb0967475c7ea5e8c98c449ddc5613eddc1"
                    ]
                },
                {
                    "command": [
                        "have norm_id m (C : 'M_(m, n)) (N := capmx_norm C) : capmx_norm N = N.",
                        "VernacExtend",
                        "406cde1174359c53bf162a2a18c4eede395555f9"
                    ]
                },
                {
                    "command": [
                        "by apply: capmx_norm_eq; rewrite ?capmx_normP ?andbb.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "case idB: (qidmx B); last by case: ifP; rewrite norm_id.",
                        "VernacExtend",
                        "3763a4b8db689af316a7372b722bb29806ab4fb6"
                    ]
                },
                {
                    "command": [
                        "rewrite /capmx_nop; case: (eqVneq m2 n) => [-> | neqm2n] in B idB *.",
                        "VernacExtend",
                        "712d339e99ee17eb7d5033e19ac614eb3ca6b532"
                    ]
                },
                {
                    "command": [
                        "have idN := idB; rewrite -{1}capmx_normP !qidmx_eq1 in idN idB.",
                        "VernacExtend",
                        "aa9d5fbc682ed874cd64b2543ca6c859b978e924"
                    ]
                },
                {
                    "command": [
                        "by rewrite conform_mx_id (eqP idN) (eqP idB).",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "by rewrite nonconform_mx ?neqm2n ?norm_id.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "capmxSl",
            "line_nb": 809,
            "steps": [
                {
                    "command": [
                        "by rewrite capmxE submxMl.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "sub_capmx",
            "line_nb": 812,
            "steps": [
                {
                    "command": [
                        "by rewrite capmxE sub_capmx_gen.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "capmxSr",
            "line_nb": 822,
            "steps": [
                {
                    "command": [
                        "by rewrite capmxC capmxSl.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "capmx_idPr",
            "line_nb": 825,
            "steps": [
                {
                    "command": [
                        "have:= @eqmxP _ _ _ (A :&: B)%MS B.",
                        "VernacExtend",
                        "406cde1174359c53bf162a2a18c4eede395555f9"
                    ]
                },
                {
                    "command": [
                        "by rewrite capmxSr sub_capmx submx_refl !andbT.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "capmx_idPl",
            "line_nb": 829,
            "steps": [
                {
                    "command": [
                        "by rewrite capmxC; apply: capmx_idPr.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "capmxS",
            "line_nb": 832,
            "steps": [
                {
                    "command": [
                        "by move=> sAC sBD; rewrite sub_capmx {1}capmxC !(submx_trans (capmxSr _ _)).",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "cap_eqmx",
            "line_nb": 835,
            "steps": [
                {
                    "command": [
                        "by move=> eqAC eqBD; apply/eqmxP; rewrite !capmxS ?eqAC ?eqBD.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "capmxMr",
            "line_nb": 838,
            "steps": [
                {
                    "command": [
                        "by rewrite sub_capmx !submxMr ?capmxSl ?capmxSr.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "cap0mx",
            "line_nb": 841,
            "steps": [
                {
                    "command": [
                        "exact: submx0null (capmxSl _ _).",
                        "VernacExtend",
                        "ce637ff86bafca5d8359473e8c02af644dcbdc43"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "capmx0",
            "line_nb": 844,
            "steps": [
                {
                    "command": [
                        "exact: submx0null (capmxSr _ _).",
                        "VernacExtend",
                        "ce637ff86bafca5d8359473e8c02af644dcbdc43"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "capTmx",
            "line_nb": 851,
            "steps": [
                {
                    "command": [
                        "by move=> Afull; apply/eqmxP; rewrite capmxC !capmxT ?andbb.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "capmx_nop_id",
            "line_nb": 854,
            "steps": [
                {
                    "command": [
                        "by rewrite /capmx_nop conform_mx_id.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "cap1mx",
            "line_nb": 857,
            "steps": [
                {
                    "command": [
                        "by rewrite unlock qidmx_eq1 eqxx capmx_nop_id.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "capmx1",
            "line_nb": 860,
            "steps": [
                {
                    "command": [
                        "by rewrite capmxC cap1mx.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "genmx_cap",
            "line_nb": 863,
            "steps": [
                {
                    "command": [
                        "rewrite -(eq_genmx (cap_eqmx (genmxE A) (genmxE B))).",
                        "VernacExtend",
                        "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
                    ]
                },
                {
                    "command": [
                        "case idAB: (qidmx <<A>> || qidmx <<B>>)%MS.",
                        "VernacExtend",
                        "e00fff71ff314c991514fc71c41a3556702e444a"
                    ]
                },
                {
                    "command": [
                        "rewrite [@capmx]unlock !capmx_nop_id !(fun_if (@genmx _ _)) !genmx_id.",
                        "VernacExtend",
                        "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
                    ]
                },
                {
                    "command": [
                        "by case: (qidmx _) idAB => //= ->.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "case idA: (qidmx _) idAB => //= idB; rewrite {2}capmx_eq_norm ?idA //.",
                        "VernacExtend",
                        "90a2acb29b7a5304b0ab6ba5269c420638ddef63"
                    ]
                },
                {
                    "command": [
                        "set C := (_ :&: _)%MS; have eq_idC: row_full C = qidmx C.",
                        "VernacExtend",
                        "5a669f4ad2118b005921530a069ac8f03fd7f32b"
                    ]
                },
                {
                    "command": [
                        "rewrite qidmx_cap idA -sub1mx sub_capmx genmxE; apply/andP=> [[s1A]].",
                        "VernacExtend",
                        "634a7639ed2fb7caf62757f84400927f5829b7d5"
                    ]
                },
                {
                    "command": [
                        "by case/idP: idA; rewrite qidmx_eq1 -genmx1 (sameP eqP genmxP) submx1.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "rewrite unlock /capmx_norm eq_idC.",
                        "VernacExtend",
                        "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
                    ]
                },
                {
                    "command": [
                        "by apply: choose_id (capmx_witnessP _); rewrite -eq_idC genmx_witnessP.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "bigcapmx_inf",
            "line_nb": 891,
            "steps": [
                {
                    "command": [
                        "by move=> Pi0; apply: submx_trans; rewrite (bigD1 i0) // capmxSl.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "sub_bigcapmxP",
            "line_nb": 894,
            "steps": [
                {
                    "command": [
                        "apply: (iffP idP) => [sAB i Pi | sAB].",
                        "VernacExtend",
                        "4bd6fa79b17bcd2bfb7af091fb325367a20385d6"
                    ]
                },
                {
                    "command": [
                        "by apply: (submx_trans sAB); rewrite (bigcapmx_inf Pi).",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "by elim/big_rec: _ => [|i Pi C sAC]; rewrite ?submx1 // sub_capmx sAB.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "genmx_bigcap",
            "line_nb": 899,
            "steps": [
                {
                    "command": [
                        "exact: (big_morph _ (@genmx_cap n n n) (@genmx1 n)).",
                        "VernacExtend",
                        "ce637ff86bafca5d8359473e8c02af644dcbdc43"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "matrix_modr",
            "line_nb": 910,
            "steps": [
                {
                    "command": [
                        "by rewrite !(capmxC A) -!(addsmxC C); apply: matrix_modl.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "capmx_compl",
            "line_nb": 913,
            "steps": [
                {
                    "command": [
                        "set D := (A :&: A^C)%MS; have: (D <= D)%MS by [].",
                        "VernacExtend",
                        "5a669f4ad2118b005921530a069ac8f03fd7f32b"
                    ]
                },
                {
                    "command": [
                        "rewrite sub_capmx andbC => /andP[/submxP[B defB]].",
                        "VernacExtend",
                        "3c42b53d0efc26db114b00541ac5e7fcb29e6aeb"
                    ]
                },
                {
                    "command": [
                        "rewrite submxE => /eqP; rewrite defB -!mulmxA mulKVmx ?copid_mx_id //.",
                        "VernacExtend",
                        "82d53976234637e3f0907eb36cddf61d028c6306"
                    ]
                },
                {
                    "command": [
                        "by rewrite mulmxA => ->; rewrite mul0mx.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "mxrank_injP",
            "line_nb": 930,
            "steps": [
                {
                    "command": [
                        "rewrite -mxrank_eq0 -(eqn_add2l (\\rank (A *m f))).",
                        "VernacExtend",
                        "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
                    ]
                },
                {
                    "command": [
                        "by rewrite mxrank_mul_ker addn0 eq_sym; apply: eqP.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "mxrank_disjoint_sum",
            "line_nb": 934,
            "steps": [
                {
                    "command": [
                        "move=> AB0; pose Ar := row_base A; pose Br := row_base B.",
                        "VernacExtend",
                        "81927515fc3ecfba885b46cf7f9013852021d404"
                    ]
                },
                {
                    "command": [
                        "have [Afree Bfree]: row_free Ar /\\ row_free Br by rewrite !row_base_free.",
                        "VernacExtend",
                        "406cde1174359c53bf162a2a18c4eede395555f9"
                    ]
                },
                {
                    "command": [
                        "have: (Ar :&: Br <= A :&: B)%MS by rewrite capmxS ?eq_row_base.",
                        "VernacExtend",
                        "406cde1174359c53bf162a2a18c4eede395555f9"
                    ]
                },
                {
                    "command": [
                        "rewrite {}AB0 submx0 -mxrank_eq0 capmxE mxrankMfree //.",
                        "VernacExtend",
                        "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
                    ]
                },
                {
                    "command": [
                        "set Cr := col_mx Ar Br; set Crl := lsubmx _; rewrite mxrank_eq0 => /eqP Crl0.",
                        "VernacExtend",
                        "a2f08e669f79fa0b4159cbbd568b5a0f40eb3ee7"
                    ]
                },
                {
                    "command": [
                        "rewrite -(adds_eqmx (eq_row_base _) (eq_row_base _)) addsmxE -/Cr.",
                        "VernacExtend",
                        "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
                    ]
                },
                {
                    "command": [
                        "suffices K0: kermx Cr = 0.",
                        "VernacExtend",
                        "290ed488b5562e885aa2cac56f3a69b4faa0eaa6"
                    ]
                },
                {
                    "command": [
                        "by apply/eqP; rewrite eqn_leq rank_leq_row -subn_eq0 -mxrank_ker K0 mxrank0.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "move/eqP: (mulmx_ker Cr); rewrite -[kermx Cr]hsubmxK mul_row_col -/Crl Crl0.",
                        "VernacExtend",
                        "057edeb0967475c7ea5e8c98c449ddc5613eddc1"
                    ]
                },
                {
                    "command": [
                        "rewrite mul0mx add0r -mxrank_eq0 mxrankMfree // mxrank_eq0 => /eqP->.",
                        "VernacExtend",
                        "3c42b53d0efc26db114b00541ac5e7fcb29e6aeb"
                    ]
                },
                {
                    "command": [
                        "exact: row_mx0.",
                        "VernacExtend",
                        "ce637ff86bafca5d8359473e8c02af644dcbdc43"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "diffmxE",
            "line_nb": 947,
            "steps": [
                {
                    "command": [
                        "by rewrite unlock; apply/eqmxP; rewrite !genmxE !capmxE andbb.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "genmx_diff",
            "line_nb": 950,
            "steps": [
                {
                    "command": [
                        "by rewrite [@diffmx]unlock genmx_id.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "diffmxSl",
            "line_nb": 953,
            "steps": [
                {
                    "command": [
                        "by rewrite diffmxE capmxSl.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "capmx_diff",
            "line_nb": 956,
            "steps": [
                {
                    "command": [
                        "apply/eqP; pose C := capmx_gen A B; rewrite -submx0 -(capmx_compl C).",
                        "VernacExtend",
                        "1d56ea0c5dee74815623eb92efea2fa677be18c5"
                    ]
                },
                {
                    "command": [
                        "by rewrite sub_capmx -capmxE sub_capmx andbAC -sub_capmx -diffmxE -sub_capmx.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "addsmx_diff_cap_eq",
            "line_nb": 960,
            "steps": [
                {
                    "command": [
                        "apply/eqmxP; rewrite addsmx_sub capmxSl diffmxSl /=.",
                        "VernacExtend",
                        "56c014161b39aecfb3c54301c2409dba4e8e1857"
                    ]
                },
                {
                    "command": [
                        "set C := (A :\\: B)%MS; set D := capmx_gen A B.",
                        "VernacExtend",
                        "7405ffc63057f1493a790d3f39e251cc5fefe81f"
                    ]
                },
                {
                    "command": [
                        "suffices sACD: (A <= C + D)%MS.",
                        "VernacExtend",
                        "290ed488b5562e885aa2cac56f3a69b4faa0eaa6"
                    ]
                },
                {
                    "command": [
                        "by rewrite (submx_trans sACD) ?addsmxS ?capmxE.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "have:= addsmx_compl_full D; rewrite /row_full addsmxE.",
                        "VernacExtend",
                        "aa9d5fbc682ed874cd64b2543ca6c859b978e924"
                    ]
                },
                {
                    "command": [
                        "case/row_fullP=> U /(congr1 (mulmx A)); rewrite mulmx1.",
                        "VernacExtend",
                        "90a2acb29b7a5304b0ab6ba5269c420638ddef63"
                    ]
                },
                {
                    "command": [
                        "rewrite -[U]hsubmxK mul_row_col mulmxDr addrC 2!mulmxA.",
                        "VernacExtend",
                        "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
                    ]
                },
                {
                    "command": [
                        "set V := _ *m _ => defA; rewrite -defA; move/(canRL (addrK _)): defA => defV.",
                        "VernacExtend",
                        "575d26f3e28532d1d961d47d4859bd228fbb6e16"
                    ]
                },
                {
                    "command": [
                        "suffices /submxP[W ->]: (V <= C)%MS by rewrite -mul_row_col addsmxE submxMl.",
                        "VernacExtend",
                        "290ed488b5562e885aa2cac56f3a69b4faa0eaa6"
                    ]
                },
                {
                    "command": [
                        "rewrite diffmxE sub_capmx {1}defV -mulNmx addmx_sub 1?mulmx_sub //.",
                        "VernacExtend",
                        "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
                    ]
                },
                {
                    "command": [
                        "by rewrite -capmxE capmxSl.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "mxrank_cap_compl",
            "line_nb": 973,
            "steps": [
                {
                    "command": [
                        "rewrite addnC -mxrank_disjoint_sum ?addsmx_diff_cap_eq //.",
                        "VernacExtend",
                        "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
                    ]
                },
                {
                    "command": [
                        "by rewrite (capmxC A) capmxA capmx_diff cap0mx.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "mxrank_sum_cap",
            "line_nb": 977,
            "steps": [
                {
                    "command": [
                        "set C := (A :&: B)%MS; set D := (A :\\: B)%MS.",
                        "VernacExtend",
                        "7405ffc63057f1493a790d3f39e251cc5fefe81f"
                    ]
                },
                {
                    "command": [
                        "have rDB: \\rank (A + B)%MS = \\rank (D + B)%MS.",
                        "VernacExtend",
                        "406cde1174359c53bf162a2a18c4eede395555f9"
                    ]
                },
                {
                    "command": [
                        "apply/eqP; rewrite mxrank_leqif_sup; first by rewrite addsmxS ?diffmxSl.",
                        "VernacExtend",
                        "3763a4b8db689af316a7372b722bb29806ab4fb6"
                    ]
                },
                {
                    "command": [
                        "by rewrite addsmx_sub addsmxSr -(addsmx_diff_cap_eq A B) addsmxS ?capmxSr.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "rewrite {1}rDB mxrank_disjoint_sum ?capmx_diff //.",
                        "VernacExtend",
                        "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
                    ]
                },
                {
                    "command": [
                        "by rewrite addnC addnA mxrank_cap_compl.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "mxrank_adds_leqif",
            "line_nb": 985,
            "steps": [
                {
                    "command": [
                        "rewrite -mxrank_sum_cap; split; first exact: leq_addr.",
                        "VernacExtend",
                        "3763a4b8db689af316a7372b722bb29806ab4fb6"
                    ]
                },
                {
                    "command": [
                        "by rewrite addnC (@eqn_add2r _ 0) eq_sym mxrank_eq0 -submx0.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "proj_mx_sub",
            "line_nb": 989,
            "steps": [
                {
                    "command": [
                        "by rewrite !mulmx_sub // -addsmxE addsmx0.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "proj_mx_compl_sub",
            "line_nb": 992,
            "steps": [
                {
                    "command": [
                        "rewrite addsmxE => sWUV; rewrite mulmxA -{1}(mulmxKpV sWUV) -mulmxBr.",
                        "VernacExtend",
                        "82d53976234637e3f0907eb36cddf61d028c6306"
                    ]
                },
                {
                    "command": [
                        "by rewrite mulmx_sub // opp_col_mx add_col_mx subrr subr0 -addsmxE adds0mx.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "proj_mx_id",
            "line_nb": 996,
            "steps": [
                {
                    "command": [
                        "move=> dxUV sWU; apply/eqP; rewrite -subr_eq0 -submx0 -dxUV.",
                        "VernacExtend",
                        "f7feb259d6220ca40e8a86b90bd06f137aa140ac"
                    ]
                },
                {
                    "command": [
                        "rewrite sub_capmx addmx_sub ?eqmx_opp ?proj_mx_sub //= -eqmx_opp opprB.",
                        "VernacExtend",
                        "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
                    ]
                },
                {
                    "command": [
                        "by rewrite proj_mx_compl_sub // (submx_trans sWU) ?addsmxSl.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "proj_mx_0",
            "line_nb": 1001,
            "steps": [
                {
                    "command": [
                        "move=> dxUV sWV; apply/eqP; rewrite -submx0 -dxUV.",
                        "VernacExtend",
                        "f7feb259d6220ca40e8a86b90bd06f137aa140ac"
                    ]
                },
                {
                    "command": [
                        "rewrite sub_capmx proj_mx_sub /= -[_ *m _](subrK W) addmx_sub // -eqmx_opp.",
                        "VernacExtend",
                        "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
                    ]
                },
                {
                    "command": [
                        "by rewrite opprB proj_mx_compl_sub // (submx_trans sWV) ?addsmxSr.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "add_proj_mx",
            "line_nb": 1006,
            "steps": [
                {
                    "command": [
                        "move=> dxUV sWUV; apply/eqP; rewrite -subr_eq0 -submx0 -dxUV.",
                        "VernacExtend",
                        "f7feb259d6220ca40e8a86b90bd06f137aa140ac"
                    ]
                },
                {
                    "command": [
                        "rewrite -addrA sub_capmx {2}addrCA -!(opprB W).",
                        "VernacExtend",
                        "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
                    ]
                },
                {
                    "command": [
                        "by rewrite !{1}addmx_sub ?proj_mx_sub ?eqmx_opp ?proj_mx_compl_sub // addsmxC.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "proj_mx_proj",
            "line_nb": 1011,
            "steps": [
                {
                    "command": [
                        "by move=> P dxUV; rewrite -{-2}[P]mul1mx proj_mx_id ?proj_mx_sub.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "eqmxMunitP",
            "line_nb": 1033,
            "steps": [
                {
                    "command": [
                        "apply: (iffP eqmxP) => [eqUV | [P Punit ->]]; last first.",
                        "VernacExtend",
                        "3763a4b8db689af316a7372b722bb29806ab4fb6"
                    ]
                },
                {
                    "command": [
                        "by apply/eqmxMfull; rewrite row_full_unit.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "have [D defU]: exists D, U = D *m V by apply/submxP; rewrite eqUV.",
                        "VernacExtend",
                        "406cde1174359c53bf162a2a18c4eede395555f9"
                    ]
                },
                {
                    "command": [
                        "have{eqUV} [Pt Pt_unit defUt]: {Pt | Pt \\in unitmx & V^T *m D^T = V^T *m Pt}.",
                        "VernacExtend",
                        "406cde1174359c53bf162a2a18c4eede395555f9"
                    ]
                },
                {
                    "command": [
                        "by apply/complete_unitmx; rewrite -trmx_mul -defU !mxrank_tr eqUV.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "by exists Pt^T; last apply/trmx_inj; rewrite ?unitmx_tr // defU !trmx_mul trmxK.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "binary_mxsum_proof",
            "line_nb": 1063,
            "steps": [
                {
                    "command": [
                        "by case: S1 S2 => [A1 r1 A1P] [A2 r2 A2P]; right.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "nary_mxsum_proof",
            "line_nb": 1070,
            "steps": [
                {
                    "command": [
                        "elim/big_rec2: _ => [|j]; first by rewrite -(mxrank0 n n); left.",
                        "VernacExtend",
                        "3763a4b8db689af316a7372b722bb29806ab4fb6"
                    ]
                },
                {
                    "command": [
                        "by case: (S_ j); right.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "mxdirectP",
            "line_nb": 1079,
            "steps": [
                {
                    "command": [
                        "exact: eqnP.",
                        "VernacExtend",
                        "ce637ff86bafca5d8359473e8c02af644dcbdc43"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "mxdirect_trivial",
            "line_nb": 1083,
            "steps": [
                {
                    "command": [
                        "exact: eqxx.",
                        "VernacExtend",
                        "ce637ff86bafca5d8359473e8c02af644dcbdc43"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "mxrank_sum_leqif",
            "line_nb": 1086,
            "steps": [
                {
                    "command": [
                        "rewrite /mxdirect_def; case: S => [[A] [r] /= defAr]; split=> //=.",
                        "VernacExtend",
                        "2253759ff5c580854290fce82296a80357452125"
                    ]
                },
                {
                    "command": [
                        "elim: m A r / defAr => // m1 m2 A1 A2 r1 r2 _ leAr1 _ leAr2.",
                        "VernacExtend",
                        "e686a1895f1799b840b76242f931100819a9ad6c"
                    ]
                },
                {
                    "command": [
                        "by apply: leq_trans (leq_add leAr1 leAr2); rewrite mxrank_adds_leqif.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "mxdirectE",
            "line_nb": 1091,
            "steps": [
                {
                    "command": [
                        "by [].",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "mxdirectEgeq",
            "line_nb": 1094,
            "steps": [
                {
                    "command": [
                        "by rewrite (geq_leqif (mxrank_sum_leqif S)).",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "mxdirect_addsE",
            "line_nb": 1099,
            "steps": [
                {
                    "command": [
                        "rewrite (@mxdirectE n) /=.",
                        "VernacExtend",
                        "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
                    ]
                },
                {
                    "command": [
                        "have:= leqif_add (mxrank_sum_leqif S1) (mxrank_sum_leqif S2).",
                        "VernacExtend",
                        "406cde1174359c53bf162a2a18c4eede395555f9"
                    ]
                },
                {
                    "command": [
                        "move/(leqif_trans (mxrank_adds_leqif (unwrap S1) (unwrap S2)))=> ->.",
                        "VernacExtend",
                        "b1b2cb7a3a617cba67460b4eca1f04de3c1cc716"
                    ]
                },
                {
                    "command": [
                        "by rewrite andbC -andbA submx0.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "mxdirect_addsP",
            "line_nb": 1105,
            "steps": [
                {
                    "command": [
                        "by rewrite mxdirect_addsE !mxdirect_trivial; apply: eqP.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "mxdirect_sums_recP",
            "line_nb": 1112,
            "steps": [
                {
                    "command": [
                        "rewrite /TIsum; apply: (iffP eqnP) => /= [dxS i Pi | dxS].",
                        "VernacExtend",
                        "634a7639ed2fb7caf62757f84400927f5829b7d5"
                    ]
                },
                {
                    "command": [
                        "set Si' := (\\sum_(j | _) unwrap (S_ j))%MS.",
                        "VernacExtend",
                        "69a61e99b234580f7b41fa5b9655c87ba9a76f70"
                    ]
                },
                {
                    "command": [
                        "have: mxdirect (unwrap (S_ i) + Si') by apply/eqnP; rewrite /= -!(bigD1 i).",
                        "VernacExtend",
                        "406cde1174359c53bf162a2a18c4eede395555f9"
                    ]
                },
                {
                    "command": [
                        "by rewrite mxdirect_addsE => /and3P[-> _ /eqP].",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "elim: _.+1 {-2 4}P (subxx P) (ltnSn #|P|) => // m IHm Q; move/subsetP=> sQP.",
                        "VernacExtend",
                        "989401386cd39cd1438e3fa67734cdc58d3fb2ea"
                    ]
                },
                {
                    "command": [
                        "case: (pickP Q) => [i Qi | Q0]; last by rewrite !big_pred0 ?mxrank0.",
                        "VernacExtend",
                        "3763a4b8db689af316a7372b722bb29806ab4fb6"
                    ]
                },
                {
                    "command": [
                        "rewrite (cardD1x Qi) !((bigD1 i) Q) //=.",
                        "VernacExtend",
                        "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
                    ]
                },
                {
                    "command": [
                        "move/IHm=> <- {IHm}/=; last by apply/subsetP=> j /andP[/sQP].",
                        "VernacExtend",
                        "3763a4b8db689af316a7372b722bb29806ab4fb6"
                    ]
                },
                {
                    "command": [
                        "case: (dxS i (sQP i Qi)) => /eqnP=> <- TiQ_0; rewrite mxrank_disjoint_sum //.",
                        "VernacExtend",
                        "82d53976234637e3f0907eb36cddf61d028c6306"
                    ]
                },
                {
                    "command": [
                        "apply/eqP; rewrite -submx0 -{2}TiQ_0 capmxS //=.",
                        "VernacExtend",
                        "56c014161b39aecfb3c54301c2409dba4e8e1857"
                    ]
                },
                {
                    "command": [
                        "by apply/sumsmx_subP=> j /= /andP[Qj i'j]; rewrite (sumsmx_sup j) ?[P j]sQP.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "mxdirect_sumsP",
            "line_nb": 1125,
            "steps": [
                {
                    "command": [
                        "apply: (iffP (mxdirect_sums_recP _)) => dxA i /dxA; first by case.",
                        "VernacExtend",
                        "3763a4b8db689af316a7372b722bb29806ab4fb6"
                    ]
                },
                {
                    "command": [
                        "by rewrite mxdirect_trivial.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "mxdirect_sumsE",
            "line_nb": 1129,
            "steps": [
                {
                    "command": [
                        "apply: (iffP (mxdirect_sums_recP _)) => [dxS | [dxS_ dxS] i Pi].",
                        "VernacExtend",
                        "4bd6fa79b17bcd2bfb7af091fb325367a20385d6"
                    ]
                },
                {
                    "command": [
                        "by do [split; last apply/mxdirect_sumsP] => i; case/dxS.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "by split; [apply: dxS_ | apply: mxdirect_sumsP Pi].",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "sub_daddsmx",
            "line_nb": 1139,
            "steps": [
                {
                    "command": [
                        "move=> dxB /sub_addsmxP[u defA].",
                        "VernacExtend",
                        "b1b2cb7a3a617cba67460b4eca1f04de3c1cc716"
                    ]
                },
                {
                    "command": [
                        "exists (u.1 *m B1) (u.2 *m B2); rewrite ?submxMl // => C1 C2 sCB1 sCB2.",
                        "VernacExtend",
                        "c34c8da6028d8c1852bd60896dffb4b76d1c3b6d"
                    ]
                },
                {
                    "command": [
                        "move/(canLR (addrK _)) => defC1.",
                        "VernacExtend",
                        "b1b2cb7a3a617cba67460b4eca1f04de3c1cc716"
                    ]
                },
                {
                    "command": [
                        "suffices: (C2 - u.2 *m B2 <= B1 :&: B2)%MS.",
                        "VernacExtend",
                        "290ed488b5562e885aa2cac56f3a69b4faa0eaa6"
                    ]
                },
                {
                    "command": [
                        "by rewrite dxB submx0 subr_eq0 -defC1 defA; move/eqP->; rewrite addrK.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "rewrite sub_capmx -opprB -{1}(canLR (addKr _) defA) -addrA defC1.",
                        "VernacExtend",
                        "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
                    ]
                },
                {
                    "command": [
                        "by rewrite !(eqmx_opp, addmx_sub) ?submxMl.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "sub_dsumsmx",
            "line_nb": 1152,
            "steps": [
                {
                    "command": [
                        "move/mxdirect_sumsP=> dxB /sub_sumsmxP[u defA].",
                        "VernacExtend",
                        "b1b2cb7a3a617cba67460b4eca1f04de3c1cc716"
                    ]
                },
                {
                    "command": [
                        "pose A_ i := u i *m B i.",
                        "VernacExtend",
                        "3c5f04de94609049d978298aa02ff35fb35ea7c7"
                    ]
                },
                {
                    "command": [
                        "exists A_ => //= [i _ | C sCB defAC i Pi]; first exact: submxMl.",
                        "VernacExtend",
                        "3763a4b8db689af316a7372b722bb29806ab4fb6"
                    ]
                },
                {
                    "command": [
                        "apply/eqP; rewrite -subr_eq0 -submx0 -{dxB}(dxB i Pi) /=.",
                        "VernacExtend",
                        "56c014161b39aecfb3c54301c2409dba4e8e1857"
                    ]
                },
                {
                    "command": [
                        "rewrite sub_capmx addmx_sub ?eqmx_opp ?submxMl ?sCB //=.",
                        "VernacExtend",
                        "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
                    ]
                },
                {
                    "command": [
                        "rewrite -(subrK A (C i)) -addrA -opprB addmx_sub ?eqmx_opp //.",
                        "VernacExtend",
                        "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
                    ]
                },
                {
                    "command": [
                        "rewrite addrC defAC (bigD1 i) // addKr /= summx_sub // => j Pi'j.",
                        "VernacExtend",
                        "3c42b53d0efc26db114b00541ac5e7fcb29e6aeb"
                    ]
                },
                {
                    "command": [
                        "by rewrite (sumsmx_sup j) ?sCB //; case/andP: Pi'j.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "rewrite addrC defA (bigD1 i) // addKr /= summx_sub // => j Pi'j.",
                        "VernacExtend",
                        "3c42b53d0efc26db114b00541ac5e7fcb29e6aeb"
                    ]
                },
                {
                    "command": [
                        "by rewrite (sumsmx_sup j) ?submxMl.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "eigenspaceP",
            "line_nb": 1169,
            "steps": [
                {
                    "command": [
                        "rewrite (sameP (sub_kermxP _ _) eqP).",
                        "VernacExtend",
                        "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
                    ]
                },
                {
                    "command": [
                        "by rewrite mulmxBr subr_eq0 mul_mx_scalar; apply: eqP.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "eigenvalueP",
            "line_nb": 1173,
            "steps": [
                {
                    "command": [
                        "by apply: (iffP (rowV0Pn _)) => [] [v]; move/eigenspaceP; exists v.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "mxdirect_delta",
            "line_nb": 1284,
            "steps": [
                {
                    "command": [
                        "pose fP := image f P => Uf; have UfP: uniq fP by apply/dinjectiveP.",
                        "VernacExtend",
                        "d2991b7607b6316c9d43d28c85f87ca601299ca6"
                    ]
                },
                {
                    "command": [
                        "suffices /mxdirectP : mxdirect (\\sum_i <<delta_mx 0 i : 'rV[F]_n>>).",
                        "VernacExtend",
                        "290ed488b5562e885aa2cac56f3a69b4faa0eaa6"
                    ]
                },
                {
                    "command": [
                        "rewrite /= !(bigID [mem fP] predT) -!big_uniq //= !big_map !big_filter.",
                        "VernacExtend",
                        "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
                    ]
                },
                {
                    "command": [
                        "by move/mxdirectP; rewrite mxdirect_addsE => /andP[].",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "apply/mxdirectP=> /=; transitivity (mxrank (1%:M : 'M[F]_n)).",
                        "VernacExtend",
                        "2f210654871c4a9b3eec94d1b51b33836d65a2e3"
                    ]
                },
                {
                    "command": [
                        "apply/eqmx_rank; rewrite submx1 mx1_sum_delta summx_sub_sums // => i _.",
                        "VernacExtend",
                        "5fce7e5361004176d6b434b36b4623c7387f70bb"
                    ]
                },
                {
                    "command": [
                        "by rewrite -(mul_delta_mx (0 : 'I_1)) genmxE submxMl.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "rewrite mxrank1 -[LHS]card_ord -sum1_card.",
                        "VernacExtend",
                        "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
                    ]
                },
                {
                    "command": [
                        "by apply/eq_bigr=> i _; rewrite /= mxrank_gen mxrank_delta.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "card_GL",
            "line_nb": 1298,
            "steps": [
                {
                    "command": [
                        "case: n => // n' _; set n := n'.+1; set p := #|F|.",
                        "VernacExtend",
                        "f4ca15579cffe1e0ea1d940cc33140fcfbe07e75"
                    ]
                },
                {
                    "command": [
                        "rewrite big_nat_rev big_add1 -triangular_sum expn_sum -big_split /=.",
                        "VernacExtend",
                        "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
                    ]
                },
                {
                    "command": [
                        "pose fr m := [pred A : 'M[F]_(m, n) | \\rank A == m].",
                        "VernacExtend",
                        "3c5f04de94609049d978298aa02ff35fb35ea7c7"
                    ]
                },
                {
                    "command": [
                        "set m := {-7}n; transitivity #|fr m|.",
                        "VernacExtend",
                        "2b75951a07df6c8c4c659adb94644bfd6da539e8"
                    ]
                },
                {
                    "command": [
                        "by rewrite cardsT /= card_sub; apply: eq_card => A; rewrite -row_free_unit.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "elim: m (leqnn m : m <= n) => [_|m IHm]; last move/ltnW=> le_mn.",
                        "VernacExtend",
                        "3763a4b8db689af316a7372b722bb29806ab4fb6"
                    ]
                },
                {
                    "command": [
                        "rewrite (@eq_card1 _ (0 : 'M_(0, n))) ?big_geq //= => A.",
                        "VernacExtend",
                        "3c42b53d0efc26db114b00541ac5e7fcb29e6aeb"
                    ]
                },
                {
                    "command": [
                        "by rewrite flatmx0 !inE !eqxx.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "rewrite big_nat_recr // -{}IHm //= !subSS mulnBr muln1 -expnD subnKC //.",
                        "VernacExtend",
                        "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
                    ]
                },
                {
                    "command": [
                        "rewrite -sum_nat_const /= -sum1_card -add1n.",
                        "VernacExtend",
                        "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
                    ]
                },
                {
                    "command": [
                        "rewrite (partition_big dsubmx (fr m)) /= => [|A]; last first.",
                        "VernacExtend",
                        "3763a4b8db689af316a7372b722bb29806ab4fb6"
                    ]
                },
                {
                    "command": [
                        "rewrite !inE -{1}(vsubmxK A); move: {A}(_ A) (_ A) => Ad Au Afull.",
                        "VernacExtend",
                        "7e529e80bb2879787ee6d9466056f19f0215c721"
                    ]
                },
                {
                    "command": [
                        "rewrite eqn_leq rank_leq_row -(leq_add2l (\\rank Au)) -mxrank_sum_cap.",
                        "VernacExtend",
                        "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
                    ]
                },
                {
                    "command": [
                        "rewrite {1 3}[@mxrank]lock addsmxE (eqnP Afull) -lock -addnA.",
                        "VernacExtend",
                        "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
                    ]
                },
                {
                    "command": [
                        "by rewrite leq_add ?rank_leq_row ?leq_addr.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "apply: eq_bigr => A rAm; rewrite (reindex (col_mx^~ A)) /=; last first.",
                        "VernacExtend",
                        "3763a4b8db689af316a7372b722bb29806ab4fb6"
                    ]
                },
                {
                    "command": [
                        "exists usubmx => [v _ | vA]; first by rewrite col_mxKu.",
                        "VernacExtend",
                        "3763a4b8db689af316a7372b722bb29806ab4fb6"
                    ]
                },
                {
                    "command": [
                        "by case/andP=> _ /eqP <-; rewrite vsubmxK.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "transitivity #|~: [set v *m A | v in 'rV_m]|; last first.",
                        "VernacExtend",
                        "3763a4b8db689af316a7372b722bb29806ab4fb6"
                    ]
                },
                {
                    "command": [
                        "rewrite cardsCs setCK card_imset ?card_matrix ?card_ord ?mul1n //.",
                        "VernacExtend",
                        "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
                    ]
                },
                {
                    "command": [
                        "have [B AB1] := row_freeP rAm; apply: can_inj (mulmx^~ B) _ => v.",
                        "VernacExtend",
                        "af1e5df3b072070e589731222b14b19e1cb478bc"
                    ]
                },
                {
                    "command": [
                        "by rewrite -mulmxA AB1 mulmx1.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "rewrite -sum1_card; apply: eq_bigl => v; rewrite !inE col_mxKd eqxx.",
                        "VernacExtend",
                        "fe8f197e86415fc7f0a74eda9d312128b9473eda"
                    ]
                },
                {
                    "command": [
                        "rewrite andbT eqn_leq rank_leq_row /= -(leq_add2r (\\rank (v :&: A)%MS)).",
                        "VernacExtend",
                        "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
                    ]
                },
                {
                    "command": [
                        "rewrite -addsmxE mxrank_sum_cap (eqnP rAm) addnAC leq_add2r.",
                        "VernacExtend",
                        "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
                    ]
                },
                {
                    "command": [
                        "rewrite (ltn_leqif (mxrank_leqif_sup _)) ?capmxSl // sub_capmx submx_refl.",
                        "VernacExtend",
                        "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
                    ]
                },
                {
                    "command": [
                        "by congr (~~ _); apply/submxP/imsetP=> [] [u]; exists u.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "LUP_card_GL",
            "line_nb": 1327,
            "steps": [
                {
                    "command": [
                        "case: n => // n' _; set n := n'.+1; set p := #|F|.",
                        "VernacExtend",
                        "f4ca15579cffe1e0ea1d940cc33140fcfbe07e75"
                    ]
                },
                {
                    "command": [
                        "rewrite cardsT /= card_sub /GRing.unit /= big_add1 /= -triangular_sum -/n.",
                        "VernacExtend",
                        "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
                    ]
                },
                {
                    "command": [
                        "elim: {n'}n => [|n IHn].",
                        "VernacExtend",
                        "e686a1895f1799b840b76242f931100819a9ad6c"
                    ]
                },
                {
                    "command": [
                        "rewrite !big_geq // mul1n (@eq_card _ _ predT) ?card_matrix //= => M.",
                        "VernacExtend",
                        "3c42b53d0efc26db114b00541ac5e7fcb29e6aeb"
                    ]
                },
                {
                    "command": [
                        "by rewrite {1}[M]flatmx0 -(flatmx0 1%:M) unitmx1.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "rewrite !big_nat_recr //= expnD mulnAC mulnA -{}IHn -mulnA mulnC.",
                        "VernacExtend",
                        "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
                    ]
                },
                {
                    "command": [
                        "set LHS := #|_|; rewrite -[n.+1]muln1 -{2}[n]mul1n {}/LHS.",
                        "VernacExtend",
                        "8460a73fe74726b8e94ff0752da65e8d48f68f26"
                    ]
                },
                {
                    "command": [
                        "rewrite -!card_matrix subn1 -(cardC1 0) -mulnA; set nzC := predC1 _.",
                        "VernacExtend",
                        "c1f58f36c5711f022b4a54717f37c2782f34a159"
                    ]
                },
                {
                    "command": [
                        "rewrite -sum1_card (partition_big lsubmx nzC) => [|A]; last first.",
                        "VernacExtend",
                        "3763a4b8db689af316a7372b722bb29806ab4fb6"
                    ]
                },
                {
                    "command": [
                        "rewrite unitmxE unitfE; apply: contra; move/eqP=> v0.",
                        "VernacExtend",
                        "399d290ad8c436d6764653e1c02126831ee79b9d"
                    ]
                },
                {
                    "command": [
                        "rewrite -[A]hsubmxK v0 -[n.+1]/(1 + n)%N -col_mx0.",
                        "VernacExtend",
                        "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
                    ]
                },
                {
                    "command": [
                        "rewrite -[rsubmx _]vsubmxK -det_tr tr_row_mx !tr_col_mx !trmx0.",
                        "VernacExtend",
                        "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
                    ]
                },
                {
                    "command": [
                        "by rewrite det_lblock [0]mx11_scalar det_scalar1 mxE mul0r.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "rewrite -sum_nat_const; apply: eq_bigr; rewrite /= -[n.+1]/(1 + n)%N => v nzv.",
                        "VernacExtend",
                        "0288f65064e83af8559a49f90a2eba4421e03fd4"
                    ]
                },
                {
                    "command": [
                        "case: (pickP (fun i => v i 0 != 0)) => [k nza | v0]; last first.",
                        "VernacExtend",
                        "3763a4b8db689af316a7372b722bb29806ab4fb6"
                    ]
                },
                {
                    "command": [
                        "by case/eqP: nzv; apply/colP=> i; move/eqP: (v0 i); rewrite mxE.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "have xrkK: involutive (@xrow F _ _ 0 k).",
                        "VernacExtend",
                        "406cde1174359c53bf162a2a18c4eede395555f9"
                    ]
                },
                {
                    "command": [
                        "by move=> m A /=; rewrite /xrow -row_permM tperm2 row_perm1.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "rewrite (reindex_inj (inv_inj (xrkK (1 + n)%N))) /= -[n.+1]/(1 + n)%N.",
                        "VernacExtend",
                        "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
                    ]
                },
                {
                    "command": [
                        "rewrite (partition_big ursubmx xpredT) //= -sum_nat_const.",
                        "VernacExtend",
                        "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
                    ]
                },
                {
                    "command": [
                        "apply: eq_bigr => u _; set a : F := v _ _ in nza.",
                        "VernacExtend",
                        "ac591433247162d5294d7c948ab3b309c2d6e368"
                    ]
                },
                {
                    "command": [
                        "set v1 : 'cV_(1 + n) := xrow 0 k v.",
                        "VernacExtend",
                        "69a61e99b234580f7b41fa5b9655c87ba9a76f70"
                    ]
                },
                {
                    "command": [
                        "have def_a: usubmx v1 = a%:M.",
                        "VernacExtend",
                        "406cde1174359c53bf162a2a18c4eede395555f9"
                    ]
                },
                {
                    "command": [
                        "by rewrite [_ v1]mx11_scalar mxE lshift0 mxE tpermL.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "pose Schur := dsubmx v1 *m (a^-1 *: u).",
                        "VernacExtend",
                        "3c5f04de94609049d978298aa02ff35fb35ea7c7"
                    ]
                },
                {
                    "command": [
                        "pose L : 'M_(1 + n) := block_mx a%:M 0 (dsubmx v1) 1%:M.",
                        "VernacExtend",
                        "3c5f04de94609049d978298aa02ff35fb35ea7c7"
                    ]
                },
                {
                    "command": [
                        "pose U B : 'M_(1 + n) := block_mx 1 (a^-1 *: u) 0 B.",
                        "VernacExtend",
                        "3c5f04de94609049d978298aa02ff35fb35ea7c7"
                    ]
                },
                {
                    "command": [
                        "rewrite (reindex (fun B => L *m U B)); last first.",
                        "VernacExtend",
                        "3763a4b8db689af316a7372b722bb29806ab4fb6"
                    ]
                },
                {
                    "command": [
                        "exists (fun A1 => drsubmx A1 - Schur) => [B _ | A1].",
                        "VernacExtend",
                        "3c42b53d0efc26db114b00541ac5e7fcb29e6aeb"
                    ]
                },
                {
                    "command": [
                        "by rewrite mulmx_block block_mxKdr mul1mx addrC addKr.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "rewrite !inE mulmx_block !mulmx0 mul0mx !mulmx1 !addr0 mul1mx addrC subrK.",
                        "VernacExtend",
                        "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
                    ]
                },
                {
                    "command": [
                        "rewrite mul_scalar_mx scalerA divff // scale1r andbC; case/and3P => /eqP <- _.",
                        "VernacExtend",
                        "712d339e99ee17eb7d5033e19ac614eb3ca6b532"
                    ]
                },
                {
                    "command": [
                        "rewrite -{1}(hsubmxK A1) xrowE mul_mx_row row_mxKl -xrowE => /eqP def_v.",
                        "VernacExtend",
                        "3c42b53d0efc26db114b00541ac5e7fcb29e6aeb"
                    ]
                },
                {
                    "command": [
                        "rewrite -def_a block_mxEh vsubmxK /v1 -def_v xrkK.",
                        "VernacExtend",
                        "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
                    ]
                },
                {
                    "command": [
                        "apply: trmx_inj; rewrite tr_row_mx tr_col_mx trmx_ursub trmx_drsub trmx_lsub.",
                        "VernacExtend",
                        "56c014161b39aecfb3c54301c2409dba4e8e1857"
                    ]
                },
                {
                    "command": [
                        "by rewrite hsubmxK vsubmxK.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "rewrite -sum1_card; apply: eq_bigl => B; rewrite xrowE unitmxE.",
                        "VernacExtend",
                        "fe8f197e86415fc7f0a74eda9d312128b9473eda"
                    ]
                },
                {
                    "command": [
                        "rewrite !det_mulmx unitrM -unitmxE unitmx_perm det_lblock det_ublock.",
                        "VernacExtend",
                        "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
                    ]
                },
                {
                    "command": [
                        "rewrite !det_scalar1 det1 mulr1 mul1r unitrM unitfE nza -unitmxE.",
                        "VernacExtend",
                        "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
                    ]
                },
                {
                    "command": [
                        "rewrite mulmx_block !mulmx0 mul0mx !addr0 !mulmx1 mul1mx block_mxKur.",
                        "VernacExtend",
                        "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
                    ]
                },
                {
                    "command": [
                        "rewrite mul_scalar_mx scalerA divff // scale1r eqxx andbT.",
                        "VernacExtend",
                        "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
                    ]
                },
                {
                    "command": [
                        "by rewrite block_mxEh mul_mx_row row_mxKl -def_a vsubmxK -xrowE xrkK eqxx andbT.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "card_GL_1",
            "line_nb": 1371,
            "steps": [
                {
                    "command": [
                        "by rewrite card_GL // mul1n big_nat1 expn1 subn1.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "card_GL_2",
            "line_nb": 1374,
            "steps": [
                {
                    "command": [
                        "rewrite card_GL // big_ltn // big_nat1 expn1 -(addn1 #|F|) -subn1 -!mulnA.",
                        "VernacExtend",
                        "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
                    ]
                },
                {
                    "command": [
                        "by rewrite -subn_sqr.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "logn_card_GL_p",
            "line_nb": 1379,
            "steps": [
                {
                    "command": [
                        "move=> p_pr; have p_gt1 := prime_gt1 p_pr.",
                        "VernacExtend",
                        "ccd83c252dcbae3d56f3d057fcb8217878b51901"
                    ]
                },
                {
                    "command": [
                        "have p_i_gt0: p ^ _ > 0 by move=> i; rewrite expn_gt0 ltnW.",
                        "VernacExtend",
                        "406cde1174359c53bf162a2a18c4eede395555f9"
                    ]
                },
                {
                    "command": [
                        "rewrite (card_GL _ (ltn0Sn n.-1)) card_ord Fp_cast // big_add1 /=.",
                        "VernacExtend",
                        "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
                    ]
                },
                {
                    "command": [
                        "pose p'gt0 m := m > 0 /\\ logn p m = 0%N.",
                        "VernacExtend",
                        "3c5f04de94609049d978298aa02ff35fb35ea7c7"
                    ]
                },
                {
                    "command": [
                        "suffices [Pgt0 p'P]: p'gt0 (\\prod_(0 <= i < n.-1.+1) (p ^ i.+1 - 1))%N.",
                        "VernacExtend",
                        "290ed488b5562e885aa2cac56f3a69b4faa0eaa6"
                    ]
                },
                {
                    "command": [
                        "by rewrite lognM // p'P pfactorK //; case n.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "apply big_ind => [|m1 m2 [m10 p'm1] [m20]|i _]; rewrite {}/p'gt0 ?logn1 //.",
                        "VernacExtend",
                        "82d53976234637e3f0907eb36cddf61d028c6306"
                    ]
                },
                {
                    "command": [
                        "by rewrite muln_gt0 m10 lognM ?p'm1.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "rewrite lognE -if_neg subn_gt0 p_pr /= -{1 2}(exp1n i.+1) ltn_exp2r // p_gt1.",
                        "VernacExtend",
                        "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
                    ]
                },
                {
                    "command": [
                        "by rewrite dvdn_subr ?dvdn_exp // gtnNdvd.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "mem0mx",
            "line_nb": 1394,
            "steps": [
                {
                    "command": [
                        "by rewrite linear0 sub0mx.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "memmx0",
            "line_nb": 1397,
            "steps": [
                {
                    "command": [
                        "by rewrite submx0 mxvec_eq0; move/eqP.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "memmx1",
            "line_nb": 1400,
            "steps": [
                {
                    "command": [
                        "apply/sub_rVP/is_scalar_mxP=> [[a] | [a ->]].",
                        "VernacExtend",
                        "4bd6fa79b17bcd2bfb7af091fb325367a20385d6"
                    ]
                },
                {
                    "command": [
                        "by rewrite -linearZ scale_scalar_mx mulr1 => /(can_inj mxvecK); exists a.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "by exists a; rewrite -linearZ scale_scalar_mx mulr1.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "memmx_subP",
            "line_nb": 1405,
            "steps": [
                {
                    "command": [
                        "apply: (iffP idP) => [sR12 A R1_A | sR12]; first exact: submx_trans sR12.",
                        "VernacExtend",
                        "3763a4b8db689af316a7372b722bb29806ab4fb6"
                    ]
                },
                {
                    "command": [
                        "by apply/rV_subP=> vA; rewrite -(vec_mxK vA); apply: sR12.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "memmx_eqP",
            "line_nb": 1410,
            "steps": [
                {
                    "command": [
                        "apply: (iffP eqmxP) => [eqR12 A | eqR12]; first by rewrite eqR12.",
                        "VernacExtend",
                        "3763a4b8db689af316a7372b722bb29806ab4fb6"
                    ]
                },
                {
                    "command": [
                        "by apply/eqmxP; apply/rV_eqP=> vA; rewrite -(vec_mxK vA) eqR12.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "memmx_addsP",
            "line_nb": 1415,
            "steps": [
                {
                    "command": [
                        "apply: (iffP sub_addsmxP) => [[u /(canRL mxvecK)->] | [D []]].",
                        "VernacExtend",
                        "4bd6fa79b17bcd2bfb7af091fb325367a20385d6"
                    ]
                },
                {
                    "command": [
                        "exists (vec_mx (u.1 *m R1), vec_mx (u.2 *m R2)).",
                        "VernacExtend",
                        "0ac70646edffc75c9ecd5fb6c36d5bd9c45acef9"
                    ]
                },
                {
                    "command": [
                        "by rewrite /= linearD !vec_mxK !submxMl.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "case/submxP=> u1 defD1 /submxP[u2 defD2] ->.",
                        "VernacExtend",
                        "e00fff71ff314c991514fc71c41a3556702e444a"
                    ]
                },
                {
                    "command": [
                        "by exists (u1, u2); rewrite linearD /= defD1 defD2.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "memmx_sumsP",
            "line_nb": 1423,
            "steps": [
                {
                    "command": [
                        "apply: (iffP sub_sumsmxP) => [[C defA] | [A_ -> R_A] {A}].",
                        "VernacExtend",
                        "4bd6fa79b17bcd2bfb7af091fb325367a20385d6"
                    ]
                },
                {
                    "command": [
                        "exists (fun i => vec_mx (C i *m R_ i)) => [|i].",
                        "VernacExtend",
                        "3c42b53d0efc26db114b00541ac5e7fcb29e6aeb"
                    ]
                },
                {
                    "command": [
                        "by rewrite -linear_sum -defA /= mxvecK.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "by rewrite vec_mxK submxMl.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "exists (fun i => mxvec (A_ i) *m pinvmx (R_ i)).",
                        "VernacExtend",
                        "e5cdb64a1e9c6e7aa08e956c16b90c1f06c4755c"
                    ]
                },
                {
                    "command": [
                        "by rewrite linear_sum; apply: eq_bigr => i _; rewrite mulmxKpV.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "has_non_scalar_mxP",
            "line_nb": 1432,
            "steps": [
                {
                    "command": [
                        "case: (posnP n) => [-> | n_gt0] in R *; set S := mxvec _ => sSR.",
                        "VernacExtend",
                        "ba44c9d0281a02110ce54645304e6d990debd9c0"
                    ]
                },
                {
                    "command": [
                        "by rewrite [R]thinmx0 mxrank0; right; case; rewrite /is_scalar_mx ?insubF.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "have rankS: \\rank S = 1%N.",
                        "VernacExtend",
                        "406cde1174359c53bf162a2a18c4eede395555f9"
                    ]
                },
                {
                    "command": [
                        "apply/eqP; rewrite eqn_leq rank_leq_row lt0n mxrank_eq0 mxvec_eq0.",
                        "VernacExtend",
                        "56c014161b39aecfb3c54301c2409dba4e8e1857"
                    ]
                },
                {
                    "command": [
                        "by rewrite -mxrank_eq0 mxrank1 -lt0n.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "rewrite -{2}rankS (ltn_leqif (mxrank_leqif_sup sSR)).",
                        "VernacExtend",
                        "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
                    ]
                },
                {
                    "command": [
                        "apply: (iffP idP) => [/row_subPn[i] | [A sAR]].",
                        "VernacExtend",
                        "4bd6fa79b17bcd2bfb7af091fb325367a20385d6"
                    ]
                },
                {
                    "command": [
                        "rewrite -[row i R]vec_mxK memmx1; set A := vec_mx _ => nsA.",
                        "VernacExtend",
                        "80e7cce19c53eb5d5a21aafd83e552d37e23084a"
                    ]
                },
                {
                    "command": [
                        "by exists A; rewrite // vec_mxK row_sub.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "by rewrite -memmx1; apply/contra/submx_trans.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "genmx_muls",
            "line_nb": 1447,
            "steps": [
                {
                    "command": [
                        "by rewrite genmx_sums; apply: eq_bigr => i; rewrite genmx_id.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "mem_mulsmx",
            "line_nb": 1450,
            "steps": [
                {
                    "command": [
                        "move=> R_A1 R_A2; rewrite -[A2]mxvecK; case/submxP: R_A2 => a ->{A2}.",
                        "VernacExtend",
                        "d7214ac8fd48f4d1cd143edd9d16f6d28386a302"
                    ]
                },
                {
                    "command": [
                        "rewrite mulmx_sum_row !linear_sum summx_sub // => i _.",
                        "VernacExtend",
                        "3c42b53d0efc26db114b00541ac5e7fcb29e6aeb"
                    ]
                },
                {
                    "command": [
                        "rewrite !linearZ scalemx_sub {a}//= (sumsmx_sup i) // genmxE.",
                        "VernacExtend",
                        "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
                    ]
                },
                {
                    "command": [
                        "rewrite -[A1]mxvecK; case/submxP: R_A1 => a ->{A1}.",
                        "VernacExtend",
                        "712d339e99ee17eb7d5033e19ac614eb3ca6b532"
                    ]
                },
                {
                    "command": [
                        "by apply/submxP; exists a; rewrite mulmxA mul_rV_lin.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "mulsmx_subP",
            "line_nb": 1457,
            "steps": [
                {
                    "command": [
                        "apply: (iffP memmx_subP) => [sR12R A1 A2 R_A1 R_A2 | sR12R A].",
                        "VernacExtend",
                        "4bd6fa79b17bcd2bfb7af091fb325367a20385d6"
                    ]
                },
                {
                    "command": [
                        "by rewrite sR12R ?mem_mulsmx.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "case/memmx_sumsP=> A_ -> R_A; rewrite linear_sum summx_sub //= => j _.",
                        "VernacExtend",
                        "ba44c9d0281a02110ce54645304e6d990debd9c0"
                    ]
                },
                {
                    "command": [
                        "rewrite (submx_trans (R_A _)) // genmxE; apply/row_subP=> i.",
                        "VernacExtend",
                        "634a7639ed2fb7caf62757f84400927f5829b7d5"
                    ]
                },
                {
                    "command": [
                        "by rewrite row_mul mul_rV_lin sR12R ?vec_mxK ?row_sub.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "mulsmxS",
            "line_nb": 1465,
            "steps": [
                {
                    "command": [
                        "move=> sR13 sR24; apply/mulsmx_subP=> A1 A2 R_A1 R_A2.",
                        "VernacExtend",
                        "d6ebf3361f380a12d5c2c9bbb7ea363132c48b36"
                    ]
                },
                {
                    "command": [
                        "by apply: mem_mulsmx; [apply: submx_trans sR13 | apply: submx_trans sR24].",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "muls_eqmx",
            "line_nb": 1469,
            "steps": [
                {
                    "command": [
                        "move=> eqR13 eqR24; rewrite -(genmx_muls R1 R2) -(genmx_muls R3 R4).",
                        "VernacExtend",
                        "057edeb0967475c7ea5e8c98c449ddc5613eddc1"
                    ]
                },
                {
                    "command": [
                        "by apply/genmxP; rewrite !mulsmxS ?eqR13 ?eqR24.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "mulsmxA",
            "line_nb": 1486,
            "steps": [
                {
                    "command": [
                        "rewrite -(genmx_muls (_ * _)%MS) -genmx_muls; apply/genmxP; apply/andP; split.",
                        "VernacExtend",
                        "cb8d656d85946675fe947c6b8efa24ce39488367"
                    ]
                },
                {
                    "command": [
                        "apply/mulsmx_subP=> A1 A23 R_A1; case/mulsmxP=> A2 R_A2 [A3 R_A3 ->{A23}].",
                        "VernacExtend",
                        "20ec428e50c31e1399aee62c5a532bc8417a4b29"
                    ]
                },
                {
                    "command": [
                        "by rewrite !linear_sum summx_sub //= => i _; rewrite mulmxA !mem_mulsmx.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "apply/mulsmx_subP=> _ A3 /mulsmxP[A1 R_A1 [A2 R_A2 ->]] R_A3.",
                        "VernacExtend",
                        "4bd6fa79b17bcd2bfb7af091fb325367a20385d6"
                    ]
                },
                {
                    "command": [
                        "rewrite mulmx_suml linear_sum summx_sub //= => i _.",
                        "VernacExtend",
                        "3c42b53d0efc26db114b00541ac5e7fcb29e6aeb"
                    ]
                },
                {
                    "command": [
                        "by rewrite -mulmxA !mem_mulsmx.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "mulsmx_addl",
            "line_nb": 1494,
            "steps": [
                {
                    "command": [
                        "rewrite -(genmx_muls R2 R3) -(genmx_muls R1 R3) -genmx_muls -genmx_adds.",
                        "VernacExtend",
                        "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
                    ]
                },
                {
                    "command": [
                        "apply/genmxP; rewrite andbC addsmx_sub !mulsmxS ?addsmxSl ?addsmxSr //=.",
                        "VernacExtend",
                        "56c014161b39aecfb3c54301c2409dba4e8e1857"
                    ]
                },
                {
                    "command": [
                        "apply/mulsmx_subP=> _ A3 /memmx_addsP[A [R_A1 R_A2 ->]] R_A3.",
                        "VernacExtend",
                        "4bd6fa79b17bcd2bfb7af091fb325367a20385d6"
                    ]
                },
                {
                    "command": [
                        "by rewrite mulmxDl linearD addmx_sub_adds ?mem_mulsmx.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "mulsmx_addr",
            "line_nb": 1500,
            "steps": [
                {
                    "command": [
                        "rewrite -(genmx_muls R1 R3) -(genmx_muls R1 R2) -genmx_muls -genmx_adds.",
                        "VernacExtend",
                        "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
                    ]
                },
                {
                    "command": [
                        "apply/genmxP; rewrite andbC addsmx_sub !mulsmxS ?addsmxSl ?addsmxSr //=.",
                        "VernacExtend",
                        "56c014161b39aecfb3c54301c2409dba4e8e1857"
                    ]
                },
                {
                    "command": [
                        "apply/mulsmx_subP=> A1 _ R_A1 /memmx_addsP[A [R_A2 R_A3 ->]].",
                        "VernacExtend",
                        "4bd6fa79b17bcd2bfb7af091fb325367a20385d6"
                    ]
                },
                {
                    "command": [
                        "by rewrite mulmxDr linearD addmx_sub_adds ?mem_mulsmx.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "mulsmx0",
            "line_nb": 1506,
            "steps": [
                {
                    "command": [
                        "apply/eqP; rewrite -submx0; apply/mulsmx_subP=> A1 A0 _.",
                        "VernacExtend",
                        "da24caf87c1bbbad0538b8be68905ec456c78aa7"
                    ]
                },
                {
                    "command": [
                        "by rewrite [A0 \\in 0]eqmx0 => /memmx0->; rewrite mulmx0 mem0mx.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "muls0mx",
            "line_nb": 1510,
            "steps": [
                {
                    "command": [
                        "apply/eqP; rewrite -submx0; apply/mulsmx_subP=> A0 A2.",
                        "VernacExtend",
                        "da24caf87c1bbbad0538b8be68905ec456c78aa7"
                    ]
                },
                {
                    "command": [
                        "by rewrite [A0 \\in 0]eqmx0 => /memmx0->; rewrite mul0mx mem0mx.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "mxring_idP",
            "line_nb": 1520,
            "steps": [
                {
                    "command": [
                        "apply: (iffP andP) => [[nzR] | [e [nz_e Re ideR idRe]]].",
                        "VernacExtend",
                        "4bd6fa79b17bcd2bfb7af091fb325367a20385d6"
                    ]
                },
                {
                    "command": [
                        "case/submxP=> v; rewrite -[v]vec_mxK; move/vec_mx: v => e.",
                        "VernacExtend",
                        "c5cb6672fdde6b3af11f77240bf9bbcee9174e45"
                    ]
                },
                {
                    "command": [
                        "rewrite !mul_mx_row; case/eq_row_mx => /eqP.",
                        "VernacExtend",
                        "712d339e99ee17eb7d5033e19ac614eb3ca6b532"
                    ]
                },
                {
                    "command": [
                        "rewrite eq_sym -submxE => Re.",
                        "VernacExtend",
                        "3c42b53d0efc26db114b00541ac5e7fcb29e6aeb"
                    ]
                },
                {
                    "command": [
                        "case/eq_row_mx; rewrite !{1}mul_rV_lin1 /= mxvecK.",
                        "VernacExtend",
                        "90a2acb29b7a5304b0ab6ba5269c420638ddef63"
                    ]
                },
                {
                    "command": [
                        "set u := (_ *m _) => /(can_inj mxvecK) idRe /(can_inj mxvecK) ideR.",
                        "VernacExtend",
                        "3c42b53d0efc26db114b00541ac5e7fcb29e6aeb"
                    ]
                },
                {
                    "command": [
                        "exists e; split=> // [ | A /submxP[a defA] | A /submxP[a defA]].",
                        "VernacExtend",
                        "9367a6adff36c85076f4b20454c9e00bd756194f"
                    ]
                },
                {
                    "command": [
                        "-",
                        "VernacBullet",
                        "581cab4bf49fa4b495e569bbda96fc8d28fddcc0"
                    ]
                },
                {
                    "command": [
                        "by apply: contra nzR; rewrite ideR => /eqP->; rewrite !linear0.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "-",
                        "VernacBullet",
                        "581cab4bf49fa4b495e569bbda96fc8d28fddcc0"
                    ]
                },
                {
                    "command": [
                        "by rewrite -{2}[A]mxvecK defA idRe mulmxA mx_rV_lin -defA /= mxvecK.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "by rewrite -{2}[A]mxvecK defA ideR mulmxA mx_rV_lin -defA /= mxvecK.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "split.",
                        "VernacExtend",
                        "55abc140132bd88981001ac656020469a8d503eb"
                    ]
                },
                {
                    "command": [
                        "by apply: contraNneq nz_e => R0; rewrite R0 eqmx0 in Re; rewrite (memmx0 Re).",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "apply/submxP; exists (mxvec e); rewrite !mul_mx_row !{1}mul_rV_lin1.",
                        "VernacExtend",
                        "fb55e36c7ba02ce34e7f705976c13a4814506132"
                    ]
                },
                {
                    "command": [
                        "rewrite submxE in Re; rewrite {Re}(eqP Re).",
                        "VernacExtend",
                        "2194fcb4d6d52cbae24a29f7ff14a3997f1912fd"
                    ]
                },
                {
                    "command": [
                        "congr (row_mx 0 (row_mx (mxvec _) (mxvec _))); apply/row_matrixP=> i.",
                        "VernacExtend",
                        "385739dd8a4f73703d3828c61e1780a276bfaa31"
                    ]
                },
                {
                    "command": [
                        "by rewrite !row_mul !mul_rV_lin1 /= mxvecK ideR vec_mxK ?row_sub.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "by rewrite !row_mul !mul_rV_lin1 /= mxvecK idRe vec_mxK ?row_sub.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "cent_mx_fun_is_linear",
            "line_nb": 1545,
            "steps": [
                {
                    "command": [
                        "move=> a A B; apply/row_matrixP=> i; rewrite linearP row_mul mul_rV_lin.",
                        "VernacExtend",
                        "f7feb259d6220ca40e8a86b90bd06f137aa140ac"
                    ]
                },
                {
                    "command": [
                        "rewrite /= {-3}[row]lock row_mul mul_rV_lin -lock row_mul mul_rV_lin.",
                        "VernacExtend",
                        "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
                    ]
                },
                {
                    "command": [
                        "by rewrite -linearP -(linearP [linear of mulmx _ \\- mulmxr _]).",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "cent_rowP",
            "line_nb": 1557,
            "steps": [
                {
                    "command": [
                        "apply: (iffP sub_kermxP); rewrite mul_vec_lin => cBE.",
                        "VernacExtend",
                        "5fce7e5361004176d6b434b36b4623c7387f70bb"
                    ]
                },
                {
                    "command": [
                        "move/(canRL mxvecK): cBE => cBE i A /=; move/(congr1 (row i)): cBE.",
                        "VernacExtend",
                        "8b784377bdc4d565ff66d4cf36a6041e9354c156"
                    ]
                },
                {
                    "command": [
                        "rewrite row_mul mul_rV_lin -/A; move/(canRL mxvecK).",
                        "VernacExtend",
                        "7e529e80bb2879787ee6d9466056f19f0215c721"
                    ]
                },
                {
                    "command": [
                        "by move/(canRL (subrK _)); rewrite !linear0 add0r.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "apply: (canLR vec_mxK); apply/row_matrixP=> i.",
                        "VernacExtend",
                        "8d9dae45eeb3a769b8a865cef8ae476451f63802"
                    ]
                },
                {
                    "command": [
                        "by rewrite row_mul mul_rV_lin /= cBE subrr !linear0.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "cent_mxP",
            "line_nb": 1566,
            "steps": [
                {
                    "command": [
                        "apply: (iffP cent_rowP) => cEB => [A sAE | i A].",
                        "VernacExtend",
                        "3c42b53d0efc26db114b00541ac5e7fcb29e6aeb"
                    ]
                },
                {
                    "command": [
                        "rewrite -[A]mxvecK -(mulmxKpV sAE); move: (mxvec A *m _) => u.",
                        "VernacExtend",
                        "7e529e80bb2879787ee6d9466056f19f0215c721"
                    ]
                },
                {
                    "command": [
                        "rewrite !mulmx_sum_row !linear_sum mulmx_suml; apply: eq_bigr => i _ /=.",
                        "VernacExtend",
                        "634a7639ed2fb7caf62757f84400927f5829b7d5"
                    ]
                },
                {
                    "command": [
                        "by rewrite !linearZ -scalemxAl /= cEB.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "by rewrite cEB // vec_mxK row_sub.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "scalar_mx_cent",
            "line_nb": 1574,
            "steps": [
                {
                    "command": [
                        "by apply/cent_mxP=> A _; apply: scalar_mxC.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "center_mx_sub",
            "line_nb": 1577,
            "steps": [
                {
                    "command": [
                        "exact: capmxSl.",
                        "VernacExtend",
                        "ce637ff86bafca5d8359473e8c02af644dcbdc43"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "center_mxP",
            "line_nb": 1580,
            "steps": [
                {
                    "command": [
                        "rewrite sub_capmx; case R_A: (A \\in R); last by right; case.",
                        "VernacExtend",
                        "3763a4b8db689af316a7372b722bb29806ab4fb6"
                    ]
                },
                {
                    "command": [
                        "by apply: (iffP cent_mxP) => [cAR | [_ cAR]].",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "mxring_id_uniq",
            "line_nb": 1585,
            "steps": [
                {
                    "command": [
                        "by case=> [_ Re1 idRe1 _] [_ Re2 _ ide2R]; rewrite -(idRe1 _ Re2) ide2R.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "cent_mx_ideal",
            "line_nb": 1588,
            "steps": [
                {
                    "command": [
                        "apply/mulsmx_subP=> A1 A2 C_A1 C_A2; apply/cent_mxP=> B R_B.",
                        "VernacExtend",
                        "8d9dae45eeb3a769b8a865cef8ae476451f63802"
                    ]
                },
                {
                    "command": [
                        "by rewrite mulmxA (cent_mxP C_A1) // -!mulmxA (cent_mxP C_A2).",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "Gaussian_elimination_map",
            "line_nb": 1687,
            "steps": [
                {
                    "command": [
                        "rewrite mxrankE /row_ebase /col_ebase unlock.",
                        "VernacExtend",
                        "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
                    ]
                },
                {
                    "command": [
                        "elim: m n A => [|m IHm] [|n] A /=; rewrite ?map_mx1 //.",
                        "VernacExtend",
                        "de65c8193056a36f6dbb91fe21357bd770b140db"
                    ]
                },
                {
                    "command": [
                        "set pAnz := [pred k | A k.1 k.2 != 0].",
                        "VernacExtend",
                        "69a61e99b234580f7b41fa5b9655c87ba9a76f70"
                    ]
                },
                {
                    "command": [
                        "rewrite (@eq_pick _ _ pAnz) => [|k]; last by rewrite /= mxE fmorph_eq0.",
                        "VernacExtend",
                        "3763a4b8db689af316a7372b722bb29806ab4fb6"
                    ]
                },
                {
                    "command": [
                        "case: {+}(pick _) => [[i j]|]; last by rewrite !map_mx1.",
                        "VernacExtend",
                        "3763a4b8db689af316a7372b722bb29806ab4fb6"
                    ]
                },
                {
                    "command": [
                        "rewrite mxE -fmorphV -map_xcol -map_xrow -map_dlsubmx -map_drsubmx.",
                        "VernacExtend",
                        "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
                    ]
                },
                {
                    "command": [
                        "rewrite -map_ursubmx -map_mxZ -map_mxM -map_mx_sub {}IHm /=.",
                        "VernacExtend",
                        "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
                    ]
                },
                {
                    "command": [
                        "case: {+}(Gaussian_elimination _) => [[L U] r] /=; rewrite map_xrow map_xcol.",
                        "VernacExtend",
                        "90a2acb29b7a5304b0ab6ba5269c420638ddef63"
                    ]
                },
                {
                    "command": [
                        "by rewrite !(@map_block_mx _ _ f 1 _ 1) !map_mx0 ?map_mx1 ?map_scalar_mx.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "mxrank_map",
            "line_nb": 1698,
            "steps": [
                {
                    "command": [
                        "by rewrite mxrankE Gaussian_elimination_map.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "row_free_map",
            "line_nb": 1701,
            "steps": [
                {
                    "command": [
                        "by rewrite /row_free mxrank_map.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "row_full_map",
            "line_nb": 1704,
            "steps": [
                {
                    "command": [
                        "by rewrite /row_full mxrank_map.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "map_row_ebase",
            "line_nb": 1707,
            "steps": [
                {
                    "command": [
                        "by rewrite {2}/row_ebase unlock Gaussian_elimination_map.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "map_col_ebase",
            "line_nb": 1710,
            "steps": [
                {
                    "command": [
                        "by rewrite {2}/col_ebase unlock Gaussian_elimination_map.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "map_row_base",
            "line_nb": 1713,
            "steps": [
                {
                    "command": [
                        "move: (mxrank_map A); rewrite {2}/row_base mxrank_map => eqrr.",
                        "VernacExtend",
                        "8261237f0cda1915a4077c28869831c5329103ce"
                    ]
                },
                {
                    "command": [
                        "by rewrite castmx_id map_mxM map_pid_mx map_row_ebase.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "map_col_base",
            "line_nb": 1717,
            "steps": [
                {
                    "command": [
                        "move: (mxrank_map A); rewrite {2}/col_base mxrank_map => eqrr.",
                        "VernacExtend",
                        "8261237f0cda1915a4077c28869831c5329103ce"
                    ]
                },
                {
                    "command": [
                        "by rewrite castmx_id map_mxM map_pid_mx map_col_ebase.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "map_pinvmx",
            "line_nb": 1721,
            "steps": [
                {
                    "command": [
                        "rewrite !map_mxM !map_invmx map_row_ebase map_col_ebase.",
                        "VernacExtend",
                        "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
                    ]
                },
                {
                    "command": [
                        "by rewrite map_pid_mx -mxrank_map.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "map_kermx",
            "line_nb": 1725,
            "steps": [
                {
                    "command": [
                        "by rewrite !map_mxM map_invmx map_col_ebase -mxrank_map map_copid_mx.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "map_cokermx",
            "line_nb": 1728,
            "steps": [
                {
                    "command": [
                        "by rewrite !map_mxM map_invmx map_row_ebase -mxrank_map map_copid_mx.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "map_submx",
            "line_nb": 1731,
            "steps": [
                {
                    "command": [
                        "by rewrite !submxE -map_cokermx -map_mxM map_mx_eq0.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "map_ltmx",
            "line_nb": 1734,
            "steps": [
                {
                    "command": [
                        "by rewrite /ltmx !map_submx.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "map_eqmx",
            "line_nb": 1737,
            "steps": [
                {
                    "command": [
                        "split=> [/eqmxP|eqAB]; first by rewrite !map_submx => /eqmxP.",
                        "VernacExtend",
                        "3763a4b8db689af316a7372b722bb29806ab4fb6"
                    ]
                },
                {
                    "command": [
                        "by apply/eqmxP; rewrite !map_submx !eqAB !submx_refl.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "map_genmx",
            "line_nb": 1741,
            "steps": [
                {
                    "command": [
                        "by apply/eqmxP; rewrite !(genmxE, map_submx) andbb.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "map_addsmx",
            "line_nb": 1744,
            "steps": [
                {
                    "command": [
                        "by apply/eqmxP; rewrite !addsmxE -map_col_mx !map_submx !addsmxE andbb.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "map_capmx_gen",
            "line_nb": 1747,
            "steps": [
                {
                    "command": [
                        "by rewrite map_mxM map_lsubmx map_kermx map_col_mx.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "map_capmx",
            "line_nb": 1750,
            "steps": [
                {
                    "command": [
                        "by apply/eqmxP; rewrite !capmxE -map_capmx_gen !map_submx -!capmxE andbb.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "map_complmx",
            "line_nb": 1753,
            "steps": [
                {
                    "command": [
                        "by rewrite map_mxM map_row_ebase -mxrank_map map_copid_mx.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "map_diffmx",
            "line_nb": 1756,
            "steps": [
                {
                    "command": [
                        "apply/eqmxP; rewrite !diffmxE -map_capmx_gen -map_complmx.",
                        "VernacExtend",
                        "56c014161b39aecfb3c54301c2409dba4e8e1857"
                    ]
                },
                {
                    "command": [
                        "by rewrite -!map_capmx !map_submx -!diffmxE andbb.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "map_eigenspace",
            "line_nb": 1760,
            "steps": [
                {
                    "command": [
                        "by rewrite map_kermx map_mx_sub ?map_scalar_mx.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "eigenvalue_map",
            "line_nb": 1763,
            "steps": [
                {
                    "command": [
                        "by rewrite /eigenvalue -map_eigenspace map_mx_eq0.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "memmx_map",
            "line_nb": 1766,
            "steps": [
                {
                    "command": [
                        "by rewrite -map_mxvec map_submx.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "map_cent_mx",
            "line_nb": 1776,
            "steps": [
                {
                    "command": [
                        "rewrite map_kermx //; congr (kermx _); apply: map_lin_mx => // A.",
                        "VernacExtend",
                        "75f5ff0fb7cf09d432c728351fd923a93d5d7135"
                    ]
                },
                {
                    "command": [
                        "rewrite map_mxM //; congr (_ *m _); apply: map_lin_mx => //= B.",
                        "VernacExtend",
                        "75f5ff0fb7cf09d432c728351fd923a93d5d7135"
                    ]
                },
                {
                    "command": [
                        "by rewrite map_mx_sub ? map_mxM.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "map_center_mx",
            "line_nb": 1781,
            "steps": [
                {
                    "command": [
                        "by rewrite /center_mx -map_cent_mx; apply: map_capmx.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        }
    ]
}