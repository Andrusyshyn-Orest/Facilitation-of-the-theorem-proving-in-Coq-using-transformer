{
    "filename": "Examples/Calculator/DelegatingCalculatorServer.v",
    "coq_project": "disel",
    "vernac_cmds": [
        [
            "From mathcomp.ssreflect Require Import ssreflect ssrbool ssrnat eqtype ssrfun seq.",
            "VernacRequire",
            "037d2ffdc90053d89d1b918c36daaeab721d2d83"
        ],
        [
            "From mathcomp Require Import path.",
            "VernacRequire",
            "7c70f445c754a2a74114416d587d02e512c693e2"
        ],
        [
            "Require Import Eqdep.",
            "VernacRequire",
            "a499933d0898d4c0e235af789d9252f633426d20"
        ],
        [
            "Require Import Relation_Operators.",
            "VernacRequire",
            "5c09f52be79db9d019c350cc3153659920102fbb"
        ],
        [
            "From fcsl Require Import pred prelude ordtype finmap pcm unionmap heap.",
            "VernacRequire",
            "41347af8188b8bd95ca7fa1d9e375300903274c8"
        ],
        [
            "From DiSeL Require Import Freshness State EqTypeX Protocols Worlds NetworkSem Rely.",
            "VernacRequire",
            "26e11e2fa076d0e09ced8c25739f81efacc39c1d"
        ],
        [
            "From DiSeL Require Import Actions Injection Process Always HoareTriples InferenceRules.",
            "VernacRequire",
            "7ad4d509680a53857edde447eef7d606efef38a6"
        ],
        [
            "From DiSeL Require Import InductiveInv While.",
            "VernacRequire",
            "b2799acd5c83a73c348fbe294fc708727612ded1"
        ],
        [
            "From DiSeL Require Import CalculatorProtocol CalculatorInvariant.",
            "VernacRequire",
            "18a39cf581095939d4d0eb2c7378de0e5e5bd410"
        ],
        [
            "From DiSeL Require Import CalculatorClientLib CalculatorServerLib.",
            "VernacRequire",
            "61e42808c7d33d8e0fabaa3cbc74f4dde868e077"
        ],
        [
            "Export CalculatorProtocol.",
            "VernacImport",
            "d9b2275b4d2985a1300577d66ebaabc676df3699"
        ],
        [
            "Section DelegatingCalculator.",
            "VernacBeginSection",
            "7b45a4b2f37e60a8321f662474b8e6428524127e"
        ],
        [
            "Variables (l1 l2 : Label).",
            "VernacAssumption",
            "2e90e616efef9af6a4b8cd50b717b49525dc1a0a"
        ],
        [
            "Hypothesis (lab_disj : l2 != l1).",
            "VernacAssumption",
            "eeec498ebaa3d2adfe34bb2b68160cb0cb17d561"
        ],
        [
            "Variable f : input -> option nat.",
            "VernacAssumption",
            "7d6ed1dcc87974f361ab4da38798ed33b492e0b4"
        ],
        [
            "Variable prec : input -> bool.",
            "VernacAssumption",
            "9233668e2a8a42a88ffb16b02b647817c44a74e6"
        ],
        [
            "Variables (cs1 cls1 : seq nid).",
            "VernacAssumption",
            "b6670c264634f0326e95e3e808067aa247060423"
        ],
        [
            "Variables (cs2 cls2 : seq nid).",
            "VernacAssumption",
            "f73229aecea204407412c6a308013bc32e8f5abb"
        ],
        [
            "Notation nodes1 := (cs1 ++ cls1).",
            "VernacSyntacticDefinition",
            "5b8b5cc143f25f0b50b40b3c283e1808406c6c4c"
        ],
        [
            "Notation nodes2 := (cs2 ++ cls2).",
            "VernacSyntacticDefinition",
            "108a823d409f9570c3e240add23ace07390d0d88"
        ],
        [
            "Hypothesis Huniq1 : uniq nodes1.",
            "VernacAssumption",
            "dae1d4328c55b349b44343d29b943146cdccc04b"
        ],
        [
            "Hypothesis Huniq2 : uniq nodes2.",
            "VernacAssumption",
            "3d1c34946cb89478a7e19d86247e388df31bf849"
        ],
        [
            "Notation cal1 := (cal_with_inv l1 f prec cs1 cls1).",
            "VernacSyntacticDefinition",
            "a839b108218579852b3e506992bad234cf4a1b45"
        ],
        [
            "Notation cal2 := (cal_with_inv l2 f prec cs2 cls2).",
            "VernacSyntacticDefinition",
            "9536f6d85a99169bb7fd2ceade26edefb83a7ee5"
        ],
        [
            "Notation W1 := (mkWorld cal1).",
            "VernacSyntacticDefinition",
            "1a9f0f041053ce8a658d3935e4f2d149308c2788"
        ],
        [
            "Notation W2 := (mkWorld cal2).",
            "VernacSyntacticDefinition",
            "2b4f99362b37e0eee6221eb41151afa2df1d219d"
        ],
        [
            "Definition V := W1 \\+ W2.",
            "VernacDefinition",
            "484a149edce4bec608d3e42ebdfbe141a3c067f1"
        ],
        [
            "Lemma validV : valid V.",
            "VernacStartTheoremProof",
            "a32fafea80458727c14a11387cf008ef3f91c9ef"
        ],
        [
            "rewrite /V; apply/andP=>/=.",
            "VernacExtend",
            "634a7639ed2fb7caf62757f84400927f5829b7d5"
        ],
        [
            "split; first by rewrite validPtUn/= validPt/= domPt inE/=.",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "by rewrite unitR valid_unit.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Variable sv : nid.",
            "VernacAssumption",
            "1761f6896e0be33b9c39830325c43d5f3e528a83"
        ],
        [
            "Hypothesis Hs1 : sv \\in cs1.",
            "VernacAssumption",
            "7cd6a100d3b1048f912c237cda74bfadba5a0c2c"
        ],
        [
            "Hypothesis Hc2 : sv \\in cls2.",
            "VernacAssumption",
            "cbd2cfaeb280e775192e24106b8bc1a77db8bd81"
        ],
        [
            "Variable sd : nid.",
            "VernacAssumption",
            "a33caf8318d1540977b60c92765a83521740f8cd"
        ],
        [
            "Hypothesis Hs2 : sd \\in cs2.",
            "VernacAssumption",
            "b0ef8efb6e66ee2df699b150c33f980e91022dbe"
        ],
        [
            "Notation loc i k := (getLocal sv (getStatelet i k)).",
            "VernacSyntacticDefinition",
            "b5707a7c0d89018eb9a124ecde84165aad3a88e9"
        ],
        [
            "Notation loc1 i := (loc i l1).",
            "VernacSyntacticDefinition",
            "318dba07d6944cc7693c59dfc7f8b6bb388ede63"
        ],
        [
            "Notation loc2 i := (loc i l2).",
            "VernacSyntacticDefinition",
            "c92883328fea9c9e1267893b35085c234cafb875"
        ],
        [
            "Definition delegate_f := compute_f l2 f prec cs2 cls2 _ Hc2 sd.",
            "VernacDefinition",
            "5eda053edabbfce09801995e240809e5ea341116"
        ],
        [
            "Notation cal_ii := (ii l1 f prec cs1 cls1).",
            "VernacSyntacticDefinition",
            "2f3305667f6c46a8ede2da17e2a8618a9325865a"
        ],
        [
            "Definition receive_msg := with_inv cal_ii (blocking_receive_req l1 f prec cs1 cls1 _ Hs1).",
            "VernacDefinition",
            "2c17fb9b5ac9502ebe721001bb92ec3f0a61de5c"
        ],
        [
            "Definition send_ans to args ans := with_inv cal_ii (send_answer l1 f prec cs1 cls1 _ Hs1 to args ans).",
            "VernacDefinition",
            "c9498e4ac70a437de748aefa93e54771f98ceb1c"
        ],
        [
            "Definition delegating_body_spec := forall _ : unit, DHT [sv, V] (fun i => loc1 i = st :-> ([::]:reqs) /\\ loc2 i = st :-> ([::]:reqs), fun (r : unit) m => loc1 m = st :-> ([::]:reqs) /\\ loc2 m = st :-> ([::]:reqs)).",
            "VernacDefinition",
            "120b6a5b3dc19c04448b87245c5ba94ddf3821df"
        ],
        [
            "Program Definition delegating_body : delegating_body_spec := fun (_ : unit) => Do _ ( r <-- uinject (receive_msg); let: (from, args) := r in ans <-- uinject (delegate_f args); uinject (send_ans from args ans);; ret sv V tt).",
            "VernacDefinition",
            "c5fc084f732b1701298bb970bef73c17bc1e2b5f"
        ],
        [
            "Lemma hook_complete_unit (c : context) : hook_complete (c, Unit).",
            "VernacStartTheoremProof",
            "3bdc11405687fecf988d074b40ceae42ec7ec434"
        ],
        [
            "by move=>????; rewrite dom0.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma hooks_consistent_unit (c : context) : hooks_consistent c Unit.",
            "VernacStartTheoremProof",
            "ef7c100d43546bfe119f6ecede66228308a7bd39"
        ],
        [
            "by move=>????; rewrite dom0.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Next Obligation.",
            "VernacExtend",
            "de5e6a0a7a163af0d8463969c3ff4241d7d5bba0"
        ],
        [
            "rewrite -(unitR V)/V.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "have V: valid (W1 \\+ W2 \\+ Unit) by rewrite unitR validV.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "apply: (injectL V); do?[apply: hook_complete_unit | apply: hooks_consistent_unit].",
            "VernacExtend",
            "7873bb9dcce1a3f78e6f569440b5177a8dfd74b6"
        ],
        [
            "by move=>??????; rewrite dom0.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Defined.",
            "VernacEndProof",
            "88c0be54a50df4bb90276c075406fe442428eb9c"
        ],
        [
            "Next Obligation.",
            "VernacExtend",
            "de5e6a0a7a163af0d8463969c3ff4241d7d5bba0"
        ],
        [
            "rewrite -(unitR V)/V.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "have V: valid (W1 \\+ W2 \\+ Unit) by rewrite unitR validV.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "apply: (injectR V); do?[apply: hook_complete_unit | apply: hooks_consistent_unit].",
            "VernacExtend",
            "7873bb9dcce1a3f78e6f569440b5177a8dfd74b6"
        ],
        [
            "by move=>??????; rewrite dom0.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Next Obligation.",
            "VernacExtend",
            "de5e6a0a7a163af0d8463969c3ff4241d7d5bba0"
        ],
        [
            "rewrite -(unitR V)/V.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "have V: valid (W1 \\+ W2 \\+ Unit) by rewrite unitR validV.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "apply: (injectL V); do?[apply: hook_complete_unit | apply: hooks_consistent_unit].",
            "VernacExtend",
            "7873bb9dcce1a3f78e6f569440b5177a8dfd74b6"
        ],
        [
            "by move=>??????; rewrite dom0.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Defined.",
            "VernacEndProof",
            "88c0be54a50df4bb90276c075406fe442428eb9c"
        ],
        [
            "Lemma hcomp l : hook_complete (mkWorld l).",
            "VernacStartTheoremProof",
            "b0a26af82105c24e3242a4f4483e80eb0303ee96"
        ],
        [
            "by move=>????; rewrite dom0.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Next Obligation.",
            "VernacExtend",
            "de5e6a0a7a163af0d8463969c3ff4241d7d5bba0"
        ],
        [
            "move=>i/=[K1 L1]; apply: vrf_coh=>CD1; apply: step.",
            "VernacExtend",
            "e374b6c583d80c9d8b579c06df7953342f99f751"
        ],
        [
            "move: (coh_split CD1 (hcomp cal1) (hcomp cal2))=>[i1[j1]][C1 D1 Z]; subst i.",
            "VernacExtend",
            "b3338244a5d55d05b5d7f197b6cb42c83f41df88"
        ],
        [
            "apply: inject_rule=>//.",
            "VernacExtend",
            "4bd6fa79b17bcd2bfb7af091fb325367a20385d6"
        ],
        [
            "have E1 : loc (i1 \\+ j1) l1 = loc i1 l1 by rewrite (locProjL CD1 _ C1)// domPt inE/=.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "rewrite E1 in K1.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "apply: with_inv_rule=>//.",
            "VernacExtend",
            "4bd6fa79b17bcd2bfb7af091fb325367a20385d6"
        ],
        [
            "apply: (gh_ex (g:=[::])).",
            "VernacExtend",
            "4bd6fa79b17bcd2bfb7af091fb325367a20385d6"
        ],
        [
            "apply: call_rule=>//[[from args]] i2/=[K2]H1 H2 _ j2 CD2 R1.",
            "VernacExtend",
            "4bd6fa79b17bcd2bfb7af091fb325367a20385d6"
        ],
        [
            "have E2 : loc (i1 \\+ j1) l2 = loc j1 l2.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "by rewrite (locProjR CD1 _ D1)// domPt inE/=.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "rewrite E2 -(rely_loc' l2 R1) in L1.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "apply: step; clear C1 D1.",
            "VernacExtend",
            "19ae8eb725272f12e97dc019663e5b7dabedd62c"
        ],
        [
            "have D2: j2 \\In Coh W2 by case: (rely_coh R1)=>/= _; rewrite injExtL//(cohW CD1).",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "clear R1; rewrite joinC; apply: inject_rule=>//.",
            "VernacExtend",
            "8eb601a3f80df23ecb075764ef24cda8fc00b09a"
        ],
        [
            "apply: call_rule=>//ans j3[L3]F D3 i3 CD3/= R2.",
            "VernacExtend",
            "4bd6fa79b17bcd2bfb7af091fb325367a20385d6"
        ],
        [
            "have C3: i3 \\In Coh W1 by case: (rely_coh R2)=>/= _; rewrite injExtR//(cohW CD3).",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "apply: step; rewrite joinC.",
            "VernacExtend",
            "56c014161b39aecfb3c54301c2409dba4e8e1857"
        ],
        [
            "rewrite -(rely_loc' _ R2) in K2; move:K2=>K3; clear R2.",
            "VernacExtend",
            "fd3d4800cf93d018c5918c78e837b909a1ccfdf4"
        ],
        [
            "apply: inject_rule=>//; apply: with_inv_rule=>//.",
            "VernacExtend",
            "8d9dae45eeb3a769b8a865cef8ae476451f63802"
        ],
        [
            "apply: (gh_ex (g:=[:: (from, sv, args)])).",
            "VernacExtend",
            "4bd6fa79b17bcd2bfb7af091fb325367a20385d6"
        ],
        [
            "apply: call_rule; first by rewrite inE eqxx.",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "move=>_ i4 [K4 _] _ j4 CD4 R3.",
            "VernacExtend",
            "b1b2cb7a3a617cba67460b4eca1f04de3c1cc716"
        ],
        [
            "rewrite -(rely_loc' _ R3) in L3; move: L3=>L4.",
            "VernacExtend",
            "7e529e80bb2879787ee6d9466056f19f0215c721"
        ],
        [
            "apply: ret_rule=>m R _; rewrite (rely_loc' _ R).",
            "VernacExtend",
            "56c014161b39aecfb3c54301c2409dba4e8e1857"
        ],
        [
            "move/rely_coh: (R3)=>[]; rewrite injExtL ?(cohW CD2)//.",
            "VernacExtend",
            "057edeb0967475c7ea5e8c98c449ddc5613eddc1"
        ],
        [
            "move=>_ D4; clear R3; rewrite !(rely_loc' _ R); clear R.",
            "VernacExtend",
            "e6c1286693e75ae841a0f579641d0cb37d795a5c"
        ],
        [
            "have X: l2 \\in dom W2.1 by rewrite domPt inE eqxx.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "rewrite (@locProjR _ _ _ _ _ CD4 X D4); split=>//.",
            "VernacExtend",
            "80e7cce19c53eb5d5a21aafd83e552d37e23084a"
        ],
        [
            "have X': l1 \\in dom W1.1 by rewrite domPt inE eqxx.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "rewrite /= eqxx in K4; rewrite (@locProjL _ _ _ _ _ CD4 X' _)//.",
            "VernacExtend",
            "2194fcb4d6d52cbae24a29f7ff14a3997f1912fd"
        ],
        [
            "by apply: (cohUnKL CD4 D4); apply: hook_complete_unit.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Definition delegating_server_loop_cond (res : unit) := true.",
            "VernacDefinition",
            "ea7b9ed6b78748b026cb377b879d7ea13914c996"
        ],
        [
            "Definition delegating_server_loop_inv := fun (_ r : unit) i => loc1 i = st :-> ([::]:reqs) /\\ loc2 i = st :-> ([::]:reqs).",
            "VernacDefinition",
            "d8be6bde845509ed048f8933ed503760e9797dd6"
        ],
        [
            "Program Definition delegating_server_loop : DHT [sv, V] (fun i => loc1 i = st :-> ([::]:reqs) /\\ loc2 i = st :-> ([::]:reqs), fun (r : unit) m => False) := Do _ (@while sv V _ _ delegating_server_loop_cond delegating_server_loop_inv _ (fun r => Do _ (delegating_body r))) tt.",
            "VernacDefinition",
            "67781f24f6e4a703f15f6face2c266333280fd7f"
        ],
        [
            "Next Obligation.",
            "VernacExtend",
            "de5e6a0a7a163af0d8463969c3ff4241d7d5bba0"
        ],
        [
            "by apply: with_spec (x x0).",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Defined.",
            "VernacEndProof",
            "88c0be54a50df4bb90276c075406fe442428eb9c"
        ],
        [
            "Next Obligation.",
            "VernacExtend",
            "de5e6a0a7a163af0d8463969c3ff4241d7d5bba0"
        ],
        [
            "by move:H; rewrite /delegating_server_loop_inv !(rely_loc' _ H0).",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Next Obligation.",
            "VernacExtend",
            "de5e6a0a7a163af0d8463969c3ff4241d7d5bba0"
        ],
        [
            "by apply: with_spec x.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Defined.",
            "VernacEndProof",
            "88c0be54a50df4bb90276c075406fe442428eb9c"
        ],
        [
            "Next Obligation.",
            "VernacExtend",
            "de5e6a0a7a163af0d8463969c3ff4241d7d5bba0"
        ],
        [
            "by apply: ghC=>i1 s[H1 H2] C1/=; apply: call_rule.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Next Obligation.",
            "VernacExtend",
            "de5e6a0a7a163af0d8463969c3ff4241d7d5bba0"
        ],
        [
            "move=>i/=E1; apply: call_rule'=>//.",
            "VernacExtend",
            "d6ebf3361f380a12d5c2c9bbb7ea363132c48b36"
        ],
        [
            "-",
            "VernacBullet",
            "581cab4bf49fa4b495e569bbda96fc8d28fddcc0"
        ],
        [
            "by move=>C1; exists tt=>//.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "by move=>s' m/(_ s')/=; case.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "End DelegatingCalculator.",
            "VernacEndSegment",
            "12de803d79f1c71c3a470309e6d9f31b464e9a0d"
        ]
    ],
    "proofs": [
        {
            "name": "validV",
            "line_nb": 27,
            "steps": [
                {
                    "command": [
                        "rewrite /V; apply/andP=>/=.",
                        "VernacExtend",
                        "634a7639ed2fb7caf62757f84400927f5829b7d5"
                    ]
                },
                {
                    "command": [
                        "split; first by rewrite validPtUn/= validPt/= domPt inE/=.",
                        "VernacExtend",
                        "3763a4b8db689af316a7372b722bb29806ab4fb6"
                    ]
                },
                {
                    "command": [
                        "by rewrite unitR valid_unit.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "hook_complete_unit",
            "line_nb": 46,
            "steps": [
                {
                    "command": [
                        "by move=>????; rewrite dom0.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "hooks_consistent_unit",
            "line_nb": 49,
            "steps": [
                {
                    "command": [
                        "by move=>????; rewrite dom0.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "hcomp",
            "line_nb": 70,
            "steps": [
                {
                    "command": [
                        "by move=>????; rewrite dom0.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "delegating_server_loop_obligation_1",
            "line_nb": 109,
            "steps": [
                {
                    "command": [
                        "by apply: with_spec (x x0).",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Defined.",
                        "VernacEndProof",
                        "88c0be54a50df4bb90276c075406fe442428eb9c"
                    ]
                }
            ]
        },
        {
            "name": "delegating_server_loop_obligation_2",
            "line_nb": 112,
            "steps": [
                {
                    "command": [
                        "by move:H; rewrite /delegating_server_loop_inv !(rely_loc' _ H0).",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "delegating_server_loop_obligation_3",
            "line_nb": 115,
            "steps": [
                {
                    "command": [
                        "by apply: with_spec x.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Defined.",
                        "VernacEndProof",
                        "88c0be54a50df4bb90276c075406fe442428eb9c"
                    ]
                }
            ]
        },
        {
            "name": "delegating_server_loop_obligation_4",
            "line_nb": 118,
            "steps": [
                {
                    "command": [
                        "by apply: ghC=>i1 s[H1 H2] C1/=; apply: call_rule.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        }
    ]
}