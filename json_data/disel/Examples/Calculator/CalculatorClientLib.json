{
    "filename": "Examples/Calculator/CalculatorClientLib.v",
    "coq_project": "disel",
    "vernac_cmds": [
        [
            "From mathcomp.ssreflect Require Import ssreflect ssrbool ssrnat eqtype ssrfun seq.",
            "VernacRequire",
            "037d2ffdc90053d89d1b918c36daaeab721d2d83"
        ],
        [
            "From mathcomp Require Import path.",
            "VernacRequire",
            "7c70f445c754a2a74114416d587d02e512c693e2"
        ],
        [
            "Require Import Eqdep.",
            "VernacRequire",
            "a499933d0898d4c0e235af789d9252f633426d20"
        ],
        [
            "Require Import Relation_Operators.",
            "VernacRequire",
            "5c09f52be79db9d019c350cc3153659920102fbb"
        ],
        [
            "From fcsl Require Import axioms pred prelude ordtype finmap pcm unionmap heap.",
            "VernacRequire",
            "576c96e5dbde92d8f1878b78d95e36aa980a0403"
        ],
        [
            "From DiSeL Require Import Freshness State EqTypeX Protocols Worlds NetworkSem Rely.",
            "VernacRequire",
            "26e11e2fa076d0e09ced8c25739f81efacc39c1d"
        ],
        [
            "From DiSeL Require Import Actions Injection Process Always HoareTriples InferenceRules.",
            "VernacRequire",
            "7ad4d509680a53857edde447eef7d606efef38a6"
        ],
        [
            "From DiSeL Require Import InductiveInv While.",
            "VernacRequire",
            "b2799acd5c83a73c348fbe294fc708727612ded1"
        ],
        [
            "From DiSeL Require Import CalculatorProtocol CalculatorInvariant.",
            "VernacRequire",
            "18a39cf581095939d4d0eb2c7378de0e5e5bd410"
        ],
        [
            "From DiSeL Require Import SeqLib.",
            "VernacRequire",
            "c398989d9278b2bbcd204e7797783d5200e869ba"
        ],
        [
            "Section CalculatorRecieve.",
            "VernacBeginSection",
            "3f0b2a8bb6962cf5a32886efcfbf2108b4f1c3e4"
        ],
        [
            "Variable l : Label.",
            "VernacAssumption",
            "aca5957ed38b3e3b45d48e71df1841eb1fc9d5f0"
        ],
        [
            "Variable f : input -> option nat.",
            "VernacAssumption",
            "7d6ed1dcc87974f361ab4da38798ed33b492e0b4"
        ],
        [
            "Variable prec : input -> bool.",
            "VernacAssumption",
            "9233668e2a8a42a88ffb16b02b647817c44a74e6"
        ],
        [
            "Variable cs: seq nid.",
            "VernacAssumption",
            "2c7d18da0fb483bf598013513030d91cc4659887"
        ],
        [
            "Variable cls : seq nid.",
            "VernacAssumption",
            "3f1f7e77df822db3693345111045eaeaf550feae"
        ],
        [
            "Notation nodes := (cs ++ cls).",
            "VernacSyntacticDefinition",
            "d77e9f1bb6c9e287d5336ff16eaedcecf8990e04"
        ],
        [
            "Hypothesis Huniq : uniq nodes.",
            "VernacAssumption",
            "1faa976fa582f3221263ad98e03da35018e1cef6"
        ],
        [
            "Notation cal := (cal_with_inv l f prec cs cls).",
            "VernacSyntacticDefinition",
            "a02024f852750890f4499c66ea7dcbccb2904888"
        ],
        [
            "Notation sts := (snd_trans cal).",
            "VernacSyntacticDefinition",
            "0d8aa6a0ed746c64d0da4836ccdb462c6dd5d477"
        ],
        [
            "Notation rts := (rcv_trans cal).",
            "VernacSyntacticDefinition",
            "1b48a8d4000a1da718ae3dbe969d46aa0b8f755f"
        ],
        [
            "Notation W := (mkWorld cal).",
            "VernacSyntacticDefinition",
            "032bc1fc00ec78329192e7d4d8262b206bd26003"
        ],
        [
            "Variable cl : nid.",
            "VernacAssumption",
            "16a2e3f9102cd08480efe975af437afaf085fd62"
        ],
        [
            "Hypothesis Hc : cl \\in cls.",
            "VernacAssumption",
            "a46a82098a54be9762bae5d108370cc879c791da"
        ],
        [
            "Program Definition tryrecv_resp_act := act (@tryrecv_action_wrapper W cl (fun k _ t b => (k == l) && (t == resp)) _).",
            "VernacDefinition",
            "4f50d26a504329dd846b625275e390486bc48d9c"
        ],
        [
            "Next Obligation.",
            "VernacExtend",
            "de5e6a0a7a163af0d8463969c3ff4241d7d5bba0"
        ],
        [
            "by case/andP:H=>/eqP->; rewrite domPt inE/=.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Notation loc i := (getLocal cl (getStatelet i l)).",
            "VernacSyntacticDefinition",
            "f656853191858e5944fd7442609fa72736d6e050"
        ],
        [
            "Notation st := (ptr_nat 1).",
            "VernacSyntacticDefinition",
            "f4b131eed2122fae1e0f7e25ac5f46a7d6b73b80"
        ],
        [
            "Export CalculatorProtocol.",
            "VernacImport",
            "d9b2275b4d2985a1300577d66ebaabc676df3699"
        ],
        [
            "Program Definition tryrecv_resp : {rs : reqs}, DHT [cl, W] (fun i => loc i = st :-> rs, fun (r : option perm) m => match r with | Some (from, _, ms) => let v := head 0 ms in let args := behead ms in exists rs' : reqs, [/\\ loc m = st :-> rs', perm_eq rs ((cl, from, args) :: rs') & f args = Some v] | None => loc m = st :-> rs end) := Do tryrecv_resp_act.",
            "VernacDefinition",
            "ee41d6ab68392160948d8506df50bb7573d4c82e"
        ],
        [
            "Next Obligation.",
            "VernacExtend",
            "de5e6a0a7a163af0d8463969c3ff4241d7d5bba0"
        ],
        [
            "apply: ghC=>i1 rs L1 C.",
            "VernacExtend",
            "4bd6fa79b17bcd2bfb7af091fb325367a20385d6"
        ],
        [
            "apply: act_rule=>i2 R1/=; split; first by case: (rely_coh R1).",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "move=>r i3 i4[Sf]S R3/=; rewrite -(rely_loc' l R1) in L1.",
            "VernacExtend",
            "057edeb0967475c7ea5e8c98c449ddc5613eddc1"
        ],
        [
            "case: Sf=>_ _ _ _ /(_ l); clear C=>C.",
            "VernacExtend",
            "ba44c9d0281a02110ce54645304e6d990debd9c0"
        ],
        [
            "case: S=>C2[|[l'][mid][tms][from][rt][pf][][E]Hin E1 Hw/=].",
            "VernacExtend",
            "e00fff71ff314c991514fc71c41a3556702e444a"
        ],
        [
            "-",
            "VernacBullet",
            "581cab4bf49fa4b495e569bbda96fc8d28fddcc0"
        ],
        [
            "by case=>?->Z; subst i3; rewrite (rely_loc' _ R3).",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "case/andP=>/eqP Z G; subst l'; set d := (getStatelet i2 l) in C E pf Hw *.",
            "VernacExtend",
            "c88a1ed4d2fdfaae2ba6478541f96f1e04534d1c"
        ],
        [
            "move=>Z->{r}; subst i3.",
            "VernacExtend",
            "24a904febba1d19bb988309e44cd975b458b44f7"
        ],
        [
            "move: rt pf (coh_s l C2) Hin E1 Hw R3 C G.",
            "VernacExtend",
            "b1b2cb7a3a617cba67460b4eca1f04de3c1cc716"
        ],
        [
            "rewrite prEq=>rt pf cohs Hin E1 Hw R3 C G.",
            "VernacExtend",
            "3c42b53d0efc26db114b00541ac5e7fcb29e6aeb"
        ],
        [
            "case: Hin=>/=Z; do?[subst rt|case: Z]=>//Z; subst rt.",
            "VernacExtend",
            "7a491e25abb46d2c6604a59480722a6bcff079fe"
        ],
        [
            "simpl in E1, Hw, R3; clear G.",
            "VernacExtend",
            "1947cab1be11a316dca9dd7cd425e32977f7cb56"
        ],
        [
            "rewrite /cr_wf/= in Hw.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "case: tms E E1 R3 Hw=>t tms/= E E1 R3 Hw; subst t.",
            "VernacExtend",
            "cb7f7fc8c9bf54dd40642228df71eafbde36d5b5"
        ],
        [
            "have A1: exists s', dsoup d = mid \\\\-> (Msg (TMsg resp tms) from cl true) \\+ s'.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "+",
            "VernacBullet",
            "3ddfc0515f916e562bacf863647e0107cb15aa13"
        ],
        [
            "by move/esym/um_eta2: E=>->; exists (free mid (dsoup d)).",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "case: A1=>s' Es.",
            "VernacExtend",
            "e00fff71ff314c991514fc71c41a3556702e444a"
        ],
        [
            "have Y : tms = head 0 tms :: behead tms.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "-",
            "VernacBullet",
            "581cab4bf49fa4b495e569bbda96fc8d28fddcc0"
        ],
        [
            "suff M: exists x xs, tms = x::xs by case:M=>x [xs]E'; subst tms.",
            "VernacExtend",
            "d07fc8b2103f140554938023774bf3f75d04ba99"
        ],
        [
            "by case/andP: Hw=>_; case: (tms)=>//x xs _; exists x, xs.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "have Y' : from \\in cs.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "-",
            "VernacBullet",
            "581cab4bf49fa4b495e569bbda96fc8d28fddcc0"
        ],
        [
            "case: (proj1 C)=>Cs _ _ _.",
            "VernacExtend",
            "e00fff71ff314c991514fc71c41a3556702e444a"
        ],
        [
            "case: Cs=>Vs/(_ mid)Cs.",
            "VernacExtend",
            "e00fff71ff314c991514fc71c41a3556702e444a"
        ],
        [
            "rewrite Es in Vs Cs; move: (findPtUn Vs)=>Ez.",
            "VernacExtend",
            "7e529e80bb2879787ee6d9466056f19f0215c721"
        ],
        [
            "by move: (Cs _ Ez)=>/=; rewrite/cohMsg/==>H; case: H.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "move: ((proj2 C) (proj1 C) cl from (head 0 tms) (behead tms) mid s' Hc Y')=>//=.",
            "VernacExtend",
            "b1b2cb7a3a617cba67460b4eca1f04de3c1cc716"
        ],
        [
            "rewrite -!Y; move/(_ Es)=>F.",
            "VernacExtend",
            "7e529e80bb2879787ee6d9466056f19f0215c721"
        ],
        [
            "rewrite Y in Hw.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "have X: (cl, from, (behead tms)) \\in rs.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "-",
            "VernacBullet",
            "581cab4bf49fa4b495e569bbda96fc8d28fddcc0"
        ],
        [
            "by case/andP: Hw; rewrite (getStK (proj1 cohs) L1).",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "have P1: valid (dstate d) by apply: (cohVl C).",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "have P2: valid i2 by apply: (cohS (proj2 (rely_coh R1))).",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "have P3: l \\in dom i2 by rewrite -(cohD(proj2(rely_coh R1)))domPt inE/=.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "rewrite (rely_loc' _ R3)/= locE// /cr_step (getStK (proj1 cohs) L1)/=.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "clear R3 Hw P1 P2 P3; exists (remove_elem rs (cl, from, (behead tms))).",
            "VernacExtend",
            "ee509745b0e8fd6f3596a6d4cea4c9cf12658cbc"
        ],
        [
            "move: (remove_elem_in rs (cl, from, (behead tms))); rewrite X.",
            "VernacExtend",
            "057edeb0967475c7ea5e8c98c449ddc5613eddc1"
        ],
        [
            "by rewrite perm_eq_sym=>H.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Definition receive_loop_cond (res : option nat) := res == None .",
            "VernacDefinition",
            "ba6cc0f935019e54d5ce31ba99aea5d9d16b7cae"
        ],
        [
            "Definition receive_loop_inv (rs : reqs) := fun r i => match r with | Some v => exists (rs' : reqs) from args , [/\\ loc i = st :-> rs', perm_eq rs ((cl, from, args) :: rs') & f args = r] | None => loc i = st :-> rs end.",
            "VernacDefinition",
            "b81d0d4c1e4ebfc67e876a83f8d6061be01b11a2"
        ],
        [
            "Program Definition receive_loop' : {(rs : reqs)}, DHT [cl, W] (fun i => loc i = st :-> rs, fun (res : option nat) m => exists (rs' : reqs) v from args , [/\\ res = Some v, loc m = st :-> rs', perm_eq rs ((cl, from, args) :: rs') & f args = res]) := Do _ (@while cl W _ _ receive_loop_cond receive_loop_inv _ (fun r => Do _ ( r <-- tryrecv_resp; match r with | Some (_, _, msg) => ret _ _ (Some (head 0 msg)) | None => ret _ _ None end)) None).",
            "VernacDefinition",
            "a2431b618034bfdcbefa6dc807a364f783dde3b7"
        ],
        [
            "Next Obligation.",
            "VernacExtend",
            "de5e6a0a7a163af0d8463969c3ff4241d7d5bba0"
        ],
        [
            "by apply: with_spec x.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Defined.",
            "VernacEndProof",
            "88c0be54a50df4bb90276c075406fe442428eb9c"
        ],
        [
            "Next Obligation.",
            "VernacExtend",
            "de5e6a0a7a163af0d8463969c3ff4241d7d5bba0"
        ],
        [
            "by move:H; rewrite /receive_loop_inv (rely_loc' _ H0).",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Next Obligation.",
            "VernacExtend",
            "de5e6a0a7a163af0d8463969c3ff4241d7d5bba0"
        ],
        [
            "apply:ghC=>i1 rs[];rewrite /receive_loop_cond.",
            "VernacExtend",
            "56c014161b39aecfb3c54301c2409dba4e8e1857"
        ],
        [
            "move/eqP=>->/=E1 C1; apply: step; apply: (gh_ex (g:=rs)).",
            "VernacExtend",
            "e374b6c583d80c9d8b579c06df7953342f99f751"
        ],
        [
            "apply: call_rule=>//={r}res i2; case: res; last first.",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "-",
            "VernacBullet",
            "581cab4bf49fa4b495e569bbda96fc8d28fddcc0"
        ],
        [
            "move=>E2 C; apply:ret_rule=>i3 R2.",
            "VernacExtend",
            "d6ebf3361f380a12d5c2c9bbb7ea363132c48b36"
        ],
        [
            "by rewrite /receive_loop_inv (rely_loc' _ R2).",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "case; case=>from v msg[rs'][E2]P F C2.",
            "VernacExtend",
            "f5c637551d7ace847ffea0c2c9ae9f848858e99e"
        ],
        [
            "apply:ret_rule=>i3 R2; rewrite /receive_loop_inv (rely_loc' _ R2).",
            "VernacExtend",
            "56c014161b39aecfb3c54301c2409dba4e8e1857"
        ],
        [
            "by exists rs', from, (behead msg).",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Next Obligation.",
            "VernacExtend",
            "de5e6a0a7a163af0d8463969c3ff4241d7d5bba0"
        ],
        [
            "apply: ghC=>i rs E1 C1; apply: (gh_ex (g:=rs)).",
            "VernacExtend",
            "8d9dae45eeb3a769b8a865cef8ae476451f63802"
        ],
        [
            "apply: call_rule=>//res m[].",
            "VernacExtend",
            "4bd6fa79b17bcd2bfb7af091fb325367a20385d6"
        ],
        [
            "rewrite /receive_loop_cond; case: res=>//=v _.",
            "VernacExtend",
            "712d339e99ee17eb7d5033e19ac614eb3ca6b532"
        ],
        [
            "move=>[rs'][from][args][E2]Hp F C2.",
            "VernacExtend",
            "b1b2cb7a3a617cba67460b4eca1f04de3c1cc716"
        ],
        [
            "by exists rs', v, from, args.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Program Definition blocking_receive_resp : {(rs : reqs)}, DHT [cl, W] (fun i => loc i = st :-> rs, fun (res : nat) m => exists (rs': reqs) from args , [/\\ loc m = st :-> rs', perm_eq rs ((cl, from, args) :: rs') & f args = Some res]) := Do _ (r <-- receive_loop'; match r with | Some res => ret _ _ res | None => ret _ _ 0 end).",
            "VernacDefinition",
            "36d8483eff6a7a281c3cd82d1ad7225bed5cd306"
        ],
        [
            "Next Obligation.",
            "VernacExtend",
            "de5e6a0a7a163af0d8463969c3ff4241d7d5bba0"
        ],
        [
            "apply: ghC=>i rs E1 C1; apply: step; apply: (gh_ex (g:=rs)).",
            "VernacExtend",
            "6e77d60b6fe9e5152bca0bfa572494ee57c5c96d"
        ],
        [
            "apply: call_rule=>//res i2[rs'][v][from][args][Z]E2 H1 H2.",
            "VernacExtend",
            "4bd6fa79b17bcd2bfb7af091fb325367a20385d6"
        ],
        [
            "subst res=>C2; apply: ret_rule=>i3 R2.",
            "VernacExtend",
            "2855640502da0a3b2cfdfcd02ea9662c049d9a24"
        ],
        [
            "by exists rs', from, args; rewrite (rely_loc' _ R2).",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Definition client_send_trans := ProtocolWithInvariant.snd_transI (s2 l f prec cs cls).",
            "VernacDefinition",
            "80126e487f22edf7a9fbb18abf05a6b066317bbd"
        ],
        [
            "Program Definition send_request server args := act (@send_action_wrapper W cal cl l (prEq cal) client_send_trans _ args server).",
            "VernacDefinition",
            "b6ff76cb2b8deee4c09dfe675c73668300422670"
        ],
        [
            "Next Obligation.",
            "VernacExtend",
            "de5e6a0a7a163af0d8463969c3ff4241d7d5bba0"
        ],
        [
            "by rewrite InE; right; rewrite InE.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Program Definition compute_f (server : nid) (args: seq nat) : DHT [cl, W] (fun i => [/\\ loc i = st :-> ([::] : reqs), prec args & server \\in cs], fun (res : nat) m => loc m = st :-> ([::] : reqs) /\\ f args = Some res) := Do _ (send_request server args;; blocking_receive_resp).",
            "VernacDefinition",
            "5b0217d01c28485b5321437183ae73053dfed630"
        ],
        [
            "Next Obligation.",
            "VernacExtend",
            "de5e6a0a7a163af0d8463969c3ff4241d7d5bba0"
        ],
        [
            "move=>i1/=[E1 H2 H3].",
            "VernacExtend",
            "b1b2cb7a3a617cba67460b4eca1f04de3c1cc716"
        ],
        [
            "apply: step; apply: act_rule=>i2 R1.",
            "VernacExtend",
            "8d9dae45eeb3a769b8a865cef8ae476451f63802"
        ],
        [
            "case: (rely_coh R1)=>_ C2.",
            "VernacExtend",
            "e00fff71ff314c991514fc71c41a3556702e444a"
        ],
        [
            "have C': coh cal (getStatelet i2 l) by case: C2=>_ _ _ _/(_ l);rewrite prEq.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "split=>//=.",
            "VernacExtend",
            "3c42b53d0efc26db114b00541ac5e7fcb29e6aeb"
        ],
        [
            "-",
            "VernacBullet",
            "581cab4bf49fa4b495e569bbda96fc8d28fddcc0"
        ],
        [
            "split=>//=.",
            "VernacExtend",
            "3c42b53d0efc26db114b00541ac5e7fcb29e6aeb"
        ],
        [
            "+",
            "VernacBullet",
            "3ddfc0515f916e562bacf863647e0107cb15aa13"
        ],
        [
            "by split=>//; case: C'.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "+",
            "VernacBullet",
            "3ddfc0515f916e562bacf863647e0107cb15aa13"
        ],
        [
            "rewrite/Actions.can_send -(cohD C2)/=domPt inE/= eqxx.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "by rewrite mem_cat Hc orbC.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "+",
            "VernacBullet",
            "3ddfc0515f916e562bacf863647e0107cb15aa13"
        ],
        [
            "rewrite/Actions.filter_hooks umfilt0=>???.",
            "VernacExtend",
            "3c42b53d0efc26db114b00541ac5e7fcb29e6aeb"
        ],
        [
            "move => F.",
            "VernacExtend",
            "b1b2cb7a3a617cba67460b4eca1f04de3c1cc716"
        ],
        [
            "apply sym_eq in F.",
            "VernacExtend",
            "76cf18d85a6c70aff426f8c1ee06ccb93e71c674"
        ],
        [
            "move: F.",
            "VernacExtend",
            "b1b2cb7a3a617cba67460b4eca1f04de3c1cc716"
        ],
        [
            "by move/find_some; rewrite dom0.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "move=>y i3 i4[S]/=;case=>Z[b]/=[F]E3 R3; subst y.",
            "VernacExtend",
            "fa40d9b3fb751107d8fbf003506e9dba653a1fc7"
        ],
        [
            "case: F=>/=F; subst b i3=>/=.",
            "VernacExtend",
            "ba44c9d0281a02110ce54645304e6d990debd9c0"
        ],
        [
            "rewrite -(rely_loc' _ R1) in E1.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "rewrite (getStK _ E1) in R3.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "apply: (gh_ex (g:=[:: (cl, server, args)])).",
            "VernacExtend",
            "4bd6fa79b17bcd2bfb7af091fb325367a20385d6"
        ],
        [
            "apply: call_rule=>//.",
            "VernacExtend",
            "4bd6fa79b17bcd2bfb7af091fb325367a20385d6"
        ],
        [
            "-",
            "VernacBullet",
            "581cab4bf49fa4b495e569bbda96fc8d28fddcc0"
        ],
        [
            "move=>C4; rewrite (rely_loc' _ R3) locE//; last by apply: (cohVl C').",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "+",
            "VernacBullet",
            "3ddfc0515f916e562bacf863647e0107cb15aa13"
        ],
        [
            "by rewrite -(cohD C2) domPt inE/=.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "by apply: (cohS C2).",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "clear R3=>v i5[rs'][from][args'][E5]P5 R C.",
            "VernacExtend",
            "3c42b53d0efc26db114b00541ac5e7fcb29e6aeb"
        ],
        [
            "suff X: args = args' /\\ rs' = [::] by case: X=>Z X; subst args' rs'.",
            "VernacExtend",
            "d07fc8b2103f140554938023774bf3f75d04ba99"
        ],
        [
            "suff X': rs' = [::].",
            "VernacExtend",
            "d07fc8b2103f140554938023774bf3f75d04ba99"
        ],
        [
            "-",
            "VernacBullet",
            "581cab4bf49fa4b495e569bbda96fc8d28fddcc0"
        ],
        [
            "subst rs'; split=>//; move/perm_eq_mem: P5=>P5.",
            "VernacExtend",
            "5c6e74e7a1d414f983083efb94483491efe415f4"
        ],
        [
            "move/P5: (cl, server, args).",
            "VernacExtend",
            "b1b2cb7a3a617cba67460b4eca1f04de3c1cc716"
        ],
        [
            "by rewrite inE eqxx inE/==>/esym/eqP; case=>_->.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "by case/perm_eq_size: P5=>/esym/size0nil.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Definition compute_list_spec server ys := forall (xs_acc : (seq input) * (seq (input * nat))), DHT [cl, W] (fun i => let: (xs, acc) := xs_acc in [/\\ loc i = st :-> ([::] : reqs), all prec xs, all (fun e => f e.1 == Some e.2) acc, ys = map fst acc ++ xs & server \\in cs], fun (res : seq (input * nat)) m => [/\\ loc m = st :-> ([::] : reqs), all (fun e => f e.1 == Some e.2) res & ys = map fst res]).",
            "VernacDefinition",
            "6866a9dc2f8bc465778234133ffa2fd234543df1"
        ],
        [
            "Program Definition compute_list_f server (xs : seq input) : DHT [cl, W] (fun i => [/\\ loc i = st :-> ([::] : reqs), all prec xs & server \\in cs], fun (res : seq (input * nat)) m => [/\\ loc m = st :-> ([::] : reqs), all (fun e => f e.1 == Some e.2) res & xs = map fst res]) := Do (ffix (fun (rec : compute_list_spec server xs) xsa => Do _ (let: (xs, acc) := xsa in if xs is x :: xs' then r <-- compute_f server x; let: acc' := rcons acc (x, r) in rec (xs', acc') else ret _ _ acc)) (xs, [::])).",
            "VernacDefinition",
            "dc2b572259e2ad1a9806e1784490dfaf5ada26ca"
        ],
        [
            "Next Obligation.",
            "VernacExtend",
            "de5e6a0a7a163af0d8463969c3ff4241d7d5bba0"
        ],
        [
            "move=>i1/=[L1]; move:l0 l4=>zs acc H1 H2 H3 H4.",
            "VernacExtend",
            "8b784377bdc4d565ff66d4cf36a6041e9354c156"
        ],
        [
            "case: zs H1 H3=>//=[_|z zs/andP[H1]H5] H3.",
            "VernacExtend",
            "e00fff71ff314c991514fc71c41a3556702e444a"
        ],
        [
            "-",
            "VernacBullet",
            "581cab4bf49fa4b495e569bbda96fc8d28fddcc0"
        ],
        [
            "by rewrite cats0 in H3; apply: ret_rule=>i2 R1; split=>//; rewrite ?(rely_loc' _ R1)//.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "apply: step; apply: call_rule=>//r i2[L2]F C2.",
            "VernacExtend",
            "8d9dae45eeb3a769b8a865cef8ae476451f63802"
        ],
        [
            "apply: call_rule=>//_; split=>//; first by rewrite all_rcons/= F eqxx.",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "by rewrite map_rcons/= -cats1 -catA cat_cons/=.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Next Obligation.",
            "VernacExtend",
            "de5e6a0a7a163af0d8463969c3ff4241d7d5bba0"
        ],
        [
            "by move=>i1/=[L1]??; apply: call_rule=>//; rewrite cats0.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "End CalculatorRecieve.",
            "VernacEndSegment",
            "15a8bf05d8bb61948cf060f27875fb484570cc24"
        ]
    ],
    "proofs": [
        {
            "name": "tryrecv_resp_act_obligation_1",
            "line_nb": 25,
            "steps": [
                {
                    "command": [
                        "by case/andP:H=>/eqP->; rewrite domPt inE/=.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "tryrecv_resp_obligation_1",
            "line_nb": 32,
            "steps": [
                {
                    "command": [
                        "apply: ghC=>i1 rs L1 C.",
                        "VernacExtend",
                        "4bd6fa79b17bcd2bfb7af091fb325367a20385d6"
                    ]
                },
                {
                    "command": [
                        "apply: act_rule=>i2 R1/=; split; first by case: (rely_coh R1).",
                        "VernacExtend",
                        "3763a4b8db689af316a7372b722bb29806ab4fb6"
                    ]
                },
                {
                    "command": [
                        "move=>r i3 i4[Sf]S R3/=; rewrite -(rely_loc' l R1) in L1.",
                        "VernacExtend",
                        "057edeb0967475c7ea5e8c98c449ddc5613eddc1"
                    ]
                },
                {
                    "command": [
                        "case: Sf=>_ _ _ _ /(_ l); clear C=>C.",
                        "VernacExtend",
                        "ba44c9d0281a02110ce54645304e6d990debd9c0"
                    ]
                },
                {
                    "command": [
                        "case: S=>C2[|[l'][mid][tms][from][rt][pf][][E]Hin E1 Hw/=].",
                        "VernacExtend",
                        "e00fff71ff314c991514fc71c41a3556702e444a"
                    ]
                },
                {
                    "command": [
                        "-",
                        "VernacBullet",
                        "581cab4bf49fa4b495e569bbda96fc8d28fddcc0"
                    ]
                },
                {
                    "command": [
                        "by case=>?->Z; subst i3; rewrite (rely_loc' _ R3).",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "case/andP=>/eqP Z G; subst l'; set d := (getStatelet i2 l) in C E pf Hw *.",
                        "VernacExtend",
                        "c88a1ed4d2fdfaae2ba6478541f96f1e04534d1c"
                    ]
                },
                {
                    "command": [
                        "move=>Z->{r}; subst i3.",
                        "VernacExtend",
                        "24a904febba1d19bb988309e44cd975b458b44f7"
                    ]
                },
                {
                    "command": [
                        "move: rt pf (coh_s l C2) Hin E1 Hw R3 C G.",
                        "VernacExtend",
                        "b1b2cb7a3a617cba67460b4eca1f04de3c1cc716"
                    ]
                },
                {
                    "command": [
                        "rewrite prEq=>rt pf cohs Hin E1 Hw R3 C G.",
                        "VernacExtend",
                        "3c42b53d0efc26db114b00541ac5e7fcb29e6aeb"
                    ]
                },
                {
                    "command": [
                        "case: Hin=>/=Z; do?[subst rt|case: Z]=>//Z; subst rt.",
                        "VernacExtend",
                        "7a491e25abb46d2c6604a59480722a6bcff079fe"
                    ]
                },
                {
                    "command": [
                        "simpl in E1, Hw, R3; clear G.",
                        "VernacExtend",
                        "1947cab1be11a316dca9dd7cd425e32977f7cb56"
                    ]
                },
                {
                    "command": [
                        "rewrite /cr_wf/= in Hw.",
                        "VernacExtend",
                        "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
                    ]
                },
                {
                    "command": [
                        "case: tms E E1 R3 Hw=>t tms/= E E1 R3 Hw; subst t.",
                        "VernacExtend",
                        "cb7f7fc8c9bf54dd40642228df71eafbde36d5b5"
                    ]
                },
                {
                    "command": [
                        "have A1: exists s', dsoup d = mid \\\\-> (Msg (TMsg resp tms) from cl true) \\+ s'.",
                        "VernacExtend",
                        "406cde1174359c53bf162a2a18c4eede395555f9"
                    ]
                },
                {
                    "command": [
                        "+",
                        "VernacBullet",
                        "3ddfc0515f916e562bacf863647e0107cb15aa13"
                    ]
                },
                {
                    "command": [
                        "by move/esym/um_eta2: E=>->; exists (free mid (dsoup d)).",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "case: A1=>s' Es.",
                        "VernacExtend",
                        "e00fff71ff314c991514fc71c41a3556702e444a"
                    ]
                },
                {
                    "command": [
                        "have Y : tms = head 0 tms :: behead tms.",
                        "VernacExtend",
                        "406cde1174359c53bf162a2a18c4eede395555f9"
                    ]
                },
                {
                    "command": [
                        "-",
                        "VernacBullet",
                        "581cab4bf49fa4b495e569bbda96fc8d28fddcc0"
                    ]
                },
                {
                    "command": [
                        "suff M: exists x xs, tms = x::xs by case:M=>x [xs]E'; subst tms.",
                        "VernacExtend",
                        "d07fc8b2103f140554938023774bf3f75d04ba99"
                    ]
                },
                {
                    "command": [
                        "by case/andP: Hw=>_; case: (tms)=>//x xs _; exists x, xs.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "have Y' : from \\in cs.",
                        "VernacExtend",
                        "406cde1174359c53bf162a2a18c4eede395555f9"
                    ]
                },
                {
                    "command": [
                        "-",
                        "VernacBullet",
                        "581cab4bf49fa4b495e569bbda96fc8d28fddcc0"
                    ]
                },
                {
                    "command": [
                        "case: (proj1 C)=>Cs _ _ _.",
                        "VernacExtend",
                        "e00fff71ff314c991514fc71c41a3556702e444a"
                    ]
                },
                {
                    "command": [
                        "case: Cs=>Vs/(_ mid)Cs.",
                        "VernacExtend",
                        "e00fff71ff314c991514fc71c41a3556702e444a"
                    ]
                },
                {
                    "command": [
                        "rewrite Es in Vs Cs; move: (findPtUn Vs)=>Ez.",
                        "VernacExtend",
                        "7e529e80bb2879787ee6d9466056f19f0215c721"
                    ]
                },
                {
                    "command": [
                        "by move: (Cs _ Ez)=>/=; rewrite/cohMsg/==>H; case: H.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "move: ((proj2 C) (proj1 C) cl from (head 0 tms) (behead tms) mid s' Hc Y')=>//=.",
                        "VernacExtend",
                        "b1b2cb7a3a617cba67460b4eca1f04de3c1cc716"
                    ]
                },
                {
                    "command": [
                        "rewrite -!Y; move/(_ Es)=>F.",
                        "VernacExtend",
                        "7e529e80bb2879787ee6d9466056f19f0215c721"
                    ]
                },
                {
                    "command": [
                        "rewrite Y in Hw.",
                        "VernacExtend",
                        "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
                    ]
                },
                {
                    "command": [
                        "have X: (cl, from, (behead tms)) \\in rs.",
                        "VernacExtend",
                        "406cde1174359c53bf162a2a18c4eede395555f9"
                    ]
                },
                {
                    "command": [
                        "-",
                        "VernacBullet",
                        "581cab4bf49fa4b495e569bbda96fc8d28fddcc0"
                    ]
                },
                {
                    "command": [
                        "by case/andP: Hw; rewrite (getStK (proj1 cohs) L1).",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "have P1: valid (dstate d) by apply: (cohVl C).",
                        "VernacExtend",
                        "406cde1174359c53bf162a2a18c4eede395555f9"
                    ]
                },
                {
                    "command": [
                        "have P2: valid i2 by apply: (cohS (proj2 (rely_coh R1))).",
                        "VernacExtend",
                        "406cde1174359c53bf162a2a18c4eede395555f9"
                    ]
                },
                {
                    "command": [
                        "have P3: l \\in dom i2 by rewrite -(cohD(proj2(rely_coh R1)))domPt inE/=.",
                        "VernacExtend",
                        "406cde1174359c53bf162a2a18c4eede395555f9"
                    ]
                },
                {
                    "command": [
                        "rewrite (rely_loc' _ R3)/= locE// /cr_step (getStK (proj1 cohs) L1)/=.",
                        "VernacExtend",
                        "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
                    ]
                },
                {
                    "command": [
                        "clear R3 Hw P1 P2 P3; exists (remove_elem rs (cl, from, (behead tms))).",
                        "VernacExtend",
                        "ee509745b0e8fd6f3596a6d4cea4c9cf12658cbc"
                    ]
                },
                {
                    "command": [
                        "move: (remove_elem_in rs (cl, from, (behead tms))); rewrite X.",
                        "VernacExtend",
                        "057edeb0967475c7ea5e8c98c449ddc5613eddc1"
                    ]
                },
                {
                    "command": [
                        "by rewrite perm_eq_sym=>H.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "receive_loop'_obligation_1",
            "line_nb": 79,
            "steps": [
                {
                    "command": [
                        "by apply: with_spec x.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Defined.",
                        "VernacEndProof",
                        "88c0be54a50df4bb90276c075406fe442428eb9c"
                    ]
                }
            ]
        },
        {
            "name": "receive_loop'_obligation_2",
            "line_nb": 82,
            "steps": [
                {
                    "command": [
                        "by move:H; rewrite /receive_loop_inv (rely_loc' _ H0).",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "send_request_obligation_1",
            "line_nb": 112,
            "steps": [
                {
                    "command": [
                        "by rewrite InE; right; rewrite InE.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "compute_list_f_obligation_3",
            "line_nb": 157,
            "steps": [
                {
                    "command": [
                        "move=>i1/=[L1]; move:l0 l4=>zs acc H1 H2 H3 H4.",
                        "VernacExtend",
                        "8b784377bdc4d565ff66d4cf36a6041e9354c156"
                    ]
                },
                {
                    "command": [
                        "case: zs H1 H3=>//=[_|z zs/andP[H1]H5] H3.",
                        "VernacExtend",
                        "e00fff71ff314c991514fc71c41a3556702e444a"
                    ]
                },
                {
                    "command": [
                        "-",
                        "VernacBullet",
                        "581cab4bf49fa4b495e569bbda96fc8d28fddcc0"
                    ]
                },
                {
                    "command": [
                        "by rewrite cats0 in H3; apply: ret_rule=>i2 R1; split=>//; rewrite ?(rely_loc' _ R1)//.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "apply: step; apply: call_rule=>//r i2[L2]F C2.",
                        "VernacExtend",
                        "8d9dae45eeb3a769b8a865cef8ae476451f63802"
                    ]
                },
                {
                    "command": [
                        "apply: call_rule=>//_; split=>//; first by rewrite all_rcons/= F eqxx.",
                        "VernacExtend",
                        "3763a4b8db689af316a7372b722bb29806ab4fb6"
                    ]
                },
                {
                    "command": [
                        "by rewrite map_rcons/= -cats1 -catA cat_cons/=.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "compute_list_f_obligation_4",
            "line_nb": 166,
            "steps": [
                {
                    "command": [
                        "by move=>i1/=[L1]??; apply: call_rule=>//; rewrite cats0.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        }
    ]
}