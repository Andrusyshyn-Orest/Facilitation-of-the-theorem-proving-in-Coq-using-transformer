{
    "filename": "Examples/Querying/QueryPlusTPC.v",
    "coq_project": "disel",
    "vernac_cmds": [
        [
            "From mathcomp.ssreflect Require Import ssreflect ssrbool ssrnat eqtype ssrfun seq.",
            "VernacRequire",
            "037d2ffdc90053d89d1b918c36daaeab721d2d83"
        ],
        [
            "From mathcomp Require Import path.",
            "VernacRequire",
            "7c70f445c754a2a74114416d587d02e512c693e2"
        ],
        [
            "Require Import Eqdep.",
            "VernacRequire",
            "a499933d0898d4c0e235af789d9252f633426d20"
        ],
        [
            "From fcsl Require Import pred prelude ordtype finmap pcm unionmap heap.",
            "VernacRequire",
            "41347af8188b8bd95ca7fa1d9e375300903274c8"
        ],
        [
            "From DiSeL Require Import Freshness State EqTypeX Protocols Worlds NetworkSem Rely.",
            "VernacRequire",
            "26e11e2fa076d0e09ced8c25739f81efacc39c1d"
        ],
        [
            "From DiSeL Require Import NewStatePredicates.",
            "VernacRequire",
            "61c3cfa889d2bf475f9dd0e8c487135427517936"
        ],
        [
            "From DiSeL Require Import SeqLib.",
            "VernacRequire",
            "c398989d9278b2bbcd204e7797783d5200e869ba"
        ],
        [
            "From DiSeL Require Import Actions Injection Process Always HoareTriples InferenceRules.",
            "VernacRequire",
            "7ad4d509680a53857edde447eef7d606efef38a6"
        ],
        [
            "From DiSeL Require Import TwoPhaseProtocol TwoPhaseCoordinator TwoPhaseParticipant.",
            "VernacRequire",
            "9a86e65e664d943389ef0a4baf340a29c6ccf6e9"
        ],
        [
            "From DiSeL Require TwoPhaseInductiveProof.",
            "VernacRequire",
            "e029c4219cae2fe0d1963bfcff098e5545026953"
        ],
        [
            "From DiSeL Require Import QueryProtocol QueryHooked.",
            "VernacRequire",
            "2c94187e37fe0dba136a011a76f7ce38446f5cfb"
        ],
        [
            "Section QueryPlusTPC.",
            "VernacBeginSection",
            "0f6de272583a3ae0b46c207ee0b820a8a45d9523"
        ],
        [
            "Variables (lc lq : Label).",
            "VernacAssumption",
            "342d568fb8f2cc844df602b0b99ad8461065083b"
        ],
        [
            "Variables (cn : nid) (pts : seq nid).",
            "VernacAssumption",
            "31a9a7425d1792636d2ed0dd511d4d0791ef5e9d"
        ],
        [
            "Hypothesis Lab_neq: lq != lc.",
            "VernacAssumption",
            "cc5933486ddf6919001e0a11c12b58a4462effd5"
        ],
        [
            "Hypothesis Hnin : cn \\notin pts.",
            "VernacAssumption",
            "2fb5a2919f5d9b9af133204d367fb9b8271fb0a6"
        ],
        [
            "Hypothesis Puniq : uniq pts.",
            "VernacAssumption",
            "1bbddb9cd7b991469153e26d76f0f566b32746ba"
        ],
        [
            "Hypothesis PtsNonEmpty : pts != [::].",
            "VernacAssumption",
            "7bf221126db2a8b43567eef67019f183dfe3bbcb"
        ],
        [
            "Definition pc : protocol := TwoPhaseInductiveProof.tpc_with_inv lc [::] Hnin.",
            "VernacDefinition",
            "7cff473a1c9327a8f9981d53f128294d6a6c940d"
        ],
        [
            "Definition Data : Type := (nat * Log).",
            "VernacDefinition",
            "8190c893f3b56363f9b199e982aa57df99f7414c"
        ],
        [
            "Definition qnodes := cn :: pts.",
            "VernacDefinition",
            "1512c8e903048875641217dac8bed9900e360003"
        ],
        [
            "Variable serialize : Data -> seq nat.",
            "VernacAssumption",
            "2d16b69c62a2b1aa737a0c15a109c638cc02b412"
        ],
        [
            "Variable deserialize : seq nat -> Data.",
            "VernacAssumption",
            "667707bad76b6b32111503fe360becb0aabdc01d"
        ],
        [
            "Hypothesis ds_inverse : left_inverse serialize deserialize.",
            "VernacAssumption",
            "8905d28a3fcdb2204a2f217d9b025b57437e6d53"
        ],
        [
            "Definition local_indicator (d : Data) := [Pred h | h = st :-> (d.1, CInit) \\+ log :-> d.2].",
            "VernacDefinition",
            "f24edd6d021bdfa4a53244f441b7fdf2b86f082e"
        ],
        [
            "Definition core_state_to_data n h (d : Data) := if n == cn then h = st :-> (d.1, CInit) \\+ log :-> d.2 else h = st :-> (d.1, PInit) \\+ log :-> d.2.",
            "VernacDefinition",
            "e6db871cd9c254512c3666083ba8addfbb67b439"
        ],
        [
            "Lemma core_state_to_data_inj n h d d' : core_state_to_data n h d -> core_state_to_data n h d' -> d = d'.",
            "VernacStartTheoremProof",
            "a215386cd3b9cf21d45c1571cf35cbf6f4040c83"
        ],
        [
            "rewrite/core_state_to_data.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "case:ifP=>_ E; rewrite E ![_ \\+ log :-> _]joinC=>{E}E.",
            "VernacExtend",
            "ba44c9d0281a02110ce54645304e6d990debd9c0"
        ],
        [
            "-",
            "VernacBullet",
            "581cab4bf49fa4b495e569bbda96fc8d28fddcc0"
        ],
        [
            "have V: valid (log :-> d.2 \\+ st :-> (d.1, CInit)).",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "-",
            "VernacBullet",
            "581cab4bf49fa4b495e569bbda96fc8d28fddcc0"
        ],
        [
            "by case: validUn=>//k; rewrite !domPt !inE/==>/eqP<-.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "case: (hcancelV V E)=>E2=>{V E}V E.",
            "VernacExtend",
            "3c42b53d0efc26db114b00541ac5e7fcb29e6aeb"
        ],
        [
            "case: (hcancelPtV V E)=>E1.",
            "VernacExtend",
            "e00fff71ff314c991514fc71c41a3556702e444a"
        ],
        [
            "by rewrite [d]surjective_pairing [d']surjective_pairing E1 E2.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "have V: valid (log :-> d.2 \\+ st :-> (d.1, PInit)).",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "-",
            "VernacBullet",
            "581cab4bf49fa4b495e569bbda96fc8d28fddcc0"
        ],
        [
            "by case: validUn=>//k; rewrite !domPt !inE/==>/eqP<-.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "case: (hcancelV V E)=>E2=>{V E}V E.",
            "VernacExtend",
            "3c42b53d0efc26db114b00541ac5e7fcb29e6aeb"
        ],
        [
            "case: (hcancelPtV V E)=>E1.",
            "VernacExtend",
            "e00fff71ff314c991514fc71c41a3556702e444a"
        ],
        [
            "by rewrite [d]surjective_pairing [d']surjective_pairing E1 E2.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma cn_in_qnodes : cn \\in qnodes.",
            "VernacStartTheoremProof",
            "77b6d03ee331f84d5c3af316a1053bc8eb170146"
        ],
        [
            "by rewrite inE eqxx.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Notation getLc s n := (getLocal n (getStatelet s lc)).",
            "VernacSyntacticDefinition",
            "c45fef77435df05e7653dccf03d6cf299d3074d2"
        ],
        [
            "Notation cn_agree := TwoPhaseInductiveInv.cn_log_agreement.",
            "VernacSyntacticDefinition",
            "548932bce9073f19b4750405a0b2b8bd17dc3747"
        ],
        [
            "Lemma core_state_stable_step z s d s' n : cn != z -> network_step (mkWorld pc) z s s' -> n \\in qnodes -> local_indicator d (getLc s cn) -> core_state_to_data n (getLc s n) d -> core_state_to_data n (getLc s' n) d.",
            "VernacStartTheoremProof",
            "841538d7dd647d81182337f3d32e02c8b2ef8ca5"
        ],
        [
            "move=>N S Qn L H0; case: (step_coh S)=>C1 C2.",
            "VernacExtend",
            "a01b3d93f426ff68d360351709a5fa5af822af32"
        ],
        [
            "have R: network_rely (plab pc \\\\-> pc, Unit) cn s s' by exists 1, z, s'.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "rewrite -(rely_loc' _ R) in L.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "case: C2=>V1 V2 _ D /(_ lc)/=; rewrite prEq=>/=[[C2] Inv].",
            "VernacExtend",
            "ba44c9d0281a02110ce54645304e6d990debd9c0"
        ],
        [
            "case/orP: Qn=>[|P]; first by move/eqP=>Z; subst n; rewrite /core_state_to_data eqxx.",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "move: (@cn_agree lc cn pts [::] Hnin (getStatelet s' lc) d.1 d.2 n C2 L Inv P)=>H.",
            "VernacExtend",
            "b1b2cb7a3a617cba67460b4eca1f04de3c1cc716"
        ],
        [
            "rewrite /core_state_to_data; case:ifP=>//; by move=>/eqP Z; subst n.",
            "VernacExtend",
            "edc181ae1523612867809723d78a66d7ba4793ea"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Definition W := QueryHooked.W lq pc Data qnodes serialize core_state_to_data.",
            "VernacDefinition",
            "94af592425f64c52858e6277800066e8b14b68c9"
        ],
        [
            "Notation loc_qry s := (getLocal cn (getStatelet s lq)).",
            "VernacSyntacticDefinition",
            "d58ee72ba2dc1d8bd29c5f580497b7224ab3f466"
        ],
        [
            "Notation loc_tpc' s n := (getLocal n (getStatelet s lc)).",
            "VernacSyntacticDefinition",
            "f540721e874e9d86fc42a21e7068f30f913b7c42"
        ],
        [
            "Notation loc_tpc s := (loc_tpc' s cn).",
            "VernacSyntacticDefinition",
            "b4829f5031ea263b4a01485542d0bae2be36f6d2"
        ],
        [
            "Notation qry_init := (query_init_state lq Data qnodes serialize cn).",
            "VernacSyntacticDefinition",
            "f5b442bb700a7f3e9da7182038caa47e2b371bcd"
        ],
        [
            "Lemma loc_imp_core s d n : Coh W s -> n \\in qnodes -> local_indicator d (loc_tpc s) -> core_state_to_data n (loc_tpc' s n) d.",
            "VernacStartTheoremProof",
            "6ac361a8f2aae2d5a59381fc8de7a167c8650fff"
        ],
        [
            "move=>C Nq E.",
            "VernacExtend",
            "b1b2cb7a3a617cba67460b4eca1f04de3c1cc716"
        ],
        [
            "case/orP: Nq=>[|P]; first by move/eqP=>z; subst n; rewrite /core_state_to_data eqxx.",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "case: (C)=>_ _ _ _/(_ lc); rewrite prEqC//=; case=> C2 Inv.",
            "VernacExtend",
            "1dd33488047dbf70f12e12a749f59bfa780f9e04"
        ],
        [
            "move: (@cn_agree lc cn pts [::] Hnin (getStatelet s lc) d.1 d.2 n C2 E Inv P)=>->.",
            "VernacExtend",
            "b1b2cb7a3a617cba67460b4eca1f04de3c1cc716"
        ],
        [
            "rewrite /core_state_to_data; case:ifP=>//.",
            "VernacExtend",
            "712d339e99ee17eb7d5033e19ac614eb3ca6b532"
        ],
        [
            "move=>/eqP Z; subst n; move/negbTE: Hnin=>Z.",
            "VernacExtend",
            "975f4293296084b61841faa3c596d723413fc68f"
        ],
        [
            "suff X: cn \\in pts by rewrite X in Z.",
            "VernacExtend",
            "d07fc8b2103f140554938023774bf3f75d04ba99"
        ],
        [
            "done.",
            "VernacExtend",
            "095062641163274af3d1e226cbd993f0dbb6e000"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma find_empty l i : l \\notin dom i -> getStatelet i l = empty_dstatelet.",
            "VernacStartTheoremProof",
            "6f6e6b648e793f39bd9296e1f8529ee48f5e5c91"
        ],
        [
            "by rewrite /getStatelet; case: dom_find=>//->.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Definition cn_request_log := request_data_program _ pc _ _ _ _ ds_inverse _ core_state_to_data_inj Lab_neq _ cn_in_qnodes local_indicator core_state_stable_step (0, [::]).",
            "VernacDefinition",
            "ea0baf0ce995042a8541401fee92e09f19961da5"
        ],
        [
            "Definition coordinator ds := with_inv (TwoPhaseInductiveProof.ii _ _ _) (coordinator_loop_zero lc cn pts [::] Hnin Puniq PtsNonEmpty ds).",
            "VernacDefinition",
            "80b1203eb207500c1a23780ed47770355a74bb23"
        ],
        [
            "Program Definition coordinate_and_query (ds : seq data) to : {rr : seq (nid * nat) * seq (nid * nat)}, DHT [cn, W] (fun i => let: (reqs, resp) := rr in [/\\ loc_tpc i = st :-> (0, CInit) \\+ log :-> ([::] : seq (bool * data)), to \\in qnodes, loc_qry i = qst :-> (reqs, resp) & qry_init to i], fun (res : Data) m => let: (reqs, resp) := rr in exists (chs : seq bool), let: d := (size ds, seq.zip chs ds) in [/\\ loc_tpc m = st :-> (d.1, CInit) \\+ log :-> d.2, loc_qry m = qst :-> (reqs, resp), qry_init to m & res = d]) := Do _ ( iinject (coordinator ds);; cn_request_log to).",
            "VernacDefinition",
            "48faae8c76e593bd267d55cac70c5b61ec461680"
        ],
        [
            "Next Obligation.",
            "VernacExtend",
            "de5e6a0a7a163af0d8463969c3ff4241d7d5bba0"
        ],
        [
            "by exact : (query_hookz lq pc Data qnodes serialize core_state_to_data).",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Defined.",
            "VernacEndProof",
            "88c0be54a50df4bb90276c075406fe442428eb9c"
        ],
        [
            "Next Obligation.",
            "VernacExtend",
            "de5e6a0a7a163af0d8463969c3ff4241d7d5bba0"
        ],
        [
            "exact: (injW lq pc Data qnodes serialize core_state_to_data Lab_neq).",
            "VernacExtend",
            "ce637ff86bafca5d8359473e8c02af644dcbdc43"
        ],
        [
            "Defined.",
            "VernacEndProof",
            "88c0be54a50df4bb90276c075406fe442428eb9c"
        ],
        [
            "Next Obligation.",
            "VernacExtend",
            "de5e6a0a7a163af0d8463969c3ff4241d7d5bba0"
        ],
        [
            "apply:ghC=>i0[rq rs][P1 P2 P3 P4]C0; apply: step.",
            "VernacExtend",
            "8d9dae45eeb3a769b8a865cef8ae476451f63802"
        ],
        [
            "move: (C0)=>CD0; rewrite /W eqW in CD0; move: (coh_hooks CD0)=>{CD0}CD0.",
            "VernacExtend",
            "40075a671b142e70c4190413219df8981418e910"
        ],
        [
            "case: (coh_split CD0); try apply: hook_complete0.",
            "VernacExtend",
            "1a12e527114c2334e70d66d126a44d968b267be4"
        ],
        [
            "move=>i1[j1][C1 D1 Z].",
            "VernacExtend",
            "b1b2cb7a3a617cba67460b4eca1f04de3c1cc716"
        ],
        [
            "subst i0; apply: inject_rule=>//.",
            "VernacExtend",
            "29990457881f8450cf3e9b56e1f447b9e8402aa0"
        ],
        [
            "have E : loc_tpc (i1 \\+ j1) = loc_tpc i1 by rewrite (locProjL CD0 _ C1)// domPt inE andbC eqxx.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "rewrite E{E} in P1.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "apply: with_inv_rule'.",
            "VernacExtend",
            "4bd6fa79b17bcd2bfb7af091fb325367a20385d6"
        ],
        [
            "apply: call_rule=>//_ i2 [chs]L2 C2 Inv j2 CD2/= R.",
            "VernacExtend",
            "4bd6fa79b17bcd2bfb7af091fb325367a20385d6"
        ],
        [
            "have E : loc_qry (i1 \\+ j1) = loc_qry j1 by rewrite (locProjR CD0 _ D1)// domPt inE andbC eqxx.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "rewrite E {E} -(rely_loc' _ R) in P3.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "case: (rely_coh R)=>_ D2.",
            "VernacExtend",
            "e00fff71ff314c991514fc71c41a3556702e444a"
        ],
        [
            "rewrite /W eqW in CD2; move: (coh_hooks CD2)=>{CD2}CD2.",
            "VernacExtend",
            "7e529e80bb2879787ee6d9466056f19f0215c721"
        ],
        [
            "rewrite /mkWorld/= in C2.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "have C2': i2 \\In Coh (plab pc \\\\-> pc, Unit).",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "-",
            "VernacBullet",
            "581cab4bf49fa4b495e569bbda96fc8d28fddcc0"
        ],
        [
            "split=>//=.",
            "VernacExtend",
            "3c42b53d0efc26db114b00541ac5e7fcb29e6aeb"
        ],
        [
            "+",
            "VernacBullet",
            "3ddfc0515f916e562bacf863647e0107cb15aa13"
        ],
        [
            "by rewrite /valid/= valid_unit validPt.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "+",
            "VernacBullet",
            "3ddfc0515f916e562bacf863647e0107cb15aa13"
        ],
        [
            "by apply: (cohS C2).",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "+",
            "VernacBullet",
            "3ddfc0515f916e562bacf863647e0107cb15aa13"
        ],
        [
            "by apply: hook_complete0.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "+",
            "VernacBullet",
            "3ddfc0515f916e562bacf863647e0107cb15aa13"
        ],
        [
            "by move=>z; rewrite -(cohD C2) !domPt.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "move=>l; case B: (lc == l).",
            "VernacExtend",
            "a01b3d93f426ff68d360351709a5fa5af822af32"
        ],
        [
            "+",
            "VernacBullet",
            "3ddfc0515f916e562bacf863647e0107cb15aa13"
        ],
        [
            "move/eqP:B=>B; subst l; rewrite /getProtocol findPt; split=>//.",
            "VernacExtend",
            "d554f92023d13232930964eba4c4d33bb48c66bd"
        ],
        [
            "by move: (coh_coh lc C2); rewrite /getProtocol findPt.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "have X: l \\notin dom i2 by rewrite -(cohD C2) domPt inE; move/negbT: B.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "rewrite /getProtocol/= (find_empty _ _ X).",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "have Y: l \\notin dom (lc \\\\-> pc) by rewrite domPt inE; move/negbT: B.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "by case: dom_find Y=>//->_.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "have D2': j2 \\In Coh (lq \\\\-> pq lq Data qnodes serialize, Unit) by apply: (cohUnKR CD2 _); try apply: hook_complete0.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "rewrite -(locProjL CD2 _ C2') in L2; last by rewrite domPt inE eqxx.",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "rewrite -(locProjR CD2 _ D2') in P3; last by rewrite domPt inE eqxx.",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "clear C2 D2.",
            "VernacExtend",
            "d8d6a0de5bcff432f1338975f9797c6f24af5abb"
        ],
        [
            "rewrite injWQ in R.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "rewrite /query_init_state/= in P4.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "rewrite (locProjR CD0 _ D1) in P4; last by rewrite domPt inE eqxx.",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "have Q4: qry_init to j2.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "-",
            "VernacBullet",
            "581cab4bf49fa4b495e569bbda96fc8d28fddcc0"
        ],
        [
            "by apply: (query_init_rely' lq Data qnodes serialize cn to _ _ P4 R).",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "clear P4.",
            "VernacExtend",
            "f14313c7a15f3df7fba6c0c92bd1ab33225ef169"
        ],
        [
            "rewrite /query_init_state/= -(locProjR CD2 _ D2') in Q4; last by rewrite domPt inE eqxx.",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "apply (gh_ex (g:=(rq, rs, (size ds, seq.zip chs ds)))).",
            "VernacExtend",
            "12144de7f83f9d4366e601d5e03d0bfd50ffc912"
        ],
        [
            "apply: call_rule=>//=; last by move=>d m[->->T1 T2->]_; eexists _.",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "move=>CD2'; split=>//.",
            "VernacExtend",
            "8261237f0cda1915a4077c28869831c5329103ce"
        ],
        [
            "case/orP: P2=>[|P]; first by move/eqP=>Z; subst to; rewrite /core_state_to_data eqxx.",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "rewrite !(locProjL CD2 _ C2') in L2 *; last by rewrite domPt inE eqxx.",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "move: (coh_coh lc C2'); rewrite prEq; case=>C3 _.",
            "VernacExtend",
            "d7214ac8fd48f4d1cd143edd9d16f6d28386a302"
        ],
        [
            "rewrite /core_state_to_data; case:ifP=>//[|_]; first by move=>/eqP Z; subst to.",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "by apply: (@cn_agree lc cn pts [::] Hnin _ _ _ to C3 _ Inv).",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "End QueryPlusTPC.",
            "VernacEndSegment",
            "d0a139c2d08f3fae4a4fd3be4bec70587a0e4baa"
        ]
    ],
    "proofs": [
        {
            "name": "core_state_to_data_inj",
            "line_nb": 26,
            "steps": [
                {
                    "command": [
                        "rewrite/core_state_to_data.",
                        "VernacExtend",
                        "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
                    ]
                },
                {
                    "command": [
                        "case:ifP=>_ E; rewrite E ![_ \\+ log :-> _]joinC=>{E}E.",
                        "VernacExtend",
                        "ba44c9d0281a02110ce54645304e6d990debd9c0"
                    ]
                },
                {
                    "command": [
                        "-",
                        "VernacBullet",
                        "581cab4bf49fa4b495e569bbda96fc8d28fddcc0"
                    ]
                },
                {
                    "command": [
                        "have V: valid (log :-> d.2 \\+ st :-> (d.1, CInit)).",
                        "VernacExtend",
                        "406cde1174359c53bf162a2a18c4eede395555f9"
                    ]
                },
                {
                    "command": [
                        "-",
                        "VernacBullet",
                        "581cab4bf49fa4b495e569bbda96fc8d28fddcc0"
                    ]
                },
                {
                    "command": [
                        "by case: validUn=>//k; rewrite !domPt !inE/==>/eqP<-.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "case: (hcancelV V E)=>E2=>{V E}V E.",
                        "VernacExtend",
                        "3c42b53d0efc26db114b00541ac5e7fcb29e6aeb"
                    ]
                },
                {
                    "command": [
                        "case: (hcancelPtV V E)=>E1.",
                        "VernacExtend",
                        "e00fff71ff314c991514fc71c41a3556702e444a"
                    ]
                },
                {
                    "command": [
                        "by rewrite [d]surjective_pairing [d']surjective_pairing E1 E2.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "have V: valid (log :-> d.2 \\+ st :-> (d.1, PInit)).",
                        "VernacExtend",
                        "406cde1174359c53bf162a2a18c4eede395555f9"
                    ]
                },
                {
                    "command": [
                        "-",
                        "VernacBullet",
                        "581cab4bf49fa4b495e569bbda96fc8d28fddcc0"
                    ]
                },
                {
                    "command": [
                        "by case: validUn=>//k; rewrite !domPt !inE/==>/eqP<-.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "case: (hcancelV V E)=>E2=>{V E}V E.",
                        "VernacExtend",
                        "3c42b53d0efc26db114b00541ac5e7fcb29e6aeb"
                    ]
                },
                {
                    "command": [
                        "case: (hcancelPtV V E)=>E1.",
                        "VernacExtend",
                        "e00fff71ff314c991514fc71c41a3556702e444a"
                    ]
                },
                {
                    "command": [
                        "by rewrite [d]surjective_pairing [d']surjective_pairing E1 E2.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "cn_in_qnodes",
            "line_nb": 43,
            "steps": [
                {
                    "command": [
                        "by rewrite inE eqxx.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "core_state_stable_step",
            "line_nb": 48,
            "steps": [
                {
                    "command": [
                        "move=>N S Qn L H0; case: (step_coh S)=>C1 C2.",
                        "VernacExtend",
                        "a01b3d93f426ff68d360351709a5fa5af822af32"
                    ]
                },
                {
                    "command": [
                        "have R: network_rely (plab pc \\\\-> pc, Unit) cn s s' by exists 1, z, s'.",
                        "VernacExtend",
                        "406cde1174359c53bf162a2a18c4eede395555f9"
                    ]
                },
                {
                    "command": [
                        "rewrite -(rely_loc' _ R) in L.",
                        "VernacExtend",
                        "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
                    ]
                },
                {
                    "command": [
                        "case: C2=>V1 V2 _ D /(_ lc)/=; rewrite prEq=>/=[[C2] Inv].",
                        "VernacExtend",
                        "ba44c9d0281a02110ce54645304e6d990debd9c0"
                    ]
                },
                {
                    "command": [
                        "case/orP: Qn=>[|P]; first by move/eqP=>Z; subst n; rewrite /core_state_to_data eqxx.",
                        "VernacExtend",
                        "3763a4b8db689af316a7372b722bb29806ab4fb6"
                    ]
                },
                {
                    "command": [
                        "move: (@cn_agree lc cn pts [::] Hnin (getStatelet s' lc) d.1 d.2 n C2 L Inv P)=>H.",
                        "VernacExtend",
                        "b1b2cb7a3a617cba67460b4eca1f04de3c1cc716"
                    ]
                },
                {
                    "command": [
                        "rewrite /core_state_to_data; case:ifP=>//; by move=>/eqP Z; subst n.",
                        "VernacExtend",
                        "edc181ae1523612867809723d78a66d7ba4793ea"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "loc_imp_core",
            "line_nb": 62,
            "steps": [
                {
                    "command": [
                        "move=>C Nq E.",
                        "VernacExtend",
                        "b1b2cb7a3a617cba67460b4eca1f04de3c1cc716"
                    ]
                },
                {
                    "command": [
                        "case/orP: Nq=>[|P]; first by move/eqP=>z; subst n; rewrite /core_state_to_data eqxx.",
                        "VernacExtend",
                        "3763a4b8db689af316a7372b722bb29806ab4fb6"
                    ]
                },
                {
                    "command": [
                        "case: (C)=>_ _ _ _/(_ lc); rewrite prEqC//=; case=> C2 Inv.",
                        "VernacExtend",
                        "1dd33488047dbf70f12e12a749f59bfa780f9e04"
                    ]
                },
                {
                    "command": [
                        "move: (@cn_agree lc cn pts [::] Hnin (getStatelet s lc) d.1 d.2 n C2 E Inv P)=>->.",
                        "VernacExtend",
                        "b1b2cb7a3a617cba67460b4eca1f04de3c1cc716"
                    ]
                },
                {
                    "command": [
                        "rewrite /core_state_to_data; case:ifP=>//.",
                        "VernacExtend",
                        "712d339e99ee17eb7d5033e19ac614eb3ca6b532"
                    ]
                },
                {
                    "command": [
                        "move=>/eqP Z; subst n; move/negbTE: Hnin=>Z.",
                        "VernacExtend",
                        "975f4293296084b61841faa3c596d723413fc68f"
                    ]
                },
                {
                    "command": [
                        "suff X: cn \\in pts by rewrite X in Z.",
                        "VernacExtend",
                        "d07fc8b2103f140554938023774bf3f75d04ba99"
                    ]
                },
                {
                    "command": [
                        "done.",
                        "VernacExtend",
                        "095062641163274af3d1e226cbd993f0dbb6e000"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "find_empty",
            "line_nb": 72,
            "steps": [
                {
                    "command": [
                        "by rewrite /getStatelet; case: dom_find=>//->.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "coordinate_and_query_obligation_2",
            "line_nb": 78,
            "steps": [
                {
                    "command": [
                        "by exact : (query_hookz lq pc Data qnodes serialize core_state_to_data).",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Defined.",
                        "VernacEndProof",
                        "88c0be54a50df4bb90276c075406fe442428eb9c"
                    ]
                }
            ]
        },
        {
            "name": "coordinate_and_query_obligation_3",
            "line_nb": 81,
            "steps": [
                {
                    "command": [
                        "exact: (injW lq pc Data qnodes serialize core_state_to_data Lab_neq).",
                        "VernacExtend",
                        "ce637ff86bafca5d8359473e8c02af644dcbdc43"
                    ]
                },
                {
                    "command": [
                        "Defined.",
                        "VernacEndProof",
                        "88c0be54a50df4bb90276c075406fe442428eb9c"
                    ]
                }
            ]
        }
    ]
}