{
    "filename": "Examples/Greeter/Greeter.v",
    "coq_project": "disel",
    "vernac_cmds": [
        [
            "From mathcomp.ssreflect Require Import ssreflect ssrbool ssrnat eqtype ssrfun seq.",
            "VernacRequire",
            "037d2ffdc90053d89d1b918c36daaeab721d2d83"
        ],
        [
            "From mathcomp Require Import path.",
            "VernacRequire",
            "7c70f445c754a2a74114416d587d02e512c693e2"
        ],
        [
            "Require Import Eqdep.",
            "VernacRequire",
            "a499933d0898d4c0e235af789d9252f633426d20"
        ],
        [
            "Require Import Relation_Operators.",
            "VernacRequire",
            "5c09f52be79db9d019c350cc3153659920102fbb"
        ],
        [
            "From fcsl Require Import axioms pred prelude ordtype finmap pcm unionmap heap.",
            "VernacRequire",
            "576c96e5dbde92d8f1878b78d95e36aa980a0403"
        ],
        [
            "From DiSeL Require Import Freshness State EqTypeX Protocols Worlds NetworkSem Rely.",
            "VernacRequire",
            "26e11e2fa076d0e09ced8c25739f81efacc39c1d"
        ],
        [
            "From DiSeL Require Import Actions Injection Process Always HoareTriples InferenceRules.",
            "VernacRequire",
            "7ad4d509680a53857edde447eef7d606efef38a6"
        ],
        [
            "Set Implicit Arguments.",
            "VernacSetOption",
            "9e84ff8896f028601d8aded48c1d4aebe60aa584"
        ],
        [
            "Unset Strict Implicit.",
            "VernacUnsetOption",
            "2842adaf6959318f2042805935c46f513bdc0348"
        ],
        [
            "Import Prenex Implicits.",
            "VernacUnsetOption",
            "444e5f0be4b25d9b1fd556943a447ec10046d151"
        ],
        [
            "Module GreeterProtocol.",
            "VernacDefineModule",
            "d1f40134673d79a263dc22b28fcaaeeac498992a"
        ],
        [
            "Section GreeterProtocol.",
            "VernacBeginSection",
            "b55293127345f21e4a7cc9ae17c937f49a23eaf5"
        ],
        [
            "Variable fixed_nodes : seq nid.",
            "VernacAssumption",
            "0eff21ff540df4f4bb6c5e725da7d651fcf0614a"
        ],
        [
            "Section GreeterCoh.",
            "VernacBeginSection",
            "4aa32830c027ee54fe650edb7630ba9a03a85c0a"
        ],
        [
            "Definition nodes (d : dstatelet) : pred nid := mem fixed_nodes.",
            "VernacDefinition",
            "36358e921a2e19366512d6feff1321cb0d71b657"
        ],
        [
            "Definition hello := [:: 3; 1; 1; 0].",
            "VernacDefinition",
            "8d2c44dc9e3e7826b19627bddcb6cc819505d1f3"
        ],
        [
            "Definition counter := ptr_nat 1.",
            "VernacDefinition",
            "19407f1dda8fd5bc51c369e603267cb750956f45"
        ],
        [
            "Definition soupCoh : Pred soup := [Pred s | valid s /\\ forall m msg, find m s = Some msg -> let: from := from msg in let: tag := tag (content msg) in let: val := tms_cont (content msg) in [/\\ from \\in fixed_nodes, tag == 0 & behead val == hello]].",
            "VernacDefinition",
            "17843bf407ed7bb07ca2b3887910024c464998ed"
        ],
        [
            "Definition localCoh : Pred heap := [Pred h | exists n : nat, h = counter :-> n].",
            "VernacDefinition",
            "1ce79dffbc6b93064ffda079c54121a123567a7e"
        ],
        [
            "Definition greeter_coh d : Prop := let: dl := dstate d in let: ds := dsoup d in [/\\ soupCoh ds, dom dl =i fixed_nodes, valid dl & forall n, n \\in fixed_nodes -> localCoh (getLocal n d)].",
            "VernacDefinition",
            "3e41a0b3f12033e71bf347e2cebe523355c9d3ec"
        ],
        [
            "Lemma l1 d: greeter_coh d -> valid (dstate d).",
            "VernacStartTheoremProof",
            "361499d528afcf90c4d0aeea0fdaf1ba1951c876"
        ],
        [
            "by case.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma l2 d: greeter_coh d -> valid (dsoup d).",
            "VernacStartTheoremProof",
            "77dfba07180279f3eb81721bb586ebb808b33b86"
        ],
        [
            "by case; case.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma l3 d: greeter_coh d -> dom (dstate d) =i nodes d.",
            "VernacStartTheoremProof",
            "f2a7c6bee26f4c784e5d7b221e6be0c9b07d2783"
        ],
        [
            "by case.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Definition GreeterCoh := CohPred (CohPredMixin l1 l2 l3).",
            "VernacDefinition",
            "cb38228e262462d65f8f732e2c508ad2efbdd717"
        ],
        [
            "End GreeterCoh.",
            "VernacEndSegment",
            "4678e23fc81213d8a651155b22aa72801503d9a7"
        ],
        [
            "Section GreeterSend.",
            "VernacBeginSection",
            "7b0a01c9f48dc0485cbc4dde016892f64075acfb"
        ],
        [
            "Section SendBase.",
            "VernacBeginSection",
            "c1a12b156fa9176770b2bddfe7d52ad826144fd4"
        ],
        [
            "Notation coh := GreeterCoh.",
            "VernacSyntacticDefinition",
            "614098683561c5761fc7e138b50a916b46ccd413"
        ],
        [
            "Definition greet_safe (this n : nid) (d : dstatelet) msg := [/\\ this \\in fixed_nodes, n \\in fixed_nodes, exists m, msg == m :: hello & coh d].",
            "VernacDefinition",
            "fa341d3b3ab8f634e0abc158ce87b15c3d9fab66"
        ],
        [
            "Section GreetAux.",
            "VernacBeginSection",
            "7b990308bb52c2bcfc5eb9386c288db5d645c48d"
        ],
        [
            "Variables (this : nid) (d : dstatelet) (C : coh d).",
            "VernacAssumption",
            "27dca1752f1d0f3192d8d6122b82faad7a9054ad"
        ],
        [
            "Lemma lcoh n : n \\in fixed_nodes -> localCoh (getLocal n d).",
            "VernacStartTheoremProof",
            "cc8a5c94fbedb25179a5b6ffb6e861627587fcd6"
        ],
        [
            "by move=> H; case: C => _ _ _/(_ n H).",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma cohN n v : n \\in fixed_nodes -> find counter (getLocal n d) = Some v -> dyn_tp v = nat.",
            "VernacStartTheoremProof",
            "20c7d461976800cfc89d085494bddddb6a99070a"
        ],
        [
            "by move=>H; case: (lcoh H)=>m->; rewrite findPt /=; case=><-.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Definition getN n (pf : n \\in fixed_nodes) : nat := match find counter (getLocal n d) as f return _ = f -> _ with Some v => fun epf => icast (sym_eq (cohN pf epf)) (dyn_val v) | None => fun epf => 0 end (erefl _).",
            "VernacDefinition",
            "c3ec6790bc46a1042639035698ccd7ce134bb5ea"
        ],
        [
            "Lemma getNK n (Hn : n \\in fixed_nodes) m: getLocal n d = counter :-> m -> getN Hn = m.",
            "VernacStartTheoremProof",
            "eb8b37adddbb97761ddd35767ab831299591ef45"
        ],
        [
            "move=>E; rewrite /getN; move: (cohN)=>H.",
            "VernacExtend",
            "40075a671b142e70c4190413219df8981418e910"
        ],
        [
            "by move: (H n)=>{H}; rewrite E=>H/=; apply: eqc.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "End GreetAux.",
            "VernacEndSegment",
            "f817e69c15f930104cede7f23939656cf5a779e9"
        ],
        [
            "Lemma this_in_pf this to d msg : greet_safe this to d msg -> this \\in fixed_nodes.",
            "VernacStartTheoremProof",
            "679b16bba7b2876678b999c2ed701962ed820fe3"
        ],
        [
            "by case.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma greet_safe_coh this to d m : greet_safe this to d m -> coh d.",
            "VernacStartTheoremProof",
            "0fe9eb5f8213d1201167ff388e144c1c362253c6"
        ],
        [
            "by case.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Definition greet_step (this to : nid) (d : dstatelet) (msg : seq nat) (pf: greet_safe this to d msg) : option heap := if (behead msg == hello) && (to \\in fixed_nodes) then Some (counter :-> (getN (greet_safe_coh pf) (this_in_pf pf)).+1) else None.",
            "VernacDefinition",
            "cd38340fd65d55c1f4b9a75ef376f66289a6621a"
        ],
        [
            "Lemma greet_safe_in this to d m : greet_safe this to d m -> this \\in nodes d /\\ to \\in nodes d.",
            "VernacStartTheoremProof",
            "399796a1d858bb4a1db6d35a2e2764fc42214412"
        ],
        [
            "by case.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma greet_safe_def this to d msg : greet_safe this to d msg <-> exists b pf, @greet_step this to d msg pf = Some b.",
            "VernacStartTheoremProof",
            "369cfc396b4b3599cd1948cf2747708451530717"
        ],
        [
            "split=>[H|].",
            "VernacExtend",
            "3c42b53d0efc26db114b00541ac5e7fcb29e6aeb"
        ],
        [
            "-",
            "VernacBullet",
            "581cab4bf49fa4b495e569bbda96fc8d28fddcc0"
        ],
        [
            "exists (counter :-> (getN (greet_safe_coh H) (this_in_pf H)).+1), H.",
            "VernacExtend",
            "bc32439978e0df5e0f49082eb265266323b2f914"
        ],
        [
            "rewrite/greet_step; case: (H)=>H1 H2 H3 H4.",
            "VernacExtend",
            "712d339e99ee17eb7d5033e19ac614eb3ca6b532"
        ],
        [
            "move: (And4 H1 H2 H3 H4)=>C; rewrite H2; case: H3=>m H3.",
            "VernacExtend",
            "d7214ac8fd48f4d1cd143edd9d16f6d28386a302"
        ],
        [
            "by move/eqP: H3=>H3; subst msg=>/=.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "by case=>h[pf]; rewrite/greet_step; case:ifP=>///andP[/eqP->H]_; split.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Definition greet_tag := 0.",
            "VernacDefinition",
            "70a240bf59d4cd1cfd9d74b233be3887970c3ece"
        ],
        [
            "Lemma greet_step_coh this to d msg (pf : greet_safe this to d msg) b : let: f := dstate d in let: s := dsoup d in Some b = greet_step pf -> let: f' := upd this b f in let: tms := TMsg greet_tag msg in let: s' := (post_msg s (Msg tms this to true)).1 in coh (DStatelet f' s').",
            "VernacStartTheoremProof",
            "076588e50374eaac38ca1aa22ca236d89d921266"
        ],
        [
            "rewrite/greet_step; case:ifP=>///andP[/eqP Z1 H][]Z'; subst b=>/=.",
            "VernacExtend",
            "2253759ff5c580854290fce82296a80357452125"
        ],
        [
            "case:pf=>[F1]F2 F3 [Cs D]Cl Cn.",
            "VernacExtend",
            "e00fff71ff314c991514fc71c41a3556702e444a"
        ],
        [
            "split=>//=; do?[by rewrite validU/=].",
            "VernacExtend",
            "a7bd48c20010ed986f3ba4f8c3bf8c06ae1d5257"
        ],
        [
            "-",
            "VernacBullet",
            "581cab4bf49fa4b495e569bbda96fc8d28fddcc0"
        ],
        [
            "split; first by rewrite valid_fresh; case: Cs.",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "move=>m msg'; rewrite findUnR ?domPt ?inE ?valid_fresh; last by case: Cs.",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "case: ifP=>[/eqP Z|_]; last by case: Cs=>_ Cs; move/Cs.",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "case:F3=>[m']/eqP E; subst msg.",
            "VernacExtend",
            "4f0d26c80f9a62c9ec206491065cf02c416be154"
        ],
        [
            "by subst m; rewrite findPt/=; case=><-.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "-",
            "VernacBullet",
            "581cab4bf49fa4b495e569bbda96fc8d28fddcc0"
        ],
        [
            "move=>n; rewrite domU inE/=; case: ifP=>[/eqP Z| _]//; subst n.",
            "VernacExtend",
            "3eea4caf947198efb5348aad7d811b8e5d87e1c0"
        ],
        [
            "by rewrite Cl F1.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "move: (And4 F1 F2 F3 (And4 Cs D Cl Cn)) => S.",
            "VernacExtend",
            "b1b2cb7a3a617cba67460b4eca1f04de3c1cc716"
        ],
        [
            "move=>n Hn; exists (if n == this then (getN (greet_safe_coh S) (this_in_pf S)).+1 else (getN (greet_safe_coh S) Hn)); rewrite /getLocal/=.",
            "VernacExtend",
            "43d064b2b78b128d20060c0dbb2ad4126166b774"
        ],
        [
            "rewrite findU; case Z: (n == this)=>/=.",
            "VernacExtend",
            "712d339e99ee17eb7d5033e19ac614eb3ca6b532"
        ],
        [
            "-",
            "VernacBullet",
            "581cab4bf49fa4b495e569bbda96fc8d28fddcc0"
        ],
        [
            "by move/eqP: Z=>Z; subst n; move: (And4 Cs D Cl Cn)=>C; rewrite Cl.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "case: (Cn n Hn)=>m E; move: (E); rewrite /getLocal=>->; congr (_ :-> _).",
            "VernacExtend",
            "8e8d45af097b9cc31b4821324227971166909ed4"
        ],
        [
            "by move: (getNK (greet_safe_coh S) Hn E)=><-.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "End SendBase.",
            "VernacEndSegment",
            "5db0789d37cd5c9a9055289619e163dc525589d9"
        ],
        [
            "Definition greeter_send_trans := SendTrans greet_safe_coh greet_safe_in greet_safe_def greet_step_coh.",
            "VernacDefinition",
            "fd6200e98de0d3860ceb0714214121586b3ad517"
        ],
        [
            "End GreeterSend.",
            "VernacEndSegment",
            "202ea9697b98a0bce0efe9f7dc6959676b306ed9"
        ],
        [
            "Variable l : Label.",
            "VernacAssumption",
            "aca5957ed38b3e3b45d48e71df1841eb1fc9d5f0"
        ],
        [
            "Program Definition GreeterProt : protocol := @Protocol _ l _ [:: greeter_send_trans] [::] _ _.",
            "VernacDefinition",
            "d7873f974a09197cf49f870eab41d19d0da2c7a6"
        ],
        [
            "End GreeterProtocol.",
            "VernacEndSegment",
            "941433a26581394e98e4cec1c031dccd8b9d98b6"
        ],
        [
            "Module Exports.",
            "VernacDefineModule",
            "d4a1114ec53f746523a7dec57823f7f03e51fa24"
        ],
        [
            "Section Exports.",
            "VernacBeginSection",
            "3d3d73b16827535e7d0c9fdb92a2f163a05b14f4"
        ],
        [
            "Definition getN := getN.",
            "VernacDefinition",
            "75a904713d676db72ad14c337fb5e93fc04ede38"
        ],
        [
            "Definition getNK := getNK.",
            "VernacDefinition",
            "adf48dd4f15acdd51dd2b7fd768ddc0f509d7eb4"
        ],
        [
            "Definition GreeterProtocol := GreeterProt.",
            "VernacDefinition",
            "c4aa454c86b49dab8cc40f45e24a34e59a4cf965"
        ],
        [
            "Definition gsend := greeter_send_trans.",
            "VernacDefinition",
            "a33e0a05dad246100562fb65d84d5f2d1d22f3ba"
        ],
        [
            "Definition hello := hello.",
            "VernacDefinition",
            "7ee52affa6f32ff05fea9c9f7e73ac003ccc3011"
        ],
        [
            "Definition counter := counter.",
            "VernacDefinition",
            "af73e96a3eb587d541b8073c5f3d2e88cce663ce"
        ],
        [
            "Definition greet_safe_coh := greet_safe_coh.",
            "VernacDefinition",
            "1140e90fe3d1a473d6a18c67f5fae7d15351cac5"
        ],
        [
            "End Exports.",
            "VernacEndSegment",
            "71efedae7ccffd696e1ffe5d8ae6baa8a4484918"
        ],
        [
            "End Exports.",
            "VernacEndSegment",
            "71efedae7ccffd696e1ffe5d8ae6baa8a4484918"
        ],
        [
            "End GreeterProtocol.",
            "VernacEndSegment",
            "941433a26581394e98e4cec1c031dccd8b9d98b6"
        ],
        [
            "Export GreeterProtocol.Exports.",
            "VernacImport",
            "ca29f1a91748ca281a1bb2a7d8d8fef42301ea8b"
        ],
        [
            "Section GreeterPrograms.",
            "VernacBeginSection",
            "7bf2c0555b4f5a272b854b3f29d6a61249bba61a"
        ],
        [
            "Variable l : Label.",
            "VernacAssumption",
            "aca5957ed38b3e3b45d48e71df1841eb1fc9d5f0"
        ],
        [
            "Variable nodes : seq nid.",
            "VernacAssumption",
            "06deb13d0b8807e6630b83f9c2e1b758bfe2ae03"
        ],
        [
            "Definition gp := GreeterProtocol nodes l.",
            "VernacDefinition",
            "ea1fa32edf5a02fd1aa36332e7bd9c67ede51db7"
        ],
        [
            "Definition W : world := (l \\\\-> gp, Unit).",
            "VernacDefinition",
            "cff9d0e53aadfd630aaf503380cb70deed007a8f"
        ],
        [
            "Variable this : nid.",
            "VernacAssumption",
            "242c7869c0bef3fe166243583278f6bbaa63bbf4"
        ],
        [
            "Lemma grEq : (getProtocol W l) = gp.",
            "VernacStartTheoremProof",
            "cc26e66c8e39d6ddbf6b8011831a0a91dc7f0dcc"
        ],
        [
            "by rewrite /getProtocol findPt.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Program Definition greet_act n := @send_action_wrapper W gp this l grEq (gsend nodes) _ (n :: hello).",
            "VernacDefinition",
            "6919091c020f4a4fb1c6756c0ee4f438a8c92f92"
        ],
        [
            "Next Obligation.",
            "VernacExtend",
            "de5e6a0a7a163af0d8463969c3ff4241d7d5bba0"
        ],
        [
            "by rewrite InE.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Hypothesis P1 : this \\in nodes.",
            "VernacAssumption",
            "9ffe3295c443d67e96f5baeee530f7fc1ce278e1"
        ],
        [
            "Program Definition read_act := @skip_action_wrapper W this l gp grEq nat (fun s pf => getN pf P1).",
            "VernacDefinition",
            "e6b371d27bc4a3c9c49f4d568ed8cec979abff8b"
        ],
        [
            "Notation loc i := (getLocal this (getStatelet i l)).",
            "VernacSyntacticDefinition",
            "f0cf85fe189f7aa7ef3bfdbcbad8d28661d4ef23"
        ],
        [
            "Notation msgs i := (dsoup (getStatelet i l)).",
            "VernacSyntacticDefinition",
            "c1b486b3acf59f4cbe99f56371cc09c7c3c69b48"
        ],
        [
            "Definition greeter_spec to := {n : nat}, DHT [this, W] (fun i => loc i = counter :-> n /\\ to \\in nodes, fun r m => [/\\ loc m = counter :-> n.+1, head 0 r = n & exists z b, find z (msgs m) = Some (Msg (TMsg 0 (n :: hello)) this to b)]).",
            "VernacDefinition",
            "4391570cf5aa7034d7f8e8d4f796ff33f56d44a6"
        ],
        [
            "Program Definition greet to : greeter_spec to := Do (n <-- act read_act; act (greet_act n to)).",
            "VernacDefinition",
            "79f7a8a170588cde10fe978b0bf7dd2a5d8d5cf3"
        ],
        [
            "Next Obligation.",
            "VernacExtend",
            "de5e6a0a7a163af0d8463969c3ff4241d7d5bba0"
        ],
        [
            "apply ghC=>s1 n [Hloc] Hto C1.",
            "VernacExtend",
            "3c42b53d0efc26db114b00541ac5e7fcb29e6aeb"
        ],
        [
            "apply: step.",
            "VernacExtend",
            "4bd6fa79b17bcd2bfb7af091fb325367a20385d6"
        ],
        [
            "-",
            "VernacBullet",
            "581cab4bf49fa4b495e569bbda96fc8d28fddcc0"
        ],
        [
            "apply: act_rule.",
            "VernacExtend",
            "4bd6fa79b17bcd2bfb7af091fb325367a20385d6"
        ],
        [
            "move=> s2 R1.",
            "VernacExtend",
            "b1b2cb7a3a617cba67460b4eca1f04de3c1cc716"
        ],
        [
            "split; first by move: R1=> /rely_coh[]; rewrite /read_act/=/Actions.skip_safe.",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "move=> y s2' s3 [Sf1]/=.",
            "VernacExtend",
            "b1b2cb7a3a617cba67460b4eca1f04de3c1cc716"
        ],
        [
            "rewrite /Actions.skip_step => -[] C2 ? ? R2; subst s2'; subst.",
            "VernacExtend",
            "245820fcd6231d4373158585304fd7ffa6d8f656"
        ],
        [
            "apply: act_rule=>s4 R3.",
            "VernacExtend",
            "4bd6fa79b17bcd2bfb7af091fb325367a20385d6"
        ],
        [
            "split=>[|r s5 s6 [Sf2] St R4].",
            "VernacExtend",
            "3c42b53d0efc26db114b00541ac5e7fcb29e6aeb"
        ],
        [
            "-",
            "VernacBullet",
            "581cab4bf49fa4b495e569bbda96fc8d28fddcc0"
        ],
        [
            "split; case/rely_coh: R3=>C3 C4=>//.",
            "VernacExtend",
            "6bff1d22f26f73e2af6bbb2e9c65e0bfad7c6104"
        ],
        [
            "+",
            "VernacBullet",
            "3ddfc0515f916e562bacf863647e0107cb15aa13"
        ],
        [
            "split=>//; first by eauto.",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "by case: C4=>_ _ _ _/(_ l); rewrite grEq.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "+",
            "VernacBullet",
            "3ddfc0515f916e562bacf863647e0107cb15aa13"
        ],
        [
            "by apply/andP; split=>//; move: (cohD C4)=><-; rewrite domPt inE; apply/eqP.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "move=>???/=.",
            "VernacExtend",
            "b1b2cb7a3a617cba67460b4eca1f04de3c1cc716"
        ],
        [
            "move => F.",
            "VernacExtend",
            "b1b2cb7a3a617cba67460b4eca1f04de3c1cc716"
        ],
        [
            "apply sym_eq in F.",
            "VernacExtend",
            "76cf18d85a6c70aff426f8c1ee06ccb93e71c674"
        ],
        [
            "move: F.",
            "VernacExtend",
            "b1b2cb7a3a617cba67460b4eca1f04de3c1cc716"
        ],
        [
            "by move/find_some; rewrite /Actions.filter_hooks umfilt0 dom0.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "case: St=>Z1[h]/=[St]Z2; subst.",
            "VernacExtend",
            "fbd9f3d5cad9b2325035ce4f02e9c8b126f32568"
        ],
        [
            "rewrite /GreeterProtocol.greet_step/= Hto in St; case: St=>Z'; subst h.",
            "VernacExtend",
            "78c744ec069b8b3b107a19697c6d6511e1c4a3ab"
        ],
        [
            "erewrite !getNK in R4; first last.",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "-",
            "VernacBullet",
            "581cab4bf49fa4b495e569bbda96fc8d28fddcc0"
        ],
        [
            "by rewrite (rely_loc' l R3) (rely_loc' l R2) (rely_loc' l R1); exact: Hloc.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "-",
            "VernacBullet",
            "581cab4bf49fa4b495e569bbda96fc8d28fddcc0"
        ],
        [
            "by rewrite (rely_loc' l R1); exact: Hloc.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "case/rely_coh: (R3)=>C3 C4.",
            "VernacExtend",
            "e00fff71ff314c991514fc71c41a3556702e444a"
        ],
        [
            "erewrite getNK; last by rewrite (rely_loc' l R1); exact: Hloc.",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "rewrite (rely_loc' l R4); split=>//.",
            "VernacExtend",
            "80e7cce19c53eb5d5a21aafd83e552d37e23084a"
        ],
        [
            "-",
            "VernacBullet",
            "581cab4bf49fa4b495e569bbda96fc8d28fddcc0"
        ],
        [
            "rewrite /getLocal/getStatelet findU eqxx/= (cohS C4)/= findU eqxx/=.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "rewrite getsE /=; last by rewrite -(cohD C4) domPt inE; apply/eqP.",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "by rewrite (cohVl (coh_coh l C4)).",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "exists (fresh (msgs s4)).",
            "VernacExtend",
            "9bb37235af040f6c7163905a89bfb03802f161ff"
        ],
        [
            "case: (rely_send_other' R4 (m := fresh (msgs s4)) (l := l) (tm := {| tag := GreeterProtocol.greet_tag; tms_cont := n :: hello |}) (to := to) (b := true)); last by move=>b[->]/= _; exists b.",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "rewrite /getStatelet findU eqxx/= (cohS C4)/=.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "rewrite getsE /=; last by rewrite -(cohD C4) domPt inE; apply/eqP.",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "rewrite joinC findPtUn // joinC valid_fresh.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "by apply: (cohVs (coh_coh l C4)).",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Definition greeter_spec2 n to := DHT [this, W] (fun i => loc i = counter :-> n /\\ to \\in nodes, fun r m => loc m = counter :-> n.+2 /\\ head 0 r = n.+1).",
            "VernacDefinition",
            "e8357bac66e795057643fdaac07677eecd424298"
        ],
        [
            "Program Definition greet2 n to : greeter_spec2 n to := Do (r <-- greet to; greet to).",
            "VernacDefinition",
            "178d1ef6f6b5d1d5d4927bb50a2f0f9acf94580d"
        ],
        [
            "Next Obligation.",
            "VernacExtend",
            "de5e6a0a7a163af0d8463969c3ff4241d7d5bba0"
        ],
        [
            "move=>i/=[H1 H2].",
            "VernacExtend",
            "b1b2cb7a3a617cba67460b4eca1f04de3c1cc716"
        ],
        [
            "apply: step.",
            "VernacExtend",
            "4bd6fa79b17bcd2bfb7af091fb325367a20385d6"
        ],
        [
            "apply: (gh_ex (g := n)); apply: call_rule=>//.",
            "VernacExtend",
            "8d9dae45eeb3a769b8a865cef8ae476451f63802"
        ],
        [
            "move=>? j[Hcount Hhead _] Cj.",
            "VernacExtend",
            "b1b2cb7a3a617cba67460b4eca1f04de3c1cc716"
        ],
        [
            "apply: (gh_ex (g := n.+1)); apply: call_rule=>//.",
            "VernacExtend",
            "8d9dae45eeb3a769b8a865cef8ae476451f63802"
        ],
        [
            "by move=>r m[X1 X2 _].",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "End GreeterPrograms.",
            "VernacEndSegment",
            "c4b1d4b4960ce5514b4f41b19f1dc5a8ee8543e9"
        ],
        [
            "Section CombineGreeters.",
            "VernacBeginSection",
            "fce96e70e4a9bb21b6b05f122ab43b63b5e494c5"
        ],
        [
            "Variables (l1 l2 : Label) (nodes : seq nid) (this : nid).",
            "VernacAssumption",
            "128c7b5f25532acf5bb570430553511881fee557"
        ],
        [
            "Variable (lab_disj : l2 != l1).",
            "VernacAssumption",
            "104fb5add06c832d2119fb611085b8525ef4541c"
        ],
        [
            "Definition gp1 := GreeterProtocol nodes l1.",
            "VernacDefinition",
            "0921bce9b4ac5b05321cb6446460067b514ecf17"
        ],
        [
            "Definition gp2 := GreeterProtocol nodes l2.",
            "VernacDefinition",
            "ccd7ecd2c1c2248479b279b7314441d89a6214c6"
        ],
        [
            "Definition V := (W l1 nodes) \\+ (W l2 nodes).",
            "VernacDefinition",
            "25ad81d337e8fa63ab46347da037d5e414a18f97"
        ],
        [
            "Lemma validV : valid V.",
            "VernacStartTheoremProof",
            "a32fafea80458727c14a11387cf008ef3f91c9ef"
        ],
        [
            "rewrite /V; apply/andP=>/=.",
            "VernacExtend",
            "634a7639ed2fb7caf62757f84400927f5829b7d5"
        ],
        [
            "split; first by rewrite validPtUn/= validPt/= domPt inE/=.",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "by rewrite unitR valid_unit.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Notation loc i k := (getLocal this (getStatelet i k)).",
            "VernacSyntacticDefinition",
            "4d5597d88afc72f5fbe8da36c21e5003367571b3"
        ],
        [
            "Notation msgs i k := (dsoup (getStatelet i k)).",
            "VernacSyntacticDefinition",
            "146581dd45055fef0b3def07c024b69e729427a3"
        ],
        [
            "Hypothesis T : this \\in nodes.",
            "VernacAssumption",
            "9d2e2f05b322d65231ad5a950a8c8948499a733e"
        ],
        [
            "Definition greet_prog1 := greet2 l1 T.",
            "VernacDefinition",
            "ad4f683417c7c7862df834c5e382bcf540a950f4"
        ],
        [
            "Definition greet_prog2 := greet2 l2 T.",
            "VernacDefinition",
            "872b36619623a5f58049e22a4c3c37731bc11a7a"
        ],
        [
            "Definition greeter_spec3 n1 n2 to := DHT [this, V] (fun i => [/\\ loc i l1 = counter :-> n1, loc i l2 = counter :-> n2 & to \\in nodes], fun r m => [/\\ loc m l1 = counter :-> n1.+2, loc m l2 = counter :-> n2.+2 & r = n1 + n2 + 2]).",
            "VernacDefinition",
            "44e35835d3dd0ce4e46366071d32d283da896a90"
        ],
        [
            "Lemma hook_complete_unit (c : context) : hook_complete (c, Unit).",
            "VernacStartTheoremProof",
            "3bdc11405687fecf988d074b40ceae42ec7ec434"
        ],
        [
            "by move=>????; rewrite dom0.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma hooks_consistent_unit (c : context) : hooks_consistent c Unit.",
            "VernacStartTheoremProof",
            "ef7c100d43546bfe119f6ecede66228308a7bd39"
        ],
        [
            "by move=>????; rewrite dom0.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Program Definition greet3 n1 n2 to : greeter_spec3 n1 n2 to := Do (r1 <-- iinject (greet_prog1 n1 to); r2 <-- iinject (greet_prog2 n2 to); ret _ _ (head 0 r1 + head 0 r2)).",
            "VernacDefinition",
            "b36de7bda567ab3922e13df4dc794ab0451d7b74"
        ],
        [
            "Next Obligation.",
            "VernacExtend",
            "de5e6a0a7a163af0d8463969c3ff4241d7d5bba0"
        ],
        [
            "exact Unit.",
            "VernacExtend",
            "6d92aa3c9473c9736a81ace8619b4e6e6ca4bd11"
        ],
        [
            "Defined.",
            "VernacEndProof",
            "88c0be54a50df4bb90276c075406fe442428eb9c"
        ],
        [
            "Next Obligation.",
            "VernacExtend",
            "de5e6a0a7a163af0d8463969c3ff4241d7d5bba0"
        ],
        [
            "rewrite -(unitR V)/V.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "have V: valid (W l1 nodes \\+ W l2 nodes \\+ Unit) by rewrite unitR validV.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "apply: (injectL V); do?[apply: hook_complete_unit | apply: hooks_consistent_unit].",
            "VernacExtend",
            "7873bb9dcce1a3f78e6f569440b5177a8dfd74b6"
        ],
        [
            "by move=>??????; rewrite dom0.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Next Obligation.",
            "VernacExtend",
            "de5e6a0a7a163af0d8463969c3ff4241d7d5bba0"
        ],
        [
            "exact Unit.",
            "VernacExtend",
            "6d92aa3c9473c9736a81ace8619b4e6e6ca4bd11"
        ],
        [
            "Defined.",
            "VernacEndProof",
            "88c0be54a50df4bb90276c075406fe442428eb9c"
        ],
        [
            "Next Obligation.",
            "VernacExtend",
            "de5e6a0a7a163af0d8463969c3ff4241d7d5bba0"
        ],
        [
            "rewrite -(unitR V)/V.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "have V: valid (W l1 nodes \\+ W l2 nodes \\+ Unit) by rewrite unitR validV.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "apply: (injectR V); do?[apply: hook_complete_unit | apply: hooks_consistent_unit].",
            "VernacExtend",
            "7873bb9dcce1a3f78e6f569440b5177a8dfd74b6"
        ],
        [
            "by move=>??????; rewrite dom0.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Defined.",
            "VernacEndProof",
            "88c0be54a50df4bb90276c075406fe442428eb9c"
        ],
        [
            "Lemma hcomp l : hook_complete (W l nodes).",
            "VernacStartTheoremProof",
            "9c5e06cb2da2e57720b25b5fc36e5c33290f6c2f"
        ],
        [
            "by move=>????; rewrite dom0.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Next Obligation.",
            "VernacExtend",
            "de5e6a0a7a163af0d8463969c3ff4241d7d5bba0"
        ],
        [
            "move=>i/=[H1]H2 N.",
            "VernacExtend",
            "b1b2cb7a3a617cba67460b4eca1f04de3c1cc716"
        ],
        [
            "apply: vrf_coh=>C.",
            "VernacExtend",
            "4bd6fa79b17bcd2bfb7af091fb325367a20385d6"
        ],
        [
            "apply: step.",
            "VernacExtend",
            "4bd6fa79b17bcd2bfb7af091fb325367a20385d6"
        ],
        [
            "move: (coh_split C (@hcomp l1) (@hcomp l2))=>[i1[j1]][C1 C2 Z]; subst i.",
            "VernacExtend",
            "b3338244a5d55d05b5d7f197b6cb42c83f41df88"
        ],
        [
            "apply: inject_rule=>//.",
            "VernacExtend",
            "4bd6fa79b17bcd2bfb7af091fb325367a20385d6"
        ],
        [
            "have E1 : loc (i1 \\+ j1) l1 = loc i1 l1 by rewrite (locProjL C _ C1)// domPt inE/=.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "rewrite E1 in H1; apply: call_rule=>// r1 m1 [Q1 Z1] C1' j' C' R1.",
            "VernacExtend",
            "634a7639ed2fb7caf62757f84400927f5829b7d5"
        ],
        [
            "have E2 : loc (i1 \\+ j1) l2 = loc j1 l2.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "by rewrite (locProjR C _ C2)// domPt inE/=.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "rewrite E2 -(rely_loc' l2 R1) in H2.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "apply: step.",
            "VernacExtend",
            "4bd6fa79b17bcd2bfb7af091fb325367a20385d6"
        ],
        [
            "rewrite joinC; apply: inject_rule.",
            "VernacExtend",
            "634a7639ed2fb7caf62757f84400927f5829b7d5"
        ],
        [
            "-",
            "VernacBullet",
            "581cab4bf49fa4b495e569bbda96fc8d28fddcc0"
        ],
        [
            "case: (rely_coh R1)=>/= _.",
            "VernacExtend",
            "e00fff71ff314c991514fc71c41a3556702e444a"
        ],
        [
            "by rewrite injExtL//(cohW C).",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "apply: call_rule=>//r2 m2 [E3]Z2 C3 j'' C3' R2.",
            "VernacExtend",
            "4bd6fa79b17bcd2bfb7af091fb325367a20385d6"
        ],
        [
            "apply: ret_rule=>m3 R3[G1]G2 G3; split; last first.",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "-",
            "VernacBullet",
            "581cab4bf49fa4b495e569bbda96fc8d28fddcc0"
        ],
        [
            "by rewrite Z1 Z2 -[_.+1]addn1 -[n2.+1]addn1 addnAC !addnA !addn1 -addn2.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "-",
            "VernacBullet",
            "581cab4bf49fa4b495e569bbda96fc8d28fddcc0"
        ],
        [
            "rewrite (rely_loc' l2 R3) joinC; rewrite joinC in C3'.",
            "VernacExtend",
            "2194fcb4d6d52cbae24a29f7ff14a3997f1912fd"
        ],
        [
            "by rewrite (locProjR C3' _ C3)// domPt inE/=.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "rewrite (rely_loc' l1 R3).",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "move/rely_coh: (R2)=>[]; rewrite injExtR ?(cohW C)// =>_ C5.",
            "VernacExtend",
            "8261237f0cda1915a4077c28869831c5329103ce"
        ],
        [
            "rewrite joinC in C3' *.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "rewrite (locProjL C3' _ C5)//?/ddom ?domPt ?inE//=.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "by rewrite (rely_loc' l1 R2).",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "End CombineGreeters.",
            "VernacEndSegment",
            "bae8a0e771780d015f263c7076f0f7e84b540d44"
        ]
    ],
    "proofs": [
        {
            "name": "l1",
            "line_nb": 20,
            "steps": [
                {
                    "command": [
                        "by case.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "l2",
            "line_nb": 23,
            "steps": [
                {
                    "command": [
                        "by case; case.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "l3",
            "line_nb": 26,
            "steps": [
                {
                    "command": [
                        "by case.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "lcoh",
            "line_nb": 37,
            "steps": [
                {
                    "command": [
                        "by move=> H; case: C => _ _ _/(_ n H).",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "cohN",
            "line_nb": 40,
            "steps": [
                {
                    "command": [
                        "by move=>H; case: (lcoh H)=>m->; rewrite findPt /=; case=><-.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "getNK",
            "line_nb": 44,
            "steps": [
                {
                    "command": [
                        "move=>E; rewrite /getN; move: (cohN)=>H.",
                        "VernacExtend",
                        "40075a671b142e70c4190413219df8981418e910"
                    ]
                },
                {
                    "command": [
                        "by move: (H n)=>{H}; rewrite E=>H/=; apply: eqc.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "this_in_pf",
            "line_nb": 49,
            "steps": [
                {
                    "command": [
                        "by case.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "greet_safe_coh",
            "line_nb": 52,
            "steps": [
                {
                    "command": [
                        "by case.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "greet_safe_in",
            "line_nb": 56,
            "steps": [
                {
                    "command": [
                        "by case.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "greet_safe_def",
            "line_nb": 59,
            "steps": [
                {
                    "command": [
                        "split=>[H|].",
                        "VernacExtend",
                        "3c42b53d0efc26db114b00541ac5e7fcb29e6aeb"
                    ]
                },
                {
                    "command": [
                        "-",
                        "VernacBullet",
                        "581cab4bf49fa4b495e569bbda96fc8d28fddcc0"
                    ]
                },
                {
                    "command": [
                        "exists (counter :-> (getN (greet_safe_coh H) (this_in_pf H)).+1), H.",
                        "VernacExtend",
                        "bc32439978e0df5e0f49082eb265266323b2f914"
                    ]
                },
                {
                    "command": [
                        "rewrite/greet_step; case: (H)=>H1 H2 H3 H4.",
                        "VernacExtend",
                        "712d339e99ee17eb7d5033e19ac614eb3ca6b532"
                    ]
                },
                {
                    "command": [
                        "move: (And4 H1 H2 H3 H4)=>C; rewrite H2; case: H3=>m H3.",
                        "VernacExtend",
                        "d7214ac8fd48f4d1cd143edd9d16f6d28386a302"
                    ]
                },
                {
                    "command": [
                        "by move/eqP: H3=>H3; subst msg=>/=.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "by case=>h[pf]; rewrite/greet_step; case:ifP=>///andP[/eqP->H]_; split.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "grEq",
            "line_nb": 115,
            "steps": [
                {
                    "command": [
                        "by rewrite /getProtocol findPt.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "greet_act_obligation_1",
            "line_nb": 119,
            "steps": [
                {
                    "command": [
                        "by rewrite InE.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "validV",
            "line_nb": 189,
            "steps": [
                {
                    "command": [
                        "rewrite /V; apply/andP=>/=.",
                        "VernacExtend",
                        "634a7639ed2fb7caf62757f84400927f5829b7d5"
                    ]
                },
                {
                    "command": [
                        "split; first by rewrite validPtUn/= validPt/= domPt inE/=.",
                        "VernacExtend",
                        "3763a4b8db689af316a7372b722bb29806ab4fb6"
                    ]
                },
                {
                    "command": [
                        "by rewrite unitR valid_unit.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "hook_complete_unit",
            "line_nb": 200,
            "steps": [
                {
                    "command": [
                        "by move=>????; rewrite dom0.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "hooks_consistent_unit",
            "line_nb": 203,
            "steps": [
                {
                    "command": [
                        "by move=>????; rewrite dom0.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "greet3_obligation_1",
            "line_nb": 207,
            "steps": [
                {
                    "command": [
                        "exact Unit.",
                        "VernacExtend",
                        "6d92aa3c9473c9736a81ace8619b4e6e6ca4bd11"
                    ]
                },
                {
                    "command": [
                        "Defined.",
                        "VernacEndProof",
                        "88c0be54a50df4bb90276c075406fe442428eb9c"
                    ]
                }
            ]
        },
        {
            "name": "greet3_obligation_3",
            "line_nb": 216,
            "steps": [
                {
                    "command": [
                        "exact Unit.",
                        "VernacExtend",
                        "6d92aa3c9473c9736a81ace8619b4e6e6ca4bd11"
                    ]
                },
                {
                    "command": [
                        "Defined.",
                        "VernacEndProof",
                        "88c0be54a50df4bb90276c075406fe442428eb9c"
                    ]
                }
            ]
        },
        {
            "name": "hcomp",
            "line_nb": 225,
            "steps": [
                {
                    "command": [
                        "by move=>????; rewrite dom0.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        }
    ]
}