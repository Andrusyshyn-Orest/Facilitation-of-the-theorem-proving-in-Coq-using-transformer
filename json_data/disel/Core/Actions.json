{
    "filename": "Core/Actions.v",
    "coq_project": "disel",
    "vernac_cmds": [
        [
            "From mathcomp.ssreflect Require Import ssreflect ssrbool ssrnat eqtype ssrfun seq.",
            "VernacRequire",
            "037d2ffdc90053d89d1b918c36daaeab721d2d83"
        ],
        [
            "From mathcomp Require Import path.",
            "VernacRequire",
            "7c70f445c754a2a74114416d587d02e512c693e2"
        ],
        [
            "Require Import Eqdep.",
            "VernacRequire",
            "a499933d0898d4c0e235af789d9252f633426d20"
        ],
        [
            "Require Import Relation_Operators.",
            "VernacRequire",
            "5c09f52be79db9d019c350cc3153659920102fbb"
        ],
        [
            "From fcsl Require Import axioms pred prelude ordtype finmap pcm unionmap heap.",
            "VernacRequire",
            "576c96e5dbde92d8f1878b78d95e36aa980a0403"
        ],
        [
            "From DiSeL Require Import Freshness State EqTypeX Protocols Worlds NetworkSem.",
            "VernacRequire",
            "a65744ec81ad82a08754e70e5c28238da257f65a"
        ],
        [
            "Require Classical_Prop.",
            "VernacRequire",
            "7aad82c5df4a28678cf47214081206bf1e2260a1"
        ],
        [
            "Set Implicit Arguments.",
            "VernacSetOption",
            "9e84ff8896f028601d8aded48c1d4aebe60aa584"
        ],
        [
            "Unset Strict Implicit.",
            "VernacUnsetOption",
            "2842adaf6959318f2042805935c46f513bdc0348"
        ],
        [
            "Unset Printing Implicit Defensive.",
            "VernacUnsetOption",
            "444e5f0be4b25d9b1fd556943a447ec10046d151"
        ],
        [
            "Module Actions.",
            "VernacDefineModule",
            "e3bf081a9dc25bd73faa208dc47fadbaf2c0e635"
        ],
        [
            "Section Actions.",
            "VernacBeginSection",
            "995508e68254f74ded203af626da295f5d39b879"
        ],
        [
            "Variable W : world.",
            "VernacAssumption",
            "92d3732f8ee464718a9d77a50e1d3ac970c2e983"
        ],
        [
            "Notation getS s l := (getStatelet s l).",
            "VernacSyntacticDefinition",
            "402b1d83add6a3712e80b55f494bec29c927673f"
        ],
        [
            "Structure action (V : Type) (this : nid) := Action { a_safe : state -> Prop; a_safe_coh : forall s, a_safe s -> s \\In Coh W; a_step : forall s1, (a_safe s1) -> state -> V -> Prop; step_total : forall s (pf : a_safe s), exists s' r, a_step pf s' r; step_sem : forall s1 (pf : a_safe s1) s2 r, a_step pf s2 r -> network_step W this s1 s2 }.",
            "VernacInductive",
            "d7982138258a6c65b4a2203324d9df4a59bbcdae"
        ],
        [
            "Lemma step_other this V (a : action V this) l s1 s2 r n (pf : a_safe a s1): this != n -> a_step pf s2 r -> getLocal n (getS s1 l) = getLocal n (getS s2 l).",
            "VernacStartTheoremProof",
            "5e6c61622ecadc070abdce98d50c3ad007e2df18"
        ],
        [
            "move=>N S2; move: (step_sem S2)=>H.",
            "VernacExtend",
            "8b784377bdc4d565ff66d4cf36a6041e9354c156"
        ],
        [
            "by rewrite eq_sym in N; rewrite /getLocal !(step_is_local l H N).",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "End Actions.",
            "VernacEndSegment",
            "a858e19b341e97b9e1a23a70fbe65b26df9b1486"
        ],
        [
            "Section SkipActionWrapper.",
            "VernacBeginSection",
            "93fdcc31c71a45edff92a1b536ae057aa2b5d7d9"
        ],
        [
            "Variable W : world.",
            "VernacAssumption",
            "92d3732f8ee464718a9d77a50e1d3ac970c2e983"
        ],
        [
            "Notation getP l := (getProtocol W l).",
            "VernacSyntacticDefinition",
            "45d915a08543273ff501a7b50fdbc0b4bd9066e5"
        ],
        [
            "Notation getS s l := (getStatelet s l).",
            "VernacSyntacticDefinition",
            "402b1d83add6a3712e80b55f494bec29c927673f"
        ],
        [
            "Variable this : nid.",
            "VernacAssumption",
            "242c7869c0bef3fe166243583278f6bbaa63bbf4"
        ],
        [
            "Variable l : Label.",
            "VernacAssumption",
            "aca5957ed38b3e3b45d48e71df1841eb1fc9d5f0"
        ],
        [
            "Variable p : protocol.",
            "VernacAssumption",
            "72bf1c5c330624859b62fed839dbdbb575f4ae29"
        ],
        [
            "Variable pf : getP l = p.",
            "VernacAssumption",
            "edb6afd969a7c12400229c188dff027327d2ec96"
        ],
        [
            "Definition skip_safe s := Coh W s.",
            "VernacDefinition",
            "3d4494749749f56b98ea7f32e85eff71ee0ff74c"
        ],
        [
            "Variable V : Type.",
            "VernacAssumption",
            "7916504f668edb1889a5aca5d730ced22b8d98ed"
        ],
        [
            "Variable f : forall s, coh p (getS s l) -> V.",
            "VernacAssumption",
            "0c85d43686fea927eee082a9c5c9f0bde4176074"
        ],
        [
            "Lemma safe_local s : skip_safe s -> coh p (getS s l).",
            "VernacStartTheoremProof",
            "d9944e73e9f5524388ac447d1334ae5b02f7b477"
        ],
        [
            "by rewrite -pf=>/(coh_s l).",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Definition skip_step s1 (pf : skip_safe s1) (s2 : state) r := [/\\ s1 \\In Coh W, s1 = s2 & r = f (safe_local pf)].",
            "VernacDefinition",
            "0b014041ef48658224488ebcd903bac35564454e"
        ],
        [
            "Lemma skip_step_total s (S : skip_safe s) : exists s' r, skip_step S s' r.",
            "VernacStartTheoremProof",
            "3efa40ca5be2a5d7f123ac0fa8c3d759ef6d3fa7"
        ],
        [
            "by exists s, (f (safe_local S)).",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma skip_safe_coh s1 : skip_safe s1 -> Coh W s1.",
            "VernacStartTheoremProof",
            "edb160bd449fddaa2e22c7dc2e401ccbb8e7d4d9"
        ],
        [
            "by [].",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma skip_step_sem s1 (S : skip_safe s1) s2 r: skip_step S s2 r -> network_step W this s1 s2.",
            "VernacStartTheoremProof",
            "d5ceb71d20f60fbe8b78a21ad753aa5fe7383837"
        ],
        [
            "by move=>H; apply: Idle; case: H.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Definition skip_action_wrapper := Action skip_safe_coh skip_step_total skip_step_sem.",
            "VernacDefinition",
            "a69249faa6149853bea75ab1bf4aa302bd8ab138"
        ],
        [
            "End SkipActionWrapper.",
            "VernacEndSegment",
            "3892061117af9841042c505a0ad865e9daba0284"
        ],
        [
            "Section TryReceiveActionWrapper.",
            "VernacBeginSection",
            "154cc24d2e180eba96264fb8933204bd1e35e7e3"
        ],
        [
            "Variable W : world.",
            "VernacAssumption",
            "92d3732f8ee464718a9d77a50e1d3ac970c2e983"
        ],
        [
            "Notation getP l := (getProtocol W l).",
            "VernacSyntacticDefinition",
            "45d915a08543273ff501a7b50fdbc0b4bd9066e5"
        ],
        [
            "Notation getS s l := (getStatelet s l).",
            "VernacSyntacticDefinition",
            "402b1d83add6a3712e80b55f494bec29c927673f"
        ],
        [
            "Variable this : nid.",
            "VernacAssumption",
            "242c7869c0bef3fe166243583278f6bbaa63bbf4"
        ],
        [
            "Variable filter : Label -> nid -> nat -> pred (seq nat).",
            "VernacAssumption",
            "a9f08a9953fbfab161d541a272f6f7f84ac6b58d"
        ],
        [
            "Variable f_valid_label : forall l n t m , filter l n t m -> l \\in dom (getc W).",
            "VernacAssumption",
            "117ab9b5ad0e5282349532f0064f7de9ca7963f5"
        ],
        [
            "Definition tryrecv_act_safe (s : state) := s \\In Coh W.",
            "VernacDefinition",
            "80f59668b50433383edc0b570bf9147f4011188d"
        ],
        [
            "Lemma tryrecv_act_safe_coh s : tryrecv_act_safe s -> Coh W s.",
            "VernacStartTheoremProof",
            "f92876a099ec512a8ea1571a5396c76ce05bc81d"
        ],
        [
            "by [].",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Definition tryrecv_act_step s1 s2 (r : option (nid * nat * seq nat)) := exists (pf : s1 \\In Coh W), ([/\\ (forall l m tms from rt b, this \\in nodes (getP l) (getS s1 l) -> Some (Msg tms from this b) = find m (dsoup (getS s1 l)) -> rt \\In (rcv_trans (getP l)) -> tag tms = (t_rcv rt) -> msg_wf rt (coh_s l pf) this from tms -> filter l from (t_rcv rt) (tms_cont tms) -> ~~b), r = None & s2 = s1] \\/ exists l m tms from rt (pf' : this \\in nodes (getP l) (getS s1 l)), let: d := getS s1 l in [/\\ [/\\ Some (Msg tms from this true) = find m (dsoup (getS s1 l)), rt \\In (rcv_trans (getP l)), tag tms = (t_rcv rt), msg_wf rt (coh_s l pf) this from tms & filter l from (t_rcv rt) (tms_cont tms)], let loc' := receive_step rt from tms (coh_s l pf) pf' in let: f' := upd this loc' (dstate d) in let: s' := consume_msg (dsoup d) m in s2 = upd l (DStatelet f' s') s1 & r = Some (from, tag tms, tms_cont tms)]).",
            "VernacDefinition",
            "cb86e3d4baf00f5072785ccad69a6a0f71fe69e5"
        ],
        [
            "Import Classical_Prop.",
            "VernacImport",
            "afd3d5a19264ac297d7d3a5bbd20a8fcc7ac3925"
        ],
        [
            "Lemma tryrecv_act_step_total s: tryrecv_act_safe s -> exists s' r , tryrecv_act_step s s' r.",
            "VernacStartTheoremProof",
            "9527e2eeabcd4511b873120a673dd8a8a2a89048"
        ],
        [
            "move=>C; rewrite /tryrecv_act_step.",
            "VernacExtend",
            "057edeb0967475c7ea5e8c98c449ddc5613eddc1"
        ],
        [
            "case: (classic (exists l m tms from rt (pf' : this \\in nodes (getP l) (getS s l)), let: d := getS s l in [/\\ Some (Msg tms from this true) = find m (dsoup (getS s l)), rt \\In (rcv_trans (getP l)), tag tms = (t_rcv rt), msg_wf rt (coh_s l C) this from tms & filter l from (t_rcv rt) (tms_cont tms)])); last first.",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "-",
            "VernacBullet",
            "581cab4bf49fa4b495e569bbda96fc8d28fddcc0"
        ],
        [
            "move=>H; exists s, None, C; left; split=>//l m tms from rt b T E1 E2 E3 E M.",
            "VernacExtend",
            "8f9bf5b52fcc86aed61225b48f57ed2a793bb381"
        ],
        [
            "apply/negP=>Z; rewrite Z in E1; clear Z b; apply: H.",
            "VernacExtend",
            "9335ee82fd4a1f2089654a06cd1757637b8508f1"
        ],
        [
            "by exists l, m, tms, from, rt.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "case=>[l][m][tms][from][rt][T][E1 E2 E3 E M].",
            "VernacExtend",
            "e00fff71ff314c991514fc71c41a3556702e444a"
        ],
        [
            "exists (let: d := getS s l in let loc' := receive_step rt from tms (coh_s l C) T in let: f' := upd this loc' (dstate d) in let: s' := consume_msg (dsoup d) m in upd l (DStatelet f' s') s), (Some (from, tag tms, tms_cont tms)).",
            "VernacExtend",
            "8dc2ace808964b4092c33c7d71cefc0003eb9be5"
        ],
        [
            "by exists C; right; exists l, m, tms, from, rt, T.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma tryrecv_act_step_safe s1 s2 r: tryrecv_act_step s1 s2 r -> tryrecv_act_safe s1.",
            "VernacStartTheoremProof",
            "b88e1111403a5338338eda619f7ef0a8126a215a"
        ],
        [
            "by case.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma tryrecv_act_step_sem s1 (S : tryrecv_act_safe s1) s2 r: tryrecv_act_step s1 s2 r -> network_step W this s1 s2.",
            "VernacStartTheoremProof",
            "b3201a236be2e546260fcb5dd7fd8aad275430e9"
        ],
        [
            "case=>C; rewrite /tryrecv_act_step; case; first by case=>_ _ ->; apply: Idle.",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "case=>[l][m][tms][from][rt][Y][[E R E1 M]]F/=Z _.",
            "VernacExtend",
            "e00fff71ff314c991514fc71c41a3556702e444a"
        ],
        [
            "have X1: l \\in dom s1 by move: (f_valid_label F); rewrite (cohD C).",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "by apply: (ReceiveMsg R X1 E1 (i := m) (from := from)).",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Definition tryrecv_action_wrapper := Action tryrecv_act_safe_coh tryrecv_act_step_total tryrecv_act_step_sem.",
            "VernacDefinition",
            "bcd105bf18c9b239cba48625f38174aa964d172e"
        ],
        [
            "End TryReceiveActionWrapper.",
            "VernacEndSegment",
            "afde3ae3b3cf8312da61d263fde5da15eb9be189"
        ],
        [
            "Section SendActionWrapper.",
            "VernacBeginSection",
            "48d73b107b6dbbc3f6c738fd04e23ddebb37b295"
        ],
        [
            "Variable W : world.",
            "VernacAssumption",
            "92d3732f8ee464718a9d77a50e1d3ac970c2e983"
        ],
        [
            "Variable p : protocol.",
            "VernacAssumption",
            "72bf1c5c330624859b62fed839dbdbb575f4ae29"
        ],
        [
            "Notation getP l := (getProtocol W l).",
            "VernacSyntacticDefinition",
            "45d915a08543273ff501a7b50fdbc0b4bd9066e5"
        ],
        [
            "Notation getS s l := (getStatelet s l).",
            "VernacSyntacticDefinition",
            "402b1d83add6a3712e80b55f494bec29c927673f"
        ],
        [
            "Variable this : nid.",
            "VernacAssumption",
            "242c7869c0bef3fe166243583278f6bbaa63bbf4"
        ],
        [
            "Variable l : Label.",
            "VernacAssumption",
            "aca5957ed38b3e3b45d48e71df1841eb1fc9d5f0"
        ],
        [
            "Variable pf : (getProtocol W l) = p.",
            "VernacAssumption",
            "4a744400c7608d6fc0a77604eb7b5cc81bf060e9"
        ],
        [
            "Variable st: send_trans (coh p).",
            "VernacAssumption",
            "f387abafba4806d4f32831d86f0387db23689c90"
        ],
        [
            "Variable pf' : st \\In (snd_trans p).",
            "VernacAssumption",
            "36a5dee9f8da9a0f5cca1a9efc8e4a63bdf808c5"
        ],
        [
            "Variable msg : seq nat.",
            "VernacAssumption",
            "832b16ebd876449a3e33b8856a6cbe383ba782dd"
        ],
        [
            "Variable to : nid.",
            "VernacAssumption",
            "672714562d5697e8cf14da2ca9683d06de7abfca"
        ],
        [
            "Definition can_send (s : state) := (l \\in dom s) && (this \\in nodes p (getS s l)).",
            "VernacDefinition",
            "3ce72448582e3ca3b61a81cd83c669c0926ca7d4"
        ],
        [
            "Definition filter_hooks (h : hooks) := um_filter (fun e => e.2 == (l, t_snd st)) h.",
            "VernacDefinition",
            "b0283436c045546f192643daa1d31a3057633db3"
        ],
        [
            "Definition send_act_safe s := [/\\ Coh W s, send_safe st this to (getS s l) msg, can_send s & all_hooks_fire (filter_hooks (geth W)) l (t_snd st) s this msg to].",
            "VernacDefinition",
            "f645d285acd919870a693ace4bda908f30c77c54"
        ],
        [
            "Lemma send_act_safe_coh s : send_act_safe s -> Coh W s.",
            "VernacStartTheoremProof",
            "e8ac1b564cddd747d4ddd9a342b304ba017fa4dc"
        ],
        [
            "by case.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma safe_safe s : send_act_safe s -> send_safe st this to (getS s l) msg.",
            "VernacStartTheoremProof",
            "3fc0b482e25a5a5408fbea7fd44fdf62a5494c97"
        ],
        [
            "by case.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Definition send_act_step s1 (S: send_act_safe s1) s2 r := r = msg /\\ exists b, Some b = send_step (safe_safe S) /\\ let: d := getS s1 l in let: f' := upd this b (dstate d) in let: s' := (post_msg (dsoup d) (Msg (TMsg (t_snd st) msg) this to true)).1 in s2 = upd l (DStatelet f' s') s1.",
            "VernacDefinition",
            "9293a2bbd4bdf4d6db6e79e93013bc37c8a85aad"
        ],
        [
            "Lemma send_act_step_total s (S: send_act_safe s): exists s' r , send_act_step S s' r.",
            "VernacStartTheoremProof",
            "8dc1abbc5606aa9c24316a411bcc4ba37fc1b43c"
        ],
        [
            "rewrite /send_act_step/send_act_safe.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "case: S=>C S J K.",
            "VernacExtend",
            "e00fff71ff314c991514fc71c41a3556702e444a"
        ],
        [
            "move/(s_safe_def): (S)=>[b][S']E.",
            "VernacExtend",
            "b1b2cb7a3a617cba67460b4eca1f04de3c1cc716"
        ],
        [
            "set s2 := let: d := getS s l in let: f' := upd this b (dstate d) in let: s' := (post_msg (dsoup d) (Msg (TMsg (t_snd st) msg) this to true)).1 in upd l (DStatelet f' s') s.",
            "VernacExtend",
            "69a61e99b234580f7b41fa5b9655c87ba9a76f70"
        ],
        [
            "exists s2, msg; split=>//; exists b; split=>//.",
            "VernacExtend",
            "cb406a1a091ac554ff27a772a7492efb98cde55e"
        ],
        [
            "move: (safe_safe (And4 C S J K))=> S''.",
            "VernacExtend",
            "b1b2cb7a3a617cba67460b4eca1f04de3c1cc716"
        ],
        [
            "by rewrite -E (pf_irr S'' S') .",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma send_act_step_sem s1 (S : send_act_safe s1) s2 r: send_act_step S s2 r -> network_step W this s1 s2.",
            "VernacStartTheoremProof",
            "0e50ff62fa497fe8d4cd47d50e1ef53f8f133831"
        ],
        [
            "case=>_[b][E Z]; case: (S)=>C S' /andP[D1] D2 K; subst s2=>/=.",
            "VernacExtend",
            "6042dc43156302d23b188b05386d953cdb248e4f"
        ],
        [
            "rewrite (pf_irr (safe_safe S) S') in E; clear S.",
            "VernacExtend",
            "d593a2d83ecf83b53a866abacc0814f8595c7840"
        ],
        [
            "rewrite /all_hooks_fire/filter_hooks in K.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "move: st S' E K pf'; clear pf' st; subst p=>st S' E K' pf'.",
            "VernacExtend",
            "ba038b7efacb833eb8d2cb78d0e091bcf34e7b3e"
        ],
        [
            "apply: (@SendMsg W this s1 _ l st pf' to msg)=>////.",
            "VernacExtend",
            "4bd6fa79b17bcd2bfb7af091fb325367a20385d6"
        ],
        [
            "move=>z lc hk E'; apply: (K' z); rewrite E'.",
            "VernacExtend",
            "f7feb259d6220ca40e8a86b90bd06f137aa140ac"
        ],
        [
            "by rewrite find_umfilt/= eqxx.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Definition send_action_wrapper := Action send_act_safe_coh send_act_step_total send_act_step_sem.",
            "VernacDefinition",
            "f9b25977db7080068931888cbb23fca393066a39"
        ],
        [
            "End SendActionWrapper.",
            "VernacEndSegment",
            "32bf8e97b9f73039953c370afa0683b5c744bba2"
        ],
        [
            "End Actions.",
            "VernacEndSegment",
            "a858e19b341e97b9e1a23a70fbe65b26df9b1486"
        ],
        [
            "Module ActionExports.",
            "VernacDefineModule",
            "5eccad0b4f00f5c60978f79f29170a5d31f4a0cd"
        ],
        [
            "Definition action := Actions.action.",
            "VernacDefinition",
            "aaf6d5fecc0cf03d1de4c72e669bbd97c04abfb7"
        ],
        [
            "Definition a_safe := Actions.a_safe.",
            "VernacDefinition",
            "6573f02814f1fbf1cba91f7b1e7591fc9cc6c557"
        ],
        [
            "Definition a_step := Actions.a_step.",
            "VernacDefinition",
            "068bec0836166a062f0c252135b05320c4e14c3b"
        ],
        [
            "Definition a_safe_coh := Actions.a_safe_coh.",
            "VernacDefinition",
            "6f102701ee586f68312094f82ac601c332543138"
        ],
        [
            "Definition a_step_total := Actions.step_total.",
            "VernacDefinition",
            "0ec99260723c30a13860b84a2c108d6eb3c34a1f"
        ],
        [
            "Definition a_step_sem := Actions.step_sem.",
            "VernacDefinition",
            "0ba71ae1ffb96ca8e49139e3e61141ea7ba3a54f"
        ],
        [
            "Definition a_step_other := Actions.step_other.",
            "VernacDefinition",
            "e294daec46907cb986466a185c1733189a6cf748"
        ],
        [
            "Definition skip_action_wrapper := Actions.skip_action_wrapper.",
            "VernacDefinition",
            "af7802cbab1e687761eb8236d8e6f4c22d43a3fe"
        ],
        [
            "Definition send_action_wrapper := Actions.send_action_wrapper.",
            "VernacDefinition",
            "2b4da9c14b14ccc37a9d71a7d098197988c2f8d8"
        ],
        [
            "Definition tryrecv_action_wrapper := Actions.tryrecv_action_wrapper.",
            "VernacDefinition",
            "6eec28ae9846d6fe308d392f0fafca61a5a7b095"
        ],
        [
            "End ActionExports.",
            "VernacEndSegment",
            "13013a6043745f2a063de5d28e70925be5d4de76"
        ],
        [
            "Export ActionExports.",
            "VernacImport",
            "1aea45cbab96813a2628da3da7116edcc5431873"
        ]
    ],
    "proofs": [
        {
            "name": "step_other",
            "line_nb": 15,
            "steps": [
                {
                    "command": [
                        "move=>N S2; move: (step_sem S2)=>H.",
                        "VernacExtend",
                        "8b784377bdc4d565ff66d4cf36a6041e9354c156"
                    ]
                },
                {
                    "command": [
                        "by rewrite eq_sym in N; rewrite /getLocal !(step_is_local l H N).",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "safe_local",
            "line_nb": 31,
            "steps": [
                {
                    "command": [
                        "by rewrite -pf=>/(coh_s l).",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "skip_step_total",
            "line_nb": 35,
            "steps": [
                {
                    "command": [
                        "by exists s, (f (safe_local S)).",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "skip_safe_coh",
            "line_nb": 38,
            "steps": [
                {
                    "command": [
                        "by [].",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "skip_step_sem",
            "line_nb": 41,
            "steps": [
                {
                    "command": [
                        "by move=>H; apply: Idle; case: H.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "tryrecv_act_safe_coh",
            "line_nb": 54,
            "steps": [
                {
                    "command": [
                        "by [].",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "tryrecv_act_step_total",
            "line_nb": 59,
            "steps": [
                {
                    "command": [
                        "move=>C; rewrite /tryrecv_act_step.",
                        "VernacExtend",
                        "057edeb0967475c7ea5e8c98c449ddc5613eddc1"
                    ]
                },
                {
                    "command": [
                        "case: (classic (exists l m tms from rt (pf' : this \\in nodes (getP l) (getS s l)), let: d := getS s l in [/\\ Some (Msg tms from this true) = find m (dsoup (getS s l)), rt \\In (rcv_trans (getP l)), tag tms = (t_rcv rt), msg_wf rt (coh_s l C) this from tms & filter l from (t_rcv rt) (tms_cont tms)])); last first.",
                        "VernacExtend",
                        "3763a4b8db689af316a7372b722bb29806ab4fb6"
                    ]
                },
                {
                    "command": [
                        "-",
                        "VernacBullet",
                        "581cab4bf49fa4b495e569bbda96fc8d28fddcc0"
                    ]
                },
                {
                    "command": [
                        "move=>H; exists s, None, C; left; split=>//l m tms from rt b T E1 E2 E3 E M.",
                        "VernacExtend",
                        "8f9bf5b52fcc86aed61225b48f57ed2a793bb381"
                    ]
                },
                {
                    "command": [
                        "apply/negP=>Z; rewrite Z in E1; clear Z b; apply: H.",
                        "VernacExtend",
                        "9335ee82fd4a1f2089654a06cd1757637b8508f1"
                    ]
                },
                {
                    "command": [
                        "by exists l, m, tms, from, rt.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "case=>[l][m][tms][from][rt][T][E1 E2 E3 E M].",
                        "VernacExtend",
                        "e00fff71ff314c991514fc71c41a3556702e444a"
                    ]
                },
                {
                    "command": [
                        "exists (let: d := getS s l in let loc' := receive_step rt from tms (coh_s l C) T in let: f' := upd this loc' (dstate d) in let: s' := consume_msg (dsoup d) m in upd l (DStatelet f' s') s), (Some (from, tag tms, tms_cont tms)).",
                        "VernacExtend",
                        "8dc2ace808964b4092c33c7d71cefc0003eb9be5"
                    ]
                },
                {
                    "command": [
                        "by exists C; right; exists l, m, tms, from, rt, T.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "tryrecv_act_step_safe",
            "line_nb": 70,
            "steps": [
                {
                    "command": [
                        "by case.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "tryrecv_act_step_sem",
            "line_nb": 73,
            "steps": [
                {
                    "command": [
                        "case=>C; rewrite /tryrecv_act_step; case; first by case=>_ _ ->; apply: Idle.",
                        "VernacExtend",
                        "3763a4b8db689af316a7372b722bb29806ab4fb6"
                    ]
                },
                {
                    "command": [
                        "case=>[l][m][tms][from][rt][Y][[E R E1 M]]F/=Z _.",
                        "VernacExtend",
                        "e00fff71ff314c991514fc71c41a3556702e444a"
                    ]
                },
                {
                    "command": [
                        "have X1: l \\in dom s1 by move: (f_valid_label F); rewrite (cohD C).",
                        "VernacExtend",
                        "406cde1174359c53bf162a2a18c4eede395555f9"
                    ]
                },
                {
                    "command": [
                        "by apply: (ReceiveMsg R X1 E1 (i := m) (from := from)).",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "send_act_safe_coh",
            "line_nb": 96,
            "steps": [
                {
                    "command": [
                        "by case.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "safe_safe",
            "line_nb": 99,
            "steps": [
                {
                    "command": [
                        "by case.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "send_act_step_total",
            "line_nb": 103,
            "steps": [
                {
                    "command": [
                        "rewrite /send_act_step/send_act_safe.",
                        "VernacExtend",
                        "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
                    ]
                },
                {
                    "command": [
                        "case: S=>C S J K.",
                        "VernacExtend",
                        "e00fff71ff314c991514fc71c41a3556702e444a"
                    ]
                },
                {
                    "command": [
                        "move/(s_safe_def): (S)=>[b][S']E.",
                        "VernacExtend",
                        "b1b2cb7a3a617cba67460b4eca1f04de3c1cc716"
                    ]
                },
                {
                    "command": [
                        "set s2 := let: d := getS s l in let: f' := upd this b (dstate d) in let: s' := (post_msg (dsoup d) (Msg (TMsg (t_snd st) msg) this to true)).1 in upd l (DStatelet f' s') s.",
                        "VernacExtend",
                        "69a61e99b234580f7b41fa5b9655c87ba9a76f70"
                    ]
                },
                {
                    "command": [
                        "exists s2, msg; split=>//; exists b; split=>//.",
                        "VernacExtend",
                        "cb406a1a091ac554ff27a772a7492efb98cde55e"
                    ]
                },
                {
                    "command": [
                        "move: (safe_safe (And4 C S J K))=> S''.",
                        "VernacExtend",
                        "b1b2cb7a3a617cba67460b4eca1f04de3c1cc716"
                    ]
                },
                {
                    "command": [
                        "by rewrite -E (pf_irr S'' S') .",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        }
    ]
}