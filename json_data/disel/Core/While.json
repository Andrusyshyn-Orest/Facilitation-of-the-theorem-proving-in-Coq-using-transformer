{
    "filename": "Core/While.v",
    "coq_project": "disel",
    "vernac_cmds": [
        [
            "From mathcomp.ssreflect Require Import ssreflect ssrbool ssrnat eqtype ssrfun seq.",
            "VernacRequire",
            "037d2ffdc90053d89d1b918c36daaeab721d2d83"
        ],
        [
            "From mathcomp Require Import path.",
            "VernacRequire",
            "7c70f445c754a2a74114416d587d02e512c693e2"
        ],
        [
            "Require Import Eqdep.",
            "VernacRequire",
            "a499933d0898d4c0e235af789d9252f633426d20"
        ],
        [
            "Require Import Relation_Operators.",
            "VernacRequire",
            "5c09f52be79db9d019c350cc3153659920102fbb"
        ],
        [
            "From fcsl Require Import pred prelude ordtype finmap pcm unionmap heap.",
            "VernacRequire",
            "41347af8188b8bd95ca7fa1d9e375300903274c8"
        ],
        [
            "From DiSeL Require Import Freshness State EqTypeX DepMaps Protocols Worlds NetworkSem Rely.",
            "VernacRequire",
            "6c33e6a9f60f6493eef47870959de533dbb9d6c8"
        ],
        [
            "From DiSeL Require Import Actions Injection Process Always HoareTriples InferenceRules.",
            "VernacRequire",
            "7ad4d509680a53857edde447eef7d606efef38a6"
        ],
        [
            "Set Implicit Arguments.",
            "VernacSetOption",
            "9e84ff8896f028601d8aded48c1d4aebe60aa584"
        ],
        [
            "Unset Strict Implicit.",
            "VernacUnsetOption",
            "2842adaf6959318f2042805935c46f513bdc0348"
        ],
        [
            "Import Prenex Implicits.",
            "VernacUnsetOption",
            "444e5f0be4b25d9b1fd556943a447ec10046d151"
        ],
        [
            "Section While.",
            "VernacBeginSection",
            "f38193f38fbca459ca7b7710980f26ddab4cc195"
        ],
        [
            "Variable this : nid.",
            "VernacAssumption",
            "242c7869c0bef3fe166243583278f6bbaa63bbf4"
        ],
        [
            "Variable W : world.",
            "VernacAssumption",
            "92d3732f8ee464718a9d77a50e1d3ac970c2e983"
        ],
        [
            "Variable A B : Type.",
            "VernacAssumption",
            "b4e42fd426c23cd1c77c79fc26c25f95338235a5"
        ],
        [
            "Variable cond : B -> bool.",
            "VernacAssumption",
            "955495ac2298f7d7a868042c82786c39dc05a391"
        ],
        [
            "Variable I : A -> cont B.",
            "VernacAssumption",
            "0d4ea2863972ae0155fa27a75d0e06af3149ab77"
        ],
        [
            "Variable I_stable : forall a b s0 s1, I a b s0 -> network_rely W this s0 s1 -> I a b s1.",
            "VernacAssumption",
            "3152cceb51e1b07f6bb6019ae139f2ccec0167b2"
        ],
        [
            "Notation body_spec' := (fun b a => binarify (fun s => cond b /\\ I a b s) (fun b' s1 => I a b' s1)).",
            "VernacSyntacticDefinition",
            "ee3871d5c70bf876550c3e8f7cf1ca6bdf30a832"
        ],
        [
            "Notation body_spec := (forall b : B, DTbin this W (logvar (body_spec' b))).",
            "VernacSyntacticDefinition",
            "156809b8e1d080416a114cdb00f80ce0a81bb447"
        ],
        [
            "Variable body : body_spec.",
            "VernacAssumption",
            "d4cff68869193a6a188c2b42f1cdf1d3989073cc"
        ],
        [
            "Definition loop_spec := forall b, {a : A}, DHT [this, W] (fun s => I a b s, fun b' s1 => ~~ cond b' /\\ I a b' s1).",
            "VernacDefinition",
            "a653a75c9318f8f820dbb7119263d4d578c32583"
        ],
        [
            "Program Definition while b0 : {a : A}, DHT [this, W] (fun s => I a b0 s, fun b' s1 => ~~ cond b' /\\ I a b' s1) := Do (ffix (fun (rec : loop_spec) (b : B) => Do (if cond b then (b' <-- body b; rec b') else ret _ _ b)) b0).",
            "VernacDefinition",
            "ba1f7fdd103f814d75c2e13a89bd4514b6dedd8a"
        ],
        [
            "Next Obligation.",
            "VernacExtend",
            "de5e6a0a7a163af0d8463969c3ff4241d7d5bba0"
        ],
        [
            "apply: ghC=>s0 a/= HI0 C.",
            "VernacExtend",
            "4bd6fa79b17bcd2bfb7af091fb325367a20385d6"
        ],
        [
            "case: ifP=> Hcond; last by apply: ret_rule=>s1 R1; split;[rewrite Hcond | eauto].",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "apply: step.",
            "VernacExtend",
            "4bd6fa79b17bcd2bfb7af091fb325367a20385d6"
        ],
        [
            "apply: call_rule'; first by move=> _; exists a.",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "move=> b' s1 HI1 C1.",
            "VernacExtend",
            "b1b2cb7a3a617cba67460b4eca1f04de3c1cc716"
        ],
        [
            "apply: (gh_ex (g:=a)).",
            "VernacExtend",
            "4bd6fa79b17bcd2bfb7af091fb325367a20385d6"
        ],
        [
            "apply: call_rule'; first by move=>_; apply: HI1.",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "by move=>x m; case=>//; apply: HI1.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Next Obligation.",
            "VernacExtend",
            "de5e6a0a7a163af0d8463969c3ff4241d7d5bba0"
        ],
        [
            "move => s0/= HI0.",
            "VernacExtend",
            "b1b2cb7a3a617cba67460b4eca1f04de3c1cc716"
        ],
        [
            "by apply: call_rule'.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "End While.",
            "VernacEndSegment",
            "5d3efa1ef501b1927aab9ca4ef5fe51dce211a6d"
        ]
    ],
    "proofs": [
        {
            "name": "while_obligation_2",
            "line_nb": 32,
            "steps": [
                {
                    "command": [
                        "move => s0/= HI0.",
                        "VernacExtend",
                        "b1b2cb7a3a617cba67460b4eca1f04de3c1cc716"
                    ]
                },
                {
                    "command": [
                        "by apply: call_rule'.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        }
    ]
}