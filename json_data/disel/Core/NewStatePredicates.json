{
    "filename": "Core/NewStatePredicates.v",
    "coq_project": "disel",
    "vernac_cmds": [
        [
            "From mathcomp.ssreflect Require Import ssreflect ssrbool ssrnat eqtype ssrfun seq.",
            "VernacRequire",
            "037d2ffdc90053d89d1b918c36daaeab721d2d83"
        ],
        [
            "From mathcomp Require Import path.",
            "VernacRequire",
            "7c70f445c754a2a74114416d587d02e512c693e2"
        ],
        [
            "Require Import Eqdep.",
            "VernacRequire",
            "a499933d0898d4c0e235af789d9252f633426d20"
        ],
        [
            "Require Import Relation_Operators.",
            "VernacRequire",
            "5c09f52be79db9d019c350cc3153659920102fbb"
        ],
        [
            "From fcsl Require Import pred prelude ordtype finmap pcm unionmap heap.",
            "VernacRequire",
            "41347af8188b8bd95ca7fa1d9e375300903274c8"
        ],
        [
            "From DiSeL Require Import Freshness State EqTypeX DepMaps.",
            "VernacRequire",
            "df612c296a3d79dac82655471e8596f83ae6e54b"
        ],
        [
            "Set Implicit Arguments.",
            "VernacSetOption",
            "9e84ff8896f028601d8aded48c1d4aebe60aa584"
        ],
        [
            "Unset Strict Implicit.",
            "VernacUnsetOption",
            "2842adaf6959318f2042805935c46f513bdc0348"
        ],
        [
            "Unset Printing Implicit Defensive.",
            "VernacUnsetOption",
            "444e5f0be4b25d9b1fd556943a447ec10046d151"
        ],
        [
            "Section NewSoupPredicates.",
            "VernacBeginSection",
            "f6e6bab2f974f813c552a2cb2a7af41f47d2ac71"
        ],
        [
            "Definition msg_in_soup' from to t (cond : seq nat -> bool) (d : soup) := (exists! i, exists c, find i d = Some (Msg (TMsg t c) from to true)) /\\ forall i c, find i d = Some (Msg (TMsg t c) from to true) -> cond c.",
            "VernacDefinition",
            "23aa9a02bf142ac7bc0bc244e57b3debe827717e"
        ],
        [
            "Definition msg_spec' from to tg cnt := msg_in_soup' from to tg (fun y => (y == cnt)).",
            "VernacDefinition",
            "a1acaf68b2396fe7e5fd7bfdec6a35f6a9bb3d6a"
        ],
        [
            "Definition no_msg_from_to' from to (criterion : nat -> seq nat -> bool) (d : soup) := forall i t c, find i d = Some (Msg (TMsg t c) from to true) -> ~~criterion t c.",
            "VernacDefinition",
            "a416b715f09195e51ad2a78e80ad67ff49673f7d"
        ],
        [
            "Lemma no_msg_from_to_consume' from to cond s i: valid s -> no_msg_from_to' from to cond s -> no_msg_from_to' from to cond (consume_msg s i).",
            "VernacStartTheoremProof",
            "993001561d84b6f5a7bdfc85157c364f3e73366d"
        ],
        [
            "move=>V H m t c .",
            "VernacExtend",
            "b1b2cb7a3a617cba67460b4eca1f04de3c1cc716"
        ],
        [
            "rewrite /consume_msg; case: (find i s); last by move=>F; apply: (H m t c F).",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "move=>ms; case B: (m == i).",
            "VernacExtend",
            "a01b3d93f426ff68d360351709a5fa5af822af32"
        ],
        [
            "-",
            "VernacBullet",
            "581cab4bf49fa4b495e569bbda96fc8d28fddcc0"
        ],
        [
            "by move/eqP: B=>B; subst m; rewrite findU eqxx/= V.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "by rewrite findU B/==>/(H m t c).",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma no_msg_spec_consume s from to tg cnt cond i : valid s -> find i s = Some {| content := TMsg tg cnt; from := from; to := to; active := true |} -> msg_in_soup' from to tg cond s -> no_msg_from_to' from to (fun x y => (x == tg)) (consume_msg s i).",
            "VernacStartTheoremProof",
            "26d7414bbb6fed0b36f9bfed9e28e3bea9685512"
        ],
        [
            "move=>V F[][j][[c]]F' H1 H2.",
            "VernacExtend",
            "b1b2cb7a3a617cba67460b4eca1f04de3c1cc716"
        ],
        [
            "move=>m t' c'; rewrite /consume_msg; move: (find_some F).",
            "VernacExtend",
            "40075a671b142e70c4190413219df8981418e910"
        ],
        [
            "case: dom_find=>// msg->_ _; case B: (m == i).",
            "VernacExtend",
            "5887f8022a4f6389ac249140364feb69c4f18799"
        ],
        [
            "-",
            "VernacBullet",
            "581cab4bf49fa4b495e569bbda96fc8d28fddcc0"
        ],
        [
            "by move/eqP: B=>B; subst m; rewrite findU eqxx/= V.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "have X: j = i by apply: (H1 i); exists cnt.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "subst j; rewrite findU B/==>H.",
            "VernacExtend",
            "36775adaa627f540217e6453276808e0b5985a48"
        ],
        [
            "case X: (t' == tg)=>//=.",
            "VernacExtend",
            "e00fff71ff314c991514fc71c41a3556702e444a"
        ],
        [
            "move/eqP: X=>X; subst t'.",
            "VernacExtend",
            "c5de6bfbf5a40e3052c2e55da184d70866820b97"
        ],
        [
            "suff X: i = m by subst i; rewrite eqxx in B.",
            "VernacExtend",
            "d07fc8b2103f140554938023774bf3f75d04ba99"
        ],
        [
            "by apply: (H1 m); exists c'.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma msg_spec_consumeE i d from to from' to' t c' t' cond: valid d -> find i d = Some (Msg (TMsg t' c') from' to' true) -> msg_in_soup' from to t cond d -> [|| (from != from'), (to != to') | (t != t')] -> msg_in_soup' from to t cond (consume_msg d i).",
            "VernacStartTheoremProof",
            "e28f67e02457f8db93cd340737b660e8f8db3fad"
        ],
        [
            "move=>V E S N.",
            "VernacExtend",
            "b1b2cb7a3a617cba67460b4eca1f04de3c1cc716"
        ],
        [
            "case: S=>[][j][[c]F]H1 H2.",
            "VernacExtend",
            "e00fff71ff314c991514fc71c41a3556702e444a"
        ],
        [
            "have Nij: i != j.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "-",
            "VernacBullet",
            "581cab4bf49fa4b495e569bbda96fc8d28fddcc0"
        ],
        [
            "case H: (i == j)=>//.",
            "VernacExtend",
            "e00fff71ff314c991514fc71c41a3556702e444a"
        ],
        [
            "move/eqP in H; subst i; move: E; rewrite F=>[][???]; subst.",
            "VernacExtend",
            "acd131928ccabaea60a7a934effd6ddafe0d9369"
        ],
        [
            "move: N=>/orP []/eqP; first by congruence.",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "move/eqP/orP; case; first by move=>X Z; subst to'; rewrite eqxx in X.",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "by rewrite eqxx.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "split.",
            "VernacExtend",
            "55abc140132bd88981001ac656020469a8d503eb"
        ],
        [
            "-",
            "VernacBullet",
            "581cab4bf49fa4b495e569bbda96fc8d28fddcc0"
        ],
        [
            "exists j; split; first by exists c; rewrite mark_other// eq_sym; apply/negbTE.",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "move=> x [c1][E'].",
            "VernacExtend",
            "b1b2cb7a3a617cba67460b4eca1f04de3c1cc716"
        ],
        [
            "case H: (x == i).",
            "VernacExtend",
            "e00fff71ff314c991514fc71c41a3556702e444a"
        ],
        [
            "+",
            "VernacBullet",
            "3ddfc0515f916e562bacf863647e0107cb15aa13"
        ],
        [
            "by move/eqP in H; subst x; rewrite (find_consume _ E) in E'.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "by apply: H1; exists c1; rewrite mark_other in E'.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "move=>k c1.",
            "VernacExtend",
            "b1b2cb7a3a617cba67460b4eca1f04de3c1cc716"
        ],
        [
            "case H: (k == i); first by move/eqP in H; subst k; rewrite (find_consume _ E).",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "by rewrite mark_other//; apply: H2.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "End NewSoupPredicates.",
            "VernacEndSegment",
            "48d799848605d9d1ed4235cd11c761a0ececdf3a"
        ]
    ],
    "proofs": [
        {
            "name": "no_msg_from_to_consume'",
            "line_nb": 13,
            "steps": [
                {
                    "command": [
                        "move=>V H m t c .",
                        "VernacExtend",
                        "b1b2cb7a3a617cba67460b4eca1f04de3c1cc716"
                    ]
                },
                {
                    "command": [
                        "rewrite /consume_msg; case: (find i s); last by move=>F; apply: (H m t c F).",
                        "VernacExtend",
                        "3763a4b8db689af316a7372b722bb29806ab4fb6"
                    ]
                },
                {
                    "command": [
                        "move=>ms; case B: (m == i).",
                        "VernacExtend",
                        "a01b3d93f426ff68d360351709a5fa5af822af32"
                    ]
                },
                {
                    "command": [
                        "-",
                        "VernacBullet",
                        "581cab4bf49fa4b495e569bbda96fc8d28fddcc0"
                    ]
                },
                {
                    "command": [
                        "by move/eqP: B=>B; subst m; rewrite findU eqxx/= V.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "by rewrite findU B/==>/(H m t c).",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "no_msg_spec_consume",
            "line_nb": 21,
            "steps": [
                {
                    "command": [
                        "move=>V F[][j][[c]]F' H1 H2.",
                        "VernacExtend",
                        "b1b2cb7a3a617cba67460b4eca1f04de3c1cc716"
                    ]
                },
                {
                    "command": [
                        "move=>m t' c'; rewrite /consume_msg; move: (find_some F).",
                        "VernacExtend",
                        "40075a671b142e70c4190413219df8981418e910"
                    ]
                },
                {
                    "command": [
                        "case: dom_find=>// msg->_ _; case B: (m == i).",
                        "VernacExtend",
                        "5887f8022a4f6389ac249140364feb69c4f18799"
                    ]
                },
                {
                    "command": [
                        "-",
                        "VernacBullet",
                        "581cab4bf49fa4b495e569bbda96fc8d28fddcc0"
                    ]
                },
                {
                    "command": [
                        "by move/eqP: B=>B; subst m; rewrite findU eqxx/= V.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "have X: j = i by apply: (H1 i); exists cnt.",
                        "VernacExtend",
                        "406cde1174359c53bf162a2a18c4eede395555f9"
                    ]
                },
                {
                    "command": [
                        "subst j; rewrite findU B/==>H.",
                        "VernacExtend",
                        "36775adaa627f540217e6453276808e0b5985a48"
                    ]
                },
                {
                    "command": [
                        "case X: (t' == tg)=>//=.",
                        "VernacExtend",
                        "e00fff71ff314c991514fc71c41a3556702e444a"
                    ]
                },
                {
                    "command": [
                        "move/eqP: X=>X; subst t'.",
                        "VernacExtend",
                        "c5de6bfbf5a40e3052c2e55da184d70866820b97"
                    ]
                },
                {
                    "command": [
                        "suff X: i = m by subst i; rewrite eqxx in B.",
                        "VernacExtend",
                        "d07fc8b2103f140554938023774bf3f75d04ba99"
                    ]
                },
                {
                    "command": [
                        "by apply: (H1 m); exists c'.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "msg_spec_consumeE",
            "line_nb": 34,
            "steps": [
                {
                    "command": [
                        "move=>V E S N.",
                        "VernacExtend",
                        "b1b2cb7a3a617cba67460b4eca1f04de3c1cc716"
                    ]
                },
                {
                    "command": [
                        "case: S=>[][j][[c]F]H1 H2.",
                        "VernacExtend",
                        "e00fff71ff314c991514fc71c41a3556702e444a"
                    ]
                },
                {
                    "command": [
                        "have Nij: i != j.",
                        "VernacExtend",
                        "406cde1174359c53bf162a2a18c4eede395555f9"
                    ]
                },
                {
                    "command": [
                        "-",
                        "VernacBullet",
                        "581cab4bf49fa4b495e569bbda96fc8d28fddcc0"
                    ]
                },
                {
                    "command": [
                        "case H: (i == j)=>//.",
                        "VernacExtend",
                        "e00fff71ff314c991514fc71c41a3556702e444a"
                    ]
                },
                {
                    "command": [
                        "move/eqP in H; subst i; move: E; rewrite F=>[][???]; subst.",
                        "VernacExtend",
                        "acd131928ccabaea60a7a934effd6ddafe0d9369"
                    ]
                },
                {
                    "command": [
                        "move: N=>/orP []/eqP; first by congruence.",
                        "VernacExtend",
                        "3763a4b8db689af316a7372b722bb29806ab4fb6"
                    ]
                },
                {
                    "command": [
                        "move/eqP/orP; case; first by move=>X Z; subst to'; rewrite eqxx in X.",
                        "VernacExtend",
                        "3763a4b8db689af316a7372b722bb29806ab4fb6"
                    ]
                },
                {
                    "command": [
                        "by rewrite eqxx.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "split.",
                        "VernacExtend",
                        "55abc140132bd88981001ac656020469a8d503eb"
                    ]
                },
                {
                    "command": [
                        "-",
                        "VernacBullet",
                        "581cab4bf49fa4b495e569bbda96fc8d28fddcc0"
                    ]
                },
                {
                    "command": [
                        "exists j; split; first by exists c; rewrite mark_other// eq_sym; apply/negbTE.",
                        "VernacExtend",
                        "3763a4b8db689af316a7372b722bb29806ab4fb6"
                    ]
                },
                {
                    "command": [
                        "move=> x [c1][E'].",
                        "VernacExtend",
                        "b1b2cb7a3a617cba67460b4eca1f04de3c1cc716"
                    ]
                },
                {
                    "command": [
                        "case H: (x == i).",
                        "VernacExtend",
                        "e00fff71ff314c991514fc71c41a3556702e444a"
                    ]
                },
                {
                    "command": [
                        "+",
                        "VernacBullet",
                        "3ddfc0515f916e562bacf863647e0107cb15aa13"
                    ]
                },
                {
                    "command": [
                        "by move/eqP in H; subst x; rewrite (find_consume _ E) in E'.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "by apply: H1; exists c1; rewrite mark_other in E'.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "move=>k c1.",
                        "VernacExtend",
                        "b1b2cb7a3a617cba67460b4eca1f04de3c1cc716"
                    ]
                },
                {
                    "command": [
                        "case H: (k == i); first by move/eqP in H; subst k; rewrite (find_consume _ E).",
                        "VernacExtend",
                        "3763a4b8db689af316a7372b722bb29806ab4fb6"
                    ]
                },
                {
                    "command": [
                        "by rewrite mark_other//; apply: H2.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        }
    ]
}