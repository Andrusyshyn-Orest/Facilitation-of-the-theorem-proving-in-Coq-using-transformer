{
    "filename": "Core/Protocols.v",
    "coq_project": "disel",
    "vernac_cmds": [
        [
            "From mathcomp.ssreflect Require Import ssreflect ssrbool ssrnat eqtype ssrfun seq.",
            "VernacRequire",
            "037d2ffdc90053d89d1b918c36daaeab721d2d83"
        ],
        [
            "From mathcomp Require Import path.",
            "VernacRequire",
            "7c70f445c754a2a74114416d587d02e512c693e2"
        ],
        [
            "Require Import Eqdep.",
            "VernacRequire",
            "a499933d0898d4c0e235af789d9252f633426d20"
        ],
        [
            "Require Import Relation_Operators.",
            "VernacRequire",
            "5c09f52be79db9d019c350cc3153659920102fbb"
        ],
        [
            "From fcsl Require Import pred prelude ordtype finmap pcm unionmap heap.",
            "VernacRequire",
            "41347af8188b8bd95ca7fa1d9e375300903274c8"
        ],
        [
            "From DiSeL Require Import Freshness State EqTypeX.",
            "VernacRequire",
            "f17feb214ff8c4c04d5526c4ef060bada6fa8477"
        ],
        [
            "Set Implicit Arguments.",
            "VernacSetOption",
            "9e84ff8896f028601d8aded48c1d4aebe60aa584"
        ],
        [
            "Unset Strict Implicit.",
            "VernacUnsetOption",
            "2842adaf6959318f2042805935c46f513bdc0348"
        ],
        [
            "Unset Printing Implicit Defensive.",
            "VernacUnsetOption",
            "444e5f0be4b25d9b1fd556943a447ec10046d151"
        ],
        [
            "Definition getLocal (n : nid) (d : dstatelet) : heap := match find n (dstate d) with | Some h => h | None => Unit end.",
            "VernacDefinition",
            "1d18a3914ffb00ee099b8c645be1432d007e7b56"
        ],
        [
            "Lemma getLocalU n m d s : valid (dstate d) -> m \\in dom (dstate d) -> getLocal n d = (getLocal n {| dstate := upd m (getLocal m d) (dstate d); dsoup := s |}).",
            "VernacStartTheoremProof",
            "a32a41515e89fb062ebe9fe773da343925a12cb0"
        ],
        [
            "move=>V H2; move/um_eta: (H2)=>[v2][F2 _].",
            "VernacExtend",
            "8b784377bdc4d565ff66d4cf36a6041e9354c156"
        ],
        [
            "rewrite /getLocal F2/=; case X: (n == m); last by rewrite findU X/=.",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "by move/eqP: X=>X; subst m; rewrite findU eqxx/=V F2.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Module Coherence.",
            "VernacDefineModule",
            "80409494efbbc4b7ac22575088e73f1b44e513b4"
        ],
        [
            "Section CohDef.",
            "VernacBeginSection",
            "2d5a88c9c6711ecf938d29fd831a2a6013d07ac5"
        ],
        [
            "Variable nodes: dstatelet -> pred nid.",
            "VernacAssumption",
            "a141d9b83173643e3593bdc33cbef3b40432fe19"
        ],
        [
            "Notation protocol_soup := (soup (TaggedMessage)).",
            "VernacSyntacticDefinition",
            "b99d93e7f70e7441d1ae13c6b8ec72e374205996"
        ],
        [
            "Structure mixin_of (coh : Pred dstatelet) := Mixin { _ : forall d, coh d -> valid (dstate d); _ : forall d, coh d -> valid (dsoup d); _ : forall d, coh d -> dom (dstate d) =i nodes d; }.",
            "VernacInductive",
            "ba9bbc2f3461460cdd3111c6fa97167e287b5288"
        ],
        [
            "End CohDef.",
            "VernacEndSegment",
            "5c1bdd683377a20e9e52e501bfdfed0bf3002daa"
        ],
        [
            "Section ClassDef.",
            "VernacBeginSection",
            "a5b792261e6c496f5a1a8d0f7da8c96156ca2fed"
        ],
        [
            "Variable nodes: dstatelet -> pred nid.",
            "VernacAssumption",
            "a141d9b83173643e3593bdc33cbef3b40432fe19"
        ],
        [
            "Notation class_of := mixin_of (only parsing).",
            "VernacSyntacticDefinition",
            "7196b196bbc3a41e5ce702c5c8b4974fd7174202"
        ],
        [
            "Structure cohpred : Type := Pack {sort : dstatelet -> Prop; _ : class_of nodes sort}.",
            "VernacInductive",
            "bd28c4da83aa801dab85746b980d8601f34d8569"
        ],
        [
            "Local Coercion sort : cohpred >-> Funclass.",
            "VernacCoercion",
            "1d57515d9854370b7c6f1f1285f58acb5249c370"
        ],
        [
            "Variables (T : dstatelet -> Prop) (cT : cohpred).",
            "VernacAssumption",
            "5b18c5f4e477850d080366c5fc5647bbf821097b"
        ],
        [
            "Definition class := let: Pack _ c as cT' := cT return class_of nodes cT' in c.",
            "VernacDefinition",
            "d2664ec4f3793376e5bce50d5da90440ca9cb721"
        ],
        [
            "Definition pack c := @Pack T c.",
            "VernacDefinition",
            "df423946029ab5f9a8dac00ac149f11d9867d225"
        ],
        [
            "Definition clone := fun c & T = cT & phant_id (pack c) cT => pack c.",
            "VernacDefinition",
            "3c2f921a6b317a6589953ae41e4cd1fbc1a23dfb"
        ],
        [
            "End ClassDef.",
            "VernacEndSegment",
            "bce1c8832045d8291c44a3fb67e9767782d2745b"
        ],
        [
            "Module Exports.",
            "VernacDefineModule",
            "d4a1114ec53f746523a7dec57823f7f03e51fa24"
        ],
        [
            "Section Exports.",
            "VernacBeginSection",
            "3d3d73b16827535e7d0c9fdb92a2f163a05b14f4"
        ],
        [
            "Variable Lstate : Type.",
            "VernacAssumption",
            "5c30f44cdbcb71c72c07e3859d24f246f83f4034"
        ],
        [
            "Variable nodes: dstatelet -> pred nid.",
            "VernacAssumption",
            "a141d9b83173643e3593bdc33cbef3b40432fe19"
        ],
        [
            "Coercion sort : cohpred >-> Funclass.",
            "VernacCoercion",
            "41176acf45ca01fb5986da49430ce3c58eda060f"
        ],
        [
            "Definition cohpred := cohpred.",
            "VernacDefinition",
            "fe356112a26bdc35b54ed2d08be5201c9c2e0b14"
        ],
        [
            "Definition CohPredMixin := Mixin.",
            "VernacDefinition",
            "d903b00318ef7179380a51a0ba34b58283bdd694"
        ],
        [
            "Definition CohPred T m := (@pack T m).",
            "VernacDefinition",
            "959f044216b865102f52952f610e8cd9853354d6"
        ],
        [
            "Notation \"[ 'cohPredMixin' 'of' T ]\" := (class _ : mixin_of T) (at level 0, format \"[ 'cohPredMixin' 'of' T ]\") : form_scope.",
            "VernacNotation",
            "a5d614fdc1dc909546c63f323e3ed9c6b71c45ba"
        ],
        [
            "Notation \"[ 'cohpred' 'of' T 'for' C ]\" := (@clone T C _ (erefl _) id) (at level 0, format \"[ 'cohpred' 'of' T 'for' C ]\") : form_scope.",
            "VernacNotation",
            "e89c66fe2348a29bea93e4ba3b4accb3b48bb73e"
        ],
        [
            "Notation \"[ 'cohpred' 'of' T ]\" := (@clone T _ _ (erefl _) id) (at level 0, format \"[ 'cohpred' 'of' T ]\") : form_scope.",
            "VernacNotation",
            "5dc56ef8469882d31ebec992da34df75633c8605"
        ],
        [
            "Canonical cohpred_PredType := mkPredType (@sort nodes).",
            "VernacDefinition",
            "85847b0f3b4b1ef6d37aa8fc8366d40c93bd71b8"
        ],
        [
            "Variable coh : cohpred nodes.",
            "VernacAssumption",
            "ea74319388b9cba99d1b7139f524b596426f2a80"
        ],
        [
            "Lemma cohVl d : d \\In coh -> valid (dstate d).",
            "VernacStartTheoremProof",
            "24c120f7e27939f2e65dcc60a90bb1bac886663d"
        ],
        [
            "by case: coh=>p [H1 H2 H3]; apply: H1.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma cohVs d : d \\In coh -> valid (dsoup d).",
            "VernacStartTheoremProof",
            "bcb0bd10b1d50e53b76433d8dfc93c6ebb4a4406"
        ],
        [
            "by case: coh=>p [H1 H2 H3]; apply: H2.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma cohDom d : d \\In coh -> dom (dstate d) =i nodes d.",
            "VernacStartTheoremProof",
            "bafa4e006eac79e117a370c54be1f644b0be8ec2"
        ],
        [
            "by case: coh=>p [H1 H2 H3]; apply: H3.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "End Exports.",
            "VernacEndSegment",
            "71efedae7ccffd696e1ffe5d8ae6baa8a4484918"
        ],
        [
            "End Exports.",
            "VernacEndSegment",
            "71efedae7ccffd696e1ffe5d8ae6baa8a4484918"
        ],
        [
            "End Coherence.",
            "VernacEndSegment",
            "7b565e769f89fbb7076ed1ede2b41aee54988e1c"
        ],
        [
            "Export Coherence.Exports.",
            "VernacImport",
            "ec3bea40fc45a645edfe59dc5b6ba29842bec190"
        ],
        [
            "Module Transitions.",
            "VernacDefineModule",
            "f0e2fb490ddc2711bed35b9911cfb406767687d0"
        ],
        [
            "Section Transitions.",
            "VernacBeginSection",
            "6bab5795df924b1673218211b22a3e2e28ebc7a3"
        ],
        [
            "Variable nodes: dstatelet -> pred nid.",
            "VernacAssumption",
            "a141d9b83173643e3593bdc33cbef3b40432fe19"
        ],
        [
            "Variable coh : cohpred nodes.",
            "VernacAssumption",
            "ea74319388b9cba99d1b7139f524b596426f2a80"
        ],
        [
            "Notation lstate := heap%type.",
            "VernacSyntacticDefinition",
            "aa1ad0fb5b810217d2c00a8d7f0f537e51523ea1"
        ],
        [
            "Definition send_step_t (send_safe : nid -> nid -> dstatelet -> seq nat -> Prop) := forall (this to : nid) (d : dstatelet) (msg : seq nat) (pf : send_safe this to d msg), option lstate.",
            "VernacDefinition",
            "92075d3aee7192b46070c3102c31ebf970f79ec9"
        ],
        [
            "Definition s_step_coh_t t_snd (send_safe : nid -> nid -> dstatelet -> seq nat -> Prop) (send_step : send_step_t send_safe) := forall this to d msg (pf : send_safe this to d msg) b, let: f := dstate d in let: s := dsoup d in Some b = @send_step this to d msg pf -> let: f' := upd this b f in let: tms := TMsg t_snd msg in let: s' := (post_msg s (Msg tms this to true)).1 in coh (DStatelet f' s').",
            "VernacDefinition",
            "6d3e25759c74d3ec74211e7d4e237214e22c1264"
        ],
        [
            "Structure send_trans := SendTrans { t_snd : nat; send_safe : nid -> nid -> dstatelet -> seq nat -> Prop; s_safe_coh : forall this to d m, send_safe this to d m -> coh d; s_safe_in : forall this to d m, send_safe this to d m -> this \\in nodes d /\\ to \\in nodes d; send_step : send_step_t send_safe; s_safe_def : forall this to d msg, send_safe this to d msg <-> exists b pf, @send_step this to d msg pf = Some b; s_step_coh : s_step_coh_t t_snd send_step }.",
            "VernacInductive",
            "82accd2fa0b42f8400028af0809a3fdfbd24a41c"
        ],
        [
            "Definition receive_step_t := forall (this from: nid) (m : seq nat) (d : dstatelet) (pf : coh d) (pf' : this \\in nodes d), lstate.",
            "VernacDefinition",
            "4c799f189d441271451980b4b0fe485026d9f2e9"
        ],
        [
            "Definition r_step_coh_t (msg_wf : forall d, coh d -> nid -> nid -> TaggedMessage -> bool) t_rcv (receive_step : receive_step_t) := forall (d : dstatelet) from this i (C : coh d) (pf' : this \\in nodes d) (m : TaggedMessage), let: f := dstate d in let: s := dsoup d in this \\in dom f -> find i s = Some (Msg m from this true) -> msg_wf d C this from m -> tag m = t_rcv -> let: loc' := receive_step this from m d C pf' in let: s'' := consume_msg s i in let: f' := upd this loc' f in coh (DStatelet f' s'').",
            "VernacDefinition",
            "898fa3775414d62941d79c7c3ef603dac0e047a8"
        ],
        [
            "Structure receive_trans := ReceiveTrans { t_rcv : nat; msg_wf : forall d, coh d -> nid -> nid -> TaggedMessage -> bool; receive_step : receive_step_t; r_step_coh : r_step_coh_t msg_wf t_rcv receive_step }.",
            "VernacInductive",
            "177b68469f85a8d86bc400529f7f2a7698f08de4"
        ],
        [
            "End Transitions.",
            "VernacEndSegment",
            "90fda09a47e8678da5607ee0c06ab46bb89f7c76"
        ],
        [
            "Module Exports.",
            "VernacDefineModule",
            "d4a1114ec53f746523a7dec57823f7f03e51fa24"
        ],
        [
            "Definition SendTrans := SendTrans.",
            "VernacDefinition",
            "107030f1e23ba59784afc6170e2d7f80febc4255"
        ],
        [
            "Definition send_trans := send_trans.",
            "VernacDefinition",
            "f114acf9402e1d1f388fcc9ff690afb4b1d88edc"
        ],
        [
            "Definition ReceiveTrans := ReceiveTrans.",
            "VernacDefinition",
            "2145e48d2de09db8dd1a9add54aef080b45ca70c"
        ],
        [
            "Definition receive_trans := receive_trans.",
            "VernacDefinition",
            "177557b69481ab014a83673eeed1be5cf489598b"
        ],
        [
            "Definition t_snd := t_snd.",
            "VernacDefinition",
            "1f0d6921d1f2fe1ac8ed99205be91f25e8490419"
        ],
        [
            "Definition send_safe := send_safe.",
            "VernacDefinition",
            "c68de8db2151994cda22e7bd364c305fb5da1c89"
        ],
        [
            "Definition send_step := send_step.",
            "VernacDefinition",
            "ea87eac1c4deae965c5f62d131e07544084143a9"
        ],
        [
            "Definition send_step_t := send_step_t.",
            "VernacDefinition",
            "31d4ad93f5a4ea1b574a10313508939e7e2bb43a"
        ],
        [
            "Definition s_safe_coh := s_safe_coh.",
            "VernacDefinition",
            "a126982c713cd4d5dee7830b4209e5fe11b21022"
        ],
        [
            "Definition s_safe_in := s_safe_in.",
            "VernacDefinition",
            "d6016c54875eaf7c06e6133e229f45237a40f3a2"
        ],
        [
            "Definition s_safe_def := s_safe_def.",
            "VernacDefinition",
            "38d537444406e0cbd962b1d929b153f5a3c5ee91"
        ],
        [
            "Definition s_step_coh := s_step_coh.",
            "VernacDefinition",
            "4c997d7f3df0434a2e61df28ac328413293424b0"
        ],
        [
            "Definition s_step_coh_t := s_step_coh_t.",
            "VernacDefinition",
            "582fed342cfd9f0e74f45fbd02d222316112782e"
        ],
        [
            "Definition t_rcv := t_rcv.",
            "VernacDefinition",
            "ee6bd6873d7a1b6327b499a8cbd6ae25b4b08c3d"
        ],
        [
            "Definition msg_wf := msg_wf.",
            "VernacDefinition",
            "41beff62e7c2a818a6547d5f2181fde814081e9b"
        ],
        [
            "Definition receive_step := receive_step.",
            "VernacDefinition",
            "917f8e252f3cacf9d663ca02cdfa38f835410241"
        ],
        [
            "Definition receive_step_t := receive_step_t.",
            "VernacDefinition",
            "8977f8707b52ff732fa41da46064bc9c69a34ee0"
        ],
        [
            "Definition r_step_coh := r_step_coh.",
            "VernacDefinition",
            "109a004f8ede85b8c1b25e0403b64c73b73944b3"
        ],
        [
            "Definition r_step_coh_t := r_step_coh_t.",
            "VernacDefinition",
            "e247242007d085d64ee9593cfb0de0e25a14ed5f"
        ],
        [
            "End Exports.",
            "VernacEndSegment",
            "71efedae7ccffd696e1ffe5d8ae6baa8a4484918"
        ],
        [
            "End Transitions.",
            "VernacEndSegment",
            "90fda09a47e8678da5607ee0c06ab46bb89f7c76"
        ],
        [
            "Export Transitions.Exports.",
            "VernacImport",
            "4a1a3f3ab8b9c2828c1bbb9c92ea4a5f9a0675cb"
        ],
        [
            "Module Protocols.",
            "VernacDefineModule",
            "de09706490bc2c32598a3810325609d3ae7aec67"
        ],
        [
            "Section Protocols.",
            "VernacBeginSection",
            "ec1296c855f4ae15458ca0b94f04002794778d38"
        ],
        [
            "Definition snd_tags {nodes} {coh : cohpred nodes} (sts : seq (send_trans coh)) := map (@t_snd nodes _) sts.",
            "VernacDefinition",
            "3f513ef009af7e78cdca472a0016e4854519adbf"
        ],
        [
            "Definition rcv_tags {nodes} {coh : cohpred nodes} (sts : seq (receive_trans coh)) := map (@t_rcv nodes _) sts.",
            "VernacDefinition",
            "db788673d3b8ca72f7997cf5d133bf6e6f2487ef"
        ],
        [
            "Structure protocol := Protocol { nodes: dstatelet -> pred nid; plab : Label; coh : cohpred nodes ; snd_trans : seq (send_trans coh); rcv_trans : seq (receive_trans coh); snd_uniq : uniq (snd_tags snd_trans); rcv_uniq : uniq (rcv_tags rcv_trans); }.",
            "VernacInductive",
            "d9d99bf1857377400efd6256f3586e4587f059a7"
        ],
        [
            "End Protocols.",
            "VernacEndSegment",
            "724d4adbc68c00777020afa79dc7002f0ecefa13"
        ],
        [
            "Module Exports.",
            "VernacDefineModule",
            "d4a1114ec53f746523a7dec57823f7f03e51fa24"
        ],
        [
            "Section Exports.",
            "VernacBeginSection",
            "3d3d73b16827535e7d0c9fdb92a2f163a05b14f4"
        ],
        [
            "Definition protocol := protocol.",
            "VernacDefinition",
            "6101482e1e28f4d3e6ce61415f55a6abcce1977a"
        ],
        [
            "Definition Protocol := Protocol.",
            "VernacDefinition",
            "30b44de5750db3450eb7bf24ace45d84ff027e05"
        ],
        [
            "Definition plab := plab.",
            "VernacDefinition",
            "3287896dfe68426cd51d217d62695a47323a5c4f"
        ],
        [
            "Definition nodes := nodes.",
            "VernacDefinition",
            "f4500c5dbcb049d9f00c68ae88835b7af1ebf7b9"
        ],
        [
            "Definition coh := coh.",
            "VernacDefinition",
            "574c11cf9760a8b599499c59c78adf3a9e048e96"
        ],
        [
            "Definition snd_trans := snd_trans.",
            "VernacDefinition",
            "b87f99d3fd721fbbe799ab78ad0d6a7b9f0fc955"
        ],
        [
            "Definition rcv_trans := rcv_trans.",
            "VernacDefinition",
            "827e7f261d9e2ca0337edf895f724ef6cf45cb16"
        ],
        [
            "Definition snd_tags p := snd_tags (snd_trans p).",
            "VernacDefinition",
            "22ad09948a296076cb645e83e6250d52b6949187"
        ],
        [
            "Definition rcv_tags p := rcv_tags (rcv_trans p).",
            "VernacDefinition",
            "2a05520b90fcedf7a6f5b0c8c834fc7928d46a97"
        ],
        [
            "Definition snd_uniq := snd_uniq.",
            "VernacDefinition",
            "77f3ed38d856339aab5ef5c082ea721adb282915"
        ],
        [
            "Definition rcv_uniq := rcv_uniq.",
            "VernacDefinition",
            "276b5a1a299f1d4dabe497bb7769b9352784717f"
        ],
        [
            "Definition cohMT d := d = empty_dstatelet.",
            "VernacDefinition",
            "52230f6c54da832a7992ae50fd4fd5536d07cce0"
        ],
        [
            "Lemma pred0v1 d: cohMT d -> valid (dstate d).",
            "VernacStartTheoremProof",
            "5c32ff63589b753cd139774c6158b0ba4b7d4677"
        ],
        [
            "by rewrite /cohMT=>->; apply: valid_mt_state.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma pred0v2 d: cohMT d -> valid (dsoup d).",
            "VernacStartTheoremProof",
            "f1b4ef94d53a92e7ab7de5ac6adf25fedb8998fa"
        ],
        [
            "by rewrite /cohMT=>->; apply: valid_mt_soup.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma pred0v3 d: cohMT d -> dom (dstate d) =i [::].",
            "VernacStartTheoremProof",
            "98fa4b2f5690478aabb6104acd32446aaeafa03b"
        ],
        [
            "by rewrite /cohMT=>->; apply: mt_nodes.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Definition EmptyProtMixin := CohPredMixin pred0v1 pred0v2 pred0v3.",
            "VernacDefinition",
            "fdd801973acb98389604c37818f104e005c6e470"
        ],
        [
            "Definition empty_coh := CohPred EmptyProtMixin.",
            "VernacDefinition",
            "de92e1e1fab11dcd592f2c07971c4215a8111117"
        ],
        [
            "Lemma snd_uniq0 {nodes} {coh : cohpred nodes} : uniq (@Protocols.snd_tags _ coh ([::] : seq (send_trans coh))).",
            "VernacStartTheoremProof",
            "1261b2c56f09574db8e9d7307ca03606d1972e00"
        ],
        [
            "by [].",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma rcv_uniq0 {nodes} {coh : cohpred nodes} : uniq (@Protocols.rcv_tags nodes _ ([::] : seq (receive_trans coh))).",
            "VernacStartTheoremProof",
            "1925a936718a464b5ed8b54ea1e6001179c04e1e"
        ],
        [
            "by [].",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Definition EmptyProt i : protocol := @Protocol (fun _ => pred0) i empty_coh [::] [::] snd_uniq0 rcv_uniq0.",
            "VernacDefinition",
            "4714563f78651c5ff99717988c81467f9f795bbf"
        ],
        [
            "End Exports.",
            "VernacEndSegment",
            "71efedae7ccffd696e1ffe5d8ae6baa8a4484918"
        ],
        [
            "End Exports.",
            "VernacEndSegment",
            "71efedae7ccffd696e1ffe5d8ae6baa8a4484918"
        ],
        [
            "End Protocols.",
            "VernacEndSegment",
            "724d4adbc68c00777020afa79dc7002f0ecefa13"
        ],
        [
            "Export Protocols.Exports.",
            "VernacImport",
            "0c6798e653f6bca2513cb15bee5e792cd724b2c7"
        ]
    ],
    "proofs": [
        {
            "name": "getLocalU",
            "line_nb": 10,
            "steps": [
                {
                    "command": [
                        "move=>V H2; move/um_eta: (H2)=>[v2][F2 _].",
                        "VernacExtend",
                        "8b784377bdc4d565ff66d4cf36a6041e9354c156"
                    ]
                },
                {
                    "command": [
                        "rewrite /getLocal F2/=; case X: (n == m); last by rewrite findU X/=.",
                        "VernacExtend",
                        "3763a4b8db689af316a7372b722bb29806ab4fb6"
                    ]
                },
                {
                    "command": [
                        "by move/eqP: X=>X; subst m; rewrite findU eqxx/=V F2.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "cohVl",
            "line_nb": 44,
            "steps": [
                {
                    "command": [
                        "by case: coh=>p [H1 H2 H3]; apply: H1.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "cohVs",
            "line_nb": 47,
            "steps": [
                {
                    "command": [
                        "by case: coh=>p [H1 H2 H3]; apply: H2.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "cohDom",
            "line_nb": 50,
            "steps": [
                {
                    "command": [
                        "by case: coh=>p [H1 H2 H3]; apply: H3.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "pred0v1",
            "line_nb": 112,
            "steps": [
                {
                    "command": [
                        "by rewrite /cohMT=>->; apply: valid_mt_state.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "pred0v2",
            "line_nb": 115,
            "steps": [
                {
                    "command": [
                        "by rewrite /cohMT=>->; apply: valid_mt_soup.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "pred0v3",
            "line_nb": 118,
            "steps": [
                {
                    "command": [
                        "by rewrite /cohMT=>->; apply: mt_nodes.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "snd_uniq0",
            "line_nb": 123,
            "steps": [
                {
                    "command": [
                        "by [].",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "rcv_uniq0",
            "line_nb": 126,
            "steps": [
                {
                    "command": [
                        "by [].",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        }
    ]
}