{
    "filename": "Core/DepMaps.v",
    "coq_project": "disel",
    "vernac_cmds": [
        [
            "From mathcomp.ssreflect Require Import ssreflect ssrbool ssrnat eqtype ssrfun seq.",
            "VernacRequire",
            "037d2ffdc90053d89d1b918c36daaeab721d2d83"
        ],
        [
            "From mathcomp Require Import path.",
            "VernacRequire",
            "7c70f445c754a2a74114416d587d02e512c693e2"
        ],
        [
            "Require Import Eqdep.",
            "VernacRequire",
            "a499933d0898d4c0e235af789d9252f633426d20"
        ],
        [
            "Require Import Relation_Operators.",
            "VernacRequire",
            "5c09f52be79db9d019c350cc3153659920102fbb"
        ],
        [
            "From fcsl Require Import pred prelude ordtype finmap pcm unionmap heap.",
            "VernacRequire",
            "41347af8188b8bd95ca7fa1d9e375300903274c8"
        ],
        [
            "From DiSeL Require Import Freshness EqTypeX.",
            "VernacRequire",
            "bbc32a76561b7b893ceb98b19def79d9c52eca29"
        ],
        [
            "Set Implicit Arguments.",
            "VernacSetOption",
            "9e84ff8896f028601d8aded48c1d4aebe60aa584"
        ],
        [
            "Unset Strict Implicit.",
            "VernacUnsetOption",
            "2842adaf6959318f2042805935c46f513bdc0348"
        ],
        [
            "Unset Printing Implicit Defensive.",
            "VernacUnsetOption",
            "444e5f0be4b25d9b1fd556943a447ec10046d151"
        ],
        [
            "Module DepMaps.",
            "VernacDefineModule",
            "e67e57039bed0de8ec85ad2f464478f923c7e574"
        ],
        [
            "Section DepMaps.",
            "VernacBeginSection",
            "8175c50d25ac650d5b874c788fe9628abe48de34"
        ],
        [
            "Definition Label := [ordType of nat].",
            "VernacDefinition",
            "bf708c5e751d5a461871ad7aea17aa0f9833a06b"
        ],
        [
            "Variable V : Type.",
            "VernacAssumption",
            "7916504f668edb1889a5aca5d730ced22b8d98ed"
        ],
        [
            "Variable labF: V -> Label.",
            "VernacAssumption",
            "4ba71abd66178e2caa8e41c1b64ed17bff5c8981"
        ],
        [
            "Definition dmDom (u : union_map Label V) : bool := all (fun l => if find l u is Some p then (labF p) == l else false) (dom u).",
            "VernacDefinition",
            "c7e52502f7f14f691cbc17646fbba474d2387ae6"
        ],
        [
            "Record depmap := DepMap { dmap : union_map Label V; pf : dmDom dmap; }.",
            "VernacInductive",
            "e97350a46c1b2b64716d74eb4e712f7f21c45f58"
        ],
        [
            "Section PCMOps.",
            "VernacBeginSection",
            "aa1ddd2af5997ae98b953da5bec968964cc14a88"
        ],
        [
            "Variable dm : depmap.",
            "VernacAssumption",
            "a90fb41c8124f66cb804c50ee6a5300f2452c382"
        ],
        [
            "Lemma dmDom_unit : dmDom Unit.",
            "VernacStartTheoremProof",
            "f6efe05e5b0928e46e316d6491f9a8abbc015f32"
        ],
        [
            "by apply/allP=>l; rewrite dom0.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Definition unit := DepMap dmDom_unit.",
            "VernacDefinition",
            "9c6654b172c549bd5126d2bb621f2234aa14403d"
        ],
        [
            "End PCMOps.",
            "VernacEndSegment",
            "631afe375c1440277b262da0d1611c0f189363ee"
        ],
        [
            "Section DJoin.",
            "VernacBeginSection",
            "c50d826e5d9b05e8c5eb13ccfc38954fa391ca42"
        ],
        [
            "Variables (dm1 dm2 : depmap).",
            "VernacAssumption",
            "d3906affaf9f808e506b02925309a542eff2f98d"
        ],
        [
            "Lemma dmDom_join um1 um2: dmDom um1 -> dmDom um2 -> dmDom (um1 \\+ um2).",
            "VernacStartTheoremProof",
            "542171aacd6f0f7f45e7426da9e7f8d877c0aab2"
        ],
        [
            "case; case W: (valid (um1 \\+ um2)); last first.",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "-",
            "VernacBullet",
            "581cab4bf49fa4b495e569bbda96fc8d28fddcc0"
        ],
        [
            "by move=> _ _; apply/allP=>l; move/dom_valid; rewrite W.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "move/allP=>D1/allP D2; apply/allP=>l.",
            "VernacExtend",
            "d6ebf3361f380a12d5c2c9bbb7ea363132c48b36"
        ],
        [
            "rewrite domUn inE=>/andP[_]/orP; rewrite findUnL//; case=>E; rewrite ?E.",
            "VernacExtend",
            "17fb3a912482fabe4d969e47dbef10cc44237f00"
        ],
        [
            "-",
            "VernacBullet",
            "581cab4bf49fa4b495e569bbda96fc8d28fddcc0"
        ],
        [
            "by apply: D1.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "rewrite joinC in W; case: validUn W=>// _ _ /(_ l E)/negbTE->_.",
            "VernacExtend",
            "712d339e99ee17eb7d5033e19ac614eb3ca6b532"
        ],
        [
            "by apply: D2.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Definition join : depmap := DepMap (dmDom_join (@pf dm1) (@pf dm2)).",
            "VernacDefinition",
            "bf3cdbc7f3b353ae2171beda3558a225738d8dcd"
        ],
        [
            "Definition valid (dm : depmap) := valid (dmap dm).",
            "VernacDefinition",
            "bef2570633424c8b7b0795c3aee3d665b1ec19d1"
        ],
        [
            "End DJoin.",
            "VernacEndSegment",
            "d31e75ffb4c9e0d4cb53ec27476c082f4f3f4eaa"
        ],
        [
            "End DepMaps.",
            "VernacEndSegment",
            "f61d51ae1d0942555d4c14ffeeb02d8341005bb8"
        ],
        [
            "Section PCMLaws.",
            "VernacBeginSection",
            "7120d25dcc72d58d168ed160f3b1356e3cb406a6"
        ],
        [
            "Variables (V : Type) (labF: V -> [ordType of nat]).",
            "VernacAssumption",
            "847bf2d96eba77309cdaff793831c4679762741c"
        ],
        [
            "Implicit Type f : depmap labF.",
            "VernacReserve",
            "3c891461e310908f736cca57f774dde8692a58b5"
        ],
        [
            "Local Notation \"f1 \\+ f2\" := (join f1 f2) (at level 43, left associativity).",
            "VernacNotation",
            "d9f4310697b376dcccd8b7bd6c9c654b6a750f8e"
        ],
        [
            "Local Notation unit := (unit labF).",
            "VernacSyntacticDefinition",
            "6552af7231178c3a4d5d4581062daf42d767b25b"
        ],
        [
            "Lemma joinC f1 f2 : f1 \\+ f2 = f2 \\+ f1.",
            "VernacStartTheoremProof",
            "e66984f753627eb54517ccaed0695d734aea8051"
        ],
        [
            "case: f1 f2=>d1 pf1[d2 pf2]; rewrite /join/=.",
            "VernacExtend",
            "90a2acb29b7a5304b0ab6ba5269c420638ddef63"
        ],
        [
            "move: (dmDom_join pf1 pf2) (dmDom_join pf2 pf1); rewrite joinC=>G1 G2.",
            "VernacExtend",
            "8261237f0cda1915a4077c28869831c5329103ce"
        ],
        [
            "by move: (eq_irrelevance G1 G2)=>->.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma joinCA f1 f2 f3 : f1 \\+ (f2 \\+ f3) = f2 \\+ (f1 \\+ f3).",
            "VernacStartTheoremProof",
            "9c68c59dec71258485908dedb9e2b844486f31ce"
        ],
        [
            "case: f1 f2 f3=>d1 pf1[d2 pf2][d3 pf3]; rewrite /join/=.",
            "VernacExtend",
            "90a2acb29b7a5304b0ab6ba5269c420638ddef63"
        ],
        [
            "move: (dmDom_join pf1 (dmDom_join pf2 pf3)) (dmDom_join pf2 (dmDom_join pf1 pf3)).",
            "VernacExtend",
            "b1b2cb7a3a617cba67460b4eca1f04de3c1cc716"
        ],
        [
            "by rewrite joinCA=>G1 G2; move: (eq_irrelevance G1 G2)=>->.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma joinA f1 f2 f3 : f1 \\+ (f2 \\+ f3) = (f1 \\+ f2) \\+ f3.",
            "VernacStartTheoremProof",
            "69a2689115f897b6968c630d96da3bfb11d12a8b"
        ],
        [
            "case: f1 f2 f3=>d1 pf1[d2 pf2][d3 pf3]; rewrite /join/=.",
            "VernacExtend",
            "90a2acb29b7a5304b0ab6ba5269c420638ddef63"
        ],
        [
            "move: (dmDom_join pf1 (dmDom_join pf2 pf3)) (dmDom_join (dmDom_join pf1 pf2) pf3).",
            "VernacExtend",
            "b1b2cb7a3a617cba67460b4eca1f04de3c1cc716"
        ],
        [
            "by rewrite joinA=>G1 G2; move: (eq_irrelevance G1 G2)=>->.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma validL f1 f2 : valid (f1 \\+ f2) -> valid f1.",
            "VernacStartTheoremProof",
            "174c239b8404cba9bc925a29fefc49805c4d8a48"
        ],
        [
            "by rewrite /join/valid/==>/validL.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma unitL f : unit \\+ f = f.",
            "VernacStartTheoremProof",
            "9bdee2110f9e0c1c8d9b317554abeb1c6650ce63"
        ],
        [
            "rewrite /join/unit/=; case: f=>//=u pf.",
            "VernacExtend",
            "712d339e99ee17eb7d5033e19ac614eb3ca6b532"
        ],
        [
            "move: pf (dmDom_join (dmDom_unit labF) pf); rewrite unitL=>g1 g2.",
            "VernacExtend",
            "8261237f0cda1915a4077c28869831c5329103ce"
        ],
        [
            "by move: (eq_irrelevance g1 g2)=>->.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma validU : valid unit.",
            "VernacStartTheoremProof",
            "34b659acc0a7301a90d9e932d3a60e8a7573f052"
        ],
        [
            "by rewrite /unit/valid/=.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "End PCMLaws.",
            "VernacEndSegment",
            "2d6e8160d8dfc8dd47f1ee415be46abe20502ed2"
        ],
        [
            "Module Exports.",
            "VernacDefineModule",
            "d4a1114ec53f746523a7dec57823f7f03e51fa24"
        ],
        [
            "Section Exports.",
            "VernacBeginSection",
            "3d3d73b16827535e7d0c9fdb92a2f163a05b14f4"
        ],
        [
            "Variable V : Type.",
            "VernacAssumption",
            "7916504f668edb1889a5aca5d730ced22b8d98ed"
        ],
        [
            "Variable labF: V -> Label.",
            "VernacAssumption",
            "4ba71abd66178e2caa8e41c1b64ed17bff5c8981"
        ],
        [
            "Definition depmap := depmap.",
            "VernacDefinition",
            "2aec349ffaf2531f04fc2f0d408c70badd9e864f"
        ],
        [
            "Definition DepMap := DepMap.",
            "VernacDefinition",
            "44854cdd77f4c6a94a2447e6bd07de52f63a47c9"
        ],
        [
            "Lemma dep_unit (d : depmap labF) : dmap d = Unit -> d = unit labF.",
            "VernacStartTheoremProof",
            "51fa5977ba5b33b09d65031744de2b5d9d8101cb"
        ],
        [
            "case: d=>u pf/=; rewrite /unit.",
            "VernacExtend",
            "90a2acb29b7a5304b0ab6ba5269c420638ddef63"
        ],
        [
            "move: (dmDom_unit labF)=>pf' Z; subst u.",
            "VernacExtend",
            "e04353fea2bc230feac3843134f2685c5725592a"
        ],
        [
            "by rewrite (eq_irrelevance pf).",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Coercion dmap := dmap.",
            "VernacDefinition",
            "5b5d3741931cdd390aa024dfed0fdc9c4892d5a5"
        ],
        [
            "Definition ddom (d : depmap labF) := dom (dmap d).",
            "VernacDefinition",
            "c1bb23a29561e0fdb972e869c1e7b6882bd9fc03"
        ],
        [
            "Definition dfind x (d : depmap labF) := find x (dmap d).",
            "VernacDefinition",
            "c7a4fe37f28b6241083d9d8d5a15663f1887de19"
        ],
        [
            "Definition depmap_classPCMMixin := PCMMixin (@joinC V labF) (@joinA V labF) (@unitL V labF) (@validL V labF) (validU labF).",
            "VernacDefinition",
            "20d9ecec81632c753b306708200e84d76691475c"
        ],
        [
            "Canonical depmap_classPCM := Eval hnf in PCM (depmap labF) depmap_classPCMMixin.",
            "VernacDefinition",
            "8986c7e65d1e7cf06e0525782f011cf20b3b0437"
        ],
        [
            "End Exports.",
            "VernacEndSegment",
            "71efedae7ccffd696e1ffe5d8ae6baa8a4484918"
        ],
        [
            "End Exports.",
            "VernacEndSegment",
            "71efedae7ccffd696e1ffe5d8ae6baa8a4484918"
        ],
        [
            "End DepMaps.",
            "VernacEndSegment",
            "f61d51ae1d0942555d4c14ffeeb02d8341005bb8"
        ],
        [
            "Export DepMaps.Exports.",
            "VernacImport",
            "7ecc453a30ce8f028016dcad29750644725f9ab7"
        ]
    ],
    "proofs": [
        {
            "name": "dmDom_unit",
            "line_nb": 18,
            "steps": [
                {
                    "command": [
                        "by apply/allP=>l; rewrite dom0.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "dmDom_join",
            "line_nb": 25,
            "steps": [
                {
                    "command": [
                        "case; case W: (valid (um1 \\+ um2)); last first.",
                        "VernacExtend",
                        "3763a4b8db689af316a7372b722bb29806ab4fb6"
                    ]
                },
                {
                    "command": [
                        "-",
                        "VernacBullet",
                        "581cab4bf49fa4b495e569bbda96fc8d28fddcc0"
                    ]
                },
                {
                    "command": [
                        "by move=> _ _; apply/allP=>l; move/dom_valid; rewrite W.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "move/allP=>D1/allP D2; apply/allP=>l.",
                        "VernacExtend",
                        "d6ebf3361f380a12d5c2c9bbb7ea363132c48b36"
                    ]
                },
                {
                    "command": [
                        "rewrite domUn inE=>/andP[_]/orP; rewrite findUnL//; case=>E; rewrite ?E.",
                        "VernacExtend",
                        "17fb3a912482fabe4d969e47dbef10cc44237f00"
                    ]
                },
                {
                    "command": [
                        "-",
                        "VernacBullet",
                        "581cab4bf49fa4b495e569bbda96fc8d28fddcc0"
                    ]
                },
                {
                    "command": [
                        "by apply: D1.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "rewrite joinC in W; case: validUn W=>// _ _ /(_ l E)/negbTE->_.",
                        "VernacExtend",
                        "712d339e99ee17eb7d5033e19ac614eb3ca6b532"
                    ]
                },
                {
                    "command": [
                        "by apply: D2.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "joinC",
            "line_nb": 45,
            "steps": [
                {
                    "command": [
                        "case: f1 f2=>d1 pf1[d2 pf2]; rewrite /join/=.",
                        "VernacExtend",
                        "90a2acb29b7a5304b0ab6ba5269c420638ddef63"
                    ]
                },
                {
                    "command": [
                        "move: (dmDom_join pf1 pf2) (dmDom_join pf2 pf1); rewrite joinC=>G1 G2.",
                        "VernacExtend",
                        "8261237f0cda1915a4077c28869831c5329103ce"
                    ]
                },
                {
                    "command": [
                        "by move: (eq_irrelevance G1 G2)=>->.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "joinCA",
            "line_nb": 50,
            "steps": [
                {
                    "command": [
                        "case: f1 f2 f3=>d1 pf1[d2 pf2][d3 pf3]; rewrite /join/=.",
                        "VernacExtend",
                        "90a2acb29b7a5304b0ab6ba5269c420638ddef63"
                    ]
                },
                {
                    "command": [
                        "move: (dmDom_join pf1 (dmDom_join pf2 pf3)) (dmDom_join pf2 (dmDom_join pf1 pf3)).",
                        "VernacExtend",
                        "b1b2cb7a3a617cba67460b4eca1f04de3c1cc716"
                    ]
                },
                {
                    "command": [
                        "by rewrite joinCA=>G1 G2; move: (eq_irrelevance G1 G2)=>->.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "joinA",
            "line_nb": 55,
            "steps": [
                {
                    "command": [
                        "case: f1 f2 f3=>d1 pf1[d2 pf2][d3 pf3]; rewrite /join/=.",
                        "VernacExtend",
                        "90a2acb29b7a5304b0ab6ba5269c420638ddef63"
                    ]
                },
                {
                    "command": [
                        "move: (dmDom_join pf1 (dmDom_join pf2 pf3)) (dmDom_join (dmDom_join pf1 pf2) pf3).",
                        "VernacExtend",
                        "b1b2cb7a3a617cba67460b4eca1f04de3c1cc716"
                    ]
                },
                {
                    "command": [
                        "by rewrite joinA=>G1 G2; move: (eq_irrelevance G1 G2)=>->.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "unitL",
            "line_nb": 63,
            "steps": [
                {
                    "command": [
                        "rewrite /join/unit/=; case: f=>//=u pf.",
                        "VernacExtend",
                        "712d339e99ee17eb7d5033e19ac614eb3ca6b532"
                    ]
                },
                {
                    "command": [
                        "move: pf (dmDom_join (dmDom_unit labF) pf); rewrite unitL=>g1 g2.",
                        "VernacExtend",
                        "8261237f0cda1915a4077c28869831c5329103ce"
                    ]
                },
                {
                    "command": [
                        "by move: (eq_irrelevance g1 g2)=>->.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "validU",
            "line_nb": 68,
            "steps": [
                {
                    "command": [
                        "by rewrite /unit/valid/=.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "dep_unit",
            "line_nb": 78,
            "steps": [
                {
                    "command": [
                        "case: d=>u pf/=; rewrite /unit.",
                        "VernacExtend",
                        "90a2acb29b7a5304b0ab6ba5269c420638ddef63"
                    ]
                },
                {
                    "command": [
                        "move: (dmDom_unit labF)=>pf' Z; subst u.",
                        "VernacExtend",
                        "e04353fea2bc230feac3843134f2685c5725592a"
                    ]
                },
                {
                    "command": [
                        "by rewrite (eq_irrelevance pf).",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        }
    ]
}