{
    "filename": "ChargeCore/src/ChargeCore/Open/Stack.v",
    "coq_project": "ChargeCore",
    "vernac_cmds": [
        [
            "Require Import Coq.Logic.FunctionalExtensionality.",
            "VernacRequire",
            "995f7da90b97352c349ef6dde6ab058f3b7f46f2"
        ],
        [
            "Require Import ExtLib.Core.RelDec.",
            "VernacRequire",
            "0e3bcdc14736b545ca698ea9a09e10feafbc33d4"
        ],
        [
            "Require Import ExtLib.Tactics.Consider.",
            "VernacRequire",
            "d7f1290b398c3a51484b77ae4b362f89ed2a3ede"
        ],
        [
            "Set Implicit Arguments.",
            "VernacSetOption",
            "9e84ff8896f028601d8aded48c1d4aebe60aa584"
        ],
        [
            "Unset Strict Implicit.",
            "VernacUnsetOption",
            "2842adaf6959318f2042805935c46f513bdc0348"
        ],
        [
            "Set Primitive Projections.",
            "VernacSetOption",
            "406a288444e006cb39d6f47b89ca5812fa2e9746"
        ],
        [
            "Set Maximal Implicit Insertion.",
            "VernacSetOption",
            "74a1aa9246bc7e55f0ede6e97269d0019e15194e"
        ],
        [
            "Set Universe Polymorphism.",
            "VernacSetOption",
            "d7b83ddb25e5d5951629c77539c924dab3e12260"
        ],
        [
            "Class ValNull (val : Type) := { null : val }.",
            "VernacInductive",
            "90348a7096cf55cd78ccfe44ddbd24d5546db100"
        ],
        [
            "Section Defs.",
            "VernacBeginSection",
            "0538f5188d53d77ea5d8ba0fff0a7cfc5485e666"
        ],
        [
            "Context {A val : Type}.",
            "VernacContext",
            "6cac0a695cde51c78a49e61a7a5eacf5680a65c3"
        ],
        [
            "Context {HA : RelDec (@eq A)} {HR : RelDec_Correct HA}.",
            "VernacContext",
            "b4c26da59f6d582cf93e06596c27068e63ab4652"
        ],
        [
            "Context {VNB : ValNull val}.",
            "VernacContext",
            "919963d2a114700467d68a41e694687e2ba34c69"
        ],
        [
            "Definition stack := A -> val.",
            "VernacDefinition",
            "f343d7fe791ad19ed14fdd8e17acdfe8c8106cf1"
        ],
        [
            "Definition stack_empty : stack := fun x => null.",
            "VernacDefinition",
            "741fc93cf0fb59dda4000bff66811513727cad38"
        ],
        [
            "Definition stack_get (x : A) : stack -> val := fun s => s x.",
            "VernacDefinition",
            "eaf4ca4e2e8362db735d9cb468717b8d88b4eacc"
        ],
        [
            "Definition stack_add x v s : stack := fun x' => if x' ?[ eq ] x then v else s x'.",
            "VernacDefinition",
            "cf9144404789f3479909c527fdf8a214d95e112a"
        ],
        [
            "Lemma stack_lookup_add (s : stack) (x : A) (v : val) : ((stack_add x v s) : stack) x = v.",
            "VernacStartTheoremProof",
            "1c63a9ed834e0a56f9bd1f9088c03b5501979308"
        ],
        [
            "unfold stack_add; consider (x ?[ eq ] x); intros H; [reflexivity|congruence].",
            "VernacExtend",
            "c13caf62244e6d1725d66b24fc50bc43e97861b3"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma stack_lookup_add2 (x y : A) (v : val) (s : stack) (Hneq: x <> y) : (stack_add x v s) y = s y.",
            "VernacStartTheoremProof",
            "85dbd59d6abeeecee1daf17583636c7ae23d4758"
        ],
        [
            "unfold stack_add.",
            "VernacExtend",
            "97109355080c4539715f7c56a72099bd8facb027"
        ],
        [
            "consider (y ?[ eq ] x); intros; [congruence|reflexivity].",
            "VernacExtend",
            "0bf80b0fc1cdac5e50648e1af6858c198e3ef4e3"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma stack_add_same (s: stack) x: stack_add x (s x) s = s.",
            "VernacStartTheoremProof",
            "2c53c05e88cff821bee6f6af119de62ea736292a"
        ],
        [
            "apply functional_extensionality.",
            "VernacExtend",
            "9c7e1fe6d23159d5580801709782c72a6cb0684f"
        ],
        [
            "intro x'.",
            "VernacExtend",
            "bafe1dae7254d9b2a46752a6689e1138a0ec4cb8"
        ],
        [
            "unfold stack_add.",
            "VernacExtend",
            "97109355080c4539715f7c56a72099bd8facb027"
        ],
        [
            "consider (x' ?[ eq ] x); intros; subst; reflexivity.",
            "VernacExtend",
            "009c0941d658eac028c965024af1e8074521db93"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma stack_add_overwrite (s: stack) x v v': stack_add x v (stack_add x v' s) = stack_add x v s.",
            "VernacStartTheoremProof",
            "0de51789d4e234838289981f675ce32519001c1f"
        ],
        [
            "apply functional_extensionality.",
            "VernacExtend",
            "9c7e1fe6d23159d5580801709782c72a6cb0684f"
        ],
        [
            "intro x'.",
            "VernacExtend",
            "bafe1dae7254d9b2a46752a6689e1138a0ec4cb8"
        ],
        [
            "unfold stack_add.",
            "VernacExtend",
            "97109355080c4539715f7c56a72099bd8facb027"
        ],
        [
            "consider (x' ?[ eq ] x); intros; reflexivity.",
            "VernacExtend",
            "66dd73305109c4d4ba38c784f0070ed87a9ddfaf"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma stack_add_val_eq (s : stack) (x : A) v1 v2 (Hs : stack_add x v1 s = stack_add x v2 s) : v1 = v2.",
            "VernacStartTheoremProof",
            "a1d75f0482366807e057fc7ed1e7f0e7359a104e"
        ],
        [
            "assert (stack_add x v1 s x = stack_add x v2 s x).",
            "VernacExtend",
            "81ad1f36b84fec87cb5d13f561c0c5ea20e7fe7b"
        ],
        [
            "rewrite Hs.",
            "VernacExtend",
            "ddea6993e3e1146e762703b9c4c45fb5767a9a44"
        ],
        [
            "reflexivity.",
            "VernacExtend",
            "5cd1ae044f26cd6d89a5a5147c1d4fc5fc719d83"
        ],
        [
            "do 2 rewrite stack_lookup_add in H.",
            "VernacExtend",
            "8419462d459b497e77abd222c7811bb71bde0d5e"
        ],
        [
            "apply H.",
            "VernacExtend",
            "4b47b71ad0f800d57cbdc591d68949e07decb540"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "End Defs.",
            "VernacEndSegment",
            "e5c42fff3384ffa717a0ec819d3b7eaff5043179"
        ],
        [
            "Arguments stack _ _ : clear implicits, assert.",
            "VernacArguments",
            "218722881dd78bfe95a78aeb85da9cd33a4391d6"
        ],
        [
            "Arguments stack_empty A val {_}.",
            "VernacArguments",
            "cea6de32bf55370121696f71997a6ae8f59fb7cd"
        ],
        [
            "Hint Rewrite @stack_lookup_add @stack_add_same @stack_add_overwrite : stack.",
            "VernacExtend",
            "e9c6cfcbae912d7836474e83c0448c9bb2f36f2e"
        ],
        [
            "Hint Rewrite @stack_lookup_add2 using solve [auto] : stack.",
            "VernacExtend",
            "0eedfe0f0ece12a3e4507e9ec1f777f0dab6cb47"
        ]
    ],
    "proofs": [
        {
            "name": "stack_lookup_add",
            "line_nb": 17,
            "steps": [
                {
                    "command": [
                        "unfold stack_add; consider (x ?[ eq ] x); intros H; [reflexivity|congruence].",
                        "VernacExtend",
                        "c13caf62244e6d1725d66b24fc50bc43e97861b3"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "stack_lookup_add2",
            "line_nb": 20,
            "steps": [
                {
                    "command": [
                        "unfold stack_add.",
                        "VernacExtend",
                        "97109355080c4539715f7c56a72099bd8facb027"
                    ]
                },
                {
                    "command": [
                        "consider (y ?[ eq ] x); intros; [congruence|reflexivity].",
                        "VernacExtend",
                        "0bf80b0fc1cdac5e50648e1af6858c198e3ef4e3"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "stack_add_same",
            "line_nb": 24,
            "steps": [
                {
                    "command": [
                        "apply functional_extensionality.",
                        "VernacExtend",
                        "9c7e1fe6d23159d5580801709782c72a6cb0684f"
                    ]
                },
                {
                    "command": [
                        "intro x'.",
                        "VernacExtend",
                        "bafe1dae7254d9b2a46752a6689e1138a0ec4cb8"
                    ]
                },
                {
                    "command": [
                        "unfold stack_add.",
                        "VernacExtend",
                        "97109355080c4539715f7c56a72099bd8facb027"
                    ]
                },
                {
                    "command": [
                        "consider (x' ?[ eq ] x); intros; subst; reflexivity.",
                        "VernacExtend",
                        "009c0941d658eac028c965024af1e8074521db93"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "stack_add_overwrite",
            "line_nb": 30,
            "steps": [
                {
                    "command": [
                        "apply functional_extensionality.",
                        "VernacExtend",
                        "9c7e1fe6d23159d5580801709782c72a6cb0684f"
                    ]
                },
                {
                    "command": [
                        "intro x'.",
                        "VernacExtend",
                        "bafe1dae7254d9b2a46752a6689e1138a0ec4cb8"
                    ]
                },
                {
                    "command": [
                        "unfold stack_add.",
                        "VernacExtend",
                        "97109355080c4539715f7c56a72099bd8facb027"
                    ]
                },
                {
                    "command": [
                        "consider (x' ?[ eq ] x); intros; reflexivity.",
                        "VernacExtend",
                        "66dd73305109c4d4ba38c784f0070ed87a9ddfaf"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "stack_add_val_eq",
            "line_nb": 36,
            "steps": [
                {
                    "command": [
                        "assert (stack_add x v1 s x = stack_add x v2 s x).",
                        "VernacExtend",
                        "81ad1f36b84fec87cb5d13f561c0c5ea20e7fe7b"
                    ]
                },
                {
                    "command": [
                        "rewrite Hs.",
                        "VernacExtend",
                        "ddea6993e3e1146e762703b9c4c45fb5767a9a44"
                    ]
                },
                {
                    "command": [
                        "reflexivity.",
                        "VernacExtend",
                        "5cd1ae044f26cd6d89a5a5147c1d4fc5fc719d83"
                    ]
                },
                {
                    "command": [
                        "do 2 rewrite stack_lookup_add in H.",
                        "VernacExtend",
                        "8419462d459b497e77abd222c7811bb71bde0d5e"
                    ]
                },
                {
                    "command": [
                        "apply H.",
                        "VernacExtend",
                        "4b47b71ad0f800d57cbdc591d68949e07decb540"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        }
    ]
}