{
    "filename": "ChargeCore/src/ChargeCore/Open/Open.v",
    "coq_project": "ChargeCore",
    "vernac_cmds": [
        [
            "Require Import ChargeCore.Open.Stack.",
            "VernacRequire",
            "7432695351aa25fa831ceccc78fcc5c0fba935e1"
        ],
        [
            "Require Import Coq.Lists.List Coq.Logic.FunctionalExtensionality.",
            "VernacRequire",
            "976aea10d99c408acb1093065aedba29d67a4dcd"
        ],
        [
            "Require Import Coq.Classes.RelationClasses.",
            "VernacRequire",
            "e1e9fb5bb83f789dcff9c0bfa33e2d359b0caa70"
        ],
        [
            "Require Import ExtLib.Core.RelDec.",
            "VernacRequire",
            "0e3bcdc14736b545ca698ea9a09e10feafbc33d4"
        ],
        [
            "Set Implicit Arguments.",
            "VernacSetOption",
            "9e84ff8896f028601d8aded48c1d4aebe60aa584"
        ],
        [
            "Unset Strict Implicit.",
            "VernacUnsetOption",
            "2842adaf6959318f2042805935c46f513bdc0348"
        ],
        [
            "Set Maximal Implicit Insertion.",
            "VernacSetOption",
            "74a1aa9246bc7e55f0ede6e97269d0019e15194e"
        ],
        [
            "Section Expr.",
            "VernacBeginSection",
            "8c5a98846bcf6be4195596fabc62b3b838e8d760"
        ],
        [
            "Polymorphic Definition OpenType := Type.",
            "VernacDefinition",
            "26272fa2367254d71146977171ad550ea67b7a3a"
        ],
        [
            "Polymorphic Context {A val : OpenType} {HR : RelDec (@eq A)} {HROk : RelDec_Correct HR}.",
            "VernacContext",
            "2892599dfbe58ff13dabb328561322acba42b580"
        ],
        [
            "Polymorphic Context {V : ValNull val}.",
            "VernacContext",
            "d24bac0e412054c679b97f87ceb479e9763dca8d"
        ],
        [
            "Polymorphic Definition open B : Type := stack A val -> B.",
            "VernacDefinition",
            "897e5221db92feec1b1d2690f3f901703fa2a28d"
        ],
        [
            "Polymorphic Program Definition lift {A B} (f : A -> B) (a : open A) : open B := fun x => f (a x).",
            "VernacDefinition",
            "6db07613ac6d7063c5d5614106aad5025bc91640"
        ],
        [
            "Polymorphic Definition expr := open val.",
            "VernacDefinition",
            "9115c88856b98b12c6802e5d337719a8911a016b"
        ],
        [
            "Polymorphic Definition rel_open {X} : open X -> open X -> Prop := fun e1 e2 => forall s, e1 s = e2 s.",
            "VernacDefinition",
            "20ac9e7e6dd71aa2a544c59b4b2bf8cc4854ddef"
        ],
        [
            "Polymorphic Instance OpenEquivalence {X} : Equivalence (@rel_open X).",
            "VernacInstance",
            "52de870a7aaccaf145b25661bbb3cdf42f121021"
        ],
        [
            "split; intuition congruence.",
            "VernacExtend",
            "fc5703d2785207a618b1b727c25b88bafc6c0820"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Polymorphic Definition open_const {B : Type} (b : B) : open B := fun s => b.",
            "VernacDefinition",
            "13d2558ba174cf126484b1b4b122ad75f61939c3"
        ],
        [
            "Polymorphic Definition V_expr (v : val) : expr := fun s => v.",
            "VernacDefinition",
            "dd3af554ad72ff00d6f9b61a0d0868baa1340c01"
        ],
        [
            "Polymorphic Definition var_expr (x : A) : expr := fun s => s x.",
            "VernacDefinition",
            "87d1f54a2615d6a23c096a7bdd6f0e75be9c59d7"
        ],
        [
            "Polymorphic Definition empty_open : expr := fun x => null.",
            "VernacDefinition",
            "3eefeeb90f389100862cc34ce3c250e6dcd0b1f2"
        ],
        [
            "Polymorphic Definition uncurry {A B C} (f : A -> B -> C) : (A * B) -> C := fun x => f (fst x) (snd x).",
            "VernacDefinition",
            "7909d837bde03bf460f17d75287507cad41d599e"
        ],
        [
            "Polymorphic Definition curry {A B C} (f : A * B -> C) : A -> B -> C := fun x y => f (x, y).",
            "VernacDefinition",
            "75a889e261fd3de0a975bc622b376e22fb0f7e7e"
        ],
        [
            "Polymorphic Program Definition opair {B C} (b : open B) (c : open C) : open ((B * C)%type) := fun x => (b x, c x).",
            "VernacDefinition",
            "6c789e5152cbe64e6f881233f2b29ed436793a3e"
        ],
        [
            "End Expr.",
            "VernacEndSegment",
            "2ad5260997c416186fd8ab6e5db3bc7a1f2da032"
        ],
        [
            "Section SimultAdd.",
            "VernacBeginSection",
            "1f521335f8a2c256618c8f97f3575ffe2ff7ff29"
        ],
        [
            "Context {A val} {HR : RelDec (@eq A)} {V: ValNull val}.",
            "VernacContext",
            "6b294b9a909cb0853be6b31c934020f00a363794"
        ],
        [
            "End SimultAdd.",
            "VernacEndSegment",
            "1f8f72b4706111e40aa99c2d99ff885a1a3bd167"
        ]
    ],
    "proofs": [
        {
            "name": "OpenEquivalence",
            "line_nb": 15,
            "steps": [
                {
                    "command": [
                        "split; intuition congruence.",
                        "VernacExtend",
                        "fc5703d2785207a618b1b727c25b88bafc6c0820"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        }
    ]
}