{
    "filename": "ListProps.v",
    "coq_project": "buchberger",
    "vernac_cmds": [
        [
            "Require Import List.",
            "VernacRequire",
            "d9bcce4a390afeb160107bf87c6f7abe3d82c6d6"
        ],
        [
            "Lemma map_in : forall (A B : Set) (f : A -> B) (b : B) (xs : list A), In b (map f xs) -> ex (fun a : A => b = f a /\\ In a xs).",
            "VernacStartTheoremProof",
            "89698373ba6c09a5b771d49f8a66e0773057c9a9"
        ],
        [
            "intros A B f b xs; elim xs; simpl in |- *; auto.",
            "VernacExtend",
            "c8067150cbb5720f682be6ed4e35bc5e07649f95"
        ],
        [
            "intros H'; elim H'; auto.",
            "VernacExtend",
            "967b347e723ab57aaf37952803515005ab4e5f91"
        ],
        [
            "intros a l H' H'0; elim H'0; [ intros H'1; clear H'0 | intros H'1; clear H'0 ]; auto.",
            "VernacExtend",
            "7a5f40defd780a735b02846b75bc4e107e8cb1ba"
        ],
        [
            "exists a; split; auto.",
            "VernacExtend",
            "6ced52e045930ee310d935c747875e269f31e154"
        ],
        [
            "elim H'; [ intros a0 E; elim E; intros H'2 H'3; clear E H' | clear H' ]; auto.",
            "VernacExtend",
            "c98767d4a2b292c94e52794d0e15024a18edbcb6"
        ],
        [
            "exists a0; split; auto.",
            "VernacExtend",
            "6af3ea070f7058ca5f8965ac49e61e78a00b68d9"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma map_app : forall (A B : Set) (f : A -> B) (l1 l2 : list A), map f (l1 ++ l2) = map f l1 ++ map f l2.",
            "VernacStartTheoremProof",
            "095d0ba12f487761a72785e9de2bdf23cdee37b0"
        ],
        [
            "intros A B f l1; elim l1; simpl in |- *; auto with datatypes.",
            "VernacExtend",
            "d7b411d22fcb98112ce938b21090df90387920a1"
        ],
        [
            "intros a l H' l2; rewrite H'; auto.",
            "VernacExtend",
            "b59c68b473243870b3d9958b5c69f3b1dba00538"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma map_rev : forall (A B : Set) (f : A -> B) (l : list A), map f (rev l) = rev (map f l).",
            "VernacStartTheoremProof",
            "e4243237d35c0ff9f0116d7b555005e6b6fcf7e6"
        ],
        [
            "intros A B f l; elim l; simpl in |- *; auto.",
            "VernacExtend",
            "0cbd8c88a22f9f43a3873f0471b00c5dc017caad"
        ],
        [
            "intros a l0 H'; rewrite <- H'; simpl in |- *; auto.",
            "VernacExtend",
            "a36149d908900d2cd5b6fe2ae772cee4114ca8f7"
        ],
        [
            "apply trans_equal with (y := map f (rev l0) ++ map f (a :: nil)); auto.",
            "VernacExtend",
            "f68483def7640a39317e5840015b54d4f04d2f69"
        ],
        [
            "apply map_app; auto.",
            "VernacExtend",
            "0d813d64f192ada4a1969180e257b88c22519846"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma rev_in : forall (A : Set) (a : A) (l : list A), In a (rev l) -> In a l.",
            "VernacStartTheoremProof",
            "5801797735b376c69b31403dc7b79d2afeea1554"
        ],
        [
            "intros A a l; elim l; simpl in |- *; auto.",
            "VernacExtend",
            "146e6d4f26f01544a138034bb3f2d517fa0e40b3"
        ],
        [
            "intros a0 l0 H' H'0.",
            "VernacExtend",
            "3b4abd031a818219b34a533462dd576ca6ed138b"
        ],
        [
            "case (in_app_or _ _ _ H'0); simpl in |- *; intros H'1; auto.",
            "VernacExtend",
            "ba3e25cd80778ecdbd8db0af9a7d3593660d90f4"
        ],
        [
            "elim H'1; auto.",
            "VernacExtend",
            "a28a7e5efabf16f05a51df42df2e30fdcdc66c02"
        ],
        [
            "intros H'2; elim H'2.",
            "VernacExtend",
            "9ccb574736806ff71e20950a2aa488d13815c88f"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma in_rev : forall (A : Set) (a : A) (l : list A), In a l -> In a (rev l).",
            "VernacStartTheoremProof",
            "d33de5f47b4deb5576c2d245a48a5b9e0c0e8a65"
        ],
        [
            "intros A a l H'.",
            "VernacExtend",
            "7fd1989db70771a77a7976575d5662445127298a"
        ],
        [
            "apply rev_in with (A := A); auto.",
            "VernacExtend",
            "d5e8f5e97db1a2e864ca5e6e79825186dfc7a061"
        ],
        [
            "rewrite (rev_involutive l); auto.",
            "VernacExtend",
            "4e30c3be0c5617fe9fae9cd2f60243964c20c62c"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ]
    ],
    "proofs": [
        {
            "name": "map_in",
            "line_nb": 1,
            "steps": [
                {
                    "command": [
                        "intros A B f b xs; elim xs; simpl in |- *; auto.",
                        "VernacExtend",
                        "c8067150cbb5720f682be6ed4e35bc5e07649f95"
                    ]
                },
                {
                    "command": [
                        "intros H'; elim H'; auto.",
                        "VernacExtend",
                        "967b347e723ab57aaf37952803515005ab4e5f91"
                    ]
                },
                {
                    "command": [
                        "intros a l H' H'0; elim H'0; [ intros H'1; clear H'0 | intros H'1; clear H'0 ]; auto.",
                        "VernacExtend",
                        "7a5f40defd780a735b02846b75bc4e107e8cb1ba"
                    ]
                },
                {
                    "command": [
                        "exists a; split; auto.",
                        "VernacExtend",
                        "6ced52e045930ee310d935c747875e269f31e154"
                    ]
                },
                {
                    "command": [
                        "elim H'; [ intros a0 E; elim E; intros H'2 H'3; clear E H' | clear H' ]; auto.",
                        "VernacExtend",
                        "c98767d4a2b292c94e52794d0e15024a18edbcb6"
                    ]
                },
                {
                    "command": [
                        "exists a0; split; auto.",
                        "VernacExtend",
                        "6af3ea070f7058ca5f8965ac49e61e78a00b68d9"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "map_app",
            "line_nb": 9,
            "steps": [
                {
                    "command": [
                        "intros A B f l1; elim l1; simpl in |- *; auto with datatypes.",
                        "VernacExtend",
                        "d7b411d22fcb98112ce938b21090df90387920a1"
                    ]
                },
                {
                    "command": [
                        "intros a l H' l2; rewrite H'; auto.",
                        "VernacExtend",
                        "b59c68b473243870b3d9958b5c69f3b1dba00538"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "map_rev",
            "line_nb": 13,
            "steps": [
                {
                    "command": [
                        "intros A B f l; elim l; simpl in |- *; auto.",
                        "VernacExtend",
                        "0cbd8c88a22f9f43a3873f0471b00c5dc017caad"
                    ]
                },
                {
                    "command": [
                        "intros a l0 H'; rewrite <- H'; simpl in |- *; auto.",
                        "VernacExtend",
                        "a36149d908900d2cd5b6fe2ae772cee4114ca8f7"
                    ]
                },
                {
                    "command": [
                        "apply trans_equal with (y := map f (rev l0) ++ map f (a :: nil)); auto.",
                        "VernacExtend",
                        "f68483def7640a39317e5840015b54d4f04d2f69"
                    ]
                },
                {
                    "command": [
                        "apply map_app; auto.",
                        "VernacExtend",
                        "0d813d64f192ada4a1969180e257b88c22519846"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "rev_in",
            "line_nb": 19,
            "steps": [
                {
                    "command": [
                        "intros A a l; elim l; simpl in |- *; auto.",
                        "VernacExtend",
                        "146e6d4f26f01544a138034bb3f2d517fa0e40b3"
                    ]
                },
                {
                    "command": [
                        "intros a0 l0 H' H'0.",
                        "VernacExtend",
                        "3b4abd031a818219b34a533462dd576ca6ed138b"
                    ]
                },
                {
                    "command": [
                        "case (in_app_or _ _ _ H'0); simpl in |- *; intros H'1; auto.",
                        "VernacExtend",
                        "ba3e25cd80778ecdbd8db0af9a7d3593660d90f4"
                    ]
                },
                {
                    "command": [
                        "elim H'1; auto.",
                        "VernacExtend",
                        "a28a7e5efabf16f05a51df42df2e30fdcdc66c02"
                    ]
                },
                {
                    "command": [
                        "intros H'2; elim H'2.",
                        "VernacExtend",
                        "9ccb574736806ff71e20950a2aa488d13815c88f"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "in_rev",
            "line_nb": 26,
            "steps": [
                {
                    "command": [
                        "intros A a l H'.",
                        "VernacExtend",
                        "7fd1989db70771a77a7976575d5662445127298a"
                    ]
                },
                {
                    "command": [
                        "apply rev_in with (A := A); auto.",
                        "VernacExtend",
                        "d5e8f5e97db1a2e864ca5e6e79825186dfc7a061"
                    ]
                },
                {
                    "command": [
                        "rewrite (rev_involutive l); auto.",
                        "VernacExtend",
                        "4e30c3be0c5617fe9fae9cd2f60243964c20c62c"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        }
    ]
}