{
    "filename": "hoarelogic.v",
    "coq_project": "hoare-tut",
    "vernac_cmds": [
        [
            "Set Implicit Arguments.",
            "VernacSetOption",
            "9e84ff8896f028601d8aded48c1d4aebe60aa584"
        ],
        [
            "Require Export hoarelogicsemantics.",
            "VernacRequire",
            "fd9b824ec9b22eea24c5fc58d6f3a1c3ab13f759"
        ],
        [
            "Require Import partialhoarelogic.",
            "VernacRequire",
            "c11d3b18195f2649ff969c124bdb76794302ee87"
        ],
        [
            "Require Import totalhoarelogic.",
            "VernacRequire",
            "4667055be4b6b447815648644448c849e621831d"
        ],
        [
            "Module HoareLogic(Ex: ExprLang)<: HoareLogicSem with Module E:=Ex.",
            "VernacDefineModule",
            "7fdb0768d8050cbf1d034391d2ca6a99d83c593f"
        ],
        [
            "Module E:=Ex.",
            "VernacDefineModule",
            "28dc96855d6b95d4c92b16404ebb44e44cce770c"
        ],
        [
            "Module HLD <: HoareLogicDefs with Module E:=E.",
            "VernacDefineModule",
            "b197f9d7f97b09223ab9f728ccdb970039725090"
        ],
        [
            "Module E:=E.",
            "VernacDefineModule",
            "0721132e4e42ca4befe6b33d826e78193fe1d429"
        ],
        [
            "Inductive ImpProg: Type := | Iskip: ImpProg | Iset (A:Type) (v:E.Var A) (expr:E.Expr A): ImpProg | Iif (cond:E.Expr bool) (p1 p2:ImpProg): ImpProg | Iseq (p1 p2:ImpProg): ImpProg | Iwhile (cond:E.Expr bool) (p:ImpProg): ImpProg.",
            "VernacInductive",
            "f5065ff49ea8a171a4d8bd606f25f266dbb7042c"
        ],
        [
            "Inductive exec: E.Env -> ImpProg -> E.Env -> Prop := | exec_Iskip: forall e, (exec e Iskip e) | exec_Iset: forall (A:Type) e x (expr: E.Expr A), (exec e (Iset x expr) (E.upd x (E.eval expr e) e)) | exec_Iif: forall e (cond: E.Expr bool) p1 p2 e', (exec e (if (E.eval cond e) then p1 else p2) e') -> (exec e (Iif cond p1 p2) e') | exec_Iseq: forall e p1 p2 e' e'', (exec e p1 e') -> (exec e' p2 e'') -> (exec e (Iseq p1 p2) e'') | exec_Iwhile: forall e cond p e', (exec e (Iif cond (Iseq p (Iwhile cond p)) Iskip) e') -> (exec e (Iwhile cond p) e').",
            "VernacInductive",
            "67fb93d373195246c6cb70582fa41fc8ad7dc33b"
        ],
        [
            "Lemma exec_Iif_true: forall e cond p1 p2 e', (E.eval cond e)=true -> (exec e p1 e') -> (exec e (Iif cond p1 p2) e').",
            "VernacStartTheoremProof",
            "7c680f18c6cb0cb71407665a54e1367e24d45716"
        ],
        [
            "intros e cond p1 p2 e' H1 H2.",
            "VernacExtend",
            "f4762f1c3fb8b029d021635750d0cea0e69f9f48"
        ],
        [
            "apply exec_Iif.",
            "VernacExtend",
            "780ad9b60c8cfe9134d33804e4c1526a8e3e5f0d"
        ],
        [
            "rewrite H1; auto.",
            "VernacExtend",
            "1413124b63144a92c2b8c7e916995d6cd3746a77"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma exec_Iif_false: forall e cond p1 p2 e', (E.eval cond e)=false -> (exec e p2 e') -> (exec e (Iif cond p1 p2) e').",
            "VernacStartTheoremProof",
            "425009a5ae92f2bffdf7754bfb57c0cdf4aaf8ed"
        ],
        [
            "intros e cond p1 p2 e' H1 H2.",
            "VernacExtend",
            "f4762f1c3fb8b029d021635750d0cea0e69f9f48"
        ],
        [
            "apply exec_Iif.",
            "VernacExtend",
            "780ad9b60c8cfe9134d33804e4c1526a8e3e5f0d"
        ],
        [
            "rewrite H1; auto.",
            "VernacExtend",
            "1413124b63144a92c2b8c7e916995d6cd3746a77"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Definition Pred := E.Env -> Prop.",
            "VernacDefinition",
            "962e0b80b068f61f158d3816af619fdb0e154641"
        ],
        [
            "Definition wlp: ImpProg -> Pred -> Pred := fun prog post e => (forall e', (exec e prog e') -> (post e')).",
            "VernacDefinition",
            "8bc1a55d18f89a9d524461e8eeba9e07f52b5cb9"
        ],
        [
            "Definition wp: ImpProg -> Pred -> Pred := fun prog post e => exists e', (exec e prog e') /\\ (post e').",
            "VernacDefinition",
            "34b71286fdd77960673585e329d01ec28ef1696a"
        ],
        [
            "Notation \"p |= q\" := (forall e, (p e) -> (q e)) (at level 80, no associativity).",
            "VernacNotation",
            "61f426f3480853905a58dba51539995c323547fe"
        ],
        [
            "Notation \"p {= post =}\" := (wlp p post) (at level 70).",
            "VernacNotation",
            "1c2c2b7c771c803684d5f97c8c020c3532b1e65e"
        ],
        [
            "Notation \"p [= post =]\" := (wp p post) (at level 70).",
            "VernacNotation",
            "7d74f6d8db7bdc21312df184ce21536e20f28206"
        ],
        [
            "End HLD.",
            "VernacEndSegment",
            "7a68f2de279dca70c505e1e4437c354831530d31"
        ],
        [
            "Export HLD.",
            "VernacImport",
            "e4499d00e01577e4ec4063bf1804394e4f4d6c2b"
        ],
        [
            "Module PHL<: HoareProofSystem := PartialHoareLogic(HLD).",
            "VernacDefineModule",
            "f92b206638af4ae4ee4d5d810fe9c1ed4b61a781"
        ],
        [
            "Module THL<: HoareProofSystem := TotalHoareLogic(HLD).",
            "VernacDefineModule",
            "6569f3d129a0eb4fb10f7e78466007955bad9184"
        ],
        [
            "Import THL.",
            "VernacImport",
            "55f7d5c5ae71b88d2fe38fd5aa8608f8df1b1dae"
        ],
        [
            "Lemma wp_entails_wlp: forall prog post, prog [= post =] |= prog {= post =}.",
            "VernacStartTheoremProof",
            "a6c97f8939b8a92e411c81c2fec2f7a1c4ead37d"
        ],
        [
            "unfold wp, wlp.",
            "VernacExtend",
            "942cf4b3d8fed465d1974fe37065cab74b7278d3"
        ],
        [
            "intros prog post e H e' H'.",
            "VernacExtend",
            "cc162bebdd5d3187ec2b4338da4c24b33a482d46"
        ],
        [
            "dec2 e0 H.",
            "VernacExtend",
            "e7d09836f6287fe027ee5b414c359616200091d4"
        ],
        [
            "dec2 H0 H.",
            "VernacExtend",
            "54c63037e3b8adcf91d8c2374ecb16def3366067"
        ],
        [
            "rewrite (exec_deterministic H' H0).",
            "VernacExtend",
            "10cd88b7f820b7aa536e03e1f8fb319f9f66698b"
        ],
        [
            "auto.",
            "VernacExtend",
            "1f09da0addd069b3b65326f8c71967acc1e985af"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "End HoareLogic.",
            "VernacEndSegment",
            "d28ecef24c2c5348da898ed2d573505f63369dc0"
        ]
    ],
    "proofs": [
        {
            "name": "exec_Iif_true",
            "line_nb": 10,
            "steps": [
                {
                    "command": [
                        "intros e cond p1 p2 e' H1 H2.",
                        "VernacExtend",
                        "f4762f1c3fb8b029d021635750d0cea0e69f9f48"
                    ]
                },
                {
                    "command": [
                        "apply exec_Iif.",
                        "VernacExtend",
                        "780ad9b60c8cfe9134d33804e4c1526a8e3e5f0d"
                    ]
                },
                {
                    "command": [
                        "rewrite H1; auto.",
                        "VernacExtend",
                        "1413124b63144a92c2b8c7e916995d6cd3746a77"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "exec_Iif_false",
            "line_nb": 15,
            "steps": [
                {
                    "command": [
                        "intros e cond p1 p2 e' H1 H2.",
                        "VernacExtend",
                        "f4762f1c3fb8b029d021635750d0cea0e69f9f48"
                    ]
                },
                {
                    "command": [
                        "apply exec_Iif.",
                        "VernacExtend",
                        "780ad9b60c8cfe9134d33804e4c1526a8e3e5f0d"
                    ]
                },
                {
                    "command": [
                        "rewrite H1; auto.",
                        "VernacExtend",
                        "1413124b63144a92c2b8c7e916995d6cd3746a77"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "wp_entails_wlp",
            "line_nb": 31,
            "steps": [
                {
                    "command": [
                        "unfold wp, wlp.",
                        "VernacExtend",
                        "942cf4b3d8fed465d1974fe37065cab74b7278d3"
                    ]
                },
                {
                    "command": [
                        "intros prog post e H e' H'.",
                        "VernacExtend",
                        "cc162bebdd5d3187ec2b4338da4c24b33a482d46"
                    ]
                },
                {
                    "command": [
                        "dec2 e0 H.",
                        "VernacExtend",
                        "e7d09836f6287fe027ee5b414c359616200091d4"
                    ]
                },
                {
                    "command": [
                        "dec2 H0 H.",
                        "VernacExtend",
                        "54c63037e3b8adcf91d8c2374ecb16def3366067"
                    ]
                },
                {
                    "command": [
                        "rewrite (exec_deterministic H' H0).",
                        "VernacExtend",
                        "10cd88b7f820b7aa536e03e1f8fb319f9f66698b"
                    ]
                },
                {
                    "command": [
                        "auto.",
                        "VernacExtend",
                        "1f09da0addd069b3b65326f8c71967acc1e985af"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        }
    ]
}