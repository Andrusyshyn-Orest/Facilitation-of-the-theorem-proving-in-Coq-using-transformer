{
    "filename": "src/Char.v",
    "coq_project": "coq-list-string",
    "vernac_cmds": [
        [
            "Require Import Coq.NArith.NArith.",
            "VernacRequire",
            "a173128ff04ac2dc4506c66a56f70327ae014e9a"
        ],
        [
            "Require Import Coq.Strings.Ascii.",
            "VernacRequire",
            "30e419988bcc094bf36e4f8bcd8e51136ef2d2c7"
        ],
        [
            "Require Bool.",
            "VernacRequire",
            "d99cac09fcaca6388642265a40277b8fa2afbf6c"
        ],
        [
            "Local Open Scope char.",
            "VernacOpenCloseScope",
            "94dcd149db5ec67955dbc0b4439fffecf0e2f8fa"
        ],
        [
            "Local Open Scope N.",
            "VernacOpenCloseScope",
            "f393febe8283fd938b9524bd42463a138bf10c29"
        ],
        [
            "Definition compare (x y : Ascii.ascii) : comparison := N.compare (Ascii.N_of_ascii x) (Ascii.N_of_ascii y).",
            "VernacDefinition",
            "2d7824bac6c59c3fef853b13e0e01ed3b8c095cc"
        ],
        [
            "Lemma compare_implies_eq : forall (x y : Ascii.ascii), compare x y = Eq -> x = y.",
            "VernacStartTheoremProof",
            "727cde9cff38e6382b3428c99872fbc389e9319e"
        ],
        [
            "unfold compare; intros x y H.",
            "VernacExtend",
            "d460201635423d5087cf4e94c088a4557f94a3fa"
        ],
        [
            "rewrite <- ascii_N_embedding with (a := x); rewrite <- ascii_N_embedding with (a := y).",
            "VernacExtend",
            "c7d8257d1a19c882ec5c4b5fa21a96493693741e"
        ],
        [
            "f_equal.",
            "VernacExtend",
            "dfce814d1efcef60f8330516ad88155a3a5ec317"
        ],
        [
            "now apply N.compare_eq_iff.",
            "VernacExtend",
            "1fb35ef6e5114700eb52ae17dbea50e028743703"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma compare_same_is_eq : forall (x : Ascii.ascii), compare x x = Eq.",
            "VernacStartTheoremProof",
            "aa5d45cba5ce415af3f9784511fdc10a937bfe8a"
        ],
        [
            "intro x; unfold compare.",
            "VernacExtend",
            "eb25f2a912e3f0f229b4ff4f0f7844b7deaf2e28"
        ],
        [
            "now apply N.compare_eq_iff.",
            "VernacExtend",
            "1fb35ef6e5114700eb52ae17dbea50e028743703"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Definition eqb (x y : Ascii.ascii) : bool := match compare x y with | Eq => true | _ => false end.",
            "VernacDefinition",
            "246e72cf5cfd387f0323916ffabbe671e0193b35"
        ],
        [
            "Definition of_N (n : N) : Ascii.ascii := if N.leb n 9 then Ascii.ascii_of_N (Ascii.N_of_ascii \"0\" + n) else Ascii.ascii_of_N (Ascii.N_of_ascii \"A\" + n - 10).",
            "VernacDefinition",
            "fa69c4c58c4ec27fba7d5a05a4f3068a5bacfb5a"
        ],
        [
            "Definition to_N (c : Ascii.ascii) : option N := let n := Ascii.N_of_ascii c in if andb (N.leb (Ascii.N_of_ascii \"0\") n) (N.leb n (Ascii.N_of_ascii \"9\")) then Some (n - Ascii.N_of_ascii \"0\") else if N.leb (Ascii.N_of_ascii \"A\") n then Some (n - Ascii.N_of_ascii \"A\" + 10) else None.",
            "VernacDefinition",
            "fe641bfff7661b189dac21cdbe66a04d8f29868b"
        ],
        [
            "Definition is_ascii (c : Ascii.ascii) : bool := match c with | Ascii.Ascii _ _ _ _ _ _ _ false => true | _ => false end.",
            "VernacDefinition",
            "e3fd1f4a56780861122119a1d8e637cc281dde0b"
        ],
        [
            "Definition is_white_space (c : Ascii.ascii) : bool := match c with | \"009\" | \"010\" | \"011\" | \"012\" | \"013\" | \" \" => true | _ => false end.",
            "VernacDefinition",
            "f973b96f399d4116b6f5804804191b33d1f29560"
        ],
        [
            "Definition down_case (c : Ascii.ascii) : Ascii.ascii := let n := Ascii.N_of_ascii c in let n_A := Ascii.N_of_ascii \"A\" in let n_Z := Ascii.N_of_ascii \"Z\" in let n_a := Ascii.N_of_ascii \"a\" in if andb (N.leb n_A n) (N.leb n n_Z) then Ascii.ascii_of_N ((n + n_a) - n_A) else c.",
            "VernacDefinition",
            "3fcff1285850cac3d2fa36cfd513dee2ff7aac99"
        ],
        [
            "Definition up_case (c : Ascii.ascii) : Ascii.ascii := let n := Ascii.N_of_ascii c in let n_a := Ascii.N_of_ascii \"a\" in let n_z := Ascii.N_of_ascii \"z\" in let n_A := Ascii.N_of_ascii \"A\" in if andb (N.leb n_a n) (N.leb n n_z) then Ascii.ascii_of_N ((n + n_A) - n_a) else c.",
            "VernacDefinition",
            "fc752b95f0708e259e9aa69b450028792605b8de"
        ],
        [
            "Definition a : Ascii.ascii := \"007\".",
            "VernacDefinition",
            "4e23fddc6732f9d3fba9cac60d95b3886db21e63"
        ],
        [
            "Definition b : Ascii.ascii := \"008\".",
            "VernacDefinition",
            "59f65a67c9c314521d920566e656e8abe03f74a5"
        ],
        [
            "Definition t : Ascii.ascii := \"009\".",
            "VernacDefinition",
            "1a54f9a629f626dc8f956258f822dbaec9cf3ecb"
        ],
        [
            "Definition n : Ascii.ascii := \"010\".",
            "VernacDefinition",
            "4d63f78f439333f4dfa2b0f1aff894235ffc2fcb"
        ],
        [
            "Definition v : Ascii.ascii := \"011\".",
            "VernacDefinition",
            "675657e42eeaea0d2f7d3d6c123d9114c77242cf"
        ],
        [
            "Definition f : Ascii.ascii := \"012\".",
            "VernacDefinition",
            "8809f09dd5b0419746bc0f1cfa5552eb59c30de7"
        ],
        [
            "Definition r : Ascii.ascii := \"013\".",
            "VernacDefinition",
            "2e42a60a18e11212f161fe680d2e3bb485e42428"
        ],
        [
            "Definition e : Ascii.ascii := \"027\".",
            "VernacDefinition",
            "4fc511dec103c85ea389a092ac276955baa1aa83"
        ]
    ],
    "proofs": [
        {
            "name": "compare_implies_eq",
            "line_nb": 6,
            "steps": [
                {
                    "command": [
                        "unfold compare; intros x y H.",
                        "VernacExtend",
                        "d460201635423d5087cf4e94c088a4557f94a3fa"
                    ]
                },
                {
                    "command": [
                        "rewrite <- ascii_N_embedding with (a := x); rewrite <- ascii_N_embedding with (a := y).",
                        "VernacExtend",
                        "c7d8257d1a19c882ec5c4b5fa21a96493693741e"
                    ]
                },
                {
                    "command": [
                        "f_equal.",
                        "VernacExtend",
                        "dfce814d1efcef60f8330516ad88155a3a5ec317"
                    ]
                },
                {
                    "command": [
                        "now apply N.compare_eq_iff.",
                        "VernacExtend",
                        "1fb35ef6e5114700eb52ae17dbea50e028743703"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "compare_same_is_eq",
            "line_nb": 12,
            "steps": [
                {
                    "command": [
                        "intro x; unfold compare.",
                        "VernacExtend",
                        "eb25f2a912e3f0f229b4ff4f0f7844b7deaf2e28"
                    ]
                },
                {
                    "command": [
                        "now apply N.compare_eq_iff.",
                        "VernacExtend",
                        "1fb35ef6e5114700eb52ae17dbea50e028743703"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        }
    ]
}