{
    "filename": "src/Comparison.v",
    "coq_project": "coq-list-string",
    "vernac_cmds": [
        [
            "Require Import Coq.Lists.List.",
            "VernacRequire",
            "3f8620a911f16f9e8918ea7512dbb594c917da38"
        ],
        [
            "Require Import Coq.Strings.Ascii.",
            "VernacRequire",
            "30e419988bcc094bf36e4f8bcd8e51136ef2d2c7"
        ],
        [
            "Require Char.",
            "VernacRequire",
            "fbdf000732e88a40bc1f5c5894c7d4c199c19a07"
        ],
        [
            "Require Import LString.",
            "VernacRequire",
            "858e2ba068100c3fef0ae78444ce29451ee88a7d"
        ],
        [
            "Import ListNotations.",
            "VernacImport",
            "52647db2a3b752153a8cbd37039246f200bccdee"
        ],
        [
            "Import LString.",
            "VernacImport",
            "36127aed50b6422ad1e7102b6979ae9898864696"
        ],
        [
            "Fixpoint compare (x y : t) : comparison := match x, y with | [], [] => Eq | [], _ => Lt | _, [] => Gt | x :: xs, y :: ys => match Char.compare x y with | Eq => compare xs ys | c => c end end.",
            "VernacFixpoint",
            "b4be18482f4ac55e2e542fe652cb34d50f174373"
        ],
        [
            "Lemma compare_implies_eq : forall (x y : t), compare x y = Eq -> x = y.",
            "VernacStartTheoremProof",
            "1b082436c2bade608ffd733fd29e94b817ed27f1"
        ],
        [
            "induction x as [|a x HI]; destruct y as [|b y]; simpl; try congruence.",
            "VernacExtend",
            "e54a29071f3f8403c68aee9841b1a754b9e7fbfc"
        ],
        [
            "case_eq (Char.compare a b); simpl; try congruence.",
            "VernacExtend",
            "700e3f0d6dffd771bcfcb663660ba3a4c19412f3"
        ],
        [
            "now intros Hab Hxy; rewrite (Char.compare_implies_eq _ _ Hab); rewrite (HI _ Hxy).",
            "VernacExtend",
            "7e25d329e9a383f8e18ca0affb36a8d1a2d9187d"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma compare_same_is_eq : forall (x : t), compare x x = Eq.",
            "VernacStartTheoremProof",
            "d39000c35e1e86facca9f84d832ce8aedf2ad9a0"
        ],
        [
            "intro x; induction x; simpl; trivial.",
            "VernacExtend",
            "331d47e1c0a28656d899b62c2e9cd4df31b16816"
        ],
        [
            "now rewrite Char.compare_same_is_eq; rewrite IHx.",
            "VernacExtend",
            "fe5c768d24953535fc61d41c92acf462254173f1"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Definition eqb (x y : t) : bool := match compare x y with | Eq => true | _ => false end.",
            "VernacDefinition",
            "73153cf962b8eba0e46f2f95c7081fbb1655ad28"
        ],
        [
            "Lemma eqb_implies_eq : forall (x y : t), eqb x y = true -> x = y.",
            "VernacStartTheoremProof",
            "64a4ab32e0693b325440783456d546ab5b9d6b1a"
        ],
        [
            "intros x y; unfold eqb; case_eq (compare x y); try congruence.",
            "VernacExtend",
            "ec98c4bd24385bc0cffdef692827d199551aa4ce"
        ],
        [
            "now intros; apply compare_implies_eq.",
            "VernacExtend",
            "28db091c07cfb7de300849ce2bd7aa61533f8105"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma eqb_same_is_eq : forall (x : t), eqb x x = true.",
            "VernacStartTheoremProof",
            "b68d5b90062cb8ac457616db5da5a97dc616e968"
        ],
        [
            "now intros; unfold eqb; rewrite compare_same_is_eq.",
            "VernacExtend",
            "4a3c7b2b0aa7bf14c0b5145641489faff6655ed8"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Definition eq_dec (x y : t) : {x = y} + {x <> y}.",
            "VernacDefinition",
            "efdea843d6e118862ddf06a394ade603bf119f56"
        ],
        [
            "case_eq (eqb x y); intro Heqb; [left | right].",
            "VernacExtend",
            "9c80347237a2fba953f0cf6d0d710065a343e9bf"
        ],
        [
            "-",
            "VernacBullet",
            "581cab4bf49fa4b495e569bbda96fc8d28fddcc0"
        ],
        [
            "now apply eqb_implies_eq.",
            "VernacExtend",
            "c8b4c8c918071cac51183320a2dc0957b5157021"
        ],
        [
            "-",
            "VernacBullet",
            "581cab4bf49fa4b495e569bbda96fc8d28fddcc0"
        ],
        [
            "intro Heq; rewrite Heq in Heqb.",
            "VernacExtend",
            "e791ef9548576ab14cfa3316a328569f0aa88fa5"
        ],
        [
            "rewrite eqb_same_is_eq in Heqb; congruence.",
            "VernacExtend",
            "9e91a09f12fe5f7346a4a923db3b3e04b3fc4173"
        ],
        [
            "Defined.",
            "VernacEndProof",
            "88c0be54a50df4bb90276c075406fe442428eb9c"
        ]
    ],
    "proofs": [
        {
            "name": "compare_implies_eq",
            "line_nb": 7,
            "steps": [
                {
                    "command": [
                        "induction x as [|a x HI]; destruct y as [|b y]; simpl; try congruence.",
                        "VernacExtend",
                        "e54a29071f3f8403c68aee9841b1a754b9e7fbfc"
                    ]
                },
                {
                    "command": [
                        "case_eq (Char.compare a b); simpl; try congruence.",
                        "VernacExtend",
                        "700e3f0d6dffd771bcfcb663660ba3a4c19412f3"
                    ]
                },
                {
                    "command": [
                        "now intros Hab Hxy; rewrite (Char.compare_implies_eq _ _ Hab); rewrite (HI _ Hxy).",
                        "VernacExtend",
                        "7e25d329e9a383f8e18ca0affb36a8d1a2d9187d"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "compare_same_is_eq",
            "line_nb": 12,
            "steps": [
                {
                    "command": [
                        "intro x; induction x; simpl; trivial.",
                        "VernacExtend",
                        "331d47e1c0a28656d899b62c2e9cd4df31b16816"
                    ]
                },
                {
                    "command": [
                        "now rewrite Char.compare_same_is_eq; rewrite IHx.",
                        "VernacExtend",
                        "fe5c768d24953535fc61d41c92acf462254173f1"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "eqb_implies_eq",
            "line_nb": 17,
            "steps": [
                {
                    "command": [
                        "intros x y; unfold eqb; case_eq (compare x y); try congruence.",
                        "VernacExtend",
                        "ec98c4bd24385bc0cffdef692827d199551aa4ce"
                    ]
                },
                {
                    "command": [
                        "now intros; apply compare_implies_eq.",
                        "VernacExtend",
                        "28db091c07cfb7de300849ce2bd7aa61533f8105"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "eqb_same_is_eq",
            "line_nb": 21,
            "steps": [
                {
                    "command": [
                        "now intros; unfold eqb; rewrite compare_same_is_eq.",
                        "VernacExtend",
                        "4a3c7b2b0aa7bf14c0b5145641489faff6655ed8"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "eq_dec",
            "line_nb": 24,
            "steps": [
                {
                    "command": [
                        "case_eq (eqb x y); intro Heqb; [left | right].",
                        "VernacExtend",
                        "9c80347237a2fba953f0cf6d0d710065a343e9bf"
                    ]
                },
                {
                    "command": [
                        "-",
                        "VernacBullet",
                        "581cab4bf49fa4b495e569bbda96fc8d28fddcc0"
                    ]
                },
                {
                    "command": [
                        "now apply eqb_implies_eq.",
                        "VernacExtend",
                        "c8b4c8c918071cac51183320a2dc0957b5157021"
                    ]
                },
                {
                    "command": [
                        "-",
                        "VernacBullet",
                        "581cab4bf49fa4b495e569bbda96fc8d28fddcc0"
                    ]
                },
                {
                    "command": [
                        "intro Heq; rewrite Heq in Heqb.",
                        "VernacExtend",
                        "e791ef9548576ab14cfa3316a328569f0aa88fa5"
                    ]
                },
                {
                    "command": [
                        "rewrite eqb_same_is_eq in Heqb; congruence.",
                        "VernacExtend",
                        "9e91a09f12fe5f7346a4a923db3b3e04b3fc4173"
                    ]
                },
                {
                    "command": [
                        "Defined.",
                        "VernacEndProof",
                        "88c0be54a50df4bb90276c075406fe442428eb9c"
                    ]
                }
            ]
        }
    ]
}