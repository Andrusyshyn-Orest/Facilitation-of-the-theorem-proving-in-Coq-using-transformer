{
    "filename": "theories/Equiv.v",
    "coq_project": "coquelicot",
    "vernac_cmds": [
        [
            "Require Import Reals Psatz.",
            "VernacRequire",
            "aa71e9955fdefb9d3b0e58d51406978b644e60c0"
        ],
        [
            "Require Import mathcomp.ssreflect.ssreflect.",
            "VernacRequire",
            "85e251063dc2b5a9653f7bb76dcd176ed36b42a9"
        ],
        [
            "Require Import Rbar Rcomplements Hierarchy.",
            "VernacRequire",
            "deff57a425517b12940297cdb17809129d2c2c6b"
        ],
        [
            "Definition is_domin {T} {Ku Kv : AbsRing} {U : NormedModule Ku} {V : NormedModule Kv} (F : (T -> Prop) -> Prop) (f : T -> U) (g : T -> V) := forall eps : posreal, F (fun x => norm (g x) <= eps * norm (f x)).",
            "VernacDefinition",
            "1ba8261f0f9a0ae174a4b08fc2f8445ee715739b"
        ],
        [
            "Definition is_equiv {T} {K : AbsRing} {V : NormedModule K} (F : (T -> Prop) -> Prop) (f g : T -> V) := is_domin F g (fun x => minus (g x) (f x)).",
            "VernacDefinition",
            "a20ada26751faf26b1c4d0805d94ef4f70ed65bf"
        ],
        [
            "Lemma domin_antisym {T} {K : AbsRing} {V : NormedModule K} : forall {F : (T -> Prop) -> Prop} {FF : ProperFilter F} (f : T -> V), F (fun x => norm (f x) <> 0) -> ~ is_domin F f f.",
            "VernacStartTheoremProof",
            "eedefe3a0fe45ee202747d8a093936e3b6a1a4f5"
        ],
        [
            "intros F FF f Hf H.",
            "VernacExtend",
            "43d3a60f4fafa715024bdc6d3a139afcd8b09fb1"
        ],
        [
            "move: (H (pos_div_2 (mkposreal _ Rlt_0_1))) => {H} /= H.",
            "VernacExtend",
            "b1b2cb7a3a617cba67460b4eca1f04de3c1cc716"
        ],
        [
            "apply filter_const.",
            "VernacExtend",
            "434f1fa3e1468d75d96224e3d8c91302e451b579"
        ],
        [
            "generalize (filter_and _ _ H Hf) => {H Hf}.",
            "VernacExtend",
            "3c42b53d0efc26db114b00541ac5e7fcb29e6aeb"
        ],
        [
            "apply filter_imp.",
            "VernacExtend",
            "cd5d68d491d9b471ebb7deccb08d7a71ba953368"
        ],
        [
            "intros x [H1 H2].",
            "VernacExtend",
            "dec14703281561ee29868a72a7ea2508387ba782"
        ],
        [
            "generalize (norm_ge_0 (f x)).",
            "VernacExtend",
            "b1aee97107e5b4812f3154d798918e02572d77db"
        ],
        [
            "lra.",
            "VernacExtend",
            "c37bca18aec699b6843eab75e25df2491e3b9848"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma domin_trans {T} {Ku Kv Kw : AbsRing} {U : NormedModule Ku} {V : NormedModule Kv} {W : NormedModule Kw} : forall {F : (T -> Prop) -> Prop} {FF : Filter F} (f : T -> U) (g : T -> V) (h : T -> W), is_domin F f g -> is_domin F g h -> is_domin F f h.",
            "VernacStartTheoremProof",
            "ed8c247e8f8832d200d96d872f50398e97e9088b"
        ],
        [
            "intros F FF f g h Hfg Hgh eps.",
            "VernacExtend",
            "f815a0cd971567838197bd9149db5da884d77c7b"
        ],
        [
            "apply (filter_imp (fun x => (norm (h x) <= sqrt eps * norm (g x)) /\\ (norm (g x) <= sqrt eps * norm (f x)))).",
            "VernacExtend",
            "c79be4831825c2672c9a11976a09ff5ac74f7a06"
        ],
        [
            "intros x [H0 H1].",
            "VernacExtend",
            "daffc46e0da411d709bb1061ecbb39914abc8014"
        ],
        [
            "apply Rle_trans with (1 := H0).",
            "VernacExtend",
            "f0ddda86c7b914fea7907ffe166385cd0ad20dbe"
        ],
        [
            "rewrite -{2}(sqrt_sqrt eps).",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "rewrite Rmult_assoc.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "apply Rmult_le_compat_l.",
            "VernacExtend",
            "509839294acd7016ba82d594bfdb05afe131eed3"
        ],
        [
            "by apply sqrt_pos.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "apply H1.",
            "VernacExtend",
            "3fcc9345bbf6ea218ca825a16c0f27912de9bd67"
        ],
        [
            "by apply Rlt_le, eps.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "apply filter_and.",
            "VernacExtend",
            "fbb80260b7ada2aadd0c8d53e45502ffc98a91f1"
        ],
        [
            "by apply (Hgh (mkposreal (sqrt eps) (sqrt_lt_R0 _ (cond_pos eps)))).",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "by apply (Hfg (mkposreal (sqrt eps) (sqrt_lt_R0 _ (cond_pos eps)))).",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma equiv_le_2 {T} {K : AbsRing} {V : NormedModule K} F {FF : Filter F} (f g : T -> V) : is_equiv F f g -> F (fun x => norm (g x) <= 2 * norm (f x) /\\ norm (f x) <= 2 * norm (g x)).",
            "VernacStartTheoremProof",
            "8b816e11a92156c95f591f9acef4b9ef12af9fe6"
        ],
        [
            "intros H.",
            "VernacExtend",
            "5cfae87a34fa7b59a257c9640f1b674f6e6d780b"
        ],
        [
            "apply filter_and.",
            "VernacExtend",
            "fbb80260b7ada2aadd0c8d53e45502ffc98a91f1"
        ],
        [
            "-",
            "VernacBullet",
            "581cab4bf49fa4b495e569bbda96fc8d28fddcc0"
        ],
        [
            "move: (H (pos_div_2 (mkposreal _ Rlt_0_1))) => {H}.",
            "VernacExtend",
            "b1b2cb7a3a617cba67460b4eca1f04de3c1cc716"
        ],
        [
            "apply filter_imp => x /= H.",
            "VernacExtend",
            "3c42b53d0efc26db114b00541ac5e7fcb29e6aeb"
        ],
        [
            "apply Rle_trans with (1 := norm_triangle_inv _ _) in H.",
            "VernacExtend",
            "3327f40cf34f97e08111380a93f77e33716ed547"
        ],
        [
            "rewrite -Ropp_minus_distr Rabs_Ropp in H.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "apply Rabs_le_between' in H ; case: H => H _.",
            "VernacExtend",
            "73a5221d6de079e421b5f800c4ba608fd59c9285"
        ],
        [
            "field_simplify in H.",
            "VernacExtend",
            "d6c420cf9852e16775ea4b6bf975465fd2a344a1"
        ],
        [
            "rewrite Rdiv_1 in H.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "apply Rle_div_l in H.",
            "VernacExtend",
            "496e6e425fee5d33584b87140cc4d68ba3b90b44"
        ],
        [
            "by rewrite Rmult_comm.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "by apply Rlt_0_2.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "-",
            "VernacBullet",
            "581cab4bf49fa4b495e569bbda96fc8d28fddcc0"
        ],
        [
            "move: (H (mkposreal _ Rlt_0_1)) => {H}.",
            "VernacExtend",
            "b1b2cb7a3a617cba67460b4eca1f04de3c1cc716"
        ],
        [
            "apply filter_imp => x /= H.",
            "VernacExtend",
            "3c42b53d0efc26db114b00541ac5e7fcb29e6aeb"
        ],
        [
            "apply Rle_trans with (1 := norm_triangle_inv _ _) in H.",
            "VernacExtend",
            "3327f40cf34f97e08111380a93f77e33716ed547"
        ],
        [
            "rewrite -Ropp_minus_distr Rabs_Ropp in H.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "apply Rabs_le_between' in H ; case: H => _ H.",
            "VernacExtend",
            "73a5221d6de079e421b5f800c4ba608fd59c9285"
        ],
        [
            "field_simplify in H.",
            "VernacExtend",
            "d6c420cf9852e16775ea4b6bf975465fd2a344a1"
        ],
        [
            "by rewrite !Rdiv_1 in H.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma domin_rw_l {T} {Ku Kv : AbsRing} {U : NormedModule Ku} {V : NormedModule Kv} : forall {F : (T -> Prop) -> Prop} {FF : Filter F} (f1 f2 : T -> U) (g : T -> V), is_equiv F f1 f2 -> is_domin F f1 g -> is_domin F f2 g.",
            "VernacStartTheoremProof",
            "4793dd7f0d859bff054dea36e8e91beb9676d379"
        ],
        [
            "intros F FF f1 f2 g Hf Hg eps.",
            "VernacExtend",
            "b1680cdbe5486a01d6669a5290e3aa43c505b9ed"
        ],
        [
            "assert (F (fun x => norm (f1 x) <= 2 * norm (f2 x))).",
            "VernacExtend",
            "3f47fa37ad55d25fe661be3fdcd6dd4745881c26"
        ],
        [
            "eapply filter_imp.",
            "VernacExtend",
            "bf3d126874cf320edb00f681aadb1db062bce3fd"
        ],
        [
            "2: apply (equiv_le_2 _ _ _ Hf).",
            "VernacExtend",
            "0e4f6572d6e7b02ec5d50d9786c523868a65f314"
        ],
        [
            "move => /= x Hx.",
            "VernacExtend",
            "b1b2cb7a3a617cba67460b4eca1f04de3c1cc716"
        ],
        [
            "by apply Hx.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "clear Hf ; rename H into Hf.",
            "VernacExtend",
            "8751086d4e94a8087e15155128b2cb94d1b6e8f3"
        ],
        [
            "specialize (Hg (pos_div_2 eps)).",
            "VernacExtend",
            "27c59c7f542bc46b1b371a548261232e7995f710"
        ],
        [
            "generalize (filter_and _ _ Hf Hg) ; clear -FF.",
            "VernacExtend",
            "9d75cf93d20f6e6dd21de099a92dada0010a3f7a"
        ],
        [
            "apply filter_imp => x /= [Hf Hg].",
            "VernacExtend",
            "3c42b53d0efc26db114b00541ac5e7fcb29e6aeb"
        ],
        [
            "apply Rle_trans with (1 := Hg).",
            "VernacExtend",
            "50605b522ec30411dd60594d73bea487bbb83fe1"
        ],
        [
            "rewrite /Rdiv Rmult_assoc.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "apply Rmult_le_compat_l.",
            "VernacExtend",
            "509839294acd7016ba82d594bfdb05afe131eed3"
        ],
        [
            "by apply Rlt_le, eps.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "rewrite Rmult_comm Rle_div_l.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "by rewrite Rmult_comm.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "by apply Rlt_0_2.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma domin_rw_r {T} {Ku Kv : AbsRing} {U : NormedModule Ku} {V : NormedModule Kv} : forall {F : (T -> Prop) -> Prop} {FF : Filter F} (f : T -> U) (g1 g2 : T -> V), is_equiv F g1 g2 -> is_domin F f g1 -> is_domin F f g2.",
            "VernacStartTheoremProof",
            "2e720d7cb8d883adf9e1f3e071db5797eda25b94"
        ],
        [
            "intros F FF f g1 g2 Hg Hf eps.",
            "VernacExtend",
            "d4f2d0dabb980d4868259da89e72d7c9d198c8db"
        ],
        [
            "assert (F (fun x => norm (g2 x) <= 2 * norm (g1 x))).",
            "VernacExtend",
            "81a67202fa458d7387439dff4e019f9436fc5ade"
        ],
        [
            "eapply filter_imp.",
            "VernacExtend",
            "bf3d126874cf320edb00f681aadb1db062bce3fd"
        ],
        [
            "2: apply (equiv_le_2 _ _ _ Hg).",
            "VernacExtend",
            "97a1c0741371523d46aafeeb73eeb4b345ed4225"
        ],
        [
            "move => /= x Hx.",
            "VernacExtend",
            "b1b2cb7a3a617cba67460b4eca1f04de3c1cc716"
        ],
        [
            "by apply Hx.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "clear Hg ; rename H into Hg.",
            "VernacExtend",
            "59db53fa1b0c4337f58afa8f3d28cc6ff0fe6fcf"
        ],
        [
            "specialize (Hf (pos_div_2 eps)).",
            "VernacExtend",
            "d8327d889f805aded0f4dc3517ddb152aa9277ed"
        ],
        [
            "generalize (filter_and _ _ Hf Hg) ; clear -FF.",
            "VernacExtend",
            "9d75cf93d20f6e6dd21de099a92dada0010a3f7a"
        ],
        [
            "apply filter_imp => x /= [Hf Hg].",
            "VernacExtend",
            "3c42b53d0efc26db114b00541ac5e7fcb29e6aeb"
        ],
        [
            "apply Rle_trans with (1 := Hg).",
            "VernacExtend",
            "50605b522ec30411dd60594d73bea487bbb83fe1"
        ],
        [
            "rewrite Rmult_comm Rle_div_r.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "apply Rle_trans with (1 := Hf).",
            "VernacExtend",
            "d40fd91ce934153be71627fb17e28d7abe872699"
        ],
        [
            "right ; rewrite /Rdiv ; ring.",
            "VernacExtend",
            "0e6d5983ab41eaccf458d072a39c8479bb74e5fd"
        ],
        [
            "by apply Rlt_0_2.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Section Equiv.",
            "VernacBeginSection",
            "d104bd41c174dc0f44788e29ff31d69ba63c12a3"
        ],
        [
            "Context {T : Type} {K : AbsRing} {V : NormedModule K}.",
            "VernacContext",
            "41561f58edae93484470860c645ad8c625b23308"
        ],
        [
            "Lemma equiv_refl : forall {F : (T -> Prop) -> Prop} {FF : Filter F} (f : T -> V), is_equiv F f f.",
            "VernacStartTheoremProof",
            "5b17f7e235912f5d184639abbe5d408ccf3e11e7"
        ],
        [
            "intros F FF f eps.",
            "VernacExtend",
            "50be01e2fbc69bb3b42794c514bbd2cf73135748"
        ],
        [
            "apply: filter_forall => x.",
            "VernacExtend",
            "4bd6fa79b17bcd2bfb7af091fb325367a20385d6"
        ],
        [
            "rewrite /minus plus_opp_r norm_zero.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "apply Rmult_le_pos.",
            "VernacExtend",
            "e03207c3cef85471384dc0906485b056bc83a80a"
        ],
        [
            "by apply Rlt_le, eps.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "by apply norm_ge_0.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma equiv_sym : forall {F : (T -> Prop) -> Prop} {FF : Filter F} (f g : T -> V), is_equiv F f g -> is_equiv F g f.",
            "VernacStartTheoremProof",
            "beb577ac3426ddaeb739559afabc096917b65b7b"
        ],
        [
            "intros F FF f g H eps.",
            "VernacExtend",
            "652be6fdde7d145478f0b4783642f122f92d779a"
        ],
        [
            "assert (H0 := equiv_le_2 _ _ _ H).",
            "VernacExtend",
            "8f669aa8d313b055be8831816ac3fe3ec45d33b1"
        ],
        [
            "specialize (H (pos_div_2 eps)).",
            "VernacExtend",
            "eb71b447ebb7f4b918e29c4be162e9281b432ba3"
        ],
        [
            "generalize (filter_and _ _ H H0) ; apply filter_imp ; clear => x [H [H0 H1]].",
            "VernacExtend",
            "9799416935ba3e8072953fb78b4bf7489e98dc6c"
        ],
        [
            "rewrite -norm_opp /minus opp_plus opp_opp plus_comm.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "apply Rle_trans with (1 := H) ; simpl.",
            "VernacExtend",
            "4ce080379fa588e982a10247801cfc52cac52f78"
        ],
        [
            "eapply Rle_trans.",
            "VernacExtend",
            "ec6f33953112c5bac5bfe07c5c0b34597dc6eaba"
        ],
        [
            "apply Rmult_le_compat_l.",
            "VernacExtend",
            "509839294acd7016ba82d594bfdb05afe131eed3"
        ],
        [
            "by apply Rlt_le, is_pos_div_2.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "by apply H0.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "apply Req_le ; field.",
            "VernacExtend",
            "2174f1ccde93a7e8aa969bbcd29fd5556bc786df"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma equiv_trans : forall {F : (T -> Prop) -> Prop} {FF : Filter F} (f g h : T -> V), is_equiv F f g -> is_equiv F g h -> is_equiv F f h.",
            "VernacStartTheoremProof",
            "d6b24f39d67fbc718177cf5b4a53b9fdb993e84a"
        ],
        [
            "intros F FF f g h Hfg Hgh.",
            "VernacExtend",
            "f9da8143c535416fe8dc5aeaf79c4f15da446298"
        ],
        [
            "apply (fun c => domin_rw_l _ _ c Hgh).",
            "VernacExtend",
            "6fea3dc1349a54388a13d0c49d5a287bbe69d8a2"
        ],
        [
            "intros eps.",
            "VernacExtend",
            "786caed5d6705ffc7435ecfd5604e33c6ecd43f1"
        ],
        [
            "apply equiv_sym in Hgh.",
            "VernacExtend",
            "14841a0740de0f25f2aa7c51e6efa815e0728bab"
        ],
        [
            "generalize (filter_and _ _ (Hfg (pos_div_2 eps)) (Hgh (pos_div_2 eps))) => {Hfg Hgh}.",
            "VernacExtend",
            "3c42b53d0efc26db114b00541ac5e7fcb29e6aeb"
        ],
        [
            "apply filter_imp => x /= [Hfg Hgh].",
            "VernacExtend",
            "3c42b53d0efc26db114b00541ac5e7fcb29e6aeb"
        ],
        [
            "replace (minus (h x) (f x)) with (plus (minus (g x) (f x)) (opp (minus (g x) (h x)))).",
            "VernacExtend",
            "c2cca811751ed8a79956fcad19895bb04fc3734f"
        ],
        [
            "eapply Rle_trans.",
            "VernacExtend",
            "ec6f33953112c5bac5bfe07c5c0b34597dc6eaba"
        ],
        [
            "1 : by apply @norm_triangle.",
            "VernacExtend",
            "a028eaa4a89a5aa3a0b5a910561da68f347001aa"
        ],
        [
            "rewrite norm_opp (double_var eps) Rmult_plus_distr_r.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "by apply Rplus_le_compat.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "rewrite /minus opp_plus opp_opp plus_comm plus_assoc.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "congr (plus _ (opp (f x))).",
            "VernacExtend",
            "f3a9615ebe5fa15549c1ecd556f50efbdb2824d9"
        ],
        [
            "rewrite plus_comm plus_assoc plus_opp_r.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "apply plus_zero_l.",
            "VernacExtend",
            "fdd3960e0a38a5a7936e5f3937f30b431957176e"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma equiv_carac_0 : forall {F : (T -> Prop) -> Prop} {FF : Filter F} (f g : T -> V), is_equiv F f g -> {o : T -> V | (forall x : T, f x = plus (g x) (o x)) /\\ is_domin F g o }.",
            "VernacStartTheoremProof",
            "1d0621a2a0b583e061b1d8fb4e88c9a796f5041d"
        ],
        [
            "intros F FF f g H.",
            "VernacExtend",
            "4d70f45a905454bc8e04d30e90ca3eb916b3e23e"
        ],
        [
            "exists (fun x => minus (f x) (g x)).",
            "VernacExtend",
            "b7af9e6ed4ead4c0fb047d2239ae0c23691c36d3"
        ],
        [
            "split.",
            "VernacExtend",
            "55abc140132bd88981001ac656020469a8d503eb"
        ],
        [
            "intro x.",
            "VernacExtend",
            "f7163633eedf12f483fa0d8c0c119dd59431ca1e"
        ],
        [
            "by rewrite /minus plus_comm -plus_assoc plus_opp_l plus_zero_r.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "apply (domin_rw_l _ _ _ H).",
            "VernacExtend",
            "d663cde2b7f3c6c2808679343b713b5e073df859"
        ],
        [
            "by apply equiv_sym.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma equiv_carac_1 : forall {F : (T -> Prop) -> Prop} {FF : Filter F} (f g o : T -> V), (forall x, f x = plus (g x) (o x)) -> is_domin F g o -> is_equiv F f g.",
            "VernacStartTheoremProof",
            "cd20dfc4473a075216ea9f95ed827fd769c3136e"
        ],
        [
            "intros F FF f g o Ho Hgo.",
            "VernacExtend",
            "ea51c7ee7fad47bd8ba4003450b480bd87cf4465"
        ],
        [
            "intro eps ; move: (Hgo eps).",
            "VernacExtend",
            "f6eaba301a08cbebb1ece8eb1b5a8bfa84adcd79"
        ],
        [
            "apply filter_imp => x.",
            "VernacExtend",
            "3c42b53d0efc26db114b00541ac5e7fcb29e6aeb"
        ],
        [
            "replace (o x) with (minus (f x) (g x)).",
            "VernacExtend",
            "f4af903a23b100f256949f8a26e133a41012f3a9"
        ],
        [
            "congr (_ <= _).",
            "VernacExtend",
            "f3a9615ebe5fa15549c1ecd556f50efbdb2824d9"
        ],
        [
            "by rewrite -norm_opp /minus opp_plus opp_opp plus_comm.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "rewrite Ho.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "rewrite /minus plus_comm plus_assoc plus_opp_l.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "apply plus_zero_l.",
            "VernacExtend",
            "fdd3960e0a38a5a7936e5f3937f30b431957176e"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma equiv_ext_loc {F : (T -> Prop) -> Prop} {FF : Filter F} (f g : T -> V) : F (fun x => f x = g x) -> is_equiv F f g.",
            "VernacStartTheoremProof",
            "cfde7bad9e6ba9db5daaf9dce1616c8bbb5272ea"
        ],
        [
            "move => H eps.",
            "VernacExtend",
            "b1b2cb7a3a617cba67460b4eca1f04de3c1cc716"
        ],
        [
            "move: H ; apply filter_imp.",
            "VernacExtend",
            "0748f60fd4bfbf18081aafc2b987584f77eabe68"
        ],
        [
            "move => x ->.",
            "VernacExtend",
            "b1b2cb7a3a617cba67460b4eca1f04de3c1cc716"
        ],
        [
            "rewrite /minus plus_opp_r norm_zero.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "apply Rmult_le_pos.",
            "VernacExtend",
            "e03207c3cef85471384dc0906485b056bc83a80a"
        ],
        [
            "by apply Rlt_le, eps.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "by apply norm_ge_0.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "End Equiv.",
            "VernacEndSegment",
            "3f6f2fc178c0de8ab8ba357792bf2a43c867ec50"
        ],
        [
            "Section Domin.",
            "VernacBeginSection",
            "c94b9c55063431f6d616d92fb0adc636c2b08981"
        ],
        [
            "Context {T : Type} {Ku Kv : AbsRing} {U : NormedModule Ku} {V : NormedModule Kv}.",
            "VernacContext",
            "5d63b14f88fa4d7563cd2fcfa220bdf42a1f469e"
        ],
        [
            "Lemma is_domin_le {F G} (f : T -> U) (g : T -> V) : is_domin F f g -> filter_le G F -> is_domin G f g.",
            "VernacStartTheoremProof",
            "9a6e1f6c917f4d3dd4c48e8de778c70b79894b3f"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "intros eps.",
            "VernacExtend",
            "786caed5d6705ffc7435ecfd5604e33c6ecd43f1"
        ],
        [
            "by apply H0.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma domin_scal_r : forall {F : (T -> Prop) -> Prop} {FF : Filter F} (f : T -> U) (g : T -> V) (c : Kv), is_domin F f g -> is_domin F f (fun x => scal c (g x)).",
            "VernacStartTheoremProof",
            "e24c5e68eab00262036955115e6af0639cf87237"
        ],
        [
            "intros F FF f g c H.",
            "VernacExtend",
            "9a26e6aad960a5ec3a95c0b6942c37e4b0829e89"
        ],
        [
            "case: (Req_dec (abs c) 0) => Hc.",
            "VernacExtend",
            "e00fff71ff314c991514fc71c41a3556702e444a"
        ],
        [
            "move => eps /=.",
            "VernacExtend",
            "b1b2cb7a3a617cba67460b4eca1f04de3c1cc716"
        ],
        [
            "apply filter_imp with (2 := filter_true) => x _.",
            "VernacExtend",
            "3c42b53d0efc26db114b00541ac5e7fcb29e6aeb"
        ],
        [
            "eapply Rle_trans.",
            "VernacExtend",
            "ec6f33953112c5bac5bfe07c5c0b34597dc6eaba"
        ],
        [
            "apply @norm_scal.",
            "VernacExtend",
            "c6b7146cb6222d5cb71aafd018ad8cdb1926b185"
        ],
        [
            "rewrite Hc Rmult_0_l.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "apply Rmult_le_pos.",
            "VernacExtend",
            "e03207c3cef85471384dc0906485b056bc83a80a"
        ],
        [
            "by apply Rlt_le, eps.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "by apply norm_ge_0.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "destruct (abs_ge_0 c) => //.",
            "VernacExtend",
            "3c42b53d0efc26db114b00541ac5e7fcb29e6aeb"
        ],
        [
            "clear Hc ; rename H0 into Hc.",
            "VernacExtend",
            "01321b0793c20a6ea58b1d8db8cfc0a34308cebb"
        ],
        [
            "move => eps /=.",
            "VernacExtend",
            "b1b2cb7a3a617cba67460b4eca1f04de3c1cc716"
        ],
        [
            "assert (He : 0 < eps / abs c).",
            "VernacExtend",
            "4f46273be457379b47785031f30f3d7961e5c790"
        ],
        [
            "apply Rdiv_lt_0_compat.",
            "VernacExtend",
            "283136f6e52505e4579f1f286529bc7e0bbfd6d7"
        ],
        [
            "by apply eps.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "by apply Hc.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "move: (H (mkposreal _ He)) => /= {H}.",
            "VernacExtend",
            "b1b2cb7a3a617cba67460b4eca1f04de3c1cc716"
        ],
        [
            "apply filter_imp => x H.",
            "VernacExtend",
            "3c42b53d0efc26db114b00541ac5e7fcb29e6aeb"
        ],
        [
            "eapply Rle_trans.",
            "VernacExtend",
            "ec6f33953112c5bac5bfe07c5c0b34597dc6eaba"
        ],
        [
            "apply @norm_scal.",
            "VernacExtend",
            "c6b7146cb6222d5cb71aafd018ad8cdb1926b185"
        ],
        [
            "rewrite Rmult_comm ; apply Rle_div_r.",
            "VernacExtend",
            "501bd021b8f2aedfba8f97c6337af4e657172b3b"
        ],
        [
            "by [].",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "apply Rle_trans with (1 := H).",
            "VernacExtend",
            "afdcb615c6a4c5d01b0dcd863ef8e5aeca62d6d8"
        ],
        [
            "apply Req_le ; rewrite /Rdiv ; ring.",
            "VernacExtend",
            "f47b2454345a4d05130731008667e27a8a9a8b95"
        ],
        [
            "by apply sym_eq in H0.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma domin_scal_l : forall {F : (T -> Prop) -> Prop} {FF : Filter F} (f : T -> U) (g : T -> V) (c : Ku), (exists y, mult y c = one) -> is_domin F f g -> is_domin F (fun x => scal c (f x)) g.",
            "VernacStartTheoremProof",
            "b66a0fad98bfc81cae02f641f5329804c4335ff0"
        ],
        [
            "intros F FF f g c Hc H eps.",
            "VernacExtend",
            "1ed8a26cceaed4eadff7de7c23a3f8912df53059"
        ],
        [
            "destruct Hc as [y Hc].",
            "VernacExtend",
            "6e60296a39e3c85e1b06e43b8a5e1e3cb3b8593c"
        ],
        [
            "assert (0 < abs c).",
            "VernacExtend",
            "e10809f85039852d453993004742dd851a8ec280"
        ],
        [
            "apply Rnot_le_lt => H0.",
            "VernacExtend",
            "3c42b53d0efc26db114b00541ac5e7fcb29e6aeb"
        ],
        [
            "destruct H0.",
            "VernacExtend",
            "5c8f6cb3dc303d56935d6ec271a1de04f6790225"
        ],
        [
            "move: H0 ; by apply Rle_not_lt, abs_ge_0.",
            "VernacExtend",
            "c42ec967bffec70acce34c6295bd61fe6baf57b0"
        ],
        [
            "move: H0.",
            "VernacExtend",
            "b1b2cb7a3a617cba67460b4eca1f04de3c1cc716"
        ],
        [
            "apply (Rmult_neq_0_reg (abs y)).",
            "VernacExtend",
            "fda6e28abf3b13140e528af7be98358239994ff8"
        ],
        [
            "apply Rgt_not_eq.",
            "VernacExtend",
            "8860a9193cfdaf1f0316f8df1f2c0781738e5ef7"
        ],
        [
            "eapply Rlt_le_trans, @abs_mult.",
            "VernacExtend",
            "ea5ca7c287e5fc9d41e78cc7d44888d26317f1d1"
        ],
        [
            "rewrite Hc abs_one ; by apply Rlt_0_1.",
            "VernacExtend",
            "f9e2aad1e70f1876566a77bd0af96f52b3b81520"
        ],
        [
            "assert (0 < abs y).",
            "VernacExtend",
            "012ee6a7751931883158f149de3aa2e3d1cd30f6"
        ],
        [
            "apply Rmult_lt_reg_r with (abs c).",
            "VernacExtend",
            "8466e9cbb8da8622d6d979dff6d50959617515e3"
        ],
        [
            "by [].",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "rewrite Rmult_0_l.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "eapply Rlt_le_trans, @abs_mult.",
            "VernacExtend",
            "ea5ca7c287e5fc9d41e78cc7d44888d26317f1d1"
        ],
        [
            "rewrite Hc abs_one ; by apply Rlt_0_1.",
            "VernacExtend",
            "f9e2aad1e70f1876566a77bd0af96f52b3b81520"
        ],
        [
            "assert (He : (0 < eps / abs y)).",
            "VernacExtend",
            "af99df57bbcec7420395c88c2a7b8378dd403ee7"
        ],
        [
            "apply Rdiv_lt_0_compat.",
            "VernacExtend",
            "283136f6e52505e4579f1f286529bc7e0bbfd6d7"
        ],
        [
            "by apply eps.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "by [].",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "move: (H (mkposreal _ He)) => /= {H}.",
            "VernacExtend",
            "b1b2cb7a3a617cba67460b4eca1f04de3c1cc716"
        ],
        [
            "apply filter_imp => x Hx.",
            "VernacExtend",
            "3c42b53d0efc26db114b00541ac5e7fcb29e6aeb"
        ],
        [
            "apply Rle_trans with (1 := Hx).",
            "VernacExtend",
            "0c96d56e473e7352ecd09c2ccdd70e8ca50d500d"
        ],
        [
            "rewrite /Rdiv Rmult_assoc ; apply Rmult_le_compat_l.",
            "VernacExtend",
            "375663c6fed9a1f68fc51b94c78b7fde5410ebc1"
        ],
        [
            "by apply Rlt_le, eps.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "rewrite -{1}(scal_one (f x)) -Hc -scal_assoc.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "eapply Rle_trans.",
            "VernacExtend",
            "ec6f33953112c5bac5bfe07c5c0b34597dc6eaba"
        ],
        [
            "apply Rmult_le_compat_l.",
            "VernacExtend",
            "509839294acd7016ba82d594bfdb05afe131eed3"
        ],
        [
            "by apply Rlt_le, Rinv_0_lt_compat.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "apply @norm_scal.",
            "VernacExtend",
            "c6b7146cb6222d5cb71aafd018ad8cdb1926b185"
        ],
        [
            "apply Req_le ; field.",
            "VernacExtend",
            "2174f1ccde93a7e8aa969bbcd29fd5556bc786df"
        ],
        [
            "by apply Rgt_not_eq.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma domin_plus : forall {F : (T -> Prop) -> Prop} {FF : Filter F} (f : T -> U) (g1 g2 : T -> V), is_domin F f g1 -> is_domin F f g2 -> is_domin F f (fun x => plus (g1 x) (g2 x)).",
            "VernacStartTheoremProof",
            "c8cc344073b2af315478f0e55fd2e30691ba433f"
        ],
        [
            "intros F FF f g1 g2 Hg1 Hg2 eps.",
            "VernacExtend",
            "0aac349a114ad55f9f2c10f14d4755fe726069d3"
        ],
        [
            "generalize (filter_and _ _ (Hg1 (pos_div_2 eps)) (Hg2 (pos_div_2 eps))) => /= {Hg1 Hg2}.",
            "VernacExtend",
            "3c42b53d0efc26db114b00541ac5e7fcb29e6aeb"
        ],
        [
            "apply filter_imp => x [Hg1 Hg2].",
            "VernacExtend",
            "3c42b53d0efc26db114b00541ac5e7fcb29e6aeb"
        ],
        [
            "eapply Rle_trans.",
            "VernacExtend",
            "ec6f33953112c5bac5bfe07c5c0b34597dc6eaba"
        ],
        [
            "apply @norm_triangle.",
            "VernacExtend",
            "85c8761fbfefc33c72371b73f65134f967a6f807"
        ],
        [
            "eapply Rle_trans.",
            "VernacExtend",
            "ec6f33953112c5bac5bfe07c5c0b34597dc6eaba"
        ],
        [
            "apply Rplus_le_compat.",
            "VernacExtend",
            "7a69898b466991bee51047e3a2fc51c3b80fbd93"
        ],
        [
            "by apply Hg1.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "by apply Hg2.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "apply Req_le ; field.",
            "VernacExtend",
            "2174f1ccde93a7e8aa969bbcd29fd5556bc786df"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "End Domin.",
            "VernacEndSegment",
            "11a1a7801301228db7f98370a129190521203efc"
        ],
        [
            "Section Equiv_VS.",
            "VernacBeginSection",
            "5fb10b1eecad4d856ccc15304b514821b334cd40"
        ],
        [
            "Context {T : Type} {K : AbsRing} {V : NormedModule K}.",
            "VernacContext",
            "41561f58edae93484470860c645ad8c625b23308"
        ],
        [
            "Lemma equiv_scal : forall {F : (T -> Prop) -> Prop} {FF : Filter F} (f g : T -> V) (c : K), (exists y : K, mult y c = one) -> is_equiv F f g -> is_equiv F (fun x => scal c (f x)) (fun x => scal c (g x)).",
            "VernacStartTheoremProof",
            "66c2a71be964c3aa7353622218198f95eec34c1f"
        ],
        [
            "intros F FF f g c [y Hc] H.",
            "VernacExtend",
            "4638215741ba795ba268b9edf9336b78c2ac3d18"
        ],
        [
            "apply domin_scal_l.",
            "VernacExtend",
            "2bd4be37859fd6f256c87067ec8e59805a815817"
        ],
        [
            "by exists y.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "move => eps /=.",
            "VernacExtend",
            "b1b2cb7a3a617cba67460b4eca1f04de3c1cc716"
        ],
        [
            "cut (F (fun x => norm (scal c (minus (g x) (f x))) <= eps * norm (g x))).",
            "VernacExtend",
            "296cc9258742c6ad8165f82aa8014a5e1ee8c82e"
        ],
        [
            "apply filter_imp => x.",
            "VernacExtend",
            "3c42b53d0efc26db114b00541ac5e7fcb29e6aeb"
        ],
        [
            "now rewrite scal_distr_l scal_opp_r.",
            "VernacExtend",
            "276cb1b1d654c3b906be8c12785939ceeaffac64"
        ],
        [
            "now apply domin_scal_r.",
            "VernacExtend",
            "62a350d2b4f0e5ae404e9c5fcde897231abd2fe9"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma equiv_plus : forall {F : (T -> Prop) -> Prop} {FF : Filter F} (f o : T -> V), is_domin F f o -> is_equiv F (fun x => plus (f x) (o x)) f.",
            "VernacStartTheoremProof",
            "0ec5df7b92191aef9cb42f57ee56c8c6347e4e08"
        ],
        [
            "intros F FF f o H eps.",
            "VernacExtend",
            "d86ed4a9730097ac85bcbb8748646db09d9c95c7"
        ],
        [
            "move: (H eps) => {H}.",
            "VernacExtend",
            "b1b2cb7a3a617cba67460b4eca1f04de3c1cc716"
        ],
        [
            "apply filter_imp => x Hx.",
            "VernacExtend",
            "3c42b53d0efc26db114b00541ac5e7fcb29e6aeb"
        ],
        [
            "simpl.",
            "VernacExtend",
            "1b93169f4cf876d207c1fab22a2347202ab48d85"
        ],
        [
            "now rewrite /minus opp_plus plus_assoc plus_opp_r plus_zero_l norm_opp.",
            "VernacExtend",
            "276cb1b1d654c3b906be8c12785939ceeaffac64"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "End Equiv_VS.",
            "VernacEndSegment",
            "26554af91dda67c53722bdfde666f6e4a9afa447"
        ],
        [
            "Lemma domin_mult_r : forall {T} {F : (T -> Prop) -> Prop} {FF : Filter F} (f g h : T -> R), is_domin F f g -> is_domin F (fun x => f x * h x) (fun x => g x * h x).",
            "VernacStartTheoremProof",
            "0590bfe5df238a41aa3ef8138fce1d96207df8c7"
        ],
        [
            "intros T F FF f g h H eps.",
            "VernacExtend",
            "117a95a84a331622cbd130a589e5e65dcdda33eb"
        ],
        [
            "move: (H eps) => {H}.",
            "VernacExtend",
            "b1b2cb7a3a617cba67460b4eca1f04de3c1cc716"
        ],
        [
            "apply filter_imp => x H1.",
            "VernacExtend",
            "3c42b53d0efc26db114b00541ac5e7fcb29e6aeb"
        ],
        [
            "rewrite /norm /= /abs /= ?Rabs_mult.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "rewrite -Rmult_assoc.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "apply Rmult_le_compat_r.",
            "VernacExtend",
            "6c4c5a82dab802842919dd673f1978a3cb8cff73"
        ],
        [
            "by apply Rabs_pos.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "by apply H1.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma domin_mult_l : forall {T} {F : (T -> Prop) -> Prop} {FF : Filter F} (f g h : T -> R), is_domin F f g -> is_domin F (fun x => h x * f x) (fun x => h x * g x).",
            "VernacStartTheoremProof",
            "ad08055b7eee129fc01d2bcdf259e9dfa3ff42d4"
        ],
        [
            "intros T F FF f g h H eps.",
            "VernacExtend",
            "117a95a84a331622cbd130a589e5e65dcdda33eb"
        ],
        [
            "generalize (domin_mult_r f g h H eps).",
            "VernacExtend",
            "bc484a4542fd9e7fd20a774a8cc29661a7cd6862"
        ],
        [
            "apply filter_imp => x.",
            "VernacExtend",
            "3c42b53d0efc26db114b00541ac5e7fcb29e6aeb"
        ],
        [
            "by rewrite ?(Rmult_comm (h x)).",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma domin_mult : forall {T} {F : (T -> Prop) -> Prop} {FF : Filter F} (f1 f2 g1 g2 : T -> R), is_domin F f1 g1 -> is_domin F f2 g2 -> is_domin F (fun x => f1 x * f2 x) (fun x => g1 x * g2 x).",
            "VernacStartTheoremProof",
            "f1a8949b698031a367cd5b76ca97e12a3243aeba"
        ],
        [
            "intros T F FF f1 f2 g1 g2 H1 H2 eps.",
            "VernacExtend",
            "4aa540c50b945cb3c3500c553f8fe752ee6e6e6b"
        ],
        [
            "move: (H1 (mkposreal _ (sqrt_lt_R0 _ (cond_pos eps)))) (H2 (mkposreal _ (sqrt_lt_R0 _ (cond_pos eps)))) => {H1 H2} /= H1 H2.",
            "VernacExtend",
            "b1b2cb7a3a617cba67460b4eca1f04de3c1cc716"
        ],
        [
            "generalize (filter_and _ _ H1 H2) => {H1 H2}.",
            "VernacExtend",
            "3c42b53d0efc26db114b00541ac5e7fcb29e6aeb"
        ],
        [
            "apply filter_imp => x [H1 H2].",
            "VernacExtend",
            "3c42b53d0efc26db114b00541ac5e7fcb29e6aeb"
        ],
        [
            "rewrite /norm /= /abs /= ?Rabs_mult.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "rewrite -(sqrt_sqrt _ (Rlt_le _ _ (cond_pos eps))).",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "replace (sqrt eps * sqrt eps * (Rabs (f1 x) * Rabs (f2 x))) with ((sqrt eps * Rabs (f1 x))*(sqrt eps * Rabs (f2 x))) by ring.",
            "VernacExtend",
            "63ba904ab10b75e1dec9e1798cfd92a704d46450"
        ],
        [
            "apply Rmult_le_compat.",
            "VernacExtend",
            "99a65cd1efb8e35313415d4b052731e2b0746daf"
        ],
        [
            "by apply Rabs_pos.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "by apply Rabs_pos.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "by apply H1.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "by apply H2.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma domin_inv : forall {T} {F : (T -> Prop) -> Prop} {FF : Filter F} (f g : T -> R), F (fun x => g x <> 0) -> is_domin F f g -> is_domin F (fun x => / g x) (fun x => / f x).",
            "VernacStartTheoremProof",
            "6a8659b8eb8e4462557e79ab1b03110d07bf3820"
        ],
        [
            "intros T F FF f g Hg H eps.",
            "VernacExtend",
            "a8324d22f428c238321a8fbc0c3e9c0a7705a0f5"
        ],
        [
            "have Hf : F (fun x => f x <> 0).",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "generalize (filter_and _ _ Hg (H (mkposreal _ Rlt_0_1))) => /=.",
            "VernacExtend",
            "3c42b53d0efc26db114b00541ac5e7fcb29e6aeb"
        ],
        [
            "apply filter_imp => x {Hg H} [Hg H].",
            "VernacExtend",
            "3c42b53d0efc26db114b00541ac5e7fcb29e6aeb"
        ],
        [
            "case: (Req_dec (f x) 0) => Hf.",
            "VernacExtend",
            "e00fff71ff314c991514fc71c41a3556702e444a"
        ],
        [
            "rewrite /norm /= /abs /= Hf Rabs_R0 Rmult_0_r in H.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "apply Rlt_not_le in H.",
            "VernacExtend",
            "ea53aeaa51b4f56fc9c04a830473f8d64bd73d0d"
        ],
        [
            "move => _ ; apply H.",
            "VernacExtend",
            "d83b68a11a10a2d3f66d5ad53a43cca8ae591b9e"
        ],
        [
            "by apply Rabs_pos_lt.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "by [].",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "generalize (filter_and _ _ (H eps) (filter_and _ _ Hf Hg)) => {H Hf Hg}.",
            "VernacExtend",
            "3c42b53d0efc26db114b00541ac5e7fcb29e6aeb"
        ],
        [
            "apply filter_imp => x [H [Hf Hg]].",
            "VernacExtend",
            "3c42b53d0efc26db114b00541ac5e7fcb29e6aeb"
        ],
        [
            "rewrite /norm /= /abs /= ?Rabs_Rinv => //.",
            "VernacExtend",
            "3c42b53d0efc26db114b00541ac5e7fcb29e6aeb"
        ],
        [
            "replace (/ Rabs (f x)) with (Rabs (g x) / (Rabs (f x) * Rabs (g x))) by (field ; split ; by apply Rabs_no_R0).",
            "VernacExtend",
            "d0107051b9395172a0689112aef4608da87e0679"
        ],
        [
            "replace (eps * / Rabs (g x)) with (eps * Rabs (f x) / (Rabs (f x) * Rabs (g x))) by (field ; split ; by apply Rabs_no_R0).",
            "VernacExtend",
            "bd589384ef685788d6d244cd4971b08c32edf36b"
        ],
        [
            "apply Rmult_le_compat_r.",
            "VernacExtend",
            "6c4c5a82dab802842919dd673f1978a3cb8cff73"
        ],
        [
            "apply Rlt_le, Rinv_0_lt_compat, Rmult_lt_0_compat ; apply Rabs_pos_lt => //.",
            "VernacExtend",
            "06320807dea355f06ff12fe11a6afde49996a671"
        ],
        [
            "by apply H.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma equiv_mult : forall {T} {F : (T -> Prop) -> Prop} {FF : Filter F} (f1 f2 g1 g2 : T -> R), is_equiv F f1 g1 -> is_equiv F f2 g2 -> is_equiv F (fun x => f1 x * f2 x) (fun x => g1 x * g2 x).",
            "VernacStartTheoremProof",
            "33c505f4cdc85232c437f1bb9ea28e4c3942e516"
        ],
        [
            "intros T F FF f1 f2 g1 g2 H1 H2.",
            "VernacExtend",
            "e950f671c632b9038b01f1c50585437fdbed7fa8"
        ],
        [
            "case: (equiv_carac_0 _ _ H1) => {H1} o1 [H1 Ho1].",
            "VernacExtend",
            "e00fff71ff314c991514fc71c41a3556702e444a"
        ],
        [
            "case: (equiv_carac_0 _ _ H2) => {H2} o2 [H2 Ho2].",
            "VernacExtend",
            "e00fff71ff314c991514fc71c41a3556702e444a"
        ],
        [
            "apply equiv_carac_1 with (fun x => o1 x * g2 x + g1 x * o2 x + o1 x * o2 x).",
            "VernacExtend",
            "388ee4d4807bd22ccb36db729f7f164add46d820"
        ],
        [
            "move => x ; rewrite H1 H2 /plus /= ; ring.",
            "VernacExtend",
            "21b6fe36e5498a843625648c497c009ca92aa0fe"
        ],
        [
            "repeat apply @domin_plus => //.",
            "VernacExtend",
            "d36194af035d418008b3fae8e9785d1af2d8af96"
        ],
        [
            "by apply domin_mult_r.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "by apply domin_mult_l.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "by apply domin_mult.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma equiv_inv : forall {T} {F : (T -> Prop) -> Prop} {FF : Filter F} (f g : T -> R), F (fun x => g x <> 0) -> is_equiv F f g -> is_equiv F (fun x => / f x) (fun x => / g x).",
            "VernacStartTheoremProof",
            "6ea7e039ae7a6da9e9556a90ae4cec41732d2d11"
        ],
        [
            "intros T F FF f g Hg H.",
            "VernacExtend",
            "6bc849b31101f4bcc9d865104d955f29e5357c8c"
        ],
        [
            "have Hf : F (fun x => f x <> 0).",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "generalize (filter_and _ _ Hg (H (pos_div_2 (mkposreal _ Rlt_0_1)))) => /=.",
            "VernacExtend",
            "3c42b53d0efc26db114b00541ac5e7fcb29e6aeb"
        ],
        [
            "apply filter_imp => x {Hg H} [Hg H].",
            "VernacExtend",
            "3c42b53d0efc26db114b00541ac5e7fcb29e6aeb"
        ],
        [
            "case: (Req_dec (f x) 0) => Hf //.",
            "VernacExtend",
            "e00fff71ff314c991514fc71c41a3556702e444a"
        ],
        [
            "rewrite /minus /plus /opp /= Hf Ropp_0 Rplus_0_r in H.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "generalize (norm_ge_0 (g x)) (norm_eq_zero (g x)).",
            "VernacExtend",
            "85a7143a56ef91f4a76f45623f1ed36b5460715e"
        ],
        [
            "rewrite /zero /=.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "lra.",
            "VernacExtend",
            "c37bca18aec699b6843eab75e25df2491e3b9848"
        ],
        [
            "apply equiv_sym in H.",
            "VernacExtend",
            "aaeb4e716e80818b2ad3f02efaf48c5edfa85acf"
        ],
        [
            "move => eps.",
            "VernacExtend",
            "b1b2cb7a3a617cba67460b4eca1f04de3c1cc716"
        ],
        [
            "generalize (filter_and _ _ (filter_and _ _ Hf Hg) (H eps)).",
            "VernacExtend",
            "8fb55e5d2284051e3e490577446e21e56d692a6f"
        ],
        [
            "clear -FF.",
            "VernacExtend",
            "d12f32358a72d6f555669a899ea9e462663e7251"
        ],
        [
            "apply filter_imp.",
            "VernacExtend",
            "cd5d68d491d9b471ebb7deccb08d7a71ba953368"
        ],
        [
            "intros x [[Hf Hg] H].",
            "VernacExtend",
            "ed93ab5482f32d80da3b7ddfef071e55962e8358"
        ],
        [
            "rewrite /norm /= /abs /minus /plus /opp /=.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "replace (/ g x + - / f x) with ((f x - g x) / (f x * g x)).",
            "VernacExtend",
            "b546894df215240dd6598858c889205979be9ac1"
        ],
        [
            "rewrite Rabs_div ?Rabs_Rinv ?Rabs_mult //.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "apply Rle_div_l.",
            "VernacExtend",
            "300a9124ae599e97b5c7dcc1ad678aa6b0fecb98"
        ],
        [
            "apply Rmult_lt_0_compat ; by apply Rabs_pos_lt.",
            "VernacExtend",
            "b6efc6792e1877f26201f434eb7ad1c07f314cf8"
        ],
        [
            "field_simplify ; rewrite ?Rdiv_1.",
            "VernacExtend",
            "f0f737846cbca54b0661563cad780d391c67fc50"
        ],
        [
            "by [].",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "by apply Rabs_no_R0.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "by apply Rmult_integral_contrapositive_currified.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "field ; by split.",
            "VernacExtend",
            "3ee914fdf1169c2e6f3cdb8a22eb49a479eeb6d3"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Section Domin_comp.",
            "VernacBeginSection",
            "e1d8e3ab7c577539e2da16a7623ab5cf1309845c"
        ],
        [
            "Context {T1 T2 : Type} {Ku Kv : AbsRing} {U : NormedModule Ku} {V : NormedModule Kv} (F : (T1 -> Prop) -> Prop) {FF : Filter F} (G : (T2 -> Prop) -> Prop) {FG : Filter G}.",
            "VernacContext",
            "a24730d2834de79c123d6676f7b6ddd5c5f615bf"
        ],
        [
            "Lemma domin_comp (f : T2 -> U) (g : T2 -> V) (l : T1 -> T2) : filterlim l F G -> is_domin G f g -> is_domin F (fun t => f (l t)) (fun t => g (l t)).",
            "VernacStartTheoremProof",
            "24b25bdd34fb861a3396b7ab2f30b7f44f61aa5f"
        ],
        [
            "intros Hl Hg eps.",
            "VernacExtend",
            "41855372c20a7d2d6642620ccd9f02af7797ed4e"
        ],
        [
            "generalize (fun eps => Hl _ (Hg eps)) => {Hl Hg} /= Hl.",
            "VernacExtend",
            "3c42b53d0efc26db114b00541ac5e7fcb29e6aeb"
        ],
        [
            "by apply Hl.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "End Domin_comp.",
            "VernacEndSegment",
            "5a9c225f92d3707caa5e6e21510e33fadbd51ef7"
        ],
        [
            "Lemma filterlim_equiv : forall {T} {F : (T -> Prop) -> Prop} {FF : Filter F} (f g : T -> R) (l : Rbar), is_equiv F f g -> filterlim f F (Rbar_locally l) -> filterlim g F (Rbar_locally l).",
            "VernacStartTheoremProof",
            "4f846916ead829476509664152134ae57c143942"
        ],
        [
            "intros T F FF f g [l| |] Hfg Hf P [eps HP] ; apply equiv_sym in Hfg ; unfold filtermap.",
            "VernacExtend",
            "4b98b10af68d3c72ece946961c30899d85be2ece"
        ],
        [
            "-",
            "VernacBullet",
            "581cab4bf49fa4b495e569bbda96fc8d28fddcc0"
        ],
        [
            "assert (He: 0 < eps / 2 / (Rabs l + 1)).",
            "VernacExtend",
            "2f45c04149d469289b0045b4213fafaf8c9154ed"
        ],
        [
            "apply Rdiv_lt_0_compat.",
            "VernacExtend",
            "283136f6e52505e4579f1f286529bc7e0bbfd6d7"
        ],
        [
            "apply is_pos_div_2.",
            "VernacExtend",
            "34ece1c858dc4d1fc16b226888abddacb10f0a54"
        ],
        [
            "apply Rplus_le_lt_0_compat.",
            "VernacExtend",
            "f52234f44384644fc6f21adef182d5c4067417f5"
        ],
        [
            "apply Rabs_pos.",
            "VernacExtend",
            "8e57e214403458a4dc8dafc960971b86cf3b856d"
        ],
        [
            "apply Rlt_0_1.",
            "VernacExtend",
            "c3f675388bf844e0740197fd71afa66e5eef091d"
        ],
        [
            "pose ineqs (y : R) := Rabs (y - l) < eps/2 /\\ Rabs y <= Rabs l + 1.",
            "VernacExtend",
            "3c5f04de94609049d978298aa02ff35fb35ea7c7"
        ],
        [
            "assert (Hl: Rbar_locally l ineqs).",
            "VernacExtend",
            "1236aa5ff0ecc832f313c6aa81c017c6cc69b438"
        ],
        [
            "assert (H: 0 < Rmin (eps / 2) 1).",
            "VernacExtend",
            "ed6c2cdabb65eea450a37520c0433f3fb698e7ec"
        ],
        [
            "apply Rmin_case.",
            "VernacExtend",
            "06bee284b3ab9229517272cc3728705bdc7b95ba"
        ],
        [
            "apply is_pos_div_2.",
            "VernacExtend",
            "34ece1c858dc4d1fc16b226888abddacb10f0a54"
        ],
        [
            "apply Rlt_0_1.",
            "VernacExtend",
            "c3f675388bf844e0740197fd71afa66e5eef091d"
        ],
        [
            "exists (mkposreal _ H).",
            "VernacExtend",
            "79f7a2ae5ada3371dd5656b5d0990cff18308b77"
        ],
        [
            "simpl.",
            "VernacExtend",
            "1b93169f4cf876d207c1fab22a2347202ab48d85"
        ],
        [
            "intros x Hx.",
            "VernacExtend",
            "4f408fcf0db2619f08da1108b4fc92384e2a5db3"
        ],
        [
            "split.",
            "VernacExtend",
            "55abc140132bd88981001ac656020469a8d503eb"
        ],
        [
            "apply Rlt_le_trans with (1 := Hx).",
            "VernacExtend",
            "17cfcea7cef1e39ddff4797053bb05abaf553802"
        ],
        [
            "apply Rmin_l.",
            "VernacExtend",
            "19942458506c6b3427aea84d1ee7179f00e19f1c"
        ],
        [
            "apply Rabs_le_between'.",
            "VernacExtend",
            "18ac0f066ec0a3fa096b48f5fb19e422bf5473dc"
        ],
        [
            "apply Rle_trans with (1 := Rabs_triang_inv2 _ _).",
            "VernacExtend",
            "14a8bab95d7d54b3bc854243175162382dc99507"
        ],
        [
            "apply Rlt_le.",
            "VernacExtend",
            "cdc4280500779f23bae235b94c24a4b2ea2921fe"
        ],
        [
            "apply Rlt_le_trans with (1 := Hx).",
            "VernacExtend",
            "17cfcea7cef1e39ddff4797053bb05abaf553802"
        ],
        [
            "apply Rmin_r.",
            "VernacExtend",
            "d165954e4d055817b42cbc8960efd3fee45e4f16"
        ],
        [
            "generalize (filter_and _ (fun (x : T) => ineqs (f x)) (Hfg (mkposreal _ He)) (Hf _ Hl)).",
            "VernacExtend",
            "dd2d65ebef0faec1156626bd87c34257bf3cf8c1"
        ],
        [
            "apply filter_imp.",
            "VernacExtend",
            "cd5d68d491d9b471ebb7deccb08d7a71ba953368"
        ],
        [
            "simpl.",
            "VernacExtend",
            "1b93169f4cf876d207c1fab22a2347202ab48d85"
        ],
        [
            "intros x [H1 [H2 H3]].",
            "VernacExtend",
            "27285365e73f998cd51b2595c36ffcb3d5e629ca"
        ],
        [
            "apply HP.",
            "VernacExtend",
            "ca37aebd7e8ae00878bfd4cba5592ae8e97d86d9"
        ],
        [
            "rewrite /ball /= /AbsRing_ball /= /abs /minus /plus /opp /=.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "replace (g x + - l) with ((f x - l) + -(f x - g x)) by ring.",
            "VernacExtend",
            "6806e306df0bb909e7feb2976aa97d40c36d9e47"
        ],
        [
            "apply Rle_lt_trans with (1 := Rabs_triang _ _).",
            "VernacExtend",
            "f9c6acae1b531169f9dfd40f6360571bc11e9f82"
        ],
        [
            "replace (pos eps) with (eps / 2 + eps / 2 / (Rabs l + 1) * (Rabs l + 1)).",
            "VernacExtend",
            "786f63f069ef4da86a125c708927e05868722e00"
        ],
        [
            "apply Rplus_lt_le_compat with (1 := H2).",
            "VernacExtend",
            "625f75711c4b877bd829a9cf471486639d78bbb1"
        ],
        [
            "rewrite Rabs_Ropp.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "apply Rle_trans with (1 := H1).",
            "VernacExtend",
            "2ee5aa053941e16dd67ff806efe73173552711a4"
        ],
        [
            "apply Rmult_le_compat_l with (2 := H3).",
            "VernacExtend",
            "3a710738ccb102c1ab226f33f7a6804ae7ea391a"
        ],
        [
            "now apply Rlt_le.",
            "VernacExtend",
            "3fa67bbd472123a7abc1f777aecc643fb3862e46"
        ],
        [
            "field.",
            "VernacExtend",
            "93f44750d651d466b74a0cc63f88acb56273d533"
        ],
        [
            "apply Rgt_not_eq.",
            "VernacExtend",
            "8860a9193cfdaf1f0316f8df1f2c0781738e5ef7"
        ],
        [
            "apply Rplus_le_lt_0_compat.",
            "VernacExtend",
            "f52234f44384644fc6f21adef182d5c4067417f5"
        ],
        [
            "apply Rabs_pos.",
            "VernacExtend",
            "8e57e214403458a4dc8dafc960971b86cf3b856d"
        ],
        [
            "apply Rlt_0_1.",
            "VernacExtend",
            "c3f675388bf844e0740197fd71afa66e5eef091d"
        ],
        [
            "-",
            "VernacBullet",
            "581cab4bf49fa4b495e569bbda96fc8d28fddcc0"
        ],
        [
            "pose ineq (y : R) := Rmax 0 (2 * eps) < y.",
            "VernacExtend",
            "3c5f04de94609049d978298aa02ff35fb35ea7c7"
        ],
        [
            "assert (Hl: Rbar_locally' p_infty ineq).",
            "VernacExtend",
            "379b2dc93f687425cd477f0a80f04b2150dace83"
        ],
        [
            "now exists (Rmax 0 (2 * eps)).",
            "VernacExtend",
            "240aab00eefdcb3882edbcb3dd92117f18c09207"
        ],
        [
            "generalize (filter_and _ (fun (x : T) => ineq (f x)) (Hfg (mkposreal _ pos_half_prf)) (Hf _ Hl)).",
            "VernacExtend",
            "5f9cb65a1678f99fc2ccdc034c578a25c7733574"
        ],
        [
            "apply filter_imp.",
            "VernacExtend",
            "cd5d68d491d9b471ebb7deccb08d7a71ba953368"
        ],
        [
            "simpl.",
            "VernacExtend",
            "1b93169f4cf876d207c1fab22a2347202ab48d85"
        ],
        [
            "intros x [H1 H2].",
            "VernacExtend",
            "dec14703281561ee29868a72a7ea2508387ba782"
        ],
        [
            "apply HP.",
            "VernacExtend",
            "ca37aebd7e8ae00878bfd4cba5592ae8e97d86d9"
        ],
        [
            "apply Rabs_le_between' in H1.",
            "VernacExtend",
            "0f7919c389a3e2db70fe3b15e32c272870503f42"
        ],
        [
            "generalize (Rplus_le_compat_l (- /2 * Rabs (f x)) _ _ (proj2 H1)).",
            "VernacExtend",
            "513d7b7e5a94e9c59e39b4b374efabfb3847be48"
        ],
        [
            "rewrite /norm /= /abs /=.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "replace (- / 2 * Rabs (f x) + (g x + / 2 * Rabs (f x))) with (g x) by ring.",
            "VernacExtend",
            "c145e92ba29f22629ef5a22ab5cf2d15f6f0829b"
        ],
        [
            "apply Rlt_le_trans.",
            "VernacExtend",
            "9f04ea1a870a94e0b3994c25a9d6f73051b7ba12"
        ],
        [
            "rewrite Rabs_pos_eq.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "apply Rmult_lt_reg_l with (1 := Rlt_R0_R2).",
            "VernacExtend",
            "528d7c65f9a7e5ac1cb11206b6a8a7491c877e8c"
        ],
        [
            "replace (2 * (- / 2 * f x + f x)) with (f x) by field.",
            "VernacExtend",
            "7197aaf92cbc0484a53cff587b460eca19c0bc62"
        ],
        [
            "apply Rle_lt_trans with (2 := H2).",
            "VernacExtend",
            "4b77b04e7ce4a2c88b59d674abdff4de9bb59b1f"
        ],
        [
            "apply Rmax_r.",
            "VernacExtend",
            "d3f964851377911a5dafd3727673be093a2b343f"
        ],
        [
            "apply Rlt_le.",
            "VernacExtend",
            "cdc4280500779f23bae235b94c24a4b2ea2921fe"
        ],
        [
            "apply Rle_lt_trans with (2 := H2).",
            "VernacExtend",
            "4b77b04e7ce4a2c88b59d674abdff4de9bb59b1f"
        ],
        [
            "apply Rmax_l.",
            "VernacExtend",
            "e8bdf305d751b877364ec9794b15c2d6e134dc98"
        ],
        [
            "-",
            "VernacBullet",
            "581cab4bf49fa4b495e569bbda96fc8d28fddcc0"
        ],
        [
            "pose ineq (y : R) := y < Rmin 0 (2 * eps).",
            "VernacExtend",
            "3c5f04de94609049d978298aa02ff35fb35ea7c7"
        ],
        [
            "assert (Hl: Rbar_locally' m_infty ineq).",
            "VernacExtend",
            "c3bf339dea441cc45563ad24aa75ab27012fd619"
        ],
        [
            "now exists (Rmin 0 (2 * eps)).",
            "VernacExtend",
            "d42355afaa7d7d16350ab1bcf4599ae4121996b2"
        ],
        [
            "generalize (filter_and _ (fun (x : T) => ineq (f x)) (Hfg (mkposreal _ pos_half_prf)) (Hf _ Hl)).",
            "VernacExtend",
            "5f9cb65a1678f99fc2ccdc034c578a25c7733574"
        ],
        [
            "apply filter_imp.",
            "VernacExtend",
            "cd5d68d491d9b471ebb7deccb08d7a71ba953368"
        ],
        [
            "simpl.",
            "VernacExtend",
            "1b93169f4cf876d207c1fab22a2347202ab48d85"
        ],
        [
            "intros x [H1 H2].",
            "VernacExtend",
            "dec14703281561ee29868a72a7ea2508387ba782"
        ],
        [
            "apply HP.",
            "VernacExtend",
            "ca37aebd7e8ae00878bfd4cba5592ae8e97d86d9"
        ],
        [
            "apply Rabs_le_between' in H1.",
            "VernacExtend",
            "0f7919c389a3e2db70fe3b15e32c272870503f42"
        ],
        [
            "generalize (Rplus_le_compat_l (/2 * Rabs (f x)) _ _ (proj1 H1)).",
            "VernacExtend",
            "52877cb5c82bfccaa8333e770aa70a713ee7e0f3"
        ],
        [
            "rewrite /norm /= /abs /=.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "replace (/ 2 * Rabs (f x) + (g x - / 2 * Rabs (f x))) with (g x) by ring.",
            "VernacExtend",
            "571b7f798fff431b9d4a062fb39fc2984adc5751"
        ],
        [
            "intros H.",
            "VernacExtend",
            "5cfae87a34fa7b59a257c9640f1b674f6e6d780b"
        ],
        [
            "apply Rle_lt_trans with (1 := H).",
            "VernacExtend",
            "790f8088dd95dc3479d6aacd82345a55d22040af"
        ],
        [
            "rewrite Rabs_left.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "apply Rmult_lt_reg_l with (1 := Rlt_R0_R2).",
            "VernacExtend",
            "528d7c65f9a7e5ac1cb11206b6a8a7491c877e8c"
        ],
        [
            "replace (2 * (/ 2 * - f x + f x)) with (f x) by field.",
            "VernacExtend",
            "e29dc6bc68d4620b48fa36d70316ebd2f86266f8"
        ],
        [
            "apply Rlt_le_trans with (1 := H2).",
            "VernacExtend",
            "c29a5f95b175dc50f0dcb1cbff43ffd4690fd2dd"
        ],
        [
            "apply Rmin_r.",
            "VernacExtend",
            "d165954e4d055817b42cbc8960efd3fee45e4f16"
        ],
        [
            "apply Rlt_le_trans with (1 := H2).",
            "VernacExtend",
            "c29a5f95b175dc50f0dcb1cbff43ffd4690fd2dd"
        ],
        [
            "apply Rmin_l.",
            "VernacExtend",
            "19942458506c6b3427aea84d1ee7179f00e19f1c"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ]
    ],
    "proofs": [
        {
            "name": "domin_antisym",
            "line_nb": 5,
            "steps": [
                {
                    "command": [
                        "intros F FF f Hf H.",
                        "VernacExtend",
                        "43d3a60f4fafa715024bdc6d3a139afcd8b09fb1"
                    ]
                },
                {
                    "command": [
                        "move: (H (pos_div_2 (mkposreal _ Rlt_0_1))) => {H} /= H.",
                        "VernacExtend",
                        "b1b2cb7a3a617cba67460b4eca1f04de3c1cc716"
                    ]
                },
                {
                    "command": [
                        "apply filter_const.",
                        "VernacExtend",
                        "434f1fa3e1468d75d96224e3d8c91302e451b579"
                    ]
                },
                {
                    "command": [
                        "generalize (filter_and _ _ H Hf) => {H Hf}.",
                        "VernacExtend",
                        "3c42b53d0efc26db114b00541ac5e7fcb29e6aeb"
                    ]
                },
                {
                    "command": [
                        "apply filter_imp.",
                        "VernacExtend",
                        "cd5d68d491d9b471ebb7deccb08d7a71ba953368"
                    ]
                },
                {
                    "command": [
                        "intros x [H1 H2].",
                        "VernacExtend",
                        "dec14703281561ee29868a72a7ea2508387ba782"
                    ]
                },
                {
                    "command": [
                        "generalize (norm_ge_0 (f x)).",
                        "VernacExtend",
                        "b1aee97107e5b4812f3154d798918e02572d77db"
                    ]
                },
                {
                    "command": [
                        "lra.",
                        "VernacExtend",
                        "c37bca18aec699b6843eab75e25df2491e3b9848"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "domin_trans",
            "line_nb": 15,
            "steps": [
                {
                    "command": [
                        "intros F FF f g h Hfg Hgh eps.",
                        "VernacExtend",
                        "f815a0cd971567838197bd9149db5da884d77c7b"
                    ]
                },
                {
                    "command": [
                        "apply (filter_imp (fun x => (norm (h x) <= sqrt eps * norm (g x)) /\\ (norm (g x) <= sqrt eps * norm (f x)))).",
                        "VernacExtend",
                        "c79be4831825c2672c9a11976a09ff5ac74f7a06"
                    ]
                },
                {
                    "command": [
                        "intros x [H0 H1].",
                        "VernacExtend",
                        "daffc46e0da411d709bb1061ecbb39914abc8014"
                    ]
                },
                {
                    "command": [
                        "apply Rle_trans with (1 := H0).",
                        "VernacExtend",
                        "f0ddda86c7b914fea7907ffe166385cd0ad20dbe"
                    ]
                },
                {
                    "command": [
                        "rewrite -{2}(sqrt_sqrt eps).",
                        "VernacExtend",
                        "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
                    ]
                },
                {
                    "command": [
                        "rewrite Rmult_assoc.",
                        "VernacExtend",
                        "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
                    ]
                },
                {
                    "command": [
                        "apply Rmult_le_compat_l.",
                        "VernacExtend",
                        "509839294acd7016ba82d594bfdb05afe131eed3"
                    ]
                },
                {
                    "command": [
                        "by apply sqrt_pos.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "apply H1.",
                        "VernacExtend",
                        "3fcc9345bbf6ea218ca825a16c0f27912de9bd67"
                    ]
                },
                {
                    "command": [
                        "by apply Rlt_le, eps.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "apply filter_and.",
                        "VernacExtend",
                        "fbb80260b7ada2aadd0c8d53e45502ffc98a91f1"
                    ]
                },
                {
                    "command": [
                        "by apply (Hgh (mkposreal (sqrt eps) (sqrt_lt_R0 _ (cond_pos eps)))).",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "by apply (Hfg (mkposreal (sqrt eps) (sqrt_lt_R0 _ (cond_pos eps)))).",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "equiv_le_2",
            "line_nb": 30,
            "steps": [
                {
                    "command": [
                        "intros H.",
                        "VernacExtend",
                        "5cfae87a34fa7b59a257c9640f1b674f6e6d780b"
                    ]
                },
                {
                    "command": [
                        "apply filter_and.",
                        "VernacExtend",
                        "fbb80260b7ada2aadd0c8d53e45502ffc98a91f1"
                    ]
                },
                {
                    "command": [
                        "-",
                        "VernacBullet",
                        "581cab4bf49fa4b495e569bbda96fc8d28fddcc0"
                    ]
                },
                {
                    "command": [
                        "move: (H (pos_div_2 (mkposreal _ Rlt_0_1))) => {H}.",
                        "VernacExtend",
                        "b1b2cb7a3a617cba67460b4eca1f04de3c1cc716"
                    ]
                },
                {
                    "command": [
                        "apply filter_imp => x /= H.",
                        "VernacExtend",
                        "3c42b53d0efc26db114b00541ac5e7fcb29e6aeb"
                    ]
                },
                {
                    "command": [
                        "apply Rle_trans with (1 := norm_triangle_inv _ _) in H.",
                        "VernacExtend",
                        "3327f40cf34f97e08111380a93f77e33716ed547"
                    ]
                },
                {
                    "command": [
                        "rewrite -Ropp_minus_distr Rabs_Ropp in H.",
                        "VernacExtend",
                        "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
                    ]
                },
                {
                    "command": [
                        "apply Rabs_le_between' in H ; case: H => H _.",
                        "VernacExtend",
                        "73a5221d6de079e421b5f800c4ba608fd59c9285"
                    ]
                },
                {
                    "command": [
                        "field_simplify in H.",
                        "VernacExtend",
                        "d6c420cf9852e16775ea4b6bf975465fd2a344a1"
                    ]
                },
                {
                    "command": [
                        "rewrite Rdiv_1 in H.",
                        "VernacExtend",
                        "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
                    ]
                },
                {
                    "command": [
                        "apply Rle_div_l in H.",
                        "VernacExtend",
                        "496e6e425fee5d33584b87140cc4d68ba3b90b44"
                    ]
                },
                {
                    "command": [
                        "by rewrite Rmult_comm.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "by apply Rlt_0_2.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "-",
                        "VernacBullet",
                        "581cab4bf49fa4b495e569bbda96fc8d28fddcc0"
                    ]
                },
                {
                    "command": [
                        "move: (H (mkposreal _ Rlt_0_1)) => {H}.",
                        "VernacExtend",
                        "b1b2cb7a3a617cba67460b4eca1f04de3c1cc716"
                    ]
                },
                {
                    "command": [
                        "apply filter_imp => x /= H.",
                        "VernacExtend",
                        "3c42b53d0efc26db114b00541ac5e7fcb29e6aeb"
                    ]
                },
                {
                    "command": [
                        "apply Rle_trans with (1 := norm_triangle_inv _ _) in H.",
                        "VernacExtend",
                        "3327f40cf34f97e08111380a93f77e33716ed547"
                    ]
                },
                {
                    "command": [
                        "rewrite -Ropp_minus_distr Rabs_Ropp in H.",
                        "VernacExtend",
                        "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
                    ]
                },
                {
                    "command": [
                        "apply Rabs_le_between' in H ; case: H => _ H.",
                        "VernacExtend",
                        "73a5221d6de079e421b5f800c4ba608fd59c9285"
                    ]
                },
                {
                    "command": [
                        "field_simplify in H.",
                        "VernacExtend",
                        "d6c420cf9852e16775ea4b6bf975465fd2a344a1"
                    ]
                },
                {
                    "command": [
                        "by rewrite !Rdiv_1 in H.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "equiv_refl",
            "line_nb": 91,
            "steps": [
                {
                    "command": [
                        "intros F FF f eps.",
                        "VernacExtend",
                        "50be01e2fbc69bb3b42794c514bbd2cf73135748"
                    ]
                },
                {
                    "command": [
                        "apply: filter_forall => x.",
                        "VernacExtend",
                        "4bd6fa79b17bcd2bfb7af091fb325367a20385d6"
                    ]
                },
                {
                    "command": [
                        "rewrite /minus plus_opp_r norm_zero.",
                        "VernacExtend",
                        "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
                    ]
                },
                {
                    "command": [
                        "apply Rmult_le_pos.",
                        "VernacExtend",
                        "e03207c3cef85471384dc0906485b056bc83a80a"
                    ]
                },
                {
                    "command": [
                        "by apply Rlt_le, eps.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "by apply norm_ge_0.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "equiv_carac_0",
            "line_nb": 129,
            "steps": [
                {
                    "command": [
                        "intros F FF f g H.",
                        "VernacExtend",
                        "4d70f45a905454bc8e04d30e90ca3eb916b3e23e"
                    ]
                },
                {
                    "command": [
                        "exists (fun x => minus (f x) (g x)).",
                        "VernacExtend",
                        "b7af9e6ed4ead4c0fb047d2239ae0c23691c36d3"
                    ]
                },
                {
                    "command": [
                        "split.",
                        "VernacExtend",
                        "55abc140132bd88981001ac656020469a8d503eb"
                    ]
                },
                {
                    "command": [
                        "intro x.",
                        "VernacExtend",
                        "f7163633eedf12f483fa0d8c0c119dd59431ca1e"
                    ]
                },
                {
                    "command": [
                        "by rewrite /minus plus_comm -plus_assoc plus_opp_l plus_zero_r.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "apply (domin_rw_l _ _ _ H).",
                        "VernacExtend",
                        "d663cde2b7f3c6c2808679343b713b5e073df859"
                    ]
                },
                {
                    "command": [
                        "by apply equiv_sym.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "equiv_ext_loc",
            "line_nb": 149,
            "steps": [
                {
                    "command": [
                        "move => H eps.",
                        "VernacExtend",
                        "b1b2cb7a3a617cba67460b4eca1f04de3c1cc716"
                    ]
                },
                {
                    "command": [
                        "move: H ; apply filter_imp.",
                        "VernacExtend",
                        "0748f60fd4bfbf18081aafc2b987584f77eabe68"
                    ]
                },
                {
                    "command": [
                        "move => x ->.",
                        "VernacExtend",
                        "b1b2cb7a3a617cba67460b4eca1f04de3c1cc716"
                    ]
                },
                {
                    "command": [
                        "rewrite /minus plus_opp_r norm_zero.",
                        "VernacExtend",
                        "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
                    ]
                },
                {
                    "command": [
                        "apply Rmult_le_pos.",
                        "VernacExtend",
                        "e03207c3cef85471384dc0906485b056bc83a80a"
                    ]
                },
                {
                    "command": [
                        "by apply Rlt_le, eps.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "by apply norm_ge_0.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "is_domin_le",
            "line_nb": 161,
            "steps": [
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "intros eps.",
                        "VernacExtend",
                        "786caed5d6705ffc7435ecfd5604e33c6ecd43f1"
                    ]
                },
                {
                    "command": [
                        "by apply H0.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "equiv_scal",
            "line_nb": 244,
            "steps": [
                {
                    "command": [
                        "intros F FF f g c [y Hc] H.",
                        "VernacExtend",
                        "4638215741ba795ba268b9edf9336b78c2ac3d18"
                    ]
                },
                {
                    "command": [
                        "apply domin_scal_l.",
                        "VernacExtend",
                        "2bd4be37859fd6f256c87067ec8e59805a815817"
                    ]
                },
                {
                    "command": [
                        "by exists y.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "move => eps /=.",
                        "VernacExtend",
                        "b1b2cb7a3a617cba67460b4eca1f04de3c1cc716"
                    ]
                },
                {
                    "command": [
                        "cut (F (fun x => norm (scal c (minus (g x) (f x))) <= eps * norm (g x))).",
                        "VernacExtend",
                        "296cc9258742c6ad8165f82aa8014a5e1ee8c82e"
                    ]
                },
                {
                    "command": [
                        "apply filter_imp => x.",
                        "VernacExtend",
                        "3c42b53d0efc26db114b00541ac5e7fcb29e6aeb"
                    ]
                },
                {
                    "command": [
                        "now rewrite scal_distr_l scal_opp_r.",
                        "VernacExtend",
                        "276cb1b1d654c3b906be8c12785939ceeaffac64"
                    ]
                },
                {
                    "command": [
                        "now apply domin_scal_r.",
                        "VernacExtend",
                        "62a350d2b4f0e5ae404e9c5fcde897231abd2fe9"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "equiv_plus",
            "line_nb": 254,
            "steps": [
                {
                    "command": [
                        "intros F FF f o H eps.",
                        "VernacExtend",
                        "d86ed4a9730097ac85bcbb8748646db09d9c95c7"
                    ]
                },
                {
                    "command": [
                        "move: (H eps) => {H}.",
                        "VernacExtend",
                        "b1b2cb7a3a617cba67460b4eca1f04de3c1cc716"
                    ]
                },
                {
                    "command": [
                        "apply filter_imp => x Hx.",
                        "VernacExtend",
                        "3c42b53d0efc26db114b00541ac5e7fcb29e6aeb"
                    ]
                },
                {
                    "command": [
                        "simpl.",
                        "VernacExtend",
                        "1b93169f4cf876d207c1fab22a2347202ab48d85"
                    ]
                },
                {
                    "command": [
                        "now rewrite /minus opp_plus plus_assoc plus_opp_r plus_zero_l norm_opp.",
                        "VernacExtend",
                        "276cb1b1d654c3b906be8c12785939ceeaffac64"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "domin_mult_r",
            "line_nb": 262,
            "steps": [
                {
                    "command": [
                        "intros T F FF f g h H eps.",
                        "VernacExtend",
                        "117a95a84a331622cbd130a589e5e65dcdda33eb"
                    ]
                },
                {
                    "command": [
                        "move: (H eps) => {H}.",
                        "VernacExtend",
                        "b1b2cb7a3a617cba67460b4eca1f04de3c1cc716"
                    ]
                },
                {
                    "command": [
                        "apply filter_imp => x H1.",
                        "VernacExtend",
                        "3c42b53d0efc26db114b00541ac5e7fcb29e6aeb"
                    ]
                },
                {
                    "command": [
                        "rewrite /norm /= /abs /= ?Rabs_mult.",
                        "VernacExtend",
                        "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
                    ]
                },
                {
                    "command": [
                        "rewrite -Rmult_assoc.",
                        "VernacExtend",
                        "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
                    ]
                },
                {
                    "command": [
                        "apply Rmult_le_compat_r.",
                        "VernacExtend",
                        "6c4c5a82dab802842919dd673f1978a3cb8cff73"
                    ]
                },
                {
                    "command": [
                        "by apply Rabs_pos.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "by apply H1.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "domin_mult",
            "line_nb": 278,
            "steps": [
                {
                    "command": [
                        "intros T F FF f1 f2 g1 g2 H1 H2 eps.",
                        "VernacExtend",
                        "4aa540c50b945cb3c3500c553f8fe752ee6e6e6b"
                    ]
                },
                {
                    "command": [
                        "move: (H1 (mkposreal _ (sqrt_lt_R0 _ (cond_pos eps)))) (H2 (mkposreal _ (sqrt_lt_R0 _ (cond_pos eps)))) => {H1 H2} /= H1 H2.",
                        "VernacExtend",
                        "b1b2cb7a3a617cba67460b4eca1f04de3c1cc716"
                    ]
                },
                {
                    "command": [
                        "generalize (filter_and _ _ H1 H2) => {H1 H2}.",
                        "VernacExtend",
                        "3c42b53d0efc26db114b00541ac5e7fcb29e6aeb"
                    ]
                },
                {
                    "command": [
                        "apply filter_imp => x [H1 H2].",
                        "VernacExtend",
                        "3c42b53d0efc26db114b00541ac5e7fcb29e6aeb"
                    ]
                },
                {
                    "command": [
                        "rewrite /norm /= /abs /= ?Rabs_mult.",
                        "VernacExtend",
                        "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
                    ]
                },
                {
                    "command": [
                        "rewrite -(sqrt_sqrt _ (Rlt_le _ _ (cond_pos eps))).",
                        "VernacExtend",
                        "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
                    ]
                },
                {
                    "command": [
                        "replace (sqrt eps * sqrt eps * (Rabs (f1 x) * Rabs (f2 x))) with ((sqrt eps * Rabs (f1 x))*(sqrt eps * Rabs (f2 x))) by ring.",
                        "VernacExtend",
                        "63ba904ab10b75e1dec9e1798cfd92a704d46450"
                    ]
                },
                {
                    "command": [
                        "apply Rmult_le_compat.",
                        "VernacExtend",
                        "99a65cd1efb8e35313415d4b052731e2b0746daf"
                    ]
                },
                {
                    "command": [
                        "by apply Rabs_pos.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "by apply Rabs_pos.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "by apply H1.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "by apply H2.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "domin_inv",
            "line_nb": 292,
            "steps": [
                {
                    "command": [
                        "intros T F FF f g Hg H eps.",
                        "VernacExtend",
                        "a8324d22f428c238321a8fbc0c3e9c0a7705a0f5"
                    ]
                },
                {
                    "command": [
                        "have Hf : F (fun x => f x <> 0).",
                        "VernacExtend",
                        "406cde1174359c53bf162a2a18c4eede395555f9"
                    ]
                },
                {
                    "command": [
                        "generalize (filter_and _ _ Hg (H (mkposreal _ Rlt_0_1))) => /=.",
                        "VernacExtend",
                        "3c42b53d0efc26db114b00541ac5e7fcb29e6aeb"
                    ]
                },
                {
                    "command": [
                        "apply filter_imp => x {Hg H} [Hg H].",
                        "VernacExtend",
                        "3c42b53d0efc26db114b00541ac5e7fcb29e6aeb"
                    ]
                },
                {
                    "command": [
                        "case: (Req_dec (f x) 0) => Hf.",
                        "VernacExtend",
                        "e00fff71ff314c991514fc71c41a3556702e444a"
                    ]
                },
                {
                    "command": [
                        "rewrite /norm /= /abs /= Hf Rabs_R0 Rmult_0_r in H.",
                        "VernacExtend",
                        "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
                    ]
                },
                {
                    "command": [
                        "apply Rlt_not_le in H.",
                        "VernacExtend",
                        "ea53aeaa51b4f56fc9c04a830473f8d64bd73d0d"
                    ]
                },
                {
                    "command": [
                        "move => _ ; apply H.",
                        "VernacExtend",
                        "d83b68a11a10a2d3f66d5ad53a43cca8ae591b9e"
                    ]
                },
                {
                    "command": [
                        "by apply Rabs_pos_lt.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "by [].",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "generalize (filter_and _ _ (H eps) (filter_and _ _ Hf Hg)) => {H Hf Hg}.",
                        "VernacExtend",
                        "3c42b53d0efc26db114b00541ac5e7fcb29e6aeb"
                    ]
                },
                {
                    "command": [
                        "apply filter_imp => x [H [Hf Hg]].",
                        "VernacExtend",
                        "3c42b53d0efc26db114b00541ac5e7fcb29e6aeb"
                    ]
                },
                {
                    "command": [
                        "rewrite /norm /= /abs /= ?Rabs_Rinv => //.",
                        "VernacExtend",
                        "3c42b53d0efc26db114b00541ac5e7fcb29e6aeb"
                    ]
                },
                {
                    "command": [
                        "replace (/ Rabs (f x)) with (Rabs (g x) / (Rabs (f x) * Rabs (g x))) by (field ; split ; by apply Rabs_no_R0).",
                        "VernacExtend",
                        "d0107051b9395172a0689112aef4608da87e0679"
                    ]
                },
                {
                    "command": [
                        "replace (eps * / Rabs (g x)) with (eps * Rabs (f x) / (Rabs (f x) * Rabs (g x))) by (field ; split ; by apply Rabs_no_R0).",
                        "VernacExtend",
                        "bd589384ef685788d6d244cd4971b08c32edf36b"
                    ]
                },
                {
                    "command": [
                        "apply Rmult_le_compat_r.",
                        "VernacExtend",
                        "6c4c5a82dab802842919dd673f1978a3cb8cff73"
                    ]
                },
                {
                    "command": [
                        "apply Rlt_le, Rinv_0_lt_compat, Rmult_lt_0_compat ; apply Rabs_pos_lt => //.",
                        "VernacExtend",
                        "06320807dea355f06ff12fe11a6afde49996a671"
                    ]
                },
                {
                    "command": [
                        "by apply H.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "equiv_mult",
            "line_nb": 312,
            "steps": [
                {
                    "command": [
                        "intros T F FF f1 f2 g1 g2 H1 H2.",
                        "VernacExtend",
                        "e950f671c632b9038b01f1c50585437fdbed7fa8"
                    ]
                },
                {
                    "command": [
                        "case: (equiv_carac_0 _ _ H1) => {H1} o1 [H1 Ho1].",
                        "VernacExtend",
                        "e00fff71ff314c991514fc71c41a3556702e444a"
                    ]
                },
                {
                    "command": [
                        "case: (equiv_carac_0 _ _ H2) => {H2} o2 [H2 Ho2].",
                        "VernacExtend",
                        "e00fff71ff314c991514fc71c41a3556702e444a"
                    ]
                },
                {
                    "command": [
                        "apply equiv_carac_1 with (fun x => o1 x * g2 x + g1 x * o2 x + o1 x * o2 x).",
                        "VernacExtend",
                        "388ee4d4807bd22ccb36db729f7f164add46d820"
                    ]
                },
                {
                    "command": [
                        "move => x ; rewrite H1 H2 /plus /= ; ring.",
                        "VernacExtend",
                        "21b6fe36e5498a843625648c497c009ca92aa0fe"
                    ]
                },
                {
                    "command": [
                        "repeat apply @domin_plus => //.",
                        "VernacExtend",
                        "d36194af035d418008b3fae8e9785d1af2d8af96"
                    ]
                },
                {
                    "command": [
                        "by apply domin_mult_r.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "by apply domin_mult_l.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "by apply domin_mult.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "equiv_inv",
            "line_nb": 323,
            "steps": [
                {
                    "command": [
                        "intros T F FF f g Hg H.",
                        "VernacExtend",
                        "6bc849b31101f4bcc9d865104d955f29e5357c8c"
                    ]
                },
                {
                    "command": [
                        "have Hf : F (fun x => f x <> 0).",
                        "VernacExtend",
                        "406cde1174359c53bf162a2a18c4eede395555f9"
                    ]
                },
                {
                    "command": [
                        "generalize (filter_and _ _ Hg (H (pos_div_2 (mkposreal _ Rlt_0_1)))) => /=.",
                        "VernacExtend",
                        "3c42b53d0efc26db114b00541ac5e7fcb29e6aeb"
                    ]
                },
                {
                    "command": [
                        "apply filter_imp => x {Hg H} [Hg H].",
                        "VernacExtend",
                        "3c42b53d0efc26db114b00541ac5e7fcb29e6aeb"
                    ]
                },
                {
                    "command": [
                        "case: (Req_dec (f x) 0) => Hf //.",
                        "VernacExtend",
                        "e00fff71ff314c991514fc71c41a3556702e444a"
                    ]
                },
                {
                    "command": [
                        "rewrite /minus /plus /opp /= Hf Ropp_0 Rplus_0_r in H.",
                        "VernacExtend",
                        "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
                    ]
                },
                {
                    "command": [
                        "generalize (norm_ge_0 (g x)) (norm_eq_zero (g x)).",
                        "VernacExtend",
                        "85a7143a56ef91f4a76f45623f1ed36b5460715e"
                    ]
                },
                {
                    "command": [
                        "rewrite /zero /=.",
                        "VernacExtend",
                        "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
                    ]
                },
                {
                    "command": [
                        "lra.",
                        "VernacExtend",
                        "c37bca18aec699b6843eab75e25df2491e3b9848"
                    ]
                },
                {
                    "command": [
                        "apply equiv_sym in H.",
                        "VernacExtend",
                        "aaeb4e716e80818b2ad3f02efaf48c5edfa85acf"
                    ]
                },
                {
                    "command": [
                        "move => eps.",
                        "VernacExtend",
                        "b1b2cb7a3a617cba67460b4eca1f04de3c1cc716"
                    ]
                },
                {
                    "command": [
                        "generalize (filter_and _ _ (filter_and _ _ Hf Hg) (H eps)).",
                        "VernacExtend",
                        "8fb55e5d2284051e3e490577446e21e56d692a6f"
                    ]
                },
                {
                    "command": [
                        "clear -FF.",
                        "VernacExtend",
                        "d12f32358a72d6f555669a899ea9e462663e7251"
                    ]
                },
                {
                    "command": [
                        "apply filter_imp.",
                        "VernacExtend",
                        "cd5d68d491d9b471ebb7deccb08d7a71ba953368"
                    ]
                },
                {
                    "command": [
                        "intros x [[Hf Hg] H].",
                        "VernacExtend",
                        "ed93ab5482f32d80da3b7ddfef071e55962e8358"
                    ]
                },
                {
                    "command": [
                        "rewrite /norm /= /abs /minus /plus /opp /=.",
                        "VernacExtend",
                        "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
                    ]
                },
                {
                    "command": [
                        "replace (/ g x + - / f x) with ((f x - g x) / (f x * g x)).",
                        "VernacExtend",
                        "b546894df215240dd6598858c889205979be9ac1"
                    ]
                },
                {
                    "command": [
                        "rewrite Rabs_div ?Rabs_Rinv ?Rabs_mult //.",
                        "VernacExtend",
                        "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
                    ]
                },
                {
                    "command": [
                        "apply Rle_div_l.",
                        "VernacExtend",
                        "300a9124ae599e97b5c7dcc1ad678aa6b0fecb98"
                    ]
                },
                {
                    "command": [
                        "apply Rmult_lt_0_compat ; by apply Rabs_pos_lt.",
                        "VernacExtend",
                        "b6efc6792e1877f26201f434eb7ad1c07f314cf8"
                    ]
                },
                {
                    "command": [
                        "field_simplify ; rewrite ?Rdiv_1.",
                        "VernacExtend",
                        "f0f737846cbca54b0661563cad780d391c67fc50"
                    ]
                },
                {
                    "command": [
                        "by [].",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "by apply Rabs_no_R0.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "by apply Rmult_integral_contrapositive_currified.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "field ; by split.",
                        "VernacExtend",
                        "3ee914fdf1169c2e6f3cdb8a22eb49a479eeb6d3"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "domin_comp",
            "line_nb": 352,
            "steps": [
                {
                    "command": [
                        "intros Hl Hg eps.",
                        "VernacExtend",
                        "41855372c20a7d2d6642620ccd9f02af7797ed4e"
                    ]
                },
                {
                    "command": [
                        "generalize (fun eps => Hl _ (Hg eps)) => {Hl Hg} /= Hl.",
                        "VernacExtend",
                        "3c42b53d0efc26db114b00541ac5e7fcb29e6aeb"
                    ]
                },
                {
                    "command": [
                        "by apply Hl.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "filterlim_equiv",
            "line_nb": 358,
            "steps": [
                {
                    "command": [
                        "intros T F FF f g [l| |] Hfg Hf P [eps HP] ; apply equiv_sym in Hfg ; unfold filtermap.",
                        "VernacExtend",
                        "4b98b10af68d3c72ece946961c30899d85be2ece"
                    ]
                },
                {
                    "command": [
                        "-",
                        "VernacBullet",
                        "581cab4bf49fa4b495e569bbda96fc8d28fddcc0"
                    ]
                },
                {
                    "command": [
                        "assert (He: 0 < eps / 2 / (Rabs l + 1)).",
                        "VernacExtend",
                        "2f45c04149d469289b0045b4213fafaf8c9154ed"
                    ]
                },
                {
                    "command": [
                        "apply Rdiv_lt_0_compat.",
                        "VernacExtend",
                        "283136f6e52505e4579f1f286529bc7e0bbfd6d7"
                    ]
                },
                {
                    "command": [
                        "apply is_pos_div_2.",
                        "VernacExtend",
                        "34ece1c858dc4d1fc16b226888abddacb10f0a54"
                    ]
                },
                {
                    "command": [
                        "apply Rplus_le_lt_0_compat.",
                        "VernacExtend",
                        "f52234f44384644fc6f21adef182d5c4067417f5"
                    ]
                },
                {
                    "command": [
                        "apply Rabs_pos.",
                        "VernacExtend",
                        "8e57e214403458a4dc8dafc960971b86cf3b856d"
                    ]
                },
                {
                    "command": [
                        "apply Rlt_0_1.",
                        "VernacExtend",
                        "c3f675388bf844e0740197fd71afa66e5eef091d"
                    ]
                },
                {
                    "command": [
                        "pose ineqs (y : R) := Rabs (y - l) < eps/2 /\\ Rabs y <= Rabs l + 1.",
                        "VernacExtend",
                        "3c5f04de94609049d978298aa02ff35fb35ea7c7"
                    ]
                },
                {
                    "command": [
                        "assert (Hl: Rbar_locally l ineqs).",
                        "VernacExtend",
                        "1236aa5ff0ecc832f313c6aa81c017c6cc69b438"
                    ]
                },
                {
                    "command": [
                        "assert (H: 0 < Rmin (eps / 2) 1).",
                        "VernacExtend",
                        "ed6c2cdabb65eea450a37520c0433f3fb698e7ec"
                    ]
                },
                {
                    "command": [
                        "apply Rmin_case.",
                        "VernacExtend",
                        "06bee284b3ab9229517272cc3728705bdc7b95ba"
                    ]
                },
                {
                    "command": [
                        "apply is_pos_div_2.",
                        "VernacExtend",
                        "34ece1c858dc4d1fc16b226888abddacb10f0a54"
                    ]
                },
                {
                    "command": [
                        "apply Rlt_0_1.",
                        "VernacExtend",
                        "c3f675388bf844e0740197fd71afa66e5eef091d"
                    ]
                },
                {
                    "command": [
                        "exists (mkposreal _ H).",
                        "VernacExtend",
                        "79f7a2ae5ada3371dd5656b5d0990cff18308b77"
                    ]
                },
                {
                    "command": [
                        "simpl.",
                        "VernacExtend",
                        "1b93169f4cf876d207c1fab22a2347202ab48d85"
                    ]
                },
                {
                    "command": [
                        "intros x Hx.",
                        "VernacExtend",
                        "4f408fcf0db2619f08da1108b4fc92384e2a5db3"
                    ]
                },
                {
                    "command": [
                        "split.",
                        "VernacExtend",
                        "55abc140132bd88981001ac656020469a8d503eb"
                    ]
                },
                {
                    "command": [
                        "apply Rlt_le_trans with (1 := Hx).",
                        "VernacExtend",
                        "17cfcea7cef1e39ddff4797053bb05abaf553802"
                    ]
                },
                {
                    "command": [
                        "apply Rmin_l.",
                        "VernacExtend",
                        "19942458506c6b3427aea84d1ee7179f00e19f1c"
                    ]
                },
                {
                    "command": [
                        "apply Rabs_le_between'.",
                        "VernacExtend",
                        "18ac0f066ec0a3fa096b48f5fb19e422bf5473dc"
                    ]
                },
                {
                    "command": [
                        "apply Rle_trans with (1 := Rabs_triang_inv2 _ _).",
                        "VernacExtend",
                        "14a8bab95d7d54b3bc854243175162382dc99507"
                    ]
                },
                {
                    "command": [
                        "apply Rlt_le.",
                        "VernacExtend",
                        "cdc4280500779f23bae235b94c24a4b2ea2921fe"
                    ]
                },
                {
                    "command": [
                        "apply Rlt_le_trans with (1 := Hx).",
                        "VernacExtend",
                        "17cfcea7cef1e39ddff4797053bb05abaf553802"
                    ]
                },
                {
                    "command": [
                        "apply Rmin_r.",
                        "VernacExtend",
                        "d165954e4d055817b42cbc8960efd3fee45e4f16"
                    ]
                },
                {
                    "command": [
                        "generalize (filter_and _ (fun (x : T) => ineqs (f x)) (Hfg (mkposreal _ He)) (Hf _ Hl)).",
                        "VernacExtend",
                        "dd2d65ebef0faec1156626bd87c34257bf3cf8c1"
                    ]
                },
                {
                    "command": [
                        "apply filter_imp.",
                        "VernacExtend",
                        "cd5d68d491d9b471ebb7deccb08d7a71ba953368"
                    ]
                },
                {
                    "command": [
                        "simpl.",
                        "VernacExtend",
                        "1b93169f4cf876d207c1fab22a2347202ab48d85"
                    ]
                },
                {
                    "command": [
                        "intros x [H1 [H2 H3]].",
                        "VernacExtend",
                        "27285365e73f998cd51b2595c36ffcb3d5e629ca"
                    ]
                },
                {
                    "command": [
                        "apply HP.",
                        "VernacExtend",
                        "ca37aebd7e8ae00878bfd4cba5592ae8e97d86d9"
                    ]
                },
                {
                    "command": [
                        "rewrite /ball /= /AbsRing_ball /= /abs /minus /plus /opp /=.",
                        "VernacExtend",
                        "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
                    ]
                },
                {
                    "command": [
                        "replace (g x + - l) with ((f x - l) + -(f x - g x)) by ring.",
                        "VernacExtend",
                        "6806e306df0bb909e7feb2976aa97d40c36d9e47"
                    ]
                },
                {
                    "command": [
                        "apply Rle_lt_trans with (1 := Rabs_triang _ _).",
                        "VernacExtend",
                        "f9c6acae1b531169f9dfd40f6360571bc11e9f82"
                    ]
                },
                {
                    "command": [
                        "replace (pos eps) with (eps / 2 + eps / 2 / (Rabs l + 1) * (Rabs l + 1)).",
                        "VernacExtend",
                        "786f63f069ef4da86a125c708927e05868722e00"
                    ]
                },
                {
                    "command": [
                        "apply Rplus_lt_le_compat with (1 := H2).",
                        "VernacExtend",
                        "625f75711c4b877bd829a9cf471486639d78bbb1"
                    ]
                },
                {
                    "command": [
                        "rewrite Rabs_Ropp.",
                        "VernacExtend",
                        "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
                    ]
                },
                {
                    "command": [
                        "apply Rle_trans with (1 := H1).",
                        "VernacExtend",
                        "2ee5aa053941e16dd67ff806efe73173552711a4"
                    ]
                },
                {
                    "command": [
                        "apply Rmult_le_compat_l with (2 := H3).",
                        "VernacExtend",
                        "3a710738ccb102c1ab226f33f7a6804ae7ea391a"
                    ]
                },
                {
                    "command": [
                        "now apply Rlt_le.",
                        "VernacExtend",
                        "3fa67bbd472123a7abc1f777aecc643fb3862e46"
                    ]
                },
                {
                    "command": [
                        "field.",
                        "VernacExtend",
                        "93f44750d651d466b74a0cc63f88acb56273d533"
                    ]
                },
                {
                    "command": [
                        "apply Rgt_not_eq.",
                        "VernacExtend",
                        "8860a9193cfdaf1f0316f8df1f2c0781738e5ef7"
                    ]
                },
                {
                    "command": [
                        "apply Rplus_le_lt_0_compat.",
                        "VernacExtend",
                        "f52234f44384644fc6f21adef182d5c4067417f5"
                    ]
                },
                {
                    "command": [
                        "apply Rabs_pos.",
                        "VernacExtend",
                        "8e57e214403458a4dc8dafc960971b86cf3b856d"
                    ]
                },
                {
                    "command": [
                        "apply Rlt_0_1.",
                        "VernacExtend",
                        "c3f675388bf844e0740197fd71afa66e5eef091d"
                    ]
                },
                {
                    "command": [
                        "-",
                        "VernacBullet",
                        "581cab4bf49fa4b495e569bbda96fc8d28fddcc0"
                    ]
                },
                {
                    "command": [
                        "pose ineq (y : R) := Rmax 0 (2 * eps) < y.",
                        "VernacExtend",
                        "3c5f04de94609049d978298aa02ff35fb35ea7c7"
                    ]
                },
                {
                    "command": [
                        "assert (Hl: Rbar_locally' p_infty ineq).",
                        "VernacExtend",
                        "379b2dc93f687425cd477f0a80f04b2150dace83"
                    ]
                },
                {
                    "command": [
                        "now exists (Rmax 0 (2 * eps)).",
                        "VernacExtend",
                        "240aab00eefdcb3882edbcb3dd92117f18c09207"
                    ]
                },
                {
                    "command": [
                        "generalize (filter_and _ (fun (x : T) => ineq (f x)) (Hfg (mkposreal _ pos_half_prf)) (Hf _ Hl)).",
                        "VernacExtend",
                        "5f9cb65a1678f99fc2ccdc034c578a25c7733574"
                    ]
                },
                {
                    "command": [
                        "apply filter_imp.",
                        "VernacExtend",
                        "cd5d68d491d9b471ebb7deccb08d7a71ba953368"
                    ]
                },
                {
                    "command": [
                        "simpl.",
                        "VernacExtend",
                        "1b93169f4cf876d207c1fab22a2347202ab48d85"
                    ]
                },
                {
                    "command": [
                        "intros x [H1 H2].",
                        "VernacExtend",
                        "dec14703281561ee29868a72a7ea2508387ba782"
                    ]
                },
                {
                    "command": [
                        "apply HP.",
                        "VernacExtend",
                        "ca37aebd7e8ae00878bfd4cba5592ae8e97d86d9"
                    ]
                },
                {
                    "command": [
                        "apply Rabs_le_between' in H1.",
                        "VernacExtend",
                        "0f7919c389a3e2db70fe3b15e32c272870503f42"
                    ]
                },
                {
                    "command": [
                        "generalize (Rplus_le_compat_l (- /2 * Rabs (f x)) _ _ (proj2 H1)).",
                        "VernacExtend",
                        "513d7b7e5a94e9c59e39b4b374efabfb3847be48"
                    ]
                },
                {
                    "command": [
                        "rewrite /norm /= /abs /=.",
                        "VernacExtend",
                        "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
                    ]
                },
                {
                    "command": [
                        "replace (- / 2 * Rabs (f x) + (g x + / 2 * Rabs (f x))) with (g x) by ring.",
                        "VernacExtend",
                        "c145e92ba29f22629ef5a22ab5cf2d15f6f0829b"
                    ]
                },
                {
                    "command": [
                        "apply Rlt_le_trans.",
                        "VernacExtend",
                        "9f04ea1a870a94e0b3994c25a9d6f73051b7ba12"
                    ]
                },
                {
                    "command": [
                        "rewrite Rabs_pos_eq.",
                        "VernacExtend",
                        "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
                    ]
                },
                {
                    "command": [
                        "apply Rmult_lt_reg_l with (1 := Rlt_R0_R2).",
                        "VernacExtend",
                        "528d7c65f9a7e5ac1cb11206b6a8a7491c877e8c"
                    ]
                },
                {
                    "command": [
                        "replace (2 * (- / 2 * f x + f x)) with (f x) by field.",
                        "VernacExtend",
                        "7197aaf92cbc0484a53cff587b460eca19c0bc62"
                    ]
                },
                {
                    "command": [
                        "apply Rle_lt_trans with (2 := H2).",
                        "VernacExtend",
                        "4b77b04e7ce4a2c88b59d674abdff4de9bb59b1f"
                    ]
                },
                {
                    "command": [
                        "apply Rmax_r.",
                        "VernacExtend",
                        "d3f964851377911a5dafd3727673be093a2b343f"
                    ]
                },
                {
                    "command": [
                        "apply Rlt_le.",
                        "VernacExtend",
                        "cdc4280500779f23bae235b94c24a4b2ea2921fe"
                    ]
                },
                {
                    "command": [
                        "apply Rle_lt_trans with (2 := H2).",
                        "VernacExtend",
                        "4b77b04e7ce4a2c88b59d674abdff4de9bb59b1f"
                    ]
                },
                {
                    "command": [
                        "apply Rmax_l.",
                        "VernacExtend",
                        "e8bdf305d751b877364ec9794b15c2d6e134dc98"
                    ]
                },
                {
                    "command": [
                        "-",
                        "VernacBullet",
                        "581cab4bf49fa4b495e569bbda96fc8d28fddcc0"
                    ]
                },
                {
                    "command": [
                        "pose ineq (y : R) := y < Rmin 0 (2 * eps).",
                        "VernacExtend",
                        "3c5f04de94609049d978298aa02ff35fb35ea7c7"
                    ]
                },
                {
                    "command": [
                        "assert (Hl: Rbar_locally' m_infty ineq).",
                        "VernacExtend",
                        "c3bf339dea441cc45563ad24aa75ab27012fd619"
                    ]
                },
                {
                    "command": [
                        "now exists (Rmin 0 (2 * eps)).",
                        "VernacExtend",
                        "d42355afaa7d7d16350ab1bcf4599ae4121996b2"
                    ]
                },
                {
                    "command": [
                        "generalize (filter_and _ (fun (x : T) => ineq (f x)) (Hfg (mkposreal _ pos_half_prf)) (Hf _ Hl)).",
                        "VernacExtend",
                        "5f9cb65a1678f99fc2ccdc034c578a25c7733574"
                    ]
                },
                {
                    "command": [
                        "apply filter_imp.",
                        "VernacExtend",
                        "cd5d68d491d9b471ebb7deccb08d7a71ba953368"
                    ]
                },
                {
                    "command": [
                        "simpl.",
                        "VernacExtend",
                        "1b93169f4cf876d207c1fab22a2347202ab48d85"
                    ]
                },
                {
                    "command": [
                        "intros x [H1 H2].",
                        "VernacExtend",
                        "dec14703281561ee29868a72a7ea2508387ba782"
                    ]
                },
                {
                    "command": [
                        "apply HP.",
                        "VernacExtend",
                        "ca37aebd7e8ae00878bfd4cba5592ae8e97d86d9"
                    ]
                },
                {
                    "command": [
                        "apply Rabs_le_between' in H1.",
                        "VernacExtend",
                        "0f7919c389a3e2db70fe3b15e32c272870503f42"
                    ]
                },
                {
                    "command": [
                        "generalize (Rplus_le_compat_l (/2 * Rabs (f x)) _ _ (proj1 H1)).",
                        "VernacExtend",
                        "52877cb5c82bfccaa8333e770aa70a713ee7e0f3"
                    ]
                },
                {
                    "command": [
                        "rewrite /norm /= /abs /=.",
                        "VernacExtend",
                        "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
                    ]
                },
                {
                    "command": [
                        "replace (/ 2 * Rabs (f x) + (g x - / 2 * Rabs (f x))) with (g x) by ring.",
                        "VernacExtend",
                        "571b7f798fff431b9d4a062fb39fc2984adc5751"
                    ]
                },
                {
                    "command": [
                        "intros H.",
                        "VernacExtend",
                        "5cfae87a34fa7b59a257c9640f1b674f6e6d780b"
                    ]
                },
                {
                    "command": [
                        "apply Rle_lt_trans with (1 := H).",
                        "VernacExtend",
                        "790f8088dd95dc3479d6aacd82345a55d22040af"
                    ]
                },
                {
                    "command": [
                        "rewrite Rabs_left.",
                        "VernacExtend",
                        "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
                    ]
                },
                {
                    "command": [
                        "apply Rmult_lt_reg_l with (1 := Rlt_R0_R2).",
                        "VernacExtend",
                        "528d7c65f9a7e5ac1cb11206b6a8a7491c877e8c"
                    ]
                },
                {
                    "command": [
                        "replace (2 * (/ 2 * - f x + f x)) with (f x) by field.",
                        "VernacExtend",
                        "e29dc6bc68d4620b48fa36d70316ebd2f86266f8"
                    ]
                },
                {
                    "command": [
                        "apply Rlt_le_trans with (1 := H2).",
                        "VernacExtend",
                        "c29a5f95b175dc50f0dcb1cbff43ffd4690fd2dd"
                    ]
                },
                {
                    "command": [
                        "apply Rmin_r.",
                        "VernacExtend",
                        "d165954e4d055817b42cbc8960efd3fee45e4f16"
                    ]
                },
                {
                    "command": [
                        "apply Rlt_le_trans with (1 := H2).",
                        "VernacExtend",
                        "c29a5f95b175dc50f0dcb1cbff43ffd4690fd2dd"
                    ]
                },
                {
                    "command": [
                        "apply Rmin_l.",
                        "VernacExtend",
                        "19942458506c6b3427aea84d1ee7179f00e19f1c"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        }
    ]
}