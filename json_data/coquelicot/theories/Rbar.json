{
    "filename": "theories/Rbar.v",
    "coq_project": "coquelicot",
    "vernac_cmds": [
        [
            "Require Import Reals.",
            "VernacRequire",
            "45681fd6487015ca7aa8c8e9b408e40e3103ca14"
        ],
        [
            "Require Import mathcomp.ssreflect.ssreflect.",
            "VernacRequire",
            "85e251063dc2b5a9653f7bb76dcd176ed36b42a9"
        ],
        [
            "Require Import Rcomplements.",
            "VernacRequire",
            "6092419151bd74aa7f83ac953c7ed042021bf7ad"
        ],
        [
            "Open Scope R_scope.",
            "VernacOpenCloseScope",
            "e9e2b017da79049aff27c5418fe22258c29a75e7"
        ],
        [
            "Inductive Rbar := | Finite : R -> Rbar | p_infty : Rbar | m_infty : Rbar.",
            "VernacInductive",
            "8b1b6bfcdbfd86ff8264cdd0564cd7b18f2c2d22"
        ],
        [
            "Definition real (x : Rbar) := match x with | Finite x => x | _ => 0 end.",
            "VernacDefinition",
            "f9cfd53d1d65a89eef24a0075c72e32f3e2d497d"
        ],
        [
            "Coercion Finite : R >-> Rbar.",
            "VernacCoercion",
            "7206abd9d9d67577130c8ebb1ff7e5ab699e2de7"
        ],
        [
            "Coercion real : Rbar >-> R.",
            "VernacCoercion",
            "76a828e490f6283ca240ea1e827e29545e9095c5"
        ],
        [
            "Definition is_finite (x : Rbar) := Finite (real x) = x.",
            "VernacDefinition",
            "7a9042de3185a7919aca4dc6163b2b767eebc445"
        ],
        [
            "Lemma is_finite_correct (x : Rbar) : is_finite x <-> exists y : R, x = Finite y.",
            "VernacStartTheoremProof",
            "cbc74c32de1926ef243b05ddf8f88e9f91d997dd"
        ],
        [
            "rewrite /is_finite ; case: x => /= ; split => // H.",
            "VernacExtend",
            "2253759ff5c580854290fce82296a80357452125"
        ],
        [
            "by exists r.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "by case: H.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "by case: H.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Definition Rbar_lt (x y : Rbar) : Prop := match x,y with | p_infty, _ | _, m_infty => False | m_infty, _ | _, p_infty => True | Finite x, Finite y => Rlt x y end.",
            "VernacDefinition",
            "2453696218ff4c72919fbcb26479d264d296dfc2"
        ],
        [
            "Definition Rbar_le (x y : Rbar) : Prop := match x,y with | m_infty, _ | _, p_infty => True | p_infty, _ | _, m_infty => False | Finite x, Finite y => Rle x y end.",
            "VernacDefinition",
            "9d05f11ea0ee3b56742086a626ecbc5a73eef6b3"
        ],
        [
            "Definition Rbar_opp (x : Rbar) := match x with | Finite x => Finite (-x) | p_infty => m_infty | m_infty => p_infty end.",
            "VernacDefinition",
            "35e9f656b4bfb8d9c41ff2908576a3343c8b3f4d"
        ],
        [
            "Definition Rbar_plus' (x y : Rbar) := match x,y with | p_infty, m_infty | m_infty, p_infty => None | p_infty, _ | _, p_infty => Some p_infty | m_infty, _ | _, m_infty => Some m_infty | Finite x', Finite y' => Some (Finite (x' + y')) end.",
            "VernacDefinition",
            "ed5efbe841781a1eebea4992a601019cd889bd2b"
        ],
        [
            "Definition Rbar_plus (x y : Rbar) := match Rbar_plus' x y with Some z => z | None => Finite 0 end.",
            "VernacDefinition",
            "85ac2d02a21aabaea52d7efe98a7b467a6d1dff3"
        ],
        [
            "Arguments Rbar_plus !x !y /.",
            "VernacArguments",
            "bd5b504120f3d73e59f7d64add17b25c96ef213b"
        ],
        [
            "Definition is_Rbar_plus (x y z : Rbar) : Prop := Rbar_plus' x y = Some z.",
            "VernacDefinition",
            "3d252abf288057a9151912ac310242312a6419a0"
        ],
        [
            "Definition ex_Rbar_plus (x y : Rbar) : Prop := match Rbar_plus' x y with Some _ => True | None => False end.",
            "VernacDefinition",
            "8586c90fdfdae547c0dd261698483eec064f6cb2"
        ],
        [
            "Arguments ex_Rbar_plus !x !y /.",
            "VernacArguments",
            "135cbd8481432bd906df177ccd00c6bcd88a6a91"
        ],
        [
            "Lemma is_Rbar_plus_unique (x y z : Rbar) : is_Rbar_plus x y z -> Rbar_plus x y = z.",
            "VernacStartTheoremProof",
            "5686e0b85b877d7a01df7981c9e144bf892297ac"
        ],
        [
            "unfold is_Rbar_plus, ex_Rbar_plus, Rbar_plus.",
            "VernacExtend",
            "a7eb07a42cf1c9d3c39483efa970750851f3ead6"
        ],
        [
            "case: Rbar_plus' => // a Ha.",
            "VernacExtend",
            "e00fff71ff314c991514fc71c41a3556702e444a"
        ],
        [
            "by inversion Ha.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma Rbar_plus_correct (x y : Rbar) : ex_Rbar_plus x y -> is_Rbar_plus x y (Rbar_plus x y).",
            "VernacStartTheoremProof",
            "6f0cf9d411377bd02315bbf1f1bd4a83d4e557b7"
        ],
        [
            "unfold is_Rbar_plus, ex_Rbar_plus, Rbar_plus.",
            "VernacExtend",
            "a7eb07a42cf1c9d3c39483efa970750851f3ead6"
        ],
        [
            "by case: Rbar_plus'.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Definition Rbar_minus (x y : Rbar) := Rbar_plus x (Rbar_opp y).",
            "VernacDefinition",
            "b130736084c8e12079c3dbfcf3f7ec2a7bc22ea1"
        ],
        [
            "Arguments Rbar_minus !x !y /.",
            "VernacArguments",
            "82c890077d7c0e6f47b52463d39cec283205e631"
        ],
        [
            "Definition is_Rbar_minus (x y z : Rbar) : Prop := is_Rbar_plus x (Rbar_opp y) z.",
            "VernacDefinition",
            "3dc2e82e26d7536a913d8ae850e6dd8e39781a37"
        ],
        [
            "Definition ex_Rbar_minus (x y : Rbar) : Prop := ex_Rbar_plus x (Rbar_opp y).",
            "VernacDefinition",
            "32d7fc646d26fe33d7343cf8e89bf996693aba0c"
        ],
        [
            "Arguments ex_Rbar_minus !x !y /.",
            "VernacArguments",
            "2e6ce4481e8ade9d291c06e064802b82a156b09a"
        ],
        [
            "Definition Rbar_inv (x : Rbar) : Rbar := match x with | Finite x => Finite (/x) | _ => Finite 0 end.",
            "VernacDefinition",
            "c3bad78fda61bbab3b9ed48cf111ab32a10ffa6a"
        ],
        [
            "Definition Rbar_mult' (x y : Rbar) := match x with | Finite x => match y with | Finite y => Some (Finite (x * y)) | p_infty => match (Rle_dec 0 x) with | left H => match Rle_lt_or_eq_dec _ _ H with left _ => Some p_infty | right _ => None end | right _ => Some m_infty end | m_infty => match (Rle_dec 0 x) with | left H => match Rle_lt_or_eq_dec _ _ H with left _ => Some m_infty | right _ => None end | right _ => Some p_infty end end | p_infty => match y with | Finite y => match (Rle_dec 0 y) with | left H => match Rle_lt_or_eq_dec _ _ H with left _ => Some p_infty | right _ => None end | right _ => Some m_infty end | p_infty => Some p_infty | m_infty => Some m_infty end | m_infty => match y with | Finite y => match (Rle_dec 0 y) with | left H => match Rle_lt_or_eq_dec _ _ H with left _ => Some m_infty | right _ => None end | right _ => Some p_infty end | p_infty => Some m_infty | m_infty => Some p_infty end end.",
            "VernacDefinition",
            "e0ce366e9c37afaf605b7e4c2ba0b110376b98da"
        ],
        [
            "Definition Rbar_mult (x y : Rbar) := match Rbar_mult' x y with Some z => z | None => Finite 0 end.",
            "VernacDefinition",
            "aa4b10b83b5cd1acb31395eb92930da79f03e94f"
        ],
        [
            "Arguments Rbar_mult !x !y /.",
            "VernacArguments",
            "5ea5c075ba4a2b8190a38919f9c9a0823dccdf2d"
        ],
        [
            "Definition is_Rbar_mult (x y z : Rbar) : Prop := Rbar_mult' x y = Some z.",
            "VernacDefinition",
            "6705baabbabab4ec12a235c1487b8c88f3cd8278"
        ],
        [
            "Definition ex_Rbar_mult (x y : Rbar) : Prop := match x with | Finite x => match y with | Finite y => True | p_infty => x <> 0 | m_infty => x <> 0 end | p_infty => match y with | Finite y => y <> 0 | p_infty => True | m_infty => True end | m_infty => match y with | Finite y => y <> 0 | p_infty => True | m_infty => True end end.",
            "VernacDefinition",
            "5c3e2a6780452b8c1904a4ea3cebae12dbf53a29"
        ],
        [
            "Arguments ex_Rbar_mult !x !y /.",
            "VernacArguments",
            "a994810e1baee5956cd78272f257352e74e82ed7"
        ],
        [
            "Definition Rbar_mult_pos (x : Rbar) (y : posreal) := match x with | Finite x => Finite (x*y) | _ => x end.",
            "VernacDefinition",
            "30061ef18f091a17ce3f1503685624e79cebd731"
        ],
        [
            "Lemma is_Rbar_mult_unique (x y z : Rbar) : is_Rbar_mult x y z -> Rbar_mult x y = z.",
            "VernacStartTheoremProof",
            "c9149eb41745773fd0db792a0f0748ad0cd80aba"
        ],
        [
            "unfold is_Rbar_mult ; case: x => [x | | ] ; case: y => [y | | ] ; case: z => [z | | ] //= H ; inversion H => // ; case: Rle_dec H => // H0 ; case: Rle_lt_or_eq_dec => //.",
            "VernacExtend",
            "3f0290a52b8942fc6a2d54b428079860d6b40c9c"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma Rbar_mult_correct (x y : Rbar) : ex_Rbar_mult x y -> is_Rbar_mult x y (Rbar_mult x y).",
            "VernacStartTheoremProof",
            "0d7b12d61433cc9f21675f568b1c701145b53ca7"
        ],
        [
            "case: x => [x | | ] ; case: y => [y | | ] //= H ; apply sym_not_eq in H ; unfold is_Rbar_mult ; simpl ; case: Rle_dec => // H0 ; case: Rle_lt_or_eq_dec => //.",
            "VernacExtend",
            "5347490166b1e540fdefe9805ba788afe1160dca"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma Rbar_mult_correct' (x y z : Rbar) : is_Rbar_mult x y z -> ex_Rbar_mult x y.",
            "VernacStartTheoremProof",
            "e9290c3baa9d9611bdf58891c952b6f704ed3408"
        ],
        [
            "unfold is_Rbar_mult ; case: x => [x | | ] ; case: y => [y | | ] //= ; case: Rle_dec => //= H ; try (case: Rle_lt_or_eq_dec => //=) ; intros.",
            "VernacExtend",
            "ca3fb4d513d8e70efd2a31963a892a5b197d262f"
        ],
        [
            "by apply Rgt_not_eq.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "by apply Rlt_not_eq, Rnot_le_lt.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "by apply Rgt_not_eq.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "by apply Rlt_not_eq, Rnot_le_lt.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "by apply Rgt_not_eq.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "by apply Rlt_not_eq, Rnot_le_lt.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "by apply Rgt_not_eq.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "by apply Rlt_not_eq, Rnot_le_lt.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Definition Rbar_div (x y : Rbar) : Rbar := Rbar_mult x (Rbar_inv y).",
            "VernacDefinition",
            "4f0079d4611882b840f5203a778ba7fc6ff442dc"
        ],
        [
            "Arguments Rbar_div !x !y /.",
            "VernacArguments",
            "1cdd05e300399376371fe0021f56fe5d2ce83ffe"
        ],
        [
            "Definition is_Rbar_div (x y z : Rbar) : Prop := is_Rbar_mult x (Rbar_inv y) z.",
            "VernacDefinition",
            "693ffcb202ac6a9cfcfef49479df1c6f3a27e27c"
        ],
        [
            "Definition ex_Rbar_div (x y : Rbar) : Prop := ex_Rbar_mult x (Rbar_inv y).",
            "VernacDefinition",
            "ef86823f5935847e447b9114c7751bf546ed6c8b"
        ],
        [
            "Arguments ex_Rbar_div !x !y /.",
            "VernacArguments",
            "fb70ed449286bed381e0b054b0f0432f6bd3f476"
        ],
        [
            "Definition Rbar_div_pos (x : Rbar) (y : posreal) := match x with | Finite x => Finite (x/y) | _ => x end.",
            "VernacDefinition",
            "d75e3b84201e1ac20a639aa4f732f49238c7b3f6"
        ],
        [
            "Lemma Rbar_finite_eq (x y : R) : Finite x = Finite y <-> x = y.",
            "VernacStartTheoremProof",
            "371e4014aee1d611a74c8c7cfe7f671ecb9980ef"
        ],
        [
            "split ; intros.",
            "VernacExtend",
            "3c0a2af2969d0c39838e9010244dfd28201b7f3e"
        ],
        [
            "apply Rle_antisym ; apply Rnot_lt_le ; intro.",
            "VernacExtend",
            "eeecd883201ff9fab03876726d8200ab831530c6"
        ],
        [
            "assert (Rbar_lt (Finite y) (Finite x)).",
            "VernacExtend",
            "666d2941f76c903c534c327d15ee368a39fc581e"
        ],
        [
            "simpl ; apply H0.",
            "VernacExtend",
            "f3b1c49695d3285eb4449422e0734d1845cb2531"
        ],
        [
            "rewrite H in H1 ; simpl in H1 ; by apply Rlt_irrefl in H1.",
            "VernacExtend",
            "fdaef1101102b5db05ee2ac08d92b15dc2556f01"
        ],
        [
            "assert (Rbar_lt (Finite x) (Finite y)).",
            "VernacExtend",
            "10249cb2ac908c18af3839ec7a2b9fcaeaf8cfb9"
        ],
        [
            "simpl ; apply H0.",
            "VernacExtend",
            "f3b1c49695d3285eb4449422e0734d1845cb2531"
        ],
        [
            "rewrite H in H1 ; simpl in H1 ; by apply Rlt_irrefl in H1.",
            "VernacExtend",
            "fdaef1101102b5db05ee2ac08d92b15dc2556f01"
        ],
        [
            "rewrite H ; reflexivity.",
            "VernacExtend",
            "b1be1af5462791a9f770b64f2c7c7a79f09391f7"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma Rbar_finite_neq (x y : R) : Finite x <> Finite y <-> x <> y.",
            "VernacStartTheoremProof",
            "3c3908d8b88c3d03ffd2ece84cc124de46a415b9"
        ],
        [
            "split => H ; contradict H ; by apply Rbar_finite_eq.",
            "VernacExtend",
            "b72ec3202bb70eb2c2964de94e178bbd880db4fe"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma Rbar_lt_not_eq (x y : Rbar) : Rbar_lt x y -> x<>y.",
            "VernacStartTheoremProof",
            "79ae1443f0e5a6f38b99a3ebb0df612fec13dd2a"
        ],
        [
            "destruct x ; destruct y ; simpl ; try easy.",
            "VernacExtend",
            "72d67ac61100c5030b2087e0ee52afa78083e1ba"
        ],
        [
            "intros H H0.",
            "VernacExtend",
            "90bdfc30bf7350754c3a8a5cfe1259219564aa47"
        ],
        [
            "apply Rbar_finite_eq in H0 ; revert H0 ; apply Rlt_not_eq, H.",
            "VernacExtend",
            "144a0fa40e1a789bcb0b1040aeaa1e88c0f7823c"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma Rbar_not_le_lt (x y : Rbar) : ~ Rbar_le x y -> Rbar_lt y x.",
            "VernacStartTheoremProof",
            "1bc276b1e463a5195cc67cd19a52eda8c6a553ea"
        ],
        [
            "destruct x ; destruct y ; simpl ; intuition.",
            "VernacExtend",
            "d63928ae7ec6d55e2705491d6eee4ccecf350151"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma Rbar_lt_not_le (x y : Rbar) : Rbar_lt y x -> ~ Rbar_le x y.",
            "VernacStartTheoremProof",
            "727af7c0fe4961184338ead85cd08f870a1bdf69"
        ],
        [
            "destruct x ; destruct y ; simpl ; intuition.",
            "VernacExtend",
            "d63928ae7ec6d55e2705491d6eee4ccecf350151"
        ],
        [
            "apply (Rlt_irrefl r0).",
            "VernacExtend",
            "37277175e1fa900648d2be5a5f75962ae114da5e"
        ],
        [
            "now apply Rlt_le_trans with (1 := H).",
            "VernacExtend",
            "4e7a4e4bf86d5cfc7af5a11194a2da554fb1b4f7"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma Rbar_not_lt_le (x y : Rbar) : ~ Rbar_lt x y -> Rbar_le y x.",
            "VernacStartTheoremProof",
            "8b9edccce434252b6a381ff97ce20785079d8895"
        ],
        [
            "destruct x ; destruct y ; simpl ; intuition.",
            "VernacExtend",
            "d63928ae7ec6d55e2705491d6eee4ccecf350151"
        ],
        [
            "now apply Rnot_lt_le.",
            "VernacExtend",
            "883c03500b3a45f34e956b64277ac45dec440d80"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma Rbar_le_not_lt (x y : Rbar) : Rbar_le y x -> ~ Rbar_lt x y.",
            "VernacStartTheoremProof",
            "e5193d679b249d6f353cb0a4cadc10ad831f8c57"
        ],
        [
            "destruct x ; destruct y ; simpl ; intuition ; contradict H0.",
            "VernacExtend",
            "83057ee088e206124163610d950a3cb4bfe2911c"
        ],
        [
            "now apply Rle_not_lt.",
            "VernacExtend",
            "0dcf5c4358be9e14d88136d202384ef0741f0f18"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma Rbar_le_refl : forall x : Rbar, Rbar_le x x.",
            "VernacStartTheoremProof",
            "3511d6a7b91b212e7615dff570c6bf77734c9f30"
        ],
        [
            "intros [x| |] ; try easy.",
            "VernacExtend",
            "24731d845fad9fe4d74eab85b64cfc4a1c823218"
        ],
        [
            "apply Rle_refl.",
            "VernacExtend",
            "0a60a50353d5cfa9a4ade0240c47d5160d6d423c"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma Rbar_lt_le : forall x y : Rbar, Rbar_lt x y -> Rbar_le x y.",
            "VernacStartTheoremProof",
            "c2491f4937fb666fdc428a44667dcbcfc06d80d1"
        ],
        [
            "intros [x| |] [y| |] ; try easy.",
            "VernacExtend",
            "32abf7b4b59f8da678db636dfc50edb8dfdde7cd"
        ],
        [
            "apply Rlt_le.",
            "VernacExtend",
            "cdc4280500779f23bae235b94c24a4b2ea2921fe"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma Rbar_total_order (x y : Rbar) : {Rbar_lt x y} + {x = y} + {Rbar_lt y x}.",
            "VernacStartTheoremProof",
            "1630a7b416d2055e7c8ac20ac984884f13c951bd"
        ],
        [
            "destruct x ; destruct y ; simpl ; intuition.",
            "VernacExtend",
            "d63928ae7ec6d55e2705491d6eee4ccecf350151"
        ],
        [
            "destruct (total_order_T r r0) ; intuition.",
            "VernacExtend",
            "1618735d4d7c4d7be23d417e7465ce54e9936ade"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma Rbar_eq_dec (x y : Rbar) : {x = y} + {x <> y}.",
            "VernacStartTheoremProof",
            "d8694eca2f5c41542f61f307f2e93f7f20962c6e"
        ],
        [
            "intros ; destruct (Rbar_total_order x y) as [[H|H]|H].",
            "VernacExtend",
            "e779765af28de1a0cbd6c12ec6c76bfb605a87df"
        ],
        [
            "right ; revert H ; destruct x as [x| |] ; destruct y as [y| |] ; simpl ; intros H ; try easy.",
            "VernacExtend",
            "db8927f165add9ca9b3de7a34ef11b8a1f180b15"
        ],
        [
            "contradict H.",
            "VernacExtend",
            "0da4c7d87991a3ed628c796c81ed5112e2aac241"
        ],
        [
            "apply Rbar_finite_eq in H ; try apply Rle_not_lt, Req_le ; auto.",
            "VernacExtend",
            "6169980b592a20c317841c0fbafca8fc16f1e066"
        ],
        [
            "left ; apply H.",
            "VernacExtend",
            "0aa460f78d11391b522e663a46e7bb217b2676f0"
        ],
        [
            "right ; revert H ; destruct x as [x| |] ; destruct y as [y| |] ; simpl ; intros H ; try easy.",
            "VernacExtend",
            "db8927f165add9ca9b3de7a34ef11b8a1f180b15"
        ],
        [
            "contradict H.",
            "VernacExtend",
            "0da4c7d87991a3ed628c796c81ed5112e2aac241"
        ],
        [
            "apply Rbar_finite_eq in H ; apply Rle_not_lt, Req_le ; auto.",
            "VernacExtend",
            "d83f3b6ce6a2b1fe56ff15317e2d396672c5722e"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma Rbar_lt_dec (x y : Rbar) : {Rbar_lt x y} + {~Rbar_lt x y}.",
            "VernacStartTheoremProof",
            "c78b8f95eadaa914bffeb5ad72e1d043fd298f09"
        ],
        [
            "destruct (Rbar_total_order x y) as [H|H] ; [ destruct H as [H|H]|].",
            "VernacExtend",
            "6363e99454dfa57d108ba5d55b6545d422941414"
        ],
        [
            "now left.",
            "VernacExtend",
            "2bd81021638064dbaa3d520cec398253376a1f37"
        ],
        [
            "right ; rewrite H ; clear H ; destruct y ; auto ; apply Rlt_irrefl ; auto.",
            "VernacExtend",
            "8986c137ad6d36323207fbed5f4e45146c862ab6"
        ],
        [
            "right ; revert H ; destruct x as [x | | ] ; destruct y as [y | | ] ; intros H ; auto ; apply Rle_not_lt, Rlt_le ; auto.",
            "VernacExtend",
            "4464a4eb5252017a3c4fcddb66b7c840fcea44d8"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma Rbar_lt_le_dec (x y : Rbar) : {Rbar_lt x y} + {Rbar_le y x}.",
            "VernacStartTheoremProof",
            "232b7ed34a49fa517a6c05e762c09261f696b7c1"
        ],
        [
            "destruct (Rbar_total_order x y) as [[H|H]|H].",
            "VernacExtend",
            "0f68c4f54709f75574e3026ce3f196b77337a934"
        ],
        [
            "now left.",
            "VernacExtend",
            "2bd81021638064dbaa3d520cec398253376a1f37"
        ],
        [
            "right.",
            "VernacExtend",
            "27e417a3497755767e1a1d6ba87753ecddaee6b7"
        ],
        [
            "rewrite H.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "apply Rbar_le_refl.",
            "VernacExtend",
            "de7bb33cecdb8ad946952658e741ffce5acb618e"
        ],
        [
            "right.",
            "VernacExtend",
            "27e417a3497755767e1a1d6ba87753ecddaee6b7"
        ],
        [
            "now apply Rbar_lt_le.",
            "VernacExtend",
            "bab8380159442056bd9449e9a95984c8ba5f3151"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma Rbar_le_dec (x y : Rbar) : {Rbar_le x y} + {~Rbar_le x y}.",
            "VernacStartTheoremProof",
            "9c82edb88a70595a8cdeb4c636891d4fe9afddaf"
        ],
        [
            "destruct (Rbar_total_order x y) as [[H|H]|H].",
            "VernacExtend",
            "0f68c4f54709f75574e3026ce3f196b77337a934"
        ],
        [
            "left.",
            "VernacExtend",
            "06dad9fc5698018f3f1213205145fec906c612b1"
        ],
        [
            "now apply Rbar_lt_le.",
            "VernacExtend",
            "bab8380159442056bd9449e9a95984c8ba5f3151"
        ],
        [
            "left.",
            "VernacExtend",
            "06dad9fc5698018f3f1213205145fec906c612b1"
        ],
        [
            "rewrite H.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "apply Rbar_le_refl.",
            "VernacExtend",
            "de7bb33cecdb8ad946952658e741ffce5acb618e"
        ],
        [
            "right.",
            "VernacExtend",
            "27e417a3497755767e1a1d6ba87753ecddaee6b7"
        ],
        [
            "now apply Rbar_lt_not_le.",
            "VernacExtend",
            "411f8ac08cc276a9b257f71f621b4d987f92b275"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma Rbar_le_lt_dec (x y : Rbar) : {Rbar_le x y} + {Rbar_lt y x}.",
            "VernacStartTheoremProof",
            "b5be5925604e550565a51caf5a66e1150650b70a"
        ],
        [
            "destruct (Rbar_total_order x y) as [[H|H]|H].",
            "VernacExtend",
            "0f68c4f54709f75574e3026ce3f196b77337a934"
        ],
        [
            "left.",
            "VernacExtend",
            "06dad9fc5698018f3f1213205145fec906c612b1"
        ],
        [
            "now apply Rbar_lt_le.",
            "VernacExtend",
            "bab8380159442056bd9449e9a95984c8ba5f3151"
        ],
        [
            "left.",
            "VernacExtend",
            "06dad9fc5698018f3f1213205145fec906c612b1"
        ],
        [
            "rewrite H.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "apply Rbar_le_refl.",
            "VernacExtend",
            "de7bb33cecdb8ad946952658e741ffce5acb618e"
        ],
        [
            "now right.",
            "VernacExtend",
            "18eb395a45fbe5648757d528efaf583b695576c7"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma Rbar_le_lt_or_eq_dec (x y : Rbar) : Rbar_le x y -> { Rbar_lt x y } + { x = y }.",
            "VernacStartTheoremProof",
            "e0a08d45b02940edbf2e7029ec41089a4cd6bfec"
        ],
        [
            "destruct (Rbar_total_order x y) as [[H|H]|H].",
            "VernacExtend",
            "0f68c4f54709f75574e3026ce3f196b77337a934"
        ],
        [
            "now left.",
            "VernacExtend",
            "2bd81021638064dbaa3d520cec398253376a1f37"
        ],
        [
            "now right.",
            "VernacExtend",
            "18eb395a45fbe5648757d528efaf583b695576c7"
        ],
        [
            "intros K.",
            "VernacExtend",
            "e2e6d7d842a55ca16087666d9b923718d8bd0dec"
        ],
        [
            "now elim (Rbar_le_not_lt _ _ K).",
            "VernacExtend",
            "f5c74e31b04756fb3eb52ec782c5cc5089ea9fbd"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma Rbar_lt_trans (x y z : Rbar) : Rbar_lt x y -> Rbar_lt y z -> Rbar_lt x z.",
            "VernacStartTheoremProof",
            "184c707000c363a953d53f60079f093f17828b77"
        ],
        [
            "destruct x ; destruct y ; destruct z ; simpl ; intuition.",
            "VernacExtend",
            "163b58c6d370a60d3ff71a3f17f20a7d51136481"
        ],
        [
            "now apply Rlt_trans with r0.",
            "VernacExtend",
            "ab192012ff8639f7b32d2081c558e513cab7cd2a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma Rbar_lt_le_trans (x y z : Rbar) : Rbar_lt x y -> Rbar_le y z -> Rbar_lt x z.",
            "VernacStartTheoremProof",
            "7bfea75a80faa4feba5ea62d10897d3c2eedb26b"
        ],
        [
            "destruct x ; destruct y ; destruct z ; simpl ; intuition.",
            "VernacExtend",
            "163b58c6d370a60d3ff71a3f17f20a7d51136481"
        ],
        [
            "now apply Rlt_le_trans with r0.",
            "VernacExtend",
            "6b6ac8d7936b48a588472d412fb86ed6c1049d0b"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma Rbar_le_lt_trans (x y z : Rbar) : Rbar_le x y -> Rbar_lt y z -> Rbar_lt x z.",
            "VernacStartTheoremProof",
            "cac25edda59ca065e2635bfda0ffd919b0a56c20"
        ],
        [
            "destruct x ; destruct y ; destruct z ; simpl ; intuition.",
            "VernacExtend",
            "163b58c6d370a60d3ff71a3f17f20a7d51136481"
        ],
        [
            "now apply Rle_lt_trans with r0.",
            "VernacExtend",
            "831ebb334993a3c4e3699403f40e4b5eaf4547fb"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma Rbar_le_trans (x y z : Rbar) : Rbar_le x y -> Rbar_le y z -> Rbar_le x z.",
            "VernacStartTheoremProof",
            "1b29da7db643a1643cdb6e3daddae5e5ef4d8a58"
        ],
        [
            "destruct x ; destruct y ; destruct z ; simpl ; intuition.",
            "VernacExtend",
            "163b58c6d370a60d3ff71a3f17f20a7d51136481"
        ],
        [
            "now apply Rle_trans with r0.",
            "VernacExtend",
            "9f48408d8b1c39f0665476e06c0317a8b4456481"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma Rbar_le_antisym (x y : Rbar) : Rbar_le x y -> Rbar_le y x -> x = y.",
            "VernacStartTheoremProof",
            "7a81fd1f9235391916cab8421b5f5da2ab318f3b"
        ],
        [
            "destruct x ; destruct y ; simpl ; intuition.",
            "VernacExtend",
            "d63928ae7ec6d55e2705491d6eee4ccecf350151"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma Rbar_opp_involutive (x : Rbar) : (Rbar_opp (Rbar_opp x)) = x.",
            "VernacStartTheoremProof",
            "9d81afe50e5a3b9e2e631cc2b5c17c99c05a03ee"
        ],
        [
            "destruct x as [x| | ] ; auto ; simpl ; rewrite Ropp_involutive ; auto.",
            "VernacExtend",
            "833e9fb00113fbdc89f88cdbffd80fb9cc31582c"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma Rbar_opp_lt (x y : Rbar) : Rbar_lt (Rbar_opp x) (Rbar_opp y) <-> Rbar_lt y x.",
            "VernacStartTheoremProof",
            "6197be7c0abc27da9462c08c2a118532033a0e7a"
        ],
        [
            "destruct x as [x | | ] ; destruct y as [y | | ] ; split ; auto ; intro H ; simpl ; try left.",
            "VernacExtend",
            "9ff5d3ec7fcb0e5198b16a1fff258446597e42e1"
        ],
        [
            "apply Ropp_lt_cancel ; auto.",
            "VernacExtend",
            "c226d360e3a489bf2d5c2aec198e0a701f5e501f"
        ],
        [
            "apply Ropp_lt_contravar ; auto.",
            "VernacExtend",
            "da81cc78f27cc5953d42f3c3a8e6f548e06316d2"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma Rbar_opp_le (x y : Rbar) : Rbar_le (Rbar_opp x) (Rbar_opp y) <-> Rbar_le y x.",
            "VernacStartTheoremProof",
            "9b7b9c1f82e114cef36acf445f3ff2fd39f70ac8"
        ],
        [
            "destruct x as [x| |] ; destruct y as [y| |] ; simpl ; intuition.",
            "VernacExtend",
            "fb2ba1cd01db9f6b81d8e695cd7394e3f0f00a2e"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma Rbar_opp_eq (x y : Rbar) : (Rbar_opp x) = (Rbar_opp y) <-> x = y.",
            "VernacStartTheoremProof",
            "2e86d70df5a7c7b1035e5c8ebe7e71743c1b8783"
        ],
        [
            "split ; intros H.",
            "VernacExtend",
            "a22fcc98cae3c9e7feb477b9e8b0236d37ea8d65"
        ],
        [
            "rewrite <- (Rbar_opp_involutive x), H, Rbar_opp_involutive ; reflexivity.",
            "VernacExtend",
            "183dc3348b8861cea8c3212d7fbf6e5af389283d"
        ],
        [
            "rewrite H ; reflexivity.",
            "VernacExtend",
            "b1be1af5462791a9f770b64f2c7c7a79f09391f7"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma Rbar_opp_real (x : Rbar) : real (Rbar_opp x) = - real x.",
            "VernacStartTheoremProof",
            "c81bafa50fb53ab75fae2da992012fc82f9b5d24"
        ],
        [
            "destruct x as [x | | ] ; simpl ; intuition.",
            "VernacExtend",
            "424eaf6b65bf84620f02b503c96b26342d42b0e2"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma Rbar_plus'_comm : forall x y, Rbar_plus' x y = Rbar_plus' y x.",
            "VernacStartTheoremProof",
            "90dfe0d3e36715cafbebe7222fb0b0124658bbd7"
        ],
        [
            "intros [x| |] [y| |] ; try reflexivity.",
            "VernacExtend",
            "5c0e92b9b8510ddc55d40bcb5e513c555f58a5ea"
        ],
        [
            "apply (f_equal (fun x => Some (Finite x))), Rplus_comm.",
            "VernacExtend",
            "a7b157625bf9f42bbb7711fea0b8c0e4d624d4c2"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma ex_Rbar_plus_comm : forall x y, ex_Rbar_plus x y -> ex_Rbar_plus y x.",
            "VernacStartTheoremProof",
            "6ff89496f300b4b978538f56944ebf94b7d4afe8"
        ],
        [
            "now intros [x| |] [y| |].",
            "VernacExtend",
            "d7d7857821bbcec29d97f90af352647cc6037cd8"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma ex_Rbar_plus_opp (x y : Rbar) : ex_Rbar_plus x y -> ex_Rbar_plus (Rbar_opp x) (Rbar_opp y).",
            "VernacStartTheoremProof",
            "17b4aadb6f833229a6745509a36e55fdaa2fa7a9"
        ],
        [
            "case: x => [x | | ] ; case: y => [y | | ] => //.",
            "VernacExtend",
            "ba44c9d0281a02110ce54645304e6d990debd9c0"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma Rbar_plus_0_r (x : Rbar) : Rbar_plus x (Finite 0) = x.",
            "VernacStartTheoremProof",
            "f42ccb726eb9c27e9a8991f9f02d6b839c273b42"
        ],
        [
            "case: x => //= ; intuition.",
            "VernacExtend",
            "5f37a6ca7acd455819292006b181a93425271ada"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma Rbar_plus_0_l (x : Rbar) : Rbar_plus (Finite 0) x = x.",
            "VernacStartTheoremProof",
            "6b9a88a31be932202b8a62b54d46cc1f0476fd8e"
        ],
        [
            "case: x => //= ; intuition.",
            "VernacExtend",
            "5f37a6ca7acd455819292006b181a93425271ada"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma Rbar_plus_comm (x y : Rbar) : Rbar_plus x y = Rbar_plus y x.",
            "VernacStartTheoremProof",
            "c334cb9670de5f07fbf6aec2e09ce8842ebcd399"
        ],
        [
            "case x ; case y ; intuition.",
            "VernacExtend",
            "133d442f0a4715c9804449fdc854a42398fccc53"
        ],
        [
            "simpl.",
            "VernacExtend",
            "1b93169f4cf876d207c1fab22a2347202ab48d85"
        ],
        [
            "apply f_equal, Rplus_comm.",
            "VernacExtend",
            "b5f391a1331215342714d1c3d4380c12bd4cccd6"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma Rbar_plus_lt_compat (a b c d : Rbar) : Rbar_lt a b -> Rbar_lt c d -> Rbar_lt (Rbar_plus a c) (Rbar_plus b d).",
            "VernacStartTheoremProof",
            "899c6de2872673b9d56c38d3e7e54786d756d31a"
        ],
        [
            "case: a => [a | | ] // ; case: b => [b | | ] // ; case: c => [c | | ] // ; case: d => [d | | ] // ; apply Rplus_lt_compat.",
            "VernacExtend",
            "a9f961e9d57efac4bea41e2fa9833b874abe4f3a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma Rbar_plus_le_compat (a b c d : Rbar) : Rbar_le a b -> Rbar_le c d -> Rbar_le (Rbar_plus a c) (Rbar_plus b d).",
            "VernacStartTheoremProof",
            "b335093d6a42d77a6601c6565f597d72ae0d2b28"
        ],
        [
            "case: a => [a | | ] // ; case: b => [b | | ] // ; case: c => [c | | ] // ; case: d => [d | | ] //.",
            "VernacExtend",
            "9c855307bebe9c9fcd60ebdc397f010c9a03df54"
        ],
        [
            "apply Rplus_le_compat.",
            "VernacExtend",
            "7a69898b466991bee51047e3a2fc51c3b80fbd93"
        ],
        [
            "intros _ _.",
            "VernacExtend",
            "95d87eaa905098932d683036fadece3b7ae69933"
        ],
        [
            "apply Rle_refl.",
            "VernacExtend",
            "0a60a50353d5cfa9a4ade0240c47d5160d6d423c"
        ],
        [
            "intros _ _.",
            "VernacExtend",
            "95d87eaa905098932d683036fadece3b7ae69933"
        ],
        [
            "apply Rle_refl.",
            "VernacExtend",
            "0a60a50353d5cfa9a4ade0240c47d5160d6d423c"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma Rbar_plus_opp (x y : Rbar) : Rbar_plus (Rbar_opp x) (Rbar_opp y) = Rbar_opp (Rbar_plus x y).",
            "VernacStartTheoremProof",
            "3bed8288a0256facbd09c06bca888c68eddb8485"
        ],
        [
            "case: x => [x | | ] ; case: y => [y | | ] //= ; apply f_equal ; ring.",
            "VernacExtend",
            "645626fdaaf90435cc3f27cf12becf6a86ee6f54"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma Rbar_minus_eq_0 (x : Rbar) : Rbar_minus x x = 0.",
            "VernacStartTheoremProof",
            "b70332eabe239b9b1a3706da57dffc3600e4f44e"
        ],
        [
            "case: x => //= x ; by apply f_equal, Rcomplements.Rminus_eq_0.",
            "VernacExtend",
            "14b141a2d70f00681f703015bc169478d399fe62"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma Rbar_opp_minus (x y : Rbar) : Rbar_opp (Rbar_minus x y) = Rbar_minus y x.",
            "VernacStartTheoremProof",
            "61386882982c42d7f191e70b0808693ab16fc034"
        ],
        [
            "case: x => [x | | ] ; case: y => [y | | ] //=.",
            "VernacExtend",
            "5887f8022a4f6389ac249140364feb69c4f18799"
        ],
        [
            "by rewrite Ropp_minus_distr'.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "by rewrite Ropp_0.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "by rewrite Ropp_0.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma Rbar_inv_opp (x : Rbar) : x <> 0 -> Rbar_inv (Rbar_opp x) = Rbar_opp (Rbar_inv x).",
            "VernacStartTheoremProof",
            "2625a67042615e95239fe48ddf464fe8f901fbf1"
        ],
        [
            "case: x => [x | | ] /= Hx.",
            "VernacExtend",
            "e00fff71ff314c991514fc71c41a3556702e444a"
        ],
        [
            "rewrite Ropp_inv_permute => //.",
            "VernacExtend",
            "3c42b53d0efc26db114b00541ac5e7fcb29e6aeb"
        ],
        [
            "contradict Hx.",
            "VernacExtend",
            "51524c6f0a35f50dcb732884ab4e3630854bd951"
        ],
        [
            "by rewrite Hx.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "by rewrite Ropp_0.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "by rewrite Ropp_0.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma Rbar_mult'_comm (x y : Rbar) : Rbar_mult' x y = Rbar_mult' y x.",
            "VernacStartTheoremProof",
            "829c031081b7b744afaddbda070907449bbe1009"
        ],
        [
            "case: x => [x | | ] ; case: y => [y | | ] //=.",
            "VernacExtend",
            "5887f8022a4f6389ac249140364feb69c4f18799"
        ],
        [
            "by rewrite Rmult_comm.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma Rbar_mult'_opp_r (x y : Rbar) : Rbar_mult' x (Rbar_opp y) = match Rbar_mult' x y with Some z => Some (Rbar_opp z) | None => None end.",
            "VernacStartTheoremProof",
            "199b908774eb1f4c4aaea2908c82d2ffd61a926d"
        ],
        [
            "case: x => [x | | ] ; case: y => [y | | ] //= ; (try case: Rle_dec => Hx //=) ; (try case: Rle_lt_or_eq_dec => //= Hx0).",
            "VernacExtend",
            "771ab3b03cd85bb3b1d4655eda608217b60c62e8"
        ],
        [
            "by rewrite Ropp_mult_distr_r_reverse.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "rewrite -Ropp_0 in Hx0.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "apply Ropp_lt_cancel in Hx0.",
            "VernacExtend",
            "3b9bb7a1061edc0d56e1e77b58cab1c69a2e5935"
        ],
        [
            "case Rle_dec => Hy //=.",
            "VernacExtend",
            "3c42b53d0efc26db114b00541ac5e7fcb29e6aeb"
        ],
        [
            "now elim Rle_not_lt with (1 := Hy).",
            "VernacExtend",
            "a1d7f7164db6577ea20c76afd95b8c0e7cb2dfb2"
        ],
        [
            "case Rle_dec => Hy //=.",
            "VernacExtend",
            "3c42b53d0efc26db114b00541ac5e7fcb29e6aeb"
        ],
        [
            "case Rle_lt_or_eq_dec => Hy0 //=.",
            "VernacExtend",
            "3c42b53d0efc26db114b00541ac5e7fcb29e6aeb"
        ],
        [
            "elim Rlt_not_le with (1 := Hy0).",
            "VernacExtend",
            "4b9e1c66d17ff8c7fb69f7aafafb90d2fdadde2e"
        ],
        [
            "apply Ropp_le_cancel.",
            "VernacExtend",
            "b5845fa505cf45d1b1826b280ab3b8249238dd4d"
        ],
        [
            "by rewrite Ropp_0.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "elim Hy.",
            "VernacExtend",
            "58c8be1582093d26cc1883c4d437081a09d197a8"
        ],
        [
            "apply Ropp_le_cancel.",
            "VernacExtend",
            "b5845fa505cf45d1b1826b280ab3b8249238dd4d"
        ],
        [
            "rewrite -Hx0 Ropp_0.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "apply Rle_refl.",
            "VernacExtend",
            "0a60a50353d5cfa9a4ade0240c47d5160d6d423c"
        ],
        [
            "case Rle_dec => Hy //=.",
            "VernacExtend",
            "3c42b53d0efc26db114b00541ac5e7fcb29e6aeb"
        ],
        [
            "case Rle_lt_or_eq_dec => Hy0 //=.",
            "VernacExtend",
            "3c42b53d0efc26db114b00541ac5e7fcb29e6aeb"
        ],
        [
            "elim Hx.",
            "VernacExtend",
            "6da67d91ac8c390d9321f1009df1327ed8c33ccd"
        ],
        [
            "rewrite -Hy0 Ropp_0.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "apply Rle_refl.",
            "VernacExtend",
            "0a60a50353d5cfa9a4ade0240c47d5160d6d423c"
        ],
        [
            "elim Hx.",
            "VernacExtend",
            "6da67d91ac8c390d9321f1009df1327ed8c33ccd"
        ],
        [
            "rewrite -Ropp_0.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "apply Ropp_le_contravar.",
            "VernacExtend",
            "ac8d32b190d111aa8834547674121bcf3bb8a0ed"
        ],
        [
            "apply Rlt_le.",
            "VernacExtend",
            "cdc4280500779f23bae235b94c24a4b2ea2921fe"
        ],
        [
            "now apply Rnot_le_lt.",
            "VernacExtend",
            "472d95d86d32de5f65bdb99059686dfbade9f294"
        ],
        [
            "case Rle_dec => Hy //=.",
            "VernacExtend",
            "3c42b53d0efc26db114b00541ac5e7fcb29e6aeb"
        ],
        [
            "elim Rlt_not_le with (1 := Hx0).",
            "VernacExtend",
            "e135fbb1708d1fde914abc05bc58760e900a0990"
        ],
        [
            "rewrite -Ropp_0.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "now apply Ropp_le_contravar.",
            "VernacExtend",
            "c653793081f7835e5a68c7854f65c1b8e34ca3a4"
        ],
        [
            "case Rle_dec => Hy //=.",
            "VernacExtend",
            "3c42b53d0efc26db114b00541ac5e7fcb29e6aeb"
        ],
        [
            "case Rle_lt_or_eq_dec => Hy0 //=.",
            "VernacExtend",
            "3c42b53d0efc26db114b00541ac5e7fcb29e6aeb"
        ],
        [
            "elim Rlt_not_le with (1 := Hy0).",
            "VernacExtend",
            "4b9e1c66d17ff8c7fb69f7aafafb90d2fdadde2e"
        ],
        [
            "apply Ropp_le_cancel.",
            "VernacExtend",
            "b5845fa505cf45d1b1826b280ab3b8249238dd4d"
        ],
        [
            "rewrite -Hx0 Ropp_0.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "apply Rle_refl.",
            "VernacExtend",
            "0a60a50353d5cfa9a4ade0240c47d5160d6d423c"
        ],
        [
            "elim Hy.",
            "VernacExtend",
            "58c8be1582093d26cc1883c4d437081a09d197a8"
        ],
        [
            "apply Ropp_le_cancel.",
            "VernacExtend",
            "b5845fa505cf45d1b1826b280ab3b8249238dd4d"
        ],
        [
            "rewrite -Hx0 Ropp_0.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "apply Rle_refl.",
            "VernacExtend",
            "0a60a50353d5cfa9a4ade0240c47d5160d6d423c"
        ],
        [
            "case Rle_dec => Hy //=.",
            "VernacExtend",
            "3c42b53d0efc26db114b00541ac5e7fcb29e6aeb"
        ],
        [
            "case Rle_lt_or_eq_dec => Hy0 //=.",
            "VernacExtend",
            "3c42b53d0efc26db114b00541ac5e7fcb29e6aeb"
        ],
        [
            "elim Hx.",
            "VernacExtend",
            "6da67d91ac8c390d9321f1009df1327ed8c33ccd"
        ],
        [
            "rewrite -Hy0 Ropp_0.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "apply Rle_refl.",
            "VernacExtend",
            "0a60a50353d5cfa9a4ade0240c47d5160d6d423c"
        ],
        [
            "elim Hx.",
            "VernacExtend",
            "6da67d91ac8c390d9321f1009df1327ed8c33ccd"
        ],
        [
            "rewrite -Ropp_0.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "apply Ropp_le_contravar.",
            "VernacExtend",
            "ac8d32b190d111aa8834547674121bcf3bb8a0ed"
        ],
        [
            "apply Rlt_le.",
            "VernacExtend",
            "cdc4280500779f23bae235b94c24a4b2ea2921fe"
        ],
        [
            "now apply Rnot_le_lt.",
            "VernacExtend",
            "472d95d86d32de5f65bdb99059686dfbade9f294"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma Rbar_mult_comm (x y : Rbar) : Rbar_mult x y = Rbar_mult y x.",
            "VernacStartTheoremProof",
            "4dad310b080ccd9432915fb2300045c26d9159bd"
        ],
        [
            "unfold Rbar_mult.",
            "VernacExtend",
            "a5785845d2299c21b9d748112f2d2fdb52851283"
        ],
        [
            "by rewrite Rbar_mult'_comm.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma Rbar_mult_opp_r (x y : Rbar) : Rbar_mult x (Rbar_opp y) = (Rbar_opp (Rbar_mult x y)).",
            "VernacStartTheoremProof",
            "24e791b64491d6fe66a7ed52d5555944074ed13e"
        ],
        [
            "unfold Rbar_mult.",
            "VernacExtend",
            "a5785845d2299c21b9d748112f2d2fdb52851283"
        ],
        [
            "rewrite Rbar_mult'_opp_r.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "case Rbar_mult' => //=.",
            "VernacExtend",
            "3c42b53d0efc26db114b00541ac5e7fcb29e6aeb"
        ],
        [
            "apply f_equal, eq_sym, Ropp_0.",
            "VernacExtend",
            "bdb09aefcd69af9dc05fa586d5b242ecef76f75c"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma Rbar_mult_opp_l (x y : Rbar) : Rbar_mult (Rbar_opp x) y = Rbar_opp (Rbar_mult x y).",
            "VernacStartTheoremProof",
            "8aaf2f0ecd426b928d2626f567b9859d988af3e5"
        ],
        [
            "rewrite ?(Rbar_mult_comm _ y).",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "by apply Rbar_mult_opp_r.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma Rbar_mult_opp (x y : Rbar) : Rbar_mult (Rbar_opp x) (Rbar_opp y) = Rbar_mult x y.",
            "VernacStartTheoremProof",
            "882f42789f53cccada450f5fb9e13c9cf102f2e9"
        ],
        [
            "by rewrite Rbar_mult_opp_l -Rbar_mult_opp_r Rbar_opp_involutive.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma Rbar_mult_0_l (x : Rbar) : Rbar_mult 0 x = 0.",
            "VernacStartTheoremProof",
            "bda0eaf8a96ce0626ada9cadd03065bcb5759c2a"
        ],
        [
            "case: x => [x | | ] //=.",
            "VernacExtend",
            "e00fff71ff314c991514fc71c41a3556702e444a"
        ],
        [
            "by rewrite Rmult_0_l.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "case: Rle_dec (Rle_refl 0) => // H _.",
            "VernacExtend",
            "e00fff71ff314c991514fc71c41a3556702e444a"
        ],
        [
            "case: Rle_lt_or_eq_dec (Rlt_irrefl 0) => // _ _.",
            "VernacExtend",
            "e00fff71ff314c991514fc71c41a3556702e444a"
        ],
        [
            "case: Rle_dec (Rle_refl 0) => // H _.",
            "VernacExtend",
            "e00fff71ff314c991514fc71c41a3556702e444a"
        ],
        [
            "case: Rle_lt_or_eq_dec (Rlt_irrefl 0) => // _ _.",
            "VernacExtend",
            "e00fff71ff314c991514fc71c41a3556702e444a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma Rbar_mult_0_r (x : Rbar) : Rbar_mult x 0 = 0.",
            "VernacStartTheoremProof",
            "2d96d7d5ef6216cbc096293dbf59281e8d9cfa13"
        ],
        [
            "rewrite Rbar_mult_comm ; by apply Rbar_mult_0_l.",
            "VernacExtend",
            "f9e2aad1e70f1876566a77bd0af96f52b3b81520"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma Rbar_mult_eq_0 (y x : Rbar) : Rbar_mult x y = 0 -> x = 0 \\/ y = 0.",
            "VernacStartTheoremProof",
            "6d60b6a5f956509f523ee13d7215b0847812fabb"
        ],
        [
            "case: x => [x | | ] //= ; case: y => [y | | ] //= ; (try case: Rle_dec => //= H) ; (try case: Rle_lt_or_eq_dec => //=) ; (try (left ; by apply f_equal)) ; (try (right ; by apply f_equal)).",
            "VernacExtend",
            "0bcc81e02dc9fe81d03d7676e676c881f56b03f0"
        ],
        [
            "intros H.",
            "VernacExtend",
            "5cfae87a34fa7b59a257c9640f1b674f6e6d780b"
        ],
        [
            "apply (f_equal real) in H.",
            "VernacExtend",
            "8c053e29070bbe42cc144c0662f29c069d100054"
        ],
        [
            "simpl in H.",
            "VernacExtend",
            "78dad51b2bb1130f71851d1e55489020824f59f6"
        ],
        [
            "apply Rmult_integral in H ; case: H => ->.",
            "VernacExtend",
            "51ba658a8f669aff7fb561b4d6168f2865dfabb6"
        ],
        [
            "by left.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "by right.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma ex_Rbar_mult_sym (x y : Rbar) : ex_Rbar_mult x y -> ex_Rbar_mult y x.",
            "VernacStartTheoremProof",
            "5ca2200ee6db6e54b74f24f27c0843ad155fe9b6"
        ],
        [
            "case: x => [x | | ] ; case: y => [y | | ] //.",
            "VernacExtend",
            "5887f8022a4f6389ac249140364feb69c4f18799"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma ex_Rbar_mult_opp_l (x y : Rbar) : ex_Rbar_mult x y -> ex_Rbar_mult (Rbar_opp x) y.",
            "VernacStartTheoremProof",
            "aa7cafb4677a3341d3fac9dec7e6a8ae055c5fe0"
        ],
        [
            "case: x => [x | | ] ; case: y => [y | | ] //= Hx ; by apply Ropp_neq_0_compat.",
            "VernacExtend",
            "05928a9db4d7951ab20c19816b8485c23bd4e06c"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma ex_Rbar_mult_opp_r (x y : Rbar) : ex_Rbar_mult x y -> ex_Rbar_mult x (Rbar_opp y).",
            "VernacStartTheoremProof",
            "dbf252eab6cef70fd0aa3beb3b069d1337e4e08d"
        ],
        [
            "case: x => [x | | ] ; case: y => [y | | ] //= Hx ; by apply Ropp_neq_0_compat.",
            "VernacExtend",
            "05928a9db4d7951ab20c19816b8485c23bd4e06c"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma is_Rbar_mult_sym (x y z : Rbar) : is_Rbar_mult x y z -> is_Rbar_mult y x z.",
            "VernacStartTheoremProof",
            "7b259e6abe24eaac7d7069dfc18a0485c464e70c"
        ],
        [
            "case: x => [x | | ] ; case: y => [y | | ] ; case: z => [z | | ] //= ; unfold is_Rbar_mult, Rbar_mult' ; try (case: Rle_dec => // H) ; try (case: Rle_lt_or_eq_dec => // H0) ; try (case => <-) ; try (move => _).",
            "VernacExtend",
            "9bcabdc49abfa00d585090477a38cc2f67cf43da"
        ],
        [
            "by rewrite Rmult_comm.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma is_Rbar_mult_opp_l (x y z : Rbar) : is_Rbar_mult x y z -> is_Rbar_mult (Rbar_opp x) y (Rbar_opp z).",
            "VernacStartTheoremProof",
            "f87e39b3553a05cf83695dfca944660ac4561783"
        ],
        [
            "case: x => [x | | ] ; case: y => [y | | ] ; case: z => [z | | ] //= ; unfold is_Rbar_mult, Rbar_mult' ; try (case: Rle_dec => // H) ; try (case: Rle_lt_or_eq_dec => // H0) ; try (case => <-) ; try (move => _).",
            "VernacExtend",
            "9bcabdc49abfa00d585090477a38cc2f67cf43da"
        ],
        [
            "apply (f_equal (@Some _)), f_equal ; ring.",
            "VernacExtend",
            "4183c3324756c3379ea91a1a1d9eb9d87f0a4bee"
        ],
        [
            "apply Ropp_lt_contravar in H0 ; rewrite Ropp_0 in H0 ; now move/Rlt_not_le: H0 ; case: Rle_dec.",
            "VernacExtend",
            "3961f4d846db96e4592d2d0d3116daf9a5262fa8"
        ],
        [
            "apply Rnot_le_lt, Ropp_lt_contravar in H ; rewrite Ropp_0 in H ; move/Rlt_le: (H) ; case: Rle_dec => // H0 _ ; now move/Rlt_not_eq: H ; case: Rle_lt_or_eq_dec.",
            "VernacExtend",
            "8b2ee6b71bd96fdc86809aa9038313e811f1ef67"
        ],
        [
            "apply Rnot_le_lt, Ropp_lt_contravar in H ; rewrite Ropp_0 in H ; move/Rlt_le: (H) ; case: Rle_dec => // H0 _ ; now move/Rlt_not_eq: H ; case: Rle_lt_or_eq_dec.",
            "VernacExtend",
            "8b2ee6b71bd96fdc86809aa9038313e811f1ef67"
        ],
        [
            "apply Ropp_lt_contravar in H0 ; rewrite Ropp_0 in H0 ; now move/Rlt_not_le: H0 ; case: Rle_dec.",
            "VernacExtend",
            "3961f4d846db96e4592d2d0d3116daf9a5262fa8"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma is_Rbar_mult_opp_r (x y z : Rbar) : is_Rbar_mult x y z -> is_Rbar_mult x (Rbar_opp y) (Rbar_opp z).",
            "VernacStartTheoremProof",
            "09603fe11010101ead0235d274298b4b7feaee7a"
        ],
        [
            "move/is_Rbar_mult_sym => H.",
            "VernacExtend",
            "b1b2cb7a3a617cba67460b4eca1f04de3c1cc716"
        ],
        [
            "now apply is_Rbar_mult_sym, is_Rbar_mult_opp_l.",
            "VernacExtend",
            "bbaa64cbf5765ec642aef652ec54725681926de3"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma is_Rbar_mult_p_infty_pos (x : Rbar) : Rbar_lt 0 x -> is_Rbar_mult p_infty x p_infty.",
            "VernacStartTheoremProof",
            "15f0e3098d359c99458baf360d9e119bfbf8d40d"
        ],
        [
            "case: x => [x | | ] // Hx.",
            "VernacExtend",
            "e00fff71ff314c991514fc71c41a3556702e444a"
        ],
        [
            "unfold is_Rbar_mult, Rbar_mult'.",
            "VernacExtend",
            "c4995e8fc585ed2cbb89782c3bcf2f4511431251"
        ],
        [
            "case: Rle_dec (Rlt_le _ _ Hx) => // Hx' _.",
            "VernacExtend",
            "e00fff71ff314c991514fc71c41a3556702e444a"
        ],
        [
            "now case: Rle_lt_or_eq_dec (Rlt_not_eq _ _ Hx).",
            "VernacExtend",
            "9b5dc78914ea71d33248c1f7ec7d76670ed43b8d"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma is_Rbar_mult_p_infty_neg (x : Rbar) : Rbar_lt x 0 -> is_Rbar_mult p_infty x m_infty.",
            "VernacStartTheoremProof",
            "c23331e91cd2b63b2c77857d36893c86e4bdfeeb"
        ],
        [
            "case: x => [x | | ] // Hx.",
            "VernacExtend",
            "e00fff71ff314c991514fc71c41a3556702e444a"
        ],
        [
            "unfold is_Rbar_mult, Rbar_mult'.",
            "VernacExtend",
            "c4995e8fc585ed2cbb89782c3bcf2f4511431251"
        ],
        [
            "case: Rle_dec (Rlt_not_le _ _ Hx) => // Hx' _.",
            "VernacExtend",
            "e00fff71ff314c991514fc71c41a3556702e444a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma is_Rbar_mult_m_infty_pos (x : Rbar) : Rbar_lt 0 x -> is_Rbar_mult m_infty x m_infty.",
            "VernacStartTheoremProof",
            "0cdc9bc515e12a4b21a31104421c46ae8890098a"
        ],
        [
            "case: x => [x | | ] // Hx.",
            "VernacExtend",
            "e00fff71ff314c991514fc71c41a3556702e444a"
        ],
        [
            "unfold is_Rbar_mult, Rbar_mult'.",
            "VernacExtend",
            "c4995e8fc585ed2cbb89782c3bcf2f4511431251"
        ],
        [
            "case: Rle_dec (Rlt_le _ _ Hx) => // Hx' _.",
            "VernacExtend",
            "e00fff71ff314c991514fc71c41a3556702e444a"
        ],
        [
            "now case: Rle_lt_or_eq_dec (Rlt_not_eq _ _ Hx).",
            "VernacExtend",
            "9b5dc78914ea71d33248c1f7ec7d76670ed43b8d"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma is_Rbar_mult_m_infty_neg (x : Rbar) : Rbar_lt x 0 -> is_Rbar_mult m_infty x p_infty.",
            "VernacStartTheoremProof",
            "2beae1feb8042ce5b5132c92f02d4c82ee9ca839"
        ],
        [
            "case: x => [x | | ] // Hx.",
            "VernacExtend",
            "e00fff71ff314c991514fc71c41a3556702e444a"
        ],
        [
            "unfold is_Rbar_mult, Rbar_mult'.",
            "VernacExtend",
            "c4995e8fc585ed2cbb89782c3bcf2f4511431251"
        ],
        [
            "case: Rle_dec (Rlt_not_le _ _ Hx) => // Hx' _.",
            "VernacExtend",
            "e00fff71ff314c991514fc71c41a3556702e444a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma is_Rbar_div_p_infty (x : R) : is_Rbar_div x p_infty 0.",
            "VernacStartTheoremProof",
            "0a9ea6ee77d1f3f2aff4a93a1e3631e7945737c7"
        ],
        [
            "apply (f_equal (@Some _)).",
            "VernacExtend",
            "7188480e0223c5127292b7204c8db2737ebf1ab7"
        ],
        [
            "by rewrite Rmult_0_r.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma is_Rbar_div_m_infty (x : R) : is_Rbar_div x m_infty 0.",
            "VernacStartTheoremProof",
            "2394559db5a357c0d94b91e47f52c753ac2d627e"
        ],
        [
            "apply (f_equal (@Some _)).",
            "VernacExtend",
            "7188480e0223c5127292b7204c8db2737ebf1ab7"
        ],
        [
            "by rewrite Rmult_0_r.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma Rbar_mult_pos_eq (x y : Rbar) (z : posreal) : x = y <-> (Rbar_mult_pos x z) = (Rbar_mult_pos y z).",
            "VernacStartTheoremProof",
            "10493abfa741369d1ae1b5985aa2652c5dcc81ee"
        ],
        [
            "case: z => z Hz ; case: x => [x | | ] ; case: y => [y | | ] ; split => //= H ; apply Rbar_finite_eq in H.",
            "VernacExtend",
            "d7f280775005d8a3a3bd7ba1fcf9c95eaeff59f2"
        ],
        [
            "by rewrite H.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "apply Rbar_finite_eq, (Rmult_eq_reg_r (z)) => // ; by apply Rgt_not_eq.",
            "VernacExtend",
            "7bd77ea96f784074e3b1d448260a45dd4191485f"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma Rbar_mult_pos_lt (x y : Rbar) (z : posreal) : Rbar_lt x y <-> Rbar_lt (Rbar_mult_pos x z) (Rbar_mult_pos y z).",
            "VernacStartTheoremProof",
            "e5fc7f8615f6b2b62e8839eefa28a4d42d9e2d35"
        ],
        [
            "case: z => z Hz ; case: x => [x | | ] ; case: y => [y | | ] ; split => //= H.",
            "VernacExtend",
            "4e8dbd3197964509676a5d02e50565819190a1c4"
        ],
        [
            "apply (Rmult_lt_compat_r (z)) => //.",
            "VernacExtend",
            "3c42b53d0efc26db114b00541ac5e7fcb29e6aeb"
        ],
        [
            "apply (Rmult_lt_reg_r (z)) => //.",
            "VernacExtend",
            "3c42b53d0efc26db114b00541ac5e7fcb29e6aeb"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma Rbar_mult_pos_le (x y : Rbar) (z : posreal) : Rbar_le x y <-> Rbar_le (Rbar_mult_pos x z) (Rbar_mult_pos y z).",
            "VernacStartTheoremProof",
            "04e5b483931796202160bc2c933baa86e145562b"
        ],
        [
            "case: z => z Hz ; case: x => [x | | ] ; case: y => [y | | ] ; split => //= H.",
            "VernacExtend",
            "4e8dbd3197964509676a5d02e50565819190a1c4"
        ],
        [
            "apply Rmult_le_compat_r with (2 := H).",
            "VernacExtend",
            "99861858a7197b0f4ff0dbe31b4c2ce9a04f804d"
        ],
        [
            "now apply Rlt_le.",
            "VernacExtend",
            "3fa67bbd472123a7abc1f777aecc643fb3862e46"
        ],
        [
            "now apply Rmult_le_reg_r with (2 := H).",
            "VernacExtend",
            "790a81be5e6f8504a69d4176efca40a92e8b0919"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma Rbar_div_pos_eq (x y : Rbar) (z : posreal) : x = y <-> (Rbar_div_pos x z) = (Rbar_div_pos y z).",
            "VernacStartTheoremProof",
            "d5f260a5fa26a0f5fce86d20f0717b4c6ebf11bb"
        ],
        [
            "case: z => z Hz ; case: x => [x | | ] ; case: y => [y | | ] ; split => //= H ; apply Rbar_finite_eq in H.",
            "VernacExtend",
            "d7f280775005d8a3a3bd7ba1fcf9c95eaeff59f2"
        ],
        [
            "by rewrite H.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "apply Rbar_finite_eq, (Rmult_eq_reg_r (/z)) => // ; by apply Rgt_not_eq, Rinv_0_lt_compat.",
            "VernacExtend",
            "7bd77ea96f784074e3b1d448260a45dd4191485f"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma Rbar_div_pos_lt (x y : Rbar) (z : posreal) : Rbar_lt x y <-> Rbar_lt (Rbar_div_pos x z) (Rbar_div_pos y z).",
            "VernacStartTheoremProof",
            "78460007ddf75635a57c6c6a078313508c024e09"
        ],
        [
            "case: z => z Hz ; case: x => [x | | ] ; case: y => [y | | ] ; split => //= H.",
            "VernacExtend",
            "4e8dbd3197964509676a5d02e50565819190a1c4"
        ],
        [
            "apply (Rmult_lt_compat_r (/z)) => // ; by apply Rinv_0_lt_compat.",
            "VernacExtend",
            "7bd77ea96f784074e3b1d448260a45dd4191485f"
        ],
        [
            "apply (Rmult_lt_reg_r (/z)) => // ; by apply Rinv_0_lt_compat.",
            "VernacExtend",
            "7bd77ea96f784074e3b1d448260a45dd4191485f"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma Rbar_div_pos_le (x y : Rbar) (z : posreal) : Rbar_le x y <-> Rbar_le (Rbar_div_pos x z) (Rbar_div_pos y z).",
            "VernacStartTheoremProof",
            "8f47e58733654c84eb412ca1cc03397d7b2b71bf"
        ],
        [
            "case: z => z Hz ; case: x => [x | | ] ; case: y => [y | | ] ; split => //= H.",
            "VernacExtend",
            "4e8dbd3197964509676a5d02e50565819190a1c4"
        ],
        [
            "apply Rmult_le_compat_r with (2 := H).",
            "VernacExtend",
            "99861858a7197b0f4ff0dbe31b4c2ce9a04f804d"
        ],
        [
            "now apply Rlt_le, Rinv_0_lt_compat.",
            "VernacExtend",
            "d56a3aab3989da48d160dcfc2962e243a6c1f327"
        ],
        [
            "apply Rmult_le_reg_r with (2 := H).",
            "VernacExtend",
            "1eecf9ec968dd47785a5bd448ce279b9228da0e3"
        ],
        [
            "now apply Rinv_0_lt_compat.",
            "VernacExtend",
            "58509a7b472652bb7aef39a9b6811672d04772c5"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Definition Rbar_min (x y : Rbar) : Rbar := match x, y with | z, p_infty | p_infty, z => z | _ , m_infty | m_infty, _ => m_infty | Finite x, Finite y => Rmin x y end.",
            "VernacDefinition",
            "ca5a6cb230cc6b461e7bcafc6fd1afe968f52eb9"
        ],
        [
            "Lemma Rbar_lt_locally (a b : Rbar) (x : R) : Rbar_lt a x -> Rbar_lt x b -> exists delta : posreal, forall y, Rabs (y - x) < delta -> Rbar_lt a y /\\ Rbar_lt y b.",
            "VernacStartTheoremProof",
            "d63b17b7c13660e619946b80e614a84f1868f898"
        ],
        [
            "case: a => [ a /= Ha | | _ ] //= ; (try apply Rminus_lt_0 in Ha) ; case: b => [ b Hb | _ | ] //= ; (try apply Rminus_lt_0 in Hb).",
            "VernacExtend",
            "79b5a47ae82f8bf10fc60aa1758ba45a2a691e8e"
        ],
        [
            "assert (0 < Rmin (x - a) (b - x)).",
            "VernacExtend",
            "5550f694f0b85ac7ff4173001fb5469f95f5fb4d"
        ],
        [
            "by apply Rmin_case.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "exists (mkposreal _ H) => y /= Hy ; split.",
            "VernacExtend",
            "ba86abe7713c160dab01ce533cab9e3f8284325e"
        ],
        [
            "apply Rplus_lt_reg_r with (-x).",
            "VernacExtend",
            "d08f252e84a688d18a0988913b45dc796d225046"
        ],
        [
            "replace (a+-x) with (-(x-a)) by ring.",
            "VernacExtend",
            "2e4d90a6813dc4b8de3d4305564fdebf73b99250"
        ],
        [
            "apply (Rabs_lt_between (y - x)).",
            "VernacExtend",
            "30d4341c4fc5cf03c5d2b5d134ede95afa1173bc"
        ],
        [
            "apply Rlt_le_trans with (1 := Hy).",
            "VernacExtend",
            "26a98f403c3a764541a9dad52eca2f9b243cea0a"
        ],
        [
            "by apply Rmin_l.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "apply Rplus_lt_reg_r with (-x).",
            "VernacExtend",
            "d08f252e84a688d18a0988913b45dc796d225046"
        ],
        [
            "apply (Rabs_lt_between (y - x)).",
            "VernacExtend",
            "30d4341c4fc5cf03c5d2b5d134ede95afa1173bc"
        ],
        [
            "apply Rlt_le_trans with (1 := Hy).",
            "VernacExtend",
            "26a98f403c3a764541a9dad52eca2f9b243cea0a"
        ],
        [
            "by apply Rmin_r.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "exists (mkposreal _ Ha) => y /= Hy ; split => //.",
            "VernacExtend",
            "fbaa61af20867a5dfb8bb5213ca8048b258f8f3a"
        ],
        [
            "apply Rplus_lt_reg_r with (-x).",
            "VernacExtend",
            "d08f252e84a688d18a0988913b45dc796d225046"
        ],
        [
            "replace (a+-x) with (-(x-a)) by ring.",
            "VernacExtend",
            "2e4d90a6813dc4b8de3d4305564fdebf73b99250"
        ],
        [
            "by apply (Rabs_lt_between (y - x)).",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "exists (mkposreal _ Hb) => y /= Hy ; split => //.",
            "VernacExtend",
            "fbaa61af20867a5dfb8bb5213ca8048b258f8f3a"
        ],
        [
            "apply Rplus_lt_reg_r with (-x).",
            "VernacExtend",
            "d08f252e84a688d18a0988913b45dc796d225046"
        ],
        [
            "by apply (Rabs_lt_between (y - x)).",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "exists (mkposreal _ Rlt_0_1) ; by split.",
            "VernacExtend",
            "2f39e34ec99b129f3957bb00adbb255d7ebca2c6"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma Rbar_min_comm (x y : Rbar) : Rbar_min x y = Rbar_min y x.",
            "VernacStartTheoremProof",
            "61f42db2fb42ee4b56e1a8565526d82e6f8aed82"
        ],
        [
            "case: x => [x | | ] //= ; case: y => [y | | ] //=.",
            "VernacExtend",
            "5887f8022a4f6389ac249140364feb69c4f18799"
        ],
        [
            "by rewrite Rmin_comm.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma Rbar_min_r (x y : Rbar) : Rbar_le (Rbar_min x y) y.",
            "VernacStartTheoremProof",
            "4f384148d546793866f4e1423f30baecae46af15"
        ],
        [
            "case: x => [x | | ] //= ; case: y => [y | | ] //=.",
            "VernacExtend",
            "5887f8022a4f6389ac249140364feb69c4f18799"
        ],
        [
            "by apply Rmin_r.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "by apply Rle_refl.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma Rbar_min_l (x y : Rbar) : Rbar_le (Rbar_min x y) x.",
            "VernacStartTheoremProof",
            "970a7e6471c54656120ecaade043d1293fd323ad"
        ],
        [
            "rewrite Rbar_min_comm.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "by apply Rbar_min_r.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma Rbar_min_case (x y : Rbar) (P : Rbar -> Type) : P x -> P y -> P (Rbar_min x y).",
            "VernacStartTheoremProof",
            "9b3ebfba8d68eef2c9073d648dcf82447b85b322"
        ],
        [
            "case: x => [x | | ] //= ; case: y => [y | | ] //=.",
            "VernacExtend",
            "5887f8022a4f6389ac249140364feb69c4f18799"
        ],
        [
            "by apply Rmin_case.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma Rbar_min_case_strong (r1 r2 : Rbar) (P : Rbar -> Type) : (Rbar_le r1 r2 -> P r1) -> (Rbar_le r2 r1 -> P r2) -> P (Rbar_min r1 r2).",
            "VernacStartTheoremProof",
            "c617eb148601d737d5b85c8f6a895c80a785c0f5"
        ],
        [
            "case: r1 => [x | | ] //= ; case: r2 => [y | | ] //= Hx Hy ; (try by apply Hx) ; (try by apply Hy).",
            "VernacExtend",
            "bba1ef86dd9f459c118f1aa87dfcd7e89d08412b"
        ],
        [
            "by apply Rmin_case_strong.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Definition Rbar_abs (x : Rbar) := match x with | Finite x => Finite (Rabs x) | _ => p_infty end.",
            "VernacDefinition",
            "1f505dbfc15bd3294b4d4894cfff30a126275961"
        ],
        [
            "Lemma Rbar_abs_lt_between (x y : Rbar) : Rbar_lt (Rbar_abs x) y <-> (Rbar_lt (Rbar_opp y) x /\\ Rbar_lt x y).",
            "VernacStartTheoremProof",
            "d3571605cb6ab0770771438b8e2977174d24a02d"
        ],
        [
            "case: x => [x | | ] ; case: y => [y | | ] /= ; try by intuition.",
            "VernacExtend",
            "2906658ba5c272b473591a601bf1dd046b109346"
        ],
        [
            "by apply Rabs_lt_between.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma Rbar_abs_opp (x : Rbar) : Rbar_abs (Rbar_opp x) = Rbar_abs x.",
            "VernacStartTheoremProof",
            "2e2c349f25c7c591d86d3487b9b911a3dc051728"
        ],
        [
            "case: x => [x | | ] //=.",
            "VernacExtend",
            "e00fff71ff314c991514fc71c41a3556702e444a"
        ],
        [
            "by rewrite Rabs_Ropp.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma Rbar_abs_pos (x : Rbar) : Rbar_le 0 x -> Rbar_abs x = x.",
            "VernacStartTheoremProof",
            "6f29fbdd5fb63e31754d4b1793431be56f98c1ce"
        ],
        [
            "case: x => [x | | ] //= Hx.",
            "VernacExtend",
            "e00fff71ff314c991514fc71c41a3556702e444a"
        ],
        [
            "by apply f_equal, Rabs_pos_eq.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma Rbar_abs_neg (x : Rbar) : Rbar_le x 0 -> Rbar_abs x = Rbar_opp x.",
            "VernacStartTheoremProof",
            "4aadaa2618d8b01ce748210583f79a2c9b8d591e"
        ],
        [
            "case: x => [x | | ] //= Hx.",
            "VernacExtend",
            "e00fff71ff314c991514fc71c41a3556702e444a"
        ],
        [
            "rewrite -Rabs_Ropp.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "apply f_equal, Rabs_pos_eq.",
            "VernacExtend",
            "b55fe37705ad2b60a69dd1aec9958dd7bcdd88c6"
        ],
        [
            "now rewrite -Ropp_0 ; apply Ropp_le_contravar.",
            "VernacExtend",
            "81d5759d5121b2545d5c3d2016d4379baff2d41b"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ]
    ],
    "proofs": [
        {
            "name": "is_finite_correct",
            "line_nb": 9,
            "steps": [
                {
                    "command": [
                        "rewrite /is_finite ; case: x => /= ; split => // H.",
                        "VernacExtend",
                        "2253759ff5c580854290fce82296a80357452125"
                    ]
                },
                {
                    "command": [
                        "by exists r.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "by case: H.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "by case: H.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "is_Rbar_plus_unique",
            "line_nb": 24,
            "steps": [
                {
                    "command": [
                        "unfold is_Rbar_plus, ex_Rbar_plus, Rbar_plus.",
                        "VernacExtend",
                        "a7eb07a42cf1c9d3c39483efa970750851f3ead6"
                    ]
                },
                {
                    "command": [
                        "case: Rbar_plus' => // a Ha.",
                        "VernacExtend",
                        "e00fff71ff314c991514fc71c41a3556702e444a"
                    ]
                },
                {
                    "command": [
                        "by inversion Ha.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "Rbar_plus_correct",
            "line_nb": 29,
            "steps": [
                {
                    "command": [
                        "unfold is_Rbar_plus, ex_Rbar_plus, Rbar_plus.",
                        "VernacExtend",
                        "a7eb07a42cf1c9d3c39483efa970750851f3ead6"
                    ]
                },
                {
                    "command": [
                        "by case: Rbar_plus'.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "is_Rbar_mult_unique",
            "line_nb": 46,
            "steps": [
                {
                    "command": [
                        "unfold is_Rbar_mult ; case: x => [x | | ] ; case: y => [y | | ] ; case: z => [z | | ] //= H ; inversion H => // ; case: Rle_dec H => // H0 ; case: Rle_lt_or_eq_dec => //.",
                        "VernacExtend",
                        "3f0290a52b8942fc6a2d54b428079860d6b40c9c"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "Rbar_mult_correct",
            "line_nb": 49,
            "steps": [
                {
                    "command": [
                        "case: x => [x | | ] ; case: y => [y | | ] //= H ; apply sym_not_eq in H ; unfold is_Rbar_mult ; simpl ; case: Rle_dec => // H0 ; case: Rle_lt_or_eq_dec => //.",
                        "VernacExtend",
                        "5347490166b1e540fdefe9805ba788afe1160dca"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "Rbar_mult_correct'",
            "line_nb": 52,
            "steps": [
                {
                    "command": [
                        "unfold is_Rbar_mult ; case: x => [x | | ] ; case: y => [y | | ] //= ; case: Rle_dec => //= H ; try (case: Rle_lt_or_eq_dec => //=) ; intros.",
                        "VernacExtend",
                        "ca3fb4d513d8e70efd2a31963a892a5b197d262f"
                    ]
                },
                {
                    "command": [
                        "by apply Rgt_not_eq.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "by apply Rlt_not_eq, Rnot_le_lt.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "by apply Rgt_not_eq.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "by apply Rlt_not_eq, Rnot_le_lt.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "by apply Rgt_not_eq.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "by apply Rlt_not_eq, Rnot_le_lt.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "by apply Rgt_not_eq.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "by apply Rlt_not_eq, Rnot_le_lt.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "Rbar_finite_eq",
            "line_nb": 69,
            "steps": [
                {
                    "command": [
                        "split ; intros.",
                        "VernacExtend",
                        "3c0a2af2969d0c39838e9010244dfd28201b7f3e"
                    ]
                },
                {
                    "command": [
                        "apply Rle_antisym ; apply Rnot_lt_le ; intro.",
                        "VernacExtend",
                        "eeecd883201ff9fab03876726d8200ab831530c6"
                    ]
                },
                {
                    "command": [
                        "assert (Rbar_lt (Finite y) (Finite x)).",
                        "VernacExtend",
                        "666d2941f76c903c534c327d15ee368a39fc581e"
                    ]
                },
                {
                    "command": [
                        "simpl ; apply H0.",
                        "VernacExtend",
                        "f3b1c49695d3285eb4449422e0734d1845cb2531"
                    ]
                },
                {
                    "command": [
                        "rewrite H in H1 ; simpl in H1 ; by apply Rlt_irrefl in H1.",
                        "VernacExtend",
                        "fdaef1101102b5db05ee2ac08d92b15dc2556f01"
                    ]
                },
                {
                    "command": [
                        "assert (Rbar_lt (Finite x) (Finite y)).",
                        "VernacExtend",
                        "10249cb2ac908c18af3839ec7a2b9fcaeaf8cfb9"
                    ]
                },
                {
                    "command": [
                        "simpl ; apply H0.",
                        "VernacExtend",
                        "f3b1c49695d3285eb4449422e0734d1845cb2531"
                    ]
                },
                {
                    "command": [
                        "rewrite H in H1 ; simpl in H1 ; by apply Rlt_irrefl in H1.",
                        "VernacExtend",
                        "fdaef1101102b5db05ee2ac08d92b15dc2556f01"
                    ]
                },
                {
                    "command": [
                        "rewrite H ; reflexivity.",
                        "VernacExtend",
                        "b1be1af5462791a9f770b64f2c7c7a79f09391f7"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "Rbar_finite_neq",
            "line_nb": 80,
            "steps": [
                {
                    "command": [
                        "split => H ; contradict H ; by apply Rbar_finite_eq.",
                        "VernacExtend",
                        "b72ec3202bb70eb2c2964de94e178bbd880db4fe"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "Rbar_lt_not_eq",
            "line_nb": 83,
            "steps": [
                {
                    "command": [
                        "destruct x ; destruct y ; simpl ; try easy.",
                        "VernacExtend",
                        "72d67ac61100c5030b2087e0ee52afa78083e1ba"
                    ]
                },
                {
                    "command": [
                        "intros H H0.",
                        "VernacExtend",
                        "90bdfc30bf7350754c3a8a5cfe1259219564aa47"
                    ]
                },
                {
                    "command": [
                        "apply Rbar_finite_eq in H0 ; revert H0 ; apply Rlt_not_eq, H.",
                        "VernacExtend",
                        "144a0fa40e1a789bcb0b1040aeaa1e88c0f7823c"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "Rbar_not_le_lt",
            "line_nb": 88,
            "steps": [
                {
                    "command": [
                        "destruct x ; destruct y ; simpl ; intuition.",
                        "VernacExtend",
                        "d63928ae7ec6d55e2705491d6eee4ccecf350151"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "Rbar_lt_not_le",
            "line_nb": 91,
            "steps": [
                {
                    "command": [
                        "destruct x ; destruct y ; simpl ; intuition.",
                        "VernacExtend",
                        "d63928ae7ec6d55e2705491d6eee4ccecf350151"
                    ]
                },
                {
                    "command": [
                        "apply (Rlt_irrefl r0).",
                        "VernacExtend",
                        "37277175e1fa900648d2be5a5f75962ae114da5e"
                    ]
                },
                {
                    "command": [
                        "now apply Rlt_le_trans with (1 := H).",
                        "VernacExtend",
                        "4e7a4e4bf86d5cfc7af5a11194a2da554fb1b4f7"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "Rbar_not_lt_le",
            "line_nb": 96,
            "steps": [
                {
                    "command": [
                        "destruct x ; destruct y ; simpl ; intuition.",
                        "VernacExtend",
                        "d63928ae7ec6d55e2705491d6eee4ccecf350151"
                    ]
                },
                {
                    "command": [
                        "now apply Rnot_lt_le.",
                        "VernacExtend",
                        "883c03500b3a45f34e956b64277ac45dec440d80"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "Rbar_le_not_lt",
            "line_nb": 100,
            "steps": [
                {
                    "command": [
                        "destruct x ; destruct y ; simpl ; intuition ; contradict H0.",
                        "VernacExtend",
                        "83057ee088e206124163610d950a3cb4bfe2911c"
                    ]
                },
                {
                    "command": [
                        "now apply Rle_not_lt.",
                        "VernacExtend",
                        "0dcf5c4358be9e14d88136d202384ef0741f0f18"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "Rbar_le_refl",
            "line_nb": 104,
            "steps": [
                {
                    "command": [
                        "intros [x| |] ; try easy.",
                        "VernacExtend",
                        "24731d845fad9fe4d74eab85b64cfc4a1c823218"
                    ]
                },
                {
                    "command": [
                        "apply Rle_refl.",
                        "VernacExtend",
                        "0a60a50353d5cfa9a4ade0240c47d5160d6d423c"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "Rbar_lt_le",
            "line_nb": 108,
            "steps": [
                {
                    "command": [
                        "intros [x| |] [y| |] ; try easy.",
                        "VernacExtend",
                        "32abf7b4b59f8da678db636dfc50edb8dfdde7cd"
                    ]
                },
                {
                    "command": [
                        "apply Rlt_le.",
                        "VernacExtend",
                        "cdc4280500779f23bae235b94c24a4b2ea2921fe"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "Rbar_total_order",
            "line_nb": 112,
            "steps": [
                {
                    "command": [
                        "destruct x ; destruct y ; simpl ; intuition.",
                        "VernacExtend",
                        "d63928ae7ec6d55e2705491d6eee4ccecf350151"
                    ]
                },
                {
                    "command": [
                        "destruct (total_order_T r r0) ; intuition.",
                        "VernacExtend",
                        "1618735d4d7c4d7be23d417e7465ce54e9936ade"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "Rbar_eq_dec",
            "line_nb": 116,
            "steps": [
                {
                    "command": [
                        "intros ; destruct (Rbar_total_order x y) as [[H|H]|H].",
                        "VernacExtend",
                        "e779765af28de1a0cbd6c12ec6c76bfb605a87df"
                    ]
                },
                {
                    "command": [
                        "right ; revert H ; destruct x as [x| |] ; destruct y as [y| |] ; simpl ; intros H ; try easy.",
                        "VernacExtend",
                        "db8927f165add9ca9b3de7a34ef11b8a1f180b15"
                    ]
                },
                {
                    "command": [
                        "contradict H.",
                        "VernacExtend",
                        "0da4c7d87991a3ed628c796c81ed5112e2aac241"
                    ]
                },
                {
                    "command": [
                        "apply Rbar_finite_eq in H ; try apply Rle_not_lt, Req_le ; auto.",
                        "VernacExtend",
                        "6169980b592a20c317841c0fbafca8fc16f1e066"
                    ]
                },
                {
                    "command": [
                        "left ; apply H.",
                        "VernacExtend",
                        "0aa460f78d11391b522e663a46e7bb217b2676f0"
                    ]
                },
                {
                    "command": [
                        "right ; revert H ; destruct x as [x| |] ; destruct y as [y| |] ; simpl ; intros H ; try easy.",
                        "VernacExtend",
                        "db8927f165add9ca9b3de7a34ef11b8a1f180b15"
                    ]
                },
                {
                    "command": [
                        "contradict H.",
                        "VernacExtend",
                        "0da4c7d87991a3ed628c796c81ed5112e2aac241"
                    ]
                },
                {
                    "command": [
                        "apply Rbar_finite_eq in H ; apply Rle_not_lt, Req_le ; auto.",
                        "VernacExtend",
                        "d83f3b6ce6a2b1fe56ff15317e2d396672c5722e"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "Rbar_lt_dec",
            "line_nb": 126,
            "steps": [
                {
                    "command": [
                        "destruct (Rbar_total_order x y) as [H|H] ; [ destruct H as [H|H]|].",
                        "VernacExtend",
                        "6363e99454dfa57d108ba5d55b6545d422941414"
                    ]
                },
                {
                    "command": [
                        "now left.",
                        "VernacExtend",
                        "2bd81021638064dbaa3d520cec398253376a1f37"
                    ]
                },
                {
                    "command": [
                        "right ; rewrite H ; clear H ; destruct y ; auto ; apply Rlt_irrefl ; auto.",
                        "VernacExtend",
                        "8986c137ad6d36323207fbed5f4e45146c862ab6"
                    ]
                },
                {
                    "command": [
                        "right ; revert H ; destruct x as [x | | ] ; destruct y as [y | | ] ; intros H ; auto ; apply Rle_not_lt, Rlt_le ; auto.",
                        "VernacExtend",
                        "4464a4eb5252017a3c4fcddb66b7c840fcea44d8"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "Rbar_lt_le_dec",
            "line_nb": 132,
            "steps": [
                {
                    "command": [
                        "destruct (Rbar_total_order x y) as [[H|H]|H].",
                        "VernacExtend",
                        "0f68c4f54709f75574e3026ce3f196b77337a934"
                    ]
                },
                {
                    "command": [
                        "now left.",
                        "VernacExtend",
                        "2bd81021638064dbaa3d520cec398253376a1f37"
                    ]
                },
                {
                    "command": [
                        "right.",
                        "VernacExtend",
                        "27e417a3497755767e1a1d6ba87753ecddaee6b7"
                    ]
                },
                {
                    "command": [
                        "rewrite H.",
                        "VernacExtend",
                        "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
                    ]
                },
                {
                    "command": [
                        "apply Rbar_le_refl.",
                        "VernacExtend",
                        "de7bb33cecdb8ad946952658e741ffce5acb618e"
                    ]
                },
                {
                    "command": [
                        "right.",
                        "VernacExtend",
                        "27e417a3497755767e1a1d6ba87753ecddaee6b7"
                    ]
                },
                {
                    "command": [
                        "now apply Rbar_lt_le.",
                        "VernacExtend",
                        "bab8380159442056bd9449e9a95984c8ba5f3151"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "Rbar_le_dec",
            "line_nb": 141,
            "steps": [
                {
                    "command": [
                        "destruct (Rbar_total_order x y) as [[H|H]|H].",
                        "VernacExtend",
                        "0f68c4f54709f75574e3026ce3f196b77337a934"
                    ]
                },
                {
                    "command": [
                        "left.",
                        "VernacExtend",
                        "06dad9fc5698018f3f1213205145fec906c612b1"
                    ]
                },
                {
                    "command": [
                        "now apply Rbar_lt_le.",
                        "VernacExtend",
                        "bab8380159442056bd9449e9a95984c8ba5f3151"
                    ]
                },
                {
                    "command": [
                        "left.",
                        "VernacExtend",
                        "06dad9fc5698018f3f1213205145fec906c612b1"
                    ]
                },
                {
                    "command": [
                        "rewrite H.",
                        "VernacExtend",
                        "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
                    ]
                },
                {
                    "command": [
                        "apply Rbar_le_refl.",
                        "VernacExtend",
                        "de7bb33cecdb8ad946952658e741ffce5acb618e"
                    ]
                },
                {
                    "command": [
                        "right.",
                        "VernacExtend",
                        "27e417a3497755767e1a1d6ba87753ecddaee6b7"
                    ]
                },
                {
                    "command": [
                        "now apply Rbar_lt_not_le.",
                        "VernacExtend",
                        "411f8ac08cc276a9b257f71f621b4d987f92b275"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "Rbar_le_lt_dec",
            "line_nb": 151,
            "steps": [
                {
                    "command": [
                        "destruct (Rbar_total_order x y) as [[H|H]|H].",
                        "VernacExtend",
                        "0f68c4f54709f75574e3026ce3f196b77337a934"
                    ]
                },
                {
                    "command": [
                        "left.",
                        "VernacExtend",
                        "06dad9fc5698018f3f1213205145fec906c612b1"
                    ]
                },
                {
                    "command": [
                        "now apply Rbar_lt_le.",
                        "VernacExtend",
                        "bab8380159442056bd9449e9a95984c8ba5f3151"
                    ]
                },
                {
                    "command": [
                        "left.",
                        "VernacExtend",
                        "06dad9fc5698018f3f1213205145fec906c612b1"
                    ]
                },
                {
                    "command": [
                        "rewrite H.",
                        "VernacExtend",
                        "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
                    ]
                },
                {
                    "command": [
                        "apply Rbar_le_refl.",
                        "VernacExtend",
                        "de7bb33cecdb8ad946952658e741ffce5acb618e"
                    ]
                },
                {
                    "command": [
                        "now right.",
                        "VernacExtend",
                        "18eb395a45fbe5648757d528efaf583b695576c7"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "Rbar_le_lt_or_eq_dec",
            "line_nb": 160,
            "steps": [
                {
                    "command": [
                        "destruct (Rbar_total_order x y) as [[H|H]|H].",
                        "VernacExtend",
                        "0f68c4f54709f75574e3026ce3f196b77337a934"
                    ]
                },
                {
                    "command": [
                        "now left.",
                        "VernacExtend",
                        "2bd81021638064dbaa3d520cec398253376a1f37"
                    ]
                },
                {
                    "command": [
                        "now right.",
                        "VernacExtend",
                        "18eb395a45fbe5648757d528efaf583b695576c7"
                    ]
                },
                {
                    "command": [
                        "intros K.",
                        "VernacExtend",
                        "e2e6d7d842a55ca16087666d9b923718d8bd0dec"
                    ]
                },
                {
                    "command": [
                        "now elim (Rbar_le_not_lt _ _ K).",
                        "VernacExtend",
                        "f5c74e31b04756fb3eb52ec782c5cc5089ea9fbd"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "Rbar_lt_trans",
            "line_nb": 167,
            "steps": [
                {
                    "command": [
                        "destruct x ; destruct y ; destruct z ; simpl ; intuition.",
                        "VernacExtend",
                        "163b58c6d370a60d3ff71a3f17f20a7d51136481"
                    ]
                },
                {
                    "command": [
                        "now apply Rlt_trans with r0.",
                        "VernacExtend",
                        "ab192012ff8639f7b32d2081c558e513cab7cd2a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "Rbar_lt_le_trans",
            "line_nb": 171,
            "steps": [
                {
                    "command": [
                        "destruct x ; destruct y ; destruct z ; simpl ; intuition.",
                        "VernacExtend",
                        "163b58c6d370a60d3ff71a3f17f20a7d51136481"
                    ]
                },
                {
                    "command": [
                        "now apply Rlt_le_trans with r0.",
                        "VernacExtend",
                        "6b6ac8d7936b48a588472d412fb86ed6c1049d0b"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "Rbar_le_lt_trans",
            "line_nb": 175,
            "steps": [
                {
                    "command": [
                        "destruct x ; destruct y ; destruct z ; simpl ; intuition.",
                        "VernacExtend",
                        "163b58c6d370a60d3ff71a3f17f20a7d51136481"
                    ]
                },
                {
                    "command": [
                        "now apply Rle_lt_trans with r0.",
                        "VernacExtend",
                        "831ebb334993a3c4e3699403f40e4b5eaf4547fb"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "Rbar_le_trans",
            "line_nb": 179,
            "steps": [
                {
                    "command": [
                        "destruct x ; destruct y ; destruct z ; simpl ; intuition.",
                        "VernacExtend",
                        "163b58c6d370a60d3ff71a3f17f20a7d51136481"
                    ]
                },
                {
                    "command": [
                        "now apply Rle_trans with r0.",
                        "VernacExtend",
                        "9f48408d8b1c39f0665476e06c0317a8b4456481"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "Rbar_le_antisym",
            "line_nb": 183,
            "steps": [
                {
                    "command": [
                        "destruct x ; destruct y ; simpl ; intuition.",
                        "VernacExtend",
                        "d63928ae7ec6d55e2705491d6eee4ccecf350151"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "Rbar_opp_involutive",
            "line_nb": 186,
            "steps": [
                {
                    "command": [
                        "destruct x as [x| | ] ; auto ; simpl ; rewrite Ropp_involutive ; auto.",
                        "VernacExtend",
                        "833e9fb00113fbdc89f88cdbffd80fb9cc31582c"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "Rbar_opp_lt",
            "line_nb": 189,
            "steps": [
                {
                    "command": [
                        "destruct x as [x | | ] ; destruct y as [y | | ] ; split ; auto ; intro H ; simpl ; try left.",
                        "VernacExtend",
                        "9ff5d3ec7fcb0e5198b16a1fff258446597e42e1"
                    ]
                },
                {
                    "command": [
                        "apply Ropp_lt_cancel ; auto.",
                        "VernacExtend",
                        "c226d360e3a489bf2d5c2aec198e0a701f5e501f"
                    ]
                },
                {
                    "command": [
                        "apply Ropp_lt_contravar ; auto.",
                        "VernacExtend",
                        "da81cc78f27cc5953d42f3c3a8e6f548e06316d2"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "Rbar_opp_le",
            "line_nb": 194,
            "steps": [
                {
                    "command": [
                        "destruct x as [x| |] ; destruct y as [y| |] ; simpl ; intuition.",
                        "VernacExtend",
                        "fb2ba1cd01db9f6b81d8e695cd7394e3f0f00a2e"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "Rbar_opp_eq",
            "line_nb": 197,
            "steps": [
                {
                    "command": [
                        "split ; intros H.",
                        "VernacExtend",
                        "a22fcc98cae3c9e7feb477b9e8b0236d37ea8d65"
                    ]
                },
                {
                    "command": [
                        "rewrite <- (Rbar_opp_involutive x), H, Rbar_opp_involutive ; reflexivity.",
                        "VernacExtend",
                        "183dc3348b8861cea8c3212d7fbf6e5af389283d"
                    ]
                },
                {
                    "command": [
                        "rewrite H ; reflexivity.",
                        "VernacExtend",
                        "b1be1af5462791a9f770b64f2c7c7a79f09391f7"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "Rbar_opp_real",
            "line_nb": 202,
            "steps": [
                {
                    "command": [
                        "destruct x as [x | | ] ; simpl ; intuition.",
                        "VernacExtend",
                        "424eaf6b65bf84620f02b503c96b26342d42b0e2"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "Rbar_plus'_comm",
            "line_nb": 205,
            "steps": [
                {
                    "command": [
                        "intros [x| |] [y| |] ; try reflexivity.",
                        "VernacExtend",
                        "5c0e92b9b8510ddc55d40bcb5e513c555f58a5ea"
                    ]
                },
                {
                    "command": [
                        "apply (f_equal (fun x => Some (Finite x))), Rplus_comm.",
                        "VernacExtend",
                        "a7b157625bf9f42bbb7711fea0b8c0e4d624d4c2"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "ex_Rbar_plus_comm",
            "line_nb": 209,
            "steps": [
                {
                    "command": [
                        "now intros [x| |] [y| |].",
                        "VernacExtend",
                        "d7d7857821bbcec29d97f90af352647cc6037cd8"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "ex_Rbar_plus_opp",
            "line_nb": 212,
            "steps": [
                {
                    "command": [
                        "case: x => [x | | ] ; case: y => [y | | ] => //.",
                        "VernacExtend",
                        "ba44c9d0281a02110ce54645304e6d990debd9c0"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "Rbar_plus_0_r",
            "line_nb": 215,
            "steps": [
                {
                    "command": [
                        "case: x => //= ; intuition.",
                        "VernacExtend",
                        "5f37a6ca7acd455819292006b181a93425271ada"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "Rbar_plus_comm",
            "line_nb": 221,
            "steps": [
                {
                    "command": [
                        "case x ; case y ; intuition.",
                        "VernacExtend",
                        "133d442f0a4715c9804449fdc854a42398fccc53"
                    ]
                },
                {
                    "command": [
                        "simpl.",
                        "VernacExtend",
                        "1b93169f4cf876d207c1fab22a2347202ab48d85"
                    ]
                },
                {
                    "command": [
                        "apply f_equal, Rplus_comm.",
                        "VernacExtend",
                        "b5f391a1331215342714d1c3d4380c12bd4cccd6"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "Rbar_plus_lt_compat",
            "line_nb": 226,
            "steps": [
                {
                    "command": [
                        "case: a => [a | | ] // ; case: b => [b | | ] // ; case: c => [c | | ] // ; case: d => [d | | ] // ; apply Rplus_lt_compat.",
                        "VernacExtend",
                        "a9f961e9d57efac4bea41e2fa9833b874abe4f3a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "Rbar_plus_le_compat",
            "line_nb": 229,
            "steps": [
                {
                    "command": [
                        "case: a => [a | | ] // ; case: b => [b | | ] // ; case: c => [c | | ] // ; case: d => [d | | ] //.",
                        "VernacExtend",
                        "9c855307bebe9c9fcd60ebdc397f010c9a03df54"
                    ]
                },
                {
                    "command": [
                        "apply Rplus_le_compat.",
                        "VernacExtend",
                        "7a69898b466991bee51047e3a2fc51c3b80fbd93"
                    ]
                },
                {
                    "command": [
                        "intros _ _.",
                        "VernacExtend",
                        "95d87eaa905098932d683036fadece3b7ae69933"
                    ]
                },
                {
                    "command": [
                        "apply Rle_refl.",
                        "VernacExtend",
                        "0a60a50353d5cfa9a4ade0240c47d5160d6d423c"
                    ]
                },
                {
                    "command": [
                        "intros _ _.",
                        "VernacExtend",
                        "95d87eaa905098932d683036fadece3b7ae69933"
                    ]
                },
                {
                    "command": [
                        "apply Rle_refl.",
                        "VernacExtend",
                        "0a60a50353d5cfa9a4ade0240c47d5160d6d423c"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "Rbar_plus_opp",
            "line_nb": 237,
            "steps": [
                {
                    "command": [
                        "case: x => [x | | ] ; case: y => [y | | ] //= ; apply f_equal ; ring.",
                        "VernacExtend",
                        "645626fdaaf90435cc3f27cf12becf6a86ee6f54"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "Rbar_minus_eq_0",
            "line_nb": 240,
            "steps": [
                {
                    "command": [
                        "case: x => //= x ; by apply f_equal, Rcomplements.Rminus_eq_0.",
                        "VernacExtend",
                        "14b141a2d70f00681f703015bc169478d399fe62"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "Rbar_opp_minus",
            "line_nb": 243,
            "steps": [
                {
                    "command": [
                        "case: x => [x | | ] ; case: y => [y | | ] //=.",
                        "VernacExtend",
                        "5887f8022a4f6389ac249140364feb69c4f18799"
                    ]
                },
                {
                    "command": [
                        "by rewrite Ropp_minus_distr'.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "by rewrite Ropp_0.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "by rewrite Ropp_0.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "Rbar_inv_opp",
            "line_nb": 249,
            "steps": [
                {
                    "command": [
                        "case: x => [x | | ] /= Hx.",
                        "VernacExtend",
                        "e00fff71ff314c991514fc71c41a3556702e444a"
                    ]
                },
                {
                    "command": [
                        "rewrite Ropp_inv_permute => //.",
                        "VernacExtend",
                        "3c42b53d0efc26db114b00541ac5e7fcb29e6aeb"
                    ]
                },
                {
                    "command": [
                        "contradict Hx.",
                        "VernacExtend",
                        "51524c6f0a35f50dcb732884ab4e3630854bd951"
                    ]
                },
                {
                    "command": [
                        "by rewrite Hx.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "by rewrite Ropp_0.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "by rewrite Ropp_0.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "Rbar_mult'_comm",
            "line_nb": 257,
            "steps": [
                {
                    "command": [
                        "case: x => [x | | ] ; case: y => [y | | ] //=.",
                        "VernacExtend",
                        "5887f8022a4f6389ac249140364feb69c4f18799"
                    ]
                },
                {
                    "command": [
                        "by rewrite Rmult_comm.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "Rbar_mult'_opp_r",
            "line_nb": 261,
            "steps": [
                {
                    "command": [
                        "case: x => [x | | ] ; case: y => [y | | ] //= ; (try case: Rle_dec => Hx //=) ; (try case: Rle_lt_or_eq_dec => //= Hx0).",
                        "VernacExtend",
                        "771ab3b03cd85bb3b1d4655eda608217b60c62e8"
                    ]
                },
                {
                    "command": [
                        "by rewrite Ropp_mult_distr_r_reverse.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "rewrite -Ropp_0 in Hx0.",
                        "VernacExtend",
                        "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
                    ]
                },
                {
                    "command": [
                        "apply Ropp_lt_cancel in Hx0.",
                        "VernacExtend",
                        "3b9bb7a1061edc0d56e1e77b58cab1c69a2e5935"
                    ]
                },
                {
                    "command": [
                        "case Rle_dec => Hy //=.",
                        "VernacExtend",
                        "3c42b53d0efc26db114b00541ac5e7fcb29e6aeb"
                    ]
                },
                {
                    "command": [
                        "now elim Rle_not_lt with (1 := Hy).",
                        "VernacExtend",
                        "a1d7f7164db6577ea20c76afd95b8c0e7cb2dfb2"
                    ]
                },
                {
                    "command": [
                        "case Rle_dec => Hy //=.",
                        "VernacExtend",
                        "3c42b53d0efc26db114b00541ac5e7fcb29e6aeb"
                    ]
                },
                {
                    "command": [
                        "case Rle_lt_or_eq_dec => Hy0 //=.",
                        "VernacExtend",
                        "3c42b53d0efc26db114b00541ac5e7fcb29e6aeb"
                    ]
                },
                {
                    "command": [
                        "elim Rlt_not_le with (1 := Hy0).",
                        "VernacExtend",
                        "4b9e1c66d17ff8c7fb69f7aafafb90d2fdadde2e"
                    ]
                },
                {
                    "command": [
                        "apply Ropp_le_cancel.",
                        "VernacExtend",
                        "b5845fa505cf45d1b1826b280ab3b8249238dd4d"
                    ]
                },
                {
                    "command": [
                        "by rewrite Ropp_0.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "elim Hy.",
                        "VernacExtend",
                        "58c8be1582093d26cc1883c4d437081a09d197a8"
                    ]
                },
                {
                    "command": [
                        "apply Ropp_le_cancel.",
                        "VernacExtend",
                        "b5845fa505cf45d1b1826b280ab3b8249238dd4d"
                    ]
                },
                {
                    "command": [
                        "rewrite -Hx0 Ropp_0.",
                        "VernacExtend",
                        "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
                    ]
                },
                {
                    "command": [
                        "apply Rle_refl.",
                        "VernacExtend",
                        "0a60a50353d5cfa9a4ade0240c47d5160d6d423c"
                    ]
                },
                {
                    "command": [
                        "case Rle_dec => Hy //=.",
                        "VernacExtend",
                        "3c42b53d0efc26db114b00541ac5e7fcb29e6aeb"
                    ]
                },
                {
                    "command": [
                        "case Rle_lt_or_eq_dec => Hy0 //=.",
                        "VernacExtend",
                        "3c42b53d0efc26db114b00541ac5e7fcb29e6aeb"
                    ]
                },
                {
                    "command": [
                        "elim Hx.",
                        "VernacExtend",
                        "6da67d91ac8c390d9321f1009df1327ed8c33ccd"
                    ]
                },
                {
                    "command": [
                        "rewrite -Hy0 Ropp_0.",
                        "VernacExtend",
                        "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
                    ]
                },
                {
                    "command": [
                        "apply Rle_refl.",
                        "VernacExtend",
                        "0a60a50353d5cfa9a4ade0240c47d5160d6d423c"
                    ]
                },
                {
                    "command": [
                        "elim Hx.",
                        "VernacExtend",
                        "6da67d91ac8c390d9321f1009df1327ed8c33ccd"
                    ]
                },
                {
                    "command": [
                        "rewrite -Ropp_0.",
                        "VernacExtend",
                        "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
                    ]
                },
                {
                    "command": [
                        "apply Ropp_le_contravar.",
                        "VernacExtend",
                        "ac8d32b190d111aa8834547674121bcf3bb8a0ed"
                    ]
                },
                {
                    "command": [
                        "apply Rlt_le.",
                        "VernacExtend",
                        "cdc4280500779f23bae235b94c24a4b2ea2921fe"
                    ]
                },
                {
                    "command": [
                        "now apply Rnot_le_lt.",
                        "VernacExtend",
                        "472d95d86d32de5f65bdb99059686dfbade9f294"
                    ]
                },
                {
                    "command": [
                        "case Rle_dec => Hy //=.",
                        "VernacExtend",
                        "3c42b53d0efc26db114b00541ac5e7fcb29e6aeb"
                    ]
                },
                {
                    "command": [
                        "elim Rlt_not_le with (1 := Hx0).",
                        "VernacExtend",
                        "e135fbb1708d1fde914abc05bc58760e900a0990"
                    ]
                },
                {
                    "command": [
                        "rewrite -Ropp_0.",
                        "VernacExtend",
                        "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
                    ]
                },
                {
                    "command": [
                        "now apply Ropp_le_contravar.",
                        "VernacExtend",
                        "c653793081f7835e5a68c7854f65c1b8e34ca3a4"
                    ]
                },
                {
                    "command": [
                        "case Rle_dec => Hy //=.",
                        "VernacExtend",
                        "3c42b53d0efc26db114b00541ac5e7fcb29e6aeb"
                    ]
                },
                {
                    "command": [
                        "case Rle_lt_or_eq_dec => Hy0 //=.",
                        "VernacExtend",
                        "3c42b53d0efc26db114b00541ac5e7fcb29e6aeb"
                    ]
                },
                {
                    "command": [
                        "elim Rlt_not_le with (1 := Hy0).",
                        "VernacExtend",
                        "4b9e1c66d17ff8c7fb69f7aafafb90d2fdadde2e"
                    ]
                },
                {
                    "command": [
                        "apply Ropp_le_cancel.",
                        "VernacExtend",
                        "b5845fa505cf45d1b1826b280ab3b8249238dd4d"
                    ]
                },
                {
                    "command": [
                        "rewrite -Hx0 Ropp_0.",
                        "VernacExtend",
                        "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
                    ]
                },
                {
                    "command": [
                        "apply Rle_refl.",
                        "VernacExtend",
                        "0a60a50353d5cfa9a4ade0240c47d5160d6d423c"
                    ]
                },
                {
                    "command": [
                        "elim Hy.",
                        "VernacExtend",
                        "58c8be1582093d26cc1883c4d437081a09d197a8"
                    ]
                },
                {
                    "command": [
                        "apply Ropp_le_cancel.",
                        "VernacExtend",
                        "b5845fa505cf45d1b1826b280ab3b8249238dd4d"
                    ]
                },
                {
                    "command": [
                        "rewrite -Hx0 Ropp_0.",
                        "VernacExtend",
                        "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
                    ]
                },
                {
                    "command": [
                        "apply Rle_refl.",
                        "VernacExtend",
                        "0a60a50353d5cfa9a4ade0240c47d5160d6d423c"
                    ]
                },
                {
                    "command": [
                        "case Rle_dec => Hy //=.",
                        "VernacExtend",
                        "3c42b53d0efc26db114b00541ac5e7fcb29e6aeb"
                    ]
                },
                {
                    "command": [
                        "case Rle_lt_or_eq_dec => Hy0 //=.",
                        "VernacExtend",
                        "3c42b53d0efc26db114b00541ac5e7fcb29e6aeb"
                    ]
                },
                {
                    "command": [
                        "elim Hx.",
                        "VernacExtend",
                        "6da67d91ac8c390d9321f1009df1327ed8c33ccd"
                    ]
                },
                {
                    "command": [
                        "rewrite -Hy0 Ropp_0.",
                        "VernacExtend",
                        "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
                    ]
                },
                {
                    "command": [
                        "apply Rle_refl.",
                        "VernacExtend",
                        "0a60a50353d5cfa9a4ade0240c47d5160d6d423c"
                    ]
                },
                {
                    "command": [
                        "elim Hx.",
                        "VernacExtend",
                        "6da67d91ac8c390d9321f1009df1327ed8c33ccd"
                    ]
                },
                {
                    "command": [
                        "rewrite -Ropp_0.",
                        "VernacExtend",
                        "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
                    ]
                },
                {
                    "command": [
                        "apply Ropp_le_contravar.",
                        "VernacExtend",
                        "ac8d32b190d111aa8834547674121bcf3bb8a0ed"
                    ]
                },
                {
                    "command": [
                        "apply Rlt_le.",
                        "VernacExtend",
                        "cdc4280500779f23bae235b94c24a4b2ea2921fe"
                    ]
                },
                {
                    "command": [
                        "now apply Rnot_le_lt.",
                        "VernacExtend",
                        "472d95d86d32de5f65bdb99059686dfbade9f294"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "Rbar_mult_comm",
            "line_nb": 312,
            "steps": [
                {
                    "command": [
                        "unfold Rbar_mult.",
                        "VernacExtend",
                        "a5785845d2299c21b9d748112f2d2fdb52851283"
                    ]
                },
                {
                    "command": [
                        "by rewrite Rbar_mult'_comm.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "Rbar_mult_opp_r",
            "line_nb": 316,
            "steps": [
                {
                    "command": [
                        "unfold Rbar_mult.",
                        "VernacExtend",
                        "a5785845d2299c21b9d748112f2d2fdb52851283"
                    ]
                },
                {
                    "command": [
                        "rewrite Rbar_mult'_opp_r.",
                        "VernacExtend",
                        "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
                    ]
                },
                {
                    "command": [
                        "case Rbar_mult' => //=.",
                        "VernacExtend",
                        "3c42b53d0efc26db114b00541ac5e7fcb29e6aeb"
                    ]
                },
                {
                    "command": [
                        "apply f_equal, eq_sym, Ropp_0.",
                        "VernacExtend",
                        "bdb09aefcd69af9dc05fa586d5b242ecef76f75c"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "Rbar_mult_opp_l",
            "line_nb": 322,
            "steps": [
                {
                    "command": [
                        "rewrite ?(Rbar_mult_comm _ y).",
                        "VernacExtend",
                        "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
                    ]
                },
                {
                    "command": [
                        "by apply Rbar_mult_opp_r.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "Rbar_mult_opp",
            "line_nb": 326,
            "steps": [
                {
                    "command": [
                        "by rewrite Rbar_mult_opp_l -Rbar_mult_opp_r Rbar_opp_involutive.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "Rbar_mult_0_l",
            "line_nb": 329,
            "steps": [
                {
                    "command": [
                        "case: x => [x | | ] //=.",
                        "VernacExtend",
                        "e00fff71ff314c991514fc71c41a3556702e444a"
                    ]
                },
                {
                    "command": [
                        "by rewrite Rmult_0_l.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "case: Rle_dec (Rle_refl 0) => // H _.",
                        "VernacExtend",
                        "e00fff71ff314c991514fc71c41a3556702e444a"
                    ]
                },
                {
                    "command": [
                        "case: Rle_lt_or_eq_dec (Rlt_irrefl 0) => // _ _.",
                        "VernacExtend",
                        "e00fff71ff314c991514fc71c41a3556702e444a"
                    ]
                },
                {
                    "command": [
                        "case: Rle_dec (Rle_refl 0) => // H _.",
                        "VernacExtend",
                        "e00fff71ff314c991514fc71c41a3556702e444a"
                    ]
                },
                {
                    "command": [
                        "case: Rle_lt_or_eq_dec (Rlt_irrefl 0) => // _ _.",
                        "VernacExtend",
                        "e00fff71ff314c991514fc71c41a3556702e444a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "Rbar_mult_0_r",
            "line_nb": 337,
            "steps": [
                {
                    "command": [
                        "rewrite Rbar_mult_comm ; by apply Rbar_mult_0_l.",
                        "VernacExtend",
                        "f9e2aad1e70f1876566a77bd0af96f52b3b81520"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "Rbar_mult_eq_0",
            "line_nb": 340,
            "steps": [
                {
                    "command": [
                        "case: x => [x | | ] //= ; case: y => [y | | ] //= ; (try case: Rle_dec => //= H) ; (try case: Rle_lt_or_eq_dec => //=) ; (try (left ; by apply f_equal)) ; (try (right ; by apply f_equal)).",
                        "VernacExtend",
                        "0bcc81e02dc9fe81d03d7676e676c881f56b03f0"
                    ]
                },
                {
                    "command": [
                        "intros H.",
                        "VernacExtend",
                        "5cfae87a34fa7b59a257c9640f1b674f6e6d780b"
                    ]
                },
                {
                    "command": [
                        "apply (f_equal real) in H.",
                        "VernacExtend",
                        "8c053e29070bbe42cc144c0662f29c069d100054"
                    ]
                },
                {
                    "command": [
                        "simpl in H.",
                        "VernacExtend",
                        "78dad51b2bb1130f71851d1e55489020824f59f6"
                    ]
                },
                {
                    "command": [
                        "apply Rmult_integral in H ; case: H => ->.",
                        "VernacExtend",
                        "51ba658a8f669aff7fb561b4d6168f2865dfabb6"
                    ]
                },
                {
                    "command": [
                        "by left.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "by right.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "ex_Rbar_mult_sym",
            "line_nb": 349,
            "steps": [
                {
                    "command": [
                        "case: x => [x | | ] ; case: y => [y | | ] //.",
                        "VernacExtend",
                        "5887f8022a4f6389ac249140364feb69c4f18799"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "ex_Rbar_mult_opp_l",
            "line_nb": 352,
            "steps": [
                {
                    "command": [
                        "case: x => [x | | ] ; case: y => [y | | ] //= Hx ; by apply Ropp_neq_0_compat.",
                        "VernacExtend",
                        "05928a9db4d7951ab20c19816b8485c23bd4e06c"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "ex_Rbar_mult_opp_r",
            "line_nb": 355,
            "steps": [
                {
                    "command": [
                        "case: x => [x | | ] ; case: y => [y | | ] //= Hx ; by apply Ropp_neq_0_compat.",
                        "VernacExtend",
                        "05928a9db4d7951ab20c19816b8485c23bd4e06c"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "is_Rbar_mult_sym",
            "line_nb": 358,
            "steps": [
                {
                    "command": [
                        "case: x => [x | | ] ; case: y => [y | | ] ; case: z => [z | | ] //= ; unfold is_Rbar_mult, Rbar_mult' ; try (case: Rle_dec => // H) ; try (case: Rle_lt_or_eq_dec => // H0) ; try (case => <-) ; try (move => _).",
                        "VernacExtend",
                        "9bcabdc49abfa00d585090477a38cc2f67cf43da"
                    ]
                },
                {
                    "command": [
                        "by rewrite Rmult_comm.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "is_Rbar_mult_opp_l",
            "line_nb": 362,
            "steps": [
                {
                    "command": [
                        "case: x => [x | | ] ; case: y => [y | | ] ; case: z => [z | | ] //= ; unfold is_Rbar_mult, Rbar_mult' ; try (case: Rle_dec => // H) ; try (case: Rle_lt_or_eq_dec => // H0) ; try (case => <-) ; try (move => _).",
                        "VernacExtend",
                        "9bcabdc49abfa00d585090477a38cc2f67cf43da"
                    ]
                },
                {
                    "command": [
                        "apply (f_equal (@Some _)), f_equal ; ring.",
                        "VernacExtend",
                        "4183c3324756c3379ea91a1a1d9eb9d87f0a4bee"
                    ]
                },
                {
                    "command": [
                        "apply Ropp_lt_contravar in H0 ; rewrite Ropp_0 in H0 ; now move/Rlt_not_le: H0 ; case: Rle_dec.",
                        "VernacExtend",
                        "3961f4d846db96e4592d2d0d3116daf9a5262fa8"
                    ]
                },
                {
                    "command": [
                        "apply Rnot_le_lt, Ropp_lt_contravar in H ; rewrite Ropp_0 in H ; move/Rlt_le: (H) ; case: Rle_dec => // H0 _ ; now move/Rlt_not_eq: H ; case: Rle_lt_or_eq_dec.",
                        "VernacExtend",
                        "8b2ee6b71bd96fdc86809aa9038313e811f1ef67"
                    ]
                },
                {
                    "command": [
                        "apply Rnot_le_lt, Ropp_lt_contravar in H ; rewrite Ropp_0 in H ; move/Rlt_le: (H) ; case: Rle_dec => // H0 _ ; now move/Rlt_not_eq: H ; case: Rle_lt_or_eq_dec.",
                        "VernacExtend",
                        "8b2ee6b71bd96fdc86809aa9038313e811f1ef67"
                    ]
                },
                {
                    "command": [
                        "apply Ropp_lt_contravar in H0 ; rewrite Ropp_0 in H0 ; now move/Rlt_not_le: H0 ; case: Rle_dec.",
                        "VernacExtend",
                        "3961f4d846db96e4592d2d0d3116daf9a5262fa8"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "is_Rbar_mult_opp_r",
            "line_nb": 370,
            "steps": [
                {
                    "command": [
                        "move/is_Rbar_mult_sym => H.",
                        "VernacExtend",
                        "b1b2cb7a3a617cba67460b4eca1f04de3c1cc716"
                    ]
                },
                {
                    "command": [
                        "now apply is_Rbar_mult_sym, is_Rbar_mult_opp_l.",
                        "VernacExtend",
                        "bbaa64cbf5765ec642aef652ec54725681926de3"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "is_Rbar_mult_p_infty_pos",
            "line_nb": 374,
            "steps": [
                {
                    "command": [
                        "case: x => [x | | ] // Hx.",
                        "VernacExtend",
                        "e00fff71ff314c991514fc71c41a3556702e444a"
                    ]
                },
                {
                    "command": [
                        "unfold is_Rbar_mult, Rbar_mult'.",
                        "VernacExtend",
                        "c4995e8fc585ed2cbb89782c3bcf2f4511431251"
                    ]
                },
                {
                    "command": [
                        "case: Rle_dec (Rlt_le _ _ Hx) => // Hx' _.",
                        "VernacExtend",
                        "e00fff71ff314c991514fc71c41a3556702e444a"
                    ]
                },
                {
                    "command": [
                        "now case: Rle_lt_or_eq_dec (Rlt_not_eq _ _ Hx).",
                        "VernacExtend",
                        "9b5dc78914ea71d33248c1f7ec7d76670ed43b8d"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "is_Rbar_mult_p_infty_neg",
            "line_nb": 380,
            "steps": [
                {
                    "command": [
                        "case: x => [x | | ] // Hx.",
                        "VernacExtend",
                        "e00fff71ff314c991514fc71c41a3556702e444a"
                    ]
                },
                {
                    "command": [
                        "unfold is_Rbar_mult, Rbar_mult'.",
                        "VernacExtend",
                        "c4995e8fc585ed2cbb89782c3bcf2f4511431251"
                    ]
                },
                {
                    "command": [
                        "case: Rle_dec (Rlt_not_le _ _ Hx) => // Hx' _.",
                        "VernacExtend",
                        "e00fff71ff314c991514fc71c41a3556702e444a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "is_Rbar_mult_m_infty_pos",
            "line_nb": 385,
            "steps": [
                {
                    "command": [
                        "case: x => [x | | ] // Hx.",
                        "VernacExtend",
                        "e00fff71ff314c991514fc71c41a3556702e444a"
                    ]
                },
                {
                    "command": [
                        "unfold is_Rbar_mult, Rbar_mult'.",
                        "VernacExtend",
                        "c4995e8fc585ed2cbb89782c3bcf2f4511431251"
                    ]
                },
                {
                    "command": [
                        "case: Rle_dec (Rlt_le _ _ Hx) => // Hx' _.",
                        "VernacExtend",
                        "e00fff71ff314c991514fc71c41a3556702e444a"
                    ]
                },
                {
                    "command": [
                        "now case: Rle_lt_or_eq_dec (Rlt_not_eq _ _ Hx).",
                        "VernacExtend",
                        "9b5dc78914ea71d33248c1f7ec7d76670ed43b8d"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "is_Rbar_mult_m_infty_neg",
            "line_nb": 391,
            "steps": [
                {
                    "command": [
                        "case: x => [x | | ] // Hx.",
                        "VernacExtend",
                        "e00fff71ff314c991514fc71c41a3556702e444a"
                    ]
                },
                {
                    "command": [
                        "unfold is_Rbar_mult, Rbar_mult'.",
                        "VernacExtend",
                        "c4995e8fc585ed2cbb89782c3bcf2f4511431251"
                    ]
                },
                {
                    "command": [
                        "case: Rle_dec (Rlt_not_le _ _ Hx) => // Hx' _.",
                        "VernacExtend",
                        "e00fff71ff314c991514fc71c41a3556702e444a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "is_Rbar_div_p_infty",
            "line_nb": 396,
            "steps": [
                {
                    "command": [
                        "apply (f_equal (@Some _)).",
                        "VernacExtend",
                        "7188480e0223c5127292b7204c8db2737ebf1ab7"
                    ]
                },
                {
                    "command": [
                        "by rewrite Rmult_0_r.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "is_Rbar_div_m_infty",
            "line_nb": 400,
            "steps": [
                {
                    "command": [
                        "apply (f_equal (@Some _)).",
                        "VernacExtend",
                        "7188480e0223c5127292b7204c8db2737ebf1ab7"
                    ]
                },
                {
                    "command": [
                        "by rewrite Rmult_0_r.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "Rbar_mult_pos_eq",
            "line_nb": 404,
            "steps": [
                {
                    "command": [
                        "case: z => z Hz ; case: x => [x | | ] ; case: y => [y | | ] ; split => //= H ; apply Rbar_finite_eq in H.",
                        "VernacExtend",
                        "d7f280775005d8a3a3bd7ba1fcf9c95eaeff59f2"
                    ]
                },
                {
                    "command": [
                        "by rewrite H.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "apply Rbar_finite_eq, (Rmult_eq_reg_r (z)) => // ; by apply Rgt_not_eq.",
                        "VernacExtend",
                        "7bd77ea96f784074e3b1d448260a45dd4191485f"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "Rbar_mult_pos_lt",
            "line_nb": 409,
            "steps": [
                {
                    "command": [
                        "case: z => z Hz ; case: x => [x | | ] ; case: y => [y | | ] ; split => //= H.",
                        "VernacExtend",
                        "4e8dbd3197964509676a5d02e50565819190a1c4"
                    ]
                },
                {
                    "command": [
                        "apply (Rmult_lt_compat_r (z)) => //.",
                        "VernacExtend",
                        "3c42b53d0efc26db114b00541ac5e7fcb29e6aeb"
                    ]
                },
                {
                    "command": [
                        "apply (Rmult_lt_reg_r (z)) => //.",
                        "VernacExtend",
                        "3c42b53d0efc26db114b00541ac5e7fcb29e6aeb"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "Rbar_mult_pos_le",
            "line_nb": 414,
            "steps": [
                {
                    "command": [
                        "case: z => z Hz ; case: x => [x | | ] ; case: y => [y | | ] ; split => //= H.",
                        "VernacExtend",
                        "4e8dbd3197964509676a5d02e50565819190a1c4"
                    ]
                },
                {
                    "command": [
                        "apply Rmult_le_compat_r with (2 := H).",
                        "VernacExtend",
                        "99861858a7197b0f4ff0dbe31b4c2ce9a04f804d"
                    ]
                },
                {
                    "command": [
                        "now apply Rlt_le.",
                        "VernacExtend",
                        "3fa67bbd472123a7abc1f777aecc643fb3862e46"
                    ]
                },
                {
                    "command": [
                        "now apply Rmult_le_reg_r with (2 := H).",
                        "VernacExtend",
                        "790a81be5e6f8504a69d4176efca40a92e8b0919"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "Rbar_div_pos_eq",
            "line_nb": 420,
            "steps": [
                {
                    "command": [
                        "case: z => z Hz ; case: x => [x | | ] ; case: y => [y | | ] ; split => //= H ; apply Rbar_finite_eq in H.",
                        "VernacExtend",
                        "d7f280775005d8a3a3bd7ba1fcf9c95eaeff59f2"
                    ]
                },
                {
                    "command": [
                        "by rewrite H.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "apply Rbar_finite_eq, (Rmult_eq_reg_r (/z)) => // ; by apply Rgt_not_eq, Rinv_0_lt_compat.",
                        "VernacExtend",
                        "7bd77ea96f784074e3b1d448260a45dd4191485f"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "Rbar_div_pos_lt",
            "line_nb": 425,
            "steps": [
                {
                    "command": [
                        "case: z => z Hz ; case: x => [x | | ] ; case: y => [y | | ] ; split => //= H.",
                        "VernacExtend",
                        "4e8dbd3197964509676a5d02e50565819190a1c4"
                    ]
                },
                {
                    "command": [
                        "apply (Rmult_lt_compat_r (/z)) => // ; by apply Rinv_0_lt_compat.",
                        "VernacExtend",
                        "7bd77ea96f784074e3b1d448260a45dd4191485f"
                    ]
                },
                {
                    "command": [
                        "apply (Rmult_lt_reg_r (/z)) => // ; by apply Rinv_0_lt_compat.",
                        "VernacExtend",
                        "7bd77ea96f784074e3b1d448260a45dd4191485f"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "Rbar_div_pos_le",
            "line_nb": 430,
            "steps": [
                {
                    "command": [
                        "case: z => z Hz ; case: x => [x | | ] ; case: y => [y | | ] ; split => //= H.",
                        "VernacExtend",
                        "4e8dbd3197964509676a5d02e50565819190a1c4"
                    ]
                },
                {
                    "command": [
                        "apply Rmult_le_compat_r with (2 := H).",
                        "VernacExtend",
                        "99861858a7197b0f4ff0dbe31b4c2ce9a04f804d"
                    ]
                },
                {
                    "command": [
                        "now apply Rlt_le, Rinv_0_lt_compat.",
                        "VernacExtend",
                        "d56a3aab3989da48d160dcfc2962e243a6c1f327"
                    ]
                },
                {
                    "command": [
                        "apply Rmult_le_reg_r with (2 := H).",
                        "VernacExtend",
                        "1eecf9ec968dd47785a5bd448ce279b9228da0e3"
                    ]
                },
                {
                    "command": [
                        "now apply Rinv_0_lt_compat.",
                        "VernacExtend",
                        "58509a7b472652bb7aef39a9b6811672d04772c5"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "Rbar_lt_locally",
            "line_nb": 438,
            "steps": [
                {
                    "command": [
                        "case: a => [ a /= Ha | | _ ] //= ; (try apply Rminus_lt_0 in Ha) ; case: b => [ b Hb | _ | ] //= ; (try apply Rminus_lt_0 in Hb).",
                        "VernacExtend",
                        "79b5a47ae82f8bf10fc60aa1758ba45a2a691e8e"
                    ]
                },
                {
                    "command": [
                        "assert (0 < Rmin (x - a) (b - x)).",
                        "VernacExtend",
                        "5550f694f0b85ac7ff4173001fb5469f95f5fb4d"
                    ]
                },
                {
                    "command": [
                        "by apply Rmin_case.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "exists (mkposreal _ H) => y /= Hy ; split.",
                        "VernacExtend",
                        "ba86abe7713c160dab01ce533cab9e3f8284325e"
                    ]
                },
                {
                    "command": [
                        "apply Rplus_lt_reg_r with (-x).",
                        "VernacExtend",
                        "d08f252e84a688d18a0988913b45dc796d225046"
                    ]
                },
                {
                    "command": [
                        "replace (a+-x) with (-(x-a)) by ring.",
                        "VernacExtend",
                        "2e4d90a6813dc4b8de3d4305564fdebf73b99250"
                    ]
                },
                {
                    "command": [
                        "apply (Rabs_lt_between (y - x)).",
                        "VernacExtend",
                        "30d4341c4fc5cf03c5d2b5d134ede95afa1173bc"
                    ]
                },
                {
                    "command": [
                        "apply Rlt_le_trans with (1 := Hy).",
                        "VernacExtend",
                        "26a98f403c3a764541a9dad52eca2f9b243cea0a"
                    ]
                },
                {
                    "command": [
                        "by apply Rmin_l.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "apply Rplus_lt_reg_r with (-x).",
                        "VernacExtend",
                        "d08f252e84a688d18a0988913b45dc796d225046"
                    ]
                },
                {
                    "command": [
                        "apply (Rabs_lt_between (y - x)).",
                        "VernacExtend",
                        "30d4341c4fc5cf03c5d2b5d134ede95afa1173bc"
                    ]
                },
                {
                    "command": [
                        "apply Rlt_le_trans with (1 := Hy).",
                        "VernacExtend",
                        "26a98f403c3a764541a9dad52eca2f9b243cea0a"
                    ]
                },
                {
                    "command": [
                        "by apply Rmin_r.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "exists (mkposreal _ Ha) => y /= Hy ; split => //.",
                        "VernacExtend",
                        "fbaa61af20867a5dfb8bb5213ca8048b258f8f3a"
                    ]
                },
                {
                    "command": [
                        "apply Rplus_lt_reg_r with (-x).",
                        "VernacExtend",
                        "d08f252e84a688d18a0988913b45dc796d225046"
                    ]
                },
                {
                    "command": [
                        "replace (a+-x) with (-(x-a)) by ring.",
                        "VernacExtend",
                        "2e4d90a6813dc4b8de3d4305564fdebf73b99250"
                    ]
                },
                {
                    "command": [
                        "by apply (Rabs_lt_between (y - x)).",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "exists (mkposreal _ Hb) => y /= Hy ; split => //.",
                        "VernacExtend",
                        "fbaa61af20867a5dfb8bb5213ca8048b258f8f3a"
                    ]
                },
                {
                    "command": [
                        "apply Rplus_lt_reg_r with (-x).",
                        "VernacExtend",
                        "d08f252e84a688d18a0988913b45dc796d225046"
                    ]
                },
                {
                    "command": [
                        "by apply (Rabs_lt_between (y - x)).",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "exists (mkposreal _ Rlt_0_1) ; by split.",
                        "VernacExtend",
                        "2f39e34ec99b129f3957bb00adbb255d7ebca2c6"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "Rbar_min_comm",
            "line_nb": 461,
            "steps": [
                {
                    "command": [
                        "case: x => [x | | ] //= ; case: y => [y | | ] //=.",
                        "VernacExtend",
                        "5887f8022a4f6389ac249140364feb69c4f18799"
                    ]
                },
                {
                    "command": [
                        "by rewrite Rmin_comm.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "Rbar_min_r",
            "line_nb": 465,
            "steps": [
                {
                    "command": [
                        "case: x => [x | | ] //= ; case: y => [y | | ] //=.",
                        "VernacExtend",
                        "5887f8022a4f6389ac249140364feb69c4f18799"
                    ]
                },
                {
                    "command": [
                        "by apply Rmin_r.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "by apply Rle_refl.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "Rbar_min_l",
            "line_nb": 470,
            "steps": [
                {
                    "command": [
                        "rewrite Rbar_min_comm.",
                        "VernacExtend",
                        "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
                    ]
                },
                {
                    "command": [
                        "by apply Rbar_min_r.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "Rbar_min_case",
            "line_nb": 474,
            "steps": [
                {
                    "command": [
                        "case: x => [x | | ] //= ; case: y => [y | | ] //=.",
                        "VernacExtend",
                        "5887f8022a4f6389ac249140364feb69c4f18799"
                    ]
                },
                {
                    "command": [
                        "by apply Rmin_case.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "Rbar_min_case_strong",
            "line_nb": 478,
            "steps": [
                {
                    "command": [
                        "case: r1 => [x | | ] //= ; case: r2 => [y | | ] //= Hx Hy ; (try by apply Hx) ; (try by apply Hy).",
                        "VernacExtend",
                        "bba1ef86dd9f459c118f1aa87dfcd7e89d08412b"
                    ]
                },
                {
                    "command": [
                        "by apply Rmin_case_strong.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "Rbar_abs_lt_between",
            "line_nb": 483,
            "steps": [
                {
                    "command": [
                        "case: x => [x | | ] ; case: y => [y | | ] /= ; try by intuition.",
                        "VernacExtend",
                        "2906658ba5c272b473591a601bf1dd046b109346"
                    ]
                },
                {
                    "command": [
                        "by apply Rabs_lt_between.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "Rbar_abs_opp",
            "line_nb": 487,
            "steps": [
                {
                    "command": [
                        "case: x => [x | | ] //=.",
                        "VernacExtend",
                        "e00fff71ff314c991514fc71c41a3556702e444a"
                    ]
                },
                {
                    "command": [
                        "by rewrite Rabs_Ropp.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "Rbar_abs_pos",
            "line_nb": 491,
            "steps": [
                {
                    "command": [
                        "case: x => [x | | ] //= Hx.",
                        "VernacExtend",
                        "e00fff71ff314c991514fc71c41a3556702e444a"
                    ]
                },
                {
                    "command": [
                        "by apply f_equal, Rabs_pos_eq.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "Rbar_abs_neg",
            "line_nb": 495,
            "steps": [
                {
                    "command": [
                        "case: x => [x | | ] //= Hx.",
                        "VernacExtend",
                        "e00fff71ff314c991514fc71c41a3556702e444a"
                    ]
                },
                {
                    "command": [
                        "rewrite -Rabs_Ropp.",
                        "VernacExtend",
                        "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
                    ]
                },
                {
                    "command": [
                        "apply f_equal, Rabs_pos_eq.",
                        "VernacExtend",
                        "b55fe37705ad2b60a69dd1aec9958dd7bcdd88c6"
                    ]
                },
                {
                    "command": [
                        "now rewrite -Ropp_0 ; apply Ropp_le_contravar.",
                        "VernacExtend",
                        "81d5759d5121b2545d5c3d2016d4379baff2d41b"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        }
    ]
}