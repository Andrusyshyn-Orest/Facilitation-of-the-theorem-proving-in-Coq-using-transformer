{
    "filename": "theories/SF_seq.v",
    "coq_project": "coquelicot",
    "vernac_cmds": [
        [
            "Require Import Reals Psatz.",
            "VernacRequire",
            "aa71e9955fdefb9d3b0e58d51406978b644e60c0"
        ],
        [
            "Require Import mathcomp.ssreflect.ssreflect mathcomp.ssreflect.seq mathcomp.ssreflect.ssrbool.",
            "VernacRequire",
            "8d1aa0d48a2e370b74b08328ae528d34a90e0a37"
        ],
        [
            "Require Import Rcomplements Rbar Lub.",
            "VernacRequire",
            "6454bb232ba01b8d729720a01b6e378f876e81dc"
        ],
        [
            "Require Import Hierarchy.",
            "VernacRequire",
            "0059d835cdd4d4feb11253158351fbe9012c09f7"
        ],
        [
            "Open Scope R_scope.",
            "VernacOpenCloseScope",
            "e9e2b017da79049aff27c5418fe22258c29a75e7"
        ],
        [
            "Fixpoint seq2Rlist (s : seq R) := match s with | [::] => RList.nil | h::t => RList.cons h (seq2Rlist t) end.",
            "VernacFixpoint",
            "ed8ebe1b19c3562786083d7775d5b0069d6925af"
        ],
        [
            "Fixpoint Rlist2seq (s : Rlist) : seq R := match s with | RList.nil => [::] | RList.cons h t => h::(Rlist2seq t) end.",
            "VernacFixpoint",
            "93e9dadf6992400c86e25486883824faeb12a101"
        ],
        [
            "Lemma seq2Rlist_bij (s : Rlist) : seq2Rlist (Rlist2seq s) = s.",
            "VernacStartTheoremProof",
            "4790e28b20ae35f0f622c3da65fee51d39aa1fd7"
        ],
        [
            "by elim: s => //= h s ->.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma Rlist2seq_bij (s : seq R) : Rlist2seq (seq2Rlist s) = s.",
            "VernacStartTheoremProof",
            "46f585594461ee79117694ae7fb2a25331b57948"
        ],
        [
            "by elim: s => //= h s ->.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma size_compat (s : seq R) : Rlength (seq2Rlist s) = size s.",
            "VernacStartTheoremProof",
            "1713ae08c873a24533249fe747a3c1c536a842a7"
        ],
        [
            "elim: s => // t s IHs /= ; by rewrite IHs.",
            "VernacExtend",
            "a7a7c7611d0b423be48ea257cc8cc8725ae41f55"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma nth_compat (s : seq R) (n : nat) : pos_Rl (seq2Rlist s) n = nth 0 s n.",
            "VernacStartTheoremProof",
            "202780915e96d0ab7ac0318c932d3c05fde8c198"
        ],
        [
            "elim: s n => [n|t s IHs n] /= ; case: n => //=.",
            "VernacExtend",
            "df63f96bedbb0673aecb42521d90011325a86c94"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma rev_rev {T} (l : seq T) : rev (rev l) = l.",
            "VernacStartTheoremProof",
            "f2123106ed216b2046c94e68a539e9055bbd8509"
        ],
        [
            "elim: l => /= [ | h l IH].",
            "VernacExtend",
            "e686a1895f1799b840b76242f931100819a9ad6c"
        ],
        [
            "by [].",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "by rewrite rev_cons rev_rcons IH.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma head_rev {T} (x0 : T) (l : seq T) : head x0 (rev l) = last x0 l.",
            "VernacStartTheoremProof",
            "86bb391067b28829e688b32540854e0810a146f0"
        ],
        [
            "elim: l x0 => /= [ | x1 l IH] x0.",
            "VernacExtend",
            "e686a1895f1799b840b76242f931100819a9ad6c"
        ],
        [
            "by [].",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "by rewrite rev_cons head_rcons.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma last_rev {T} (x0 : T) (l : seq T) : last x0 (rev l) = head x0 l.",
            "VernacStartTheoremProof",
            "87c7b553791fa4eba7b64a88a9871df1ac06d581"
        ],
        [
            "by rewrite -head_rev rev_rev.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma last_unzip1 {S T} x0 y0 (s : seq (S * T)) : last x0 (unzip1 s) = fst (last (x0,y0) s).",
            "VernacStartTheoremProof",
            "dc4cc550d36f9049621636b01be0620bd7850d48"
        ],
        [
            "case: s => [ | h s] //= .",
            "VernacExtend",
            "e00fff71ff314c991514fc71c41a3556702e444a"
        ],
        [
            "elim: s h => [ | h0 s IH] h //=.",
            "VernacExtend",
            "e686a1895f1799b840b76242f931100819a9ad6c"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Fixpoint sorted {T : Type} (Ord : T -> T -> Prop) (s : seq T) := match s with | [::] | [:: _] => True | h0 :: (h1 :: t1) as t0 => Ord h0 h1 /\\ sorted Ord t0 end.",
            "VernacFixpoint",
            "d020051cdab40bc3d1b4f491827a6c3a4d548572"
        ],
        [
            "Lemma sorted_nth {T : Type} (Ord : T -> T -> Prop) (s : seq T) : sorted Ord s <-> (forall i : nat, (i < Peano.pred (size s))%nat -> forall x0 : T, Ord (nth x0 s i) (nth x0 s (S i))).",
            "VernacStartTheoremProof",
            "c57418369b6fb73d93d993e2d0a0cc1e722e1fbd"
        ],
        [
            "case: s.",
            "VernacExtend",
            "e00fff71ff314c991514fc71c41a3556702e444a"
        ],
        [
            "split => // _ i Hi ; contradict Hi ; apply lt_n_O.",
            "VernacExtend",
            "b09118431c7e1de144bec6b0f6c79c13f26f7c00"
        ],
        [
            "move => t s ; elim: s t => [ t | t s IHs t0] ; split => // H.",
            "VernacExtend",
            "8abe8d38869047358e648d9788239440e9625d0e"
        ],
        [
            "move => i Hi ; contradict Hi ; apply lt_n_O.",
            "VernacExtend",
            "443bc58052aa1493e4b5c6e1c7c861737e6e2a6b"
        ],
        [
            "case => [| i] Hi x0 ; simpl in Hi.",
            "VernacExtend",
            "6c67f51406ab71d8829c8fac70eca489407bbdaa"
        ],
        [
            "apply H.",
            "VernacExtend",
            "4b47b71ad0f800d57cbdc591d68949e07decb540"
        ],
        [
            "case: (IHs t) => {IHs} IHs _ ; apply (IHs (proj2 H) i (lt_S_n _ _ Hi) x0).",
            "VernacExtend",
            "716fcce498fddba33c4b4e359a3d53e723e3ab15"
        ],
        [
            "split.",
            "VernacExtend",
            "55abc140132bd88981001ac656020469a8d503eb"
        ],
        [
            "apply (H O (lt_0_Sn _) t).",
            "VernacExtend",
            "33eb8e89a75bf35bf6b1e3027a688937a7dad049"
        ],
        [
            "case: (IHs t) => {IHs} _ IHs.",
            "VernacExtend",
            "e00fff71ff314c991514fc71c41a3556702e444a"
        ],
        [
            "apply: IHs => i Hi x0 ; apply: (H (S i)) ; simpl ; apply lt_n_S, Hi.",
            "VernacExtend",
            "c56bc20f384e92178d0e1b99bc101b6f97fd5880"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma sorted_cat {T : Type} (Ord : T -> T -> Prop) (s1 s2 : seq T) x0 : sorted Ord s1 -> sorted Ord s2 -> Ord (last x0 s1) (head x0 s2) -> sorted Ord (s1 ++ s2).",
            "VernacStartTheoremProof",
            "831c00633f914660aa14056188dfffd7091fb3e4"
        ],
        [
            "move/sorted_nth => H1.",
            "VernacExtend",
            "b1b2cb7a3a617cba67460b4eca1f04de3c1cc716"
        ],
        [
            "move/sorted_nth => H2 H0.",
            "VernacExtend",
            "b1b2cb7a3a617cba67460b4eca1f04de3c1cc716"
        ],
        [
            "apply sorted_nth => i Hi => x1.",
            "VernacExtend",
            "3c42b53d0efc26db114b00541ac5e7fcb29e6aeb"
        ],
        [
            "rewrite ?nth_cat.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "rewrite ?SSR_minus.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "case: (le_dec (S i) (size s1)) => Hi0.",
            "VernacExtend",
            "e00fff71ff314c991514fc71c41a3556702e444a"
        ],
        [
            "move: (proj2 (SSR_leq _ _) Hi0) ; case: (ssrnat.leq (S i) (size s1)) => // _.",
            "VernacExtend",
            "a01b3d93f426ff68d360351709a5fa5af822af32"
        ],
        [
            "case: (le_dec (S (S i)) (size s1)) => Hi1.",
            "VernacExtend",
            "e00fff71ff314c991514fc71c41a3556702e444a"
        ],
        [
            "move: (proj2 (SSR_leq _ _) Hi1) ; case: (ssrnat.leq (S (S i)) (size s1)) => // _.",
            "VernacExtend",
            "a01b3d93f426ff68d360351709a5fa5af822af32"
        ],
        [
            "apply H1 ; intuition.",
            "VernacExtend",
            "b839507d92adb74feaaf354b5935cd3fbef3f432"
        ],
        [
            "have : ~ (ssrnat.leq (S (S i)) (size s1)).",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "contradict Hi1 ; by apply SSR_leq.",
            "VernacExtend",
            "6363b39ba4b13f3f8f8447db1431f8dc3a78193b"
        ],
        [
            "case: (ssrnat.leq (S (S i)) (size s1)) => // _.",
            "VernacExtend",
            "e00fff71ff314c991514fc71c41a3556702e444a"
        ],
        [
            "suff Hi' : i = Peano.pred (size s1).",
            "VernacExtend",
            "d07fc8b2103f140554938023774bf3f75d04ba99"
        ],
        [
            "rewrite Hi' nth_last.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "replace (S (Peano.pred (size s1)) - size s1)%nat with O.",
            "VernacExtend",
            "814958b9cb193c1ba17d3104ac012fdff7b57999"
        ],
        [
            "rewrite nth0.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "apply not_le in Hi1.",
            "VernacExtend",
            "767d65c74308b7145c77df7916f06acea53af706"
        ],
        [
            "case: (s1) H0 Hi Hi' Hi0 Hi1 => [ | x2 s1'] //= H0 Hi Hi' Hi0 Hi1.",
            "VernacExtend",
            "e00fff71ff314c991514fc71c41a3556702e444a"
        ],
        [
            "by apply le_Sn_O in Hi0.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "case: (s2) H0 Hi0 Hi => [ | x3 s2'] //= H0 Hi0 Hi.",
            "VernacExtend",
            "e00fff71ff314c991514fc71c41a3556702e444a"
        ],
        [
            "rewrite cats0 /= in Hi.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "rewrite Hi' in Hi.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "by apply lt_irrefl in Hi.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "case: (s1) Hi0 => //= [ | x2 s0] Hi0.",
            "VernacExtend",
            "e00fff71ff314c991514fc71c41a3556702e444a"
        ],
        [
            "by apply le_Sn_O in Hi0.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "by rewrite minus_diag.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "apply sym_eq, le_antisym.",
            "VernacExtend",
            "3ae8833123ce1b0674a516999499afc79e59c883"
        ],
        [
            "apply MyNat.le_pred_le_succ.",
            "VernacExtend",
            "beb8a47a6619df0b0a4225c47d854ce55ad717d0"
        ],
        [
            "apply not_le in Hi1.",
            "VernacExtend",
            "767d65c74308b7145c77df7916f06acea53af706"
        ],
        [
            "by apply lt_n_Sm_le.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "replace i with (Peano.pred (S i)) by auto.",
            "VernacExtend",
            "cacbd6717e456cfa306abbc9c6b377b953a57d05"
        ],
        [
            "by apply le_pred.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "have : ~ (ssrnat.leq (S i) (size s1)).",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "contradict Hi0 ; by apply SSR_leq.",
            "VernacExtend",
            "0eee54ac385e133b21dbb21b29a2fdab012e1dca"
        ],
        [
            "case: (ssrnat.leq (S i) (size s1)) => // _.",
            "VernacExtend",
            "e00fff71ff314c991514fc71c41a3556702e444a"
        ],
        [
            "have : ~ssrnat.leq (S (S i)) (size s1).",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "contradict Hi0.",
            "VernacExtend",
            "f6fb5f41b0241b5a56abe600b9abb57448382794"
        ],
        [
            "apply SSR_leq in Hi0.",
            "VernacExtend",
            "79eaabe7bad645510a61d87206b8496339fc0181"
        ],
        [
            "intuition.",
            "VernacExtend",
            "ebd9388eeb482972743f9cce5cbddbd85ca5bdfd"
        ],
        [
            "case: (ssrnat.leq (S (S i)) (size s1)) => // _.",
            "VernacExtend",
            "e00fff71ff314c991514fc71c41a3556702e444a"
        ],
        [
            "replace (S i - size s1)%nat with (S (i - size s1)).",
            "VernacExtend",
            "11f82c1d092cfe24cdcc2a595a48728a1c3600f7"
        ],
        [
            "apply H2.",
            "VernacExtend",
            "17101978526a14fb5ad41816224a2fc35cc3d256"
        ],
        [
            "rewrite size_cat in Hi.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "apply not_le in Hi0.",
            "VernacExtend",
            "f30dc3cebd5c0ba9994c77483d4054ff51020c7f"
        ],
        [
            "elim: (size s1) i Hi Hi0 => [ | n IH] /= i Hi Hi0.",
            "VernacExtend",
            "e686a1895f1799b840b76242f931100819a9ad6c"
        ],
        [
            "rewrite -minus_n_O.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "unfold ssrnat.addn, ssrnat.addn_rec in Hi.",
            "VernacExtend",
            "39adc3a4cf86726960c5ab78aee55600ad923ce5"
        ],
        [
            "by rewrite plus_0_l in Hi.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "case: i Hi Hi0 => [ | i] /= Hi Hi0.",
            "VernacExtend",
            "e00fff71ff314c991514fc71c41a3556702e444a"
        ],
        [
            "by apply lt_S_n, lt_n_O in Hi0.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "apply IH ; by intuition.",
            "VernacExtend",
            "76663867dca8fc42d41fea3a4eced3a424e6ebfb"
        ],
        [
            "apply not_le in Hi0.",
            "VernacExtend",
            "f30dc3cebd5c0ba9994c77483d4054ff51020c7f"
        ],
        [
            "rewrite minus_Sn_m ; by intuition.",
            "VernacExtend",
            "f9e2aad1e70f1876566a77bd0af96f52b3b81520"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma sorted_head (s : seq R) i : sorted Rle s -> (i < size s)%nat -> forall x0, head x0 s <= nth x0 s i.",
            "VernacStartTheoremProof",
            "8597db53ec6172f86653b3bfaa38aca67a7fdb42"
        ],
        [
            "case: s => [| h s].",
            "VernacExtend",
            "e00fff71ff314c991514fc71c41a3556702e444a"
        ],
        [
            "move => _ Hi ; by apply lt_n_O in Hi.",
            "VernacExtend",
            "c42ec967bffec70acce34c6295bd61fe6baf57b0"
        ],
        [
            "elim: s h i => [| h0 s IH] h i Hs Hi x0.",
            "VernacExtend",
            "e686a1895f1799b840b76242f931100819a9ad6c"
        ],
        [
            "apply lt_n_Sm_le, le_n_O_eq in Hi ; rewrite -Hi ; apply Rle_refl.",
            "VernacExtend",
            "e11d02565ad93fb7fba6fbd5716ec5332b3d654a"
        ],
        [
            "case: i Hi => [| i] Hi.",
            "VernacExtend",
            "e00fff71ff314c991514fc71c41a3556702e444a"
        ],
        [
            "apply Rle_refl.",
            "VernacExtend",
            "0a60a50353d5cfa9a4ade0240c47d5160d6d423c"
        ],
        [
            "apply Rle_trans with (r2 := head x0 (h0::s)).",
            "VernacExtend",
            "9d3458b3e97d2db77743510cd73e5c17c3cd907a"
        ],
        [
            "apply Hs.",
            "VernacExtend",
            "26038359dfe6b0cb344439243c160e8be398bca9"
        ],
        [
            "apply IH.",
            "VernacExtend",
            "88103d45393d3ee3ab547447d913543854db8cea"
        ],
        [
            "apply Hs.",
            "VernacExtend",
            "26038359dfe6b0cb344439243c160e8be398bca9"
        ],
        [
            "apply lt_S_n, Hi.",
            "VernacExtend",
            "cb813add265ec9cda3f77173b317301fe7ef111b"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma sorted_incr (s : seq R) i j : sorted Rle s -> (i <= j)%nat -> (j < size s)%nat -> forall x0, nth x0 s i <= nth x0 s j.",
            "VernacStartTheoremProof",
            "80a59393ba58ab7dcd178a500966531694a5f9c1"
        ],
        [
            "elim: i j s => [| i IH] j s Hs Hij Hj x0.",
            "VernacExtend",
            "e686a1895f1799b840b76242f931100819a9ad6c"
        ],
        [
            "rewrite nth0 ; by apply sorted_head.",
            "VernacExtend",
            "f9e2aad1e70f1876566a77bd0af96f52b3b81520"
        ],
        [
            "case: j Hij Hj => [| j] Hij Hj.",
            "VernacExtend",
            "e00fff71ff314c991514fc71c41a3556702e444a"
        ],
        [
            "by apply le_Sn_O in Hij.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "case: s Hs Hj => [| h s] Hs Hj.",
            "VernacExtend",
            "e00fff71ff314c991514fc71c41a3556702e444a"
        ],
        [
            "by apply lt_n_O in Hj.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "apply (IH j s) with (x0 := x0) => //.",
            "VernacExtend",
            "3c42b53d0efc26db114b00541ac5e7fcb29e6aeb"
        ],
        [
            "case: (s) Hs => {s Hj} [| h0 s] Hs ; apply Hs.",
            "VernacExtend",
            "e2262bd70476cbf15278fdad8d20b4039fc246b3"
        ],
        [
            "apply le_S_n, Hij.",
            "VernacExtend",
            "e73e8a0190474c2244ae643e8f148b727e75be0f"
        ],
        [
            "apply le_S_n, Hj.",
            "VernacExtend",
            "0c9f70d142c7e38589c03e90efbd7439c2ae5d49"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma sorted_last (s : seq R) i : sorted Rle s -> (i < size s)%nat -> forall x0, nth x0 s i <= last x0 s.",
            "VernacStartTheoremProof",
            "8017502e16b223ab1139963d4812bb033c461ae5"
        ],
        [
            "move => Hs Hi x0 ; rewrite -nth_last.",
            "VernacExtend",
            "057edeb0967475c7ea5e8c98c449ddc5613eddc1"
        ],
        [
            "case: s Hi Hs => [| h s] Hi Hs //.",
            "VernacExtend",
            "e00fff71ff314c991514fc71c41a3556702e444a"
        ],
        [
            "by apply lt_n_O in Hi.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "apply sorted_incr => //.",
            "VernacExtend",
            "3c42b53d0efc26db114b00541ac5e7fcb29e6aeb"
        ],
        [
            "intuition.",
            "VernacExtend",
            "ebd9388eeb482972743f9cce5cbddbd85ca5bdfd"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma sorted_dec (s : seq R) x0 (x : R) : sorted Rle s -> head x0 s <= x <= last x0 s -> {i : nat | nth x0 s i <= x < nth x0 s (S i) /\\ (S (S i) < size s)%nat} + {nth x0 s (size s - 2)%nat <= x <= nth x0 s (size s - 1)%nat}.",
            "VernacStartTheoremProof",
            "fbfc70087d772ccb015ca64192aebf790cb4378a"
        ],
        [
            "case: s => [/= _ Hx| h s] ; simpl minus ; rewrite -?minus_n_O.",
            "VernacExtend",
            "bdff68f06db6b102e3830396982c7ed752a1a72d"
        ],
        [
            "by right.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "case: s => [/= _ Hx| h0 s] ; simpl minus ; rewrite -?minus_n_O.",
            "VernacExtend",
            "bdff68f06db6b102e3830396982c7ed752a1a72d"
        ],
        [
            "by right.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "elim: s h h0 => [/= | h1 s IH] h h0 Hs Hx.",
            "VernacExtend",
            "e686a1895f1799b840b76242f931100819a9ad6c"
        ],
        [
            "by right.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "case: (Rlt_le_dec x h0) => Hx'.",
            "VernacExtend",
            "e00fff71ff314c991514fc71c41a3556702e444a"
        ],
        [
            "left ; exists O => /= ; intuition.",
            "VernacExtend",
            "7e5667f9f3c5c1ccb96b31178551b4e6595d6fb9"
        ],
        [
            "case: (IH h0 h1) => [ | |[i Hi]|Hi].",
            "VernacExtend",
            "e00fff71ff314c991514fc71c41a3556702e444a"
        ],
        [
            "apply Hs.",
            "VernacExtend",
            "26038359dfe6b0cb344439243c160e8be398bca9"
        ],
        [
            "split ; [apply Hx'|apply Hx].",
            "VernacExtend",
            "ab6e318b0491d53fe610bfd554eb3ad00e55c2b7"
        ],
        [
            "left ; exists (S i) => /= ; intuition.",
            "VernacExtend",
            "7e5667f9f3c5c1ccb96b31178551b4e6595d6fb9"
        ],
        [
            "right => /= ; simpl in Hi.",
            "VernacExtend",
            "c534b7421abe189e740b3270f66bf7c179e41003"
        ],
        [
            "by rewrite -minus_n_O in Hi.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma sorted_compat (s : seq R) : sorted Rle s <-> ordered_Rlist (seq2Rlist s).",
            "VernacStartTheoremProof",
            "130eaac77804fb93ad9dfc81bc388e9cca7e8434"
        ],
        [
            "case: s => [| h s].",
            "VernacExtend",
            "e00fff71ff314c991514fc71c41a3556702e444a"
        ],
        [
            "split => // H i /= Hi ; contradict Hi ; apply lt_n_O.",
            "VernacExtend",
            "b09118431c7e1de144bec6b0f6c79c13f26f7c00"
        ],
        [
            "elim: s h => [h | h s IHs h'].",
            "VernacExtend",
            "e686a1895f1799b840b76242f931100819a9ad6c"
        ],
        [
            "split => // H i /= Hi ; contradict Hi ; apply lt_n_O.",
            "VernacExtend",
            "b09118431c7e1de144bec6b0f6c79c13f26f7c00"
        ],
        [
            "split => H.",
            "VernacExtend",
            "3c42b53d0efc26db114b00541ac5e7fcb29e6aeb"
        ],
        [
            "case => [ /= | i] ; rewrite size_compat => Hi ; simpl in Hi.",
            "VernacExtend",
            "fda2446c7868745fd5b040df8f6604660f96c410"
        ],
        [
            "apply H.",
            "VernacExtend",
            "4b47b71ad0f800d57cbdc591d68949e07decb540"
        ],
        [
            "apply (proj1 (IHs h) (proj2 H) i) ; rewrite size_compat /= ; apply lt_S_n => //.",
            "VernacExtend",
            "a7234306a0a29dfceda84dbbd9aa88c7fdb58261"
        ],
        [
            "split.",
            "VernacExtend",
            "55abc140132bd88981001ac656020469a8d503eb"
        ],
        [
            "apply (H O) ; rewrite size_compat /= ; apply lt_O_Sn.",
            "VernacExtend",
            "33fea5430eea10d2b86ef1348ce64b2f8bd7e443"
        ],
        [
            "apply IHs => i ; rewrite size_compat /= => Hi ; apply (H (S i)) ; rewrite size_compat /= ; apply lt_n_S, Hi.",
            "VernacExtend",
            "09fb235eb166e49f65c365433be65e876a4788ae"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Definition seq_step (s : seq R) := foldr Rmax 0 (pairmap (fun x y => Rabs (Rminus y x)) (head 0 s) (behead s)).",
            "VernacDefinition",
            "9ba3e66fc94c814b445678b62bb309797383bc4b"
        ],
        [
            "Lemma seq_step_ge_0 x : (0 <= seq_step x).",
            "VernacStartTheoremProof",
            "2e242951568a9068d1c4bacd2d597f8b15865622"
        ],
        [
            "clear ; unfold seq_step ; case: x => [ | x0 x] //= .",
            "VernacExtend",
            "f1315642e96ae1d1e5dd3d5964de9d7ebe6c7a75"
        ],
        [
            "by apply Rle_refl.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "elim: x x0 => [ | x1 x IH] //= x0.",
            "VernacExtend",
            "e686a1895f1799b840b76242f931100819a9ad6c"
        ],
        [
            "by apply Rle_refl.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "apply Rmax_case.",
            "VernacExtend",
            "cfd24564dbeed7e74b25ea72bdae495929c2ce09"
        ],
        [
            "by apply Rabs_pos.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "by [].",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma seq_step_cat (x y : seq R) : (0 < size x)%nat -> (0 < size y)%nat -> last 0 x = head 0 y -> seq_step (cat x (behead y)) = Rmax (seq_step x) (seq_step y).",
            "VernacStartTheoremProof",
            "52f766db3f5dbd38cf6ed8065eef9a88bc29b288"
        ],
        [
            "case: x => /= [ H | x0 x _].",
            "VernacExtend",
            "e00fff71ff314c991514fc71c41a3556702e444a"
        ],
        [
            "by apply lt_irrefl in H.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "case: y => /= [ H | y0 y _].",
            "VernacExtend",
            "e00fff71ff314c991514fc71c41a3556702e444a"
        ],
        [
            "by apply lt_irrefl in H.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "move => <-.",
            "VernacExtend",
            "b1b2cb7a3a617cba67460b4eca1f04de3c1cc716"
        ],
        [
            "elim: x y x0 {y0} => /= [ | x1 x IH] y x0.",
            "VernacExtend",
            "e686a1895f1799b840b76242f931100819a9ad6c"
        ],
        [
            "rewrite {2}/seq_step /=.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "rewrite /Rmax ; case: Rle_dec (seq_step_ge_0 (x0 :: y)) => // _ _.",
            "VernacExtend",
            "712d339e99ee17eb7d5033e19ac614eb3ca6b532"
        ],
        [
            "unfold seq_step ; simpl.",
            "VernacExtend",
            "de43df244ceebb5a5604b2efa80c243c3a43295e"
        ],
        [
            "rewrite -Rmax_assoc.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "apply f_equal.",
            "VernacExtend",
            "ba856cbef3c8e84dcef77c91c8515b497874875b"
        ],
        [
            "by apply IH.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma seq_step_rev (l : seq R) : seq_step (rev l) = seq_step l.",
            "VernacStartTheoremProof",
            "e0bf9d1a247d07124de405d77ff62db210b08984"
        ],
        [
            "rewrite /seq_step.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "rewrite head_rev behead_rev /=.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "case: l => [ | x0 l] //=.",
            "VernacExtend",
            "e00fff71ff314c991514fc71c41a3556702e444a"
        ],
        [
            "case: l => [ | x1 l] //=.",
            "VernacExtend",
            "e00fff71ff314c991514fc71c41a3556702e444a"
        ],
        [
            "rewrite rev_cons.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "case: l => [ | x2 l] //=.",
            "VernacExtend",
            "e00fff71ff314c991514fc71c41a3556702e444a"
        ],
        [
            "by rewrite -Rabs_Ropp Ropp_minus_distr'.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "rewrite rev_cons pairmap_rcons foldr_rcons.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "rewrite -Rabs_Ropp Ropp_minus_distr'.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "generalize (Rabs (x1 - x0)) ; clear.",
            "VernacExtend",
            "20bb70d9bc81fdedad16034e43bb63ccd24d3f95"
        ],
        [
            "elim: l x1 x2 => [ | x2 l IH] x0 x1 r //=.",
            "VernacExtend",
            "e686a1895f1799b840b76242f931100819a9ad6c"
        ],
        [
            "rewrite -Rabs_Ropp Ropp_minus_distr' !Rmax_assoc.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "apply f_equal2 => //.",
            "VernacExtend",
            "3c42b53d0efc26db114b00541ac5e7fcb29e6aeb"
        ],
        [
            "by apply Rmax_comm.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "rewrite rev_cons pairmap_rcons foldr_rcons.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "rewrite -Rabs_Ropp Ropp_minus_distr' Rmax_assoc IH.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "by rewrite (Rmax_comm _ r) !Rmax_assoc.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma nth_le_seq_step x0 (l : seq R) (i : nat) : (S i < size l)%nat -> Rabs (nth x0 l (S i) - nth x0 l i) <= seq_step l.",
            "VernacStartTheoremProof",
            "64b3e168383d4ccfd926b0b1cf8562158e283d7c"
        ],
        [
            "elim: i l => [ | i IH] ; case => [ | x1 l] /= Hi.",
            "VernacExtend",
            "df63f96bedbb0673aecb42521d90011325a86c94"
        ],
        [
            "by apply lt_n_O in Hi.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "apply lt_S_n in Hi.",
            "VernacExtend",
            "0cad6059d5da24c56deb82801921b4b1e3322a86"
        ],
        [
            "destruct l as [ | x2 l].",
            "VernacExtend",
            "eddf288e46b0e2d780262188bef3c81a29642ecf"
        ],
        [
            "by apply lt_n_O in Hi.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "by apply Rmax_l.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "by apply lt_n_O in Hi.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "apply lt_S_n in Hi.",
            "VernacExtend",
            "0cad6059d5da24c56deb82801921b4b1e3322a86"
        ],
        [
            "move: (IH l Hi).",
            "VernacExtend",
            "b1b2cb7a3a617cba67460b4eca1f04de3c1cc716"
        ],
        [
            "destruct l as [ | x2 l] ; simpl.",
            "VernacExtend",
            "fd42509461988250fd1c1b34edc74ee4ba82b020"
        ],
        [
            "by apply lt_n_O in Hi.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "simpl in Hi ; apply lt_S_n in Hi.",
            "VernacExtend",
            "8687c5e8c6fe475b2df73f02f238395e438ec371"
        ],
        [
            "move => {IH} IH.",
            "VernacExtend",
            "b1b2cb7a3a617cba67460b4eca1f04de3c1cc716"
        ],
        [
            "eapply Rle_trans.",
            "VernacExtend",
            "ec6f33953112c5bac5bfe07c5c0b34597dc6eaba"
        ],
        [
            "by apply IH.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "by apply Rmax_r.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Section SF_seq.",
            "VernacBeginSection",
            "0c73c613d6ae7b631af403708e738c390f6febd8"
        ],
        [
            "Context {T : Type}.",
            "VernacContext",
            "be9a7a6cbe25485b314331383c8d6eddddd780fd"
        ],
        [
            "Record SF_seq := mkSF_seq {SF_h : R ; SF_t : seq (R * T)}.",
            "VernacInductive",
            "7e0d09986870c871f7d232322c21ae7d437d2e03"
        ],
        [
            "Definition SF_lx (s : SF_seq) : seq R := (SF_h s)::(unzip1 (SF_t s)).",
            "VernacDefinition",
            "6b30357ef41a6739c16327130426960b7acd5815"
        ],
        [
            "Definition SF_ly (s : SF_seq) : seq T := unzip2 (SF_t s).",
            "VernacDefinition",
            "37a541e7b08e16002cd358875d8ef71fc4f4fc51"
        ],
        [
            "Definition SF_make (lx : seq R) (ly : seq T) (Hs : size lx = S (size ly)) : SF_seq := mkSF_seq (head 0 lx) (zip (behead lx) ly).",
            "VernacDefinition",
            "cb02119cb3e0dd991da72c457360ade60c60dd8d"
        ],
        [
            "Lemma SF_size_lx_ly (s : SF_seq) : size (SF_lx s) = S (size (SF_ly s)).",
            "VernacStartTheoremProof",
            "bcbe9487eb685e33b0cbb473eb1091e9f0be1da6"
        ],
        [
            "case: s => sh st ; rewrite /SF_lx /SF_ly /= ; elim: st => //= t s -> //.",
            "VernacExtend",
            "8189461404ecf5e3677f78a5f600bec6aba20cff"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma SF_seq_bij (s : SF_seq) : SF_make (SF_lx s) (SF_ly s) (SF_size_lx_ly s) = s.",
            "VernacStartTheoremProof",
            "6021959cb941cbcbf43359c1fbbaa70727a915c4"
        ],
        [
            "case: s => sh st ; by rewrite /SF_make (zip_unzip st).",
            "VernacExtend",
            "14b141a2d70f00681f703015bc169478d399fe62"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma SF_seq_bij_lx (lx : seq R) (ly : seq T) (Hs : size lx = S (size ly)) : SF_lx (SF_make lx ly Hs) = lx.",
            "VernacStartTheoremProof",
            "3d34b6d52019aa2491fc3d7b9f747faae8f74e00"
        ],
        [
            "case: lx Hs => // x lx Hs ; rewrite /SF_make / SF_lx unzip1_zip //= ; apply SSR_leq, le_S_n ; rewrite -Hs => //.",
            "VernacExtend",
            "28c746bbd4ac6a3a1f4434640f48fdbeb8610f98"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma SF_seq_bij_ly (lx : seq R) (ly : seq T) (Hs : size lx = S (size ly)) : SF_ly (SF_make lx ly Hs) = ly.",
            "VernacStartTheoremProof",
            "3c9020f15facbd89899f291792c3b91a9fab77e3"
        ],
        [
            "case: lx Hs => // x lx Hs ; rewrite /SF_make / SF_ly unzip2_zip //= ; apply SSR_leq, le_S_n ; rewrite -Hs => //.",
            "VernacExtend",
            "28c746bbd4ac6a3a1f4434640f48fdbeb8610f98"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Definition SF_nil (x0 : R) : SF_seq := mkSF_seq x0 [::].",
            "VernacDefinition",
            "d78a879c94a6896f8dfe408e10b683676cdb2a74"
        ],
        [
            "Definition SF_cons (h : R*T) (s : SF_seq) := mkSF_seq (fst h) ((SF_h s,snd h)::(SF_t s)).",
            "VernacDefinition",
            "d736a430166ac950849e5d63870836f133f6fa91"
        ],
        [
            "Definition SF_rcons (s : SF_seq) (t : R*T) := mkSF_seq (SF_h s) (rcons (SF_t s) t).",
            "VernacDefinition",
            "543817f2a5d3eb3fb97f9acd7a9a36a0c376900d"
        ],
        [
            "Lemma SF_cons_dec (P : SF_seq -> Type) : (forall x0 : R, P (SF_nil x0)) -> (forall h s, P (SF_cons h s)) -> (forall s, P s).",
            "VernacStartTheoremProof",
            "d777a7035a28ef36ed891ae3fe65ca34f308166e"
        ],
        [
            "move => Hnil Hcons [sh st] ; case: st => [| h sf].",
            "VernacExtend",
            "a01b3d93f426ff68d360351709a5fa5af822af32"
        ],
        [
            "apply Hnil.",
            "VernacExtend",
            "df83f7464b2567d6064b2cb39658dcd0bcc15bd3"
        ],
        [
            "move: (Hcons (sh,snd h) (mkSF_seq (fst h) sf)) => {Hcons} ; rewrite /SF_cons -surjective_pairing //=.",
            "VernacExtend",
            "057edeb0967475c7ea5e8c98c449ddc5613eddc1"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma SF_cons_ind (P : SF_seq -> Type) : (forall x0 : R, P (SF_nil x0)) -> (forall h s, P s -> P (SF_cons h s)) -> (forall s, P s).",
            "VernacStartTheoremProof",
            "6756f24bc9ad95547690e66ab28a6ef529e03a7d"
        ],
        [
            "move => Hnil Hcons [sh st] ; elim: st sh => [sh |h sf IHst sh].",
            "VernacExtend",
            "06880003f1108b2eb418688c7bc6bf1013cf0e4c"
        ],
        [
            "apply Hnil.",
            "VernacExtend",
            "df83f7464b2567d6064b2cb39658dcd0bcc15bd3"
        ],
        [
            "move: (IHst (fst h)) => {IHst} IHst.",
            "VernacExtend",
            "b1b2cb7a3a617cba67460b4eca1f04de3c1cc716"
        ],
        [
            "move: (Hcons (sh,snd h) (mkSF_seq (fst h) sf) IHst) => {Hcons} ; rewrite /SF_cons -surjective_pairing //=.",
            "VernacExtend",
            "057edeb0967475c7ea5e8c98c449ddc5613eddc1"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma SF_rcons_dec (P : SF_seq -> Type) : (forall x0 : R, P (SF_nil x0)) -> (forall s t, P (SF_rcons s t)) -> (forall s, P s).",
            "VernacStartTheoremProof",
            "1a805011271eecce36471dc62b937eb101353811"
        ],
        [
            "move => Hnil Hrcons [sh st] ; move: st ; apply rcons_dec => [| st t].",
            "VernacExtend",
            "59558e378570fadf944f573c466a34c761bc9b23"
        ],
        [
            "apply Hnil.",
            "VernacExtend",
            "df83f7464b2567d6064b2cb39658dcd0bcc15bd3"
        ],
        [
            "apply (Hrcons (mkSF_seq sh st) t).",
            "VernacExtend",
            "f09fc2622e62f1bff850a3cc5ba1ff4385137df2"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma SF_rcons_ind (P : SF_seq -> Type) : (forall x0 : R, P (SF_nil x0)) -> (forall s t, P s -> P (SF_rcons s t)) -> (forall s, P s).",
            "VernacStartTheoremProof",
            "2829832d26f694afff4016e2333c70f6b26e6456"
        ],
        [
            "move => Hnil Hrcons [sh st] ; move: st sh ; apply (rcons_ind (fun st => forall sh, P {| SF_h := sh; SF_t := st |})) => [sh | st t IHst sh].",
            "VernacExtend",
            "59558e378570fadf944f573c466a34c761bc9b23"
        ],
        [
            "apply Hnil.",
            "VernacExtend",
            "df83f7464b2567d6064b2cb39658dcd0bcc15bd3"
        ],
        [
            "apply (Hrcons (mkSF_seq sh st) t) => //.",
            "VernacExtend",
            "3c42b53d0efc26db114b00541ac5e7fcb29e6aeb"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma SF_cons_rcons (h : R*T) (s : SF_seq) (l : R*T) : SF_cons h (SF_rcons s l) = SF_rcons (SF_cons h s) l.",
            "VernacStartTheoremProof",
            "4207c38a22fc69b7817b5038f55a5a0fd81f6463"
        ],
        [
            "case: h => hx hy ; case: l => lx ly ; case: s => sh st //.",
            "VernacExtend",
            "d4127243a8edd835b38ce1b186629bc51391e41f"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma SF_lx_nil (x0 : R) : SF_lx (SF_nil x0) = [:: x0].",
            "VernacStartTheoremProof",
            "ca676778591af7747534b401242c8257858cdf7b"
        ],
        [
            "by [].",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma SF_ly_nil (x0 : R) : SF_ly (SF_nil x0) = [::].",
            "VernacStartTheoremProof",
            "99587663090e0623c5f9242e00fa77de52507036"
        ],
        [
            "by [].",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma SF_lx_cons (h : R*T) (s : SF_seq) : SF_lx (SF_cons h s) = (fst h) :: (SF_lx s).",
            "VernacStartTheoremProof",
            "4545757bb6a45b4b2fa1b08b29bb8e584657bfa6"
        ],
        [
            "by [].",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma SF_ly_cons (h : R*T) (s : SF_seq) : SF_ly (SF_cons h s) = (snd h) :: (SF_ly s).",
            "VernacStartTheoremProof",
            "1b454c8d3003d691c036ea7b2557d23b45ec7015"
        ],
        [
            "by [].",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma SF_lx_rcons (s : SF_seq) (h : R*T) : SF_lx (SF_rcons s h) = rcons (SF_lx s) (fst h).",
            "VernacStartTheoremProof",
            "6d20faedbf2b9612c98d88f98c232be963f60078"
        ],
        [
            "case: s => sh st ; rewrite /SF_lx /SF_rcons /= ; elim: st sh => // [[x y] st] IHst sh /= ; by rewrite (IHst x).",
            "VernacExtend",
            "afca34b85edc9155d6ad6d1115eccdf28b0585e8"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma SF_ly_rcons (s : SF_seq) (h : R*T) : SF_ly (SF_rcons s h) = rcons (SF_ly s) (snd h).",
            "VernacStartTheoremProof",
            "bb7beb2c4ed2dce6db9667270f292349fd6a2fa4"
        ],
        [
            "case: s => sh st ; rewrite /SF_ly /SF_rcons /= ; elim: st sh => // [[x y] st] IHst sh /= ; by rewrite (IHst x).",
            "VernacExtend",
            "afca34b85edc9155d6ad6d1115eccdf28b0585e8"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma SF_lx_surj (s s0 : SF_seq) : s = s0 -> SF_lx s = SF_lx s0.",
            "VernacStartTheoremProof",
            "b3f7614ba1449fddda9fcb1c3a2e165f53b489b3"
        ],
        [
            "by move => ->.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma SF_ly_surj (s s0 : SF_seq) : s = s0 -> SF_ly s = SF_ly s0.",
            "VernacStartTheoremProof",
            "18b9565560f002fbe1700f6c9054026937255370"
        ],
        [
            "by move => ->.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma SF_lx_ly_inj (s s0 : SF_seq) : SF_lx s = SF_lx s0 -> SF_ly s = SF_ly s0 -> s = s0.",
            "VernacStartTheoremProof",
            "740bc332cb1b08c830e51baf4610040c4e8eaf4a"
        ],
        [
            "move: s0 ; apply SF_cons_ind with (s := s) => {s} [x | h s IH] s0 ; apply SF_cons_dec with (s := s0) => {s0} [x0 | h0 s0] Hx Hy //.",
            "VernacExtend",
            "03f33e1f1d3f7be53c513536df72561d1786f135"
        ],
        [
            "rewrite !SF_lx_nil in Hx.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "replace x with (head 0 ([::x])) by intuition ; by rewrite Hx.",
            "VernacExtend",
            "48ee47fdd153465bc2978404739aca00594e52df"
        ],
        [
            "rewrite !SF_lx_cons in Hx ; rewrite !SF_ly_cons in Hy.",
            "VernacExtend",
            "2194fcb4d6d52cbae24a29f7ff14a3997f1912fd"
        ],
        [
            "replace h with (head (fst h) (fst h :: SF_lx s),head (snd h) (snd h :: SF_ly s)) ; [ rewrite Hx Hy (IH s0) //= | move => /= ; by apply injective_projections].",
            "VernacExtend",
            "8ddff60617215c77a9bb988f0bd5b5f3a2e4b207"
        ],
        [
            "replace (SF_lx s) with (behead (fst h :: SF_lx s)) by intuition ; by rewrite Hx.",
            "VernacExtend",
            "7d24a75ecce4da8a0c36679b7257fdb9ec7b720e"
        ],
        [
            "replace (SF_ly s) with (behead (snd h :: SF_ly s)) by intuition ; by rewrite Hy.",
            "VernacExtend",
            "311828b358136f09901dc623f8c00ff2f1a4fb43"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Definition SF_size (s : SF_seq) := size (SF_t s).",
            "VernacDefinition",
            "1c5a0a9a4feaa92dc1d2796af50fa21e271f0e64"
        ],
        [
            "Lemma SF_size_cons (h : R*T) (s : SF_seq) : SF_size (SF_cons h s) = S (SF_size s).",
            "VernacStartTheoremProof",
            "6fa8b63dbf6e43a6856c46e1276ee021c4a8e846"
        ],
        [
            "rewrite /SF_cons /SF_size //=.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma SF_size_rcons (s : SF_seq) (t : R*T) : SF_size (SF_rcons s t) = S (SF_size s).",
            "VernacStartTheoremProof",
            "68f2c4a4a64f0a274eb107c769cf556c706af31e"
        ],
        [
            "rewrite /SF_rcons /SF_size size_rcons //=.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma SF_size_lx (s : SF_seq) : size (SF_lx s) = S (SF_size s).",
            "VernacStartTheoremProof",
            "4400bc5e55b876231eaf55260c7a366157f49411"
        ],
        [
            "case: s => sh st ; rewrite /SF_size /= ; elim: st => //= _ st -> //.",
            "VernacExtend",
            "8189461404ecf5e3677f78a5f600bec6aba20cff"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma SF_size_ly (s : SF_seq) : size (SF_ly s) = SF_size s.",
            "VernacStartTheoremProof",
            "b9bc6023e533c2fe04156d7523c33ac469a01028"
        ],
        [
            "case: s => sh st ; rewrite /SF_size /= ; elim: st => //= _ st -> //.",
            "VernacExtend",
            "8189461404ecf5e3677f78a5f600bec6aba20cff"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma SF_rev_0 (s : SF_seq) : size (rev (SF_lx s)) = S (size (rev (SF_ly s))).",
            "VernacStartTheoremProof",
            "0774dbfd934425a0f11c5beae6820ad163d9ccbd"
        ],
        [
            "by rewrite ?size_rev SF_size_lx SF_size_ly.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Definition SF_rev (s : SF_seq) : SF_seq := SF_make (rev (SF_lx s)) (rev (SF_ly s)) (SF_rev_0 s).",
            "VernacDefinition",
            "1143af6fdbafe265fa701ab04c904348e95622ba"
        ],
        [
            "Lemma SF_rev_cons (h : R*T) (s : SF_seq) : SF_rev (SF_cons h s) = SF_rcons (SF_rev s) h.",
            "VernacStartTheoremProof",
            "d574fc0d72686a527a41a3c99873a22459762c56"
        ],
        [
            "apply SF_lx_ly_inj.",
            "VernacExtend",
            "ff231a2248e3878931441193a4b98a6505d090b2"
        ],
        [
            "by rewrite SF_lx_rcons !SF_seq_bij_lx SF_lx_cons rev_cons.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "by rewrite SF_ly_rcons !SF_seq_bij_ly SF_ly_cons rev_cons.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma SF_rev_rcons (s : SF_seq) (t : R*T) : SF_rev (SF_rcons s t) = SF_cons t (SF_rev s).",
            "VernacStartTheoremProof",
            "a6357e9a27a5e85e9877049b2d63440edb09d787"
        ],
        [
            "apply SF_lx_ly_inj.",
            "VernacExtend",
            "ff231a2248e3878931441193a4b98a6505d090b2"
        ],
        [
            "by rewrite SF_lx_cons !SF_seq_bij_lx SF_lx_rcons rev_rcons.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "by rewrite SF_ly_cons !SF_seq_bij_ly SF_ly_rcons rev_rcons.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma SF_rev_invol (s : SF_seq) : SF_rev (SF_rev s) = s.",
            "VernacStartTheoremProof",
            "15672b31d08306cd068a30993726a1bbd575c58a"
        ],
        [
            "apply SF_lx_ly_inj.",
            "VernacExtend",
            "ff231a2248e3878931441193a4b98a6505d090b2"
        ],
        [
            "by rewrite /SF_rev ?SF_seq_bij_lx revK.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "by rewrite /SF_rev ?SF_seq_bij_ly revK.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma SF_lx_rev (s : SF_seq) : SF_lx (SF_rev s) = rev (SF_lx s).",
            "VernacStartTheoremProof",
            "798e799be8069852a61d9445b172b39b258136c7"
        ],
        [
            "by rewrite /SF_rev ?SF_seq_bij_lx.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma SF_ly_rev (s : SF_seq) : SF_ly (SF_rev s) = rev (SF_ly s).",
            "VernacStartTheoremProof",
            "102d7256b882bfca6cf197a18c9ada3044639c50"
        ],
        [
            "by rewrite /SF_rev ?SF_seq_bij_ly.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma SF_size_rev (s : SF_seq) : SF_size (SF_rev s) = SF_size s.",
            "VernacStartTheoremProof",
            "3025c88458a5bdf5de9cab2505e6f57f92cfc3d5"
        ],
        [
            "by rewrite -?SF_size_ly SF_ly_rev size_rev.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma SF_rev_surj (s s0 : SF_seq) : s = s0 -> SF_rev s = SF_rev s0.",
            "VernacStartTheoremProof",
            "1e2518e6c402893357fbe80d46708e49fb36b878"
        ],
        [
            "by move => ->.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma SF_rev_inj (s s0 : SF_seq) : SF_rev s = SF_rev s0 -> s = s0.",
            "VernacStartTheoremProof",
            "87051cfc95e42e2654df384a09f0ad2c1262a40f"
        ],
        [
            "move => H ; by rewrite -(SF_rev_invol s) -(SF_rev_invol s0) H.",
            "VernacExtend",
            "c42ec967bffec70acce34c6295bd61fe6baf57b0"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Definition SF_cat (x y : SF_seq) := mkSF_seq (SF_h x) ((SF_t x) ++ (SF_t y)).",
            "VernacDefinition",
            "a14400c25d3f10f7a19a01d729d5cfafdaaaa4d3"
        ],
        [
            "Lemma SF_lx_cat (x y : SF_seq) : SF_lx (SF_cat x y) = (SF_lx x) ++ (behead (SF_lx y)).",
            "VernacStartTheoremProof",
            "784711eed25cadc4e0f5e6da1fc08769207ddee8"
        ],
        [
            "unfold SF_cat, SF_lx ; simpl.",
            "VernacExtend",
            "d261081c78a8e5d06aff71eee534e2bd018cb572"
        ],
        [
            "apply f_equal.",
            "VernacExtend",
            "ba856cbef3c8e84dcef77c91c8515b497874875b"
        ],
        [
            "by elim: (SF_t x) => //= t h ->.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma SF_last_cat (x y : SF_seq) : last (SF_h x) (SF_lx x) = head (SF_h y) (SF_lx y) -> last (SF_h (SF_cat x y)) (SF_lx (SF_cat x y)) = (last (SF_h y) (SF_lx y)).",
            "VernacStartTheoremProof",
            "86694533affd46e93e5cb7c4a3d709c51d6fa763"
        ],
        [
            "rewrite SF_lx_cat.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "unfold SF_cat, SF_lx ; simpl => <- /=.",
            "VernacExtend",
            "6f0bf6ad3da18914e7e1ff126c92dad2fa7f45a1"
        ],
        [
            "elim: (SF_t x) (SF_h x) => //= {x} x1 x x0.",
            "VernacExtend",
            "e686a1895f1799b840b76242f931100819a9ad6c"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma SF_cons_cat x0 (x y : SF_seq) : SF_cons x0 (SF_cat x y) = SF_cat (SF_cons x0 x) y.",
            "VernacStartTheoremProof",
            "8e0864ca6e1473629d05874e71f5026a2edddc42"
        ],
        [
            "reflexivity.",
            "VernacExtend",
            "5cd1ae044f26cd6d89a5a5147c1d4fc5fc719d83"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Definition SF_head (y0 : T) (s : SF_seq) := (SF_h s, head y0 (SF_ly s)).",
            "VernacDefinition",
            "f8e9ad68a1b2ad8ceb2a167d46d9c24d785c73cf"
        ],
        [
            "Definition SF_behead (s : SF_seq) := mkSF_seq (head (SF_h s) (unzip1 (SF_t s))) (behead (SF_t s)).",
            "VernacDefinition",
            "d8db7774f464cc765474d0cfc681c4e4d81c4b35"
        ],
        [
            "Definition SF_last y0 (s : SF_seq) : (R*T) := last (SF_h s,y0) (SF_t s).",
            "VernacDefinition",
            "0597359006c15654aa11c3b5e07a54e5ec39be3c"
        ],
        [
            "Definition SF_belast (s : SF_seq) : SF_seq := mkSF_seq (SF_h s) (Rcomplements.belast (SF_t s)).",
            "VernacDefinition",
            "a46f83e227582ab9ac4dbc1fe322aea081123262"
        ],
        [
            "Lemma SF_last_lx x0 (s : SF_seq) : fst (SF_last x0 s) = last 0 (SF_lx s).",
            "VernacStartTheoremProof",
            "1882d72bca9141b897698ad4eae5ac073e06e92b"
        ],
        [
            "rewrite /SF_last /=.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "apply sym_eq ; by apply last_unzip1.",
            "VernacExtend",
            "f1d0e1d719aec66edd7015c82f8a0553ded26e74"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Definition SF_sorted (Ord : R -> R -> Prop) (s : SF_seq) := sorted Ord (SF_lx s).",
            "VernacDefinition",
            "3d0480ac1435da9ca5544ee7d016f9c87af9bc35"
        ],
        [
            "End SF_seq.",
            "VernacEndSegment",
            "ff629aba5df08e15dae1528886e9132ee6f2a423"
        ],
        [
            "Section SF_map.",
            "VernacBeginSection",
            "a9595ba58637afb4db7244a5439949317f8a31d0"
        ],
        [
            "Context {T T0 : Type}.",
            "VernacContext",
            "ee5dd9eec754fa034d8e548b0a395902a765def4"
        ],
        [
            "Definition SF_map (f : T -> T0) (s : SF_seq) : SF_seq := mkSF_seq (SF_h s) (map (fun x => (fst x,f (snd x))) (SF_t s)).",
            "VernacDefinition",
            "d7075d3cd9271c02eeb281b8e15f26a9500e6ce0"
        ],
        [
            "Lemma SF_map_cons (f : T -> T0) (h : R*T) (s : SF_seq) : SF_map f (SF_cons h s) = SF_cons (fst h, f (snd h)) (SF_map f s).",
            "VernacStartTheoremProof",
            "800120369440059c76cabeede799ee6e47501061"
        ],
        [
            "case: s => sh ; elim => // h st ; rewrite /SF_map => //.",
            "VernacExtend",
            "58b3fa15c8632d89a426c1550da6d1e6e29a238b"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma SF_map_rcons (f : T -> T0) (s : SF_seq) (h : R*T) : SF_map f (SF_rcons s h) = SF_rcons (SF_map f s) (fst h, f (snd h)).",
            "VernacStartTheoremProof",
            "46bbc66c0c8be544e96a3e2762a0bff6b423ac6f"
        ],
        [
            "move: h ; apply SF_cons_ind with (s := s) => {s} [x0 | h0 s IH] //= h.",
            "VernacExtend",
            "8261237f0cda1915a4077c28869831c5329103ce"
        ],
        [
            "rewrite SF_map_cons.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "replace (SF_rcons (SF_cons h0 s) h) with (SF_cons h0 (SF_rcons s h)) by auto.",
            "VernacExtend",
            "a8017827f74d7bf51027e8484a84ee328601a162"
        ],
        [
            "rewrite SF_map_cons.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "rewrite IH.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "auto.",
            "VernacExtend",
            "1f09da0addd069b3b65326f8c71967acc1e985af"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma SF_map_lx (f : T -> T0) (s : SF_seq) : SF_lx (SF_map f s) = SF_lx s.",
            "VernacStartTheoremProof",
            "141158e6361d67f008eea7b98d79d56699b5a3ef"
        ],
        [
            "apply SF_cons_ind with (s := s) => {s} //= h s IH ; by rewrite SF_map_cons ?SF_lx_cons IH.",
            "VernacExtend",
            "7bd77ea96f784074e3b1d448260a45dd4191485f"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma SF_map_ly (f : T -> T0) (s : SF_seq) : SF_ly (SF_map f s) = map f (SF_ly s).",
            "VernacStartTheoremProof",
            "8e03ab8273159c8163143fb0bb9388874073ab58"
        ],
        [
            "apply SF_cons_ind with (s := s) => {s} //= h s IH ; by rewrite SF_map_cons ?SF_ly_cons IH.",
            "VernacExtend",
            "7bd77ea96f784074e3b1d448260a45dd4191485f"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma SF_map_rev (f : T -> T0) s : SF_rev (SF_map f s) = SF_map f (SF_rev s).",
            "VernacStartTheoremProof",
            "f5a7691485b4ed3cb9af4bc7871671203d2d4541"
        ],
        [
            "apply SF_lx_ly_inj.",
            "VernacExtend",
            "ff231a2248e3878931441193a4b98a6505d090b2"
        ],
        [
            "by rewrite SF_lx_rev ?SF_map_lx ?SF_lx_rev.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "by rewrite SF_ly_rev ?SF_map_ly ?SF_ly_rev map_rev.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma SF_map_sort (f : T -> T0) (s : SF_seq) (Ord : R -> R -> Prop) : SF_sorted Ord s -> SF_sorted Ord (SF_map f s).",
            "VernacStartTheoremProof",
            "cc9a6a5432a50c3f478e9057a8c89f991f7893d4"
        ],
        [
            "unfold SF_sorted ; apply SF_cons_ind with (s := s) => {s} /= [x0 | [x0 _] /= s IH] Hs.",
            "VernacExtend",
            "9d8d73de1fa171731e6c8da0d5c5594f36f527b2"
        ],
        [
            "by [].",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "split.",
            "VernacExtend",
            "55abc140132bd88981001ac656020469a8d503eb"
        ],
        [
            "by apply Hs.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "now apply IH.",
            "VernacExtend",
            "f55d33d07a7d04fb33e00d25db71d556dde4e829"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma SF_size_map (f : T -> T0) s : SF_size (SF_map f s) = SF_size s.",
            "VernacStartTheoremProof",
            "3343c940625596610c66e7c89be247325d755801"
        ],
        [
            "by rewrite -!SF_size_ly SF_map_ly size_map.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "End SF_map.",
            "VernacEndSegment",
            "d76dcf2790c18c7a55f0f42b64b0489435047b25"
        ],
        [
            "Definition pointed_subdiv (ptd : @SF_seq R) := forall i : nat, (i < SF_size ptd)%nat -> nth 0 (SF_lx ptd) i <= nth 0 (SF_ly ptd) i <= nth 0 (SF_lx ptd) (S i).",
            "VernacDefinition",
            "ba54498db05805d7b928676548c922964ba7c4f1"
        ],
        [
            "Lemma ptd_cons h s : pointed_subdiv (SF_cons h s) -> pointed_subdiv s.",
            "VernacStartTheoremProof",
            "0d358d5a6a6df2b835edbd8cc84638d5341e47be"
        ],
        [
            "move => H i Hi ; apply (H (S i)) ; rewrite SF_size_cons ; intuition.",
            "VernacExtend",
            "359f180a1412c9b180a26fe257111b23551f20ef"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma ptd_sort ptd : pointed_subdiv ptd -> SF_sorted Rle ptd.",
            "VernacStartTheoremProof",
            "7f297f690855eddaff739c8286de12d56a4d9460"
        ],
        [
            "apply SF_cons_ind with (s := ptd) => {ptd} [x0 | [x0 y0] ptd] ; [ | apply SF_cons_dec with (s := ptd) => {ptd} [ x1 | [x1 y1] ptd] IH] => Hptd ; try split => //=.",
            "VernacExtend",
            "04381b69ebb3270a80416418741bc37afce5b84c"
        ],
        [
            "apply Rle_trans with y0 ; apply (Hptd O) ; rewrite SF_size_cons ; apply lt_O_Sn.",
            "VernacExtend",
            "38196c7363878863765c84c6fceeb7278835e2b1"
        ],
        [
            "apply Rle_trans with y0 ; apply (Hptd O) ; rewrite SF_size_cons ; apply lt_O_Sn.",
            "VernacExtend",
            "38196c7363878863765c84c6fceeb7278835e2b1"
        ],
        [
            "apply IH, (ptd_cons (x0,y0)) => //.",
            "VernacExtend",
            "3c42b53d0efc26db114b00541ac5e7fcb29e6aeb"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma ptd_sort' ptd : pointed_subdiv ptd -> sorted Rle (SF_ly ptd).",
            "VernacStartTheoremProof",
            "c63ef0da6d7a3440c94bc3cd7136b525cace4568"
        ],
        [
            "apply SF_cons_ind with (s := ptd) => {ptd} [x0 | [x0 y0] ptd] ; [ | apply SF_cons_dec with (s := ptd) => {ptd} [ x1 | [x1 y1] ptd] IH] => Hptd ; try split.",
            "VernacExtend",
            "2b1c086339a94646c91c933d66c36c45ddf409aa"
        ],
        [
            "apply Rle_trans with x1 ; [apply (Hptd O) | apply (Hptd 1%nat)] ; rewrite ?SF_size_cons ; repeat apply lt_n_S ; apply lt_O_Sn.",
            "VernacExtend",
            "9a09893faa160ccffb457fa0905e7251848b38c6"
        ],
        [
            "apply IH, (ptd_cons (x0,y0)) => //.",
            "VernacExtend",
            "3c42b53d0efc26db114b00541ac5e7fcb29e6aeb"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma SF_cat_pointed (x y : SF_seq) : last (SF_h x) (SF_lx x) = head (SF_h y) (SF_lx y) -> pointed_subdiv x -> pointed_subdiv y -> pointed_subdiv (SF_cat x y).",
            "VernacStartTheoremProof",
            "acc6d5cbed48d4dcc8ba9ad8e4a1202f445a4ef7"
        ],
        [
            "intros Hxy Hx Hy.",
            "VernacExtend",
            "2ffb29574b39ad3a67241508d5e9d4dd26c316b1"
        ],
        [
            "move: Hxy Hx.",
            "VernacExtend",
            "b1b2cb7a3a617cba67460b4eca1f04de3c1cc716"
        ],
        [
            "apply (SF_cons_ind (fun x => last (SF_h x) (SF_lx x) = head (SF_h y) (SF_lx y) -> pointed_subdiv x -> pointed_subdiv (SF_cat x y))) => {x} /= [x0 | x0 x IH] Hxy Hx.",
            "VernacExtend",
            "3c42b53d0efc26db114b00541ac5e7fcb29e6aeb"
        ],
        [
            "rewrite Hxy.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "by apply Hy.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "rewrite -SF_cons_cat.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "case => [ | i] Hi.",
            "VernacExtend",
            "e00fff71ff314c991514fc71c41a3556702e444a"
        ],
        [
            "apply (Hx O), lt_O_Sn.",
            "VernacExtend",
            "6ea7ccd56f32bc70355316d63af141454aa8e205"
        ],
        [
            "apply IH =>//.",
            "VernacExtend",
            "3c42b53d0efc26db114b00541ac5e7fcb29e6aeb"
        ],
        [
            "by apply ptd_cons with x0.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "by apply lt_S_n, Hi.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Fixpoint seq_cut_down (s : seq (R*R)) (x : R) : seq (R*R) := match s with | [::] => [:: (x,x)] | h :: t => match Rle_dec (fst h) x with | right _ => [:: (x,Rmin (snd h) x)] | left _ => h :: (seq_cut_down t x) end end.",
            "VernacFixpoint",
            "8536bf2d7df80c8fd43c6f1b9aa248a6a5e69db8"
        ],
        [
            "Fixpoint seq_cut_up (s : seq (R*R)) (x : R) : seq (R*R) := match s with | [::] => [:: (x,x)] | h :: t => match Rle_dec (fst h) x with | right _ => (x,x)::(fst h,Rmax (snd h) x)::t | left _ => seq_cut_up t x end end.",
            "VernacFixpoint",
            "f0bff3bac16b85f67d4593548ce6fc8f1b99bee1"
        ],
        [
            "Definition SF_cut_down (sf : @SF_seq R) (x : R) := let s := seq_cut_down ((SF_h sf,SF_h sf) :: (SF_t sf)) x in mkSF_seq (fst (head (SF_h sf,SF_h sf) s)) (behead s).",
            "VernacDefinition",
            "2170b47f51f1a759bac28459fad317c94c7010e5"
        ],
        [
            "Definition SF_cut_up (sf : @SF_seq R) (x : R) := let s := seq_cut_up ((SF_h sf,SF_h sf) :: (SF_t sf)) x in mkSF_seq (fst (head (SF_h sf,SF_h sf) s)) (behead s).",
            "VernacDefinition",
            "031db97467b2354f0bfc7de5217f7913f6db205a"
        ],
        [
            "Lemma SF_cut_down_step s x eps : SF_h s <= x <= last (SF_h s) (SF_lx s) -> seq_step (SF_lx s) < eps -> seq_step (SF_lx (SF_cut_down s x)) < eps.",
            "VernacStartTheoremProof",
            "95e810eaf56cee396d01b3e98ed5a55f48ef2ea8"
        ],
        [
            "unfold SF_cut_down, seq_step ; simpl.",
            "VernacExtend",
            "59e2cf5953d6bf69632b8bd2b0da6030cafaf1ac"
        ],
        [
            "case => Hh Hl.",
            "VernacExtend",
            "e00fff71ff314c991514fc71c41a3556702e444a"
        ],
        [
            "case: Rle_dec => //= _.",
            "VernacExtend",
            "e00fff71ff314c991514fc71c41a3556702e444a"
        ],
        [
            "move: Hh Hl ; apply SF_cons_ind with (s := s) => {s} [ x1 | [x1 y0] s IH ] /= Hx Hh Hl.",
            "VernacExtend",
            "8261237f0cda1915a4077c28869831c5329103ce"
        ],
        [
            "rewrite (Rle_antisym _ _ Hx Hh) Rminus_eq_0 Rabs_R0.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "rewrite /Rmax ; by case: Rle_dec.",
            "VernacExtend",
            "f9e2aad1e70f1876566a77bd0af96f52b3b81520"
        ],
        [
            "case: Rle_dec => //= Hx'.",
            "VernacExtend",
            "e00fff71ff314c991514fc71c41a3556702e444a"
        ],
        [
            "apply Rmax_case.",
            "VernacExtend",
            "cfd24564dbeed7e74b25ea72bdae495929c2ce09"
        ],
        [
            "apply Rle_lt_trans with (2 := Hl) ; by apply Rmax_l.",
            "VernacExtend",
            "28f9640c34903b874975774118164841a63d76b8"
        ],
        [
            "apply IH ; try assumption.",
            "VernacExtend",
            "aafeca8c4f0f520ebe1d73bb4ca5fd73cd4cd6c2"
        ],
        [
            "apply Rle_lt_trans with (2 := Hl) ; by apply Rmax_r.",
            "VernacExtend",
            "28f9640c34903b874975774118164841a63d76b8"
        ],
        [
            "apply Rle_lt_trans with (2 := Hl).",
            "VernacExtend",
            "69e9183c3e1c621478435d3029dab8288a9ade6e"
        ],
        [
            "apply Rmax_case ; apply Rle_trans with (2 := Rmax_l _ _).",
            "VernacExtend",
            "c89677770e845f7325d998f2a48d536866ad4730"
        ],
        [
            "rewrite ?Rabs_pos_eq.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "apply Rplus_le_compat_r.",
            "VernacExtend",
            "5ca7acb5e67c7d7a5b6143fd11bc1e75c3e361e4"
        ],
        [
            "by apply Rlt_le, Rnot_le_lt.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "rewrite -Rminus_le_0.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "apply Rle_trans with x.",
            "VernacExtend",
            "795cd4902a779137a2ca3d4d53ee3d5bd0e0d67f"
        ],
        [
            "by [].",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "by apply Rlt_le, Rnot_le_lt.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "by rewrite -Rminus_le_0.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "by apply Rabs_pos.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma SF_cut_up_step s x eps : SF_h s <= x <= last (SF_h s) (SF_lx s) -> seq_step (SF_lx s) < eps -> seq_step (SF_lx (SF_cut_up s x)) < eps.",
            "VernacStartTheoremProof",
            "33754bceb2be8ed7706a52a0e23e899d863fc571"
        ],
        [
            "unfold SF_cut_down, seq_step ; simpl.",
            "VernacExtend",
            "59e2cf5953d6bf69632b8bd2b0da6030cafaf1ac"
        ],
        [
            "case => Hh Hl.",
            "VernacExtend",
            "e00fff71ff314c991514fc71c41a3556702e444a"
        ],
        [
            "case: Rle_dec => //= _.",
            "VernacExtend",
            "e00fff71ff314c991514fc71c41a3556702e444a"
        ],
        [
            "move: {4 5}(SF_h s) Hh Hl ; apply SF_cons_ind with (s := s) => {s} [ x1 | [x1 y0] s IH ] /= x0 Hh Hl He.",
            "VernacExtend",
            "8261237f0cda1915a4077c28869831c5329103ce"
        ],
        [
            "by apply He.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "case: Rle_dec => //= Hx.",
            "VernacExtend",
            "e00fff71ff314c991514fc71c41a3556702e444a"
        ],
        [
            "apply (IH x0) => //=.",
            "VernacExtend",
            "3c42b53d0efc26db114b00541ac5e7fcb29e6aeb"
        ],
        [
            "apply Rle_lt_trans with (2 := He).",
            "VernacExtend",
            "d1269289ec10b12437e6ea3d90f79d67dd9cc338"
        ],
        [
            "by apply Rmax_r.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "apply Rle_lt_trans with (2 := He).",
            "VernacExtend",
            "d1269289ec10b12437e6ea3d90f79d67dd9cc338"
        ],
        [
            "apply Rnot_le_lt in Hx.",
            "VernacExtend",
            "37b2b08620b674d8ffb85a94037c10e39a917148"
        ],
        [
            "apply Rmax_case.",
            "VernacExtend",
            "cfd24564dbeed7e74b25ea72bdae495929c2ce09"
        ],
        [
            "apply Rle_trans with (2 := Rmax_l _ _).",
            "VernacExtend",
            "71359a389bd939cc6dea91cb2e0a00babb930fa5"
        ],
        [
            "rewrite ?Rabs_pos_eq.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "by apply Rplus_le_compat_l, Ropp_le_contravar.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "rewrite -Rminus_le_0 ; by apply Rlt_le, Rle_lt_trans with x.",
            "VernacExtend",
            "f9e2aad1e70f1876566a77bd0af96f52b3b81520"
        ],
        [
            "rewrite -Rminus_le_0 ; by apply Rlt_le.",
            "VernacExtend",
            "f9e2aad1e70f1876566a77bd0af96f52b3b81520"
        ],
        [
            "by apply Rmax_r.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma SF_cut_down_pointed s x : SF_h s <= x -> pointed_subdiv s -> pointed_subdiv (SF_cut_down s x).",
            "VernacStartTheoremProof",
            "3c726f4ed99a68444a12bc0542eb51d48ed51d15"
        ],
        [
            "unfold SF_cut_down ; simpl.",
            "VernacExtend",
            "f02466c3b8a03a1e924e0b49d43cfad9dd64a626"
        ],
        [
            "case: Rle_dec => //= _.",
            "VernacExtend",
            "e00fff71ff314c991514fc71c41a3556702e444a"
        ],
        [
            "apply SF_cons_ind with (s := s) => {s} [x0 | [x1 y1] s IH] /= Hx0 H.",
            "VernacExtend",
            "3c42b53d0efc26db114b00541ac5e7fcb29e6aeb"
        ],
        [
            "move => i /= Hi.",
            "VernacExtend",
            "b1b2cb7a3a617cba67460b4eca1f04de3c1cc716"
        ],
        [
            "unfold SF_size in Hi ; simpl in Hi.",
            "VernacExtend",
            "b66595688898d83ddf915ae368ab05e010542828"
        ],
        [
            "apply lt_n_Sm_le, le_n_O_eq in Hi.",
            "VernacExtend",
            "fa7835541869511ea99486c8954819041c33f448"
        ],
        [
            "rewrite -Hi ; simpl ; split.",
            "VernacExtend",
            "12d5441a86a10cef9847115ae4d4ffd428ef8684"
        ],
        [
            "by [].",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "by apply Rle_refl.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "case: Rle_dec => //= Hx1.",
            "VernacExtend",
            "e00fff71ff314c991514fc71c41a3556702e444a"
        ],
        [
            "move: (H O (lt_O_Sn _)) => /= H0.",
            "VernacExtend",
            "b1b2cb7a3a617cba67460b4eca1f04de3c1cc716"
        ],
        [
            "apply ptd_cons in H.",
            "VernacExtend",
            "00d33a85ca920ab090e06384a0fd8ce455cb2796"
        ],
        [
            "move: (IH Hx1 H) => {IH} IH.",
            "VernacExtend",
            "b1b2cb7a3a617cba67460b4eca1f04de3c1cc716"
        ],
        [
            "rewrite /pointed_subdiv => i.",
            "VernacExtend",
            "3c42b53d0efc26db114b00541ac5e7fcb29e6aeb"
        ],
        [
            "destruct i => /= Hi.",
            "VernacExtend",
            "3c42b53d0efc26db114b00541ac5e7fcb29e6aeb"
        ],
        [
            "by apply H0.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "apply (IH i).",
            "VernacExtend",
            "f65d73b26ae2324cf20b219adbe4371e350c9b46"
        ],
        [
            "apply lt_S_n, Hi.",
            "VernacExtend",
            "cb813add265ec9cda3f77173b317301fe7ef111b"
        ],
        [
            "move => i /= Hi.",
            "VernacExtend",
            "b1b2cb7a3a617cba67460b4eca1f04de3c1cc716"
        ],
        [
            "unfold SF_size in Hi ; simpl in Hi.",
            "VernacExtend",
            "b66595688898d83ddf915ae368ab05e010542828"
        ],
        [
            "apply lt_n_Sm_le, le_n_O_eq in Hi.",
            "VernacExtend",
            "fa7835541869511ea99486c8954819041c33f448"
        ],
        [
            "rewrite -Hi ; simpl ; split.",
            "VernacExtend",
            "12d5441a86a10cef9847115ae4d4ffd428ef8684"
        ],
        [
            "apply Rmin_case.",
            "VernacExtend",
            "06bee284b3ab9229517272cc3728705bdc7b95ba"
        ],
        [
            "apply (H O).",
            "VernacExtend",
            "4dbce23ca6fed5deaa06e2a7d2674bd1b58a157c"
        ],
        [
            "by apply lt_O_Sn.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "by [].",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "by apply Rmin_r.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma SF_cut_up_pointed s x : SF_h s <= x -> pointed_subdiv s -> pointed_subdiv (SF_cut_up s x).",
            "VernacStartTheoremProof",
            "aef53faf55bf732c9465864e0604d5467b95c2c0"
        ],
        [
            "unfold SF_cut_up ; simpl.",
            "VernacExtend",
            "1bd165aa2c237b59f560954c754852903a7e7297"
        ],
        [
            "case: Rle_dec => //= _.",
            "VernacExtend",
            "e00fff71ff314c991514fc71c41a3556702e444a"
        ],
        [
            "move: {2 3}(SF_h s) ; apply SF_cons_ind with (s := s) => {s} [ x1 | [x1 y0] s IH] /= x0 Hx0 H i Hi.",
            "VernacExtend",
            "8261237f0cda1915a4077c28869831c5329103ce"
        ],
        [
            "by apply lt_n_O in Hi.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "destruct (Rle_dec (SF_h s) x) as [Hx1|Hx1].",
            "VernacExtend",
            "0887043d9b26342731f78bf05ca0015c6e9bb3da"
        ],
        [
            "apply IH => //=.",
            "VernacExtend",
            "3c42b53d0efc26db114b00541ac5e7fcb29e6aeb"
        ],
        [
            "move: H ; by apply ptd_cons.",
            "VernacExtend",
            "c42ec967bffec70acce34c6295bd61fe6baf57b0"
        ],
        [
            "destruct i ; simpl.",
            "VernacExtend",
            "4521b9790b82772dc0c1c54601d42b59e83dbed6"
        ],
        [
            "split.",
            "VernacExtend",
            "55abc140132bd88981001ac656020469a8d503eb"
        ],
        [
            "by apply Rmax_r.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "apply Rmax_case.",
            "VernacExtend",
            "cfd24564dbeed7e74b25ea72bdae495929c2ce09"
        ],
        [
            "by apply (H O), lt_O_Sn.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "by apply Rlt_le, Rnot_le_lt.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "apply (H (S i)), Hi.",
            "VernacExtend",
            "3957f414454976edbf949d506b09ee2543b22119"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma SF_cut_down_h s x : SF_h s <= x -> SF_h (SF_cut_down s x) = SF_h s.",
            "VernacStartTheoremProof",
            "f332d87cf69c51abae147158c65cf38eca79e39c"
        ],
        [
            "unfold SF_cut_down ; simpl.",
            "VernacExtend",
            "f02466c3b8a03a1e924e0b49d43cfad9dd64a626"
        ],
        [
            "by case: Rle_dec.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma SF_cut_up_h s x : SF_h (SF_cut_up s x) = x.",
            "VernacStartTheoremProof",
            "8df16d86bd264f4e264dd8b4d11f2ba4ec0a1173"
        ],
        [
            "unfold SF_cut_up ; simpl.",
            "VernacExtend",
            "1bd165aa2c237b59f560954c754852903a7e7297"
        ],
        [
            "case: Rle_dec => //= ; simpl.",
            "VernacExtend",
            "d99a888d1dfdf8610ae8ab21b05643d1aef27246"
        ],
        [
            "move: {2 3}(SF_h s) ; apply SF_cons_ind with (s := s) => {s} [x1 | [x1 y1] s IH ] /= x0 Hx.",
            "VernacExtend",
            "8261237f0cda1915a4077c28869831c5329103ce"
        ],
        [
            "by [].",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "case: Rle_dec => //= Hx'.",
            "VernacExtend",
            "e00fff71ff314c991514fc71c41a3556702e444a"
        ],
        [
            "by apply IH.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma SF_cut_down_l s x : last (SF_h (SF_cut_down s x)) (SF_lx (SF_cut_down s x)) = x.",
            "VernacStartTheoremProof",
            "80a085e3a6aedb9eeeec9e1fa3d5d6881ddcf369"
        ],
        [
            "unfold SF_cut_down ; simpl.",
            "VernacExtend",
            "f02466c3b8a03a1e924e0b49d43cfad9dd64a626"
        ],
        [
            "case: Rle_dec => //= ; simpl.",
            "VernacExtend",
            "d99a888d1dfdf8610ae8ab21b05643d1aef27246"
        ],
        [
            "apply SF_cons_ind with (s := s) => {s} [x1 | [x1 y1] s IH ] /= Hx.",
            "VernacExtend",
            "3c42b53d0efc26db114b00541ac5e7fcb29e6aeb"
        ],
        [
            "by [].",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "case: Rle_dec => //= Hx'.",
            "VernacExtend",
            "e00fff71ff314c991514fc71c41a3556702e444a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma SF_cut_up_l s x : x <= last (SF_h s) (SF_lx s) -> last (SF_h (SF_cut_up s x)) (SF_lx (SF_cut_up s x)) = last (SF_h s) (SF_lx s).",
            "VernacStartTheoremProof",
            "ca67abee25aae315b790059024dcd02ffb633de2"
        ],
        [
            "unfold SF_cut_down ; simpl.",
            "VernacExtend",
            "f02466c3b8a03a1e924e0b49d43cfad9dd64a626"
        ],
        [
            "case: Rle_dec => //=.",
            "VernacExtend",
            "e00fff71ff314c991514fc71c41a3556702e444a"
        ],
        [
            "move: {3 4}(SF_h s); apply SF_cons_ind with (s := s) => {s} [x1 | [x1 y1] s IH ] /= x0 Hx Hx'.",
            "VernacExtend",
            "8261237f0cda1915a4077c28869831c5329103ce"
        ],
        [
            "by apply Rle_antisym.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "case: Rle_dec => //= {Hx} Hx.",
            "VernacExtend",
            "e00fff71ff314c991514fc71c41a3556702e444a"
        ],
        [
            "by apply IH.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma SF_cut_down_cons_0 h ptd x : x < fst h -> SF_cut_down (SF_cons h ptd) x = SF_nil x.",
            "VernacStartTheoremProof",
            "1cc972aa17c6a303f879c8ebffa5c1ade504d884"
        ],
        [
            "intros H0.",
            "VernacExtend",
            "7be07b7f0ac418af4d02cddf70af6f27f8714110"
        ],
        [
            "apply Rlt_not_le in H0.",
            "VernacExtend",
            "5e29988c29e764b4139a50167cec0d34ef992fb5"
        ],
        [
            "rewrite /SF_cut_down /=.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "by case: Rle_dec.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma SF_cut_up_cons_0 h ptd x : x < fst h -> SF_cut_up (SF_cons h ptd) x = SF_cons (x,Rmax (fst h) x) (SF_cons h ptd).",
            "VernacStartTheoremProof",
            "1836e67e7805eadcb90bc5b7218daf9a3d26bca5"
        ],
        [
            "intros H0.",
            "VernacExtend",
            "7be07b7f0ac418af4d02cddf70af6f27f8714110"
        ],
        [
            "apply Rlt_not_le in H0.",
            "VernacExtend",
            "5e29988c29e764b4139a50167cec0d34ef992fb5"
        ],
        [
            "rewrite /SF_cut_up /=.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "by case: Rle_dec.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma SF_cut_down_cons_1 h ptd x : fst h <= x < SF_h ptd -> SF_cut_down (SF_cons h ptd) x = SF_cons (fst h, Rmin (snd h) x) (SF_nil x).",
            "VernacStartTheoremProof",
            "aa4d795bfe8d806ca3f7eab39f877ef7c0960128"
        ],
        [
            "intros [H0 Hx0].",
            "VernacExtend",
            "41a4d414ed20cbf2b455fa00136c047d81895ea4"
        ],
        [
            "apply Rlt_not_le in Hx0.",
            "VernacExtend",
            "6b29ce553416c2e1081454a5935023b34332fbfe"
        ],
        [
            "rewrite /SF_cut_down /=.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "case: Rle_dec => //= _.",
            "VernacExtend",
            "e00fff71ff314c991514fc71c41a3556702e444a"
        ],
        [
            "by case: Rle_dec.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma SF_cut_up_cons_1 h ptd x : fst h <= x < SF_h ptd -> SF_cut_up (SF_cons h ptd) x = SF_cons (x,Rmax (snd h) x) ptd.",
            "VernacStartTheoremProof",
            "bf8b5fd345c4823fbd888f2fd51adac45eff9db4"
        ],
        [
            "intros [H0 Hx0].",
            "VernacExtend",
            "41a4d414ed20cbf2b455fa00136c047d81895ea4"
        ],
        [
            "apply Rlt_not_le in Hx0.",
            "VernacExtend",
            "6b29ce553416c2e1081454a5935023b34332fbfe"
        ],
        [
            "rewrite /SF_cut_up /=.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "case: Rle_dec => //= _.",
            "VernacExtend",
            "e00fff71ff314c991514fc71c41a3556702e444a"
        ],
        [
            "by case: Rle_dec.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma SF_cut_down_cons_2 h ptd x : fst h <= SF_h ptd <= x -> SF_cut_down (SF_cons h ptd) x = SF_cons h (SF_cut_down ptd x).",
            "VernacStartTheoremProof",
            "a0861bd1fabd0d642035a09a01fc7e22152768b9"
        ],
        [
            "intros [H0 Hx0].",
            "VernacExtend",
            "41a4d414ed20cbf2b455fa00136c047d81895ea4"
        ],
        [
            "rewrite /SF_cut_down /=.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "case: Rle_dec (Rle_trans _ _ _ H0 Hx0) => //= _ _.",
            "VernacExtend",
            "e00fff71ff314c991514fc71c41a3556702e444a"
        ],
        [
            "by case: Rle_dec.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma SF_cut_up_cons_2 h ptd x : fst h <= SF_h ptd <= x -> SF_cut_up (SF_cons h ptd) x = SF_cut_up ptd x.",
            "VernacStartTheoremProof",
            "1cf110a908bc1d9d292a4a454b57f85254f14b54"
        ],
        [
            "intros [H0 Hx0].",
            "VernacExtend",
            "41a4d414ed20cbf2b455fa00136c047d81895ea4"
        ],
        [
            "rewrite /SF_cut_up /=.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "case: Rle_dec (Rle_trans _ _ _ H0 Hx0) => //= _ _.",
            "VernacExtend",
            "e00fff71ff314c991514fc71c41a3556702e444a"
        ],
        [
            "case: Rle_dec => //= _.",
            "VernacExtend",
            "e00fff71ff314c991514fc71c41a3556702e444a"
        ],
        [
            "move: {2 3}(SF_h ptd) Hx0 ; apply SF_cons_ind with (s := ptd) => {ptd H0} [ x0 | [x0 y0] ptd IH ] //= x0' Hx0.",
            "VernacExtend",
            "8261237f0cda1915a4077c28869831c5329103ce"
        ],
        [
            "case: Rle_dec => //= Hx1.",
            "VernacExtend",
            "e00fff71ff314c991514fc71c41a3556702e444a"
        ],
        [
            "by apply IH.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Section SF_fun.",
            "VernacBeginSection",
            "65d87fa5b55747e01646a8501ed8b27179a05af9"
        ],
        [
            "Context {T : Type}.",
            "VernacContext",
            "be9a7a6cbe25485b314331383c8d6eddddd780fd"
        ],
        [
            "Fixpoint SF_fun_aux (h : R*T) (s : seq (R*T)) (y0 : T) (x : R) := match s with | [::] => match Rle_dec x (fst h) with | left _ => snd h | right _ => y0 end | h0 :: s0 => match Rlt_dec x (fst h) with | left _ => snd h | right _ => SF_fun_aux h0 s0 y0 x end end.",
            "VernacFixpoint",
            "645e921d829c4acc98eb67cbf0719099040631ea"
        ],
        [
            "Definition SF_fun (s : SF_seq) (y0 : T) (x : R) := SF_fun_aux (SF_h s,y0) (SF_t s) y0 x.",
            "VernacDefinition",
            "bcc5c712c9165cc906c04a1f95e3752ffb05d290"
        ],
        [
            "Lemma SF_fun_incr (s : SF_seq) (y0 : T) (x : R) Hs Hx : SF_fun s y0 x = match (sorted_dec (SF_lx s) 0 x Hs Hx) with | inleft H => nth y0 (SF_ly s) (proj1_sig H) | inright _ => nth y0 (SF_ly s) (SF_size s -1)%nat end.",
            "VernacStartTheoremProof",
            "30787defc35f74e8fe3b4d449a44ce872b404ade"
        ],
        [
            "rewrite /SF_fun /=.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "move: Hs Hx ; apply SF_cons_dec with (s := s) => {s} [/= x1 | h s] Hs /= Hx.",
            "VernacExtend",
            "8261237f0cda1915a4077c28869831c5329103ce"
        ],
        [
            "case: sorted_dec => /= [[i Hi]|Hi] ; rewrite /SF_ly ; case: Rle_dec => //= ; case: i Hi => //.",
            "VernacExtend",
            "41f5ef65341509fee663f3025927c0f7cafe97d5"
        ],
        [
            "case: Rlt_dec => [Hx' | _].",
            "VernacExtend",
            "e00fff71ff314c991514fc71c41a3556702e444a"
        ],
        [
            "contradict Hx' ; apply Rle_not_lt, Hx.",
            "VernacExtend",
            "d3788d9a0e3af0a82eb679891af15ebaeed5a544"
        ],
        [
            "move: h Hs Hx ; apply SF_cons_ind with (s := s) => {s} [x1 | h0 s IH] h Hs /= Hx.",
            "VernacExtend",
            "8261237f0cda1915a4077c28869831c5329103ce"
        ],
        [
            "case: sorted_dec => [/= [i [Hi' Hi]] /= |Hi].",
            "VernacExtend",
            "e00fff71ff314c991514fc71c41a3556702e444a"
        ],
        [
            "by apply lt_S_n, lt_S_n, lt_n_O in Hi.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "case: Hx => Hx Hx' ; apply Rle_not_lt in Hx ; case: Rle_dec => //.",
            "VernacExtend",
            "78fdc09c450a7407ac325316b31600f7125c2981"
        ],
        [
            "case: Rlt_dec => Hx'.",
            "VernacExtend",
            "e00fff71ff314c991514fc71c41a3556702e444a"
        ],
        [
            "case: sorted_dec => /= [[i Hi]|Hi]/=.",
            "VernacExtend",
            "e00fff71ff314c991514fc71c41a3556702e444a"
        ],
        [
            "case: i Hi => //= i Hi ; contradict Hx' ; apply Rle_not_lt, Rle_trans with (2 := proj1 (proj1 Hi)).",
            "VernacExtend",
            "53553c709bba40ebba423b96b8670d3f05e17118"
        ],
        [
            "simpl in Hs ; elim: (unzip1 (SF_t s)) (fst h0) (SF_h s) (i) (proj2 Hs) (proj2 Hi) => {s IH Hs Hx Hi h h0} [| h1 s IH] h h0 n Hs Hn.",
            "VernacExtend",
            "f9a72f8ee99ace10ec6ab4410019beb694bd73b4"
        ],
        [
            "repeat apply lt_S_n in Hn ; by apply lt_n_O in Hn.",
            "VernacExtend",
            "3240f183a141989a64ccb70f2eeb390d466afc91"
        ],
        [
            "case: n Hn => [| n] Hn.",
            "VernacExtend",
            "e00fff71ff314c991514fc71c41a3556702e444a"
        ],
        [
            "apply Rle_refl.",
            "VernacExtend",
            "0a60a50353d5cfa9a4ade0240c47d5160d6d423c"
        ],
        [
            "apply Rle_trans with (1 := proj1 Hs) => //= ; intuition.",
            "VernacExtend",
            "392bd1d67bd08a3229bd3c64200057c7860e16f9"
        ],
        [
            "contradict Hx' ; apply Rle_not_lt, Rle_trans with (2 := proj1 Hi).",
            "VernacExtend",
            "370f6298029fd244ea50d81c3c127b7d80f69789"
        ],
        [
            "simpl in Hs ; elim: (unzip1 (SF_t s)) (fst h0) (SF_h s) (proj2 Hs) => {s IH Hs Hx Hi h h0} [| h1 s IH] h h0 Hs.",
            "VernacExtend",
            "f9a72f8ee99ace10ec6ab4410019beb694bd73b4"
        ],
        [
            "apply Rle_refl.",
            "VernacExtend",
            "0a60a50353d5cfa9a4ade0240c47d5160d6d423c"
        ],
        [
            "apply Rle_trans with (1 := proj1 Hs) => //= ; intuition.",
            "VernacExtend",
            "392bd1d67bd08a3229bd3c64200057c7860e16f9"
        ],
        [
            "have : fst h0 <= x <= last (SF_h s) (unzip1 (SF_t s)) => [ | {Hx'} Hx'].",
            "VernacExtend",
            "3c42b53d0efc26db114b00541ac5e7fcb29e6aeb"
        ],
        [
            "split ; [by apply Rnot_lt_le | by apply Hx].",
            "VernacExtend",
            "cd966443f25e3563445cb8616981d7ce092dfc10"
        ],
        [
            "rewrite (IH h0 (proj2 Hs) Hx') => {IH} ; case: sorted_dec => [[i [Hxi Hi]]|Hi] ; case: sorted_dec => [[j [Hxj Hj]]|Hj] ; rewrite -?minus_n_O //=.",
            "VernacExtend",
            "3c029feeae50bbd8522e056d817be38d490ecf51"
        ],
        [
            "move : h h0 i j Hs {Hx Hx'} Hxi Hi Hxj Hj ; apply SF_cons_ind with (s := s) => {s} [x1 | h1 s IH] h h0 i j Hs //= Hxi Hi Hxj Hj.",
            "VernacExtend",
            "8261237f0cda1915a4077c28869831c5329103ce"
        ],
        [
            "by apply lt_S_n, lt_S_n, lt_n_O in Hi.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "case: j Hxj Hj => [/= | j] Hxj Hj.",
            "VernacExtend",
            "e00fff71ff314c991514fc71c41a3556702e444a"
        ],
        [
            "case: Hxj => _ Hxj ; contradict Hxj ; apply Rle_not_lt, Rle_trans with (2 := proj1 Hxi).",
            "VernacExtend",
            "9f4fdb40ce4217184ecf9e77ab6436980cc4b389"
        ],
        [
            "elim: (i) Hi => {i Hxi IH} //= [| i IH] Hi.",
            "VernacExtend",
            "e686a1895f1799b840b76242f931100819a9ad6c"
        ],
        [
            "apply Rle_refl.",
            "VernacExtend",
            "0a60a50353d5cfa9a4ade0240c47d5160d6d423c"
        ],
        [
            "apply Rle_trans with (1 := IH (lt_trans _ _ _ (lt_n_Sn _) Hi)), (sorted_nth Rle) ; [apply Hs | simpl ; intuition].",
            "VernacExtend",
            "5b0babd68edfbb4977ee80548200ce91b45c2fe2"
        ],
        [
            "case: i Hxi Hi => [/= | i] Hxi Hi.",
            "VernacExtend",
            "e00fff71ff314c991514fc71c41a3556702e444a"
        ],
        [
            "case: j Hxj Hj => [//= | j] Hxj Hj.",
            "VernacExtend",
            "e00fff71ff314c991514fc71c41a3556702e444a"
        ],
        [
            "case: Hxi => _ Hxi ; contradict Hxi ; apply Rle_not_lt, Rle_trans with (2 := proj1 Hxj) ; elim: (j) Hj => {j Hxj IH} //= [| j IH] Hj.",
            "VernacExtend",
            "b25ec3641b8743e272452b8f7982f0fe01fb1f4b"
        ],
        [
            "apply Rle_refl.",
            "VernacExtend",
            "0a60a50353d5cfa9a4ade0240c47d5160d6d423c"
        ],
        [
            "apply Rle_trans with (1 := IH (lt_trans _ _ _ (lt_n_Sn _) Hj)), (sorted_nth Rle) ; [apply Hs | simpl ; intuition].",
            "VernacExtend",
            "06be087434e6601cb64a872e00940aaebadb1873"
        ],
        [
            "apply (IH h0 h1 i j) => //.",
            "VernacExtend",
            "3c42b53d0efc26db114b00541ac5e7fcb29e6aeb"
        ],
        [
            "apply Hs.",
            "VernacExtend",
            "26038359dfe6b0cb344439243c160e8be398bca9"
        ],
        [
            "apply lt_S_n, Hi.",
            "VernacExtend",
            "cb813add265ec9cda3f77173b317301fe7ef111b"
        ],
        [
            "apply lt_S_n, Hj.",
            "VernacExtend",
            "9190c6f558b5030aee0be80299aa8c810e66fa68"
        ],
        [
            "simpl in Hxi, Hj ; case: Hxi => _ Hxi ; contradict Hxi ; apply Rle_not_lt, Rle_trans with (2 := proj1 Hj).",
            "VernacExtend",
            "268b98192cac93023b41282647dd69302b5b8b87"
        ],
        [
            "move: Hi Hs ; rewrite ?SF_lx_cons /SF_lx.",
            "VernacExtend",
            "057edeb0967475c7ea5e8c98c449ddc5613eddc1"
        ],
        [
            "elim: i (fst h) (fst h0) (SF_h s) (unzip1 (SF_t s)) => {s Hx Hx' Hj h y0 h0} [| i IH] h h0 h1 s Hi Hs.",
            "VernacExtend",
            "e686a1895f1799b840b76242f931100819a9ad6c"
        ],
        [
            "case: s Hi Hs => [| h2 s] Hi Hs /=.",
            "VernacExtend",
            "e00fff71ff314c991514fc71c41a3556702e444a"
        ],
        [
            "by apply lt_S_n, lt_S_n, lt_n_O in Hi.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "elim: s h h0 h1 h2 {Hi} Hs => [| h3 s IH] h h0 h1 h2 Hs /=.",
            "VernacExtend",
            "e686a1895f1799b840b76242f931100819a9ad6c"
        ],
        [
            "apply Rle_refl.",
            "VernacExtend",
            "0a60a50353d5cfa9a4ade0240c47d5160d6d423c"
        ],
        [
            "apply Rle_trans with (r2 := h2).",
            "VernacExtend",
            "291bb1cd9bcc1f0ebc98f10f355781472bc7dbe9"
        ],
        [
            "apply Hs.",
            "VernacExtend",
            "26038359dfe6b0cb344439243c160e8be398bca9"
        ],
        [
            "apply (IH h0 h1).",
            "VernacExtend",
            "21b95ba36771d96e3f92373505821fc4ac37dd94"
        ],
        [
            "apply (proj2 Hs).",
            "VernacExtend",
            "86f7535c55375a4bd3b31f67f2a7d146231f7f71"
        ],
        [
            "case: s Hi Hs => [| h2 s] Hi Hs.",
            "VernacExtend",
            "e00fff71ff314c991514fc71c41a3556702e444a"
        ],
        [
            "by apply lt_S_n, lt_S_n, lt_n_O in Hi.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "apply (IH h0 h1 h2 s).",
            "VernacExtend",
            "c64bfb4f2f8c3d937caa85d8570904692b1d5637"
        ],
        [
            "apply lt_S_n, Hi.",
            "VernacExtend",
            "cb813add265ec9cda3f77173b317301fe7ef111b"
        ],
        [
            "apply Hs.",
            "VernacExtend",
            "26038359dfe6b0cb344439243c160e8be398bca9"
        ],
        [
            "simpl in Hxj, Hi ; case: Hxj => _ Hxj ; contradict Hxj ; apply Rle_not_lt, Rle_trans with (2 := proj1 Hi).",
            "VernacExtend",
            "04d3f70076f1ffb237f342080cd20af93aaf1a1b"
        ],
        [
            "move: Hj Hs ; rewrite ?SF_lx_cons /SF_lx.",
            "VernacExtend",
            "057edeb0967475c7ea5e8c98c449ddc5613eddc1"
        ],
        [
            "rewrite -minus_n_O ; elim: j (fst h) (fst h0) (SF_h s) (unzip1 (SF_t s)) => {s Hx Hx' Hi h y0 h0} [ | j IH] h h0 h1 s Hj Hs /=.",
            "VernacExtend",
            "44a8e3b453c9376c468b4e3e0046f5ac33e11d6d"
        ],
        [
            "elim: s h h0 h1 {Hj} Hs => [| h2 s IH] h h0 h1 Hs /=.",
            "VernacExtend",
            "e686a1895f1799b840b76242f931100819a9ad6c"
        ],
        [
            "apply Rle_refl.",
            "VernacExtend",
            "0a60a50353d5cfa9a4ade0240c47d5160d6d423c"
        ],
        [
            "apply Rle_trans with (r2 := h1).",
            "VernacExtend",
            "21d19f0a2b5b5cde7b9ccfeec61799304dda26b3"
        ],
        [
            "apply Hs.",
            "VernacExtend",
            "26038359dfe6b0cb344439243c160e8be398bca9"
        ],
        [
            "apply (IH h0 h1 h2).",
            "VernacExtend",
            "54598c33be5340e32c1f4def35a7759984e83562"
        ],
        [
            "apply (proj2 Hs).",
            "VernacExtend",
            "86f7535c55375a4bd3b31f67f2a7d146231f7f71"
        ],
        [
            "case: s Hj Hs => [| h2 s] Hj Hs.",
            "VernacExtend",
            "e00fff71ff314c991514fc71c41a3556702e444a"
        ],
        [
            "by apply lt_S_n, lt_S_n, lt_S_n, lt_n_O in Hj.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "apply (IH h0 h1 h2 s).",
            "VernacExtend",
            "c64bfb4f2f8c3d937caa85d8570904692b1d5637"
        ],
        [
            "apply lt_S_n, Hj.",
            "VernacExtend",
            "9190c6f558b5030aee0be80299aa8c810e66fa68"
        ],
        [
            "apply Hs.",
            "VernacExtend",
            "26038359dfe6b0cb344439243c160e8be398bca9"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "End SF_fun.",
            "VernacEndSegment",
            "16d20c206bc029dec2fa54f8552ab7270b44e33d"
        ],
        [
            "Lemma SF_fun_map {T T0 : Type} (f : T -> T0) (s : SF_seq) y0 : forall x, SF_fun (SF_map f s) (f y0) x = f (SF_fun s y0 x).",
            "VernacStartTheoremProof",
            "f691a102016eb1defdab40714f7917d0260329d0"
        ],
        [
            "case: s => sh st ; rewrite /SF_fun /SF_map /= ; case: st => [| h st] x /=.",
            "VernacExtend",
            "1dd33488047dbf70f12e12a749f59bfa780f9e04"
        ],
        [
            "by case: Rle_dec.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "case: Rlt_dec => //.",
            "VernacExtend",
            "e00fff71ff314c991514fc71c41a3556702e444a"
        ],
        [
            "elim: st sh h y0 x => [| h0 st IH] sh h y0 x Hx //=.",
            "VernacExtend",
            "e686a1895f1799b840b76242f931100819a9ad6c"
        ],
        [
            "by case: Rle_dec.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "case: Rlt_dec => // {Hx} Hx.",
            "VernacExtend",
            "e00fff71ff314c991514fc71c41a3556702e444a"
        ],
        [
            "by apply: (IH (fst h)).",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Definition SF_seq_f1 {T : Type} (f1 : R -> T) (P : seq R) : SF_seq := mkSF_seq (head 0 P) (pairmap (fun x y => (y, f1 x)) (head 0 P) (behead P)).",
            "VernacDefinition",
            "c199b62f0e77bb219543268d806c4eac951bf38f"
        ],
        [
            "Definition SF_seq_f2 {T : Type} (f2 : R -> R -> T) (P : seq R) : SF_seq := mkSF_seq (head 0 P) (pairmap (fun x y => (y, f2 x y)) (head 0 P) (behead P)).",
            "VernacDefinition",
            "7ac28f689072360880bb0fe15735d2c183b3718b"
        ],
        [
            "Lemma SF_cons_f1 {T : Type} (f1 : R -> T) (h : R) (P : seq R) : (0 < size P)%nat -> SF_seq_f1 f1 (h::P) = SF_cons (h,f1 h) (SF_seq_f1 f1 P).",
            "VernacStartTheoremProof",
            "1fcfd19b923e99774e7cfed880e184a97544bc46"
        ],
        [
            "case: P => [ H | h0 P _] //.",
            "VernacExtend",
            "e00fff71ff314c991514fc71c41a3556702e444a"
        ],
        [
            "by apply lt_n_O in H.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma SF_cons_f2 {T : Type} (f2 : R -> R -> T) (h : R) (P : seq R) : (0 < size P)%nat -> SF_seq_f2 f2 (h::P) = SF_cons (h,f2 h (head 0 P)) (SF_seq_f2 f2 P).",
            "VernacStartTheoremProof",
            "fa6e5b741609ccd74762bdbe61e9b1ebd2900401"
        ],
        [
            "case: P => [ H | h0 P _] //.",
            "VernacExtend",
            "e00fff71ff314c991514fc71c41a3556702e444a"
        ],
        [
            "by apply lt_n_O in H.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma SF_size_f1 {T : Type} (f1 : R -> T) P : SF_size (SF_seq_f1 f1 P) = Peano.pred (size P).",
            "VernacStartTheoremProof",
            "47e5f730b3b3c2e55c211c795bc23a954f116508"
        ],
        [
            "case: P => [| h P] //= ; by rewrite /SF_size /= size_pairmap.",
            "VernacExtend",
            "14b141a2d70f00681f703015bc169478d399fe62"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma SF_size_f2 {T : Type} (f2 : R -> R -> T) P : SF_size (SF_seq_f2 f2 P) = Peano.pred (size P).",
            "VernacStartTheoremProof",
            "963161c7f45589b09c46cb1f2d3225235734dffb"
        ],
        [
            "case: P => [| h P] //= ; by rewrite /SF_size /= size_pairmap.",
            "VernacExtend",
            "14b141a2d70f00681f703015bc169478d399fe62"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma SF_lx_f1 {T : Type} (f1 : R -> T) P : (0 < size P)%nat -> SF_lx (SF_seq_f1 f1 P) = P.",
            "VernacStartTheoremProof",
            "8a783472ff5aa19c114adaea8aabfd83d5fc7ad7"
        ],
        [
            "elim: P => [ H | h l IH _] //=.",
            "VernacExtend",
            "e686a1895f1799b840b76242f931100819a9ad6c"
        ],
        [
            "by apply lt_n_O in H.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "case: l IH => [ | h' l] //= IH.",
            "VernacExtend",
            "e00fff71ff314c991514fc71c41a3556702e444a"
        ],
        [
            "rewrite -{2}IH //.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "by apply lt_O_Sn.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma SF_lx_f2 {T : Type} (f2 : R -> R -> T) P : (0 < size P)%nat -> SF_lx (SF_seq_f2 f2 P) = P.",
            "VernacStartTheoremProof",
            "c7b859337977ab1c132b3635295174a39b9e2a9c"
        ],
        [
            "elim: P => [ H | h l IH _] //=.",
            "VernacExtend",
            "e686a1895f1799b840b76242f931100819a9ad6c"
        ],
        [
            "by apply lt_n_O in H.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "case: l IH => [ | h' l] //= IH.",
            "VernacExtend",
            "e00fff71ff314c991514fc71c41a3556702e444a"
        ],
        [
            "rewrite -{2}IH //.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "by apply lt_O_Sn.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma SF_ly_f1 {T : Type} (f1 : R -> T) P : SF_ly (SF_seq_f1 f1 P) = Rcomplements.belast (map f1 P).",
            "VernacStartTheoremProof",
            "94e5fc94bcfd44c31207279f9255b87d894d9887"
        ],
        [
            "case: P => [| h P] // ; elim: P h => //= h P IH h0 ; by rewrite -(IH h).",
            "VernacExtend",
            "4509d94a53292381d19ec171948355b40d55da39"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma SF_ly_f2 {T : Type} (f2 : R -> R -> T) P : SF_ly (SF_seq_f2 f2 P) = behead (pairmap f2 0 P).",
            "VernacStartTheoremProof",
            "88f3f5f9504bc2f1daa1f90f33f796010bf36540"
        ],
        [
            "case: P => [| h P] // ; elim: P h => //= h P IH h0 ; by rewrite -(IH h).",
            "VernacExtend",
            "4509d94a53292381d19ec171948355b40d55da39"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma SF_sorted_f1 {T : Type} (f1 : R -> T) P Ord : (sorted Ord P) <-> (SF_sorted Ord (SF_seq_f1 f1 P)).",
            "VernacStartTheoremProof",
            "7f5f9fd13cf166041bb2e70ef19247874c0bd90f"
        ],
        [
            "case: P => [ | h P] //.",
            "VernacExtend",
            "e00fff71ff314c991514fc71c41a3556702e444a"
        ],
        [
            "rewrite /SF_sorted SF_lx_f1 //.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "by apply lt_O_Sn.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma SF_sorted_f2 {T : Type} (f2 : R -> R -> T) P Ord : (sorted Ord P) <-> (SF_sorted Ord (SF_seq_f2 f2 P)).",
            "VernacStartTheoremProof",
            "76f3d1806d974a3d176d242fdcc3c0343bec3890"
        ],
        [
            "case: P => [ | h P] //.",
            "VernacExtend",
            "e00fff71ff314c991514fc71c41a3556702e444a"
        ],
        [
            "rewrite /SF_sorted SF_lx_f2 //.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "by apply lt_O_Sn.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma SF_rev_f2 {T : Type} (f2 : R -> R -> T) P : (forall x y, f2 x y = f2 y x) -> SF_rev (SF_seq_f2 f2 P) = SF_seq_f2 f2 (rev P).",
            "VernacStartTheoremProof",
            "fa3f122a70c62ecfe2af14f125ffca960b693b80"
        ],
        [
            "move => Hf2 ; apply SF_lx_ly_inj ; case: P => [ | h P] //=.",
            "VernacExtend",
            "be17f051b87a3bf1b4eda6aab6f27e29f2ffa292"
        ],
        [
            "rewrite SF_lx_rev !SF_lx_f2 ?rev_cons /= 1?headI // ; by apply lt_O_Sn.",
            "VernacExtend",
            "f9e2aad1e70f1876566a77bd0af96f52b3b81520"
        ],
        [
            "rewrite SF_ly_rev !SF_ly_f2 /= ?rev_cons.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "elim: P h => [ | h0 P IH] h //=.",
            "VernacExtend",
            "e686a1895f1799b840b76242f931100819a9ad6c"
        ],
        [
            "rewrite !rev_cons pairmap_rcons behead_rcons ?(IH h0) ?(Hf2 h h0) //.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "rewrite size_pairmap size_rcons ; apply lt_O_Sn.",
            "VernacExtend",
            "fdfb450e459e640f938772fd8a2e99682bbd4874"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma SF_map_f1 {T T0 : Type} (f : T -> T0) (f1 : R -> T) P : SF_map f (SF_seq_f1 f1 P) = SF_seq_f1 (fun x => f (f1 x)) P.",
            "VernacStartTheoremProof",
            "eb4f79ca86cc97483335691af2a3bbade56fb827"
        ],
        [
            "case: P => [| h P] // ; elim: P h => [| h0 P IH] h //.",
            "VernacExtend",
            "1821533cafd21deefc2f797d67a58b45e0a54e79"
        ],
        [
            "rewrite ?(SF_cons_f1 _ _ (h0::P)) /= ; try intuition.",
            "VernacExtend",
            "0b316f303ec9b3bd785f24be0beeecb90e2db0d1"
        ],
        [
            "rewrite SF_map_cons IH ; intuition.",
            "VernacExtend",
            "e4029ed893b2095ae42ef8228a67f0fb36a59743"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma SF_map_f2 {T T0 : Type} (f : T -> T0) (f2 : R -> R -> T) P : SF_map f (SF_seq_f2 f2 P) = SF_seq_f2 (fun x y => f (f2 x y)) P.",
            "VernacStartTheoremProof",
            "2bed992e3d675af65c4283b6e9b9cd1581d7a7a9"
        ],
        [
            "case: P => [| h P] // ; elim: P h => [| h0 P IH] h //.",
            "VernacExtend",
            "1821533cafd21deefc2f797d67a58b45e0a54e79"
        ],
        [
            "rewrite ?(SF_cons_f2 _ _ (h0::P)) /= ; try intuition.",
            "VernacExtend",
            "0b316f303ec9b3bd785f24be0beeecb90e2db0d1"
        ],
        [
            "rewrite SF_map_cons IH ; intuition.",
            "VernacExtend",
            "e4029ed893b2095ae42ef8228a67f0fb36a59743"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma ptd_f2 (f : R -> R -> R) s : sorted Rle s -> (forall x y, x <= y -> x <= f x y <= y) -> pointed_subdiv (SF_seq_f2 f s).",
            "VernacStartTheoremProof",
            "c7aace7fa7943b49e9e51aa5a5f631aa150791c2"
        ],
        [
            "intros Hs Hf.",
            "VernacExtend",
            "d697a955d1704661182c6b4c98d90c3442441094"
        ],
        [
            "elim: s Hs => [ _ | h s].",
            "VernacExtend",
            "e686a1895f1799b840b76242f931100819a9ad6c"
        ],
        [
            "intros i Hi.",
            "VernacExtend",
            "1763a4b461e760b296ffbe398979e15770c7a1bd"
        ],
        [
            "by apply lt_n_O in Hi.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "case: s => [ | h' s] IH Hs.",
            "VernacExtend",
            "e00fff71ff314c991514fc71c41a3556702e444a"
        ],
        [
            "intros i Hi.",
            "VernacExtend",
            "1763a4b461e760b296ffbe398979e15770c7a1bd"
        ],
        [
            "by apply lt_n_O in Hi.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "case => [ | i] Hi.",
            "VernacExtend",
            "e00fff71ff314c991514fc71c41a3556702e444a"
        ],
        [
            "apply Hf, Hs.",
            "VernacExtend",
            "c71ab721fc3af9f86c1e61e1e2ba41f0d5f96029"
        ],
        [
            "apply IH.",
            "VernacExtend",
            "88103d45393d3ee3ab547447d913543854db8cea"
        ],
        [
            "apply Hs.",
            "VernacExtend",
            "26038359dfe6b0cb344439243c160e8be398bca9"
        ],
        [
            "by apply lt_S_n.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Definition SF_fun_f1 {T : Type} (f1 : R -> T) (P : seq R) x : T := SF_fun (SF_seq_f1 f1 P) (f1 0) x.",
            "VernacDefinition",
            "3c9140620773451afa298752ab49b5537a2fdba6"
        ],
        [
            "Definition SF_fun_f2 {T : Type} (f2 : R -> R -> T) (P : seq R) x := SF_fun (SF_seq_f2 f2 P) (f2 0 0) x.",
            "VernacDefinition",
            "be73d50e6e597fc333ee8395d7ead5307717a58b"
        ],
        [
            "Definition unif_part (a b : R) (n : nat) : seq R := mkseq (fun i => a + (INR i) * (b - a) / (INR n + 1)) (S (S n)).",
            "VernacDefinition",
            "faaa5143d919b0edd538ee7501943ac58b78a77e"
        ],
        [
            "Lemma unif_part_bound (a b : R) (n : nat) : unif_part a b n = rev (unif_part b a n).",
            "VernacStartTheoremProof",
            "3e30b956247452570cc24f673f6a633c94035018"
        ],
        [
            "apply (@eq_from_nth R 0) ; rewrite ?size_rev ?size_mkseq => // ; move => i Hi ; apply SSR_leq in Hi.",
            "VernacExtend",
            "9aab3a02dcb742cad16b5ebabe7d394fcb366230"
        ],
        [
            "rewrite nth_rev ?SSR_minus ?size_mkseq.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "2: now apply SSR_leq.",
            "VernacExtend",
            "79748894b552395ea4bed14aedf3800b0a22e0f1"
        ],
        [
            "rewrite ?nth_mkseq.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "3: now apply SSR_leq.",
            "VernacExtend",
            "42e9243b08ac52cd77a90fe9190db450a7387c9d"
        ],
        [
            "rewrite minus_INR ?S_INR => // ; field.",
            "VernacExtend",
            "94867b37d705f442a96504af98f4b60b3072c9d1"
        ],
        [
            "apply Rgt_not_eq, INRp1_pos.",
            "VernacExtend",
            "71d22a291ebd36fd007c76a06c2ef8ca6372df68"
        ],
        [
            "apply SSR_leq, INR_le ; rewrite ?S_INR minus_INR ?S_INR => //.",
            "VernacExtend",
            "3c4cb0d11fefdc659389c86b62a84b3513d1cda7"
        ],
        [
            "apply Rminus_le_0 ; ring_simplify.",
            "VernacExtend",
            "48c96302111e8edc2fcb95e79f4f71c3818d133f"
        ],
        [
            "apply pos_INR.",
            "VernacExtend",
            "0d9ef3d5703b4f3e1294027dac0f940b9f78b56e"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma unif_part_sort (a b : R) (n : nat) : a <= b -> sorted Rle (unif_part a b n).",
            "VernacStartTheoremProof",
            "b7a6991b04715d8499f78e75b230a1f0f965431f"
        ],
        [
            "move => Hab ; apply sorted_nth => i Hi x0 ; rewrite ?size_mkseq in Hi ; rewrite ?nth_mkseq ?S_INR ; [ |apply SSR_leq ; intuition | apply SSR_leq ; intuition ].",
            "VernacExtend",
            "21f1edca73433f626b4fbb066db37d2dc8ef3d4d"
        ],
        [
            "apply Rminus_le_0 ; field_simplify ; [| apply Rgt_not_eq ; intuition] ; rewrite ?Rdiv_1 ; apply Rdiv_le_0_compat ; intuition.",
            "VernacExtend",
            "d5bef96aba74e18274ac83adcec842bd718493b6"
        ],
        [
            "rewrite Rplus_comm ; by apply (proj1 (Rminus_le_0 _ _)).",
            "VernacExtend",
            "f9e2aad1e70f1876566a77bd0af96f52b3b81520"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma head_unif_part x0 (a b : R) (n : nat) : head x0 (unif_part a b n) = a.",
            "VernacStartTheoremProof",
            "0b8a03736c4d0ac0887a6d68e6810c287e273037"
        ],
        [
            "rewrite /= Rmult_0_l /Rdiv ; ring.",
            "VernacExtend",
            "43f1253beb869d2f2abb689d01038ec8d9cd33b6"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma last_unif_part x0 (a b : R) (n : nat) : last x0 (unif_part a b n) = b.",
            "VernacStartTheoremProof",
            "04993c5ad377915812a950b1e3f864443568d87b"
        ],
        [
            "rewrite (last_nth b) size_mkseq.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "replace (nth b (x0 :: unif_part a b n) (S (S n))) with (nth b (unif_part a b n) (S n)) by auto.",
            "VernacExtend",
            "467f4843747336e8f36eb12364dc54c207522b5a"
        ],
        [
            "rewrite nth_mkseq.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "rewrite S_INR ; field.",
            "VernacExtend",
            "978748f3924ddecb0b5c0d464fc313237f2af3c9"
        ],
        [
            "by apply Rgt_not_eq, INRp1_pos.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "by [].",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma unif_part_nat (a b : R) (n : nat) (x : R) : (a <= x <= b) -> {i : nat | nth 0 (unif_part a b n) i <= x < nth 0 (unif_part a b n) (S i) /\\ (S (S i) < size (unif_part a b n))%nat} + {nth 0 (unif_part a b n) (n) <= x <= nth 0 (unif_part a b n) (S n)}.",
            "VernacStartTheoremProof",
            "317c80fa6da8c1ed021bd2a03eb9c6e6be8be86d"
        ],
        [
            "move: (sorted_dec (unif_part a b n) 0 x) => Hdec Hx.",
            "VernacExtend",
            "b1b2cb7a3a617cba67460b4eca1f04de3c1cc716"
        ],
        [
            "have Hs : sorted Rle (unif_part a b n) ; [ apply unif_part_sort, Rle_trans with (r2 := x) ; intuition | move: (Hdec Hs) => {Hdec Hs} Hdec].",
            "VernacExtend",
            "dbb82d32a0d12169d8ab71a2b96aec262031ffeb"
        ],
        [
            "have Hx' : (head 0 (unif_part a b n) <= x <= last 0 (unif_part a b n)).",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "by rewrite head_unif_part last_unif_part.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "case: (Hdec Hx') => {Hdec Hx'} [[i Hi]|Hi].",
            "VernacExtend",
            "e00fff71ff314c991514fc71c41a3556702e444a"
        ],
        [
            "left ; by exists i.",
            "VernacExtend",
            "8d1d3855bd3af5f36952354b4669569e4c0e7e37"
        ],
        [
            "right ; rewrite size_mkseq /= in Hi ; intuition.",
            "VernacExtend",
            "d0c130ed95020a48e7fefe3ce0422c98ddd2985e"
        ],
        [
            "by rewrite -minus_n_O in H1.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma seq_step_unif_part (a b : R) (n : nat) : seq_step (unif_part a b n) = Rabs ((b - a) / (INR n + 1)).",
            "VernacStartTheoremProof",
            "f671b3b39c34218b149e8d799bb04498317ef093"
        ],
        [
            "assert (forall i, (S i < size (unif_part a b n))%nat -> (nth 0 (unif_part a b n) (S i) - nth 0 (unif_part a b n) i = (b - a) / (INR n + 1))%R).",
            "VernacExtend",
            "06dbc01c12ace89f2dbaeb83bccd788e5854b507"
        ],
        [
            "rewrite size_mkseq => i Hi.",
            "VernacExtend",
            "3c42b53d0efc26db114b00541ac5e7fcb29e6aeb"
        ],
        [
            "rewrite !nth_mkseq.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "rewrite S_INR /Rdiv /= ; ring.",
            "VernacExtend",
            "43f1253beb869d2f2abb689d01038ec8d9cd33b6"
        ],
        [
            "by apply SSR_leq, lt_le_weak.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "by apply SSR_leq.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "move: (eq_refl (size (unif_part a b n))).",
            "VernacExtend",
            "b1b2cb7a3a617cba67460b4eca1f04de3c1cc716"
        ],
        [
            "rewrite {2}size_mkseq.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "rewrite /seq_step ; elim: {2}(n) (unif_part a b n) H => [ | m IH] l //= ; destruct l as [ | x0 l] => //= ; destruct l as [ | x1 l] => //= ; destruct l as [ | x2 l] => //= ; intros.",
            "VernacExtend",
            "97f9ec343449f49bc5e090f3b636151f51d8b353"
        ],
        [
            "rewrite (H O).",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "rewrite Rmax_comm /Rmax ; case: Rle_dec => // H1.",
            "VernacExtend",
            "712d339e99ee17eb7d5033e19ac614eb3ca6b532"
        ],
        [
            "contradict H1 ; by apply Rabs_pos.",
            "VernacExtend",
            "9ea3455504f5b08394497bed6e3f82e2e09bb28e"
        ],
        [
            "by apply lt_n_S, lt_O_Sn.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "rewrite -(IH (x1::x2::l)) /=.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "rewrite (H O).",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "rewrite (H 1%nat).",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "rewrite Rmax_assoc.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "apply f_equal2 => //.",
            "VernacExtend",
            "3c42b53d0efc26db114b00541ac5e7fcb29e6aeb"
        ],
        [
            "rewrite /Rmax ; by case: Rle_dec.",
            "VernacExtend",
            "f9e2aad1e70f1876566a77bd0af96f52b3b81520"
        ],
        [
            "by apply lt_n_S, lt_n_S, lt_O_Sn.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "by apply lt_n_S, lt_O_Sn.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "now intros ; apply (H (S i)), lt_n_S.",
            "VernacExtend",
            "3d88e46585d06e737550203aaa01ff4b7cccadeb"
        ],
        [
            "by apply eq_add_S.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma seq_step_unif_part_ex (a b : R) (eps : posreal) : {n : nat | seq_step (unif_part a b n) < eps}.",
            "VernacStartTheoremProof",
            "8b0a790c72f4247b9e1cae346a441bdf39e3da24"
        ],
        [
            "destruct (nfloor_ex (Rabs ((b - a) / eps))) as [n Hn].",
            "VernacExtend",
            "4da687dfe280b7eb2b7e2a0a34f47a0efa08fa18"
        ],
        [
            "by apply Rabs_pos.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "exists n.",
            "VernacExtend",
            "a97204a252e0d9b7444ffed9b38570a756391511"
        ],
        [
            "rewrite seq_step_unif_part.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "rewrite Rabs_div.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "rewrite (Rabs_pos_eq (INR n + 1)).",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "apply Rlt_div_l.",
            "VernacExtend",
            "4198c2770a4c425c9ede77a90e885e8d7fd9f290"
        ],
        [
            "by apply INRp1_pos.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "rewrite Rmult_comm -Rlt_div_l.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "rewrite -(Rabs_pos_eq eps).",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "rewrite -Rabs_div.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "by apply Hn.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "by apply Rgt_not_eq, eps.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "by apply Rlt_le, eps.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "by apply eps.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "by apply Rlt_le, INRp1_pos.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "by apply Rgt_not_eq, INRp1_pos.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma unif_part_S a b n : unif_part a b (S n) = a :: unif_part ((a * INR (S n) + b) / INR (S (S n))) b n.",
            "VernacStartTheoremProof",
            "e1eee0663530fbbec0d3c941000368ba8dff809e"
        ],
        [
            "apply eq_from_nth with 0.",
            "VernacExtend",
            "2d7a1a08bd23a20ce2f435cf5608f28b012bb44b"
        ],
        [
            "by rewrite /= !size_map !size_iota.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "case => [ | i] Hi.",
            "VernacExtend",
            "e00fff71ff314c991514fc71c41a3556702e444a"
        ],
        [
            "by rewrite nth0 head_unif_part.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "change (nth 0 (a :: unif_part ((a * INR (S n) + b) / INR (S (S n))) b n) (S i)) with (nth 0 (unif_part ((a * INR (S n) + b) / INR (S (S n))) b n) i).",
            "VernacExtend",
            "43a0fb301e4d6b61ec83867288620f261d3f7c24"
        ],
        [
            "rewrite /unif_part size_mkseq in Hi.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "rewrite /unif_part !nth_mkseq ; try by intuition.",
            "VernacExtend",
            "768b2f88f8c65ebded32bd7dc9c8ffec8f100548"
        ],
        [
            "rewrite !S_INR ; field.",
            "VernacExtend",
            "978748f3924ddecb0b5c0d464fc313237f2af3c9"
        ],
        [
            "rewrite -!S_INR ; split ; apply sym_not_eq, (not_INR 0), O_S.",
            "VernacExtend",
            "d72ed98d74674ff5bc9a6304973a162c86b690ae"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Definition SF_val_seq {T} (f : R -> T) (a b : R) (n : nat) : SF_seq := SF_seq_f2 (fun x y => f ((x+y)/2)) (unif_part a b n).",
            "VernacDefinition",
            "a68192cc9629c33a37f881f71ca30d29b17eccf8"
        ],
        [
            "Definition SF_val_fun {T} (f : R -> T) (a b : R) (n : nat) (x : R) : T := SF_fun_f2 (fun x y => f ((x+y)/2)) (unif_part a b n) x.",
            "VernacDefinition",
            "38c5c02a3e99912b20894e06309bd8910425c1d7"
        ],
        [
            "Definition SF_val_ly {T} (f : R -> T) (a b : R) (n : nat) : seq T := behead (pairmap (fun x y => f ((x+y)/2)) 0 (unif_part a b n)).",
            "VernacDefinition",
            "04e041030543fffaa95c055526da15218293673c"
        ],
        [
            "Lemma SF_val_ly_bound {T} (f : R -> T) (a b : R) (n : nat) : SF_val_ly f a b n = rev (SF_val_ly f b a n).",
            "VernacStartTheoremProof",
            "0b87281b0c2ff9b3951ddc6caf1db5a76ae97742"
        ],
        [
            "rewrite /SF_val_ly (unif_part_bound b a).",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "case: (unif_part a b n) => [| h s] // ; elim: s h => [| h0 s IH] h //=.",
            "VernacExtend",
            "1821533cafd21deefc2f797d67a58b45e0a54e79"
        ],
        [
            "rewrite ?rev_cons.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "replace (pairmap (fun x y : R => f ((x + y) / 2)) 0 (rcons (rcons (rev s) h0) h)) with (rcons (pairmap (fun x y : R => f ((x + y) / 2)) 0 (rcons (rev s) h0)) (f ((h0+h)/2))).",
            "VernacExtend",
            "4b8fb03ead6410e71213f780e812fc0217a47708"
        ],
        [
            "rewrite behead_rcons.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "rewrite rev_rcons Rplus_comm -rev_cons -IH //.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "rewrite size_pairmap size_rcons ; apply lt_O_Sn.",
            "VernacExtend",
            "fdfb450e459e640f938772fd8a2e99682bbd4874"
        ],
        [
            "move: (0) h h0 {IH} ; apply rcons_ind with (s := s) => {s} [| s h1 IH] x0 h h0 //.",
            "VernacExtend",
            "8261237f0cda1915a4077c28869831c5329103ce"
        ],
        [
            "rewrite ?rev_rcons /= IH //.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma Riemann_fine_unif_part : forall (f : R -> R -> R) (a b : R) (n : nat), (forall a b, a <= b -> a <= f a b <= b) -> a <= b -> seq_step (SF_lx (SF_seq_f2 f (unif_part a b n))) <= (b - a) / (INR n + 1) /\\ pointed_subdiv (SF_seq_f2 f (unif_part a b n)) /\\ SF_h (SF_seq_f2 f (unif_part a b n)) = a /\\ last (SF_h (SF_seq_f2 f (unif_part a b n))) (SF_lx (SF_seq_f2 f (unif_part a b n))) = b.",
            "VernacStartTheoremProof",
            "3d8369f94c856cda0186c97999d83d7d1b03e48f"
        ],
        [
            "intros f a b n Hf Hab.",
            "VernacExtend",
            "a92f47f340fe5374eb66bf48c11c5643c8bb5f65"
        ],
        [
            "assert (Hab' : 0 <= (b - a) / (INR n + 1)).",
            "VernacExtend",
            "e9d53cf5b6803a188f555f4c365bad9806d61ab2"
        ],
        [
            "apply Rdiv_le_0_compat.",
            "VernacExtend",
            "693e22205d4e08285736e8c5e96457827d9a8003"
        ],
        [
            "apply -> Rminus_le_0.",
            "VernacExtend",
            "eb3010996ade724f542511d5c9a56441498f4fba"
        ],
        [
            "apply Hab.",
            "VernacExtend",
            "c308a650ed7a30bacb9ff3d65aa0dd3cb21cb89b"
        ],
        [
            "apply INRp1_pos.",
            "VernacExtend",
            "6d8a33bc49ba04ed52b7fbeba70394e66163cebe"
        ],
        [
            "unfold pointed_subdiv.",
            "VernacExtend",
            "d2af0b468680a0a3fb8e8e4e3f78368484dd9851"
        ],
        [
            "rewrite SF_lx_f2.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "change (head 0 (unif_part a b n) :: behead (unif_part a b n)) with (unif_part a b n).",
            "VernacExtend",
            "b7cda7b8b0b270dee45f2b84ca3931be73e0fc25"
        ],
        [
            "split ; [|split ; [|split]].",
            "VernacExtend",
            "9f9dfdc8a9fde325369bf664d94bf68296e553c1"
        ],
        [
            "-",
            "VernacBullet",
            "581cab4bf49fa4b495e569bbda96fc8d28fddcc0"
        ],
        [
            "cut (forall i, (S i < size (unif_part a b n))%nat -> nth 0 (unif_part a b n) (S i) - nth 0 (unif_part a b n) i = (b - a) / (INR n + 1)).",
            "VernacExtend",
            "b8a1478eecdb522083e1d9ca33bba724391502b4"
        ],
        [
            "+",
            "VernacBullet",
            "3ddfc0515f916e562bacf863647e0107cb15aa13"
        ],
        [
            "induction (unif_part a b n) as [|x0 l IHl].",
            "VernacExtend",
            "3de793b62fc37431d674adf2315832e10bd520a0"
        ],
        [
            "now intros _.",
            "VernacExtend",
            "db3aad803f621233dc9262991171dfa29e5f6a45"
        ],
        [
            "intros H.",
            "VernacExtend",
            "5cfae87a34fa7b59a257c9640f1b674f6e6d780b"
        ],
        [
            "destruct l as [|x1 l].",
            "VernacExtend",
            "0749af805e709d9687ff64c08fffc19bb08451db"
        ],
        [
            "easy.",
            "VernacExtend",
            "ef1368621ae14ed4e378e6e1c58fbee46db9a962"
        ],
        [
            "change (seq_step _) with (Rmax (Rabs (x1 - x0)) (seq_step (x1 :: l))).",
            "VernacExtend",
            "c5df9ac7c777cccf40a1592f7d401dfced62a8bb"
        ],
        [
            "apply Rmax_case.",
            "VernacExtend",
            "cfd24564dbeed7e74b25ea72bdae495929c2ce09"
        ],
        [
            "apply Req_le.",
            "VernacExtend",
            "b69ffc9461f465218c69f379ac293728d3f8e7bd"
        ],
        [
            "rewrite (H 0%nat).",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "now apply Rabs_pos_eq.",
            "VernacExtend",
            "75396bee7c94a0ff0662d73d206e806e73cbff2e"
        ],
        [
            "apply lt_n_S.",
            "VernacExtend",
            "3c5e09f79b5d536a7a60dd2965c3f0ec6c1930e5"
        ],
        [
            "apply lt_0_Sn.",
            "VernacExtend",
            "3b7fc375f7db460b98008b419d236f8a4eb151b4"
        ],
        [
            "apply IHl.",
            "VernacExtend",
            "af412c6009bba78f939aa53ab07dcd1baaf5888b"
        ],
        [
            "intros i Hi.",
            "VernacExtend",
            "1763a4b461e760b296ffbe398979e15770c7a1bd"
        ],
        [
            "apply (H (S i)).",
            "VernacExtend",
            "5c26573be7e3278777555977cec8642b1f2a87a5"
        ],
        [
            "now apply lt_n_S.",
            "VernacExtend",
            "e13da225a52f941785d7f3756e4f8c74639e4adf"
        ],
        [
            "+",
            "VernacBullet",
            "3ddfc0515f916e562bacf863647e0107cb15aa13"
        ],
        [
            "rewrite size_mkseq.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "intros i Hi.",
            "VernacExtend",
            "1763a4b461e760b296ffbe398979e15770c7a1bd"
        ],
        [
            "rewrite !nth_mkseq.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "rewrite S_INR.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "unfold Rdiv.",
            "VernacExtend",
            "d9820df68a5475147f48d29acf89824b27f71597"
        ],
        [
            "ring.",
            "VernacExtend",
            "baadd9fc4c175005af409bb466fcea9fab25b4e6"
        ],
        [
            "apply SSR_leq.",
            "VernacExtend",
            "597987155c8a9670919b8a50d2c4a34ea3d20c18"
        ],
        [
            "now apply lt_le_weak.",
            "VernacExtend",
            "011ffacd098aa65ac14a4c76fba8bc1bf047b12d"
        ],
        [
            "now apply SSR_leq.",
            "VernacExtend",
            "717fc1bc24198c3e04061cfb4973adf3661b9dd7"
        ],
        [
            "-",
            "VernacBullet",
            "581cab4bf49fa4b495e569bbda96fc8d28fddcc0"
        ],
        [
            "unfold pointed_subdiv.",
            "VernacExtend",
            "d2af0b468680a0a3fb8e8e4e3f78368484dd9851"
        ],
        [
            "rewrite SF_size_f2.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "rewrite size_mkseq.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "intros i Hi.",
            "VernacExtend",
            "1763a4b461e760b296ffbe398979e15770c7a1bd"
        ],
        [
            "rewrite SF_ly_f2.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "rewrite nth_behead.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "apply gt_S_le, SSR_leq in Hi.",
            "VernacExtend",
            "a54e433c549b221168568b4b8eb31d4026c5dafb"
        ],
        [
            "rewrite (nth_pairmap 0).",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "change (nth 0 (0 :: unif_part a b n) (S i)) with (nth 0 (unif_part a b n) i).",
            "VernacExtend",
            "08a927c25dfab65033bc447194e4e1ab935b2b7d"
        ],
        [
            "apply Hf.",
            "VernacExtend",
            "44e8b4102d20ba355038f72fc52240fc6cb8650c"
        ],
        [
            "rewrite !nth_mkseq //.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "rewrite S_INR.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "lra.",
            "VernacExtend",
            "c37bca18aec699b6843eab75e25df2491e3b9848"
        ],
        [
            "now apply ssrnat.leqW.",
            "VernacExtend",
            "db4e9437ea8b4b94f2637f2d034f7a2abc64dce8"
        ],
        [
            "by rewrite size_mkseq.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "-",
            "VernacBullet",
            "581cab4bf49fa4b495e569bbda96fc8d28fddcc0"
        ],
        [
            "apply head_unif_part.",
            "VernacExtend",
            "b0bceba99846c59838f47a6d860d83d99fdf8e31"
        ],
        [
            "-",
            "VernacBullet",
            "581cab4bf49fa4b495e569bbda96fc8d28fddcc0"
        ],
        [
            "apply last_unif_part.",
            "VernacExtend",
            "3b49fd4fd44633dd2b027307aeaaab4b7662851f"
        ],
        [
            "rewrite size_mkseq ; by apply lt_O_Sn.",
            "VernacExtend",
            "f9e2aad1e70f1876566a77bd0af96f52b3b81520"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Definition Riemann_fine (a b : R) := within (fun ptd => pointed_subdiv ptd /\\ SF_h ptd = Rmin a b /\\ last (SF_h ptd) (SF_lx ptd) = Rmax a b) (locally_dist (fun ptd => seq_step (SF_lx ptd))).",
            "VernacDefinition",
            "ff5b990f2f03b3e6d4c9bf926c2e66018dfa9e98"
        ],
        [
            "Global Instance Riemann_fine_filter : forall a b, ProperFilter (Riemann_fine a b).",
            "VernacInstance",
            "f7cf613a73d8967cb2ba0eeb5088526b8abe580b"
        ],
        [
            "intros a b.",
            "VernacExtend",
            "8c4941fda9d591147c446ef6e06d248ec0e6bf7a"
        ],
        [
            "constructor.",
            "VernacExtend",
            "3c77e6be855b5086df5e918bf2a0537e1010479a"
        ],
        [
            "-",
            "VernacBullet",
            "581cab4bf49fa4b495e569bbda96fc8d28fddcc0"
        ],
        [
            "intros P [alpha H].",
            "VernacExtend",
            "0e1d0b115a0d9a19f74911fb719c300d9e1d44ba"
        ],
        [
            "assert (Hab : Rmin a b <= Rmax a b).",
            "VernacExtend",
            "0743b314770f7d8fecd37d2403512d480a783f34"
        ],
        [
            "apply Rmax_case.",
            "VernacExtend",
            "cfd24564dbeed7e74b25ea72bdae495929c2ce09"
        ],
        [
            "apply Rmin_l.",
            "VernacExtend",
            "19942458506c6b3427aea84d1ee7179f00e19f1c"
        ],
        [
            "apply Rmin_r.",
            "VernacExtend",
            "d165954e4d055817b42cbc8960efd3fee45e4f16"
        ],
        [
            "assert (Hn : 0 <= ((Rmax a b - Rmin a b) / alpha)).",
            "VernacExtend",
            "de0cff3f039663d4edbfecf90c61fcb039cbe6f9"
        ],
        [
            "apply Rdiv_le_0_compat.",
            "VernacExtend",
            "693e22205d4e08285736e8c5e96457827d9a8003"
        ],
        [
            "apply -> Rminus_le_0.",
            "VernacExtend",
            "eb3010996ade724f542511d5c9a56441498f4fba"
        ],
        [
            "apply Hab.",
            "VernacExtend",
            "c308a650ed7a30bacb9ff3d65aa0dd3cb21cb89b"
        ],
        [
            "apply cond_pos.",
            "VernacExtend",
            "8ddb865849694c081c727a4dcd01494f171e402e"
        ],
        [
            "set n := (nfloor _ Hn).",
            "VernacExtend",
            "69a61e99b234580f7b41fa5b9655c87ba9a76f70"
        ],
        [
            "exists (SF_seq_f2 (fun x y => x) (unif_part (Rmin a b) (Rmax a b) n)).",
            "VernacExtend",
            "41ba7daeb40e0364b7ea16af0bb83964b13bfea6"
        ],
        [
            "destruct (Riemann_fine_unif_part (fun x y => x) (Rmin a b) (Rmax a b) n).",
            "VernacExtend",
            "2acc27bd5790de8e1288ffeea433b0a104aba50d"
        ],
        [
            "intros u v Huv.",
            "VernacExtend",
            "c59a5590067caf30f060cb4ee9822eca158778e8"
        ],
        [
            "split.",
            "VernacExtend",
            "55abc140132bd88981001ac656020469a8d503eb"
        ],
        [
            "apply Rle_refl.",
            "VernacExtend",
            "0a60a50353d5cfa9a4ade0240c47d5160d6d423c"
        ],
        [
            "exact Huv.",
            "VernacExtend",
            "80a538f09eff8e8adb82553ad067398e9f6557a4"
        ],
        [
            "exact Hab.",
            "VernacExtend",
            "f3d0f5752a150a91e25c080a5fc3ae0ed192bc4f"
        ],
        [
            "apply H.",
            "VernacExtend",
            "4b47b71ad0f800d57cbdc591d68949e07decb540"
        ],
        [
            "apply Rle_lt_trans with (1 := H0).",
            "VernacExtend",
            "c5a9efbfb5d03556d102a4aa69a797776aa68931"
        ],
        [
            "apply Rlt_div_l.",
            "VernacExtend",
            "4198c2770a4c425c9ede77a90e885e8d7fd9f290"
        ],
        [
            "apply INRp1_pos.",
            "VernacExtend",
            "6d8a33bc49ba04ed52b7fbeba70394e66163cebe"
        ],
        [
            "unfold n, nfloor.",
            "VernacExtend",
            "c6098d294bc13be32e9f174d47f32d1466dd8088"
        ],
        [
            "destruct nfloor_ex as [n' Hn'].",
            "VernacExtend",
            "9b13b0ede1797d2ee044a8536296ec7f1c157e86"
        ],
        [
            "simpl.",
            "VernacExtend",
            "1b93169f4cf876d207c1fab22a2347202ab48d85"
        ],
        [
            "rewrite Rmult_comm.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "apply Rlt_div_l.",
            "VernacExtend",
            "4198c2770a4c425c9ede77a90e885e8d7fd9f290"
        ],
        [
            "apply cond_pos.",
            "VernacExtend",
            "8ddb865849694c081c727a4dcd01494f171e402e"
        ],
        [
            "apply Hn'.",
            "VernacExtend",
            "065665c7b826721bd7b9fc2408982b5fed908cf1"
        ],
        [
            "exact H1.",
            "VernacExtend",
            "c03ab82d1e411e1dcd211c59917a4946e039be00"
        ],
        [
            "-",
            "VernacBullet",
            "581cab4bf49fa4b495e569bbda96fc8d28fddcc0"
        ],
        [
            "apply within_filter.",
            "VernacExtend",
            "ad2c39ad901989af0ce9518a241c290a5ebf7a54"
        ],
        [
            "apply locally_dist_filter.",
            "VernacExtend",
            "d2de2fe8109dc1462fd2050cb75679cc80d0fc26"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Section Riemann_sum.",
            "VernacBeginSection",
            "88fdbbdbc5b0ffb0825639a3596cc016922d154b"
        ],
        [
            "Context {V : ModuleSpace R_Ring}.",
            "VernacContext",
            "488402a5a07f07b5e36d6a85540c8b09ebb1a645"
        ],
        [
            "Definition Riemann_sum (f : R -> V) (ptd : SF_seq) : V := foldr plus zero (pairmap (fun x y => (scal (fst y - fst x) (f (snd y)))) (SF_h ptd,zero) (SF_t ptd)).",
            "VernacDefinition",
            "1cb2f68fcbb73820ee376f3412b192560f2d200d"
        ],
        [
            "Lemma Riemann_sum_cons (f : R -> V) (h0 : R * R) (ptd : SF_seq) : Riemann_sum f (SF_cons h0 ptd) = plus (scal (SF_h ptd - fst h0) (f (snd h0))) (Riemann_sum f ptd).",
            "VernacStartTheoremProof",
            "dcb8c7b2f7355a72bb6787a7739e540bfddb8b3f"
        ],
        [
            "rewrite /Riemann_sum /=.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "case: h0 => x0 y0 ; apply SF_cons_dec with (s := ptd) => {ptd} [ x1 | [x1 y1] ptd ] //=.",
            "VernacExtend",
            "ba44c9d0281a02110ce54645304e6d990debd9c0"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma Riemann_sum_rcons (f : R -> V) ptd l0 : Riemann_sum f (SF_rcons ptd l0) = plus (Riemann_sum f ptd) (scal (fst l0 - last (SF_h ptd) (SF_lx ptd)) (f (snd l0))).",
            "VernacStartTheoremProof",
            "1f739843c65edf6756d2f156bf147cdc8baebb20"
        ],
        [
            "rewrite /Riemann_sum .",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "case: l0 => x0 y0.",
            "VernacExtend",
            "e00fff71ff314c991514fc71c41a3556702e444a"
        ],
        [
            "apply SF_rcons_dec with (s := ptd) => {ptd} [ x1 | ptd [x1 y1]].",
            "VernacExtend",
            "3c42b53d0efc26db114b00541ac5e7fcb29e6aeb"
        ],
        [
            "apply plus_comm.",
            "VernacExtend",
            "12475eb4e354334e12b009d49112b8335e8ec9d3"
        ],
        [
            "rewrite ?SF_map_rcons /=.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "rewrite pairmap_rcons foldr_rcons /=.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "rewrite unzip1_rcons last_rcons /=.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "set l := pairmap _ _ _.",
            "VernacExtend",
            "69a61e99b234580f7b41fa5b9655c87ba9a76f70"
        ],
        [
            "induction l ; simpl.",
            "VernacExtend",
            "4ae00a4cb6decae1eaa2f9b701c4f4e7bd0ec6f4"
        ],
        [
            "apply plus_comm.",
            "VernacExtend",
            "12475eb4e354334e12b009d49112b8335e8ec9d3"
        ],
        [
            "rewrite IHl.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "apply plus_assoc.",
            "VernacExtend",
            "5c8500d0c0d17e956744e0d6883f7a9255a616e9"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma Riemann_sum_zero (f : R -> V) ptd : SF_sorted Rle ptd -> SF_h ptd = last (SF_h ptd) (SF_lx ptd) -> Riemann_sum f ptd = zero.",
            "VernacStartTheoremProof",
            "4b5407519e163890abad73d11cdbc868169d2721"
        ],
        [
            "apply SF_cons_ind with (s := ptd) => {ptd} [x0 | [x0 y0] ptd IH] //= Hs Hhl.",
            "VernacExtend",
            "3c42b53d0efc26db114b00541ac5e7fcb29e6aeb"
        ],
        [
            "rewrite Riemann_sum_cons IH /= => {IH}.",
            "VernacExtend",
            "3c42b53d0efc26db114b00541ac5e7fcb29e6aeb"
        ],
        [
            "replace x0 with (SF_h ptd).",
            "VernacExtend",
            "ba9e89fa61d21f041f38fc99551a5430e76bc38b"
        ],
        [
            "rewrite Rminus_eq_0.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "rewrite plus_zero_r.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "by apply: scal_zero_l.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "apply Rle_antisym.",
            "VernacExtend",
            "8e9431fb6db6f151160007e68131f4f5cb1c7968"
        ],
        [
            "rewrite Hhl => {Hhl} /=.",
            "VernacExtend",
            "3c42b53d0efc26db114b00541ac5e7fcb29e6aeb"
        ],
        [
            "apply (sorted_last (SF_h ptd :: @map (R*R) R (@fst R R) (SF_t ptd)) O) with (x0 := 0).",
            "VernacExtend",
            "c17ba1dc4dcec33414284525e99de0d58036e2b2"
        ],
        [
            "replace ((SF_h ptd) :: map _ _) with (SF_lx ptd).",
            "VernacExtend",
            "6e99aea21e0eda63215189e505efd5bcb77751dd"
        ],
        [
            "apply Hs.",
            "VernacExtend",
            "26038359dfe6b0cb344439243c160e8be398bca9"
        ],
        [
            "apply SF_cons_ind with (s := ptd) => {ptd Hs} [x1 | [x1 y1] ptd IH] //=.",
            "VernacExtend",
            "3c42b53d0efc26db114b00541ac5e7fcb29e6aeb"
        ],
        [
            "apply lt_O_Sn.",
            "VernacExtend",
            "227f4ac630f07060fd7f3ffc8bcfa421aedc8a90"
        ],
        [
            "apply Hs.",
            "VernacExtend",
            "26038359dfe6b0cb344439243c160e8be398bca9"
        ],
        [
            "apply Hs.",
            "VernacExtend",
            "26038359dfe6b0cb344439243c160e8be398bca9"
        ],
        [
            "apply Rle_antisym.",
            "VernacExtend",
            "8e9431fb6db6f151160007e68131f4f5cb1c7968"
        ],
        [
            "apply (sorted_last (SF_h ptd :: @map (R*R) R (@fst R R) (SF_t ptd)) O) with (x0 := 0).",
            "VernacExtend",
            "c17ba1dc4dcec33414284525e99de0d58036e2b2"
        ],
        [
            "replace ((SF_h ptd) :: map _ _) with (SF_lx ptd).",
            "VernacExtend",
            "6e99aea21e0eda63215189e505efd5bcb77751dd"
        ],
        [
            "apply Hs.",
            "VernacExtend",
            "26038359dfe6b0cb344439243c160e8be398bca9"
        ],
        [
            "apply SF_cons_ind with (s := ptd) => {ptd Hs Hhl} [x1 | [x1 y1] ptd IH] //=.",
            "VernacExtend",
            "3c42b53d0efc26db114b00541ac5e7fcb29e6aeb"
        ],
        [
            "apply lt_O_Sn.",
            "VernacExtend",
            "227f4ac630f07060fd7f3ffc8bcfa421aedc8a90"
        ],
        [
            "move: Hhl ; rewrite -?(last_map (@fst R R)) /= => <- ; apply Hs.",
            "VernacExtend",
            "48aba7f73cc2918f6b04c8e3be94087daaf0dcc4"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma Riemann_sum_map (f : R -> V) (g : R -> R) ptd : Riemann_sum (fun x => f (g x)) ptd = Riemann_sum f (SF_map g ptd).",
            "VernacStartTheoremProof",
            "9eafedbbb38d12c84f39942e2e766e70ced89dec"
        ],
        [
            "apply SF_cons_ind with (s := ptd) => {ptd} [x0 | h ptd IH].",
            "VernacExtend",
            "3c42b53d0efc26db114b00541ac5e7fcb29e6aeb"
        ],
        [
            "by [].",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "rewrite SF_map_cons !Riemann_sum_cons /=.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "by rewrite IH.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma Riemann_sum_const (v : V) ptd : Riemann_sum (fun _ => v) ptd = scal (last (SF_h ptd) (SF_lx ptd) - SF_h ptd) v.",
            "VernacStartTheoremProof",
            "fa7240d04ff1f1fba9967a03f781ca63a31ce6e6"
        ],
        [
            "apply SF_cons_ind with (s := ptd) => {ptd} [x0 | [x0 y0] s IH] /=.",
            "VernacExtend",
            "3c42b53d0efc26db114b00541ac5e7fcb29e6aeb"
        ],
        [
            "by rewrite /Riemann_sum /= Rminus_eq_0 scal_zero_l.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "rewrite Riemann_sum_cons IH /=.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "rewrite -scal_distr_r /=.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "apply (f_equal (fun x => scal x v)).",
            "VernacExtend",
            "fa2bea75beae0970e8bc12e107e88e54eb5736a2"
        ],
        [
            "rewrite /plus /=.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "ring.",
            "VernacExtend",
            "baadd9fc4c175005af409bb466fcea9fab25b4e6"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma Riemann_sum_scal (a : R) (f : R -> V) ptd : Riemann_sum (fun x => scal a (f x)) ptd = scal a (Riemann_sum f ptd).",
            "VernacStartTheoremProof",
            "6dc265cda6f10e7d56a1dd80093b5b7ae430ff24"
        ],
        [
            "apply SF_cons_ind with (s := ptd) => {ptd} /= [x0 | [x0 y0] s IH].",
            "VernacExtend",
            "3c42b53d0efc26db114b00541ac5e7fcb29e6aeb"
        ],
        [
            "rewrite /Riemann_sum /=.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "apply sym_eq.",
            "VernacExtend",
            "f01eb728d9ceeac2915c66b52a7b50a0c452e949"
        ],
        [
            "apply @scal_zero_r.",
            "VernacExtend",
            "a5ec510015a02aadeb394c4d29806a31e02a535b"
        ],
        [
            "rewrite !Riemann_sum_cons /= IH.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "rewrite scal_distr_l.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "apply f_equal with (f := fun v => plus v _).",
            "VernacExtend",
            "5ffd68ed4e5b34824d7a7d780182c14d53255346"
        ],
        [
            "rewrite 2!scal_assoc.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "by rewrite /mult /= Rmult_comm.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma Riemann_sum_opp (f : R -> V) ptd : Riemann_sum (fun x => opp (f x)) ptd = opp (Riemann_sum f ptd).",
            "VernacStartTheoremProof",
            "081079f55007cf6043411c8b3ec42e636bd26b66"
        ],
        [
            "apply SF_cons_ind with (s := ptd) => {ptd} /= [x0 | [x0 y0] s IH].",
            "VernacExtend",
            "3c42b53d0efc26db114b00541ac5e7fcb29e6aeb"
        ],
        [
            "rewrite /Riemann_sum /=.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "apply sym_eq, @opp_zero.",
            "VernacExtend",
            "7f55c61369df55e5e6c6238c5900063bd7c1e6cb"
        ],
        [
            "rewrite !Riemann_sum_cons /= IH.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "rewrite opp_plus.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "apply f_equal with (f := fun v => plus v (opp (Riemann_sum f s))).",
            "VernacExtend",
            "daf1232b1075de0db59ef6babfb83b99ab81efba"
        ],
        [
            "apply scal_opp_r.",
            "VernacExtend",
            "35fac7292ab6246d658ed3b8ff78d59202a7194f"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma Riemann_sum_plus (f g : R -> V) ptd : Riemann_sum (fun x => plus (f x) (g x)) ptd = plus (Riemann_sum f ptd) (Riemann_sum g ptd).",
            "VernacStartTheoremProof",
            "abcf676b6fd859e34c01825c39884988b783a758"
        ],
        [
            "apply SF_cons_ind with (s := ptd) => {ptd} /= [x0 | [x0 y0] s IH].",
            "VernacExtend",
            "3c42b53d0efc26db114b00541ac5e7fcb29e6aeb"
        ],
        [
            "rewrite /Riemann_sum /=.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "apply sym_eq, @plus_zero_l.",
            "VernacExtend",
            "92a0338fd90d1986d53da8d5026f0b9b6773b691"
        ],
        [
            "rewrite !Riemann_sum_cons /= ; rewrite IH.",
            "VernacExtend",
            "2194fcb4d6d52cbae24a29f7ff14a3997f1912fd"
        ],
        [
            "rewrite scal_distr_l.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "rewrite -!plus_assoc.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "apply f_equal.",
            "VernacExtend",
            "ba856cbef3c8e84dcef77c91c8515b497874875b"
        ],
        [
            "rewrite !plus_assoc.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "apply (f_equal (fun x => plus x (Riemann_sum g s))).",
            "VernacExtend",
            "68b853bcdaffadf0e6953d487f00025f798d250d"
        ],
        [
            "apply plus_comm.",
            "VernacExtend",
            "12475eb4e354334e12b009d49112b8335e8ec9d3"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma Riemann_sum_minus (f g : R -> V) ptd : Riemann_sum (fun x => minus (f x) (g x)) ptd = minus (Riemann_sum f ptd) (Riemann_sum g ptd).",
            "VernacStartTheoremProof",
            "5dac69bb682da45011398497069083d4d59c911e"
        ],
        [
            "unfold minus.",
            "VernacExtend",
            "eaede5182dbc40e4f7fe412bffb3a50f68f73568"
        ],
        [
            "rewrite -Riemann_sum_opp.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "apply Riemann_sum_plus.",
            "VernacExtend",
            "df4ca256f50c2fbe72a4789da47d1a01bfcedbb6"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "End Riemann_sum.",
            "VernacEndSegment",
            "5693867c26f6c36242870251dac303ef8b1ed148"
        ],
        [
            "Section Riemann_sum_Normed.",
            "VernacBeginSection",
            "645a34660e1669242ecfa5e05fd030eaa8247f7f"
        ],
        [
            "Context {V : NormedModule R_AbsRing}.",
            "VernacContext",
            "5d56ede25ce8804229ff69d29b81c4721f84018a"
        ],
        [
            "Lemma Riemann_sum_Chasles_0 (f : R -> V) (M : R) (x : R) ptd : forall (eps : posreal), (forall x, SF_h ptd <= x <= last (SF_h ptd) (SF_lx ptd) -> norm (f x) < M) -> SF_h ptd <= x <= last (SF_h ptd) (SF_lx ptd) -> pointed_subdiv ptd -> seq_step (SF_lx ptd) < eps -> norm (minus (plus (Riemann_sum f (SF_cut_down ptd x)) (Riemann_sum f (SF_cut_up ptd x))) (Riemann_sum f ptd)) < 2 * eps * M.",
            "VernacStartTheoremProof",
            "0fc3dc0bae1989badb25b7473f8cb4090e351bc3"
        ],
        [
            "intros eps.",
            "VernacExtend",
            "786caed5d6705ffc7435ecfd5604e33c6ecd43f1"
        ],
        [
            "apply (SF_cons_ind (T := R)) with (s := ptd) => {ptd} /= [ x0 | [x0 y1] ptd IH] /= Hfx [ Hx0 Hl] Hptd Hstep.",
            "VernacExtend",
            "3c42b53d0efc26db114b00541ac5e7fcb29e6aeb"
        ],
        [
            "+",
            "VernacBullet",
            "3ddfc0515f916e562bacf863647e0107cb15aa13"
        ],
        [
            "rewrite (Rle_antisym _ _ Hx0 Hl) ; clear -Hfx.",
            "VernacExtend",
            "fa33550cc7890662c01033fe78dd581cd0db0c2f"
        ],
        [
            "rewrite /Riemann_sum /=.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "case: Rle_dec (Rle_refl x) => //= _ _.",
            "VernacExtend",
            "e00fff71ff314c991514fc71c41a3556702e444a"
        ],
        [
            "rewrite ?plus_zero_r Rminus_eq_0.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "rewrite scal_zero_l.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "rewrite /minus plus_zero_l norm_opp norm_zero.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "apply Rmult_lt_0_compat.",
            "VernacExtend",
            "c57ce258f04cdf6d200ca0efb8bd86c726436bf7"
        ],
        [
            "apply Rmult_lt_0_compat.",
            "VernacExtend",
            "c57ce258f04cdf6d200ca0efb8bd86c726436bf7"
        ],
        [
            "by apply Rlt_0_2.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "by apply eps.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "by apply Rle_lt_trans with (2:= (Hfx x0 (conj (Rle_refl _) (Rle_refl _)))), norm_ge_0.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "+",
            "VernacBullet",
            "3ddfc0515f916e562bacf863647e0107cb15aa13"
        ],
        [
            "case: (Rle_dec (SF_h ptd) x) => Hx1.",
            "VernacExtend",
            "e00fff71ff314c991514fc71c41a3556702e444a"
        ],
        [
            "-",
            "VernacBullet",
            "581cab4bf49fa4b495e569bbda96fc8d28fddcc0"
        ],
        [
            "replace (minus (plus (Riemann_sum f (SF_cut_down (SF_cons (x0, y1) ptd) x)) (Riemann_sum f (SF_cut_up (SF_cons (x0, y1) ptd) x))) (Riemann_sum f (SF_cons (x0, y1) ptd))) with (minus (plus (Riemann_sum f (SF_cut_down ptd x)) (Riemann_sum f (SF_cut_up ptd x))) (Riemann_sum f ptd)).",
            "VernacExtend",
            "d579bcb9bfe1d972ec6a8e6cdc7b7e979c3ae821"
        ],
        [
            "apply IH.",
            "VernacExtend",
            "88103d45393d3ee3ab547447d913543854db8cea"
        ],
        [
            "intros y Hy.",
            "VernacExtend",
            "d610d987f827782ed7ad408419c9743f4107dcdc"
        ],
        [
            "apply Hfx.",
            "VernacExtend",
            "0bac3501bbf18d129364e2cd3542de1ad4bac227"
        ],
        [
            "split.",
            "VernacExtend",
            "55abc140132bd88981001ac656020469a8d503eb"
        ],
        [
            "apply Rle_trans with y1.",
            "VernacExtend",
            "a4c647874fbeb068b84601d48c635bf0b87b4232"
        ],
        [
            "by apply (Hptd O (lt_O_Sn _)).",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "apply Rle_trans with (SF_h ptd).",
            "VernacExtend",
            "e1ea0550bff1b1baaf0daa741cb2c3fdc11c853f"
        ],
        [
            "by apply (Hptd O (lt_O_Sn _)).",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "by apply Hy.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "by apply Hy.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "by split.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "by apply ptd_cons in Hptd.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "apply Rle_lt_trans with (2 := Hstep).",
            "VernacExtend",
            "191245f2fee6e3ef180f76b0596fd7b13639c377"
        ],
        [
            "by apply Rmax_r.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "rewrite SF_cut_down_cons_2.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "rewrite SF_cut_up_cons_2.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "rewrite /minus 2?(Riemann_sum_cons _ (x0, y1)) SF_cut_down_h.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "rewrite opp_plus plus_assoc /=.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "apply (f_equal (fun x => plus x _)).",
            "VernacExtend",
            "e5bdffcab497f88a1ab54539befd19e2297fbd99"
        ],
        [
            "rewrite (plus_comm (scal (SF_h ptd - x0) (f y1))) -2!plus_assoc.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "apply f_equal.",
            "VernacExtend",
            "ba856cbef3c8e84dcef77c91c8515b497874875b"
        ],
        [
            "by rewrite plus_comm -plus_assoc plus_opp_l plus_zero_r.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "by [].",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "split ; [ | apply Hx1].",
            "VernacExtend",
            "f91e05b8cb417b43b1e250255d94d338b73ee9d8"
        ],
        [
            "apply Rle_trans with y1 ; by apply (Hptd O (lt_O_Sn _)).",
            "VernacExtend",
            "5b2dc586085377cca4f73883348ab1b1f580ca65"
        ],
        [
            "split ; [ | apply Hx1].",
            "VernacExtend",
            "f91e05b8cb417b43b1e250255d94d338b73ee9d8"
        ],
        [
            "apply Rle_trans with y1 ; by apply (Hptd O (lt_O_Sn _)).",
            "VernacExtend",
            "5b2dc586085377cca4f73883348ab1b1f580ca65"
        ],
        [
            "-",
            "VernacBullet",
            "581cab4bf49fa4b495e569bbda96fc8d28fddcc0"
        ],
        [
            "apply Rnot_le_lt in Hx1.",
            "VernacExtend",
            "4c1a28ba6ebe8caed85d18d8efd8d1327e3a20bc"
        ],
        [
            "rewrite SF_cut_down_cons_1 /=.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "rewrite SF_cut_up_cons_1 /=.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "rewrite 3!Riemann_sum_cons /= => {IH}.",
            "VernacExtend",
            "3c42b53d0efc26db114b00541ac5e7fcb29e6aeb"
        ],
        [
            "replace (Riemann_sum f (SF_nil x) : V) with (zero : V) by auto.",
            "VernacExtend",
            "25ba10360ed10244d94bf685392639ab6630c3e5"
        ],
        [
            "rewrite plus_zero_r /minus opp_plus.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "rewrite (plus_comm (opp (scal (SF_h ptd - x0) (f y1)))).",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "rewrite ?plus_assoc -(plus_assoc _ _ (opp (Riemann_sum f ptd))).",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "rewrite plus_opp_r plus_zero_r.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "rewrite -scal_opp_l.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "rewrite /opp /= Ropp_minus_distr.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "rewrite /Rmin /Rmax ; case: Rle_dec => _.",
            "VernacExtend",
            "712d339e99ee17eb7d5033e19ac614eb3ca6b532"
        ],
        [
            "rewrite (plus_comm (scal (x - x0) (f y1))) -plus_assoc.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "rewrite -scal_distr_r /plus /= -/plus.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "ring_simplify (x - x0 + (x0 - SF_h ptd)).",
            "VernacExtend",
            "372832ada742b262153536edc87c78fdf1410f2d"
        ],
        [
            "eapply Rle_lt_trans.",
            "VernacExtend",
            "51df35c21ed37a72940fad0733f4416a5ba5669c"
        ],
        [
            "apply @norm_triangle.",
            "VernacExtend",
            "85c8761fbfefc33c72371b73f65134f967a6f807"
        ],
        [
            "replace (2 * eps * M) with (eps * M + eps * M) by ring.",
            "VernacExtend",
            "2f5876accec35f8bed6e14cbd08a08a34ce5e347"
        ],
        [
            "apply Rplus_lt_compat ; eapply Rle_lt_trans ; try (apply @norm_scal) ; apply Rmult_le_0_lt_compat.",
            "VernacExtend",
            "6b792fcd5aed3007237963f1c6bdb3ac6f2e5ded"
        ],
        [
            "by apply Rabs_pos.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "by apply norm_ge_0.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "apply Rle_lt_trans with (2 := Hstep).",
            "VernacExtend",
            "191245f2fee6e3ef180f76b0596fd7b13639c377"
        ],
        [
            "apply Rle_trans with (2 := Rmax_l _ _).",
            "VernacExtend",
            "71359a389bd939cc6dea91cb2e0a00babb930fa5"
        ],
        [
            "simpl.",
            "VernacExtend",
            "1b93169f4cf876d207c1fab22a2347202ab48d85"
        ],
        [
            "apply Rlt_le in Hx1.",
            "VernacExtend",
            "fe74a8e85bb54b95cc1b09db0c9611d15b599cdb"
        ],
        [
            "move: (Rle_trans _ _ _ Hx0 Hx1) => Hx0'.",
            "VernacExtend",
            "b1b2cb7a3a617cba67460b4eca1f04de3c1cc716"
        ],
        [
            "apply Rminus_le_0 in Hx1.",
            "VernacExtend",
            "9fad86db2c74974952449a8e4d44feda5cbed5aa"
        ],
        [
            "apply Rminus_le_0 in Hx0'.",
            "VernacExtend",
            "be07714f19e45af7ddb209ae3809dab687103967"
        ],
        [
            "rewrite /abs /= ?Rabs_pos_eq //.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "by apply Rplus_le_compat_l, Ropp_le_contravar.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "apply Hfx.",
            "VernacExtend",
            "0bac3501bbf18d129364e2cd3542de1ad4bac227"
        ],
        [
            "by split.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "by apply Rabs_pos.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "by apply norm_ge_0.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "apply Rle_lt_trans with (2 := Hstep).",
            "VernacExtend",
            "191245f2fee6e3ef180f76b0596fd7b13639c377"
        ],
        [
            "apply Rle_trans with (2 := Rmax_l _ _).",
            "VernacExtend",
            "71359a389bd939cc6dea91cb2e0a00babb930fa5"
        ],
        [
            "rewrite /abs /plus /= -Ropp_minus_distr Rabs_Ropp.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "apply Rlt_le in Hx1.",
            "VernacExtend",
            "fe74a8e85bb54b95cc1b09db0c9611d15b599cdb"
        ],
        [
            "move: (Rle_trans _ _ _ Hx0 Hx1) => Hx0'.",
            "VernacExtend",
            "b1b2cb7a3a617cba67460b4eca1f04de3c1cc716"
        ],
        [
            "apply Rminus_le_0 in Hx1.",
            "VernacExtend",
            "9fad86db2c74974952449a8e4d44feda5cbed5aa"
        ],
        [
            "apply Rminus_le_0 in Hx0'.",
            "VernacExtend",
            "be07714f19e45af7ddb209ae3809dab687103967"
        ],
        [
            "rewrite ?Rabs_pos_eq //.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "by apply Rplus_le_compat_l, Ropp_le_contravar.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "apply Hfx.",
            "VernacExtend",
            "0bac3501bbf18d129364e2cd3542de1ad4bac227"
        ],
        [
            "split.",
            "VernacExtend",
            "55abc140132bd88981001ac656020469a8d503eb"
        ],
        [
            "apply (Hptd O (lt_O_Sn _)).",
            "VernacExtend",
            "7beefd7a817b6ff454f9772d9f270f49025cc2c9"
        ],
        [
            "apply Rle_trans with (SF_h ptd).",
            "VernacExtend",
            "e1ea0550bff1b1baaf0daa741cb2c3fdc11c853f"
        ],
        [
            "apply (Hptd O (lt_O_Sn _)).",
            "VernacExtend",
            "7beefd7a817b6ff454f9772d9f270f49025cc2c9"
        ],
        [
            "apply (fun H => sorted_last ((SF_h ptd) :: (unzip1 (SF_t ptd))) O H (lt_O_Sn _) (SF_h ptd)).",
            "VernacExtend",
            "840fc94c48f503e5c2495e0d327bfbea5b536d85"
        ],
        [
            "apply ptd_sort in Hptd.",
            "VernacExtend",
            "c35e5fec041e7a27e62c87e4e0d52f0c5f2077de"
        ],
        [
            "by apply Hptd.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "rewrite -plus_assoc -scal_distr_r /plus /= -/plus.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "replace (SF_h ptd - x + (x0 - SF_h ptd)) with (opp (x - x0)) by (rewrite /opp /= ; ring).",
            "VernacExtend",
            "c5aa8b6a8db48e11b199c4e1105b581464dc900b"
        ],
        [
            "rewrite scal_opp_l -scal_opp_r.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "rewrite -scal_distr_l.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "eapply Rle_lt_trans.",
            "VernacExtend",
            "51df35c21ed37a72940fad0733f4416a5ba5669c"
        ],
        [
            "apply @norm_scal.",
            "VernacExtend",
            "c6b7146cb6222d5cb71aafd018ad8cdb1926b185"
        ],
        [
            "replace (2 * eps * M) with (eps * (M + M)) by ring.",
            "VernacExtend",
            "52c52c0ce4e29521d822192f95b66b36a42ce5fc"
        ],
        [
            "apply Rmult_le_0_lt_compat.",
            "VernacExtend",
            "a69851b3906699be18ff8bb93fad9e56dcadbf0f"
        ],
        [
            "by apply Rabs_pos.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "by apply norm_ge_0.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "apply Rle_lt_trans with (2 := Hstep).",
            "VernacExtend",
            "191245f2fee6e3ef180f76b0596fd7b13639c377"
        ],
        [
            "apply Rle_trans with (2 := Rmax_l _ _).",
            "VernacExtend",
            "71359a389bd939cc6dea91cb2e0a00babb930fa5"
        ],
        [
            "simpl.",
            "VernacExtend",
            "1b93169f4cf876d207c1fab22a2347202ab48d85"
        ],
        [
            "apply Rlt_le in Hx1.",
            "VernacExtend",
            "fe74a8e85bb54b95cc1b09db0c9611d15b599cdb"
        ],
        [
            "move: (Rle_trans _ _ _ Hx0 Hx1) => Hx0'.",
            "VernacExtend",
            "b1b2cb7a3a617cba67460b4eca1f04de3c1cc716"
        ],
        [
            "apply Rminus_le_0 in Hx0.",
            "VernacExtend",
            "89bf3f912df1adcd5a6fbbb301826a26bbf0b0e0"
        ],
        [
            "apply Rminus_le_0 in Hx0'.",
            "VernacExtend",
            "be07714f19e45af7ddb209ae3809dab687103967"
        ],
        [
            "rewrite /abs /= ?Rabs_pos_eq //.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "by apply Rplus_le_compat_r.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "apply Rle_lt_trans with (norm (f x) + norm (opp (f y1))).",
            "VernacExtend",
            "b9edf1c4d77e5e7716dffabb3f174cec9fe0e6bf"
        ],
        [
            "apply @norm_triangle.",
            "VernacExtend",
            "85c8761fbfefc33c72371b73f65134f967a6f807"
        ],
        [
            "apply Rplus_lt_compat.",
            "VernacExtend",
            "f7bc5a60a4f35352751a55736bc694ac6ced98ea"
        ],
        [
            "apply Hfx.",
            "VernacExtend",
            "0bac3501bbf18d129364e2cd3542de1ad4bac227"
        ],
        [
            "by split.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "rewrite norm_opp.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "apply Hfx.",
            "VernacExtend",
            "0bac3501bbf18d129364e2cd3542de1ad4bac227"
        ],
        [
            "split.",
            "VernacExtend",
            "55abc140132bd88981001ac656020469a8d503eb"
        ],
        [
            "apply (Hptd O (lt_O_Sn _)).",
            "VernacExtend",
            "7beefd7a817b6ff454f9772d9f270f49025cc2c9"
        ],
        [
            "apply Rle_trans with (SF_h ptd).",
            "VernacExtend",
            "e1ea0550bff1b1baaf0daa741cb2c3fdc11c853f"
        ],
        [
            "apply (Hptd O (lt_O_Sn _)).",
            "VernacExtend",
            "7beefd7a817b6ff454f9772d9f270f49025cc2c9"
        ],
        [
            "apply (fun H => sorted_last ((SF_h ptd) :: (unzip1 (SF_t ptd))) O H (lt_O_Sn _) (SF_h ptd)).",
            "VernacExtend",
            "840fc94c48f503e5c2495e0d327bfbea5b536d85"
        ],
        [
            "apply ptd_sort in Hptd.",
            "VernacExtend",
            "c35e5fec041e7a27e62c87e4e0d52f0c5f2077de"
        ],
        [
            "by apply Hptd.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "by split.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "by split.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma Riemann_sum_norm (f : R -> V) (g : R -> R) ptd : pointed_subdiv ptd -> (forall t, SF_h ptd <= t <= last (SF_h ptd) (SF_lx ptd) -> norm (f t) <= g t) -> norm (Riemann_sum f ptd) <= Riemann_sum g ptd.",
            "VernacStartTheoremProof",
            "2447628dc86d7e53f82c929a53a32fce80013164"
        ],
        [
            "apply SF_cons_ind with (s := ptd) => {ptd} /= [x0 | [x0 y0] s IH] /= Hs H.",
            "VernacExtend",
            "3c42b53d0efc26db114b00541ac5e7fcb29e6aeb"
        ],
        [
            "rewrite norm_zero ; exact: Rle_refl.",
            "VernacExtend",
            "fc36db30cc6b7c554eedf7f3ce8ac6dfc3633e80"
        ],
        [
            "rewrite !Riemann_sum_cons /=.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "eapply Rle_trans.",
            "VernacExtend",
            "ec6f33953112c5bac5bfe07c5c0b34597dc6eaba"
        ],
        [
            "by apply @norm_triangle.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "apply Rplus_le_compat.",
            "VernacExtend",
            "7a69898b466991bee51047e3a2fc51c3b80fbd93"
        ],
        [
            "eapply Rle_trans.",
            "VernacExtend",
            "ec6f33953112c5bac5bfe07c5c0b34597dc6eaba"
        ],
        [
            "apply @norm_scal.",
            "VernacExtend",
            "c6b7146cb6222d5cb71aafd018ad8cdb1926b185"
        ],
        [
            "refine (_ (Hs O _)).",
            "VernacExtend",
            "243f6aadade64fb1bcc054f70cff832210094f39"
        ],
        [
            "simpl.",
            "VernacExtend",
            "1b93169f4cf876d207c1fab22a2347202ab48d85"
        ],
        [
            "intros [H1 H2].",
            "VernacExtend",
            "0ae6198f19882a3028e7ce40d84662e28da622ee"
        ],
        [
            "rewrite /abs /= Rabs_pos_eq.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "apply Rmult_le_compat_l.",
            "VernacExtend",
            "509839294acd7016ba82d594bfdb05afe131eed3"
        ],
        [
            "apply -> Rminus_le_0.",
            "VernacExtend",
            "eb3010996ade724f542511d5c9a56441498f4fba"
        ],
        [
            "now apply Rle_trans with y0.",
            "VernacExtend",
            "cd06dca61f0cd17e1c49743658051da1cd39b41b"
        ],
        [
            "apply H.",
            "VernacExtend",
            "4b47b71ad0f800d57cbdc591d68949e07decb540"
        ],
        [
            "apply (conj H1).",
            "VernacExtend",
            "2cc226713205dd08eec65db5ba411a6c5d626e59"
        ],
        [
            "apply Rle_trans with (1 := H2).",
            "VernacExtend",
            "be6e786b1f99909853a5b0d8d7e08eeeedabf900"
        ],
        [
            "apply (sorted_last (SF_lx s) O) with (x0 := 0).",
            "VernacExtend",
            "d2147330610c93aa4e5e8a9328bcc14536c9b7de"
        ],
        [
            "by apply (ptd_sort _ Hs).",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "exact: lt_O_Sn.",
            "VernacExtend",
            "ce637ff86bafca5d8359473e8c02af644dcbdc43"
        ],
        [
            "apply -> Rminus_le_0.",
            "VernacExtend",
            "eb3010996ade724f542511d5c9a56441498f4fba"
        ],
        [
            "now apply Rle_trans with y0.",
            "VernacExtend",
            "cd06dca61f0cd17e1c49743658051da1cd39b41b"
        ],
        [
            "exact: lt_O_Sn.",
            "VernacExtend",
            "ce637ff86bafca5d8359473e8c02af644dcbdc43"
        ],
        [
            "apply IH.",
            "VernacExtend",
            "88103d45393d3ee3ab547447d913543854db8cea"
        ],
        [
            "by apply ptd_cons with (h := (x0,y0)).",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "move => t Ht ; apply H ; split.",
            "VernacExtend",
            "70b2a6f251ffa61da16ecdf78299b0b7b54f9c2f"
        ],
        [
            "by apply Rle_trans with (2 := proj1 Ht), (ptd_sort _ Hs).",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "by apply Ht.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "End Riemann_sum_Normed.",
            "VernacEndSegment",
            "9070cfc398c54356c93e5bef92c368ff2b084176"
        ],
        [
            "Lemma Riemann_sum_le (f : R -> R) (g : R -> R) ptd : pointed_subdiv ptd -> (forall t, SF_h ptd <= t <= last (SF_h ptd) (SF_lx ptd) -> f t <= g t) -> Riemann_sum f ptd <= Riemann_sum g ptd.",
            "VernacStartTheoremProof",
            "1a02d2286c2ca762e94bc0283b7292013dc58a38"
        ],
        [
            "apply SF_cons_ind with (s := ptd) => {ptd} /= [x0 | [x0 y0] s IH] /= Hs H.",
            "VernacExtend",
            "3c42b53d0efc26db114b00541ac5e7fcb29e6aeb"
        ],
        [
            "apply Rle_refl.",
            "VernacExtend",
            "0a60a50353d5cfa9a4ade0240c47d5160d6d423c"
        ],
        [
            "rewrite !Riemann_sum_cons /=.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "apply Rplus_le_compat.",
            "VernacExtend",
            "7a69898b466991bee51047e3a2fc51c3b80fbd93"
        ],
        [
            "refine (_ (Hs O _)).",
            "VernacExtend",
            "243f6aadade64fb1bcc054f70cff832210094f39"
        ],
        [
            "simpl.",
            "VernacExtend",
            "1b93169f4cf876d207c1fab22a2347202ab48d85"
        ],
        [
            "intros [H1 H2].",
            "VernacExtend",
            "0ae6198f19882a3028e7ce40d84662e28da622ee"
        ],
        [
            "apply Rmult_le_compat_l.",
            "VernacExtend",
            "509839294acd7016ba82d594bfdb05afe131eed3"
        ],
        [
            "apply -> Rminus_le_0.",
            "VernacExtend",
            "eb3010996ade724f542511d5c9a56441498f4fba"
        ],
        [
            "now apply Rle_trans with y0.",
            "VernacExtend",
            "cd06dca61f0cd17e1c49743658051da1cd39b41b"
        ],
        [
            "apply H.",
            "VernacExtend",
            "4b47b71ad0f800d57cbdc591d68949e07decb540"
        ],
        [
            "apply (conj H1).",
            "VernacExtend",
            "2cc226713205dd08eec65db5ba411a6c5d626e59"
        ],
        [
            "apply Rle_trans with (1 := H2).",
            "VernacExtend",
            "be6e786b1f99909853a5b0d8d7e08eeeedabf900"
        ],
        [
            "apply (sorted_last (SF_lx s) O) with (x0 := 0).",
            "VernacExtend",
            "d2147330610c93aa4e5e8a9328bcc14536c9b7de"
        ],
        [
            "by apply (ptd_sort _ Hs).",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "exact: lt_O_Sn.",
            "VernacExtend",
            "ce637ff86bafca5d8359473e8c02af644dcbdc43"
        ],
        [
            "exact: lt_O_Sn.",
            "VernacExtend",
            "ce637ff86bafca5d8359473e8c02af644dcbdc43"
        ],
        [
            "apply IH.",
            "VernacExtend",
            "88103d45393d3ee3ab547447d913543854db8cea"
        ],
        [
            "by apply ptd_cons with (h := (x0,y0)).",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "move => t Ht ; apply H ; split.",
            "VernacExtend",
            "70b2a6f251ffa61da16ecdf78299b0b7b54f9c2f"
        ],
        [
            "by apply Rle_trans with (2 := proj1 Ht), (ptd_sort _ Hs).",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "by apply Ht.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma Riemann_sum_pair {U : ModuleSpace R_Ring} {V : ModuleSpace R_Ring} (f : R -> U * V) ptd : Riemann_sum f ptd = (Riemann_sum (fun t => fst (f t)) ptd, Riemann_sum (fun t => snd (f t)) ptd).",
            "VernacStartTheoremProof",
            "c047d8388c497fcb29cf8a3fcdb380d36b744cb4"
        ],
        [
            "apply SF_cons_ind with (s := ptd) => {ptd} [x0 | h0 ptd IH].",
            "VernacExtend",
            "3c42b53d0efc26db114b00541ac5e7fcb29e6aeb"
        ],
        [
            "by [].",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "rewrite !Riemann_sum_cons IH.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "by apply injective_projections.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Section RInt_val.",
            "VernacBeginSection",
            "6c3cd2014bdac9922360a56c210a612517faeddb"
        ],
        [
            "Context {V : ModuleSpace R_Ring}.",
            "VernacContext",
            "488402a5a07f07b5e36d6a85540c8b09ebb1a645"
        ],
        [
            "Definition RInt_val (f : R -> V) (a b : R) (n : nat) := Riemann_sum f (SF_seq_f2 (fun x y => (x + y) / 2) (unif_part a b n)).",
            "VernacDefinition",
            "8492f61b490e7e2e08e4dba51a28f8ddfd388e8f"
        ],
        [
            "Lemma RInt_val_point (f : R -> V) (a : R) (n : nat) : RInt_val f a a n = zero.",
            "VernacStartTheoremProof",
            "55132b3af92d929afa4e58d48c86e8598c39e364"
        ],
        [
            "unfold RInt_val ; apply Riemann_sum_zero.",
            "VernacExtend",
            "9eb7b9f63130d7042a7b91867dcb1af2b5f1740c"
        ],
        [
            "rewrite /SF_sorted SF_lx_f2.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "apply unif_part_sort ; apply Rle_refl.",
            "VernacExtend",
            "851e53caca7f07ae2e6356f273ea72a7fdb53a72"
        ],
        [
            "rewrite size_mkseq ; by apply lt_O_Sn.",
            "VernacExtend",
            "f9e2aad1e70f1876566a77bd0af96f52b3b81520"
        ],
        [
            "rewrite SF_lx_f2 /=.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "rewrite -{2}[1]/(INR 1) last_map.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "unfold Rdiv ; ring.",
            "VernacExtend",
            "c3a49fbaad57b642408a849290bec67d6d720029"
        ],
        [
            "by apply lt_O_Sn.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma RInt_val_swap : forall (f : R -> V) (a b : R) (n : nat), RInt_val f a b n = opp (RInt_val f b a n).",
            "VernacStartTheoremProof",
            "9bc0610400ddbde13a5e674233d17d6b7dd149a9"
        ],
        [
            "intros f a b n.",
            "VernacExtend",
            "781a3f739b7027aa7b25556ca06bbefa46a1456e"
        ],
        [
            "rewrite /RInt_val.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "rewrite -Riemann_sum_opp.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "rewrite unif_part_bound.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "elim: (unif_part b a n) => [ | x1 s IH] /=.",
            "VernacExtend",
            "e686a1895f1799b840b76242f931100819a9ad6c"
        ],
        [
            "by [].",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "clear -IH.",
            "VernacExtend",
            "98d7e1c5a10458dfe9d9fb2e34be93bcf7de1076"
        ],
        [
            "rewrite rev_cons.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "destruct s as [ | x2 s].",
            "VernacExtend",
            "a175602acab0ed4e245d1c6cf544b159eb6397ba"
        ],
        [
            "by [].",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "rewrite SF_cons_f2.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "2: by apply lt_O_Sn.",
            "VernacExtend",
            "42cf05b0c5cd7515ffd5d7bb186f381ddeb0d8c5"
        ],
        [
            "rewrite Riemann_sum_cons /= -IH => {IH}.",
            "VernacExtend",
            "3c42b53d0efc26db114b00541ac5e7fcb29e6aeb"
        ],
        [
            "rewrite scal_opp_r -scal_opp_l /=.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "rewrite rev_cons.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "elim: (rev s) => {s} /= [ | x3 s IH].",
            "VernacExtend",
            "e686a1895f1799b840b76242f931100819a9ad6c"
        ],
        [
            "rewrite /Riemann_sum /=.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "apply (f_equal2 (fun x y => plus (scal x (f y)) _)) ; rewrite /Rdiv /opp /= ; ring.",
            "VernacExtend",
            "07974af95326152d9029d99f4a5c796d2c9b7843"
        ],
        [
            "rewrite !SF_cons_f2 ; try (by rewrite size_rcons ; apply lt_O_Sn).",
            "VernacExtend",
            "768b2f88f8c65ebded32bd7dc9c8ffec8f100548"
        ],
        [
            "rewrite !Riemann_sum_cons /= IH !plus_assoc => {IH}.",
            "VernacExtend",
            "3c42b53d0efc26db114b00541ac5e7fcb29e6aeb"
        ],
        [
            "apply (f_equal (fun x => plus x _)).",
            "VernacExtend",
            "e5bdffcab497f88a1ab54539befd19e2297fbd99"
        ],
        [
            "rewrite plus_comm.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "apply f_equal.",
            "VernacExtend",
            "ba856cbef3c8e84dcef77c91c8515b497874875b"
        ],
        [
            "apply (f_equal2 (fun x y => scal (x - x3) (f ((x3 + y) / 2)))) ; clear ; by elim: s.",
            "VernacExtend",
            "c09bc5a8d229188402739775aa23ace41429a69f"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma RInt_val_ext (f g : R -> V) (a b : R) (n : nat) : (forall x, Rmin a b <= x <= Rmax a b -> f x = g x) -> RInt_val g a b n = RInt_val f a b n.",
            "VernacStartTheoremProof",
            "8b6ec86d3507ac445ed41c3265ba1186d48b3e10"
        ],
        [
            "wlog: a b / (a <= b) => [Hw | Hab].",
            "VernacExtend",
            "3c42b53d0efc26db114b00541ac5e7fcb29e6aeb"
        ],
        [
            "case: (Rle_lt_dec a b) => Hab.",
            "VernacExtend",
            "e00fff71ff314c991514fc71c41a3556702e444a"
        ],
        [
            "by apply Hw.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "rewrite Rmin_comm Rmax_comm => Heq.",
            "VernacExtend",
            "3c42b53d0efc26db114b00541ac5e7fcb29e6aeb"
        ],
        [
            "apply Rlt_le in Hab.",
            "VernacExtend",
            "121b4743682c65d820d721078f4058471fc37374"
        ],
        [
            "rewrite RInt_val_swap Hw => //=.",
            "VernacExtend",
            "3c42b53d0efc26db114b00541ac5e7fcb29e6aeb"
        ],
        [
            "apply sym_eq ; by apply RInt_val_swap.",
            "VernacExtend",
            "f1d0e1d719aec66edd7015c82f8a0553ded26e74"
        ],
        [
            "rewrite /Rmin /Rmax ; case: Rle_dec => //= _ Heq.",
            "VernacExtend",
            "712d339e99ee17eb7d5033e19ac614eb3ca6b532"
        ],
        [
            "unfold RInt_val.",
            "VernacExtend",
            "95ce06f95868017070d4a5431b1ee4882de7c383"
        ],
        [
            "set l := (SF_seq_f2 (fun x y : R => (x + y) / 2) (unif_part a b n)).",
            "VernacExtend",
            "69a61e99b234580f7b41fa5b9655c87ba9a76f70"
        ],
        [
            "assert (forall i, (i < size (SF_ly l))%nat -> f (nth 0 (SF_ly l) i) = g (nth 0 (SF_ly l) i)).",
            "VernacExtend",
            "ca8d41f4b350f0fa0729406a349cef98603f7573"
        ],
        [
            "move => i Hi.",
            "VernacExtend",
            "b1b2cb7a3a617cba67460b4eca1f04de3c1cc716"
        ],
        [
            "apply Heq.",
            "VernacExtend",
            "bb166f28913e4713dec882777f222b5e7b9617a8"
        ],
        [
            "destruct (fun H0 => Riemann_fine_unif_part (fun x y : R => (x + y) / 2) a b n H0 Hab) as [H [H0 [H1 H2]]].",
            "VernacExtend",
            "0bf4f075f99b677d570d93e853389d1aa6e564dd"
        ],
        [
            "clear.",
            "VernacExtend",
            "086ee0db0bdefcfa1ec15bb5cd44d451de64c569"
        ],
        [
            "intros a b Hab.",
            "VernacExtend",
            "ba416dd9af5581d42ad7e1e4ba3647e031ee986a"
        ],
        [
            "lra.",
            "VernacExtend",
            "c37bca18aec699b6843eab75e25df2491e3b9848"
        ],
        [
            "fold l in H, H0, H1, H2.",
            "VernacExtend",
            "faf07c3697177524318e22c39126c211d1f504e1"
        ],
        [
            "rewrite -H1 -H2 ; split.",
            "VernacExtend",
            "f4b7ef80d95d0131def61ae7f69c6275a20261d3"
        ],
        [
            "apply Rle_trans with (head 0 (SF_ly l)).",
            "VernacExtend",
            "4e360949af952b0aa0703d8408e4267ba9fe04c2"
        ],
        [
            "apply (H0 O).",
            "VernacExtend",
            "55ca0be3a87939b3e3f91b592752150292d83270"
        ],
        [
            "by apply lt_O_Sn.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "apply sorted_head.",
            "VernacExtend",
            "aeb9bf5d017a0679a6122714697c03479574eb46"
        ],
        [
            "by apply ptd_sort'.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "by [].",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "apply Rle_trans with (last 0 (SF_ly l)).",
            "VernacExtend",
            "2b1017486212336ecc9e31daf53f1cd4b852c8ed"
        ],
        [
            "apply sorted_last.",
            "VernacExtend",
            "af460239323b7003c296230d8cf1068d7e8a96f1"
        ],
        [
            "by apply ptd_sort'.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "by [].",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "rewrite -!nth_last SF_size_ly SF_size_lx SF_size_f2 size_mkseq.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "simpl Peano.pred.",
            "VernacExtend",
            "b51b643f27fdfad5d5ca7c6ab374a6a1aa4c384b"
        ],
        [
            "replace (nth (SF_h l) (SF_lx l) (S n)) with (nth 0 (SF_lx l) (S n)).",
            "VernacExtend",
            "7703e03a66bc7bf09c31560db24c46bdd7237910"
        ],
        [
            "apply (H0 n).",
            "VernacExtend",
            "97a08acddf518a28ad0ee7375b5f7c5d5da0674a"
        ],
        [
            "rewrite SF_size_f2 size_mkseq /=.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "by apply lt_n_Sn.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "rewrite SF_lx_f2.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "assert (size (unif_part a b n) = S (S n)).",
            "VernacExtend",
            "a058713479e5f159552e708aa5f79a12f579b572"
        ],
        [
            "by apply size_mkseq.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "elim: (S n) (unif_part a b n) H3 ; simpl ; clear ; intros.",
            "VernacExtend",
            "4a7c78e560c260fc1735e7709b6ee3c274a83365"
        ],
        [
            "destruct unif_part0 ; simpl => //.",
            "VernacExtend",
            "d84063315d0ff4c1dd8a08f3b586070e8c450388"
        ],
        [
            "replace unif_part0 with (head 0 unif_part0 :: behead unif_part0).",
            "VernacExtend",
            "50cadf884d7d5e40a25500c1706072fe87341d82"
        ],
        [
            "apply H.",
            "VernacExtend",
            "4b47b71ad0f800d57cbdc591d68949e07decb540"
        ],
        [
            "destruct unif_part0 ; by intuition.",
            "VernacExtend",
            "1bdc86abfed287db1fb5bb303cafc4afcd29b977"
        ],
        [
            "destruct unif_part0 ; by intuition.",
            "VernacExtend",
            "1bdc86abfed287db1fb5bb303cafc4afcd29b977"
        ],
        [
            "by apply lt_O_Sn.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "move: H => {Heq}.",
            "VernacExtend",
            "b1b2cb7a3a617cba67460b4eca1f04de3c1cc716"
        ],
        [
            "apply SF_cons_ind with (s := l) => {l} [x0 | h0 s IH] /= Heq.",
            "VernacExtend",
            "3c42b53d0efc26db114b00541ac5e7fcb29e6aeb"
        ],
        [
            "by [].",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "rewrite !Riemann_sum_cons.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "apply (f_equal2 (fun x y => plus (scal (SF_h s - fst h0) x) y)).",
            "VernacExtend",
            "7df3c99853f7be382809b3d379f57c15fdce7788"
        ],
        [
            "by apply sym_eq, (Heq O), lt_O_Sn.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "apply IH => i Hi.",
            "VernacExtend",
            "3c42b53d0efc26db114b00541ac5e7fcb29e6aeb"
        ],
        [
            "now apply (Heq (S i)), lt_n_S.",
            "VernacExtend",
            "05b6461d2e19147fd55c447ec46614d0659e75ca"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma RInt_val_comp_opp (f : R -> V) (a b : R) (n : nat) : RInt_val (fun x => f (- x)) a b n = opp (RInt_val f (- a) (- b) n).",
            "VernacStartTheoremProof",
            "d72e2dd46d2e65ec41e3b9d1a3f976538bc28602"
        ],
        [
            "rewrite /RInt_val.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "replace (unif_part (- a) (- b) n) with (map Ropp (unif_part a b n)).",
            "VernacExtend",
            "4658b909e89eabeff4485f8997957f9f8667d817"
        ],
        [
            "elim: (unif_part a b n) {1}0 {2}0 => /= [ | x1 s IH] x0 x0'.",
            "VernacExtend",
            "e686a1895f1799b840b76242f931100819a9ad6c"
        ],
        [
            "rewrite /Riemann_sum /=.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "by apply sym_eq, @opp_zero.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "destruct s as [ | x2 s].",
            "VernacExtend",
            "a175602acab0ed4e245d1c6cf544b159eb6397ba"
        ],
        [
            "rewrite /Riemann_sum /=.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "by apply sym_eq, @opp_zero.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "rewrite (SF_cons_f2 _ x1) ; try by apply lt_O_Sn.",
            "VernacExtend",
            "768b2f88f8c65ebded32bd7dc9c8ffec8f100548"
        ],
        [
            "rewrite (SF_cons_f2 _ (- x1)) ; try by apply lt_O_Sn.",
            "VernacExtend",
            "768b2f88f8c65ebded32bd7dc9c8ffec8f100548"
        ],
        [
            "rewrite !Riemann_sum_cons /=.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "rewrite opp_plus.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "apply f_equal2.",
            "VernacExtend",
            "be46a64a7879d7dc9b1dce72ceb4b39ac590e100"
        ],
        [
            "rewrite -scal_opp_l.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "apply (f_equal2 (fun x y => scal x (f y))) ; rewrite /Rdiv /opp /= ; field.",
            "VernacExtend",
            "aba79d06776886ee19148e42a97725d78788a2d5"
        ],
        [
            "by apply IH.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "apply eq_from_nth with 0.",
            "VernacExtend",
            "2d7a1a08bd23a20ce2f435cf5608f28b012bb44b"
        ],
        [
            "by rewrite size_map !size_mkseq.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "rewrite size_map => i Hi.",
            "VernacExtend",
            "3c42b53d0efc26db114b00541ac5e7fcb29e6aeb"
        ],
        [
            "rewrite (nth_map 0 0) => //.",
            "VernacExtend",
            "3c42b53d0efc26db114b00541ac5e7fcb29e6aeb"
        ],
        [
            "rewrite size_mkseq in Hi.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "rewrite !nth_mkseq => //.",
            "VernacExtend",
            "3c42b53d0efc26db114b00541ac5e7fcb29e6aeb"
        ],
        [
            "field.",
            "VernacExtend",
            "93f44750d651d466b74a0cc63f88acb56273d533"
        ],
        [
            "now rewrite -S_INR ; apply not_0_INR, sym_not_eq, O_S.",
            "VernacExtend",
            "def5ba70d746ed14120c028ae0d8801b58991c53"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma RInt_val_comp_lin (f : R -> V) (u v : R) (a b : R) (n : nat) : scal u (RInt_val (fun x => f (u * x + v)) a b n) = RInt_val f (u * a + v) (u * b + v) n.",
            "VernacStartTheoremProof",
            "943959e6392de4ac2f1c129dd49d5a7f68d1152b"
        ],
        [
            "rewrite /RInt_val.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "replace (unif_part (u * a + v) (u * b + v) n) with (map (fun x => u * x + v) (unif_part a b n)).",
            "VernacExtend",
            "21ebcd445628e845a1e238df5a2c87a691ecc487"
        ],
        [
            "elim: (unif_part a b n) {1}0 {2}0 => /= [ | x1 s IH] x0 x0'.",
            "VernacExtend",
            "e686a1895f1799b840b76242f931100819a9ad6c"
        ],
        [
            "by apply @scal_zero_r.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "destruct s as [ | x2 s].",
            "VernacExtend",
            "a175602acab0ed4e245d1c6cf544b159eb6397ba"
        ],
        [
            "by apply @scal_zero_r.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "rewrite (SF_cons_f2 _ x1) ; try by apply lt_O_Sn.",
            "VernacExtend",
            "768b2f88f8c65ebded32bd7dc9c8ffec8f100548"
        ],
        [
            "rewrite (SF_cons_f2 _ (u * x1 + v)) ; try by apply lt_O_Sn.",
            "VernacExtend",
            "768b2f88f8c65ebded32bd7dc9c8ffec8f100548"
        ],
        [
            "rewrite !Riemann_sum_cons /=.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "rewrite scal_distr_l.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "apply f_equal2.",
            "VernacExtend",
            "be46a64a7879d7dc9b1dce72ceb4b39ac590e100"
        ],
        [
            "rewrite scal_assoc.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "apply (f_equal2 (fun x y => scal x (f y))) ; rewrite /mult /= ; field.",
            "VernacExtend",
            "aba79d06776886ee19148e42a97725d78788a2d5"
        ],
        [
            "by apply IH.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "apply eq_from_nth with 0.",
            "VernacExtend",
            "2d7a1a08bd23a20ce2f435cf5608f28b012bb44b"
        ],
        [
            "by rewrite size_map !size_mkseq.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "rewrite size_map => i Hi.",
            "VernacExtend",
            "3c42b53d0efc26db114b00541ac5e7fcb29e6aeb"
        ],
        [
            "rewrite (nth_map 0 0) => //.",
            "VernacExtend",
            "3c42b53d0efc26db114b00541ac5e7fcb29e6aeb"
        ],
        [
            "rewrite size_mkseq in Hi.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "rewrite !nth_mkseq => //.",
            "VernacExtend",
            "3c42b53d0efc26db114b00541ac5e7fcb29e6aeb"
        ],
        [
            "field.",
            "VernacExtend",
            "93f44750d651d466b74a0cc63f88acb56273d533"
        ],
        [
            "now rewrite -S_INR ; apply not_0_INR, sym_not_eq, O_S.",
            "VernacExtend",
            "def5ba70d746ed14120c028ae0d8801b58991c53"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "End RInt_val.",
            "VernacEndSegment",
            "7e6eed26d2a8db9a1f473e2bfbc8f733c7d7f392"
        ],
        [
            "Fixpoint seq_cut_down' (s : seq (R*R)) (x x0 : R) : seq (R*R) := match s with | [::] => [:: (x,x0)] | h :: t => match Rle_dec (fst h) x with | right _ => [:: (x,snd h)] | left _ => h :: (seq_cut_down' t x (snd h)) end end.",
            "VernacFixpoint",
            "49f6e1586e870f75adfcf764556e2c979d941324"
        ],
        [
            "Fixpoint seq_cut_up' (s : seq (R*R)) (x x0 : R) : seq (R*R) := match s with | [::] => [:: (x,x0)] | h :: t => match Rle_dec (fst h) x with | right _ => (x,x0)::h::t | left _ => seq_cut_up' t x (snd h) end end.",
            "VernacFixpoint",
            "30301d0ec39d22e0cc8757976a63fe4fd06d4972"
        ],
        [
            "Definition SF_cut_down' (sf : @SF_seq R) (x : R) x0 := let s := seq_cut_down' ((SF_h sf,x0) :: (SF_t sf)) x x0 in mkSF_seq (fst (head (SF_h sf,x0) s)) (behead s).",
            "VernacDefinition",
            "d3b74e9c3b92b1a962775a6634c767de92f06ed7"
        ],
        [
            "Definition SF_cut_up' (sf : @SF_seq R) (x : R) x0 := let s := seq_cut_up' ((SF_h sf,x0) :: (SF_t sf)) x x0 in mkSF_seq (fst (head (SF_h sf,x0) s)) (behead s).",
            "VernacDefinition",
            "bf2ef1112f192936d9313f4646ff0adaa84bb186"
        ],
        [
            "Lemma SF_Chasles {V : ModuleSpace R_AbsRing} (f : R -> V) (s : SF_seq) x x0 : (SF_h s <= x <= last (SF_h s) (unzip1 (SF_t s))) -> Riemann_sum f s = plus (Riemann_sum f (SF_cut_down' s x x0)) (Riemann_sum f (SF_cut_up' s x x0)).",
            "VernacStartTheoremProof",
            "6dd89cc991dfe31fb909f1385b9f8aa91db25b5b"
        ],
        [
            "rename x0 into z0.",
            "VernacExtend",
            "810af82a7d336a24567e243c6f5c85b3b2af8625"
        ],
        [
            "apply SF_cons_ind with (s := s) => {s} /= [ x0 | [x0 y0] s IH] /= Hx.",
            "VernacExtend",
            "3c42b53d0efc26db114b00541ac5e7fcb29e6aeb"
        ],
        [
            "rewrite (Rle_antisym _ _ (proj1 Hx) (proj2 Hx)).",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "move: (Rle_refl x).",
            "VernacExtend",
            "b1b2cb7a3a617cba67460b4eca1f04de3c1cc716"
        ],
        [
            "rewrite /SF_cut_down' /SF_cut_up' /= ; case: Rle_dec => //= _ _.",
            "VernacExtend",
            "712d339e99ee17eb7d5033e19ac614eb3ca6b532"
        ],
        [
            "by rewrite /Riemann_sum /= Rminus_eq_0 scal_zero_l !plus_zero_l.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "move: (fun Hx1 => IH (conj Hx1 (proj2 Hx))) => {IH}.",
            "VernacExtend",
            "b1b2cb7a3a617cba67460b4eca1f04de3c1cc716"
        ],
        [
            "rewrite /SF_cut_down' /SF_cut_up' /= ; case: (Rle_dec x0 _) (proj1 Hx) => //= Hx0 _.",
            "VernacExtend",
            "712d339e99ee17eb7d5033e19ac614eb3ca6b532"
        ],
        [
            "case: (Rle_dec (SF_h s) x) => //= Hx1 IH.",
            "VernacExtend",
            "e00fff71ff314c991514fc71c41a3556702e444a"
        ],
        [
            "move: (IH Hx1) => {IH} IH.",
            "VernacExtend",
            "b1b2cb7a3a617cba67460b4eca1f04de3c1cc716"
        ],
        [
            "rewrite (Riemann_sum_cons _ (x0,y0)) (Riemann_sum_cons _ (x0,y0) (mkSF_seq (SF_h s) (seq_cut_down' (SF_t s) x y0))) IH /= => {IH}.",
            "VernacExtend",
            "3c42b53d0efc26db114b00541ac5e7fcb29e6aeb"
        ],
        [
            "rewrite -!plus_assoc ; apply f_equal.",
            "VernacExtend",
            "1775b3adc7dd915cdc7d26d03365d16d21a7694e"
        ],
        [
            "assert (forall x0 y0, fst (head (x0, z0) (seq_cut_up' (SF_t s) x y0)) = x).",
            "VernacExtend",
            "2cb5f5e35e593dc4fb9d857215bf52068ca14ed1"
        ],
        [
            "elim: (SF_t s) => [ | x2 t IH] x1 y1 //=.",
            "VernacExtend",
            "e686a1895f1799b840b76242f931100819a9ad6c"
        ],
        [
            "by case: Rle_dec.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "rewrite ?H.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "move: (proj2 Hx) Hx1 => {Hx} ; apply SF_cons_dec with (s := s) => {s H} /= [x1 | [x1 y1] s] //= Hx Hx1.",
            "VernacExtend",
            "8261237f0cda1915a4077c28869831c5329103ce"
        ],
        [
            "by rewrite /Riemann_sum /= (Rle_antisym _ _ Hx Hx1) Rminus_eq_0 !scal_zero_l !plus_zero_l.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "case: Rle_dec => //.",
            "VernacExtend",
            "e00fff71ff314c991514fc71c41a3556702e444a"
        ],
        [
            "rewrite Riemann_sum_cons (Riemann_sum_cons _ (x,y0) s) {2}/Riemann_sum /=.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "clear IH.",
            "VernacExtend",
            "daecf0ea8665f0f6fd551644d47b5ce1d93aef1e"
        ],
        [
            "rewrite plus_zero_r !plus_assoc.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "apply f_equal2 => //.",
            "VernacExtend",
            "3c42b53d0efc26db114b00541ac5e7fcb29e6aeb"
        ],
        [
            "rewrite -scal_distr_r.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "apply f_equal2 => //.",
            "VernacExtend",
            "3c42b53d0efc26db114b00541ac5e7fcb29e6aeb"
        ],
        [
            "rewrite /plus /= ; ring.",
            "VernacExtend",
            "43f1253beb869d2f2abb689d01038ec8d9cd33b6"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma seq_cut_up_head' (s : seq (R*R)) x x0 z : fst (head z (seq_cut_up' s x x0)) = x.",
            "VernacStartTheoremProof",
            "0b2d07e3ef77f16c080126818c9b94236500c22e"
        ],
        [
            "elim: s z x0 => [ | x1 s IH] //= z x0.",
            "VernacExtend",
            "e686a1895f1799b840b76242f931100819a9ad6c"
        ],
        [
            "by case: Rle_dec.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma ad_SF_compat z0 (s : SF_seq) (pr : SF_sorted Rle s) : adapted_couple (SF_fun s z0) (head 0 (SF_lx s)) (last 0 (SF_lx s)) (seq2Rlist (SF_lx s)) (seq2Rlist (SF_ly s)).",
            "VernacStartTheoremProof",
            "7c957fb9793de4a01874f0e6f701281bc451b428"
        ],
        [
            "have H : ((head 0 (SF_lx s)) <= (last 0 (SF_lx s))).",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "move: pr ; rewrite /SF_sorted.",
            "VernacExtend",
            "057edeb0967475c7ea5e8c98c449ddc5613eddc1"
        ],
        [
            "case: (SF_lx s) => {s} [| h s] Hs.",
            "VernacExtend",
            "e00fff71ff314c991514fc71c41a3556702e444a"
        ],
        [
            "apply Rle_refl.",
            "VernacExtend",
            "0a60a50353d5cfa9a4ade0240c47d5160d6d423c"
        ],
        [
            "rewrite -nth0 ; apply sorted_last => // ; apply lt_O_Sn.",
            "VernacExtend",
            "9d175dc5130d298b864882587ba5537cf5d14851"
        ],
        [
            "rewrite /adapted_couple ?nth_compat ?size_compat ?nth0 ?nth_last /Rmin /Rmax ?SF_size_lx ?SF_size_ly ; case: (Rle_dec (head 0 (SF_lx s)) (last 0 (SF_lx s))) => // {H} _ ; intuition.",
            "VernacExtend",
            "fd9ecce63f2f40b8ea56323d041a35e39ce9864e"
        ],
        [
            "apply sorted_compat => //.",
            "VernacExtend",
            "3c42b53d0efc26db114b00541ac5e7fcb29e6aeb"
        ],
        [
            "move: i pr H ; apply SF_cons_dec with (s := s) => {s} [x0 | h s] i Hs Hi x [Hx0 Hx1].",
            "VernacExtend",
            "8261237f0cda1915a4077c28869831c5329103ce"
        ],
        [
            "by apply lt_n_O in Hi.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "rewrite /SF_fun ?SF_size_cons ?nth_compat -?SF_size_lx ?SF_lx_cons in Hi, Hx0, Hx1 |- *.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "simpl.",
            "VernacExtend",
            "1b93169f4cf876d207c1fab22a2347202ab48d85"
        ],
        [
            "move: h i x {1}z0 Hs Hi Hx0 Hx1 ; apply SF_cons_ind with (s := s) => {s} [x1 | h0 s IH] h ; case => [| i ] x z0' Hs Hi Hx0 Hx1 //= ; case: Rlt_dec => Hx' //.",
            "VernacExtend",
            "da663691447d50cd7e9eac358285c730673d7a74"
        ],
        [
            "now contradict Hx' ; apply Rle_not_lt, Rlt_le, Hx0.",
            "VernacExtend",
            "6dcacf4936c26d6fdc285640ddd177150862a96f"
        ],
        [
            "now case: Rle_dec => Hx'' // ; contradict Hx'' ; apply Rlt_le, Hx1.",
            "VernacExtend",
            "9c8f3245e3d6d2dce96dfbc0b2da65773ccbb220"
        ],
        [
            "now rewrite /= in Hi ; by apply lt_S_n, lt_n_O in Hi.",
            "VernacExtend",
            "c99ca10bfc495db1d8df943b2af8eee753bcbd05"
        ],
        [
            "now rewrite /= in Hi ; by apply lt_S_n, lt_n_O in Hi.",
            "VernacExtend",
            "c99ca10bfc495db1d8df943b2af8eee753bcbd05"
        ],
        [
            "now contradict Hx' ; apply Rle_not_lt, Rlt_le, Hx0.",
            "VernacExtend",
            "6dcacf4936c26d6fdc285640ddd177150862a96f"
        ],
        [
            "now case: Rlt_dec => Hx'' //.",
            "VernacExtend",
            "9b5dc78914ea71d33248c1f7ec7d76670ed43b8d"
        ],
        [
            "now contradict Hx' ; apply Rle_not_lt, Rlt_le, Rle_lt_trans with (2 := Hx0) ; have Hi' : (S i < size (SF_lx (SF_cons h (SF_cons h0 s))))%nat ; [ rewrite ?SF_lx_cons /= in Hi |-* ; apply lt_trans with (1 := Hi), lt_n_Sn | ] ; apply (sorted_head (SF_lx (SF_cons h (SF_cons h0 s))) (S i) Hs Hi' 0).",
            "VernacExtend",
            "ade05372e2f411a3180e8ad92f03514eaac34a25"
        ],
        [
            "rewrite -(IH h0 i x (snd h)) //=.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "apply Hs.",
            "VernacExtend",
            "26038359dfe6b0cb344439243c160e8be398bca9"
        ],
        [
            "rewrite ?SF_lx_cons /= in Hi |-* ; apply lt_S_n, Hi.",
            "VernacExtend",
            "5a82f3ccce8f52e7417d04286480571f825134e1"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Definition SF_compat_le (s : @SF_seq R) (pr : SF_sorted Rle s) : StepFun (head 0 (SF_lx s)) (last 0 (SF_lx s)).",
            "VernacDefinition",
            "be9bd9d7e29d2998fe536accdbffce30d068b992"
        ],
        [
            "exists (SF_fun s 0) ; exists (seq2Rlist (SF_lx s)) ; exists (seq2Rlist (SF_ly s)).",
            "VernacExtend",
            "535059aa8fbeeb1fc0f7791a394d8c437dd7860e"
        ],
        [
            "by apply ad_SF_compat.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Defined.",
            "VernacEndProof",
            "88c0be54a50df4bb90276c075406fe442428eb9c"
        ],
        [
            "Lemma Riemann_sum_compat f (s : SF_seq) (pr : SF_sorted Rle s) : Riemann_sum f s = RiemannInt_SF (SF_compat_le (SF_map f s) (SF_map_sort f s _ pr)).",
            "VernacStartTheoremProof",
            "69f2542a2a5a8d944ac2eb581df253e249befe21"
        ],
        [
            "rewrite /RiemannInt_SF ; case: Rle_dec => // [_ | H].",
            "VernacExtend",
            "712d339e99ee17eb7d5033e19ac614eb3ca6b532"
        ],
        [
            "move: pr ; apply SF_cons_ind with (s := s) => {s} [x0 | h s IH] pr //=.",
            "VernacExtend",
            "8261237f0cda1915a4077c28869831c5329103ce"
        ],
        [
            "rewrite /= -IH /Riemann_sum /SF_map /= => {IH}.",
            "VernacExtend",
            "3c42b53d0efc26db114b00541ac5e7fcb29e6aeb"
        ],
        [
            "rewrite Rmult_comm.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "by apply SF_cons_dec with (s := s).",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "apply pr.",
            "VernacExtend",
            "e564d48317d343abd9d9ecff47e1ad6fa98bc4c7"
        ],
        [
            "contradict H ; rewrite -nth_last -nth0 ; move: (le_refl (ssrnat.predn (size (SF_lx (SF_map f s))))) ; elim: {1 3}(ssrnat.predn (size (SF_lx (SF_map f s)))) => /= [| i IH] Hi.",
            "VernacExtend",
            "8d0393d62b3df36c84885a552919840cf9cf99a1"
        ],
        [
            "apply Rle_refl.",
            "VernacExtend",
            "0a60a50353d5cfa9a4ade0240c47d5160d6d423c"
        ],
        [
            "apply Rle_trans with (1 := IH (le_trans _ _ _ (le_n_Sn i) Hi)), (sorted_nth Rle) ; intuition.",
            "VernacExtend",
            "9cc580ea41ddcf63140d5924336eedb2f49ce241"
        ],
        [
            "by apply SF_map_sort.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma ad_SF_val_fun (f : R -> R) (a b : R) (n : nat) : ((a <= b) -> adapted_couple (SF_val_fun f a b n) a b (seq2Rlist (unif_part a b n)) (seq2Rlist (SF_val_ly f a b n))) /\\ (~(a <= b) -> adapted_couple (SF_val_fun f b a n) a b (seq2Rlist (unif_part b a n)) (seq2Rlist (SF_val_ly f b a n))).",
            "VernacStartTheoremProof",
            "9dd3b19f6fbb685bee552b18efa2f995a20cd5e1"
        ],
        [
            "wlog : a b / (a <= b) => Hw.",
            "VernacExtend",
            "3c42b53d0efc26db114b00541ac5e7fcb29e6aeb"
        ],
        [
            "split ; case: (Rle_dec a b) => // Hab _.",
            "VernacExtend",
            "7693ea0446b60093c0a33dc7341b41ab06f1698f"
        ],
        [
            "by apply Hw.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "apply StepFun_P2 ; apply Hw ; by apply Rlt_le, Rnot_le_lt.",
            "VernacExtend",
            "eb457f3d619c531a1299068282a30ed68b563344"
        ],
        [
            "split ; case: (Rle_dec a b) => // {Hw} Hab _.",
            "VernacExtend",
            "7693ea0446b60093c0a33dc7341b41ab06f1698f"
        ],
        [
            "have : (a = head 0 (SF_lx (SF_val_seq f a b n))) ; [rewrite SF_lx_f2 /= ; (try by apply lt_O_Sn) ; field ; apply Rgt_not_eq ; intuition | move => {2}->].",
            "VernacExtend",
            "7b5ea9504ad0e3c0042bb1c5a3f084b68e815c0c"
        ],
        [
            "pattern b at 3 ; replace b with (last 0 (SF_lx (SF_val_seq f a b n))).",
            "VernacExtend",
            "12fe37edf30382ef736d5f2b759a07f9fd20a8ad"
        ],
        [
            "rewrite -(SF_lx_f2 (fun x y => f ((x+y)/2)) (unif_part a b n)) ; try by apply lt_O_Sn.",
            "VernacExtend",
            "768b2f88f8c65ebded32bd7dc9c8ffec8f100548"
        ],
        [
            "rewrite /SF_val_ly -SF_ly_f2.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "unfold SF_val_fun, SF_fun_f2.",
            "VernacExtend",
            "d74c644c86168377b49653488c832effa1b01096"
        ],
        [
            "replace (SF_seq_f2 (fun x y : R => f ((x + y) / 2)) (unif_part a b n)) with (SF_val_seq f a b n) by auto.",
            "VernacExtend",
            "9cb378d8ff7cfc5ddf82344b3d9b3683341ca3a0"
        ],
        [
            "apply (ad_SF_compat _ (SF_val_seq f a b n)).",
            "VernacExtend",
            "30cc46442cec0742a18071773db6fd989af9fef0"
        ],
        [
            "by apply SF_sorted_f2, unif_part_sort.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "rewrite SF_lx_f2 ; replace (head 0 (unif_part a b n) :: behead (unif_part a b n)) with (unif_part a b n) by auto.",
            "VernacExtend",
            "c916a4bbe4cec7dd46ab5b79b88cfb43fab0b82f"
        ],
        [
            "rewrite -nth_last size_mkseq nth_mkseq ?S_INR //= ; field ; apply Rgt_not_eq, INRp1_pos.",
            "VernacExtend",
            "e8bfdab61067d1ca980d8e329c3beb23f2edc70b"
        ],
        [
            "now rewrite size_mkseq ; apply lt_O_Sn.",
            "VernacExtend",
            "ff910eea93bd4e8b8f863e240b29ec783e5ce51e"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Definition sf_SF_val_fun (f : R -> R) (a b : R) (n : nat) : StepFun a b.",
            "VernacDefinition",
            "775daa77bc4726280c9c0f47a0059fca76df7810"
        ],
        [
            "case : (Rle_dec a b) => Hab.",
            "VernacExtend",
            "e00fff71ff314c991514fc71c41a3556702e444a"
        ],
        [
            "exists (SF_val_fun f a b n) ; exists (seq2Rlist (unif_part a b n)) ; exists (seq2Rlist (SF_val_ly f a b n)) ; by apply ad_SF_val_fun.",
            "VernacExtend",
            "6a1eec960078835a462fcbc6f321c8951f3a108a"
        ],
        [
            "exists (SF_val_fun f b a n) ; exists (seq2Rlist (unif_part b a n)) ; exists (seq2Rlist (SF_val_ly f b a n)) ; by apply ad_SF_val_fun.",
            "VernacExtend",
            "b4af1119affbcff805ee1a6ff16e026ef3f5e384"
        ],
        [
            "Defined.",
            "VernacEndProof",
            "88c0be54a50df4bb90276c075406fe442428eb9c"
        ],
        [
            "Lemma SF_val_subdiv (f : R -> R) (a b : R) (n : nat) : subdivision (sf_SF_val_fun f a b n) = match (Rle_dec a b) with | left _ => seq2Rlist (unif_part a b n) | right _ => seq2Rlist (unif_part b a n) end.",
            "VernacStartTheoremProof",
            "9a4f38ad898f932474656c47676b6df822c7a3eb"
        ],
        [
            "rewrite /sf_SF_val_fun ; case: (Rle_dec a b) => Hab //.",
            "VernacExtend",
            "712d339e99ee17eb7d5033e19ac614eb3ca6b532"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma SF_val_subdiv_val (f : R -> R) (a b : R) (n : nat) : subdivision_val (sf_SF_val_fun f a b n) = match (Rle_dec a b) with | left _ => seq2Rlist (SF_val_ly f a b n) | right _ => seq2Rlist (SF_val_ly f b a n) end.",
            "VernacStartTheoremProof",
            "337322931da6d8567beb1dcb163840c5519619e2"
        ],
        [
            "rewrite /sf_SF_val_fun ; case: (Rle_dec a b) => Hab //.",
            "VernacExtend",
            "712d339e99ee17eb7d5033e19ac614eb3ca6b532"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma SF_val_fun_rw (f : R -> R) (a b : R) (n : nat) (x : R) (Hx : a <= x <= b) : SF_val_fun f a b n x = match (unif_part_nat a b n x Hx) with | inleft H => f (a + (INR (proj1_sig H) + /2) * (b-a) / (INR n + 1)) | inright _ => f (a + (INR n + /2) * (b-a) / (INR n + 1)) end.",
            "VernacStartTheoremProof",
            "fcef41aaaef476d23447ed52c409abec48ae2f60"
        ],
        [
            "have Hab : (a <= b) ; [by apply Rle_trans with (1 := proj1 Hx), Hx | ].",
            "VernacExtend",
            "aba2b42bd7a87f88ac31bc37d93024dc60304d28"
        ],
        [
            "case: unif_part_nat => {Hx} [ [ i [Hx Hi] ] | Hx] /=.",
            "VernacExtend",
            "e00fff71ff314c991514fc71c41a3556702e444a"
        ],
        [
            "rewrite /SF_val_fun /SF_fun_f2.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "replace (a + (INR i + /2) * (b - a) / (INR n+1)) with ((nth 0 (unif_part a b n) i + nth 0 (unif_part a b n) (S i)) / 2) ; [ | rewrite size_mkseq in Hi ; rewrite ?nth_mkseq ?S_INR ; [field ; apply Rgt_not_eq | apply SSR_leq | apply SSR_leq ] ; intuition].",
            "VernacExtend",
            "968a25fd2378e96052b8606d79699c905e047799"
        ],
        [
            "case: (unif_part a b n) (unif_part_sort a b n Hab) i Hi x Hx => {a b Hab n} [| h s] Hs /= i Hi.",
            "VernacExtend",
            "e00fff71ff314c991514fc71c41a3556702e444a"
        ],
        [
            "by apply lt_n_O in Hi.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "case: (s) Hs (i) (lt_S_n _ _ Hi) => {s i Hi} [| h0 s] Hs /= i Hi.",
            "VernacExtend",
            "e00fff71ff314c991514fc71c41a3556702e444a"
        ],
        [
            "by apply lt_n_O in Hi.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "elim: (s) h h0 Hs (i) (lt_S_n _ _ Hi) => {s i Hi} [|h1 s IH] h h0 Hs /= i Hi x Hx.",
            "VernacExtend",
            "e686a1895f1799b840b76242f931100819a9ad6c"
        ],
        [
            "by apply lt_n_O in Hi.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "case: i Hx Hi => [|i]/= Hx Hi.",
            "VernacExtend",
            "e00fff71ff314c991514fc71c41a3556702e444a"
        ],
        [
            "rewrite /SF_fun /=.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "case: Rlt_dec => [Hx0 | _ ].",
            "VernacExtend",
            "e00fff71ff314c991514fc71c41a3556702e444a"
        ],
        [
            "contradict Hx0 ; apply Rle_not_lt, Hx.",
            "VernacExtend",
            "6ef0a3a9b1268f2f6220e4bab19f7636dea7f0fb"
        ],
        [
            "case: Rlt_dec => // Hx0 ; contradict Hx0 ; apply Hx.",
            "VernacExtend",
            "9d65530bfb1cf960991db629d690aef4449ab950"
        ],
        [
            "rewrite -(IH h0 h1 (proj2 Hs) i (lt_S_n _ _ Hi) x Hx).",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "rewrite /SF_fun /= ; case: Rlt_dec => [ Hx0 | _ ] //.",
            "VernacExtend",
            "712d339e99ee17eb7d5033e19ac614eb3ca6b532"
        ],
        [
            "contradict Hx0 ; apply Rle_not_lt, Rle_trans with (1 := proj1 Hs), Rle_trans with (2 := proj1 Hx), (sorted_head [:: h0, h1 & s] _ (proj2 Hs)) ; simpl; intuition.",
            "VernacExtend",
            "ab94b46b476160afb4a29acd17e29cb3038f39c6"
        ],
        [
            "case: Rlt_dec => [ Hx0 | _ ] //.",
            "VernacExtend",
            "e00fff71ff314c991514fc71c41a3556702e444a"
        ],
        [
            "contradict Hx0 ; apply Rle_not_lt, Rle_trans with (2 := proj1 Hx), (sorted_head [:: h0, h1 & s] _ (proj2 Hs)) ; simpl; intuition.",
            "VernacExtend",
            "6066f9967bc32a601bcff8bea7194e9b9d571a65"
        ],
        [
            "replace (a + (INR n + /2) * (b - a) / (INR n + 1)) with ((nth 0 (unif_part a b n) (n) + nth 0 (unif_part a b n) (S n)) / 2) ; [ | rewrite ?nth_mkseq ?minus_INR ?S_INR /= ; [field ; apply Rgt_not_eq | apply SSR_leq | apply SSR_leq ] ; intuition].",
            "VernacExtend",
            "3d25f9fc0431c258ec6ddca8acbb1cd892e04db7"
        ],
        [
            "suff : (1 < size (unif_part a b n))%nat.",
            "VernacExtend",
            "d07fc8b2103f140554938023774bf3f75d04ba99"
        ],
        [
            "move: x Hx ; have: (n = size (unif_part a b n) - 2)%nat ; [ rewrite size_mkseq ; intuition | ].",
            "VernacExtend",
            "e4a93f22e65d010afa3f2b86f954fa66848e383f"
        ],
        [
            "move => {2 4 8 10}->.",
            "VernacExtend",
            "b1b2cb7a3a617cba67460b4eca1f04de3c1cc716"
        ],
        [
            "rewrite /SF_val_fun /SF_fun_f2.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "case: (unif_part a b n) (unif_part_sort a b n Hab) => {a b Hab n} [| h s Hs x Hx /= Hi] .",
            "VernacExtend",
            "e00fff71ff314c991514fc71c41a3556702e444a"
        ],
        [
            "intros _ x Hx Hi.",
            "VernacExtend",
            "02d527550be0b821bfc6a0dced2481a83940f5c0"
        ],
        [
            "by apply lt_n_O in Hi.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "case: s h Hs Hi x Hx => [| h0 s] h Hs /= Hi.",
            "VernacExtend",
            "e00fff71ff314c991514fc71c41a3556702e444a"
        ],
        [
            "by apply lt_irrefl in Hi.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "elim: s h h0 Hs {Hi} => [| h1 s IH] h h0 Hs /= x Hx.",
            "VernacExtend",
            "e686a1895f1799b840b76242f931100819a9ad6c"
        ],
        [
            "rewrite /SF_fun /= ; case: Rlt_dec => [Hx0 | _].",
            "VernacExtend",
            "712d339e99ee17eb7d5033e19ac614eb3ca6b532"
        ],
        [
            "contradict Hx0 ; apply Rle_not_lt, Hx.",
            "VernacExtend",
            "6ef0a3a9b1268f2f6220e4bab19f7636dea7f0fb"
        ],
        [
            "case: Rle_dec => [| Hx0] // ; contradict Hx0 ; apply Hx.",
            "VernacExtend",
            "9d65530bfb1cf960991db629d690aef4449ab950"
        ],
        [
            "rewrite -minus_n_O in IH.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "rewrite -(IH h0 h1 (proj2 Hs) x Hx ).",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "rewrite /SF_fun /= ; case: Rlt_dec => [ Hx0 | _ ] //.",
            "VernacExtend",
            "712d339e99ee17eb7d5033e19ac614eb3ca6b532"
        ],
        [
            "contradict Hx0 ; apply Rle_not_lt, Rle_trans with (1 := proj1 Hs), Rle_trans with (2 := proj1 Hx), (sorted_head [:: h0, h1 & s] _ (proj2 Hs)) ; simpl; intuition.",
            "VernacExtend",
            "ab94b46b476160afb4a29acd17e29cb3038f39c6"
        ],
        [
            "case: Rlt_dec => [ Hx0 | _ ] //.",
            "VernacExtend",
            "e00fff71ff314c991514fc71c41a3556702e444a"
        ],
        [
            "contradict Hx0 ; apply Rle_not_lt, Rle_trans with (2 := proj1 Hx), (sorted_head [:: h0, h1 & s] _ (proj2 Hs)) ; simpl; intuition.",
            "VernacExtend",
            "6066f9967bc32a601bcff8bea7194e9b9d571a65"
        ],
        [
            "rewrite size_mkseq ; by apply lt_n_S, lt_O_Sn.",
            "VernacExtend",
            "f9e2aad1e70f1876566a77bd0af96f52b3b81520"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma RInt_val_Reals (f : R -> R) (a b : R) (n : nat) : RInt_val f a b n = RiemannInt_SF (sf_SF_val_fun f a b n).",
            "VernacStartTheoremProof",
            "b37003d96626a86db32f998459fb862e1e817422"
        ],
        [
            "rewrite /RiemannInt_SF SF_val_subdiv SF_val_subdiv_val ; case: Rle_dec => Hab.",
            "VernacExtend",
            "712d339e99ee17eb7d5033e19ac614eb3ca6b532"
        ],
        [
            "rewrite /RInt_val /SF_val_ly ; case: (unif_part a b n) => [| h s] /=.",
            "VernacExtend",
            "712d339e99ee17eb7d5033e19ac614eb3ca6b532"
        ],
        [
            "by [].",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "elim: s h => [|h0 s IH] h /=.",
            "VernacExtend",
            "e686a1895f1799b840b76242f931100819a9ad6c"
        ],
        [
            "by [].",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "rewrite (SF_cons_f2 _ h).",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "2: by apply lt_O_Sn.",
            "VernacExtend",
            "42cf05b0c5cd7515ffd5d7bb186f381ddeb0d8c5"
        ],
        [
            "rewrite Riemann_sum_cons /= IH /plus /scal /= /mult /=.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "ring.",
            "VernacExtend",
            "baadd9fc4c175005af409bb466fcea9fab25b4e6"
        ],
        [
            "rewrite RInt_val_swap /SF_val_ly /RInt_val.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "simpl opp ; apply f_equal.",
            "VernacExtend",
            "6cf6cd68910feeafa60c8d865e4e2456931deb4c"
        ],
        [
            "case: (unif_part b a n) => [| h s] /=.",
            "VernacExtend",
            "e00fff71ff314c991514fc71c41a3556702e444a"
        ],
        [
            "by [].",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "elim: s h => [|h0 s IH] h /=.",
            "VernacExtend",
            "e686a1895f1799b840b76242f931100819a9ad6c"
        ],
        [
            "by [].",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "rewrite SF_cons_f2.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "2: by apply lt_O_Sn.",
            "VernacExtend",
            "42cf05b0c5cd7515ffd5d7bb186f381ddeb0d8c5"
        ],
        [
            "rewrite Riemann_sum_cons IH /= /plus /scal /= /mult /=.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "ring.",
            "VernacExtend",
            "baadd9fc4c175005af409bb466fcea9fab25b4e6"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma ex_Im_fct (f : R -> R) (a b : R) : a <> b -> exists x, (fun y => exists x, y = f x /\\ Rmin a b < x < Rmax a b) x.",
            "VernacStartTheoremProof",
            "4febb5074dd0cd6bc3172ac32d1e28e8586336f0"
        ],
        [
            "exists (f ((a+b)/2)) ; exists ((a+b)/2) ; split.",
            "VernacExtend",
            "cecf3506d0c8a179922ad36c8ef4d79f4823906b"
        ],
        [
            "by [].",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "rewrite /Rmin /Rmax.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "case Rle_dec ; lra.",
            "VernacExtend",
            "068e8f6e144cff4747b71b8f15c0aa32dbfc6800"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Definition Sup_fct (f : R -> R) (a b : R) : Rbar := match Req_EM_T a b with | right Hab => Lub_Rbar (fun y => exists x, y = f x /\\ Rmin a b < x < Rmax a b) | left _ => Finite 0 end.",
            "VernacDefinition",
            "1172a4f15897ab6838da6ad747360e47a756e892"
        ],
        [
            "Definition Inf_fct (f : R -> R) (a b : R) : Rbar := match Req_EM_T a b with | right Hab => Glb_Rbar (fun y => exists x, y = f x /\\ Rmin a b < x < Rmax a b) | left _ => Finite 0 end.",
            "VernacDefinition",
            "df5721574083c45ae5ce87d78cfc6428cad7a7ec"
        ],
        [
            "Lemma Sup_fct_bound (f : R -> R) (a b : R) : Sup_fct f a b = Sup_fct f b a.",
            "VernacStartTheoremProof",
            "91dbab86721d02b83aec8b11f0daab2abcbd8d58"
        ],
        [
            "rewrite /Sup_fct /= ; case: Req_EM_T => Hab ; case: Req_EM_T => Hba.",
            "VernacExtend",
            "1418099f654a9d12bdfd561bac86adb846b83bfd"
        ],
        [
            "by [].",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "by apply sym_equal in Hab.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "by apply sym_equal in Hba.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "apply Lub_Rbar_eqset => x ; by rewrite Rmin_comm Rmax_comm.",
            "VernacExtend",
            "7bd77ea96f784074e3b1d448260a45dd4191485f"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma Inf_fct_bound (f : R -> R) (a b : R) : Inf_fct f a b = Inf_fct f b a.",
            "VernacStartTheoremProof",
            "5f6c08f3bb0dd6e67784f99ab5dc7337c156eb33"
        ],
        [
            "rewrite /Inf_fct /= ; case: Req_EM_T => Hab ; case: Req_EM_T => Hba.",
            "VernacExtend",
            "1418099f654a9d12bdfd561bac86adb846b83bfd"
        ],
        [
            "by [].",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "by apply sym_equal in Hab.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "by apply sym_equal in Hba.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "apply Glb_Rbar_eqset => x ; by rewrite Rmin_comm Rmax_comm.",
            "VernacExtend",
            "7bd77ea96f784074e3b1d448260a45dd4191485f"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma Sup_fct_le (f : R -> R) (a b : R) (x : R) : (Rmin a b < x < Rmax a b) -> Rbar_le (Finite (f x)) (Sup_fct f a b).",
            "VernacStartTheoremProof",
            "2d9a296cdaff2dea474468367e41ecf3d620db5c"
        ],
        [
            "move => Hx ; rewrite /Sup_fct.",
            "VernacExtend",
            "057edeb0967475c7ea5e8c98c449ddc5613eddc1"
        ],
        [
            "case: Req_EM_T => Hab.",
            "VernacExtend",
            "e00fff71ff314c991514fc71c41a3556702e444a"
        ],
        [
            "move: (Rlt_trans _ _ _ (proj1 Hx) (proj2 Hx)) => {Hx} ; rewrite /Rmin /Rmax ; case: Rle_dec (Req_le _ _ Hab) => //= _ _ Hx.",
            "VernacExtend",
            "d7214ac8fd48f4d1cd143edd9d16f6d28386a302"
        ],
        [
            "contradict Hx ; by apply Rle_not_lt, Req_le.",
            "VernacExtend",
            "846664ab7f58244d589de056389e6b3cbbc68e0c"
        ],
        [
            "rewrite /Lub_Rbar ; case: ex_lub_Rbar => l lub ; apply lub ; exists x ; split ; by [].",
            "VernacExtend",
            "84cc87747e2762f7eaa9164153eb056cdf821585"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma Inf_fct_le (f : R -> R) (a b : R) (x : R) : (Rmin a b < x < Rmax a b) -> Rbar_le (Inf_fct f a b) (Finite (f x)).",
            "VernacStartTheoremProof",
            "e94987954646ceeb2092a97ac13d5af735dd0f9c"
        ],
        [
            "move => Hx ; rewrite /Inf_fct.",
            "VernacExtend",
            "057edeb0967475c7ea5e8c98c449ddc5613eddc1"
        ],
        [
            "case: Req_EM_T => Hab.",
            "VernacExtend",
            "e00fff71ff314c991514fc71c41a3556702e444a"
        ],
        [
            "move: (Rlt_trans _ _ _ (proj1 Hx) (proj2 Hx)) => {Hx} ; rewrite /Rmin /Rmax ; case: Rle_dec (Req_le _ _ Hab) => //= _ _ Hx.",
            "VernacExtend",
            "d7214ac8fd48f4d1cd143edd9d16f6d28386a302"
        ],
        [
            "contradict Hx ; by apply Rle_not_lt, Req_le.",
            "VernacExtend",
            "846664ab7f58244d589de056389e6b3cbbc68e0c"
        ],
        [
            "rewrite /Glb_Rbar ; case: ex_glb_Rbar => l lub ; apply lub ; exists x ; split ; by [].",
            "VernacExtend",
            "84cc87747e2762f7eaa9164153eb056cdf821585"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma Sup_fct_maj (f : R -> R) (a b : R) (M : R) : (forall x, Rmin a b < x < Rmax a b -> f x <= M) -> is_finite (Sup_fct f a b).",
            "VernacStartTheoremProof",
            "016aecee95f9f628e552ddb21419b9f94170f77d"
        ],
        [
            "rewrite /Sup_fct ; case: Req_EM_T => Hab Hf.",
            "VernacExtend",
            "712d339e99ee17eb7d5033e19ac614eb3ca6b532"
        ],
        [
            "by [].",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "rewrite /Lub_Rbar ; case: ex_lub_Rbar ; case => [l | | ] [lub ub] /=.",
            "VernacExtend",
            "1418099f654a9d12bdfd561bac86adb846b83bfd"
        ],
        [
            "by [].",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "case: (ub (Finite M)) => //.",
            "VernacExtend",
            "e00fff71ff314c991514fc71c41a3556702e444a"
        ],
        [
            "move => _ [x [-> Hx]].",
            "VernacExtend",
            "b1b2cb7a3a617cba67460b4eca1f04de3c1cc716"
        ],
        [
            "by apply Hf.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "case: (lub (f((a+b)/2))) => //.",
            "VernacExtend",
            "e00fff71ff314c991514fc71c41a3556702e444a"
        ],
        [
            "exists ((a + b) / 2) ; split.",
            "VernacExtend",
            "31c1323a18b9390d60831a10de6fa98a1d621aa9"
        ],
        [
            "by [].",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "rewrite /Rmin /Rmax.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "case Rle_dec ; lra.",
            "VernacExtend",
            "068e8f6e144cff4747b71b8f15c0aa32dbfc6800"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma Inf_fct_min (f : R -> R) (a b : R) (m : R) : (forall x, Rmin a b < x < Rmax a b -> m <= f x) -> is_finite (Inf_fct f a b).",
            "VernacStartTheoremProof",
            "2984cd1ba65e6b93731d0d7bf9b8ec3f31eb2781"
        ],
        [
            "rewrite /Inf_fct ; case: Req_EM_T => Hab Hf.",
            "VernacExtend",
            "712d339e99ee17eb7d5033e19ac614eb3ca6b532"
        ],
        [
            "by [].",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "rewrite /Glb_Rbar ; case: ex_glb_Rbar ; case => [l | | ] [lub ub] /=.",
            "VernacExtend",
            "1418099f654a9d12bdfd561bac86adb846b83bfd"
        ],
        [
            "by [].",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "case: (lub (f((a+b)/2))) => //.",
            "VernacExtend",
            "e00fff71ff314c991514fc71c41a3556702e444a"
        ],
        [
            "exists ((a + b) / 2) ; split.",
            "VernacExtend",
            "31c1323a18b9390d60831a10de6fa98a1d621aa9"
        ],
        [
            "by [].",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "rewrite /Rmin /Rmax.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "case Rle_dec ; lra.",
            "VernacExtend",
            "068e8f6e144cff4747b71b8f15c0aa32dbfc6800"
        ],
        [
            "case: (ub (Finite m)) => //.",
            "VernacExtend",
            "e00fff71ff314c991514fc71c41a3556702e444a"
        ],
        [
            "move => _ [x [-> Hx]].",
            "VernacExtend",
            "b1b2cb7a3a617cba67460b4eca1f04de3c1cc716"
        ],
        [
            "by apply Hf.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Definition SF_sup_seq (f : R -> R) (a b : R) (n : nat) : SF_seq := SF_seq_f2 (Sup_fct f) (unif_part a b n).",
            "VernacDefinition",
            "efba8a77f84475fb70e57c0f3acd01085ca721ad"
        ],
        [
            "Lemma SF_sup_lx (f : R -> R) (a b : R) (n : nat) : SF_lx (SF_sup_seq f a b n) = unif_part a b n.",
            "VernacStartTheoremProof",
            "2d4d1270e681dad467985defdec1f42f0a8e617e"
        ],
        [
            "apply SF_lx_f2.",
            "VernacExtend",
            "03806ba675956df65a4424066595971be80349ee"
        ],
        [
            "now apply lt_O_Sn.",
            "VernacExtend",
            "7da5928fbfe3227dbdce67597fb518326f8c8a71"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma SF_sup_ly (f : R -> R) (a b : R) (n : nat) : SF_ly (SF_sup_seq f a b n) = behead (pairmap (Sup_fct f) 0 (unif_part a b n)).",
            "VernacStartTheoremProof",
            "84c04f0f4143996fff969eb26e6d7fb311e54a03"
        ],
        [
            "by apply SF_ly_f2.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Definition SF_inf_seq (f : R -> R) (a b : R) (n : nat) : SF_seq := SF_seq_f2 (Inf_fct f) (unif_part a b n).",
            "VernacDefinition",
            "df4ef071f974de804223c018b33699ecf940e6be"
        ],
        [
            "Lemma SF_inf_lx (f : R -> R) (a b : R) (n : nat) : SF_lx (SF_inf_seq f a b n) = unif_part a b n.",
            "VernacStartTheoremProof",
            "62864c6a4c32219d25b2f4d9f1d106a4352c44c2"
        ],
        [
            "by apply SF_lx_f2, lt_O_Sn.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma SF_inf_ly (f : R -> R) (a b : R) (n : nat) : SF_ly (SF_inf_seq f a b n) = behead (pairmap (Inf_fct f) 0 (unif_part a b n)).",
            "VernacStartTheoremProof",
            "dafcef5723d8839042241e0db175cdf19c521dc6"
        ],
        [
            "by apply SF_ly_f2.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma SF_sup_bound (f : R -> R) (a b : R) (n : nat) : SF_rev (SF_sup_seq f a b n) = SF_sup_seq f b a n.",
            "VernacStartTheoremProof",
            "1f241039ee8fa264fc04ff173ad66ea87c14010e"
        ],
        [
            "rewrite /SF_sup_seq unif_part_bound => //.",
            "VernacExtend",
            "3c42b53d0efc26db114b00541ac5e7fcb29e6aeb"
        ],
        [
            "rewrite SF_rev_f2 ?revK //.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "move => x y ; apply Sup_fct_bound.",
            "VernacExtend",
            "94ea6c97d8eeb14c7e886aab853c66f5c89d49e9"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma SF_inf_bound (f : R -> R) (a b : R) (n : nat) : SF_rev (SF_inf_seq f a b n) = SF_inf_seq f b a n.",
            "VernacStartTheoremProof",
            "a4076fdb5ed2b222f459a583e08ec494692a3a7f"
        ],
        [
            "rewrite /SF_inf_seq unif_part_bound => //.",
            "VernacExtend",
            "3c42b53d0efc26db114b00541ac5e7fcb29e6aeb"
        ],
        [
            "rewrite SF_rev_f2 ?revK //.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "move => x y ; apply Inf_fct_bound.",
            "VernacExtend",
            "7177cbe479a135881fa3da0287844901b25d23d7"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Definition SF_sup_fun (f : R -> R) (a b : R) (n : nat) (x : R) : Rbar := match (Rle_dec a b) with | left _ => SF_fun (SF_sup_seq f a b n) (Finite 0) x | right _ => SF_fun (SF_sup_seq f b a n) (Finite 0) x end.",
            "VernacDefinition",
            "016c33307e1c65e183187ea0f1060a9ef46ce7c9"
        ],
        [
            "Definition SF_inf_fun (f : R -> R) (a b : R) (n : nat) (x : R) : Rbar := match (Rle_dec a b) with | left _ => SF_fun (SF_inf_seq f a b n) (Finite 0) x | right _ => SF_fun (SF_inf_seq f b a n) (Finite 0) x end.",
            "VernacDefinition",
            "9489fcbc9721063f34f44d9712ca83ec20891878"
        ],
        [
            "Lemma SF_sup_fun_bound (f : R -> R) (a b : R) (n : nat) (x : R) : SF_sup_fun f a b n x = SF_sup_fun f b a n x.",
            "VernacStartTheoremProof",
            "076398f4b90c6e42b9b03cb40fbbbf52bbcceaba"
        ],
        [
            "rewrite /SF_sup_fun ; case: (Rle_dec a b) => Hab ; case : (Rle_dec b a) => Hba //.",
            "VernacExtend",
            "1418099f654a9d12bdfd561bac86adb846b83bfd"
        ],
        [
            "by rewrite (Rle_antisym _ _ Hab Hba).",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "by contradict Hba ; apply Rlt_le, Rnot_le_lt.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma SF_inf_fun_bound (f : R -> R) (a b : R) (n : nat) (x : R) : SF_inf_fun f a b n x = SF_inf_fun f b a n x.",
            "VernacStartTheoremProof",
            "f72340f65a4c5f2d45fe0ccde5090f57c2f767f0"
        ],
        [
            "rewrite /SF_inf_fun ; case: (Rle_dec a b) => Hab ; case : (Rle_dec b a) => Hba //.",
            "VernacExtend",
            "1418099f654a9d12bdfd561bac86adb846b83bfd"
        ],
        [
            "by rewrite (Rle_antisym _ _ Hab Hba).",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "by contradict Hba ; apply Rlt_le, Rnot_le_lt.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma SF_sup_fun_rw (f : R -> R) (a b : R) (n : nat) (x : R) (Hx : a <= x <= b) : SF_sup_fun f a b n x = match (unif_part_nat a b n x Hx) with | inleft H => Sup_fct f (nth 0 (unif_part a b n) (proj1_sig H)) (nth 0 (unif_part a b n) (S (proj1_sig H))) | inright _ => Sup_fct f (nth 0 (unif_part a b n) (n)) (nth 0 (unif_part a b n) (S n)) end.",
            "VernacStartTheoremProof",
            "d6555a1bdde9936ab659e8d5ede31ad83605977e"
        ],
        [
            "have Hab : (a <= b) ; [by apply Rle_trans with (1 := proj1 Hx), Hx | ].",
            "VernacExtend",
            "aba2b42bd7a87f88ac31bc37d93024dc60304d28"
        ],
        [
            "rewrite /SF_sup_fun /SF_sup_seq ; case: Rle_dec => // _.",
            "VernacExtend",
            "712d339e99ee17eb7d5033e19ac614eb3ca6b532"
        ],
        [
            "case: unif_part_nat => {Hx} [ [ i [Hx Hi] ] | Hx] ; simpl proj1_sig.",
            "VernacExtend",
            "df82625a5e4080596a437308dc84f9fbd8429810"
        ],
        [
            "case: (unif_part a b n) (unif_part_sort a b n Hab) i Hi x Hx => {a b Hab n} [| h s] Hs /= i Hi.",
            "VernacExtend",
            "e00fff71ff314c991514fc71c41a3556702e444a"
        ],
        [
            "by apply lt_n_O in Hi.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "case: (s) Hs (i) (lt_S_n _ _ Hi) => {s i Hi} [| h0 s] Hs /= i Hi.",
            "VernacExtend",
            "e00fff71ff314c991514fc71c41a3556702e444a"
        ],
        [
            "by apply lt_n_O in Hi.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "elim: (s) h h0 Hs (i) (lt_S_n _ _ Hi) => {s i Hi} [|h1 s IH] h h0 Hs /= i Hi x Hx.",
            "VernacExtend",
            "e686a1895f1799b840b76242f931100819a9ad6c"
        ],
        [
            "by apply lt_n_O in Hi.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "case: i Hx Hi => [|i]/= Hx Hi.",
            "VernacExtend",
            "e00fff71ff314c991514fc71c41a3556702e444a"
        ],
        [
            "rewrite /SF_fun /=.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "case: Rlt_dec => [Hx0 | _ ].",
            "VernacExtend",
            "e00fff71ff314c991514fc71c41a3556702e444a"
        ],
        [
            "contradict Hx0 ; apply Rle_not_lt, Hx.",
            "VernacExtend",
            "6ef0a3a9b1268f2f6220e4bab19f7636dea7f0fb"
        ],
        [
            "case: Rlt_dec => // Hx0 ; contradict Hx0 ; apply Hx.",
            "VernacExtend",
            "9d65530bfb1cf960991db629d690aef4449ab950"
        ],
        [
            "rewrite -(IH h0 h1 (proj2 Hs) i (lt_S_n _ _ Hi) x Hx).",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "rewrite /SF_fun /= ; case: Rlt_dec => [ Hx0 | _ ] //.",
            "VernacExtend",
            "712d339e99ee17eb7d5033e19ac614eb3ca6b532"
        ],
        [
            "contradict Hx0 ; apply Rle_not_lt, Rle_trans with (1 := proj1 Hs), Rle_trans with (2 := proj1 Hx), (sorted_head [:: h0, h1 & s] _ (proj2 Hs)) ; simpl; intuition.",
            "VernacExtend",
            "ab94b46b476160afb4a29acd17e29cb3038f39c6"
        ],
        [
            "case: Rlt_dec => [ Hx0 | _ ] //.",
            "VernacExtend",
            "e00fff71ff314c991514fc71c41a3556702e444a"
        ],
        [
            "contradict Hx0 ; apply Rle_not_lt, Rle_trans with (2 := proj1 Hx), (sorted_head [:: h0, h1 & s] _ (proj2 Hs)) ; simpl; intuition.",
            "VernacExtend",
            "6066f9967bc32a601bcff8bea7194e9b9d571a65"
        ],
        [
            "move: x Hx.",
            "VernacExtend",
            "b1b2cb7a3a617cba67460b4eca1f04de3c1cc716"
        ],
        [
            "suff : (1 < size (unif_part a b n))%nat.",
            "VernacExtend",
            "d07fc8b2103f140554938023774bf3f75d04ba99"
        ],
        [
            "have: (n = size (unif_part a b n) - 2)%nat ; [ rewrite size_mkseq ; intuition | move => {3 5 8 10}->].",
            "VernacExtend",
            "f209effa942c517e17021281e6def5f80f0b740f"
        ],
        [
            "case: (unif_part a b n) (unif_part_sort a b n Hab) => {a b Hab n} [| h s] Hs /= Hi.",
            "VernacExtend",
            "e00fff71ff314c991514fc71c41a3556702e444a"
        ],
        [
            "by apply lt_n_O in Hi.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "case: s h Hs Hi => [| h0 s] h Hs /= Hi.",
            "VernacExtend",
            "e00fff71ff314c991514fc71c41a3556702e444a"
        ],
        [
            "by apply lt_irrefl in Hi.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "rewrite -minus_n_O ; elim: s h h0 Hs {Hi} => [| h1 s IH] h h0 Hs /= x Hx.",
            "VernacExtend",
            "44a8e3b453c9376c468b4e3e0046f5ac33e11d6d"
        ],
        [
            "rewrite /SF_fun /= ; case: Rlt_dec => [Hx0 | _].",
            "VernacExtend",
            "712d339e99ee17eb7d5033e19ac614eb3ca6b532"
        ],
        [
            "contradict Hx0 ; apply Rle_not_lt, Hx.",
            "VernacExtend",
            "6ef0a3a9b1268f2f6220e4bab19f7636dea7f0fb"
        ],
        [
            "case: Rle_dec => [| Hx0] // ; contradict Hx0 ; apply Hx.",
            "VernacExtend",
            "9d65530bfb1cf960991db629d690aef4449ab950"
        ],
        [
            "rewrite -(IH h0 h1 (proj2 Hs) x Hx).",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "rewrite /SF_fun /= ; case: Rlt_dec => [ Hx0 | _ ] //.",
            "VernacExtend",
            "712d339e99ee17eb7d5033e19ac614eb3ca6b532"
        ],
        [
            "contradict Hx0 ; apply Rle_not_lt, Rle_trans with (1 := proj1 Hs), Rle_trans with (2 := proj1 Hx), (sorted_head [:: h0, h1 & s] _ (proj2 Hs)) ; simpl; intuition.",
            "VernacExtend",
            "ab94b46b476160afb4a29acd17e29cb3038f39c6"
        ],
        [
            "case: Rlt_dec => [ Hx0 | _ ] //.",
            "VernacExtend",
            "e00fff71ff314c991514fc71c41a3556702e444a"
        ],
        [
            "contradict Hx0 ; apply Rle_not_lt, Rle_trans with (2 := proj1 Hx), (sorted_head [:: h0, h1 & s] _ (proj2 Hs)) ; simpl; intuition.",
            "VernacExtend",
            "6066f9967bc32a601bcff8bea7194e9b9d571a65"
        ],
        [
            "rewrite size_mkseq ; by apply lt_n_S, lt_O_Sn.",
            "VernacExtend",
            "f9e2aad1e70f1876566a77bd0af96f52b3b81520"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma SF_inf_fun_rw (f : R -> R) (a b : R) (n : nat) (x : R) (Hx : a <= x <= b) : SF_inf_fun f a b n x = match (unif_part_nat a b n x Hx) with | inleft H => Inf_fct f (nth 0 (unif_part a b n) (proj1_sig H)) (nth 0 (unif_part a b n) (S (proj1_sig H))) | inright _ => Inf_fct f (nth 0 (unif_part a b n) (n)) (nth 0 (unif_part a b n) (S n)) end.",
            "VernacStartTheoremProof",
            "d607b5e7715edd6e3cdff998a6a7e09fc100acc9"
        ],
        [
            "have Hab : (a <= b) ; [by apply Rle_trans with (1 := proj1 Hx), Hx | ].",
            "VernacExtend",
            "aba2b42bd7a87f88ac31bc37d93024dc60304d28"
        ],
        [
            "rewrite /SF_inf_fun /SF_inf_seq ; case: Rle_dec => // _.",
            "VernacExtend",
            "712d339e99ee17eb7d5033e19ac614eb3ca6b532"
        ],
        [
            "case: unif_part_nat => {Hx} [ [ i [Hx Hi] ] | Hx] ; simpl proj1_sig.",
            "VernacExtend",
            "df82625a5e4080596a437308dc84f9fbd8429810"
        ],
        [
            "case: (unif_part a b n) (unif_part_sort a b n Hab) i Hi x Hx => {a b Hab n} [| h s] Hs /= i Hi.",
            "VernacExtend",
            "e00fff71ff314c991514fc71c41a3556702e444a"
        ],
        [
            "by apply lt_n_O in Hi.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "case: (s) Hs (i) (lt_S_n _ _ Hi) => {s i Hi} [| h0 s] Hs /= i Hi.",
            "VernacExtend",
            "e00fff71ff314c991514fc71c41a3556702e444a"
        ],
        [
            "by apply lt_n_O in Hi.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "elim: (s) h h0 Hs (i) (lt_S_n _ _ Hi) => {s i Hi} [|h1 s IH] h h0 Hs /= i Hi x Hx.",
            "VernacExtend",
            "e686a1895f1799b840b76242f931100819a9ad6c"
        ],
        [
            "by apply lt_n_O in Hi.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "case: i Hx Hi => [|i]/= Hx Hi.",
            "VernacExtend",
            "e00fff71ff314c991514fc71c41a3556702e444a"
        ],
        [
            "rewrite /SF_fun /=.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "case: Rlt_dec => [Hx0 | _ ].",
            "VernacExtend",
            "e00fff71ff314c991514fc71c41a3556702e444a"
        ],
        [
            "contradict Hx0 ; apply Rle_not_lt, Hx.",
            "VernacExtend",
            "6ef0a3a9b1268f2f6220e4bab19f7636dea7f0fb"
        ],
        [
            "case: Rlt_dec => // Hx0 ; contradict Hx0 ; apply Hx.",
            "VernacExtend",
            "9d65530bfb1cf960991db629d690aef4449ab950"
        ],
        [
            "rewrite -(IH h0 h1 (proj2 Hs) i (lt_S_n _ _ Hi) x Hx).",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "rewrite /SF_fun /= ; case: Rlt_dec => [ Hx0 | _ ] //.",
            "VernacExtend",
            "712d339e99ee17eb7d5033e19ac614eb3ca6b532"
        ],
        [
            "contradict Hx0 ; apply Rle_not_lt, Rle_trans with (1 := proj1 Hs), Rle_trans with (2 := proj1 Hx), (sorted_head [:: h0, h1 & s] _ (proj2 Hs)) ; simpl; intuition.",
            "VernacExtend",
            "ab94b46b476160afb4a29acd17e29cb3038f39c6"
        ],
        [
            "case: Rlt_dec => [ Hx0 | _ ] //.",
            "VernacExtend",
            "e00fff71ff314c991514fc71c41a3556702e444a"
        ],
        [
            "contradict Hx0 ; apply Rle_not_lt, Rle_trans with (2 := proj1 Hx), (sorted_head [:: h0, h1 & s] _ (proj2 Hs)) ; simpl; intuition.",
            "VernacExtend",
            "6066f9967bc32a601bcff8bea7194e9b9d571a65"
        ],
        [
            "move: x Hx.",
            "VernacExtend",
            "b1b2cb7a3a617cba67460b4eca1f04de3c1cc716"
        ],
        [
            "suff : (1 < size (unif_part a b n))%nat.",
            "VernacExtend",
            "d07fc8b2103f140554938023774bf3f75d04ba99"
        ],
        [
            "have: (n = size (unif_part a b n) - 2)%nat ; [ rewrite size_mkseq ; intuition | move => {3 5 8 10}->].",
            "VernacExtend",
            "f209effa942c517e17021281e6def5f80f0b740f"
        ],
        [
            "case: (unif_part a b n) (unif_part_sort a b n Hab) => {a b Hab n} [| h s] Hs /= Hi.",
            "VernacExtend",
            "e00fff71ff314c991514fc71c41a3556702e444a"
        ],
        [
            "by apply lt_n_O in Hi.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "case: s h Hs Hi => [| h0 s] h Hs /= Hi.",
            "VernacExtend",
            "e00fff71ff314c991514fc71c41a3556702e444a"
        ],
        [
            "by apply lt_irrefl in Hi.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "rewrite -minus_n_O ; elim: s h h0 Hs {Hi} => [| h1 s IH] h h0 Hs /= x Hx.",
            "VernacExtend",
            "44a8e3b453c9376c468b4e3e0046f5ac33e11d6d"
        ],
        [
            "rewrite /SF_fun /= ; case: Rlt_dec => [Hx0 | _].",
            "VernacExtend",
            "712d339e99ee17eb7d5033e19ac614eb3ca6b532"
        ],
        [
            "contradict Hx0 ; apply Rle_not_lt, Hx.",
            "VernacExtend",
            "6ef0a3a9b1268f2f6220e4bab19f7636dea7f0fb"
        ],
        [
            "case: Rle_dec => [| Hx0] // ; contradict Hx0 ; apply Hx.",
            "VernacExtend",
            "9d65530bfb1cf960991db629d690aef4449ab950"
        ],
        [
            "rewrite -(IH h0 h1 (proj2 Hs) x Hx).",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "rewrite /SF_fun /= ; case: Rlt_dec => [ Hx0 | _ ] //.",
            "VernacExtend",
            "712d339e99ee17eb7d5033e19ac614eb3ca6b532"
        ],
        [
            "contradict Hx0 ; apply Rle_not_lt, Rle_trans with (1 := proj1 Hs), Rle_trans with (2 := proj1 Hx), (sorted_head [:: h0, h1 & s] _ (proj2 Hs)) ; simpl; intuition.",
            "VernacExtend",
            "ab94b46b476160afb4a29acd17e29cb3038f39c6"
        ],
        [
            "case: Rlt_dec => [ Hx0 | _ ] //.",
            "VernacExtend",
            "e00fff71ff314c991514fc71c41a3556702e444a"
        ],
        [
            "contradict Hx0 ; apply Rle_not_lt, Rle_trans with (2 := proj1 Hx), (sorted_head [:: h0, h1 & s] _ (proj2 Hs)) ; simpl; intuition.",
            "VernacExtend",
            "6066f9967bc32a601bcff8bea7194e9b9d571a65"
        ],
        [
            "rewrite size_mkseq ; by apply lt_n_S, lt_O_Sn.",
            "VernacExtend",
            "f9e2aad1e70f1876566a77bd0af96f52b3b81520"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma ad_SF_sup_r (f : R -> R) (a b : R) (n : nat) : ((a <= b) -> adapted_couple (fun x => real (SF_sup_fun f a b n x)) a b (seq2Rlist (unif_part a b n)) (seq2Rlist (behead (pairmap (fun x y => real (Sup_fct f x y)) 0 (unif_part a b n))))) /\\ (~(a <= b) -> adapted_couple (fun x => real (SF_sup_fun f a b n x)) a b (seq2Rlist (unif_part b a n)) (seq2Rlist (behead (pairmap (fun x y => real (Sup_fct f x y)) 0 (unif_part b a n))))).",
            "VernacStartTheoremProof",
            "d6306e5d198d542ee0980872a291b1e9d6cbf363"
        ],
        [
            "wlog : a b / (a <= b) => [Hw|Hab].",
            "VernacExtend",
            "3c42b53d0efc26db114b00541ac5e7fcb29e6aeb"
        ],
        [
            "case: (Rle_dec a b) => // Hab ; split => // _.",
            "VernacExtend",
            "ba44c9d0281a02110ce54645304e6d990debd9c0"
        ],
        [
            "by apply (Hw a b).",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "apply Rnot_le_lt, Rlt_le in Hab ; case : (Hw b a Hab) => {Hw} Hw _ ; move: (Hw Hab) => {Hw} Hw ; rewrite /adapted_couple in Hw |-* ; rewrite Rmin_comm Rmax_comm ; intuition => x Hx ; rewrite SF_sup_fun_bound ; by apply H4.",
            "VernacExtend",
            "602bb67ca990ba806067b2e96997530b4fd4a705"
        ],
        [
            "split ; case: (Rle_dec a b)=> // _ _.",
            "VernacExtend",
            "7693ea0446b60093c0a33dc7341b41ab06f1698f"
        ],
        [
            "rewrite /SF_sup_fun ; case: (Rle_dec a b) => // _.",
            "VernacExtend",
            "712d339e99ee17eb7d5033e19ac614eb3ca6b532"
        ],
        [
            "have Hs : (SF_sorted Rle (SF_map real (SF_sup_seq f a b n))).",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "rewrite /SF_sorted SF_map_lx SF_lx_f2.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "replace (head 0 (unif_part a b n) :: behead (unif_part a b n)) with (unif_part a b n) by intuition.",
            "VernacExtend",
            "33ddbbb634af50f3e09e24e6dd2bafee7da21448"
        ],
        [
            "by apply unif_part_sort.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "by apply lt_O_Sn.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "have {2}<-: head 0 (unif_part a b n) = a.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "apply head_unif_part.",
            "VernacExtend",
            "b0bceba99846c59838f47a6d860d83d99fdf8e31"
        ],
        [
            "have {3}<-: last 0 (unif_part a b n) = b.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "apply last_unif_part.",
            "VernacExtend",
            "3b49fd4fd44633dd2b027307aeaaab4b7662851f"
        ],
        [
            "replace (behead (pairmap (fun x y : R => real (Sup_fct f x y)) 0 (unif_part a b n))) with (SF_ly (SF_map real (SF_sup_seq f a b n))).",
            "VernacExtend",
            "47277125272d1ad16f69756055269419e876e4b0"
        ],
        [
            "replace (unif_part a b n) with (SF_lx (SF_map real (SF_sup_seq f a b n))).",
            "VernacExtend",
            "2d25d0dcb64de46aea8b2e38014532e97c995d5d"
        ],
        [
            "move: (ad_SF_compat (f ((0+0)/2)) (SF_map real (SF_sup_seq f a b n)) Hs) ; rewrite /adapted_couple => Had ; intuition.",
            "VernacExtend",
            "0f44ab8bc7e042a55cc0ca1b0bddbe1cb95144ff"
        ],
        [
            "move: (H4 i H3) => {H4} H3' x H4.",
            "VernacExtend",
            "b1b2cb7a3a617cba67460b4eca1f04de3c1cc716"
        ],
        [
            "move: (H3' x H4) => {H3'} <-.",
            "VernacExtend",
            "b1b2cb7a3a617cba67460b4eca1f04de3c1cc716"
        ],
        [
            "rewrite -(SF_fun_map real).",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "2: rewrite SF_map_lx SF_lx_f2 // ; by apply lt_O_Sn.",
            "VernacExtend",
            "419198a6125d531a63c7f1daac9e9e04028f6b06"
        ],
        [
            "2: rewrite SF_map_ly SF_ly_f2 ; by rewrite -behead_map map_pairmap.",
            "VernacExtend",
            "419198a6125d531a63c7f1daac9e9e04028f6b06"
        ],
        [
            "move: H3 H4.",
            "VernacExtend",
            "b1b2cb7a3a617cba67460b4eca1f04de3c1cc716"
        ],
        [
            "rewrite /SF_sup_seq.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "rewrite !nth_compat size_compat SF_map_lx SF_lx_f2.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "2: apply lt_O_Sn.",
            "VernacExtend",
            "b53c0b5c0931dee63228e11f90097e425fb37e03"
        ],
        [
            "unfold SF_fun.",
            "VernacExtend",
            "666d2a78604d8837124aa4a2e8f516b48daffe68"
        ],
        [
            "elim: (unif_part a b n) (unif_part_sort a b n Hab) {3}(0) {1}(f ((0 + 0) / 2)) i => [ | x0 l IH] Hl z0 z1 i Hi Hx.",
            "VernacExtend",
            "e686a1895f1799b840b76242f931100819a9ad6c"
        ],
        [
            "by apply lt_n_O in Hi.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "simpl in Hi.",
            "VernacExtend",
            "9a3f12b4161c46e477680e4a707994e937e8c506"
        ],
        [
            "destruct l as [ | x1 l].",
            "VernacExtend",
            "0749af805e709d9687ff64c08fffc19bb08451db"
        ],
        [
            "by apply lt_n_O in Hi.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "rewrite SF_cons_f2.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "2: by apply lt_O_Sn.",
            "VernacExtend",
            "42cf05b0c5cd7515ffd5d7bb186f381ddeb0d8c5"
        ],
        [
            "rewrite SF_map_cons.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "case: i Hi Hx => [ | i] Hi /= Hx.",
            "VernacExtend",
            "e00fff71ff314c991514fc71c41a3556702e444a"
        ],
        [
            "case: Rlt_dec => Hx0 //.",
            "VernacExtend",
            "e00fff71ff314c991514fc71c41a3556702e444a"
        ],
        [
            "contradict Hx0 ; apply Rle_not_lt, Rlt_le, Hx.",
            "VernacExtend",
            "7360532d61ff1a025c00ee074c74d821bc9b50ec"
        ],
        [
            "case: (l) => [ | x2 l'] /=.",
            "VernacExtend",
            "e00fff71ff314c991514fc71c41a3556702e444a"
        ],
        [
            "case: Rle_dec => // Hx1.",
            "VernacExtend",
            "e00fff71ff314c991514fc71c41a3556702e444a"
        ],
        [
            "contradict Hx1 ; by apply Rlt_le, Hx.",
            "VernacExtend",
            "ecf2a321255461572e499c9a8b0f6f3938bb9bca"
        ],
        [
            "case: Rlt_dec (proj2 Hx) => //.",
            "VernacExtend",
            "e00fff71ff314c991514fc71c41a3556702e444a"
        ],
        [
            "case: Rlt_dec => //= Hx0.",
            "VernacExtend",
            "e00fff71ff314c991514fc71c41a3556702e444a"
        ],
        [
            "contradict Hx0.",
            "VernacExtend",
            "ee37c8a39e119865a14ea707ef84d51e6c42b16e"
        ],
        [
            "apply Rle_not_lt, Rlt_le.",
            "VernacExtend",
            "947b2491ad420e5f2f06b8e61d73f131b606c716"
        ],
        [
            "eapply Rle_lt_trans, Hx.",
            "VernacExtend",
            "e9f2b35a6030f7ab7438e2fdc367b84886262311"
        ],
        [
            "eapply Rle_trans, sorted_head.",
            "VernacExtend",
            "2988194d27f609f2cd17d131aa1bd1c7414ef379"
        ],
        [
            "by apply Hl.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "by apply Hl.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "eapply lt_trans, Hi.",
            "VernacExtend",
            "7c3c4d6fd094621d6fa142cdf1e30e01cd013c90"
        ],
        [
            "by apply lt_n_Sn.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "eapply (IH (proj2 Hl) (Sup_fct f x0 x1) (Sup_fct f x0 x1)).",
            "VernacExtend",
            "539f57f8563213f5f7b65fa65e14b0ac8bfe6c2f"
        ],
        [
            "2: apply Hx.",
            "VernacExtend",
            "6cb51cfe82d780a63a3f0ebb0c313c5fb0245d85"
        ],
        [
            "simpl ; by apply lt_S_n.",
            "VernacExtend",
            "58f90b18beae5b9cd92772a1e3ce5ef0dc6bd627"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Definition SF_sup_r (f : R -> R) (a b : R) (n : nat) : StepFun a b.",
            "VernacDefinition",
            "dd3389fcb41319eec552587c13c7674ac38eb8d5"
        ],
        [
            "exists (fun x => real (SF_sup_fun f a b n x)) ; case : (Rle_dec a b) => Hab.",
            "VernacExtend",
            "3470300c310e32f3e70e0875b6f531b557fdc04d"
        ],
        [
            "exists (seq2Rlist (unif_part a b n)) ; exists (seq2Rlist (behead (pairmap (fun x y => real (Sup_fct f x y)) 0 (unif_part a b n)))) ; by apply ad_SF_sup_r.",
            "VernacExtend",
            "612de062a6eb2b47acf7c128f7c03cdb8576b3da"
        ],
        [
            "exists (seq2Rlist ((unif_part b a n))) ; exists (seq2Rlist (behead (pairmap (fun x y => real (Sup_fct f x y)) 0 (unif_part b a n)))) ; by apply ad_SF_sup_r.",
            "VernacExtend",
            "a05545140b69f148df003d0c862f758f8bb198af"
        ],
        [
            "Defined.",
            "VernacEndProof",
            "88c0be54a50df4bb90276c075406fe442428eb9c"
        ],
        [
            "Lemma SF_sup_subdiv (f : R -> R) (a b : R) (n : nat) : subdivision (SF_sup_r f a b n) = match (Rle_dec a b) with | left _ => seq2Rlist (unif_part a b n) | right _ => seq2Rlist (unif_part b a n) end.",
            "VernacStartTheoremProof",
            "801ca4f2c95e98ac7831a7a6c2920b4366599c1f"
        ],
        [
            "rewrite /SF_sup_r ; case: (Rle_dec a b) => Hab //.",
            "VernacExtend",
            "712d339e99ee17eb7d5033e19ac614eb3ca6b532"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma SF_sup_subdiv_val (f : R -> R) (a b : R) (n : nat) : subdivision_val (SF_sup_r f a b n) = match (Rle_dec a b) with | left _ => (seq2Rlist (behead (pairmap (fun x y => real (Sup_fct f x y)) 0 (unif_part a b n)))) | right _ => (seq2Rlist (behead (pairmap (fun x y => real (Sup_fct f x y)) 0 (unif_part b a n)))) end.",
            "VernacStartTheoremProof",
            "de6d5cc6fbcbe1669e5e99b7521806635365f855"
        ],
        [
            "rewrite /SF_sup_r ; case: (Rle_dec a b) => Hab //.",
            "VernacExtend",
            "712d339e99ee17eb7d5033e19ac614eb3ca6b532"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma SF_sup_r_bound (f : R -> R) (a b : R) (n : nat) : forall x, SF_sup_r f a b n x = SF_sup_r f b a n x.",
            "VernacStartTheoremProof",
            "a07cff089a147dfeb79e3b2b677c626a86bcbfdf"
        ],
        [
            "move => x /= ; by rewrite SF_sup_fun_bound.",
            "VernacExtend",
            "c42ec967bffec70acce34c6295bd61fe6baf57b0"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma ad_SF_inf_r (f : R -> R) (a b : R) (n : nat) : ((a <= b) -> adapted_couple (fun x => real (SF_inf_fun f a b n x)) a b (seq2Rlist (unif_part a b n)) (seq2Rlist (behead (pairmap (fun x y => real (Inf_fct f x y)) 0 (unif_part a b n))))) /\\ (~(a <= b) -> adapted_couple (fun x => real (SF_inf_fun f a b n x)) a b (seq2Rlist (unif_part b a n)) (seq2Rlist (behead (pairmap (fun x y => real (Inf_fct f x y)) 0 (unif_part b a n))))).",
            "VernacStartTheoremProof",
            "44a485f04e504beb3248a9e2a01c41348fdf48a7"
        ],
        [
            "wlog : a b / (a <= b) => [Hw|Hab].",
            "VernacExtend",
            "3c42b53d0efc26db114b00541ac5e7fcb29e6aeb"
        ],
        [
            "case: (Rle_dec a b) => // Hab ; split => // _.",
            "VernacExtend",
            "ba44c9d0281a02110ce54645304e6d990debd9c0"
        ],
        [
            "by apply (Hw a b).",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "apply Rnot_le_lt, Rlt_le in Hab ; case : (Hw b a Hab) => {Hw} Hw _ ; move: (Hw Hab) => {Hw} Hw ; rewrite /adapted_couple in Hw |-* ; rewrite Rmin_comm Rmax_comm ; intuition => x Hx ; rewrite SF_inf_fun_bound ; by apply H4.",
            "VernacExtend",
            "602bb67ca990ba806067b2e96997530b4fd4a705"
        ],
        [
            "split ; case: (Rle_dec a b)=> // _ _.",
            "VernacExtend",
            "7693ea0446b60093c0a33dc7341b41ab06f1698f"
        ],
        [
            "rewrite /SF_inf_fun ; case: (Rle_dec a b) => // _.",
            "VernacExtend",
            "712d339e99ee17eb7d5033e19ac614eb3ca6b532"
        ],
        [
            "have Hs : (SF_sorted Rle (SF_map real (SF_inf_seq f a b n))).",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "rewrite /SF_sorted SF_map_lx SF_lx_f2.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "replace (head 0 (unif_part a b n) :: behead (unif_part a b n)) with (unif_part a b n) by intuition.",
            "VernacExtend",
            "33ddbbb634af50f3e09e24e6dd2bafee7da21448"
        ],
        [
            "by apply unif_part_sort.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "by apply lt_O_Sn.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "have {2}<-: head 0 (unif_part a b n) = a.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "apply head_unif_part.",
            "VernacExtend",
            "b0bceba99846c59838f47a6d860d83d99fdf8e31"
        ],
        [
            "have {3}<-: last 0 (unif_part a b n) = b.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "apply last_unif_part.",
            "VernacExtend",
            "3b49fd4fd44633dd2b027307aeaaab4b7662851f"
        ],
        [
            "replace (behead (pairmap (fun x y : R => real (Inf_fct f x y)) 0 (unif_part a b n))) with (SF_ly (SF_map real (SF_inf_seq f a b n))).",
            "VernacExtend",
            "bfcd66c93a5ba2bed8bba3009fc6abd4df83195b"
        ],
        [
            "replace (unif_part a b n) with (SF_lx (SF_map real (SF_inf_seq f a b n))).",
            "VernacExtend",
            "8a7c986f476e1b4f40c9eea4692cbb6056670b52"
        ],
        [
            "move: (ad_SF_compat (f ((0+0)/2)) (SF_map real (SF_inf_seq f a b n)) Hs) ; rewrite /adapted_couple => Had ; intuition.",
            "VernacExtend",
            "0f44ab8bc7e042a55cc0ca1b0bddbe1cb95144ff"
        ],
        [
            "move: (H4 i H3) => {H4} H3' x H4.",
            "VernacExtend",
            "b1b2cb7a3a617cba67460b4eca1f04de3c1cc716"
        ],
        [
            "move: (H3' x H4) => {H3'} <-.",
            "VernacExtend",
            "b1b2cb7a3a617cba67460b4eca1f04de3c1cc716"
        ],
        [
            "rewrite -(SF_fun_map real).",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "2: rewrite SF_map_lx SF_lx_f2 // ; by apply lt_O_Sn.",
            "VernacExtend",
            "419198a6125d531a63c7f1daac9e9e04028f6b06"
        ],
        [
            "2: rewrite SF_map_ly SF_ly_f2 ; by rewrite -behead_map map_pairmap.",
            "VernacExtend",
            "419198a6125d531a63c7f1daac9e9e04028f6b06"
        ],
        [
            "move: H3 H4.",
            "VernacExtend",
            "b1b2cb7a3a617cba67460b4eca1f04de3c1cc716"
        ],
        [
            "rewrite /SF_inf_seq.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "rewrite !nth_compat size_compat SF_map_lx SF_lx_f2.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "2: apply lt_O_Sn.",
            "VernacExtend",
            "b53c0b5c0931dee63228e11f90097e425fb37e03"
        ],
        [
            "unfold SF_fun.",
            "VernacExtend",
            "666d2a78604d8837124aa4a2e8f516b48daffe68"
        ],
        [
            "elim: (unif_part a b n) (unif_part_sort a b n Hab) {3}(0) {1}(f ((0 + 0) / 2)) i => [ | x0 l IH] Hl z0 z1 i Hi Hx.",
            "VernacExtend",
            "e686a1895f1799b840b76242f931100819a9ad6c"
        ],
        [
            "by apply lt_n_O in Hi.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "simpl in Hi.",
            "VernacExtend",
            "9a3f12b4161c46e477680e4a707994e937e8c506"
        ],
        [
            "destruct l as [ | x1 l].",
            "VernacExtend",
            "0749af805e709d9687ff64c08fffc19bb08451db"
        ],
        [
            "by apply lt_n_O in Hi.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "rewrite SF_cons_f2.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "2: by apply lt_O_Sn.",
            "VernacExtend",
            "42cf05b0c5cd7515ffd5d7bb186f381ddeb0d8c5"
        ],
        [
            "rewrite SF_map_cons.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "case: i Hi Hx => [ | i] Hi /= Hx.",
            "VernacExtend",
            "e00fff71ff314c991514fc71c41a3556702e444a"
        ],
        [
            "case: Rlt_dec => Hx0 //.",
            "VernacExtend",
            "e00fff71ff314c991514fc71c41a3556702e444a"
        ],
        [
            "contradict Hx0 ; apply Rle_not_lt, Rlt_le, Hx.",
            "VernacExtend",
            "7360532d61ff1a025c00ee074c74d821bc9b50ec"
        ],
        [
            "case: (l) => [ | x2 l'] /=.",
            "VernacExtend",
            "e00fff71ff314c991514fc71c41a3556702e444a"
        ],
        [
            "case: Rle_dec => // Hx1.",
            "VernacExtend",
            "e00fff71ff314c991514fc71c41a3556702e444a"
        ],
        [
            "contradict Hx1 ; by apply Rlt_le, Hx.",
            "VernacExtend",
            "ecf2a321255461572e499c9a8b0f6f3938bb9bca"
        ],
        [
            "case: Rlt_dec (proj2 Hx) => //.",
            "VernacExtend",
            "e00fff71ff314c991514fc71c41a3556702e444a"
        ],
        [
            "case: Rlt_dec => //= Hx0.",
            "VernacExtend",
            "e00fff71ff314c991514fc71c41a3556702e444a"
        ],
        [
            "contradict Hx0.",
            "VernacExtend",
            "ee37c8a39e119865a14ea707ef84d51e6c42b16e"
        ],
        [
            "apply Rle_not_lt, Rlt_le.",
            "VernacExtend",
            "947b2491ad420e5f2f06b8e61d73f131b606c716"
        ],
        [
            "eapply Rle_lt_trans, Hx.",
            "VernacExtend",
            "e9f2b35a6030f7ab7438e2fdc367b84886262311"
        ],
        [
            "eapply Rle_trans, sorted_head.",
            "VernacExtend",
            "2988194d27f609f2cd17d131aa1bd1c7414ef379"
        ],
        [
            "by apply Hl.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "by apply Hl.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "eapply lt_trans, Hi.",
            "VernacExtend",
            "7c3c4d6fd094621d6fa142cdf1e30e01cd013c90"
        ],
        [
            "by apply lt_n_Sn.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "eapply (IH (proj2 Hl) (Inf_fct f x0 x1) (Inf_fct f x0 x1)).",
            "VernacExtend",
            "abe89a9fbb3b8ae0817a94ce68c57f5b3503ac21"
        ],
        [
            "2: apply Hx.",
            "VernacExtend",
            "6cb51cfe82d780a63a3f0ebb0c313c5fb0245d85"
        ],
        [
            "simpl ; by apply lt_S_n.",
            "VernacExtend",
            "58f90b18beae5b9cd92772a1e3ce5ef0dc6bd627"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Definition SF_inf_r (f : R -> R) (a b : R) (n : nat) : StepFun a b.",
            "VernacDefinition",
            "16b90b76827dc60d6107073621c78a9c04d692bb"
        ],
        [
            "exists (fun x => real (SF_inf_fun f a b n x)) ; case : (Rle_dec a b) => Hab.",
            "VernacExtend",
            "74a3c908fd2744152f76e3304a2b12e28f0b3bc7"
        ],
        [
            "exists (seq2Rlist (unif_part a b n)) ; exists (seq2Rlist (behead (pairmap (fun x y => real (Inf_fct f x y)) 0 (unif_part a b n)))) ; by apply ad_SF_inf_r.",
            "VernacExtend",
            "3608f5e82e4b48d7bf5f8a838122843a1e5313cc"
        ],
        [
            "exists (seq2Rlist ((unif_part b a n))) ; exists (seq2Rlist (behead (pairmap (fun x y => real (Inf_fct f x y)) 0 (unif_part b a n)))) ; by apply ad_SF_inf_r.",
            "VernacExtend",
            "6657a1afc0ab20909c72f12c64017c655d459f21"
        ],
        [
            "Defined.",
            "VernacEndProof",
            "88c0be54a50df4bb90276c075406fe442428eb9c"
        ],
        [
            "Lemma SF_inf_subdiv (f : R -> R) (a b : R) (n : nat) : subdivision (SF_inf_r f a b n) = match (Rle_dec a b) with | left _ => seq2Rlist (unif_part a b n) | right _ => seq2Rlist (unif_part b a n) end.",
            "VernacStartTheoremProof",
            "fd94e417501f9dbee1d9c3521f942a2525256710"
        ],
        [
            "rewrite /SF_inf_r ; case: (Rle_dec a b) => Hab //.",
            "VernacExtend",
            "712d339e99ee17eb7d5033e19ac614eb3ca6b532"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma SF_inf_subdiv_val (f : R -> R) (a b : R) (n : nat) : subdivision_val (SF_inf_r f a b n) = match (Rle_dec a b) with | left _ => (seq2Rlist (behead (pairmap (fun x y => real (Inf_fct f x y)) 0 (unif_part a b n)))) | right _ => (seq2Rlist (behead (pairmap (fun x y => real (Inf_fct f x y)) 0 (unif_part b a n)))) end.",
            "VernacStartTheoremProof",
            "f482c835b1af126917aad00852bc0580ddc0894c"
        ],
        [
            "rewrite /SF_inf_r ; case: (Rle_dec a b) => Hab //.",
            "VernacExtend",
            "712d339e99ee17eb7d5033e19ac614eb3ca6b532"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma SF_inf_r_bound (f : R -> R) (a b : R) (n : nat) : forall x, SF_inf_r f a b n x = SF_inf_r f b a n x.",
            "VernacStartTheoremProof",
            "151a4e945bb9d9124943a1454043260fe1ad70ed"
        ],
        [
            "move => x /= ; by rewrite SF_inf_fun_bound.",
            "VernacExtend",
            "c42ec967bffec70acce34c6295bd61fe6baf57b0"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ]
    ],
    "proofs": [
        {
            "name": "seq2Rlist_bij",
            "line_nb": 7,
            "steps": [
                {
                    "command": [
                        "by elim: s => //= h s ->.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "Rlist2seq_bij",
            "line_nb": 10,
            "steps": [
                {
                    "command": [
                        "by elim: s => //= h s ->.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "size_compat",
            "line_nb": 13,
            "steps": [
                {
                    "command": [
                        "elim: s => // t s IHs /= ; by rewrite IHs.",
                        "VernacExtend",
                        "a7a7c7611d0b423be48ea257cc8cc8725ae41f55"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "nth_compat",
            "line_nb": 16,
            "steps": [
                {
                    "command": [
                        "elim: s n => [n|t s IHs n] /= ; case: n => //=.",
                        "VernacExtend",
                        "df63f96bedbb0673aecb42521d90011325a86c94"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "rev_rev",
            "line_nb": 19,
            "steps": [
                {
                    "command": [
                        "elim: l => /= [ | h l IH].",
                        "VernacExtend",
                        "e686a1895f1799b840b76242f931100819a9ad6c"
                    ]
                },
                {
                    "command": [
                        "by [].",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "by rewrite rev_cons rev_rcons IH.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "head_rev",
            "line_nb": 24,
            "steps": [
                {
                    "command": [
                        "elim: l x0 => /= [ | x1 l IH] x0.",
                        "VernacExtend",
                        "e686a1895f1799b840b76242f931100819a9ad6c"
                    ]
                },
                {
                    "command": [
                        "by [].",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "by rewrite rev_cons head_rcons.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "last_rev",
            "line_nb": 29,
            "steps": [
                {
                    "command": [
                        "by rewrite -head_rev rev_rev.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "last_unzip1",
            "line_nb": 32,
            "steps": [
                {
                    "command": [
                        "case: s => [ | h s] //= .",
                        "VernacExtend",
                        "e00fff71ff314c991514fc71c41a3556702e444a"
                    ]
                },
                {
                    "command": [
                        "elim: s h => [ | h0 s IH] h //=.",
                        "VernacExtend",
                        "e686a1895f1799b840b76242f931100819a9ad6c"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "sorted_nth",
            "line_nb": 37,
            "steps": [
                {
                    "command": [
                        "case: s.",
                        "VernacExtend",
                        "e00fff71ff314c991514fc71c41a3556702e444a"
                    ]
                },
                {
                    "command": [
                        "split => // _ i Hi ; contradict Hi ; apply lt_n_O.",
                        "VernacExtend",
                        "b09118431c7e1de144bec6b0f6c79c13f26f7c00"
                    ]
                },
                {
                    "command": [
                        "move => t s ; elim: s t => [ t | t s IHs t0] ; split => // H.",
                        "VernacExtend",
                        "8abe8d38869047358e648d9788239440e9625d0e"
                    ]
                },
                {
                    "command": [
                        "move => i Hi ; contradict Hi ; apply lt_n_O.",
                        "VernacExtend",
                        "443bc58052aa1493e4b5c6e1c7c861737e6e2a6b"
                    ]
                },
                {
                    "command": [
                        "case => [| i] Hi x0 ; simpl in Hi.",
                        "VernacExtend",
                        "6c67f51406ab71d8829c8fac70eca489407bbdaa"
                    ]
                },
                {
                    "command": [
                        "apply H.",
                        "VernacExtend",
                        "4b47b71ad0f800d57cbdc591d68949e07decb540"
                    ]
                },
                {
                    "command": [
                        "case: (IHs t) => {IHs} IHs _ ; apply (IHs (proj2 H) i (lt_S_n _ _ Hi) x0).",
                        "VernacExtend",
                        "716fcce498fddba33c4b4e359a3d53e723e3ab15"
                    ]
                },
                {
                    "command": [
                        "split.",
                        "VernacExtend",
                        "55abc140132bd88981001ac656020469a8d503eb"
                    ]
                },
                {
                    "command": [
                        "apply (H O (lt_0_Sn _) t).",
                        "VernacExtend",
                        "33eb8e89a75bf35bf6b1e3027a688937a7dad049"
                    ]
                },
                {
                    "command": [
                        "case: (IHs t) => {IHs} _ IHs.",
                        "VernacExtend",
                        "e00fff71ff314c991514fc71c41a3556702e444a"
                    ]
                },
                {
                    "command": [
                        "apply: IHs => i Hi x0 ; apply: (H (S i)) ; simpl ; apply lt_n_S, Hi.",
                        "VernacExtend",
                        "c56bc20f384e92178d0e1b99bc101b6f97fd5880"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "sorted_cat",
            "line_nb": 50,
            "steps": [
                {
                    "command": [
                        "move/sorted_nth => H1.",
                        "VernacExtend",
                        "b1b2cb7a3a617cba67460b4eca1f04de3c1cc716"
                    ]
                },
                {
                    "command": [
                        "move/sorted_nth => H2 H0.",
                        "VernacExtend",
                        "b1b2cb7a3a617cba67460b4eca1f04de3c1cc716"
                    ]
                },
                {
                    "command": [
                        "apply sorted_nth => i Hi => x1.",
                        "VernacExtend",
                        "3c42b53d0efc26db114b00541ac5e7fcb29e6aeb"
                    ]
                },
                {
                    "command": [
                        "rewrite ?nth_cat.",
                        "VernacExtend",
                        "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
                    ]
                },
                {
                    "command": [
                        "rewrite ?SSR_minus.",
                        "VernacExtend",
                        "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
                    ]
                },
                {
                    "command": [
                        "case: (le_dec (S i) (size s1)) => Hi0.",
                        "VernacExtend",
                        "e00fff71ff314c991514fc71c41a3556702e444a"
                    ]
                },
                {
                    "command": [
                        "move: (proj2 (SSR_leq _ _) Hi0) ; case: (ssrnat.leq (S i) (size s1)) => // _.",
                        "VernacExtend",
                        "a01b3d93f426ff68d360351709a5fa5af822af32"
                    ]
                },
                {
                    "command": [
                        "case: (le_dec (S (S i)) (size s1)) => Hi1.",
                        "VernacExtend",
                        "e00fff71ff314c991514fc71c41a3556702e444a"
                    ]
                },
                {
                    "command": [
                        "move: (proj2 (SSR_leq _ _) Hi1) ; case: (ssrnat.leq (S (S i)) (size s1)) => // _.",
                        "VernacExtend",
                        "a01b3d93f426ff68d360351709a5fa5af822af32"
                    ]
                },
                {
                    "command": [
                        "apply H1 ; intuition.",
                        "VernacExtend",
                        "b839507d92adb74feaaf354b5935cd3fbef3f432"
                    ]
                },
                {
                    "command": [
                        "have : ~ (ssrnat.leq (S (S i)) (size s1)).",
                        "VernacExtend",
                        "406cde1174359c53bf162a2a18c4eede395555f9"
                    ]
                },
                {
                    "command": [
                        "contradict Hi1 ; by apply SSR_leq.",
                        "VernacExtend",
                        "6363b39ba4b13f3f8f8447db1431f8dc3a78193b"
                    ]
                },
                {
                    "command": [
                        "case: (ssrnat.leq (S (S i)) (size s1)) => // _.",
                        "VernacExtend",
                        "e00fff71ff314c991514fc71c41a3556702e444a"
                    ]
                },
                {
                    "command": [
                        "suff Hi' : i = Peano.pred (size s1).",
                        "VernacExtend",
                        "d07fc8b2103f140554938023774bf3f75d04ba99"
                    ]
                },
                {
                    "command": [
                        "rewrite Hi' nth_last.",
                        "VernacExtend",
                        "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
                    ]
                },
                {
                    "command": [
                        "replace (S (Peano.pred (size s1)) - size s1)%nat with O.",
                        "VernacExtend",
                        "814958b9cb193c1ba17d3104ac012fdff7b57999"
                    ]
                },
                {
                    "command": [
                        "rewrite nth0.",
                        "VernacExtend",
                        "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
                    ]
                },
                {
                    "command": [
                        "apply not_le in Hi1.",
                        "VernacExtend",
                        "767d65c74308b7145c77df7916f06acea53af706"
                    ]
                },
                {
                    "command": [
                        "case: (s1) H0 Hi Hi' Hi0 Hi1 => [ | x2 s1'] //= H0 Hi Hi' Hi0 Hi1.",
                        "VernacExtend",
                        "e00fff71ff314c991514fc71c41a3556702e444a"
                    ]
                },
                {
                    "command": [
                        "by apply le_Sn_O in Hi0.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "case: (s2) H0 Hi0 Hi => [ | x3 s2'] //= H0 Hi0 Hi.",
                        "VernacExtend",
                        "e00fff71ff314c991514fc71c41a3556702e444a"
                    ]
                },
                {
                    "command": [
                        "rewrite cats0 /= in Hi.",
                        "VernacExtend",
                        "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
                    ]
                },
                {
                    "command": [
                        "rewrite Hi' in Hi.",
                        "VernacExtend",
                        "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
                    ]
                },
                {
                    "command": [
                        "by apply lt_irrefl in Hi.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "case: (s1) Hi0 => //= [ | x2 s0] Hi0.",
                        "VernacExtend",
                        "e00fff71ff314c991514fc71c41a3556702e444a"
                    ]
                },
                {
                    "command": [
                        "by apply le_Sn_O in Hi0.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "by rewrite minus_diag.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "apply sym_eq, le_antisym.",
                        "VernacExtend",
                        "3ae8833123ce1b0674a516999499afc79e59c883"
                    ]
                },
                {
                    "command": [
                        "apply MyNat.le_pred_le_succ.",
                        "VernacExtend",
                        "beb8a47a6619df0b0a4225c47d854ce55ad717d0"
                    ]
                },
                {
                    "command": [
                        "apply not_le in Hi1.",
                        "VernacExtend",
                        "767d65c74308b7145c77df7916f06acea53af706"
                    ]
                },
                {
                    "command": [
                        "by apply lt_n_Sm_le.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "replace i with (Peano.pred (S i)) by auto.",
                        "VernacExtend",
                        "cacbd6717e456cfa306abbc9c6b377b953a57d05"
                    ]
                },
                {
                    "command": [
                        "by apply le_pred.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "have : ~ (ssrnat.leq (S i) (size s1)).",
                        "VernacExtend",
                        "406cde1174359c53bf162a2a18c4eede395555f9"
                    ]
                },
                {
                    "command": [
                        "contradict Hi0 ; by apply SSR_leq.",
                        "VernacExtend",
                        "0eee54ac385e133b21dbb21b29a2fdab012e1dca"
                    ]
                },
                {
                    "command": [
                        "case: (ssrnat.leq (S i) (size s1)) => // _.",
                        "VernacExtend",
                        "e00fff71ff314c991514fc71c41a3556702e444a"
                    ]
                },
                {
                    "command": [
                        "have : ~ssrnat.leq (S (S i)) (size s1).",
                        "VernacExtend",
                        "406cde1174359c53bf162a2a18c4eede395555f9"
                    ]
                },
                {
                    "command": [
                        "contradict Hi0.",
                        "VernacExtend",
                        "f6fb5f41b0241b5a56abe600b9abb57448382794"
                    ]
                },
                {
                    "command": [
                        "apply SSR_leq in Hi0.",
                        "VernacExtend",
                        "79eaabe7bad645510a61d87206b8496339fc0181"
                    ]
                },
                {
                    "command": [
                        "intuition.",
                        "VernacExtend",
                        "ebd9388eeb482972743f9cce5cbddbd85ca5bdfd"
                    ]
                },
                {
                    "command": [
                        "case: (ssrnat.leq (S (S i)) (size s1)) => // _.",
                        "VernacExtend",
                        "e00fff71ff314c991514fc71c41a3556702e444a"
                    ]
                },
                {
                    "command": [
                        "replace (S i - size s1)%nat with (S (i - size s1)).",
                        "VernacExtend",
                        "11f82c1d092cfe24cdcc2a595a48728a1c3600f7"
                    ]
                },
                {
                    "command": [
                        "apply H2.",
                        "VernacExtend",
                        "17101978526a14fb5ad41816224a2fc35cc3d256"
                    ]
                },
                {
                    "command": [
                        "rewrite size_cat in Hi.",
                        "VernacExtend",
                        "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
                    ]
                },
                {
                    "command": [
                        "apply not_le in Hi0.",
                        "VernacExtend",
                        "f30dc3cebd5c0ba9994c77483d4054ff51020c7f"
                    ]
                },
                {
                    "command": [
                        "elim: (size s1) i Hi Hi0 => [ | n IH] /= i Hi Hi0.",
                        "VernacExtend",
                        "e686a1895f1799b840b76242f931100819a9ad6c"
                    ]
                },
                {
                    "command": [
                        "rewrite -minus_n_O.",
                        "VernacExtend",
                        "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
                    ]
                },
                {
                    "command": [
                        "unfold ssrnat.addn, ssrnat.addn_rec in Hi.",
                        "VernacExtend",
                        "39adc3a4cf86726960c5ab78aee55600ad923ce5"
                    ]
                },
                {
                    "command": [
                        "by rewrite plus_0_l in Hi.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "case: i Hi Hi0 => [ | i] /= Hi Hi0.",
                        "VernacExtend",
                        "e00fff71ff314c991514fc71c41a3556702e444a"
                    ]
                },
                {
                    "command": [
                        "by apply lt_S_n, lt_n_O in Hi0.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "apply IH ; by intuition.",
                        "VernacExtend",
                        "76663867dca8fc42d41fea3a4eced3a424e6ebfb"
                    ]
                },
                {
                    "command": [
                        "apply not_le in Hi0.",
                        "VernacExtend",
                        "f30dc3cebd5c0ba9994c77483d4054ff51020c7f"
                    ]
                },
                {
                    "command": [
                        "rewrite minus_Sn_m ; by intuition.",
                        "VernacExtend",
                        "f9e2aad1e70f1876566a77bd0af96f52b3b81520"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "sorted_head",
            "line_nb": 106,
            "steps": [
                {
                    "command": [
                        "case: s => [| h s].",
                        "VernacExtend",
                        "e00fff71ff314c991514fc71c41a3556702e444a"
                    ]
                },
                {
                    "command": [
                        "move => _ Hi ; by apply lt_n_O in Hi.",
                        "VernacExtend",
                        "c42ec967bffec70acce34c6295bd61fe6baf57b0"
                    ]
                },
                {
                    "command": [
                        "elim: s h i => [| h0 s IH] h i Hs Hi x0.",
                        "VernacExtend",
                        "e686a1895f1799b840b76242f931100819a9ad6c"
                    ]
                },
                {
                    "command": [
                        "apply lt_n_Sm_le, le_n_O_eq in Hi ; rewrite -Hi ; apply Rle_refl.",
                        "VernacExtend",
                        "e11d02565ad93fb7fba6fbd5716ec5332b3d654a"
                    ]
                },
                {
                    "command": [
                        "case: i Hi => [| i] Hi.",
                        "VernacExtend",
                        "e00fff71ff314c991514fc71c41a3556702e444a"
                    ]
                },
                {
                    "command": [
                        "apply Rle_refl.",
                        "VernacExtend",
                        "0a60a50353d5cfa9a4ade0240c47d5160d6d423c"
                    ]
                },
                {
                    "command": [
                        "apply Rle_trans with (r2 := head x0 (h0::s)).",
                        "VernacExtend",
                        "9d3458b3e97d2db77743510cd73e5c17c3cd907a"
                    ]
                },
                {
                    "command": [
                        "apply Hs.",
                        "VernacExtend",
                        "26038359dfe6b0cb344439243c160e8be398bca9"
                    ]
                },
                {
                    "command": [
                        "apply IH.",
                        "VernacExtend",
                        "88103d45393d3ee3ab547447d913543854db8cea"
                    ]
                },
                {
                    "command": [
                        "apply Hs.",
                        "VernacExtend",
                        "26038359dfe6b0cb344439243c160e8be398bca9"
                    ]
                },
                {
                    "command": [
                        "apply lt_S_n, Hi.",
                        "VernacExtend",
                        "cb813add265ec9cda3f77173b317301fe7ef111b"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "sorted_incr",
            "line_nb": 119,
            "steps": [
                {
                    "command": [
                        "elim: i j s => [| i IH] j s Hs Hij Hj x0.",
                        "VernacExtend",
                        "e686a1895f1799b840b76242f931100819a9ad6c"
                    ]
                },
                {
                    "command": [
                        "rewrite nth0 ; by apply sorted_head.",
                        "VernacExtend",
                        "f9e2aad1e70f1876566a77bd0af96f52b3b81520"
                    ]
                },
                {
                    "command": [
                        "case: j Hij Hj => [| j] Hij Hj.",
                        "VernacExtend",
                        "e00fff71ff314c991514fc71c41a3556702e444a"
                    ]
                },
                {
                    "command": [
                        "by apply le_Sn_O in Hij.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "case: s Hs Hj => [| h s] Hs Hj.",
                        "VernacExtend",
                        "e00fff71ff314c991514fc71c41a3556702e444a"
                    ]
                },
                {
                    "command": [
                        "by apply lt_n_O in Hj.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "apply (IH j s) with (x0 := x0) => //.",
                        "VernacExtend",
                        "3c42b53d0efc26db114b00541ac5e7fcb29e6aeb"
                    ]
                },
                {
                    "command": [
                        "case: (s) Hs => {s Hj} [| h0 s] Hs ; apply Hs.",
                        "VernacExtend",
                        "e2262bd70476cbf15278fdad8d20b4039fc246b3"
                    ]
                },
                {
                    "command": [
                        "apply le_S_n, Hij.",
                        "VernacExtend",
                        "e73e8a0190474c2244ae643e8f148b727e75be0f"
                    ]
                },
                {
                    "command": [
                        "apply le_S_n, Hj.",
                        "VernacExtend",
                        "0c9f70d142c7e38589c03e90efbd7439c2ae5d49"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "sorted_last",
            "line_nb": 131,
            "steps": [
                {
                    "command": [
                        "move => Hs Hi x0 ; rewrite -nth_last.",
                        "VernacExtend",
                        "057edeb0967475c7ea5e8c98c449ddc5613eddc1"
                    ]
                },
                {
                    "command": [
                        "case: s Hi Hs => [| h s] Hi Hs //.",
                        "VernacExtend",
                        "e00fff71ff314c991514fc71c41a3556702e444a"
                    ]
                },
                {
                    "command": [
                        "by apply lt_n_O in Hi.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "apply sorted_incr => //.",
                        "VernacExtend",
                        "3c42b53d0efc26db114b00541ac5e7fcb29e6aeb"
                    ]
                },
                {
                    "command": [
                        "intuition.",
                        "VernacExtend",
                        "ebd9388eeb482972743f9cce5cbddbd85ca5bdfd"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "sorted_dec",
            "line_nb": 138,
            "steps": [
                {
                    "command": [
                        "case: s => [/= _ Hx| h s] ; simpl minus ; rewrite -?minus_n_O.",
                        "VernacExtend",
                        "bdff68f06db6b102e3830396982c7ed752a1a72d"
                    ]
                },
                {
                    "command": [
                        "by right.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "case: s => [/= _ Hx| h0 s] ; simpl minus ; rewrite -?minus_n_O.",
                        "VernacExtend",
                        "bdff68f06db6b102e3830396982c7ed752a1a72d"
                    ]
                },
                {
                    "command": [
                        "by right.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "elim: s h h0 => [/= | h1 s IH] h h0 Hs Hx.",
                        "VernacExtend",
                        "e686a1895f1799b840b76242f931100819a9ad6c"
                    ]
                },
                {
                    "command": [
                        "by right.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "case: (Rlt_le_dec x h0) => Hx'.",
                        "VernacExtend",
                        "e00fff71ff314c991514fc71c41a3556702e444a"
                    ]
                },
                {
                    "command": [
                        "left ; exists O => /= ; intuition.",
                        "VernacExtend",
                        "7e5667f9f3c5c1ccb96b31178551b4e6595d6fb9"
                    ]
                },
                {
                    "command": [
                        "case: (IH h0 h1) => [ | |[i Hi]|Hi].",
                        "VernacExtend",
                        "e00fff71ff314c991514fc71c41a3556702e444a"
                    ]
                },
                {
                    "command": [
                        "apply Hs.",
                        "VernacExtend",
                        "26038359dfe6b0cb344439243c160e8be398bca9"
                    ]
                },
                {
                    "command": [
                        "split ; [apply Hx'|apply Hx].",
                        "VernacExtend",
                        "ab6e318b0491d53fe610bfd554eb3ad00e55c2b7"
                    ]
                },
                {
                    "command": [
                        "left ; exists (S i) => /= ; intuition.",
                        "VernacExtend",
                        "7e5667f9f3c5c1ccb96b31178551b4e6595d6fb9"
                    ]
                },
                {
                    "command": [
                        "right => /= ; simpl in Hi.",
                        "VernacExtend",
                        "c534b7421abe189e740b3270f66bf7c179e41003"
                    ]
                },
                {
                    "command": [
                        "by rewrite -minus_n_O in Hi.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "sorted_compat",
            "line_nb": 154,
            "steps": [
                {
                    "command": [
                        "case: s => [| h s].",
                        "VernacExtend",
                        "e00fff71ff314c991514fc71c41a3556702e444a"
                    ]
                },
                {
                    "command": [
                        "split => // H i /= Hi ; contradict Hi ; apply lt_n_O.",
                        "VernacExtend",
                        "b09118431c7e1de144bec6b0f6c79c13f26f7c00"
                    ]
                },
                {
                    "command": [
                        "elim: s h => [h | h s IHs h'].",
                        "VernacExtend",
                        "e686a1895f1799b840b76242f931100819a9ad6c"
                    ]
                },
                {
                    "command": [
                        "split => // H i /= Hi ; contradict Hi ; apply lt_n_O.",
                        "VernacExtend",
                        "b09118431c7e1de144bec6b0f6c79c13f26f7c00"
                    ]
                },
                {
                    "command": [
                        "split => H.",
                        "VernacExtend",
                        "3c42b53d0efc26db114b00541ac5e7fcb29e6aeb"
                    ]
                },
                {
                    "command": [
                        "case => [ /= | i] ; rewrite size_compat => Hi ; simpl in Hi.",
                        "VernacExtend",
                        "fda2446c7868745fd5b040df8f6604660f96c410"
                    ]
                },
                {
                    "command": [
                        "apply H.",
                        "VernacExtend",
                        "4b47b71ad0f800d57cbdc591d68949e07decb540"
                    ]
                },
                {
                    "command": [
                        "apply (proj1 (IHs h) (proj2 H) i) ; rewrite size_compat /= ; apply lt_S_n => //.",
                        "VernacExtend",
                        "a7234306a0a29dfceda84dbbd9aa88c7fdb58261"
                    ]
                },
                {
                    "command": [
                        "split.",
                        "VernacExtend",
                        "55abc140132bd88981001ac656020469a8d503eb"
                    ]
                },
                {
                    "command": [
                        "apply (H O) ; rewrite size_compat /= ; apply lt_O_Sn.",
                        "VernacExtend",
                        "33fea5430eea10d2b86ef1348ce64b2f8bd7e443"
                    ]
                },
                {
                    "command": [
                        "apply IHs => i ; rewrite size_compat /= => Hi ; apply (H (S i)) ; rewrite size_compat /= ; apply lt_n_S, Hi.",
                        "VernacExtend",
                        "09fb235eb166e49f65c365433be65e876a4788ae"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "seq_step_ge_0",
            "line_nb": 168,
            "steps": [
                {
                    "command": [
                        "clear ; unfold seq_step ; case: x => [ | x0 x] //= .",
                        "VernacExtend",
                        "f1315642e96ae1d1e5dd3d5964de9d7ebe6c7a75"
                    ]
                },
                {
                    "command": [
                        "by apply Rle_refl.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "elim: x x0 => [ | x1 x IH] //= x0.",
                        "VernacExtend",
                        "e686a1895f1799b840b76242f931100819a9ad6c"
                    ]
                },
                {
                    "command": [
                        "by apply Rle_refl.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "apply Rmax_case.",
                        "VernacExtend",
                        "cfd24564dbeed7e74b25ea72bdae495929c2ce09"
                    ]
                },
                {
                    "command": [
                        "by apply Rabs_pos.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "by [].",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "seq_step_cat",
            "line_nb": 177,
            "steps": [
                {
                    "command": [
                        "case: x => /= [ H | x0 x _].",
                        "VernacExtend",
                        "e00fff71ff314c991514fc71c41a3556702e444a"
                    ]
                },
                {
                    "command": [
                        "by apply lt_irrefl in H.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "case: y => /= [ H | y0 y _].",
                        "VernacExtend",
                        "e00fff71ff314c991514fc71c41a3556702e444a"
                    ]
                },
                {
                    "command": [
                        "by apply lt_irrefl in H.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "move => <-.",
                        "VernacExtend",
                        "b1b2cb7a3a617cba67460b4eca1f04de3c1cc716"
                    ]
                },
                {
                    "command": [
                        "elim: x y x0 {y0} => /= [ | x1 x IH] y x0.",
                        "VernacExtend",
                        "e686a1895f1799b840b76242f931100819a9ad6c"
                    ]
                },
                {
                    "command": [
                        "rewrite {2}/seq_step /=.",
                        "VernacExtend",
                        "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
                    ]
                },
                {
                    "command": [
                        "rewrite /Rmax ; case: Rle_dec (seq_step_ge_0 (x0 :: y)) => // _ _.",
                        "VernacExtend",
                        "712d339e99ee17eb7d5033e19ac614eb3ca6b532"
                    ]
                },
                {
                    "command": [
                        "unfold seq_step ; simpl.",
                        "VernacExtend",
                        "de43df244ceebb5a5604b2efa80c243c3a43295e"
                    ]
                },
                {
                    "command": [
                        "rewrite -Rmax_assoc.",
                        "VernacExtend",
                        "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
                    ]
                },
                {
                    "command": [
                        "apply f_equal.",
                        "VernacExtend",
                        "ba856cbef3c8e84dcef77c91c8515b497874875b"
                    ]
                },
                {
                    "command": [
                        "by apply IH.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "seq_step_rev",
            "line_nb": 191,
            "steps": [
                {
                    "command": [
                        "rewrite /seq_step.",
                        "VernacExtend",
                        "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
                    ]
                },
                {
                    "command": [
                        "rewrite head_rev behead_rev /=.",
                        "VernacExtend",
                        "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
                    ]
                },
                {
                    "command": [
                        "case: l => [ | x0 l] //=.",
                        "VernacExtend",
                        "e00fff71ff314c991514fc71c41a3556702e444a"
                    ]
                },
                {
                    "command": [
                        "case: l => [ | x1 l] //=.",
                        "VernacExtend",
                        "e00fff71ff314c991514fc71c41a3556702e444a"
                    ]
                },
                {
                    "command": [
                        "rewrite rev_cons.",
                        "VernacExtend",
                        "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
                    ]
                },
                {
                    "command": [
                        "case: l => [ | x2 l] //=.",
                        "VernacExtend",
                        "e00fff71ff314c991514fc71c41a3556702e444a"
                    ]
                },
                {
                    "command": [
                        "by rewrite -Rabs_Ropp Ropp_minus_distr'.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "rewrite rev_cons pairmap_rcons foldr_rcons.",
                        "VernacExtend",
                        "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
                    ]
                },
                {
                    "command": [
                        "rewrite -Rabs_Ropp Ropp_minus_distr'.",
                        "VernacExtend",
                        "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
                    ]
                },
                {
                    "command": [
                        "generalize (Rabs (x1 - x0)) ; clear.",
                        "VernacExtend",
                        "20bb70d9bc81fdedad16034e43bb63ccd24d3f95"
                    ]
                },
                {
                    "command": [
                        "elim: l x1 x2 => [ | x2 l IH] x0 x1 r //=.",
                        "VernacExtend",
                        "e686a1895f1799b840b76242f931100819a9ad6c"
                    ]
                },
                {
                    "command": [
                        "rewrite -Rabs_Ropp Ropp_minus_distr' !Rmax_assoc.",
                        "VernacExtend",
                        "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
                    ]
                },
                {
                    "command": [
                        "apply f_equal2 => //.",
                        "VernacExtend",
                        "3c42b53d0efc26db114b00541ac5e7fcb29e6aeb"
                    ]
                },
                {
                    "command": [
                        "by apply Rmax_comm.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "rewrite rev_cons pairmap_rcons foldr_rcons.",
                        "VernacExtend",
                        "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
                    ]
                },
                {
                    "command": [
                        "rewrite -Rabs_Ropp Ropp_minus_distr' Rmax_assoc IH.",
                        "VernacExtend",
                        "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
                    ]
                },
                {
                    "command": [
                        "by rewrite (Rmax_comm _ r) !Rmax_assoc.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "SF_size_lx_ly",
            "line_nb": 234,
            "steps": [
                {
                    "command": [
                        "case: s => sh st ; rewrite /SF_lx /SF_ly /= ; elim: st => //= t s -> //.",
                        "VernacExtend",
                        "8189461404ecf5e3677f78a5f600bec6aba20cff"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "SF_seq_bij",
            "line_nb": 237,
            "steps": [
                {
                    "command": [
                        "case: s => sh st ; by rewrite /SF_make (zip_unzip st).",
                        "VernacExtend",
                        "14b141a2d70f00681f703015bc169478d399fe62"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "SF_seq_bij_lx",
            "line_nb": 240,
            "steps": [
                {
                    "command": [
                        "case: lx Hs => // x lx Hs ; rewrite /SF_make / SF_lx unzip1_zip //= ; apply SSR_leq, le_S_n ; rewrite -Hs => //.",
                        "VernacExtend",
                        "28c746bbd4ac6a3a1f4434640f48fdbeb8610f98"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "SF_seq_bij_ly",
            "line_nb": 243,
            "steps": [
                {
                    "command": [
                        "case: lx Hs => // x lx Hs ; rewrite /SF_make / SF_ly unzip2_zip //= ; apply SSR_leq, le_S_n ; rewrite -Hs => //.",
                        "VernacExtend",
                        "28c746bbd4ac6a3a1f4434640f48fdbeb8610f98"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "SF_cons_dec",
            "line_nb": 249,
            "steps": [
                {
                    "command": [
                        "move => Hnil Hcons [sh st] ; case: st => [| h sf].",
                        "VernacExtend",
                        "a01b3d93f426ff68d360351709a5fa5af822af32"
                    ]
                },
                {
                    "command": [
                        "apply Hnil.",
                        "VernacExtend",
                        "df83f7464b2567d6064b2cb39658dcd0bcc15bd3"
                    ]
                },
                {
                    "command": [
                        "move: (Hcons (sh,snd h) (mkSF_seq (fst h) sf)) => {Hcons} ; rewrite /SF_cons -surjective_pairing //=.",
                        "VernacExtend",
                        "057edeb0967475c7ea5e8c98c449ddc5613eddc1"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "SF_cons_ind",
            "line_nb": 254,
            "steps": [
                {
                    "command": [
                        "move => Hnil Hcons [sh st] ; elim: st sh => [sh |h sf IHst sh].",
                        "VernacExtend",
                        "06880003f1108b2eb418688c7bc6bf1013cf0e4c"
                    ]
                },
                {
                    "command": [
                        "apply Hnil.",
                        "VernacExtend",
                        "df83f7464b2567d6064b2cb39658dcd0bcc15bd3"
                    ]
                },
                {
                    "command": [
                        "move: (IHst (fst h)) => {IHst} IHst.",
                        "VernacExtend",
                        "b1b2cb7a3a617cba67460b4eca1f04de3c1cc716"
                    ]
                },
                {
                    "command": [
                        "move: (Hcons (sh,snd h) (mkSF_seq (fst h) sf) IHst) => {Hcons} ; rewrite /SF_cons -surjective_pairing //=.",
                        "VernacExtend",
                        "057edeb0967475c7ea5e8c98c449ddc5613eddc1"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "SF_rcons_dec",
            "line_nb": 260,
            "steps": [
                {
                    "command": [
                        "move => Hnil Hrcons [sh st] ; move: st ; apply rcons_dec => [| st t].",
                        "VernacExtend",
                        "59558e378570fadf944f573c466a34c761bc9b23"
                    ]
                },
                {
                    "command": [
                        "apply Hnil.",
                        "VernacExtend",
                        "df83f7464b2567d6064b2cb39658dcd0bcc15bd3"
                    ]
                },
                {
                    "command": [
                        "apply (Hrcons (mkSF_seq sh st) t).",
                        "VernacExtend",
                        "f09fc2622e62f1bff850a3cc5ba1ff4385137df2"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "SF_rcons_ind",
            "line_nb": 265,
            "steps": [
                {
                    "command": [
                        "move => Hnil Hrcons [sh st] ; move: st sh ; apply (rcons_ind (fun st => forall sh, P {| SF_h := sh; SF_t := st |})) => [sh | st t IHst sh].",
                        "VernacExtend",
                        "59558e378570fadf944f573c466a34c761bc9b23"
                    ]
                },
                {
                    "command": [
                        "apply Hnil.",
                        "VernacExtend",
                        "df83f7464b2567d6064b2cb39658dcd0bcc15bd3"
                    ]
                },
                {
                    "command": [
                        "apply (Hrcons (mkSF_seq sh st) t) => //.",
                        "VernacExtend",
                        "3c42b53d0efc26db114b00541ac5e7fcb29e6aeb"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "SF_cons_rcons",
            "line_nb": 270,
            "steps": [
                {
                    "command": [
                        "case: h => hx hy ; case: l => lx ly ; case: s => sh st //.",
                        "VernacExtend",
                        "d4127243a8edd835b38ce1b186629bc51391e41f"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "SF_lx_nil",
            "line_nb": 273,
            "steps": [
                {
                    "command": [
                        "by [].",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "SF_ly_nil",
            "line_nb": 276,
            "steps": [
                {
                    "command": [
                        "by [].",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "SF_lx_cons",
            "line_nb": 279,
            "steps": [
                {
                    "command": [
                        "by [].",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "SF_ly_cons",
            "line_nb": 282,
            "steps": [
                {
                    "command": [
                        "by [].",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "SF_lx_rcons",
            "line_nb": 285,
            "steps": [
                {
                    "command": [
                        "case: s => sh st ; rewrite /SF_lx /SF_rcons /= ; elim: st sh => // [[x y] st] IHst sh /= ; by rewrite (IHst x).",
                        "VernacExtend",
                        "afca34b85edc9155d6ad6d1115eccdf28b0585e8"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "SF_ly_rcons",
            "line_nb": 288,
            "steps": [
                {
                    "command": [
                        "case: s => sh st ; rewrite /SF_ly /SF_rcons /= ; elim: st sh => // [[x y] st] IHst sh /= ; by rewrite (IHst x).",
                        "VernacExtend",
                        "afca34b85edc9155d6ad6d1115eccdf28b0585e8"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "SF_lx_surj",
            "line_nb": 291,
            "steps": [
                {
                    "command": [
                        "by move => ->.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "SF_ly_surj",
            "line_nb": 294,
            "steps": [
                {
                    "command": [
                        "by move => ->.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "SF_lx_ly_inj",
            "line_nb": 297,
            "steps": [
                {
                    "command": [
                        "move: s0 ; apply SF_cons_ind with (s := s) => {s} [x | h s IH] s0 ; apply SF_cons_dec with (s := s0) => {s0} [x0 | h0 s0] Hx Hy //.",
                        "VernacExtend",
                        "03f33e1f1d3f7be53c513536df72561d1786f135"
                    ]
                },
                {
                    "command": [
                        "rewrite !SF_lx_nil in Hx.",
                        "VernacExtend",
                        "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
                    ]
                },
                {
                    "command": [
                        "replace x with (head 0 ([::x])) by intuition ; by rewrite Hx.",
                        "VernacExtend",
                        "48ee47fdd153465bc2978404739aca00594e52df"
                    ]
                },
                {
                    "command": [
                        "rewrite !SF_lx_cons in Hx ; rewrite !SF_ly_cons in Hy.",
                        "VernacExtend",
                        "2194fcb4d6d52cbae24a29f7ff14a3997f1912fd"
                    ]
                },
                {
                    "command": [
                        "replace h with (head (fst h) (fst h :: SF_lx s),head (snd h) (snd h :: SF_ly s)) ; [ rewrite Hx Hy (IH s0) //= | move => /= ; by apply injective_projections].",
                        "VernacExtend",
                        "8ddff60617215c77a9bb988f0bd5b5f3a2e4b207"
                    ]
                },
                {
                    "command": [
                        "replace (SF_lx s) with (behead (fst h :: SF_lx s)) by intuition ; by rewrite Hx.",
                        "VernacExtend",
                        "7d24a75ecce4da8a0c36679b7257fdb9ec7b720e"
                    ]
                },
                {
                    "command": [
                        "replace (SF_ly s) with (behead (snd h :: SF_ly s)) by intuition ; by rewrite Hy.",
                        "VernacExtend",
                        "311828b358136f09901dc623f8c00ff2f1a4fb43"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "SF_size_cons",
            "line_nb": 307,
            "steps": [
                {
                    "command": [
                        "rewrite /SF_cons /SF_size //=.",
                        "VernacExtend",
                        "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "SF_size_rcons",
            "line_nb": 310,
            "steps": [
                {
                    "command": [
                        "rewrite /SF_rcons /SF_size size_rcons //=.",
                        "VernacExtend",
                        "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "SF_size_lx",
            "line_nb": 313,
            "steps": [
                {
                    "command": [
                        "case: s => sh st ; rewrite /SF_size /= ; elim: st => //= _ st -> //.",
                        "VernacExtend",
                        "8189461404ecf5e3677f78a5f600bec6aba20cff"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "SF_size_ly",
            "line_nb": 316,
            "steps": [
                {
                    "command": [
                        "case: s => sh st ; rewrite /SF_size /= ; elim: st => //= _ st -> //.",
                        "VernacExtend",
                        "8189461404ecf5e3677f78a5f600bec6aba20cff"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "SF_rev_0",
            "line_nb": 319,
            "steps": [
                {
                    "command": [
                        "by rewrite ?size_rev SF_size_lx SF_size_ly.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "SF_rev_cons",
            "line_nb": 323,
            "steps": [
                {
                    "command": [
                        "apply SF_lx_ly_inj.",
                        "VernacExtend",
                        "ff231a2248e3878931441193a4b98a6505d090b2"
                    ]
                },
                {
                    "command": [
                        "by rewrite SF_lx_rcons !SF_seq_bij_lx SF_lx_cons rev_cons.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "by rewrite SF_ly_rcons !SF_seq_bij_ly SF_ly_cons rev_cons.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "SF_rev_rcons",
            "line_nb": 328,
            "steps": [
                {
                    "command": [
                        "apply SF_lx_ly_inj.",
                        "VernacExtend",
                        "ff231a2248e3878931441193a4b98a6505d090b2"
                    ]
                },
                {
                    "command": [
                        "by rewrite SF_lx_cons !SF_seq_bij_lx SF_lx_rcons rev_rcons.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "by rewrite SF_ly_cons !SF_seq_bij_ly SF_ly_rcons rev_rcons.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "SF_rev_invol",
            "line_nb": 333,
            "steps": [
                {
                    "command": [
                        "apply SF_lx_ly_inj.",
                        "VernacExtend",
                        "ff231a2248e3878931441193a4b98a6505d090b2"
                    ]
                },
                {
                    "command": [
                        "by rewrite /SF_rev ?SF_seq_bij_lx revK.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "by rewrite /SF_rev ?SF_seq_bij_ly revK.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "SF_lx_rev",
            "line_nb": 338,
            "steps": [
                {
                    "command": [
                        "by rewrite /SF_rev ?SF_seq_bij_lx.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "SF_ly_rev",
            "line_nb": 341,
            "steps": [
                {
                    "command": [
                        "by rewrite /SF_rev ?SF_seq_bij_ly.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "SF_size_rev",
            "line_nb": 344,
            "steps": [
                {
                    "command": [
                        "by rewrite -?SF_size_ly SF_ly_rev size_rev.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "SF_rev_surj",
            "line_nb": 347,
            "steps": [
                {
                    "command": [
                        "by move => ->.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "SF_rev_inj",
            "line_nb": 350,
            "steps": [
                {
                    "command": [
                        "move => H ; by rewrite -(SF_rev_invol s) -(SF_rev_invol s0) H.",
                        "VernacExtend",
                        "c42ec967bffec70acce34c6295bd61fe6baf57b0"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "SF_lx_cat",
            "line_nb": 354,
            "steps": [
                {
                    "command": [
                        "unfold SF_cat, SF_lx ; simpl.",
                        "VernacExtend",
                        "d261081c78a8e5d06aff71eee534e2bd018cb572"
                    ]
                },
                {
                    "command": [
                        "apply f_equal.",
                        "VernacExtend",
                        "ba856cbef3c8e84dcef77c91c8515b497874875b"
                    ]
                },
                {
                    "command": [
                        "by elim: (SF_t x) => //= t h ->.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "SF_last_cat",
            "line_nb": 359,
            "steps": [
                {
                    "command": [
                        "rewrite SF_lx_cat.",
                        "VernacExtend",
                        "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
                    ]
                },
                {
                    "command": [
                        "unfold SF_cat, SF_lx ; simpl => <- /=.",
                        "VernacExtend",
                        "6f0bf6ad3da18914e7e1ff126c92dad2fa7f45a1"
                    ]
                },
                {
                    "command": [
                        "elim: (SF_t x) (SF_h x) => //= {x} x1 x x0.",
                        "VernacExtend",
                        "e686a1895f1799b840b76242f931100819a9ad6c"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "SF_cons_cat",
            "line_nb": 364,
            "steps": [
                {
                    "command": [
                        "reflexivity.",
                        "VernacExtend",
                        "5cd1ae044f26cd6d89a5a5147c1d4fc5fc719d83"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "SF_last_lx",
            "line_nb": 371,
            "steps": [
                {
                    "command": [
                        "rewrite /SF_last /=.",
                        "VernacExtend",
                        "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
                    ]
                },
                {
                    "command": [
                        "apply sym_eq ; by apply last_unzip1.",
                        "VernacExtend",
                        "f1d0e1d719aec66edd7015c82f8a0553ded26e74"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "SF_map_cons",
            "line_nb": 380,
            "steps": [
                {
                    "command": [
                        "case: s => sh ; elim => // h st ; rewrite /SF_map => //.",
                        "VernacExtend",
                        "58b3fa15c8632d89a426c1550da6d1e6e29a238b"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "SF_map_rcons",
            "line_nb": 383,
            "steps": [
                {
                    "command": [
                        "move: h ; apply SF_cons_ind with (s := s) => {s} [x0 | h0 s IH] //= h.",
                        "VernacExtend",
                        "8261237f0cda1915a4077c28869831c5329103ce"
                    ]
                },
                {
                    "command": [
                        "rewrite SF_map_cons.",
                        "VernacExtend",
                        "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
                    ]
                },
                {
                    "command": [
                        "replace (SF_rcons (SF_cons h0 s) h) with (SF_cons h0 (SF_rcons s h)) by auto.",
                        "VernacExtend",
                        "a8017827f74d7bf51027e8484a84ee328601a162"
                    ]
                },
                {
                    "command": [
                        "rewrite SF_map_cons.",
                        "VernacExtend",
                        "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
                    ]
                },
                {
                    "command": [
                        "rewrite IH.",
                        "VernacExtend",
                        "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
                    ]
                },
                {
                    "command": [
                        "auto.",
                        "VernacExtend",
                        "1f09da0addd069b3b65326f8c71967acc1e985af"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "SF_map_lx",
            "line_nb": 391,
            "steps": [
                {
                    "command": [
                        "apply SF_cons_ind with (s := s) => {s} //= h s IH ; by rewrite SF_map_cons ?SF_lx_cons IH.",
                        "VernacExtend",
                        "7bd77ea96f784074e3b1d448260a45dd4191485f"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "SF_map_ly",
            "line_nb": 394,
            "steps": [
                {
                    "command": [
                        "apply SF_cons_ind with (s := s) => {s} //= h s IH ; by rewrite SF_map_cons ?SF_ly_cons IH.",
                        "VernacExtend",
                        "7bd77ea96f784074e3b1d448260a45dd4191485f"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "SF_map_rev",
            "line_nb": 397,
            "steps": [
                {
                    "command": [
                        "apply SF_lx_ly_inj.",
                        "VernacExtend",
                        "ff231a2248e3878931441193a4b98a6505d090b2"
                    ]
                },
                {
                    "command": [
                        "by rewrite SF_lx_rev ?SF_map_lx ?SF_lx_rev.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "by rewrite SF_ly_rev ?SF_map_ly ?SF_ly_rev map_rev.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "SF_map_sort",
            "line_nb": 402,
            "steps": [
                {
                    "command": [
                        "unfold SF_sorted ; apply SF_cons_ind with (s := s) => {s} /= [x0 | [x0 _] /= s IH] Hs.",
                        "VernacExtend",
                        "9d8d73de1fa171731e6c8da0d5c5594f36f527b2"
                    ]
                },
                {
                    "command": [
                        "by [].",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "split.",
                        "VernacExtend",
                        "55abc140132bd88981001ac656020469a8d503eb"
                    ]
                },
                {
                    "command": [
                        "by apply Hs.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "now apply IH.",
                        "VernacExtend",
                        "f55d33d07a7d04fb33e00d25db71d556dde4e829"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "SF_size_map",
            "line_nb": 409,
            "steps": [
                {
                    "command": [
                        "by rewrite -!SF_size_ly SF_map_ly size_map.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "ptd_cons",
            "line_nb": 414,
            "steps": [
                {
                    "command": [
                        "move => H i Hi ; apply (H (S i)) ; rewrite SF_size_cons ; intuition.",
                        "VernacExtend",
                        "359f180a1412c9b180a26fe257111b23551f20ef"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "ptd_sort",
            "line_nb": 417,
            "steps": [
                {
                    "command": [
                        "apply SF_cons_ind with (s := ptd) => {ptd} [x0 | [x0 y0] ptd] ; [ | apply SF_cons_dec with (s := ptd) => {ptd} [ x1 | [x1 y1] ptd] IH] => Hptd ; try split => //=.",
                        "VernacExtend",
                        "04381b69ebb3270a80416418741bc37afce5b84c"
                    ]
                },
                {
                    "command": [
                        "apply Rle_trans with y0 ; apply (Hptd O) ; rewrite SF_size_cons ; apply lt_O_Sn.",
                        "VernacExtend",
                        "38196c7363878863765c84c6fceeb7278835e2b1"
                    ]
                },
                {
                    "command": [
                        "apply Rle_trans with y0 ; apply (Hptd O) ; rewrite SF_size_cons ; apply lt_O_Sn.",
                        "VernacExtend",
                        "38196c7363878863765c84c6fceeb7278835e2b1"
                    ]
                },
                {
                    "command": [
                        "apply IH, (ptd_cons (x0,y0)) => //.",
                        "VernacExtend",
                        "3c42b53d0efc26db114b00541ac5e7fcb29e6aeb"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "ptd_sort'",
            "line_nb": 423,
            "steps": [
                {
                    "command": [
                        "apply SF_cons_ind with (s := ptd) => {ptd} [x0 | [x0 y0] ptd] ; [ | apply SF_cons_dec with (s := ptd) => {ptd} [ x1 | [x1 y1] ptd] IH] => Hptd ; try split.",
                        "VernacExtend",
                        "2b1c086339a94646c91c933d66c36c45ddf409aa"
                    ]
                },
                {
                    "command": [
                        "apply Rle_trans with x1 ; [apply (Hptd O) | apply (Hptd 1%nat)] ; rewrite ?SF_size_cons ; repeat apply lt_n_S ; apply lt_O_Sn.",
                        "VernacExtend",
                        "9a09893faa160ccffb457fa0905e7251848b38c6"
                    ]
                },
                {
                    "command": [
                        "apply IH, (ptd_cons (x0,y0)) => //.",
                        "VernacExtend",
                        "3c42b53d0efc26db114b00541ac5e7fcb29e6aeb"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "SF_cat_pointed",
            "line_nb": 428,
            "steps": [
                {
                    "command": [
                        "intros Hxy Hx Hy.",
                        "VernacExtend",
                        "2ffb29574b39ad3a67241508d5e9d4dd26c316b1"
                    ]
                },
                {
                    "command": [
                        "move: Hxy Hx.",
                        "VernacExtend",
                        "b1b2cb7a3a617cba67460b4eca1f04de3c1cc716"
                    ]
                },
                {
                    "command": [
                        "apply (SF_cons_ind (fun x => last (SF_h x) (SF_lx x) = head (SF_h y) (SF_lx y) -> pointed_subdiv x -> pointed_subdiv (SF_cat x y))) => {x} /= [x0 | x0 x IH] Hxy Hx.",
                        "VernacExtend",
                        "3c42b53d0efc26db114b00541ac5e7fcb29e6aeb"
                    ]
                },
                {
                    "command": [
                        "rewrite Hxy.",
                        "VernacExtend",
                        "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
                    ]
                },
                {
                    "command": [
                        "by apply Hy.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "rewrite -SF_cons_cat.",
                        "VernacExtend",
                        "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
                    ]
                },
                {
                    "command": [
                        "case => [ | i] Hi.",
                        "VernacExtend",
                        "e00fff71ff314c991514fc71c41a3556702e444a"
                    ]
                },
                {
                    "command": [
                        "apply (Hx O), lt_O_Sn.",
                        "VernacExtend",
                        "6ea7ccd56f32bc70355316d63af141454aa8e205"
                    ]
                },
                {
                    "command": [
                        "apply IH =>//.",
                        "VernacExtend",
                        "3c42b53d0efc26db114b00541ac5e7fcb29e6aeb"
                    ]
                },
                {
                    "command": [
                        "by apply ptd_cons with x0.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "by apply lt_S_n, Hi.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "SF_cut_down_step",
            "line_nb": 445,
            "steps": [
                {
                    "command": [
                        "unfold SF_cut_down, seq_step ; simpl.",
                        "VernacExtend",
                        "59e2cf5953d6bf69632b8bd2b0da6030cafaf1ac"
                    ]
                },
                {
                    "command": [
                        "case => Hh Hl.",
                        "VernacExtend",
                        "e00fff71ff314c991514fc71c41a3556702e444a"
                    ]
                },
                {
                    "command": [
                        "case: Rle_dec => //= _.",
                        "VernacExtend",
                        "e00fff71ff314c991514fc71c41a3556702e444a"
                    ]
                },
                {
                    "command": [
                        "move: Hh Hl ; apply SF_cons_ind with (s := s) => {s} [ x1 | [x1 y0] s IH ] /= Hx Hh Hl.",
                        "VernacExtend",
                        "8261237f0cda1915a4077c28869831c5329103ce"
                    ]
                },
                {
                    "command": [
                        "rewrite (Rle_antisym _ _ Hx Hh) Rminus_eq_0 Rabs_R0.",
                        "VernacExtend",
                        "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
                    ]
                },
                {
                    "command": [
                        "rewrite /Rmax ; by case: Rle_dec.",
                        "VernacExtend",
                        "f9e2aad1e70f1876566a77bd0af96f52b3b81520"
                    ]
                },
                {
                    "command": [
                        "case: Rle_dec => //= Hx'.",
                        "VernacExtend",
                        "e00fff71ff314c991514fc71c41a3556702e444a"
                    ]
                },
                {
                    "command": [
                        "apply Rmax_case.",
                        "VernacExtend",
                        "cfd24564dbeed7e74b25ea72bdae495929c2ce09"
                    ]
                },
                {
                    "command": [
                        "apply Rle_lt_trans with (2 := Hl) ; by apply Rmax_l.",
                        "VernacExtend",
                        "28f9640c34903b874975774118164841a63d76b8"
                    ]
                },
                {
                    "command": [
                        "apply IH ; try assumption.",
                        "VernacExtend",
                        "aafeca8c4f0f520ebe1d73bb4ca5fd73cd4cd6c2"
                    ]
                },
                {
                    "command": [
                        "apply Rle_lt_trans with (2 := Hl) ; by apply Rmax_r.",
                        "VernacExtend",
                        "28f9640c34903b874975774118164841a63d76b8"
                    ]
                },
                {
                    "command": [
                        "apply Rle_lt_trans with (2 := Hl).",
                        "VernacExtend",
                        "69e9183c3e1c621478435d3029dab8288a9ade6e"
                    ]
                },
                {
                    "command": [
                        "apply Rmax_case ; apply Rle_trans with (2 := Rmax_l _ _).",
                        "VernacExtend",
                        "c89677770e845f7325d998f2a48d536866ad4730"
                    ]
                },
                {
                    "command": [
                        "rewrite ?Rabs_pos_eq.",
                        "VernacExtend",
                        "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
                    ]
                },
                {
                    "command": [
                        "apply Rplus_le_compat_r.",
                        "VernacExtend",
                        "5ca7acb5e67c7d7a5b6143fd11bc1e75c3e361e4"
                    ]
                },
                {
                    "command": [
                        "by apply Rlt_le, Rnot_le_lt.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "rewrite -Rminus_le_0.",
                        "VernacExtend",
                        "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
                    ]
                },
                {
                    "command": [
                        "apply Rle_trans with x.",
                        "VernacExtend",
                        "795cd4902a779137a2ca3d4d53ee3d5bd0e0d67f"
                    ]
                },
                {
                    "command": [
                        "by [].",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "by apply Rlt_le, Rnot_le_lt.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "by rewrite -Rminus_le_0.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "by apply Rabs_pos.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "SF_cut_up_step",
            "line_nb": 469,
            "steps": [
                {
                    "command": [
                        "unfold SF_cut_down, seq_step ; simpl.",
                        "VernacExtend",
                        "59e2cf5953d6bf69632b8bd2b0da6030cafaf1ac"
                    ]
                },
                {
                    "command": [
                        "case => Hh Hl.",
                        "VernacExtend",
                        "e00fff71ff314c991514fc71c41a3556702e444a"
                    ]
                },
                {
                    "command": [
                        "case: Rle_dec => //= _.",
                        "VernacExtend",
                        "e00fff71ff314c991514fc71c41a3556702e444a"
                    ]
                },
                {
                    "command": [
                        "move: {4 5}(SF_h s) Hh Hl ; apply SF_cons_ind with (s := s) => {s} [ x1 | [x1 y0] s IH ] /= x0 Hh Hl He.",
                        "VernacExtend",
                        "8261237f0cda1915a4077c28869831c5329103ce"
                    ]
                },
                {
                    "command": [
                        "by apply He.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "case: Rle_dec => //= Hx.",
                        "VernacExtend",
                        "e00fff71ff314c991514fc71c41a3556702e444a"
                    ]
                },
                {
                    "command": [
                        "apply (IH x0) => //=.",
                        "VernacExtend",
                        "3c42b53d0efc26db114b00541ac5e7fcb29e6aeb"
                    ]
                },
                {
                    "command": [
                        "apply Rle_lt_trans with (2 := He).",
                        "VernacExtend",
                        "d1269289ec10b12437e6ea3d90f79d67dd9cc338"
                    ]
                },
                {
                    "command": [
                        "by apply Rmax_r.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "apply Rle_lt_trans with (2 := He).",
                        "VernacExtend",
                        "d1269289ec10b12437e6ea3d90f79d67dd9cc338"
                    ]
                },
                {
                    "command": [
                        "apply Rnot_le_lt in Hx.",
                        "VernacExtend",
                        "37b2b08620b674d8ffb85a94037c10e39a917148"
                    ]
                },
                {
                    "command": [
                        "apply Rmax_case.",
                        "VernacExtend",
                        "cfd24564dbeed7e74b25ea72bdae495929c2ce09"
                    ]
                },
                {
                    "command": [
                        "apply Rle_trans with (2 := Rmax_l _ _).",
                        "VernacExtend",
                        "71359a389bd939cc6dea91cb2e0a00babb930fa5"
                    ]
                },
                {
                    "command": [
                        "rewrite ?Rabs_pos_eq.",
                        "VernacExtend",
                        "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
                    ]
                },
                {
                    "command": [
                        "by apply Rplus_le_compat_l, Ropp_le_contravar.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "rewrite -Rminus_le_0 ; by apply Rlt_le, Rle_lt_trans with x.",
                        "VernacExtend",
                        "f9e2aad1e70f1876566a77bd0af96f52b3b81520"
                    ]
                },
                {
                    "command": [
                        "rewrite -Rminus_le_0 ; by apply Rlt_le.",
                        "VernacExtend",
                        "f9e2aad1e70f1876566a77bd0af96f52b3b81520"
                    ]
                },
                {
                    "command": [
                        "by apply Rmax_r.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "SF_cut_down_pointed",
            "line_nb": 489,
            "steps": [
                {
                    "command": [
                        "unfold SF_cut_down ; simpl.",
                        "VernacExtend",
                        "f02466c3b8a03a1e924e0b49d43cfad9dd64a626"
                    ]
                },
                {
                    "command": [
                        "case: Rle_dec => //= _.",
                        "VernacExtend",
                        "e00fff71ff314c991514fc71c41a3556702e444a"
                    ]
                },
                {
                    "command": [
                        "apply SF_cons_ind with (s := s) => {s} [x0 | [x1 y1] s IH] /= Hx0 H.",
                        "VernacExtend",
                        "3c42b53d0efc26db114b00541ac5e7fcb29e6aeb"
                    ]
                },
                {
                    "command": [
                        "move => i /= Hi.",
                        "VernacExtend",
                        "b1b2cb7a3a617cba67460b4eca1f04de3c1cc716"
                    ]
                },
                {
                    "command": [
                        "unfold SF_size in Hi ; simpl in Hi.",
                        "VernacExtend",
                        "b66595688898d83ddf915ae368ab05e010542828"
                    ]
                },
                {
                    "command": [
                        "apply lt_n_Sm_le, le_n_O_eq in Hi.",
                        "VernacExtend",
                        "fa7835541869511ea99486c8954819041c33f448"
                    ]
                },
                {
                    "command": [
                        "rewrite -Hi ; simpl ; split.",
                        "VernacExtend",
                        "12d5441a86a10cef9847115ae4d4ffd428ef8684"
                    ]
                },
                {
                    "command": [
                        "by [].",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "by apply Rle_refl.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "case: Rle_dec => //= Hx1.",
                        "VernacExtend",
                        "e00fff71ff314c991514fc71c41a3556702e444a"
                    ]
                },
                {
                    "command": [
                        "move: (H O (lt_O_Sn _)) => /= H0.",
                        "VernacExtend",
                        "b1b2cb7a3a617cba67460b4eca1f04de3c1cc716"
                    ]
                },
                {
                    "command": [
                        "apply ptd_cons in H.",
                        "VernacExtend",
                        "00d33a85ca920ab090e06384a0fd8ce455cb2796"
                    ]
                },
                {
                    "command": [
                        "move: (IH Hx1 H) => {IH} IH.",
                        "VernacExtend",
                        "b1b2cb7a3a617cba67460b4eca1f04de3c1cc716"
                    ]
                },
                {
                    "command": [
                        "rewrite /pointed_subdiv => i.",
                        "VernacExtend",
                        "3c42b53d0efc26db114b00541ac5e7fcb29e6aeb"
                    ]
                },
                {
                    "command": [
                        "destruct i => /= Hi.",
                        "VernacExtend",
                        "3c42b53d0efc26db114b00541ac5e7fcb29e6aeb"
                    ]
                },
                {
                    "command": [
                        "by apply H0.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "apply (IH i).",
                        "VernacExtend",
                        "f65d73b26ae2324cf20b219adbe4371e350c9b46"
                    ]
                },
                {
                    "command": [
                        "apply lt_S_n, Hi.",
                        "VernacExtend",
                        "cb813add265ec9cda3f77173b317301fe7ef111b"
                    ]
                },
                {
                    "command": [
                        "move => i /= Hi.",
                        "VernacExtend",
                        "b1b2cb7a3a617cba67460b4eca1f04de3c1cc716"
                    ]
                },
                {
                    "command": [
                        "unfold SF_size in Hi ; simpl in Hi.",
                        "VernacExtend",
                        "b66595688898d83ddf915ae368ab05e010542828"
                    ]
                },
                {
                    "command": [
                        "apply lt_n_Sm_le, le_n_O_eq in Hi.",
                        "VernacExtend",
                        "fa7835541869511ea99486c8954819041c33f448"
                    ]
                },
                {
                    "command": [
                        "rewrite -Hi ; simpl ; split.",
                        "VernacExtend",
                        "12d5441a86a10cef9847115ae4d4ffd428ef8684"
                    ]
                },
                {
                    "command": [
                        "apply Rmin_case.",
                        "VernacExtend",
                        "06bee284b3ab9229517272cc3728705bdc7b95ba"
                    ]
                },
                {
                    "command": [
                        "apply (H O).",
                        "VernacExtend",
                        "4dbce23ca6fed5deaa06e2a7d2674bd1b58a157c"
                    ]
                },
                {
                    "command": [
                        "by apply lt_O_Sn.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "by [].",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "by apply Rmin_r.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "SF_cut_up_pointed",
            "line_nb": 518,
            "steps": [
                {
                    "command": [
                        "unfold SF_cut_up ; simpl.",
                        "VernacExtend",
                        "1bd165aa2c237b59f560954c754852903a7e7297"
                    ]
                },
                {
                    "command": [
                        "case: Rle_dec => //= _.",
                        "VernacExtend",
                        "e00fff71ff314c991514fc71c41a3556702e444a"
                    ]
                },
                {
                    "command": [
                        "move: {2 3}(SF_h s) ; apply SF_cons_ind with (s := s) => {s} [ x1 | [x1 y0] s IH] /= x0 Hx0 H i Hi.",
                        "VernacExtend",
                        "8261237f0cda1915a4077c28869831c5329103ce"
                    ]
                },
                {
                    "command": [
                        "by apply lt_n_O in Hi.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "destruct (Rle_dec (SF_h s) x) as [Hx1|Hx1].",
                        "VernacExtend",
                        "0887043d9b26342731f78bf05ca0015c6e9bb3da"
                    ]
                },
                {
                    "command": [
                        "apply IH => //=.",
                        "VernacExtend",
                        "3c42b53d0efc26db114b00541ac5e7fcb29e6aeb"
                    ]
                },
                {
                    "command": [
                        "move: H ; by apply ptd_cons.",
                        "VernacExtend",
                        "c42ec967bffec70acce34c6295bd61fe6baf57b0"
                    ]
                },
                {
                    "command": [
                        "destruct i ; simpl.",
                        "VernacExtend",
                        "4521b9790b82772dc0c1c54601d42b59e83dbed6"
                    ]
                },
                {
                    "command": [
                        "split.",
                        "VernacExtend",
                        "55abc140132bd88981001ac656020469a8d503eb"
                    ]
                },
                {
                    "command": [
                        "by apply Rmax_r.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "apply Rmax_case.",
                        "VernacExtend",
                        "cfd24564dbeed7e74b25ea72bdae495929c2ce09"
                    ]
                },
                {
                    "command": [
                        "by apply (H O), lt_O_Sn.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "by apply Rlt_le, Rnot_le_lt.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "apply (H (S i)), Hi.",
                        "VernacExtend",
                        "3957f414454976edbf949d506b09ee2543b22119"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "SF_cut_down_h",
            "line_nb": 534,
            "steps": [
                {
                    "command": [
                        "unfold SF_cut_down ; simpl.",
                        "VernacExtend",
                        "f02466c3b8a03a1e924e0b49d43cfad9dd64a626"
                    ]
                },
                {
                    "command": [
                        "by case: Rle_dec.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "SF_cut_up_h",
            "line_nb": 538,
            "steps": [
                {
                    "command": [
                        "unfold SF_cut_up ; simpl.",
                        "VernacExtend",
                        "1bd165aa2c237b59f560954c754852903a7e7297"
                    ]
                },
                {
                    "command": [
                        "case: Rle_dec => //= ; simpl.",
                        "VernacExtend",
                        "d99a888d1dfdf8610ae8ab21b05643d1aef27246"
                    ]
                },
                {
                    "command": [
                        "move: {2 3}(SF_h s) ; apply SF_cons_ind with (s := s) => {s} [x1 | [x1 y1] s IH ] /= x0 Hx.",
                        "VernacExtend",
                        "8261237f0cda1915a4077c28869831c5329103ce"
                    ]
                },
                {
                    "command": [
                        "by [].",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "case: Rle_dec => //= Hx'.",
                        "VernacExtend",
                        "e00fff71ff314c991514fc71c41a3556702e444a"
                    ]
                },
                {
                    "command": [
                        "by apply IH.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "SF_cut_down_l",
            "line_nb": 546,
            "steps": [
                {
                    "command": [
                        "unfold SF_cut_down ; simpl.",
                        "VernacExtend",
                        "f02466c3b8a03a1e924e0b49d43cfad9dd64a626"
                    ]
                },
                {
                    "command": [
                        "case: Rle_dec => //= ; simpl.",
                        "VernacExtend",
                        "d99a888d1dfdf8610ae8ab21b05643d1aef27246"
                    ]
                },
                {
                    "command": [
                        "apply SF_cons_ind with (s := s) => {s} [x1 | [x1 y1] s IH ] /= Hx.",
                        "VernacExtend",
                        "3c42b53d0efc26db114b00541ac5e7fcb29e6aeb"
                    ]
                },
                {
                    "command": [
                        "by [].",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "case: Rle_dec => //= Hx'.",
                        "VernacExtend",
                        "e00fff71ff314c991514fc71c41a3556702e444a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "SF_cut_up_l",
            "line_nb": 553,
            "steps": [
                {
                    "command": [
                        "unfold SF_cut_down ; simpl.",
                        "VernacExtend",
                        "f02466c3b8a03a1e924e0b49d43cfad9dd64a626"
                    ]
                },
                {
                    "command": [
                        "case: Rle_dec => //=.",
                        "VernacExtend",
                        "e00fff71ff314c991514fc71c41a3556702e444a"
                    ]
                },
                {
                    "command": [
                        "move: {3 4}(SF_h s); apply SF_cons_ind with (s := s) => {s} [x1 | [x1 y1] s IH ] /= x0 Hx Hx'.",
                        "VernacExtend",
                        "8261237f0cda1915a4077c28869831c5329103ce"
                    ]
                },
                {
                    "command": [
                        "by apply Rle_antisym.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "case: Rle_dec => //= {Hx} Hx.",
                        "VernacExtend",
                        "e00fff71ff314c991514fc71c41a3556702e444a"
                    ]
                },
                {
                    "command": [
                        "by apply IH.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "SF_cut_down_cons_0",
            "line_nb": 561,
            "steps": [
                {
                    "command": [
                        "intros H0.",
                        "VernacExtend",
                        "7be07b7f0ac418af4d02cddf70af6f27f8714110"
                    ]
                },
                {
                    "command": [
                        "apply Rlt_not_le in H0.",
                        "VernacExtend",
                        "5e29988c29e764b4139a50167cec0d34ef992fb5"
                    ]
                },
                {
                    "command": [
                        "rewrite /SF_cut_down /=.",
                        "VernacExtend",
                        "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
                    ]
                },
                {
                    "command": [
                        "by case: Rle_dec.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "SF_cut_up_cons_0",
            "line_nb": 567,
            "steps": [
                {
                    "command": [
                        "intros H0.",
                        "VernacExtend",
                        "7be07b7f0ac418af4d02cddf70af6f27f8714110"
                    ]
                },
                {
                    "command": [
                        "apply Rlt_not_le in H0.",
                        "VernacExtend",
                        "5e29988c29e764b4139a50167cec0d34ef992fb5"
                    ]
                },
                {
                    "command": [
                        "rewrite /SF_cut_up /=.",
                        "VernacExtend",
                        "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
                    ]
                },
                {
                    "command": [
                        "by case: Rle_dec.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "SF_cut_down_cons_1",
            "line_nb": 573,
            "steps": [
                {
                    "command": [
                        "intros [H0 Hx0].",
                        "VernacExtend",
                        "41a4d414ed20cbf2b455fa00136c047d81895ea4"
                    ]
                },
                {
                    "command": [
                        "apply Rlt_not_le in Hx0.",
                        "VernacExtend",
                        "6b29ce553416c2e1081454a5935023b34332fbfe"
                    ]
                },
                {
                    "command": [
                        "rewrite /SF_cut_down /=.",
                        "VernacExtend",
                        "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
                    ]
                },
                {
                    "command": [
                        "case: Rle_dec => //= _.",
                        "VernacExtend",
                        "e00fff71ff314c991514fc71c41a3556702e444a"
                    ]
                },
                {
                    "command": [
                        "by case: Rle_dec.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "SF_cut_up_cons_1",
            "line_nb": 580,
            "steps": [
                {
                    "command": [
                        "intros [H0 Hx0].",
                        "VernacExtend",
                        "41a4d414ed20cbf2b455fa00136c047d81895ea4"
                    ]
                },
                {
                    "command": [
                        "apply Rlt_not_le in Hx0.",
                        "VernacExtend",
                        "6b29ce553416c2e1081454a5935023b34332fbfe"
                    ]
                },
                {
                    "command": [
                        "rewrite /SF_cut_up /=.",
                        "VernacExtend",
                        "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
                    ]
                },
                {
                    "command": [
                        "case: Rle_dec => //= _.",
                        "VernacExtend",
                        "e00fff71ff314c991514fc71c41a3556702e444a"
                    ]
                },
                {
                    "command": [
                        "by case: Rle_dec.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "SF_cut_down_cons_2",
            "line_nb": 587,
            "steps": [
                {
                    "command": [
                        "intros [H0 Hx0].",
                        "VernacExtend",
                        "41a4d414ed20cbf2b455fa00136c047d81895ea4"
                    ]
                },
                {
                    "command": [
                        "rewrite /SF_cut_down /=.",
                        "VernacExtend",
                        "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
                    ]
                },
                {
                    "command": [
                        "case: Rle_dec (Rle_trans _ _ _ H0 Hx0) => //= _ _.",
                        "VernacExtend",
                        "e00fff71ff314c991514fc71c41a3556702e444a"
                    ]
                },
                {
                    "command": [
                        "by case: Rle_dec.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "SF_cut_up_cons_2",
            "line_nb": 593,
            "steps": [
                {
                    "command": [
                        "intros [H0 Hx0].",
                        "VernacExtend",
                        "41a4d414ed20cbf2b455fa00136c047d81895ea4"
                    ]
                },
                {
                    "command": [
                        "rewrite /SF_cut_up /=.",
                        "VernacExtend",
                        "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
                    ]
                },
                {
                    "command": [
                        "case: Rle_dec (Rle_trans _ _ _ H0 Hx0) => //= _ _.",
                        "VernacExtend",
                        "e00fff71ff314c991514fc71c41a3556702e444a"
                    ]
                },
                {
                    "command": [
                        "case: Rle_dec => //= _.",
                        "VernacExtend",
                        "e00fff71ff314c991514fc71c41a3556702e444a"
                    ]
                },
                {
                    "command": [
                        "move: {2 3}(SF_h ptd) Hx0 ; apply SF_cons_ind with (s := ptd) => {ptd H0} [ x0 | [x0 y0] ptd IH ] //= x0' Hx0.",
                        "VernacExtend",
                        "8261237f0cda1915a4077c28869831c5329103ce"
                    ]
                },
                {
                    "command": [
                        "case: Rle_dec => //= Hx1.",
                        "VernacExtend",
                        "e00fff71ff314c991514fc71c41a3556702e444a"
                    ]
                },
                {
                    "command": [
                        "by apply IH.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "SF_fun_incr",
            "line_nb": 606,
            "steps": [
                {
                    "command": [
                        "rewrite /SF_fun /=.",
                        "VernacExtend",
                        "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
                    ]
                },
                {
                    "command": [
                        "move: Hs Hx ; apply SF_cons_dec with (s := s) => {s} [/= x1 | h s] Hs /= Hx.",
                        "VernacExtend",
                        "8261237f0cda1915a4077c28869831c5329103ce"
                    ]
                },
                {
                    "command": [
                        "case: sorted_dec => /= [[i Hi]|Hi] ; rewrite /SF_ly ; case: Rle_dec => //= ; case: i Hi => //.",
                        "VernacExtend",
                        "41f5ef65341509fee663f3025927c0f7cafe97d5"
                    ]
                },
                {
                    "command": [
                        "case: Rlt_dec => [Hx' | _].",
                        "VernacExtend",
                        "e00fff71ff314c991514fc71c41a3556702e444a"
                    ]
                },
                {
                    "command": [
                        "contradict Hx' ; apply Rle_not_lt, Hx.",
                        "VernacExtend",
                        "d3788d9a0e3af0a82eb679891af15ebaeed5a544"
                    ]
                },
                {
                    "command": [
                        "move: h Hs Hx ; apply SF_cons_ind with (s := s) => {s} [x1 | h0 s IH] h Hs /= Hx.",
                        "VernacExtend",
                        "8261237f0cda1915a4077c28869831c5329103ce"
                    ]
                },
                {
                    "command": [
                        "case: sorted_dec => [/= [i [Hi' Hi]] /= |Hi].",
                        "VernacExtend",
                        "e00fff71ff314c991514fc71c41a3556702e444a"
                    ]
                },
                {
                    "command": [
                        "by apply lt_S_n, lt_S_n, lt_n_O in Hi.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "case: Hx => Hx Hx' ; apply Rle_not_lt in Hx ; case: Rle_dec => //.",
                        "VernacExtend",
                        "78fdc09c450a7407ac325316b31600f7125c2981"
                    ]
                },
                {
                    "command": [
                        "case: Rlt_dec => Hx'.",
                        "VernacExtend",
                        "e00fff71ff314c991514fc71c41a3556702e444a"
                    ]
                },
                {
                    "command": [
                        "case: sorted_dec => /= [[i Hi]|Hi]/=.",
                        "VernacExtend",
                        "e00fff71ff314c991514fc71c41a3556702e444a"
                    ]
                },
                {
                    "command": [
                        "case: i Hi => //= i Hi ; contradict Hx' ; apply Rle_not_lt, Rle_trans with (2 := proj1 (proj1 Hi)).",
                        "VernacExtend",
                        "53553c709bba40ebba423b96b8670d3f05e17118"
                    ]
                },
                {
                    "command": [
                        "simpl in Hs ; elim: (unzip1 (SF_t s)) (fst h0) (SF_h s) (i) (proj2 Hs) (proj2 Hi) => {s IH Hs Hx Hi h h0} [| h1 s IH] h h0 n Hs Hn.",
                        "VernacExtend",
                        "f9a72f8ee99ace10ec6ab4410019beb694bd73b4"
                    ]
                },
                {
                    "command": [
                        "repeat apply lt_S_n in Hn ; by apply lt_n_O in Hn.",
                        "VernacExtend",
                        "3240f183a141989a64ccb70f2eeb390d466afc91"
                    ]
                },
                {
                    "command": [
                        "case: n Hn => [| n] Hn.",
                        "VernacExtend",
                        "e00fff71ff314c991514fc71c41a3556702e444a"
                    ]
                },
                {
                    "command": [
                        "apply Rle_refl.",
                        "VernacExtend",
                        "0a60a50353d5cfa9a4ade0240c47d5160d6d423c"
                    ]
                },
                {
                    "command": [
                        "apply Rle_trans with (1 := proj1 Hs) => //= ; intuition.",
                        "VernacExtend",
                        "392bd1d67bd08a3229bd3c64200057c7860e16f9"
                    ]
                },
                {
                    "command": [
                        "contradict Hx' ; apply Rle_not_lt, Rle_trans with (2 := proj1 Hi).",
                        "VernacExtend",
                        "370f6298029fd244ea50d81c3c127b7d80f69789"
                    ]
                },
                {
                    "command": [
                        "simpl in Hs ; elim: (unzip1 (SF_t s)) (fst h0) (SF_h s) (proj2 Hs) => {s IH Hs Hx Hi h h0} [| h1 s IH] h h0 Hs.",
                        "VernacExtend",
                        "f9a72f8ee99ace10ec6ab4410019beb694bd73b4"
                    ]
                },
                {
                    "command": [
                        "apply Rle_refl.",
                        "VernacExtend",
                        "0a60a50353d5cfa9a4ade0240c47d5160d6d423c"
                    ]
                },
                {
                    "command": [
                        "apply Rle_trans with (1 := proj1 Hs) => //= ; intuition.",
                        "VernacExtend",
                        "392bd1d67bd08a3229bd3c64200057c7860e16f9"
                    ]
                },
                {
                    "command": [
                        "have : fst h0 <= x <= last (SF_h s) (unzip1 (SF_t s)) => [ | {Hx'} Hx'].",
                        "VernacExtend",
                        "3c42b53d0efc26db114b00541ac5e7fcb29e6aeb"
                    ]
                },
                {
                    "command": [
                        "split ; [by apply Rnot_lt_le | by apply Hx].",
                        "VernacExtend",
                        "cd966443f25e3563445cb8616981d7ce092dfc10"
                    ]
                },
                {
                    "command": [
                        "rewrite (IH h0 (proj2 Hs) Hx') => {IH} ; case: sorted_dec => [[i [Hxi Hi]]|Hi] ; case: sorted_dec => [[j [Hxj Hj]]|Hj] ; rewrite -?minus_n_O //=.",
                        "VernacExtend",
                        "3c029feeae50bbd8522e056d817be38d490ecf51"
                    ]
                },
                {
                    "command": [
                        "move : h h0 i j Hs {Hx Hx'} Hxi Hi Hxj Hj ; apply SF_cons_ind with (s := s) => {s} [x1 | h1 s IH] h h0 i j Hs //= Hxi Hi Hxj Hj.",
                        "VernacExtend",
                        "8261237f0cda1915a4077c28869831c5329103ce"
                    ]
                },
                {
                    "command": [
                        "by apply lt_S_n, lt_S_n, lt_n_O in Hi.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "case: j Hxj Hj => [/= | j] Hxj Hj.",
                        "VernacExtend",
                        "e00fff71ff314c991514fc71c41a3556702e444a"
                    ]
                },
                {
                    "command": [
                        "case: Hxj => _ Hxj ; contradict Hxj ; apply Rle_not_lt, Rle_trans with (2 := proj1 Hxi).",
                        "VernacExtend",
                        "9f4fdb40ce4217184ecf9e77ab6436980cc4b389"
                    ]
                },
                {
                    "command": [
                        "elim: (i) Hi => {i Hxi IH} //= [| i IH] Hi.",
                        "VernacExtend",
                        "e686a1895f1799b840b76242f931100819a9ad6c"
                    ]
                },
                {
                    "command": [
                        "apply Rle_refl.",
                        "VernacExtend",
                        "0a60a50353d5cfa9a4ade0240c47d5160d6d423c"
                    ]
                },
                {
                    "command": [
                        "apply Rle_trans with (1 := IH (lt_trans _ _ _ (lt_n_Sn _) Hi)), (sorted_nth Rle) ; [apply Hs | simpl ; intuition].",
                        "VernacExtend",
                        "5b0babd68edfbb4977ee80548200ce91b45c2fe2"
                    ]
                },
                {
                    "command": [
                        "case: i Hxi Hi => [/= | i] Hxi Hi.",
                        "VernacExtend",
                        "e00fff71ff314c991514fc71c41a3556702e444a"
                    ]
                },
                {
                    "command": [
                        "case: j Hxj Hj => [//= | j] Hxj Hj.",
                        "VernacExtend",
                        "e00fff71ff314c991514fc71c41a3556702e444a"
                    ]
                },
                {
                    "command": [
                        "case: Hxi => _ Hxi ; contradict Hxi ; apply Rle_not_lt, Rle_trans with (2 := proj1 Hxj) ; elim: (j) Hj => {j Hxj IH} //= [| j IH] Hj.",
                        "VernacExtend",
                        "b25ec3641b8743e272452b8f7982f0fe01fb1f4b"
                    ]
                },
                {
                    "command": [
                        "apply Rle_refl.",
                        "VernacExtend",
                        "0a60a50353d5cfa9a4ade0240c47d5160d6d423c"
                    ]
                },
                {
                    "command": [
                        "apply Rle_trans with (1 := IH (lt_trans _ _ _ (lt_n_Sn _) Hj)), (sorted_nth Rle) ; [apply Hs | simpl ; intuition].",
                        "VernacExtend",
                        "06be087434e6601cb64a872e00940aaebadb1873"
                    ]
                },
                {
                    "command": [
                        "apply (IH h0 h1 i j) => //.",
                        "VernacExtend",
                        "3c42b53d0efc26db114b00541ac5e7fcb29e6aeb"
                    ]
                },
                {
                    "command": [
                        "apply Hs.",
                        "VernacExtend",
                        "26038359dfe6b0cb344439243c160e8be398bca9"
                    ]
                },
                {
                    "command": [
                        "apply lt_S_n, Hi.",
                        "VernacExtend",
                        "cb813add265ec9cda3f77173b317301fe7ef111b"
                    ]
                },
                {
                    "command": [
                        "apply lt_S_n, Hj.",
                        "VernacExtend",
                        "9190c6f558b5030aee0be80299aa8c810e66fa68"
                    ]
                },
                {
                    "command": [
                        "simpl in Hxi, Hj ; case: Hxi => _ Hxi ; contradict Hxi ; apply Rle_not_lt, Rle_trans with (2 := proj1 Hj).",
                        "VernacExtend",
                        "268b98192cac93023b41282647dd69302b5b8b87"
                    ]
                },
                {
                    "command": [
                        "move: Hi Hs ; rewrite ?SF_lx_cons /SF_lx.",
                        "VernacExtend",
                        "057edeb0967475c7ea5e8c98c449ddc5613eddc1"
                    ]
                },
                {
                    "command": [
                        "elim: i (fst h) (fst h0) (SF_h s) (unzip1 (SF_t s)) => {s Hx Hx' Hj h y0 h0} [| i IH] h h0 h1 s Hi Hs.",
                        "VernacExtend",
                        "e686a1895f1799b840b76242f931100819a9ad6c"
                    ]
                },
                {
                    "command": [
                        "case: s Hi Hs => [| h2 s] Hi Hs /=.",
                        "VernacExtend",
                        "e00fff71ff314c991514fc71c41a3556702e444a"
                    ]
                },
                {
                    "command": [
                        "by apply lt_S_n, lt_S_n, lt_n_O in Hi.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "elim: s h h0 h1 h2 {Hi} Hs => [| h3 s IH] h h0 h1 h2 Hs /=.",
                        "VernacExtend",
                        "e686a1895f1799b840b76242f931100819a9ad6c"
                    ]
                },
                {
                    "command": [
                        "apply Rle_refl.",
                        "VernacExtend",
                        "0a60a50353d5cfa9a4ade0240c47d5160d6d423c"
                    ]
                },
                {
                    "command": [
                        "apply Rle_trans with (r2 := h2).",
                        "VernacExtend",
                        "291bb1cd9bcc1f0ebc98f10f355781472bc7dbe9"
                    ]
                },
                {
                    "command": [
                        "apply Hs.",
                        "VernacExtend",
                        "26038359dfe6b0cb344439243c160e8be398bca9"
                    ]
                },
                {
                    "command": [
                        "apply (IH h0 h1).",
                        "VernacExtend",
                        "21b95ba36771d96e3f92373505821fc4ac37dd94"
                    ]
                },
                {
                    "command": [
                        "apply (proj2 Hs).",
                        "VernacExtend",
                        "86f7535c55375a4bd3b31f67f2a7d146231f7f71"
                    ]
                },
                {
                    "command": [
                        "case: s Hi Hs => [| h2 s] Hi Hs.",
                        "VernacExtend",
                        "e00fff71ff314c991514fc71c41a3556702e444a"
                    ]
                },
                {
                    "command": [
                        "by apply lt_S_n, lt_S_n, lt_n_O in Hi.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "apply (IH h0 h1 h2 s).",
                        "VernacExtend",
                        "c64bfb4f2f8c3d937caa85d8570904692b1d5637"
                    ]
                },
                {
                    "command": [
                        "apply lt_S_n, Hi.",
                        "VernacExtend",
                        "cb813add265ec9cda3f77173b317301fe7ef111b"
                    ]
                },
                {
                    "command": [
                        "apply Hs.",
                        "VernacExtend",
                        "26038359dfe6b0cb344439243c160e8be398bca9"
                    ]
                },
                {
                    "command": [
                        "simpl in Hxj, Hi ; case: Hxj => _ Hxj ; contradict Hxj ; apply Rle_not_lt, Rle_trans with (2 := proj1 Hi).",
                        "VernacExtend",
                        "04d3f70076f1ffb237f342080cd20af93aaf1a1b"
                    ]
                },
                {
                    "command": [
                        "move: Hj Hs ; rewrite ?SF_lx_cons /SF_lx.",
                        "VernacExtend",
                        "057edeb0967475c7ea5e8c98c449ddc5613eddc1"
                    ]
                },
                {
                    "command": [
                        "rewrite -minus_n_O ; elim: j (fst h) (fst h0) (SF_h s) (unzip1 (SF_t s)) => {s Hx Hx' Hi h y0 h0} [ | j IH] h h0 h1 s Hj Hs /=.",
                        "VernacExtend",
                        "44a8e3b453c9376c468b4e3e0046f5ac33e11d6d"
                    ]
                },
                {
                    "command": [
                        "elim: s h h0 h1 {Hj} Hs => [| h2 s IH] h h0 h1 Hs /=.",
                        "VernacExtend",
                        "e686a1895f1799b840b76242f931100819a9ad6c"
                    ]
                },
                {
                    "command": [
                        "apply Rle_refl.",
                        "VernacExtend",
                        "0a60a50353d5cfa9a4ade0240c47d5160d6d423c"
                    ]
                },
                {
                    "command": [
                        "apply Rle_trans with (r2 := h1).",
                        "VernacExtend",
                        "21d19f0a2b5b5cde7b9ccfeec61799304dda26b3"
                    ]
                },
                {
                    "command": [
                        "apply Hs.",
                        "VernacExtend",
                        "26038359dfe6b0cb344439243c160e8be398bca9"
                    ]
                },
                {
                    "command": [
                        "apply (IH h0 h1 h2).",
                        "VernacExtend",
                        "54598c33be5340e32c1f4def35a7759984e83562"
                    ]
                },
                {
                    "command": [
                        "apply (proj2 Hs).",
                        "VernacExtend",
                        "86f7535c55375a4bd3b31f67f2a7d146231f7f71"
                    ]
                },
                {
                    "command": [
                        "case: s Hj Hs => [| h2 s] Hj Hs.",
                        "VernacExtend",
                        "e00fff71ff314c991514fc71c41a3556702e444a"
                    ]
                },
                {
                    "command": [
                        "by apply lt_S_n, lt_S_n, lt_S_n, lt_n_O in Hj.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "apply (IH h0 h1 h2 s).",
                        "VernacExtend",
                        "c64bfb4f2f8c3d937caa85d8570904692b1d5637"
                    ]
                },
                {
                    "command": [
                        "apply lt_S_n, Hj.",
                        "VernacExtend",
                        "9190c6f558b5030aee0be80299aa8c810e66fa68"
                    ]
                },
                {
                    "command": [
                        "apply Hs.",
                        "VernacExtend",
                        "26038359dfe6b0cb344439243c160e8be398bca9"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "SF_fun_map",
            "line_nb": 679,
            "steps": [
                {
                    "command": [
                        "case: s => sh st ; rewrite /SF_fun /SF_map /= ; case: st => [| h st] x /=.",
                        "VernacExtend",
                        "1dd33488047dbf70f12e12a749f59bfa780f9e04"
                    ]
                },
                {
                    "command": [
                        "by case: Rle_dec.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "case: Rlt_dec => //.",
                        "VernacExtend",
                        "e00fff71ff314c991514fc71c41a3556702e444a"
                    ]
                },
                {
                    "command": [
                        "elim: st sh h y0 x => [| h0 st IH] sh h y0 x Hx //=.",
                        "VernacExtend",
                        "e686a1895f1799b840b76242f931100819a9ad6c"
                    ]
                },
                {
                    "command": [
                        "by case: Rle_dec.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "case: Rlt_dec => // {Hx} Hx.",
                        "VernacExtend",
                        "e00fff71ff314c991514fc71c41a3556702e444a"
                    ]
                },
                {
                    "command": [
                        "by apply: (IH (fst h)).",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "SF_cons_f1",
            "line_nb": 690,
            "steps": [
                {
                    "command": [
                        "case: P => [ H | h0 P _] //.",
                        "VernacExtend",
                        "e00fff71ff314c991514fc71c41a3556702e444a"
                    ]
                },
                {
                    "command": [
                        "by apply lt_n_O in H.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "SF_cons_f2",
            "line_nb": 694,
            "steps": [
                {
                    "command": [
                        "case: P => [ H | h0 P _] //.",
                        "VernacExtend",
                        "e00fff71ff314c991514fc71c41a3556702e444a"
                    ]
                },
                {
                    "command": [
                        "by apply lt_n_O in H.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "SF_size_f1",
            "line_nb": 698,
            "steps": [
                {
                    "command": [
                        "case: P => [| h P] //= ; by rewrite /SF_size /= size_pairmap.",
                        "VernacExtend",
                        "14b141a2d70f00681f703015bc169478d399fe62"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "SF_size_f2",
            "line_nb": 701,
            "steps": [
                {
                    "command": [
                        "case: P => [| h P] //= ; by rewrite /SF_size /= size_pairmap.",
                        "VernacExtend",
                        "14b141a2d70f00681f703015bc169478d399fe62"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "SF_lx_f1",
            "line_nb": 704,
            "steps": [
                {
                    "command": [
                        "elim: P => [ H | h l IH _] //=.",
                        "VernacExtend",
                        "e686a1895f1799b840b76242f931100819a9ad6c"
                    ]
                },
                {
                    "command": [
                        "by apply lt_n_O in H.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "case: l IH => [ | h' l] //= IH.",
                        "VernacExtend",
                        "e00fff71ff314c991514fc71c41a3556702e444a"
                    ]
                },
                {
                    "command": [
                        "rewrite -{2}IH //.",
                        "VernacExtend",
                        "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
                    ]
                },
                {
                    "command": [
                        "by apply lt_O_Sn.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "SF_lx_f2",
            "line_nb": 711,
            "steps": [
                {
                    "command": [
                        "elim: P => [ H | h l IH _] //=.",
                        "VernacExtend",
                        "e686a1895f1799b840b76242f931100819a9ad6c"
                    ]
                },
                {
                    "command": [
                        "by apply lt_n_O in H.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "case: l IH => [ | h' l] //= IH.",
                        "VernacExtend",
                        "e00fff71ff314c991514fc71c41a3556702e444a"
                    ]
                },
                {
                    "command": [
                        "rewrite -{2}IH //.",
                        "VernacExtend",
                        "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
                    ]
                },
                {
                    "command": [
                        "by apply lt_O_Sn.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "SF_ly_f1",
            "line_nb": 718,
            "steps": [
                {
                    "command": [
                        "case: P => [| h P] // ; elim: P h => //= h P IH h0 ; by rewrite -(IH h).",
                        "VernacExtend",
                        "4509d94a53292381d19ec171948355b40d55da39"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "SF_ly_f2",
            "line_nb": 721,
            "steps": [
                {
                    "command": [
                        "case: P => [| h P] // ; elim: P h => //= h P IH h0 ; by rewrite -(IH h).",
                        "VernacExtend",
                        "4509d94a53292381d19ec171948355b40d55da39"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "SF_sorted_f1",
            "line_nb": 724,
            "steps": [
                {
                    "command": [
                        "case: P => [ | h P] //.",
                        "VernacExtend",
                        "e00fff71ff314c991514fc71c41a3556702e444a"
                    ]
                },
                {
                    "command": [
                        "rewrite /SF_sorted SF_lx_f1 //.",
                        "VernacExtend",
                        "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
                    ]
                },
                {
                    "command": [
                        "by apply lt_O_Sn.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "SF_sorted_f2",
            "line_nb": 729,
            "steps": [
                {
                    "command": [
                        "case: P => [ | h P] //.",
                        "VernacExtend",
                        "e00fff71ff314c991514fc71c41a3556702e444a"
                    ]
                },
                {
                    "command": [
                        "rewrite /SF_sorted SF_lx_f2 //.",
                        "VernacExtend",
                        "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
                    ]
                },
                {
                    "command": [
                        "by apply lt_O_Sn.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "SF_rev_f2",
            "line_nb": 734,
            "steps": [
                {
                    "command": [
                        "move => Hf2 ; apply SF_lx_ly_inj ; case: P => [ | h P] //=.",
                        "VernacExtend",
                        "be17f051b87a3bf1b4eda6aab6f27e29f2ffa292"
                    ]
                },
                {
                    "command": [
                        "rewrite SF_lx_rev !SF_lx_f2 ?rev_cons /= 1?headI // ; by apply lt_O_Sn.",
                        "VernacExtend",
                        "f9e2aad1e70f1876566a77bd0af96f52b3b81520"
                    ]
                },
                {
                    "command": [
                        "rewrite SF_ly_rev !SF_ly_f2 /= ?rev_cons.",
                        "VernacExtend",
                        "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
                    ]
                },
                {
                    "command": [
                        "elim: P h => [ | h0 P IH] h //=.",
                        "VernacExtend",
                        "e686a1895f1799b840b76242f931100819a9ad6c"
                    ]
                },
                {
                    "command": [
                        "rewrite !rev_cons pairmap_rcons behead_rcons ?(IH h0) ?(Hf2 h h0) //.",
                        "VernacExtend",
                        "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
                    ]
                },
                {
                    "command": [
                        "rewrite size_pairmap size_rcons ; apply lt_O_Sn.",
                        "VernacExtend",
                        "fdfb450e459e640f938772fd8a2e99682bbd4874"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "SF_map_f1",
            "line_nb": 742,
            "steps": [
                {
                    "command": [
                        "case: P => [| h P] // ; elim: P h => [| h0 P IH] h //.",
                        "VernacExtend",
                        "1821533cafd21deefc2f797d67a58b45e0a54e79"
                    ]
                },
                {
                    "command": [
                        "rewrite ?(SF_cons_f1 _ _ (h0::P)) /= ; try intuition.",
                        "VernacExtend",
                        "0b316f303ec9b3bd785f24be0beeecb90e2db0d1"
                    ]
                },
                {
                    "command": [
                        "rewrite SF_map_cons IH ; intuition.",
                        "VernacExtend",
                        "e4029ed893b2095ae42ef8228a67f0fb36a59743"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "SF_map_f2",
            "line_nb": 747,
            "steps": [
                {
                    "command": [
                        "case: P => [| h P] // ; elim: P h => [| h0 P IH] h //.",
                        "VernacExtend",
                        "1821533cafd21deefc2f797d67a58b45e0a54e79"
                    ]
                },
                {
                    "command": [
                        "rewrite ?(SF_cons_f2 _ _ (h0::P)) /= ; try intuition.",
                        "VernacExtend",
                        "0b316f303ec9b3bd785f24be0beeecb90e2db0d1"
                    ]
                },
                {
                    "command": [
                        "rewrite SF_map_cons IH ; intuition.",
                        "VernacExtend",
                        "e4029ed893b2095ae42ef8228a67f0fb36a59743"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "ptd_f2",
            "line_nb": 752,
            "steps": [
                {
                    "command": [
                        "intros Hs Hf.",
                        "VernacExtend",
                        "d697a955d1704661182c6b4c98d90c3442441094"
                    ]
                },
                {
                    "command": [
                        "elim: s Hs => [ _ | h s].",
                        "VernacExtend",
                        "e686a1895f1799b840b76242f931100819a9ad6c"
                    ]
                },
                {
                    "command": [
                        "intros i Hi.",
                        "VernacExtend",
                        "1763a4b461e760b296ffbe398979e15770c7a1bd"
                    ]
                },
                {
                    "command": [
                        "by apply lt_n_O in Hi.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "case: s => [ | h' s] IH Hs.",
                        "VernacExtend",
                        "e00fff71ff314c991514fc71c41a3556702e444a"
                    ]
                },
                {
                    "command": [
                        "intros i Hi.",
                        "VernacExtend",
                        "1763a4b461e760b296ffbe398979e15770c7a1bd"
                    ]
                },
                {
                    "command": [
                        "by apply lt_n_O in Hi.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "case => [ | i] Hi.",
                        "VernacExtend",
                        "e00fff71ff314c991514fc71c41a3556702e444a"
                    ]
                },
                {
                    "command": [
                        "apply Hf, Hs.",
                        "VernacExtend",
                        "c71ab721fc3af9f86c1e61e1e2ba41f0d5f96029"
                    ]
                },
                {
                    "command": [
                        "apply IH.",
                        "VernacExtend",
                        "88103d45393d3ee3ab547447d913543854db8cea"
                    ]
                },
                {
                    "command": [
                        "apply Hs.",
                        "VernacExtend",
                        "26038359dfe6b0cb344439243c160e8be398bca9"
                    ]
                },
                {
                    "command": [
                        "by apply lt_S_n.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "unif_part_sort",
            "line_nb": 781,
            "steps": [
                {
                    "command": [
                        "move => Hab ; apply sorted_nth => i Hi x0 ; rewrite ?size_mkseq in Hi ; rewrite ?nth_mkseq ?S_INR ; [ |apply SSR_leq ; intuition | apply SSR_leq ; intuition ].",
                        "VernacExtend",
                        "21f1edca73433f626b4fbb066db37d2dc8ef3d4d"
                    ]
                },
                {
                    "command": [
                        "apply Rminus_le_0 ; field_simplify ; [| apply Rgt_not_eq ; intuition] ; rewrite ?Rdiv_1 ; apply Rdiv_le_0_compat ; intuition.",
                        "VernacExtend",
                        "d5bef96aba74e18274ac83adcec842bd718493b6"
                    ]
                },
                {
                    "command": [
                        "rewrite Rplus_comm ; by apply (proj1 (Rminus_le_0 _ _)).",
                        "VernacExtend",
                        "f9e2aad1e70f1876566a77bd0af96f52b3b81520"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "head_unif_part",
            "line_nb": 786,
            "steps": [
                {
                    "command": [
                        "rewrite /= Rmult_0_l /Rdiv ; ring.",
                        "VernacExtend",
                        "43f1253beb869d2f2abb689d01038ec8d9cd33b6"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "last_unif_part",
            "line_nb": 789,
            "steps": [
                {
                    "command": [
                        "rewrite (last_nth b) size_mkseq.",
                        "VernacExtend",
                        "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
                    ]
                },
                {
                    "command": [
                        "replace (nth b (x0 :: unif_part a b n) (S (S n))) with (nth b (unif_part a b n) (S n)) by auto.",
                        "VernacExtend",
                        "467f4843747336e8f36eb12364dc54c207522b5a"
                    ]
                },
                {
                    "command": [
                        "rewrite nth_mkseq.",
                        "VernacExtend",
                        "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
                    ]
                },
                {
                    "command": [
                        "rewrite S_INR ; field.",
                        "VernacExtend",
                        "978748f3924ddecb0b5c0d464fc313237f2af3c9"
                    ]
                },
                {
                    "command": [
                        "by apply Rgt_not_eq, INRp1_pos.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "by [].",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "unif_part_nat",
            "line_nb": 797,
            "steps": [
                {
                    "command": [
                        "move: (sorted_dec (unif_part a b n) 0 x) => Hdec Hx.",
                        "VernacExtend",
                        "b1b2cb7a3a617cba67460b4eca1f04de3c1cc716"
                    ]
                },
                {
                    "command": [
                        "have Hs : sorted Rle (unif_part a b n) ; [ apply unif_part_sort, Rle_trans with (r2 := x) ; intuition | move: (Hdec Hs) => {Hdec Hs} Hdec].",
                        "VernacExtend",
                        "dbb82d32a0d12169d8ab71a2b96aec262031ffeb"
                    ]
                },
                {
                    "command": [
                        "have Hx' : (head 0 (unif_part a b n) <= x <= last 0 (unif_part a b n)).",
                        "VernacExtend",
                        "406cde1174359c53bf162a2a18c4eede395555f9"
                    ]
                },
                {
                    "command": [
                        "by rewrite head_unif_part last_unif_part.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "case: (Hdec Hx') => {Hdec Hx'} [[i Hi]|Hi].",
                        "VernacExtend",
                        "e00fff71ff314c991514fc71c41a3556702e444a"
                    ]
                },
                {
                    "command": [
                        "left ; by exists i.",
                        "VernacExtend",
                        "8d1d3855bd3af5f36952354b4669569e4c0e7e37"
                    ]
                },
                {
                    "command": [
                        "right ; rewrite size_mkseq /= in Hi ; intuition.",
                        "VernacExtend",
                        "d0c130ed95020a48e7fefe3ce0422c98ddd2985e"
                    ]
                },
                {
                    "command": [
                        "by rewrite -minus_n_O in H1.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "seq_step_unif_part",
            "line_nb": 807,
            "steps": [
                {
                    "command": [
                        "assert (forall i, (S i < size (unif_part a b n))%nat -> (nth 0 (unif_part a b n) (S i) - nth 0 (unif_part a b n) i = (b - a) / (INR n + 1))%R).",
                        "VernacExtend",
                        "06dbc01c12ace89f2dbaeb83bccd788e5854b507"
                    ]
                },
                {
                    "command": [
                        "rewrite size_mkseq => i Hi.",
                        "VernacExtend",
                        "3c42b53d0efc26db114b00541ac5e7fcb29e6aeb"
                    ]
                },
                {
                    "command": [
                        "rewrite !nth_mkseq.",
                        "VernacExtend",
                        "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
                    ]
                },
                {
                    "command": [
                        "rewrite S_INR /Rdiv /= ; ring.",
                        "VernacExtend",
                        "43f1253beb869d2f2abb689d01038ec8d9cd33b6"
                    ]
                },
                {
                    "command": [
                        "by apply SSR_leq, lt_le_weak.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "by apply SSR_leq.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "move: (eq_refl (size (unif_part a b n))).",
                        "VernacExtend",
                        "b1b2cb7a3a617cba67460b4eca1f04de3c1cc716"
                    ]
                },
                {
                    "command": [
                        "rewrite {2}size_mkseq.",
                        "VernacExtend",
                        "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
                    ]
                },
                {
                    "command": [
                        "rewrite /seq_step ; elim: {2}(n) (unif_part a b n) H => [ | m IH] l //= ; destruct l as [ | x0 l] => //= ; destruct l as [ | x1 l] => //= ; destruct l as [ | x2 l] => //= ; intros.",
                        "VernacExtend",
                        "97f9ec343449f49bc5e090f3b636151f51d8b353"
                    ]
                },
                {
                    "command": [
                        "rewrite (H O).",
                        "VernacExtend",
                        "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
                    ]
                },
                {
                    "command": [
                        "rewrite Rmax_comm /Rmax ; case: Rle_dec => // H1.",
                        "VernacExtend",
                        "712d339e99ee17eb7d5033e19ac614eb3ca6b532"
                    ]
                },
                {
                    "command": [
                        "contradict H1 ; by apply Rabs_pos.",
                        "VernacExtend",
                        "9ea3455504f5b08394497bed6e3f82e2e09bb28e"
                    ]
                },
                {
                    "command": [
                        "by apply lt_n_S, lt_O_Sn.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "rewrite -(IH (x1::x2::l)) /=.",
                        "VernacExtend",
                        "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
                    ]
                },
                {
                    "command": [
                        "rewrite (H O).",
                        "VernacExtend",
                        "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
                    ]
                },
                {
                    "command": [
                        "rewrite (H 1%nat).",
                        "VernacExtend",
                        "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
                    ]
                },
                {
                    "command": [
                        "rewrite Rmax_assoc.",
                        "VernacExtend",
                        "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
                    ]
                },
                {
                    "command": [
                        "apply f_equal2 => //.",
                        "VernacExtend",
                        "3c42b53d0efc26db114b00541ac5e7fcb29e6aeb"
                    ]
                },
                {
                    "command": [
                        "rewrite /Rmax ; by case: Rle_dec.",
                        "VernacExtend",
                        "f9e2aad1e70f1876566a77bd0af96f52b3b81520"
                    ]
                },
                {
                    "command": [
                        "by apply lt_n_S, lt_n_S, lt_O_Sn.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "by apply lt_n_S, lt_O_Sn.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "now intros ; apply (H (S i)), lt_n_S.",
                        "VernacExtend",
                        "3d88e46585d06e737550203aaa01ff4b7cccadeb"
                    ]
                },
                {
                    "command": [
                        "by apply eq_add_S.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "seq_step_unif_part_ex",
            "line_nb": 832,
            "steps": [
                {
                    "command": [
                        "destruct (nfloor_ex (Rabs ((b - a) / eps))) as [n Hn].",
                        "VernacExtend",
                        "4da687dfe280b7eb2b7e2a0a34f47a0efa08fa18"
                    ]
                },
                {
                    "command": [
                        "by apply Rabs_pos.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "exists n.",
                        "VernacExtend",
                        "a97204a252e0d9b7444ffed9b38570a756391511"
                    ]
                },
                {
                    "command": [
                        "rewrite seq_step_unif_part.",
                        "VernacExtend",
                        "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
                    ]
                },
                {
                    "command": [
                        "rewrite Rabs_div.",
                        "VernacExtend",
                        "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
                    ]
                },
                {
                    "command": [
                        "rewrite (Rabs_pos_eq (INR n + 1)).",
                        "VernacExtend",
                        "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
                    ]
                },
                {
                    "command": [
                        "apply Rlt_div_l.",
                        "VernacExtend",
                        "4198c2770a4c425c9ede77a90e885e8d7fd9f290"
                    ]
                },
                {
                    "command": [
                        "by apply INRp1_pos.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "rewrite Rmult_comm -Rlt_div_l.",
                        "VernacExtend",
                        "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
                    ]
                },
                {
                    "command": [
                        "rewrite -(Rabs_pos_eq eps).",
                        "VernacExtend",
                        "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
                    ]
                },
                {
                    "command": [
                        "rewrite -Rabs_div.",
                        "VernacExtend",
                        "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
                    ]
                },
                {
                    "command": [
                        "by apply Hn.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "by apply Rgt_not_eq, eps.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "by apply Rlt_le, eps.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "by apply eps.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "by apply Rlt_le, INRp1_pos.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "by apply Rgt_not_eq, INRp1_pos.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "unif_part_S",
            "line_nb": 851,
            "steps": [
                {
                    "command": [
                        "apply eq_from_nth with 0.",
                        "VernacExtend",
                        "2d7a1a08bd23a20ce2f435cf5608f28b012bb44b"
                    ]
                },
                {
                    "command": [
                        "by rewrite /= !size_map !size_iota.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "case => [ | i] Hi.",
                        "VernacExtend",
                        "e00fff71ff314c991514fc71c41a3556702e444a"
                    ]
                },
                {
                    "command": [
                        "by rewrite nth0 head_unif_part.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "change (nth 0 (a :: unif_part ((a * INR (S n) + b) / INR (S (S n))) b n) (S i)) with (nth 0 (unif_part ((a * INR (S n) + b) / INR (S (S n))) b n) i).",
                        "VernacExtend",
                        "43a0fb301e4d6b61ec83867288620f261d3f7c24"
                    ]
                },
                {
                    "command": [
                        "rewrite /unif_part size_mkseq in Hi.",
                        "VernacExtend",
                        "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
                    ]
                },
                {
                    "command": [
                        "rewrite /unif_part !nth_mkseq ; try by intuition.",
                        "VernacExtend",
                        "768b2f88f8c65ebded32bd7dc9c8ffec8f100548"
                    ]
                },
                {
                    "command": [
                        "rewrite !S_INR ; field.",
                        "VernacExtend",
                        "978748f3924ddecb0b5c0d464fc313237f2af3c9"
                    ]
                },
                {
                    "command": [
                        "rewrite -!S_INR ; split ; apply sym_not_eq, (not_INR 0), O_S.",
                        "VernacExtend",
                        "d72ed98d74674ff5bc9a6304973a162c86b690ae"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "SF_val_ly_bound",
            "line_nb": 865,
            "steps": [
                {
                    "command": [
                        "rewrite /SF_val_ly (unif_part_bound b a).",
                        "VernacExtend",
                        "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
                    ]
                },
                {
                    "command": [
                        "case: (unif_part a b n) => [| h s] // ; elim: s h => [| h0 s IH] h //=.",
                        "VernacExtend",
                        "1821533cafd21deefc2f797d67a58b45e0a54e79"
                    ]
                },
                {
                    "command": [
                        "rewrite ?rev_cons.",
                        "VernacExtend",
                        "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
                    ]
                },
                {
                    "command": [
                        "replace (pairmap (fun x y : R => f ((x + y) / 2)) 0 (rcons (rcons (rev s) h0) h)) with (rcons (pairmap (fun x y : R => f ((x + y) / 2)) 0 (rcons (rev s) h0)) (f ((h0+h)/2))).",
                        "VernacExtend",
                        "4b8fb03ead6410e71213f780e812fc0217a47708"
                    ]
                },
                {
                    "command": [
                        "rewrite behead_rcons.",
                        "VernacExtend",
                        "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
                    ]
                },
                {
                    "command": [
                        "rewrite rev_rcons Rplus_comm -rev_cons -IH //.",
                        "VernacExtend",
                        "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
                    ]
                },
                {
                    "command": [
                        "rewrite size_pairmap size_rcons ; apply lt_O_Sn.",
                        "VernacExtend",
                        "fdfb450e459e640f938772fd8a2e99682bbd4874"
                    ]
                },
                {
                    "command": [
                        "move: (0) h h0 {IH} ; apply rcons_ind with (s := s) => {s} [| s h1 IH] x0 h h0 //.",
                        "VernacExtend",
                        "8261237f0cda1915a4077c28869831c5329103ce"
                    ]
                },
                {
                    "command": [
                        "rewrite ?rev_rcons /= IH //.",
                        "VernacExtend",
                        "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "Riemann_fine_unif_part",
            "line_nb": 876,
            "steps": [
                {
                    "command": [
                        "intros f a b n Hf Hab.",
                        "VernacExtend",
                        "a92f47f340fe5374eb66bf48c11c5643c8bb5f65"
                    ]
                },
                {
                    "command": [
                        "assert (Hab' : 0 <= (b - a) / (INR n + 1)).",
                        "VernacExtend",
                        "e9d53cf5b6803a188f555f4c365bad9806d61ab2"
                    ]
                },
                {
                    "command": [
                        "apply Rdiv_le_0_compat.",
                        "VernacExtend",
                        "693e22205d4e08285736e8c5e96457827d9a8003"
                    ]
                },
                {
                    "command": [
                        "apply -> Rminus_le_0.",
                        "VernacExtend",
                        "eb3010996ade724f542511d5c9a56441498f4fba"
                    ]
                },
                {
                    "command": [
                        "apply Hab.",
                        "VernacExtend",
                        "c308a650ed7a30bacb9ff3d65aa0dd3cb21cb89b"
                    ]
                },
                {
                    "command": [
                        "apply INRp1_pos.",
                        "VernacExtend",
                        "6d8a33bc49ba04ed52b7fbeba70394e66163cebe"
                    ]
                },
                {
                    "command": [
                        "unfold pointed_subdiv.",
                        "VernacExtend",
                        "d2af0b468680a0a3fb8e8e4e3f78368484dd9851"
                    ]
                },
                {
                    "command": [
                        "rewrite SF_lx_f2.",
                        "VernacExtend",
                        "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
                    ]
                },
                {
                    "command": [
                        "change (head 0 (unif_part a b n) :: behead (unif_part a b n)) with (unif_part a b n).",
                        "VernacExtend",
                        "b7cda7b8b0b270dee45f2b84ca3931be73e0fc25"
                    ]
                },
                {
                    "command": [
                        "split ; [|split ; [|split]].",
                        "VernacExtend",
                        "9f9dfdc8a9fde325369bf664d94bf68296e553c1"
                    ]
                },
                {
                    "command": [
                        "-",
                        "VernacBullet",
                        "581cab4bf49fa4b495e569bbda96fc8d28fddcc0"
                    ]
                },
                {
                    "command": [
                        "cut (forall i, (S i < size (unif_part a b n))%nat -> nth 0 (unif_part a b n) (S i) - nth 0 (unif_part a b n) i = (b - a) / (INR n + 1)).",
                        "VernacExtend",
                        "b8a1478eecdb522083e1d9ca33bba724391502b4"
                    ]
                },
                {
                    "command": [
                        "+",
                        "VernacBullet",
                        "3ddfc0515f916e562bacf863647e0107cb15aa13"
                    ]
                },
                {
                    "command": [
                        "induction (unif_part a b n) as [|x0 l IHl].",
                        "VernacExtend",
                        "3de793b62fc37431d674adf2315832e10bd520a0"
                    ]
                },
                {
                    "command": [
                        "now intros _.",
                        "VernacExtend",
                        "db3aad803f621233dc9262991171dfa29e5f6a45"
                    ]
                },
                {
                    "command": [
                        "intros H.",
                        "VernacExtend",
                        "5cfae87a34fa7b59a257c9640f1b674f6e6d780b"
                    ]
                },
                {
                    "command": [
                        "destruct l as [|x1 l].",
                        "VernacExtend",
                        "0749af805e709d9687ff64c08fffc19bb08451db"
                    ]
                },
                {
                    "command": [
                        "easy.",
                        "VernacExtend",
                        "ef1368621ae14ed4e378e6e1c58fbee46db9a962"
                    ]
                },
                {
                    "command": [
                        "change (seq_step _) with (Rmax (Rabs (x1 - x0)) (seq_step (x1 :: l))).",
                        "VernacExtend",
                        "c5df9ac7c777cccf40a1592f7d401dfced62a8bb"
                    ]
                },
                {
                    "command": [
                        "apply Rmax_case.",
                        "VernacExtend",
                        "cfd24564dbeed7e74b25ea72bdae495929c2ce09"
                    ]
                },
                {
                    "command": [
                        "apply Req_le.",
                        "VernacExtend",
                        "b69ffc9461f465218c69f379ac293728d3f8e7bd"
                    ]
                },
                {
                    "command": [
                        "rewrite (H 0%nat).",
                        "VernacExtend",
                        "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
                    ]
                },
                {
                    "command": [
                        "now apply Rabs_pos_eq.",
                        "VernacExtend",
                        "75396bee7c94a0ff0662d73d206e806e73cbff2e"
                    ]
                },
                {
                    "command": [
                        "apply lt_n_S.",
                        "VernacExtend",
                        "3c5e09f79b5d536a7a60dd2965c3f0ec6c1930e5"
                    ]
                },
                {
                    "command": [
                        "apply lt_0_Sn.",
                        "VernacExtend",
                        "3b7fc375f7db460b98008b419d236f8a4eb151b4"
                    ]
                },
                {
                    "command": [
                        "apply IHl.",
                        "VernacExtend",
                        "af412c6009bba78f939aa53ab07dcd1baaf5888b"
                    ]
                },
                {
                    "command": [
                        "intros i Hi.",
                        "VernacExtend",
                        "1763a4b461e760b296ffbe398979e15770c7a1bd"
                    ]
                },
                {
                    "command": [
                        "apply (H (S i)).",
                        "VernacExtend",
                        "5c26573be7e3278777555977cec8642b1f2a87a5"
                    ]
                },
                {
                    "command": [
                        "now apply lt_n_S.",
                        "VernacExtend",
                        "e13da225a52f941785d7f3756e4f8c74639e4adf"
                    ]
                },
                {
                    "command": [
                        "+",
                        "VernacBullet",
                        "3ddfc0515f916e562bacf863647e0107cb15aa13"
                    ]
                },
                {
                    "command": [
                        "rewrite size_mkseq.",
                        "VernacExtend",
                        "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
                    ]
                },
                {
                    "command": [
                        "intros i Hi.",
                        "VernacExtend",
                        "1763a4b461e760b296ffbe398979e15770c7a1bd"
                    ]
                },
                {
                    "command": [
                        "rewrite !nth_mkseq.",
                        "VernacExtend",
                        "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
                    ]
                },
                {
                    "command": [
                        "rewrite S_INR.",
                        "VernacExtend",
                        "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
                    ]
                },
                {
                    "command": [
                        "unfold Rdiv.",
                        "VernacExtend",
                        "d9820df68a5475147f48d29acf89824b27f71597"
                    ]
                },
                {
                    "command": [
                        "ring.",
                        "VernacExtend",
                        "baadd9fc4c175005af409bb466fcea9fab25b4e6"
                    ]
                },
                {
                    "command": [
                        "apply SSR_leq.",
                        "VernacExtend",
                        "597987155c8a9670919b8a50d2c4a34ea3d20c18"
                    ]
                },
                {
                    "command": [
                        "now apply lt_le_weak.",
                        "VernacExtend",
                        "011ffacd098aa65ac14a4c76fba8bc1bf047b12d"
                    ]
                },
                {
                    "command": [
                        "now apply SSR_leq.",
                        "VernacExtend",
                        "717fc1bc24198c3e04061cfb4973adf3661b9dd7"
                    ]
                },
                {
                    "command": [
                        "-",
                        "VernacBullet",
                        "581cab4bf49fa4b495e569bbda96fc8d28fddcc0"
                    ]
                },
                {
                    "command": [
                        "unfold pointed_subdiv.",
                        "VernacExtend",
                        "d2af0b468680a0a3fb8e8e4e3f78368484dd9851"
                    ]
                },
                {
                    "command": [
                        "rewrite SF_size_f2.",
                        "VernacExtend",
                        "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
                    ]
                },
                {
                    "command": [
                        "rewrite size_mkseq.",
                        "VernacExtend",
                        "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
                    ]
                },
                {
                    "command": [
                        "intros i Hi.",
                        "VernacExtend",
                        "1763a4b461e760b296ffbe398979e15770c7a1bd"
                    ]
                },
                {
                    "command": [
                        "rewrite SF_ly_f2.",
                        "VernacExtend",
                        "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
                    ]
                },
                {
                    "command": [
                        "rewrite nth_behead.",
                        "VernacExtend",
                        "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
                    ]
                },
                {
                    "command": [
                        "apply gt_S_le, SSR_leq in Hi.",
                        "VernacExtend",
                        "a54e433c549b221168568b4b8eb31d4026c5dafb"
                    ]
                },
                {
                    "command": [
                        "rewrite (nth_pairmap 0).",
                        "VernacExtend",
                        "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
                    ]
                },
                {
                    "command": [
                        "change (nth 0 (0 :: unif_part a b n) (S i)) with (nth 0 (unif_part a b n) i).",
                        "VernacExtend",
                        "08a927c25dfab65033bc447194e4e1ab935b2b7d"
                    ]
                },
                {
                    "command": [
                        "apply Hf.",
                        "VernacExtend",
                        "44e8b4102d20ba355038f72fc52240fc6cb8650c"
                    ]
                },
                {
                    "command": [
                        "rewrite !nth_mkseq //.",
                        "VernacExtend",
                        "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
                    ]
                },
                {
                    "command": [
                        "rewrite S_INR.",
                        "VernacExtend",
                        "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
                    ]
                },
                {
                    "command": [
                        "lra.",
                        "VernacExtend",
                        "c37bca18aec699b6843eab75e25df2491e3b9848"
                    ]
                },
                {
                    "command": [
                        "now apply ssrnat.leqW.",
                        "VernacExtend",
                        "db4e9437ea8b4b94f2637f2d034f7a2abc64dce8"
                    ]
                },
                {
                    "command": [
                        "by rewrite size_mkseq.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "-",
                        "VernacBullet",
                        "581cab4bf49fa4b495e569bbda96fc8d28fddcc0"
                    ]
                },
                {
                    "command": [
                        "apply head_unif_part.",
                        "VernacExtend",
                        "b0bceba99846c59838f47a6d860d83d99fdf8e31"
                    ]
                },
                {
                    "command": [
                        "-",
                        "VernacBullet",
                        "581cab4bf49fa4b495e569bbda96fc8d28fddcc0"
                    ]
                },
                {
                    "command": [
                        "apply last_unif_part.",
                        "VernacExtend",
                        "3b49fd4fd44633dd2b027307aeaaab4b7662851f"
                    ]
                },
                {
                    "command": [
                        "rewrite size_mkseq ; by apply lt_O_Sn.",
                        "VernacExtend",
                        "f9e2aad1e70f1876566a77bd0af96f52b3b81520"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "Riemann_fine_filter",
            "line_nb": 939,
            "steps": [
                {
                    "command": [
                        "intros a b.",
                        "VernacExtend",
                        "8c4941fda9d591147c446ef6e06d248ec0e6bf7a"
                    ]
                },
                {
                    "command": [
                        "constructor.",
                        "VernacExtend",
                        "3c77e6be855b5086df5e918bf2a0537e1010479a"
                    ]
                },
                {
                    "command": [
                        "-",
                        "VernacBullet",
                        "581cab4bf49fa4b495e569bbda96fc8d28fddcc0"
                    ]
                },
                {
                    "command": [
                        "intros P [alpha H].",
                        "VernacExtend",
                        "0e1d0b115a0d9a19f74911fb719c300d9e1d44ba"
                    ]
                },
                {
                    "command": [
                        "assert (Hab : Rmin a b <= Rmax a b).",
                        "VernacExtend",
                        "0743b314770f7d8fecd37d2403512d480a783f34"
                    ]
                },
                {
                    "command": [
                        "apply Rmax_case.",
                        "VernacExtend",
                        "cfd24564dbeed7e74b25ea72bdae495929c2ce09"
                    ]
                },
                {
                    "command": [
                        "apply Rmin_l.",
                        "VernacExtend",
                        "19942458506c6b3427aea84d1ee7179f00e19f1c"
                    ]
                },
                {
                    "command": [
                        "apply Rmin_r.",
                        "VernacExtend",
                        "d165954e4d055817b42cbc8960efd3fee45e4f16"
                    ]
                },
                {
                    "command": [
                        "assert (Hn : 0 <= ((Rmax a b - Rmin a b) / alpha)).",
                        "VernacExtend",
                        "de0cff3f039663d4edbfecf90c61fcb039cbe6f9"
                    ]
                },
                {
                    "command": [
                        "apply Rdiv_le_0_compat.",
                        "VernacExtend",
                        "693e22205d4e08285736e8c5e96457827d9a8003"
                    ]
                },
                {
                    "command": [
                        "apply -> Rminus_le_0.",
                        "VernacExtend",
                        "eb3010996ade724f542511d5c9a56441498f4fba"
                    ]
                },
                {
                    "command": [
                        "apply Hab.",
                        "VernacExtend",
                        "c308a650ed7a30bacb9ff3d65aa0dd3cb21cb89b"
                    ]
                },
                {
                    "command": [
                        "apply cond_pos.",
                        "VernacExtend",
                        "8ddb865849694c081c727a4dcd01494f171e402e"
                    ]
                },
                {
                    "command": [
                        "set n := (nfloor _ Hn).",
                        "VernacExtend",
                        "69a61e99b234580f7b41fa5b9655c87ba9a76f70"
                    ]
                },
                {
                    "command": [
                        "exists (SF_seq_f2 (fun x y => x) (unif_part (Rmin a b) (Rmax a b) n)).",
                        "VernacExtend",
                        "41ba7daeb40e0364b7ea16af0bb83964b13bfea6"
                    ]
                },
                {
                    "command": [
                        "destruct (Riemann_fine_unif_part (fun x y => x) (Rmin a b) (Rmax a b) n).",
                        "VernacExtend",
                        "2acc27bd5790de8e1288ffeea433b0a104aba50d"
                    ]
                },
                {
                    "command": [
                        "intros u v Huv.",
                        "VernacExtend",
                        "c59a5590067caf30f060cb4ee9822eca158778e8"
                    ]
                },
                {
                    "command": [
                        "split.",
                        "VernacExtend",
                        "55abc140132bd88981001ac656020469a8d503eb"
                    ]
                },
                {
                    "command": [
                        "apply Rle_refl.",
                        "VernacExtend",
                        "0a60a50353d5cfa9a4ade0240c47d5160d6d423c"
                    ]
                },
                {
                    "command": [
                        "exact Huv.",
                        "VernacExtend",
                        "80a538f09eff8e8adb82553ad067398e9f6557a4"
                    ]
                },
                {
                    "command": [
                        "exact Hab.",
                        "VernacExtend",
                        "f3d0f5752a150a91e25c080a5fc3ae0ed192bc4f"
                    ]
                },
                {
                    "command": [
                        "apply H.",
                        "VernacExtend",
                        "4b47b71ad0f800d57cbdc591d68949e07decb540"
                    ]
                },
                {
                    "command": [
                        "apply Rle_lt_trans with (1 := H0).",
                        "VernacExtend",
                        "c5a9efbfb5d03556d102a4aa69a797776aa68931"
                    ]
                },
                {
                    "command": [
                        "apply Rlt_div_l.",
                        "VernacExtend",
                        "4198c2770a4c425c9ede77a90e885e8d7fd9f290"
                    ]
                },
                {
                    "command": [
                        "apply INRp1_pos.",
                        "VernacExtend",
                        "6d8a33bc49ba04ed52b7fbeba70394e66163cebe"
                    ]
                },
                {
                    "command": [
                        "unfold n, nfloor.",
                        "VernacExtend",
                        "c6098d294bc13be32e9f174d47f32d1466dd8088"
                    ]
                },
                {
                    "command": [
                        "destruct nfloor_ex as [n' Hn'].",
                        "VernacExtend",
                        "9b13b0ede1797d2ee044a8536296ec7f1c157e86"
                    ]
                },
                {
                    "command": [
                        "simpl.",
                        "VernacExtend",
                        "1b93169f4cf876d207c1fab22a2347202ab48d85"
                    ]
                },
                {
                    "command": [
                        "rewrite Rmult_comm.",
                        "VernacExtend",
                        "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
                    ]
                },
                {
                    "command": [
                        "apply Rlt_div_l.",
                        "VernacExtend",
                        "4198c2770a4c425c9ede77a90e885e8d7fd9f290"
                    ]
                },
                {
                    "command": [
                        "apply cond_pos.",
                        "VernacExtend",
                        "8ddb865849694c081c727a4dcd01494f171e402e"
                    ]
                },
                {
                    "command": [
                        "apply Hn'.",
                        "VernacExtend",
                        "065665c7b826721bd7b9fc2408982b5fed908cf1"
                    ]
                },
                {
                    "command": [
                        "exact H1.",
                        "VernacExtend",
                        "c03ab82d1e411e1dcd211c59917a4946e039be00"
                    ]
                },
                {
                    "command": [
                        "-",
                        "VernacBullet",
                        "581cab4bf49fa4b495e569bbda96fc8d28fddcc0"
                    ]
                },
                {
                    "command": [
                        "apply within_filter.",
                        "VernacExtend",
                        "ad2c39ad901989af0ce9518a241c290a5ebf7a54"
                    ]
                },
                {
                    "command": [
                        "apply locally_dist_filter.",
                        "VernacExtend",
                        "d2de2fe8109dc1462fd2050cb75679cc80d0fc26"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "Riemann_sum_cons",
            "line_nb": 980,
            "steps": [
                {
                    "command": [
                        "rewrite /Riemann_sum /=.",
                        "VernacExtend",
                        "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
                    ]
                },
                {
                    "command": [
                        "case: h0 => x0 y0 ; apply SF_cons_dec with (s := ptd) => {ptd} [ x1 | [x1 y1] ptd ] //=.",
                        "VernacExtend",
                        "ba44c9d0281a02110ce54645304e6d990debd9c0"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "Riemann_sum_rcons",
            "line_nb": 984,
            "steps": [
                {
                    "command": [
                        "rewrite /Riemann_sum .",
                        "VernacExtend",
                        "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
                    ]
                },
                {
                    "command": [
                        "case: l0 => x0 y0.",
                        "VernacExtend",
                        "e00fff71ff314c991514fc71c41a3556702e444a"
                    ]
                },
                {
                    "command": [
                        "apply SF_rcons_dec with (s := ptd) => {ptd} [ x1 | ptd [x1 y1]].",
                        "VernacExtend",
                        "3c42b53d0efc26db114b00541ac5e7fcb29e6aeb"
                    ]
                },
                {
                    "command": [
                        "apply plus_comm.",
                        "VernacExtend",
                        "12475eb4e354334e12b009d49112b8335e8ec9d3"
                    ]
                },
                {
                    "command": [
                        "rewrite ?SF_map_rcons /=.",
                        "VernacExtend",
                        "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
                    ]
                },
                {
                    "command": [
                        "rewrite pairmap_rcons foldr_rcons /=.",
                        "VernacExtend",
                        "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
                    ]
                },
                {
                    "command": [
                        "rewrite unzip1_rcons last_rcons /=.",
                        "VernacExtend",
                        "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
                    ]
                },
                {
                    "command": [
                        "set l := pairmap _ _ _.",
                        "VernacExtend",
                        "69a61e99b234580f7b41fa5b9655c87ba9a76f70"
                    ]
                },
                {
                    "command": [
                        "induction l ; simpl.",
                        "VernacExtend",
                        "4ae00a4cb6decae1eaa2f9b701c4f4e7bd0ec6f4"
                    ]
                },
                {
                    "command": [
                        "apply plus_comm.",
                        "VernacExtend",
                        "12475eb4e354334e12b009d49112b8335e8ec9d3"
                    ]
                },
                {
                    "command": [
                        "rewrite IHl.",
                        "VernacExtend",
                        "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
                    ]
                },
                {
                    "command": [
                        "apply plus_assoc.",
                        "VernacExtend",
                        "5c8500d0c0d17e956744e0d6883f7a9255a616e9"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "Riemann_sum_zero",
            "line_nb": 998,
            "steps": [
                {
                    "command": [
                        "apply SF_cons_ind with (s := ptd) => {ptd} [x0 | [x0 y0] ptd IH] //= Hs Hhl.",
                        "VernacExtend",
                        "3c42b53d0efc26db114b00541ac5e7fcb29e6aeb"
                    ]
                },
                {
                    "command": [
                        "rewrite Riemann_sum_cons IH /= => {IH}.",
                        "VernacExtend",
                        "3c42b53d0efc26db114b00541ac5e7fcb29e6aeb"
                    ]
                },
                {
                    "command": [
                        "replace x0 with (SF_h ptd).",
                        "VernacExtend",
                        "ba9e89fa61d21f041f38fc99551a5430e76bc38b"
                    ]
                },
                {
                    "command": [
                        "rewrite Rminus_eq_0.",
                        "VernacExtend",
                        "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
                    ]
                },
                {
                    "command": [
                        "rewrite plus_zero_r.",
                        "VernacExtend",
                        "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
                    ]
                },
                {
                    "command": [
                        "by apply: scal_zero_l.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "apply Rle_antisym.",
                        "VernacExtend",
                        "8e9431fb6db6f151160007e68131f4f5cb1c7968"
                    ]
                },
                {
                    "command": [
                        "rewrite Hhl => {Hhl} /=.",
                        "VernacExtend",
                        "3c42b53d0efc26db114b00541ac5e7fcb29e6aeb"
                    ]
                },
                {
                    "command": [
                        "apply (sorted_last (SF_h ptd :: @map (R*R) R (@fst R R) (SF_t ptd)) O) with (x0 := 0).",
                        "VernacExtend",
                        "c17ba1dc4dcec33414284525e99de0d58036e2b2"
                    ]
                },
                {
                    "command": [
                        "replace ((SF_h ptd) :: map _ _) with (SF_lx ptd).",
                        "VernacExtend",
                        "6e99aea21e0eda63215189e505efd5bcb77751dd"
                    ]
                },
                {
                    "command": [
                        "apply Hs.",
                        "VernacExtend",
                        "26038359dfe6b0cb344439243c160e8be398bca9"
                    ]
                },
                {
                    "command": [
                        "apply SF_cons_ind with (s := ptd) => {ptd Hs} [x1 | [x1 y1] ptd IH] //=.",
                        "VernacExtend",
                        "3c42b53d0efc26db114b00541ac5e7fcb29e6aeb"
                    ]
                },
                {
                    "command": [
                        "apply lt_O_Sn.",
                        "VernacExtend",
                        "227f4ac630f07060fd7f3ffc8bcfa421aedc8a90"
                    ]
                },
                {
                    "command": [
                        "apply Hs.",
                        "VernacExtend",
                        "26038359dfe6b0cb344439243c160e8be398bca9"
                    ]
                },
                {
                    "command": [
                        "apply Hs.",
                        "VernacExtend",
                        "26038359dfe6b0cb344439243c160e8be398bca9"
                    ]
                },
                {
                    "command": [
                        "apply Rle_antisym.",
                        "VernacExtend",
                        "8e9431fb6db6f151160007e68131f4f5cb1c7968"
                    ]
                },
                {
                    "command": [
                        "apply (sorted_last (SF_h ptd :: @map (R*R) R (@fst R R) (SF_t ptd)) O) with (x0 := 0).",
                        "VernacExtend",
                        "c17ba1dc4dcec33414284525e99de0d58036e2b2"
                    ]
                },
                {
                    "command": [
                        "replace ((SF_h ptd) :: map _ _) with (SF_lx ptd).",
                        "VernacExtend",
                        "6e99aea21e0eda63215189e505efd5bcb77751dd"
                    ]
                },
                {
                    "command": [
                        "apply Hs.",
                        "VernacExtend",
                        "26038359dfe6b0cb344439243c160e8be398bca9"
                    ]
                },
                {
                    "command": [
                        "apply SF_cons_ind with (s := ptd) => {ptd Hs Hhl} [x1 | [x1 y1] ptd IH] //=.",
                        "VernacExtend",
                        "3c42b53d0efc26db114b00541ac5e7fcb29e6aeb"
                    ]
                },
                {
                    "command": [
                        "apply lt_O_Sn.",
                        "VernacExtend",
                        "227f4ac630f07060fd7f3ffc8bcfa421aedc8a90"
                    ]
                },
                {
                    "command": [
                        "move: Hhl ; rewrite -?(last_map (@fst R R)) /= => <- ; apply Hs.",
                        "VernacExtend",
                        "48aba7f73cc2918f6b04c8e3be94087daaf0dcc4"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "Riemann_sum_map",
            "line_nb": 1022,
            "steps": [
                {
                    "command": [
                        "apply SF_cons_ind with (s := ptd) => {ptd} [x0 | h ptd IH].",
                        "VernacExtend",
                        "3c42b53d0efc26db114b00541ac5e7fcb29e6aeb"
                    ]
                },
                {
                    "command": [
                        "by [].",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "rewrite SF_map_cons !Riemann_sum_cons /=.",
                        "VernacExtend",
                        "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
                    ]
                },
                {
                    "command": [
                        "by rewrite IH.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "Riemann_sum_const",
            "line_nb": 1028,
            "steps": [
                {
                    "command": [
                        "apply SF_cons_ind with (s := ptd) => {ptd} [x0 | [x0 y0] s IH] /=.",
                        "VernacExtend",
                        "3c42b53d0efc26db114b00541ac5e7fcb29e6aeb"
                    ]
                },
                {
                    "command": [
                        "by rewrite /Riemann_sum /= Rminus_eq_0 scal_zero_l.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "rewrite Riemann_sum_cons IH /=.",
                        "VernacExtend",
                        "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
                    ]
                },
                {
                    "command": [
                        "rewrite -scal_distr_r /=.",
                        "VernacExtend",
                        "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
                    ]
                },
                {
                    "command": [
                        "apply (f_equal (fun x => scal x v)).",
                        "VernacExtend",
                        "fa2bea75beae0970e8bc12e107e88e54eb5736a2"
                    ]
                },
                {
                    "command": [
                        "rewrite /plus /=.",
                        "VernacExtend",
                        "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
                    ]
                },
                {
                    "command": [
                        "ring.",
                        "VernacExtend",
                        "baadd9fc4c175005af409bb466fcea9fab25b4e6"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "Riemann_sum_scal",
            "line_nb": 1037,
            "steps": [
                {
                    "command": [
                        "apply SF_cons_ind with (s := ptd) => {ptd} /= [x0 | [x0 y0] s IH].",
                        "VernacExtend",
                        "3c42b53d0efc26db114b00541ac5e7fcb29e6aeb"
                    ]
                },
                {
                    "command": [
                        "rewrite /Riemann_sum /=.",
                        "VernacExtend",
                        "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
                    ]
                },
                {
                    "command": [
                        "apply sym_eq.",
                        "VernacExtend",
                        "f01eb728d9ceeac2915c66b52a7b50a0c452e949"
                    ]
                },
                {
                    "command": [
                        "apply @scal_zero_r.",
                        "VernacExtend",
                        "a5ec510015a02aadeb394c4d29806a31e02a535b"
                    ]
                },
                {
                    "command": [
                        "rewrite !Riemann_sum_cons /= IH.",
                        "VernacExtend",
                        "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
                    ]
                },
                {
                    "command": [
                        "rewrite scal_distr_l.",
                        "VernacExtend",
                        "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
                    ]
                },
                {
                    "command": [
                        "apply f_equal with (f := fun v => plus v _).",
                        "VernacExtend",
                        "5ffd68ed4e5b34824d7a7d780182c14d53255346"
                    ]
                },
                {
                    "command": [
                        "rewrite 2!scal_assoc.",
                        "VernacExtend",
                        "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
                    ]
                },
                {
                    "command": [
                        "by rewrite /mult /= Rmult_comm.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "Riemann_sum_opp",
            "line_nb": 1048,
            "steps": [
                {
                    "command": [
                        "apply SF_cons_ind with (s := ptd) => {ptd} /= [x0 | [x0 y0] s IH].",
                        "VernacExtend",
                        "3c42b53d0efc26db114b00541ac5e7fcb29e6aeb"
                    ]
                },
                {
                    "command": [
                        "rewrite /Riemann_sum /=.",
                        "VernacExtend",
                        "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
                    ]
                },
                {
                    "command": [
                        "apply sym_eq, @opp_zero.",
                        "VernacExtend",
                        "7f55c61369df55e5e6c6238c5900063bd7c1e6cb"
                    ]
                },
                {
                    "command": [
                        "rewrite !Riemann_sum_cons /= IH.",
                        "VernacExtend",
                        "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
                    ]
                },
                {
                    "command": [
                        "rewrite opp_plus.",
                        "VernacExtend",
                        "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
                    ]
                },
                {
                    "command": [
                        "apply f_equal with (f := fun v => plus v (opp (Riemann_sum f s))).",
                        "VernacExtend",
                        "daf1232b1075de0db59ef6babfb83b99ab81efba"
                    ]
                },
                {
                    "command": [
                        "apply scal_opp_r.",
                        "VernacExtend",
                        "35fac7292ab6246d658ed3b8ff78d59202a7194f"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "Riemann_sum_plus",
            "line_nb": 1057,
            "steps": [
                {
                    "command": [
                        "apply SF_cons_ind with (s := ptd) => {ptd} /= [x0 | [x0 y0] s IH].",
                        "VernacExtend",
                        "3c42b53d0efc26db114b00541ac5e7fcb29e6aeb"
                    ]
                },
                {
                    "command": [
                        "rewrite /Riemann_sum /=.",
                        "VernacExtend",
                        "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
                    ]
                },
                {
                    "command": [
                        "apply sym_eq, @plus_zero_l.",
                        "VernacExtend",
                        "92a0338fd90d1986d53da8d5026f0b9b6773b691"
                    ]
                },
                {
                    "command": [
                        "rewrite !Riemann_sum_cons /= ; rewrite IH.",
                        "VernacExtend",
                        "2194fcb4d6d52cbae24a29f7ff14a3997f1912fd"
                    ]
                },
                {
                    "command": [
                        "rewrite scal_distr_l.",
                        "VernacExtend",
                        "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
                    ]
                },
                {
                    "command": [
                        "rewrite -!plus_assoc.",
                        "VernacExtend",
                        "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
                    ]
                },
                {
                    "command": [
                        "apply f_equal.",
                        "VernacExtend",
                        "ba856cbef3c8e84dcef77c91c8515b497874875b"
                    ]
                },
                {
                    "command": [
                        "rewrite !plus_assoc.",
                        "VernacExtend",
                        "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
                    ]
                },
                {
                    "command": [
                        "apply (f_equal (fun x => plus x (Riemann_sum g s))).",
                        "VernacExtend",
                        "68b853bcdaffadf0e6953d487f00025f798d250d"
                    ]
                },
                {
                    "command": [
                        "apply plus_comm.",
                        "VernacExtend",
                        "12475eb4e354334e12b009d49112b8335e8ec9d3"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "Riemann_sum_minus",
            "line_nb": 1069,
            "steps": [
                {
                    "command": [
                        "unfold minus.",
                        "VernacExtend",
                        "eaede5182dbc40e4f7fe412bffb3a50f68f73568"
                    ]
                },
                {
                    "command": [
                        "rewrite -Riemann_sum_opp.",
                        "VernacExtend",
                        "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
                    ]
                },
                {
                    "command": [
                        "apply Riemann_sum_plus.",
                        "VernacExtend",
                        "df4ca256f50c2fbe72a4789da47d1a01bfcedbb6"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "Riemann_sum_le",
            "line_nb": 1243,
            "steps": [
                {
                    "command": [
                        "apply SF_cons_ind with (s := ptd) => {ptd} /= [x0 | [x0 y0] s IH] /= Hs H.",
                        "VernacExtend",
                        "3c42b53d0efc26db114b00541ac5e7fcb29e6aeb"
                    ]
                },
                {
                    "command": [
                        "apply Rle_refl.",
                        "VernacExtend",
                        "0a60a50353d5cfa9a4ade0240c47d5160d6d423c"
                    ]
                },
                {
                    "command": [
                        "rewrite !Riemann_sum_cons /=.",
                        "VernacExtend",
                        "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
                    ]
                },
                {
                    "command": [
                        "apply Rplus_le_compat.",
                        "VernacExtend",
                        "7a69898b466991bee51047e3a2fc51c3b80fbd93"
                    ]
                },
                {
                    "command": [
                        "refine (_ (Hs O _)).",
                        "VernacExtend",
                        "243f6aadade64fb1bcc054f70cff832210094f39"
                    ]
                },
                {
                    "command": [
                        "simpl.",
                        "VernacExtend",
                        "1b93169f4cf876d207c1fab22a2347202ab48d85"
                    ]
                },
                {
                    "command": [
                        "intros [H1 H2].",
                        "VernacExtend",
                        "0ae6198f19882a3028e7ce40d84662e28da622ee"
                    ]
                },
                {
                    "command": [
                        "apply Rmult_le_compat_l.",
                        "VernacExtend",
                        "509839294acd7016ba82d594bfdb05afe131eed3"
                    ]
                },
                {
                    "command": [
                        "apply -> Rminus_le_0.",
                        "VernacExtend",
                        "eb3010996ade724f542511d5c9a56441498f4fba"
                    ]
                },
                {
                    "command": [
                        "now apply Rle_trans with y0.",
                        "VernacExtend",
                        "cd06dca61f0cd17e1c49743658051da1cd39b41b"
                    ]
                },
                {
                    "command": [
                        "apply H.",
                        "VernacExtend",
                        "4b47b71ad0f800d57cbdc591d68949e07decb540"
                    ]
                },
                {
                    "command": [
                        "apply (conj H1).",
                        "VernacExtend",
                        "2cc226713205dd08eec65db5ba411a6c5d626e59"
                    ]
                },
                {
                    "command": [
                        "apply Rle_trans with (1 := H2).",
                        "VernacExtend",
                        "be6e786b1f99909853a5b0d8d7e08eeeedabf900"
                    ]
                },
                {
                    "command": [
                        "apply (sorted_last (SF_lx s) O) with (x0 := 0).",
                        "VernacExtend",
                        "d2147330610c93aa4e5e8a9328bcc14536c9b7de"
                    ]
                },
                {
                    "command": [
                        "by apply (ptd_sort _ Hs).",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "exact: lt_O_Sn.",
                        "VernacExtend",
                        "ce637ff86bafca5d8359473e8c02af644dcbdc43"
                    ]
                },
                {
                    "command": [
                        "exact: lt_O_Sn.",
                        "VernacExtend",
                        "ce637ff86bafca5d8359473e8c02af644dcbdc43"
                    ]
                },
                {
                    "command": [
                        "apply IH.",
                        "VernacExtend",
                        "88103d45393d3ee3ab547447d913543854db8cea"
                    ]
                },
                {
                    "command": [
                        "by apply ptd_cons with (h := (x0,y0)).",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "move => t Ht ; apply H ; split.",
                        "VernacExtend",
                        "70b2a6f251ffa61da16ecdf78299b0b7b54f9c2f"
                    ]
                },
                {
                    "command": [
                        "by apply Rle_trans with (2 := proj1 Ht), (ptd_sort _ Hs).",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "by apply Ht.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "Riemann_sum_pair",
            "line_nb": 1267,
            "steps": [
                {
                    "command": [
                        "apply SF_cons_ind with (s := ptd) => {ptd} [x0 | h0 ptd IH].",
                        "VernacExtend",
                        "3c42b53d0efc26db114b00541ac5e7fcb29e6aeb"
                    ]
                },
                {
                    "command": [
                        "by [].",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "rewrite !Riemann_sum_cons IH.",
                        "VernacExtend",
                        "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
                    ]
                },
                {
                    "command": [
                        "by apply injective_projections.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "RInt_val_point",
            "line_nb": 1276,
            "steps": [
                {
                    "command": [
                        "unfold RInt_val ; apply Riemann_sum_zero.",
                        "VernacExtend",
                        "9eb7b9f63130d7042a7b91867dcb1af2b5f1740c"
                    ]
                },
                {
                    "command": [
                        "rewrite /SF_sorted SF_lx_f2.",
                        "VernacExtend",
                        "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
                    ]
                },
                {
                    "command": [
                        "apply unif_part_sort ; apply Rle_refl.",
                        "VernacExtend",
                        "851e53caca7f07ae2e6356f273ea72a7fdb53a72"
                    ]
                },
                {
                    "command": [
                        "rewrite size_mkseq ; by apply lt_O_Sn.",
                        "VernacExtend",
                        "f9e2aad1e70f1876566a77bd0af96f52b3b81520"
                    ]
                },
                {
                    "command": [
                        "rewrite SF_lx_f2 /=.",
                        "VernacExtend",
                        "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
                    ]
                },
                {
                    "command": [
                        "rewrite -{2}[1]/(INR 1) last_map.",
                        "VernacExtend",
                        "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
                    ]
                },
                {
                    "command": [
                        "unfold Rdiv ; ring.",
                        "VernacExtend",
                        "c3a49fbaad57b642408a849290bec67d6d720029"
                    ]
                },
                {
                    "command": [
                        "by apply lt_O_Sn.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "RInt_val_ext",
            "line_nb": 1312,
            "steps": [
                {
                    "command": [
                        "wlog: a b / (a <= b) => [Hw | Hab].",
                        "VernacExtend",
                        "3c42b53d0efc26db114b00541ac5e7fcb29e6aeb"
                    ]
                },
                {
                    "command": [
                        "case: (Rle_lt_dec a b) => Hab.",
                        "VernacExtend",
                        "e00fff71ff314c991514fc71c41a3556702e444a"
                    ]
                },
                {
                    "command": [
                        "by apply Hw.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "rewrite Rmin_comm Rmax_comm => Heq.",
                        "VernacExtend",
                        "3c42b53d0efc26db114b00541ac5e7fcb29e6aeb"
                    ]
                },
                {
                    "command": [
                        "apply Rlt_le in Hab.",
                        "VernacExtend",
                        "121b4743682c65d820d721078f4058471fc37374"
                    ]
                },
                {
                    "command": [
                        "rewrite RInt_val_swap Hw => //=.",
                        "VernacExtend",
                        "3c42b53d0efc26db114b00541ac5e7fcb29e6aeb"
                    ]
                },
                {
                    "command": [
                        "apply sym_eq ; by apply RInt_val_swap.",
                        "VernacExtend",
                        "f1d0e1d719aec66edd7015c82f8a0553ded26e74"
                    ]
                },
                {
                    "command": [
                        "rewrite /Rmin /Rmax ; case: Rle_dec => //= _ Heq.",
                        "VernacExtend",
                        "712d339e99ee17eb7d5033e19ac614eb3ca6b532"
                    ]
                },
                {
                    "command": [
                        "unfold RInt_val.",
                        "VernacExtend",
                        "95ce06f95868017070d4a5431b1ee4882de7c383"
                    ]
                },
                {
                    "command": [
                        "set l := (SF_seq_f2 (fun x y : R => (x + y) / 2) (unif_part a b n)).",
                        "VernacExtend",
                        "69a61e99b234580f7b41fa5b9655c87ba9a76f70"
                    ]
                },
                {
                    "command": [
                        "assert (forall i, (i < size (SF_ly l))%nat -> f (nth 0 (SF_ly l) i) = g (nth 0 (SF_ly l) i)).",
                        "VernacExtend",
                        "ca8d41f4b350f0fa0729406a349cef98603f7573"
                    ]
                },
                {
                    "command": [
                        "move => i Hi.",
                        "VernacExtend",
                        "b1b2cb7a3a617cba67460b4eca1f04de3c1cc716"
                    ]
                },
                {
                    "command": [
                        "apply Heq.",
                        "VernacExtend",
                        "bb166f28913e4713dec882777f222b5e7b9617a8"
                    ]
                },
                {
                    "command": [
                        "destruct (fun H0 => Riemann_fine_unif_part (fun x y : R => (x + y) / 2) a b n H0 Hab) as [H [H0 [H1 H2]]].",
                        "VernacExtend",
                        "0bf4f075f99b677d570d93e853389d1aa6e564dd"
                    ]
                },
                {
                    "command": [
                        "clear.",
                        "VernacExtend",
                        "086ee0db0bdefcfa1ec15bb5cd44d451de64c569"
                    ]
                },
                {
                    "command": [
                        "intros a b Hab.",
                        "VernacExtend",
                        "ba416dd9af5581d42ad7e1e4ba3647e031ee986a"
                    ]
                },
                {
                    "command": [
                        "lra.",
                        "VernacExtend",
                        "c37bca18aec699b6843eab75e25df2491e3b9848"
                    ]
                },
                {
                    "command": [
                        "fold l in H, H0, H1, H2.",
                        "VernacExtend",
                        "faf07c3697177524318e22c39126c211d1f504e1"
                    ]
                },
                {
                    "command": [
                        "rewrite -H1 -H2 ; split.",
                        "VernacExtend",
                        "f4b7ef80d95d0131def61ae7f69c6275a20261d3"
                    ]
                },
                {
                    "command": [
                        "apply Rle_trans with (head 0 (SF_ly l)).",
                        "VernacExtend",
                        "4e360949af952b0aa0703d8408e4267ba9fe04c2"
                    ]
                },
                {
                    "command": [
                        "apply (H0 O).",
                        "VernacExtend",
                        "55ca0be3a87939b3e3f91b592752150292d83270"
                    ]
                },
                {
                    "command": [
                        "by apply lt_O_Sn.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "apply sorted_head.",
                        "VernacExtend",
                        "aeb9bf5d017a0679a6122714697c03479574eb46"
                    ]
                },
                {
                    "command": [
                        "by apply ptd_sort'.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "by [].",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "apply Rle_trans with (last 0 (SF_ly l)).",
                        "VernacExtend",
                        "2b1017486212336ecc9e31daf53f1cd4b852c8ed"
                    ]
                },
                {
                    "command": [
                        "apply sorted_last.",
                        "VernacExtend",
                        "af460239323b7003c296230d8cf1068d7e8a96f1"
                    ]
                },
                {
                    "command": [
                        "by apply ptd_sort'.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "by [].",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "rewrite -!nth_last SF_size_ly SF_size_lx SF_size_f2 size_mkseq.",
                        "VernacExtend",
                        "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
                    ]
                },
                {
                    "command": [
                        "simpl Peano.pred.",
                        "VernacExtend",
                        "b51b643f27fdfad5d5ca7c6ab374a6a1aa4c384b"
                    ]
                },
                {
                    "command": [
                        "replace (nth (SF_h l) (SF_lx l) (S n)) with (nth 0 (SF_lx l) (S n)).",
                        "VernacExtend",
                        "7703e03a66bc7bf09c31560db24c46bdd7237910"
                    ]
                },
                {
                    "command": [
                        "apply (H0 n).",
                        "VernacExtend",
                        "97a08acddf518a28ad0ee7375b5f7c5d5da0674a"
                    ]
                },
                {
                    "command": [
                        "rewrite SF_size_f2 size_mkseq /=.",
                        "VernacExtend",
                        "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
                    ]
                },
                {
                    "command": [
                        "by apply lt_n_Sn.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "rewrite SF_lx_f2.",
                        "VernacExtend",
                        "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
                    ]
                },
                {
                    "command": [
                        "assert (size (unif_part a b n) = S (S n)).",
                        "VernacExtend",
                        "a058713479e5f159552e708aa5f79a12f579b572"
                    ]
                },
                {
                    "command": [
                        "by apply size_mkseq.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "elim: (S n) (unif_part a b n) H3 ; simpl ; clear ; intros.",
                        "VernacExtend",
                        "4a7c78e560c260fc1735e7709b6ee3c274a83365"
                    ]
                },
                {
                    "command": [
                        "destruct unif_part0 ; simpl => //.",
                        "VernacExtend",
                        "d84063315d0ff4c1dd8a08f3b586070e8c450388"
                    ]
                },
                {
                    "command": [
                        "replace unif_part0 with (head 0 unif_part0 :: behead unif_part0).",
                        "VernacExtend",
                        "50cadf884d7d5e40a25500c1706072fe87341d82"
                    ]
                },
                {
                    "command": [
                        "apply H.",
                        "VernacExtend",
                        "4b47b71ad0f800d57cbdc591d68949e07decb540"
                    ]
                },
                {
                    "command": [
                        "destruct unif_part0 ; by intuition.",
                        "VernacExtend",
                        "1bdc86abfed287db1fb5bb303cafc4afcd29b977"
                    ]
                },
                {
                    "command": [
                        "destruct unif_part0 ; by intuition.",
                        "VernacExtend",
                        "1bdc86abfed287db1fb5bb303cafc4afcd29b977"
                    ]
                },
                {
                    "command": [
                        "by apply lt_O_Sn.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "move: H => {Heq}.",
                        "VernacExtend",
                        "b1b2cb7a3a617cba67460b4eca1f04de3c1cc716"
                    ]
                },
                {
                    "command": [
                        "apply SF_cons_ind with (s := l) => {l} [x0 | h0 s IH] /= Heq.",
                        "VernacExtend",
                        "3c42b53d0efc26db114b00541ac5e7fcb29e6aeb"
                    ]
                },
                {
                    "command": [
                        "by [].",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "rewrite !Riemann_sum_cons.",
                        "VernacExtend",
                        "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
                    ]
                },
                {
                    "command": [
                        "apply (f_equal2 (fun x y => plus (scal (SF_h s - fst h0) x) y)).",
                        "VernacExtend",
                        "7df3c99853f7be382809b3d379f57c15fdce7788"
                    ]
                },
                {
                    "command": [
                        "by apply sym_eq, (Heq O), lt_O_Sn.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "apply IH => i Hi.",
                        "VernacExtend",
                        "3c42b53d0efc26db114b00541ac5e7fcb29e6aeb"
                    ]
                },
                {
                    "command": [
                        "now apply (Heq (S i)), lt_n_S.",
                        "VernacExtend",
                        "05b6461d2e19147fd55c447ec46614d0659e75ca"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "RInt_val_comp_opp",
            "line_nb": 1367,
            "steps": [
                {
                    "command": [
                        "rewrite /RInt_val.",
                        "VernacExtend",
                        "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
                    ]
                },
                {
                    "command": [
                        "replace (unif_part (- a) (- b) n) with (map Ropp (unif_part a b n)).",
                        "VernacExtend",
                        "4658b909e89eabeff4485f8997957f9f8667d817"
                    ]
                },
                {
                    "command": [
                        "elim: (unif_part a b n) {1}0 {2}0 => /= [ | x1 s IH] x0 x0'.",
                        "VernacExtend",
                        "e686a1895f1799b840b76242f931100819a9ad6c"
                    ]
                },
                {
                    "command": [
                        "rewrite /Riemann_sum /=.",
                        "VernacExtend",
                        "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
                    ]
                },
                {
                    "command": [
                        "by apply sym_eq, @opp_zero.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "destruct s as [ | x2 s].",
                        "VernacExtend",
                        "a175602acab0ed4e245d1c6cf544b159eb6397ba"
                    ]
                },
                {
                    "command": [
                        "rewrite /Riemann_sum /=.",
                        "VernacExtend",
                        "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
                    ]
                },
                {
                    "command": [
                        "by apply sym_eq, @opp_zero.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "rewrite (SF_cons_f2 _ x1) ; try by apply lt_O_Sn.",
                        "VernacExtend",
                        "768b2f88f8c65ebded32bd7dc9c8ffec8f100548"
                    ]
                },
                {
                    "command": [
                        "rewrite (SF_cons_f2 _ (- x1)) ; try by apply lt_O_Sn.",
                        "VernacExtend",
                        "768b2f88f8c65ebded32bd7dc9c8ffec8f100548"
                    ]
                },
                {
                    "command": [
                        "rewrite !Riemann_sum_cons /=.",
                        "VernacExtend",
                        "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
                    ]
                },
                {
                    "command": [
                        "rewrite opp_plus.",
                        "VernacExtend",
                        "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
                    ]
                },
                {
                    "command": [
                        "apply f_equal2.",
                        "VernacExtend",
                        "be46a64a7879d7dc9b1dce72ceb4b39ac590e100"
                    ]
                },
                {
                    "command": [
                        "rewrite -scal_opp_l.",
                        "VernacExtend",
                        "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
                    ]
                },
                {
                    "command": [
                        "apply (f_equal2 (fun x y => scal x (f y))) ; rewrite /Rdiv /opp /= ; field.",
                        "VernacExtend",
                        "aba79d06776886ee19148e42a97725d78788a2d5"
                    ]
                },
                {
                    "command": [
                        "by apply IH.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "apply eq_from_nth with 0.",
                        "VernacExtend",
                        "2d7a1a08bd23a20ce2f435cf5608f28b012bb44b"
                    ]
                },
                {
                    "command": [
                        "by rewrite size_map !size_mkseq.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "rewrite size_map => i Hi.",
                        "VernacExtend",
                        "3c42b53d0efc26db114b00541ac5e7fcb29e6aeb"
                    ]
                },
                {
                    "command": [
                        "rewrite (nth_map 0 0) => //.",
                        "VernacExtend",
                        "3c42b53d0efc26db114b00541ac5e7fcb29e6aeb"
                    ]
                },
                {
                    "command": [
                        "rewrite size_mkseq in Hi.",
                        "VernacExtend",
                        "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
                    ]
                },
                {
                    "command": [
                        "rewrite !nth_mkseq => //.",
                        "VernacExtend",
                        "3c42b53d0efc26db114b00541ac5e7fcb29e6aeb"
                    ]
                },
                {
                    "command": [
                        "field.",
                        "VernacExtend",
                        "93f44750d651d466b74a0cc63f88acb56273d533"
                    ]
                },
                {
                    "command": [
                        "now rewrite -S_INR ; apply not_0_INR, sym_not_eq, O_S.",
                        "VernacExtend",
                        "def5ba70d746ed14120c028ae0d8801b58991c53"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "RInt_val_comp_lin",
            "line_nb": 1393,
            "steps": [
                {
                    "command": [
                        "rewrite /RInt_val.",
                        "VernacExtend",
                        "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
                    ]
                },
                {
                    "command": [
                        "replace (unif_part (u * a + v) (u * b + v) n) with (map (fun x => u * x + v) (unif_part a b n)).",
                        "VernacExtend",
                        "21ebcd445628e845a1e238df5a2c87a691ecc487"
                    ]
                },
                {
                    "command": [
                        "elim: (unif_part a b n) {1}0 {2}0 => /= [ | x1 s IH] x0 x0'.",
                        "VernacExtend",
                        "e686a1895f1799b840b76242f931100819a9ad6c"
                    ]
                },
                {
                    "command": [
                        "by apply @scal_zero_r.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "destruct s as [ | x2 s].",
                        "VernacExtend",
                        "a175602acab0ed4e245d1c6cf544b159eb6397ba"
                    ]
                },
                {
                    "command": [
                        "by apply @scal_zero_r.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "rewrite (SF_cons_f2 _ x1) ; try by apply lt_O_Sn.",
                        "VernacExtend",
                        "768b2f88f8c65ebded32bd7dc9c8ffec8f100548"
                    ]
                },
                {
                    "command": [
                        "rewrite (SF_cons_f2 _ (u * x1 + v)) ; try by apply lt_O_Sn.",
                        "VernacExtend",
                        "768b2f88f8c65ebded32bd7dc9c8ffec8f100548"
                    ]
                },
                {
                    "command": [
                        "rewrite !Riemann_sum_cons /=.",
                        "VernacExtend",
                        "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
                    ]
                },
                {
                    "command": [
                        "rewrite scal_distr_l.",
                        "VernacExtend",
                        "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
                    ]
                },
                {
                    "command": [
                        "apply f_equal2.",
                        "VernacExtend",
                        "be46a64a7879d7dc9b1dce72ceb4b39ac590e100"
                    ]
                },
                {
                    "command": [
                        "rewrite scal_assoc.",
                        "VernacExtend",
                        "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
                    ]
                },
                {
                    "command": [
                        "apply (f_equal2 (fun x y => scal x (f y))) ; rewrite /mult /= ; field.",
                        "VernacExtend",
                        "aba79d06776886ee19148e42a97725d78788a2d5"
                    ]
                },
                {
                    "command": [
                        "by apply IH.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "apply eq_from_nth with 0.",
                        "VernacExtend",
                        "2d7a1a08bd23a20ce2f435cf5608f28b012bb44b"
                    ]
                },
                {
                    "command": [
                        "by rewrite size_map !size_mkseq.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "rewrite size_map => i Hi.",
                        "VernacExtend",
                        "3c42b53d0efc26db114b00541ac5e7fcb29e6aeb"
                    ]
                },
                {
                    "command": [
                        "rewrite (nth_map 0 0) => //.",
                        "VernacExtend",
                        "3c42b53d0efc26db114b00541ac5e7fcb29e6aeb"
                    ]
                },
                {
                    "command": [
                        "rewrite size_mkseq in Hi.",
                        "VernacExtend",
                        "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
                    ]
                },
                {
                    "command": [
                        "rewrite !nth_mkseq => //.",
                        "VernacExtend",
                        "3c42b53d0efc26db114b00541ac5e7fcb29e6aeb"
                    ]
                },
                {
                    "command": [
                        "field.",
                        "VernacExtend",
                        "93f44750d651d466b74a0cc63f88acb56273d533"
                    ]
                },
                {
                    "command": [
                        "now rewrite -S_INR ; apply not_0_INR, sym_not_eq, O_S.",
                        "VernacExtend",
                        "def5ba70d746ed14120c028ae0d8801b58991c53"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "SF_Chasles",
            "line_nb": 1422,
            "steps": [
                {
                    "command": [
                        "rename x0 into z0.",
                        "VernacExtend",
                        "810af82a7d336a24567e243c6f5c85b3b2af8625"
                    ]
                },
                {
                    "command": [
                        "apply SF_cons_ind with (s := s) => {s} /= [ x0 | [x0 y0] s IH] /= Hx.",
                        "VernacExtend",
                        "3c42b53d0efc26db114b00541ac5e7fcb29e6aeb"
                    ]
                },
                {
                    "command": [
                        "rewrite (Rle_antisym _ _ (proj1 Hx) (proj2 Hx)).",
                        "VernacExtend",
                        "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
                    ]
                },
                {
                    "command": [
                        "move: (Rle_refl x).",
                        "VernacExtend",
                        "b1b2cb7a3a617cba67460b4eca1f04de3c1cc716"
                    ]
                },
                {
                    "command": [
                        "rewrite /SF_cut_down' /SF_cut_up' /= ; case: Rle_dec => //= _ _.",
                        "VernacExtend",
                        "712d339e99ee17eb7d5033e19ac614eb3ca6b532"
                    ]
                },
                {
                    "command": [
                        "by rewrite /Riemann_sum /= Rminus_eq_0 scal_zero_l !plus_zero_l.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "move: (fun Hx1 => IH (conj Hx1 (proj2 Hx))) => {IH}.",
                        "VernacExtend",
                        "b1b2cb7a3a617cba67460b4eca1f04de3c1cc716"
                    ]
                },
                {
                    "command": [
                        "rewrite /SF_cut_down' /SF_cut_up' /= ; case: (Rle_dec x0 _) (proj1 Hx) => //= Hx0 _.",
                        "VernacExtend",
                        "712d339e99ee17eb7d5033e19ac614eb3ca6b532"
                    ]
                },
                {
                    "command": [
                        "case: (Rle_dec (SF_h s) x) => //= Hx1 IH.",
                        "VernacExtend",
                        "e00fff71ff314c991514fc71c41a3556702e444a"
                    ]
                },
                {
                    "command": [
                        "move: (IH Hx1) => {IH} IH.",
                        "VernacExtend",
                        "b1b2cb7a3a617cba67460b4eca1f04de3c1cc716"
                    ]
                },
                {
                    "command": [
                        "rewrite (Riemann_sum_cons _ (x0,y0)) (Riemann_sum_cons _ (x0,y0) (mkSF_seq (SF_h s) (seq_cut_down' (SF_t s) x y0))) IH /= => {IH}.",
                        "VernacExtend",
                        "3c42b53d0efc26db114b00541ac5e7fcb29e6aeb"
                    ]
                },
                {
                    "command": [
                        "rewrite -!plus_assoc ; apply f_equal.",
                        "VernacExtend",
                        "1775b3adc7dd915cdc7d26d03365d16d21a7694e"
                    ]
                },
                {
                    "command": [
                        "assert (forall x0 y0, fst (head (x0, z0) (seq_cut_up' (SF_t s) x y0)) = x).",
                        "VernacExtend",
                        "2cb5f5e35e593dc4fb9d857215bf52068ca14ed1"
                    ]
                },
                {
                    "command": [
                        "elim: (SF_t s) => [ | x2 t IH] x1 y1 //=.",
                        "VernacExtend",
                        "e686a1895f1799b840b76242f931100819a9ad6c"
                    ]
                },
                {
                    "command": [
                        "by case: Rle_dec.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "rewrite ?H.",
                        "VernacExtend",
                        "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
                    ]
                },
                {
                    "command": [
                        "move: (proj2 Hx) Hx1 => {Hx} ; apply SF_cons_dec with (s := s) => {s H} /= [x1 | [x1 y1] s] //= Hx Hx1.",
                        "VernacExtend",
                        "8261237f0cda1915a4077c28869831c5329103ce"
                    ]
                },
                {
                    "command": [
                        "by rewrite /Riemann_sum /= (Rle_antisym _ _ Hx Hx1) Rminus_eq_0 !scal_zero_l !plus_zero_l.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "case: Rle_dec => //.",
                        "VernacExtend",
                        "e00fff71ff314c991514fc71c41a3556702e444a"
                    ]
                },
                {
                    "command": [
                        "rewrite Riemann_sum_cons (Riemann_sum_cons _ (x,y0) s) {2}/Riemann_sum /=.",
                        "VernacExtend",
                        "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
                    ]
                },
                {
                    "command": [
                        "clear IH.",
                        "VernacExtend",
                        "daecf0ea8665f0f6fd551644d47b5ce1d93aef1e"
                    ]
                },
                {
                    "command": [
                        "rewrite plus_zero_r !plus_assoc.",
                        "VernacExtend",
                        "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
                    ]
                },
                {
                    "command": [
                        "apply f_equal2 => //.",
                        "VernacExtend",
                        "3c42b53d0efc26db114b00541ac5e7fcb29e6aeb"
                    ]
                },
                {
                    "command": [
                        "rewrite -scal_distr_r.",
                        "VernacExtend",
                        "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
                    ]
                },
                {
                    "command": [
                        "apply f_equal2 => //.",
                        "VernacExtend",
                        "3c42b53d0efc26db114b00541ac5e7fcb29e6aeb"
                    ]
                },
                {
                    "command": [
                        "rewrite /plus /= ; ring.",
                        "VernacExtend",
                        "43f1253beb869d2f2abb689d01038ec8d9cd33b6"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "seq_cut_up_head'",
            "line_nb": 1450,
            "steps": [
                {
                    "command": [
                        "elim: s z x0 => [ | x1 s IH] //= z x0.",
                        "VernacExtend",
                        "e686a1895f1799b840b76242f931100819a9ad6c"
                    ]
                },
                {
                    "command": [
                        "by case: Rle_dec.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "ad_SF_compat",
            "line_nb": 1454,
            "steps": [
                {
                    "command": [
                        "have H : ((head 0 (SF_lx s)) <= (last 0 (SF_lx s))).",
                        "VernacExtend",
                        "406cde1174359c53bf162a2a18c4eede395555f9"
                    ]
                },
                {
                    "command": [
                        "move: pr ; rewrite /SF_sorted.",
                        "VernacExtend",
                        "057edeb0967475c7ea5e8c98c449ddc5613eddc1"
                    ]
                },
                {
                    "command": [
                        "case: (SF_lx s) => {s} [| h s] Hs.",
                        "VernacExtend",
                        "e00fff71ff314c991514fc71c41a3556702e444a"
                    ]
                },
                {
                    "command": [
                        "apply Rle_refl.",
                        "VernacExtend",
                        "0a60a50353d5cfa9a4ade0240c47d5160d6d423c"
                    ]
                },
                {
                    "command": [
                        "rewrite -nth0 ; apply sorted_last => // ; apply lt_O_Sn.",
                        "VernacExtend",
                        "9d175dc5130d298b864882587ba5537cf5d14851"
                    ]
                },
                {
                    "command": [
                        "rewrite /adapted_couple ?nth_compat ?size_compat ?nth0 ?nth_last /Rmin /Rmax ?SF_size_lx ?SF_size_ly ; case: (Rle_dec (head 0 (SF_lx s)) (last 0 (SF_lx s))) => // {H} _ ; intuition.",
                        "VernacExtend",
                        "fd9ecce63f2f40b8ea56323d041a35e39ce9864e"
                    ]
                },
                {
                    "command": [
                        "apply sorted_compat => //.",
                        "VernacExtend",
                        "3c42b53d0efc26db114b00541ac5e7fcb29e6aeb"
                    ]
                },
                {
                    "command": [
                        "move: i pr H ; apply SF_cons_dec with (s := s) => {s} [x0 | h s] i Hs Hi x [Hx0 Hx1].",
                        "VernacExtend",
                        "8261237f0cda1915a4077c28869831c5329103ce"
                    ]
                },
                {
                    "command": [
                        "by apply lt_n_O in Hi.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "rewrite /SF_fun ?SF_size_cons ?nth_compat -?SF_size_lx ?SF_lx_cons in Hi, Hx0, Hx1 |- *.",
                        "VernacExtend",
                        "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
                    ]
                },
                {
                    "command": [
                        "simpl.",
                        "VernacExtend",
                        "1b93169f4cf876d207c1fab22a2347202ab48d85"
                    ]
                },
                {
                    "command": [
                        "move: h i x {1}z0 Hs Hi Hx0 Hx1 ; apply SF_cons_ind with (s := s) => {s} [x1 | h0 s IH] h ; case => [| i ] x z0' Hs Hi Hx0 Hx1 //= ; case: Rlt_dec => Hx' //.",
                        "VernacExtend",
                        "da663691447d50cd7e9eac358285c730673d7a74"
                    ]
                },
                {
                    "command": [
                        "now contradict Hx' ; apply Rle_not_lt, Rlt_le, Hx0.",
                        "VernacExtend",
                        "6dcacf4936c26d6fdc285640ddd177150862a96f"
                    ]
                },
                {
                    "command": [
                        "now case: Rle_dec => Hx'' // ; contradict Hx'' ; apply Rlt_le, Hx1.",
                        "VernacExtend",
                        "9c8f3245e3d6d2dce96dfbc0b2da65773ccbb220"
                    ]
                },
                {
                    "command": [
                        "now rewrite /= in Hi ; by apply lt_S_n, lt_n_O in Hi.",
                        "VernacExtend",
                        "c99ca10bfc495db1d8df943b2af8eee753bcbd05"
                    ]
                },
                {
                    "command": [
                        "now rewrite /= in Hi ; by apply lt_S_n, lt_n_O in Hi.",
                        "VernacExtend",
                        "c99ca10bfc495db1d8df943b2af8eee753bcbd05"
                    ]
                },
                {
                    "command": [
                        "now contradict Hx' ; apply Rle_not_lt, Rlt_le, Hx0.",
                        "VernacExtend",
                        "6dcacf4936c26d6fdc285640ddd177150862a96f"
                    ]
                },
                {
                    "command": [
                        "now case: Rlt_dec => Hx'' //.",
                        "VernacExtend",
                        "9b5dc78914ea71d33248c1f7ec7d76670ed43b8d"
                    ]
                },
                {
                    "command": [
                        "now contradict Hx' ; apply Rle_not_lt, Rlt_le, Rle_lt_trans with (2 := Hx0) ; have Hi' : (S i < size (SF_lx (SF_cons h (SF_cons h0 s))))%nat ; [ rewrite ?SF_lx_cons /= in Hi |-* ; apply lt_trans with (1 := Hi), lt_n_Sn | ] ; apply (sorted_head (SF_lx (SF_cons h (SF_cons h0 s))) (S i) Hs Hi' 0).",
                        "VernacExtend",
                        "ade05372e2f411a3180e8ad92f03514eaac34a25"
                    ]
                },
                {
                    "command": [
                        "rewrite -(IH h0 i x (snd h)) //=.",
                        "VernacExtend",
                        "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
                    ]
                },
                {
                    "command": [
                        "apply Hs.",
                        "VernacExtend",
                        "26038359dfe6b0cb344439243c160e8be398bca9"
                    ]
                },
                {
                    "command": [
                        "rewrite ?SF_lx_cons /= in Hi |-* ; apply lt_S_n, Hi.",
                        "VernacExtend",
                        "5a82f3ccce8f52e7417d04286480571f825134e1"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "SF_compat_le",
            "line_nb": 1478,
            "steps": [
                {
                    "command": [
                        "exists (SF_fun s 0) ; exists (seq2Rlist (SF_lx s)) ; exists (seq2Rlist (SF_ly s)).",
                        "VernacExtend",
                        "535059aa8fbeeb1fc0f7791a394d8c437dd7860e"
                    ]
                },
                {
                    "command": [
                        "by apply ad_SF_compat.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Defined.",
                        "VernacEndProof",
                        "88c0be54a50df4bb90276c075406fe442428eb9c"
                    ]
                }
            ]
        },
        {
            "name": "Riemann_sum_compat",
            "line_nb": 1482,
            "steps": [
                {
                    "command": [
                        "rewrite /RiemannInt_SF ; case: Rle_dec => // [_ | H].",
                        "VernacExtend",
                        "712d339e99ee17eb7d5033e19ac614eb3ca6b532"
                    ]
                },
                {
                    "command": [
                        "move: pr ; apply SF_cons_ind with (s := s) => {s} [x0 | h s IH] pr //=.",
                        "VernacExtend",
                        "8261237f0cda1915a4077c28869831c5329103ce"
                    ]
                },
                {
                    "command": [
                        "rewrite /= -IH /Riemann_sum /SF_map /= => {IH}.",
                        "VernacExtend",
                        "3c42b53d0efc26db114b00541ac5e7fcb29e6aeb"
                    ]
                },
                {
                    "command": [
                        "rewrite Rmult_comm.",
                        "VernacExtend",
                        "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
                    ]
                },
                {
                    "command": [
                        "by apply SF_cons_dec with (s := s).",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "apply pr.",
                        "VernacExtend",
                        "e564d48317d343abd9d9ecff47e1ad6fa98bc4c7"
                    ]
                },
                {
                    "command": [
                        "contradict H ; rewrite -nth_last -nth0 ; move: (le_refl (ssrnat.predn (size (SF_lx (SF_map f s))))) ; elim: {1 3}(ssrnat.predn (size (SF_lx (SF_map f s)))) => /= [| i IH] Hi.",
                        "VernacExtend",
                        "8d0393d62b3df36c84885a552919840cf9cf99a1"
                    ]
                },
                {
                    "command": [
                        "apply Rle_refl.",
                        "VernacExtend",
                        "0a60a50353d5cfa9a4ade0240c47d5160d6d423c"
                    ]
                },
                {
                    "command": [
                        "apply Rle_trans with (1 := IH (le_trans _ _ _ (le_n_Sn i) Hi)), (sorted_nth Rle) ; intuition.",
                        "VernacExtend",
                        "9cc580ea41ddcf63140d5924336eedb2f49ce241"
                    ]
                },
                {
                    "command": [
                        "by apply SF_map_sort.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "ad_SF_val_fun",
            "line_nb": 1494,
            "steps": [
                {
                    "command": [
                        "wlog : a b / (a <= b) => Hw.",
                        "VernacExtend",
                        "3c42b53d0efc26db114b00541ac5e7fcb29e6aeb"
                    ]
                },
                {
                    "command": [
                        "split ; case: (Rle_dec a b) => // Hab _.",
                        "VernacExtend",
                        "7693ea0446b60093c0a33dc7341b41ab06f1698f"
                    ]
                },
                {
                    "command": [
                        "by apply Hw.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "apply StepFun_P2 ; apply Hw ; by apply Rlt_le, Rnot_le_lt.",
                        "VernacExtend",
                        "eb457f3d619c531a1299068282a30ed68b563344"
                    ]
                },
                {
                    "command": [
                        "split ; case: (Rle_dec a b) => // {Hw} Hab _.",
                        "VernacExtend",
                        "7693ea0446b60093c0a33dc7341b41ab06f1698f"
                    ]
                },
                {
                    "command": [
                        "have : (a = head 0 (SF_lx (SF_val_seq f a b n))) ; [rewrite SF_lx_f2 /= ; (try by apply lt_O_Sn) ; field ; apply Rgt_not_eq ; intuition | move => {2}->].",
                        "VernacExtend",
                        "7b5ea9504ad0e3c0042bb1c5a3f084b68e815c0c"
                    ]
                },
                {
                    "command": [
                        "pattern b at 3 ; replace b with (last 0 (SF_lx (SF_val_seq f a b n))).",
                        "VernacExtend",
                        "12fe37edf30382ef736d5f2b759a07f9fd20a8ad"
                    ]
                },
                {
                    "command": [
                        "rewrite -(SF_lx_f2 (fun x y => f ((x+y)/2)) (unif_part a b n)) ; try by apply lt_O_Sn.",
                        "VernacExtend",
                        "768b2f88f8c65ebded32bd7dc9c8ffec8f100548"
                    ]
                },
                {
                    "command": [
                        "rewrite /SF_val_ly -SF_ly_f2.",
                        "VernacExtend",
                        "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
                    ]
                },
                {
                    "command": [
                        "unfold SF_val_fun, SF_fun_f2.",
                        "VernacExtend",
                        "d74c644c86168377b49653488c832effa1b01096"
                    ]
                },
                {
                    "command": [
                        "replace (SF_seq_f2 (fun x y : R => f ((x + y) / 2)) (unif_part a b n)) with (SF_val_seq f a b n) by auto.",
                        "VernacExtend",
                        "9cb378d8ff7cfc5ddf82344b3d9b3683341ca3a0"
                    ]
                },
                {
                    "command": [
                        "apply (ad_SF_compat _ (SF_val_seq f a b n)).",
                        "VernacExtend",
                        "30cc46442cec0742a18071773db6fd989af9fef0"
                    ]
                },
                {
                    "command": [
                        "by apply SF_sorted_f2, unif_part_sort.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "rewrite SF_lx_f2 ; replace (head 0 (unif_part a b n) :: behead (unif_part a b n)) with (unif_part a b n) by auto.",
                        "VernacExtend",
                        "c916a4bbe4cec7dd46ab5b79b88cfb43fab0b82f"
                    ]
                },
                {
                    "command": [
                        "rewrite -nth_last size_mkseq nth_mkseq ?S_INR //= ; field ; apply Rgt_not_eq, INRp1_pos.",
                        "VernacExtend",
                        "e8bfdab61067d1ca980d8e329c3beb23f2edc70b"
                    ]
                },
                {
                    "command": [
                        "now rewrite size_mkseq ; apply lt_O_Sn.",
                        "VernacExtend",
                        "ff910eea93bd4e8b8f863e240b29ec783e5ce51e"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "sf_SF_val_fun",
            "line_nb": 1512,
            "steps": [
                {
                    "command": [
                        "case : (Rle_dec a b) => Hab.",
                        "VernacExtend",
                        "e00fff71ff314c991514fc71c41a3556702e444a"
                    ]
                },
                {
                    "command": [
                        "exists (SF_val_fun f a b n) ; exists (seq2Rlist (unif_part a b n)) ; exists (seq2Rlist (SF_val_ly f a b n)) ; by apply ad_SF_val_fun.",
                        "VernacExtend",
                        "6a1eec960078835a462fcbc6f321c8951f3a108a"
                    ]
                },
                {
                    "command": [
                        "exists (SF_val_fun f b a n) ; exists (seq2Rlist (unif_part b a n)) ; exists (seq2Rlist (SF_val_ly f b a n)) ; by apply ad_SF_val_fun.",
                        "VernacExtend",
                        "b4af1119affbcff805ee1a6ff16e026ef3f5e384"
                    ]
                },
                {
                    "command": [
                        "Defined.",
                        "VernacEndProof",
                        "88c0be54a50df4bb90276c075406fe442428eb9c"
                    ]
                }
            ]
        },
        {
            "name": "SF_val_subdiv",
            "line_nb": 1517,
            "steps": [
                {
                    "command": [
                        "rewrite /sf_SF_val_fun ; case: (Rle_dec a b) => Hab //.",
                        "VernacExtend",
                        "712d339e99ee17eb7d5033e19ac614eb3ca6b532"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "SF_val_subdiv_val",
            "line_nb": 1520,
            "steps": [
                {
                    "command": [
                        "rewrite /sf_SF_val_fun ; case: (Rle_dec a b) => Hab //.",
                        "VernacExtend",
                        "712d339e99ee17eb7d5033e19ac614eb3ca6b532"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "SF_val_fun_rw",
            "line_nb": 1523,
            "steps": [
                {
                    "command": [
                        "have Hab : (a <= b) ; [by apply Rle_trans with (1 := proj1 Hx), Hx | ].",
                        "VernacExtend",
                        "aba2b42bd7a87f88ac31bc37d93024dc60304d28"
                    ]
                },
                {
                    "command": [
                        "case: unif_part_nat => {Hx} [ [ i [Hx Hi] ] | Hx] /=.",
                        "VernacExtend",
                        "e00fff71ff314c991514fc71c41a3556702e444a"
                    ]
                },
                {
                    "command": [
                        "rewrite /SF_val_fun /SF_fun_f2.",
                        "VernacExtend",
                        "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
                    ]
                },
                {
                    "command": [
                        "replace (a + (INR i + /2) * (b - a) / (INR n+1)) with ((nth 0 (unif_part a b n) i + nth 0 (unif_part a b n) (S i)) / 2) ; [ | rewrite size_mkseq in Hi ; rewrite ?nth_mkseq ?S_INR ; [field ; apply Rgt_not_eq | apply SSR_leq | apply SSR_leq ] ; intuition].",
                        "VernacExtend",
                        "968a25fd2378e96052b8606d79699c905e047799"
                    ]
                },
                {
                    "command": [
                        "case: (unif_part a b n) (unif_part_sort a b n Hab) i Hi x Hx => {a b Hab n} [| h s] Hs /= i Hi.",
                        "VernacExtend",
                        "e00fff71ff314c991514fc71c41a3556702e444a"
                    ]
                },
                {
                    "command": [
                        "by apply lt_n_O in Hi.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "case: (s) Hs (i) (lt_S_n _ _ Hi) => {s i Hi} [| h0 s] Hs /= i Hi.",
                        "VernacExtend",
                        "e00fff71ff314c991514fc71c41a3556702e444a"
                    ]
                },
                {
                    "command": [
                        "by apply lt_n_O in Hi.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "elim: (s) h h0 Hs (i) (lt_S_n _ _ Hi) => {s i Hi} [|h1 s IH] h h0 Hs /= i Hi x Hx.",
                        "VernacExtend",
                        "e686a1895f1799b840b76242f931100819a9ad6c"
                    ]
                },
                {
                    "command": [
                        "by apply lt_n_O in Hi.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "case: i Hx Hi => [|i]/= Hx Hi.",
                        "VernacExtend",
                        "e00fff71ff314c991514fc71c41a3556702e444a"
                    ]
                },
                {
                    "command": [
                        "rewrite /SF_fun /=.",
                        "VernacExtend",
                        "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
                    ]
                },
                {
                    "command": [
                        "case: Rlt_dec => [Hx0 | _ ].",
                        "VernacExtend",
                        "e00fff71ff314c991514fc71c41a3556702e444a"
                    ]
                },
                {
                    "command": [
                        "contradict Hx0 ; apply Rle_not_lt, Hx.",
                        "VernacExtend",
                        "6ef0a3a9b1268f2f6220e4bab19f7636dea7f0fb"
                    ]
                },
                {
                    "command": [
                        "case: Rlt_dec => // Hx0 ; contradict Hx0 ; apply Hx.",
                        "VernacExtend",
                        "9d65530bfb1cf960991db629d690aef4449ab950"
                    ]
                },
                {
                    "command": [
                        "rewrite -(IH h0 h1 (proj2 Hs) i (lt_S_n _ _ Hi) x Hx).",
                        "VernacExtend",
                        "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
                    ]
                },
                {
                    "command": [
                        "rewrite /SF_fun /= ; case: Rlt_dec => [ Hx0 | _ ] //.",
                        "VernacExtend",
                        "712d339e99ee17eb7d5033e19ac614eb3ca6b532"
                    ]
                },
                {
                    "command": [
                        "contradict Hx0 ; apply Rle_not_lt, Rle_trans with (1 := proj1 Hs), Rle_trans with (2 := proj1 Hx), (sorted_head [:: h0, h1 & s] _ (proj2 Hs)) ; simpl; intuition.",
                        "VernacExtend",
                        "ab94b46b476160afb4a29acd17e29cb3038f39c6"
                    ]
                },
                {
                    "command": [
                        "case: Rlt_dec => [ Hx0 | _ ] //.",
                        "VernacExtend",
                        "e00fff71ff314c991514fc71c41a3556702e444a"
                    ]
                },
                {
                    "command": [
                        "contradict Hx0 ; apply Rle_not_lt, Rle_trans with (2 := proj1 Hx), (sorted_head [:: h0, h1 & s] _ (proj2 Hs)) ; simpl; intuition.",
                        "VernacExtend",
                        "6066f9967bc32a601bcff8bea7194e9b9d571a65"
                    ]
                },
                {
                    "command": [
                        "replace (a + (INR n + /2) * (b - a) / (INR n + 1)) with ((nth 0 (unif_part a b n) (n) + nth 0 (unif_part a b n) (S n)) / 2) ; [ | rewrite ?nth_mkseq ?minus_INR ?S_INR /= ; [field ; apply Rgt_not_eq | apply SSR_leq | apply SSR_leq ] ; intuition].",
                        "VernacExtend",
                        "3d25f9fc0431c258ec6ddca8acbb1cd892e04db7"
                    ]
                },
                {
                    "command": [
                        "suff : (1 < size (unif_part a b n))%nat.",
                        "VernacExtend",
                        "d07fc8b2103f140554938023774bf3f75d04ba99"
                    ]
                },
                {
                    "command": [
                        "move: x Hx ; have: (n = size (unif_part a b n) - 2)%nat ; [ rewrite size_mkseq ; intuition | ].",
                        "VernacExtend",
                        "e4a93f22e65d010afa3f2b86f954fa66848e383f"
                    ]
                },
                {
                    "command": [
                        "move => {2 4 8 10}->.",
                        "VernacExtend",
                        "b1b2cb7a3a617cba67460b4eca1f04de3c1cc716"
                    ]
                },
                {
                    "command": [
                        "rewrite /SF_val_fun /SF_fun_f2.",
                        "VernacExtend",
                        "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
                    ]
                },
                {
                    "command": [
                        "case: (unif_part a b n) (unif_part_sort a b n Hab) => {a b Hab n} [| h s Hs x Hx /= Hi] .",
                        "VernacExtend",
                        "e00fff71ff314c991514fc71c41a3556702e444a"
                    ]
                },
                {
                    "command": [
                        "intros _ x Hx Hi.",
                        "VernacExtend",
                        "02d527550be0b821bfc6a0dced2481a83940f5c0"
                    ]
                },
                {
                    "command": [
                        "by apply lt_n_O in Hi.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "case: s h Hs Hi x Hx => [| h0 s] h Hs /= Hi.",
                        "VernacExtend",
                        "e00fff71ff314c991514fc71c41a3556702e444a"
                    ]
                },
                {
                    "command": [
                        "by apply lt_irrefl in Hi.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "elim: s h h0 Hs {Hi} => [| h1 s IH] h h0 Hs /= x Hx.",
                        "VernacExtend",
                        "e686a1895f1799b840b76242f931100819a9ad6c"
                    ]
                },
                {
                    "command": [
                        "rewrite /SF_fun /= ; case: Rlt_dec => [Hx0 | _].",
                        "VernacExtend",
                        "712d339e99ee17eb7d5033e19ac614eb3ca6b532"
                    ]
                },
                {
                    "command": [
                        "contradict Hx0 ; apply Rle_not_lt, Hx.",
                        "VernacExtend",
                        "6ef0a3a9b1268f2f6220e4bab19f7636dea7f0fb"
                    ]
                },
                {
                    "command": [
                        "case: Rle_dec => [| Hx0] // ; contradict Hx0 ; apply Hx.",
                        "VernacExtend",
                        "9d65530bfb1cf960991db629d690aef4449ab950"
                    ]
                },
                {
                    "command": [
                        "rewrite -minus_n_O in IH.",
                        "VernacExtend",
                        "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
                    ]
                },
                {
                    "command": [
                        "rewrite -(IH h0 h1 (proj2 Hs) x Hx ).",
                        "VernacExtend",
                        "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
                    ]
                },
                {
                    "command": [
                        "rewrite /SF_fun /= ; case: Rlt_dec => [ Hx0 | _ ] //.",
                        "VernacExtend",
                        "712d339e99ee17eb7d5033e19ac614eb3ca6b532"
                    ]
                },
                {
                    "command": [
                        "contradict Hx0 ; apply Rle_not_lt, Rle_trans with (1 := proj1 Hs), Rle_trans with (2 := proj1 Hx), (sorted_head [:: h0, h1 & s] _ (proj2 Hs)) ; simpl; intuition.",
                        "VernacExtend",
                        "ab94b46b476160afb4a29acd17e29cb3038f39c6"
                    ]
                },
                {
                    "command": [
                        "case: Rlt_dec => [ Hx0 | _ ] //.",
                        "VernacExtend",
                        "e00fff71ff314c991514fc71c41a3556702e444a"
                    ]
                },
                {
                    "command": [
                        "contradict Hx0 ; apply Rle_not_lt, Rle_trans with (2 := proj1 Hx), (sorted_head [:: h0, h1 & s] _ (proj2 Hs)) ; simpl; intuition.",
                        "VernacExtend",
                        "6066f9967bc32a601bcff8bea7194e9b9d571a65"
                    ]
                },
                {
                    "command": [
                        "rewrite size_mkseq ; by apply lt_n_S, lt_O_Sn.",
                        "VernacExtend",
                        "f9e2aad1e70f1876566a77bd0af96f52b3b81520"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "ex_Im_fct",
            "line_nb": 1587,
            "steps": [
                {
                    "command": [
                        "exists (f ((a+b)/2)) ; exists ((a+b)/2) ; split.",
                        "VernacExtend",
                        "cecf3506d0c8a179922ad36c8ef4d79f4823906b"
                    ]
                },
                {
                    "command": [
                        "by [].",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "rewrite /Rmin /Rmax.",
                        "VernacExtend",
                        "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
                    ]
                },
                {
                    "command": [
                        "case Rle_dec ; lra.",
                        "VernacExtend",
                        "068e8f6e144cff4747b71b8f15c0aa32dbfc6800"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "Sup_fct_bound",
            "line_nb": 1595,
            "steps": [
                {
                    "command": [
                        "rewrite /Sup_fct /= ; case: Req_EM_T => Hab ; case: Req_EM_T => Hba.",
                        "VernacExtend",
                        "1418099f654a9d12bdfd561bac86adb846b83bfd"
                    ]
                },
                {
                    "command": [
                        "by [].",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "by apply sym_equal in Hab.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "by apply sym_equal in Hba.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "apply Lub_Rbar_eqset => x ; by rewrite Rmin_comm Rmax_comm.",
                        "VernacExtend",
                        "7bd77ea96f784074e3b1d448260a45dd4191485f"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "Inf_fct_bound",
            "line_nb": 1602,
            "steps": [
                {
                    "command": [
                        "rewrite /Inf_fct /= ; case: Req_EM_T => Hab ; case: Req_EM_T => Hba.",
                        "VernacExtend",
                        "1418099f654a9d12bdfd561bac86adb846b83bfd"
                    ]
                },
                {
                    "command": [
                        "by [].",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "by apply sym_equal in Hab.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "by apply sym_equal in Hba.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "apply Glb_Rbar_eqset => x ; by rewrite Rmin_comm Rmax_comm.",
                        "VernacExtend",
                        "7bd77ea96f784074e3b1d448260a45dd4191485f"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "Sup_fct_le",
            "line_nb": 1609,
            "steps": [
                {
                    "command": [
                        "move => Hx ; rewrite /Sup_fct.",
                        "VernacExtend",
                        "057edeb0967475c7ea5e8c98c449ddc5613eddc1"
                    ]
                },
                {
                    "command": [
                        "case: Req_EM_T => Hab.",
                        "VernacExtend",
                        "e00fff71ff314c991514fc71c41a3556702e444a"
                    ]
                },
                {
                    "command": [
                        "move: (Rlt_trans _ _ _ (proj1 Hx) (proj2 Hx)) => {Hx} ; rewrite /Rmin /Rmax ; case: Rle_dec (Req_le _ _ Hab) => //= _ _ Hx.",
                        "VernacExtend",
                        "d7214ac8fd48f4d1cd143edd9d16f6d28386a302"
                    ]
                },
                {
                    "command": [
                        "contradict Hx ; by apply Rle_not_lt, Req_le.",
                        "VernacExtend",
                        "846664ab7f58244d589de056389e6b3cbbc68e0c"
                    ]
                },
                {
                    "command": [
                        "rewrite /Lub_Rbar ; case: ex_lub_Rbar => l lub ; apply lub ; exists x ; split ; by [].",
                        "VernacExtend",
                        "84cc87747e2762f7eaa9164153eb056cdf821585"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "Inf_fct_le",
            "line_nb": 1616,
            "steps": [
                {
                    "command": [
                        "move => Hx ; rewrite /Inf_fct.",
                        "VernacExtend",
                        "057edeb0967475c7ea5e8c98c449ddc5613eddc1"
                    ]
                },
                {
                    "command": [
                        "case: Req_EM_T => Hab.",
                        "VernacExtend",
                        "e00fff71ff314c991514fc71c41a3556702e444a"
                    ]
                },
                {
                    "command": [
                        "move: (Rlt_trans _ _ _ (proj1 Hx) (proj2 Hx)) => {Hx} ; rewrite /Rmin /Rmax ; case: Rle_dec (Req_le _ _ Hab) => //= _ _ Hx.",
                        "VernacExtend",
                        "d7214ac8fd48f4d1cd143edd9d16f6d28386a302"
                    ]
                },
                {
                    "command": [
                        "contradict Hx ; by apply Rle_not_lt, Req_le.",
                        "VernacExtend",
                        "846664ab7f58244d589de056389e6b3cbbc68e0c"
                    ]
                },
                {
                    "command": [
                        "rewrite /Glb_Rbar ; case: ex_glb_Rbar => l lub ; apply lub ; exists x ; split ; by [].",
                        "VernacExtend",
                        "84cc87747e2762f7eaa9164153eb056cdf821585"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "Sup_fct_maj",
            "line_nb": 1623,
            "steps": [
                {
                    "command": [
                        "rewrite /Sup_fct ; case: Req_EM_T => Hab Hf.",
                        "VernacExtend",
                        "712d339e99ee17eb7d5033e19ac614eb3ca6b532"
                    ]
                },
                {
                    "command": [
                        "by [].",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "rewrite /Lub_Rbar ; case: ex_lub_Rbar ; case => [l | | ] [lub ub] /=.",
                        "VernacExtend",
                        "1418099f654a9d12bdfd561bac86adb846b83bfd"
                    ]
                },
                {
                    "command": [
                        "by [].",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "case: (ub (Finite M)) => //.",
                        "VernacExtend",
                        "e00fff71ff314c991514fc71c41a3556702e444a"
                    ]
                },
                {
                    "command": [
                        "move => _ [x [-> Hx]].",
                        "VernacExtend",
                        "b1b2cb7a3a617cba67460b4eca1f04de3c1cc716"
                    ]
                },
                {
                    "command": [
                        "by apply Hf.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "case: (lub (f((a+b)/2))) => //.",
                        "VernacExtend",
                        "e00fff71ff314c991514fc71c41a3556702e444a"
                    ]
                },
                {
                    "command": [
                        "exists ((a + b) / 2) ; split.",
                        "VernacExtend",
                        "31c1323a18b9390d60831a10de6fa98a1d621aa9"
                    ]
                },
                {
                    "command": [
                        "by [].",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "rewrite /Rmin /Rmax.",
                        "VernacExtend",
                        "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
                    ]
                },
                {
                    "command": [
                        "case Rle_dec ; lra.",
                        "VernacExtend",
                        "068e8f6e144cff4747b71b8f15c0aa32dbfc6800"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "Inf_fct_min",
            "line_nb": 1637,
            "steps": [
                {
                    "command": [
                        "rewrite /Inf_fct ; case: Req_EM_T => Hab Hf.",
                        "VernacExtend",
                        "712d339e99ee17eb7d5033e19ac614eb3ca6b532"
                    ]
                },
                {
                    "command": [
                        "by [].",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "rewrite /Glb_Rbar ; case: ex_glb_Rbar ; case => [l | | ] [lub ub] /=.",
                        "VernacExtend",
                        "1418099f654a9d12bdfd561bac86adb846b83bfd"
                    ]
                },
                {
                    "command": [
                        "by [].",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "case: (lub (f((a+b)/2))) => //.",
                        "VernacExtend",
                        "e00fff71ff314c991514fc71c41a3556702e444a"
                    ]
                },
                {
                    "command": [
                        "exists ((a + b) / 2) ; split.",
                        "VernacExtend",
                        "31c1323a18b9390d60831a10de6fa98a1d621aa9"
                    ]
                },
                {
                    "command": [
                        "by [].",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "rewrite /Rmin /Rmax.",
                        "VernacExtend",
                        "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
                    ]
                },
                {
                    "command": [
                        "case Rle_dec ; lra.",
                        "VernacExtend",
                        "068e8f6e144cff4747b71b8f15c0aa32dbfc6800"
                    ]
                },
                {
                    "command": [
                        "case: (ub (Finite m)) => //.",
                        "VernacExtend",
                        "e00fff71ff314c991514fc71c41a3556702e444a"
                    ]
                },
                {
                    "command": [
                        "move => _ [x [-> Hx]].",
                        "VernacExtend",
                        "b1b2cb7a3a617cba67460b4eca1f04de3c1cc716"
                    ]
                },
                {
                    "command": [
                        "by apply Hf.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "SF_sup_lx",
            "line_nb": 1652,
            "steps": [
                {
                    "command": [
                        "apply SF_lx_f2.",
                        "VernacExtend",
                        "03806ba675956df65a4424066595971be80349ee"
                    ]
                },
                {
                    "command": [
                        "now apply lt_O_Sn.",
                        "VernacExtend",
                        "7da5928fbfe3227dbdce67597fb518326f8c8a71"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "SF_sup_ly",
            "line_nb": 1656,
            "steps": [
                {
                    "command": [
                        "by apply SF_ly_f2.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "SF_inf_lx",
            "line_nb": 1660,
            "steps": [
                {
                    "command": [
                        "by apply SF_lx_f2, lt_O_Sn.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "SF_inf_ly",
            "line_nb": 1663,
            "steps": [
                {
                    "command": [
                        "by apply SF_ly_f2.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "SF_sup_bound",
            "line_nb": 1666,
            "steps": [
                {
                    "command": [
                        "rewrite /SF_sup_seq unif_part_bound => //.",
                        "VernacExtend",
                        "3c42b53d0efc26db114b00541ac5e7fcb29e6aeb"
                    ]
                },
                {
                    "command": [
                        "rewrite SF_rev_f2 ?revK //.",
                        "VernacExtend",
                        "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
                    ]
                },
                {
                    "command": [
                        "move => x y ; apply Sup_fct_bound.",
                        "VernacExtend",
                        "94ea6c97d8eeb14c7e886aab853c66f5c89d49e9"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "SF_inf_bound",
            "line_nb": 1671,
            "steps": [
                {
                    "command": [
                        "rewrite /SF_inf_seq unif_part_bound => //.",
                        "VernacExtend",
                        "3c42b53d0efc26db114b00541ac5e7fcb29e6aeb"
                    ]
                },
                {
                    "command": [
                        "rewrite SF_rev_f2 ?revK //.",
                        "VernacExtend",
                        "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
                    ]
                },
                {
                    "command": [
                        "move => x y ; apply Inf_fct_bound.",
                        "VernacExtend",
                        "7177cbe479a135881fa3da0287844901b25d23d7"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "SF_sup_fun_bound",
            "line_nb": 1678,
            "steps": [
                {
                    "command": [
                        "rewrite /SF_sup_fun ; case: (Rle_dec a b) => Hab ; case : (Rle_dec b a) => Hba //.",
                        "VernacExtend",
                        "1418099f654a9d12bdfd561bac86adb846b83bfd"
                    ]
                },
                {
                    "command": [
                        "by rewrite (Rle_antisym _ _ Hab Hba).",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "by contradict Hba ; apply Rlt_le, Rnot_le_lt.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "SF_inf_fun_bound",
            "line_nb": 1683,
            "steps": [
                {
                    "command": [
                        "rewrite /SF_inf_fun ; case: (Rle_dec a b) => Hab ; case : (Rle_dec b a) => Hba //.",
                        "VernacExtend",
                        "1418099f654a9d12bdfd561bac86adb846b83bfd"
                    ]
                },
                {
                    "command": [
                        "by rewrite (Rle_antisym _ _ Hab Hba).",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "by contradict Hba ; apply Rlt_le, Rnot_le_lt.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "SF_sup_fun_rw",
            "line_nb": 1688,
            "steps": [
                {
                    "command": [
                        "have Hab : (a <= b) ; [by apply Rle_trans with (1 := proj1 Hx), Hx | ].",
                        "VernacExtend",
                        "aba2b42bd7a87f88ac31bc37d93024dc60304d28"
                    ]
                },
                {
                    "command": [
                        "rewrite /SF_sup_fun /SF_sup_seq ; case: Rle_dec => // _.",
                        "VernacExtend",
                        "712d339e99ee17eb7d5033e19ac614eb3ca6b532"
                    ]
                },
                {
                    "command": [
                        "case: unif_part_nat => {Hx} [ [ i [Hx Hi] ] | Hx] ; simpl proj1_sig.",
                        "VernacExtend",
                        "df82625a5e4080596a437308dc84f9fbd8429810"
                    ]
                },
                {
                    "command": [
                        "case: (unif_part a b n) (unif_part_sort a b n Hab) i Hi x Hx => {a b Hab n} [| h s] Hs /= i Hi.",
                        "VernacExtend",
                        "e00fff71ff314c991514fc71c41a3556702e444a"
                    ]
                },
                {
                    "command": [
                        "by apply lt_n_O in Hi.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "case: (s) Hs (i) (lt_S_n _ _ Hi) => {s i Hi} [| h0 s] Hs /= i Hi.",
                        "VernacExtend",
                        "e00fff71ff314c991514fc71c41a3556702e444a"
                    ]
                },
                {
                    "command": [
                        "by apply lt_n_O in Hi.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "elim: (s) h h0 Hs (i) (lt_S_n _ _ Hi) => {s i Hi} [|h1 s IH] h h0 Hs /= i Hi x Hx.",
                        "VernacExtend",
                        "e686a1895f1799b840b76242f931100819a9ad6c"
                    ]
                },
                {
                    "command": [
                        "by apply lt_n_O in Hi.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "case: i Hx Hi => [|i]/= Hx Hi.",
                        "VernacExtend",
                        "e00fff71ff314c991514fc71c41a3556702e444a"
                    ]
                },
                {
                    "command": [
                        "rewrite /SF_fun /=.",
                        "VernacExtend",
                        "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
                    ]
                },
                {
                    "command": [
                        "case: Rlt_dec => [Hx0 | _ ].",
                        "VernacExtend",
                        "e00fff71ff314c991514fc71c41a3556702e444a"
                    ]
                },
                {
                    "command": [
                        "contradict Hx0 ; apply Rle_not_lt, Hx.",
                        "VernacExtend",
                        "6ef0a3a9b1268f2f6220e4bab19f7636dea7f0fb"
                    ]
                },
                {
                    "command": [
                        "case: Rlt_dec => // Hx0 ; contradict Hx0 ; apply Hx.",
                        "VernacExtend",
                        "9d65530bfb1cf960991db629d690aef4449ab950"
                    ]
                },
                {
                    "command": [
                        "rewrite -(IH h0 h1 (proj2 Hs) i (lt_S_n _ _ Hi) x Hx).",
                        "VernacExtend",
                        "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
                    ]
                },
                {
                    "command": [
                        "rewrite /SF_fun /= ; case: Rlt_dec => [ Hx0 | _ ] //.",
                        "VernacExtend",
                        "712d339e99ee17eb7d5033e19ac614eb3ca6b532"
                    ]
                },
                {
                    "command": [
                        "contradict Hx0 ; apply Rle_not_lt, Rle_trans with (1 := proj1 Hs), Rle_trans with (2 := proj1 Hx), (sorted_head [:: h0, h1 & s] _ (proj2 Hs)) ; simpl; intuition.",
                        "VernacExtend",
                        "ab94b46b476160afb4a29acd17e29cb3038f39c6"
                    ]
                },
                {
                    "command": [
                        "case: Rlt_dec => [ Hx0 | _ ] //.",
                        "VernacExtend",
                        "e00fff71ff314c991514fc71c41a3556702e444a"
                    ]
                },
                {
                    "command": [
                        "contradict Hx0 ; apply Rle_not_lt, Rle_trans with (2 := proj1 Hx), (sorted_head [:: h0, h1 & s] _ (proj2 Hs)) ; simpl; intuition.",
                        "VernacExtend",
                        "6066f9967bc32a601bcff8bea7194e9b9d571a65"
                    ]
                },
                {
                    "command": [
                        "move: x Hx.",
                        "VernacExtend",
                        "b1b2cb7a3a617cba67460b4eca1f04de3c1cc716"
                    ]
                },
                {
                    "command": [
                        "suff : (1 < size (unif_part a b n))%nat.",
                        "VernacExtend",
                        "d07fc8b2103f140554938023774bf3f75d04ba99"
                    ]
                },
                {
                    "command": [
                        "have: (n = size (unif_part a b n) - 2)%nat ; [ rewrite size_mkseq ; intuition | move => {3 5 8 10}->].",
                        "VernacExtend",
                        "f209effa942c517e17021281e6def5f80f0b740f"
                    ]
                },
                {
                    "command": [
                        "case: (unif_part a b n) (unif_part_sort a b n Hab) => {a b Hab n} [| h s] Hs /= Hi.",
                        "VernacExtend",
                        "e00fff71ff314c991514fc71c41a3556702e444a"
                    ]
                },
                {
                    "command": [
                        "by apply lt_n_O in Hi.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "case: s h Hs Hi => [| h0 s] h Hs /= Hi.",
                        "VernacExtend",
                        "e00fff71ff314c991514fc71c41a3556702e444a"
                    ]
                },
                {
                    "command": [
                        "by apply lt_irrefl in Hi.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "rewrite -minus_n_O ; elim: s h h0 Hs {Hi} => [| h1 s IH] h h0 Hs /= x Hx.",
                        "VernacExtend",
                        "44a8e3b453c9376c468b4e3e0046f5ac33e11d6d"
                    ]
                },
                {
                    "command": [
                        "rewrite /SF_fun /= ; case: Rlt_dec => [Hx0 | _].",
                        "VernacExtend",
                        "712d339e99ee17eb7d5033e19ac614eb3ca6b532"
                    ]
                },
                {
                    "command": [
                        "contradict Hx0 ; apply Rle_not_lt, Hx.",
                        "VernacExtend",
                        "6ef0a3a9b1268f2f6220e4bab19f7636dea7f0fb"
                    ]
                },
                {
                    "command": [
                        "case: Rle_dec => [| Hx0] // ; contradict Hx0 ; apply Hx.",
                        "VernacExtend",
                        "9d65530bfb1cf960991db629d690aef4449ab950"
                    ]
                },
                {
                    "command": [
                        "rewrite -(IH h0 h1 (proj2 Hs) x Hx).",
                        "VernacExtend",
                        "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
                    ]
                },
                {
                    "command": [
                        "rewrite /SF_fun /= ; case: Rlt_dec => [ Hx0 | _ ] //.",
                        "VernacExtend",
                        "712d339e99ee17eb7d5033e19ac614eb3ca6b532"
                    ]
                },
                {
                    "command": [
                        "contradict Hx0 ; apply Rle_not_lt, Rle_trans with (1 := proj1 Hs), Rle_trans with (2 := proj1 Hx), (sorted_head [:: h0, h1 & s] _ (proj2 Hs)) ; simpl; intuition.",
                        "VernacExtend",
                        "ab94b46b476160afb4a29acd17e29cb3038f39c6"
                    ]
                },
                {
                    "command": [
                        "case: Rlt_dec => [ Hx0 | _ ] //.",
                        "VernacExtend",
                        "e00fff71ff314c991514fc71c41a3556702e444a"
                    ]
                },
                {
                    "command": [
                        "contradict Hx0 ; apply Rle_not_lt, Rle_trans with (2 := proj1 Hx), (sorted_head [:: h0, h1 & s] _ (proj2 Hs)) ; simpl; intuition.",
                        "VernacExtend",
                        "6066f9967bc32a601bcff8bea7194e9b9d571a65"
                    ]
                },
                {
                    "command": [
                        "rewrite size_mkseq ; by apply lt_n_S, lt_O_Sn.",
                        "VernacExtend",
                        "f9e2aad1e70f1876566a77bd0af96f52b3b81520"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "SF_inf_fun_rw",
            "line_nb": 1726,
            "steps": [
                {
                    "command": [
                        "have Hab : (a <= b) ; [by apply Rle_trans with (1 := proj1 Hx), Hx | ].",
                        "VernacExtend",
                        "aba2b42bd7a87f88ac31bc37d93024dc60304d28"
                    ]
                },
                {
                    "command": [
                        "rewrite /SF_inf_fun /SF_inf_seq ; case: Rle_dec => // _.",
                        "VernacExtend",
                        "712d339e99ee17eb7d5033e19ac614eb3ca6b532"
                    ]
                },
                {
                    "command": [
                        "case: unif_part_nat => {Hx} [ [ i [Hx Hi] ] | Hx] ; simpl proj1_sig.",
                        "VernacExtend",
                        "df82625a5e4080596a437308dc84f9fbd8429810"
                    ]
                },
                {
                    "command": [
                        "case: (unif_part a b n) (unif_part_sort a b n Hab) i Hi x Hx => {a b Hab n} [| h s] Hs /= i Hi.",
                        "VernacExtend",
                        "e00fff71ff314c991514fc71c41a3556702e444a"
                    ]
                },
                {
                    "command": [
                        "by apply lt_n_O in Hi.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "case: (s) Hs (i) (lt_S_n _ _ Hi) => {s i Hi} [| h0 s] Hs /= i Hi.",
                        "VernacExtend",
                        "e00fff71ff314c991514fc71c41a3556702e444a"
                    ]
                },
                {
                    "command": [
                        "by apply lt_n_O in Hi.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "elim: (s) h h0 Hs (i) (lt_S_n _ _ Hi) => {s i Hi} [|h1 s IH] h h0 Hs /= i Hi x Hx.",
                        "VernacExtend",
                        "e686a1895f1799b840b76242f931100819a9ad6c"
                    ]
                },
                {
                    "command": [
                        "by apply lt_n_O in Hi.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "case: i Hx Hi => [|i]/= Hx Hi.",
                        "VernacExtend",
                        "e00fff71ff314c991514fc71c41a3556702e444a"
                    ]
                },
                {
                    "command": [
                        "rewrite /SF_fun /=.",
                        "VernacExtend",
                        "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
                    ]
                },
                {
                    "command": [
                        "case: Rlt_dec => [Hx0 | _ ].",
                        "VernacExtend",
                        "e00fff71ff314c991514fc71c41a3556702e444a"
                    ]
                },
                {
                    "command": [
                        "contradict Hx0 ; apply Rle_not_lt, Hx.",
                        "VernacExtend",
                        "6ef0a3a9b1268f2f6220e4bab19f7636dea7f0fb"
                    ]
                },
                {
                    "command": [
                        "case: Rlt_dec => // Hx0 ; contradict Hx0 ; apply Hx.",
                        "VernacExtend",
                        "9d65530bfb1cf960991db629d690aef4449ab950"
                    ]
                },
                {
                    "command": [
                        "rewrite -(IH h0 h1 (proj2 Hs) i (lt_S_n _ _ Hi) x Hx).",
                        "VernacExtend",
                        "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
                    ]
                },
                {
                    "command": [
                        "rewrite /SF_fun /= ; case: Rlt_dec => [ Hx0 | _ ] //.",
                        "VernacExtend",
                        "712d339e99ee17eb7d5033e19ac614eb3ca6b532"
                    ]
                },
                {
                    "command": [
                        "contradict Hx0 ; apply Rle_not_lt, Rle_trans with (1 := proj1 Hs), Rle_trans with (2 := proj1 Hx), (sorted_head [:: h0, h1 & s] _ (proj2 Hs)) ; simpl; intuition.",
                        "VernacExtend",
                        "ab94b46b476160afb4a29acd17e29cb3038f39c6"
                    ]
                },
                {
                    "command": [
                        "case: Rlt_dec => [ Hx0 | _ ] //.",
                        "VernacExtend",
                        "e00fff71ff314c991514fc71c41a3556702e444a"
                    ]
                },
                {
                    "command": [
                        "contradict Hx0 ; apply Rle_not_lt, Rle_trans with (2 := proj1 Hx), (sorted_head [:: h0, h1 & s] _ (proj2 Hs)) ; simpl; intuition.",
                        "VernacExtend",
                        "6066f9967bc32a601bcff8bea7194e9b9d571a65"
                    ]
                },
                {
                    "command": [
                        "move: x Hx.",
                        "VernacExtend",
                        "b1b2cb7a3a617cba67460b4eca1f04de3c1cc716"
                    ]
                },
                {
                    "command": [
                        "suff : (1 < size (unif_part a b n))%nat.",
                        "VernacExtend",
                        "d07fc8b2103f140554938023774bf3f75d04ba99"
                    ]
                },
                {
                    "command": [
                        "have: (n = size (unif_part a b n) - 2)%nat ; [ rewrite size_mkseq ; intuition | move => {3 5 8 10}->].",
                        "VernacExtend",
                        "f209effa942c517e17021281e6def5f80f0b740f"
                    ]
                },
                {
                    "command": [
                        "case: (unif_part a b n) (unif_part_sort a b n Hab) => {a b Hab n} [| h s] Hs /= Hi.",
                        "VernacExtend",
                        "e00fff71ff314c991514fc71c41a3556702e444a"
                    ]
                },
                {
                    "command": [
                        "by apply lt_n_O in Hi.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "case: s h Hs Hi => [| h0 s] h Hs /= Hi.",
                        "VernacExtend",
                        "e00fff71ff314c991514fc71c41a3556702e444a"
                    ]
                },
                {
                    "command": [
                        "by apply lt_irrefl in Hi.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "rewrite -minus_n_O ; elim: s h h0 Hs {Hi} => [| h1 s IH] h h0 Hs /= x Hx.",
                        "VernacExtend",
                        "44a8e3b453c9376c468b4e3e0046f5ac33e11d6d"
                    ]
                },
                {
                    "command": [
                        "rewrite /SF_fun /= ; case: Rlt_dec => [Hx0 | _].",
                        "VernacExtend",
                        "712d339e99ee17eb7d5033e19ac614eb3ca6b532"
                    ]
                },
                {
                    "command": [
                        "contradict Hx0 ; apply Rle_not_lt, Hx.",
                        "VernacExtend",
                        "6ef0a3a9b1268f2f6220e4bab19f7636dea7f0fb"
                    ]
                },
                {
                    "command": [
                        "case: Rle_dec => [| Hx0] // ; contradict Hx0 ; apply Hx.",
                        "VernacExtend",
                        "9d65530bfb1cf960991db629d690aef4449ab950"
                    ]
                },
                {
                    "command": [
                        "rewrite -(IH h0 h1 (proj2 Hs) x Hx).",
                        "VernacExtend",
                        "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
                    ]
                },
                {
                    "command": [
                        "rewrite /SF_fun /= ; case: Rlt_dec => [ Hx0 | _ ] //.",
                        "VernacExtend",
                        "712d339e99ee17eb7d5033e19ac614eb3ca6b532"
                    ]
                },
                {
                    "command": [
                        "contradict Hx0 ; apply Rle_not_lt, Rle_trans with (1 := proj1 Hs), Rle_trans with (2 := proj1 Hx), (sorted_head [:: h0, h1 & s] _ (proj2 Hs)) ; simpl; intuition.",
                        "VernacExtend",
                        "ab94b46b476160afb4a29acd17e29cb3038f39c6"
                    ]
                },
                {
                    "command": [
                        "case: Rlt_dec => [ Hx0 | _ ] //.",
                        "VernacExtend",
                        "e00fff71ff314c991514fc71c41a3556702e444a"
                    ]
                },
                {
                    "command": [
                        "contradict Hx0 ; apply Rle_not_lt, Rle_trans with (2 := proj1 Hx), (sorted_head [:: h0, h1 & s] _ (proj2 Hs)) ; simpl; intuition.",
                        "VernacExtend",
                        "6066f9967bc32a601bcff8bea7194e9b9d571a65"
                    ]
                },
                {
                    "command": [
                        "rewrite size_mkseq ; by apply lt_n_S, lt_O_Sn.",
                        "VernacExtend",
                        "f9e2aad1e70f1876566a77bd0af96f52b3b81520"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "SF_sup_r",
            "line_nb": 1821,
            "steps": [
                {
                    "command": [
                        "exists (fun x => real (SF_sup_fun f a b n x)) ; case : (Rle_dec a b) => Hab.",
                        "VernacExtend",
                        "3470300c310e32f3e70e0875b6f531b557fdc04d"
                    ]
                },
                {
                    "command": [
                        "exists (seq2Rlist (unif_part a b n)) ; exists (seq2Rlist (behead (pairmap (fun x y => real (Sup_fct f x y)) 0 (unif_part a b n)))) ; by apply ad_SF_sup_r.",
                        "VernacExtend",
                        "612de062a6eb2b47acf7c128f7c03cdb8576b3da"
                    ]
                },
                {
                    "command": [
                        "exists (seq2Rlist ((unif_part b a n))) ; exists (seq2Rlist (behead (pairmap (fun x y => real (Sup_fct f x y)) 0 (unif_part b a n)))) ; by apply ad_SF_sup_r.",
                        "VernacExtend",
                        "a05545140b69f148df003d0c862f758f8bb198af"
                    ]
                },
                {
                    "command": [
                        "Defined.",
                        "VernacEndProof",
                        "88c0be54a50df4bb90276c075406fe442428eb9c"
                    ]
                }
            ]
        },
        {
            "name": "SF_sup_subdiv",
            "line_nb": 1826,
            "steps": [
                {
                    "command": [
                        "rewrite /SF_sup_r ; case: (Rle_dec a b) => Hab //.",
                        "VernacExtend",
                        "712d339e99ee17eb7d5033e19ac614eb3ca6b532"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "SF_sup_subdiv_val",
            "line_nb": 1829,
            "steps": [
                {
                    "command": [
                        "rewrite /SF_sup_r ; case: (Rle_dec a b) => Hab //.",
                        "VernacExtend",
                        "712d339e99ee17eb7d5033e19ac614eb3ca6b532"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "SF_sup_r_bound",
            "line_nb": 1832,
            "steps": [
                {
                    "command": [
                        "move => x /= ; by rewrite SF_sup_fun_bound.",
                        "VernacExtend",
                        "c42ec967bffec70acce34c6295bd61fe6baf57b0"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "SF_inf_r",
            "line_nb": 1892,
            "steps": [
                {
                    "command": [
                        "exists (fun x => real (SF_inf_fun f a b n x)) ; case : (Rle_dec a b) => Hab.",
                        "VernacExtend",
                        "74a3c908fd2744152f76e3304a2b12e28f0b3bc7"
                    ]
                },
                {
                    "command": [
                        "exists (seq2Rlist (unif_part a b n)) ; exists (seq2Rlist (behead (pairmap (fun x y => real (Inf_fct f x y)) 0 (unif_part a b n)))) ; by apply ad_SF_inf_r.",
                        "VernacExtend",
                        "3608f5e82e4b48d7bf5f8a838122843a1e5313cc"
                    ]
                },
                {
                    "command": [
                        "exists (seq2Rlist ((unif_part b a n))) ; exists (seq2Rlist (behead (pairmap (fun x y => real (Inf_fct f x y)) 0 (unif_part b a n)))) ; by apply ad_SF_inf_r.",
                        "VernacExtend",
                        "6657a1afc0ab20909c72f12c64017c655d459f21"
                    ]
                },
                {
                    "command": [
                        "Defined.",
                        "VernacEndProof",
                        "88c0be54a50df4bb90276c075406fe442428eb9c"
                    ]
                }
            ]
        },
        {
            "name": "SF_inf_subdiv",
            "line_nb": 1897,
            "steps": [
                {
                    "command": [
                        "rewrite /SF_inf_r ; case: (Rle_dec a b) => Hab //.",
                        "VernacExtend",
                        "712d339e99ee17eb7d5033e19ac614eb3ca6b532"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "SF_inf_subdiv_val",
            "line_nb": 1900,
            "steps": [
                {
                    "command": [
                        "rewrite /SF_inf_r ; case: (Rle_dec a b) => Hab //.",
                        "VernacExtend",
                        "712d339e99ee17eb7d5033e19ac614eb3ca6b532"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "SF_inf_r_bound",
            "line_nb": 1903,
            "steps": [
                {
                    "command": [
                        "move => x /= ; by rewrite SF_inf_fun_bound.",
                        "VernacExtend",
                        "c42ec967bffec70acce34c6295bd61fe6baf57b0"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        }
    ]
}