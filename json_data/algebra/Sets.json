{
    "filename": "Sets.v",
    "coq_project": "algebra",
    "vernac_cmds": [
        [
            "Global Set Automatic Coercions Import.",
            "VernacSetOption",
            "94c85307196a35bac6e1f82fcbcc4d98c9b268b2"
        ],
        [
            "Global Set Asymmetric Patterns.",
            "VernacSetOption",
            "2cc91d0a437fbd1f49bf43960caf4a2b10040c6b"
        ],
        [
            "Set Implicit Arguments.",
            "VernacSetOption",
            "9e84ff8896f028601d8aded48c1d4aebe60aa584"
        ],
        [
            "Unset Strict Implicit.",
            "VernacUnsetOption",
            "2842adaf6959318f2042805935c46f513bdc0348"
        ],
        [
            "Section Sets1.",
            "VernacBeginSection",
            "cfa705972085413afb1445335fed41104b2c017c"
        ],
        [
            "Comments \"Basically, algebraic structures are sets, in which we talk about elements, belonging, equality,\" \"applications, equivalence relations, quotient sets, etc\".",
            "VernacComments",
            "0e258084e97463dff5aa48e82aeea35d318857d4"
        ],
        [
            "Comments \"Types in Coq are not well-suited to represent sets, because they cannot be quotiented\".",
            "VernacComments",
            "da5f03838ebb7b075ed629633ab41db821068db9"
        ],
        [
            "Comments \"We will define sets in Coq as types with an equivalence relation\".",
            "VernacComments",
            "85219d78e8298b6980df7f7c3ce5a0c81e364bf1"
        ],
        [
            "Comments \"First, we need some definitions on binary relations on types:\".",
            "VernacComments",
            "daf1181590ef6eba4dc2aef0d9f0b30aa5ac3d35"
        ],
        [
            "Section Relations.",
            "VernacBeginSection",
            "bf6f59f69467512bf8a23625ef392cd0002aa6be"
        ],
        [
            "Variable E : Type.",
            "VernacAssumption",
            "545a9003c270d556feaa901c19254a4e5875e626"
        ],
        [
            "Definition relation (E : Type) := E -> E -> Prop.",
            "VernacDefinition",
            "8ba0fefef496397fab818d9930bcc44ec43753b3"
        ],
        [
            "Definition app_rel (R : relation E) (x y : E) := R x y.",
            "VernacDefinition",
            "9bda7e2b6e118830bc7563a683a064704c3fd9ab"
        ],
        [
            "Definition reflexive (R : relation E) : Prop := forall x : E, app_rel R x x.",
            "VernacDefinition",
            "e7edf5a8dcb2d5909208aad9cf28f1e7cfeb0fa6"
        ],
        [
            "Definition symmetric (R : relation E) : Prop := forall x y : E, app_rel R x y -> app_rel R y x.",
            "VernacDefinition",
            "20a98b4973ee8e9d7bbe06aa4a28e5ea4b71aee4"
        ],
        [
            "Definition transitive (R : relation E) : Prop := forall x y z : E, app_rel R x y -> app_rel R y z -> app_rel R x z.",
            "VernacDefinition",
            "e50bc7608dbea8980d05391d50b187c18bc6bc3f"
        ],
        [
            "Comments \"A partial equivalence on\" E \" is a relation which is transitive and symmetric:\".",
            "VernacComments",
            "9b9078c07c57f013918062e33967fda7ad04a6b4"
        ],
        [
            "Definition partial_equivalence (R : relation E) : Prop := transitive R /\\ symmetric R.",
            "VernacDefinition",
            "d12c70528423dd5c258a5718d5f9a83e023e77b0"
        ],
        [
            "Comments \"An equivalence relation is reflexive, symmetric and transitive:\".",
            "VernacComments",
            "9e369dcb743a36fbf0ba908e269b8de5b0eaa442"
        ],
        [
            "Definition equivalence (R : relation E) : Prop := reflexive R /\\ partial_equivalence R.",
            "VernacDefinition",
            "7f516c48eb898d7fc4318979c19cc7036de88581"
        ],
        [
            "Comments \"Some immediate properties:\".",
            "VernacComments",
            "c1210b1cfe89c9fbb8dd1446330a626932648617"
        ],
        [
            "Lemma equiv_refl : forall R : relation E, equivalence R -> reflexive R.",
            "VernacStartTheoremProof",
            "3a6ce32c7db6beb9f2c1ef90a741cb8cc7db97c0"
        ],
        [
            "compute in |- *.",
            "VernacExtend",
            "7a532ab38e33f38a5daf661f4883cc26dfdfdef7"
        ],
        [
            "tauto.",
            "VernacExtend",
            "9bfafe84fb6724789bdf6cfd21cd721dd63fdabd"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma equiv_sym : forall R : relation E, equivalence R -> symmetric R.",
            "VernacStartTheoremProof",
            "6da59ef46a506e8bdde1c2fcec8dfa11b83df810"
        ],
        [
            "compute in |- *; tauto.",
            "VernacExtend",
            "8be54daefe416fc7c11356ee064e22fc37cb688c"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma equiv_trans : forall R : relation E, equivalence R -> transitive R.",
            "VernacStartTheoremProof",
            "791763fefe2ea8e2f57712de23d04ba83789a988"
        ],
        [
            "compute in |- *; tauto.",
            "VernacExtend",
            "8be54daefe416fc7c11356ee064e22fc37cb688c"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "End Relations.",
            "VernacEndSegment",
            "402e09534602736b8a1ac1f70d2548946943a832"
        ],
        [
            "Hint Unfold reflexive transitive symmetric partial_equivalence equivalence: algebra.",
            "VernacHints",
            "b42316f4489b9b0c76eba7c08203982e8dc81878"
        ],
        [
            "Hint Resolve equiv_refl equiv_sym equiv_trans: algebra.",
            "VernacHints",
            "7c28658eee99356b30377d5555ad12cfdfbb4596"
        ],
        [
            "Comments \"Then we define a dedicated structure to represent sets:\".",
            "VernacComments",
            "2913de584141f41365b134aaba390c8e03cd81e8"
        ],
        [
            "Record Setoid : Type := {Carrier :> Type; Equal : relation Carrier; Prf_equiv :> equivalence Equal}.",
            "VernacInductive",
            "32b3a9d62568c95330d3da09c7dd28a9426484c7"
        ],
        [
            "Hint Resolve Prf_equiv: algebra.",
            "VernacHints",
            "7d0bdac2c876cd13e48219b2bff215167bc4d355"
        ],
        [
            "Comments \"A set is then given by a type (for its elements), a binary relation\" \"and a proof that this relation is an equivalence relation\".",
            "VernacComments",
            "43af28a71b327d6c11eddfcff1f5ab6ecf818c77"
        ],
        [
            "Comments \"We will write\" (Equal x y) \"for the equality of two elements of a set\".",
            "VernacComments",
            "a72f90b5f03107cee2dcf1fc18f2236897090183"
        ],
        [
            "Lemma Refl : forall (E : Setoid) (x : E), Equal x x.",
            "VernacStartTheoremProof",
            "d8e4a067dc699c9d94089a75a9ce04242f4b7dd7"
        ],
        [
            "intros E; try assumption.",
            "VernacExtend",
            "e478e84a6462d0df5eb4d5537ab1a669dc68053f"
        ],
        [
            "cut (reflexive (Equal (s:=E))); auto with algebra.",
            "VernacExtend",
            "f305877a471634da8a311b3f6bb87f06aee5a5cb"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma Sym : forall (E : Setoid) (x y : E), Equal x y -> Equal y x.",
            "VernacStartTheoremProof",
            "07fda2f94ef7f165fa1b9865e8924d7e9a178c50"
        ],
        [
            "intros E; try assumption.",
            "VernacExtend",
            "e478e84a6462d0df5eb4d5537ab1a669dc68053f"
        ],
        [
            "cut (symmetric (Equal (s:=E))); auto with algebra.",
            "VernacExtend",
            "52fdaa90dcab31bed9cf61ab85edf5bfb75168af"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma Trans : forall (E : Setoid) (x y z : E), Equal x y -> Equal y z -> Equal x z.",
            "VernacStartTheoremProof",
            "aa54f115c3e26a29511516658c5f71bf662de21f"
        ],
        [
            "intros E; try assumption.",
            "VernacExtend",
            "e478e84a6462d0df5eb4d5537ab1a669dc68053f"
        ],
        [
            "cut (transitive (Equal (s:=E))); auto with algebra.",
            "VernacExtend",
            "d11fc8f5a8c1ab2528bf882472f06c49da3009dd"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Hint Resolve Refl: algebra.",
            "VernacHints",
            "9e7a6d84d7d6d85f0d5f11e28c83a2f3a6076f28"
        ],
        [
            "Hint Immediate Sym: algebra.",
            "VernacHints",
            "61ae9c2d9e6faaee6e2044e66810e07cae28e0b9"
        ],
        [
            "Comments \"Every type in Coq can be seen as a set, with the Leibnitz equality:\".",
            "VernacComments",
            "4920f573b76219c0beb9cfcfe4fadc133afe7fec"
        ],
        [
            "Let eqT_equiv : forall A : Type, equivalence (eq (A:=A)).",
            "VernacDefinition",
            "177cbbf950e82c7670b89f8986311d33be9a472c"
        ],
        [
            "intros A; try assumption.",
            "VernacExtend",
            "bee08795c86464c42c0359ec8226a130c5f630d4"
        ],
        [
            "red in |- *.",
            "VernacExtend",
            "95a3fb9e13ce19fdc8e335912fb83e57a9512b14"
        ],
        [
            "split; [ try assumption | idtac ].",
            "VernacExtend",
            "2f3e384e84efa246ea96d2db4b31f7d148a7455c"
        ],
        [
            "red in |- *.",
            "VernacExtend",
            "95a3fb9e13ce19fdc8e335912fb83e57a9512b14"
        ],
        [
            "unfold app_rel in |- *; auto with algebra.",
            "VernacExtend",
            "3d80ab120d53dbefed2aa458ec9690e2f80d9cf9"
        ],
        [
            "red in |- *.",
            "VernacExtend",
            "95a3fb9e13ce19fdc8e335912fb83e57a9512b14"
        ],
        [
            "split; [ try assumption | idtac ].",
            "VernacExtend",
            "2f3e384e84efa246ea96d2db4b31f7d148a7455c"
        ],
        [
            "red in |- *.",
            "VernacExtend",
            "95a3fb9e13ce19fdc8e335912fb83e57a9512b14"
        ],
        [
            "unfold app_rel in |- *; auto with algebra.",
            "VernacExtend",
            "3d80ab120d53dbefed2aa458ec9690e2f80d9cf9"
        ],
        [
            "intros x y z H' H'0; try assumption.",
            "VernacExtend",
            "92486dfbaec6209765e08194fc2670eff8aef754"
        ],
        [
            "rewrite H'; auto with algebra.",
            "VernacExtend",
            "7cc60dde6b2344e1ba918efa884f9497bb03cf5f"
        ],
        [
            "red in |- *.",
            "VernacExtend",
            "95a3fb9e13ce19fdc8e335912fb83e57a9512b14"
        ],
        [
            "unfold app_rel in |- *; auto with algebra.",
            "VernacExtend",
            "3d80ab120d53dbefed2aa458ec9690e2f80d9cf9"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Definition Leibnitz_set (A : Type) : Setoid := Build_Setoid (eqT_equiv A).",
            "VernacDefinition",
            "ead28c4f4eefbe020870b01f41d9551616593d10"
        ],
        [
            "Lemma Leibnitz_set_prop : forall (A : Type) (x y : Leibnitz_set A), Equal x y -> x = y.",
            "VernacStartTheoremProof",
            "1ae8b4100c2d3f0efdc6e17a2069b12c972ce143"
        ],
        [
            "auto with algebra.",
            "VernacExtend",
            "2a8b2ac72ff20b5f342f7b76f72f9b539e5a10f0"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma Leibnitz_set_prop_rev : forall (A : Type) (x y : Leibnitz_set A), x = y -> Equal x y.",
            "VernacStartTheoremProof",
            "5b2e9256b23eecaa0c1a5199a9ecd16c7c2a2003"
        ],
        [
            "auto with algebra.",
            "VernacExtend",
            "2a8b2ac72ff20b5f342f7b76f72f9b539e5a10f0"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Section Quotient1.",
            "VernacBeginSection",
            "4361522c69bcda3b8308b6ab45ea8dde2d80d3ea"
        ],
        [
            "Comments \"We can now define quotient sets, using equivalence relations on sets\".",
            "VernacComments",
            "03764d2f9fd3fda7baea2376a083d0ffa9d1aa03"
        ],
        [
            "Comments \"A binary relation on a set is a binary relation on its carrier, which is compatible with equality:\".",
            "VernacComments",
            "464328b98682ae077f1b25d107208ac39439e51e"
        ],
        [
            "Variable E : Setoid.",
            "VernacAssumption",
            "cafb1870f48a7785473ed62f8eb64582fbbe308d"
        ],
        [
            "Definition rel_compatible (R : relation E) : Prop := forall x x' y y' : E, Equal x x' -> Equal y y' -> app_rel R x y -> app_rel R x' y'.",
            "VernacDefinition",
            "918f12af74b81ec6b4d597a32b38e73cc7d79151"
        ],
        [
            "Record Relation : Type := {Rel_fun :> relation E; Rel_compatible_prf : rel_compatible Rel_fun}.",
            "VernacInductive",
            "9c1013f68fe421b184a5cacd540e91594ed7afa5"
        ],
        [
            "Lemma Rel_comp : forall (R : Relation) (x x' y y' : E), Equal x x' -> Equal y y' -> app_rel R x y -> app_rel R x' y'.",
            "VernacStartTheoremProof",
            "f1c03dbe0391890cd63167a1f595729a89b61c82"
        ],
        [
            "intros R; try assumption.",
            "VernacExtend",
            "743dee39342b0d94b8f08f0bd6f30c1fc5dd8604"
        ],
        [
            "exact (Rel_compatible_prf (r:=R)).",
            "VernacExtend",
            "a6d955de003a227ad11e677c6c8860084dbf5e11"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Hint Resolve Rel_comp: algebra.",
            "VernacHints",
            "e113a175f3ef4481c4d6a43cd98a4eb7415f0096"
        ],
        [
            "Variable R : Relation.",
            "VernacAssumption",
            "aee3c7da53979a374754941b6dcdaf0f8b1ac105"
        ],
        [
            "Hypothesis R_equiv : equivalence R.",
            "VernacAssumption",
            "149768e79cc7f794fc4b9eb8f5cee1c493db4d89"
        ],
        [
            "Set Strict Implicit.",
            "VernacSetOption",
            "6b94f70716dd2a2fc34140a20b87bb0e87225ff4"
        ],
        [
            "Unset Implicit Arguments.",
            "VernacUnsetOption",
            "cacc0f023301fae157e1bbb31e84419045fc8198"
        ],
        [
            "Definition quotient : Setoid := Build_Setoid R_equiv.",
            "VernacDefinition",
            "3d20f60d1891f92353015225dac879c1eebc493c"
        ],
        [
            "Set Implicit Arguments.",
            "VernacSetOption",
            "9e84ff8896f028601d8aded48c1d4aebe60aa584"
        ],
        [
            "Unset Strict Implicit.",
            "VernacUnsetOption",
            "2842adaf6959318f2042805935c46f513bdc0348"
        ],
        [
            "End Quotient1.",
            "VernacEndSegment",
            "ee0aebf08e5885be2ad62a7cc9a4bfa8e361fdc2"
        ],
        [
            "Section Maps1.",
            "VernacBeginSection",
            "e540e0ead02bb726d6aa38936833c6dd188fcd48"
        ],
        [
            "Comments \"Maps between two sets are functions which are compatible with equalities:\".",
            "VernacComments",
            "94f0ecda2f427b93ec4027f4b302e3838a32a1b6"
        ],
        [
            "Section Maps1_1.",
            "VernacBeginSection",
            "b9276eb56690dace4c28525e0a07e85db0aefa1a"
        ],
        [
            "Variable A B : Setoid.",
            "VernacAssumption",
            "c71dda629bc97bfaca45ab4606f4dcc1b96246a5"
        ],
        [
            "Definition fun_compatible (f : A -> B) : Prop := forall x y : A, Equal x y -> Equal (f x) (f y).",
            "VernacDefinition",
            "64da7e8977ca9bffc939e89d771623a809212d03"
        ],
        [
            "Record Map : Type := {Ap :> A -> B; Map_compatible_prf :> fun_compatible Ap:Prop}.",
            "VernacInductive",
            "202d850cb175065603e9f516a9c6291d4f912de3"
        ],
        [
            "Comments \"Two maps are equal when they have the same values:\".",
            "VernacComments",
            "2946086dd95f27e9fa1d69e16b6fdf0ee80e6232"
        ],
        [
            "Definition Map_eq (f g : Map) : Prop := forall x : A, Equal (f x) (g x).",
            "VernacDefinition",
            "52d66c2d3543d98e1b93ad8d6956b2dcf50dc6fb"
        ],
        [
            "Let Map_eq_equiv : equivalence Map_eq.",
            "VernacDefinition",
            "e610cee6831d8876a4607b416ec1fc6a399613f0"
        ],
        [
            "red in |- *.",
            "VernacExtend",
            "95a3fb9e13ce19fdc8e335912fb83e57a9512b14"
        ],
        [
            "split; [ try assumption | idtac ].",
            "VernacExtend",
            "2f3e384e84efa246ea96d2db4b31f7d148a7455c"
        ],
        [
            "red in |- *.",
            "VernacExtend",
            "95a3fb9e13ce19fdc8e335912fb83e57a9512b14"
        ],
        [
            "unfold Map_eq, app_rel in |- *; simpl in |- *; auto with algebra.",
            "VernacExtend",
            "6fea19722636a543947f30e1e8c7776a5488c65a"
        ],
        [
            "red in |- *.",
            "VernacExtend",
            "95a3fb9e13ce19fdc8e335912fb83e57a9512b14"
        ],
        [
            "split; [ try assumption | idtac ].",
            "VernacExtend",
            "2f3e384e84efa246ea96d2db4b31f7d148a7455c"
        ],
        [
            "red in |- *.",
            "VernacExtend",
            "95a3fb9e13ce19fdc8e335912fb83e57a9512b14"
        ],
        [
            "unfold Map_eq, app_rel in |- *; simpl in |- *; auto with algebra.",
            "VernacExtend",
            "6fea19722636a543947f30e1e8c7776a5488c65a"
        ],
        [
            "intros x y z H' H'0 x0; try assumption.",
            "VernacExtend",
            "255f65fbd5e7d695d63d511e94350f9a2bac8c91"
        ],
        [
            "apply Trans with (y x0); auto with algebra.",
            "VernacExtend",
            "441757e7c4c4f8f630b1c050b325252bd2f83168"
        ],
        [
            "red in |- *.",
            "VernacExtend",
            "95a3fb9e13ce19fdc8e335912fb83e57a9512b14"
        ],
        [
            "unfold Map_eq, app_rel in |- *; simpl in |- *; auto with algebra.",
            "VernacExtend",
            "6fea19722636a543947f30e1e8c7776a5488c65a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Definition MAP : Setoid := Build_Setoid Map_eq_equiv.",
            "VernacDefinition",
            "e9ff6093832e0d415b77d90b1aa80fa36b697322"
        ],
        [
            "Comments \"We note\" (MAP A B) \"the set of maps between\" A \"and\" B.",
            "VernacComments",
            "c9836c3b0ccb0b1306ec4bac768fbec827bf659a"
        ],
        [
            "End Maps1_1.",
            "VernacEndSegment",
            "cdca6fee495fd46200a28b1ca54fb1a168904bf3"
        ],
        [
            "Comments \"Some immediate properties of maps:\".",
            "VernacComments",
            "3bc922f0a255ba2397a78f0980e4e9c71659f34d"
        ],
        [
            "Lemma Ap_comp : forall (A B : Setoid) (f g : MAP A B) (x y : A), Equal x y -> Equal f g -> Equal (f x) (g y).",
            "VernacStartTheoremProof",
            "efbc7c8f1e08c5def6591ba23f5038022c8731d7"
        ],
        [
            "intros A B f g x y H' H'0; try assumption.",
            "VernacExtend",
            "4cf2401b69a84ddc19bcde7be6ee27d8e66689d8"
        ],
        [
            "apply Trans with (f y).",
            "VernacExtend",
            "ec809cbadcc85e63b023c19337f9f7fc9661d5fb"
        ],
        [
            "apply (Map_compatible_prf f); auto with algebra.",
            "VernacExtend",
            "90e4eda7bef66b54c00a3c5141f12511f4b3f090"
        ],
        [
            "simpl in H'0.",
            "VernacExtend",
            "4d1362de2d02d4096d88255ad67ea468de03b32d"
        ],
        [
            "unfold Map_eq in H'0.",
            "VernacExtend",
            "b3f7f3c057a954265419702ab0889167a80265d5"
        ],
        [
            "auto with algebra.",
            "VernacExtend",
            "2a8b2ac72ff20b5f342f7b76f72f9b539e5a10f0"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Hint Resolve Ap_comp: algebra.",
            "VernacHints",
            "e869e1c69711c79796df80389334b16680be431b"
        ],
        [
            "Lemma map_ext : forall (A B : Setoid) (f g : MAP A B), (forall x : A, Equal (f x) (g x)) -> Equal f g.",
            "VernacStartTheoremProof",
            "5708e65bc5e3ede8554184fe3a901cbd3db07ea1"
        ],
        [
            "simpl in |- *.",
            "VernacExtend",
            "1b93169f4cf876d207c1fab22a2347202ab48d85"
        ],
        [
            "unfold Map_eq in |- *.",
            "VernacExtend",
            "98c98e127e6526be1bcf7fe2241acd7d7b875a39"
        ],
        [
            "auto with algebra.",
            "VernacExtend",
            "2a8b2ac72ff20b5f342f7b76f72f9b539e5a10f0"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Hint Resolve map_ext: algebra.",
            "VernacHints",
            "5dc9ab1b89df783d4911784a72eafc0be9174ada"
        ],
        [
            "Section Maps1_2.",
            "VernacBeginSection",
            "931acbc112de5fc7f44e40bebddb61e6a125d657"
        ],
        [
            "Comments \"We define now injections, surjections and bijections.\".",
            "VernacComments",
            "ed6054da08a09ced707e2b4919c7721256c58faa"
        ],
        [
            "Variable A B : Setoid.",
            "VernacAssumption",
            "c71dda629bc97bfaca45ab4606f4dcc1b96246a5"
        ],
        [
            "Definition injective (f : MAP A B) : Prop := forall x y : A, Equal (f x) (f y) -> Equal x y.",
            "VernacDefinition",
            "3f5839171e21a1e5d11405bad96a053f65b5a08c"
        ],
        [
            "Definition surjective (f : MAP A B) : Prop := forall y : B, exists x : A, Equal y (f x).",
            "VernacDefinition",
            "ad40f28118d4edff109ab2328477b01b5e5c4159"
        ],
        [
            "Definition bijective (f : MAP A B) : Prop := injective f /\\ surjective f.",
            "VernacDefinition",
            "36b534ed6f38c2ff342d57c27373aded2ecd4887"
        ],
        [
            "End Maps1_2.",
            "VernacEndSegment",
            "25d7af3f6815f3401dacb636375c6f7e8f7b7d95"
        ],
        [
            "Comments \"These definitions are coherent with equality of maps:\".",
            "VernacComments",
            "4d050d3a50b5e254a30e14a4ba5e110f01636402"
        ],
        [
            "Lemma injective_comp : forall (A B : Setoid) (f f' : MAP A B), injective f -> Equal f f' -> injective f'.",
            "VernacStartTheoremProof",
            "179fad8692cbb56e22aecf4416a8daa000b07a8f"
        ],
        [
            "unfold injective in |- *.",
            "VernacExtend",
            "9c517f814102c09f8923135c0ed56233bff984fa"
        ],
        [
            "intros A B f f' H' H'0 x y H'1; try assumption.",
            "VernacExtend",
            "357317847f9bc98ff692ef626c63ef12d59983a9"
        ],
        [
            "apply H'.",
            "VernacExtend",
            "b9f7b1afd5784d2a6d1eac6189a3bdc5f0119ad0"
        ],
        [
            "apply Trans with (Ap f' x); auto with algebra.",
            "VernacExtend",
            "9fb68c621d4be972334ba6e5f93caf05498c9caf"
        ],
        [
            "apply Trans with (Ap f' y); auto with algebra.",
            "VernacExtend",
            "39e4f263d12c386ae4ff658ecb6ad91f4db6c833"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma surjective_comp : forall (A B : Setoid) (f f' : MAP A B), surjective f -> Equal f f' -> surjective f'.",
            "VernacStartTheoremProof",
            "d213816b39a634610d90d36476ca35aa17f94a21"
        ],
        [
            "unfold surjective in |- *.",
            "VernacExtend",
            "6e1c3a443cb19cb2371ce180643bf7942067e35a"
        ],
        [
            "intros A B f f' H' H'0 y; try assumption.",
            "VernacExtend",
            "9998087c2ca8d29adc3fca6a2c34a27c59a3d982"
        ],
        [
            "elim (H' y); intros x E; try exact E.",
            "VernacExtend",
            "d68e36c956ecf3ced5f4efa4904b3eb66f36ed99"
        ],
        [
            "exists x; try assumption.",
            "VernacExtend",
            "a251c410f0ab72130a5a312ded511c093841a93c"
        ],
        [
            "apply Trans with (Ap f x); auto with algebra.",
            "VernacExtend",
            "02cf64c07de1d12d18c6ab7e1c90a6d51a38d8e8"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma bijective_comp : forall (A B : Setoid) (f f' : MAP A B), bijective f -> Equal f f' -> bijective f'.",
            "VernacStartTheoremProof",
            "37971ee8b4f9423d008092173da47ed9420e6ff0"
        ],
        [
            "unfold bijective in |- *.",
            "VernacExtend",
            "b3d740725ad23cb34982d3f490de23a687cb4cdd"
        ],
        [
            "intros A B f f' H' H'0; try assumption.",
            "VernacExtend",
            "cc9eedde72639b8a52a3cf5ff0a5a82cf6796a31"
        ],
        [
            "split; [ try assumption | idtac ].",
            "VernacExtend",
            "2f3e384e84efa246ea96d2db4b31f7d148a7455c"
        ],
        [
            "elim H'; intros H'1 H'2; try exact H'1; clear H'.",
            "VernacExtend",
            "8aae0bbb7de07da855200960bd16ac82ded68d2d"
        ],
        [
            "apply injective_comp with (f := f); auto with algebra.",
            "VernacExtend",
            "3ad2b66a0db807c73f5d8a78661421e4ef248f22"
        ],
        [
            "elim H'; intros H'1 H'2; try exact H'2; clear H'.",
            "VernacExtend",
            "95f2cbf46697210c2d7c112175e3b4e95fdfb9c5"
        ],
        [
            "apply surjective_comp with (f := f); auto with algebra.",
            "VernacExtend",
            "5316d1d72de122eb52702aa2c3fcfb281979b60e"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Comments \"Trivialities:\".",
            "VernacComments",
            "9957f590b461345f4cfc388fe8f5317de40fa087"
        ],
        [
            "Lemma bijective_injective : forall (A B : Setoid) (f : MAP A B), bijective f -> injective f.",
            "VernacStartTheoremProof",
            "ad3365e3fe54fae53905cc8631a18d74a9fdc523"
        ],
        [
            "intros A B f H'; red in H'; auto with algebra.",
            "VernacExtend",
            "cf56ebd28a6609ecdd21ea4b26ee73edf4de19e5"
        ],
        [
            "elim H'; auto with algebra.",
            "VernacExtend",
            "dc8c9058bb9849e8858371cb244ec5fbff9d9ec0"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Hint Resolve bijective_injective: algebra.",
            "VernacHints",
            "4174999bb30b0bdd16b99257aeea61c972078206"
        ],
        [
            "Lemma bijective_surjective : forall (A B : Setoid) (f : MAP A B), bijective f -> surjective f.",
            "VernacStartTheoremProof",
            "87212dc6a1bec9b87a8f25719bbc70ad289bfc08"
        ],
        [
            "intros A B f H'; red in H'; auto with algebra.",
            "VernacExtend",
            "cf56ebd28a6609ecdd21ea4b26ee73edf4de19e5"
        ],
        [
            "elim H'; auto with algebra.",
            "VernacExtend",
            "dc8c9058bb9849e8858371cb244ec5fbff9d9ec0"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Hint Resolve bijective_surjective: algebra.",
            "VernacHints",
            "8056271adc2e1d7e62935047ba2825bb0d8751f7"
        ],
        [
            "Set Strict Implicit.",
            "VernacSetOption",
            "6b94f70716dd2a2fc34140a20b87bb0e87225ff4"
        ],
        [
            "Unset Implicit Arguments.",
            "VernacUnsetOption",
            "cacc0f023301fae157e1bbb31e84419045fc8198"
        ],
        [
            "Definition surj_set_quo : forall (E : Setoid) (R : Relation E) (p : equivalence R), MAP E (quotient E R p).",
            "VernacDefinition",
            "4ce6fa57d6056e7879a1f954a0af3abef2cfa869"
        ],
        [
            "intros E R p; try assumption.",
            "VernacExtend",
            "1b160b2c111e99a92216be2c67ca7fbbcfb24099"
        ],
        [
            "apply (Build_Map (A:=E) (B:=quotient E R p) (Ap:=fun x : E => x)).",
            "VernacExtend",
            "33d9c5d5274671360df2e25efcf8f2c7c4ef67ab"
        ],
        [
            "generalize p; clear p.",
            "VernacExtend",
            "b58f7ce2df24db72cafbc0d115c373e1427902b5"
        ],
        [
            "elim R.",
            "VernacExtend",
            "b07ecde0d5221cd615bde795002046a25fb03700"
        ],
        [
            "intros Rel_fun' Rel_compatible_prf0 p; try assumption.",
            "VernacExtend",
            "493c5f9c78a17a695443592a390bc15eca2414b6"
        ],
        [
            "red in |- *.",
            "VernacExtend",
            "95a3fb9e13ce19fdc8e335912fb83e57a9512b14"
        ],
        [
            "red in Rel_compatible_prf0.",
            "VernacExtend",
            "9f90a409a26bd6605525b7448f58676ef0bcc5ff"
        ],
        [
            "intros x y H'; try assumption.",
            "VernacExtend",
            "fbcf20f9e721db2a6aa9129fd945d80367dbafda"
        ],
        [
            "simpl in |- *.",
            "VernacExtend",
            "1b93169f4cf876d207c1fab22a2347202ab48d85"
        ],
        [
            "unfold app_rel in Rel_compatible_prf0.",
            "VernacExtend",
            "8106145187a5ec8a8554e16e3c7450190581e8e4"
        ],
        [
            "apply Rel_compatible_prf0 with (x := x) (y := x); auto with algebra.",
            "VernacExtend",
            "09fa6d7be053a5f8ba0b5cc6ec8dd47ced5edd80"
        ],
        [
            "elim p.",
            "VernacExtend",
            "6c779b9e37b157f8482c780f6aa47ea385660887"
        ],
        [
            "intros H'0 H'1; try assumption.",
            "VernacExtend",
            "ba8e9014a42e521d7d349ed66495f52da0acbd31"
        ],
        [
            "simpl in H'0.",
            "VernacExtend",
            "4d1362de2d02d4096d88255ad67ea468de03b32d"
        ],
        [
            "red in H'0.",
            "VernacExtend",
            "d5049e9647c88c352fa78e07b8260e57ba8ee09f"
        ],
        [
            "unfold app_rel in H'0.",
            "VernacExtend",
            "4467c49c53dd364973762ec21121ce2b2c12208c"
        ],
        [
            "auto with algebra.",
            "VernacExtend",
            "2a8b2ac72ff20b5f342f7b76f72f9b539e5a10f0"
        ],
        [
            "Defined.",
            "VernacEndProof",
            "88c0be54a50df4bb90276c075406fe442428eb9c"
        ],
        [
            "Set Implicit Arguments.",
            "VernacSetOption",
            "9e84ff8896f028601d8aded48c1d4aebe60aa584"
        ],
        [
            "Unset Strict Implicit.",
            "VernacUnsetOption",
            "2842adaf6959318f2042805935c46f513bdc0348"
        ],
        [
            "Lemma surj_set_quo_surjective : forall (E : Setoid) (R : Relation E) (p : equivalence R), surjective (surj_set_quo E R p).",
            "VernacStartTheoremProof",
            "135161113d18a2694805008cbdbd42ffaa85630b"
        ],
        [
            "intros E R p; try assumption.",
            "VernacExtend",
            "1b160b2c111e99a92216be2c67ca7fbbcfb24099"
        ],
        [
            "red in |- *.",
            "VernacExtend",
            "95a3fb9e13ce19fdc8e335912fb83e57a9512b14"
        ],
        [
            "intros y; exists y; try assumption.",
            "VernacExtend",
            "4ac15b3444a8f333687ecae80f55eb56aaae257d"
        ],
        [
            "simpl in |- *.",
            "VernacExtend",
            "1b93169f4cf876d207c1fab22a2347202ab48d85"
        ],
        [
            "elim p.",
            "VernacExtend",
            "6c779b9e37b157f8482c780f6aa47ea385660887"
        ],
        [
            "intros H'; red in H'.",
            "VernacExtend",
            "5628143996864dae4052e86719a5f6654c3edf8b"
        ],
        [
            "unfold app_rel in H'.",
            "VernacExtend",
            "07b6b3743fcdc3620f91e1661c3aa5c03b46041e"
        ],
        [
            "auto with algebra.",
            "VernacExtend",
            "2a8b2ac72ff20b5f342f7b76f72f9b539e5a10f0"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Section Maps1_3.",
            "VernacBeginSection",
            "5f84d0439bfc0ee79b6e6ea00b438d61f8267a36"
        ],
        [
            "Comments \"We define the composition of maps:\".",
            "VernacComments",
            "aa3d358904820c1f12534e03563995b0934c14ea"
        ],
        [
            "Variable E F G : Setoid.",
            "VernacAssumption",
            "01f5323256a1d3d99a95593030f945fc9bede33e"
        ],
        [
            "Variable g : MAP F G.",
            "VernacAssumption",
            "b194300d5d2a203745f506d58da1e056f3fd17e5"
        ],
        [
            "Variable f : MAP E F.",
            "VernacAssumption",
            "0ec81e8c49c9e3f9b380a4396344354dec499939"
        ],
        [
            "Comments \"First, we define the composition of the functions associated to two maps:\" f \"and\" g.",
            "VernacComments",
            "8cb02e2bf65a392a56c079cfe104ba187b16a46a"
        ],
        [
            "Definition comp_map_fun (x : E) := g (f x).",
            "VernacDefinition",
            "9a851a73d11823f011c838be6a960ecf7c1b3d4a"
        ],
        [
            "Comments \"Then, we proof that the result is compatible with equality:\".",
            "VernacComments",
            "7c40ced50f997fc7dac487a9616437bd6c6276f8"
        ],
        [
            "Lemma comp_map_fun_compatible : fun_compatible comp_map_fun.",
            "VernacStartTheoremProof",
            "113367bc2e5a0cfb79e13e05e260fcf002b8003d"
        ],
        [
            "red in |- *.",
            "VernacExtend",
            "95a3fb9e13ce19fdc8e335912fb83e57a9512b14"
        ],
        [
            "unfold comp_map_fun in |- *.",
            "VernacExtend",
            "bf09c747c7184fd7f9e6e096f3a9853a912f8318"
        ],
        [
            "auto with algebra.",
            "VernacExtend",
            "2a8b2ac72ff20b5f342f7b76f72f9b539e5a10f0"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Comments \"With this result, we can build the composed map:\".",
            "VernacComments",
            "f84127ad631259a0b7dd380d5181770ba3141d55"
        ],
        [
            "Definition comp_map_map : MAP E G := Build_Map comp_map_fun_compatible.",
            "VernacDefinition",
            "5ef36b1363691c68fa59c99351d7bef4386cf02f"
        ],
        [
            "End Maps1_3.",
            "VernacEndSegment",
            "042fda037901adf5653f63ed0e2c862b4caed004"
        ],
        [
            "Comments \"We note\" (comp_map_map g f) \"the composition of\" g \"and\" f.",
            "VernacComments",
            "bff02bcd0b3f52c31fe3b2eff8e04724ddfb53b7"
        ],
        [
            "Comments \"Composition is compatible with equality of maps:\".",
            "VernacComments",
            "02dfc018c3b873ae3981700d30c7b51b27e2736e"
        ],
        [
            "Lemma comp_map_comp : forall (A B C : Setoid) (f f' : MAP A B) (g g' : MAP B C), Equal f f' -> Equal g g' -> Equal (comp_map_map g f) (comp_map_map g' f').",
            "VernacStartTheoremProof",
            "df950171f3f53939749a1aecf8646c5486a3b785"
        ],
        [
            "unfold comp_map_map in |- *; simpl in |- *.",
            "VernacExtend",
            "fab3d2dc3a8b4e7eec636d9905d8bfb22c0d229f"
        ],
        [
            "unfold Map_eq in |- *; simpl in |- *; auto with algebra.",
            "VernacExtend",
            "fffd96b23f152b5b8e556019632662934148c9b9"
        ],
        [
            "unfold comp_map_fun in |- *.",
            "VernacExtend",
            "bf09c747c7184fd7f9e6e096f3a9853a912f8318"
        ],
        [
            "auto with algebra.",
            "VernacExtend",
            "2a8b2ac72ff20b5f342f7b76f72f9b539e5a10f0"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Hint Resolve comp_map_comp: algebra.",
            "VernacHints",
            "9bae10795b2a9490edf6b28ea593950d45ee2387"
        ],
        [
            "Comments \"Composition is associative:\".",
            "VernacComments",
            "8b01c5f325e34dd2c99c95ad9aab2b0c5540c560"
        ],
        [
            "Lemma comp_map_assoc : forall (A B C D : Setoid) (f : MAP A B) (g : MAP B C) (h : MAP C D), Equal (comp_map_map h (comp_map_map g f)) (comp_map_map (comp_map_map h g) f).",
            "VernacStartTheoremProof",
            "bb2ef07147ba5c71d41a535d5ecb7db577f3b179"
        ],
        [
            "unfold comp_map_map in |- *; simpl in |- *.",
            "VernacExtend",
            "fab3d2dc3a8b4e7eec636d9905d8bfb22c0d229f"
        ],
        [
            "unfold Map_eq in |- *; simpl in |- *; auto with algebra.",
            "VernacExtend",
            "fffd96b23f152b5b8e556019632662934148c9b9"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Hint Resolve comp_map_assoc: algebra.",
            "VernacHints",
            "c26083167b5800aa53a401dd517c14d71b38323e"
        ],
        [
            "Comments \"We define now the identity map:\".",
            "VernacComments",
            "e61cfaf5d73924509d1e7cd34d8acf69fa1361e0"
        ],
        [
            "Definition Id : forall A : Setoid, MAP A A.",
            "VernacDefinition",
            "6e8bebd5957ab5a15a81dfa5094776c14da39b73"
        ],
        [
            "intros A; try assumption.",
            "VernacExtend",
            "bee08795c86464c42c0359ec8226a130c5f630d4"
        ],
        [
            "apply (Build_Map (A:=A) (B:=A) (Ap:=fun x : A => x)).",
            "VernacExtend",
            "de79967db76eb0fb580ffddb2affb2c56975d6a5"
        ],
        [
            "red in |- *.",
            "VernacExtend",
            "95a3fb9e13ce19fdc8e335912fb83e57a9512b14"
        ],
        [
            "auto with algebra.",
            "VernacExtend",
            "2a8b2ac72ff20b5f342f7b76f72f9b539e5a10f0"
        ],
        [
            "Defined.",
            "VernacEndProof",
            "88c0be54a50df4bb90276c075406fe442428eb9c"
        ],
        [
            "Comments \"Identity map is a unit element for composition:\".",
            "VernacComments",
            "23b03a51ccbfbff842c6d258f0de83a4cbb37f39"
        ],
        [
            "Lemma Id_unit_r : forall (A B : Setoid) (f : MAP A B), Equal (comp_map_map f (Id A)) f.",
            "VernacStartTheoremProof",
            "7f5ddc0582cced3bc870e7f380d3b28b13cb6832"
        ],
        [
            "unfold comp_map_map in |- *; simpl in |- *.",
            "VernacExtend",
            "fab3d2dc3a8b4e7eec636d9905d8bfb22c0d229f"
        ],
        [
            "unfold Map_eq in |- *; simpl in |- *; auto with algebra.",
            "VernacExtend",
            "fffd96b23f152b5b8e556019632662934148c9b9"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Hint Resolve Id_unit_r: algebra.",
            "VernacHints",
            "3077f55efe9e2e91e243ee5db608c47d23674ebf"
        ],
        [
            "Lemma Id_unit_l : forall (A B : Setoid) (f : MAP A B), Equal (comp_map_map (Id B) f) f.",
            "VernacStartTheoremProof",
            "5dd21afb8f2750b06a1773707bd5c5b0ff7e758a"
        ],
        [
            "unfold comp_map_map in |- *; simpl in |- *.",
            "VernacExtend",
            "fab3d2dc3a8b4e7eec636d9905d8bfb22c0d229f"
        ],
        [
            "unfold Map_eq in |- *; simpl in |- *; auto with algebra.",
            "VernacExtend",
            "fffd96b23f152b5b8e556019632662934148c9b9"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Hint Resolve Id_unit_l: algebra.",
            "VernacHints",
            "e4c0e7bd5cc9dcaba0bf0b5a05b9446e2a386f75"
        ],
        [
            "Lemma Id_is_bijective : forall A : Setoid, bijective (Id A).",
            "VernacStartTheoremProof",
            "768d95552000cff54e633e2ecd43462458c8ad0b"
        ],
        [
            "intros A; red in |- *.",
            "VernacExtend",
            "361f66f68c8ced9fb924521ea620091b4ced4d93"
        ],
        [
            "split; [ red in |- * | idtac ].",
            "VernacExtend",
            "e5675e396bf86b4f963314ce8bf105e19df8397c"
        ],
        [
            "simpl in |- *; auto with algebra.",
            "VernacExtend",
            "d6b9b4fa1f9e16b197ca7f795deb2bc736dbeac5"
        ],
        [
            "red in |- *.",
            "VernacExtend",
            "95a3fb9e13ce19fdc8e335912fb83e57a9512b14"
        ],
        [
            "intros y; exists y; try assumption; auto with algebra.",
            "VernacExtend",
            "868f87fb658a09c090e653c31770758674f6a0e6"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Hint Resolve Id_is_bijective: algebra.",
            "VernacHints",
            "968da821e9f99b91c0ecd06e1746d6ba0bb8df27"
        ],
        [
            "Comments \"Some properties of composition:\".",
            "VernacComments",
            "3a4c5cee4fed60fdf3b75d9526563153e91f53aa"
        ],
        [
            "Lemma comp_injective : forall (A B C : Setoid) (f : MAP A B) (g : MAP B C), injective (comp_map_map g f) -> injective f.",
            "VernacStartTheoremProof",
            "1385622bdc919e3f2c8bb9cd3f209cae585aaa1f"
        ],
        [
            "unfold injective in |- *.",
            "VernacExtend",
            "9c517f814102c09f8923135c0ed56233bff984fa"
        ],
        [
            "intros A B C f g H' x y H'0; try assumption.",
            "VernacExtend",
            "9c25456787c97f2c7045e9293e2cd65aad654af3"
        ],
        [
            "apply H'.",
            "VernacExtend",
            "b9f7b1afd5784d2a6d1eac6189a3bdc5f0119ad0"
        ],
        [
            "unfold comp_map_map in |- *; simpl in |- *.",
            "VernacExtend",
            "fab3d2dc3a8b4e7eec636d9905d8bfb22c0d229f"
        ],
        [
            "unfold comp_map_fun in |- *.",
            "VernacExtend",
            "bf09c747c7184fd7f9e6e096f3a9853a912f8318"
        ],
        [
            "auto with algebra.",
            "VernacExtend",
            "2a8b2ac72ff20b5f342f7b76f72f9b539e5a10f0"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Hint Resolve comp_injective: algebra.",
            "VernacHints",
            "014b0fa55c8e4f6f92bbb030f634d3f199bca141"
        ],
        [
            "Lemma comp_surjective : forall (A B C : Setoid) (f : MAP A B) (g : MAP B C), surjective (comp_map_map g f) -> surjective g.",
            "VernacStartTheoremProof",
            "11b85a93c5415520fab7d637d8690bb8cb804a29"
        ],
        [
            "unfold surjective in |- *.",
            "VernacExtend",
            "6e1c3a443cb19cb2371ce180643bf7942067e35a"
        ],
        [
            "intros A B C f g H' y; try assumption.",
            "VernacExtend",
            "9c7d414626072bf3464c749a7e9adf83a1636056"
        ],
        [
            "elim (H' y); intros x E; try exact E.",
            "VernacExtend",
            "d68e36c956ecf3ced5f4efa4904b3eb66f36ed99"
        ],
        [
            "simpl in E.",
            "VernacExtend",
            "f1922fc7926b9299c9e76d37c311dafc4bb74a16"
        ],
        [
            "unfold comp_map_fun in E.",
            "VernacExtend",
            "cdeaebdb9a69e5f5b635c36b28a51a4925db4612"
        ],
        [
            "exists (Ap f x); try assumption; auto with algebra.",
            "VernacExtend",
            "b8944538722fe20d271848d8fd40ebb64f301050"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma comp_is_id_then_bijective : forall (A B : Setoid) (f : MAP A B) (g : MAP B A), Equal (comp_map_map g f) (Id A) -> Equal (comp_map_map f g) (Id B) -> bijective f.",
            "VernacStartTheoremProof",
            "082bcae9c3b89ebeb561499c2b6867bb9bc75e3d"
        ],
        [
            "intros A B f g H' H'0; try assumption.",
            "VernacExtend",
            "a22eb7327e9ef265691a1e51b003e0741dfb031a"
        ],
        [
            "unfold bijective in |- *.",
            "VernacExtend",
            "b3d740725ad23cb34982d3f490de23a687cb4cdd"
        ],
        [
            "split; [ try assumption | idtac ].",
            "VernacExtend",
            "2f3e384e84efa246ea96d2db4b31f7d148a7455c"
        ],
        [
            "apply comp_injective with A g; auto with algebra.",
            "VernacExtend",
            "95b06c2ea6eb229c47abc235c5daa73648cf3bc0"
        ],
        [
            "apply injective_comp with (f := Id A); auto with algebra.",
            "VernacExtend",
            "3c81b5b8de8e2179445f93b39f41f4854b0e2741"
        ],
        [
            "apply comp_surjective with B g; auto with algebra.",
            "VernacExtend",
            "25716cf3b4102b2013ef3a145bd91675ac0270f6"
        ],
        [
            "apply surjective_comp with (f := Id B); auto with algebra.",
            "VernacExtend",
            "e061cb2f44a7fb3dec3c7651c3e81fbcf842ce25"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma comp_is_id_then_injective : forall (A B : Setoid) (f : MAP A B) (g : MAP B A), Equal (comp_map_map g f) (Id A) -> injective f.",
            "VernacStartTheoremProof",
            "b48e452d26be13889a045806053d1d6c8f9a9c2b"
        ],
        [
            "intros A B f g H'; try assumption.",
            "VernacExtend",
            "998ac92b9b5694edce1974459b428ef24ba929b0"
        ],
        [
            "apply comp_injective with A g; auto with algebra.",
            "VernacExtend",
            "95b06c2ea6eb229c47abc235c5daa73648cf3bc0"
        ],
        [
            "apply injective_comp with (f := Id A); auto with algebra.",
            "VernacExtend",
            "3c81b5b8de8e2179445f93b39f41f4854b0e2741"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma comp_is_id_then_surjective : forall (A B : Setoid) (f : MAP A B) (g : MAP B A), Equal (comp_map_map f g) (Id B) -> surjective f.",
            "VernacStartTheoremProof",
            "2682fb8dd7bc5e518eccb78279a69d475db43873"
        ],
        [
            "intros A B f g H'; try assumption.",
            "VernacExtend",
            "998ac92b9b5694edce1974459b428ef24ba929b0"
        ],
        [
            "apply comp_surjective with B g; auto with algebra.",
            "VernacExtend",
            "25716cf3b4102b2013ef3a145bd91675ac0270f6"
        ],
        [
            "apply surjective_comp with (f := Id B); auto with algebra.",
            "VernacExtend",
            "e061cb2f44a7fb3dec3c7651c3e81fbcf842ce25"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "End Maps1.",
            "VernacEndSegment",
            "60caf073e9557ebafeb1fd8b5d679d791befb91f"
        ],
        [
            "End Sets1.",
            "VernacEndSegment",
            "0f4706f5e56adf9d0f7f71c2eec2d14baa13f0e7"
        ],
        [
            "Hint Immediate Sym: algebra.",
            "VernacHints",
            "61ae9c2d9e6faaee6e2044e66810e07cae28e0b9"
        ],
        [
            "Hint Unfold reflexive transitive symmetric partial_equivalence equivalence: algebra.",
            "VernacHints",
            "b42316f4489b9b0c76eba7c08203982e8dc81878"
        ],
        [
            "Hint Resolve equiv_refl equiv_sym equiv_trans Prf_equiv Refl Rel_comp Ap_comp map_ext bijective_injective bijective_surjective surj_set_quo_surjective comp_map_comp comp_map_assoc Id_unit_r Id_unit_l Id_is_bijective comp_injective: algebra.",
            "VernacHints",
            "0064e5448768ff4f2b7433137082dea98f206625"
        ]
    ],
    "proofs": [
        {
            "name": "equiv_refl",
            "line_nb": 21,
            "steps": [
                {
                    "command": [
                        "compute in |- *.",
                        "VernacExtend",
                        "7a532ab38e33f38a5daf661f4883cc26dfdfdef7"
                    ]
                },
                {
                    "command": [
                        "tauto.",
                        "VernacExtend",
                        "9bfafe84fb6724789bdf6cfd21cd721dd63fdabd"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "equiv_sym",
            "line_nb": 25,
            "steps": [
                {
                    "command": [
                        "compute in |- *; tauto.",
                        "VernacExtend",
                        "8be54daefe416fc7c11356ee064e22fc37cb688c"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "equiv_trans",
            "line_nb": 28,
            "steps": [
                {
                    "command": [
                        "compute in |- *; tauto.",
                        "VernacExtend",
                        "8be54daefe416fc7c11356ee064e22fc37cb688c"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "Refl",
            "line_nb": 39,
            "steps": [
                {
                    "command": [
                        "intros E; try assumption.",
                        "VernacExtend",
                        "e478e84a6462d0df5eb4d5537ab1a669dc68053f"
                    ]
                },
                {
                    "command": [
                        "cut (reflexive (Equal (s:=E))); auto with algebra.",
                        "VernacExtend",
                        "f305877a471634da8a311b3f6bb87f06aee5a5cb"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "Sym",
            "line_nb": 43,
            "steps": [
                {
                    "command": [
                        "intros E; try assumption.",
                        "VernacExtend",
                        "e478e84a6462d0df5eb4d5537ab1a669dc68053f"
                    ]
                },
                {
                    "command": [
                        "cut (symmetric (Equal (s:=E))); auto with algebra.",
                        "VernacExtend",
                        "52fdaa90dcab31bed9cf61ab85edf5bfb75168af"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "Trans",
            "line_nb": 47,
            "steps": [
                {
                    "command": [
                        "intros E; try assumption.",
                        "VernacExtend",
                        "e478e84a6462d0df5eb4d5537ab1a669dc68053f"
                    ]
                },
                {
                    "command": [
                        "cut (transitive (Equal (s:=E))); auto with algebra.",
                        "VernacExtend",
                        "d11fc8f5a8c1ab2528bf882472f06c49da3009dd"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "eqT_equiv",
            "line_nb": 54,
            "steps": [
                {
                    "command": [
                        "intros A; try assumption.",
                        "VernacExtend",
                        "bee08795c86464c42c0359ec8226a130c5f630d4"
                    ]
                },
                {
                    "command": [
                        "red in |- *.",
                        "VernacExtend",
                        "95a3fb9e13ce19fdc8e335912fb83e57a9512b14"
                    ]
                },
                {
                    "command": [
                        "split; [ try assumption | idtac ].",
                        "VernacExtend",
                        "2f3e384e84efa246ea96d2db4b31f7d148a7455c"
                    ]
                },
                {
                    "command": [
                        "red in |- *.",
                        "VernacExtend",
                        "95a3fb9e13ce19fdc8e335912fb83e57a9512b14"
                    ]
                },
                {
                    "command": [
                        "unfold app_rel in |- *; auto with algebra.",
                        "VernacExtend",
                        "3d80ab120d53dbefed2aa458ec9690e2f80d9cf9"
                    ]
                },
                {
                    "command": [
                        "red in |- *.",
                        "VernacExtend",
                        "95a3fb9e13ce19fdc8e335912fb83e57a9512b14"
                    ]
                },
                {
                    "command": [
                        "split; [ try assumption | idtac ].",
                        "VernacExtend",
                        "2f3e384e84efa246ea96d2db4b31f7d148a7455c"
                    ]
                },
                {
                    "command": [
                        "red in |- *.",
                        "VernacExtend",
                        "95a3fb9e13ce19fdc8e335912fb83e57a9512b14"
                    ]
                },
                {
                    "command": [
                        "unfold app_rel in |- *; auto with algebra.",
                        "VernacExtend",
                        "3d80ab120d53dbefed2aa458ec9690e2f80d9cf9"
                    ]
                },
                {
                    "command": [
                        "intros x y z H' H'0; try assumption.",
                        "VernacExtend",
                        "92486dfbaec6209765e08194fc2670eff8aef754"
                    ]
                },
                {
                    "command": [
                        "rewrite H'; auto with algebra.",
                        "VernacExtend",
                        "7cc60dde6b2344e1ba918efa884f9497bb03cf5f"
                    ]
                },
                {
                    "command": [
                        "red in |- *.",
                        "VernacExtend",
                        "95a3fb9e13ce19fdc8e335912fb83e57a9512b14"
                    ]
                },
                {
                    "command": [
                        "unfold app_rel in |- *; auto with algebra.",
                        "VernacExtend",
                        "3d80ab120d53dbefed2aa458ec9690e2f80d9cf9"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "Leibnitz_set_prop",
            "line_nb": 70,
            "steps": [
                {
                    "command": [
                        "auto with algebra.",
                        "VernacExtend",
                        "2a8b2ac72ff20b5f342f7b76f72f9b539e5a10f0"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "Leibnitz_set_prop_rev",
            "line_nb": 73,
            "steps": [
                {
                    "command": [
                        "auto with algebra.",
                        "VernacExtend",
                        "2a8b2ac72ff20b5f342f7b76f72f9b539e5a10f0"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "Rel_comp",
            "line_nb": 82,
            "steps": [
                {
                    "command": [
                        "intros R; try assumption.",
                        "VernacExtend",
                        "743dee39342b0d94b8f08f0bd6f30c1fc5dd8604"
                    ]
                },
                {
                    "command": [
                        "exact (Rel_compatible_prf (r:=R)).",
                        "VernacExtend",
                        "a6d955de003a227ad11e677c6c8860084dbf5e11"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "Map_eq_equiv",
            "line_nb": 103,
            "steps": [
                {
                    "command": [
                        "red in |- *.",
                        "VernacExtend",
                        "95a3fb9e13ce19fdc8e335912fb83e57a9512b14"
                    ]
                },
                {
                    "command": [
                        "split; [ try assumption | idtac ].",
                        "VernacExtend",
                        "2f3e384e84efa246ea96d2db4b31f7d148a7455c"
                    ]
                },
                {
                    "command": [
                        "red in |- *.",
                        "VernacExtend",
                        "95a3fb9e13ce19fdc8e335912fb83e57a9512b14"
                    ]
                },
                {
                    "command": [
                        "unfold Map_eq, app_rel in |- *; simpl in |- *; auto with algebra.",
                        "VernacExtend",
                        "6fea19722636a543947f30e1e8c7776a5488c65a"
                    ]
                },
                {
                    "command": [
                        "red in |- *.",
                        "VernacExtend",
                        "95a3fb9e13ce19fdc8e335912fb83e57a9512b14"
                    ]
                },
                {
                    "command": [
                        "split; [ try assumption | idtac ].",
                        "VernacExtend",
                        "2f3e384e84efa246ea96d2db4b31f7d148a7455c"
                    ]
                },
                {
                    "command": [
                        "red in |- *.",
                        "VernacExtend",
                        "95a3fb9e13ce19fdc8e335912fb83e57a9512b14"
                    ]
                },
                {
                    "command": [
                        "unfold Map_eq, app_rel in |- *; simpl in |- *; auto with algebra.",
                        "VernacExtend",
                        "6fea19722636a543947f30e1e8c7776a5488c65a"
                    ]
                },
                {
                    "command": [
                        "intros x y z H' H'0 x0; try assumption.",
                        "VernacExtend",
                        "255f65fbd5e7d695d63d511e94350f9a2bac8c91"
                    ]
                },
                {
                    "command": [
                        "apply Trans with (y x0); auto with algebra.",
                        "VernacExtend",
                        "441757e7c4c4f8f630b1c050b325252bd2f83168"
                    ]
                },
                {
                    "command": [
                        "red in |- *.",
                        "VernacExtend",
                        "95a3fb9e13ce19fdc8e335912fb83e57a9512b14"
                    ]
                },
                {
                    "command": [
                        "unfold Map_eq, app_rel in |- *; simpl in |- *; auto with algebra.",
                        "VernacExtend",
                        "6fea19722636a543947f30e1e8c7776a5488c65a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "Ap_comp",
            "line_nb": 121,
            "steps": [
                {
                    "command": [
                        "intros A B f g x y H' H'0; try assumption.",
                        "VernacExtend",
                        "4cf2401b69a84ddc19bcde7be6ee27d8e66689d8"
                    ]
                },
                {
                    "command": [
                        "apply Trans with (f y).",
                        "VernacExtend",
                        "ec809cbadcc85e63b023c19337f9f7fc9661d5fb"
                    ]
                },
                {
                    "command": [
                        "apply (Map_compatible_prf f); auto with algebra.",
                        "VernacExtend",
                        "90e4eda7bef66b54c00a3c5141f12511f4b3f090"
                    ]
                },
                {
                    "command": [
                        "simpl in H'0.",
                        "VernacExtend",
                        "4d1362de2d02d4096d88255ad67ea468de03b32d"
                    ]
                },
                {
                    "command": [
                        "unfold Map_eq in H'0.",
                        "VernacExtend",
                        "b3f7f3c057a954265419702ab0889167a80265d5"
                    ]
                },
                {
                    "command": [
                        "auto with algebra.",
                        "VernacExtend",
                        "2a8b2ac72ff20b5f342f7b76f72f9b539e5a10f0"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "map_ext",
            "line_nb": 130,
            "steps": [
                {
                    "command": [
                        "simpl in |- *.",
                        "VernacExtend",
                        "1b93169f4cf876d207c1fab22a2347202ab48d85"
                    ]
                },
                {
                    "command": [
                        "unfold Map_eq in |- *.",
                        "VernacExtend",
                        "98c98e127e6526be1bcf7fe2241acd7d7b875a39"
                    ]
                },
                {
                    "command": [
                        "auto with algebra.",
                        "VernacExtend",
                        "2a8b2ac72ff20b5f342f7b76f72f9b539e5a10f0"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "injective_comp",
            "line_nb": 144,
            "steps": [
                {
                    "command": [
                        "unfold injective in |- *.",
                        "VernacExtend",
                        "9c517f814102c09f8923135c0ed56233bff984fa"
                    ]
                },
                {
                    "command": [
                        "intros A B f f' H' H'0 x y H'1; try assumption.",
                        "VernacExtend",
                        "357317847f9bc98ff692ef626c63ef12d59983a9"
                    ]
                },
                {
                    "command": [
                        "apply H'.",
                        "VernacExtend",
                        "b9f7b1afd5784d2a6d1eac6189a3bdc5f0119ad0"
                    ]
                },
                {
                    "command": [
                        "apply Trans with (Ap f' x); auto with algebra.",
                        "VernacExtend",
                        "9fb68c621d4be972334ba6e5f93caf05498c9caf"
                    ]
                },
                {
                    "command": [
                        "apply Trans with (Ap f' y); auto with algebra.",
                        "VernacExtend",
                        "39e4f263d12c386ae4ff658ecb6ad91f4db6c833"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "surjective_comp",
            "line_nb": 151,
            "steps": [
                {
                    "command": [
                        "unfold surjective in |- *.",
                        "VernacExtend",
                        "6e1c3a443cb19cb2371ce180643bf7942067e35a"
                    ]
                },
                {
                    "command": [
                        "intros A B f f' H' H'0 y; try assumption.",
                        "VernacExtend",
                        "9998087c2ca8d29adc3fca6a2c34a27c59a3d982"
                    ]
                },
                {
                    "command": [
                        "elim (H' y); intros x E; try exact E.",
                        "VernacExtend",
                        "d68e36c956ecf3ced5f4efa4904b3eb66f36ed99"
                    ]
                },
                {
                    "command": [
                        "exists x; try assumption.",
                        "VernacExtend",
                        "a251c410f0ab72130a5a312ded511c093841a93c"
                    ]
                },
                {
                    "command": [
                        "apply Trans with (Ap f x); auto with algebra.",
                        "VernacExtend",
                        "02cf64c07de1d12d18c6ab7e1c90a6d51a38d8e8"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "bijective_comp",
            "line_nb": 158,
            "steps": [
                {
                    "command": [
                        "unfold bijective in |- *.",
                        "VernacExtend",
                        "b3d740725ad23cb34982d3f490de23a687cb4cdd"
                    ]
                },
                {
                    "command": [
                        "intros A B f f' H' H'0; try assumption.",
                        "VernacExtend",
                        "cc9eedde72639b8a52a3cf5ff0a5a82cf6796a31"
                    ]
                },
                {
                    "command": [
                        "split; [ try assumption | idtac ].",
                        "VernacExtend",
                        "2f3e384e84efa246ea96d2db4b31f7d148a7455c"
                    ]
                },
                {
                    "command": [
                        "elim H'; intros H'1 H'2; try exact H'1; clear H'.",
                        "VernacExtend",
                        "8aae0bbb7de07da855200960bd16ac82ded68d2d"
                    ]
                },
                {
                    "command": [
                        "apply injective_comp with (f := f); auto with algebra.",
                        "VernacExtend",
                        "3ad2b66a0db807c73f5d8a78661421e4ef248f22"
                    ]
                },
                {
                    "command": [
                        "elim H'; intros H'1 H'2; try exact H'2; clear H'.",
                        "VernacExtend",
                        "95f2cbf46697210c2d7c112175e3b4e95fdfb9c5"
                    ]
                },
                {
                    "command": [
                        "apply surjective_comp with (f := f); auto with algebra.",
                        "VernacExtend",
                        "5316d1d72de122eb52702aa2c3fcfb281979b60e"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "bijective_injective",
            "line_nb": 168,
            "steps": [
                {
                    "command": [
                        "intros A B f H'; red in H'; auto with algebra.",
                        "VernacExtend",
                        "cf56ebd28a6609ecdd21ea4b26ee73edf4de19e5"
                    ]
                },
                {
                    "command": [
                        "elim H'; auto with algebra.",
                        "VernacExtend",
                        "dc8c9058bb9849e8858371cb244ec5fbff9d9ec0"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "bijective_surjective",
            "line_nb": 173,
            "steps": [
                {
                    "command": [
                        "intros A B f H'; red in H'; auto with algebra.",
                        "VernacExtend",
                        "cf56ebd28a6609ecdd21ea4b26ee73edf4de19e5"
                    ]
                },
                {
                    "command": [
                        "elim H'; auto with algebra.",
                        "VernacExtend",
                        "dc8c9058bb9849e8858371cb244ec5fbff9d9ec0"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "surj_set_quo",
            "line_nb": 180,
            "steps": [
                {
                    "command": [
                        "intros E R p; try assumption.",
                        "VernacExtend",
                        "1b160b2c111e99a92216be2c67ca7fbbcfb24099"
                    ]
                },
                {
                    "command": [
                        "apply (Build_Map (A:=E) (B:=quotient E R p) (Ap:=fun x : E => x)).",
                        "VernacExtend",
                        "33d9c5d5274671360df2e25efcf8f2c7c4ef67ab"
                    ]
                },
                {
                    "command": [
                        "generalize p; clear p.",
                        "VernacExtend",
                        "b58f7ce2df24db72cafbc0d115c373e1427902b5"
                    ]
                },
                {
                    "command": [
                        "elim R.",
                        "VernacExtend",
                        "b07ecde0d5221cd615bde795002046a25fb03700"
                    ]
                },
                {
                    "command": [
                        "intros Rel_fun' Rel_compatible_prf0 p; try assumption.",
                        "VernacExtend",
                        "493c5f9c78a17a695443592a390bc15eca2414b6"
                    ]
                },
                {
                    "command": [
                        "red in |- *.",
                        "VernacExtend",
                        "95a3fb9e13ce19fdc8e335912fb83e57a9512b14"
                    ]
                },
                {
                    "command": [
                        "red in Rel_compatible_prf0.",
                        "VernacExtend",
                        "9f90a409a26bd6605525b7448f58676ef0bcc5ff"
                    ]
                },
                {
                    "command": [
                        "intros x y H'; try assumption.",
                        "VernacExtend",
                        "fbcf20f9e721db2a6aa9129fd945d80367dbafda"
                    ]
                },
                {
                    "command": [
                        "simpl in |- *.",
                        "VernacExtend",
                        "1b93169f4cf876d207c1fab22a2347202ab48d85"
                    ]
                },
                {
                    "command": [
                        "unfold app_rel in Rel_compatible_prf0.",
                        "VernacExtend",
                        "8106145187a5ec8a8554e16e3c7450190581e8e4"
                    ]
                },
                {
                    "command": [
                        "apply Rel_compatible_prf0 with (x := x) (y := x); auto with algebra.",
                        "VernacExtend",
                        "09fa6d7be053a5f8ba0b5cc6ec8dd47ced5edd80"
                    ]
                },
                {
                    "command": [
                        "elim p.",
                        "VernacExtend",
                        "6c779b9e37b157f8482c780f6aa47ea385660887"
                    ]
                },
                {
                    "command": [
                        "intros H'0 H'1; try assumption.",
                        "VernacExtend",
                        "ba8e9014a42e521d7d349ed66495f52da0acbd31"
                    ]
                },
                {
                    "command": [
                        "simpl in H'0.",
                        "VernacExtend",
                        "4d1362de2d02d4096d88255ad67ea468de03b32d"
                    ]
                },
                {
                    "command": [
                        "red in H'0.",
                        "VernacExtend",
                        "d5049e9647c88c352fa78e07b8260e57ba8ee09f"
                    ]
                },
                {
                    "command": [
                        "unfold app_rel in H'0.",
                        "VernacExtend",
                        "4467c49c53dd364973762ec21121ce2b2c12208c"
                    ]
                },
                {
                    "command": [
                        "auto with algebra.",
                        "VernacExtend",
                        "2a8b2ac72ff20b5f342f7b76f72f9b539e5a10f0"
                    ]
                },
                {
                    "command": [
                        "Defined.",
                        "VernacEndProof",
                        "88c0be54a50df4bb90276c075406fe442428eb9c"
                    ]
                }
            ]
        },
        {
            "name": "surj_set_quo_surjective",
            "line_nb": 201,
            "steps": [
                {
                    "command": [
                        "intros E R p; try assumption.",
                        "VernacExtend",
                        "1b160b2c111e99a92216be2c67ca7fbbcfb24099"
                    ]
                },
                {
                    "command": [
                        "red in |- *.",
                        "VernacExtend",
                        "95a3fb9e13ce19fdc8e335912fb83e57a9512b14"
                    ]
                },
                {
                    "command": [
                        "intros y; exists y; try assumption.",
                        "VernacExtend",
                        "4ac15b3444a8f333687ecae80f55eb56aaae257d"
                    ]
                },
                {
                    "command": [
                        "simpl in |- *.",
                        "VernacExtend",
                        "1b93169f4cf876d207c1fab22a2347202ab48d85"
                    ]
                },
                {
                    "command": [
                        "elim p.",
                        "VernacExtend",
                        "6c779b9e37b157f8482c780f6aa47ea385660887"
                    ]
                },
                {
                    "command": [
                        "intros H'; red in H'.",
                        "VernacExtend",
                        "5628143996864dae4052e86719a5f6654c3edf8b"
                    ]
                },
                {
                    "command": [
                        "unfold app_rel in H'.",
                        "VernacExtend",
                        "07b6b3743fcdc3620f91e1661c3aa5c03b46041e"
                    ]
                },
                {
                    "command": [
                        "auto with algebra.",
                        "VernacExtend",
                        "2a8b2ac72ff20b5f342f7b76f72f9b539e5a10f0"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "comp_map_fun_compatible",
            "line_nb": 219,
            "steps": [
                {
                    "command": [
                        "red in |- *.",
                        "VernacExtend",
                        "95a3fb9e13ce19fdc8e335912fb83e57a9512b14"
                    ]
                },
                {
                    "command": [
                        "unfold comp_map_fun in |- *.",
                        "VernacExtend",
                        "bf09c747c7184fd7f9e6e096f3a9853a912f8318"
                    ]
                },
                {
                    "command": [
                        "auto with algebra.",
                        "VernacExtend",
                        "2a8b2ac72ff20b5f342f7b76f72f9b539e5a10f0"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "comp_map_comp",
            "line_nb": 229,
            "steps": [
                {
                    "command": [
                        "unfold comp_map_map in |- *; simpl in |- *.",
                        "VernacExtend",
                        "fab3d2dc3a8b4e7eec636d9905d8bfb22c0d229f"
                    ]
                },
                {
                    "command": [
                        "unfold Map_eq in |- *; simpl in |- *; auto with algebra.",
                        "VernacExtend",
                        "fffd96b23f152b5b8e556019632662934148c9b9"
                    ]
                },
                {
                    "command": [
                        "unfold comp_map_fun in |- *.",
                        "VernacExtend",
                        "bf09c747c7184fd7f9e6e096f3a9853a912f8318"
                    ]
                },
                {
                    "command": [
                        "auto with algebra.",
                        "VernacExtend",
                        "2a8b2ac72ff20b5f342f7b76f72f9b539e5a10f0"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "comp_map_assoc",
            "line_nb": 237,
            "steps": [
                {
                    "command": [
                        "unfold comp_map_map in |- *; simpl in |- *.",
                        "VernacExtend",
                        "fab3d2dc3a8b4e7eec636d9905d8bfb22c0d229f"
                    ]
                },
                {
                    "command": [
                        "unfold Map_eq in |- *; simpl in |- *; auto with algebra.",
                        "VernacExtend",
                        "fffd96b23f152b5b8e556019632662934148c9b9"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "Id",
            "line_nb": 243,
            "steps": [
                {
                    "command": [
                        "intros A; try assumption.",
                        "VernacExtend",
                        "bee08795c86464c42c0359ec8226a130c5f630d4"
                    ]
                },
                {
                    "command": [
                        "apply (Build_Map (A:=A) (B:=A) (Ap:=fun x : A => x)).",
                        "VernacExtend",
                        "de79967db76eb0fb580ffddb2affb2c56975d6a5"
                    ]
                },
                {
                    "command": [
                        "red in |- *.",
                        "VernacExtend",
                        "95a3fb9e13ce19fdc8e335912fb83e57a9512b14"
                    ]
                },
                {
                    "command": [
                        "auto with algebra.",
                        "VernacExtend",
                        "2a8b2ac72ff20b5f342f7b76f72f9b539e5a10f0"
                    ]
                },
                {
                    "command": [
                        "Defined.",
                        "VernacEndProof",
                        "88c0be54a50df4bb90276c075406fe442428eb9c"
                    ]
                }
            ]
        },
        {
            "name": "Id_unit_r",
            "line_nb": 250,
            "steps": [
                {
                    "command": [
                        "unfold comp_map_map in |- *; simpl in |- *.",
                        "VernacExtend",
                        "fab3d2dc3a8b4e7eec636d9905d8bfb22c0d229f"
                    ]
                },
                {
                    "command": [
                        "unfold Map_eq in |- *; simpl in |- *; auto with algebra.",
                        "VernacExtend",
                        "fffd96b23f152b5b8e556019632662934148c9b9"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "Id_unit_l",
            "line_nb": 255,
            "steps": [
                {
                    "command": [
                        "unfold comp_map_map in |- *; simpl in |- *.",
                        "VernacExtend",
                        "fab3d2dc3a8b4e7eec636d9905d8bfb22c0d229f"
                    ]
                },
                {
                    "command": [
                        "unfold Map_eq in |- *; simpl in |- *; auto with algebra.",
                        "VernacExtend",
                        "fffd96b23f152b5b8e556019632662934148c9b9"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "Id_is_bijective",
            "line_nb": 260,
            "steps": [
                {
                    "command": [
                        "intros A; red in |- *.",
                        "VernacExtend",
                        "361f66f68c8ced9fb924521ea620091b4ced4d93"
                    ]
                },
                {
                    "command": [
                        "split; [ red in |- * | idtac ].",
                        "VernacExtend",
                        "e5675e396bf86b4f963314ce8bf105e19df8397c"
                    ]
                },
                {
                    "command": [
                        "simpl in |- *; auto with algebra.",
                        "VernacExtend",
                        "d6b9b4fa1f9e16b197ca7f795deb2bc736dbeac5"
                    ]
                },
                {
                    "command": [
                        "red in |- *.",
                        "VernacExtend",
                        "95a3fb9e13ce19fdc8e335912fb83e57a9512b14"
                    ]
                },
                {
                    "command": [
                        "intros y; exists y; try assumption; auto with algebra.",
                        "VernacExtend",
                        "868f87fb658a09c090e653c31770758674f6a0e6"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "comp_injective",
            "line_nb": 269,
            "steps": [
                {
                    "command": [
                        "unfold injective in |- *.",
                        "VernacExtend",
                        "9c517f814102c09f8923135c0ed56233bff984fa"
                    ]
                },
                {
                    "command": [
                        "intros A B C f g H' x y H'0; try assumption.",
                        "VernacExtend",
                        "9c25456787c97f2c7045e9293e2cd65aad654af3"
                    ]
                },
                {
                    "command": [
                        "apply H'.",
                        "VernacExtend",
                        "b9f7b1afd5784d2a6d1eac6189a3bdc5f0119ad0"
                    ]
                },
                {
                    "command": [
                        "unfold comp_map_map in |- *; simpl in |- *.",
                        "VernacExtend",
                        "fab3d2dc3a8b4e7eec636d9905d8bfb22c0d229f"
                    ]
                },
                {
                    "command": [
                        "unfold comp_map_fun in |- *.",
                        "VernacExtend",
                        "bf09c747c7184fd7f9e6e096f3a9853a912f8318"
                    ]
                },
                {
                    "command": [
                        "auto with algebra.",
                        "VernacExtend",
                        "2a8b2ac72ff20b5f342f7b76f72f9b539e5a10f0"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "comp_surjective",
            "line_nb": 278,
            "steps": [
                {
                    "command": [
                        "unfold surjective in |- *.",
                        "VernacExtend",
                        "6e1c3a443cb19cb2371ce180643bf7942067e35a"
                    ]
                },
                {
                    "command": [
                        "intros A B C f g H' y; try assumption.",
                        "VernacExtend",
                        "9c7d414626072bf3464c749a7e9adf83a1636056"
                    ]
                },
                {
                    "command": [
                        "elim (H' y); intros x E; try exact E.",
                        "VernacExtend",
                        "d68e36c956ecf3ced5f4efa4904b3eb66f36ed99"
                    ]
                },
                {
                    "command": [
                        "simpl in E.",
                        "VernacExtend",
                        "f1922fc7926b9299c9e76d37c311dafc4bb74a16"
                    ]
                },
                {
                    "command": [
                        "unfold comp_map_fun in E.",
                        "VernacExtend",
                        "cdeaebdb9a69e5f5b635c36b28a51a4925db4612"
                    ]
                },
                {
                    "command": [
                        "exists (Ap f x); try assumption; auto with algebra.",
                        "VernacExtend",
                        "b8944538722fe20d271848d8fd40ebb64f301050"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "comp_is_id_then_bijective",
            "line_nb": 286,
            "steps": [
                {
                    "command": [
                        "intros A B f g H' H'0; try assumption.",
                        "VernacExtend",
                        "a22eb7327e9ef265691a1e51b003e0741dfb031a"
                    ]
                },
                {
                    "command": [
                        "unfold bijective in |- *.",
                        "VernacExtend",
                        "b3d740725ad23cb34982d3f490de23a687cb4cdd"
                    ]
                },
                {
                    "command": [
                        "split; [ try assumption | idtac ].",
                        "VernacExtend",
                        "2f3e384e84efa246ea96d2db4b31f7d148a7455c"
                    ]
                },
                {
                    "command": [
                        "apply comp_injective with A g; auto with algebra.",
                        "VernacExtend",
                        "95b06c2ea6eb229c47abc235c5daa73648cf3bc0"
                    ]
                },
                {
                    "command": [
                        "apply injective_comp with (f := Id A); auto with algebra.",
                        "VernacExtend",
                        "3c81b5b8de8e2179445f93b39f41f4854b0e2741"
                    ]
                },
                {
                    "command": [
                        "apply comp_surjective with B g; auto with algebra.",
                        "VernacExtend",
                        "25716cf3b4102b2013ef3a145bd91675ac0270f6"
                    ]
                },
                {
                    "command": [
                        "apply surjective_comp with (f := Id B); auto with algebra.",
                        "VernacExtend",
                        "e061cb2f44a7fb3dec3c7651c3e81fbcf842ce25"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "comp_is_id_then_injective",
            "line_nb": 295,
            "steps": [
                {
                    "command": [
                        "intros A B f g H'; try assumption.",
                        "VernacExtend",
                        "998ac92b9b5694edce1974459b428ef24ba929b0"
                    ]
                },
                {
                    "command": [
                        "apply comp_injective with A g; auto with algebra.",
                        "VernacExtend",
                        "95b06c2ea6eb229c47abc235c5daa73648cf3bc0"
                    ]
                },
                {
                    "command": [
                        "apply injective_comp with (f := Id A); auto with algebra.",
                        "VernacExtend",
                        "3c81b5b8de8e2179445f93b39f41f4854b0e2741"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "comp_is_id_then_surjective",
            "line_nb": 300,
            "steps": [
                {
                    "command": [
                        "intros A B f g H'; try assumption.",
                        "VernacExtend",
                        "998ac92b9b5694edce1974459b428ef24ba929b0"
                    ]
                },
                {
                    "command": [
                        "apply comp_surjective with B g; auto with algebra.",
                        "VernacExtend",
                        "25716cf3b4102b2013ef3a145bd91675ac0270f6"
                    ]
                },
                {
                    "command": [
                        "apply surjective_comp with (f := Id B); auto with algebra.",
                        "VernacExtend",
                        "e061cb2f44a7fb3dec3c7651c3e81fbcf842ce25"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        }
    ]
}