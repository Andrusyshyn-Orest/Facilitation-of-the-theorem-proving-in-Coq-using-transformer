{
    "filename": "Diff.v",
    "coq_project": "algebra",
    "vernac_cmds": [
        [
            "Set Implicit Arguments.",
            "VernacSetOption",
            "9e84ff8896f028601d8aded48c1d4aebe60aa584"
        ],
        [
            "Unset Strict Implicit.",
            "VernacUnsetOption",
            "2842adaf6959318f2042805935c46f513bdc0348"
        ],
        [
            "Require Export Parts.",
            "VernacRequire",
            "535a8673b0f8ec74d32f83dd6ddb45ca3ae921a1"
        ],
        [
            "Section Diff.",
            "VernacBeginSection",
            "295e5ad31c804de240555ce7969faa123ad48691"
        ],
        [
            "Variable E : Setoid.",
            "VernacAssumption",
            "cafb1870f48a7785473ed62f8eb64582fbbe308d"
        ],
        [
            "Definition diff : part_set E -> part_set E -> part_set E.",
            "VernacDefinition",
            "7a46f05c7b6a33f5757edaf15b7d558a57fee51a"
        ],
        [
            "intros A B.",
            "VernacExtend",
            "f0fdd14fe43c412ab9e9cf2b93b27330098322c4"
        ],
        [
            "apply (Build_Predicate (Pred_fun:=fun x : E => in_part x A /\\ ~ in_part x B)).",
            "VernacExtend",
            "0b40a456eb1088aee4deefba7139e293852cf048"
        ],
        [
            "red in |- *.",
            "VernacExtend",
            "95a3fb9e13ce19fdc8e335912fb83e57a9512b14"
        ],
        [
            "intros x y H' H'0; try assumption.",
            "VernacExtend",
            "80824be427f661dd57d0ea65f59a8a8dc948972f"
        ],
        [
            "elim H'; intros H'1 H'2; try exact H'1; clear H'.",
            "VernacExtend",
            "8aae0bbb7de07da855200960bd16ac82ded68d2d"
        ],
        [
            "split; [ try assumption | idtac ].",
            "VernacExtend",
            "2f3e384e84efa246ea96d2db4b31f7d148a7455c"
        ],
        [
            "apply in_part_comp_l with x; auto with algebra.",
            "VernacExtend",
            "137022ad238291278e127a594be9aef89f00c13e"
        ],
        [
            "red in |- *.",
            "VernacExtend",
            "95a3fb9e13ce19fdc8e335912fb83e57a9512b14"
        ],
        [
            "intros H'; try assumption.",
            "VernacExtend",
            "f89dc0f02e76585c56cd90566484d3bd23bfeec6"
        ],
        [
            "absurd (in_part x B); auto with algebra.",
            "VernacExtend",
            "8c3fa36568ec55e20c061b6ba8c81995f64bc5a3"
        ],
        [
            "apply in_part_comp_l with y; auto with algebra.",
            "VernacExtend",
            "a96ecfe6d4f87e02909cce250c1293c1a4089f55"
        ],
        [
            "Defined.",
            "VernacEndProof",
            "88c0be54a50df4bb90276c075406fe442428eb9c"
        ],
        [
            "Lemma diff_comp : forall A A' B B' : part_set E, Equal A A' -> Equal B B' -> Equal (diff A B) (diff A' B').",
            "VernacStartTheoremProof",
            "2873cae8a8a6d07475a789c7491968241b498bc8"
        ],
        [
            "intros A A' B B'; try assumption.",
            "VernacExtend",
            "cf72ad3f39bec5b1207b04158928f66cfc6bc150"
        ],
        [
            "unfold diff in |- *; simpl in |- *.",
            "VernacExtend",
            "c084aac805c1b39bf68d0cfe58303983d7d5dcec"
        ],
        [
            "unfold eq_part in |- *; simpl in |- *.",
            "VernacExtend",
            "f85bba6666f1278a61d5c9324cec9fb8a1868241"
        ],
        [
            "intros H' H'0 x; split; [ intros H'1; split; [ try assumption | idtac ] | idtac ].",
            "VernacExtend",
            "3d97355430ae24e76b37f8e4f596867b674b3cc9"
        ],
        [
            "elim (H' x); intros H'3 H'4; lapply H'3; [ intros H'5; try exact H'5; clear H'3 | clear H'3 ].",
            "VernacExtend",
            "a15a09c9872aed7098cc30f60b9239dcb972d206"
        ],
        [
            "elim H'1; intros H'2 H'3; try exact H'2; clear H'1.",
            "VernacExtend",
            "83205607ef2e90fb6fd0bf1b7b65c0716bbe633b"
        ],
        [
            "red in |- *.",
            "VernacExtend",
            "95a3fb9e13ce19fdc8e335912fb83e57a9512b14"
        ],
        [
            "intros H'2; try assumption.",
            "VernacExtend",
            "3e0142f6e43fd4a8990399a81c16960a527db165"
        ],
        [
            "absurd (in_part x B); auto with algebra.",
            "VernacExtend",
            "8c3fa36568ec55e20c061b6ba8c81995f64bc5a3"
        ],
        [
            "elim H'1; intros H'3 H'4; try exact H'4; clear H'1.",
            "VernacExtend",
            "619d7edf5006d969305c11146e947c07a009b911"
        ],
        [
            "elim (H'0 x); intros H'4 H'5; lapply H'5; [ intros H'6; try exact H'6; clear H'5 | clear H'5 ].",
            "VernacExtend",
            "90b1b6f9edfc5d6c6e6117cb287da7eb2d60a0d3"
        ],
        [
            "auto with algebra.",
            "VernacExtend",
            "2a8b2ac72ff20b5f342f7b76f72f9b539e5a10f0"
        ],
        [
            "intros H'1; split; [ try assumption | idtac ].",
            "VernacExtend",
            "0756c12eafa333feddd5f8f5b01c0c8a3240f717"
        ],
        [
            "elim (H' x); intros H'3 H'4; lapply H'4; [ intros H'5; try exact H'5; clear H'4 | clear H'4 ].",
            "VernacExtend",
            "bb45bc642762bd90abdbda7316b057c0d4534dc6"
        ],
        [
            "elim H'1; intros H'2 H'4; try exact H'2; clear H'1.",
            "VernacExtend",
            "0f135f22316fd17f0762614281d7f8a3772a4dda"
        ],
        [
            "red in |- *.",
            "VernacExtend",
            "95a3fb9e13ce19fdc8e335912fb83e57a9512b14"
        ],
        [
            "intros H'2; try assumption.",
            "VernacExtend",
            "3e0142f6e43fd4a8990399a81c16960a527db165"
        ],
        [
            "absurd (in_part x B'); auto with algebra.",
            "VernacExtend",
            "e783cc113028a47bbd5921b5a5f86ca575146ff4"
        ],
        [
            "elim H'1; intros H'3 H'4; try exact H'4; clear H'1.",
            "VernacExtend",
            "619d7edf5006d969305c11146e947c07a009b911"
        ],
        [
            "elim (H'0 x); intros H'4 H'5; lapply H'4; [ intros H'6; try exact H'6; clear H'4 | clear H'4 ].",
            "VernacExtend",
            "b306e9643b95a019ecbd8adcff3d7283de5ea87f"
        ],
        [
            "try exact H'2.",
            "VernacExtend",
            "83cdf6056e50dc71acf82ae827f2738262ced2eb"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "End Diff.",
            "VernacEndSegment",
            "e0ae368ee7dde6f260993417d1f5d5c8e3328089"
        ],
        [
            "Hint Resolve diff_comp: algebra.",
            "VernacHints",
            "1f13b39869a62af940b572d6694e79e2829b4003"
        ]
    ],
    "proofs": [
        {
            "name": "diff",
            "line_nb": 5,
            "steps": [
                {
                    "command": [
                        "intros A B.",
                        "VernacExtend",
                        "f0fdd14fe43c412ab9e9cf2b93b27330098322c4"
                    ]
                },
                {
                    "command": [
                        "apply (Build_Predicate (Pred_fun:=fun x : E => in_part x A /\\ ~ in_part x B)).",
                        "VernacExtend",
                        "0b40a456eb1088aee4deefba7139e293852cf048"
                    ]
                },
                {
                    "command": [
                        "red in |- *.",
                        "VernacExtend",
                        "95a3fb9e13ce19fdc8e335912fb83e57a9512b14"
                    ]
                },
                {
                    "command": [
                        "intros x y H' H'0; try assumption.",
                        "VernacExtend",
                        "80824be427f661dd57d0ea65f59a8a8dc948972f"
                    ]
                },
                {
                    "command": [
                        "elim H'; intros H'1 H'2; try exact H'1; clear H'.",
                        "VernacExtend",
                        "8aae0bbb7de07da855200960bd16ac82ded68d2d"
                    ]
                },
                {
                    "command": [
                        "split; [ try assumption | idtac ].",
                        "VernacExtend",
                        "2f3e384e84efa246ea96d2db4b31f7d148a7455c"
                    ]
                },
                {
                    "command": [
                        "apply in_part_comp_l with x; auto with algebra.",
                        "VernacExtend",
                        "137022ad238291278e127a594be9aef89f00c13e"
                    ]
                },
                {
                    "command": [
                        "red in |- *.",
                        "VernacExtend",
                        "95a3fb9e13ce19fdc8e335912fb83e57a9512b14"
                    ]
                },
                {
                    "command": [
                        "intros H'; try assumption.",
                        "VernacExtend",
                        "f89dc0f02e76585c56cd90566484d3bd23bfeec6"
                    ]
                },
                {
                    "command": [
                        "absurd (in_part x B); auto with algebra.",
                        "VernacExtend",
                        "8c3fa36568ec55e20c061b6ba8c81995f64bc5a3"
                    ]
                },
                {
                    "command": [
                        "apply in_part_comp_l with y; auto with algebra.",
                        "VernacExtend",
                        "a96ecfe6d4f87e02909cce250c1293c1a4089f55"
                    ]
                },
                {
                    "command": [
                        "Defined.",
                        "VernacEndProof",
                        "88c0be54a50df4bb90276c075406fe442428eb9c"
                    ]
                }
            ]
        },
        {
            "name": "diff_comp",
            "line_nb": 18,
            "steps": [
                {
                    "command": [
                        "intros A A' B B'; try assumption.",
                        "VernacExtend",
                        "cf72ad3f39bec5b1207b04158928f66cfc6bc150"
                    ]
                },
                {
                    "command": [
                        "unfold diff in |- *; simpl in |- *.",
                        "VernacExtend",
                        "c084aac805c1b39bf68d0cfe58303983d7d5dcec"
                    ]
                },
                {
                    "command": [
                        "unfold eq_part in |- *; simpl in |- *.",
                        "VernacExtend",
                        "f85bba6666f1278a61d5c9324cec9fb8a1868241"
                    ]
                },
                {
                    "command": [
                        "intros H' H'0 x; split; [ intros H'1; split; [ try assumption | idtac ] | idtac ].",
                        "VernacExtend",
                        "3d97355430ae24e76b37f8e4f596867b674b3cc9"
                    ]
                },
                {
                    "command": [
                        "elim (H' x); intros H'3 H'4; lapply H'3; [ intros H'5; try exact H'5; clear H'3 | clear H'3 ].",
                        "VernacExtend",
                        "a15a09c9872aed7098cc30f60b9239dcb972d206"
                    ]
                },
                {
                    "command": [
                        "elim H'1; intros H'2 H'3; try exact H'2; clear H'1.",
                        "VernacExtend",
                        "83205607ef2e90fb6fd0bf1b7b65c0716bbe633b"
                    ]
                },
                {
                    "command": [
                        "red in |- *.",
                        "VernacExtend",
                        "95a3fb9e13ce19fdc8e335912fb83e57a9512b14"
                    ]
                },
                {
                    "command": [
                        "intros H'2; try assumption.",
                        "VernacExtend",
                        "3e0142f6e43fd4a8990399a81c16960a527db165"
                    ]
                },
                {
                    "command": [
                        "absurd (in_part x B); auto with algebra.",
                        "VernacExtend",
                        "8c3fa36568ec55e20c061b6ba8c81995f64bc5a3"
                    ]
                },
                {
                    "command": [
                        "elim H'1; intros H'3 H'4; try exact H'4; clear H'1.",
                        "VernacExtend",
                        "619d7edf5006d969305c11146e947c07a009b911"
                    ]
                },
                {
                    "command": [
                        "elim (H'0 x); intros H'4 H'5; lapply H'5; [ intros H'6; try exact H'6; clear H'5 | clear H'5 ].",
                        "VernacExtend",
                        "90b1b6f9edfc5d6c6e6117cb287da7eb2d60a0d3"
                    ]
                },
                {
                    "command": [
                        "auto with algebra.",
                        "VernacExtend",
                        "2a8b2ac72ff20b5f342f7b76f72f9b539e5a10f0"
                    ]
                },
                {
                    "command": [
                        "intros H'1; split; [ try assumption | idtac ].",
                        "VernacExtend",
                        "0756c12eafa333feddd5f8f5b01c0c8a3240f717"
                    ]
                },
                {
                    "command": [
                        "elim (H' x); intros H'3 H'4; lapply H'4; [ intros H'5; try exact H'5; clear H'4 | clear H'4 ].",
                        "VernacExtend",
                        "bb45bc642762bd90abdbda7316b057c0d4534dc6"
                    ]
                },
                {
                    "command": [
                        "elim H'1; intros H'2 H'4; try exact H'2; clear H'1.",
                        "VernacExtend",
                        "0f135f22316fd17f0762614281d7f8a3772a4dda"
                    ]
                },
                {
                    "command": [
                        "red in |- *.",
                        "VernacExtend",
                        "95a3fb9e13ce19fdc8e335912fb83e57a9512b14"
                    ]
                },
                {
                    "command": [
                        "intros H'2; try assumption.",
                        "VernacExtend",
                        "3e0142f6e43fd4a8990399a81c16960a527db165"
                    ]
                },
                {
                    "command": [
                        "absurd (in_part x B'); auto with algebra.",
                        "VernacExtend",
                        "e783cc113028a47bbd5921b5a5f86ca575146ff4"
                    ]
                },
                {
                    "command": [
                        "elim H'1; intros H'3 H'4; try exact H'4; clear H'1.",
                        "VernacExtend",
                        "619d7edf5006d969305c11146e947c07a009b911"
                    ]
                },
                {
                    "command": [
                        "elim (H'0 x); intros H'4 H'5; lapply H'4; [ intros H'6; try exact H'6; clear H'4 | clear H'4 ].",
                        "VernacExtend",
                        "b306e9643b95a019ecbd8adcff3d7283de5ea87f"
                    ]
                },
                {
                    "command": [
                        "try exact H'2.",
                        "VernacExtend",
                        "83cdf6056e50dc71acf82ae827f2738262ced2eb"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        }
    ]
}