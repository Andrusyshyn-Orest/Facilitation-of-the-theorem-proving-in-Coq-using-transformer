{
    "filename": "Module_cat.v",
    "coq_project": "algebra",
    "vernac_cmds": [
        [
            "Set Implicit Arguments.",
            "VernacSetOption",
            "9e84ff8896f028601d8aded48c1d4aebe60aa584"
        ],
        [
            "Unset Strict Implicit.",
            "VernacUnsetOption",
            "2842adaf6959318f2042805935c46f513bdc0348"
        ],
        [
            "Require Export Ring_cat.",
            "VernacRequire",
            "976634a9c67b3f19624118610f37983f9885dce2"
        ],
        [
            "Require Export Operation_of_monoid.",
            "VernacRequire",
            "a5def3130fa2d54dd8d7872aadc10e5e2a947606"
        ],
        [
            "Section Def.",
            "VernacBeginSection",
            "891f679f68bab7ae72311468953cd39d353d2080"
        ],
        [
            "Variable R : RING.",
            "VernacAssumption",
            "d0eb88f51e93c9f8be4fd6395fc21fc15a70dea3"
        ],
        [
            "Section Module_def.",
            "VernacBeginSection",
            "988b91c1105967f2916b456bd7242b787fd7945a"
        ],
        [
            "Variable Mod : abelian_group.",
            "VernacAssumption",
            "8b2967eb772593988b25ce30b9e18340937e8425"
        ],
        [
            "Variable op : operation (ring_monoid R) Mod.",
            "VernacAssumption",
            "ccf63ebfedac472c44315de22cbb4ab10f432e94"
        ],
        [
            "Definition op_lin_left := forall (a b : R) (x : Mod), Equal (op (sgroup_law R a b) x) (sgroup_law Mod (op a x) (op b x)).",
            "VernacDefinition",
            "a26cc874e065ff7a486badfbec7847dcb829ab95"
        ],
        [
            "Definition op_lin_right := forall (a : R) (x y : Mod), Equal (op a (sgroup_law Mod x y)) (sgroup_law Mod (op a x) (op a y)).",
            "VernacDefinition",
            "e9af9bbc5bb7e26887088cf87c7c2b9feb43813b"
        ],
        [
            "End Module_def.",
            "VernacEndSegment",
            "7d4b426b4793fc1e359aea6ebc81a6409e268b22"
        ],
        [
            "Record module_on (M : abelian_group) : Type := {module_op : operation (ring_monoid R) M; module_op_lin_left_prf : op_lin_left module_op; module_op_lin_right_prf : op_lin_right module_op}.",
            "VernacInductive",
            "7f2ca272511e70f506da57d61d86305d1e197be3"
        ],
        [
            "Record module : Type := {module_carrier :> abelian_group; module_on_def :> module_on module_carrier}.",
            "VernacInductive",
            "c97f860ef6bee0cbf7d640c824a8aa8cd0487f5c"
        ],
        [
            "Coercion Build_module : module_on >-> module.",
            "VernacCoercion",
            "149d22a290eecde920312267db7ad14623408460"
        ],
        [
            "Definition module_mult (B : module) (a : R) (x : B) := module_op B a x.",
            "VernacDefinition",
            "651d30fad306ad48f3693d80f9d079836a0c9e52"
        ],
        [
            "Section Hom.",
            "VernacBeginSection",
            "a9f226bbfd2d74d779eb92c4ae4f70b35e08ec3f"
        ],
        [
            "Variable E F : module.",
            "VernacAssumption",
            "8db2b5e5d07f4e35b24379f66bf6d8f6bcf11a0c"
        ],
        [
            "Definition module_hom_prop (f : E -> F) := forall (a : R) (x : E), Equal (f (module_mult a x)) (module_mult a (f x)).",
            "VernacDefinition",
            "3e77434ea75749feca240f64e57f0407a0f43639"
        ],
        [
            "Record module_hom : Type := {module_monoid_hom :> monoid_hom E F; module_hom_prf : module_hom_prop module_monoid_hom}.",
            "VernacInductive",
            "e1a860290ee199293d087498bfc68198eb658a52"
        ],
        [
            "End Hom.",
            "VernacEndSegment",
            "416d5654c7f3e72b253a9e7625b8dfdbf6abb7e5"
        ],
        [
            "Definition module_hom_comp : forall E F Mod : module, module_hom F Mod -> module_hom E F -> module_hom E Mod.",
            "VernacDefinition",
            "f4a0614616769b9e959e9c38d5e2b1cc7e515977"
        ],
        [
            "intros E F Mod g f; try assumption.",
            "VernacExtend",
            "191d116e59512fc30ed220eaf61c3ff3fba98f1f"
        ],
        [
            "apply (Build_module_hom (E:=E) (F:=Mod) (module_monoid_hom:=monoid_hom_comp g f)).",
            "VernacExtend",
            "764ea0ea0df982b50ca76fb6c374ddd334879a2b"
        ],
        [
            "unfold module_hom_prop in |- *; auto with algebra.",
            "VernacExtend",
            "94da6350d8024752f08109313befe2acc03b43c2"
        ],
        [
            "simpl in |- *.",
            "VernacExtend",
            "1b93169f4cf876d207c1fab22a2347202ab48d85"
        ],
        [
            "unfold comp_map_fun in |- *.",
            "VernacExtend",
            "bf09c747c7184fd7f9e6e096f3a9853a912f8318"
        ],
        [
            "intros a x; try assumption.",
            "VernacExtend",
            "97dd1c59c51d2899a08618b65264cd4e7d0bc6c8"
        ],
        [
            "apply Trans with (Ap (sgroup_map (monoid_sgroup_hom (module_monoid_hom g))) (module_mult a (Ap (sgroup_map (monoid_sgroup_hom (module_monoid_hom f))) x))).",
            "VernacExtend",
            "ded4b2095280b5914ed36cf946e396d4d1b4264f"
        ],
        [
            "cut (Equal (Ap (sgroup_map (monoid_sgroup_hom (module_monoid_hom f))) (module_mult a x)) (module_mult a (Ap (sgroup_map (monoid_sgroup_hom (module_monoid_hom f))) x))).",
            "VernacExtend",
            "aba52c8b7c0981d4ee77be6ebeef571f15c8aedb"
        ],
        [
            "auto with algebra.",
            "VernacExtend",
            "2a8b2ac72ff20b5f342f7b76f72f9b539e5a10f0"
        ],
        [
            "apply (module_hom_prf f).",
            "VernacExtend",
            "0d2f7e0504156f5ed4855aeb9ff49f9f8141c065"
        ],
        [
            "apply (module_hom_prf g).",
            "VernacExtend",
            "622fced9963524c201003c68ea12803a86a45620"
        ],
        [
            "Defined.",
            "VernacEndProof",
            "88c0be54a50df4bb90276c075406fe442428eb9c"
        ],
        [
            "Definition module_id : forall E : module, module_hom E E.",
            "VernacDefinition",
            "637fd8d95b267217497c2f30ec2b650fd80c10fd"
        ],
        [
            "intros E; try assumption.",
            "VernacExtend",
            "e478e84a6462d0df5eb4d5537ab1a669dc68053f"
        ],
        [
            "apply (Build_module_hom (module_monoid_hom:=monoid_id E)).",
            "VernacExtend",
            "5d72acbaf72f4811831415a826147e09df3ffad5"
        ],
        [
            "red in |- *.",
            "VernacExtend",
            "95a3fb9e13ce19fdc8e335912fb83e57a9512b14"
        ],
        [
            "simpl in |- *; auto with algebra.",
            "VernacExtend",
            "d6b9b4fa1f9e16b197ca7f795deb2bc736dbeac5"
        ],
        [
            "Defined.",
            "VernacEndProof",
            "88c0be54a50df4bb90276c075406fe442428eb9c"
        ],
        [
            "Definition MODULE : category.",
            "VernacDefinition",
            "3be6ad1e394f5dd0714c83375ab9bfcf542d4b1e"
        ],
        [
            "apply (subcat (C:=MONOID) (C':=module) (i:=module_carrier) (homC':=fun E F : module => Build_subtype_image (E:=Hom (c:=ABELIAN_GROUP) E F) (subtype_image_carrier:=module_hom E F) (module_monoid_hom (E:=E) (F:=F))) (CompC':=module_hom_comp) (idC':=module_id)).",
            "VernacExtend",
            "84b023d5b074b0ea81df8e60cafa1ab20322cac4"
        ],
        [
            "simpl in |- *.",
            "VernacExtend",
            "1b93169f4cf876d207c1fab22a2347202ab48d85"
        ],
        [
            "intros a; try assumption.",
            "VernacExtend",
            "ce5e79ff69b9a4890a65e94be476c396641e9efd"
        ],
        [
            "red in |- *.",
            "VernacExtend",
            "95a3fb9e13ce19fdc8e335912fb83e57a9512b14"
        ],
        [
            "auto with algebra.",
            "VernacExtend",
            "2a8b2ac72ff20b5f342f7b76f72f9b539e5a10f0"
        ],
        [
            "simpl in |- *.",
            "VernacExtend",
            "1b93169f4cf876d207c1fab22a2347202ab48d85"
        ],
        [
            "intros a b c g f; try assumption.",
            "VernacExtend",
            "d526c4e54747dc563727ee2cb39c129c2a78201b"
        ],
        [
            "red in |- *.",
            "VernacExtend",
            "95a3fb9e13ce19fdc8e335912fb83e57a9512b14"
        ],
        [
            "auto with algebra.",
            "VernacExtend",
            "2a8b2ac72ff20b5f342f7b76f72f9b539e5a10f0"
        ],
        [
            "Defined.",
            "VernacEndProof",
            "88c0be54a50df4bb90276c075406fe442428eb9c"
        ],
        [
            "End Def.",
            "VernacEndSegment",
            "616ad5692568c74f61a9df3a82ac03d2b7ebac01"
        ]
    ],
    "proofs": [
        {
            "name": "module_hom_comp",
            "line_nb": 21,
            "steps": [
                {
                    "command": [
                        "intros E F Mod g f; try assumption.",
                        "VernacExtend",
                        "191d116e59512fc30ed220eaf61c3ff3fba98f1f"
                    ]
                },
                {
                    "command": [
                        "apply (Build_module_hom (E:=E) (F:=Mod) (module_monoid_hom:=monoid_hom_comp g f)).",
                        "VernacExtend",
                        "764ea0ea0df982b50ca76fb6c374ddd334879a2b"
                    ]
                },
                {
                    "command": [
                        "unfold module_hom_prop in |- *; auto with algebra.",
                        "VernacExtend",
                        "94da6350d8024752f08109313befe2acc03b43c2"
                    ]
                },
                {
                    "command": [
                        "simpl in |- *.",
                        "VernacExtend",
                        "1b93169f4cf876d207c1fab22a2347202ab48d85"
                    ]
                },
                {
                    "command": [
                        "unfold comp_map_fun in |- *.",
                        "VernacExtend",
                        "bf09c747c7184fd7f9e6e096f3a9853a912f8318"
                    ]
                },
                {
                    "command": [
                        "intros a x; try assumption.",
                        "VernacExtend",
                        "97dd1c59c51d2899a08618b65264cd4e7d0bc6c8"
                    ]
                },
                {
                    "command": [
                        "apply Trans with (Ap (sgroup_map (monoid_sgroup_hom (module_monoid_hom g))) (module_mult a (Ap (sgroup_map (monoid_sgroup_hom (module_monoid_hom f))) x))).",
                        "VernacExtend",
                        "ded4b2095280b5914ed36cf946e396d4d1b4264f"
                    ]
                },
                {
                    "command": [
                        "cut (Equal (Ap (sgroup_map (monoid_sgroup_hom (module_monoid_hom f))) (module_mult a x)) (module_mult a (Ap (sgroup_map (monoid_sgroup_hom (module_monoid_hom f))) x))).",
                        "VernacExtend",
                        "aba52c8b7c0981d4ee77be6ebeef571f15c8aedb"
                    ]
                },
                {
                    "command": [
                        "auto with algebra.",
                        "VernacExtend",
                        "2a8b2ac72ff20b5f342f7b76f72f9b539e5a10f0"
                    ]
                },
                {
                    "command": [
                        "apply (module_hom_prf f).",
                        "VernacExtend",
                        "0d2f7e0504156f5ed4855aeb9ff49f9f8141c065"
                    ]
                },
                {
                    "command": [
                        "apply (module_hom_prf g).",
                        "VernacExtend",
                        "622fced9963524c201003c68ea12803a86a45620"
                    ]
                },
                {
                    "command": [
                        "Defined.",
                        "VernacEndProof",
                        "88c0be54a50df4bb90276c075406fe442428eb9c"
                    ]
                }
            ]
        },
        {
            "name": "module_id",
            "line_nb": 34,
            "steps": [
                {
                    "command": [
                        "intros E; try assumption.",
                        "VernacExtend",
                        "e478e84a6462d0df5eb4d5537ab1a669dc68053f"
                    ]
                },
                {
                    "command": [
                        "apply (Build_module_hom (module_monoid_hom:=monoid_id E)).",
                        "VernacExtend",
                        "5d72acbaf72f4811831415a826147e09df3ffad5"
                    ]
                },
                {
                    "command": [
                        "red in |- *.",
                        "VernacExtend",
                        "95a3fb9e13ce19fdc8e335912fb83e57a9512b14"
                    ]
                },
                {
                    "command": [
                        "simpl in |- *; auto with algebra.",
                        "VernacExtend",
                        "d6b9b4fa1f9e16b197ca7f795deb2bc736dbeac5"
                    ]
                },
                {
                    "command": [
                        "Defined.",
                        "VernacEndProof",
                        "88c0be54a50df4bb90276c075406fe442428eb9c"
                    ]
                }
            ]
        },
        {
            "name": "MODULE",
            "line_nb": 40,
            "steps": [
                {
                    "command": [
                        "apply (subcat (C:=MONOID) (C':=module) (i:=module_carrier) (homC':=fun E F : module => Build_subtype_image (E:=Hom (c:=ABELIAN_GROUP) E F) (subtype_image_carrier:=module_hom E F) (module_monoid_hom (E:=E) (F:=F))) (CompC':=module_hom_comp) (idC':=module_id)).",
                        "VernacExtend",
                        "84b023d5b074b0ea81df8e60cafa1ab20322cac4"
                    ]
                },
                {
                    "command": [
                        "simpl in |- *.",
                        "VernacExtend",
                        "1b93169f4cf876d207c1fab22a2347202ab48d85"
                    ]
                },
                {
                    "command": [
                        "intros a; try assumption.",
                        "VernacExtend",
                        "ce5e79ff69b9a4890a65e94be476c396641e9efd"
                    ]
                },
                {
                    "command": [
                        "red in |- *.",
                        "VernacExtend",
                        "95a3fb9e13ce19fdc8e335912fb83e57a9512b14"
                    ]
                },
                {
                    "command": [
                        "auto with algebra.",
                        "VernacExtend",
                        "2a8b2ac72ff20b5f342f7b76f72f9b539e5a10f0"
                    ]
                },
                {
                    "command": [
                        "simpl in |- *.",
                        "VernacExtend",
                        "1b93169f4cf876d207c1fab22a2347202ab48d85"
                    ]
                },
                {
                    "command": [
                        "intros a b c g f; try assumption.",
                        "VernacExtend",
                        "d526c4e54747dc563727ee2cb39c129c2a78201b"
                    ]
                },
                {
                    "command": [
                        "red in |- *.",
                        "VernacExtend",
                        "95a3fb9e13ce19fdc8e335912fb83e57a9512b14"
                    ]
                },
                {
                    "command": [
                        "auto with algebra.",
                        "VernacExtend",
                        "2a8b2ac72ff20b5f342f7b76f72f9b539e5a10f0"
                    ]
                },
                {
                    "command": [
                        "Defined.",
                        "VernacEndProof",
                        "88c0be54a50df4bb90276c075406fe442428eb9c"
                    ]
                }
            ]
        }
    ]
}