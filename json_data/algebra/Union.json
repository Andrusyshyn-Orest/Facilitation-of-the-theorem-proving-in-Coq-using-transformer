{
    "filename": "Union.v",
    "coq_project": "algebra",
    "vernac_cmds": [
        [
            "Set Implicit Arguments.",
            "VernacSetOption",
            "9e84ff8896f028601d8aded48c1d4aebe60aa584"
        ],
        [
            "Unset Strict Implicit.",
            "VernacUnsetOption",
            "2842adaf6959318f2042805935c46f513bdc0348"
        ],
        [
            "Require Export Parts.",
            "VernacRequire",
            "535a8673b0f8ec74d32f83dd6ddb45ca3ae921a1"
        ],
        [
            "Section Union1.",
            "VernacBeginSection",
            "8252fd107c81ad53a653cf21a9ec3cdda0300c68"
        ],
        [
            "Variable E : Setoid.",
            "VernacAssumption",
            "cafb1870f48a7785473ed62f8eb64582fbbe308d"
        ],
        [
            "Definition union : part_set E -> part_set E -> part_set E.",
            "VernacDefinition",
            "78f6edcd61e2140e028a753a85fc0c942044d1b2"
        ],
        [
            "intros A B.",
            "VernacExtend",
            "f0fdd14fe43c412ab9e9cf2b93b27330098322c4"
        ],
        [
            "apply (Build_Predicate (Pred_fun:=fun x : E => in_part x A \\/ in_part x B)).",
            "VernacExtend",
            "ddc6f11e9621d3eb1e41170450e1b24958d8284f"
        ],
        [
            "red in |- *.",
            "VernacExtend",
            "95a3fb9e13ce19fdc8e335912fb83e57a9512b14"
        ],
        [
            "intros x y H' H'0; try assumption.",
            "VernacExtend",
            "80824be427f661dd57d0ea65f59a8a8dc948972f"
        ],
        [
            "elim H'; [ intros H'1; try exact H'1; clear H' | intros H'1; clear H' ].",
            "VernacExtend",
            "bdc99041511749c3578740962c0cda71e528bb28"
        ],
        [
            "left; try assumption.",
            "VernacExtend",
            "061f6989ab3496c741b90a65c34743f4f38e0b40"
        ],
        [
            "apply in_part_comp_l with x; auto with algebra.",
            "VernacExtend",
            "137022ad238291278e127a594be9aef89f00c13e"
        ],
        [
            "right; try assumption.",
            "VernacExtend",
            "2489f0a66f336dd61dea20ffe815515ae4afca51"
        ],
        [
            "apply in_part_comp_l with x; auto with algebra.",
            "VernacExtend",
            "137022ad238291278e127a594be9aef89f00c13e"
        ],
        [
            "Defined.",
            "VernacEndProof",
            "88c0be54a50df4bb90276c075406fe442428eb9c"
        ],
        [
            "Lemma included_union_l : forall A B : part_set E, included A (union A B).",
            "VernacStartTheoremProof",
            "df3ea3c8ff126ce590c951e19ee1130a1c773b2c"
        ],
        [
            "unfold included in |- *; simpl in |- *; intuition.",
            "VernacExtend",
            "66cf7e9198f2ccd09d3b94b4ec15c84b639142ac"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma included_union_r : forall A B : part_set E, included B (union A B).",
            "VernacStartTheoremProof",
            "053ca2b0d4f099549cc2c6ffd16ffe6882b842e8"
        ],
        [
            "unfold included in |- *; simpl in |- *; intuition.",
            "VernacExtend",
            "66cf7e9198f2ccd09d3b94b4ec15c84b639142ac"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma in_part_union_l : forall (A B : part_set E) (x : E), in_part x A -> in_part x (union A B).",
            "VernacStartTheoremProof",
            "ffbdd3ec100e926580969188fe99da942bb3e51c"
        ],
        [
            "simpl in |- *; intuition.",
            "VernacExtend",
            "2a8f84ed3abedbe9d9fbb80aa4215114cbdbe500"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma in_part_union_r : forall (A B : part_set E) (x : E), in_part x B -> in_part x (union A B).",
            "VernacStartTheoremProof",
            "f0abc7209dbfece2c983a95a35dcd365a7b1a325"
        ],
        [
            "simpl in |- *; intuition.",
            "VernacExtend",
            "2a8f84ed3abedbe9d9fbb80aa4215114cbdbe500"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Parameter in_part_union_or : forall (A B : part_set E) (x : E), in_part x A \\/ in_part x B -> in_part x (union A B).",
            "VernacAssumption",
            "161c9a7a32b9fb637be869d581c289f98ca53388"
        ],
        [
            "Lemma in_part_union : forall (A B : part_set E) (x : E), in_part x (union A B) -> in_part x A \\/ in_part x B.",
            "VernacStartTheoremProof",
            "9124180513945c2a5c6bdb789b7527f111b2e597"
        ],
        [
            "intros A B x; try assumption.",
            "VernacExtend",
            "283d0664da24a1fb01294e0884c1093833937afc"
        ],
        [
            "unfold union in |- *; intuition.",
            "VernacExtend",
            "cab018bdc0d10e9d25c5a43b27104d83be95a62b"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma union_not_in_l : forall (A B : part_set E) (x : E), in_part x (union A B) -> ~ in_part x A -> in_part x B.",
            "VernacStartTheoremProof",
            "1e0e759f887099539bc315bfdafad7a8bc53d0a4"
        ],
        [
            "unfold union in |- *; simpl in |- *; intuition.",
            "VernacExtend",
            "a5aa89126314917837c19cf495915dc5b988a4da"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma included2_union : forall A B C : part_set E, included A C -> included B C -> included (union A B) C.",
            "VernacStartTheoremProof",
            "a738ae3df9a5e91e1cb72f03f0b24f81862b9ab1"
        ],
        [
            "unfold included in |- *; simpl in |- *; intuition.",
            "VernacExtend",
            "66cf7e9198f2ccd09d3b94b4ec15c84b639142ac"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma union_comp : forall A A' B B' : part_set E, Equal A A' -> Equal B B' -> Equal (union A B) (union A' B').",
            "VernacStartTheoremProof",
            "57300bfe40edfac2529ee6166e6fa62d65532c3f"
        ],
        [
            "unfold union in |- *; simpl in |- *.",
            "VernacExtend",
            "fb62c2b6ead7acc430d54d63a53423cac815e3a1"
        ],
        [
            "unfold eq_part in |- *; simpl in |- *.",
            "VernacExtend",
            "f85bba6666f1278a61d5c9324cec9fb8a1868241"
        ],
        [
            "intros A A' B B' H' H'0 x; split; [ intros H'1; try assumption | idtac ].",
            "VernacExtend",
            "9c3f05fa4cc63fd4e2f9aff4802e3658e96133a5"
        ],
        [
            "elim H'1; [ intros H'2; try exact H'2; clear H'1 | intros H'2; clear H'1 ].",
            "VernacExtend",
            "3fd014b964cb44285d6e9e01e87e042d8daeb4c6"
        ],
        [
            "left; try assumption.",
            "VernacExtend",
            "061f6989ab3496c741b90a65c34743f4f38e0b40"
        ],
        [
            "elim (H' x); intros H'3 H'4; lapply H'3; [ intros H'5; try exact H'5; clear H'3 | clear H'3 ].",
            "VernacExtend",
            "a15a09c9872aed7098cc30f60b9239dcb972d206"
        ],
        [
            "auto with algebra.",
            "VernacExtend",
            "2a8b2ac72ff20b5f342f7b76f72f9b539e5a10f0"
        ],
        [
            "right; try assumption.",
            "VernacExtend",
            "2489f0a66f336dd61dea20ffe815515ae4afca51"
        ],
        [
            "elim (H'0 x); intros H'3 H'4; lapply H'3; [ intros H'5; try exact H'5; clear H'3 | clear H'3 ].",
            "VernacExtend",
            "acbc2153f7bcf65d2ac4f6ba09503616474236ef"
        ],
        [
            "auto with algebra.",
            "VernacExtend",
            "2a8b2ac72ff20b5f342f7b76f72f9b539e5a10f0"
        ],
        [
            "intros H'1; try assumption.",
            "VernacExtend",
            "36f49af2627c9f2414e15c73ddeebdc5b206aded"
        ],
        [
            "elim H'1; [ intros H'2; try exact H'2; clear H'1 | intros H'2; clear H'1 ].",
            "VernacExtend",
            "3fd014b964cb44285d6e9e01e87e042d8daeb4c6"
        ],
        [
            "left; try assumption.",
            "VernacExtend",
            "061f6989ab3496c741b90a65c34743f4f38e0b40"
        ],
        [
            "elim (H' x); intros H'3 H'4; lapply H'4; [ intros H'5; try exact H'5; clear H'4 | clear H'4 ].",
            "VernacExtend",
            "bb45bc642762bd90abdbda7316b057c0d4534dc6"
        ],
        [
            "auto with algebra.",
            "VernacExtend",
            "2a8b2ac72ff20b5f342f7b76f72f9b539e5a10f0"
        ],
        [
            "right; try assumption.",
            "VernacExtend",
            "2489f0a66f336dd61dea20ffe815515ae4afca51"
        ],
        [
            "elim (H'0 x); intros H'3 H'4; lapply H'4; [ intros H'5; try exact H'5; clear H'4 | clear H'4 ].",
            "VernacExtend",
            "b360bbbecc292caf6b05f2b585230edc585c61e5"
        ],
        [
            "auto with algebra.",
            "VernacExtend",
            "2a8b2ac72ff20b5f342f7b76f72f9b539e5a10f0"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma union_assoc : forall A B C : part_set E, Equal (union A (union B C)) (union (union A B) C).",
            "VernacStartTheoremProof",
            "f7967f83bf40c6a5fcbb93b77d97ea2fde573626"
        ],
        [
            "unfold union in |- *; simpl in |- *.",
            "VernacExtend",
            "fb62c2b6ead7acc430d54d63a53423cac815e3a1"
        ],
        [
            "unfold eq_part in |- *; simpl in |- *.",
            "VernacExtend",
            "f85bba6666f1278a61d5c9324cec9fb8a1868241"
        ],
        [
            "intros A B C x; split; [ try assumption | idtac ].",
            "VernacExtend",
            "08ecd0daeadd9861c312d6ad3230253101b44442"
        ],
        [
            "intuition.",
            "VernacExtend",
            "ebd9388eeb482972743f9cce5cbddbd85ca5bdfd"
        ],
        [
            "intuition.",
            "VernacExtend",
            "ebd9388eeb482972743f9cce5cbddbd85ca5bdfd"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma union_com : forall A B : part_set E, Equal (union A B) (union B A).",
            "VernacStartTheoremProof",
            "087a7d15ce62f8253e7ac8d6020ee828b68dfb03"
        ],
        [
            "unfold union in |- *; simpl in |- *.",
            "VernacExtend",
            "fb62c2b6ead7acc430d54d63a53423cac815e3a1"
        ],
        [
            "unfold eq_part in |- *; simpl in |- *.",
            "VernacExtend",
            "f85bba6666f1278a61d5c9324cec9fb8a1868241"
        ],
        [
            "intros A B x; split; [ try assumption | idtac ].",
            "VernacExtend",
            "6bb27625530d0acc3b6fb55d5cb2446313aa176b"
        ],
        [
            "intuition.",
            "VernacExtend",
            "ebd9388eeb482972743f9cce5cbddbd85ca5bdfd"
        ],
        [
            "intuition.",
            "VernacExtend",
            "ebd9388eeb482972743f9cce5cbddbd85ca5bdfd"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Parameter union_empty_l : forall A : part_set E, Equal (union (empty E) A) A.",
            "VernacAssumption",
            "697b666de8751189715eec1fa529010df0ed73d9"
        ],
        [
            "Parameter union_empty_r : forall A : part_set E, Equal (union A (empty E)) A.",
            "VernacAssumption",
            "1a426c7d2a2c4372455c2be4e018809aa04bc6d1"
        ],
        [
            "End Union1.",
            "VernacEndSegment",
            "95065a1d89e9239de6b2de088a9682241533f2c0"
        ],
        [
            "Hint Resolve included_union_l included_union_r in_part_union_l in_part_union_r included2_union union_comp union_assoc union_empty_l union_empty_r: algebra.",
            "VernacHints",
            "232a6d4ebf82f18ce1c13614b0bda81716129ae5"
        ],
        [
            "Hint Immediate union_com: algebra.",
            "VernacHints",
            "9102ac3a6fb48310315f6765b0e2f423d0d37d28"
        ]
    ],
    "proofs": [
        {
            "name": "union",
            "line_nb": 5,
            "steps": [
                {
                    "command": [
                        "intros A B.",
                        "VernacExtend",
                        "f0fdd14fe43c412ab9e9cf2b93b27330098322c4"
                    ]
                },
                {
                    "command": [
                        "apply (Build_Predicate (Pred_fun:=fun x : E => in_part x A \\/ in_part x B)).",
                        "VernacExtend",
                        "ddc6f11e9621d3eb1e41170450e1b24958d8284f"
                    ]
                },
                {
                    "command": [
                        "red in |- *.",
                        "VernacExtend",
                        "95a3fb9e13ce19fdc8e335912fb83e57a9512b14"
                    ]
                },
                {
                    "command": [
                        "intros x y H' H'0; try assumption.",
                        "VernacExtend",
                        "80824be427f661dd57d0ea65f59a8a8dc948972f"
                    ]
                },
                {
                    "command": [
                        "elim H'; [ intros H'1; try exact H'1; clear H' | intros H'1; clear H' ].",
                        "VernacExtend",
                        "bdc99041511749c3578740962c0cda71e528bb28"
                    ]
                },
                {
                    "command": [
                        "left; try assumption.",
                        "VernacExtend",
                        "061f6989ab3496c741b90a65c34743f4f38e0b40"
                    ]
                },
                {
                    "command": [
                        "apply in_part_comp_l with x; auto with algebra.",
                        "VernacExtend",
                        "137022ad238291278e127a594be9aef89f00c13e"
                    ]
                },
                {
                    "command": [
                        "right; try assumption.",
                        "VernacExtend",
                        "2489f0a66f336dd61dea20ffe815515ae4afca51"
                    ]
                },
                {
                    "command": [
                        "apply in_part_comp_l with x; auto with algebra.",
                        "VernacExtend",
                        "137022ad238291278e127a594be9aef89f00c13e"
                    ]
                },
                {
                    "command": [
                        "Defined.",
                        "VernacEndProof",
                        "88c0be54a50df4bb90276c075406fe442428eb9c"
                    ]
                }
            ]
        },
        {
            "name": "included_union_l",
            "line_nb": 16,
            "steps": [
                {
                    "command": [
                        "unfold included in |- *; simpl in |- *; intuition.",
                        "VernacExtend",
                        "66cf7e9198f2ccd09d3b94b4ec15c84b639142ac"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "included_union_r",
            "line_nb": 19,
            "steps": [
                {
                    "command": [
                        "unfold included in |- *; simpl in |- *; intuition.",
                        "VernacExtend",
                        "66cf7e9198f2ccd09d3b94b4ec15c84b639142ac"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "in_part_union_l",
            "line_nb": 22,
            "steps": [
                {
                    "command": [
                        "simpl in |- *; intuition.",
                        "VernacExtend",
                        "2a8f84ed3abedbe9d9fbb80aa4215114cbdbe500"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "in_part_union_r",
            "line_nb": 25,
            "steps": [
                {
                    "command": [
                        "simpl in |- *; intuition.",
                        "VernacExtend",
                        "2a8f84ed3abedbe9d9fbb80aa4215114cbdbe500"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "in_part_union",
            "line_nb": 29,
            "steps": [
                {
                    "command": [
                        "intros A B x; try assumption.",
                        "VernacExtend",
                        "283d0664da24a1fb01294e0884c1093833937afc"
                    ]
                },
                {
                    "command": [
                        "unfold union in |- *; intuition.",
                        "VernacExtend",
                        "cab018bdc0d10e9d25c5a43b27104d83be95a62b"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "union_not_in_l",
            "line_nb": 33,
            "steps": [
                {
                    "command": [
                        "unfold union in |- *; simpl in |- *; intuition.",
                        "VernacExtend",
                        "a5aa89126314917837c19cf495915dc5b988a4da"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "included2_union",
            "line_nb": 36,
            "steps": [
                {
                    "command": [
                        "unfold included in |- *; simpl in |- *; intuition.",
                        "VernacExtend",
                        "66cf7e9198f2ccd09d3b94b4ec15c84b639142ac"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "union_comp",
            "line_nb": 39,
            "steps": [
                {
                    "command": [
                        "unfold union in |- *; simpl in |- *.",
                        "VernacExtend",
                        "fb62c2b6ead7acc430d54d63a53423cac815e3a1"
                    ]
                },
                {
                    "command": [
                        "unfold eq_part in |- *; simpl in |- *.",
                        "VernacExtend",
                        "f85bba6666f1278a61d5c9324cec9fb8a1868241"
                    ]
                },
                {
                    "command": [
                        "intros A A' B B' H' H'0 x; split; [ intros H'1; try assumption | idtac ].",
                        "VernacExtend",
                        "9c3f05fa4cc63fd4e2f9aff4802e3658e96133a5"
                    ]
                },
                {
                    "command": [
                        "elim H'1; [ intros H'2; try exact H'2; clear H'1 | intros H'2; clear H'1 ].",
                        "VernacExtend",
                        "3fd014b964cb44285d6e9e01e87e042d8daeb4c6"
                    ]
                },
                {
                    "command": [
                        "left; try assumption.",
                        "VernacExtend",
                        "061f6989ab3496c741b90a65c34743f4f38e0b40"
                    ]
                },
                {
                    "command": [
                        "elim (H' x); intros H'3 H'4; lapply H'3; [ intros H'5; try exact H'5; clear H'3 | clear H'3 ].",
                        "VernacExtend",
                        "a15a09c9872aed7098cc30f60b9239dcb972d206"
                    ]
                },
                {
                    "command": [
                        "auto with algebra.",
                        "VernacExtend",
                        "2a8b2ac72ff20b5f342f7b76f72f9b539e5a10f0"
                    ]
                },
                {
                    "command": [
                        "right; try assumption.",
                        "VernacExtend",
                        "2489f0a66f336dd61dea20ffe815515ae4afca51"
                    ]
                },
                {
                    "command": [
                        "elim (H'0 x); intros H'3 H'4; lapply H'3; [ intros H'5; try exact H'5; clear H'3 | clear H'3 ].",
                        "VernacExtend",
                        "acbc2153f7bcf65d2ac4f6ba09503616474236ef"
                    ]
                },
                {
                    "command": [
                        "auto with algebra.",
                        "VernacExtend",
                        "2a8b2ac72ff20b5f342f7b76f72f9b539e5a10f0"
                    ]
                },
                {
                    "command": [
                        "intros H'1; try assumption.",
                        "VernacExtend",
                        "36f49af2627c9f2414e15c73ddeebdc5b206aded"
                    ]
                },
                {
                    "command": [
                        "elim H'1; [ intros H'2; try exact H'2; clear H'1 | intros H'2; clear H'1 ].",
                        "VernacExtend",
                        "3fd014b964cb44285d6e9e01e87e042d8daeb4c6"
                    ]
                },
                {
                    "command": [
                        "left; try assumption.",
                        "VernacExtend",
                        "061f6989ab3496c741b90a65c34743f4f38e0b40"
                    ]
                },
                {
                    "command": [
                        "elim (H' x); intros H'3 H'4; lapply H'4; [ intros H'5; try exact H'5; clear H'4 | clear H'4 ].",
                        "VernacExtend",
                        "bb45bc642762bd90abdbda7316b057c0d4534dc6"
                    ]
                },
                {
                    "command": [
                        "auto with algebra.",
                        "VernacExtend",
                        "2a8b2ac72ff20b5f342f7b76f72f9b539e5a10f0"
                    ]
                },
                {
                    "command": [
                        "right; try assumption.",
                        "VernacExtend",
                        "2489f0a66f336dd61dea20ffe815515ae4afca51"
                    ]
                },
                {
                    "command": [
                        "elim (H'0 x); intros H'3 H'4; lapply H'4; [ intros H'5; try exact H'5; clear H'4 | clear H'4 ].",
                        "VernacExtend",
                        "b360bbbecc292caf6b05f2b585230edc585c61e5"
                    ]
                },
                {
                    "command": [
                        "auto with algebra.",
                        "VernacExtend",
                        "2a8b2ac72ff20b5f342f7b76f72f9b539e5a10f0"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "union_assoc",
            "line_nb": 59,
            "steps": [
                {
                    "command": [
                        "unfold union in |- *; simpl in |- *.",
                        "VernacExtend",
                        "fb62c2b6ead7acc430d54d63a53423cac815e3a1"
                    ]
                },
                {
                    "command": [
                        "unfold eq_part in |- *; simpl in |- *.",
                        "VernacExtend",
                        "f85bba6666f1278a61d5c9324cec9fb8a1868241"
                    ]
                },
                {
                    "command": [
                        "intros A B C x; split; [ try assumption | idtac ].",
                        "VernacExtend",
                        "08ecd0daeadd9861c312d6ad3230253101b44442"
                    ]
                },
                {
                    "command": [
                        "intuition.",
                        "VernacExtend",
                        "ebd9388eeb482972743f9cce5cbddbd85ca5bdfd"
                    ]
                },
                {
                    "command": [
                        "intuition.",
                        "VernacExtend",
                        "ebd9388eeb482972743f9cce5cbddbd85ca5bdfd"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "union_com",
            "line_nb": 66,
            "steps": [
                {
                    "command": [
                        "unfold union in |- *; simpl in |- *.",
                        "VernacExtend",
                        "fb62c2b6ead7acc430d54d63a53423cac815e3a1"
                    ]
                },
                {
                    "command": [
                        "unfold eq_part in |- *; simpl in |- *.",
                        "VernacExtend",
                        "f85bba6666f1278a61d5c9324cec9fb8a1868241"
                    ]
                },
                {
                    "command": [
                        "intros A B x; split; [ try assumption | idtac ].",
                        "VernacExtend",
                        "6bb27625530d0acc3b6fb55d5cb2446313aa176b"
                    ]
                },
                {
                    "command": [
                        "intuition.",
                        "VernacExtend",
                        "ebd9388eeb482972743f9cce5cbddbd85ca5bdfd"
                    ]
                },
                {
                    "command": [
                        "intuition.",
                        "VernacExtend",
                        "ebd9388eeb482972743f9cce5cbddbd85ca5bdfd"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        }
    ]
}