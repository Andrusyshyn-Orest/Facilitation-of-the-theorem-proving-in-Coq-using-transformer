{
    "filename": "Fmap.v",
    "coq_project": "algebra",
    "vernac_cmds": [
        [
            "Set Implicit Arguments.",
            "VernacSetOption",
            "9e84ff8896f028601d8aded48c1d4aebe60aa584"
        ],
        [
            "Unset Strict Implicit.",
            "VernacUnsetOption",
            "2842adaf6959318f2042805935c46f513bdc0348"
        ],
        [
            "Require Export Tiroirs.",
            "VernacRequire",
            "006d7aa74df9b5b5439aa62a18cc37a69af0de09"
        ],
        [
            "Require Export Parts2.",
            "VernacRequire",
            "a83f2a70b5bd814cb1789cfdf7e823ee92ad387a"
        ],
        [
            "Require Export Classical_Pred_Type.",
            "VernacRequire",
            "dd77b95253996be50c986981af9a721f9450c608"
        ],
        [
            "Require Export Compare_dec.",
            "VernacRequire",
            "07740b4f9d7a269077d4962024b3c9137fa46a8d"
        ],
        [
            "Lemma not_injective_prop : forall (A B : Setoid) (f : MAP A B), ~ injective f -> exists x : A, (exists y : A, ~ Equal x y /\\ Equal (f x) (f y)).",
            "VernacStartTheoremProof",
            "34b4de8525b5fe18d14083143a9ab9714df3dcbc"
        ],
        [
            "unfold injective in |- *.",
            "VernacExtend",
            "9c517f814102c09f8923135c0ed56233bff984fa"
        ],
        [
            "intros A B f H'; try assumption.",
            "VernacExtend",
            "e4bcf328ef6b857dfbf29c9c4795802690294621"
        ],
        [
            "cut (ex (fun x : A => ~ (forall y : A, ~ (~ Equal x y /\\ Equal (Ap f x) (Ap f y))))).",
            "VernacExtend",
            "38559db77601e7e9e8e8e4c905f1c83e9ffedb41"
        ],
        [
            "intros H'0; try assumption.",
            "VernacExtend",
            "4cdfb5ff555980b7fe10aad1aff23df9d3ecf363"
        ],
        [
            "elim H'0; intros x E; try exact E; clear H'0.",
            "VernacExtend",
            "33d857e1e760c085d3993a593b1ded19dbf4af8b"
        ],
        [
            "exists x; try assumption.",
            "VernacExtend",
            "a251c410f0ab72130a5a312ded511c093841a93c"
        ],
        [
            "cut (ex (fun y : A => ~ ~ (~ Equal x y /\\ Equal (Ap f x) (Ap f y)))).",
            "VernacExtend",
            "b5e195a3df708dfad85f83ecfaf27992eb2c3eef"
        ],
        [
            "intros H'0; try assumption.",
            "VernacExtend",
            "4cdfb5ff555980b7fe10aad1aff23df9d3ecf363"
        ],
        [
            "elim H'0; intros y E0; try exact E0; clear H'0.",
            "VernacExtend",
            "072ae55c83e8360b4e5eb76d09f91e9a21a2ff0a"
        ],
        [
            "exists y; try assumption.",
            "VernacExtend",
            "b167d28dacd98102795a16482352207f874e46a6"
        ],
        [
            "apply NNPP; auto with *.",
            "VernacExtend",
            "f43d4433ee18b44d069362d4669200334b58a47d"
        ],
        [
            "apply not_all_ex_not with (P := fun y : A => ~ (~ Equal x y /\\ Equal (Ap f x) (Ap f y))); auto with *.",
            "VernacExtend",
            "d92b9a974be4efecebc381a060c06d64c3da300c"
        ],
        [
            "apply not_all_ex_not with (P := fun x : A => forall y : A, ~ (~ Equal x y /\\ Equal (Ap f x) (Ap f y))); auto with *.",
            "VernacExtend",
            "33e5c97075cadcfd85a1f4b2ff69c33ccd23a8ac"
        ],
        [
            "red in |- *.",
            "VernacExtend",
            "95a3fb9e13ce19fdc8e335912fb83e57a9512b14"
        ],
        [
            "intros H'0; try assumption.",
            "VernacExtend",
            "4cdfb5ff555980b7fe10aad1aff23df9d3ecf363"
        ],
        [
            "apply H'.",
            "VernacExtend",
            "b9f7b1afd5784d2a6d1eac6189a3bdc5f0119ad0"
        ],
        [
            "intros x y H'1; try assumption.",
            "VernacExtend",
            "0eacc81d459332596fa8f94fa61b0b7ea7144cf3"
        ],
        [
            "specialize H'0 with (n := x) (y := y); rename H'0 into H'3; try exact H'3.",
            "VernacExtend",
            "bb56006edc01dbd10d3096563e6e076b4d4c60b9"
        ],
        [
            "apply NNPP; tauto.",
            "VernacExtend",
            "afab2b3b31850aa0ccf6591c47334e08680fa05f"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma not_surjective_prop : forall (A B : Setoid) (f : MAP A B), ~ surjective f -> exists y : B, ~ in_part y (image_map f).",
            "VernacStartTheoremProof",
            "7ee2b1aa5441fa1c74af9785ac206b7748f0370b"
        ],
        [
            "intros A B f H'; try assumption.",
            "VernacExtend",
            "e4bcf328ef6b857dfbf29c9c4795802690294621"
        ],
        [
            "apply not_all_ex_not with (P := fun y : B => in_part y (image_map f)).",
            "VernacExtend",
            "5251cf2a186f71584a881e1901d6d74c05d59862"
        ],
        [
            "red in |- *.",
            "VernacExtend",
            "95a3fb9e13ce19fdc8e335912fb83e57a9512b14"
        ],
        [
            "red in H'.",
            "VernacExtend",
            "b3f39ff59e03e63f7335587cdc4b70d75813b637"
        ],
        [
            "intros H'0; try assumption.",
            "VernacExtend",
            "4cdfb5ff555980b7fe10aad1aff23df9d3ecf363"
        ],
        [
            "lapply H'; [ intros H'1; try exact H'1; clear H' | clear H' ].",
            "VernacExtend",
            "f47068387cb8170acafd864beedb15a1ebe89306"
        ],
        [
            "red in |- *.",
            "VernacExtend",
            "95a3fb9e13ce19fdc8e335912fb83e57a9512b14"
        ],
        [
            "simpl in H'0.",
            "VernacExtend",
            "4d1362de2d02d4096d88255ad67ea468de03b32d"
        ],
        [
            "intros y; try assumption.",
            "VernacExtend",
            "e11f23bfb85db8a037ca5ace63604a931ae2752a"
        ],
        [
            "elim (H'0 y); intros x E; elim E; intros H'1 H'2; try exact H'2; clear E.",
            "VernacExtend",
            "17f0ab6c2e003d0d242918fda67999ef13ede0b2"
        ],
        [
            "exists x; try assumption.",
            "VernacExtend",
            "a251c410f0ab72130a5a312ded511c093841a93c"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Parameter image_empty : forall (E F : Setoid) (f : MAP E F) (A : part_set E), Equal A (empty E) -> Equal (image f A) (empty F).",
            "VernacAssumption",
            "87867c23f9b7c34583fe2980c1debba5c40ef972"
        ],
        [
            "Hint Resolve image_empty: algebra.",
            "VernacHints",
            "0b3da89a223133ca27009f60b3ccdd7e510e8d60"
        ],
        [
            "Parameter image_union : forall (E F : Setoid) (f : MAP E F) (A B : part_set E), Equal (image f (union A B)) (union (image f A) (image f B)).",
            "VernacAssumption",
            "7da34f8f7d5502a193d9f1c7f871805610e3c789"
        ],
        [
            "Hint Resolve image_union: algebra.",
            "VernacHints",
            "fb1c56291eb07e7336a332e1869b7f7d70aa3077"
        ],
        [
            "Parameter image_single : forall (E F : Setoid) (f : MAP E F) (A : part_set E) (x : E), Equal (image f (single x)) (single (f x)).",
            "VernacAssumption",
            "50c412db8c5ea349be39ba7a7528d5209cb8b0a8"
        ],
        [
            "Hint Resolve image_single: algebra.",
            "VernacHints",
            "6e49bec4d98630fc6e2955d786dd614aa6989fa7"
        ],
        [
            "Parameter union_single_in : forall (E : Setoid) (A : part_set E) (x : E), in_part x A -> Equal (union A (single x)) A.",
            "VernacAssumption",
            "c7d7b8335f2d6cda3212dd83f7df7245c57126d8"
        ],
        [
            "Hint Resolve union_single_in: algebra.",
            "VernacHints",
            "40d9a59b0781ce8de1fe1a4fc770db17b76b7ff2"
        ],
        [
            "Lemma cardinal_image_lesser : forall (E F : Setoid) (f : MAP E F) (A : part_set E) (n : nat), cardinal A n -> exists m : nat, cardinal (image f A) m /\\ m <= n.",
            "VernacStartTheoremProof",
            "6ea35da222c58943cfc72cd4a3e12684d1da14f4"
        ],
        [
            "intros E F f A n H'; try assumption.",
            "VernacExtend",
            "5c741b96d13ad78edfe0f19d88192b7cdb673795"
        ],
        [
            "apply cardinal_ind2 with (P := fun (n : nat) (A : part_set E) (c : cardinal A n) => ex (fun m : nat => cardinal (image f A) m /\\ m <= n)).",
            "VernacExtend",
            "8930fd4968bb48d6d3b63367285c9820276ad2e9"
        ],
        [
            "intros A0 H'0; try assumption.",
            "VernacExtend",
            "043473cd92151ad5830be981f19bec80970ba96e"
        ],
        [
            "exists 0; split; [ idtac | auto with * ].",
            "VernacExtend",
            "0e13b7af4e1a08c2eacb63795eea180aad329117"
        ],
        [
            "apply cardinal_empty; auto with *.",
            "VernacExtend",
            "c842643f9e61214b482c1f145cbfe29ef554a827"
        ],
        [
            "intros n0 H'0 A0 B x H'1 H'2 H'3; try assumption.",
            "VernacExtend",
            "6656d1bf97d8c1f089f5e6d79268b89fda956510"
        ],
        [
            "case (classic (in_part (f x) (image f B))).",
            "VernacExtend",
            "5f059274e23a860b9a778ed89b064ee1c4ac0cec"
        ],
        [
            "intros H'4; try assumption.",
            "VernacExtend",
            "2d5ac118a4bfa6ddc755a22bf0ae21340bea747e"
        ],
        [
            "elim (H'0 B); [ intros m E0; elim E0; intros H'7 H'8; try exact H'7; clear E0 | idtac ].",
            "VernacExtend",
            "351bd79b4f782a5756c943703b07b01c10ba9596"
        ],
        [
            "exists m; split; [ idtac | try assumption ].",
            "VernacExtend",
            "3baffa327ca2e989ac108b048ac335a96b492daa"
        ],
        [
            "apply cardinal_comp with (image f B) m; auto with *.",
            "VernacExtend",
            "2bd7313da0bb4329f7303f965ea219142b797fc3"
        ],
        [
            "apply Sym.",
            "VernacExtend",
            "b91ee1c3035127bafc790ce54633c93301d2dbb0"
        ],
        [
            "apply Trans with (image f (add_part B x)); auto with *.",
            "VernacExtend",
            "48ac1f9531df2817b86de42d3ebbf60d4d849f72"
        ],
        [
            "unfold add_part in |- *.",
            "VernacExtend",
            "0a542d8681966a7056e642e0f0817138025d44ef"
        ],
        [
            "apply Trans with (union (image f B) (image f (single x))); auto with *.",
            "VernacExtend",
            "a13e28e759f03dc061b89d9093722c628003a0bb"
        ],
        [
            "apply Trans with (union (image f B) (single (Ap f x))); auto with *.",
            "VernacExtend",
            "e14d795a73ee064ce23de8f26fb6b8ba27ef730c"
        ],
        [
            "auto with *.",
            "VernacExtend",
            "cafee3e5c160f4826f26575cc7be0078a2421ff0"
        ],
        [
            "apply cardinal_S with A0 x; auto with *.",
            "VernacExtend",
            "1e2a4276f3f6ae3de7129f9259019d2189dc8f50"
        ],
        [
            "intros H'4; try assumption.",
            "VernacExtend",
            "2d5ac118a4bfa6ddc755a22bf0ae21340bea747e"
        ],
        [
            "elim (H'0 B); [ intros m E0; elim E0; intros H'7 H'8; try exact H'7; clear E0 | idtac ].",
            "VernacExtend",
            "351bd79b4f782a5756c943703b07b01c10ba9596"
        ],
        [
            "exists (S m); split; [ try assumption | idtac ].",
            "VernacExtend",
            "4d720784c6f8b8a657f6f7215d3cf0d87306d9e6"
        ],
        [
            "apply cardinal_add with (image f B) (Ap f x); auto with *.",
            "VernacExtend",
            "0295512848cd71e03327ed1352a6297503d47d82"
        ],
        [
            "unfold add_part in |- *.",
            "VernacExtend",
            "0a542d8681966a7056e642e0f0817138025d44ef"
        ],
        [
            "unfold add_part in H'2.",
            "VernacExtend",
            "b1c77e908b1c930d42039cba1ea6ab115d78d581"
        ],
        [
            "apply Trans with (image f (union B (single x))); auto with *.",
            "VernacExtend",
            "6a0dddfebc9c0f46f5fc7a9e6a91ad3d443753cc"
        ],
        [
            "apply Trans with (union (image f B) (image f (single x))); auto with *.",
            "VernacExtend",
            "a13e28e759f03dc061b89d9093722c628003a0bb"
        ],
        [
            "auto with *.",
            "VernacExtend",
            "cafee3e5c160f4826f26575cc7be0078a2421ff0"
        ],
        [
            "apply cardinal_S with A0 x; auto with *.",
            "VernacExtend",
            "1e2a4276f3f6ae3de7129f9259019d2189dc8f50"
        ],
        [
            "auto with *.",
            "VernacExtend",
            "cafee3e5c160f4826f26575cc7be0078a2421ff0"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma cardinal_image_injective : forall (E F : Setoid) (f : MAP E F) (A : part_set E) (n : nat), cardinal A n -> injective f -> cardinal (image f A) n.",
            "VernacStartTheoremProof",
            "0038ea45d3decfbaa5a59a81014fb48b932dc97d"
        ],
        [
            "intros E F f A n H' H'0; try assumption.",
            "VernacExtend",
            "6c761407a7d0c7b43938340a5e5a117efd9dc314"
        ],
        [
            "case (cardinal_image_lesser f H').",
            "VernacExtend",
            "35e99a047a430fe9a5fddc8968cb6ea8def8fda0"
        ],
        [
            "intros x H'1; try assumption.",
            "VernacExtend",
            "fdfe31a49f38b00f87714bc5a7926790bc66aef6"
        ],
        [
            "elim H'1; intros H'2 H'3; try exact H'2; clear H'1.",
            "VernacExtend",
            "83205607ef2e90fb6fd0bf1b7b65c0716bbe633b"
        ],
        [
            "cut (x < n \\/ x = n).",
            "VernacExtend",
            "32472e9d5fd00d9f6a1b0b64bebd2fdcd9c4971a"
        ],
        [
            "intros H'1; try assumption.",
            "VernacExtend",
            "36f49af2627c9f2414e15c73ddeebdc5b206aded"
        ],
        [
            "elim H'1; [ intros H'4; try exact H'4; clear H'1 | intros H'4; clear H'1 ].",
            "VernacExtend",
            "018577fb94f03a6821624d356f278051ec060af4"
        ],
        [
            "case (tiroirs (E:=E) (F:=F) (f:=f) (n:=n) (Chaussettes:=A) H' (m:=x) (Tiroirs:=image f A) H'2 H'4).",
            "VernacExtend",
            "0dac65b80f9a1896d2b96828e44d8233d0d2e011"
        ],
        [
            "auto with *.",
            "VernacExtend",
            "cafee3e5c160f4826f26575cc7be0078a2421ff0"
        ],
        [
            "intros x0 H'1; try assumption.",
            "VernacExtend",
            "cdba11e48ea90bb9b116ec20425a1740b6e87fb3"
        ],
        [
            "elim H'1; intros y E0; elim E0; intros H'5 H'6; try exact H'5; clear E0 H'1.",
            "VernacExtend",
            "489c8f8b5cf75b189806393bf75e9a112ad3217c"
        ],
        [
            "red in H'0.",
            "VernacExtend",
            "d5049e9647c88c352fa78e07b8260e57ba8ee09f"
        ],
        [
            "absurd (Equal x0 y); auto with *.",
            "VernacExtend",
            "41221b01c4b43f0284ff1b164b5aeab52755e933"
        ],
        [
            "apply cardinal_comp with (image f A) x; auto with *.",
            "VernacExtend",
            "d26edb56356ede007aee2eabd1fa45a17bd8ca60"
        ],
        [
            "case (lt_eq_lt_dec x n).",
            "VernacExtend",
            "1104cd253afff69946ea96b28be812c306561252"
        ],
        [
            "intros H'1; elim H'1; [ intros H'4; try exact H'4; clear H'1 | intros H'4; clear H'1 ]; auto with *.",
            "VernacExtend",
            "7f6bc69afb7c1fd320adbd9c34cb924c759b73ea"
        ],
        [
            "intros H'1; try assumption.",
            "VernacExtend",
            "36f49af2627c9f2414e15c73ddeebdc5b206aded"
        ],
        [
            "absurd (n < x); auto with *.",
            "VernacExtend",
            "0879dada0b24636f5bcf0ee0d1a00e2d0002b566"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Parameter not_in_part_comp_r : forall (E : Setoid) (A B : part_set E) (x : E), ~ in_part x A -> Equal A B -> ~ in_part x B.",
            "VernacAssumption",
            "e8a925e88baeeaec2ea9e84097d918b50233851f"
        ],
        [
            "Parameter diff_single_not_in : forall (E : Setoid) (A : part_set E) (x : E), ~ in_part x (diff A (single x)).",
            "VernacAssumption",
            "47053bb0c9dd690308def7d0033600fbcea2892f"
        ],
        [
            "Hint Resolve diff_single_not_in: algebra.",
            "VernacHints",
            "3d23076dcee6b1318d2cf7758d813b336b498813"
        ],
        [
            "Parameter diff_el_union_single : forall (E : Setoid) (A : part_set E) (x : E), in_part x A -> Equal A (union (diff A (single x)) (single x)).",
            "VernacAssumption",
            "896cbc8cad6a70265f648c3b793d4e0da12543c9"
        ],
        [
            "Hint Resolve diff_el_union_single: algebra.",
            "VernacHints",
            "0898d02b4d129e6c0713fb8974019b5889223efd"
        ],
        [
            "Lemma cardinal_image_strict_lesser : forall (E F : Setoid) (f : MAP E F) (n : nat), cardinal (full E) n -> ~ injective f -> exists m : nat, cardinal (image_map f) m /\\ m < n.",
            "VernacStartTheoremProof",
            "2b2991329cf3ea78c850e0979f21b57c7aecabd9"
        ],
        [
            "intros E F f n; try assumption.",
            "VernacExtend",
            "5b8bf70a4c29eecb4d201bf9eaff08499efad267"
        ],
        [
            "case n.",
            "VernacExtend",
            "11697c0361eed9b7e10df873f1d76a9d8f9f100a"
        ],
        [
            "intros H' H'0; try assumption.",
            "VernacExtend",
            "2a6e62777c52d0d117412b0666577acfdc47501e"
        ],
        [
            "case (not_injective_prop H'0).",
            "VernacExtend",
            "6b3a3b61a5c8293a4da586b96226c1e1405404ff"
        ],
        [
            "intros x H'1; try assumption.",
            "VernacExtend",
            "fdfe31a49f38b00f87714bc5a7926790bc66aef6"
        ],
        [
            "absurd (in_part x (full E)); auto with *.",
            "VernacExtend",
            "43cd9c608fbe96d28f7f93a88055751a92b4798b"
        ],
        [
            "apply not_in_part_comp_r with (empty E); auto with *.",
            "VernacExtend",
            "659309127753cf7ed608fff5a1a456747164e19a"
        ],
        [
            "inversion H'.",
            "VernacExtend",
            "7eb2f09d685a0dbd7e1e32975a04fde5b8f610b0"
        ],
        [
            "auto with *.",
            "VernacExtend",
            "cafee3e5c160f4826f26575cc7be0078a2421ff0"
        ],
        [
            "intros n0 H' H'0; try assumption.",
            "VernacExtend",
            "2f6cdecb669f5c8d593d2d049cb3e1268386ac25"
        ],
        [
            "case (not_injective_prop H'0).",
            "VernacExtend",
            "6b3a3b61a5c8293a4da586b96226c1e1405404ff"
        ],
        [
            "intros x H'1; try assumption.",
            "VernacExtend",
            "fdfe31a49f38b00f87714bc5a7926790bc66aef6"
        ],
        [
            "elim H'1; intros y E0; elim E0; intros H'2 H'3; try exact H'2; clear E0 H'1.",
            "VernacExtend",
            "dc790bb50c73f14833932771240e0fcf5a6ae1c7"
        ],
        [
            "cut (cardinal (diff (full E) (single x)) n0).",
            "VernacExtend",
            "1efd8ce672a57880d18ef09502aeed307096a323"
        ],
        [
            "intros H'1; try assumption.",
            "VernacExtend",
            "36f49af2627c9f2414e15c73ddeebdc5b206aded"
        ],
        [
            "case (cardinal_image_lesser f H'1).",
            "VernacExtend",
            "6712fd5affd5ea369494682a0b4f1ee62ed8e015"
        ],
        [
            "intros m H'4; try assumption.",
            "VernacExtend",
            "fc845cd09d52dcb484b3b9b88590c408954a7cb8"
        ],
        [
            "exists m; split; [ try assumption | idtac ].",
            "VernacExtend",
            "abe3347cf7498581523ffbb61c3a1e3aac93aac3"
        ],
        [
            "elim H'4; intros H'5 H'6; try exact H'5; clear H'4.",
            "VernacExtend",
            "59cecf0adbddcda69fdb33e7559b59503c5f2586"
        ],
        [
            "apply cardinal_comp with (image f (diff (full E) (single x))) m; auto with *.",
            "VernacExtend",
            "b77885c9a1778ee6dfbba82383c49d9ece6fc339"
        ],
        [
            "apply included_antisym.",
            "VernacExtend",
            "5aaad01710549d176b548cb33143330f6a33c27f"
        ],
        [
            "unfold image_map in |- *.",
            "VernacExtend",
            "87f976bbb37e0040a8f3284d670276e1687f12c2"
        ],
        [
            "apply image_included; auto with *.",
            "VernacExtend",
            "7f89499fccbe58ea9c65d64ad3ea5d49dfff98d6"
        ],
        [
            "unfold image_map in |- *.",
            "VernacExtend",
            "87f976bbb37e0040a8f3284d670276e1687f12c2"
        ],
        [
            "unfold included in |- *.",
            "VernacExtend",
            "49d47da082bc436033ab68582d7a85f3cb0b6b75"
        ],
        [
            "intros x0 H'4; try assumption.",
            "VernacExtend",
            "d7f936c8456c4cfa75760fb6e2aa13872433418a"
        ],
        [
            "elim H'4.",
            "VernacExtend",
            "6b9f1f9423d39545e0007ba27d262903c68547c3"
        ],
        [
            "intros x1 H'7; try assumption.",
            "VernacExtend",
            "48e5c3525b97af6bad9880a0b5ecf5791a87f8bf"
        ],
        [
            "case (classic (Equal x1 x)).",
            "VernacExtend",
            "ecda373fab997c77ab4282f18a9191621b88af43"
        ],
        [
            "intros H'8; try assumption.",
            "VernacExtend",
            "4dc809b11ee527c02a25403de02bb6865ce36cd0"
        ],
        [
            "simpl in |- *.",
            "VernacExtend",
            "1b93169f4cf876d207c1fab22a2347202ab48d85"
        ],
        [
            "exists y; split; [ idtac | try assumption ].",
            "VernacExtend",
            "7f32201dd849fa57a20a63d098beb0a6770df3d7"
        ],
        [
            "split; [ idtac | try assumption ].",
            "VernacExtend",
            "c51dd02c76c3fc17e5bffc3bbcf27d25c5cb3a50"
        ],
        [
            "auto with *.",
            "VernacExtend",
            "cafee3e5c160f4826f26575cc7be0078a2421ff0"
        ],
        [
            "auto with *.",
            "VernacExtend",
            "cafee3e5c160f4826f26575cc7be0078a2421ff0"
        ],
        [
            "apply Trans with (f x); auto with *.",
            "VernacExtend",
            "7f5b43c02da723575c67c36d99c58c09e0bba5e6"
        ],
        [
            "elim H'7; intros H'9 H'10; try exact H'10; clear H'7.",
            "VernacExtend",
            "2a254e0af62ecfd55ee4f2d54971400573d41cb7"
        ],
        [
            "apply Trans with (f x1); auto with *.",
            "VernacExtend",
            "45050421c04aa49beeb35a4a353ad8de5d335cf5"
        ],
        [
            "intros H'8; try assumption.",
            "VernacExtend",
            "4dc809b11ee527c02a25403de02bb6865ce36cd0"
        ],
        [
            "simpl in |- *.",
            "VernacExtend",
            "1b93169f4cf876d207c1fab22a2347202ab48d85"
        ],
        [
            "exists x1; split; [ idtac | try assumption ].",
            "VernacExtend",
            "af2963166956db174f6f467980ac4f222230504d"
        ],
        [
            "auto with *.",
            "VernacExtend",
            "cafee3e5c160f4826f26575cc7be0078a2421ff0"
        ],
        [
            "elim H'7; intros H'9 H'10; try exact H'10; clear H'7.",
            "VernacExtend",
            "2a254e0af62ecfd55ee4f2d54971400573d41cb7"
        ],
        [
            "elim H'4; intros H'5 H'6; try exact H'6; clear H'4; auto with *.",
            "VernacExtend",
            "be16a77965b9663f04fdec8e3bf414fe5d36d524"
        ],
        [
            "apply cardinal_S with (full E) x; auto with *.",
            "VernacExtend",
            "f0642631cc31a8eb1faaf2119a3102d4dafd2776"
        ],
        [
            "unfold add_part in |- *.",
            "VernacExtend",
            "0a542d8681966a7056e642e0f0817138025d44ef"
        ],
        [
            "auto with *.",
            "VernacExtend",
            "cafee3e5c160f4826f26575cc7be0078a2421ff0"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma cardinal_image_equal_injective : forall (E F : Setoid) (f : MAP E F) (n : nat), cardinal (full E) n -> cardinal (image_map f) n -> injective f.",
            "VernacStartTheoremProof",
            "3a1361a509bf38e7af9a9baad2caac75f8122ee9"
        ],
        [
            "intros E F f n H' H'0; try assumption.",
            "VernacExtend",
            "7ffb625c367dad516084c5e57220996b3108ac2d"
        ],
        [
            "apply NNPP.",
            "VernacExtend",
            "c972af1947412f7363e48b809906d3283d0fb638"
        ],
        [
            "red in |- *; intros H'1; try exact H'1.",
            "VernacExtend",
            "04df393ad6b06b95e0d371f48877e9c5ffa397f5"
        ],
        [
            "case (cardinal_image_strict_lesser H' H'1).",
            "VernacExtend",
            "c4d43663ff6aa933ee2ba5a92b405631540bdf00"
        ],
        [
            "intros x H'2; elim H'2; intros H'3 H'4; try exact H'4; clear H'2.",
            "VernacExtend",
            "990647bcc6a07e3a5514e5f639aba7e90cffab37"
        ],
        [
            "absurd (x = n); auto with *.",
            "VernacExtend",
            "270044b1cedf86afa8f96eea28f6ce583cff8f10"
        ],
        [
            "red in |- *; intros H'2; try exact H'2.",
            "VernacExtend",
            "a5273cb5b623b76c89f05d651ba3580c16b5ba0c"
        ],
        [
            "absurd (x < n); auto with *.",
            "VernacExtend",
            "472e230993c7ddc7ad619ab6b0f9a65b975f4a9a"
        ],
        [
            "rewrite H'2.",
            "VernacExtend",
            "884e4d7bc650f9624ecf7e3155e0da90d9130a00"
        ],
        [
            "auto with *.",
            "VernacExtend",
            "cafee3e5c160f4826f26575cc7be0078a2421ff0"
        ],
        [
            "apply cardinal_unique with (E := F) (A := image_map f); auto with *.",
            "VernacExtend",
            "3d634c4f17a7b2826553c4ae18468da9a4d42022"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Parameter cardinal_equal_included_equal : forall (E : Setoid) (A B : part_set E) (n : nat), cardinal A n -> cardinal B n -> included B A -> Equal B A.",
            "VernacAssumption",
            "758ed37cdb8d3cfb5b632dca8b288b8efc060ae0"
        ],
        [
            "Parameter image_full_surjective : forall (E F : Setoid) (f : MAP E F), Equal (image_map f) (full F) -> surjective f.",
            "VernacAssumption",
            "dff192b0f3fff0b7a6cfe2e00d8a932e7ccf704f"
        ],
        [
            "Hint Resolve image_full_surjective: algebra.",
            "VernacHints",
            "027044549465f75faf0d737ec4758bdae861638f"
        ],
        [
            "Lemma finite_injective_surjective : forall (E F : Setoid) (f : MAP E F) (n : nat), cardinal (full E) n -> cardinal (full F) n -> injective f -> surjective f.",
            "VernacStartTheoremProof",
            "baaeeb6969ebfc0a7ef23c7c35ac6585302ea7d6"
        ],
        [
            "intros E F f n H' H'0 H'1; try assumption.",
            "VernacExtend",
            "ba63f68f49330acfe98eba2a4d26de4be19b0990"
        ],
        [
            "generalize (cardinal_image_injective H' H'1).",
            "VernacExtend",
            "1d0bc45a63a75c36f1f110d0d79c248a832afb02"
        ],
        [
            "intros H'2; try assumption.",
            "VernacExtend",
            "3e0142f6e43fd4a8990399a81c16960a527db165"
        ],
        [
            "apply image_full_surjective; auto with *.",
            "VernacExtend",
            "904a61c1137ee79d7f88e54ed4e42a44ad0dc405"
        ],
        [
            "unfold image_map in |- *.",
            "VernacExtend",
            "87f976bbb37e0040a8f3284d670276e1687f12c2"
        ],
        [
            "apply cardinal_equal_included_equal with n; auto with *.",
            "VernacExtend",
            "cad50ebf64a898bacb156a117dd4573c0360cd10"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Parameter surjective_image_full : forall (E F : Setoid) (f : MAP E F), surjective f -> Equal (image_map f) (full F).",
            "VernacAssumption",
            "e5454930a003b33e42f70b558be7442d327b5fc3"
        ],
        [
            "Hint Resolve surjective_image_full: algebra.",
            "VernacHints",
            "ad1752eaf560ee7b558024d6b3ba67266d1b93b3"
        ],
        [
            "Lemma finite_surjective_injective : forall (E F : Setoid) (f : MAP E F) (n : nat), cardinal (full E) n -> cardinal (full F) n -> surjective f -> injective f.",
            "VernacStartTheoremProof",
            "1652829f017e61f1675338dbe5d8206f04b3daad"
        ],
        [
            "intros E F f n H' H'0 H'1; try assumption.",
            "VernacExtend",
            "ba63f68f49330acfe98eba2a4d26de4be19b0990"
        ],
        [
            "apply cardinal_image_equal_injective with n; auto with *.",
            "VernacExtend",
            "629cdacc1bb0c22bd5c617ff8df2dffd382b0757"
        ],
        [
            "apply cardinal_comp with (full F) n; auto with *.",
            "VernacExtend",
            "7f2fc89e57543cdf918227c20f464ce402e15dc5"
        ],
        [
            "apply Sym; auto with *.",
            "VernacExtend",
            "d536958544acfd2c3c246aad714810d1b4eb72d5"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma not_included_exist : forall (E : Setoid) (A B : part_set E), included B A -> ~ Equal B A -> exists x : E, in_part x A /\\ ~ in_part x B.",
            "VernacStartTheoremProof",
            "efb644f63d5b89f1f45d00c5d0f9aa51630df95a"
        ],
        [
            "intros E A B; simpl in |- *.",
            "VernacExtend",
            "b510118e587573a01d5dbfb75a3ebb6eae243fdd"
        ],
        [
            "unfold eq_part in |- *; simpl in |- *.",
            "VernacExtend",
            "f85bba6666f1278a61d5c9324cec9fb8a1868241"
        ],
        [
            "intros H' H'0; try assumption.",
            "VernacExtend",
            "2a6e62777c52d0d117412b0666577acfdc47501e"
        ],
        [
            "cut (ex (fun x : E => ~ ((in_part x B -> in_part x A) /\\ (in_part x A -> in_part x B)))).",
            "VernacExtend",
            "477ff38369939141984ee0dda97c7629abd70fb8"
        ],
        [
            "intros H'1; try assumption.",
            "VernacExtend",
            "36f49af2627c9f2414e15c73ddeebdc5b206aded"
        ],
        [
            "elim H'1; intros x E0; try exact E0; clear H'1.",
            "VernacExtend",
            "914c457614dcd8e7d1ab546dca01cac90daf6efb"
        ],
        [
            "exists x; split; [ try assumption | idtac ].",
            "VernacExtend",
            "11252310a314b25929ab26e7f8d4bceda8e7c9d0"
        ],
        [
            "red in E0.",
            "VernacExtend",
            "9fa52e15dbde3ea2a9012633f11ae2dbb4f7abf9"
        ],
        [
            "apply NNPP.",
            "VernacExtend",
            "c972af1947412f7363e48b809906d3283d0fb638"
        ],
        [
            "red in |- *; intros H'1; try exact H'1.",
            "VernacExtend",
            "04df393ad6b06b95e0d371f48877e9c5ffa397f5"
        ],
        [
            "lapply E0; [ intros H'2; apply H'2; clear E0 | clear E0 ].",
            "VernacExtend",
            "3547fa178c89fdb2949bb980046b8ad688fb0141"
        ],
        [
            "split; [ idtac | intros H'2; try assumption ].",
            "VernacExtend",
            "c3d8edfef6ef1d8312aa06f5428fbeda7a1b56b7"
        ],
        [
            "intros H'2; try assumption.",
            "VernacExtend",
            "3e0142f6e43fd4a8990399a81c16960a527db165"
        ],
        [
            "apply H'; auto with *.",
            "VernacExtend",
            "e207b29be22ad9d6d3a63585cfe0b637180e5850"
        ],
        [
            "absurd (in_part x A); auto with *.",
            "VernacExtend",
            "2c5ff5a1b016da6a136cfa2dcc98f6e142b9387c"
        ],
        [
            "red in |- *.",
            "VernacExtend",
            "95a3fb9e13ce19fdc8e335912fb83e57a9512b14"
        ],
        [
            "red in E0.",
            "VernacExtend",
            "9fa52e15dbde3ea2a9012633f11ae2dbb4f7abf9"
        ],
        [
            "intros H'1; try assumption.",
            "VernacExtend",
            "36f49af2627c9f2414e15c73ddeebdc5b206aded"
        ],
        [
            "lapply E0; [ intros H'2; apply H'2; clear E0 | clear E0 ].",
            "VernacExtend",
            "3547fa178c89fdb2949bb980046b8ad688fb0141"
        ],
        [
            "split; [ try assumption | idtac ].",
            "VernacExtend",
            "2f3e384e84efa246ea96d2db4b31f7d148a7455c"
        ],
        [
            "intros H'2; try assumption.",
            "VernacExtend",
            "3e0142f6e43fd4a8990399a81c16960a527db165"
        ],
        [
            "apply H'; auto with *.",
            "VernacExtend",
            "e207b29be22ad9d6d3a63585cfe0b637180e5850"
        ],
        [
            "auto with *.",
            "VernacExtend",
            "cafee3e5c160f4826f26575cc7be0078a2421ff0"
        ],
        [
            "apply not_all_ex_not with (P := fun x : E => (in_part x B -> in_part x A) /\\ (in_part x A -> in_part x B)); auto with *.",
            "VernacExtend",
            "0a6f16ef435ef2c85b84cfab151c76e8856ac4ea"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma cardinal_included : forall (E : Setoid) (A : part_set E) (n : nat), cardinal A n -> forall B : part_set E, included B A -> exists m : nat, cardinal B m /\\ m <= n.",
            "VernacStartTheoremProof",
            "8af7ae19f054d750eabe7f11d3baf64c25a15daa"
        ],
        [
            "intros E A n H'; try assumption.",
            "VernacExtend",
            "b8205a2c836eb1926f0ad2c29edfd40e3262f283"
        ],
        [
            "apply cardinal_ind2 with (P := fun (n : nat) (A : part_set E) (c : cardinal A n) => forall B : part_set E, included B A -> ex (fun m : nat => cardinal B m /\\ m <= n)).",
            "VernacExtend",
            "9fefb5c2e1a8cc90b624252fa35fc0338e9f833e"
        ],
        [
            "intros A0 H'0 B H'1; exists 0; split; [ try assumption | idtac ]; auto with *.",
            "VernacExtend",
            "372ac40626b0a7c0bf6814063802fbdb61588910"
        ],
        [
            "apply cardinal_empty.",
            "VernacExtend",
            "de57667cc45b10809e2b8bfa182e3d98ecc197be"
        ],
        [
            "inversion H'0.",
            "VernacExtend",
            "00e0ad3eaaed6a837c55aecf644d04a72455e588"
        ],
        [
            "cut (included B (empty E)); auto with *.",
            "VernacExtend",
            "672a79f27aaaef28f010d9a7444584a7a99e9bea"
        ],
        [
            "apply included_comp with B A0; auto with *.",
            "VernacExtend",
            "0397010b62293ed04c3af76d0e8e11d1b57cbdb6"
        ],
        [
            "intros n0 H'0 A0 B x H'1 H'2 H'3 B0 H'4; try assumption.",
            "VernacExtend",
            "8b280c6c34de172ae2af2dbc84b838becb747b30"
        ],
        [
            "case (classic (Equal B0 A0)); intros.",
            "VernacExtend",
            "11f268a013b7c0831c37e7a4d6d522e35b7ce52a"
        ],
        [
            "exists (S n0); split; [ idtac | try assumption ].",
            "VernacExtend",
            "38d129c195c5354ca24ac72502f84cab8cb9a035"
        ],
        [
            "apply cardinal_comp with A0 (S n0); auto with *.",
            "VernacExtend",
            "d8b7b1023eb008b75362598e7954d453ec2bab5b"
        ],
        [
            "auto with *.",
            "VernacExtend",
            "cafee3e5c160f4826f26575cc7be0078a2421ff0"
        ],
        [
            "case (not_included_exist H'4 H).",
            "VernacExtend",
            "053afd01e412b254976c0f2ef50fbc3a1b62949c"
        ],
        [
            "intros x0 H'5; try assumption.",
            "VernacExtend",
            "59fdd9b2b51b69bc82fab68daceded436e8b5cb7"
        ],
        [
            "elim H'5; intros H'6 H'7; try exact H'6; clear H'5.",
            "VernacExtend",
            "c7f7559928461311b1329f1800d43c8ed83df6ae"
        ],
        [
            "lapply (H'0 (minus_part A0 x0)); [ intros H'8; elim (H'8 B0); [ intros m E0; elim E0; intros H'11 H'12; try exact H'11; clear E0 | idtac ] | idtac ]; auto with *.",
            "VernacExtend",
            "1b0133581dd9ced054426419765ced044ffc49a6"
        ],
        [
            "exists m; split; [ try assumption | idtac ].",
            "VernacExtend",
            "abe3347cf7498581523ffbb61c3a1e3aac93aac3"
        ],
        [
            "apply le_trans with n0; auto with *.",
            "VernacExtend",
            "6ce902c21613c4cd01026cb4f6304c5c69458280"
        ],
        [
            "unfold minus_part in |- *; simpl in |- *.",
            "VernacExtend",
            "1f1adff509a9b7d73a2d353fcb2afbb2cca71e88"
        ],
        [
            "red in |- *.",
            "VernacExtend",
            "95a3fb9e13ce19fdc8e335912fb83e57a9512b14"
        ],
        [
            "intros x1 H'5; try assumption.",
            "VernacExtend",
            "759b0c7c81417e8bb8688c934df04ae4ddc83ae2"
        ],
        [
            "simpl in |- *.",
            "VernacExtend",
            "1b93169f4cf876d207c1fab22a2347202ab48d85"
        ],
        [
            "split; [ try assumption | idtac ].",
            "VernacExtend",
            "2f3e384e84efa246ea96d2db4b31f7d148a7455c"
        ],
        [
            "apply H'4; auto with *.",
            "VernacExtend",
            "27e9e9cfc77eaab587cb12f418b5ee9cc1483290"
        ],
        [
            "red in |- *.",
            "VernacExtend",
            "95a3fb9e13ce19fdc8e335912fb83e57a9512b14"
        ],
        [
            "intros H'9; try assumption.",
            "VernacExtend",
            "b236fb2a90c928ce6db1073fb159a6c56142a0f0"
        ],
        [
            "apply H'7.",
            "VernacExtend",
            "522a3bd3a2d4377b5e7cf311c5132d50776eb129"
        ],
        [
            "apply in_part_comp_l with x1; auto with *.",
            "VernacExtend",
            "ef5bdecb0d3edbc8549c14ea9d9bd6e3d0f694fc"
        ],
        [
            "apply cardinal_S with A0 x0; auto with *.",
            "VernacExtend",
            "527bd9e014f7345f68862d6eabf7f3cf3a5935ad"
        ],
        [
            "apply Sym.",
            "VernacExtend",
            "b91ee1c3035127bafc790ce54633c93301d2dbb0"
        ],
        [
            "apply minus_add; auto with *.",
            "VernacExtend",
            "15d9f9bc24c19a43d12e7a1a8b9e8ec37eb0cb48"
        ],
        [
            "auto with *.",
            "VernacExtend",
            "cafee3e5c160f4826f26575cc7be0078a2421ff0"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma map_not_injective : forall (A B : Setoid) (f : MAP A B) (n m : nat), cardinal (full A) n -> cardinal (full B) m -> m < n -> ~ injective f.",
            "VernacStartTheoremProof",
            "7ed43a1358844deea4587989df30e2207fa6be57"
        ],
        [
            "intros A B f n m H' H'0 H'1; red in |- *; intros H'2; try exact H'2.",
            "VernacExtend",
            "04adb71f68a851fe40de30409904f38c64ed52a6"
        ],
        [
            "red in H'2.",
            "VernacExtend",
            "5b18245265eab67c1b95b0566c66dc9d7cd3fa88"
        ],
        [
            "case (tiroirs (E:=A) (F:=B) (f:=f) H' H'0 H'1); auto with *.",
            "VernacExtend",
            "c576b313309236741e33201ec6eb807e6eb72ab6"
        ],
        [
            "intros x H'3; try assumption.",
            "VernacExtend",
            "1af3d0ea7d9e5d0a139b9c8acfc9635734ab3fca"
        ],
        [
            "elim H'3; intros y E; elim E; intros H'4 H'5; try exact H'4; clear E H'3; auto with *.",
            "VernacExtend",
            "cd0304d2a1672ed967e70cdb4f2579d0b0312311"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Definition finite (A : Setoid) := exists n : nat, cardinal (full A) n.",
            "VernacDefinition",
            "a3894c33114ffea2eebae92dbf3e0c3f1184b6df"
        ]
    ],
    "proofs": [
        {
            "name": "not_injective_prop",
            "line_nb": 6,
            "steps": [
                {
                    "command": [
                        "unfold injective in |- *.",
                        "VernacExtend",
                        "9c517f814102c09f8923135c0ed56233bff984fa"
                    ]
                },
                {
                    "command": [
                        "intros A B f H'; try assumption.",
                        "VernacExtend",
                        "e4bcf328ef6b857dfbf29c9c4795802690294621"
                    ]
                },
                {
                    "command": [
                        "cut (ex (fun x : A => ~ (forall y : A, ~ (~ Equal x y /\\ Equal (Ap f x) (Ap f y))))).",
                        "VernacExtend",
                        "38559db77601e7e9e8e8e4c905f1c83e9ffedb41"
                    ]
                },
                {
                    "command": [
                        "intros H'0; try assumption.",
                        "VernacExtend",
                        "4cdfb5ff555980b7fe10aad1aff23df9d3ecf363"
                    ]
                },
                {
                    "command": [
                        "elim H'0; intros x E; try exact E; clear H'0.",
                        "VernacExtend",
                        "33d857e1e760c085d3993a593b1ded19dbf4af8b"
                    ]
                },
                {
                    "command": [
                        "exists x; try assumption.",
                        "VernacExtend",
                        "a251c410f0ab72130a5a312ded511c093841a93c"
                    ]
                },
                {
                    "command": [
                        "cut (ex (fun y : A => ~ ~ (~ Equal x y /\\ Equal (Ap f x) (Ap f y)))).",
                        "VernacExtend",
                        "b5e195a3df708dfad85f83ecfaf27992eb2c3eef"
                    ]
                },
                {
                    "command": [
                        "intros H'0; try assumption.",
                        "VernacExtend",
                        "4cdfb5ff555980b7fe10aad1aff23df9d3ecf363"
                    ]
                },
                {
                    "command": [
                        "elim H'0; intros y E0; try exact E0; clear H'0.",
                        "VernacExtend",
                        "072ae55c83e8360b4e5eb76d09f91e9a21a2ff0a"
                    ]
                },
                {
                    "command": [
                        "exists y; try assumption.",
                        "VernacExtend",
                        "b167d28dacd98102795a16482352207f874e46a6"
                    ]
                },
                {
                    "command": [
                        "apply NNPP; auto with *.",
                        "VernacExtend",
                        "f43d4433ee18b44d069362d4669200334b58a47d"
                    ]
                },
                {
                    "command": [
                        "apply not_all_ex_not with (P := fun y : A => ~ (~ Equal x y /\\ Equal (Ap f x) (Ap f y))); auto with *.",
                        "VernacExtend",
                        "d92b9a974be4efecebc381a060c06d64c3da300c"
                    ]
                },
                {
                    "command": [
                        "apply not_all_ex_not with (P := fun x : A => forall y : A, ~ (~ Equal x y /\\ Equal (Ap f x) (Ap f y))); auto with *.",
                        "VernacExtend",
                        "33e5c97075cadcfd85a1f4b2ff69c33ccd23a8ac"
                    ]
                },
                {
                    "command": [
                        "red in |- *.",
                        "VernacExtend",
                        "95a3fb9e13ce19fdc8e335912fb83e57a9512b14"
                    ]
                },
                {
                    "command": [
                        "intros H'0; try assumption.",
                        "VernacExtend",
                        "4cdfb5ff555980b7fe10aad1aff23df9d3ecf363"
                    ]
                },
                {
                    "command": [
                        "apply H'.",
                        "VernacExtend",
                        "b9f7b1afd5784d2a6d1eac6189a3bdc5f0119ad0"
                    ]
                },
                {
                    "command": [
                        "intros x y H'1; try assumption.",
                        "VernacExtend",
                        "0eacc81d459332596fa8f94fa61b0b7ea7144cf3"
                    ]
                },
                {
                    "command": [
                        "specialize H'0 with (n := x) (y := y); rename H'0 into H'3; try exact H'3.",
                        "VernacExtend",
                        "bb56006edc01dbd10d3096563e6e076b4d4c60b9"
                    ]
                },
                {
                    "command": [
                        "apply NNPP; tauto.",
                        "VernacExtend",
                        "afab2b3b31850aa0ccf6591c47334e08680fa05f"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "not_surjective_prop",
            "line_nb": 27,
            "steps": [
                {
                    "command": [
                        "intros A B f H'; try assumption.",
                        "VernacExtend",
                        "e4bcf328ef6b857dfbf29c9c4795802690294621"
                    ]
                },
                {
                    "command": [
                        "apply not_all_ex_not with (P := fun y : B => in_part y (image_map f)).",
                        "VernacExtend",
                        "5251cf2a186f71584a881e1901d6d74c05d59862"
                    ]
                },
                {
                    "command": [
                        "red in |- *.",
                        "VernacExtend",
                        "95a3fb9e13ce19fdc8e335912fb83e57a9512b14"
                    ]
                },
                {
                    "command": [
                        "red in H'.",
                        "VernacExtend",
                        "b3f39ff59e03e63f7335587cdc4b70d75813b637"
                    ]
                },
                {
                    "command": [
                        "intros H'0; try assumption.",
                        "VernacExtend",
                        "4cdfb5ff555980b7fe10aad1aff23df9d3ecf363"
                    ]
                },
                {
                    "command": [
                        "lapply H'; [ intros H'1; try exact H'1; clear H' | clear H' ].",
                        "VernacExtend",
                        "f47068387cb8170acafd864beedb15a1ebe89306"
                    ]
                },
                {
                    "command": [
                        "red in |- *.",
                        "VernacExtend",
                        "95a3fb9e13ce19fdc8e335912fb83e57a9512b14"
                    ]
                },
                {
                    "command": [
                        "simpl in H'0.",
                        "VernacExtend",
                        "4d1362de2d02d4096d88255ad67ea468de03b32d"
                    ]
                },
                {
                    "command": [
                        "intros y; try assumption.",
                        "VernacExtend",
                        "e11f23bfb85db8a037ca5ace63604a931ae2752a"
                    ]
                },
                {
                    "command": [
                        "elim (H'0 y); intros x E; elim E; intros H'1 H'2; try exact H'2; clear E.",
                        "VernacExtend",
                        "17f0ab6c2e003d0d242918fda67999ef13ede0b2"
                    ]
                },
                {
                    "command": [
                        "exists x; try assumption.",
                        "VernacExtend",
                        "a251c410f0ab72130a5a312ded511c093841a93c"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "cardinal_image_lesser",
            "line_nb": 48,
            "steps": [
                {
                    "command": [
                        "intros E F f A n H'; try assumption.",
                        "VernacExtend",
                        "5c741b96d13ad78edfe0f19d88192b7cdb673795"
                    ]
                },
                {
                    "command": [
                        "apply cardinal_ind2 with (P := fun (n : nat) (A : part_set E) (c : cardinal A n) => ex (fun m : nat => cardinal (image f A) m /\\ m <= n)).",
                        "VernacExtend",
                        "8930fd4968bb48d6d3b63367285c9820276ad2e9"
                    ]
                },
                {
                    "command": [
                        "intros A0 H'0; try assumption.",
                        "VernacExtend",
                        "043473cd92151ad5830be981f19bec80970ba96e"
                    ]
                },
                {
                    "command": [
                        "exists 0; split; [ idtac | auto with * ].",
                        "VernacExtend",
                        "0e13b7af4e1a08c2eacb63795eea180aad329117"
                    ]
                },
                {
                    "command": [
                        "apply cardinal_empty; auto with *.",
                        "VernacExtend",
                        "c842643f9e61214b482c1f145cbfe29ef554a827"
                    ]
                },
                {
                    "command": [
                        "intros n0 H'0 A0 B x H'1 H'2 H'3; try assumption.",
                        "VernacExtend",
                        "6656d1bf97d8c1f089f5e6d79268b89fda956510"
                    ]
                },
                {
                    "command": [
                        "case (classic (in_part (f x) (image f B))).",
                        "VernacExtend",
                        "5f059274e23a860b9a778ed89b064ee1c4ac0cec"
                    ]
                },
                {
                    "command": [
                        "intros H'4; try assumption.",
                        "VernacExtend",
                        "2d5ac118a4bfa6ddc755a22bf0ae21340bea747e"
                    ]
                },
                {
                    "command": [
                        "elim (H'0 B); [ intros m E0; elim E0; intros H'7 H'8; try exact H'7; clear E0 | idtac ].",
                        "VernacExtend",
                        "351bd79b4f782a5756c943703b07b01c10ba9596"
                    ]
                },
                {
                    "command": [
                        "exists m; split; [ idtac | try assumption ].",
                        "VernacExtend",
                        "3baffa327ca2e989ac108b048ac335a96b492daa"
                    ]
                },
                {
                    "command": [
                        "apply cardinal_comp with (image f B) m; auto with *.",
                        "VernacExtend",
                        "2bd7313da0bb4329f7303f965ea219142b797fc3"
                    ]
                },
                {
                    "command": [
                        "apply Sym.",
                        "VernacExtend",
                        "b91ee1c3035127bafc790ce54633c93301d2dbb0"
                    ]
                },
                {
                    "command": [
                        "apply Trans with (image f (add_part B x)); auto with *.",
                        "VernacExtend",
                        "48ac1f9531df2817b86de42d3ebbf60d4d849f72"
                    ]
                },
                {
                    "command": [
                        "unfold add_part in |- *.",
                        "VernacExtend",
                        "0a542d8681966a7056e642e0f0817138025d44ef"
                    ]
                },
                {
                    "command": [
                        "apply Trans with (union (image f B) (image f (single x))); auto with *.",
                        "VernacExtend",
                        "a13e28e759f03dc061b89d9093722c628003a0bb"
                    ]
                },
                {
                    "command": [
                        "apply Trans with (union (image f B) (single (Ap f x))); auto with *.",
                        "VernacExtend",
                        "e14d795a73ee064ce23de8f26fb6b8ba27ef730c"
                    ]
                },
                {
                    "command": [
                        "auto with *.",
                        "VernacExtend",
                        "cafee3e5c160f4826f26575cc7be0078a2421ff0"
                    ]
                },
                {
                    "command": [
                        "apply cardinal_S with A0 x; auto with *.",
                        "VernacExtend",
                        "1e2a4276f3f6ae3de7129f9259019d2189dc8f50"
                    ]
                },
                {
                    "command": [
                        "intros H'4; try assumption.",
                        "VernacExtend",
                        "2d5ac118a4bfa6ddc755a22bf0ae21340bea747e"
                    ]
                },
                {
                    "command": [
                        "elim (H'0 B); [ intros m E0; elim E0; intros H'7 H'8; try exact H'7; clear E0 | idtac ].",
                        "VernacExtend",
                        "351bd79b4f782a5756c943703b07b01c10ba9596"
                    ]
                },
                {
                    "command": [
                        "exists (S m); split; [ try assumption | idtac ].",
                        "VernacExtend",
                        "4d720784c6f8b8a657f6f7215d3cf0d87306d9e6"
                    ]
                },
                {
                    "command": [
                        "apply cardinal_add with (image f B) (Ap f x); auto with *.",
                        "VernacExtend",
                        "0295512848cd71e03327ed1352a6297503d47d82"
                    ]
                },
                {
                    "command": [
                        "unfold add_part in |- *.",
                        "VernacExtend",
                        "0a542d8681966a7056e642e0f0817138025d44ef"
                    ]
                },
                {
                    "command": [
                        "unfold add_part in H'2.",
                        "VernacExtend",
                        "b1c77e908b1c930d42039cba1ea6ab115d78d581"
                    ]
                },
                {
                    "command": [
                        "apply Trans with (image f (union B (single x))); auto with *.",
                        "VernacExtend",
                        "6a0dddfebc9c0f46f5fc7a9e6a91ad3d443753cc"
                    ]
                },
                {
                    "command": [
                        "apply Trans with (union (image f B) (image f (single x))); auto with *.",
                        "VernacExtend",
                        "a13e28e759f03dc061b89d9093722c628003a0bb"
                    ]
                },
                {
                    "command": [
                        "auto with *.",
                        "VernacExtend",
                        "cafee3e5c160f4826f26575cc7be0078a2421ff0"
                    ]
                },
                {
                    "command": [
                        "apply cardinal_S with A0 x; auto with *.",
                        "VernacExtend",
                        "1e2a4276f3f6ae3de7129f9259019d2189dc8f50"
                    ]
                },
                {
                    "command": [
                        "auto with *.",
                        "VernacExtend",
                        "cafee3e5c160f4826f26575cc7be0078a2421ff0"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "cardinal_image_strict_lesser",
            "line_nb": 104,
            "steps": [
                {
                    "command": [
                        "intros E F f n; try assumption.",
                        "VernacExtend",
                        "5b8bf70a4c29eecb4d201bf9eaff08499efad267"
                    ]
                },
                {
                    "command": [
                        "case n.",
                        "VernacExtend",
                        "11697c0361eed9b7e10df873f1d76a9d8f9f100a"
                    ]
                },
                {
                    "command": [
                        "intros H' H'0; try assumption.",
                        "VernacExtend",
                        "2a6e62777c52d0d117412b0666577acfdc47501e"
                    ]
                },
                {
                    "command": [
                        "case (not_injective_prop H'0).",
                        "VernacExtend",
                        "6b3a3b61a5c8293a4da586b96226c1e1405404ff"
                    ]
                },
                {
                    "command": [
                        "intros x H'1; try assumption.",
                        "VernacExtend",
                        "fdfe31a49f38b00f87714bc5a7926790bc66aef6"
                    ]
                },
                {
                    "command": [
                        "absurd (in_part x (full E)); auto with *.",
                        "VernacExtend",
                        "43cd9c608fbe96d28f7f93a88055751a92b4798b"
                    ]
                },
                {
                    "command": [
                        "apply not_in_part_comp_r with (empty E); auto with *.",
                        "VernacExtend",
                        "659309127753cf7ed608fff5a1a456747164e19a"
                    ]
                },
                {
                    "command": [
                        "inversion H'.",
                        "VernacExtend",
                        "7eb2f09d685a0dbd7e1e32975a04fde5b8f610b0"
                    ]
                },
                {
                    "command": [
                        "auto with *.",
                        "VernacExtend",
                        "cafee3e5c160f4826f26575cc7be0078a2421ff0"
                    ]
                },
                {
                    "command": [
                        "intros n0 H' H'0; try assumption.",
                        "VernacExtend",
                        "2f6cdecb669f5c8d593d2d049cb3e1268386ac25"
                    ]
                },
                {
                    "command": [
                        "case (not_injective_prop H'0).",
                        "VernacExtend",
                        "6b3a3b61a5c8293a4da586b96226c1e1405404ff"
                    ]
                },
                {
                    "command": [
                        "intros x H'1; try assumption.",
                        "VernacExtend",
                        "fdfe31a49f38b00f87714bc5a7926790bc66aef6"
                    ]
                },
                {
                    "command": [
                        "elim H'1; intros y E0; elim E0; intros H'2 H'3; try exact H'2; clear E0 H'1.",
                        "VernacExtend",
                        "dc790bb50c73f14833932771240e0fcf5a6ae1c7"
                    ]
                },
                {
                    "command": [
                        "cut (cardinal (diff (full E) (single x)) n0).",
                        "VernacExtend",
                        "1efd8ce672a57880d18ef09502aeed307096a323"
                    ]
                },
                {
                    "command": [
                        "intros H'1; try assumption.",
                        "VernacExtend",
                        "36f49af2627c9f2414e15c73ddeebdc5b206aded"
                    ]
                },
                {
                    "command": [
                        "case (cardinal_image_lesser f H'1).",
                        "VernacExtend",
                        "6712fd5affd5ea369494682a0b4f1ee62ed8e015"
                    ]
                },
                {
                    "command": [
                        "intros m H'4; try assumption.",
                        "VernacExtend",
                        "fc845cd09d52dcb484b3b9b88590c408954a7cb8"
                    ]
                },
                {
                    "command": [
                        "exists m; split; [ try assumption | idtac ].",
                        "VernacExtend",
                        "abe3347cf7498581523ffbb61c3a1e3aac93aac3"
                    ]
                },
                {
                    "command": [
                        "elim H'4; intros H'5 H'6; try exact H'5; clear H'4.",
                        "VernacExtend",
                        "59cecf0adbddcda69fdb33e7559b59503c5f2586"
                    ]
                },
                {
                    "command": [
                        "apply cardinal_comp with (image f (diff (full E) (single x))) m; auto with *.",
                        "VernacExtend",
                        "b77885c9a1778ee6dfbba82383c49d9ece6fc339"
                    ]
                },
                {
                    "command": [
                        "apply included_antisym.",
                        "VernacExtend",
                        "5aaad01710549d176b548cb33143330f6a33c27f"
                    ]
                },
                {
                    "command": [
                        "unfold image_map in |- *.",
                        "VernacExtend",
                        "87f976bbb37e0040a8f3284d670276e1687f12c2"
                    ]
                },
                {
                    "command": [
                        "apply image_included; auto with *.",
                        "VernacExtend",
                        "7f89499fccbe58ea9c65d64ad3ea5d49dfff98d6"
                    ]
                },
                {
                    "command": [
                        "unfold image_map in |- *.",
                        "VernacExtend",
                        "87f976bbb37e0040a8f3284d670276e1687f12c2"
                    ]
                },
                {
                    "command": [
                        "unfold included in |- *.",
                        "VernacExtend",
                        "49d47da082bc436033ab68582d7a85f3cb0b6b75"
                    ]
                },
                {
                    "command": [
                        "intros x0 H'4; try assumption.",
                        "VernacExtend",
                        "d7f936c8456c4cfa75760fb6e2aa13872433418a"
                    ]
                },
                {
                    "command": [
                        "elim H'4.",
                        "VernacExtend",
                        "6b9f1f9423d39545e0007ba27d262903c68547c3"
                    ]
                },
                {
                    "command": [
                        "intros x1 H'7; try assumption.",
                        "VernacExtend",
                        "48e5c3525b97af6bad9880a0b5ecf5791a87f8bf"
                    ]
                },
                {
                    "command": [
                        "case (classic (Equal x1 x)).",
                        "VernacExtend",
                        "ecda373fab997c77ab4282f18a9191621b88af43"
                    ]
                },
                {
                    "command": [
                        "intros H'8; try assumption.",
                        "VernacExtend",
                        "4dc809b11ee527c02a25403de02bb6865ce36cd0"
                    ]
                },
                {
                    "command": [
                        "simpl in |- *.",
                        "VernacExtend",
                        "1b93169f4cf876d207c1fab22a2347202ab48d85"
                    ]
                },
                {
                    "command": [
                        "exists y; split; [ idtac | try assumption ].",
                        "VernacExtend",
                        "7f32201dd849fa57a20a63d098beb0a6770df3d7"
                    ]
                },
                {
                    "command": [
                        "split; [ idtac | try assumption ].",
                        "VernacExtend",
                        "c51dd02c76c3fc17e5bffc3bbcf27d25c5cb3a50"
                    ]
                },
                {
                    "command": [
                        "auto with *.",
                        "VernacExtend",
                        "cafee3e5c160f4826f26575cc7be0078a2421ff0"
                    ]
                },
                {
                    "command": [
                        "auto with *.",
                        "VernacExtend",
                        "cafee3e5c160f4826f26575cc7be0078a2421ff0"
                    ]
                },
                {
                    "command": [
                        "apply Trans with (f x); auto with *.",
                        "VernacExtend",
                        "7f5b43c02da723575c67c36d99c58c09e0bba5e6"
                    ]
                },
                {
                    "command": [
                        "elim H'7; intros H'9 H'10; try exact H'10; clear H'7.",
                        "VernacExtend",
                        "2a254e0af62ecfd55ee4f2d54971400573d41cb7"
                    ]
                },
                {
                    "command": [
                        "apply Trans with (f x1); auto with *.",
                        "VernacExtend",
                        "45050421c04aa49beeb35a4a353ad8de5d335cf5"
                    ]
                },
                {
                    "command": [
                        "intros H'8; try assumption.",
                        "VernacExtend",
                        "4dc809b11ee527c02a25403de02bb6865ce36cd0"
                    ]
                },
                {
                    "command": [
                        "simpl in |- *.",
                        "VernacExtend",
                        "1b93169f4cf876d207c1fab22a2347202ab48d85"
                    ]
                },
                {
                    "command": [
                        "exists x1; split; [ idtac | try assumption ].",
                        "VernacExtend",
                        "af2963166956db174f6f467980ac4f222230504d"
                    ]
                },
                {
                    "command": [
                        "auto with *.",
                        "VernacExtend",
                        "cafee3e5c160f4826f26575cc7be0078a2421ff0"
                    ]
                },
                {
                    "command": [
                        "elim H'7; intros H'9 H'10; try exact H'10; clear H'7.",
                        "VernacExtend",
                        "2a254e0af62ecfd55ee4f2d54971400573d41cb7"
                    ]
                },
                {
                    "command": [
                        "elim H'4; intros H'5 H'6; try exact H'6; clear H'4; auto with *.",
                        "VernacExtend",
                        "be16a77965b9663f04fdec8e3bf414fe5d36d524"
                    ]
                },
                {
                    "command": [
                        "apply cardinal_S with (full E) x; auto with *.",
                        "VernacExtend",
                        "f0642631cc31a8eb1faaf2119a3102d4dafd2776"
                    ]
                },
                {
                    "command": [
                        "unfold add_part in |- *.",
                        "VernacExtend",
                        "0a542d8681966a7056e642e0f0817138025d44ef"
                    ]
                },
                {
                    "command": [
                        "auto with *.",
                        "VernacExtend",
                        "cafee3e5c160f4826f26575cc7be0078a2421ff0"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "cardinal_image_equal_injective",
            "line_nb": 153,
            "steps": [
                {
                    "command": [
                        "intros E F f n H' H'0; try assumption.",
                        "VernacExtend",
                        "7ffb625c367dad516084c5e57220996b3108ac2d"
                    ]
                },
                {
                    "command": [
                        "apply NNPP.",
                        "VernacExtend",
                        "c972af1947412f7363e48b809906d3283d0fb638"
                    ]
                },
                {
                    "command": [
                        "red in |- *; intros H'1; try exact H'1.",
                        "VernacExtend",
                        "04df393ad6b06b95e0d371f48877e9c5ffa397f5"
                    ]
                },
                {
                    "command": [
                        "case (cardinal_image_strict_lesser H' H'1).",
                        "VernacExtend",
                        "c4d43663ff6aa933ee2ba5a92b405631540bdf00"
                    ]
                },
                {
                    "command": [
                        "intros x H'2; elim H'2; intros H'3 H'4; try exact H'4; clear H'2.",
                        "VernacExtend",
                        "990647bcc6a07e3a5514e5f639aba7e90cffab37"
                    ]
                },
                {
                    "command": [
                        "absurd (x = n); auto with *.",
                        "VernacExtend",
                        "270044b1cedf86afa8f96eea28f6ce583cff8f10"
                    ]
                },
                {
                    "command": [
                        "red in |- *; intros H'2; try exact H'2.",
                        "VernacExtend",
                        "a5273cb5b623b76c89f05d651ba3580c16b5ba0c"
                    ]
                },
                {
                    "command": [
                        "absurd (x < n); auto with *.",
                        "VernacExtend",
                        "472e230993c7ddc7ad619ab6b0f9a65b975f4a9a"
                    ]
                },
                {
                    "command": [
                        "rewrite H'2.",
                        "VernacExtend",
                        "884e4d7bc650f9624ecf7e3155e0da90d9130a00"
                    ]
                },
                {
                    "command": [
                        "auto with *.",
                        "VernacExtend",
                        "cafee3e5c160f4826f26575cc7be0078a2421ff0"
                    ]
                },
                {
                    "command": [
                        "apply cardinal_unique with (E := F) (A := image_map f); auto with *.",
                        "VernacExtend",
                        "3d634c4f17a7b2826553c4ae18468da9a4d42022"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "finite_injective_surjective",
            "line_nb": 169,
            "steps": [
                {
                    "command": [
                        "intros E F f n H' H'0 H'1; try assumption.",
                        "VernacExtend",
                        "ba63f68f49330acfe98eba2a4d26de4be19b0990"
                    ]
                },
                {
                    "command": [
                        "generalize (cardinal_image_injective H' H'1).",
                        "VernacExtend",
                        "1d0bc45a63a75c36f1f110d0d79c248a832afb02"
                    ]
                },
                {
                    "command": [
                        "intros H'2; try assumption.",
                        "VernacExtend",
                        "3e0142f6e43fd4a8990399a81c16960a527db165"
                    ]
                },
                {
                    "command": [
                        "apply image_full_surjective; auto with *.",
                        "VernacExtend",
                        "904a61c1137ee79d7f88e54ed4e42a44ad0dc405"
                    ]
                },
                {
                    "command": [
                        "unfold image_map in |- *.",
                        "VernacExtend",
                        "87f976bbb37e0040a8f3284d670276e1687f12c2"
                    ]
                },
                {
                    "command": [
                        "apply cardinal_equal_included_equal with n; auto with *.",
                        "VernacExtend",
                        "cad50ebf64a898bacb156a117dd4573c0360cd10"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "finite_surjective_injective",
            "line_nb": 179,
            "steps": [
                {
                    "command": [
                        "intros E F f n H' H'0 H'1; try assumption.",
                        "VernacExtend",
                        "ba63f68f49330acfe98eba2a4d26de4be19b0990"
                    ]
                },
                {
                    "command": [
                        "apply cardinal_image_equal_injective with n; auto with *.",
                        "VernacExtend",
                        "629cdacc1bb0c22bd5c617ff8df2dffd382b0757"
                    ]
                },
                {
                    "command": [
                        "apply cardinal_comp with (full F) n; auto with *.",
                        "VernacExtend",
                        "7f2fc89e57543cdf918227c20f464ce402e15dc5"
                    ]
                },
                {
                    "command": [
                        "apply Sym; auto with *.",
                        "VernacExtend",
                        "d536958544acfd2c3c246aad714810d1b4eb72d5"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "not_included_exist",
            "line_nb": 185,
            "steps": [
                {
                    "command": [
                        "intros E A B; simpl in |- *.",
                        "VernacExtend",
                        "b510118e587573a01d5dbfb75a3ebb6eae243fdd"
                    ]
                },
                {
                    "command": [
                        "unfold eq_part in |- *; simpl in |- *.",
                        "VernacExtend",
                        "f85bba6666f1278a61d5c9324cec9fb8a1868241"
                    ]
                },
                {
                    "command": [
                        "intros H' H'0; try assumption.",
                        "VernacExtend",
                        "2a6e62777c52d0d117412b0666577acfdc47501e"
                    ]
                },
                {
                    "command": [
                        "cut (ex (fun x : E => ~ ((in_part x B -> in_part x A) /\\ (in_part x A -> in_part x B)))).",
                        "VernacExtend",
                        "477ff38369939141984ee0dda97c7629abd70fb8"
                    ]
                },
                {
                    "command": [
                        "intros H'1; try assumption.",
                        "VernacExtend",
                        "36f49af2627c9f2414e15c73ddeebdc5b206aded"
                    ]
                },
                {
                    "command": [
                        "elim H'1; intros x E0; try exact E0; clear H'1.",
                        "VernacExtend",
                        "914c457614dcd8e7d1ab546dca01cac90daf6efb"
                    ]
                },
                {
                    "command": [
                        "exists x; split; [ try assumption | idtac ].",
                        "VernacExtend",
                        "11252310a314b25929ab26e7f8d4bceda8e7c9d0"
                    ]
                },
                {
                    "command": [
                        "red in E0.",
                        "VernacExtend",
                        "9fa52e15dbde3ea2a9012633f11ae2dbb4f7abf9"
                    ]
                },
                {
                    "command": [
                        "apply NNPP.",
                        "VernacExtend",
                        "c972af1947412f7363e48b809906d3283d0fb638"
                    ]
                },
                {
                    "command": [
                        "red in |- *; intros H'1; try exact H'1.",
                        "VernacExtend",
                        "04df393ad6b06b95e0d371f48877e9c5ffa397f5"
                    ]
                },
                {
                    "command": [
                        "lapply E0; [ intros H'2; apply H'2; clear E0 | clear E0 ].",
                        "VernacExtend",
                        "3547fa178c89fdb2949bb980046b8ad688fb0141"
                    ]
                },
                {
                    "command": [
                        "split; [ idtac | intros H'2; try assumption ].",
                        "VernacExtend",
                        "c3d8edfef6ef1d8312aa06f5428fbeda7a1b56b7"
                    ]
                },
                {
                    "command": [
                        "intros H'2; try assumption.",
                        "VernacExtend",
                        "3e0142f6e43fd4a8990399a81c16960a527db165"
                    ]
                },
                {
                    "command": [
                        "apply H'; auto with *.",
                        "VernacExtend",
                        "e207b29be22ad9d6d3a63585cfe0b637180e5850"
                    ]
                },
                {
                    "command": [
                        "absurd (in_part x A); auto with *.",
                        "VernacExtend",
                        "2c5ff5a1b016da6a136cfa2dcc98f6e142b9387c"
                    ]
                },
                {
                    "command": [
                        "red in |- *.",
                        "VernacExtend",
                        "95a3fb9e13ce19fdc8e335912fb83e57a9512b14"
                    ]
                },
                {
                    "command": [
                        "red in E0.",
                        "VernacExtend",
                        "9fa52e15dbde3ea2a9012633f11ae2dbb4f7abf9"
                    ]
                },
                {
                    "command": [
                        "intros H'1; try assumption.",
                        "VernacExtend",
                        "36f49af2627c9f2414e15c73ddeebdc5b206aded"
                    ]
                },
                {
                    "command": [
                        "lapply E0; [ intros H'2; apply H'2; clear E0 | clear E0 ].",
                        "VernacExtend",
                        "3547fa178c89fdb2949bb980046b8ad688fb0141"
                    ]
                },
                {
                    "command": [
                        "split; [ try assumption | idtac ].",
                        "VernacExtend",
                        "2f3e384e84efa246ea96d2db4b31f7d148a7455c"
                    ]
                },
                {
                    "command": [
                        "intros H'2; try assumption.",
                        "VernacExtend",
                        "3e0142f6e43fd4a8990399a81c16960a527db165"
                    ]
                },
                {
                    "command": [
                        "apply H'; auto with *.",
                        "VernacExtend",
                        "e207b29be22ad9d6d3a63585cfe0b637180e5850"
                    ]
                },
                {
                    "command": [
                        "auto with *.",
                        "VernacExtend",
                        "cafee3e5c160f4826f26575cc7be0078a2421ff0"
                    ]
                },
                {
                    "command": [
                        "apply not_all_ex_not with (P := fun x : E => (in_part x B -> in_part x A) /\\ (in_part x A -> in_part x B)); auto with *.",
                        "VernacExtend",
                        "0a6f16ef435ef2c85b84cfab151c76e8856ac4ea"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "cardinal_included",
            "line_nb": 211,
            "steps": [
                {
                    "command": [
                        "intros E A n H'; try assumption.",
                        "VernacExtend",
                        "b8205a2c836eb1926f0ad2c29edfd40e3262f283"
                    ]
                },
                {
                    "command": [
                        "apply cardinal_ind2 with (P := fun (n : nat) (A : part_set E) (c : cardinal A n) => forall B : part_set E, included B A -> ex (fun m : nat => cardinal B m /\\ m <= n)).",
                        "VernacExtend",
                        "9fefb5c2e1a8cc90b624252fa35fc0338e9f833e"
                    ]
                },
                {
                    "command": [
                        "intros A0 H'0 B H'1; exists 0; split; [ try assumption | idtac ]; auto with *.",
                        "VernacExtend",
                        "372ac40626b0a7c0bf6814063802fbdb61588910"
                    ]
                },
                {
                    "command": [
                        "apply cardinal_empty.",
                        "VernacExtend",
                        "de57667cc45b10809e2b8bfa182e3d98ecc197be"
                    ]
                },
                {
                    "command": [
                        "inversion H'0.",
                        "VernacExtend",
                        "00e0ad3eaaed6a837c55aecf644d04a72455e588"
                    ]
                },
                {
                    "command": [
                        "cut (included B (empty E)); auto with *.",
                        "VernacExtend",
                        "672a79f27aaaef28f010d9a7444584a7a99e9bea"
                    ]
                },
                {
                    "command": [
                        "apply included_comp with B A0; auto with *.",
                        "VernacExtend",
                        "0397010b62293ed04c3af76d0e8e11d1b57cbdb6"
                    ]
                },
                {
                    "command": [
                        "intros n0 H'0 A0 B x H'1 H'2 H'3 B0 H'4; try assumption.",
                        "VernacExtend",
                        "8b280c6c34de172ae2af2dbc84b838becb747b30"
                    ]
                },
                {
                    "command": [
                        "case (classic (Equal B0 A0)); intros.",
                        "VernacExtend",
                        "11f268a013b7c0831c37e7a4d6d522e35b7ce52a"
                    ]
                },
                {
                    "command": [
                        "exists (S n0); split; [ idtac | try assumption ].",
                        "VernacExtend",
                        "38d129c195c5354ca24ac72502f84cab8cb9a035"
                    ]
                },
                {
                    "command": [
                        "apply cardinal_comp with A0 (S n0); auto with *.",
                        "VernacExtend",
                        "d8b7b1023eb008b75362598e7954d453ec2bab5b"
                    ]
                },
                {
                    "command": [
                        "auto with *.",
                        "VernacExtend",
                        "cafee3e5c160f4826f26575cc7be0078a2421ff0"
                    ]
                },
                {
                    "command": [
                        "case (not_included_exist H'4 H).",
                        "VernacExtend",
                        "053afd01e412b254976c0f2ef50fbc3a1b62949c"
                    ]
                },
                {
                    "command": [
                        "intros x0 H'5; try assumption.",
                        "VernacExtend",
                        "59fdd9b2b51b69bc82fab68daceded436e8b5cb7"
                    ]
                },
                {
                    "command": [
                        "elim H'5; intros H'6 H'7; try exact H'6; clear H'5.",
                        "VernacExtend",
                        "c7f7559928461311b1329f1800d43c8ed83df6ae"
                    ]
                },
                {
                    "command": [
                        "lapply (H'0 (minus_part A0 x0)); [ intros H'8; elim (H'8 B0); [ intros m E0; elim E0; intros H'11 H'12; try exact H'11; clear E0 | idtac ] | idtac ]; auto with *.",
                        "VernacExtend",
                        "1b0133581dd9ced054426419765ced044ffc49a6"
                    ]
                },
                {
                    "command": [
                        "exists m; split; [ try assumption | idtac ].",
                        "VernacExtend",
                        "abe3347cf7498581523ffbb61c3a1e3aac93aac3"
                    ]
                },
                {
                    "command": [
                        "apply le_trans with n0; auto with *.",
                        "VernacExtend",
                        "6ce902c21613c4cd01026cb4f6304c5c69458280"
                    ]
                },
                {
                    "command": [
                        "unfold minus_part in |- *; simpl in |- *.",
                        "VernacExtend",
                        "1f1adff509a9b7d73a2d353fcb2afbb2cca71e88"
                    ]
                },
                {
                    "command": [
                        "red in |- *.",
                        "VernacExtend",
                        "95a3fb9e13ce19fdc8e335912fb83e57a9512b14"
                    ]
                },
                {
                    "command": [
                        "intros x1 H'5; try assumption.",
                        "VernacExtend",
                        "759b0c7c81417e8bb8688c934df04ae4ddc83ae2"
                    ]
                },
                {
                    "command": [
                        "simpl in |- *.",
                        "VernacExtend",
                        "1b93169f4cf876d207c1fab22a2347202ab48d85"
                    ]
                },
                {
                    "command": [
                        "split; [ try assumption | idtac ].",
                        "VernacExtend",
                        "2f3e384e84efa246ea96d2db4b31f7d148a7455c"
                    ]
                },
                {
                    "command": [
                        "apply H'4; auto with *.",
                        "VernacExtend",
                        "27e9e9cfc77eaab587cb12f418b5ee9cc1483290"
                    ]
                },
                {
                    "command": [
                        "red in |- *.",
                        "VernacExtend",
                        "95a3fb9e13ce19fdc8e335912fb83e57a9512b14"
                    ]
                },
                {
                    "command": [
                        "intros H'9; try assumption.",
                        "VernacExtend",
                        "b236fb2a90c928ce6db1073fb159a6c56142a0f0"
                    ]
                },
                {
                    "command": [
                        "apply H'7.",
                        "VernacExtend",
                        "522a3bd3a2d4377b5e7cf311c5132d50776eb129"
                    ]
                },
                {
                    "command": [
                        "apply in_part_comp_l with x1; auto with *.",
                        "VernacExtend",
                        "ef5bdecb0d3edbc8549c14ea9d9bd6e3d0f694fc"
                    ]
                },
                {
                    "command": [
                        "apply cardinal_S with A0 x0; auto with *.",
                        "VernacExtend",
                        "527bd9e014f7345f68862d6eabf7f3cf3a5935ad"
                    ]
                },
                {
                    "command": [
                        "apply Sym.",
                        "VernacExtend",
                        "b91ee1c3035127bafc790ce54633c93301d2dbb0"
                    ]
                },
                {
                    "command": [
                        "apply minus_add; auto with *.",
                        "VernacExtend",
                        "15d9f9bc24c19a43d12e7a1a8b9e8ec37eb0cb48"
                    ]
                },
                {
                    "command": [
                        "auto with *.",
                        "VernacExtend",
                        "cafee3e5c160f4826f26575cc7be0078a2421ff0"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "map_not_injective",
            "line_nb": 245,
            "steps": [
                {
                    "command": [
                        "intros A B f n m H' H'0 H'1; red in |- *; intros H'2; try exact H'2.",
                        "VernacExtend",
                        "04adb71f68a851fe40de30409904f38c64ed52a6"
                    ]
                },
                {
                    "command": [
                        "red in H'2.",
                        "VernacExtend",
                        "5b18245265eab67c1b95b0566c66dc9d7cd3fa88"
                    ]
                },
                {
                    "command": [
                        "case (tiroirs (E:=A) (F:=B) (f:=f) H' H'0 H'1); auto with *.",
                        "VernacExtend",
                        "c576b313309236741e33201ec6eb807e6eb72ab6"
                    ]
                },
                {
                    "command": [
                        "intros x H'3; try assumption.",
                        "VernacExtend",
                        "1af3d0ea7d9e5d0a139b9c8acfc9635734ab3fca"
                    ]
                },
                {
                    "command": [
                        "elim H'3; intros y E; elim E; intros H'4 H'5; try exact H'4; clear E H'3; auto with *.",
                        "VernacExtend",
                        "cd0304d2a1672ed967e70cdb4f2579d0b0312311"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        }
    ]
}