{
    "filename": "Hom_module.v",
    "coq_project": "algebra",
    "vernac_cmds": [
        [
            "Set Automatic Coercions Import.",
            "VernacSetOption",
            "12f2b52fb77cee7f2419b939e5a1046afa341e27"
        ],
        [
            "Set Implicit Arguments.",
            "VernacSetOption",
            "9e84ff8896f028601d8aded48c1d4aebe60aa584"
        ],
        [
            "Unset Strict Implicit.",
            "VernacUnsetOption",
            "2842adaf6959318f2042805935c46f513bdc0348"
        ],
        [
            "Require Export Module_util.",
            "VernacRequire",
            "8c519faedcea2358fdc96ed3f9b9958055b42e7d"
        ],
        [
            "Require Export Ring_facts.",
            "VernacRequire",
            "11d16195a26d1409aa01e3d61b4284ff94ba72ea"
        ],
        [
            "Require Export Module_facts.",
            "VernacRequire",
            "0291fd8f1a8cb0030948acf27a9fe0538590c077"
        ],
        [
            "Section Hom_module_def.",
            "VernacBeginSection",
            "586dbb59f6a5e0f264250ead920967e68ba2e55f"
        ],
        [
            "Variable R : CRING.",
            "VernacAssumption",
            "7055b552df5ec060a42f269fd71c01fbf3021987"
        ],
        [
            "Variable Mod1 Mod2 : MODULE R.",
            "VernacAssumption",
            "47184bc42a1bd4ffa36fc277fbaf5d8eb3d5ed6f"
        ],
        [
            "Definition add_hom_module : forall f g : Hom Mod1 Mod2, Hom Mod1 Mod2.",
            "VernacDefinition",
            "13f6301e85d24bd7d690e60ab37c099473900e01"
        ],
        [
            "intros f0 g.",
            "VernacExtend",
            "79a04338ce8b68a93da89cc2c96632945a34e80f"
        ],
        [
            "apply (BUILD_HOM_MODULE (R:=R) (Mod:=Mod1) (Mod':=Mod2) (ff:=fun x : Mod1 => sgroup_law Mod2 (f0 x) (g x))).",
            "VernacExtend",
            "685090d719c5c07d5ba479611800588800c11a45"
        ],
        [
            "abstract auto with algebra.",
            "VernacExtend",
            "788cb03ae23a62e561fa3630ff2557740d997117"
        ],
        [
            "abstract (intros x y; apply Trans with (sgroup_law (module_carrier Mod2) (sgroup_law (module_carrier Mod2) (Ap (sgroup_map (monoid_sgroup_hom (module_monoid_hom f0))) x) (Ap (sgroup_map (monoid_sgroup_hom (module_monoid_hom f0))) y)) (sgroup_law (module_carrier Mod2) (Ap (sgroup_map (monoid_sgroup_hom (module_monoid_hom g))) x) (Ap (sgroup_map (monoid_sgroup_hom (module_monoid_hom g))) y))); auto with algebra).",
            "VernacExtend",
            "88546ce3cdb6138131dfdc67fcae22e5084a39e6"
        ],
        [
            "abstract (apply Trans with (sgroup_law (module_carrier Mod2) (monoid_unit (module_carrier Mod2)) (monoid_unit (module_carrier Mod2))); auto with algebra).",
            "VernacExtend",
            "8fae3753d60cacbd9ecc08c8c113b364e7deb360"
        ],
        [
            "abstract (intros a x; apply Trans with (sgroup_law (module_carrier Mod2) (module_mult a (Ap (sgroup_map (monoid_sgroup_hom (module_monoid_hom f0))) x)) (module_mult a (Ap (sgroup_map (monoid_sgroup_hom (module_monoid_hom g))) x))); auto with algebra).",
            "VernacExtend",
            "e0a169133d7ce9591fc3e77e39e81287405b185f"
        ],
        [
            "Defined.",
            "VernacEndProof",
            "88c0be54a50df4bb90276c075406fe442428eb9c"
        ],
        [
            "Definition zero_hom_module : Hom Mod1 Mod2.",
            "VernacDefinition",
            "f4fe1b8d1544c20e268b2d801da4181e9364da5d"
        ],
        [
            "apply (BUILD_HOM_MODULE (R:=R) (Mod:=Mod1) (Mod':=Mod2) (ff:=fun x : Mod1 => monoid_unit Mod2)); abstract auto with algebra.",
            "VernacExtend",
            "0ad20c9bb34a26d9e931528591602903afac2118"
        ],
        [
            "Defined.",
            "VernacEndProof",
            "88c0be54a50df4bb90276c075406fe442428eb9c"
        ],
        [
            "Definition opp_hom_module : forall f : Hom Mod1 Mod2, Hom Mod1 Mod2.",
            "VernacDefinition",
            "121a8e3fef1f4a227c203a541695b35d4f03cbaf"
        ],
        [
            "intros f0.",
            "VernacExtend",
            "97aa18fce0879a0dbee8fb78d3acf08d92aee17c"
        ],
        [
            "apply (BUILD_HOM_MODULE (R:=R) (Mod:=Mod1) (Mod':=Mod2) (ff:=fun x : Mod1 => group_inverse Mod2 (f0 x))).",
            "VernacExtend",
            "dae79f9ed6af0d87df5687716bf7b8a69fc371f0"
        ],
        [
            "abstract auto with algebra.",
            "VernacExtend",
            "788cb03ae23a62e561fa3630ff2557740d997117"
        ],
        [
            "abstract (intros x y; apply Trans with (group_inverse (module_carrier Mod2) (sgroup_law (module_carrier Mod2) (Ap (sgroup_map (monoid_sgroup_hom (module_monoid_hom f0))) x) (Ap (sgroup_map (monoid_sgroup_hom (module_monoid_hom f0))) y))); auto with algebra; apply Trans with (group_inverse (module_carrier Mod2) (sgroup_law (module_carrier Mod2) (Ap (sgroup_map (monoid_sgroup_hom (module_monoid_hom f0))) y) (Ap (sgroup_map (monoid_sgroup_hom (module_monoid_hom f0))) x))); auto with algebra).",
            "VernacExtend",
            "129b4fdc0f7235fc55ae96493383eb5d4a83cc8c"
        ],
        [
            "abstract (apply Trans with (group_inverse (module_carrier Mod2) (monoid_unit (module_carrier Mod2))); auto with algebra).",
            "VernacExtend",
            "11a08ead903b0f7a04a22ac2370101fdcae4e0a2"
        ],
        [
            "abstract (intros a x; apply Trans with (group_inverse (module_carrier Mod2) (module_mult a (Ap (sgroup_map (monoid_sgroup_hom (module_monoid_hom f0))) x))); auto with algebra).",
            "VernacExtend",
            "232b56ab68654aebad359704833cc49ff27f2400"
        ],
        [
            "Defined.",
            "VernacEndProof",
            "88c0be54a50df4bb90276c075406fe442428eb9c"
        ],
        [
            "Definition mult_hom_module : forall (a : R) (f : Hom Mod1 Mod2), Hom Mod1 Mod2.",
            "VernacDefinition",
            "e7908567dbcfbec3c6892f69c6ae0f0632a30668"
        ],
        [
            "intros a f0.",
            "VernacExtend",
            "a685c9982040a6347eaaa770dc7b447321b0c797"
        ],
        [
            "apply (BUILD_HOM_MODULE (R:=R) (Mod:=Mod1) (Mod':=Mod2) (ff:=fun x : Mod1 => module_mult a (f0 x))).",
            "VernacExtend",
            "640a27f35340a06822df94722cd0968eb61edee1"
        ],
        [
            "abstract auto with algebra.",
            "VernacExtend",
            "788cb03ae23a62e561fa3630ff2557740d997117"
        ],
        [
            "abstract (intros x y; apply Trans with (module_mult a (sgroup_law (module_carrier Mod2) (Ap (sgroup_map (monoid_sgroup_hom (module_monoid_hom f0))) x) (Ap (sgroup_map (monoid_sgroup_hom (module_monoid_hom f0))) y))); auto with algebra).",
            "VernacExtend",
            "3ad82e8515590c851d96e62382268031e7bdd71b"
        ],
        [
            "abstract (apply Trans with (module_mult a (monoid_unit (module_carrier Mod2))); auto with algebra).",
            "VernacExtend",
            "d7d3f86c96b29ce67875918696d550a5789f13a0"
        ],
        [
            "abstract (intros a0 x; apply Trans with (module_mult a (module_mult a0 (Ap (sgroup_map (monoid_sgroup_hom (module_monoid_hom f0))) x))); auto with algebra; apply Trans with (module_mult (ring_mult a a0) (Ap (sgroup_map (monoid_sgroup_hom (module_monoid_hom f0))) x)); auto with algebra; apply Trans with (module_mult (ring_mult a0 a) (Ap (sgroup_map (monoid_sgroup_hom (module_monoid_hom f0))) x)); auto with algebra).",
            "VernacExtend",
            "9f81574da1e0545f0b6740eb3479a0e799eee1b0"
        ],
        [
            "Defined.",
            "VernacEndProof",
            "88c0be54a50df4bb90276c075406fe442428eb9c"
        ],
        [
            "Definition Hom_module : MODULE R.",
            "VernacDefinition",
            "1c485f08381d9a944493024e9ded6692bd4f2819"
        ],
        [
            "apply (BUILD_MODULE (R:=R) (E:=Hom Mod1 Mod2) (genlaw:=add_hom_module) (e:=zero_hom_module) (geninv:=opp_hom_module) (gen_module_op:=mult_hom_module)); try abstract (simpl in |- *; unfold Map_eq in |- *; simpl in |- *; auto with algebra).",
            "VernacExtend",
            "23627d216ff779a47534d015a813e3a94563f191"
        ],
        [
            "Defined.",
            "VernacEndProof",
            "88c0be54a50df4bb90276c075406fe442428eb9c"
        ],
        [
            "End Hom_module_def.",
            "VernacEndSegment",
            "3521c2b1292253288b8944ed8d1a59bd877a28f2"
        ]
    ],
    "proofs": [
        {
            "name": "add_hom_module",
            "line_nb": 9,
            "steps": [
                {
                    "command": [
                        "intros f0 g.",
                        "VernacExtend",
                        "79a04338ce8b68a93da89cc2c96632945a34e80f"
                    ]
                },
                {
                    "command": [
                        "apply (BUILD_HOM_MODULE (R:=R) (Mod:=Mod1) (Mod':=Mod2) (ff:=fun x : Mod1 => sgroup_law Mod2 (f0 x) (g x))).",
                        "VernacExtend",
                        "685090d719c5c07d5ba479611800588800c11a45"
                    ]
                },
                {
                    "command": [
                        "abstract auto with algebra.",
                        "VernacExtend",
                        "788cb03ae23a62e561fa3630ff2557740d997117"
                    ]
                },
                {
                    "command": [
                        "abstract (intros x y; apply Trans with (sgroup_law (module_carrier Mod2) (sgroup_law (module_carrier Mod2) (Ap (sgroup_map (monoid_sgroup_hom (module_monoid_hom f0))) x) (Ap (sgroup_map (monoid_sgroup_hom (module_monoid_hom f0))) y)) (sgroup_law (module_carrier Mod2) (Ap (sgroup_map (monoid_sgroup_hom (module_monoid_hom g))) x) (Ap (sgroup_map (monoid_sgroup_hom (module_monoid_hom g))) y))); auto with algebra).",
                        "VernacExtend",
                        "88546ce3cdb6138131dfdc67fcae22e5084a39e6"
                    ]
                },
                {
                    "command": [
                        "abstract (apply Trans with (sgroup_law (module_carrier Mod2) (monoid_unit (module_carrier Mod2)) (monoid_unit (module_carrier Mod2))); auto with algebra).",
                        "VernacExtend",
                        "8fae3753d60cacbd9ecc08c8c113b364e7deb360"
                    ]
                },
                {
                    "command": [
                        "abstract (intros a x; apply Trans with (sgroup_law (module_carrier Mod2) (module_mult a (Ap (sgroup_map (monoid_sgroup_hom (module_monoid_hom f0))) x)) (module_mult a (Ap (sgroup_map (monoid_sgroup_hom (module_monoid_hom g))) x))); auto with algebra).",
                        "VernacExtend",
                        "e0a169133d7ce9591fc3e77e39e81287405b185f"
                    ]
                },
                {
                    "command": [
                        "Defined.",
                        "VernacEndProof",
                        "88c0be54a50df4bb90276c075406fe442428eb9c"
                    ]
                }
            ]
        },
        {
            "name": "zero_hom_module",
            "line_nb": 17,
            "steps": [
                {
                    "command": [
                        "apply (BUILD_HOM_MODULE (R:=R) (Mod:=Mod1) (Mod':=Mod2) (ff:=fun x : Mod1 => monoid_unit Mod2)); abstract auto with algebra.",
                        "VernacExtend",
                        "0ad20c9bb34a26d9e931528591602903afac2118"
                    ]
                },
                {
                    "command": [
                        "Defined.",
                        "VernacEndProof",
                        "88c0be54a50df4bb90276c075406fe442428eb9c"
                    ]
                }
            ]
        },
        {
            "name": "opp_hom_module",
            "line_nb": 20,
            "steps": [
                {
                    "command": [
                        "intros f0.",
                        "VernacExtend",
                        "97aa18fce0879a0dbee8fb78d3acf08d92aee17c"
                    ]
                },
                {
                    "command": [
                        "apply (BUILD_HOM_MODULE (R:=R) (Mod:=Mod1) (Mod':=Mod2) (ff:=fun x : Mod1 => group_inverse Mod2 (f0 x))).",
                        "VernacExtend",
                        "dae79f9ed6af0d87df5687716bf7b8a69fc371f0"
                    ]
                },
                {
                    "command": [
                        "abstract auto with algebra.",
                        "VernacExtend",
                        "788cb03ae23a62e561fa3630ff2557740d997117"
                    ]
                },
                {
                    "command": [
                        "abstract (intros x y; apply Trans with (group_inverse (module_carrier Mod2) (sgroup_law (module_carrier Mod2) (Ap (sgroup_map (monoid_sgroup_hom (module_monoid_hom f0))) x) (Ap (sgroup_map (monoid_sgroup_hom (module_monoid_hom f0))) y))); auto with algebra; apply Trans with (group_inverse (module_carrier Mod2) (sgroup_law (module_carrier Mod2) (Ap (sgroup_map (monoid_sgroup_hom (module_monoid_hom f0))) y) (Ap (sgroup_map (monoid_sgroup_hom (module_monoid_hom f0))) x))); auto with algebra).",
                        "VernacExtend",
                        "129b4fdc0f7235fc55ae96493383eb5d4a83cc8c"
                    ]
                },
                {
                    "command": [
                        "abstract (apply Trans with (group_inverse (module_carrier Mod2) (monoid_unit (module_carrier Mod2))); auto with algebra).",
                        "VernacExtend",
                        "11a08ead903b0f7a04a22ac2370101fdcae4e0a2"
                    ]
                },
                {
                    "command": [
                        "abstract (intros a x; apply Trans with (group_inverse (module_carrier Mod2) (module_mult a (Ap (sgroup_map (monoid_sgroup_hom (module_monoid_hom f0))) x))); auto with algebra).",
                        "VernacExtend",
                        "232b56ab68654aebad359704833cc49ff27f2400"
                    ]
                },
                {
                    "command": [
                        "Defined.",
                        "VernacEndProof",
                        "88c0be54a50df4bb90276c075406fe442428eb9c"
                    ]
                }
            ]
        },
        {
            "name": "mult_hom_module",
            "line_nb": 28,
            "steps": [
                {
                    "command": [
                        "intros a f0.",
                        "VernacExtend",
                        "a685c9982040a6347eaaa770dc7b447321b0c797"
                    ]
                },
                {
                    "command": [
                        "apply (BUILD_HOM_MODULE (R:=R) (Mod:=Mod1) (Mod':=Mod2) (ff:=fun x : Mod1 => module_mult a (f0 x))).",
                        "VernacExtend",
                        "640a27f35340a06822df94722cd0968eb61edee1"
                    ]
                },
                {
                    "command": [
                        "abstract auto with algebra.",
                        "VernacExtend",
                        "788cb03ae23a62e561fa3630ff2557740d997117"
                    ]
                },
                {
                    "command": [
                        "abstract (intros x y; apply Trans with (module_mult a (sgroup_law (module_carrier Mod2) (Ap (sgroup_map (monoid_sgroup_hom (module_monoid_hom f0))) x) (Ap (sgroup_map (monoid_sgroup_hom (module_monoid_hom f0))) y))); auto with algebra).",
                        "VernacExtend",
                        "3ad82e8515590c851d96e62382268031e7bdd71b"
                    ]
                },
                {
                    "command": [
                        "abstract (apply Trans with (module_mult a (monoid_unit (module_carrier Mod2))); auto with algebra).",
                        "VernacExtend",
                        "d7d3f86c96b29ce67875918696d550a5789f13a0"
                    ]
                },
                {
                    "command": [
                        "abstract (intros a0 x; apply Trans with (module_mult a (module_mult a0 (Ap (sgroup_map (monoid_sgroup_hom (module_monoid_hom f0))) x))); auto with algebra; apply Trans with (module_mult (ring_mult a a0) (Ap (sgroup_map (monoid_sgroup_hom (module_monoid_hom f0))) x)); auto with algebra; apply Trans with (module_mult (ring_mult a0 a) (Ap (sgroup_map (monoid_sgroup_hom (module_monoid_hom f0))) x)); auto with algebra).",
                        "VernacExtend",
                        "9f81574da1e0545f0b6740eb3479a0e799eee1b0"
                    ]
                },
                {
                    "command": [
                        "Defined.",
                        "VernacEndProof",
                        "88c0be54a50df4bb90276c075406fe442428eb9c"
                    ]
                }
            ]
        },
        {
            "name": "Hom_module",
            "line_nb": 36,
            "steps": [
                {
                    "command": [
                        "apply (BUILD_MODULE (R:=R) (E:=Hom Mod1 Mod2) (genlaw:=add_hom_module) (e:=zero_hom_module) (geninv:=opp_hom_module) (gen_module_op:=mult_hom_module)); try abstract (simpl in |- *; unfold Map_eq in |- *; simpl in |- *; auto with algebra).",
                        "VernacExtend",
                        "23627d216ff779a47534d015a813e3a94563f191"
                    ]
                },
                {
                    "command": [
                        "Defined.",
                        "VernacEndProof",
                        "88c0be54a50df4bb90276c075406fe442428eb9c"
                    ]
                }
            ]
        }
    ]
}