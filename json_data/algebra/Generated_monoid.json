{
    "filename": "Generated_monoid.v",
    "coq_project": "algebra",
    "vernac_cmds": [
        [
            "Set Implicit Arguments.",
            "VernacSetOption",
            "9e84ff8896f028601d8aded48c1d4aebe60aa584"
        ],
        [
            "Unset Strict Implicit.",
            "VernacUnsetOption",
            "2842adaf6959318f2042805935c46f513bdc0348"
        ],
        [
            "Require Export Monoid_kernel.",
            "VernacRequire",
            "b00524cdc8de15234ce6c6ef9e7fd5ef39b265b7"
        ],
        [
            "Require Export Free_monoid.",
            "VernacRequire",
            "e218c9c3a2553f0c01ebefe1eddd3222abcc43d2"
        ],
        [
            "Section Generated_monoid_def.",
            "VernacBeginSection",
            "5fec8a3330d50f304d1f5f5576343e9572ed3753"
        ],
        [
            "Variable M : MONOID.",
            "VernacAssumption",
            "144e443537282f5b4d5d700a3f1eca6e7050e1c2"
        ],
        [
            "Variable A : part_set M.",
            "VernacAssumption",
            "0131edda15ccfd37183267bcf157c34a0b0416b2"
        ],
        [
            "Definition generated_monoid : submonoid M := image_monoid_hom (FM_lift (inj_part A)).",
            "VernacDefinition",
            "a00e796928e8362e3896f7502f0cbd5cdab02ab9"
        ],
        [
            "End Generated_monoid_def.",
            "VernacEndSegment",
            "7bedc51fe531c8440337121e89582d88d55f751b"
        ],
        [
            "Lemma generated_monoid_minimal : forall (M : MONOID) (A : part_set M) (H : submonoid M), included A H -> included (generated_monoid A) H.",
            "VernacStartTheoremProof",
            "721ca3fb2bf7b904cf9bc85cc0c995fe53e34419"
        ],
        [
            "unfold included in |- *.",
            "VernacExtend",
            "49d47da082bc436033ab68582d7a85f3cb0b6b75"
        ],
        [
            "simpl in |- *.",
            "VernacExtend",
            "1b93169f4cf876d207c1fab22a2347202ab48d85"
        ],
        [
            "intros M A H H' x H'0; try assumption.",
            "VernacExtend",
            "bfb687bb33d6eee322ddbb5e5916e75531153d55"
        ],
        [
            "elim H'0; intros x0; clear H'0.",
            "VernacExtend",
            "a8c4c17923dd4f6d4b74b8bb29e490c53e497c7f"
        ],
        [
            "generalize x; clear x.",
            "VernacExtend",
            "3a730666dcffe77922ab24fe4249a5512fcfd603"
        ],
        [
            "elim x0.",
            "VernacExtend",
            "1155801c0eeffb3f5e993dea5a1f3c2ebc1c8663"
        ],
        [
            "intros c; try assumption.",
            "VernacExtend",
            "8b3d69310539aa4cc67e225e861c19a1822a8a1c"
        ],
        [
            "elim c.",
            "VernacExtend",
            "971990f3c17a330620f8173652263542ab376292"
        ],
        [
            "simpl in |- *.",
            "VernacExtend",
            "1b93169f4cf876d207c1fab22a2347202ab48d85"
        ],
        [
            "intros y subtype_prf x H'0; elim H'0; intros H'1 H'2; try exact H'2; clear H'0.",
            "VernacExtend",
            "3247b513c70907b3b458971f1aa3d997c30fa9a9"
        ],
        [
            "apply in_part_comp_l with y; auto with algebra.",
            "VernacExtend",
            "a96ecfe6d4f87e02909cce250c1293c1a4089f55"
        ],
        [
            "intros f H'0 f0 H'1 x H'2; elim H'2; intros H'3 H'4; try exact H'4; clear H'2.",
            "VernacExtend",
            "ad5a972c86ee11baac1117beec383ff45bcce388"
        ],
        [
            "simpl in H'4.",
            "VernacExtend",
            "5cb40b109024d2f0cafeb9067e282f649f21f905"
        ],
        [
            "apply in_part_comp_l with (sgroup_law M (FM_lift_fun (inj_part A) f) (FM_lift_fun (inj_part A) f0)); auto with algebra.",
            "VernacExtend",
            "488b59269d3bf1b81d678c46475f1abcb36a54f1"
        ],
        [
            "simpl in |- *.",
            "VernacExtend",
            "1b93169f4cf876d207c1fab22a2347202ab48d85"
        ],
        [
            "intros x H'0; elim H'0; intros H'1 H'2; try exact H'2; clear H'0.",
            "VernacExtend",
            "257fb14bfa84a809dca947228611ae53c2805d48"
        ],
        [
            "apply in_part_comp_l with (monoid_unit M); auto with algebra.",
            "VernacExtend",
            "49f1528fd587707eb8c9996770db3b107a55c73f"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma generated_monoid_prop_included : forall (M : MONOID) (A : part_set M), included A (generated_monoid A).",
            "VernacStartTheoremProof",
            "7a3b2d7c56c28b0ce4e87aee437e0b02815f7e15"
        ],
        [
            "unfold included in |- *.",
            "VernacExtend",
            "49d47da082bc436033ab68582d7a85f3cb0b6b75"
        ],
        [
            "simpl in |- *.",
            "VernacExtend",
            "1b93169f4cf876d207c1fab22a2347202ab48d85"
        ],
        [
            "intros M A x H'; try assumption.",
            "VernacExtend",
            "781d4831911ba6e3c92fa1748f488e4cdad19383"
        ],
        [
            "exists (Var (V:=A) (Build_subtype (E:=M) (P:=A) (subtype_elt:=x) H')); split; [ idtac | try assumption ].",
            "VernacExtend",
            "1950bfaea5d3a3470bfc2b6865494870b5e344d1"
        ],
        [
            "auto with algebra.",
            "VernacExtend",
            "2a8b2ac72ff20b5f342f7b76f72f9b539e5a10f0"
        ],
        [
            "simpl in |- *.",
            "VernacExtend",
            "1b93169f4cf876d207c1fab22a2347202ab48d85"
        ],
        [
            "auto with algebra.",
            "VernacExtend",
            "2a8b2ac72ff20b5f342f7b76f72f9b539e5a10f0"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma generated_monoid_prop : forall (M : MONOID) (A : part_set M) (y : M), in_part y (generated_monoid A) -> exists x : FM A, Equal y (FM_lift (inj_part A) x).",
            "VernacStartTheoremProof",
            "1296df11242ed8d10abe6c4cd32426d537f06888"
        ],
        [
            "simpl in |- *; auto with algebra.",
            "VernacExtend",
            "d6b9b4fa1f9e16b197ca7f795deb2bc736dbeac5"
        ],
        [
            "intros M A y H'; try assumption.",
            "VernacExtend",
            "4d05a42c6e198bbcdb92439798c23acfbb07dd00"
        ],
        [
            "elim H'; intros x E; elim E; intros H'0 H'1; try exact H'1; clear E H'.",
            "VernacExtend",
            "78c6776f3c6ba50defdaa65b65099fc2c90f101d"
        ],
        [
            "exists x; try assumption.",
            "VernacExtend",
            "a251c410f0ab72130a5a312ded511c093841a93c"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma generated_monoid_prop_rev : forall (M : MONOID) (A : part_set M) (y : M), (exists x : FM A, Equal y (FM_lift (inj_part A) x)) -> in_part y (generated_monoid A).",
            "VernacStartTheoremProof",
            "5fbfbb2c96b821474f84e5adbbec8b068072b9a8"
        ],
        [
            "intros M A y H'; try assumption.",
            "VernacExtend",
            "4d05a42c6e198bbcdb92439798c23acfbb07dd00"
        ],
        [
            "elim H'; intros x E; try exact E; clear H'.",
            "VernacExtend",
            "8a1f4131612f73c2a8e90cc93567b552b04480d0"
        ],
        [
            "simpl in |- *; auto with algebra.",
            "VernacExtend",
            "d6b9b4fa1f9e16b197ca7f795deb2bc736dbeac5"
        ],
        [
            "exists x; split; [ idtac | try assumption ].",
            "VernacExtend",
            "b2241ce412f87da77af163fc5b4c1b26840552cd"
        ],
        [
            "auto with algebra.",
            "VernacExtend",
            "2a8b2ac72ff20b5f342f7b76f72f9b539e5a10f0"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Hint Resolve generated_monoid_minimal generated_monoid_prop_included generated_monoid_prop_rev: algebra.",
            "VernacHints",
            "0284ea7918007bbc4f88bb70db73abf7de7ff7e3"
        ]
    ],
    "proofs": [
        {
            "name": "generated_monoid_minimal",
            "line_nb": 9,
            "steps": [
                {
                    "command": [
                        "unfold included in |- *.",
                        "VernacExtend",
                        "49d47da082bc436033ab68582d7a85f3cb0b6b75"
                    ]
                },
                {
                    "command": [
                        "simpl in |- *.",
                        "VernacExtend",
                        "1b93169f4cf876d207c1fab22a2347202ab48d85"
                    ]
                },
                {
                    "command": [
                        "intros M A H H' x H'0; try assumption.",
                        "VernacExtend",
                        "bfb687bb33d6eee322ddbb5e5916e75531153d55"
                    ]
                },
                {
                    "command": [
                        "elim H'0; intros x0; clear H'0.",
                        "VernacExtend",
                        "a8c4c17923dd4f6d4b74b8bb29e490c53e497c7f"
                    ]
                },
                {
                    "command": [
                        "generalize x; clear x.",
                        "VernacExtend",
                        "3a730666dcffe77922ab24fe4249a5512fcfd603"
                    ]
                },
                {
                    "command": [
                        "elim x0.",
                        "VernacExtend",
                        "1155801c0eeffb3f5e993dea5a1f3c2ebc1c8663"
                    ]
                },
                {
                    "command": [
                        "intros c; try assumption.",
                        "VernacExtend",
                        "8b3d69310539aa4cc67e225e861c19a1822a8a1c"
                    ]
                },
                {
                    "command": [
                        "elim c.",
                        "VernacExtend",
                        "971990f3c17a330620f8173652263542ab376292"
                    ]
                },
                {
                    "command": [
                        "simpl in |- *.",
                        "VernacExtend",
                        "1b93169f4cf876d207c1fab22a2347202ab48d85"
                    ]
                },
                {
                    "command": [
                        "intros y subtype_prf x H'0; elim H'0; intros H'1 H'2; try exact H'2; clear H'0.",
                        "VernacExtend",
                        "3247b513c70907b3b458971f1aa3d997c30fa9a9"
                    ]
                },
                {
                    "command": [
                        "apply in_part_comp_l with y; auto with algebra.",
                        "VernacExtend",
                        "a96ecfe6d4f87e02909cce250c1293c1a4089f55"
                    ]
                },
                {
                    "command": [
                        "intros f H'0 f0 H'1 x H'2; elim H'2; intros H'3 H'4; try exact H'4; clear H'2.",
                        "VernacExtend",
                        "ad5a972c86ee11baac1117beec383ff45bcce388"
                    ]
                },
                {
                    "command": [
                        "simpl in H'4.",
                        "VernacExtend",
                        "5cb40b109024d2f0cafeb9067e282f649f21f905"
                    ]
                },
                {
                    "command": [
                        "apply in_part_comp_l with (sgroup_law M (FM_lift_fun (inj_part A) f) (FM_lift_fun (inj_part A) f0)); auto with algebra.",
                        "VernacExtend",
                        "488b59269d3bf1b81d678c46475f1abcb36a54f1"
                    ]
                },
                {
                    "command": [
                        "simpl in |- *.",
                        "VernacExtend",
                        "1b93169f4cf876d207c1fab22a2347202ab48d85"
                    ]
                },
                {
                    "command": [
                        "intros x H'0; elim H'0; intros H'1 H'2; try exact H'2; clear H'0.",
                        "VernacExtend",
                        "257fb14bfa84a809dca947228611ae53c2805d48"
                    ]
                },
                {
                    "command": [
                        "apply in_part_comp_l with (monoid_unit M); auto with algebra.",
                        "VernacExtend",
                        "49f1528fd587707eb8c9996770db3b107a55c73f"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "generated_monoid_prop_included",
            "line_nb": 28,
            "steps": [
                {
                    "command": [
                        "unfold included in |- *.",
                        "VernacExtend",
                        "49d47da082bc436033ab68582d7a85f3cb0b6b75"
                    ]
                },
                {
                    "command": [
                        "simpl in |- *.",
                        "VernacExtend",
                        "1b93169f4cf876d207c1fab22a2347202ab48d85"
                    ]
                },
                {
                    "command": [
                        "intros M A x H'; try assumption.",
                        "VernacExtend",
                        "781d4831911ba6e3c92fa1748f488e4cdad19383"
                    ]
                },
                {
                    "command": [
                        "exists (Var (V:=A) (Build_subtype (E:=M) (P:=A) (subtype_elt:=x) H')); split; [ idtac | try assumption ].",
                        "VernacExtend",
                        "1950bfaea5d3a3470bfc2b6865494870b5e344d1"
                    ]
                },
                {
                    "command": [
                        "auto with algebra.",
                        "VernacExtend",
                        "2a8b2ac72ff20b5f342f7b76f72f9b539e5a10f0"
                    ]
                },
                {
                    "command": [
                        "simpl in |- *.",
                        "VernacExtend",
                        "1b93169f4cf876d207c1fab22a2347202ab48d85"
                    ]
                },
                {
                    "command": [
                        "auto with algebra.",
                        "VernacExtend",
                        "2a8b2ac72ff20b5f342f7b76f72f9b539e5a10f0"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "generated_monoid_prop",
            "line_nb": 37,
            "steps": [
                {
                    "command": [
                        "simpl in |- *; auto with algebra.",
                        "VernacExtend",
                        "d6b9b4fa1f9e16b197ca7f795deb2bc736dbeac5"
                    ]
                },
                {
                    "command": [
                        "intros M A y H'; try assumption.",
                        "VernacExtend",
                        "4d05a42c6e198bbcdb92439798c23acfbb07dd00"
                    ]
                },
                {
                    "command": [
                        "elim H'; intros x E; elim E; intros H'0 H'1; try exact H'1; clear E H'.",
                        "VernacExtend",
                        "78c6776f3c6ba50defdaa65b65099fc2c90f101d"
                    ]
                },
                {
                    "command": [
                        "exists x; try assumption.",
                        "VernacExtend",
                        "a251c410f0ab72130a5a312ded511c093841a93c"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "generated_monoid_prop_rev",
            "line_nb": 43,
            "steps": [
                {
                    "command": [
                        "intros M A y H'; try assumption.",
                        "VernacExtend",
                        "4d05a42c6e198bbcdb92439798c23acfbb07dd00"
                    ]
                },
                {
                    "command": [
                        "elim H'; intros x E; try exact E; clear H'.",
                        "VernacExtend",
                        "8a1f4131612f73c2a8e90cc93567b552b04480d0"
                    ]
                },
                {
                    "command": [
                        "simpl in |- *; auto with algebra.",
                        "VernacExtend",
                        "d6b9b4fa1f9e16b197ca7f795deb2bc736dbeac5"
                    ]
                },
                {
                    "command": [
                        "exists x; split; [ idtac | try assumption ].",
                        "VernacExtend",
                        "b2241ce412f87da77af163fc5b4c1b26840552cd"
                    ]
                },
                {
                    "command": [
                        "auto with algebra.",
                        "VernacExtend",
                        "2a8b2ac72ff20b5f342f7b76f72f9b539e5a10f0"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        }
    ]
}