{
    "filename": "Parts.v",
    "coq_project": "algebra",
    "vernac_cmds": [
        [
            "Set Implicit Arguments.",
            "VernacSetOption",
            "9e84ff8896f028601d8aded48c1d4aebe60aa584"
        ],
        [
            "Unset Strict Implicit.",
            "VernacUnsetOption",
            "2842adaf6959318f2042805935c46f513bdc0348"
        ],
        [
            "Require Export Sets.",
            "VernacRequire",
            "a65e6b31683eae55f1523d592fe820e3d5176379"
        ],
        [
            "Comments \"We define here the set of parts of a set, inclusion, union of a part,\".",
            "VernacComments",
            "b92857dcea20c04c0ea7c91a0a6a986d6081cd7a"
        ],
        [
            "Comments \"and we prove that there is no surjection from a set in its part set\".",
            "VernacComments",
            "639e44c284e9936ec1f1b3079cadd5db62ad8140"
        ],
        [
            "Section Subtype.",
            "VernacBeginSection",
            "7e91944c988641d41f57b50e61081d5b5ffe9186"
        ],
        [
            "Comments \"In Coq type theory, there is no primitive notion of subtype\".",
            "VernacComments",
            "0dbd49037c579f4a8844220861f421867e65c22a"
        ],
        [
            "Comments \"Then we have to define such a notion\".",
            "VernacComments",
            "1b30e9b02a28f02a18c2b3ec1b9d140e49fbbfc4"
        ],
        [
            "Variable E : Setoid.",
            "VernacAssumption",
            "cafb1870f48a7785473ed62f8eb64582fbbe308d"
        ],
        [
            "Variable F : Type.",
            "VernacAssumption",
            "39a3b55359069bde70b10d82fff6bd63d9653838"
        ],
        [
            "Variable i : F -> E.",
            "VernacAssumption",
            "24bf1f2d357d47956071f64b094d16c1013f3512"
        ],
        [
            "Comments \"We have implicitely defined a subset of\" E \"which is the image of\" i \".\".",
            "VernacComments",
            "bc3a36715ed3c391d2b60ed8ac8891ed1d1ee2b4"
        ],
        [
            "Comments \"As a setoid, this subset has\" F \" as carrier, and we identify two elements of\" F \"which have the same image by\" i \":\".",
            "VernacComments",
            "8dc8475f60ec0cf956d69075f9e54730df84f5f4"
        ],
        [
            "Definition subtype_image_equal (x y : F) : Prop := Equal (i x) (i y).",
            "VernacDefinition",
            "1eba8bc99121b362ccce30b6a0192a5d5e43e16c"
        ],
        [
            "Lemma subtype_image_equiv : equivalence subtype_image_equal.",
            "VernacStartTheoremProof",
            "49e03c11c3007b688021d65e2ee38b9e19fb9b0b"
        ],
        [
            "red in |- *.",
            "VernacExtend",
            "95a3fb9e13ce19fdc8e335912fb83e57a9512b14"
        ],
        [
            "split; [ try assumption | idtac ].",
            "VernacExtend",
            "2f3e384e84efa246ea96d2db4b31f7d148a7455c"
        ],
        [
            "red in |- *.",
            "VernacExtend",
            "95a3fb9e13ce19fdc8e335912fb83e57a9512b14"
        ],
        [
            "unfold subtype_image_equal in |- *; unfold app_rel in |- *; simpl in |- *; auto with algebra.",
            "VernacExtend",
            "84b168ceb4b974beca2e7b7d6a515ecf9400eaad"
        ],
        [
            "red in |- *.",
            "VernacExtend",
            "95a3fb9e13ce19fdc8e335912fb83e57a9512b14"
        ],
        [
            "split; [ try assumption | idtac ].",
            "VernacExtend",
            "2f3e384e84efa246ea96d2db4b31f7d148a7455c"
        ],
        [
            "red in |- *.",
            "VernacExtend",
            "95a3fb9e13ce19fdc8e335912fb83e57a9512b14"
        ],
        [
            "unfold subtype_image_equal in |- *; unfold app_rel in |- *; simpl in |- *; auto with algebra.",
            "VernacExtend",
            "84b168ceb4b974beca2e7b7d6a515ecf9400eaad"
        ],
        [
            "intros x y z H' H'0; try assumption.",
            "VernacExtend",
            "92486dfbaec6209765e08194fc2670eff8aef754"
        ],
        [
            "apply Trans with (i y); auto with algebra.",
            "VernacExtend",
            "a6b21688f1c34b1716f6ab8757d0e13a40c9479c"
        ],
        [
            "red in |- *.",
            "VernacExtend",
            "95a3fb9e13ce19fdc8e335912fb83e57a9512b14"
        ],
        [
            "unfold subtype_image_equal in |- *; unfold app_rel in |- *; simpl in |- *; auto with algebra.",
            "VernacExtend",
            "84b168ceb4b974beca2e7b7d6a515ecf9400eaad"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Definition subtype_image_set : Setoid := Build_Setoid subtype_image_equiv.",
            "VernacDefinition",
            "9b91810ee68d4b7656402fd746bf8c76bd0195e6"
        ],
        [
            "End Subtype.",
            "VernacEndSegment",
            "fb35f6f0535c170a73b08fe7f458c22475e677fa"
        ],
        [
            "Section Part_type.",
            "VernacBeginSection",
            "ac47bf82baa17657aa4a28ee82cdc4bfda5ff828"
        ],
        [
            "Comments \"We define now a general structure for this kind of subset:\".",
            "VernacComments",
            "9071f53945afac5e762e33f8b657d3cd9702a76d"
        ],
        [
            "Variable E : Setoid.",
            "VernacAssumption",
            "cafb1870f48a7785473ed62f8eb64582fbbe308d"
        ],
        [
            "Record subtype_image : Type := {subtype_image_carrier : Type; subtype_image_inj :> subtype_image_carrier -> E}.",
            "VernacInductive",
            "ea6ce2087a6913cead306f57cf5d3a66f4559939"
        ],
        [
            "Definition set_of_subtype_image (S : subtype_image) := subtype_image_set (subtype_image_inj (s:=S)).",
            "VernacDefinition",
            "b46d98f35afe4fa2d93155590daff945f19ddb87"
        ],
        [
            "Comments \"Parts of\" E \"will be nothing more than predicates on\" E \" which are compatible with equality:\".",
            "VernacComments",
            "8903507f3f09bb09a53a2e7b6fa9ecdda99f5488"
        ],
        [
            "Definition pred_compatible (P : E -> Prop) : Prop := forall x y : E, P x -> Equal y x -> (P y:Prop).",
            "VernacDefinition",
            "7310022b8cac08900a8763d8f63f8882e646eedc"
        ],
        [
            "Record Predicate : Type := {Pred_fun : E -> Prop; Pred_compatible_prf : pred_compatible Pred_fun:Prop}.",
            "VernacInductive",
            "c4c54924eebb39f75654874c58e4c8ba518b0243"
        ],
        [
            "Variable P : Predicate.",
            "VernacAssumption",
            "35f06e733d6a1db7d0a2d088687d75926a763bca"
        ],
        [
            "Comments \"The type of elements of the subset defined by\" P \"is the following:\".",
            "VernacComments",
            "a38879bb94148b835a41874edcb1900b6a75732d"
        ],
        [
            "Record subtype : Type := {subtype_elt : E; subtype_prf : Pred_fun P subtype_elt:Prop}.",
            "VernacInductive",
            "a272dabc0cd39ae81b955c107e5cb6d7c43e5e13"
        ],
        [
            "Comments \"Then elements of subsets are composed of an element of\" E \"and a proof that they verify the predicate\" \"given by\" P.",
            "VernacComments",
            "a7bc4f89da01cfded4d1bbf701daf6c59f50b686"
        ],
        [
            "Comments \"We can now define the subset of\" E \"defined by the predicate\" P \":\".",
            "VernacComments",
            "1990b65b43e2ad937652f15ed270226da7f45647"
        ],
        [
            "Definition part := Build_subtype_image (subtype_image_carrier:=subtype) subtype_elt.",
            "VernacDefinition",
            "9675671bc3fe3a7ff5ce6f924eb2e419a3c47c32"
        ],
        [
            "End Part_type.",
            "VernacEndSegment",
            "b623d5a65bd21e212aa44fa96ffd4d201087958b"
        ],
        [
            "Comments \"We can see a subset as a set with these coercions:\".",
            "VernacComments",
            "66dfcb9f9e96e80d8a7f061ec8b980d00b43174c"
        ],
        [
            "Coercion set_of_subtype_image : subtype_image >-> Setoid.",
            "VernacCoercion",
            "0ea72770422f774f793fbf0c090aa39491e97a79"
        ],
        [
            "Coercion part : Predicate >-> subtype_image.",
            "VernacCoercion",
            "30c5981916528f8c2f7bc1b89593a0de79d39980"
        ],
        [
            "Comments \"We define\" (in_part x A) \"for elements of\" E \":\".",
            "VernacComments",
            "89cf52ede160511598a1ba90836486f89888df98"
        ],
        [
            "Definition in_part (E : Setoid) (x : E) (A : Predicate E) := Pred_fun A x.",
            "VernacDefinition",
            "4aa6e8b38cf3040bc7eb4b06f38fe9a4df557478"
        ],
        [
            "Section Part_set.",
            "VernacBeginSection",
            "9bfccd51a29c179362466fc0ced5f6dcc352d74d"
        ],
        [
            "Variable E : Setoid.",
            "VernacAssumption",
            "cafb1870f48a7785473ed62f8eb64582fbbe308d"
        ],
        [
            "Comments \"The equality between parts of\" E \":\".",
            "VernacComments",
            "2250cd9ce3ea0aa0cd89741d11ae8ce04dd20f81"
        ],
        [
            "Definition eq_part (A B : Predicate E) : Prop := forall x : E, (in_part x A -> in_part x B) /\\ (in_part x B -> in_part x A).",
            "VernacDefinition",
            "6dfb5bc4495acaa9dcda8ac2878def2e49939b0e"
        ],
        [
            "Let eq_part_equiv : equivalence eq_part.",
            "VernacDefinition",
            "93a81e560907a551ecab10fc842304c26e3a1556"
        ],
        [
            "red in |- *.",
            "VernacExtend",
            "95a3fb9e13ce19fdc8e335912fb83e57a9512b14"
        ],
        [
            "split; [ try assumption | idtac ].",
            "VernacExtend",
            "2f3e384e84efa246ea96d2db4b31f7d148a7455c"
        ],
        [
            "red in |- *.",
            "VernacExtend",
            "95a3fb9e13ce19fdc8e335912fb83e57a9512b14"
        ],
        [
            "unfold eq_part, app_rel in |- *; simpl in |- *.",
            "VernacExtend",
            "aef99932d37195a8930d6c2da40d033cc4ad6f31"
        ],
        [
            "intuition.",
            "VernacExtend",
            "ebd9388eeb482972743f9cce5cbddbd85ca5bdfd"
        ],
        [
            "red in |- *.",
            "VernacExtend",
            "95a3fb9e13ce19fdc8e335912fb83e57a9512b14"
        ],
        [
            "split; [ try assumption | idtac ].",
            "VernacExtend",
            "2f3e384e84efa246ea96d2db4b31f7d148a7455c"
        ],
        [
            "red in |- *.",
            "VernacExtend",
            "95a3fb9e13ce19fdc8e335912fb83e57a9512b14"
        ],
        [
            "unfold eq_part, app_rel in |- *; simpl in |- *.",
            "VernacExtend",
            "aef99932d37195a8930d6c2da40d033cc4ad6f31"
        ],
        [
            "intros x y z H' H'0 x0; try assumption.",
            "VernacExtend",
            "255f65fbd5e7d695d63d511e94350f9a2bac8c91"
        ],
        [
            "elim (H'0 x0); intros H'2 H'3; try exact H'2.",
            "VernacExtend",
            "071f9730de2aadb48231a3eb2f8d74626040bd9c"
        ],
        [
            "elim (H' x0); intros H'1 H'4; try exact H'1.",
            "VernacExtend",
            "671f4cd76934b6afa3b24318a4b1540533d78d04"
        ],
        [
            "intuition.",
            "VernacExtend",
            "ebd9388eeb482972743f9cce5cbddbd85ca5bdfd"
        ],
        [
            "red in |- *.",
            "VernacExtend",
            "95a3fb9e13ce19fdc8e335912fb83e57a9512b14"
        ],
        [
            "unfold eq_part, app_rel in |- *; simpl in |- *.",
            "VernacExtend",
            "aef99932d37195a8930d6c2da40d033cc4ad6f31"
        ],
        [
            "intros x y H' x0; try assumption.",
            "VernacExtend",
            "fa098b23a701bd5fd65bf9ea9329053e49bba1f0"
        ],
        [
            "elim (H' x0); intros H'2 H'3; try exact H'2.",
            "VernacExtend",
            "9ada38e817dda679a879042b3012b30bd7e12a7f"
        ],
        [
            "intuition.",
            "VernacExtend",
            "ebd9388eeb482972743f9cce5cbddbd85ca5bdfd"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Comments \"We define the set\" (part_set E) \"of all parts of\" E \", with its equality:\".",
            "VernacComments",
            "1c0c7675aed8a892e95781016db610dea2922928"
        ],
        [
            "Definition part_set : Setoid := Build_Setoid eq_part_equiv.",
            "VernacDefinition",
            "ed258581c65a7cae2d1085a9e00e4fea045c7469"
        ],
        [
            "Comments \"The empty part\" (empty E) \":\".",
            "VernacComments",
            "5d8975d43bfa4222ded9b3939e7079f81fff8f5a"
        ],
        [
            "Hint Unfold pred_compatible: algebra.",
            "VernacHints",
            "7ac513be72a71a288f284c6ce918c3cf3640cab4"
        ],
        [
            "Definition empty : part_set.",
            "VernacDefinition",
            "4725b23860733b59a2c8e82d8ee1080407d97e55"
        ],
        [
            "apply (Build_Predicate (E:=E) (Pred_fun:=fun x : E => False)).",
            "VernacExtend",
            "a55e1164864e70e68cb06c381fdeb240dfca09ca"
        ],
        [
            "auto with algebra.",
            "VernacExtend",
            "2a8b2ac72ff20b5f342f7b76f72f9b539e5a10f0"
        ],
        [
            "Defined.",
            "VernacEndProof",
            "88c0be54a50df4bb90276c075406fe442428eb9c"
        ],
        [
            "Comments \"And the full part:\".",
            "VernacComments",
            "48411d7e55980012405ae98766548e147be22e72"
        ],
        [
            "Definition full : part_set.",
            "VernacDefinition",
            "5527a4e6e39fd30234010aba28f940ec2639940a"
        ],
        [
            "apply (Build_Predicate (E:=E) (Pred_fun:=fun x : E => True)).",
            "VernacExtend",
            "e3dbe471f54134941edd92195e4e7ede3b0b6901"
        ],
        [
            "auto with algebra.",
            "VernacExtend",
            "2a8b2ac72ff20b5f342f7b76f72f9b539e5a10f0"
        ],
        [
            "Defined.",
            "VernacEndProof",
            "88c0be54a50df4bb90276c075406fe442428eb9c"
        ],
        [
            "End Part_set.",
            "VernacEndSegment",
            "e73c6350fa68ce30c9c746197da126130239fa57"
        ],
        [
            "Hint Unfold pred_compatible: algebra.",
            "VernacHints",
            "7ac513be72a71a288f284c6ce918c3cf3640cab4"
        ],
        [
            "Section Inclusion.",
            "VernacBeginSection",
            "896a837cdf36991933f8486e8960e3193cf4f1ed"
        ],
        [
            "Variable E : Setoid.",
            "VernacAssumption",
            "cafb1870f48a7785473ed62f8eb64582fbbe308d"
        ],
        [
            "Comments \"The relation of belonging is compatible with equality:\".",
            "VernacComments",
            "2c80aa133594b1383c773cdad89f54dd6efaf75e"
        ],
        [
            "Lemma in_part_comp_l : forall (A : part_set E) (x y : E), in_part x A -> Equal y x -> in_part y A.",
            "VernacStartTheoremProof",
            "cf729ccb7a329adeb89ccfd9f2170148b7e3f3e4"
        ],
        [
            "intros A; try assumption.",
            "VernacExtend",
            "bee08795c86464c42c0359ec8226a130c5f630d4"
        ],
        [
            "exact (Pred_compatible_prf (E:=E) (p:=A)).",
            "VernacExtend",
            "e04fefe610cd2c219a3c87855db92ac02c30a383"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma in_part_comp_r : forall (x : E) (A B : part_set E), in_part x A -> Equal A B -> in_part x B.",
            "VernacStartTheoremProof",
            "f6645e4f36064d3e175d5240fda51bd526dcad4e"
        ],
        [
            "simpl in |- *; unfold eq_part in |- *.",
            "VernacExtend",
            "757c199dafabd99b525b5a736ccf8a90b117f8c7"
        ],
        [
            "intros x A B H' H'0; try assumption.",
            "VernacExtend",
            "8cdfbd3fcf7811837a913e7bd35644400301844b"
        ],
        [
            "elim (H'0 x).",
            "VernacExtend",
            "491d5c83fbfc1a92afd25bcb6c4deee7f1216740"
        ],
        [
            "intuition.",
            "VernacExtend",
            "ebd9388eeb482972743f9cce5cbddbd85ca5bdfd"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma empty_prop : forall x : E, ~ in_part x (empty E).",
            "VernacStartTheoremProof",
            "be2e2d732e6d54acf0d7075d2d4ef31fbeb04295"
        ],
        [
            "unfold not in |- *; auto with algebra.",
            "VernacExtend",
            "0e3bd058030c1bd1f4901f2dbf583bb28d594e92"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Hint Resolve empty_prop: algebra.",
            "VernacHints",
            "6ce813020599039160314dd9573260f9f1789c4d"
        ],
        [
            "Lemma full_prop : forall x : E, in_part x (full E).",
            "VernacStartTheoremProof",
            "022f835680263e05e578a490b5418d4c5f2f9b5f"
        ],
        [
            "unfold full in |- *; simpl in |- *; auto with algebra.",
            "VernacExtend",
            "f0abf088749117a496cae06efda9547afb6bbdfc"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Hint Resolve full_prop: algebra.",
            "VernacHints",
            "ae41864f73c4952b17046d869954637bd6816dc0"
        ],
        [
            "Definition full_to_set : MAP (full E) E.",
            "VernacDefinition",
            "82dff75a6acfe88c441e4f40c06135a27fe27477"
        ],
        [
            "apply (Build_Map (Ap:=fun x : full E => full E x)).",
            "VernacExtend",
            "eec1d9b297ff036629584e32a871d149f17d0d8a"
        ],
        [
            "red in |- *.",
            "VernacExtend",
            "95a3fb9e13ce19fdc8e335912fb83e57a9512b14"
        ],
        [
            "intros x y; try assumption.",
            "VernacExtend",
            "1ff52bbc0dce5b374ba3d7f58f1771e70e9228ff"
        ],
        [
            "elim x.",
            "VernacExtend",
            "4dae947360dc7d88bee6f5459fc6c026a56c9298"
        ],
        [
            "elim y.",
            "VernacExtend",
            "2e1340b20b979eff9f29f6f7a068bc217b31672c"
        ],
        [
            "simpl in |- *.",
            "VernacExtend",
            "1b93169f4cf876d207c1fab22a2347202ab48d85"
        ],
        [
            "unfold subtype_image_equal in |- *.",
            "VernacExtend",
            "204d58c15e16840a85d42d6a5c22d86194cbc8f3"
        ],
        [
            "simpl in |- *; auto with algebra.",
            "VernacExtend",
            "d6b9b4fa1f9e16b197ca7f795deb2bc736dbeac5"
        ],
        [
            "Defined.",
            "VernacEndProof",
            "88c0be54a50df4bb90276c075406fe442428eb9c"
        ],
        [
            "Definition set_to_full : MAP E (full E).",
            "VernacDefinition",
            "ca566d87afcb51f18691404fcbd289790da76e03"
        ],
        [
            "apply (Build_Map (A:=E) (B:=full E) (Ap:=fun x : E => Build_subtype (E:=E) (P:=full E) (subtype_elt:=x) (full_prop x))).",
            "VernacExtend",
            "f106cc6b425d4af0060bbb677ae950437521cc6d"
        ],
        [
            "red in |- *.",
            "VernacExtend",
            "95a3fb9e13ce19fdc8e335912fb83e57a9512b14"
        ],
        [
            "simpl in |- *; auto with algebra.",
            "VernacExtend",
            "d6b9b4fa1f9e16b197ca7f795deb2bc736dbeac5"
        ],
        [
            "Defined.",
            "VernacEndProof",
            "88c0be54a50df4bb90276c075406fe442428eb9c"
        ],
        [
            "Lemma set_full_set : Equal (comp_map_map full_to_set set_to_full) (Id E).",
            "VernacStartTheoremProof",
            "2e10f64fd16ede90094d3f7075d9224b8d5eddc5"
        ],
        [
            "simpl in |- *; auto with algebra.",
            "VernacExtend",
            "d6b9b4fa1f9e16b197ca7f795deb2bc736dbeac5"
        ],
        [
            "red in |- *.",
            "VernacExtend",
            "95a3fb9e13ce19fdc8e335912fb83e57a9512b14"
        ],
        [
            "simpl in |- *; auto with algebra.",
            "VernacExtend",
            "d6b9b4fa1f9e16b197ca7f795deb2bc736dbeac5"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma full_set_full : Equal (comp_map_map set_to_full full_to_set) (Id (full E)).",
            "VernacStartTheoremProof",
            "57b3f4c9f36255e7b7a629c37c042927b4cd4fb5"
        ],
        [
            "simpl in |- *; auto with algebra.",
            "VernacExtend",
            "d6b9b4fa1f9e16b197ca7f795deb2bc736dbeac5"
        ],
        [
            "red in |- *.",
            "VernacExtend",
            "95a3fb9e13ce19fdc8e335912fb83e57a9512b14"
        ],
        [
            "simpl in |- *; auto with algebra.",
            "VernacExtend",
            "d6b9b4fa1f9e16b197ca7f795deb2bc736dbeac5"
        ],
        [
            "intros x; try assumption.",
            "VernacExtend",
            "c1d134cd0380c89f2221310d121a4057e0c22b21"
        ],
        [
            "elim x.",
            "VernacExtend",
            "4dae947360dc7d88bee6f5459fc6c026a56c9298"
        ],
        [
            "simpl in |- *; auto with algebra.",
            "VernacExtend",
            "d6b9b4fa1f9e16b197ca7f795deb2bc736dbeac5"
        ],
        [
            "intros subtype_elt' subtype_prf'; red in |- *.",
            "VernacExtend",
            "d6f2fdda47df13fb996c451c601f603d3b5e6e9b"
        ],
        [
            "simpl in |- *; auto with algebra.",
            "VernacExtend",
            "d6b9b4fa1f9e16b197ca7f795deb2bc736dbeac5"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Comments \"The inclusion of parts:\".",
            "VernacComments",
            "24ec27f55f8187be142a933249d3f1628bacf3c2"
        ],
        [
            "Definition included (A B : part_set E) : Prop := forall x : E, in_part x A -> in_part x B.",
            "VernacDefinition",
            "d91e55bb9594b35879dfba8b843531e775051ca4"
        ],
        [
            "Comments \"The relation of inclusion is an order relation:\".",
            "VernacComments",
            "a3d22a000380063e6348d493d2fa07c73c4daadc"
        ],
        [
            "Lemma included_refl : forall A : part_set E, included A A.",
            "VernacStartTheoremProof",
            "38dc984e28e762fcf26d77aba949cbe5a3423147"
        ],
        [
            "simpl in |- *; unfold included in |- *; auto with algebra.",
            "VernacExtend",
            "f142ad3ebb2a72a8764de582ea57237effbe9cd6"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Hint Resolve included_refl: algebra.",
            "VernacHints",
            "a962ded1253453be46caca0c2c222ebd55542ec4"
        ],
        [
            "Lemma included_antisym : forall A B : part_set E, included A B -> included B A -> Equal A B.",
            "VernacStartTheoremProof",
            "7d38df357941c581f07cc5ff5a4d061f5ca9cc6f"
        ],
        [
            "simpl in |- *; unfold eq_part, included in |- *; auto with algebra.",
            "VernacExtend",
            "14a5a6d11c1b29e5deb22b731e7b340b0c4054e2"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma included_trans : forall A B C : part_set E, included A B -> included B C -> included A C.",
            "VernacStartTheoremProof",
            "04e109310b325893c2e73a55cd98b481e1118541"
        ],
        [
            "simpl in |- *; unfold included in |- *; auto with algebra.",
            "VernacExtend",
            "f142ad3ebb2a72a8764de582ea57237effbe9cd6"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Comments \"The inclusion relation is compatible with equality:\".",
            "VernacComments",
            "7e94260d01bb16ed2ca822a3d92cdbb6704e5607"
        ],
        [
            "Lemma included_comp : forall A A' B B' : part_set E, Equal A A' -> Equal B B' -> included A B -> included A' B'.",
            "VernacStartTheoremProof",
            "eba96ea5d781c4451fda5eb8bfcbbf595485a80c"
        ],
        [
            "simpl in |- *; unfold eq_part, included in |- *.",
            "VernacExtend",
            "cd1b98752cf8ed06ae2356c8958b99b4bbf5dd90"
        ],
        [
            "intros A A' B B' H' H'0 H'1 x H'2; try assumption.",
            "VernacExtend",
            "7298a04bf52d37bbed4e603ef0485e21cb421072"
        ],
        [
            "elim (H'0 x); intros H'4 H'5; apply H'4.",
            "VernacExtend",
            "1fb02eda83d28c299254a80e125fe56633d90594"
        ],
        [
            "lapply (H'1 x); [ intros H'6; apply H'6 | idtac ].",
            "VernacExtend",
            "fa3cf5ffbb0a58b96f8b1aed7ce963534466494b"
        ],
        [
            "elim (H' x); intros H'6 H'7; apply H'7; auto with algebra.",
            "VernacExtend",
            "3b63b8ef12d87a4057b28ceb326b4afec95468be"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma eq_part_included : forall A B : part_set E, Equal A B -> included A B.",
            "VernacStartTheoremProof",
            "9e99edef98f1e1cfae9857bc47cdab5bd3d8efe7"
        ],
        [
            "simpl in |- *; unfold eq_part, included in |- *.",
            "VernacExtend",
            "cd1b98752cf8ed06ae2356c8958b99b4bbf5dd90"
        ],
        [
            "intros A B H' x H'0; try assumption.",
            "VernacExtend",
            "507cc26817fe48a364819ed54556efefaf5d670a"
        ],
        [
            "specialize H' with (x := x); rename H' into H'1; try exact H'1.",
            "VernacExtend",
            "7887455bb6ddf8de5b49c89db59f1bf4f616ff9e"
        ],
        [
            "elim H'1; intros H'2 H'3; try exact H'2; clear H'1; auto with algebra.",
            "VernacExtend",
            "fc9813218b8ca7b5c4b0a316b59aa8d70aaf45dc"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Hint Resolve eq_part_included: algebra.",
            "VernacHints",
            "e1d745d4ae78debf1d8a6bf8b5d1d8086ca33ef1"
        ],
        [
            "Lemma empty_included : forall A : part_set E, included (empty E) A.",
            "VernacStartTheoremProof",
            "db726ccfe574ab0e8222ee1b7cfce396f4bca6b2"
        ],
        [
            "simpl in |- *; unfold included in |- *; auto with algebra.",
            "VernacExtend",
            "f142ad3ebb2a72a8764de582ea57237effbe9cd6"
        ],
        [
            "intros A x H'; try assumption.",
            "VernacExtend",
            "7f7984dcbd939f98b5a9ac07676455be7a194352"
        ],
        [
            "absurd (in_part x (empty E)); auto with algebra.",
            "VernacExtend",
            "b6f5537fb48f10bc332696c9641eea3088e58918"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma full_included : forall A : part_set E, included A (full E).",
            "VernacStartTheoremProof",
            "29e4800d0c7350d4b424faaf383c9da5fcd7a6bb"
        ],
        [
            "simpl in |- *; unfold included in |- *; auto with algebra.",
            "VernacExtend",
            "f142ad3ebb2a72a8764de582ea57237effbe9cd6"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Hint Resolve empty_included full_included: algebra.",
            "VernacHints",
            "df049f7499139a5d1ae3d330396619fbc90fa134"
        ],
        [
            "Definition inj_part : forall A : part_set E, MAP A E.",
            "VernacDefinition",
            "197fcce37fb64aef11f526e66d3da595c34b68dc"
        ],
        [
            "intros A; try assumption.",
            "VernacExtend",
            "bee08795c86464c42c0359ec8226a130c5f630d4"
        ],
        [
            "apply (Build_Map (Ap:=fun x : A => subtype_elt x)).",
            "VernacExtend",
            "70c05aecdda2483c7a2110c5aa4bf4662fc7d791"
        ],
        [
            "red in |- *.",
            "VernacExtend",
            "95a3fb9e13ce19fdc8e335912fb83e57a9512b14"
        ],
        [
            "auto with algebra.",
            "VernacExtend",
            "2a8b2ac72ff20b5f342f7b76f72f9b539e5a10f0"
        ],
        [
            "Defined.",
            "VernacEndProof",
            "88c0be54a50df4bb90276c075406fe442428eb9c"
        ],
        [
            "Lemma inj_part_injective : forall A : part_set E, injective (inj_part A).",
            "VernacStartTheoremProof",
            "450f2de86b0312660dc5ef8537496f467b6bb604"
        ],
        [
            "intros A; try assumption.",
            "VernacExtend",
            "bee08795c86464c42c0359ec8226a130c5f630d4"
        ],
        [
            "red in |- *.",
            "VernacExtend",
            "95a3fb9e13ce19fdc8e335912fb83e57a9512b14"
        ],
        [
            "auto with algebra.",
            "VernacExtend",
            "2a8b2ac72ff20b5f342f7b76f72f9b539e5a10f0"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Definition inj_part_included : forall A B : part_set E, included A B -> MAP A B.",
            "VernacDefinition",
            "9fb3409e13088fa0f14419d366e0166ca4d1ddd9"
        ],
        [
            "intros A B H'; try assumption.",
            "VernacExtend",
            "b0d24c04ee6ba3793e97e5957c9079ce89ebcf6b"
        ],
        [
            "red in H'.",
            "VernacExtend",
            "b3f39ff59e03e63f7335587cdc4b70d75813b637"
        ],
        [
            "apply (Build_Map (A:=A) (B:=B) (Ap:=fun x : A => Build_subtype (H' (A x) (subtype_prf (E:=E) (P:=A) x)))).",
            "VernacExtend",
            "926b166873f38c8c08dba1b365306cd1462688e2"
        ],
        [
            "red in |- *.",
            "VernacExtend",
            "95a3fb9e13ce19fdc8e335912fb83e57a9512b14"
        ],
        [
            "simpl in |- *; auto with algebra.",
            "VernacExtend",
            "d6b9b4fa1f9e16b197ca7f795deb2bc736dbeac5"
        ],
        [
            "Defined.",
            "VernacEndProof",
            "88c0be54a50df4bb90276c075406fe442428eb9c"
        ],
        [
            "Lemma inj_part_included_prop : forall (A B : part_set E) (p : included A B) (x : A), Equal (B (inj_part_included p x)) (A x).",
            "VernacStartTheoremProof",
            "918107a4f8ecbe43124293d4f452e7b90dde1135"
        ],
        [
            "simpl in |- *; auto with algebra.",
            "VernacExtend",
            "d6b9b4fa1f9e16b197ca7f795deb2bc736dbeac5"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma inj_part_included_injective : forall (A B : part_set E) (p : included A B), injective (inj_part_included p).",
            "VernacStartTheoremProof",
            "f848ceaec2679b828cc4b92d8bda34a61e7f2ada"
        ],
        [
            "intros A B p; red in |- *.",
            "VernacExtend",
            "cf246346b6fad405b12797b99f972fbbe1de4515"
        ],
        [
            "intros x y; try assumption.",
            "VernacExtend",
            "1ff52bbc0dce5b374ba3d7f58f1771e70e9228ff"
        ],
        [
            "elim x.",
            "VernacExtend",
            "4dae947360dc7d88bee6f5459fc6c026a56c9298"
        ],
        [
            "elim y.",
            "VernacExtend",
            "2e1340b20b979eff9f29f6f7a068bc217b31672c"
        ],
        [
            "simpl in |- *; auto with algebra.",
            "VernacExtend",
            "d6b9b4fa1f9e16b197ca7f795deb2bc736dbeac5"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Definition id_map_parts_equal : forall A B : part_set E, Equal A B -> MAP A B.",
            "VernacDefinition",
            "8549bad5176b1f9c0a602a89615a90277fce9882"
        ],
        [
            "intros A B H'; try assumption.",
            "VernacExtend",
            "b0d24c04ee6ba3793e97e5957c9079ce89ebcf6b"
        ],
        [
            "exact (inj_part_included (eq_part_included H')).",
            "VernacExtend",
            "c491462aa31617ee23796a16ae30ba19f5e370d2"
        ],
        [
            "Defined.",
            "VernacEndProof",
            "88c0be54a50df4bb90276c075406fe442428eb9c"
        ],
        [
            "Lemma id_map_parts_equal_prop : forall (A B : part_set E) (p : Equal A B) (x : A), Equal (subtype_elt (id_map_parts_equal p x)) (subtype_elt x).",
            "VernacStartTheoremProof",
            "d3176e72a6fc653795bd456810d7b18e3a2103cf"
        ],
        [
            "simpl in |- *; auto with algebra.",
            "VernacExtend",
            "d6b9b4fa1f9e16b197ca7f795deb2bc736dbeac5"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "End Inclusion.",
            "VernacEndSegment",
            "3a0d20ce385637e3d56de85a0dcf791d0da9ece4"
        ],
        [
            "Section Union_of_part.",
            "VernacBeginSection",
            "62a3b4de49116c6e945bcfcbc6ac5c83ec56ffd2"
        ],
        [
            "Variable E : Setoid.",
            "VernacAssumption",
            "cafb1870f48a7785473ed62f8eb64582fbbe308d"
        ],
        [
            "Comments \"We define the union of a part of\" (part_set E).",
            "VernacComments",
            "de07f96524c5dead8583011a8944bc0163a8bdf7"
        ],
        [
            "Variable P : part_set (part_set E).",
            "VernacAssumption",
            "e787763189b9bae87aab633df27a725ae39fbdcd"
        ],
        [
            "Definition union_part : part_set E.",
            "VernacDefinition",
            "6fb91afb8a5642ff5ebe9e55f0b4edfabc849191"
        ],
        [
            "apply (Build_Predicate (Pred_fun:=fun x : E => exists A : part_set E, in_part A P /\\ in_part x A)).",
            "VernacExtend",
            "53b5f79163ca855932a2b90e7b43a0d0780d0297"
        ],
        [
            "red in |- *.",
            "VernacExtend",
            "95a3fb9e13ce19fdc8e335912fb83e57a9512b14"
        ],
        [
            "intros x y H' H'0; try assumption.",
            "VernacExtend",
            "80824be427f661dd57d0ea65f59a8a8dc948972f"
        ],
        [
            "elim H'; intros A E0; elim E0; clear H'.",
            "VernacExtend",
            "9c93573397ce212bcab131e5b800a9acbbd1faee"
        ],
        [
            "intros H' H'1; try assumption.",
            "VernacExtend",
            "b047bc19a3f663d7346bb3daee5a110a78ff497e"
        ],
        [
            "exists A; split; [ try assumption | idtac ].",
            "VernacExtend",
            "ea2932662a834db92b63da2e57800a3a8536aebd"
        ],
        [
            "apply in_part_comp_l with x; auto with algebra.",
            "VernacExtend",
            "137022ad238291278e127a594be9aef89f00c13e"
        ],
        [
            "Defined.",
            "VernacEndProof",
            "88c0be54a50df4bb90276c075406fe442428eb9c"
        ],
        [
            "Lemma union_part_prop : forall x : E, in_part x union_part -> exists A : part_set E, in_part A P /\\ in_part x A.",
            "VernacStartTheoremProof",
            "e4af35f3b5aa49a94682c1c1ed6bb631464538b2"
        ],
        [
            "intros x H'; red in H'; auto with algebra.",
            "VernacExtend",
            "9031e4b22e2eb331416c51ca91aaa0d18f7befa7"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma union_part_prop_rev : forall A : part_set E, in_part A P -> forall x : E, in_part x A -> in_part x union_part.",
            "VernacStartTheoremProof",
            "76cdea077f57ddf63b9e27474b358971f427e252"
        ],
        [
            "unfold union_part in |- *; simpl in |- *; auto with algebra.",
            "VernacExtend",
            "b3ee14abdf6680d051a54f6ba15c02e275aacad5"
        ],
        [
            "intros A H' x H'0; try assumption.",
            "VernacExtend",
            "23a0b0f13a87bcd47a4031c208cdf58a1e8acc9a"
        ],
        [
            "exists A; split; [ try assumption | idtac ].",
            "VernacExtend",
            "ea2932662a834db92b63da2e57800a3a8536aebd"
        ],
        [
            "auto with algebra.",
            "VernacExtend",
            "2a8b2ac72ff20b5f342f7b76f72f9b539e5a10f0"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma union_part_included : forall A : part_set E, in_part A P -> included A union_part.",
            "VernacStartTheoremProof",
            "bef5458c28973c6225acf2fdfffcfef11d2f4c6e"
        ],
        [
            "intros A H'; try assumption.",
            "VernacExtend",
            "720ae1f49449b60e47d9a65a03bb739117c3fea6"
        ],
        [
            "unfold included in |- *; auto with algebra.",
            "VernacExtend",
            "1e16dd66c08c67fc616d4c66aea2b9b97d2c6e18"
        ],
        [
            "intros x H'0; try assumption.",
            "VernacExtend",
            "142ba9849fedfb8416225009a0c996a95166d453"
        ],
        [
            "apply union_part_prop_rev with (A := A); auto with algebra.",
            "VernacExtend",
            "06dd6e93acecc5a833be39e69e58ada143b67d2b"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma union_part_upper_bound : forall Y : part_set E, (forall A : part_set E, in_part A P -> included A Y) -> included union_part Y.",
            "VernacStartTheoremProof",
            "687212d6d4dadb368f06f29760da76ba091e4b58"
        ],
        [
            "intros Y H'; try assumption.",
            "VernacExtend",
            "a0ed24bb5397a941637ac9036bc4f159c648a93d"
        ],
        [
            "unfold included in |- *.",
            "VernacExtend",
            "49d47da082bc436033ab68582d7a85f3cb0b6b75"
        ],
        [
            "intros x H'0; try assumption.",
            "VernacExtend",
            "142ba9849fedfb8416225009a0c996a95166d453"
        ],
        [
            "case (union_part_prop H'0).",
            "VernacExtend",
            "0248ffecb5ae8793d9361963fbdc07ea836d9869"
        ],
        [
            "intros A H'1; try assumption.",
            "VernacExtend",
            "a7b5720e6139076c3247bdea15a06d05b6c8d48d"
        ],
        [
            "elim H'1.",
            "VernacExtend",
            "adde82f993f35778617a2db796b0637a05aa745b"
        ],
        [
            "intros H'2 H'3; try assumption.",
            "VernacExtend",
            "adbe0b61f42a2a296426b3cdb037e35e4912d301"
        ],
        [
            "unfold included in H'.",
            "VernacExtend",
            "84717ddbdcce8779e657fee512272677fae906cf"
        ],
        [
            "apply H' with (A := A); auto with algebra.",
            "VernacExtend",
            "3226c99d23e801164db43d5f8795a87fac5dfa82"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "End Union_of_part.",
            "VernacEndSegment",
            "31bc13a2eaa252608077dcd0ee1c5dd6331d7fc7"
        ],
        [
            "Section Part_set_greater.",
            "VernacBeginSection",
            "53bc0b9ea23dba0c4a7ab7acbf65604102f9b821"
        ],
        [
            "Comments \"A nice theorem:\".",
            "VernacComments",
            "f8fa2482b9d137fde94508f5b0115f3e5ba327db"
        ],
        [
            "Variable E : Setoid.",
            "VernacAssumption",
            "cafb1870f48a7785473ed62f8eb64582fbbe308d"
        ],
        [
            "Variable f : MAP E (part_set E).",
            "VernacAssumption",
            "919b40b566093b296ed42372f432b3d31fec8194"
        ],
        [
            "Hypothesis fsurj : surjective f.",
            "VernacAssumption",
            "435a086138d07862c51d150cc3b5fb5d171c9164"
        ],
        [
            "Let X_def (x : E) : Prop := ~ in_part x (f x).",
            "VernacDefinition",
            "2ab15d61bf392f9ad1fb3d79435c444124a2918f"
        ],
        [
            "Let X : part_set E.",
            "VernacDefinition",
            "acc8b021f842f800d45e3c3a42b3684de50470b9"
        ],
        [
            "apply (Build_Predicate (E:=E) (Pred_fun:=X_def)).",
            "VernacExtend",
            "07b3b385e9cb8df6f14f65c6b24ea5cf0d54b38c"
        ],
        [
            "unfold X_def in |- *.",
            "VernacExtend",
            "2442711af004918b26ce833bb953ba340d4dbacb"
        ],
        [
            "red in |- *.",
            "VernacExtend",
            "95a3fb9e13ce19fdc8e335912fb83e57a9512b14"
        ],
        [
            "unfold not in |- *.",
            "VernacExtend",
            "6c337369ba68753b2202c88d3c56bf02e1807b95"
        ],
        [
            "intros x y H' H'0 H'1; try assumption.",
            "VernacExtend",
            "d7603f9ac46fad9c0d2a5f3fc2d2f16aa3a30694"
        ],
        [
            "apply H'.",
            "VernacExtend",
            "b9f7b1afd5784d2a6d1eac6189a3bdc5f0119ad0"
        ],
        [
            "apply in_part_comp_l with y; auto with algebra.",
            "VernacExtend",
            "a96ecfe6d4f87e02909cce250c1293c1a4089f55"
        ],
        [
            "apply in_part_comp_r with (Ap f y); auto with algebra.",
            "VernacExtend",
            "b1e049f6f1fbd79f69f16a83c2b210386bdfea32"
        ],
        [
            "Defined.",
            "VernacEndProof",
            "88c0be54a50df4bb90276c075406fe442428eb9c"
        ],
        [
            "Let invX : exists x : E, Equal X (f x).",
            "VernacDefinition",
            "f9eec569dd598047b0669947b72c118e0b734a07"
        ],
        [
            "exact (fsurj X).",
            "VernacExtend",
            "029e69c9071b31f33bead392d85d8732f14daef0"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma not_inpart_comp_r : forall (E : Setoid) (x : E) (A B : part_set E), ~ in_part x A -> Equal A B -> ~ in_part x B.",
            "VernacStartTheoremProof",
            "7609cb6ba817fad7ee1594a5512a87b735d7dc0f"
        ],
        [
            "unfold not in |- *.",
            "VernacExtend",
            "6c337369ba68753b2202c88d3c56bf02e1807b95"
        ],
        [
            "intros E0 x A B H' H'0 H'1; try assumption.",
            "VernacExtend",
            "f95f1034c76e90c85aa6736eeae3df34c640c09c"
        ],
        [
            "apply H'.",
            "VernacExtend",
            "b9f7b1afd5784d2a6d1eac6189a3bdc5f0119ad0"
        ],
        [
            "apply in_part_comp_r with B; auto with algebra.",
            "VernacExtend",
            "f5dc8497ce4a8d0c37336cc5ccdb0fb1d1df6288"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Theorem part_set_is_strictly_greater_than_set1 : False.",
            "VernacStartTheoremProof",
            "5f97ca219be6dc49a497933f327ee886fe96324b"
        ],
        [
            "case invX.",
            "VernacExtend",
            "51770e8597309ef442964fd5efd33b424daaf7da"
        ],
        [
            "intros x H'; try assumption.",
            "VernacExtend",
            "58e256260d8e1308b78670caf8fd802cbcefd3be"
        ],
        [
            "cut (~ in_part x X).",
            "VernacExtend",
            "2a4faaba562887e9e24d1297c9c0d3eab0d13ac4"
        ],
        [
            "intros H'0; try assumption.",
            "VernacExtend",
            "4cdfb5ff555980b7fe10aad1aff23df9d3ecf363"
        ],
        [
            "absurd (in_part x X); auto with algebra.",
            "VernacExtend",
            "bd4276c8cf91b4de3e35488b04273445072440fe"
        ],
        [
            "simpl in |- *.",
            "VernacExtend",
            "1b93169f4cf876d207c1fab22a2347202ab48d85"
        ],
        [
            "unfold X_def in |- *.",
            "VernacExtend",
            "2442711af004918b26ce833bb953ba340d4dbacb"
        ],
        [
            "apply not_inpart_comp_r with X; auto with algebra.",
            "VernacExtend",
            "e447ff77a2ac089361e9b9d5364ebc19c144f593"
        ],
        [
            "unfold not in |- *.",
            "VernacExtend",
            "6c337369ba68753b2202c88d3c56bf02e1807b95"
        ],
        [
            "intros H'0; try assumption.",
            "VernacExtend",
            "4cdfb5ff555980b7fe10aad1aff23df9d3ecf363"
        ],
        [
            "absurd (in_part x X); auto with algebra.",
            "VernacExtend",
            "bd4276c8cf91b4de3e35488b04273445072440fe"
        ],
        [
            "apply not_inpart_comp_r with (Ap f x); auto with algebra.",
            "VernacExtend",
            "af62aa1f1df852e41db9890ab85bc62a2e865da2"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "End Part_set_greater.",
            "VernacEndSegment",
            "c8b3af1be9619301ea92d5073d7dd5ffbed59413"
        ],
        [
            "Theorem part_set_is_strictly_greater_than_set : forall (E : Setoid) (f : MAP E (part_set E)), ~ surjective f.",
            "VernacStartTheoremProof",
            "8c291dacc6387c6858313e047eba0003c3ffb315"
        ],
        [
            "exact part_set_is_strictly_greater_than_set1.",
            "VernacExtend",
            "e574f97a35809c8f874c46e97a74b6ecbde28799"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Hint Unfold pred_compatible: algebra.",
            "VernacHints",
            "7ac513be72a71a288f284c6ce918c3cf3640cab4"
        ],
        [
            "Hint Resolve empty_prop full_prop included_refl eq_part_included empty_included full_included inj_part_injective inj_part_included_injective id_map_parts_equal_prop union_part_included union_part_upper_bound not_inpart_comp_r: algebra.",
            "VernacHints",
            "5a271b2958c4ded3d243e02148ac62ec085cc98e"
        ]
    ],
    "proofs": [
        {
            "name": "subtype_image_equiv",
            "line_nb": 14,
            "steps": [
                {
                    "command": [
                        "red in |- *.",
                        "VernacExtend",
                        "95a3fb9e13ce19fdc8e335912fb83e57a9512b14"
                    ]
                },
                {
                    "command": [
                        "split; [ try assumption | idtac ].",
                        "VernacExtend",
                        "2f3e384e84efa246ea96d2db4b31f7d148a7455c"
                    ]
                },
                {
                    "command": [
                        "red in |- *.",
                        "VernacExtend",
                        "95a3fb9e13ce19fdc8e335912fb83e57a9512b14"
                    ]
                },
                {
                    "command": [
                        "unfold subtype_image_equal in |- *; unfold app_rel in |- *; simpl in |- *; auto with algebra.",
                        "VernacExtend",
                        "84b168ceb4b974beca2e7b7d6a515ecf9400eaad"
                    ]
                },
                {
                    "command": [
                        "red in |- *.",
                        "VernacExtend",
                        "95a3fb9e13ce19fdc8e335912fb83e57a9512b14"
                    ]
                },
                {
                    "command": [
                        "split; [ try assumption | idtac ].",
                        "VernacExtend",
                        "2f3e384e84efa246ea96d2db4b31f7d148a7455c"
                    ]
                },
                {
                    "command": [
                        "red in |- *.",
                        "VernacExtend",
                        "95a3fb9e13ce19fdc8e335912fb83e57a9512b14"
                    ]
                },
                {
                    "command": [
                        "unfold subtype_image_equal in |- *; unfold app_rel in |- *; simpl in |- *; auto with algebra.",
                        "VernacExtend",
                        "84b168ceb4b974beca2e7b7d6a515ecf9400eaad"
                    ]
                },
                {
                    "command": [
                        "intros x y z H' H'0; try assumption.",
                        "VernacExtend",
                        "92486dfbaec6209765e08194fc2670eff8aef754"
                    ]
                },
                {
                    "command": [
                        "apply Trans with (i y); auto with algebra.",
                        "VernacExtend",
                        "a6b21688f1c34b1716f6ab8757d0e13a40c9479c"
                    ]
                },
                {
                    "command": [
                        "red in |- *.",
                        "VernacExtend",
                        "95a3fb9e13ce19fdc8e335912fb83e57a9512b14"
                    ]
                },
                {
                    "command": [
                        "unfold subtype_image_equal in |- *; unfold app_rel in |- *; simpl in |- *; auto with algebra.",
                        "VernacExtend",
                        "84b168ceb4b974beca2e7b7d6a515ecf9400eaad"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "eq_part_equiv",
            "line_nb": 54,
            "steps": [
                {
                    "command": [
                        "red in |- *.",
                        "VernacExtend",
                        "95a3fb9e13ce19fdc8e335912fb83e57a9512b14"
                    ]
                },
                {
                    "command": [
                        "split; [ try assumption | idtac ].",
                        "VernacExtend",
                        "2f3e384e84efa246ea96d2db4b31f7d148a7455c"
                    ]
                },
                {
                    "command": [
                        "red in |- *.",
                        "VernacExtend",
                        "95a3fb9e13ce19fdc8e335912fb83e57a9512b14"
                    ]
                },
                {
                    "command": [
                        "unfold eq_part, app_rel in |- *; simpl in |- *.",
                        "VernacExtend",
                        "aef99932d37195a8930d6c2da40d033cc4ad6f31"
                    ]
                },
                {
                    "command": [
                        "intuition.",
                        "VernacExtend",
                        "ebd9388eeb482972743f9cce5cbddbd85ca5bdfd"
                    ]
                },
                {
                    "command": [
                        "red in |- *.",
                        "VernacExtend",
                        "95a3fb9e13ce19fdc8e335912fb83e57a9512b14"
                    ]
                },
                {
                    "command": [
                        "split; [ try assumption | idtac ].",
                        "VernacExtend",
                        "2f3e384e84efa246ea96d2db4b31f7d148a7455c"
                    ]
                },
                {
                    "command": [
                        "red in |- *.",
                        "VernacExtend",
                        "95a3fb9e13ce19fdc8e335912fb83e57a9512b14"
                    ]
                },
                {
                    "command": [
                        "unfold eq_part, app_rel in |- *; simpl in |- *.",
                        "VernacExtend",
                        "aef99932d37195a8930d6c2da40d033cc4ad6f31"
                    ]
                },
                {
                    "command": [
                        "intros x y z H' H'0 x0; try assumption.",
                        "VernacExtend",
                        "255f65fbd5e7d695d63d511e94350f9a2bac8c91"
                    ]
                },
                {
                    "command": [
                        "elim (H'0 x0); intros H'2 H'3; try exact H'2.",
                        "VernacExtend",
                        "071f9730de2aadb48231a3eb2f8d74626040bd9c"
                    ]
                },
                {
                    "command": [
                        "elim (H' x0); intros H'1 H'4; try exact H'1.",
                        "VernacExtend",
                        "671f4cd76934b6afa3b24318a4b1540533d78d04"
                    ]
                },
                {
                    "command": [
                        "intuition.",
                        "VernacExtend",
                        "ebd9388eeb482972743f9cce5cbddbd85ca5bdfd"
                    ]
                },
                {
                    "command": [
                        "red in |- *.",
                        "VernacExtend",
                        "95a3fb9e13ce19fdc8e335912fb83e57a9512b14"
                    ]
                },
                {
                    "command": [
                        "unfold eq_part, app_rel in |- *; simpl in |- *.",
                        "VernacExtend",
                        "aef99932d37195a8930d6c2da40d033cc4ad6f31"
                    ]
                },
                {
                    "command": [
                        "intros x y H' x0; try assumption.",
                        "VernacExtend",
                        "fa098b23a701bd5fd65bf9ea9329053e49bba1f0"
                    ]
                },
                {
                    "command": [
                        "elim (H' x0); intros H'2 H'3; try exact H'2.",
                        "VernacExtend",
                        "9ada38e817dda679a879042b3012b30bd7e12a7f"
                    ]
                },
                {
                    "command": [
                        "intuition.",
                        "VernacExtend",
                        "ebd9388eeb482972743f9cce5cbddbd85ca5bdfd"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "empty",
            "line_nb": 78,
            "steps": [
                {
                    "command": [
                        "apply (Build_Predicate (E:=E) (Pred_fun:=fun x : E => False)).",
                        "VernacExtend",
                        "a55e1164864e70e68cb06c381fdeb240dfca09ca"
                    ]
                },
                {
                    "command": [
                        "auto with algebra.",
                        "VernacExtend",
                        "2a8b2ac72ff20b5f342f7b76f72f9b539e5a10f0"
                    ]
                },
                {
                    "command": [
                        "Defined.",
                        "VernacEndProof",
                        "88c0be54a50df4bb90276c075406fe442428eb9c"
                    ]
                }
            ]
        },
        {
            "name": "full",
            "line_nb": 83,
            "steps": [
                {
                    "command": [
                        "apply (Build_Predicate (E:=E) (Pred_fun:=fun x : E => True)).",
                        "VernacExtend",
                        "e3dbe471f54134941edd92195e4e7ede3b0b6901"
                    ]
                },
                {
                    "command": [
                        "auto with algebra.",
                        "VernacExtend",
                        "2a8b2ac72ff20b5f342f7b76f72f9b539e5a10f0"
                    ]
                },
                {
                    "command": [
                        "Defined.",
                        "VernacEndProof",
                        "88c0be54a50df4bb90276c075406fe442428eb9c"
                    ]
                }
            ]
        },
        {
            "name": "in_part_comp_l",
            "line_nb": 92,
            "steps": [
                {
                    "command": [
                        "intros A; try assumption.",
                        "VernacExtend",
                        "bee08795c86464c42c0359ec8226a130c5f630d4"
                    ]
                },
                {
                    "command": [
                        "exact (Pred_compatible_prf (E:=E) (p:=A)).",
                        "VernacExtend",
                        "e04fefe610cd2c219a3c87855db92ac02c30a383"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "in_part_comp_r",
            "line_nb": 96,
            "steps": [
                {
                    "command": [
                        "simpl in |- *; unfold eq_part in |- *.",
                        "VernacExtend",
                        "757c199dafabd99b525b5a736ccf8a90b117f8c7"
                    ]
                },
                {
                    "command": [
                        "intros x A B H' H'0; try assumption.",
                        "VernacExtend",
                        "8cdfbd3fcf7811837a913e7bd35644400301844b"
                    ]
                },
                {
                    "command": [
                        "elim (H'0 x).",
                        "VernacExtend",
                        "491d5c83fbfc1a92afd25bcb6c4deee7f1216740"
                    ]
                },
                {
                    "command": [
                        "intuition.",
                        "VernacExtend",
                        "ebd9388eeb482972743f9cce5cbddbd85ca5bdfd"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "empty_prop",
            "line_nb": 102,
            "steps": [
                {
                    "command": [
                        "unfold not in |- *; auto with algebra.",
                        "VernacExtend",
                        "0e3bd058030c1bd1f4901f2dbf583bb28d594e92"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "full_prop",
            "line_nb": 106,
            "steps": [
                {
                    "command": [
                        "unfold full in |- *; simpl in |- *; auto with algebra.",
                        "VernacExtend",
                        "f0abf088749117a496cae06efda9547afb6bbdfc"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "full_to_set",
            "line_nb": 110,
            "steps": [
                {
                    "command": [
                        "apply (Build_Map (Ap:=fun x : full E => full E x)).",
                        "VernacExtend",
                        "eec1d9b297ff036629584e32a871d149f17d0d8a"
                    ]
                },
                {
                    "command": [
                        "red in |- *.",
                        "VernacExtend",
                        "95a3fb9e13ce19fdc8e335912fb83e57a9512b14"
                    ]
                },
                {
                    "command": [
                        "intros x y; try assumption.",
                        "VernacExtend",
                        "1ff52bbc0dce5b374ba3d7f58f1771e70e9228ff"
                    ]
                },
                {
                    "command": [
                        "elim x.",
                        "VernacExtend",
                        "4dae947360dc7d88bee6f5459fc6c026a56c9298"
                    ]
                },
                {
                    "command": [
                        "elim y.",
                        "VernacExtend",
                        "2e1340b20b979eff9f29f6f7a068bc217b31672c"
                    ]
                },
                {
                    "command": [
                        "simpl in |- *.",
                        "VernacExtend",
                        "1b93169f4cf876d207c1fab22a2347202ab48d85"
                    ]
                },
                {
                    "command": [
                        "unfold subtype_image_equal in |- *.",
                        "VernacExtend",
                        "204d58c15e16840a85d42d6a5c22d86194cbc8f3"
                    ]
                },
                {
                    "command": [
                        "simpl in |- *; auto with algebra.",
                        "VernacExtend",
                        "d6b9b4fa1f9e16b197ca7f795deb2bc736dbeac5"
                    ]
                },
                {
                    "command": [
                        "Defined.",
                        "VernacEndProof",
                        "88c0be54a50df4bb90276c075406fe442428eb9c"
                    ]
                }
            ]
        },
        {
            "name": "set_to_full",
            "line_nb": 120,
            "steps": [
                {
                    "command": [
                        "apply (Build_Map (A:=E) (B:=full E) (Ap:=fun x : E => Build_subtype (E:=E) (P:=full E) (subtype_elt:=x) (full_prop x))).",
                        "VernacExtend",
                        "f106cc6b425d4af0060bbb677ae950437521cc6d"
                    ]
                },
                {
                    "command": [
                        "red in |- *.",
                        "VernacExtend",
                        "95a3fb9e13ce19fdc8e335912fb83e57a9512b14"
                    ]
                },
                {
                    "command": [
                        "simpl in |- *; auto with algebra.",
                        "VernacExtend",
                        "d6b9b4fa1f9e16b197ca7f795deb2bc736dbeac5"
                    ]
                },
                {
                    "command": [
                        "Defined.",
                        "VernacEndProof",
                        "88c0be54a50df4bb90276c075406fe442428eb9c"
                    ]
                }
            ]
        },
        {
            "name": "set_full_set",
            "line_nb": 125,
            "steps": [
                {
                    "command": [
                        "simpl in |- *; auto with algebra.",
                        "VernacExtend",
                        "d6b9b4fa1f9e16b197ca7f795deb2bc736dbeac5"
                    ]
                },
                {
                    "command": [
                        "red in |- *.",
                        "VernacExtend",
                        "95a3fb9e13ce19fdc8e335912fb83e57a9512b14"
                    ]
                },
                {
                    "command": [
                        "simpl in |- *; auto with algebra.",
                        "VernacExtend",
                        "d6b9b4fa1f9e16b197ca7f795deb2bc736dbeac5"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "full_set_full",
            "line_nb": 130,
            "steps": [
                {
                    "command": [
                        "simpl in |- *; auto with algebra.",
                        "VernacExtend",
                        "d6b9b4fa1f9e16b197ca7f795deb2bc736dbeac5"
                    ]
                },
                {
                    "command": [
                        "red in |- *.",
                        "VernacExtend",
                        "95a3fb9e13ce19fdc8e335912fb83e57a9512b14"
                    ]
                },
                {
                    "command": [
                        "simpl in |- *; auto with algebra.",
                        "VernacExtend",
                        "d6b9b4fa1f9e16b197ca7f795deb2bc736dbeac5"
                    ]
                },
                {
                    "command": [
                        "intros x; try assumption.",
                        "VernacExtend",
                        "c1d134cd0380c89f2221310d121a4057e0c22b21"
                    ]
                },
                {
                    "command": [
                        "elim x.",
                        "VernacExtend",
                        "4dae947360dc7d88bee6f5459fc6c026a56c9298"
                    ]
                },
                {
                    "command": [
                        "simpl in |- *; auto with algebra.",
                        "VernacExtend",
                        "d6b9b4fa1f9e16b197ca7f795deb2bc736dbeac5"
                    ]
                },
                {
                    "command": [
                        "intros subtype_elt' subtype_prf'; red in |- *.",
                        "VernacExtend",
                        "d6f2fdda47df13fb996c451c601f603d3b5e6e9b"
                    ]
                },
                {
                    "command": [
                        "simpl in |- *; auto with algebra.",
                        "VernacExtend",
                        "d6b9b4fa1f9e16b197ca7f795deb2bc736dbeac5"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "included_refl",
            "line_nb": 143,
            "steps": [
                {
                    "command": [
                        "simpl in |- *; unfold included in |- *; auto with algebra.",
                        "VernacExtend",
                        "f142ad3ebb2a72a8764de582ea57237effbe9cd6"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "included_antisym",
            "line_nb": 147,
            "steps": [
                {
                    "command": [
                        "simpl in |- *; unfold eq_part, included in |- *; auto with algebra.",
                        "VernacExtend",
                        "14a5a6d11c1b29e5deb22b731e7b340b0c4054e2"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "included_trans",
            "line_nb": 150,
            "steps": [
                {
                    "command": [
                        "simpl in |- *; unfold included in |- *; auto with algebra.",
                        "VernacExtend",
                        "f142ad3ebb2a72a8764de582ea57237effbe9cd6"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "included_comp",
            "line_nb": 154,
            "steps": [
                {
                    "command": [
                        "simpl in |- *; unfold eq_part, included in |- *.",
                        "VernacExtend",
                        "cd1b98752cf8ed06ae2356c8958b99b4bbf5dd90"
                    ]
                },
                {
                    "command": [
                        "intros A A' B B' H' H'0 H'1 x H'2; try assumption.",
                        "VernacExtend",
                        "7298a04bf52d37bbed4e603ef0485e21cb421072"
                    ]
                },
                {
                    "command": [
                        "elim (H'0 x); intros H'4 H'5; apply H'4.",
                        "VernacExtend",
                        "1fb02eda83d28c299254a80e125fe56633d90594"
                    ]
                },
                {
                    "command": [
                        "lapply (H'1 x); [ intros H'6; apply H'6 | idtac ].",
                        "VernacExtend",
                        "fa3cf5ffbb0a58b96f8b1aed7ce963534466494b"
                    ]
                },
                {
                    "command": [
                        "elim (H' x); intros H'6 H'7; apply H'7; auto with algebra.",
                        "VernacExtend",
                        "3b63b8ef12d87a4057b28ceb326b4afec95468be"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "eq_part_included",
            "line_nb": 161,
            "steps": [
                {
                    "command": [
                        "simpl in |- *; unfold eq_part, included in |- *.",
                        "VernacExtend",
                        "cd1b98752cf8ed06ae2356c8958b99b4bbf5dd90"
                    ]
                },
                {
                    "command": [
                        "intros A B H' x H'0; try assumption.",
                        "VernacExtend",
                        "507cc26817fe48a364819ed54556efefaf5d670a"
                    ]
                },
                {
                    "command": [
                        "specialize H' with (x := x); rename H' into H'1; try exact H'1.",
                        "VernacExtend",
                        "7887455bb6ddf8de5b49c89db59f1bf4f616ff9e"
                    ]
                },
                {
                    "command": [
                        "elim H'1; intros H'2 H'3; try exact H'2; clear H'1; auto with algebra.",
                        "VernacExtend",
                        "fc9813218b8ca7b5c4b0a316b59aa8d70aaf45dc"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "empty_included",
            "line_nb": 168,
            "steps": [
                {
                    "command": [
                        "simpl in |- *; unfold included in |- *; auto with algebra.",
                        "VernacExtend",
                        "f142ad3ebb2a72a8764de582ea57237effbe9cd6"
                    ]
                },
                {
                    "command": [
                        "intros A x H'; try assumption.",
                        "VernacExtend",
                        "7f7984dcbd939f98b5a9ac07676455be7a194352"
                    ]
                },
                {
                    "command": [
                        "absurd (in_part x (empty E)); auto with algebra.",
                        "VernacExtend",
                        "b6f5537fb48f10bc332696c9641eea3088e58918"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "full_included",
            "line_nb": 173,
            "steps": [
                {
                    "command": [
                        "simpl in |- *; unfold included in |- *; auto with algebra.",
                        "VernacExtend",
                        "f142ad3ebb2a72a8764de582ea57237effbe9cd6"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "inj_part",
            "line_nb": 177,
            "steps": [
                {
                    "command": [
                        "intros A; try assumption.",
                        "VernacExtend",
                        "bee08795c86464c42c0359ec8226a130c5f630d4"
                    ]
                },
                {
                    "command": [
                        "apply (Build_Map (Ap:=fun x : A => subtype_elt x)).",
                        "VernacExtend",
                        "70c05aecdda2483c7a2110c5aa4bf4662fc7d791"
                    ]
                },
                {
                    "command": [
                        "red in |- *.",
                        "VernacExtend",
                        "95a3fb9e13ce19fdc8e335912fb83e57a9512b14"
                    ]
                },
                {
                    "command": [
                        "auto with algebra.",
                        "VernacExtend",
                        "2a8b2ac72ff20b5f342f7b76f72f9b539e5a10f0"
                    ]
                },
                {
                    "command": [
                        "Defined.",
                        "VernacEndProof",
                        "88c0be54a50df4bb90276c075406fe442428eb9c"
                    ]
                }
            ]
        },
        {
            "name": "inj_part_injective",
            "line_nb": 183,
            "steps": [
                {
                    "command": [
                        "intros A; try assumption.",
                        "VernacExtend",
                        "bee08795c86464c42c0359ec8226a130c5f630d4"
                    ]
                },
                {
                    "command": [
                        "red in |- *.",
                        "VernacExtend",
                        "95a3fb9e13ce19fdc8e335912fb83e57a9512b14"
                    ]
                },
                {
                    "command": [
                        "auto with algebra.",
                        "VernacExtend",
                        "2a8b2ac72ff20b5f342f7b76f72f9b539e5a10f0"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "inj_part_included",
            "line_nb": 188,
            "steps": [
                {
                    "command": [
                        "intros A B H'; try assumption.",
                        "VernacExtend",
                        "b0d24c04ee6ba3793e97e5957c9079ce89ebcf6b"
                    ]
                },
                {
                    "command": [
                        "red in H'.",
                        "VernacExtend",
                        "b3f39ff59e03e63f7335587cdc4b70d75813b637"
                    ]
                },
                {
                    "command": [
                        "apply (Build_Map (A:=A) (B:=B) (Ap:=fun x : A => Build_subtype (H' (A x) (subtype_prf (E:=E) (P:=A) x)))).",
                        "VernacExtend",
                        "926b166873f38c8c08dba1b365306cd1462688e2"
                    ]
                },
                {
                    "command": [
                        "red in |- *.",
                        "VernacExtend",
                        "95a3fb9e13ce19fdc8e335912fb83e57a9512b14"
                    ]
                },
                {
                    "command": [
                        "simpl in |- *; auto with algebra.",
                        "VernacExtend",
                        "d6b9b4fa1f9e16b197ca7f795deb2bc736dbeac5"
                    ]
                },
                {
                    "command": [
                        "Defined.",
                        "VernacEndProof",
                        "88c0be54a50df4bb90276c075406fe442428eb9c"
                    ]
                }
            ]
        },
        {
            "name": "inj_part_included_prop",
            "line_nb": 195,
            "steps": [
                {
                    "command": [
                        "simpl in |- *; auto with algebra.",
                        "VernacExtend",
                        "d6b9b4fa1f9e16b197ca7f795deb2bc736dbeac5"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "inj_part_included_injective",
            "line_nb": 198,
            "steps": [
                {
                    "command": [
                        "intros A B p; red in |- *.",
                        "VernacExtend",
                        "cf246346b6fad405b12797b99f972fbbe1de4515"
                    ]
                },
                {
                    "command": [
                        "intros x y; try assumption.",
                        "VernacExtend",
                        "1ff52bbc0dce5b374ba3d7f58f1771e70e9228ff"
                    ]
                },
                {
                    "command": [
                        "elim x.",
                        "VernacExtend",
                        "4dae947360dc7d88bee6f5459fc6c026a56c9298"
                    ]
                },
                {
                    "command": [
                        "elim y.",
                        "VernacExtend",
                        "2e1340b20b979eff9f29f6f7a068bc217b31672c"
                    ]
                },
                {
                    "command": [
                        "simpl in |- *; auto with algebra.",
                        "VernacExtend",
                        "d6b9b4fa1f9e16b197ca7f795deb2bc736dbeac5"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "id_map_parts_equal",
            "line_nb": 205,
            "steps": [
                {
                    "command": [
                        "intros A B H'; try assumption.",
                        "VernacExtend",
                        "b0d24c04ee6ba3793e97e5957c9079ce89ebcf6b"
                    ]
                },
                {
                    "command": [
                        "exact (inj_part_included (eq_part_included H')).",
                        "VernacExtend",
                        "c491462aa31617ee23796a16ae30ba19f5e370d2"
                    ]
                },
                {
                    "command": [
                        "Defined.",
                        "VernacEndProof",
                        "88c0be54a50df4bb90276c075406fe442428eb9c"
                    ]
                }
            ]
        },
        {
            "name": "id_map_parts_equal_prop",
            "line_nb": 209,
            "steps": [
                {
                    "command": [
                        "simpl in |- *; auto with algebra.",
                        "VernacExtend",
                        "d6b9b4fa1f9e16b197ca7f795deb2bc736dbeac5"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "union_part",
            "line_nb": 217,
            "steps": [
                {
                    "command": [
                        "apply (Build_Predicate (Pred_fun:=fun x : E => exists A : part_set E, in_part A P /\\ in_part x A)).",
                        "VernacExtend",
                        "53b5f79163ca855932a2b90e7b43a0d0780d0297"
                    ]
                },
                {
                    "command": [
                        "red in |- *.",
                        "VernacExtend",
                        "95a3fb9e13ce19fdc8e335912fb83e57a9512b14"
                    ]
                },
                {
                    "command": [
                        "intros x y H' H'0; try assumption.",
                        "VernacExtend",
                        "80824be427f661dd57d0ea65f59a8a8dc948972f"
                    ]
                },
                {
                    "command": [
                        "elim H'; intros A E0; elim E0; clear H'.",
                        "VernacExtend",
                        "9c93573397ce212bcab131e5b800a9acbbd1faee"
                    ]
                },
                {
                    "command": [
                        "intros H' H'1; try assumption.",
                        "VernacExtend",
                        "b047bc19a3f663d7346bb3daee5a110a78ff497e"
                    ]
                },
                {
                    "command": [
                        "exists A; split; [ try assumption | idtac ].",
                        "VernacExtend",
                        "ea2932662a834db92b63da2e57800a3a8536aebd"
                    ]
                },
                {
                    "command": [
                        "apply in_part_comp_l with x; auto with algebra.",
                        "VernacExtend",
                        "137022ad238291278e127a594be9aef89f00c13e"
                    ]
                },
                {
                    "command": [
                        "Defined.",
                        "VernacEndProof",
                        "88c0be54a50df4bb90276c075406fe442428eb9c"
                    ]
                }
            ]
        },
        {
            "name": "union_part_prop",
            "line_nb": 226,
            "steps": [
                {
                    "command": [
                        "intros x H'; red in H'; auto with algebra.",
                        "VernacExtend",
                        "9031e4b22e2eb331416c51ca91aaa0d18f7befa7"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "union_part_prop_rev",
            "line_nb": 229,
            "steps": [
                {
                    "command": [
                        "unfold union_part in |- *; simpl in |- *; auto with algebra.",
                        "VernacExtend",
                        "b3ee14abdf6680d051a54f6ba15c02e275aacad5"
                    ]
                },
                {
                    "command": [
                        "intros A H' x H'0; try assumption.",
                        "VernacExtend",
                        "23a0b0f13a87bcd47a4031c208cdf58a1e8acc9a"
                    ]
                },
                {
                    "command": [
                        "exists A; split; [ try assumption | idtac ].",
                        "VernacExtend",
                        "ea2932662a834db92b63da2e57800a3a8536aebd"
                    ]
                },
                {
                    "command": [
                        "auto with algebra.",
                        "VernacExtend",
                        "2a8b2ac72ff20b5f342f7b76f72f9b539e5a10f0"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "union_part_included",
            "line_nb": 235,
            "steps": [
                {
                    "command": [
                        "intros A H'; try assumption.",
                        "VernacExtend",
                        "720ae1f49449b60e47d9a65a03bb739117c3fea6"
                    ]
                },
                {
                    "command": [
                        "unfold included in |- *; auto with algebra.",
                        "VernacExtend",
                        "1e16dd66c08c67fc616d4c66aea2b9b97d2c6e18"
                    ]
                },
                {
                    "command": [
                        "intros x H'0; try assumption.",
                        "VernacExtend",
                        "142ba9849fedfb8416225009a0c996a95166d453"
                    ]
                },
                {
                    "command": [
                        "apply union_part_prop_rev with (A := A); auto with algebra.",
                        "VernacExtend",
                        "06dd6e93acecc5a833be39e69e58ada143b67d2b"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "union_part_upper_bound",
            "line_nb": 241,
            "steps": [
                {
                    "command": [
                        "intros Y H'; try assumption.",
                        "VernacExtend",
                        "a0ed24bb5397a941637ac9036bc4f159c648a93d"
                    ]
                },
                {
                    "command": [
                        "unfold included in |- *.",
                        "VernacExtend",
                        "49d47da082bc436033ab68582d7a85f3cb0b6b75"
                    ]
                },
                {
                    "command": [
                        "intros x H'0; try assumption.",
                        "VernacExtend",
                        "142ba9849fedfb8416225009a0c996a95166d453"
                    ]
                },
                {
                    "command": [
                        "case (union_part_prop H'0).",
                        "VernacExtend",
                        "0248ffecb5ae8793d9361963fbdc07ea836d9869"
                    ]
                },
                {
                    "command": [
                        "intros A H'1; try assumption.",
                        "VernacExtend",
                        "a7b5720e6139076c3247bdea15a06d05b6c8d48d"
                    ]
                },
                {
                    "command": [
                        "elim H'1.",
                        "VernacExtend",
                        "adde82f993f35778617a2db796b0637a05aa745b"
                    ]
                },
                {
                    "command": [
                        "intros H'2 H'3; try assumption.",
                        "VernacExtend",
                        "adbe0b61f42a2a296426b3cdb037e35e4912d301"
                    ]
                },
                {
                    "command": [
                        "unfold included in H'.",
                        "VernacExtend",
                        "84717ddbdcce8779e657fee512272677fae906cf"
                    ]
                },
                {
                    "command": [
                        "apply H' with (A := A); auto with algebra.",
                        "VernacExtend",
                        "3226c99d23e801164db43d5f8795a87fac5dfa82"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "X",
            "line_nb": 259,
            "steps": [
                {
                    "command": [
                        "apply (Build_Predicate (E:=E) (Pred_fun:=X_def)).",
                        "VernacExtend",
                        "07b3b385e9cb8df6f14f65c6b24ea5cf0d54b38c"
                    ]
                },
                {
                    "command": [
                        "unfold X_def in |- *.",
                        "VernacExtend",
                        "2442711af004918b26ce833bb953ba340d4dbacb"
                    ]
                },
                {
                    "command": [
                        "red in |- *.",
                        "VernacExtend",
                        "95a3fb9e13ce19fdc8e335912fb83e57a9512b14"
                    ]
                },
                {
                    "command": [
                        "unfold not in |- *.",
                        "VernacExtend",
                        "6c337369ba68753b2202c88d3c56bf02e1807b95"
                    ]
                },
                {
                    "command": [
                        "intros x y H' H'0 H'1; try assumption.",
                        "VernacExtend",
                        "d7603f9ac46fad9c0d2a5f3fc2d2f16aa3a30694"
                    ]
                },
                {
                    "command": [
                        "apply H'.",
                        "VernacExtend",
                        "b9f7b1afd5784d2a6d1eac6189a3bdc5f0119ad0"
                    ]
                },
                {
                    "command": [
                        "apply in_part_comp_l with y; auto with algebra.",
                        "VernacExtend",
                        "a96ecfe6d4f87e02909cce250c1293c1a4089f55"
                    ]
                },
                {
                    "command": [
                        "apply in_part_comp_r with (Ap f y); auto with algebra.",
                        "VernacExtend",
                        "b1e049f6f1fbd79f69f16a83c2b210386bdfea32"
                    ]
                },
                {
                    "command": [
                        "Defined.",
                        "VernacEndProof",
                        "88c0be54a50df4bb90276c075406fe442428eb9c"
                    ]
                }
            ]
        },
        {
            "name": "invX",
            "line_nb": 269,
            "steps": [
                {
                    "command": [
                        "exact (fsurj X).",
                        "VernacExtend",
                        "029e69c9071b31f33bead392d85d8732f14daef0"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "not_inpart_comp_r",
            "line_nb": 272,
            "steps": [
                {
                    "command": [
                        "unfold not in |- *.",
                        "VernacExtend",
                        "6c337369ba68753b2202c88d3c56bf02e1807b95"
                    ]
                },
                {
                    "command": [
                        "intros E0 x A B H' H'0 H'1; try assumption.",
                        "VernacExtend",
                        "f95f1034c76e90c85aa6736eeae3df34c640c09c"
                    ]
                },
                {
                    "command": [
                        "apply H'.",
                        "VernacExtend",
                        "b9f7b1afd5784d2a6d1eac6189a3bdc5f0119ad0"
                    ]
                },
                {
                    "command": [
                        "apply in_part_comp_r with B; auto with algebra.",
                        "VernacExtend",
                        "f5dc8497ce4a8d0c37336cc5ccdb0fb1d1df6288"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "part_set_is_strictly_greater_than_set1",
            "line_nb": 278,
            "steps": [
                {
                    "command": [
                        "case invX.",
                        "VernacExtend",
                        "51770e8597309ef442964fd5efd33b424daaf7da"
                    ]
                },
                {
                    "command": [
                        "intros x H'; try assumption.",
                        "VernacExtend",
                        "58e256260d8e1308b78670caf8fd802cbcefd3be"
                    ]
                },
                {
                    "command": [
                        "cut (~ in_part x X).",
                        "VernacExtend",
                        "2a4faaba562887e9e24d1297c9c0d3eab0d13ac4"
                    ]
                },
                {
                    "command": [
                        "intros H'0; try assumption.",
                        "VernacExtend",
                        "4cdfb5ff555980b7fe10aad1aff23df9d3ecf363"
                    ]
                },
                {
                    "command": [
                        "absurd (in_part x X); auto with algebra.",
                        "VernacExtend",
                        "bd4276c8cf91b4de3e35488b04273445072440fe"
                    ]
                },
                {
                    "command": [
                        "simpl in |- *.",
                        "VernacExtend",
                        "1b93169f4cf876d207c1fab22a2347202ab48d85"
                    ]
                },
                {
                    "command": [
                        "unfold X_def in |- *.",
                        "VernacExtend",
                        "2442711af004918b26ce833bb953ba340d4dbacb"
                    ]
                },
                {
                    "command": [
                        "apply not_inpart_comp_r with X; auto with algebra.",
                        "VernacExtend",
                        "e447ff77a2ac089361e9b9d5364ebc19c144f593"
                    ]
                },
                {
                    "command": [
                        "unfold not in |- *.",
                        "VernacExtend",
                        "6c337369ba68753b2202c88d3c56bf02e1807b95"
                    ]
                },
                {
                    "command": [
                        "intros H'0; try assumption.",
                        "VernacExtend",
                        "4cdfb5ff555980b7fe10aad1aff23df9d3ecf363"
                    ]
                },
                {
                    "command": [
                        "absurd (in_part x X); auto with algebra.",
                        "VernacExtend",
                        "bd4276c8cf91b4de3e35488b04273445072440fe"
                    ]
                },
                {
                    "command": [
                        "apply not_inpart_comp_r with (Ap f x); auto with algebra.",
                        "VernacExtend",
                        "af62aa1f1df852e41db9890ab85bc62a2e865da2"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "part_set_is_strictly_greater_than_set",
            "line_nb": 293,
            "steps": [
                {
                    "command": [
                        "exact part_set_is_strictly_greater_than_set1.",
                        "VernacExtend",
                        "e574f97a35809c8f874c46e97a74b6ecbde28799"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        }
    ]
}