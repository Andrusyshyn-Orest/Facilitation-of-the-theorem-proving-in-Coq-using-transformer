{
    "filename": "Group_kernel.v",
    "coq_project": "algebra",
    "vernac_cmds": [
        [
            "Set Implicit Arguments.",
            "VernacSetOption",
            "9e84ff8896f028601d8aded48c1d4aebe60aa584"
        ],
        [
            "Unset Strict Implicit.",
            "VernacUnsetOption",
            "2842adaf6959318f2042805935c46f513bdc0348"
        ],
        [
            "Require Export Group_util.",
            "VernacRequire",
            "f24aad8fbb275f0ceaac7b195333eb7b08e1abaf"
        ],
        [
            "Require Export Group_quotient.",
            "VernacRequire",
            "695b3ac8cdcbdfe596b75f471d19a54630b916cd"
        ],
        [
            "Require Export Parts2.",
            "VernacRequire",
            "a83f2a70b5bd814cb1789cfdf7e823ee92ad387a"
        ],
        [
            "Section Def.",
            "VernacBeginSection",
            "891f679f68bab7ae72311468953cd39d353d2080"
        ],
        [
            "Variable G G' : GROUP.",
            "VernacAssumption",
            "825a01d959f231d776c96ccb2041a4d77d170766"
        ],
        [
            "Variable f : Hom G G'.",
            "VernacAssumption",
            "8c37e81e810c47f404a5fc0cd8fad422dc03b3af"
        ],
        [
            "Definition kernel_part : part_set G.",
            "VernacDefinition",
            "63f08ca203a344a3f4b3b1c37d8c470cc003a19c"
        ],
        [
            "apply (Build_Predicate (E:=G) (Pred_fun:=fun x : G => Equal (f x) (monoid_unit G'))).",
            "VernacExtend",
            "fa92c6b80c04e2df78ddcee7a271b6249348b93e"
        ],
        [
            "red in |- *.",
            "VernacExtend",
            "95a3fb9e13ce19fdc8e335912fb83e57a9512b14"
        ],
        [
            "intros x y H' H'0; try assumption.",
            "VernacExtend",
            "80824be427f661dd57d0ea65f59a8a8dc948972f"
        ],
        [
            "apply Trans with (Ap (sgroup_map (monoid_sgroup_hom f)) x); auto with algebra.",
            "VernacExtend",
            "f5549620ce1a15452e453994c19cea764a080df8"
        ],
        [
            "Defined.",
            "VernacEndProof",
            "88c0be54a50df4bb90276c075406fe442428eb9c"
        ],
        [
            "Definition Ker : subgroup G.",
            "VernacDefinition",
            "bf67ab1f96fb86daa6ea1fa1e5f3d6b5bba1dbb2"
        ],
        [
            "apply (BUILD_SUB_GROUP (G:=G) (H:=kernel_part)).",
            "VernacExtend",
            "b33aadf6616f210c2ff19002da0f88f691eb4be8"
        ],
        [
            "simpl in |- *.",
            "VernacExtend",
            "1b93169f4cf876d207c1fab22a2347202ab48d85"
        ],
        [
            "intros x y H' H'0; try assumption.",
            "VernacExtend",
            "80824be427f661dd57d0ea65f59a8a8dc948972f"
        ],
        [
            "apply Trans with (sgroup_law _ (Ap (sgroup_map (monoid_sgroup_hom f)) x) (Ap (sgroup_map (monoid_sgroup_hom f)) y)); auto with algebra.",
            "VernacExtend",
            "a7379241f6216cf1d0226a28cc9400fde9663432"
        ],
        [
            "apply Trans with (sgroup_law G' (monoid_unit G') (monoid_unit G')); auto with algebra.",
            "VernacExtend",
            "39211e5b82acc33e1c429f490187de01fc55d8f1"
        ],
        [
            "simpl in |- *.",
            "VernacExtend",
            "1b93169f4cf876d207c1fab22a2347202ab48d85"
        ],
        [
            "auto with algebra.",
            "VernacExtend",
            "2a8b2ac72ff20b5f342f7b76f72f9b539e5a10f0"
        ],
        [
            "simpl in |- *.",
            "VernacExtend",
            "1b93169f4cf876d207c1fab22a2347202ab48d85"
        ],
        [
            "intros x H'; try assumption.",
            "VernacExtend",
            "58e256260d8e1308b78670caf8fd802cbcefd3be"
        ],
        [
            "apply Trans with (group_inverse _ (Ap (sgroup_map (monoid_sgroup_hom f)) x)); auto with algebra.",
            "VernacExtend",
            "5b8b8737215686df3b4afbd15868ec81780b9a38"
        ],
        [
            "apply Trans with (group_inverse _ (monoid_unit G')); auto with algebra.",
            "VernacExtend",
            "7a011dbb6cb5b4721c006b58903a6e90a9138275"
        ],
        [
            "Defined.",
            "VernacEndProof",
            "88c0be54a50df4bb90276c075406fe442428eb9c"
        ],
        [
            "Definition coKer : subgroup G'.",
            "VernacDefinition",
            "fb13c2ae004b2d0dc70cc7eb2a9c947b736e61dc"
        ],
        [
            "apply (BUILD_SUB_GROUP (G:=G') (H:=image f (full G))).",
            "VernacExtend",
            "8ed6e7731582bae907b5310ded1121956385fa02"
        ],
        [
            "intros x y H' H'0; try assumption.",
            "VernacExtend",
            "80824be427f661dd57d0ea65f59a8a8dc948972f"
        ],
        [
            "elim H'0; intros x0 E; elim E; intros H'1 H'2; try exact H'2; clear E H'0.",
            "VernacExtend",
            "4c8789c11bd9aae3240415a972940da95177d4ad"
        ],
        [
            "elim H'; intros x1 E; elim E; intros H'0 H'3; try exact H'3; clear E H'.",
            "VernacExtend",
            "c180e604fb34a6b1d30636f9c789a71c3bd3e216"
        ],
        [
            "exists (sgroup_law _ x1 x0); split; [ try assumption | idtac ].",
            "VernacExtend",
            "2b6f16efbdccc3e40c2155435a3156909eac54cd"
        ],
        [
            "apply Trans with (sgroup_law G' (Ap (sgroup_map (monoid_sgroup_hom f)) x1) (Ap (sgroup_map (monoid_sgroup_hom f)) x0)); auto with algebra.",
            "VernacExtend",
            "b616ec7cace8b16b7c718b3025f07dab9654b24b"
        ],
        [
            "simpl in |- *.",
            "VernacExtend",
            "1b93169f4cf876d207c1fab22a2347202ab48d85"
        ],
        [
            "exists (monoid_unit G); auto with algebra.",
            "VernacExtend",
            "b4557acadbb003468f1251eccbf6544c69a4bfd6"
        ],
        [
            "simpl in |- *.",
            "VernacExtend",
            "1b93169f4cf876d207c1fab22a2347202ab48d85"
        ],
        [
            "intros x H'; try assumption.",
            "VernacExtend",
            "58e256260d8e1308b78670caf8fd802cbcefd3be"
        ],
        [
            "elim H'; intros x0 E; elim E; intros H'0 H'1; try exact H'1; clear E H'.",
            "VernacExtend",
            "3a45126c6fbdd5654ca708b1ffd338e02597a1e8"
        ],
        [
            "exists (group_inverse _ x0); split; [ try assumption | idtac ].",
            "VernacExtend",
            "f79a51605fed2ae6d9f5f2f86e2389f9e17687f2"
        ],
        [
            "apply Trans with (group_inverse G' (Ap (sgroup_map (monoid_sgroup_hom f)) x0)); auto with algebra.",
            "VernacExtend",
            "1ac4a2c58a33c9a8cedd470fd8a01559dafe5484"
        ],
        [
            "Defined.",
            "VernacEndProof",
            "88c0be54a50df4bb90276c075406fe442428eb9c"
        ],
        [
            "Lemma kernel_normal : normal Ker.",
            "VernacStartTheoremProof",
            "14e94d48169836096bb57113f5285e013558d195"
        ],
        [
            "red in |- *.",
            "VernacExtend",
            "95a3fb9e13ce19fdc8e335912fb83e57a9512b14"
        ],
        [
            "simpl in |- *.",
            "VernacExtend",
            "1b93169f4cf876d207c1fab22a2347202ab48d85"
        ],
        [
            "intros x y H'; try assumption.",
            "VernacExtend",
            "fbcf20f9e721db2a6aa9129fd945d80367dbafda"
        ],
        [
            "apply Trans with (sgroup_law _ (Ap (sgroup_map (monoid_sgroup_hom f)) x) (Ap (sgroup_map (monoid_sgroup_hom f)) (sgroup_law G y (group_inverse G x)))); auto with algebra.",
            "VernacExtend",
            "57bfc4b8635a32143f20810026cf63a46242d4c5"
        ],
        [
            "apply Trans with (sgroup_law _ (Ap (sgroup_map (monoid_sgroup_hom f)) x) (sgroup_law _ (Ap (sgroup_map (monoid_sgroup_hom f)) y) (Ap (sgroup_map (monoid_sgroup_hom f)) (group_inverse G x)))); auto with algebra.",
            "VernacExtend",
            "653bc3b04fe6fad0dcd4ef3f1b1abda84a78245a"
        ],
        [
            "apply Trans with (sgroup_law _ (Ap (sgroup_map (monoid_sgroup_hom f)) x) (sgroup_law _ (Ap (sgroup_map (monoid_sgroup_hom f)) y) (group_inverse _ (Ap (sgroup_map (monoid_sgroup_hom f)) x)))); auto with algebra.",
            "VernacExtend",
            "358034f4b2f707728efcd24d53f1b7584378d161"
        ],
        [
            "apply Trans with (sgroup_law _ (Ap (sgroup_map (monoid_sgroup_hom f)) x) (sgroup_law _ (monoid_unit G') (group_inverse _ (Ap (sgroup_map (monoid_sgroup_hom f)) x)))); auto with algebra.",
            "VernacExtend",
            "45a60a33c03c52874339c2c8a698de064f8454de"
        ],
        [
            "apply Trans with (sgroup_law _ (Ap (sgroup_map (monoid_sgroup_hom f)) x) (group_inverse _ (Ap (sgroup_map (monoid_sgroup_hom f)) x))); auto with algebra.",
            "VernacExtend",
            "6d8dc9752f298338050968a6e831bee19505101e"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Set Strict Implicit.",
            "VernacSetOption",
            "6b94f70716dd2a2fc34140a20b87bb0e87225ff4"
        ],
        [
            "Unset Implicit Arguments.",
            "VernacUnsetOption",
            "cacc0f023301fae157e1bbb31e84419045fc8198"
        ],
        [
            "Definition group_quo_ker := group_quo G Ker kernel_normal.",
            "VernacDefinition",
            "3c13073b4f5fff89c563b23d1c89f32079f0a427"
        ],
        [
            "Set Implicit Arguments.",
            "VernacSetOption",
            "9e84ff8896f028601d8aded48c1d4aebe60aa584"
        ],
        [
            "Unset Strict Implicit.",
            "VernacUnsetOption",
            "2842adaf6959318f2042805935c46f513bdc0348"
        ],
        [
            "Lemma Ker_prop : forall x : G, in_part x Ker -> Equal (f x) (monoid_unit G').",
            "VernacStartTheoremProof",
            "16a2babfb08697d0da251e43a762e3d2d7b494f6"
        ],
        [
            "auto with algebra.",
            "VernacExtend",
            "2a8b2ac72ff20b5f342f7b76f72f9b539e5a10f0"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma Ker_prop_rev : forall x : G, Equal (f x) (monoid_unit G') -> in_part x Ker.",
            "VernacStartTheoremProof",
            "f92bd1972a5d8395bf49b3b2b38592838169600a"
        ],
        [
            "auto with algebra.",
            "VernacExtend",
            "2a8b2ac72ff20b5f342f7b76f72f9b539e5a10f0"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma coKer_prop : forall x : G, in_part (f x) coKer.",
            "VernacStartTheoremProof",
            "2f3f0f1e089345ae12fbbe72d23d7a56c208735d"
        ],
        [
            "simpl in |- *.",
            "VernacExtend",
            "1b93169f4cf876d207c1fab22a2347202ab48d85"
        ],
        [
            "intros x; exists x; split; [ idtac | try assumption ]; auto with algebra.",
            "VernacExtend",
            "8b4489efbc976dcedfc41972d34d125bfa7503f3"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "End Def.",
            "VernacEndSegment",
            "616ad5692568c74f61a9df3a82ac03d2b7ebac01"
        ],
        [
            "Hint Resolve kernel_normal Ker_prop coKer_prop: algebra.",
            "VernacHints",
            "edef01d643e048b36dc84dbda689330a01c289f9"
        ]
    ],
    "proofs": [
        {
            "name": "kernel_part",
            "line_nb": 8,
            "steps": [
                {
                    "command": [
                        "apply (Build_Predicate (E:=G) (Pred_fun:=fun x : G => Equal (f x) (monoid_unit G'))).",
                        "VernacExtend",
                        "fa92c6b80c04e2df78ddcee7a271b6249348b93e"
                    ]
                },
                {
                    "command": [
                        "red in |- *.",
                        "VernacExtend",
                        "95a3fb9e13ce19fdc8e335912fb83e57a9512b14"
                    ]
                },
                {
                    "command": [
                        "intros x y H' H'0; try assumption.",
                        "VernacExtend",
                        "80824be427f661dd57d0ea65f59a8a8dc948972f"
                    ]
                },
                {
                    "command": [
                        "apply Trans with (Ap (sgroup_map (monoid_sgroup_hom f)) x); auto with algebra.",
                        "VernacExtend",
                        "f5549620ce1a15452e453994c19cea764a080df8"
                    ]
                },
                {
                    "command": [
                        "Defined.",
                        "VernacEndProof",
                        "88c0be54a50df4bb90276c075406fe442428eb9c"
                    ]
                }
            ]
        },
        {
            "name": "Ker",
            "line_nb": 14,
            "steps": [
                {
                    "command": [
                        "apply (BUILD_SUB_GROUP (G:=G) (H:=kernel_part)).",
                        "VernacExtend",
                        "b33aadf6616f210c2ff19002da0f88f691eb4be8"
                    ]
                },
                {
                    "command": [
                        "simpl in |- *.",
                        "VernacExtend",
                        "1b93169f4cf876d207c1fab22a2347202ab48d85"
                    ]
                },
                {
                    "command": [
                        "intros x y H' H'0; try assumption.",
                        "VernacExtend",
                        "80824be427f661dd57d0ea65f59a8a8dc948972f"
                    ]
                },
                {
                    "command": [
                        "apply Trans with (sgroup_law _ (Ap (sgroup_map (monoid_sgroup_hom f)) x) (Ap (sgroup_map (monoid_sgroup_hom f)) y)); auto with algebra.",
                        "VernacExtend",
                        "a7379241f6216cf1d0226a28cc9400fde9663432"
                    ]
                },
                {
                    "command": [
                        "apply Trans with (sgroup_law G' (monoid_unit G') (monoid_unit G')); auto with algebra.",
                        "VernacExtend",
                        "39211e5b82acc33e1c429f490187de01fc55d8f1"
                    ]
                },
                {
                    "command": [
                        "simpl in |- *.",
                        "VernacExtend",
                        "1b93169f4cf876d207c1fab22a2347202ab48d85"
                    ]
                },
                {
                    "command": [
                        "auto with algebra.",
                        "VernacExtend",
                        "2a8b2ac72ff20b5f342f7b76f72f9b539e5a10f0"
                    ]
                },
                {
                    "command": [
                        "simpl in |- *.",
                        "VernacExtend",
                        "1b93169f4cf876d207c1fab22a2347202ab48d85"
                    ]
                },
                {
                    "command": [
                        "intros x H'; try assumption.",
                        "VernacExtend",
                        "58e256260d8e1308b78670caf8fd802cbcefd3be"
                    ]
                },
                {
                    "command": [
                        "apply Trans with (group_inverse _ (Ap (sgroup_map (monoid_sgroup_hom f)) x)); auto with algebra.",
                        "VernacExtend",
                        "5b8b8737215686df3b4afbd15868ec81780b9a38"
                    ]
                },
                {
                    "command": [
                        "apply Trans with (group_inverse _ (monoid_unit G')); auto with algebra.",
                        "VernacExtend",
                        "7a011dbb6cb5b4721c006b58903a6e90a9138275"
                    ]
                },
                {
                    "command": [
                        "Defined.",
                        "VernacEndProof",
                        "88c0be54a50df4bb90276c075406fe442428eb9c"
                    ]
                }
            ]
        },
        {
            "name": "coKer",
            "line_nb": 27,
            "steps": [
                {
                    "command": [
                        "apply (BUILD_SUB_GROUP (G:=G') (H:=image f (full G))).",
                        "VernacExtend",
                        "8ed6e7731582bae907b5310ded1121956385fa02"
                    ]
                },
                {
                    "command": [
                        "intros x y H' H'0; try assumption.",
                        "VernacExtend",
                        "80824be427f661dd57d0ea65f59a8a8dc948972f"
                    ]
                },
                {
                    "command": [
                        "elim H'0; intros x0 E; elim E; intros H'1 H'2; try exact H'2; clear E H'0.",
                        "VernacExtend",
                        "4c8789c11bd9aae3240415a972940da95177d4ad"
                    ]
                },
                {
                    "command": [
                        "elim H'; intros x1 E; elim E; intros H'0 H'3; try exact H'3; clear E H'.",
                        "VernacExtend",
                        "c180e604fb34a6b1d30636f9c789a71c3bd3e216"
                    ]
                },
                {
                    "command": [
                        "exists (sgroup_law _ x1 x0); split; [ try assumption | idtac ].",
                        "VernacExtend",
                        "2b6f16efbdccc3e40c2155435a3156909eac54cd"
                    ]
                },
                {
                    "command": [
                        "apply Trans with (sgroup_law G' (Ap (sgroup_map (monoid_sgroup_hom f)) x1) (Ap (sgroup_map (monoid_sgroup_hom f)) x0)); auto with algebra.",
                        "VernacExtend",
                        "b616ec7cace8b16b7c718b3025f07dab9654b24b"
                    ]
                },
                {
                    "command": [
                        "simpl in |- *.",
                        "VernacExtend",
                        "1b93169f4cf876d207c1fab22a2347202ab48d85"
                    ]
                },
                {
                    "command": [
                        "exists (monoid_unit G); auto with algebra.",
                        "VernacExtend",
                        "b4557acadbb003468f1251eccbf6544c69a4bfd6"
                    ]
                },
                {
                    "command": [
                        "simpl in |- *.",
                        "VernacExtend",
                        "1b93169f4cf876d207c1fab22a2347202ab48d85"
                    ]
                },
                {
                    "command": [
                        "intros x H'; try assumption.",
                        "VernacExtend",
                        "58e256260d8e1308b78670caf8fd802cbcefd3be"
                    ]
                },
                {
                    "command": [
                        "elim H'; intros x0 E; elim E; intros H'0 H'1; try exact H'1; clear E H'.",
                        "VernacExtend",
                        "3a45126c6fbdd5654ca708b1ffd338e02597a1e8"
                    ]
                },
                {
                    "command": [
                        "exists (group_inverse _ x0); split; [ try assumption | idtac ].",
                        "VernacExtend",
                        "f79a51605fed2ae6d9f5f2f86e2389f9e17687f2"
                    ]
                },
                {
                    "command": [
                        "apply Trans with (group_inverse G' (Ap (sgroup_map (monoid_sgroup_hom f)) x0)); auto with algebra.",
                        "VernacExtend",
                        "1ac4a2c58a33c9a8cedd470fd8a01559dafe5484"
                    ]
                },
                {
                    "command": [
                        "Defined.",
                        "VernacEndProof",
                        "88c0be54a50df4bb90276c075406fe442428eb9c"
                    ]
                }
            ]
        },
        {
            "name": "kernel_normal",
            "line_nb": 42,
            "steps": [
                {
                    "command": [
                        "red in |- *.",
                        "VernacExtend",
                        "95a3fb9e13ce19fdc8e335912fb83e57a9512b14"
                    ]
                },
                {
                    "command": [
                        "simpl in |- *.",
                        "VernacExtend",
                        "1b93169f4cf876d207c1fab22a2347202ab48d85"
                    ]
                },
                {
                    "command": [
                        "intros x y H'; try assumption.",
                        "VernacExtend",
                        "fbcf20f9e721db2a6aa9129fd945d80367dbafda"
                    ]
                },
                {
                    "command": [
                        "apply Trans with (sgroup_law _ (Ap (sgroup_map (monoid_sgroup_hom f)) x) (Ap (sgroup_map (monoid_sgroup_hom f)) (sgroup_law G y (group_inverse G x)))); auto with algebra.",
                        "VernacExtend",
                        "57bfc4b8635a32143f20810026cf63a46242d4c5"
                    ]
                },
                {
                    "command": [
                        "apply Trans with (sgroup_law _ (Ap (sgroup_map (monoid_sgroup_hom f)) x) (sgroup_law _ (Ap (sgroup_map (monoid_sgroup_hom f)) y) (Ap (sgroup_map (monoid_sgroup_hom f)) (group_inverse G x)))); auto with algebra.",
                        "VernacExtend",
                        "653bc3b04fe6fad0dcd4ef3f1b1abda84a78245a"
                    ]
                },
                {
                    "command": [
                        "apply Trans with (sgroup_law _ (Ap (sgroup_map (monoid_sgroup_hom f)) x) (sgroup_law _ (Ap (sgroup_map (monoid_sgroup_hom f)) y) (group_inverse _ (Ap (sgroup_map (monoid_sgroup_hom f)) x)))); auto with algebra.",
                        "VernacExtend",
                        "358034f4b2f707728efcd24d53f1b7584378d161"
                    ]
                },
                {
                    "command": [
                        "apply Trans with (sgroup_law _ (Ap (sgroup_map (monoid_sgroup_hom f)) x) (sgroup_law _ (monoid_unit G') (group_inverse _ (Ap (sgroup_map (monoid_sgroup_hom f)) x)))); auto with algebra.",
                        "VernacExtend",
                        "45a60a33c03c52874339c2c8a698de064f8454de"
                    ]
                },
                {
                    "command": [
                        "apply Trans with (sgroup_law _ (Ap (sgroup_map (monoid_sgroup_hom f)) x) (group_inverse _ (Ap (sgroup_map (monoid_sgroup_hom f)) x))); auto with algebra.",
                        "VernacExtend",
                        "6d8dc9752f298338050968a6e831bee19505101e"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "Ker_prop",
            "line_nb": 57,
            "steps": [
                {
                    "command": [
                        "auto with algebra.",
                        "VernacExtend",
                        "2a8b2ac72ff20b5f342f7b76f72f9b539e5a10f0"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "Ker_prop_rev",
            "line_nb": 60,
            "steps": [
                {
                    "command": [
                        "auto with algebra.",
                        "VernacExtend",
                        "2a8b2ac72ff20b5f342f7b76f72f9b539e5a10f0"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "coKer_prop",
            "line_nb": 63,
            "steps": [
                {
                    "command": [
                        "simpl in |- *.",
                        "VernacExtend",
                        "1b93169f4cf876d207c1fab22a2347202ab48d85"
                    ]
                },
                {
                    "command": [
                        "intros x; exists x; split; [ idtac | try assumption ]; auto with algebra.",
                        "VernacExtend",
                        "8b4489efbc976dcedfc41972d34d125bfa7503f3"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        }
    ]
}