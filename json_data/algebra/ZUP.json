{
    "filename": "ZUP.v",
    "coq_project": "algebra",
    "vernac_cmds": [
        [
            "Set Automatic Coercions Import.",
            "VernacSetOption",
            "12f2b52fb77cee7f2419b939e5a1046afa341e27"
        ],
        [
            "Set Implicit Arguments.",
            "VernacSetOption",
            "9e84ff8896f028601d8aded48c1d4aebe60aa584"
        ],
        [
            "Unset Strict Implicit.",
            "VernacUnsetOption",
            "2842adaf6959318f2042805935c46f513bdc0348"
        ],
        [
            "Require Export Z_group_facts.",
            "VernacRequire",
            "a8371b8c824d3303557b3e699b7bd3e20b769336"
        ],
        [
            "Section Zup1.",
            "VernacBeginSection",
            "122acbaf97e4a9e71992906684f32bd71d6e54d7"
        ],
        [
            "Variable R : RING.",
            "VernacAssumption",
            "d0eb88f51e93c9f8be4fd6395fc21fc15a70dea3"
        ],
        [
            "Hint Resolve Z_to_group_nat_eq_pos: algebra.",
            "VernacHints",
            "f19984fe177ed391421ab47ed6c9092d43aa3c70"
        ],
        [
            "Hint Resolve Z_to_group_nat_unit: algebra.",
            "VernacHints",
            "da2e6c28a23d78278187f1a00a26627f4db5dadf"
        ],
        [
            "Hint Resolve Zl1: algebra.",
            "VernacHints",
            "e1a37535a59a44e92db5e830b9e961ea10c41b3d"
        ],
        [
            "Hint Resolve Zl2: algebra.",
            "VernacHints",
            "54c7630cc4648e66252c9addc2f65cd8e5253629"
        ],
        [
            "Lemma nat_to_group_mult : forall n m : nat, Equal (nat_to_group (ring_unit R) (n * m)) (ring_mult (nat_to_group (ring_unit R) n) (nat_to_group (ring_unit R) m)).",
            "VernacStartTheoremProof",
            "9603c428548b8a4f748913c5035449906e922b74"
        ],
        [
            "simple induction n; simpl in |- *.",
            "VernacExtend",
            "b67a775f86f34dcfd676a405ed09e661896dfc35"
        ],
        [
            "auto with algebra.",
            "VernacExtend",
            "2a8b2ac72ff20b5f342f7b76f72f9b539e5a10f0"
        ],
        [
            "intros n0 H' m; try assumption.",
            "VernacExtend",
            "30cc54367c3f7e17feb7acf00f8a1d189b9fd778"
        ],
        [
            "apply Trans with (sgroup_law R (nat_to_group (ring_unit R) m) (nat_to_group (ring_unit R) (n0 * m))); auto with algebra.",
            "VernacExtend",
            "424624e86216f33a1758e745f2257a3af87a4633"
        ],
        [
            "apply Trans with (sgroup_law R (ring_mult (nat_to_group (ring_unit R) n0) (nat_to_group (ring_unit R) m)) (ring_mult (ring_unit R) (nat_to_group (ring_unit R) m))); auto with algebra.",
            "VernacExtend",
            "171b6bf488f02ef70741ff0c10bb82e495c779c3"
        ],
        [
            "apply Trans with (sgroup_law R (ring_mult (nat_to_group (ring_unit R) n0) (nat_to_group (ring_unit R) m)) (nat_to_group (ring_unit R) m)); auto with algebra.",
            "VernacExtend",
            "8096e1bd32b651a340db5b188c03803478c21bf7"
        ],
        [
            "apply Trans with (sgroup_law R (nat_to_group (ring_unit R) m) (ring_mult (nat_to_group (ring_unit R) n0) (nat_to_group (ring_unit R) m))); auto with algebra.",
            "VernacExtend",
            "5d95ceef9a13c21c25585cb0638a2e6bfb63e0d7"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Hint Resolve nat_to_group_mult: algebra.",
            "VernacHints",
            "af6a0b031ebc281ef86df648ed8a62ab7bf8985e"
        ],
        [
            "Hint Resolve Zl3: algebra.",
            "VernacHints",
            "6fdd0b0ba9affacb80eaa59540146a46e22ddd68"
        ],
        [
            "Definition Z_to_ring : Hom (ZZ:RING) R.",
            "VernacDefinition",
            "2767edabb5901fa5acf47973c9af6f0e6f9664d2"
        ],
        [
            "apply (BUILD_HOM_RING (Ring1:=ZZ:RING) (Ring2:=R) (ff:=Z_to_group (ring_unit R))).",
            "VernacExtend",
            "a7a41db51fefd7ba7974d5e45aa79d4583861474"
        ],
        [
            "auto with algebra.",
            "VernacExtend",
            "2a8b2ac72ff20b5f342f7b76f72f9b539e5a10f0"
        ],
        [
            "auto with algebra.",
            "VernacExtend",
            "2a8b2ac72ff20b5f342f7b76f72f9b539e5a10f0"
        ],
        [
            "auto with algebra.",
            "VernacExtend",
            "2a8b2ac72ff20b5f342f7b76f72f9b539e5a10f0"
        ],
        [
            "simpl in |- *.",
            "VernacExtend",
            "1b93169f4cf876d207c1fab22a2347202ab48d85"
        ],
        [
            "intros x y; try assumption.",
            "VernacExtend",
            "1ff52bbc0dce5b374ba3d7f58f1771e70e9228ff"
        ],
        [
            "apply Trans with (Z_to_group_nat_fun (ring_unit R) (ring_mult (x:ZZ) y)); auto with algebra.",
            "VernacExtend",
            "6b7eb0c41c1b4d9aa29d208a4cabcfb854cac03e"
        ],
        [
            "apply Trans with (ring_mult (Z_to_group_nat_fun (ring_unit R) x) (Z_to_group_nat_fun (ring_unit R) y)); auto with algebra.",
            "VernacExtend",
            "074b9791c70b43d78291a1999689d9c1f5eadef1"
        ],
        [
            "elim x; simpl in |- *; unfold ring_mult at 1 in |- *; simpl in |- *; intros.",
            "VernacExtend",
            "468ea536fbf610899f35d8698d6200e5e5211b5c"
        ],
        [
            "apply Trans with (ring_mult (monoid_unit R) (Z_to_group_nat_fun (ring_unit R) y)); auto with algebra.",
            "VernacExtend",
            "63b3167c3fca1faa95ca235fab268f0d32cd8159"
        ],
        [
            "apply Trans with (monoid_unit R); auto with algebra.",
            "VernacExtend",
            "9a40b53f3db042c9963c5b03d321c642d3b9a6f7"
        ],
        [
            "elim y; simpl in |- *; intros.",
            "VernacExtend",
            "220b0696f7ba348d5f31b4dfdbed6bfa596d54a5"
        ],
        [
            "apply Trans with (monoid_unit R); auto with algebra.",
            "VernacExtend",
            "9a40b53f3db042c9963c5b03d321c642d3b9a6f7"
        ],
        [
            "apply Trans with (ring_mult (Z_to_group_nat_fun (ring_unit R) (Zpos p)) (monoid_unit R)); auto with algebra.",
            "VernacExtend",
            "38e8739f707d8ccd4dbb734e2ecd7a21556a26b3"
        ],
        [
            "apply Trans with (nat_to_group (ring_unit R) (nat_of_P (pos_abs (ax3 ((fun (x : positive) (_ : positive -> positive) (y : positive) => (x * y)%positive) p (fun y : positive => y) p0))))); auto with algebra.",
            "VernacExtend",
            "d58d1d04ea495a0dac8ca8347dfc680fdaa20973"
        ],
        [
            "simpl in |- *.",
            "VernacExtend",
            "1b93169f4cf876d207c1fab22a2347202ab48d85"
        ],
        [
            "rewrite (fun (x y : positive) (_ : positive -> positive) => nat_of_P_mult_morphism x y).",
            "VernacExtend",
            "cbdd618d104d6653da48960fbdd12b6a811412fc"
        ],
        [
            "apply Trans with (ring_mult (nat_to_group (ring_unit R) (nat_of_P (pos_abs (ax3 p)))) (nat_to_group (ring_unit R) (nat_of_P (pos_abs (ax3 p0))))); auto with algebra.",
            "VernacExtend",
            "579dcf90c86018e35f49089f0f561d41e0b36681"
        ],
        [
            "apply Trans with (group_inverse R (nat_to_group (ring_unit R) (nat_of_P (pos_abs (ax3 ((fun (x : positive) (_ : positive -> positive) (y : positive) => (x * y)%positive) p (fun y : positive => y) p0)))))); auto with algebra.",
            "VernacExtend",
            "dc2ffba7c29678d292d4d4555b73c4f9e3470643"
        ],
        [
            "simpl in |- *.",
            "VernacExtend",
            "1b93169f4cf876d207c1fab22a2347202ab48d85"
        ],
        [
            "rewrite (fun (x y : positive) (_ : positive -> positive) => nat_of_P_mult_morphism x y).",
            "VernacExtend",
            "cbdd618d104d6653da48960fbdd12b6a811412fc"
        ],
        [
            "apply Trans with (ring_mult (nat_to_group (ring_unit R) (nat_of_P (pos_abs (ax3 p)))) (group_inverse R (nat_to_group (ring_unit R) (nat_of_P (pos_abs (ax3 p0)))))); auto with algebra.",
            "VernacExtend",
            "2014a6c53879adb069fdbc38a55d025200ff5d64"
        ],
        [
            "simpl in |- *.",
            "VernacExtend",
            "1b93169f4cf876d207c1fab22a2347202ab48d85"
        ],
        [
            "apply Trans with (group_inverse R (ring_mult (nat_to_group (ring_unit R) (nat_of_P p)) (nat_to_group (ring_unit R) (nat_of_P p0)))); auto with algebra.",
            "VernacExtend",
            "1c25dd575b46daa1795a91e10d8462fb310d184c"
        ],
        [
            "elim y; simpl in |- *; intros.",
            "VernacExtend",
            "220b0696f7ba348d5f31b4dfdbed6bfa596d54a5"
        ],
        [
            "apply Trans with (monoid_unit R); auto with algebra.",
            "VernacExtend",
            "9a40b53f3db042c9963c5b03d321c642d3b9a6f7"
        ],
        [
            "apply Trans with (ring_mult (Z_to_group_nat_fun (ring_unit R) (Zneg p)) (monoid_unit R)); auto with algebra.",
            "VernacExtend",
            "39c1666363bfb1cb103de863c26ef661397059ef"
        ],
        [
            "apply Trans with (group_inverse R (nat_to_group (ring_unit R) (nat_of_P (pos_abs (ax3 ((fun (x : positive) (_ : positive -> positive) (y : positive) => (x * y)%positive) p (fun y : positive => y) p0)))))); auto with algebra.",
            "VernacExtend",
            "dc2ffba7c29678d292d4d4555b73c4f9e3470643"
        ],
        [
            "simpl in |- *.",
            "VernacExtend",
            "1b93169f4cf876d207c1fab22a2347202ab48d85"
        ],
        [
            "rewrite (fun (x y : positive) (_ : positive -> positive) => nat_of_P_mult_morphism x y).",
            "VernacExtend",
            "cbdd618d104d6653da48960fbdd12b6a811412fc"
        ],
        [
            "apply Trans with (ring_mult (group_inverse R (nat_to_group (ring_unit R) (nat_of_P (pos_abs (ax3 p))))) (nat_to_group (ring_unit R) (nat_of_P (pos_abs (ax3 p0))))); auto with algebra.",
            "VernacExtend",
            "458c722ef2b950d173614c0abaa13c6a41c05861"
        ],
        [
            "simpl in |- *.",
            "VernacExtend",
            "1b93169f4cf876d207c1fab22a2347202ab48d85"
        ],
        [
            "apply Trans with (group_inverse R (ring_mult (nat_to_group (ring_unit R) (nat_of_P p)) (nat_to_group (ring_unit R) (nat_of_P p0)))); auto with algebra.",
            "VernacExtend",
            "1c25dd575b46daa1795a91e10d8462fb310d184c"
        ],
        [
            "apply Trans with (nat_to_group (ring_unit R) (nat_of_P (pos_abs (ax3 ((fun (x : positive) (_ : positive -> positive) (y : positive) => (x * y)%positive) p (fun y : positive => y) p0))))); auto with algebra.",
            "VernacExtend",
            "d58d1d04ea495a0dac8ca8347dfc680fdaa20973"
        ],
        [
            "simpl in |- *.",
            "VernacExtend",
            "1b93169f4cf876d207c1fab22a2347202ab48d85"
        ],
        [
            "rewrite (fun (x y : positive) (_ : positive -> positive) => nat_of_P_mult_morphism x y).",
            "VernacExtend",
            "cbdd618d104d6653da48960fbdd12b6a811412fc"
        ],
        [
            "apply Trans with (ring_mult (group_inverse R (nat_to_group (ring_unit R) (nat_of_P (pos_abs (ax3 p))))) (group_inverse R (nat_to_group (ring_unit R) (nat_of_P (pos_abs (ax3 p0)))))); auto with algebra.",
            "VernacExtend",
            "b6edd9c65ef8cb30da9c5d9c4c5ec9fb20f8c1bf"
        ],
        [
            "apply Trans with (ring_mult (nat_to_group (ring_unit R) (nat_of_P p)) (nat_to_group (ring_unit R) (nat_of_P p0))); auto with algebra.",
            "VernacExtend",
            "48906379a75d009c7e518f178a2ccba85144c154"
        ],
        [
            "simpl in |- *.",
            "VernacExtend",
            "1b93169f4cf876d207c1fab22a2347202ab48d85"
        ],
        [
            "apply Trans with (group_inverse R (ring_mult (nat_to_group (ring_unit R) (nat_of_P p)) (group_inverse R (nat_to_group (ring_unit R) (nat_of_P p0))))); auto with algebra.",
            "VernacExtend",
            "7c5648ccab4b800a34e4cd1cea36b4e1bfd15aaa"
        ],
        [
            "apply Trans with (group_inverse R (group_inverse R (ring_mult (nat_to_group (ring_unit R) (nat_of_P p)) (nat_to_group (ring_unit R) (nat_of_P p0))))); auto with algebra.",
            "VernacExtend",
            "4bcc7c1d53ccc5aef975478005d21afdb627234b"
        ],
        [
            "simpl in |- *; auto with algebra.",
            "VernacExtend",
            "d6b9b4fa1f9e16b197ca7f795deb2bc736dbeac5"
        ],
        [
            "Defined.",
            "VernacEndProof",
            "88c0be54a50df4bb90276c075406fe442428eb9c"
        ],
        [
            "End Zup1.",
            "VernacEndSegment",
            "20f894ddfd7a863ff2c35b378d0ba5eae439dc8a"
        ]
    ],
    "proofs": [
        {
            "name": "nat_to_group_mult",
            "line_nb": 10,
            "steps": [
                {
                    "command": [
                        "simple induction n; simpl in |- *.",
                        "VernacExtend",
                        "b67a775f86f34dcfd676a405ed09e661896dfc35"
                    ]
                },
                {
                    "command": [
                        "auto with algebra.",
                        "VernacExtend",
                        "2a8b2ac72ff20b5f342f7b76f72f9b539e5a10f0"
                    ]
                },
                {
                    "command": [
                        "intros n0 H' m; try assumption.",
                        "VernacExtend",
                        "30cc54367c3f7e17feb7acf00f8a1d189b9fd778"
                    ]
                },
                {
                    "command": [
                        "apply Trans with (sgroup_law R (nat_to_group (ring_unit R) m) (nat_to_group (ring_unit R) (n0 * m))); auto with algebra.",
                        "VernacExtend",
                        "424624e86216f33a1758e745f2257a3af87a4633"
                    ]
                },
                {
                    "command": [
                        "apply Trans with (sgroup_law R (ring_mult (nat_to_group (ring_unit R) n0) (nat_to_group (ring_unit R) m)) (ring_mult (ring_unit R) (nat_to_group (ring_unit R) m))); auto with algebra.",
                        "VernacExtend",
                        "171b6bf488f02ef70741ff0c10bb82e495c779c3"
                    ]
                },
                {
                    "command": [
                        "apply Trans with (sgroup_law R (ring_mult (nat_to_group (ring_unit R) n0) (nat_to_group (ring_unit R) m)) (nat_to_group (ring_unit R) m)); auto with algebra.",
                        "VernacExtend",
                        "8096e1bd32b651a340db5b188c03803478c21bf7"
                    ]
                },
                {
                    "command": [
                        "apply Trans with (sgroup_law R (nat_to_group (ring_unit R) m) (ring_mult (nat_to_group (ring_unit R) n0) (nat_to_group (ring_unit R) m))); auto with algebra.",
                        "VernacExtend",
                        "5d95ceef9a13c21c25585cb0638a2e6bfb63e0d7"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "Z_to_ring",
            "line_nb": 21,
            "steps": [
                {
                    "command": [
                        "apply (BUILD_HOM_RING (Ring1:=ZZ:RING) (Ring2:=R) (ff:=Z_to_group (ring_unit R))).",
                        "VernacExtend",
                        "a7a41db51fefd7ba7974d5e45aa79d4583861474"
                    ]
                },
                {
                    "command": [
                        "auto with algebra.",
                        "VernacExtend",
                        "2a8b2ac72ff20b5f342f7b76f72f9b539e5a10f0"
                    ]
                },
                {
                    "command": [
                        "auto with algebra.",
                        "VernacExtend",
                        "2a8b2ac72ff20b5f342f7b76f72f9b539e5a10f0"
                    ]
                },
                {
                    "command": [
                        "auto with algebra.",
                        "VernacExtend",
                        "2a8b2ac72ff20b5f342f7b76f72f9b539e5a10f0"
                    ]
                },
                {
                    "command": [
                        "simpl in |- *.",
                        "VernacExtend",
                        "1b93169f4cf876d207c1fab22a2347202ab48d85"
                    ]
                },
                {
                    "command": [
                        "intros x y; try assumption.",
                        "VernacExtend",
                        "1ff52bbc0dce5b374ba3d7f58f1771e70e9228ff"
                    ]
                },
                {
                    "command": [
                        "apply Trans with (Z_to_group_nat_fun (ring_unit R) (ring_mult (x:ZZ) y)); auto with algebra.",
                        "VernacExtend",
                        "6b7eb0c41c1b4d9aa29d208a4cabcfb854cac03e"
                    ]
                },
                {
                    "command": [
                        "apply Trans with (ring_mult (Z_to_group_nat_fun (ring_unit R) x) (Z_to_group_nat_fun (ring_unit R) y)); auto with algebra.",
                        "VernacExtend",
                        "074b9791c70b43d78291a1999689d9c1f5eadef1"
                    ]
                },
                {
                    "command": [
                        "elim x; simpl in |- *; unfold ring_mult at 1 in |- *; simpl in |- *; intros.",
                        "VernacExtend",
                        "468ea536fbf610899f35d8698d6200e5e5211b5c"
                    ]
                },
                {
                    "command": [
                        "apply Trans with (ring_mult (monoid_unit R) (Z_to_group_nat_fun (ring_unit R) y)); auto with algebra.",
                        "VernacExtend",
                        "63b3167c3fca1faa95ca235fab268f0d32cd8159"
                    ]
                },
                {
                    "command": [
                        "apply Trans with (monoid_unit R); auto with algebra.",
                        "VernacExtend",
                        "9a40b53f3db042c9963c5b03d321c642d3b9a6f7"
                    ]
                },
                {
                    "command": [
                        "elim y; simpl in |- *; intros.",
                        "VernacExtend",
                        "220b0696f7ba348d5f31b4dfdbed6bfa596d54a5"
                    ]
                },
                {
                    "command": [
                        "apply Trans with (monoid_unit R); auto with algebra.",
                        "VernacExtend",
                        "9a40b53f3db042c9963c5b03d321c642d3b9a6f7"
                    ]
                },
                {
                    "command": [
                        "apply Trans with (ring_mult (Z_to_group_nat_fun (ring_unit R) (Zpos p)) (monoid_unit R)); auto with algebra.",
                        "VernacExtend",
                        "38e8739f707d8ccd4dbb734e2ecd7a21556a26b3"
                    ]
                },
                {
                    "command": [
                        "apply Trans with (nat_to_group (ring_unit R) (nat_of_P (pos_abs (ax3 ((fun (x : positive) (_ : positive -> positive) (y : positive) => (x * y)%positive) p (fun y : positive => y) p0))))); auto with algebra.",
                        "VernacExtend",
                        "d58d1d04ea495a0dac8ca8347dfc680fdaa20973"
                    ]
                },
                {
                    "command": [
                        "simpl in |- *.",
                        "VernacExtend",
                        "1b93169f4cf876d207c1fab22a2347202ab48d85"
                    ]
                },
                {
                    "command": [
                        "rewrite (fun (x y : positive) (_ : positive -> positive) => nat_of_P_mult_morphism x y).",
                        "VernacExtend",
                        "cbdd618d104d6653da48960fbdd12b6a811412fc"
                    ]
                },
                {
                    "command": [
                        "apply Trans with (ring_mult (nat_to_group (ring_unit R) (nat_of_P (pos_abs (ax3 p)))) (nat_to_group (ring_unit R) (nat_of_P (pos_abs (ax3 p0))))); auto with algebra.",
                        "VernacExtend",
                        "579dcf90c86018e35f49089f0f561d41e0b36681"
                    ]
                },
                {
                    "command": [
                        "apply Trans with (group_inverse R (nat_to_group (ring_unit R) (nat_of_P (pos_abs (ax3 ((fun (x : positive) (_ : positive -> positive) (y : positive) => (x * y)%positive) p (fun y : positive => y) p0)))))); auto with algebra.",
                        "VernacExtend",
                        "dc2ffba7c29678d292d4d4555b73c4f9e3470643"
                    ]
                },
                {
                    "command": [
                        "simpl in |- *.",
                        "VernacExtend",
                        "1b93169f4cf876d207c1fab22a2347202ab48d85"
                    ]
                },
                {
                    "command": [
                        "rewrite (fun (x y : positive) (_ : positive -> positive) => nat_of_P_mult_morphism x y).",
                        "VernacExtend",
                        "cbdd618d104d6653da48960fbdd12b6a811412fc"
                    ]
                },
                {
                    "command": [
                        "apply Trans with (ring_mult (nat_to_group (ring_unit R) (nat_of_P (pos_abs (ax3 p)))) (group_inverse R (nat_to_group (ring_unit R) (nat_of_P (pos_abs (ax3 p0)))))); auto with algebra.",
                        "VernacExtend",
                        "2014a6c53879adb069fdbc38a55d025200ff5d64"
                    ]
                },
                {
                    "command": [
                        "simpl in |- *.",
                        "VernacExtend",
                        "1b93169f4cf876d207c1fab22a2347202ab48d85"
                    ]
                },
                {
                    "command": [
                        "apply Trans with (group_inverse R (ring_mult (nat_to_group (ring_unit R) (nat_of_P p)) (nat_to_group (ring_unit R) (nat_of_P p0)))); auto with algebra.",
                        "VernacExtend",
                        "1c25dd575b46daa1795a91e10d8462fb310d184c"
                    ]
                },
                {
                    "command": [
                        "elim y; simpl in |- *; intros.",
                        "VernacExtend",
                        "220b0696f7ba348d5f31b4dfdbed6bfa596d54a5"
                    ]
                },
                {
                    "command": [
                        "apply Trans with (monoid_unit R); auto with algebra.",
                        "VernacExtend",
                        "9a40b53f3db042c9963c5b03d321c642d3b9a6f7"
                    ]
                },
                {
                    "command": [
                        "apply Trans with (ring_mult (Z_to_group_nat_fun (ring_unit R) (Zneg p)) (monoid_unit R)); auto with algebra.",
                        "VernacExtend",
                        "39c1666363bfb1cb103de863c26ef661397059ef"
                    ]
                },
                {
                    "command": [
                        "apply Trans with (group_inverse R (nat_to_group (ring_unit R) (nat_of_P (pos_abs (ax3 ((fun (x : positive) (_ : positive -> positive) (y : positive) => (x * y)%positive) p (fun y : positive => y) p0)))))); auto with algebra.",
                        "VernacExtend",
                        "dc2ffba7c29678d292d4d4555b73c4f9e3470643"
                    ]
                },
                {
                    "command": [
                        "simpl in |- *.",
                        "VernacExtend",
                        "1b93169f4cf876d207c1fab22a2347202ab48d85"
                    ]
                },
                {
                    "command": [
                        "rewrite (fun (x y : positive) (_ : positive -> positive) => nat_of_P_mult_morphism x y).",
                        "VernacExtend",
                        "cbdd618d104d6653da48960fbdd12b6a811412fc"
                    ]
                },
                {
                    "command": [
                        "apply Trans with (ring_mult (group_inverse R (nat_to_group (ring_unit R) (nat_of_P (pos_abs (ax3 p))))) (nat_to_group (ring_unit R) (nat_of_P (pos_abs (ax3 p0))))); auto with algebra.",
                        "VernacExtend",
                        "458c722ef2b950d173614c0abaa13c6a41c05861"
                    ]
                },
                {
                    "command": [
                        "simpl in |- *.",
                        "VernacExtend",
                        "1b93169f4cf876d207c1fab22a2347202ab48d85"
                    ]
                },
                {
                    "command": [
                        "apply Trans with (group_inverse R (ring_mult (nat_to_group (ring_unit R) (nat_of_P p)) (nat_to_group (ring_unit R) (nat_of_P p0)))); auto with algebra.",
                        "VernacExtend",
                        "1c25dd575b46daa1795a91e10d8462fb310d184c"
                    ]
                },
                {
                    "command": [
                        "apply Trans with (nat_to_group (ring_unit R) (nat_of_P (pos_abs (ax3 ((fun (x : positive) (_ : positive -> positive) (y : positive) => (x * y)%positive) p (fun y : positive => y) p0))))); auto with algebra.",
                        "VernacExtend",
                        "d58d1d04ea495a0dac8ca8347dfc680fdaa20973"
                    ]
                },
                {
                    "command": [
                        "simpl in |- *.",
                        "VernacExtend",
                        "1b93169f4cf876d207c1fab22a2347202ab48d85"
                    ]
                },
                {
                    "command": [
                        "rewrite (fun (x y : positive) (_ : positive -> positive) => nat_of_P_mult_morphism x y).",
                        "VernacExtend",
                        "cbdd618d104d6653da48960fbdd12b6a811412fc"
                    ]
                },
                {
                    "command": [
                        "apply Trans with (ring_mult (group_inverse R (nat_to_group (ring_unit R) (nat_of_P (pos_abs (ax3 p))))) (group_inverse R (nat_to_group (ring_unit R) (nat_of_P (pos_abs (ax3 p0)))))); auto with algebra.",
                        "VernacExtend",
                        "b6edd9c65ef8cb30da9c5d9c4c5ec9fb20f8c1bf"
                    ]
                },
                {
                    "command": [
                        "apply Trans with (ring_mult (nat_to_group (ring_unit R) (nat_of_P p)) (nat_to_group (ring_unit R) (nat_of_P p0))); auto with algebra.",
                        "VernacExtend",
                        "48906379a75d009c7e518f178a2ccba85144c154"
                    ]
                },
                {
                    "command": [
                        "simpl in |- *.",
                        "VernacExtend",
                        "1b93169f4cf876d207c1fab22a2347202ab48d85"
                    ]
                },
                {
                    "command": [
                        "apply Trans with (group_inverse R (ring_mult (nat_to_group (ring_unit R) (nat_of_P p)) (group_inverse R (nat_to_group (ring_unit R) (nat_of_P p0))))); auto with algebra.",
                        "VernacExtend",
                        "7c5648ccab4b800a34e4cd1cea36b4e1bfd15aaa"
                    ]
                },
                {
                    "command": [
                        "apply Trans with (group_inverse R (group_inverse R (ring_mult (nat_to_group (ring_unit R) (nat_of_P p)) (nat_to_group (ring_unit R) (nat_of_P p0))))); auto with algebra.",
                        "VernacExtend",
                        "4bcc7c1d53ccc5aef975478005d21afdb627234b"
                    ]
                },
                {
                    "command": [
                        "simpl in |- *; auto with algebra.",
                        "VernacExtend",
                        "d6b9b4fa1f9e16b197ca7f795deb2bc736dbeac5"
                    ]
                },
                {
                    "command": [
                        "Defined.",
                        "VernacEndProof",
                        "88c0be54a50df4bb90276c075406fe442428eb9c"
                    ]
                }
            ]
        }
    ]
}