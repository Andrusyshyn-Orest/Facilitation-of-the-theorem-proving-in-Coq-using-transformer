{
    "filename": "Module_kernel.v",
    "coq_project": "algebra",
    "vernac_cmds": [
        [
            "Set Implicit Arguments.",
            "VernacSetOption",
            "9e84ff8896f028601d8aded48c1d4aebe60aa584"
        ],
        [
            "Unset Strict Implicit.",
            "VernacUnsetOption",
            "2842adaf6959318f2042805935c46f513bdc0348"
        ],
        [
            "Require Export Module_util.",
            "VernacRequire",
            "8c519faedcea2358fdc96ed3f9b9958055b42e7d"
        ],
        [
            "Require Export Sub_module.",
            "VernacRequire",
            "8a02e0e23e4e856279a8d0f212f822b15b306d34"
        ],
        [
            "Require Export Group_kernel.",
            "VernacRequire",
            "15f8d859978ac0ff4eccf3f62866a7a6cd603749"
        ],
        [
            "Section Def.",
            "VernacBeginSection",
            "891f679f68bab7ae72311468953cd39d353d2080"
        ],
        [
            "Variable R : RING.",
            "VernacAssumption",
            "d0eb88f51e93c9f8be4fd6395fc21fc15a70dea3"
        ],
        [
            "Variable Mod Mod2 : MODULE R.",
            "VernacAssumption",
            "e9c71cb18db08b1d2de338149d97b3fcd17abd4c"
        ],
        [
            "Variable f : Hom Mod Mod2.",
            "VernacAssumption",
            "626aa5d07e9ff97c01b97290b4dde1d6f71f4426"
        ],
        [
            "Definition Ker : submodule Mod.",
            "VernacDefinition",
            "333d0afb90fbf7fdf8d915011a45a024dbb1265e"
        ],
        [
            "apply (Build_submodule (R:=R) (M:=Mod) (submodule_subgroup:=Ker f)).",
            "VernacExtend",
            "cdb01470e25b8ec5a85b23d6faff08d6d1b82b80"
        ],
        [
            "simpl in |- *.",
            "VernacExtend",
            "1b93169f4cf876d207c1fab22a2347202ab48d85"
        ],
        [
            "intros a x H'; try assumption.",
            "VernacExtend",
            "370b83d9f9ae171483b48d5e8f2189478cebdcb9"
        ],
        [
            "apply Trans with (module_mult a (f x)); auto with algebra.",
            "VernacExtend",
            "2f86868e37f5be96272b1ffb90222c61736ed864"
        ],
        [
            "apply Trans with (module_mult a (monoid_unit (module_carrier Mod2))); auto with algebra.",
            "VernacExtend",
            "35ae879500779810d219a870ca4687e364b21131"
        ],
        [
            "Defined.",
            "VernacEndProof",
            "88c0be54a50df4bb90276c075406fe442428eb9c"
        ],
        [
            "Definition coKer : submodule Mod2.",
            "VernacDefinition",
            "508ada2880bf2911d75d3ec8aae5d31bb364b52e"
        ],
        [
            "apply (Build_submodule (R:=R) (M:=Mod2) (submodule_subgroup:=coKer f)).",
            "VernacExtend",
            "40eaaff90a44ebeb9c6fcb46413a22bcad2daf47"
        ],
        [
            "simpl in |- *.",
            "VernacExtend",
            "1b93169f4cf876d207c1fab22a2347202ab48d85"
        ],
        [
            "intros a x H'; try assumption.",
            "VernacExtend",
            "370b83d9f9ae171483b48d5e8f2189478cebdcb9"
        ],
        [
            "elim H'; intros x0 E; elim E; intros H'0 H'1; try exact H'1; clear E H'.",
            "VernacExtend",
            "3a45126c6fbdd5654ca708b1ffd338e02597a1e8"
        ],
        [
            "exists (module_mult a x0); split; [ try assumption | idtac ].",
            "VernacExtend",
            "c8f335e21f429bb654d3bea7ca0c776febcdda73"
        ],
        [
            "apply Trans with (module_mult a (f x0)); auto with algebra.",
            "VernacExtend",
            "c717ab3720092170efc29e5f1a98011966d5deec"
        ],
        [
            "Defined.",
            "VernacEndProof",
            "88c0be54a50df4bb90276c075406fe442428eb9c"
        ],
        [
            "Lemma Ker_prop : forall x : Mod, in_part x Ker -> Equal (f x) (monoid_unit Mod2).",
            "VernacStartTheoremProof",
            "6f07f814a4380452d7ade186b14d72203557c6ac"
        ],
        [
            "auto with algebra.",
            "VernacExtend",
            "2a8b2ac72ff20b5f342f7b76f72f9b539e5a10f0"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma Ker_prop_rev : forall x : Mod, Equal (f x) (monoid_unit Mod2) -> in_part x Ker.",
            "VernacStartTheoremProof",
            "a58920251d837cb8b5307f027636d99a1dc495ad"
        ],
        [
            "auto with algebra.",
            "VernacExtend",
            "2a8b2ac72ff20b5f342f7b76f72f9b539e5a10f0"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma coKer_prop : forall x : Mod, in_part (f x) coKer.",
            "VernacStartTheoremProof",
            "89ab0a905af78884983a87fb003fd32919328372"
        ],
        [
            "simpl in |- *.",
            "VernacExtend",
            "1b93169f4cf876d207c1fab22a2347202ab48d85"
        ],
        [
            "intros x; exists x; split; [ idtac | try assumption ]; auto with algebra.",
            "VernacExtend",
            "8b4489efbc976dcedfc41972d34d125bfa7503f3"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "End Def.",
            "VernacEndSegment",
            "616ad5692568c74f61a9df3a82ac03d2b7ebac01"
        ],
        [
            "Hint Resolve Ker_prop coKer_prop: algebra.",
            "VernacHints",
            "9fab7f67bb329304f5ba7eacdffae704702e4d62"
        ]
    ],
    "proofs": [
        {
            "name": "Ker",
            "line_nb": 9,
            "steps": [
                {
                    "command": [
                        "apply (Build_submodule (R:=R) (M:=Mod) (submodule_subgroup:=Ker f)).",
                        "VernacExtend",
                        "cdb01470e25b8ec5a85b23d6faff08d6d1b82b80"
                    ]
                },
                {
                    "command": [
                        "simpl in |- *.",
                        "VernacExtend",
                        "1b93169f4cf876d207c1fab22a2347202ab48d85"
                    ]
                },
                {
                    "command": [
                        "intros a x H'; try assumption.",
                        "VernacExtend",
                        "370b83d9f9ae171483b48d5e8f2189478cebdcb9"
                    ]
                },
                {
                    "command": [
                        "apply Trans with (module_mult a (f x)); auto with algebra.",
                        "VernacExtend",
                        "2f86868e37f5be96272b1ffb90222c61736ed864"
                    ]
                },
                {
                    "command": [
                        "apply Trans with (module_mult a (monoid_unit (module_carrier Mod2))); auto with algebra.",
                        "VernacExtend",
                        "35ae879500779810d219a870ca4687e364b21131"
                    ]
                },
                {
                    "command": [
                        "Defined.",
                        "VernacEndProof",
                        "88c0be54a50df4bb90276c075406fe442428eb9c"
                    ]
                }
            ]
        },
        {
            "name": "coKer",
            "line_nb": 16,
            "steps": [
                {
                    "command": [
                        "apply (Build_submodule (R:=R) (M:=Mod2) (submodule_subgroup:=coKer f)).",
                        "VernacExtend",
                        "40eaaff90a44ebeb9c6fcb46413a22bcad2daf47"
                    ]
                },
                {
                    "command": [
                        "simpl in |- *.",
                        "VernacExtend",
                        "1b93169f4cf876d207c1fab22a2347202ab48d85"
                    ]
                },
                {
                    "command": [
                        "intros a x H'; try assumption.",
                        "VernacExtend",
                        "370b83d9f9ae171483b48d5e8f2189478cebdcb9"
                    ]
                },
                {
                    "command": [
                        "elim H'; intros x0 E; elim E; intros H'0 H'1; try exact H'1; clear E H'.",
                        "VernacExtend",
                        "3a45126c6fbdd5654ca708b1ffd338e02597a1e8"
                    ]
                },
                {
                    "command": [
                        "exists (module_mult a x0); split; [ try assumption | idtac ].",
                        "VernacExtend",
                        "c8f335e21f429bb654d3bea7ca0c776febcdda73"
                    ]
                },
                {
                    "command": [
                        "apply Trans with (module_mult a (f x0)); auto with algebra.",
                        "VernacExtend",
                        "c717ab3720092170efc29e5f1a98011966d5deec"
                    ]
                },
                {
                    "command": [
                        "Defined.",
                        "VernacEndProof",
                        "88c0be54a50df4bb90276c075406fe442428eb9c"
                    ]
                }
            ]
        },
        {
            "name": "Ker_prop",
            "line_nb": 24,
            "steps": [
                {
                    "command": [
                        "auto with algebra.",
                        "VernacExtend",
                        "2a8b2ac72ff20b5f342f7b76f72f9b539e5a10f0"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "Ker_prop_rev",
            "line_nb": 27,
            "steps": [
                {
                    "command": [
                        "auto with algebra.",
                        "VernacExtend",
                        "2a8b2ac72ff20b5f342f7b76f72f9b539e5a10f0"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "coKer_prop",
            "line_nb": 30,
            "steps": [
                {
                    "command": [
                        "simpl in |- *.",
                        "VernacExtend",
                        "1b93169f4cf876d207c1fab22a2347202ab48d85"
                    ]
                },
                {
                    "command": [
                        "intros x; exists x; split; [ idtac | try assumption ]; auto with algebra.",
                        "VernacExtend",
                        "8b4489efbc976dcedfc41972d34d125bfa7503f3"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        }
    ]
}