{
    "filename": "preuve1.v",
    "coq_project": "three-gap",
    "vernac_cmds": [
        [
            "Require Export prop_fl.",
            "VernacRequire",
            "892f70822095f356aaa64e5e542bd86aca2f8a16"
        ],
        [
            "Unset Standard Proposition Elimination Names.",
            "VernacUnsetOption",
            "911574cdf91989455d0d3d11c7a9b0ca10fd1ae6"
        ],
        [
            "Section particular.",
            "VernacBeginSection",
            "8f2468dee7f809a866997830b5379b54e3134a63"
        ],
        [
            "Hypothesis alpha_irr : forall n p : Z, (alpha * IZR p)%R <> IZR n.",
            "VernacAssumption",
            "d1463fa3aed43a44449cecc557f14d23d27445ae"
        ],
        [
            "Hypothesis prop_alpha : (0 < alpha)%R /\\ (alpha < 1)%R.",
            "VernacAssumption",
            "c1ff7b84d703766b6ad195f204c74533055ea468"
        ],
        [
            "Hypothesis prop_N : forall N : nat, N >= 2.",
            "VernacAssumption",
            "3b14420983b72ff2e11078790793f33189cdc7e5"
        ],
        [
            "Definition M (N : nat) := first N + last N.",
            "VernacDefinition",
            "0349269a44cbea4defa40ab8e9649c6d8ef4b3e3"
        ],
        [
            "Lemma inter31a : forall N n : nat, 0 < n -> n < last (M N) -> after (M N) n = n + first (M N).",
            "VernacStartTheoremProof",
            "a2f9e2ab23bb9d35c329ad58f6a379d088f0e9d8"
        ],
        [
            "intros; apply (sym_equal (x:=n + first (M N)) (y:=after (M N) n)); apply (tech_after alpha_irr (M N) n (n + first (M N)) H); auto with arith real.",
            "VernacExtend",
            "f1e3d08b07d7b17a19a9f7bfc05433aae5f8427e"
        ],
        [
            "apply (lt_le_trans n (last (M N)) (M N) H0 (last_N01 (M N))).",
            "VernacExtend",
            "74113db4106611fd8c068bb113880899b6ebf5bd"
        ],
        [
            "unfold M at 2 in |- *; rewrite (last_eq_M_N alpha_irr prop_alpha prop_N N (M N)); auto with arith real; rewrite (first_eq_M_N alpha_irr prop_alpha prop_N N (M N)); auto with arith real.",
            "VernacExtend",
            "6a58de20ce2b84d4cdddde88a267dccd1cc4b92d"
        ],
        [
            "rewrite (plus_comm (first (M N)) (last (M N))); apply (plus_lt_compat_r n (last (M N)) (first (M N)) H0).",
            "VernacExtend",
            "a28c5cbd6ed3f0290f54cc0c556f914be6d9c5a1"
        ],
        [
            "fold (frac_part_n_alpha (n + first (M N)) > frac_part_n_alpha n)%R in |- *; apply (Rnot_le_lt (frac_part_n_alpha (n + first (M N))) (frac_part_n_alpha n)); red in |- *; intro; generalize (Rplus_le_compat_l (- frac_part_n_alpha (first (M N))) (frac_part_n_alpha (n + first (M N))) (frac_part_n_alpha n) H1); rewrite (Rplus_comm (- frac_part_n_alpha (first (M N))) (frac_part_n_alpha (n + first (M N)))); rewrite (Rplus_comm (- frac_part_n_alpha (first (M N))) (frac_part_n_alpha n)) ; fold (frac_part_n_alpha (n + first (M N)) - frac_part_n_alpha (first (M N)))%R in |- *; fold (frac_part_n_alpha n - frac_part_n_alpha (first (M N)))%R in |- *; cut (frac_part_n_alpha (n + first (M N)) >= frac_part_n_alpha (first (M N)))%R.",
            "VernacExtend",
            "866cf8a98c817f9d957edf40cc016f1de8bdd191"
        ],
        [
            "intro; unfold frac_part_n_alpha at 1 2 in |- *; unfold frac_part_n_alpha in H2; rewrite <- (Rminus_fp1 (INR (n + first (M N)) * alpha) (INR (first (M N)) * alpha) H2) ; rewrite (plus_INR n (first (M N))); rewrite (Rmult_comm (INR n + INR (first (M N))) alpha); rewrite (Rmult_plus_distr_l alpha (INR n) (INR (first (M N)))); rewrite (Rmult_comm alpha (INR (first (M N)))); unfold Rminus at 1 in |- *; rewrite (Rplus_assoc (alpha * INR n) (INR (first (M N)) * alpha) (- (INR (first (M N)) * alpha))); rewrite (Rplus_opp_r (INR (first (M N)) * alpha)).",
            "VernacExtend",
            "79684896ad295061a9e9597d08462614098bcddd"
        ],
        [
            "elim (Rplus_ne (alpha * INR n)); intros a b; rewrite a; clear a b; rewrite (Rmult_comm alpha (INR n)); fold (frac_part_n_alpha n) in |- *; intro; cut (0 < frac_part_n_alpha (first (M N)))%R.",
            "VernacExtend",
            "b2bf38a04e998385c1667a7cb0153283b2efe621"
        ],
        [
            "intro; generalize (tech_Rgt_minus (frac_part_n_alpha n) (frac_part_n_alpha (first (M N))) H4); clear H4 H1 H2; intro; unfold Rgt in H1; generalize (Rgt_not_le (frac_part_n_alpha n) (frac_part_n_alpha n - frac_part_n_alpha (first (M N))) H1); auto with arith real.",
            "VernacExtend",
            "6bfb77dfb3e650c7cfaaf82e4d5ea0ffd3353068"
        ],
        [
            "fold (frac_part_n_alpha (first (M N)) > 0)%R in |- *; apply (fp_first_R0 alpha_irr prop_N (M N)).",
            "VernacExtend",
            "e169e5a618fce26c9de8a1793d62c4adebcdff96"
        ],
        [
            "unfold Rge in |- *; unfold Rgt in |- *; cut ((frac_part_n_alpha (first (M N)) < frac_part_n_alpha (n + first (M N)))%R \\/ frac_part_n_alpha (first (M N)) = frac_part_n_alpha (n + first (M N))).",
            "VernacExtend",
            "a2547ab32a62c4a3f5f7ad358b2f3ac63b3757b9"
        ],
        [
            "intro; elim H2; intro.",
            "VernacExtend",
            "384707c7c85dc8c066104724fd997dc455dd8eef"
        ],
        [
            "left; auto with arith real.",
            "VernacExtend",
            "a4f964796383376ea58dd3f559710e63d39725f7"
        ],
        [
            "right; auto with arith real.",
            "VernacExtend",
            "2c284aebcd392749b98886bb7fd97ab5e26d813a"
        ],
        [
            "fold (frac_part_n_alpha (first (M N)) <= frac_part_n_alpha (n + first (M N)))%R in |- *; apply (first_n (M N) (n + first (M N))); auto with arith real; generalize (plus_lt_compat_r n (last (M N)) (first (M N)) H0); intro; unfold M at 2 in |- *; rewrite (first_eq_M_N alpha_irr prop_alpha prop_N N (M N)); auto with arith real; rewrite (last_eq_M_N alpha_irr prop_alpha prop_N N (M N)); auto with arith real; rewrite (plus_comm (first (M N)) (last (M N))); assumption.",
            "VernacExtend",
            "6ef0dc9cd1e7c8a3580443b93b91af2183e7eb58"
        ],
        [
            "intro; elim H1; intros; elim H2; intros; elim H4; intros; elim H6; intros; clear H6 H4 H2 H1.",
            "VernacExtend",
            "0a50418603bfda6493ef0cc8a457d7d1302e0a93"
        ],
        [
            "elim (le_or_lt x n); intro.",
            "VernacExtend",
            "16ecaf5cd6422185624e3d2700b24ac6c9ce27f3"
        ],
        [
            "generalize (Ropp_lt_gt_contravar (frac_part_n_alpha n) (frac_part_n_alpha x) H7); intro; generalize (Rplus_gt_compat_l (frac_part_n_alpha (n + first (M N))) (- frac_part_n_alpha n) (- frac_part_n_alpha x) H2); fold (frac_part_n_alpha (n + first (M N)) - frac_part_n_alpha n)%R in |- *; fold (frac_part_n_alpha (n + first (M N)) - frac_part_n_alpha x)%R in |- *; fold (frac_part_n_alpha (n + first (M N)) > frac_part_n_alpha x)%R in H8; generalize (Rgt_ge (frac_part_n_alpha (n + first (M N))) (frac_part_n_alpha x) H8); intro; unfold frac_part_n_alpha in H4; unfold frac_part_n_alpha in |- *; rewrite <- (Rminus_fp1 (INR (n + first (M N)) * alpha) (INR x * alpha) H4); fold (frac_part_n_alpha x > frac_part_n_alpha n)%R in H7; generalize (Rgt_trans (frac_part_n_alpha (n + first (M N))) (frac_part_n_alpha x) (frac_part_n_alpha n) H8 H7); intro; generalize (Rgt_ge (frac_part_n_alpha (n + first (M N))) (frac_part_n_alpha n) H6); intro; unfold frac_part_n_alpha in H9; rewrite <- (Rminus_fp1 (INR (n + first (M N)) * alpha) (INR n * alpha) H9); rewrite (plus_INR n (first (M N))); rewrite (Rmult_comm (INR n + INR (first (M N))) alpha); rewrite (Rmult_plus_distr_l alpha (INR n) (INR (first (M N)))); rewrite (Rmult_comm alpha (INR n)); unfold Rminus at 1 in |- *; rewrite (Rplus_comm (INR n * alpha) (alpha * INR (first (M N)))); rewrite (Rplus_assoc (alpha * INR (first (M N))) (INR n * alpha) (- (INR n * alpha))); rewrite (Rplus_opp_r (INR n * alpha)); elim (Rplus_ne (alpha * INR (first (M N)))); intros a b; rewrite a; clear a b; rewrite (Rmult_comm alpha (INR (first (M N)))); fold (frac_part_n_alpha (first (M N))) in |- *; unfold Rminus in |- *; rewrite (Rplus_assoc (INR (first (M N)) * alpha) (INR n * alpha) (- (INR x * alpha))); rewrite (Rmult_comm (INR (first (M N))) alpha); rewrite (Rmult_comm (INR n) alpha); rewrite <- (Ropp_mult_distr_l_reverse (INR x) alpha); rewrite (Rmult_comm (- INR x) alpha); rewrite <- (Rmult_plus_distr_l alpha (INR n) (- INR x)); rewrite <- (Rmult_plus_distr_l alpha (INR (first (M N))) (INR n + - INR x)); fold (INR n - INR x)%R in |- *; rewrite <- (minus_INR n x H1); rewrite <- (plus_INR (first (M N)) (n - x)); rewrite (Rmult_comm alpha (INR (first (M N) + (n - x)))); fold (frac_part_n_alpha (first (M N) + (n - x))) in |- *; intro; clear H2 H4 H6 H9; cut (0 < first (M N) + (n - x)).",
            "VernacExtend",
            "0b8d0aebc78234733021ad34879137d1a7bdc71a"
        ],
        [
            "cut (first (M N) + (n - x) < M N).",
            "VernacExtend",
            "0803c3954cf9c74f733356b9ce14d948487c132e"
        ],
        [
            "intros; generalize (first_n (M N) (first (M N) + (n - x)) (prop_N (M N)) H4 H2 prop_alpha); intro; clear H2 H4; unfold Rgt in H10; generalize (Rgt_not_le (frac_part_n_alpha (first (M N))) (frac_part_n_alpha (first (M N) + (n - x))) H10); auto with arith real.",
            "VernacExtend",
            "bf002d078475a6c1f193f367fe03e4f945b4ff40"
        ],
        [
            "unfold M at 2 in |- *; rewrite (first_eq_M_N alpha_irr prop_alpha prop_N N (M N)); auto with arith real.",
            "VernacExtend",
            "e4b32de4a8e55bd2ca6f306d947d611ab58bd776"
        ],
        [
            "apply (plus_lt_compat_l (n - x) (last N) (first (M N))); rewrite (last_eq_M_N alpha_irr prop_alpha prop_N N (M N)); auto with arith real.",
            "VernacExtend",
            "8c2376f177cc533fd51a8968dad12891ce2aaae3"
        ],
        [
            "apply (lt_minus_p n (last (M N)) x H0).",
            "VernacExtend",
            "cd661758311855f1457a39a4b6fe289b3d3a1639"
        ],
        [
            "apply (lt_O_plus (first (M N)) (n - x) (first_0 (M N) (prop_N (M N)))).",
            "VernacExtend",
            "70e1f0c99290f47f43493fd1bf80950c15488b9c"
        ],
        [
            "generalize (Rplus_lt_compat_l (- frac_part_n_alpha n) (frac_part_n_alpha x) (frac_part_n_alpha (n + first (M N))) H8); rewrite (Rplus_comm (- frac_part_n_alpha n) (frac_part_n_alpha x)); rewrite (Rplus_comm (- frac_part_n_alpha n) (frac_part_n_alpha (n + first (M N)))) ; fold (frac_part_n_alpha x - frac_part_n_alpha n)%R in |- *; fold (frac_part_n_alpha (n + first (M N)) - frac_part_n_alpha n)%R in |- *; fold (frac_part_n_alpha x > frac_part_n_alpha n)%R in H7; generalize (Rgt_ge (frac_part_n_alpha x) (frac_part_n_alpha n) H7); intro; fold (frac_part_n_alpha (n + first (M N)) > frac_part_n_alpha x)%R in H8; generalize (Rgt_trans (frac_part_n_alpha (n + first (M N))) (frac_part_n_alpha x) (frac_part_n_alpha n) H8 H7); intro; generalize (Rgt_ge (frac_part_n_alpha (n + first (M N))) (frac_part_n_alpha n) H4); intro; unfold frac_part_n_alpha in H2, H6; unfold frac_part_n_alpha in |- *; rewrite <- (Rminus_fp1 (INR x * alpha) (INR n * alpha) H2); rewrite <- (Rminus_fp1 (INR (n + first (M N)) * alpha) (INR n * alpha) H6); rewrite (plus_INR n (first (M N))); rewrite (Rmult_comm (INR n + INR (first (M N))) alpha); rewrite (Rmult_plus_distr_l alpha (INR n) (INR (first (M N)))); rewrite (Rmult_comm alpha (INR n)); rewrite (Rmult_comm alpha (INR (first (M N)))); unfold Rminus at 2 in |- *; rewrite (Rplus_comm (INR n * alpha) (INR (first (M N)) * alpha)); rewrite (Rplus_assoc (INR (first (M N)) * alpha) (INR n * alpha) (- (INR n * alpha))); rewrite (Rplus_opp_r (INR n * alpha)); elim (Rplus_ne (INR (first (M N)) * alpha)); intros a b; rewrite a; clear a b; fold (frac_part_n_alpha (first (M N))) in |- *; clear H2 H4 H6; unfold Rminus in |- *; rewrite (Rmult_comm (INR x) alpha); rewrite <- (Ropp_mult_distr_l_reverse (INR n) alpha); rewrite (Rmult_comm (- INR n) alpha); rewrite <- (Rmult_plus_distr_l alpha (INR x) (- INR n)); fold (INR x - INR n)%R in |- *; rewrite (Rmult_comm alpha (INR x - INR n)); generalize (lt_le_weak n x H1); intro; rewrite <- (minus_INR x n H2); fold (frac_part_n_alpha (x - n)) in |- *; intro; cut (0 < x - n).",
            "VernacExtend",
            "d1b6ec5e5ff46dd61a68c051975663a7fde11451"
        ],
        [
            "intro; cut (x - n < M N).",
            "VernacExtend",
            "d18d56fef244fb100890cd21792d689467fdb4ca"
        ],
        [
            "intro; generalize (first_n (M N) (x - n) (prop_N (M N)) H6 H9 prop_alpha); intro; clear H9 H6; generalize (Rgt_not_le (frac_part_n_alpha (first (M N))) (frac_part_n_alpha (x - n)) H4); auto with arith real.",
            "VernacExtend",
            "a7bbcd23edd06e05db3c09615a7a4baaa54af511"
        ],
        [
            "apply (lt_minus_p x (M N) n H5).",
            "VernacExtend",
            "a5d5eaab248972bda77164fb18d03c9c9c761ac9"
        ],
        [
            "apply (lt_minus2 n x H1).",
            "VernacExtend",
            "7c05b9821179e2e9909e0b4bf07909178a123a09"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma inter31b : forall N n : nat, last (M N) <= n -> n < M N -> after (M N) n = n - last (M N).",
            "VernacStartTheoremProof",
            "72891828e72042f6034e0934702bd8b6602da846"
        ],
        [
            "intros; elim (le_lt_or_eq (last (M N)) n H); intro; clear H.",
            "VernacExtend",
            "b465fa7a0db3f80ce6f5b6d852c0f651109d73b0"
        ],
        [
            "apply (sym_equal (x:=n - last (M N)) (y:=after (M N) n)); apply (tech_after alpha_irr (M N) n (n - last (M N))); auto with arith real.",
            "VernacExtend",
            "9aa5b8ef640c2db2a9a78fc4d34227068f8d5197"
        ],
        [
            "apply (lt_trans 0 (last (M N)) n (last_0 (M N) (prop_N (M N))) H1).",
            "VernacExtend",
            "2bad506a32eacd6b5bc07c76dc2d43681cd8d392"
        ],
        [
            "apply (lt_minus_p n (M N) (last (M N)) H0).",
            "VernacExtend",
            "56091f71b71f4c97e3375b3bb79394337db2516d"
        ],
        [
            "cut (frac_part_n_alpha n < frac_part_n_alpha n - frac_part_n_alpha (last (M N)) + 1)%R.",
            "VernacExtend",
            "6bb6dc0b8558e985ad23745e664bcb9fd3539843"
        ],
        [
            "intro; unfold frac_part_n_alpha in H; generalize H; clear H; rewrite <- (Rminus_fp2 (INR n * alpha) (INR (last (M N)) * alpha)).",
            "VernacExtend",
            "e4ea365ccb77982513887e53858a660621a73ea0"
        ],
        [
            "fold (frac_part_n_alpha n) in |- *; rewrite (Rmult_comm (INR n) alpha); unfold Rminus in |- *; rewrite <- (Ropp_mult_distr_l_reverse (INR (last (M N))) alpha); rewrite (Rmult_comm (- INR (last (M N))) alpha); rewrite <- (Rmult_plus_distr_l alpha (INR n) (- INR (last (M N)))); fold (INR n - INR (last (M N)))%R in |- *; rewrite <- (minus_INR n (last (M N)) (lt_le_weak (last (M N)) n H1)); rewrite (Rmult_comm alpha (INR (n - last (M N)))); fold (frac_part_n_alpha (n - last (M N))) in |- *; trivial.",
            "VernacExtend",
            "a9235cc8d2658249876ebb9d23106b4fac624a91"
        ],
        [
            "fold (frac_part_n_alpha n) in |- *; fold (frac_part_n_alpha (last (M N))) in |- *; generalize (last_n (M N) n (prop_N (M N)) (lt_trans 0 (last (M N)) n (last_0 (M N) (prop_N (M N))) H1) H0 prop_alpha); intro; unfold Rle in H; elim H; intro; auto with arith real.",
            "VernacExtend",
            "cfab28e57c8dd0686bec615b270adbea4e2e609b"
        ],
        [
            "generalize (contra_tech_fp_alp_irr alpha_irr prop_alpha (last (M N)) n (lt_not_eq (last (M N)) n H1)); intro; elimtype False; auto with arith real.",
            "VernacExtend",
            "e843b94101228dcc0a20723984514b01488f049d"
        ],
        [
            "unfold Rminus in |- *; rewrite (Rplus_assoc (frac_part_n_alpha n) (- frac_part_n_alpha (last (M N))) 1) ; rewrite (Rplus_comm (- frac_part_n_alpha (last (M N))) 1); fold (1 - frac_part_n_alpha (last (M N)))%R in |- *; elim (Rplus_ne (frac_part_n_alpha n)); intros a b; pattern (frac_part_n_alpha n) at 1 in |- *; rewrite <- a; clear a b; apply (Rplus_lt_compat_l (frac_part_n_alpha n) 0 (1 - frac_part_n_alpha (last (M N)))); fold (1 - frac_part_n_alpha (last (M N)) > 0)%R in |- *; apply (Rgt_minus 1 (frac_part_n_alpha (last (M N)))); unfold Rgt in |- *; unfold frac_part_n_alpha in |- *; elim (base_fp (INR (last (M N)) * alpha)); intros; assumption.",
            "VernacExtend",
            "c3ac2d8c6c39eb64c1924cf597bc556d91e5dc78"
        ],
        [
            "intro; elim H; intros; elim H2; intros; elim H4; intros; elim H6; intros; clear H H2 H4 H6.",
            "VernacExtend",
            "d6fd511b1b07e12f6f6acb2477f8a367f99a794d"
        ],
        [
            "elim (le_or_lt n x); intro.",
            "VernacExtend",
            "7c40bfef9094cbda17ae9103448928b571150e7c"
        ],
        [
            "generalize (Rplus_lt_compat_l (- frac_part_n_alpha (n - last (M N))) (frac_part_n_alpha n) (frac_part_n_alpha x) H7); intro; generalize (Rplus_lt_compat_l 1 (- frac_part_n_alpha (n - last (M N)) + frac_part_n_alpha n) (- frac_part_n_alpha (n - last (M N)) + frac_part_n_alpha x) H2); clear H2; rewrite (Rplus_comm 1 (- frac_part_n_alpha (n - last (M N)) + frac_part_n_alpha n)) ; rewrite (Rplus_comm 1 (- frac_part_n_alpha (n - last (M N)) + frac_part_n_alpha x)) ; rewrite (Rplus_comm (- frac_part_n_alpha (n - last (M N))) (frac_part_n_alpha n)) ; rewrite (Rplus_comm (- frac_part_n_alpha (n - last (M N))) (frac_part_n_alpha x)) ; fold (frac_part_n_alpha n - frac_part_n_alpha (n - last (M N)))%R in |- *; fold (frac_part_n_alpha x - frac_part_n_alpha (n - last (M N)))%R in |- *; unfold frac_part_n_alpha in |- *; rewrite <- (Rminus_fp2 (INR n * alpha) (INR (n - last (M N)) * alpha)).",
            "VernacExtend",
            "d105300af0bdd41a411ebf3fc41f0ce915b1ec8d"
        ],
        [
            "rewrite <- (Rminus_fp2 (INR x * alpha) (INR (n - last (M N)) * alpha)).",
            "VernacExtend",
            "c7d4d7127f44c0a6fc3f8567d19e4725b5fbdb8f"
        ],
        [
            "rewrite (minus_INR n (last (M N)) (lt_le_weak (last (M N)) n H1)); unfold Rminus in |- *; rewrite (Rmult_comm (INR n + - INR (last (M N))) alpha); rewrite (Rmult_plus_distr_l alpha (INR n) (- INR (last (M N)))); rewrite (Ropp_plus_distr (alpha * INR n) (alpha * - INR (last (M N)))); rewrite <- (Rplus_assoc (INR n * alpha) (- (alpha * INR n)) (- (alpha * - INR (last (M N))))); rewrite (Rmult_comm (INR n) alpha); rewrite (Rplus_opp_r (alpha * INR n)); elim (Rplus_ne (- (alpha * - INR (last (M N))))); intros a b; rewrite b; clear a b; rewrite (Rmult_comm alpha (- INR (last (M N)))); rewrite <- (Ropp_mult_distr_l_reverse (- INR (last (M N))) alpha); rewrite (Ropp_involutive (INR (last (M N)))); fold (frac_part_n_alpha (last (M N))) in |- *; rewrite <- (Rplus_assoc (INR x * alpha) (- (alpha * INR n)) (INR (last (M N)) * alpha)) ; rewrite (Rmult_comm alpha (INR n)); rewrite <- (Ropp_mult_distr_l_reverse (INR n) alpha); rewrite (Rmult_comm (- INR n) alpha); rewrite (Rmult_comm (INR x) alpha); rewrite <- (Rmult_plus_distr_l alpha (INR x) (- INR n)); fold (INR x - INR n)%R in |- *; rewrite <- (minus_INR x n H); rewrite (Rmult_comm (INR (last (M N))) alpha); rewrite <- (Rmult_plus_distr_l alpha (INR (x - n)) (INR (last (M N)))); rewrite <- (plus_INR (x - n) (last (M N))); rewrite (Rmult_comm alpha (INR (x - n + last (M N)))); fold (frac_part_n_alpha (x - n + last (M N))) in |- *; intro; cut (0 < x - n + last (M N)).",
            "VernacExtend",
            "bab22d9b7bc553a75de4253d2db6df5309c27e8a"
        ],
        [
            "intro; cut (x - n + last (M N) < M N).",
            "VernacExtend",
            "7abf1000c281163b2b860d4544ec928a471b96c0"
        ],
        [
            "intro; generalize (last_n (M N) (x - n + last (M N)) (prop_N (M N)) H4 H6 prop_alpha); intro; clear H4 H6; generalize (Rgt_not_le (frac_part_n_alpha (x - n + last (M N))) (frac_part_n_alpha (last (M N))) H2); intro; elimtype False; auto with arith real.",
            "VernacExtend",
            "f83e5c2b2c15943ab3ec93cf9f33ab827de53a82"
        ],
        [
            "apply (tech_inter31b (last (M N)) n x (M N) H1 H H5).",
            "VernacExtend",
            "ad3c9974cefcb80d135a92b074eb57de1f7a413a"
        ],
        [
            "rewrite plus_comm; apply (lt_O_plus (last (M N)) (x - n) (last_0 (M N) (prop_N (M N)))).",
            "VernacExtend",
            "7d86161a22c2b3b7f5c8a583a577043c3e207f15"
        ],
        [
            "fold (frac_part_n_alpha x) in |- *; fold (frac_part_n_alpha (n - last (M N))) in |- *; assumption.",
            "VernacExtend",
            "f8c797577b56903839244f5c3f735b7c72f47e65"
        ],
        [
            "fold (frac_part_n_alpha n) in |- *; fold (frac_part_n_alpha (n - last (M N))) in |- *; apply (Rlt_trans (frac_part_n_alpha n) (frac_part_n_alpha x) (frac_part_n_alpha (n - last (M N))) H7 H8).",
            "VernacExtend",
            "caf1b16f5e0d2a462a66f1e3aa653c139121fb55"
        ],
        [
            "generalize (Ropp_lt_gt_contravar (frac_part_n_alpha x) (frac_part_n_alpha (n - last (M N))) H8); unfold Rgt in |- *; intro; generalize (Rplus_lt_compat_l (frac_part_n_alpha n) (- frac_part_n_alpha (n - last (M N))) (- frac_part_n_alpha x) H2); clear H2; fold (frac_part_n_alpha n - frac_part_n_alpha (n - last (M N)))%R in |- *; fold (frac_part_n_alpha n - frac_part_n_alpha x)%R in |- *; intro; generalize (Rplus_lt_compat_l 1 (frac_part_n_alpha n - frac_part_n_alpha (n - last (M N))) (frac_part_n_alpha n - frac_part_n_alpha x) H2); clear H2; rewrite (Rplus_comm 1 (frac_part_n_alpha n - frac_part_n_alpha (n - last (M N)))) ; rewrite (Rplus_comm 1 (frac_part_n_alpha n - frac_part_n_alpha x)); unfold frac_part_n_alpha in |- *; rewrite <- (Rminus_fp2 (INR n * alpha) (INR (n - last (M N)) * alpha)).",
            "VernacExtend",
            "d5b90f75143c9f0cc8fe68292be4033ef1a78aec"
        ],
        [
            "rewrite <- (Rminus_fp2 (INR n * alpha) (INR x * alpha)).",
            "VernacExtend",
            "63f361a0f721d0165dd1787a5272d135282c019f"
        ],
        [
            "rewrite (Rmult_comm (INR n) alpha); unfold Rminus at 2 in |- *; rewrite <- (Ropp_mult_distr_l_reverse (INR x) alpha); rewrite (Rmult_comm (- INR x) alpha); rewrite <- (Rmult_plus_distr_l alpha (INR n) (- INR x)); fold (INR n - INR x)%R in |- *; rewrite <- (minus_INR n x (lt_le_weak x n H)); rewrite (Rmult_comm alpha (INR (n - x))); fold (frac_part_n_alpha (n - x)) in |- *; rewrite (minus_INR n (last (M N)) (lt_le_weak (last (M N)) n H1)); unfold Rminus in |- *; rewrite (Rmult_comm (INR n + - INR (last (M N))) alpha); rewrite (Rmult_plus_distr_l alpha (INR n) (- INR (last (M N)))); rewrite (Ropp_plus_distr (alpha * INR n) (alpha * - INR (last (M N)))); rewrite <- (Rplus_assoc (alpha * INR n) (- (alpha * INR n)) (- (alpha * - INR (last (M N))))); rewrite (Rplus_opp_r (alpha * INR n)); elim (Rplus_ne (- (alpha * - INR (last (M N))))); intros a b; rewrite b; clear a b; rewrite (Rmult_comm alpha (- INR (last (M N)))); rewrite <- (Ropp_mult_distr_l_reverse (- INR (last (M N))) alpha); rewrite (Ropp_involutive (INR (last (M N)))); fold (frac_part_n_alpha (last (M N))) in |- *; intro; cut (0 < n - x).",
            "VernacExtend",
            "d93e2190d74e9c5e3897afafccdf8ac2bea7e674"
        ],
        [
            "intro; cut (n - x < M N).",
            "VernacExtend",
            "8ec3f428105cfd6d74eab4b2b34db279ed8a5f10"
        ],
        [
            "intro; generalize (last_n (M N) (n - x) (prop_N (M N)) H4 H6 prop_alpha); intro; generalize (Rgt_not_le (frac_part_n_alpha (n - x)) (frac_part_n_alpha (last (M N))) H2); intro; elimtype False; auto with arith real.",
            "VernacExtend",
            "85f284318c61d3475a273e9b4a18cd2da1e99034"
        ],
        [
            "apply (lt_minus_p n (M N) x H0).",
            "VernacExtend",
            "bc257f001d595463fd103dc96115c0e196ae4ce0"
        ],
        [
            "apply (lt_minus2 x n H).",
            "VernacExtend",
            "d61f36af386cc7afa1836e9d3be5342b5dc48882"
        ],
        [
            "fold (frac_part_n_alpha n) in |- *; fold (frac_part_n_alpha x) in |- *; assumption.",
            "VernacExtend",
            "ed4dd012dc831394efc8b4ef3feb420a76490272"
        ],
        [
            "fold (frac_part_n_alpha n) in |- *; fold (frac_part_n_alpha (n - last (M N))) in |- *; apply (Rlt_trans (frac_part_n_alpha n) (frac_part_n_alpha x) (frac_part_n_alpha (n - last (M N))) H7 H8).",
            "VernacExtend",
            "caf1b16f5e0d2a462a66f1e3aa653c139121fb55"
        ],
        [
            "rewrite <- H1; rewrite <- (minus_n_n (last (M N))); apply (after_last prop_alpha prop_N (M N)).",
            "VernacExtend",
            "96feb4478c4f310466782662c946c139bc0338d2"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma tech1 : forall N n : nat, N - first N <= n -> n < last N -> (frac_part_n_alpha n < frac_part_n_alpha (n + first N - last N))%R.",
            "VernacStartTheoremProof",
            "d6e572545118a4ea107e0e005188bc49f7c2afd3"
        ],
        [
            "intros; cut (frac_part_n_alpha n < frac_part_n_alpha (n + first N))%R.",
            "VernacExtend",
            "54cdab47b7abdabfa20e4e0082b22ec3309a0fb7"
        ],
        [
            "intro; cut (frac_part_n_alpha (n + first N) < frac_part_n_alpha (n + first N - last N))%R.",
            "VernacExtend",
            "3479141df367edd59182924bd4e9453d15a65310"
        ],
        [
            "intro; apply (Rlt_trans (frac_part_n_alpha n) (frac_part_n_alpha (n + first N)) (frac_part_n_alpha (n + first N - last N)) H1 H2).",
            "VernacExtend",
            "3f31de40e4a6ebf2af279f6f8a44b1c02a991531"
        ],
        [
            "cut (0 < n + first N).",
            "VernacExtend",
            "8ee841421d22195a654ab0b07e046c36adb1dd5c"
        ],
        [
            "cut (n + first N < M N).",
            "VernacExtend",
            "7b34bfe3bb63ff359c45822a6b7c44e776a83885"
        ],
        [
            "intros; apply (tech_after_lt (M N) (n + first N) (n + first N - last N) H3 H2).",
            "VernacExtend",
            "5606c14a5e8d0204fcb11d1ae969d6d152df8b87"
        ],
        [
            "apply (lt_minus_not (last N) (n + first N)).",
            "VernacExtend",
            "9668763a4c2547172624548c044b9eddc9c7e791"
        ],
        [
            "generalize (le_minus_plus N (first N) n H); intro; apply (lt_le_trans (last N) N (n + first N) (last_N N (prop_N N)) H4).",
            "VernacExtend",
            "55e011643948f7e01b67f594807c4d57d2114bb6"
        ],
        [
            "rewrite (last_eq_M_N alpha_irr prop_alpha prop_N N (M N)); auto with arith real.",
            "VernacExtend",
            "9ec47d64d3cd893537b2d8af00788504a4e1b464"
        ],
        [
            "generalize H2; clear H2; rewrite (first_eq_M_N alpha_irr prop_alpha prop_N N (M N)); auto with arith real.",
            "VernacExtend",
            "268d4a759981cc7a99572c5ef0b5088b34828656"
        ],
        [
            "intro; cut (last (M N) <= n + first (M N)).",
            "VernacExtend",
            "7b5e0af4202cb2f4044473d5cce29a171ce1693f"
        ],
        [
            "intro; apply (inter31b N (n + first (M N)) H4 H2).",
            "VernacExtend",
            "69f08fa698fd918acca3e1fb52b6e114cf174421"
        ],
        [
            "rewrite <- (last_eq_M_N alpha_irr prop_alpha prop_N N (M N)); auto with arith real.",
            "VernacExtend",
            "c7b4247fc292b348b47b5def081c518cfcb1780a"
        ],
        [
            "rewrite <- (first_eq_M_N alpha_irr prop_alpha prop_N N (M N)); auto with arith real.",
            "VernacExtend",
            "edcef7b61df3912090f02072c6a1845b5f6fd9a7"
        ],
        [
            "generalize (le_minus_plus N (first N) n H); intro; apply (le_trans (last N) N (n + first N) (last_N01 N) H4).",
            "VernacExtend",
            "48356526b431ce4be089902d1472da314db268ad"
        ],
        [
            "unfold M in |- *; rewrite (plus_comm (first N) (last N)); apply (plus_lt_compat_r n (last N) (first N) H0).",
            "VernacExtend",
            "7f14dbc042a00737f113ff275bbb42173446f014"
        ],
        [
            "generalize (le_minus_plus N (first N) n H); intro; cut (0 < N).",
            "VernacExtend",
            "bc32faa2b24381272f80b5b02973e8a1c1744465"
        ],
        [
            "intro; apply (lt_le_trans 0 N (n + first N) H3 H2).",
            "VernacExtend",
            "4fef8e5663ff8e96fd400603100e7f75da953099"
        ],
        [
            "apply (arith_2_0 N (prop_N N)).",
            "VernacExtend",
            "13d417b060a8e4e31902a1700af59b19853e8244"
        ],
        [
            "cut (0 < n).",
            "VernacExtend",
            "f49a0c48aeae35f59abfa199ddc34fc7e16c80ce"
        ],
        [
            "cut (n < M N).",
            "VernacExtend",
            "bc90301801e32a4ab88ad8def6486f5b094f2c19"
        ],
        [
            "intros; apply (tech_after_lt (M N) n (n + first N) H2 H1).",
            "VernacExtend",
            "384b77795b76190bf9387f819153708ab31d3161"
        ],
        [
            "generalize (lt_O_plus n (first N) H2); intro; apply Compare.not_eq_sym; red in |- *; intro; apply (lt_not_eq 0 (n + first N) H3 H4).",
            "VernacExtend",
            "e076895c8ea5d2d56364910a65d3d676daa137dc"
        ],
        [
            "rewrite (first_eq_M_N alpha_irr prop_alpha prop_N N (M N)); auto with arith real.",
            "VernacExtend",
            "b8bc312c64c1d11308332cc45310a47e564ddfa8"
        ],
        [
            "generalize H0; rewrite (last_eq_M_N alpha_irr prop_alpha prop_N N (M N)); auto with arith real; clear H0; intro; apply (inter31a N n H2 H0).",
            "VernacExtend",
            "4b1f657071e1c12e94f4603157755862291ab7bc"
        ],
        [
            "generalize (lt_trans n (last N) N H0 (last_N N (prop_N N))); intro; unfold M in |- *; cut (N <= first N + last N).",
            "VernacExtend",
            "768a3c5dd6db22a09e32de211a1ab2d4ce8a7d14"
        ],
        [
            "intro; apply (lt_le_trans n N (first N + last N) H1 H2).",
            "VernacExtend",
            "8c559ff41c37a5014e74ef8a823a288ee19082ff"
        ],
        [
            "apply (le_N_M alpha_irr prop_alpha prop_N N (M N)); auto with arith real.",
            "VernacExtend",
            "58f14c5962b3063f57982a103120e72698bf6201"
        ],
        [
            "apply (lt_le_trans 0 (N - first N) n (lt_minus2 (first N) N (first_N N (prop_N N))) H).",
            "VernacExtend",
            "80074a8c5da422b508bccb0dbe3f65e95141da43"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma tech_suc_N : forall N n : nat, 0 < n -> n < N -> forall k : nat, 0 < k -> k < N -> (frac_part_n_alpha n < frac_part_n_alpha k)%R -> frac_part_n_alpha k <> frac_part_n_alpha (after N n) -> (frac_part_n_alpha (after N n) < frac_part_n_alpha k)%R.",
            "VernacStartTheoremProof",
            "8db8f5a8f22953c0ce33ecceca22891bf396d71a"
        ],
        [
            "unfold after in |- *; intros; generalize H4; clear H4; case (exist_after_M (frac_part_n_alpha n) (P1 n) (P2 n) N); intro.",
            "VernacExtend",
            "b087b4eb5fe61e45a66756fc0f469017f323c247"
        ],
        [
            "elim s; intros x y H4; clear s; elim y; intros; clear y; unfold Rgt in H6; cut (0 <= k).",
            "VernacExtend",
            "0c7843812b8ada48c04b9a0623e99c664302bcc5"
        ],
        [
            "elim H6; intros; elim H8; intros; generalize (H11 k H9 H2 H3); unfold Rge in |- *; unfold Rgt in |- *; intro; elim H12; auto with arith real.",
            "VernacExtend",
            "0ce5934416fe6ed31006d604d77865f8c7406e29"
        ],
        [
            "intro; elimtype False; auto with arith real.",
            "VernacExtend",
            "28cabe8cd47c63eaab97346e59601ae3cc3e4e1c"
        ],
        [
            "apply (lt_le_weak 0 k H1).",
            "VernacExtend",
            "110aec24acc1699ebd577fb1b9b847d9a182c92b"
        ],
        [
            "unfold frac_part_n_alpha in |- *; simpl in |- *; rewrite Rmult_0_l; rewrite fp_R0; elim (base_fp (INR k * alpha)); intros; unfold Rge in H4; elim H4; auto with arith real.",
            "VernacExtend",
            "d390d838cc98820b69c87091e6a8925950e3afd1"
        ],
        [
            "intro; elimtype False; auto with arith real.",
            "VernacExtend",
            "28cabe8cd47c63eaab97346e59601ae3cc3e4e1c"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma tech_suc_M : forall N n : nat, N - first N <= n -> n < last N -> (exists k : nat, 0 < k /\\ k < N /\\ (frac_part_n_alpha n < frac_part_n_alpha k)%R /\\ (frac_part_n_alpha k < frac_part_n_alpha (n + first N - last N))%R) -> False.",
            "VernacStartTheoremProof",
            "be2dd7ffeeceeef8ddeeaf9c31ec671ad3bc57ec"
        ],
        [
            "intros; elim H1; intros; clear H1.",
            "VernacExtend",
            "a4f741ed011bbcb61158ccb899471f07d873e300"
        ],
        [
            "elim H2; intros; elim H3; intros; clear H3; clear H2; elim H5; intros; clear H5.",
            "VernacExtend",
            "08b7621a5c878bf971b2b749dc295b6350a19cae"
        ],
        [
            "cut (0 < n).",
            "VernacExtend",
            "f49a0c48aeae35f59abfa199ddc34fc7e16c80ce"
        ],
        [
            "intro; cut (n < M N).",
            "VernacExtend",
            "cdea30d3e2ed785c73c8432425f01534dfa4c112"
        ],
        [
            "intros; cut (x < M N).",
            "VernacExtend",
            "f1e58a370f5810c8763dfb6c35a5efbc9215edf2"
        ],
        [
            "intro; elim (Rtotal_order (frac_part_n_alpha x) (frac_part_n_alpha (n + first N))); intro.",
            "VernacExtend",
            "43dd3d1c3a3505a60d2d510106a86ee55cddd3b1"
        ],
        [
            "cut (n + first N = after (M N) n).",
            "VernacExtend",
            "66ade0ee62ab9d11ff96c162a419b2de1ddf4265"
        ],
        [
            "intro; rewrite H9 in H8; cut (frac_part_n_alpha x <> frac_part_n_alpha (after (M N) n)).",
            "VernacExtend",
            "7081a260f5d8d8d6d97dfe71d4e5d10bc34d91ea"
        ],
        [
            "intro; generalize (tech_suc_N (M N) n H5 H6 x H1 H7 H2 H10).",
            "VernacExtend",
            "4d367217ddaec1536f0428fff4848444164f64a4"
        ],
        [
            "intro; generalize (Rlt_asym (frac_part_n_alpha x) (frac_part_n_alpha (after (M N) n)) H8).",
            "VernacExtend",
            "b3c6fc434e12efcd69bf8192ade34eb33ecc90af"
        ],
        [
            "intro; auto with arith real.",
            "VernacExtend",
            "6ab4da6a5407ca491390fb0f9eb0ff8637d04545"
        ],
        [
            "apply (Rlt_dichotomy_converse (frac_part_n_alpha x) (frac_part_n_alpha (after (M N) n))).",
            "VernacExtend",
            "67b30a1c0cdd664ece93a957bf765978002cf3da"
        ],
        [
            "left; auto with arith real.",
            "VernacExtend",
            "a4f964796383376ea58dd3f559710e63d39725f7"
        ],
        [
            "apply sym_equal.",
            "VernacExtend",
            "c17550e3f7c4c9c406c00d64da9614cfdcfa6161"
        ],
        [
            "rewrite (first_eq_M_N alpha_irr prop_alpha prop_N N (M N)).",
            "VernacExtend",
            "e13356eac99ceeae0ddaaf0be105af4bbf5ba3f3"
        ],
        [
            "apply (inter31a N n H5).",
            "VernacExtend",
            "4357d18377af492126cb992b93433ab41836cec9"
        ],
        [
            "rewrite <- (last_eq_M_N alpha_irr prop_alpha prop_N N (M N)).",
            "VernacExtend",
            "ec95bb099b7e481db14e6899667aa9370ed53dfc"
        ],
        [
            "assumption.",
            "VernacExtend",
            "41f0308313ff87e6ab2782f90d6021ec4b55d932"
        ],
        [
            "auto with arith real.",
            "VernacExtend",
            "9fd854feec53284ad4f693eac9f5f651fc003948"
        ],
        [
            "auto with arith real.",
            "VernacExtend",
            "9fd854feec53284ad4f693eac9f5f651fc003948"
        ],
        [
            "elim H8; intro; clear H8.",
            "VernacExtend",
            "1709560cc30df991d7eac4bf27737a9cf9123636"
        ],
        [
            "cut (x <> n + first N).",
            "VernacExtend",
            "fc21431a68385d890cb1b426de632c75aa826a54"
        ],
        [
            "intro; generalize (contra_tech_fp_alp_irr alpha_irr prop_alpha x (n + first N) H8); auto with arith real.",
            "VernacExtend",
            "e45e0f2560e4a6d81ee9d9bac1425f6e1fcd1f0a"
        ],
        [
            "cut (x < n + first N).",
            "VernacExtend",
            "0038f907ef043fbc5f75988ede22c7782ffab5c7"
        ],
        [
            "intro; red in |- *; intro; apply (lt_not_eq x (n + first N) H8); assumption.",
            "VernacExtend",
            "d338bbb2e59cddbf87d7ff01817fe40abe8e0f8f"
        ],
        [
            "generalize (le_minus_plus N (first N) n H); intro; apply (lt_le_trans x N (n + first N) H4 H8).",
            "VernacExtend",
            "0d903ac3afe634c2891ef2719f25516a59cccef9"
        ],
        [
            "cut (0 < n + first (M N)).",
            "VernacExtend",
            "dacb5c955b291cd0901a7402f054fa9efd159338"
        ],
        [
            "intro; cut (n + first (M N) < M N).",
            "VernacExtend",
            "d04a05eeaf37adba46affa39c1b15195cd033d86"
        ],
        [
            "intro; cut (frac_part_n_alpha x <> frac_part_n_alpha (after (M N) (n + first (M N)))).",
            "VernacExtend",
            "53f84c385855450625843a68a8731834c67b1241"
        ],
        [
            "intro; unfold Rgt in H9; rewrite (first_eq_M_N alpha_irr prop_alpha prop_N N (M N) (refl_equal (first N + last N))) in H9; generalize (tech_suc_N (M N) (n + first (M N)) H8 H10 x H1 H7 H9 H11); intro; cut (last (M N) <= n + first (M N)).",
            "VernacExtend",
            "451fcd41e3a72b9c544140cfea9050bb1f14697a"
        ],
        [
            "intro; rewrite (inter31b N (n + first (M N)) H13 H10) in H12.",
            "VernacExtend",
            "225f78ede8807b61e6e00221a9d4fc8dfa789b00"
        ],
        [
            "rewrite (first_eq_M_N alpha_irr prop_alpha prop_N N (M N) (refl_equal (first N + last N))) in H3; rewrite (last_eq_M_N alpha_irr prop_alpha prop_N N (M N) (refl_equal (first N + last N))) in H3; generalize (Rlt_asym (frac_part_n_alpha (n + first (M N) - last (M N))) (frac_part_n_alpha x) H12); intro; auto with arith real.",
            "VernacExtend",
            "84ac4a754f0c37ce95828e22432361a1a6f8b799"
        ],
        [
            "generalize (le_minus_plus N (first N) n H); intro.",
            "VernacExtend",
            "9ab9ba442fdf0c80ec7ab981fa5a6d422f92ccca"
        ],
        [
            "generalize (last_N01 N); intro.",
            "VernacExtend",
            "e0396bd6d12e8f6df2384550e18cba3d24edced1"
        ],
        [
            "rewrite <- (first_eq_M_N alpha_irr prop_alpha prop_N N (M N) (refl_equal (first N + last N))); rewrite <- (last_eq_M_N alpha_irr prop_alpha prop_N N (M N) (refl_equal (first N + last N))); apply (le_trans (last N) N (n + first N) H14 H13).",
            "VernacExtend",
            "07c1ae73a5c5448742ab21ccb364b8c230643288"
        ],
        [
            "cut (last (M N) <= n + first (M N)).",
            "VernacExtend",
            "4a949d70a8e6991f66f132bed50ac1b66d3808c6"
        ],
        [
            "intro; rewrite (inter31b N (n + first (M N)) H11 H10); rewrite <- (first_eq_M_N alpha_irr prop_alpha prop_N N (M N) (refl_equal (first N + last N))); rewrite <- (last_eq_M_N alpha_irr prop_alpha prop_N N (M N) (refl_equal (first N + last N))); apply (Rlt_dichotomy_converse (frac_part_n_alpha x) (frac_part_n_alpha (n + first N - last N))).",
            "VernacExtend",
            "628c4e39a9922048b6a242dc8410c20130c6818f"
        ],
        [
            "left; assumption.",
            "VernacExtend",
            "3caf0ae349d7f7f5e42b9e4faad0c11c70cd858a"
        ],
        [
            "generalize (le_minus_plus N (first N) n H); intro.",
            "VernacExtend",
            "9ab9ba442fdf0c80ec7ab981fa5a6d422f92ccca"
        ],
        [
            "generalize (last_N01 N); intro; rewrite <- (first_eq_M_N alpha_irr prop_alpha prop_N N (M N) (refl_equal (first N + last N))); rewrite <- (last_eq_M_N alpha_irr prop_alpha prop_N N (M N) (refl_equal (first N + last N))); apply (le_trans (last N) N (n + first N) H12 H11).",
            "VernacExtend",
            "7443541d1dfc528d02f3b9d6206b0cc3253d7ba5"
        ],
        [
            "rewrite <- (first_eq_M_N alpha_irr prop_alpha prop_N N (M N) (refl_equal (first N + last N))); unfold M in |- *; rewrite (plus_comm (first N) (last N)); apply (plus_lt_compat_r n (last N) (first N) H0).",
            "VernacExtend",
            "5f012688efc9b3cf0520c6d3a516b371acb1f16c"
        ],
        [
            "apply (lt_O_plus n (first (M N)) H5).",
            "VernacExtend",
            "1dee0da63e01e70dfb26c6f910fedc4ccf66b291"
        ],
        [
            "cut (N <= M N).",
            "VernacExtend",
            "66a979f18130e2115843f5de6fef86af90136368"
        ],
        [
            "intro; apply (lt_le_trans x N (M N) H4 H7).",
            "VernacExtend",
            "a6a14ef9c63bb0375e5c86dff685446201c76bbe"
        ],
        [
            "apply (le_N_M alpha_irr prop_alpha prop_N N (M N) (refl_equal (first N + last N))).",
            "VernacExtend",
            "a29501e442b7b5f40e4cb17361dd4eca68d96387"
        ],
        [
            "cut (last N < N).",
            "VernacExtend",
            "e53b4753c0e0af554121585fa54129fa6e18bd79"
        ],
        [
            "intro; cut (N <= M N).",
            "VernacExtend",
            "4a3842ff48c5d7c9b588feb69123edaeea956c54"
        ],
        [
            "intro; generalize (lt_trans n (last N) N H0 H6).",
            "VernacExtend",
            "327a86a0fe23474f396d35fc2fd51495c4b20a25"
        ],
        [
            "intro; apply (lt_le_trans n N (M N) H8 H7).",
            "VernacExtend",
            "95768b1408263c7f63a3eb04c34b86f6713afb65"
        ],
        [
            "apply (le_N_M alpha_irr prop_alpha prop_N N (M N) (refl_equal (first N + last N))).",
            "VernacExtend",
            "a29501e442b7b5f40e4cb17361dd4eca68d96387"
        ],
        [
            "apply (last_N N (prop_N N)).",
            "VernacExtend",
            "1fdadac1157c92450d13ce91f98ecd8b389e9397"
        ],
        [
            "cut (0 < N - first N).",
            "VernacExtend",
            "7652f87b334400594ca594a305205c7dad2ff1ab"
        ],
        [
            "intro; apply (lt_le_trans 0 (N - first N) n H5 H).",
            "VernacExtend",
            "b17ca38d20c2748e6b8ee8cb5883643903102d26"
        ],
        [
            "apply (lt_minus2 (first N) N (first_N N (prop_N N))).",
            "VernacExtend",
            "44a807ce08a5c6fe5176c5dd584a98b0e615614b"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma tech_suc_M1 : forall N n : nat, N - first N <= n -> n < last N -> forall k : nat, ~ (0 < k /\\ k < N /\\ (frac_part_n_alpha n < frac_part_n_alpha k)%R /\\ (frac_part_n_alpha k < frac_part_n_alpha (n + first N - last N))%R).",
            "VernacStartTheoremProof",
            "90b21e32574c21da84b9d95426e506cf009a1260"
        ],
        [
            "intros; generalize (tech_suc_M N n H H0); intro; red in |- *; intro; apply H1; split with k; auto with arith real.",
            "VernacExtend",
            "01bc9b5b155034d9f13cc7c642250353b02d7b21"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma eq_after_M_N1 : forall N n : nat, 0 < n -> n < N - first N -> after (M N) n = after N n.",
            "VernacStartTheoremProof",
            "f3541330161fcd89366404896e1be1e4cdddb13c"
        ],
        [
            "intros; cut (n < last (M N)).",
            "VernacExtend",
            "81e12cb3bf4a7431590ff40b160cde5d804a6c5e"
        ],
        [
            "intro; generalize (inter31a N n H H1); rewrite <- (first_eq_M_N alpha_irr prop_alpha prop_N N (M N) (refl_equal (M N))) ; intro; apply (tech_fp_alp_irr alpha_irr (after (M N) n) (after N n)); apply (Rge_antisym (frac_part_n_alpha (after (M N) n)) (frac_part_n_alpha (after N n))).",
            "VernacExtend",
            "8ec45e06b05db3180ff98615ed17fa90e0a95d18"
        ],
        [
            "apply (Rnot_lt_ge (frac_part_n_alpha (after (M N) n)) (frac_part_n_alpha (after N n))); red in |- *; intro; cut (0 < after (M N) n).",
            "VernacExtend",
            "75606e3ac0a73ca8b1e2069e48fc8ae62513a181"
        ],
        [
            "intro; cut (after (M N) n < N).",
            "VernacExtend",
            "536d9a90aaa3793bbefeb3fec2e627b696a8b543"
        ],
        [
            "intro; cut (frac_part_n_alpha n < frac_part_n_alpha (after (M N) n))%R.",
            "VernacExtend",
            "18fa28e09f40bb149a4f00b659ccbff726c68e1a"
        ],
        [
            "intro; generalize (tech_suc_N N n H (contra_lt_minus_p n N (first N) H0) (after (M N) n) H4 H5 H6 (Rlt_dichotomy_converse (frac_part_n_alpha (after (M N) n)) (frac_part_n_alpha (after N n)) (or_introl (frac_part_n_alpha (after (M N) n) > frac_part_n_alpha (after N n))%R H3))); intro; generalize (Rlt_asym (frac_part_n_alpha (after (M N) n)) (frac_part_n_alpha (after N n)) H3); intro; elimtype False; auto with arith real.",
            "VernacExtend",
            "7fdb74e95ec34dd51af26305902db07d84f81710"
        ],
        [
            "apply (tech_after_lt (M N) n (after (M N) n) H (lt_le_trans n N (M N) (contra_lt_minus_p n N (first N) H0) (le_N_M alpha_irr prop_alpha prop_N N (M N) (refl_equal (M N))))); auto with arith real.",
            "VernacExtend",
            "4d99a607ed09d4b79d82f6dd5837e609aba64a8d"
        ],
        [
            "rewrite H2; red in |- *; intro; apply (lt_O_plus_eq n (first N) H); auto with arith real.",
            "VernacExtend",
            "a7a0d996e8aa31491344c86686fc4bfb2a60695f"
        ],
        [
            "rewrite H2; apply (lt_n_minus_plus n N (first N) H0).",
            "VernacExtend",
            "58e00b8a63a491c14c1b38137c4a552cab8ef330"
        ],
        [
            "rewrite H2; apply (lt_O_plus n (first N) H).",
            "VernacExtend",
            "e66b1cd8872d10041f5637fcf3e042b34334212e"
        ],
        [
            "apply (Rnot_lt_ge (frac_part_n_alpha (after N n)) (frac_part_n_alpha (after (M N) n))); red in |- *; intro; apply (prop_after (M N) n (after (M N) n)); auto with arith real.",
            "VernacExtend",
            "cee6dc87496249b0f6dcc1090c8f5f691c1b927a"
        ],
        [
            "split with (after N n); split.",
            "VernacExtend",
            "5ada67e57952f352e89cfbf4751d046cfbb5382e"
        ],
        [
            "unfold after in |- *; case (exist_after_M (frac_part_n_alpha n) (P1 n) (P2 n) N).",
            "VernacExtend",
            "af374c92076789fe3d64cad55739adf8929039a2"
        ],
        [
            "intro; elim s; intros x y; elim y; intros; assumption.",
            "VernacExtend",
            "7cbd540729b37e6d72b475f5abc4dea07c207c36"
        ],
        [
            "intro; generalize (a (last N) (le_O_n (last N)) (last_N N (prop_N N))); intro; elim H4; intros; clear a H4; generalize (last_n N n (prop_N N) H (contra_lt_minus_p n N (first N) H0) prop_alpha); intro; cut (frac_part_n_alpha n = frac_part_n_alpha (last N)).",
            "VernacExtend",
            "ec903281c4c21c5ff73037b9f34286a9a8485ea5"
        ],
        [
            "intro; generalize (tech_fp_alp_irr alpha_irr n (last N) H7); rewrite (last_eq_M_N alpha_irr prop_alpha prop_N N (M N)); auto with arith real.",
            "VernacExtend",
            "7dff70c649d537d31c9773c12f4297d5e42bab44"
        ],
        [
            "intro; generalize (lt_not_eq n (last (M N)) H1); intro; elimtype False; auto with arith real.",
            "VernacExtend",
            "b1c57e21d3b6804bbfaa372413b704d0e9c5c156"
        ],
        [
            "elim (Rle_le_eq (frac_part_n_alpha n) (frac_part_n_alpha (last N))); intros; clear H8; apply H7; auto with arith real.",
            "VernacExtend",
            "52201a60e7c77904e4747f0adc35412a67a4f88b"
        ],
        [
            "split.",
            "VernacExtend",
            "55abc140132bd88981001ac656020469a8d503eb"
        ],
        [
            "cut (after N n < N).",
            "VernacExtend",
            "6c53edd9cfba9db450c60ae9978fbe146a036b53"
        ],
        [
            "intro; apply (lt_le_trans (after N n) N (M N) H4 (le_N_M alpha_irr prop_alpha prop_N N (M N) (refl_equal (M N)))).",
            "VernacExtend",
            "532aac279707639d87ea7f135a76c92219dbf422"
        ],
        [
            "unfold after in |- *; case (exist_after_M (frac_part_n_alpha n) (P1 n) (P2 n) N).",
            "VernacExtend",
            "af374c92076789fe3d64cad55739adf8929039a2"
        ],
        [
            "intro; elim s; intros x y; elim y; intros; elim H5; intros; assumption.",
            "VernacExtend",
            "c71ad4a833a88850c5858081f18eb8544bc1792b"
        ],
        [
            "intro; apply (arith_2_0 N (prop_N N)).",
            "VernacExtend",
            "8af1426f57b8853755fc6b024955eb6f3751edae"
        ],
        [
            "split; auto with arith real.",
            "VernacExtend",
            "30c9218abdcc13b2eff0a88e400483f8702cdf0b"
        ],
        [
            "apply (tech_after_lt N n (after N n) H (contra_lt_minus_p n N (first N) H0)); auto with arith real.",
            "VernacExtend",
            "af701690654e830c61f4f8bb777602b79fc2db25"
        ],
        [
            "red in |- *; unfold after in |- *; case (exist_after_M (frac_part_n_alpha n) (P1 n) (P2 n) N).",
            "VernacExtend",
            "6a5542e570d29f9240615cb23db9fde337f93716"
        ],
        [
            "intro; elim s; intros x y H4; elim y; intros; generalize (lt_not_eq 0 x H5); intro; auto with arith real.",
            "VernacExtend",
            "d9fa4a3f4511a5cc4c246dbaecfb1ae615417da0"
        ],
        [
            "intros; generalize (a (last N) (le_O_n (last N)) (last_N N (prop_N N))); intro; elim H5; intros; clear a H5; generalize (last_n N n (prop_N N) H (contra_lt_minus_p n N (first N) H0) prop_alpha); intro; cut (frac_part_n_alpha n = frac_part_n_alpha (last N)).",
            "VernacExtend",
            "6b0de08506cb57a3ce96863632dc084f56c72d4e"
        ],
        [
            "intro; generalize (tech_fp_alp_irr alpha_irr n (last N) H8); rewrite (last_eq_M_N alpha_irr prop_alpha prop_N N (M N)); auto with arith real.",
            "VernacExtend",
            "6c7555d221d2286345063f2a92e3dec85276d5e2"
        ],
        [
            "intro; generalize (lt_not_eq n (last (M N)) H1); intro; elimtype False; auto with arith real.",
            "VernacExtend",
            "b1c57e21d3b6804bbfaa372413b704d0e9c5c156"
        ],
        [
            "elim (Rle_le_eq (frac_part_n_alpha n) (frac_part_n_alpha (last N))); intros; clear H9; apply H8; auto with arith real.",
            "VernacExtend",
            "6f62ab47e856518e22ef96f8bd793fd9f1b25534"
        ],
        [
            "cut (N - first N <= last (M N)).",
            "VernacExtend",
            "e0a1bc6ae30a561d3b0058368000224e64cf347b"
        ],
        [
            "intro; apply (lt_le_trans n (N - first N) (last (M N)) H0 H1).",
            "VernacExtend",
            "5d692aa83ab0824a52d2e325ec1e8abec2a10634"
        ],
        [
            "generalize (le_N_M alpha_irr prop_alpha prop_N N (M N) (refl_equal (M N))); unfold M at 1 in |- *; rewrite <- (last_eq_M_N alpha_irr prop_alpha prop_N N (M N) (refl_equal (M N))) ; intro; apply (le_plus_min N (first N) (last N) H1).",
            "VernacExtend",
            "e476af84934408f55d061e45f42b3b5b3b5d491c"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma eq_after_M_N2 : forall N n : nat, last N <= n -> n < N -> after (M N) n = after N n.",
            "VernacStartTheoremProof",
            "51f6b70df5311b2bcfef18a21d87260aef144555"
        ],
        [
            "intros; generalize (le_lt_or_eq (last N) n H); intro; elim H1; intro; clear H1.",
            "VernacExtend",
            "89e4b581346b2b981099661e57869dfb9c057a1d"
        ],
        [
            "rewrite (last_eq_M_N alpha_irr prop_alpha prop_N N (M N) (refl_equal (M N))) in H; generalize (inter31b N n H (lt_le_trans n N (M N) H0 (le_N_M alpha_irr prop_alpha prop_N N (M N) (refl_equal (M N))))); rewrite <- (last_eq_M_N alpha_irr prop_alpha prop_N N (M N) (refl_equal (M N))) ; intro; apply (tech_fp_alp_irr alpha_irr (after (M N) n) (after N n)); apply (Rge_antisym (frac_part_n_alpha (after (M N) n)) (frac_part_n_alpha (after N n))).",
            "VernacExtend",
            "bb983dfccd6e8528f3311782edaa6e1711c88db3"
        ],
        [
            "apply (Rnot_lt_ge (frac_part_n_alpha (after (M N) n)) (frac_part_n_alpha (after N n))); red in |- *; intro; cut (0 < after (M N) n).",
            "VernacExtend",
            "75606e3ac0a73ca8b1e2069e48fc8ae62513a181"
        ],
        [
            "intro; cut (after (M N) n < N).",
            "VernacExtend",
            "536d9a90aaa3793bbefeb3fec2e627b696a8b543"
        ],
        [
            "intro; cut (frac_part_n_alpha n < frac_part_n_alpha (after (M N) n))%R.",
            "VernacExtend",
            "18fa28e09f40bb149a4f00b659ccbff726c68e1a"
        ],
        [
            "intro; generalize (tech_suc_N N n (lt_trans 0 (last N) n (last_0 N (prop_N N)) H2) H0 (after (M N) n) H4 H5 H6 (Rlt_dichotomy_converse (frac_part_n_alpha (after (M N) n)) (frac_part_n_alpha (after N n)) (or_introl (frac_part_n_alpha (after (M N) n) > frac_part_n_alpha (after N n))%R H3))); intro; generalize (Rlt_asym (frac_part_n_alpha (after (M N) n)) (frac_part_n_alpha (after N n)) H3); intro; elimtype False; auto with arith real.",
            "VernacExtend",
            "6126e1e64093ce73b52750cc74361ba7587b179e"
        ],
        [
            "apply (tech_after_lt (M N) n (after (M N) n) (lt_trans 0 (last N) n (last_0 N (prop_N N)) H2) (lt_le_trans n N (M N) H0 (le_N_M alpha_irr prop_alpha prop_N N (M N) (refl_equal (M N))))); auto with arith real.",
            "VernacExtend",
            "590fcf2cad8acf29e83373d7f59931f6a2d4d8da"
        ],
        [
            "rewrite H1; red in |- *; intro; apply (lt_minus_not (last N) n H2); auto with arith real.",
            "VernacExtend",
            "ed427e982b860c2ba1c14eca6f0130ceaa9ded62"
        ],
        [
            "rewrite H1; apply (lt_minus_p n N (last N) H0).",
            "VernacExtend",
            "2c85b12be3bf245193f011b99432295a5ad122fc"
        ],
        [
            "rewrite H1; apply (lt_minus2 (last N) n H2).",
            "VernacExtend",
            "f12cf29d808cf0bc4411b00413bdc3cbc01f3c06"
        ],
        [
            "apply (Rnot_lt_ge (frac_part_n_alpha (after N n)) (frac_part_n_alpha (after (M N) n))); red in |- *; intro; apply (prop_after (M N) n (after (M N) n)); auto with arith real.",
            "VernacExtend",
            "cee6dc87496249b0f6dcc1090c8f5f691c1b927a"
        ],
        [
            "split with (after N n); split.",
            "VernacExtend",
            "5ada67e57952f352e89cfbf4751d046cfbb5382e"
        ],
        [
            "unfold after in |- *; case (exist_after_M (frac_part_n_alpha n) (P1 n) (P2 n) N).",
            "VernacExtend",
            "af374c92076789fe3d64cad55739adf8929039a2"
        ],
        [
            "intro; elim s; intros x y; elim y; intros; assumption.",
            "VernacExtend",
            "7cbd540729b37e6d72b475f5abc4dea07c207c36"
        ],
        [
            "intro; generalize (a (last N) (le_O_n (last N)) (last_N N (prop_N N))); intro; elim H4; intros; clear a H4; generalize (last_n N n (prop_N N) (lt_trans 0 (last N) n (last_0 N (prop_N N)) H2) H0 prop_alpha); intro; cut (frac_part_n_alpha n = frac_part_n_alpha (last N)).",
            "VernacExtend",
            "89663936b5d9b7a609512974bbcb1f1be8c4b4f9"
        ],
        [
            "intro; generalize (tech_fp_alp_irr alpha_irr n (last N) H7).",
            "VernacExtend",
            "42eff5ea54c7902be764dfd5966df3d54bc7509c"
        ],
        [
            "intro; generalize (lt_not_eq (last N) n H2); intro; elimtype False; auto with arith real.",
            "VernacExtend",
            "fc322a384bc469bfae98ee4f2ba7602e26162447"
        ],
        [
            "elim (Rle_le_eq (frac_part_n_alpha n) (frac_part_n_alpha (last N))); intros; clear H8; apply H7; auto with arith real.",
            "VernacExtend",
            "52201a60e7c77904e4747f0adc35412a67a4f88b"
        ],
        [
            "split.",
            "VernacExtend",
            "55abc140132bd88981001ac656020469a8d503eb"
        ],
        [
            "cut (after N n < N).",
            "VernacExtend",
            "6c53edd9cfba9db450c60ae9978fbe146a036b53"
        ],
        [
            "intro; apply (lt_le_trans (after N n) N (M N) H4 (le_N_M alpha_irr prop_alpha prop_N N (M N) (refl_equal (M N)))).",
            "VernacExtend",
            "532aac279707639d87ea7f135a76c92219dbf422"
        ],
        [
            "unfold after in |- *; case (exist_after_M (frac_part_n_alpha n) (P1 n) (P2 n) N).",
            "VernacExtend",
            "af374c92076789fe3d64cad55739adf8929039a2"
        ],
        [
            "intro; elim s; intros x y; elim y; intros; elim H5; intros; assumption.",
            "VernacExtend",
            "c71ad4a833a88850c5858081f18eb8544bc1792b"
        ],
        [
            "intro; apply (arith_2_0 N (prop_N N)).",
            "VernacExtend",
            "8af1426f57b8853755fc6b024955eb6f3751edae"
        ],
        [
            "split; auto with arith real.",
            "VernacExtend",
            "30c9218abdcc13b2eff0a88e400483f8702cdf0b"
        ],
        [
            "apply (tech_after_lt N n (after N n) (lt_trans 0 (last N) n (last_0 N (prop_N N)) H2) H0); auto with arith real.",
            "VernacExtend",
            "56164d0ce4607e95b26cf579103b0299b6809614"
        ],
        [
            "red in |- *; unfold after in |- *; case (exist_after_M (frac_part_n_alpha n) (P1 n) (P2 n) N).",
            "VernacExtend",
            "6a5542e570d29f9240615cb23db9fde337f93716"
        ],
        [
            "intro; elim s; intros x y H4; elim y; intros; generalize (lt_not_eq 0 x H5); intro; auto with arith real.",
            "VernacExtend",
            "d9fa4a3f4511a5cc4c246dbaecfb1ae615417da0"
        ],
        [
            "intros; generalize (a (last N) (le_O_n (last N)) (last_N N (prop_N N))); intro; elim H5; intros; clear a H5; generalize (last_n N n (prop_N N) (lt_trans 0 (last N) n (last_0 N (prop_N N)) H2) H0 prop_alpha); intro; cut (frac_part_n_alpha n = frac_part_n_alpha (last N)).",
            "VernacExtend",
            "60052c857e067bc4c687dc18fc9adcc91fb8105a"
        ],
        [
            "intro; generalize (tech_fp_alp_irr alpha_irr n (last N) H8); intro; generalize (lt_not_eq (last N) n H2); intro; auto with arith real.",
            "VernacExtend",
            "c6ba0e5254d2b3682af1e70885c685ea5ccc25a4"
        ],
        [
            "elim (Rle_le_eq (frac_part_n_alpha n) (frac_part_n_alpha (last N))); intros; clear H9; apply H8; auto with arith real.",
            "VernacExtend",
            "6f62ab47e856518e22ef96f8bd793fd9f1b25534"
        ],
        [
            "rewrite <- H2; rewrite (after_last prop_alpha prop_N N); rewrite (last_eq_M_N alpha_irr prop_alpha prop_N N (M N) (refl_equal (first N + last N))); auto with arith real; rewrite (after_last prop_alpha prop_N (M N)); trivial.",
            "VernacExtend",
            "9fa226ba7030e2002cff0f1de27fcdf13c1baa1c"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "End particular.",
            "VernacEndSegment",
            "162ba02567453244fc01488a27155aed77685a2e"
        ]
    ],
    "proofs": [
        {
            "name": "inter31a",
            "line_nb": 7,
            "steps": [
                {
                    "command": [
                        "intros; apply (sym_equal (x:=n + first (M N)) (y:=after (M N) n)); apply (tech_after alpha_irr (M N) n (n + first (M N)) H); auto with arith real.",
                        "VernacExtend",
                        "f1e3d08b07d7b17a19a9f7bfc05433aae5f8427e"
                    ]
                },
                {
                    "command": [
                        "apply (lt_le_trans n (last (M N)) (M N) H0 (last_N01 (M N))).",
                        "VernacExtend",
                        "74113db4106611fd8c068bb113880899b6ebf5bd"
                    ]
                },
                {
                    "command": [
                        "unfold M at 2 in |- *; rewrite (last_eq_M_N alpha_irr prop_alpha prop_N N (M N)); auto with arith real; rewrite (first_eq_M_N alpha_irr prop_alpha prop_N N (M N)); auto with arith real.",
                        "VernacExtend",
                        "6a58de20ce2b84d4cdddde88a267dccd1cc4b92d"
                    ]
                },
                {
                    "command": [
                        "rewrite (plus_comm (first (M N)) (last (M N))); apply (plus_lt_compat_r n (last (M N)) (first (M N)) H0).",
                        "VernacExtend",
                        "a28c5cbd6ed3f0290f54cc0c556f914be6d9c5a1"
                    ]
                },
                {
                    "command": [
                        "fold (frac_part_n_alpha (n + first (M N)) > frac_part_n_alpha n)%R in |- *; apply (Rnot_le_lt (frac_part_n_alpha (n + first (M N))) (frac_part_n_alpha n)); red in |- *; intro; generalize (Rplus_le_compat_l (- frac_part_n_alpha (first (M N))) (frac_part_n_alpha (n + first (M N))) (frac_part_n_alpha n) H1); rewrite (Rplus_comm (- frac_part_n_alpha (first (M N))) (frac_part_n_alpha (n + first (M N)))); rewrite (Rplus_comm (- frac_part_n_alpha (first (M N))) (frac_part_n_alpha n)) ; fold (frac_part_n_alpha (n + first (M N)) - frac_part_n_alpha (first (M N)))%R in |- *; fold (frac_part_n_alpha n - frac_part_n_alpha (first (M N)))%R in |- *; cut (frac_part_n_alpha (n + first (M N)) >= frac_part_n_alpha (first (M N)))%R.",
                        "VernacExtend",
                        "866cf8a98c817f9d957edf40cc016f1de8bdd191"
                    ]
                },
                {
                    "command": [
                        "intro; unfold frac_part_n_alpha at 1 2 in |- *; unfold frac_part_n_alpha in H2; rewrite <- (Rminus_fp1 (INR (n + first (M N)) * alpha) (INR (first (M N)) * alpha) H2) ; rewrite (plus_INR n (first (M N))); rewrite (Rmult_comm (INR n + INR (first (M N))) alpha); rewrite (Rmult_plus_distr_l alpha (INR n) (INR (first (M N)))); rewrite (Rmult_comm alpha (INR (first (M N)))); unfold Rminus at 1 in |- *; rewrite (Rplus_assoc (alpha * INR n) (INR (first (M N)) * alpha) (- (INR (first (M N)) * alpha))); rewrite (Rplus_opp_r (INR (first (M N)) * alpha)).",
                        "VernacExtend",
                        "79684896ad295061a9e9597d08462614098bcddd"
                    ]
                },
                {
                    "command": [
                        "elim (Rplus_ne (alpha * INR n)); intros a b; rewrite a; clear a b; rewrite (Rmult_comm alpha (INR n)); fold (frac_part_n_alpha n) in |- *; intro; cut (0 < frac_part_n_alpha (first (M N)))%R.",
                        "VernacExtend",
                        "b2bf38a04e998385c1667a7cb0153283b2efe621"
                    ]
                },
                {
                    "command": [
                        "intro; generalize (tech_Rgt_minus (frac_part_n_alpha n) (frac_part_n_alpha (first (M N))) H4); clear H4 H1 H2; intro; unfold Rgt in H1; generalize (Rgt_not_le (frac_part_n_alpha n) (frac_part_n_alpha n - frac_part_n_alpha (first (M N))) H1); auto with arith real.",
                        "VernacExtend",
                        "6bfb77dfb3e650c7cfaaf82e4d5ea0ffd3353068"
                    ]
                },
                {
                    "command": [
                        "fold (frac_part_n_alpha (first (M N)) > 0)%R in |- *; apply (fp_first_R0 alpha_irr prop_N (M N)).",
                        "VernacExtend",
                        "e169e5a618fce26c9de8a1793d62c4adebcdff96"
                    ]
                },
                {
                    "command": [
                        "unfold Rge in |- *; unfold Rgt in |- *; cut ((frac_part_n_alpha (first (M N)) < frac_part_n_alpha (n + first (M N)))%R \\/ frac_part_n_alpha (first (M N)) = frac_part_n_alpha (n + first (M N))).",
                        "VernacExtend",
                        "a2547ab32a62c4a3f5f7ad358b2f3ac63b3757b9"
                    ]
                },
                {
                    "command": [
                        "intro; elim H2; intro.",
                        "VernacExtend",
                        "384707c7c85dc8c066104724fd997dc455dd8eef"
                    ]
                },
                {
                    "command": [
                        "left; auto with arith real.",
                        "VernacExtend",
                        "a4f964796383376ea58dd3f559710e63d39725f7"
                    ]
                },
                {
                    "command": [
                        "right; auto with arith real.",
                        "VernacExtend",
                        "2c284aebcd392749b98886bb7fd97ab5e26d813a"
                    ]
                },
                {
                    "command": [
                        "fold (frac_part_n_alpha (first (M N)) <= frac_part_n_alpha (n + first (M N)))%R in |- *; apply (first_n (M N) (n + first (M N))); auto with arith real; generalize (plus_lt_compat_r n (last (M N)) (first (M N)) H0); intro; unfold M at 2 in |- *; rewrite (first_eq_M_N alpha_irr prop_alpha prop_N N (M N)); auto with arith real; rewrite (last_eq_M_N alpha_irr prop_alpha prop_N N (M N)); auto with arith real; rewrite (plus_comm (first (M N)) (last (M N))); assumption.",
                        "VernacExtend",
                        "6ef0dc9cd1e7c8a3580443b93b91af2183e7eb58"
                    ]
                },
                {
                    "command": [
                        "intro; elim H1; intros; elim H2; intros; elim H4; intros; elim H6; intros; clear H6 H4 H2 H1.",
                        "VernacExtend",
                        "0a50418603bfda6493ef0cc8a457d7d1302e0a93"
                    ]
                },
                {
                    "command": [
                        "elim (le_or_lt x n); intro.",
                        "VernacExtend",
                        "16ecaf5cd6422185624e3d2700b24ac6c9ce27f3"
                    ]
                },
                {
                    "command": [
                        "generalize (Ropp_lt_gt_contravar (frac_part_n_alpha n) (frac_part_n_alpha x) H7); intro; generalize (Rplus_gt_compat_l (frac_part_n_alpha (n + first (M N))) (- frac_part_n_alpha n) (- frac_part_n_alpha x) H2); fold (frac_part_n_alpha (n + first (M N)) - frac_part_n_alpha n)%R in |- *; fold (frac_part_n_alpha (n + first (M N)) - frac_part_n_alpha x)%R in |- *; fold (frac_part_n_alpha (n + first (M N)) > frac_part_n_alpha x)%R in H8; generalize (Rgt_ge (frac_part_n_alpha (n + first (M N))) (frac_part_n_alpha x) H8); intro; unfold frac_part_n_alpha in H4; unfold frac_part_n_alpha in |- *; rewrite <- (Rminus_fp1 (INR (n + first (M N)) * alpha) (INR x * alpha) H4); fold (frac_part_n_alpha x > frac_part_n_alpha n)%R in H7; generalize (Rgt_trans (frac_part_n_alpha (n + first (M N))) (frac_part_n_alpha x) (frac_part_n_alpha n) H8 H7); intro; generalize (Rgt_ge (frac_part_n_alpha (n + first (M N))) (frac_part_n_alpha n) H6); intro; unfold frac_part_n_alpha in H9; rewrite <- (Rminus_fp1 (INR (n + first (M N)) * alpha) (INR n * alpha) H9); rewrite (plus_INR n (first (M N))); rewrite (Rmult_comm (INR n + INR (first (M N))) alpha); rewrite (Rmult_plus_distr_l alpha (INR n) (INR (first (M N)))); rewrite (Rmult_comm alpha (INR n)); unfold Rminus at 1 in |- *; rewrite (Rplus_comm (INR n * alpha) (alpha * INR (first (M N)))); rewrite (Rplus_assoc (alpha * INR (first (M N))) (INR n * alpha) (- (INR n * alpha))); rewrite (Rplus_opp_r (INR n * alpha)); elim (Rplus_ne (alpha * INR (first (M N)))); intros a b; rewrite a; clear a b; rewrite (Rmult_comm alpha (INR (first (M N)))); fold (frac_part_n_alpha (first (M N))) in |- *; unfold Rminus in |- *; rewrite (Rplus_assoc (INR (first (M N)) * alpha) (INR n * alpha) (- (INR x * alpha))); rewrite (Rmult_comm (INR (first (M N))) alpha); rewrite (Rmult_comm (INR n) alpha); rewrite <- (Ropp_mult_distr_l_reverse (INR x) alpha); rewrite (Rmult_comm (- INR x) alpha); rewrite <- (Rmult_plus_distr_l alpha (INR n) (- INR x)); rewrite <- (Rmult_plus_distr_l alpha (INR (first (M N))) (INR n + - INR x)); fold (INR n - INR x)%R in |- *; rewrite <- (minus_INR n x H1); rewrite <- (plus_INR (first (M N)) (n - x)); rewrite (Rmult_comm alpha (INR (first (M N) + (n - x)))); fold (frac_part_n_alpha (first (M N) + (n - x))) in |- *; intro; clear H2 H4 H6 H9; cut (0 < first (M N) + (n - x)).",
                        "VernacExtend",
                        "0b8d0aebc78234733021ad34879137d1a7bdc71a"
                    ]
                },
                {
                    "command": [
                        "cut (first (M N) + (n - x) < M N).",
                        "VernacExtend",
                        "0803c3954cf9c74f733356b9ce14d948487c132e"
                    ]
                },
                {
                    "command": [
                        "intros; generalize (first_n (M N) (first (M N) + (n - x)) (prop_N (M N)) H4 H2 prop_alpha); intro; clear H2 H4; unfold Rgt in H10; generalize (Rgt_not_le (frac_part_n_alpha (first (M N))) (frac_part_n_alpha (first (M N) + (n - x))) H10); auto with arith real.",
                        "VernacExtend",
                        "bf002d078475a6c1f193f367fe03e4f945b4ff40"
                    ]
                },
                {
                    "command": [
                        "unfold M at 2 in |- *; rewrite (first_eq_M_N alpha_irr prop_alpha prop_N N (M N)); auto with arith real.",
                        "VernacExtend",
                        "e4b32de4a8e55bd2ca6f306d947d611ab58bd776"
                    ]
                },
                {
                    "command": [
                        "apply (plus_lt_compat_l (n - x) (last N) (first (M N))); rewrite (last_eq_M_N alpha_irr prop_alpha prop_N N (M N)); auto with arith real.",
                        "VernacExtend",
                        "8c2376f177cc533fd51a8968dad12891ce2aaae3"
                    ]
                },
                {
                    "command": [
                        "apply (lt_minus_p n (last (M N)) x H0).",
                        "VernacExtend",
                        "cd661758311855f1457a39a4b6fe289b3d3a1639"
                    ]
                },
                {
                    "command": [
                        "apply (lt_O_plus (first (M N)) (n - x) (first_0 (M N) (prop_N (M N)))).",
                        "VernacExtend",
                        "70e1f0c99290f47f43493fd1bf80950c15488b9c"
                    ]
                },
                {
                    "command": [
                        "generalize (Rplus_lt_compat_l (- frac_part_n_alpha n) (frac_part_n_alpha x) (frac_part_n_alpha (n + first (M N))) H8); rewrite (Rplus_comm (- frac_part_n_alpha n) (frac_part_n_alpha x)); rewrite (Rplus_comm (- frac_part_n_alpha n) (frac_part_n_alpha (n + first (M N)))) ; fold (frac_part_n_alpha x - frac_part_n_alpha n)%R in |- *; fold (frac_part_n_alpha (n + first (M N)) - frac_part_n_alpha n)%R in |- *; fold (frac_part_n_alpha x > frac_part_n_alpha n)%R in H7; generalize (Rgt_ge (frac_part_n_alpha x) (frac_part_n_alpha n) H7); intro; fold (frac_part_n_alpha (n + first (M N)) > frac_part_n_alpha x)%R in H8; generalize (Rgt_trans (frac_part_n_alpha (n + first (M N))) (frac_part_n_alpha x) (frac_part_n_alpha n) H8 H7); intro; generalize (Rgt_ge (frac_part_n_alpha (n + first (M N))) (frac_part_n_alpha n) H4); intro; unfold frac_part_n_alpha in H2, H6; unfold frac_part_n_alpha in |- *; rewrite <- (Rminus_fp1 (INR x * alpha) (INR n * alpha) H2); rewrite <- (Rminus_fp1 (INR (n + first (M N)) * alpha) (INR n * alpha) H6); rewrite (plus_INR n (first (M N))); rewrite (Rmult_comm (INR n + INR (first (M N))) alpha); rewrite (Rmult_plus_distr_l alpha (INR n) (INR (first (M N)))); rewrite (Rmult_comm alpha (INR n)); rewrite (Rmult_comm alpha (INR (first (M N)))); unfold Rminus at 2 in |- *; rewrite (Rplus_comm (INR n * alpha) (INR (first (M N)) * alpha)); rewrite (Rplus_assoc (INR (first (M N)) * alpha) (INR n * alpha) (- (INR n * alpha))); rewrite (Rplus_opp_r (INR n * alpha)); elim (Rplus_ne (INR (first (M N)) * alpha)); intros a b; rewrite a; clear a b; fold (frac_part_n_alpha (first (M N))) in |- *; clear H2 H4 H6; unfold Rminus in |- *; rewrite (Rmult_comm (INR x) alpha); rewrite <- (Ropp_mult_distr_l_reverse (INR n) alpha); rewrite (Rmult_comm (- INR n) alpha); rewrite <- (Rmult_plus_distr_l alpha (INR x) (- INR n)); fold (INR x - INR n)%R in |- *; rewrite (Rmult_comm alpha (INR x - INR n)); generalize (lt_le_weak n x H1); intro; rewrite <- (minus_INR x n H2); fold (frac_part_n_alpha (x - n)) in |- *; intro; cut (0 < x - n).",
                        "VernacExtend",
                        "d1b6ec5e5ff46dd61a68c051975663a7fde11451"
                    ]
                },
                {
                    "command": [
                        "intro; cut (x - n < M N).",
                        "VernacExtend",
                        "d18d56fef244fb100890cd21792d689467fdb4ca"
                    ]
                },
                {
                    "command": [
                        "intro; generalize (first_n (M N) (x - n) (prop_N (M N)) H6 H9 prop_alpha); intro; clear H9 H6; generalize (Rgt_not_le (frac_part_n_alpha (first (M N))) (frac_part_n_alpha (x - n)) H4); auto with arith real.",
                        "VernacExtend",
                        "a7bbcd23edd06e05db3c09615a7a4baaa54af511"
                    ]
                },
                {
                    "command": [
                        "apply (lt_minus_p x (M N) n H5).",
                        "VernacExtend",
                        "a5d5eaab248972bda77164fb18d03c9c9c761ac9"
                    ]
                },
                {
                    "command": [
                        "apply (lt_minus2 n x H1).",
                        "VernacExtend",
                        "7c05b9821179e2e9909e0b4bf07909178a123a09"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "inter31b",
            "line_nb": 37,
            "steps": [
                {
                    "command": [
                        "intros; elim (le_lt_or_eq (last (M N)) n H); intro; clear H.",
                        "VernacExtend",
                        "b465fa7a0db3f80ce6f5b6d852c0f651109d73b0"
                    ]
                },
                {
                    "command": [
                        "apply (sym_equal (x:=n - last (M N)) (y:=after (M N) n)); apply (tech_after alpha_irr (M N) n (n - last (M N))); auto with arith real.",
                        "VernacExtend",
                        "9aa5b8ef640c2db2a9a78fc4d34227068f8d5197"
                    ]
                },
                {
                    "command": [
                        "apply (lt_trans 0 (last (M N)) n (last_0 (M N) (prop_N (M N))) H1).",
                        "VernacExtend",
                        "2bad506a32eacd6b5bc07c76dc2d43681cd8d392"
                    ]
                },
                {
                    "command": [
                        "apply (lt_minus_p n (M N) (last (M N)) H0).",
                        "VernacExtend",
                        "56091f71b71f4c97e3375b3bb79394337db2516d"
                    ]
                },
                {
                    "command": [
                        "cut (frac_part_n_alpha n < frac_part_n_alpha n - frac_part_n_alpha (last (M N)) + 1)%R.",
                        "VernacExtend",
                        "6bb6dc0b8558e985ad23745e664bcb9fd3539843"
                    ]
                },
                {
                    "command": [
                        "intro; unfold frac_part_n_alpha in H; generalize H; clear H; rewrite <- (Rminus_fp2 (INR n * alpha) (INR (last (M N)) * alpha)).",
                        "VernacExtend",
                        "e4ea365ccb77982513887e53858a660621a73ea0"
                    ]
                },
                {
                    "command": [
                        "fold (frac_part_n_alpha n) in |- *; rewrite (Rmult_comm (INR n) alpha); unfold Rminus in |- *; rewrite <- (Ropp_mult_distr_l_reverse (INR (last (M N))) alpha); rewrite (Rmult_comm (- INR (last (M N))) alpha); rewrite <- (Rmult_plus_distr_l alpha (INR n) (- INR (last (M N)))); fold (INR n - INR (last (M N)))%R in |- *; rewrite <- (minus_INR n (last (M N)) (lt_le_weak (last (M N)) n H1)); rewrite (Rmult_comm alpha (INR (n - last (M N)))); fold (frac_part_n_alpha (n - last (M N))) in |- *; trivial.",
                        "VernacExtend",
                        "a9235cc8d2658249876ebb9d23106b4fac624a91"
                    ]
                },
                {
                    "command": [
                        "fold (frac_part_n_alpha n) in |- *; fold (frac_part_n_alpha (last (M N))) in |- *; generalize (last_n (M N) n (prop_N (M N)) (lt_trans 0 (last (M N)) n (last_0 (M N) (prop_N (M N))) H1) H0 prop_alpha); intro; unfold Rle in H; elim H; intro; auto with arith real.",
                        "VernacExtend",
                        "cfab28e57c8dd0686bec615b270adbea4e2e609b"
                    ]
                },
                {
                    "command": [
                        "generalize (contra_tech_fp_alp_irr alpha_irr prop_alpha (last (M N)) n (lt_not_eq (last (M N)) n H1)); intro; elimtype False; auto with arith real.",
                        "VernacExtend",
                        "e843b94101228dcc0a20723984514b01488f049d"
                    ]
                },
                {
                    "command": [
                        "unfold Rminus in |- *; rewrite (Rplus_assoc (frac_part_n_alpha n) (- frac_part_n_alpha (last (M N))) 1) ; rewrite (Rplus_comm (- frac_part_n_alpha (last (M N))) 1); fold (1 - frac_part_n_alpha (last (M N)))%R in |- *; elim (Rplus_ne (frac_part_n_alpha n)); intros a b; pattern (frac_part_n_alpha n) at 1 in |- *; rewrite <- a; clear a b; apply (Rplus_lt_compat_l (frac_part_n_alpha n) 0 (1 - frac_part_n_alpha (last (M N)))); fold (1 - frac_part_n_alpha (last (M N)) > 0)%R in |- *; apply (Rgt_minus 1 (frac_part_n_alpha (last (M N)))); unfold Rgt in |- *; unfold frac_part_n_alpha in |- *; elim (base_fp (INR (last (M N)) * alpha)); intros; assumption.",
                        "VernacExtend",
                        "c3ac2d8c6c39eb64c1924cf597bc556d91e5dc78"
                    ]
                },
                {
                    "command": [
                        "intro; elim H; intros; elim H2; intros; elim H4; intros; elim H6; intros; clear H H2 H4 H6.",
                        "VernacExtend",
                        "d6fd511b1b07e12f6f6acb2477f8a367f99a794d"
                    ]
                },
                {
                    "command": [
                        "elim (le_or_lt n x); intro.",
                        "VernacExtend",
                        "7c40bfef9094cbda17ae9103448928b571150e7c"
                    ]
                },
                {
                    "command": [
                        "generalize (Rplus_lt_compat_l (- frac_part_n_alpha (n - last (M N))) (frac_part_n_alpha n) (frac_part_n_alpha x) H7); intro; generalize (Rplus_lt_compat_l 1 (- frac_part_n_alpha (n - last (M N)) + frac_part_n_alpha n) (- frac_part_n_alpha (n - last (M N)) + frac_part_n_alpha x) H2); clear H2; rewrite (Rplus_comm 1 (- frac_part_n_alpha (n - last (M N)) + frac_part_n_alpha n)) ; rewrite (Rplus_comm 1 (- frac_part_n_alpha (n - last (M N)) + frac_part_n_alpha x)) ; rewrite (Rplus_comm (- frac_part_n_alpha (n - last (M N))) (frac_part_n_alpha n)) ; rewrite (Rplus_comm (- frac_part_n_alpha (n - last (M N))) (frac_part_n_alpha x)) ; fold (frac_part_n_alpha n - frac_part_n_alpha (n - last (M N)))%R in |- *; fold (frac_part_n_alpha x - frac_part_n_alpha (n - last (M N)))%R in |- *; unfold frac_part_n_alpha in |- *; rewrite <- (Rminus_fp2 (INR n * alpha) (INR (n - last (M N)) * alpha)).",
                        "VernacExtend",
                        "d105300af0bdd41a411ebf3fc41f0ce915b1ec8d"
                    ]
                },
                {
                    "command": [
                        "rewrite <- (Rminus_fp2 (INR x * alpha) (INR (n - last (M N)) * alpha)).",
                        "VernacExtend",
                        "c7d4d7127f44c0a6fc3f8567d19e4725b5fbdb8f"
                    ]
                },
                {
                    "command": [
                        "rewrite (minus_INR n (last (M N)) (lt_le_weak (last (M N)) n H1)); unfold Rminus in |- *; rewrite (Rmult_comm (INR n + - INR (last (M N))) alpha); rewrite (Rmult_plus_distr_l alpha (INR n) (- INR (last (M N)))); rewrite (Ropp_plus_distr (alpha * INR n) (alpha * - INR (last (M N)))); rewrite <- (Rplus_assoc (INR n * alpha) (- (alpha * INR n)) (- (alpha * - INR (last (M N))))); rewrite (Rmult_comm (INR n) alpha); rewrite (Rplus_opp_r (alpha * INR n)); elim (Rplus_ne (- (alpha * - INR (last (M N))))); intros a b; rewrite b; clear a b; rewrite (Rmult_comm alpha (- INR (last (M N)))); rewrite <- (Ropp_mult_distr_l_reverse (- INR (last (M N))) alpha); rewrite (Ropp_involutive (INR (last (M N)))); fold (frac_part_n_alpha (last (M N))) in |- *; rewrite <- (Rplus_assoc (INR x * alpha) (- (alpha * INR n)) (INR (last (M N)) * alpha)) ; rewrite (Rmult_comm alpha (INR n)); rewrite <- (Ropp_mult_distr_l_reverse (INR n) alpha); rewrite (Rmult_comm (- INR n) alpha); rewrite (Rmult_comm (INR x) alpha); rewrite <- (Rmult_plus_distr_l alpha (INR x) (- INR n)); fold (INR x - INR n)%R in |- *; rewrite <- (minus_INR x n H); rewrite (Rmult_comm (INR (last (M N))) alpha); rewrite <- (Rmult_plus_distr_l alpha (INR (x - n)) (INR (last (M N)))); rewrite <- (plus_INR (x - n) (last (M N))); rewrite (Rmult_comm alpha (INR (x - n + last (M N)))); fold (frac_part_n_alpha (x - n + last (M N))) in |- *; intro; cut (0 < x - n + last (M N)).",
                        "VernacExtend",
                        "bab22d9b7bc553a75de4253d2db6df5309c27e8a"
                    ]
                },
                {
                    "command": [
                        "intro; cut (x - n + last (M N) < M N).",
                        "VernacExtend",
                        "7abf1000c281163b2b860d4544ec928a471b96c0"
                    ]
                },
                {
                    "command": [
                        "intro; generalize (last_n (M N) (x - n + last (M N)) (prop_N (M N)) H4 H6 prop_alpha); intro; clear H4 H6; generalize (Rgt_not_le (frac_part_n_alpha (x - n + last (M N))) (frac_part_n_alpha (last (M N))) H2); intro; elimtype False; auto with arith real.",
                        "VernacExtend",
                        "f83e5c2b2c15943ab3ec93cf9f33ab827de53a82"
                    ]
                },
                {
                    "command": [
                        "apply (tech_inter31b (last (M N)) n x (M N) H1 H H5).",
                        "VernacExtend",
                        "ad3c9974cefcb80d135a92b074eb57de1f7a413a"
                    ]
                },
                {
                    "command": [
                        "rewrite plus_comm; apply (lt_O_plus (last (M N)) (x - n) (last_0 (M N) (prop_N (M N)))).",
                        "VernacExtend",
                        "7d86161a22c2b3b7f5c8a583a577043c3e207f15"
                    ]
                },
                {
                    "command": [
                        "fold (frac_part_n_alpha x) in |- *; fold (frac_part_n_alpha (n - last (M N))) in |- *; assumption.",
                        "VernacExtend",
                        "f8c797577b56903839244f5c3f735b7c72f47e65"
                    ]
                },
                {
                    "command": [
                        "fold (frac_part_n_alpha n) in |- *; fold (frac_part_n_alpha (n - last (M N))) in |- *; apply (Rlt_trans (frac_part_n_alpha n) (frac_part_n_alpha x) (frac_part_n_alpha (n - last (M N))) H7 H8).",
                        "VernacExtend",
                        "caf1b16f5e0d2a462a66f1e3aa653c139121fb55"
                    ]
                },
                {
                    "command": [
                        "generalize (Ropp_lt_gt_contravar (frac_part_n_alpha x) (frac_part_n_alpha (n - last (M N))) H8); unfold Rgt in |- *; intro; generalize (Rplus_lt_compat_l (frac_part_n_alpha n) (- frac_part_n_alpha (n - last (M N))) (- frac_part_n_alpha x) H2); clear H2; fold (frac_part_n_alpha n - frac_part_n_alpha (n - last (M N)))%R in |- *; fold (frac_part_n_alpha n - frac_part_n_alpha x)%R in |- *; intro; generalize (Rplus_lt_compat_l 1 (frac_part_n_alpha n - frac_part_n_alpha (n - last (M N))) (frac_part_n_alpha n - frac_part_n_alpha x) H2); clear H2; rewrite (Rplus_comm 1 (frac_part_n_alpha n - frac_part_n_alpha (n - last (M N)))) ; rewrite (Rplus_comm 1 (frac_part_n_alpha n - frac_part_n_alpha x)); unfold frac_part_n_alpha in |- *; rewrite <- (Rminus_fp2 (INR n * alpha) (INR (n - last (M N)) * alpha)).",
                        "VernacExtend",
                        "d5b90f75143c9f0cc8fe68292be4033ef1a78aec"
                    ]
                },
                {
                    "command": [
                        "rewrite <- (Rminus_fp2 (INR n * alpha) (INR x * alpha)).",
                        "VernacExtend",
                        "63f361a0f721d0165dd1787a5272d135282c019f"
                    ]
                },
                {
                    "command": [
                        "rewrite (Rmult_comm (INR n) alpha); unfold Rminus at 2 in |- *; rewrite <- (Ropp_mult_distr_l_reverse (INR x) alpha); rewrite (Rmult_comm (- INR x) alpha); rewrite <- (Rmult_plus_distr_l alpha (INR n) (- INR x)); fold (INR n - INR x)%R in |- *; rewrite <- (minus_INR n x (lt_le_weak x n H)); rewrite (Rmult_comm alpha (INR (n - x))); fold (frac_part_n_alpha (n - x)) in |- *; rewrite (minus_INR n (last (M N)) (lt_le_weak (last (M N)) n H1)); unfold Rminus in |- *; rewrite (Rmult_comm (INR n + - INR (last (M N))) alpha); rewrite (Rmult_plus_distr_l alpha (INR n) (- INR (last (M N)))); rewrite (Ropp_plus_distr (alpha * INR n) (alpha * - INR (last (M N)))); rewrite <- (Rplus_assoc (alpha * INR n) (- (alpha * INR n)) (- (alpha * - INR (last (M N))))); rewrite (Rplus_opp_r (alpha * INR n)); elim (Rplus_ne (- (alpha * - INR (last (M N))))); intros a b; rewrite b; clear a b; rewrite (Rmult_comm alpha (- INR (last (M N)))); rewrite <- (Ropp_mult_distr_l_reverse (- INR (last (M N))) alpha); rewrite (Ropp_involutive (INR (last (M N)))); fold (frac_part_n_alpha (last (M N))) in |- *; intro; cut (0 < n - x).",
                        "VernacExtend",
                        "d93e2190d74e9c5e3897afafccdf8ac2bea7e674"
                    ]
                },
                {
                    "command": [
                        "intro; cut (n - x < M N).",
                        "VernacExtend",
                        "8ec3f428105cfd6d74eab4b2b34db279ed8a5f10"
                    ]
                },
                {
                    "command": [
                        "intro; generalize (last_n (M N) (n - x) (prop_N (M N)) H4 H6 prop_alpha); intro; generalize (Rgt_not_le (frac_part_n_alpha (n - x)) (frac_part_n_alpha (last (M N))) H2); intro; elimtype False; auto with arith real.",
                        "VernacExtend",
                        "85f284318c61d3475a273e9b4a18cd2da1e99034"
                    ]
                },
                {
                    "command": [
                        "apply (lt_minus_p n (M N) x H0).",
                        "VernacExtend",
                        "bc257f001d595463fd103dc96115c0e196ae4ce0"
                    ]
                },
                {
                    "command": [
                        "apply (lt_minus2 x n H).",
                        "VernacExtend",
                        "d61f36af386cc7afa1836e9d3be5342b5dc48882"
                    ]
                },
                {
                    "command": [
                        "fold (frac_part_n_alpha n) in |- *; fold (frac_part_n_alpha x) in |- *; assumption.",
                        "VernacExtend",
                        "ed4dd012dc831394efc8b4ef3feb420a76490272"
                    ]
                },
                {
                    "command": [
                        "fold (frac_part_n_alpha n) in |- *; fold (frac_part_n_alpha (n - last (M N))) in |- *; apply (Rlt_trans (frac_part_n_alpha n) (frac_part_n_alpha x) (frac_part_n_alpha (n - last (M N))) H7 H8).",
                        "VernacExtend",
                        "caf1b16f5e0d2a462a66f1e3aa653c139121fb55"
                    ]
                },
                {
                    "command": [
                        "rewrite <- H1; rewrite <- (minus_n_n (last (M N))); apply (after_last prop_alpha prop_N (M N)).",
                        "VernacExtend",
                        "96feb4478c4f310466782662c946c139bc0338d2"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "tech1",
            "line_nb": 70,
            "steps": [
                {
                    "command": [
                        "intros; cut (frac_part_n_alpha n < frac_part_n_alpha (n + first N))%R.",
                        "VernacExtend",
                        "54cdab47b7abdabfa20e4e0082b22ec3309a0fb7"
                    ]
                },
                {
                    "command": [
                        "intro; cut (frac_part_n_alpha (n + first N) < frac_part_n_alpha (n + first N - last N))%R.",
                        "VernacExtend",
                        "3479141df367edd59182924bd4e9453d15a65310"
                    ]
                },
                {
                    "command": [
                        "intro; apply (Rlt_trans (frac_part_n_alpha n) (frac_part_n_alpha (n + first N)) (frac_part_n_alpha (n + first N - last N)) H1 H2).",
                        "VernacExtend",
                        "3f31de40e4a6ebf2af279f6f8a44b1c02a991531"
                    ]
                },
                {
                    "command": [
                        "cut (0 < n + first N).",
                        "VernacExtend",
                        "8ee841421d22195a654ab0b07e046c36adb1dd5c"
                    ]
                },
                {
                    "command": [
                        "cut (n + first N < M N).",
                        "VernacExtend",
                        "7b34bfe3bb63ff359c45822a6b7c44e776a83885"
                    ]
                },
                {
                    "command": [
                        "intros; apply (tech_after_lt (M N) (n + first N) (n + first N - last N) H3 H2).",
                        "VernacExtend",
                        "5606c14a5e8d0204fcb11d1ae969d6d152df8b87"
                    ]
                },
                {
                    "command": [
                        "apply (lt_minus_not (last N) (n + first N)).",
                        "VernacExtend",
                        "9668763a4c2547172624548c044b9eddc9c7e791"
                    ]
                },
                {
                    "command": [
                        "generalize (le_minus_plus N (first N) n H); intro; apply (lt_le_trans (last N) N (n + first N) (last_N N (prop_N N)) H4).",
                        "VernacExtend",
                        "55e011643948f7e01b67f594807c4d57d2114bb6"
                    ]
                },
                {
                    "command": [
                        "rewrite (last_eq_M_N alpha_irr prop_alpha prop_N N (M N)); auto with arith real.",
                        "VernacExtend",
                        "9ec47d64d3cd893537b2d8af00788504a4e1b464"
                    ]
                },
                {
                    "command": [
                        "generalize H2; clear H2; rewrite (first_eq_M_N alpha_irr prop_alpha prop_N N (M N)); auto with arith real.",
                        "VernacExtend",
                        "268d4a759981cc7a99572c5ef0b5088b34828656"
                    ]
                },
                {
                    "command": [
                        "intro; cut (last (M N) <= n + first (M N)).",
                        "VernacExtend",
                        "7b5e0af4202cb2f4044473d5cce29a171ce1693f"
                    ]
                },
                {
                    "command": [
                        "intro; apply (inter31b N (n + first (M N)) H4 H2).",
                        "VernacExtend",
                        "69f08fa698fd918acca3e1fb52b6e114cf174421"
                    ]
                },
                {
                    "command": [
                        "rewrite <- (last_eq_M_N alpha_irr prop_alpha prop_N N (M N)); auto with arith real.",
                        "VernacExtend",
                        "c7b4247fc292b348b47b5def081c518cfcb1780a"
                    ]
                },
                {
                    "command": [
                        "rewrite <- (first_eq_M_N alpha_irr prop_alpha prop_N N (M N)); auto with arith real.",
                        "VernacExtend",
                        "edcef7b61df3912090f02072c6a1845b5f6fd9a7"
                    ]
                },
                {
                    "command": [
                        "generalize (le_minus_plus N (first N) n H); intro; apply (le_trans (last N) N (n + first N) (last_N01 N) H4).",
                        "VernacExtend",
                        "48356526b431ce4be089902d1472da314db268ad"
                    ]
                },
                {
                    "command": [
                        "unfold M in |- *; rewrite (plus_comm (first N) (last N)); apply (plus_lt_compat_r n (last N) (first N) H0).",
                        "VernacExtend",
                        "7f14dbc042a00737f113ff275bbb42173446f014"
                    ]
                },
                {
                    "command": [
                        "generalize (le_minus_plus N (first N) n H); intro; cut (0 < N).",
                        "VernacExtend",
                        "bc32faa2b24381272f80b5b02973e8a1c1744465"
                    ]
                },
                {
                    "command": [
                        "intro; apply (lt_le_trans 0 N (n + first N) H3 H2).",
                        "VernacExtend",
                        "4fef8e5663ff8e96fd400603100e7f75da953099"
                    ]
                },
                {
                    "command": [
                        "apply (arith_2_0 N (prop_N N)).",
                        "VernacExtend",
                        "13d417b060a8e4e31902a1700af59b19853e8244"
                    ]
                },
                {
                    "command": [
                        "cut (0 < n).",
                        "VernacExtend",
                        "f49a0c48aeae35f59abfa199ddc34fc7e16c80ce"
                    ]
                },
                {
                    "command": [
                        "cut (n < M N).",
                        "VernacExtend",
                        "bc90301801e32a4ab88ad8def6486f5b094f2c19"
                    ]
                },
                {
                    "command": [
                        "intros; apply (tech_after_lt (M N) n (n + first N) H2 H1).",
                        "VernacExtend",
                        "384b77795b76190bf9387f819153708ab31d3161"
                    ]
                },
                {
                    "command": [
                        "generalize (lt_O_plus n (first N) H2); intro; apply Compare.not_eq_sym; red in |- *; intro; apply (lt_not_eq 0 (n + first N) H3 H4).",
                        "VernacExtend",
                        "e076895c8ea5d2d56364910a65d3d676daa137dc"
                    ]
                },
                {
                    "command": [
                        "rewrite (first_eq_M_N alpha_irr prop_alpha prop_N N (M N)); auto with arith real.",
                        "VernacExtend",
                        "b8bc312c64c1d11308332cc45310a47e564ddfa8"
                    ]
                },
                {
                    "command": [
                        "generalize H0; rewrite (last_eq_M_N alpha_irr prop_alpha prop_N N (M N)); auto with arith real; clear H0; intro; apply (inter31a N n H2 H0).",
                        "VernacExtend",
                        "4b1f657071e1c12e94f4603157755862291ab7bc"
                    ]
                },
                {
                    "command": [
                        "generalize (lt_trans n (last N) N H0 (last_N N (prop_N N))); intro; unfold M in |- *; cut (N <= first N + last N).",
                        "VernacExtend",
                        "768a3c5dd6db22a09e32de211a1ab2d4ce8a7d14"
                    ]
                },
                {
                    "command": [
                        "intro; apply (lt_le_trans n N (first N + last N) H1 H2).",
                        "VernacExtend",
                        "8c559ff41c37a5014e74ef8a823a288ee19082ff"
                    ]
                },
                {
                    "command": [
                        "apply (le_N_M alpha_irr prop_alpha prop_N N (M N)); auto with arith real.",
                        "VernacExtend",
                        "58f14c5962b3063f57982a103120e72698bf6201"
                    ]
                },
                {
                    "command": [
                        "apply (lt_le_trans 0 (N - first N) n (lt_minus2 (first N) N (first_N N (prop_N N))) H).",
                        "VernacExtend",
                        "80074a8c5da422b508bccb0dbe3f65e95141da43"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "tech_suc_N",
            "line_nb": 101,
            "steps": [
                {
                    "command": [
                        "unfold after in |- *; intros; generalize H4; clear H4; case (exist_after_M (frac_part_n_alpha n) (P1 n) (P2 n) N); intro.",
                        "VernacExtend",
                        "b087b4eb5fe61e45a66756fc0f469017f323c247"
                    ]
                },
                {
                    "command": [
                        "elim s; intros x y H4; clear s; elim y; intros; clear y; unfold Rgt in H6; cut (0 <= k).",
                        "VernacExtend",
                        "0c7843812b8ada48c04b9a0623e99c664302bcc5"
                    ]
                },
                {
                    "command": [
                        "elim H6; intros; elim H8; intros; generalize (H11 k H9 H2 H3); unfold Rge in |- *; unfold Rgt in |- *; intro; elim H12; auto with arith real.",
                        "VernacExtend",
                        "0ce5934416fe6ed31006d604d77865f8c7406e29"
                    ]
                },
                {
                    "command": [
                        "intro; elimtype False; auto with arith real.",
                        "VernacExtend",
                        "28cabe8cd47c63eaab97346e59601ae3cc3e4e1c"
                    ]
                },
                {
                    "command": [
                        "apply (lt_le_weak 0 k H1).",
                        "VernacExtend",
                        "110aec24acc1699ebd577fb1b9b847d9a182c92b"
                    ]
                },
                {
                    "command": [
                        "unfold frac_part_n_alpha in |- *; simpl in |- *; rewrite Rmult_0_l; rewrite fp_R0; elim (base_fp (INR k * alpha)); intros; unfold Rge in H4; elim H4; auto with arith real.",
                        "VernacExtend",
                        "d390d838cc98820b69c87091e6a8925950e3afd1"
                    ]
                },
                {
                    "command": [
                        "intro; elimtype False; auto with arith real.",
                        "VernacExtend",
                        "28cabe8cd47c63eaab97346e59601ae3cc3e4e1c"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "tech_suc_M",
            "line_nb": 110,
            "steps": [
                {
                    "command": [
                        "intros; elim H1; intros; clear H1.",
                        "VernacExtend",
                        "a4f741ed011bbcb61158ccb899471f07d873e300"
                    ]
                },
                {
                    "command": [
                        "elim H2; intros; elim H3; intros; clear H3; clear H2; elim H5; intros; clear H5.",
                        "VernacExtend",
                        "08b7621a5c878bf971b2b749dc295b6350a19cae"
                    ]
                },
                {
                    "command": [
                        "cut (0 < n).",
                        "VernacExtend",
                        "f49a0c48aeae35f59abfa199ddc34fc7e16c80ce"
                    ]
                },
                {
                    "command": [
                        "intro; cut (n < M N).",
                        "VernacExtend",
                        "cdea30d3e2ed785c73c8432425f01534dfa4c112"
                    ]
                },
                {
                    "command": [
                        "intros; cut (x < M N).",
                        "VernacExtend",
                        "f1e58a370f5810c8763dfb6c35a5efbc9215edf2"
                    ]
                },
                {
                    "command": [
                        "intro; elim (Rtotal_order (frac_part_n_alpha x) (frac_part_n_alpha (n + first N))); intro.",
                        "VernacExtend",
                        "43dd3d1c3a3505a60d2d510106a86ee55cddd3b1"
                    ]
                },
                {
                    "command": [
                        "cut (n + first N = after (M N) n).",
                        "VernacExtend",
                        "66ade0ee62ab9d11ff96c162a419b2de1ddf4265"
                    ]
                },
                {
                    "command": [
                        "intro; rewrite H9 in H8; cut (frac_part_n_alpha x <> frac_part_n_alpha (after (M N) n)).",
                        "VernacExtend",
                        "7081a260f5d8d8d6d97dfe71d4e5d10bc34d91ea"
                    ]
                },
                {
                    "command": [
                        "intro; generalize (tech_suc_N (M N) n H5 H6 x H1 H7 H2 H10).",
                        "VernacExtend",
                        "4d367217ddaec1536f0428fff4848444164f64a4"
                    ]
                },
                {
                    "command": [
                        "intro; generalize (Rlt_asym (frac_part_n_alpha x) (frac_part_n_alpha (after (M N) n)) H8).",
                        "VernacExtend",
                        "b3c6fc434e12efcd69bf8192ade34eb33ecc90af"
                    ]
                },
                {
                    "command": [
                        "intro; auto with arith real.",
                        "VernacExtend",
                        "6ab4da6a5407ca491390fb0f9eb0ff8637d04545"
                    ]
                },
                {
                    "command": [
                        "apply (Rlt_dichotomy_converse (frac_part_n_alpha x) (frac_part_n_alpha (after (M N) n))).",
                        "VernacExtend",
                        "67b30a1c0cdd664ece93a957bf765978002cf3da"
                    ]
                },
                {
                    "command": [
                        "left; auto with arith real.",
                        "VernacExtend",
                        "a4f964796383376ea58dd3f559710e63d39725f7"
                    ]
                },
                {
                    "command": [
                        "apply sym_equal.",
                        "VernacExtend",
                        "c17550e3f7c4c9c406c00d64da9614cfdcfa6161"
                    ]
                },
                {
                    "command": [
                        "rewrite (first_eq_M_N alpha_irr prop_alpha prop_N N (M N)).",
                        "VernacExtend",
                        "e13356eac99ceeae0ddaaf0be105af4bbf5ba3f3"
                    ]
                },
                {
                    "command": [
                        "apply (inter31a N n H5).",
                        "VernacExtend",
                        "4357d18377af492126cb992b93433ab41836cec9"
                    ]
                },
                {
                    "command": [
                        "rewrite <- (last_eq_M_N alpha_irr prop_alpha prop_N N (M N)).",
                        "VernacExtend",
                        "ec95bb099b7e481db14e6899667aa9370ed53dfc"
                    ]
                },
                {
                    "command": [
                        "assumption.",
                        "VernacExtend",
                        "41f0308313ff87e6ab2782f90d6021ec4b55d932"
                    ]
                },
                {
                    "command": [
                        "auto with arith real.",
                        "VernacExtend",
                        "9fd854feec53284ad4f693eac9f5f651fc003948"
                    ]
                },
                {
                    "command": [
                        "auto with arith real.",
                        "VernacExtend",
                        "9fd854feec53284ad4f693eac9f5f651fc003948"
                    ]
                },
                {
                    "command": [
                        "elim H8; intro; clear H8.",
                        "VernacExtend",
                        "1709560cc30df991d7eac4bf27737a9cf9123636"
                    ]
                },
                {
                    "command": [
                        "cut (x <> n + first N).",
                        "VernacExtend",
                        "fc21431a68385d890cb1b426de632c75aa826a54"
                    ]
                },
                {
                    "command": [
                        "intro; generalize (contra_tech_fp_alp_irr alpha_irr prop_alpha x (n + first N) H8); auto with arith real.",
                        "VernacExtend",
                        "e45e0f2560e4a6d81ee9d9bac1425f6e1fcd1f0a"
                    ]
                },
                {
                    "command": [
                        "cut (x < n + first N).",
                        "VernacExtend",
                        "0038f907ef043fbc5f75988ede22c7782ffab5c7"
                    ]
                },
                {
                    "command": [
                        "intro; red in |- *; intro; apply (lt_not_eq x (n + first N) H8); assumption.",
                        "VernacExtend",
                        "d338bbb2e59cddbf87d7ff01817fe40abe8e0f8f"
                    ]
                },
                {
                    "command": [
                        "generalize (le_minus_plus N (first N) n H); intro; apply (lt_le_trans x N (n + first N) H4 H8).",
                        "VernacExtend",
                        "0d903ac3afe634c2891ef2719f25516a59cccef9"
                    ]
                },
                {
                    "command": [
                        "cut (0 < n + first (M N)).",
                        "VernacExtend",
                        "dacb5c955b291cd0901a7402f054fa9efd159338"
                    ]
                },
                {
                    "command": [
                        "intro; cut (n + first (M N) < M N).",
                        "VernacExtend",
                        "d04a05eeaf37adba46affa39c1b15195cd033d86"
                    ]
                },
                {
                    "command": [
                        "intro; cut (frac_part_n_alpha x <> frac_part_n_alpha (after (M N) (n + first (M N)))).",
                        "VernacExtend",
                        "53f84c385855450625843a68a8731834c67b1241"
                    ]
                },
                {
                    "command": [
                        "intro; unfold Rgt in H9; rewrite (first_eq_M_N alpha_irr prop_alpha prop_N N (M N) (refl_equal (first N + last N))) in H9; generalize (tech_suc_N (M N) (n + first (M N)) H8 H10 x H1 H7 H9 H11); intro; cut (last (M N) <= n + first (M N)).",
                        "VernacExtend",
                        "451fcd41e3a72b9c544140cfea9050bb1f14697a"
                    ]
                },
                {
                    "command": [
                        "intro; rewrite (inter31b N (n + first (M N)) H13 H10) in H12.",
                        "VernacExtend",
                        "225f78ede8807b61e6e00221a9d4fc8dfa789b00"
                    ]
                },
                {
                    "command": [
                        "rewrite (first_eq_M_N alpha_irr prop_alpha prop_N N (M N) (refl_equal (first N + last N))) in H3; rewrite (last_eq_M_N alpha_irr prop_alpha prop_N N (M N) (refl_equal (first N + last N))) in H3; generalize (Rlt_asym (frac_part_n_alpha (n + first (M N) - last (M N))) (frac_part_n_alpha x) H12); intro; auto with arith real.",
                        "VernacExtend",
                        "84ac4a754f0c37ce95828e22432361a1a6f8b799"
                    ]
                },
                {
                    "command": [
                        "generalize (le_minus_plus N (first N) n H); intro.",
                        "VernacExtend",
                        "9ab9ba442fdf0c80ec7ab981fa5a6d422f92ccca"
                    ]
                },
                {
                    "command": [
                        "generalize (last_N01 N); intro.",
                        "VernacExtend",
                        "e0396bd6d12e8f6df2384550e18cba3d24edced1"
                    ]
                },
                {
                    "command": [
                        "rewrite <- (first_eq_M_N alpha_irr prop_alpha prop_N N (M N) (refl_equal (first N + last N))); rewrite <- (last_eq_M_N alpha_irr prop_alpha prop_N N (M N) (refl_equal (first N + last N))); apply (le_trans (last N) N (n + first N) H14 H13).",
                        "VernacExtend",
                        "07c1ae73a5c5448742ab21ccb364b8c230643288"
                    ]
                },
                {
                    "command": [
                        "cut (last (M N) <= n + first (M N)).",
                        "VernacExtend",
                        "4a949d70a8e6991f66f132bed50ac1b66d3808c6"
                    ]
                },
                {
                    "command": [
                        "intro; rewrite (inter31b N (n + first (M N)) H11 H10); rewrite <- (first_eq_M_N alpha_irr prop_alpha prop_N N (M N) (refl_equal (first N + last N))); rewrite <- (last_eq_M_N alpha_irr prop_alpha prop_N N (M N) (refl_equal (first N + last N))); apply (Rlt_dichotomy_converse (frac_part_n_alpha x) (frac_part_n_alpha (n + first N - last N))).",
                        "VernacExtend",
                        "628c4e39a9922048b6a242dc8410c20130c6818f"
                    ]
                },
                {
                    "command": [
                        "left; assumption.",
                        "VernacExtend",
                        "3caf0ae349d7f7f5e42b9e4faad0c11c70cd858a"
                    ]
                },
                {
                    "command": [
                        "generalize (le_minus_plus N (first N) n H); intro.",
                        "VernacExtend",
                        "9ab9ba442fdf0c80ec7ab981fa5a6d422f92ccca"
                    ]
                },
                {
                    "command": [
                        "generalize (last_N01 N); intro; rewrite <- (first_eq_M_N alpha_irr prop_alpha prop_N N (M N) (refl_equal (first N + last N))); rewrite <- (last_eq_M_N alpha_irr prop_alpha prop_N N (M N) (refl_equal (first N + last N))); apply (le_trans (last N) N (n + first N) H12 H11).",
                        "VernacExtend",
                        "7443541d1dfc528d02f3b9d6206b0cc3253d7ba5"
                    ]
                },
                {
                    "command": [
                        "rewrite <- (first_eq_M_N alpha_irr prop_alpha prop_N N (M N) (refl_equal (first N + last N))); unfold M in |- *; rewrite (plus_comm (first N) (last N)); apply (plus_lt_compat_r n (last N) (first N) H0).",
                        "VernacExtend",
                        "5f012688efc9b3cf0520c6d3a516b371acb1f16c"
                    ]
                },
                {
                    "command": [
                        "apply (lt_O_plus n (first (M N)) H5).",
                        "VernacExtend",
                        "1dee0da63e01e70dfb26c6f910fedc4ccf66b291"
                    ]
                },
                {
                    "command": [
                        "cut (N <= M N).",
                        "VernacExtend",
                        "66a979f18130e2115843f5de6fef86af90136368"
                    ]
                },
                {
                    "command": [
                        "intro; apply (lt_le_trans x N (M N) H4 H7).",
                        "VernacExtend",
                        "a6a14ef9c63bb0375e5c86dff685446201c76bbe"
                    ]
                },
                {
                    "command": [
                        "apply (le_N_M alpha_irr prop_alpha prop_N N (M N) (refl_equal (first N + last N))).",
                        "VernacExtend",
                        "a29501e442b7b5f40e4cb17361dd4eca68d96387"
                    ]
                },
                {
                    "command": [
                        "cut (last N < N).",
                        "VernacExtend",
                        "e53b4753c0e0af554121585fa54129fa6e18bd79"
                    ]
                },
                {
                    "command": [
                        "intro; cut (N <= M N).",
                        "VernacExtend",
                        "4a3842ff48c5d7c9b588feb69123edaeea956c54"
                    ]
                },
                {
                    "command": [
                        "intro; generalize (lt_trans n (last N) N H0 H6).",
                        "VernacExtend",
                        "327a86a0fe23474f396d35fc2fd51495c4b20a25"
                    ]
                },
                {
                    "command": [
                        "intro; apply (lt_le_trans n N (M N) H8 H7).",
                        "VernacExtend",
                        "95768b1408263c7f63a3eb04c34b86f6713afb65"
                    ]
                },
                {
                    "command": [
                        "apply (le_N_M alpha_irr prop_alpha prop_N N (M N) (refl_equal (first N + last N))).",
                        "VernacExtend",
                        "a29501e442b7b5f40e4cb17361dd4eca68d96387"
                    ]
                },
                {
                    "command": [
                        "apply (last_N N (prop_N N)).",
                        "VernacExtend",
                        "1fdadac1157c92450d13ce91f98ecd8b389e9397"
                    ]
                },
                {
                    "command": [
                        "cut (0 < N - first N).",
                        "VernacExtend",
                        "7652f87b334400594ca594a305205c7dad2ff1ab"
                    ]
                },
                {
                    "command": [
                        "intro; apply (lt_le_trans 0 (N - first N) n H5 H).",
                        "VernacExtend",
                        "b17ca38d20c2748e6b8ee8cb5883643903102d26"
                    ]
                },
                {
                    "command": [
                        "apply (lt_minus2 (first N) N (first_N N (prop_N N))).",
                        "VernacExtend",
                        "44a807ce08a5c6fe5176c5dd584a98b0e615614b"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "tech_suc_M1",
            "line_nb": 166,
            "steps": [
                {
                    "command": [
                        "intros; generalize (tech_suc_M N n H H0); intro; red in |- *; intro; apply H1; split with k; auto with arith real.",
                        "VernacExtend",
                        "01bc9b5b155034d9f13cc7c642250353b02d7b21"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "eq_after_M_N1",
            "line_nb": 169,
            "steps": [
                {
                    "command": [
                        "intros; cut (n < last (M N)).",
                        "VernacExtend",
                        "81e12cb3bf4a7431590ff40b160cde5d804a6c5e"
                    ]
                },
                {
                    "command": [
                        "intro; generalize (inter31a N n H H1); rewrite <- (first_eq_M_N alpha_irr prop_alpha prop_N N (M N) (refl_equal (M N))) ; intro; apply (tech_fp_alp_irr alpha_irr (after (M N) n) (after N n)); apply (Rge_antisym (frac_part_n_alpha (after (M N) n)) (frac_part_n_alpha (after N n))).",
                        "VernacExtend",
                        "8ec45e06b05db3180ff98615ed17fa90e0a95d18"
                    ]
                },
                {
                    "command": [
                        "apply (Rnot_lt_ge (frac_part_n_alpha (after (M N) n)) (frac_part_n_alpha (after N n))); red in |- *; intro; cut (0 < after (M N) n).",
                        "VernacExtend",
                        "75606e3ac0a73ca8b1e2069e48fc8ae62513a181"
                    ]
                },
                {
                    "command": [
                        "intro; cut (after (M N) n < N).",
                        "VernacExtend",
                        "536d9a90aaa3793bbefeb3fec2e627b696a8b543"
                    ]
                },
                {
                    "command": [
                        "intro; cut (frac_part_n_alpha n < frac_part_n_alpha (after (M N) n))%R.",
                        "VernacExtend",
                        "18fa28e09f40bb149a4f00b659ccbff726c68e1a"
                    ]
                },
                {
                    "command": [
                        "intro; generalize (tech_suc_N N n H (contra_lt_minus_p n N (first N) H0) (after (M N) n) H4 H5 H6 (Rlt_dichotomy_converse (frac_part_n_alpha (after (M N) n)) (frac_part_n_alpha (after N n)) (or_introl (frac_part_n_alpha (after (M N) n) > frac_part_n_alpha (after N n))%R H3))); intro; generalize (Rlt_asym (frac_part_n_alpha (after (M N) n)) (frac_part_n_alpha (after N n)) H3); intro; elimtype False; auto with arith real.",
                        "VernacExtend",
                        "7fdb74e95ec34dd51af26305902db07d84f81710"
                    ]
                },
                {
                    "command": [
                        "apply (tech_after_lt (M N) n (after (M N) n) H (lt_le_trans n N (M N) (contra_lt_minus_p n N (first N) H0) (le_N_M alpha_irr prop_alpha prop_N N (M N) (refl_equal (M N))))); auto with arith real.",
                        "VernacExtend",
                        "4d99a607ed09d4b79d82f6dd5837e609aba64a8d"
                    ]
                },
                {
                    "command": [
                        "rewrite H2; red in |- *; intro; apply (lt_O_plus_eq n (first N) H); auto with arith real.",
                        "VernacExtend",
                        "a7a0d996e8aa31491344c86686fc4bfb2a60695f"
                    ]
                },
                {
                    "command": [
                        "rewrite H2; apply (lt_n_minus_plus n N (first N) H0).",
                        "VernacExtend",
                        "58e00b8a63a491c14c1b38137c4a552cab8ef330"
                    ]
                },
                {
                    "command": [
                        "rewrite H2; apply (lt_O_plus n (first N) H).",
                        "VernacExtend",
                        "e66b1cd8872d10041f5637fcf3e042b34334212e"
                    ]
                },
                {
                    "command": [
                        "apply (Rnot_lt_ge (frac_part_n_alpha (after N n)) (frac_part_n_alpha (after (M N) n))); red in |- *; intro; apply (prop_after (M N) n (after (M N) n)); auto with arith real.",
                        "VernacExtend",
                        "cee6dc87496249b0f6dcc1090c8f5f691c1b927a"
                    ]
                },
                {
                    "command": [
                        "split with (after N n); split.",
                        "VernacExtend",
                        "5ada67e57952f352e89cfbf4751d046cfbb5382e"
                    ]
                },
                {
                    "command": [
                        "unfold after in |- *; case (exist_after_M (frac_part_n_alpha n) (P1 n) (P2 n) N).",
                        "VernacExtend",
                        "af374c92076789fe3d64cad55739adf8929039a2"
                    ]
                },
                {
                    "command": [
                        "intro; elim s; intros x y; elim y; intros; assumption.",
                        "VernacExtend",
                        "7cbd540729b37e6d72b475f5abc4dea07c207c36"
                    ]
                },
                {
                    "command": [
                        "intro; generalize (a (last N) (le_O_n (last N)) (last_N N (prop_N N))); intro; elim H4; intros; clear a H4; generalize (last_n N n (prop_N N) H (contra_lt_minus_p n N (first N) H0) prop_alpha); intro; cut (frac_part_n_alpha n = frac_part_n_alpha (last N)).",
                        "VernacExtend",
                        "ec903281c4c21c5ff73037b9f34286a9a8485ea5"
                    ]
                },
                {
                    "command": [
                        "intro; generalize (tech_fp_alp_irr alpha_irr n (last N) H7); rewrite (last_eq_M_N alpha_irr prop_alpha prop_N N (M N)); auto with arith real.",
                        "VernacExtend",
                        "7dff70c649d537d31c9773c12f4297d5e42bab44"
                    ]
                },
                {
                    "command": [
                        "intro; generalize (lt_not_eq n (last (M N)) H1); intro; elimtype False; auto with arith real.",
                        "VernacExtend",
                        "b1c57e21d3b6804bbfaa372413b704d0e9c5c156"
                    ]
                },
                {
                    "command": [
                        "elim (Rle_le_eq (frac_part_n_alpha n) (frac_part_n_alpha (last N))); intros; clear H8; apply H7; auto with arith real.",
                        "VernacExtend",
                        "52201a60e7c77904e4747f0adc35412a67a4f88b"
                    ]
                },
                {
                    "command": [
                        "split.",
                        "VernacExtend",
                        "55abc140132bd88981001ac656020469a8d503eb"
                    ]
                },
                {
                    "command": [
                        "cut (after N n < N).",
                        "VernacExtend",
                        "6c53edd9cfba9db450c60ae9978fbe146a036b53"
                    ]
                },
                {
                    "command": [
                        "intro; apply (lt_le_trans (after N n) N (M N) H4 (le_N_M alpha_irr prop_alpha prop_N N (M N) (refl_equal (M N)))).",
                        "VernacExtend",
                        "532aac279707639d87ea7f135a76c92219dbf422"
                    ]
                },
                {
                    "command": [
                        "unfold after in |- *; case (exist_after_M (frac_part_n_alpha n) (P1 n) (P2 n) N).",
                        "VernacExtend",
                        "af374c92076789fe3d64cad55739adf8929039a2"
                    ]
                },
                {
                    "command": [
                        "intro; elim s; intros x y; elim y; intros; elim H5; intros; assumption.",
                        "VernacExtend",
                        "c71ad4a833a88850c5858081f18eb8544bc1792b"
                    ]
                },
                {
                    "command": [
                        "intro; apply (arith_2_0 N (prop_N N)).",
                        "VernacExtend",
                        "8af1426f57b8853755fc6b024955eb6f3751edae"
                    ]
                },
                {
                    "command": [
                        "split; auto with arith real.",
                        "VernacExtend",
                        "30c9218abdcc13b2eff0a88e400483f8702cdf0b"
                    ]
                },
                {
                    "command": [
                        "apply (tech_after_lt N n (after N n) H (contra_lt_minus_p n N (first N) H0)); auto with arith real.",
                        "VernacExtend",
                        "af701690654e830c61f4f8bb777602b79fc2db25"
                    ]
                },
                {
                    "command": [
                        "red in |- *; unfold after in |- *; case (exist_after_M (frac_part_n_alpha n) (P1 n) (P2 n) N).",
                        "VernacExtend",
                        "6a5542e570d29f9240615cb23db9fde337f93716"
                    ]
                },
                {
                    "command": [
                        "intro; elim s; intros x y H4; elim y; intros; generalize (lt_not_eq 0 x H5); intro; auto with arith real.",
                        "VernacExtend",
                        "d9fa4a3f4511a5cc4c246dbaecfb1ae615417da0"
                    ]
                },
                {
                    "command": [
                        "intros; generalize (a (last N) (le_O_n (last N)) (last_N N (prop_N N))); intro; elim H5; intros; clear a H5; generalize (last_n N n (prop_N N) H (contra_lt_minus_p n N (first N) H0) prop_alpha); intro; cut (frac_part_n_alpha n = frac_part_n_alpha (last N)).",
                        "VernacExtend",
                        "6b0de08506cb57a3ce96863632dc084f56c72d4e"
                    ]
                },
                {
                    "command": [
                        "intro; generalize (tech_fp_alp_irr alpha_irr n (last N) H8); rewrite (last_eq_M_N alpha_irr prop_alpha prop_N N (M N)); auto with arith real.",
                        "VernacExtend",
                        "6c7555d221d2286345063f2a92e3dec85276d5e2"
                    ]
                },
                {
                    "command": [
                        "intro; generalize (lt_not_eq n (last (M N)) H1); intro; elimtype False; auto with arith real.",
                        "VernacExtend",
                        "b1c57e21d3b6804bbfaa372413b704d0e9c5c156"
                    ]
                },
                {
                    "command": [
                        "elim (Rle_le_eq (frac_part_n_alpha n) (frac_part_n_alpha (last N))); intros; clear H9; apply H8; auto with arith real.",
                        "VernacExtend",
                        "6f62ab47e856518e22ef96f8bd793fd9f1b25534"
                    ]
                },
                {
                    "command": [
                        "cut (N - first N <= last (M N)).",
                        "VernacExtend",
                        "e0a1bc6ae30a561d3b0058368000224e64cf347b"
                    ]
                },
                {
                    "command": [
                        "intro; apply (lt_le_trans n (N - first N) (last (M N)) H0 H1).",
                        "VernacExtend",
                        "5d692aa83ab0824a52d2e325ec1e8abec2a10634"
                    ]
                },
                {
                    "command": [
                        "generalize (le_N_M alpha_irr prop_alpha prop_N N (M N) (refl_equal (M N))); unfold M at 1 in |- *; rewrite <- (last_eq_M_N alpha_irr prop_alpha prop_N N (M N) (refl_equal (M N))) ; intro; apply (le_plus_min N (first N) (last N) H1).",
                        "VernacExtend",
                        "e476af84934408f55d061e45f42b3b5b3b5d491c"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "eq_after_M_N2",
            "line_nb": 206,
            "steps": [
                {
                    "command": [
                        "intros; generalize (le_lt_or_eq (last N) n H); intro; elim H1; intro; clear H1.",
                        "VernacExtend",
                        "89e4b581346b2b981099661e57869dfb9c057a1d"
                    ]
                },
                {
                    "command": [
                        "rewrite (last_eq_M_N alpha_irr prop_alpha prop_N N (M N) (refl_equal (M N))) in H; generalize (inter31b N n H (lt_le_trans n N (M N) H0 (le_N_M alpha_irr prop_alpha prop_N N (M N) (refl_equal (M N))))); rewrite <- (last_eq_M_N alpha_irr prop_alpha prop_N N (M N) (refl_equal (M N))) ; intro; apply (tech_fp_alp_irr alpha_irr (after (M N) n) (after N n)); apply (Rge_antisym (frac_part_n_alpha (after (M N) n)) (frac_part_n_alpha (after N n))).",
                        "VernacExtend",
                        "bb983dfccd6e8528f3311782edaa6e1711c88db3"
                    ]
                },
                {
                    "command": [
                        "apply (Rnot_lt_ge (frac_part_n_alpha (after (M N) n)) (frac_part_n_alpha (after N n))); red in |- *; intro; cut (0 < after (M N) n).",
                        "VernacExtend",
                        "75606e3ac0a73ca8b1e2069e48fc8ae62513a181"
                    ]
                },
                {
                    "command": [
                        "intro; cut (after (M N) n < N).",
                        "VernacExtend",
                        "536d9a90aaa3793bbefeb3fec2e627b696a8b543"
                    ]
                },
                {
                    "command": [
                        "intro; cut (frac_part_n_alpha n < frac_part_n_alpha (after (M N) n))%R.",
                        "VernacExtend",
                        "18fa28e09f40bb149a4f00b659ccbff726c68e1a"
                    ]
                },
                {
                    "command": [
                        "intro; generalize (tech_suc_N N n (lt_trans 0 (last N) n (last_0 N (prop_N N)) H2) H0 (after (M N) n) H4 H5 H6 (Rlt_dichotomy_converse (frac_part_n_alpha (after (M N) n)) (frac_part_n_alpha (after N n)) (or_introl (frac_part_n_alpha (after (M N) n) > frac_part_n_alpha (after N n))%R H3))); intro; generalize (Rlt_asym (frac_part_n_alpha (after (M N) n)) (frac_part_n_alpha (after N n)) H3); intro; elimtype False; auto with arith real.",
                        "VernacExtend",
                        "6126e1e64093ce73b52750cc74361ba7587b179e"
                    ]
                },
                {
                    "command": [
                        "apply (tech_after_lt (M N) n (after (M N) n) (lt_trans 0 (last N) n (last_0 N (prop_N N)) H2) (lt_le_trans n N (M N) H0 (le_N_M alpha_irr prop_alpha prop_N N (M N) (refl_equal (M N))))); auto with arith real.",
                        "VernacExtend",
                        "590fcf2cad8acf29e83373d7f59931f6a2d4d8da"
                    ]
                },
                {
                    "command": [
                        "rewrite H1; red in |- *; intro; apply (lt_minus_not (last N) n H2); auto with arith real.",
                        "VernacExtend",
                        "ed427e982b860c2ba1c14eca6f0130ceaa9ded62"
                    ]
                },
                {
                    "command": [
                        "rewrite H1; apply (lt_minus_p n N (last N) H0).",
                        "VernacExtend",
                        "2c85b12be3bf245193f011b99432295a5ad122fc"
                    ]
                },
                {
                    "command": [
                        "rewrite H1; apply (lt_minus2 (last N) n H2).",
                        "VernacExtend",
                        "f12cf29d808cf0bc4411b00413bdc3cbc01f3c06"
                    ]
                },
                {
                    "command": [
                        "apply (Rnot_lt_ge (frac_part_n_alpha (after N n)) (frac_part_n_alpha (after (M N) n))); red in |- *; intro; apply (prop_after (M N) n (after (M N) n)); auto with arith real.",
                        "VernacExtend",
                        "cee6dc87496249b0f6dcc1090c8f5f691c1b927a"
                    ]
                },
                {
                    "command": [
                        "split with (after N n); split.",
                        "VernacExtend",
                        "5ada67e57952f352e89cfbf4751d046cfbb5382e"
                    ]
                },
                {
                    "command": [
                        "unfold after in |- *; case (exist_after_M (frac_part_n_alpha n) (P1 n) (P2 n) N).",
                        "VernacExtend",
                        "af374c92076789fe3d64cad55739adf8929039a2"
                    ]
                },
                {
                    "command": [
                        "intro; elim s; intros x y; elim y; intros; assumption.",
                        "VernacExtend",
                        "7cbd540729b37e6d72b475f5abc4dea07c207c36"
                    ]
                },
                {
                    "command": [
                        "intro; generalize (a (last N) (le_O_n (last N)) (last_N N (prop_N N))); intro; elim H4; intros; clear a H4; generalize (last_n N n (prop_N N) (lt_trans 0 (last N) n (last_0 N (prop_N N)) H2) H0 prop_alpha); intro; cut (frac_part_n_alpha n = frac_part_n_alpha (last N)).",
                        "VernacExtend",
                        "89663936b5d9b7a609512974bbcb1f1be8c4b4f9"
                    ]
                },
                {
                    "command": [
                        "intro; generalize (tech_fp_alp_irr alpha_irr n (last N) H7).",
                        "VernacExtend",
                        "42eff5ea54c7902be764dfd5966df3d54bc7509c"
                    ]
                },
                {
                    "command": [
                        "intro; generalize (lt_not_eq (last N) n H2); intro; elimtype False; auto with arith real.",
                        "VernacExtend",
                        "fc322a384bc469bfae98ee4f2ba7602e26162447"
                    ]
                },
                {
                    "command": [
                        "elim (Rle_le_eq (frac_part_n_alpha n) (frac_part_n_alpha (last N))); intros; clear H8; apply H7; auto with arith real.",
                        "VernacExtend",
                        "52201a60e7c77904e4747f0adc35412a67a4f88b"
                    ]
                },
                {
                    "command": [
                        "split.",
                        "VernacExtend",
                        "55abc140132bd88981001ac656020469a8d503eb"
                    ]
                },
                {
                    "command": [
                        "cut (after N n < N).",
                        "VernacExtend",
                        "6c53edd9cfba9db450c60ae9978fbe146a036b53"
                    ]
                },
                {
                    "command": [
                        "intro; apply (lt_le_trans (after N n) N (M N) H4 (le_N_M alpha_irr prop_alpha prop_N N (M N) (refl_equal (M N)))).",
                        "VernacExtend",
                        "532aac279707639d87ea7f135a76c92219dbf422"
                    ]
                },
                {
                    "command": [
                        "unfold after in |- *; case (exist_after_M (frac_part_n_alpha n) (P1 n) (P2 n) N).",
                        "VernacExtend",
                        "af374c92076789fe3d64cad55739adf8929039a2"
                    ]
                },
                {
                    "command": [
                        "intro; elim s; intros x y; elim y; intros; elim H5; intros; assumption.",
                        "VernacExtend",
                        "c71ad4a833a88850c5858081f18eb8544bc1792b"
                    ]
                },
                {
                    "command": [
                        "intro; apply (arith_2_0 N (prop_N N)).",
                        "VernacExtend",
                        "8af1426f57b8853755fc6b024955eb6f3751edae"
                    ]
                },
                {
                    "command": [
                        "split; auto with arith real.",
                        "VernacExtend",
                        "30c9218abdcc13b2eff0a88e400483f8702cdf0b"
                    ]
                },
                {
                    "command": [
                        "apply (tech_after_lt N n (after N n) (lt_trans 0 (last N) n (last_0 N (prop_N N)) H2) H0); auto with arith real.",
                        "VernacExtend",
                        "56164d0ce4607e95b26cf579103b0299b6809614"
                    ]
                },
                {
                    "command": [
                        "red in |- *; unfold after in |- *; case (exist_after_M (frac_part_n_alpha n) (P1 n) (P2 n) N).",
                        "VernacExtend",
                        "6a5542e570d29f9240615cb23db9fde337f93716"
                    ]
                },
                {
                    "command": [
                        "intro; elim s; intros x y H4; elim y; intros; generalize (lt_not_eq 0 x H5); intro; auto with arith real.",
                        "VernacExtend",
                        "d9fa4a3f4511a5cc4c246dbaecfb1ae615417da0"
                    ]
                },
                {
                    "command": [
                        "intros; generalize (a (last N) (le_O_n (last N)) (last_N N (prop_N N))); intro; elim H5; intros; clear a H5; generalize (last_n N n (prop_N N) (lt_trans 0 (last N) n (last_0 N (prop_N N)) H2) H0 prop_alpha); intro; cut (frac_part_n_alpha n = frac_part_n_alpha (last N)).",
                        "VernacExtend",
                        "60052c857e067bc4c687dc18fc9adcc91fb8105a"
                    ]
                },
                {
                    "command": [
                        "intro; generalize (tech_fp_alp_irr alpha_irr n (last N) H8); intro; generalize (lt_not_eq (last N) n H2); intro; auto with arith real.",
                        "VernacExtend",
                        "c6ba0e5254d2b3682af1e70885c685ea5ccc25a4"
                    ]
                },
                {
                    "command": [
                        "elim (Rle_le_eq (frac_part_n_alpha n) (frac_part_n_alpha (last N))); intros; clear H9; apply H8; auto with arith real.",
                        "VernacExtend",
                        "6f62ab47e856518e22ef96f8bd793fd9f1b25534"
                    ]
                },
                {
                    "command": [
                        "rewrite <- H2; rewrite (after_last prop_alpha prop_N N); rewrite (last_eq_M_N alpha_irr prop_alpha prop_N N (M N) (refl_equal (first N + last N))); auto with arith real; rewrite (after_last prop_alpha prop_N (M N)); trivial.",
                        "VernacExtend",
                        "9fa226ba7030e2002cff0f1de27fcdf13c1baa1c"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        }
    ]
}