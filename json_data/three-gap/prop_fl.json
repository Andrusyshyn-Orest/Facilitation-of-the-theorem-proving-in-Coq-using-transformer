{
    "filename": "prop_fl.v",
    "coq_project": "three-gap",
    "vernac_cmds": [
        [
            "Require Export prop_elem.",
            "VernacRequire",
            "cf6d20c7c656d398aa16d083c26406cb94c6ee08"
        ],
        [
            "Require Export Classical_Prop.",
            "VernacRequire",
            "6611664b7a3cccb612f3d55b3ec011d072dd6a54"
        ],
        [
            "Unset Standard Proposition Elimination Names.",
            "VernacUnsetOption",
            "911574cdf91989455d0d3d11c7a9b0ca10fd1ae6"
        ],
        [
            "Section theoreme.",
            "VernacBeginSection",
            "f31210f70e3ccd50690d649d6e9bac439bd490da"
        ],
        [
            "Hypothesis alpha_irr : forall n p : Z, (alpha * IZR p)%R <> IZR n.",
            "VernacAssumption",
            "d1463fa3aed43a44449cecc557f14d23d27445ae"
        ],
        [
            "Hypothesis prop_alpha : (0 < alpha)%R /\\ (alpha < 1)%R.",
            "VernacAssumption",
            "c1ff7b84d703766b6ad195f204c74533055ea468"
        ],
        [
            "Hypothesis prop_N : forall N : nat, N >= 2.",
            "VernacAssumption",
            "3b14420983b72ff2e11078790793f33189cdc7e5"
        ],
        [
            "Lemma tech_fp_alp_irr : forall n m : nat, frac_part_n_alpha n = frac_part_n_alpha m -> n = m.",
            "VernacStartTheoremProof",
            "d97b4e95c03bf80b4bee64f03b9ee60166d061e9"
        ],
        [
            "intros; generalize (Rminus_diag_eq (frac_part_n_alpha n) (frac_part_n_alpha m) H); unfold frac_part_n_alpha in |- *; elim (Rminus_fp1 (INR n * alpha) (INR m * alpha)).",
            "VernacExtend",
            "67a6c5d3b0757042a6d0d26c5c982c77da66f89d"
        ],
        [
            "unfold Rminus in |- *; rewrite <- Ropp_mult_distr_l_reverse; rewrite (Rmult_comm (INR n) alpha); rewrite (Rmult_comm (- INR m) alpha); rewrite <- Rmult_plus_distr_l; intro; elim (fp_nat (alpha * (INR n + - INR m)) H0); intros; fold (INR n - INR m)%R in H1; rewrite (INR_IZR_INZ n) in H1; rewrite (INR_IZR_INZ m) in H1; rewrite (Z_R_minus (Z_of_nat n) (Z_of_nat m)) in H1; generalize (alpha_irr x (Z_of_nat n - Z_of_nat m)); intro; elimtype False; auto.",
            "VernacExtend",
            "e7b7a8b2dcdbb40c4aeb2b3f1021d979df0536c7"
        ],
        [
            "unfold Rge in |- *; auto.",
            "VernacExtend",
            "faac03e72f00c3aa7546de69f12b0db2aad95f3b"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma fp_first_R0 : forall N : nat, (frac_part_n_alpha (first N) > 0)%R.",
            "VernacStartTheoremProof",
            "a6df97fdcaacbf58cad56fe0ab0d8d0dde22e9a0"
        ],
        [
            "intro; generalize (P1 (first N)); intro; unfold Rle in H; unfold Rgt in |- *; elim H; intro; auto; clear H; rewrite <- fp_R0 in H0; rewrite <- (Rmult_0_l alpha) in H0; cut (INR 0 = 0%R).",
            "VernacExtend",
            "db86fdacaf32d4b8714687bbad8dc97435448581"
        ],
        [
            "intro; rewrite <- H in H0; cut (frac_part (INR 0 * alpha) = frac_part_n_alpha 0).",
            "VernacExtend",
            "b213040e372346f7cb1834de1f7808f1d475f6ac"
        ],
        [
            "intro; rewrite H1 in H0; generalize (tech_fp_alp_irr 0 (first N) H0); intro; generalize (first_0 N (prop_N N)); intro; generalize (lt_not_eq 0 (first N) H3); intro; elimtype False; auto.",
            "VernacExtend",
            "f280314c93865fab7133b26373f848da3383394c"
        ],
        [
            "unfold frac_part_n_alpha in |- *; auto.",
            "VernacExtend",
            "5303dfa336ececb6dd1cb504c968680e132be6d0"
        ],
        [
            "auto.",
            "VernacExtend",
            "1f09da0addd069b3b65326f8c71967acc1e985af"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma contra_tech_fp_alp_irr : forall n m : nat, n <> m -> frac_part_n_alpha n <> frac_part_n_alpha m.",
            "VernacStartTheoremProof",
            "6756282281c006ef4cba6f85eade10b06b5851e3"
        ],
        [
            "intros; generalize (tech_fp_alp_irr n m); tauto.",
            "VernacExtend",
            "352f45227c433ef619f13fd7c292d47ef9c41007"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma contradiction1 : forall N k : nat, N <= k -> k < first N + last N -> (frac_part_n_alpha k < frac_part_n_alpha (first N))%R \\/ (frac_part_n_alpha k > frac_part_n_alpha (last N))%R -> False.",
            "VernacStartTheoremProof",
            "700f352c29231265e4b39c452f5af8592902be01"
        ],
        [
            "intros; elim H1; intro; clear H1.",
            "VernacExtend",
            "325093b4ab763de345af5ca1747ab189cfb68dba"
        ],
        [
            "cut ((frac_part_n_alpha (last N) - (frac_part_n_alpha k - frac_part_n_alpha (first N) + 1))%R = 0%R).",
            "VernacExtend",
            "dcd5b518dc76d71ed9f5967e9a9be6c4f9953d82"
        ],
        [
            "unfold frac_part_n_alpha in |- *; rewrite <- (Rminus_fp2 (INR k * alpha) (INR (first N) * alpha) H2); generalize (Rminus_fp1 (INR (last N) * alpha) (INR k * alpha - INR (first N) * alpha)); intros; cut (frac_part (INR (last N) * alpha) >= frac_part (INR k * alpha - INR (first N) * alpha))%R.",
            "VernacExtend",
            "3a2e6c357331b07486ae8537bddb93f9fe3bec01"
        ],
        [
            "intro; rewrite <- (H1 H4) in H3; clear H1 H4; elim (fp_nat (INR (last N) * alpha - (INR k * alpha - INR (first N) * alpha)) H3).",
            "VernacExtend",
            "968f84b1f61c0b5a65685e185c309816c62db42a"
        ],
        [
            "unfold Rminus in |- *; rewrite <- (Ropp_mult_distr_l_reverse (INR (first N)) alpha); rewrite (Ropp_plus_distr (INR k * alpha) (- INR (first N) * alpha)); rewrite <- (Ropp_mult_distr_l_reverse (INR k) alpha); rewrite <- (Ropp_mult_distr_l_reverse (- INR (first N)) alpha); rewrite (Ropp_involutive (INR (first N))); rewrite (Rmult_comm (- INR k) alpha); rewrite (Rmult_comm (INR (first N)) alpha); rewrite (Rmult_comm (INR (last N)) alpha); rewrite <- (Rmult_plus_distr_l alpha (- INR k) (INR (first N))); rewrite <- (Rmult_plus_distr_l alpha (INR (last N)) (- INR k + INR (first N))) ; rewrite (Rplus_comm (- INR k) (INR (first N))); rewrite <- (Rplus_assoc (INR (last N)) (INR (first N)) (- INR k)); fold (INR (last N) + INR (first N) - INR k)%R in |- *; rewrite <- (plus_INR (last N) (first N)); rewrite (INR_IZR_INZ (last N + first N)).",
            "VernacExtend",
            "787a9184dc842cf25b75f128a906ab83572366d6"
        ],
        [
            "rewrite (INR_IZR_INZ k).",
            "VernacExtend",
            "55cd3714c30effb6022d77f8749fb06cf529a8f6"
        ],
        [
            "rewrite (Z_R_minus (Z_of_nat (last N + first N)) (Z_of_nat k)).",
            "VernacExtend",
            "aa8160c6c6dfa93830a52a321a5a3fb540d935d7"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "generalize (alpha_irr x (Z_of_nat (last N + first N) - Z_of_nat k)).",
            "VernacExtend",
            "54c84cc8682d8852fc8d20cd03cada03c9f09b1d"
        ],
        [
            "intro.",
            "VernacExtend",
            "3999be354c758ba0d1866e0fcc78a7288779a224"
        ],
        [
            "auto.",
            "VernacExtend",
            "1f09da0addd069b3b65326f8c71967acc1e985af"
        ],
        [
            "unfold Rge in |- *; right; apply Rminus_diag_uniq; auto.",
            "VernacExtend",
            "6d8d161128ca90620cdafe0bd892ac4eaebd015a"
        ],
        [
            "cut ((frac_part_n_alpha k - frac_part_n_alpha (first N) + 1 <= frac_part_n_alpha (last N))%R /\\ (frac_part_n_alpha k - frac_part_n_alpha (last N) + 1 >= frac_part_n_alpha (first N))%R).",
            "VernacExtend",
            "d1b321597ae2bed7fb0ccd65d98c1be77c7646f2"
        ],
        [
            "intro; elim H1; intros; clear H1.",
            "VernacExtend",
            "7d28599a05e37682e70a14af4ad72d3234f9f5e7"
        ],
        [
            "generalize (Rle_minus (frac_part_n_alpha k - frac_part_n_alpha (first N) + 1) (frac_part_n_alpha (last N)) H3); generalize (Rge_minus (frac_part_n_alpha k - frac_part_n_alpha (last N) + 1) (frac_part_n_alpha (first N)) H4); intros; clear H3 H4; generalize (Rge_le (frac_part_n_alpha k - frac_part_n_alpha (last N) + 1 - frac_part_n_alpha (first N)) 0 H1); intro; clear H1; rewrite <- Ropp_minus_distr; rewrite <- Ropp_0; apply Ropp_eq_compat.",
            "VernacExtend",
            "05e613ed19027138b24b0c96541c282cf6d45d55"
        ],
        [
            "unfold Rminus in H3; rewrite (Rplus_comm (frac_part_n_alpha k) (- frac_part_n_alpha (last N))) in H3; rewrite (Rplus_assoc (- frac_part_n_alpha (last N)) (frac_part_n_alpha k) 1) in H3.",
            "VernacExtend",
            "cf886c99efacb7ab1ea6b47befb8be3736c49269"
        ],
        [
            "rewrite (Rplus_assoc (- frac_part_n_alpha (last N)) (frac_part_n_alpha k + 1) (- frac_part_n_alpha (first N))) in H3; rewrite (Rplus_comm (- frac_part_n_alpha (last N)) (frac_part_n_alpha k + 1 + - frac_part_n_alpha (first N))) in H3; rewrite (Rplus_assoc (frac_part_n_alpha k) 1 (- frac_part_n_alpha (first N))) in H3; rewrite (Rplus_comm 1 (- frac_part_n_alpha (first N))) in H3; rewrite <- (Rplus_assoc (frac_part_n_alpha k) (- frac_part_n_alpha (first N)) 1) in H3; fold (frac_part_n_alpha k - frac_part_n_alpha (first N))%R in H3; fold (frac_part_n_alpha k - frac_part_n_alpha (first N) + 1 - frac_part_n_alpha (last N))%R in H3; elim (Rle_le_eq (frac_part_n_alpha k - frac_part_n_alpha (first N) + 1 - frac_part_n_alpha (last N)) 0); auto.",
            "VernacExtend",
            "48ef8e4e7647291627f653ddc2a4e8fc2a0407a6"
        ],
        [
            "split; unfold frac_part_n_alpha in |- *.",
            "VernacExtend",
            "c18cb71ff404e23788135bf5945a8698df79af84"
        ],
        [
            "unfold frac_part_n_alpha in H2; rewrite <- (Rminus_fp2 (INR k * alpha) (INR (first N) * alpha) H2); elim (tech_first_last N (k - first N) (prop_N N)).",
            "VernacExtend",
            "4815753dbbbca8576675bf1ac70c981dcddd5acb"
        ],
        [
            "intros; unfold ordre_total in H3; unfold frac_part_n_alpha in H3; cut (first N <= k).",
            "VernacExtend",
            "1e7b4008c729068ef01e935a5d3022948c5cffc9"
        ],
        [
            "intro; rewrite (minus_INR k (first N) H4) in H3; unfold Rminus in H3; rewrite (Rmult_comm (INR k + - INR (first N)) alpha) in H3; rewrite (Rmult_plus_distr_l alpha (INR k) (- INR (first N))) in H3; rewrite (Rmult_comm alpha (- INR (first N))) in H3; rewrite (Ropp_mult_distr_l_reverse (INR (first N)) alpha) in H3; fold (alpha * INR k - INR (first N) * alpha)%R in H3; rewrite (Rmult_comm alpha (INR k)) in H3; auto.",
            "VernacExtend",
            "1d6e8c746fc0ebad18d64ff46436bd4fd2880c98"
        ],
        [
            "generalize (first_N01 N); intro; apply (le_trans (first N) N k H4 H).",
            "VernacExtend",
            "49a44b246003b0bbf5ae0662f35e85737124b79a"
        ],
        [
            "elim (lt_minus2 (first N) k); auto.",
            "VernacExtend",
            "b28851b87c8ce2329f9d13211c3baed87e329876"
        ],
        [
            "generalize (first_N N (prop_N N)); intro.",
            "VernacExtend",
            "7d3a79eaa7cf8af4c7a6d6bee33f35f4a497184e"
        ],
        [
            "apply (lt_le_trans (first N) N k H1 H).",
            "VernacExtend",
            "477bae0f06277efb75be1714ecdd1036db6b7848"
        ],
        [
            "cut (k - first N < last N).",
            "VernacExtend",
            "67423d8efa0ee96acfc8cba3434f70e2c05080d0"
        ],
        [
            "generalize (last_N01 N); intros; apply (lt_le_trans (k - first N) (last N) N H3 H1).",
            "VernacExtend",
            "bea403318f83e0b9276754275b2720f854489d58"
        ],
        [
            "apply (lt_plus_minus k (first N) (last N)).",
            "VernacExtend",
            "c3447c38fd355d8057fa324f06cb2a4809c312fb"
        ],
        [
            "generalize (first_N N (prop_N N)); intro; apply (lt_le_trans (first N) N k H1 H).",
            "VernacExtend",
            "ec0278094fa924622d2a9fee8a39354405ff0b4d"
        ],
        [
            "assumption.",
            "VernacExtend",
            "41f0308313ff87e6ab2782f90d6021ec4b55d932"
        ],
        [
            "cut (frac_part_n_alpha k < frac_part_n_alpha (last N))%R.",
            "VernacExtend",
            "6a5a8bac1941b688de49555f08c95ec546662ef0"
        ],
        [
            "intro; unfold frac_part_n_alpha in H1; rewrite <- (Rminus_fp2 (INR k * alpha) (INR (last N) * alpha) H1); elim (tech_first_last N (k - last N) (prop_N N)).",
            "VernacExtend",
            "23622e479607bf57767ff4f9373868f9fda161c4"
        ],
        [
            "intros; unfold ordre_total in H3; unfold frac_part_n_alpha in H3; cut (last N <= k).",
            "VernacExtend",
            "b2d11c126ae94e3e25736fdd65b61ace35c1fbbe"
        ],
        [
            "intro; rewrite (minus_INR k (last N) H5) in H3; unfold Rminus in H3; rewrite (Rmult_comm (INR k + - INR (last N)) alpha) in H3; rewrite (Rmult_plus_distr_l alpha (INR k) (- INR (last N))) in H3; rewrite (Rmult_comm alpha (- INR (last N))) in H3; rewrite (Ropp_mult_distr_l_reverse (INR (last N)) alpha) in H3; fold (alpha * INR k - INR (last N) * alpha)%R in H3; rewrite (Rmult_comm alpha (INR k)) in H3; apply (Rle_ge (frac_part (INR (first N) * alpha)) (frac_part (INR k * alpha - INR (last N) * alpha)) (H3 prop_alpha)).",
            "VernacExtend",
            "fa57204592237d39e86e911a906aa14d6d13f83c"
        ],
        [
            "generalize (last_N01 N); intro; apply (le_trans (last N) N k H5 H).",
            "VernacExtend",
            "49504a2656e303ad317ada02d238f749dbfe1178"
        ],
        [
            "elim (lt_minus2 (last N) k); auto.",
            "VernacExtend",
            "ceb27d6062e18ee10acac4cf78bbf4a7e09fc519"
        ],
        [
            "generalize (last_N N (prop_N N)); intro.",
            "VernacExtend",
            "f0fb5eeb9cd40dc3beb0a7ff46fc69bc4a423689"
        ],
        [
            "apply (lt_le_trans (last N) N k H3 H).",
            "VernacExtend",
            "0f10b183018ac53e7511d864275c54413a3152ec"
        ],
        [
            "cut (k - last N < first N).",
            "VernacExtend",
            "dba2e9d946b76d32cccebd30cde2e424e69aa9d2"
        ],
        [
            "generalize (first_N01 N); intros; apply (lt_le_trans (k - last N) (first N) N H4 H3).",
            "VernacExtend",
            "2953ad6a7f8283c516fd36d7206f3c12c3858518"
        ],
        [
            "apply (lt_plus_minus k (last N) (first N)).",
            "VernacExtend",
            "624fb8af6c77a1082470e336e476278a1ec0a709"
        ],
        [
            "generalize (last_N N (prop_N N)); intro; apply (lt_le_trans (last N) N k H3 H).",
            "VernacExtend",
            "6f2dd01adec31a3aaddaeb392e381dfcdfcba57f"
        ],
        [
            "rewrite plus_comm; assumption.",
            "VernacExtend",
            "0c99d1995ae2daaa4c43bac8eb5b64800c47f2c4"
        ],
        [
            "generalize (le_first_last N (prop_N N)); unfold ordre_total in |- *; intros; apply (Rlt_le_trans (frac_part_n_alpha k) (frac_part_n_alpha (first N)) (frac_part_n_alpha (last N)) H2 (H1 prop_alpha)).",
            "VernacExtend",
            "9d849ef9b6fc76d160e732f8061ae200af1c065e"
        ],
        [
            "cut ((frac_part_n_alpha (last N) - (frac_part_n_alpha k - frac_part_n_alpha (first N)))%R = 0%R).",
            "VernacExtend",
            "61f12f421d3a2ab417ec6b57330566285fad9d28"
        ],
        [
            "cut (frac_part_n_alpha k >= frac_part_n_alpha (first N))%R.",
            "VernacExtend",
            "0898289983eaf74d2317e4906cd61fe6f273793b"
        ],
        [
            "unfold frac_part_n_alpha in |- *; intro; rewrite <- (Rminus_fp1 (INR k * alpha) (INR (first N) * alpha) H1); generalize (Rminus_fp1 (INR (last N) * alpha) (INR k * alpha - INR (first N) * alpha)); intros; cut (frac_part (INR (last N) * alpha) >= frac_part (INR k * alpha - INR (first N) * alpha))%R.",
            "VernacExtend",
            "54a297408dc26737b377bad3579e6f94f9a1ea1c"
        ],
        [
            "intro; rewrite <- (H3 H5) in H4; clear H3 H5; elim (fp_nat (INR (last N) * alpha - (INR k * alpha - INR (first N) * alpha)) H4).",
            "VernacExtend",
            "68bfa50691e546526a33dc5a47fec4c37f04052f"
        ],
        [
            "unfold Rminus in |- *; rewrite <- (Ropp_mult_distr_l_reverse (INR (first N)) alpha); rewrite (Ropp_plus_distr (INR k * alpha) (- INR (first N) * alpha)); rewrite <- (Ropp_mult_distr_l_reverse (INR k) alpha); rewrite <- (Ropp_mult_distr_l_reverse (- INR (first N)) alpha); rewrite (Ropp_involutive (INR (first N))); rewrite (Rmult_comm (- INR k) alpha); rewrite (Rmult_comm (INR (first N)) alpha); rewrite (Rmult_comm (INR (last N)) alpha); rewrite <- (Rmult_plus_distr_l alpha (- INR k) (INR (first N))); rewrite <- (Rmult_plus_distr_l alpha (INR (last N)) (- INR k + INR (first N))) ; rewrite (Rplus_comm (- INR k) (INR (first N))); rewrite <- (Rplus_assoc (INR (last N)) (INR (first N)) (- INR k)); fold (INR (last N) + INR (first N) - INR k)%R in |- *; rewrite <- (plus_INR (last N) (first N)).",
            "VernacExtend",
            "aa78c4df7892466713f89fa071137bf016203e15"
        ],
        [
            "rewrite (INR_IZR_INZ (last N + first N)).",
            "VernacExtend",
            "1aa494535488047142d4e706d86d554575b0b6c4"
        ],
        [
            "rewrite (INR_IZR_INZ k).",
            "VernacExtend",
            "55cd3714c30effb6022d77f8749fb06cf529a8f6"
        ],
        [
            "rewrite (Z_R_minus (Z_of_nat (last N + first N)) (Z_of_nat k)).",
            "VernacExtend",
            "aa8160c6c6dfa93830a52a321a5a3fb540d935d7"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "generalize (alpha_irr x (Z_of_nat (last N + first N) - Z_of_nat k)).",
            "VernacExtend",
            "54c84cc8682d8852fc8d20cd03cada03c9f09b1d"
        ],
        [
            "intro.",
            "VernacExtend",
            "3999be354c758ba0d1866e0fcc78a7288779a224"
        ],
        [
            "auto.",
            "VernacExtend",
            "1f09da0addd069b3b65326f8c71967acc1e985af"
        ],
        [
            "unfold Rge in |- *; right; apply Rminus_diag_uniq; auto.",
            "VernacExtend",
            "6d8d161128ca90620cdafe0bd892ac4eaebd015a"
        ],
        [
            "generalize (le_first_last N (prop_N N)); unfold ordre_total in |- *; intros; unfold Rgt in H2; cut (frac_part_n_alpha (first N) <= frac_part_n_alpha k)%R.",
            "VernacExtend",
            "d223b25194d1a911ff44e5be5d5378589333410b"
        ],
        [
            "intro; apply (Rle_ge (frac_part_n_alpha (first N)) (frac_part_n_alpha k) H3).",
            "VernacExtend",
            "2f16cfe8b05a7190d75b6b5ed65c535b73238124"
        ],
        [
            "cut (frac_part_n_alpha (first N) < frac_part_n_alpha k)%R.",
            "VernacExtend",
            "ab57effef84b3062ed28b15cf0625a3f794842af"
        ],
        [
            "intro; apply (Rlt_le (frac_part_n_alpha (first N)) (frac_part_n_alpha k) H3).",
            "VernacExtend",
            "43cfd1e58747a7004c1e1ec37688e4db96e76286"
        ],
        [
            "apply (Rle_lt_trans (frac_part_n_alpha (first N)) (frac_part_n_alpha (last N)) (frac_part_n_alpha k) (H1 prop_alpha) H2).",
            "VernacExtend",
            "8ed4392c3fdcf42bbda50f795ff97acc68347e23"
        ],
        [
            "cut ((frac_part_n_alpha k - frac_part_n_alpha (first N) <= frac_part_n_alpha (last N))%R /\\ (frac_part_n_alpha k - frac_part_n_alpha (last N) >= frac_part_n_alpha (first N))%R).",
            "VernacExtend",
            "48f8ebd5b0d9ff207dd245305e729b6011068344"
        ],
        [
            "intro; elim H1; intros; clear H1.",
            "VernacExtend",
            "7d28599a05e37682e70a14af4ad72d3234f9f5e7"
        ],
        [
            "generalize (Rle_minus (frac_part_n_alpha k - frac_part_n_alpha (first N)) (frac_part_n_alpha (last N)) H3); generalize (Rge_minus (frac_part_n_alpha k - frac_part_n_alpha (last N)) (frac_part_n_alpha (first N)) H4); intros; clear H3 H4; generalize (Rge_le (frac_part_n_alpha k - frac_part_n_alpha (last N) - frac_part_n_alpha (first N)) 0 H1); intro; clear H1; rewrite <- Ropp_minus_distr; rewrite <- Ropp_0; apply Ropp_eq_compat.",
            "VernacExtend",
            "6b7e663c5cbd3df23c9a381daf992d96e1f87a95"
        ],
        [
            "unfold Rminus in H3; rewrite (Rplus_assoc (frac_part_n_alpha k) (- frac_part_n_alpha (last N)) (- frac_part_n_alpha (first N))) in H3; rewrite (Rplus_comm (- frac_part_n_alpha (last N)) (- frac_part_n_alpha (first N))) in H3; rewrite <- (Rplus_assoc (frac_part_n_alpha k) (- frac_part_n_alpha (first N)) (- frac_part_n_alpha (last N))) in H3; fold (frac_part_n_alpha k - frac_part_n_alpha (first N))%R in H3; fold (frac_part_n_alpha k - frac_part_n_alpha (first N) - frac_part_n_alpha (last N))%R in H3; elim (Rle_le_eq (frac_part_n_alpha k - frac_part_n_alpha (first N) - frac_part_n_alpha (last N)) 0); auto.",
            "VernacExtend",
            "64fee993e4ab666626e636a1c03c3371c4b40eac"
        ],
        [
            "split.",
            "VernacExtend",
            "55abc140132bd88981001ac656020469a8d503eb"
        ],
        [
            "cut (frac_part_n_alpha k >= frac_part_n_alpha (first N))%R.",
            "VernacExtend",
            "0898289983eaf74d2317e4906cd61fe6f273793b"
        ],
        [
            "unfold frac_part_n_alpha in |- *; intro; rewrite <- (Rminus_fp1 (INR k * alpha) (INR (first N) * alpha) H1); elim (tech_first_last N (k - first N) (prop_N N)).",
            "VernacExtend",
            "173c0d4ab2aac149c50e6fcf8de12b3dc2c647cd"
        ],
        [
            "intros; unfold ordre_total in H4; unfold frac_part_n_alpha in H4; cut (first N <= k).",
            "VernacExtend",
            "a25fa862477c88f4f4743d0808e612849f10c168"
        ],
        [
            "intro; rewrite (minus_INR k (first N) H5) in H4; unfold Rminus in H4; rewrite (Rmult_comm (INR k + - INR (first N)) alpha) in H4; rewrite (Rmult_plus_distr_l alpha (INR k) (- INR (first N))) in H4; rewrite (Rmult_comm alpha (- INR (first N))) in H4; rewrite (Ropp_mult_distr_l_reverse (INR (first N)) alpha) in H4; fold (alpha * INR k - INR (first N) * alpha)%R in H4; rewrite (Rmult_comm alpha (INR k)) in H4; auto.",
            "VernacExtend",
            "1ad3c5f407e464a81a4ad081a9f3a174ad9aed75"
        ],
        [
            "generalize (first_N01 N); intro; apply (le_trans (first N) N k H5 H).",
            "VernacExtend",
            "5cc23898275ed511173f8e1e9046b99bc17081c9"
        ],
        [
            "elim (lt_minus2 (first N) k); auto.",
            "VernacExtend",
            "b28851b87c8ce2329f9d13211c3baed87e329876"
        ],
        [
            "generalize (first_N N (prop_N N)); intro.",
            "VernacExtend",
            "7d3a79eaa7cf8af4c7a6d6bee33f35f4a497184e"
        ],
        [
            "apply (lt_le_trans (first N) N k H3 H).",
            "VernacExtend",
            "488f6942f514d13c1559d0aeafa6b320202b7c9b"
        ],
        [
            "cut (k - first N < last N).",
            "VernacExtend",
            "67423d8efa0ee96acfc8cba3434f70e2c05080d0"
        ],
        [
            "generalize (last_N01 N); intros; apply (lt_le_trans (k - first N) (last N) N H4 H3).",
            "VernacExtend",
            "2a7375e087bdea0fcdc8e691c0b90e035c5d9579"
        ],
        [
            "apply (lt_plus_minus k (first N) (last N)).",
            "VernacExtend",
            "c3447c38fd355d8057fa324f06cb2a4809c312fb"
        ],
        [
            "generalize (first_N N (prop_N N)); intro; apply (lt_le_trans (first N) N k H3 H).",
            "VernacExtend",
            "54152a4c55bc177252633f4b8d05b83d9d992144"
        ],
        [
            "assumption.",
            "VernacExtend",
            "41f0308313ff87e6ab2782f90d6021ec4b55d932"
        ],
        [
            "unfold frac_part_n_alpha in |- *; generalize (le_first_last N (prop_N N)); unfold ordre_total in |- *; intros; unfold Rgt in H2; cut (frac_part_n_alpha (first N) <= frac_part_n_alpha k)%R.",
            "VernacExtend",
            "fe7568d5fc19978caaf5f697d1a7f45aeeb3fb5d"
        ],
        [
            "intro; apply (Rle_ge (frac_part_n_alpha (first N)) (frac_part_n_alpha k) H3).",
            "VernacExtend",
            "2f16cfe8b05a7190d75b6b5ed65c535b73238124"
        ],
        [
            "cut (frac_part_n_alpha (first N) < frac_part_n_alpha k)%R.",
            "VernacExtend",
            "ab57effef84b3062ed28b15cf0625a3f794842af"
        ],
        [
            "intro; apply (Rlt_le (frac_part_n_alpha (first N)) (frac_part_n_alpha k) H3).",
            "VernacExtend",
            "43cfd1e58747a7004c1e1ec37688e4db96e76286"
        ],
        [
            "apply (Rle_lt_trans (frac_part_n_alpha (first N)) (frac_part_n_alpha (last N)) (frac_part_n_alpha k) (H1 prop_alpha) H2).",
            "VernacExtend",
            "8ed4392c3fdcf42bbda50f795ff97acc68347e23"
        ],
        [
            "cut (frac_part_n_alpha k >= frac_part_n_alpha (last N))%R.",
            "VernacExtend",
            "3dfde18daf51cdb921a24f06c0a9ed75be2a18c7"
        ],
        [
            "unfold frac_part_n_alpha in |- *; intro; rewrite <- (Rminus_fp1 (INR k * alpha) (INR (last N) * alpha) H1); elim (tech_first_last N (k - last N) (prop_N N)).",
            "VernacExtend",
            "8a673a7b864789d1d4cc4093922a13fd5f492072"
        ],
        [
            "intros; unfold ordre_total in H3; unfold frac_part_n_alpha in H3; cut (last N <= k).",
            "VernacExtend",
            "b2d11c126ae94e3e25736fdd65b61ace35c1fbbe"
        ],
        [
            "intro; rewrite (minus_INR k (last N) H5) in H3; unfold Rminus in H3; rewrite (Rmult_comm (INR k + - INR (last N)) alpha) in H3; rewrite (Rmult_plus_distr_l alpha (INR k) (- INR (last N))) in H3; rewrite (Rmult_comm alpha (- INR (last N))) in H3; rewrite (Ropp_mult_distr_l_reverse (INR (last N)) alpha) in H3; fold (alpha * INR k - INR (last N) * alpha)%R in H3; rewrite (Rmult_comm alpha (INR k)) in H3; apply (Rle_ge (frac_part (INR (first N) * alpha)) (frac_part (INR k * alpha - INR (last N) * alpha)) (H3 prop_alpha)).",
            "VernacExtend",
            "fa57204592237d39e86e911a906aa14d6d13f83c"
        ],
        [
            "generalize (last_N01 N); intro; apply (le_trans (last N) N k H5 H).",
            "VernacExtend",
            "49504a2656e303ad317ada02d238f749dbfe1178"
        ],
        [
            "elim (lt_minus2 (last N) k); auto.",
            "VernacExtend",
            "ceb27d6062e18ee10acac4cf78bbf4a7e09fc519"
        ],
        [
            "generalize (last_N N (prop_N N)); intro.",
            "VernacExtend",
            "f0fb5eeb9cd40dc3beb0a7ff46fc69bc4a423689"
        ],
        [
            "apply (lt_le_trans (last N) N k H3 H).",
            "VernacExtend",
            "0f10b183018ac53e7511d864275c54413a3152ec"
        ],
        [
            "cut (k - last N < first N).",
            "VernacExtend",
            "dba2e9d946b76d32cccebd30cde2e424e69aa9d2"
        ],
        [
            "generalize (first_N01 N); intros; apply (lt_le_trans (k - last N) (first N) N H4 H3).",
            "VernacExtend",
            "2953ad6a7f8283c516fd36d7206f3c12c3858518"
        ],
        [
            "apply (lt_plus_minus k (last N) (first N)).",
            "VernacExtend",
            "624fb8af6c77a1082470e336e476278a1ec0a709"
        ],
        [
            "generalize (last_N N (prop_N N)); intro; apply (lt_le_trans (last N) N k H3 H).",
            "VernacExtend",
            "6f2dd01adec31a3aaddaeb392e381dfcdfcba57f"
        ],
        [
            "rewrite plus_comm; assumption.",
            "VernacExtend",
            "0c99d1995ae2daaa4c43bac8eb5b64800c47f2c4"
        ],
        [
            "apply Rgt_ge; auto.",
            "VernacExtend",
            "71ff73b7d8a764efd5828a5dfdf9811246d82a62"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma absurd1 : forall N k : nat, N <= k -> k < first N + last N -> (frac_part_n_alpha k >= frac_part_n_alpha (first N))%R /\\ (frac_part_n_alpha k <= frac_part_n_alpha (last N))%R.",
            "VernacStartTheoremProof",
            "62c722bf04a2a5c72ca21f697d514c407032942b"
        ],
        [
            "intros; generalize (contradiction1 N k H H0); intro; cut (~ (frac_part_n_alpha k < frac_part_n_alpha (first N))%R /\\ ~ (frac_part_n_alpha k > frac_part_n_alpha (last N))%R).",
            "VernacExtend",
            "a255dd0d8392ef4b92943e1da7c4b2cfe5ff7560"
        ],
        [
            "intro; elim H2; intros; split.",
            "VernacExtend",
            "c41c3fcc052a46f27eaf198562cd24033edd9637"
        ],
        [
            "apply (Rnot_lt_ge (frac_part_n_alpha k) (frac_part_n_alpha (first N)) H3).",
            "VernacExtend",
            "ae6b64ed54aa2d813564a7f262b80314f764f998"
        ],
        [
            "apply (Rnot_gt_le (frac_part_n_alpha k) (frac_part_n_alpha (last N)) H4).",
            "VernacExtend",
            "82aa4b067da16f45be76ecaa7585d8fd4192824d"
        ],
        [
            "apply (not_or_and (frac_part_n_alpha k < frac_part_n_alpha (first N))%R (frac_part_n_alpha k > frac_part_n_alpha (last N))%R H1).",
            "VernacExtend",
            "2725f4866b7ee705655c4b2cf0e4f9bf5b2a88e7"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma absurd_first : forall N k : nat, 0 < k -> k < first N + last N -> (frac_part_n_alpha (first N) <= frac_part_n_alpha k)%R.",
            "VernacStartTheoremProof",
            "5d79a98485a1ef6b6bc9820347aec1a591c8fb43"
        ],
        [
            "intros; elim inser_trans_lt with 0 k (first N + last N) N.",
            "VernacExtend",
            "9ef96eaa2d8f42b220fa3a9a75ea09131f410f64"
        ],
        [
            "intro y; elim y; intros; apply (first_n N k (prop_N N) H1 H2 prop_alpha).",
            "VernacExtend",
            "43a0eb8cff02cb0c5788f514a6e3c2b20a573ef3"
        ],
        [
            "intro y; elim y; intros.",
            "VernacExtend",
            "b81617548a725e077b97450b4f8b2f2621ffd3ee"
        ],
        [
            "elim (absurd1 N k H1 H2); intros.",
            "VernacExtend",
            "57da0bac39985fe7ddcab7038186a0f8fcc0415d"
        ],
        [
            "unfold Rge in H3; unfold Rle in |- *; unfold Rgt in H3; elim H3; intro.",
            "VernacExtend",
            "d457debc417d1d77764ef0fa15766c77ea65eb71"
        ],
        [
            "left; assumption.",
            "VernacExtend",
            "3caf0ae349d7f7f5e42b9e4faad0c11c70cd858a"
        ],
        [
            "right; auto.",
            "VernacExtend",
            "1f0a695ab06b3950e6a7adf329d300b1f859fe9d"
        ],
        [
            "auto.",
            "VernacExtend",
            "1f09da0addd069b3b65326f8c71967acc1e985af"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma absurd_last : forall N k : nat, 0 < k -> k < first N + last N -> (frac_part_n_alpha k <= frac_part_n_alpha (last N))%R.",
            "VernacStartTheoremProof",
            "a14ed883976ac5648e9a23a3b33f08709b758bca"
        ],
        [
            "intros; elim inser_trans_lt with 0 k (first N + last N) N.",
            "VernacExtend",
            "9ef96eaa2d8f42b220fa3a9a75ea09131f410f64"
        ],
        [
            "intro y; elim y; intros; apply (last_n N k (prop_N N) H1 H2 prop_alpha).",
            "VernacExtend",
            "917ec5694528fae233b225800bf879f8d63c5e79"
        ],
        [
            "intro y; elim y; intros.",
            "VernacExtend",
            "b81617548a725e077b97450b4f8b2f2621ffd3ee"
        ],
        [
            "elim (absurd1 N k H1 H2); intros; auto.",
            "VernacExtend",
            "eae46dd523d62d83ababb91121f9bd03e6438d31"
        ],
        [
            "auto.",
            "VernacExtend",
            "1f09da0addd069b3b65326f8c71967acc1e985af"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma tech_first_aux : forall N a : nat, 0 < a -> a < N -> ((forall b : nat, 0 < b -> b < N -> (frac_part_n_alpha a <= frac_part_n_alpha b)%R) <-> a = first N).",
            "VernacStartTheoremProof",
            "b0618bf3a1803d1a641ac577ef61899bb3f44e1c"
        ],
        [
            "intros; split; intro.",
            "VernacExtend",
            "30c96e47a522a77a5351e4399d9dffcbe0777f62"
        ],
        [
            "cut (frac_part_n_alpha a = frac_part_n_alpha (first N)).",
            "VernacExtend",
            "8afe0df54d5559c8e3b78bfd1547296eae908a07"
        ],
        [
            "intro; apply (tech_fp_alp_irr a (first N) H2).",
            "VernacExtend",
            "d3dcc160534138613939d4a1ba49ed0e3ad16225"
        ],
        [
            "elim (Rle_le_eq (frac_part_n_alpha a) (frac_part_n_alpha (first N))); intros; clear H3; generalize (H1 (first N) (first_0 N (prop_N N)) (first_N N (prop_N N))); generalize (first_n N a (prop_N N) H H0 prop_alpha); intros; apply H2.",
            "VernacExtend",
            "12b755728d4bd812e36d623e3054c0c2e6943da9"
        ],
        [
            "split; auto.",
            "VernacExtend",
            "fcd44a714bd12fa54b1c7746996e44dbac16df06"
        ],
        [
            "intros; rewrite H1; apply (first_n N b (prop_N N) H2 H3 prop_alpha).",
            "VernacExtend",
            "71226a5a7885379b908dd2195c67984fd319ebc6"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma eq_first_M_N : forall N M : nat, M = first N + last N -> ((forall b : nat, 0 < b -> b < M -> (frac_part_n_alpha (first N) <= frac_part_n_alpha b)%R) <-> first N = first M).",
            "VernacStartTheoremProof",
            "b2b38af4c1cd5cc03cd1c1a0c396de902f0079c5"
        ],
        [
            "intros; split; intro.",
            "VernacExtend",
            "30c96e47a522a77a5351e4399d9dffcbe0777f62"
        ],
        [
            "elim (tech_first_aux M (first N) (first_0 N (prop_N N))).",
            "VernacExtend",
            "32b2aa96b823259cf96cd2110009c6d62926fed3"
        ],
        [
            "intros; clear H2; auto.",
            "VernacExtend",
            "cd0a003ea41fb307e9fe02de7d7f1d916f867522"
        ],
        [
            "rewrite H; apply (lt_plus (first N) (last N) (last_0 N (prop_N N))).",
            "VernacExtend",
            "139943248002b6e2eb1756d4e33be7a082b7e9d3"
        ],
        [
            "elim (tech_first_aux M (first M) (first_0 M (prop_N M)) (first_N M (prop_N M))).",
            "VernacExtend",
            "4de1ff1d9a4eb0bb07c5526d8aff328621777804"
        ],
        [
            "intros; clear H1; rewrite H0; auto.",
            "VernacExtend",
            "ced975c2405ba25982f9c4bc0c392a850af848c8"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma first_eq_M_N : forall N M : nat, M = first N + last N -> first N = first M.",
            "VernacStartTheoremProof",
            "d4fd9e4bc7ab490ccb3c3108441c4f65004e121a"
        ],
        [
            "intros; elim (eq_first_M_N N M H); intros; clear H1; apply H0.",
            "VernacExtend",
            "309f74911f6b936383d2c7a2a375e9fd3eb28f49"
        ],
        [
            "intros; rewrite H in H2; apply (absurd_first N b H1 H2).",
            "VernacExtend",
            "4991b4da5cfb8248926c5e39773868bb2b41d349"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma tech_last_aux : forall N a : nat, 0 < a -> a < N -> ((forall b : nat, 0 < b -> b < N -> (frac_part_n_alpha b <= frac_part_n_alpha a)%R) <-> a = last N).",
            "VernacStartTheoremProof",
            "55f5595f95d02b8bf34c91c786dcd833dcd633e6"
        ],
        [
            "intros; split; intro.",
            "VernacExtend",
            "30c96e47a522a77a5351e4399d9dffcbe0777f62"
        ],
        [
            "cut (frac_part_n_alpha a = frac_part_n_alpha (last N)).",
            "VernacExtend",
            "174e2691b6bfb034a621cb73ffc9ae520bcac9f0"
        ],
        [
            "intro; apply (tech_fp_alp_irr a (last N) H2).",
            "VernacExtend",
            "c4f20bf57bb06556f3b7789de6813d19f673c57e"
        ],
        [
            "elim (Rle_le_eq (frac_part_n_alpha a) (frac_part_n_alpha (last N))); intros; clear H3; generalize (H1 (last N) (last_0 N (prop_N N)) (last_N N (prop_N N))); generalize (last_n N a (prop_N N) H H0 prop_alpha); intros; apply H2.",
            "VernacExtend",
            "5540743baba27bbe28c1c66723fafaa64078c489"
        ],
        [
            "split; auto.",
            "VernacExtend",
            "fcd44a714bd12fa54b1c7746996e44dbac16df06"
        ],
        [
            "intros; rewrite H1; apply (last_n N b (prop_N N) H2 H3 prop_alpha).",
            "VernacExtend",
            "3e5c417c3346d8cefa3ef0d54bb301882035f249"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma eq_last_M_N : forall N M : nat, M = first N + last N -> ((forall b : nat, 0 < b -> b < M -> (frac_part_n_alpha b <= frac_part_n_alpha (last N))%R) <-> last N = last M).",
            "VernacStartTheoremProof",
            "af18f06d26081d38252cb55afa5a4d30342d6477"
        ],
        [
            "intros; split; intro.",
            "VernacExtend",
            "30c96e47a522a77a5351e4399d9dffcbe0777f62"
        ],
        [
            "elim (tech_last_aux M (last N) (last_0 N (prop_N N))).",
            "VernacExtend",
            "a5dbf21fc2887d9d7b91bc0b99618bc4e7efae28"
        ],
        [
            "intros; clear H2; auto.",
            "VernacExtend",
            "cd0a003ea41fb307e9fe02de7d7f1d916f867522"
        ],
        [
            "rewrite H; rewrite plus_comm; apply (lt_plus (last N) (first N) (first_0 N (prop_N N))).",
            "VernacExtend",
            "3ad64633d28c894460a40dc4bfb3e63e4922b5fa"
        ],
        [
            "elim (tech_last_aux M (last M) (last_0 M (prop_N M)) (last_N M (prop_N M))).",
            "VernacExtend",
            "9dcd9033721d49c2b82135c502ce1571d60a80b3"
        ],
        [
            "intros; clear H1; rewrite H0; auto.",
            "VernacExtend",
            "ced975c2405ba25982f9c4bc0c392a850af848c8"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma last_eq_M_N : forall N M : nat, M = first N + last N -> last N = last M.",
            "VernacStartTheoremProof",
            "5c82c25453b3b4994277fd767f214f1677028ef1"
        ],
        [
            "intros; elim (eq_last_M_N N M H); intros; clear H1; apply H0.",
            "VernacExtend",
            "0d738cd32c83e3c9f0002a8526e2ffef393e0113"
        ],
        [
            "intros; rewrite H in H2; apply (absurd_last N b H1 H2).",
            "VernacExtend",
            "087472be35345e3376a2c2230245038e08f2c26a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma tech_after : forall N n m : nat, 0 < n -> n < N -> 0 <= m -> m < N -> (frac_part_n_alpha n < frac_part_n_alpha m)%R -> ((exists k : nat, 0 < k /\\ k < N /\\ (frac_part_n_alpha n < frac_part_n_alpha k)%R /\\ (frac_part_n_alpha k < frac_part_n_alpha m)%R) -> False) -> m = after N n.",
            "VernacStartTheoremProof",
            "ead3ad37311d7fdf2164ea5cdfe9351e865b5085"
        ],
        [
            "intros; unfold after in |- *.",
            "VernacExtend",
            "bba5b3ad26b30afb000a91b27a4b9fae2f4a685a"
        ],
        [
            "case (exist_after_M (frac_part_n_alpha n) (P1 n) (P2 n) N); intro.",
            "VernacExtend",
            "fa726f7b98fa2a806f81ea6fed742890859091fd"
        ],
        [
            "elim s; intros x y.",
            "VernacExtend",
            "541a05005677bba9ddad4a33aa70e7e46df51c90"
        ],
        [
            "elim y; intros.",
            "VernacExtend",
            "250726da241163a50d9d8689bcc718a42a970c80"
        ],
        [
            "clear s y.",
            "VernacExtend",
            "1e6c9a89d0a9e38dfc2aeb4567c095b644009772"
        ],
        [
            "elim H6; intros; clear H6.",
            "VernacExtend",
            "9a4f642ad54a48ea5cf9a83f7e9178871fbc824b"
        ],
        [
            "elim H8; intros; clear H8.",
            "VernacExtend",
            "c5cff2a48d86554ecab34f729037fbac582e53ed"
        ],
        [
            "generalize (tech_not_exist_pt (fun k : nat => 0 < k) (fun k : nat => k < N) (fun k : nat => (frac_part_n_alpha n < frac_part_n_alpha k)%R) (fun k : nat => (frac_part_n_alpha k < frac_part_n_alpha m)%R) H4); clear H4; intro.",
            "VernacExtend",
            "e85cc99e29bb122ff6a2a2e7a0f663e535dc2cc7"
        ],
        [
            "elim (H4 x H5 H7); intro.",
            "VernacExtend",
            "7f4188ff256aec5ce0fc3473c6b2ddb7de947522"
        ],
        [
            "absurd (frac_part_n_alpha n < frac_part_n_alpha x)%R; auto.",
            "VernacExtend",
            "6b2aa6b8b5804cbbe05dd3c53b9039a4691ca672"
        ],
        [
            "unfold Rgt in H9; generalize (H9 m H1 H2 H3); intro; generalize (Rnot_lt_ge (frac_part_n_alpha x) (frac_part_n_alpha m) H8); intro; generalize (Rge_antisym (frac_part_n_alpha m) (frac_part_n_alpha x) H10 H11); intro; apply (tech_fp_alp_irr m x H12).",
            "VernacExtend",
            "dd06cfc9a1d1de0d859a87758c2d43a115c36ccd"
        ],
        [
            "elim (a m H1 H2); intros; unfold Rle in H6; elim H6; intro.",
            "VernacExtend",
            "99b7af08cee91220376e636b0ca4a43d9fdede33"
        ],
        [
            "generalize (Rlt_asym (frac_part_n_alpha m) (frac_part_n_alpha n) H7); intro; elimtype False; auto.",
            "VernacExtend",
            "1289fd7dc6d90e56279092b1fa44912ad82b7a41"
        ],
        [
            "cut ((frac_part_n_alpha n < frac_part_n_alpha m)%R \\/ (frac_part_n_alpha n > frac_part_n_alpha m)%R).",
            "VernacExtend",
            "fd3cf690c333096634d4e503f8fe310bfc93d857"
        ],
        [
            "intro; generalize (Rlt_dichotomy_converse (frac_part_n_alpha n) (frac_part_n_alpha m) H8); intro; elimtype False; auto.",
            "VernacExtend",
            "8f3e5364e10fa7d59c7f338872306cdf4037d4ee"
        ],
        [
            "left; auto.",
            "VernacExtend",
            "b03090a3068bb41ee1034a9c886a5e47eddfb98a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma prop_after : forall N n m : nat, after N n = m -> (exists k : nat, 0 < k /\\ k < N /\\ (frac_part_n_alpha n < frac_part_n_alpha k)%R /\\ (frac_part_n_alpha k < frac_part_n_alpha m)%R) -> False.",
            "VernacStartTheoremProof",
            "de3dd70363b304f6a5f05ef327608fc23d1b4f73"
        ],
        [
            "intros; elim H0; intros; elim H1; intros; elim H3; intros; elim H5; intro; clear H0 H1 H3 H5; rewrite <- H; unfold after in |- *; case (exist_after_M (frac_part_n_alpha n) (P1 n) (P2 n) N); intro.",
            "VernacExtend",
            "f24a587c8080c540ddf9c6d423390c4df600b074"
        ],
        [
            "elim s; intros x0 y H0; elim y; intros; elim H3; intros; elim H7; intros; clear s y H3 H7; fold (frac_part_n_alpha x > frac_part_n_alpha n)%R in H6; generalize (H9 x (lt_le_weak 0 x H2) H4 H6); intro; generalize (Rgt_not_le (frac_part_n_alpha x0) (frac_part_n_alpha x) H0); intro; cut (frac_part_n_alpha x0 <= frac_part_n_alpha x)%R.",
            "VernacExtend",
            "6a6bef735f3a0a15befe7b432f0ba0fee3b8f200"
        ],
        [
            "intro; auto.",
            "VernacExtend",
            "c01170981862e9d8608d651ab75e833f7953118c"
        ],
        [
            "unfold Rge in H3; unfold Rle in |- *; elim H3; auto.",
            "VernacExtend",
            "8f796f4539622a92978cf526d58f19b25e62e61b"
        ],
        [
            "unfold frac_part_n_alpha in |- *; simpl in |- *; rewrite (Rmult_0_l alpha); rewrite fp_R0; elim (base_fp (INR x * alpha)); intros; generalize (Rgt_not_le 0 (frac_part (INR x * alpha)) H3); intro; cut (0 <= frac_part (INR x * alpha))%R.",
            "VernacExtend",
            "72e27c5c6c19c734a43330c7c772dc1c64fdda56"
        ],
        [
            "intro; auto.",
            "VernacExtend",
            "c01170981862e9d8608d651ab75e833f7953118c"
        ],
        [
            "unfold Rge in H0; unfold Rle in |- *; elim H0; auto.",
            "VernacExtend",
            "5b99d4777c4b4b6ec990d629db0c34855647006c"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma tech_after_lt : forall N n m : nat, 0 < n -> n < N -> m <> 0 -> after N n = m -> (frac_part_n_alpha n < frac_part_n_alpha m)%R.",
            "VernacStartTheoremProof",
            "5755d4a38c1731c23ab86cb24ea705f53eebbbaa"
        ],
        [
            "intros; rewrite <- H2; unfold after in |- *; case (exist_after_M (frac_part_n_alpha n) (P1 n) (P2 n) N); intros.",
            "VernacExtend",
            "644390b34f158c817f8a26164c959513844d096d"
        ],
        [
            "elim s; intros x y.",
            "VernacExtend",
            "541a05005677bba9ddad4a33aa70e7e46df51c90"
        ],
        [
            "elim y; intros; clear y.",
            "VernacExtend",
            "c1bb96cdddb3eb0ea00da987e10571e18dcbe66a"
        ],
        [
            "elim H4; intros; clear H4.",
            "VernacExtend",
            "dec7e5130574bbdf7fbc3621e186cdd3219dcbfd"
        ],
        [
            "elim H6; intros; clear H6; auto.",
            "VernacExtend",
            "4d7f23a8ff8243c0f62f9b6043ac70f72232e7d1"
        ],
        [
            "cut (after N n = 0).",
            "VernacExtend",
            "4872a1dc58d87c342f02086329be50357faf0665"
        ],
        [
            "intro; rewrite H2 in H3; elimtype False; auto.",
            "VernacExtend",
            "4f33271e98608925b62eaba7053dec955d2b2e39"
        ],
        [
            "unfold after in |- *; case (exist_after_M (frac_part_n_alpha n) (P1 n) (P2 n) N); intros; auto.",
            "VernacExtend",
            "32551b5d7ccfaa9e98f419d9a7efc210527f4d6c"
        ],
        [
            "elim s; intros x y.",
            "VernacExtend",
            "541a05005677bba9ddad4a33aa70e7e46df51c90"
        ],
        [
            "elim y; intros; clear y.",
            "VernacExtend",
            "c1bb96cdddb3eb0ea00da987e10571e18dcbe66a"
        ],
        [
            "elim H4; intros; clear H4.",
            "VernacExtend",
            "dec7e5130574bbdf7fbc3621e186cdd3219dcbfd"
        ],
        [
            "elim H6; intros; clear H6; clear s.",
            "VernacExtend",
            "09dbe5763c5492d6db7ee60b8af1800149d35b46"
        ],
        [
            "generalize (lt_le_weak 0 x H3); intro.",
            "VernacExtend",
            "9296d3387638ba81c80e5bb8a7ae3f2678f44575"
        ],
        [
            "elim (a x H6 H5); intros.",
            "VernacExtend",
            "17de6dbd222b62b81e4df15200c9f75b16291db5"
        ],
        [
            "unfold Rle in H9; elim H9; intro; clear H9.",
            "VernacExtend",
            "e82b76da5d0a8ae44fe464afb940308774895a1a"
        ],
        [
            "generalize (Rlt_asym (frac_part_n_alpha n) (frac_part_n_alpha x) H4); intro; elimtype False; auto.",
            "VernacExtend",
            "8665fe6d732546e0e5e5bba7646c4d81f2d17482"
        ],
        [
            "generalize (sym_eq H10); intro; clear H10.",
            "VernacExtend",
            "7a69dcfd2cc508f86368631550a2a311daba48f7"
        ],
        [
            "cut ((frac_part_n_alpha n < frac_part_n_alpha x)%R \\/ (frac_part_n_alpha n > frac_part_n_alpha x)%R); auto.",
            "VernacExtend",
            "02c9d3479a97478b593bb67c69b843f55230cc20"
        ],
        [
            "intro; generalize (Rlt_dichotomy_converse (frac_part_n_alpha n) (frac_part_n_alpha x) H10); intro; elimtype False; auto.",
            "VernacExtend",
            "8651b3fcf0a56da2067dc6aeba3bb4c20fe9f6ff"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma after_last : forall N : nat, after N (last N) = 0.",
            "VernacStartTheoremProof",
            "60fbc24824998f12d55c73cd9f5c1ebff540e2fb"
        ],
        [
            "unfold after in |- *; intro; case (exist_after_M (frac_part_n_alpha (last N)) (P1 (last N)) (P2 (last N)) N); auto.",
            "VernacExtend",
            "44878bea40c3a1774417c745103ca91708414e55"
        ],
        [
            "intro; elim s; intros x y; elim y; intros; elim H0; intros; elim H2; intros; clear s y H0 H2 H4; generalize (last_n N x (prop_N N) H H1 prop_alpha); intro; generalize (Rgt_not_le (frac_part_n_alpha x) (frac_part_n_alpha (last N)) H3); intro; elimtype False; auto.",
            "VernacExtend",
            "aa63adcd7c075dac13a5f7797d527a4c2876a2c8"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma prop_M : forall N M : nat, M = first N + last N -> (frac_part_n_alpha M < frac_part_n_alpha (first N))%R \\/ (frac_part_n_alpha M > frac_part_n_alpha (last N))%R.",
            "VernacStartTheoremProof",
            "9c2f5b4692850cbabaa3ae6a8a81dbd2ff13496c"
        ],
        [
            "intros; rewrite H; cut ((frac_part_n_alpha (first N) + frac_part_n_alpha (last N) < 1)%R \\/ (frac_part_n_alpha (first N) + frac_part_n_alpha (last N) >= 1)%R).",
            "VernacExtend",
            "29f605918ea4cb2909d87f16d7a8687537331086"
        ],
        [
            "intros; elim H0; intro; clear H0.",
            "VernacExtend",
            "4dccf40236e024f8b285cde693f08b7df96e1df5"
        ],
        [
            "right; unfold frac_part_n_alpha in H1; unfold frac_part_n_alpha in |- *; rewrite (plus_INR (first N) (last N)); rewrite (Rmult_comm (INR (first N) + INR (last N)) alpha); rewrite (Rmult_plus_distr_l alpha (INR (first N)) (INR (last N))); rewrite (Rmult_comm (INR (first N)) alpha) in H1; rewrite (Rmult_comm (INR (last N)) alpha) in H1; rewrite (Rmult_comm (INR (last N)) alpha); rewrite (plus_frac_part2 (alpha * INR (first N)) (alpha * INR (last N)) H1); elim (Rplus_ne (alpha * INR (last N))); intros; clear H0; pattern (alpha * INR (last N))%R at 2 in |- *; rewrite <- H2; rewrite (Rplus_comm (frac_part (alpha * INR (first N))) (frac_part (alpha * INR (last N)))); rewrite (Rplus_comm 0 (alpha * INR (last N))); cut (frac_part (alpha * INR (last N)) + frac_part 0 < 1)%R.",
            "VernacExtend",
            "8d19e24b5f46d82c657ece89b7b893236de07d28"
        ],
        [
            "intro; rewrite (plus_frac_part2 (alpha * INR (last N)) 0 H0); rewrite fp_R0; apply (Rplus_gt_compat_l (frac_part (alpha * INR (last N))) (frac_part (alpha * INR (first N))) 0); generalize (fp_first_R0 N); unfold frac_part_n_alpha in |- *; rewrite (Rmult_comm alpha (INR (first N))); auto.",
            "VernacExtend",
            "9f3f4c3823291ef1373a18ebed5dddb55f3cbe47"
        ],
        [
            "rewrite fp_R0; elim (Rplus_ne (frac_part (alpha * INR (last N)))); intros; clear H3; rewrite H0; rewrite (Rmult_comm alpha (INR (last N))); cut (frac_part (INR (last N) * alpha) = frac_part_n_alpha (last N)).",
            "VernacExtend",
            "c118205b602d36304be248e93dc45009b3bdc0b3"
        ],
        [
            "intro; rewrite H3; apply (P2 (last N)).",
            "VernacExtend",
            "9acb5aae66d14e69c4985570bb7fc994efaf8ec5"
        ],
        [
            "unfold frac_part_n_alpha in |- *; auto.",
            "VernacExtend",
            "5303dfa336ececb6dd1cb504c968680e132be6d0"
        ],
        [
            "left; unfold frac_part_n_alpha in H1; unfold frac_part_n_alpha in |- *; unfold frac_part_n_alpha in |- *; rewrite (plus_INR (first N) (last N)); rewrite (Rmult_comm (INR (first N) + INR (last N)) alpha); rewrite (Rmult_plus_distr_l alpha (INR (first N)) (INR (last N))); rewrite (Rmult_comm (INR (first N)) alpha) in H1; rewrite (Rmult_comm (INR (last N)) alpha) in H1; rewrite (Rmult_comm (INR (first N)) alpha); rewrite (plus_frac_part1 (alpha * INR (first N)) (alpha * INR (last N)) H1); unfold Rminus in |- *; rewrite Rplus_assoc; elim (Rplus_ne (alpha * INR (first N))); intros; clear H2; pattern (alpha * INR (first N))%R at 2 in |- *; rewrite <- H0; cut (frac_part (alpha * INR (first N)) + frac_part 0 < 1)%R.",
            "VernacExtend",
            "8986daa9875100009f34a9b4660ee7f29d498767"
        ],
        [
            "intro; rewrite (plus_frac_part2 (alpha * INR (first N)) 0 H2); rewrite fp_R0; apply (Rplus_lt_compat_l (frac_part (alpha * INR (first N))) (frac_part (alpha * INR (last N)) + -1) 0); cut ((frac_part (alpha * INR (last N)) + -1)%R = (frac_part (alpha * INR (last N)) - 1)%R).",
            "VernacExtend",
            "153c7b55c7cb6e49f605bd93c4cf771fbc0ef08f"
        ],
        [
            "intro; rewrite H3; clear H3; apply (Rlt_minus (frac_part (alpha * INR (last N))) 1).",
            "VernacExtend",
            "97f899f1c57729f1034e64e0fc69af1f6543e64f"
        ],
        [
            "rewrite (Rmult_comm alpha (INR (last N))); cut (frac_part (INR (last N) * alpha) = frac_part_n_alpha (last N)).",
            "VernacExtend",
            "a0b55fdeaa60a63bf0bcd464cbb294092dcedb6d"
        ],
        [
            "intro; rewrite H3; apply (P2 (last N)).",
            "VernacExtend",
            "9acb5aae66d14e69c4985570bb7fc994efaf8ec5"
        ],
        [
            "unfold frac_part_n_alpha in |- *; auto.",
            "VernacExtend",
            "5303dfa336ececb6dd1cb504c968680e132be6d0"
        ],
        [
            "unfold Rminus in |- *; auto.",
            "VernacExtend",
            "f7289b22a5bfca0d389920289691afce87d4220a"
        ],
        [
            "rewrite fp_R0; elim (Rplus_ne (frac_part (alpha * INR (first N)))); intros; clear H3; rewrite H2; rewrite (Rmult_comm alpha (INR (first N))); cut (frac_part (INR (first N) * alpha) = frac_part_n_alpha (first N)).",
            "VernacExtend",
            "c1aae06dc0b66509449106f0529c646df60c203a"
        ],
        [
            "intro; rewrite H3; apply (P2 (first N)).",
            "VernacExtend",
            "060be799a574567b7993bd52a9e8b60c14ee12bf"
        ],
        [
            "unfold frac_part_n_alpha in |- *; auto.",
            "VernacExtend",
            "5303dfa336ececb6dd1cb504c968680e132be6d0"
        ],
        [
            "unfold Rge in |- *; generalize (Rtotal_order (frac_part_n_alpha (first N) + frac_part_n_alpha (last N)) 1); intro; elim H0; intro.",
            "VernacExtend",
            "f3fc1aabad19717d75ca16c8a29fbc232bdf1f09"
        ],
        [
            "left; auto.",
            "VernacExtend",
            "b03090a3068bb41ee1034a9c886a5e47eddfb98a"
        ],
        [
            "right; elim H1; auto.",
            "VernacExtend",
            "2e6941f8a0aaf312861096c810c1f42fab95040a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma le_N_M : forall N M : nat, M = first N + last N -> N <= M.",
            "VernacStartTheoremProof",
            "9e09ba31e60ff88eb4113e7191544daf8a66afa8"
        ],
        [
            "intros; generalize (prop_M N M H); intro; cut (~ N > M).",
            "VernacExtend",
            "3050c09e73bca02e554ed408b0b252472da223ca"
        ],
        [
            "intro; apply not_gt_le; auto.",
            "VernacExtend",
            "8cb7c9e2a38d4a9c3d4c45f2b8c7acbbefd20f7f"
        ],
        [
            "unfold gt in |- *; red in |- *; intro; cut (0 < M).",
            "VernacExtend",
            "e18b5e4aa9f30296e0a43957d04f8616e54a1e95"
        ],
        [
            "intro; elim H0; intro; clear H0.",
            "VernacExtend",
            "d709aec994d1e2ec7aaf7bc58cc903a124545ae1"
        ],
        [
            "generalize (first_n N M (prop_N N) H2 H1 prop_alpha); intro.",
            "VernacExtend",
            "d87358a15f7697879a132daf8d9d2275ee9af3d3"
        ],
        [
            "generalize (Rgt_not_le (frac_part_n_alpha (first N)) (frac_part_n_alpha M) H3); intro; clear H3; auto.",
            "VernacExtend",
            "73703caec49395acb338be987a3047a7261a942f"
        ],
        [
            "generalize (last_n N M (prop_N N) H2 H1 prop_alpha); intro.",
            "VernacExtend",
            "376d1e50a45f304350d92d47a0e7d3ff2db97b4b"
        ],
        [
            "unfold Rgt in H3; generalize (Rgt_not_le (frac_part_n_alpha M) (frac_part_n_alpha (last N)) H3); intro; clear H3; auto.",
            "VernacExtend",
            "d7221dd3aadc05577e174441a073b6fde4be95d8"
        ],
        [
            "rewrite H; generalize (first_0 N (prop_N N)); intro; apply (lt_O_plus (first N) (last N) H2).",
            "VernacExtend",
            "be3bee92b592c6ed54bdc9c8b6bda1233eeb86bb"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "End theoreme.",
            "VernacEndSegment",
            "dd6f74e5018e21942067915cd06ff90f21116628"
        ]
    ],
    "proofs": [
        {
            "name": "tech_fp_alp_irr",
            "line_nb": 7,
            "steps": [
                {
                    "command": [
                        "intros; generalize (Rminus_diag_eq (frac_part_n_alpha n) (frac_part_n_alpha m) H); unfold frac_part_n_alpha in |- *; elim (Rminus_fp1 (INR n * alpha) (INR m * alpha)).",
                        "VernacExtend",
                        "67a6c5d3b0757042a6d0d26c5c982c77da66f89d"
                    ]
                },
                {
                    "command": [
                        "unfold Rminus in |- *; rewrite <- Ropp_mult_distr_l_reverse; rewrite (Rmult_comm (INR n) alpha); rewrite (Rmult_comm (- INR m) alpha); rewrite <- Rmult_plus_distr_l; intro; elim (fp_nat (alpha * (INR n + - INR m)) H0); intros; fold (INR n - INR m)%R in H1; rewrite (INR_IZR_INZ n) in H1; rewrite (INR_IZR_INZ m) in H1; rewrite (Z_R_minus (Z_of_nat n) (Z_of_nat m)) in H1; generalize (alpha_irr x (Z_of_nat n - Z_of_nat m)); intro; elimtype False; auto.",
                        "VernacExtend",
                        "e7b7a8b2dcdbb40c4aeb2b3f1021d979df0536c7"
                    ]
                },
                {
                    "command": [
                        "unfold Rge in |- *; auto.",
                        "VernacExtend",
                        "faac03e72f00c3aa7546de69f12b0db2aad95f3b"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "fp_first_R0",
            "line_nb": 12,
            "steps": [
                {
                    "command": [
                        "intro; generalize (P1 (first N)); intro; unfold Rle in H; unfold Rgt in |- *; elim H; intro; auto; clear H; rewrite <- fp_R0 in H0; rewrite <- (Rmult_0_l alpha) in H0; cut (INR 0 = 0%R).",
                        "VernacExtend",
                        "db86fdacaf32d4b8714687bbad8dc97435448581"
                    ]
                },
                {
                    "command": [
                        "intro; rewrite <- H in H0; cut (frac_part (INR 0 * alpha) = frac_part_n_alpha 0).",
                        "VernacExtend",
                        "b213040e372346f7cb1834de1f7808f1d475f6ac"
                    ]
                },
                {
                    "command": [
                        "intro; rewrite H1 in H0; generalize (tech_fp_alp_irr 0 (first N) H0); intro; generalize (first_0 N (prop_N N)); intro; generalize (lt_not_eq 0 (first N) H3); intro; elimtype False; auto.",
                        "VernacExtend",
                        "f280314c93865fab7133b26373f848da3383394c"
                    ]
                },
                {
                    "command": [
                        "unfold frac_part_n_alpha in |- *; auto.",
                        "VernacExtend",
                        "5303dfa336ececb6dd1cb504c968680e132be6d0"
                    ]
                },
                {
                    "command": [
                        "auto.",
                        "VernacExtend",
                        "1f09da0addd069b3b65326f8c71967acc1e985af"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "contra_tech_fp_alp_irr",
            "line_nb": 19,
            "steps": [
                {
                    "command": [
                        "intros; generalize (tech_fp_alp_irr n m); tauto.",
                        "VernacExtend",
                        "352f45227c433ef619f13fd7c292d47ef9c41007"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "contradiction1",
            "line_nb": 22,
            "steps": [
                {
                    "command": [
                        "intros; elim H1; intro; clear H1.",
                        "VernacExtend",
                        "325093b4ab763de345af5ca1747ab189cfb68dba"
                    ]
                },
                {
                    "command": [
                        "cut ((frac_part_n_alpha (last N) - (frac_part_n_alpha k - frac_part_n_alpha (first N) + 1))%R = 0%R).",
                        "VernacExtend",
                        "dcd5b518dc76d71ed9f5967e9a9be6c4f9953d82"
                    ]
                },
                {
                    "command": [
                        "unfold frac_part_n_alpha in |- *; rewrite <- (Rminus_fp2 (INR k * alpha) (INR (first N) * alpha) H2); generalize (Rminus_fp1 (INR (last N) * alpha) (INR k * alpha - INR (first N) * alpha)); intros; cut (frac_part (INR (last N) * alpha) >= frac_part (INR k * alpha - INR (first N) * alpha))%R.",
                        "VernacExtend",
                        "3a2e6c357331b07486ae8537bddb93f9fe3bec01"
                    ]
                },
                {
                    "command": [
                        "intro; rewrite <- (H1 H4) in H3; clear H1 H4; elim (fp_nat (INR (last N) * alpha - (INR k * alpha - INR (first N) * alpha)) H3).",
                        "VernacExtend",
                        "968f84b1f61c0b5a65685e185c309816c62db42a"
                    ]
                },
                {
                    "command": [
                        "unfold Rminus in |- *; rewrite <- (Ropp_mult_distr_l_reverse (INR (first N)) alpha); rewrite (Ropp_plus_distr (INR k * alpha) (- INR (first N) * alpha)); rewrite <- (Ropp_mult_distr_l_reverse (INR k) alpha); rewrite <- (Ropp_mult_distr_l_reverse (- INR (first N)) alpha); rewrite (Ropp_involutive (INR (first N))); rewrite (Rmult_comm (- INR k) alpha); rewrite (Rmult_comm (INR (first N)) alpha); rewrite (Rmult_comm (INR (last N)) alpha); rewrite <- (Rmult_plus_distr_l alpha (- INR k) (INR (first N))); rewrite <- (Rmult_plus_distr_l alpha (INR (last N)) (- INR k + INR (first N))) ; rewrite (Rplus_comm (- INR k) (INR (first N))); rewrite <- (Rplus_assoc (INR (last N)) (INR (first N)) (- INR k)); fold (INR (last N) + INR (first N) - INR k)%R in |- *; rewrite <- (plus_INR (last N) (first N)); rewrite (INR_IZR_INZ (last N + first N)).",
                        "VernacExtend",
                        "787a9184dc842cf25b75f128a906ab83572366d6"
                    ]
                },
                {
                    "command": [
                        "rewrite (INR_IZR_INZ k).",
                        "VernacExtend",
                        "55cd3714c30effb6022d77f8749fb06cf529a8f6"
                    ]
                },
                {
                    "command": [
                        "rewrite (Z_R_minus (Z_of_nat (last N + first N)) (Z_of_nat k)).",
                        "VernacExtend",
                        "aa8160c6c6dfa93830a52a321a5a3fb540d935d7"
                    ]
                },
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "generalize (alpha_irr x (Z_of_nat (last N + first N) - Z_of_nat k)).",
                        "VernacExtend",
                        "54c84cc8682d8852fc8d20cd03cada03c9f09b1d"
                    ]
                },
                {
                    "command": [
                        "intro.",
                        "VernacExtend",
                        "3999be354c758ba0d1866e0fcc78a7288779a224"
                    ]
                },
                {
                    "command": [
                        "auto.",
                        "VernacExtend",
                        "1f09da0addd069b3b65326f8c71967acc1e985af"
                    ]
                },
                {
                    "command": [
                        "unfold Rge in |- *; right; apply Rminus_diag_uniq; auto.",
                        "VernacExtend",
                        "6d8d161128ca90620cdafe0bd892ac4eaebd015a"
                    ]
                },
                {
                    "command": [
                        "cut ((frac_part_n_alpha k - frac_part_n_alpha (first N) + 1 <= frac_part_n_alpha (last N))%R /\\ (frac_part_n_alpha k - frac_part_n_alpha (last N) + 1 >= frac_part_n_alpha (first N))%R).",
                        "VernacExtend",
                        "d1b321597ae2bed7fb0ccd65d98c1be77c7646f2"
                    ]
                },
                {
                    "command": [
                        "intro; elim H1; intros; clear H1.",
                        "VernacExtend",
                        "7d28599a05e37682e70a14af4ad72d3234f9f5e7"
                    ]
                },
                {
                    "command": [
                        "generalize (Rle_minus (frac_part_n_alpha k - frac_part_n_alpha (first N) + 1) (frac_part_n_alpha (last N)) H3); generalize (Rge_minus (frac_part_n_alpha k - frac_part_n_alpha (last N) + 1) (frac_part_n_alpha (first N)) H4); intros; clear H3 H4; generalize (Rge_le (frac_part_n_alpha k - frac_part_n_alpha (last N) + 1 - frac_part_n_alpha (first N)) 0 H1); intro; clear H1; rewrite <- Ropp_minus_distr; rewrite <- Ropp_0; apply Ropp_eq_compat.",
                        "VernacExtend",
                        "05e613ed19027138b24b0c96541c282cf6d45d55"
                    ]
                },
                {
                    "command": [
                        "unfold Rminus in H3; rewrite (Rplus_comm (frac_part_n_alpha k) (- frac_part_n_alpha (last N))) in H3; rewrite (Rplus_assoc (- frac_part_n_alpha (last N)) (frac_part_n_alpha k) 1) in H3.",
                        "VernacExtend",
                        "cf886c99efacb7ab1ea6b47befb8be3736c49269"
                    ]
                },
                {
                    "command": [
                        "rewrite (Rplus_assoc (- frac_part_n_alpha (last N)) (frac_part_n_alpha k + 1) (- frac_part_n_alpha (first N))) in H3; rewrite (Rplus_comm (- frac_part_n_alpha (last N)) (frac_part_n_alpha k + 1 + - frac_part_n_alpha (first N))) in H3; rewrite (Rplus_assoc (frac_part_n_alpha k) 1 (- frac_part_n_alpha (first N))) in H3; rewrite (Rplus_comm 1 (- frac_part_n_alpha (first N))) in H3; rewrite <- (Rplus_assoc (frac_part_n_alpha k) (- frac_part_n_alpha (first N)) 1) in H3; fold (frac_part_n_alpha k - frac_part_n_alpha (first N))%R in H3; fold (frac_part_n_alpha k - frac_part_n_alpha (first N) + 1 - frac_part_n_alpha (last N))%R in H3; elim (Rle_le_eq (frac_part_n_alpha k - frac_part_n_alpha (first N) + 1 - frac_part_n_alpha (last N)) 0); auto.",
                        "VernacExtend",
                        "48ef8e4e7647291627f653ddc2a4e8fc2a0407a6"
                    ]
                },
                {
                    "command": [
                        "split; unfold frac_part_n_alpha in |- *.",
                        "VernacExtend",
                        "c18cb71ff404e23788135bf5945a8698df79af84"
                    ]
                },
                {
                    "command": [
                        "unfold frac_part_n_alpha in H2; rewrite <- (Rminus_fp2 (INR k * alpha) (INR (first N) * alpha) H2); elim (tech_first_last N (k - first N) (prop_N N)).",
                        "VernacExtend",
                        "4815753dbbbca8576675bf1ac70c981dcddd5acb"
                    ]
                },
                {
                    "command": [
                        "intros; unfold ordre_total in H3; unfold frac_part_n_alpha in H3; cut (first N <= k).",
                        "VernacExtend",
                        "1e7b4008c729068ef01e935a5d3022948c5cffc9"
                    ]
                },
                {
                    "command": [
                        "intro; rewrite (minus_INR k (first N) H4) in H3; unfold Rminus in H3; rewrite (Rmult_comm (INR k + - INR (first N)) alpha) in H3; rewrite (Rmult_plus_distr_l alpha (INR k) (- INR (first N))) in H3; rewrite (Rmult_comm alpha (- INR (first N))) in H3; rewrite (Ropp_mult_distr_l_reverse (INR (first N)) alpha) in H3; fold (alpha * INR k - INR (first N) * alpha)%R in H3; rewrite (Rmult_comm alpha (INR k)) in H3; auto.",
                        "VernacExtend",
                        "1d6e8c746fc0ebad18d64ff46436bd4fd2880c98"
                    ]
                },
                {
                    "command": [
                        "generalize (first_N01 N); intro; apply (le_trans (first N) N k H4 H).",
                        "VernacExtend",
                        "49a44b246003b0bbf5ae0662f35e85737124b79a"
                    ]
                },
                {
                    "command": [
                        "elim (lt_minus2 (first N) k); auto.",
                        "VernacExtend",
                        "b28851b87c8ce2329f9d13211c3baed87e329876"
                    ]
                },
                {
                    "command": [
                        "generalize (first_N N (prop_N N)); intro.",
                        "VernacExtend",
                        "7d3a79eaa7cf8af4c7a6d6bee33f35f4a497184e"
                    ]
                },
                {
                    "command": [
                        "apply (lt_le_trans (first N) N k H1 H).",
                        "VernacExtend",
                        "477bae0f06277efb75be1714ecdd1036db6b7848"
                    ]
                },
                {
                    "command": [
                        "cut (k - first N < last N).",
                        "VernacExtend",
                        "67423d8efa0ee96acfc8cba3434f70e2c05080d0"
                    ]
                },
                {
                    "command": [
                        "generalize (last_N01 N); intros; apply (lt_le_trans (k - first N) (last N) N H3 H1).",
                        "VernacExtend",
                        "bea403318f83e0b9276754275b2720f854489d58"
                    ]
                },
                {
                    "command": [
                        "apply (lt_plus_minus k (first N) (last N)).",
                        "VernacExtend",
                        "c3447c38fd355d8057fa324f06cb2a4809c312fb"
                    ]
                },
                {
                    "command": [
                        "generalize (first_N N (prop_N N)); intro; apply (lt_le_trans (first N) N k H1 H).",
                        "VernacExtend",
                        "ec0278094fa924622d2a9fee8a39354405ff0b4d"
                    ]
                },
                {
                    "command": [
                        "assumption.",
                        "VernacExtend",
                        "41f0308313ff87e6ab2782f90d6021ec4b55d932"
                    ]
                },
                {
                    "command": [
                        "cut (frac_part_n_alpha k < frac_part_n_alpha (last N))%R.",
                        "VernacExtend",
                        "6a5a8bac1941b688de49555f08c95ec546662ef0"
                    ]
                },
                {
                    "command": [
                        "intro; unfold frac_part_n_alpha in H1; rewrite <- (Rminus_fp2 (INR k * alpha) (INR (last N) * alpha) H1); elim (tech_first_last N (k - last N) (prop_N N)).",
                        "VernacExtend",
                        "23622e479607bf57767ff4f9373868f9fda161c4"
                    ]
                },
                {
                    "command": [
                        "intros; unfold ordre_total in H3; unfold frac_part_n_alpha in H3; cut (last N <= k).",
                        "VernacExtend",
                        "b2d11c126ae94e3e25736fdd65b61ace35c1fbbe"
                    ]
                },
                {
                    "command": [
                        "intro; rewrite (minus_INR k (last N) H5) in H3; unfold Rminus in H3; rewrite (Rmult_comm (INR k + - INR (last N)) alpha) in H3; rewrite (Rmult_plus_distr_l alpha (INR k) (- INR (last N))) in H3; rewrite (Rmult_comm alpha (- INR (last N))) in H3; rewrite (Ropp_mult_distr_l_reverse (INR (last N)) alpha) in H3; fold (alpha * INR k - INR (last N) * alpha)%R in H3; rewrite (Rmult_comm alpha (INR k)) in H3; apply (Rle_ge (frac_part (INR (first N) * alpha)) (frac_part (INR k * alpha - INR (last N) * alpha)) (H3 prop_alpha)).",
                        "VernacExtend",
                        "fa57204592237d39e86e911a906aa14d6d13f83c"
                    ]
                },
                {
                    "command": [
                        "generalize (last_N01 N); intro; apply (le_trans (last N) N k H5 H).",
                        "VernacExtend",
                        "49504a2656e303ad317ada02d238f749dbfe1178"
                    ]
                },
                {
                    "command": [
                        "elim (lt_minus2 (last N) k); auto.",
                        "VernacExtend",
                        "ceb27d6062e18ee10acac4cf78bbf4a7e09fc519"
                    ]
                },
                {
                    "command": [
                        "generalize (last_N N (prop_N N)); intro.",
                        "VernacExtend",
                        "f0fb5eeb9cd40dc3beb0a7ff46fc69bc4a423689"
                    ]
                },
                {
                    "command": [
                        "apply (lt_le_trans (last N) N k H3 H).",
                        "VernacExtend",
                        "0f10b183018ac53e7511d864275c54413a3152ec"
                    ]
                },
                {
                    "command": [
                        "cut (k - last N < first N).",
                        "VernacExtend",
                        "dba2e9d946b76d32cccebd30cde2e424e69aa9d2"
                    ]
                },
                {
                    "command": [
                        "generalize (first_N01 N); intros; apply (lt_le_trans (k - last N) (first N) N H4 H3).",
                        "VernacExtend",
                        "2953ad6a7f8283c516fd36d7206f3c12c3858518"
                    ]
                },
                {
                    "command": [
                        "apply (lt_plus_minus k (last N) (first N)).",
                        "VernacExtend",
                        "624fb8af6c77a1082470e336e476278a1ec0a709"
                    ]
                },
                {
                    "command": [
                        "generalize (last_N N (prop_N N)); intro; apply (lt_le_trans (last N) N k H3 H).",
                        "VernacExtend",
                        "6f2dd01adec31a3aaddaeb392e381dfcdfcba57f"
                    ]
                },
                {
                    "command": [
                        "rewrite plus_comm; assumption.",
                        "VernacExtend",
                        "0c99d1995ae2daaa4c43bac8eb5b64800c47f2c4"
                    ]
                },
                {
                    "command": [
                        "generalize (le_first_last N (prop_N N)); unfold ordre_total in |- *; intros; apply (Rlt_le_trans (frac_part_n_alpha k) (frac_part_n_alpha (first N)) (frac_part_n_alpha (last N)) H2 (H1 prop_alpha)).",
                        "VernacExtend",
                        "9d849ef9b6fc76d160e732f8061ae200af1c065e"
                    ]
                },
                {
                    "command": [
                        "cut ((frac_part_n_alpha (last N) - (frac_part_n_alpha k - frac_part_n_alpha (first N)))%R = 0%R).",
                        "VernacExtend",
                        "61f12f421d3a2ab417ec6b57330566285fad9d28"
                    ]
                },
                {
                    "command": [
                        "cut (frac_part_n_alpha k >= frac_part_n_alpha (first N))%R.",
                        "VernacExtend",
                        "0898289983eaf74d2317e4906cd61fe6f273793b"
                    ]
                },
                {
                    "command": [
                        "unfold frac_part_n_alpha in |- *; intro; rewrite <- (Rminus_fp1 (INR k * alpha) (INR (first N) * alpha) H1); generalize (Rminus_fp1 (INR (last N) * alpha) (INR k * alpha - INR (first N) * alpha)); intros; cut (frac_part (INR (last N) * alpha) >= frac_part (INR k * alpha - INR (first N) * alpha))%R.",
                        "VernacExtend",
                        "54a297408dc26737b377bad3579e6f94f9a1ea1c"
                    ]
                },
                {
                    "command": [
                        "intro; rewrite <- (H3 H5) in H4; clear H3 H5; elim (fp_nat (INR (last N) * alpha - (INR k * alpha - INR (first N) * alpha)) H4).",
                        "VernacExtend",
                        "68bfa50691e546526a33dc5a47fec4c37f04052f"
                    ]
                },
                {
                    "command": [
                        "unfold Rminus in |- *; rewrite <- (Ropp_mult_distr_l_reverse (INR (first N)) alpha); rewrite (Ropp_plus_distr (INR k * alpha) (- INR (first N) * alpha)); rewrite <- (Ropp_mult_distr_l_reverse (INR k) alpha); rewrite <- (Ropp_mult_distr_l_reverse (- INR (first N)) alpha); rewrite (Ropp_involutive (INR (first N))); rewrite (Rmult_comm (- INR k) alpha); rewrite (Rmult_comm (INR (first N)) alpha); rewrite (Rmult_comm (INR (last N)) alpha); rewrite <- (Rmult_plus_distr_l alpha (- INR k) (INR (first N))); rewrite <- (Rmult_plus_distr_l alpha (INR (last N)) (- INR k + INR (first N))) ; rewrite (Rplus_comm (- INR k) (INR (first N))); rewrite <- (Rplus_assoc (INR (last N)) (INR (first N)) (- INR k)); fold (INR (last N) + INR (first N) - INR k)%R in |- *; rewrite <- (plus_INR (last N) (first N)).",
                        "VernacExtend",
                        "aa78c4df7892466713f89fa071137bf016203e15"
                    ]
                },
                {
                    "command": [
                        "rewrite (INR_IZR_INZ (last N + first N)).",
                        "VernacExtend",
                        "1aa494535488047142d4e706d86d554575b0b6c4"
                    ]
                },
                {
                    "command": [
                        "rewrite (INR_IZR_INZ k).",
                        "VernacExtend",
                        "55cd3714c30effb6022d77f8749fb06cf529a8f6"
                    ]
                },
                {
                    "command": [
                        "rewrite (Z_R_minus (Z_of_nat (last N + first N)) (Z_of_nat k)).",
                        "VernacExtend",
                        "aa8160c6c6dfa93830a52a321a5a3fb540d935d7"
                    ]
                },
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "generalize (alpha_irr x (Z_of_nat (last N + first N) - Z_of_nat k)).",
                        "VernacExtend",
                        "54c84cc8682d8852fc8d20cd03cada03c9f09b1d"
                    ]
                },
                {
                    "command": [
                        "intro.",
                        "VernacExtend",
                        "3999be354c758ba0d1866e0fcc78a7288779a224"
                    ]
                },
                {
                    "command": [
                        "auto.",
                        "VernacExtend",
                        "1f09da0addd069b3b65326f8c71967acc1e985af"
                    ]
                },
                {
                    "command": [
                        "unfold Rge in |- *; right; apply Rminus_diag_uniq; auto.",
                        "VernacExtend",
                        "6d8d161128ca90620cdafe0bd892ac4eaebd015a"
                    ]
                },
                {
                    "command": [
                        "generalize (le_first_last N (prop_N N)); unfold ordre_total in |- *; intros; unfold Rgt in H2; cut (frac_part_n_alpha (first N) <= frac_part_n_alpha k)%R.",
                        "VernacExtend",
                        "d223b25194d1a911ff44e5be5d5378589333410b"
                    ]
                },
                {
                    "command": [
                        "intro; apply (Rle_ge (frac_part_n_alpha (first N)) (frac_part_n_alpha k) H3).",
                        "VernacExtend",
                        "2f16cfe8b05a7190d75b6b5ed65c535b73238124"
                    ]
                },
                {
                    "command": [
                        "cut (frac_part_n_alpha (first N) < frac_part_n_alpha k)%R.",
                        "VernacExtend",
                        "ab57effef84b3062ed28b15cf0625a3f794842af"
                    ]
                },
                {
                    "command": [
                        "intro; apply (Rlt_le (frac_part_n_alpha (first N)) (frac_part_n_alpha k) H3).",
                        "VernacExtend",
                        "43cfd1e58747a7004c1e1ec37688e4db96e76286"
                    ]
                },
                {
                    "command": [
                        "apply (Rle_lt_trans (frac_part_n_alpha (first N)) (frac_part_n_alpha (last N)) (frac_part_n_alpha k) (H1 prop_alpha) H2).",
                        "VernacExtend",
                        "8ed4392c3fdcf42bbda50f795ff97acc68347e23"
                    ]
                },
                {
                    "command": [
                        "cut ((frac_part_n_alpha k - frac_part_n_alpha (first N) <= frac_part_n_alpha (last N))%R /\\ (frac_part_n_alpha k - frac_part_n_alpha (last N) >= frac_part_n_alpha (first N))%R).",
                        "VernacExtend",
                        "48f8ebd5b0d9ff207dd245305e729b6011068344"
                    ]
                },
                {
                    "command": [
                        "intro; elim H1; intros; clear H1.",
                        "VernacExtend",
                        "7d28599a05e37682e70a14af4ad72d3234f9f5e7"
                    ]
                },
                {
                    "command": [
                        "generalize (Rle_minus (frac_part_n_alpha k - frac_part_n_alpha (first N)) (frac_part_n_alpha (last N)) H3); generalize (Rge_minus (frac_part_n_alpha k - frac_part_n_alpha (last N)) (frac_part_n_alpha (first N)) H4); intros; clear H3 H4; generalize (Rge_le (frac_part_n_alpha k - frac_part_n_alpha (last N) - frac_part_n_alpha (first N)) 0 H1); intro; clear H1; rewrite <- Ropp_minus_distr; rewrite <- Ropp_0; apply Ropp_eq_compat.",
                        "VernacExtend",
                        "6b7e663c5cbd3df23c9a381daf992d96e1f87a95"
                    ]
                },
                {
                    "command": [
                        "unfold Rminus in H3; rewrite (Rplus_assoc (frac_part_n_alpha k) (- frac_part_n_alpha (last N)) (- frac_part_n_alpha (first N))) in H3; rewrite (Rplus_comm (- frac_part_n_alpha (last N)) (- frac_part_n_alpha (first N))) in H3; rewrite <- (Rplus_assoc (frac_part_n_alpha k) (- frac_part_n_alpha (first N)) (- frac_part_n_alpha (last N))) in H3; fold (frac_part_n_alpha k - frac_part_n_alpha (first N))%R in H3; fold (frac_part_n_alpha k - frac_part_n_alpha (first N) - frac_part_n_alpha (last N))%R in H3; elim (Rle_le_eq (frac_part_n_alpha k - frac_part_n_alpha (first N) - frac_part_n_alpha (last N)) 0); auto.",
                        "VernacExtend",
                        "64fee993e4ab666626e636a1c03c3371c4b40eac"
                    ]
                },
                {
                    "command": [
                        "split.",
                        "VernacExtend",
                        "55abc140132bd88981001ac656020469a8d503eb"
                    ]
                },
                {
                    "command": [
                        "cut (frac_part_n_alpha k >= frac_part_n_alpha (first N))%R.",
                        "VernacExtend",
                        "0898289983eaf74d2317e4906cd61fe6f273793b"
                    ]
                },
                {
                    "command": [
                        "unfold frac_part_n_alpha in |- *; intro; rewrite <- (Rminus_fp1 (INR k * alpha) (INR (first N) * alpha) H1); elim (tech_first_last N (k - first N) (prop_N N)).",
                        "VernacExtend",
                        "173c0d4ab2aac149c50e6fcf8de12b3dc2c647cd"
                    ]
                },
                {
                    "command": [
                        "intros; unfold ordre_total in H4; unfold frac_part_n_alpha in H4; cut (first N <= k).",
                        "VernacExtend",
                        "a25fa862477c88f4f4743d0808e612849f10c168"
                    ]
                },
                {
                    "command": [
                        "intro; rewrite (minus_INR k (first N) H5) in H4; unfold Rminus in H4; rewrite (Rmult_comm (INR k + - INR (first N)) alpha) in H4; rewrite (Rmult_plus_distr_l alpha (INR k) (- INR (first N))) in H4; rewrite (Rmult_comm alpha (- INR (first N))) in H4; rewrite (Ropp_mult_distr_l_reverse (INR (first N)) alpha) in H4; fold (alpha * INR k - INR (first N) * alpha)%R in H4; rewrite (Rmult_comm alpha (INR k)) in H4; auto.",
                        "VernacExtend",
                        "1ad3c5f407e464a81a4ad081a9f3a174ad9aed75"
                    ]
                },
                {
                    "command": [
                        "generalize (first_N01 N); intro; apply (le_trans (first N) N k H5 H).",
                        "VernacExtend",
                        "5cc23898275ed511173f8e1e9046b99bc17081c9"
                    ]
                },
                {
                    "command": [
                        "elim (lt_minus2 (first N) k); auto.",
                        "VernacExtend",
                        "b28851b87c8ce2329f9d13211c3baed87e329876"
                    ]
                },
                {
                    "command": [
                        "generalize (first_N N (prop_N N)); intro.",
                        "VernacExtend",
                        "7d3a79eaa7cf8af4c7a6d6bee33f35f4a497184e"
                    ]
                },
                {
                    "command": [
                        "apply (lt_le_trans (first N) N k H3 H).",
                        "VernacExtend",
                        "488f6942f514d13c1559d0aeafa6b320202b7c9b"
                    ]
                },
                {
                    "command": [
                        "cut (k - first N < last N).",
                        "VernacExtend",
                        "67423d8efa0ee96acfc8cba3434f70e2c05080d0"
                    ]
                },
                {
                    "command": [
                        "generalize (last_N01 N); intros; apply (lt_le_trans (k - first N) (last N) N H4 H3).",
                        "VernacExtend",
                        "2a7375e087bdea0fcdc8e691c0b90e035c5d9579"
                    ]
                },
                {
                    "command": [
                        "apply (lt_plus_minus k (first N) (last N)).",
                        "VernacExtend",
                        "c3447c38fd355d8057fa324f06cb2a4809c312fb"
                    ]
                },
                {
                    "command": [
                        "generalize (first_N N (prop_N N)); intro; apply (lt_le_trans (first N) N k H3 H).",
                        "VernacExtend",
                        "54152a4c55bc177252633f4b8d05b83d9d992144"
                    ]
                },
                {
                    "command": [
                        "assumption.",
                        "VernacExtend",
                        "41f0308313ff87e6ab2782f90d6021ec4b55d932"
                    ]
                },
                {
                    "command": [
                        "unfold frac_part_n_alpha in |- *; generalize (le_first_last N (prop_N N)); unfold ordre_total in |- *; intros; unfold Rgt in H2; cut (frac_part_n_alpha (first N) <= frac_part_n_alpha k)%R.",
                        "VernacExtend",
                        "fe7568d5fc19978caaf5f697d1a7f45aeeb3fb5d"
                    ]
                },
                {
                    "command": [
                        "intro; apply (Rle_ge (frac_part_n_alpha (first N)) (frac_part_n_alpha k) H3).",
                        "VernacExtend",
                        "2f16cfe8b05a7190d75b6b5ed65c535b73238124"
                    ]
                },
                {
                    "command": [
                        "cut (frac_part_n_alpha (first N) < frac_part_n_alpha k)%R.",
                        "VernacExtend",
                        "ab57effef84b3062ed28b15cf0625a3f794842af"
                    ]
                },
                {
                    "command": [
                        "intro; apply (Rlt_le (frac_part_n_alpha (first N)) (frac_part_n_alpha k) H3).",
                        "VernacExtend",
                        "43cfd1e58747a7004c1e1ec37688e4db96e76286"
                    ]
                },
                {
                    "command": [
                        "apply (Rle_lt_trans (frac_part_n_alpha (first N)) (frac_part_n_alpha (last N)) (frac_part_n_alpha k) (H1 prop_alpha) H2).",
                        "VernacExtend",
                        "8ed4392c3fdcf42bbda50f795ff97acc68347e23"
                    ]
                },
                {
                    "command": [
                        "cut (frac_part_n_alpha k >= frac_part_n_alpha (last N))%R.",
                        "VernacExtend",
                        "3dfde18daf51cdb921a24f06c0a9ed75be2a18c7"
                    ]
                },
                {
                    "command": [
                        "unfold frac_part_n_alpha in |- *; intro; rewrite <- (Rminus_fp1 (INR k * alpha) (INR (last N) * alpha) H1); elim (tech_first_last N (k - last N) (prop_N N)).",
                        "VernacExtend",
                        "8a673a7b864789d1d4cc4093922a13fd5f492072"
                    ]
                },
                {
                    "command": [
                        "intros; unfold ordre_total in H3; unfold frac_part_n_alpha in H3; cut (last N <= k).",
                        "VernacExtend",
                        "b2d11c126ae94e3e25736fdd65b61ace35c1fbbe"
                    ]
                },
                {
                    "command": [
                        "intro; rewrite (minus_INR k (last N) H5) in H3; unfold Rminus in H3; rewrite (Rmult_comm (INR k + - INR (last N)) alpha) in H3; rewrite (Rmult_plus_distr_l alpha (INR k) (- INR (last N))) in H3; rewrite (Rmult_comm alpha (- INR (last N))) in H3; rewrite (Ropp_mult_distr_l_reverse (INR (last N)) alpha) in H3; fold (alpha * INR k - INR (last N) * alpha)%R in H3; rewrite (Rmult_comm alpha (INR k)) in H3; apply (Rle_ge (frac_part (INR (first N) * alpha)) (frac_part (INR k * alpha - INR (last N) * alpha)) (H3 prop_alpha)).",
                        "VernacExtend",
                        "fa57204592237d39e86e911a906aa14d6d13f83c"
                    ]
                },
                {
                    "command": [
                        "generalize (last_N01 N); intro; apply (le_trans (last N) N k H5 H).",
                        "VernacExtend",
                        "49504a2656e303ad317ada02d238f749dbfe1178"
                    ]
                },
                {
                    "command": [
                        "elim (lt_minus2 (last N) k); auto.",
                        "VernacExtend",
                        "ceb27d6062e18ee10acac4cf78bbf4a7e09fc519"
                    ]
                },
                {
                    "command": [
                        "generalize (last_N N (prop_N N)); intro.",
                        "VernacExtend",
                        "f0fb5eeb9cd40dc3beb0a7ff46fc69bc4a423689"
                    ]
                },
                {
                    "command": [
                        "apply (lt_le_trans (last N) N k H3 H).",
                        "VernacExtend",
                        "0f10b183018ac53e7511d864275c54413a3152ec"
                    ]
                },
                {
                    "command": [
                        "cut (k - last N < first N).",
                        "VernacExtend",
                        "dba2e9d946b76d32cccebd30cde2e424e69aa9d2"
                    ]
                },
                {
                    "command": [
                        "generalize (first_N01 N); intros; apply (lt_le_trans (k - last N) (first N) N H4 H3).",
                        "VernacExtend",
                        "2953ad6a7f8283c516fd36d7206f3c12c3858518"
                    ]
                },
                {
                    "command": [
                        "apply (lt_plus_minus k (last N) (first N)).",
                        "VernacExtend",
                        "624fb8af6c77a1082470e336e476278a1ec0a709"
                    ]
                },
                {
                    "command": [
                        "generalize (last_N N (prop_N N)); intro; apply (lt_le_trans (last N) N k H3 H).",
                        "VernacExtend",
                        "6f2dd01adec31a3aaddaeb392e381dfcdfcba57f"
                    ]
                },
                {
                    "command": [
                        "rewrite plus_comm; assumption.",
                        "VernacExtend",
                        "0c99d1995ae2daaa4c43bac8eb5b64800c47f2c4"
                    ]
                },
                {
                    "command": [
                        "apply Rgt_ge; auto.",
                        "VernacExtend",
                        "71ff73b7d8a764efd5828a5dfdf9811246d82a62"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "absurd1",
            "line_nb": 123,
            "steps": [
                {
                    "command": [
                        "intros; generalize (contradiction1 N k H H0); intro; cut (~ (frac_part_n_alpha k < frac_part_n_alpha (first N))%R /\\ ~ (frac_part_n_alpha k > frac_part_n_alpha (last N))%R).",
                        "VernacExtend",
                        "a255dd0d8392ef4b92943e1da7c4b2cfe5ff7560"
                    ]
                },
                {
                    "command": [
                        "intro; elim H2; intros; split.",
                        "VernacExtend",
                        "c41c3fcc052a46f27eaf198562cd24033edd9637"
                    ]
                },
                {
                    "command": [
                        "apply (Rnot_lt_ge (frac_part_n_alpha k) (frac_part_n_alpha (first N)) H3).",
                        "VernacExtend",
                        "ae6b64ed54aa2d813564a7f262b80314f764f998"
                    ]
                },
                {
                    "command": [
                        "apply (Rnot_gt_le (frac_part_n_alpha k) (frac_part_n_alpha (last N)) H4).",
                        "VernacExtend",
                        "82aa4b067da16f45be76ecaa7585d8fd4192824d"
                    ]
                },
                {
                    "command": [
                        "apply (not_or_and (frac_part_n_alpha k < frac_part_n_alpha (first N))%R (frac_part_n_alpha k > frac_part_n_alpha (last N))%R H1).",
                        "VernacExtend",
                        "2725f4866b7ee705655c4b2cf0e4f9bf5b2a88e7"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "absurd_first",
            "line_nb": 130,
            "steps": [
                {
                    "command": [
                        "intros; elim inser_trans_lt with 0 k (first N + last N) N.",
                        "VernacExtend",
                        "9ef96eaa2d8f42b220fa3a9a75ea09131f410f64"
                    ]
                },
                {
                    "command": [
                        "intro y; elim y; intros; apply (first_n N k (prop_N N) H1 H2 prop_alpha).",
                        "VernacExtend",
                        "43a0eb8cff02cb0c5788f514a6e3c2b20a573ef3"
                    ]
                },
                {
                    "command": [
                        "intro y; elim y; intros.",
                        "VernacExtend",
                        "b81617548a725e077b97450b4f8b2f2621ffd3ee"
                    ]
                },
                {
                    "command": [
                        "elim (absurd1 N k H1 H2); intros.",
                        "VernacExtend",
                        "57da0bac39985fe7ddcab7038186a0f8fcc0415d"
                    ]
                },
                {
                    "command": [
                        "unfold Rge in H3; unfold Rle in |- *; unfold Rgt in H3; elim H3; intro.",
                        "VernacExtend",
                        "d457debc417d1d77764ef0fa15766c77ea65eb71"
                    ]
                },
                {
                    "command": [
                        "left; assumption.",
                        "VernacExtend",
                        "3caf0ae349d7f7f5e42b9e4faad0c11c70cd858a"
                    ]
                },
                {
                    "command": [
                        "right; auto.",
                        "VernacExtend",
                        "1f0a695ab06b3950e6a7adf329d300b1f859fe9d"
                    ]
                },
                {
                    "command": [
                        "auto.",
                        "VernacExtend",
                        "1f09da0addd069b3b65326f8c71967acc1e985af"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "absurd_last",
            "line_nb": 140,
            "steps": [
                {
                    "command": [
                        "intros; elim inser_trans_lt with 0 k (first N + last N) N.",
                        "VernacExtend",
                        "9ef96eaa2d8f42b220fa3a9a75ea09131f410f64"
                    ]
                },
                {
                    "command": [
                        "intro y; elim y; intros; apply (last_n N k (prop_N N) H1 H2 prop_alpha).",
                        "VernacExtend",
                        "917ec5694528fae233b225800bf879f8d63c5e79"
                    ]
                },
                {
                    "command": [
                        "intro y; elim y; intros.",
                        "VernacExtend",
                        "b81617548a725e077b97450b4f8b2f2621ffd3ee"
                    ]
                },
                {
                    "command": [
                        "elim (absurd1 N k H1 H2); intros; auto.",
                        "VernacExtend",
                        "eae46dd523d62d83ababb91121f9bd03e6438d31"
                    ]
                },
                {
                    "command": [
                        "auto.",
                        "VernacExtend",
                        "1f09da0addd069b3b65326f8c71967acc1e985af"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "tech_first_aux",
            "line_nb": 147,
            "steps": [
                {
                    "command": [
                        "intros; split; intro.",
                        "VernacExtend",
                        "30c96e47a522a77a5351e4399d9dffcbe0777f62"
                    ]
                },
                {
                    "command": [
                        "cut (frac_part_n_alpha a = frac_part_n_alpha (first N)).",
                        "VernacExtend",
                        "8afe0df54d5559c8e3b78bfd1547296eae908a07"
                    ]
                },
                {
                    "command": [
                        "intro; apply (tech_fp_alp_irr a (first N) H2).",
                        "VernacExtend",
                        "d3dcc160534138613939d4a1ba49ed0e3ad16225"
                    ]
                },
                {
                    "command": [
                        "elim (Rle_le_eq (frac_part_n_alpha a) (frac_part_n_alpha (first N))); intros; clear H3; generalize (H1 (first N) (first_0 N (prop_N N)) (first_N N (prop_N N))); generalize (first_n N a (prop_N N) H H0 prop_alpha); intros; apply H2.",
                        "VernacExtend",
                        "12b755728d4bd812e36d623e3054c0c2e6943da9"
                    ]
                },
                {
                    "command": [
                        "split; auto.",
                        "VernacExtend",
                        "fcd44a714bd12fa54b1c7746996e44dbac16df06"
                    ]
                },
                {
                    "command": [
                        "intros; rewrite H1; apply (first_n N b (prop_N N) H2 H3 prop_alpha).",
                        "VernacExtend",
                        "71226a5a7885379b908dd2195c67984fd319ebc6"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "eq_first_M_N",
            "line_nb": 155,
            "steps": [
                {
                    "command": [
                        "intros; split; intro.",
                        "VernacExtend",
                        "30c96e47a522a77a5351e4399d9dffcbe0777f62"
                    ]
                },
                {
                    "command": [
                        "elim (tech_first_aux M (first N) (first_0 N (prop_N N))).",
                        "VernacExtend",
                        "32b2aa96b823259cf96cd2110009c6d62926fed3"
                    ]
                },
                {
                    "command": [
                        "intros; clear H2; auto.",
                        "VernacExtend",
                        "cd0a003ea41fb307e9fe02de7d7f1d916f867522"
                    ]
                },
                {
                    "command": [
                        "rewrite H; apply (lt_plus (first N) (last N) (last_0 N (prop_N N))).",
                        "VernacExtend",
                        "139943248002b6e2eb1756d4e33be7a082b7e9d3"
                    ]
                },
                {
                    "command": [
                        "elim (tech_first_aux M (first M) (first_0 M (prop_N M)) (first_N M (prop_N M))).",
                        "VernacExtend",
                        "4de1ff1d9a4eb0bb07c5526d8aff328621777804"
                    ]
                },
                {
                    "command": [
                        "intros; clear H1; rewrite H0; auto.",
                        "VernacExtend",
                        "ced975c2405ba25982f9c4bc0c392a850af848c8"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "first_eq_M_N",
            "line_nb": 163,
            "steps": [
                {
                    "command": [
                        "intros; elim (eq_first_M_N N M H); intros; clear H1; apply H0.",
                        "VernacExtend",
                        "309f74911f6b936383d2c7a2a375e9fd3eb28f49"
                    ]
                },
                {
                    "command": [
                        "intros; rewrite H in H2; apply (absurd_first N b H1 H2).",
                        "VernacExtend",
                        "4991b4da5cfb8248926c5e39773868bb2b41d349"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "tech_last_aux",
            "line_nb": 167,
            "steps": [
                {
                    "command": [
                        "intros; split; intro.",
                        "VernacExtend",
                        "30c96e47a522a77a5351e4399d9dffcbe0777f62"
                    ]
                },
                {
                    "command": [
                        "cut (frac_part_n_alpha a = frac_part_n_alpha (last N)).",
                        "VernacExtend",
                        "174e2691b6bfb034a621cb73ffc9ae520bcac9f0"
                    ]
                },
                {
                    "command": [
                        "intro; apply (tech_fp_alp_irr a (last N) H2).",
                        "VernacExtend",
                        "c4f20bf57bb06556f3b7789de6813d19f673c57e"
                    ]
                },
                {
                    "command": [
                        "elim (Rle_le_eq (frac_part_n_alpha a) (frac_part_n_alpha (last N))); intros; clear H3; generalize (H1 (last N) (last_0 N (prop_N N)) (last_N N (prop_N N))); generalize (last_n N a (prop_N N) H H0 prop_alpha); intros; apply H2.",
                        "VernacExtend",
                        "5540743baba27bbe28c1c66723fafaa64078c489"
                    ]
                },
                {
                    "command": [
                        "split; auto.",
                        "VernacExtend",
                        "fcd44a714bd12fa54b1c7746996e44dbac16df06"
                    ]
                },
                {
                    "command": [
                        "intros; rewrite H1; apply (last_n N b (prop_N N) H2 H3 prop_alpha).",
                        "VernacExtend",
                        "3e5c417c3346d8cefa3ef0d54bb301882035f249"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "eq_last_M_N",
            "line_nb": 175,
            "steps": [
                {
                    "command": [
                        "intros; split; intro.",
                        "VernacExtend",
                        "30c96e47a522a77a5351e4399d9dffcbe0777f62"
                    ]
                },
                {
                    "command": [
                        "elim (tech_last_aux M (last N) (last_0 N (prop_N N))).",
                        "VernacExtend",
                        "a5dbf21fc2887d9d7b91bc0b99618bc4e7efae28"
                    ]
                },
                {
                    "command": [
                        "intros; clear H2; auto.",
                        "VernacExtend",
                        "cd0a003ea41fb307e9fe02de7d7f1d916f867522"
                    ]
                },
                {
                    "command": [
                        "rewrite H; rewrite plus_comm; apply (lt_plus (last N) (first N) (first_0 N (prop_N N))).",
                        "VernacExtend",
                        "3ad64633d28c894460a40dc4bfb3e63e4922b5fa"
                    ]
                },
                {
                    "command": [
                        "elim (tech_last_aux M (last M) (last_0 M (prop_N M)) (last_N M (prop_N M))).",
                        "VernacExtend",
                        "9dcd9033721d49c2b82135c502ce1571d60a80b3"
                    ]
                },
                {
                    "command": [
                        "intros; clear H1; rewrite H0; auto.",
                        "VernacExtend",
                        "ced975c2405ba25982f9c4bc0c392a850af848c8"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "last_eq_M_N",
            "line_nb": 183,
            "steps": [
                {
                    "command": [
                        "intros; elim (eq_last_M_N N M H); intros; clear H1; apply H0.",
                        "VernacExtend",
                        "0d738cd32c83e3c9f0002a8526e2ffef393e0113"
                    ]
                },
                {
                    "command": [
                        "intros; rewrite H in H2; apply (absurd_last N b H1 H2).",
                        "VernacExtend",
                        "087472be35345e3376a2c2230245038e08f2c26a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "tech_after",
            "line_nb": 187,
            "steps": [
                {
                    "command": [
                        "intros; unfold after in |- *.",
                        "VernacExtend",
                        "bba5b3ad26b30afb000a91b27a4b9fae2f4a685a"
                    ]
                },
                {
                    "command": [
                        "case (exist_after_M (frac_part_n_alpha n) (P1 n) (P2 n) N); intro.",
                        "VernacExtend",
                        "fa726f7b98fa2a806f81ea6fed742890859091fd"
                    ]
                },
                {
                    "command": [
                        "elim s; intros x y.",
                        "VernacExtend",
                        "541a05005677bba9ddad4a33aa70e7e46df51c90"
                    ]
                },
                {
                    "command": [
                        "elim y; intros.",
                        "VernacExtend",
                        "250726da241163a50d9d8689bcc718a42a970c80"
                    ]
                },
                {
                    "command": [
                        "clear s y.",
                        "VernacExtend",
                        "1e6c9a89d0a9e38dfc2aeb4567c095b644009772"
                    ]
                },
                {
                    "command": [
                        "elim H6; intros; clear H6.",
                        "VernacExtend",
                        "9a4f642ad54a48ea5cf9a83f7e9178871fbc824b"
                    ]
                },
                {
                    "command": [
                        "elim H8; intros; clear H8.",
                        "VernacExtend",
                        "c5cff2a48d86554ecab34f729037fbac582e53ed"
                    ]
                },
                {
                    "command": [
                        "generalize (tech_not_exist_pt (fun k : nat => 0 < k) (fun k : nat => k < N) (fun k : nat => (frac_part_n_alpha n < frac_part_n_alpha k)%R) (fun k : nat => (frac_part_n_alpha k < frac_part_n_alpha m)%R) H4); clear H4; intro.",
                        "VernacExtend",
                        "e85cc99e29bb122ff6a2a2e7a0f663e535dc2cc7"
                    ]
                },
                {
                    "command": [
                        "elim (H4 x H5 H7); intro.",
                        "VernacExtend",
                        "7f4188ff256aec5ce0fc3473c6b2ddb7de947522"
                    ]
                },
                {
                    "command": [
                        "absurd (frac_part_n_alpha n < frac_part_n_alpha x)%R; auto.",
                        "VernacExtend",
                        "6b2aa6b8b5804cbbe05dd3c53b9039a4691ca672"
                    ]
                },
                {
                    "command": [
                        "unfold Rgt in H9; generalize (H9 m H1 H2 H3); intro; generalize (Rnot_lt_ge (frac_part_n_alpha x) (frac_part_n_alpha m) H8); intro; generalize (Rge_antisym (frac_part_n_alpha m) (frac_part_n_alpha x) H10 H11); intro; apply (tech_fp_alp_irr m x H12).",
                        "VernacExtend",
                        "dd06cfc9a1d1de0d859a87758c2d43a115c36ccd"
                    ]
                },
                {
                    "command": [
                        "elim (a m H1 H2); intros; unfold Rle in H6; elim H6; intro.",
                        "VernacExtend",
                        "99b7af08cee91220376e636b0ca4a43d9fdede33"
                    ]
                },
                {
                    "command": [
                        "generalize (Rlt_asym (frac_part_n_alpha m) (frac_part_n_alpha n) H7); intro; elimtype False; auto.",
                        "VernacExtend",
                        "1289fd7dc6d90e56279092b1fa44912ad82b7a41"
                    ]
                },
                {
                    "command": [
                        "cut ((frac_part_n_alpha n < frac_part_n_alpha m)%R \\/ (frac_part_n_alpha n > frac_part_n_alpha m)%R).",
                        "VernacExtend",
                        "fd3cf690c333096634d4e503f8fe310bfc93d857"
                    ]
                },
                {
                    "command": [
                        "intro; generalize (Rlt_dichotomy_converse (frac_part_n_alpha n) (frac_part_n_alpha m) H8); intro; elimtype False; auto.",
                        "VernacExtend",
                        "8f3e5364e10fa7d59c7f338872306cdf4037d4ee"
                    ]
                },
                {
                    "command": [
                        "left; auto.",
                        "VernacExtend",
                        "b03090a3068bb41ee1034a9c886a5e47eddfb98a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "prop_after",
            "line_nb": 205,
            "steps": [
                {
                    "command": [
                        "intros; elim H0; intros; elim H1; intros; elim H3; intros; elim H5; intro; clear H0 H1 H3 H5; rewrite <- H; unfold after in |- *; case (exist_after_M (frac_part_n_alpha n) (P1 n) (P2 n) N); intro.",
                        "VernacExtend",
                        "f24a587c8080c540ddf9c6d423390c4df600b074"
                    ]
                },
                {
                    "command": [
                        "elim s; intros x0 y H0; elim y; intros; elim H3; intros; elim H7; intros; clear s y H3 H7; fold (frac_part_n_alpha x > frac_part_n_alpha n)%R in H6; generalize (H9 x (lt_le_weak 0 x H2) H4 H6); intro; generalize (Rgt_not_le (frac_part_n_alpha x0) (frac_part_n_alpha x) H0); intro; cut (frac_part_n_alpha x0 <= frac_part_n_alpha x)%R.",
                        "VernacExtend",
                        "6a6bef735f3a0a15befe7b432f0ba0fee3b8f200"
                    ]
                },
                {
                    "command": [
                        "intro; auto.",
                        "VernacExtend",
                        "c01170981862e9d8608d651ab75e833f7953118c"
                    ]
                },
                {
                    "command": [
                        "unfold Rge in H3; unfold Rle in |- *; elim H3; auto.",
                        "VernacExtend",
                        "8f796f4539622a92978cf526d58f19b25e62e61b"
                    ]
                },
                {
                    "command": [
                        "unfold frac_part_n_alpha in |- *; simpl in |- *; rewrite (Rmult_0_l alpha); rewrite fp_R0; elim (base_fp (INR x * alpha)); intros; generalize (Rgt_not_le 0 (frac_part (INR x * alpha)) H3); intro; cut (0 <= frac_part (INR x * alpha))%R.",
                        "VernacExtend",
                        "72e27c5c6c19c734a43330c7c772dc1c64fdda56"
                    ]
                },
                {
                    "command": [
                        "intro; auto.",
                        "VernacExtend",
                        "c01170981862e9d8608d651ab75e833f7953118c"
                    ]
                },
                {
                    "command": [
                        "unfold Rge in H0; unfold Rle in |- *; elim H0; auto.",
                        "VernacExtend",
                        "5b99d4777c4b4b6ec990d629db0c34855647006c"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "tech_after_lt",
            "line_nb": 214,
            "steps": [
                {
                    "command": [
                        "intros; rewrite <- H2; unfold after in |- *; case (exist_after_M (frac_part_n_alpha n) (P1 n) (P2 n) N); intros.",
                        "VernacExtend",
                        "644390b34f158c817f8a26164c959513844d096d"
                    ]
                },
                {
                    "command": [
                        "elim s; intros x y.",
                        "VernacExtend",
                        "541a05005677bba9ddad4a33aa70e7e46df51c90"
                    ]
                },
                {
                    "command": [
                        "elim y; intros; clear y.",
                        "VernacExtend",
                        "c1bb96cdddb3eb0ea00da987e10571e18dcbe66a"
                    ]
                },
                {
                    "command": [
                        "elim H4; intros; clear H4.",
                        "VernacExtend",
                        "dec7e5130574bbdf7fbc3621e186cdd3219dcbfd"
                    ]
                },
                {
                    "command": [
                        "elim H6; intros; clear H6; auto.",
                        "VernacExtend",
                        "4d7f23a8ff8243c0f62f9b6043ac70f72232e7d1"
                    ]
                },
                {
                    "command": [
                        "cut (after N n = 0).",
                        "VernacExtend",
                        "4872a1dc58d87c342f02086329be50357faf0665"
                    ]
                },
                {
                    "command": [
                        "intro; rewrite H2 in H3; elimtype False; auto.",
                        "VernacExtend",
                        "4f33271e98608925b62eaba7053dec955d2b2e39"
                    ]
                },
                {
                    "command": [
                        "unfold after in |- *; case (exist_after_M (frac_part_n_alpha n) (P1 n) (P2 n) N); intros; auto.",
                        "VernacExtend",
                        "32551b5d7ccfaa9e98f419d9a7efc210527f4d6c"
                    ]
                },
                {
                    "command": [
                        "elim s; intros x y.",
                        "VernacExtend",
                        "541a05005677bba9ddad4a33aa70e7e46df51c90"
                    ]
                },
                {
                    "command": [
                        "elim y; intros; clear y.",
                        "VernacExtend",
                        "c1bb96cdddb3eb0ea00da987e10571e18dcbe66a"
                    ]
                },
                {
                    "command": [
                        "elim H4; intros; clear H4.",
                        "VernacExtend",
                        "dec7e5130574bbdf7fbc3621e186cdd3219dcbfd"
                    ]
                },
                {
                    "command": [
                        "elim H6; intros; clear H6; clear s.",
                        "VernacExtend",
                        "09dbe5763c5492d6db7ee60b8af1800149d35b46"
                    ]
                },
                {
                    "command": [
                        "generalize (lt_le_weak 0 x H3); intro.",
                        "VernacExtend",
                        "9296d3387638ba81c80e5bb8a7ae3f2678f44575"
                    ]
                },
                {
                    "command": [
                        "elim (a x H6 H5); intros.",
                        "VernacExtend",
                        "17de6dbd222b62b81e4df15200c9f75b16291db5"
                    ]
                },
                {
                    "command": [
                        "unfold Rle in H9; elim H9; intro; clear H9.",
                        "VernacExtend",
                        "e82b76da5d0a8ae44fe464afb940308774895a1a"
                    ]
                },
                {
                    "command": [
                        "generalize (Rlt_asym (frac_part_n_alpha n) (frac_part_n_alpha x) H4); intro; elimtype False; auto.",
                        "VernacExtend",
                        "8665fe6d732546e0e5e5bba7646c4d81f2d17482"
                    ]
                },
                {
                    "command": [
                        "generalize (sym_eq H10); intro; clear H10.",
                        "VernacExtend",
                        "7a69dcfd2cc508f86368631550a2a311daba48f7"
                    ]
                },
                {
                    "command": [
                        "cut ((frac_part_n_alpha n < frac_part_n_alpha x)%R \\/ (frac_part_n_alpha n > frac_part_n_alpha x)%R); auto.",
                        "VernacExtend",
                        "02c9d3479a97478b593bb67c69b843f55230cc20"
                    ]
                },
                {
                    "command": [
                        "intro; generalize (Rlt_dichotomy_converse (frac_part_n_alpha n) (frac_part_n_alpha x) H10); intro; elimtype False; auto.",
                        "VernacExtend",
                        "8651b3fcf0a56da2067dc6aeba3bb4c20fe9f6ff"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "after_last",
            "line_nb": 235,
            "steps": [
                {
                    "command": [
                        "unfold after in |- *; intro; case (exist_after_M (frac_part_n_alpha (last N)) (P1 (last N)) (P2 (last N)) N); auto.",
                        "VernacExtend",
                        "44878bea40c3a1774417c745103ca91708414e55"
                    ]
                },
                {
                    "command": [
                        "intro; elim s; intros x y; elim y; intros; elim H0; intros; elim H2; intros; clear s y H0 H2 H4; generalize (last_n N x (prop_N N) H H1 prop_alpha); intro; generalize (Rgt_not_le (frac_part_n_alpha x) (frac_part_n_alpha (last N)) H3); intro; elimtype False; auto.",
                        "VernacExtend",
                        "aa63adcd7c075dac13a5f7797d527a4c2876a2c8"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "prop_M",
            "line_nb": 239,
            "steps": [
                {
                    "command": [
                        "intros; rewrite H; cut ((frac_part_n_alpha (first N) + frac_part_n_alpha (last N) < 1)%R \\/ (frac_part_n_alpha (first N) + frac_part_n_alpha (last N) >= 1)%R).",
                        "VernacExtend",
                        "29f605918ea4cb2909d87f16d7a8687537331086"
                    ]
                },
                {
                    "command": [
                        "intros; elim H0; intro; clear H0.",
                        "VernacExtend",
                        "4dccf40236e024f8b285cde693f08b7df96e1df5"
                    ]
                },
                {
                    "command": [
                        "right; unfold frac_part_n_alpha in H1; unfold frac_part_n_alpha in |- *; rewrite (plus_INR (first N) (last N)); rewrite (Rmult_comm (INR (first N) + INR (last N)) alpha); rewrite (Rmult_plus_distr_l alpha (INR (first N)) (INR (last N))); rewrite (Rmult_comm (INR (first N)) alpha) in H1; rewrite (Rmult_comm (INR (last N)) alpha) in H1; rewrite (Rmult_comm (INR (last N)) alpha); rewrite (plus_frac_part2 (alpha * INR (first N)) (alpha * INR (last N)) H1); elim (Rplus_ne (alpha * INR (last N))); intros; clear H0; pattern (alpha * INR (last N))%R at 2 in |- *; rewrite <- H2; rewrite (Rplus_comm (frac_part (alpha * INR (first N))) (frac_part (alpha * INR (last N)))); rewrite (Rplus_comm 0 (alpha * INR (last N))); cut (frac_part (alpha * INR (last N)) + frac_part 0 < 1)%R.",
                        "VernacExtend",
                        "8d19e24b5f46d82c657ece89b7b893236de07d28"
                    ]
                },
                {
                    "command": [
                        "intro; rewrite (plus_frac_part2 (alpha * INR (last N)) 0 H0); rewrite fp_R0; apply (Rplus_gt_compat_l (frac_part (alpha * INR (last N))) (frac_part (alpha * INR (first N))) 0); generalize (fp_first_R0 N); unfold frac_part_n_alpha in |- *; rewrite (Rmult_comm alpha (INR (first N))); auto.",
                        "VernacExtend",
                        "9f3f4c3823291ef1373a18ebed5dddb55f3cbe47"
                    ]
                },
                {
                    "command": [
                        "rewrite fp_R0; elim (Rplus_ne (frac_part (alpha * INR (last N)))); intros; clear H3; rewrite H0; rewrite (Rmult_comm alpha (INR (last N))); cut (frac_part (INR (last N) * alpha) = frac_part_n_alpha (last N)).",
                        "VernacExtend",
                        "c118205b602d36304be248e93dc45009b3bdc0b3"
                    ]
                },
                {
                    "command": [
                        "intro; rewrite H3; apply (P2 (last N)).",
                        "VernacExtend",
                        "9acb5aae66d14e69c4985570bb7fc994efaf8ec5"
                    ]
                },
                {
                    "command": [
                        "unfold frac_part_n_alpha in |- *; auto.",
                        "VernacExtend",
                        "5303dfa336ececb6dd1cb504c968680e132be6d0"
                    ]
                },
                {
                    "command": [
                        "left; unfold frac_part_n_alpha in H1; unfold frac_part_n_alpha in |- *; unfold frac_part_n_alpha in |- *; rewrite (plus_INR (first N) (last N)); rewrite (Rmult_comm (INR (first N) + INR (last N)) alpha); rewrite (Rmult_plus_distr_l alpha (INR (first N)) (INR (last N))); rewrite (Rmult_comm (INR (first N)) alpha) in H1; rewrite (Rmult_comm (INR (last N)) alpha) in H1; rewrite (Rmult_comm (INR (first N)) alpha); rewrite (plus_frac_part1 (alpha * INR (first N)) (alpha * INR (last N)) H1); unfold Rminus in |- *; rewrite Rplus_assoc; elim (Rplus_ne (alpha * INR (first N))); intros; clear H2; pattern (alpha * INR (first N))%R at 2 in |- *; rewrite <- H0; cut (frac_part (alpha * INR (first N)) + frac_part 0 < 1)%R.",
                        "VernacExtend",
                        "8986daa9875100009f34a9b4660ee7f29d498767"
                    ]
                },
                {
                    "command": [
                        "intro; rewrite (plus_frac_part2 (alpha * INR (first N)) 0 H2); rewrite fp_R0; apply (Rplus_lt_compat_l (frac_part (alpha * INR (first N))) (frac_part (alpha * INR (last N)) + -1) 0); cut ((frac_part (alpha * INR (last N)) + -1)%R = (frac_part (alpha * INR (last N)) - 1)%R).",
                        "VernacExtend",
                        "153c7b55c7cb6e49f605bd93c4cf771fbc0ef08f"
                    ]
                },
                {
                    "command": [
                        "intro; rewrite H3; clear H3; apply (Rlt_minus (frac_part (alpha * INR (last N))) 1).",
                        "VernacExtend",
                        "97f899f1c57729f1034e64e0fc69af1f6543e64f"
                    ]
                },
                {
                    "command": [
                        "rewrite (Rmult_comm alpha (INR (last N))); cut (frac_part (INR (last N) * alpha) = frac_part_n_alpha (last N)).",
                        "VernacExtend",
                        "a0b55fdeaa60a63bf0bcd464cbb294092dcedb6d"
                    ]
                },
                {
                    "command": [
                        "intro; rewrite H3; apply (P2 (last N)).",
                        "VernacExtend",
                        "9acb5aae66d14e69c4985570bb7fc994efaf8ec5"
                    ]
                },
                {
                    "command": [
                        "unfold frac_part_n_alpha in |- *; auto.",
                        "VernacExtend",
                        "5303dfa336ececb6dd1cb504c968680e132be6d0"
                    ]
                },
                {
                    "command": [
                        "unfold Rminus in |- *; auto.",
                        "VernacExtend",
                        "f7289b22a5bfca0d389920289691afce87d4220a"
                    ]
                },
                {
                    "command": [
                        "rewrite fp_R0; elim (Rplus_ne (frac_part (alpha * INR (first N)))); intros; clear H3; rewrite H2; rewrite (Rmult_comm alpha (INR (first N))); cut (frac_part (INR (first N) * alpha) = frac_part_n_alpha (first N)).",
                        "VernacExtend",
                        "c1aae06dc0b66509449106f0529c646df60c203a"
                    ]
                },
                {
                    "command": [
                        "intro; rewrite H3; apply (P2 (first N)).",
                        "VernacExtend",
                        "060be799a574567b7993bd52a9e8b60c14ee12bf"
                    ]
                },
                {
                    "command": [
                        "unfold frac_part_n_alpha in |- *; auto.",
                        "VernacExtend",
                        "5303dfa336ececb6dd1cb504c968680e132be6d0"
                    ]
                },
                {
                    "command": [
                        "unfold Rge in |- *; generalize (Rtotal_order (frac_part_n_alpha (first N) + frac_part_n_alpha (last N)) 1); intro; elim H0; intro.",
                        "VernacExtend",
                        "f3fc1aabad19717d75ca16c8a29fbc232bdf1f09"
                    ]
                },
                {
                    "command": [
                        "left; auto.",
                        "VernacExtend",
                        "b03090a3068bb41ee1034a9c886a5e47eddfb98a"
                    ]
                },
                {
                    "command": [
                        "right; elim H1; auto.",
                        "VernacExtend",
                        "2e6941f8a0aaf312861096c810c1f42fab95040a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "le_N_M",
            "line_nb": 261,
            "steps": [
                {
                    "command": [
                        "intros; generalize (prop_M N M H); intro; cut (~ N > M).",
                        "VernacExtend",
                        "3050c09e73bca02e554ed408b0b252472da223ca"
                    ]
                },
                {
                    "command": [
                        "intro; apply not_gt_le; auto.",
                        "VernacExtend",
                        "8cb7c9e2a38d4a9c3d4c45f2b8c7acbbefd20f7f"
                    ]
                },
                {
                    "command": [
                        "unfold gt in |- *; red in |- *; intro; cut (0 < M).",
                        "VernacExtend",
                        "e18b5e4aa9f30296e0a43957d04f8616e54a1e95"
                    ]
                },
                {
                    "command": [
                        "intro; elim H0; intro; clear H0.",
                        "VernacExtend",
                        "d709aec994d1e2ec7aaf7bc58cc903a124545ae1"
                    ]
                },
                {
                    "command": [
                        "generalize (first_n N M (prop_N N) H2 H1 prop_alpha); intro.",
                        "VernacExtend",
                        "d87358a15f7697879a132daf8d9d2275ee9af3d3"
                    ]
                },
                {
                    "command": [
                        "generalize (Rgt_not_le (frac_part_n_alpha (first N)) (frac_part_n_alpha M) H3); intro; clear H3; auto.",
                        "VernacExtend",
                        "73703caec49395acb338be987a3047a7261a942f"
                    ]
                },
                {
                    "command": [
                        "generalize (last_n N M (prop_N N) H2 H1 prop_alpha); intro.",
                        "VernacExtend",
                        "376d1e50a45f304350d92d47a0e7d3ff2db97b4b"
                    ]
                },
                {
                    "command": [
                        "unfold Rgt in H3; generalize (Rgt_not_le (frac_part_n_alpha M) (frac_part_n_alpha (last N)) H3); intro; clear H3; auto.",
                        "VernacExtend",
                        "d7221dd3aadc05577e174441a073b6fde4be95d8"
                    ]
                },
                {
                    "command": [
                        "rewrite H; generalize (first_0 N (prop_N N)); intro; apply (lt_O_plus (first N) (last N) H2).",
                        "VernacExtend",
                        "be3bee92b592c6ed54bdc9c8b6bda1233eeb86bb"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        }
    ]
}