{
    "filename": "pcm/pred.v",
    "coq_project": "fcsl-pcm",
    "vernac_cmds": [
        [
            "From Coq Require Import ssreflect ssrbool ssrfun Setoid.",
            "VernacRequire",
            "573ecc9ac27d9fbd646ab74b050f9f990ca14fbb"
        ],
        [
            "From mathcomp Require Import seq.",
            "VernacRequire",
            "67a466171b5bd52f9481b55896b96e146cc64eab"
        ],
        [
            "Set Implicit Arguments.",
            "VernacSetOption",
            "9e84ff8896f028601d8aded48c1d4aebe60aa584"
        ],
        [
            "Unset Strict Implicit.",
            "VernacUnsetOption",
            "2842adaf6959318f2042805935c46f513bdc0348"
        ],
        [
            "Unset Printing Implicit Defensive.",
            "VernacUnsetOption",
            "444e5f0be4b25d9b1fd556943a447ec10046d151"
        ],
        [
            "Set Warnings \"-projection-no-head-constant\".",
            "VernacSetOption",
            "4d8ec7dbc700a2b76d2426a7417d70474ad14e41"
        ],
        [
            "Lemma andTp p : True /\\ p <-> p.",
            "VernacStartTheoremProof",
            "5b36fa4225b3199b02b4f71c9ab8194247285faa"
        ],
        [
            "by intuition.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma andpT p : p /\\ True <-> p.",
            "VernacStartTheoremProof",
            "3cabc037894b31900b85d166d409179de82723c8"
        ],
        [
            "by intuition.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma andFp p : False /\\ p <-> False.",
            "VernacStartTheoremProof",
            "d3f859b9710377521f832450fce2d39b8a26277a"
        ],
        [
            "by intuition.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma andpF p : p /\\ False <-> False.",
            "VernacStartTheoremProof",
            "8518b481c2b59300ecfc1cfc07d29931f528497a"
        ],
        [
            "by intuition.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma orTp p : True \\/ p <-> True.",
            "VernacStartTheoremProof",
            "1e9d937e27b266adcdb6db7f2dd83545a0628f32"
        ],
        [
            "by intuition.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma orpT p : p \\/ True <-> True.",
            "VernacStartTheoremProof",
            "74f1f3933cc18e1981e0dd6f483ccb5f4d6046ec"
        ],
        [
            "by intuition.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma orFp p : False \\/ p <-> p.",
            "VernacStartTheoremProof",
            "4f41ce73fbd225209ef47f8d5e99bd9e487cc562"
        ],
        [
            "by intuition.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma orpF p : p \\/ False <-> p.",
            "VernacStartTheoremProof",
            "911936fa06540e45c6a67573c74aa6ae0b0c2b33"
        ],
        [
            "by intuition.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Delimit Scope rel_scope with rel.",
            "VernacDelimiters",
            "ef39b80cabbec2fb68ba3a6376e9a45887cb2f3b"
        ],
        [
            "Open Scope rel_scope.",
            "VernacOpenCloseScope",
            "a3bdb75c4b260dccad422bf643ab33a3ca41a319"
        ],
        [
            "Definition Pred T := T -> Prop.",
            "VernacDefinition",
            "763660ebbe9a6d51157da6075fa815e5685b2d51"
        ],
        [
            "Identity Coercion fun_of_Pred : Pred >-> Funclass.",
            "VernacIdentityCoercion",
            "576085a8121d733d4adbbccbf3f84b5783ab55fb"
        ],
        [
            "Notation xPred0 := (fun _ => False).",
            "VernacSyntacticDefinition",
            "829c7cac9e9b556d0405b10397bcf16716523025"
        ],
        [
            "Notation xPred1 := (fun x y => x = y).",
            "VernacSyntacticDefinition",
            "ea4d2b12ae47cae52aa8b113a405350dfb34d56b"
        ],
        [
            "Notation xPredT := (fun _ => True).",
            "VernacSyntacticDefinition",
            "e4f843e326fd90059b4608a44abe0b616bf88c6d"
        ],
        [
            "Notation xPredI := (fun (p1 p2 : Pred _) x => p1 x /\\ p2 x).",
            "VernacSyntacticDefinition",
            "1752e5effa921dba26cac4cc94ac9150c09afb6d"
        ],
        [
            "Notation xPredU := (fun (p1 p2 : Pred _) x => p1 x \\/ p2 x).",
            "VernacSyntacticDefinition",
            "9dd23d97cb0e75ccdc8e0790fef152d1ec6535da"
        ],
        [
            "Notation xPredC := (fun (p : Pred _) x => ~ p x).",
            "VernacSyntacticDefinition",
            "6e2e19e8623c286828cc8ab262157c762fe205fd"
        ],
        [
            "Notation xPredD := (fun (p1 p2 : Pred _) x => ~ p2 x /\\ p1 x).",
            "VernacSyntacticDefinition",
            "c2c2aca74bca13423d84b3dce4d5d01b96b15220"
        ],
        [
            "Notation xPreim := (fun f (p : Pred _) x => p (f x)).",
            "VernacSyntacticDefinition",
            "d092c4c5b671027e5426a7c731a03afda5ac20ab"
        ],
        [
            "Section Predicates.",
            "VernacBeginSection",
            "9df9f8e47ebf8f05e97818dc41a6decf2caadceb"
        ],
        [
            "Variable T : Type.",
            "VernacAssumption",
            "a15b17e37c4241158d544882375356c273dc93f2"
        ],
        [
            "Definition Simpl_Pred := simpl_fun T Prop.",
            "VernacDefinition",
            "a0ffe2a193e84c9a63fcd38c3e0e45d10a3b36a9"
        ],
        [
            "Definition SimplPred (p : Pred T) : Simpl_Pred := SimplFun p.",
            "VernacDefinition",
            "de5997e0f2a540912d3b1fa578cafccdfbc50f6d"
        ],
        [
            "Coercion Pred_of_Simpl (p : Simpl_Pred) : Pred T := p : T -> Prop.",
            "VernacDefinition",
            "f9b83f174807bf58d99e458be0d36f6e6fbe28a9"
        ],
        [
            "Definition Pred0 := SimplPred xPred0.",
            "VernacDefinition",
            "8f51676cd2f50b3de6169dea7e1e82785ffab3b1"
        ],
        [
            "Definition Pred1 x := SimplPred (xPred1 x).",
            "VernacDefinition",
            "0c1a3b1be0c5f6985ed4a3bba1bd5810024f405f"
        ],
        [
            "Definition PredT := SimplPred xPredT.",
            "VernacDefinition",
            "a6f6c0144cf76220e9a9fbf611992b5ebd7c4d95"
        ],
        [
            "Definition PredI p1 p2 := SimplPred (xPredI p1 p2).",
            "VernacDefinition",
            "f52d8b6f9580a67feb63b5e3125e64968d80c377"
        ],
        [
            "Definition PredU p1 p2 := SimplPred (xPredU p1 p2).",
            "VernacDefinition",
            "bb0fbd936b086d013458a87e60e9b7ef0a95ea9a"
        ],
        [
            "Definition PredC p := SimplPred (xPredC p).",
            "VernacDefinition",
            "340bdecff49641c701fc0de7ea69080ef168ba98"
        ],
        [
            "Definition PredD p1 p2 := SimplPred (xPredD p1 p2).",
            "VernacDefinition",
            "c8e0d3cd24e4c1b99238bcc08e58af3f05436524"
        ],
        [
            "Definition Preim rT f (d : Pred rT) := SimplPred (xPreim f d).",
            "VernacDefinition",
            "bb5403c66d492ab3086c5b530b81c068109f7786"
        ],
        [
            "CoInductive Mem_Pred : Type := MemProp of Pred T.",
            "VernacInductive",
            "7c844082a985e522aff3677f4784a1436695dc1c"
        ],
        [
            "Definition isMem pT toPred mem := mem = (fun p : pT => MemProp [eta toPred p]).",
            "VernacDefinition",
            "27812eb563de642eb5ba85fd6c0cdba6f628122a"
        ],
        [
            "Structure PredType : Type := PropPredType { Pred_Sort :> Type; toPred : Pred_Sort -> Pred T; _ : {mem | isMem toPred mem}}.",
            "VernacInductive",
            "ba24c67f31b5d64d393a18325148ff1ea18f05fa"
        ],
        [
            "Definition mkPredType pT toP := PropPredType (exist (@isMem pT toP) _ (erefl _)).",
            "VernacDefinition",
            "3e32f182dfeab0aab1a1291ff71d4cc5351ef72a"
        ],
        [
            "Canonical Structure PredPredType := Eval hnf in @mkPredType (Pred T) id.",
            "VernacDefinition",
            "13e1d936983bae74b4a21892d5c7cf9c4804a7e9"
        ],
        [
            "Canonical Structure SimplPredPredType := Eval hnf in mkPredType Pred_of_Simpl.",
            "VernacDefinition",
            "417ba6e2c9f2074fc58064b8b3f2092812130ab2"
        ],
        [
            "Coercion Pred_of_Mem mp : Pred_Sort PredPredType := let: MemProp p := mp in [eta p].",
            "VernacDefinition",
            "3af41bfe43e0b35ed62934a85fa78cd3700e72fb"
        ],
        [
            "Canonical Structure MemPredType := Eval hnf in mkPredType Pred_of_Mem.",
            "VernacDefinition",
            "2a2fca62c017d509fa4caacc5d45fce524f083eb"
        ],
        [
            "Canonical Structure predPredType := Eval hnf in @mkPredType (pred T) id.",
            "VernacDefinition",
            "57a638f5adccae177e24ade8a2ec5623acbae6cd"
        ],
        [
            "Canonical Structure simplpredPredType := Eval hnf in @mkPredType (simpl_pred T) (fun p x => p x).",
            "VernacDefinition",
            "72eda37c26c8e111113b0c70c45555ea42338c7e"
        ],
        [
            "End Predicates.",
            "VernacEndSegment",
            "ecbe5da6427239d32e444fa4d516db31ac039acd"
        ],
        [
            "Arguments Pred0 [T].",
            "VernacArguments",
            "3435b07c362be7f039c43cf5d9aff5857115747b"
        ],
        [
            "Arguments PredT [T].",
            "VernacArguments",
            "21de0304ec716e40d2f246f564eefd830ca24af6"
        ],
        [
            "Prenex Implicits Pred0 PredT PredI PredU PredC PredD Preim.",
            "VernacExtend",
            "5185b8e46e18501027c6997733f29d0b9ce58c57"
        ],
        [
            "Notation \"r1 +p r2\" := (PredU r1 r2 : Pred _) (at level 55, right associativity) : rel_scope.",
            "VernacNotation",
            "b299e7680c0d13e85cb4fcbd4b9ff36e2e20edf7"
        ],
        [
            "Notation \"r1 *p r2\" := (xPredI r1 r2 : Pred _) (at level 45, right associativity) : rel_scope.",
            "VernacNotation",
            "ca06c885d85bb8220a8713cbef7bd426b54c4670"
        ],
        [
            "Notation \"[ 'Pred' : T | E ]\" := (SimplPred (fun _ : T => E)) (at level 0, format \"[ 'Pred' : T | E ]\") : fun_scope.",
            "VernacNotation",
            "9a2115e4a54275d99989648b5caf95bfacd22d31"
        ],
        [
            "Notation \"[ 'Pred' x | E ]\" := (SimplPred (fun x => E)) (at level 0, x ident, format \"[ 'Pred' x | E ]\") : fun_scope.",
            "VernacNotation",
            "d2d001e09bbc6b7d19f131c1dda4d002c0e5c169"
        ],
        [
            "Notation \"[ 'Pred' x : T | E ]\" := (SimplPred (fun x : T => E)) (at level 0, x ident, only parsing) : fun_scope.",
            "VernacNotation",
            "04c762010105d5696dfe23e8240142df195c1852"
        ],
        [
            "Notation \"[ 'Pred' x y | E ]\" := (SimplPred (fun t => let: (x, y) := t in E)) (at level 0, x ident, y ident, format \"[ 'Pred' x y | E ]\") : fun_scope.",
            "VernacNotation",
            "9c3f226ead0b3862db791d56da1c8249de142caf"
        ],
        [
            "Notation \"[ 'Pred' x y : T | E ]\" := (SimplPred (fun t : (T*T) => let: (x, y) := t in E)) (at level 0, x ident, y ident, only parsing) : fun_scope.",
            "VernacNotation",
            "5f248ec66e88371d8da629ff4766bbd96ad0fc19"
        ],
        [
            "Definition repack_Pred T pT := let: PropPredType _ a mP := pT return {type of @PropPredType T for pT} -> _ in fun k => k a mP.",
            "VernacDefinition",
            "089cb10bd335c755aa41cb1ee5d4f0c6b1adeea7"
        ],
        [
            "Notation \"[ 'PredType' 'of' T ]\" := (repack_Pred (fun a => @PropPredType _ T a)) (at level 0, format \"[ 'PredType' 'of' T ]\") : form_scope.",
            "VernacNotation",
            "353e2de637a9871f5fbfaa4da85cad44212bc15a"
        ],
        [
            "Notation Pred_Class := (Pred_Sort (PredPredType _)).",
            "VernacSyntacticDefinition",
            "59702d180757ffddd053d95289f44f314ac80314"
        ],
        [
            "Coercion Sort_of_Simpl_Pred T (p : Simpl_Pred T) : Pred_Class := p : Pred T.",
            "VernacDefinition",
            "8fc42aafa3e34a22aaf735301568d6596ce262b0"
        ],
        [
            "Definition PredArgType := Type.",
            "VernacDefinition",
            "47bf349d4c1f4f4c0a92df74deac60e8d02a0c73"
        ],
        [
            "Coercion Pred_of_argType (T : PredArgType) : Simpl_Pred T := PredT.",
            "VernacDefinition",
            "50450983e5d95ffce4c904874771c52ef5a1f198"
        ],
        [
            "Notation \"{ :: T }\" := (T%type : PredArgType) (at level 0, format \"{ :: T }\") : type_scope.",
            "VernacNotation",
            "3a2e64101ff37e932ee7032fdd7e9a31a1cecfea"
        ],
        [
            "Definition Mem T (pT : PredType T) : pT -> Mem_Pred T := nosimpl (let: PropPredType _ _ (exist mem _) := pT return pT -> _ in mem).",
            "VernacDefinition",
            "29e571911097105ffe1fc4b228fa796dffe24c7d"
        ],
        [
            "Definition InMem T x mp := nosimpl Pred_of_Mem T mp x.",
            "VernacDefinition",
            "23c981a67b4d439f45e5706f333d7c5ef0b10658"
        ],
        [
            "Prenex Implicits Mem.",
            "VernacExtend",
            "ddd85bd147ba92a6153853969ed9892a5b27c1c3"
        ],
        [
            "Coercion Pred_of_Mem_Pred T mp := [Pred x : T | InMem x mp].",
            "VernacDefinition",
            "e9ef700033bfa6fd10db87891a71ba52f0cf7c5d"
        ],
        [
            "Definition EqPredType T (pT : PredType T) (p1 p2 : pT) := forall x : T, toPred p1 x <-> toPred p2 x.",
            "VernacDefinition",
            "5c6914c66ed8a068d5d183170bd8aef051aefe8e"
        ],
        [
            "Definition SubPredType T (pT : PredType T) (p1 p2 : pT) := forall x : T, toPred p1 x -> toPred p2 x.",
            "VernacDefinition",
            "0de9f89a7f4ccfeb7bfa7273db8224d061450850"
        ],
        [
            "Definition EqSimplPred T (p1 p2 : Simpl_Pred T) := EqPredType p1 p2.",
            "VernacDefinition",
            "fa27e4b8e927255ed92bfeb3202f716b41272b02"
        ],
        [
            "Definition SubSimplPred T (p1 p2 : Simpl_Pred T) := SubPredType p1 p2.",
            "VernacDefinition",
            "ffd127bea2eeb51e884642461c2fa31143c8d8ea"
        ],
        [
            "Definition EqPredFun T1 T2 (pT2 : PredType T2) p1 p2 := forall x : T1, @EqPredType T2 pT2 (p1 x) (p2 x).",
            "VernacDefinition",
            "80dac39823c8e1e78941029fef44dec37f78f482"
        ],
        [
            "Definition SubPredFun T1 T2 (pT2 : PredType T2) p1 p2 := forall x : T1, @SubPredType T2 pT2 (p1 x) (p2 x).",
            "VernacDefinition",
            "18e3b4f2c099e5288c4c49d22389291cca2dade4"
        ],
        [
            "Definition EqMem T p1 p2 := forall x : T, InMem x p1 <-> InMem x p2.",
            "VernacDefinition",
            "15baaabff817295928f74d2e7932d6fabd97e72f"
        ],
        [
            "Definition SubMem T p1 p2 := forall x : T, InMem x p1 -> InMem x p2.",
            "VernacDefinition",
            "6b2a9bb055abe2a4ff1f484d65820da5f0ea4121"
        ],
        [
            "Notation \"A <~> B\" := (@EqPredType _ _ A B) (at level 70, no associativity) : rel_scope.",
            "VernacNotation",
            "9cb2e00d3335d2f7c4195bcddfe3f63fc204ca02"
        ],
        [
            "Notation \"A ~> B\" := (@SubPredType _ _ A B) (at level 70, no associativity) : rel_scope.",
            "VernacNotation",
            "4b6d2b819bebc42d27faab6c53d0fa94723383ae"
        ],
        [
            "Notation \"A <~1> B\" := (@EqPredFun _ _ _ A B) (at level 70, no associativity) : rel_scope.",
            "VernacNotation",
            "9bdb51be6fdf1fc80aff9c1f7be4cda3570a0a7e"
        ],
        [
            "Notation \"A ~1> B\" := (@SubPredFun _ _ _ A B) (at level 70, no associativity) : rel_scope.",
            "VernacNotation",
            "941072f7c93c43a1c0b268f04803a0ce4242ae65"
        ],
        [
            "Notation \"x \\In A\" := (InMem x (Mem A)) (at level 70, no associativity) : rel_scope.",
            "VernacNotation",
            "3b1a87d3d37332c9d83ac2ad1a09735e244cd70a"
        ],
        [
            "Notation \"x \\Notin A\" := (~ (x \\In A)) (at level 70, no associativity) : rel_scope.",
            "VernacNotation",
            "be9b5d44d1f31d099a24ed12fa0713c36620b310"
        ],
        [
            "Notation \"A =p B\" := (EqMem (Mem A) (Mem B)) (at level 70, no associativity) : type_scope.",
            "VernacNotation",
            "e80cd2713c3ee0572e01f769e638331ef2d9d108"
        ],
        [
            "Notation \"A <=p B\" := (SubMem (Mem A) (Mem B)) (at level 70, no associativity) : type_scope.",
            "VernacNotation",
            "c9d724ff3eb7bc145ac1607809f2d4ef92648a6e"
        ],
        [
            "Notation \"[ 'Mem' A ]\" := (Pred_of_Simpl (Pred_of_Mem_Pred (Mem A))) (at level 0, only parsing) : fun_scope.",
            "VernacNotation",
            "117d70a76c76defdef2fa32e496401cfbe9dd39c"
        ],
        [
            "Notation \"[ 'PredI' A & B ]\" := (PredI [Mem A] [Mem B]) (at level 0, format \"[ 'PredI' A & B ]\") : fun_scope.",
            "VernacNotation",
            "5ad852ebc83a07733d1e10253a7b728647b9181d"
        ],
        [
            "Notation \"[ 'PredU' A & B ]\" := (PredU [Mem A] [Mem B]) (at level 0, format \"[ 'PredU' A & B ]\") : fun_scope.",
            "VernacNotation",
            "c6d0416fe1f72f9009e6c40eebdcc2925e29a049"
        ],
        [
            "Notation \"[ 'PredD' A & B ]\" := (PredD [Mem A] [Mem B]) (at level 0, format \"[ 'PredD' A & B ]\") : fun_scope.",
            "VernacNotation",
            "a210d70a0b0d9c30cfc4bba8371a9d7c9963ca27"
        ],
        [
            "Notation \"[ 'PredC' A ]\" := (PredC [Mem A]) (at level 0, format \"[ 'PredC' A ]\") : fun_scope.",
            "VernacNotation",
            "8f9a87d68e89ca7994dd228b3992b826ade4c84a"
        ],
        [
            "Notation \"[ 'Preim' f 'of' A ]\" := (Preim f [Mem A]) (at level 0, format \"[ 'Preim' f 'of' A ]\") : fun_scope.",
            "VernacNotation",
            "5973165b480bd12022d4d9773024c99a3ee9af3c"
        ],
        [
            "Notation \"[ 'Pred' x \\In A ]\" := [Pred x | x \\In A] (at level 0, x ident, format \"[ 'Pred' x \\In A ]\") : fun_scope.",
            "VernacNotation",
            "f05ec76304613906979fe5c548534cb39f4ac9e6"
        ],
        [
            "Notation \"[ 'Pred' x \\In A | E ]\" := [Pred x | (x \\In A) /\\ E] (at level 0, x ident, format \"[ 'Pred' x \\In A | E ]\") : fun_scope.",
            "VernacNotation",
            "830ebd729fa7d27d61e5de0c0c64635184e4baf5"
        ],
        [
            "Notation \"[ 'Pred' x y \\In A & B | E ]\" := [Pred x y | (x \\In A) /\\ (y \\In B) /\\ E] (at level 0, x ident, y ident, format \"[ 'Pred' x y \\In A & B | E ]\") : fun_scope.",
            "VernacNotation",
            "8013e239826d27c8f568a4c8049bf79b5fb697bb"
        ],
        [
            "Notation \"[ 'Pred' x y \\In A & B ]\" := [Pred x y | (x \\In A) /\\ (y \\In B)] (at level 0, x ident, y ident, format \"[ 'Pred' x y \\In A & B ]\") : fun_scope.",
            "VernacNotation",
            "fff42714a62706263677614295f26a8057f92d42"
        ],
        [
            "Notation \"[ 'Pred' x y \\In A | E ]\" := [Pred x y \\In A & A | E] (at level 0, x ident, y ident, format \"[ 'Pred' x y \\In A | E ]\") : fun_scope.",
            "VernacNotation",
            "57ebc5736833ca8609522884b8c091bbb4e26ed7"
        ],
        [
            "Notation \"[ 'Pred' x y \\In A ]\" := [Pred x y \\In A & A] (at level 0, x ident, y ident, format \"[ 'Pred' x y \\In A ]\") : fun_scope.",
            "VernacNotation",
            "d64fccaef99c931243a462ab2d726f7f526dc46e"
        ],
        [
            "Section Simplifications.",
            "VernacBeginSection",
            "7e4ff33d82a7a03f3a1eca328e5ed692fc1e9071"
        ],
        [
            "Variables (T : Type) (pT : PredType T).",
            "VernacAssumption",
            "5234d7196700fbfe79d2dc165599df3a4967e7da"
        ],
        [
            "Lemma Mem_toPred : forall (p : pT), Mem (toPred p) = Mem p.",
            "VernacStartTheoremProof",
            "89694aaf819f278b44ffeb2708904aa65cd0ac11"
        ],
        [
            "by rewrite /Mem; case: pT => T1 app1 [mem1 /= ->].",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma toPredE x (p : pT) : toPred p x = (x \\In p).",
            "VernacStartTheoremProof",
            "a48541de44f7079adfdd67a383b6c6624489df11"
        ],
        [
            "by rewrite -Mem_toPred.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma In_Simpl x (p : Simpl_Pred T) : (x \\In p) = p x.",
            "VernacStartTheoremProof",
            "b75ff55c1f6a33b8ad55189bf53e67eb96619a00"
        ],
        [
            "by [].",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma Simpl_PredE (p : Pred T) : p <~> [Pred x | p x].",
            "VernacStartTheoremProof",
            "d43920273f761ace6a6a3fe229951f0c127427d4"
        ],
        [
            "by [].",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma Mem_Simpl (p : Simpl_Pred T) : Mem p = p :> Pred T.",
            "VernacStartTheoremProof",
            "44d1989160ca3117259b6e511e4ca605d92d7940"
        ],
        [
            "by [].",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Definition MemE := Mem_Simpl.",
            "VernacDefinition",
            "d358c52a8db9bf1c60629f8a1a1a743a99470c78"
        ],
        [
            "Lemma Mem_Mem (p : pT) : (Mem (Mem p) = Mem p) * (Mem [Mem p] = Mem p).",
            "VernacStartTheoremProof",
            "4c5981d0c64e7e1590293b225be6a037bf3cfebe"
        ],
        [
            "by rewrite -Mem_toPred.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "End Simplifications.",
            "VernacEndSegment",
            "ca98133b1d2f6afe950a51a72c1871f3dd324624"
        ],
        [
            "Section RelProperties.",
            "VernacBeginSection",
            "3372a1d9846dd741738c0fc966de431e1d06fe29"
        ],
        [
            "Variables (T : Type) (pT : PredType T).",
            "VernacAssumption",
            "5234d7196700fbfe79d2dc165599df3a4967e7da"
        ],
        [
            "Lemma EqPredType_refl (r : pT) : EqPredType r r.",
            "VernacStartTheoremProof",
            "9cf59838b5f834bad4e4c6ac592d99a8d34ecbaa"
        ],
        [
            "by [].",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma SubPredType_refl (r : pT) : SubPredType r r.",
            "VernacStartTheoremProof",
            "5108b98319386152e57405dbb76ecc4cc4a2f6e1"
        ],
        [
            "by [].",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma EqPredType_sym (r1 r2 : pT) : EqPredType r1 r2 -> EqPredType r2 r1.",
            "VernacStartTheoremProof",
            "0417dcd391d37065dc4ebb329a8271e1eb297026"
        ],
        [
            "by move=>H1 x; split; move/H1.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma EqPredType_trans' (r1 r2 r3 : pT) : EqPredType r1 r2 -> EqPredType r2 r3 -> EqPredType r1 r3.",
            "VernacStartTheoremProof",
            "8b4f31240c94dd4a66826957b978b9920feae149"
        ],
        [
            "by move=>H1 H2 x; split; [move/H1; move/H2 | move/H2; move/H1].",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma SubPredType_trans' (r1 r2 r3 : pT) : SubPredType r1 r2 -> SubPredType r2 r3 -> SubPredType r1 r3.",
            "VernacStartTheoremProof",
            "09b2b6ffca98aca51d138f8893cd1c9205bf2053"
        ],
        [
            "by move=>H1 H2 x; move/H1; move/H2.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Definition EqPredType_trans r2 r1 r3 := @EqPredType_trans' r1 r2 r3.",
            "VernacDefinition",
            "eefda529bf3ca92b7ea3d1aeea1beed17646da7c"
        ],
        [
            "Definition SubPredType_trans r2 r1 r3 := @SubPredType_trans' r1 r2 r3.",
            "VernacDefinition",
            "d8b97d6059008ce2387b09180eba0d0c6ccf57f8"
        ],
        [
            "End RelProperties.",
            "VernacEndSegment",
            "56fff093139a2eed8a219ce3ee4af4aeb166662c"
        ],
        [
            "Hint Resolve EqPredType_refl SubPredType_refl : core.",
            "VernacHints",
            "168a5d7453e6e5c126d69ecdacd635d85d17010f"
        ],
        [
            "Add Parametric Relation T (pT : PredType T) : pT (@EqPredType _ pT) reflexivity proved by (@EqPredType_refl _ _) symmetry proved by (@EqPredType_sym _ _) transitivity proved by (@EqPredType_trans' _ _) as EqPredType_rel.",
            "VernacExtend",
            "1584a4d008777115f01448c78c30378a3eceaec1"
        ],
        [
            "Add Parametric Relation T : (Simpl_Pred T) (@EqSimplPred _) reflexivity proved by (@EqPredType_refl _ _) symmetry proved by (@EqPredType_sym _ _) transitivity proved by (@EqPredType_trans' _ _) as EqSimplPred_rel.",
            "VernacExtend",
            "448dc1149a56896e4596fd37c8700875258b0ee8"
        ],
        [
            "Add Parametric Relation T : (Simpl_Pred T) (@SubSimplPred _) reflexivity proved by (@SubPredType_refl _ _) transitivity proved by (@SubPredType_trans' _ _) as SubSimplPred_rel.",
            "VernacExtend",
            "6a69dd5005ec0c4a7a8210c326bff33a8ff17722"
        ],
        [
            "Add Parametric Relation T : (Mem_Pred T) (@EqMem T) reflexivity proved by (@EqPredType_refl _ _) symmetry proved by (@EqPredType_sym _ _) transitivity proved by (@EqPredType_trans' _ _) as EqMem_rel.",
            "VernacExtend",
            "e114e7b691355eca1fe963881a5d0bb978963f0b"
        ],
        [
            "Add Parametric Relation T : (Mem_Pred T) (@SubMem _) reflexivity proved by (@SubPredType_refl _ _) transitivity proved by (@SubPredType_trans' _ _) as SubMem_rel.",
            "VernacExtend",
            "1d180fa0f8915d78c9a95218dcf535edf456b076"
        ],
        [
            "Add Parametric Morphism T : (@Pred_of_Simpl T) with signature @EqSimplPred _ ==> @EqPredType T (PredPredType T) as Pred_of_Simpl_morph.",
            "VernacExtend",
            "672565af0f206a76b809152b5e88786dab5aa5ef"
        ],
        [
            "by [].",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Add Parametric Morphism T (pT : PredType T) : (@EqPredType T pT) with signature @EqPredType _ _ ==> @EqPredType _ _ ==> iff as EqPredType_morph.",
            "VernacExtend",
            "aeb781d19210939679260e7adb2a419f7d4a09b3"
        ],
        [
            "by move=>r1 s1 H1 r2 s2 H2; rewrite H1 H2.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Add Parametric Morphism T (pT : PredType T) : (@SubPredType T pT) with signature @EqPredType _ _ ==> @EqPredType _ _ ==> iff as SubPred_morph.",
            "VernacExtend",
            "525dd846499534a961223eefc2eba802f2570b42"
        ],
        [
            "by move=>r1 s1 H1 r2 s2 H2; split=>H x; move/H1; move/H; move/H2.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Add Parametric Morphism T : (@InMem T) with signature @eq _ ==> @EqMem _ ==> iff as InMem_morph.",
            "VernacExtend",
            "523fe2b4828b89f501cf0d3e7e1f1025e3bf38ea"
        ],
        [
            "by move=>x r s H; split; move/H.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Add Parametric Morphism T (pT : PredType T) : (@Mem T pT) with signature @EqPredType _ _ ==> @EqMem _ as Mem_morhp.",
            "VernacExtend",
            "ad1fd23a11b15ca44fb22a1b10ec4ff559490f66"
        ],
        [
            "by move=>x y H p; rewrite /EqPredType -!toPredE in H *; rewrite H.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Add Parametric Morphism T : (@PredU T) with signature @EqPredType _ _ ==> @EqPredType _ _ ==> @EqSimplPred _ as predU_morph.",
            "VernacExtend",
            "b0c1324cdcf22a117e72080e5b39f89f0538e432"
        ],
        [
            "move=>r1 s1 H1 r2 h2 H2 x; split; by case; [move/H1 | move/H2]=>/=; auto.",
            "VernacExtend",
            "7cb9869ff9f7f5ad5a9c06132ee8e3a05e7b93c8"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Add Parametric Morphism T : (@PredI T) with signature @EqPredType _ _ ==> @EqPredType _ _ ==> @EqPredType _ _ as predI_morph.",
            "VernacExtend",
            "51de5469fa4ef7a9527e568284cdb9f8d8212b82"
        ],
        [
            "move=>r1 s1 H1 r2 s2 H2 x; split; by case; move/H1=>T1; move/H2=>T2.",
            "VernacExtend",
            "7cb9869ff9f7f5ad5a9c06132ee8e3a05e7b93c8"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Add Parametric Morphism T : (@PredC T) with signature @EqPredType _ _ ==> @EqPredType _ _ as predC_morph.",
            "VernacExtend",
            "da51bf6f7820280b2c1f3869feeae35dba9117aa"
        ],
        [
            "by move=>r s H x; split=>H1; apply/H.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Section RelLaws.",
            "VernacBeginSection",
            "c8851cbc37e4a2e52c8d672ffa5c4f8436f4d58d"
        ],
        [
            "Variable (T : Type).",
            "VernacAssumption",
            "a15b17e37c4241158d544882375356c273dc93f2"
        ],
        [
            "Lemma orrI (r : Pred nat) : r +p r <~> r.",
            "VernacStartTheoremProof",
            "f92ddcc156d68ccd7405f11eab7f415cf75097ba"
        ],
        [
            "by move=>x; split; [case | left].",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma orrC (r1 r2 : Pred T) : r1 +p r2 <~> r2 +p r1.",
            "VernacStartTheoremProof",
            "6443da69f47f9739fd5fc2a5fa16af05e8b6a27e"
        ],
        [
            "move=>x; split=>/=; tauto.",
            "VernacExtend",
            "8916c30c5830e76e035b89b55a61d8354f6a63ec"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma orr0 (r : Pred T) : r +p Pred0 <~> r.",
            "VernacStartTheoremProof",
            "f56515b9317edefea4c92ea4d1891b2bc2ed6130"
        ],
        [
            "by move=>x; split; [case | left].",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma or0r (r : Pred T) : Pred0 +p r <~> r.",
            "VernacStartTheoremProof",
            "d3a63f6b88e327ecf0b7e86da3fde06f99df86bc"
        ],
        [
            "by rewrite orrC orr0.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma orrCA (r1 r2 r3 : Pred T) : r1 +p r2 +p r3 <~> r2 +p r1 +p r3.",
            "VernacStartTheoremProof",
            "24a5c4e024f7dfb0765eee018e264f885ce595f0"
        ],
        [
            "by move=>x; split=>/=; intuition.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma orrAC (r1 r2 r3 : Pred T) : (r1 +p r2) +p r3 <~> (r1 +p r3) +p r2.",
            "VernacStartTheoremProof",
            "31cb36f5f4a29fa5462ac52dc57ba74cbea72b32"
        ],
        [
            "by move=>?; split=>/=; intuition.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma orrA (r1 r2 r3 : Pred T) : (r1 +p r2) +p r3 <~> r1 +p r2 +p r3.",
            "VernacStartTheoremProof",
            "e083f239b72707664ff93c8f860001fcd274a226"
        ],
        [
            "by rewrite (orrC r2) orrCA orrC.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma orrAb (r1 a : Pred T) : r1 <~> r1 +p a <-> a ~> r1.",
            "VernacStartTheoremProof",
            "1f332ec406ea579b32ea6c27a4a15d719fd5c34b"
        ],
        [
            "split; first by move=>-> x /=; auto.",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "move=>H x /=; split; first by auto.",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "by case=>//; move/H.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma sub_orl (r1 r2 : Pred T) : r1 ~> r1 +p r2.",
            "VernacStartTheoremProof",
            "197496727d59dd2ace6807bbb2614b2949ae96a8"
        ],
        [
            "by left.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma sub_orr (r1 r2 : Pred T) : r2 ~> r1 +p r2.",
            "VernacStartTheoremProof",
            "af4b72f6ecab3a71d213f786600037be0871b137"
        ],
        [
            "by right.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "End RelLaws.",
            "VernacEndSegment",
            "0f9c9513ab7c839b3e4093a89fe9f3007db1ae4a"
        ],
        [
            "Section SubMemLaws.",
            "VernacBeginSection",
            "b40d819794b6bac753054867353a5785d7b517f7"
        ],
        [
            "Variable T : Type.",
            "VernacAssumption",
            "a15b17e37c4241158d544882375356c273dc93f2"
        ],
        [
            "Lemma subp_refl (p : Pred T) : p <=p p.",
            "VernacStartTheoremProof",
            "f45459b49437f428697f674ba2fe77c9837ee1e8"
        ],
        [
            "by [].",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma subp_asym (p1 p2 : Pred T) : p1 <=p p2 -> p2 <=p p1 -> p1 =p p2.",
            "VernacStartTheoremProof",
            "3be781d57f6311d48effa4e1dd05c2ddb746defc"
        ],
        [
            "by move=>H1 H2 x; split; [move/H1 | move/H2].",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma subp_trans (p2 p1 p3 : Pred T) : p1 <=p p2 -> p2 <=p p3 -> p1 <=p p3.",
            "VernacStartTheoremProof",
            "b6a53e1276fe4e0e04dfe7ecbe2c3b57ec71c4c0"
        ],
        [
            "by move=>H1 H2 x; move/H1; move/H2.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma subp_or (p1 p2 q : Pred T) : p1 <=p q /\\ p2 <=p q <-> p1 +p p2 <=p q.",
            "VernacStartTheoremProof",
            "95cc559b646acc84ea3d902cf9230b011f6f76dc"
        ],
        [
            "split=>[[H1] H2 x|H1]; first by case; [move/H1 | move/H2].",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "by split=>x H2; apply: H1; [left | right].",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma subp_and (p1 p2 q : Pred T) : q <=p p1 /\\ q <=p p2 <-> q <=p p1 *p p2.",
            "VernacStartTheoremProof",
            "424ffe3acb3fd910aea176f5a1eb4912c779215a"
        ],
        [
            "split=>[[H1] H2 x|] H; last by split=>x; case/H.",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "by split; [apply: H1 | apply: H2].",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma subp_orl (p1 p2 q : Pred T) : p1 <=p p2 -> p1 +p q <=p p2 +p q.",
            "VernacStartTheoremProof",
            "097c610ad1f59482c97bf84b0721c0a80900b633"
        ],
        [
            "by move=>H x; case; [move/H; left|right].",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma subp_orr (p1 p2 q : Pred T) : p1 <=p p2 -> q +p p1 <=p q +p p2.",
            "VernacStartTheoremProof",
            "17285f16e52320fc6a311eb5611408e4b6ae0bea"
        ],
        [
            "by move=>H x; case; [left | move/H; right].",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma subp_andl (p1 p2 q : Pred T) : p1 <=p p2 -> p1 *p q <=p p2 *p q.",
            "VernacStartTheoremProof",
            "95b1a5e439f6884419cf8fefbf8c8b0074e00464"
        ],
        [
            "by by move=>H x [H1 H2]; split; [apply: H|].",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma subp_andr (p1 p2 q : Pred T) : p1 <=p p2 -> q *p p1 <=p q *p p2.",
            "VernacStartTheoremProof",
            "c37bb84abda8804530881130b47dcc9c92e6ee39"
        ],
        [
            "by move=>H x [H1 H2]; split; [|apply: H].",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "End SubMemLaws.",
            "VernacEndSegment",
            "b807899bc6c6d5d56b94d780dfcfb523d2ae61b2"
        ],
        [
            "Hint Resolve subp_refl : core.",
            "VernacHints",
            "2618525f8e1438bd117b1513eaa05d47065c5ed7"
        ],
        [
            "Section ListMembership.",
            "VernacBeginSection",
            "60ecc2ae629851c93751c8eed7857bdf15e34f9f"
        ],
        [
            "Variable T : Type.",
            "VernacAssumption",
            "a15b17e37c4241158d544882375356c273dc93f2"
        ],
        [
            "Fixpoint Mem_Seq (s : seq T) := if s is y::s' then (fun x => x = y \\/ Mem_Seq s' x) else xPred0.",
            "VernacFixpoint",
            "1b1365fefb4fdc4a49b323fb480c417c3af9ad45"
        ],
        [
            "Definition EqSeq_Class := seq T.",
            "VernacDefinition",
            "b8645091fb0e4e729a142efe0014e689fa5148c9"
        ],
        [
            "Identity Coercion seq_of_EqSeq : EqSeq_Class >-> seq.",
            "VernacIdentityCoercion",
            "0b863ad0320df3eae8264191401f312174bcd497"
        ],
        [
            "Coercion Pred_of_Eq_Seq (s : EqSeq_Class) : Pred_Class := [eta Mem_Seq s].",
            "VernacDefinition",
            "81a449244c2706d733ddcd4c7342e55b8b4bc07a"
        ],
        [
            "Canonical Structure seq_PredType := @mkPredType T (seq T) Pred_of_Eq_Seq.",
            "VernacDefinition",
            "e5c3f60ef119ea3cc638dc6500b7462f4d7f62f7"
        ],
        [
            "Canonical Structure Mem_Seq_PredType := mkPredType Mem_Seq.",
            "VernacDefinition",
            "2cc4ea1519f8da700f22386d5ddcbcc8fbe4c3c7"
        ],
        [
            "Lemma In_cons y s x : (x \\In y :: s) <-> (x = y) \\/ (x \\In s).",
            "VernacStartTheoremProof",
            "3bdf4f1fab550ff370d287e801c69cf9d0df96b1"
        ],
        [
            "by [].",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma In_nil x : (x \\In [::]) <-> False.",
            "VernacStartTheoremProof",
            "b9bfb0420edfaf773a3a9e5d4ad4d485c4d74511"
        ],
        [
            "by [].",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma Mem_Seq1 x y : (x \\In [:: y]) <-> (x = y).",
            "VernacStartTheoremProof",
            "e30f5774ee5860469bee9a2561644b6bc8f63a23"
        ],
        [
            "by rewrite In_cons orpF.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Definition InE := (Mem_Seq1, In_cons, In_Simpl).",
            "VernacDefinition",
            "ff7cef8631eac1ec27ab61f64a7c26cec2922a25"
        ],
        [
            "Lemma Mem_cat x : forall s1 s2, (x \\In s1 ++ s2) <-> x \\In s1 \\/ x \\In s2.",
            "VernacStartTheoremProof",
            "b3cf89b4a08fd50d964336122a692ba8233da203"
        ],
        [
            "elim=>[|y s1 IH] s2 /=; first by split; [right | case].",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "rewrite !InE /=.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "split.",
            "VernacExtend",
            "55abc140132bd88981001ac656020469a8d503eb"
        ],
        [
            "-",
            "VernacBullet",
            "581cab4bf49fa4b495e569bbda96fc8d28fddcc0"
        ],
        [
            "case=>[->|/IH]; first by left; left.",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "by case; [left; right | right].",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "case; first by case; [left | move=>H; right; apply/IH; left].",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "by move=>H; right; apply/IH; right.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma In_split x s : x \\In s -> exists s1 s2, s = s1 ++ x :: s2.",
            "VernacStartTheoremProof",
            "649f7c523afef2dfc29da60362649a2070fddc59"
        ],
        [
            "elim:s=>[|y s IH] //=; rewrite InE.",
            "VernacExtend",
            "de65c8193056a36f6dbb91fe21357bd770b140db"
        ],
        [
            "case=>[<-|]; first by exists [::], s.",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "by case/IH=>s1 [s2 ->]; exists (y :: s1), s2.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "End ListMembership.",
            "VernacEndSegment",
            "100d6e07082f82d6609f7d5b3a9f7c7da0853cae"
        ],
        [
            "Lemma Mem_map T T' (f : T -> T') x (s : seq T) : x \\In s -> f x \\In (map f s).",
            "VernacStartTheoremProof",
            "06968932a4599f39ce22d54b1dc887cb95cc2ebb"
        ],
        [
            "elim: s=>[|y s IH] //; rewrite InE /=.",
            "VernacExtend",
            "de65c8193056a36f6dbb91fe21357bd770b140db"
        ],
        [
            "by case=>[<-|/IH]; [left | right].",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma Mem_map_inv T T' (f : T -> T') x (s : seq T) : x \\In (map f s) -> exists y, x = f y /\\ y \\In s.",
            "VernacStartTheoremProof",
            "2f85d7af7313e34277777a99ec43a89b4ab75b25"
        ],
        [
            "elim: s=>[|y s IH] //=; rewrite InE /=.",
            "VernacExtend",
            "de65c8193056a36f6dbb91fe21357bd770b140db"
        ],
        [
            "case; first by move=>->; exists y; split=>//; left.",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "by case/IH=>z [->]; exists z; split=>//; right.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Prenex Implicits Mem_map_inv.",
            "VernacExtend",
            "5628573b01a64ce4127ef5f1623ea39d42dfe8f6"
        ],
        [
            "Lemma eqfun_refl A B (f : A -> B) : f =1 f.",
            "VernacStartTheoremProof",
            "918b2b6a1ac2474e7e08293780d6aa094214294a"
        ],
        [
            "by [].",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma eqfun_sym A B (f1 f2 : A -> B) : f1 =1 f2 -> f2 =1 f1.",
            "VernacStartTheoremProof",
            "dd4e31d2ae5e1a3c91f312ab9d3e79f3350f7539"
        ],
        [
            "by move=>H x; rewrite H.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma eqfun_trans A B (f1 f2 f3 : A -> B) : f1 =1 f2 -> f2 =1 f3 -> f1 =1 f3.",
            "VernacStartTheoremProof",
            "00604c55c3af08caeb01e176a85be5b3c05c9328"
        ],
        [
            "by move=>H1 H2 x; rewrite H1 H2.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Add Parametric Relation A B : (A -> B) (@eqfun _ _) reflexivity proved by (@eqfun_refl A B) symmetry proved by (@eqfun_sym A B) transitivity proved by (@eqfun_trans A B) as eqfun_morph.",
            "VernacExtend",
            "3c2a442fcbf065c610c936eb69cfa92fc6998325"
        ],
        [
            "Section Image.",
            "VernacBeginSection",
            "b2d4a85d0530585f40e48306f07be6fb0b63b45a"
        ],
        [
            "Variables (A B : Type) (P : Pred A) (f : A -> B).",
            "VernacAssumption",
            "30e518e85c92ca02329f567c0489779f0e92da76"
        ],
        [
            "Inductive image_spec b : Prop := Im_mem a of b = f a & a \\In P.",
            "VernacInductive",
            "42ca8935d82424721644a2c4dd1e2123e53141c0"
        ],
        [
            "Definition Image' : Pred B := image_spec.",
            "VernacDefinition",
            "fb106b5ec34344b25cc442387a8fe982bf61c1a0"
        ],
        [
            "End Image.",
            "VernacEndSegment",
            "b3c4c5183dc74a8fbdb4487f7d6a42f64df09104"
        ],
        [
            "Notation Image f P := (Image' P f).",
            "VernacSyntacticDefinition",
            "95e75bc6c840b74e9db0fec66f664bdc7d8ddf99"
        ],
        [
            "Notation \"[ 'Image' E | i <- s ]\" := (Image (fun i => E) s) (at level 0, E at level 99, i ident, format \"[ '[hv' 'Image' E '/ ' | i <- s ] ']'\") : rel_scope.",
            "VernacNotation",
            "127fc3c0d3f199b926c9d719a75f7b1ece69410b"
        ],
        [
            "Notation \"[ 'Image' E | i <- s & C ]\" := [Image E | i <- [PredI s & C]] (at level 0, E at level 99, i ident, format \"[ '[hv' 'Image' E '/ ' | i <- s '/ ' & C ] ']'\") : rel_scope.",
            "VernacNotation",
            "24f9572e4969d54ad973793ba73d8407ef7e9826"
        ],
        [
            "Notation \"[ 'Image' E | i : T <- s ]\" := (Image (fun i : T => E) s) (at level 0, E at level 99, i ident, only parsing) : rel_scope.",
            "VernacNotation",
            "350b28171b166207bd625cbf0f98ba39e3236b39"
        ],
        [
            "Notation \"[ 'Image' E | i : T <- s & C ]\" := [Image E | i : T <- [PredI s & C]] (at level 0, E at level 99, i ident, only parsing) : rel_scope.",
            "VernacNotation",
            "38a1885fa1ea794aaa81131473fbf2ad79fbe97c"
        ],
        [
            "Lemma Image_mem A B (f : A -> B) (P : Pred A) x : x \\In P -> f x \\In Image f P.",
            "VernacStartTheoremProof",
            "2d72cb0ec68c7691fd60ef0867e4e15e7f0e9442"
        ],
        [
            "by apply: Im_mem.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma Image_inj_sub A B (f : A -> B) (X1 X2 : Pred A) : injective f -> Image f X1 <=p Image f X2 -> X1 <=p X2.",
            "VernacStartTheoremProof",
            "d9ce9bad27f78af1704f7daac2097ee6812af363"
        ],
        [
            "by move=>H E x /(Image_mem f) /E [y] /H ->.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma Image_inj_eqmem A B (f : A -> B) (X1 X2 : Pred A) : injective f -> Image f X1 =p Image f X2 -> X1 =p X2.",
            "VernacStartTheoremProof",
            "46d4af890655c2b8f4fa052a3e2381a54d70980a"
        ],
        [
            "by move=>H E; split; apply: Image_inj_sub H _ _; rewrite E.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma ImageU A B (f : A -> B) (X1 X2 : Pred A) : Image f (PredU X1 X2) =p [PredU Image f X1 & Image f X2].",
            "VernacStartTheoremProof",
            "423f19c878e76c9dc02e4e9692f4e0ac58a25da7"
        ],
        [
            "move=>x; split.",
            "VernacExtend",
            "22de1c5faad21de60fd48f882c8175e01347018a"
        ],
        [
            "-",
            "VernacBullet",
            "581cab4bf49fa4b495e569bbda96fc8d28fddcc0"
        ],
        [
            "by case=>y -> [H|H]; [left | right]; apply: Image_mem.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "by case; case=>y -> H; apply: Image_mem; [left | right].",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma ImageIm A B C (f1 : B -> C) (f2 : A -> B) (X : Pred A) : Image f1 (Image f2 X) =p Image (f1 \\o f2) X.",
            "VernacStartTheoremProof",
            "b52819d4a5b608f569f4da8b1935829ebb557b00"
        ],
        [
            "move=>x; split; first by case=>_ -> [x' ->] H; exists x'.",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "by case=>a -> H; exists (f2 a)=>//; exists a.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma ImageEq A B (f1 f2 : A -> B) (X : Pred A) : f1 =1 f2 -> Image f1 X =p Image f2 X.",
            "VernacStartTheoremProof",
            "c8de115919e1e7397c6ca686ddfbe41c61431df0"
        ],
        [
            "by move=>H x; split; case=>a ->; exists a.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ]
    ],
    "proofs": [
        {
            "name": "andTp",
            "line_nb": 6,
            "steps": [
                {
                    "command": [
                        "by intuition.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "andpT",
            "line_nb": 9,
            "steps": [
                {
                    "command": [
                        "by intuition.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "andFp",
            "line_nb": 12,
            "steps": [
                {
                    "command": [
                        "by intuition.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "andpF",
            "line_nb": 15,
            "steps": [
                {
                    "command": [
                        "by intuition.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "orTp",
            "line_nb": 18,
            "steps": [
                {
                    "command": [
                        "by intuition.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "orpT",
            "line_nb": 21,
            "steps": [
                {
                    "command": [
                        "by intuition.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "orFp",
            "line_nb": 24,
            "steps": [
                {
                    "command": [
                        "by intuition.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "orpF",
            "line_nb": 27,
            "steps": [
                {
                    "command": [
                        "by intuition.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "Mem_toPred",
            "line_nb": 117,
            "steps": [
                {
                    "command": [
                        "by rewrite /Mem; case: pT => T1 app1 [mem1 /= ->].",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "toPredE",
            "line_nb": 120,
            "steps": [
                {
                    "command": [
                        "by rewrite -Mem_toPred.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "In_Simpl",
            "line_nb": 123,
            "steps": [
                {
                    "command": [
                        "by [].",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "Simpl_PredE",
            "line_nb": 126,
            "steps": [
                {
                    "command": [
                        "by [].",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "Mem_Simpl",
            "line_nb": 129,
            "steps": [
                {
                    "command": [
                        "by [].",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "Mem_Mem",
            "line_nb": 133,
            "steps": [
                {
                    "command": [
                        "by rewrite -Mem_toPred.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "EqPredType_refl",
            "line_nb": 139,
            "steps": [
                {
                    "command": [
                        "by [].",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "SubPredType_refl",
            "line_nb": 142,
            "steps": [
                {
                    "command": [
                        "by [].",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "EqPredType_sym",
            "line_nb": 145,
            "steps": [
                {
                    "command": [
                        "by move=>H1 x; split; move/H1.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "EqPredType_trans'",
            "line_nb": 148,
            "steps": [
                {
                    "command": [
                        "by move=>H1 H2 x; split; [move/H1; move/H2 | move/H2; move/H1].",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "SubPredType_trans'",
            "line_nb": 151,
            "steps": [
                {
                    "command": [
                        "by move=>H1 H2 x; move/H1; move/H2.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "Pred_of_Simpl_morph_Proper",
            "line_nb": 163,
            "steps": [
                {
                    "command": [
                        "by [].",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "EqPredType_morph_Proper",
            "line_nb": 166,
            "steps": [
                {
                    "command": [
                        "by move=>r1 s1 H1 r2 s2 H2; rewrite H1 H2.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "SubPred_morph_Proper",
            "line_nb": 169,
            "steps": [
                {
                    "command": [
                        "by move=>r1 s1 H1 r2 s2 H2; split=>H x; move/H1; move/H; move/H2.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "InMem_morph_Proper",
            "line_nb": 172,
            "steps": [
                {
                    "command": [
                        "by move=>x r s H; split; move/H.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "Mem_morhp_Proper",
            "line_nb": 175,
            "steps": [
                {
                    "command": [
                        "by move=>x y H p; rewrite /EqPredType -!toPredE in H *; rewrite H.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "predU_morph_Proper",
            "line_nb": 178,
            "steps": [
                {
                    "command": [
                        "move=>r1 s1 H1 r2 h2 H2 x; split; by case; [move/H1 | move/H2]=>/=; auto.",
                        "VernacExtend",
                        "7cb9869ff9f7f5ad5a9c06132ee8e3a05e7b93c8"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "predI_morph_Proper",
            "line_nb": 181,
            "steps": [
                {
                    "command": [
                        "move=>r1 s1 H1 r2 s2 H2 x; split; by case; move/H1=>T1; move/H2=>T2.",
                        "VernacExtend",
                        "7cb9869ff9f7f5ad5a9c06132ee8e3a05e7b93c8"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "predC_morph_Proper",
            "line_nb": 184,
            "steps": [
                {
                    "command": [
                        "by move=>r s H x; split=>H1; apply/H.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "orrI",
            "line_nb": 189,
            "steps": [
                {
                    "command": [
                        "by move=>x; split; [case | left].",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "orrC",
            "line_nb": 192,
            "steps": [
                {
                    "command": [
                        "move=>x; split=>/=; tauto.",
                        "VernacExtend",
                        "8916c30c5830e76e035b89b55a61d8354f6a63ec"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "orr0",
            "line_nb": 195,
            "steps": [
                {
                    "command": [
                        "by move=>x; split; [case | left].",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "or0r",
            "line_nb": 198,
            "steps": [
                {
                    "command": [
                        "by rewrite orrC orr0.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "orrCA",
            "line_nb": 201,
            "steps": [
                {
                    "command": [
                        "by move=>x; split=>/=; intuition.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "orrAC",
            "line_nb": 204,
            "steps": [
                {
                    "command": [
                        "by move=>?; split=>/=; intuition.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "orrA",
            "line_nb": 207,
            "steps": [
                {
                    "command": [
                        "by rewrite (orrC r2) orrCA orrC.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "orrAb",
            "line_nb": 210,
            "steps": [
                {
                    "command": [
                        "split; first by move=>-> x /=; auto.",
                        "VernacExtend",
                        "3763a4b8db689af316a7372b722bb29806ab4fb6"
                    ]
                },
                {
                    "command": [
                        "move=>H x /=; split; first by auto.",
                        "VernacExtend",
                        "3763a4b8db689af316a7372b722bb29806ab4fb6"
                    ]
                },
                {
                    "command": [
                        "by case=>//; move/H.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "sub_orl",
            "line_nb": 215,
            "steps": [
                {
                    "command": [
                        "by left.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "sub_orr",
            "line_nb": 218,
            "steps": [
                {
                    "command": [
                        "by right.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "subp_refl",
            "line_nb": 224,
            "steps": [
                {
                    "command": [
                        "by [].",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "subp_asym",
            "line_nb": 227,
            "steps": [
                {
                    "command": [
                        "by move=>H1 H2 x; split; [move/H1 | move/H2].",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "subp_trans",
            "line_nb": 230,
            "steps": [
                {
                    "command": [
                        "by move=>H1 H2 x; move/H1; move/H2.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "subp_or",
            "line_nb": 233,
            "steps": [
                {
                    "command": [
                        "split=>[[H1] H2 x|H1]; first by case; [move/H1 | move/H2].",
                        "VernacExtend",
                        "3763a4b8db689af316a7372b722bb29806ab4fb6"
                    ]
                },
                {
                    "command": [
                        "by split=>x H2; apply: H1; [left | right].",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "subp_and",
            "line_nb": 237,
            "steps": [
                {
                    "command": [
                        "split=>[[H1] H2 x|] H; last by split=>x; case/H.",
                        "VernacExtend",
                        "3763a4b8db689af316a7372b722bb29806ab4fb6"
                    ]
                },
                {
                    "command": [
                        "by split; [apply: H1 | apply: H2].",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "subp_orl",
            "line_nb": 241,
            "steps": [
                {
                    "command": [
                        "by move=>H x; case; [move/H; left|right].",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "subp_orr",
            "line_nb": 244,
            "steps": [
                {
                    "command": [
                        "by move=>H x; case; [left | move/H; right].",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "subp_andl",
            "line_nb": 247,
            "steps": [
                {
                    "command": [
                        "by by move=>H x [H1 H2]; split; [apply: H|].",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "subp_andr",
            "line_nb": 250,
            "steps": [
                {
                    "command": [
                        "by move=>H x [H1 H2]; split; [|apply: H].",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "In_cons",
            "line_nb": 263,
            "steps": [
                {
                    "command": [
                        "by [].",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "In_nil",
            "line_nb": 266,
            "steps": [
                {
                    "command": [
                        "by [].",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "Mem_Seq1",
            "line_nb": 269,
            "steps": [
                {
                    "command": [
                        "by rewrite In_cons orpF.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "Mem_cat",
            "line_nb": 273,
            "steps": [
                {
                    "command": [
                        "elim=>[|y s1 IH] s2 /=; first by split; [right | case].",
                        "VernacExtend",
                        "3763a4b8db689af316a7372b722bb29806ab4fb6"
                    ]
                },
                {
                    "command": [
                        "rewrite !InE /=.",
                        "VernacExtend",
                        "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
                    ]
                },
                {
                    "command": [
                        "split.",
                        "VernacExtend",
                        "55abc140132bd88981001ac656020469a8d503eb"
                    ]
                },
                {
                    "command": [
                        "-",
                        "VernacBullet",
                        "581cab4bf49fa4b495e569bbda96fc8d28fddcc0"
                    ]
                },
                {
                    "command": [
                        "case=>[->|/IH]; first by left; left.",
                        "VernacExtend",
                        "3763a4b8db689af316a7372b722bb29806ab4fb6"
                    ]
                },
                {
                    "command": [
                        "by case; [left; right | right].",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "case; first by case; [left | move=>H; right; apply/IH; left].",
                        "VernacExtend",
                        "3763a4b8db689af316a7372b722bb29806ab4fb6"
                    ]
                },
                {
                    "command": [
                        "by move=>H; right; apply/IH; right.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "In_split",
            "line_nb": 283,
            "steps": [
                {
                    "command": [
                        "elim:s=>[|y s IH] //=; rewrite InE.",
                        "VernacExtend",
                        "de65c8193056a36f6dbb91fe21357bd770b140db"
                    ]
                },
                {
                    "command": [
                        "case=>[<-|]; first by exists [::], s.",
                        "VernacExtend",
                        "3763a4b8db689af316a7372b722bb29806ab4fb6"
                    ]
                },
                {
                    "command": [
                        "by case/IH=>s1 [s2 ->]; exists (y :: s1), s2.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "Mem_map",
            "line_nb": 289,
            "steps": [
                {
                    "command": [
                        "elim: s=>[|y s IH] //; rewrite InE /=.",
                        "VernacExtend",
                        "de65c8193056a36f6dbb91fe21357bd770b140db"
                    ]
                },
                {
                    "command": [
                        "by case=>[<-|/IH]; [left | right].",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "Mem_map_inv",
            "line_nb": 293,
            "steps": [
                {
                    "command": [
                        "elim: s=>[|y s IH] //=; rewrite InE /=.",
                        "VernacExtend",
                        "de65c8193056a36f6dbb91fe21357bd770b140db"
                    ]
                },
                {
                    "command": [
                        "case; first by move=>->; exists y; split=>//; left.",
                        "VernacExtend",
                        "3763a4b8db689af316a7372b722bb29806ab4fb6"
                    ]
                },
                {
                    "command": [
                        "by case/IH=>z [->]; exists z; split=>//; right.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "eqfun_refl",
            "line_nb": 299,
            "steps": [
                {
                    "command": [
                        "by [].",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "eqfun_sym",
            "line_nb": 302,
            "steps": [
                {
                    "command": [
                        "by move=>H x; rewrite H.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "eqfun_trans",
            "line_nb": 305,
            "steps": [
                {
                    "command": [
                        "by move=>H1 H2 x; rewrite H1 H2.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "Image_mem",
            "line_nb": 319,
            "steps": [
                {
                    "command": [
                        "by apply: Im_mem.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "Image_inj_sub",
            "line_nb": 322,
            "steps": [
                {
                    "command": [
                        "by move=>H E x /(Image_mem f) /E [y] /H ->.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "Image_inj_eqmem",
            "line_nb": 325,
            "steps": [
                {
                    "command": [
                        "by move=>H E; split; apply: Image_inj_sub H _ _; rewrite E.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "ImageU",
            "line_nb": 328,
            "steps": [
                {
                    "command": [
                        "move=>x; split.",
                        "VernacExtend",
                        "22de1c5faad21de60fd48f882c8175e01347018a"
                    ]
                },
                {
                    "command": [
                        "-",
                        "VernacBullet",
                        "581cab4bf49fa4b495e569bbda96fc8d28fddcc0"
                    ]
                },
                {
                    "command": [
                        "by case=>y -> [H|H]; [left | right]; apply: Image_mem.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "by case; case=>y -> H; apply: Image_mem; [left | right].",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "ImageIm",
            "line_nb": 334,
            "steps": [
                {
                    "command": [
                        "move=>x; split; first by case=>_ -> [x' ->] H; exists x'.",
                        "VernacExtend",
                        "3763a4b8db689af316a7372b722bb29806ab4fb6"
                    ]
                },
                {
                    "command": [
                        "by case=>a -> H; exists (f2 a)=>//; exists a.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "ImageEq",
            "line_nb": 338,
            "steps": [
                {
                    "command": [
                        "by move=>H x; split; case=>a ->; exists a.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        }
    ]
}