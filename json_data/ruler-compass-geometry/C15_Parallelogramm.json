{
    "filename": "C15_Parallelogramm.v",
    "coq_project": "ruler-compass-geometry",
    "vernac_cmds": [
        [
            "Require Export C14_Angle_Droit.",
            "VernacRequire",
            "25fcf0575ddda6cc9d808c001677b68f5b69e842"
        ],
        [
            "Section PARALLELOGRAMM.",
            "VernacBeginSection",
            "41f4c80737c22733d56a0cd2ab60baeb8e30a98b"
        ],
        [
            "Definition Parallelogramm := fun A B C D : Point => Clockwise A B C /\\ Clockwise A C D /\\ Distance A B = Distance C D /\\ Distance A D = Distance B C.",
            "VernacDefinition",
            "6d3f747d26d0b7f53818dc2fe8b5d0024d16a14e"
        ],
        [
            "Lemma ParallelogrammCongruentTrianglesAC : forall A B C D : Point, Parallelogramm A B C D -> CongruentStrictTriangles A B C C D A.",
            "VernacStartTheoremProof",
            "2e2346c715e847fe69bc17b1301b511d6e113cfc"
        ],
        [
            "intros A B C D (H1, (H2, (H3, H4))); repeat split; try autoDistance.",
            "VernacExtend",
            "d859e44f11de6946f2ccad35ce87642493805b68"
        ],
        [
            "elim (ClockwiseNotCollinear _ _ _ H1 H).",
            "VernacExtend",
            "b9954264781f17e56601eba6df3c5c9e0ecf9ac4"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma ParallelogrammCongruentTrianglesBD : forall A B C D : Point, Parallelogramm A B C D -> CongruentTriangles D A B B C D.",
            "VernacStartTheoremProof",
            "151d22a3efe862bdb6dd751436f41b77a357d371"
        ],
        [
            "intros A B C D (H1, (H2, (H3, H4))); repeat split; try autoDistance.",
            "VernacExtend",
            "d859e44f11de6946f2ccad35ce87642493805b68"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Definition ParallelogrammCenter (A B C D : Point) (_ : Parallelogramm A B C D) := fun I : Point => Between A I C /\\ Distance I A = Distance I C.",
            "VernacDefinition",
            "d9421dbf135a61cb387b29278dfb5d911061427b"
        ],
        [
            "Lemma ExistsParallelogrammCenter : forall A B C D : Point, forall H : Parallelogramm A B C D, {I : Point | ParallelogrammCenter A B C D H I}.",
            "VernacStartTheoremProof",
            "544e56cda5d930602293b938493520e9a7df1245"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "assert (Hac : A <> C).",
            "VernacExtend",
            "ae3c05947b352c4da73470c1d96d0c7b456509e6"
        ],
        [
            "unfold Parallelogramm in H; decompose [and] H; autoDistinct.",
            "VernacExtend",
            "d24ed7a2b37f52060fbfdacbb83a694f9a0dedf8"
        ],
        [
            "exists (MidPoint A C Hac); split.",
            "VernacExtend",
            "0ba8ab12a74f528eef9a6a9774be8899c4d656d6"
        ],
        [
            "apply MidPointBetween.",
            "VernacExtend",
            "52e8ae618a928fa72ca919513b6ee0243cd16a8e"
        ],
        [
            "unfold MidPoint in |- *.",
            "VernacExtend",
            "8cc3179f4017a80234e116420851ccf88f8b13ab"
        ],
        [
            "destruct (ExistsMiddle A C Hac) as (I, (H1, H2)).",
            "VernacExtend",
            "70d3f53d57422f21b4813a419647f9b1ca2ce511"
        ],
        [
            "trivial.",
            "VernacExtend",
            "6704630005ea37c1f66f817f0d3cb83967ca08c5"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma ParallelogrammDistinctAB : forall A B C D : Point, Parallelogramm A B C D -> A <> B.",
            "VernacStartTheoremProof",
            "84013953de9534e00c5762c27ed4258f32636076"
        ],
        [
            "unfold Parallelogramm in |- *; intuition.",
            "VernacExtend",
            "0a129ff046987c3a39e4f2474a119098ad1f2d81"
        ],
        [
            "apply (ClockwiseDistinctAB _ _ _ H1 H0).",
            "VernacExtend",
            "23ec85d1cc88e40727f2829e635eb50e2bf39f3c"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma ParallelogrammDistinctAC : forall A B C D : Point, Parallelogramm A B C D -> A <> C.",
            "VernacStartTheoremProof",
            "4bd00e25adde1484e42ed92a5964cc4ef7a68010"
        ],
        [
            "unfold Parallelogramm in |- *; intuition.",
            "VernacExtend",
            "0a129ff046987c3a39e4f2474a119098ad1f2d81"
        ],
        [
            "apply (ClockwiseDistinctAB _ _ _ H H0).",
            "VernacExtend",
            "cfb5af091ab5b748cedd4ee224e17e15922a44a1"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma ParallelogrammDistinctCD : forall A B C D : Point, Parallelogramm A B C D -> C <> D.",
            "VernacStartTheoremProof",
            "851701f222949536a3cd1dc600dcda144050da76"
        ],
        [
            "unfold Parallelogramm in |- *; intuition.",
            "VernacExtend",
            "0a129ff046987c3a39e4f2474a119098ad1f2d81"
        ],
        [
            "apply (ClockwiseDistinctBC _ _ _ H H0).",
            "VernacExtend",
            "3ddbd42bc0660cf5eabb3832587705631aa28bd6"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "End PARALLELOGRAMM.",
            "VernacEndSegment",
            "69038f2761591822cb9a034994ecb35d694942b5"
        ]
    ],
    "proofs": [
        {
            "name": "ParallelogrammCongruentTrianglesAC",
            "line_nb": 3,
            "steps": [
                {
                    "command": [
                        "intros A B C D (H1, (H2, (H3, H4))); repeat split; try autoDistance.",
                        "VernacExtend",
                        "d859e44f11de6946f2ccad35ce87642493805b68"
                    ]
                },
                {
                    "command": [
                        "elim (ClockwiseNotCollinear _ _ _ H1 H).",
                        "VernacExtend",
                        "b9954264781f17e56601eba6df3c5c9e0ecf9ac4"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "ParallelogrammCongruentTrianglesBD",
            "line_nb": 7,
            "steps": [
                {
                    "command": [
                        "intros A B C D (H1, (H2, (H3, H4))); repeat split; try autoDistance.",
                        "VernacExtend",
                        "d859e44f11de6946f2ccad35ce87642493805b68"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "ExistsParallelogrammCenter",
            "line_nb": 11,
            "steps": [
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "assert (Hac : A <> C).",
                        "VernacExtend",
                        "ae3c05947b352c4da73470c1d96d0c7b456509e6"
                    ]
                },
                {
                    "command": [
                        "unfold Parallelogramm in H; decompose [and] H; autoDistinct.",
                        "VernacExtend",
                        "d24ed7a2b37f52060fbfdacbb83a694f9a0dedf8"
                    ]
                },
                {
                    "command": [
                        "exists (MidPoint A C Hac); split.",
                        "VernacExtend",
                        "0ba8ab12a74f528eef9a6a9774be8899c4d656d6"
                    ]
                },
                {
                    "command": [
                        "apply MidPointBetween.",
                        "VernacExtend",
                        "52e8ae618a928fa72ca919513b6ee0243cd16a8e"
                    ]
                },
                {
                    "command": [
                        "unfold MidPoint in |- *.",
                        "VernacExtend",
                        "8cc3179f4017a80234e116420851ccf88f8b13ab"
                    ]
                },
                {
                    "command": [
                        "destruct (ExistsMiddle A C Hac) as (I, (H1, H2)).",
                        "VernacExtend",
                        "70d3f53d57422f21b4813a419647f9b1ca2ce511"
                    ]
                },
                {
                    "command": [
                        "trivial.",
                        "VernacExtend",
                        "6704630005ea37c1f66f817f0d3cb83967ca08c5"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "ParallelogrammDistinctAB",
            "line_nb": 21,
            "steps": [
                {
                    "command": [
                        "unfold Parallelogramm in |- *; intuition.",
                        "VernacExtend",
                        "0a129ff046987c3a39e4f2474a119098ad1f2d81"
                    ]
                },
                {
                    "command": [
                        "apply (ClockwiseDistinctAB _ _ _ H1 H0).",
                        "VernacExtend",
                        "23ec85d1cc88e40727f2829e635eb50e2bf39f3c"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "ParallelogrammDistinctAC",
            "line_nb": 25,
            "steps": [
                {
                    "command": [
                        "unfold Parallelogramm in |- *; intuition.",
                        "VernacExtend",
                        "0a129ff046987c3a39e4f2474a119098ad1f2d81"
                    ]
                },
                {
                    "command": [
                        "apply (ClockwiseDistinctAB _ _ _ H H0).",
                        "VernacExtend",
                        "cfb5af091ab5b748cedd4ee224e17e15922a44a1"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "ParallelogrammDistinctCD",
            "line_nb": 29,
            "steps": [
                {
                    "command": [
                        "unfold Parallelogramm in |- *; intuition.",
                        "VernacExtend",
                        "0a129ff046987c3a39e4f2474a119098ad1f2d81"
                    ]
                },
                {
                    "command": [
                        "apply (ClockwiseDistinctBC _ _ _ H H0).",
                        "VernacExtend",
                        "3ddbd42bc0660cf5eabb3832587705631aa28bd6"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        }
    ]
}