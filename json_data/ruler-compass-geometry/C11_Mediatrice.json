{
    "filename": "C11_Mediatrice.v",
    "coq_project": "ruler-compass-geometry",
    "vernac_cmds": [
        [
            "Require Export C10_Milieu.",
            "VernacRequire",
            "e590fb8bad25f8a52f2c5308444c11ed3d8c3a83"
        ],
        [
            "Section MIDLINE.",
            "VernacBeginSection",
            "35663adb9236163cd979f39258095a3a31f57af3"
        ],
        [
            "Definition MidLineDef (A B : Point) : Figure := fun M : Point => Distance M A = Distance M B.",
            "VernacDefinition",
            "29d4d3a64fa43ff61aede98feda1ca8197a94cfb"
        ],
        [
            "Lemma CollinearMidLine : forall A B C D M : Point, A <> B -> Distance C A = Distance C B -> Clockwise A B C -> Distance D A = Distance D B -> Clockwise B A D -> Collinear C D M -> Distance M A = Distance M B.",
            "VernacStartTheoremProof",
            "406f30f52043e5f5c88c003f5c58a76d71904e37"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "assert (H5 := ClockwiseClockwiseDistinct A B C D H1 H3).",
            "VernacExtend",
            "46958a51a828462ff25b9ff682ae71e1952f87ea"
        ],
        [
            "destruct (CollinearHalfLine C D M H4).",
            "VernacExtend",
            "6f1cd1dc7b1c5aaca2de2011f51ebcf2abb198ba"
        ],
        [
            "assert (H7 := HalfLineDistinct C D M H5 H6).",
            "VernacExtend",
            "2de6194a0afb00bcc6f80da3882b9fe346f03ec9"
        ],
        [
            "apply (CongruentSAS C M A C M B); try autoDistinct; try autoDistance.",
            "VernacExtend",
            "69a4b6a4c31587aa8b1c464567f47018901754fc"
        ],
        [
            "rewrite (CongruentItself C M A D A); try autoDistinct.",
            "VernacExtend",
            "46a14c256d029d4ef5fb6bc2bc9c589ad4ce3ca3"
        ],
        [
            "rewrite (CongruentItself C M B D B); try autoDistinct.",
            "VernacExtend",
            "497225557a40802c0004f6fe7960dbbf99136d84"
        ],
        [
            "apply CongruentSSS; try autoDistinct; try autoDistance.",
            "VernacExtend",
            "9b3ec3cd564296bfd69d6eb03f421bfd02e8287f"
        ],
        [
            "apply HalfLineSym; auto.",
            "VernacExtend",
            "a9f2fa640518621c5f0ea456fb944837c6ed0712"
        ],
        [
            "apply HalfLineSym; auto.",
            "VernacExtend",
            "a9f2fa640518621c5f0ea456fb944837c6ed0712"
        ],
        [
            "assert (H7 := HalfLineDistinct D C M (sym_not_eq H5) H6).",
            "VernacExtend",
            "d8f2b4edd8a54ec747adab99fd89758f9b0b42bb"
        ],
        [
            "apply (CongruentSAS D M A D M B); try autoDistinct; try autoDistance.",
            "VernacExtend",
            "b4d0c2446d3baa70f0650f717ba7b7a2022cda7b"
        ],
        [
            "rewrite (CongruentItself D M A C A); try autoDistinct.",
            "VernacExtend",
            "9f2b91243e9ba8eacbb460388f67f74a2c966972"
        ],
        [
            "rewrite (CongruentItself D M B C B); try autoDistinct.",
            "VernacExtend",
            "500bd8e7bdc573dfaaee96e0932511710b39184e"
        ],
        [
            "apply CongruentSSS; try autoDistinct; try autoDistance.",
            "VernacExtend",
            "9b3ec3cd564296bfd69d6eb03f421bfd02e8287f"
        ],
        [
            "apply HalfLineSym; auto.",
            "VernacExtend",
            "a9f2fa640518621c5f0ea456fb944837c6ed0712"
        ],
        [
            "apply HalfLineSym; auto.",
            "VernacExtend",
            "a9f2fa640518621c5f0ea456fb944837c6ed0712"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma MidLineNotClockwise : forall A B C D M : Point, A <> B -> Distance C A = Distance C B -> Clockwise A B C -> Distance D A = Distance D B -> Clockwise B A D -> Clockwise C D B -> Distance M A = Distance M B -> ~Clockwise D C M.",
            "VernacStartTheoremProof",
            "af8e1182c8cd2fa7f3a31fc3cf656a4d61d4b582"
        ],
        [
            "red in |- *; intros.",
            "VernacExtend",
            "cac589df0c867c7c46c31951b6da5495d0153212"
        ],
        [
            "destruct (FourPointsIntersectionPoint C D B M H4 H6) as (N, (H7, H8)).",
            "VernacExtend",
            "d41d25dc183612d46a98a391e50e332c211f6d16"
        ],
        [
            "assert (H9 := CollinearMidLine A B C D N H H0 H1 H2 H3 H7).",
            "VernacExtend",
            "cfa8003c6b46f22da05bb60e5b254c7f43006342"
        ],
        [
            "assert (H10 : A <> N).",
            "VernacExtend",
            "e014cad01b8139e39e3722dfc16cfcc7c1a6aa0d"
        ],
        [
            "intro; subst; elim H.",
            "VernacExtend",
            "ab0b84fbf909fea8a3f07cea2a65467ed3709c1c"
        ],
        [
            "apply DistNull; autoDistance.",
            "VernacExtend",
            "abb6d979b54a7233fbcacb2a41964b7e9cf0525c"
        ],
        [
            "assert (H11 : A <> M).",
            "VernacExtend",
            "1c18b68f59b3c1a60f7b3f2582e574206fb72c64"
        ],
        [
            "intro; subst; elim H.",
            "VernacExtend",
            "ab0b84fbf909fea8a3f07cea2a65467ed3709c1c"
        ],
        [
            "apply DistNull; autoDistance.",
            "VernacExtend",
            "abb6d979b54a7233fbcacb2a41964b7e9cf0525c"
        ],
        [
            "assert (H12 := BetweenDistinctAB _ _ _ H8).",
            "VernacExtend",
            "7e9af7168b6818ad16e0095672e07f1663647278"
        ],
        [
            "assert (H13 := BetweenDistinctCA _ _ _ H8).",
            "VernacExtend",
            "af078a5af3b27a5c458d6c929a005318f1bbaab7"
        ],
        [
            "assert (H14 := BetweenDistinctBC _ _ _ H8).",
            "VernacExtend",
            "785403a226b1316613ed51ef2ad4cf791a03209a"
        ],
        [
            "assert (H15 : Angle N B M = AS0).",
            "VernacExtend",
            "8eb0574b4e2a71bdf6fa8830cb525d9539d1f047"
        ],
        [
            "apply (NullAngle B N M H12 (BetweenHalfLine _ _ _ H8)).",
            "VernacExtend",
            "7fe6015191cdf33d4a347d164d788ef019ed6ffc"
        ],
        [
            "assert (H16 : Angle N A M = AS0).",
            "VernacExtend",
            "fa4352dce23ff13dadf654817aeaf21f59592039"
        ],
        [
            "rewrite <- H15.",
            "VernacExtend",
            "18e85cb4f44bff02c43e2ceb8ff03399bc22fbde"
        ],
        [
            "apply CongruentSSS; try autoDistinct; try autoDistance.",
            "VernacExtend",
            "9b3ec3cd564296bfd69d6eb03f421bfd02e8287f"
        ],
        [
            "destruct (MarkChange N M A B H14 H).",
            "VernacExtend",
            "42dd1160d6a4727bf4301c1c82c185834efd7038"
        ],
        [
            "apply CollinearBCA; apply HalfLineCollinear; apply NullAngleHalfLine; try autoDistinct.",
            "VernacExtend",
            "0f1a4a37c2e7d3f0789e362c9ff465c32892c679"
        ],
        [
            "apply CollinearBCA; apply HalfLineCollinear; apply NullAngleHalfLine; try autoDistinct.",
            "VernacExtend",
            "0f1a4a37c2e7d3f0789e362c9ff465c32892c679"
        ],
        [
            "elim (BetweenDistinctBC _ _ _ H8); apply trans_eq with (y := MidPoint A B H).",
            "VernacExtend",
            "6aaebc05854540265ff902268043ccf1a2c70eea"
        ],
        [
            "apply UniqueMidPoint; try autoDistance.",
            "VernacExtend",
            "b666f41eb62ced72916879103aeca9af9602ebf8"
        ],
        [
            "apply H17; unfold In in |- *; apply CollinearABA.",
            "VernacExtend",
            "eefefba1cc82fa2f4986b357b3a52101831129b4"
        ],
        [
            "apply sym_eq; apply UniqueMidPoint; try autoDistance.",
            "VernacExtend",
            "9e4317ed305a8547f81b7f47050f2722c2f9b886"
        ],
        [
            "apply H17; unfold In in |- *; apply CollinearABB.",
            "VernacExtend",
            "0fcb4cf0eeb465ee609de344b471d59e16a9b557"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma ClockwiseDCA : forall A B C D : Point, A <> B -> Distance C A = Distance C B -> Clockwise A B C -> Distance D A = Distance D B -> Clockwise B A D -> Clockwise D C A.",
            "VernacStartTheoremProof",
            "af4aed848f9261aa3fb6c203ed7ff61109b88d84"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "assert (H4 := MidPointBetween A B H).",
            "VernacExtend",
            "f7c1e787e8502553f896fb146d4c62e40accc758"
        ],
        [
            "assert (H5 := MidPointBetweenCD A B C D H H0 H2 H1 H3).",
            "VernacExtend",
            "1cdff320d7f8a70044d9312f2fa91448cbd98442"
        ],
        [
            "apply (ClockwiseBetweenMBC D C A (MidPoint A B H)).",
            "VernacExtend",
            "074be3bcdbbabc092235cc64ea6224a9f0ea3202"
        ],
        [
            "apply BetweenSym; trivial.",
            "VernacExtend",
            "4b64e2e034d8805eeb392d09c64cc0f02b3100e4"
        ],
        [
            "apply ClockwiseBCA; apply (BetweenClockwiseAMC A B C (MidPoint A B H) H1 H4).",
            "VernacExtend",
            "ba9d3e83008a6a1a6ee7b64115aa136667ea5e26"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma ClockwiseCDB : forall A B C D : Point, A <> B -> Distance C A = Distance C B -> Clockwise A B C -> Distance D A = Distance D B -> Clockwise B A D -> Clockwise C D B.",
            "VernacStartTheoremProof",
            "5b80897dc68d056b60544bbaf99d734a50f308fb"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "assert (H4 := MidPointBetween A B H).",
            "VernacExtend",
            "f7c1e787e8502553f896fb146d4c62e40accc758"
        ],
        [
            "assert (H5 := MidPointBetweenCD A B C D H H0 H2 H1 H3).",
            "VernacExtend",
            "1cdff320d7f8a70044d9312f2fa91448cbd98442"
        ],
        [
            "apply (ClockwiseBetweenAMC C D B (MidPoint A B H)).",
            "VernacExtend",
            "8e194e9a652aff202359a0f5c515a03fa7b32d79"
        ],
        [
            "trivial.",
            "VernacExtend",
            "6704630005ea37c1f66f817f0d3cb83967ca08c5"
        ],
        [
            "apply ClockwiseCAB; apply (BetweenClockwiseMBC A B C (MidPoint A B H) H1 H4).",
            "VernacExtend",
            "8cd68880aa9c18418de222d832c54790807ddbd1"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma MidLine : forall A B : Point, A <> B -> Line (MidLineDef A B).",
            "VernacStartTheoremProof",
            "7026580a4343d1eb483a11d14fd3f565aa835d2f"
        ],
        [
            "intros A B H.",
            "VernacExtend",
            "6c5c0dfb524d6b048b30cbe7ae5e5cadcea2485f"
        ],
        [
            "destruct (EquilateralClockwise A B H) as (C, ((H1, H2), H3)).",
            "VernacExtend",
            "39df1f53daa7705e9bf93ef8282e70368e771a99"
        ],
        [
            "destruct (EquilateralClockwise B A (sym_not_eq H)) as (D, ((H4, H5), H6)).",
            "VernacExtend",
            "7f68040479eaaf0e25eca0ce6744dc49afac60cb"
        ],
        [
            "assert (H7 := ClockwiseClockwiseDistinct A B C D H3 H6).",
            "VernacExtend",
            "80672b7bb40a8c59bbfa18671e933ef9e9ef01da"
        ],
        [
            "apply (SuperimposedLine (Collinear C D)).",
            "VernacExtend",
            "0968b83222f86cec3d862c3cb82a4d1ea35b6a2f"
        ],
        [
            "split; unfold SubFigure, MidLineDef, Included, In in |- *.",
            "VernacExtend",
            "fc36f05f99667dab7db444eb54261ac4713660b9"
        ],
        [
            "intros E H8.",
            "VernacExtend",
            "44aa14624c0854f9c8711fc9df5bb100a3e0b9eb"
        ],
        [
            "pattern E in |- *; fold (MidLineDef A B) in |- *.",
            "VernacExtend",
            "690dd81e13f76c9aab7be5b21862f001cd916854"
        ],
        [
            "apply (CollinearMidLine A B C D E); unfold MidLineDef in |- *; auto.",
            "VernacExtend",
            "4241e97600c4fa317b1c12b1d9fecec68a6436ef"
        ],
        [
            "rewrite (DistSym C A); rewrite (DistSym C B); autoDistance.",
            "VernacExtend",
            "7b3cd184c7d0b7d02a412892ea73d7453bf80c8f"
        ],
        [
            "rewrite (DistSym D A); rewrite (DistSym D B); autoDistance.",
            "VernacExtend",
            "66d9ab8e8491ced6373e63c71054ffca868e7866"
        ],
        [
            "intros E H8.",
            "VernacExtend",
            "44aa14624c0854f9c8711fc9df5bb100a3e0b9eb"
        ],
        [
            "decompose [or] (ThreeCases C D E).",
            "VernacExtend",
            "48be83243627bf85bd67f18ae8752f692b190fcb"
        ],
        [
            "elim (MidLineNotClockwise B A D C E); try autoDistinct.",
            "VernacExtend",
            "5ee9136709e91f206d10a16f09df85c8a4452c1c"
        ],
        [
            "rewrite (DistSym D B); rewrite (DistSym D A); autoDistance.",
            "VernacExtend",
            "32daf06a3a2a616cd35efada05fb559d94c6e4b9"
        ],
        [
            "rewrite (DistSym C B); rewrite (DistSym C A); autoDistance.",
            "VernacExtend",
            "debf71dc8dcece3bdd59b521dc7bb1e55d505b70"
        ],
        [
            "apply (ClockwiseDCA A B C D); auto.",
            "VernacExtend",
            "f0b4045c4509bea365343d7181f33e8a3377e9cb"
        ],
        [
            "rewrite (DistSym C A); rewrite (DistSym C B); autoDistance.",
            "VernacExtend",
            "7b3cd184c7d0b7d02a412892ea73d7453bf80c8f"
        ],
        [
            "rewrite (DistSym D A); rewrite (DistSym D B); autoDistance.",
            "VernacExtend",
            "66d9ab8e8491ced6373e63c71054ffca868e7866"
        ],
        [
            "elim (MidLineNotClockwise A B C D E); try autoDistinct.",
            "VernacExtend",
            "c5528ce3b2032857755187fc6cef3010e59a0f30"
        ],
        [
            "rewrite (DistSym C A); rewrite (DistSym C B); autoDistance.",
            "VernacExtend",
            "7b3cd184c7d0b7d02a412892ea73d7453bf80c8f"
        ],
        [
            "rewrite (DistSym D A); rewrite (DistSym D B); autoDistance.",
            "VernacExtend",
            "66d9ab8e8491ced6373e63c71054ffca868e7866"
        ],
        [
            "apply (ClockwiseCDB A B C D); auto.",
            "VernacExtend",
            "eb2d98d75d9f98a22d31fa3b24705ae84dd0d6c4"
        ],
        [
            "rewrite (DistSym C A); rewrite (DistSym C B); autoDistance.",
            "VernacExtend",
            "7b3cd184c7d0b7d02a412892ea73d7453bf80c8f"
        ],
        [
            "rewrite (DistSym D A); rewrite (DistSym D B); autoDistance.",
            "VernacExtend",
            "66d9ab8e8491ced6373e63c71054ffca868e7866"
        ],
        [
            "trivial.",
            "VernacExtend",
            "6704630005ea37c1f66f817f0d3cb83967ca08c5"
        ],
        [
            "apply Ruler.",
            "VernacExtend",
            "835482b1a774beb66fa2913fa957122b5ead91e9"
        ],
        [
            "trivial.",
            "VernacExtend",
            "6704630005ea37c1f66f817f0d3cb83967ca08c5"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "End MIDLINE.",
            "VernacEndSegment",
            "871f69c1a833f46150468db80ee1becf08b68cb8"
        ]
    ],
    "proofs": [
        {
            "name": "CollinearMidLine",
            "line_nb": 3,
            "steps": [
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "assert (H5 := ClockwiseClockwiseDistinct A B C D H1 H3).",
                        "VernacExtend",
                        "46958a51a828462ff25b9ff682ae71e1952f87ea"
                    ]
                },
                {
                    "command": [
                        "destruct (CollinearHalfLine C D M H4).",
                        "VernacExtend",
                        "6f1cd1dc7b1c5aaca2de2011f51ebcf2abb198ba"
                    ]
                },
                {
                    "command": [
                        "assert (H7 := HalfLineDistinct C D M H5 H6).",
                        "VernacExtend",
                        "2de6194a0afb00bcc6f80da3882b9fe346f03ec9"
                    ]
                },
                {
                    "command": [
                        "apply (CongruentSAS C M A C M B); try autoDistinct; try autoDistance.",
                        "VernacExtend",
                        "69a4b6a4c31587aa8b1c464567f47018901754fc"
                    ]
                },
                {
                    "command": [
                        "rewrite (CongruentItself C M A D A); try autoDistinct.",
                        "VernacExtend",
                        "46a14c256d029d4ef5fb6bc2bc9c589ad4ce3ca3"
                    ]
                },
                {
                    "command": [
                        "rewrite (CongruentItself C M B D B); try autoDistinct.",
                        "VernacExtend",
                        "497225557a40802c0004f6fe7960dbbf99136d84"
                    ]
                },
                {
                    "command": [
                        "apply CongruentSSS; try autoDistinct; try autoDistance.",
                        "VernacExtend",
                        "9b3ec3cd564296bfd69d6eb03f421bfd02e8287f"
                    ]
                },
                {
                    "command": [
                        "apply HalfLineSym; auto.",
                        "VernacExtend",
                        "a9f2fa640518621c5f0ea456fb944837c6ed0712"
                    ]
                },
                {
                    "command": [
                        "apply HalfLineSym; auto.",
                        "VernacExtend",
                        "a9f2fa640518621c5f0ea456fb944837c6ed0712"
                    ]
                },
                {
                    "command": [
                        "assert (H7 := HalfLineDistinct D C M (sym_not_eq H5) H6).",
                        "VernacExtend",
                        "d8f2b4edd8a54ec747adab99fd89758f9b0b42bb"
                    ]
                },
                {
                    "command": [
                        "apply (CongruentSAS D M A D M B); try autoDistinct; try autoDistance.",
                        "VernacExtend",
                        "b4d0c2446d3baa70f0650f717ba7b7a2022cda7b"
                    ]
                },
                {
                    "command": [
                        "rewrite (CongruentItself D M A C A); try autoDistinct.",
                        "VernacExtend",
                        "9f2b91243e9ba8eacbb460388f67f74a2c966972"
                    ]
                },
                {
                    "command": [
                        "rewrite (CongruentItself D M B C B); try autoDistinct.",
                        "VernacExtend",
                        "500bd8e7bdc573dfaaee96e0932511710b39184e"
                    ]
                },
                {
                    "command": [
                        "apply CongruentSSS; try autoDistinct; try autoDistance.",
                        "VernacExtend",
                        "9b3ec3cd564296bfd69d6eb03f421bfd02e8287f"
                    ]
                },
                {
                    "command": [
                        "apply HalfLineSym; auto.",
                        "VernacExtend",
                        "a9f2fa640518621c5f0ea456fb944837c6ed0712"
                    ]
                },
                {
                    "command": [
                        "apply HalfLineSym; auto.",
                        "VernacExtend",
                        "a9f2fa640518621c5f0ea456fb944837c6ed0712"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "MidLineNotClockwise",
            "line_nb": 22,
            "steps": [
                {
                    "command": [
                        "red in |- *; intros.",
                        "VernacExtend",
                        "cac589df0c867c7c46c31951b6da5495d0153212"
                    ]
                },
                {
                    "command": [
                        "destruct (FourPointsIntersectionPoint C D B M H4 H6) as (N, (H7, H8)).",
                        "VernacExtend",
                        "d41d25dc183612d46a98a391e50e332c211f6d16"
                    ]
                },
                {
                    "command": [
                        "assert (H9 := CollinearMidLine A B C D N H H0 H1 H2 H3 H7).",
                        "VernacExtend",
                        "cfa8003c6b46f22da05bb60e5b254c7f43006342"
                    ]
                },
                {
                    "command": [
                        "assert (H10 : A <> N).",
                        "VernacExtend",
                        "e014cad01b8139e39e3722dfc16cfcc7c1a6aa0d"
                    ]
                },
                {
                    "command": [
                        "intro; subst; elim H.",
                        "VernacExtend",
                        "ab0b84fbf909fea8a3f07cea2a65467ed3709c1c"
                    ]
                },
                {
                    "command": [
                        "apply DistNull; autoDistance.",
                        "VernacExtend",
                        "abb6d979b54a7233fbcacb2a41964b7e9cf0525c"
                    ]
                },
                {
                    "command": [
                        "assert (H11 : A <> M).",
                        "VernacExtend",
                        "1c18b68f59b3c1a60f7b3f2582e574206fb72c64"
                    ]
                },
                {
                    "command": [
                        "intro; subst; elim H.",
                        "VernacExtend",
                        "ab0b84fbf909fea8a3f07cea2a65467ed3709c1c"
                    ]
                },
                {
                    "command": [
                        "apply DistNull; autoDistance.",
                        "VernacExtend",
                        "abb6d979b54a7233fbcacb2a41964b7e9cf0525c"
                    ]
                },
                {
                    "command": [
                        "assert (H12 := BetweenDistinctAB _ _ _ H8).",
                        "VernacExtend",
                        "7e9af7168b6818ad16e0095672e07f1663647278"
                    ]
                },
                {
                    "command": [
                        "assert (H13 := BetweenDistinctCA _ _ _ H8).",
                        "VernacExtend",
                        "af078a5af3b27a5c458d6c929a005318f1bbaab7"
                    ]
                },
                {
                    "command": [
                        "assert (H14 := BetweenDistinctBC _ _ _ H8).",
                        "VernacExtend",
                        "785403a226b1316613ed51ef2ad4cf791a03209a"
                    ]
                },
                {
                    "command": [
                        "assert (H15 : Angle N B M = AS0).",
                        "VernacExtend",
                        "8eb0574b4e2a71bdf6fa8830cb525d9539d1f047"
                    ]
                },
                {
                    "command": [
                        "apply (NullAngle B N M H12 (BetweenHalfLine _ _ _ H8)).",
                        "VernacExtend",
                        "7fe6015191cdf33d4a347d164d788ef019ed6ffc"
                    ]
                },
                {
                    "command": [
                        "assert (H16 : Angle N A M = AS0).",
                        "VernacExtend",
                        "fa4352dce23ff13dadf654817aeaf21f59592039"
                    ]
                },
                {
                    "command": [
                        "rewrite <- H15.",
                        "VernacExtend",
                        "18e85cb4f44bff02c43e2ceb8ff03399bc22fbde"
                    ]
                },
                {
                    "command": [
                        "apply CongruentSSS; try autoDistinct; try autoDistance.",
                        "VernacExtend",
                        "9b3ec3cd564296bfd69d6eb03f421bfd02e8287f"
                    ]
                },
                {
                    "command": [
                        "destruct (MarkChange N M A B H14 H).",
                        "VernacExtend",
                        "42dd1160d6a4727bf4301c1c82c185834efd7038"
                    ]
                },
                {
                    "command": [
                        "apply CollinearBCA; apply HalfLineCollinear; apply NullAngleHalfLine; try autoDistinct.",
                        "VernacExtend",
                        "0f1a4a37c2e7d3f0789e362c9ff465c32892c679"
                    ]
                },
                {
                    "command": [
                        "apply CollinearBCA; apply HalfLineCollinear; apply NullAngleHalfLine; try autoDistinct.",
                        "VernacExtend",
                        "0f1a4a37c2e7d3f0789e362c9ff465c32892c679"
                    ]
                },
                {
                    "command": [
                        "elim (BetweenDistinctBC _ _ _ H8); apply trans_eq with (y := MidPoint A B H).",
                        "VernacExtend",
                        "6aaebc05854540265ff902268043ccf1a2c70eea"
                    ]
                },
                {
                    "command": [
                        "apply UniqueMidPoint; try autoDistance.",
                        "VernacExtend",
                        "b666f41eb62ced72916879103aeca9af9602ebf8"
                    ]
                },
                {
                    "command": [
                        "apply H17; unfold In in |- *; apply CollinearABA.",
                        "VernacExtend",
                        "eefefba1cc82fa2f4986b357b3a52101831129b4"
                    ]
                },
                {
                    "command": [
                        "apply sym_eq; apply UniqueMidPoint; try autoDistance.",
                        "VernacExtend",
                        "9e4317ed305a8547f81b7f47050f2722c2f9b886"
                    ]
                },
                {
                    "command": [
                        "apply H17; unfold In in |- *; apply CollinearABB.",
                        "VernacExtend",
                        "0fcb4cf0eeb465ee609de344b471d59e16a9b557"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "ClockwiseDCA",
            "line_nb": 49,
            "steps": [
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "assert (H4 := MidPointBetween A B H).",
                        "VernacExtend",
                        "f7c1e787e8502553f896fb146d4c62e40accc758"
                    ]
                },
                {
                    "command": [
                        "assert (H5 := MidPointBetweenCD A B C D H H0 H2 H1 H3).",
                        "VernacExtend",
                        "1cdff320d7f8a70044d9312f2fa91448cbd98442"
                    ]
                },
                {
                    "command": [
                        "apply (ClockwiseBetweenMBC D C A (MidPoint A B H)).",
                        "VernacExtend",
                        "074be3bcdbbabc092235cc64ea6224a9f0ea3202"
                    ]
                },
                {
                    "command": [
                        "apply BetweenSym; trivial.",
                        "VernacExtend",
                        "4b64e2e034d8805eeb392d09c64cc0f02b3100e4"
                    ]
                },
                {
                    "command": [
                        "apply ClockwiseBCA; apply (BetweenClockwiseAMC A B C (MidPoint A B H) H1 H4).",
                        "VernacExtend",
                        "ba9d3e83008a6a1a6ee7b64115aa136667ea5e26"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "ClockwiseCDB",
            "line_nb": 57,
            "steps": [
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "assert (H4 := MidPointBetween A B H).",
                        "VernacExtend",
                        "f7c1e787e8502553f896fb146d4c62e40accc758"
                    ]
                },
                {
                    "command": [
                        "assert (H5 := MidPointBetweenCD A B C D H H0 H2 H1 H3).",
                        "VernacExtend",
                        "1cdff320d7f8a70044d9312f2fa91448cbd98442"
                    ]
                },
                {
                    "command": [
                        "apply (ClockwiseBetweenAMC C D B (MidPoint A B H)).",
                        "VernacExtend",
                        "8e194e9a652aff202359a0f5c515a03fa7b32d79"
                    ]
                },
                {
                    "command": [
                        "trivial.",
                        "VernacExtend",
                        "6704630005ea37c1f66f817f0d3cb83967ca08c5"
                    ]
                },
                {
                    "command": [
                        "apply ClockwiseCAB; apply (BetweenClockwiseMBC A B C (MidPoint A B H) H1 H4).",
                        "VernacExtend",
                        "8cd68880aa9c18418de222d832c54790807ddbd1"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "MidLine",
            "line_nb": 65,
            "steps": [
                {
                    "command": [
                        "intros A B H.",
                        "VernacExtend",
                        "6c5c0dfb524d6b048b30cbe7ae5e5cadcea2485f"
                    ]
                },
                {
                    "command": [
                        "destruct (EquilateralClockwise A B H) as (C, ((H1, H2), H3)).",
                        "VernacExtend",
                        "39df1f53daa7705e9bf93ef8282e70368e771a99"
                    ]
                },
                {
                    "command": [
                        "destruct (EquilateralClockwise B A (sym_not_eq H)) as (D, ((H4, H5), H6)).",
                        "VernacExtend",
                        "7f68040479eaaf0e25eca0ce6744dc49afac60cb"
                    ]
                },
                {
                    "command": [
                        "assert (H7 := ClockwiseClockwiseDistinct A B C D H3 H6).",
                        "VernacExtend",
                        "80672b7bb40a8c59bbfa18671e933ef9e9ef01da"
                    ]
                },
                {
                    "command": [
                        "apply (SuperimposedLine (Collinear C D)).",
                        "VernacExtend",
                        "0968b83222f86cec3d862c3cb82a4d1ea35b6a2f"
                    ]
                },
                {
                    "command": [
                        "split; unfold SubFigure, MidLineDef, Included, In in |- *.",
                        "VernacExtend",
                        "fc36f05f99667dab7db444eb54261ac4713660b9"
                    ]
                },
                {
                    "command": [
                        "intros E H8.",
                        "VernacExtend",
                        "44aa14624c0854f9c8711fc9df5bb100a3e0b9eb"
                    ]
                },
                {
                    "command": [
                        "pattern E in |- *; fold (MidLineDef A B) in |- *.",
                        "VernacExtend",
                        "690dd81e13f76c9aab7be5b21862f001cd916854"
                    ]
                },
                {
                    "command": [
                        "apply (CollinearMidLine A B C D E); unfold MidLineDef in |- *; auto.",
                        "VernacExtend",
                        "4241e97600c4fa317b1c12b1d9fecec68a6436ef"
                    ]
                },
                {
                    "command": [
                        "rewrite (DistSym C A); rewrite (DistSym C B); autoDistance.",
                        "VernacExtend",
                        "7b3cd184c7d0b7d02a412892ea73d7453bf80c8f"
                    ]
                },
                {
                    "command": [
                        "rewrite (DistSym D A); rewrite (DistSym D B); autoDistance.",
                        "VernacExtend",
                        "66d9ab8e8491ced6373e63c71054ffca868e7866"
                    ]
                },
                {
                    "command": [
                        "intros E H8.",
                        "VernacExtend",
                        "44aa14624c0854f9c8711fc9df5bb100a3e0b9eb"
                    ]
                },
                {
                    "command": [
                        "decompose [or] (ThreeCases C D E).",
                        "VernacExtend",
                        "48be83243627bf85bd67f18ae8752f692b190fcb"
                    ]
                },
                {
                    "command": [
                        "elim (MidLineNotClockwise B A D C E); try autoDistinct.",
                        "VernacExtend",
                        "5ee9136709e91f206d10a16f09df85c8a4452c1c"
                    ]
                },
                {
                    "command": [
                        "rewrite (DistSym D B); rewrite (DistSym D A); autoDistance.",
                        "VernacExtend",
                        "32daf06a3a2a616cd35efada05fb559d94c6e4b9"
                    ]
                },
                {
                    "command": [
                        "rewrite (DistSym C B); rewrite (DistSym C A); autoDistance.",
                        "VernacExtend",
                        "debf71dc8dcece3bdd59b521dc7bb1e55d505b70"
                    ]
                },
                {
                    "command": [
                        "apply (ClockwiseDCA A B C D); auto.",
                        "VernacExtend",
                        "f0b4045c4509bea365343d7181f33e8a3377e9cb"
                    ]
                },
                {
                    "command": [
                        "rewrite (DistSym C A); rewrite (DistSym C B); autoDistance.",
                        "VernacExtend",
                        "7b3cd184c7d0b7d02a412892ea73d7453bf80c8f"
                    ]
                },
                {
                    "command": [
                        "rewrite (DistSym D A); rewrite (DistSym D B); autoDistance.",
                        "VernacExtend",
                        "66d9ab8e8491ced6373e63c71054ffca868e7866"
                    ]
                },
                {
                    "command": [
                        "elim (MidLineNotClockwise A B C D E); try autoDistinct.",
                        "VernacExtend",
                        "c5528ce3b2032857755187fc6cef3010e59a0f30"
                    ]
                },
                {
                    "command": [
                        "rewrite (DistSym C A); rewrite (DistSym C B); autoDistance.",
                        "VernacExtend",
                        "7b3cd184c7d0b7d02a412892ea73d7453bf80c8f"
                    ]
                },
                {
                    "command": [
                        "rewrite (DistSym D A); rewrite (DistSym D B); autoDistance.",
                        "VernacExtend",
                        "66d9ab8e8491ced6373e63c71054ffca868e7866"
                    ]
                },
                {
                    "command": [
                        "apply (ClockwiseCDB A B C D); auto.",
                        "VernacExtend",
                        "eb2d98d75d9f98a22d31fa3b24705ae84dd0d6c4"
                    ]
                },
                {
                    "command": [
                        "rewrite (DistSym C A); rewrite (DistSym C B); autoDistance.",
                        "VernacExtend",
                        "7b3cd184c7d0b7d02a412892ea73d7453bf80c8f"
                    ]
                },
                {
                    "command": [
                        "rewrite (DistSym D A); rewrite (DistSym D B); autoDistance.",
                        "VernacExtend",
                        "66d9ab8e8491ced6373e63c71054ffca868e7866"
                    ]
                },
                {
                    "command": [
                        "trivial.",
                        "VernacExtend",
                        "6704630005ea37c1f66f817f0d3cb83967ca08c5"
                    ]
                },
                {
                    "command": [
                        "apply Ruler.",
                        "VernacExtend",
                        "835482b1a774beb66fa2913fa957122b5ead91e9"
                    ]
                },
                {
                    "command": [
                        "trivial.",
                        "VernacExtend",
                        "6704630005ea37c1f66f817f0d3cb83967ca08c5"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        }
    ]
}