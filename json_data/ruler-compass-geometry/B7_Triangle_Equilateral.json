{
    "filename": "B7_Triangle_Equilateral.v",
    "coq_project": "ruler-compass-geometry",
    "vernac_cmds": [
        [
            "Require Export B6_Cercle_Def.",
            "VernacRequire",
            "10919fefc50492655ee57c5911506bf12e97e076"
        ],
        [
            "Section EQUILATERAL_TRIANGLE.",
            "VernacBeginSection",
            "a50ede1f671ef6cdbbfb47dea7a038dc01cd58e0"
        ],
        [
            "Definition Equilateral (A B C : Point) := Distance A B = Distance A C /\\ Distance A B = Distance B C.",
            "VernacDefinition",
            "c092fb211ea4fd3dafde6b1529a1811c48a21b22"
        ],
        [
            "Lemma DegeneratedEquilateral : forall A : Point, Equilateral A A A.",
            "VernacStartTheoremProof",
            "8f59ae3aeb32100f84c0984784a8e1e5e64ed392"
        ],
        [
            "intro; split; auto.",
            "VernacExtend",
            "ddb736dd648cdaaca55df4d3e73e4053a134231c"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma Exists2AB : forall A B : Point, A <> B -> {C : Point | Between A B C /\\ Distance B C = Distance A B}.",
            "VernacStartTheoremProof",
            "9fa52e54fac843f5e8fb9eefb0a9b7999d495b0a"
        ],
        [
            "intros A B Hab.",
            "VernacExtend",
            "365221c7983f77bc74ceb21cf55b98d504dac8d0"
        ],
        [
            "setLine A B Hab ipattern:(L) ipattern:(AB).",
            "VernacExtend",
            "3566490ff4c67f37b6d50d732a4024be1819d399"
        ],
        [
            "setCircle B A B Hab ipattern:(G) ipattern:(BAB).",
            "VernacExtend",
            "7c77e01a27bcbe58315bd37c72f0872280959f2c"
        ],
        [
            "setLinterposC L G AB BAB ipattern:(C) ipattern:(H1) ipattern:(H2) ipattern:(H3) ipattern:(H4).",
            "VernacExtend",
            "9252d10d58a58f9f471d8f459ceaef2908d462a3"
        ],
        [
            "apply CollinearABB.",
            "VernacExtend",
            "11d754a8b18fa57bf1e76328d5de721c235c7fa9"
        ],
        [
            "exists C; canonize.",
            "VernacExtend",
            "134b50110f21f6177fbc698fb24a941f7f09502b"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma EquilateralLSlt : forall A B : Point, A<>B -> LSlt (Distance A B) (LSplus (Distance A B) (Distance A B)).",
            "VernacStartTheoremProof",
            "ac71643b844eb98c3c0c06dfca78e2503f06df15"
        ],
        [
            "intros A B H; destruct (Exists2AB A B H) as (C, (H0, H1)).",
            "VernacExtend",
            "8242c7dc89ec61957d14f0896bd1f425fa169a6a"
        ],
        [
            "pattern (Distance A B) at -3 in |- *; rewrite <- H1.",
            "VernacExtend",
            "115f7352c6750c246c1e19da36629016b75c056a"
        ],
        [
            "rewrite (DistSym A B); rewrite (DistSym B C).",
            "VernacExtend",
            "8a140205970611950392739bff5e00d0ef9bf4aa"
        ],
        [
            "rewrite Chasles.",
            "VernacExtend",
            "e940cc2102322b5a207e15ce675cd6baabbf22ca"
        ],
        [
            "apply OrderLSlt.",
            "VernacExtend",
            "5ea263cb63420e4a6c5289cac557a73e6f9a1938"
        ],
        [
            "auto.",
            "VernacExtend",
            "1f09da0addd069b3b65326f8c71967acc1e985af"
        ],
        [
            "generalizeChangeSide.",
            "VernacExtend",
            "5e228b6b7c592e98c7b8e296efd481fe42ece523"
        ],
        [
            "apply (BetweenSymHalfLine _ _ _ H0).",
            "VernacExtend",
            "caa20902fc3dbab9e5945d8bcb37a939042ff2ca"
        ],
        [
            "apply (BetweenHalfLine _ _ _ H0).",
            "VernacExtend",
            "e6eab7693941cc777cd0f909db91153891476bc0"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma EquilateralSpec : forall A B : Point, A<>B -> TriangleSpec (Distance A B) (Distance A B) (Distance A B).",
            "VernacStartTheoremProof",
            "9bae4a5efacfaee4d350b6db572bf2cb9b383833"
        ],
        [
            "unfold TriangleSpec in |- *; intuition; apply EquilateralLSlt; auto.",
            "VernacExtend",
            "d7da34a35f4be7169d1f30e6996ffce318269794"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma EquilateralClockwise : forall A B : Point, A <> B -> {C : Point | Equilateral A B C /\\ Clockwise A B C}.",
            "VernacStartTheoremProof",
            "bca10860d4a6572b18f00e41b2f5735707091d71"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "setCircle A A B H ipattern:(C1) ipattern:(H1).",
            "VernacExtend",
            "4358060e3c34bbb28be2dd61ce4760c8f452b051"
        ],
        [
            "setCircle B A B H ipattern:(C2) ipattern:(H2).",
            "VernacExtend",
            "dd4ce43de0c312416e4d711932f319b80d444d92"
        ],
        [
            "setCinterclockC C1 C2 H1 H2 ipattern:(C) ipattern:(H3) ipattern:(H4) ipattern:(H5) ipattern:(H6); unfold C1, C2, H1, H2 in *; simpl in *.",
            "VernacExtend",
            "6fd9b9652ca363fb4d613487ee850cdcc3b311d4"
        ],
        [
            "apply EquilateralSpec; auto.",
            "VernacExtend",
            "78c24b8dac67ff1a080fc714d4ce907a3269f480"
        ],
        [
            "exists C; unfold Equilateral in |- *; intuition.",
            "VernacExtend",
            "82844b08fea135a3cf5453be887f454cddee69c3"
        ],
        [
            "Defined.",
            "VernacEndProof",
            "88c0be54a50df4bb90276c075406fe442428eb9c"
        ],
        [
            "Lemma ClockwiseExists : forall A B : Point, A <> B -> {C : Point | Clockwise A B C}.",
            "VernacStartTheoremProof",
            "476af60c992451886e0bdba99667592bf7ebb390"
        ],
        [
            "intros A B H; destruct (EquilateralClockwise A B H) as (C, (H1, H2)).",
            "VernacExtend",
            "f3a1238654ce48dc61b31458d9f0c25104c70816"
        ],
        [
            "exists C; trivial.",
            "VernacExtend",
            "e5b07008e9c0ca6436fa00406df4a6a181d97beb"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma ThirdPoint : {Vv : Point | Clockwise Oo Uu Vv}.",
            "VernacStartTheoremProof",
            "c3b83683a4a073461542e0a94d318fa5ed4b1b5e"
        ],
        [
            "exact (ClockwiseExists Oo Uu DistinctOoUu).",
            "VernacExtend",
            "747b51d2a49f77f8abc1cc4ecf34229b7f520cc4"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma Apart : forall A B C : Point, A <> B -> A <> C \\/ B <> C.",
            "VernacStartTheoremProof",
            "293a43a5cd808c1c129649d774fd91cb781c3d91"
        ],
        [
            "intros A B C H; decompose [or] (FourCases A B C).",
            "VernacExtend",
            "82e745185d79ff7483ca1b08a1386d14374809c4"
        ],
        [
            "right; exact (ClockwiseDistinctBC A B C H0).",
            "VernacExtend",
            "34d6f02d97b36580af8feb638312db709523f93a"
        ],
        [
            "left; exact (ClockwiseDistinctBC B A C H1).",
            "VernacExtend",
            "58a7c9bf0e14713abb66dbbb754fa13fa69cd07d"
        ],
        [
            "canonize.",
            "VernacExtend",
            "d86154be330fc32ce6876fd84daa5559bf6d4594"
        ],
        [
            "destruct (ClockwiseExists A B H) as (E, H1).",
            "VernacExtend",
            "3d490d9a48faa0e341dcae8cbeb926eaa8ccd7fe"
        ],
        [
            "left; exact (ClockwiseDistinctAB A C E (H0 E H1)).",
            "VernacExtend",
            "72b05b07058123bdc974ce1ba2290894ff1611e8"
        ],
        [
            "canonize.",
            "VernacExtend",
            "d86154be330fc32ce6876fd84daa5559bf6d4594"
        ],
        [
            "destruct (ClockwiseExists B A (sym_not_eq H)) as (E, H1).",
            "VernacExtend",
            "eb67a4a0867a3e0e1f37b6a1e089de8ef4ec9d94"
        ],
        [
            "right; exact (ClockwiseDistinctAB B C E (H0 E H1)).",
            "VernacExtend",
            "47430b3a5e75d591be815cf14aed144f44720fdd"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "End EQUILATERAL_TRIANGLE.",
            "VernacEndSegment",
            "cc67d18c176bcca750699470d9dc581b5f0c5380"
        ]
    ],
    "proofs": [
        {
            "name": "DegeneratedEquilateral",
            "line_nb": 3,
            "steps": [
                {
                    "command": [
                        "intro; split; auto.",
                        "VernacExtend",
                        "ddb736dd648cdaaca55df4d3e73e4053a134231c"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "Exists2AB",
            "line_nb": 6,
            "steps": [
                {
                    "command": [
                        "intros A B Hab.",
                        "VernacExtend",
                        "365221c7983f77bc74ceb21cf55b98d504dac8d0"
                    ]
                },
                {
                    "command": [
                        "setLine A B Hab ipattern:(L) ipattern:(AB).",
                        "VernacExtend",
                        "3566490ff4c67f37b6d50d732a4024be1819d399"
                    ]
                },
                {
                    "command": [
                        "setCircle B A B Hab ipattern:(G) ipattern:(BAB).",
                        "VernacExtend",
                        "7c77e01a27bcbe58315bd37c72f0872280959f2c"
                    ]
                },
                {
                    "command": [
                        "setLinterposC L G AB BAB ipattern:(C) ipattern:(H1) ipattern:(H2) ipattern:(H3) ipattern:(H4).",
                        "VernacExtend",
                        "9252d10d58a58f9f471d8f459ceaef2908d462a3"
                    ]
                },
                {
                    "command": [
                        "apply CollinearABB.",
                        "VernacExtend",
                        "11d754a8b18fa57bf1e76328d5de721c235c7fa9"
                    ]
                },
                {
                    "command": [
                        "exists C; canonize.",
                        "VernacExtend",
                        "134b50110f21f6177fbc698fb24a941f7f09502b"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "EquilateralLSlt",
            "line_nb": 14,
            "steps": [
                {
                    "command": [
                        "intros A B H; destruct (Exists2AB A B H) as (C, (H0, H1)).",
                        "VernacExtend",
                        "8242c7dc89ec61957d14f0896bd1f425fa169a6a"
                    ]
                },
                {
                    "command": [
                        "pattern (Distance A B) at -3 in |- *; rewrite <- H1.",
                        "VernacExtend",
                        "115f7352c6750c246c1e19da36629016b75c056a"
                    ]
                },
                {
                    "command": [
                        "rewrite (DistSym A B); rewrite (DistSym B C).",
                        "VernacExtend",
                        "8a140205970611950392739bff5e00d0ef9bf4aa"
                    ]
                },
                {
                    "command": [
                        "rewrite Chasles.",
                        "VernacExtend",
                        "e940cc2102322b5a207e15ce675cd6baabbf22ca"
                    ]
                },
                {
                    "command": [
                        "apply OrderLSlt.",
                        "VernacExtend",
                        "5ea263cb63420e4a6c5289cac557a73e6f9a1938"
                    ]
                },
                {
                    "command": [
                        "auto.",
                        "VernacExtend",
                        "1f09da0addd069b3b65326f8c71967acc1e985af"
                    ]
                },
                {
                    "command": [
                        "generalizeChangeSide.",
                        "VernacExtend",
                        "5e228b6b7c592e98c7b8e296efd481fe42ece523"
                    ]
                },
                {
                    "command": [
                        "apply (BetweenSymHalfLine _ _ _ H0).",
                        "VernacExtend",
                        "caa20902fc3dbab9e5945d8bcb37a939042ff2ca"
                    ]
                },
                {
                    "command": [
                        "apply (BetweenHalfLine _ _ _ H0).",
                        "VernacExtend",
                        "e6eab7693941cc777cd0f909db91153891476bc0"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "EquilateralSpec",
            "line_nb": 25,
            "steps": [
                {
                    "command": [
                        "unfold TriangleSpec in |- *; intuition; apply EquilateralLSlt; auto.",
                        "VernacExtend",
                        "d7da34a35f4be7169d1f30e6996ffce318269794"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "EquilateralClockwise",
            "line_nb": 28,
            "steps": [
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "setCircle A A B H ipattern:(C1) ipattern:(H1).",
                        "VernacExtend",
                        "4358060e3c34bbb28be2dd61ce4760c8f452b051"
                    ]
                },
                {
                    "command": [
                        "setCircle B A B H ipattern:(C2) ipattern:(H2).",
                        "VernacExtend",
                        "dd4ce43de0c312416e4d711932f319b80d444d92"
                    ]
                },
                {
                    "command": [
                        "setCinterclockC C1 C2 H1 H2 ipattern:(C) ipattern:(H3) ipattern:(H4) ipattern:(H5) ipattern:(H6); unfold C1, C2, H1, H2 in *; simpl in *.",
                        "VernacExtend",
                        "6fd9b9652ca363fb4d613487ee850cdcc3b311d4"
                    ]
                },
                {
                    "command": [
                        "apply EquilateralSpec; auto.",
                        "VernacExtend",
                        "78c24b8dac67ff1a080fc714d4ce907a3269f480"
                    ]
                },
                {
                    "command": [
                        "exists C; unfold Equilateral in |- *; intuition.",
                        "VernacExtend",
                        "82844b08fea135a3cf5453be887f454cddee69c3"
                    ]
                },
                {
                    "command": [
                        "Defined.",
                        "VernacEndProof",
                        "88c0be54a50df4bb90276c075406fe442428eb9c"
                    ]
                }
            ]
        },
        {
            "name": "ClockwiseExists",
            "line_nb": 36,
            "steps": [
                {
                    "command": [
                        "intros A B H; destruct (EquilateralClockwise A B H) as (C, (H1, H2)).",
                        "VernacExtend",
                        "f3a1238654ce48dc61b31458d9f0c25104c70816"
                    ]
                },
                {
                    "command": [
                        "exists C; trivial.",
                        "VernacExtend",
                        "e5b07008e9c0ca6436fa00406df4a6a181d97beb"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "ThirdPoint",
            "line_nb": 40,
            "steps": [
                {
                    "command": [
                        "exact (ClockwiseExists Oo Uu DistinctOoUu).",
                        "VernacExtend",
                        "747b51d2a49f77f8abc1cc4ecf34229b7f520cc4"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "Apart",
            "line_nb": 43,
            "steps": [
                {
                    "command": [
                        "intros A B C H; decompose [or] (FourCases A B C).",
                        "VernacExtend",
                        "82e745185d79ff7483ca1b08a1386d14374809c4"
                    ]
                },
                {
                    "command": [
                        "right; exact (ClockwiseDistinctBC A B C H0).",
                        "VernacExtend",
                        "34d6f02d97b36580af8feb638312db709523f93a"
                    ]
                },
                {
                    "command": [
                        "left; exact (ClockwiseDistinctBC B A C H1).",
                        "VernacExtend",
                        "58a7c9bf0e14713abb66dbbb754fa13fa69cd07d"
                    ]
                },
                {
                    "command": [
                        "canonize.",
                        "VernacExtend",
                        "d86154be330fc32ce6876fd84daa5559bf6d4594"
                    ]
                },
                {
                    "command": [
                        "destruct (ClockwiseExists A B H) as (E, H1).",
                        "VernacExtend",
                        "3d490d9a48faa0e341dcae8cbeb926eaa8ccd7fe"
                    ]
                },
                {
                    "command": [
                        "left; exact (ClockwiseDistinctAB A C E (H0 E H1)).",
                        "VernacExtend",
                        "72b05b07058123bdc974ce1ba2290894ff1611e8"
                    ]
                },
                {
                    "command": [
                        "canonize.",
                        "VernacExtend",
                        "d86154be330fc32ce6876fd84daa5559bf6d4594"
                    ]
                },
                {
                    "command": [
                        "destruct (ClockwiseExists B A (sym_not_eq H)) as (E, H1).",
                        "VernacExtend",
                        "eb67a4a0867a3e0e1f37b6a1e089de8ef4ec9d94"
                    ]
                },
                {
                    "command": [
                        "right; exact (ClockwiseDistinctAB B C E (H0 E H1)).",
                        "VernacExtend",
                        "47430b3a5e75d591be815cf14aed144f44720fdd"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        }
    ]
}