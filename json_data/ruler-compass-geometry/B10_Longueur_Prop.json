{
    "filename": "B10_Longueur_Prop.v",
    "coq_project": "ruler-compass-geometry",
    "vernac_cmds": [
        [
            "Require Export B9_Inegalite_Triang.",
            "VernacRequire",
            "1549f74e922b3c58e7007e4e663965d1913138f8"
        ],
        [
            "Section METRIC_BASICS.",
            "VernacBeginSection",
            "13e2a9d061a6c76b6efa39d43ff6243724d447da"
        ],
        [
            "Definition LS0 := Distance Oo Oo.",
            "VernacDefinition",
            "d47d9bcc8bbb2c21f79c0bb686a333fbef36c18e"
        ],
        [
            "Lemma NullDist : forall A, Distance A A = LS0.",
            "VernacStartTheoremProof",
            "c366a5c7ff11ba975641159c06cb158baf6832f9"
        ],
        [
            "intro; unfold LS0 in |- *; apply DistAA.",
            "VernacExtend",
            "8af0bee0fcf24e193e6bd2813b7d42cbb95e95a9"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma NullLSlt : forall A B : Point, A <> B -> LSlt LS0 (Distance A B).",
            "VernacStartTheoremProof",
            "57fd4aab299695b60e8b57e859fedf17a1bcbc41"
        ],
        [
            "intros; rewrite <- (NullDist A).",
            "VernacExtend",
            "6bbda0459fc1acc46b09c95a4b94f50901f95744"
        ],
        [
            "apply OrderLSlt; auto.",
            "VernacExtend",
            "e3b3487cd2bacdbf3174adf6953d60400b0b2057"
        ],
        [
            "canonize.",
            "VernacExtend",
            "d86154be330fc32ce6876fd84daa5559bf6d4594"
        ],
        [
            "elim (NotClockwiseAAB _ _ H0).",
            "VernacExtend",
            "68c52b1a6a7fbf61a59bfeb2e4eed0f14ce4dff0"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma EquiOrientedNotEquiOriented : forall A B C D : Point, A <> B -> EquiOriented A B C D -> ~EquiOriented A B D C.",
            "VernacStartTheoremProof",
            "a37d62c3b2176c67cce090a73fdb311da2fed76f"
        ],
        [
            "canonize.",
            "VernacExtend",
            "d86154be330fc32ce6876fd84daa5559bf6d4594"
        ],
        [
            "destruct (ClockwiseExists A B H) as (E, H2).",
            "VernacExtend",
            "f11cb2200cab597b41859c70433c6e628d44bbdf"
        ],
        [
            "elim (ClockwiseNotClockwise C D E); auto.",
            "VernacExtend",
            "ee97b3e7688eb3ec9810ff613da1a53a63dabf8a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma LSltDistinct : forall A B C D, LSlt (Distance A B) (Distance C D) -> C <> D.",
            "VernacStartTheoremProof",
            "d94dcfda10dae14f3b7e251533e09fde49b39174"
        ],
        [
            "red in |- *; intros; subst.",
            "VernacExtend",
            "cf259c1df4194603478187e900cb076555bc63f1"
        ],
        [
            "rewrite (DistAA D A) in H.",
            "VernacExtend",
            "11462add2f03e6dbf79130f6706f646fdc0e9d6b"
        ],
        [
            "destruct (LSltOrder A B A).",
            "VernacExtend",
            "38393ac504d83f48a59bc9835ed709108d5067c5"
        ],
        [
            "right; canonize.",
            "VernacExtend",
            "8f3520962f09586f1de57c3f52868ca71fa95e16"
        ],
        [
            "elim (NotClockwiseAAB A x); auto.",
            "VernacExtend",
            "729101371bf154989d379ec429dfa5ac3e737037"
        ],
        [
            "trivial.",
            "VernacExtend",
            "6704630005ea37c1f66f817f0d3cb83967ca08c5"
        ],
        [
            "elim (EquiOrientedNotEquiOriented A B B A (sym_not_eq H1) H0).",
            "VernacExtend",
            "c506dc122f0da890a324f64ea4731315b447f32f"
        ],
        [
            "canonize.",
            "VernacExtend",
            "d86154be330fc32ce6876fd84daa5559bf6d4594"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma LSltNull : forall A B, LSlt LS0 (Distance A B) -> A <> B.",
            "VernacStartTheoremProof",
            "f719b83d81f6a055760dba192f92c7c839956134"
        ],
        [
            "red in |- *; intros; subst.",
            "VernacExtend",
            "cf259c1df4194603478187e900cb076555bc63f1"
        ],
        [
            "rewrite <- (NullDist B) in H.",
            "VernacExtend",
            "6e79639e7811acca65de90ba34768c7de1b59385"
        ],
        [
            "destruct (LSltOrder B B B).",
            "VernacExtend",
            "9b8be1eff7c58d015a91cddb18b00424a3b13922"
        ],
        [
            "canonize.",
            "VernacExtend",
            "d86154be330fc32ce6876fd84daa5559bf6d4594"
        ],
        [
            "trivial.",
            "VernacExtend",
            "6704630005ea37c1f66f817f0d3cb83967ca08c5"
        ],
        [
            "auto.",
            "VernacExtend",
            "1f09da0addd069b3b65326f8c71967acc1e985af"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma NotLSltNullNull : ~LSlt LS0 LS0.",
            "VernacStartTheoremProof",
            "0fcd5f2eb2ed5f4a87b0af28b475123f1ef13e70"
        ],
        [
            "change (~ LSlt LS0 (Distance Oo Oo)) in |- *.",
            "VernacExtend",
            "2a1fdff6e63685e27e739233ef116362aa282fd0"
        ],
        [
            "intro.",
            "VernacExtend",
            "3999be354c758ba0d1866e0fcc78a7288779a224"
        ],
        [
            "elim (LSltNull _ _ H).",
            "VernacExtend",
            "3900b03f8bfee6dba971b6a74d6f6aa416e606e3"
        ],
        [
            "trivial.",
            "VernacExtend",
            "6704630005ea37c1f66f817f0d3cb83967ca08c5"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma LS0NeutralRight : forall A B : Point, LSplus (Distance A B) LS0 = Distance A B.",
            "VernacStartTheoremProof",
            "3d631c7a78128ce45bdc274f2c46cf31bee9cdab"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "rewrite <- (NullDist B); rewrite Chasles; canonize.",
            "VernacExtend",
            "3e01c94700415e5f7f22cd7d6e4b2692a7745aea"
        ],
        [
            "elim (NotClockwiseAAB B x); trivial.",
            "VernacExtend",
            "11efd0ba6b7a92540d25dc5bde33b0ff0e417c8d"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma LS0NeutralLeft : forall A B : Point, LSplus LS0 (Distance A B) = Distance A B.",
            "VernacStartTheoremProof",
            "9580be067cd3a81b050836cef3bfdb4f3496b9b7"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "rewrite <- (NullDist A); rewrite Chasles; canonize.",
            "VernacExtend",
            "1ac04e111fdc3ad56ea7b4657e44535d21fb34fd"
        ],
        [
            "elim (NotClockwiseAAB A x); trivial.",
            "VernacExtend",
            "aca4c1f5a7fec8f2b7d3af4f27cf4721e2be5e6d"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma EquiOrientedNotEquiOrientedABC : forall A B C : Point, A <> B -> EquiOriented A B B C -> ~EquiOriented A C C B.",
            "VernacStartTheoremProof",
            "af78b099d1354bc584e0eefa3f9a0129579459a3"
        ],
        [
            "canonize.",
            "VernacExtend",
            "d86154be330fc32ce6876fd84daa5559bf6d4594"
        ],
        [
            "destruct (ClockwiseExists A B H) as (E, H2).",
            "VernacExtend",
            "f11cb2200cab597b41859c70433c6e628d44bbdf"
        ],
        [
            "decompose [or] (FourCases A B C).",
            "VernacExtend",
            "3c9a09cca478a7141f637d497cbd066bdce43262"
        ],
        [
            "elim (NotClockwiseBAA C B); auto.",
            "VernacExtend",
            "b24d14d17801e9f0f26a4f26dbd1f4377067e148"
        ],
        [
            "elim (NotClockwiseBAA B C); apply H1; apply ClockwiseBCA; trivial.",
            "VernacExtend",
            "c5495e375e815eb1c232220dc4557a81229e2ad4"
        ],
        [
            "canonize.",
            "VernacExtend",
            "d86154be330fc32ce6876fd84daa5559bf6d4594"
        ],
        [
            "elim (ClockwiseNotClockwise B C E); auto.",
            "VernacExtend",
            "edb65f2957451ca9731600cb88211dd5446d0127"
        ],
        [
            "generalizeChangeSense.",
            "VernacExtend",
            "be975c77c59224ac5239b36f960f98e48421bb54"
        ],
        [
            "elim (ClockwiseNotClockwise B C E); auto.",
            "VernacExtend",
            "edb65f2957451ca9731600cb88211dd5446d0127"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma HalfLineAntisymLSlt : forall A B C : Point, A <> B -> HalfLine A B C -> LSlt (Distance A B) (Distance A C) -> ~LSlt (Distance A C) (Distance A B).",
            "VernacStartTheoremProof",
            "73ab9c8d5b9468cf096159c8764bf93f3db2515c"
        ],
        [
            "red in |- *; intros.",
            "VernacExtend",
            "cac589df0c867c7c46c31951b6da5495d0153212"
        ],
        [
            "assert (H3 : HalfLine A B C \\/ HalfLine A C B).",
            "VernacExtend",
            "e87d94ea2c5c4cb5ecfac5d28f13b8caad1699de"
        ],
        [
            "intuition.",
            "VernacExtend",
            "ebd9388eeb482972743f9cce5cbddbd85ca5bdfd"
        ],
        [
            "destruct (LSltOrder _ _ _ H3 H1).",
            "VernacExtend",
            "47266cb4939ba0cfd10a28315ae550ae43a5b69e"
        ],
        [
            "elim (EquiOrientedNotEquiOrientedABC _ _ _ H H4).",
            "VernacExtend",
            "813f6e73946b0392cfcf91c48d548975e9c6fb35"
        ],
        [
            "assert (EquiOriented A C C B /\\ C <> B).",
            "VernacExtend",
            "9028cdd064b745ac8270d83924d162f094c20eb0"
        ],
        [
            "apply LSltOrder.",
            "VernacExtend",
            "ac3f975abcdff72944f3c872eb24020531993795"
        ],
        [
            "generalizeChange.",
            "VernacExtend",
            "d3c977ebf7f2c5588433912c8eb25fd198cbcf67"
        ],
        [
            "trivial.",
            "VernacExtend",
            "6704630005ea37c1f66f817f0d3cb83967ca08c5"
        ],
        [
            "intuition.",
            "VernacExtend",
            "ebd9388eeb482972743f9cce5cbddbd85ca5bdfd"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma AntisymLSlt : forall A B C : Point, A <> B -> LSlt (Distance A B) (Distance A C) -> ~LSlt (Distance A C) (Distance A B).",
            "VernacStartTheoremProof",
            "dfdd9ef6f9bd84c7e69f23c353fe8945fd1fbd7d"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "assert (H1 := LSltDistinct _ _ _ _ H0).",
            "VernacExtend",
            "83b37a0a0e9015719e027aaf00985d03244ca9fc"
        ],
        [
            "destruct (ExistsHalfLineEquidistant A B A C H H1) as (D, (H2, H3)).",
            "VernacExtend",
            "e326a0f036c2a1f14d7421428d19ea6577dc2ac9"
        ],
        [
            "rewrite <- H3; rewrite <- H3 in H0.",
            "VernacExtend",
            "797a6a1de18e4f844582205493e211d63e817d38"
        ],
        [
            "apply HalfLineAntisymLSlt; auto.",
            "VernacExtend",
            "88291fcaee5ea9a7fec78bc64f284c8d689bb126"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma ClockwiseNotNullSide : forall A B C : Point, Clockwise A B C -> ~Distance B C = LS0.",
            "VernacStartTheoremProof",
            "5cb04c4870d083730f928ec49e429a17d020e426"
        ],
        [
            "red in |- *; intros.",
            "VernacExtend",
            "cac589df0c867c7c46c31951b6da5495d0153212"
        ],
        [
            "assert (H1 := TriangularIneq _ _ _ H).",
            "VernacExtend",
            "f2075078f939f43bacbb6bed004db88d5e9d8da0"
        ],
        [
            "rewrite H0 in H1; rewrite LS0NeutralRight in H1.",
            "VernacExtend",
            "265c988e3a94cba5d03e0e294d94f759bcf4da4d"
        ],
        [
            "elim (AntisymLSlt A C B).",
            "VernacExtend",
            "2aeb5ee9f70dc8a8d9f3695805a601d5c6ae304c"
        ],
        [
            "apply sym_not_eq; apply (ClockwiseDistinctCA _ _ _ H).",
            "VernacExtend",
            "62b0283b91a6117aa11b6eff220f4efd79ce7d7f"
        ],
        [
            "trivial.",
            "VernacExtend",
            "6704630005ea37c1f66f817f0d3cb83967ca08c5"
        ],
        [
            "assert (H2 := TriangularIneq _ _ _ (ClockwiseBCA _ _ _ H)).",
            "VernacExtend",
            "5b9cff0c69245ae0cd03e62dbc38c8330b918b85"
        ],
        [
            "rewrite H0 in H2; rewrite LS0NeutralLeft in H2.",
            "VernacExtend",
            "b6a4d6b2163772558635410bf495ecd544052a9b"
        ],
        [
            "rewrite (DistSym A B); rewrite (DistSym A C); trivial.",
            "VernacExtend",
            "d7a14f60856f37d1ae7c05f194fae51a65c18758"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma DistDistinctNull : forall A B D : Point, Distance A B = LS0 -> D <> A -> A = B.",
            "VernacStartTheoremProof",
            "a9c76f496a91361d79d56d93af4f71dd501a84c2"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "decompose [or] (FourCases D A B).",
            "VernacExtend",
            "4b91ed9544ffebd7c5aca66e31c5760d7886ca15"
        ],
        [
            "elim (ClockwiseNotNullSide _ _ _ H1); trivial.",
            "VernacExtend",
            "1745ff9ffc1e3cad5d15064ae59094748488002b"
        ],
        [
            "elim (ClockwiseNotNullSide _ _ _ (ClockwiseBCA _ _ _ H2)); rewrite DistSym; trivial.",
            "VernacExtend",
            "a9f325fb5c9aa412d09778b22a88d9828b91ebcc"
        ],
        [
            "decompose [or] (FourCases B A D).",
            "VernacExtend",
            "f73604cdde012ef3184d1a65808e813afe82b42a"
        ],
        [
            "elim (ClockwiseNotNullSide _ _ _ (ClockwiseCAB _ _ _ H2)); rewrite DistSym; trivial.",
            "VernacExtend",
            "5c485dfd8169447fc2ebf3f96354fe6f8e355aad"
        ],
        [
            "elim (ClockwiseNotNullSide _ _ _ (ClockwiseCAB _ _ _ H3)); trivial.",
            "VernacExtend",
            "f905dd17700337a4c30acf6b46f8df7f24a8b804"
        ],
        [
            "apply (HalfLineEquidistantEqual D A B H0 H1).",
            "VernacExtend",
            "5cb937273b9efc9cafd3b821dcc464f132b21c00"
        ],
        [
            "rewrite <- (Chasles D A B H1 H2).",
            "VernacExtend",
            "4a31b7044cb8c713ab572bcc52465030ce11c68b"
        ],
        [
            "rewrite H; rewrite LS0NeutralRight; trivial.",
            "VernacExtend",
            "b800e7e97b2162f035a4ec84ee9e33af13fb7129"
        ],
        [
            "assert (H3 : HalfLine D B A).",
            "VernacExtend",
            "24bec9e2bc58bfef7cb750f90a2f8df70812dc02"
        ],
        [
            "generalizeChange.",
            "VernacExtend",
            "d3c977ebf7f2c5588433912c8eb25fd198cbcf67"
        ],
        [
            "assert (H4 : D <> B).",
            "VernacExtend",
            "e2b242fbc654602c0e29a34975d7aa1b53592d59"
        ],
        [
            "canonize; subst.",
            "VernacExtend",
            "7342b070d9443e9cc3fa91ef5a1ac8062e691a13"
        ],
        [
            "destruct (ClockwiseExists B A H0) as (C, H4).",
            "VernacExtend",
            "30fb0130983c0453a9d2f3e917e09a18e2df8adf"
        ],
        [
            "elim (NotClockwiseAAB B C); auto.",
            "VernacExtend",
            "240e6701371d0733b416549e3a63230505ceb3d6"
        ],
        [
            "apply sym_eq; apply (HalfLineEquidistantEqual D B A H4 H3).",
            "VernacExtend",
            "a76f100de900b7afade69c6c690aa2a3ddf2dbbc"
        ],
        [
            "rewrite <- (Chasles D B A H3 H2).",
            "VernacExtend",
            "d22ac7a71a8038f380ca91a969654c139cc37053"
        ],
        [
            "rewrite (DistSym B A); rewrite H; rewrite LS0NeutralRight; trivial.",
            "VernacExtend",
            "d05d9003f2191f327e377966a51c4449b9c736ef"
        ],
        [
            "assert (H2 : A <> B).",
            "VernacExtend",
            "ccce021a8c7e7e215efaf46cb0f5dd53cc726aac"
        ],
        [
            "intro; subst; canonize.",
            "VernacExtend",
            "6608c81c4b3699659e437b584fd3cbab4d9424fc"
        ],
        [
            "destruct (ClockwiseExists B D (sym_not_eq H0)) as (C, H2).",
            "VernacExtend",
            "e29702b906ed461c8e0a674748670fd4e328c290"
        ],
        [
            "elim (NotClockwiseAAB B C); auto.",
            "VernacExtend",
            "240e6701371d0733b416549e3a63230505ceb3d6"
        ],
        [
            "elim NotLSltNullNull.",
            "VernacExtend",
            "8e2b21dbba1d217e9759aeb6b0f750191cc73083"
        ],
        [
            "pattern LS0 at 2 in |- *; rewrite <- H.",
            "VernacExtend",
            "4be9e086c1e360ab65d286623352526efdaf5a2d"
        ],
        [
            "apply NullLSlt; trivial.",
            "VernacExtend",
            "25baaaf779bb05cd4a8e717c941c0a6ec91adbd9"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma DistNull : forall A B, Distance A B = LS0 -> A = B.",
            "VernacStartTheoremProof",
            "b943f17b8dd1b938bcb42cb3e8865118ba33b56d"
        ],
        [
            "intros; destruct (Apart Oo Uu A DistinctOoUu).",
            "VernacExtend",
            "a31df117a59d25c8110e7dbde69506cb93972820"
        ],
        [
            "apply (DistDistinctNull A B Oo); auto.",
            "VernacExtend",
            "088217b92e6fa1a9e01ade6a86a27a5dcc6bfab1"
        ],
        [
            "apply (DistDistinctNull A B Uu); auto.",
            "VernacExtend",
            "9b7dde33e283fb9525370503b46a11ed43f8a393"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma EquiDistantDistinct : forall A B C D : Point, A <> B -> Distance A B = Distance C D -> C <> D.",
            "VernacStartTheoremProof",
            "9864f1a6ff63fa69ee2159cff1a15a4c13f2584a"
        ],
        [
            "intuition; subst.",
            "VernacExtend",
            "4321ede1ef2ce18b467565763256f2f4c8a1cdf0"
        ],
        [
            "elim H; apply DistNull.",
            "VernacExtend",
            "f6b8dfd60dba1f02e7b14f925202869191770447"
        ],
        [
            "rewrite H0; apply NullDist.",
            "VernacExtend",
            "520aae60a2361d771c164907c0173de10c35a6dd"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma BetweenLSlt : forall A B C, (Between A B C) -> LSlt (Distance A B) (Distance A C).",
            "VernacStartTheoremProof",
            "87b13d501341e88d4a0f504842a8a65bdc81fd44"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "apply OrderLSlt; canonize.",
            "VernacExtend",
            "b929a5cb60f72dcc5bcb0c6a0130d62725d4a1b2"
        ],
        [
            "destruct (ClockwiseExists A B H1) as (D, H3).",
            "VernacExtend",
            "dff7d7fd39a19f946b5a622ecbf9861c46a0e102"
        ],
        [
            "elim (ClockwiseDistinctAB B C D); auto.",
            "VernacExtend",
            "1950f612dfec9a5c748a6e7fbd2c07f0c5e7d0e5"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma LSltBetween : forall A B C, A <> B -> HalfLine A B C -> LSlt (Distance A B) (Distance A C) -> (Between A B C).",
            "VernacStartTheoremProof",
            "43acb90c7b8a9917034b18fe2ce99464b50914ce"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "assert (H2 : EquiOriented A B B C /\\ B <> C).",
            "VernacExtend",
            "6bb85be7ed6f869d90e39921c0912d347a3ba07d"
        ],
        [
            "apply (LSltOrder A B C); intuition.",
            "VernacExtend",
            "2c5eca9af491c4af9395ddf9092819f5331eeb6a"
        ],
        [
            "canonize.",
            "VernacExtend",
            "d86154be330fc32ce6876fd84daa5559bf6d4594"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma DistDistinct : forall A B, Distance A B <> LS0 -> A <> B.",
            "VernacStartTheoremProof",
            "4c1b6f429c802c4ebe79b75c9520e7a9d059273c"
        ],
        [
            "intuition.",
            "VernacExtend",
            "ebd9388eeb482972743f9cce5cbddbd85ca5bdfd"
        ],
        [
            "subst; elim H; apply NullDist.",
            "VernacExtend",
            "885c82488c82e104cfedbd12dd7ceec2bab121ec"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma DistinctDist : forall A B, A <> B -> Distance A B <> LS0.",
            "VernacStartTheoremProof",
            "ea30198727552f1294e412befad3065ea97e1a04"
        ],
        [
            "intuition.",
            "VernacExtend",
            "ebd9388eeb482972743f9cce5cbddbd85ca5bdfd"
        ],
        [
            "elim H; apply DistNull; auto.",
            "VernacExtend",
            "a9e91b705581f26c20f22103e73b403e4381d843"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "End METRIC_BASICS.",
            "VernacEndSegment",
            "ea542c301a1154caa0f0b6578265ab8c95e7357b"
        ],
        [
            "Section METRIC_PROPERTIES.",
            "VernacBeginSection",
            "925b4a944e8be1bde94f1778705c30ae1cc34452"
        ],
        [
            "Lemma ChaslesComm : forall A B C : Point, HalfLine A B C -> HalfLine C B A -> LSplus (Distance A B) (Distance B C) = LSplus (Distance B C) (Distance A B).",
            "VernacStartTheoremProof",
            "f1c014158efd33174ca42011bb8e734b872ef700"
        ],
        [
            "intros A B C H H0.",
            "VernacExtend",
            "4cbbc663810e818c40d3a27c82104caff96540bb"
        ],
        [
            "rewrite (Chasles A B C H H0).",
            "VernacExtend",
            "d05cbd6217b65a0d66115559aecef8b77462b619"
        ],
        [
            "rewrite (DistSym B C); rewrite (DistSym A B); rewrite (Chasles C B A H0 H).",
            "VernacExtend",
            "d710ec00ccf6f6377d0632369c4bbb1c069e3de1"
        ],
        [
            "apply DistSym.",
            "VernacExtend",
            "d36413e88ed6b5097906dc85a86534331f10abdf"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma ChaslesAssoc : forall A B C D : Point, HalfLine A B C -> HalfLine C B A -> HalfLine A B D -> HalfLine D B A -> HalfLine B C D -> HalfLine D C B -> HalfLine A C D -> HalfLine D C A -> LSplus (Distance A B) (LSplus (Distance B C) (Distance C D)) = LSplus (LSplus (Distance A B) (Distance B C)) (Distance C D).",
            "VernacStartTheoremProof",
            "c503cc8e1a89c5be6e6a05377cc2b19512991fa1"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "repeat (rewrite Chasles; auto).",
            "VernacExtend",
            "5d0dd0ba6a13a3736b373b7f3c416322f6705abc"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma SSSEqualBD : forall A B C D : Point, Clockwise A B C -> Clockwise A D C -> Distance A B = Distance A D -> Distance B C = Distance D C -> B = D.",
            "VernacStartTheoremProof",
            "06815af848303264462d8823e7edaa36a50dfae8"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "assert (Hab := ClockwiseDistinctAB A B C H).",
            "VernacExtend",
            "2e5faffe75124be03784e6faee4da98c37ef281e"
        ],
        [
            "assert (Hbc := ClockwiseDistinctBC A B C H).",
            "VernacExtend",
            "c0b939a17d1da3d7ea313f493713c034fc4d468c"
        ],
        [
            "setCircle A A B Hab ipattern:(G1) ipattern:(Aab).",
            "VernacExtend",
            "33a1f384f89f23b3163508e7cc1fc20906a871c2"
        ],
        [
            "setCircle C B C Hbc ipattern:(G2) ipattern:(Cbc).",
            "VernacExtend",
            "83d31795e2044a681b4773f85af1226c4ea2fdd1"
        ],
        [
            "setCinterantiC G1 G2 Aab Cbc ipattern:(E) ipattern:(H3) ipattern:(H4) ipattern:(H5) ipattern:(H6).",
            "VernacExtend",
            "fc2a9630b2ada38f7b0e4cb2f337190174c29761"
        ],
        [
            "rewrite (DistSym A C); apply ClockwiseTriangleSpec; apply ClockwiseCAB; auto.",
            "VernacExtend",
            "66e1822c9387617b88937c84eb15825f1e893154"
        ],
        [
            "rewrite <- (H6 B).",
            "VernacExtend",
            "96f6b23a251c4f1c79906b6477a9a224855572e1"
        ],
        [
            "apply H6.",
            "VernacExtend",
            "b0314bbdc776869d305067ca471096a36fa958c1"
        ],
        [
            "intuition.",
            "VernacExtend",
            "ebd9388eeb482972743f9cce5cbddbd85ca5bdfd"
        ],
        [
            "rewrite (DistSym C D); auto.",
            "VernacExtend",
            "5d0d0760541b3452a31381c230374abcbe145d3b"
        ],
        [
            "apply ClockwiseCAB; auto.",
            "VernacExtend",
            "6e3119a5d52181394cf84f0f707999aeb792e694"
        ],
        [
            "intuition.",
            "VernacExtend",
            "ebd9388eeb482972743f9cce5cbddbd85ca5bdfd"
        ],
        [
            "rewrite (DistSym C B); auto.",
            "VernacExtend",
            "10b3ca073d51ff88d8ef428a519f4b507547b816"
        ],
        [
            "apply ClockwiseCAB; auto.",
            "VernacExtend",
            "6e3119a5d52181394cf84f0f707999aeb792e694"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma SSSEqualCD : forall A B C D : Point, Clockwise A B C -> Clockwise A B D -> Distance A C = Distance A D -> Distance B C = Distance B D -> C = D.",
            "VernacStartTheoremProof",
            "6e930541a18be1eed463fb954cc8a5506db60fc4"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "assert (Hac := sym_not_eq (ClockwiseDistinctCA A B C H)).",
            "VernacExtend",
            "a7222af1b06eb92eb79388849016a88ba4ee82c8"
        ],
        [
            "assert (Hbc := ClockwiseDistinctBC A B C H).",
            "VernacExtend",
            "c0b939a17d1da3d7ea313f493713c034fc4d468c"
        ],
        [
            "setCircle A A C Hac ipattern:(G1) ipattern:(Aac).",
            "VernacExtend",
            "cab94a7f91948da8236a5cc9c7c1449434d41f86"
        ],
        [
            "setCircle B B C Hbc ipattern:(G2) ipattern:(Bbc).",
            "VernacExtend",
            "d64c1a6dc209959a14111128b50c4b684e6a1b67"
        ],
        [
            "setCinterantiC G2 G1 Bbc Aac ipattern:(E) ipattern:(H3) ipattern:(H4) ipattern:(H5) ipattern:(H6).",
            "VernacExtend",
            "ed1890b257508b0be5b899a267b59af070cb3013"
        ],
        [
            "rewrite (DistSym B A); rewrite (DistSym A C); apply ClockwiseTriangleSpec; auto.",
            "VernacExtend",
            "e853aae569921d97ca40de6e063bb3e39dde63d2"
        ],
        [
            "rewrite <- (H6 C).",
            "VernacExtend",
            "793fe8a326d712ccdd4c834187db751bbf6c5db8"
        ],
        [
            "apply H6.",
            "VernacExtend",
            "b0314bbdc776869d305067ca471096a36fa958c1"
        ],
        [
            "intuition.",
            "VernacExtend",
            "ebd9388eeb482972743f9cce5cbddbd85ca5bdfd"
        ],
        [
            "intuition.",
            "VernacExtend",
            "ebd9388eeb482972743f9cce5cbddbd85ca5bdfd"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "End METRIC_PROPERTIES.",
            "VernacEndSegment",
            "93e1ff376056add9dd444cc22d6fed4acc910c85"
        ]
    ],
    "proofs": [
        {
            "name": "NullDist",
            "line_nb": 3,
            "steps": [
                {
                    "command": [
                        "intro; unfold LS0 in |- *; apply DistAA.",
                        "VernacExtend",
                        "8af0bee0fcf24e193e6bd2813b7d42cbb95e95a9"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "NullLSlt",
            "line_nb": 6,
            "steps": [
                {
                    "command": [
                        "intros; rewrite <- (NullDist A).",
                        "VernacExtend",
                        "6bbda0459fc1acc46b09c95a4b94f50901f95744"
                    ]
                },
                {
                    "command": [
                        "apply OrderLSlt; auto.",
                        "VernacExtend",
                        "e3b3487cd2bacdbf3174adf6953d60400b0b2057"
                    ]
                },
                {
                    "command": [
                        "canonize.",
                        "VernacExtend",
                        "d86154be330fc32ce6876fd84daa5559bf6d4594"
                    ]
                },
                {
                    "command": [
                        "elim (NotClockwiseAAB _ _ H0).",
                        "VernacExtend",
                        "68c52b1a6a7fbf61a59bfeb2e4eed0f14ce4dff0"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "EquiOrientedNotEquiOriented",
            "line_nb": 12,
            "steps": [
                {
                    "command": [
                        "canonize.",
                        "VernacExtend",
                        "d86154be330fc32ce6876fd84daa5559bf6d4594"
                    ]
                },
                {
                    "command": [
                        "destruct (ClockwiseExists A B H) as (E, H2).",
                        "VernacExtend",
                        "f11cb2200cab597b41859c70433c6e628d44bbdf"
                    ]
                },
                {
                    "command": [
                        "elim (ClockwiseNotClockwise C D E); auto.",
                        "VernacExtend",
                        "ee97b3e7688eb3ec9810ff613da1a53a63dabf8a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "LSltDistinct",
            "line_nb": 17,
            "steps": [
                {
                    "command": [
                        "red in |- *; intros; subst.",
                        "VernacExtend",
                        "cf259c1df4194603478187e900cb076555bc63f1"
                    ]
                },
                {
                    "command": [
                        "rewrite (DistAA D A) in H.",
                        "VernacExtend",
                        "11462add2f03e6dbf79130f6706f646fdc0e9d6b"
                    ]
                },
                {
                    "command": [
                        "destruct (LSltOrder A B A).",
                        "VernacExtend",
                        "38393ac504d83f48a59bc9835ed709108d5067c5"
                    ]
                },
                {
                    "command": [
                        "right; canonize.",
                        "VernacExtend",
                        "8f3520962f09586f1de57c3f52868ca71fa95e16"
                    ]
                },
                {
                    "command": [
                        "elim (NotClockwiseAAB A x); auto.",
                        "VernacExtend",
                        "729101371bf154989d379ec429dfa5ac3e737037"
                    ]
                },
                {
                    "command": [
                        "trivial.",
                        "VernacExtend",
                        "6704630005ea37c1f66f817f0d3cb83967ca08c5"
                    ]
                },
                {
                    "command": [
                        "elim (EquiOrientedNotEquiOriented A B B A (sym_not_eq H1) H0).",
                        "VernacExtend",
                        "c506dc122f0da890a324f64ea4731315b447f32f"
                    ]
                },
                {
                    "command": [
                        "canonize.",
                        "VernacExtend",
                        "d86154be330fc32ce6876fd84daa5559bf6d4594"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "LSltNull",
            "line_nb": 27,
            "steps": [
                {
                    "command": [
                        "red in |- *; intros; subst.",
                        "VernacExtend",
                        "cf259c1df4194603478187e900cb076555bc63f1"
                    ]
                },
                {
                    "command": [
                        "rewrite <- (NullDist B) in H.",
                        "VernacExtend",
                        "6e79639e7811acca65de90ba34768c7de1b59385"
                    ]
                },
                {
                    "command": [
                        "destruct (LSltOrder B B B).",
                        "VernacExtend",
                        "9b8be1eff7c58d015a91cddb18b00424a3b13922"
                    ]
                },
                {
                    "command": [
                        "canonize.",
                        "VernacExtend",
                        "d86154be330fc32ce6876fd84daa5559bf6d4594"
                    ]
                },
                {
                    "command": [
                        "trivial.",
                        "VernacExtend",
                        "6704630005ea37c1f66f817f0d3cb83967ca08c5"
                    ]
                },
                {
                    "command": [
                        "auto.",
                        "VernacExtend",
                        "1f09da0addd069b3b65326f8c71967acc1e985af"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "NotLSltNullNull",
            "line_nb": 35,
            "steps": [
                {
                    "command": [
                        "change (~ LSlt LS0 (Distance Oo Oo)) in |- *.",
                        "VernacExtend",
                        "2a1fdff6e63685e27e739233ef116362aa282fd0"
                    ]
                },
                {
                    "command": [
                        "intro.",
                        "VernacExtend",
                        "3999be354c758ba0d1866e0fcc78a7288779a224"
                    ]
                },
                {
                    "command": [
                        "elim (LSltNull _ _ H).",
                        "VernacExtend",
                        "3900b03f8bfee6dba971b6a74d6f6aa416e606e3"
                    ]
                },
                {
                    "command": [
                        "trivial.",
                        "VernacExtend",
                        "6704630005ea37c1f66f817f0d3cb83967ca08c5"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "LS0NeutralRight",
            "line_nb": 41,
            "steps": [
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "rewrite <- (NullDist B); rewrite Chasles; canonize.",
                        "VernacExtend",
                        "3e01c94700415e5f7f22cd7d6e4b2692a7745aea"
                    ]
                },
                {
                    "command": [
                        "elim (NotClockwiseAAB B x); trivial.",
                        "VernacExtend",
                        "11efd0ba6b7a92540d25dc5bde33b0ff0e417c8d"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "LS0NeutralLeft",
            "line_nb": 46,
            "steps": [
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "rewrite <- (NullDist A); rewrite Chasles; canonize.",
                        "VernacExtend",
                        "1ac04e111fdc3ad56ea7b4657e44535d21fb34fd"
                    ]
                },
                {
                    "command": [
                        "elim (NotClockwiseAAB A x); trivial.",
                        "VernacExtend",
                        "aca4c1f5a7fec8f2b7d3af4f27cf4721e2be5e6d"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "EquiOrientedNotEquiOrientedABC",
            "line_nb": 51,
            "steps": [
                {
                    "command": [
                        "canonize.",
                        "VernacExtend",
                        "d86154be330fc32ce6876fd84daa5559bf6d4594"
                    ]
                },
                {
                    "command": [
                        "destruct (ClockwiseExists A B H) as (E, H2).",
                        "VernacExtend",
                        "f11cb2200cab597b41859c70433c6e628d44bbdf"
                    ]
                },
                {
                    "command": [
                        "decompose [or] (FourCases A B C).",
                        "VernacExtend",
                        "3c9a09cca478a7141f637d497cbd066bdce43262"
                    ]
                },
                {
                    "command": [
                        "elim (NotClockwiseBAA C B); auto.",
                        "VernacExtend",
                        "b24d14d17801e9f0f26a4f26dbd1f4377067e148"
                    ]
                },
                {
                    "command": [
                        "elim (NotClockwiseBAA B C); apply H1; apply ClockwiseBCA; trivial.",
                        "VernacExtend",
                        "c5495e375e815eb1c232220dc4557a81229e2ad4"
                    ]
                },
                {
                    "command": [
                        "canonize.",
                        "VernacExtend",
                        "d86154be330fc32ce6876fd84daa5559bf6d4594"
                    ]
                },
                {
                    "command": [
                        "elim (ClockwiseNotClockwise B C E); auto.",
                        "VernacExtend",
                        "edb65f2957451ca9731600cb88211dd5446d0127"
                    ]
                },
                {
                    "command": [
                        "generalizeChangeSense.",
                        "VernacExtend",
                        "be975c77c59224ac5239b36f960f98e48421bb54"
                    ]
                },
                {
                    "command": [
                        "elim (ClockwiseNotClockwise B C E); auto.",
                        "VernacExtend",
                        "edb65f2957451ca9731600cb88211dd5446d0127"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "HalfLineAntisymLSlt",
            "line_nb": 62,
            "steps": [
                {
                    "command": [
                        "red in |- *; intros.",
                        "VernacExtend",
                        "cac589df0c867c7c46c31951b6da5495d0153212"
                    ]
                },
                {
                    "command": [
                        "assert (H3 : HalfLine A B C \\/ HalfLine A C B).",
                        "VernacExtend",
                        "e87d94ea2c5c4cb5ecfac5d28f13b8caad1699de"
                    ]
                },
                {
                    "command": [
                        "intuition.",
                        "VernacExtend",
                        "ebd9388eeb482972743f9cce5cbddbd85ca5bdfd"
                    ]
                },
                {
                    "command": [
                        "destruct (LSltOrder _ _ _ H3 H1).",
                        "VernacExtend",
                        "47266cb4939ba0cfd10a28315ae550ae43a5b69e"
                    ]
                },
                {
                    "command": [
                        "elim (EquiOrientedNotEquiOrientedABC _ _ _ H H4).",
                        "VernacExtend",
                        "813f6e73946b0392cfcf91c48d548975e9c6fb35"
                    ]
                },
                {
                    "command": [
                        "assert (EquiOriented A C C B /\\ C <> B).",
                        "VernacExtend",
                        "9028cdd064b745ac8270d83924d162f094c20eb0"
                    ]
                },
                {
                    "command": [
                        "apply LSltOrder.",
                        "VernacExtend",
                        "ac3f975abcdff72944f3c872eb24020531993795"
                    ]
                },
                {
                    "command": [
                        "generalizeChange.",
                        "VernacExtend",
                        "d3c977ebf7f2c5588433912c8eb25fd198cbcf67"
                    ]
                },
                {
                    "command": [
                        "trivial.",
                        "VernacExtend",
                        "6704630005ea37c1f66f817f0d3cb83967ca08c5"
                    ]
                },
                {
                    "command": [
                        "intuition.",
                        "VernacExtend",
                        "ebd9388eeb482972743f9cce5cbddbd85ca5bdfd"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "AntisymLSlt",
            "line_nb": 74,
            "steps": [
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "assert (H1 := LSltDistinct _ _ _ _ H0).",
                        "VernacExtend",
                        "83b37a0a0e9015719e027aaf00985d03244ca9fc"
                    ]
                },
                {
                    "command": [
                        "destruct (ExistsHalfLineEquidistant A B A C H H1) as (D, (H2, H3)).",
                        "VernacExtend",
                        "e326a0f036c2a1f14d7421428d19ea6577dc2ac9"
                    ]
                },
                {
                    "command": [
                        "rewrite <- H3; rewrite <- H3 in H0.",
                        "VernacExtend",
                        "797a6a1de18e4f844582205493e211d63e817d38"
                    ]
                },
                {
                    "command": [
                        "apply HalfLineAntisymLSlt; auto.",
                        "VernacExtend",
                        "88291fcaee5ea9a7fec78bc64f284c8d689bb126"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "ClockwiseNotNullSide",
            "line_nb": 81,
            "steps": [
                {
                    "command": [
                        "red in |- *; intros.",
                        "VernacExtend",
                        "cac589df0c867c7c46c31951b6da5495d0153212"
                    ]
                },
                {
                    "command": [
                        "assert (H1 := TriangularIneq _ _ _ H).",
                        "VernacExtend",
                        "f2075078f939f43bacbb6bed004db88d5e9d8da0"
                    ]
                },
                {
                    "command": [
                        "rewrite H0 in H1; rewrite LS0NeutralRight in H1.",
                        "VernacExtend",
                        "265c988e3a94cba5d03e0e294d94f759bcf4da4d"
                    ]
                },
                {
                    "command": [
                        "elim (AntisymLSlt A C B).",
                        "VernacExtend",
                        "2aeb5ee9f70dc8a8d9f3695805a601d5c6ae304c"
                    ]
                },
                {
                    "command": [
                        "apply sym_not_eq; apply (ClockwiseDistinctCA _ _ _ H).",
                        "VernacExtend",
                        "62b0283b91a6117aa11b6eff220f4efd79ce7d7f"
                    ]
                },
                {
                    "command": [
                        "trivial.",
                        "VernacExtend",
                        "6704630005ea37c1f66f817f0d3cb83967ca08c5"
                    ]
                },
                {
                    "command": [
                        "assert (H2 := TriangularIneq _ _ _ (ClockwiseBCA _ _ _ H)).",
                        "VernacExtend",
                        "5b9cff0c69245ae0cd03e62dbc38c8330b918b85"
                    ]
                },
                {
                    "command": [
                        "rewrite H0 in H2; rewrite LS0NeutralLeft in H2.",
                        "VernacExtend",
                        "b6a4d6b2163772558635410bf495ecd544052a9b"
                    ]
                },
                {
                    "command": [
                        "rewrite (DistSym A B); rewrite (DistSym A C); trivial.",
                        "VernacExtend",
                        "d7a14f60856f37d1ae7c05f194fae51a65c18758"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "DistDistinctNull",
            "line_nb": 92,
            "steps": [
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "decompose [or] (FourCases D A B).",
                        "VernacExtend",
                        "4b91ed9544ffebd7c5aca66e31c5760d7886ca15"
                    ]
                },
                {
                    "command": [
                        "elim (ClockwiseNotNullSide _ _ _ H1); trivial.",
                        "VernacExtend",
                        "1745ff9ffc1e3cad5d15064ae59094748488002b"
                    ]
                },
                {
                    "command": [
                        "elim (ClockwiseNotNullSide _ _ _ (ClockwiseBCA _ _ _ H2)); rewrite DistSym; trivial.",
                        "VernacExtend",
                        "a9f325fb5c9aa412d09778b22a88d9828b91ebcc"
                    ]
                },
                {
                    "command": [
                        "decompose [or] (FourCases B A D).",
                        "VernacExtend",
                        "f73604cdde012ef3184d1a65808e813afe82b42a"
                    ]
                },
                {
                    "command": [
                        "elim (ClockwiseNotNullSide _ _ _ (ClockwiseCAB _ _ _ H2)); rewrite DistSym; trivial.",
                        "VernacExtend",
                        "5c485dfd8169447fc2ebf3f96354fe6f8e355aad"
                    ]
                },
                {
                    "command": [
                        "elim (ClockwiseNotNullSide _ _ _ (ClockwiseCAB _ _ _ H3)); trivial.",
                        "VernacExtend",
                        "f905dd17700337a4c30acf6b46f8df7f24a8b804"
                    ]
                },
                {
                    "command": [
                        "apply (HalfLineEquidistantEqual D A B H0 H1).",
                        "VernacExtend",
                        "5cb937273b9efc9cafd3b821dcc464f132b21c00"
                    ]
                },
                {
                    "command": [
                        "rewrite <- (Chasles D A B H1 H2).",
                        "VernacExtend",
                        "4a31b7044cb8c713ab572bcc52465030ce11c68b"
                    ]
                },
                {
                    "command": [
                        "rewrite H; rewrite LS0NeutralRight; trivial.",
                        "VernacExtend",
                        "b800e7e97b2162f035a4ec84ee9e33af13fb7129"
                    ]
                },
                {
                    "command": [
                        "assert (H3 : HalfLine D B A).",
                        "VernacExtend",
                        "24bec9e2bc58bfef7cb750f90a2f8df70812dc02"
                    ]
                },
                {
                    "command": [
                        "generalizeChange.",
                        "VernacExtend",
                        "d3c977ebf7f2c5588433912c8eb25fd198cbcf67"
                    ]
                },
                {
                    "command": [
                        "assert (H4 : D <> B).",
                        "VernacExtend",
                        "e2b242fbc654602c0e29a34975d7aa1b53592d59"
                    ]
                },
                {
                    "command": [
                        "canonize; subst.",
                        "VernacExtend",
                        "7342b070d9443e9cc3fa91ef5a1ac8062e691a13"
                    ]
                },
                {
                    "command": [
                        "destruct (ClockwiseExists B A H0) as (C, H4).",
                        "VernacExtend",
                        "30fb0130983c0453a9d2f3e917e09a18e2df8adf"
                    ]
                },
                {
                    "command": [
                        "elim (NotClockwiseAAB B C); auto.",
                        "VernacExtend",
                        "240e6701371d0733b416549e3a63230505ceb3d6"
                    ]
                },
                {
                    "command": [
                        "apply sym_eq; apply (HalfLineEquidistantEqual D B A H4 H3).",
                        "VernacExtend",
                        "a76f100de900b7afade69c6c690aa2a3ddf2dbbc"
                    ]
                },
                {
                    "command": [
                        "rewrite <- (Chasles D B A H3 H2).",
                        "VernacExtend",
                        "d22ac7a71a8038f380ca91a969654c139cc37053"
                    ]
                },
                {
                    "command": [
                        "rewrite (DistSym B A); rewrite H; rewrite LS0NeutralRight; trivial.",
                        "VernacExtend",
                        "d05d9003f2191f327e377966a51c4449b9c736ef"
                    ]
                },
                {
                    "command": [
                        "assert (H2 : A <> B).",
                        "VernacExtend",
                        "ccce021a8c7e7e215efaf46cb0f5dd53cc726aac"
                    ]
                },
                {
                    "command": [
                        "intro; subst; canonize.",
                        "VernacExtend",
                        "6608c81c4b3699659e437b584fd3cbab4d9424fc"
                    ]
                },
                {
                    "command": [
                        "destruct (ClockwiseExists B D (sym_not_eq H0)) as (C, H2).",
                        "VernacExtend",
                        "e29702b906ed461c8e0a674748670fd4e328c290"
                    ]
                },
                {
                    "command": [
                        "elim (NotClockwiseAAB B C); auto.",
                        "VernacExtend",
                        "240e6701371d0733b416549e3a63230505ceb3d6"
                    ]
                },
                {
                    "command": [
                        "elim NotLSltNullNull.",
                        "VernacExtend",
                        "8e2b21dbba1d217e9759aeb6b0f750191cc73083"
                    ]
                },
                {
                    "command": [
                        "pattern LS0 at 2 in |- *; rewrite <- H.",
                        "VernacExtend",
                        "4be9e086c1e360ab65d286623352526efdaf5a2d"
                    ]
                },
                {
                    "command": [
                        "apply NullLSlt; trivial.",
                        "VernacExtend",
                        "25baaaf779bb05cd4a8e717c941c0a6ec91adbd9"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "DistNull",
            "line_nb": 120,
            "steps": [
                {
                    "command": [
                        "intros; destruct (Apart Oo Uu A DistinctOoUu).",
                        "VernacExtend",
                        "a31df117a59d25c8110e7dbde69506cb93972820"
                    ]
                },
                {
                    "command": [
                        "apply (DistDistinctNull A B Oo); auto.",
                        "VernacExtend",
                        "088217b92e6fa1a9e01ade6a86a27a5dcc6bfab1"
                    ]
                },
                {
                    "command": [
                        "apply (DistDistinctNull A B Uu); auto.",
                        "VernacExtend",
                        "9b7dde33e283fb9525370503b46a11ed43f8a393"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "EquiDistantDistinct",
            "line_nb": 125,
            "steps": [
                {
                    "command": [
                        "intuition; subst.",
                        "VernacExtend",
                        "4321ede1ef2ce18b467565763256f2f4c8a1cdf0"
                    ]
                },
                {
                    "command": [
                        "elim H; apply DistNull.",
                        "VernacExtend",
                        "f6b8dfd60dba1f02e7b14f925202869191770447"
                    ]
                },
                {
                    "command": [
                        "rewrite H0; apply NullDist.",
                        "VernacExtend",
                        "520aae60a2361d771c164907c0173de10c35a6dd"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "BetweenLSlt",
            "line_nb": 130,
            "steps": [
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "apply OrderLSlt; canonize.",
                        "VernacExtend",
                        "b929a5cb60f72dcc5bcb0c6a0130d62725d4a1b2"
                    ]
                },
                {
                    "command": [
                        "destruct (ClockwiseExists A B H1) as (D, H3).",
                        "VernacExtend",
                        "dff7d7fd39a19f946b5a622ecbf9861c46a0e102"
                    ]
                },
                {
                    "command": [
                        "elim (ClockwiseDistinctAB B C D); auto.",
                        "VernacExtend",
                        "1950f612dfec9a5c748a6e7fbd2c07f0c5e7d0e5"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "LSltBetween",
            "line_nb": 136,
            "steps": [
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "assert (H2 : EquiOriented A B B C /\\ B <> C).",
                        "VernacExtend",
                        "6bb85be7ed6f869d90e39921c0912d347a3ba07d"
                    ]
                },
                {
                    "command": [
                        "apply (LSltOrder A B C); intuition.",
                        "VernacExtend",
                        "2c5eca9af491c4af9395ddf9092819f5331eeb6a"
                    ]
                },
                {
                    "command": [
                        "canonize.",
                        "VernacExtend",
                        "d86154be330fc32ce6876fd84daa5559bf6d4594"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "DistDistinct",
            "line_nb": 142,
            "steps": [
                {
                    "command": [
                        "intuition.",
                        "VernacExtend",
                        "ebd9388eeb482972743f9cce5cbddbd85ca5bdfd"
                    ]
                },
                {
                    "command": [
                        "subst; elim H; apply NullDist.",
                        "VernacExtend",
                        "885c82488c82e104cfedbd12dd7ceec2bab121ec"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "DistinctDist",
            "line_nb": 146,
            "steps": [
                {
                    "command": [
                        "intuition.",
                        "VernacExtend",
                        "ebd9388eeb482972743f9cce5cbddbd85ca5bdfd"
                    ]
                },
                {
                    "command": [
                        "elim H; apply DistNull; auto.",
                        "VernacExtend",
                        "a9e91b705581f26c20f22103e73b403e4381d843"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "ChaslesComm",
            "line_nb": 152,
            "steps": [
                {
                    "command": [
                        "intros A B C H H0.",
                        "VernacExtend",
                        "4cbbc663810e818c40d3a27c82104caff96540bb"
                    ]
                },
                {
                    "command": [
                        "rewrite (Chasles A B C H H0).",
                        "VernacExtend",
                        "d05cbd6217b65a0d66115559aecef8b77462b619"
                    ]
                },
                {
                    "command": [
                        "rewrite (DistSym B C); rewrite (DistSym A B); rewrite (Chasles C B A H0 H).",
                        "VernacExtend",
                        "d710ec00ccf6f6377d0632369c4bbb1c069e3de1"
                    ]
                },
                {
                    "command": [
                        "apply DistSym.",
                        "VernacExtend",
                        "d36413e88ed6b5097906dc85a86534331f10abdf"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "ChaslesAssoc",
            "line_nb": 158,
            "steps": [
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "repeat (rewrite Chasles; auto).",
                        "VernacExtend",
                        "5d0dd0ba6a13a3736b373b7f3c416322f6705abc"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "SSSEqualBD",
            "line_nb": 162,
            "steps": [
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "assert (Hab := ClockwiseDistinctAB A B C H).",
                        "VernacExtend",
                        "2e5faffe75124be03784e6faee4da98c37ef281e"
                    ]
                },
                {
                    "command": [
                        "assert (Hbc := ClockwiseDistinctBC A B C H).",
                        "VernacExtend",
                        "c0b939a17d1da3d7ea313f493713c034fc4d468c"
                    ]
                },
                {
                    "command": [
                        "setCircle A A B Hab ipattern:(G1) ipattern:(Aab).",
                        "VernacExtend",
                        "33a1f384f89f23b3163508e7cc1fc20906a871c2"
                    ]
                },
                {
                    "command": [
                        "setCircle C B C Hbc ipattern:(G2) ipattern:(Cbc).",
                        "VernacExtend",
                        "83d31795e2044a681b4773f85af1226c4ea2fdd1"
                    ]
                },
                {
                    "command": [
                        "setCinterantiC G1 G2 Aab Cbc ipattern:(E) ipattern:(H3) ipattern:(H4) ipattern:(H5) ipattern:(H6).",
                        "VernacExtend",
                        "fc2a9630b2ada38f7b0e4cb2f337190174c29761"
                    ]
                },
                {
                    "command": [
                        "rewrite (DistSym A C); apply ClockwiseTriangleSpec; apply ClockwiseCAB; auto.",
                        "VernacExtend",
                        "66e1822c9387617b88937c84eb15825f1e893154"
                    ]
                },
                {
                    "command": [
                        "rewrite <- (H6 B).",
                        "VernacExtend",
                        "96f6b23a251c4f1c79906b6477a9a224855572e1"
                    ]
                },
                {
                    "command": [
                        "apply H6.",
                        "VernacExtend",
                        "b0314bbdc776869d305067ca471096a36fa958c1"
                    ]
                },
                {
                    "command": [
                        "intuition.",
                        "VernacExtend",
                        "ebd9388eeb482972743f9cce5cbddbd85ca5bdfd"
                    ]
                },
                {
                    "command": [
                        "rewrite (DistSym C D); auto.",
                        "VernacExtend",
                        "5d0d0760541b3452a31381c230374abcbe145d3b"
                    ]
                },
                {
                    "command": [
                        "apply ClockwiseCAB; auto.",
                        "VernacExtend",
                        "6e3119a5d52181394cf84f0f707999aeb792e694"
                    ]
                },
                {
                    "command": [
                        "intuition.",
                        "VernacExtend",
                        "ebd9388eeb482972743f9cce5cbddbd85ca5bdfd"
                    ]
                },
                {
                    "command": [
                        "rewrite (DistSym C B); auto.",
                        "VernacExtend",
                        "10b3ca073d51ff88d8ef428a519f4b507547b816"
                    ]
                },
                {
                    "command": [
                        "apply ClockwiseCAB; auto.",
                        "VernacExtend",
                        "6e3119a5d52181394cf84f0f707999aeb792e694"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "SSSEqualCD",
            "line_nb": 179,
            "steps": [
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "assert (Hac := sym_not_eq (ClockwiseDistinctCA A B C H)).",
                        "VernacExtend",
                        "a7222af1b06eb92eb79388849016a88ba4ee82c8"
                    ]
                },
                {
                    "command": [
                        "assert (Hbc := ClockwiseDistinctBC A B C H).",
                        "VernacExtend",
                        "c0b939a17d1da3d7ea313f493713c034fc4d468c"
                    ]
                },
                {
                    "command": [
                        "setCircle A A C Hac ipattern:(G1) ipattern:(Aac).",
                        "VernacExtend",
                        "cab94a7f91948da8236a5cc9c7c1449434d41f86"
                    ]
                },
                {
                    "command": [
                        "setCircle B B C Hbc ipattern:(G2) ipattern:(Bbc).",
                        "VernacExtend",
                        "d64c1a6dc209959a14111128b50c4b684e6a1b67"
                    ]
                },
                {
                    "command": [
                        "setCinterantiC G2 G1 Bbc Aac ipattern:(E) ipattern:(H3) ipattern:(H4) ipattern:(H5) ipattern:(H6).",
                        "VernacExtend",
                        "ed1890b257508b0be5b899a267b59af070cb3013"
                    ]
                },
                {
                    "command": [
                        "rewrite (DistSym B A); rewrite (DistSym A C); apply ClockwiseTriangleSpec; auto.",
                        "VernacExtend",
                        "e853aae569921d97ca40de6e063bb3e39dde63d2"
                    ]
                },
                {
                    "command": [
                        "rewrite <- (H6 C).",
                        "VernacExtend",
                        "793fe8a326d712ccdd4c834187db751bbf6c5db8"
                    ]
                },
                {
                    "command": [
                        "apply H6.",
                        "VernacExtend",
                        "b0314bbdc776869d305067ca471096a36fa958c1"
                    ]
                },
                {
                    "command": [
                        "intuition.",
                        "VernacExtend",
                        "ebd9388eeb482972743f9cce5cbddbd85ca5bdfd"
                    ]
                },
                {
                    "command": [
                        "intuition.",
                        "VernacExtend",
                        "ebd9388eeb482972743f9cce5cbddbd85ca5bdfd"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        }
    ]
}