{
    "filename": "D3_Triangle_Prop.v",
    "coq_project": "ruler-compass-geometry",
    "vernac_cmds": [
        [
            "Require Export D2_Axe.",
            "VernacRequire",
            "91e8d22d10d9396fee3ee50ba179f4eaa8bb5c88"
        ],
        [
            "Section TRIANGLE_PROPERTIES.",
            "VernacBeginSection",
            "4df8b65cebe9ccadc2e97bea522ee5998888820f"
        ],
        [
            "Lemma TriangleSpecComm : forall A B C : Point, A <> B -> B <> C -> C <> A -> TriangleSpec (Distance A B) (Distance B C) (Distance C A) -> TriangleSpec (Distance A B) (Distance C A) (Distance B C) .",
            "VernacStartTheoremProof",
            "e5925d72c1aa781fea5899ec88dc25dfaae7b2e6"
        ],
        [
            "substDistance.",
            "VernacExtend",
            "fb09166857cccad968cb434b9f772bf8bf603032"
        ],
        [
            "rewrite (LSplusComm C A B C); auto.",
            "VernacExtend",
            "93b8bcf3f9985343c1d7100fefae0e85068e5751"
        ],
        [
            "rewrite (LSplusComm B C A B); auto.",
            "VernacExtend",
            "9ad5ecf3b6973c55a76959a36629ac4713c5c7fc"
        ],
        [
            "rewrite (LSplusComm A B C A); auto.",
            "VernacExtend",
            "a6cbc2d663311fbdb6ccbba986b4c0c8228a5b07"
        ],
        [
            "intuition.",
            "VernacExtend",
            "ebd9388eeb482972743f9cce5cbddbd85ca5bdfd"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma EqualTriangleClockwise : forall A B C D E : Point, Clockwise A B C -> Distance A B = Distance D E -> {F : Point | Clockwise D E F /\\ Distance B C = Distance E F /\\ Distance C A = Distance F D}.",
            "VernacStartTheoremProof",
            "10f3634a02c3b1a455638d7610de86f0822e1037"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "assert (H1 := ClockwiseDistinctBC A B C H).",
            "VernacExtend",
            "1fafa935d9eb7840a9fdfc9543bbbeb73611ae4f"
        ],
        [
            "assert (H2 := ClockwiseDistinctCA A B C H).",
            "VernacExtend",
            "f4aafc4f05a24da1c5fefaa8427ad46c012c47cf"
        ],
        [
            "setCircle E B C H1 ipattern:(F1) ipattern:(G1).",
            "VernacExtend",
            "fb35c5a93b3dee7e38d678252c5ccf24cf40c35b"
        ],
        [
            "setCircle D C A H2 ipattern:(F2) ipattern:(G2).",
            "VernacExtend",
            "b90452e14141191d46f0945990a47d09edbf29cb"
        ],
        [
            "setCinterantiC F1 F2 G1 G2 ipattern:(F) ipattern:(H3) ipattern:(H4) ipattern:(H5) ipattern:(H6).",
            "VernacExtend",
            "00510003ad3d5ac2ea90b585a1773d8ac709c653"
        ],
        [
            "rewrite (DistSym E D); rewrite <- H0.",
            "VernacExtend",
            "f8789e8728c53f2f495318439480e287cac208d5"
        ],
        [
            "apply ClockwiseTriangleSpec; auto.",
            "VernacExtend",
            "d78af5db48b65746099221598260589ecb8f970b"
        ],
        [
            "exists F; canonize.",
            "VernacExtend",
            "abcff3f684b159e101105454813860991c13698a"
        ],
        [
            "rewrite (DistSym F D); auto.",
            "VernacExtend",
            "6bb960a38163398645f41f58a72829a60de7b5e9"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma EqualTriangleAntiClockwise : forall A B C D E : Point, Clockwise A B C -> Distance A B = Distance D E -> {F : Point | Clockwise D F E /\\ Distance B C = Distance E F /\\ Distance C A = Distance F D}.",
            "VernacStartTheoremProof",
            "0f3fbfaf6e16ae519575c4fd3ae135697c0809bf"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "assert (H1 := ClockwiseDistinctBC A B C H).",
            "VernacExtend",
            "1fafa935d9eb7840a9fdfc9543bbbeb73611ae4f"
        ],
        [
            "assert (H2 := ClockwiseDistinctCA A B C H).",
            "VernacExtend",
            "f4aafc4f05a24da1c5fefaa8427ad46c012c47cf"
        ],
        [
            "setCircle E B C H1 ipattern:(F1) ipattern:(G1).",
            "VernacExtend",
            "fb35c5a93b3dee7e38d678252c5ccf24cf40c35b"
        ],
        [
            "setCircle D C A H2 ipattern:(F2) ipattern:(G2).",
            "VernacExtend",
            "b90452e14141191d46f0945990a47d09edbf29cb"
        ],
        [
            "setCinterclockC F1 F2 G1 G2 ipattern:(F) ipattern:(H3) ipattern:(H4) ipattern:(H5) ipattern:(H6).",
            "VernacExtend",
            "f1de22d531d618bba3465579ab2f0fb99f70f361"
        ],
        [
            "rewrite (DistSym E D); rewrite <- H0.",
            "VernacExtend",
            "f8789e8728c53f2f495318439480e287cac208d5"
        ],
        [
            "apply ClockwiseTriangleSpec; auto.",
            "VernacExtend",
            "d78af5db48b65746099221598260589ecb8f970b"
        ],
        [
            "exists F; canonize.",
            "VernacExtend",
            "abcff3f684b159e101105454813860991c13698a"
        ],
        [
            "autoClockwise.",
            "VernacExtend",
            "9409e85b86446941015e1da6ca2353051468a0c2"
        ],
        [
            "rewrite (DistSym F D); auto.",
            "VernacExtend",
            "6bb960a38163398645f41f58a72829a60de7b5e9"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma ExistsCongruentStrictTriangle : forall A B C D E : Point, Clockwise A B C -> Distance A B = Distance D E -> {F : Point | CongruentStrictTriangles A B C D E F /\\ Clockwise D E F}.",
            "VernacStartTheoremProof",
            "e399c73192277d1cb2cc2bdb3cb3995f467c8d5c"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "destruct (EqualTriangleClockwise A B C D E H H0) as (F, (H1, (H2, H3))).",
            "VernacExtend",
            "db0482d868ca0b41ab5b2246871b1effcfd16346"
        ],
        [
            "exists F; repeat split; auto.",
            "VernacExtend",
            "7540daf180607ed2fc411595a4659be48bf7432f"
        ],
        [
            "apply ClockwiseNotCollinear; trivial.",
            "VernacExtend",
            "2e1d87f8f589454a458fd1f6b206cfbaad9561cc"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "End TRIANGLE_PROPERTIES.",
            "VernacEndSegment",
            "bb2f100253dbf918224690cd60039009fd96755f"
        ]
    ],
    "proofs": [
        {
            "name": "TriangleSpecComm",
            "line_nb": 2,
            "steps": [
                {
                    "command": [
                        "substDistance.",
                        "VernacExtend",
                        "fb09166857cccad968cb434b9f772bf8bf603032"
                    ]
                },
                {
                    "command": [
                        "rewrite (LSplusComm C A B C); auto.",
                        "VernacExtend",
                        "93b8bcf3f9985343c1d7100fefae0e85068e5751"
                    ]
                },
                {
                    "command": [
                        "rewrite (LSplusComm B C A B); auto.",
                        "VernacExtend",
                        "9ad5ecf3b6973c55a76959a36629ac4713c5c7fc"
                    ]
                },
                {
                    "command": [
                        "rewrite (LSplusComm A B C A); auto.",
                        "VernacExtend",
                        "a6cbc2d663311fbdb6ccbba986b4c0c8228a5b07"
                    ]
                },
                {
                    "command": [
                        "intuition.",
                        "VernacExtend",
                        "ebd9388eeb482972743f9cce5cbddbd85ca5bdfd"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "EqualTriangleClockwise",
            "line_nb": 9,
            "steps": [
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "assert (H1 := ClockwiseDistinctBC A B C H).",
                        "VernacExtend",
                        "1fafa935d9eb7840a9fdfc9543bbbeb73611ae4f"
                    ]
                },
                {
                    "command": [
                        "assert (H2 := ClockwiseDistinctCA A B C H).",
                        "VernacExtend",
                        "f4aafc4f05a24da1c5fefaa8427ad46c012c47cf"
                    ]
                },
                {
                    "command": [
                        "setCircle E B C H1 ipattern:(F1) ipattern:(G1).",
                        "VernacExtend",
                        "fb35c5a93b3dee7e38d678252c5ccf24cf40c35b"
                    ]
                },
                {
                    "command": [
                        "setCircle D C A H2 ipattern:(F2) ipattern:(G2).",
                        "VernacExtend",
                        "b90452e14141191d46f0945990a47d09edbf29cb"
                    ]
                },
                {
                    "command": [
                        "setCinterantiC F1 F2 G1 G2 ipattern:(F) ipattern:(H3) ipattern:(H4) ipattern:(H5) ipattern:(H6).",
                        "VernacExtend",
                        "00510003ad3d5ac2ea90b585a1773d8ac709c653"
                    ]
                },
                {
                    "command": [
                        "rewrite (DistSym E D); rewrite <- H0.",
                        "VernacExtend",
                        "f8789e8728c53f2f495318439480e287cac208d5"
                    ]
                },
                {
                    "command": [
                        "apply ClockwiseTriangleSpec; auto.",
                        "VernacExtend",
                        "d78af5db48b65746099221598260589ecb8f970b"
                    ]
                },
                {
                    "command": [
                        "exists F; canonize.",
                        "VernacExtend",
                        "abcff3f684b159e101105454813860991c13698a"
                    ]
                },
                {
                    "command": [
                        "rewrite (DistSym F D); auto.",
                        "VernacExtend",
                        "6bb960a38163398645f41f58a72829a60de7b5e9"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "EqualTriangleAntiClockwise",
            "line_nb": 21,
            "steps": [
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "assert (H1 := ClockwiseDistinctBC A B C H).",
                        "VernacExtend",
                        "1fafa935d9eb7840a9fdfc9543bbbeb73611ae4f"
                    ]
                },
                {
                    "command": [
                        "assert (H2 := ClockwiseDistinctCA A B C H).",
                        "VernacExtend",
                        "f4aafc4f05a24da1c5fefaa8427ad46c012c47cf"
                    ]
                },
                {
                    "command": [
                        "setCircle E B C H1 ipattern:(F1) ipattern:(G1).",
                        "VernacExtend",
                        "fb35c5a93b3dee7e38d678252c5ccf24cf40c35b"
                    ]
                },
                {
                    "command": [
                        "setCircle D C A H2 ipattern:(F2) ipattern:(G2).",
                        "VernacExtend",
                        "b90452e14141191d46f0945990a47d09edbf29cb"
                    ]
                },
                {
                    "command": [
                        "setCinterclockC F1 F2 G1 G2 ipattern:(F) ipattern:(H3) ipattern:(H4) ipattern:(H5) ipattern:(H6).",
                        "VernacExtend",
                        "f1de22d531d618bba3465579ab2f0fb99f70f361"
                    ]
                },
                {
                    "command": [
                        "rewrite (DistSym E D); rewrite <- H0.",
                        "VernacExtend",
                        "f8789e8728c53f2f495318439480e287cac208d5"
                    ]
                },
                {
                    "command": [
                        "apply ClockwiseTriangleSpec; auto.",
                        "VernacExtend",
                        "d78af5db48b65746099221598260589ecb8f970b"
                    ]
                },
                {
                    "command": [
                        "exists F; canonize.",
                        "VernacExtend",
                        "abcff3f684b159e101105454813860991c13698a"
                    ]
                },
                {
                    "command": [
                        "autoClockwise.",
                        "VernacExtend",
                        "9409e85b86446941015e1da6ca2353051468a0c2"
                    ]
                },
                {
                    "command": [
                        "rewrite (DistSym F D); auto.",
                        "VernacExtend",
                        "6bb960a38163398645f41f58a72829a60de7b5e9"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "ExistsCongruentStrictTriangle",
            "line_nb": 34,
            "steps": [
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "destruct (EqualTriangleClockwise A B C D E H H0) as (F, (H1, (H2, H3))).",
                        "VernacExtend",
                        "db0482d868ca0b41ab5b2246871b1effcfd16346"
                    ]
                },
                {
                    "command": [
                        "exists F; repeat split; auto.",
                        "VernacExtend",
                        "7540daf180607ed2fc411595a4659be48bf7432f"
                    ]
                },
                {
                    "command": [
                        "apply ClockwiseNotCollinear; trivial.",
                        "VernacExtend",
                        "2e1d87f8f589454a458fd1f6b206cfbaad9561cc"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        }
    ]
}