{
    "filename": "C9_Triangles_Emboites.v",
    "coq_project": "ruler-compass-geometry",
    "vernac_cmds": [
        [
            "Require Export C8_DroitesConfondues.",
            "VernacRequire",
            "8f08abe77562991a767d6a41dda8843cb199bb4e"
        ],
        [
            "Section EMBEDDED_TRIANGLES.",
            "VernacBeginSection",
            "099e04fe2ef935b400e74f2a86cc38a087650404"
        ],
        [
            "Lemma BetweenClockwiseAMC : forall A B C M : Point, Clockwise A B C -> Between A M B -> Clockwise A M C.",
            "VernacStartTheoremProof",
            "57dc0816580b67050e40bac0c83943353c2af2f1"
        ],
        [
            "intros A B C M H H0.",
            "VernacExtend",
            "e298c31f45b6af65b8a7e0616fb4be7122b7980e"
        ],
        [
            "assert (H1 := BetweenHalfLine _ _ _ H0).",
            "VernacExtend",
            "77554f693335b803855c88b375380b5549ac9559"
        ],
        [
            "generalizeChange.",
            "VernacExtend",
            "d3c977ebf7f2c5588433912c8eb25fd198cbcf67"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma BetweenClockwiseMBC : forall A B C M : Point, Clockwise A B C -> Between A M B -> Clockwise M B C.",
            "VernacStartTheoremProof",
            "9ce7331dec63d0c18ddcad80b860c2f1a6ab25ac"
        ],
        [
            "intros A B C M H H0.",
            "VernacExtend",
            "e298c31f45b6af65b8a7e0616fb4be7122b7980e"
        ],
        [
            "assert (H1 := BetweenHalfLine _ _ _ H0).",
            "VernacExtend",
            "77554f693335b803855c88b375380b5549ac9559"
        ],
        [
            "generalizeChange.",
            "VernacExtend",
            "d3c977ebf7f2c5588433912c8eb25fd198cbcf67"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma ClockwiseBetweenAMC : forall A B C M : Point, Between A M B -> Clockwise A M C -> Clockwise A B C.",
            "VernacStartTheoremProof",
            "ab738932c9c1886d67cc21835c76f37048f3b8be"
        ],
        [
            "intros A B C M H H0.",
            "VernacExtend",
            "e298c31f45b6af65b8a7e0616fb4be7122b7980e"
        ],
        [
            "assert (H1 := BetweenHalfLine _ _ _ H).",
            "VernacExtend",
            "c08df03ebe176f4659655363a8a32bbeba402b67"
        ],
        [
            "generalizeChange.",
            "VernacExtend",
            "d3c977ebf7f2c5588433912c8eb25fd198cbcf67"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma ClockwiseBetweenMBC : forall A B C M : Point, Between A M B -> Clockwise M B C -> Clockwise A B C.",
            "VernacStartTheoremProof",
            "a6e43e093ee31106d38210f4cebb694f7579d2e7"
        ],
        [
            "intros A B C M H H0.",
            "VernacExtend",
            "e298c31f45b6af65b8a7e0616fb4be7122b7980e"
        ],
        [
            "assert (H1 := BetweenHalfLine _ _ _ (BetweenSym _ _ _ H)).",
            "VernacExtend",
            "780a812e2344d43c3837208963a31edec1e3133d"
        ],
        [
            "generalizeChange.",
            "VernacExtend",
            "d3c977ebf7f2c5588433912c8eb25fd198cbcf67"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma TriangleAMN : forall A B C M N : Point, Clockwise A B C -> Between A M B -> Between A N C -> Clockwise A M N.",
            "VernacStartTheoremProof",
            "baf07134057a063bfdc041eda72c97d5aa479291"
        ],
        [
            "intros A B C M N H H0 H1.",
            "VernacExtend",
            "29b68fd9e741c5c65dd38689af6cbed17fb5297a"
        ],
        [
            "apply (BetweenClockwiseAMC A B N M).",
            "VernacExtend",
            "abc2879cade4ed6668bfe2d53fc15aa78fd1c5af"
        ],
        [
            "apply ClockwiseBCA; apply (BetweenClockwiseMBC C A B N).",
            "VernacExtend",
            "15f3d1b5525d05297100f513e2cca06dbac1614f"
        ],
        [
            "autoClockwise.",
            "VernacExtend",
            "9409e85b86446941015e1da6ca2353051468a0c2"
        ],
        [
            "apply BetweenSym; trivial.",
            "VernacExtend",
            "4b64e2e034d8805eeb392d09c64cc0f02b3100e4"
        ],
        [
            "trivial.",
            "VernacExtend",
            "6704630005ea37c1f66f817f0d3cb83967ca08c5"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma TriangleBNM : forall A B C M N : Point, Clockwise A B C -> Between A M B -> Between A N C -> Clockwise B N M.",
            "VernacStartTheoremProof",
            "65829dfe09e25723f12951e60d90e56b14f9e006"
        ],
        [
            "intros A B C M N H H0 H1.",
            "VernacExtend",
            "29b68fd9e741c5c65dd38689af6cbed17fb5297a"
        ],
        [
            "apply ClockwiseBCA.",
            "VernacExtend",
            "e7539adf2c8cd07fa59fd559f04a69ba2d94aa0b"
        ],
        [
            "assert (H2 := TriangleAMN A B C M N H H0 H1).",
            "VernacExtend",
            "47bd201b6ecb63168b47acefaa39f0d1ac5299af"
        ],
        [
            "canonize.",
            "VernacExtend",
            "d86154be330fc32ce6876fd84daa5559bf6d4594"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma TriangleCNM : forall A B C M N : Point, Clockwise A B C -> Between A M B -> Between A N C -> Clockwise C N M.",
            "VernacStartTheoremProof",
            "4b4f1ebafc5dd1f6d80b9d54d18ba529e27459b3"
        ],
        [
            "intros A B C M N H H0 H1.",
            "VernacExtend",
            "29b68fd9e741c5c65dd38689af6cbed17fb5297a"
        ],
        [
            "assert (H2 := TriangleAMN A B C M N H H0 H1).",
            "VernacExtend",
            "47bd201b6ecb63168b47acefaa39f0d1ac5299af"
        ],
        [
            "apply (BetweenClockwiseAMC C A M N).",
            "VernacExtend",
            "080e976aabb1306ce4b11e8e691b338979f19189"
        ],
        [
            "apply (ClockwiseBetweenMBC C A M N).",
            "VernacExtend",
            "a395a58ead8f286fe64724cdc61e0ac75b3a0725"
        ],
        [
            "apply BetweenSym; trivial.",
            "VernacExtend",
            "4b64e2e034d8805eeb392d09c64cc0f02b3100e4"
        ],
        [
            "autoClockwise.",
            "VernacExtend",
            "9409e85b86446941015e1da6ca2353051468a0c2"
        ],
        [
            "apply BetweenSym; trivial.",
            "VernacExtend",
            "4b64e2e034d8805eeb392d09c64cc0f02b3100e4"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma BetweenTriangle : forall A B C D M : Point, Clockwise A C D -> Clockwise B C D -> Between A M B -> Clockwise M C D.",
            "VernacStartTheoremProof",
            "3730aaec3edb9175351f2c06200534d59802f9de"
        ],
        [
            "intros A B C D M H H0 H1.",
            "VernacExtend",
            "4da43c91c419452c3dcae5aeb1d46ad184e003f3"
        ],
        [
            "decompose [or] (FourCases C D M).",
            "VernacExtend",
            "160d04d9a02d1a1a4448319d1c4e9c196bb5973e"
        ],
        [
            "autoClockwise.",
            "VernacExtend",
            "9409e85b86446941015e1da6ca2353051468a0c2"
        ],
        [
            "destruct (FourPointsIntersectionPoint C D A M) as (I, (H4, H5)).",
            "VernacExtend",
            "2edf699c39161d6cb40521a0f908516ccac327c3"
        ],
        [
            "autoClockwise.",
            "VernacExtend",
            "9409e85b86446941015e1da6ca2353051468a0c2"
        ],
        [
            "autoClockwise.",
            "VernacExtend",
            "9409e85b86446941015e1da6ca2353051468a0c2"
        ],
        [
            "destruct (FourPointsIntersectionPoint C D B M) as (J, (H6, H7)).",
            "VernacExtend",
            "4aab2e7365a3890e6ba2869b86ee9320877edec1"
        ],
        [
            "autoClockwise.",
            "VernacExtend",
            "9409e85b86446941015e1da6ca2353051468a0c2"
        ],
        [
            "autoClockwise.",
            "VernacExtend",
            "9409e85b86446941015e1da6ca2353051468a0c2"
        ],
        [
            "elim (ClockwiseNotCollinear _ _ _ H3).",
            "VernacExtend",
            "3fea5b2eda65c24c5fa64353e91c109559715185"
        ],
        [
            "assert (I <> J).",
            "VernacExtend",
            "70f92e740dc7b38b37925bd57fff5032c4fe643f"
        ],
        [
            "intro; subst.",
            "VernacExtend",
            "9021e22274b6259ff513a190b208a4a3aa9b2ede"
        ],
        [
            "destruct (ClockwiseExists M A (sym_not_eq (BetweenDistinctAB _ _ _ H1))) as (K, H8).",
            "VernacExtend",
            "650f319ce0702566d43d8b008302e02ba53ae764"
        ],
        [
            "elim (ClockwiseNotClockwise _ _ _ H8).",
            "VernacExtend",
            "e85e842786a55f205e342cb6d4e2b1a75959ddf5"
        ],
        [
            "apply (ClockwiseBetweenMBC A M K J H5).",
            "VernacExtend",
            "d3b39c18d76f878f10ec3c335deaa7da6718e96a"
        ],
        [
            "apply (BetweenClockwiseMBC B M K J).",
            "VernacExtend",
            "c1738984f23e4032ebae5ec2be1cf91e1dfbf816"
        ],
        [
            "assert (H9 := BetweenSym _ _ _ H1).",
            "VernacExtend",
            "941937ea1b896a337a6a3b51af910ced81244ac1"
        ],
        [
            "apply (BetweenClockwiseAMC B A K M).",
            "VernacExtend",
            "6fbdf7e6d4c50eb95fb6d7a1f435e09cda298bd6"
        ],
        [
            "apply (ClockwiseBetweenMBC B A K M H9 H8).",
            "VernacExtend",
            "b6e434e3d96424f4bcbfd42121b2370e55658c60"
        ],
        [
            "trivial.",
            "VernacExtend",
            "6704630005ea37c1f66f817f0d3cb83967ca08c5"
        ],
        [
            "trivial.",
            "VernacExtend",
            "6704630005ea37c1f66f817f0d3cb83967ca08c5"
        ],
        [
            "assert (H8 := ClockwiseDistinctBC _ _ _ H).",
            "VernacExtend",
            "591ae53ed3cf9c598a5a68aedbc1e1ed1f90cbe9"
        ],
        [
            "destruct (MarkChange C D I J H8 H2 H4 H6) as (H9, H10).",
            "VernacExtend",
            "5cadc6a994b06917ce253be208d4a06b77e23a14"
        ],
        [
            "destruct (MarkChange A B I J) as (H11, H12).",
            "VernacExtend",
            "0daefc3d7414ff05b44cac2669b0704c0fe60bfd"
        ],
        [
            "assert (H11 := BetweenDistinctCA _ _ _ H1); auto.",
            "VernacExtend",
            "0a9cd79a3706ed7bad18eb96a0dffbd89af88685"
        ],
        [
            "trivial.",
            "VernacExtend",
            "6704630005ea37c1f66f817f0d3cb83967ca08c5"
        ],
        [
            "apply (CollinearTrans A M B I).",
            "VernacExtend",
            "97df012a53e283ed924c7fce7ff471f9c0a00d53"
        ],
        [
            "autoDistinct.",
            "VernacExtend",
            "1dccbc4e736bbf8115e8a9e3ef867678fdeebbe8"
        ],
        [
            "apply BetweenCollinear; trivial.",
            "VernacExtend",
            "e42c164cb23079a269a6d2a9cd84872d27110663"
        ],
        [
            "apply CollinearACB; apply BetweenCollinear; trivial.",
            "VernacExtend",
            "56b62222e905a4a733b26a4a70163e17df6aa313"
        ],
        [
            "apply CollinearBAC; apply (CollinearTrans B M A J).",
            "VernacExtend",
            "2bc893c10e415344b39e4a10bc7b4687afdf146e"
        ],
        [
            "assert (H11 := BetweenDistinctBC _ _ _ H1); auto.",
            "VernacExtend",
            "0fb8da957ae1e3d8980ead14f1e5a2073f65aa47"
        ],
        [
            "apply CollinearCBA; apply BetweenCollinear; trivial.",
            "VernacExtend",
            "f626fd4e41c7c0042466883541bc76d5b0f7fa94"
        ],
        [
            "apply CollinearACB; apply BetweenCollinear; trivial.",
            "VernacExtend",
            "56b62222e905a4a733b26a4a70163e17df6aa313"
        ],
        [
            "apply CollinearBAC; apply H10.",
            "VernacExtend",
            "3a4f9fb7a5614c863058f962b1c4b9d87e44c1ac"
        ],
        [
            "apply H11; change (Collinear A B M) in |- *.",
            "VernacExtend",
            "e9037677d19f8f7dc97b989b77a176cecef2c280"
        ],
        [
            "apply CollinearACB; apply BetweenCollinear; trivial.",
            "VernacExtend",
            "56b62222e905a4a733b26a4a70163e17df6aa313"
        ],
        [
            "elim (ClockwiseNotClockwise C D B).",
            "VernacExtend",
            "c33038bae4cf038aa4ea6cd7d98d9bd2c1413c05"
        ],
        [
            "autoClockwise.",
            "VernacExtend",
            "9409e85b86446941015e1da6ca2353051468a0c2"
        ],
        [
            "assert (Clockwise M C B).",
            "VernacExtend",
            "b9d9fb3615325d4c8b303139a63327bbe9f0627d"
        ],
        [
            "assert (Clockwise A C M).",
            "VernacExtend",
            "07671c0820fc15cb0ab71b2af8079933f48e4756"
        ],
        [
            "canonize.",
            "VernacExtend",
            "d86154be330fc32ce6876fd84daa5559bf6d4594"
        ],
        [
            "apply ClockwiseCAB; apply H2; autoClockwise.",
            "VernacExtend",
            "9a23b2bf53c869555be619dbcb0cc5d572e2e71c"
        ],
        [
            "apply ClockwiseBCA; apply (BetweenClockwiseAMC B A C M).",
            "VernacExtend",
            "2298e6c3219bd28601b87a27be7a930d82aca536"
        ],
        [
            "apply (ClockwiseBetweenMBC B A C M).",
            "VernacExtend",
            "dda617a3263bd023c6a4e93981855dc9102d868a"
        ],
        [
            "apply BetweenSym; trivial.",
            "VernacExtend",
            "4b64e2e034d8805eeb392d09c64cc0f02b3100e4"
        ],
        [
            "autoClockwise.",
            "VernacExtend",
            "9409e85b86446941015e1da6ca2353051468a0c2"
        ],
        [
            "apply BetweenSym; trivial.",
            "VernacExtend",
            "4b64e2e034d8805eeb392d09c64cc0f02b3100e4"
        ],
        [
            "generalizeChangeSide.",
            "VernacExtend",
            "5e228b6b7c592e98c7b8e296efd481fe42ece523"
        ],
        [
            "apply H1.",
            "VernacExtend",
            "3fcc9345bbf6ea218ca825a16c0f27912de9bd67"
        ],
        [
            "autoDistinct.",
            "VernacExtend",
            "1dccbc4e736bbf8115e8a9e3ef867678fdeebbe8"
        ],
        [
            "trivial.",
            "VernacExtend",
            "6704630005ea37c1f66f817f0d3cb83967ca08c5"
        ],
        [
            "elim (ClockwiseNotClockwise C D B).",
            "VernacExtend",
            "c33038bae4cf038aa4ea6cd7d98d9bd2c1413c05"
        ],
        [
            "autoClockwise.",
            "VernacExtend",
            "9409e85b86446941015e1da6ca2353051468a0c2"
        ],
        [
            "assert (Clockwise M D A).",
            "VernacExtend",
            "7de36c7447afae6414429fe0c97998cace7c9136"
        ],
        [
            "generalizeChangeSense.",
            "VernacExtend",
            "be975c77c59224ac5239b36f960f98e48421bb54"
        ],
        [
            "apply H1; autoClockwise.",
            "VernacExtend",
            "bf1077bd8ac86ced5cd2d752eb9b4a483d6b6e78"
        ],
        [
            "assert (Clockwise D M B).",
            "VernacExtend",
            "4f34943e657eb88c6073504238c8d6708de43803"
        ],
        [
            "apply ClockwiseCAB; apply (BetweenClockwiseMBC A B D M).",
            "VernacExtend",
            "e0cf49d129b747fd8cda2ce68458eebac9d27986"
        ],
        [
            "apply (ClockwiseBetweenAMC A B D M H1); autoClockwise.",
            "VernacExtend",
            "3bf9e7b7c2a1327e9af781aba7ef3bf6458df830"
        ],
        [
            "trivial.",
            "VernacExtend",
            "6704630005ea37c1f66f817f0d3cb83967ca08c5"
        ],
        [
            "generalizeChange.",
            "VernacExtend",
            "d3c977ebf7f2c5588433912c8eb25fd198cbcf67"
        ],
        [
            "apply H9.",
            "VernacExtend",
            "d0479838914cfca7017024564d1663cd6466cb01"
        ],
        [
            "autoDistinct.",
            "VernacExtend",
            "1dccbc4e736bbf8115e8a9e3ef867678fdeebbe8"
        ],
        [
            "trivial.",
            "VernacExtend",
            "6704630005ea37c1f66f817f0d3cb83967ca08c5"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma TriangleMNP : forall A B C M N P : Point, Clockwise A B C -> Between A M B -> Between B N C -> Between C P A -> Clockwise M N P.",
            "VernacStartTheoremProof",
            "fdf4a1e851fe2df1cdae3c9e0ebcadf9e13a8ccc"
        ],
        [
            "intros A B C M N P H H0 H1 H2.",
            "VernacExtend",
            "35b3c9b1efecf4b6a0273e565d791eae41f48da5"
        ],
        [
            "apply (BetweenTriangle A B N P M).",
            "VernacExtend",
            "63a4a838576b5b7a713f7a4e39051d4939bf72c2"
        ],
        [
            "apply (TriangleBNM C A B P N).",
            "VernacExtend",
            "24b83e921ce2b5626343024a78b180b2cbabee7d"
        ],
        [
            "autoClockwise.",
            "VernacExtend",
            "9409e85b86446941015e1da6ca2353051468a0c2"
        ],
        [
            "trivial.",
            "VernacExtend",
            "6704630005ea37c1f66f817f0d3cb83967ca08c5"
        ],
        [
            "apply BetweenSym; trivial.",
            "VernacExtend",
            "4b64e2e034d8805eeb392d09c64cc0f02b3100e4"
        ],
        [
            "apply (TriangleCNM C A B P N).",
            "VernacExtend",
            "c53501e29640d9d5be169c5ee35f7438f11ddd79"
        ],
        [
            "autoClockwise.",
            "VernacExtend",
            "9409e85b86446941015e1da6ca2353051468a0c2"
        ],
        [
            "trivial.",
            "VernacExtend",
            "6704630005ea37c1f66f817f0d3cb83967ca08c5"
        ],
        [
            "apply BetweenSym; trivial.",
            "VernacExtend",
            "4b64e2e034d8805eeb392d09c64cc0f02b3100e4"
        ],
        [
            "trivial.",
            "VernacExtend",
            "6704630005ea37c1f66f817f0d3cb83967ca08c5"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma ClockwiseBetween : forall A B C D : Point, Clockwise A B D -> Clockwise B C D -> Collinear A B C -> Between A B C.",
            "VernacStartTheoremProof",
            "a029749aa95fc81dc4ffb9e83002e8265934b626"
        ],
        [
            "intros; apply HalfLineBetween.",
            "VernacExtend",
            "d9f7f4eed1420ecbd9527a6cce79b7d9ae73d2e2"
        ],
        [
            "autoDistinct.",
            "VernacExtend",
            "1dccbc4e736bbf8115e8a9e3ef867678fdeebbe8"
        ],
        [
            "autoDistinct.",
            "VernacExtend",
            "1dccbc4e736bbf8115e8a9e3ef867678fdeebbe8"
        ],
        [
            "destruct (CollinearHalfLine _ _ _ H1).",
            "VernacExtend",
            "fe1787e610939a37cbe62f6d7d726b45e9290a5c"
        ],
        [
            "trivial.",
            "VernacExtend",
            "6704630005ea37c1f66f817f0d3cb83967ca08c5"
        ],
        [
            "elim (ClockwiseNotClockwise _ _ _ H); generalizeChange.",
            "VernacExtend",
            "3673e708c616c1ae4e7d3001c9bc265e3ed02818"
        ],
        [
            "apply H6.",
            "VernacExtend",
            "b0314bbdc776869d305067ca471096a36fa958c1"
        ],
        [
            "autoDistinct.",
            "VernacExtend",
            "1dccbc4e736bbf8115e8a9e3ef867678fdeebbe8"
        ],
        [
            "trivial.",
            "VernacExtend",
            "6704630005ea37c1f66f817f0d3cb83967ca08c5"
        ],
        [
            "destruct (CollinearHalfLine _ _ _ (CollinearCBA _ _ _ H1)).",
            "VernacExtend",
            "f10a9b6abf3e0e379fb3bc91fee2402c3b7d0f68"
        ],
        [
            "trivial.",
            "VernacExtend",
            "6704630005ea37c1f66f817f0d3cb83967ca08c5"
        ],
        [
            "elim (ClockwiseNotClockwise _ _ _ H); canonize.",
            "VernacExtend",
            "3d5158fbcbaa10e67fec4115601e2b76c2caa353"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "End EMBEDDED_TRIANGLES.",
            "VernacEndSegment",
            "afb7e09c46afdb3208119c9264808aff9b6ddc03"
        ]
    ],
    "proofs": [
        {
            "name": "BetweenClockwiseAMC",
            "line_nb": 2,
            "steps": [
                {
                    "command": [
                        "intros A B C M H H0.",
                        "VernacExtend",
                        "e298c31f45b6af65b8a7e0616fb4be7122b7980e"
                    ]
                },
                {
                    "command": [
                        "assert (H1 := BetweenHalfLine _ _ _ H0).",
                        "VernacExtend",
                        "77554f693335b803855c88b375380b5549ac9559"
                    ]
                },
                {
                    "command": [
                        "generalizeChange.",
                        "VernacExtend",
                        "d3c977ebf7f2c5588433912c8eb25fd198cbcf67"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "BetweenClockwiseMBC",
            "line_nb": 7,
            "steps": [
                {
                    "command": [
                        "intros A B C M H H0.",
                        "VernacExtend",
                        "e298c31f45b6af65b8a7e0616fb4be7122b7980e"
                    ]
                },
                {
                    "command": [
                        "assert (H1 := BetweenHalfLine _ _ _ H0).",
                        "VernacExtend",
                        "77554f693335b803855c88b375380b5549ac9559"
                    ]
                },
                {
                    "command": [
                        "generalizeChange.",
                        "VernacExtend",
                        "d3c977ebf7f2c5588433912c8eb25fd198cbcf67"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "ClockwiseBetweenAMC",
            "line_nb": 12,
            "steps": [
                {
                    "command": [
                        "intros A B C M H H0.",
                        "VernacExtend",
                        "e298c31f45b6af65b8a7e0616fb4be7122b7980e"
                    ]
                },
                {
                    "command": [
                        "assert (H1 := BetweenHalfLine _ _ _ H).",
                        "VernacExtend",
                        "c08df03ebe176f4659655363a8a32bbeba402b67"
                    ]
                },
                {
                    "command": [
                        "generalizeChange.",
                        "VernacExtend",
                        "d3c977ebf7f2c5588433912c8eb25fd198cbcf67"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "ClockwiseBetweenMBC",
            "line_nb": 17,
            "steps": [
                {
                    "command": [
                        "intros A B C M H H0.",
                        "VernacExtend",
                        "e298c31f45b6af65b8a7e0616fb4be7122b7980e"
                    ]
                },
                {
                    "command": [
                        "assert (H1 := BetweenHalfLine _ _ _ (BetweenSym _ _ _ H)).",
                        "VernacExtend",
                        "780a812e2344d43c3837208963a31edec1e3133d"
                    ]
                },
                {
                    "command": [
                        "generalizeChange.",
                        "VernacExtend",
                        "d3c977ebf7f2c5588433912c8eb25fd198cbcf67"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "TriangleAMN",
            "line_nb": 22,
            "steps": [
                {
                    "command": [
                        "intros A B C M N H H0 H1.",
                        "VernacExtend",
                        "29b68fd9e741c5c65dd38689af6cbed17fb5297a"
                    ]
                },
                {
                    "command": [
                        "apply (BetweenClockwiseAMC A B N M).",
                        "VernacExtend",
                        "abc2879cade4ed6668bfe2d53fc15aa78fd1c5af"
                    ]
                },
                {
                    "command": [
                        "apply ClockwiseBCA; apply (BetweenClockwiseMBC C A B N).",
                        "VernacExtend",
                        "15f3d1b5525d05297100f513e2cca06dbac1614f"
                    ]
                },
                {
                    "command": [
                        "autoClockwise.",
                        "VernacExtend",
                        "9409e85b86446941015e1da6ca2353051468a0c2"
                    ]
                },
                {
                    "command": [
                        "apply BetweenSym; trivial.",
                        "VernacExtend",
                        "4b64e2e034d8805eeb392d09c64cc0f02b3100e4"
                    ]
                },
                {
                    "command": [
                        "trivial.",
                        "VernacExtend",
                        "6704630005ea37c1f66f817f0d3cb83967ca08c5"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "TriangleBNM",
            "line_nb": 30,
            "steps": [
                {
                    "command": [
                        "intros A B C M N H H0 H1.",
                        "VernacExtend",
                        "29b68fd9e741c5c65dd38689af6cbed17fb5297a"
                    ]
                },
                {
                    "command": [
                        "apply ClockwiseBCA.",
                        "VernacExtend",
                        "e7539adf2c8cd07fa59fd559f04a69ba2d94aa0b"
                    ]
                },
                {
                    "command": [
                        "assert (H2 := TriangleAMN A B C M N H H0 H1).",
                        "VernacExtend",
                        "47bd201b6ecb63168b47acefaa39f0d1ac5299af"
                    ]
                },
                {
                    "command": [
                        "canonize.",
                        "VernacExtend",
                        "d86154be330fc32ce6876fd84daa5559bf6d4594"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "TriangleCNM",
            "line_nb": 36,
            "steps": [
                {
                    "command": [
                        "intros A B C M N H H0 H1.",
                        "VernacExtend",
                        "29b68fd9e741c5c65dd38689af6cbed17fb5297a"
                    ]
                },
                {
                    "command": [
                        "assert (H2 := TriangleAMN A B C M N H H0 H1).",
                        "VernacExtend",
                        "47bd201b6ecb63168b47acefaa39f0d1ac5299af"
                    ]
                },
                {
                    "command": [
                        "apply (BetweenClockwiseAMC C A M N).",
                        "VernacExtend",
                        "080e976aabb1306ce4b11e8e691b338979f19189"
                    ]
                },
                {
                    "command": [
                        "apply (ClockwiseBetweenMBC C A M N).",
                        "VernacExtend",
                        "a395a58ead8f286fe64724cdc61e0ac75b3a0725"
                    ]
                },
                {
                    "command": [
                        "apply BetweenSym; trivial.",
                        "VernacExtend",
                        "4b64e2e034d8805eeb392d09c64cc0f02b3100e4"
                    ]
                },
                {
                    "command": [
                        "autoClockwise.",
                        "VernacExtend",
                        "9409e85b86446941015e1da6ca2353051468a0c2"
                    ]
                },
                {
                    "command": [
                        "apply BetweenSym; trivial.",
                        "VernacExtend",
                        "4b64e2e034d8805eeb392d09c64cc0f02b3100e4"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "BetweenTriangle",
            "line_nb": 45,
            "steps": [
                {
                    "command": [
                        "intros A B C D M H H0 H1.",
                        "VernacExtend",
                        "4da43c91c419452c3dcae5aeb1d46ad184e003f3"
                    ]
                },
                {
                    "command": [
                        "decompose [or] (FourCases C D M).",
                        "VernacExtend",
                        "160d04d9a02d1a1a4448319d1c4e9c196bb5973e"
                    ]
                },
                {
                    "command": [
                        "autoClockwise.",
                        "VernacExtend",
                        "9409e85b86446941015e1da6ca2353051468a0c2"
                    ]
                },
                {
                    "command": [
                        "destruct (FourPointsIntersectionPoint C D A M) as (I, (H4, H5)).",
                        "VernacExtend",
                        "2edf699c39161d6cb40521a0f908516ccac327c3"
                    ]
                },
                {
                    "command": [
                        "autoClockwise.",
                        "VernacExtend",
                        "9409e85b86446941015e1da6ca2353051468a0c2"
                    ]
                },
                {
                    "command": [
                        "autoClockwise.",
                        "VernacExtend",
                        "9409e85b86446941015e1da6ca2353051468a0c2"
                    ]
                },
                {
                    "command": [
                        "destruct (FourPointsIntersectionPoint C D B M) as (J, (H6, H7)).",
                        "VernacExtend",
                        "4aab2e7365a3890e6ba2869b86ee9320877edec1"
                    ]
                },
                {
                    "command": [
                        "autoClockwise.",
                        "VernacExtend",
                        "9409e85b86446941015e1da6ca2353051468a0c2"
                    ]
                },
                {
                    "command": [
                        "autoClockwise.",
                        "VernacExtend",
                        "9409e85b86446941015e1da6ca2353051468a0c2"
                    ]
                },
                {
                    "command": [
                        "elim (ClockwiseNotCollinear _ _ _ H3).",
                        "VernacExtend",
                        "3fea5b2eda65c24c5fa64353e91c109559715185"
                    ]
                },
                {
                    "command": [
                        "assert (I <> J).",
                        "VernacExtend",
                        "70f92e740dc7b38b37925bd57fff5032c4fe643f"
                    ]
                },
                {
                    "command": [
                        "intro; subst.",
                        "VernacExtend",
                        "9021e22274b6259ff513a190b208a4a3aa9b2ede"
                    ]
                },
                {
                    "command": [
                        "destruct (ClockwiseExists M A (sym_not_eq (BetweenDistinctAB _ _ _ H1))) as (K, H8).",
                        "VernacExtend",
                        "650f319ce0702566d43d8b008302e02ba53ae764"
                    ]
                },
                {
                    "command": [
                        "elim (ClockwiseNotClockwise _ _ _ H8).",
                        "VernacExtend",
                        "e85e842786a55f205e342cb6d4e2b1a75959ddf5"
                    ]
                },
                {
                    "command": [
                        "apply (ClockwiseBetweenMBC A M K J H5).",
                        "VernacExtend",
                        "d3b39c18d76f878f10ec3c335deaa7da6718e96a"
                    ]
                },
                {
                    "command": [
                        "apply (BetweenClockwiseMBC B M K J).",
                        "VernacExtend",
                        "c1738984f23e4032ebae5ec2be1cf91e1dfbf816"
                    ]
                },
                {
                    "command": [
                        "assert (H9 := BetweenSym _ _ _ H1).",
                        "VernacExtend",
                        "941937ea1b896a337a6a3b51af910ced81244ac1"
                    ]
                },
                {
                    "command": [
                        "apply (BetweenClockwiseAMC B A K M).",
                        "VernacExtend",
                        "6fbdf7e6d4c50eb95fb6d7a1f435e09cda298bd6"
                    ]
                },
                {
                    "command": [
                        "apply (ClockwiseBetweenMBC B A K M H9 H8).",
                        "VernacExtend",
                        "b6e434e3d96424f4bcbfd42121b2370e55658c60"
                    ]
                },
                {
                    "command": [
                        "trivial.",
                        "VernacExtend",
                        "6704630005ea37c1f66f817f0d3cb83967ca08c5"
                    ]
                },
                {
                    "command": [
                        "trivial.",
                        "VernacExtend",
                        "6704630005ea37c1f66f817f0d3cb83967ca08c5"
                    ]
                },
                {
                    "command": [
                        "assert (H8 := ClockwiseDistinctBC _ _ _ H).",
                        "VernacExtend",
                        "591ae53ed3cf9c598a5a68aedbc1e1ed1f90cbe9"
                    ]
                },
                {
                    "command": [
                        "destruct (MarkChange C D I J H8 H2 H4 H6) as (H9, H10).",
                        "VernacExtend",
                        "5cadc6a994b06917ce253be208d4a06b77e23a14"
                    ]
                },
                {
                    "command": [
                        "destruct (MarkChange A B I J) as (H11, H12).",
                        "VernacExtend",
                        "0daefc3d7414ff05b44cac2669b0704c0fe60bfd"
                    ]
                },
                {
                    "command": [
                        "assert (H11 := BetweenDistinctCA _ _ _ H1); auto.",
                        "VernacExtend",
                        "0a9cd79a3706ed7bad18eb96a0dffbd89af88685"
                    ]
                },
                {
                    "command": [
                        "trivial.",
                        "VernacExtend",
                        "6704630005ea37c1f66f817f0d3cb83967ca08c5"
                    ]
                },
                {
                    "command": [
                        "apply (CollinearTrans A M B I).",
                        "VernacExtend",
                        "97df012a53e283ed924c7fce7ff471f9c0a00d53"
                    ]
                },
                {
                    "command": [
                        "autoDistinct.",
                        "VernacExtend",
                        "1dccbc4e736bbf8115e8a9e3ef867678fdeebbe8"
                    ]
                },
                {
                    "command": [
                        "apply BetweenCollinear; trivial.",
                        "VernacExtend",
                        "e42c164cb23079a269a6d2a9cd84872d27110663"
                    ]
                },
                {
                    "command": [
                        "apply CollinearACB; apply BetweenCollinear; trivial.",
                        "VernacExtend",
                        "56b62222e905a4a733b26a4a70163e17df6aa313"
                    ]
                },
                {
                    "command": [
                        "apply CollinearBAC; apply (CollinearTrans B M A J).",
                        "VernacExtend",
                        "2bc893c10e415344b39e4a10bc7b4687afdf146e"
                    ]
                },
                {
                    "command": [
                        "assert (H11 := BetweenDistinctBC _ _ _ H1); auto.",
                        "VernacExtend",
                        "0fb8da957ae1e3d8980ead14f1e5a2073f65aa47"
                    ]
                },
                {
                    "command": [
                        "apply CollinearCBA; apply BetweenCollinear; trivial.",
                        "VernacExtend",
                        "f626fd4e41c7c0042466883541bc76d5b0f7fa94"
                    ]
                },
                {
                    "command": [
                        "apply CollinearACB; apply BetweenCollinear; trivial.",
                        "VernacExtend",
                        "56b62222e905a4a733b26a4a70163e17df6aa313"
                    ]
                },
                {
                    "command": [
                        "apply CollinearBAC; apply H10.",
                        "VernacExtend",
                        "3a4f9fb7a5614c863058f962b1c4b9d87e44c1ac"
                    ]
                },
                {
                    "command": [
                        "apply H11; change (Collinear A B M) in |- *.",
                        "VernacExtend",
                        "e9037677d19f8f7dc97b989b77a176cecef2c280"
                    ]
                },
                {
                    "command": [
                        "apply CollinearACB; apply BetweenCollinear; trivial.",
                        "VernacExtend",
                        "56b62222e905a4a733b26a4a70163e17df6aa313"
                    ]
                },
                {
                    "command": [
                        "elim (ClockwiseNotClockwise C D B).",
                        "VernacExtend",
                        "c33038bae4cf038aa4ea6cd7d98d9bd2c1413c05"
                    ]
                },
                {
                    "command": [
                        "autoClockwise.",
                        "VernacExtend",
                        "9409e85b86446941015e1da6ca2353051468a0c2"
                    ]
                },
                {
                    "command": [
                        "assert (Clockwise M C B).",
                        "VernacExtend",
                        "b9d9fb3615325d4c8b303139a63327bbe9f0627d"
                    ]
                },
                {
                    "command": [
                        "assert (Clockwise A C M).",
                        "VernacExtend",
                        "07671c0820fc15cb0ab71b2af8079933f48e4756"
                    ]
                },
                {
                    "command": [
                        "canonize.",
                        "VernacExtend",
                        "d86154be330fc32ce6876fd84daa5559bf6d4594"
                    ]
                },
                {
                    "command": [
                        "apply ClockwiseCAB; apply H2; autoClockwise.",
                        "VernacExtend",
                        "9a23b2bf53c869555be619dbcb0cc5d572e2e71c"
                    ]
                },
                {
                    "command": [
                        "apply ClockwiseBCA; apply (BetweenClockwiseAMC B A C M).",
                        "VernacExtend",
                        "2298e6c3219bd28601b87a27be7a930d82aca536"
                    ]
                },
                {
                    "command": [
                        "apply (ClockwiseBetweenMBC B A C M).",
                        "VernacExtend",
                        "dda617a3263bd023c6a4e93981855dc9102d868a"
                    ]
                },
                {
                    "command": [
                        "apply BetweenSym; trivial.",
                        "VernacExtend",
                        "4b64e2e034d8805eeb392d09c64cc0f02b3100e4"
                    ]
                },
                {
                    "command": [
                        "autoClockwise.",
                        "VernacExtend",
                        "9409e85b86446941015e1da6ca2353051468a0c2"
                    ]
                },
                {
                    "command": [
                        "apply BetweenSym; trivial.",
                        "VernacExtend",
                        "4b64e2e034d8805eeb392d09c64cc0f02b3100e4"
                    ]
                },
                {
                    "command": [
                        "generalizeChangeSide.",
                        "VernacExtend",
                        "5e228b6b7c592e98c7b8e296efd481fe42ece523"
                    ]
                },
                {
                    "command": [
                        "apply H1.",
                        "VernacExtend",
                        "3fcc9345bbf6ea218ca825a16c0f27912de9bd67"
                    ]
                },
                {
                    "command": [
                        "autoDistinct.",
                        "VernacExtend",
                        "1dccbc4e736bbf8115e8a9e3ef867678fdeebbe8"
                    ]
                },
                {
                    "command": [
                        "trivial.",
                        "VernacExtend",
                        "6704630005ea37c1f66f817f0d3cb83967ca08c5"
                    ]
                },
                {
                    "command": [
                        "elim (ClockwiseNotClockwise C D B).",
                        "VernacExtend",
                        "c33038bae4cf038aa4ea6cd7d98d9bd2c1413c05"
                    ]
                },
                {
                    "command": [
                        "autoClockwise.",
                        "VernacExtend",
                        "9409e85b86446941015e1da6ca2353051468a0c2"
                    ]
                },
                {
                    "command": [
                        "assert (Clockwise M D A).",
                        "VernacExtend",
                        "7de36c7447afae6414429fe0c97998cace7c9136"
                    ]
                },
                {
                    "command": [
                        "generalizeChangeSense.",
                        "VernacExtend",
                        "be975c77c59224ac5239b36f960f98e48421bb54"
                    ]
                },
                {
                    "command": [
                        "apply H1; autoClockwise.",
                        "VernacExtend",
                        "bf1077bd8ac86ced5cd2d752eb9b4a483d6b6e78"
                    ]
                },
                {
                    "command": [
                        "assert (Clockwise D M B).",
                        "VernacExtend",
                        "4f34943e657eb88c6073504238c8d6708de43803"
                    ]
                },
                {
                    "command": [
                        "apply ClockwiseCAB; apply (BetweenClockwiseMBC A B D M).",
                        "VernacExtend",
                        "e0cf49d129b747fd8cda2ce68458eebac9d27986"
                    ]
                },
                {
                    "command": [
                        "apply (ClockwiseBetweenAMC A B D M H1); autoClockwise.",
                        "VernacExtend",
                        "3bf9e7b7c2a1327e9af781aba7ef3bf6458df830"
                    ]
                },
                {
                    "command": [
                        "trivial.",
                        "VernacExtend",
                        "6704630005ea37c1f66f817f0d3cb83967ca08c5"
                    ]
                },
                {
                    "command": [
                        "generalizeChange.",
                        "VernacExtend",
                        "d3c977ebf7f2c5588433912c8eb25fd198cbcf67"
                    ]
                },
                {
                    "command": [
                        "apply H9.",
                        "VernacExtend",
                        "d0479838914cfca7017024564d1663cd6466cb01"
                    ]
                },
                {
                    "command": [
                        "autoDistinct.",
                        "VernacExtend",
                        "1dccbc4e736bbf8115e8a9e3ef867678fdeebbe8"
                    ]
                },
                {
                    "command": [
                        "trivial.",
                        "VernacExtend",
                        "6704630005ea37c1f66f817f0d3cb83967ca08c5"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "TriangleMNP",
            "line_nb": 112,
            "steps": [
                {
                    "command": [
                        "intros A B C M N P H H0 H1 H2.",
                        "VernacExtend",
                        "35b3c9b1efecf4b6a0273e565d791eae41f48da5"
                    ]
                },
                {
                    "command": [
                        "apply (BetweenTriangle A B N P M).",
                        "VernacExtend",
                        "63a4a838576b5b7a713f7a4e39051d4939bf72c2"
                    ]
                },
                {
                    "command": [
                        "apply (TriangleBNM C A B P N).",
                        "VernacExtend",
                        "24b83e921ce2b5626343024a78b180b2cbabee7d"
                    ]
                },
                {
                    "command": [
                        "autoClockwise.",
                        "VernacExtend",
                        "9409e85b86446941015e1da6ca2353051468a0c2"
                    ]
                },
                {
                    "command": [
                        "trivial.",
                        "VernacExtend",
                        "6704630005ea37c1f66f817f0d3cb83967ca08c5"
                    ]
                },
                {
                    "command": [
                        "apply BetweenSym; trivial.",
                        "VernacExtend",
                        "4b64e2e034d8805eeb392d09c64cc0f02b3100e4"
                    ]
                },
                {
                    "command": [
                        "apply (TriangleCNM C A B P N).",
                        "VernacExtend",
                        "c53501e29640d9d5be169c5ee35f7438f11ddd79"
                    ]
                },
                {
                    "command": [
                        "autoClockwise.",
                        "VernacExtend",
                        "9409e85b86446941015e1da6ca2353051468a0c2"
                    ]
                },
                {
                    "command": [
                        "trivial.",
                        "VernacExtend",
                        "6704630005ea37c1f66f817f0d3cb83967ca08c5"
                    ]
                },
                {
                    "command": [
                        "apply BetweenSym; trivial.",
                        "VernacExtend",
                        "4b64e2e034d8805eeb392d09c64cc0f02b3100e4"
                    ]
                },
                {
                    "command": [
                        "trivial.",
                        "VernacExtend",
                        "6704630005ea37c1f66f817f0d3cb83967ca08c5"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "ClockwiseBetween",
            "line_nb": 125,
            "steps": [
                {
                    "command": [
                        "intros; apply HalfLineBetween.",
                        "VernacExtend",
                        "d9f7f4eed1420ecbd9527a6cce79b7d9ae73d2e2"
                    ]
                },
                {
                    "command": [
                        "autoDistinct.",
                        "VernacExtend",
                        "1dccbc4e736bbf8115e8a9e3ef867678fdeebbe8"
                    ]
                },
                {
                    "command": [
                        "autoDistinct.",
                        "VernacExtend",
                        "1dccbc4e736bbf8115e8a9e3ef867678fdeebbe8"
                    ]
                },
                {
                    "command": [
                        "destruct (CollinearHalfLine _ _ _ H1).",
                        "VernacExtend",
                        "fe1787e610939a37cbe62f6d7d726b45e9290a5c"
                    ]
                },
                {
                    "command": [
                        "trivial.",
                        "VernacExtend",
                        "6704630005ea37c1f66f817f0d3cb83967ca08c5"
                    ]
                },
                {
                    "command": [
                        "elim (ClockwiseNotClockwise _ _ _ H); generalizeChange.",
                        "VernacExtend",
                        "3673e708c616c1ae4e7d3001c9bc265e3ed02818"
                    ]
                },
                {
                    "command": [
                        "apply H6.",
                        "VernacExtend",
                        "b0314bbdc776869d305067ca471096a36fa958c1"
                    ]
                },
                {
                    "command": [
                        "autoDistinct.",
                        "VernacExtend",
                        "1dccbc4e736bbf8115e8a9e3ef867678fdeebbe8"
                    ]
                },
                {
                    "command": [
                        "trivial.",
                        "VernacExtend",
                        "6704630005ea37c1f66f817f0d3cb83967ca08c5"
                    ]
                },
                {
                    "command": [
                        "destruct (CollinearHalfLine _ _ _ (CollinearCBA _ _ _ H1)).",
                        "VernacExtend",
                        "f10a9b6abf3e0e379fb3bc91fee2402c3b7d0f68"
                    ]
                },
                {
                    "command": [
                        "trivial.",
                        "VernacExtend",
                        "6704630005ea37c1f66f817f0d3cb83967ca08c5"
                    ]
                },
                {
                    "command": [
                        "elim (ClockwiseNotClockwise _ _ _ H); canonize.",
                        "VernacExtend",
                        "3d5158fbcbaa10e67fec4115601e2b76c2caa353"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        }
    ]
}