{
    "filename": "C2_Entre_Prop.v",
    "coq_project": "ruler-compass-geometry",
    "vernac_cmds": [
        [
            "Require Export C1_DemiDroite_Prop.",
            "VernacRequire",
            "2c15ccdead91878bd3940b7a5abf4c2e107b466e"
        ],
        [
            "Section BETWEEN_PROPERTIES.",
            "VernacBeginSection",
            "b064fc2f7453cfd4be7c8aa14923a1a241ac6122"
        ],
        [
            "Lemma BetweenDistinctBC : forall A B C, Between A B C -> B <> C.",
            "VernacStartTheoremProof",
            "e9dc7d0d14365836aa115316d337f18364f0da8c"
        ],
        [
            "canonize; subst.",
            "VernacExtend",
            "7342b070d9443e9cc3fa91ef5a1ac8062e691a13"
        ],
        [
            "destruct (ClockwiseExists A C H1) as (D, H3).",
            "VernacExtend",
            "f9056e4d9b617836cccf13ca9ad5c793e59c4a61"
        ],
        [
            "assert (Clockwise C C D); [ auto | autoClockwise ].",
            "VernacExtend",
            "74bf101c1a416378a3aa58f8dd7bb8794cc0da36"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma BetweenSym : forall A B C, Between A B C -> Between C B A.",
            "VernacStartTheoremProof",
            "621b9368523ff94ca696aa038b918e08c6574423"
        ],
        [
            "split.",
            "VernacExtend",
            "55abc140132bd88981001ac656020469a8d503eb"
        ],
        [
            "generalize (BetweenDistinctBC A B C); auto.",
            "VernacExtend",
            "7ff63c047b8d657690ead37b257301c4595b5497"
        ],
        [
            "generalizeChange.",
            "VernacExtend",
            "d3c977ebf7f2c5588433912c8eb25fd198cbcf67"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma BetweenCollinear : forall A B C, Between A B C -> Collinear A B C.",
            "VernacStartTheoremProof",
            "681ccc6bd733ea9e76865c892c953ab5a1e89228"
        ],
        [
            "intros; apply HalfLineCollinear; apply BetweenHalfLine; trivial.",
            "VernacExtend",
            "fdb611480a97d6ef94d89a2bb26d684c3ffff497"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma BetweenDistinctCA : forall A B C, Between A B C -> C <> A.",
            "VernacStartTheoremProof",
            "f062df3ad7f4253540a61c1717e5f5186eaf6fb7"
        ],
        [
            "intros A B C H.",
            "VernacExtend",
            "a4d5576d03ad61ed90c10c37343faf46dbc0c914"
        ],
        [
            "generalize (BetweenHalfLine A B C H); canonize.",
            "VernacExtend",
            "284996986ac0d2d1804b6bca491a3fbad50936d9"
        ],
        [
            "destruct (ClockwiseExists A B H2) as (D, H4).",
            "VernacExtend",
            "bd574e97b45ba7338d810239ebe2d6b404d1bcda"
        ],
        [
            "elim (ClockwiseDistinctAB A C D); auto.",
            "VernacExtend",
            "2add0db849e1e2dc95022a432c94d304a1d2a85f"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma HalfLineBetween : forall A B C, A <> B -> B <> C -> HalfLine A B C -> HalfLine C B A -> Between A B C.",
            "VernacStartTheoremProof",
            "429a49162a77a935e6cdb95ac65eaa1219a25f04"
        ],
        [
            "generalizeChange.",
            "VernacExtend",
            "d3c977ebf7f2c5588433912c8eb25fd198cbcf67"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma BetweenAssocLeft : forall A B C D : Point, Between A B C -> Between B C D -> Between A B D.",
            "VernacStartTheoremProof",
            "5ec7b6fe551a13783c1be888059dd51799cd646f"
        ],
        [
            "canonize.",
            "VernacExtend",
            "d86154be330fc32ce6876fd84daa5559bf6d4594"
        ],
        [
            "apply (BetweenHalfLine B C D); canonize.",
            "VernacExtend",
            "4ee027a81c6013f302d66991f1ad4fe57d4ea63f"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma BetweenAssocRight : forall A B C D : Point, Between A B C -> Between B C D -> Between A C D.",
            "VernacStartTheoremProof",
            "3b9e3ddb0f51f9c5be6a38b82875fb4e724bcea2"
        ],
        [
            "canonize.",
            "VernacExtend",
            "d86154be330fc32ce6876fd84daa5559bf6d4594"
        ],
        [
            "elim (BetweenDistinctCA A B C); canonize.",
            "VernacExtend",
            "b3eb59f120d8a53842e29521ac3e07d5a23fc226"
        ],
        [
            "generalize (BetweenHalfLine A B C); generalizeChange.",
            "VernacExtend",
            "282175bb4fceb39fe28c04276f7f0e596053ccf7"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma EquiOrientedCollinear : forall A B C, EquiOriented A B C A -> Collinear A B C.",
            "VernacStartTheoremProof",
            "050df6e031b13819c4a435b97b71e86b978f8bed"
        ],
        [
            "generalizeChange.",
            "VernacExtend",
            "d3c977ebf7f2c5588433912c8eb25fd198cbcf67"
        ],
        [
            "elim (NotClockwiseABA C A); auto.",
            "VernacExtend",
            "ba8e1e0d618fd676ca0098a4074ca8fb054525eb"
        ],
        [
            "elim (NotClockwiseABA B A); apply H1.",
            "VernacExtend",
            "53b366b45a75974ec4e9034643fae61c0be19094"
        ],
        [
            "autoDistinct.",
            "VernacExtend",
            "1dccbc4e736bbf8115e8a9e3ef867678fdeebbe8"
        ],
        [
            "autoClockwise.",
            "VernacExtend",
            "9409e85b86446941015e1da6ca2353051468a0c2"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma HalfLineEquiOrientedHalfLine : forall A B C D : Point, A <> B -> HalfLine A B C -> EquiOriented A B C D -> HalfLine A B D.",
            "VernacStartTheoremProof",
            "a331f102c6713ad2791dcaa56a774b06458170f4"
        ],
        [
            "canonize.",
            "VernacExtend",
            "d86154be330fc32ce6876fd84daa5559bf6d4594"
        ],
        [
            "assert (Between A C D).",
            "VernacExtend",
            "8f143bd9abba5bca5536115c3ff8aec11e4e01c4"
        ],
        [
            "generalizeChange.",
            "VernacExtend",
            "d3c977ebf7f2c5588433912c8eb25fd198cbcf67"
        ],
        [
            "elim (ClockwiseDistinctAB A C x); auto.",
            "VernacExtend",
            "04d2cb0ce7e02c4467a24c6d085ac7270cccd075"
        ],
        [
            "generalize (BetweenHalfLine A C D H3); canonize.",
            "VernacExtend",
            "4c0a783c11182beba5ae7a455138d70d6973cc83"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma ClockwiseBetweenClockwise : forall A B C D E : Point, Clockwise A B C -> Between A D B -> Between A E C -> Clockwise A D E.",
            "VernacStartTheoremProof",
            "81a84c1731f0c23895efe7b85c05ce7b58b58cdd"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "generalize (BetweenHalfLine A D B H0); generalize (BetweenHalfLine A E C H1).",
            "VernacExtend",
            "057c0991624ebf3522f5b31db06eb4df57fce72b"
        ],
        [
            "generalizeChange.",
            "VernacExtend",
            "d3c977ebf7f2c5588433912c8eb25fd198cbcf67"
        ],
        [
            "apply H9; apply ClockwiseBCA; apply H2; autoClockwise.",
            "VernacExtend",
            "4abedd70349dbd65ee828ca82cc8872df20f516a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma NotCollinearBetweenNotCollinear : forall A B C D E : Point, ~Collinear A B C -> Between A D B -> Between A E C -> ~Collinear A D E.",
            "VernacStartTheoremProof",
            "3f6c833277e2289c059dc6ef4fc4070df0471cc4"
        ],
        [
            "canonize.",
            "VernacExtend",
            "d86154be330fc32ce6876fd84daa5559bf6d4594"
        ],
        [
            "elim H2; intros.",
            "VernacExtend",
            "1fdc85439644114ac67a1ade25e79a4d8c3588d6"
        ],
        [
            "elim H1; apply (ClockwiseBetweenClockwise A B C D E); autoClockwise.",
            "VernacExtend",
            "740af71e8c98cf23f3531f31141f8882d3b08d5c"
        ],
        [
            "elim H6; apply ClockwiseCAB.",
            "VernacExtend",
            "5b6e87259a3b81a70f5a71b55bcc451d6ea09c1c"
        ],
        [
            "apply (ClockwiseBetweenClockwise A C B E D); autoClockwise.",
            "VernacExtend",
            "1b387b1c9103e4ff2432e7a1999bf80e5148e0c1"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma NotCollinearBetweenDistinct : forall A B C D E : Point, ~Collinear A B C -> Between A D B -> Between A E C -> D <> E.",
            "VernacStartTheoremProof",
            "dcdd5b69241972c453de8d75002ef7563ccfbb7d"
        ],
        [
            "intros; apply (NotCollinearDistinctBC A D E).",
            "VernacExtend",
            "b7bd57223f5b9c7c63c8fc92756c8efb39bf8b80"
        ],
        [
            "apply (NotCollinearBetweenNotCollinear A B C D E); auto.",
            "VernacExtend",
            "fbfb322a401759cd30fa08b6c373ccc7db6106c2"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma BetweenNotBetween : forall A B C : Point, Between A B C -> ~Between A C B.",
            "VernacStartTheoremProof",
            "98be08d7d0d1e127c16897bcdca193f7fb9f1204"
        ],
        [
            "intros A B C H; assert (H0 := BetweenHalfLine _ _ _ H).",
            "VernacExtend",
            "e5cdc3ba52d068c5da6707482c79af7c2e2606e0"
        ],
        [
            "destruct (ClockwiseExists A B (BetweenDistinctAB _ _ _ H)) as (D, H1).",
            "VernacExtend",
            "624606bf60a013af0156e5eb6687e53dcca91026"
        ],
        [
            "intro H2; elim (ClockwiseNotClockwise _ _ _ H1).",
            "VernacExtend",
            "ad4089c17bf960a9232fce62504de1cc35e34d02"
        ],
        [
            "generalizeChange.",
            "VernacExtend",
            "d3c977ebf7f2c5588433912c8eb25fd198cbcf67"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma ChaslesBetween : forall A B C : Point, Between A B C -> LSplus (Distance A B) (Distance B C) = Distance A C.",
            "VernacStartTheoremProof",
            "5c26a0bae8b6f73671c1fdbd25217a1ce38c2487"
        ],
        [
            "intros A B C H; apply Chasles.",
            "VernacExtend",
            "f0a629645af6f6db1d06c620fa54f456676bb205"
        ],
        [
            "apply BetweenHalfLine; trivial.",
            "VernacExtend",
            "a50bf0ba508d8472d7e808e2d960b71aa16ac730"
        ],
        [
            "apply BetweenSymHalfLine; trivial.",
            "VernacExtend",
            "fd3f4190dc2b0635577764c229d941d50ae48c70"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma HalfLineEquidistantEqualPoints : forall A B C D E : Point, forall d : LS, HalfLine A C B -> Distance A C = d -> HalfLine A B D -> A <> C -> Distance A D = LSplus (Distance A B) d -> Between A C E -> Distance C E = Distance A B -> E = D.",
            "VernacStartTheoremProof",
            "2b5e2ea83508884c0cdbad25a7de14033088d6ae"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "apply (HalfLineEquidistantEqual A).",
            "VernacExtend",
            "8941b59132706e4ed237e565a516e7247e05ee3e"
        ],
        [
            "exact (sym_not_eq (BetweenDistinctCA _ _ _ H4)).",
            "VernacExtend",
            "409a19ce8bad2b1bbd3642e328076335e1c26247"
        ],
        [
            "assert (HalfLine A E C).",
            "VernacExtend",
            "f03f865d57aa6b34bfe8cd6f544ccbb03af3170d"
        ],
        [
            "apply (HalfLineSym A C E H2 (BetweenHalfLine _ _ _ H4)).",
            "VernacExtend",
            "282db9c412095dc5c99bc8041671bd4fb22609e7"
        ],
        [
            "canonize.",
            "VernacExtend",
            "d86154be330fc32ce6876fd84daa5559bf6d4594"
        ],
        [
            "rewrite (DistSym A E).",
            "VernacExtend",
            "28cd0322253da57b52420ee5abc8de1b5d629250"
        ],
        [
            "rewrite <- (ChaslesBetween _ _ _ (BetweenSym _ _ _ H4)).",
            "VernacExtend",
            "a7de9072e5ef46201f3c248df5eec1753e5c7d57"
        ],
        [
            "autoDistance.",
            "VernacExtend",
            "0c749375e926c665509e5f0134261461e6f9bac3"
        ],
        [
            "rewrite (DistSym C A); rewrite H0; auto.",
            "VernacExtend",
            "6461b7a0531b0f6c02149dfdfff9f26788549791"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "End BETWEEN_PROPERTIES.",
            "VernacEndSegment",
            "91b3a9681cb69388c61668f3fe9f13c780426bec"
        ]
    ],
    "proofs": [
        {
            "name": "BetweenDistinctBC",
            "line_nb": 2,
            "steps": [
                {
                    "command": [
                        "canonize; subst.",
                        "VernacExtend",
                        "7342b070d9443e9cc3fa91ef5a1ac8062e691a13"
                    ]
                },
                {
                    "command": [
                        "destruct (ClockwiseExists A C H1) as (D, H3).",
                        "VernacExtend",
                        "f9056e4d9b617836cccf13ca9ad5c793e59c4a61"
                    ]
                },
                {
                    "command": [
                        "assert (Clockwise C C D); [ auto | autoClockwise ].",
                        "VernacExtend",
                        "74bf101c1a416378a3aa58f8dd7bb8794cc0da36"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "BetweenSym",
            "line_nb": 7,
            "steps": [
                {
                    "command": [
                        "split.",
                        "VernacExtend",
                        "55abc140132bd88981001ac656020469a8d503eb"
                    ]
                },
                {
                    "command": [
                        "generalize (BetweenDistinctBC A B C); auto.",
                        "VernacExtend",
                        "7ff63c047b8d657690ead37b257301c4595b5497"
                    ]
                },
                {
                    "command": [
                        "generalizeChange.",
                        "VernacExtend",
                        "d3c977ebf7f2c5588433912c8eb25fd198cbcf67"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "BetweenCollinear",
            "line_nb": 12,
            "steps": [
                {
                    "command": [
                        "intros; apply HalfLineCollinear; apply BetweenHalfLine; trivial.",
                        "VernacExtend",
                        "fdb611480a97d6ef94d89a2bb26d684c3ffff497"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "BetweenDistinctCA",
            "line_nb": 15,
            "steps": [
                {
                    "command": [
                        "intros A B C H.",
                        "VernacExtend",
                        "a4d5576d03ad61ed90c10c37343faf46dbc0c914"
                    ]
                },
                {
                    "command": [
                        "generalize (BetweenHalfLine A B C H); canonize.",
                        "VernacExtend",
                        "284996986ac0d2d1804b6bca491a3fbad50936d9"
                    ]
                },
                {
                    "command": [
                        "destruct (ClockwiseExists A B H2) as (D, H4).",
                        "VernacExtend",
                        "bd574e97b45ba7338d810239ebe2d6b404d1bcda"
                    ]
                },
                {
                    "command": [
                        "elim (ClockwiseDistinctAB A C D); auto.",
                        "VernacExtend",
                        "2add0db849e1e2dc95022a432c94d304a1d2a85f"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "HalfLineBetween",
            "line_nb": 21,
            "steps": [
                {
                    "command": [
                        "generalizeChange.",
                        "VernacExtend",
                        "d3c977ebf7f2c5588433912c8eb25fd198cbcf67"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "BetweenAssocLeft",
            "line_nb": 24,
            "steps": [
                {
                    "command": [
                        "canonize.",
                        "VernacExtend",
                        "d86154be330fc32ce6876fd84daa5559bf6d4594"
                    ]
                },
                {
                    "command": [
                        "apply (BetweenHalfLine B C D); canonize.",
                        "VernacExtend",
                        "4ee027a81c6013f302d66991f1ad4fe57d4ea63f"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "BetweenAssocRight",
            "line_nb": 28,
            "steps": [
                {
                    "command": [
                        "canonize.",
                        "VernacExtend",
                        "d86154be330fc32ce6876fd84daa5559bf6d4594"
                    ]
                },
                {
                    "command": [
                        "elim (BetweenDistinctCA A B C); canonize.",
                        "VernacExtend",
                        "b3eb59f120d8a53842e29521ac3e07d5a23fc226"
                    ]
                },
                {
                    "command": [
                        "generalize (BetweenHalfLine A B C); generalizeChange.",
                        "VernacExtend",
                        "282175bb4fceb39fe28c04276f7f0e596053ccf7"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "EquiOrientedCollinear",
            "line_nb": 33,
            "steps": [
                {
                    "command": [
                        "generalizeChange.",
                        "VernacExtend",
                        "d3c977ebf7f2c5588433912c8eb25fd198cbcf67"
                    ]
                },
                {
                    "command": [
                        "elim (NotClockwiseABA C A); auto.",
                        "VernacExtend",
                        "ba8e1e0d618fd676ca0098a4074ca8fb054525eb"
                    ]
                },
                {
                    "command": [
                        "elim (NotClockwiseABA B A); apply H1.",
                        "VernacExtend",
                        "53b366b45a75974ec4e9034643fae61c0be19094"
                    ]
                },
                {
                    "command": [
                        "autoDistinct.",
                        "VernacExtend",
                        "1dccbc4e736bbf8115e8a9e3ef867678fdeebbe8"
                    ]
                },
                {
                    "command": [
                        "autoClockwise.",
                        "VernacExtend",
                        "9409e85b86446941015e1da6ca2353051468a0c2"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "HalfLineEquiOrientedHalfLine",
            "line_nb": 40,
            "steps": [
                {
                    "command": [
                        "canonize.",
                        "VernacExtend",
                        "d86154be330fc32ce6876fd84daa5559bf6d4594"
                    ]
                },
                {
                    "command": [
                        "assert (Between A C D).",
                        "VernacExtend",
                        "8f143bd9abba5bca5536115c3ff8aec11e4e01c4"
                    ]
                },
                {
                    "command": [
                        "generalizeChange.",
                        "VernacExtend",
                        "d3c977ebf7f2c5588433912c8eb25fd198cbcf67"
                    ]
                },
                {
                    "command": [
                        "elim (ClockwiseDistinctAB A C x); auto.",
                        "VernacExtend",
                        "04d2cb0ce7e02c4467a24c6d085ac7270cccd075"
                    ]
                },
                {
                    "command": [
                        "generalize (BetweenHalfLine A C D H3); canonize.",
                        "VernacExtend",
                        "4c0a783c11182beba5ae7a455138d70d6973cc83"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "ClockwiseBetweenClockwise",
            "line_nb": 47,
            "steps": [
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "generalize (BetweenHalfLine A D B H0); generalize (BetweenHalfLine A E C H1).",
                        "VernacExtend",
                        "057c0991624ebf3522f5b31db06eb4df57fce72b"
                    ]
                },
                {
                    "command": [
                        "generalizeChange.",
                        "VernacExtend",
                        "d3c977ebf7f2c5588433912c8eb25fd198cbcf67"
                    ]
                },
                {
                    "command": [
                        "apply H9; apply ClockwiseBCA; apply H2; autoClockwise.",
                        "VernacExtend",
                        "4abedd70349dbd65ee828ca82cc8872df20f516a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "NotCollinearBetweenNotCollinear",
            "line_nb": 53,
            "steps": [
                {
                    "command": [
                        "canonize.",
                        "VernacExtend",
                        "d86154be330fc32ce6876fd84daa5559bf6d4594"
                    ]
                },
                {
                    "command": [
                        "elim H2; intros.",
                        "VernacExtend",
                        "1fdc85439644114ac67a1ade25e79a4d8c3588d6"
                    ]
                },
                {
                    "command": [
                        "elim H1; apply (ClockwiseBetweenClockwise A B C D E); autoClockwise.",
                        "VernacExtend",
                        "740af71e8c98cf23f3531f31141f8882d3b08d5c"
                    ]
                },
                {
                    "command": [
                        "elim H6; apply ClockwiseCAB.",
                        "VernacExtend",
                        "5b6e87259a3b81a70f5a71b55bcc451d6ea09c1c"
                    ]
                },
                {
                    "command": [
                        "apply (ClockwiseBetweenClockwise A C B E D); autoClockwise.",
                        "VernacExtend",
                        "1b387b1c9103e4ff2432e7a1999bf80e5148e0c1"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "NotCollinearBetweenDistinct",
            "line_nb": 60,
            "steps": [
                {
                    "command": [
                        "intros; apply (NotCollinearDistinctBC A D E).",
                        "VernacExtend",
                        "b7bd57223f5b9c7c63c8fc92756c8efb39bf8b80"
                    ]
                },
                {
                    "command": [
                        "apply (NotCollinearBetweenNotCollinear A B C D E); auto.",
                        "VernacExtend",
                        "fbfb322a401759cd30fa08b6c373ccc7db6106c2"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "BetweenNotBetween",
            "line_nb": 64,
            "steps": [
                {
                    "command": [
                        "intros A B C H; assert (H0 := BetweenHalfLine _ _ _ H).",
                        "VernacExtend",
                        "e5cdc3ba52d068c5da6707482c79af7c2e2606e0"
                    ]
                },
                {
                    "command": [
                        "destruct (ClockwiseExists A B (BetweenDistinctAB _ _ _ H)) as (D, H1).",
                        "VernacExtend",
                        "624606bf60a013af0156e5eb6687e53dcca91026"
                    ]
                },
                {
                    "command": [
                        "intro H2; elim (ClockwiseNotClockwise _ _ _ H1).",
                        "VernacExtend",
                        "ad4089c17bf960a9232fce62504de1cc35e34d02"
                    ]
                },
                {
                    "command": [
                        "generalizeChange.",
                        "VernacExtend",
                        "d3c977ebf7f2c5588433912c8eb25fd198cbcf67"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "ChaslesBetween",
            "line_nb": 70,
            "steps": [
                {
                    "command": [
                        "intros A B C H; apply Chasles.",
                        "VernacExtend",
                        "f0a629645af6f6db1d06c620fa54f456676bb205"
                    ]
                },
                {
                    "command": [
                        "apply BetweenHalfLine; trivial.",
                        "VernacExtend",
                        "a50bf0ba508d8472d7e808e2d960b71aa16ac730"
                    ]
                },
                {
                    "command": [
                        "apply BetweenSymHalfLine; trivial.",
                        "VernacExtend",
                        "fd3f4190dc2b0635577764c229d941d50ae48c70"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "HalfLineEquidistantEqualPoints",
            "line_nb": 75,
            "steps": [
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "apply (HalfLineEquidistantEqual A).",
                        "VernacExtend",
                        "8941b59132706e4ed237e565a516e7247e05ee3e"
                    ]
                },
                {
                    "command": [
                        "exact (sym_not_eq (BetweenDistinctCA _ _ _ H4)).",
                        "VernacExtend",
                        "409a19ce8bad2b1bbd3642e328076335e1c26247"
                    ]
                },
                {
                    "command": [
                        "assert (HalfLine A E C).",
                        "VernacExtend",
                        "f03f865d57aa6b34bfe8cd6f544ccbb03af3170d"
                    ]
                },
                {
                    "command": [
                        "apply (HalfLineSym A C E H2 (BetweenHalfLine _ _ _ H4)).",
                        "VernacExtend",
                        "282db9c412095dc5c99bc8041671bd4fb22609e7"
                    ]
                },
                {
                    "command": [
                        "canonize.",
                        "VernacExtend",
                        "d86154be330fc32ce6876fd84daa5559bf6d4594"
                    ]
                },
                {
                    "command": [
                        "rewrite (DistSym A E).",
                        "VernacExtend",
                        "28cd0322253da57b52420ee5abc8de1b5d629250"
                    ]
                },
                {
                    "command": [
                        "rewrite <- (ChaslesBetween _ _ _ (BetweenSym _ _ _ H4)).",
                        "VernacExtend",
                        "a7de9072e5ef46201f3c248df5eec1753e5c7d57"
                    ]
                },
                {
                    "command": [
                        "autoDistance.",
                        "VernacExtend",
                        "0c749375e926c665509e5f0134261461e6f9bac3"
                    ]
                },
                {
                    "command": [
                        "rewrite (DistSym C A); rewrite H0; auto.",
                        "VernacExtend",
                        "6461b7a0531b0f6c02149dfdfff9f26788549791"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        }
    ]
}