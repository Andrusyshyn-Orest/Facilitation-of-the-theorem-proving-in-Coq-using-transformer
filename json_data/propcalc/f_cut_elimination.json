{
    "filename": "f_cut_elimination.v",
    "coq_project": "propcalc",
    "vernac_cmds": [
        [
            "Require Export e_sequent_calculus.",
            "VernacRequire",
            "6ea65161419e7b57af7f8127ba6aabf8051c0511"
        ],
        [
            "Require Import Plus Le Lt.",
            "VernacRequire",
            "21b043e7daf2953cb3cce4b413baf05bfd9149c4"
        ],
        [
            "Set Implicit Arguments.",
            "VernacSetOption",
            "9e84ff8896f028601d8aded48c1d4aebe60aa584"
        ],
        [
            "Module Type cut_mod (B: base_mod) (S: sound_mod B) (C: complete_mod B S) (G: sequent_mod B S C).",
            "VernacDeclareModuleType",
            "5123b9e102c64af634fc456beca617b2b184e298"
        ],
        [
            "Import B S C G.",
            "VernacImport",
            "c173dffb85ff9bdfeb759dd77b9f5a4320a652ce"
        ],
        [
            "Reserved Notation \"\u0393 \u2283c A\" (at level 80).",
            "VernacSyntaxExtension",
            "e9212b8f8af7f2508df04d22c0b4083aa8e691aa"
        ],
        [
            "Inductive Gcf : list PropF->list PropF->Prop := | Gcax : forall v \u0393 \u0394 , In #v \u0393 -> In #v \u0394 -> \u0393 \u2283c \u0394 | GcBot : forall \u0393 \u0394 , In \u22a5 \u0393 -> \u0393 \u2283c \u0394 | cAndL : forall A B \u03931 \u03932 \u0394, \u03931++A::B::\u03932 \u2283c \u0394 -> \u03931++A\u2227B::\u03932 \u2283c \u0394 | cAndR : forall A B \u0393 \u03941 \u03942, \u0393 \u2283c \u03941++A::\u03942 -> \u0393 \u2283c \u03941++B::\u03942 -> \u0393 \u2283c \u03941++A\u2227B::\u03942 | cOrL : forall A B \u03931 \u03932 \u0394, \u03931++A::\u03932 \u2283c \u0394 -> \u03931++B::\u03932 \u2283c \u0394 -> \u03931++A\u2228B::\u03932 \u2283c \u0394 | cOrR : forall A B \u0393 \u03941 \u03942, \u0393 \u2283c \u03941++A::B::\u03942 -> \u0393 \u2283c \u03941++A\u2228B::\u03942 | cImpL : forall A B \u03931 \u03932 \u0394, \u03931++B::\u03932 \u2283c \u0394 -> \u03931++\u03932 \u2283c A::\u0394 -> \u03931++A\u2192B::\u03932 \u2283c \u0394 | cImpR : forall A B \u0393 \u03941 \u03942, A::\u0393 \u2283c \u03941++B::\u03942 -> \u0393 \u2283c \u03941++A\u2192B::\u03942 where \"\u0393 \u2283c \u0394\" := (Gcf \u0393 \u0394) : My_scope.",
            "VernacInductive",
            "9a9c70f72d97cfd7f5fedf9d31fea1bdc6217a2c"
        ],
        [
            "Notation \"\u0393 =\u2283 \u0394\" := (forall v,Satisfies v \u0393->Validates v \u0394) (at level 80).",
            "VernacNotation",
            "2af56e4bb3111083dcd73285c6610c11b9d55a55"
        ],
        [
            "Inductive Atomic : Set := | AVar : PropVars -> Atomic | ABot : Atomic .",
            "VernacInductive",
            "37018cb92b48f8b2a3229e09971c61e644fe6ab0"
        ],
        [
            "Fixpoint AtomicF (P:Atomic) : PropF := match P with | AVar P => #P | ABot => \u22a5 end.",
            "VernacFixpoint",
            "07c9a09641270819dbdde7e5bd0ca2ad9e1dc5df"
        ],
        [
            "Fixpoint size A : nat := match A with | # P => 0 | \u22a5 => 0 | B \u2228 C => S (size B + size C) | B \u2227 C => S (size B + size C) | B \u2192 C => S (size B + size C) end.",
            "VernacFixpoint",
            "a0eddaefdfe36ee35c5ef1d57be31f76d6c12fe7"
        ],
        [
            "Definition sizel := map_fold_right size plus 0.",
            "VernacDefinition",
            "020c167e5a5c3779bb88dec243151ee6c751217f"
        ],
        [
            "Definition sizes \u0393 \u0394:= sizel \u0393 + sizel \u0394.",
            "VernacDefinition",
            "0c7f9f44d7ca3304cf6b44a29cfcbc5dac623931"
        ],
        [
            "Theorem G_to_Gcf : forall \u0393 \u0394, \u0393 \u2283c \u0394 -> \u0393 \u2283 \u0394.",
            "VernacStartTheoremProof",
            "c7d83d60f7c942c3b97dbb869abf4cd198a63229"
        ],
        [
            "induction 1;[econstructor|constructor|constr..];eassumption.",
            "VernacExtend",
            "e7592cb06103ddefc23dc42b41ef0f1915ec0dfc"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Theorem G_sound : forall \u0393 \u0394, \u0393 \u2283 \u0394 -> \u0393 =\u2283 \u0394.",
            "VernacStartTheoremProof",
            "5edc174350bc66a9784cb62ebe195d082f81d0b6"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "apply G_to_Nc in H.",
            "VernacExtend",
            "1283312673ea417120da56dfc67b5a5dcd549274"
        ],
        [
            "apply Soundness_general in H.",
            "VernacExtend",
            "e1924d5eff786a6f576a970ef1845d1eaf80206a"
        ],
        [
            "remember (H v H0).",
            "VernacExtend",
            "d9e87956404b887148cc2a72542f5c4a37353b33"
        ],
        [
            "clear -i H0.",
            "VernacExtend",
            "ed499c5e138326a534a16d916dfdbe177753a2a4"
        ],
        [
            "induction \u0394.",
            "VernacExtend",
            "103195403a2c184c4eb4ee5f272ecbebf20c7085"
        ],
        [
            "contradiction.",
            "VernacExtend",
            "9b6a5c45e1144cbbccd544effb2a97082518704a"
        ],
        [
            "simpl in i.",
            "VernacExtend",
            "c07e171b7e5f65daae0b6eab58ebab18367c7b1e"
        ],
        [
            "case_eq (TrueQ v a);intro K;rewrite K in *;simpl in *.",
            "VernacExtend",
            "0795b1de586f823fc362bc267aa6d56675f206fc"
        ],
        [
            "exists a;split;[in_solve|rewrite K;trivial].",
            "VernacExtend",
            "9fcf27b1a83cb982e3bb6c137262e7a736a69818"
        ],
        [
            "destruct (IH\u0394 i) as (?&?&?).",
            "VernacExtend",
            "82707724ca97ba50c5680226ea07aaa26b36983c"
        ],
        [
            "exists x;split;[in_solve|assumption].",
            "VernacExtend",
            "717be8bc80188ff09cafa75353f7fb16b23f37d2"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma Atomic_eqdec : forall x y : Atomic, {x = y} + {x <> y}.",
            "VernacStartTheoremProof",
            "67f10155be300a70d364860d4b3a70c102c6f866"
        ],
        [
            "intros;destruct x;destruct y;try (right;discriminate);try (left;reflexivity); destruct (Varseq_dec p p0); (left;f_equal;assumption)||(right;intro HH;injection HH;contradiction).",
            "VernacExtend",
            "d2fcc286ee9ee79a9d9d81158e7a12550f1edc91"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma sizes_comm : forall \u0393 \u0394, sizes \u0393 \u0394 = sizes \u0394 \u0393.",
            "VernacStartTheoremProof",
            "c7a4fe04a06173486366f8f355a1d2f56085ab45"
        ],
        [
            "intros;unfold sizes;apply plus_comm;reflexivity.",
            "VernacExtend",
            "b20a1147f5c5836822f79f7bf5ea79b36cdf0c26"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma sizes_comm_r : forall \u03931 \u03932 A \u0394, sizes (\u03931 ++ \u03932) (A :: \u0394) = sizes (\u03931 ++ A::\u03932) \u0394.",
            "VernacStartTheoremProof",
            "2d1cd6661553ae3006f1145afa09faf1aa102b4e"
        ],
        [
            "intros;induction \u03931;unfold sizes;unfold sizel;simpl.",
            "VernacExtend",
            "ac18446ca502bbf579b67b919c55654cf6f46d70"
        ],
        [
            "rewrite plus_assoc;f_equal;apply plus_comm.",
            "VernacExtend",
            "ebfc16e49c5835b5d98015a3f67411bbc85e517e"
        ],
        [
            "rewrite <- !plus_assoc;f_equal;apply IH\u03931.",
            "VernacExtend",
            "c0c645cd10f1b3d1d86cdf945a14794936f9bffa"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma sizes_comm_l : forall \u03931 \u03932 A \u0394, sizes (A :: \u0394) (\u03931 ++ \u03932) = sizes \u0394 (\u03931 ++ A::\u03932).",
            "VernacStartTheoremProof",
            "aefba13e0d35918161146acc1a1c99ddc5018bd3"
        ],
        [
            "intros;rewrite sizes_comm;rewrite sizes_comm_r;apply sizes_comm.",
            "VernacExtend",
            "e10ea0876446fc46be4d4ebd53ed96d610039870"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma le_plus_trans_r : forall n m p, n <= m -> n <= p + m.",
            "VernacStartTheoremProof",
            "9371b1dbeebf6195f814b2bf6f074ca6ac84760d"
        ],
        [
            "intros;rewrite plus_comm;apply le_plus_trans;assumption.",
            "VernacExtend",
            "f0fed4cb9650fb61cdf74968b48d3f7a63796447"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma sizes_decr : (forall A B \u03931 \u03932 \u0394, sizes (\u03931++A::B::\u03932) \u0394 < sizes (\u03931++A\u2227B::\u03932) \u0394)/\\ (forall A B \u0393 \u03941 \u03942, sizes \u0393 (\u03941++A::\u03942) < sizes \u0393 (\u03941++A\u2227B::\u03942))/\\ (forall A B \u0393 \u03941 \u03942, sizes \u0393 (\u03941++B::\u03942) < sizes \u0393 (\u03941++A\u2227B::\u03942))/\\ (forall A B \u03931 \u03932 \u0394, sizes (\u03931++A::\u03932) \u0394 < sizes (\u03931++A\u2228B::\u03932) \u0394)/\\ (forall A B \u03931 \u03932 \u0394, sizes (\u03931++B::\u03932) \u0394 < sizes (\u03931++A\u2228B::\u03932) \u0394)/\\ (forall A B \u0393 \u03941 \u03942, sizes \u0393 (\u03941++A::B::\u03942) < sizes \u0393 (\u03941++A\u2228B::\u03942))/\\ (forall A B \u03931 \u03932 \u0394, sizes (\u03931++B::\u03932) \u0394 < sizes (\u03931++A\u2192B::\u03932) \u0394)/\\ (forall A B \u03931 \u03932 \u0394, sizes (\u03931++\u03932) (A::\u0394) < sizes (\u03931++A\u2192B::\u03932) \u0394)/\\ (forall A B \u0393 \u03941 \u03942, sizes (A::\u0393)(\u03941++B::\u03942)< sizes \u0393 (\u03941++A\u2192B::\u03942)).",
            "VernacStartTheoremProof",
            "66f0b3c12be83f4b547fc1b9bc9962afe7c2ae2f"
        ],
        [
            "repeat split;intros;try (rewrite sizes_comm_l||rewrite sizes_comm_r); apply plus_lt_compat_l||apply plus_lt_compat_r;induction \u03931||induction \u03941; unfold sizel;simpl;try (apply plus_lt_compat_l;apply IH\u03931||apply IH\u03941); apply le_lt_n_Sm;rewrite <- plus_assoc;try constructor; try apply plus_le_compat_l;apply le_plus_trans_r;constructor.",
            "VernacExtend",
            "bcd941c78e8ca26f2ae19f99d74ee48aee4d61da"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma size_O_atomic : forall \u0393, sizel \u0393=0 -> exists l, \u0393 = map AtomicF l.",
            "VernacStartTheoremProof",
            "82766353835b1b05dbcdb3a77f8ded643e27b22d"
        ],
        [
            "intros;induction \u0393.",
            "VernacExtend",
            "7af0520f7bb33f2712e477557e74b5e60b70ed39"
        ],
        [
            "exists [];reflexivity.",
            "VernacExtend",
            "c8b9102e8497f800d1e90188777522ad3144baa8"
        ],
        [
            "destruct a;try (apply plus_is_O in H as (?&_);simpl in H;discriminate); unfold sizel in H;simpl in H; destruct (IH\u0393 H);[exists (AVar p::x)|exists (ABot::x)];simpl;f_equal;assumption.",
            "VernacExtend",
            "5d0d2b3ea3c9329239762392a3e26ed8685640de"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Ltac temp4 := try contradiction;do 2 econstructor;repeat ((left;in_solve;fail)||right);in_solve.",
            "VernacExtend",
            "94d5e03509904c54691927270dbc50abe5a124a3"
        ],
        [
            "Lemma bool_false : forall b, b=false -> ~Is_true b.",
            "VernacStartTheoremProof",
            "bc86b9114e546cea9c07e55cf4ff688d691e6e71"
        ],
        [
            "intros;subst;auto.",
            "VernacExtend",
            "500ed40eb5eeba21c29aef2459358e703dfa2a8d"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma size_S : forall n \u0393 \u0394, sizes \u0393 \u0394 = S n -> exists A B, In (A\u2192B) \u0393 \\/ In (A\u2192B) \u0394 \\/ In (A\u2228B) \u0393 \\/ In (A\u2228B) \u0394 \\/ In (A\u2227B) \u0393 \\/ In (A\u2227B) \u0394.",
            "VernacStartTheoremProof",
            "49c74408ebb82235043876be6c5aab7939f7a892"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "induction \u0393;[unfold sizes in H;simpl in H;induction \u0394;[discriminate|]|]; (destruct a;[| |temp4..]);unfold sizel in H;simpl in H; destruct (IH\u0394 H) as (?&?&[|[|[|[|[]]]]])||destruct (IH\u0393 H) as (?&?&[|[|[|[|[]]]]]);temp4.",
            "VernacExtend",
            "73e1a1586f8d42b8a5c354f16bc87242bf2ac276"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Ltac temp5 A B Hy := let C:= fresh \"C\" with K1 := fresh \"K\" with K2 := fresh \"KK\" in intros v L;case_eq (TrueQ v A);case_eq (TrueQ v B);intros K1 K2; try (exists A;split;[in_solve|rewrite K2;simpl;exact I];fail); try (exists B;split;[in_solve|rewrite K1;simpl;exact I];fail); try (exfalso;apply (bool_false K1);apply L;in_solve;fail); try (exfalso;apply (bool_false K2);apply L;in_solve;fail); (destruct (Hy v) as (C&?&?); [intros ? ?;in_solve;try (apply L;in_solve;fail); simpl;try rewrite K1;try rewrite K2;simpl;exact I| in_solve;try (exists C;split;[in_solve|assumption];fail); simpl in *;rewrite K1 in *;rewrite K2 in *;simpl in *;contradiction ]).",
            "VernacExtend",
            "2a91e4e5e4468d0c831bfae3f35f1ac6ed0d4721"
        ],
        [
            "Theorem Gcf_complete_induction : forall n \u0393 \u0394, sizes \u0393 \u0394 <= n -> \u0393 =\u2283 \u0394 -> \u0393 \u2283c \u0394.",
            "VernacStartTheoremProof",
            "46bf4396f61f8e011ae0a78542c0d7ec65342c56"
        ],
        [
            "induction n;intros.",
            "VernacExtend",
            "e8b82b855d5905dc30933ce159f82ecc1428bcaa"
        ],
        [
            "inversion H.",
            "VernacExtend",
            "ee20838bdd77512b43142d655a3924bf07bffebb"
        ],
        [
            "apply plus_is_O in H2 as (?&?).",
            "VernacExtend",
            "15247fb4bd7554578480526201785aea48630e35"
        ],
        [
            "apply size_O_atomic in H1 as (?&?);apply size_O_atomic in H2 as (?&?);subst.",
            "VernacExtend",
            "62b1955db4ce2df9384db1b7a4ff1d43339b1173"
        ],
        [
            "remember (fun P => if (in_dec Atomic_eqdec (AVar P) x) then true else false) as v.",
            "VernacExtend",
            "d5b869c6b8e431847e8304b822f22692b1736d72"
        ],
        [
            "destruct (in_dec Atomic_eqdec ABot x).",
            "VernacExtend",
            "42f5a6bfa36a5c4e7f9703fe2257036767482b43"
        ],
        [
            "constructor 2;change \u22a5 with (AtomicF ABot);eapply in_map;assumption.",
            "VernacExtend",
            "ebff559b71ca366a38ed96c4aa98b6945be0bed4"
        ],
        [
            "destruct (H0 v) as (?&?&?).",
            "VernacExtend",
            "fbd66ea0ef1f704529809549f315bbe92f733f42"
        ],
        [
            "intros ? ?.",
            "VernacExtend",
            "546ddfdd2482db9e439533251e7f222ee06f71aa"
        ],
        [
            "apply in_map_iff in H1 as (?&?&?);subst A;simpl;destruct x1.",
            "VernacExtend",
            "86634604e661f00d209c924af792f4c48eb0e531"
        ],
        [
            "rewrite Heqv;simpl.",
            "VernacExtend",
            "902efa9d537df76ce799918e54689a3f96d51a6e"
        ],
        [
            "destruct (in_dec Atomic_eqdec (AVar p) x);[exact I|contradiction].",
            "VernacExtend",
            "f139f10bdc40a179b1f0ea7dd9322c274e0fbe42"
        ],
        [
            "contradiction.",
            "VernacExtend",
            "9b6a5c45e1144cbbccd544effb2a97082518704a"
        ],
        [
            "apply in_map_iff in H1 as (?&?&?);subst x1.",
            "VernacExtend",
            "d172184058b13a10bac2b242e5bde402c9c584d7"
        ],
        [
            "destruct x2.",
            "VernacExtend",
            "06b7356f3445eedbfafb62a699d0172c159f7c63"
        ],
        [
            "constructor 1 with p.",
            "VernacExtend",
            "dd418b095bd6f854002267c87e11f85031af150c"
        ],
        [
            "change #p with (AtomicF (AVar p));apply in_map.",
            "VernacExtend",
            "24406022b51425c6194dd0ae8f9dec31505fbe5e"
        ],
        [
            "simpl in H2;rewrite Heqv in H2.",
            "VernacExtend",
            "41cb931d2e4e978e0da7666c88ae0117aced5e4b"
        ],
        [
            "destruct (in_dec Atomic_eqdec (AVar p));[assumption|contradiction].",
            "VernacExtend",
            "fbd7b8c6c3e68bbbdf6fc883170044e59dc3408c"
        ],
        [
            "change #p with (AtomicF (AVar p)).",
            "VernacExtend",
            "01d1181c29a4b4622f8f62da75d4d66292c0cd50"
        ],
        [
            "apply in_map.",
            "VernacExtend",
            "8b1d6650eff402b483dc29bd25bb3e04ea7f525b"
        ],
        [
            "assumption.",
            "VernacExtend",
            "41f0308313ff87e6ab2782f90d6021ec4b55d932"
        ],
        [
            "contradiction.",
            "VernacExtend",
            "9b6a5c45e1144cbbccd544effb2a97082518704a"
        ],
        [
            "inversion H;[clear H|apply IHn;assumption];destruct (size_S _ _ H2) as (A&B&[|[|[|[|[]]]]]); apply in_split in H as (?&?&?);subst;constr;apply IHn; try (apply le_S_n;rewrite <- H2;apply sizes_decr);temp5 A B H0.",
            "VernacExtend",
            "e796e9ff979b58b693ff2db39f833e11dbdef04e"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Theorem Gcf_complete : forall \u0393 \u0394, \u0393 =\u2283 \u0394 -> \u0393 \u2283c \u0394.",
            "VernacStartTheoremProof",
            "7b5179d94e89fe7452f8b76f2258702694fa9545"
        ],
        [
            "intros;eapply Gcf_complete_induction;[constructor|assumption].",
            "VernacExtend",
            "4404d899631c389a8045251a49ccbd12cb9c3001"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Theorem Cut_elimination : forall \u0393 \u0394, \u0393 \u2283 \u0394 -> \u0393 \u2283c \u0394.",
            "VernacStartTheoremProof",
            "f31bc1b56ca3b6edb9f7ce8ad1f752f689511fa6"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "apply Gcf_complete.",
            "VernacExtend",
            "c2441208b78eb7d12e207febfae0726989d77195"
        ],
        [
            "apply G_sound.",
            "VernacExtend",
            "b9902d16e07fa4fa9b3643ab59ef7ff31336bd5f"
        ],
        [
            "assumption.",
            "VernacExtend",
            "41f0308313ff87e6ab2782f90d6021ec4b55d932"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Print Assumptions Cut_elimination.",
            "VernacPrint",
            "df83fea6a8571c339d6e18673a8fdae441bc1bf2"
        ],
        [
            "End cut_mod.",
            "VernacEndSegment",
            "686606f44cee2081538991e959e7a357711b3096"
        ]
    ],
    "proofs": [
        {
            "name": "G_to_Gcf",
            "line_nb": 13,
            "steps": [
                {
                    "command": [
                        "induction 1;[econstructor|constructor|constr..];eassumption.",
                        "VernacExtend",
                        "e7592cb06103ddefc23dc42b41ef0f1915ec0dfc"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "G_sound",
            "line_nb": 16,
            "steps": [
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "apply G_to_Nc in H.",
                        "VernacExtend",
                        "1283312673ea417120da56dfc67b5a5dcd549274"
                    ]
                },
                {
                    "command": [
                        "apply Soundness_general in H.",
                        "VernacExtend",
                        "e1924d5eff786a6f576a970ef1845d1eaf80206a"
                    ]
                },
                {
                    "command": [
                        "remember (H v H0).",
                        "VernacExtend",
                        "d9e87956404b887148cc2a72542f5c4a37353b33"
                    ]
                },
                {
                    "command": [
                        "clear -i H0.",
                        "VernacExtend",
                        "ed499c5e138326a534a16d916dfdbe177753a2a4"
                    ]
                },
                {
                    "command": [
                        "induction \u0394.",
                        "VernacExtend",
                        "103195403a2c184c4eb4ee5f272ecbebf20c7085"
                    ]
                },
                {
                    "command": [
                        "contradiction.",
                        "VernacExtend",
                        "9b6a5c45e1144cbbccd544effb2a97082518704a"
                    ]
                },
                {
                    "command": [
                        "simpl in i.",
                        "VernacExtend",
                        "c07e171b7e5f65daae0b6eab58ebab18367c7b1e"
                    ]
                },
                {
                    "command": [
                        "case_eq (TrueQ v a);intro K;rewrite K in *;simpl in *.",
                        "VernacExtend",
                        "0795b1de586f823fc362bc267aa6d56675f206fc"
                    ]
                },
                {
                    "command": [
                        "exists a;split;[in_solve|rewrite K;trivial].",
                        "VernacExtend",
                        "9fcf27b1a83cb982e3bb6c137262e7a736a69818"
                    ]
                },
                {
                    "command": [
                        "destruct (IH\u0394 i) as (?&?&?).",
                        "VernacExtend",
                        "82707724ca97ba50c5680226ea07aaa26b36983c"
                    ]
                },
                {
                    "command": [
                        "exists x;split;[in_solve|assumption].",
                        "VernacExtend",
                        "717be8bc80188ff09cafa75353f7fb16b23f37d2"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "Atomic_eqdec",
            "line_nb": 30,
            "steps": [
                {
                    "command": [
                        "intros;destruct x;destruct y;try (right;discriminate);try (left;reflexivity); destruct (Varseq_dec p p0); (left;f_equal;assumption)||(right;intro HH;injection HH;contradiction).",
                        "VernacExtend",
                        "d2fcc286ee9ee79a9d9d81158e7a12550f1edc91"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "sizes_comm",
            "line_nb": 33,
            "steps": [
                {
                    "command": [
                        "intros;unfold sizes;apply plus_comm;reflexivity.",
                        "VernacExtend",
                        "b20a1147f5c5836822f79f7bf5ea79b36cdf0c26"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "sizes_comm_r",
            "line_nb": 36,
            "steps": [
                {
                    "command": [
                        "intros;induction \u03931;unfold sizes;unfold sizel;simpl.",
                        "VernacExtend",
                        "ac18446ca502bbf579b67b919c55654cf6f46d70"
                    ]
                },
                {
                    "command": [
                        "rewrite plus_assoc;f_equal;apply plus_comm.",
                        "VernacExtend",
                        "ebfc16e49c5835b5d98015a3f67411bbc85e517e"
                    ]
                },
                {
                    "command": [
                        "rewrite <- !plus_assoc;f_equal;apply IH\u03931.",
                        "VernacExtend",
                        "c0c645cd10f1b3d1d86cdf945a14794936f9bffa"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "sizes_comm_l",
            "line_nb": 41,
            "steps": [
                {
                    "command": [
                        "intros;rewrite sizes_comm;rewrite sizes_comm_r;apply sizes_comm.",
                        "VernacExtend",
                        "e10ea0876446fc46be4d4ebd53ed96d610039870"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "le_plus_trans_r",
            "line_nb": 44,
            "steps": [
                {
                    "command": [
                        "intros;rewrite plus_comm;apply le_plus_trans;assumption.",
                        "VernacExtend",
                        "f0fed4cb9650fb61cdf74968b48d3f7a63796447"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "sizes_decr",
            "line_nb": 47,
            "steps": [
                {
                    "command": [
                        "repeat split;intros;try (rewrite sizes_comm_l||rewrite sizes_comm_r); apply plus_lt_compat_l||apply plus_lt_compat_r;induction \u03931||induction \u03941; unfold sizel;simpl;try (apply plus_lt_compat_l;apply IH\u03931||apply IH\u03941); apply le_lt_n_Sm;rewrite <- plus_assoc;try constructor; try apply plus_le_compat_l;apply le_plus_trans_r;constructor.",
                        "VernacExtend",
                        "bcd941c78e8ca26f2ae19f99d74ee48aee4d61da"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "size_O_atomic",
            "line_nb": 50,
            "steps": [
                {
                    "command": [
                        "intros;induction \u0393.",
                        "VernacExtend",
                        "7af0520f7bb33f2712e477557e74b5e60b70ed39"
                    ]
                },
                {
                    "command": [
                        "exists [];reflexivity.",
                        "VernacExtend",
                        "c8b9102e8497f800d1e90188777522ad3144baa8"
                    ]
                },
                {
                    "command": [
                        "destruct a;try (apply plus_is_O in H as (?&_);simpl in H;discriminate); unfold sizel in H;simpl in H; destruct (IH\u0393 H);[exists (AVar p::x)|exists (ABot::x)];simpl;f_equal;assumption.",
                        "VernacExtend",
                        "5d0d2b3ea3c9329239762392a3e26ed8685640de"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "bool_false",
            "line_nb": 56,
            "steps": [
                {
                    "command": [
                        "intros;subst;auto.",
                        "VernacExtend",
                        "500ed40eb5eeba21c29aef2459358e703dfa2a8d"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "size_S",
            "line_nb": 59,
            "steps": [
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "induction \u0393;[unfold sizes in H;simpl in H;induction \u0394;[discriminate|]|]; (destruct a;[| |temp4..]);unfold sizel in H;simpl in H; destruct (IH\u0394 H) as (?&?&[|[|[|[|[]]]]])||destruct (IH\u0393 H) as (?&?&[|[|[|[|[]]]]]);temp4.",
                        "VernacExtend",
                        "73e1a1586f8d42b8a5c354f16bc87242bf2ac276"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "Gcf_complete_induction",
            "line_nb": 64,
            "steps": [
                {
                    "command": [
                        "induction n;intros.",
                        "VernacExtend",
                        "e8b82b855d5905dc30933ce159f82ecc1428bcaa"
                    ]
                },
                {
                    "command": [
                        "inversion H.",
                        "VernacExtend",
                        "ee20838bdd77512b43142d655a3924bf07bffebb"
                    ]
                },
                {
                    "command": [
                        "apply plus_is_O in H2 as (?&?).",
                        "VernacExtend",
                        "15247fb4bd7554578480526201785aea48630e35"
                    ]
                },
                {
                    "command": [
                        "apply size_O_atomic in H1 as (?&?);apply size_O_atomic in H2 as (?&?);subst.",
                        "VernacExtend",
                        "62b1955db4ce2df9384db1b7a4ff1d43339b1173"
                    ]
                },
                {
                    "command": [
                        "remember (fun P => if (in_dec Atomic_eqdec (AVar P) x) then true else false) as v.",
                        "VernacExtend",
                        "d5b869c6b8e431847e8304b822f22692b1736d72"
                    ]
                },
                {
                    "command": [
                        "destruct (in_dec Atomic_eqdec ABot x).",
                        "VernacExtend",
                        "42f5a6bfa36a5c4e7f9703fe2257036767482b43"
                    ]
                },
                {
                    "command": [
                        "constructor 2;change \u22a5 with (AtomicF ABot);eapply in_map;assumption.",
                        "VernacExtend",
                        "ebff559b71ca366a38ed96c4aa98b6945be0bed4"
                    ]
                },
                {
                    "command": [
                        "destruct (H0 v) as (?&?&?).",
                        "VernacExtend",
                        "fbd66ea0ef1f704529809549f315bbe92f733f42"
                    ]
                },
                {
                    "command": [
                        "intros ? ?.",
                        "VernacExtend",
                        "546ddfdd2482db9e439533251e7f222ee06f71aa"
                    ]
                },
                {
                    "command": [
                        "apply in_map_iff in H1 as (?&?&?);subst A;simpl;destruct x1.",
                        "VernacExtend",
                        "86634604e661f00d209c924af792f4c48eb0e531"
                    ]
                },
                {
                    "command": [
                        "rewrite Heqv;simpl.",
                        "VernacExtend",
                        "902efa9d537df76ce799918e54689a3f96d51a6e"
                    ]
                },
                {
                    "command": [
                        "destruct (in_dec Atomic_eqdec (AVar p) x);[exact I|contradiction].",
                        "VernacExtend",
                        "f139f10bdc40a179b1f0ea7dd9322c274e0fbe42"
                    ]
                },
                {
                    "command": [
                        "contradiction.",
                        "VernacExtend",
                        "9b6a5c45e1144cbbccd544effb2a97082518704a"
                    ]
                },
                {
                    "command": [
                        "apply in_map_iff in H1 as (?&?&?);subst x1.",
                        "VernacExtend",
                        "d172184058b13a10bac2b242e5bde402c9c584d7"
                    ]
                },
                {
                    "command": [
                        "destruct x2.",
                        "VernacExtend",
                        "06b7356f3445eedbfafb62a699d0172c159f7c63"
                    ]
                },
                {
                    "command": [
                        "constructor 1 with p.",
                        "VernacExtend",
                        "dd418b095bd6f854002267c87e11f85031af150c"
                    ]
                },
                {
                    "command": [
                        "change #p with (AtomicF (AVar p));apply in_map.",
                        "VernacExtend",
                        "24406022b51425c6194dd0ae8f9dec31505fbe5e"
                    ]
                },
                {
                    "command": [
                        "simpl in H2;rewrite Heqv in H2.",
                        "VernacExtend",
                        "41cb931d2e4e978e0da7666c88ae0117aced5e4b"
                    ]
                },
                {
                    "command": [
                        "destruct (in_dec Atomic_eqdec (AVar p));[assumption|contradiction].",
                        "VernacExtend",
                        "fbd7b8c6c3e68bbbdf6fc883170044e59dc3408c"
                    ]
                },
                {
                    "command": [
                        "change #p with (AtomicF (AVar p)).",
                        "VernacExtend",
                        "01d1181c29a4b4622f8f62da75d4d66292c0cd50"
                    ]
                },
                {
                    "command": [
                        "apply in_map.",
                        "VernacExtend",
                        "8b1d6650eff402b483dc29bd25bb3e04ea7f525b"
                    ]
                },
                {
                    "command": [
                        "assumption.",
                        "VernacExtend",
                        "41f0308313ff87e6ab2782f90d6021ec4b55d932"
                    ]
                },
                {
                    "command": [
                        "contradiction.",
                        "VernacExtend",
                        "9b6a5c45e1144cbbccd544effb2a97082518704a"
                    ]
                },
                {
                    "command": [
                        "inversion H;[clear H|apply IHn;assumption];destruct (size_S _ _ H2) as (A&B&[|[|[|[|[]]]]]); apply in_split in H as (?&?&?);subst;constr;apply IHn; try (apply le_S_n;rewrite <- H2;apply sizes_decr);temp5 A B H0.",
                        "VernacExtend",
                        "e796e9ff979b58b693ff2db39f833e11dbdef04e"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "Gcf_complete",
            "line_nb": 90,
            "steps": [
                {
                    "command": [
                        "intros;eapply Gcf_complete_induction;[constructor|assumption].",
                        "VernacExtend",
                        "4404d899631c389a8045251a49ccbd12cb9c3001"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "Cut_elimination",
            "line_nb": 93,
            "steps": [
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "apply Gcf_complete.",
                        "VernacExtend",
                        "c2441208b78eb7d12e207febfae0726989d77195"
                    ]
                },
                {
                    "command": [
                        "apply G_sound.",
                        "VernacExtend",
                        "b9902d16e07fa4fa9b3643ab59ef7ff31336bd5f"
                    ]
                },
                {
                    "command": [
                        "assumption.",
                        "VernacExtend",
                        "41f0308313ff87e6ab2782f90d6021ec4b55d932"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        }
    ]
}