{
    "filename": "Functions.v",
    "coq_project": "checker",
    "vernac_cmds": [
        [
            "Section Mappings.",
            "VernacBeginSection",
            "6cd40c67604d070f8958fa54b4444fc0cdf7d9a5"
        ],
        [
            "Variable X Y : Set.",
            "VernacAssumption",
            "2521ce9e48c308bb56b8f37d4e7e63ceb5bc289a"
        ],
        [
            "Variable f : X -> Y.",
            "VernacAssumption",
            "c363f4b1fa8d96750fa06e57e0832d02e41ae26a"
        ],
        [
            "Definition Injective := forall x x' : X, f x = f x' -> x = x'.",
            "VernacDefinition",
            "f7bc90db536f2be827b3deb6f3e680d3febb422d"
        ],
        [
            "Definition Surjective := forall y : Y, exists x : X, y = f x.",
            "VernacDefinition",
            "2c1c9c4060d77f1bafa662708a4463d8706a901e"
        ],
        [
            "End Mappings.",
            "VernacEndSegment",
            "9cc86123a68d5c7ba2d69f75579e7901df97a273"
        ],
        [
            "Notation One_one := (Injective _ _) (only parsing).",
            "VernacSyntacticDefinition",
            "f1789135df35fcc224fc1e9c738bc3f666fc8f5c"
        ],
        [
            "Notation Onto := (Surjective _ _) (only parsing).",
            "VernacSyntacticDefinition",
            "41cb487bef40a0ca9564ba5c52da01d0ee5ffdfa"
        ],
        [
            "Section Finiteness.",
            "VernacBeginSection",
            "02de8afcf19d7331659a5177db2cf7b85d719340"
        ],
        [
            "Variable X : Set.",
            "VernacAssumption",
            "c51d90a3990436d97d50320a95d1182ba70a3bce"
        ],
        [
            "Definition Finite := forall f : X -> X, Injective _ _ f -> Surjective _ _ f.",
            "VernacDefinition",
            "974268692db2645ff4815eba3e5db4c5606fec8c"
        ],
        [
            "End Finiteness.",
            "VernacEndSegment",
            "c4352f325b6986e9999e79502247a0c5d7972b9b"
        ],
        [
            "Section Composition.",
            "VernacBeginSection",
            "57a8865362458e4847120d1a7dace64b434b4d4e"
        ],
        [
            "Variable X Y Z : Set.",
            "VernacAssumption",
            "a351fea477c7a6ecc9853b22426c026410d83258"
        ],
        [
            "Variable f : X -> Y.",
            "VernacAssumption",
            "c363f4b1fa8d96750fa06e57e0832d02e41ae26a"
        ],
        [
            "Variable g : Y -> Z.",
            "VernacAssumption",
            "b67da614619f6ed1d983e86e78c7d76fdff51caa"
        ],
        [
            "Definition comp (x : X) := g (f x).",
            "VernacDefinition",
            "522b2d8dd9d6e43371a1e3f8c0b5235bab0aeddc"
        ],
        [
            "End Composition.",
            "VernacEndSegment",
            "c1e1f2192633a0b7eb03081be87b6dc8ae600b9b"
        ],
        [
            "Notation \"f 'o' g\" := (comp _ _ _ f g) (at level 20, right associativity).",
            "VernacNotation",
            "b9243e59c06948a46f8d70c43810822099c2422e"
        ],
        [
            "Hint Unfold Injective Surjective comp.",
            "VernacHints",
            "a6333cc7f2d335feba40c3638b50829505baffc6"
        ],
        [
            "Section Preservation.",
            "VernacBeginSection",
            "718c14159b7354544805789a0b6ae98b14d4b83c"
        ],
        [
            "Variable X Y Z : Set.",
            "VernacAssumption",
            "a351fea477c7a6ecc9853b22426c026410d83258"
        ],
        [
            "Variable f : X -> Y.",
            "VernacAssumption",
            "c363f4b1fa8d96750fa06e57e0832d02e41ae26a"
        ],
        [
            "Variable g : Y -> Z.",
            "VernacAssumption",
            "b67da614619f6ed1d983e86e78c7d76fdff51caa"
        ],
        [
            "Lemma Injections_compose : Injective _ _ f -> Injective _ _ g -> Injective _ _ (f o g).",
            "VernacStartTheoremProof",
            "3a3718e2b495c2afbc5423bc4a3428a1778668d9"
        ],
        [
            "auto.",
            "VernacExtend",
            "1f09da0addd069b3b65326f8c71967acc1e985af"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma Surjections_right : Surjective _ _ (f o g) -> Surjective _ _ g.",
            "VernacStartTheoremProof",
            "d99672b6e669f3e00935795b77bef2608e276af9"
        ],
        [
            "intro Sfg; red in |- *; intro z; elim (Sfg z).",
            "VernacExtend",
            "02d8555b58152aa4591d66595770a113aefc401b"
        ],
        [
            "intros x E; exists (f x); trivial.",
            "VernacExtend",
            "eff94e6ff928b8a8167ba2ee9244a9bbe6f90c63"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma Surjections_compose : Surjective _ _ f -> Surjective _ _ g -> Surjective _ _ (f o g).",
            "VernacStartTheoremProof",
            "092bbee81beef2454b2b55e81269c2224ee0524e"
        ],
        [
            "unfold Surjective, comp in |- *; intros Sf Sg z.",
            "VernacExtend",
            "d6c5a08a5a835dd990ba9467833a506294bbb04b"
        ],
        [
            "elim (Sg z); intros y E; elim (Sf y); intros x E'.",
            "VernacExtend",
            "e329cf17d929aa21f850e6d3d6349f64d4241da2"
        ],
        [
            "exists x; rewrite E; rewrite E'; trivial.",
            "VernacExtend",
            "0c34fa60639def37be59dabfb0ba0d8a7d95f31e"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "End Preservation.",
            "VernacEndSegment",
            "bc066d725b4964608e17e863052a341a7b9473d7"
        ]
    ],
    "proofs": [
        {
            "name": "Injections_compose",
            "line_nb": 24,
            "steps": [
                {
                    "command": [
                        "auto.",
                        "VernacExtend",
                        "1f09da0addd069b3b65326f8c71967acc1e985af"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "Surjections_right",
            "line_nb": 27,
            "steps": [
                {
                    "command": [
                        "intro Sfg; red in |- *; intro z; elim (Sfg z).",
                        "VernacExtend",
                        "02d8555b58152aa4591d66595770a113aefc401b"
                    ]
                },
                {
                    "command": [
                        "intros x E; exists (f x); trivial.",
                        "VernacExtend",
                        "eff94e6ff928b8a8167ba2ee9244a9bbe6f90c63"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "Surjections_compose",
            "line_nb": 31,
            "steps": [
                {
                    "command": [
                        "unfold Surjective, comp in |- *; intros Sf Sg z.",
                        "VernacExtend",
                        "d6c5a08a5a835dd990ba9467833a506294bbb04b"
                    ]
                },
                {
                    "command": [
                        "elim (Sg z); intros y E; elim (Sf y); intros x E'.",
                        "VernacExtend",
                        "e329cf17d929aa21f850e6d3d6349f64d4241da2"
                    ]
                },
                {
                    "command": [
                        "exists x; rewrite E; rewrite E'; trivial.",
                        "VernacExtend",
                        "0c34fa60639def37be59dabfb0ba0d8a7d95f31e"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        }
    ]
}