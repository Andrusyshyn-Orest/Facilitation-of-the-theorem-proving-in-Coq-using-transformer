{
    "filename": "ne_tree.v",
    "coq_project": "quicksort-complexity",
    "vernac_cmds": [
        [
            "Set Implicit Arguments.",
            "VernacSetOption",
            "9e84ff8896f028601d8aded48c1d4aebe60aa584"
        ],
        [
            "Unset Automatic Introduction.",
            "VernacUnsetOption",
            "0bdf551241b98d9f3f23abf14fca2f7a9b3ee136"
        ],
        [
            "Require ne_list.",
            "VernacRequire",
            "742372fea7850d4df74629644c14dc442062462b"
        ],
        [
            "Require Import Setoid.",
            "VernacRequire",
            "284440985a70c8fcd47c58e3c189cb93b9ec0fcb"
        ],
        [
            "Require Import util.",
            "VernacRequire",
            "4430f87d7649f96d1418f130d57967666d56d84f"
        ],
        [
            "Require List.",
            "VernacRequire",
            "a1d54140926e7890ab05a709dad185ab68598100"
        ],
        [
            "Section contents.",
            "VernacBeginSection",
            "64247bb134c943946794e7969d57832818b1ace7"
        ],
        [
            "Variable E: Set.",
            "VernacAssumption",
            "159cf207941eaecc961b13b2df59c01a4e359581"
        ],
        [
            "Unset Elimination Schemes.",
            "VernacUnsetOption",
            "4d234cd3b6f71aa059ae1f499612aad67477dab3"
        ],
        [
            "Inductive T: Set := | Leaf: E -> T | Node: ne_list.L T -> T.",
            "VernacInductive",
            "dbce003abc1b53706969872d8c74eac7d5ae4d14"
        ],
        [
            "Set Elimination Schemes.",
            "VernacSetOption",
            "9b6e063f1120f1f70865635a7510d0d8704e68a4"
        ],
        [
            "Definition fold (Y: Set) (f: E -> Y) (g: ne_list.L Y -> Y): T -> Y := fix F (t: T) := match t with | Leaf e => f e | Node l => g (ne_list.map F l) end.",
            "VernacDefinition",
            "c91437eaf07ce118fc6776dbd78cb55e103381a1"
        ],
        [
            "Definition T_rect (P: T -> Type) (Pleaf: forall n, P (Leaf n)) (Pone: forall t, P t -> P (Node (ne_list.one t))) (Pcons: forall t l, P t -> P (Node l) -> P (Node (ne_list.cons t l))): forall t, P t := fix F (t: T) := match t return P t with | Leaf n => Pleaf n | Node l => (fix G (r: ne_list.L T) := match r return P (Node r) with | ne_list.one x => Pone x (F x) | ne_list.cons x y => Pcons x y (F x) (G y) end) l end.",
            "VernacDefinition",
            "58cbda62dfb688bb88ae76acfad24933cda3e8df"
        ],
        [
            "Definition T_ind (P: T -> Prop) (Pleaf: forall n, P (Leaf n)) (Pone: forall t, P t -> P (Node (ne_list.one t))) (Pcons: forall t l, P t -> P (Node l) -> P (Node (ne_list.cons t l))): forall t, P t := T_rect P Pleaf Pone Pcons.",
            "VernacDefinition",
            "a1472ed05f3e0a37f58284ccd60e4a9a09e19c56"
        ],
        [
            "Definition T_rec (P: T -> Set) (Pleaf: forall n, P (Leaf n)) (Pone: forall t, P t -> P (Node (ne_list.one t))) (Pcons: forall t l, P t -> P (Node l) -> P (Node (ne_list.cons t l))): forall t, P t := T_rect P Pleaf Pone Pcons.",
            "VernacDefinition",
            "5178992db0be6c18d29da0b3680af9723c4be60c"
        ],
        [
            "Definition alt_ind (P: T -> Prop) (Pleaf: forall n, P (Leaf n)) (Pnode: forall l:ne_list.L T, (forall t, List.In t l -> P t) -> P (Node l)) (t: T): P t .",
            "VernacDefinition",
            "396f276989f23e2f833a1cfebea16628dcdd073a"
        ],
        [
            "Proof with auto.",
            "VernacProof",
            "a7e71b78b5628467da426641e148a0229b525f22"
        ],
        [
            "intros P Hbase Hrcd.",
            "VernacExtend",
            "c411a138169272a525ab18f9eb37302f9ec360ba"
        ],
        [
            "refine (fix IH (t:T) {struct t} : P t := _).",
            "VernacExtend",
            "65e45a922236cf7d86719a5e4155ae378d77d9dd"
        ],
        [
            "destruct t.",
            "VernacExtend",
            "03d3fc39431171b40684d8dff6748881af772fc7"
        ],
        [
            "apply Hbase.",
            "VernacExtend",
            "6e5c1b2545a32e8183657394be77f2cd899afce4"
        ],
        [
            "apply Hrcd.",
            "VernacExtend",
            "e0cb6ffca8e0a478953215c40cd7b8f45317ed2c"
        ],
        [
            "induction l.",
            "VernacExtend",
            "1194af70832939708f8c7fde2f18f81c37b97a0c"
        ],
        [
            "simpl.",
            "VernacExtend",
            "1b93169f4cf876d207c1fab22a2347202ab48d85"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "destruct H.",
            "VernacExtend",
            "8b2bca015429da94c456243b461e17a2a0582c40"
        ],
        [
            "rewrite <- H.",
            "VernacExtend",
            "95b84807b4afb2ef79b7cc04a1c91a4e3a502e47"
        ],
        [
            "apply IH.",
            "VernacExtend",
            "88103d45393d3ee3ab547447d913543854db8cea"
        ],
        [
            "elimtype False.",
            "VernacExtend",
            "193053c8983316978aeded05598d605cc4f35bde"
        ],
        [
            "exact H.",
            "VernacExtend",
            "ce8e3e03bec1b3366baf128fe7eab49b160bc6a4"
        ],
        [
            "simpl.",
            "VernacExtend",
            "1b93169f4cf876d207c1fab22a2347202ab48d85"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "destruct H.",
            "VernacExtend",
            "8b2bca015429da94c456243b461e17a2a0582c40"
        ],
        [
            "rewrite <- H.",
            "VernacExtend",
            "95b84807b4afb2ef79b7cc04a1c91a4e3a502e47"
        ],
        [
            "apply IH.",
            "VernacExtend",
            "88103d45393d3ee3ab547447d913543854db8cea"
        ],
        [
            "apply IHl.",
            "VernacExtend",
            "af412c6009bba78f939aa53ab07dcd1baaf5888b"
        ],
        [
            "assumption.",
            "VernacExtend",
            "41f0308313ff87e6ab2782f90d6021ec4b55d932"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Section alt_rect2.",
            "VernacBeginSection",
            "53da98e4c098c7c2d5c1390d541c72d840fecd6e"
        ],
        [
            "Variable P: T -> Type.",
            "VernacAssumption",
            "ceb9114bd4add9f61ce8faccf71043241f7aef59"
        ],
        [
            "Variable Q: ne_list.L T -> Type.",
            "VernacAssumption",
            "19e6a575564c10e0f02a1cace7dc6ecfd61e110c"
        ],
        [
            "Variable Pleaf: forall n, P (Leaf n).",
            "VernacAssumption",
            "43c15b3537639f3b105bc6a73b19ec5bf832c09d"
        ],
        [
            "Variable Pnode: forall l, Q l -> P (Node l).",
            "VernacAssumption",
            "d6e99400bd589b895d96651a2e88bd41d85a9f3c"
        ],
        [
            "Variable Qone: forall t, P t -> Q (ne_list.one t).",
            "VernacAssumption",
            "1b3f09b12564acac12c7c90271e0bfe5c4a3869c"
        ],
        [
            "Variable Qcons: forall t l, P t -> Q l -> Q (ne_list.cons t l).",
            "VernacAssumption",
            "4f12aa62f9969e97e274fdf149f2ba4ad716e5db"
        ],
        [
            "Fixpoint alt_rect2 (t: T): P t := match t return P t with | Leaf x => Pleaf x | Node l => Pnode ((fix F (l: ne_list.L T) := match l return Q l with | ne_list.one t => Qone (alt_rect2 t) | ne_list.cons x y => @Qcons x y (alt_rect2 x) (F y) end) l) end.",
            "VernacFixpoint",
            "40c3c4816245dbec731426e761594061beaeda46"
        ],
        [
            "End alt_rect2.",
            "VernacEndSegment",
            "fedb363586e14b1c9e615ecb43ade3fc68e1780f"
        ],
        [
            "Definition alt_ind2 (P: T -> Prop) (Q: ne_list.L T -> Prop) (Pleaf: forall n, P (Leaf n)) (Pnode: forall l, Q l -> P (Node l)) (Qone: forall t, P t -> Q (ne_list.one t)) (Qcons: forall t l, P t -> Q l -> Q (ne_list.cons t l)): forall t, P t := alt_rect2 P Q Pleaf Pnode Qone Qcons.",
            "VernacDefinition",
            "44315bbc5316f9ad72e8e30677db7a9f1db77a0b"
        ],
        [
            "Definition alt_rec2 (P: T -> Set) (Q: ne_list.L T -> Set) (Pleaf: forall n, P (Leaf n)) (Pnode: forall l, Q l -> P (Node l)) (Qone: forall t, P t -> Q (ne_list.one t)) (Qcons: forall t l, P t -> Q l -> Q (ne_list.cons t l)): forall t, P t := alt_rect2 P Q Pleaf Pnode Qone Qcons.",
            "VernacDefinition",
            "397009924bae06dc57295c49933b8f7454436410"
        ],
        [
            "Fixpoint head (t: T): E := match t with | Leaf e => e | Node l => head (ne_list.head l) end.",
            "VernacFixpoint",
            "e7a646d9edc7e1725dc9368d79e1e55c11ec8a94"
        ],
        [
            "Inductive In (e: E): T -> Prop := | InLeaf: In e (Leaf e) | InNode l: InL e l -> In e (Node l) with InL (e: E): ne_list.L T -> Prop := | InOne t: In e t -> InL e (ne_list.one t) | InHead t l: In e t -> InL e (ne_list.cons t l) | InTail t l: InL e l -> InL e (ne_list.cons t l).",
            "VernacInductive",
            "26089e0385acd6e0fe0a981685b0b5ded7a4756e"
        ],
        [
            "Lemma InL_map_inv (Q: Set) (e: E) (f: Q -> T) (l: ne_list.L Q): InL e (ne_list.map f l) -> exists e', In e (f e') /\\ List.In e' l.",
            "VernacStartTheoremProof",
            "e3c64ae6229366f38c6bb393ce392c5e1f469d79"
        ],
        [
            "Proof with auto.",
            "VernacProof",
            "a7e71b78b5628467da426641e148a0229b525f22"
        ],
        [
            "intros Q e f.",
            "VernacExtend",
            "e97d2885b88b5c1c81c42199f079f709f1337be1"
        ],
        [
            "induction l.",
            "VernacExtend",
            "1194af70832939708f8c7fde2f18f81c37b97a0c"
        ],
        [
            "simpl.",
            "VernacExtend",
            "1b93169f4cf876d207c1fab22a2347202ab48d85"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "inversion_clear H.",
            "VernacExtend",
            "90909d92eb32e95a21a5b90b29a49dc97bcea342"
        ],
        [
            "exists t.",
            "VernacExtend",
            "1970ed3dcf3aed959b3c5a6207f3f37122ce8608"
        ],
        [
            "split...",
            "VernacExtend",
            "baadab085aba401319b7eae3380d34307a7b74d2"
        ],
        [
            "simpl.",
            "VernacExtend",
            "1b93169f4cf876d207c1fab22a2347202ab48d85"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "inversion_clear H.",
            "VernacExtend",
            "90909d92eb32e95a21a5b90b29a49dc97bcea342"
        ],
        [
            "exists t.",
            "VernacExtend",
            "1970ed3dcf3aed959b3c5a6207f3f37122ce8608"
        ],
        [
            "split...",
            "VernacExtend",
            "baadab085aba401319b7eae3380d34307a7b74d2"
        ],
        [
            "destruct (IHl H0).",
            "VernacExtend",
            "f34b7e84454d5e9a92906416144e139e36e39166"
        ],
        [
            "destruct H.",
            "VernacExtend",
            "8b2bca015429da94c456243b461e17a2a0582c40"
        ],
        [
            "exists x.",
            "VernacExtend",
            "800bf7613c74a608ff1ecae6bb20d349d4e8f84d"
        ],
        [
            "split...",
            "VernacExtend",
            "baadab085aba401319b7eae3380d34307a7b74d2"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "End contents.",
            "VernacEndSegment",
            "28f505b78f584feda38f14dd967d87712e3c7f31"
        ],
        [
            "Hint Constructors In.",
            "VernacHints",
            "4b2279c5da98f94a954793a3785aab94c62f010b"
        ],
        [
            "Hint Resolve InLeaf.",
            "VernacHints",
            "e3258bd1222be4661d786103f9721230b2c5e3bd"
        ],
        [
            "Hint Resolve InNode.",
            "VernacHints",
            "c948a90327e09574756ae2c9b3bfd9b96e81e095"
        ],
        [
            "Hint Resolve InOne.",
            "VernacHints",
            "067e167d2e6720a6090ab1788b60f55a8ba0754b"
        ],
        [
            "Hint Resolve InHead.",
            "VernacHints",
            "8bb7272100a864b66ddc0a30f783304c85e21e91"
        ],
        [
            "Hint Resolve InTail.",
            "VernacHints",
            "3b5181383d2ff0b37da4902f797bf638129bac60"
        ],
        [
            "Definition map (A B: Set) (f: A -> B): T A -> T B := fold (@Leaf _ \u2218 f) (@Node _).",
            "VernacDefinition",
            "c6e4c23abd3de72ef755a97b990ca2438644e5ac"
        ],
        [
            "Add Parametric Morphism (A B: Set): (@map A B) with signature (@ext_eq A B) ==> (@ext_eq (T A) (T B)) as map_ext_morph.",
            "VernacExtend",
            "862439925f099b4cd3587da0c4798f3d0cec4d8d"
        ],
        [
            "Proof with try reflexivity.",
            "VernacProof",
            "befb56c00cf46fe151a7e47055cee5e4b8abae25"
        ],
        [
            "unfold ext_eq.",
            "VernacExtend",
            "f220f29910675d48458da615036407ad227edc9f"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "induction x0; simpl.",
            "VernacExtend",
            "f997cff99fda71104926361d95310d727657f98b"
        ],
        [
            "unfold compose.",
            "VernacExtend",
            "d80e23bf133762584228beafbd8610d99d5d02d5"
        ],
        [
            "rewrite H...",
            "VernacExtend",
            "2ded38871f6ef5ae4e687aa3245494ae541f7202"
        ],
        [
            "rewrite IHx0...",
            "VernacExtend",
            "475192ef356c405e761fc148cef0f672bce95cd2"
        ],
        [
            "rewrite IHx0...",
            "VernacExtend",
            "475192ef356c405e761fc148cef0f672bce95cd2"
        ],
        [
            "simpl in IHx1.",
            "VernacExtend",
            "a6475a8d0c7e25f4d3dc47b415bb341a52c74625"
        ],
        [
            "inversion_clear IHx1...",
            "VernacExtend",
            "20c4ce10218383fc345c512833530a45554f2517"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma In_map_inv (A B: Set) (e: B) (f: A -> B) (t: T A): In e (map f t) -> exists e', e = f e' /\\ In e' t.",
            "VernacStartTheoremProof",
            "10739a06afd8bcdb0983339ebd946a85d57b049e"
        ],
        [
            "Proof with auto.",
            "VernacProof",
            "a7e71b78b5628467da426641e148a0229b525f22"
        ],
        [
            "induction t.",
            "VernacExtend",
            "9d2b9ae883a32c20cdf5f2573034eb3b116aff53"
        ],
        [
            "simpl.",
            "VernacExtend",
            "1b93169f4cf876d207c1fab22a2347202ab48d85"
        ],
        [
            "rewrite comp_apply.",
            "VernacExtend",
            "f94b0882f3d44cce0c4484c4063e03806fcd930c"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "inversion_clear H.",
            "VernacExtend",
            "90909d92eb32e95a21a5b90b29a49dc97bcea342"
        ],
        [
            "eauto.",
            "VernacExtend",
            "d5f3a05ca887c29bb0b422fc64ae2775fea3935e"
        ],
        [
            "simpl.",
            "VernacExtend",
            "1b93169f4cf876d207c1fab22a2347202ab48d85"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "inversion_clear H.",
            "VernacExtend",
            "90909d92eb32e95a21a5b90b29a49dc97bcea342"
        ],
        [
            "inversion_clear H0.",
            "VernacExtend",
            "e21f851b9423020c7f22dae666bca7829c9b1967"
        ],
        [
            "destruct (IHt H).",
            "VernacExtend",
            "6476b4eadafe991c4b2fc4f13f29e343b0a926d3"
        ],
        [
            "destruct H0.",
            "VernacExtend",
            "5c8f6cb3dc303d56935d6ec271a1de04f6790225"
        ],
        [
            "subst.",
            "VernacExtend",
            "ccc9cb848804101be22a0bb6c324861981c5c7f1"
        ],
        [
            "eauto.",
            "VernacExtend",
            "d5f3a05ca887c29bb0b422fc64ae2775fea3935e"
        ],
        [
            "simpl.",
            "VernacExtend",
            "1b93169f4cf876d207c1fab22a2347202ab48d85"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "inversion_clear H.",
            "VernacExtend",
            "90909d92eb32e95a21a5b90b29a49dc97bcea342"
        ],
        [
            "inversion_clear H0.",
            "VernacExtend",
            "e21f851b9423020c7f22dae666bca7829c9b1967"
        ],
        [
            "destruct (IHt H).",
            "VernacExtend",
            "6476b4eadafe991c4b2fc4f13f29e343b0a926d3"
        ],
        [
            "destruct H0.",
            "VernacExtend",
            "5c8f6cb3dc303d56935d6ec271a1de04f6790225"
        ],
        [
            "subst.",
            "VernacExtend",
            "ccc9cb848804101be22a0bb6c324861981c5c7f1"
        ],
        [
            "eauto.",
            "VernacExtend",
            "d5f3a05ca887c29bb0b422fc64ae2775fea3935e"
        ],
        [
            "simpl in IHt0.",
            "VernacExtend",
            "dd82b10d5404c63627f997175512e641ac51ac84"
        ],
        [
            "assert (In e (Node (ne_list.map (map f) l)))...",
            "VernacExtend",
            "37cc0337be37815ee6915861b83a6eac1bfb6f33"
        ],
        [
            "destruct (IHt0 H0).",
            "VernacExtend",
            "5e4ae3b70ba2f6ae5a832869f22b11e1d9f05665"
        ],
        [
            "destruct H1.",
            "VernacExtend",
            "e752c2122f55c888e09082f784a6da990b01fbe7"
        ],
        [
            "subst.",
            "VernacExtend",
            "ccc9cb848804101be22a0bb6c324861981c5c7f1"
        ],
        [
            "exists x.",
            "VernacExtend",
            "800bf7613c74a608ff1ecae6bb20d349d4e8f84d"
        ],
        [
            "split...",
            "VernacExtend",
            "baadab085aba401319b7eae3380d34307a7b74d2"
        ],
        [
            "right.",
            "VernacExtend",
            "27e417a3497755767e1a1d6ba87753ecddaee6b7"
        ],
        [
            "inversion_clear H2...",
            "VernacExtend",
            "a4ff5efb87c186e9cb3eb908a6dcff72bca7f727"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma map_ext (A B: Set) (f g: A -> B): ext_eq f g -> forall x, map f x = map g x.",
            "VernacStartTheoremProof",
            "44c4ee90e372c0aae5fd4779321f0691740c5b71"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "apply map_ext_morph.",
            "VernacExtend",
            "748389719794352183be250dbf26f0d37b0504e2"
        ],
        [
            "assumption.",
            "VernacExtend",
            "41f0308313ff87e6ab2782f90d6021ec4b55d932"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma map_map (A B C: Set) (f: A -> B) (g: B -> C) (t: T A): map g (map f t) = map (g \u2218 f) t.",
            "VernacStartTheoremProof",
            "8828503b818a33a1412cbe9559a7fbca93e08633"
        ],
        [
            "Proof with auto.",
            "VernacProof",
            "a7e71b78b5628467da426641e148a0229b525f22"
        ],
        [
            "induction t...",
            "VernacExtend",
            "1c8039bf16e2d431b5f537b20adf7d23fb26a41a"
        ],
        [
            "simpl.",
            "VernacExtend",
            "1b93169f4cf876d207c1fab22a2347202ab48d85"
        ],
        [
            "rewrite IHt...",
            "VernacExtend",
            "6f79f88113cede7543b3b2cfd8b5336534ae3337"
        ],
        [
            "simpl.",
            "VernacExtend",
            "1b93169f4cf876d207c1fab22a2347202ab48d85"
        ],
        [
            "rewrite IHt.",
            "VernacExtend",
            "d7c6a10da1c3b93e6cd1b076977ec06f52b9b586"
        ],
        [
            "simpl in IHt0.",
            "VernacExtend",
            "dd82b10d5404c63627f997175512e641ac51ac84"
        ],
        [
            "inversion_clear IHt0...",
            "VernacExtend",
            "f41ee8833bac90c297d39d79a4e4fc4eb55cb691"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma map_map_ext (A B C: Set) (f: A -> B) (g: B -> C): ext_eq (map g \u2218 map f) (map (g \u2218 f)).",
            "VernacStartTheoremProof",
            "7bad8b2df72f4b932faf1dfd5979e836485f09b8"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "intro.",
            "VernacExtend",
            "3999be354c758ba0d1866e0fcc78a7288779a224"
        ],
        [
            "rewrite comp_apply.",
            "VernacExtend",
            "f94b0882f3d44cce0c4484c4063e03806fcd930c"
        ],
        [
            "apply map_map.",
            "VernacExtend",
            "631ea35949c2b63e8555c73f280702052ee5af81"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma map_id_ext (A: Set): ext_eq (map (@id A)) id.",
            "VernacStartTheoremProof",
            "db66a281f03557d2d5dc8fe418f4c9f12e35da36"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "intro.",
            "VernacExtend",
            "3999be354c758ba0d1866e0fcc78a7288779a224"
        ],
        [
            "induction x.",
            "VernacExtend",
            "8d91f99bf5ea35862c5721d2308df13dc2f7aeed"
        ],
        [
            "simpl.",
            "VernacExtend",
            "1b93169f4cf876d207c1fab22a2347202ab48d85"
        ],
        [
            "auto.",
            "VernacExtend",
            "1f09da0addd069b3b65326f8c71967acc1e985af"
        ],
        [
            "simpl.",
            "VernacExtend",
            "1b93169f4cf876d207c1fab22a2347202ab48d85"
        ],
        [
            "rewrite IHx.",
            "VernacExtend",
            "357385fc8aa6d86ac175f8be191ce152840328d1"
        ],
        [
            "auto.",
            "VernacExtend",
            "1f09da0addd069b3b65326f8c71967acc1e985af"
        ],
        [
            "simpl in *.",
            "VernacExtend",
            "5f89d9715fcf9b11bc0d0aadc658e9b10c47b606"
        ],
        [
            "unfold id at 2 in IHx0.",
            "VernacExtend",
            "78b0bd95e0f462baa168cd8b00a9d3888e1339f4"
        ],
        [
            "inversion_clear IHx0.",
            "VernacExtend",
            "ac23ad02c1cda780e2cdd76321ac00afe7cb5275"
        ],
        [
            "rewrite IHx.",
            "VernacExtend",
            "357385fc8aa6d86ac175f8be191ce152840328d1"
        ],
        [
            "clear IHx.",
            "VernacExtend",
            "73eb5f0fdccfba18131b4157a5900cee360cdf12"
        ],
        [
            "unfold id at 1.",
            "VernacExtend",
            "67c4a2c165faf1ef048865f2487d03d8e5c61be6"
        ],
        [
            "unfold id at 3.",
            "VernacExtend",
            "dec9c924800ab74a810b74e3b669b36643ffc30a"
        ],
        [
            "rewrite ne_list.map_map.",
            "VernacExtend",
            "ddf48628e25707617d370af1fe670083651e7a84"
        ],
        [
            "do 2 f_equal.",
            "VernacExtend",
            "74f83f01290e37153981e2e772bf9a265f1f15d0"
        ],
        [
            "apply ne_list.map_ext.",
            "VernacExtend",
            "e325ea4a4ad3936340f64c81b88694a4502b5293"
        ],
        [
            "rewrite map_map_ext.",
            "VernacExtend",
            "d8cfaef0419fff837336ba20e46bd0139f052539"
        ],
        [
            "reflexivity.",
            "VernacExtend",
            "5cd1ae044f26cd6d89a5a5147c1d4fc5fc719d83"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma In_head (X: Set) (t: T X): In (head t) t.",
            "VernacStartTheoremProof",
            "2f5744b3a1c828821fe2a9df400a02a8c97ae6ad"
        ],
        [
            "induction t; auto.",
            "VernacExtend",
            "f3a71cbb1d4317191cf94a3dde1e0ae84fc436cb"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma map_Node (X Y: Set) (f: X -> Y) l: map f (Node l) = Node (ne_list.map (map f) l).",
            "VernacStartTheoremProof",
            "ecad8cc1dedecabc9d5e3a0dc5d8f783f9c2212c"
        ],
        [
            "auto.",
            "VernacExtend",
            "1f09da0addd069b3b65326f8c71967acc1e985af"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ]
    ],
    "proofs": [
        {
            "name": "map_ext",
            "line_nb": 124,
            "steps": [
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "apply map_ext_morph.",
                        "VernacExtend",
                        "748389719794352183be250dbf26f0d37b0504e2"
                    ]
                },
                {
                    "command": [
                        "assumption.",
                        "VernacExtend",
                        "41f0308313ff87e6ab2782f90d6021ec4b55d932"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "map_map_ext",
            "line_nb": 139,
            "steps": [
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "intro.",
                        "VernacExtend",
                        "3999be354c758ba0d1866e0fcc78a7288779a224"
                    ]
                },
                {
                    "command": [
                        "rewrite comp_apply.",
                        "VernacExtend",
                        "f94b0882f3d44cce0c4484c4063e03806fcd930c"
                    ]
                },
                {
                    "command": [
                        "apply map_map.",
                        "VernacExtend",
                        "631ea35949c2b63e8555c73f280702052ee5af81"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "map_id_ext",
            "line_nb": 145,
            "steps": [
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "intro.",
                        "VernacExtend",
                        "3999be354c758ba0d1866e0fcc78a7288779a224"
                    ]
                },
                {
                    "command": [
                        "induction x.",
                        "VernacExtend",
                        "8d91f99bf5ea35862c5721d2308df13dc2f7aeed"
                    ]
                },
                {
                    "command": [
                        "simpl.",
                        "VernacExtend",
                        "1b93169f4cf876d207c1fab22a2347202ab48d85"
                    ]
                },
                {
                    "command": [
                        "auto.",
                        "VernacExtend",
                        "1f09da0addd069b3b65326f8c71967acc1e985af"
                    ]
                },
                {
                    "command": [
                        "simpl.",
                        "VernacExtend",
                        "1b93169f4cf876d207c1fab22a2347202ab48d85"
                    ]
                },
                {
                    "command": [
                        "rewrite IHx.",
                        "VernacExtend",
                        "357385fc8aa6d86ac175f8be191ce152840328d1"
                    ]
                },
                {
                    "command": [
                        "auto.",
                        "VernacExtend",
                        "1f09da0addd069b3b65326f8c71967acc1e985af"
                    ]
                },
                {
                    "command": [
                        "simpl in *.",
                        "VernacExtend",
                        "5f89d9715fcf9b11bc0d0aadc658e9b10c47b606"
                    ]
                },
                {
                    "command": [
                        "unfold id at 2 in IHx0.",
                        "VernacExtend",
                        "78b0bd95e0f462baa168cd8b00a9d3888e1339f4"
                    ]
                },
                {
                    "command": [
                        "inversion_clear IHx0.",
                        "VernacExtend",
                        "ac23ad02c1cda780e2cdd76321ac00afe7cb5275"
                    ]
                },
                {
                    "command": [
                        "rewrite IHx.",
                        "VernacExtend",
                        "357385fc8aa6d86ac175f8be191ce152840328d1"
                    ]
                },
                {
                    "command": [
                        "clear IHx.",
                        "VernacExtend",
                        "73eb5f0fdccfba18131b4157a5900cee360cdf12"
                    ]
                },
                {
                    "command": [
                        "unfold id at 1.",
                        "VernacExtend",
                        "67c4a2c165faf1ef048865f2487d03d8e5c61be6"
                    ]
                },
                {
                    "command": [
                        "unfold id at 3.",
                        "VernacExtend",
                        "dec9c924800ab74a810b74e3b669b36643ffc30a"
                    ]
                },
                {
                    "command": [
                        "rewrite ne_list.map_map.",
                        "VernacExtend",
                        "ddf48628e25707617d370af1fe670083651e7a84"
                    ]
                },
                {
                    "command": [
                        "do 2 f_equal.",
                        "VernacExtend",
                        "74f83f01290e37153981e2e772bf9a265f1f15d0"
                    ]
                },
                {
                    "command": [
                        "apply ne_list.map_ext.",
                        "VernacExtend",
                        "e325ea4a4ad3936340f64c81b88694a4502b5293"
                    ]
                },
                {
                    "command": [
                        "rewrite map_map_ext.",
                        "VernacExtend",
                        "d8cfaef0419fff837336ba20e46bd0139f052539"
                    ]
                },
                {
                    "command": [
                        "reflexivity.",
                        "VernacExtend",
                        "5cd1ae044f26cd6d89a5a5147c1d4fc5fc719d83"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "In_head",
            "line_nb": 167,
            "steps": [
                {
                    "command": [
                        "induction t; auto.",
                        "VernacExtend",
                        "f3a71cbb1d4317191cf94a3dde1e0ae84fc436cb"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "map_Node",
            "line_nb": 170,
            "steps": [
                {
                    "command": [
                        "auto.",
                        "VernacExtend",
                        "1f09da0addd069b3b65326f8c71967acc1e985af"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        }
    ]
}