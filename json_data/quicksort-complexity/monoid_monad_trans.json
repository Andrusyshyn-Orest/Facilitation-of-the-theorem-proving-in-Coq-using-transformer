{
    "filename": "monoid_monad_trans.v",
    "coq_project": "quicksort-complexity",
    "vernac_cmds": [
        [
            "Set Implicit Arguments.",
            "VernacSetOption",
            "9e84ff8896f028601d8aded48c1d4aebe60aa584"
        ],
        [
            "Require Import util.",
            "VernacRequire",
            "4430f87d7649f96d1418f130d57967666d56d84f"
        ],
        [
            "Require list_utils.",
            "VernacRequire",
            "ebf2752868e7161a1e92177943d7e8201bf8dd12"
        ],
        [
            "Require Import List.",
            "VernacRequire",
            "d9bcce4a390afeb160107bf87c6f7abe3d82c6d6"
        ],
        [
            "Require Import monads.",
            "VernacRequire",
            "5b2fd91685e0255ced6df1c87a652a12b8990a39"
        ],
        [
            "Record Monoid: Type := { monoid_type:> Set ; monoid_zero: monoid_type ; monoid_mult: monoid_type -> monoid_type -> monoid_type ; monoid_lunit: forall x, monoid_mult monoid_zero x = x ; monoid_runit: forall x, monoid_mult x monoid_zero = x ; monoid_assoc: forall x y z, monoid_mult (monoid_mult x y) z = monoid_mult x (monoid_mult y z) }.",
            "VernacInductive",
            "a1c8f60fed26e2b9cbe33db9e680d36d88193a36"
        ],
        [
            "Record monoidHomo (m n: Monoid) (f: m -> n): Prop := { monoidHomo_zero: f (monoid_zero m) = (monoid_zero n) ; monoidHomo_mult: forall x y, f (monoid_mult m x y) = monoid_mult n (f x) (f y) }.",
            "VernacInductive",
            "9af0e30bf6cbaea955cfbcceb143305d5dfa60e1"
        ],
        [
            "Lemma monoidHomo_refl (m: Monoid): monoidHomo m m (fun x => x).",
            "VernacStartTheoremProof",
            "fe02591f028aec12152fe5161209eb4d6cb3f5a8"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "apply Build_monoidHomo; auto.",
            "VernacExtend",
            "d26eb95cb3b2a292d8b6e51515e43575e7f1d8b4"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Module MonoidMonadTrans.",
            "VernacDefineModule",
            "28a58d5850b64cac4af12cbf0ba4d177407c0df3"
        ],
        [
            "Section MonoidMonadTrans.",
            "VernacBeginSection",
            "109f71e7817efe217a5b4e97cc5e7bc456d5892f"
        ],
        [
            "Variable monoid: Monoid.",
            "VernacAssumption",
            "8600b46eff1b9aa004cd0c4caf2ad963cc3ad037"
        ],
        [
            "Section NewMonad.",
            "VernacBeginSection",
            "014e88eaa3da511199edb8d644eb2adefd5bba9a"
        ],
        [
            "Variable monad: Monad.",
            "VernacAssumption",
            "e966d19adb28ac8d42fb2f9a967ad5fae4b763d0"
        ],
        [
            "Hypothesis ext: extMonad monad.",
            "VernacAssumption",
            "a11fdac73f4b48dd00028785e9246b17d2237782"
        ],
        [
            "Let C_MMT (T: Set): Set := monad (prod monoid T).",
            "VernacDefinition",
            "14802c3056d06c6de1f9b78ac7011d65d63dda68"
        ],
        [
            "Let bind_MMT (A B: Set) (a: C_MMT A) (ab: A -> C_MMT B): C_MMT B := x <- a ; y <- ab (snd x) ; ret (monoid_mult monoid (fst x) (fst y), snd y).",
            "VernacDefinition",
            "3885d3501ac011137c21293d0d69454ad5ec6eaf"
        ],
        [
            "Let ret_MMT (T: Set): T -> C_MMT T := ret \u2218 pair (monoid_zero monoid).",
            "VernacDefinition",
            "c71410a1ff966a1c02c4c6d28ca4021c8e9be038"
        ],
        [
            "Definition M: Monad.",
            "VernacDefinition",
            "b2788c2f9e5d1df7a594573eea5983dbaaac3fba"
        ],
        [
            "Proof with simpl; auto.",
            "VernacProof",
            "d8d52916adcdcab3f3e1356033a8e1159c139ea9"
        ],
        [
            "apply (Build_Monad C_MMT bind_MMT ret_MMT); intros.",
            "VernacExtend",
            "c1034e545fb26240eacdb99d5b26088a2ade4440"
        ],
        [
            "unfold ret_MMT, bind_MMT, compose.",
            "VernacExtend",
            "95719464b4774ddfab08b173d500c055aa9007f8"
        ],
        [
            "simpl.",
            "VernacExtend",
            "1b93169f4cf876d207c1fab22a2347202ab48d85"
        ],
        [
            "rewrite mon_lunit.",
            "VernacExtend",
            "ce0ad8fa186405d45c0906ffac38fa8f0fb1b9bc"
        ],
        [
            "simpl.",
            "VernacExtend",
            "1b93169f4cf876d207c1fab22a2347202ab48d85"
        ],
        [
            "assert (ext_eq (fun y: prod monoid b => monads.ret (m:=monad) (monoid_mult monoid (monoid_zero monoid) (fst y), snd y)) ret).",
            "VernacExtend",
            "c71880f76ffbc04ba37d21e8786b773150c9713f"
        ],
        [
            "intro.",
            "VernacExtend",
            "3999be354c758ba0d1866e0fcc78a7288779a224"
        ],
        [
            "rewrite monoid_lunit.",
            "VernacExtend",
            "5be219afbb4af45f0b2fbd5a5ec041d9a5b4514e"
        ],
        [
            "destruct x0...",
            "VernacExtend",
            "3dc81ee3f6f61c6a091f66e987026c21574e3040"
        ],
        [
            "rewrite (ext _ H (f x)).",
            "VernacExtend",
            "1d4b924b38c28c8af7fd9bb0a9388c0181ba6349"
        ],
        [
            "rewrite mon_runit...",
            "VernacExtend",
            "e4bb5380fa62eec27892a7b9afec4583bf4d936e"
        ],
        [
            "unfold ret_MMT, bind_MMT, compose.",
            "VernacExtend",
            "95719464b4774ddfab08b173d500c055aa9007f8"
        ],
        [
            "simpl.",
            "VernacExtend",
            "1b93169f4cf876d207c1fab22a2347202ab48d85"
        ],
        [
            "rewrite mon_lunit_under_bind...",
            "VernacExtend",
            "e6ac7405680b7cbeb938b5bbfdf1e3399354ecd7"
        ],
        [
            "assert (ext_eq (fun x => monads.ret (m:=monad) (monoid_mult monoid (fst x) (monoid_zero monoid), snd x)) (@monads.ret monad (prod monoid a))).",
            "VernacExtend",
            "eed65fa8dbb60aacd9870324df1928c47a471ddd"
        ],
        [
            "intro.",
            "VernacExtend",
            "3999be354c758ba0d1866e0fcc78a7288779a224"
        ],
        [
            "rewrite monoid_runit.",
            "VernacExtend",
            "02c52248d7a11c1c24aff08f05a3356b3b3188c5"
        ],
        [
            "destruct x...",
            "VernacExtend",
            "7765274004a21ba6bfb7c6c03b9ce172306d36ac"
        ],
        [
            "rewrite (ext _ H f).",
            "VernacExtend",
            "345d58c1869af4e7af918befffa4e8d0b94d923e"
        ],
        [
            "rewrite mon_runit...",
            "VernacExtend",
            "e4bb5380fa62eec27892a7b9afec4583bf4d936e"
        ],
        [
            "unfold bind_MMT.",
            "VernacExtend",
            "b332bda585329b128b899aa9ca6d3803af069e4a"
        ],
        [
            "rewrite mon_assoc.",
            "VernacExtend",
            "d525e32fea8e3519575d67077c59f2480695ca2d"
        ],
        [
            "apply (extFlipped ext n (prod monoid c)).",
            "VernacExtend",
            "0a82d9604608adf0ca1396d0a3bad02aa4a2768f"
        ],
        [
            "intro.",
            "VernacExtend",
            "3999be354c758ba0d1866e0fcc78a7288779a224"
        ],
        [
            "rewrite mon_assoc.",
            "VernacExtend",
            "d525e32fea8e3519575d67077c59f2480695ca2d"
        ],
        [
            "rewrite mon_assoc.",
            "VernacExtend",
            "d525e32fea8e3519575d67077c59f2480695ca2d"
        ],
        [
            "apply (extFlipped ext (f (snd x)) (prod monoid c)).",
            "VernacExtend",
            "b6fb87d94ca3c5aaec0275ba19dd2299ce9219b0"
        ],
        [
            "intro.",
            "VernacExtend",
            "3999be354c758ba0d1866e0fcc78a7288779a224"
        ],
        [
            "rewrite mon_assoc.",
            "VernacExtend",
            "d525e32fea8e3519575d67077c59f2480695ca2d"
        ],
        [
            "rewrite mon_lunit...",
            "VernacExtend",
            "ac3c4852fc1f918bb9f382f1efdae4b08be6677d"
        ],
        [
            "apply (extFlipped ext (g (snd x0)) (prod monoid c)).",
            "VernacExtend",
            "f518f07a147bf464d99dd7483558a821a81e1126"
        ],
        [
            "intro.",
            "VernacExtend",
            "3999be354c758ba0d1866e0fcc78a7288779a224"
        ],
        [
            "rewrite mon_lunit.",
            "VernacExtend",
            "ce0ad8fa186405d45c0906ffac38fa8f0fb1b9bc"
        ],
        [
            "rewrite monoid_assoc...",
            "VernacExtend",
            "e688fee6291edb5f169bbfc6d54e94d5ec84351b"
        ],
        [
            "Defined.",
            "VernacEndProof",
            "88c0be54a50df4bb90276c075406fe442428eb9c"
        ],
        [
            "Lemma bind_toLower' (X V: Set) (f: M V) (g: V -> M X): f >>= g = x <- f: monad (prod monoid V); ((g (snd x): monad (prod monoid X)) >>= (ret \u2218 (fun q => (monoid_mult monoid (fst x) (fst q), snd q)))).",
            "VernacStartTheoremProof",
            "ea5762bb86c2a1b4f0ce3cd998dfdf9c5cbe51c0"
        ],
        [
            "auto.",
            "VernacExtend",
            "1f09da0addd069b3b65326f8c71967acc1e985af"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma bind_toLower (X V: Set) (f: M V) (g: V -> M X): f >>= g = x <- f: monad (prod monoid V); y <- g (snd x): monad (prod monoid X); ret (m:=monad) (monoid_mult monoid (fst x) (fst y), snd y).",
            "VernacStartTheoremProof",
            "eceea0e4e4eecb7583fb8f3c75581ae44e2579a6"
        ],
        [
            "auto.",
            "VernacExtend",
            "1f09da0addd069b3b65326f8c71967acc1e985af"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Definition ret_toLower (X: Set) (x: X): @ret M X x = ret (m:=monad) (monoid_zero monoid, x).",
            "VernacDefinition",
            "8807e9a5826b613a962e53955fffdad19691a725"
        ],
        [
            "auto.",
            "VernacExtend",
            "1f09da0addd069b3b65326f8c71967acc1e985af"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma mon_toLower: forall X, M X = monad (prod monoid X).",
            "VernacStartTheoremProof",
            "04860834aa2b12867132506609b1dc1535bc1da8"
        ],
        [
            "auto.",
            "VernacExtend",
            "1f09da0addd069b3b65326f8c71967acc1e985af"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma Mext: extMonad M.",
            "VernacStartTheoremProof",
            "edd0f00d2fb78561b0ca89123631de2b2901d0f8"
        ],
        [
            "Proof with auto.",
            "VernacProof",
            "a7e71b78b5628467da426641e148a0229b525f22"
        ],
        [
            "unfold extMonad.",
            "VernacExtend",
            "c5f1847dfcc529ae2d71ad2e269fdf47d1ef963b"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "simpl.",
            "VernacExtend",
            "1b93169f4cf876d207c1fab22a2347202ab48d85"
        ],
        [
            "unfold bind_MMT.",
            "VernacExtend",
            "b332bda585329b128b899aa9ca6d3803af069e4a"
        ],
        [
            "simpl in x.",
            "VernacExtend",
            "72f6afab6fdc6081cee3f8fe984a0d037f4d319e"
        ],
        [
            "unfold C_MMT in x.",
            "VernacExtend",
            "a64314c094fa25001ad2f2d91e6af8c2cf6d10c7"
        ],
        [
            "set ext.",
            "VernacExtend",
            "3e089f02d8e5247e5eccf4990de47c7fdc31c036"
        ],
        [
            "unfold extMonad in e.",
            "VernacExtend",
            "fa6c0337acbd0ef8bb0aa66f88188ca55b788c87"
        ],
        [
            "apply (e (prod monoid A) (prod monoid B)).",
            "VernacExtend",
            "b603563549cf174405d4be449e11d9dacb929acf"
        ],
        [
            "intro.",
            "VernacExtend",
            "3999be354c758ba0d1866e0fcc78a7288779a224"
        ],
        [
            "unfold ext_eq in H.",
            "VernacExtend",
            "fa8cb300f26c26bb0f0aa83bbb00e5b60902fa1c"
        ],
        [
            "rewrite H...",
            "VernacExtend",
            "2ded38871f6ef5ae4e687aa3245494ae541f7202"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Definition lift (A: Set) (a: monad A): M A := a >>= (ret \u2218 pair (monoid_zero monoid)).",
            "VernacDefinition",
            "b1b07beae9c303568d7fcbcc8e6aed58b11ab8ea"
        ],
        [
            "End NewMonad.",
            "VernacEndSegment",
            "142e914e34a0256aa17803758d913ed9e508e9e3"
        ],
        [
            "Definition T: MonadTrans := Build_MonadTrans M lift.",
            "VernacDefinition",
            "4541bb3a6ec7605683cb0d24e5e44cb91dc0923c"
        ],
        [
            "End MonoidMonadTrans.",
            "VernacEndSegment",
            "1ead594cf53268c4eeb4fe710d271c1d46f36429"
        ],
        [
            "End MonoidMonadTrans.",
            "VernacEndSegment",
            "1ead594cf53268c4eeb4fe710d271c1d46f36429"
        ],
        [
            "Definition NatAddMonoid: Monoid.",
            "VernacDefinition",
            "4d5273ceee6a49b6e1470b7176a5625082ef1934"
        ],
        [
            "Proof with auto with arith.",
            "VernacProof",
            "007741178d53d6a043487bfdd1e6c77ea6388468"
        ],
        [
            "apply (Build_Monoid 0 plus)...",
            "VernacExtend",
            "80237b968a77eff056379a60b9c9b8f7a9f191d8"
        ],
        [
            "Defined.",
            "VernacEndProof",
            "88c0be54a50df4bb90276c075406fe442428eb9c"
        ],
        [
            "Definition SimplyProfiled: Monad := MonoidMonadTrans.M NatAddMonoid IdMonad.ext.",
            "VernacDefinition",
            "f7f662c75c02a6eda2f259c41e7ed45e2a57a4b4"
        ],
        [
            "Definition cost {X: Set}: prod nat X -> nat := @fst _ _.",
            "VernacDefinition",
            "74ee69e826d22b0d7ec0f117414fdc6cb5c6bc5e"
        ],
        [
            "Definition result X: SimplyProfiled X -> X := @snd _ _.",
            "VernacDefinition",
            "05e902cc58d166442fe208eda7417e39000f7966"
        ],
        [
            "Lemma bind_cost (T U: Set) (a: SimplyProfiled T) (b: T -> SimplyProfiled U): cost (bind a b) = cost a + cost (b (result a)).",
            "VernacStartTheoremProof",
            "8d3243c8f358ce19a8743aa99abba12e3d26fac8"
        ],
        [
            "Proof with auto.",
            "VernacProof",
            "a7e71b78b5628467da426641e148a0229b525f22"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "destruct a.",
            "VernacExtend",
            "3f53f61a7882a1bcc65ff705b5afc6c02a0dddf5"
        ],
        [
            "simpl.",
            "VernacExtend",
            "1b93169f4cf876d207c1fab22a2347202ab48d85"
        ],
        [
            "destruct (b t)...",
            "VernacExtend",
            "8703579c13fb94b865d3f32cf6ccc26f95827d01"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma return_cost (T: Set) (x: T): cost (@ret SimplyProfiled T x) = 0.",
            "VernacStartTheoremProof",
            "300fe47e0676a541cb4360a7e8bb611eca48bb10"
        ],
        [
            "auto.",
            "VernacExtend",
            "1f09da0addd069b3b65326f8c71967acc1e985af"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma SimplyProfiled_ext: extMonad SimplyProfiled.",
            "VernacStartTheoremProof",
            "a8c93e7820944578246cf1c33577e6f21afa3612"
        ],
        [
            "unfold SimplyProfiled.",
            "VernacExtend",
            "bc04236525fd0756b1499a5989a8f95ecaf23559"
        ],
        [
            "intro.",
            "VernacExtend",
            "3999be354c758ba0d1866e0fcc78a7288779a224"
        ],
        [
            "simpl.",
            "VernacExtend",
            "1b93169f4cf876d207c1fab22a2347202ab48d85"
        ],
        [
            "unfold IdMonad.C.",
            "VernacExtend",
            "c3fa0142761c6700207ecbdf1268fa902c9bc54b"
        ],
        [
            "unfold IdMonad.bind.",
            "VernacExtend",
            "3c4be89a6c34f740196fbd30a8d8f980e212c6be"
        ],
        [
            "unfold IdMonad.ret.",
            "VernacExtend",
            "70ff02bfdc67b0f04ff81c1fa3dfdfb28f9ef400"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "rewrite (H (snd x)).",
            "VernacExtend",
            "fe71a653c60fd27cd0e24eaa9b68730fa1bd2abb"
        ],
        [
            "reflexivity.",
            "VernacExtend",
            "5cd1ae044f26cd6d89a5a5147c1d4fc5fc719d83"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Module ListMonoid.",
            "VernacDefineModule",
            "3fb373ca9beb93a605fee0924fd32f13dee183f7"
        ],
        [
            "Section ListMonoid.",
            "VernacBeginSection",
            "04612f982bf3ab1bb370a4f988d10b2890cf129e"
        ],
        [
            "Variable T: Set.",
            "VernacAssumption",
            "b25e1c55d6e167f9b32c3ec950afc0dd2590ed80"
        ],
        [
            "Definition M: Monoid := Build_Monoid (@nil T) (@app T) (@refl_equal (list T)) (@list_utils.app_nil_r T) (@app_ass T).",
            "VernacDefinition",
            "4a051f753b8896d68ac6760cd27c74f621b4d970"
        ],
        [
            "End ListMonoid.",
            "VernacEndSegment",
            "5f30f31a3045588117aa412db6a45b7e79f44dc6"
        ],
        [
            "End ListMonoid.",
            "VernacEndSegment",
            "5f30f31a3045588117aa412db6a45b7e79f44dc6"
        ]
    ],
    "proofs": [
        {
            "name": "monoidHomo_refl",
            "line_nb": 7,
            "steps": [
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "apply Build_monoidHomo; auto.",
                        "VernacExtend",
                        "d26eb95cb3b2a292d8b6e51515e43575e7f1d8b4"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "bind_toLower'",
            "line_nb": 57,
            "steps": [
                {
                    "command": [
                        "auto.",
                        "VernacExtend",
                        "1f09da0addd069b3b65326f8c71967acc1e985af"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "bind_toLower",
            "line_nb": 60,
            "steps": [
                {
                    "command": [
                        "auto.",
                        "VernacExtend",
                        "1f09da0addd069b3b65326f8c71967acc1e985af"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "ret_toLower",
            "line_nb": 63,
            "steps": [
                {
                    "command": [
                        "auto.",
                        "VernacExtend",
                        "1f09da0addd069b3b65326f8c71967acc1e985af"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "mon_toLower",
            "line_nb": 66,
            "steps": [
                {
                    "command": [
                        "auto.",
                        "VernacExtend",
                        "1f09da0addd069b3b65326f8c71967acc1e985af"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "return_cost",
            "line_nb": 103,
            "steps": [
                {
                    "command": [
                        "auto.",
                        "VernacExtend",
                        "1f09da0addd069b3b65326f8c71967acc1e985af"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "SimplyProfiled_ext",
            "line_nb": 106,
            "steps": [
                {
                    "command": [
                        "unfold SimplyProfiled.",
                        "VernacExtend",
                        "bc04236525fd0756b1499a5989a8f95ecaf23559"
                    ]
                },
                {
                    "command": [
                        "intro.",
                        "VernacExtend",
                        "3999be354c758ba0d1866e0fcc78a7288779a224"
                    ]
                },
                {
                    "command": [
                        "simpl.",
                        "VernacExtend",
                        "1b93169f4cf876d207c1fab22a2347202ab48d85"
                    ]
                },
                {
                    "command": [
                        "unfold IdMonad.C.",
                        "VernacExtend",
                        "c3fa0142761c6700207ecbdf1268fa902c9bc54b"
                    ]
                },
                {
                    "command": [
                        "unfold IdMonad.bind.",
                        "VernacExtend",
                        "3c4be89a6c34f740196fbd30a8d8f980e212c6be"
                    ]
                },
                {
                    "command": [
                        "unfold IdMonad.ret.",
                        "VernacExtend",
                        "70ff02bfdc67b0f04ff81c1fa3dfdfb28f9ef400"
                    ]
                },
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "rewrite (H (snd x)).",
                        "VernacExtend",
                        "fe71a653c60fd27cd0e24eaa9b68730fa1bd2abb"
                    ]
                },
                {
                    "command": [
                        "reflexivity.",
                        "VernacExtend",
                        "5cd1ae044f26cd6d89a5a5147c1d4fc5fc719d83"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        }
    ]
}