{
    "filename": "U.v",
    "coq_project": "quicksort-complexity",
    "vernac_cmds": [
        [
            "Set Implicit Arguments.",
            "VernacSetOption",
            "9e84ff8896f028601d8aded48c1d4aebe60aa584"
        ],
        [
            "Unset Standard Proposition Elimination Names.",
            "VernacUnsetOption",
            "911574cdf91989455d0d3d11c7a9b0ca10fd1ae6"
        ],
        [
            "Require Import util.",
            "VernacRequire",
            "4430f87d7649f96d1418f130d57967666d56d84f"
        ],
        [
            "Require Import Le.",
            "VernacRequire",
            "838bfe0aac98b4a25730898d79830c3f8329aec1"
        ],
        [
            "Require Import EqNat.",
            "VernacRequire",
            "6f4e2e752aa686b7ad3ad5aff446ff7d64b7cc4d"
        ],
        [
            "Require Import Compare_dec.",
            "VernacRequire",
            "96b495dc82d6bd54e62353acae7d6e61222564e6"
        ],
        [
            "Require Import Bool.",
            "VernacRequire",
            "a27d9a6c92262b970381301472e9a1100c206680"
        ],
        [
            "Require Import Lt.",
            "VernacRequire",
            "fe47d80ebda42c5f075a36fb67288742f8593767"
        ],
        [
            "Require Import list_utils.",
            "VernacRequire",
            "f5ce54076a68b3ca9f48d4de158eadf0961b9e1f"
        ],
        [
            "Require Import List.",
            "VernacRequire",
            "d9bcce4a390afeb160107bf87c6f7abe3d82c6d6"
        ],
        [
            "Require Import Compare_dec.",
            "VernacRequire",
            "96b495dc82d6bd54e62353acae7d6e61222564e6"
        ],
        [
            "Require Import monads.",
            "VernacRequire",
            "5b2fd91685e0255ced6df1c87a652a12b8990a39"
        ],
        [
            "Require Import monoid_monad_trans.",
            "VernacRequire",
            "4bb2bf1c803b5281d50c61057d2ecff387723de8"
        ],
        [
            "Require Import nat_seqs.",
            "VernacRequire",
            "350f7c7394c4c6b69193e921e8497ea2449f9eb8"
        ],
        [
            "Require Import qs_definitions.",
            "VernacRequire",
            "ad54b6c56ee43242a2a1ecf79bb8d876c5b9aac3"
        ],
        [
            "Require Import monoid_expec.",
            "VernacRequire",
            "f4722d2df5fe7701983e13613d638ef451b5a69b"
        ],
        [
            "Require qs_parts.",
            "VernacRequire",
            "037b805a8c35aba79ace02a1837e02560df891ce"
        ],
        [
            "Require Import sort_order.",
            "VernacRequire",
            "85a39449b2d00eaee1e45659744d459c465d1213"
        ],
        [
            "Require Import indices.",
            "VernacRequire",
            "2f5de736d65b4735f04daf8c110f56fa844a0296"
        ],
        [
            "Require Import Arith.",
            "VernacRequire",
            "7f40051ec5b363eee0bbfd802b43ad2f8b97479f"
        ],
        [
            "Require Import nat_below.",
            "VernacRequire",
            "5fd79b191289e7e9092d80072ab4925e292a74b4"
        ],
        [
            "Require Vector.",
            "VernacRequire",
            "145bcbe9535700f6fddf277a7fc43bb4df45a9f9"
        ],
        [
            "Require ne_tree_monad.",
            "VernacRequire",
            "3ef29c4b69e7e3bdc2f752c7bce1bce86d9cb8f2"
        ],
        [
            "Import mon_nondet.",
            "VernacImport",
            "c45fe3b37fd47cbe9b960dd2fd0601696a355f94"
        ],
        [
            "Section contents.",
            "VernacBeginSection",
            "64247bb134c943946794e7969d57832818b1ace7"
        ],
        [
            "Variable (e: E) (ol: list e).",
            "VernacAssumption",
            "268ba5a559e619aced887f53cd5b0d91c4675db3"
        ],
        [
            "Definition monoid := ListMonoid.M (nat * nat).",
            "VernacDefinition",
            "345f55082cefcb24455eddeeac03addd65afe4eb"
        ],
        [
            "Definition M: Monad := MonoidMonadTrans.M monoid ne_tree_monad.ext.",
            "VernacDefinition",
            "cb60699bf26a4842a87d813eb725ab5d23225f3a"
        ],
        [
            "Lemma Mext: extMonad M.",
            "VernacStartTheoremProof",
            "edd0f00d2fb78561b0ca89123631de2b2901d0f8"
        ],
        [
            "Proof MonoidMonadTrans.Mext monoid ne_tree_monad.ext.",
            "VernacExactProof",
            "a9ce63cdb0d6678357c230767a2354dda414e0f3"
        ],
        [
            "Definition unordered_nat_pair (x y: nat): nat * nat := if le_lt_dec x y then (x, y) else (y, x).",
            "VernacDefinition",
            "32c859cb271f7fe6ee3a97c8cd481df61c7dff3a"
        ],
        [
            "Definition cmp (x y: Index e ol): M comparison := ret (unordered_nat_pair x y :: nil, Ecmp e (subscript x) (subscript y)).",
            "VernacDefinition",
            "1b3354005f515265ed3b3431f986d96c0a3c41b3"
        ],
        [
            "Definition homo: monoidHomo monoid NatAddMonoid (fun x => length x).",
            "VernacDefinition",
            "9d6b31763a99ed2664352369f0ec6d4b8607a10f"
        ],
        [
            "Proof with auto.",
            "VernacProof",
            "a7e71b78b5628467da426641e148a0229b525f22"
        ],
        [
            "apply Build_monoidHomo...",
            "VernacExtend",
            "030612b74a97cfbdc588b407cfa21b5f590b801d"
        ],
        [
            "simpl.",
            "VernacExtend",
            "1b93169f4cf876d207c1fab22a2347202ab48d85"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "rewrite app_length...",
            "VernacExtend",
            "fc28a44605093c386cd4bf4858fd04f910513e2a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Definition pick := monoid_tree_monad.pick monoid.",
            "VernacDefinition",
            "23cec36576a1be4b1a550eed5622620f390c35af"
        ],
        [
            "Require Import Rdefinitions.",
            "VernacRequire",
            "3a03b10fed3598adbe116af27291199560a79811"
        ],
        [
            "Lemma partition d (l: list (Index e ol)): partition M cmp d l = ne_tree.Leaf (map (fun i: Index e ol => unordered_nat_pair i d) l, simplerPartition (UE e ol) d l).",
            "VernacStartTheoremProof",
            "b4e81b644b4c64de6300967f34668aaa0313cab6"
        ],
        [
            "Proof with auto.",
            "VernacProof",
            "a7e71b78b5628467da426641e148a0229b525f22"
        ],
        [
            "induction l...",
            "VernacExtend",
            "a4571710fc634c72b7b07ca630627ad571eee64e"
        ],
        [
            "simpl.",
            "VernacExtend",
            "1b93169f4cf876d207c1fab22a2347202ab48d85"
        ],
        [
            "rewrite (@mon_assoc (ne_tree_monad.M)).",
            "VernacExtend",
            "1f19b05fb28b29a907d246f53ddf6839ab5272ab"
        ],
        [
            "rewrite IHl.",
            "VernacExtend",
            "d4d0cebbb161cf1462b69fd1ed2d76db253a98c6"
        ],
        [
            "simpl.",
            "VernacExtend",
            "1b93169f4cf876d207c1fab22a2347202ab48d85"
        ],
        [
            "rewrite app_nil_r...",
            "VernacExtend",
            "0937973197256d8673173ac929544156288de58a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma simplePartition_component (ee: E) i cr l: proj1_sig (simplerPartition ee i l) cr = filter (fun f => unsum_bool (cmp_cmp (Ecmp ee f i) cr)) l.",
            "VernacStartTheoremProof",
            "81c03846601a0aa777a8d867039b718b8fec7e9a"
        ],
        [
            "Proof with auto.",
            "VernacProof",
            "a7e71b78b5628467da426641e148a0229b525f22"
        ],
        [
            "induction l...",
            "VernacExtend",
            "a4571710fc634c72b7b07ca630627ad571eee64e"
        ],
        [
            "simpl.",
            "VernacExtend",
            "1b93169f4cf876d207c1fab22a2347202ab48d85"
        ],
        [
            "rewrite IHl.",
            "VernacExtend",
            "d4d0cebbb161cf1462b69fd1ed2d76db253a98c6"
        ],
        [
            "destruct (Ecmp ee a i); destruct cr...",
            "VernacExtend",
            "54e31575c267e47410f8f53cb9a73d2ac9683913"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Section Uqs_ind.",
            "VernacBeginSection",
            "9f9892fbae8bdc5cafaf623931a065edd1fb256f"
        ],
        [
            "Variable P: list (Index e ol) -> M (list (Index e ol)) -> Prop.",
            "VernacAssumption",
            "82adc001fc2091eccd4dde5f9fcc3b5cff841534"
        ],
        [
            "Hypothesis Pnil: P nil (ret nil).",
            "VernacAssumption",
            "c5edc06884e858aa7ce4177417ea362a098c7980"
        ],
        [
            "Hypothesis Pcons: forall n (v: Vector.t (Index e ol) (S n)), (forall x0 cr, P (filter (fun f: Index e ol => unsum_bool (cmp_cmp (Ecmp (UE e ol) f (vec.nth v x0)) cr)) (vec.remove v x0)) (qs cmp pick (filter (fun f: Index e ol => unsum_bool (cmp_cmp (Ecmp (UE e ol) f (vec.nth v x0)) cr)) (vec.remove v x0)))) -> P v (ne_tree.Node (ne_list.map (fun x0: natBelow (S n) => ne_tree.map (map_fst (C:=list (Index e ol)) (app (map (fun i0: Index e ol => unordered_nat_pair i0 (vec.nth v x0)) (vec.remove v x0)))) (foo <- qs cmp pick (filter (fun f: Index e ol => unsum_bool (cmp_cmp (Ecmp (UE e ol) f (vec.nth v x0)) Lt)) (vec.remove v x0)); bar <- qs cmp pick (filter (fun f: Index e ol => unsum_bool (cmp_cmp (Ecmp (UE e ol) f (vec.nth v x0)) Gt)) (vec.remove v x0)); ret (foo ++ (vec.nth v x0 :: filter (fun f0: Index e ol => unsum_bool (cmp_cmp (Ecmp (UE e ol) f0 (vec.nth v x0)) Eq)) (vec.remove v x0)) ++ bar))) (ne_list.from_vec (vec.nats 0 (S n))))).",
            "VernacAssumption",
            "8248c91e0de345a56596a0bdee743c489f62cf2b"
        ],
        [
            "Theorem qs_ind: forall l, P l (qs cmp pick l).",
            "VernacStartTheoremProof",
            "c49eb20e80776833cdae0aa4c8bddc98c6d65133"
        ],
        [
            "Proof with auto.",
            "VernacProof",
            "a7e71b78b5628467da426641e148a0229b525f22"
        ],
        [
            "apply qs_parts.rect...",
            "VernacExtend",
            "3a113c79d733ae83358e296923aef3e2e66b549a"
        ],
        [
            "apply Mext.",
            "VernacExtend",
            "ee83e1cb659ab5e6f1c17e2788fcb4403e007e04"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "unfold qs_parts.body.",
            "VernacExtend",
            "c71786f0c142f72b786a4362acc2c3c08f86e4d4"
        ],
        [
            "replace (qs_parts.selectPivotPart M pick cmp v) with (ne_tree.Node (ne_list.map (fun x0: natBelow (S n) => ne_tree.map (map_fst (app (map (fun i0: Index e ol => unordered_nat_pair i0 ((vec.nth v x0))) (vec.remove v x0)))) ( foo <- qs cmp pick (filter (fun f: Index e ol => unsum_bool (cmp_cmp (Ecmp (UE e ol) f (vec.nth v x0)) Lt)) (vec.remove v x0)); bar <- qs cmp pick (filter (fun f: Index e ol => unsum_bool (cmp_cmp (Ecmp (UE e ol) f (vec.nth v x0)) Gt)) (vec.remove v x0)); ret (m:=ne_tree_monad.M) (nil, foo ++ (vec.nth v x0 :: filter (fun f0: Index e ol => unsum_bool (cmp_cmp (Ecmp (UE e ol) f0 (vec.nth v x0)) Eq)) (vec.remove v x0)) ++ bar))) (ne_list.from_vec (vec.nats 0 (S n))))).",
            "VernacExtend",
            "68f5b0f21c57255b7b21eaf8c51795d1de204720"
        ],
        [
            "simpl @ret in Pcons.",
            "VernacExtend",
            "b2e16d2b71aa0d1395f96028bc02d9a4b986c319"
        ],
        [
            "Focus 1.",
            "VernacFocus",
            "2e70fb9f135d16f7a4a2728604ca85344cf984cd"
        ],
        [
            "specialize (Pcons v).",
            "VernacExtend",
            "7acc6967bef49b5df60bdd2c3bd350296a794f53"
        ],
        [
            "simpl vec.to_list in Pcons.",
            "VernacExtend",
            "02601b0ac28b862bdbc0aa28e37dbd9f02d833fe"
        ],
        [
            "apply Pcons.",
            "VernacExtend",
            "dac37cefc858417a053c506f6e4d5d76160b82d8"
        ],
        [
            "clear Pcons.",
            "VernacExtend",
            "f3cb895537b4a22e11c5bcc1784671b5b895c5e1"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "apply H.",
            "VernacExtend",
            "4b47b71ad0f800d57cbdc591d68949e07decb540"
        ],
        [
            "rewrite length_filter.",
            "VernacExtend",
            "dd942f2f237fd3b0772b5ef3c557fa84c8bd4dec"
        ],
        [
            "apply le_lt_trans with (length (vec.to_list (vec.remove v x0))).",
            "VernacExtend",
            "85ac74cdd868031aef3650bec52490cb71f00e7d"
        ],
        [
            "apply count_le.",
            "VernacExtend",
            "7f3631e7658c0bb967ca2d0fc1e90cb90a3e5c9b"
        ],
        [
            "rewrite vec.length...",
            "VernacExtend",
            "f74737d84347a0f4b18d04727c5a6afe3ba018e6"
        ],
        [
            "unfold qs_parts.selectPivotPart.",
            "VernacExtend",
            "0211729f06ddd6cd7b432d8fb8c7d724a13edbbd"
        ],
        [
            "unfold qs_parts.partitionPart.",
            "VernacExtend",
            "d77b64555615e82ffc47d481156fcb1d59110c2e"
        ],
        [
            "unfold qs_parts.lowRecPart.",
            "VernacExtend",
            "91fc96d2ae7e2f1d74d92e2fc12aa4db55bb2452"
        ],
        [
            "simpl.",
            "VernacExtend",
            "1b93169f4cf876d207c1fab22a2347202ab48d85"
        ],
        [
            "f_equal.",
            "VernacExtend",
            "dfce814d1efcef60f8330516ad88155a3a5ec317"
        ],
        [
            "repeat rewrite ne_list.map_map.",
            "VernacExtend",
            "0994bede90ef56a5a3c761573502c45d295a8107"
        ],
        [
            "apply ne_list.map_ext.",
            "VernacExtend",
            "e325ea4a4ad3936340f64c81b88694a4502b5293"
        ],
        [
            "intro.",
            "VernacExtend",
            "3999be354c758ba0d1866e0fcc78a7288779a224"
        ],
        [
            "unfold compose.",
            "VernacExtend",
            "d80e23bf133762584228beafbd8610d99d5d02d5"
        ],
        [
            "simpl.",
            "VernacExtend",
            "1b93169f4cf876d207c1fab22a2347202ab48d85"
        ],
        [
            "rewrite ne_tree_monad.map_bind.",
            "VernacExtend",
            "ac3fbe2c2664ef4e23aabd685c0f0aaf4e52b9ef"
        ],
        [
            "rewrite (@mon_assoc (ne_tree_monad.M)).",
            "VernacExtend",
            "1f19b05fb28b29a907d246f53ddf6839ab5272ab"
        ],
        [
            "rewrite partition.",
            "VernacExtend",
            "af0292f8cedab201e3899d8815e5ff5be65d49bf"
        ],
        [
            "simpl.",
            "VernacExtend",
            "1b93169f4cf876d207c1fab22a2347202ab48d85"
        ],
        [
            "rewrite (@mon_assoc (ne_tree_monad.M)).",
            "VernacExtend",
            "1f19b05fb28b29a907d246f53ddf6839ab5272ab"
        ],
        [
            "simpl.",
            "VernacExtend",
            "1b93169f4cf876d207c1fab22a2347202ab48d85"
        ],
        [
            "rewrite (@mon_assoc (ne_tree_monad.M)).",
            "VernacExtend",
            "1f19b05fb28b29a907d246f53ddf6839ab5272ab"
        ],
        [
            "simpl.",
            "VernacExtend",
            "1b93169f4cf876d207c1fab22a2347202ab48d85"
        ],
        [
            "rewrite (@simplePartition_component (UE e ol)).",
            "VernacExtend",
            "ae7709a0cec1a1e11e1d92fc012bed7d2c79d2b5"
        ],
        [
            "apply ne_tree_monad.ext.",
            "VernacExtend",
            "823be8f26ce367d313da6d38c7d45a0e9b791ddb"
        ],
        [
            "intro.",
            "VernacExtend",
            "3999be354c758ba0d1866e0fcc78a7288779a224"
        ],
        [
            "rewrite (@mon_assoc (ne_tree_monad.M)).",
            "VernacExtend",
            "1f19b05fb28b29a907d246f53ddf6839ab5272ab"
        ],
        [
            "simpl.",
            "VernacExtend",
            "1b93169f4cf876d207c1fab22a2347202ab48d85"
        ],
        [
            "rewrite ne_tree_monad.map_bind.",
            "VernacExtend",
            "ac3fbe2c2664ef4e23aabd685c0f0aaf4e52b9ef"
        ],
        [
            "rewrite (@mon_assoc (ne_tree_monad.M)).",
            "VernacExtend",
            "1f19b05fb28b29a907d246f53ddf6839ab5272ab"
        ],
        [
            "simpl.",
            "VernacExtend",
            "1b93169f4cf876d207c1fab22a2347202ab48d85"
        ],
        [
            "rewrite (@mon_assoc (ne_tree_monad.M)).",
            "VernacExtend",
            "1f19b05fb28b29a907d246f53ddf6839ab5272ab"
        ],
        [
            "simpl.",
            "VernacExtend",
            "1b93169f4cf876d207c1fab22a2347202ab48d85"
        ],
        [
            "rewrite (@simplePartition_component (UE e ol)).",
            "VernacExtend",
            "ae7709a0cec1a1e11e1d92fc012bed7d2c79d2b5"
        ],
        [
            "apply ne_tree_monad.ext.",
            "VernacExtend",
            "823be8f26ce367d313da6d38c7d45a0e9b791ddb"
        ],
        [
            "intro.",
            "VernacExtend",
            "3999be354c758ba0d1866e0fcc78a7288779a224"
        ],
        [
            "unfold compose, map_fst.",
            "VernacExtend",
            "c422bfc131e4086812780dde6c87105e3628cd55"
        ],
        [
            "simpl.",
            "VernacExtend",
            "1b93169f4cf876d207c1fab22a2347202ab48d85"
        ],
        [
            "rewrite (@simplePartition_component (UE e ol)).",
            "VernacExtend",
            "ae7709a0cec1a1e11e1d92fc012bed7d2c79d2b5"
        ],
        [
            "reflexivity.",
            "VernacExtend",
            "5cd1ae044f26cd6d89a5a5147c1d4fc5fc719d83"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "End Uqs_ind.",
            "VernacEndSegment",
            "3e77cca44729296b96e9b24bd991d977df3ef8b0"
        ],
        [
            "Lemma UcmpDec (x y: nat * nat): { x = y } + { x <> y }.",
            "VernacStartTheoremProof",
            "4442154477045a1766b720e7efbdfd82790a5ed4"
        ],
        [
            "Proof with auto.",
            "VernacProof",
            "a7e71b78b5628467da426641e148a0229b525f22"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "destruct x.",
            "VernacExtend",
            "24973a7b5353196d2d5bd2a7e0fe5cfacd5f4460"
        ],
        [
            "destruct y.",
            "VernacExtend",
            "fbeb4c3b73b2f0e6bfc89563d7f3b824ea0ea309"
        ],
        [
            "destruct (eq_nat_dec n n1).",
            "VernacExtend",
            "3e4a90617254ce50c4a26c89061a46d419cc7692"
        ],
        [
            "destruct (eq_nat_dec n0 n2).",
            "VernacExtend",
            "f6e6f3aca49eac3d86eadb63e5dbf1943bc966ff"
        ],
        [
            "subst.",
            "VernacExtend",
            "ccc9cb848804101be22a0bb6c324861981c5c7f1"
        ],
        [
            "left...",
            "VernacExtend",
            "bf4fd72477fff45e0940a41f06078165174dbd25"
        ],
        [
            "right.",
            "VernacExtend",
            "27e417a3497755767e1a1d6ba87753ecddaee6b7"
        ],
        [
            "intro.",
            "VernacExtend",
            "3999be354c758ba0d1866e0fcc78a7288779a224"
        ],
        [
            "inversion H...",
            "VernacExtend",
            "a0442e5b7d433c68ab2488aca0371d7596377da4"
        ],
        [
            "right.",
            "VernacExtend",
            "27e417a3497755767e1a1d6ba87753ecddaee6b7"
        ],
        [
            "intro.",
            "VernacExtend",
            "3999be354c758ba0d1866e0fcc78a7288779a224"
        ],
        [
            "inversion H...",
            "VernacExtend",
            "a0442e5b7d433c68ab2488aca0371d7596377da4"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Definition UcmpCmp (x y: nat * nat): bool := unsum_bool (UcmpDec x y).",
            "VernacDefinition",
            "f5aed8625c0e606730759e1960e03546022d4a6d"
        ],
        [
            "Definition ijcount (i j: nat): monoid -> nat := count (UcmpCmp (i, j)).",
            "VernacDefinition",
            "91ed4ea2d0233716c0f54a7ad4e18c324e1e5013"
        ],
        [
            "Lemma ijcount_0 i j l: ~ In (i, j) l -> ijcount i j l = 0.",
            "VernacStartTheoremProof",
            "e4db5b46156b8291c6c71d13b1c4f2e2b76e44e7"
        ],
        [
            "Proof with auto.",
            "VernacProof",
            "a7e71b78b5628467da426641e148a0229b525f22"
        ],
        [
            "unfold ijcount.",
            "VernacExtend",
            "b7cba2d80151c52628a38fc878f8504bfb25ef3f"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "apply count_0.",
            "VernacExtend",
            "7b436b3caa82009c1317344a75e3dd34fd251d64"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "unfold UcmpCmp.",
            "VernacExtend",
            "e1e62dcfb93e3b243cd20b84d255da3c8a865229"
        ],
        [
            "case_eq (UcmpDec (i, j) x); intros...",
            "VernacExtend",
            "2e14350c7f0d8ddc6aeeed96dd3066fb6851136e"
        ],
        [
            "elimtype False.",
            "VernacExtend",
            "193053c8983316978aeded05598d605cc4f35bde"
        ],
        [
            "apply H.",
            "VernacExtend",
            "4b47b71ad0f800d57cbdc591d68949e07decb540"
        ],
        [
            "rewrite e0...",
            "VernacExtend",
            "6ad8c67f4fd107a49a0eac343feaa200ba4465bc"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma hom_ijcount i j: monoidHomo monoid NatAddMonoid (ijcount i j).",
            "VernacStartTheoremProof",
            "6389e96ea47e19590ff66b0a388caca5dce86393"
        ],
        [
            "Proof with auto.",
            "VernacProof",
            "a7e71b78b5628467da426641e148a0229b525f22"
        ],
        [
            "unfold ijcount.",
            "VernacExtend",
            "b7cba2d80151c52628a38fc878f8504bfb25ef3f"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "apply Build_monoidHomo; intros; simpl...",
            "VernacExtend",
            "86fbb920f328d406400a3754c90332d6731230d0"
        ],
        [
            "apply count_app.",
            "VernacExtend",
            "8926099f1fe5d3987927245668d98b22c5319063"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Hint Resolve hom_ijcount.",
            "VernacHints",
            "e451105fb4c3537d5eeea6a93203093db22e1eea"
        ],
        [
            "Lemma ijcount_eq_count i j: ijcount i j = eq_count UcmpDec (i, j).",
            "VernacStartTheoremProof",
            "8cec5feecb032ec9ed2f6aebcd8a9accaa19936c"
        ],
        [
            "auto.",
            "VernacExtend",
            "1f09da0addd069b3b65326f8c71967acc1e985af"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Definition qs: list (Index e ol) -> M (list (Index e ol)) := qs cmp pick.",
            "VernacDefinition",
            "311a566d38deffe5c125deaafdd7c792868c0971"
        ],
        [
            "End contents.",
            "VernacEndSegment",
            "28f505b78f584feda38f14dd967d87712e3c7f31"
        ]
    ],
    "proofs": [
        {
            "name": "ijcount_eq_count",
            "line_nb": 155,
            "steps": [
                {
                    "command": [
                        "auto.",
                        "VernacExtend",
                        "1f09da0addd069b3b65326f8c71967acc1e985af"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        }
    ]
}