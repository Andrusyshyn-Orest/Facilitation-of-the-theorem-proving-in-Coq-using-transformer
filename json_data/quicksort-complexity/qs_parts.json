{
    "filename": "qs_parts.v",
    "coq_project": "quicksort-complexity",
    "vernac_cmds": [
        [
            "Set Implicit Arguments.",
            "VernacSetOption",
            "9e84ff8896f028601d8aded48c1d4aebe60aa584"
        ],
        [
            "Require Import util.",
            "VernacRequire",
            "4430f87d7649f96d1418f130d57967666d56d84f"
        ],
        [
            "Require Import Le.",
            "VernacRequire",
            "838bfe0aac98b4a25730898d79830c3f8329aec1"
        ],
        [
            "Require Import Plus.",
            "VernacRequire",
            "a18284a3c28ae9356bfc5084ee8540c5d50631e5"
        ],
        [
            "Require Import Lt.",
            "VernacRequire",
            "fe47d80ebda42c5f075a36fb67288742f8593767"
        ],
        [
            "Require Import Arith.",
            "VernacRequire",
            "7f40051ec5b363eee0bbfd802b43ad2f8b97479f"
        ],
        [
            "Require Import monoid_expec.",
            "VernacRequire",
            "f4722d2df5fe7701983e13613d638ef451b5a69b"
        ],
        [
            "Require Import List.",
            "VernacRequire",
            "d9bcce4a390afeb160107bf87c6f7abe3d82c6d6"
        ],
        [
            "Require Import monads.",
            "VernacRequire",
            "5b2fd91685e0255ced6df1c87a652a12b8990a39"
        ],
        [
            "Require Import list_utils.",
            "VernacRequire",
            "f5ce54076a68b3ca9f48d4de158eadf0961b9e1f"
        ],
        [
            "Require Import Coq.Program.Wf.",
            "VernacRequire",
            "020696913b1c2b6c01425c8967a530fa30e972fb"
        ],
        [
            "Require Import monoid_monad_trans.",
            "VernacRequire",
            "4bb2bf1c803b5281d50c61057d2ecff387723de8"
        ],
        [
            "Require Import nat_seqs.",
            "VernacRequire",
            "350f7c7394c4c6b69193e921e8497ea2449f9eb8"
        ],
        [
            "Require Import monoid_tree_monad.",
            "VernacRequire",
            "df02db82b6b0077758f8e701413ed84177732f77"
        ],
        [
            "Require qs_definitions.",
            "VernacRequire",
            "03f3d90e9fc98395b688694f99d898813b8320cc"
        ],
        [
            "Require fix_measure_utils.",
            "VernacRequire",
            "116fc920cc11f96768057e00a4c45b5e9201f622"
        ],
        [
            "Require Import nat_below.",
            "VernacRequire",
            "5fd79b191289e7e9092d80072ab4925e292a74b4"
        ],
        [
            "Require Coq.Vectors.Vector.",
            "VernacRequire",
            "27ec3d32426db5a89e9a310b96f6706f81b344a3"
        ],
        [
            "Import qs_definitions.mon_nondet.",
            "VernacImport",
            "5c0eef652096b4e37e1770ee4f0d6268f2583b1b"
        ],
        [
            "Set Shrink Obligations.",
            "VernacSetOption",
            "f7395d097ae8a78c5b6d9d34117b07c84fe0d248"
        ],
        [
            "Section contents.",
            "VernacBeginSection",
            "64247bb134c943946794e7969d57832818b1ace7"
        ],
        [
            "Variable M: Monad.",
            "VernacAssumption",
            "115add36d9ac4e803c7dfc9a7b04674e74e752ec"
        ],
        [
            "Variables (X: Set) (pick: forall T: Set, ne_list.L T -> M T) (cmp: X -> X -> M comparison).",
            "VernacAssumption",
            "9392b84841e23476fa94e13bd2a734ef2af98973"
        ],
        [
            "Definition lowRecPart n (t: Vector.t X (S n)) (i: natBelow (S n)) (part: {p: Partitioning X | Permutation.Permutation (p Eq ++ p Lt ++ p Gt) (vec.remove t i)}) := low <- qs cmp pick (proj1_sig part Lt); upp <- qs cmp pick (proj1_sig part Gt); ret (low ++ vec.nth t i :: proj1_sig part Eq ++ upp).",
            "VernacDefinition",
            "ae2d95787207161b5e158157bba4bf75b02b2057"
        ],
        [
            "Definition partitionPart n (t: Vector.t X (S n)) (i: natBelow (S n)) := partition M cmp (vec.nth t i) (vec.remove t i) >>= lowRecPart t i.",
            "VernacDefinition",
            "3372d7014bfae6e961e9817a77a2342f3222c96d"
        ],
        [
            "Definition selectPivotPart n (t: Vector.t X (S n)) := pick (ne_list.from_vec (vec.nats 0 (S n))) >>= partitionPart t.",
            "VernacDefinition",
            "4d91fc89dd515a29a280c72f2e3594be1c5a1002"
        ],
        [
            "Lemma selectPivotPart_eq n m (t: Vector.t X (S n)) (t': Vector.t X (S m)): vec.to_list t = vec.to_list t' -> selectPivotPart t = selectPivotPart t'.",
            "VernacStartTheoremProof",
            "ca5c5534a1c9a4804af578e3a17b427d6fd09d9f"
        ],
        [
            "Proof with auto.",
            "VernacProof",
            "a7e71b78b5628467da426641e148a0229b525f22"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "pose proof (vec.length t).",
            "VernacExtend",
            "bd89d72e1ad56a1a4eb080b0964953db213eaf40"
        ],
        [
            "rewrite H in H0.",
            "VernacExtend",
            "6f58b4b0368431f7b1e1aba2ba3fa37dd308e428"
        ],
        [
            "rewrite vec.length in H0.",
            "VernacExtend",
            "7d5bbd5f7c6918a02da0fecc10a69cb0f03b3ca7"
        ],
        [
            "inversion H0.",
            "VernacExtend",
            "38a13882efcff2ae2c6c07fc8055d56c6c1776f2"
        ],
        [
            "subst.",
            "VernacExtend",
            "ccc9cb848804101be22a0bb6c324861981c5c7f1"
        ],
        [
            "clear H0.",
            "VernacExtend",
            "fe72360cf92275fb4ba47f89dfeb905e6d21c4a9"
        ],
        [
            "rewrite (vec.eq_as_lists t t')...",
            "VernacExtend",
            "367b58ae470dae1ee2b31d2f47800a3eda2d1c4c"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Definition body n (v: Vector.t X n) := match v with | Vector.nil => ret nil | l => selectPivotPart l end.",
            "VernacDefinition",
            "34cd84a8c4f43b6802338a9b574420e2f9ef19a4"
        ],
        [
            "Definition raw_body (l0: list X) (qs: {l': list X | length l' < length l0} -> M (list X)) := match l0 as l1 return (l1 = l0 -> M (list X)) with | nil => fun _ => ret nil | h :: t => fun e => i <- pick (ne_list.from_vec (vec.nats 0 (length (h :: t)))); part <- partition M cmp (vec.nth (h :: t) i) (vec.remove (h :: t) i); low <- qs (exist (fun l': list X => length l' < length l0) (proj1_sig part Lt) (qs_definitions.mon_nondet.qs_obligation_1 M (fun l H => qs (exist _ l H)) e i part)); upp <- qs (exist (fun l': list X => length l' < length l0) (proj1_sig part Gt) (qs_definitions.mon_nondet.qs_obligation_2 M (fun l H => qs (exist _ l H)) e i part)); ret (low ++ vec.nth (h :: t) i :: proj1_sig part Eq ++ upp) end refl_equal.",
            "VernacDefinition",
            "442a7ab805419a2bae09d4689fec280520016fa7"
        ],
        [
            "Variable e: extMonad M.",
            "VernacAssumption",
            "d759a18a9bafbd1ba5c6656bb3b6bb2d796a1937"
        ],
        [
            "Definition raw_body_ext (l: list X) (qs qs': {l': list X | length l' < length l} -> M (list X)): (forall x y, proj1_sig x = proj1_sig y -> qs x = qs' y) -> raw_body l qs = raw_body l qs'.",
            "VernacDefinition",
            "0b5505df5f4d9f2cf7320565920165e708867685"
        ],
        [
            "Proof with auto.",
            "VernacProof",
            "a7e71b78b5628467da426641e148a0229b525f22"
        ],
        [
            "unfold raw_body.",
            "VernacExtend",
            "125a09281c9ed11c03aa5bb83bd532ed876a64b0"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "destruct l...",
            "VernacExtend",
            "963fc99ea720efd97229633d63f4328017299f89"
        ],
        [
            "apply e.",
            "VernacExtend",
            "7e471e9a67d7e270fc9d49b2286b43a098cffb1d"
        ],
        [
            "intro.",
            "VernacExtend",
            "3999be354c758ba0d1866e0fcc78a7288779a224"
        ],
        [
            "apply e.",
            "VernacExtend",
            "7e471e9a67d7e270fc9d49b2286b43a098cffb1d"
        ],
        [
            "intro.",
            "VernacExtend",
            "3999be354c758ba0d1866e0fcc78a7288779a224"
        ],
        [
            "apply bind_eqq...",
            "VernacExtend",
            "934e901a352093a7e358f8849749eea3cbdfc152"
        ],
        [
            "intro.",
            "VernacExtend",
            "3999be354c758ba0d1866e0fcc78a7288779a224"
        ],
        [
            "apply bind_eqq...",
            "VernacExtend",
            "934e901a352093a7e358f8849749eea3cbdfc152"
        ],
        [
            "intro...",
            "VernacExtend",
            "7274cb42adf060ad435addc8c1ce77d7b7ea4ef8"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma bodies x0: raw_body x0 (fun y: {y: list X | length y < length x0} => qs (M:=M) cmp pick (proj1_sig y)) = body x0.",
            "VernacStartTheoremProof",
            "813067d8e71acc8f7c7069243c3fa2abf880a671"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "unfold raw_body, body, selectPivotPart, partitionPart, lowRecPart.",
            "VernacExtend",
            "69392286b89f24ad256bb9402e53807ff2f24467"
        ],
        [
            "destruct x0; reflexivity.",
            "VernacExtend",
            "a720f16ee7a2d669b4d8cde670c977f7ee82d6cb"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma toBody (l: list X): qs cmp pick l = body l.",
            "VernacStartTheoremProof",
            "62ff32b3a701cd2a762f64b13474058cc8dd96be"
        ],
        [
            "Proof with auto.",
            "VernacProof",
            "a7e71b78b5628467da426641e148a0229b525f22"
        ],
        [
            "unfold qs.",
            "VernacExtend",
            "aabcf467b0395ceb912b170818dbe9294fc93177"
        ],
        [
            "fold raw_body.",
            "VernacExtend",
            "f17224ad6453ce4bf555e5cac26af71cf11937e0"
        ],
        [
            "rewrite fix_measure_utils.unfold.",
            "VernacExtend",
            "6a8f52b1ba48bbedaafc66aff526ae9f68f8ab40"
        ],
        [
            "rewrite <- bodies.",
            "VernacExtend",
            "793bbd1aa5bd725d02cc3b6c9c8563ca118c299f"
        ],
        [
            "unfold qs.",
            "VernacExtend",
            "aabcf467b0395ceb912b170818dbe9294fc93177"
        ],
        [
            "fold raw_body...",
            "VernacExtend",
            "898374cc5e041347d805e15acfe2773d242cbeb3"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "apply raw_body_ext.",
            "VernacExtend",
            "45d19300d1d078345bc91f33b539a6a8e27bd23f"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "destruct x.",
            "VernacExtend",
            "24973a7b5353196d2d5bd2a7e0fe5cfacd5f4460"
        ],
        [
            "destruct y.",
            "VernacExtend",
            "fbeb4c3b73b2f0e6bfc89563d7f3b824ea0ea309"
        ],
        [
            "simpl in H0.",
            "VernacExtend",
            "a4a6a8421870dbf7255f8d031744eec32f12a941"
        ],
        [
            "subst...",
            "VernacExtend",
            "b907a93c53d5c34384373e3aac13eba90f0a4fdc"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma toBody_cons (n: nat) (v: Vector.t X (S n)): body v = selectPivotPart v.",
            "VernacStartTheoremProof",
            "9e71acb933ddf4af40dbcbb9ac19556b7753f1d5"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "rewrite (vec.eq_cons v).",
            "VernacExtend",
            "63b52474d81d5aebe80644a7f1d33c4f5126a307"
        ],
        [
            "simpl.",
            "VernacExtend",
            "1b93169f4cf876d207c1fab22a2347202ab48d85"
        ],
        [
            "reflexivity.",
            "VernacExtend",
            "5cd1ae044f26cd6d89a5a5147c1d4fc5fc719d83"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma rect (Q: list X -> M (list X) -> Type): (Q nil (ret nil)) -> (forall n (v: Vector.t X (S n)), (forall y, length y < S n -> Q y (qs cmp pick y)) -> Q v (selectPivotPart v)) -> forall x, Q x (qs cmp pick x).",
            "VernacStartTheoremProof",
            "c210e60b01df0b6d190ce3e2827d09096f68d3c5"
        ],
        [
            "Proof with auto.",
            "VernacProof",
            "a7e71b78b5628467da426641e148a0229b525f22"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "unfold qs.",
            "VernacExtend",
            "aabcf467b0395ceb912b170818dbe9294fc93177"
        ],
        [
            "match goal with |- context C [Fix_sub ?A ?R ?P ?p ?f ?x] => let folded := context C [ Fix_sub A R P p raw_body x ] in change folded end.",
            "VernacExtend",
            "ca9fbd6b18dfa547579e7ec5b47ae7a2404cbcfb"
        ],
        [
            "apply fix_measure_utils.rect.",
            "VernacExtend",
            "4230cf1d8d24a8119d150e792874eceb44776121"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "apply raw_body_ext.",
            "VernacExtend",
            "45d19300d1d078345bc91f33b539a6a8e27bd23f"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "destruct x1.",
            "VernacExtend",
            "ff1dad6ec5db7ff89c9cf6f997a051344d995417"
        ],
        [
            "destruct y.",
            "VernacExtend",
            "fbeb4c3b73b2f0e6bfc89563d7f3b824ea0ea309"
        ],
        [
            "simpl in H0.",
            "VernacExtend",
            "a4a6a8421870dbf7255f8d031744eec32f12a941"
        ],
        [
            "subst...",
            "VernacExtend",
            "b907a93c53d5c34384373e3aac13eba90f0a4fdc"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "erewrite raw_body_ext.",
            "VernacExtend",
            "dfb43510c2c9969f9b06fa8bb830daa1b0a11885"
        ],
        [
            "rewrite bodies.",
            "VernacExtend",
            "45cd92d01a70ae1c0ff8661c7608d50b3800bb15"
        ],
        [
            "unfold body.",
            "VernacExtend",
            "3774747b225aa5d9fc1cc9ca8e6bc627f2b4c71f"
        ],
        [
            "destruct x0...",
            "VernacExtend",
            "3dc81ee3f6f61c6a091f66e987026c21574e3040"
        ],
        [
            "simpl.",
            "VernacExtend",
            "1b93169f4cf876d207c1fab22a2347202ab48d85"
        ],
        [
            "rewrite <- (vec.list_round_trip (x0 :: x1)).",
            "VernacExtend",
            "d65e2b5bb020de2ceafcec2570e89d90da3ff9b4"
        ],
        [
            "apply X1.",
            "VernacExtend",
            "416bb848e972379a52d936c78e22145f091564e3"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "unfold qs.",
            "VernacExtend",
            "aabcf467b0395ceb912b170818dbe9294fc93177"
        ],
        [
            "fold raw_body...",
            "VernacExtend",
            "898374cc5e041347d805e15acfe2773d242cbeb3"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "unfold qs.",
            "VernacExtend",
            "aabcf467b0395ceb912b170818dbe9294fc93177"
        ],
        [
            "fold raw_body.",
            "VernacExtend",
            "f17224ad6453ce4bf555e5cac26af71cf11937e0"
        ],
        [
            "f_equal; assumption.",
            "VernacExtend",
            "6b6681a531677ea4fa72a5d841e2b1b034eaef95"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma rect_using_lists (Q: list X -> M (list X) -> Type): (Q nil (ret nil)) -> (forall h t, (forall y, length y <= length t -> Q y (qs cmp pick y)) -> Q (h::t) (selectPivotPart (h::t))) -> forall x, Q x (qs cmp pick x).",
            "VernacStartTheoremProof",
            "a4a2aa835c2fb444a83a29ff4c48ac9788a12910"
        ],
        [
            "Proof with auto with arith.",
            "VernacProof",
            "007741178d53d6a043487bfdd1e6c77ea6388468"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "apply rect...",
            "VernacExtend",
            "f815edeaf88445484fa1acadeef293fb710bd1a0"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "simpl in X1.",
            "VernacExtend",
            "67badd373f7fe2ed2aead71d34621d6d2360cb3c"
        ],
        [
            "rewrite (vec.eq_cons v).",
            "VernacExtend",
            "63b52474d81d5aebe80644a7f1d33c4f5126a307"
        ],
        [
            "simpl.",
            "VernacExtend",
            "1b93169f4cf876d207c1fab22a2347202ab48d85"
        ],
        [
            "assert (forall y : list X, length y <= length (vec.to_list (vec.tail v)) -> Q y (qs cmp pick y)).",
            "VernacExtend",
            "b5f7fc8c08367f1ed1d5c7dcea5c76a8d2b970d3"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "apply X2.",
            "VernacExtend",
            "0f8ae138a4d45799913b6ca91d42f5cf4835071c"
        ],
        [
            "rewrite vec.length in H...",
            "VernacExtend",
            "9db3a8ec5e5a4d7440e221a60c10985f8dadfbe0"
        ],
        [
            "pose proof (X1 (vec.head v) (vec.tail v) X3).",
            "VernacExtend",
            "c7fd9abeabe15c9176ab0d1af700a1a4c0bc74cc"
        ],
        [
            "pose proof (selectPivotPart_eq (Vector.cons (vec.head v) (vec.from_list (vec.to_list (vec.tail v)))) (Vector.cons (vec.head v) (vec.tail v))).",
            "VernacExtend",
            "c5279a29854c4313023e72ead48fbbc93804101d"
        ],
        [
            "rewrite <- H...",
            "VernacExtend",
            "7ab9cc9592538ff27b883cb1847c23639e95cf63"
        ],
        [
            "simpl.",
            "VernacExtend",
            "1b93169f4cf876d207c1fab22a2347202ab48d85"
        ],
        [
            "rewrite vec.list_round_trip...",
            "VernacExtend",
            "f5668f0890211fe3ba70330dd07c3d5d63c2c735"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "End contents.",
            "VernacEndSegment",
            "28f505b78f584feda38f14dd967d87712e3c7f31"
        ]
    ],
    "proofs": [
        {
            "name": "bodies",
            "line_nb": 54,
            "steps": [
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "unfold raw_body, body, selectPivotPart, partitionPart, lowRecPart.",
                        "VernacExtend",
                        "69392286b89f24ad256bb9402e53807ff2f24467"
                    ]
                },
                {
                    "command": [
                        "destruct x0; reflexivity.",
                        "VernacExtend",
                        "a720f16ee7a2d669b4d8cde670c977f7ee82d6cb"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "toBody_cons",
            "line_nb": 75,
            "steps": [
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "rewrite (vec.eq_cons v).",
                        "VernacExtend",
                        "63b52474d81d5aebe80644a7f1d33c4f5126a307"
                    ]
                },
                {
                    "command": [
                        "simpl.",
                        "VernacExtend",
                        "1b93169f4cf876d207c1fab22a2347202ab48d85"
                    ]
                },
                {
                    "command": [
                        "reflexivity.",
                        "VernacExtend",
                        "5cd1ae044f26cd6d89a5a5147c1d4fc5fc719d83"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        }
    ]
}