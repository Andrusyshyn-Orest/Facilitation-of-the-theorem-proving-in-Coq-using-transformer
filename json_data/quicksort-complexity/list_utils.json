{
    "filename": "list_utils.v",
    "coq_project": "quicksort-complexity",
    "vernac_cmds": [
        [
            "Set Implicit Arguments.",
            "VernacSetOption",
            "9e84ff8896f028601d8aded48c1d4aebe60aa584"
        ],
        [
            "Unset Standard Proposition Elimination Names.",
            "VernacUnsetOption",
            "911574cdf91989455d0d3d11c7a9b0ca10fd1ae6"
        ],
        [
            "Require Export List.",
            "VernacRequire",
            "d626cb98fe764077098989d26509c9f7407e0464"
        ],
        [
            "Require Import Program Omega Factorial Bool util Morphisms Relations RelationClasses Permutation.",
            "VernacRequire",
            "86c72443518b0ab91686ea3d97f9d8e5c6d9a763"
        ],
        [
            "Hint Resolve in_map Permutation_refl.",
            "VernacHints",
            "9dd5d0fdb745f01a6ea50a5e24f75eab91149086"
        ],
        [
            "Hint Constructors NoDup.",
            "VernacHints",
            "8b557125cde796cb29869554aa4d941d4ec5321e"
        ],
        [
            "Hint Constructors NoDup Permutation.",
            "VernacHints",
            "428834a871f8110e9997ea63f4ef370d958700f6"
        ],
        [
            "Arguments length {A}.",
            "VernacArguments",
            "403f8cf9872e2030d1eb7b6aafbe76a46fe36e45"
        ],
        [
            "Arguments Permutation {A}.",
            "VernacArguments",
            "3a0e969399c97c288944887e40875fa12ed36dcf"
        ],
        [
            "Arguments map {A B}.",
            "VernacArguments",
            "43c459b6e1ae6f40ba0b25c610ed244a1c55787d"
        ],
        [
            "Arguments tail {A}.",
            "VernacArguments",
            "90f1bf85a70356229dbbf32fdb61b7edcc89b3ce"
        ],
        [
            "Section count.",
            "VernacBeginSection",
            "25e7b475e1403066526be0acd247fef46bb9713d"
        ],
        [
            "Context {X: Type} (p: X -> bool).",
            "VernacContext",
            "0f7af2154af71bd9e3fbf4e2c13ed2823d7d7934"
        ],
        [
            "Fixpoint count (l: list X): nat := match l with | nil => 0 | h :: t => if p h then S (count t) else count t end.",
            "VernacFixpoint",
            "b5b34d48b3219d81322283c73afa731f368a0ddd"
        ],
        [
            "Lemma count_app l l': count (l ++ l') = count l + count l'.",
            "VernacStartTheoremProof",
            "8eb428125a300c7804bfbfd3c966afe7b9c75e0c"
        ],
        [
            "Proof with auto.",
            "VernacProof",
            "a7e71b78b5628467da426641e148a0229b525f22"
        ],
        [
            "induction l...",
            "VernacExtend",
            "a4571710fc634c72b7b07ca630627ad571eee64e"
        ],
        [
            "simpl.",
            "VernacExtend",
            "1b93169f4cf876d207c1fab22a2347202ab48d85"
        ],
        [
            "destruct (p a)...",
            "VernacExtend",
            "3dfdde9bdd56b69f3d9c1021932ed61296e8639b"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "rewrite IHl...",
            "VernacExtend",
            "a48c59a0d042c7310da6766246ef180a091c8386"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma count_0 l: (forall x, In x l -> p x = false) -> count l = 0.",
            "VernacStartTheoremProof",
            "ef872a7830f742858e651321950e2eba265358b5"
        ],
        [
            "Proof with auto.",
            "VernacProof",
            "a7e71b78b5628467da426641e148a0229b525f22"
        ],
        [
            "induction l...",
            "VernacExtend",
            "a4571710fc634c72b7b07ca630627ad571eee64e"
        ],
        [
            "simpl.",
            "VernacExtend",
            "1b93169f4cf876d207c1fab22a2347202ab48d85"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "rewrite H...",
            "VernacExtend",
            "2ded38871f6ef5ae4e687aa3245494ae541f7202"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma count_le l: count l <= length l.",
            "VernacStartTheoremProof",
            "a63453d4955734c81e65639ccdfe8e26dc56ca3f"
        ],
        [
            "Proof with auto with arith.",
            "VernacProof",
            "007741178d53d6a043487bfdd1e6c77ea6388468"
        ],
        [
            "induction l...",
            "VernacExtend",
            "a4571710fc634c72b7b07ca630627ad571eee64e"
        ],
        [
            "simpl.",
            "VernacExtend",
            "1b93169f4cf876d207c1fab22a2347202ab48d85"
        ],
        [
            "destruct (p a)...",
            "VernacExtend",
            "3dfdde9bdd56b69f3d9c1021932ed61296e8639b"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma count_filter_le (f: X -> bool) x: count (filter f x) <= count x.",
            "VernacStartTheoremProof",
            "85fdfb04d8c4d74fc5c84a2149e279a9fd8769d6"
        ],
        [
            "Proof with auto with arith.",
            "VernacProof",
            "007741178d53d6a043487bfdd1e6c77ea6388468"
        ],
        [
            "induction x...",
            "VernacExtend",
            "32a9acd062d9403b496a2f40e432d3e2b104f8c0"
        ],
        [
            "simpl.",
            "VernacExtend",
            "1b93169f4cf876d207c1fab22a2347202ab48d85"
        ],
        [
            "destruct (f a).",
            "VernacExtend",
            "3690a4962803abcb6e77650fabe32925b434f96d"
        ],
        [
            "simpl.",
            "VernacExtend",
            "1b93169f4cf876d207c1fab22a2347202ab48d85"
        ],
        [
            "destruct (p a)...",
            "VernacExtend",
            "3dfdde9bdd56b69f3d9c1021932ed61296e8639b"
        ],
        [
            "destruct (p a)...",
            "VernacExtend",
            "3dfdde9bdd56b69f3d9c1021932ed61296e8639b"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Hint Resolve count_le.",
            "VernacHints",
            "abcdb210d0018068b3776a9ada881341f7798640"
        ],
        [
            "Lemma count_lt v l: In v l -> p v = false -> count l < length l.",
            "VernacStartTheoremProof",
            "e11e884d2afe2aecad64370bc8279a326dbef9df"
        ],
        [
            "Proof with auto with arith.",
            "VernacProof",
            "007741178d53d6a043487bfdd1e6c77ea6388468"
        ],
        [
            "induction l; simpl; intros.",
            "VernacExtend",
            "34e9ea5965da389dfe8faf53c8ea4965d4fdcc22"
        ],
        [
            "elimtype False...",
            "VernacExtend",
            "a2889d4501f0ae3aea80adc3b5e37c1033b6a559"
        ],
        [
            "inversion_clear H.",
            "VernacExtend",
            "90909d92eb32e95a21a5b90b29a49dc97bcea342"
        ],
        [
            "subst.",
            "VernacExtend",
            "ccc9cb848804101be22a0bb6c324861981c5c7f1"
        ],
        [
            "rewrite H0...",
            "VernacExtend",
            "50fce2eb274e9c787791aa79cecdd73ad9f1e643"
        ],
        [
            "destruct (p a)...",
            "VernacExtend",
            "3dfdde9bdd56b69f3d9c1021932ed61296e8639b"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "End count.",
            "VernacEndSegment",
            "643d4f3c6d6dfae110de7f2dfffa2fbd3ae9aa79"
        ],
        [
            "Hint Resolve @count_le.",
            "VernacHints",
            "995e93beebddbd5183e2b63e69cf2c6b2e166c8c"
        ],
        [
            "Lemma NoDup_map_inv' A B (f: A -> B) (l: list A): NoDup (map f l) -> NoDup l.",
            "VernacStartTheoremProof",
            "8332e274888a17187ef5b1d07473aa968ba41d3e"
        ],
        [
            "Proof with auto.",
            "VernacProof",
            "a7e71b78b5628467da426641e148a0229b525f22"
        ],
        [
            "induction l...",
            "VernacExtend",
            "a4571710fc634c72b7b07ca630627ad571eee64e"
        ],
        [
            "simpl.",
            "VernacExtend",
            "1b93169f4cf876d207c1fab22a2347202ab48d85"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "inversion_clear H.",
            "VernacExtend",
            "90909d92eb32e95a21a5b90b29a49dc97bcea342"
        ],
        [
            "apply NoDup_cons...",
            "VernacExtend",
            "5dfb9d6d83312c0b725609b85ad369f28ad76b87"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma length_filter X (p: X -> bool) (l: list X): length (filter p l) = count p l.",
            "VernacStartTheoremProof",
            "7c08af0e2aed4134467bec8eb72301cbf5da097f"
        ],
        [
            "Proof with auto.",
            "VernacProof",
            "a7e71b78b5628467da426641e148a0229b525f22"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "induction l...",
            "VernacExtend",
            "a4571710fc634c72b7b07ca630627ad571eee64e"
        ],
        [
            "simpl.",
            "VernacExtend",
            "1b93169f4cf876d207c1fab22a2347202ab48d85"
        ],
        [
            "destruct (p a)...",
            "VernacExtend",
            "3dfdde9bdd56b69f3d9c1021932ed61296e8639b"
        ],
        [
            "simpl...",
            "VernacExtend",
            "504f71dca671c3e66b68ade966c1b4804373be90"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma length_filter_le T (p: T -> bool) (l: list T): length (filter p l) <= length l.",
            "VernacStartTheoremProof",
            "6dfba3fb184aa981950aaad7f0cb6b18fea3cf8a"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "rewrite length_filter.",
            "VernacExtend",
            "dd942f2f237fd3b0772b5ef3c557fa84c8bd4dec"
        ],
        [
            "apply count_le.",
            "VernacExtend",
            "7f3631e7658c0bb967ca2d0fc1e90cb90a3e5c9b"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma filter_all X (p: X -> bool) (l: list X): (forall x, In x l -> p x = true) -> filter p l = l.",
            "VernacStartTheoremProof",
            "92a9bcd5c76c0dd91091a01958a3f25796e56f03"
        ],
        [
            "Proof with auto.",
            "VernacProof",
            "a7e71b78b5628467da426641e148a0229b525f22"
        ],
        [
            "induction l...",
            "VernacExtend",
            "a4571710fc634c72b7b07ca630627ad571eee64e"
        ],
        [
            "simpl.",
            "VernacExtend",
            "1b93169f4cf876d207c1fab22a2347202ab48d85"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "rewrite H...",
            "VernacExtend",
            "2ded38871f6ef5ae4e687aa3245494ae541f7202"
        ],
        [
            "rewrite IHl...",
            "VernacExtend",
            "a48c59a0d042c7310da6766246ef180a091c8386"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma In_filter T (p: T -> bool) (t: T): p t = true -> forall l, In t l -> In t (filter p l).",
            "VernacStartTheoremProof",
            "b1cd096edb508c7accc9d2acd94b80f7a20dc104"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "destruct (filter_In p t l).",
            "VernacExtend",
            "d31a5d31257d12e831bd94393e358692871b10ab"
        ],
        [
            "apply H2; auto.",
            "VernacExtend",
            "30acbf5144f9dcdba4f738b81d251d83daba847e"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma incl_filter X (p: X -> bool) (l: list X): incl (filter p l) l.",
            "VernacStartTheoremProof",
            "065b5facd369209a5836488e709bd4c39ac6477c"
        ],
        [
            "Proof with auto.",
            "VernacProof",
            "a7e71b78b5628467da426641e148a0229b525f22"
        ],
        [
            "unfold incl.",
            "VernacExtend",
            "bc668a228fabc181ca6e5d6b8b8a0673a10724dc"
        ],
        [
            "induction l; simpl...",
            "VernacExtend",
            "2b807d50e545b339f4a1eacc1448c456412a54df"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "destruct (p a); firstorder.",
            "VernacExtend",
            "28aec77dbf39164115dc0e9e269d53859c152968"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma incl_trans A (x y: list A): incl x y -> forall z, incl y z -> incl x z.",
            "VernacStartTheoremProof",
            "8118b56add732c47c5ef54fc1008956dab003890"
        ],
        [
            "do 5 intro.",
            "VernacExtend",
            "5882c01058e2f22843a818f2c078e897f42dd1c5"
        ],
        [
            "apply H0.",
            "VernacExtend",
            "c75b3371fc84f2aae811de7e80b1bdb43e4d249a"
        ],
        [
            "apply H.",
            "VernacExtend",
            "4b47b71ad0f800d57cbdc591d68949e07decb540"
        ],
        [
            "assumption.",
            "VernacExtend",
            "41f0308313ff87e6ab2782f90d6021ec4b55d932"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Hint Resolve incl_filter.",
            "VernacHints",
            "88d413f83f7189993e00520a359f013fab43118a"
        ],
        [
            "Lemma filter_preserves_incl X (p: X -> bool) (a b: list X): incl a b -> incl (filter p a) (filter p b).",
            "VernacStartTheoremProof",
            "8f5b1310e9c021114e027b9b8ef1c1c572836a45"
        ],
        [
            "Proof with auto.",
            "VernacProof",
            "a7e71b78b5628467da426641e148a0229b525f22"
        ],
        [
            "unfold incl.",
            "VernacExtend",
            "bc668a228fabc181ca6e5d6b8b8a0673a10724dc"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "destruct (filter_In p a0 a).",
            "VernacExtend",
            "3649e4b2d6ff3118e815332b35720dfc6431807b"
        ],
        [
            "clear H2.",
            "VernacExtend",
            "d86cdda4c02f9faf6d4c6694d967beddb27ce36a"
        ],
        [
            "destruct (H1 H0).",
            "VernacExtend",
            "0cb81f97e7eec96cb40374d40ade017891283952"
        ],
        [
            "clear H1.",
            "VernacExtend",
            "c05bbc655b5fdcbbabbab72bd73c28fb300d5502"
        ],
        [
            "apply In_filter...",
            "VernacExtend",
            "ae871df1d124ae61d57962160bfec1273eea4deb"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Hint Resolve filter_preserves_incl.",
            "VernacHints",
            "70ce5e6a0ede50c7675ea92d07d166310f878c18"
        ],
        [
            "Lemma In_inv_perm X (x: X) (l: list X): In x l -> exists l', Permutation (x :: l') l.",
            "VernacStartTheoremProof",
            "ebe0595c18ea61eda8ac071e209f6b997d1efed1"
        ],
        [
            "Proof with eauto.",
            "VernacProof",
            "12721c224a5e1fa232c2328aabfe1f5101d235c4"
        ],
        [
            "induction l; intros; inversion_clear H.",
            "VernacExtend",
            "39106fcfc9f6919a6d96f9b275cae4880bc3e3fd"
        ],
        [
            "subst...",
            "VernacExtend",
            "b907a93c53d5c34384373e3aac13eba90f0a4fdc"
        ],
        [
            "destruct IHl...",
            "VernacExtend",
            "322611ec8bc8e751c8e3c8a8be38d5bdec839160"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma In_map_inv T U (f: T -> U) (l: list T) (y: U): In y (map f l) -> exists x, f x = y /\\ In x l.",
            "VernacStartTheoremProof",
            "4ff946c2b998f8fce9e704777327542d2c067fe4"
        ],
        [
            "induction l; firstorder.",
            "VernacExtend",
            "5e2a7afa3776c43af5271ec38d2e5ccf98ad1f2c"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Arguments In_map_inv [T U f l y].",
            "VernacArguments",
            "1ab13fec09ff1fdf0f11af8de855f3466f7a97e3"
        ],
        [
            "Instance In_Permutation A (x: A): Proper (Permutation ==> iff) (In x).",
            "VernacInstance",
            "cad4a984a9cee389a1fb03dd79291fad5a0a60c6"
        ],
        [
            "repeat intro.",
            "VernacExtend",
            "b1b5d9b3004bf4634299c208df98406e88278608"
        ],
        [
            "pose proof (Permutation_in).",
            "VernacExtend",
            "f732d7560a84ee8cea3f6b76463857aab10ca2e4"
        ],
        [
            "pose proof (Permutation_sym).",
            "VernacExtend",
            "32ab4886e7aa48392ecfc533b9734be9b550d634"
        ],
        [
            "firstorder.",
            "VernacExtend",
            "ceb9f57e98a5f5a73ee421cf30fd2f4f09432d14"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Instance Permutation_NoDup {X}: Proper (Permutation ==> iff) (@NoDup X).",
            "VernacInstance",
            "7f241fb6f19dc58b37c6f88117786db209e6983e"
        ],
        [
            "Proof with firstorder auto.",
            "VernacProof",
            "0bb654179c8930abd66af33931e77b82d99bcb66"
        ],
        [
            "pose proof NoDup_cons.",
            "VernacExtend",
            "4f02a4577784bbfc09b1188c61d7a64179f0329f"
        ],
        [
            "intros ? ? E.",
            "VernacExtend",
            "8c84bfd96c62baace71b9d930478bbba10f282ed"
        ],
        [
            "induction E; [firstorder | | | firstorder].",
            "VernacExtend",
            "157df80b5736cdb676105ccedd97b5de00ea6368"
        ],
        [
            "split; intro A; inversion_clear A; apply NoDup_cons...",
            "VernacExtend",
            "725ca057323611acd242d0a86eb51c511516e2df"
        ],
        [
            "rewrite <- E...",
            "VernacExtend",
            "7de6f08c933b0a4cf0d77ff6394b162d649d4a8c"
        ],
        [
            "rewrite E...",
            "VernacExtend",
            "6646ee16a9ad2499b0633940b3525948f5164fb8"
        ],
        [
            "split; intro A; inversion_clear A; inversion_clear H1...",
            "VernacExtend",
            "b92ac8f0f7f51bc59d86b25843c0691447098db5"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Hint Resolve incl_tran.",
            "VernacHints",
            "c5e6d6cab6872ec75c26da91da7d9f04d21a638f"
        ],
        [
            "Lemma Permutation_incl X (a b: list X): Permutation a b -> incl a b.",
            "VernacStartTheoremProof",
            "f55c2b7f8ab3a2901eb72280af74a3c023ab0842"
        ],
        [
            "induction 1; firstorder.",
            "VernacExtend",
            "337c059385204a3fa165df5fd0e68b6d1f78cb49"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Instance count_perm A: Proper (pointwise_relation _ eq ==> Permutation ==> eq) (@count A).",
            "VernacInstance",
            "f1eb2b0ffe77daeab02e1b08eb86cc5735231b76"
        ],
        [
            "Proof with auto.",
            "VernacProof",
            "a7e71b78b5628467da426641e148a0229b525f22"
        ],
        [
            "intros p p' E.",
            "VernacExtend",
            "da9e6d739d5e9a11f76da362e8d1eab42f96131e"
        ],
        [
            "assert (forall l, count p l = count p' l).",
            "VernacExtend",
            "9b59029425bb0453a3cec88ddbbb83351e49078f"
        ],
        [
            "induction l...",
            "VernacExtend",
            "a4571710fc634c72b7b07ca630627ad571eee64e"
        ],
        [
            "simpl.",
            "VernacExtend",
            "1b93169f4cf876d207c1fab22a2347202ab48d85"
        ],
        [
            "rewrite E, IHl...",
            "VernacExtend",
            "951eda59d505d016a2569c582ad8f1c2df0e99b3"
        ],
        [
            "intros l l' P.",
            "VernacExtend",
            "356bb0f75299268e4f653c57a51c4d6deb60ff0b"
        ],
        [
            "induction P; intros; simpl...",
            "VernacExtend",
            "11698a09267f64e1429ee094bec7b2cd0c71c164"
        ],
        [
            "rewrite IHP.",
            "VernacExtend",
            "1638cf3a6249603db5f8acb07499d51856feef03"
        ],
        [
            "rewrite E...",
            "VernacExtend",
            "6646ee16a9ad2499b0633940b3525948f5164fb8"
        ],
        [
            "repeat rewrite E.",
            "VernacExtend",
            "a0639fca32cedf1c1fb4b69a3723a20e65864119"
        ],
        [
            "destruct (p' y); destruct (p' x)...",
            "VernacExtend",
            "45165936eada0c687831aba87d114ddad5e25486"
        ],
        [
            "rewrite IHP1.",
            "VernacExtend",
            "81eb48fc49e054dd2eb540895edf465850341b68"
        ],
        [
            "rewrite <- H...",
            "VernacExtend",
            "7ab9cc9592538ff27b883cb1847c23639e95cf63"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma pointwise_eq_refl A B (x: A -> B): pointwise_relation A eq x x.",
            "VernacStartTheoremProof",
            "68aa291812939d7a4c72c389a184163c95606b6a"
        ],
        [
            "reflexivity.",
            "VernacExtend",
            "5cd1ae044f26cd6d89a5a5147c1d4fc5fc719d83"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Hint Immediate pointwise_eq_refl.",
            "VernacHints",
            "40625ac0b64964474fe56711478046fa23ffaeba"
        ],
        [
            "Instance count_perm_simple A (p: A -> bool): Proper (Permutation ==> eq) (count p).",
            "VernacInstance",
            "1dbc48b93f0cc0815d91bb50efaf15e8463dc039"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "apply count_perm.",
            "VernacExtend",
            "45ab1dc7f35fbe85b81e51983e8a3441a92ed7de"
        ],
        [
            "auto.",
            "VernacExtend",
            "1f09da0addd069b3b65326f8c71967acc1e985af"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Instance filter_eq_morphism T: Proper (pointwise_relation _ eq ==> eq ==> eq) (@filter T).",
            "VernacInstance",
            "be2a992ba1ec4666a0ad02e109e6cefbbd45ecee"
        ],
        [
            "Proof with auto.",
            "VernacProof",
            "a7e71b78b5628467da426641e148a0229b525f22"
        ],
        [
            "repeat intro.",
            "VernacExtend",
            "b1b5d9b3004bf4634299c208df98406e88278608"
        ],
        [
            "subst.",
            "VernacExtend",
            "ccc9cb848804101be22a0bb6c324861981c5c7f1"
        ],
        [
            "induction y0...",
            "VernacExtend",
            "f27a54a6b396d4eeba068305945bb5d0fcddfe3d"
        ],
        [
            "simpl.",
            "VernacExtend",
            "1b93169f4cf876d207c1fab22a2347202ab48d85"
        ],
        [
            "rewrite H.",
            "VernacExtend",
            "6192df8b89486a3ba89a78e26e0d70cae2dc94c2"
        ],
        [
            "rewrite IHy0...",
            "VernacExtend",
            "a0b530e2f1e2fb3593cf36c115784e91e1575fb6"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Instance filter_perm X: Proper (pointwise_relation _ eq ==> Permutation ==> Permutation) (@filter X).",
            "VernacInstance",
            "f3483a28505ca0e1dbbff21b66900303b6e4240e"
        ],
        [
            "Proof with auto.",
            "VernacProof",
            "a7e71b78b5628467da426641e148a0229b525f22"
        ],
        [
            "repeat intro.",
            "VernacExtend",
            "b1b5d9b3004bf4634299c208df98406e88278608"
        ],
        [
            "induction H0; rewrite H in *; simpl...",
            "VernacExtend",
            "76a92bb26a108fce308c7a2f1d06feb64c8c4e92"
        ],
        [
            "destruct (y x0)...",
            "VernacExtend",
            "816da77edf60823ddad9942cc27f3e59023164b4"
        ],
        [
            "destruct (y y0); destruct (y x0)...",
            "VernacExtend",
            "054254685cd82463107bd37391d569de30af1271"
        ],
        [
            "eauto.",
            "VernacExtend",
            "d5f3a05ca887c29bb0b422fc64ae2775fea3935e"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma complementary_filter_perm A (p: A -> bool) (l: list A): Permutation l (filter p l ++ filter (negb \u2218 p) l).",
            "VernacStartTheoremProof",
            "19e5da395fc6231cc458411031a70f7ebbce3f4c"
        ],
        [
            "Proof with auto.",
            "VernacProof",
            "a7e71b78b5628467da426641e148a0229b525f22"
        ],
        [
            "induction l...",
            "VernacExtend",
            "a4571710fc634c72b7b07ca630627ad571eee64e"
        ],
        [
            "simpl.",
            "VernacExtend",
            "1b93169f4cf876d207c1fab22a2347202ab48d85"
        ],
        [
            "unfold compose.",
            "VernacExtend",
            "d80e23bf133762584228beafbd8610d99d5d02d5"
        ],
        [
            "destruct (p a); simpl...",
            "VernacExtend",
            "0e7755256ac34bb5858e683f18bb95f65ca2b18d"
        ],
        [
            "apply Permutation_cons_app...",
            "VernacExtend",
            "2e89948fd02be7c33c6d5b522f54e9617e5cb7bf"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma filter_none X (p: X -> bool) (l: list X): (forall x, In x l -> p x = false) <-> filter p l = nil.",
            "VernacStartTheoremProof",
            "5ea22ba03bdd954e4e24f8716a5e903d965d7561"
        ],
        [
            "Proof with auto.",
            "VernacProof",
            "a7e71b78b5628467da426641e148a0229b525f22"
        ],
        [
            "induction l.",
            "VernacExtend",
            "1194af70832939708f8c7fde2f18f81c37b97a0c"
        ],
        [
            "split...",
            "VernacExtend",
            "baadab085aba401319b7eae3380d34307a7b74d2"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "inversion H0.",
            "VernacExtend",
            "38a13882efcff2ae2c6c07fc8055d56c6c1776f2"
        ],
        [
            "destruct IHl.",
            "VernacExtend",
            "5023d678c5ea5fdc921ea6734602a6fd328c8a06"
        ],
        [
            "split; simpl; intros.",
            "VernacExtend",
            "5cad19818f83524f7335adfda0a051ad1cf2a115"
        ],
        [
            "rewrite H1...",
            "VernacExtend",
            "ea2378a230b97c3935b9ba0f0107ca3d47b65218"
        ],
        [
            "destruct H2.",
            "VernacExtend",
            "7d33163a064bad536ec0f601f214b86de6ac5ab6"
        ],
        [
            "subst.",
            "VernacExtend",
            "ccc9cb848804101be22a0bb6c324861981c5c7f1"
        ],
        [
            "destruct (p x)...",
            "VernacExtend",
            "5c2ccd72fcb5b2f453e8c0f7b178f8b259e1d522"
        ],
        [
            "discriminate.",
            "VernacExtend",
            "66ca81b65e1a53372a2515fdfdd2a6b0677cb9c8"
        ],
        [
            "apply H0...",
            "VernacExtend",
            "8e32eae512d8ca08babd65a2984df82f5a26a9ad"
        ],
        [
            "destruct (p a)...",
            "VernacExtend",
            "3dfdde9bdd56b69f3d9c1021932ed61296e8639b"
        ],
        [
            "discriminate.",
            "VernacExtend",
            "66ca81b65e1a53372a2515fdfdd2a6b0677cb9c8"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma incl_map X Y (f: X -> Y) (a b: list X): incl a b -> incl (map f a) (map f b).",
            "VernacStartTheoremProof",
            "ba011b6d4065ffb7b6e53bdcdb5630a959602b04"
        ],
        [
            "Proof with auto.",
            "VernacProof",
            "a7e71b78b5628467da426641e148a0229b525f22"
        ],
        [
            "do 3 intro.",
            "VernacExtend",
            "177de6f66fcc47b0b56e5a6eca140fd577ebdd59"
        ],
        [
            "destruct (In_map_inv H0).",
            "VernacExtend",
            "592ee122a76c82d2b05ac63ff5938add155ae657"
        ],
        [
            "destruct H1.",
            "VernacExtend",
            "e752c2122f55c888e09082f784a6da990b01fbe7"
        ],
        [
            "subst...",
            "VernacExtend",
            "b907a93c53d5c34384373e3aac13eba90f0a4fdc"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma incl_in T (a b: list T): incl a b -> forall x, In x a -> In x b.",
            "VernacStartTheoremProof",
            "b3a9cae55f486fab504db7fcc1517288258e7e58"
        ],
        [
            "auto.",
            "VernacExtend",
            "1f09da0addd069b3b65326f8c71967acc1e985af"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma incl_In X (x: X) (l: list X): In x l -> forall l', incl l l' -> In x l'.",
            "VernacStartTheoremProof",
            "61eb1f5effdc63ecc12bbfd2e8539a30acd8497d"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "apply H0.",
            "VernacExtend",
            "c75b3371fc84f2aae811de7e80b1bdb43e4d249a"
        ],
        [
            "assumption.",
            "VernacExtend",
            "41f0308313ff87e6ab2782f90d6021ec4b55d932"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma NoDup_filter T (p: T -> bool) (l: list T): NoDup l -> NoDup (filter p l).",
            "VernacStartTheoremProof",
            "ba8cba3cec3ef94e7eaae34992f374683cecb936"
        ],
        [
            "Proof with auto.",
            "VernacProof",
            "a7e71b78b5628467da426641e148a0229b525f22"
        ],
        [
            "induction l...",
            "VernacExtend",
            "a4571710fc634c72b7b07ca630627ad571eee64e"
        ],
        [
            "simpl.",
            "VernacExtend",
            "1b93169f4cf876d207c1fab22a2347202ab48d85"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "inversion_clear H.",
            "VernacExtend",
            "90909d92eb32e95a21a5b90b29a49dc97bcea342"
        ],
        [
            "destruct (p a)...",
            "VernacExtend",
            "3dfdde9bdd56b69f3d9c1021932ed61296e8639b"
        ],
        [
            "apply NoDup_cons...",
            "VernacExtend",
            "5dfb9d6d83312c0b725609b85ad369f28ad76b87"
        ],
        [
            "intro.",
            "VernacExtend",
            "3999be354c758ba0d1866e0fcc78a7288779a224"
        ],
        [
            "apply H0...",
            "VernacExtend",
            "8e32eae512d8ca08babd65a2984df82f5a26a9ad"
        ],
        [
            "apply (incl_filter p l)...",
            "VernacExtend",
            "7611f41586d77f68a8fb184cd1b46a1f7a30f0b6"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma length_excl_counts X (p: X -> bool) (l: list X): length l = count p l + count (negb \u2218 p) l.",
            "VernacStartTheoremProof",
            "86cecdbd7b5cd1397208c41230f2fa1859f0dfc2"
        ],
        [
            "Proof with auto.",
            "VernacProof",
            "a7e71b78b5628467da426641e148a0229b525f22"
        ],
        [
            "unfold compose.",
            "VernacExtend",
            "d80e23bf133762584228beafbd8610d99d5d02d5"
        ],
        [
            "induction l...",
            "VernacExtend",
            "a4571710fc634c72b7b07ca630627ad571eee64e"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "simpl.",
            "VernacExtend",
            "1b93169f4cf876d207c1fab22a2347202ab48d85"
        ],
        [
            "rewrite IHl.",
            "VernacExtend",
            "d4d0cebbb161cf1462b69fd1ed2d76db253a98c6"
        ],
        [
            "destruct (p a); simpl...",
            "VernacExtend",
            "0e7755256ac34bb5858e683f18bb95f65ca2b18d"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma count_filtered X (p q: X -> bool): (forall x, q x = true -> p x = false) -> forall l, count p (filter q l) = 0.",
            "VernacStartTheoremProof",
            "5e59e52b8fb548addf1de9fac396c7806fdb87e5"
        ],
        [
            "Proof with auto.",
            "VernacProof",
            "a7e71b78b5628467da426641e148a0229b525f22"
        ],
        [
            "induction l...",
            "VernacExtend",
            "a4571710fc634c72b7b07ca630627ad571eee64e"
        ],
        [
            "simpl.",
            "VernacExtend",
            "1b93169f4cf876d207c1fab22a2347202ab48d85"
        ],
        [
            "cset (H a).",
            "VernacExtend",
            "781f17c468bc3e1a1a16efe2c0a40f195bcc81e7"
        ],
        [
            "destruct (q a)...",
            "VernacExtend",
            "7057db8833a48ec715c130db35bf23369415a6f0"
        ],
        [
            "simpl.",
            "VernacExtend",
            "1b93169f4cf876d207c1fab22a2347202ab48d85"
        ],
        [
            "rewrite H0...",
            "VernacExtend",
            "50fce2eb274e9c787791aa79cecdd73ad9f1e643"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma app_nil_r T (l: list T): l ++ nil = l.",
            "VernacStartTheoremProof",
            "d8df74545246d40cad5d2cd6c4147ecaa1c0aeae"
        ],
        [
            "Proof with auto.",
            "VernacProof",
            "a7e71b78b5628467da426641e148a0229b525f22"
        ],
        [
            "induction l...",
            "VernacExtend",
            "a4571710fc634c72b7b07ca630627ad571eee64e"
        ],
        [
            "simpl.",
            "VernacExtend",
            "1b93169f4cf876d207c1fab22a2347202ab48d85"
        ],
        [
            "rewrite IHl...",
            "VernacExtend",
            "a48c59a0d042c7310da6766246ef180a091c8386"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Hint Resolve Permutation_map.",
            "VernacHints",
            "22fa6708d9b4a6abdeccfc58aa33cd75908c8314"
        ],
        [
            "Lemma map_cons T U (f: T -> U) (h: T) (l: list T): map f (h :: l) = f h :: map f l.",
            "VernacStartTheoremProof",
            "7a8ceca06a244357e4e24b9f4eaea1f94817b821"
        ],
        [
            "auto.",
            "VernacExtend",
            "1f09da0addd069b3b65326f8c71967acc1e985af"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Definition concat {T}: list (list T) -> list T := fold_right (@app _) nil.",
            "VernacDefinition",
            "c6651afc947eb6582482baa946a9c9927fcd3da3"
        ],
        [
            "Lemma concat_app T (x y: list (list T)): concat (x ++ y) = concat x ++ concat y.",
            "VernacStartTheoremProof",
            "61d457a2e16e802f61c4ca03e3450d7f473f6ee1"
        ],
        [
            "Proof with auto.",
            "VernacProof",
            "a7e71b78b5628467da426641e148a0229b525f22"
        ],
        [
            "induction x...",
            "VernacExtend",
            "32a9acd062d9403b496a2f40e432d3e2b104f8c0"
        ],
        [
            "simpl.",
            "VernacExtend",
            "1b93169f4cf876d207c1fab22a2347202ab48d85"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "rewrite IHx.",
            "VernacExtend",
            "357385fc8aa6d86ac175f8be191ce152840328d1"
        ],
        [
            "rewrite app_ass...",
            "VernacExtend",
            "64f1783838442f0211762aaa7e3bbe4998bd479d"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma In_concat X (l: list (list X)) (s: list X) (x: X): In x s -> In s l -> In x (concat l).",
            "VernacStartTheoremProof",
            "6141817f220436d0ed87da89f055072ab80dda3b"
        ],
        [
            "Proof with auto.",
            "VernacProof",
            "a7e71b78b5628467da426641e148a0229b525f22"
        ],
        [
            "induction l...",
            "VernacExtend",
            "a4571710fc634c72b7b07ca630627ad571eee64e"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "simpl.",
            "VernacExtend",
            "1b93169f4cf876d207c1fab22a2347202ab48d85"
        ],
        [
            "apply in_or_app.",
            "VernacExtend",
            "5d96e3be59ed2c78adfe02ab12e779d3ca3f43c0"
        ],
        [
            "inversion_clear H0.",
            "VernacExtend",
            "e21f851b9423020c7f22dae666bca7829c9b1967"
        ],
        [
            "subst...",
            "VernacExtend",
            "b907a93c53d5c34384373e3aac13eba90f0a4fdc"
        ],
        [
            "right...",
            "VernacExtend",
            "812b278b3530fdc8b155b846f3e666d427661a31"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma In_concat_inv X (x: X) (l: list (list X)): In x (concat l) -> exists s, In x s /\\ In s l.",
            "VernacStartTheoremProof",
            "fef55a3701491f6d7116516732058e534b967f71"
        ],
        [
            "Proof with auto.",
            "VernacProof",
            "a7e71b78b5628467da426641e148a0229b525f22"
        ],
        [
            "induction l.",
            "VernacExtend",
            "1194af70832939708f8c7fde2f18f81c37b97a0c"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "elimtype False...",
            "VernacExtend",
            "a2889d4501f0ae3aea80adc3b5e37c1033b6a559"
        ],
        [
            "simpl.",
            "VernacExtend",
            "1b93169f4cf876d207c1fab22a2347202ab48d85"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "destruct (in_app_or _ _ _ H).",
            "VernacExtend",
            "75d2755eecfb9f5db79d027ea9b637cc14d12f58"
        ],
        [
            "exists a.",
            "VernacExtend",
            "59cc5697e7369be65591d2d5e6ad6fd701682809"
        ],
        [
            "split...",
            "VernacExtend",
            "baadab085aba401319b7eae3380d34307a7b74d2"
        ],
        [
            "destruct (IHl H0).",
            "VernacExtend",
            "f34b7e84454d5e9a92906416144e139e36e39166"
        ],
        [
            "destruct H1.",
            "VernacExtend",
            "e752c2122f55c888e09082f784a6da990b01fbe7"
        ],
        [
            "exists x0...",
            "VernacExtend",
            "7c80e35bc6cfa7d72d62cba82a68f549a704d474"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Definition eq_count X (d: forall (x y: X), { x = y } + { x <> y }) (x: X): list X -> nat := count (fun y => unsum_bool (d x y)).",
            "VernacDefinition",
            "93439fbd90c7e6dd9402cc31eb1ab435244f619e"
        ],
        [
            "Lemma eq_count_0 X (d: forall (x y: X), { x = y } + { x <> y }) (x: X) l: ~ In x l -> eq_count d x l = 0%nat.",
            "VernacStartTheoremProof",
            "8780e49b966d5e449f7579fc037a146e1e1e0661"
        ],
        [
            "Proof with auto.",
            "VernacProof",
            "a7e71b78b5628467da426641e148a0229b525f22"
        ],
        [
            "induction l...",
            "VernacExtend",
            "a4571710fc634c72b7b07ca630627ad571eee64e"
        ],
        [
            "simpl.",
            "VernacExtend",
            "1b93169f4cf876d207c1fab22a2347202ab48d85"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "destruct (d x a).",
            "VernacExtend",
            "f50a7ab5c282a787cf9e9c5d4dd36fdecbeb16c5"
        ],
        [
            "elimtype False.",
            "VernacExtend",
            "193053c8983316978aeded05598d605cc4f35bde"
        ],
        [
            "apply H.",
            "VernacExtend",
            "4b47b71ad0f800d57cbdc591d68949e07decb540"
        ],
        [
            "left...",
            "VernacExtend",
            "bf4fd72477fff45e0940a41f06078165174dbd25"
        ],
        [
            "simpl.",
            "VernacExtend",
            "1b93169f4cf876d207c1fab22a2347202ab48d85"
        ],
        [
            "apply IHl.",
            "VernacExtend",
            "af412c6009bba78f939aa53ab07dcd1baaf5888b"
        ],
        [
            "intro.",
            "VernacExtend",
            "3999be354c758ba0d1866e0fcc78a7288779a224"
        ],
        [
            "apply H.",
            "VernacExtend",
            "4b47b71ad0f800d57cbdc591d68949e07decb540"
        ],
        [
            "right...",
            "VernacExtend",
            "812b278b3530fdc8b155b846f3e666d427661a31"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma eq_count_NoDup X (d: forall (x y: X), { x = y } + { x <> y }) (x: X) l: NoDup l -> eq_count d x l <= 1.",
            "VernacStartTheoremProof",
            "c155bc41a86c58a4cf56bf5efb83a27c40b1f646"
        ],
        [
            "Proof with auto.",
            "VernacProof",
            "a7e71b78b5628467da426641e148a0229b525f22"
        ],
        [
            "induction l...",
            "VernacExtend",
            "a4571710fc634c72b7b07ca630627ad571eee64e"
        ],
        [
            "simpl.",
            "VernacExtend",
            "1b93169f4cf876d207c1fab22a2347202ab48d85"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "inversion_clear H...",
            "VernacExtend",
            "a23502606014528ad263a393402f8abc040cabee"
        ],
        [
            "destruct (d x a); simpl...",
            "VernacExtend",
            "4b17d5e4a09937519547e110625cc67259a3f74e"
        ],
        [
            "subst.",
            "VernacExtend",
            "ccc9cb848804101be22a0bb6c324861981c5c7f1"
        ],
        [
            "rewrite eq_count_0...",
            "VernacExtend",
            "570b96018d7b978158ae241ae8ec22e79ff3241f"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma NoDup_incl_Permutation A (a b: list A): length a = length b -> NoDup a -> incl a b -> Permutation a b.",
            "VernacStartTheoremProof",
            "18cfa36b574fab39943e3439a82c99bb68ce2328"
        ],
        [
            "Proof with auto.",
            "VernacProof",
            "a7e71b78b5628467da426641e148a0229b525f22"
        ],
        [
            "induction a in b |- *; intros.",
            "VernacExtend",
            "cb03527f258141dbca8ee524c6a3760ab43813f4"
        ],
        [
            "destruct b.",
            "VernacExtend",
            "8903a74740ba2d4b9b293ac81ed015a01a553cd0"
        ],
        [
            "apply perm_nil.",
            "VernacExtend",
            "7772adb8d0e920abd6a49bef78350be27e8bad2d"
        ],
        [
            "discriminate.",
            "VernacExtend",
            "66ca81b65e1a53372a2515fdfdd2a6b0677cb9c8"
        ],
        [
            "assert (In a b).",
            "VernacExtend",
            "20745263fc3aca4d412bbd25437dc7817f272330"
        ],
        [
            "apply H1.",
            "VernacExtend",
            "3fcc9345bbf6ea218ca825a16c0f27912de9bd67"
        ],
        [
            "left...",
            "VernacExtend",
            "bf4fd72477fff45e0940a41f06078165174dbd25"
        ],
        [
            "destruct (In_inv_perm a b H2).",
            "VernacExtend",
            "feead29d0e56edb530736c8c9710c7d548b0caa7"
        ],
        [
            "apply perm_trans with (a :: x)...",
            "VernacExtend",
            "fd1ab85244035ef6489c349d2e01729f69404b66"
        ],
        [
            "apply perm_skip.",
            "VernacExtend",
            "88d9c437306dbe4b5a3f0f8693d406682ecdb8a8"
        ],
        [
            "apply IHa.",
            "VernacExtend",
            "57aa637c4d3b614c8e71ca6232cffb417052a183"
        ],
        [
            "cset (Permutation_length H3).",
            "VernacExtend",
            "6e5799b9b0d7a89b0c1f49ee39bed5c851159234"
        ],
        [
            "rewrite <- H in H4.",
            "VernacExtend",
            "d57cc983fc56fc63ad9cba7828a1d39eadf9dbfa"
        ],
        [
            "inversion_clear H4...",
            "VernacExtend",
            "503ff251197bd47321d1bb2bbe6d6681ceb64f57"
        ],
        [
            "inversion_clear H0...",
            "VernacExtend",
            "b903ed9556822431d6a4482f1b3e8ca20896fdd5"
        ],
        [
            "cut (incl a0 (a :: x)).",
            "VernacExtend",
            "5cae73e1887f47452e8a97fec5b2be0404eccebe"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "intro.",
            "VernacExtend",
            "3999be354c758ba0d1866e0fcc78a7288779a224"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "cset (H4 a1 H5).",
            "VernacExtend",
            "2676e434cf49ca98b73601bf9694d40c69e88353"
        ],
        [
            "inversion_clear H6...",
            "VernacExtend",
            "bc5265f79b05bcba476485f56f02066f71c7f3bb"
        ],
        [
            "subst.",
            "VernacExtend",
            "ccc9cb848804101be22a0bb6c324861981c5c7f1"
        ],
        [
            "inversion_clear H0.",
            "VernacExtend",
            "e21f851b9423020c7f22dae666bca7829c9b1967"
        ],
        [
            "elimtype False...",
            "VernacExtend",
            "a2889d4501f0ae3aea80adc3b5e37c1033b6a559"
        ],
        [
            "apply incl_tran with b...",
            "VernacExtend",
            "d2f3dfedcff91967cf9221ef6b76bd7d888c651a"
        ],
        [
            "intro.",
            "VernacExtend",
            "3999be354c758ba0d1866e0fcc78a7288779a224"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "apply H1.",
            "VernacExtend",
            "3fcc9345bbf6ea218ca825a16c0f27912de9bd67"
        ],
        [
            "right...",
            "VernacExtend",
            "812b278b3530fdc8b155b846f3e666d427661a31"
        ],
        [
            "apply Permutation_incl.",
            "VernacExtend",
            "fdbefc246423a0fc3e17650346e6658683f50cc3"
        ],
        [
            "apply Permutation_sym...",
            "VernacExtend",
            "7c50c6761126e32a367d1c02e96f3551d4605a21"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma NoDup_map' A B (f: A -> B) (l: list A): (forall x y: A, In x l -> In y l -> x <> y -> f x <> f y) -> NoDup l -> NoDup (map f l).",
            "VernacStartTheoremProof",
            "7a8cdcde0e5fde837023c5fcec86ea8a771015c7"
        ],
        [
            "Proof with auto.",
            "VernacProof",
            "a7e71b78b5628467da426641e148a0229b525f22"
        ],
        [
            "induction l; simpl...",
            "VernacExtend",
            "2b807d50e545b339f4a1eacc1448c456412a54df"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "inversion_clear H0.",
            "VernacExtend",
            "e21f851b9423020c7f22dae666bca7829c9b1967"
        ],
        [
            "apply NoDup_cons...",
            "VernacExtend",
            "5dfb9d6d83312c0b725609b85ad369f28ad76b87"
        ],
        [
            "intro.",
            "VernacExtend",
            "3999be354c758ba0d1866e0fcc78a7288779a224"
        ],
        [
            "destruct (In_map_inv H0).",
            "VernacExtend",
            "592ee122a76c82d2b05ac63ff5938add155ae657"
        ],
        [
            "destruct H3.",
            "VernacExtend",
            "1c0230aafd4a4c88f93d392a681d452fd6dea35e"
        ],
        [
            "apply (H x a)...",
            "VernacExtend",
            "bd8225e4db669f8201668d8b501391881fdec630"
        ],
        [
            "intro.",
            "VernacExtend",
            "3999be354c758ba0d1866e0fcc78a7288779a224"
        ],
        [
            "subst...",
            "VernacExtend",
            "b907a93c53d5c34384373e3aac13eba90f0a4fdc"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma NoDup_map A B (f: A -> B) l: (forall x y, In x l -> In y l -> f x = f y -> x = y) -> NoDup l -> NoDup (map f l).",
            "VernacStartTheoremProof",
            "87f47c97a9b1729fcc1992a14a02e0b16a24fda7"
        ],
        [
            "Proof with simpl; auto.",
            "VernacProof",
            "d8d52916adcdcab3f3e1356033a8e1159c139ea9"
        ],
        [
            "induction l...",
            "VernacExtend",
            "a4571710fc634c72b7b07ca630627ad571eee64e"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "simpl.",
            "VernacExtend",
            "1b93169f4cf876d207c1fab22a2347202ab48d85"
        ],
        [
            "inversion_clear H0.",
            "VernacExtend",
            "e21f851b9423020c7f22dae666bca7829c9b1967"
        ],
        [
            "apply NoDup_cons...",
            "VernacExtend",
            "5dfb9d6d83312c0b725609b85ad369f28ad76b87"
        ],
        [
            "intro.",
            "VernacExtend",
            "3999be354c758ba0d1866e0fcc78a7288779a224"
        ],
        [
            "apply H1.",
            "VernacExtend",
            "3fcc9345bbf6ea218ca825a16c0f27912de9bd67"
        ],
        [
            "destruct (In_map_inv H0).",
            "VernacExtend",
            "592ee122a76c82d2b05ac63ff5938add155ae657"
        ],
        [
            "destruct H3.",
            "VernacExtend",
            "1c0230aafd4a4c88f93d392a681d452fd6dea35e"
        ],
        [
            "rewrite (H a x)...",
            "VernacExtend",
            "ee7ff0974dba862c75870a2cf84d7dbe35eef3f8"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Inductive InP (X: Type) (P: X -> Prop): list X -> Prop := | InP_head x t: P x -> InP P (x :: t) | InP_tail x t: InP P t -> InP P (x :: t).",
            "VernacInductive",
            "7cb680d67ceba843465ee84d00d50a01f03454ef"
        ],
        [
            "Inductive NoDupL (A: Type): list (list A) -> Prop := | NoDupL_nil: NoDupL nil | NoDupL_cons (l: list A) (ll: list (list A)): NoDup l -> (forall x, In x l -> ~ InP (In x) ll) -> NoDupL ll -> NoDupL (l :: ll).",
            "VernacInductive",
            "ad811cfe68a33b33495c74922a838cea7b599f77"
        ],
        [
            "Hint Constructors NoDupL.",
            "VernacHints",
            "d29292927d979eccac2f239be21d57ed47dde280"
        ],
        [
            "Lemma InP_In (X: Type) (l: list X) (ll: list (list X)): In l ll -> forall x, In x l -> InP (In x) ll.",
            "VernacStartTheoremProof",
            "17dbb0ceb6b5c49684daaffc2014aff5dfb37257"
        ],
        [
            "Proof with auto.",
            "VernacProof",
            "a7e71b78b5628467da426641e148a0229b525f22"
        ],
        [
            "induction ll.",
            "VernacExtend",
            "aa1a9ee9d53cf183a5d97e1fc780f507a4cf6df1"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "inversion H.",
            "VernacExtend",
            "ee20838bdd77512b43142d655a3924bf07bffebb"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "inversion_clear H; [left | right]...",
            "VernacExtend",
            "4424bb69bebbe0ebe0881d515329b0edc1c4c671"
        ],
        [
            "subst...",
            "VernacExtend",
            "b907a93c53d5c34384373e3aac13eba90f0a4fdc"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma InP_In_inv X (x: X) (ll: list (list X)): InP (In x) ll -> exists l, In x l /\\ In l ll.",
            "VernacStartTheoremProof",
            "93455e16b41c0a7074925b9824720d665970d1b4"
        ],
        [
            "Proof with auto.",
            "VernacProof",
            "a7e71b78b5628467da426641e148a0229b525f22"
        ],
        [
            "intros H.",
            "VernacExtend",
            "5cfae87a34fa7b59a257c9640f1b674f6e6d780b"
        ],
        [
            "induction H.",
            "VernacExtend",
            "f8e74d6b42ecd6b509e6a20cee53bb69d051cd07"
        ],
        [
            "exists x0.",
            "VernacExtend",
            "9cf0657053433e90b28a795544f893f4a0f1ace3"
        ],
        [
            "split...",
            "VernacExtend",
            "baadab085aba401319b7eae3380d34307a7b74d2"
        ],
        [
            "left...",
            "VernacExtend",
            "bf4fd72477fff45e0940a41f06078165174dbd25"
        ],
        [
            "destruct IHInP.",
            "VernacExtend",
            "a93afc9c7b4d16022f94f1fdd6f9a40928486ff5"
        ],
        [
            "destruct H0.",
            "VernacExtend",
            "5c8f6cb3dc303d56935d6ec271a1de04f6790225"
        ],
        [
            "exists x1.",
            "VernacExtend",
            "41149f92e5f2a0109418d3e02971541f67fbd3df"
        ],
        [
            "split...",
            "VernacExtend",
            "baadab085aba401319b7eae3380d34307a7b74d2"
        ],
        [
            "right...",
            "VernacExtend",
            "812b278b3530fdc8b155b846f3e666d427661a31"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Arguments InP_In_inv [X x ll].",
            "VernacArguments",
            "a36c69b133a5cc830d43d1ea9ed723bb61723851"
        ],
        [
            "Lemma NoDup_concat A (l: list (list A)): NoDupL l -> NoDup (concat l).",
            "VernacStartTheoremProof",
            "98d510df9bc94f6d619f641bf3c9e553c902f465"
        ],
        [
            "Proof with auto.",
            "VernacProof",
            "a7e71b78b5628467da426641e148a0229b525f22"
        ],
        [
            "induction l; simpl; intros.",
            "VernacExtend",
            "34e9ea5965da389dfe8faf53c8ea4965d4fdcc22"
        ],
        [
            "apply NoDup_nil.",
            "VernacExtend",
            "67313a1ac898e25e0b147e35dceb4ec1f7ac73d2"
        ],
        [
            "inversion_clear H.",
            "VernacExtend",
            "90909d92eb32e95a21a5b90b29a49dc97bcea342"
        ],
        [
            "induction a...",
            "VernacExtend",
            "e014d437fd88f40c956ccde75b90bdbd42a3278f"
        ],
        [
            "inversion_clear H0.",
            "VernacExtend",
            "e21f851b9423020c7f22dae666bca7829c9b1967"
        ],
        [
            "simpl.",
            "VernacExtend",
            "1b93169f4cf876d207c1fab22a2347202ab48d85"
        ],
        [
            "apply NoDup_cons...",
            "VernacExtend",
            "5dfb9d6d83312c0b725609b85ad369f28ad76b87"
        ],
        [
            "intro.",
            "VernacExtend",
            "3999be354c758ba0d1866e0fcc78a7288779a224"
        ],
        [
            "destruct (in_app_or _ _ _ H0)...",
            "VernacExtend",
            "35d55d6b55fd5b1950414b450b1b936b9a9bb9c2"
        ],
        [
            "apply (H1 a).",
            "VernacExtend",
            "ded5d1f1219eb04ca596f05cb4812cad29184421"
        ],
        [
            "left...",
            "VernacExtend",
            "bf4fd72477fff45e0940a41f06078165174dbd25"
        ],
        [
            "destruct (In_concat_inv _ _ H4).",
            "VernacExtend",
            "9e5d7a19ae32deb1c7f27ae3ef40577d7bfb7590"
        ],
        [
            "destruct H5.",
            "VernacExtend",
            "ed9c2c1b0fd20c14ad03acc37362cc2c315199ed"
        ],
        [
            "apply InP_In with x...",
            "VernacExtend",
            "e0b649a4ffcedf02f5aebbf55c190b656920340a"
        ],
        [
            "apply IHa...",
            "VernacExtend",
            "8d1b7eb7770af5d294a088661ad492c17a3b0fe4"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "apply H1.",
            "VernacExtend",
            "3fcc9345bbf6ea218ca825a16c0f27912de9bd67"
        ],
        [
            "right...",
            "VernacExtend",
            "812b278b3530fdc8b155b846f3e666d427661a31"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma In_filter_inv A (f: A -> bool) (x: A) (l: list A): In x (filter f l) -> In x l /\\ f x = true.",
            "VernacStartTheoremProof",
            "8985e1cb48764e11be61f09de01cef53b6635f5d"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "destruct (filter_In f x l).",
            "VernacExtend",
            "9a2528183bdad164a5af1c9914f150a8860014b9"
        ],
        [
            "apply H0.",
            "VernacExtend",
            "c75b3371fc84f2aae811de7e80b1bdb43e4d249a"
        ],
        [
            "assumption.",
            "VernacExtend",
            "41f0308313ff87e6ab2782f90d6021ec4b55d932"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Section Partitioning.",
            "VernacBeginSection",
            "51dda04dd7614274a9327e64d0d3121e75abdd60"
        ],
        [
            "Variable T: Set.",
            "VernacAssumption",
            "b25e1c55d6e167f9b32c3ec950afc0dd2590ed80"
        ],
        [
            "Definition Partitioning: Set := comparison -> list T.",
            "VernacDefinition",
            "f520b64caad1f185b3160950ab8fbed2dda34529"
        ],
        [
            "Lemma partition_oblig c l h (H: {p: Partitioning | Permutation (p Eq ++ p Lt ++ p Gt) l}): Permutation ((if cmp_cmp c Eq then h :: proj1_sig H Eq else proj1_sig H Eq) ++ (if cmp_cmp c Lt then h :: proj1_sig H Lt else proj1_sig H Lt) ++ (if cmp_cmp c Gt then h :: proj1_sig H Gt else proj1_sig H Gt)) (h :: l).",
            "VernacStartTheoremProof",
            "63e2874b461350d6d07dcd8054329a813c3e0c18"
        ],
        [
            "Proof with auto.",
            "VernacProof",
            "a7e71b78b5628467da426641e148a0229b525f22"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "destruct H.",
            "VernacExtend",
            "8b2bca015429da94c456243b461e17a2a0582c40"
        ],
        [
            "simpl.",
            "VernacExtend",
            "1b93169f4cf876d207c1fab22a2347202ab48d85"
        ],
        [
            "apply Permutation_sym.",
            "VernacExtend",
            "94262274c360805dd9834746f95363628f0dc4c6"
        ],
        [
            "cset (Permutation_sym p).",
            "VernacExtend",
            "f8af85790e30b21eb72bdde982d47e188674861f"
        ],
        [
            "destruct c; simpl.",
            "VernacExtend",
            "9352e387485a1b44ae1b93056320e9857043ab3b"
        ],
        [
            "apply perm_skip...",
            "VernacExtend",
            "ef02987ef032fab8e86a662e86c95e11ad383ea9"
        ],
        [
            "apply Permutation_cons_app...",
            "VernacExtend",
            "2e89948fd02be7c33c6d5b522f54e9617e5cb7bf"
        ],
        [
            "rewrite <- app_ass in *.",
            "VernacExtend",
            "743dd7b570d1096d537514965bea9711bc41b343"
        ],
        [
            "apply Permutation_cons_app...",
            "VernacExtend",
            "2e89948fd02be7c33c6d5b522f54e9617e5cb7bf"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Definition addToPartitioning (c: comparison) (l: list T) (h: T) (H: {p: Partitioning | Permutation (p Eq ++ p Lt ++ p Gt) l}): {p: Partitioning | Permutation (p Eq ++ p Lt ++ p Gt) (h :: l)} := exist (fun p => Permutation (p Eq ++ p Lt ++ p Gt) (h :: l)) (fun c' => if cmp_cmp c c' then h :: proj1_sig H c' else proj1_sig H c') (partition_oblig c h H).",
            "VernacDefinition",
            "be94992ec2bdc4b0b06201bc546069889cdfb45d"
        ],
        [
            "Definition emp: {p: Partitioning | Permutation (p Eq ++ p Lt ++ p Gt) nil} := exist (fun p => Permutation (p Eq ++ p Lt ++ p Gt) nil) (fun _ => nil) (perm_nil T).",
            "VernacDefinition",
            "455546daa1bfaed71a74ec5ec7a83dd397aef83b"
        ],
        [
            "End Partitioning.",
            "VernacEndSegment",
            "39478e2516b155081dce241562158d39263bef29"
        ],
        [
            "Fixpoint repeat T (n: nat) (x: T): list T := match n with | 0 => nil | S n' => x :: repeat n' x end.",
            "VernacFixpoint",
            "2dcd968fd291dda4c52ee3b5cfca635eaed5d4c3"
        ],
        [
            "Lemma map_concat T U (l: list (list T)) (f: T -> U): map f (concat l) = concat (map (map f) l).",
            "VernacStartTheoremProof",
            "2408106cc5bce17e0950691237c085ae96429cbb"
        ],
        [
            "Proof with auto.",
            "VernacProof",
            "a7e71b78b5628467da426641e148a0229b525f22"
        ],
        [
            "induction l...",
            "VernacExtend",
            "a4571710fc634c72b7b07ca630627ad571eee64e"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "simpl.",
            "VernacExtend",
            "1b93169f4cf876d207c1fab22a2347202ab48d85"
        ],
        [
            "rewrite map_app.",
            "VernacExtend",
            "89eca143edf6436bb079a40b9fedf852073d1711"
        ],
        [
            "congruence.",
            "VernacExtend",
            "d8c818f6cffeaee6a722a71acc77f2d6e5199eb9"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma length_0_nil A (l: list A): length l = 0%nat <-> l = nil.",
            "VernacStartTheoremProof",
            "d4873a70376b99f7a00148fd6b96e56d6cf74f4e"
        ],
        [
            "Proof with auto.",
            "VernacProof",
            "a7e71b78b5628467da426641e148a0229b525f22"
        ],
        [
            "intuition.",
            "VernacExtend",
            "ebd9388eeb482972743f9cce5cbddbd85ca5bdfd"
        ],
        [
            "destruct l...",
            "VernacExtend",
            "963fc99ea720efd97229633d63f4328017299f89"
        ],
        [
            "discriminate.",
            "VernacExtend",
            "66ca81b65e1a53372a2515fdfdd2a6b0677cb9c8"
        ],
        [
            "subst...",
            "VernacExtend",
            "b907a93c53d5c34384373e3aac13eba90f0a4fdc"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma length_ne_0_ne_nil A (l: list A): length l <> 0%nat -> l <> nil.",
            "VernacStartTheoremProof",
            "f03ada8a674215239e6e6e52bc75ee160c34635c"
        ],
        [
            "destruct l.",
            "VernacExtend",
            "a4218804e377a0d685aafec59adbc3652d543b9c"
        ],
        [
            "auto.",
            "VernacExtend",
            "1f09da0addd069b3b65326f8c71967acc1e985af"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "discriminate.",
            "VernacExtend",
            "66ca81b65e1a53372a2515fdfdd2a6b0677cb9c8"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Inductive elemsR A B (R: A -> B -> Prop): list A -> list B -> Prop := | eR_nil: elemsR R nil nil | eR_cons (a: A) (b: B): R a b -> forall l l', elemsR R l l' -> elemsR R (a :: l) (b :: l').",
            "VernacInductive",
            "795d9aa09d25154dc8d2091c58c09dff80b9ab47"
        ],
        [
            "Hint Constructors elemsR.",
            "VernacHints",
            "8305a02f1b5258cf264952c1ca0aa5fc24f8b394"
        ],
        [
            "Instance elemsR_trans A `{R: relation A} {TR: Transitive R}: Transitive (elemsR R).",
            "VernacInstance",
            "ea6a87e5567982c27bfd850ebcd8e7d27687dae6"
        ],
        [
            "Proof with auto.",
            "VernacProof",
            "a7e71b78b5628467da426641e148a0229b525f22"
        ],
        [
            "intro.",
            "VernacExtend",
            "3999be354c758ba0d1866e0fcc78a7288779a224"
        ],
        [
            "induction x.",
            "VernacExtend",
            "8d91f99bf5ea35862c5721d2308df13dc2f7aeed"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "destruct y...",
            "VernacExtend",
            "a24117de001822d35b8bd0a9b5e60655521e9549"
        ],
        [
            "inversion H.",
            "VernacExtend",
            "ee20838bdd77512b43142d655a3924bf07bffebb"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "destruct y.",
            "VernacExtend",
            "fbeb4c3b73b2f0e6bfc89563d7f3b824ea0ea309"
        ],
        [
            "inversion H.",
            "VernacExtend",
            "ee20838bdd77512b43142d655a3924bf07bffebb"
        ],
        [
            "destruct z.",
            "VernacExtend",
            "7ad6537de6adc4973a413756c31bffcd5e25902c"
        ],
        [
            "inversion H0.",
            "VernacExtend",
            "38a13882efcff2ae2c6c07fc8055d56c6c1776f2"
        ],
        [
            "inversion_clear H.",
            "VernacExtend",
            "90909d92eb32e95a21a5b90b29a49dc97bcea342"
        ],
        [
            "inversion_clear H0.",
            "VernacExtend",
            "e21f851b9423020c7f22dae666bca7829c9b1967"
        ],
        [
            "apply eR_cons...",
            "VernacExtend",
            "27256b93a2a6d0e0d24f28fa88ccb1b5fdc9a801"
        ],
        [
            "transitivity a0...",
            "VernacExtend",
            "c1092850785655d728acf48bc48fb88279327a20"
        ],
        [
            "apply IHx with y...",
            "VernacExtend",
            "fbfe84d49f2881b133741b63ba05a26809965e01"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma elemsR_le_S a b: elemsR le a b -> elemsR le (map S a) (map S b).",
            "VernacStartTheoremProof",
            "e2854dad3bab5fc87a74e414f1d60eb01f9298b0"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "induction H; simpl; auto with arith.",
            "VernacExtend",
            "8d04b9d1aad97df1c901e879efd9579955b75c70"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma elemsR_map A (R: relation A) f l: (forall x, In x l -> R (f x) x) -> elemsR R (map f l) l.",
            "VernacStartTheoremProof",
            "ab70a6c052a3179631d959442ad1be3f6bbfeb44"
        ],
        [
            "induction l; simpl; intuition.",
            "VernacExtend",
            "47d610d97b48f19ded5222f607b02b95ae68d2a2"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma elemsR_map_map (X Y: Type) (f g: Y -> X) (l: list Y) (R: relation X): (forall x, In x l -> R (f x) (g x)) -> elemsR R (map f l) (map g l).",
            "VernacStartTheoremProof",
            "6a3c57c6047c47976cc518535bd44a8e55f058ff"
        ],
        [
            "Proof with auto.",
            "VernacProof",
            "a7e71b78b5628467da426641e148a0229b525f22"
        ],
        [
            "induction l.",
            "VernacExtend",
            "1194af70832939708f8c7fde2f18f81c37b97a0c"
        ],
        [
            "simpl...",
            "VernacExtend",
            "504f71dca671c3e66b68ade966c1b4804373be90"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "apply eR_cons; intuition.",
            "VernacExtend",
            "764afc50daceb23cacab35ed7db3798e09281dc4"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma elemsR_impl A (R R' : relation A): (forall x y: A, R x y -> R' x y) -> forall l l', elemsR R l l' -> elemsR R' l l'.",
            "VernacStartTheoremProof",
            "8e976f89d6c22638858228704cc4aca758764ca8"
        ],
        [
            "induction l; intros; inversion_clear H0; auto.",
            "VernacExtend",
            "2dbe61ebf4f9a0e0293a11e172e3528cc004a6e5"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Section Permuted.",
            "VernacBeginSection",
            "df827d5c4b36773e6721f5c5b6f107126a38a86f"
        ],
        [
            "Context {A: Type} (R: relation A).",
            "VernacContext",
            "205a9dfe732b7e2563d276ce609bf5a23b1aac15"
        ],
        [
            "Inductive Permuted: relation (list A) := | permuted_nil : Permuted nil nil | permuted_skip : forall (x x': A), R x x' -> forall (l l' : list A), Permuted l l' -> Permuted (x :: l) (x' :: l') | permuted_swap : forall (x y: A) (l: list A), Permuted (y :: x :: l) (x :: y :: l) | permuted_trans : forall l l' l'' : list A, Permuted l l' -> Permuted l' l'' -> Permuted l l''.",
            "VernacInductive",
            "0913e25716b0e9aa2cce7d874dca204aa5a37c79"
        ],
        [
            "Hint Constructors Permuted.",
            "VernacHints",
            "4c8825ed6eaa876a5d71f11ea83e3d43c7b34a79"
        ],
        [
            "Context {Rrefl: Reflexive R}.",
            "VernacContext",
            "097d375f1a44faf16d5d05cba95b4bc582f534aa"
        ],
        [
            "Lemma permuted_refl l: Permuted l l.",
            "VernacStartTheoremProof",
            "816ac95206d9be0995e35b196092df99fa0e57d5"
        ],
        [
            "induction l; auto.",
            "VernacExtend",
            "6df74a097ee826dbbeb45167e7678377d4e52265"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Hint Immediate permuted_refl.",
            "VernacHints",
            "f0d0943859919d34cbb27794ebab84eeff56e8d8"
        ],
        [
            "Lemma elemsR_permuted l l': elemsR R l l' -> Permuted l l'.",
            "VernacStartTheoremProof",
            "a4e99294192f2933ac32ab5de9738b28a279dcd1"
        ],
        [
            "induction l in l' |- *; intros; inversion_clear H; auto.",
            "VernacExtend",
            "b8ce2ea80bc9fc4bd6a1b3b5a2471f897156bfab"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma alt_permuted_swap (x x' y y': A): R x x' -> R y y' -> forall (l l': list A), elemsR R l l' -> Permuted (y :: x :: l) (x' :: y' :: l').",
            "VernacStartTheoremProof",
            "8cab64b2f2cf5923a7be31404f830df2e4d88f06"
        ],
        [
            "Proof with auto.",
            "VernacProof",
            "a7e71b78b5628467da426641e148a0229b525f22"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "apply permuted_trans with (y' :: x' :: l)...",
            "VernacExtend",
            "80846f2c2a601e36214929f15812268811cff6e4"
        ],
        [
            "apply permuted_trans with (y' :: x' :: l')...",
            "VernacExtend",
            "46b6a4389c67a6568a2b9a80073ee603372dde3d"
        ],
        [
            "apply permuted_skip...",
            "VernacExtend",
            "af07db04dd9e036ebed24633446558b85bc7fa91"
        ],
        [
            "apply permuted_skip...",
            "VernacExtend",
            "af07db04dd9e036ebed24633446558b85bc7fa91"
        ],
        [
            "apply elemsR_permuted...",
            "VernacExtend",
            "79c03d8d11cd1d4ccced8c6101775d9b78a4798c"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "End Permuted.",
            "VernacEndSegment",
            "c093864b009ad43b02275796245d44895152a3e9"
        ],
        [
            "Hint Constructors Permuted.",
            "VernacHints",
            "4c8825ed6eaa876a5d71f11ea83e3d43c7b34a79"
        ],
        [
            "Lemma map_map_comp A B C (f: A -> B) (g: B -> C) (l: list A): map g (map f l) = map (g \u2218 f) l.",
            "VernacStartTheoremProof",
            "487eb4bce183aadeabe94361553d662c20b71f3f"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "rewrite map_map.",
            "VernacExtend",
            "ae8e13105f5289f0c1e44cbfa83eff3c6f47acee"
        ],
        [
            "reflexivity.",
            "VernacExtend",
            "5cd1ae044f26cd6d89a5a5147c1d4fc5fc719d83"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma concat_map_singleton A (l: list A): concat (map (fun x => x :: nil) l) = l.",
            "VernacStartTheoremProof",
            "5f090936eebbc42ad0d4138407e2c3f2fb687d85"
        ],
        [
            "induction l.",
            "VernacExtend",
            "1194af70832939708f8c7fde2f18f81c37b97a0c"
        ],
        [
            "intuition.",
            "VernacExtend",
            "ebd9388eeb482972743f9cce5cbddbd85ca5bdfd"
        ],
        [
            "simpl.",
            "VernacExtend",
            "1b93169f4cf876d207c1fab22a2347202ab48d85"
        ],
        [
            "congruence.",
            "VernacExtend",
            "d8c818f6cffeaee6a722a71acc77f2d6e5199eb9"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma Permuted_sub A (R: relation A) x y: Permuted R x y -> forall (R': relation A), (forall x y, R x y -> R' x y) -> Permuted R' x y.",
            "VernacStartTheoremProof",
            "e1746c8c648e1b3aec36438c6bdc115359f3375a"
        ],
        [
            "Proof with auto.",
            "VernacProof",
            "a7e71b78b5628467da426641e148a0229b525f22"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "induction H...",
            "VernacExtend",
            "9d0908bd383114f831825f49a508b957b979db71"
        ],
        [
            "apply permuted_trans with l'...",
            "VernacExtend",
            "5f907909b580cb219654e625c15de480a6992406"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma Permuted_map A B (R: relation B) (f: A -> B): Proper (Permuted (on f R) ==> Permuted R) (map f).",
            "VernacStartTheoremProof",
            "0d8aeeecac8a54aea22c29e8e01ba95c4f9fd3d3"
        ],
        [
            "repeat intro.",
            "VernacExtend",
            "b1b5d9b3004bf4634299c208df98406e88278608"
        ],
        [
            "induction H; simpl; eauto.",
            "VernacExtend",
            "3e34232306d179f345b2251c60993578b9edd155"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Definition add := fold_right plus (0%nat).",
            "VernacDefinition",
            "dfc68f42fe0b6743947a939ff41677cfd8858e03"
        ],
        [
            "Lemma add_same c l: (forall x, In x l -> x = c) -> add l = length l * c.",
            "VernacStartTheoremProof",
            "48d48b557316b9c3949e90d5d577c2d2bc5eaae2"
        ],
        [
            "Proof with auto.",
            "VernacProof",
            "a7e71b78b5628467da426641e148a0229b525f22"
        ],
        [
            "induction l...",
            "VernacExtend",
            "a4571710fc634c72b7b07ca630627ad571eee64e"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "simpl.",
            "VernacExtend",
            "1b93169f4cf876d207c1fab22a2347202ab48d85"
        ],
        [
            "intuition.",
            "VernacExtend",
            "ebd9388eeb482972743f9cce5cbddbd85ca5bdfd"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma length_concat T (l: list (list T)): length (concat l) = add (map (@length _) l).",
            "VernacStartTheoremProof",
            "5dce293efcbc8abd42ce5e05e59e004b02c275cf"
        ],
        [
            "Proof with auto.",
            "VernacProof",
            "a7e71b78b5628467da426641e148a0229b525f22"
        ],
        [
            "induction l...",
            "VernacExtend",
            "a4571710fc634c72b7b07ca630627ad571eee64e"
        ],
        [
            "simpl.",
            "VernacExtend",
            "1b93169f4cf876d207c1fab22a2347202ab48d85"
        ],
        [
            "rewrite app_length, IHl...",
            "VernacExtend",
            "2aa54b3a06f81c0c22bfb2c461f3118d43a3b101"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma concat_map_nil T U (l: list T): concat (map (fun _ => nil) l) = @nil U.",
            "VernacStartTheoremProof",
            "ddc2c0ec34f71ed5ae51be5e39c1a53d112fb054"
        ],
        [
            "induction l; auto.",
            "VernacExtend",
            "6df74a097ee826dbbeb45167e7678377d4e52265"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Definition product A B (aa: list A) (bb: list B): list (A * B) := concat (map (fun a => map (pair a) bb) aa).",
            "VernacDefinition",
            "7655855eed03fa6c67f59df8965c25bcaa3264d8"
        ],
        [
            "Instance Permutation_concat T: Proper (Permutation ==> Permutation) (@concat T).",
            "VernacInstance",
            "a03f084fe635db6dc19610d0d6bfc134a680f464"
        ],
        [
            "Proof with auto.",
            "VernacProof",
            "a7e71b78b5628467da426641e148a0229b525f22"
        ],
        [
            "repeat intro.",
            "VernacExtend",
            "b1b5d9b3004bf4634299c208df98406e88278608"
        ],
        [
            "induction H...",
            "VernacExtend",
            "9d0908bd383114f831825f49a508b957b979db71"
        ],
        [
            "simpl.",
            "VernacExtend",
            "1b93169f4cf876d207c1fab22a2347202ab48d85"
        ],
        [
            "apply Permutation_app...",
            "VernacExtend",
            "b9c50e90add58137d2b36f1b1e53abfd4b30cd57"
        ],
        [
            "simpl.",
            "VernacExtend",
            "1b93169f4cf876d207c1fab22a2347202ab48d85"
        ],
        [
            "repeat rewrite <- app_ass.",
            "VernacExtend",
            "0797b39a941bd4c347cf0dd5af57ded579bb3af1"
        ],
        [
            "apply Permutation_app...",
            "VernacExtend",
            "b9c50e90add58137d2b36f1b1e53abfd4b30cd57"
        ],
        [
            "apply Permutation_app_swap.",
            "VernacExtend",
            "849a44b721ebf9f100d040f7b723e63968aea6f4"
        ],
        [
            "eauto.",
            "VernacExtend",
            "d5f3a05ca887c29bb0b422fc64ae2775fea3935e"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma concat_map_singleton_f T A (f: A -> T) l: concat (map (fun x : A => (f x)::nil) l) = map f l.",
            "VernacStartTheoremProof",
            "aa2095deaf415a5e0a18a042f81fed8244b71016"
        ],
        [
            "Proof with auto.",
            "VernacProof",
            "a7e71b78b5628467da426641e148a0229b525f22"
        ],
        [
            "induction l...",
            "VernacExtend",
            "a4571710fc634c72b7b07ca630627ad571eee64e"
        ],
        [
            "simpl.",
            "VernacExtend",
            "1b93169f4cf876d207c1fab22a2347202ab48d85"
        ],
        [
            "congruence.",
            "VernacExtend",
            "d8c818f6cffeaee6a722a71acc77f2d6e5199eb9"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma map_concat_map T U V (g: T -> list U) (f: U -> V) l: map f (concat (map g l)) = concat (map (map f \u2218 g) l).",
            "VernacStartTheoremProof",
            "d9f09bf50dc26cbea87211651c0d17bfaa59bc2e"
        ],
        [
            "Proof with auto.",
            "VernacProof",
            "a7e71b78b5628467da426641e148a0229b525f22"
        ],
        [
            "unfold Basics.compose.",
            "VernacExtend",
            "3748eb7ed519ab0c506a05269af910ca26cf0994"
        ],
        [
            "induction l...",
            "VernacExtend",
            "a4571710fc634c72b7b07ca630627ad571eee64e"
        ],
        [
            "simpl.",
            "VernacExtend",
            "1b93169f4cf876d207c1fab22a2347202ab48d85"
        ],
        [
            "rewrite map_app.",
            "VernacExtend",
            "89eca143edf6436bb079a40b9fedf852073d1711"
        ],
        [
            "congruence.",
            "VernacExtend",
            "d8c818f6cffeaee6a722a71acc77f2d6e5199eb9"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma concat_concat T (x: list (list (list T))): concat (concat x) = concat (map concat x).",
            "VernacStartTheoremProof",
            "dda1828c7e2572b597913f783bede5d3d8ec2613"
        ],
        [
            "Proof with auto.",
            "VernacProof",
            "a7e71b78b5628467da426641e148a0229b525f22"
        ],
        [
            "induction x...",
            "VernacExtend",
            "32a9acd062d9403b496a2f40e432d3e2b104f8c0"
        ],
        [
            "simpl.",
            "VernacExtend",
            "1b93169f4cf876d207c1fab22a2347202ab48d85"
        ],
        [
            "rewrite concat_app.",
            "VernacExtend",
            "bdad128ced2b8fe5cb0349101f2f2abe329758ee"
        ],
        [
            "congruence.",
            "VernacExtend",
            "d8c818f6cffeaee6a722a71acc77f2d6e5199eb9"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Section two_lists_rect.",
            "VernacBeginSection",
            "4e1a1cce169b82a1defbb6776ef49db899817cb3"
        ],
        [
            "Variables (T: Type) (P: list T -> list T -> Type) (Pnil_l: forall x, P nil x) (Pnil_r: forall x, P x nil) (Pcons: forall x x' y y', P x' (y :: y') -> P (x :: x') y' -> P (x :: x') (y :: y')).",
            "VernacAssumption",
            "db725a30f28d99145379bd6baedc46d7eb9dcbf6"
        ],
        [
            "Let R: relation (list T * list T) := pair_rel (ltof (list T) (@length _)) (ltof (list T) (@length _)).",
            "VernacDefinition",
            "fdfcb8dc11529a60e908bcdd1b96cc846f5fc8be"
        ],
        [
            "Let wf_R: well_founded R.",
            "VernacDefinition",
            "f052609b1a1eca8b2d5320d1af3cdb98a51819d1"
        ],
        [
            "apply well_founded_pairs; apply well_founded_ltof.",
            "VernacExtend",
            "448a7eaeb40471d2c149671f5064d677e4208da6"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma two_lists_rect_pre (p: list T * list T): P (fst p) (snd p).",
            "VernacStartTheoremProof",
            "26d84eb71ddd9a172d101395945cba3618700dfe"
        ],
        [
            "Proof with auto.",
            "VernacProof",
            "a7e71b78b5628467da426641e148a0229b525f22"
        ],
        [
            "apply (well_founded_induction_type wf_R (fun p => P (fst p) (snd p))).",
            "VernacExtend",
            "3bcede94beae32f8de7080a35e52673e85a7da23"
        ],
        [
            "unfold R, ltof.",
            "VernacExtend",
            "d3441ab25dc44f5ad0f388a1ea05f1b094de0ac8"
        ],
        [
            "destruct x as [[|A] [|B]]...",
            "VernacExtend",
            "a374098a1adea616dadd92ca6c75cd50cdbe0e7b"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "simpl.",
            "VernacExtend",
            "1b93169f4cf876d207c1fab22a2347202ab48d85"
        ],
        [
            "apply Pcons.",
            "VernacExtend",
            "dac37cefc858417a053c506f6e4d5d76160b82d8"
        ],
        [
            "apply (X (l, B :: l0)).",
            "VernacExtend",
            "54a191db4c25631cb268ea60be5f6a5df4687e7f"
        ],
        [
            "apply pair_rel_l...",
            "VernacExtend",
            "24fb50b2ea39673e1e97496e5defa6e0d8b3e67b"
        ],
        [
            "apply (X (A :: l, l0)).",
            "VernacExtend",
            "4093bb5413f0a3e8921ede6b00b15bf2448bc065"
        ],
        [
            "apply pair_rel_r...",
            "VernacExtend",
            "5f2c8bfb5847d489735f99d19a339ba469f86f8f"
        ],
        [
            "Defined.",
            "VernacEndProof",
            "88c0be54a50df4bb90276c075406fe442428eb9c"
        ],
        [
            "Definition two_lists_rect x y: P x y := two_lists_rect_pre (x, y).",
            "VernacDefinition",
            "9a6e72f4cce6dfb7f6001cd490068c93bc3a0e91"
        ],
        [
            "End two_lists_rect.",
            "VernacEndSegment",
            "20aac4b51db062565a55b0e17edb1b2c5bff40c2"
        ],
        [
            "Instance Reflexive_Permutation T: Reflexive Permutation := @Permutation_refl T.",
            "VernacInstance",
            "5812febf9f4f9ed0b60bdbe7d6d8736d548508e2"
        ],
        [
            "Instance Reflexive_Symmetric T: Symmetric Permutation := @Permutation_sym T.",
            "VernacInstance",
            "807b74caee743a1ce27fcbc70c7c9f6bb006df92"
        ],
        [
            "Instance Reflexive_Transitive T: Transitive Permutation := @perm_trans T.",
            "VernacInstance",
            "95464cb02df840501e0cfa9ce2a8c339d54014c0"
        ],
        [
            "Instance app_Permutation_mor T: Proper (Permutation ==> Permutation ==> Permutation) (@app T).",
            "VernacInstance",
            "eac2dc4ddb04eb43fb709bf31ee5671956147acd"
        ],
        [
            "repeat intro.",
            "VernacExtend",
            "b1b5d9b3004bf4634299c208df98406e88278608"
        ],
        [
            "apply Permutation_app; assumption.",
            "VernacExtend",
            "b48d989eab06ed95f2f863f4527f4f574b84c5d6"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Instance map_Permutation_mor T U (f: T -> U): Proper (Permutation ==> Permutation) (map f) := Permutation_map f.",
            "VernacInstance",
            "f04a1ed060ad6e264a5ab5ebf1ce99690ac92180"
        ],
        [
            "Lemma concatMap_concatMap' T U V (g: T -> list U) (f: U -> list V) l: concat (map f (concat (map g l))) = concat (map (concat \u2218 map f \u2218 g) l).",
            "VernacStartTheoremProof",
            "08d127db2c532c2d8e31c02feafba7b7605edae8"
        ],
        [
            "Proof with auto.",
            "VernacProof",
            "a7e71b78b5628467da426641e148a0229b525f22"
        ],
        [
            "induction l...",
            "VernacExtend",
            "a4571710fc634c72b7b07ca630627ad571eee64e"
        ],
        [
            "simpl.",
            "VernacExtend",
            "1b93169f4cf876d207c1fab22a2347202ab48d85"
        ],
        [
            "rewrite <- IHl.",
            "VernacExtend",
            "d08c434fe9e4c4b4cc3e1701a922431b2b99a42a"
        ],
        [
            "unfold Basics.compose.",
            "VernacExtend",
            "3748eb7ed519ab0c506a05269af910ca26cf0994"
        ],
        [
            "rewrite map_app.",
            "VernacExtend",
            "89eca143edf6436bb079a40b9fedf852073d1711"
        ],
        [
            "rewrite concat_app...",
            "VernacExtend",
            "9761596127cab5d6860464b2759df8f595fe731a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma Permutation_concatMap T U (f g: T -> list U) l: (forall x, In x l -> Permutation (f x) (g x)) -> Permutation (concat (map f l)) (concat (map g l)).",
            "VernacStartTheoremProof",
            "83053028e5d800bb5c17265bf472935b27ba2f3c"
        ],
        [
            "Proof with auto.",
            "VernacProof",
            "a7e71b78b5628467da426641e148a0229b525f22"
        ],
        [
            "induction l...",
            "VernacExtend",
            "a4571710fc634c72b7b07ca630627ad571eee64e"
        ],
        [
            "simpl.",
            "VernacExtend",
            "1b93169f4cf876d207c1fab22a2347202ab48d85"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "rewrite IHl...",
            "VernacExtend",
            "a48c59a0d042c7310da6766246ef180a091c8386"
        ],
        [
            "rewrite H...",
            "VernacExtend",
            "2ded38871f6ef5ae4e687aa3245494ae541f7202"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Hint Resolve Permutation_concat.",
            "VernacHints",
            "0588e38477700b59cbe68c06353faaea172e6e63"
        ],
        [
            "Lemma Permutation_concat_map_app T A (f g: A -> list T) l: Permutation (concat (map (fun x => f x ++ g x) l)) (concat (map f l ++ map g l)).",
            "VernacStartTheoremProof",
            "4a73a328cf0b941267851d05ac56c03164cd2b0c"
        ],
        [
            "Proof with auto.",
            "VernacProof",
            "a7e71b78b5628467da426641e148a0229b525f22"
        ],
        [
            "induction l...",
            "VernacExtend",
            "a4571710fc634c72b7b07ca630627ad571eee64e"
        ],
        [
            "simpl.",
            "VernacExtend",
            "1b93169f4cf876d207c1fab22a2347202ab48d85"
        ],
        [
            "rewrite IHl.",
            "VernacExtend",
            "d4d0cebbb161cf1462b69fd1ed2d76db253a98c6"
        ],
        [
            "repeat rewrite concat_app.",
            "VernacExtend",
            "79ad8de3eb52687c6d3f8ad2c994822a458a0f8f"
        ],
        [
            "simpl.",
            "VernacExtend",
            "1b93169f4cf876d207c1fab22a2347202ab48d85"
        ],
        [
            "rewrite app_ass.",
            "VernacExtend",
            "1e8737a155ba47802e4df29a56a47a094af2082d"
        ],
        [
            "apply Permutation_app...",
            "VernacExtend",
            "b9c50e90add58137d2b36f1b1e53abfd4b30cd57"
        ],
        [
            "rewrite Permutation_app_swap.",
            "VernacExtend",
            "f0a5c37f78763485bc4c49403cf7ca4ed6a0aabd"
        ],
        [
            "rewrite app_ass.",
            "VernacExtend",
            "1e8737a155ba47802e4df29a56a47a094af2082d"
        ],
        [
            "apply Permutation_app...",
            "VernacExtend",
            "b9c50e90add58137d2b36f1b1e53abfd4b30cd57"
        ],
        [
            "apply Permutation_app_swap.",
            "VernacExtend",
            "849a44b721ebf9f100d040f7b723e63968aea6f4"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma concat_product T U V (f: U -> T -> list V) l l': Permutation (concat (map (fun x => concat (map (fun y => f y x) l')) l)) (concat (map (fun x => concat (map (f x) l)) l')).",
            "VernacStartTheoremProof",
            "7681e56d4b66d366968d1c099c9fe03fc80165f7"
        ],
        [
            "Proof with auto.",
            "VernacProof",
            "a7e71b78b5628467da426641e148a0229b525f22"
        ],
        [
            "induction l...",
            "VernacExtend",
            "a4571710fc634c72b7b07ca630627ad571eee64e"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "simpl.",
            "VernacExtend",
            "1b93169f4cf876d207c1fab22a2347202ab48d85"
        ],
        [
            "rewrite concat_map_nil...",
            "VernacExtend",
            "5d7ff881d126557cf06987220bad2424991dc725"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "simpl.",
            "VernacExtend",
            "1b93169f4cf876d207c1fab22a2347202ab48d85"
        ],
        [
            "rewrite IHl.",
            "VernacExtend",
            "d4d0cebbb161cf1462b69fd1ed2d76db253a98c6"
        ],
        [
            "apply Permutation_sym.",
            "VernacExtend",
            "94262274c360805dd9834746f95363628f0dc4c6"
        ],
        [
            "rewrite Permutation_concat_map_app.",
            "VernacExtend",
            "184f5bb84b7e408b5cd8f07727ea17ba08d99cc2"
        ],
        [
            "rewrite concat_app...",
            "VernacExtend",
            "9761596127cab5d6860464b2759df8f595fe731a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Instance map_eq_morphism A B: Proper (pointwise_relation _ eq ==> eq ==> eq) (@map A B).",
            "VernacInstance",
            "b055e0e56c704f27ae4914b9f9ae01ad17868506"
        ],
        [
            "Proof with auto.",
            "VernacProof",
            "a7e71b78b5628467da426641e148a0229b525f22"
        ],
        [
            "repeat intro.",
            "VernacExtend",
            "b1b5d9b3004bf4634299c208df98406e88278608"
        ],
        [
            "subst.",
            "VernacExtend",
            "ccc9cb848804101be22a0bb6c324861981c5c7f1"
        ],
        [
            "induction y0...",
            "VernacExtend",
            "f27a54a6b396d4eeba068305945bb5d0fcddfe3d"
        ],
        [
            "simpl.",
            "VernacExtend",
            "1b93169f4cf876d207c1fab22a2347202ab48d85"
        ],
        [
            "congruence.",
            "VernacExtend",
            "d8c818f6cffeaee6a722a71acc77f2d6e5199eb9"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Section splits_and_perms.",
            "VernacBeginSection",
            "4ed9f71ebceffde77f1bdd1e40c2931c1bf6cdbc"
        ],
        [
            "Context {T: Type}.",
            "VernacContext",
            "be9a7a6cbe25485b314331383c8d6eddddd780fd"
        ],
        [
            "Fixpoint splits (l: list T): list (T * list T) := match l with | nil => nil | h :: t => (h, t) :: map (fun xy => (fst xy, h :: snd xy)) (splits t) end.",
            "VernacFixpoint",
            "9e733a411d086d658bfc104821ec9429a6a5ec4a"
        ],
        [
            "Lemma length_splits l: length (splits l) = length l.",
            "VernacStartTheoremProof",
            "86ff5014160e410b0054ebcf0acc7d23af7b834b"
        ],
        [
            "Proof with auto.",
            "VernacProof",
            "a7e71b78b5628467da426641e148a0229b525f22"
        ],
        [
            "induction l...",
            "VernacExtend",
            "a4571710fc634c72b7b07ca630627ad571eee64e"
        ],
        [
            "simpl.",
            "VernacExtend",
            "1b93169f4cf876d207c1fab22a2347202ab48d85"
        ],
        [
            "rewrite map_length.",
            "VernacExtend",
            "fcd7ed281a0bd0ae53f660fd53f2725d569c74a9"
        ],
        [
            "intuition.",
            "VernacExtend",
            "ebd9388eeb482972743f9cce5cbddbd85ca5bdfd"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma splits_are_perms l p: In p (splits l) -> Permutation (fst p :: snd p) l.",
            "VernacStartTheoremProof",
            "92a41ec87877850a68a52eee189acc16ec36ba35"
        ],
        [
            "Proof with auto.",
            "VernacProof",
            "a7e71b78b5628467da426641e148a0229b525f22"
        ],
        [
            "induction l in p |- *...",
            "VernacExtend",
            "7864384ededf44d3891552122de9d4f68fb185ef"
        ],
        [
            "simpl.",
            "VernacExtend",
            "1b93169f4cf876d207c1fab22a2347202ab48d85"
        ],
        [
            "intuition.",
            "VernacExtend",
            "ebd9388eeb482972743f9cce5cbddbd85ca5bdfd"
        ],
        [
            "simpl.",
            "VernacExtend",
            "1b93169f4cf876d207c1fab22a2347202ab48d85"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "destruct H.",
            "VernacExtend",
            "8b2bca015429da94c456243b461e17a2a0582c40"
        ],
        [
            "subst...",
            "VernacExtend",
            "b907a93c53d5c34384373e3aac13eba90f0a4fdc"
        ],
        [
            "destruct (fst (conj_prod (in_map_iff _ _ _)) H).",
            "VernacExtend",
            "c504b4ccc0512bce17f01866b373859d9ee593ab"
        ],
        [
            "destruct H0.",
            "VernacExtend",
            "5c8f6cb3dc303d56935d6ec271a1de04f6790225"
        ],
        [
            "apply IHl in H1.",
            "VernacExtend",
            "7f8d5412cbf533bc1dc46f2dbcc19b2372e12954"
        ],
        [
            "subst.",
            "VernacExtend",
            "ccc9cb848804101be22a0bb6c324861981c5c7f1"
        ],
        [
            "simpl...",
            "VernacExtend",
            "504f71dca671c3e66b68ade966c1b4804373be90"
        ],
        [
            "apply perm_trans with (a :: fst x :: snd x).",
            "VernacExtend",
            "00a9cc332758c3fe1879f161f1c83ed5fb53746c"
        ],
        [
            "apply perm_swap.",
            "VernacExtend",
            "ae31658d1834adacffd39ae0769b514845f20926"
        ],
        [
            "apply perm_skip...",
            "VernacExtend",
            "ef02987ef032fab8e86a662e86c95e11ad383ea9"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma length_in_splits l p: In p (splits l) -> S (length (snd p)) = length l.",
            "VernacStartTheoremProof",
            "b051897779bbf7c88edc7db22d7ac8c24afaf56e"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "apply splits_are_perms in H.",
            "VernacExtend",
            "39bd0d283217af6882be67725fc6f5f384d4fb01"
        ],
        [
            "exact (Permutation_length H).",
            "VernacExtend",
            "b81cb20a01c304ef6f5e5812b26bc38d046f3215"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Fixpoint insert_everywhere (x: T) (l: list T): list (list T) := match l with | nil => (x :: nil) :: nil | h :: t => (x :: h :: t) :: map (cons h) (insert_everywhere x t) end.",
            "VernacFixpoint",
            "605a594b93fad273a27a9da7304155c8a9412d03"
        ],
        [
            "Lemma insert_everywhere_are_perms x l: forall y, In y (insert_everywhere x l) -> Permutation y (x :: l).",
            "VernacStartTheoremProof",
            "46025ef0e82157c1e677edab8a7a75bebef0ac7f"
        ],
        [
            "Proof with auto.",
            "VernacProof",
            "a7e71b78b5628467da426641e148a0229b525f22"
        ],
        [
            "induction l...",
            "VernacExtend",
            "a4571710fc634c72b7b07ca630627ad571eee64e"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "simpl in H.",
            "VernacExtend",
            "78dad51b2bb1130f71851d1e55489020824f59f6"
        ],
        [
            "intuition.",
            "VernacExtend",
            "ebd9388eeb482972743f9cce5cbddbd85ca5bdfd"
        ],
        [
            "subst...",
            "VernacExtend",
            "b907a93c53d5c34384373e3aac13eba90f0a4fdc"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "simpl in H.",
            "VernacExtend",
            "78dad51b2bb1130f71851d1e55489020824f59f6"
        ],
        [
            "destruct H.",
            "VernacExtend",
            "8b2bca015429da94c456243b461e17a2a0582c40"
        ],
        [
            "subst...",
            "VernacExtend",
            "b907a93c53d5c34384373e3aac13eba90f0a4fdc"
        ],
        [
            "apply in_map_iff in H.",
            "VernacExtend",
            "0ccb424eeec90f727150b5eaff0aa48fb66e5ab0"
        ],
        [
            "destruct H as [x0 [A B]].",
            "VernacExtend",
            "854703602def34c1c905c438e3955775f8c59cc2"
        ],
        [
            "subst.",
            "VernacExtend",
            "ccc9cb848804101be22a0bb6c324861981c5c7f1"
        ],
        [
            "apply IHl in B.",
            "VernacExtend",
            "b9a0ef1db5a8c4257ddefd99dcacf9656d6006e1"
        ],
        [
            "eauto.",
            "VernacExtend",
            "d5f3a05ca887c29bb0b422fc64ae2775fea3935e"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma length_insert_everywhere x l: length (insert_everywhere x l) = S (length l).",
            "VernacStartTheoremProof",
            "344ef626581818857df802f2fa37f5749525631f"
        ],
        [
            "Proof with auto.",
            "VernacProof",
            "a7e71b78b5628467da426641e148a0229b525f22"
        ],
        [
            "induction l...",
            "VernacExtend",
            "a4571710fc634c72b7b07ca630627ad571eee64e"
        ],
        [
            "simpl.",
            "VernacExtend",
            "1b93169f4cf876d207c1fab22a2347202ab48d85"
        ],
        [
            "rewrite map_length.",
            "VernacExtend",
            "fcd7ed281a0bd0ae53f660fd53f2725d569c74a9"
        ],
        [
            "congruence.",
            "VernacExtend",
            "d8c818f6cffeaee6a722a71acc77f2d6e5199eb9"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Definition perms: list T -> list (list T) := fold_right (fun h => concat \u2218 map (insert_everywhere h)) (nil :: nil).",
            "VernacDefinition",
            "cb17090d6d007a96606067c45a8177cf235937a3"
        ],
        [
            "Lemma perms_are_perms l a: In a (perms l) -> Permutation a l.",
            "VernacStartTheoremProof",
            "7e1fe3b0181944ab8466e28e805eaebde7e1b31e"
        ],
        [
            "Proof with auto.",
            "VernacProof",
            "a7e71b78b5628467da426641e148a0229b525f22"
        ],
        [
            "induction l in a |- *.",
            "VernacExtend",
            "f4011621781349ae08a1d8ae4112238089146f1e"
        ],
        [
            "simpl.",
            "VernacExtend",
            "1b93169f4cf876d207c1fab22a2347202ab48d85"
        ],
        [
            "intuition.",
            "VernacExtend",
            "ebd9388eeb482972743f9cce5cbddbd85ca5bdfd"
        ],
        [
            "subst...",
            "VernacExtend",
            "b907a93c53d5c34384373e3aac13eba90f0a4fdc"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "simpl in H.",
            "VernacExtend",
            "78dad51b2bb1130f71851d1e55489020824f59f6"
        ],
        [
            "unfold Basics.compose in H.",
            "VernacExtend",
            "98c2d0fa90ef08a6c3123cf5c4237170256d6419"
        ],
        [
            "apply In_concat_inv in H.",
            "VernacExtend",
            "ddb441453d0d97edbcfd7578f310f81a9a7fe73a"
        ],
        [
            "destruct H.",
            "VernacExtend",
            "8b2bca015429da94c456243b461e17a2a0582c40"
        ],
        [
            "destruct H.",
            "VernacExtend",
            "8b2bca015429da94c456243b461e17a2a0582c40"
        ],
        [
            "apply in_map_iff in H0.",
            "VernacExtend",
            "24f56f16f0d005852ffec0b9e84dc4ff72c47c2e"
        ],
        [
            "destruct H0 as [x0 [A B]].",
            "VernacExtend",
            "2f6bcd384e749b5a35ea7ba7f43c84b7c38bb4f3"
        ],
        [
            "subst.",
            "VernacExtend",
            "ccc9cb848804101be22a0bb6c324861981c5c7f1"
        ],
        [
            "eauto using insert_everywhere_are_perms.",
            "VernacExtend",
            "b4fba97d2851878a3c4188b1bd50869b9c7ed1c3"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma length_perms l: length (perms l) = fact (length l).",
            "VernacStartTheoremProof",
            "4a46650dec24a7829ecf5a52067399b1afeee691"
        ],
        [
            "Proof with auto.",
            "VernacProof",
            "a7e71b78b5628467da426641e148a0229b525f22"
        ],
        [
            "induction l...",
            "VernacExtend",
            "a4571710fc634c72b7b07ca630627ad571eee64e"
        ],
        [
            "simpl.",
            "VernacExtend",
            "1b93169f4cf876d207c1fab22a2347202ab48d85"
        ],
        [
            "unfold Basics.compose.",
            "VernacExtend",
            "3748eb7ed519ab0c506a05269af910ca26cf0994"
        ],
        [
            "rewrite length_concat.",
            "VernacExtend",
            "4ccebed913f3646d0ad711ee8ffee9199f2636ba"
        ],
        [
            "rewrite map_map.",
            "VernacExtend",
            "ae8e13105f5289f0c1e44cbfa83eff3c6f47acee"
        ],
        [
            "rewrite (@add_same (S (length l)) (map (fun x => length (insert_everywhere a x)) (perms l))).",
            "VernacExtend",
            "6abcc1321f10a0e61fb8549898fe4800e4a38394"
        ],
        [
            "rewrite map_length.",
            "VernacExtend",
            "fcd7ed281a0bd0ae53f660fd53f2725d569c74a9"
        ],
        [
            "rewrite IHl.",
            "VernacExtend",
            "d4d0cebbb161cf1462b69fd1ed2d76db253a98c6"
        ],
        [
            "rewrite Mult.mult_comm...",
            "VernacExtend",
            "4dbce780a8b9df197feec228bd9a6fa18291d2c1"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "destruct (in_map_iff (fun x => length (insert_everywhere a x)) (perms l) x).",
            "VernacExtend",
            "2b36b078eff4872225ba22e7ae9879463cd6204a"
        ],
        [
            "clear H1.",
            "VernacExtend",
            "c05bbc655b5fdcbbabbab72bd73c28fb300d5502"
        ],
        [
            "apply H0 in H.",
            "VernacExtend",
            "fce6911cbc9dbb12065c526618d86cafbb686536"
        ],
        [
            "clear H0.",
            "VernacExtend",
            "fe72360cf92275fb4ba47f89dfeb905e6d21c4a9"
        ],
        [
            "destruct H.",
            "VernacExtend",
            "8b2bca015429da94c456243b461e17a2a0582c40"
        ],
        [
            "destruct H.",
            "VernacExtend",
            "8b2bca015429da94c456243b461e17a2a0582c40"
        ],
        [
            "subst.",
            "VernacExtend",
            "ccc9cb848804101be22a0bb6c324861981c5c7f1"
        ],
        [
            "rewrite length_insert_everywhere.",
            "VernacExtend",
            "fa87c240dc3298c0701ed518307dadb6902854e1"
        ],
        [
            "f_equal.",
            "VernacExtend",
            "dfce814d1efcef60f8330516ad88155a3a5ec317"
        ],
        [
            "apply Permutation_length.",
            "VernacExtend",
            "81945a7a456d8bfe3802b00b6438858dd43f510d"
        ],
        [
            "apply perms_are_perms...",
            "VernacExtend",
            "4b4273e91830cbcd79a0a679317b8cd7d7d68150"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Definition alt_perms l: list (list T) := match l with | nil => nil :: nil | _ => concat (map (fun p => (map (cons (fst p)) (perms (snd p)))) (splits l)) end.",
            "VernacDefinition",
            "c9df97a2319de3e69814fdb60b3127e687dcb4fe"
        ],
        [
            "Lemma splits_permuted (l l': list T): Permutation l l' -> Permuted (fun x y => fst x = fst y /\\ Permutation (snd x) (snd y)) (splits l) (splits l').",
            "VernacStartTheoremProof",
            "3bc68a9cef70ecef9c6c72438eb3014e51d89aff"
        ],
        [
            "Proof with auto.",
            "VernacProof",
            "a7e71b78b5628467da426641e148a0229b525f22"
        ],
        [
            "intro.",
            "VernacExtend",
            "3999be354c758ba0d1866e0fcc78a7288779a224"
        ],
        [
            "set (fun x y: T * list T => fst x = fst y /\\ Permutation (snd x) (snd y)).",
            "VernacExtend",
            "ac7c8455aa0fe39a4fb0f63e5fb24c333e4636bd"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "induction H.",
            "VernacExtend",
            "f8e74d6b42ecd6b509e6a20cee53bb69d051cd07"
        ],
        [
            "simpl...",
            "VernacExtend",
            "504f71dca671c3e66b68ade966c1b4804373be90"
        ],
        [
            "simpl.",
            "VernacExtend",
            "1b93169f4cf876d207c1fab22a2347202ab48d85"
        ],
        [
            "apply permuted_skip...",
            "VernacExtend",
            "af07db04dd9e036ebed24633446558b85bc7fa91"
        ],
        [
            "split...",
            "VernacExtend",
            "baadab085aba401319b7eae3380d34307a7b74d2"
        ],
        [
            "apply Permuted_map.",
            "VernacExtend",
            "a96e328443dd1d14c0e8cf4fcc6a463641e598ee"
        ],
        [
            "unfold on.",
            "VernacExtend",
            "af535c1aeeb97d0cc2590220451c9b0ba9b369cf"
        ],
        [
            "subst P.",
            "VernacExtend",
            "37a29b451de870ca30fc70b22763d18c31140568"
        ],
        [
            "simpl.",
            "VernacExtend",
            "1b93169f4cf876d207c1fab22a2347202ab48d85"
        ],
        [
            "apply (Permuted_sub IHPermutation).",
            "VernacExtend",
            "540fc9b0111ebd2e7b79858c758d63b1c299db57"
        ],
        [
            "intuition.",
            "VernacExtend",
            "ebd9388eeb482972743f9cce5cbddbd85ca5bdfd"
        ],
        [
            "simpl.",
            "VernacExtend",
            "1b93169f4cf876d207c1fab22a2347202ab48d85"
        ],
        [
            "subst P.",
            "VernacExtend",
            "37a29b451de870ca30fc70b22763d18c31140568"
        ],
        [
            "apply alt_permuted_swap...",
            "VernacExtend",
            "cd4a78b159784896d32e26b7b9350e4e716a717d"
        ],
        [
            "repeat rewrite map_map.",
            "VernacExtend",
            "6397a4a7eaae25ec9feb2125289f70c2e88a3940"
        ],
        [
            "simpl.",
            "VernacExtend",
            "1b93169f4cf876d207c1fab22a2347202ab48d85"
        ],
        [
            "apply elemsR_map_map.",
            "VernacExtend",
            "2647d8f9f14a4ce347c05c118a597604862e09f2"
        ],
        [
            "simpl...",
            "VernacExtend",
            "504f71dca671c3e66b68ade966c1b4804373be90"
        ],
        [
            "eauto.",
            "VernacExtend",
            "d5f3a05ca887c29bb0b422fc64ae2775fea3935e"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Inductive merges_spec: list T -> list T -> list (list T) -> Prop := | merges_left_nil x: merges_spec nil x (x :: nil) | merges_right_nil x: merges_spec x nil (x :: nil) | merges_cons x y h t r r': merges_spec y (h :: t) r -> merges_spec (x :: y) t r' -> merges_spec (x :: y) (h :: t) (map (cons x) r ++ map (cons h) r').",
            "VernacInductive",
            "59129536d1a02925375175c0719cf898d1bb3a71"
        ],
        [
            "Hint Constructors merges_spec.",
            "VernacHints",
            "b39990c32c34aef437f1b8aa87dcaede656b93f3"
        ],
        [
            "Lemma merges_uniq a b r: merges_spec a b r -> forall r', merges_spec a b r' -> r = r'.",
            "VernacStartTheoremProof",
            "bb7cf50980903f1f08f105ccd7e7c15121ae88b7"
        ],
        [
            "Proof with auto.",
            "VernacProof",
            "a7e71b78b5628467da426641e148a0229b525f22"
        ],
        [
            "intros H.",
            "VernacExtend",
            "5cfae87a34fa7b59a257c9640f1b674f6e6d780b"
        ],
        [
            "induction H; intros.",
            "VernacExtend",
            "9d94519085f0746a29ac6c72628dc86104f71778"
        ],
        [
            "inversion_clear H...",
            "VernacExtend",
            "a23502606014528ad263a393402f8abc040cabee"
        ],
        [
            "inversion_clear H...",
            "VernacExtend",
            "a23502606014528ad263a393402f8abc040cabee"
        ],
        [
            "inversion_clear H1.",
            "VernacExtend",
            "1443921cbef97c67d0bd87bf517b302257ed5b28"
        ],
        [
            "apply IHmerges_spec1 in H2.",
            "VernacExtend",
            "240acba0473af60619842b14853132ed7efa6c77"
        ],
        [
            "apply IHmerges_spec2 in H3.",
            "VernacExtend",
            "c98f2376514c400a4db5778099ac60723090d9bf"
        ],
        [
            "congruence.",
            "VernacExtend",
            "d8c818f6cffeaee6a722a71acc77f2d6e5199eb9"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma length_merges (F: nat -> nat -> nat) a b r: (forall n, F 0 n = 1) -> (forall n, F n 0 = 1) -> (forall n n', F n (S n') + F (S n) n' = F (S n) (S n')) -> merges_spec a b r -> length r = F (length a) (length b).",
            "VernacStartTheoremProof",
            "87d2bd9765e05a523e57dc5892e10ab3f563138a"
        ],
        [
            "Proof with auto.",
            "VernacProof",
            "a7e71b78b5628467da426641e148a0229b525f22"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "induction H2.",
            "VernacExtend",
            "951bbbec963ad1faf7953248242dfa5ae7a3bc03"
        ],
        [
            "simpl...",
            "VernacExtend",
            "504f71dca671c3e66b68ade966c1b4804373be90"
        ],
        [
            "simpl...",
            "VernacExtend",
            "504f71dca671c3e66b68ade966c1b4804373be90"
        ],
        [
            "rewrite app_length.",
            "VernacExtend",
            "b9244791fd1e7d821ced2461a10375e028945296"
        ],
        [
            "repeat rewrite map_length.",
            "VernacExtend",
            "4672121a0ef731ba5f0daa2d772344e3103ad9f1"
        ],
        [
            "rewrite IHmerges_spec1.",
            "VernacExtend",
            "15c4dc03e22502457da39461537544eca82dba23"
        ],
        [
            "clear IHmerges_spec1.",
            "VernacExtend",
            "20e6d01d33dd65c05edf518736bdb8742fe5619c"
        ],
        [
            "rewrite IHmerges_spec2.",
            "VernacExtend",
            "8a634a8129e56a21cd10432804f9e1ab1eefb7b3"
        ],
        [
            "clear IHmerges_spec2.",
            "VernacExtend",
            "bac8dc2d88e64b322c594762eec5b60789bbd262"
        ],
        [
            "simpl @length...",
            "VernacExtend",
            "db1f66e44e8d6a220fa6fa53c1f840b8de76fb45"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Definition me (ab: list T * list T): nat := length (fst ab) + length (snd ab).",
            "VernacDefinition",
            "0f46536412e210195b4f7722737ea4c73505bb2c"
        ],
        [
            "Program Fixpoint merges_ex (ab: list T * list T) {measure (me ab)}: sig (merges_spec (fst ab) (snd ab)) := match ab with | (nil, x) => x :: nil | (x, nil) => x :: nil | (x :: y, h :: t) => map (cons x) (merges_ex (y, h :: t)) ++ map (cons h) (merges_ex (x :: y, t)) end.",
            "VernacFixpoint",
            "57d2c0247e8aa8f84d8cbb61965101ce52e4e5ca"
        ],
        [
            "Next Obligation.",
            "VernacExtend",
            "de5e6a0a7a163af0d8463969c3ff4241d7d5bba0"
        ],
        [
            "unfold me.",
            "VernacExtend",
            "9ae8fd203592ff7eefcc8673388be08ca372f3ce"
        ],
        [
            "simpl.",
            "VernacExtend",
            "1b93169f4cf876d207c1fab22a2347202ab48d85"
        ],
        [
            "omega.",
            "VernacExtend",
            "32c6c865d255452c7e10c77111456d1981cede39"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Next Obligation.",
            "VernacExtend",
            "de5e6a0a7a163af0d8463969c3ff4241d7d5bba0"
        ],
        [
            "repeat destruct_call merges_ex; auto.",
            "VernacExtend",
            "c7f3d11b827a916ac723612ff5c3358f4b20cf57"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Definition merges (a b: list T): list (list T) := proj1_sig (merges_ex (a, b)).",
            "VernacDefinition",
            "ce945318fcd02eb593f1d789d4ba00bd528ed1e9"
        ],
        [
            "Lemma merges_real_eq a b: merges a b = match a, b with | nil, x => x :: nil | x, nil => x :: nil | x :: y, h :: t => map (cons x) (merges y (h :: t)) ++ map (cons h) (merges (x :: y) t) end.",
            "VernacStartTheoremProof",
            "5349db7b512baee9bfa2648cebb122545245ff84"
        ],
        [
            "Proof with auto.",
            "VernacProof",
            "a7e71b78b5628467da426641e148a0229b525f22"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "apply (@merges_uniq a b).",
            "VernacExtend",
            "92b47dcada8eedb4142bafd350cb0a2e1b7440e2"
        ],
        [
            "unfold merges.",
            "VernacExtend",
            "617d4e031188a5bab6ef161cfff350b67f325c73"
        ],
        [
            "destruct_call merges_ex...",
            "VernacExtend",
            "a000cac002ae1984fa77246d538042a913c194e8"
        ],
        [
            "destruct a...",
            "VernacExtend",
            "9abfdb646f5edc10fb83b356cc5d6bea069ea43b"
        ],
        [
            "destruct b...",
            "VernacExtend",
            "c32d8818c7aca19da831504d39958211a348fcea"
        ],
        [
            "unfold merges.",
            "VernacExtend",
            "617d4e031188a5bab6ef161cfff350b67f325c73"
        ],
        [
            "repeat destruct_call merges_ex...",
            "VernacExtend",
            "0bf8a8df42df1aa207a1b6d6d3e8c5d0a8c6a8a1"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma merges_nil_r a: merges a [] = [a].",
            "VernacStartTheoremProof",
            "6af6a598d0bc3fea24795a0cd7f39bfcfea4d9e6"
        ],
        [
            "Proof with auto.",
            "VernacProof",
            "a7e71b78b5628467da426641e148a0229b525f22"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "rewrite merges_real_eq.",
            "VernacExtend",
            "bb992c10517147d1c18ba08825110d59afbd9770"
        ],
        [
            "destruct a...",
            "VernacExtend",
            "9abfdb646f5edc10fb83b356cc5d6bea069ea43b"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Hint Resolve Permutation_concat.",
            "VernacHints",
            "0588e38477700b59cbe68c06353faaea172e6e63"
        ],
        [
            "Lemma product_app: forall T (a b c: list T), product (a ++ b) c = product a c ++ product b c.",
            "VernacStartTheoremProof",
            "47426c613b01a9967749aa6f5a5132b8899cfbed"
        ],
        [
            "Proof with auto.",
            "VernacProof",
            "a7e71b78b5628467da426641e148a0229b525f22"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "unfold product.",
            "VernacExtend",
            "02e2bfd681775d904db158da999dea49db230b13"
        ],
        [
            "rewrite map_app.",
            "VernacExtend",
            "89eca143edf6436bb079a40b9fedf852073d1711"
        ],
        [
            "rewrite concat_app...",
            "VernacExtend",
            "9761596127cab5d6860464b2759df8f595fe731a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma product_concat: forall T (a: list (list T)) (b: list T), product (concat a) b = concat (map (flip (@product _ _) b) a).",
            "VernacStartTheoremProof",
            "567253cb664b86cdadd8f4ade9ec23ea28358816"
        ],
        [
            "Proof with auto.",
            "VernacProof",
            "a7e71b78b5628467da426641e148a0229b525f22"
        ],
        [
            "induction a...",
            "VernacExtend",
            "e014d437fd88f40c956ccde75b90bdbd42a3278f"
        ],
        [
            "simpl.",
            "VernacExtend",
            "1b93169f4cf876d207c1fab22a2347202ab48d85"
        ],
        [
            "unfold flip at 1.",
            "VernacExtend",
            "3f63843112baecae49b14cc5ff0076f4d9908f36"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "rewrite <- IHa.",
            "VernacExtend",
            "49232fc6e27a92862c880b65aef57bc1f4596539"
        ],
        [
            "apply product_app.",
            "VernacExtend",
            "6cc20944e1cf806b2b0a97bca908d8fd1e820ce7"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma concatMap_insert_everywhere_comm x y l: Permutation (concat (map (insert_everywhere x) (insert_everywhere y l))) (concat (map (insert_everywhere y) (insert_everywhere x l))).",
            "VernacStartTheoremProof",
            "1901a1d906d84c9cc8336fb90e39030fbd865804"
        ],
        [
            "Proof with auto.",
            "VernacProof",
            "a7e71b78b5628467da426641e148a0229b525f22"
        ],
        [
            "induction l...",
            "VernacExtend",
            "a4571710fc634c72b7b07ca630627ad571eee64e"
        ],
        [
            "simpl...",
            "VernacExtend",
            "504f71dca671c3e66b68ade966c1b4804373be90"
        ],
        [
            "simpl.",
            "VernacExtend",
            "1b93169f4cf876d207c1fab22a2347202ab48d85"
        ],
        [
            "rewrite perm_swap.",
            "VernacExtend",
            "ed98241ca5742f13823e25287bd4d1f8e4c65fe2"
        ],
        [
            "apply perm_skip.",
            "VernacExtend",
            "88d9c437306dbe4b5a3f0f8693d406682ecdb8a8"
        ],
        [
            "apply perm_skip.",
            "VernacExtend",
            "88d9c437306dbe4b5a3f0f8693d406682ecdb8a8"
        ],
        [
            "rewrite (map_map (cons a) (insert_everywhere x)).",
            "VernacExtend",
            "6025267be21819a05732d06e6889997ea3bdc310"
        ],
        [
            "rewrite (map_map (cons a) (insert_everywhere y)).",
            "VernacExtend",
            "eca0f996297e9520b35093d43c147cab4d22cd53"
        ],
        [
            "simpl.",
            "VernacExtend",
            "1b93169f4cf876d207c1fab22a2347202ab48d85"
        ],
        [
            "rewrite (Permutation_concat_map_app (fun x0 => (x :: a :: x0) :: nil) (fun x0 => map (cons a) (insert_everywhere x x0)) (insert_everywhere y l)).",
            "VernacExtend",
            "4393383e61143b629e1e30962d6403bb9141e507"
        ],
        [
            "apply Permutation_sym.",
            "VernacExtend",
            "94262274c360805dd9834746f95363628f0dc4c6"
        ],
        [
            "rewrite (Permutation_concat_map_app (fun x0 => (y :: a :: x0) :: nil) (fun x => map (cons a) (insert_everywhere y x)) (insert_everywhere x l)).",
            "VernacExtend",
            "b76312d165c2069346542d3ad1164f242c2efaf9"
        ],
        [
            "repeat rewrite concat_app.",
            "VernacExtend",
            "79ad8de3eb52687c6d3f8ad2c994822a458a0f8f"
        ],
        [
            "repeat rewrite concat_map_singleton_f.",
            "VernacExtend",
            "8bb6d7030debb60ce4a199ae827461017b8cb8a2"
        ],
        [
            "rewrite <- (map_map (insert_everywhere x) (map (cons a))).",
            "VernacExtend",
            "07a88f3a67f33f37e9082136ae883eb61e58d151"
        ],
        [
            "rewrite <- (map_map (insert_everywhere y) (map (cons a))).",
            "VernacExtend",
            "958a2b262eca3518c095223b4e87d454d75362da"
        ],
        [
            "repeat rewrite <- map_concat.",
            "VernacExtend",
            "d6ffde18364019f2bf2cbf7b3e3c550f63d7844b"
        ],
        [
            "repeat rewrite map_map.",
            "VernacExtend",
            "6397a4a7eaae25ec9feb2125289f70c2e88a3940"
        ],
        [
            "repeat rewrite <- app_ass.",
            "VernacExtend",
            "0797b39a941bd4c347cf0dd5af57ded579bb3af1"
        ],
        [
            "symmetry in IHl...",
            "VernacExtend",
            "5448d82fd97ac8d38a5c9303e8e978bd253e1517"
        ],
        [
            "apply Permutation_app...",
            "VernacExtend",
            "b9c50e90add58137d2b36f1b1e53abfd4b30cd57"
        ],
        [
            "apply Permutation_app_swap.",
            "VernacExtend",
            "849a44b721ebf9f100d040f7b723e63968aea6f4"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Instance Permutation_perms: Proper (Permutation ==> Permutation) perms.",
            "VernacInstance",
            "2fe2b5957c3fa46f0aca866ff60ef9fbacb98c06"
        ],
        [
            "Proof with eauto 2.",
            "VernacProof",
            "33740a1097c1c9800e5a84d6b4cf360fb992d7f5"
        ],
        [
            "intros l l' P.",
            "VernacExtend",
            "356bb0f75299268e4f653c57a51c4d6deb60ff0b"
        ],
        [
            "induction P...",
            "VernacExtend",
            "5a4d79881cf00aea918492ba159d53c25680d2c6"
        ],
        [
            "simpl.",
            "VernacExtend",
            "1b93169f4cf876d207c1fab22a2347202ab48d85"
        ],
        [
            "apply Permutation_concat...",
            "VernacExtend",
            "603f81d04e453ff508712be079574949fa12821a"
        ],
        [
            "simpl.",
            "VernacExtend",
            "1b93169f4cf876d207c1fab22a2347202ab48d85"
        ],
        [
            "unfold Basics.compose.",
            "VernacExtend",
            "3748eb7ed519ab0c506a05269af910ca26cf0994"
        ],
        [
            "set (perms l).",
            "VernacExtend",
            "125821539b9a475ceb5d2e7786d680935814a2e4"
        ],
        [
            "clearbody l0.",
            "VernacExtend",
            "35d826decb88c53c8754b323e029634d15bd4183"
        ],
        [
            "clear l.",
            "VernacExtend",
            "fea3fd0af2a95dd56fb8262ccfbea1340d887dc7"
        ],
        [
            "rename l0 into l.",
            "VernacExtend",
            "e930516c1004a22c0d1e0921799962a7f9beec47"
        ],
        [
            "repeat rewrite concatMap_concatMap'.",
            "VernacExtend",
            "85c043b9db93cad9ccdbe2b6a3fcdee1728e450a"
        ],
        [
            "apply Permutation_concatMap.",
            "VernacExtend",
            "af920d9c261847293d716c7499d275fb1db50eaa"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "unfold Basics.compose.",
            "VernacExtend",
            "3748eb7ed519ab0c506a05269af910ca26cf0994"
        ],
        [
            "apply concatMap_insert_everywhere_comm.",
            "VernacExtend",
            "07ae4c2ab4cdf113f5645c06927b54a93f7c56b0"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma merges_insert_everywhere a l: insert_everywhere a l = merges (a :: nil) l.",
            "VernacStartTheoremProof",
            "954d5a59eeafad219a0bac5e82461ecfa4931a07"
        ],
        [
            "Proof with auto.",
            "VernacProof",
            "a7e71b78b5628467da426641e148a0229b525f22"
        ],
        [
            "induction l...",
            "VernacExtend",
            "a4571710fc634c72b7b07ca630627ad571eee64e"
        ],
        [
            "simpl.",
            "VernacExtend",
            "1b93169f4cf876d207c1fab22a2347202ab48d85"
        ],
        [
            "rewrite IHl.",
            "VernacExtend",
            "d4d0cebbb161cf1462b69fd1ed2d76db253a98c6"
        ],
        [
            "rewrite (merges_real_eq [a] (a0::l)).",
            "VernacExtend",
            "4c8881c1fa3574760d44b10c5850cc8b040ef211"
        ],
        [
            "rewrite (merges_real_eq [] (a0::l)).",
            "VernacExtend",
            "e563969725c1f0c3e6144637b9880b1e2ce50d51"
        ],
        [
            "simpl...",
            "VernacExtend",
            "504f71dca671c3e66b68ade966c1b4804373be90"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma merges_insert_everywhere' a l: Permutation (insert_everywhere a l) (merges l (a :: nil)).",
            "VernacStartTheoremProof",
            "7512dd5e5270d5386ee454e8acd710e8b842c8b1"
        ],
        [
            "Proof with auto.",
            "VernacProof",
            "a7e71b78b5628467da426641e148a0229b525f22"
        ],
        [
            "induction l...",
            "VernacExtend",
            "a4571710fc634c72b7b07ca630627ad571eee64e"
        ],
        [
            "simpl.",
            "VernacExtend",
            "1b93169f4cf876d207c1fab22a2347202ab48d85"
        ],
        [
            "transitivity ((a :: a0 :: l) :: map (cons a0) (merges l [a]))...",
            "VernacExtend",
            "bfc621e88a582bc5fd22c9024b360e70a8fc94d8"
        ],
        [
            "rewrite (merges_real_eq (a0::l) [a]).",
            "VernacExtend",
            "7d62ef657263933f40712962f2928c693505055e"
        ],
        [
            "rewrite (merges_real_eq (a0::l) []).",
            "VernacExtend",
            "134aa6e1a5d2bcdccafd3bc27e5c3d9b99d46c6a"
        ],
        [
            "simpl.",
            "VernacExtend",
            "1b93169f4cf876d207c1fab22a2347202ab48d85"
        ],
        [
            "transitivity ([a :: a0 :: l] ++ map (cons a0) (merges l [a]))...",
            "VernacExtend",
            "6e607741e678a8b3bf0a8b9213f3321888fc2746"
        ],
        [
            "apply Permutation_app_swap.",
            "VernacExtend",
            "849a44b721ebf9f100d040f7b723e63968aea6f4"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma insert_everywhere_merges_commute a x y: Permutation (concat (map (insert_everywhere a) (merges y x))) (concat (map (merges y) (insert_everywhere a x))).",
            "VernacStartTheoremProof",
            "4f9fb544791b1408a049ff0aebc5fb689778e85d"
        ],
        [
            "Proof with auto.",
            "VernacProof",
            "a7e71b78b5628467da426641e148a0229b525f22"
        ],
        [
            "revert x y.",
            "VernacExtend",
            "a611e1a97f0d9491f334a9e18e82cc9c89f7d03d"
        ],
        [
            "apply two_lists_rect; intros.",
            "VernacExtend",
            "99976e683ab17812b5fb511b4eeaff15d89a4764"
        ],
        [
            "simpl.",
            "VernacExtend",
            "1b93169f4cf876d207c1fab22a2347202ab48d85"
        ],
        [
            "rewrite merges_nil_r.",
            "VernacExtend",
            "0a406aecce7d54b4f89c0abfef17de682e78e9e6"
        ],
        [
            "simpl.",
            "VernacExtend",
            "1b93169f4cf876d207c1fab22a2347202ab48d85"
        ],
        [
            "repeat rewrite app_nil_r.",
            "VernacExtend",
            "37aae6b19a6600a1e2a7cd05a9b94972c08a3955"
        ],
        [
            "apply merges_insert_everywhere'.",
            "VernacExtend",
            "dba96b50542d3b7479183b64d180382355ceb0f1"
        ],
        [
            "simpl.",
            "VernacExtend",
            "1b93169f4cf876d207c1fab22a2347202ab48d85"
        ],
        [
            "rewrite app_nil_r.",
            "VernacExtend",
            "c4835e186d44991c06ea8a79f450a4e967f8f713"
        ],
        [
            "rewrite (map_ext (merges []) (fun x0 => [x0])).",
            "VernacExtend",
            "a0e76b56d456c1be8fdea351e7d675ab5dceb037"
        ],
        [
            "rewrite concat_map_singleton...",
            "VernacExtend",
            "d0bd280acb9be87204133d60932dbe5d487d825c"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "apply merges_real_eq.",
            "VernacExtend",
            "f35ae6685525e9c441c23ad9aa4ddb1fe6f8b3fc"
        ],
        [
            "rewrite (merges_real_eq (y :: y') (x :: x')).",
            "VernacExtend",
            "22e11e43e8b99db8d10e65014cf12ed764388538"
        ],
        [
            "rewrite map_app.",
            "VernacExtend",
            "89eca143edf6436bb079a40b9fedf852073d1711"
        ],
        [
            "rewrite concat_app.",
            "VernacExtend",
            "bdad128ced2b8fe5cb0349101f2f2abe329758ee"
        ],
        [
            "repeat rewrite map_map.",
            "VernacExtend",
            "6397a4a7eaae25ec9feb2125289f70c2e88a3940"
        ],
        [
            "simpl insert_everywhere.",
            "VernacExtend",
            "9c4d61e5b2293af2d4e1337bde0b6c4960149aa9"
        ],
        [
            "rewrite (Permutation_concat_map_app (fun x0 => [a :: y :: x0]) (fun x0 => map (cons y) (insert_everywhere a x0))).",
            "VernacExtend",
            "3f661a32ccfea4a030fed2c01a296eadd51a2975"
        ],
        [
            "rewrite (Permutation_concat_map_app (fun x0 => [a :: x :: x0]) (fun x0 => map (cons x) (insert_everywhere a x0))).",
            "VernacExtend",
            "c016f1fd7d4fd12a5ae92a805ce601f8936ace67"
        ],
        [
            "repeat rewrite concat_app.",
            "VernacExtend",
            "79ad8de3eb52687c6d3f8ad2c994822a458a0f8f"
        ],
        [
            "repeat rewrite concat_map_singleton_f.",
            "VernacExtend",
            "8bb6d7030debb60ce4a199ae827461017b8cb8a2"
        ],
        [
            "rewrite app_ass.",
            "VernacExtend",
            "1e8737a155ba47802e4df29a56a47a094af2082d"
        ],
        [
            "rewrite <- (map_map (insert_everywhere a) (map (cons x))).",
            "VernacExtend",
            "b92100fd50bd0c23d7bf846c6c09947dffdefb42"
        ],
        [
            "rewrite <- (map_map (insert_everywhere a) (map (cons y))).",
            "VernacExtend",
            "4fc5705633052ee123d1b9ab1929b1065d920430"
        ],
        [
            "rewrite <- map_concat.",
            "VernacExtend",
            "66d1aa1bd19472d3d8001050bce2cc90b635ad2d"
        ],
        [
            "rewrite <- map_concat.",
            "VernacExtend",
            "66d1aa1bd19472d3d8001050bce2cc90b635ad2d"
        ],
        [
            "rewrite H.",
            "VernacExtend",
            "6192df8b89486a3ba89a78e26e0d70cae2dc94c2"
        ],
        [
            "rewrite H0.",
            "VernacExtend",
            "1a54b13ac1654793174947eafd5c41a3f024eb49"
        ],
        [
            "clear H H0.",
            "VernacExtend",
            "a743351ff441835fe992d483bf3a5b58c3fccd77"
        ],
        [
            "simpl @map at 7.",
            "VernacExtend",
            "f7276eaed89aae88469a01a57d75ce4d1b5f9252"
        ],
        [
            "simpl @concat at 3.",
            "VernacExtend",
            "3174bf300067a42165f02ab1dc69b579bcfd2de7"
        ],
        [
            "rewrite map_map.",
            "VernacExtend",
            "ae8e13105f5289f0c1e44cbfa83eff3c6f47acee"
        ],
        [
            "rewrite (merges_real_eq (y :: y') (a :: x :: x')).",
            "VernacExtend",
            "950988f1375505d29026c6efc4526b35e1183e55"
        ],
        [
            "rewrite (merges_real_eq (y :: y') (x :: x')).",
            "VernacExtend",
            "22e11e43e8b99db8d10e65014cf12ed764388538"
        ],
        [
            "rewrite map_app.",
            "VernacExtend",
            "89eca143edf6436bb079a40b9fedf852073d1711"
        ],
        [
            "repeat rewrite map_map.",
            "VernacExtend",
            "6397a4a7eaae25ec9feb2125289f70c2e88a3940"
        ],
        [
            "rewrite app_ass.",
            "VernacExtend",
            "1e8737a155ba47802e4df29a56a47a094af2082d"
        ],
        [
            "apply Permutation_sym.",
            "VernacExtend",
            "94262274c360805dd9834746f95363628f0dc4c6"
        ],
        [
            "rewrite (Permutation_app_swap (map (cons y) (merges y' (a :: x :: x')))).",
            "VernacExtend",
            "431d74078cb7ce162306f796d7114fdc04278966"
        ],
        [
            "repeat rewrite app_ass.",
            "VernacExtend",
            "c5b6ee361540fa0f14fb61b62365b89213ce66af"
        ],
        [
            "apply Permutation_app...",
            "VernacExtend",
            "b9c50e90add58137d2b36f1b1e53abfd4b30cd57"
        ],
        [
            "apply Permutation_sym.",
            "VernacExtend",
            "94262274c360805dd9834746f95363628f0dc4c6"
        ],
        [
            "rewrite (Permutation_app_swap (map (cons y) (concat (map (merges y') (insert_everywhere a (x :: x')))))).",
            "VernacExtend",
            "f097ab226cd8ce4ba5ce514fac481c7d3bfba1b6"
        ],
        [
            "repeat rewrite app_ass.",
            "VernacExtend",
            "c5b6ee361540fa0f14fb61b62365b89213ce66af"
        ],
        [
            "apply Permutation_app...",
            "VernacExtend",
            "b9c50e90add58137d2b36f1b1e53abfd4b30cd57"
        ],
        [
            "simpl.",
            "VernacExtend",
            "1b93169f4cf876d207c1fab22a2347202ab48d85"
        ],
        [
            "rewrite map_map.",
            "VernacExtend",
            "ae8e13105f5289f0c1e44cbfa83eff3c6f47acee"
        ],
        [
            "rewrite map_app.",
            "VernacExtend",
            "89eca143edf6436bb079a40b9fedf852073d1711"
        ],
        [
            "rewrite (map_ext (fun x0 : list T => merges (y :: y') (x :: x0)) (fun x0 : list T => map (cons y) (merges y' (x :: x0)) ++ map (cons x) (merges (y :: y') x0))).",
            "VernacExtend",
            "f202967d221ce426a1c395d7a78e14313115ab57"
        ],
        [
            "Focus 2.",
            "VernacFocus",
            "485d4f15aaf5c71ed130bd270976f9fc4e12a61f"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "rewrite merges_real_eq...",
            "VernacExtend",
            "6a89fe3e321c43093878cfc614d0a4fbdd255f6d"
        ],
        [
            "apply Permutation_sym.",
            "VernacExtend",
            "94262274c360805dd9834746f95363628f0dc4c6"
        ],
        [
            "rewrite Permutation_concat_map_app.",
            "VernacExtend",
            "184f5bb84b7e408b5cd8f07727ea17ba08d99cc2"
        ],
        [
            "rewrite concat_app.",
            "VernacExtend",
            "bdad128ced2b8fe5cb0349101f2f2abe329758ee"
        ],
        [
            "rewrite app_ass.",
            "VernacExtend",
            "1e8737a155ba47802e4df29a56a47a094af2082d"
        ],
        [
            "rewrite <- (map_map (fun x0 => merges y' (x :: x0)) (map (cons y))).",
            "VernacExtend",
            "1acd4e464251a8262f98c8fb79dd89083941572e"
        ],
        [
            "rewrite <- map_concat.",
            "VernacExtend",
            "66d1aa1bd19472d3d8001050bce2cc90b635ad2d"
        ],
        [
            "rewrite Permutation_app_swap.",
            "VernacExtend",
            "f0a5c37f78763485bc4c49403cf7ca4ed6a0aabd"
        ],
        [
            "rewrite <- app_ass.",
            "VernacExtend",
            "01fe27f1934651fa211feca2b08097e840f7a3e9"
        ],
        [
            "apply Permutation_app...",
            "VernacExtend",
            "b9c50e90add58137d2b36f1b1e53abfd4b30cd57"
        ],
        [
            "rewrite <- (map_map (fun x0 => merges (y :: y') x0) (map (cons x))).",
            "VernacExtend",
            "24d979224de7d7a0ae3065c2419322ea1aae0b0b"
        ],
        [
            "rewrite <- map_concat.",
            "VernacExtend",
            "66d1aa1bd19472d3d8001050bce2cc90b635ad2d"
        ],
        [
            "apply Permutation_app...",
            "VernacExtend",
            "b9c50e90add58137d2b36f1b1e53abfd4b30cd57"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma merges_sym x y: Permutation (merges x y) (merges y x).",
            "VernacStartTheoremProof",
            "3f166835789b372eed56a188186e6b916fb6804c"
        ],
        [
            "Proof with auto.",
            "VernacProof",
            "a7e71b78b5628467da426641e148a0229b525f22"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "unfold merges at 1.",
            "VernacExtend",
            "cd767f6127ef1fdeb51b1a0790fd6643f81ba04b"
        ],
        [
            "destruct_call merges_ex.",
            "VernacExtend",
            "8b3f60e790ee1ac62c8d39bbafe03c95a169d890"
        ],
        [
            "simpl in *.",
            "VernacExtend",
            "5f89d9715fcf9b11bc0d0aadc658e9b10c47b606"
        ],
        [
            "induction m...",
            "VernacExtend",
            "7976564363e4fb2c1eb959e320f407ccbf3fd10d"
        ],
        [
            "rewrite merges_nil_r...",
            "VernacExtend",
            "c5d56f955a6018f637d51c2927a6463a1910c57f"
        ],
        [
            "rewrite IHm1.",
            "VernacExtend",
            "a830d32a829b310803b28880ee52776c9198ac0e"
        ],
        [
            "rewrite IHm2.",
            "VernacExtend",
            "1bee0ef3fb84e59de4453d1259df1fa36b10fbe1"
        ],
        [
            "rewrite (merges_real_eq (h :: t) (x :: y)).",
            "VernacExtend",
            "d859d9ceb69bb6cdf5a9a57b428f7da608041647"
        ],
        [
            "apply Permutation_app_swap.",
            "VernacExtend",
            "849a44b721ebf9f100d040f7b723e63968aea6f4"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Hint Immediate merges_sym.",
            "VernacHints",
            "cd3c610b285975baa71c2935494a61c3913e430d"
        ],
        [
            "Lemma perms_app (a b: list T): Permutation (perms (a ++ b)) (concat (map (uncurry merges) (product (perms a) (perms b)))).",
            "VernacStartTheoremProof",
            "18b2000a29a9663f39fe8c1d56983f074beb15a0"
        ],
        [
            "Proof with auto.",
            "VernacProof",
            "a7e71b78b5628467da426641e148a0229b525f22"
        ],
        [
            "unfold product.",
            "VernacExtend",
            "02e2bfd681775d904db158da999dea49db230b13"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "rewrite map_concat.",
            "VernacExtend",
            "15aca30d7fa832da3533a8177a9ff8f7526a9751"
        ],
        [
            "rewrite map_map.",
            "VernacExtend",
            "ae8e13105f5289f0c1e44cbfa83eff3c6f47acee"
        ],
        [
            "induction a.",
            "VernacExtend",
            "cd3414465e628a01405035e1db2372571dd4d2a6"
        ],
        [
            "simpl.",
            "VernacExtend",
            "1b93169f4cf876d207c1fab22a2347202ab48d85"
        ],
        [
            "rewrite app_nil_r.",
            "VernacExtend",
            "c4835e186d44991c06ea8a79f450a4e967f8f713"
        ],
        [
            "rewrite map_map.",
            "VernacExtend",
            "ae8e13105f5289f0c1e44cbfa83eff3c6f47acee"
        ],
        [
            "unfold uncurry.",
            "VernacExtend",
            "0bef0ada6fdb93ca419856d202eeda7b88fa63b2"
        ],
        [
            "simpl.",
            "VernacExtend",
            "1b93169f4cf876d207c1fab22a2347202ab48d85"
        ],
        [
            "rewrite (map_ext (fun x => merges [] x) (fun x => x :: nil))...",
            "VernacExtend",
            "b01720694f73d106f4b2221787ce9e6d2712edef"
        ],
        [
            "rewrite concat_map_singleton...",
            "VernacExtend",
            "d0bd280acb9be87204133d60932dbe5d487d825c"
        ],
        [
            "simpl.",
            "VernacExtend",
            "1b93169f4cf876d207c1fab22a2347202ab48d85"
        ],
        [
            "unfold Basics.compose.",
            "VernacExtend",
            "3748eb7ed519ab0c506a05269af910ca26cf0994"
        ],
        [
            "rewrite IHa.",
            "VernacExtend",
            "9e383c888c61315717545bb7809490842b4060d5"
        ],
        [
            "clear IHa.",
            "VernacExtend",
            "4bb72bc6b97f45ff3162c88de5274573a83f019a"
        ],
        [
            "rewrite (map_ext (fun x : list T => map (uncurry merges) (map (pair x) (perms b))) (fun x : list T => map (merges x) (perms b))).",
            "VernacExtend",
            "fbf5cc528ff7f2d2ff155cb39385bbd85362693b"
        ],
        [
            "rewrite (map_ext (fun x : list T => map (uncurry merges) (map (pair x) (perms b))) (fun x : list T => map (merges x) (perms b))).",
            "VernacExtend",
            "fbf5cc528ff7f2d2ff155cb39385bbd85362693b"
        ],
        [
            "rewrite concat_concat.",
            "VernacExtend",
            "f8862e7d28d9a2e42058de3fdb291917ccd1744c"
        ],
        [
            "rewrite concat_concat.",
            "VernacExtend",
            "f8862e7d28d9a2e42058de3fdb291917ccd1744c"
        ],
        [
            "rewrite map_map.",
            "VernacExtend",
            "ae8e13105f5289f0c1e44cbfa83eff3c6f47acee"
        ],
        [
            "rewrite map_map.",
            "VernacExtend",
            "ae8e13105f5289f0c1e44cbfa83eff3c6f47acee"
        ],
        [
            "rewrite map_concat_map.",
            "VernacExtend",
            "2368ebabb3b8c956fc88a96b5e2455ea193212b0"
        ],
        [
            "rewrite concat_concat.",
            "VernacExtend",
            "f8862e7d28d9a2e42058de3fdb291917ccd1744c"
        ],
        [
            "rewrite map_map.",
            "VernacExtend",
            "ae8e13105f5289f0c1e44cbfa83eff3c6f47acee"
        ],
        [
            "rewrite map_concat_map.",
            "VernacExtend",
            "2368ebabb3b8c956fc88a96b5e2455ea193212b0"
        ],
        [
            "rewrite concat_concat.",
            "VernacExtend",
            "f8862e7d28d9a2e42058de3fdb291917ccd1744c"
        ],
        [
            "rewrite map_map.",
            "VernacExtend",
            "ae8e13105f5289f0c1e44cbfa83eff3c6f47acee"
        ],
        [
            "apply Permutation_concatMap.",
            "VernacExtend",
            "af920d9c261847293d716c7499d275fb1db50eaa"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "unfold Basics.compose.",
            "VernacExtend",
            "3748eb7ed519ab0c506a05269af910ca26cf0994"
        ],
        [
            "rewrite map_concat_map.",
            "VernacExtend",
            "2368ebabb3b8c956fc88a96b5e2455ea193212b0"
        ],
        [
            "rewrite concat_concat.",
            "VernacExtend",
            "f8862e7d28d9a2e42058de3fdb291917ccd1744c"
        ],
        [
            "rewrite map_map.",
            "VernacExtend",
            "ae8e13105f5289f0c1e44cbfa83eff3c6f47acee"
        ],
        [
            "rewrite (map_ext (fun x0 => concat ((map (insert_everywhere a) \u2218 merges x) x0)) (concat \u2218 (map (insert_everywhere a) \u2218 merges x)))...",
            "VernacExtend",
            "ca5facb2654e90be0c58f22c6127d9555aaac32d"
        ],
        [
            "transitivity (concat (map (concat \u2218 map (merges x) \u2218 insert_everywhere a) (perms b))).",
            "VernacExtend",
            "074ddd2cc0fc7df80e4e59dc68cad7efc96461db"
        ],
        [
            "apply Permutation_concatMap.",
            "VernacExtend",
            "af920d9c261847293d716c7499d275fb1db50eaa"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "unfold Basics.compose.",
            "VernacExtend",
            "3748eb7ed519ab0c506a05269af910ca26cf0994"
        ],
        [
            "apply insert_everywhere_merges_commute.",
            "VernacExtend",
            "c96fe9fd96776c1b0aa29e9330d237cb5fc3d2ee"
        ],
        [
            "apply Permutation_sym.",
            "VernacExtend",
            "94262274c360805dd9834746f95363628f0dc4c6"
        ],
        [
            "rewrite <- (concat_product merges (perms b) (insert_everywhere a x)).",
            "VernacExtend",
            "34eb0984aff685589109bf4756d1b188ed067246"
        ],
        [
            "apply Permutation_concatMap.",
            "VernacExtend",
            "af920d9c261847293d716c7499d275fb1db50eaa"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "unfold Basics.compose.",
            "VernacExtend",
            "3748eb7ed519ab0c506a05269af910ca26cf0994"
        ],
        [
            "apply Permutation_sym.",
            "VernacExtend",
            "94262274c360805dd9834746f95363628f0dc4c6"
        ],
        [
            "rewrite <- insert_everywhere_merges_commute.",
            "VernacExtend",
            "23df61c987f289d717aa2ddd9e62dcc0719b2e4b"
        ],
        [
            "transitivity (concat (map (merges x0) (insert_everywhere a x))).",
            "VernacExtend",
            "ad9f514369c0133218131da884908cd2ae557b08"
        ],
        [
            "apply Permutation_sym.",
            "VernacExtend",
            "94262274c360805dd9834746f95363628f0dc4c6"
        ],
        [
            "rewrite <- insert_everywhere_merges_commute...",
            "VernacExtend",
            "6f6ad85e712aa5b8cfcf9ee216c671062d8a7b86"
        ],
        [
            "rewrite merges_sym...",
            "VernacExtend",
            "8ecc7fa510adf34b8fef3f905614803961abd5a9"
        ],
        [
            "apply Permutation_concatMap.",
            "VernacExtend",
            "af920d9c261847293d716c7499d275fb1db50eaa"
        ],
        [
            "intros...",
            "VernacExtend",
            "1056e51c2defbfe94d2032f9d7008334ba957959"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "rewrite map_map...",
            "VernacExtend",
            "54bd9d0e414f3b2ff9db90c1cdfd9d942ccce212"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "rewrite map_map...",
            "VernacExtend",
            "54bd9d0e414f3b2ff9db90c1cdfd9d942ccce212"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma filter_merges p (x y: list T): (forall z, In z x -> p z = true) -> (forall z, In z y -> p z = false) -> forall r, In r (map (filter p) (merges x y)) -> r = x.",
            "VernacStartTheoremProof",
            "aea8cc4d4d87468b46717956d0a8fd1b26b0e5db"
        ],
        [
            "Proof with auto.",
            "VernacProof",
            "a7e71b78b5628467da426641e148a0229b525f22"
        ],
        [
            "pattern x, y.",
            "VernacExtend",
            "272f327001a8d0e3e0cd933f7b7d19ab1381e89f"
        ],
        [
            "apply two_lists_rect.",
            "VernacExtend",
            "38d83fba2aa7f4bdd98174b313768639baa21601"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "rewrite merges_real_eq in H1.",
            "VernacExtend",
            "de2bed2e5349310361170ccdda270436e801fd1c"
        ],
        [
            "simpl in H1.",
            "VernacExtend",
            "8e8db7ad05fc7a69fb83eaedd7fb1e86ee74784d"
        ],
        [
            "intuition.",
            "VernacExtend",
            "ebd9388eeb482972743f9cce5cbddbd85ca5bdfd"
        ],
        [
            "subst.",
            "VernacExtend",
            "ccc9cb848804101be22a0bb6c324861981c5c7f1"
        ],
        [
            "apply (filter_none p x0)...",
            "VernacExtend",
            "56e2cf78ba14b77be65d98313b7e79e1dac3c172"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "rewrite merges_nil_r in H1.",
            "VernacExtend",
            "fe2a11acac1cb57670bc4e4fd8183c854798f934"
        ],
        [
            "simpl in H1.",
            "VernacExtend",
            "8e8db7ad05fc7a69fb83eaedd7fb1e86ee74784d"
        ],
        [
            "intuition.",
            "VernacExtend",
            "ebd9388eeb482972743f9cce5cbddbd85ca5bdfd"
        ],
        [
            "subst.",
            "VernacExtend",
            "ccc9cb848804101be22a0bb6c324861981c5c7f1"
        ],
        [
            "apply filter_all...",
            "VernacExtend",
            "0a7382a74b77da3a5f79228ef04150f53b7de289"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "rewrite merges_real_eq in H3.",
            "VernacExtend",
            "65bcbdbb5ffddc53c3e12951cade0aac4d309d55"
        ],
        [
            "rewrite map_app in H3.",
            "VernacExtend",
            "2f868b95e82aa4b540ffffdf68688424f8e3d625"
        ],
        [
            "repeat rewrite map_map in H3.",
            "VernacExtend",
            "6bbaa7bb0cd9fc69c8cd76e3a83588e078074c2b"
        ],
        [
            "apply in_app_or in H3.",
            "VernacExtend",
            "67d7f1b6c20942aa516ffc1ead4bb8cbcd9ceea1"
        ],
        [
            "simpl in H3.",
            "VernacExtend",
            "2a96f120ac764efacadc60b978d01343f60aafa0"
        ],
        [
            "destruct H3.",
            "VernacExtend",
            "1c0230aafd4a4c88f93d392a681d452fd6dea35e"
        ],
        [
            "rewrite H1 in H3.",
            "VernacExtend",
            "1a5bd25c47245138a7a03e032524fd4066f525ce"
        ],
        [
            "Focus 2.",
            "VernacFocus",
            "485d4f15aaf5c71ed130bd270976f9fc4e12a61f"
        ],
        [
            "left...",
            "VernacExtend",
            "bf4fd72477fff45e0940a41f06078165174dbd25"
        ],
        [
            "rewrite <- (map_map (filter p) (cons x0)) in H3.",
            "VernacExtend",
            "6416b621d31b485c1af8ee72469725c075845312"
        ],
        [
            "apply in_map_iff in H3.",
            "VernacExtend",
            "76a672fc299958798f1b525237b7369fceeb42f0"
        ],
        [
            "destruct H3.",
            "VernacExtend",
            "1c0230aafd4a4c88f93d392a681d452fd6dea35e"
        ],
        [
            "destruct H3.",
            "VernacExtend",
            "1c0230aafd4a4c88f93d392a681d452fd6dea35e"
        ],
        [
            "subst.",
            "VernacExtend",
            "ccc9cb848804101be22a0bb6c324861981c5c7f1"
        ],
        [
            "f_equal.",
            "VernacExtend",
            "dfce814d1efcef60f8330516ad88155a3a5ec317"
        ],
        [
            "apply H...",
            "VernacExtend",
            "e11f00a407e5296f27bbf4936af1a81bc964a46d"
        ],
        [
            "intuition.",
            "VernacExtend",
            "ebd9388eeb482972743f9cce5cbddbd85ca5bdfd"
        ],
        [
            "rewrite H2 in H3.",
            "VernacExtend",
            "009aed681b5bf7878390422291392aff7e71e42a"
        ],
        [
            "Focus 2.",
            "VernacFocus",
            "485d4f15aaf5c71ed130bd270976f9fc4e12a61f"
        ],
        [
            "left...",
            "VernacExtend",
            "bf4fd72477fff45e0940a41f06078165174dbd25"
        ],
        [
            "apply H0...",
            "VernacExtend",
            "8e32eae512d8ca08babd65a2984df82f5a26a9ad"
        ],
        [
            "intuition.",
            "VernacExtend",
            "ebd9388eeb482972743f9cce5cbddbd85ca5bdfd"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Instance length_merges_mor: Proper (on length eq ==> on length eq ==> on length eq) merges.",
            "VernacInstance",
            "3dda27a7deceb0fac251b570cc7f5ee4188bd5bb"
        ],
        [
            "Proof with auto.",
            "VernacProof",
            "a7e71b78b5628467da426641e148a0229b525f22"
        ],
        [
            "unfold on.",
            "VernacExtend",
            "af535c1aeeb97d0cc2590220451c9b0ba9b369cf"
        ],
        [
            "do 4 intro.",
            "VernacExtend",
            "f9fb059d7761e4197e62492b83edb74ab62c074d"
        ],
        [
            "generalize y H.",
            "VernacExtend",
            "ad9f146a78e58fc97de55e0c07cedacc0a612f89"
        ],
        [
            "clear y H.",
            "VernacExtend",
            "94e753770ae346b318bd2a2e061d11b32f8fb452"
        ],
        [
            "unfold merges at 1.",
            "VernacExtend",
            "cd767f6127ef1fdeb51b1a0790fd6643f81ba04b"
        ],
        [
            "destruct merges_ex.",
            "VernacExtend",
            "6a56d12033a0c0e833d1aaea47478921f9597a44"
        ],
        [
            "simpl in *.",
            "VernacExtend",
            "5f89d9715fcf9b11bc0d0aadc658e9b10c47b606"
        ],
        [
            "induction m; intros.",
            "VernacExtend",
            "ad78c67d3a9216bd0cba3419d43201d461ab0fe9"
        ],
        [
            "destruct y...",
            "VernacExtend",
            "a24117de001822d35b8bd0a9b5e60655521e9549"
        ],
        [
            "discriminate.",
            "VernacExtend",
            "66ca81b65e1a53372a2515fdfdd2a6b0677cb9c8"
        ],
        [
            "destruct y0.",
            "VernacExtend",
            "a3a6f42d097cc6cce10846a6ba4a82d8e10c953f"
        ],
        [
            "rewrite merges_nil_r...",
            "VernacExtend",
            "c5d56f955a6018f637d51c2927a6463a1910c57f"
        ],
        [
            "discriminate.",
            "VernacExtend",
            "66ca81b65e1a53372a2515fdfdd2a6b0677cb9c8"
        ],
        [
            "destruct y0.",
            "VernacExtend",
            "a3a6f42d097cc6cce10846a6ba4a82d8e10c953f"
        ],
        [
            "discriminate.",
            "VernacExtend",
            "66ca81b65e1a53372a2515fdfdd2a6b0677cb9c8"
        ],
        [
            "destruct y1.",
            "VernacExtend",
            "ca3e003b123960c686d2f929ee84a7dcbc2d09f0"
        ],
        [
            "discriminate.",
            "VernacExtend",
            "66ca81b65e1a53372a2515fdfdd2a6b0677cb9c8"
        ],
        [
            "inversion H.",
            "VernacExtend",
            "ee20838bdd77512b43142d655a3924bf07bffebb"
        ],
        [
            "inversion H0.",
            "VernacExtend",
            "38a13882efcff2ae2c6c07fc8055d56c6c1776f2"
        ],
        [
            "rewrite merges_real_eq.",
            "VernacExtend",
            "bb992c10517147d1c18ba08825110d59afbd9770"
        ],
        [
            "repeat rewrite app_length.",
            "VernacExtend",
            "ee077e629e2b4d6ec77d91a544c1a2ae4c739095"
        ],
        [
            "repeat rewrite map_length...",
            "VernacExtend",
            "d1318ca892f8ee75072fb200ffacea52008502e1"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma merges_ne_nil x y: merges x y <> nil.",
            "VernacStartTheoremProof",
            "1b795b23eb9978ed7c3e69bfc20e81de0dfa4a13"
        ],
        [
            "Proof with try discriminate; auto.",
            "VernacProof",
            "9a7717b1ff969da0c7f50d00032ac83c06362f0f"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "unfold merges.",
            "VernacExtend",
            "617d4e031188a5bab6ef161cfff350b67f325c73"
        ],
        [
            "destruct merges_ex.",
            "VernacExtend",
            "6a56d12033a0c0e833d1aaea47478921f9597a44"
        ],
        [
            "simpl in *.",
            "VernacExtend",
            "5f89d9715fcf9b11bc0d0aadc658e9b10c47b606"
        ],
        [
            "induction m...",
            "VernacExtend",
            "7976564363e4fb2c1eb959e320f407ccbf3fd10d"
        ],
        [
            "destruct r...",
            "VernacExtend",
            "89a36cd151bf9381165449ff200202661e3742c3"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "End splits_and_perms.",
            "VernacEndSegment",
            "dc8e48d4e9b63fd09626fb4bae903c5fe7fc84f2"
        ],
        [
            "Existing Instance Permutation_perms.",
            "VernacDeclareInstances",
            "ec5f49b1402056aad48f4d6bf2398b7508722514"
        ],
        [
            "Lemma map_repeat A B (f: A -> B) c (l: list A): (forall x, In x l -> f x = c) -> map f l = repeat (length l) c.",
            "VernacStartTheoremProof",
            "2cb8ca59601f469416613273fe8714ea45283508"
        ],
        [
            "Proof with auto.",
            "VernacProof",
            "a7e71b78b5628467da426641e148a0229b525f22"
        ],
        [
            "induction l...",
            "VernacExtend",
            "a4571710fc634c72b7b07ca630627ad571eee64e"
        ],
        [
            "simpl.",
            "VernacExtend",
            "1b93169f4cf876d207c1fab22a2347202ab48d85"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "rewrite IHl...",
            "VernacExtend",
            "a48c59a0d042c7310da6766246ef180a091c8386"
        ],
        [
            "rewrite H...",
            "VernacExtend",
            "2ded38871f6ef5ae4e687aa3245494ae541f7202"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma repeat_plus T (c: T) n m: repeat (n + m) c = repeat n c ++ repeat m c.",
            "VernacStartTheoremProof",
            "364b90453ce8856ee4d3330a517c7dabad2e7b48"
        ],
        [
            "induction n.",
            "VernacExtend",
            "7f3faa2a3277e3553406d09101130efcb1764494"
        ],
        [
            "auto.",
            "VernacExtend",
            "1f09da0addd069b3b65326f8c71967acc1e985af"
        ],
        [
            "simpl.",
            "VernacExtend",
            "1b93169f4cf876d207c1fab22a2347202ab48d85"
        ],
        [
            "congruence.",
            "VernacExtend",
            "d8c818f6cffeaee6a722a71acc77f2d6e5199eb9"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma concat_repeat T n m (c: T): concat (repeat n (repeat m c)) = repeat (n * m) c.",
            "VernacStartTheoremProof",
            "5cd5e3df1a5c15372463fff4ae4c4b69461ff52a"
        ],
        [
            "Proof with auto.",
            "VernacProof",
            "a7e71b78b5628467da426641e148a0229b525f22"
        ],
        [
            "induction n.",
            "VernacExtend",
            "7f3faa2a3277e3553406d09101130efcb1764494"
        ],
        [
            "auto.",
            "VernacExtend",
            "1f09da0addd069b3b65326f8c71967acc1e985af"
        ],
        [
            "simpl.",
            "VernacExtend",
            "1b93169f4cf876d207c1fab22a2347202ab48d85"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "rewrite IHn, repeat_plus...",
            "VernacExtend",
            "fbd59084a57f3f052403bd83589811d221c1c101"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma filter_perms T p (l: list T): Permutation (map (filter p) (perms l)) (concat (map (repeat (fact (length (filter (negb \u2218 p) l)) * length (merges (filter p l) (filter (negb \u2218 p) l)))) (perms (filter p l)))).",
            "VernacStartTheoremProof",
            "c38a6ae28490109366790ba66dcb0e9d2e2fa9d2"
        ],
        [
            "Proof with auto.",
            "VernacProof",
            "a7e71b78b5628467da426641e148a0229b525f22"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "rewrite (complementary_filter_perm p l) at 1.",
            "VernacExtend",
            "017c23b9835163a0d052902b1fa6e05aaede7330"
        ],
        [
            "rewrite perms_app.",
            "VernacExtend",
            "d8c4e1c05c7b45af0e6c96a768daad27d4766578"
        ],
        [
            "rewrite map_concat_map.",
            "VernacExtend",
            "2368ebabb3b8c956fc88a96b5e2455ea193212b0"
        ],
        [
            "unfold product.",
            "VernacExtend",
            "02e2bfd681775d904db158da999dea49db230b13"
        ],
        [
            "rewrite concatMap_concatMap'.",
            "VernacExtend",
            "290d1ce0097a7399e21e0b714c3cde9f5c2385ad"
        ],
        [
            "apply Permutation_concatMap.",
            "VernacExtend",
            "af920d9c261847293d716c7499d275fb1db50eaa"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "unfold Basics.compose.",
            "VernacExtend",
            "3748eb7ed519ab0c506a05269af910ca26cf0994"
        ],
        [
            "rewrite map_map.",
            "VernacExtend",
            "ae8e13105f5289f0c1e44cbfa83eff3c6f47acee"
        ],
        [
            "unfold uncurry.",
            "VernacExtend",
            "0bef0ada6fdb93ca419856d202eeda7b88fa63b2"
        ],
        [
            "simpl.",
            "VernacExtend",
            "1b93169f4cf876d207c1fab22a2347202ab48d85"
        ],
        [
            "set (t := repeat (length (merges x (filter (fun q => negb (p q)) l))) x).",
            "VernacExtend",
            "4d1c980969a338610038221cebcf3a38af3783d4"
        ],
        [
            "rewrite (@map_repeat _ _ (fun x0 : list T => map (filter p) (merges x x0)) t (perms (filter (fun x0 : T => negb (p x0)) l))).",
            "VernacExtend",
            "bd361f5bc754846e50ae1e489fc69bdc5cca3b83"
        ],
        [
            "rewrite length_perms.",
            "VernacExtend",
            "1b64bf560532f9f43e2b707fc5e38304fde127ca"
        ],
        [
            "subst t.",
            "VernacExtend",
            "9a338ade929583d1d9999c5f080f6e2c965d6617"
        ],
        [
            "rewrite concat_repeat.",
            "VernacExtend",
            "316e6e79d676798202a66582ba8c1c46788018ec"
        ],
        [
            "pose proof (Permutation_length (perms_are_perms _ _ H)).",
            "VernacExtend",
            "46972b9d742654542235701ebcfb08fa74e9f82f"
        ],
        [
            "rewrite (length_merges_mor H0 refl_equal)...",
            "VernacExtend",
            "c676f4e8842fbca9fe61856cc3e49ae3d8e48e44"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "rewrite (@map_repeat _ _ (filter p) x (merges x x0)).",
            "VernacExtend",
            "b4dc08e3d5a8be3e128f082c4cb00e6c7d1f89c5"
        ],
        [
            "subst t.",
            "VernacExtend",
            "9a338ade929583d1d9999c5f080f6e2c965d6617"
        ],
        [
            "pose proof (Permutation_length (perms_are_perms _ _ H0)).",
            "VernacExtend",
            "8141fd4cea2cb876e737c7816a783b1f5f8d930d"
        ],
        [
            "rewrite (length_merges_mor refl_equal H1)...",
            "VernacExtend",
            "92d931a4444fe1398bc5e17512c76b157e573e55"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "apply (filter_merges) with p x0...",
            "VernacExtend",
            "ef0583500ff4d5ba0d7cd536f96ccbc4aaa93c1e"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "apply (filter_In p z l)...",
            "VernacExtend",
            "5b51d82fd20cdfc46f2fac1e9815f5930d0e8cc3"
        ],
        [
            "apply Permutation_in with x...",
            "VernacExtend",
            "94cb7227167347c4cc79cdd305b42714742d7a32"
        ],
        [
            "apply perms_are_perms...",
            "VernacExtend",
            "4b4273e91830cbcd79a0a679317b8cd7d7d68150"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "pose proof (Permutation_in _ (perms_are_perms _ _ H0) H2).",
            "VernacExtend",
            "4cbdd8785e13a243d526833597fc6067fb3cd15e"
        ],
        [
            "cut (negb (p z) = true).",
            "VernacExtend",
            "9507326c1e8ba60f8380fc74178622598605555a"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "destruct (p z)...",
            "VernacExtend",
            "bfa821c1f72eb954715bd980c7e5b54e0ae42a15"
        ],
        [
            "apply (filter_In (fun q => negb (p q)) z l)...",
            "VernacExtend",
            "be408e4ee32e49b8d0e759c406c9012f62c4ae60"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Instance Permutation_length_morphism T: Proper (Permutation ==> eq) (@length T) := @Permutation_length T.",
            "VernacInstance",
            "19606974e13e32c06a4194e25b32df1a63228433"
        ],
        [
            "Lemma repeat_map_comm A B (f: A -> B) n: ext_eq (map f \u2218 repeat n) (repeat n \u2218 f).",
            "VernacStartTheoremProof",
            "eea47266e634cd26c984678ce7821345abe83c46"
        ],
        [
            "Proof with auto.",
            "VernacProof",
            "a7e71b78b5628467da426641e148a0229b525f22"
        ],
        [
            "unfold ext_eq.",
            "VernacExtend",
            "f220f29910675d48458da615036407ad227edc9f"
        ],
        [
            "unfold Basics.compose.",
            "VernacExtend",
            "3748eb7ed519ab0c506a05269af910ca26cf0994"
        ],
        [
            "induction n...",
            "VernacExtend",
            "f4e91834ebe52b029dc733006b913e328c979eda"
        ],
        [
            "simpl in *.",
            "VernacExtend",
            "5f89d9715fcf9b11bc0d0aadc658e9b10c47b606"
        ],
        [
            "congruence.",
            "VernacExtend",
            "d8c818f6cffeaee6a722a71acc77f2d6e5199eb9"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma length_repeat T (c: T) n: length (repeat n c) = n.",
            "VernacStartTheoremProof",
            "68fba0869ca72420ea0952bffc81ebb36d277080"
        ],
        [
            "Proof with auto.",
            "VernacProof",
            "a7e71b78b5628467da426641e148a0229b525f22"
        ],
        [
            "induction n...",
            "VernacExtend",
            "f4e91834ebe52b029dc733006b913e328c979eda"
        ],
        [
            "simpl.",
            "VernacExtend",
            "1b93169f4cf876d207c1fab22a2347202ab48d85"
        ],
        [
            "congruence.",
            "VernacExtend",
            "d8c818f6cffeaee6a722a71acc77f2d6e5199eb9"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Hint Immediate length_repeat.",
            "VernacHints",
            "6f0cbd32f8dcb37c9d3c12a67eeec5af72330ede"
        ],
        [
            "Instance map_ext_eq_mor A B: Proper (@ext_eq A B ==> ext_eq) map.",
            "VernacInstance",
            "4b7fde2b00806c90ab44f28213094600185c9584"
        ],
        [
            "repeat intro.",
            "VernacExtend",
            "b1b5d9b3004bf4634299c208df98406e88278608"
        ],
        [
            "apply map_ext.",
            "VernacExtend",
            "d650e1a07594e03fb46b651b28db84dff21ba943"
        ],
        [
            "assumption.",
            "VernacExtend",
            "41f0308313ff87e6ab2782f90d6021ec4b55d932"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma concat_nil X (l: list (list X)): (forall x, In x l -> x = nil) -> concat l = nil.",
            "VernacStartTheoremProof",
            "17cfad73816acffe84559e4d9452972f80fabff1"
        ],
        [
            "Proof with intuition.",
            "VernacProof",
            "9d7dd018a025ee77d546c146ed0932559cdd889e"
        ],
        [
            "induction l...",
            "VernacExtend",
            "a4571710fc634c72b7b07ca630627ad571eee64e"
        ],
        [
            "simpl.",
            "VernacExtend",
            "1b93169f4cf876d207c1fab22a2347202ab48d85"
        ],
        [
            "rewrite IHl...",
            "VernacExtend",
            "a48c59a0d042c7310da6766246ef180a091c8386"
        ],
        [
            "rewrite (H a)...",
            "VernacExtend",
            "7de36d025572f52c356bfe15b11627d71cda2ba8"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma empty_nil X (x: list X): length x = 0%nat -> x = nil.",
            "VernacStartTheoremProof",
            "162dd7c514422dbdaad15d7a75151bb3d8f98264"
        ],
        [
            "destruct x.",
            "VernacExtend",
            "24973a7b5353196d2d5bd2a7e0fe5cfacd5f4460"
        ],
        [
            "reflexivity.",
            "VernacExtend",
            "5cd1ae044f26cd6d89a5a5147c1d4fc5fc719d83"
        ],
        [
            "intro.",
            "VernacExtend",
            "3999be354c758ba0d1866e0fcc78a7288779a224"
        ],
        [
            "discriminate.",
            "VernacExtend",
            "66ca81b65e1a53372a2515fdfdd2a6b0677cb9c8"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma Permuted_Permutation_map T U (R: relation T) (f: T -> U): (forall x y, R x y -> f x = f y) -> forall a b, Permuted R a b -> Permutation (map f a) (map f b).",
            "VernacStartTheoremProof",
            "bf344e62466c216ccc206c16da99421584366566"
        ],
        [
            "Proof with auto.",
            "VernacProof",
            "a7e71b78b5628467da426641e148a0229b525f22"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "induction H0...",
            "VernacExtend",
            "043af2054c90a68527290e44d4e027fc29ff59b4"
        ],
        [
            "simpl.",
            "VernacExtend",
            "1b93169f4cf876d207c1fab22a2347202ab48d85"
        ],
        [
            "rewrite (H x x')...",
            "VernacExtend",
            "160ce8d11cc58ad1c12692dcf92737836f890d6f"
        ],
        [
            "eauto.",
            "VernacExtend",
            "d5f3a05ca887c29bb0b422fc64ae2775fea3935e"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma elemsR_length A (R: A -> A -> Prop) a b (H: elemsR R a b): length a = length b.",
            "VernacStartTheoremProof",
            "9ec40d944c7ac5ba563edfedfadefb8e727de764"
        ],
        [
            "Proof with auto.",
            "VernacProof",
            "a7e71b78b5628467da426641e148a0229b525f22"
        ],
        [
            "induction H...",
            "VernacExtend",
            "9d0908bd383114f831825f49a508b957b979db71"
        ],
        [
            "simpl.",
            "VernacExtend",
            "1b93169f4cf876d207c1fab22a2347202ab48d85"
        ],
        [
            "intuition.",
            "VernacExtend",
            "ebd9388eeb482972743f9cce5cbddbd85ca5bdfd"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma elemsRimpl A B (R: A -> B -> Prop) (l: list A): (forall x, In x l -> sig (R x)) -> sig (elemsR R l).",
            "VernacStartTheoremProof",
            "c3c064eb7c8caa116af2581d5bfe6cdf74d1dd06"
        ],
        [
            "Proof with intuition; eauto.",
            "VernacProof",
            "818b81e7c1d30d0ba6c1f5fbacdd207fa00dcc2b"
        ],
        [
            "induction l...",
            "VernacExtend",
            "a4571710fc634c72b7b07ca630627ad571eee64e"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "destruct IHl...",
            "VernacExtend",
            "322611ec8bc8e751c8e3c8a8be38d5bdec839160"
        ],
        [
            "destruct (X a)...",
            "VernacExtend",
            "3425bd6ebc8af79a6ab4bce3cd2d5976a40d3c72"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma elemsRuniq A B (R: A -> B -> Prop) (l: list A): (forall x, In x l -> forall y, R x y -> forall y', R x y' -> y = y') -> forall r, elemsR R l r -> forall r', elemsR R l r' -> r = r'.",
            "VernacStartTheoremProof",
            "51f92130f5472c4141b6cdc681c14e1fdf8bacbe"
        ],
        [
            "Proof with intuition; auto.",
            "VernacProof",
            "f3adff8ae51a93cb8cd58573b1d358c62344063d"
        ],
        [
            "induction l.",
            "VernacExtend",
            "1194af70832939708f8c7fde2f18f81c37b97a0c"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "inversion_clear H0.",
            "VernacExtend",
            "e21f851b9423020c7f22dae666bca7829c9b1967"
        ],
        [
            "inversion_clear H1...",
            "VernacExtend",
            "daf2ba2f42c9f4b484982f30e63b9e05659d2b99"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "inversion_clear H0.",
            "VernacExtend",
            "e21f851b9423020c7f22dae666bca7829c9b1967"
        ],
        [
            "inversion_clear H1.",
            "VernacExtend",
            "1443921cbef97c67d0bd87bf517b302257ed5b28"
        ],
        [
            "rewrite (H a) with b b0...",
            "VernacExtend",
            "23b366c38f883961cd3ce4ecf8ab121385312010"
        ],
        [
            "rewrite IHl with l' l'0...",
            "VernacExtend",
            "8638cd53a46a583a03c08a240b5c5fb2b9473248"
        ],
        [
            "apply H with x...",
            "VernacExtend",
            "083d36cb8b934e39441e71acde8c7a507fa7fc21"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Definition triple0 A B C (t: A * B * C): A := fst (fst t).",
            "VernacDefinition",
            "7574b756d1a22068c4e10f8062642897e87182f9"
        ],
        [
            "Definition triple1 A B C (t: A * B * C): B := snd (fst t).",
            "VernacDefinition",
            "4f79148794a787d0cb8b5967c28e1e3c85d708b0"
        ],
        [
            "Definition triple2 A B C (t: A * B * C): C := snd t.",
            "VernacDefinition",
            "e860037de0af819cebbafc4e5941ee0f056be5ae"
        ],
        [
            "Fixpoint rsplits T (l: list T): list (list T * T * list T) := match l with | nil => nil | h :: t => (nil, h, t) :: map (fun p => (h :: triple0 p, triple1 p, triple2 p)) (rsplits t) end.",
            "VernacFixpoint",
            "0429f5eb807124f034527aaf73c3d878521a23f4"
        ],
        [
            "Lemma splits_rsplits (T: Set) (l: list T): splits l = map (fun p => (triple1 p, triple0 p ++ triple2 p)) (rsplits l).",
            "VernacStartTheoremProof",
            "d0f7eef9c1e950395693089dde970b5299ec3960"
        ],
        [
            "Proof with auto.",
            "VernacProof",
            "a7e71b78b5628467da426641e148a0229b525f22"
        ],
        [
            "induction l...",
            "VernacExtend",
            "a4571710fc634c72b7b07ca630627ad571eee64e"
        ],
        [
            "simpl.",
            "VernacExtend",
            "1b93169f4cf876d207c1fab22a2347202ab48d85"
        ],
        [
            "rewrite map_map.",
            "VernacExtend",
            "ae8e13105f5289f0c1e44cbfa83eff3c6f47acee"
        ],
        [
            "simpl.",
            "VernacExtend",
            "1b93169f4cf876d207c1fab22a2347202ab48d85"
        ],
        [
            "rewrite IHl.",
            "VernacExtend",
            "d4d0cebbb161cf1462b69fd1ed2d76db253a98c6"
        ],
        [
            "clear IHl.",
            "VernacExtend",
            "8bbd9602dc9b79bb59ead5a20fa2e5495ddfe01a"
        ],
        [
            "unfold triple1.",
            "VernacExtend",
            "5dadbc8f868d7d0994ca65cc64f4b363469b7f4e"
        ],
        [
            "simpl.",
            "VernacExtend",
            "1b93169f4cf876d207c1fab22a2347202ab48d85"
        ],
        [
            "rewrite map_map.",
            "VernacExtend",
            "ae8e13105f5289f0c1e44cbfa83eff3c6f47acee"
        ],
        [
            "simpl...",
            "VernacExtend",
            "504f71dca671c3e66b68ade966c1b4804373be90"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma insert_everywhere_rsplits (T: Set) (x: T) (l: list T): insert_everywhere x l = map (fun x0 => triple0 x0 ++ x :: triple1 x0 :: triple2 x0) (rsplits l) ++ [l ++ [x]].",
            "VernacStartTheoremProof",
            "3978b191fd79e211a4ab88dd6ad10b35fe3d0c35"
        ],
        [
            "Proof with auto.",
            "VernacProof",
            "a7e71b78b5628467da426641e148a0229b525f22"
        ],
        [
            "induction l...",
            "VernacExtend",
            "a4571710fc634c72b7b07ca630627ad571eee64e"
        ],
        [
            "simpl.",
            "VernacExtend",
            "1b93169f4cf876d207c1fab22a2347202ab48d85"
        ],
        [
            "rewrite IHl.",
            "VernacExtend",
            "d4d0cebbb161cf1462b69fd1ed2d76db253a98c6"
        ],
        [
            "clear IHl.",
            "VernacExtend",
            "8bbd9602dc9b79bb59ead5a20fa2e5495ddfe01a"
        ],
        [
            "unfold triple0, triple1, triple2.",
            "VernacExtend",
            "e7e24c6f5ef0192fb39972b4aafc18b5b22a2b3b"
        ],
        [
            "repeat rewrite map_map.",
            "VernacExtend",
            "6397a4a7eaae25ec9feb2125289f70c2e88a3940"
        ],
        [
            "rewrite map_app.",
            "VernacExtend",
            "89eca143edf6436bb079a40b9fedf852073d1711"
        ],
        [
            "rewrite map_map...",
            "VernacExtend",
            "54bd9d0e414f3b2ff9db90c1cdfd9d942ccce212"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma elemsR_map': forall (A B: Type) (Ra: relation A) (Rb: relation B) (f : A -> B) (fR: forall x y, Ra x y -> Rb (f x) (f y)) (l l': list A), elemsR Ra l l' -> elemsR Rb (map f l) (map f l').",
            "VernacStartTheoremProof",
            "0194c2639a346f4d501e912f948bf861ff107838"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "induction H; simpl; auto...",
            "VernacExtend",
            "89136288d66137c492ed4c9348ad9176ef016d9b"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Instance Permutation_cons_morphism A: Proper (eq ==> Permutation ==> Permutation) (@cons A).",
            "VernacInstance",
            "554d3f66a7b482cba856ca027d42fac2742d1822"
        ],
        [
            "Proof with auto.",
            "VernacProof",
            "a7e71b78b5628467da426641e148a0229b525f22"
        ],
        [
            "repeat intro.",
            "VernacExtend",
            "b1b5d9b3004bf4634299c208df98406e88278608"
        ],
        [
            "subst...",
            "VernacExtend",
            "b907a93c53d5c34384373e3aac13eba90f0a4fdc"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma concatMap_insert_everywhere T (x: T) (l: list (list T)): Permutation (concat (map (insert_everywhere x) l)) (map (cons x) l ++ concat (map (tail \u2218 insert_everywhere x) l)).",
            "VernacStartTheoremProof",
            "99cfdb00d5b50d1fd52c9072590a90a2885b2ae0"
        ],
        [
            "Proof with auto.",
            "VernacProof",
            "a7e71b78b5628467da426641e148a0229b525f22"
        ],
        [
            "induction l...",
            "VernacExtend",
            "a4571710fc634c72b7b07ca630627ad571eee64e"
        ],
        [
            "simpl @concat.",
            "VernacExtend",
            "0213ea327190c679e03acc65a75abb56a39a1946"
        ],
        [
            "rewrite IHl.",
            "VernacExtend",
            "d4d0cebbb161cf1462b69fd1ed2d76db253a98c6"
        ],
        [
            "apply Permutation_sym.",
            "VernacExtend",
            "94262274c360805dd9834746f95363628f0dc4c6"
        ],
        [
            "rewrite Permutation_app_swap.",
            "VernacExtend",
            "f0a5c37f78763485bc4c49403cf7ca4ed6a0aabd"
        ],
        [
            "unfold compose.",
            "VernacExtend",
            "d80e23bf133762584228beafbd8610d99d5d02d5"
        ],
        [
            "simpl.",
            "VernacExtend",
            "1b93169f4cf876d207c1fab22a2347202ab48d85"
        ],
        [
            "rewrite app_ass.",
            "VernacExtend",
            "1e8737a155ba47802e4df29a56a47a094af2082d"
        ],
        [
            "generalize (concat (map (fun x0 : list T => tail (insert_everywhere x x0)) l)).",
            "VernacExtend",
            "2db20dd85c1ee92501a9c9fb8d47ec61f7a1d6c1"
        ],
        [
            "intro.",
            "VernacExtend",
            "3999be354c758ba0d1866e0fcc78a7288779a224"
        ],
        [
            "rewrite (Permutation_app_swap l0).",
            "VernacExtend",
            "f0f9a4555998765439666c2be3e9aeb72dffe395"
        ],
        [
            "rewrite <- app_ass.",
            "VernacExtend",
            "01fe27f1934651fa211feca2b08097e840f7a3e9"
        ],
        [
            "rewrite <- app_ass.",
            "VernacExtend",
            "01fe27f1934651fa211feca2b08097e840f7a3e9"
        ],
        [
            "apply Permutation_app...",
            "VernacExtend",
            "b9c50e90add58137d2b36f1b1e53abfd4b30cd57"
        ],
        [
            "destruct a...",
            "VernacExtend",
            "9abfdb646f5edc10fb83b356cc5d6bea069ea43b"
        ],
        [
            "simpl.",
            "VernacExtend",
            "1b93169f4cf876d207c1fab22a2347202ab48d85"
        ],
        [
            "rewrite Permutation_app_swap.",
            "VernacExtend",
            "f0a5c37f78763485bc4c49403cf7ca4ed6a0aabd"
        ],
        [
            "simpl.",
            "VernacExtend",
            "1b93169f4cf876d207c1fab22a2347202ab48d85"
        ],
        [
            "apply perm_skip.",
            "VernacExtend",
            "88d9c437306dbe4b5a3f0f8693d406682ecdb8a8"
        ],
        [
            "apply Permutation_app_swap.",
            "VernacExtend",
            "849a44b721ebf9f100d040f7b723e63968aea6f4"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma map_length_filter_permuted_splits T (l l': list T): Permutation l l' -> forall p, Permutation (map (fun x => length (filter (p (fst x)) (snd x))) (splits l)) (map (fun x => length (filter (p (fst x)) (snd x))) (splits l')).",
            "VernacStartTheoremProof",
            "ca1170397710b32df5c622f49991703b1988780c"
        ],
        [
            "Proof with auto.",
            "VernacProof",
            "a7e71b78b5628467da426641e148a0229b525f22"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "apply (@Permuted_Permutation_map (T * list T) nat (fun x y => fst x = fst y /\\ Permutation (snd x) (snd y)) (fun x => length (filter (p (fst x)) (snd x)))).",
            "VernacExtend",
            "cc464e7c997c57951f40059e18b6a762aa989ced"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "destruct H0.",
            "VernacExtend",
            "5c8f6cb3dc303d56935d6ec271a1de04f6790225"
        ],
        [
            "destruct x.",
            "VernacExtend",
            "24973a7b5353196d2d5bd2a7e0fe5cfacd5f4460"
        ],
        [
            "destruct y.",
            "VernacExtend",
            "fbeb4c3b73b2f0e6bfc89563d7f3b824ea0ea309"
        ],
        [
            "simpl in H0.",
            "VernacExtend",
            "a4a6a8421870dbf7255f8d031744eec32f12a941"
        ],
        [
            "subst.",
            "VernacExtend",
            "ccc9cb848804101be22a0bb6c324861981c5c7f1"
        ],
        [
            "simpl.",
            "VernacExtend",
            "1b93169f4cf876d207c1fab22a2347202ab48d85"
        ],
        [
            "simpl in H1.",
            "VernacExtend",
            "8e8db7ad05fc7a69fb83eaedd7fb1e86ee74784d"
        ],
        [
            "rewrite H1...",
            "VernacExtend",
            "ea2378a230b97c3935b9ba0f0107ca3d47b65218"
        ],
        [
            "apply splits_permuted...",
            "VernacExtend",
            "1befb38ca9d64b0455c397bfd87e7e631026ff98"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma perms_alt_perms T (l: list T): Permutation (perms l) (alt_perms l).",
            "VernacStartTheoremProof",
            "03f9d0f4d75de180e8c35123dfac30e8b384d486"
        ],
        [
            "Proof with auto.",
            "VernacProof",
            "a7e71b78b5628467da426641e148a0229b525f22"
        ],
        [
            "unfold alt_perms.",
            "VernacExtend",
            "4e2ae0cb733853b4551702f756e2e9ca5a00c837"
        ],
        [
            "induction l...",
            "VernacExtend",
            "a4571710fc634c72b7b07ca630627ad571eee64e"
        ],
        [
            "simpl.",
            "VernacExtend",
            "1b93169f4cf876d207c1fab22a2347202ab48d85"
        ],
        [
            "unfold Basics.compose.",
            "VernacExtend",
            "3748eb7ed519ab0c506a05269af910ca26cf0994"
        ],
        [
            "rewrite concatMap_insert_everywhere.",
            "VernacExtend",
            "5bb6d10e2d2f617f6d246960682e6f35c6b922f2"
        ],
        [
            "apply Permutation_app...",
            "VernacExtend",
            "b9c50e90add58137d2b36f1b1e53abfd4b30cd57"
        ],
        [
            "rewrite IHl.",
            "VernacExtend",
            "d4d0cebbb161cf1462b69fd1ed2d76db253a98c6"
        ],
        [
            "clear IHl.",
            "VernacExtend",
            "8bbd9602dc9b79bb59ead5a20fa2e5495ddfe01a"
        ],
        [
            "destruct l...",
            "VernacExtend",
            "963fc99ea720efd97229633d63f4328017299f89"
        ],
        [
            "rewrite map_concat.",
            "VernacExtend",
            "15aca30d7fa832da3533a8177a9ff8f7526a9751"
        ],
        [
            "rewrite map_map.",
            "VernacExtend",
            "ae8e13105f5289f0c1e44cbfa83eff3c6f47acee"
        ],
        [
            "generalize (splits (t :: l)).",
            "VernacExtend",
            "b68a215bd44df43fecfcb8d69334b60801554e70"
        ],
        [
            "intro.",
            "VernacExtend",
            "3999be354c758ba0d1866e0fcc78a7288779a224"
        ],
        [
            "setoid_rewrite map_map.",
            "VernacExtend",
            "fda9bbed17d75f66a2ae12e10edd32f52a4a0ca3"
        ],
        [
            "unfold compose.",
            "VernacExtend",
            "d80e23bf133762584228beafbd8610d99d5d02d5"
        ],
        [
            "rewrite concat_concat.",
            "VernacExtend",
            "f8862e7d28d9a2e42058de3fdb291917ccd1744c"
        ],
        [
            "rewrite map_map.",
            "VernacExtend",
            "ae8e13105f5289f0c1e44cbfa83eff3c6f47acee"
        ],
        [
            "simpl @fst.",
            "VernacExtend",
            "78ac36cecc4798cc1bec15bd5d4b5623d1e3c6da"
        ],
        [
            "simpl @snd.",
            "VernacExtend",
            "d887e1ab056d16793c772721e2bfe3c034fb79f2"
        ],
        [
            "simpl.",
            "VernacExtend",
            "1b93169f4cf876d207c1fab22a2347202ab48d85"
        ],
        [
            "unfold compose.",
            "VernacExtend",
            "d80e23bf133762584228beafbd8610d99d5d02d5"
        ],
        [
            "setoid_rewrite map_concat.",
            "VernacExtend",
            "0e01edd754185259e9215e0d641259aaaefd0b2e"
        ],
        [
            "setoid_rewrite map_map...",
            "VernacExtend",
            "8c92306a521173f6fafb702f92e9f331d6477e68"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma map_single A B (f: A -> B) x: map f [x] = [f x].",
            "VernacStartTheoremProof",
            "d4c7cc869ed4b9f683c622f277aca434c021810e"
        ],
        [
            "reflexivity.",
            "VernacExtend",
            "5cd1ae044f26cd6d89a5a5147c1d4fc5fc719d83"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ]
    ],
    "proofs": [
        {
            "name": "length_filter_le",
            "line_nb": 72,
            "steps": [
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "rewrite length_filter.",
                        "VernacExtend",
                        "dd942f2f237fd3b0772b5ef3c557fa84c8bd4dec"
                    ]
                },
                {
                    "command": [
                        "apply count_le.",
                        "VernacExtend",
                        "7f3631e7658c0bb967ca2d0fc1e90cb90a3e5c9b"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "In_filter",
            "line_nb": 85,
            "steps": [
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "destruct (filter_In p t l).",
                        "VernacExtend",
                        "d31a5d31257d12e831bd94393e358692871b10ab"
                    ]
                },
                {
                    "command": [
                        "apply H2; auto.",
                        "VernacExtend",
                        "30acbf5144f9dcdba4f738b81d251d83daba847e"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "incl_trans",
            "line_nb": 97,
            "steps": [
                {
                    "command": [
                        "do 5 intro.",
                        "VernacExtend",
                        "5882c01058e2f22843a818f2c078e897f42dd1c5"
                    ]
                },
                {
                    "command": [
                        "apply H0.",
                        "VernacExtend",
                        "c75b3371fc84f2aae811de7e80b1bdb43e4d249a"
                    ]
                },
                {
                    "command": [
                        "apply H.",
                        "VernacExtend",
                        "4b47b71ad0f800d57cbdc591d68949e07decb540"
                    ]
                },
                {
                    "command": [
                        "assumption.",
                        "VernacExtend",
                        "41f0308313ff87e6ab2782f90d6021ec4b55d932"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "In_map_inv",
            "line_nb": 121,
            "steps": [
                {
                    "command": [
                        "induction l; firstorder.",
                        "VernacExtend",
                        "5e2a7afa3776c43af5271ec38d2e5ccf98ad1f2c"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "In_Permutation",
            "line_nb": 125,
            "steps": [
                {
                    "command": [
                        "repeat intro.",
                        "VernacExtend",
                        "b1b5d9b3004bf4634299c208df98406e88278608"
                    ]
                },
                {
                    "command": [
                        "pose proof (Permutation_in).",
                        "VernacExtend",
                        "f732d7560a84ee8cea3f6b76463857aab10ca2e4"
                    ]
                },
                {
                    "command": [
                        "pose proof (Permutation_sym).",
                        "VernacExtend",
                        "32ab4886e7aa48392ecfc533b9734be9b550d634"
                    ]
                },
                {
                    "command": [
                        "firstorder.",
                        "VernacExtend",
                        "ceb9f57e98a5f5a73ee421cf30fd2f4f09432d14"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "Permutation_incl",
            "line_nb": 142,
            "steps": [
                {
                    "command": [
                        "induction 1; firstorder.",
                        "VernacExtend",
                        "337c059385204a3fa165df5fd0e68b6d1f78cb49"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "pointwise_eq_refl",
            "line_nb": 161,
            "steps": [
                {
                    "command": [
                        "reflexivity.",
                        "VernacExtend",
                        "5cd1ae044f26cd6d89a5a5147c1d4fc5fc719d83"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "count_perm_simple",
            "line_nb": 165,
            "steps": [
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "apply count_perm.",
                        "VernacExtend",
                        "45ab1dc7f35fbe85b81e51983e8a3441a92ed7de"
                    ]
                },
                {
                    "command": [
                        "auto.",
                        "VernacExtend",
                        "1f09da0addd069b3b65326f8c71967acc1e985af"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "incl_in",
            "line_nb": 219,
            "steps": [
                {
                    "command": [
                        "auto.",
                        "VernacExtend",
                        "1f09da0addd069b3b65326f8c71967acc1e985af"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "incl_In",
            "line_nb": 222,
            "steps": [
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "apply H0.",
                        "VernacExtend",
                        "c75b3371fc84f2aae811de7e80b1bdb43e4d249a"
                    ]
                },
                {
                    "command": [
                        "assumption.",
                        "VernacExtend",
                        "41f0308313ff87e6ab2782f90d6021ec4b55d932"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "map_cons",
            "line_nb": 264,
            "steps": [
                {
                    "command": [
                        "auto.",
                        "VernacExtend",
                        "1f09da0addd069b3b65326f8c71967acc1e985af"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "In_filter_inv",
            "line_nb": 433,
            "steps": [
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "destruct (filter_In f x l).",
                        "VernacExtend",
                        "9a2528183bdad164a5af1c9914f150a8860014b9"
                    ]
                },
                {
                    "command": [
                        "apply H0.",
                        "VernacExtend",
                        "c75b3371fc84f2aae811de7e80b1bdb43e4d249a"
                    ]
                },
                {
                    "command": [
                        "assumption.",
                        "VernacExtend",
                        "41f0308313ff87e6ab2782f90d6021ec4b55d932"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "length_ne_0_ne_nil",
            "line_nb": 474,
            "steps": [
                {
                    "command": [
                        "destruct l.",
                        "VernacExtend",
                        "a4218804e377a0d685aafec59adbc3652d543b9c"
                    ]
                },
                {
                    "command": [
                        "auto.",
                        "VernacExtend",
                        "1f09da0addd069b3b65326f8c71967acc1e985af"
                    ]
                },
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "discriminate.",
                        "VernacExtend",
                        "66ca81b65e1a53372a2515fdfdd2a6b0677cb9c8"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "elemsR_le_S",
            "line_nb": 500,
            "steps": [
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "induction H; simpl; auto with arith.",
                        "VernacExtend",
                        "8d04b9d1aad97df1c901e879efd9579955b75c70"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "elemsR_map",
            "line_nb": 504,
            "steps": [
                {
                    "command": [
                        "induction l; simpl; intuition.",
                        "VernacExtend",
                        "47d610d97b48f19ded5222f607b02b95ae68d2a2"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "elemsR_impl",
            "line_nb": 514,
            "steps": [
                {
                    "command": [
                        "induction l; intros; inversion_clear H0; auto.",
                        "VernacExtend",
                        "2dbe61ebf4f9a0e0293a11e172e3528cc004a6e5"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "permuted_refl",
            "line_nb": 522,
            "steps": [
                {
                    "command": [
                        "induction l; auto.",
                        "VernacExtend",
                        "6df74a097ee826dbbeb45167e7678377d4e52265"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "elemsR_permuted",
            "line_nb": 526,
            "steps": [
                {
                    "command": [
                        "induction l in l' |- *; intros; inversion_clear H; auto.",
                        "VernacExtend",
                        "b8ce2ea80bc9fc4bd6a1b3b5a2471f897156bfab"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "map_map_comp",
            "line_nb": 540,
            "steps": [
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "rewrite map_map.",
                        "VernacExtend",
                        "ae8e13105f5289f0c1e44cbfa83eff3c6f47acee"
                    ]
                },
                {
                    "command": [
                        "reflexivity.",
                        "VernacExtend",
                        "5cd1ae044f26cd6d89a5a5147c1d4fc5fc719d83"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "concat_map_singleton",
            "line_nb": 545,
            "steps": [
                {
                    "command": [
                        "induction l.",
                        "VernacExtend",
                        "1194af70832939708f8c7fde2f18f81c37b97a0c"
                    ]
                },
                {
                    "command": [
                        "intuition.",
                        "VernacExtend",
                        "ebd9388eeb482972743f9cce5cbddbd85ca5bdfd"
                    ]
                },
                {
                    "command": [
                        "simpl.",
                        "VernacExtend",
                        "1b93169f4cf876d207c1fab22a2347202ab48d85"
                    ]
                },
                {
                    "command": [
                        "congruence.",
                        "VernacExtend",
                        "d8c818f6cffeaee6a722a71acc77f2d6e5199eb9"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "Permuted_map",
            "line_nb": 557,
            "steps": [
                {
                    "command": [
                        "repeat intro.",
                        "VernacExtend",
                        "b1b5d9b3004bf4634299c208df98406e88278608"
                    ]
                },
                {
                    "command": [
                        "induction H; simpl; eauto.",
                        "VernacExtend",
                        "3e34232306d179f345b2251c60993578b9edd155"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "concat_map_nil",
            "line_nb": 575,
            "steps": [
                {
                    "command": [
                        "induction l; auto.",
                        "VernacExtend",
                        "6df74a097ee826dbbeb45167e7678377d4e52265"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "wf_R",
            "line_nb": 615,
            "steps": [
                {
                    "command": [
                        "apply well_founded_pairs; apply well_founded_ltof.",
                        "VernacExtend",
                        "448a7eaeb40471d2c149671f5064d677e4208da6"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "app_Permutation_mor",
            "line_nb": 636,
            "steps": [
                {
                    "command": [
                        "repeat intro.",
                        "VernacExtend",
                        "b1b5d9b3004bf4634299c208df98406e88278608"
                    ]
                },
                {
                    "command": [
                        "apply Permutation_app; assumption.",
                        "VernacExtend",
                        "b48d989eab06ed95f2f863f4527f4f574b84c5d6"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "length_in_splits",
            "line_nb": 722,
            "steps": [
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "apply splits_are_perms in H.",
                        "VernacExtend",
                        "39bd0d283217af6882be67725fc6f5f384d4fb01"
                    ]
                },
                {
                    "command": [
                        "exact (Permutation_length H).",
                        "VernacExtend",
                        "b81cb20a01c304ef6f5e5812b26bc38d046f3215"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "merges_ex_obligation_4",
            "line_nb": 849,
            "steps": [
                {
                    "command": [
                        "unfold me.",
                        "VernacExtend",
                        "9ae8fd203592ff7eefcc8673388be08ca372f3ce"
                    ]
                },
                {
                    "command": [
                        "simpl.",
                        "VernacExtend",
                        "1b93169f4cf876d207c1fab22a2347202ab48d85"
                    ]
                },
                {
                    "command": [
                        "omega.",
                        "VernacExtend",
                        "32c6c865d255452c7e10c77111456d1981cede39"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "merges_ex_obligation_5",
            "line_nb": 854,
            "steps": [
                {
                    "command": [
                        "repeat destruct_call merges_ex; auto.",
                        "VernacExtend",
                        "c7f3d11b827a916ac723612ff5c3358f4b20cf57"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "repeat_plus",
            "line_nb": 1181,
            "steps": [
                {
                    "command": [
                        "induction n.",
                        "VernacExtend",
                        "7f3faa2a3277e3553406d09101130efcb1764494"
                    ]
                },
                {
                    "command": [
                        "auto.",
                        "VernacExtend",
                        "1f09da0addd069b3b65326f8c71967acc1e985af"
                    ]
                },
                {
                    "command": [
                        "simpl.",
                        "VernacExtend",
                        "1b93169f4cf876d207c1fab22a2347202ab48d85"
                    ]
                },
                {
                    "command": [
                        "congruence.",
                        "VernacExtend",
                        "d8c818f6cffeaee6a722a71acc77f2d6e5199eb9"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "map_ext_eq_mor",
            "line_nb": 1250,
            "steps": [
                {
                    "command": [
                        "repeat intro.",
                        "VernacExtend",
                        "b1b5d9b3004bf4634299c208df98406e88278608"
                    ]
                },
                {
                    "command": [
                        "apply map_ext.",
                        "VernacExtend",
                        "d650e1a07594e03fb46b651b28db84dff21ba943"
                    ]
                },
                {
                    "command": [
                        "assumption.",
                        "VernacExtend",
                        "41f0308313ff87e6ab2782f90d6021ec4b55d932"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "empty_nil",
            "line_nb": 1262,
            "steps": [
                {
                    "command": [
                        "destruct x.",
                        "VernacExtend",
                        "24973a7b5353196d2d5bd2a7e0fe5cfacd5f4460"
                    ]
                },
                {
                    "command": [
                        "reflexivity.",
                        "VernacExtend",
                        "5cd1ae044f26cd6d89a5a5147c1d4fc5fc719d83"
                    ]
                },
                {
                    "command": [
                        "intro.",
                        "VernacExtend",
                        "3999be354c758ba0d1866e0fcc78a7288779a224"
                    ]
                },
                {
                    "command": [
                        "discriminate.",
                        "VernacExtend",
                        "66ca81b65e1a53372a2515fdfdd2a6b0677cb9c8"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "elemsR_map'",
            "line_nb": 1330,
            "steps": [
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "induction H; simpl; auto...",
                        "VernacExtend",
                        "89136288d66137c492ed4c9348ad9176ef016d9b"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "map_single",
            "line_nb": 1403,
            "steps": [
                {
                    "command": [
                        "reflexivity.",
                        "VernacExtend",
                        "5cd1ae044f26cd6d89a5a5147c1d4fc5fc719d83"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        }
    ]
}