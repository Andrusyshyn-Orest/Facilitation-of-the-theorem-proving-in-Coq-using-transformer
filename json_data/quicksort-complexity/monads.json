{
    "filename": "monads.v",
    "coq_project": "quicksort-complexity",
    "vernac_cmds": [
        [
            "Global Set Automatic Coercions Import.",
            "VernacSetOption",
            "94c85307196a35bac6e1f82fcbcc4d98c9b268b2"
        ],
        [
            "Set Implicit Arguments.",
            "VernacSetOption",
            "9e84ff8896f028601d8aded48c1d4aebe60aa584"
        ],
        [
            "Require Import List.",
            "VernacRequire",
            "d9bcce4a390afeb160107bf87c6f7abe3d82c6d6"
        ],
        [
            "Require Import list_utils.",
            "VernacRequire",
            "f5ce54076a68b3ca9f48d4de158eadf0961b9e1f"
        ],
        [
            "Require Import util.",
            "VernacRequire",
            "4430f87d7649f96d1418f130d57967666d56d84f"
        ],
        [
            "Record Monad: Type := { mon:> Set -> Set ; bind: forall a b, mon a -> (a -> mon b) -> mon b ; ret: forall (a: Set), a -> mon a ; mon_lunit: forall (a b: Set) (x: a) (f: a -> mon b), bind (ret x) f = f x ; mon_runit: forall (a: Set) (f: mon a), bind f (@ret a) = f ; mon_assoc: forall a b c (n: mon a) (f: a -> mon b) (g: b -> mon c), bind (bind n f) g = bind n (fun x => bind (f x) g) }.",
            "VernacInductive",
            "64cbacd1f1d4b57ad887e1d6fcf81fbda9558ebc"
        ],
        [
            "Arguments bind [m a b].",
            "VernacArguments",
            "43e500d26b1c44da5f8a39a6f31bfcca4bfd1de7"
        ],
        [
            "Arguments ret {m a}.",
            "VernacArguments",
            "36ce27d6664a1c41f5dd93ebb5d4388d0e37541b"
        ],
        [
            "Notation \"x >>= y\" := (bind x y) (at level 55).",
            "VernacNotation",
            "aeb758602a45fba3f92cb13263f78bb868ce7638"
        ],
        [
            "Notation \"x >> y\" := (bind x (fun _ => y)) (at level 30, right associativity).",
            "VernacNotation",
            "662f4904e1a8a26715a525e4527985f8fe5173a0"
        ],
        [
            "Notation \"x <- y ; z\" := (bind y (fun x : _ => z)) (at level 30, right associativity).",
            "VernacNotation",
            "09ec6395f979b8ef97cfc67180a4085949573a02"
        ],
        [
            "Record Functor: Type := { func: Set -> Set ; func_map: forall (a b: Set) (f: a -> b), func a -> func b ; func_id: forall (X: Set), func_map (fun (x: X) => x) = (fun (x: func X) => x) ; func_assoc: forall (a b c: Set) (x: func a) (f: b -> c) (g: a -> b), func_map (f \u2218 g) x = func_map f (func_map g x) }.",
            "VernacInductive",
            "2b6a9ae0968e96ac26678d95b1e95299fc4b5374"
        ],
        [
            "Arguments func_map [f a b].",
            "VernacArguments",
            "ee8d39b8b1c8ec56f010255c00bf091ca0ebae08"
        ],
        [
            "Definition extMonad (M: Monad): Prop := forall (A B: Set) (f g: A -> M B), ext_eq f g -> forall x, bind x f = bind x g.",
            "VernacDefinition",
            "f02729fb8686420d0a323dcde77fc4378780d6fb"
        ],
        [
            "Lemma bind_eqq (M: Monad) (e: extMonad M) (A B: Set) (m n: M A) (f g: A -> M B): m = n -> ext_eq f g -> (m >>= f) = (n >>= g).",
            "VernacStartTheoremProof",
            "bfdba08cac58a52e72b2217f2650b9b2a92a3d09"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "subst.",
            "VernacExtend",
            "ccc9cb848804101be22a0bb6c324861981c5c7f1"
        ],
        [
            "apply e.",
            "VernacExtend",
            "7e471e9a67d7e270fc9d49b2286b43a098cffb1d"
        ],
        [
            "assumption.",
            "VernacExtend",
            "41f0308313ff87e6ab2782f90d6021ec4b55d932"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Definition extFlipped (M: Monad): extMonad M -> forall A (x: M A) (B: Set) (f g: A -> M B), ext_eq f g -> bind x f = bind x g.",
            "VernacDefinition",
            "22a15b14a409e62ae1ea73a28fd44e1a8377d6e5"
        ],
        [
            "auto.",
            "VernacExtend",
            "1f09da0addd069b3b65326f8c71967acc1e985af"
        ],
        [
            "Defined.",
            "VernacEndProof",
            "88c0be54a50df4bb90276c075406fe442428eb9c"
        ],
        [
            "Lemma mon_lunit_under_bind (M: Monad) (A B C: Set) (a: M A) (b: A -> B) (f: A -> B -> M C): extMonad M -> (x <- a ; (ret (b x) >>= f x)) = (x <- a ; f x (b x)).",
            "VernacStartTheoremProof",
            "f0edf158363d081d1521c9cb6157b01461d5f0ca"
        ],
        [
            "Proof with auto.",
            "VernacProof",
            "a7e71b78b5628467da426641e148a0229b525f22"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "apply H.",
            "VernacExtend",
            "4b47b71ad0f800d57cbdc591d68949e07decb540"
        ],
        [
            "intro.",
            "VernacExtend",
            "3999be354c758ba0d1866e0fcc78a7288779a224"
        ],
        [
            "apply mon_lunit.",
            "VernacExtend",
            "3699567dfc80f0986674740c9d9c618722d6914f"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Section MonadFunctor.",
            "VernacBeginSection",
            "53013248f28e1dd3ee719773f0799bc45962907e"
        ],
        [
            "Variable M: Monad.",
            "VernacAssumption",
            "115add36d9ac4e803c7dfc9a7b04674e74e752ec"
        ],
        [
            "Definition bind_map (a b: Set) (f: a -> b) (x: M a): M b := xv <- x ; ret (f xv).",
            "VernacDefinition",
            "f1699528c05c3fccd59ea004d9c95c560487f71f"
        ],
        [
            "Hypothesis f_ext_eq: forall A B (f g: A -> B), (forall x, f x = g x) -> f = g.",
            "VernacAssumption",
            "b627595e317e71ff87a260e967a958bf202d0a41"
        ],
        [
            "Lemma eta A B (f: A -> B): (fun x => f x) = f.",
            "VernacStartTheoremProof",
            "3eb10203616bc22d7367b64d4426cdeac1c8f5b8"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "apply f_ext_eq.",
            "VernacExtend",
            "051c52c43d92c974bc62aa5c647c71a1d0effa93"
        ],
        [
            "auto.",
            "VernacExtend",
            "1f09da0addd069b3b65326f8c71967acc1e985af"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Definition MonadFunctor: Functor.",
            "VernacDefinition",
            "ff73a0aa58bee86b22fb45d6aef3713d503771aa"
        ],
        [
            "Proof with auto.",
            "VernacProof",
            "a7e71b78b5628467da426641e148a0229b525f22"
        ],
        [
            "apply (Build_Functor M bind_map).",
            "VernacExtend",
            "a4b85dbbfcb07fb20cccf82833f22051505822a2"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "apply f_ext_eq.",
            "VernacExtend",
            "051c52c43d92c974bc62aa5c647c71a1d0effa93"
        ],
        [
            "intro.",
            "VernacExtend",
            "3999be354c758ba0d1866e0fcc78a7288779a224"
        ],
        [
            "unfold bind_map.",
            "VernacExtend",
            "ab6a1050bf396e84e169fcec5c98c3143fd74cdf"
        ],
        [
            "rewrite (eta (@ret M X)).",
            "VernacExtend",
            "2817af5e67cf6a3b56ce51b36c989696eacfa277"
        ],
        [
            "apply mon_runit.",
            "VernacExtend",
            "8c61656f152add06892b2d47ab2b6a74b12293f8"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "unfold bind_map.",
            "VernacExtend",
            "ab6a1050bf396e84e169fcec5c98c3143fd74cdf"
        ],
        [
            "unfold compose.",
            "VernacExtend",
            "d80e23bf133762584228beafbd8610d99d5d02d5"
        ],
        [
            "rewrite mon_assoc.",
            "VernacExtend",
            "d525e32fea8e3519575d67077c59f2480695ca2d"
        ],
        [
            "replace (fun xv: a => ret (m:=M) (f (g xv))) with (fun x0: a => bind (m:=M) (b:=c) (ret (m:=M) (g x0)) (fun xv: b => ret (m:=M) (f xv)))...",
            "VernacExtend",
            "32388deaebab1c79974c095e8e70f8da168b8932"
        ],
        [
            "apply f_ext_eq.",
            "VernacExtend",
            "051c52c43d92c974bc62aa5c647c71a1d0effa93"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "rewrite mon_lunit...",
            "VernacExtend",
            "ac3c4852fc1f918bb9f382f1efdae4b08be6677d"
        ],
        [
            "Defined.",
            "VernacEndProof",
            "88c0be54a50df4bb90276c075406fe442428eb9c"
        ],
        [
            "Definition a_monad_isa_functor T (x: M T): func MonadFunctor T := x.",
            "VernacDefinition",
            "77d0ed044f5b7c531344dfb770e307c24c78bc64"
        ],
        [
            "End MonadFunctor.",
            "VernacEndSegment",
            "5f4c8dbdd89866b6923cc52c42cbea89e6fa1f8f"
        ],
        [
            "Module IdMonad.",
            "VernacDefineModule",
            "7227d3d0da7cdd4a442198a8b30db21469a86108"
        ],
        [
            "Definition C (s: Set): Set := s.",
            "VernacDefinition",
            "a2cd77c33a45b83b1935f2b70ba39741a729bd3f"
        ],
        [
            "Definition bind A B (x: C A) (y: A -> C B): C B := y x.",
            "VernacDefinition",
            "6ccbb69b8f985a7e2787db3c7ae4fbcf791995a0"
        ],
        [
            "Definition ret (A: Set) (x: A): C A := x.",
            "VernacDefinition",
            "11c08df8d1ff7ca2aacd1f37abccc8a8ca80b135"
        ],
        [
            "Definition M: Monad.",
            "VernacDefinition",
            "b2788c2f9e5d1df7a594573eea5983dbaaac3fba"
        ],
        [
            "apply (Build_Monad C bind ret); auto.",
            "VernacExtend",
            "4bdeda833c9dc76df0bb116b428d43b5a64723aa"
        ],
        [
            "Defined.",
            "VernacEndProof",
            "88c0be54a50df4bb90276c075406fe442428eb9c"
        ],
        [
            "Coercion id_isa_monad A (a: C A): M A := a.",
            "VernacDefinition",
            "6801ba38e7805dfb572013c813cf7e84d2e0bde3"
        ],
        [
            "Lemma ext: extMonad M.",
            "VernacStartTheoremProof",
            "85b265541c0416066dd064029e82100114d16e58"
        ],
        [
            "compute.",
            "VernacExtend",
            "7a532ab38e33f38a5daf661f4883cc26dfdfdef7"
        ],
        [
            "auto.",
            "VernacExtend",
            "1f09da0addd069b3b65326f8c71967acc1e985af"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "End IdMonad.",
            "VernacEndSegment",
            "5bea63e130bbff34157185141c01102d1ac50b21"
        ],
        [
            "Unset Elimination Schemes.",
            "VernacUnsetOption",
            "4d234cd3b6f71aa059ae1f499612aad67477dab3"
        ],
        [
            "Inductive Tree (A: Set): Set := | Leaf: A -> Tree A | Node: list (Tree A) -> Tree A.",
            "VernacInductive",
            "170dfea4bff6e8e8880cf1dbeaa97b8f99b0fd26"
        ],
        [
            "Set Elimination Schemes.",
            "VernacSetOption",
            "9b6e063f1120f1f70865635a7510d0d8704e68a4"
        ],
        [
            "Definition Tree_ind : forall (A: Set) (P : Tree A -> Prop), (forall n : A, P (Leaf n)) -> (forall l : list (Tree A), (forall t, In t l -> P t) -> P (Node l)) -> forall t, P t.",
            "VernacDefinition",
            "c0a4f17b17a18f331186906d36a38dea68fb3431"
        ],
        [
            "Proof with auto.",
            "VernacProof",
            "a7e71b78b5628467da426641e148a0229b525f22"
        ],
        [
            "intros A P Hbase Hrcd.",
            "VernacExtend",
            "3e59aba800d045bdbc80751dd7c98a2c5a414403"
        ],
        [
            "refine (fix IH (t:Tree A) {struct t} : P t := _).",
            "VernacExtend",
            "dedc9012eb88a1ff855e4e106d3463249604a3d9"
        ],
        [
            "case t; intros.",
            "VernacExtend",
            "b5febdfe3e3930562d9fd4a02f4d1d9ce46047f1"
        ],
        [
            "apply Hbase.",
            "VernacExtend",
            "6e5c1b2545a32e8183657394be77f2cd899afce4"
        ],
        [
            "apply Hrcd.",
            "VernacExtend",
            "e0cb6ffca8e0a478953215c40cd7b8f45317ed2c"
        ],
        [
            "induction l.",
            "VernacExtend",
            "1194af70832939708f8c7fde2f18f81c37b97a0c"
        ],
        [
            "simpl.",
            "VernacExtend",
            "1b93169f4cf876d207c1fab22a2347202ab48d85"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "contradiction.",
            "VernacExtend",
            "9b6a5c45e1144cbbccd544effb2a97082518704a"
        ],
        [
            "simpl.",
            "VernacExtend",
            "1b93169f4cf876d207c1fab22a2347202ab48d85"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "destruct H.",
            "VernacExtend",
            "8b2bca015429da94c456243b461e17a2a0582c40"
        ],
        [
            "subst t0.",
            "VernacExtend",
            "a1acf8f9b7fe9435e5d7163682e6a5a2ae9e970f"
        ],
        [
            "apply IH.",
            "VernacExtend",
            "88103d45393d3ee3ab547447d913543854db8cea"
        ],
        [
            "apply IHl.",
            "VernacExtend",
            "af412c6009bba78f939aa53ab07dcd1baaf5888b"
        ],
        [
            "assumption.",
            "VernacExtend",
            "41f0308313ff87e6ab2782f90d6021ec4b55d932"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Section MonadToys.",
            "VernacBeginSection",
            "c48afda5069d012b5f4b3eda03935aaae7b4359d"
        ],
        [
            "Definition liftM (A B: Set) (f: A -> B) (M: Monad) (x: M A): M B := xv <- x ; ret (f xv).",
            "VernacDefinition",
            "072e64421dfedab3e0457dbd5149da5ce9b5af35"
        ],
        [
            "Definition liftM2 (A B C: Set) (f: A -> B -> C) (M: Monad) (x: M A) (y: M B): M C := xv <- x ; yv <- y ; ret (f xv yv).",
            "VernacDefinition",
            "516240dfe692d805f98d704ad60b89b81c37bf7e"
        ],
        [
            "Fixpoint foldlM {A B: Set} {M: Monad} (f: A -> B -> M A) (x: A) (l: list B) {struct l}: M A := match l with | nil => ret x | h :: t => fax <- f x h ; foldlM f fax t end.",
            "VernacFixpoint",
            "80a498f0a2a0b5f148c1df860796d2a0fade99ff"
        ],
        [
            "Fixpoint foldrM {A B: Set} {M: Monad} (f: B -> A -> M A) (x: A) (l: list B) {struct l}: M A := match l with | nil => ret x | h :: t => t' <- foldrM f x t; f h t' end.",
            "VernacFixpoint",
            "3cb924e15af64dabd28f70483b7de416cfd2d95d"
        ],
        [
            "Lemma foldlM_cons (A B: Set) (M: Monad) (f: A -> B -> M A) (x: A) (h: B) (t: list B): foldlM f x (h :: t) = fax <- f x h ; foldlM f fax t.",
            "VernacStartTheoremProof",
            "e2ba91f77a007cd2c204486abd17ba4b396d30f0"
        ],
        [
            "auto.",
            "VernacExtend",
            "1f09da0addd069b3b65326f8c71967acc1e985af"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Fixpoint filterM {A: Set} {M: Monad} (p: A -> M bool) (l: list A): M (list A) := match l with | nil => ret nil | h :: t => b <- p h ; t' <- filterM p t ; ret (if b then h :: t' else t') end.",
            "VernacFixpoint",
            "9ad49f492ff80be2489802fb8755ecc2d42e7f7e"
        ],
        [
            "Lemma filterM_id (A: Set) (p: A -> IdMonad.M bool) (l: list A): filter p l = filterM p l.",
            "VernacStartTheoremProof",
            "ecf78645c64dc2cfa424d1ad77932821669861f3"
        ],
        [
            "Proof with auto.",
            "VernacProof",
            "a7e71b78b5628467da426641e148a0229b525f22"
        ],
        [
            "induction l...",
            "VernacExtend",
            "a4571710fc634c72b7b07ca630627ad571eee64e"
        ],
        [
            "simpl.",
            "VernacExtend",
            "1b93169f4cf876d207c1fab22a2347202ab48d85"
        ],
        [
            "rewrite IHl...",
            "VernacExtend",
            "a48c59a0d042c7310da6766246ef180a091c8386"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "End MonadToys.",
            "VernacEndSegment",
            "a1b54400e9397ad3d2514a73a94f0552bed0f990"
        ],
        [
            "Arguments liftM [A B] _ [M].",
            "VernacArguments",
            "3a39e023ec7f2036775cffc757079d4743f3cbdc"
        ],
        [
            "Record MonadTrans: Type := { transMonad: forall (m: Monad), extMonad m -> Monad ; lift: forall (m: Monad) (e: extMonad m) (A: Set), m A -> transMonad e A }.",
            "VernacInductive",
            "1260159575f240f3274825e55c0d672e22b9e414"
        ]
    ],
    "proofs": [
        {
            "name": "bind_eqq",
            "line_nb": 14,
            "steps": [
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "subst.",
                        "VernacExtend",
                        "ccc9cb848804101be22a0bb6c324861981c5c7f1"
                    ]
                },
                {
                    "command": [
                        "apply e.",
                        "VernacExtend",
                        "7e471e9a67d7e270fc9d49b2286b43a098cffb1d"
                    ]
                },
                {
                    "command": [
                        "assumption.",
                        "VernacExtend",
                        "41f0308313ff87e6ab2782f90d6021ec4b55d932"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "extFlipped",
            "line_nb": 20,
            "steps": [
                {
                    "command": [
                        "auto.",
                        "VernacExtend",
                        "1f09da0addd069b3b65326f8c71967acc1e985af"
                    ]
                },
                {
                    "command": [
                        "Defined.",
                        "VernacEndProof",
                        "88c0be54a50df4bb90276c075406fe442428eb9c"
                    ]
                }
            ]
        },
        {
            "name": "eta",
            "line_nb": 34,
            "steps": [
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "apply f_ext_eq.",
                        "VernacExtend",
                        "051c52c43d92c974bc62aa5c647c71a1d0effa93"
                    ]
                },
                {
                    "command": [
                        "auto.",
                        "VernacExtend",
                        "1f09da0addd069b3b65326f8c71967acc1e985af"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "M",
            "line_nb": 63,
            "steps": [
                {
                    "command": [
                        "apply (Build_Monad C bind ret); auto.",
                        "VernacExtend",
                        "4bdeda833c9dc76df0bb116b428d43b5a64723aa"
                    ]
                },
                {
                    "command": [
                        "Defined.",
                        "VernacEndProof",
                        "88c0be54a50df4bb90276c075406fe442428eb9c"
                    ]
                }
            ]
        },
        {
            "name": "ext",
            "line_nb": 67,
            "steps": [
                {
                    "command": [
                        "compute.",
                        "VernacExtend",
                        "7a532ab38e33f38a5daf661f4883cc26dfdfdef7"
                    ]
                },
                {
                    "command": [
                        "auto.",
                        "VernacExtend",
                        "1f09da0addd069b3b65326f8c71967acc1e985af"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "foldlM_cons",
            "line_nb": 99,
            "steps": [
                {
                    "command": [
                        "auto.",
                        "VernacExtend",
                        "1f09da0addd069b3b65326f8c71967acc1e985af"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        }
    ]
}