{
    "filename": "FroundMult.v",
    "coq_project": "float",
    "vernac_cmds": [
        [
            "Require Export FroundProp.",
            "VernacRequire",
            "cb23e6736c1e6a10c079cd2b6d2e66062c4f8426"
        ],
        [
            "Section FRoundP.",
            "VernacBeginSection",
            "03d9e3e0fff802aff28fdb045d5ce94913cbb42e"
        ],
        [
            "Variable b : Fbound.",
            "VernacAssumption",
            "17a11c003f49f819b8cb809f61b140702916486d"
        ],
        [
            "Variable radix : Z.",
            "VernacAssumption",
            "2349b77d134e0c9bb013a8bdca0020ca16fc023b"
        ],
        [
            "Variable precision : nat.",
            "VernacAssumption",
            "2235bc83b7ebf4cbe373b5fa3b4f3c643d454130"
        ],
        [
            "Let FtoRradix := FtoR radix.",
            "VernacDefinition",
            "5aa29a9595c6e9e03b28c6d232299552ec761ad7"
        ],
        [
            "Coercion FtoRradix : float >-> R.",
            "VernacCoercion",
            "028c338fbad0cd7087bf0b6e1e412562a515c140"
        ],
        [
            "Hypothesis radixMoreThanOne : (1 < radix)%Z.",
            "VernacAssumption",
            "f4d3774b2275f4c4c3af941091d4d99f9a2129aa"
        ],
        [
            "Let radixMoreThanZERO := Zlt_1_O _ (Zlt_le_weak _ _ radixMoreThanOne).",
            "VernacDefinition",
            "b73ccff345a4fc730c8134dcd05adb7f1928fae7"
        ],
        [
            "Hint Resolve radixMoreThanZERO: zarith.",
            "VernacHints",
            "5a4a320eb610749621ef38850390d7141dc0d330"
        ],
        [
            "Hypothesis precisionGreaterThanOne : 1 < precision.",
            "VernacAssumption",
            "9f627fb385d8fe283ac9563556925f37be8e5402"
        ],
        [
            "Hypothesis pGivesBound : Zpos (vNum b) = Zpower_nat radix precision.",
            "VernacAssumption",
            "d558f967d87d2a42d14158ac115b10c6f5358430"
        ],
        [
            "Theorem errorBoundedMultMin : forall p q fmin : float, Fbounded b p -> Fbounded b q -> (0 <= p)%R -> (0 <= q)%R -> (- dExp b <= Fexp p + Fexp q)%Z -> isMin b radix (p * q) fmin -> exists r : float, r = (p * q - fmin)%R :>R /\\ Fbounded b r /\\ Fexp r = (Fexp p + Fexp q)%Z.",
            "VernacStartTheoremProof",
            "7b50534fc77150dc0867c6a4c0f6fd4893feeafd"
        ],
        [
            "intros p q fmin Fp Fq H' H'0 H'1 H'2.",
            "VernacExtend",
            "d5c3458cc8f98cf78b26f193a776fa68d3b31d8c"
        ],
        [
            "cut (0 <= Fnum p * Fnum q)%Z; [ intros multPos | apply Zle_mult_gen; apply (LeR0Fnum radix); auto with arith ].",
            "VernacExtend",
            "5ee73c00a5a327d94842b246c34588f45936f499"
        ],
        [
            "cut (ex (fun m : Z => FtoRradix fmin = Float m (Fexp (Fmult p q)))).",
            "VernacExtend",
            "cfb3bbce7a76cd282ad32e3b19b4fa84b40c71b1"
        ],
        [
            "2: unfold FtoRradix in |- *; apply RoundedModeRep with (b := b) (precision := precision) (P := isMin b radix); auto.",
            "VernacExtend",
            "684b16eaee5b9f4129d44e444c2e9baaf650885e"
        ],
        [
            "2: apply MinRoundedModeP with (precision := precision); auto.",
            "VernacExtend",
            "eeb2baabc32e3e6f042b3179f479b78b4e189589"
        ],
        [
            "2: rewrite (Fmult_correct radix); auto with zarith.",
            "VernacExtend",
            "d14386c55b12cee51f126bf6a2172c5a30a1b865"
        ],
        [
            "intros H'3; elim H'3; intros m E; clear H'3.",
            "VernacExtend",
            "34628fe794cbc9bc93b7a375593df84eba2f2382"
        ],
        [
            "exists (Fminus radix (Fmult p q) (Float m (Fexp (Fmult p q)))).",
            "VernacExtend",
            "4bc56ae38bc6174fe9075296d580d6e9b86b9d9f"
        ],
        [
            "split.",
            "VernacExtend",
            "55abc140132bd88981001ac656020469a8d503eb"
        ],
        [
            "rewrite E; unfold FtoRradix in |- *; repeat rewrite Fminus_correct; repeat rewrite Fmult_correct; auto with zarith.",
            "VernacExtend",
            "41285eb125e3c95688ae18c5ae17c48bc64200e4"
        ],
        [
            "split.",
            "VernacExtend",
            "55abc140132bd88981001ac656020469a8d503eb"
        ],
        [
            "cut (fmin <= Fmult p q)%R; [ idtac | unfold FtoRradix in |- *; rewrite Fmult_correct; auto; case H'2; auto with real zarith; (intros H1 H2; case H2; auto with zarith) ].",
            "VernacExtend",
            "c412c1cda84b038ff9c22f0086a98bcb40822833"
        ],
        [
            "rewrite E; unfold Fmult, Fminus, Fopp, Fplus in |- *; simpl in |- *; auto.",
            "VernacExtend",
            "ddfa93a17079b492559c74a56a4c8a6aa634d6f3"
        ],
        [
            "repeat rewrite Zmin_n_n; repeat rewrite <- Zminus_diag_reverse; auto.",
            "VernacExtend",
            "6b8aead5e34ff8e0d670d5306bd5dc0d7bae2670"
        ],
        [
            "simpl in |- *; repeat rewrite Zpower_nat_O; repeat rewrite Zmult_1_r.",
            "VernacExtend",
            "492d67c300fa1a6fc0a703c896c59917569a6328"
        ],
        [
            "unfold FtoRradix, FtoR in |- *; simpl in |- *.",
            "VernacExtend",
            "85a3da1582165d92ceb7faef707de88822bccf1a"
        ],
        [
            "intros H'3; (cut (m <= Fnum p * Fnum q)%Z; [ idtac | apply le_IZR; apply Rmult_le_reg_l with (r := powerRZ radix (Fexp p + Fexp q)); auto with real zarith; repeat rewrite (Rmult_comm (powerRZ radix (Fexp p + Fexp q))); auto with zarith ]); intros H'4.",
            "VernacExtend",
            "ea0571fb7106ed05cfc944f533066e906d7f072c"
        ],
        [
            "repeat split; simpl in |- *; auto.",
            "VernacExtend",
            "97b9bb1ad314872d8fe8b9227ae914c2ea53cbea"
        ],
        [
            "case (ZquotientProp (Fnum p * Fnum q) (Zpower_nat radix precision)); auto with zarith.",
            "VernacExtend",
            "d9c31b121dae0a6bcb6085dba5d355d214a45644"
        ],
        [
            "intros x (H'5, (H'6, H'7)).",
            "VernacExtend",
            "3299cd351fd0d3374024247b65cb83c7de121da6"
        ],
        [
            "cut (Zquotient (Fnum p * Fnum q) (Zpower_nat radix precision) * powerRZ radix (precision + (Fexp p + Fexp q)) <= fmin)%R; [ rewrite E; intros H'8 | idtac ].",
            "VernacExtend",
            "e7418f8a044a9a05a34f1ecc48935734fe2ea85f"
        ],
        [
            "cut (Zquotient (Fnum p * Fnum q) (Zpower_nat radix precision) * powerRZ radix precision <= m)%R; [ intros H'9 | idtac ].",
            "VernacExtend",
            "f403d1e8df86789a3fd920b44591113a6cdebd50"
        ],
        [
            "rewrite Zabs_eq; auto with zarith.",
            "VernacExtend",
            "e3b6647506c6d43441146989691d7c27f1722b7e"
        ],
        [
            "apply Zle_lt_trans with x; auto.",
            "VernacExtend",
            "1a47e1c4a8ed58c61aaeccd33ff891ff4a5978ff"
        ],
        [
            "replace x with (Fnum p * Fnum q + - (Zquotient (Fnum p * Fnum q) (Zpower_nat radix precision) * Zpower_nat radix precision))%Z.",
            "VernacExtend",
            "65c843a3ffed6f62e99ddfa37317d56565810f2d"
        ],
        [
            "apply Zplus_le_compat_l; auto.",
            "VernacExtend",
            "9eb68fad41eeaa14b7a46951f5cb85f096d80d97"
        ],
        [
            "apply Zle_Zopp.",
            "VernacExtend",
            "4116fffd3d82e798294ccbceb07ce04df95b160a"
        ],
        [
            "apply le_IZR; auto.",
            "VernacExtend",
            "5ddae610de44a290611008bca1b760849106ddb9"
        ],
        [
            "rewrite Rmult_IZR.",
            "VernacExtend",
            "b795c3b06d24e235dcd0b237a976408f905ddd8d"
        ],
        [
            "rewrite Zpower_nat_Z_powerRZ; auto with zarith.",
            "VernacExtend",
            "35cc44a7c1b7dd11b2e4a7cfedbdffda021e9bc1"
        ],
        [
            "pattern (Fnum p * Fnum q)%Z at 1 in |- *; rewrite H'5; ring.",
            "VernacExtend",
            "58a455381c208fdb5ed691e89f5f8cd53bc664b0"
        ],
        [
            "rewrite pGivesBound.",
            "VernacExtend",
            "a0663579a8c1e026e4139f9de2213b856a6f5f6f"
        ],
        [
            "rewrite <- (Zabs_eq (Zpower_nat radix precision)); auto with zarith.",
            "VernacExtend",
            "4e49bb6fe881c0cb3d35c6b30f64795e1e44efd0"
        ],
        [
            "apply Zlt_Zabs_inv2; auto.",
            "VernacExtend",
            "3ae5a4c46de812a2c157a61df1794099e5eb97f0"
        ],
        [
            "apply Rmult_le_reg_l with (r := powerRZ radix (Fexp p + Fexp q)); auto with real zarith.",
            "VernacExtend",
            "5971af691e4f9dc4b31ebfe12bc924bb23bd370a"
        ],
        [
            "repeat rewrite (Rmult_comm (powerRZ radix (Fexp p + Fexp q))); auto.",
            "VernacExtend",
            "3fed49496c73d5959c98174ebe72a8c2685c9046"
        ],
        [
            "rewrite Rmult_assoc; rewrite <- powerRZ_add; auto with real zarith.",
            "VernacExtend",
            "19ddab8e6795561b7a0200abde2d905e689d6c3b"
        ],
        [
            "case (FboundedMbound _ radixMoreThanOne b precision) with (z := (precision + (Fexp p + Fexp q))%Z) (m := Zquotient (Fnum p * Fnum q) (Zpower_nat radix precision)); auto with zarith.",
            "VernacExtend",
            "fcb99998f94fe0751eb39bbbcb79e2b69b674f7a"
        ],
        [
            "apply Zmult_le_reg_r with (p := Zpower_nat radix precision); auto with zarith.",
            "VernacExtend",
            "53864c0372480d2a3a0d1798f8115279c551f5c6"
        ],
        [
            "apply Zlt_gt; auto with zarith.",
            "VernacExtend",
            "e4740f81454b5bebf9859686e2a5cd74c0d86c71"
        ],
        [
            "pattern (Zpower_nat radix precision) at 2 in |- *; rewrite <- (fun x => Zabs_eq (Zpower_nat radix x)).",
            "VernacExtend",
            "65a47e5467bb361b42330478468d1fcbad374fb8"
        ],
        [
            "rewrite <- Zabs_Zmult.",
            "VernacExtend",
            "f7fc6414388fe397677ae7ff4791672389a0bb6d"
        ],
        [
            "apply Zle_trans with (1 := H'6); auto with zarith.",
            "VernacExtend",
            "570d4452c4e5938e180b2e25ef8bf859b021997f"
        ],
        [
            "rewrite Zabs_Zmult.",
            "VernacExtend",
            "f459c70d0601b9eab86bcf62dfb70a911d8ba871"
        ],
        [
            "apply Zle_trans with (Zpower_nat radix precision * Zabs (Fnum q))%Z.",
            "VernacExtend",
            "f06e0bfd0a077c73e063ff6004160fdc0ad07678"
        ],
        [
            "apply Zle_Zmult_comp_r; auto with zarith.",
            "VernacExtend",
            "6df3ad18f4910f873061ef6fd03b5647e45f11b6"
        ],
        [
            "apply Zlt_le_weak; rewrite <- pGivesBound; case Fp; auto with float.",
            "VernacExtend",
            "038800b6a2264c39f3617037472b8e2118bca582"
        ],
        [
            "apply Zle_Zmult_comp_l; auto with zarith.",
            "VernacExtend",
            "0a442d3268531835feca11bf21b34ab2eb26341b"
        ],
        [
            "apply Zlt_le_weak; rewrite <- pGivesBound; case Fq; auto with float.",
            "VernacExtend",
            "b34e0097328426b3e00460a6171ca2f92031ee36"
        ],
        [
            "auto with zarith.",
            "VernacExtend",
            "23f42fd3236dcece4a40b3a666dce57fea69a9c0"
        ],
        [
            "intros x0 (H'8, H'9); rewrite <- H'9.",
            "VernacExtend",
            "3a9c3553e5e85094ebeba59b79ac05de09647af0"
        ],
        [
            "case H'2.",
            "VernacExtend",
            "b1f9ba84f14412d0fe98c3163aa298207db853fb"
        ],
        [
            "intros H'10 (H'11, H'12); apply H'12; auto.",
            "VernacExtend",
            "08cbed1752c97f9a679a47d38b9dbcfe3f5e03fb"
        ],
        [
            "rewrite H'9; auto.",
            "VernacExtend",
            "2bebe51f9e88a1e1cfe2870332d1b8fed3a8d951"
        ],
        [
            "rewrite powerRZ_add; auto with real zarith.",
            "VernacExtend",
            "464b630a39cda032263051881ad80da2fc959c8e"
        ],
        [
            "rewrite <- Rmult_assoc.",
            "VernacExtend",
            "34da3c50cde53c179a4908b1329a459071245c05"
        ],
        [
            "unfold FtoRradix in |- *; rewrite <- Fmult_correct; auto with zarith.",
            "VernacExtend",
            "d7159bb616dac9fc91f687d0858c652a2796bd38"
        ],
        [
            "unfold Fmult, FtoR in |- *; simpl in |- *.",
            "VernacExtend",
            "075ceee862976c9a5d4660c0b804ed26f0fdf116"
        ],
        [
            "repeat rewrite (fun x => Rmult_comm x (powerRZ radix (Fexp p + Fexp q))).",
            "VernacExtend",
            "3da5b1dca92cb128491681b4c70d7d584b6a957e"
        ],
        [
            "apply Rmult_le_compat_l; auto with real zarith.",
            "VernacExtend",
            "2159120b470d3288ccdd35583593b7da3195abd5"
        ],
        [
            "rewrite <- Zpower_nat_Z_powerRZ; auto with zarith.",
            "VernacExtend",
            "e4b7b4406768bdb883cc6cef0ff1fe3e9efd51bd"
        ],
        [
            "pattern (Fnum p * Fnum q)%Z at 2 in |- *; rewrite <- (Zabs_eq (Fnum p * Fnum q)); auto.",
            "VernacExtend",
            "2de1306cd1d2741ebffea0a93158b8849d41217d"
        ],
        [
            "rewrite <- Rmult_IZR; apply Rle_IZR; apply Zle_Zabs_inv2; auto.",
            "VernacExtend",
            "0da89ec71831736ae12cf5ebd01c6e503379145b"
        ],
        [
            "simpl in |- *; auto.",
            "VernacExtend",
            "9b631374b1d3067f703fd99c5dc6e1e5c8405957"
        ],
        [
            "apply Zmin_n_n; auto.",
            "VernacExtend",
            "f058f1fba6a1433c1979222e52f5d8bb27142a4e"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Theorem errorBoundedMultMax : forall p q fmax : float, Fbounded b p -> Fbounded b q -> (0 <= p)%R -> (0 <= q)%R -> (- dExp b <= Fexp p + Fexp q)%Z -> isMax b radix (p * q) fmax -> exists r : float, FtoRradix r = (p * q - fmax)%R /\\ Fbounded b r /\\ Fexp r = (Fexp p + Fexp q)%Z.",
            "VernacStartTheoremProof",
            "263ffa618767662a3d65f2b318d2239262d2def7"
        ],
        [
            "intros p q fmax Fp Fq H' H'0 H'1 H'2.",
            "VernacExtend",
            "cf3748621ff7545e24f9d754292c7c11002beead"
        ],
        [
            "cut (0 <= Fnum p * Fnum q)%Z; [ intros multPos | apply Zle_mult_gen; apply (LeR0Fnum radix); auto with arith ].",
            "VernacExtend",
            "5ee73c00a5a327d94842b246c34588f45936f499"
        ],
        [
            "case (ZquotientProp (Fnum p * Fnum q) (Zpower_nat radix precision)); auto with zarith.",
            "VernacExtend",
            "d9c31b121dae0a6bcb6085dba5d355d214a45644"
        ],
        [
            "intros r; intros (H'3, (H'4, H'5)).",
            "VernacExtend",
            "dd7ccf51e56abb867e1a1f89a3787fa8c220d9c2"
        ],
        [
            "cut (0 <= Zquotient (Fnum p * Fnum q) (Zpower_nat radix precision))%Z; [ intros Z2 | apply ZquotientPos; auto with zarith ].",
            "VernacExtend",
            "4a58325153b92f8481961dc23665df8ce81a448f"
        ],
        [
            "cut (0 <= r)%Z; [ intros Z3 | replace r with (Fnum p * Fnum q - Zquotient (Fnum p * Fnum q) (Zpower_nat radix precision) * Zpower_nat radix precision)%Z; [ idtac | pattern (Fnum p * Fnum q)%Z at 1 in |- *; rewrite H'3; ring ]; auto ].",
            "VernacExtend",
            "102365f212a5bee15096692bb4f2cf8447a59b4e"
        ],
        [
            "2: apply Zle_Zminus_ZERO; rewrite Zabs_eq in H'4; auto with zarith; rewrite Zabs_eq in H'4; auto with zarith.",
            "VernacExtend",
            "59a379080a527167626a8e724f35b5018c82d48e"
        ],
        [
            "case (Z_eq_dec r 0); intros Z4.",
            "VernacExtend",
            "13dcaf523a189934336238a8acc19352dc6292ea"
        ],
        [
            "exists (Fzero (Fexp p + Fexp q)); repeat (split; auto with float).",
            "VernacExtend",
            "71664a3ad6a35872641dfac53c67f484873783b1"
        ],
        [
            "replace (FtoRradix (Fzero (Fexp p + Fexp q))) with 0%R; [ idtac | unfold Fzero, FtoRradix, FtoR in |- *; simpl in |- *; ring ].",
            "VernacExtend",
            "107744341f4187840554fc55159212cc2cb43e4b"
        ],
        [
            "apply Rplus_eq_reg_l with (r := FtoRradix fmax).",
            "VernacExtend",
            "73574045df1883c5e954b487b6b9be74e2b59d2d"
        ],
        [
            "replace (fmax + 0)%R with (FtoRradix fmax); [ idtac | ring ].",
            "VernacExtend",
            "250ff369ef4b774b816583c5bccb04351f678a65"
        ],
        [
            "replace (fmax + (p * q - fmax))%R with (p * q)%R; [ idtac | ring ].",
            "VernacExtend",
            "6aa123d8fec0879b55130dec35f6cb2eef4b65a3"
        ],
        [
            "unfold FtoRradix in |- *; rewrite <- (Fmult_correct radix); auto with zarith.",
            "VernacExtend",
            "f60cae3cda98d37ec0cc2e2831fa3a4cd71aab76"
        ],
        [
            "case (FboundedMbound _ radixMoreThanOne b precision) with (z := (precision + (Fexp p + Fexp q))%Z) (m := Zquotient (Fnum p * Fnum q) (Zpower_nat radix precision)); auto with zarith.",
            "VernacExtend",
            "fcb99998f94fe0751eb39bbbcb79e2b69b674f7a"
        ],
        [
            "apply Zmult_le_reg_r with (p := Zpower_nat radix precision); auto with zarith.",
            "VernacExtend",
            "53864c0372480d2a3a0d1798f8115279c551f5c6"
        ],
        [
            "apply Zlt_gt; auto with zarith.",
            "VernacExtend",
            "e4740f81454b5bebf9859686e2a5cd74c0d86c71"
        ],
        [
            "pattern (Zpower_nat radix precision) at 2 in |- *; rewrite <- (fun x => Zabs_eq (Zpower_nat radix x)).",
            "VernacExtend",
            "65a47e5467bb361b42330478468d1fcbad374fb8"
        ],
        [
            "rewrite <- Zabs_Zmult.",
            "VernacExtend",
            "f7fc6414388fe397677ae7ff4791672389a0bb6d"
        ],
        [
            "apply Zle_trans with (1 := H'4); auto with zarith.",
            "VernacExtend",
            "cc7f6b84bf95844a1828ebcd353def3ffd57065a"
        ],
        [
            "rewrite Zabs_Zmult.",
            "VernacExtend",
            "f459c70d0601b9eab86bcf62dfb70a911d8ba871"
        ],
        [
            "apply Zle_trans with (Zpower_nat radix precision * Zabs (Fnum q))%Z.",
            "VernacExtend",
            "f06e0bfd0a077c73e063ff6004160fdc0ad07678"
        ],
        [
            "apply Zle_Zmult_comp_r; auto with zarith.",
            "VernacExtend",
            "6df3ad18f4910f873061ef6fd03b5647e45f11b6"
        ],
        [
            "apply Zlt_le_weak; rewrite <- pGivesBound; case Fp; auto with float.",
            "VernacExtend",
            "038800b6a2264c39f3617037472b8e2118bca582"
        ],
        [
            "apply Zle_Zmult_comp_l; auto with zarith.",
            "VernacExtend",
            "0a442d3268531835feca11bf21b34ab2eb26341b"
        ],
        [
            "apply Zlt_le_weak; rewrite <- pGivesBound; case Fq; auto with float.",
            "VernacExtend",
            "b34e0097328426b3e00460a6171ca2f92031ee36"
        ],
        [
            "auto with zarith.",
            "VernacExtend",
            "23f42fd3236dcece4a40b3a666dce57fea69a9c0"
        ],
        [
            "intros x (H'6, H'7).",
            "VernacExtend",
            "b2f7d7e850f2548cf4ef49ee0fe2a2297de8008e"
        ],
        [
            "cut (FtoR radix (Fmult p q) = FtoR radix x).",
            "VernacExtend",
            "7286e955799805a2579610f0700810e26c5c24ef"
        ],
        [
            "intros H'8; rewrite H'8.",
            "VernacExtend",
            "e096fd0d988ba836f397a1bd2e951b05233c4259"
        ],
        [
            "apply sym_eq; apply (ProjectMax b radix); auto.",
            "VernacExtend",
            "30e6c6562cdc9a41feab8dc05dc6d3acadf91c5b"
        ],
        [
            "rewrite <- H'8; auto.",
            "VernacExtend",
            "04b29ebc13e42900d3632a908de79773f2b0f74b"
        ],
        [
            "rewrite Fmult_correct; auto with zarith.",
            "VernacExtend",
            "b97583e4fb4965b156b4524b1970732b209e1c6a"
        ],
        [
            "rewrite H'7.",
            "VernacExtend",
            "03c6aba9ff54b96ca970e9bd498865d563f34b83"
        ],
        [
            "unfold FtoRradix, FtoR in |- *; simpl in |- *.",
            "VernacExtend",
            "85a3da1582165d92ceb7faef707de88822bccf1a"
        ],
        [
            "rewrite powerRZ_add with (n := Z_of_nat precision); auto with real zarith.",
            "VernacExtend",
            "672484a67205c89683c4db1ee5f214b2f9f337d1"
        ],
        [
            "pattern (Fnum p * Fnum q)%Z at 1 in |- *; rewrite H'3.",
            "VernacExtend",
            "bb5f0096bc89372790a7139086c73f1a26077be3"
        ],
        [
            "rewrite plus_IZR; rewrite Rmult_IZR.",
            "VernacExtend",
            "484afb6b1d73b07e16792b3f2437af2b73a7dba5"
        ],
        [
            "repeat rewrite Zpower_nat_Z_powerRZ; auto with real zarith.",
            "VernacExtend",
            "14ea33dc4c3acdca68f729c7b420d4a2deb1edd4"
        ],
        [
            "rewrite Z4; simpl;ring.",
            "VernacExtend",
            "7a0d98f7c0c2cb2b7703f08bcf473884f8361040"
        ],
        [
            "cut (ex (fun m : Z => FtoRradix fmax = Float m (Fexp (Fmult p q)))); [ intros Z5 | idtac ].",
            "VernacExtend",
            "0734240b7fecf0a13b1f8d816f8aba7da764556e"
        ],
        [
            "2: unfold FtoRradix in |- *; apply RoundedModeRep with (b := b) (precision := precision) (P := isMax b radix); auto.",
            "VernacExtend",
            "96754f61d909a419ac016c8b8a119fc2e1e78205"
        ],
        [
            "2: apply MaxRoundedModeP with (precision := precision); auto.",
            "VernacExtend",
            "e925cf88f997483fa1ec45c67003c4e7c2455a3f"
        ],
        [
            "2: rewrite (Fmult_correct radix); auto with zarith.",
            "VernacExtend",
            "d14386c55b12cee51f126bf6a2172c5a30a1b865"
        ],
        [
            "elim Z5; intros m E; clear Z5.",
            "VernacExtend",
            "533f1c792b3d067e9d0ff82b8d0767720cd5f9d7"
        ],
        [
            "exists (Fopp (Fminus radix (Float m (Fexp (Fmult p q))) (Fmult p q))).",
            "VernacExtend",
            "bfe0e8bf17c2f3e689d426247484eb77e0ad9a59"
        ],
        [
            "split.",
            "VernacExtend",
            "55abc140132bd88981001ac656020469a8d503eb"
        ],
        [
            "rewrite E; unfold FtoRradix in |- *; repeat rewrite Fopp_correct; repeat rewrite Fminus_correct; repeat rewrite Fmult_correct; auto with zarith; ring.",
            "VernacExtend",
            "835eec56985e039fd57f1025a831dc9660b1710b"
        ],
        [
            "cut (Fexp (Fopp (Fminus radix (Float m (Fexp (Fmult p q))) (Fmult p q))) = (Fexp p + Fexp q)%Z); [ intros Z5 | idtac ].",
            "VernacExtend",
            "5377ed2da6b046acc14287d38bdf4022381b69b7"
        ],
        [
            "split; auto.",
            "VernacExtend",
            "fcd44a714bd12fa54b1c7746996e44dbac16df06"
        ],
        [
            "split; [ idtac | rewrite Z5; auto ].",
            "VernacExtend",
            "d94e81dafd2aab5fe5bb476c301fced9768d5509"
        ],
        [
            "cut (Fmult p q <= fmax)%R; [ idtac | unfold FtoRradix in |- *; rewrite Fmult_correct; auto; case H'2; auto with real zarith; (intros H1 H2; case H2; auto) ].",
            "VernacExtend",
            "64e98c794d2fcd6e4e037dc9ef4f027a53b8df43"
        ],
        [
            "cut (fmax <= Zsucc (Zquotient (Fnum p * Fnum q) (Zpower_nat radix precision)) * powerRZ radix (precision + (Fexp p + Fexp q)))%R.",
            "VernacExtend",
            "96818aa513edab00bc807a1496b0ce6bb2ebe58b"
        ],
        [
            "rewrite E; repeat rewrite Zmin_n_n; repeat rewrite <- Zminus_diag_reverse; repeat rewrite Zpower_nat_O; repeat rewrite Zmult_1_r; auto.",
            "VernacExtend",
            "6303e03d6983b7d2e59158d82f60ee8451217020"
        ],
        [
            "unfold Fmult, Fminus, Fplus, Fopp in |- *; simpl in |- *.",
            "VernacExtend",
            "30d7a41e2f2c3e80e5daec11c3aaab94c2cbc88b"
        ],
        [
            "repeat rewrite Zmin_n_n; repeat rewrite <- Zminus_diag_reverse; repeat rewrite Zpower_nat_O; repeat rewrite Zmult_1_r; auto.",
            "VernacExtend",
            "54d85214973a7855cd4822d3c58b2b9b1776e2f4"
        ],
        [
            "intros H1 H2; rewrite Zabs_Zopp; apply Zlt_Zabs_intro.",
            "VernacExtend",
            "b66f4ce6363bc3cebd7aa67fcf439e06af3b4972"
        ],
        [
            "apply Zlt_le_trans with 0%Z; auto with zarith.",
            "VernacExtend",
            "4e23c0310bba1e422237e3bd0b948df89ca325bf"
        ],
        [
            "cut (Fnum p * Fnum q <= m)%Z; auto with zarith.",
            "VernacExtend",
            "0a0705b69ecbc4bce4f1f66112b166329299d8d7"
        ],
        [
            "apply le_IZR; apply (Rle_monotony_contra_exp radix) with (z := (Fexp p + Fexp q)%Z); auto with zarith.",
            "VernacExtend",
            "2e6476687a0cd39b048a2d8715dcdd7911d729a8"
        ],
        [
            "cut (m <= Zsucc (Zquotient (Fnum p * Fnum q) (Zpower_nat radix precision)) * Zpower_nat radix precision)%Z; [ intros H'9 | idtac ].",
            "VernacExtend",
            "f84ebe17b244c2a5d66dc0d96347928f7a290d84"
        ],
        [
            "apply Zle_lt_trans with (Zpower_nat radix precision - r)%Z; [ idtac | rewrite pGivesBound; auto with zarith ].",
            "VernacExtend",
            "23d86dc8dabfcbbb42f591e84d9a53a81b6cdc13"
        ],
        [
            "replace r with (Fnum p * Fnum q - Zquotient (Fnum p * Fnum q) (Zpower_nat radix precision) * Zpower_nat radix precision)%Z.",
            "VernacExtend",
            "b0d94e13b79961fd787921e4e7ddc8b9c675af35"
        ],
        [
            "replace (Zpower_nat radix precision - (Fnum p * Fnum q - Zquotient (Fnum p * Fnum q) (Zpower_nat radix precision) * Zpower_nat radix precision))%Z with (Zsucc (Zquotient (Fnum p * Fnum q) (Zpower_nat radix precision)) * Zpower_nat radix precision - Fnum p * Fnum q)%Z; auto with zarith.",
            "VernacExtend",
            "04d9fecd99780c8680c25c2db95111d105838684"
        ],
        [
            "unfold Zsucc in |- *; simpl in |- *; ring.",
            "VernacExtend",
            "6af7bc5ca3f8237de5707da1699d875207c15fb7"
        ],
        [
            "pattern (Fnum p * Fnum q)%Z at 1 in |- *; rewrite H'3; ring.",
            "VernacExtend",
            "d96f3dd830bc4433df9080b2a603f4f610ff5c5f"
        ],
        [
            "apply le_IZR; apply (Rle_monotony_contra_exp radix) with (z := (Fexp p + Fexp q)%Z); auto with zarith.",
            "VernacExtend",
            "2e6476687a0cd39b048a2d8715dcdd7911d729a8"
        ],
        [
            "replace (IZR (Zsucc (Zquotient (Fnum p * Fnum q) (Zpower_nat radix precision)) * Zpower_nat radix precision) * powerRZ radix (Fexp p + Fexp q))%R with (Zsucc (Zquotient (Fnum p * Fnum q) (Zpower_nat radix precision)) * powerRZ radix (precision + (Fexp p + Fexp q)))%R; [ auto | idtac ].",
            "VernacExtend",
            "18dd177a242b86fb2978490415653fcdb435b524"
        ],
        [
            "rewrite powerRZ_add; auto with real zarith.",
            "VernacExtend",
            "464b630a39cda032263051881ad80da2fc959c8e"
        ],
        [
            "repeat rewrite Rmult_IZR; repeat rewrite Zpower_nat_Z_powerRZ; auto with zarith.",
            "VernacExtend",
            "b5a1f6d75ea4fc2e33e720e3f19aba339858e558"
        ],
        [
            "ring.",
            "VernacExtend",
            "baadd9fc4c175005af409bb466fcea9fab25b4e6"
        ],
        [
            "case (FboundedMbound _ radixMoreThanOne b precision) with (z := (precision + (Fexp p + Fexp q))%Z) (m := Zsucc (Zquotient (Fnum p * Fnum q) (Zpower_nat radix precision))); auto with arith.",
            "VernacExtend",
            "9dcd991261aa2706ec95ae7e2d33b8ff7083ffd8"
        ],
        [
            "rewrite Zabs_eq; auto with zarith.",
            "VernacExtend",
            "e3b6647506c6d43441146989691d7c27f1722b7e"
        ],
        [
            "apply Zlt_le_succ.",
            "VernacExtend",
            "070de595889f014f0a173659377506422eb25080"
        ],
        [
            "case (Zle_lt_or_eq _ _ multPos); intros Eq1.",
            "VernacExtend",
            "9b8c37c7936f82ab93e02bb389c068da02ab11a5"
        ],
        [
            "cut (0 < Zabs (Fnum p))%Z; [ intros Eq2 | idtac ].",
            "VernacExtend",
            "69f9eaf63f28f419bda08e1e82dee3049d495b9d"
        ],
        [
            "cut (0 < Zabs (Fnum q))%Z; [ intros Eq3 | idtac ].",
            "VernacExtend",
            "7b6c6a766eca50e564123b948a8f62560e3586d9"
        ],
        [
            "apply Zlt_mult_simpl_l with (c := Zpower_nat radix precision); auto with zarith.",
            "VernacExtend",
            "3190afd12352f4ac16ecaae9a85d817fc81dabc3"
        ],
        [
            "rewrite (fun x y z => Zmult_comm x (Zquotient y z)).",
            "VernacExtend",
            "83c48c736ad7def1a407b8eb2ee83911946d3bae"
        ],
        [
            "apply Zle_lt_trans with (Fnum p * Fnum q)%Z.",
            "VernacExtend",
            "0cfb24d2b61951f4a5bfb0afcef5cface19d69af"
        ],
        [
            "rewrite Zabs_eq in H'4; auto with zarith; rewrite Zabs_eq in H'4; auto with zarith.",
            "VernacExtend",
            "8b07493c538b50a76d06d40eba6e4d2681e7ab21"
        ],
        [
            "rewrite <- (Zabs_eq (Fnum p * Fnum q)); auto with zarith; rewrite Zabs_Zmult.",
            "VernacExtend",
            "b97603b9653a1decbdd6bb06c47532bafffed18c"
        ],
        [
            "apply Zlt_trans with (Zabs (Fnum p) * Zpower_nat radix precision)%Z.",
            "VernacExtend",
            "4c6d8722b66081da66af987d3a49bc06d21a0373"
        ],
        [
            "cut (Zabs (Fnum q) < Zpower_nat radix precision)%Z; [ intros Eq4; apply Zmult_gt_0_lt_compat_l | rewrite <- pGivesBound; case Fq ]; auto with zarith.",
            "VernacExtend",
            "ce1c8839cc48da35e9c3a98cf6a7b54166444d90"
        ],
        [
            "cut (Zabs (Fnum p) < Zpower_nat radix precision)%Z; [ intros Eq4; apply Zmult_gt_0_lt_compat_r | rewrite <- pGivesBound; case Fp ]; auto with zarith.",
            "VernacExtend",
            "88aeb1e1b45d48660c503027f0e19036d276b2ef"
        ],
        [
            "case (Zle_lt_or_eq _ _ (Zle_ZERO_Zabs (Fnum q))); auto.",
            "VernacExtend",
            "e18cd81284fe2347f5dd8bfec319a1f37916bf31"
        ],
        [
            "intros Eq3; Contradict Eq1; replace (Fnum q) with 0%Z; auto with zarith.",
            "VernacExtend",
            "f0a86192b26ea7c8b5f4e3fabdd6bf962e7b9e2a"
        ],
        [
            "generalize Eq3; case (Fnum q); simpl in |- *; auto; intros; discriminate.",
            "VernacExtend",
            "4b54e8b37a5fbd9af5fe9bc4b63f58d2818701ae"
        ],
        [
            "case (Zle_lt_or_eq _ _ (Zle_ZERO_Zabs (Fnum p))); auto.",
            "VernacExtend",
            "199b949f36177e38965a3c231232ad406e3b4623"
        ],
        [
            "intros Eq3; Contradict Eq1; replace (Fnum p) with 0%Z; auto with zarith.",
            "VernacExtend",
            "86236632c4d483dbae81c4b1547b9a3a3eb6f60e"
        ],
        [
            "generalize Eq3; case (Fnum p); simpl in |- *; auto; intros; discriminate.",
            "VernacExtend",
            "861f94a2abf75fce7fe6972aabbb8d8e7dfb63c7"
        ],
        [
            "rewrite <- Eq1; replace (Zquotient 0 (Zpower_nat radix precision)) with 0%Z; auto with zarith.",
            "VernacExtend",
            "4b019c8c7ed7b602a0dc1e51350bebc98c49be33"
        ],
        [
            "apply Zle_trans with (1 := H'1); auto with zarith.",
            "VernacExtend",
            "ca20453a3c0c068dbb68f75492ff4e1667c2157f"
        ],
        [
            "intros f1 (Hf1, Hf2); rewrite <- Hf2.",
            "VernacExtend",
            "6f72d52a6aa2b633a5939dac27bb628af671c83b"
        ],
        [
            "case H'2; intros L1 (L2, L3); apply L3; auto.",
            "VernacExtend",
            "fd2030508ae7a6ecbdbd171d4a23bb56f9fc6729"
        ],
        [
            "rewrite Hf2; unfold Fmult, FtoRradix, FtoR in |- *.",
            "VernacExtend",
            "9d9a113a0d6d2672ece1fbb6f03b87093a137ffd"
        ],
        [
            "replace (Fnum p * powerRZ radix (Fexp p) * (Fnum q * powerRZ radix (Fexp q)))%R with (Fnum p * Fnum q * powerRZ radix (Fexp p + Fexp q))%R.",
            "VernacExtend",
            "b797432fb188dc910d201e56974b1d760b649537"
        ],
        [
            "replace (Zsucc (Zquotient (Fnum p * Fnum q) (Zpower_nat radix precision)) * powerRZ radix (precision + (Fexp p + Fexp q)))%R with ((Zquotient (Fnum p * Fnum q) (Zpower_nat radix precision) * Zpower_nat radix precision + Zpower_nat radix precision)%Z * powerRZ radix (Fexp p + Fexp q))%R.",
            "VernacExtend",
            "6d306c2d241ccf7351a40862a7a8dd871dcd5004"
        ],
        [
            "apply Rle_monotone_exp; auto with real zarith.",
            "VernacExtend",
            "37a651b75a68d73df4e58d8219b0d5f2f5c224b7"
        ],
        [
            "rewrite <- Rmult_IZR; apply Rle_IZR.",
            "VernacExtend",
            "2e95a7e34e84426aeaa61bda0ff73a32c7e98e0a"
        ],
        [
            "pattern (Fnum p * Fnum q)%Z at 1 in |- *; rewrite H'3; cut (r < Zpower_nat radix precision)%Z; auto with zarith.",
            "VernacExtend",
            "a9c98266594e417d29a096a636c313450284a424"
        ],
        [
            "rewrite Zabs_eq in H'5; auto with zarith; rewrite Zabs_eq in H'5; auto with zarith.",
            "VernacExtend",
            "e0899408c8d8868040c819f3af8b0ae810f125b6"
        ],
        [
            "unfold Zsucc in |- *; repeat rewrite Rmult_IZR || rewrite plus_IZR; simpl in |- *.",
            "VernacExtend",
            "e48f9352b15c18b3abeffb6fc38f564acb100a55"
        ],
        [
            "rewrite (powerRZ_add radix precision); auto with real zarith; rewrite <- (Zpower_nat_Z_powerRZ radix precision); auto with real zarith; ring.",
            "VernacExtend",
            "65a3b86be431fcb2f00baabfeb83fca01c90bc4e"
        ],
        [
            "rewrite powerRZ_add; auto with real zarith; ring.",
            "VernacExtend",
            "f5aa0a72109212c9f1732c17c33b0ee0e5105eee"
        ],
        [
            "unfold Fopp, Fminus, Fmult in |- *; simpl in |- *; auto.",
            "VernacExtend",
            "30083fdc5d0d4a50144483489661a254e9a136e9"
        ],
        [
            "apply Zmin_n_n.",
            "VernacExtend",
            "62fc97160bffc3fda2f934b3e418710639153b0a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Theorem multExpMin : forall P, RoundedModeP b radix P -> forall p q pq : float, P (p * q)%R pq -> exists s : float, Fbounded b s /\\ s = pq :>R /\\ (Fexp p + Fexp q <= Fexp s)%Z.",
            "VernacStartTheoremProof",
            "2409e56ec8831dfbea3df362a50ea6a61a212932"
        ],
        [
            "intros P H' p q pq H'0.",
            "VernacExtend",
            "69c90d3f381beb533d8720210e5eb470215883fc"
        ],
        [
            "case (RoundedModeRep b radix precision) with (p := Fmult p q) (q := pq) (P := P); auto with zarith.",
            "VernacExtend",
            "c88a8d08a51c9b68aa8698ff20d5ccb6d4abfd90"
        ],
        [
            "rewrite Fmult_correct; auto with zarith.",
            "VernacExtend",
            "b97583e4fb4965b156b4524b1970732b209e1c6a"
        ],
        [
            "simpl in |- *; intros x H'1.",
            "VernacExtend",
            "45c52281d62221d6f6b7271a356a4d129b156ba2"
        ],
        [
            "case (eqExpLess _ radixMoreThanOne b) with (p := pq) (q := Float x (Fexp (Fmult p q))); auto.",
            "VernacExtend",
            "fe429540273def8a9effaba90593e58046630184"
        ],
        [
            "apply RoundedModeBounded with (radix := radix) (P := P) (r := (p * q)%R); auto.",
            "VernacExtend",
            "314b755eefac8e9be0825f1a24033c69e0296022"
        ],
        [
            "simpl in |- *; intros x0 H'2; elim H'2; intros H'3 H'4; elim H'4; intros H'5 H'6; clear H'4 H'2.",
            "VernacExtend",
            "5a1b146986b3c7959199dd59148dd3a8e29510d2"
        ],
        [
            "exists x0; split; [ idtac | split ]; auto.",
            "VernacExtend",
            "b83eae55d733a50b008c7ceeb2e58a6fe45ff027"
        ],
        [
            "unfold FtoRradix in |- *; rewrite H'5; auto.",
            "VernacExtend",
            "9144210a6274975e9e2b7e434cfa7f2fc754e7ba"
        ],
        [
            "apply le_IZR; auto.",
            "VernacExtend",
            "5ddae610de44a290611008bca1b760849106ddb9"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Theorem multExpUpperBound : forall P, RoundedModeP b radix P -> forall p q pq : float, P (p * q)%R pq -> Fbounded b p -> Fbounded b q -> (- dExp b <= Fexp p + Fexp q)%Z -> exists r : float, Fbounded b r /\\ r = pq :>R /\\ (Fexp r <= precision + (Fexp p + Fexp q))%Z.",
            "VernacStartTheoremProof",
            "85a862c3398d10369961be57da8fadc15767a09a"
        ],
        [
            "intros P H' p q pq H'0 H'1 H'2 H'3.",
            "VernacExtend",
            "1878168cae608e068c7184cde61a1705541be9b4"
        ],
        [
            "replace (precision + (Fexp p + Fexp q))%Z with (Fexp (Float (pPred (vNum b)) (precision + (Fexp p + Fexp q)))); [ idtac | simpl in |- *; auto ].",
            "VernacExtend",
            "fc6469dc8fa74b8bd5f8e9ab26c730d853ae33f2"
        ],
        [
            "unfold FtoRradix in |- *; apply eqExpMax; auto.",
            "VernacExtend",
            "f44c675836e858d2e652687c7ef9b745fca35566"
        ],
        [
            "apply RoundedModeBounded with (radix := radix) (P := P) (r := (p * q)%R); auto; auto.",
            "VernacExtend",
            "2c42d969e4bbad8b0292ccd5976b2080b8feb8e0"
        ],
        [
            "unfold pPred in |- *; apply maxFbounded; auto.",
            "VernacExtend",
            "46c0eb87b7cd7e05e3d590672f1946b47665bf68"
        ],
        [
            "apply Zle_trans with (1 := H'3); auto with zarith.",
            "VernacExtend",
            "e86e62392ff22e60827fab4a432b560be7b71b72"
        ],
        [
            "replace (FtoR radix (Float (pPred (vNum b)) (precision + (Fexp p + Fexp q)))) with (radix * Float (pPred (vNum b)) (pred precision + (Fexp p + Fexp q)))%R.",
            "VernacExtend",
            "9d7a58479d3ef3f4c5963bdaf43909679bf31061"
        ],
        [
            "rewrite Fabs_correct; auto with zarith.",
            "VernacExtend",
            "cbf371ebf2236198f1663453e3d81b5052108e31"
        ],
        [
            "unfold FtoRradix in |- *; apply RoundedModeMultAbs with (b := b) (precision := precision) (P := P) (r := (p * q)%R); auto.",
            "VernacExtend",
            "8999fcb898f42f6e53d8d7fc7f95f12383eef176"
        ],
        [
            "unfold pPred in |- *; apply maxFbounded; auto with zarith.",
            "VernacExtend",
            "894b223c61f686884874a556f50694420241604f"
        ],
        [
            "rewrite Rabs_mult; auto.",
            "VernacExtend",
            "61aacbd30bc395ce60e710ad90ed6bf9cc0e5975"
        ],
        [
            "apply Rle_trans with (FtoR radix (Fmult (Float (pPred (vNum b)) (Fexp p)) (Float (pPred (vNum b)) (Fexp q)))).",
            "VernacExtend",
            "5e1bc0d92f9a05e96a8961f01f316e7d43079194"
        ],
        [
            "rewrite Fmult_correct; auto with arith.",
            "VernacExtend",
            "eedcbc5cf45bd9a9ebf3286a2907aa3d6311ab2a"
        ],
        [
            "apply Rmult_le_compat; auto with real.",
            "VernacExtend",
            "6a038a71fa49dc4681b003abb0241b56e257ee07"
        ],
        [
            "rewrite <- (Fabs_correct radix); try apply maxMax1; auto with zarith.",
            "VernacExtend",
            "7efcefc8ece8572bef350febda5272a6433983f1"
        ],
        [
            "rewrite <- (Fabs_correct radix); try apply maxMax1; auto with zarith.",
            "VernacExtend",
            "7efcefc8ece8572bef350febda5272a6433983f1"
        ],
        [
            "unfold Fmult, FtoR in |- *; simpl in |- *; auto.",
            "VernacExtend",
            "b6bd0b4edc62478e5c4853d7709f79ad815e388d"
        ],
        [
            "rewrite powerRZ_add with (n := Z_of_nat (pred precision)); auto with real arith.",
            "VernacExtend",
            "fc67f69ff1d5aac73f579176a48366bc7a4544e9"
        ],
        [
            "repeat rewrite <- Rmult_assoc.",
            "VernacExtend",
            "645aebe2c3685a4f868a05a2372130cedecea85e"
        ],
        [
            "repeat rewrite (fun (z : Z) (x : R) => Rmult_comm x (powerRZ radix z)); auto.",
            "VernacExtend",
            "2bc0e151997493b198fb53814e4ca7417d301949"
        ],
        [
            "apply Rmult_le_compat_l; auto with real arith.",
            "VernacExtend",
            "c67ac6a62458e649e844e549689a7d3f43885a2a"
        ],
        [
            "rewrite <- Rmult_assoc.",
            "VernacExtend",
            "34da3c50cde53c179a4908b1329a459071245c05"
        ],
        [
            "rewrite (fun x : R => Rmult_comm x radix).",
            "VernacExtend",
            "49f17c37ff61d5ce821627a8a443f22f9b81e496"
        ],
        [
            "rewrite <- powerRZ_Zs; auto with real arith.",
            "VernacExtend",
            "16b08a17546276c1c8d7e62461a7684e3fb5c9d5"
        ],
        [
            "replace (Zsucc (pred precision)) with (Z_of_nat precision).",
            "VernacExtend",
            "9f03d53b2805a3b833087e2cfc9f128bd3e1a10e"
        ],
        [
            "rewrite Rmult_IZR; auto.",
            "VernacExtend",
            "44aee418e2ca54b49dbc7a73f12b6ebf687258ce"
        ],
        [
            "apply Rmult_le_compat; auto with real arith.",
            "VernacExtend",
            "9957fd3f288f703842d8cf655fb04d6c6fec0f1e"
        ],
        [
            "replace 0%R with (IZR 0); unfold pPred in |- *; try apply Rle_IZR; auto with real zarith.",
            "VernacExtend",
            "877e461912bd055a0101fb81708582277489508c"
        ],
        [
            "replace 0%R with (IZR 0); unfold pPred in |- *; try apply Rle_IZR; auto with real zarith.",
            "VernacExtend",
            "877e461912bd055a0101fb81708582277489508c"
        ],
        [
            "unfold pPred in |- *; rewrite pGivesBound; rewrite <- Zpower_nat_Z_powerRZ; auto with real zarith.",
            "VernacExtend",
            "218e4e122509cd817c3af29102d157d323ff0cb6"
        ],
        [
            "rewrite inj_pred; auto with arith zarith.",
            "VernacExtend",
            "24900560bd18738b8a2ab6e69214819fda810413"
        ],
        [
            "auto with real zarith.",
            "VernacExtend",
            "adb253df2d9560ab81f40ee78f067764177c29bf"
        ],
        [
            "auto with real zarith.",
            "VernacExtend",
            "adb253df2d9560ab81f40ee78f067764177c29bf"
        ],
        [
            "unfold FtoRradix, FtoR in |- *; simpl in |- *.",
            "VernacExtend",
            "85a3da1582165d92ceb7faef707de88822bccf1a"
        ],
        [
            "repeat rewrite (Rmult_comm (pPred (vNum b))).",
            "VernacExtend",
            "e7b0fb5dc06dfb311f86b4f1e83aed1f34dd7924"
        ],
        [
            "rewrite <- Rmult_assoc.",
            "VernacExtend",
            "34da3c50cde53c179a4908b1329a459071245c05"
        ],
        [
            "rewrite <- powerRZ_Zs; auto with real zarith.",
            "VernacExtend",
            "e628c4e6a44f3e48a9ab7e84363f341511cc1036"
        ],
        [
            "rewrite inj_pred; auto with arith zarith.",
            "VernacExtend",
            "24900560bd18738b8a2ab6e69214819fda810413"
        ],
        [
            "replace (Zsucc (Zpred precision + (Fexp p + Fexp q))) with (precision + (Fexp p + Fexp q))%Z; auto; unfold Zsucc, Zpred in |- *; ring.",
            "VernacExtend",
            "5cba88dac033ecd1e2bd732f692c858ecfa32b38"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Theorem errorBoundedMultPos : forall P, RoundedModeP b radix P -> forall p q f : float, Fbounded b p -> Fbounded b q -> (0 <= p)%R -> (0 <= q)%R -> (- dExp b <= Fexp p + Fexp q)%Z -> P (p * q)%R f -> exists r : float, r = (p * q - f)%R :>R /\\ Fbounded b r /\\ Fexp r = (Fexp p + Fexp q)%Z.",
            "VernacStartTheoremProof",
            "15cb4d82df75074fb9f4c4306c3c05e757ed8b70"
        ],
        [
            "intros P H p q f H0 H1 H2 H3 H4 H5.",
            "VernacExtend",
            "4956468dcfd97c01aafa5ffb7d4e22bf59da40a1"
        ],
        [
            "generalize errorBoundedMultMin errorBoundedMultMax; intros H6 H7.",
            "VernacExtend",
            "0a3876c08fc09bb1e9fa2e17ceaf766f5530cfb5"
        ],
        [
            "cut (MinOrMaxP b radix P); [ intros | case H; intros H'1 (H'2, (H'3, H'4)); auto ].",
            "VernacExtend",
            "f2b4f5ca15a80ce93a480957ed2b99309d5da489"
        ],
        [
            "case (H8 (p * q)%R f); auto.",
            "VernacExtend",
            "9c09778624990061374208472ef5d82feceb8867"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Theorem errorBoundedMultNeg : forall P, RoundedModeP b radix P -> forall p q f : float, Fbounded b p -> Fbounded b q -> (p <= 0)%R -> (0 <= q)%R -> (- dExp b <= Fexp p + Fexp q)%Z -> P (p * q)%R f -> exists r : float, r = (p * q - f)%R :>R /\\ Fbounded b r /\\ Fexp r = (Fexp p + Fexp q)%Z.",
            "VernacStartTheoremProof",
            "b53096d621acfae75e37c8d501275e92fb1cb45f"
        ],
        [
            "intros P H p q f H0 H1 H2 H3 H4 H5.",
            "VernacExtend",
            "4956468dcfd97c01aafa5ffb7d4e22bf59da40a1"
        ],
        [
            "generalize errorBoundedMultMin errorBoundedMultMax; intros H6 H7.",
            "VernacExtend",
            "0a3876c08fc09bb1e9fa2e17ceaf766f5530cfb5"
        ],
        [
            "cut (MinOrMaxP b radix P); [ intros | case H; intros H'1 (H'2, (H'3, H'4)); auto ].",
            "VernacExtend",
            "f2b4f5ca15a80ce93a480957ed2b99309d5da489"
        ],
        [
            "case (H8 (p * q)%R f); auto; intros H9.",
            "VernacExtend",
            "fb47d74dc665116be00dd7752654c7415928d3d8"
        ],
        [
            "generalize (H7 (Fopp p) q (Fopp f)); intros H12.",
            "VernacExtend",
            "1696875166010a7061acf1dd7331ccadef04f5ec"
        ],
        [
            "lapply H12; auto with float; intros H10; clear H12.",
            "VernacExtend",
            "d33e516fa8ffb53fcdf25eafb301c4bb3d467449"
        ],
        [
            "lapply H10; auto; intros H12; clear H10.",
            "VernacExtend",
            "39e41a11b73f149b74e70cb237914ea8249aaa19"
        ],
        [
            "lapply H12; [ intros H10 | unfold FtoRradix in |- *; rewrite Fopp_correct; auto with real ]; clear H12.",
            "VernacExtend",
            "32d7f97dc98d380210d91bb1ff01e6cb1473e52b"
        ],
        [
            "lapply H10; auto; intros H12; clear H10.",
            "VernacExtend",
            "39e41a11b73f149b74e70cb237914ea8249aaa19"
        ],
        [
            "lapply H12; [ intros H10 | simpl in |- *; auto ]; clear H12.",
            "VernacExtend",
            "a85d4e804f7e4a71bd3b42e382b604056d3fccb1"
        ],
        [
            "lapply H10; [ intros H12 | idtac ]; clear H10.",
            "VernacExtend",
            "a5baffb54a64409319b7513cf2c2425782d1d22c"
        ],
        [
            "2: replace (Fopp p * q)%R with (- (p * q))%R; [ apply MinOppMax; auto | idtac ].",
            "VernacExtend",
            "037a5f5df6b272049426d1938abf7281d165e431"
        ],
        [
            "2: unfold FtoRradix in |- *; rewrite Fopp_correct; auto with real.",
            "VernacExtend",
            "70534c26a29a81d4c3a50aeeab2f337c74f2b4a3"
        ],
        [
            "elim H12; intros r H10; clear H12; elim H10; intros H11 H12; clear H10.",
            "VernacExtend",
            "89861ea9cb9403c27cdb5b237df4514541709d6e"
        ],
        [
            "elim H12; clear H12; intros H10 H12.",
            "VernacExtend",
            "6ffee0767479bf20abecc22ac0daac5dd23beb21"
        ],
        [
            "exists (Fopp r); split; [ generalize H11 | split; auto with float ].",
            "VernacExtend",
            "5e620d78a0eceeb557f70a14aa74aa02e55499f4"
        ],
        [
            "unfold FtoRradix in |- *; repeat rewrite Fopp_correct; intros H13; rewrite H13; ring.",
            "VernacExtend",
            "d36fbaff04faca4cab612ee7e60ebd1589b63a82"
        ],
        [
            "generalize (H6 (Fopp p) q (Fopp f)); intros H12.",
            "VernacExtend",
            "77b0b87c8a726830276c9a010d880822230e988b"
        ],
        [
            "lapply H12; auto with float; intros H10; clear H12.",
            "VernacExtend",
            "d33e516fa8ffb53fcdf25eafb301c4bb3d467449"
        ],
        [
            "lapply H10; auto; intros H12; clear H10.",
            "VernacExtend",
            "39e41a11b73f149b74e70cb237914ea8249aaa19"
        ],
        [
            "lapply H12; [ intros H10 | unfold FtoRradix in |- *; rewrite Fopp_correct; auto with real ]; clear H12.",
            "VernacExtend",
            "32d7f97dc98d380210d91bb1ff01e6cb1473e52b"
        ],
        [
            "lapply H10; auto; intros H12; clear H10.",
            "VernacExtend",
            "39e41a11b73f149b74e70cb237914ea8249aaa19"
        ],
        [
            "lapply H12; [ intros H10 | simpl in |- *; auto ]; clear H12.",
            "VernacExtend",
            "a85d4e804f7e4a71bd3b42e382b604056d3fccb1"
        ],
        [
            "lapply H10; [ intros H12 | idtac ]; clear H10.",
            "VernacExtend",
            "a5baffb54a64409319b7513cf2c2425782d1d22c"
        ],
        [
            "2: replace (Fopp p * q)%R with (- (p * q))%R; [ apply MaxOppMin; auto | idtac ].",
            "VernacExtend",
            "76085650443e084c1c4450660f3d0a0531a434de"
        ],
        [
            "2: unfold FtoRradix in |- *; rewrite Fopp_correct; auto with real.",
            "VernacExtend",
            "70534c26a29a81d4c3a50aeeab2f337c74f2b4a3"
        ],
        [
            "elim H12; intros r H10; clear H12; elim H10; intros H11 H12; clear H10.",
            "VernacExtend",
            "89861ea9cb9403c27cdb5b237df4514541709d6e"
        ],
        [
            "elim H12; clear H12; intros H10 H12.",
            "VernacExtend",
            "6ffee0767479bf20abecc22ac0daac5dd23beb21"
        ],
        [
            "exists (Fopp r); split; [ generalize H11 | split; auto with float ].",
            "VernacExtend",
            "5e620d78a0eceeb557f70a14aa74aa02e55499f4"
        ],
        [
            "unfold FtoRradix in |- *; repeat rewrite Fopp_correct; intros H13; rewrite H13; ring.",
            "VernacExtend",
            "d36fbaff04faca4cab612ee7e60ebd1589b63a82"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Theorem errorBoundedMult : forall P, RoundedModeP b radix P -> forall p q f : float, Fbounded b p -> Fbounded b q -> (- dExp b <= Fexp p + Fexp q)%Z -> P (p * q)%R f -> exists r : float, r = (p * q - f)%R :>R /\\ Fbounded b r /\\ Fexp r = (Fexp p + Fexp q)%Z.",
            "VernacStartTheoremProof",
            "dc63cac172509ac7a279cb9a6d23841506b41395"
        ],
        [
            "intros P H p q f H0 H1 H2 H3.",
            "VernacExtend",
            "202a853e29d112532dd408e77f5016ea5c5399f1"
        ],
        [
            "case (Rle_or_lt 0 p); intros H4; case (Rle_or_lt 0 q); intros H5.",
            "VernacExtend",
            "cfaacbed31bfe71b704e47d1e5f49889758d5d01"
        ],
        [
            "apply errorBoundedMultPos with P; auto.",
            "VernacExtend",
            "677d9c3b7c55476fa5ed88600e8c9b95efadb637"
        ],
        [
            "replace (Fexp p) with (Fexp (Fopp p)); auto with float.",
            "VernacExtend",
            "310284b6d42401405dc2b2de3164702850e16ab0"
        ],
        [
            "replace (Fexp q) with (Fexp (Fopp q)); auto with float.",
            "VernacExtend",
            "9d430cccdc818bf6a0797dff916fcdbf535d1fa6"
        ],
        [
            "cut ((p * q)%R = (Fopp p * Fopp q)%R); [ intros H6; rewrite H6 | idtac ].",
            "VernacExtend",
            "56a1a47b7231d38c1a13b3e19e1a5f2edcfca0c1"
        ],
        [
            "apply errorBoundedMultNeg with P; auto with float real.",
            "VernacExtend",
            "7a3317440ea0157c84d4479803fcd28df696cd0d"
        ],
        [
            "unfold FtoRradix in |- *; rewrite Fopp_correct; auto with real.",
            "VernacExtend",
            "5806d51ffb537355f3b97b7dbadcb1cad937b8ce"
        ],
        [
            "unfold FtoRradix in |- *; rewrite Fopp_correct; auto with real.",
            "VernacExtend",
            "5806d51ffb537355f3b97b7dbadcb1cad937b8ce"
        ],
        [
            "rewrite <- H6; auto.",
            "VernacExtend",
            "1014ae15ea6d7b5f7bb53f6d5ecb5fb4029ac6df"
        ],
        [
            "unfold FtoRradix in |- *; repeat rewrite Fopp_correct; ring.",
            "VernacExtend",
            "216a11721b4b7d252728f115120bad934d8b89a9"
        ],
        [
            "apply errorBoundedMultNeg with P; auto with float real.",
            "VernacExtend",
            "7a3317440ea0157c84d4479803fcd28df696cd0d"
        ],
        [
            "replace (Fexp p) with (Fexp (Fopp p)); auto with float.",
            "VernacExtend",
            "310284b6d42401405dc2b2de3164702850e16ab0"
        ],
        [
            "replace (Fexp q) with (Fexp (Fopp q)); auto with float.",
            "VernacExtend",
            "9d430cccdc818bf6a0797dff916fcdbf535d1fa6"
        ],
        [
            "cut ((p * q)%R = (Fopp p * Fopp q)%R); [ intros H6; rewrite H6 | idtac ].",
            "VernacExtend",
            "56a1a47b7231d38c1a13b3e19e1a5f2edcfca0c1"
        ],
        [
            "apply errorBoundedMultPos with P; auto with float real.",
            "VernacExtend",
            "0d60179853b8232295eef85fb706e4a15210d78a"
        ],
        [
            "unfold FtoRradix in |- *; rewrite Fopp_correct; auto with real.",
            "VernacExtend",
            "5806d51ffb537355f3b97b7dbadcb1cad937b8ce"
        ],
        [
            "unfold FtoRradix in |- *; rewrite Fopp_correct; auto with real.",
            "VernacExtend",
            "5806d51ffb537355f3b97b7dbadcb1cad937b8ce"
        ],
        [
            "rewrite <- H6; auto.",
            "VernacExtend",
            "1014ae15ea6d7b5f7bb53f6d5ecb5fb4029ac6df"
        ],
        [
            "unfold FtoRradix in |- *; repeat rewrite Fopp_correct; ring.",
            "VernacExtend",
            "216a11721b4b7d252728f115120bad934d8b89a9"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Theorem errorBoundedMultExp_aux : forall n1 n2 : Z, (Zabs n1 < Zpos (vNum b))%Z -> (Zabs n2 < Zpos (vNum b))%Z -> (exists ny : Z, (exists ey : Z, (n1 * n2)%R = (ny * powerRZ radix ey)%R :>R /\\ (Zabs ny < Zpos (vNum b))%Z)) -> exists nx : Z, (exists ex : Z, (n1 * n2)%R = (nx * powerRZ radix ex)%R :>R /\\ (Zabs nx < Zpos (vNum b))%Z /\\ (0 <= ex)%Z /\\ (ex <= precision)%Z).",
            "VernacStartTheoremProof",
            "872f382d6e674e974acd2581f2cc2afab4e05f46"
        ],
        [
            "intros n1 n2 H H0 H1.",
            "VernacExtend",
            "571ef9310b34f0ca028898970488723caa2d487b"
        ],
        [
            "case H1; intros ny (ey, (H2, H3)).",
            "VernacExtend",
            "91216f795be4a09f215c3ac003d908ba56f0b2a0"
        ],
        [
            "case (Zle_or_lt 0 ey); intros Zl1.",
            "VernacExtend",
            "e5c62e74819521810a3ecd84ccdd59597d24e782"
        ],
        [
            "case (Zle_or_lt ey precision); intros Zl2.",
            "VernacExtend",
            "582de41e79d2e46f9fdc96281feec857072668bd"
        ],
        [
            "exists ny; exists ey; repeat (split; auto).",
            "VernacExtend",
            "69e44ff86d1d66872d8408f74d00059c824531cc"
        ],
        [
            "exists (ny * Zpower_nat radix (Zabs_nat (ey - precision)))%Z; exists (Z_of_nat precision); repeat (split; auto with zarith).",
            "VernacExtend",
            "33325fca71f7e257bcf0b89679f053685386d44e"
        ],
        [
            "replace (IZR (ny * Zpower_nat radix (Zabs_nat (ey - precision)))) with (ny * powerRZ radix (ey - precision))%R.",
            "VernacExtend",
            "e7351766e96a4c1f0d60480de77e9f09bd07a110"
        ],
        [
            "rewrite Rmult_assoc; rewrite <- powerRZ_add; auto with zarith real.",
            "VernacExtend",
            "002d879d91bc2b952b1d8e8dd5c681985b1b8252"
        ],
        [
            "replace (ey - precision + precision)%Z with ey; [ auto | ring ].",
            "VernacExtend",
            "3ad71fd9cbaa31a140ce2fc59573176bed36a390"
        ],
        [
            "rewrite Rmult_IZR.",
            "VernacExtend",
            "b795c3b06d24e235dcd0b237a976408f905ddd8d"
        ],
        [
            "rewrite Zpower_nat_powerRZ_absolu; auto with real zarith.",
            "VernacExtend",
            "133153c4eca7a7a76b838b094c9b5ab9aca31e84"
        ],
        [
            "rewrite Zabs_Zmult.",
            "VernacExtend",
            "f459c70d0601b9eab86bcf62dfb70a911d8ba871"
        ],
        [
            "apply lt_IZR; apply Rmult_lt_reg_l with (r := powerRZ radix precision); auto with real zarith.",
            "VernacExtend",
            "63346dc7866b28f2b3f28afa950da8608f4e501e"
        ],
        [
            "repeat rewrite (fun x y => Rmult_comm (powerRZ x y)).",
            "VernacExtend",
            "13e505b0ba2ab0d46091f675ca7e8b7687ec1a11"
        ],
        [
            "rewrite Rmult_IZR.",
            "VernacExtend",
            "b795c3b06d24e235dcd0b237a976408f905ddd8d"
        ],
        [
            "rewrite Rmult_assoc.",
            "VernacExtend",
            "323caa1eefcb937c18a66a7144c1e29b2c1a3e40"
        ],
        [
            "rewrite (Zabs_eq (Zpower_nat radix (Zabs_nat (ey - precision)))); auto with zarith.",
            "VernacExtend",
            "f29d0ceb8be43fae8fb21c5c46efee36e94a268f"
        ],
        [
            "rewrite Zpower_nat_powerRZ_absolu; auto with real zarith.",
            "VernacExtend",
            "133153c4eca7a7a76b838b094c9b5ab9aca31e84"
        ],
        [
            "rewrite <- powerRZ_add; auto with real zarith.",
            "VernacExtend",
            "6287894e7857c98d78d94546c9dc60a4fd443706"
        ],
        [
            "replace (ey - precision + precision)%Z with ey; [ idtac | ring ].",
            "VernacExtend",
            "fa5175cbe427386464939b7690caea25f1d128a5"
        ],
        [
            "replace (powerRZ radix precision) with (IZR (Zpos (vNum b))); [ idtac | rewrite pGivesBound; rewrite <- Zpower_nat_powerRZ_absolu; try rewrite absolu_INR; auto with zarith ].",
            "VernacExtend",
            "8e70e79ee5370e776cd0d38a09753b61dbf36a91"
        ],
        [
            "rewrite <- (fun x y => Rabs_pos_eq (powerRZ x y)); auto with real zarith.",
            "VernacExtend",
            "c95805e6e3394f7ac57bf0b1825fb8af85d6c29f"
        ],
        [
            "rewrite <- Faux.Rabsolu_Zabs; rewrite <- Rabs_mult; rewrite <- H2.",
            "VernacExtend",
            "dc5bea6ff9cfa9da4320411b38112f523126ec55"
        ],
        [
            "rewrite Rabs_mult; repeat rewrite Faux.Rabsolu_Zabs; auto with real zarith.",
            "VernacExtend",
            "4b532b2ce30936ba7a5170548fc7914f91224342"
        ],
        [
            "case (Zle_lt_or_eq 0 (Zabs n2)); auto with zarith; intros Z1.",
            "VernacExtend",
            "6c96e73b190116099397c5ff17416a1514c8cec5"
        ],
        [
            "apply Rlt_trans with (Zpos (vNum b) * Zabs n2)%R; auto with real zarith.",
            "VernacExtend",
            "1db217b03c319c9505c03c0bbca377d7eae97c25"
        ],
        [
            "rewrite <- Z1; auto with real zarith.",
            "VernacExtend",
            "b8ee42bd7025415e4e8866d45651ba56dc940174"
        ],
        [
            "replace (Zabs n1 * 0%Z)%R with (0 * Zpos (vNum b))%R; [ auto with real zarith | simpl; ring ].",
            "VernacExtend",
            "5b8ddcc380a24126b7bd211d75451de446434096"
        ],
        [
            "exists (n1 * n2)%Z; exists 0%Z; repeat (split; auto with zarith).",
            "VernacExtend",
            "ee732331d0dd346a32127f1c921c3157af015a04"
        ],
        [
            "rewrite Rmult_IZR; rewrite powerRZ_O; ring.",
            "VernacExtend",
            "18a7f8ea9c0447c6b98bc7c0900934e80f64e0ce"
        ],
        [
            "apply lt_IZR.",
            "VernacExtend",
            "165b941162ea1938aa71e78f57835b8df85de779"
        ],
        [
            "rewrite <- Faux.Rabsolu_Zabs; rewrite Rmult_IZR; rewrite H2.",
            "VernacExtend",
            "3be6790b7982964f8469cdd342293de2d813f847"
        ],
        [
            "rewrite Rabs_mult.",
            "VernacExtend",
            "0a976c5fce10a63ed58fa2e07dd76a462e6697c3"
        ],
        [
            "apply Rle_lt_trans with (Rabs ny).",
            "VernacExtend",
            "c79da381614f1595dd6bbd28515983d912df3c27"
        ],
        [
            "pattern (Rabs ny) at 2 in |- *; replace (Rabs ny) with (Rabs ny * 1)%R; [ apply Rmult_le_compat_l | ring ]; auto with arith real.",
            "VernacExtend",
            "01bdef5bc97b3d4e29fed23b55ad29d45635ae9b"
        ],
        [
            "rewrite (Rabs_pos_eq (powerRZ radix ey)); [ idtac | apply powerRZ_le; auto with arith real ].",
            "VernacExtend",
            "c989bfc8c0068d66a2b607c8801282241a7687d1"
        ],
        [
            "replace 1%R with (powerRZ radix 0); [ apply Rle_powerRZ | simpl in |- * ]; auto with real arith zarith.",
            "VernacExtend",
            "67eecf44f794e905a36230cea784c65a523a3436"
        ],
        [
            "rewrite Faux.Rabsolu_Zabs; auto with real zarith.",
            "VernacExtend",
            "b8bd2eae3ef0d7fdf303e196bd25a2b663514825"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Theorem errorBoundedMultExpPos : forall P, RoundedModeP b radix P -> forall p q pq : float, Fbounded b p -> Fbounded b q -> (0 <= p)%R -> (0 <= q)%R -> P (p * q)%R pq -> (- dExp b <= Fexp p + Fexp q)%Z -> ex (fun r : float => ex (fun s : float => Fbounded b r /\\ Fbounded b s /\\ r = pq :>R /\\ s = (p * q - r)%R :>R /\\ Fexp s = (Fexp p + Fexp q)%Z :>Z /\\ (Fexp s <= Fexp r)%Z /\\ (Fexp r <= precision + (Fexp p + Fexp q))%Z)).",
            "VernacStartTheoremProof",
            "0215e403b57166913b23f42c15666d1b426370a8"
        ],
        [
            "intros P H p q pq H0 H1 H2 H3 H4 H5.",
            "VernacExtend",
            "dee6fa3d70d47b0f49102bda3ea746bad932c89b"
        ],
        [
            "case (multExpUpperBound P H p q pq); auto; intros r (H'1, (H'2, H'3)).",
            "VernacExtend",
            "7d5ff0b61ac637e84f6bb64a12497534f7b9e71f"
        ],
        [
            "case (Req_dec (p * q - pq) 0); intros H6.",
            "VernacExtend",
            "cb240018f40ea8d3706e870b5b5ae45523e4a220"
        ],
        [
            "case (Req_dec pq 0); intros H7.",
            "VernacExtend",
            "8485363e50e740a89a46172e677550277295d69b"
        ],
        [
            "cut (Fbounded b (Fzero (Fexp p + Fexp q))); [ intros Fb1 | idtac ].",
            "VernacExtend",
            "d066a90be12a44ea203674265372b848622dfc70"
        ],
        [
            "exists (Fzero (Fexp p + Fexp q)); exists (Fzero (Fexp p + Fexp q)); repeat (split; simpl in |- *; auto with zarith).",
            "VernacExtend",
            "827e06a3c2aa25aa30079440c802c91749fd849b"
        ],
        [
            "rewrite H7; unfold FtoRradix in |- *; apply FzeroisReallyZero.",
            "VernacExtend",
            "30cc0c6a1fc4cd153515bd55494ad42cef6c65f5"
        ],
        [
            "unfold FtoRradix in |- *; rewrite FzeroisReallyZero; rewrite <- H7.",
            "VernacExtend",
            "c6b1998f89c7c6456e2b25c6923f9961d2f6b12e"
        ],
        [
            "pattern (FtoRradix pq) at 1 in |- *; rewrite H7; auto with real.",
            "VernacExtend",
            "2cd3e880b111b88fff286cb118b3c4dca1eba81b"
        ],
        [
            "repeat (split; auto); simpl in |- *; auto with arith zarith.",
            "VernacExtend",
            "fb18c77dfdac6a27c1701e1f19f2d810b1959a98"
        ],
        [
            "case (errorBoundedMultExp_aux (Fnum p) (Fnum q)); auto with float real zarith.",
            "VernacExtend",
            "a0d0ac0770418f1fb4acffaca2fffba0720a90ce"
        ],
        [
            "exists (Fnum pq); exists (Fexp pq - (Fexp p + Fexp q))%Z; split.",
            "VernacExtend",
            "8a0ab5eb5fcec6d02a37d7a091864ce52ceda59f"
        ],
        [
            "apply Rmult_eq_reg_l with (powerRZ radix (Fexp p + Fexp q)); auto with real zarith.",
            "VernacExtend",
            "77d4fc9bf0764d14d0649ae6edb4de98dc803dbc"
        ],
        [
            "repeat rewrite (fun x y => Rmult_comm (powerRZ x y)).",
            "VernacExtend",
            "13e505b0ba2ab0d46091f675ca7e8b7687ec1a11"
        ],
        [
            "apply trans_eq with (p * q)%R; auto.",
            "VernacExtend",
            "54a884bc35f05aaf1328d081514b78f333a8401a"
        ],
        [
            "rewrite <- (Fmult_correct radix); auto with real zarith; unfold FtoRradix, FtoR, Fmult in |- *; simpl in |- *; rewrite Rmult_IZR; auto.",
            "VernacExtend",
            "05bcca65fc559cb5fc0548dbe7a439a4be8fb6d6"
        ],
        [
            "apply trans_eq with (FtoRradix pq); auto with real.",
            "VernacExtend",
            "84463de27b10ebea0cca74123cdc13d950a833a0"
        ],
        [
            "rewrite Rmult_assoc; rewrite <- powerRZ_add; auto with real zarith.",
            "VernacExtend",
            "19ddab8e6795561b7a0200abde2d905e689d6c3b"
        ],
        [
            "replace (Fexp pq - (Fexp p + Fexp q) + (Fexp p + Fexp q))%Z with (Fexp pq); auto; ring.",
            "VernacExtend",
            "1bdad84debbae73ace400a383439c05f1ec48ee6"
        ],
        [
            "cut (Fbounded b pq); [ intros Z1; case Z1 | idtac ]; auto with real zarith.",
            "VernacExtend",
            "1180375447527b72b0cbb7d1c551719857a40070"
        ],
        [
            "apply (RoundedModeBounded b radix P (p * q)); auto.",
            "VernacExtend",
            "99d60f9e47fad87f1fed642e6acbfc93de7a073e"
        ],
        [
            "intros nx (ex, (H'4, (H'5, (H'6, H'7)))).",
            "VernacExtend",
            "e27ba19906d9712ca3d1192fee8f3070ba991c58"
        ],
        [
            "cut (FtoRradix pq = FtoRradix (Float nx (ex + (Fexp p + Fexp q))) :>R); [ intros Eq1 | idtac ].",
            "VernacExtend",
            "d88a4248816690cf6f07b8210b17d652e2069143"
        ],
        [
            "exists (Float nx (ex + (Fexp p + Fexp q))); exists (Fzero (Fexp p + Fexp q)); repeat (split; simpl in |- *; auto with real zarith).",
            "VernacExtend",
            "941962e2d2efc2359f2dcd6bcd433cd13aff9f35"
        ],
        [
            "rewrite <- Eq1; rewrite H6; apply (FzeroisReallyZero radix).",
            "VernacExtend",
            "4296a6d421b4c27208aab72ed3c38b33a7d0d08a"
        ],
        [
            "replace (FtoRradix pq) with (p * q)%R.",
            "VernacExtend",
            "e877c894558f01e2fd9ac33c1bd2eceb77839bc7"
        ],
        [
            "unfold FtoRradix in |- *; unfold FtoR in |- *; simpl in |- *.",
            "VernacExtend",
            "8c0835d31a3f923ae6ce1e9ef3140f1250ad69a6"
        ],
        [
            "rewrite powerRZ_add; auto with zarith real.",
            "VernacExtend",
            "29b50a4d760604f1e24a430026b9d9245cab4c22"
        ],
        [
            "repeat rewrite <- Rmult_assoc; rewrite <- H'4; rewrite powerRZ_add; [ ring | auto with zarith real ].",
            "VernacExtend",
            "cf2111d1fee3735b305ba656ec0e5202ccc42f91"
        ],
        [
            "replace (FtoRradix p * FtoRradix q)%R with (pq + (FtoRradix p * FtoRradix q - FtoRradix pq))%R; [ rewrite H6 | idtac ]; ring.",
            "VernacExtend",
            "b6e6bbe762c3d909a9d50e4b016d71fde83f0937"
        ],
        [
            "case (errorBoundedMultPos P H p q pq); auto.",
            "VernacExtend",
            "c6f06e1781a2702e09df1c96f25f1ba6cb526a02"
        ],
        [
            "intros s (H'4, (H'5, H'6)).",
            "VernacExtend",
            "f4f427fd662e25694508bfd616992773c7c2a614"
        ],
        [
            "exists r; exists s; repeat (split; auto with zarith).",
            "VernacExtend",
            "153ef857af7e1eb2d342157f3c105a2c1a9f34cc"
        ],
        [
            "rewrite H'2; auto.",
            "VernacExtend",
            "2c2cd2310e6d6c30ae4cdcfb896dfe62bf83deb1"
        ],
        [
            "apply Zlt_le_weak; apply RoundedModeErrorExpStrict with b radix precision P (p * q)%R; auto.",
            "VernacExtend",
            "c7d06c5502493e6ce27e67a7b766f1d0f18a6915"
        ],
        [
            "cut (CompatibleP b radix P); [ intros H'7 | case H; try intros H'7 (H'8, (H'9, H'10)); auto ].",
            "VernacExtend",
            "8b67643ba85c45198941aa9277c1c88eeea28086"
        ],
        [
            "apply H'7 with (p * q)%R pq; auto with real.",
            "VernacExtend",
            "90735c9d0a8f51d466d30584b90e013003ff9fb0"
        ],
        [
            "fold FtoRradix in |- *; rewrite H'2; auto with real.",
            "VernacExtend",
            "1f4f1847adf311690e23d23d21d0ce03016b0b09"
        ],
        [
            "fold FtoRradix in |- *; rewrite H'4; auto with real.",
            "VernacExtend",
            "8db61a9c2c725ab27c7fdf7bd05dc591882f1369"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Theorem errorBoundedMultExp : forall P, (RoundedModeP b radix P) -> forall p q pq : float, (Fbounded b p) -> (Fbounded b q) -> (P (p * q)%R pq) -> (-(dExp b) <= Fexp p + Fexp q)%Z -> exists r : float, exists s : float, (Fbounded b r) /\\ (Fbounded b s) /\\ r = pq :>R /\\ s = (p * q - r)%R :>R /\\ (Fexp s = Fexp p + Fexp q)%Z /\\ (Fexp s <= Fexp r)%Z /\\ (Fexp r <= precision + (Fexp p + Fexp q))%Z.",
            "VernacStartTheoremProof",
            "9f5a5e5738c67ba66ccd2612cf70c835f5f1ce74"
        ],
        [
            "intros P H p q pq H1 H2 H3 H4.",
            "VernacExtend",
            "bafcec99441bcc72654201e4825f8454c39bd6d6"
        ],
        [
            "cut (MinOrMaxP b radix P); [ intros | case H; intros H'1 (H'2, (H'3, H'4)); auto ].",
            "VernacExtend",
            "f2b4f5ca15a80ce93a480957ed2b99309d5da489"
        ],
        [
            "case H0 with (p*q)%R pq; auto; intros H0'; clear H0.",
            "VernacExtend",
            "bee3a8e4540f1f6a255e47ab5eae80a5a2e99645"
        ],
        [
            "case (Rle_or_lt 0 p); intros Rl1.",
            "VernacExtend",
            "aa6be71cc2b374664054155571961cb178d1e8df"
        ],
        [
            "case (Rle_or_lt 0 q); intros Rl2.",
            "VernacExtend",
            "dd3354c01b89bf2804a6ce4166e7756d8e40c2dd"
        ],
        [
            "apply (errorBoundedMultExpPos P); auto.",
            "VernacExtend",
            "b26f46666595faa1f612fe80b4d93cabaff58678"
        ],
        [
            "case errorBoundedMultExpPos with (isMax b radix) p (Fopp q) (Fopp pq); auto with float real.",
            "VernacExtend",
            "2d50d5ac4faab2455c47392c27d5c1015e6d4460"
        ],
        [
            "apply MaxRoundedModeP with precision; auto.",
            "VernacExtend",
            "b70fb9f457803c3d01ef4b9eee98cfed8f5cde6d"
        ],
        [
            "rewrite (Fopp_correct radix); auto with real.",
            "VernacExtend",
            "64fc6ff81c9b54de313f403d6d36d11b82b83a3d"
        ],
        [
            "replace (FtoRradix p * FtoRradix (Fopp q))%R with (- (FtoRradix p * FtoRradix q))%R; [apply MinOppMax;auto|idtac].",
            "VernacExtend",
            "52f402f3a0fbdc41295dc90ba00eecd843273578"
        ],
        [
            "rewrite (Fopp_correct radix); fold FtoRradix in |- *; auto with zarith; ring.",
            "VernacExtend",
            "00434c51fcc1d391825d821410f3a7fa51342d60"
        ],
        [
            "intros r (s, (H5, (H6, (H7, (H8, H9))))); exists (Fopp r); exists (Fopp s); repeat (split; simpl in |- *; auto with float real zarith).",
            "VernacExtend",
            "c1edcfbeb711f6872644e0b521c915e9ce659405"
        ],
        [
            "repeat rewrite (Fopp_correct radix); auto with zarith; fold FtoRradix in |- *; rewrite H7; repeat rewrite (Fopp_correct radix); auto with zarith; fold FtoRradix; ring.",
            "VernacExtend",
            "1fe921101b2ff043a2d928269faad4483154143b"
        ],
        [
            "repeat rewrite (Fopp_correct radix); auto with zarith; fold FtoRradix in |- *; rewrite H8; repeat rewrite (Fopp_correct radix); auto with zarith; fold FtoRradix; ring.",
            "VernacExtend",
            "db0c4d7d465fdc01edd49572e63303d9615019f5"
        ],
        [
            "case (Rle_or_lt 0 q); intros Rl2.",
            "VernacExtend",
            "dd3354c01b89bf2804a6ce4166e7756d8e40c2dd"
        ],
        [
            "case errorBoundedMultExpPos with (isMax b radix) (Fopp p) q (Fopp pq); auto with float real.",
            "VernacExtend",
            "c081c465dca066ad060dc180bb9135522d989967"
        ],
        [
            "apply MaxRoundedModeP with precision; auto.",
            "VernacExtend",
            "b70fb9f457803c3d01ef4b9eee98cfed8f5cde6d"
        ],
        [
            "rewrite (Fopp_correct radix); auto with real.",
            "VernacExtend",
            "64fc6ff81c9b54de313f403d6d36d11b82b83a3d"
        ],
        [
            "replace (FtoRradix (Fopp p) * FtoRradix q)%R with (- (FtoRradix p * FtoRradix q))%R; [apply MinOppMax;auto|idtac].",
            "VernacExtend",
            "124c102b2f1c63557d7476cc16798d26a0ae9f68"
        ],
        [
            "rewrite (Fopp_correct radix); fold FtoRradix in |- *; auto with zarith; ring.",
            "VernacExtend",
            "00434c51fcc1d391825d821410f3a7fa51342d60"
        ],
        [
            "intros r (s, (H5, (H6, (H7, (H8, H9))))); exists (Fopp r); exists (Fopp s); repeat (split; simpl in |- *; auto with float real zarith).",
            "VernacExtend",
            "c1edcfbeb711f6872644e0b521c915e9ce659405"
        ],
        [
            "repeat rewrite (Fopp_correct radix); auto with zarith; fold FtoRradix in |- *; rewrite H7; repeat rewrite (Fopp_correct radix); auto with zarith; fold FtoRradix; ring.",
            "VernacExtend",
            "1fe921101b2ff043a2d928269faad4483154143b"
        ],
        [
            "repeat rewrite (Fopp_correct radix); auto with zarith; fold FtoRradix in |- *; rewrite H8; repeat rewrite (Fopp_correct radix); auto with zarith; fold FtoRradix;ring.",
            "VernacExtend",
            "db0c4d7d465fdc01edd49572e63303d9615019f5"
        ],
        [
            "case (errorBoundedMultExpPos P H (Fopp p) (Fopp q) pq); auto with float real.",
            "VernacExtend",
            "44f2280a0c71ecade1ee79040ff7eed4ded8eff3"
        ],
        [
            "rewrite (Fopp_correct radix); auto with real.",
            "VernacExtend",
            "64fc6ff81c9b54de313f403d6d36d11b82b83a3d"
        ],
        [
            "rewrite (Fopp_correct radix); auto with real.",
            "VernacExtend",
            "64fc6ff81c9b54de313f403d6d36d11b82b83a3d"
        ],
        [
            "replace (FtoRradix (Fopp p) * FtoRradix (Fopp q))%R with (FtoRradix p * FtoRradix q)%R; auto; repeat rewrite (Fopp_correct radix); fold FtoRradix in |- *; auto with zarith; ring.",
            "VernacExtend",
            "b32c3104173c610eb51aad9e63b718b56b141f70"
        ],
        [
            "intros r (s, (H5, (H6, (H7, (H8, (H9, (H10, H11))))))); exists r; exists s; repeat (split; simpl in |- *; auto with float real zarith).",
            "VernacExtend",
            "e39a01506d75f87a942b762f2171c7391e6a788a"
        ],
        [
            "fold FtoRradix in |- *; rewrite H8; repeat rewrite (Fopp_correct radix); auto with zarith; fold FtoRradix; ring.",
            "VernacExtend",
            "c69446365041ef39be4e3e9f3efd65951417d149"
        ],
        [
            "case (Rle_or_lt 0 p); intros Rl1.",
            "VernacExtend",
            "aa6be71cc2b374664054155571961cb178d1e8df"
        ],
        [
            "case (Rle_or_lt 0 q); intros Rl2.",
            "VernacExtend",
            "dd3354c01b89bf2804a6ce4166e7756d8e40c2dd"
        ],
        [
            "apply (errorBoundedMultExpPos P); auto.",
            "VernacExtend",
            "b26f46666595faa1f612fe80b4d93cabaff58678"
        ],
        [
            "case errorBoundedMultExpPos with (isMin b radix) p (Fopp q) (Fopp pq); auto with float real.",
            "VernacExtend",
            "fa05da34c64c5115c4b0bfd1ccd0be9ef0ae9d79"
        ],
        [
            "apply MinRoundedModeP with precision; auto.",
            "VernacExtend",
            "6f82ed8988e8803cdc1001de9d5653f29f2428cc"
        ],
        [
            "rewrite (Fopp_correct radix); auto with real.",
            "VernacExtend",
            "64fc6ff81c9b54de313f403d6d36d11b82b83a3d"
        ],
        [
            "replace (FtoRradix p * FtoRradix (Fopp q))%R with (- (FtoRradix p * FtoRradix q))%R; [apply MaxOppMin;auto|idtac].",
            "VernacExtend",
            "2a59c1f3b0586968326604988342008a8db20a0b"
        ],
        [
            "rewrite (Fopp_correct radix); fold FtoRradix in |- *; auto with zarith; ring.",
            "VernacExtend",
            "00434c51fcc1d391825d821410f3a7fa51342d60"
        ],
        [
            "intros r (s, (H5, (H6, (H7, (H8, H9))))); exists (Fopp r); exists (Fopp s); repeat (split; simpl in |- *; auto with float real zarith).",
            "VernacExtend",
            "c1edcfbeb711f6872644e0b521c915e9ce659405"
        ],
        [
            "repeat rewrite (Fopp_correct radix); auto with zarith; fold FtoRradix in |- *; rewrite H7; repeat rewrite (Fopp_correct radix); auto with zarith; fold FtoRradix; ring.",
            "VernacExtend",
            "1fe921101b2ff043a2d928269faad4483154143b"
        ],
        [
            "repeat rewrite (Fopp_correct radix); auto with zarith; fold FtoRradix in |- *; rewrite H8; repeat rewrite (Fopp_correct radix); auto with zarith; fold FtoRradix; ring.",
            "VernacExtend",
            "db0c4d7d465fdc01edd49572e63303d9615019f5"
        ],
        [
            "case (Rle_or_lt 0 q); intros Rl2.",
            "VernacExtend",
            "dd3354c01b89bf2804a6ce4166e7756d8e40c2dd"
        ],
        [
            "case errorBoundedMultExpPos with (isMin b radix) (Fopp p) q (Fopp pq); auto with float real.",
            "VernacExtend",
            "1ff427d9a65abfae8b1e03e3ede369db5249e313"
        ],
        [
            "apply MinRoundedModeP with precision; auto.",
            "VernacExtend",
            "6f82ed8988e8803cdc1001de9d5653f29f2428cc"
        ],
        [
            "rewrite (Fopp_correct radix); auto with real.",
            "VernacExtend",
            "64fc6ff81c9b54de313f403d6d36d11b82b83a3d"
        ],
        [
            "replace (FtoRradix (Fopp p) * FtoRradix q)%R with (- (FtoRradix p * FtoRradix q))%R; [apply MaxOppMin;auto|idtac].",
            "VernacExtend",
            "d02d0435147476ac8a7995189635b994668d2435"
        ],
        [
            "rewrite (Fopp_correct radix); fold FtoRradix in |- *; auto with zarith; ring.",
            "VernacExtend",
            "00434c51fcc1d391825d821410f3a7fa51342d60"
        ],
        [
            "intros r (s, (H5, (H6, (H7, (H8, H9))))); exists (Fopp r); exists (Fopp s); repeat (split; simpl in |- *; auto with float real zarith).",
            "VernacExtend",
            "c1edcfbeb711f6872644e0b521c915e9ce659405"
        ],
        [
            "repeat rewrite (Fopp_correct radix); auto with zarith; fold FtoRradix in |- *; rewrite H7; repeat rewrite (Fopp_correct radix); auto with zarith; fold FtoRradix; ring.",
            "VernacExtend",
            "1fe921101b2ff043a2d928269faad4483154143b"
        ],
        [
            "repeat rewrite (Fopp_correct radix); auto with zarith; fold FtoRradix in |- *; rewrite H8; repeat rewrite (Fopp_correct radix); auto with zarith; fold FtoRradix;ring.",
            "VernacExtend",
            "db0c4d7d465fdc01edd49572e63303d9615019f5"
        ],
        [
            "case (errorBoundedMultExpPos P H (Fopp p) (Fopp q) pq); auto with float real.",
            "VernacExtend",
            "44f2280a0c71ecade1ee79040ff7eed4ded8eff3"
        ],
        [
            "rewrite (Fopp_correct radix); auto with real.",
            "VernacExtend",
            "64fc6ff81c9b54de313f403d6d36d11b82b83a3d"
        ],
        [
            "rewrite (Fopp_correct radix); auto with real.",
            "VernacExtend",
            "64fc6ff81c9b54de313f403d6d36d11b82b83a3d"
        ],
        [
            "replace (FtoRradix (Fopp p) * FtoRradix (Fopp q))%R with (FtoRradix p * FtoRradix q)%R; auto; repeat rewrite (Fopp_correct radix); fold FtoRradix in |- *; auto with zarith; ring.",
            "VernacExtend",
            "b32c3104173c610eb51aad9e63b718b56b141f70"
        ],
        [
            "intros r (s, (H5, (H6, (H7, (H8, (H9, (H10, H11))))))); exists r; exists s; repeat (split; simpl in |- *; auto with float real zarith).",
            "VernacExtend",
            "e39a01506d75f87a942b762f2171c7391e6a788a"
        ],
        [
            "fold FtoRradix in |- *; rewrite H8; repeat rewrite (Fopp_correct radix); auto with zarith; fold FtoRradix; ring.",
            "VernacExtend",
            "c69446365041ef39be4e3e9f3efd65951417d149"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "End FRoundP.",
            "VernacEndSegment",
            "520cac324389b919df39c8e053eb70486a239da0"
        ]
    ],
    "proofs": [
        {
            "name": "multExpMin",
            "line_nb": 188,
            "steps": [
                {
                    "command": [
                        "intros P H' p q pq H'0.",
                        "VernacExtend",
                        "69c90d3f381beb533d8720210e5eb470215883fc"
                    ]
                },
                {
                    "command": [
                        "case (RoundedModeRep b radix precision) with (p := Fmult p q) (q := pq) (P := P); auto with zarith.",
                        "VernacExtend",
                        "c88a8d08a51c9b68aa8698ff20d5ccb6d4abfd90"
                    ]
                },
                {
                    "command": [
                        "rewrite Fmult_correct; auto with zarith.",
                        "VernacExtend",
                        "b97583e4fb4965b156b4524b1970732b209e1c6a"
                    ]
                },
                {
                    "command": [
                        "simpl in |- *; intros x H'1.",
                        "VernacExtend",
                        "45c52281d62221d6f6b7271a356a4d129b156ba2"
                    ]
                },
                {
                    "command": [
                        "case (eqExpLess _ radixMoreThanOne b) with (p := pq) (q := Float x (Fexp (Fmult p q))); auto.",
                        "VernacExtend",
                        "fe429540273def8a9effaba90593e58046630184"
                    ]
                },
                {
                    "command": [
                        "apply RoundedModeBounded with (radix := radix) (P := P) (r := (p * q)%R); auto.",
                        "VernacExtend",
                        "314b755eefac8e9be0825f1a24033c69e0296022"
                    ]
                },
                {
                    "command": [
                        "simpl in |- *; intros x0 H'2; elim H'2; intros H'3 H'4; elim H'4; intros H'5 H'6; clear H'4 H'2.",
                        "VernacExtend",
                        "5a1b146986b3c7959199dd59148dd3a8e29510d2"
                    ]
                },
                {
                    "command": [
                        "exists x0; split; [ idtac | split ]; auto.",
                        "VernacExtend",
                        "b83eae55d733a50b008c7ceeb2e58a6fe45ff027"
                    ]
                },
                {
                    "command": [
                        "unfold FtoRradix in |- *; rewrite H'5; auto.",
                        "VernacExtend",
                        "9144210a6274975e9e2b7e434cfa7f2fc754e7ba"
                    ]
                },
                {
                    "command": [
                        "apply le_IZR; auto.",
                        "VernacExtend",
                        "5ddae610de44a290611008bca1b760849106ddb9"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "multExpUpperBound",
            "line_nb": 200,
            "steps": [
                {
                    "command": [
                        "intros P H' p q pq H'0 H'1 H'2 H'3.",
                        "VernacExtend",
                        "1878168cae608e068c7184cde61a1705541be9b4"
                    ]
                },
                {
                    "command": [
                        "replace (precision + (Fexp p + Fexp q))%Z with (Fexp (Float (pPred (vNum b)) (precision + (Fexp p + Fexp q)))); [ idtac | simpl in |- *; auto ].",
                        "VernacExtend",
                        "fc6469dc8fa74b8bd5f8e9ab26c730d853ae33f2"
                    ]
                },
                {
                    "command": [
                        "unfold FtoRradix in |- *; apply eqExpMax; auto.",
                        "VernacExtend",
                        "f44c675836e858d2e652687c7ef9b745fca35566"
                    ]
                },
                {
                    "command": [
                        "apply RoundedModeBounded with (radix := radix) (P := P) (r := (p * q)%R); auto; auto.",
                        "VernacExtend",
                        "2c42d969e4bbad8b0292ccd5976b2080b8feb8e0"
                    ]
                },
                {
                    "command": [
                        "unfold pPred in |- *; apply maxFbounded; auto.",
                        "VernacExtend",
                        "46c0eb87b7cd7e05e3d590672f1946b47665bf68"
                    ]
                },
                {
                    "command": [
                        "apply Zle_trans with (1 := H'3); auto with zarith.",
                        "VernacExtend",
                        "e86e62392ff22e60827fab4a432b560be7b71b72"
                    ]
                },
                {
                    "command": [
                        "replace (FtoR radix (Float (pPred (vNum b)) (precision + (Fexp p + Fexp q)))) with (radix * Float (pPred (vNum b)) (pred precision + (Fexp p + Fexp q)))%R.",
                        "VernacExtend",
                        "9d7a58479d3ef3f4c5963bdaf43909679bf31061"
                    ]
                },
                {
                    "command": [
                        "rewrite Fabs_correct; auto with zarith.",
                        "VernacExtend",
                        "cbf371ebf2236198f1663453e3d81b5052108e31"
                    ]
                },
                {
                    "command": [
                        "unfold FtoRradix in |- *; apply RoundedModeMultAbs with (b := b) (precision := precision) (P := P) (r := (p * q)%R); auto.",
                        "VernacExtend",
                        "8999fcb898f42f6e53d8d7fc7f95f12383eef176"
                    ]
                },
                {
                    "command": [
                        "unfold pPred in |- *; apply maxFbounded; auto with zarith.",
                        "VernacExtend",
                        "894b223c61f686884874a556f50694420241604f"
                    ]
                },
                {
                    "command": [
                        "rewrite Rabs_mult; auto.",
                        "VernacExtend",
                        "61aacbd30bc395ce60e710ad90ed6bf9cc0e5975"
                    ]
                },
                {
                    "command": [
                        "apply Rle_trans with (FtoR radix (Fmult (Float (pPred (vNum b)) (Fexp p)) (Float (pPred (vNum b)) (Fexp q)))).",
                        "VernacExtend",
                        "5e1bc0d92f9a05e96a8961f01f316e7d43079194"
                    ]
                },
                {
                    "command": [
                        "rewrite Fmult_correct; auto with arith.",
                        "VernacExtend",
                        "eedcbc5cf45bd9a9ebf3286a2907aa3d6311ab2a"
                    ]
                },
                {
                    "command": [
                        "apply Rmult_le_compat; auto with real.",
                        "VernacExtend",
                        "6a038a71fa49dc4681b003abb0241b56e257ee07"
                    ]
                },
                {
                    "command": [
                        "rewrite <- (Fabs_correct radix); try apply maxMax1; auto with zarith.",
                        "VernacExtend",
                        "7efcefc8ece8572bef350febda5272a6433983f1"
                    ]
                },
                {
                    "command": [
                        "rewrite <- (Fabs_correct radix); try apply maxMax1; auto with zarith.",
                        "VernacExtend",
                        "7efcefc8ece8572bef350febda5272a6433983f1"
                    ]
                },
                {
                    "command": [
                        "unfold Fmult, FtoR in |- *; simpl in |- *; auto.",
                        "VernacExtend",
                        "b6bd0b4edc62478e5c4853d7709f79ad815e388d"
                    ]
                },
                {
                    "command": [
                        "rewrite powerRZ_add with (n := Z_of_nat (pred precision)); auto with real arith.",
                        "VernacExtend",
                        "fc67f69ff1d5aac73f579176a48366bc7a4544e9"
                    ]
                },
                {
                    "command": [
                        "repeat rewrite <- Rmult_assoc.",
                        "VernacExtend",
                        "645aebe2c3685a4f868a05a2372130cedecea85e"
                    ]
                },
                {
                    "command": [
                        "repeat rewrite (fun (z : Z) (x : R) => Rmult_comm x (powerRZ radix z)); auto.",
                        "VernacExtend",
                        "2bc0e151997493b198fb53814e4ca7417d301949"
                    ]
                },
                {
                    "command": [
                        "apply Rmult_le_compat_l; auto with real arith.",
                        "VernacExtend",
                        "c67ac6a62458e649e844e549689a7d3f43885a2a"
                    ]
                },
                {
                    "command": [
                        "rewrite <- Rmult_assoc.",
                        "VernacExtend",
                        "34da3c50cde53c179a4908b1329a459071245c05"
                    ]
                },
                {
                    "command": [
                        "rewrite (fun x : R => Rmult_comm x radix).",
                        "VernacExtend",
                        "49f17c37ff61d5ce821627a8a443f22f9b81e496"
                    ]
                },
                {
                    "command": [
                        "rewrite <- powerRZ_Zs; auto with real arith.",
                        "VernacExtend",
                        "16b08a17546276c1c8d7e62461a7684e3fb5c9d5"
                    ]
                },
                {
                    "command": [
                        "replace (Zsucc (pred precision)) with (Z_of_nat precision).",
                        "VernacExtend",
                        "9f03d53b2805a3b833087e2cfc9f128bd3e1a10e"
                    ]
                },
                {
                    "command": [
                        "rewrite Rmult_IZR; auto.",
                        "VernacExtend",
                        "44aee418e2ca54b49dbc7a73f12b6ebf687258ce"
                    ]
                },
                {
                    "command": [
                        "apply Rmult_le_compat; auto with real arith.",
                        "VernacExtend",
                        "9957fd3f288f703842d8cf655fb04d6c6fec0f1e"
                    ]
                },
                {
                    "command": [
                        "replace 0%R with (IZR 0); unfold pPred in |- *; try apply Rle_IZR; auto with real zarith.",
                        "VernacExtend",
                        "877e461912bd055a0101fb81708582277489508c"
                    ]
                },
                {
                    "command": [
                        "replace 0%R with (IZR 0); unfold pPred in |- *; try apply Rle_IZR; auto with real zarith.",
                        "VernacExtend",
                        "877e461912bd055a0101fb81708582277489508c"
                    ]
                },
                {
                    "command": [
                        "unfold pPred in |- *; rewrite pGivesBound; rewrite <- Zpower_nat_Z_powerRZ; auto with real zarith.",
                        "VernacExtend",
                        "218e4e122509cd817c3af29102d157d323ff0cb6"
                    ]
                },
                {
                    "command": [
                        "rewrite inj_pred; auto with arith zarith.",
                        "VernacExtend",
                        "24900560bd18738b8a2ab6e69214819fda810413"
                    ]
                },
                {
                    "command": [
                        "auto with real zarith.",
                        "VernacExtend",
                        "adb253df2d9560ab81f40ee78f067764177c29bf"
                    ]
                },
                {
                    "command": [
                        "auto with real zarith.",
                        "VernacExtend",
                        "adb253df2d9560ab81f40ee78f067764177c29bf"
                    ]
                },
                {
                    "command": [
                        "unfold FtoRradix, FtoR in |- *; simpl in |- *.",
                        "VernacExtend",
                        "85a3da1582165d92ceb7faef707de88822bccf1a"
                    ]
                },
                {
                    "command": [
                        "repeat rewrite (Rmult_comm (pPred (vNum b))).",
                        "VernacExtend",
                        "e7b0fb5dc06dfb311f86b4f1e83aed1f34dd7924"
                    ]
                },
                {
                    "command": [
                        "rewrite <- Rmult_assoc.",
                        "VernacExtend",
                        "34da3c50cde53c179a4908b1329a459071245c05"
                    ]
                },
                {
                    "command": [
                        "rewrite <- powerRZ_Zs; auto with real zarith.",
                        "VernacExtend",
                        "e628c4e6a44f3e48a9ab7e84363f341511cc1036"
                    ]
                },
                {
                    "command": [
                        "rewrite inj_pred; auto with arith zarith.",
                        "VernacExtend",
                        "24900560bd18738b8a2ab6e69214819fda810413"
                    ]
                },
                {
                    "command": [
                        "replace (Zsucc (Zpred precision + (Fexp p + Fexp q))) with (precision + (Fexp p + Fexp q))%Z; auto; unfold Zsucc, Zpred in |- *; ring.",
                        "VernacExtend",
                        "5cba88dac033ecd1e2bd732f692c858ecfa32b38"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "errorBoundedMultPos",
            "line_nb": 241,
            "steps": [
                {
                    "command": [
                        "intros P H p q f H0 H1 H2 H3 H4 H5.",
                        "VernacExtend",
                        "4956468dcfd97c01aafa5ffb7d4e22bf59da40a1"
                    ]
                },
                {
                    "command": [
                        "generalize errorBoundedMultMin errorBoundedMultMax; intros H6 H7.",
                        "VernacExtend",
                        "0a3876c08fc09bb1e9fa2e17ceaf766f5530cfb5"
                    ]
                },
                {
                    "command": [
                        "cut (MinOrMaxP b radix P); [ intros | case H; intros H'1 (H'2, (H'3, H'4)); auto ].",
                        "VernacExtend",
                        "f2b4f5ca15a80ce93a480957ed2b99309d5da489"
                    ]
                },
                {
                    "command": [
                        "case (H8 (p * q)%R f); auto.",
                        "VernacExtend",
                        "9c09778624990061374208472ef5d82feceb8867"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "errorBoundedMult",
            "line_nb": 279,
            "steps": [
                {
                    "command": [
                        "intros P H p q f H0 H1 H2 H3.",
                        "VernacExtend",
                        "202a853e29d112532dd408e77f5016ea5c5399f1"
                    ]
                },
                {
                    "command": [
                        "case (Rle_or_lt 0 p); intros H4; case (Rle_or_lt 0 q); intros H5.",
                        "VernacExtend",
                        "cfaacbed31bfe71b704e47d1e5f49889758d5d01"
                    ]
                },
                {
                    "command": [
                        "apply errorBoundedMultPos with P; auto.",
                        "VernacExtend",
                        "677d9c3b7c55476fa5ed88600e8c9b95efadb637"
                    ]
                },
                {
                    "command": [
                        "replace (Fexp p) with (Fexp (Fopp p)); auto with float.",
                        "VernacExtend",
                        "310284b6d42401405dc2b2de3164702850e16ab0"
                    ]
                },
                {
                    "command": [
                        "replace (Fexp q) with (Fexp (Fopp q)); auto with float.",
                        "VernacExtend",
                        "9d430cccdc818bf6a0797dff916fcdbf535d1fa6"
                    ]
                },
                {
                    "command": [
                        "cut ((p * q)%R = (Fopp p * Fopp q)%R); [ intros H6; rewrite H6 | idtac ].",
                        "VernacExtend",
                        "56a1a47b7231d38c1a13b3e19e1a5f2edcfca0c1"
                    ]
                },
                {
                    "command": [
                        "apply errorBoundedMultNeg with P; auto with float real.",
                        "VernacExtend",
                        "7a3317440ea0157c84d4479803fcd28df696cd0d"
                    ]
                },
                {
                    "command": [
                        "unfold FtoRradix in |- *; rewrite Fopp_correct; auto with real.",
                        "VernacExtend",
                        "5806d51ffb537355f3b97b7dbadcb1cad937b8ce"
                    ]
                },
                {
                    "command": [
                        "unfold FtoRradix in |- *; rewrite Fopp_correct; auto with real.",
                        "VernacExtend",
                        "5806d51ffb537355f3b97b7dbadcb1cad937b8ce"
                    ]
                },
                {
                    "command": [
                        "rewrite <- H6; auto.",
                        "VernacExtend",
                        "1014ae15ea6d7b5f7bb53f6d5ecb5fb4029ac6df"
                    ]
                },
                {
                    "command": [
                        "unfold FtoRradix in |- *; repeat rewrite Fopp_correct; ring.",
                        "VernacExtend",
                        "216a11721b4b7d252728f115120bad934d8b89a9"
                    ]
                },
                {
                    "command": [
                        "apply errorBoundedMultNeg with P; auto with float real.",
                        "VernacExtend",
                        "7a3317440ea0157c84d4479803fcd28df696cd0d"
                    ]
                },
                {
                    "command": [
                        "replace (Fexp p) with (Fexp (Fopp p)); auto with float.",
                        "VernacExtend",
                        "310284b6d42401405dc2b2de3164702850e16ab0"
                    ]
                },
                {
                    "command": [
                        "replace (Fexp q) with (Fexp (Fopp q)); auto with float.",
                        "VernacExtend",
                        "9d430cccdc818bf6a0797dff916fcdbf535d1fa6"
                    ]
                },
                {
                    "command": [
                        "cut ((p * q)%R = (Fopp p * Fopp q)%R); [ intros H6; rewrite H6 | idtac ].",
                        "VernacExtend",
                        "56a1a47b7231d38c1a13b3e19e1a5f2edcfca0c1"
                    ]
                },
                {
                    "command": [
                        "apply errorBoundedMultPos with P; auto with float real.",
                        "VernacExtend",
                        "0d60179853b8232295eef85fb706e4a15210d78a"
                    ]
                },
                {
                    "command": [
                        "unfold FtoRradix in |- *; rewrite Fopp_correct; auto with real.",
                        "VernacExtend",
                        "5806d51ffb537355f3b97b7dbadcb1cad937b8ce"
                    ]
                },
                {
                    "command": [
                        "unfold FtoRradix in |- *; rewrite Fopp_correct; auto with real.",
                        "VernacExtend",
                        "5806d51ffb537355f3b97b7dbadcb1cad937b8ce"
                    ]
                },
                {
                    "command": [
                        "rewrite <- H6; auto.",
                        "VernacExtend",
                        "1014ae15ea6d7b5f7bb53f6d5ecb5fb4029ac6df"
                    ]
                },
                {
                    "command": [
                        "unfold FtoRradix in |- *; repeat rewrite Fopp_correct; ring.",
                        "VernacExtend",
                        "216a11721b4b7d252728f115120bad934d8b89a9"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "errorBoundedMultExp_aux",
            "line_nb": 301,
            "steps": [
                {
                    "command": [
                        "intros n1 n2 H H0 H1.",
                        "VernacExtend",
                        "571ef9310b34f0ca028898970488723caa2d487b"
                    ]
                },
                {
                    "command": [
                        "case H1; intros ny (ey, (H2, H3)).",
                        "VernacExtend",
                        "91216f795be4a09f215c3ac003d908ba56f0b2a0"
                    ]
                },
                {
                    "command": [
                        "case (Zle_or_lt 0 ey); intros Zl1.",
                        "VernacExtend",
                        "e5c62e74819521810a3ecd84ccdd59597d24e782"
                    ]
                },
                {
                    "command": [
                        "case (Zle_or_lt ey precision); intros Zl2.",
                        "VernacExtend",
                        "582de41e79d2e46f9fdc96281feec857072668bd"
                    ]
                },
                {
                    "command": [
                        "exists ny; exists ey; repeat (split; auto).",
                        "VernacExtend",
                        "69e44ff86d1d66872d8408f74d00059c824531cc"
                    ]
                },
                {
                    "command": [
                        "exists (ny * Zpower_nat radix (Zabs_nat (ey - precision)))%Z; exists (Z_of_nat precision); repeat (split; auto with zarith).",
                        "VernacExtend",
                        "33325fca71f7e257bcf0b89679f053685386d44e"
                    ]
                },
                {
                    "command": [
                        "replace (IZR (ny * Zpower_nat radix (Zabs_nat (ey - precision)))) with (ny * powerRZ radix (ey - precision))%R.",
                        "VernacExtend",
                        "e7351766e96a4c1f0d60480de77e9f09bd07a110"
                    ]
                },
                {
                    "command": [
                        "rewrite Rmult_assoc; rewrite <- powerRZ_add; auto with zarith real.",
                        "VernacExtend",
                        "002d879d91bc2b952b1d8e8dd5c681985b1b8252"
                    ]
                },
                {
                    "command": [
                        "replace (ey - precision + precision)%Z with ey; [ auto | ring ].",
                        "VernacExtend",
                        "3ad71fd9cbaa31a140ce2fc59573176bed36a390"
                    ]
                },
                {
                    "command": [
                        "rewrite Rmult_IZR.",
                        "VernacExtend",
                        "b795c3b06d24e235dcd0b237a976408f905ddd8d"
                    ]
                },
                {
                    "command": [
                        "rewrite Zpower_nat_powerRZ_absolu; auto with real zarith.",
                        "VernacExtend",
                        "133153c4eca7a7a76b838b094c9b5ab9aca31e84"
                    ]
                },
                {
                    "command": [
                        "rewrite Zabs_Zmult.",
                        "VernacExtend",
                        "f459c70d0601b9eab86bcf62dfb70a911d8ba871"
                    ]
                },
                {
                    "command": [
                        "apply lt_IZR; apply Rmult_lt_reg_l with (r := powerRZ radix precision); auto with real zarith.",
                        "VernacExtend",
                        "63346dc7866b28f2b3f28afa950da8608f4e501e"
                    ]
                },
                {
                    "command": [
                        "repeat rewrite (fun x y => Rmult_comm (powerRZ x y)).",
                        "VernacExtend",
                        "13e505b0ba2ab0d46091f675ca7e8b7687ec1a11"
                    ]
                },
                {
                    "command": [
                        "rewrite Rmult_IZR.",
                        "VernacExtend",
                        "b795c3b06d24e235dcd0b237a976408f905ddd8d"
                    ]
                },
                {
                    "command": [
                        "rewrite Rmult_assoc.",
                        "VernacExtend",
                        "323caa1eefcb937c18a66a7144c1e29b2c1a3e40"
                    ]
                },
                {
                    "command": [
                        "rewrite (Zabs_eq (Zpower_nat radix (Zabs_nat (ey - precision)))); auto with zarith.",
                        "VernacExtend",
                        "f29d0ceb8be43fae8fb21c5c46efee36e94a268f"
                    ]
                },
                {
                    "command": [
                        "rewrite Zpower_nat_powerRZ_absolu; auto with real zarith.",
                        "VernacExtend",
                        "133153c4eca7a7a76b838b094c9b5ab9aca31e84"
                    ]
                },
                {
                    "command": [
                        "rewrite <- powerRZ_add; auto with real zarith.",
                        "VernacExtend",
                        "6287894e7857c98d78d94546c9dc60a4fd443706"
                    ]
                },
                {
                    "command": [
                        "replace (ey - precision + precision)%Z with ey; [ idtac | ring ].",
                        "VernacExtend",
                        "fa5175cbe427386464939b7690caea25f1d128a5"
                    ]
                },
                {
                    "command": [
                        "replace (powerRZ radix precision) with (IZR (Zpos (vNum b))); [ idtac | rewrite pGivesBound; rewrite <- Zpower_nat_powerRZ_absolu; try rewrite absolu_INR; auto with zarith ].",
                        "VernacExtend",
                        "8e70e79ee5370e776cd0d38a09753b61dbf36a91"
                    ]
                },
                {
                    "command": [
                        "rewrite <- (fun x y => Rabs_pos_eq (powerRZ x y)); auto with real zarith.",
                        "VernacExtend",
                        "c95805e6e3394f7ac57bf0b1825fb8af85d6c29f"
                    ]
                },
                {
                    "command": [
                        "rewrite <- Faux.Rabsolu_Zabs; rewrite <- Rabs_mult; rewrite <- H2.",
                        "VernacExtend",
                        "dc5bea6ff9cfa9da4320411b38112f523126ec55"
                    ]
                },
                {
                    "command": [
                        "rewrite Rabs_mult; repeat rewrite Faux.Rabsolu_Zabs; auto with real zarith.",
                        "VernacExtend",
                        "4b532b2ce30936ba7a5170548fc7914f91224342"
                    ]
                },
                {
                    "command": [
                        "case (Zle_lt_or_eq 0 (Zabs n2)); auto with zarith; intros Z1.",
                        "VernacExtend",
                        "6c96e73b190116099397c5ff17416a1514c8cec5"
                    ]
                },
                {
                    "command": [
                        "apply Rlt_trans with (Zpos (vNum b) * Zabs n2)%R; auto with real zarith.",
                        "VernacExtend",
                        "1db217b03c319c9505c03c0bbca377d7eae97c25"
                    ]
                },
                {
                    "command": [
                        "rewrite <- Z1; auto with real zarith.",
                        "VernacExtend",
                        "b8ee42bd7025415e4e8866d45651ba56dc940174"
                    ]
                },
                {
                    "command": [
                        "replace (Zabs n1 * 0%Z)%R with (0 * Zpos (vNum b))%R; [ auto with real zarith | simpl; ring ].",
                        "VernacExtend",
                        "5b8ddcc380a24126b7bd211d75451de446434096"
                    ]
                },
                {
                    "command": [
                        "exists (n1 * n2)%Z; exists 0%Z; repeat (split; auto with zarith).",
                        "VernacExtend",
                        "ee732331d0dd346a32127f1c921c3157af015a04"
                    ]
                },
                {
                    "command": [
                        "rewrite Rmult_IZR; rewrite powerRZ_O; ring.",
                        "VernacExtend",
                        "18a7f8ea9c0447c6b98bc7c0900934e80f64e0ce"
                    ]
                },
                {
                    "command": [
                        "apply lt_IZR.",
                        "VernacExtend",
                        "165b941162ea1938aa71e78f57835b8df85de779"
                    ]
                },
                {
                    "command": [
                        "rewrite <- Faux.Rabsolu_Zabs; rewrite Rmult_IZR; rewrite H2.",
                        "VernacExtend",
                        "3be6790b7982964f8469cdd342293de2d813f847"
                    ]
                },
                {
                    "command": [
                        "rewrite Rabs_mult.",
                        "VernacExtend",
                        "0a976c5fce10a63ed58fa2e07dd76a462e6697c3"
                    ]
                },
                {
                    "command": [
                        "apply Rle_lt_trans with (Rabs ny).",
                        "VernacExtend",
                        "c79da381614f1595dd6bbd28515983d912df3c27"
                    ]
                },
                {
                    "command": [
                        "pattern (Rabs ny) at 2 in |- *; replace (Rabs ny) with (Rabs ny * 1)%R; [ apply Rmult_le_compat_l | ring ]; auto with arith real.",
                        "VernacExtend",
                        "01bdef5bc97b3d4e29fed23b55ad29d45635ae9b"
                    ]
                },
                {
                    "command": [
                        "rewrite (Rabs_pos_eq (powerRZ radix ey)); [ idtac | apply powerRZ_le; auto with arith real ].",
                        "VernacExtend",
                        "c989bfc8c0068d66a2b607c8801282241a7687d1"
                    ]
                },
                {
                    "command": [
                        "replace 1%R with (powerRZ radix 0); [ apply Rle_powerRZ | simpl in |- * ]; auto with real arith zarith.",
                        "VernacExtend",
                        "67eecf44f794e905a36230cea784c65a523a3436"
                    ]
                },
                {
                    "command": [
                        "rewrite Faux.Rabsolu_Zabs; auto with real zarith.",
                        "VernacExtend",
                        "b8bd2eae3ef0d7fdf303e196bd25a2b663514825"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "errorBoundedMultExpPos",
            "line_nb": 341,
            "steps": [
                {
                    "command": [
                        "intros P H p q pq H0 H1 H2 H3 H4 H5.",
                        "VernacExtend",
                        "dee6fa3d70d47b0f49102bda3ea746bad932c89b"
                    ]
                },
                {
                    "command": [
                        "case (multExpUpperBound P H p q pq); auto; intros r (H'1, (H'2, H'3)).",
                        "VernacExtend",
                        "7d5ff0b61ac637e84f6bb64a12497534f7b9e71f"
                    ]
                },
                {
                    "command": [
                        "case (Req_dec (p * q - pq) 0); intros H6.",
                        "VernacExtend",
                        "cb240018f40ea8d3706e870b5b5ae45523e4a220"
                    ]
                },
                {
                    "command": [
                        "case (Req_dec pq 0); intros H7.",
                        "VernacExtend",
                        "8485363e50e740a89a46172e677550277295d69b"
                    ]
                },
                {
                    "command": [
                        "cut (Fbounded b (Fzero (Fexp p + Fexp q))); [ intros Fb1 | idtac ].",
                        "VernacExtend",
                        "d066a90be12a44ea203674265372b848622dfc70"
                    ]
                },
                {
                    "command": [
                        "exists (Fzero (Fexp p + Fexp q)); exists (Fzero (Fexp p + Fexp q)); repeat (split; simpl in |- *; auto with zarith).",
                        "VernacExtend",
                        "827e06a3c2aa25aa30079440c802c91749fd849b"
                    ]
                },
                {
                    "command": [
                        "rewrite H7; unfold FtoRradix in |- *; apply FzeroisReallyZero.",
                        "VernacExtend",
                        "30cc0c6a1fc4cd153515bd55494ad42cef6c65f5"
                    ]
                },
                {
                    "command": [
                        "unfold FtoRradix in |- *; rewrite FzeroisReallyZero; rewrite <- H7.",
                        "VernacExtend",
                        "c6b1998f89c7c6456e2b25c6923f9961d2f6b12e"
                    ]
                },
                {
                    "command": [
                        "pattern (FtoRradix pq) at 1 in |- *; rewrite H7; auto with real.",
                        "VernacExtend",
                        "2cd3e880b111b88fff286cb118b3c4dca1eba81b"
                    ]
                },
                {
                    "command": [
                        "repeat (split; auto); simpl in |- *; auto with arith zarith.",
                        "VernacExtend",
                        "fb18c77dfdac6a27c1701e1f19f2d810b1959a98"
                    ]
                },
                {
                    "command": [
                        "case (errorBoundedMultExp_aux (Fnum p) (Fnum q)); auto with float real zarith.",
                        "VernacExtend",
                        "a0d0ac0770418f1fb4acffaca2fffba0720a90ce"
                    ]
                },
                {
                    "command": [
                        "exists (Fnum pq); exists (Fexp pq - (Fexp p + Fexp q))%Z; split.",
                        "VernacExtend",
                        "8a0ab5eb5fcec6d02a37d7a091864ce52ceda59f"
                    ]
                },
                {
                    "command": [
                        "apply Rmult_eq_reg_l with (powerRZ radix (Fexp p + Fexp q)); auto with real zarith.",
                        "VernacExtend",
                        "77d4fc9bf0764d14d0649ae6edb4de98dc803dbc"
                    ]
                },
                {
                    "command": [
                        "repeat rewrite (fun x y => Rmult_comm (powerRZ x y)).",
                        "VernacExtend",
                        "13e505b0ba2ab0d46091f675ca7e8b7687ec1a11"
                    ]
                },
                {
                    "command": [
                        "apply trans_eq with (p * q)%R; auto.",
                        "VernacExtend",
                        "54a884bc35f05aaf1328d081514b78f333a8401a"
                    ]
                },
                {
                    "command": [
                        "rewrite <- (Fmult_correct radix); auto with real zarith; unfold FtoRradix, FtoR, Fmult in |- *; simpl in |- *; rewrite Rmult_IZR; auto.",
                        "VernacExtend",
                        "05bcca65fc559cb5fc0548dbe7a439a4be8fb6d6"
                    ]
                },
                {
                    "command": [
                        "apply trans_eq with (FtoRradix pq); auto with real.",
                        "VernacExtend",
                        "84463de27b10ebea0cca74123cdc13d950a833a0"
                    ]
                },
                {
                    "command": [
                        "rewrite Rmult_assoc; rewrite <- powerRZ_add; auto with real zarith.",
                        "VernacExtend",
                        "19ddab8e6795561b7a0200abde2d905e689d6c3b"
                    ]
                },
                {
                    "command": [
                        "replace (Fexp pq - (Fexp p + Fexp q) + (Fexp p + Fexp q))%Z with (Fexp pq); auto; ring.",
                        "VernacExtend",
                        "1bdad84debbae73ace400a383439c05f1ec48ee6"
                    ]
                },
                {
                    "command": [
                        "cut (Fbounded b pq); [ intros Z1; case Z1 | idtac ]; auto with real zarith.",
                        "VernacExtend",
                        "1180375447527b72b0cbb7d1c551719857a40070"
                    ]
                },
                {
                    "command": [
                        "apply (RoundedModeBounded b radix P (p * q)); auto.",
                        "VernacExtend",
                        "99d60f9e47fad87f1fed642e6acbfc93de7a073e"
                    ]
                },
                {
                    "command": [
                        "intros nx (ex, (H'4, (H'5, (H'6, H'7)))).",
                        "VernacExtend",
                        "e27ba19906d9712ca3d1192fee8f3070ba991c58"
                    ]
                },
                {
                    "command": [
                        "cut (FtoRradix pq = FtoRradix (Float nx (ex + (Fexp p + Fexp q))) :>R); [ intros Eq1 | idtac ].",
                        "VernacExtend",
                        "d88a4248816690cf6f07b8210b17d652e2069143"
                    ]
                },
                {
                    "command": [
                        "exists (Float nx (ex + (Fexp p + Fexp q))); exists (Fzero (Fexp p + Fexp q)); repeat (split; simpl in |- *; auto with real zarith).",
                        "VernacExtend",
                        "941962e2d2efc2359f2dcd6bcd433cd13aff9f35"
                    ]
                },
                {
                    "command": [
                        "rewrite <- Eq1; rewrite H6; apply (FzeroisReallyZero radix).",
                        "VernacExtend",
                        "4296a6d421b4c27208aab72ed3c38b33a7d0d08a"
                    ]
                },
                {
                    "command": [
                        "replace (FtoRradix pq) with (p * q)%R.",
                        "VernacExtend",
                        "e877c894558f01e2fd9ac33c1bd2eceb77839bc7"
                    ]
                },
                {
                    "command": [
                        "unfold FtoRradix in |- *; unfold FtoR in |- *; simpl in |- *.",
                        "VernacExtend",
                        "8c0835d31a3f923ae6ce1e9ef3140f1250ad69a6"
                    ]
                },
                {
                    "command": [
                        "rewrite powerRZ_add; auto with zarith real.",
                        "VernacExtend",
                        "29b50a4d760604f1e24a430026b9d9245cab4c22"
                    ]
                },
                {
                    "command": [
                        "repeat rewrite <- Rmult_assoc; rewrite <- H'4; rewrite powerRZ_add; [ ring | auto with zarith real ].",
                        "VernacExtend",
                        "cf2111d1fee3735b305ba656ec0e5202ccc42f91"
                    ]
                },
                {
                    "command": [
                        "replace (FtoRradix p * FtoRradix q)%R with (pq + (FtoRradix p * FtoRradix q - FtoRradix pq))%R; [ rewrite H6 | idtac ]; ring.",
                        "VernacExtend",
                        "b6e6bbe762c3d909a9d50e4b016d71fde83f0937"
                    ]
                },
                {
                    "command": [
                        "case (errorBoundedMultPos P H p q pq); auto.",
                        "VernacExtend",
                        "c6f06e1781a2702e09df1c96f25f1ba6cb526a02"
                    ]
                },
                {
                    "command": [
                        "intros s (H'4, (H'5, H'6)).",
                        "VernacExtend",
                        "f4f427fd662e25694508bfd616992773c7c2a614"
                    ]
                },
                {
                    "command": [
                        "exists r; exists s; repeat (split; auto with zarith).",
                        "VernacExtend",
                        "153ef857af7e1eb2d342157f3c105a2c1a9f34cc"
                    ]
                },
                {
                    "command": [
                        "rewrite H'2; auto.",
                        "VernacExtend",
                        "2c2cd2310e6d6c30ae4cdcfb896dfe62bf83deb1"
                    ]
                },
                {
                    "command": [
                        "apply Zlt_le_weak; apply RoundedModeErrorExpStrict with b radix precision P (p * q)%R; auto.",
                        "VernacExtend",
                        "c7d06c5502493e6ce27e67a7b766f1d0f18a6915"
                    ]
                },
                {
                    "command": [
                        "cut (CompatibleP b radix P); [ intros H'7 | case H; try intros H'7 (H'8, (H'9, H'10)); auto ].",
                        "VernacExtend",
                        "8b67643ba85c45198941aa9277c1c88eeea28086"
                    ]
                },
                {
                    "command": [
                        "apply H'7 with (p * q)%R pq; auto with real.",
                        "VernacExtend",
                        "90735c9d0a8f51d466d30584b90e013003ff9fb0"
                    ]
                },
                {
                    "command": [
                        "fold FtoRradix in |- *; rewrite H'2; auto with real.",
                        "VernacExtend",
                        "1f4f1847adf311690e23d23d21d0ce03016b0b09"
                    ]
                },
                {
                    "command": [
                        "fold FtoRradix in |- *; rewrite H'4; auto with real.",
                        "VernacExtend",
                        "8db61a9c2c725ab27c7fdf7bd05dc591882f1369"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "errorBoundedMultExp",
            "line_nb": 382,
            "steps": [
                {
                    "command": [
                        "intros P H p q pq H1 H2 H3 H4.",
                        "VernacExtend",
                        "bafcec99441bcc72654201e4825f8454c39bd6d6"
                    ]
                },
                {
                    "command": [
                        "cut (MinOrMaxP b radix P); [ intros | case H; intros H'1 (H'2, (H'3, H'4)); auto ].",
                        "VernacExtend",
                        "f2b4f5ca15a80ce93a480957ed2b99309d5da489"
                    ]
                },
                {
                    "command": [
                        "case H0 with (p*q)%R pq; auto; intros H0'; clear H0.",
                        "VernacExtend",
                        "bee3a8e4540f1f6a255e47ab5eae80a5a2e99645"
                    ]
                },
                {
                    "command": [
                        "case (Rle_or_lt 0 p); intros Rl1.",
                        "VernacExtend",
                        "aa6be71cc2b374664054155571961cb178d1e8df"
                    ]
                },
                {
                    "command": [
                        "case (Rle_or_lt 0 q); intros Rl2.",
                        "VernacExtend",
                        "dd3354c01b89bf2804a6ce4166e7756d8e40c2dd"
                    ]
                },
                {
                    "command": [
                        "apply (errorBoundedMultExpPos P); auto.",
                        "VernacExtend",
                        "b26f46666595faa1f612fe80b4d93cabaff58678"
                    ]
                },
                {
                    "command": [
                        "case errorBoundedMultExpPos with (isMax b radix) p (Fopp q) (Fopp pq); auto with float real.",
                        "VernacExtend",
                        "2d50d5ac4faab2455c47392c27d5c1015e6d4460"
                    ]
                },
                {
                    "command": [
                        "apply MaxRoundedModeP with precision; auto.",
                        "VernacExtend",
                        "b70fb9f457803c3d01ef4b9eee98cfed8f5cde6d"
                    ]
                },
                {
                    "command": [
                        "rewrite (Fopp_correct radix); auto with real.",
                        "VernacExtend",
                        "64fc6ff81c9b54de313f403d6d36d11b82b83a3d"
                    ]
                },
                {
                    "command": [
                        "replace (FtoRradix p * FtoRradix (Fopp q))%R with (- (FtoRradix p * FtoRradix q))%R; [apply MinOppMax;auto|idtac].",
                        "VernacExtend",
                        "52f402f3a0fbdc41295dc90ba00eecd843273578"
                    ]
                },
                {
                    "command": [
                        "rewrite (Fopp_correct radix); fold FtoRradix in |- *; auto with zarith; ring.",
                        "VernacExtend",
                        "00434c51fcc1d391825d821410f3a7fa51342d60"
                    ]
                },
                {
                    "command": [
                        "intros r (s, (H5, (H6, (H7, (H8, H9))))); exists (Fopp r); exists (Fopp s); repeat (split; simpl in |- *; auto with float real zarith).",
                        "VernacExtend",
                        "c1edcfbeb711f6872644e0b521c915e9ce659405"
                    ]
                },
                {
                    "command": [
                        "repeat rewrite (Fopp_correct radix); auto with zarith; fold FtoRradix in |- *; rewrite H7; repeat rewrite (Fopp_correct radix); auto with zarith; fold FtoRradix; ring.",
                        "VernacExtend",
                        "1fe921101b2ff043a2d928269faad4483154143b"
                    ]
                },
                {
                    "command": [
                        "repeat rewrite (Fopp_correct radix); auto with zarith; fold FtoRradix in |- *; rewrite H8; repeat rewrite (Fopp_correct radix); auto with zarith; fold FtoRradix; ring.",
                        "VernacExtend",
                        "db0c4d7d465fdc01edd49572e63303d9615019f5"
                    ]
                },
                {
                    "command": [
                        "case (Rle_or_lt 0 q); intros Rl2.",
                        "VernacExtend",
                        "dd3354c01b89bf2804a6ce4166e7756d8e40c2dd"
                    ]
                },
                {
                    "command": [
                        "case errorBoundedMultExpPos with (isMax b radix) (Fopp p) q (Fopp pq); auto with float real.",
                        "VernacExtend",
                        "c081c465dca066ad060dc180bb9135522d989967"
                    ]
                },
                {
                    "command": [
                        "apply MaxRoundedModeP with precision; auto.",
                        "VernacExtend",
                        "b70fb9f457803c3d01ef4b9eee98cfed8f5cde6d"
                    ]
                },
                {
                    "command": [
                        "rewrite (Fopp_correct radix); auto with real.",
                        "VernacExtend",
                        "64fc6ff81c9b54de313f403d6d36d11b82b83a3d"
                    ]
                },
                {
                    "command": [
                        "replace (FtoRradix (Fopp p) * FtoRradix q)%R with (- (FtoRradix p * FtoRradix q))%R; [apply MinOppMax;auto|idtac].",
                        "VernacExtend",
                        "124c102b2f1c63557d7476cc16798d26a0ae9f68"
                    ]
                },
                {
                    "command": [
                        "rewrite (Fopp_correct radix); fold FtoRradix in |- *; auto with zarith; ring.",
                        "VernacExtend",
                        "00434c51fcc1d391825d821410f3a7fa51342d60"
                    ]
                },
                {
                    "command": [
                        "intros r (s, (H5, (H6, (H7, (H8, H9))))); exists (Fopp r); exists (Fopp s); repeat (split; simpl in |- *; auto with float real zarith).",
                        "VernacExtend",
                        "c1edcfbeb711f6872644e0b521c915e9ce659405"
                    ]
                },
                {
                    "command": [
                        "repeat rewrite (Fopp_correct radix); auto with zarith; fold FtoRradix in |- *; rewrite H7; repeat rewrite (Fopp_correct radix); auto with zarith; fold FtoRradix; ring.",
                        "VernacExtend",
                        "1fe921101b2ff043a2d928269faad4483154143b"
                    ]
                },
                {
                    "command": [
                        "repeat rewrite (Fopp_correct radix); auto with zarith; fold FtoRradix in |- *; rewrite H8; repeat rewrite (Fopp_correct radix); auto with zarith; fold FtoRradix;ring.",
                        "VernacExtend",
                        "db0c4d7d465fdc01edd49572e63303d9615019f5"
                    ]
                },
                {
                    "command": [
                        "case (errorBoundedMultExpPos P H (Fopp p) (Fopp q) pq); auto with float real.",
                        "VernacExtend",
                        "44f2280a0c71ecade1ee79040ff7eed4ded8eff3"
                    ]
                },
                {
                    "command": [
                        "rewrite (Fopp_correct radix); auto with real.",
                        "VernacExtend",
                        "64fc6ff81c9b54de313f403d6d36d11b82b83a3d"
                    ]
                },
                {
                    "command": [
                        "rewrite (Fopp_correct radix); auto with real.",
                        "VernacExtend",
                        "64fc6ff81c9b54de313f403d6d36d11b82b83a3d"
                    ]
                },
                {
                    "command": [
                        "replace (FtoRradix (Fopp p) * FtoRradix (Fopp q))%R with (FtoRradix p * FtoRradix q)%R; auto; repeat rewrite (Fopp_correct radix); fold FtoRradix in |- *; auto with zarith; ring.",
                        "VernacExtend",
                        "b32c3104173c610eb51aad9e63b718b56b141f70"
                    ]
                },
                {
                    "command": [
                        "intros r (s, (H5, (H6, (H7, (H8, (H9, (H10, H11))))))); exists r; exists s; repeat (split; simpl in |- *; auto with float real zarith).",
                        "VernacExtend",
                        "e39a01506d75f87a942b762f2171c7391e6a788a"
                    ]
                },
                {
                    "command": [
                        "fold FtoRradix in |- *; rewrite H8; repeat rewrite (Fopp_correct radix); auto with zarith; fold FtoRradix; ring.",
                        "VernacExtend",
                        "c69446365041ef39be4e3e9f3efd65951417d149"
                    ]
                },
                {
                    "command": [
                        "case (Rle_or_lt 0 p); intros Rl1.",
                        "VernacExtend",
                        "aa6be71cc2b374664054155571961cb178d1e8df"
                    ]
                },
                {
                    "command": [
                        "case (Rle_or_lt 0 q); intros Rl2.",
                        "VernacExtend",
                        "dd3354c01b89bf2804a6ce4166e7756d8e40c2dd"
                    ]
                },
                {
                    "command": [
                        "apply (errorBoundedMultExpPos P); auto.",
                        "VernacExtend",
                        "b26f46666595faa1f612fe80b4d93cabaff58678"
                    ]
                },
                {
                    "command": [
                        "case errorBoundedMultExpPos with (isMin b radix) p (Fopp q) (Fopp pq); auto with float real.",
                        "VernacExtend",
                        "fa05da34c64c5115c4b0bfd1ccd0be9ef0ae9d79"
                    ]
                },
                {
                    "command": [
                        "apply MinRoundedModeP with precision; auto.",
                        "VernacExtend",
                        "6f82ed8988e8803cdc1001de9d5653f29f2428cc"
                    ]
                },
                {
                    "command": [
                        "rewrite (Fopp_correct radix); auto with real.",
                        "VernacExtend",
                        "64fc6ff81c9b54de313f403d6d36d11b82b83a3d"
                    ]
                },
                {
                    "command": [
                        "replace (FtoRradix p * FtoRradix (Fopp q))%R with (- (FtoRradix p * FtoRradix q))%R; [apply MaxOppMin;auto|idtac].",
                        "VernacExtend",
                        "2a59c1f3b0586968326604988342008a8db20a0b"
                    ]
                },
                {
                    "command": [
                        "rewrite (Fopp_correct radix); fold FtoRradix in |- *; auto with zarith; ring.",
                        "VernacExtend",
                        "00434c51fcc1d391825d821410f3a7fa51342d60"
                    ]
                },
                {
                    "command": [
                        "intros r (s, (H5, (H6, (H7, (H8, H9))))); exists (Fopp r); exists (Fopp s); repeat (split; simpl in |- *; auto with float real zarith).",
                        "VernacExtend",
                        "c1edcfbeb711f6872644e0b521c915e9ce659405"
                    ]
                },
                {
                    "command": [
                        "repeat rewrite (Fopp_correct radix); auto with zarith; fold FtoRradix in |- *; rewrite H7; repeat rewrite (Fopp_correct radix); auto with zarith; fold FtoRradix; ring.",
                        "VernacExtend",
                        "1fe921101b2ff043a2d928269faad4483154143b"
                    ]
                },
                {
                    "command": [
                        "repeat rewrite (Fopp_correct radix); auto with zarith; fold FtoRradix in |- *; rewrite H8; repeat rewrite (Fopp_correct radix); auto with zarith; fold FtoRradix; ring.",
                        "VernacExtend",
                        "db0c4d7d465fdc01edd49572e63303d9615019f5"
                    ]
                },
                {
                    "command": [
                        "case (Rle_or_lt 0 q); intros Rl2.",
                        "VernacExtend",
                        "dd3354c01b89bf2804a6ce4166e7756d8e40c2dd"
                    ]
                },
                {
                    "command": [
                        "case errorBoundedMultExpPos with (isMin b radix) (Fopp p) q (Fopp pq); auto with float real.",
                        "VernacExtend",
                        "1ff427d9a65abfae8b1e03e3ede369db5249e313"
                    ]
                },
                {
                    "command": [
                        "apply MinRoundedModeP with precision; auto.",
                        "VernacExtend",
                        "6f82ed8988e8803cdc1001de9d5653f29f2428cc"
                    ]
                },
                {
                    "command": [
                        "rewrite (Fopp_correct radix); auto with real.",
                        "VernacExtend",
                        "64fc6ff81c9b54de313f403d6d36d11b82b83a3d"
                    ]
                },
                {
                    "command": [
                        "replace (FtoRradix (Fopp p) * FtoRradix q)%R with (- (FtoRradix p * FtoRradix q))%R; [apply MaxOppMin;auto|idtac].",
                        "VernacExtend",
                        "d02d0435147476ac8a7995189635b994668d2435"
                    ]
                },
                {
                    "command": [
                        "rewrite (Fopp_correct radix); fold FtoRradix in |- *; auto with zarith; ring.",
                        "VernacExtend",
                        "00434c51fcc1d391825d821410f3a7fa51342d60"
                    ]
                },
                {
                    "command": [
                        "intros r (s, (H5, (H6, (H7, (H8, H9))))); exists (Fopp r); exists (Fopp s); repeat (split; simpl in |- *; auto with float real zarith).",
                        "VernacExtend",
                        "c1edcfbeb711f6872644e0b521c915e9ce659405"
                    ]
                },
                {
                    "command": [
                        "repeat rewrite (Fopp_correct radix); auto with zarith; fold FtoRradix in |- *; rewrite H7; repeat rewrite (Fopp_correct radix); auto with zarith; fold FtoRradix; ring.",
                        "VernacExtend",
                        "1fe921101b2ff043a2d928269faad4483154143b"
                    ]
                },
                {
                    "command": [
                        "repeat rewrite (Fopp_correct radix); auto with zarith; fold FtoRradix in |- *; rewrite H8; repeat rewrite (Fopp_correct radix); auto with zarith; fold FtoRradix;ring.",
                        "VernacExtend",
                        "db0c4d7d465fdc01edd49572e63303d9615019f5"
                    ]
                },
                {
                    "command": [
                        "case (errorBoundedMultExpPos P H (Fopp p) (Fopp q) pq); auto with float real.",
                        "VernacExtend",
                        "44f2280a0c71ecade1ee79040ff7eed4ded8eff3"
                    ]
                },
                {
                    "command": [
                        "rewrite (Fopp_correct radix); auto with real.",
                        "VernacExtend",
                        "64fc6ff81c9b54de313f403d6d36d11b82b83a3d"
                    ]
                },
                {
                    "command": [
                        "rewrite (Fopp_correct radix); auto with real.",
                        "VernacExtend",
                        "64fc6ff81c9b54de313f403d6d36d11b82b83a3d"
                    ]
                },
                {
                    "command": [
                        "replace (FtoRradix (Fopp p) * FtoRradix (Fopp q))%R with (FtoRradix p * FtoRradix q)%R; auto; repeat rewrite (Fopp_correct radix); fold FtoRradix in |- *; auto with zarith; ring.",
                        "VernacExtend",
                        "b32c3104173c610eb51aad9e63b718b56b141f70"
                    ]
                },
                {
                    "command": [
                        "intros r (s, (H5, (H6, (H7, (H8, (H9, (H10, H11))))))); exists r; exists s; repeat (split; simpl in |- *; auto with float real zarith).",
                        "VernacExtend",
                        "e39a01506d75f87a942b762f2171c7391e6a788a"
                    ]
                },
                {
                    "command": [
                        "fold FtoRradix in |- *; rewrite H8; repeat rewrite (Fopp_correct radix); auto with zarith; fold FtoRradix; ring.",
                        "VernacExtend",
                        "c69446365041ef39be4e3e9f3efd65951417d149"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        }
    ]
}