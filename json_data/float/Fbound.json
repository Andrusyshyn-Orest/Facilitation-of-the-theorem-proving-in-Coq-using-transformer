{
    "filename": "Fbound.v",
    "coq_project": "float",
    "vernac_cmds": [
        [
            "Require Export Fop.",
            "VernacRequire",
            "556cc97b8aa9551854bdc13995e3c0d32a3c3035"
        ],
        [
            "Section Fbounded_Def.",
            "VernacBeginSection",
            "6ca783e4e9821d2722574023ea06765f2fc6c214"
        ],
        [
            "Variable radix : Z.",
            "VernacAssumption",
            "2349b77d134e0c9bb013a8bdca0020ca16fc023b"
        ],
        [
            "Hypothesis radixMoreThanOne : (1 < radix)%Z.",
            "VernacAssumption",
            "f4d3774b2275f4c4c3af941091d4d99f9a2129aa"
        ],
        [
            "Let radixMoreThanZERO := Zlt_1_O _ (Zlt_le_weak _ _ radixMoreThanOne).",
            "VernacDefinition",
            "b73ccff345a4fc730c8134dcd05adb7f1928fae7"
        ],
        [
            "Hint Resolve radixMoreThanZERO: zarith.",
            "VernacHints",
            "5a4a320eb610749621ef38850390d7141dc0d330"
        ],
        [
            "Let FtoRradix := FtoR radix.",
            "VernacDefinition",
            "5aa29a9595c6e9e03b28c6d232299552ec761ad7"
        ],
        [
            "Local Coercion FtoRradix : float >-> R.",
            "VernacCoercion",
            "cec6b845059d434f72dda1a67638af64e1fb0628"
        ],
        [
            "Coercion Z_of_N: N >-> Z.",
            "VernacCoercion",
            "58ba996e5b9c56a6b0ee9ab61170377dfcd5811e"
        ],
        [
            "Record Fbound : Set := Bound {vNum : positive; dExp : N}.",
            "VernacInductive",
            "2f21eecf6106f883d8e045efa3653494a23e3edc"
        ],
        [
            "Definition Fbounded (b : Fbound) (d : float) := (Zabs (Fnum d) < Zpos (vNum b))%Z /\\ (- dExp b <= Fexp d)%Z.",
            "VernacDefinition",
            "487c9de52e8af819e9a2cdef2556c37cd5a4438d"
        ],
        [
            "Theorem FboundedNum : forall (b : Fbound) (p : float), Fbounded b p -> (Zabs (Fnum p) < Zpos (vNum b))%Z.",
            "VernacStartTheoremProof",
            "d7f89392b35ec0607ce457078d19fe48704eb7f4"
        ],
        [
            "intros b p H; case H; intros H1 H2; case H1; auto.",
            "VernacExtend",
            "8e307b829aa2827da33ddfbffea55f4d54163091"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Theorem FboundedExp : forall (b : Fbound) (p : float), Fbounded b p -> (- dExp b <= Fexp p)%Z.",
            "VernacStartTheoremProof",
            "67a358abfab1dd5f6d02af4c5b7dc9a229616e7d"
        ],
        [
            "intros b p H; case H; auto.",
            "VernacExtend",
            "a1536f9ecf52296a19a2a32a4318660d141c70c9"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Hint Resolve FboundedNum FboundedExp: float.",
            "VernacHints",
            "6e33f3c82d81fa18224ea816af55c1d3f78fb5fd"
        ],
        [
            "Theorem isBounded : forall (b : Fbound) (p : float), {Fbounded b p} + {~ Fbounded b p}.",
            "VernacStartTheoremProof",
            "a9a13a4b0c5afe65e46172e40c25bd889ff6dc91"
        ],
        [
            "intros b p; case (Z_le_gt_dec (Zpos (vNum b)) (Zabs (Fnum p))); intros H'.",
            "VernacExtend",
            "41b7eb39d9b82ea0bec87c3034740a7e924b278b"
        ],
        [
            "right; red in |- *; intros H'3; Contradict H'; auto with float zarith.",
            "VernacExtend",
            "1d61bae8d38a536e5ba24acbc168b4819b163d33"
        ],
        [
            "case (Z_le_gt_dec (- dExp b) (Fexp p)); intros H'1.",
            "VernacExtend",
            "e74883073376aa273a126c8bf394f8676474b673"
        ],
        [
            "left; repeat split; auto with zarith.",
            "VernacExtend",
            "9051455f81f84ffc30d2f938c724518a973784af"
        ],
        [
            "right; red in |- *; intros H'3; Contradict H'1; auto with float zarith.",
            "VernacExtend",
            "637df4040fd3116e91346565e7a2403cdbe03f02"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Theorem FzeroisZero : forall b : Fbound, Fzero (- dExp b) = 0%R :>R.",
            "VernacStartTheoremProof",
            "89981e92cc9b32a93986260e5077286b3b957231"
        ],
        [
            "intros b; unfold FtoRradix, FtoR in |- *; simpl in |- *; auto with real.",
            "VernacExtend",
            "81d4aae2b77e9eb775ea85491dea701b4ab6d60b"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Theorem FboundedFzero : forall b : Fbound, Fbounded b (Fzero (- dExp b)).",
            "VernacStartTheoremProof",
            "3e47566df8951d6645b765e38305afb8045e15c3"
        ],
        [
            "intros b; repeat (split; simpl in |- *).",
            "VernacExtend",
            "f36a779af2428249daeec1a25d3ab6a66c06ffa1"
        ],
        [
            "replace 0%Z with (- 0%nat)%Z; [ idtac | simpl in |- *; auto ].",
            "VernacExtend",
            "851e19a773eccba1b50876aef829e30ef51ef67c"
        ],
        [
            "apply Zeq_le; auto with arith.",
            "VernacExtend",
            "f8e9d73f75ee2d765f257bb9ff407b42a104a9b7"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Hint Unfold Fbounded.",
            "VernacHints",
            "c96dc6769d0ad7a196b55a61d7bcba2f6e7c7e3a"
        ],
        [
            "Theorem FboundedZeroSameExp : forall (b : Fbound) (p : float), Fbounded b p -> Fbounded b (Fzero (Fexp p)).",
            "VernacStartTheoremProof",
            "0265517c97fe1e4acdd1765696c62201a74b790a"
        ],
        [
            "intros b p H'; (repeat split; simpl in |- *; auto with float zarith).",
            "VernacExtend",
            "575abb7c79304a8be70ea26dff8be29b61876e08"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Theorem FBoundedScale : forall (b : Fbound) (p : float) (n : nat), Fbounded b p -> Fbounded b (Float (Fnum p) (Fexp p + n)).",
            "VernacStartTheoremProof",
            "31ea9f6880c7cf09f6a9ac14bba39e194cd9de65"
        ],
        [
            "intros b p n H'; repeat split; simpl in |- *; auto with float.",
            "VernacExtend",
            "06706df476c73cb3e550fe94d785bf3aacd8a369"
        ],
        [
            "apply Zle_trans with (Fexp p); auto with float.",
            "VernacExtend",
            "79a02826801bf77197e35a9747ac92d4a85dbc80"
        ],
        [
            "pattern (Fexp p) at 1 in |- *; (replace (Fexp p) with (Fexp p + 0%nat)%Z; [ idtac | simpl in |- *; ring ]).",
            "VernacExtend",
            "f9a2aba384c1e7c3a5823fcbd22f3dabb2dd7496"
        ],
        [
            "apply Zplus_le_compat_l.",
            "VernacExtend",
            "4450bbafdb2180fd74d1eec9b3c2923119b209d4"
        ],
        [
            "apply inj_le; auto with arith.",
            "VernacExtend",
            "2b46e939b249039a6e0ba1af5b3252a5b30b9c71"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Theorem FvalScale : forall (b : Fbound) (p : float) (n : nat), Float (Fnum p) (Fexp p + n) = (powerRZ radix n * p)%R :>R.",
            "VernacStartTheoremProof",
            "60ab3eab554d13637e120d515e8174cf9bb0fca5"
        ],
        [
            "intros b p n; unfold FtoRradix, FtoR in |- *; simpl in |- *.",
            "VernacExtend",
            "0a0d1c5dca276a240c2a600057bba40a568e53f6"
        ],
        [
            "rewrite powerRZ_add; auto with real zarith.",
            "VernacExtend",
            "464b630a39cda032263051881ad80da2fc959c8e"
        ],
        [
            "ring.",
            "VernacExtend",
            "baadd9fc4c175005af409bb466fcea9fab25b4e6"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Theorem oppBounded : forall (b : Fbound) (x : float), Fbounded b x -> Fbounded b (Fopp x).",
            "VernacStartTheoremProof",
            "c0799b14d5b56691cd25b2461ccdfcb2f8f189db"
        ],
        [
            "intros b x H'; repeat split; simpl in |- *; auto with float zarith.",
            "VernacExtend",
            "e4737ea833b3611411aa0db57c23bcb2f203fb67"
        ],
        [
            "replace (Zabs (- Fnum x)) with (Zabs (Fnum x)); auto with float.",
            "VernacExtend",
            "1ca096edfca5196e57db07c100d98543827580bb"
        ],
        [
            "case (Fnum x); simpl in |- *; auto.",
            "VernacExtend",
            "3cce1211977e28fb638ee96f6a1cf3baa40d02e5"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Theorem oppBoundedInv : forall (b : Fbound) (x : float), Fbounded b (Fopp x) -> Fbounded b x.",
            "VernacStartTheoremProof",
            "3e542468e2123fabd77763fb543a95d1960b7ef9"
        ],
        [
            "intros b x H'; rewrite <- (Fopp_Fopp x).",
            "VernacExtend",
            "05809f8c84574833d4c462d541ce0c9448cdcb54"
        ],
        [
            "apply oppBounded; auto.",
            "VernacExtend",
            "6e68d2122eeea082741ca4e279707ce0511c71ef"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Theorem FopRepAux : forall (b : Fbound) (z : Z) (p : R), ex (fun r : float => r = (- p)%R :>R /\\ Fbounded b r /\\ Fexp r = z) -> ex (fun r : float => r = p :>R /\\ Fbounded b r /\\ Fexp r = z).",
            "VernacStartTheoremProof",
            "04c1197b15b712d3d184ba0528865bcba9d10b05"
        ],
        [
            "intros b z p H'; elim H'; intros r E; elim E; intros H'0 H'1; elim H'1; intros H'2 H'3; clear H'1 E H'.",
            "VernacExtend",
            "fca8e0f16c0a7b990d128bf2fbaa4de4eb3d04a0"
        ],
        [
            "exists (Fopp r); split; auto.",
            "VernacExtend",
            "fc47daf48506450555242e3fcce1b5260174c02d"
        ],
        [
            "rewrite <- (Ropp_involutive p).",
            "VernacExtend",
            "e55b95433b25e2cfb8366d9d3e0bf28df84cbe1e"
        ],
        [
            "rewrite <- H'0; auto.",
            "VernacExtend",
            "fc433a0a33372284ece38ef844926b71924e0a7b"
        ],
        [
            "unfold FtoRradix in |- *; apply Fopp_correct; auto.",
            "VernacExtend",
            "eb95e8d6d6420f991db59deb8154e05486f78e4a"
        ],
        [
            "split.",
            "VernacExtend",
            "55abc140132bd88981001ac656020469a8d503eb"
        ],
        [
            "apply oppBounded; auto.",
            "VernacExtend",
            "6e68d2122eeea082741ca4e279707ce0511c71ef"
        ],
        [
            "simpl in |- *; auto.",
            "VernacExtend",
            "9b631374b1d3067f703fd99c5dc6e1e5c8405957"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Theorem absFBounded : forall (b : Fbound) (f : float), Fbounded b f -> Fbounded b (Fabs f).",
            "VernacStartTheoremProof",
            "f142bbc3f3ed9f1e88d3a64214bf45d2e2818416"
        ],
        [
            "intros b f H'; repeat split; simpl in |- *; auto with float.",
            "VernacExtend",
            "dee8acc51e140c928ac43f5cfe31f224f7744b87"
        ],
        [
            "replace (Zabs (Zabs (Fnum f))) with (Zabs (Fnum f)); auto with float.",
            "VernacExtend",
            "5d4a2836805fc165b91c26ba52a8f8e146e03b45"
        ],
        [
            "case (Fnum f); auto.",
            "VernacExtend",
            "88c485b0917f0c538d41f2eeafbc86ea31776c70"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Theorem FboundedEqExpPos : forall (b : Fbound) (p q : float), Fbounded b p -> p = q :>R -> (Fexp p <= Fexp q)%R -> (0 <= q)%R -> Fbounded b q.",
            "VernacStartTheoremProof",
            "a063cd161eec97c0ba8116b1fd90c19bc0db9082"
        ],
        [
            "intros b p q H' H'0 H'1 H'2.",
            "VernacExtend",
            "90812faa5caaa0019725579e6278a14fdd57abaa"
        ],
        [
            "cut (0 <= Fnum p)%Z; [ intros Z1 | apply (LeR0Fnum radix); auto with real arith; fold FtoRradix in |- *; rewrite H'0; auto ].",
            "VernacExtend",
            "e05ce4a2d9eecc4a7d493f36cb04212aa35c1592"
        ],
        [
            "cut (0 <= Fnum q)%Z; [ intros Z2 | apply (LeR0Fnum radix); auto with real arith ].",
            "VernacExtend",
            "2094cfd6e41b5e88ac5c3c9228e483a607590aff"
        ],
        [
            "split.",
            "VernacExtend",
            "55abc140132bd88981001ac656020469a8d503eb"
        ],
        [
            "apply Zle_lt_trans with (Zabs (Fnum p)); [ idtac | auto with float ].",
            "VernacExtend",
            "e480874a1bbe47c35c1194ae8e1ea5044092277b"
        ],
        [
            "repeat rewrite Zabs_eq; auto.",
            "VernacExtend",
            "f0eeb17597fcafe4740de3c7894aeb9f7976dfad"
        ],
        [
            "apply Zle_trans with (Fnum (Fshift radix (Zabs_nat (Fexp q - Fexp p)) q)); auto.",
            "VernacExtend",
            "9fcff9ad14c5150a5a63aa69ed528833ae49a3b9"
        ],
        [
            "unfold Fshift in |- *; simpl in |- *; auto.",
            "VernacExtend",
            "baa4a2f1671b50731655b6bebcae6bbd6702374a"
        ],
        [
            "pattern (Fnum q) at 1 in |- *; replace (Fnum q) with (Fnum q * 1)%Z; auto with zarith.",
            "VernacExtend",
            "4b35dfae8cb31344df6e0d6e07eb59b9a6dfd182"
        ],
        [
            "apply (Rle_Fexp_eq_Zle radix); auto with real zarith.",
            "VernacExtend",
            "ca0c1d6b16412e6949927630a69515a6b811ac91"
        ],
        [
            "rewrite FshiftCorrect; auto with real zarith.",
            "VernacExtend",
            "148323c2d4dd61477a63e1eac05a6028ae115b99"
        ],
        [
            "unfold Fshift in |- *; simpl in |- *; rewrite inj_abs; try ring.",
            "VernacExtend",
            "80d5974ae75d60fe60cfe572c42f90f11019ee37"
        ],
        [
            "apply Zle_Zminus_ZERO; apply le_IZR; auto with real arith.",
            "VernacExtend",
            "f8753c135982e90e9e79e3175f6cf0dcf5361f7b"
        ],
        [
            "apply Zle_trans with (Fexp p).",
            "VernacExtend",
            "37584f1446c8477d9b9f2d18f8a22371516f6862"
        ],
        [
            "case H'; auto.",
            "VernacExtend",
            "ebc5b3ac68f03e20b8a194319f607aaad1bf60b4"
        ],
        [
            "apply le_IZR; auto with real arith.",
            "VernacExtend",
            "8caf2a323eac6daa8b26bb77adab7f688106c47e"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Theorem FboundedEqExp : forall (b : Fbound) (p q : float), Fbounded b p -> p = q :>R -> (Fexp p <= Fexp q)%R -> Fbounded b q.",
            "VernacStartTheoremProof",
            "d53b2b30ef6f7ca76d6621fe1d0ee90ec7f40622"
        ],
        [
            "intros b p q H' H'0 H'1; split.",
            "VernacExtend",
            "4e9dcbb84503fb9c611ce75b35c15cb3aad18cd1"
        ],
        [
            "apply Zle_lt_trans with (Zabs (Fnum p)); [ idtac | auto with float ].",
            "VernacExtend",
            "e480874a1bbe47c35c1194ae8e1ea5044092277b"
        ],
        [
            "apply Zle_trans with (Zabs (Fnum (Fshift radix (Zabs_nat (Fexp q - Fexp p)) q))); auto.",
            "VernacExtend",
            "778360d4666a3ca1fd3f9046a93b494ebef72e45"
        ],
        [
            "unfold Fshift in |- *; simpl in |- *; auto.",
            "VernacExtend",
            "baa4a2f1671b50731655b6bebcae6bbd6702374a"
        ],
        [
            "rewrite Zabs_Zmult.",
            "VernacExtend",
            "f459c70d0601b9eab86bcf62dfb70a911d8ba871"
        ],
        [
            "pattern (Zabs (Fnum q)) at 1 in |- *; replace (Zabs (Fnum q)) with (Zabs (Fnum q) * 1%nat)%Z; [ apply Zle_Zmult_comp_l | auto with zarith ]; auto with zarith.",
            "VernacExtend",
            "8e741d6c470f8e021b69dcdf96e59e870ab7dfbf"
        ],
        [
            "rewrite Zabs_eq; simpl in |- *; auto with zarith.",
            "VernacExtend",
            "7869ec75c59f570830e5dd33a9bc295367a0fdc1"
        ],
        [
            "simpl in |- *; ring.",
            "VernacExtend",
            "dbea56eab9f20d9ab08eaf0f2769e833b9098d51"
        ],
        [
            "cut (Fexp p <= Fexp q)%Z; [ intros E2 | idtac ].",
            "VernacExtend",
            "3e57cc3a757754b2c8a165541b03ecb4480e78e9"
        ],
        [
            "apply le_IZR; auto.",
            "VernacExtend",
            "5ddae610de44a290611008bca1b760849106ddb9"
        ],
        [
            "apply (Rle_monotony_contra_exp radix) with (z := Fexp p); auto with real arith.",
            "VernacExtend",
            "fe4546564d217fef69b0bbeee2f0257a4751f8ac"
        ],
        [
            "pattern (Fexp p) at 2 in |- *; replace (Fexp p) with (Fexp (Fshift radix (Zabs_nat (Fexp q - Fexp p)) q)); auto.",
            "VernacExtend",
            "05f603d7f697c8e0d307b96b68bced6ba8fb6ccb"
        ],
        [
            "rewrite <- (fun x => Rabs_pos_eq (powerRZ radix x)); auto with real zarith.",
            "VernacExtend",
            "28dde5aa8431b9c9949f64d6c596146139b94a05"
        ],
        [
            "rewrite <- Faux.Rabsolu_Zabs.",
            "VernacExtend",
            "a337f3b6f39bb0a91aecc179c9d199b14789d858"
        ],
        [
            "rewrite <- Rabs_mult.",
            "VernacExtend",
            "ffb7829eab0f0e304148d87efd020e97968f73cc"
        ],
        [
            "change (Rabs (FtoRradix (Fshift radix (Zabs_nat (Fexp q - Fexp p)) q)) <= Zabs (Fnum p) * powerRZ radix (Fexp p))%R in |- *.",
            "VernacExtend",
            "a3fc6ac139f48c1ce9609a2b148d1afc0c792315"
        ],
        [
            "unfold FtoRradix in |- *; rewrite FshiftCorrect; auto.",
            "VernacExtend",
            "5abbc7cb08d11ed8fd912e6cc82302a9cbf61541"
        ],
        [
            "fold FtoRradix in |- *; rewrite <- H'0.",
            "VernacExtend",
            "fadb90322547258a3bb972b3ef0276b63ea5d5aa"
        ],
        [
            "rewrite <- (Fabs_correct radix); auto with real zarith.",
            "VernacExtend",
            "2ff290977b9ba80878887a2b2d4d83d4381557fa"
        ],
        [
            "unfold Fshift in |- *; simpl in |- *.",
            "VernacExtend",
            "bc2226e4b5a4ef5bbaea414d285c81f30a1eb932"
        ],
        [
            "rewrite inj_abs; [ ring | auto with zarith ].",
            "VernacExtend",
            "9f20cfc6bc457c5ef916dbfeb4e191caa172b0d0"
        ],
        [
            "cut (Fexp p <= Fexp q)%Z; [ intros E2 | apply le_IZR ]; auto.",
            "VernacExtend",
            "beee4172f133568e5356c96b93a35e581ea4cc18"
        ],
        [
            "apply Zle_trans with (Fexp p); [ idtac | apply le_IZR ]; auto with float.",
            "VernacExtend",
            "f6e9a336ec859f07f18792425371310372be4264"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Theorem eqExpLess : forall (b : Fbound) (p q : float), Fbounded b p -> p = q :>R -> exists r : float, Fbounded b r /\\ r = q :>R /\\ (Fexp q <= Fexp r)%R.",
            "VernacStartTheoremProof",
            "d0591f60731b3fe5e94992353af92195a4ed979d"
        ],
        [
            "intros b p q H' H'0.",
            "VernacExtend",
            "e71da5d533a76255a685082a9f411a1f816a5a52"
        ],
        [
            "case (Rle_or_lt (Fexp q) (Fexp p)); intros H'1.",
            "VernacExtend",
            "0adda8b005c56775413215844d493d7877859180"
        ],
        [
            "exists p; repeat (split; auto).",
            "VernacExtend",
            "fb4882801dea0b900f374770e08a7775c7fcbc94"
        ],
        [
            "exists q; split; [ idtac | split ]; auto with real.",
            "VernacExtend",
            "5287b2509008142b4e4ce7517211a35fc7e4c694"
        ],
        [
            "apply FboundedEqExp with (p := p); auto.",
            "VernacExtend",
            "c8ae740277282f59886b84696c3936bbc732dfea"
        ],
        [
            "apply Rlt_le; auto.",
            "VernacExtend",
            "4003e3e1c449ee89cad9e953d0a562db8235648c"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Theorem FboundedShiftLess : forall (b : Fbound) (f : float) (n m : nat), m <= n -> Fbounded b (Fshift radix n f) -> Fbounded b (Fshift radix m f).",
            "VernacStartTheoremProof",
            "82cd89ead10b981858799fe673b3d0869a4e8c42"
        ],
        [
            "intros b f n m H' H'0; split; auto.",
            "VernacExtend",
            "4c4c2cb4d0b469e63b0e991824bc922d1a3bb1d1"
        ],
        [
            "simpl in |- *; auto.",
            "VernacExtend",
            "9b631374b1d3067f703fd99c5dc6e1e5c8405957"
        ],
        [
            "apply Zle_lt_trans with (Zabs (Fnum (Fshift radix n f))).",
            "VernacExtend",
            "05fc2072018e0b654b25985dc341f43481c83260"
        ],
        [
            "simpl in |- *; replace m with (m + 0); auto with arith.",
            "VernacExtend",
            "ebcbee338aa829a94113605504e211c7c621f39e"
        ],
        [
            "replace n with (m + (n - m)); auto with arith.",
            "VernacExtend",
            "9c89a4c9e46ecf881ad0a2a326f38f5ef8604603"
        ],
        [
            "repeat rewrite Zpower_nat_is_exp.",
            "VernacExtend",
            "7d9ae6da3cad771d936acb8b3fce90964e7ecbbb"
        ],
        [
            "repeat rewrite Zabs_Zmult; auto.",
            "VernacExtend",
            "902bf53b9e9be524b1ec50bfaa3660a0b273e7eb"
        ],
        [
            "apply Zle_Zmult_comp_l; auto with zarith.",
            "VernacExtend",
            "0a442d3268531835feca11bf21b34ab2eb26341b"
        ],
        [
            "apply Zle_Zmult_comp_l; auto with zarith.",
            "VernacExtend",
            "0a442d3268531835feca11bf21b34ab2eb26341b"
        ],
        [
            "repeat rewrite Zabs_eq; auto with zarith.",
            "VernacExtend",
            "ce6af9c9e2dbbf5e96aba4104d03a58482acdd03"
        ],
        [
            "case H'0; auto.",
            "VernacExtend",
            "c95954a4912ccfdd6e4780b3eecd4f9a4fbca076"
        ],
        [
            "apply Zle_trans with (Fexp (Fshift radix n f)); auto with float.",
            "VernacExtend",
            "7db7f173f90dfefa3f7d90c1e21b04743e4bb1e8"
        ],
        [
            "simpl in |- *; unfold Zminus in |- *; auto with zarith.",
            "VernacExtend",
            "30f62d435f3910ada7b6d31292f375853d267a48"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Theorem eqExpMax : forall (b : Fbound) (p q : float), Fbounded b p -> Fbounded b q -> (Fabs p <= q)%R -> exists r : float, Fbounded b r /\\ r = p :>R /\\ (Fexp r <= Fexp q)%Z.",
            "VernacStartTheoremProof",
            "dc4f9ea2a098db46b2fa8d893af55ae4cc39eaa7"
        ],
        [
            "intros b p q H' H'0 H'1; case (Zle_or_lt (Fexp p) (Fexp q)); intros Rl0.",
            "VernacExtend",
            "7340fecaf266847996498ee386a069f0f2f4402b"
        ],
        [
            "exists p; auto.",
            "VernacExtend",
            "ce43f93b5525ba4b412c7576bb2db79216326ab5"
        ],
        [
            "cut ((Fexp p - Zabs_nat (Fexp p - Fexp q))%Z = Fexp q); [ intros Eq1 | idtac ].",
            "VernacExtend",
            "484b879451b88777f115fae97b06c4f148f82a88"
        ],
        [
            "exists (Fshift radix (Zabs_nat (Fexp p - Fexp q)) p); split; split; auto.",
            "VernacExtend",
            "9cecd1bbd61365e75be04713c804797a7b5df676"
        ],
        [
            "apply Zle_lt_trans with (Fnum q); auto with float.",
            "VernacExtend",
            "4a4bab53fc66bfffaa87dba11d87764deade4f33"
        ],
        [
            "replace (Zabs (Fnum (Fshift radix (Zabs_nat (Fexp p - Fexp q)) p))) with (Fnum (Fabs (Fshift radix (Zabs_nat (Fexp p - Fexp q)) p))); auto.",
            "VernacExtend",
            "6794bfe1b5e5db9f740c66c0071e34874be42ee0"
        ],
        [
            "apply (Rle_Fexp_eq_Zle radix); auto with arith.",
            "VernacExtend",
            "dba44f482d641974d8a9ee8f8449641c0141bd17"
        ],
        [
            "rewrite Fabs_correct; auto with arith; rewrite FshiftCorrect; auto with arith; rewrite <- (Fabs_correct radix); auto with float arith.",
            "VernacExtend",
            "a7d21ab2b10ffa35f3cd560cb306c56f84a8fe21"
        ],
        [
            "rewrite <- (Zabs_eq (Fnum q)); auto with float zarith.",
            "VernacExtend",
            "b522ac8758ac52cbecca11948acf47f24bd5ddc6"
        ],
        [
            "apply (LeR0Fnum radix); auto.",
            "VernacExtend",
            "8495e6ad2e5a68d8e7fe5d9a8401af435ce04ea2"
        ],
        [
            "apply Rle_trans with (2 := H'1); auto with real.",
            "VernacExtend",
            "eb4bb48889688b1081375149add1bd2642c9fef4"
        ],
        [
            "rewrite (Fabs_correct radix); auto with real zarith.",
            "VernacExtend",
            "380138041f48d27aba8418f5e3c7c02d8d80765e"
        ],
        [
            "unfold Fshift in |- *; simpl in |- *; rewrite Eq1; auto with float.",
            "VernacExtend",
            "9082248f1127c13d454d5b1d3dc72c451ec46ab7"
        ],
        [
            "unfold FtoRradix in |- *; apply FshiftCorrect; auto.",
            "VernacExtend",
            "d60e6b2f7fe84e464f5a081721e938e29839d70a"
        ],
        [
            "unfold Fshift in |- *; simpl in |- *.",
            "VernacExtend",
            "bc2226e4b5a4ef5bbaea414d285c81f30a1eb932"
        ],
        [
            "rewrite Eq1; auto with zarith.",
            "VernacExtend",
            "bdccbb4ec4229bd96cea6bc4ee586f4b8ccc03bc"
        ],
        [
            "rewrite inj_abs; auto with zarith; ring.",
            "VernacExtend",
            "ae620b1c41c55f5d2951e8bf161b1c227e7b5bb2"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Theorem Zle_monotony_contra_abs_pow : forall x y z n : Z, (0 < z)%Z -> (Rabs (x * powerRZ z n) <= Rabs (y * powerRZ z n))%R -> (Zabs x <= Zabs y)%Z.",
            "VernacStartTheoremProof",
            "8ffba1b452589c1e63c811d42f56ec80b5808630"
        ],
        [
            "intros x y z n Hz O1.",
            "VernacExtend",
            "8ee3546c67c52546bf7fac6a51a595fac20a59bf"
        ],
        [
            "apply le_IZR; auto.",
            "VernacExtend",
            "5ddae610de44a290611008bca1b760849106ddb9"
        ],
        [
            "apply Rmult_le_reg_l with (r := powerRZ z n); auto with real zarith.",
            "VernacExtend",
            "b7e117797ab4abc40e0ea2169d4419db1fae5b7e"
        ],
        [
            "repeat rewrite (Rmult_comm (powerRZ z n)); auto.",
            "VernacExtend",
            "a77a450e9deff4dc0bd4a7553737f10bc7fba97a"
        ],
        [
            "repeat rewrite <- Faux.Rabsolu_Zabs.",
            "VernacExtend",
            "86831d34f943221532aa505bea44267f5f3aa077"
        ],
        [
            "replace (powerRZ z n) with (Rabs (powerRZ z n)).",
            "VernacExtend",
            "a38f023022f5836a3953536cb01f2bb9b579c78f"
        ],
        [
            "repeat rewrite <- Rabs_mult; auto.",
            "VernacExtend",
            "981e8ebae82ccbfa8decda9167cc5a03e5aedacf"
        ],
        [
            "apply Rabs_pos_eq; auto with real zarith.",
            "VernacExtend",
            "66d4290db822e84dcfe52ca3aa2473c1e3692670"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Theorem LessExpBound : forall (b : Fbound) (p q : float), Fbounded b p -> Fbounded b q -> (Fexp q <= Fexp p)%Z -> (0 <= p)%R -> (p <= q)%R -> exists m : Z, Float m (Fexp q) = p :>R /\\ Fbounded b (Float m (Fexp q)).",
            "VernacStartTheoremProof",
            "4e6160e179ffad6ba60d9d1508298d18b2b4ac49"
        ],
        [
            "intros b p q H' H'0 H'1 H'2 H'3; exists (Fnum p * Zpower_nat radix (Zabs_nat (Fexp p - Fexp q)))%Z.",
            "VernacExtend",
            "2c111cb8685f3f9e63eda8e11813306772412042"
        ],
        [
            "cut (Float (Fnum p * Zpower_nat radix (Zabs_nat (Fexp p - Fexp q))) (Fexp q) = p :>R); [ intros Eq1 | idtac ].",
            "VernacExtend",
            "3a06dadb3ddeed06f33e2551000c40a35419c021"
        ],
        [
            "split; auto.",
            "VernacExtend",
            "fcd44a714bd12fa54b1c7746996e44dbac16df06"
        ],
        [
            "repeat split; simpl in |- *; auto with float.",
            "VernacExtend",
            "3e093824de91ab2af8d090987eafb93df05226c2"
        ],
        [
            "apply Zle_lt_trans with (Zabs (Fnum q)); auto with float.",
            "VernacExtend",
            "a742dc36e896e4eb19010fe5454ba4b48533612a"
        ],
        [
            "apply Zle_monotony_contra_abs_pow with (z := radix) (n := Fexp q); auto with real arith.",
            "VernacExtend",
            "ba670fa6b57c378f3d1dec0fa8c423c0c1e917fd"
        ],
        [
            "unfold FtoRradix, FtoR in Eq1; simpl in Eq1; rewrite Eq1; auto with real.",
            "VernacExtend",
            "7cf0189988871f7b55e93ef3208d0677d267b5b1"
        ],
        [
            "change (Rabs p <= Rabs q)%R in |- *.",
            "VernacExtend",
            "26fbe12e486fac4e019c770a7e17421ace244fc3"
        ],
        [
            "repeat rewrite Rabs_pos_eq; auto with real.",
            "VernacExtend",
            "1b60d84bb7c426a336b3045bf63082dfe61f7ccb"
        ],
        [
            "apply Rle_trans with (1 := H'2); auto.",
            "VernacExtend",
            "3541f62a93d76231946b2e823c6de1420692f193"
        ],
        [
            "pattern (Fexp q) at 2 in |- *; replace (Fexp q) with (Fexp p - Zabs_nat (Fexp p - Fexp q))%Z.",
            "VernacExtend",
            "7817c3c6f04f663244c0c4629ebd5d45a41b7052"
        ],
        [
            "change (Fshift radix (Zabs_nat (Fexp p - Fexp q)) p = p :>R) in |- *.",
            "VernacExtend",
            "a0383f44b6608a45f7eae13e6e24d01d130bc25b"
        ],
        [
            "unfold FtoRradix in |- *; apply FshiftCorrect; auto.",
            "VernacExtend",
            "d60e6b2f7fe84e464f5a081721e938e29839d70a"
        ],
        [
            "rewrite inj_abs; auto with zarith; ring.",
            "VernacExtend",
            "ae620b1c41c55f5d2951e8bf161b1c227e7b5bb2"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Theorem maxFbounded : forall (b : Fbound) (z : Z), (- dExp b <= z)%Z -> Fbounded b (Float (Zpred (Zpos (vNum b))) z).",
            "VernacStartTheoremProof",
            "7798061576bd3c298594b1d6ce7716e010b94238"
        ],
        [
            "intros b z H; split; auto.",
            "VernacExtend",
            "e42e311f48c134610543ed1d03c2f1d8416d315f"
        ],
        [
            "change (Zabs (Zpred (Zpos (vNum b))) < Zpos (vNum b))%Z in |- *.",
            "VernacExtend",
            "13b551fa59976fd390b168834db728c413e62980"
        ],
        [
            "rewrite Zabs_eq; auto with zarith.",
            "VernacExtend",
            "e3b6647506c6d43441146989691d7c27f1722b7e"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Theorem maxMax : forall (b : Fbound) (p : float) (z : Z), Fbounded b p -> (Fexp p <= z)%Z -> (Fabs p < Float (Zpos (vNum b)) z)%R.",
            "VernacStartTheoremProof",
            "c69a396d2d010fc4f849829c2d903fd6bfd636d9"
        ],
        [
            "intros b p z H' H'0; unfold FtoRradix in |- *; rewrite <- (FshiftCorrect _ radixMoreThanOne (Zabs_nat (z - Fexp p)) (Float (Zpos (vNum b)) z)); unfold Fshift in |- *.",
            "VernacExtend",
            "b30451bf01f1c1bc2d33ade451f0e7acd9dbea4f"
        ],
        [
            "change (FtoR radix (Fabs p) < FtoR radix (Float (Zpos (vNum b) * Zpower_nat radix (Zabs_nat (z - Fexp p))) (z - Zabs_nat (z - Fexp p))))%R in |- *.",
            "VernacExtend",
            "04a1e6346cb39d27ea2d1c4c3bb2f7e1488f3b19"
        ],
        [
            "replace (z - Zabs_nat (z - Fexp p))%Z with (Fexp p).",
            "VernacExtend",
            "23dc71823494597d637350a7beafdea958944956"
        ],
        [
            "unfold Fabs, FtoR in |- *.",
            "VernacExtend",
            "828c336ef3ca7440b3bb02b64907b130813430ce"
        ],
        [
            "change (Zabs (Fnum p) * powerRZ radix (Fexp p) < (Zpos (vNum b) * Zpower_nat radix (Zabs_nat (z - Fexp p)))%Z * powerRZ radix (Fexp p))%R in |- *.",
            "VernacExtend",
            "8367c6e1287fa449dbbd5462e7d825ab9e806dbb"
        ],
        [
            "apply Rmult_lt_compat_r; auto with real zarith.",
            "VernacExtend",
            "af97f05ee44fae67886c77002c67d00aa586a813"
        ],
        [
            "apply Rlt_le_trans with (IZR (Zpos (vNum b))); auto with real float zarith.",
            "VernacExtend",
            "f39940527e5e3bb9dabaa99ac28e94cca6596911"
        ],
        [
            "pattern (Zpos (vNum b)) at 1 in |- *; replace (Zpos (vNum b)) with (Zpos (vNum b) * 1)%Z; auto with real float zarith; ring.",
            "VernacExtend",
            "5eac92ac412fba879ae635ac270263fa50dcc8e4"
        ],
        [
            "rewrite inj_abs; auto with zarith; ring.",
            "VernacExtend",
            "ae620b1c41c55f5d2951e8bf161b1c227e7b5bb2"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "End Fbounded_Def.",
            "VernacEndSegment",
            "fb09faf9cf04c33304232b6989d3f7a131284af9"
        ],
        [
            "Hint Resolve FboundedFzero oppBounded absFBounded maxFbounded FboundedNum FboundedExp: float.",
            "VernacHints",
            "53a262b6a414e6045c4247e7fafb0a7c4d4360cc"
        ]
    ],
    "proofs": [
        {
            "name": "FboundedNum",
            "line_nb": 11,
            "steps": [
                {
                    "command": [
                        "intros b p H; case H; intros H1 H2; case H1; auto.",
                        "VernacExtend",
                        "8e307b829aa2827da33ddfbffea55f4d54163091"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "FboundedExp",
            "line_nb": 14,
            "steps": [
                {
                    "command": [
                        "intros b p H; case H; auto.",
                        "VernacExtend",
                        "a1536f9ecf52296a19a2a32a4318660d141c70c9"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "isBounded",
            "line_nb": 18,
            "steps": [
                {
                    "command": [
                        "intros b p; case (Z_le_gt_dec (Zpos (vNum b)) (Zabs (Fnum p))); intros H'.",
                        "VernacExtend",
                        "41b7eb39d9b82ea0bec87c3034740a7e924b278b"
                    ]
                },
                {
                    "command": [
                        "right; red in |- *; intros H'3; Contradict H'; auto with float zarith.",
                        "VernacExtend",
                        "1d61bae8d38a536e5ba24acbc168b4819b163d33"
                    ]
                },
                {
                    "command": [
                        "case (Z_le_gt_dec (- dExp b) (Fexp p)); intros H'1.",
                        "VernacExtend",
                        "e74883073376aa273a126c8bf394f8676474b673"
                    ]
                },
                {
                    "command": [
                        "left; repeat split; auto with zarith.",
                        "VernacExtend",
                        "9051455f81f84ffc30d2f938c724518a973784af"
                    ]
                },
                {
                    "command": [
                        "right; red in |- *; intros H'3; Contradict H'1; auto with float zarith.",
                        "VernacExtend",
                        "637df4040fd3116e91346565e7a2403cdbe03f02"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "FzeroisZero",
            "line_nb": 25,
            "steps": [
                {
                    "command": [
                        "intros b; unfold FtoRradix, FtoR in |- *; simpl in |- *; auto with real.",
                        "VernacExtend",
                        "81d4aae2b77e9eb775ea85491dea701b4ab6d60b"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "FboundedFzero",
            "line_nb": 28,
            "steps": [
                {
                    "command": [
                        "intros b; repeat (split; simpl in |- *).",
                        "VernacExtend",
                        "f36a779af2428249daeec1a25d3ab6a66c06ffa1"
                    ]
                },
                {
                    "command": [
                        "replace 0%Z with (- 0%nat)%Z; [ idtac | simpl in |- *; auto ].",
                        "VernacExtend",
                        "851e19a773eccba1b50876aef829e30ef51ef67c"
                    ]
                },
                {
                    "command": [
                        "apply Zeq_le; auto with arith.",
                        "VernacExtend",
                        "f8e9d73f75ee2d765f257bb9ff407b42a104a9b7"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "FboundedZeroSameExp",
            "line_nb": 34,
            "steps": [
                {
                    "command": [
                        "intros b p H'; (repeat split; simpl in |- *; auto with float zarith).",
                        "VernacExtend",
                        "575abb7c79304a8be70ea26dff8be29b61876e08"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "FBoundedScale",
            "line_nb": 37,
            "steps": [
                {
                    "command": [
                        "intros b p n H'; repeat split; simpl in |- *; auto with float.",
                        "VernacExtend",
                        "06706df476c73cb3e550fe94d785bf3aacd8a369"
                    ]
                },
                {
                    "command": [
                        "apply Zle_trans with (Fexp p); auto with float.",
                        "VernacExtend",
                        "79a02826801bf77197e35a9747ac92d4a85dbc80"
                    ]
                },
                {
                    "command": [
                        "pattern (Fexp p) at 1 in |- *; (replace (Fexp p) with (Fexp p + 0%nat)%Z; [ idtac | simpl in |- *; ring ]).",
                        "VernacExtend",
                        "f9a2aba384c1e7c3a5823fcbd22f3dabb2dd7496"
                    ]
                },
                {
                    "command": [
                        "apply Zplus_le_compat_l.",
                        "VernacExtend",
                        "4450bbafdb2180fd74d1eec9b3c2923119b209d4"
                    ]
                },
                {
                    "command": [
                        "apply inj_le; auto with arith.",
                        "VernacExtend",
                        "2b46e939b249039a6e0ba1af5b3252a5b30b9c71"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "FvalScale",
            "line_nb": 44,
            "steps": [
                {
                    "command": [
                        "intros b p n; unfold FtoRradix, FtoR in |- *; simpl in |- *.",
                        "VernacExtend",
                        "0a0d1c5dca276a240c2a600057bba40a568e53f6"
                    ]
                },
                {
                    "command": [
                        "rewrite powerRZ_add; auto with real zarith.",
                        "VernacExtend",
                        "464b630a39cda032263051881ad80da2fc959c8e"
                    ]
                },
                {
                    "command": [
                        "ring.",
                        "VernacExtend",
                        "baadd9fc4c175005af409bb466fcea9fab25b4e6"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "oppBounded",
            "line_nb": 49,
            "steps": [
                {
                    "command": [
                        "intros b x H'; repeat split; simpl in |- *; auto with float zarith.",
                        "VernacExtend",
                        "e4737ea833b3611411aa0db57c23bcb2f203fb67"
                    ]
                },
                {
                    "command": [
                        "replace (Zabs (- Fnum x)) with (Zabs (Fnum x)); auto with float.",
                        "VernacExtend",
                        "1ca096edfca5196e57db07c100d98543827580bb"
                    ]
                },
                {
                    "command": [
                        "case (Fnum x); simpl in |- *; auto.",
                        "VernacExtend",
                        "3cce1211977e28fb638ee96f6a1cf3baa40d02e5"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "oppBoundedInv",
            "line_nb": 54,
            "steps": [
                {
                    "command": [
                        "intros b x H'; rewrite <- (Fopp_Fopp x).",
                        "VernacExtend",
                        "05809f8c84574833d4c462d541ce0c9448cdcb54"
                    ]
                },
                {
                    "command": [
                        "apply oppBounded; auto.",
                        "VernacExtend",
                        "6e68d2122eeea082741ca4e279707ce0511c71ef"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "FopRepAux",
            "line_nb": 58,
            "steps": [
                {
                    "command": [
                        "intros b z p H'; elim H'; intros r E; elim E; intros H'0 H'1; elim H'1; intros H'2 H'3; clear H'1 E H'.",
                        "VernacExtend",
                        "fca8e0f16c0a7b990d128bf2fbaa4de4eb3d04a0"
                    ]
                },
                {
                    "command": [
                        "exists (Fopp r); split; auto.",
                        "VernacExtend",
                        "fc47daf48506450555242e3fcce1b5260174c02d"
                    ]
                },
                {
                    "command": [
                        "rewrite <- (Ropp_involutive p).",
                        "VernacExtend",
                        "e55b95433b25e2cfb8366d9d3e0bf28df84cbe1e"
                    ]
                },
                {
                    "command": [
                        "rewrite <- H'0; auto.",
                        "VernacExtend",
                        "fc433a0a33372284ece38ef844926b71924e0a7b"
                    ]
                },
                {
                    "command": [
                        "unfold FtoRradix in |- *; apply Fopp_correct; auto.",
                        "VernacExtend",
                        "eb95e8d6d6420f991db59deb8154e05486f78e4a"
                    ]
                },
                {
                    "command": [
                        "split.",
                        "VernacExtend",
                        "55abc140132bd88981001ac656020469a8d503eb"
                    ]
                },
                {
                    "command": [
                        "apply oppBounded; auto.",
                        "VernacExtend",
                        "6e68d2122eeea082741ca4e279707ce0511c71ef"
                    ]
                },
                {
                    "command": [
                        "simpl in |- *; auto.",
                        "VernacExtend",
                        "9b631374b1d3067f703fd99c5dc6e1e5c8405957"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "absFBounded",
            "line_nb": 68,
            "steps": [
                {
                    "command": [
                        "intros b f H'; repeat split; simpl in |- *; auto with float.",
                        "VernacExtend",
                        "dee8acc51e140c928ac43f5cfe31f224f7744b87"
                    ]
                },
                {
                    "command": [
                        "replace (Zabs (Zabs (Fnum f))) with (Zabs (Fnum f)); auto with float.",
                        "VernacExtend",
                        "5d4a2836805fc165b91c26ba52a8f8e146e03b45"
                    ]
                },
                {
                    "command": [
                        "case (Fnum f); auto.",
                        "VernacExtend",
                        "88c485b0917f0c538d41f2eeafbc86ea31776c70"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "FboundedEqExpPos",
            "line_nb": 73,
            "steps": [
                {
                    "command": [
                        "intros b p q H' H'0 H'1 H'2.",
                        "VernacExtend",
                        "90812faa5caaa0019725579e6278a14fdd57abaa"
                    ]
                },
                {
                    "command": [
                        "cut (0 <= Fnum p)%Z; [ intros Z1 | apply (LeR0Fnum radix); auto with real arith; fold FtoRradix in |- *; rewrite H'0; auto ].",
                        "VernacExtend",
                        "e05ce4a2d9eecc4a7d493f36cb04212aa35c1592"
                    ]
                },
                {
                    "command": [
                        "cut (0 <= Fnum q)%Z; [ intros Z2 | apply (LeR0Fnum radix); auto with real arith ].",
                        "VernacExtend",
                        "2094cfd6e41b5e88ac5c3c9228e483a607590aff"
                    ]
                },
                {
                    "command": [
                        "split.",
                        "VernacExtend",
                        "55abc140132bd88981001ac656020469a8d503eb"
                    ]
                },
                {
                    "command": [
                        "apply Zle_lt_trans with (Zabs (Fnum p)); [ idtac | auto with float ].",
                        "VernacExtend",
                        "e480874a1bbe47c35c1194ae8e1ea5044092277b"
                    ]
                },
                {
                    "command": [
                        "repeat rewrite Zabs_eq; auto.",
                        "VernacExtend",
                        "f0eeb17597fcafe4740de3c7894aeb9f7976dfad"
                    ]
                },
                {
                    "command": [
                        "apply Zle_trans with (Fnum (Fshift radix (Zabs_nat (Fexp q - Fexp p)) q)); auto.",
                        "VernacExtend",
                        "9fcff9ad14c5150a5a63aa69ed528833ae49a3b9"
                    ]
                },
                {
                    "command": [
                        "unfold Fshift in |- *; simpl in |- *; auto.",
                        "VernacExtend",
                        "baa4a2f1671b50731655b6bebcae6bbd6702374a"
                    ]
                },
                {
                    "command": [
                        "pattern (Fnum q) at 1 in |- *; replace (Fnum q) with (Fnum q * 1)%Z; auto with zarith.",
                        "VernacExtend",
                        "4b35dfae8cb31344df6e0d6e07eb59b9a6dfd182"
                    ]
                },
                {
                    "command": [
                        "apply (Rle_Fexp_eq_Zle radix); auto with real zarith.",
                        "VernacExtend",
                        "ca0c1d6b16412e6949927630a69515a6b811ac91"
                    ]
                },
                {
                    "command": [
                        "rewrite FshiftCorrect; auto with real zarith.",
                        "VernacExtend",
                        "148323c2d4dd61477a63e1eac05a6028ae115b99"
                    ]
                },
                {
                    "command": [
                        "unfold Fshift in |- *; simpl in |- *; rewrite inj_abs; try ring.",
                        "VernacExtend",
                        "80d5974ae75d60fe60cfe572c42f90f11019ee37"
                    ]
                },
                {
                    "command": [
                        "apply Zle_Zminus_ZERO; apply le_IZR; auto with real arith.",
                        "VernacExtend",
                        "f8753c135982e90e9e79e3175f6cf0dcf5361f7b"
                    ]
                },
                {
                    "command": [
                        "apply Zle_trans with (Fexp p).",
                        "VernacExtend",
                        "37584f1446c8477d9b9f2d18f8a22371516f6862"
                    ]
                },
                {
                    "command": [
                        "case H'; auto.",
                        "VernacExtend",
                        "ebc5b3ac68f03e20b8a194319f607aaad1bf60b4"
                    ]
                },
                {
                    "command": [
                        "apply le_IZR; auto with real arith.",
                        "VernacExtend",
                        "8caf2a323eac6daa8b26bb77adab7f688106c47e"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "FboundedEqExp",
            "line_nb": 91,
            "steps": [
                {
                    "command": [
                        "intros b p q H' H'0 H'1; split.",
                        "VernacExtend",
                        "4e9dcbb84503fb9c611ce75b35c15cb3aad18cd1"
                    ]
                },
                {
                    "command": [
                        "apply Zle_lt_trans with (Zabs (Fnum p)); [ idtac | auto with float ].",
                        "VernacExtend",
                        "e480874a1bbe47c35c1194ae8e1ea5044092277b"
                    ]
                },
                {
                    "command": [
                        "apply Zle_trans with (Zabs (Fnum (Fshift radix (Zabs_nat (Fexp q - Fexp p)) q))); auto.",
                        "VernacExtend",
                        "778360d4666a3ca1fd3f9046a93b494ebef72e45"
                    ]
                },
                {
                    "command": [
                        "unfold Fshift in |- *; simpl in |- *; auto.",
                        "VernacExtend",
                        "baa4a2f1671b50731655b6bebcae6bbd6702374a"
                    ]
                },
                {
                    "command": [
                        "rewrite Zabs_Zmult.",
                        "VernacExtend",
                        "f459c70d0601b9eab86bcf62dfb70a911d8ba871"
                    ]
                },
                {
                    "command": [
                        "pattern (Zabs (Fnum q)) at 1 in |- *; replace (Zabs (Fnum q)) with (Zabs (Fnum q) * 1%nat)%Z; [ apply Zle_Zmult_comp_l | auto with zarith ]; auto with zarith.",
                        "VernacExtend",
                        "8e741d6c470f8e021b69dcdf96e59e870ab7dfbf"
                    ]
                },
                {
                    "command": [
                        "rewrite Zabs_eq; simpl in |- *; auto with zarith.",
                        "VernacExtend",
                        "7869ec75c59f570830e5dd33a9bc295367a0fdc1"
                    ]
                },
                {
                    "command": [
                        "simpl in |- *; ring.",
                        "VernacExtend",
                        "dbea56eab9f20d9ab08eaf0f2769e833b9098d51"
                    ]
                },
                {
                    "command": [
                        "cut (Fexp p <= Fexp q)%Z; [ intros E2 | idtac ].",
                        "VernacExtend",
                        "3e57cc3a757754b2c8a165541b03ecb4480e78e9"
                    ]
                },
                {
                    "command": [
                        "apply le_IZR; auto.",
                        "VernacExtend",
                        "5ddae610de44a290611008bca1b760849106ddb9"
                    ]
                },
                {
                    "command": [
                        "apply (Rle_monotony_contra_exp radix) with (z := Fexp p); auto with real arith.",
                        "VernacExtend",
                        "fe4546564d217fef69b0bbeee2f0257a4751f8ac"
                    ]
                },
                {
                    "command": [
                        "pattern (Fexp p) at 2 in |- *; replace (Fexp p) with (Fexp (Fshift radix (Zabs_nat (Fexp q - Fexp p)) q)); auto.",
                        "VernacExtend",
                        "05f603d7f697c8e0d307b96b68bced6ba8fb6ccb"
                    ]
                },
                {
                    "command": [
                        "rewrite <- (fun x => Rabs_pos_eq (powerRZ radix x)); auto with real zarith.",
                        "VernacExtend",
                        "28dde5aa8431b9c9949f64d6c596146139b94a05"
                    ]
                },
                {
                    "command": [
                        "rewrite <- Faux.Rabsolu_Zabs.",
                        "VernacExtend",
                        "a337f3b6f39bb0a91aecc179c9d199b14789d858"
                    ]
                },
                {
                    "command": [
                        "rewrite <- Rabs_mult.",
                        "VernacExtend",
                        "ffb7829eab0f0e304148d87efd020e97968f73cc"
                    ]
                },
                {
                    "command": [
                        "change (Rabs (FtoRradix (Fshift radix (Zabs_nat (Fexp q - Fexp p)) q)) <= Zabs (Fnum p) * powerRZ radix (Fexp p))%R in |- *.",
                        "VernacExtend",
                        "a3fc6ac139f48c1ce9609a2b148d1afc0c792315"
                    ]
                },
                {
                    "command": [
                        "unfold FtoRradix in |- *; rewrite FshiftCorrect; auto.",
                        "VernacExtend",
                        "5abbc7cb08d11ed8fd912e6cc82302a9cbf61541"
                    ]
                },
                {
                    "command": [
                        "fold FtoRradix in |- *; rewrite <- H'0.",
                        "VernacExtend",
                        "fadb90322547258a3bb972b3ef0276b63ea5d5aa"
                    ]
                },
                {
                    "command": [
                        "rewrite <- (Fabs_correct radix); auto with real zarith.",
                        "VernacExtend",
                        "2ff290977b9ba80878887a2b2d4d83d4381557fa"
                    ]
                },
                {
                    "command": [
                        "unfold Fshift in |- *; simpl in |- *.",
                        "VernacExtend",
                        "bc2226e4b5a4ef5bbaea414d285c81f30a1eb932"
                    ]
                },
                {
                    "command": [
                        "rewrite inj_abs; [ ring | auto with zarith ].",
                        "VernacExtend",
                        "9f20cfc6bc457c5ef916dbfeb4e191caa172b0d0"
                    ]
                },
                {
                    "command": [
                        "cut (Fexp p <= Fexp q)%Z; [ intros E2 | apply le_IZR ]; auto.",
                        "VernacExtend",
                        "beee4172f133568e5356c96b93a35e581ea4cc18"
                    ]
                },
                {
                    "command": [
                        "apply Zle_trans with (Fexp p); [ idtac | apply le_IZR ]; auto with float.",
                        "VernacExtend",
                        "f6e9a336ec859f07f18792425371310372be4264"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "eqExpLess",
            "line_nb": 116,
            "steps": [
                {
                    "command": [
                        "intros b p q H' H'0.",
                        "VernacExtend",
                        "e71da5d533a76255a685082a9f411a1f816a5a52"
                    ]
                },
                {
                    "command": [
                        "case (Rle_or_lt (Fexp q) (Fexp p)); intros H'1.",
                        "VernacExtend",
                        "0adda8b005c56775413215844d493d7877859180"
                    ]
                },
                {
                    "command": [
                        "exists p; repeat (split; auto).",
                        "VernacExtend",
                        "fb4882801dea0b900f374770e08a7775c7fcbc94"
                    ]
                },
                {
                    "command": [
                        "exists q; split; [ idtac | split ]; auto with real.",
                        "VernacExtend",
                        "5287b2509008142b4e4ce7517211a35fc7e4c694"
                    ]
                },
                {
                    "command": [
                        "apply FboundedEqExp with (p := p); auto.",
                        "VernacExtend",
                        "c8ae740277282f59886b84696c3936bbc732dfea"
                    ]
                },
                {
                    "command": [
                        "apply Rlt_le; auto.",
                        "VernacExtend",
                        "4003e3e1c449ee89cad9e953d0a562db8235648c"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "FboundedShiftLess",
            "line_nb": 124,
            "steps": [
                {
                    "command": [
                        "intros b f n m H' H'0; split; auto.",
                        "VernacExtend",
                        "4c4c2cb4d0b469e63b0e991824bc922d1a3bb1d1"
                    ]
                },
                {
                    "command": [
                        "simpl in |- *; auto.",
                        "VernacExtend",
                        "9b631374b1d3067f703fd99c5dc6e1e5c8405957"
                    ]
                },
                {
                    "command": [
                        "apply Zle_lt_trans with (Zabs (Fnum (Fshift radix n f))).",
                        "VernacExtend",
                        "05fc2072018e0b654b25985dc341f43481c83260"
                    ]
                },
                {
                    "command": [
                        "simpl in |- *; replace m with (m + 0); auto with arith.",
                        "VernacExtend",
                        "ebcbee338aa829a94113605504e211c7c621f39e"
                    ]
                },
                {
                    "command": [
                        "replace n with (m + (n - m)); auto with arith.",
                        "VernacExtend",
                        "9c89a4c9e46ecf881ad0a2a326f38f5ef8604603"
                    ]
                },
                {
                    "command": [
                        "repeat rewrite Zpower_nat_is_exp.",
                        "VernacExtend",
                        "7d9ae6da3cad771d936acb8b3fce90964e7ecbbb"
                    ]
                },
                {
                    "command": [
                        "repeat rewrite Zabs_Zmult; auto.",
                        "VernacExtend",
                        "902bf53b9e9be524b1ec50bfaa3660a0b273e7eb"
                    ]
                },
                {
                    "command": [
                        "apply Zle_Zmult_comp_l; auto with zarith.",
                        "VernacExtend",
                        "0a442d3268531835feca11bf21b34ab2eb26341b"
                    ]
                },
                {
                    "command": [
                        "apply Zle_Zmult_comp_l; auto with zarith.",
                        "VernacExtend",
                        "0a442d3268531835feca11bf21b34ab2eb26341b"
                    ]
                },
                {
                    "command": [
                        "repeat rewrite Zabs_eq; auto with zarith.",
                        "VernacExtend",
                        "ce6af9c9e2dbbf5e96aba4104d03a58482acdd03"
                    ]
                },
                {
                    "command": [
                        "case H'0; auto.",
                        "VernacExtend",
                        "c95954a4912ccfdd6e4780b3eecd4f9a4fbca076"
                    ]
                },
                {
                    "command": [
                        "apply Zle_trans with (Fexp (Fshift radix n f)); auto with float.",
                        "VernacExtend",
                        "7db7f173f90dfefa3f7d90c1e21b04743e4bb1e8"
                    ]
                },
                {
                    "command": [
                        "simpl in |- *; unfold Zminus in |- *; auto with zarith.",
                        "VernacExtend",
                        "30f62d435f3910ada7b6d31292f375853d267a48"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "eqExpMax",
            "line_nb": 139,
            "steps": [
                {
                    "command": [
                        "intros b p q H' H'0 H'1; case (Zle_or_lt (Fexp p) (Fexp q)); intros Rl0.",
                        "VernacExtend",
                        "7340fecaf266847996498ee386a069f0f2f4402b"
                    ]
                },
                {
                    "command": [
                        "exists p; auto.",
                        "VernacExtend",
                        "ce43f93b5525ba4b412c7576bb2db79216326ab5"
                    ]
                },
                {
                    "command": [
                        "cut ((Fexp p - Zabs_nat (Fexp p - Fexp q))%Z = Fexp q); [ intros Eq1 | idtac ].",
                        "VernacExtend",
                        "484b879451b88777f115fae97b06c4f148f82a88"
                    ]
                },
                {
                    "command": [
                        "exists (Fshift radix (Zabs_nat (Fexp p - Fexp q)) p); split; split; auto.",
                        "VernacExtend",
                        "9cecd1bbd61365e75be04713c804797a7b5df676"
                    ]
                },
                {
                    "command": [
                        "apply Zle_lt_trans with (Fnum q); auto with float.",
                        "VernacExtend",
                        "4a4bab53fc66bfffaa87dba11d87764deade4f33"
                    ]
                },
                {
                    "command": [
                        "replace (Zabs (Fnum (Fshift radix (Zabs_nat (Fexp p - Fexp q)) p))) with (Fnum (Fabs (Fshift radix (Zabs_nat (Fexp p - Fexp q)) p))); auto.",
                        "VernacExtend",
                        "6794bfe1b5e5db9f740c66c0071e34874be42ee0"
                    ]
                },
                {
                    "command": [
                        "apply (Rle_Fexp_eq_Zle radix); auto with arith.",
                        "VernacExtend",
                        "dba44f482d641974d8a9ee8f8449641c0141bd17"
                    ]
                },
                {
                    "command": [
                        "rewrite Fabs_correct; auto with arith; rewrite FshiftCorrect; auto with arith; rewrite <- (Fabs_correct radix); auto with float arith.",
                        "VernacExtend",
                        "a7d21ab2b10ffa35f3cd560cb306c56f84a8fe21"
                    ]
                },
                {
                    "command": [
                        "rewrite <- (Zabs_eq (Fnum q)); auto with float zarith.",
                        "VernacExtend",
                        "b522ac8758ac52cbecca11948acf47f24bd5ddc6"
                    ]
                },
                {
                    "command": [
                        "apply (LeR0Fnum radix); auto.",
                        "VernacExtend",
                        "8495e6ad2e5a68d8e7fe5d9a8401af435ce04ea2"
                    ]
                },
                {
                    "command": [
                        "apply Rle_trans with (2 := H'1); auto with real.",
                        "VernacExtend",
                        "eb4bb48889688b1081375149add1bd2642c9fef4"
                    ]
                },
                {
                    "command": [
                        "rewrite (Fabs_correct radix); auto with real zarith.",
                        "VernacExtend",
                        "380138041f48d27aba8418f5e3c7c02d8d80765e"
                    ]
                },
                {
                    "command": [
                        "unfold Fshift in |- *; simpl in |- *; rewrite Eq1; auto with float.",
                        "VernacExtend",
                        "9082248f1127c13d454d5b1d3dc72c451ec46ab7"
                    ]
                },
                {
                    "command": [
                        "unfold FtoRradix in |- *; apply FshiftCorrect; auto.",
                        "VernacExtend",
                        "d60e6b2f7fe84e464f5a081721e938e29839d70a"
                    ]
                },
                {
                    "command": [
                        "unfold Fshift in |- *; simpl in |- *.",
                        "VernacExtend",
                        "bc2226e4b5a4ef5bbaea414d285c81f30a1eb932"
                    ]
                },
                {
                    "command": [
                        "rewrite Eq1; auto with zarith.",
                        "VernacExtend",
                        "bdccbb4ec4229bd96cea6bc4ee586f4b8ccc03bc"
                    ]
                },
                {
                    "command": [
                        "rewrite inj_abs; auto with zarith; ring.",
                        "VernacExtend",
                        "ae620b1c41c55f5d2951e8bf161b1c227e7b5bb2"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "Zle_monotony_contra_abs_pow",
            "line_nb": 158,
            "steps": [
                {
                    "command": [
                        "intros x y z n Hz O1.",
                        "VernacExtend",
                        "8ee3546c67c52546bf7fac6a51a595fac20a59bf"
                    ]
                },
                {
                    "command": [
                        "apply le_IZR; auto.",
                        "VernacExtend",
                        "5ddae610de44a290611008bca1b760849106ddb9"
                    ]
                },
                {
                    "command": [
                        "apply Rmult_le_reg_l with (r := powerRZ z n); auto with real zarith.",
                        "VernacExtend",
                        "b7e117797ab4abc40e0ea2169d4419db1fae5b7e"
                    ]
                },
                {
                    "command": [
                        "repeat rewrite (Rmult_comm (powerRZ z n)); auto.",
                        "VernacExtend",
                        "a77a450e9deff4dc0bd4a7553737f10bc7fba97a"
                    ]
                },
                {
                    "command": [
                        "repeat rewrite <- Faux.Rabsolu_Zabs.",
                        "VernacExtend",
                        "86831d34f943221532aa505bea44267f5f3aa077"
                    ]
                },
                {
                    "command": [
                        "replace (powerRZ z n) with (Rabs (powerRZ z n)).",
                        "VernacExtend",
                        "a38f023022f5836a3953536cb01f2bb9b579c78f"
                    ]
                },
                {
                    "command": [
                        "repeat rewrite <- Rabs_mult; auto.",
                        "VernacExtend",
                        "981e8ebae82ccbfa8decda9167cc5a03e5aedacf"
                    ]
                },
                {
                    "command": [
                        "apply Rabs_pos_eq; auto with real zarith.",
                        "VernacExtend",
                        "66d4290db822e84dcfe52ca3aa2473c1e3692670"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "LessExpBound",
            "line_nb": 168,
            "steps": [
                {
                    "command": [
                        "intros b p q H' H'0 H'1 H'2 H'3; exists (Fnum p * Zpower_nat radix (Zabs_nat (Fexp p - Fexp q)))%Z.",
                        "VernacExtend",
                        "2c111cb8685f3f9e63eda8e11813306772412042"
                    ]
                },
                {
                    "command": [
                        "cut (Float (Fnum p * Zpower_nat radix (Zabs_nat (Fexp p - Fexp q))) (Fexp q) = p :>R); [ intros Eq1 | idtac ].",
                        "VernacExtend",
                        "3a06dadb3ddeed06f33e2551000c40a35419c021"
                    ]
                },
                {
                    "command": [
                        "split; auto.",
                        "VernacExtend",
                        "fcd44a714bd12fa54b1c7746996e44dbac16df06"
                    ]
                },
                {
                    "command": [
                        "repeat split; simpl in |- *; auto with float.",
                        "VernacExtend",
                        "3e093824de91ab2af8d090987eafb93df05226c2"
                    ]
                },
                {
                    "command": [
                        "apply Zle_lt_trans with (Zabs (Fnum q)); auto with float.",
                        "VernacExtend",
                        "a742dc36e896e4eb19010fe5454ba4b48533612a"
                    ]
                },
                {
                    "command": [
                        "apply Zle_monotony_contra_abs_pow with (z := radix) (n := Fexp q); auto with real arith.",
                        "VernacExtend",
                        "ba670fa6b57c378f3d1dec0fa8c423c0c1e917fd"
                    ]
                },
                {
                    "command": [
                        "unfold FtoRradix, FtoR in Eq1; simpl in Eq1; rewrite Eq1; auto with real.",
                        "VernacExtend",
                        "7cf0189988871f7b55e93ef3208d0677d267b5b1"
                    ]
                },
                {
                    "command": [
                        "change (Rabs p <= Rabs q)%R in |- *.",
                        "VernacExtend",
                        "26fbe12e486fac4e019c770a7e17421ace244fc3"
                    ]
                },
                {
                    "command": [
                        "repeat rewrite Rabs_pos_eq; auto with real.",
                        "VernacExtend",
                        "1b60d84bb7c426a336b3045bf63082dfe61f7ccb"
                    ]
                },
                {
                    "command": [
                        "apply Rle_trans with (1 := H'2); auto.",
                        "VernacExtend",
                        "3541f62a93d76231946b2e823c6de1420692f193"
                    ]
                },
                {
                    "command": [
                        "pattern (Fexp q) at 2 in |- *; replace (Fexp q) with (Fexp p - Zabs_nat (Fexp p - Fexp q))%Z.",
                        "VernacExtend",
                        "7817c3c6f04f663244c0c4629ebd5d45a41b7052"
                    ]
                },
                {
                    "command": [
                        "change (Fshift radix (Zabs_nat (Fexp p - Fexp q)) p = p :>R) in |- *.",
                        "VernacExtend",
                        "a0383f44b6608a45f7eae13e6e24d01d130bc25b"
                    ]
                },
                {
                    "command": [
                        "unfold FtoRradix in |- *; apply FshiftCorrect; auto.",
                        "VernacExtend",
                        "d60e6b2f7fe84e464f5a081721e938e29839d70a"
                    ]
                },
                {
                    "command": [
                        "rewrite inj_abs; auto with zarith; ring.",
                        "VernacExtend",
                        "ae620b1c41c55f5d2951e8bf161b1c227e7b5bb2"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "maxFbounded",
            "line_nb": 184,
            "steps": [
                {
                    "command": [
                        "intros b z H; split; auto.",
                        "VernacExtend",
                        "e42e311f48c134610543ed1d03c2f1d8416d315f"
                    ]
                },
                {
                    "command": [
                        "change (Zabs (Zpred (Zpos (vNum b))) < Zpos (vNum b))%Z in |- *.",
                        "VernacExtend",
                        "13b551fa59976fd390b168834db728c413e62980"
                    ]
                },
                {
                    "command": [
                        "rewrite Zabs_eq; auto with zarith.",
                        "VernacExtend",
                        "e3b6647506c6d43441146989691d7c27f1722b7e"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "maxMax",
            "line_nb": 189,
            "steps": [
                {
                    "command": [
                        "intros b p z H' H'0; unfold FtoRradix in |- *; rewrite <- (FshiftCorrect _ radixMoreThanOne (Zabs_nat (z - Fexp p)) (Float (Zpos (vNum b)) z)); unfold Fshift in |- *.",
                        "VernacExtend",
                        "b30451bf01f1c1bc2d33ade451f0e7acd9dbea4f"
                    ]
                },
                {
                    "command": [
                        "change (FtoR radix (Fabs p) < FtoR radix (Float (Zpos (vNum b) * Zpower_nat radix (Zabs_nat (z - Fexp p))) (z - Zabs_nat (z - Fexp p))))%R in |- *.",
                        "VernacExtend",
                        "04a1e6346cb39d27ea2d1c4c3bb2f7e1488f3b19"
                    ]
                },
                {
                    "command": [
                        "replace (z - Zabs_nat (z - Fexp p))%Z with (Fexp p).",
                        "VernacExtend",
                        "23dc71823494597d637350a7beafdea958944956"
                    ]
                },
                {
                    "command": [
                        "unfold Fabs, FtoR in |- *.",
                        "VernacExtend",
                        "828c336ef3ca7440b3bb02b64907b130813430ce"
                    ]
                },
                {
                    "command": [
                        "change (Zabs (Fnum p) * powerRZ radix (Fexp p) < (Zpos (vNum b) * Zpower_nat radix (Zabs_nat (z - Fexp p)))%Z * powerRZ radix (Fexp p))%R in |- *.",
                        "VernacExtend",
                        "8367c6e1287fa449dbbd5462e7d825ab9e806dbb"
                    ]
                },
                {
                    "command": [
                        "apply Rmult_lt_compat_r; auto with real zarith.",
                        "VernacExtend",
                        "af97f05ee44fae67886c77002c67d00aa586a813"
                    ]
                },
                {
                    "command": [
                        "apply Rlt_le_trans with (IZR (Zpos (vNum b))); auto with real float zarith.",
                        "VernacExtend",
                        "f39940527e5e3bb9dabaa99ac28e94cca6596911"
                    ]
                },
                {
                    "command": [
                        "pattern (Zpos (vNum b)) at 1 in |- *; replace (Zpos (vNum b)) with (Zpos (vNum b) * 1)%Z; auto with real float zarith; ring.",
                        "VernacExtend",
                        "5eac92ac412fba879ae635ac270263fa50dcc8e4"
                    ]
                },
                {
                    "command": [
                        "rewrite inj_abs; auto with zarith; ring.",
                        "VernacExtend",
                        "ae620b1c41c55f5d2951e8bf161b1c227e7b5bb2"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        }
    ]
}