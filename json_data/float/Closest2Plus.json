{
    "filename": "Closest2Plus.v",
    "coq_project": "float",
    "vernac_cmds": [
        [
            "Require Export ClosestPlus.",
            "VernacRequire",
            "a34c3f1fb41cf8191846dd817758d8ebba750bf7"
        ],
        [
            "Require Export Closest2Prop.",
            "VernacRequire",
            "062f6891ef0bf043a2bc7383ca0c60d94966da8e"
        ],
        [
            "Section F2.",
            "VernacBeginSection",
            "20403cbc2902414cd8c0b7f784732062cf168993"
        ],
        [
            "Variable b : Fbound.",
            "VernacAssumption",
            "17a11c003f49f819b8cb809f61b140702916486d"
        ],
        [
            "Variable precision : nat.",
            "VernacAssumption",
            "2235bc83b7ebf4cbe373b5fa3b4f3c643d454130"
        ],
        [
            "Let radix := 2%Z.",
            "VernacDefinition",
            "dd83a52a4909eab99cfa47455fb55794b0e87d99"
        ],
        [
            "Let FtoRradix := FtoR radix.",
            "VernacDefinition",
            "5aa29a9595c6e9e03b28c6d232299552ec761ad7"
        ],
        [
            "Local Coercion FtoRradix : float >-> R.",
            "VernacCoercion",
            "cec6b845059d434f72dda1a67638af64e1fb0628"
        ],
        [
            "Theorem TwoMoreThanOne : (1 < radix)%Z.",
            "VernacStartTheoremProof",
            "e78cf879d3518b235d8720b105c6b6a8ba0c4ae0"
        ],
        [
            "red in |- *; simpl in |- *; auto.",
            "VernacExtend",
            "1d43d4029690c353fb7edf6ba67b74a84697f82f"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Hint Resolve TwoMoreThanOne.",
            "VernacHints",
            "e8e6d0ab3ccfa9a6e9a4fa9b0a3a493c8398f197"
        ],
        [
            "Hypothesis precisionNotZero : 1 < precision.",
            "VernacAssumption",
            "e79c11c811d69748a00a1e44be084cf1cb64788a"
        ],
        [
            "Hypothesis pGivesBound : Zpos (vNum b) = Zpower_nat radix precision.",
            "VernacAssumption",
            "d558f967d87d2a42d14158ac115b10c6f5358430"
        ],
        [
            "Theorem plusUpperBound : forall P, RoundedModeP b 2%nat P -> forall p q pq : float, P (p + q)%R pq -> Fbounded b p -> Fbounded b q -> (Rabs pq <= radix * Rmax (Rabs p) (Rabs q))%R.",
            "VernacStartTheoremProof",
            "09bcad8dac793676bdea2e67f81ee8b19a9f3cc1"
        ],
        [
            "intros P H' p q pq H'0 H'1 H'2.",
            "VernacExtend",
            "d2f053f2d8716a0239cbe3ace54738c6beca164a"
        ],
        [
            "rewrite <- (Rabs_right radix); auto with real zarith.",
            "VernacExtend",
            "3fdea47d0e0cd85794f5c29756dd944767d3b57a"
        ],
        [
            "rewrite <- RmaxRmult; auto with real.",
            "VernacExtend",
            "fd774f5f50c3b4d23d503f84c6408000f9bfaae1"
        ],
        [
            "repeat rewrite <- Rabs_mult.",
            "VernacExtend",
            "6a791d6710b2159748c1058d475d335523e6fa1b"
        ],
        [
            "case (Rle_or_lt p q); intros Rltp.",
            "VernacExtend",
            "f63f74007095fcf4b0b6442838bd503d703251f1"
        ],
        [
            "apply RmaxAbs; auto.",
            "VernacExtend",
            "3f508a4ab4e4eb429e99e5fad948650717d4d38a"
        ],
        [
            "apply (RoundedModeMultLess b radix) with (P := P) (r := (p + q)%R); auto.",
            "VernacExtend",
            "2bd1133c8a3af1ea6b1d069f5b1e27d85c11fe54"
        ],
        [
            "replace (radix * FtoR radix p)%R with (p + p)%R; [ auto with real | unfold radix at 1; fold FtoRradix; ring].",
            "VernacExtend",
            "d1cf89ebc927f10d22e2e68a52326281e8f0da63"
        ],
        [
            "unfold FtoRradix in |- *; apply (RoundedModeMult b radix) with (P := P) (r := (p + q)%R); auto.",
            "VernacExtend",
            "9396f992d965230e5e9e5c52961767b85d27b3db"
        ],
        [
            "replace (radix * FtoR radix q)%R with (q + q)%R; [ auto with real | unfold radix at 1; fold FtoRradix; ring ].",
            "VernacExtend",
            "a7648a26cf05261296fd05292447a465c35b1ea0"
        ],
        [
            "rewrite RmaxSym.",
            "VernacExtend",
            "bf31a76122689a6c37c13a17eb5d2c91807a9608"
        ],
        [
            "apply RmaxAbs; auto.",
            "VernacExtend",
            "3f508a4ab4e4eb429e99e5fad948650717d4d38a"
        ],
        [
            "apply (RoundedModeMultLess b radix) with (P := P) (r := (p + q)%R); auto.",
            "VernacExtend",
            "2bd1133c8a3af1ea6b1d069f5b1e27d85c11fe54"
        ],
        [
            "replace (radix * FtoR radix q)%R with (q + q)%R; [ auto with real | unfold radix at 1; fold FtoRradix; ring ].",
            "VernacExtend",
            "a7648a26cf05261296fd05292447a465c35b1ea0"
        ],
        [
            "unfold FtoRradix in |- *; apply (RoundedModeMult b radix) with (P := P) (r := (p + q)%R); auto.",
            "VernacExtend",
            "9396f992d965230e5e9e5c52961767b85d27b3db"
        ],
        [
            "replace (radix * FtoR radix p)%R with (p + p)%R; [ auto with real zarith | unfold radix at 1; fold FtoRradix; ring].",
            "VernacExtend",
            "71bb8cccda9a675a5ccbe0b2c0c2629046ba3726"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Theorem plusErrorBound2 : forall p q r : float, Fbounded b p -> Fbounded b q -> Closest b radix (p + q) r -> ~ is_Fzero r -> (Rabs (r - (p + q)) < radix * / pPred (vNum b) * Rmax (Rabs p) (Rabs q))%R.",
            "VernacStartTheoremProof",
            "0edc1a36a4ef5465c476c24cac8308eda3182c45"
        ],
        [
            "intros p q r H' H'0 H'1 H'2.",
            "VernacExtend",
            "83b3ef77da60d23370e4e44956d681f7820b20e2"
        ],
        [
            "apply Rlt_le_trans with (Rabs (FtoR radix r) * / radix * (radix * / pPred (vNum b)))%R; auto.",
            "VernacExtend",
            "eb277a9fe7db8c5f5a86c61aac065a731d9e656e"
        ],
        [
            "unfold FtoRradix in |- *; apply plusErrorBound1 with (precision := precision); auto with arith.",
            "VernacExtend",
            "1796650b4190d8daeccbb4f5e442ba065fc4686f"
        ],
        [
            "replace (Rabs (FtoR radix r) * / radix * (radix * / pPred (vNum b)))%R with (radix * / pPred (vNum b) * (Rabs r * / radix))%R; [ idtac | fold FtoRradix; ring ].",
            "VernacExtend",
            "c559cc0b2e455a7eeee37866bd0fc1c5a334a5a3"
        ],
        [
            "apply Rmult_le_compat_l; auto.",
            "VernacExtend",
            "54d1b5d69c3cd83834a4db2aea91d608ed3ae4f3"
        ],
        [
            "replace 0%R with (radix * 0)%R; [ apply Rmult_le_compat_l | ring ].",
            "VernacExtend",
            "76e3a7beab3f7755408c895cb5fc5029462fd97a"
        ],
        [
            "cut (0 <= radix)%Z; auto with real zarith.",
            "VernacExtend",
            "e63d51affd44a02b52d773dd13feea9fc27bf3b2"
        ],
        [
            "apply Rlt_le; apply Rinv_0_lt_compat; cut (0 < pPred (vNum b))%Z; auto with real zarith.",
            "VernacExtend",
            "0f2405a4ab0b608f27d3250f9f1e5a5a9df8d698"
        ],
        [
            "unfold pPred in |- *; apply Zlt_succ_pred; simpl in |- *.",
            "VernacExtend",
            "7116e0555b780c05d1675150b01ef688a461eab7"
        ],
        [
            "apply vNumbMoreThanOne with (radix := radix) (precision := precision); auto with real arith.",
            "VernacExtend",
            "01017bc5d3853cd34e574becf03eaaa2f0c45a5a"
        ],
        [
            "apply Rmult_le_reg_l with (r := IZR radix); auto with real.",
            "VernacExtend",
            "9c13af91836144e0cde89fd9ce1f24b85696d893"
        ],
        [
            "rewrite (Rmult_comm (Rabs r)); rewrite <- Rmult_assoc; rewrite Rinv_r; auto with real zarith; rewrite Rmult_1_l.",
            "VernacExtend",
            "ece6cfba368ea4b5289c72d0c0e7efa65d5d8fae"
        ],
        [
            "apply plusUpperBound with (P := Closest b radix); auto.",
            "VernacExtend",
            "1515a1f8e587ef78fb1f17a28635701848528388"
        ],
        [
            "apply ClosestRoundedModeP with (precision := precision); auto.",
            "VernacExtend",
            "eb6d3ee24dd119beb307169797f1cdd709b3ec7c"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Theorem plusClosestLowerBoundAux1 : forall p q pq : float, (Rabs q <= p)%R -> Closest b radix (p + q) pq -> Fbounded b p -> Fbounded b q -> pq <> (p + q)%R :>R -> (/ radix * p <= pq)%R.",
            "VernacStartTheoremProof",
            "950eb0f3ae975eadc56c9be24265ee37b9f8cf5d"
        ],
        [
            "intros p q pq H' H'0 H'1 H'2 H'3.",
            "VernacExtend",
            "64f183ae61c9cc8c7e75f4824c62a83070b01d18"
        ],
        [
            "cut (0 <= p)%R; [ intros Rl0; Casec Rl0; intros H0 | apply Rle_trans with (2 := H'); auto with real ].",
            "VernacExtend",
            "74c0bbdb6e71b6b881b58dfb751968473eb854f5"
        ],
        [
            "apply (FmultRadixInv b radix precision) with (5 := H'0); auto.",
            "VernacExtend",
            "91cb4fad67fa44253edf6431adab7dc7dd48a4d9"
        ],
        [
            "case (Rle_or_lt 0 q); intros Rl0.",
            "VernacExtend",
            "9bb95b95dcdd500c1b6a6969243644184f881fe4"
        ],
        [
            "apply Rlt_le_trans with (FtoRradix p); auto.",
            "VernacExtend",
            "ac6acc1dae618b3b1a42b23fb6b74c3c99cae148"
        ],
        [
            "apply Rlt_RinvDouble; auto.",
            "VernacExtend",
            "5a3cf53b5edb4f01033e7cf5f359caa0f28b760b"
        ],
        [
            "pattern (FtoRradix p) at 1 in |- *; replace (FtoRradix p) with (p + 0)%R; auto with real.",
            "VernacExtend",
            "909da4429bd2c5d1dca89828a745e699be52e85e"
        ],
        [
            "apply Rmult_lt_reg_l with (r := IZR radix); auto with real.",
            "VernacExtend",
            "cb4aef32291077227c6b32bf8cee3ec1f383a8b2"
        ],
        [
            "rewrite <- Rmult_assoc; rewrite Rinv_r.",
            "VernacExtend",
            "d7bbeef31f7b8b397a05d883a8c55ba90a522740"
        ],
        [
            "rewrite Rmult_plus_distr_l.",
            "VernacExtend",
            "e243bcfd594d50273783e947b301871dc4efc70c"
        ],
        [
            "rewrite Rmult_1_l.",
            "VernacExtend",
            "1ba58092cf1ca2fa8155dfa9c64894290b0f39df"
        ],
        [
            "apply Rplus_lt_reg_l with (r := (- (radix * p))%R).",
            "VernacExtend",
            "b20fded1fe3852042553c70c4c3b25bbb3dd61cc"
        ],
        [
            "replace (- (radix * p) + FtoR radix p)%R with (- p)%R; [ idtac | unfold radix at 1; unfold FtoRradix; ring].",
            "VernacExtend",
            "d5e5b8c27e81239cb31d4737732ecef5e45b0a43"
        ],
        [
            "replace (- (radix * p) + (radix * p + radix * q))%R with (radix * q)%R; [ idtac | simpl in |- *; ring ].",
            "VernacExtend",
            "57bd8be01331a46d5661257aac516201dcde1990"
        ],
        [
            "rewrite <- (Ropp_involutive (radix * q)); apply Ropp_lt_contravar.",
            "VernacExtend",
            "2743577d0b7eb5f6b13fa70a6d129adac64b4113"
        ],
        [
            "replace (- (radix * q))%R with (radix * - q)%R; [ idtac | ring ].",
            "VernacExtend",
            "1ec91bc48ce3aabae734d3ccbef15e13267da742"
        ],
        [
            "case (Rle_or_lt (FtoRradix p) (radix * - q)); auto.",
            "VernacExtend",
            "334ca9fe13a6578173e9c985251eb8ea438c0c9c"
        ],
        [
            "intros H'4; Contradict H'3.",
            "VernacExtend",
            "7300d699607500142ce44dd873bd2cca4778723f"
        ],
        [
            "rewrite <- (Fplus_correct radix); auto.",
            "VernacExtend",
            "c71d38cedda33adc79d6203f62fa99a8bbd0cece"
        ],
        [
            "unfold FtoRradix in |- *; apply sym_eq; apply ClosestIdem with (b := b); auto.",
            "VernacExtend",
            "c3ccbf18a799b8c92b9f156049277820e3c4af04"
        ],
        [
            "replace (Fplus radix p q) with (Fminus radix p (Fopp q)).",
            "VernacExtend",
            "8e7794d497da76169cc4c81fa4cdfe5f63d5f761"
        ],
        [
            "rewrite <- Fopp_Fminus.",
            "VernacExtend",
            "1c443a8ba74c86b8fdff1e33c3cdb7af22126cbe"
        ],
        [
            "apply oppBounded; auto.",
            "VernacExtend",
            "6e68d2122eeea082741ca4e279707ce0511c71ef"
        ],
        [
            "apply Sterbenz; auto.",
            "VernacExtend",
            "2d564057c2daa6631c6b156cb718aa4284b2d9cb"
        ],
        [
            "apply oppBounded; auto.",
            "VernacExtend",
            "6e68d2122eeea082741ca4e279707ce0511c71ef"
        ],
        [
            "apply Rmult_le_reg_l with (r := IZR radix); auto with real.",
            "VernacExtend",
            "9c13af91836144e0cde89fd9ce1f24b85696d893"
        ],
        [
            "rewrite <- Rmult_assoc; rewrite Rinv_r.",
            "VernacExtend",
            "d7bbeef31f7b8b397a05d883a8c55ba90a522740"
        ],
        [
            "rewrite Rmult_1_l; rewrite Fopp_correct; auto.",
            "VernacExtend",
            "adae22348d8ad2ee8ac8dd890f91c768fed9823a"
        ],
        [
            "replace 0%R with (INR 0); auto with real arith.",
            "VernacExtend",
            "3caed965951659080cf394dcb353db3f9bd924fa"
        ],
        [
            "apply Rle_trans with (FtoR 2%nat p); auto with real.",
            "VernacExtend",
            "f044409635d2eb1bd8c7663285b1f77d5b313af0"
        ],
        [
            "rewrite Fopp_correct; auto.",
            "VernacExtend",
            "eeabcd66a21fb7fbd56662f87b0ad8c6385bf543"
        ],
        [
            "rewrite <- Faux.Rabsolu_left1; auto.",
            "VernacExtend",
            "8416aba2232b7d472962a3dd1bb5c39ba063d252"
        ],
        [
            "apply Rlt_le; auto.",
            "VernacExtend",
            "4003e3e1c449ee89cad9e953d0a562db8235648c"
        ],
        [
            "unfold Fminus in |- *; rewrite Fopp_Fopp; auto.",
            "VernacExtend",
            "2bbb76a951ef47244b79b17bada6f36c23011860"
        ],
        [
            "apply (ClosestCompatible b radix (p + q)%R (FtoR radix (Fplus radix p q)) pq pq); auto.",
            "VernacExtend",
            "3580f8facb43ba457dbadf6f8915e205ceef9074"
        ],
        [
            "apply sym_eq; unfold FtoRradix in |- *; apply Fplus_correct; auto.",
            "VernacExtend",
            "6cd7ec007d015254d13fed1f3120402efcb010b3"
        ],
        [
            "apply RoundedModeBounded with (radix := radix) (P := Closest b radix) (r := (p + q)%R); auto.",
            "VernacExtend",
            "89af83cf84428d80f70994c6f9be6125b0cac6cc"
        ],
        [
            "apply ClosestRoundedModeP with (precision := precision); auto.",
            "VernacExtend",
            "eb6d3ee24dd119beb307169797f1cdd709b3ec7c"
        ],
        [
            "replace 0%R with (INR 0); auto with real arith.",
            "VernacExtend",
            "3caed965951659080cf394dcb353db3f9bd924fa"
        ],
        [
            "rewrite <- H0; rewrite Rmult_0_r.",
            "VernacExtend",
            "b9087b816b326fd605282fd034fb945264796e37"
        ],
        [
            "replace (FtoRradix pq) with (FtoRradix p); auto.",
            "VernacExtend",
            "b6d70d77c86adfbf708b16e3e770809403f6433c"
        ],
        [
            "rewrite <- H0; auto with real.",
            "VernacExtend",
            "92df47d0b96189f26defb22601fbd12ab2b16ad2"
        ],
        [
            "unfold FtoRradix in |- *; apply ClosestIdem with (b := b); auto.",
            "VernacExtend",
            "4ebff5db363f25a10c1bd1c3c7178d6076b7424f"
        ],
        [
            "apply (ClosestCompatible b radix (p + q)%R (FtoR radix p) pq pq); auto.",
            "VernacExtend",
            "c1ccc8023a516cd7748943399640c8630266fb63"
        ],
        [
            "replace (FtoR 2%nat p) with (FtoRradix p); auto.",
            "VernacExtend",
            "9601720389f83cab5e0a0a987eb16ec188d5724d"
        ],
        [
            "fold FtoRradix; rewrite <- H0; replace (FtoRradix q) with 0%R; try ring.",
            "VernacExtend",
            "c415338c60e272c199d383f5980e3b0e8dc62025"
        ],
        [
            "generalize H'; unfold Rabs in |- *; case (Rcase_abs q); auto.",
            "VernacExtend",
            "898a7eaf32e4c5df8fd8be29e1b2eb99f949bcd6"
        ],
        [
            "intros H'4 H'5; Contradict H'5; rewrite <- H0; auto with real.",
            "VernacExtend",
            "a37ce1d7e5e3d19360d30a583611303242a5b22e"
        ],
        [
            "apply Rlt_not_le; auto with real.",
            "VernacExtend",
            "9b1690e28c96f72eb26acad1cf4a770eb61a1a8d"
        ],
        [
            "intros H'4 H'5; apply Rle_antisym; auto with real.",
            "VernacExtend",
            "4d3dbd3a69f8554cf55dc42db5d03e3125d0b1b1"
        ],
        [
            "rewrite H0; auto.",
            "VernacExtend",
            "48df2b0b453adadcea8e6914bccb68bfc33b286b"
        ],
        [
            "apply RoundedModeBounded with (radix := radix) (P := Closest b radix) (r := (p + q)%R); auto.",
            "VernacExtend",
            "89af83cf84428d80f70994c6f9be6125b0cac6cc"
        ],
        [
            "apply ClosestRoundedModeP with (precision := precision); auto.",
            "VernacExtend",
            "eb6d3ee24dd119beb307169797f1cdd709b3ec7c"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Theorem plusClosestLowerBoundAux2 : forall p q pq : float, Closest b radix (p + q) pq -> Fbounded b p -> Fbounded b q -> pq <> (p + q)%R :>R -> (Rabs p <= Rabs q)%R -> (/ radix * Rabs q <= Rabs pq)%R.",
            "VernacStartTheoremProof",
            "c62c06cf5a144d1ae766d7e07d27ccc85b8dab09"
        ],
        [
            "intros p q pq H' H'0 H'1 H'2 H'3.",
            "VernacExtend",
            "64f183ae61c9cc8c7e75f4824c62a83070b01d18"
        ],
        [
            "cut (Fbounded b pq); [ intros Fb0 | apply RoundedModeBounded with (radix := radix) (P := Closest b radix) (r := (p + q)%R); auto; apply ClosestRoundedModeP with (precision := precision) ]; auto.",
            "VernacExtend",
            "01b5a20fd8b9b1569222479370d362f426b24814"
        ],
        [
            "case (Rle_or_lt 0 q); intros Rl2; [ idtac | cut (q <= 0)%R; [ intros Rl2' | apply Rlt_le; auto ] ].",
            "VernacExtend",
            "fca0db217db9d3eaaefb03d4a1b3aa03fbd80d7f"
        ],
        [
            "repeat rewrite Rabs_right; auto with real.",
            "VernacExtend",
            "acbc524ee08d51df0747101f806570b23d1c2cd0"
        ],
        [
            "apply plusClosestLowerBoundAux1 with (q := p); auto.",
            "VernacExtend",
            "b6ed02f68c292b5323bde7911329448a24a74e94"
        ],
        [
            "rewrite <- (Rabs_right q); auto with real.",
            "VernacExtend",
            "9c27c08ba25041943137a500f9311d7aba57054b"
        ],
        [
            "apply (ClosestCompatible b radix (p + q)%R (q + p)%R pq pq); auto; try ring.",
            "VernacExtend",
            "ddfbfc2617ac54e4e29639bcef51c597019db3fc"
        ],
        [
            "rewrite Rplus_comm; auto with real.",
            "VernacExtend",
            "7282790a4fd812defbde63d58d58719892ebdf23"
        ],
        [
            "apply Rle_ge; unfold FtoRradix in |- *; apply RleRoundedR0 with (b := b) (precision := precision) (P := Closest b radix) (r := (p + q)%R); auto.",
            "VernacExtend",
            "3b1d25d4065a919428c64494fb405a8500abcb88"
        ],
        [
            "apply ClosestRoundedModeP with (precision := precision); auto.",
            "VernacExtend",
            "eb6d3ee24dd119beb307169797f1cdd709b3ec7c"
        ],
        [
            "case (Rle_or_lt 0 p); intros Rl3; [ idtac | cut (p <= 0)%R; [ intros Rl3' | apply Rlt_le; auto ] ]; auto with real.",
            "VernacExtend",
            "a6fb8ad8d1f35544fd1d01126ec1a8020429f1e9"
        ],
        [
            "replace 0%R with (0 + 0)%R; auto with real.",
            "VernacExtend",
            "0397539d441e803111e5cd88661fcbc23fd1c85a"
        ],
        [
            "apply Rplus_le_reg_l with (r := (- p)%R).",
            "VernacExtend",
            "be7234a096ec846f9abe774fd240c2749b394eee"
        ],
        [
            "replace (- p + 0)%R with (- p)%R; [ idtac | ring ].",
            "VernacExtend",
            "d329c61fb784b55367af8aa088c06f6702b6b2a2"
        ],
        [
            "replace (- p + (p + q))%R with (FtoRradix q); [ idtac | ring ].",
            "VernacExtend",
            "96a1086f18b6b1dc62a36326495320a439691816"
        ],
        [
            "rewrite <- (Faux.Rabsolu_left1 (FtoRradix p)); auto with real.",
            "VernacExtend",
            "c1a0bad1eb92af11ccb8684ae17e73b4c11419dd"
        ],
        [
            "rewrite <- (Rabs_right (FtoRradix q)); auto with real.",
            "VernacExtend",
            "5d396a99ad751421333d49a9555eff27a0bec517"
        ],
        [
            "repeat rewrite Faux.Rabsolu_left1; auto with real.",
            "VernacExtend",
            "2b438b91c9b3be0a5b2460f9b08c8a396b6b9610"
        ],
        [
            "unfold FtoRradix in |- *; repeat rewrite <- (Fopp_correct 2%nat); auto.",
            "VernacExtend",
            "07eceba11d8761b46dd1717b6f59b7df4c2d9df8"
        ],
        [
            "apply plusClosestLowerBoundAux1 with (q := Fopp p); auto.",
            "VernacExtend",
            "3fb28c0c46d169914174f99d0ecdde7f71af8b5e"
        ],
        [
            "unfold FtoRradix in |- *; repeat rewrite Fopp_correct; rewrite Rabs_Ropp; rewrite <- Faux.Rabsolu_left1; auto with real.",
            "VernacExtend",
            "716aa6c90b4dd2584b355e600b4f656d7b86d0fc"
        ],
        [
            "apply (ClosestCompatible b radix (- (p + q))%R (Fopp q + Fopp p)%R ( Fopp pq) (Fopp pq)); auto.",
            "VernacExtend",
            "44ad2d9f05aa89cc1117ee01c6736a1bf829d45d"
        ],
        [
            "apply ClosestOpp; auto.",
            "VernacExtend",
            "fdb10086de8928309670334b477ceba716a1f016"
        ],
        [
            "unfold FtoRradix in |- *; repeat rewrite Fopp_correct; ring.",
            "VernacExtend",
            "216a11721b4b7d252728f115120bad934d8b89a9"
        ],
        [
            "apply oppBounded; auto.",
            "VernacExtend",
            "6e68d2122eeea082741ca4e279707ce0511c71ef"
        ],
        [
            "apply oppBounded; auto.",
            "VernacExtend",
            "6e68d2122eeea082741ca4e279707ce0511c71ef"
        ],
        [
            "apply oppBounded; auto.",
            "VernacExtend",
            "6e68d2122eeea082741ca4e279707ce0511c71ef"
        ],
        [
            "unfold FtoRradix in |- *; repeat rewrite Fopp_correct; Contradict H'2.",
            "VernacExtend",
            "20c6dc809ef6445278d9babc3ddb65d939ebf04b"
        ],
        [
            "unfold FtoRradix in |- *; rewrite <- (Ropp_involutive (FtoR radix pq)); rewrite H'2; ring.",
            "VernacExtend",
            "af0a9059f927be0329541a26857d30dc4b8ff654"
        ],
        [
            "unfold FtoRradix in |- *; apply RleRoundedLessR0 with (b := b) (precision := precision) (P := Closest b radix) (r := (p + q)%R); auto.",
            "VernacExtend",
            "ed71b3ce7eee0afc7b52643a10f9ffea751be7fc"
        ],
        [
            "apply ClosestRoundedModeP with (precision := precision); auto.",
            "VernacExtend",
            "eb6d3ee24dd119beb307169797f1cdd709b3ec7c"
        ],
        [
            "case (Rle_or_lt 0 p); intros Rl3; [ idtac | cut (p <= 0)%R; [ intros Rl3' | apply Rlt_le; auto ] ]; auto with real.",
            "VernacExtend",
            "a6fb8ad8d1f35544fd1d01126ec1a8020429f1e9"
        ],
        [
            "apply Rplus_le_reg_l with (r := (- q)%R).",
            "VernacExtend",
            "a4d336b0f4a7f48e2463cffe78fb7ef5187789d8"
        ],
        [
            "replace (- q + 0)%R with (- q)%R; [ idtac | ring ].",
            "VernacExtend",
            "8e73a5f264a316db8047f75db0cadeeaf528d261"
        ],
        [
            "replace (- q + (p + q))%R with (FtoRradix p); [ idtac | ring ].",
            "VernacExtend",
            "299389143bccde4da7235a951da5f324d8683388"
        ],
        [
            "rewrite <- (Rabs_right (FtoRradix p)); auto with real.",
            "VernacExtend",
            "d010fbcc5ba53cbbeffdd8dd88c24c35d03b1894"
        ],
        [
            "rewrite <- (Rabs_left (FtoRradix q)); auto with real.",
            "VernacExtend",
            "84d1be2bd67d575896d14df36b2424e8fed0ca2d"
        ],
        [
            "replace 0%R with (0 + 0)%R; auto with real.",
            "VernacExtend",
            "0397539d441e803111e5cd88661fcbc23fd1c85a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Theorem plusClosestLowerBound : forall p q pq : float, Closest b radix (p + q) pq -> Fbounded b p -> Fbounded b q -> pq <> (p + q)%R :>R -> (/ radix * Rmax (Rabs p) (Rabs q) <= Rabs pq)%R.",
            "VernacStartTheoremProof",
            "0b8c4b7457ea36e93796d8c49b70b8297df23560"
        ],
        [
            "intros p q pq H' H'0 H'1 H'2.",
            "VernacExtend",
            "8909ba2de4e52fb8d4a774c709173e613c273972"
        ],
        [
            "cut (Fbounded b pq); [ intros Fb0 | apply RoundedModeBounded with (radix := radix) (P := Closest b radix) (r := (p + q)%R); auto; apply ClosestRoundedModeP with (precision := precision) ]; auto.",
            "VernacExtend",
            "01b5a20fd8b9b1569222479370d362f426b24814"
        ],
        [
            "unfold Rmax in |- *.",
            "VernacExtend",
            "b367cb66c5064d8e38d17f567a1ed22797080b57"
        ],
        [
            "case (Rle_dec (Rabs p) (Rabs q)); intros Rl1.",
            "VernacExtend",
            "2843da248e1c65f419f502ab6c0262a6aa78932b"
        ],
        [
            "apply plusClosestLowerBoundAux2 with (p := p); auto.",
            "VernacExtend",
            "3742cdec24439244dd692dd6a144cfdeaf375874"
        ],
        [
            "apply plusClosestLowerBoundAux2 with (p := q); auto.",
            "VernacExtend",
            "dadc62c076c9d7ebdd9663123b77b16fe1069907"
        ],
        [
            "apply (ClosestCompatible b radix (p + q)%R (q + p)%R pq pq); auto; try ring.",
            "VernacExtend",
            "ddfbfc2617ac54e4e29639bcef51c597019db3fc"
        ],
        [
            "rewrite Rplus_comm; auto.",
            "VernacExtend",
            "77321ea465ace568cf8c073e1066c2640bcf5fd7"
        ],
        [
            "case (Rle_or_lt (Rabs q) (Rabs p)); auto; intros H'3; Contradict Rl1; apply Rlt_le; auto.",
            "VernacExtend",
            "f9ee069ed766beb5fe772e951ecfe9597fdbce71"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "End F2.",
            "VernacEndSegment",
            "4e37c554b1cadd951b4100249d239265a4350225"
        ]
    ],
    "proofs": [
        {
            "name": "TwoMoreThanOne",
            "line_nb": 8,
            "steps": [
                {
                    "command": [
                        "red in |- *; simpl in |- *; auto.",
                        "VernacExtend",
                        "1d43d4029690c353fb7edf6ba67b74a84697f82f"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "plusUpperBound",
            "line_nb": 14,
            "steps": [
                {
                    "command": [
                        "intros P H' p q pq H'0 H'1 H'2.",
                        "VernacExtend",
                        "d2f053f2d8716a0239cbe3ace54738c6beca164a"
                    ]
                },
                {
                    "command": [
                        "rewrite <- (Rabs_right radix); auto with real zarith.",
                        "VernacExtend",
                        "3fdea47d0e0cd85794f5c29756dd944767d3b57a"
                    ]
                },
                {
                    "command": [
                        "rewrite <- RmaxRmult; auto with real.",
                        "VernacExtend",
                        "fd774f5f50c3b4d23d503f84c6408000f9bfaae1"
                    ]
                },
                {
                    "command": [
                        "repeat rewrite <- Rabs_mult.",
                        "VernacExtend",
                        "6a791d6710b2159748c1058d475d335523e6fa1b"
                    ]
                },
                {
                    "command": [
                        "case (Rle_or_lt p q); intros Rltp.",
                        "VernacExtend",
                        "f63f74007095fcf4b0b6442838bd503d703251f1"
                    ]
                },
                {
                    "command": [
                        "apply RmaxAbs; auto.",
                        "VernacExtend",
                        "3f508a4ab4e4eb429e99e5fad948650717d4d38a"
                    ]
                },
                {
                    "command": [
                        "apply (RoundedModeMultLess b radix) with (P := P) (r := (p + q)%R); auto.",
                        "VernacExtend",
                        "2bd1133c8a3af1ea6b1d069f5b1e27d85c11fe54"
                    ]
                },
                {
                    "command": [
                        "replace (radix * FtoR radix p)%R with (p + p)%R; [ auto with real | unfold radix at 1; fold FtoRradix; ring].",
                        "VernacExtend",
                        "d1cf89ebc927f10d22e2e68a52326281e8f0da63"
                    ]
                },
                {
                    "command": [
                        "unfold FtoRradix in |- *; apply (RoundedModeMult b radix) with (P := P) (r := (p + q)%R); auto.",
                        "VernacExtend",
                        "9396f992d965230e5e9e5c52961767b85d27b3db"
                    ]
                },
                {
                    "command": [
                        "replace (radix * FtoR radix q)%R with (q + q)%R; [ auto with real | unfold radix at 1; fold FtoRradix; ring ].",
                        "VernacExtend",
                        "a7648a26cf05261296fd05292447a465c35b1ea0"
                    ]
                },
                {
                    "command": [
                        "rewrite RmaxSym.",
                        "VernacExtend",
                        "bf31a76122689a6c37c13a17eb5d2c91807a9608"
                    ]
                },
                {
                    "command": [
                        "apply RmaxAbs; auto.",
                        "VernacExtend",
                        "3f508a4ab4e4eb429e99e5fad948650717d4d38a"
                    ]
                },
                {
                    "command": [
                        "apply (RoundedModeMultLess b radix) with (P := P) (r := (p + q)%R); auto.",
                        "VernacExtend",
                        "2bd1133c8a3af1ea6b1d069f5b1e27d85c11fe54"
                    ]
                },
                {
                    "command": [
                        "replace (radix * FtoR radix q)%R with (q + q)%R; [ auto with real | unfold radix at 1; fold FtoRradix; ring ].",
                        "VernacExtend",
                        "a7648a26cf05261296fd05292447a465c35b1ea0"
                    ]
                },
                {
                    "command": [
                        "unfold FtoRradix in |- *; apply (RoundedModeMult b radix) with (P := P) (r := (p + q)%R); auto.",
                        "VernacExtend",
                        "9396f992d965230e5e9e5c52961767b85d27b3db"
                    ]
                },
                {
                    "command": [
                        "replace (radix * FtoR radix p)%R with (p + p)%R; [ auto with real zarith | unfold radix at 1; fold FtoRradix; ring].",
                        "VernacExtend",
                        "71bb8cccda9a675a5ccbe0b2c0c2629046ba3726"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "plusErrorBound2",
            "line_nb": 32,
            "steps": [
                {
                    "command": [
                        "intros p q r H' H'0 H'1 H'2.",
                        "VernacExtend",
                        "83b3ef77da60d23370e4e44956d681f7820b20e2"
                    ]
                },
                {
                    "command": [
                        "apply Rlt_le_trans with (Rabs (FtoR radix r) * / radix * (radix * / pPred (vNum b)))%R; auto.",
                        "VernacExtend",
                        "eb277a9fe7db8c5f5a86c61aac065a731d9e656e"
                    ]
                },
                {
                    "command": [
                        "unfold FtoRradix in |- *; apply plusErrorBound1 with (precision := precision); auto with arith.",
                        "VernacExtend",
                        "1796650b4190d8daeccbb4f5e442ba065fc4686f"
                    ]
                },
                {
                    "command": [
                        "replace (Rabs (FtoR radix r) * / radix * (radix * / pPred (vNum b)))%R with (radix * / pPred (vNum b) * (Rabs r * / radix))%R; [ idtac | fold FtoRradix; ring ].",
                        "VernacExtend",
                        "c559cc0b2e455a7eeee37866bd0fc1c5a334a5a3"
                    ]
                },
                {
                    "command": [
                        "apply Rmult_le_compat_l; auto.",
                        "VernacExtend",
                        "54d1b5d69c3cd83834a4db2aea91d608ed3ae4f3"
                    ]
                },
                {
                    "command": [
                        "replace 0%R with (radix * 0)%R; [ apply Rmult_le_compat_l | ring ].",
                        "VernacExtend",
                        "76e3a7beab3f7755408c895cb5fc5029462fd97a"
                    ]
                },
                {
                    "command": [
                        "cut (0 <= radix)%Z; auto with real zarith.",
                        "VernacExtend",
                        "e63d51affd44a02b52d773dd13feea9fc27bf3b2"
                    ]
                },
                {
                    "command": [
                        "apply Rlt_le; apply Rinv_0_lt_compat; cut (0 < pPred (vNum b))%Z; auto with real zarith.",
                        "VernacExtend",
                        "0f2405a4ab0b608f27d3250f9f1e5a5a9df8d698"
                    ]
                },
                {
                    "command": [
                        "unfold pPred in |- *; apply Zlt_succ_pred; simpl in |- *.",
                        "VernacExtend",
                        "7116e0555b780c05d1675150b01ef688a461eab7"
                    ]
                },
                {
                    "command": [
                        "apply vNumbMoreThanOne with (radix := radix) (precision := precision); auto with real arith.",
                        "VernacExtend",
                        "01017bc5d3853cd34e574becf03eaaa2f0c45a5a"
                    ]
                },
                {
                    "command": [
                        "apply Rmult_le_reg_l with (r := IZR radix); auto with real.",
                        "VernacExtend",
                        "9c13af91836144e0cde89fd9ce1f24b85696d893"
                    ]
                },
                {
                    "command": [
                        "rewrite (Rmult_comm (Rabs r)); rewrite <- Rmult_assoc; rewrite Rinv_r; auto with real zarith; rewrite Rmult_1_l.",
                        "VernacExtend",
                        "ece6cfba368ea4b5289c72d0c0e7efa65d5d8fae"
                    ]
                },
                {
                    "command": [
                        "apply plusUpperBound with (P := Closest b radix); auto.",
                        "VernacExtend",
                        "1515a1f8e587ef78fb1f17a28635701848528388"
                    ]
                },
                {
                    "command": [
                        "apply ClosestRoundedModeP with (precision := precision); auto.",
                        "VernacExtend",
                        "eb6d3ee24dd119beb307169797f1cdd709b3ec7c"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "plusClosestLowerBoundAux1",
            "line_nb": 48,
            "steps": [
                {
                    "command": [
                        "intros p q pq H' H'0 H'1 H'2 H'3.",
                        "VernacExtend",
                        "64f183ae61c9cc8c7e75f4824c62a83070b01d18"
                    ]
                },
                {
                    "command": [
                        "cut (0 <= p)%R; [ intros Rl0; Casec Rl0; intros H0 | apply Rle_trans with (2 := H'); auto with real ].",
                        "VernacExtend",
                        "74c0bbdb6e71b6b881b58dfb751968473eb854f5"
                    ]
                },
                {
                    "command": [
                        "apply (FmultRadixInv b radix precision) with (5 := H'0); auto.",
                        "VernacExtend",
                        "91cb4fad67fa44253edf6431adab7dc7dd48a4d9"
                    ]
                },
                {
                    "command": [
                        "case (Rle_or_lt 0 q); intros Rl0.",
                        "VernacExtend",
                        "9bb95b95dcdd500c1b6a6969243644184f881fe4"
                    ]
                },
                {
                    "command": [
                        "apply Rlt_le_trans with (FtoRradix p); auto.",
                        "VernacExtend",
                        "ac6acc1dae618b3b1a42b23fb6b74c3c99cae148"
                    ]
                },
                {
                    "command": [
                        "apply Rlt_RinvDouble; auto.",
                        "VernacExtend",
                        "5a3cf53b5edb4f01033e7cf5f359caa0f28b760b"
                    ]
                },
                {
                    "command": [
                        "pattern (FtoRradix p) at 1 in |- *; replace (FtoRradix p) with (p + 0)%R; auto with real.",
                        "VernacExtend",
                        "909da4429bd2c5d1dca89828a745e699be52e85e"
                    ]
                },
                {
                    "command": [
                        "apply Rmult_lt_reg_l with (r := IZR radix); auto with real.",
                        "VernacExtend",
                        "cb4aef32291077227c6b32bf8cee3ec1f383a8b2"
                    ]
                },
                {
                    "command": [
                        "rewrite <- Rmult_assoc; rewrite Rinv_r.",
                        "VernacExtend",
                        "d7bbeef31f7b8b397a05d883a8c55ba90a522740"
                    ]
                },
                {
                    "command": [
                        "rewrite Rmult_plus_distr_l.",
                        "VernacExtend",
                        "e243bcfd594d50273783e947b301871dc4efc70c"
                    ]
                },
                {
                    "command": [
                        "rewrite Rmult_1_l.",
                        "VernacExtend",
                        "1ba58092cf1ca2fa8155dfa9c64894290b0f39df"
                    ]
                },
                {
                    "command": [
                        "apply Rplus_lt_reg_l with (r := (- (radix * p))%R).",
                        "VernacExtend",
                        "b20fded1fe3852042553c70c4c3b25bbb3dd61cc"
                    ]
                },
                {
                    "command": [
                        "replace (- (radix * p) + FtoR radix p)%R with (- p)%R; [ idtac | unfold radix at 1; unfold FtoRradix; ring].",
                        "VernacExtend",
                        "d5e5b8c27e81239cb31d4737732ecef5e45b0a43"
                    ]
                },
                {
                    "command": [
                        "replace (- (radix * p) + (radix * p + radix * q))%R with (radix * q)%R; [ idtac | simpl in |- *; ring ].",
                        "VernacExtend",
                        "57bd8be01331a46d5661257aac516201dcde1990"
                    ]
                },
                {
                    "command": [
                        "rewrite <- (Ropp_involutive (radix * q)); apply Ropp_lt_contravar.",
                        "VernacExtend",
                        "2743577d0b7eb5f6b13fa70a6d129adac64b4113"
                    ]
                },
                {
                    "command": [
                        "replace (- (radix * q))%R with (radix * - q)%R; [ idtac | ring ].",
                        "VernacExtend",
                        "1ec91bc48ce3aabae734d3ccbef15e13267da742"
                    ]
                },
                {
                    "command": [
                        "case (Rle_or_lt (FtoRradix p) (radix * - q)); auto.",
                        "VernacExtend",
                        "334ca9fe13a6578173e9c985251eb8ea438c0c9c"
                    ]
                },
                {
                    "command": [
                        "intros H'4; Contradict H'3.",
                        "VernacExtend",
                        "7300d699607500142ce44dd873bd2cca4778723f"
                    ]
                },
                {
                    "command": [
                        "rewrite <- (Fplus_correct radix); auto.",
                        "VernacExtend",
                        "c71d38cedda33adc79d6203f62fa99a8bbd0cece"
                    ]
                },
                {
                    "command": [
                        "unfold FtoRradix in |- *; apply sym_eq; apply ClosestIdem with (b := b); auto.",
                        "VernacExtend",
                        "c3ccbf18a799b8c92b9f156049277820e3c4af04"
                    ]
                },
                {
                    "command": [
                        "replace (Fplus radix p q) with (Fminus radix p (Fopp q)).",
                        "VernacExtend",
                        "8e7794d497da76169cc4c81fa4cdfe5f63d5f761"
                    ]
                },
                {
                    "command": [
                        "rewrite <- Fopp_Fminus.",
                        "VernacExtend",
                        "1c443a8ba74c86b8fdff1e33c3cdb7af22126cbe"
                    ]
                },
                {
                    "command": [
                        "apply oppBounded; auto.",
                        "VernacExtend",
                        "6e68d2122eeea082741ca4e279707ce0511c71ef"
                    ]
                },
                {
                    "command": [
                        "apply Sterbenz; auto.",
                        "VernacExtend",
                        "2d564057c2daa6631c6b156cb718aa4284b2d9cb"
                    ]
                },
                {
                    "command": [
                        "apply oppBounded; auto.",
                        "VernacExtend",
                        "6e68d2122eeea082741ca4e279707ce0511c71ef"
                    ]
                },
                {
                    "command": [
                        "apply Rmult_le_reg_l with (r := IZR radix); auto with real.",
                        "VernacExtend",
                        "9c13af91836144e0cde89fd9ce1f24b85696d893"
                    ]
                },
                {
                    "command": [
                        "rewrite <- Rmult_assoc; rewrite Rinv_r.",
                        "VernacExtend",
                        "d7bbeef31f7b8b397a05d883a8c55ba90a522740"
                    ]
                },
                {
                    "command": [
                        "rewrite Rmult_1_l; rewrite Fopp_correct; auto.",
                        "VernacExtend",
                        "adae22348d8ad2ee8ac8dd890f91c768fed9823a"
                    ]
                },
                {
                    "command": [
                        "replace 0%R with (INR 0); auto with real arith.",
                        "VernacExtend",
                        "3caed965951659080cf394dcb353db3f9bd924fa"
                    ]
                },
                {
                    "command": [
                        "apply Rle_trans with (FtoR 2%nat p); auto with real.",
                        "VernacExtend",
                        "f044409635d2eb1bd8c7663285b1f77d5b313af0"
                    ]
                },
                {
                    "command": [
                        "rewrite Fopp_correct; auto.",
                        "VernacExtend",
                        "eeabcd66a21fb7fbd56662f87b0ad8c6385bf543"
                    ]
                },
                {
                    "command": [
                        "rewrite <- Faux.Rabsolu_left1; auto.",
                        "VernacExtend",
                        "8416aba2232b7d472962a3dd1bb5c39ba063d252"
                    ]
                },
                {
                    "command": [
                        "apply Rlt_le; auto.",
                        "VernacExtend",
                        "4003e3e1c449ee89cad9e953d0a562db8235648c"
                    ]
                },
                {
                    "command": [
                        "unfold Fminus in |- *; rewrite Fopp_Fopp; auto.",
                        "VernacExtend",
                        "2bbb76a951ef47244b79b17bada6f36c23011860"
                    ]
                },
                {
                    "command": [
                        "apply (ClosestCompatible b radix (p + q)%R (FtoR radix (Fplus radix p q)) pq pq); auto.",
                        "VernacExtend",
                        "3580f8facb43ba457dbadf6f8915e205ceef9074"
                    ]
                },
                {
                    "command": [
                        "apply sym_eq; unfold FtoRradix in |- *; apply Fplus_correct; auto.",
                        "VernacExtend",
                        "6cd7ec007d015254d13fed1f3120402efcb010b3"
                    ]
                },
                {
                    "command": [
                        "apply RoundedModeBounded with (radix := radix) (P := Closest b radix) (r := (p + q)%R); auto.",
                        "VernacExtend",
                        "89af83cf84428d80f70994c6f9be6125b0cac6cc"
                    ]
                },
                {
                    "command": [
                        "apply ClosestRoundedModeP with (precision := precision); auto.",
                        "VernacExtend",
                        "eb6d3ee24dd119beb307169797f1cdd709b3ec7c"
                    ]
                },
                {
                    "command": [
                        "replace 0%R with (INR 0); auto with real arith.",
                        "VernacExtend",
                        "3caed965951659080cf394dcb353db3f9bd924fa"
                    ]
                },
                {
                    "command": [
                        "rewrite <- H0; rewrite Rmult_0_r.",
                        "VernacExtend",
                        "b9087b816b326fd605282fd034fb945264796e37"
                    ]
                },
                {
                    "command": [
                        "replace (FtoRradix pq) with (FtoRradix p); auto.",
                        "VernacExtend",
                        "b6d70d77c86adfbf708b16e3e770809403f6433c"
                    ]
                },
                {
                    "command": [
                        "rewrite <- H0; auto with real.",
                        "VernacExtend",
                        "92df47d0b96189f26defb22601fbd12ab2b16ad2"
                    ]
                },
                {
                    "command": [
                        "unfold FtoRradix in |- *; apply ClosestIdem with (b := b); auto.",
                        "VernacExtend",
                        "4ebff5db363f25a10c1bd1c3c7178d6076b7424f"
                    ]
                },
                {
                    "command": [
                        "apply (ClosestCompatible b radix (p + q)%R (FtoR radix p) pq pq); auto.",
                        "VernacExtend",
                        "c1ccc8023a516cd7748943399640c8630266fb63"
                    ]
                },
                {
                    "command": [
                        "replace (FtoR 2%nat p) with (FtoRradix p); auto.",
                        "VernacExtend",
                        "9601720389f83cab5e0a0a987eb16ec188d5724d"
                    ]
                },
                {
                    "command": [
                        "fold FtoRradix; rewrite <- H0; replace (FtoRradix q) with 0%R; try ring.",
                        "VernacExtend",
                        "c415338c60e272c199d383f5980e3b0e8dc62025"
                    ]
                },
                {
                    "command": [
                        "generalize H'; unfold Rabs in |- *; case (Rcase_abs q); auto.",
                        "VernacExtend",
                        "898a7eaf32e4c5df8fd8be29e1b2eb99f949bcd6"
                    ]
                },
                {
                    "command": [
                        "intros H'4 H'5; Contradict H'5; rewrite <- H0; auto with real.",
                        "VernacExtend",
                        "a37ce1d7e5e3d19360d30a583611303242a5b22e"
                    ]
                },
                {
                    "command": [
                        "apply Rlt_not_le; auto with real.",
                        "VernacExtend",
                        "9b1690e28c96f72eb26acad1cf4a770eb61a1a8d"
                    ]
                },
                {
                    "command": [
                        "intros H'4 H'5; apply Rle_antisym; auto with real.",
                        "VernacExtend",
                        "4d3dbd3a69f8554cf55dc42db5d03e3125d0b1b1"
                    ]
                },
                {
                    "command": [
                        "rewrite H0; auto.",
                        "VernacExtend",
                        "48df2b0b453adadcea8e6914bccb68bfc33b286b"
                    ]
                },
                {
                    "command": [
                        "apply RoundedModeBounded with (radix := radix) (P := Closest b radix) (r := (p + q)%R); auto.",
                        "VernacExtend",
                        "89af83cf84428d80f70994c6f9be6125b0cac6cc"
                    ]
                },
                {
                    "command": [
                        "apply ClosestRoundedModeP with (precision := precision); auto.",
                        "VernacExtend",
                        "eb6d3ee24dd119beb307169797f1cdd709b3ec7c"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "plusClosestLowerBoundAux2",
            "line_nb": 103,
            "steps": [
                {
                    "command": [
                        "intros p q pq H' H'0 H'1 H'2 H'3.",
                        "VernacExtend",
                        "64f183ae61c9cc8c7e75f4824c62a83070b01d18"
                    ]
                },
                {
                    "command": [
                        "cut (Fbounded b pq); [ intros Fb0 | apply RoundedModeBounded with (radix := radix) (P := Closest b radix) (r := (p + q)%R); auto; apply ClosestRoundedModeP with (precision := precision) ]; auto.",
                        "VernacExtend",
                        "01b5a20fd8b9b1569222479370d362f426b24814"
                    ]
                },
                {
                    "command": [
                        "case (Rle_or_lt 0 q); intros Rl2; [ idtac | cut (q <= 0)%R; [ intros Rl2' | apply Rlt_le; auto ] ].",
                        "VernacExtend",
                        "fca0db217db9d3eaaefb03d4a1b3aa03fbd80d7f"
                    ]
                },
                {
                    "command": [
                        "repeat rewrite Rabs_right; auto with real.",
                        "VernacExtend",
                        "acbc524ee08d51df0747101f806570b23d1c2cd0"
                    ]
                },
                {
                    "command": [
                        "apply plusClosestLowerBoundAux1 with (q := p); auto.",
                        "VernacExtend",
                        "b6ed02f68c292b5323bde7911329448a24a74e94"
                    ]
                },
                {
                    "command": [
                        "rewrite <- (Rabs_right q); auto with real.",
                        "VernacExtend",
                        "9c27c08ba25041943137a500f9311d7aba57054b"
                    ]
                },
                {
                    "command": [
                        "apply (ClosestCompatible b radix (p + q)%R (q + p)%R pq pq); auto; try ring.",
                        "VernacExtend",
                        "ddfbfc2617ac54e4e29639bcef51c597019db3fc"
                    ]
                },
                {
                    "command": [
                        "rewrite Rplus_comm; auto with real.",
                        "VernacExtend",
                        "7282790a4fd812defbde63d58d58719892ebdf23"
                    ]
                },
                {
                    "command": [
                        "apply Rle_ge; unfold FtoRradix in |- *; apply RleRoundedR0 with (b := b) (precision := precision) (P := Closest b radix) (r := (p + q)%R); auto.",
                        "VernacExtend",
                        "3b1d25d4065a919428c64494fb405a8500abcb88"
                    ]
                },
                {
                    "command": [
                        "apply ClosestRoundedModeP with (precision := precision); auto.",
                        "VernacExtend",
                        "eb6d3ee24dd119beb307169797f1cdd709b3ec7c"
                    ]
                },
                {
                    "command": [
                        "case (Rle_or_lt 0 p); intros Rl3; [ idtac | cut (p <= 0)%R; [ intros Rl3' | apply Rlt_le; auto ] ]; auto with real.",
                        "VernacExtend",
                        "a6fb8ad8d1f35544fd1d01126ec1a8020429f1e9"
                    ]
                },
                {
                    "command": [
                        "replace 0%R with (0 + 0)%R; auto with real.",
                        "VernacExtend",
                        "0397539d441e803111e5cd88661fcbc23fd1c85a"
                    ]
                },
                {
                    "command": [
                        "apply Rplus_le_reg_l with (r := (- p)%R).",
                        "VernacExtend",
                        "be7234a096ec846f9abe774fd240c2749b394eee"
                    ]
                },
                {
                    "command": [
                        "replace (- p + 0)%R with (- p)%R; [ idtac | ring ].",
                        "VernacExtend",
                        "d329c61fb784b55367af8aa088c06f6702b6b2a2"
                    ]
                },
                {
                    "command": [
                        "replace (- p + (p + q))%R with (FtoRradix q); [ idtac | ring ].",
                        "VernacExtend",
                        "96a1086f18b6b1dc62a36326495320a439691816"
                    ]
                },
                {
                    "command": [
                        "rewrite <- (Faux.Rabsolu_left1 (FtoRradix p)); auto with real.",
                        "VernacExtend",
                        "c1a0bad1eb92af11ccb8684ae17e73b4c11419dd"
                    ]
                },
                {
                    "command": [
                        "rewrite <- (Rabs_right (FtoRradix q)); auto with real.",
                        "VernacExtend",
                        "5d396a99ad751421333d49a9555eff27a0bec517"
                    ]
                },
                {
                    "command": [
                        "repeat rewrite Faux.Rabsolu_left1; auto with real.",
                        "VernacExtend",
                        "2b438b91c9b3be0a5b2460f9b08c8a396b6b9610"
                    ]
                },
                {
                    "command": [
                        "unfold FtoRradix in |- *; repeat rewrite <- (Fopp_correct 2%nat); auto.",
                        "VernacExtend",
                        "07eceba11d8761b46dd1717b6f59b7df4c2d9df8"
                    ]
                },
                {
                    "command": [
                        "apply plusClosestLowerBoundAux1 with (q := Fopp p); auto.",
                        "VernacExtend",
                        "3fb28c0c46d169914174f99d0ecdde7f71af8b5e"
                    ]
                },
                {
                    "command": [
                        "unfold FtoRradix in |- *; repeat rewrite Fopp_correct; rewrite Rabs_Ropp; rewrite <- Faux.Rabsolu_left1; auto with real.",
                        "VernacExtend",
                        "716aa6c90b4dd2584b355e600b4f656d7b86d0fc"
                    ]
                },
                {
                    "command": [
                        "apply (ClosestCompatible b radix (- (p + q))%R (Fopp q + Fopp p)%R ( Fopp pq) (Fopp pq)); auto.",
                        "VernacExtend",
                        "44ad2d9f05aa89cc1117ee01c6736a1bf829d45d"
                    ]
                },
                {
                    "command": [
                        "apply ClosestOpp; auto.",
                        "VernacExtend",
                        "fdb10086de8928309670334b477ceba716a1f016"
                    ]
                },
                {
                    "command": [
                        "unfold FtoRradix in |- *; repeat rewrite Fopp_correct; ring.",
                        "VernacExtend",
                        "216a11721b4b7d252728f115120bad934d8b89a9"
                    ]
                },
                {
                    "command": [
                        "apply oppBounded; auto.",
                        "VernacExtend",
                        "6e68d2122eeea082741ca4e279707ce0511c71ef"
                    ]
                },
                {
                    "command": [
                        "apply oppBounded; auto.",
                        "VernacExtend",
                        "6e68d2122eeea082741ca4e279707ce0511c71ef"
                    ]
                },
                {
                    "command": [
                        "apply oppBounded; auto.",
                        "VernacExtend",
                        "6e68d2122eeea082741ca4e279707ce0511c71ef"
                    ]
                },
                {
                    "command": [
                        "unfold FtoRradix in |- *; repeat rewrite Fopp_correct; Contradict H'2.",
                        "VernacExtend",
                        "20c6dc809ef6445278d9babc3ddb65d939ebf04b"
                    ]
                },
                {
                    "command": [
                        "unfold FtoRradix in |- *; rewrite <- (Ropp_involutive (FtoR radix pq)); rewrite H'2; ring.",
                        "VernacExtend",
                        "af0a9059f927be0329541a26857d30dc4b8ff654"
                    ]
                },
                {
                    "command": [
                        "unfold FtoRradix in |- *; apply RleRoundedLessR0 with (b := b) (precision := precision) (P := Closest b radix) (r := (p + q)%R); auto.",
                        "VernacExtend",
                        "ed71b3ce7eee0afc7b52643a10f9ffea751be7fc"
                    ]
                },
                {
                    "command": [
                        "apply ClosestRoundedModeP with (precision := precision); auto.",
                        "VernacExtend",
                        "eb6d3ee24dd119beb307169797f1cdd709b3ec7c"
                    ]
                },
                {
                    "command": [
                        "case (Rle_or_lt 0 p); intros Rl3; [ idtac | cut (p <= 0)%R; [ intros Rl3' | apply Rlt_le; auto ] ]; auto with real.",
                        "VernacExtend",
                        "a6fb8ad8d1f35544fd1d01126ec1a8020429f1e9"
                    ]
                },
                {
                    "command": [
                        "apply Rplus_le_reg_l with (r := (- q)%R).",
                        "VernacExtend",
                        "a4d336b0f4a7f48e2463cffe78fb7ef5187789d8"
                    ]
                },
                {
                    "command": [
                        "replace (- q + 0)%R with (- q)%R; [ idtac | ring ].",
                        "VernacExtend",
                        "8e73a5f264a316db8047f75db0cadeeaf528d261"
                    ]
                },
                {
                    "command": [
                        "replace (- q + (p + q))%R with (FtoRradix p); [ idtac | ring ].",
                        "VernacExtend",
                        "299389143bccde4da7235a951da5f324d8683388"
                    ]
                },
                {
                    "command": [
                        "rewrite <- (Rabs_right (FtoRradix p)); auto with real.",
                        "VernacExtend",
                        "d010fbcc5ba53cbbeffdd8dd88c24c35d03b1894"
                    ]
                },
                {
                    "command": [
                        "rewrite <- (Rabs_left (FtoRradix q)); auto with real.",
                        "VernacExtend",
                        "84d1be2bd67d575896d14df36b2424e8fed0ca2d"
                    ]
                },
                {
                    "command": [
                        "replace 0%R with (0 + 0)%R; auto with real.",
                        "VernacExtend",
                        "0397539d441e803111e5cd88661fcbc23fd1c85a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "plusClosestLowerBound",
            "line_nb": 143,
            "steps": [
                {
                    "command": [
                        "intros p q pq H' H'0 H'1 H'2.",
                        "VernacExtend",
                        "8909ba2de4e52fb8d4a774c709173e613c273972"
                    ]
                },
                {
                    "command": [
                        "cut (Fbounded b pq); [ intros Fb0 | apply RoundedModeBounded with (radix := radix) (P := Closest b radix) (r := (p + q)%R); auto; apply ClosestRoundedModeP with (precision := precision) ]; auto.",
                        "VernacExtend",
                        "01b5a20fd8b9b1569222479370d362f426b24814"
                    ]
                },
                {
                    "command": [
                        "unfold Rmax in |- *.",
                        "VernacExtend",
                        "b367cb66c5064d8e38d17f567a1ed22797080b57"
                    ]
                },
                {
                    "command": [
                        "case (Rle_dec (Rabs p) (Rabs q)); intros Rl1.",
                        "VernacExtend",
                        "2843da248e1c65f419f502ab6c0262a6aa78932b"
                    ]
                },
                {
                    "command": [
                        "apply plusClosestLowerBoundAux2 with (p := p); auto.",
                        "VernacExtend",
                        "3742cdec24439244dd692dd6a144cfdeaf375874"
                    ]
                },
                {
                    "command": [
                        "apply plusClosestLowerBoundAux2 with (p := q); auto.",
                        "VernacExtend",
                        "dadc62c076c9d7ebdd9663123b77b16fe1069907"
                    ]
                },
                {
                    "command": [
                        "apply (ClosestCompatible b radix (p + q)%R (q + p)%R pq pq); auto; try ring.",
                        "VernacExtend",
                        "ddfbfc2617ac54e4e29639bcef51c597019db3fc"
                    ]
                },
                {
                    "command": [
                        "rewrite Rplus_comm; auto.",
                        "VernacExtend",
                        "77321ea465ace568cf8c073e1066c2640bcf5fd7"
                    ]
                },
                {
                    "command": [
                        "case (Rle_or_lt (Rabs q) (Rabs p)); auto; intros H'3; Contradict Rl1; apply Rlt_le; auto.",
                        "VernacExtend",
                        "f9ee069ed766beb5fe772e951ecfe9597fdbce71"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        }
    ]
}