{
    "filename": "ClosestMult.v",
    "coq_project": "float",
    "vernac_cmds": [
        [
            "Require Export FroundMult.",
            "VernacRequire",
            "36c2a8b6220fcccd4608382155e0cad5841743ed"
        ],
        [
            "Require Export ClosestProp.",
            "VernacRequire",
            "8db9b3b5e170cac2a3031d489ceaf732362e27ae"
        ],
        [
            "Section FRoundP.",
            "VernacBeginSection",
            "03d9e3e0fff802aff28fdb045d5ce94913cbb42e"
        ],
        [
            "Variable b : Fbound.",
            "VernacAssumption",
            "17a11c003f49f819b8cb809f61b140702916486d"
        ],
        [
            "Variable radix : Z.",
            "VernacAssumption",
            "2349b77d134e0c9bb013a8bdca0020ca16fc023b"
        ],
        [
            "Variable precision : nat.",
            "VernacAssumption",
            "2235bc83b7ebf4cbe373b5fa3b4f3c643d454130"
        ],
        [
            "Let FtoRradix := FtoR radix.",
            "VernacDefinition",
            "5aa29a9595c6e9e03b28c6d232299552ec761ad7"
        ],
        [
            "Local Coercion FtoRradix : float >-> R.",
            "VernacCoercion",
            "cec6b845059d434f72dda1a67638af64e1fb0628"
        ],
        [
            "Hypothesis radixMoreThanOne : (1 < radix)%Z.",
            "VernacAssumption",
            "f4d3774b2275f4c4c3af941091d4d99f9a2129aa"
        ],
        [
            "Hypothesis precisionGreaterThanOne : 1 < precision.",
            "VernacAssumption",
            "9f627fb385d8fe283ac9563556925f37be8e5402"
        ],
        [
            "Hypothesis pGivesBound : Zpos (vNum b) = Zpower_nat radix precision.",
            "VernacAssumption",
            "d558f967d87d2a42d14158ac115b10c6f5358430"
        ],
        [
            "Theorem closestLessMultPos : forall (p : float) (r : R), Closest b radix r p -> (0 <= r)%R -> (p <= 2%nat * r)%R.",
            "VernacStartTheoremProof",
            "17dfd7489588a1bf3ede108421ea7e7ed78f347a"
        ],
        [
            "intros p r H' H'0.",
            "VernacExtend",
            "ef14b7bae52158d1a39ab929a8fdee1f74678e05"
        ],
        [
            "case ClosestMinOrMax with (1 := H'); intros H'3.",
            "VernacExtend",
            "d1cc470f65f2681d067c7d26236edc6ead51076d"
        ],
        [
            "apply Rle_trans with r; auto with real.",
            "VernacExtend",
            "b9d69bb8a32d2fa4dcfedbb4f9e240535d8d36e6"
        ],
        [
            "apply isMin_inv1 with (1 := H'3).",
            "VernacExtend",
            "418eebd2e7471b01a1dbeabc1854b2748062d032"
        ],
        [
            "case (MinEx b radix precision) with (r := r); auto with arith.",
            "VernacExtend",
            "8a6b63d6898f5b8893f2a65171ae252d565642ba"
        ],
        [
            "intros min Hmin.",
            "VernacExtend",
            "73d8394b5ad09bae07c514617f31868c3ae45249"
        ],
        [
            "apply Rle_trans with (min + p)%R; auto with real.",
            "VernacExtend",
            "e89d1f4448da77ce0f7a8f5d64a8d4e375fb0546"
        ],
        [
            "apply Rplus_le_reg_l with (r := (- p)%R).",
            "VernacExtend",
            "be7234a096ec846f9abe774fd240c2749b394eee"
        ],
        [
            "replace (- p + p)%R with 0%R; [ idtac | ring ].",
            "VernacExtend",
            "6b062f715c7c9b7c48d86cbe3d156ca83b564d9a"
        ],
        [
            "replace (- p + (min + p))%R with (FtoRradix min); [ apply (RleMinR0 b radix precision) with (r := r); auto | ring ].",
            "VernacExtend",
            "26cdb154b8cf0d0dc5259bd6fde5bfe1a71851ea"
        ],
        [
            "apply Rplus_le_reg_l with (r := (- r)%R).",
            "VernacExtend",
            "95f1f179707b13bde1d947e8d8aa4e6aa2e17fc2"
        ],
        [
            "apply Rplus_le_reg_l with (r := (- min)%R).",
            "VernacExtend",
            "ce59600835cf3e32360ceb0b483ba6cb366f9e4e"
        ],
        [
            "replace (- min + (- r + (min + p)))%R with (Rabs (p - r)).",
            "VernacExtend",
            "0d1a6cbead566b0ca9c36539a5c84b809ef62f40"
        ],
        [
            "replace (- min + (- r + 2%nat * r))%R with (Rabs (min - r)).",
            "VernacExtend",
            "f4ada47e72163f4894d95585012ad543f7e8c706"
        ],
        [
            "case H'.",
            "VernacExtend",
            "59f58feee27b0b33473890c47947a750059972d7"
        ],
        [
            "intros H'1 H'2; apply H'2; auto.",
            "VernacExtend",
            "527f1ea458e0c9e01a06cb12858ed45782b6f140"
        ],
        [
            "case Hmin; auto.",
            "VernacExtend",
            "aac4ac53c82ab54c08d98d6e682decbdec3cb5b4"
        ],
        [
            "rewrite Faux.Rabsolu_left1; simpl in |- *.",
            "VernacExtend",
            "781db12f45a41fefcb3d588030682c8ac941dfc7"
        ],
        [
            "ring; auto.",
            "VernacExtend",
            "0cc84a3f5ba99e5b72bc330e6ea7654dad1731a1"
        ],
        [
            "apply Rle_minus; apply isMin_inv1 with (1 := Hmin).",
            "VernacExtend",
            "90658905ac5bdf41baacd3b45da0e29480b56c6f"
        ],
        [
            "rewrite Rabs_right; simpl in |- *.",
            "VernacExtend",
            "4f6aa032d10af2f81c1ce58470b7936021a928cb"
        ],
        [
            "ring; auto.",
            "VernacExtend",
            "0cc84a3f5ba99e5b72bc330e6ea7654dad1731a1"
        ],
        [
            "apply Rle_ge; apply Rplus_le_reg_l with (r := r).",
            "VernacExtend",
            "8a70da3a8c3283051bbc85ee1b69a8ff1b4a3420"
        ],
        [
            "replace (r + 0)%R with r; [ idtac | ring ].",
            "VernacExtend",
            "c9d152df0a4a92b5fb99f8f47b291a71e9be45c9"
        ],
        [
            "replace (r + (p - r))%R with (FtoRradix p); [ apply isMax_inv1 with (1 := H'3) | ring ].",
            "VernacExtend",
            "e14e1330de564cfdd7a5b7d019e31ce084b23256"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Theorem closestLessMultNeg : forall (p : float) (r : R), Closest b radix r p -> (r <= 0)%R -> (2%nat * r <= p)%R.",
            "VernacStartTheoremProof",
            "234cd38c3fe6d9e92395efa8f5f1bc0c5eaf332a"
        ],
        [
            "intros p r H' H'0.",
            "VernacExtend",
            "ef14b7bae52158d1a39ab929a8fdee1f74678e05"
        ],
        [
            "replace (2%nat * r)%R with (- (2%nat * - r))%R; [ idtac | ring ].",
            "VernacExtend",
            "31c2232c37839a4005240286d55067f247397356"
        ],
        [
            "replace (FtoRradix p) with (- - p)%R; [ unfold FtoRradix in |- *; rewrite <- Fopp_correct | ring ].",
            "VernacExtend",
            "9c8f508998abc0dbfff70cbb1ad7047d83bbafd4"
        ],
        [
            "apply Ropp_le_contravar.",
            "VernacExtend",
            "ac8d32b190d111aa8834547674121bcf3bb8a0ed"
        ],
        [
            "apply closestLessMultPos; auto.",
            "VernacExtend",
            "a664c9f8123662fc47cf0f83ebbcd16caaa4e32c"
        ],
        [
            "apply ClosestOpp; auto.",
            "VernacExtend",
            "fdb10086de8928309670334b477ceba716a1f016"
        ],
        [
            "replace 0%R with (-0)%R; [ auto with real | ring ].",
            "VernacExtend",
            "d912fa52b9c31b401c2b492603248b9eedba7a89"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Theorem closestLessMultAbs : forall (p : float) (r : R), Closest b radix r p -> (Rabs p <= 2%nat * Rabs r)%R.",
            "VernacStartTheoremProof",
            "486d50b1666b6e5e9e02754a7aa15564022fe00d"
        ],
        [
            "intros p r H'; case (Rle_or_lt 0 r); intros H'1.",
            "VernacExtend",
            "646cb7351b54bd22d14f6955d66dca0308c9310d"
        ],
        [
            "repeat rewrite Rabs_right; auto with real.",
            "VernacExtend",
            "acbc524ee08d51df0747101f806570b23d1c2cd0"
        ],
        [
            "apply closestLessMultPos; auto.",
            "VernacExtend",
            "a664c9f8123662fc47cf0f83ebbcd16caaa4e32c"
        ],
        [
            "apply Rle_ge; apply (RleRoundedR0 b radix precision) with (P := Closest b radix) (r := r); auto.",
            "VernacExtend",
            "2371d80f026254a0ac540d10a0dd0bf4a82c3008"
        ],
        [
            "apply ClosestRoundedModeP with (precision := precision); auto.",
            "VernacExtend",
            "eb6d3ee24dd119beb307169797f1cdd709b3ec7c"
        ],
        [
            "repeat rewrite Faux.Rabsolu_left1; auto.",
            "VernacExtend",
            "e11c24e8ffe43271673891ae0aeb17a8a197300c"
        ],
        [
            "replace (2%nat * - r)%R with (- (2%nat * r))%R; [ apply Ropp_le_contravar | ring ].",
            "VernacExtend",
            "5c7c8d585aaa3a55548cdf097483156666dd827c"
        ],
        [
            "apply closestLessMultNeg; auto.",
            "VernacExtend",
            "29f201de7ef3c941f86c96ce7c31ac6aa01aa8c3"
        ],
        [
            "apply Rlt_le; auto.",
            "VernacExtend",
            "4003e3e1c449ee89cad9e953d0a562db8235648c"
        ],
        [
            "apply Rlt_le; auto.",
            "VernacExtend",
            "4003e3e1c449ee89cad9e953d0a562db8235648c"
        ],
        [
            "apply (RleRoundedLessR0 b radix precision) with (P := Closest b radix) (r := r); auto.",
            "VernacExtend",
            "dc0edc9ba4d2cca1f6ac4c4595febcec67b189be"
        ],
        [
            "apply ClosestRoundedModeP with (precision := precision); auto.",
            "VernacExtend",
            "eb6d3ee24dd119beb307169797f1cdd709b3ec7c"
        ],
        [
            "apply Rlt_le; auto.",
            "VernacExtend",
            "4003e3e1c449ee89cad9e953d0a562db8235648c"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Theorem errorBoundedMultClosest_aux : forall p q pq : float, Fbounded b p -> Fbounded b q -> Closest b radix (p * q) pq -> (- dExp b <= Fexp p + Fexp q)%Z -> (p * q - pq)%R <> 0%R :>R -> ex (fun r : float => ex (fun s : float => Fcanonic radix b r /\\ Fbounded b r /\\ Fbounded b s /\\ r = pq :>R /\\ s = (p * q - r)%R :>R /\\ Fexp s = (Fexp p + Fexp q)%Z :>Z /\\ (Fexp s <= Fexp r)%Z /\\ (Fexp r <= precision + (Fexp p + Fexp q))%Z)).",
            "VernacStartTheoremProof",
            "cb36c4117fae452d57d484e8c732f1b255a65c53"
        ],
        [
            "intros p q pq Hp Hq H1 H2 H3.",
            "VernacExtend",
            "05769e57ab31f57fc1ed7783c6bc3930dc62e280"
        ],
        [
            "cut (RoundedModeP b radix (Closest b radix)); [ intros H4 | apply ClosestRoundedModeP with precision; auto ].",
            "VernacExtend",
            "0399c545d9391811c406cd1cbb5c28c8b20ad38f"
        ],
        [
            "lapply (errorBoundedMultExp b radix precision); [ intros H'2; lapply H'2; [ intros H'3; lapply H'3; [ intros H'4; lapply (H'4 (Closest b radix)); [ intros H'7; elim (H'7 p q pq); [ intros r E; elim E; intros s E0; elim E0; intros H'15 H'16; elim H'16; intros H'17 H'18; elim H'18; intros H'19 H'20; elim H'20; intros H'21 H'22; elim H'22; intros H'23 H'24; elim H'24; intros H'25 H'26; clear H'24 H'22 H'20 H'18 H'16 E0 E H'3 H'2 | clear H'3 H'2 | clear H'3 H'2 | clear H'3 H'2 | clear H'3 H'2 ] | clear H'3 H'2 ] | clear H'3 H'2 ] | clear H'2 ] | idtac]; auto.",
            "VernacExtend",
            "023cfcd9ea270d33ab516d9d2c43e3c8ceacdfdf"
        ],
        [
            "exists (Fnormalize radix b precision r); exists s.",
            "VernacExtend",
            "28e7728d7ae64d8797c94dfa5998196a0efd5370"
        ],
        [
            "cut (Fbounded b (Fnormalize radix b precision r)); [ intros H5 | apply FnormalizeBounded; auto with arith ].",
            "VernacExtend",
            "18e0bd711feb4a3682fec8759254570c2282d47f"
        ],
        [
            "split; [ apply FnormalizeCanonic; auto with arith | idtac ].",
            "VernacExtend",
            "22fe30dc6f3169c9cc3695517abc8a00d1514bee"
        ],
        [
            "repeat (split; auto).",
            "VernacExtend",
            "fbc5463ee8164c7d7a0414a82c6ea4aa4f8c6b04"
        ],
        [
            "unfold FtoRradix in |- *; rewrite <- H'19; unfold FtoRradix in |- *; apply FnormalizeCorrect; auto.",
            "VernacExtend",
            "a7ef2e76e76d78f7dfc53fed3ccc8ea24144450a"
        ],
        [
            "unfold FtoRradix in |- *; rewrite FnormalizeCorrect; auto with arith.",
            "VernacExtend",
            "fc18b74f3e22660d884799845fe58892a28774a0"
        ],
        [
            "apply Zlt_le_weak.",
            "VernacExtend",
            "77c804797cd604de1af1fd78f914f426e7c6ce85"
        ],
        [
            "apply RoundedModeErrorExpStrict with b radix precision (Closest b radix) (p * q)%R; auto with arith.",
            "VernacExtend",
            "6eaf6808075a594bc6061373e9a1124abb01dfe0"
        ],
        [
            "generalize ClosestCompatible; unfold CompatibleP in |- *; intros H6.",
            "VernacExtend",
            "bee17efca74c7aa01fd97dc22c14bfb8391d5ac8"
        ],
        [
            "generalize (H6 b radix (FtoRradix p * FtoRradix q)%R (FtoRradix p * FtoRradix q)%R pq); intros H9; apply H9; auto.",
            "VernacExtend",
            "332333eb2abe729424ba19a3054464c54df3582e"
        ],
        [
            "rewrite FnormalizeCorrect; auto with real arith.",
            "VernacExtend",
            "43e78e7d57e0ebf33f2bd3bc1bb04dd42b807a65"
        ],
        [
            "rewrite FnormalizeCorrect; auto with real arith.",
            "VernacExtend",
            "43e78e7d57e0ebf33f2bd3bc1bb04dd42b807a65"
        ],
        [
            "rewrite H'21; rewrite H'19; auto.",
            "VernacExtend",
            "f8e5db36c65a16fa82559c2562a1aa5195c0c10b"
        ],
        [
            "apply Zle_trans with (Fexp r); auto.",
            "VernacExtend",
            "f07c9d5fe22031c7a1ec9892b45413cfeb533833"
        ],
        [
            "apply FcanonicLeastExp with radix b precision; auto with arith.",
            "VernacExtend",
            "7904d90ed0be63556cb1f42e3fc392554080a578"
        ],
        [
            "rewrite FnormalizeCorrect; auto with real arith.",
            "VernacExtend",
            "43e78e7d57e0ebf33f2bd3bc1bb04dd42b807a65"
        ],
        [
            "apply FnormalizeCanonic; auto with arith.",
            "VernacExtend",
            "38090fba049d672f91a024edd56166758e23d7ca"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Theorem errorBoundedMultClosest : forall p q pq : float, Fbounded b p -> Fbounded b q -> Closest b radix (p * q) pq -> (- dExp b <= Fexp p + Fexp q)%Z -> (- dExp b <= Fexp (Fnormalize radix b precision pq) - precision)%Z -> ex (fun r : float => ex (fun s : float => Fcanonic radix b r /\\ Fbounded b r /\\ Fbounded b s /\\ r = pq :>R /\\ s = (p * q - r)%R :>R /\\ Fexp s = (Fexp r - precision)%Z :>Z)).",
            "VernacStartTheoremProof",
            "b5b87915068bf675859da078ce094d00410a100d"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "cut (RoundedModeP b radix (Closest b radix)); [ intros G1 | apply ClosestRoundedModeP with precision; auto ].",
            "VernacExtend",
            "2be731f14a51a59e9a460ee84455175e58a34ece"
        ],
        [
            "case (Req_dec (p * q - pq) 0); intros U.",
            "VernacExtend",
            "0d79828c2018e49f33af0675fb220ea0dbdcc02e"
        ],
        [
            "exists (Fnormalize radix b precision pq); exists (Fzero (Fexp (Fnormalize radix b precision pq) - precision)).",
            "VernacExtend",
            "5f1a11925c57d1ff15528b16fcf73f7ca656c775"
        ],
        [
            "cut (Fbounded b pq); [ intros G2 | apply RoundedModeBounded with radix (Closest b radix) (p * q)%R; auto ].",
            "VernacExtend",
            "e609ada7c82baf407cd7191d4acae56781d86d48"
        ],
        [
            "cut (Fcanonic radix b (Fnormalize radix b precision pq)); [ intros G3 | apply FnormalizeCanonic; auto with arith ].",
            "VernacExtend",
            "bb0d05140038b5ec51b5d7fda62b8f80e1cfd11c"
        ],
        [
            "cut (Fbounded b (Fnormalize radix b precision pq)); [ intros G4 | apply FnormalizeBounded; auto with arith ].",
            "VernacExtend",
            "553a1f5882f6d71b1b08a506a254e5d7f8de721f"
        ],
        [
            "cut (Fnormalize radix b precision pq = pq :>R); [ intros G5 | unfold FtoRradix in |- *; apply FnormalizeCorrect; auto with arith ].",
            "VernacExtend",
            "d9530a6873c2b12554caacfaab5b48ac3b5365a6"
        ],
        [
            "repeat (split; auto).",
            "VernacExtend",
            "fbc5463ee8164c7d7a0414a82c6ea4aa4f8c6b04"
        ],
        [
            "rewrite G5; unfold FtoRradix in |- *; rewrite FzeroisReallyZero; auto with real.",
            "VernacExtend",
            "fc75b406d2e6aa3c0045c0ca86f9e57354ace1f2"
        ],
        [
            "lapply (errorBoundedMultClosest_aux p q pq); auto; intros H5.",
            "VernacExtend",
            "5ee84e3697e5aceee9f08ce3353c981e649ef78e"
        ],
        [
            "lapply H5; auto; intros H6; clear H5.",
            "VernacExtend",
            "7bbf06efab6146c91a8126dd0ce4c6c4b847dd79"
        ],
        [
            "lapply H6; auto; intros H5; clear H6.",
            "VernacExtend",
            "576e7d8c32ff9029f6c3a4ada0e7c328e14f7c61"
        ],
        [
            "lapply H5; auto; intros H6; clear H5.",
            "VernacExtend",
            "7bbf06efab6146c91a8126dd0ce4c6c4b847dd79"
        ],
        [
            "lapply H6; auto; intros H5; clear H6.",
            "VernacExtend",
            "576e7d8c32ff9029f6c3a4ada0e7c328e14f7c61"
        ],
        [
            "elim H5; intros r H6; clear H5.",
            "VernacExtend",
            "58bb3460dae21b1611e6686d4a34937dccee3cbd"
        ],
        [
            "elim H6; intros s H5; clear H6.",
            "VernacExtend",
            "ad1a85dd28994ef2106368ec77ebfc664a6c4dca"
        ],
        [
            "elim H5; intros H7 H6; clear H5.",
            "VernacExtend",
            "04e0c89c6473ea00a6206ae09e2c50fb4b1e0f2c"
        ],
        [
            "elim H6; intros H8 H9; clear H6.",
            "VernacExtend",
            "5bec4966c15a4258670771bc5388cb2b59355a79"
        ],
        [
            "elim H9; intros H6 H10; clear H9.",
            "VernacExtend",
            "c3b52b4e7bfbfe2cee43ea90a7716c4162dec247"
        ],
        [
            "elim H10; intros H9 H11; clear H10.",
            "VernacExtend",
            "efbecde2426f7961c66f43f06735c5a8bf1f434c"
        ],
        [
            "elim H11; intros H10 H12; clear H11.",
            "VernacExtend",
            "c4f2062ff3205952f183915be231563aa80f9621"
        ],
        [
            "elim H12; intros H11 H13; clear H12.",
            "VernacExtend",
            "02741a7f160f546dc7c235433f384fdc048bdd25"
        ],
        [
            "elim H13; intros H12 H14; clear H13.",
            "VernacExtend",
            "7386efa76b1f6075eed7b603fd1ec9f9c828b1d6"
        ],
        [
            "cut (ex (fun m : Z => s = Float m (Fexp r - precision) :>R /\\ (Zabs m <= pPred (vNum b))%Z)).",
            "VernacExtend",
            "3dfdd8ea022330f6e4d6c67234e26178bfbf7d8d"
        ],
        [
            "intros H13; elim H13; intros m H15; elim H15; intros H16 H17; clear H15 H13.",
            "VernacExtend",
            "f7d373a85939eb444f9ea77a219fd55941362994"
        ],
        [
            "exists r; exists (Float m (Fexp r - precision)).",
            "VernacExtend",
            "a2e1b52dd19a6b846ade4a2e6db329a8086b5eab"
        ],
        [
            "split; auto.",
            "VernacExtend",
            "fcd44a714bd12fa54b1c7746996e44dbac16df06"
        ],
        [
            "split; auto.",
            "VernacExtend",
            "fcd44a714bd12fa54b1c7746996e44dbac16df06"
        ],
        [
            "split.",
            "VernacExtend",
            "55abc140132bd88981001ac656020469a8d503eb"
        ],
        [
            "2: repeat (split; auto).",
            "VernacExtend",
            "68f18422c921319d2d9cc53bd3794fae064b6024"
        ],
        [
            "2: rewrite <- H16; auto.",
            "VernacExtend",
            "5d1f65b5df4f42c638fbefd429a379ba63098e86"
        ],
        [
            "split; simpl in |- *.",
            "VernacExtend",
            "007660188543279503c14efdb86878699f33588a"
        ],
        [
            "generalize H17; unfold pPred in |- *; apply Zle_Zpred_inv.",
            "VernacExtend",
            "388fbd9f3943bc5fc9243177d99ef2eacbf5e28a"
        ],
        [
            "replace r with (Fnormalize radix b precision pq); auto with zarith.",
            "VernacExtend",
            "24872f8ce0fc10325e75617adc3da20c28fedc7c"
        ],
        [
            "apply FcanonicUnique with radix b precision; auto with zarith.",
            "VernacExtend",
            "b3b7262cc2219f4f6d46bf74b898ae9ed8a6b2de"
        ],
        [
            "apply FnormalizeCanonic; auto with zarith; elim H1; auto.",
            "VernacExtend",
            "7f8a80db6abdf1ea6921a331b5059e7c049203b2"
        ],
        [
            "rewrite FnormalizeCorrect; auto with real zarith.",
            "VernacExtend",
            "b5c0f34388f52d3efcffb19c94a52c1813f11edc"
        ],
        [
            "cut (radix <> 0%Z :>Z); [ intros V | auto with arith real zarith ].",
            "VernacExtend",
            "ba0fec55e303baf06b8ed4d42e0df04e37c3a189"
        ],
        [
            "cut (0 < radix)%Z; [ intros V2 | auto with arith real zarith ].",
            "VernacExtend",
            "376c5254a0f440e20d023c27fe80b2f4daee3c2f"
        ],
        [
            "rewrite H10; unfold FtoRradix in |- *; rewrite <- Fmult_correct; auto.",
            "VernacExtend",
            "dc6cc6dfc7544c33e4b6c1906e1c20a1daeba9c5"
        ],
        [
            "rewrite <- Fminus_correct; fold FtoRradix in |- *; auto.",
            "VernacExtend",
            "d52b92cc439a3ef37508c6c36dd08a50ee21d92a"
        ],
        [
            "unfold Fmult in |- *; unfold Fminus in |- *; unfold Fopp in |- *; unfold Fplus in |- *; simpl in |- *.",
            "VernacExtend",
            "2acc47c67a64671ae39fdb0990f36cb43fe36174"
        ],
        [
            "unfold FtoRradix in |- *; unfold FtoR in |- *; simpl in |- *.",
            "VernacExtend",
            "8c0835d31a3f923ae6ce1e9ef3140f1250ad69a6"
        ],
        [
            "rewrite Zmin_le1; auto with zarith.",
            "VernacExtend",
            "0b0349f06a26f8988aaed6e8a928ec5b5b955ca6"
        ],
        [
            "replace (Fnum p * Fnum q * Zpower_nat radix (Zabs_nat (Fexp p + Fexp q - (Fexp p + Fexp q))))%Z with (Fnum p * Fnum q)%Z.",
            "VernacExtend",
            "c16d5565eacd06af2b3648df23b699614b4673f9"
        ],
        [
            "2: replace (Fexp p + Fexp q - (Fexp p + Fexp q))%Z with 0%Z; auto with zarith arith; simpl in |- *.",
            "VernacExtend",
            "9f7028687ccdd472b9e0e1fb08372ec37598aa77"
        ],
        [
            "2: auto with zarith.",
            "VernacExtend",
            "6adcd89b9935d91bb06f42fd69dbd8b8adff6c1f"
        ],
        [
            "exists ((Fnum p * Fnum q + - Fnum r * Zpower_nat radix (Zabs_nat (Fexp r - (Fexp p + Fexp q)))) * Zpower_nat radix (Zabs_nat (Fexp p + Fexp q + (precision - Fexp r))))%Z; split.",
            "VernacExtend",
            "72c6ce366e179d371d6a66ac2d14c5698d2d2cdb"
        ],
        [
            "rewrite plus_IZR.",
            "VernacExtend",
            "a71980692bd855cfdb80782b4f734eba75fada3d"
        ],
        [
            "repeat rewrite Rmult_IZR.",
            "VernacExtend",
            "698ea9ac77424dc4343f685ab3be109c5d91656d"
        ],
        [
            "rewrite plus_IZR.",
            "VernacExtend",
            "a71980692bd855cfdb80782b4f734eba75fada3d"
        ],
        [
            "repeat rewrite Rmult_IZR.",
            "VernacExtend",
            "698ea9ac77424dc4343f685ab3be109c5d91656d"
        ],
        [
            "rewrite (Zpower_nat_powerRZ_absolu radix (Fexp r - (Fexp p + Fexp q))).",
            "VernacExtend",
            "a9656109aeaa96d871a35eb4da5f31eb42180e06"
        ],
        [
            "2: auto with zarith arith.",
            "VernacExtend",
            "8fcbaafe1af658c043fb5f55e5ba3f9011886c95"
        ],
        [
            "rewrite (Zpower_nat_powerRZ_absolu radix (Fexp p + Fexp q + (precision - Fexp r))) .",
            "VernacExtend",
            "59045f7d305043d636c8cf60c7dea20375dcec98"
        ],
        [
            "2: auto with zarith arith.",
            "VernacExtend",
            "8fcbaafe1af658c043fb5f55e5ba3f9011886c95"
        ],
        [
            "cut (radix <> 0%R :>R); [ intros W | auto with real arith zarith ].",
            "VernacExtend",
            "f27b378dfdc46038bb4cdc87b920c85e066ce9ce"
        ],
        [
            "unfold Zminus in |- *.",
            "VernacExtend",
            "7085d4231409167767072da1bd24eb73ce98a683"
        ],
        [
            "repeat rewrite powerRZ_add; try rewrite <- INR_IZR_INZ; auto.",
            "VernacExtend",
            "5722d44a3a80707246efbcc28223fab90d51f19a"
        ],
        [
            "apply trans_eq with ((Fnum p * Fnum q + (- Fnum r)%Z * (powerRZ radix (Fexp r) * powerRZ radix (- (Fexp p + Fexp q)))) * (powerRZ radix (Fexp p) * powerRZ radix (Fexp q)))%R.",
            "VernacExtend",
            "42d54b1562cca5312487e5594048f32bdf23fbda"
        ],
        [
            "ring; ring.",
            "VernacExtend",
            "3d990deb2ab26ec698b95ef8091f8ffcced6959e"
        ],
        [
            "apply trans_eq with ((Fnum p * Fnum q + (- Fnum r)%Z * (powerRZ radix (Fexp r) * powerRZ radix (- (Fexp p + Fexp q)))) * (powerRZ radix (Fexp p) * powerRZ radix (Fexp q) * (powerRZ radix precision * powerRZ radix (- precision))) * (powerRZ radix (Fexp r) * powerRZ radix (- Fexp r)))%R.",
            "VernacExtend",
            "3e38ce79793b37354ef2b7921e5086611ad2b215"
        ],
        [
            "2: ring; ring.",
            "VernacExtend",
            "b0e15f822a1d60a42897daea48015da32bd121b2"
        ],
        [
            "replace (powerRZ radix precision * powerRZ radix (- precision))%R with 1%R.",
            "VernacExtend",
            "6bdbcc3be538570c4d840f8f4412aa2051ec1497"
        ],
        [
            "replace (powerRZ radix (Fexp r) * powerRZ radix (- Fexp r))%R with 1%R; try ring.",
            "VernacExtend",
            "070ae7eb39355925b901e26e7dd6e8c34c78a58e"
        ],
        [
            "rewrite <- powerRZ_add; try rewrite <- INR_IZR_INZ; auto.",
            "VernacExtend",
            "f17f4bd257cc98043e1c004a120bf04f068ae437"
        ],
        [
            "rewrite Zplus_opp_r; simpl in |- *; auto.",
            "VernacExtend",
            "c5816786774cc12c61ea4c353a74383ead117251"
        ],
        [
            "rewrite <- powerRZ_add; try rewrite <- INR_IZR_INZ; auto.",
            "VernacExtend",
            "f17f4bd257cc98043e1c004a120bf04f068ae437"
        ],
        [
            "rewrite Zplus_opp_r; simpl in |- *; auto.",
            "VernacExtend",
            "c5816786774cc12c61ea4c353a74383ead117251"
        ],
        [
            "apply le_IZR; rewrite <- Faux.Rabsolu_Zabs.",
            "VernacExtend",
            "da7a38e81b95600a95dbb863c0b3c3b04f8d8030"
        ],
        [
            "rewrite Rmult_IZR; rewrite plus_IZR.",
            "VernacExtend",
            "b24c6ee1453a2b5d5cd957ab5808a9b62975fb99"
        ],
        [
            "repeat rewrite Rmult_IZR.",
            "VernacExtend",
            "698ea9ac77424dc4343f685ab3be109c5d91656d"
        ],
        [
            "rewrite (Zpower_nat_powerRZ_absolu radix (Fexp p + Fexp q + (precision - Fexp r))) .",
            "VernacExtend",
            "59045f7d305043d636c8cf60c7dea20375dcec98"
        ],
        [
            "2: auto with zarith arith.",
            "VernacExtend",
            "8fcbaafe1af658c043fb5f55e5ba3f9011886c95"
        ],
        [
            "rewrite (Zpower_nat_powerRZ_absolu radix (Fexp r - (Fexp p + Fexp q))).",
            "VernacExtend",
            "a9656109aeaa96d871a35eb4da5f31eb42180e06"
        ],
        [
            "2: auto with zarith arith.",
            "VernacExtend",
            "8fcbaafe1af658c043fb5f55e5ba3f9011886c95"
        ],
        [
            "rewrite powerRZ_add; try rewrite <- INR_IZR_INZ; auto with real arith.",
            "VernacExtend",
            "4e988c374a04bbe5775358e09de70d93432640e0"
        ],
        [
            "replace ((Fnum p * Fnum q + (- Fnum r)%Z * powerRZ radix (Fexp r - (Fexp p + Fexp q))) * (powerRZ radix (Fexp p + Fexp q) * powerRZ radix (precision - Fexp r)))%R with ((Fnum p * Fnum q + (- Fnum r)%Z * powerRZ radix (Fexp r - (Fexp p + Fexp q))) * powerRZ radix (Fexp p + Fexp q) * powerRZ radix (precision - Fexp r))%R; [ idtac | ring; ring ].",
            "VernacExtend",
            "d391ed2244fb1564de4f8b3792a8744721e273e0"
        ],
        [
            "rewrite Rabs_mult.",
            "VernacExtend",
            "0a976c5fce10a63ed58fa2e07dd76a462e6697c3"
        ],
        [
            "rewrite (Rabs_right (powerRZ radix (precision - Fexp r))).",
            "VernacExtend",
            "bdfe821236a219b2d07740ea6723f297919ab7d5"
        ],
        [
            "2: apply Rle_ge; apply powerRZ_le; auto with real zarith.",
            "VernacExtend",
            "b0cdf09fb651315e716716333397e36abdeb95aa"
        ],
        [
            "apply Rmult_le_reg_l with (powerRZ radix (Fexp r - precision)).",
            "VernacExtend",
            "72f9edf6aa2d02e1c70b33aa6e994cf09f8da51a"
        ],
        [
            "apply powerRZ_lt; auto with real arith.",
            "VernacExtend",
            "18f200e01215d20891df67e3797385e5979e8d39"
        ],
        [
            "rewrite Rmult_comm; rewrite Rmult_assoc; rewrite <- powerRZ_add.",
            "VernacExtend",
            "4a5387475b6798273147f3285bc6f6a636ca70bf"
        ],
        [
            "2: auto with zarith arith real.",
            "VernacExtend",
            "7100dfc771493ebff22e2e79981219af30289fa0"
        ],
        [
            "replace (precision - Fexp r + (Fexp r - precision))%Z with 0%Z; [ simpl in |- * | ring ].",
            "VernacExtend",
            "0757b1acbbf10a527fd2200a2549a16256da8719"
        ],
        [
            "apply Rle_trans with (Rabs ((Fnum p * Fnum q + (- Fnum r)%Z * powerRZ radix (Fexp r - (Fexp p + Fexp q))) * powerRZ radix (Fexp p + Fexp q))); [ right; ring | idtac ].",
            "VernacExtend",
            "e6a71353e9f28ed0d332092e9120e206060b97ef"
        ],
        [
            "replace ((Fnum p * Fnum q + (- Fnum r)%Z * powerRZ radix (Fexp r - (Fexp p + Fexp q))) * powerRZ radix (Fexp p + Fexp q))%R with (p * q - r)%R.",
            "VernacExtend",
            "1ea8dd2e01778223dc326548bab3aef0295de225"
        ],
        [
            "2: unfold FtoRradix in |- *; unfold FtoR in |- *; simpl in |- *; unfold Rminus in |- *.",
            "VernacExtend",
            "2f3c12c7cec6dc8a3b8ff187ea8a40a987e028b0"
        ],
        [
            "2: unfold Zminus in |- *; repeat rewrite Ropp_Ropp_IZR.",
            "VernacExtend",
            "49c906814fb42d4c4dcf0766b33c72a67bf9dfe8"
        ],
        [
            "2: repeat rewrite powerRZ_add; auto with real arith.",
            "VernacExtend",
            "f38f0cfbe37bc64c2dfbe545cf194105e4a06da0"
        ],
        [
            "2: apply trans_eq with (Fnum p * Fnum q * (powerRZ radix (Fexp p) * powerRZ radix (Fexp q)) + - Fnum r * (powerRZ radix (Fexp r) * (powerRZ radix (- (Fexp p + Fexp q)) * (powerRZ radix (Fexp p) * powerRZ radix (Fexp q)))))%R; [ idtac | ring ].",
            "VernacExtend",
            "f1afab8e1c72ccb35945b28ab2d2e73731fad8b9"
        ],
        [
            "2: replace (powerRZ radix (- (Fexp p + Fexp q)) * (powerRZ radix (Fexp p) * powerRZ radix (Fexp q)))%R with 1%R; try ring.",
            "VernacExtend",
            "f5415bc833aacd19f3e643375afbc07b49019521"
        ],
        [
            "2: repeat rewrite <- powerRZ_add; auto with real arith.",
            "VernacExtend",
            "71996f226acc0809cefb94768e4a37344727529f"
        ],
        [
            "2: replace (- (Fexp p + Fexp q) + (Fexp p + Fexp q))%Z with 0%Z; simpl in |- *; simpl; ring.",
            "VernacExtend",
            "4ba0de14cb6b7ecd1887c49cdcfc436e75b32aad"
        ],
        [
            "apply Rle_trans with (powerRZ radix (Fexp r) * / 2%nat)%R.",
            "VernacExtend",
            "5b4ac4898824e652770392ac0f2ad2a505271e73"
        ],
        [
            "rewrite <- H10; replace (powerRZ radix (Fexp r)) with (FtoRradix (Float 1%nat (Fexp r))); unfold FtoRradix in |- *; [ idtac | unfold FtoR in |- *; simpl in |- *; ring ].",
            "VernacExtend",
            "b4f558d3b55e13eff982b29f10b757a43055fc0b"
        ],
        [
            "apply ClosestErrorBound with b precision (p * q)%R; auto.",
            "VernacExtend",
            "9799673aafe72de33b150c9a5ad5a6504d3a8e49"
        ],
        [
            "apply (ClosestCompatible b radix (p * q)%R (p * q)%R pq); auto.",
            "VernacExtend",
            "eeb652e9bed56b617ef52b6d1b9d42aba56ef54c"
        ],
        [
            "unfold Zminus in |- *; rewrite powerRZ_add; auto with real arith.",
            "VernacExtend",
            "08c746d820a54f407c892380d697e2274940d992"
        ],
        [
            "rewrite Rmult_assoc; apply Rmult_le_compat_l.",
            "VernacExtend",
            "994d36ecbd521a8caf6578dc1f8ef6ee2f2064df"
        ],
        [
            "apply powerRZ_le; auto with real arith.",
            "VernacExtend",
            "ee0d0982f7bc5a1e7983b73be7143ee7ae41a2ee"
        ],
        [
            "unfold pPred, Zpred in |- *; rewrite pGivesBound.",
            "VernacExtend",
            "f8e7f680c315a91d5c8b98ec79a1d7e5604c4dd5"
        ],
        [
            "rewrite plus_IZR; rewrite Zpower_nat_Z_powerRZ.",
            "VernacExtend",
            "94c8cbe89f852d81737e993e1d0b4dfa3fcffdcb"
        ],
        [
            "replace (powerRZ radix (- precision) * (powerRZ radix precision + (-1)%Z))%R with (1 + - powerRZ radix (- precision))%R.",
            "VernacExtend",
            "b606667ec6b5df1f570dd0d9c56a6cab85736349"
        ],
        [
            "apply Rle_trans with (1 + - powerRZ radix (- 1%nat))%R.",
            "VernacExtend",
            "84b754ac7db17f8ca42a2d70ad80fa27135ba0c3"
        ],
        [
            "simpl in |- *.",
            "VernacExtend",
            "1b93169f4cf876d207c1fab22a2347202ab48d85"
        ],
        [
            "replace (radix * 1)%R with (IZR radix); [ idtac | ring ].",
            "VernacExtend",
            "889200eab3400ff9405bd0f009a8f9df9716697a"
        ],
        [
            "replace (/ (1 + 1))%R with (1 + - / 2)%R.",
            "VernacExtend",
            "b5a6ad5c20f7625fd813c405651367f9ba6a993c"
        ],
        [
            "apply Rplus_le_compat_l; apply Ropp_le_contravar.",
            "VernacExtend",
            "e3f3aeb34e4566e4b902d51e7db3cc78dc70675e"
        ],
        [
            "apply Rle_Rinv; auto with real arith zarith.",
            "VernacExtend",
            "51bacee77ad288beb4e552b321a161de92805134"
        ],
        [
            "replace 2%R with (1 + 1)%R; auto with real arith zarith.",
            "VernacExtend",
            "8db851331d60bd37c8170a5e34f740d9559530a8"
        ],
        [
            "cut ((1 + 1)%R <> 0%R :>R); [ intros | idtac ].",
            "VernacExtend",
            "9d756f8b6dcf5d8b3c2d35350943f34b2fdf2bca"
        ],
        [
            "2: replace 2%R with (INR 2); auto with real arith zarith.",
            "VernacExtend",
            "4e256a662a22ba19cad87c67b311aaa47f0b231d"
        ],
        [
            "apply Rmult_eq_reg_l with (1 + 1)%R; auto.",
            "VernacExtend",
            "a6a6274447953e90c031c26fe96baa96bf4ff15c"
        ],
        [
            "rewrite Rmult_plus_distr_l.",
            "VernacExtend",
            "e243bcfd594d50273783e947b301871dc4efc70c"
        ],
        [
            "simpl.",
            "VernacExtend",
            "1b93169f4cf876d207c1fab22a2347202ab48d85"
        ],
        [
            "rewrite (Rmult_comm (1 + 1) (- / (1 + 1))).",
            "VernacExtend",
            "915eb2639109aa14e4c8ce3ada4d2d0d4a03cbe9"
        ],
        [
            "rewrite Ropp_mult_distr_l_reverse.",
            "VernacExtend",
            "1d14afaf59b9fd90d930059e8d15a46d6c95c450"
        ],
        [
            "rewrite (Rmult_comm (/ (1 + 1)) (1 + 1)).",
            "VernacExtend",
            "ce44bb8ef91662a0e8860dea05536f1865a4c595"
        ],
        [
            "rewrite Rinv_r; auto with real; ring.",
            "VernacExtend",
            "9f2974257aa4dda72f3ec1812191d65ab3519fd7"
        ],
        [
            "apply Rplus_le_compat_l; apply Ropp_le_contravar.",
            "VernacExtend",
            "e3f3aeb34e4566e4b902d51e7db3cc78dc70675e"
        ],
        [
            "apply Rle_powerRZ; auto with real arith zarith.",
            "VernacExtend",
            "cb9c0ca9f7763b75f4bd19c5b69a85308c2ffbf9"
        ],
        [
            "rewrite Rmult_plus_distr_l.",
            "VernacExtend",
            "e243bcfd594d50273783e947b301871dc4efc70c"
        ],
        [
            "rewrite <- powerRZ_add; auto with real arith.",
            "VernacExtend",
            "6495011a75e5b04fd835573d7b129c0b2534bda1"
        ],
        [
            "replace (- precision + precision)%Z with 0%Z; simpl in |- *; ring.",
            "VernacExtend",
            "df7954e433f88474501e8ad7f73e732ff7a70c65"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "End FRoundP.",
            "VernacEndSegment",
            "520cac324389b919df39c8e053eb70486a239da0"
        ]
    ],
    "proofs": [
        {
            "name": "closestLessMultPos",
            "line_nb": 11,
            "steps": [
                {
                    "command": [
                        "intros p r H' H'0.",
                        "VernacExtend",
                        "ef14b7bae52158d1a39ab929a8fdee1f74678e05"
                    ]
                },
                {
                    "command": [
                        "case ClosestMinOrMax with (1 := H'); intros H'3.",
                        "VernacExtend",
                        "d1cc470f65f2681d067c7d26236edc6ead51076d"
                    ]
                },
                {
                    "command": [
                        "apply Rle_trans with r; auto with real.",
                        "VernacExtend",
                        "b9d69bb8a32d2fa4dcfedbb4f9e240535d8d36e6"
                    ]
                },
                {
                    "command": [
                        "apply isMin_inv1 with (1 := H'3).",
                        "VernacExtend",
                        "418eebd2e7471b01a1dbeabc1854b2748062d032"
                    ]
                },
                {
                    "command": [
                        "case (MinEx b radix precision) with (r := r); auto with arith.",
                        "VernacExtend",
                        "8a6b63d6898f5b8893f2a65171ae252d565642ba"
                    ]
                },
                {
                    "command": [
                        "intros min Hmin.",
                        "VernacExtend",
                        "73d8394b5ad09bae07c514617f31868c3ae45249"
                    ]
                },
                {
                    "command": [
                        "apply Rle_trans with (min + p)%R; auto with real.",
                        "VernacExtend",
                        "e89d1f4448da77ce0f7a8f5d64a8d4e375fb0546"
                    ]
                },
                {
                    "command": [
                        "apply Rplus_le_reg_l with (r := (- p)%R).",
                        "VernacExtend",
                        "be7234a096ec846f9abe774fd240c2749b394eee"
                    ]
                },
                {
                    "command": [
                        "replace (- p + p)%R with 0%R; [ idtac | ring ].",
                        "VernacExtend",
                        "6b062f715c7c9b7c48d86cbe3d156ca83b564d9a"
                    ]
                },
                {
                    "command": [
                        "replace (- p + (min + p))%R with (FtoRradix min); [ apply (RleMinR0 b radix precision) with (r := r); auto | ring ].",
                        "VernacExtend",
                        "26cdb154b8cf0d0dc5259bd6fde5bfe1a71851ea"
                    ]
                },
                {
                    "command": [
                        "apply Rplus_le_reg_l with (r := (- r)%R).",
                        "VernacExtend",
                        "95f1f179707b13bde1d947e8d8aa4e6aa2e17fc2"
                    ]
                },
                {
                    "command": [
                        "apply Rplus_le_reg_l with (r := (- min)%R).",
                        "VernacExtend",
                        "ce59600835cf3e32360ceb0b483ba6cb366f9e4e"
                    ]
                },
                {
                    "command": [
                        "replace (- min + (- r + (min + p)))%R with (Rabs (p - r)).",
                        "VernacExtend",
                        "0d1a6cbead566b0ca9c36539a5c84b809ef62f40"
                    ]
                },
                {
                    "command": [
                        "replace (- min + (- r + 2%nat * r))%R with (Rabs (min - r)).",
                        "VernacExtend",
                        "f4ada47e72163f4894d95585012ad543f7e8c706"
                    ]
                },
                {
                    "command": [
                        "case H'.",
                        "VernacExtend",
                        "59f58feee27b0b33473890c47947a750059972d7"
                    ]
                },
                {
                    "command": [
                        "intros H'1 H'2; apply H'2; auto.",
                        "VernacExtend",
                        "527f1ea458e0c9e01a06cb12858ed45782b6f140"
                    ]
                },
                {
                    "command": [
                        "case Hmin; auto.",
                        "VernacExtend",
                        "aac4ac53c82ab54c08d98d6e682decbdec3cb5b4"
                    ]
                },
                {
                    "command": [
                        "rewrite Faux.Rabsolu_left1; simpl in |- *.",
                        "VernacExtend",
                        "781db12f45a41fefcb3d588030682c8ac941dfc7"
                    ]
                },
                {
                    "command": [
                        "ring; auto.",
                        "VernacExtend",
                        "0cc84a3f5ba99e5b72bc330e6ea7654dad1731a1"
                    ]
                },
                {
                    "command": [
                        "apply Rle_minus; apply isMin_inv1 with (1 := Hmin).",
                        "VernacExtend",
                        "90658905ac5bdf41baacd3b45da0e29480b56c6f"
                    ]
                },
                {
                    "command": [
                        "rewrite Rabs_right; simpl in |- *.",
                        "VernacExtend",
                        "4f6aa032d10af2f81c1ce58470b7936021a928cb"
                    ]
                },
                {
                    "command": [
                        "ring; auto.",
                        "VernacExtend",
                        "0cc84a3f5ba99e5b72bc330e6ea7654dad1731a1"
                    ]
                },
                {
                    "command": [
                        "apply Rle_ge; apply Rplus_le_reg_l with (r := r).",
                        "VernacExtend",
                        "8a70da3a8c3283051bbc85ee1b69a8ff1b4a3420"
                    ]
                },
                {
                    "command": [
                        "replace (r + 0)%R with r; [ idtac | ring ].",
                        "VernacExtend",
                        "c9d152df0a4a92b5fb99f8f47b291a71e9be45c9"
                    ]
                },
                {
                    "command": [
                        "replace (r + (p - r))%R with (FtoRradix p); [ apply isMax_inv1 with (1 := H'3) | ring ].",
                        "VernacExtend",
                        "e14e1330de564cfdd7a5b7d019e31ce084b23256"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "closestLessMultNeg",
            "line_nb": 38,
            "steps": [
                {
                    "command": [
                        "intros p r H' H'0.",
                        "VernacExtend",
                        "ef14b7bae52158d1a39ab929a8fdee1f74678e05"
                    ]
                },
                {
                    "command": [
                        "replace (2%nat * r)%R with (- (2%nat * - r))%R; [ idtac | ring ].",
                        "VernacExtend",
                        "31c2232c37839a4005240286d55067f247397356"
                    ]
                },
                {
                    "command": [
                        "replace (FtoRradix p) with (- - p)%R; [ unfold FtoRradix in |- *; rewrite <- Fopp_correct | ring ].",
                        "VernacExtend",
                        "9c8f508998abc0dbfff70cbb1ad7047d83bbafd4"
                    ]
                },
                {
                    "command": [
                        "apply Ropp_le_contravar.",
                        "VernacExtend",
                        "ac8d32b190d111aa8834547674121bcf3bb8a0ed"
                    ]
                },
                {
                    "command": [
                        "apply closestLessMultPos; auto.",
                        "VernacExtend",
                        "a664c9f8123662fc47cf0f83ebbcd16caaa4e32c"
                    ]
                },
                {
                    "command": [
                        "apply ClosestOpp; auto.",
                        "VernacExtend",
                        "fdb10086de8928309670334b477ceba716a1f016"
                    ]
                },
                {
                    "command": [
                        "replace 0%R with (-0)%R; [ auto with real | ring ].",
                        "VernacExtend",
                        "d912fa52b9c31b401c2b492603248b9eedba7a89"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "closestLessMultAbs",
            "line_nb": 47,
            "steps": [
                {
                    "command": [
                        "intros p r H'; case (Rle_or_lt 0 r); intros H'1.",
                        "VernacExtend",
                        "646cb7351b54bd22d14f6955d66dca0308c9310d"
                    ]
                },
                {
                    "command": [
                        "repeat rewrite Rabs_right; auto with real.",
                        "VernacExtend",
                        "acbc524ee08d51df0747101f806570b23d1c2cd0"
                    ]
                },
                {
                    "command": [
                        "apply closestLessMultPos; auto.",
                        "VernacExtend",
                        "a664c9f8123662fc47cf0f83ebbcd16caaa4e32c"
                    ]
                },
                {
                    "command": [
                        "apply Rle_ge; apply (RleRoundedR0 b radix precision) with (P := Closest b radix) (r := r); auto.",
                        "VernacExtend",
                        "2371d80f026254a0ac540d10a0dd0bf4a82c3008"
                    ]
                },
                {
                    "command": [
                        "apply ClosestRoundedModeP with (precision := precision); auto.",
                        "VernacExtend",
                        "eb6d3ee24dd119beb307169797f1cdd709b3ec7c"
                    ]
                },
                {
                    "command": [
                        "repeat rewrite Faux.Rabsolu_left1; auto.",
                        "VernacExtend",
                        "e11c24e8ffe43271673891ae0aeb17a8a197300c"
                    ]
                },
                {
                    "command": [
                        "replace (2%nat * - r)%R with (- (2%nat * r))%R; [ apply Ropp_le_contravar | ring ].",
                        "VernacExtend",
                        "5c7c8d585aaa3a55548cdf097483156666dd827c"
                    ]
                },
                {
                    "command": [
                        "apply closestLessMultNeg; auto.",
                        "VernacExtend",
                        "29f201de7ef3c941f86c96ce7c31ac6aa01aa8c3"
                    ]
                },
                {
                    "command": [
                        "apply Rlt_le; auto.",
                        "VernacExtend",
                        "4003e3e1c449ee89cad9e953d0a562db8235648c"
                    ]
                },
                {
                    "command": [
                        "apply Rlt_le; auto.",
                        "VernacExtend",
                        "4003e3e1c449ee89cad9e953d0a562db8235648c"
                    ]
                },
                {
                    "command": [
                        "apply (RleRoundedLessR0 b radix precision) with (P := Closest b radix) (r := r); auto.",
                        "VernacExtend",
                        "dc0edc9ba4d2cca1f6ac4c4595febcec67b189be"
                    ]
                },
                {
                    "command": [
                        "apply ClosestRoundedModeP with (precision := precision); auto.",
                        "VernacExtend",
                        "eb6d3ee24dd119beb307169797f1cdd709b3ec7c"
                    ]
                },
                {
                    "command": [
                        "apply Rlt_le; auto.",
                        "VernacExtend",
                        "4003e3e1c449ee89cad9e953d0a562db8235648c"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "errorBoundedMultClosest_aux",
            "line_nb": 62,
            "steps": [
                {
                    "command": [
                        "intros p q pq Hp Hq H1 H2 H3.",
                        "VernacExtend",
                        "05769e57ab31f57fc1ed7783c6bc3930dc62e280"
                    ]
                },
                {
                    "command": [
                        "cut (RoundedModeP b radix (Closest b radix)); [ intros H4 | apply ClosestRoundedModeP with precision; auto ].",
                        "VernacExtend",
                        "0399c545d9391811c406cd1cbb5c28c8b20ad38f"
                    ]
                },
                {
                    "command": [
                        "lapply (errorBoundedMultExp b radix precision); [ intros H'2; lapply H'2; [ intros H'3; lapply H'3; [ intros H'4; lapply (H'4 (Closest b radix)); [ intros H'7; elim (H'7 p q pq); [ intros r E; elim E; intros s E0; elim E0; intros H'15 H'16; elim H'16; intros H'17 H'18; elim H'18; intros H'19 H'20; elim H'20; intros H'21 H'22; elim H'22; intros H'23 H'24; elim H'24; intros H'25 H'26; clear H'24 H'22 H'20 H'18 H'16 E0 E H'3 H'2 | clear H'3 H'2 | clear H'3 H'2 | clear H'3 H'2 | clear H'3 H'2 ] | clear H'3 H'2 ] | clear H'3 H'2 ] | clear H'2 ] | idtac]; auto.",
                        "VernacExtend",
                        "023cfcd9ea270d33ab516d9d2c43e3c8ceacdfdf"
                    ]
                },
                {
                    "command": [
                        "exists (Fnormalize radix b precision r); exists s.",
                        "VernacExtend",
                        "28e7728d7ae64d8797c94dfa5998196a0efd5370"
                    ]
                },
                {
                    "command": [
                        "cut (Fbounded b (Fnormalize radix b precision r)); [ intros H5 | apply FnormalizeBounded; auto with arith ].",
                        "VernacExtend",
                        "18e0bd711feb4a3682fec8759254570c2282d47f"
                    ]
                },
                {
                    "command": [
                        "split; [ apply FnormalizeCanonic; auto with arith | idtac ].",
                        "VernacExtend",
                        "22fe30dc6f3169c9cc3695517abc8a00d1514bee"
                    ]
                },
                {
                    "command": [
                        "repeat (split; auto).",
                        "VernacExtend",
                        "fbc5463ee8164c7d7a0414a82c6ea4aa4f8c6b04"
                    ]
                },
                {
                    "command": [
                        "unfold FtoRradix in |- *; rewrite <- H'19; unfold FtoRradix in |- *; apply FnormalizeCorrect; auto.",
                        "VernacExtend",
                        "a7ef2e76e76d78f7dfc53fed3ccc8ea24144450a"
                    ]
                },
                {
                    "command": [
                        "unfold FtoRradix in |- *; rewrite FnormalizeCorrect; auto with arith.",
                        "VernacExtend",
                        "fc18b74f3e22660d884799845fe58892a28774a0"
                    ]
                },
                {
                    "command": [
                        "apply Zlt_le_weak.",
                        "VernacExtend",
                        "77c804797cd604de1af1fd78f914f426e7c6ce85"
                    ]
                },
                {
                    "command": [
                        "apply RoundedModeErrorExpStrict with b radix precision (Closest b radix) (p * q)%R; auto with arith.",
                        "VernacExtend",
                        "6eaf6808075a594bc6061373e9a1124abb01dfe0"
                    ]
                },
                {
                    "command": [
                        "generalize ClosestCompatible; unfold CompatibleP in |- *; intros H6.",
                        "VernacExtend",
                        "bee17efca74c7aa01fd97dc22c14bfb8391d5ac8"
                    ]
                },
                {
                    "command": [
                        "generalize (H6 b radix (FtoRradix p * FtoRradix q)%R (FtoRradix p * FtoRradix q)%R pq); intros H9; apply H9; auto.",
                        "VernacExtend",
                        "332333eb2abe729424ba19a3054464c54df3582e"
                    ]
                },
                {
                    "command": [
                        "rewrite FnormalizeCorrect; auto with real arith.",
                        "VernacExtend",
                        "43e78e7d57e0ebf33f2bd3bc1bb04dd42b807a65"
                    ]
                },
                {
                    "command": [
                        "rewrite FnormalizeCorrect; auto with real arith.",
                        "VernacExtend",
                        "43e78e7d57e0ebf33f2bd3bc1bb04dd42b807a65"
                    ]
                },
                {
                    "command": [
                        "rewrite H'21; rewrite H'19; auto.",
                        "VernacExtend",
                        "f8e5db36c65a16fa82559c2562a1aa5195c0c10b"
                    ]
                },
                {
                    "command": [
                        "apply Zle_trans with (Fexp r); auto.",
                        "VernacExtend",
                        "f07c9d5fe22031c7a1ec9892b45413cfeb533833"
                    ]
                },
                {
                    "command": [
                        "apply FcanonicLeastExp with radix b precision; auto with arith.",
                        "VernacExtend",
                        "7904d90ed0be63556cb1f42e3fc392554080a578"
                    ]
                },
                {
                    "command": [
                        "rewrite FnormalizeCorrect; auto with real arith.",
                        "VernacExtend",
                        "43e78e7d57e0ebf33f2bd3bc1bb04dd42b807a65"
                    ]
                },
                {
                    "command": [
                        "apply FnormalizeCanonic; auto with arith.",
                        "VernacExtend",
                        "38090fba049d672f91a024edd56166758e23d7ca"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        }
    ]
}