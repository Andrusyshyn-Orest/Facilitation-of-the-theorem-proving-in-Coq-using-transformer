{
    "filename": "Fmin.v",
    "coq_project": "float",
    "vernac_cmds": [
        [
            "Require Export Zenum.",
            "VernacRequire",
            "36baf76b4619fef8c967a52ed62a4a047040b46e"
        ],
        [
            "Require Export FPred.",
            "VernacRequire",
            "ab92f67fae75e381098a2a25557da859c566c913"
        ],
        [
            "Section FMinMax.",
            "VernacBeginSection",
            "6ff1942269db79bd4b437a009224c7802f8bd123"
        ],
        [
            "Variable b : Fbound.",
            "VernacAssumption",
            "17a11c003f49f819b8cb809f61b140702916486d"
        ],
        [
            "Variable radix : Z.",
            "VernacAssumption",
            "2349b77d134e0c9bb013a8bdca0020ca16fc023b"
        ],
        [
            "Variable precision : nat.",
            "VernacAssumption",
            "2235bc83b7ebf4cbe373b5fa3b4f3c643d454130"
        ],
        [
            "Let FtoRradix := FtoR radix.",
            "VernacDefinition",
            "5aa29a9595c6e9e03b28c6d232299552ec761ad7"
        ],
        [
            "Coercion FtoRradix : float >-> R.",
            "VernacCoercion",
            "028c338fbad0cd7087bf0b6e1e412562a515c140"
        ],
        [
            "Hypothesis radixMoreThanOne : (1 < radix)%Z.",
            "VernacAssumption",
            "f4d3774b2275f4c4c3af941091d4d99f9a2129aa"
        ],
        [
            "Let radixMoreThanZERO := Zlt_1_O _ (Zlt_le_weak _ _ radixMoreThanOne).",
            "VernacDefinition",
            "b73ccff345a4fc730c8134dcd05adb7f1928fae7"
        ],
        [
            "Hint Resolve radixMoreThanZERO: zarith.",
            "VernacHints",
            "5a4a320eb610749621ef38850390d7141dc0d330"
        ],
        [
            "Hypothesis precisionNotZero : precision <> 0.",
            "VernacAssumption",
            "9ba21dacb7498679bf18b5f2c3b12c5f92dc3727"
        ],
        [
            "Hypothesis pGivesBound : Zpos (vNum b) = Zpower_nat radix precision.",
            "VernacAssumption",
            "d558f967d87d2a42d14158ac115b10c6f5358430"
        ],
        [
            "Definition boundNat (n : nat) := Float 1%nat (digit radix n).",
            "VernacDefinition",
            "8dad5ebbba42071ed791028454a201414eff1cff"
        ],
        [
            "Theorem boundNatCorrect : forall n : nat, (n < boundNat n)%R.",
            "VernacStartTheoremProof",
            "ef402023720359726997c94bd719d56068e97bd7"
        ],
        [
            "intros n; unfold FtoRradix, FtoR, boundNat in |- *; simpl in |- *.",
            "VernacExtend",
            "6f748e24d15b13117af8487be4e54ff9fb168aea"
        ],
        [
            "rewrite Rmult_1_l.",
            "VernacExtend",
            "1ba58092cf1ca2fa8155dfa9c64894290b0f39df"
        ],
        [
            "rewrite <- Zpower_nat_Z_powerRZ; auto with real zarith.",
            "VernacExtend",
            "da84cb5309b0e36832700507e8730fdd6f64c1ec"
        ],
        [
            "rewrite INR_IZR_INZ; auto with real zarith.",
            "VernacExtend",
            "f051a18bcefbbe00a543b27f9f26dfc52f8f1833"
        ],
        [
            "apply Rle_lt_trans with (Zabs n); [rewrite (Zabs_eq (Z_of_nat n))|idtac];auto with real zarith.",
            "VernacExtend",
            "e66c29dae7e85bb4dac7f388257693ac07aa39fa"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Theorem boundBoundNat : forall n : nat, Fbounded b (boundNat n).",
            "VernacStartTheoremProof",
            "2d0174ae3c7a67a1d94890d51113636fb9fd47df"
        ],
        [
            "intros n; repeat split; unfold boundNat in |- *; simpl in |- *; auto with zarith.",
            "VernacExtend",
            "1db6cdf5036d3f75092b4535323e11c0a8c1d30a"
        ],
        [
            "apply vNumbMoreThanOne with (radix := radix) (precision := precision); auto with zarith.",
            "VernacExtend",
            "c023bfd7df396d3147c21a9a7a1d343b5174973a"
        ],
        [
            "apply Zle_trans with 0%Z;[case (dExp b)|idtac]; auto with zarith.",
            "VernacExtend",
            "0bb97d1cff9ba145b648f2e6a6b0a9b269e3ce76"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Definition boundR (r : R) := boundNat (Zabs_nat (up (Rabs r))).",
            "VernacDefinition",
            "b9f037bedc7e9b2b9dbf7cfe2294601149ee1080"
        ],
        [
            "Theorem boundRCorrect1 : forall r : R, (r < boundR r)%R.",
            "VernacStartTheoremProof",
            "f1d53d4f76fe8e68a825de6d67e4ae26832a2f87"
        ],
        [
            "intros r; case (Rle_or_lt r 0); intros H'.",
            "VernacExtend",
            "0c18ff62339c2a84d16a484da5f94369337b2638"
        ],
        [
            "apply Rle_lt_trans with (1 := H').",
            "VernacExtend",
            "f88cabda3558f47a39b41a7259d0a026fb6809e5"
        ],
        [
            "unfold boundR, boundNat, FtoRradix, FtoR in |- *; simpl in |- *; auto with real.",
            "VernacExtend",
            "cae9543fd5adefd42dfb0ffa2838730d15d6218d"
        ],
        [
            "rewrite Rmult_1_l; auto with real zarith.",
            "VernacExtend",
            "dc11b7012cf839706654216065f1a29d17d6880d"
        ],
        [
            "apply Rlt_trans with (2 := boundNatCorrect (Zabs_nat (up (Rabs r)))).",
            "VernacExtend",
            "3f6fcc9dc5ab705eca93e35e4b4a0f4cd2963486"
        ],
        [
            "replace (Rabs r) with r; auto with real.",
            "VernacExtend",
            "e3e978df3f8b2b06ba5bb57d0c701f32c0eedc08"
        ],
        [
            "apply Rlt_le_trans with (r2 := IZR (up r)); auto with real zarith.",
            "VernacExtend",
            "5827bfabbaa474f7af7189f2f305318b74d3d1b5"
        ],
        [
            "case (archimed r); auto.",
            "VernacExtend",
            "35d72750998e0a07c7615da25fca743295ad3786"
        ],
        [
            "rewrite INR_IZR_INZ; auto with real zarith.",
            "VernacExtend",
            "f051a18bcefbbe00a543b27f9f26dfc52f8f1833"
        ],
        [
            "unfold Rabs in |- *; case (Rcase_abs r); auto with real.",
            "VernacExtend",
            "edf3b8530ffb9234b8d0702c1544ef952597c32f"
        ],
        [
            "intros H'0; Contradict H'0; auto with real.",
            "VernacExtend",
            "ec9b9ed8334bdcdad4219636b98b40e70298cf25"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Theorem boundRrOpp : forall r : R, boundR r = boundR (- r).",
            "VernacStartTheoremProof",
            "783ca453a2a6648e89434e2196a60b157ec9237d"
        ],
        [
            "intros R; unfold boundR in |- *.",
            "VernacExtend",
            "a3f172cedfbb3ba6898514c9177b9f16610f7704"
        ],
        [
            "rewrite Rabs_Ropp; auto.",
            "VernacExtend",
            "ed3e1274bf4ec729c896bed1e0823ab3ad3740b1"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Theorem boundRCorrect2 : forall r : R, (Fopp (boundR r) < r)%R.",
            "VernacStartTheoremProof",
            "8bde9f15a72dae3f111f3bf6309980c7e0a339c4"
        ],
        [
            "intros r; case (Rle_or_lt r 0); intros H'.",
            "VernacExtend",
            "0c18ff62339c2a84d16a484da5f94369337b2638"
        ],
        [
            "rewrite boundRrOpp.",
            "VernacExtend",
            "6440b02de342fbb92994194b7d5bd7f59c5dfacf"
        ],
        [
            "pattern r at 2 in |- *; rewrite <- (Ropp_involutive r).",
            "VernacExtend",
            "a10927f8c549f351fd5d7ecacbae84fdd7954326"
        ],
        [
            "unfold FtoRradix in |- *; rewrite Fopp_correct.",
            "VernacExtend",
            "c3c7ad16a924a974f39fb2584a800e7199b0444e"
        ],
        [
            "apply Ropp_lt_contravar; apply boundRCorrect1; auto.",
            "VernacExtend",
            "bf76dd3d55ec0be874451f7a3c429a13fc2e7f38"
        ],
        [
            "apply Rle_lt_trans with 0%R; auto.",
            "VernacExtend",
            "bb99babbe7786d31e8d10c10d1a402bfc9128527"
        ],
        [
            "replace 0%R with (-0)%R; auto with real.",
            "VernacExtend",
            "ad9a3c816968bd85bd0ee7d9d06b032f07b0b811"
        ],
        [
            "unfold FtoRradix in |- *; rewrite Fopp_correct.",
            "VernacExtend",
            "c3c7ad16a924a974f39fb2584a800e7199b0444e"
        ],
        [
            "apply Ropp_le_contravar.",
            "VernacExtend",
            "ac8d32b190d111aa8834547674121bcf3bb8a0ed"
        ],
        [
            "unfold boundR, boundNat, FtoRradix, FtoR in |- *; simpl in |- *; auto with real zarith.",
            "VernacExtend",
            "45dce45aa41b775d33d56f5fe93ac5c772336115"
        ],
        [
            "rewrite Rmult_1_l; apply Rlt_le; auto with real zarith arith.",
            "VernacExtend",
            "108887184e648488e131326f6b0f50098384d9fb"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Definition mBFloat (p : R) := map (fun p : Z * Z => Float (fst p) (snd p)) (mProd Z Z (Z * Z) (mZlist (- pPred (vNum b)) (pPred (vNum b))) (mZlist (- dExp b) (Fexp (boundR p)))).",
            "VernacDefinition",
            "e4a2f14200856ff4d8bce67e18ca2bc8021bb0a7"
        ],
        [
            "Theorem mBFadic_correct1 : forall (r : R) (q : float), ~ is_Fzero q -> (Fopp (boundR r) < q)%R -> (q < boundR r)%R -> Fbounded b q -> In q (mBFloat r).",
            "VernacStartTheoremProof",
            "bc634e05cebeae30e19b1fa06500a1ab9ee06026"
        ],
        [
            "intros r q.",
            "VernacExtend",
            "5104908694ace0f2a281c43323151e9344920cf7"
        ],
        [
            "case (Zle_or_lt (Fexp (boundR r)) (Fexp q)); intros H'.",
            "VernacExtend",
            "da722e099142b13b4c35ea9ace17db3a57555441"
        ],
        [
            "intros H'0 H'1 H'2 H'3; case H'0.",
            "VernacExtend",
            "4dae09876251ae2015f5a0b9f2255260235194c9"
        ],
        [
            "apply is_Fzero_rep2 with (radix := radix); auto.",
            "VernacExtend",
            "7afb177b35a132d9f4718d431d0e7c5582c48a5a"
        ],
        [
            "rewrite <- FshiftCorrect with (n := Zabs_nat (Fexp q - Fexp (boundR r))) (x := q); auto with arith.",
            "VernacExtend",
            "f267d1034fc54fefd72c2fdb0946b18389afcba3"
        ],
        [
            "apply is_Fzero_rep1 with (radix := radix).",
            "VernacExtend",
            "9335b0d9b33c0a02b6ea8b51109dfda8354a9bf2"
        ],
        [
            "unfold is_Fzero in |- *.",
            "VernacExtend",
            "8fe537e66e75bc61729cb05045a50e709911e2a2"
        ],
        [
            "cut (forall p : Z, (- 1%nat < p)%Z -> (p < 1%nat)%Z -> p = 0%Z); [ intros tmp; apply tmp | idtac ].",
            "VernacExtend",
            "8f67daacf71c56f6a97a77cc3b2bbe932acebba6"
        ],
        [
            "replace (- 1%nat)%Z with (Fnum (Fopp (boundR r))).",
            "VernacExtend",
            "c7e4e01407088d4a08acffe273cdfeeb41d1f26a"
        ],
        [
            "apply Rlt_Fexp_eq_Zlt with (radix := radix); auto with real zarith.",
            "VernacExtend",
            "29c348719ef70659c2d7ec4c73b01f044b263d42"
        ],
        [
            "rewrite FshiftCorrect; auto.",
            "VernacExtend",
            "a32fc58b728c0efc747f4947893df95ea3a250c0"
        ],
        [
            "unfold Fshift in |- *; simpl in |- *.",
            "VernacExtend",
            "bc2226e4b5a4ef5bbaea414d285c81f30a1eb932"
        ],
        [
            "rewrite (fun x y => inj_abs (x - y)); auto with zarith.",
            "VernacExtend",
            "c88659bb0519118054e9e0b1cdf9eb5fdbb91b23"
        ],
        [
            "simpl in |- *; auto.",
            "VernacExtend",
            "9b631374b1d3067f703fd99c5dc6e1e5c8405957"
        ],
        [
            "replace (Z_of_nat 1) with (Fnum (boundR r)).",
            "VernacExtend",
            "bf29dda96db088c16d047540fcbcdb0cb80ed1e1"
        ],
        [
            "apply Rlt_Fexp_eq_Zlt with (radix := radix); auto with zarith.",
            "VernacExtend",
            "2012c168cda168a8a6d7df57e3070cd563cc67d0"
        ],
        [
            "rewrite FshiftCorrect; auto.",
            "VernacExtend",
            "a32fc58b728c0efc747f4947893df95ea3a250c0"
        ],
        [
            "unfold Fshift in |- *; simpl in |- *.",
            "VernacExtend",
            "bc2226e4b5a4ef5bbaea414d285c81f30a1eb932"
        ],
        [
            "rewrite inj_abs; auto with zarith.",
            "VernacExtend",
            "d832d70d6f4177fa3d020760f1ccab18c59abdc1"
        ],
        [
            "generalize H'; simpl in |- *; auto with zarith.",
            "VernacExtend",
            "5925fc82500f3b8c50419433ba95603e51b3bca8"
        ],
        [
            "simpl in |- *; auto.",
            "VernacExtend",
            "9b631374b1d3067f703fd99c5dc6e1e5c8405957"
        ],
        [
            "intros p0; case p0; simpl in |- *; auto with zarith.",
            "VernacExtend",
            "4063f19a3e594999022bf3a378b817f87f60faaf"
        ],
        [
            "intros H'0 H'1 H'2 H'3; unfold mBFloat in |- *.",
            "VernacExtend",
            "25c72355d486aa4241a4163fa6c1cbab6cd1b37c"
        ],
        [
            "replace q with ((fun p : Z * Z => Float (fst p) (snd p)) (Fnum q, Fexp q)).",
            "VernacExtend",
            "656f8782f923007b5d91eb867d230984acdbe712"
        ],
        [
            "apply in_map with (f := fun p : Z * Z => Float (fst p) (snd p)); auto.",
            "VernacExtend",
            "b903c9e5ad7ffcd63bb277e2437e178381e5660f"
        ],
        [
            "apply mProd_correct; auto.",
            "VernacExtend",
            "eaa974a13efcb911f9b074ea3cbb614348d202ae"
        ],
        [
            "apply mZlist_correct; auto with float.",
            "VernacExtend",
            "8d420d11f5e0f8dfef6eaf29596b6ea0782db158"
        ],
        [
            "apply Zle_Zabs_inv1; auto with float.",
            "VernacExtend",
            "dc30d044e5ccc0d380ccb8773e9c23810205e57a"
        ],
        [
            "unfold pPred in |- *; apply Zle_Zpred; auto with float.",
            "VernacExtend",
            "d94d852165b44e2cc96506aa42859931541d7757"
        ],
        [
            "apply Zle_Zabs_inv2; auto with float.",
            "VernacExtend",
            "667402bb2ce0dc70a2ee5e0ea23d620315d41716"
        ],
        [
            "unfold pPred in |- *; apply Zle_Zpred; auto with float.",
            "VernacExtend",
            "d94d852165b44e2cc96506aa42859931541d7757"
        ],
        [
            "apply mZlist_correct; auto with float.",
            "VernacExtend",
            "8d420d11f5e0f8dfef6eaf29596b6ea0782db158"
        ],
        [
            "auto with zarith.",
            "VernacExtend",
            "23f42fd3236dcece4a40b3a666dce57fea69a9c0"
        ],
        [
            "case q; simpl in |- *; auto with zarith.",
            "VernacExtend",
            "9f768c32c12a81e05203c1cb1428ab55a5676821"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Theorem mBFadic_correct2 : forall r : R, In (boundR r) (mBFloat r).",
            "VernacStartTheoremProof",
            "87bb4a59aec1035c59cf2615876256955a4a6795"
        ],
        [
            "intros r; unfold mBFloat in |- *.",
            "VernacExtend",
            "1989f95614f88190545569f721b0231b01560abf"
        ],
        [
            "replace (boundR r) with ((fun p : Z * Z => Float (fst p) (snd p)) (Fnum (boundR r), Fexp (boundR r))).",
            "VernacExtend",
            "421f96f8eb261dac3d92b1834c4b0103ce5f2c17"
        ],
        [
            "apply in_map with (f := fun p : Z * Z => Float (fst p) (snd p)); auto.",
            "VernacExtend",
            "b903c9e5ad7ffcd63bb277e2437e178381e5660f"
        ],
        [
            "apply mProd_correct; auto.",
            "VernacExtend",
            "eaa974a13efcb911f9b074ea3cbb614348d202ae"
        ],
        [
            "apply mZlist_correct; auto.",
            "VernacExtend",
            "efeb263b1a33922a78d81718915c4b96cdbc072d"
        ],
        [
            "unfold boundR, boundNat in |- *; simpl in |- *; auto with zarith.",
            "VernacExtend",
            "60bf41d90d662797b8677ac3efa4899176146386"
        ],
        [
            "apply Zle_trans with (- (0))%Z; auto with zarith.",
            "VernacExtend",
            "a31ffa08cf78a0b8e230c3d25b3d16528cc44041"
        ],
        [
            "apply Zle_Zopp; unfold pPred in |- *; apply Zle_Zpred; simpl in |- *.",
            "VernacExtend",
            "d7e07e530006d5f7123fb9e8ea6df58d728b4352"
        ],
        [
            "apply Zlt_trans with 1%Z; auto with zarith.",
            "VernacExtend",
            "31fe79dd229b0a596cccb8b23d752848c7e28aef"
        ],
        [
            "apply vNumbMoreThanOne with (3 := pGivesBound); auto.",
            "VernacExtend",
            "ca91faaa3c6fafb742371af78d2dd100daad1f6b"
        ],
        [
            "unfold boundR, boundNat in |- *; simpl in |- *; auto with zarith.",
            "VernacExtend",
            "60bf41d90d662797b8677ac3efa4899176146386"
        ],
        [
            "unfold pPred in |- *; apply Zle_Zpred; simpl in |- *.",
            "VernacExtend",
            "f5f15a4df0e1c7ae31241d132f4c353720980490"
        ],
        [
            "unfold boundR, boundNat in |- *; simpl in |- *; auto with zarith.",
            "VernacExtend",
            "60bf41d90d662797b8677ac3efa4899176146386"
        ],
        [
            "apply vNumbMoreThanOne with (3 := pGivesBound); auto.",
            "VernacExtend",
            "ca91faaa3c6fafb742371af78d2dd100daad1f6b"
        ],
        [
            "apply mZlist_correct; auto.",
            "VernacExtend",
            "efeb263b1a33922a78d81718915c4b96cdbc072d"
        ],
        [
            "unfold boundR, boundNat in |- *; simpl in |- *; auto with zarith.",
            "VernacExtend",
            "60bf41d90d662797b8677ac3efa4899176146386"
        ],
        [
            "apply Zle_trans with 0%Z; auto with zarith arith.",
            "VernacExtend",
            "740687e11faddea4e20e2d1d6570ff6777850f31"
        ],
        [
            "case (dExp b); auto with zarith.",
            "VernacExtend",
            "1550cae20c90f23304536260367db5457d74774a"
        ],
        [
            "case (boundR r); simpl in |- *; auto with zarith.",
            "VernacExtend",
            "314a9e909817a16e4a2577cad0205a36a13a14c1"
        ],
        [
            "case (boundR r); simpl in |- *; auto with zarith.",
            "VernacExtend",
            "314a9e909817a16e4a2577cad0205a36a13a14c1"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Theorem mBFadic_correct3 : forall r : R, In (Fopp (boundR r)) (mBFloat r).",
            "VernacStartTheoremProof",
            "7246e4549012a981dde27948fbd25dd7ee689fe7"
        ],
        [
            "intros r; unfold mBFloat in |- *.",
            "VernacExtend",
            "1989f95614f88190545569f721b0231b01560abf"
        ],
        [
            "replace (Fopp (boundR r)) with ((fun p : Z * Z => Float (fst p) (snd p)) (Fnum (Fopp (boundR r)), Fexp (Fopp (boundR r)))).",
            "VernacExtend",
            "0ac9fa83075c3d088f592db5872acb89c54e2266"
        ],
        [
            "apply in_map with (f := fun p : Z * Z => Float (fst p) (snd p)); auto.",
            "VernacExtend",
            "b903c9e5ad7ffcd63bb277e2437e178381e5660f"
        ],
        [
            "apply mProd_correct; auto.",
            "VernacExtend",
            "eaa974a13efcb911f9b074ea3cbb614348d202ae"
        ],
        [
            "apply mZlist_correct; auto.",
            "VernacExtend",
            "efeb263b1a33922a78d81718915c4b96cdbc072d"
        ],
        [
            "unfold boundR, boundNat in |- *; simpl in |- *; auto with zarith.",
            "VernacExtend",
            "60bf41d90d662797b8677ac3efa4899176146386"
        ],
        [
            "replace (-1)%Z with (- Z_of_nat 1)%Z; auto with zarith.",
            "VernacExtend",
            "7834cd561214a82ff4a4d13d69fb01f7fc441d43"
        ],
        [
            "apply Zle_Zopp.",
            "VernacExtend",
            "4116fffd3d82e798294ccbceb07ce04df95b160a"
        ],
        [
            "unfold pPred in |- *; apply Zle_Zpred; simpl in |- *.",
            "VernacExtend",
            "f5f15a4df0e1c7ae31241d132f4c353720980490"
        ],
        [
            "apply (vNumbMoreThanOne radix) with (precision := precision); auto with zarith.",
            "VernacExtend",
            "c29f7cde7313a0159f5e6e723b15563e2dc77df2"
        ],
        [
            "unfold pPred in |- *; apply Zle_Zpred; simpl in |- *.",
            "VernacExtend",
            "f5f15a4df0e1c7ae31241d132f4c353720980490"
        ],
        [
            "red in |- *; simpl in |- *; auto.",
            "VernacExtend",
            "1d43d4029690c353fb7edf6ba67b74a84697f82f"
        ],
        [
            "apply mZlist_correct; auto.",
            "VernacExtend",
            "efeb263b1a33922a78d81718915c4b96cdbc072d"
        ],
        [
            "unfold boundR, boundNat in |- *; simpl in |- *; auto with zarith.",
            "VernacExtend",
            "60bf41d90d662797b8677ac3efa4899176146386"
        ],
        [
            "apply Zle_trans with 0%Z; auto with zarith.",
            "VernacExtend",
            "7bc5435926f0aada5353ec65cce7fa187ea0bde2"
        ],
        [
            "case (dExp b); auto with zarith.",
            "VernacExtend",
            "1550cae20c90f23304536260367db5457d74774a"
        ],
        [
            "case (boundR r); simpl in |- *; auto with zarith.",
            "VernacExtend",
            "314a9e909817a16e4a2577cad0205a36a13a14c1"
        ],
        [
            "case (boundR r); simpl in |- *; auto with zarith.",
            "VernacExtend",
            "314a9e909817a16e4a2577cad0205a36a13a14c1"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Theorem mBFadic_correct4 : forall r : R, In (Float 0%nat (- dExp b)) (mBFloat r).",
            "VernacStartTheoremProof",
            "3e12d4f1a859326d59632cbc466da24008fad508"
        ],
        [
            "intros p; unfold mBFloat in |- *.",
            "VernacExtend",
            "675f0c5a6a0cac1aef250b37a1faa4a9b74c6d0c"
        ],
        [
            "replace (Float 0%nat (- dExp b)) with ((fun p : Z * Z => Float (fst p) (snd p)) (Fnum (Float 0%nat (- dExp b)), Fexp (Float 0%nat (- dExp b)))).",
            "VernacExtend",
            "5f8c1037640318442c8aa77d65289cb969755ec8"
        ],
        [
            "apply in_map with (f := fun p : Z * Z => Float (fst p) (snd p)); auto.",
            "VernacExtend",
            "b903c9e5ad7ffcd63bb277e2437e178381e5660f"
        ],
        [
            "apply mProd_correct; auto.",
            "VernacExtend",
            "eaa974a13efcb911f9b074ea3cbb614348d202ae"
        ],
        [
            "apply mZlist_correct; auto.",
            "VernacExtend",
            "efeb263b1a33922a78d81718915c4b96cdbc072d"
        ],
        [
            "simpl in |- *; auto with zarith.",
            "VernacExtend",
            "61d3cdc6299cf8abf87703c074ca4503f0f27a12"
        ],
        [
            "replace 0%Z with (- (0))%Z; [ idtac | simpl in |- *; auto ].",
            "VernacExtend",
            "e356b6726c399587a8afcddd43813e0ddd2432be"
        ],
        [
            "apply Zle_Zopp; unfold pPred in |- *; apply Zle_Zpred.",
            "VernacExtend",
            "daa24dbb06b9893c9d30e2e887098a4ea45366ed"
        ],
        [
            "red in |- *; simpl in |- *; auto with zarith.",
            "VernacExtend",
            "577ef83cd146ec1fd66ecc4ecb4d55a439a398bb"
        ],
        [
            "simpl in |- *; auto with zarith.",
            "VernacExtend",
            "61d3cdc6299cf8abf87703c074ca4503f0f27a12"
        ],
        [
            "unfold pPred in |- *; apply Zle_Zpred.",
            "VernacExtend",
            "527a3d5a72d2218dfceed34bf662d551ff76ee38"
        ],
        [
            "red in |- *; simpl in |- *; auto with zarith.",
            "VernacExtend",
            "577ef83cd146ec1fd66ecc4ecb4d55a439a398bb"
        ],
        [
            "apply mZlist_correct; auto.",
            "VernacExtend",
            "efeb263b1a33922a78d81718915c4b96cdbc072d"
        ],
        [
            "simpl in |- *; auto with zarith.",
            "VernacExtend",
            "61d3cdc6299cf8abf87703c074ca4503f0f27a12"
        ],
        [
            "unfold boundR, boundNat in |- *; simpl in |- *; auto with zarith.",
            "VernacExtend",
            "60bf41d90d662797b8677ac3efa4899176146386"
        ],
        [
            "apply Zle_trans with 0%Z; auto with zarith.",
            "VernacExtend",
            "7bc5435926f0aada5353ec65cce7fa187ea0bde2"
        ],
        [
            "case (dExp b); auto with zarith.",
            "VernacExtend",
            "1550cae20c90f23304536260367db5457d74774a"
        ],
        [
            "simpl in |- *; auto with zarith.",
            "VernacExtend",
            "61d3cdc6299cf8abf87703c074ca4503f0f27a12"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Theorem mBPadic_Fbounded : forall (p : float) (r : R), In p (mBFloat r) -> Fbounded b p.",
            "VernacStartTheoremProof",
            "01468c50b71f57f18e4fc92c75d3c0d10704d06f"
        ],
        [
            "intros p r H'; red in |- *; repeat (split; auto).",
            "VernacExtend",
            "512027c207f0b52b19a948f8cabf8556a41b7709"
        ],
        [
            "apply Zpred_Zle_Zabs_intro.",
            "VernacExtend",
            "9878835894e4655ae8930721907e3dec68090b61"
        ],
        [
            "apply mZlist_correct_rev1 with (q := Zpred (Zpos (vNum b))); auto with real.",
            "VernacExtend",
            "3cd5760abeed35e8d94a09e6a639dc932f997ac3"
        ],
        [
            "apply mProd_correct_rev1 with (l2 := mZlist (- dExp b) (Fexp (boundR r))) (C := (Z * Z)%type) (b := Fexp p); auto.",
            "VernacExtend",
            "560a152635e19204217b03164ee3d2eeedaa65f8"
        ],
        [
            "apply in_map_inv with (f := fun p : Z * Z => Float (fst p) (snd p)); auto.",
            "VernacExtend",
            "98afe0f0efc9c2f9df40bcb38490ee6e7c62a0bd"
        ],
        [
            "intros a1 b1; case a1; case b1; simpl in |- *.",
            "VernacExtend",
            "4342b60e139388362b69d30083db07d96c2ede4a"
        ],
        [
            "intros z z0 z1 z2 H'0; inversion H'0; auto.",
            "VernacExtend",
            "d1cf97d8bfc52dd6516aaeb80a89cafc139292f6"
        ],
        [
            "generalize H'; case p; auto.",
            "VernacExtend",
            "df9f563d8b9711ab890a0401ea1c4cd06fd0d01b"
        ],
        [
            "apply mZlist_correct_rev2 with (p := (- Zpred (Zpos (vNum b)))%Z); auto.",
            "VernacExtend",
            "e36487c5c06cb36f1012e00aae49b8f816a16f7c"
        ],
        [
            "apply mProd_correct_rev1 with (l2 := mZlist (- dExp b) (Fexp (boundR r))) (C := (Z * Z)%type) (b := Fexp p); auto.",
            "VernacExtend",
            "560a152635e19204217b03164ee3d2eeedaa65f8"
        ],
        [
            "apply in_map_inv with (f := fun p : Z * Z => Float (fst p) (snd p)); auto.",
            "VernacExtend",
            "98afe0f0efc9c2f9df40bcb38490ee6e7c62a0bd"
        ],
        [
            "intros a1 b1; case a1; case b1; simpl in |- *.",
            "VernacExtend",
            "4342b60e139388362b69d30083db07d96c2ede4a"
        ],
        [
            "intros z z0 z1 z2 H'0; inversion H'0; auto.",
            "VernacExtend",
            "d1cf97d8bfc52dd6516aaeb80a89cafc139292f6"
        ],
        [
            "generalize H'; case p; auto.",
            "VernacExtend",
            "df9f563d8b9711ab890a0401ea1c4cd06fd0d01b"
        ],
        [
            "apply mZlist_correct_rev1 with (q := Fexp (boundR r)); auto.",
            "VernacExtend",
            "e4e77198b4e887e13e9b66b7e36b88d909b35c32"
        ],
        [
            "apply mProd_correct_rev2 with (l1 := mZlist (- pPred (vNum b)) (pPred (vNum b))) (C := (Z * Z)%type) (a := Fnum p); auto.",
            "VernacExtend",
            "36dcc3f65720909bdc2d40cdb37d5262f07681c1"
        ],
        [
            "apply in_map_inv with (f := fun p : Z * Z => Float (fst p) (snd p)); auto.",
            "VernacExtend",
            "98afe0f0efc9c2f9df40bcb38490ee6e7c62a0bd"
        ],
        [
            "intros a1 b1; case a1; case b1; simpl in |- *.",
            "VernacExtend",
            "4342b60e139388362b69d30083db07d96c2ede4a"
        ],
        [
            "intros z z0 z1 z2 H'0; inversion H'0; auto.",
            "VernacExtend",
            "d1cf97d8bfc52dd6516aaeb80a89cafc139292f6"
        ],
        [
            "generalize H'; case p; auto.",
            "VernacExtend",
            "df9f563d8b9711ab890a0401ea1c4cd06fd0d01b"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Definition ProjectorP (P : R -> float -> Prop) := forall p q : float, Fbounded b p -> P p q -> p = q :>R.",
            "VernacDefinition",
            "0d12c627e97ea56f28d29efadc39778367f4f78a"
        ],
        [
            "Definition MonotoneP (P : R -> float -> Prop) := forall (p q : R) (p' q' : float), (p < q)%R -> P p p' -> P q q' -> (p' <= q')%R.",
            "VernacDefinition",
            "548664c0aef9b93f650d29ecf0189dd0d9f46959"
        ],
        [
            "Definition isMin (r : R) (min : float) := Fbounded b min /\\ (min <= r)%R /\\ (forall f : float, Fbounded b f -> (f <= r)%R -> (f <= min)%R).",
            "VernacDefinition",
            "bf381f71d7d00783b0852f5ef3a75f3cb33860a9"
        ],
        [
            "Theorem isMin_inv1 : forall (p : float) (r : R), isMin r p -> (p <= r)%R.",
            "VernacStartTheoremProof",
            "6395e7f1dfa6e8d0c8bae341adef0890e191e821"
        ],
        [
            "intros p r H; case H; intros H1 H2; case H2; auto.",
            "VernacExtend",
            "0b5558c6165a862bb021b751dac27908542a04e8"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Theorem ProjectMin : ProjectorP isMin.",
            "VernacStartTheoremProof",
            "f104fd727c28bebbb93ecec200bc21f36bdb47a8"
        ],
        [
            "red in |- *.",
            "VernacExtend",
            "95a3fb9e13ce19fdc8e335912fb83e57a9512b14"
        ],
        [
            "intros p q H' H'0; apply Rle_antisym.",
            "VernacExtend",
            "3bc6f16db1d3e1ea74ecf26a3386948d57738654"
        ],
        [
            "elim H'0; intros H'1 H'2; elim H'2; intros H'3 H'4; apply H'4; clear H'2; auto with real.",
            "VernacExtend",
            "739ce475f70983da46aacde7e77df7e4317169b1"
        ],
        [
            "apply isMin_inv1 with (1 := H'0); auto.",
            "VernacExtend",
            "45c58a1aaf2d483e20482e8493b46e9b5800029c"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Theorem MonotoneMin : MonotoneP isMin.",
            "VernacStartTheoremProof",
            "2fb0e34db1abb7a05cc01186f9955c11fad9f33f"
        ],
        [
            "red in |- *.",
            "VernacExtend",
            "95a3fb9e13ce19fdc8e335912fb83e57a9512b14"
        ],
        [
            "intros p q p' q' H' H'0 H'1.",
            "VernacExtend",
            "f4c56fd849f8bf2e90c31c6b70a192c1c381567b"
        ],
        [
            "elim H'1; intros H'2 H'3; elim H'3; intros H'4 H'5; apply H'5; clear H'3 H'1; auto.",
            "VernacExtend",
            "e0da0499c1f573aaf7ef73e2f84929a3c814a749"
        ],
        [
            "case H'0; auto.",
            "VernacExtend",
            "c95954a4912ccfdd6e4780b3eecd4f9a4fbca076"
        ],
        [
            "apply Rle_trans with p; auto.",
            "VernacExtend",
            "338aaf54f5c09fb229605527d7fafbeaece370ea"
        ],
        [
            "apply isMin_inv1 with (1 := H'0); auto.",
            "VernacExtend",
            "45c58a1aaf2d483e20482e8493b46e9b5800029c"
        ],
        [
            "apply Rlt_le; auto.",
            "VernacExtend",
            "4003e3e1c449ee89cad9e953d0a562db8235648c"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Definition isMax (r : R) (max : float) := Fbounded b max /\\ (r <= max)%R /\\ (forall f : float, Fbounded b f -> (r <= f)%R -> (max <= f)%R).",
            "VernacDefinition",
            "6628672b1b6eb8697f626a6a237c63d5387b78f9"
        ],
        [
            "Theorem isMax_inv1 : forall (p : float) (r : R), isMax r p -> (r <= p)%R.",
            "VernacStartTheoremProof",
            "98c0abdcc5a120adf42bbfd539d3f95bd9059e4a"
        ],
        [
            "intros p r H; case H; intros H1 H2; case H2; auto.",
            "VernacExtend",
            "0b5558c6165a862bb021b751dac27908542a04e8"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Theorem ProjectMax : ProjectorP isMax.",
            "VernacStartTheoremProof",
            "c9e694a9082d40916ef97557d2ae429f381faf36"
        ],
        [
            "red in |- *.",
            "VernacExtend",
            "95a3fb9e13ce19fdc8e335912fb83e57a9512b14"
        ],
        [
            "intros p q H' H'0; apply Rle_antisym.",
            "VernacExtend",
            "3bc6f16db1d3e1ea74ecf26a3386948d57738654"
        ],
        [
            "apply isMax_inv1 with (1 := H'0); auto.",
            "VernacExtend",
            "ac8b9cab33e318bbf722eb1a908dfd9ac6ac6d62"
        ],
        [
            "elim H'0; intros H'1 H'2; elim H'2; intros H'3 H'4; apply H'4; clear H'2; auto with real.",
            "VernacExtend",
            "739ce475f70983da46aacde7e77df7e4317169b1"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Theorem MonotoneMax : MonotoneP isMax.",
            "VernacStartTheoremProof",
            "fd63d739877963a89e1e35999f1bd1f52b72b41a"
        ],
        [
            "red in |- *.",
            "VernacExtend",
            "95a3fb9e13ce19fdc8e335912fb83e57a9512b14"
        ],
        [
            "intros p q p' q' H' H'0 H'1.",
            "VernacExtend",
            "f4c56fd849f8bf2e90c31c6b70a192c1c381567b"
        ],
        [
            "elim H'0; intros H'2 H'3; elim H'3; intros H'4 H'5; apply H'5; clear H'3 H'0.",
            "VernacExtend",
            "17742175e87fbd897c1df90408a8fbdf90fd97ce"
        ],
        [
            "case H'1; auto.",
            "VernacExtend",
            "a44f1b914e489dd19b841fdfab025ba14e3d8f86"
        ],
        [
            "apply Rle_trans with q; auto.",
            "VernacExtend",
            "006f2e8d634e24fb5bd736ea5548e0e9046485f8"
        ],
        [
            "apply Rlt_le; auto.",
            "VernacExtend",
            "4003e3e1c449ee89cad9e953d0a562db8235648c"
        ],
        [
            "apply isMax_inv1 with (1 := H'1); auto.",
            "VernacExtend",
            "8dcad7c97174b3a0dfcba92f1822fa70fea18c19"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Theorem MinEq : forall (p q : float) (r : R), isMin r p -> isMin r q -> p = q :>R.",
            "VernacStartTheoremProof",
            "de6d033b3baceffafd848516941c5ceea905d963"
        ],
        [
            "intros p q r H' H'0; apply Rle_antisym.",
            "VernacExtend",
            "2c2c99283a21918a2b2ed5d126374f20e3e983c2"
        ],
        [
            "elim H'0; intros H'1 H'2; elim H'2; intros H'3 H'4; apply H'4; clear H'2 H'0; auto.",
            "VernacExtend",
            "25175884887a953c8df9e7d25933e7946968a71c"
        ],
        [
            "case H'; auto.",
            "VernacExtend",
            "ebc5b3ac68f03e20b8a194319f607aaad1bf60b4"
        ],
        [
            "apply isMin_inv1 with (1 := H'); auto.",
            "VernacExtend",
            "a02228ba9b5872b22779fa417c5278a79ee12e4e"
        ],
        [
            "elim H'; intros H'1 H'2; elim H'2; intros H'3 H'4; apply H'4; clear H'2 H'; auto.",
            "VernacExtend",
            "5ff0a5a2077b900145fd34fa140961d8e549e674"
        ],
        [
            "case H'0; auto.",
            "VernacExtend",
            "c95954a4912ccfdd6e4780b3eecd4f9a4fbca076"
        ],
        [
            "apply isMin_inv1 with (1 := H'0); auto.",
            "VernacExtend",
            "45c58a1aaf2d483e20482e8493b46e9b5800029c"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Theorem MaxEq : forall (p q : float) (r : R), isMax r p -> isMax r q -> p = q :>R.",
            "VernacStartTheoremProof",
            "b5a2c5979032b5e1da9c764da6f087420574d32d"
        ],
        [
            "intros p q r H' H'0; apply Rle_antisym.",
            "VernacExtend",
            "2c2c99283a21918a2b2ed5d126374f20e3e983c2"
        ],
        [
            "elim H'; intros H'1 H'2; elim H'2; intros H'3 H'4; apply H'4; clear H'2 H'; auto.",
            "VernacExtend",
            "5ff0a5a2077b900145fd34fa140961d8e549e674"
        ],
        [
            "case H'0; auto.",
            "VernacExtend",
            "c95954a4912ccfdd6e4780b3eecd4f9a4fbca076"
        ],
        [
            "apply isMax_inv1 with (1 := H'0); auto.",
            "VernacExtend",
            "ac8b9cab33e318bbf722eb1a908dfd9ac6ac6d62"
        ],
        [
            "elim H'0; intros H'1 H'2; elim H'2; intros H'3 H'4; apply H'4; clear H'2 H'0; auto.",
            "VernacExtend",
            "25175884887a953c8df9e7d25933e7946968a71c"
        ],
        [
            "case H'; auto.",
            "VernacExtend",
            "ebc5b3ac68f03e20b8a194319f607aaad1bf60b4"
        ],
        [
            "apply isMax_inv1 with (1 := H'); auto.",
            "VernacExtend",
            "4e1566e3049c97d437702d52126f137bfe3325bd"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Theorem MinOppMax : forall (p : float) (r : R), isMin r p -> isMax (- r) (Fopp p).",
            "VernacStartTheoremProof",
            "0a21d8c2f48f669611747075b051084617c43e0c"
        ],
        [
            "intros p r H'; split.",
            "VernacExtend",
            "596d6060adaa45f2c778a5b321b84be5016c58a7"
        ],
        [
            "apply oppBounded; case H'; auto.",
            "VernacExtend",
            "c113891b193dddf7a409a546bb28290e567dc7b9"
        ],
        [
            "split.",
            "VernacExtend",
            "55abc140132bd88981001ac656020469a8d503eb"
        ],
        [
            "unfold FtoRradix in |- *; rewrite Fopp_correct.",
            "VernacExtend",
            "c3c7ad16a924a974f39fb2584a800e7199b0444e"
        ],
        [
            "apply Ropp_le_contravar; apply isMin_inv1 with (1 := H'); auto.",
            "VernacExtend",
            "16d66f55b1ee335a24fbc857ba01eea0f23b9478"
        ],
        [
            "intros f H'0 H'1.",
            "VernacExtend",
            "53dd8ac5cda3804e9f3487c315cbff7f7f54bbe7"
        ],
        [
            "rewrite <- (Fopp_Fopp f).",
            "VernacExtend",
            "979fe1f41242b0442a40880253df3fa10d62442b"
        ],
        [
            "unfold FtoRradix in |- *; rewrite Fopp_correct; rewrite Fopp_correct.",
            "VernacExtend",
            "fcadfc95f95f621988539bf920ab7e43433c5c49"
        ],
        [
            "apply Ropp_le_contravar.",
            "VernacExtend",
            "ac8d32b190d111aa8834547674121bcf3bb8a0ed"
        ],
        [
            "elim H'.",
            "VernacExtend",
            "1cae423a267f3a1a6990051e754342f63add38fd"
        ],
        [
            "intros H'2 H'3; elim H'3; intros H'4 H'5; apply H'5; clear H'3.",
            "VernacExtend",
            "f9bac7e70a0e58a3fa2e9938abb3fcafb4cc1968"
        ],
        [
            "apply oppBounded; case H'; auto.",
            "VernacExtend",
            "c113891b193dddf7a409a546bb28290e567dc7b9"
        ],
        [
            "rewrite <- (Ropp_involutive r).",
            "VernacExtend",
            "cbc81d890888d09f9d795cc7d43b35a4a68248ee"
        ],
        [
            "unfold FtoRradix in |- *; rewrite Fopp_correct; auto with real.",
            "VernacExtend",
            "5806d51ffb537355f3b97b7dbadcb1cad937b8ce"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Theorem MaxOppMin : forall (p : float) (r : R), isMax r p -> isMin (- r) (Fopp p).",
            "VernacStartTheoremProof",
            "b3d0fc111ff67d01537a2b7ef8270d3ac5d10dbf"
        ],
        [
            "intros p r H'; split.",
            "VernacExtend",
            "596d6060adaa45f2c778a5b321b84be5016c58a7"
        ],
        [
            "apply oppBounded; case H'; auto.",
            "VernacExtend",
            "c113891b193dddf7a409a546bb28290e567dc7b9"
        ],
        [
            "split.",
            "VernacExtend",
            "55abc140132bd88981001ac656020469a8d503eb"
        ],
        [
            "unfold FtoRradix in |- *; rewrite Fopp_correct.",
            "VernacExtend",
            "c3c7ad16a924a974f39fb2584a800e7199b0444e"
        ],
        [
            "apply Ropp_le_contravar; apply isMax_inv1 with (1 := H'); auto.",
            "VernacExtend",
            "0b698f0850e3998dc304d89b6e03d27a4456f050"
        ],
        [
            "intros f H'0 H'1.",
            "VernacExtend",
            "53dd8ac5cda3804e9f3487c315cbff7f7f54bbe7"
        ],
        [
            "rewrite <- (Fopp_Fopp f).",
            "VernacExtend",
            "979fe1f41242b0442a40880253df3fa10d62442b"
        ],
        [
            "unfold FtoRradix in |- *; repeat rewrite Fopp_correct.",
            "VernacExtend",
            "3335b4703a3a97d3007be20d235819750bd0360e"
        ],
        [
            "apply Ropp_le_contravar.",
            "VernacExtend",
            "ac8d32b190d111aa8834547674121bcf3bb8a0ed"
        ],
        [
            "rewrite <- (Fopp_correct radix f).",
            "VernacExtend",
            "7de89470de24dd2996d21fd121f5f4504b3e450a"
        ],
        [
            "elim H'.",
            "VernacExtend",
            "1cae423a267f3a1a6990051e754342f63add38fd"
        ],
        [
            "intros H'2 H'3; elim H'3; intros H'4 H'5; apply H'5; clear H'3.",
            "VernacExtend",
            "f9bac7e70a0e58a3fa2e9938abb3fcafb4cc1968"
        ],
        [
            "apply oppBounded; auto.",
            "VernacExtend",
            "6e68d2122eeea082741ca4e279707ce0511c71ef"
        ],
        [
            "rewrite <- (Ropp_involutive r).",
            "VernacExtend",
            "cbc81d890888d09f9d795cc7d43b35a4a68248ee"
        ],
        [
            "unfold FtoRradix in |- *; rewrite Fopp_correct; auto with real.",
            "VernacExtend",
            "5806d51ffb537355f3b97b7dbadcb1cad937b8ce"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Theorem MinMax : forall (p : float) (r : R), isMin r p -> r <> p :>R -> isMax r (FNSucc b radix precision p).",
            "VernacStartTheoremProof",
            "a0d8ee777f347dd453c6a0ae359004f3a0a1b420"
        ],
        [
            "intros p r H' H'0.",
            "VernacExtend",
            "ef14b7bae52158d1a39ab929a8fdee1f74678e05"
        ],
        [
            "split.",
            "VernacExtend",
            "55abc140132bd88981001ac656020469a8d503eb"
        ],
        [
            "apply FcanonicBound with (radix := radix); auto with float.",
            "VernacExtend",
            "31c8628156b101371fc066a2293dc899ef72c728"
        ],
        [
            "apply FNSuccCanonic; auto.",
            "VernacExtend",
            "ebb67044c842161a67c189619d2a7761ffe66f7a"
        ],
        [
            "inversion H'; auto.",
            "VernacExtend",
            "d59ad6c8daf4451d93df165016af388e7c5199ce"
        ],
        [
            "split.",
            "VernacExtend",
            "55abc140132bd88981001ac656020469a8d503eb"
        ],
        [
            "case (Rle_or_lt (FNSucc b radix precision p) r); intros H'2; auto.",
            "VernacExtend",
            "6f4d184884d38464a058e2209e2c7d72642dfa67"
        ],
        [
            "absurd (FNSucc b radix precision p <= p)%R.",
            "VernacExtend",
            "0331e7bb124253c2062b802bdd2006532ad40f43"
        ],
        [
            "apply Rlt_not_le.",
            "VernacExtend",
            "970672dbfa76c5b1a5bbbe80816db4b871608528"
        ],
        [
            "unfold FtoRradix in |- *; apply FNSuccLt; auto.",
            "VernacExtend",
            "065e66258c96e1d0aea1570e0d1439da41e84424"
        ],
        [
            "inversion H'; auto.",
            "VernacExtend",
            "d59ad6c8daf4451d93df165016af388e7c5199ce"
        ],
        [
            "elim H0; intros H'1 H'3; apply H'3; auto.",
            "VernacExtend",
            "e0af3a6997c8341c683f9c8fbe612eb508aee3bd"
        ],
        [
            "apply FcanonicBound with (radix := radix); auto with float.",
            "VernacExtend",
            "31c8628156b101371fc066a2293dc899ef72c728"
        ],
        [
            "apply Rlt_le; auto.",
            "VernacExtend",
            "4003e3e1c449ee89cad9e953d0a562db8235648c"
        ],
        [
            "intros f H'2 H'3.",
            "VernacExtend",
            "0d9edd734f56ec85379147d75d67fbe00eca0ec3"
        ],
        [
            "replace (FtoRradix f) with (FtoRradix (Fnormalize radix b precision f)).",
            "VernacExtend",
            "d8f8826130cec35a787f270954e4551d61a200ae"
        ],
        [
            "unfold FtoRradix in |- *; apply FNSuccProp; auto.",
            "VernacExtend",
            "5f33033b1798bcaa2a3fd85d442ca9a2ac440103"
        ],
        [
            "inversion H'; auto.",
            "VernacExtend",
            "d59ad6c8daf4451d93df165016af388e7c5199ce"
        ],
        [
            "apply FcanonicBound with (radix := radix); auto with float.",
            "VernacExtend",
            "31c8628156b101371fc066a2293dc899ef72c728"
        ],
        [
            "apply Rlt_le_trans with r; auto.",
            "VernacExtend",
            "44dd400f8e3acbabfddf2e6830276f44f91d8c15"
        ],
        [
            "case (Rle_or_lt r p); auto.",
            "VernacExtend",
            "97549ab1412bb6f7824414efb502d3142de01b97"
        ],
        [
            "intros H'4; Contradict H'0.",
            "VernacExtend",
            "a737d05291a071577bd38fb391e6dc635ff955b9"
        ],
        [
            "apply Rle_antisym; auto; apply isMin_inv1 with (1 := H'); auto.",
            "VernacExtend",
            "7ef2206d0d4a70fa61063d6fcd490df9befc6b35"
        ],
        [
            "rewrite FnormalizeCorrect; auto.",
            "VernacExtend",
            "6ee35e1e3f3de05c34741ed20c27ff8ffe5da5da"
        ],
        [
            "unfold FtoRradix in |- *; apply FnormalizeCorrect; auto.",
            "VernacExtend",
            "470ee4d615cb96e2c80e7ff477747cec6ab8c852"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Theorem MinExList : forall (r : R) (L : list float), (forall f : float, In f L -> (r < f)%R) \\/ (exists min : float, In min L /\\ (min <= r)%R /\\ (forall f : float, In f L -> (f <= r)%R -> (f <= min)%R)).",
            "VernacStartTheoremProof",
            "990554958c4ba47ad34bfd05fb1ae540a8f271f0"
        ],
        [
            "intros r L; elim L; simpl in |- *; auto.",
            "VernacExtend",
            "2f1ebcaa2ae606b15e587407909220a606507822"
        ],
        [
            "left; intros f H'; elim H'.",
            "VernacExtend",
            "da2f37097355c5210edff9a119f92b74a9919df9"
        ],
        [
            "intros a l H'.",
            "VernacExtend",
            "320e248a1ffce57c7ebcb270ad3c3cc3c47d037b"
        ],
        [
            "elim H'; [ intros H'0; clear H' | intros H'0; elim H'0; intros min E; elim E; intros H'1 H'2; elim H'2; intros H'3 H'4; try exact H'4; clear H'2 E H'0 H' ].",
            "VernacExtend",
            "2b193bbc48201252bf15782fcc0e4e91195b8c82"
        ],
        [
            "case (Rle_or_lt a r); intros H'1.",
            "VernacExtend",
            "17c7b85a4ab3e6cd54aa82c193f5b13dc33d5682"
        ],
        [
            "right; exists a; repeat split; auto.",
            "VernacExtend",
            "96c3bc976115c36ad97fb6df5b953df91fa88750"
        ],
        [
            "intros f H'; elim H'; [ intros H'2; rewrite <- H'2; clear H' | intros H'2; clear H' ]; auto with real.",
            "VernacExtend",
            "9ffd7ab8eb8bc379a39a9687aa56e01146d5685f"
        ],
        [
            "intros H'; Contradict H'; auto with real.",
            "VernacExtend",
            "042352157ea65899537ad393175c58e9f7fd3f3f"
        ],
        [
            "apply Rlt_not_le; auto with real.",
            "VernacExtend",
            "9b1690e28c96f72eb26acad1cf4a770eb61a1a8d"
        ],
        [
            "left; intros f H'; elim H'; [ intros H'2; rewrite <- H'2; clear H' | intros H'2; clear H' ]; auto.",
            "VernacExtend",
            "13219101626abfcaeae3bb0dcdd4185bdab81cfd"
        ],
        [
            "case (Rle_or_lt a min); intros H'5.",
            "VernacExtend",
            "01ef813f138d9c19d099894969efdb09401a061a"
        ],
        [
            "right; exists min; repeat split; auto.",
            "VernacExtend",
            "8870588f58e84a6e653e949c3d9ee77bfc74b4cd"
        ],
        [
            "intros f H'; elim H'; [ intros H'0; rewrite <- H'0; clear H' | intros H'0; clear H' ]; auto.",
            "VernacExtend",
            "e7d3c4d75106ece36e822e2bb0cefcf6d02228f8"
        ],
        [
            "case (Rle_or_lt a r); intros H'6.",
            "VernacExtend",
            "82766f50aa4e501312cd8cf5dfb843df59870149"
        ],
        [
            "right; exists a; repeat split; auto.",
            "VernacExtend",
            "96c3bc976115c36ad97fb6df5b953df91fa88750"
        ],
        [
            "intros f H'; elim H'; [ intros H'0; rewrite <- H'0; clear H' | intros H'0; clear H' ]; auto with real.",
            "VernacExtend",
            "b82835c367ada79f6c32beba3904aaa5487d79f3"
        ],
        [
            "intros H'; apply Rle_trans with (FtoRradix min); auto with real.",
            "VernacExtend",
            "35fd1749fca017ce235a65dd514e6c3b33a904d0"
        ],
        [
            "right; exists min; split; auto; split; auto.",
            "VernacExtend",
            "de0c94f8605368c40051ce974fc10c3acd66361e"
        ],
        [
            "intros f H'; elim H'; [ intros H'0; elim H'0; clear H' | intros H'0; clear H' ]; auto.",
            "VernacExtend",
            "b60e3f9b02f009a0abc48d8e5d6383dada90e46a"
        ],
        [
            "intros H'; Contradict H'6; auto with real.",
            "VernacExtend",
            "7e6a51b6b0b53fb7351406b4d4f334e4b854d9cd"
        ],
        [
            "apply Rle_not_lt; auto.",
            "VernacExtend",
            "a14016e8637e06ef942ae2a016f397912a0b9bcd"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Theorem MinEx : forall r : R, exists min : float, isMin r min.",
            "VernacStartTheoremProof",
            "089eb8e665d1ea76ee02b485a5f0d4c60fed7a46"
        ],
        [
            "intros r.",
            "VernacExtend",
            "5819060771cad2a5b744225cdd7aa4cb65e09e7b"
        ],
        [
            "case (MinExList r (mBFloat r)).",
            "VernacExtend",
            "0c435a6020901126bf335f8094e3210a69e57ce9"
        ],
        [
            "intros H'0; absurd (Fopp (boundR r) <= r)%R; auto.",
            "VernacExtend",
            "b402b79cc728c486b01a41ff8dc30dda9ed58555"
        ],
        [
            "apply Rlt_not_le.",
            "VernacExtend",
            "970672dbfa76c5b1a5bbbe80816db4b871608528"
        ],
        [
            "apply H'0.",
            "VernacExtend",
            "f1f7d253c59fe30c9977766a215126b9faf09097"
        ],
        [
            "apply mBFadic_correct3; auto.",
            "VernacExtend",
            "bee0f94987d1097aaaccee92c48f547326d5b10b"
        ],
        [
            "apply Rlt_le.",
            "VernacExtend",
            "cdc4280500779f23bae235b94c24a4b2ea2921fe"
        ],
        [
            "apply boundRCorrect2; auto.",
            "VernacExtend",
            "ff8d707ba68cc25a20a71b9623f74bdf1289b232"
        ],
        [
            "intros H'0; elim H'0; intros min E; elim E; intros H'1 H'2; elim H'2; intros H'3 H'4; clear H'2 E H'0.",
            "VernacExtend",
            "933b5f180682ad9b539f94e77ff3c4f6d800a0a7"
        ],
        [
            "exists min; split; auto.",
            "VernacExtend",
            "225be802774f7a00fcc6ca9b6cf0eb9ed30c17cf"
        ],
        [
            "apply mBPadic_Fbounded with (r := r); auto.",
            "VernacExtend",
            "391ecbedf8c66789c84a5b028da5de79a8649f62"
        ],
        [
            "split; auto.",
            "VernacExtend",
            "fcd44a714bd12fa54b1c7746996e44dbac16df06"
        ],
        [
            "intros f H'0 H'2.",
            "VernacExtend",
            "39fed5c5e0c0c19404b41d1b29a91f4f1a0dce5e"
        ],
        [
            "case (Req_dec f 0); intros H'6.",
            "VernacExtend",
            "6a0932c9f3d73472c9d526d5b6ad89c0f78708af"
        ],
        [
            "replace (FtoRradix f) with (FtoRradix (Float 0%nat (- dExp b))).",
            "VernacExtend",
            "afb86a091c01c0327ae43474bc02d921c30e186a"
        ],
        [
            "apply H'4; auto.",
            "VernacExtend",
            "4c512e2eaa566fdc741b0b71cb645883015b4bcd"
        ],
        [
            "apply mBFadic_correct4; auto.",
            "VernacExtend",
            "92d2842a19e6457d9ecfc771dfd5d85e027f7ea3"
        ],
        [
            "replace (FtoRradix (Float 0%nat (- dExp b))) with (FtoRradix f); auto.",
            "VernacExtend",
            "c83950b4795274e16d89df951c74c07a6d75c306"
        ],
        [
            "rewrite H'6.",
            "VernacExtend",
            "7a5e609e825f92618da18be03aa16ab06d13e048"
        ],
        [
            "unfold FtoRradix, FtoR in |- *; simpl in |- *; auto with real.",
            "VernacExtend",
            "fb74d3652c0c20354e175d620e90507508ec4729"
        ],
        [
            "rewrite H'6.",
            "VernacExtend",
            "7a5e609e825f92618da18be03aa16ab06d13e048"
        ],
        [
            "unfold FtoRradix, FtoR in |- *; simpl in |- *; auto with real.",
            "VernacExtend",
            "fb74d3652c0c20354e175d620e90507508ec4729"
        ],
        [
            "case (Rle_or_lt f (Fopp (boundR r))); intros H'5.",
            "VernacExtend",
            "ef19d67b7d5d391c011e43740595dd7977511bef"
        ],
        [
            "apply Rle_trans with (FtoRradix (Fopp (boundR r))); auto.",
            "VernacExtend",
            "0c104377b413f87b85ee62df5c18b088bd6758da"
        ],
        [
            "apply H'4; auto.",
            "VernacExtend",
            "4c512e2eaa566fdc741b0b71cb645883015b4bcd"
        ],
        [
            "apply mBFadic_correct3; auto.",
            "VernacExtend",
            "bee0f94987d1097aaaccee92c48f547326d5b10b"
        ],
        [
            "apply Rlt_le.",
            "VernacExtend",
            "cdc4280500779f23bae235b94c24a4b2ea2921fe"
        ],
        [
            "apply boundRCorrect2; auto.",
            "VernacExtend",
            "ff8d707ba68cc25a20a71b9623f74bdf1289b232"
        ],
        [
            "case (Rle_or_lt (boundR r) f); intros H'7.",
            "VernacExtend",
            "374987a4844c3bc41b7b184edc7d64442078cf97"
        ],
        [
            "Contradict H'2; apply Rlt_not_le.",
            "VernacExtend",
            "1043297ffd7e42e0f28e13e40fcba61f88589b50"
        ],
        [
            "apply Rlt_le_trans with (FtoRradix (boundR r)); auto.",
            "VernacExtend",
            "5cb83c0963cb49e58f9a4fe9e260df250b4604f6"
        ],
        [
            "apply boundRCorrect1; auto.",
            "VernacExtend",
            "e2b2211e9f03a8f404fb8d67a7e61b7a0f6bffab"
        ],
        [
            "apply H'4; auto.",
            "VernacExtend",
            "4c512e2eaa566fdc741b0b71cb645883015b4bcd"
        ],
        [
            "apply mBFadic_correct1; auto.",
            "VernacExtend",
            "08b867033de694e8904898097d4b951c23bd64c2"
        ],
        [
            "Contradict H'6; unfold FtoRradix in |- *; apply is_Fzero_rep1; auto.",
            "VernacExtend",
            "8726923b8c7f96bbde3418e99a032b9c6f438746"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Theorem MaxEx : forall r : R, exists max : float, isMax r max.",
            "VernacStartTheoremProof",
            "043839e463ad27c8e0b36ba5ea2bcfe644b769a8"
        ],
        [
            "intros r; case (MinEx r).",
            "VernacExtend",
            "71dde2ffc263329a556f63a1fe1ac36d3117e595"
        ],
        [
            "intros x H'.",
            "VernacExtend",
            "1864e43355295bd98e7920f89fb20cbad05f10d7"
        ],
        [
            "case (Req_dec x r); intros H'1.",
            "VernacExtend",
            "c9e2def97a3fc259b0914187b724a5f0b1a6be16"
        ],
        [
            "exists x.",
            "VernacExtend",
            "800bf7613c74a608ff1ecae6bb20d349d4e8f84d"
        ],
        [
            "rewrite <- H'1.",
            "VernacExtend",
            "72f25f27aa9f4989786041bbf0f442a67cdb1785"
        ],
        [
            "red in |- *; split; [ case H' | split ]; auto with real.",
            "VernacExtend",
            "5ec74165928d80e88e44031daee22036122faf59"
        ],
        [
            "exists (FNSucc b radix precision x).",
            "VernacExtend",
            "2e1c8e2f1a4811e74114011e7e19b4ce7ef98f78"
        ],
        [
            "apply MinMax; auto.",
            "VernacExtend",
            "cd26a0feef58f1a9aa71a1b7715f08b607a82fe1"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Theorem MinBinade : forall (r : R) (p : float), Fbounded b p -> (p <= r)%R -> (r < FNSucc b radix precision p)%R -> isMin r p.",
            "VernacStartTheoremProof",
            "ebaf89a9a13767aac1d4a1ab4554d3bdfcf2a995"
        ],
        [
            "intros r p H' H'0 H'1.",
            "VernacExtend",
            "c7abd2f5e088bda2a46e525fd4836efdce439ee9"
        ],
        [
            "split; auto.",
            "VernacExtend",
            "fcd44a714bd12fa54b1c7746996e44dbac16df06"
        ],
        [
            "split; auto.",
            "VernacExtend",
            "fcd44a714bd12fa54b1c7746996e44dbac16df06"
        ],
        [
            "intros f H'2 H'3.",
            "VernacExtend",
            "0d9edd734f56ec85379147d75d67fbe00eca0ec3"
        ],
        [
            "case (Rle_or_lt f p); auto; intros H'5.",
            "VernacExtend",
            "46905bdb78ec61db6b9cc5ca45220639912891e2"
        ],
        [
            "Contradict H'3.",
            "VernacExtend",
            "1690deb3bfcd28d48572d7f699b77412ce81cef7"
        ],
        [
            "apply Rlt_not_le.",
            "VernacExtend",
            "970672dbfa76c5b1a5bbbe80816db4b871608528"
        ],
        [
            "apply Rlt_le_trans with (1 := H'1); auto with real.",
            "VernacExtend",
            "c9e0ba2af2e6b5986a5a13462722592102d6c864"
        ],
        [
            "replace (FtoRradix f) with (FtoRradix (Fnormalize radix b precision f)).",
            "VernacExtend",
            "d8f8826130cec35a787f270954e4551d61a200ae"
        ],
        [
            "unfold FtoRradix in |- *; apply FNSuccProp; auto; try apply FnormalizeCanonic; auto.",
            "VernacExtend",
            "1bb00ecbb125cb49e54e1e19795630f2adbbd136"
        ],
        [
            "unfold FtoRradix in |- *; repeat rewrite FnormalizeCorrect; auto with real.",
            "VernacExtend",
            "e2473a087ff23f4ddfd26f0888c1a45621b7684d"
        ],
        [
            "apply FcanonicBound with (radix := radix); auto.",
            "VernacExtend",
            "7ff66c1c77430eeda2d6b2110bd18def44854cf6"
        ],
        [
            "apply FnormalizeCanonic; auto.",
            "VernacExtend",
            "9a1fe361020914af4b8bf7ab09ee74e43ff90cec"
        ],
        [
            "unfold FtoRradix in |- *; rewrite FnormalizeCorrect; auto with real.",
            "VernacExtend",
            "ec3ef9d71dcaf2623b358135846114542e411854"
        ],
        [
            "unfold FtoRradix in |- *; rewrite FnormalizeCorrect; auto with real.",
            "VernacExtend",
            "ec3ef9d71dcaf2623b358135846114542e411854"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Theorem FminRep : forall p q : float, isMin p q -> exists m : Z, q = Float m (Fexp p) :>R.",
            "VernacStartTheoremProof",
            "1570336fce30f5bc03191a0e1af63b64819b1145"
        ],
        [
            "intros p q H'.",
            "VernacExtend",
            "6d0165163a2a8e407c09482ce517f2835b5de359"
        ],
        [
            "replace (FtoRradix q) with (FtoRradix (Fnormalize radix b precision q)).",
            "VernacExtend",
            "0f4107f28c625c6b4298ceb7408fc053a61718bb"
        ],
        [
            "2: unfold FtoRradix in |- *; apply FnormalizeCorrect; auto.",
            "VernacExtend",
            "79691d9234808ffadd8fd243ba69bf72657ea5b5"
        ],
        [
            "case (Zle_or_lt (Fexp (Fnormalize radix b precision q)) (Fexp p)); intros H'1.",
            "VernacExtend",
            "f150927003bdeb7a3e971edead79f7676c6d89f8"
        ],
        [
            "exists (Fnum p).",
            "VernacExtend",
            "53fd5f13e5eddf9f86526bbec1b5ce248324b515"
        ],
        [
            "unfold FtoRradix in |- *; apply FSuccZleEq with (3 := pGivesBound); auto.",
            "VernacExtend",
            "97efa8c81d678db28f2b1991a72d6d11cb04a071"
        ],
        [
            "replace (Float (Fnum p) (Fexp p)) with p; [ idtac | case p ]; auto.",
            "VernacExtend",
            "caa925729e92a1dd9b516dbc4a36c0c152089d8f"
        ],
        [
            "replace (FtoR radix (Fnormalize radix b precision q)) with (FtoR radix q); [ idtac | rewrite FnormalizeCorrect ]; auto.",
            "VernacExtend",
            "a978ffb22274a6942645b4792b22af2d95495e17"
        ],
        [
            "apply isMin_inv1 with (1 := H'); auto.",
            "VernacExtend",
            "a02228ba9b5872b22779fa417c5278a79ee12e4e"
        ],
        [
            "replace (FSucc b radix precision (Fnormalize radix b precision q)) with (FNSucc b radix precision q); [ idtac | case p ]; auto.",
            "VernacExtend",
            "9955ac149c782f85df8fdab10b100a54a5634727"
        ],
        [
            "replace (Float (Fnum p) (Fexp p)) with p; [ idtac | case p ]; auto.",
            "VernacExtend",
            "caa925729e92a1dd9b516dbc4a36c0c152089d8f"
        ],
        [
            "case (Req_dec p q); intros Eq0.",
            "VernacExtend",
            "a8ef12f2e710882c6fa6e9a6e8e82d3aec9b8b8e"
        ],
        [
            "unfold FtoRradix in Eq0; rewrite Eq0.",
            "VernacExtend",
            "3d427eca55fc175371a4a752989af74af3e5dd82"
        ],
        [
            "apply FNSuccLt; auto.",
            "VernacExtend",
            "926a25da266c53b50a4a43d8df2cdf41a41c104c"
        ],
        [
            "case (MinMax q p); auto.",
            "VernacExtend",
            "5b021b5d3468cd62c078416c9539f784ef1bb1e5"
        ],
        [
            "intros H'2 H'3; elim H'3; intros H'4 H'5; clear H'3.",
            "VernacExtend",
            "25b73c6072b7164f3e5acd9f198ea9b3e3da054c"
        ],
        [
            "case H'4; auto.",
            "VernacExtend",
            "2c012230b4479c3ceef20d28ff227694c215b18f"
        ],
        [
            "intros H'0; absurd (p <= q)%R; rewrite H'0; auto.",
            "VernacExtend",
            "95a31ec460aff8a16a5fd86f760e1d8e5ff3c2b6"
        ],
        [
            "apply Rlt_not_le; auto.",
            "VernacExtend",
            "6f5318d21ab69ab206ab9ce9b8f03cd4fb7f9d31"
        ],
        [
            "unfold FtoRradix in |- *; apply FNSuccLt; auto.",
            "VernacExtend",
            "065e66258c96e1d0aea1570e0d1439da41e84424"
        ],
        [
            "inversion H'.",
            "VernacExtend",
            "7eb2f09d685a0dbd7e1e32975a04fde5b8f610b0"
        ],
        [
            "elim H0; intros H'3 H'6; apply H'6; clear H0; auto.",
            "VernacExtend",
            "7ef155490fefc35672ff7d52c466565fc8b81d16"
        ],
        [
            "rewrite <- H'0; auto with real.",
            "VernacExtend",
            "b019a7ac3964e7f5196af1242bb387c9cca70545"
        ],
        [
            "exists (Fnum (Fshift radix (Zabs_nat (Fexp (Fnormalize radix b precision q) - Fexp p)) (Fnormalize radix b precision q))).",
            "VernacExtend",
            "d29d55c4b6a8cab2d17bf4860cd34bf087d5bc80"
        ],
        [
            "pattern (Fexp p) at 2 in |- *; replace (Fexp p) with (Fexp (Fshift radix (Zabs_nat (Fexp (Fnormalize radix b precision q) - Fexp p)) (Fnormalize radix b precision q))).",
            "VernacExtend",
            "fca706ca57ed5c1e8c745018f0ce8faa8a10ce27"
        ],
        [
            "unfold FtoRradix in |- *; rewrite <- FshiftCorrect with (n := Zabs_nat (Fexp (Fnormalize radix b precision q) - Fexp p)) (x := Fnormalize radix b precision q).",
            "VernacExtend",
            "1beb9716723744ed76577244cffdef40d8f15367"
        ],
        [
            "case (Fshift radix (Zabs_nat (Fexp (Fnormalize radix b precision q) - Fexp p)) (Fnormalize radix b precision q)); auto.",
            "VernacExtend",
            "99362d79f6fea2ee7e9791f670ee1cb94ebbba06"
        ],
        [
            "auto with arith.",
            "VernacExtend",
            "0a06d2be3685676bb8fa998f149557e231db6506"
        ],
        [
            "simpl in |- *; rewrite inj_abs; auto with zarith.",
            "VernacExtend",
            "3c865a90dcd4c9215f5e9395073407c870dab216"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Theorem MaxBinade : forall (r : R) (p : float), Fbounded b p -> (r <= p)%R -> (FNPred b radix precision p < r)%R -> isMax r p.",
            "VernacStartTheoremProof",
            "0fda6392a3a8c33e9f9032ab2ba86a4f7b553106"
        ],
        [
            "intros r p H' H'0 H'1.",
            "VernacExtend",
            "c7abd2f5e088bda2a46e525fd4836efdce439ee9"
        ],
        [
            "rewrite <- (Ropp_involutive r).",
            "VernacExtend",
            "cbc81d890888d09f9d795cc7d43b35a4a68248ee"
        ],
        [
            "rewrite <- (Fopp_Fopp p).",
            "VernacExtend",
            "c32d926ee332186759decd1b548ead6051bf6c45"
        ],
        [
            "apply MinOppMax.",
            "VernacExtend",
            "50ab5e110990d0b92af742b97e14d696aa1f5cc8"
        ],
        [
            "apply MinBinade; auto with real float.",
            "VernacExtend",
            "59c6f1f25fe96ba17e5ea1ac88c2f7a084160c49"
        ],
        [
            "unfold FtoRradix in |- *; rewrite Fopp_correct; auto with real.",
            "VernacExtend",
            "5806d51ffb537355f3b97b7dbadcb1cad937b8ce"
        ],
        [
            "rewrite <- (Fopp_Fopp (FNSucc b radix precision (Fopp p))).",
            "VernacExtend",
            "5ae8e4a0a792aee6e71a4acc8dc0ebd74f8dae36"
        ],
        [
            "rewrite <- FNPredFopFNSucc; auto.",
            "VernacExtend",
            "1b74fae870595f2b4580a24b58dd2b9a0724497e"
        ],
        [
            "unfold FtoRradix in |- *; rewrite Fopp_correct; auto with real arith.",
            "VernacExtend",
            "2f4315fa197dd71f9124b711f222873ddcc32191"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Theorem MaxMin : forall (p : float) (r : R), isMax r p -> r <> p :>R -> isMin r (FNPred b radix precision p).",
            "VernacStartTheoremProof",
            "53f045ff43f8fb6b9f6470b4cfcfc749edfd6e1e"
        ],
        [
            "intros p r H' H'0.",
            "VernacExtend",
            "ef14b7bae52158d1a39ab929a8fdee1f74678e05"
        ],
        [
            "rewrite <- (Fopp_Fopp (FNPred b radix precision p)).",
            "VernacExtend",
            "b21b737f1e549dbd6f82bf909fca53f28a66ddd8"
        ],
        [
            "rewrite <- (Ropp_involutive r).",
            "VernacExtend",
            "cbc81d890888d09f9d795cc7d43b35a4a68248ee"
        ],
        [
            "apply MaxOppMin.",
            "VernacExtend",
            "469b893f1fe69bae1a828b2a4e6bb7571873429e"
        ],
        [
            "rewrite FNPredFopFNSucc; auto.",
            "VernacExtend",
            "1670714f4f4437046027a6de71679e600d760692"
        ],
        [
            "rewrite Fopp_Fopp; auto.",
            "VernacExtend",
            "26fc4b804596be0ef119ea2722da2ad297b63f82"
        ],
        [
            "apply MinMax; auto.",
            "VernacExtend",
            "cd26a0feef58f1a9aa71a1b7715f08b607a82fe1"
        ],
        [
            "apply MaxOppMin; auto.",
            "VernacExtend",
            "ca43e124679cf947c4770757f3a04dffa5d11ca7"
        ],
        [
            "Contradict H'0.",
            "VernacExtend",
            "0fd20730534a0b7ed5d43e3a37dfb114d920724b"
        ],
        [
            "rewrite <- (Ropp_involutive r); rewrite H'0; auto; unfold FtoRradix in |- *; rewrite Fopp_correct; auto; apply Ropp_involutive.",
            "VernacExtend",
            "d3318c3622ccfc33459771187b64475c8cb1045a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Theorem FmaxRep : forall p q : float, isMax p q -> exists m : Z, q = Float m (Fexp p) :>R.",
            "VernacStartTheoremProof",
            "23860b78f48a70ca44ce7a67221750d267a41186"
        ],
        [
            "intros p q H'; case (FminRep (Fopp p) (Fopp q)).",
            "VernacExtend",
            "ad7a9d63f613194463278b7b00f3c8a651e21fee"
        ],
        [
            "unfold FtoRradix in |- *; rewrite Fopp_correct.",
            "VernacExtend",
            "c3c7ad16a924a974f39fb2584a800e7199b0444e"
        ],
        [
            "apply MaxOppMin; auto.",
            "VernacExtend",
            "ca43e124679cf947c4770757f3a04dffa5d11ca7"
        ],
        [
            "intros x H'0.",
            "VernacExtend",
            "e0fa2426b28413682676d18f3b761c8af158dd4e"
        ],
        [
            "exists (- x)%Z.",
            "VernacExtend",
            "9d32ce99aaa974ab152d7e3b37ea339aa8e49fb7"
        ],
        [
            "rewrite <- (Ropp_involutive (FtoRradix q)).",
            "VernacExtend",
            "7df2eda5a89251856cf919e791784db4446233e2"
        ],
        [
            "unfold FtoRradix in |- *; rewrite <- Fopp_correct.",
            "VernacExtend",
            "50f21ff3eba6340395b1c5467e11a8a2ca34511b"
        ],
        [
            "unfold FtoRradix in H'0; rewrite H'0.",
            "VernacExtend",
            "1d13ff67b33a7fb788f343b017363c0776b9946e"
        ],
        [
            "unfold FtoR in |- *; simpl in |- *; auto with real.",
            "VernacExtend",
            "ba3b25707a153a230da460a7610329e80a91a5e4"
        ],
        [
            "rewrite Ropp_Ropp_IZR; rewrite Ropp_mult_distr_l_reverse; auto.",
            "VernacExtend",
            "862421816079074029f5c5c59e79f4ac35d9b485"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "End FMinMax.",
            "VernacEndSegment",
            "036981bc1ec408431dac53b22b7f6c155259648f"
        ],
        [
            "Hint Resolve ProjectMax MonotoneMax MinOppMax MaxOppMin MinMax MinBinade MaxBinade MaxMin: float.",
            "VernacHints",
            "7a4650e897ad24a3f01d092acd5c344d0a6c0ffd"
        ]
    ],
    "proofs": [
        {
            "name": "boundNatCorrect",
            "line_nb": 14,
            "steps": [
                {
                    "command": [
                        "intros n; unfold FtoRradix, FtoR, boundNat in |- *; simpl in |- *.",
                        "VernacExtend",
                        "6f748e24d15b13117af8487be4e54ff9fb168aea"
                    ]
                },
                {
                    "command": [
                        "rewrite Rmult_1_l.",
                        "VernacExtend",
                        "1ba58092cf1ca2fa8155dfa9c64894290b0f39df"
                    ]
                },
                {
                    "command": [
                        "rewrite <- Zpower_nat_Z_powerRZ; auto with real zarith.",
                        "VernacExtend",
                        "da84cb5309b0e36832700507e8730fdd6f64c1ec"
                    ]
                },
                {
                    "command": [
                        "rewrite INR_IZR_INZ; auto with real zarith.",
                        "VernacExtend",
                        "f051a18bcefbbe00a543b27f9f26dfc52f8f1833"
                    ]
                },
                {
                    "command": [
                        "apply Rle_lt_trans with (Zabs n); [rewrite (Zabs_eq (Z_of_nat n))|idtac];auto with real zarith.",
                        "VernacExtend",
                        "e66c29dae7e85bb4dac7f388257693ac07aa39fa"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "boundBoundNat",
            "line_nb": 21,
            "steps": [
                {
                    "command": [
                        "intros n; repeat split; unfold boundNat in |- *; simpl in |- *; auto with zarith.",
                        "VernacExtend",
                        "1db6cdf5036d3f75092b4535323e11c0a8c1d30a"
                    ]
                },
                {
                    "command": [
                        "apply vNumbMoreThanOne with (radix := radix) (precision := precision); auto with zarith.",
                        "VernacExtend",
                        "c023bfd7df396d3147c21a9a7a1d343b5174973a"
                    ]
                },
                {
                    "command": [
                        "apply Zle_trans with 0%Z;[case (dExp b)|idtac]; auto with zarith.",
                        "VernacExtend",
                        "0bb97d1cff9ba145b648f2e6a6b0a9b269e3ce76"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "boundRCorrect1",
            "line_nb": 27,
            "steps": [
                {
                    "command": [
                        "intros r; case (Rle_or_lt r 0); intros H'.",
                        "VernacExtend",
                        "0c18ff62339c2a84d16a484da5f94369337b2638"
                    ]
                },
                {
                    "command": [
                        "apply Rle_lt_trans with (1 := H').",
                        "VernacExtend",
                        "f88cabda3558f47a39b41a7259d0a026fb6809e5"
                    ]
                },
                {
                    "command": [
                        "unfold boundR, boundNat, FtoRradix, FtoR in |- *; simpl in |- *; auto with real.",
                        "VernacExtend",
                        "cae9543fd5adefd42dfb0ffa2838730d15d6218d"
                    ]
                },
                {
                    "command": [
                        "rewrite Rmult_1_l; auto with real zarith.",
                        "VernacExtend",
                        "dc11b7012cf839706654216065f1a29d17d6880d"
                    ]
                },
                {
                    "command": [
                        "apply Rlt_trans with (2 := boundNatCorrect (Zabs_nat (up (Rabs r)))).",
                        "VernacExtend",
                        "3f6fcc9dc5ab705eca93e35e4b4a0f4cd2963486"
                    ]
                },
                {
                    "command": [
                        "replace (Rabs r) with r; auto with real.",
                        "VernacExtend",
                        "e3e978df3f8b2b06ba5bb57d0c701f32c0eedc08"
                    ]
                },
                {
                    "command": [
                        "apply Rlt_le_trans with (r2 := IZR (up r)); auto with real zarith.",
                        "VernacExtend",
                        "5827bfabbaa474f7af7189f2f305318b74d3d1b5"
                    ]
                },
                {
                    "command": [
                        "case (archimed r); auto.",
                        "VernacExtend",
                        "35d72750998e0a07c7615da25fca743295ad3786"
                    ]
                },
                {
                    "command": [
                        "rewrite INR_IZR_INZ; auto with real zarith.",
                        "VernacExtend",
                        "f051a18bcefbbe00a543b27f9f26dfc52f8f1833"
                    ]
                },
                {
                    "command": [
                        "unfold Rabs in |- *; case (Rcase_abs r); auto with real.",
                        "VernacExtend",
                        "edf3b8530ffb9234b8d0702c1544ef952597c32f"
                    ]
                },
                {
                    "command": [
                        "intros H'0; Contradict H'0; auto with real.",
                        "VernacExtend",
                        "ec9b9ed8334bdcdad4219636b98b40e70298cf25"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "boundRrOpp",
            "line_nb": 40,
            "steps": [
                {
                    "command": [
                        "intros R; unfold boundR in |- *.",
                        "VernacExtend",
                        "a3f172cedfbb3ba6898514c9177b9f16610f7704"
                    ]
                },
                {
                    "command": [
                        "rewrite Rabs_Ropp; auto.",
                        "VernacExtend",
                        "ed3e1274bf4ec729c896bed1e0823ab3ad3740b1"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "boundRCorrect2",
            "line_nb": 44,
            "steps": [
                {
                    "command": [
                        "intros r; case (Rle_or_lt r 0); intros H'.",
                        "VernacExtend",
                        "0c18ff62339c2a84d16a484da5f94369337b2638"
                    ]
                },
                {
                    "command": [
                        "rewrite boundRrOpp.",
                        "VernacExtend",
                        "6440b02de342fbb92994194b7d5bd7f59c5dfacf"
                    ]
                },
                {
                    "command": [
                        "pattern r at 2 in |- *; rewrite <- (Ropp_involutive r).",
                        "VernacExtend",
                        "a10927f8c549f351fd5d7ecacbae84fdd7954326"
                    ]
                },
                {
                    "command": [
                        "unfold FtoRradix in |- *; rewrite Fopp_correct.",
                        "VernacExtend",
                        "c3c7ad16a924a974f39fb2584a800e7199b0444e"
                    ]
                },
                {
                    "command": [
                        "apply Ropp_lt_contravar; apply boundRCorrect1; auto.",
                        "VernacExtend",
                        "bf76dd3d55ec0be874451f7a3c429a13fc2e7f38"
                    ]
                },
                {
                    "command": [
                        "apply Rle_lt_trans with 0%R; auto.",
                        "VernacExtend",
                        "bb99babbe7786d31e8d10c10d1a402bfc9128527"
                    ]
                },
                {
                    "command": [
                        "replace 0%R with (-0)%R; auto with real.",
                        "VernacExtend",
                        "ad9a3c816968bd85bd0ee7d9d06b032f07b0b811"
                    ]
                },
                {
                    "command": [
                        "unfold FtoRradix in |- *; rewrite Fopp_correct.",
                        "VernacExtend",
                        "c3c7ad16a924a974f39fb2584a800e7199b0444e"
                    ]
                },
                {
                    "command": [
                        "apply Ropp_le_contravar.",
                        "VernacExtend",
                        "ac8d32b190d111aa8834547674121bcf3bb8a0ed"
                    ]
                },
                {
                    "command": [
                        "unfold boundR, boundNat, FtoRradix, FtoR in |- *; simpl in |- *; auto with real zarith.",
                        "VernacExtend",
                        "45dce45aa41b775d33d56f5fe93ac5c772336115"
                    ]
                },
                {
                    "command": [
                        "rewrite Rmult_1_l; apply Rlt_le; auto with real zarith arith.",
                        "VernacExtend",
                        "108887184e648488e131326f6b0f50098384d9fb"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "mBFadic_correct1",
            "line_nb": 58,
            "steps": [
                {
                    "command": [
                        "intros r q.",
                        "VernacExtend",
                        "5104908694ace0f2a281c43323151e9344920cf7"
                    ]
                },
                {
                    "command": [
                        "case (Zle_or_lt (Fexp (boundR r)) (Fexp q)); intros H'.",
                        "VernacExtend",
                        "da722e099142b13b4c35ea9ace17db3a57555441"
                    ]
                },
                {
                    "command": [
                        "intros H'0 H'1 H'2 H'3; case H'0.",
                        "VernacExtend",
                        "4dae09876251ae2015f5a0b9f2255260235194c9"
                    ]
                },
                {
                    "command": [
                        "apply is_Fzero_rep2 with (radix := radix); auto.",
                        "VernacExtend",
                        "7afb177b35a132d9f4718d431d0e7c5582c48a5a"
                    ]
                },
                {
                    "command": [
                        "rewrite <- FshiftCorrect with (n := Zabs_nat (Fexp q - Fexp (boundR r))) (x := q); auto with arith.",
                        "VernacExtend",
                        "f267d1034fc54fefd72c2fdb0946b18389afcba3"
                    ]
                },
                {
                    "command": [
                        "apply is_Fzero_rep1 with (radix := radix).",
                        "VernacExtend",
                        "9335b0d9b33c0a02b6ea8b51109dfda8354a9bf2"
                    ]
                },
                {
                    "command": [
                        "unfold is_Fzero in |- *.",
                        "VernacExtend",
                        "8fe537e66e75bc61729cb05045a50e709911e2a2"
                    ]
                },
                {
                    "command": [
                        "cut (forall p : Z, (- 1%nat < p)%Z -> (p < 1%nat)%Z -> p = 0%Z); [ intros tmp; apply tmp | idtac ].",
                        "VernacExtend",
                        "8f67daacf71c56f6a97a77cc3b2bbe932acebba6"
                    ]
                },
                {
                    "command": [
                        "replace (- 1%nat)%Z with (Fnum (Fopp (boundR r))).",
                        "VernacExtend",
                        "c7e4e01407088d4a08acffe273cdfeeb41d1f26a"
                    ]
                },
                {
                    "command": [
                        "apply Rlt_Fexp_eq_Zlt with (radix := radix); auto with real zarith.",
                        "VernacExtend",
                        "29c348719ef70659c2d7ec4c73b01f044b263d42"
                    ]
                },
                {
                    "command": [
                        "rewrite FshiftCorrect; auto.",
                        "VernacExtend",
                        "a32fc58b728c0efc747f4947893df95ea3a250c0"
                    ]
                },
                {
                    "command": [
                        "unfold Fshift in |- *; simpl in |- *.",
                        "VernacExtend",
                        "bc2226e4b5a4ef5bbaea414d285c81f30a1eb932"
                    ]
                },
                {
                    "command": [
                        "rewrite (fun x y => inj_abs (x - y)); auto with zarith.",
                        "VernacExtend",
                        "c88659bb0519118054e9e0b1cdf9eb5fdbb91b23"
                    ]
                },
                {
                    "command": [
                        "simpl in |- *; auto.",
                        "VernacExtend",
                        "9b631374b1d3067f703fd99c5dc6e1e5c8405957"
                    ]
                },
                {
                    "command": [
                        "replace (Z_of_nat 1) with (Fnum (boundR r)).",
                        "VernacExtend",
                        "bf29dda96db088c16d047540fcbcdb0cb80ed1e1"
                    ]
                },
                {
                    "command": [
                        "apply Rlt_Fexp_eq_Zlt with (radix := radix); auto with zarith.",
                        "VernacExtend",
                        "2012c168cda168a8a6d7df57e3070cd563cc67d0"
                    ]
                },
                {
                    "command": [
                        "rewrite FshiftCorrect; auto.",
                        "VernacExtend",
                        "a32fc58b728c0efc747f4947893df95ea3a250c0"
                    ]
                },
                {
                    "command": [
                        "unfold Fshift in |- *; simpl in |- *.",
                        "VernacExtend",
                        "bc2226e4b5a4ef5bbaea414d285c81f30a1eb932"
                    ]
                },
                {
                    "command": [
                        "rewrite inj_abs; auto with zarith.",
                        "VernacExtend",
                        "d832d70d6f4177fa3d020760f1ccab18c59abdc1"
                    ]
                },
                {
                    "command": [
                        "generalize H'; simpl in |- *; auto with zarith.",
                        "VernacExtend",
                        "5925fc82500f3b8c50419433ba95603e51b3bca8"
                    ]
                },
                {
                    "command": [
                        "simpl in |- *; auto.",
                        "VernacExtend",
                        "9b631374b1d3067f703fd99c5dc6e1e5c8405957"
                    ]
                },
                {
                    "command": [
                        "intros p0; case p0; simpl in |- *; auto with zarith.",
                        "VernacExtend",
                        "4063f19a3e594999022bf3a378b817f87f60faaf"
                    ]
                },
                {
                    "command": [
                        "intros H'0 H'1 H'2 H'3; unfold mBFloat in |- *.",
                        "VernacExtend",
                        "25c72355d486aa4241a4163fa6c1cbab6cd1b37c"
                    ]
                },
                {
                    "command": [
                        "replace q with ((fun p : Z * Z => Float (fst p) (snd p)) (Fnum q, Fexp q)).",
                        "VernacExtend",
                        "656f8782f923007b5d91eb867d230984acdbe712"
                    ]
                },
                {
                    "command": [
                        "apply in_map with (f := fun p : Z * Z => Float (fst p) (snd p)); auto.",
                        "VernacExtend",
                        "b903c9e5ad7ffcd63bb277e2437e178381e5660f"
                    ]
                },
                {
                    "command": [
                        "apply mProd_correct; auto.",
                        "VernacExtend",
                        "eaa974a13efcb911f9b074ea3cbb614348d202ae"
                    ]
                },
                {
                    "command": [
                        "apply mZlist_correct; auto with float.",
                        "VernacExtend",
                        "8d420d11f5e0f8dfef6eaf29596b6ea0782db158"
                    ]
                },
                {
                    "command": [
                        "apply Zle_Zabs_inv1; auto with float.",
                        "VernacExtend",
                        "dc30d044e5ccc0d380ccb8773e9c23810205e57a"
                    ]
                },
                {
                    "command": [
                        "unfold pPred in |- *; apply Zle_Zpred; auto with float.",
                        "VernacExtend",
                        "d94d852165b44e2cc96506aa42859931541d7757"
                    ]
                },
                {
                    "command": [
                        "apply Zle_Zabs_inv2; auto with float.",
                        "VernacExtend",
                        "667402bb2ce0dc70a2ee5e0ea23d620315d41716"
                    ]
                },
                {
                    "command": [
                        "unfold pPred in |- *; apply Zle_Zpred; auto with float.",
                        "VernacExtend",
                        "d94d852165b44e2cc96506aa42859931541d7757"
                    ]
                },
                {
                    "command": [
                        "apply mZlist_correct; auto with float.",
                        "VernacExtend",
                        "8d420d11f5e0f8dfef6eaf29596b6ea0782db158"
                    ]
                },
                {
                    "command": [
                        "auto with zarith.",
                        "VernacExtend",
                        "23f42fd3236dcece4a40b3a666dce57fea69a9c0"
                    ]
                },
                {
                    "command": [
                        "case q; simpl in |- *; auto with zarith.",
                        "VernacExtend",
                        "9f768c32c12a81e05203c1cb1428ab55a5676821"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "mBFadic_correct2",
            "line_nb": 94,
            "steps": [
                {
                    "command": [
                        "intros r; unfold mBFloat in |- *.",
                        "VernacExtend",
                        "1989f95614f88190545569f721b0231b01560abf"
                    ]
                },
                {
                    "command": [
                        "replace (boundR r) with ((fun p : Z * Z => Float (fst p) (snd p)) (Fnum (boundR r), Fexp (boundR r))).",
                        "VernacExtend",
                        "421f96f8eb261dac3d92b1834c4b0103ce5f2c17"
                    ]
                },
                {
                    "command": [
                        "apply in_map with (f := fun p : Z * Z => Float (fst p) (snd p)); auto.",
                        "VernacExtend",
                        "b903c9e5ad7ffcd63bb277e2437e178381e5660f"
                    ]
                },
                {
                    "command": [
                        "apply mProd_correct; auto.",
                        "VernacExtend",
                        "eaa974a13efcb911f9b074ea3cbb614348d202ae"
                    ]
                },
                {
                    "command": [
                        "apply mZlist_correct; auto.",
                        "VernacExtend",
                        "efeb263b1a33922a78d81718915c4b96cdbc072d"
                    ]
                },
                {
                    "command": [
                        "unfold boundR, boundNat in |- *; simpl in |- *; auto with zarith.",
                        "VernacExtend",
                        "60bf41d90d662797b8677ac3efa4899176146386"
                    ]
                },
                {
                    "command": [
                        "apply Zle_trans with (- (0))%Z; auto with zarith.",
                        "VernacExtend",
                        "a31ffa08cf78a0b8e230c3d25b3d16528cc44041"
                    ]
                },
                {
                    "command": [
                        "apply Zle_Zopp; unfold pPred in |- *; apply Zle_Zpred; simpl in |- *.",
                        "VernacExtend",
                        "d7e07e530006d5f7123fb9e8ea6df58d728b4352"
                    ]
                },
                {
                    "command": [
                        "apply Zlt_trans with 1%Z; auto with zarith.",
                        "VernacExtend",
                        "31fe79dd229b0a596cccb8b23d752848c7e28aef"
                    ]
                },
                {
                    "command": [
                        "apply vNumbMoreThanOne with (3 := pGivesBound); auto.",
                        "VernacExtend",
                        "ca91faaa3c6fafb742371af78d2dd100daad1f6b"
                    ]
                },
                {
                    "command": [
                        "unfold boundR, boundNat in |- *; simpl in |- *; auto with zarith.",
                        "VernacExtend",
                        "60bf41d90d662797b8677ac3efa4899176146386"
                    ]
                },
                {
                    "command": [
                        "unfold pPred in |- *; apply Zle_Zpred; simpl in |- *.",
                        "VernacExtend",
                        "f5f15a4df0e1c7ae31241d132f4c353720980490"
                    ]
                },
                {
                    "command": [
                        "unfold boundR, boundNat in |- *; simpl in |- *; auto with zarith.",
                        "VernacExtend",
                        "60bf41d90d662797b8677ac3efa4899176146386"
                    ]
                },
                {
                    "command": [
                        "apply vNumbMoreThanOne with (3 := pGivesBound); auto.",
                        "VernacExtend",
                        "ca91faaa3c6fafb742371af78d2dd100daad1f6b"
                    ]
                },
                {
                    "command": [
                        "apply mZlist_correct; auto.",
                        "VernacExtend",
                        "efeb263b1a33922a78d81718915c4b96cdbc072d"
                    ]
                },
                {
                    "command": [
                        "unfold boundR, boundNat in |- *; simpl in |- *; auto with zarith.",
                        "VernacExtend",
                        "60bf41d90d662797b8677ac3efa4899176146386"
                    ]
                },
                {
                    "command": [
                        "apply Zle_trans with 0%Z; auto with zarith arith.",
                        "VernacExtend",
                        "740687e11faddea4e20e2d1d6570ff6777850f31"
                    ]
                },
                {
                    "command": [
                        "case (dExp b); auto with zarith.",
                        "VernacExtend",
                        "1550cae20c90f23304536260367db5457d74774a"
                    ]
                },
                {
                    "command": [
                        "case (boundR r); simpl in |- *; auto with zarith.",
                        "VernacExtend",
                        "314a9e909817a16e4a2577cad0205a36a13a14c1"
                    ]
                },
                {
                    "command": [
                        "case (boundR r); simpl in |- *; auto with zarith.",
                        "VernacExtend",
                        "314a9e909817a16e4a2577cad0205a36a13a14c1"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "mBFadic_correct3",
            "line_nb": 116,
            "steps": [
                {
                    "command": [
                        "intros r; unfold mBFloat in |- *.",
                        "VernacExtend",
                        "1989f95614f88190545569f721b0231b01560abf"
                    ]
                },
                {
                    "command": [
                        "replace (Fopp (boundR r)) with ((fun p : Z * Z => Float (fst p) (snd p)) (Fnum (Fopp (boundR r)), Fexp (Fopp (boundR r)))).",
                        "VernacExtend",
                        "0ac9fa83075c3d088f592db5872acb89c54e2266"
                    ]
                },
                {
                    "command": [
                        "apply in_map with (f := fun p : Z * Z => Float (fst p) (snd p)); auto.",
                        "VernacExtend",
                        "b903c9e5ad7ffcd63bb277e2437e178381e5660f"
                    ]
                },
                {
                    "command": [
                        "apply mProd_correct; auto.",
                        "VernacExtend",
                        "eaa974a13efcb911f9b074ea3cbb614348d202ae"
                    ]
                },
                {
                    "command": [
                        "apply mZlist_correct; auto.",
                        "VernacExtend",
                        "efeb263b1a33922a78d81718915c4b96cdbc072d"
                    ]
                },
                {
                    "command": [
                        "unfold boundR, boundNat in |- *; simpl in |- *; auto with zarith.",
                        "VernacExtend",
                        "60bf41d90d662797b8677ac3efa4899176146386"
                    ]
                },
                {
                    "command": [
                        "replace (-1)%Z with (- Z_of_nat 1)%Z; auto with zarith.",
                        "VernacExtend",
                        "7834cd561214a82ff4a4d13d69fb01f7fc441d43"
                    ]
                },
                {
                    "command": [
                        "apply Zle_Zopp.",
                        "VernacExtend",
                        "4116fffd3d82e798294ccbceb07ce04df95b160a"
                    ]
                },
                {
                    "command": [
                        "unfold pPred in |- *; apply Zle_Zpred; simpl in |- *.",
                        "VernacExtend",
                        "f5f15a4df0e1c7ae31241d132f4c353720980490"
                    ]
                },
                {
                    "command": [
                        "apply (vNumbMoreThanOne radix) with (precision := precision); auto with zarith.",
                        "VernacExtend",
                        "c29f7cde7313a0159f5e6e723b15563e2dc77df2"
                    ]
                },
                {
                    "command": [
                        "unfold pPred in |- *; apply Zle_Zpred; simpl in |- *.",
                        "VernacExtend",
                        "f5f15a4df0e1c7ae31241d132f4c353720980490"
                    ]
                },
                {
                    "command": [
                        "red in |- *; simpl in |- *; auto.",
                        "VernacExtend",
                        "1d43d4029690c353fb7edf6ba67b74a84697f82f"
                    ]
                },
                {
                    "command": [
                        "apply mZlist_correct; auto.",
                        "VernacExtend",
                        "efeb263b1a33922a78d81718915c4b96cdbc072d"
                    ]
                },
                {
                    "command": [
                        "unfold boundR, boundNat in |- *; simpl in |- *; auto with zarith.",
                        "VernacExtend",
                        "60bf41d90d662797b8677ac3efa4899176146386"
                    ]
                },
                {
                    "command": [
                        "apply Zle_trans with 0%Z; auto with zarith.",
                        "VernacExtend",
                        "7bc5435926f0aada5353ec65cce7fa187ea0bde2"
                    ]
                },
                {
                    "command": [
                        "case (dExp b); auto with zarith.",
                        "VernacExtend",
                        "1550cae20c90f23304536260367db5457d74774a"
                    ]
                },
                {
                    "command": [
                        "case (boundR r); simpl in |- *; auto with zarith.",
                        "VernacExtend",
                        "314a9e909817a16e4a2577cad0205a36a13a14c1"
                    ]
                },
                {
                    "command": [
                        "case (boundR r); simpl in |- *; auto with zarith.",
                        "VernacExtend",
                        "314a9e909817a16e4a2577cad0205a36a13a14c1"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "mBFadic_correct4",
            "line_nb": 136,
            "steps": [
                {
                    "command": [
                        "intros p; unfold mBFloat in |- *.",
                        "VernacExtend",
                        "675f0c5a6a0cac1aef250b37a1faa4a9b74c6d0c"
                    ]
                },
                {
                    "command": [
                        "replace (Float 0%nat (- dExp b)) with ((fun p : Z * Z => Float (fst p) (snd p)) (Fnum (Float 0%nat (- dExp b)), Fexp (Float 0%nat (- dExp b)))).",
                        "VernacExtend",
                        "5f8c1037640318442c8aa77d65289cb969755ec8"
                    ]
                },
                {
                    "command": [
                        "apply in_map with (f := fun p : Z * Z => Float (fst p) (snd p)); auto.",
                        "VernacExtend",
                        "b903c9e5ad7ffcd63bb277e2437e178381e5660f"
                    ]
                },
                {
                    "command": [
                        "apply mProd_correct; auto.",
                        "VernacExtend",
                        "eaa974a13efcb911f9b074ea3cbb614348d202ae"
                    ]
                },
                {
                    "command": [
                        "apply mZlist_correct; auto.",
                        "VernacExtend",
                        "efeb263b1a33922a78d81718915c4b96cdbc072d"
                    ]
                },
                {
                    "command": [
                        "simpl in |- *; auto with zarith.",
                        "VernacExtend",
                        "61d3cdc6299cf8abf87703c074ca4503f0f27a12"
                    ]
                },
                {
                    "command": [
                        "replace 0%Z with (- (0))%Z; [ idtac | simpl in |- *; auto ].",
                        "VernacExtend",
                        "e356b6726c399587a8afcddd43813e0ddd2432be"
                    ]
                },
                {
                    "command": [
                        "apply Zle_Zopp; unfold pPred in |- *; apply Zle_Zpred.",
                        "VernacExtend",
                        "daa24dbb06b9893c9d30e2e887098a4ea45366ed"
                    ]
                },
                {
                    "command": [
                        "red in |- *; simpl in |- *; auto with zarith.",
                        "VernacExtend",
                        "577ef83cd146ec1fd66ecc4ecb4d55a439a398bb"
                    ]
                },
                {
                    "command": [
                        "simpl in |- *; auto with zarith.",
                        "VernacExtend",
                        "61d3cdc6299cf8abf87703c074ca4503f0f27a12"
                    ]
                },
                {
                    "command": [
                        "unfold pPred in |- *; apply Zle_Zpred.",
                        "VernacExtend",
                        "527a3d5a72d2218dfceed34bf662d551ff76ee38"
                    ]
                },
                {
                    "command": [
                        "red in |- *; simpl in |- *; auto with zarith.",
                        "VernacExtend",
                        "577ef83cd146ec1fd66ecc4ecb4d55a439a398bb"
                    ]
                },
                {
                    "command": [
                        "apply mZlist_correct; auto.",
                        "VernacExtend",
                        "efeb263b1a33922a78d81718915c4b96cdbc072d"
                    ]
                },
                {
                    "command": [
                        "simpl in |- *; auto with zarith.",
                        "VernacExtend",
                        "61d3cdc6299cf8abf87703c074ca4503f0f27a12"
                    ]
                },
                {
                    "command": [
                        "unfold boundR, boundNat in |- *; simpl in |- *; auto with zarith.",
                        "VernacExtend",
                        "60bf41d90d662797b8677ac3efa4899176146386"
                    ]
                },
                {
                    "command": [
                        "apply Zle_trans with 0%Z; auto with zarith.",
                        "VernacExtend",
                        "7bc5435926f0aada5353ec65cce7fa187ea0bde2"
                    ]
                },
                {
                    "command": [
                        "case (dExp b); auto with zarith.",
                        "VernacExtend",
                        "1550cae20c90f23304536260367db5457d74774a"
                    ]
                },
                {
                    "command": [
                        "simpl in |- *; auto with zarith.",
                        "VernacExtend",
                        "61d3cdc6299cf8abf87703c074ca4503f0f27a12"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "mBPadic_Fbounded",
            "line_nb": 156,
            "steps": [
                {
                    "command": [
                        "intros p r H'; red in |- *; repeat (split; auto).",
                        "VernacExtend",
                        "512027c207f0b52b19a948f8cabf8556a41b7709"
                    ]
                },
                {
                    "command": [
                        "apply Zpred_Zle_Zabs_intro.",
                        "VernacExtend",
                        "9878835894e4655ae8930721907e3dec68090b61"
                    ]
                },
                {
                    "command": [
                        "apply mZlist_correct_rev1 with (q := Zpred (Zpos (vNum b))); auto with real.",
                        "VernacExtend",
                        "3cd5760abeed35e8d94a09e6a639dc932f997ac3"
                    ]
                },
                {
                    "command": [
                        "apply mProd_correct_rev1 with (l2 := mZlist (- dExp b) (Fexp (boundR r))) (C := (Z * Z)%type) (b := Fexp p); auto.",
                        "VernacExtend",
                        "560a152635e19204217b03164ee3d2eeedaa65f8"
                    ]
                },
                {
                    "command": [
                        "apply in_map_inv with (f := fun p : Z * Z => Float (fst p) (snd p)); auto.",
                        "VernacExtend",
                        "98afe0f0efc9c2f9df40bcb38490ee6e7c62a0bd"
                    ]
                },
                {
                    "command": [
                        "intros a1 b1; case a1; case b1; simpl in |- *.",
                        "VernacExtend",
                        "4342b60e139388362b69d30083db07d96c2ede4a"
                    ]
                },
                {
                    "command": [
                        "intros z z0 z1 z2 H'0; inversion H'0; auto.",
                        "VernacExtend",
                        "d1cf97d8bfc52dd6516aaeb80a89cafc139292f6"
                    ]
                },
                {
                    "command": [
                        "generalize H'; case p; auto.",
                        "VernacExtend",
                        "df9f563d8b9711ab890a0401ea1c4cd06fd0d01b"
                    ]
                },
                {
                    "command": [
                        "apply mZlist_correct_rev2 with (p := (- Zpred (Zpos (vNum b)))%Z); auto.",
                        "VernacExtend",
                        "e36487c5c06cb36f1012e00aae49b8f816a16f7c"
                    ]
                },
                {
                    "command": [
                        "apply mProd_correct_rev1 with (l2 := mZlist (- dExp b) (Fexp (boundR r))) (C := (Z * Z)%type) (b := Fexp p); auto.",
                        "VernacExtend",
                        "560a152635e19204217b03164ee3d2eeedaa65f8"
                    ]
                },
                {
                    "command": [
                        "apply in_map_inv with (f := fun p : Z * Z => Float (fst p) (snd p)); auto.",
                        "VernacExtend",
                        "98afe0f0efc9c2f9df40bcb38490ee6e7c62a0bd"
                    ]
                },
                {
                    "command": [
                        "intros a1 b1; case a1; case b1; simpl in |- *.",
                        "VernacExtend",
                        "4342b60e139388362b69d30083db07d96c2ede4a"
                    ]
                },
                {
                    "command": [
                        "intros z z0 z1 z2 H'0; inversion H'0; auto.",
                        "VernacExtend",
                        "d1cf97d8bfc52dd6516aaeb80a89cafc139292f6"
                    ]
                },
                {
                    "command": [
                        "generalize H'; case p; auto.",
                        "VernacExtend",
                        "df9f563d8b9711ab890a0401ea1c4cd06fd0d01b"
                    ]
                },
                {
                    "command": [
                        "apply mZlist_correct_rev1 with (q := Fexp (boundR r)); auto.",
                        "VernacExtend",
                        "e4e77198b4e887e13e9b66b7e36b88d909b35c32"
                    ]
                },
                {
                    "command": [
                        "apply mProd_correct_rev2 with (l1 := mZlist (- pPred (vNum b)) (pPred (vNum b))) (C := (Z * Z)%type) (a := Fnum p); auto.",
                        "VernacExtend",
                        "36dcc3f65720909bdc2d40cdb37d5262f07681c1"
                    ]
                },
                {
                    "command": [
                        "apply in_map_inv with (f := fun p : Z * Z => Float (fst p) (snd p)); auto.",
                        "VernacExtend",
                        "98afe0f0efc9c2f9df40bcb38490ee6e7c62a0bd"
                    ]
                },
                {
                    "command": [
                        "intros a1 b1; case a1; case b1; simpl in |- *.",
                        "VernacExtend",
                        "4342b60e139388362b69d30083db07d96c2ede4a"
                    ]
                },
                {
                    "command": [
                        "intros z z0 z1 z2 H'0; inversion H'0; auto.",
                        "VernacExtend",
                        "d1cf97d8bfc52dd6516aaeb80a89cafc139292f6"
                    ]
                },
                {
                    "command": [
                        "generalize H'; case p; auto.",
                        "VernacExtend",
                        "df9f563d8b9711ab890a0401ea1c4cd06fd0d01b"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "isMin_inv1",
            "line_nb": 181,
            "steps": [
                {
                    "command": [
                        "intros p r H; case H; intros H1 H2; case H2; auto.",
                        "VernacExtend",
                        "0b5558c6165a862bb021b751dac27908542a04e8"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "ProjectMin",
            "line_nb": 184,
            "steps": [
                {
                    "command": [
                        "red in |- *.",
                        "VernacExtend",
                        "95a3fb9e13ce19fdc8e335912fb83e57a9512b14"
                    ]
                },
                {
                    "command": [
                        "intros p q H' H'0; apply Rle_antisym.",
                        "VernacExtend",
                        "3bc6f16db1d3e1ea74ecf26a3386948d57738654"
                    ]
                },
                {
                    "command": [
                        "elim H'0; intros H'1 H'2; elim H'2; intros H'3 H'4; apply H'4; clear H'2; auto with real.",
                        "VernacExtend",
                        "739ce475f70983da46aacde7e77df7e4317169b1"
                    ]
                },
                {
                    "command": [
                        "apply isMin_inv1 with (1 := H'0); auto.",
                        "VernacExtend",
                        "45c58a1aaf2d483e20482e8493b46e9b5800029c"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "MonotoneMin",
            "line_nb": 190,
            "steps": [
                {
                    "command": [
                        "red in |- *.",
                        "VernacExtend",
                        "95a3fb9e13ce19fdc8e335912fb83e57a9512b14"
                    ]
                },
                {
                    "command": [
                        "intros p q p' q' H' H'0 H'1.",
                        "VernacExtend",
                        "f4c56fd849f8bf2e90c31c6b70a192c1c381567b"
                    ]
                },
                {
                    "command": [
                        "elim H'1; intros H'2 H'3; elim H'3; intros H'4 H'5; apply H'5; clear H'3 H'1; auto.",
                        "VernacExtend",
                        "e0da0499c1f573aaf7ef73e2f84929a3c814a749"
                    ]
                },
                {
                    "command": [
                        "case H'0; auto.",
                        "VernacExtend",
                        "c95954a4912ccfdd6e4780b3eecd4f9a4fbca076"
                    ]
                },
                {
                    "command": [
                        "apply Rle_trans with p; auto.",
                        "VernacExtend",
                        "338aaf54f5c09fb229605527d7fafbeaece370ea"
                    ]
                },
                {
                    "command": [
                        "apply isMin_inv1 with (1 := H'0); auto.",
                        "VernacExtend",
                        "45c58a1aaf2d483e20482e8493b46e9b5800029c"
                    ]
                },
                {
                    "command": [
                        "apply Rlt_le; auto.",
                        "VernacExtend",
                        "4003e3e1c449ee89cad9e953d0a562db8235648c"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "isMax_inv1",
            "line_nb": 200,
            "steps": [
                {
                    "command": [
                        "intros p r H; case H; intros H1 H2; case H2; auto.",
                        "VernacExtend",
                        "0b5558c6165a862bb021b751dac27908542a04e8"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "ProjectMax",
            "line_nb": 203,
            "steps": [
                {
                    "command": [
                        "red in |- *.",
                        "VernacExtend",
                        "95a3fb9e13ce19fdc8e335912fb83e57a9512b14"
                    ]
                },
                {
                    "command": [
                        "intros p q H' H'0; apply Rle_antisym.",
                        "VernacExtend",
                        "3bc6f16db1d3e1ea74ecf26a3386948d57738654"
                    ]
                },
                {
                    "command": [
                        "apply isMax_inv1 with (1 := H'0); auto.",
                        "VernacExtend",
                        "ac8b9cab33e318bbf722eb1a908dfd9ac6ac6d62"
                    ]
                },
                {
                    "command": [
                        "elim H'0; intros H'1 H'2; elim H'2; intros H'3 H'4; apply H'4; clear H'2; auto with real.",
                        "VernacExtend",
                        "739ce475f70983da46aacde7e77df7e4317169b1"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "MonotoneMax",
            "line_nb": 209,
            "steps": [
                {
                    "command": [
                        "red in |- *.",
                        "VernacExtend",
                        "95a3fb9e13ce19fdc8e335912fb83e57a9512b14"
                    ]
                },
                {
                    "command": [
                        "intros p q p' q' H' H'0 H'1.",
                        "VernacExtend",
                        "f4c56fd849f8bf2e90c31c6b70a192c1c381567b"
                    ]
                },
                {
                    "command": [
                        "elim H'0; intros H'2 H'3; elim H'3; intros H'4 H'5; apply H'5; clear H'3 H'0.",
                        "VernacExtend",
                        "17742175e87fbd897c1df90408a8fbdf90fd97ce"
                    ]
                },
                {
                    "command": [
                        "case H'1; auto.",
                        "VernacExtend",
                        "a44f1b914e489dd19b841fdfab025ba14e3d8f86"
                    ]
                },
                {
                    "command": [
                        "apply Rle_trans with q; auto.",
                        "VernacExtend",
                        "006f2e8d634e24fb5bd736ea5548e0e9046485f8"
                    ]
                },
                {
                    "command": [
                        "apply Rlt_le; auto.",
                        "VernacExtend",
                        "4003e3e1c449ee89cad9e953d0a562db8235648c"
                    ]
                },
                {
                    "command": [
                        "apply isMax_inv1 with (1 := H'1); auto.",
                        "VernacExtend",
                        "8dcad7c97174b3a0dfcba92f1822fa70fea18c19"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "MinEq",
            "line_nb": 218,
            "steps": [
                {
                    "command": [
                        "intros p q r H' H'0; apply Rle_antisym.",
                        "VernacExtend",
                        "2c2c99283a21918a2b2ed5d126374f20e3e983c2"
                    ]
                },
                {
                    "command": [
                        "elim H'0; intros H'1 H'2; elim H'2; intros H'3 H'4; apply H'4; clear H'2 H'0; auto.",
                        "VernacExtend",
                        "25175884887a953c8df9e7d25933e7946968a71c"
                    ]
                },
                {
                    "command": [
                        "case H'; auto.",
                        "VernacExtend",
                        "ebc5b3ac68f03e20b8a194319f607aaad1bf60b4"
                    ]
                },
                {
                    "command": [
                        "apply isMin_inv1 with (1 := H'); auto.",
                        "VernacExtend",
                        "a02228ba9b5872b22779fa417c5278a79ee12e4e"
                    ]
                },
                {
                    "command": [
                        "elim H'; intros H'1 H'2; elim H'2; intros H'3 H'4; apply H'4; clear H'2 H'; auto.",
                        "VernacExtend",
                        "5ff0a5a2077b900145fd34fa140961d8e549e674"
                    ]
                },
                {
                    "command": [
                        "case H'0; auto.",
                        "VernacExtend",
                        "c95954a4912ccfdd6e4780b3eecd4f9a4fbca076"
                    ]
                },
                {
                    "command": [
                        "apply isMin_inv1 with (1 := H'0); auto.",
                        "VernacExtend",
                        "45c58a1aaf2d483e20482e8493b46e9b5800029c"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "MaxEq",
            "line_nb": 227,
            "steps": [
                {
                    "command": [
                        "intros p q r H' H'0; apply Rle_antisym.",
                        "VernacExtend",
                        "2c2c99283a21918a2b2ed5d126374f20e3e983c2"
                    ]
                },
                {
                    "command": [
                        "elim H'; intros H'1 H'2; elim H'2; intros H'3 H'4; apply H'4; clear H'2 H'; auto.",
                        "VernacExtend",
                        "5ff0a5a2077b900145fd34fa140961d8e549e674"
                    ]
                },
                {
                    "command": [
                        "case H'0; auto.",
                        "VernacExtend",
                        "c95954a4912ccfdd6e4780b3eecd4f9a4fbca076"
                    ]
                },
                {
                    "command": [
                        "apply isMax_inv1 with (1 := H'0); auto.",
                        "VernacExtend",
                        "ac8b9cab33e318bbf722eb1a908dfd9ac6ac6d62"
                    ]
                },
                {
                    "command": [
                        "elim H'0; intros H'1 H'2; elim H'2; intros H'3 H'4; apply H'4; clear H'2 H'0; auto.",
                        "VernacExtend",
                        "25175884887a953c8df9e7d25933e7946968a71c"
                    ]
                },
                {
                    "command": [
                        "case H'; auto.",
                        "VernacExtend",
                        "ebc5b3ac68f03e20b8a194319f607aaad1bf60b4"
                    ]
                },
                {
                    "command": [
                        "apply isMax_inv1 with (1 := H'); auto.",
                        "VernacExtend",
                        "4e1566e3049c97d437702d52126f137bfe3325bd"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "MinOppMax",
            "line_nb": 236,
            "steps": [
                {
                    "command": [
                        "intros p r H'; split.",
                        "VernacExtend",
                        "596d6060adaa45f2c778a5b321b84be5016c58a7"
                    ]
                },
                {
                    "command": [
                        "apply oppBounded; case H'; auto.",
                        "VernacExtend",
                        "c113891b193dddf7a409a546bb28290e567dc7b9"
                    ]
                },
                {
                    "command": [
                        "split.",
                        "VernacExtend",
                        "55abc140132bd88981001ac656020469a8d503eb"
                    ]
                },
                {
                    "command": [
                        "unfold FtoRradix in |- *; rewrite Fopp_correct.",
                        "VernacExtend",
                        "c3c7ad16a924a974f39fb2584a800e7199b0444e"
                    ]
                },
                {
                    "command": [
                        "apply Ropp_le_contravar; apply isMin_inv1 with (1 := H'); auto.",
                        "VernacExtend",
                        "16d66f55b1ee335a24fbc857ba01eea0f23b9478"
                    ]
                },
                {
                    "command": [
                        "intros f H'0 H'1.",
                        "VernacExtend",
                        "53dd8ac5cda3804e9f3487c315cbff7f7f54bbe7"
                    ]
                },
                {
                    "command": [
                        "rewrite <- (Fopp_Fopp f).",
                        "VernacExtend",
                        "979fe1f41242b0442a40880253df3fa10d62442b"
                    ]
                },
                {
                    "command": [
                        "unfold FtoRradix in |- *; rewrite Fopp_correct; rewrite Fopp_correct.",
                        "VernacExtend",
                        "fcadfc95f95f621988539bf920ab7e43433c5c49"
                    ]
                },
                {
                    "command": [
                        "apply Ropp_le_contravar.",
                        "VernacExtend",
                        "ac8d32b190d111aa8834547674121bcf3bb8a0ed"
                    ]
                },
                {
                    "command": [
                        "elim H'.",
                        "VernacExtend",
                        "1cae423a267f3a1a6990051e754342f63add38fd"
                    ]
                },
                {
                    "command": [
                        "intros H'2 H'3; elim H'3; intros H'4 H'5; apply H'5; clear H'3.",
                        "VernacExtend",
                        "f9bac7e70a0e58a3fa2e9938abb3fcafb4cc1968"
                    ]
                },
                {
                    "command": [
                        "apply oppBounded; case H'; auto.",
                        "VernacExtend",
                        "c113891b193dddf7a409a546bb28290e567dc7b9"
                    ]
                },
                {
                    "command": [
                        "rewrite <- (Ropp_involutive r).",
                        "VernacExtend",
                        "cbc81d890888d09f9d795cc7d43b35a4a68248ee"
                    ]
                },
                {
                    "command": [
                        "unfold FtoRradix in |- *; rewrite Fopp_correct; auto with real.",
                        "VernacExtend",
                        "5806d51ffb537355f3b97b7dbadcb1cad937b8ce"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "MaxOppMin",
            "line_nb": 252,
            "steps": [
                {
                    "command": [
                        "intros p r H'; split.",
                        "VernacExtend",
                        "596d6060adaa45f2c778a5b321b84be5016c58a7"
                    ]
                },
                {
                    "command": [
                        "apply oppBounded; case H'; auto.",
                        "VernacExtend",
                        "c113891b193dddf7a409a546bb28290e567dc7b9"
                    ]
                },
                {
                    "command": [
                        "split.",
                        "VernacExtend",
                        "55abc140132bd88981001ac656020469a8d503eb"
                    ]
                },
                {
                    "command": [
                        "unfold FtoRradix in |- *; rewrite Fopp_correct.",
                        "VernacExtend",
                        "c3c7ad16a924a974f39fb2584a800e7199b0444e"
                    ]
                },
                {
                    "command": [
                        "apply Ropp_le_contravar; apply isMax_inv1 with (1 := H'); auto.",
                        "VernacExtend",
                        "0b698f0850e3998dc304d89b6e03d27a4456f050"
                    ]
                },
                {
                    "command": [
                        "intros f H'0 H'1.",
                        "VernacExtend",
                        "53dd8ac5cda3804e9f3487c315cbff7f7f54bbe7"
                    ]
                },
                {
                    "command": [
                        "rewrite <- (Fopp_Fopp f).",
                        "VernacExtend",
                        "979fe1f41242b0442a40880253df3fa10d62442b"
                    ]
                },
                {
                    "command": [
                        "unfold FtoRradix in |- *; repeat rewrite Fopp_correct.",
                        "VernacExtend",
                        "3335b4703a3a97d3007be20d235819750bd0360e"
                    ]
                },
                {
                    "command": [
                        "apply Ropp_le_contravar.",
                        "VernacExtend",
                        "ac8d32b190d111aa8834547674121bcf3bb8a0ed"
                    ]
                },
                {
                    "command": [
                        "rewrite <- (Fopp_correct radix f).",
                        "VernacExtend",
                        "7de89470de24dd2996d21fd121f5f4504b3e450a"
                    ]
                },
                {
                    "command": [
                        "elim H'.",
                        "VernacExtend",
                        "1cae423a267f3a1a6990051e754342f63add38fd"
                    ]
                },
                {
                    "command": [
                        "intros H'2 H'3; elim H'3; intros H'4 H'5; apply H'5; clear H'3.",
                        "VernacExtend",
                        "f9bac7e70a0e58a3fa2e9938abb3fcafb4cc1968"
                    ]
                },
                {
                    "command": [
                        "apply oppBounded; auto.",
                        "VernacExtend",
                        "6e68d2122eeea082741ca4e279707ce0511c71ef"
                    ]
                },
                {
                    "command": [
                        "rewrite <- (Ropp_involutive r).",
                        "VernacExtend",
                        "cbc81d890888d09f9d795cc7d43b35a4a68248ee"
                    ]
                },
                {
                    "command": [
                        "unfold FtoRradix in |- *; rewrite Fopp_correct; auto with real.",
                        "VernacExtend",
                        "5806d51ffb537355f3b97b7dbadcb1cad937b8ce"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "MinMax",
            "line_nb": 269,
            "steps": [
                {
                    "command": [
                        "intros p r H' H'0.",
                        "VernacExtend",
                        "ef14b7bae52158d1a39ab929a8fdee1f74678e05"
                    ]
                },
                {
                    "command": [
                        "split.",
                        "VernacExtend",
                        "55abc140132bd88981001ac656020469a8d503eb"
                    ]
                },
                {
                    "command": [
                        "apply FcanonicBound with (radix := radix); auto with float.",
                        "VernacExtend",
                        "31c8628156b101371fc066a2293dc899ef72c728"
                    ]
                },
                {
                    "command": [
                        "apply FNSuccCanonic; auto.",
                        "VernacExtend",
                        "ebb67044c842161a67c189619d2a7761ffe66f7a"
                    ]
                },
                {
                    "command": [
                        "inversion H'; auto.",
                        "VernacExtend",
                        "d59ad6c8daf4451d93df165016af388e7c5199ce"
                    ]
                },
                {
                    "command": [
                        "split.",
                        "VernacExtend",
                        "55abc140132bd88981001ac656020469a8d503eb"
                    ]
                },
                {
                    "command": [
                        "case (Rle_or_lt (FNSucc b radix precision p) r); intros H'2; auto.",
                        "VernacExtend",
                        "6f4d184884d38464a058e2209e2c7d72642dfa67"
                    ]
                },
                {
                    "command": [
                        "absurd (FNSucc b radix precision p <= p)%R.",
                        "VernacExtend",
                        "0331e7bb124253c2062b802bdd2006532ad40f43"
                    ]
                },
                {
                    "command": [
                        "apply Rlt_not_le.",
                        "VernacExtend",
                        "970672dbfa76c5b1a5bbbe80816db4b871608528"
                    ]
                },
                {
                    "command": [
                        "unfold FtoRradix in |- *; apply FNSuccLt; auto.",
                        "VernacExtend",
                        "065e66258c96e1d0aea1570e0d1439da41e84424"
                    ]
                },
                {
                    "command": [
                        "inversion H'; auto.",
                        "VernacExtend",
                        "d59ad6c8daf4451d93df165016af388e7c5199ce"
                    ]
                },
                {
                    "command": [
                        "elim H0; intros H'1 H'3; apply H'3; auto.",
                        "VernacExtend",
                        "e0af3a6997c8341c683f9c8fbe612eb508aee3bd"
                    ]
                },
                {
                    "command": [
                        "apply FcanonicBound with (radix := radix); auto with float.",
                        "VernacExtend",
                        "31c8628156b101371fc066a2293dc899ef72c728"
                    ]
                },
                {
                    "command": [
                        "apply Rlt_le; auto.",
                        "VernacExtend",
                        "4003e3e1c449ee89cad9e953d0a562db8235648c"
                    ]
                },
                {
                    "command": [
                        "intros f H'2 H'3.",
                        "VernacExtend",
                        "0d9edd734f56ec85379147d75d67fbe00eca0ec3"
                    ]
                },
                {
                    "command": [
                        "replace (FtoRradix f) with (FtoRradix (Fnormalize radix b precision f)).",
                        "VernacExtend",
                        "d8f8826130cec35a787f270954e4551d61a200ae"
                    ]
                },
                {
                    "command": [
                        "unfold FtoRradix in |- *; apply FNSuccProp; auto.",
                        "VernacExtend",
                        "5f33033b1798bcaa2a3fd85d442ca9a2ac440103"
                    ]
                },
                {
                    "command": [
                        "inversion H'; auto.",
                        "VernacExtend",
                        "d59ad6c8daf4451d93df165016af388e7c5199ce"
                    ]
                },
                {
                    "command": [
                        "apply FcanonicBound with (radix := radix); auto with float.",
                        "VernacExtend",
                        "31c8628156b101371fc066a2293dc899ef72c728"
                    ]
                },
                {
                    "command": [
                        "apply Rlt_le_trans with r; auto.",
                        "VernacExtend",
                        "44dd400f8e3acbabfddf2e6830276f44f91d8c15"
                    ]
                },
                {
                    "command": [
                        "case (Rle_or_lt r p); auto.",
                        "VernacExtend",
                        "97549ab1412bb6f7824414efb502d3142de01b97"
                    ]
                },
                {
                    "command": [
                        "intros H'4; Contradict H'0.",
                        "VernacExtend",
                        "a737d05291a071577bd38fb391e6dc635ff955b9"
                    ]
                },
                {
                    "command": [
                        "apply Rle_antisym; auto; apply isMin_inv1 with (1 := H'); auto.",
                        "VernacExtend",
                        "7ef2206d0d4a70fa61063d6fcd490df9befc6b35"
                    ]
                },
                {
                    "command": [
                        "rewrite FnormalizeCorrect; auto.",
                        "VernacExtend",
                        "6ee35e1e3f3de05c34741ed20c27ff8ffe5da5da"
                    ]
                },
                {
                    "command": [
                        "unfold FtoRradix in |- *; apply FnormalizeCorrect; auto.",
                        "VernacExtend",
                        "470ee4d615cb96e2c80e7ff477747cec6ab8c852"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "MinExList",
            "line_nb": 296,
            "steps": [
                {
                    "command": [
                        "intros r L; elim L; simpl in |- *; auto.",
                        "VernacExtend",
                        "2f1ebcaa2ae606b15e587407909220a606507822"
                    ]
                },
                {
                    "command": [
                        "left; intros f H'; elim H'.",
                        "VernacExtend",
                        "da2f37097355c5210edff9a119f92b74a9919df9"
                    ]
                },
                {
                    "command": [
                        "intros a l H'.",
                        "VernacExtend",
                        "320e248a1ffce57c7ebcb270ad3c3cc3c47d037b"
                    ]
                },
                {
                    "command": [
                        "elim H'; [ intros H'0; clear H' | intros H'0; elim H'0; intros min E; elim E; intros H'1 H'2; elim H'2; intros H'3 H'4; try exact H'4; clear H'2 E H'0 H' ].",
                        "VernacExtend",
                        "2b193bbc48201252bf15782fcc0e4e91195b8c82"
                    ]
                },
                {
                    "command": [
                        "case (Rle_or_lt a r); intros H'1.",
                        "VernacExtend",
                        "17c7b85a4ab3e6cd54aa82c193f5b13dc33d5682"
                    ]
                },
                {
                    "command": [
                        "right; exists a; repeat split; auto.",
                        "VernacExtend",
                        "96c3bc976115c36ad97fb6df5b953df91fa88750"
                    ]
                },
                {
                    "command": [
                        "intros f H'; elim H'; [ intros H'2; rewrite <- H'2; clear H' | intros H'2; clear H' ]; auto with real.",
                        "VernacExtend",
                        "9ffd7ab8eb8bc379a39a9687aa56e01146d5685f"
                    ]
                },
                {
                    "command": [
                        "intros H'; Contradict H'; auto with real.",
                        "VernacExtend",
                        "042352157ea65899537ad393175c58e9f7fd3f3f"
                    ]
                },
                {
                    "command": [
                        "apply Rlt_not_le; auto with real.",
                        "VernacExtend",
                        "9b1690e28c96f72eb26acad1cf4a770eb61a1a8d"
                    ]
                },
                {
                    "command": [
                        "left; intros f H'; elim H'; [ intros H'2; rewrite <- H'2; clear H' | intros H'2; clear H' ]; auto.",
                        "VernacExtend",
                        "13219101626abfcaeae3bb0dcdd4185bdab81cfd"
                    ]
                },
                {
                    "command": [
                        "case (Rle_or_lt a min); intros H'5.",
                        "VernacExtend",
                        "01ef813f138d9c19d099894969efdb09401a061a"
                    ]
                },
                {
                    "command": [
                        "right; exists min; repeat split; auto.",
                        "VernacExtend",
                        "8870588f58e84a6e653e949c3d9ee77bfc74b4cd"
                    ]
                },
                {
                    "command": [
                        "intros f H'; elim H'; [ intros H'0; rewrite <- H'0; clear H' | intros H'0; clear H' ]; auto.",
                        "VernacExtend",
                        "e7d3c4d75106ece36e822e2bb0cefcf6d02228f8"
                    ]
                },
                {
                    "command": [
                        "case (Rle_or_lt a r); intros H'6.",
                        "VernacExtend",
                        "82766f50aa4e501312cd8cf5dfb843df59870149"
                    ]
                },
                {
                    "command": [
                        "right; exists a; repeat split; auto.",
                        "VernacExtend",
                        "96c3bc976115c36ad97fb6df5b953df91fa88750"
                    ]
                },
                {
                    "command": [
                        "intros f H'; elim H'; [ intros H'0; rewrite <- H'0; clear H' | intros H'0; clear H' ]; auto with real.",
                        "VernacExtend",
                        "b82835c367ada79f6c32beba3904aaa5487d79f3"
                    ]
                },
                {
                    "command": [
                        "intros H'; apply Rle_trans with (FtoRradix min); auto with real.",
                        "VernacExtend",
                        "35fd1749fca017ce235a65dd514e6c3b33a904d0"
                    ]
                },
                {
                    "command": [
                        "right; exists min; split; auto; split; auto.",
                        "VernacExtend",
                        "de0c94f8605368c40051ce974fc10c3acd66361e"
                    ]
                },
                {
                    "command": [
                        "intros f H'; elim H'; [ intros H'0; elim H'0; clear H' | intros H'0; clear H' ]; auto.",
                        "VernacExtend",
                        "b60e3f9b02f009a0abc48d8e5d6383dada90e46a"
                    ]
                },
                {
                    "command": [
                        "intros H'; Contradict H'6; auto with real.",
                        "VernacExtend",
                        "7e6a51b6b0b53fb7351406b4d4f334e4b854d9cd"
                    ]
                },
                {
                    "command": [
                        "apply Rle_not_lt; auto.",
                        "VernacExtend",
                        "a14016e8637e06ef942ae2a016f397912a0b9bcd"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "MinEx",
            "line_nb": 319,
            "steps": [
                {
                    "command": [
                        "intros r.",
                        "VernacExtend",
                        "5819060771cad2a5b744225cdd7aa4cb65e09e7b"
                    ]
                },
                {
                    "command": [
                        "case (MinExList r (mBFloat r)).",
                        "VernacExtend",
                        "0c435a6020901126bf335f8094e3210a69e57ce9"
                    ]
                },
                {
                    "command": [
                        "intros H'0; absurd (Fopp (boundR r) <= r)%R; auto.",
                        "VernacExtend",
                        "b402b79cc728c486b01a41ff8dc30dda9ed58555"
                    ]
                },
                {
                    "command": [
                        "apply Rlt_not_le.",
                        "VernacExtend",
                        "970672dbfa76c5b1a5bbbe80816db4b871608528"
                    ]
                },
                {
                    "command": [
                        "apply H'0.",
                        "VernacExtend",
                        "f1f7d253c59fe30c9977766a215126b9faf09097"
                    ]
                },
                {
                    "command": [
                        "apply mBFadic_correct3; auto.",
                        "VernacExtend",
                        "bee0f94987d1097aaaccee92c48f547326d5b10b"
                    ]
                },
                {
                    "command": [
                        "apply Rlt_le.",
                        "VernacExtend",
                        "cdc4280500779f23bae235b94c24a4b2ea2921fe"
                    ]
                },
                {
                    "command": [
                        "apply boundRCorrect2; auto.",
                        "VernacExtend",
                        "ff8d707ba68cc25a20a71b9623f74bdf1289b232"
                    ]
                },
                {
                    "command": [
                        "intros H'0; elim H'0; intros min E; elim E; intros H'1 H'2; elim H'2; intros H'3 H'4; clear H'2 E H'0.",
                        "VernacExtend",
                        "933b5f180682ad9b539f94e77ff3c4f6d800a0a7"
                    ]
                },
                {
                    "command": [
                        "exists min; split; auto.",
                        "VernacExtend",
                        "225be802774f7a00fcc6ca9b6cf0eb9ed30c17cf"
                    ]
                },
                {
                    "command": [
                        "apply mBPadic_Fbounded with (r := r); auto.",
                        "VernacExtend",
                        "391ecbedf8c66789c84a5b028da5de79a8649f62"
                    ]
                },
                {
                    "command": [
                        "split; auto.",
                        "VernacExtend",
                        "fcd44a714bd12fa54b1c7746996e44dbac16df06"
                    ]
                },
                {
                    "command": [
                        "intros f H'0 H'2.",
                        "VernacExtend",
                        "39fed5c5e0c0c19404b41d1b29a91f4f1a0dce5e"
                    ]
                },
                {
                    "command": [
                        "case (Req_dec f 0); intros H'6.",
                        "VernacExtend",
                        "6a0932c9f3d73472c9d526d5b6ad89c0f78708af"
                    ]
                },
                {
                    "command": [
                        "replace (FtoRradix f) with (FtoRradix (Float 0%nat (- dExp b))).",
                        "VernacExtend",
                        "afb86a091c01c0327ae43474bc02d921c30e186a"
                    ]
                },
                {
                    "command": [
                        "apply H'4; auto.",
                        "VernacExtend",
                        "4c512e2eaa566fdc741b0b71cb645883015b4bcd"
                    ]
                },
                {
                    "command": [
                        "apply mBFadic_correct4; auto.",
                        "VernacExtend",
                        "92d2842a19e6457d9ecfc771dfd5d85e027f7ea3"
                    ]
                },
                {
                    "command": [
                        "replace (FtoRradix (Float 0%nat (- dExp b))) with (FtoRradix f); auto.",
                        "VernacExtend",
                        "c83950b4795274e16d89df951c74c07a6d75c306"
                    ]
                },
                {
                    "command": [
                        "rewrite H'6.",
                        "VernacExtend",
                        "7a5e609e825f92618da18be03aa16ab06d13e048"
                    ]
                },
                {
                    "command": [
                        "unfold FtoRradix, FtoR in |- *; simpl in |- *; auto with real.",
                        "VernacExtend",
                        "fb74d3652c0c20354e175d620e90507508ec4729"
                    ]
                },
                {
                    "command": [
                        "rewrite H'6.",
                        "VernacExtend",
                        "7a5e609e825f92618da18be03aa16ab06d13e048"
                    ]
                },
                {
                    "command": [
                        "unfold FtoRradix, FtoR in |- *; simpl in |- *; auto with real.",
                        "VernacExtend",
                        "fb74d3652c0c20354e175d620e90507508ec4729"
                    ]
                },
                {
                    "command": [
                        "case (Rle_or_lt f (Fopp (boundR r))); intros H'5.",
                        "VernacExtend",
                        "ef19d67b7d5d391c011e43740595dd7977511bef"
                    ]
                },
                {
                    "command": [
                        "apply Rle_trans with (FtoRradix (Fopp (boundR r))); auto.",
                        "VernacExtend",
                        "0c104377b413f87b85ee62df5c18b088bd6758da"
                    ]
                },
                {
                    "command": [
                        "apply H'4; auto.",
                        "VernacExtend",
                        "4c512e2eaa566fdc741b0b71cb645883015b4bcd"
                    ]
                },
                {
                    "command": [
                        "apply mBFadic_correct3; auto.",
                        "VernacExtend",
                        "bee0f94987d1097aaaccee92c48f547326d5b10b"
                    ]
                },
                {
                    "command": [
                        "apply Rlt_le.",
                        "VernacExtend",
                        "cdc4280500779f23bae235b94c24a4b2ea2921fe"
                    ]
                },
                {
                    "command": [
                        "apply boundRCorrect2; auto.",
                        "VernacExtend",
                        "ff8d707ba68cc25a20a71b9623f74bdf1289b232"
                    ]
                },
                {
                    "command": [
                        "case (Rle_or_lt (boundR r) f); intros H'7.",
                        "VernacExtend",
                        "374987a4844c3bc41b7b184edc7d64442078cf97"
                    ]
                },
                {
                    "command": [
                        "Contradict H'2; apply Rlt_not_le.",
                        "VernacExtend",
                        "1043297ffd7e42e0f28e13e40fcba61f88589b50"
                    ]
                },
                {
                    "command": [
                        "apply Rlt_le_trans with (FtoRradix (boundR r)); auto.",
                        "VernacExtend",
                        "5cb83c0963cb49e58f9a4fe9e260df250b4604f6"
                    ]
                },
                {
                    "command": [
                        "apply boundRCorrect1; auto.",
                        "VernacExtend",
                        "e2b2211e9f03a8f404fb8d67a7e61b7a0f6bffab"
                    ]
                },
                {
                    "command": [
                        "apply H'4; auto.",
                        "VernacExtend",
                        "4c512e2eaa566fdc741b0b71cb645883015b4bcd"
                    ]
                },
                {
                    "command": [
                        "apply mBFadic_correct1; auto.",
                        "VernacExtend",
                        "08b867033de694e8904898097d4b951c23bd64c2"
                    ]
                },
                {
                    "command": [
                        "Contradict H'6; unfold FtoRradix in |- *; apply is_Fzero_rep1; auto.",
                        "VernacExtend",
                        "8726923b8c7f96bbde3418e99a032b9c6f438746"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "MaxEx",
            "line_nb": 356,
            "steps": [
                {
                    "command": [
                        "intros r; case (MinEx r).",
                        "VernacExtend",
                        "71dde2ffc263329a556f63a1fe1ac36d3117e595"
                    ]
                },
                {
                    "command": [
                        "intros x H'.",
                        "VernacExtend",
                        "1864e43355295bd98e7920f89fb20cbad05f10d7"
                    ]
                },
                {
                    "command": [
                        "case (Req_dec x r); intros H'1.",
                        "VernacExtend",
                        "c9e2def97a3fc259b0914187b724a5f0b1a6be16"
                    ]
                },
                {
                    "command": [
                        "exists x.",
                        "VernacExtend",
                        "800bf7613c74a608ff1ecae6bb20d349d4e8f84d"
                    ]
                },
                {
                    "command": [
                        "rewrite <- H'1.",
                        "VernacExtend",
                        "72f25f27aa9f4989786041bbf0f442a67cdb1785"
                    ]
                },
                {
                    "command": [
                        "red in |- *; split; [ case H' | split ]; auto with real.",
                        "VernacExtend",
                        "5ec74165928d80e88e44031daee22036122faf59"
                    ]
                },
                {
                    "command": [
                        "exists (FNSucc b radix precision x).",
                        "VernacExtend",
                        "2e1c8e2f1a4811e74114011e7e19b4ce7ef98f78"
                    ]
                },
                {
                    "command": [
                        "apply MinMax; auto.",
                        "VernacExtend",
                        "cd26a0feef58f1a9aa71a1b7715f08b607a82fe1"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "MinBinade",
            "line_nb": 366,
            "steps": [
                {
                    "command": [
                        "intros r p H' H'0 H'1.",
                        "VernacExtend",
                        "c7abd2f5e088bda2a46e525fd4836efdce439ee9"
                    ]
                },
                {
                    "command": [
                        "split; auto.",
                        "VernacExtend",
                        "fcd44a714bd12fa54b1c7746996e44dbac16df06"
                    ]
                },
                {
                    "command": [
                        "split; auto.",
                        "VernacExtend",
                        "fcd44a714bd12fa54b1c7746996e44dbac16df06"
                    ]
                },
                {
                    "command": [
                        "intros f H'2 H'3.",
                        "VernacExtend",
                        "0d9edd734f56ec85379147d75d67fbe00eca0ec3"
                    ]
                },
                {
                    "command": [
                        "case (Rle_or_lt f p); auto; intros H'5.",
                        "VernacExtend",
                        "46905bdb78ec61db6b9cc5ca45220639912891e2"
                    ]
                },
                {
                    "command": [
                        "Contradict H'3.",
                        "VernacExtend",
                        "1690deb3bfcd28d48572d7f699b77412ce81cef7"
                    ]
                },
                {
                    "command": [
                        "apply Rlt_not_le.",
                        "VernacExtend",
                        "970672dbfa76c5b1a5bbbe80816db4b871608528"
                    ]
                },
                {
                    "command": [
                        "apply Rlt_le_trans with (1 := H'1); auto with real.",
                        "VernacExtend",
                        "c9e0ba2af2e6b5986a5a13462722592102d6c864"
                    ]
                },
                {
                    "command": [
                        "replace (FtoRradix f) with (FtoRradix (Fnormalize radix b precision f)).",
                        "VernacExtend",
                        "d8f8826130cec35a787f270954e4551d61a200ae"
                    ]
                },
                {
                    "command": [
                        "unfold FtoRradix in |- *; apply FNSuccProp; auto; try apply FnormalizeCanonic; auto.",
                        "VernacExtend",
                        "1bb00ecbb125cb49e54e1e19795630f2adbbd136"
                    ]
                },
                {
                    "command": [
                        "unfold FtoRradix in |- *; repeat rewrite FnormalizeCorrect; auto with real.",
                        "VernacExtend",
                        "e2473a087ff23f4ddfd26f0888c1a45621b7684d"
                    ]
                },
                {
                    "command": [
                        "apply FcanonicBound with (radix := radix); auto.",
                        "VernacExtend",
                        "7ff66c1c77430eeda2d6b2110bd18def44854cf6"
                    ]
                },
                {
                    "command": [
                        "apply FnormalizeCanonic; auto.",
                        "VernacExtend",
                        "9a1fe361020914af4b8bf7ab09ee74e43ff90cec"
                    ]
                },
                {
                    "command": [
                        "unfold FtoRradix in |- *; rewrite FnormalizeCorrect; auto with real.",
                        "VernacExtend",
                        "ec3ef9d71dcaf2623b358135846114542e411854"
                    ]
                },
                {
                    "command": [
                        "unfold FtoRradix in |- *; rewrite FnormalizeCorrect; auto with real.",
                        "VernacExtend",
                        "ec3ef9d71dcaf2623b358135846114542e411854"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "MaxBinade",
            "line_nb": 414,
            "steps": [
                {
                    "command": [
                        "intros r p H' H'0 H'1.",
                        "VernacExtend",
                        "c7abd2f5e088bda2a46e525fd4836efdce439ee9"
                    ]
                },
                {
                    "command": [
                        "rewrite <- (Ropp_involutive r).",
                        "VernacExtend",
                        "cbc81d890888d09f9d795cc7d43b35a4a68248ee"
                    ]
                },
                {
                    "command": [
                        "rewrite <- (Fopp_Fopp p).",
                        "VernacExtend",
                        "c32d926ee332186759decd1b548ead6051bf6c45"
                    ]
                },
                {
                    "command": [
                        "apply MinOppMax.",
                        "VernacExtend",
                        "50ab5e110990d0b92af742b97e14d696aa1f5cc8"
                    ]
                },
                {
                    "command": [
                        "apply MinBinade; auto with real float.",
                        "VernacExtend",
                        "59c6f1f25fe96ba17e5ea1ac88c2f7a084160c49"
                    ]
                },
                {
                    "command": [
                        "unfold FtoRradix in |- *; rewrite Fopp_correct; auto with real.",
                        "VernacExtend",
                        "5806d51ffb537355f3b97b7dbadcb1cad937b8ce"
                    ]
                },
                {
                    "command": [
                        "rewrite <- (Fopp_Fopp (FNSucc b radix precision (Fopp p))).",
                        "VernacExtend",
                        "5ae8e4a0a792aee6e71a4acc8dc0ebd74f8dae36"
                    ]
                },
                {
                    "command": [
                        "rewrite <- FNPredFopFNSucc; auto.",
                        "VernacExtend",
                        "1b74fae870595f2b4580a24b58dd2b9a0724497e"
                    ]
                },
                {
                    "command": [
                        "unfold FtoRradix in |- *; rewrite Fopp_correct; auto with real arith.",
                        "VernacExtend",
                        "2f4315fa197dd71f9124b711f222873ddcc32191"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "MaxMin",
            "line_nb": 425,
            "steps": [
                {
                    "command": [
                        "intros p r H' H'0.",
                        "VernacExtend",
                        "ef14b7bae52158d1a39ab929a8fdee1f74678e05"
                    ]
                },
                {
                    "command": [
                        "rewrite <- (Fopp_Fopp (FNPred b radix precision p)).",
                        "VernacExtend",
                        "b21b737f1e549dbd6f82bf909fca53f28a66ddd8"
                    ]
                },
                {
                    "command": [
                        "rewrite <- (Ropp_involutive r).",
                        "VernacExtend",
                        "cbc81d890888d09f9d795cc7d43b35a4a68248ee"
                    ]
                },
                {
                    "command": [
                        "apply MaxOppMin.",
                        "VernacExtend",
                        "469b893f1fe69bae1a828b2a4e6bb7571873429e"
                    ]
                },
                {
                    "command": [
                        "rewrite FNPredFopFNSucc; auto.",
                        "VernacExtend",
                        "1670714f4f4437046027a6de71679e600d760692"
                    ]
                },
                {
                    "command": [
                        "rewrite Fopp_Fopp; auto.",
                        "VernacExtend",
                        "26fc4b804596be0ef119ea2722da2ad297b63f82"
                    ]
                },
                {
                    "command": [
                        "apply MinMax; auto.",
                        "VernacExtend",
                        "cd26a0feef58f1a9aa71a1b7715f08b607a82fe1"
                    ]
                },
                {
                    "command": [
                        "apply MaxOppMin; auto.",
                        "VernacExtend",
                        "ca43e124679cf947c4770757f3a04dffa5d11ca7"
                    ]
                },
                {
                    "command": [
                        "Contradict H'0.",
                        "VernacExtend",
                        "0fd20730534a0b7ed5d43e3a37dfb114d920724b"
                    ]
                },
                {
                    "command": [
                        "rewrite <- (Ropp_involutive r); rewrite H'0; auto; unfold FtoRradix in |- *; rewrite Fopp_correct; auto; apply Ropp_involutive.",
                        "VernacExtend",
                        "d3318c3622ccfc33459771187b64475c8cb1045a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "FmaxRep",
            "line_nb": 437,
            "steps": [
                {
                    "command": [
                        "intros p q H'; case (FminRep (Fopp p) (Fopp q)).",
                        "VernacExtend",
                        "ad7a9d63f613194463278b7b00f3c8a651e21fee"
                    ]
                },
                {
                    "command": [
                        "unfold FtoRradix in |- *; rewrite Fopp_correct.",
                        "VernacExtend",
                        "c3c7ad16a924a974f39fb2584a800e7199b0444e"
                    ]
                },
                {
                    "command": [
                        "apply MaxOppMin; auto.",
                        "VernacExtend",
                        "ca43e124679cf947c4770757f3a04dffa5d11ca7"
                    ]
                },
                {
                    "command": [
                        "intros x H'0.",
                        "VernacExtend",
                        "e0fa2426b28413682676d18f3b761c8af158dd4e"
                    ]
                },
                {
                    "command": [
                        "exists (- x)%Z.",
                        "VernacExtend",
                        "9d32ce99aaa974ab152d7e3b37ea339aa8e49fb7"
                    ]
                },
                {
                    "command": [
                        "rewrite <- (Ropp_involutive (FtoRradix q)).",
                        "VernacExtend",
                        "7df2eda5a89251856cf919e791784db4446233e2"
                    ]
                },
                {
                    "command": [
                        "unfold FtoRradix in |- *; rewrite <- Fopp_correct.",
                        "VernacExtend",
                        "50f21ff3eba6340395b1c5467e11a8a2ca34511b"
                    ]
                },
                {
                    "command": [
                        "unfold FtoRradix in H'0; rewrite H'0.",
                        "VernacExtend",
                        "1d13ff67b33a7fb788f343b017363c0776b9946e"
                    ]
                },
                {
                    "command": [
                        "unfold FtoR in |- *; simpl in |- *; auto with real.",
                        "VernacExtend",
                        "ba3b25707a153a230da460a7610329e80a91a5e4"
                    ]
                },
                {
                    "command": [
                        "rewrite Ropp_Ropp_IZR; rewrite Ropp_mult_distr_l_reverse; auto.",
                        "VernacExtend",
                        "862421816079074029f5c5c59e79f4ac35d9b485"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        }
    ]
}