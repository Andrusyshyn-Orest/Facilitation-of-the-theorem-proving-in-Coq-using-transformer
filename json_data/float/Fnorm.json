{
    "filename": "Fnorm.v",
    "coq_project": "float",
    "vernac_cmds": [
        [
            "Require Export Fbound.",
            "VernacRequire",
            "e05a9f6fc08b10162b1dc59ad504e46e334d4c2b"
        ],
        [
            "Section Fnormalized_Def.",
            "VernacBeginSection",
            "69f8a62bf6b6cd470b0e1368d495a79303fc9d7b"
        ],
        [
            "Variable radix : Z.",
            "VernacAssumption",
            "2349b77d134e0c9bb013a8bdca0020ca16fc023b"
        ],
        [
            "Hypothesis radixMoreThanOne : (1 < radix)%Z.",
            "VernacAssumption",
            "f4d3774b2275f4c4c3af941091d4d99f9a2129aa"
        ],
        [
            "Let radixMoreThanZERO := Zlt_1_O _ (Zlt_le_weak _ _ radixMoreThanOne).",
            "VernacDefinition",
            "b73ccff345a4fc730c8134dcd05adb7f1928fae7"
        ],
        [
            "Hint Resolve radixMoreThanZERO: zarith.",
            "VernacHints",
            "5a4a320eb610749621ef38850390d7141dc0d330"
        ],
        [
            "Let FtoRradix := FtoR radix.",
            "VernacDefinition",
            "5aa29a9595c6e9e03b28c6d232299552ec761ad7"
        ],
        [
            "Coercion FtoRradix : float >-> R.",
            "VernacCoercion",
            "028c338fbad0cd7087bf0b6e1e412562a515c140"
        ],
        [
            "Variable b : Fbound.",
            "VernacAssumption",
            "17a11c003f49f819b8cb809f61b140702916486d"
        ],
        [
            "Definition Fnormal (p : float) := Fbounded b p /\\ (Zpos (vNum b) <= Zabs (radix * Fnum p))%Z.",
            "VernacDefinition",
            "a79fec00773074c40ae34fb2b003bb28711e2c86"
        ],
        [
            "Theorem FnormalBounded : forall p : float, Fnormal p -> Fbounded b p.",
            "VernacStartTheoremProof",
            "4bf147a31d633801bda1f3b414b74dc3453b7650"
        ],
        [
            "intros p H; case H; auto.",
            "VernacExtend",
            "beee3d3ce325a92b206bd904f833a8af2f4fe350"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Theorem FnormalBound : forall p : float, Fnormal p -> (Zpos (vNum b) <= Zabs (radix * Fnum p))%Z.",
            "VernacStartTheoremProof",
            "6d2434434ae91aa1055cb71f50b6061e8a8be475"
        ],
        [
            "intros p H; case H; auto.",
            "VernacExtend",
            "beee3d3ce325a92b206bd904f833a8af2f4fe350"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Hint Resolve FnormalBounded FnormalBound: float.",
            "VernacHints",
            "affc4a3d853398ee469d92040685952cd682e4d0"
        ],
        [
            "Theorem FnormalNotZero : forall p : float, Fnormal p -> ~ is_Fzero p.",
            "VernacStartTheoremProof",
            "eac3015718a06b42cf1c49159595f774f0a0bfe4"
        ],
        [
            "unfold is_Fzero in |- *; intros p H; red in |- *; intros H1.",
            "VernacExtend",
            "9ae8b35cccd78e596f97ce87070312e399cc6c05"
        ],
        [
            "case H; rewrite H1.",
            "VernacExtend",
            "d31a2cdb9685fa471e96e79382fb7b838fe9e0ff"
        ],
        [
            "replace (Zabs (radix * 0)) with 0%Z; auto with zarith.",
            "VernacExtend",
            "9f629ee68ae42222f07d16362e2f610787e979d6"
        ],
        [
            "rewrite Zmult_comm; simpl in |- *; auto.",
            "VernacExtend",
            "2f1750feec80f525545aa651f84bada9829c10ff"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Theorem FnormalFop : forall p : float, Fnormal p -> Fnormal (Fopp p).",
            "VernacStartTheoremProof",
            "88082e1cc0f343dc752d4c3dfc87ef6b4406e896"
        ],
        [
            "intros p H; split; auto with float.",
            "VernacExtend",
            "43abc0f96ff101ee69f4ed271070398ab632f76d"
        ],
        [
            "replace (Zabs (radix * Fnum (Fopp p))) with (Zabs (radix * Fnum p)); auto with float.",
            "VernacExtend",
            "ba77a22fd3ac76853f1f16e65bc6130db53d249d"
        ],
        [
            "case p; simpl in |- *; auto with zarith.",
            "VernacExtend",
            "339f72357c21436c0ba53b5e85aa2ace4b8b78db"
        ],
        [
            "intros Fnum1 Fexp1; rewrite <- Zopp_mult_distr_r; apply sym_equal; apply Zabs_Zopp.",
            "VernacExtend",
            "ad50706b83856892949a855caa932982ad145ed9"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Theorem FnormalFabs : forall p : float, Fnormal p -> Fnormal (Fabs p).",
            "VernacStartTheoremProof",
            "4a08331114ddf22f0b259be54e3c116714c3f9a7"
        ],
        [
            "intros p; case p; intros a e H; split; auto with float.",
            "VernacExtend",
            "ade28c211311af2c4e187f63052e90c1cf80eb83"
        ],
        [
            "simpl in |- *; case H; intros H1 H2; simpl in |- *; auto.",
            "VernacExtend",
            "2e3ac0e42ecd5aa1ed7425aa07eaf3d90c26ec50"
        ],
        [
            "rewrite <- (Zabs_eq radix); auto with zarith.",
            "VernacExtend",
            "66fcebcc97af9eb0fe5a4854c40bb3ee6afb1c7b"
        ],
        [
            "rewrite <- Zabs_Zmult.",
            "VernacExtend",
            "f7fc6414388fe397677ae7ff4791672389a0bb6d"
        ],
        [
            "rewrite (fun x => Zabs_eq (Zabs x)); auto with float zarith.",
            "VernacExtend",
            "5409a505897b572aee6ba72131237a3412741662"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Definition pPred x := Zpred (Zpos x).",
            "VernacDefinition",
            "5234a77df87e7d8f7257231e58ccb0e63b3f3b5d"
        ],
        [
            "Theorem maxMax1 : forall (p : float) (z : Z), Fbounded b p -> (Fexp p <= z)%Z -> (Fabs p <= Float (pPred (vNum b)) z)%R.",
            "VernacStartTheoremProof",
            "d0f4db933d81a2cd5d84fe24d282f1de57f1241f"
        ],
        [
            "intros p z H H0; unfold FtoRradix in |- *.",
            "VernacExtend",
            "37b9507a62a31dfbba781d63d8306371eeac0e95"
        ],
        [
            "rewrite <- (FshiftCorrect _ radixMoreThanOne (Zabs_nat (z - Fexp p)) (Float (pPred (vNum b)) z)).",
            "VernacExtend",
            "a91b95155de14345d7dfa60d6b89a899171f8121"
        ],
        [
            "unfold FtoR, Fabs in |- *; simpl in |- *; auto with zarith.",
            "VernacExtend",
            "af6dd9753f1bd823814470931f72ea1d5e9a274d"
        ],
        [
            "rewrite Rmult_IZR; rewrite Zpower_nat_Z_powerRZ; auto with zarith.",
            "VernacExtend",
            "bd527e12cff757595a45a0529898c81ba36321ce"
        ],
        [
            "repeat rewrite inj_abs; auto with zarith.",
            "VernacExtend",
            "725bff9fd8fb46ed128e96cd34cab276b92ceefd"
        ],
        [
            "replace (z - (z - Fexp p))%Z with (Fexp p); [ idtac | ring ].",
            "VernacExtend",
            "0c5a5ed832ed6acd7e2bc87af7ea328d3db8db52"
        ],
        [
            "rewrite Rmult_assoc; rewrite <- powerRZ_add; auto with real zarith.",
            "VernacExtend",
            "19ddab8e6795561b7a0200abde2d905e689d6c3b"
        ],
        [
            "replace (z - Fexp p + Fexp p)%Z with z; [ idtac | ring ].",
            "VernacExtend",
            "d8e473227f90dbbf7a41bbf2729e5de0e165478d"
        ],
        [
            "apply Rle_trans with (pPred (vNum b) * powerRZ radix (Fexp p))%R.",
            "VernacExtend",
            "0fbaf6ffcbb8e4a2b8e198a060e4a6c3d20e2d6d"
        ],
        [
            "apply Rle_monotone_exp; auto with zarith; repeat rewrite Rmult_IZR; apply Rle_IZR; unfold pPred in |- *; apply Zle_Zpred; auto with float real zarith.",
            "VernacExtend",
            "065b7689685c4487371d9f6629c6fe462c425120"
        ],
        [
            "apply Rmult_le_compat_l; auto with real zarith.",
            "VernacExtend",
            "2159120b470d3288ccdd35583593b7da3195abd5"
        ],
        [
            "replace 0%R with (IZR 0); auto with real; apply Rle_IZR; unfold pPred in |- *; apply Zle_Zpred; auto with float zarith.",
            "VernacExtend",
            "f8d3b23d0c8e1f5c2eff97c82d54e2bbae1b8e72"
        ],
        [
            "apply Rle_powerRZ; auto with float real zarith.",
            "VernacExtend",
            "3b38bd1bcd35a98ff33c53f78ab27884d0078804"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Theorem FnormalBoundAbs : forall p : float, Fnormal p -> (Float (pPred (vNum b)) (Zpred (Fexp p)) < Fabs p)%R.",
            "VernacStartTheoremProof",
            "21d8c5cfa8167bead9241789d70b6afdaecdf756"
        ],
        [
            "intros p H'; unfold FtoRradix, FtoR in |- *; simpl in |- *.",
            "VernacExtend",
            "f4a2ffd57a0f37048b5813226b31423dfedd51f1"
        ],
        [
            "pattern (Fexp p) at 2 in |- *; replace (Fexp p) with (Zsucc (Zpred (Fexp p))); [ rewrite powerRZ_Zs; auto with real zarith | unfold Zsucc, Zpred in |- *; ring ].",
            "VernacExtend",
            "306dd107f243eea1b9c8e0d5532610760a0c33fb"
        ],
        [
            "repeat rewrite <- Rmult_assoc.",
            "VernacExtend",
            "645aebe2c3685a4f868a05a2372130cedecea85e"
        ],
        [
            "apply Rmult_lt_compat_r; auto with real arith.",
            "VernacExtend",
            "83ae992c0036ab40d3af8510c7d9b2df90522b46"
        ],
        [
            "rewrite <- Rmult_IZR; apply Rlt_IZR.",
            "VernacExtend",
            "9a5e80449efc53e3d79ff54da01cd61a3d698f9f"
        ],
        [
            "unfold pPred in |- *; cut (Zpos (vNum b) <= Zabs (Fnum p) * radix)%Z; auto with zarith.",
            "VernacExtend",
            "426f1944680fc3c115a2b9d075333861e4f24c87"
        ],
        [
            "rewrite <- (Zabs_eq radix); auto with float zarith; rewrite <- Zabs_Zmult; rewrite Zmult_comm; auto with float real zarith.",
            "VernacExtend",
            "9b698eb9bb29a76ce88e7aea80b7edb3b9dbbd15"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Definition Fsubnormal (p : float) := Fbounded b p /\\ Fexp p = (- dExp b)%Z /\\ (Zabs (radix * Fnum p) < Zpos (vNum b))%Z.",
            "VernacDefinition",
            "928b866eb7e9c47ee208d76441d27288936d6771"
        ],
        [
            "Theorem FsubnormalFbounded : forall p : float, Fsubnormal p -> Fbounded b p.",
            "VernacStartTheoremProof",
            "d04597d5f84ed5d16d1473fedbdaf82ba5acb8b3"
        ],
        [
            "intros p H; case H; auto.",
            "VernacExtend",
            "beee3d3ce325a92b206bd904f833a8af2f4fe350"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Theorem FsubnormalFexp : forall p : float, Fsubnormal p -> Fexp p = (- dExp b)%Z.",
            "VernacStartTheoremProof",
            "bf35454866724126b646a2ce50c5078b573f4f34"
        ],
        [
            "intros p H; case H; auto.",
            "VernacExtend",
            "beee3d3ce325a92b206bd904f833a8af2f4fe350"
        ],
        [
            "intros H1 H2; case H2; auto.",
            "VernacExtend",
            "64473c0bac90940aec179baa53933e91e736e033"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Theorem FsubnormalBound : forall p : float, Fsubnormal p -> (Zabs (radix * Fnum p) < Zpos (vNum b))%Z.",
            "VernacStartTheoremProof",
            "05a8fff908032f75b3ba94fe6c475aae2c35896b"
        ],
        [
            "intros p H; case H; auto.",
            "VernacExtend",
            "beee3d3ce325a92b206bd904f833a8af2f4fe350"
        ],
        [
            "intros H1 H2; case H2; auto.",
            "VernacExtend",
            "64473c0bac90940aec179baa53933e91e736e033"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Hint Resolve FsubnormalFbounded FsubnormalBound FsubnormalFexp: float.",
            "VernacHints",
            "0a118fde049497b992c5893e255507b5785994ba"
        ],
        [
            "Theorem FsubnormFopp : forall p : float, Fsubnormal p -> Fsubnormal (Fopp p).",
            "VernacStartTheoremProof",
            "2b7c70e7d1de8d5a7866995b8fb222ba2928363e"
        ],
        [
            "intros p H'; repeat split; simpl in |- *; auto with zarith float.",
            "VernacExtend",
            "fdc484c4a3d693828063e3481b09499d44923c15"
        ],
        [
            "rewrite Zabs_Zopp; auto with float.",
            "VernacExtend",
            "837a68c36da747e8e5749a5142adc3aeb66acd32"
        ],
        [
            "rewrite <- Zopp_mult_distr_r; rewrite Zabs_Zopp; auto with float.",
            "VernacExtend",
            "c77c9c23df98d97f0987b0c8a97ae56859365a11"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Theorem FsubnormFabs : forall p : float, Fsubnormal p -> Fsubnormal (Fabs p).",
            "VernacStartTheoremProof",
            "99596eee1fe152ec154fadf9d667c6384de4e692"
        ],
        [
            "intros p; case p; intros a e H; split; auto with float.",
            "VernacExtend",
            "ade28c211311af2c4e187f63052e90c1cf80eb83"
        ],
        [
            "simpl in |- *; split; auto with float.",
            "VernacExtend",
            "9d33831af10628b36976799fada24e9acd28fc0c"
        ],
        [
            "case H; intros H1 (H2, H3); auto.",
            "VernacExtend",
            "5f8293dd4cc233f94674539d752fce79cf9d0ebe"
        ],
        [
            "rewrite <- (Zabs_eq radix); auto with zarith.",
            "VernacExtend",
            "66fcebcc97af9eb0fe5a4854c40bb3ee6afb1c7b"
        ],
        [
            "rewrite <- Zabs_Zmult.",
            "VernacExtend",
            "f7fc6414388fe397677ae7ff4791672389a0bb6d"
        ],
        [
            "rewrite (fun x => Zabs_eq (Zabs x)); auto with float zarith.",
            "VernacExtend",
            "5409a505897b572aee6ba72131237a3412741662"
        ],
        [
            "case H; intros H1 (H2, H3); auto.",
            "VernacExtend",
            "5f8293dd4cc233f94674539d752fce79cf9d0ebe"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Theorem FsubnormalUnique : forall p q : float, Fsubnormal p -> Fsubnormal q -> p = q :>R -> p = q.",
            "VernacStartTheoremProof",
            "0f1dc738b5a61d9b79ae755316e3b1f4dbd2dcbd"
        ],
        [
            "intros p q H' H'0 H'1.",
            "VernacExtend",
            "05c3e1b098970ef14e38b413a09ed550ca5b4d53"
        ],
        [
            "apply FtoREqInv2 with (radix := radix); auto.",
            "VernacExtend",
            "00394c495950a0066b7f63eaec99e92a49dd5ad6"
        ],
        [
            "generalize H' H'0; unfold Fsubnormal in |- *; auto with zarith.",
            "VernacExtend",
            "98a89f877f9c7c82fe01aa9e5ae36e1e1b771d37"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Theorem FsubnormalLt : forall p q : float, Fsubnormal p -> Fsubnormal q -> (p < q)%R -> (Fnum p < Fnum q)%Z.",
            "VernacStartTheoremProof",
            "214af4123fbc2eee259687044675539276547c8e"
        ],
        [
            "intros p q H' H'0 H'1.",
            "VernacExtend",
            "05c3e1b098970ef14e38b413a09ed550ca5b4d53"
        ],
        [
            "apply Rlt_Fexp_eq_Zlt with (radix := radix); auto with zarith.",
            "VernacExtend",
            "2012c168cda168a8a6d7df57e3070cd563cc67d0"
        ],
        [
            "apply trans_equal with (- dExp b)%Z.",
            "VernacExtend",
            "5bde389dc7ce45316692ba12a6091eaf3a162fe8"
        ],
        [
            "case H'; auto.",
            "VernacExtend",
            "ebc5b3ac68f03e20b8a194319f607aaad1bf60b4"
        ],
        [
            "intros H1 H2; case H2; auto.",
            "VernacExtend",
            "64473c0bac90940aec179baa53933e91e736e033"
        ],
        [
            "apply sym_equal; case H'0; auto.",
            "VernacExtend",
            "5075970d5f1e0643a5caa36a94e7218be99d835f"
        ],
        [
            "intros H1 H2; case H2; auto.",
            "VernacExtend",
            "64473c0bac90940aec179baa53933e91e736e033"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Theorem LtFsubnormal : forall p q : float, Fsubnormal p -> Fsubnormal q -> (Fnum p < Fnum q)%Z -> (p < q)%R.",
            "VernacStartTheoremProof",
            "f9e06d4c0c7aea1f016c9ccb3cf18635fd539b92"
        ],
        [
            "intros p q H' H'0 H'1.",
            "VernacExtend",
            "05c3e1b098970ef14e38b413a09ed550ca5b4d53"
        ],
        [
            "case (Rtotal_order p q); auto; intros Test; case Test; clear Test; intros Test; Contradict H'1.",
            "VernacExtend",
            "f70d69ac699a8339a35f41cf508b12684cd7149e"
        ],
        [
            "unfold FtoRradix in Test; rewrite sameExpEq with (2 := Test); auto.",
            "VernacExtend",
            "fe8920f0f42ab3d70a6a2fdd46186eb2dc2cff85"
        ],
        [
            "auto with zarith.",
            "VernacExtend",
            "23f42fd3236dcece4a40b3a666dce57fea69a9c0"
        ],
        [
            "apply trans_equal with (- dExp b)%Z.",
            "VernacExtend",
            "5bde389dc7ce45316692ba12a6091eaf3a162fe8"
        ],
        [
            "case H'; auto.",
            "VernacExtend",
            "ebc5b3ac68f03e20b8a194319f607aaad1bf60b4"
        ],
        [
            "intros H1 H2; case H2; auto.",
            "VernacExtend",
            "64473c0bac90940aec179baa53933e91e736e033"
        ],
        [
            "apply sym_equal; case H'0.",
            "VernacExtend",
            "3f59998d4f8854a721a76b64854df70c329e14c4"
        ],
        [
            "intros H1 H2; case H2; auto.",
            "VernacExtend",
            "64473c0bac90940aec179baa53933e91e736e033"
        ],
        [
            "apply Zle_not_lt.",
            "VernacExtend",
            "a635904a634172283c98f3792d1f8261c5710c4f"
        ],
        [
            "apply Zlt_le_weak.",
            "VernacExtend",
            "77c804797cd604de1af1fd78f914f426e7c6ce85"
        ],
        [
            "apply FsubnormalLt; auto.",
            "VernacExtend",
            "32b47806e7be9cc936922129f63a6130e4fe4770"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Definition Fcanonic (a : float) := Fnormal a \\/ Fsubnormal a.",
            "VernacDefinition",
            "b736d71ab63388368c361b9c32be1ebf1269d1fe"
        ],
        [
            "Theorem FcanonicBound : forall p : float, Fcanonic p -> Fbounded b p.",
            "VernacStartTheoremProof",
            "0f8579c2e571b06ce178268a711fb6a7d48055fc"
        ],
        [
            "intros p H; case H; auto with float.",
            "VernacExtend",
            "e6297a7baa612c3b13842f4c1cd7477392116134"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Hint Resolve FcanonicBound: float.",
            "VernacHints",
            "ee3e1f8890275045c54c37b9f01262d4bbe8994c"
        ],
        [
            "Theorem pUCanonic_absolu : forall p : float, Fcanonic p -> (Zabs (Fnum p) < Zpos (vNum b))%Z.",
            "VernacStartTheoremProof",
            "7f3683018e88cda886f74c04dd2bb97ad5fcb6ff"
        ],
        [
            "auto with float.",
            "VernacExtend",
            "d9d0d0fc0f3224fd637c11457ed78521c3984b30"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Theorem FcanonicFopp : forall p : float, Fcanonic p -> Fcanonic (Fopp p).",
            "VernacStartTheoremProof",
            "c43f9d0ce2ef129d70c5234e0a6c33e33e3e040c"
        ],
        [
            "intros p H'; case H'; intros H'1.",
            "VernacExtend",
            "c5be1f46d0c0edcb28150c7ba6a17c90b5605873"
        ],
        [
            "left; apply FnormalFop; auto.",
            "VernacExtend",
            "d99a412eab7f9786a39d78ec295359add4c02767"
        ],
        [
            "right; apply FsubnormFopp; auto.",
            "VernacExtend",
            "15496b39e4db12c84366729d2d96eeac9464eaf7"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Theorem FcanonicFabs : forall p : float, Fcanonic p -> Fcanonic (Fabs p).",
            "VernacStartTheoremProof",
            "aa88f70670031bb9a8565f03203623aa8cf2312d"
        ],
        [
            "intros p H'; case H'; clear H'; auto with float.",
            "VernacExtend",
            "a8b894118ca9dab482777475a8d44fde4e5c15ca"
        ],
        [
            "intros H; left; auto with float.",
            "VernacExtend",
            "397545681d5f18a3e9894b882c8e25f4c548eb07"
        ],
        [
            "apply FnormalFabs; auto.",
            "VernacExtend",
            "5fd89e9a92fab68f190530620ede2025283e6d5a"
        ],
        [
            "intros H; right; auto with float.",
            "VernacExtend",
            "9b9e785aad6479e3c2d58728b1734f23d6e53333"
        ],
        [
            "apply FsubnormFabs; auto.",
            "VernacExtend",
            "11c697ab66211383129d429cadffc0fac905f394"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Theorem NormalNotSubNormal : forall p : float, ~ (Fnormal p /\\ Fsubnormal p).",
            "VernacStartTheoremProof",
            "3794f60ea920dd150d95ed2a6f17e6d5eb3cf121"
        ],
        [
            "intros p; red in |- *; intros H; elim H; intros H0 H1; clear H.",
            "VernacExtend",
            "0c303e272afa7e7c54adcc3deb9d2012a49afb7b"
        ],
        [
            "absurd (Zabs (radix * Fnum p) < Zpos (vNum b))%Z; auto with float zarith.",
            "VernacExtend",
            "569a26a170674e7f26be30e7093daf286cc24979"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Theorem MaxFloat : forall x : float, Fbounded b x -> (Rabs x < Float (Zpos (vNum b)) (Fexp x))%R.",
            "VernacStartTheoremProof",
            "4edb8cdace06cfb8786fde98a9ce81f23211f53c"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "replace (Rabs x) with (FtoR radix (Fabs x)).",
            "VernacExtend",
            "cc82b1a758c75fc9164ca4869d6a0127b9c46247"
        ],
        [
            "unfold FtoRradix in |- *.",
            "VernacExtend",
            "ca5b46f9af7312531a190b63534dffaa3cbf2633"
        ],
        [
            "apply maxMax with (b := b); auto with *.",
            "VernacExtend",
            "d4d31a0b6c85235f3c7262b63d60b42f1e3effdd"
        ],
        [
            "unfold FtoRradix in |- *.",
            "VernacExtend",
            "ca5b46f9af7312531a190b63534dffaa3cbf2633"
        ],
        [
            "apply Fabs_correct; auto with *.",
            "VernacExtend",
            "a4745083e8d7734b3241e8cc62295987e6ce3020"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Variable precision : nat.",
            "VernacAssumption",
            "2235bc83b7ebf4cbe373b5fa3b4f3c643d454130"
        ],
        [
            "Hypothesis precisionNotZero : precision <> 0.",
            "VernacAssumption",
            "9ba21dacb7498679bf18b5f2c3b12c5f92dc3727"
        ],
        [
            "Hypothesis pGivesBound : Zpos (vNum b) = Zpower_nat radix precision.",
            "VernacAssumption",
            "d558f967d87d2a42d14158ac115b10c6f5358430"
        ],
        [
            "Theorem FboundNext : forall p : float, Fbounded b p -> exists q : float, Fbounded b q /\\ q = Float (Zsucc (Fnum p)) (Fexp p) :>R.",
            "VernacStartTheoremProof",
            "38f27197a36d27a1296e33c65c6e1031962988f8"
        ],
        [
            "intros p H'.",
            "VernacExtend",
            "bb6abbd0a5bb134f5276d7928176425ceae09e54"
        ],
        [
            "case (Zle_lt_or_eq (Zsucc (Fnum p)) (Zpos (vNum b))); auto with float.",
            "VernacExtend",
            "a8623560796904651dec71cf8b45129cb7246f33"
        ],
        [
            "case (Zle_or_lt 0 (Fnum p)); intros H1.",
            "VernacExtend",
            "c3bde0c000f9ac97ea5d7deaf66c7dbb3ad325e1"
        ],
        [
            "rewrite <- (Zabs_eq (Fnum p)); auto with float zarith.",
            "VernacExtend",
            "44bb51f8e4c90a3db4d4358a79a1ffe8393879e1"
        ],
        [
            "apply Zle_trans with 0%Z; auto with zarith.",
            "VernacExtend",
            "7bc5435926f0aada5353ec65cce7fa187ea0bde2"
        ],
        [
            "intros H'0; exists (Float (Zsucc (Fnum p)) (Fexp p)); split; auto with float.",
            "VernacExtend",
            "60d45ab652c1a780a5181c5301335d5437df6c9b"
        ],
        [
            "repeat split; simpl in |- *; auto with float.",
            "VernacExtend",
            "3e093824de91ab2af8d090987eafb93df05226c2"
        ],
        [
            "case (Zle_or_lt 0 (Fnum p)); intros H1; auto with zarith.",
            "VernacExtend",
            "eece105a5803557330b7a62fccfe3bfcf469e58e"
        ],
        [
            "rewrite Zabs_eq; auto with zarith.",
            "VernacExtend",
            "e3b6647506c6d43441146989691d7c27f1722b7e"
        ],
        [
            "apply Zlt_trans with (Zabs (Fnum p)); auto with float zarith.",
            "VernacExtend",
            "a144eee6f22388244797976d1cea10cd86136679"
        ],
        [
            "repeat rewrite Zabs_eq_opp; auto with zarith.",
            "VernacExtend",
            "10a25b2896598a806019edb32340d86af1662493"
        ],
        [
            "intros H'0; exists (Float (Zpower_nat radix (pred precision)) (Zsucc (Fexp p))); split; auto.",
            "VernacExtend",
            "2c05771da0f0a6840d14e059cc9d23c0a14af88a"
        ],
        [
            "repeat split; simpl in |- *; auto with zarith arith float.",
            "VernacExtend",
            "6cc9e26e07246b79948ef1ec35514848d69bf212"
        ],
        [
            "rewrite pGivesBound.",
            "VernacExtend",
            "a0663579a8c1e026e4139f9de2213b856a6f5f6f"
        ],
        [
            "rewrite Zabs_eq; auto with zarith.",
            "VernacExtend",
            "e3b6647506c6d43441146989691d7c27f1722b7e"
        ],
        [
            "rewrite H'0; rewrite pGivesBound.",
            "VernacExtend",
            "20cbe0ad82c18f62e1aa676f7ee9921fa33e8302"
        ],
        [
            "pattern precision at 2 in |- *; replace precision with (1 + pred precision).",
            "VernacExtend",
            "233ca99a7562802cf63b14751aea01a931348495"
        ],
        [
            "rewrite Zpower_nat_is_exp.",
            "VernacExtend",
            "230c5aec41f86b77ed64d26b6f0b8c9d1503c4ab"
        ],
        [
            "rewrite Zpower_nat_1.",
            "VernacExtend",
            "2846c4a882fe56cb611d6ed0efd6e39493343d43"
        ],
        [
            "unfold FtoRradix, FtoR in |- *; simpl in |- *.",
            "VernacExtend",
            "85a3da1582165d92ceb7faef707de88822bccf1a"
        ],
        [
            "rewrite powerRZ_Zs; auto with real zarith.",
            "VernacExtend",
            "1931a3978b6974020abfa1402ab4426f76878eb8"
        ],
        [
            "rewrite Rmult_IZR; ring.",
            "VernacExtend",
            "073e54d706e2874a4ce10f4efdd7723717ac5438"
        ],
        [
            "generalize precisionNotZero; case precision; simpl in |- *; auto with arith.",
            "VernacExtend",
            "14b174deb3ad558d88cfc7712044f1e68087a0cf"
        ],
        [
            "intros H'1; case H'1; auto.",
            "VernacExtend",
            "c62d8d45ec005d5b574d43d4534021a38ccb51ae"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Theorem digitPredVNumiSPrecision : digit radix (Zpred (Zpos (vNum b))) = precision.",
            "VernacStartTheoremProof",
            "58ab69fc5b281da7d8c82333cf6a88444bf9974c"
        ],
        [
            "apply digitInv; auto.",
            "VernacExtend",
            "754fb84a55920efb36657d7ef450cc5ecd243eec"
        ],
        [
            "rewrite pGivesBound.",
            "VernacExtend",
            "a0663579a8c1e026e4139f9de2213b856a6f5f6f"
        ],
        [
            "rewrite Zabs_eq; auto with zarith.",
            "VernacExtend",
            "e3b6647506c6d43441146989691d7c27f1722b7e"
        ],
        [
            "rewrite Zabs_eq; auto with zarith.",
            "VernacExtend",
            "e3b6647506c6d43441146989691d7c27f1722b7e"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Theorem digitVNumiSPrecision : digit radix (Zpos (vNum b)) = S precision.",
            "VernacStartTheoremProof",
            "1a02477c5ef27d251a085410c0596dfaaf90d4d9"
        ],
        [
            "apply digitInv; auto.",
            "VernacExtend",
            "754fb84a55920efb36657d7ef450cc5ecd243eec"
        ],
        [
            "rewrite pGivesBound.",
            "VernacExtend",
            "a0663579a8c1e026e4139f9de2213b856a6f5f6f"
        ],
        [
            "rewrite Zabs_eq; auto with zarith.",
            "VernacExtend",
            "e3b6647506c6d43441146989691d7c27f1722b7e"
        ],
        [
            "rewrite Zabs_eq; auto with zarith.",
            "VernacExtend",
            "e3b6647506c6d43441146989691d7c27f1722b7e"
        ],
        [
            "rewrite pGivesBound; auto with zarith.",
            "VernacExtend",
            "8b172077e277513b23c08b205d58790b41b42704"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Theorem vNumPrecision : forall n : Z, digit radix n <= precision -> (Zabs n < Zpos (vNum b))%Z.",
            "VernacStartTheoremProof",
            "cd48bdf032e26e1a1161109e5617b556280e7065"
        ],
        [
            "intros n H'.",
            "VernacExtend",
            "c5e15d288e71c7c4067088ce1e3eb273ec98abc8"
        ],
        [
            "rewrite <- (Zabs_eq (Zpos (vNum b))); auto with zarith.",
            "VernacExtend",
            "fcf64559b4c7ad5e3765fd30484e70da9b7dd9b2"
        ],
        [
            "apply digit_anti_monotone_lt with (n := radix); auto.",
            "VernacExtend",
            "369fd4e2d74aef40bea8207226fa963b6c0ce604"
        ],
        [
            "rewrite digitVNumiSPrecision; auto with arith.",
            "VernacExtend",
            "f3406d0aee2d4b87d5947f3853cd2cb066ca6b44"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Theorem pGivesDigit : forall p : float, Fbounded b p -> Fdigit radix p <= precision.",
            "VernacStartTheoremProof",
            "7ff77aad891631c58f8a4f20f723eda475becfdd"
        ],
        [
            "intros p H; unfold Fdigit in |- *.",
            "VernacExtend",
            "506153d1eb8fed86533b25fa9470e3599266de2b"
        ],
        [
            "rewrite <- digitPredVNumiSPrecision.",
            "VernacExtend",
            "f1821583e3583092791145d0d8251e596de4a78a"
        ],
        [
            "apply digit_monotone; auto with zarith.",
            "VernacExtend",
            "6599b462324275ec7ca62450f3d5632e71dfa19e"
        ],
        [
            "rewrite (fun x => Zabs_eq (Zpred x)); auto with float zarith.",
            "VernacExtend",
            "079b63ddabab313a276d818bc911db4a00170afc"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Theorem digitGivesBoundedNum : forall p : float, Fdigit radix p <= precision -> (Zabs (Fnum p) < Zpos (vNum b))%Z.",
            "VernacStartTheoremProof",
            "6a57abdfef1fb2e112b1b53df868b5b95fde41e7"
        ],
        [
            "intros p H; apply vNumPrecision; auto.",
            "VernacExtend",
            "70a38174d4dfef0833cfcd5e86b53f6195c8768b"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Theorem FboundedOne : forall z : Z, (- dExp b <= z)%Z -> Fbounded b (Float 1%nat z).",
            "VernacStartTheoremProof",
            "4da4c9c4ed57d9468f3a96297a043409b3a2a8d8"
        ],
        [
            "intros z H'; repeat (split; simpl in |- *; auto with zarith).",
            "VernacExtend",
            "7a40bc071cfb8127a9c8387fd178f4d3e204e424"
        ],
        [
            "rewrite pGivesBound; auto.",
            "VernacExtend",
            "4b3408306312206446529e6ecd487e3cd02c6503"
        ],
        [
            "apply Zlt_le_trans with (Zpower_nat radix 1); auto with zarith.",
            "VernacExtend",
            "3b94d9b65a771e2a942d66ef82e21b6a77da530a"
        ],
        [
            "rewrite Zpower_nat_1; auto with zarith.",
            "VernacExtend",
            "e9320a7ea3adf68ff67766aff884f3fea30c1c11"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Theorem FboundedMboundPos : forall z m : Z, (0 <= m)%Z -> (m <= Zpower_nat radix precision)%Z -> (- dExp b <= z)%Z -> exists c : float, Fbounded b c /\\ c = (m * powerRZ radix z)%R :>R.",
            "VernacStartTheoremProof",
            "85377ebbf37e3da188640fd8a64798604cb16fb6"
        ],
        [
            "intros z m H' H'0 H'1; case (Zle_lt_or_eq _ _ H'0); intros H'2.",
            "VernacExtend",
            "4a368f63a2874453e26ecd981108cdebe88e584a"
        ],
        [
            "exists (Float m z); split; auto with zarith.",
            "VernacExtend",
            "cda87f05a5b862c2715021ad1a447b84e6aaf886"
        ],
        [
            "repeat split; simpl in |- *; auto with zarith.",
            "VernacExtend",
            "3887b5c0ace93a706fbfe1f9aea736a5c30668c7"
        ],
        [
            "rewrite Zabs_eq; auto; rewrite pGivesBound; auto.",
            "VernacExtend",
            "c8a85b7c1e17bdb9440e3fd434f9394a1c392213"
        ],
        [
            "case (FboundNext (Float (Zpred (Zpos (vNum b))) z)); auto with float.",
            "VernacExtend",
            "2eaa126f852404561d4d42bd268ae60a01247ddb"
        ],
        [
            "intros f' (H1, H2); exists f'; split; auto.",
            "VernacExtend",
            "4fbd3aa1d61cc76a91a0be0d1d7095516e9c324f"
        ],
        [
            "rewrite H2; rewrite pGivesBound.",
            "VernacExtend",
            "5e0baefaba8f65ed39264dc74c7e705dcc4059d2"
        ],
        [
            "unfold FtoRradix, FtoR in |- *; simpl in |- *; auto.",
            "VernacExtend",
            "0a0ab92f652c540feedfb1f1261ea912fdc7adb7"
        ],
        [
            "rewrite <- Zsucc_pred; rewrite <- H'2; auto; ring.",
            "VernacExtend",
            "2319425465550cf349b9a95d1ad2478292dea64a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Theorem FboundedMbound : forall z m : Z, (Zabs m <= Zpower_nat radix precision)%Z -> (- dExp b <= z)%Z -> exists c : float, Fbounded b c /\\ c = (m * powerRZ radix z)%R :>R.",
            "VernacStartTheoremProof",
            "1684e56a368c59078334a12585ed5c5d23127e78"
        ],
        [
            "intros z m H H0.",
            "VernacExtend",
            "51e4b57ccb3ffd286193e0b61996be92685b839b"
        ],
        [
            "case (Zle_or_lt 0 m); intros H1.",
            "VernacExtend",
            "ace3f5f3f30adbd0f80ab6c1640e0779e43a779a"
        ],
        [
            "case (FboundedMboundPos z (Zabs m)); auto; try rewrite Zabs_eq; auto.",
            "VernacExtend",
            "caf11ee7fe527075ed0384b14b083e52efaa5a3d"
        ],
        [
            "intros f (H2, H3); exists f; split; auto.",
            "VernacExtend",
            "ecdec748504964240b061142eb207a663d2a6a02"
        ],
        [
            "case (FboundedMboundPos z (Zabs m)); auto; try rewrite Zabs_eq_opp; auto with zarith.",
            "VernacExtend",
            "d8308482c13c157301778d9d80c041cc4b029601"
        ],
        [
            "intros f (H2, H3); exists (Fopp f); split; auto with float.",
            "VernacExtend",
            "646653e572bd2659a3de62d1e5d12e34dc43b9c4"
        ],
        [
            "rewrite (Fopp_correct radix); auto with arith; fold FtoRradix in |- *; rewrite H3.",
            "VernacExtend",
            "183e79d7fccf42cf77a3786619eee4b55512a0fa"
        ],
        [
            "rewrite Ropp_Ropp_IZR; ring.",
            "VernacExtend",
            "37a2fbe5c08e56f038b290aed05e884cb5b9d90a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Theorem FnormalPrecision : forall p : float, Fnormal p -> Fdigit radix p = precision.",
            "VernacStartTheoremProof",
            "468f4b868f65074f1acd197472ca7a8399a4f596"
        ],
        [
            "intros p H; apply le_antisym; auto with float.",
            "VernacExtend",
            "d4bef35c05591a2b43ca34bb39fbd3ab756995bd"
        ],
        [
            "apply pGivesDigit; auto with float.",
            "VernacExtend",
            "121b41a67e117f39716c53f15fa3a4f965d8d314"
        ],
        [
            "apply le_S_n.",
            "VernacExtend",
            "8f9d88b4dde1dc61a3f5f18238f0544e5d303ccc"
        ],
        [
            "rewrite <- digitVNumiSPrecision.",
            "VernacExtend",
            "ab9e983fb8369153a79df2343dd85e447d399e2e"
        ],
        [
            "unfold Fdigit in |- *.",
            "VernacExtend",
            "2c1b7b2f3f520d25bcc18c2627ab51e602f9face"
        ],
        [
            "replace (S (digit radix (Fnum p))) with (digit radix (Fnum p) + 1).",
            "VernacExtend",
            "0878100d9c8a5ab0b2d4e11591e1c09026ff924f"
        ],
        [
            "rewrite <- digitAdd; auto with zarith.",
            "VernacExtend",
            "4890376399403e4b5cc3f790585506d45c62a432"
        ],
        [
            "apply digit_monotone; auto with float.",
            "VernacExtend",
            "d425c169cb8252ead5dda09443d3ddee616d206f"
        ],
        [
            "rewrite (fun x => Zabs_eq (Zpos x)); auto with float zarith.",
            "VernacExtend",
            "640dac1a6a6f054234252d5745ff218fcf38e086"
        ],
        [
            "rewrite Zmult_comm; rewrite Zpower_nat_1; auto with float zarith.",
            "VernacExtend",
            "d483ac156a56086319c904a0077da2bb26c7d878"
        ],
        [
            "red in |- *; intros H1; case H.",
            "VernacExtend",
            "13a6e9f497b6c50cab2b748a708738b31db2226a"
        ],
        [
            "intros H0 H2; Contradict H2; rewrite H1.",
            "VernacExtend",
            "a07bcdcb436413449512417b54f4d2541c33f9f3"
        ],
        [
            "replace (Zabs (radix * 0)) with 0%Z; auto with zarith.",
            "VernacExtend",
            "9f629ee68ae42222f07d16362e2f610787e979d6"
        ],
        [
            "rewrite Zmult_comm; simpl in |- *; auto.",
            "VernacExtend",
            "2f1750feec80f525545aa651f84bada9829c10ff"
        ],
        [
            "rewrite plus_comm; simpl in |- *; auto.",
            "VernacExtend",
            "a510e8b3ccb9a5207bf615eb71ff2e3ed8078042"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Hint Resolve FnormalPrecision: float.",
            "VernacHints",
            "e8c25fb7bad4eb1e4a4328931882604fede4b1a6"
        ],
        [
            "Theorem FnormalUnique : forall p q : float, Fnormal p -> Fnormal q -> p = q :>R -> p = q.",
            "VernacStartTheoremProof",
            "0cd2245a4a4a54f0f41021b98309c175f49513de"
        ],
        [
            "intros p q H' H'0 H'1.",
            "VernacExtend",
            "05c3e1b098970ef14e38b413a09ed550ca5b4d53"
        ],
        [
            "apply (FdigitEq radix); auto.",
            "VernacExtend",
            "d36d347bd6558884078889842772125af5770653"
        ],
        [
            "apply FnormalNotZero; auto.",
            "VernacExtend",
            "f86d53d915602035655da3d7a59ee7395ee22bd0"
        ],
        [
            "apply trans_equal with (y := precision); auto with float.",
            "VernacExtend",
            "20efa448764010a5c4ae61c67fa9cf24b7f56137"
        ],
        [
            "apply sym_equal; auto with float.",
            "VernacExtend",
            "3a0ae848442044cdb83bf770d81c666cfc52bb61"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Theorem FnormalLtPos : forall p q : float, Fnormal p -> Fnormal q -> (0 <= p)%R -> (p < q)%R -> (Fexp p < Fexp q)%Z \\/ Fexp p = Fexp q /\\ (Fnum p < Fnum q)%Z.",
            "VernacStartTheoremProof",
            "0c7a99e7f9723a02399ebbd8048bec984f4ac0c5"
        ],
        [
            "intros p q H' H'0 H'1 H'2.",
            "VernacExtend",
            "72bc33bd695361090defa76b144ed28b290b1f49"
        ],
        [
            "case (Zle_or_lt (Fexp q) (Fexp p)); auto.",
            "VernacExtend",
            "e2de60b94eeb01f5c9c507beda0c6dca923aae10"
        ],
        [
            "intros H'3; right.",
            "VernacExtend",
            "390e1e297e5962156abedb4f6013caf6d63fc586"
        ],
        [
            "case (Zle_lt_or_eq _ _ H'3); intros H'4.",
            "VernacExtend",
            "874558d82eca9289ae9ddcbc34a30c2a37438060"
        ],
        [
            "2: split; auto.",
            "VernacExtend",
            "789b9c4efca20fb69c2898a984c230e93e7f7334"
        ],
        [
            "2: apply Rlt_Fexp_eq_Zlt with (radix := radix); auto with zarith.",
            "VernacExtend",
            "2d894257c1c42689635565c6c283d32340b5f895"
        ],
        [
            "absurd (Fnum (Fshift radix (Zabs_nat (Fexp p - Fexp q)) p) < Fnum q)%Z; auto.",
            "VernacExtend",
            "ace1bd22466c8f6044d7c6ff92e425013ebf3cbc"
        ],
        [
            "2: apply Rlt_Fexp_eq_Zlt with (radix := radix); auto with zarith.",
            "VernacExtend",
            "2d894257c1c42689635565c6c283d32340b5f895"
        ],
        [
            "2: unfold FtoRradix in |- *; rewrite FshiftCorrect; auto.",
            "VernacExtend",
            "48ed9dc379d01afc86fcd2b3a417b6cc804b7bed"
        ],
        [
            "2: unfold Fshift in |- *; simpl in |- *; auto with zarith.",
            "VernacExtend",
            "792593592be1fc142b7f84ffe23ddb089524f9f8"
        ],
        [
            "2: replace (Z_of_nat (Zabs_nat (Fexp p - Fexp q))) with (Fexp p - Fexp q)%Z; auto with zarith.",
            "VernacExtend",
            "dbdddbb0bef63c1898fee4626397c4be3c3ab007"
        ],
        [
            "2: cut (0 < Fexp p - Fexp q)%Z; auto with zarith.",
            "VernacExtend",
            "73128227c161270dfcb8369762575b6cf237b98c"
        ],
        [
            "2: case (Fexp p - Fexp q)%Z; simpl in |- *; auto with zarith.",
            "VernacExtend",
            "4b312066952b0cfe576bcb2eba64f7df552e30bf"
        ],
        [
            "2: intros p0; rewrite (inject_nat_convert (Zpos p0)); auto with arith.",
            "VernacExtend",
            "0f31ab9ee76a922b3a45341a4969e161723a40ac"
        ],
        [
            "2: intros p0 H'5; discriminate.",
            "VernacExtend",
            "d92bdde5b14c61ab9935bdabf68f2eaaf316c28c"
        ],
        [
            "red in |- *; intros H'5.",
            "VernacExtend",
            "e3265007380a8ce31af7c9a45ac7a9e60d9518ff"
        ],
        [
            "absurd (Fdigit radix (Fshift radix (Zabs_nat (Fexp p - Fexp q)) p) <= Fdigit radix q); auto with arith.",
            "VernacExtend",
            "e30482b02c4965ec0d3f318f03eea7098f6006a1"
        ],
        [
            "rewrite FshiftFdigit; auto with arith.",
            "VernacExtend",
            "2103ea615158fb80fda18e57c155a9a98d52fdbb"
        ],
        [
            "replace (Fdigit radix p) with precision.",
            "VernacExtend",
            "b8478f9d4a9d385c8a52de6b8e0ffe71b5960cad"
        ],
        [
            "replace (Fdigit radix q) with precision; auto with zarith.",
            "VernacExtend",
            "dec696b338bac46a39a574417ab92006e3e48d39"
        ],
        [
            "cut (0 < Fexp p - Fexp q)%Z; auto with zarith.",
            "VernacExtend",
            "078ed3c22cc045a152dc659a906233797039aea7"
        ],
        [
            "case (Fexp p - Fexp q)%Z; simpl in |- *; auto with zarith.",
            "VernacExtend",
            "088a929d16a10eb03372cffc6f046d6a1d7a293c"
        ],
        [
            "intros p0 H'6; generalize (convert_not_O p0); auto with zarith.",
            "VernacExtend",
            "440a5eb5231c82016ed96c9ec0bd4dc7ed8a3be5"
        ],
        [
            "intros p0 H'6; discriminate.",
            "VernacExtend",
            "420e3abccba48416e3a31a2e127ae84b6d4c12a3"
        ],
        [
            "apply sym_equal; auto with float.",
            "VernacExtend",
            "3a0ae848442044cdb83bf770d81c666cfc52bb61"
        ],
        [
            "apply sym_equal; auto with float.",
            "VernacExtend",
            "3a0ae848442044cdb83bf770d81c666cfc52bb61"
        ],
        [
            "apply FnormalNotZero; auto with arith.",
            "VernacExtend",
            "0924224b8f1089b628d662a55148fddcd53c38dd"
        ],
        [
            "unfold Fdigit in |- *; apply digit_monotone; auto with arith.",
            "VernacExtend",
            "b249d0cbe90c5198d3968c45d677e84fc329c155"
        ],
        [
            "repeat rewrite Zabs_eq; auto with zarith.",
            "VernacExtend",
            "ce6af9c9e2dbbf5e96aba4104d03a58482acdd03"
        ],
        [
            "apply LeR0Fnum with (radix := radix); auto with zarith.",
            "VernacExtend",
            "7618493186a55fbcb98553549cd44aa866865932"
        ],
        [
            "apply Rle_trans with (r2 := FtoRradix p); auto with real.",
            "VernacExtend",
            "d835fe7a174af70418d70161f883348277b36d95"
        ],
        [
            "apply LeR0Fnum with (radix := radix); auto with zarith.",
            "VernacExtend",
            "7618493186a55fbcb98553549cd44aa866865932"
        ],
        [
            "unfold FtoRradix in |- *; rewrite FshiftCorrect; auto.",
            "VernacExtend",
            "5abbc7cb08d11ed8fd912e6cc82302a9cbf61541"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Theorem FnormalLtNeg : forall p q : float, Fnormal p -> Fnormal q -> (q <= 0)%R -> (p < q)%R -> (Fexp q < Fexp p)%Z \\/ Fexp p = Fexp q /\\ (Fnum p < Fnum q)%Z.",
            "VernacStartTheoremProof",
            "1f70c8339717062054364c006f2049862999f35a"
        ],
        [
            "intros p q H' H'0 H'1 H'2.",
            "VernacExtend",
            "72bc33bd695361090defa76b144ed28b290b1f49"
        ],
        [
            "cut ((Fexp (Fopp q) < Fexp (Fopp p))%Z \\/ Fexp (Fopp q) = Fexp (Fopp p) /\\ (Fnum (Fopp q) < Fnum (Fopp p))%Z).",
            "VernacExtend",
            "f8b880bd89f64be207a1aa948cf3bce2177953ed"
        ],
        [
            "simpl in |- *.",
            "VernacExtend",
            "1b93169f4cf876d207c1fab22a2347202ab48d85"
        ],
        [
            "intros H'3; elim H'3; clear H'3; intros H'3; [ idtac | elim H'3; clear H'3; intros H'3 H'4 ]; auto; right; split; auto with zarith.",
            "VernacExtend",
            "9d6ce55c106383a7d0c2fbfe23fc8315938582f9"
        ],
        [
            "apply FnormalLtPos; try apply FnormalFop; auto; unfold FtoRradix in |- *; repeat rewrite Fopp_correct; replace 0%R with (-0)%R; auto with real.",
            "VernacExtend",
            "51a1c7d970e2d3162783bca3aa8cd2138746f5f6"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Definition nNormMin := Zpower_nat radix (pred precision).",
            "VernacDefinition",
            "9626de4ac02800cd1f2d7725a1faa938da39c9c8"
        ],
        [
            "Theorem nNormPos : (0 < nNormMin)%Z.",
            "VernacStartTheoremProof",
            "cd6b44cb055e4949c3b511c8d78c93511c829e81"
        ],
        [
            "unfold nNormMin in |- *; auto with zarith.",
            "VernacExtend",
            "13c94bc3a7bcdd7b9290d9f851cfb48eb65760ca"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Theorem digitnNormMin : digit radix nNormMin = precision.",
            "VernacStartTheoremProof",
            "b14b2f24294c936ae2208ec2cb8dd36fe393daf8"
        ],
        [
            "unfold nNormMin, Fdigit in |- *; simpl in |- *; apply digitInv; auto with zarith arith.",
            "VernacExtend",
            "a7c285587f83529152ab6749eb72b1cf1cdf22e2"
        ],
        [
            "rewrite Zabs_eq; auto with zarith.",
            "VernacExtend",
            "e3b6647506c6d43441146989691d7c27f1722b7e"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Theorem nNrMMimLevNum : (nNormMin <= Zpos (vNum b))%Z.",
            "VernacStartTheoremProof",
            "7a0d7c16ab5cad56790db01e8ce5e786cf972141"
        ],
        [
            "rewrite pGivesBound.",
            "VernacExtend",
            "a0663579a8c1e026e4139f9de2213b856a6f5f6f"
        ],
        [
            "unfold nNormMin in |- *; simpl in |- *; auto with zarith arith.",
            "VernacExtend",
            "a2ea85b6c762b644f3058e80bf37bc894393f21a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Hint Resolve nNrMMimLevNum: arith.",
            "VernacHints",
            "32c2f1a0abdba1e306be697be0c5a57ac624e462"
        ],
        [
            "Definition firstNormalPos := Float nNormMin (- dExp b).",
            "VernacDefinition",
            "f407e2fa4dc7be484dfe4a7fbd6160b5297c7961"
        ],
        [
            "Theorem firstNormalPosNormal : Fnormal firstNormalPos.",
            "VernacStartTheoremProof",
            "27793c84142c2bc1bd6bddc545c0b40ceb4840ea"
        ],
        [
            "repeat split; unfold firstNormalPos in |- *; simpl in |- *; auto with zarith.",
            "VernacExtend",
            "8313c8a242085a11c8cfac68215e0224b15db93a"
        ],
        [
            "rewrite pGivesBound.",
            "VernacExtend",
            "a0663579a8c1e026e4139f9de2213b856a6f5f6f"
        ],
        [
            "rewrite Zabs_eq; auto with zarith.",
            "VernacExtend",
            "e3b6647506c6d43441146989691d7c27f1722b7e"
        ],
        [
            "unfold nNormMin in |- *; simpl in |- *; auto with zarith arith.",
            "VernacExtend",
            "a2ea85b6c762b644f3058e80bf37bc894393f21a"
        ],
        [
            "apply Zlt_le_weak; auto with zarith.",
            "VernacExtend",
            "e52b5fc9e4efbb3acee7e5921936e24987a2d234"
        ],
        [
            "apply nNormPos.",
            "VernacExtend",
            "5d17e7850f4c3423cf1c6bc503ff559294592548"
        ],
        [
            "rewrite pGivesBound.",
            "VernacExtend",
            "a0663579a8c1e026e4139f9de2213b856a6f5f6f"
        ],
        [
            "replace precision with (pred precision + 1).",
            "VernacExtend",
            "506d5ae2e090510ff286244c6ded5c669ae83629"
        ],
        [
            "rewrite Zpower_nat_is_exp; auto with zarith.",
            "VernacExtend",
            "e1aa9c40a009f4bbc12128519c4c0308520c9937"
        ],
        [
            "rewrite Zpower_nat_1; auto with zarith.",
            "VernacExtend",
            "e9320a7ea3adf68ff67766aff884f3fea30c1c11"
        ],
        [
            "rewrite (fun x => Zmult_comm x radix); unfold nNormMin in |- *; auto with zarith.",
            "VernacExtend",
            "4829e5735e186af1b66938e44f8d9b9a632551ea"
        ],
        [
            "unfold nNormMin in |- *; auto with zarith.",
            "VernacExtend",
            "13c94bc3a7bcdd7b9290d9f851cfb48eb65760ca"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Theorem pNormal_absolu_min : forall p : float, Fnormal p -> (nNormMin <= Zabs (Fnum p))%Z.",
            "VernacStartTheoremProof",
            "7b920fd8d9d89f7029e128b359780b14a1e02539"
        ],
        [
            "intros p H; apply Zmult_le_reg_r with (p := radix); auto with zarith.",
            "VernacExtend",
            "b79e9bf194adbeb0a72a426b5c33428826374ee4"
        ],
        [
            "unfold nNormMin in |- *.",
            "VernacExtend",
            "c0047b55b25ea634d65f1589b8001612eb0d9f04"
        ],
        [
            "pattern radix at 2 in |- *; rewrite <- (Zpower_nat_1 radix).",
            "VernacExtend",
            "d118b93559bef2196f6348439edfc7a6f7ec3596"
        ],
        [
            "rewrite <- Zpower_nat_is_exp; auto with zarith.",
            "VernacExtend",
            "09773027588765ff2c59620a3e2edb6151eb2f72"
        ],
        [
            "replace (pred precision + 1) with precision.",
            "VernacExtend",
            "03efdb80b59372277056f09bcff12e546563e62d"
        ],
        [
            "rewrite <- pGivesBound; auto with float.",
            "VernacExtend",
            "aab0acd207adc0b61fe2d138022e47ac1c66af9b"
        ],
        [
            "rewrite <- (Zabs_eq radix); auto with zarith.",
            "VernacExtend",
            "66fcebcc97af9eb0fe5a4854c40bb3ee6afb1c7b"
        ],
        [
            "rewrite <- Zabs_Zmult; rewrite Zmult_comm; auto with float.",
            "VernacExtend",
            "b414f8c71fdd507745c929cf702c324cf1f8e083"
        ],
        [
            "generalize precisionNotZero; case precision; simpl in |- *; try (intros tmp; Contradict tmp; auto; fail); intros; rewrite plus_comm; simpl in |- *; auto.",
            "VernacExtend",
            "26434b66cf32e2f039f31a9b5f8eae76b366d2c1"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Theorem maxMaxBis : forall (p : float) (z : Z), Fbounded b p -> (Fexp p < z)%Z -> (Fabs p < Float nNormMin z)%R.",
            "VernacStartTheoremProof",
            "72109704418117f31f2c28fff79d9dae0946b67c"
        ],
        [
            "intros p z H' H'0; apply Rlt_le_trans with (FtoR radix (Float (Zpos (vNum b)) (Zpred z))).",
            "VernacExtend",
            "5790e589fab0fe883a576dcf8f4d5f64ad22e516"
        ],
        [
            "unfold FtoRradix in |- *; apply maxMax; auto with zarith; unfold Zpred in |- *; auto with zarith.",
            "VernacExtend",
            "c11b95e0075b8ab0742905b7e04802fd9f71b114"
        ],
        [
            "unfold FtoRradix, FtoR, nNormMin in |- *; simpl in |- *.",
            "VernacExtend",
            "5f3f1f9b743a1e24d19af80d1a761c29a8224192"
        ],
        [
            "pattern z at 2 in |- *; replace z with (Zsucc (Zpred z)); [ rewrite powerRZ_Zs; auto with real zarith | unfold Zsucc, Zpred in |- *; ring ].",
            "VernacExtend",
            "0ad96c73e242c998c2c3fd4926a332e8261f3545"
        ],
        [
            "rewrite <- Rmult_assoc.",
            "VernacExtend",
            "34da3c50cde53c179a4908b1329a459071245c05"
        ],
        [
            "apply Rmult_le_compat_r; auto with real arith.",
            "VernacExtend",
            "118f6d965446d8abadb72c8e021be24c227d51f0"
        ],
        [
            "pattern radix at 2 in |- *; rewrite <- (Zpower_nat_1 radix).",
            "VernacExtend",
            "d118b93559bef2196f6348439edfc7a6f7ec3596"
        ],
        [
            "rewrite <- Rmult_IZR.",
            "VernacExtend",
            "77ff9e5d0697bdc5f92b38cf0c531b2d80b04bc3"
        ],
        [
            "rewrite <- Zpower_nat_is_exp.",
            "VernacExtend",
            "423fb7d633dcb59552e41198fb746fd733daae1e"
        ],
        [
            "replace (pred precision + 1) with precision.",
            "VernacExtend",
            "03efdb80b59372277056f09bcff12e546563e62d"
        ],
        [
            "replace (INR (nat_of_P (vNum b))) with (IZR (Zpos (vNum b))).",
            "VernacExtend",
            "2ea2b19e3d820517c0a75ea29d381fb862fc3e8d"
        ],
        [
            "rewrite pGivesBound; auto with real.",
            "VernacExtend",
            "71bb7ce4b53ff7751e7630fceded75eeb3e5cfa8"
        ],
        [
            "simpl; unfold IZR; rewrite <- INR_IPR; auto.",
            "VernacExtend",
            "0c06028d180fb5c58b28d8a27a8fed9b65a1d1c0"
        ],
        [
            "generalize precisionNotZero; case precision; simpl in |- *; auto with arith.",
            "VernacExtend",
            "14b174deb3ad558d88cfc7712044f1e68087a0cf"
        ],
        [
            "intros H'1; Contradict H'1; auto.",
            "VernacExtend",
            "8db85f3016bcb692223b807804acc9e52d044004"
        ],
        [
            "intros; rewrite plus_comm; simpl in |- *; auto.",
            "VernacExtend",
            "b5f6a30bb3074889e4f0881627e1dd66e2ba9e0c"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Theorem FnormalLtFirstNormalPos : forall p : float, Fnormal p -> (0 <= p)%R -> (firstNormalPos <= p)%R.",
            "VernacStartTheoremProof",
            "978a5f3e46febac06cd24a066576af6702ede4a2"
        ],
        [
            "intros p H' H'0.",
            "VernacExtend",
            "652f91006d10c9030c57f29a3311eeb49eea5491"
        ],
        [
            "case (Rle_or_lt firstNormalPos p); intros Lt0; auto with real.",
            "VernacExtend",
            "9dc8faa98b61ac5340d3d037051aa56a213265a0"
        ],
        [
            "case (FnormalLtPos p firstNormalPos); auto.",
            "VernacExtend",
            "7e684ef8dc6b78c79eda2c58dff1ddfa4818ad28"
        ],
        [
            "apply firstNormalPosNormal.",
            "VernacExtend",
            "dee660a785c6994ec939e60a8870789297e5348b"
        ],
        [
            "intros H'1; Contradict H'1; unfold firstNormalPos in |- *; simpl in |- *.",
            "VernacExtend",
            "9fa1b9a34cfaa511b0c259a81f4d0839484ecb0a"
        ],
        [
            "apply Zle_not_lt; auto with float.",
            "VernacExtend",
            "701472c83a31c28c313e4f5a1f0e7ef49cf3db6f"
        ],
        [
            "intros H'1; elim H'1; intros H'2 H'3; Contradict H'3.",
            "VernacExtend",
            "834265e17bd2971532c212e0aa64a4f67159a81b"
        ],
        [
            "unfold firstNormalPos in |- *; simpl in |- *.",
            "VernacExtend",
            "3a0197fd4d345d0592084562a5c4472923c03e85"
        ],
        [
            "apply Zle_not_lt.",
            "VernacExtend",
            "a635904a634172283c98f3792d1f8261c5710c4f"
        ],
        [
            "rewrite <- (Zabs_eq (Fnum p)); auto with float zarith.",
            "VernacExtend",
            "44bb51f8e4c90a3db4d4358a79a1ffe8393879e1"
        ],
        [
            "apply pNormal_absolu_min; auto.",
            "VernacExtend",
            "b58e9d89eea95533ae3954786f1e48fd049da3e6"
        ],
        [
            "apply LeR0Fnum with (radix := radix); auto with arith.",
            "VernacExtend",
            "c00f8de016e57af38dcf3dbeaaac139310e23af8"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Theorem FnormalLtFirstNormalNeg : forall p : float, Fnormal p -> (p <= 0)%R -> (p <= Fopp firstNormalPos)%R.",
            "VernacStartTheoremProof",
            "57237a43dd2d71ae2156c5b214bf17623d0dbc15"
        ],
        [
            "intros p H' H'0.",
            "VernacExtend",
            "652f91006d10c9030c57f29a3311eeb49eea5491"
        ],
        [
            "rewrite <- (Ropp_involutive p); unfold FtoRradix in |- *; repeat rewrite Fopp_correct.",
            "VernacExtend",
            "a9fcf69566d2d9ab199dc51428e361751c81476b"
        ],
        [
            "apply Ropp_le_contravar; rewrite <- Fopp_correct.",
            "VernacExtend",
            "4bc9a55c8e49f4b31dcef3f46d3a816fc5ed2992"
        ],
        [
            "apply FnormalLtFirstNormalPos.",
            "VernacExtend",
            "8b2440088ead8e38d8b0306e8f54dd34711002cb"
        ],
        [
            "apply FnormalFop; auto.",
            "VernacExtend",
            "8835e5dafb624b17e746322f3ee8f7816bf106f5"
        ],
        [
            "replace 0%R with (-0)%R; unfold FtoRradix in |- *; try rewrite Fopp_correct; auto with real.",
            "VernacExtend",
            "7811b635c901eb33a57f504c8eadeb9bd09a59eb"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Theorem FsubnormalDigit : forall p : float, Fsubnormal p -> Fdigit radix p < precision.",
            "VernacStartTheoremProof",
            "d4abb4179e03643066b9900b791829aeb7a47cae"
        ],
        [
            "intros p H; unfold Fdigit in |- *.",
            "VernacExtend",
            "506153d1eb8fed86533b25fa9470e3599266de2b"
        ],
        [
            "case (Z_eq_dec (Fnum p) 0); intros Z1.",
            "VernacExtend",
            "5a053a09d57cfe6a43f4aed0b3581b0f31e0fa1c"
        ],
        [
            "rewrite Z1; simpl in |- *; auto with arith.",
            "VernacExtend",
            "d34823aec3c6daf0b7e73ff436372542ab63e466"
        ],
        [
            "apply lt_S_n; apply le_lt_n_Sm.",
            "VernacExtend",
            "476c15d4fc321e872afa7b8d35a2b5470c414849"
        ],
        [
            "rewrite <- digitPredVNumiSPrecision.",
            "VernacExtend",
            "f1821583e3583092791145d0d8251e596de4a78a"
        ],
        [
            "replace (S (digit radix (Fnum p))) with (digit radix (Fnum p) + 1).",
            "VernacExtend",
            "0878100d9c8a5ab0b2d4e11591e1c09026ff924f"
        ],
        [
            "rewrite <- digitAdd; auto with zarith.",
            "VernacExtend",
            "4890376399403e4b5cc3f790585506d45c62a432"
        ],
        [
            "apply digit_monotone; auto with float.",
            "VernacExtend",
            "d425c169cb8252ead5dda09443d3ddee616d206f"
        ],
        [
            "rewrite (fun x => Zabs_eq (Zpred x)); auto with float zarith.",
            "VernacExtend",
            "079b63ddabab313a276d818bc911db4a00170afc"
        ],
        [
            "rewrite Zmult_comm; rewrite Zpower_nat_1; auto with float zarith.",
            "VernacExtend",
            "d483ac156a56086319c904a0077da2bb26c7d878"
        ],
        [
            "rewrite plus_comm; simpl in |- *; auto.",
            "VernacExtend",
            "a510e8b3ccb9a5207bf615eb71ff2e3ed8078042"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Hint Resolve FsubnormalDigit: float.",
            "VernacHints",
            "41223569f4af75423a7769b56e65c1c3376c30e6"
        ],
        [
            "Theorem pSubnormal_absolu_min : forall p : float, Fsubnormal p -> (Zabs (Fnum p) < nNormMin)%Z.",
            "VernacStartTheoremProof",
            "c80d76ab676a18d28b1ee84ff9745027cb7986c1"
        ],
        [
            "intros p H'; apply Zlt_mult_simpl_l with (c := radix); auto with zarith.",
            "VernacExtend",
            "a4b44060be7684952a779796e5b4381d816cb755"
        ],
        [
            "replace (radix * Zabs (Fnum p))%Z with (Zabs (radix * Fnum p)).",
            "VernacExtend",
            "ffdf724a7f92af2f3786bfdc6c4981928d308406"
        ],
        [
            "replace (radix * nNormMin)%Z with (Zpos (vNum b)); auto with float.",
            "VernacExtend",
            "5d7e69981f84b731c09adbda81b0da05f08c5fb6"
        ],
        [
            "rewrite pGivesBound.",
            "VernacExtend",
            "a0663579a8c1e026e4139f9de2213b856a6f5f6f"
        ],
        [
            "replace precision with (1 + pred precision).",
            "VernacExtend",
            "9a07f22d4cf558184ea7635eb0f7e338bdcfc399"
        ],
        [
            "rewrite Zpower_nat_is_exp; auto with zarith; rewrite Zpower_nat_1; auto.",
            "VernacExtend",
            "1d227db8374e27d2db233d5caa2ea4043b64eb1d"
        ],
        [
            "generalize precisionNotZero; case precision; simpl in |- *; auto.",
            "VernacExtend",
            "e18f7c8cc7de7eccbcc608c049f5ad53d8212571"
        ],
        [
            "intros H; Contradict H; auto.",
            "VernacExtend",
            "b8f102a35f01386ffc33a24a648e5b39abe8306a"
        ],
        [
            "rewrite Zabs_Zmult; rewrite (Zabs_eq radix); auto with zarith.",
            "VernacExtend",
            "bd9102e07975df0be269f68b59f449eea0021a86"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Theorem FsubnormalLtFirstNormalPos : forall p : float, Fsubnormal p -> (0 <= p)%R -> (p < firstNormalPos)%R.",
            "VernacStartTheoremProof",
            "f642761850842970062f2932cfa2da34df64969e"
        ],
        [
            "intros p H' H'0; unfold FtoRradix, FtoR, firstNormalPos in |- *; simpl in |- *.",
            "VernacExtend",
            "7d808e278058f6b6be4deb461ff7ef7fdb9ac698"
        ],
        [
            "replace (Fexp p) with (- dExp b)%Z.",
            "VernacExtend",
            "5089f945bce68ffac4e4f755b5f08e9cdc3921ba"
        ],
        [
            "2: apply sym_equal; case H'; intros H1 H2; case H2; auto.",
            "VernacExtend",
            "63c04fbc5909242e153801fca0592ae88359bc56"
        ],
        [
            "apply Rmult_lt_compat_r; auto with real arith.",
            "VernacExtend",
            "83ae992c0036ab40d3af8510c7d9b2df90522b46"
        ],
        [
            "apply Rlt_IZR.",
            "VernacExtend",
            "e467d4c1a59850f4e46f0361acb2bf3fda9af65b"
        ],
        [
            "rewrite <- (Zabs_eq (Fnum p)).",
            "VernacExtend",
            "aa004233038f5300964e9583f56c0d8422a454fd"
        ],
        [
            "2: apply LeR0Fnum with (radix := radix); auto with zarith.",
            "VernacExtend",
            "a30f85844cdf0271008bddb87bf57541070568cf"
        ],
        [
            "apply pSubnormal_absolu_min; auto.",
            "VernacExtend",
            "522bd827134f88d5a867808d74f826400c0cfe38"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Theorem FsubnormalnormalLtPos : forall p q : float, Fsubnormal p -> Fnormal q -> (0 <= p)%R -> (0 <= q)%R -> (p < q)%R.",
            "VernacStartTheoremProof",
            "aa32dd4437713946a08a66254c8cca5845ed3bbe"
        ],
        [
            "intros p q H' H'0 H'1 H'2.",
            "VernacExtend",
            "72bc33bd695361090defa76b144ed28b290b1f49"
        ],
        [
            "apply Rlt_le_trans with (r2 := FtoRradix firstNormalPos).",
            "VernacExtend",
            "bce5b809e4a68854297e334b1df2e6333499a8b1"
        ],
        [
            "apply FsubnormalLtFirstNormalPos; auto.",
            "VernacExtend",
            "83b0423e813df80cbde64633c7afd50446d879e0"
        ],
        [
            "apply FnormalLtFirstNormalPos; auto.",
            "VernacExtend",
            "6d830bb7e3fe03bde201ffdabda477c0e4bfb058"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Theorem FsubnormalnormalLtNeg : forall p q : float, Fsubnormal p -> Fnormal q -> (p <= 0)%R -> (q <= 0)%R -> (q < p)%R.",
            "VernacStartTheoremProof",
            "542b5b336708561a38feabef45a965e91d2b906c"
        ],
        [
            "intros p q H' H'0 H'1 H'2.",
            "VernacExtend",
            "72bc33bd695361090defa76b144ed28b290b1f49"
        ],
        [
            "rewrite <- (Ropp_involutive p); rewrite <- (Ropp_involutive q).",
            "VernacExtend",
            "cb16e14f143d19239e901dd33ad03217092bf625"
        ],
        [
            "apply Ropp_gt_lt_contravar; red in |- *.",
            "VernacExtend",
            "cc71f51db1a6c86d03b8b84a16434c55aa16d439"
        ],
        [
            "unfold FtoRradix in |- *; repeat rewrite <- Fopp_correct.",
            "VernacExtend",
            "60bdf11d344a93c0e6ffb5b60ca4f1ae748399fa"
        ],
        [
            "apply FsubnormalnormalLtPos; auto.",
            "VernacExtend",
            "648020a658f2233a06f8fc9d4fb7c6a31b3fc768"
        ],
        [
            "apply FsubnormFopp; auto.",
            "VernacExtend",
            "b51b3b69b2dc165300d10bc0de82f0f42e439082"
        ],
        [
            "apply FnormalFop; auto.",
            "VernacExtend",
            "8835e5dafb624b17e746322f3ee8f7816bf106f5"
        ],
        [
            "unfold FtoRradix in |- *; rewrite Fopp_correct; replace 0%R with (-0)%R; auto with real.",
            "VernacExtend",
            "d18f833dbd29c5201239b1f60de27d66d1e6d839"
        ],
        [
            "unfold FtoRradix in |- *; rewrite Fopp_correct; replace 0%R with (-0)%R; auto with real.",
            "VernacExtend",
            "d18f833dbd29c5201239b1f60de27d66d1e6d839"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Definition Fnormalize (p : float) := match Z_zerop (Fnum p) with | left _ => Float 0 (- dExp b) | right _ => Fshift radix (min (precision - Fdigit radix p) (Zabs_nat (dExp b + Fexp p))) p end.",
            "VernacDefinition",
            "e1fb1465dbfbb86fbc2abff44596d86135b95d8b"
        ],
        [
            "Theorem FnormalizeCorrect : forall p : float, Fnormalize p = p :>R.",
            "VernacStartTheoremProof",
            "a6cbd281a37e08565acf0c32d93ff8abf0455a3a"
        ],
        [
            "intros p; unfold Fnormalize in |- *.",
            "VernacExtend",
            "af737c6295b51236845c262eefe013de5a10afe5"
        ],
        [
            "case (Z_zerop (Fnum p)).",
            "VernacExtend",
            "f6e8ca693440c0ff765d63c33301e629b0706b38"
        ],
        [
            "case p; intros Fnum1 Fexp1 H'; unfold FtoRradix, FtoR in |- *; rewrite H'; simpl in |- *; auto with real.",
            "VernacExtend",
            "528b8bf396f5cbe7cb214de7b1a5a716d358bf80"
        ],
        [
            "apply trans_eq with 0%R; auto with real.",
            "VernacExtend",
            "0b0c5cd99ac1dc1440005ddfa1787ad022333180"
        ],
        [
            "intros H'; unfold FtoRradix in |- *; apply FshiftCorrect; auto.",
            "VernacExtend",
            "c92f619a072609f5409af2d6acfc74964bb56d63"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Theorem Fnormalize_Fopp : forall p : float, Fnormalize (Fopp p) = Fopp (Fnormalize p).",
            "VernacStartTheoremProof",
            "00c3714aedb46e7126e82438021a545078272853"
        ],
        [
            "intros p; case p; unfold Fnormalize in |- *; simpl in |- *.",
            "VernacExtend",
            "4c0614e742a9420dd6654d07d28665a4a0db382f"
        ],
        [
            "intros Fnum1 Fexp1; case (Z_zerop Fnum1); intros H'.",
            "VernacExtend",
            "1abc30b7ab407c0a17f1989d867df2ebdb7acd48"
        ],
        [
            "rewrite H'; simpl in |- *; auto.",
            "VernacExtend",
            "4802beb6bcd634905be0061678af4df0163e0ae0"
        ],
        [
            "case (Z_zerop (- Fnum1)); intros H'0; simpl in |- *; auto.",
            "VernacExtend",
            "206b568c7a7ff93415e590ed02f3e8404f302420"
        ],
        [
            "case H'; replace Fnum1 with (- - Fnum1)%Z; auto with zarith.",
            "VernacExtend",
            "264d5ea68334374aeb5b293817e5e98feeaef817"
        ],
        [
            "unfold Fopp, Fshift, Fdigit in |- *; simpl in |- *.",
            "VernacExtend",
            "2c07dea2d2d6f36d8da1f630d9ab9b7ac337e952"
        ],
        [
            "replace (digit radix (- Fnum1)) with (digit radix Fnum1).",
            "VernacExtend",
            "ebfbd97a222175e344715bb0e94600e97acbdb89"
        ],
        [
            "apply floatEq; simpl in |- *; auto with zarith.",
            "VernacExtend",
            "7cb0f0dca04ed4670fc25041923a7e43d1e8b18e"
        ],
        [
            "ring.",
            "VernacExtend",
            "baadd9fc4c175005af409bb466fcea9fab25b4e6"
        ],
        [
            "case Fnum1; simpl in |- *; auto.",
            "VernacExtend",
            "95951bdc3df325d3202baf58f2a10c62e4cec550"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Theorem FnormalizeBounded : forall p : float, Fbounded b p -> Fbounded b (Fnormalize p).",
            "VernacStartTheoremProof",
            "17d99e0f71905a5e7fd307635aad0b0c685d80ea"
        ],
        [
            "intros p H'; red in |- *; split.",
            "VernacExtend",
            "2e78714152b03e7c7edfb0a8ec5b517cb6f61dda"
        ],
        [
            "unfold Fnormalize in |- *; case (Z_zerop (Fnum p)); auto.",
            "VernacExtend",
            "37c780a241e360a3c7d50165e4d09ffbe28f9bfa"
        ],
        [
            "intros H'0; simpl in |- *; auto with zarith.",
            "VernacExtend",
            "eb28f5d595e2eeeaca4c77cc577ea8caf24f202e"
        ],
        [
            "intros H'0.",
            "VernacExtend",
            "e8ea833695b450eab455d302901072f04fd3096d"
        ],
        [
            "apply digitGivesBoundedNum; auto.",
            "VernacExtend",
            "ae19c53331c332e3219aa45175407c68aa1b2499"
        ],
        [
            "rewrite FshiftFdigit; auto.",
            "VernacExtend",
            "b1982d61367ccb9d616e57c301f0a349ee674cdc"
        ],
        [
            "apply le_trans with (m := Fdigit radix p + (precision - Fdigit radix p)); auto with arith.",
            "VernacExtend",
            "6f12985459c7971296ebe4fc0b60f6aad5582e8f"
        ],
        [
            "rewrite <- le_plus_minus; auto.",
            "VernacExtend",
            "fc4f2e87cbcf652674fcb17f749e642b73f98c3a"
        ],
        [
            "apply pGivesDigit; auto.",
            "VernacExtend",
            "1c39f2467670c0166a6c18cdf35c1718df16cb1e"
        ],
        [
            "unfold Fnormalize in |- *; case (Z_zerop (Fnum p)); auto.",
            "VernacExtend",
            "37c780a241e360a3c7d50165e4d09ffbe28f9bfa"
        ],
        [
            "simpl in |- *; auto with zarith.",
            "VernacExtend",
            "61d3cdc6299cf8abf87703c074ca4503f0f27a12"
        ],
        [
            "generalize H'; case p; unfold Fbounded, Fnormal, Fdigit in |- *; simpl in |- *.",
            "VernacExtend",
            "67088980dd12624d2c80ed28c232e961d064d9e9"
        ],
        [
            "intros Fnum1 Fexp1 H'0 H'1.",
            "VernacExtend",
            "52b6a28c5725ac57ebd8f388c273ffe84f6e1751"
        ],
        [
            "apply Zle_trans with (m := (Fexp1 - Zabs_nat (dExp b + Fexp1))%Z).",
            "VernacExtend",
            "da828dea34302097f70b8fa9f2b144c77066e9dc"
        ],
        [
            "rewrite inj_abs; auto with zarith.",
            "VernacExtend",
            "d832d70d6f4177fa3d020760f1ccab18c59abdc1"
        ],
        [
            "unfold Zminus in |- *; apply Zplus_le_compat_l; auto.",
            "VernacExtend",
            "e2b6d6daa588524967376cb32f41a2dbed06850e"
        ],
        [
            "apply Zle_Zopp; auto.",
            "VernacExtend",
            "6473061a1c9978f07e616efc9f2faa1ba76e9c28"
        ],
        [
            "apply inj_le; auto with arith.",
            "VernacExtend",
            "2b46e939b249039a6e0ba1af5b3252a5b30b9c71"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Theorem FnormalizeCanonic : forall p : float, Fbounded b p -> Fcanonic (Fnormalize p).",
            "VernacStartTheoremProof",
            "17e7150a19b7b193300358ab5ed7fb3ac308768b"
        ],
        [
            "intros p H'.",
            "VernacExtend",
            "bb6abbd0a5bb134f5276d7928176425ceae09e54"
        ],
        [
            "generalize (FnormalizeBounded p H').",
            "VernacExtend",
            "535012385ecb654656c1faa125125737319b6455"
        ],
        [
            "unfold Fnormalize in |- *; case (Z_zerop (Fnum p)); auto.",
            "VernacExtend",
            "37c780a241e360a3c7d50165e4d09ffbe28f9bfa"
        ],
        [
            "intros H'0; right; repeat split; simpl in |- *; auto with zarith.",
            "VernacExtend",
            "c94822acf816634029aa619c5f73351dcb0fda4b"
        ],
        [
            "rewrite Zmult_comm; simpl in |- *; red in |- *; simpl in |- *; auto.",
            "VernacExtend",
            "eb8130612e73254008966466a282c91fa0567b98"
        ],
        [
            "intros H'1.",
            "VernacExtend",
            "27d12cfd315031f2731cee2bf5ecf81dd7f6b369"
        ],
        [
            "case (min_or (precision - Fdigit radix p) (Zabs_nat (dExp b + Fexp p))); intros Min; case Min; clear Min; intros MinR MinL.",
            "VernacExtend",
            "e717b52f7464f0c4b0dffcddbb6e1630290f8b55"
        ],
        [
            "intros H'2; left; split; auto.",
            "VernacExtend",
            "00134478f7ec30131f52fdd8d96d16c146aa18c7"
        ],
        [
            "rewrite MinR; unfold Fshift in |- *; simpl in |- *.",
            "VernacExtend",
            "2fdf1db12737e13b81d57ff058f21739668d428c"
        ],
        [
            "apply Zle_trans with (Zabs (radix * (Zpower_nat radix (pred (Fdigit radix p)) * Zpower_nat radix (precision - Fdigit radix p)))).",
            "VernacExtend",
            "85a871e8b8d24092545a8b21454de6c2ee4061df"
        ],
        [
            "pattern radix at 1 in |- *; rewrite <- (Zpower_nat_1 radix).",
            "VernacExtend",
            "f14a7d10a321512328b4f4b8a40b9642d9d4416c"
        ],
        [
            "repeat rewrite <- Zpower_nat_is_exp; auto with zarith.",
            "VernacExtend",
            "7f78a3a3b35edeb65a56b978916ac916c983b6e4"
        ],
        [
            "replace (1 + (pred (Fdigit radix p) + (precision - Fdigit radix p))) with precision; auto.",
            "VernacExtend",
            "79dc0174ba636ea3c33072fc7693fa5e1b5a64e0"
        ],
        [
            "rewrite pGivesBound; auto with real.",
            "VernacExtend",
            "71bb7ce4b53ff7751e7630fceded75eeb3e5cfa8"
        ],
        [
            "rewrite Zabs_eq; auto with zarith.",
            "VernacExtend",
            "e3b6647506c6d43441146989691d7c27f1722b7e"
        ],
        [
            "cut (Fdigit radix p <= precision); auto with float.",
            "VernacExtend",
            "e9cb13aba5474dad85ef4d11844b97658e6804c0"
        ],
        [
            "unfold Fdigit in |- *.",
            "VernacExtend",
            "2c1b7b2f3f520d25bcc18c2627ab51e602f9face"
        ],
        [
            "generalize (digitNotZero _ radixMoreThanOne _ H'1); case (digit radix (Fnum p)); simpl in |- *; auto.",
            "VernacExtend",
            "a4f0ac8645a95572e491d3c38eb98d1221cd9618"
        ],
        [
            "intros tmp; Contradict tmp; auto with arith.",
            "VernacExtend",
            "33f2290d8230916d25222ab1ffe276edcc8fd51b"
        ],
        [
            "intros n H H0; change (precision = S n + (precision - S n)) in |- *.",
            "VernacExtend",
            "9b1917739aa7d23cc20e9318d78181b428da1cf5"
        ],
        [
            "apply le_plus_minus; auto.",
            "VernacExtend",
            "7d49dfe9def5f28d67afefdb4d8de9c60fd78f7b"
        ],
        [
            "apply pGivesDigit; auto.",
            "VernacExtend",
            "1c39f2467670c0166a6c18cdf35c1718df16cb1e"
        ],
        [
            "repeat rewrite Zabs_Zmult.",
            "VernacExtend",
            "4b7da0b8275268c7f3ee6a3b7ea19434419af5d5"
        ],
        [
            "apply Zle_Zmult_comp_l.",
            "VernacExtend",
            "f1e1192aa0fdc0751e809a9191b2e3e0712da035"
        ],
        [
            "apply Zle_ZERO_Zabs.",
            "VernacExtend",
            "0efd15ac13c0ddfa277f0601112084fecf1121e7"
        ],
        [
            "apply Zle_Zmult_comp_r.",
            "VernacExtend",
            "dcbb6bf59a888ba62f04477a711698a33767b390"
        ],
        [
            "apply Zle_ZERO_Zabs.",
            "VernacExtend",
            "0efd15ac13c0ddfa277f0601112084fecf1121e7"
        ],
        [
            "rewrite (fun x => Zabs_eq (Zpower_nat radix x)); auto with zarith.",
            "VernacExtend",
            "7e071cac3a7e901b238c070ddda3bfcfa7cd1d07"
        ],
        [
            "unfold Fdigit in |- *; apply digitLess; auto.",
            "VernacExtend",
            "461eb37baeb2f677567fe73a986f6f7d5544a473"
        ],
        [
            "intros H'0; right; split; auto; split.",
            "VernacExtend",
            "5a6dd9b28c013030955be8163259c2a9d80ed4d0"
        ],
        [
            "rewrite MinR; clear MinR; auto.",
            "VernacExtend",
            "5a4039597dd4e0b8430a7b7914994af748c66c30"
        ],
        [
            "cut (- dExp b <= Fexp p)%Z; [ idtac | auto with float ].",
            "VernacExtend",
            "536cd1d147edad3721c26a43ae123453aa5a1448"
        ],
        [
            "case p; simpl in |- *.",
            "VernacExtend",
            "4b6ec10ea1e2a069d780a7ff8b2a24f25b841032"
        ],
        [
            "intros Fnum1 Fexp1 H'2; rewrite inj_abs; auto with zarith.",
            "VernacExtend",
            "675aa9bb3ef345572918a40fdaddbd462b619c22"
        ],
        [
            "rewrite MinR.",
            "VernacExtend",
            "808af0fc55763624e15c27964cb46ddba7d45307"
        ],
        [
            "rewrite <- (fun x => Zabs_eq (Zpos x)).",
            "VernacExtend",
            "3a4fcdd4ae721d9ab59320e928b6ad0d54defd73"
        ],
        [
            "unfold Fshift in |- *; simpl in |- *.",
            "VernacExtend",
            "bc2226e4b5a4ef5bbaea414d285c81f30a1eb932"
        ],
        [
            "apply Zlt_le_trans with (Zabs (radix * (Zpower_nat radix (Fdigit radix p) * Zpower_nat radix (Zabs_nat (dExp b + Fexp p))))).",
            "VernacExtend",
            "ca6caad8ca86771700829c6bed7fb481b01c116a"
        ],
        [
            "repeat rewrite Zabs_Zmult.",
            "VernacExtend",
            "4b7da0b8275268c7f3ee6a3b7ea19434419af5d5"
        ],
        [
            "apply Zmult_gt_0_lt_compat_l.",
            "VernacExtend",
            "b88b0195b1aae341f6f24d160309da9055aa932e"
        ],
        [
            "apply Zlt_gt; rewrite Zabs_eq; auto with zarith.",
            "VernacExtend",
            "021d5fe3aa05ac1519cf15dd524225f17257ca4b"
        ],
        [
            "apply Zmult_gt_0_lt_compat_r.",
            "VernacExtend",
            "e36de59427a630bdd03b43f743c37a134012ade6"
        ],
        [
            "apply Zlt_gt; rewrite Zabs_eq; auto with zarith.",
            "VernacExtend",
            "021d5fe3aa05ac1519cf15dd524225f17257ca4b"
        ],
        [
            "rewrite (fun x => Zabs_eq (Zpower_nat radix x)); auto with zarith.",
            "VernacExtend",
            "7e071cac3a7e901b238c070ddda3bfcfa7cd1d07"
        ],
        [
            "unfold Fdigit in |- *; apply digitMore; auto.",
            "VernacExtend",
            "2d3fe2efe0d7089de930f8801034dbb2866d931b"
        ],
        [
            "pattern radix at 1 in |- *; rewrite <- (Zpower_nat_1 radix).",
            "VernacExtend",
            "f14a7d10a321512328b4f4b8a40b9642d9d4416c"
        ],
        [
            "repeat rewrite <- Zpower_nat_is_exp; auto with zarith.",
            "VernacExtend",
            "7f78a3a3b35edeb65a56b978916ac916c983b6e4"
        ],
        [
            "apply Zle_trans with (Zabs (Zpower_nat radix precision)).",
            "VernacExtend",
            "89302aaa42d42dc48f08a70f665ff1e91209b4a9"
        ],
        [
            "repeat rewrite Zabs_eq; auto with zarith.",
            "VernacExtend",
            "ce6af9c9e2dbbf5e96aba4104d03a58482acdd03"
        ],
        [
            "rewrite pGivesBound.",
            "VernacExtend",
            "a0663579a8c1e026e4139f9de2213b856a6f5f6f"
        ],
        [
            "rewrite (fun x => Zabs_eq (Zpower_nat radix x)); auto with zarith.",
            "VernacExtend",
            "7e071cac3a7e901b238c070ddda3bfcfa7cd1d07"
        ],
        [
            "red in |- *; simpl in |- *; red in |- *; intros; discriminate.",
            "VernacExtend",
            "512de8373f18db00ac829b3d4ce633b262e1baeb"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Theorem NormalAndSubNormalNotEq : forall p q : float, Fnormal p -> Fsubnormal q -> p <> q :>R.",
            "VernacStartTheoremProof",
            "a9329dac5d1d03c997591b1474a1fd19bc37db40"
        ],
        [
            "intros p q H' H'0; red in |- *; intros H'1.",
            "VernacExtend",
            "417bb075884b20bde9eb4339b6f124e79565f55a"
        ],
        [
            "case (Rtotal_order 0 p); intros H'2.",
            "VernacExtend",
            "ba367627b3f3fe32bc8ff67925b0b5e8f7001e46"
        ],
        [
            "absurd (q < p)%R.",
            "VernacExtend",
            "029ecc44369441317277ec1bbd09db5fb7d2cbf3"
        ],
        [
            "rewrite <- H'1; auto with real.",
            "VernacExtend",
            "62e72e0f8f6c0fd16992b57737ee86889402658f"
        ],
        [
            "apply FsubnormalnormalLtPos; auto with real.",
            "VernacExtend",
            "c1fb4089c6097da5fcc003ed01de850e42d32f85"
        ],
        [
            "rewrite <- H'1; auto with real.",
            "VernacExtend",
            "62e72e0f8f6c0fd16992b57737ee86889402658f"
        ],
        [
            "absurd (p < q)%R.",
            "VernacExtend",
            "1c63eceeafc041f63dcf5c95e2eb83c9186b6baa"
        ],
        [
            "rewrite <- H'1; auto with real.",
            "VernacExtend",
            "62e72e0f8f6c0fd16992b57737ee86889402658f"
        ],
        [
            "apply FsubnormalnormalLtNeg; auto with real.",
            "VernacExtend",
            "841bafce000003eb1cceb639718ada9b207e7caf"
        ],
        [
            "rewrite <- H'1; auto with real.",
            "VernacExtend",
            "62e72e0f8f6c0fd16992b57737ee86889402658f"
        ],
        [
            "elim H'2; intros H'3; try rewrite <- H'3; auto with real.",
            "VernacExtend",
            "ef451473639a94678543dd01d80c26de94c3c6d1"
        ],
        [
            "elim H'2; intros H'3; try rewrite <- H'3; auto with real.",
            "VernacExtend",
            "ef451473639a94678543dd01d80c26de94c3c6d1"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Theorem FcanonicUnique : forall p q : float, Fcanonic p -> Fcanonic q -> p = q :>R -> p = q.",
            "VernacStartTheoremProof",
            "c41df31f81cd4f08f3eb06ae86e4aca6448946cd"
        ],
        [
            "intros p q H' H'0 H'1; case H'; case H'0; intros H'2 H'3.",
            "VernacExtend",
            "5d7cab1d0bab690b21dca63090a8bef8158f7885"
        ],
        [
            "apply FnormalUnique; auto.",
            "VernacExtend",
            "87c98260a951be352a4feb842e8fcf644fae23b3"
        ],
        [
            "Contradict H'1; apply NormalAndSubNormalNotEq; auto.",
            "VernacExtend",
            "92138eafaaad2b3263215c2e626aed85da7a2df3"
        ],
        [
            "absurd (q = p :>R); auto; apply NormalAndSubNormalNotEq; auto.",
            "VernacExtend",
            "c71e8cb3f7d7bd0ef4d8c493e8c592af707a1b8c"
        ],
        [
            "apply FsubnormalUnique; auto.",
            "VernacExtend",
            "378f288f48bd08d2d86422cc454652676e7fa15d"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Theorem FcanonicLeastExp : forall x y : float, x = y :>R -> Fbounded b x -> Fcanonic y -> (Fexp y <= Fexp x)%Z.",
            "VernacStartTheoremProof",
            "dc7b7898b211530eb2de07a11d26b4db76131a07"
        ],
        [
            "intros x y H H0 H1.",
            "VernacExtend",
            "2b8b226895e77c4671d00b26c91a648cb5bf7e1e"
        ],
        [
            "cut (Fcanonic (Fnormalize x)); [ intros | apply FnormalizeCanonic; auto ].",
            "VernacExtend",
            "18676e53cafb303067a3ddd6b7ead0b959482826"
        ],
        [
            "replace y with (Fnormalize x); [ simpl in |- * | apply FcanonicUnique; auto with real ].",
            "VernacExtend",
            "17ca18a7598d9cddecb4e7681fb53e7b31556a07"
        ],
        [
            "unfold Fnormalize in |- *.",
            "VernacExtend",
            "a4da8b79800b4dc258df91fc27842922fedc9635"
        ],
        [
            "case (Z_zerop (Fnum x)); simpl in |- *; intros Z1; auto with float.",
            "VernacExtend",
            "9d56ab815b9badf24e8a3511360bf6f1035c3db9"
        ],
        [
            "apply Zplus_le_reg_l with (- Fexp x)%Z.",
            "VernacExtend",
            "547440626dd73101e323b4c4d82d9fd07dc85e45"
        ],
        [
            "replace (- Fexp x + Fexp x)%Z with (- (0))%Z; try ring.",
            "VernacExtend",
            "516b92fdd6380694dbabc99a4400f544e49b8f64"
        ],
        [
            "replace (- Fexp x + (Fexp x - min (precision - Fdigit radix x) (Zabs_nat (dExp b + Fexp x))))%Z with (- min (precision - Fdigit radix x) (Zabs_nat (dExp b + Fexp x)))%Z; try ring.",
            "VernacExtend",
            "fcdb28dfba756e337e65b3bf4eb58176d2862f40"
        ],
        [
            "apply Zle_Zopp; auto with arith zarith.",
            "VernacExtend",
            "58fbe3161e6e2cf8f17484fda945bb6156076b0a"
        ],
        [
            "rewrite <- H.",
            "VernacExtend",
            "95b84807b4afb2ef79b7cc04a1c91a4e3a502e47"
        ],
        [
            "apply FnormalizeCorrect.",
            "VernacExtend",
            "8324bccda0365905ffe25f01d1a9940694616ef0"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Theorem FcanonicLtPos : forall p q : float, Fcanonic p -> Fcanonic q -> (0 <= p)%R -> (p < q)%R -> (Fexp p < Fexp q)%Z \\/ Fexp p = Fexp q /\\ (Fnum p < Fnum q)%Z.",
            "VernacStartTheoremProof",
            "a713a399f0d92b1a2bb045aab8a13c09b4191ae6"
        ],
        [
            "intros p q H' H'0 H'1 H'2; case H'; case H'0.",
            "VernacExtend",
            "651df08173d070487a5faf8336c6eac76cf49237"
        ],
        [
            "intros H'3 H'4; apply FnormalLtPos; auto.",
            "VernacExtend",
            "2f512aa726a4c4ba176e13b89957662b19ea4665"
        ],
        [
            "intros H'3 H'4; absurd (p < q)%R; auto.",
            "VernacExtend",
            "f0a1e2d0f3b4dfb7a4990ed5f9b9a5bf161c7f65"
        ],
        [
            "apply Rlt_asym.",
            "VernacExtend",
            "d3605aa75ca4799993a9a1b64d6a2ac717520cb1"
        ],
        [
            "apply FsubnormalnormalLtPos; auto.",
            "VernacExtend",
            "648020a658f2233a06f8fc9d4fb7c6a31b3fc768"
        ],
        [
            "apply Rle_trans with (r2 := FtoRradix p); auto with real.",
            "VernacExtend",
            "d835fe7a174af70418d70161f883348277b36d95"
        ],
        [
            "intros H'3 H'4; case (Z_eq_dec (Fexp q) (- dExp b)); intros H'5.",
            "VernacExtend",
            "d8c3e16df7c8994bf995801cb1775db7500cf40f"
        ],
        [
            "right; split.",
            "VernacExtend",
            "7f40e6faa2e8d6f2ee2a39b745aa28054e5d87de"
        ],
        [
            "rewrite H'5; case H'4; intros H1 H2; case H2; auto.",
            "VernacExtend",
            "3dd5d35bfbff92f2fa9bbf8c00befc745f689e17"
        ],
        [
            "apply Rlt_Fexp_eq_Zlt with (radix := radix); auto with zarith.",
            "VernacExtend",
            "2012c168cda168a8a6d7df57e3070cd563cc67d0"
        ],
        [
            "rewrite H'5; case H'4; intros H1 H2; case H2; auto.",
            "VernacExtend",
            "3dd5d35bfbff92f2fa9bbf8c00befc745f689e17"
        ],
        [
            "left.",
            "VernacExtend",
            "06dad9fc5698018f3f1213205145fec906c612b1"
        ],
        [
            "replace (Fexp p) with (- dExp b)%Z; [ idtac | apply sym_equal; auto with float ].",
            "VernacExtend",
            "493d92ccbcd2bf8660ef4b03db7102ae4eae273a"
        ],
        [
            "case (Zle_lt_or_eq (- dExp b) (Fexp q)); auto with float zarith.",
            "VernacExtend",
            "4700ead5d211c2a92a424ab23ce4a748da56aadc"
        ],
        [
            "intros H'3 H'4; right; split.",
            "VernacExtend",
            "79a7778e86bd85bb76ca89a65cc581dec716a9eb"
        ],
        [
            "apply trans_equal with (- dExp b)%Z; auto with float.",
            "VernacExtend",
            "ebec6327a331e46988f8b187c1aee2acb73f43af"
        ],
        [
            "apply sym_equal; auto with float.",
            "VernacExtend",
            "3a0ae848442044cdb83bf770d81c666cfc52bb61"
        ],
        [
            "apply FsubnormalLt; auto.",
            "VernacExtend",
            "32b47806e7be9cc936922129f63a6130e4fe4770"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Theorem FcanonicLePos : forall p q : float, Fcanonic p -> Fcanonic q -> (0 <= p)%R -> (p <= q)%R -> (Fexp p < Fexp q)%Z \\/ Fexp p = Fexp q /\\ (Fnum p <= Fnum q)%Z.",
            "VernacStartTheoremProof",
            "2f040c1c0cfbb158b9cff760c29b8b2b7794de93"
        ],
        [
            "intros p q H' H'0 H'1 H'2.",
            "VernacExtend",
            "72bc33bd695361090defa76b144ed28b290b1f49"
        ],
        [
            "case H'2; intros H'3.",
            "VernacExtend",
            "7ada6407accd9453dd392c459a8eecff9d70b119"
        ],
        [
            "case FcanonicLtPos with (p := p) (q := q); auto with zarith arith.",
            "VernacExtend",
            "d607af17863089ae857c7a23d571c9324cb24be4"
        ],
        [
            "rewrite FcanonicUnique with (p := p) (q := q); auto with zarith arith.",
            "VernacExtend",
            "a70d040f3ca4e62638aab87b672a4aa22f3c2d24"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Theorem Fcanonic_Rle_Zle : forall x y : float, Fcanonic x -> Fcanonic y -> (Rabs x <= Rabs y)%R -> (Fexp x <= Fexp y)%Z.",
            "VernacStartTheoremProof",
            "933b2dc48ba7e7d4a1fdbd9eef787f504394fc03"
        ],
        [
            "intros x y H H0 H1.",
            "VernacExtend",
            "2b8b226895e77c4671d00b26c91a648cb5bf7e1e"
        ],
        [
            "cut (forall z : float, Fexp z = Fexp (Fabs z) :>Z); [ intros E | intros; unfold Fabs in |- *; simpl in |- *; auto with zarith ].",
            "VernacExtend",
            "13bd515f73322b7d445f9d9e39e01a853d718ae8"
        ],
        [
            "rewrite (E x); rewrite (E y).",
            "VernacExtend",
            "a0637030dc3afdb1592217ebf99ff37e6d96a82f"
        ],
        [
            "cut (Fcanonic (Fabs x)); [ intros D | apply FcanonicFabs; auto ].",
            "VernacExtend",
            "468a955738a2f1740e70298cfd7fbd3dc6e4908d"
        ],
        [
            "cut (Fcanonic (Fabs y)); [ intros G | apply FcanonicFabs; auto ].",
            "VernacExtend",
            "8ff11e9bccbb29d9d5c6baad718fb0405a82c10b"
        ],
        [
            "case H1; intros Z2.",
            "VernacExtend",
            "7e58b8623f1ef9b238a5585758d8f9caf7a820e0"
        ],
        [
            "case (FcanonicLtPos (Fabs x) (Fabs y)); auto with zarith.",
            "VernacExtend",
            "d96323b679a5ea3d94ab022075f98c55fd06a179"
        ],
        [
            "rewrite (Fabs_correct radix); auto with real zarith.",
            "VernacExtend",
            "380138041f48d27aba8418f5e3c7c02d8d80765e"
        ],
        [
            "repeat rewrite (Fabs_correct radix); auto with real zarith.",
            "VernacExtend",
            "a1fb426f448fa94bb83e43438ff6ea533c35b9fe"
        ],
        [
            "rewrite (FcanonicUnique (Fabs x) (Fabs y)); auto with float zarith.",
            "VernacExtend",
            "bc45f6c723a48a09b150b16b2ff1f108080124a5"
        ],
        [
            "repeat rewrite (Fabs_correct radix); auto with real zarith.",
            "VernacExtend",
            "a1fb426f448fa94bb83e43438ff6ea533c35b9fe"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Theorem FcanonicLtNeg : forall p q : float, Fcanonic p -> Fcanonic q -> (q <= 0)%R -> (p < q)%R -> (Fexp q < Fexp p)%Z \\/ Fexp p = Fexp q /\\ (Fnum p < Fnum q)%Z.",
            "VernacStartTheoremProof",
            "655418f3c2de5a3832a5bc5999131012f2a894a9"
        ],
        [
            "intros p q H' H'0 H'1 H'2.",
            "VernacExtend",
            "72bc33bd695361090defa76b144ed28b290b1f49"
        ],
        [
            "cut ((Fexp (Fopp q) < Fexp (Fopp p))%Z \\/ Fexp (Fopp q) = Fexp (Fopp p) /\\ (Fnum (Fopp q) < Fnum (Fopp p))%Z).",
            "VernacExtend",
            "f8b880bd89f64be207a1aa948cf3bce2177953ed"
        ],
        [
            "simpl in |- *.",
            "VernacExtend",
            "1b93169f4cf876d207c1fab22a2347202ab48d85"
        ],
        [
            "intros H'3; elim H'3; clear H'3; intros H'3; [ idtac | elim H'3; clear H'3; intros H'3 H'4 ]; auto; right; split; auto with zarith.",
            "VernacExtend",
            "9d6ce55c106383a7d0c2fbfe23fc8315938582f9"
        ],
        [
            "apply FcanonicLtPos; try apply FcanonicFopp; auto; unfold FtoRradix in |- *; repeat rewrite Fopp_correct; replace 0%R with (-0)%R; auto with real.",
            "VernacExtend",
            "24015f6eeea621ce72e238c9804564e45cf3c0e4"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Theorem FcanonicFnormalizeEq : forall p : float, Fcanonic p -> Fnormalize p = p.",
            "VernacStartTheoremProof",
            "4bfba9bfcb0ad0f45ac67917060733479acb6bef"
        ],
        [
            "intros p H'.",
            "VernacExtend",
            "bb6abbd0a5bb134f5276d7928176425ceae09e54"
        ],
        [
            "apply FcanonicUnique; auto.",
            "VernacExtend",
            "81f72d70f2aaec842d806a1049d89d13b2022c25"
        ],
        [
            "apply FnormalizeCanonic; auto.",
            "VernacExtend",
            "9a1fe361020914af4b8bf7ab09ee74e43ff90cec"
        ],
        [
            "apply FcanonicBound with (1 := H'); auto.",
            "VernacExtend",
            "9bb2b2d585d05a3a6ba8047cc2f9f6397f2eb7c2"
        ],
        [
            "apply FnormalizeCorrect; auto.",
            "VernacExtend",
            "eb55ec64becb45831f31eca744980a2b286c1906"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Theorem FcanonicPosFexpRlt : forall x y : float, (0 <= x)%R -> (0 <= y)%R -> Fcanonic x -> Fcanonic y -> (Fexp x < Fexp y)%Z -> (x < y)%R.",
            "VernacStartTheoremProof",
            "a3eb4ecb486aa2c6ab80fadbf31482acae97f07a"
        ],
        [
            "intros x y H' H'0 H'1 H'2 H'3.",
            "VernacExtend",
            "dc09decf5fb92b59663e01be9ed5457a33f54d5a"
        ],
        [
            "case (Rle_or_lt y x); auto.",
            "VernacExtend",
            "8cff204fc8fcfb52f35ec5692c634356fd671b03"
        ],
        [
            "intros H'4; case H'4; clear H'4; intros H'4.",
            "VernacExtend",
            "15b353ee44dd8a339396597ad074390c4fd8ce37"
        ],
        [
            "case FcanonicLtPos with (p := y) (q := x); auto.",
            "VernacExtend",
            "c748191dfc32dc517a039c32b3fe424a7d1fd808"
        ],
        [
            "intros H'5; Contradict H'3; auto with zarith.",
            "VernacExtend",
            "a83d5ec5f4f5a00aaa7499437e99d9c08bd42e73"
        ],
        [
            "intros H'5; elim H'5; intros H'6 H'7; clear H'5; Contradict H'3; rewrite H'6; auto with zarith.",
            "VernacExtend",
            "94af3e6ca341aab1f946e2ce651e70d7afa9c9a5"
        ],
        [
            "Contradict H'3.",
            "VernacExtend",
            "1690deb3bfcd28d48572d7f699b77412ce81cef7"
        ],
        [
            "rewrite FcanonicUnique with (p := x) (q := y); auto with zarith.",
            "VernacExtend",
            "5325cb815d792facdb7bfa5cbf5c411c01f6d67d"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Theorem FcanonicNegFexpRlt : forall x y : float, (x <= 0)%R -> (y <= 0)%R -> Fcanonic x -> Fcanonic y -> (Fexp x < Fexp y)%Z -> (y < x)%R.",
            "VernacStartTheoremProof",
            "2339dd8962853841d033fd62978efe5a70fd8131"
        ],
        [
            "intros x y H' H'0 H'1 H'2 H'3.",
            "VernacExtend",
            "dc09decf5fb92b59663e01be9ed5457a33f54d5a"
        ],
        [
            "case (Rle_or_lt x y); auto.",
            "VernacExtend",
            "b18304435ac081dab3a38dfa85de7a954aa1f0d5"
        ],
        [
            "intros H'4; case H'4; clear H'4; intros H'4.",
            "VernacExtend",
            "15b353ee44dd8a339396597ad074390c4fd8ce37"
        ],
        [
            "case FcanonicLtNeg with (p := x) (q := y); auto.",
            "VernacExtend",
            "616b1874e2872a13eeb24cf12577683e9cc33709"
        ],
        [
            "intros H'5; Contradict H'3; auto with zarith.",
            "VernacExtend",
            "a83d5ec5f4f5a00aaa7499437e99d9c08bd42e73"
        ],
        [
            "intros H'5; elim H'5; intros H'6 H'7; clear H'5; Contradict H'3; rewrite H'6; auto with zarith.",
            "VernacExtend",
            "94af3e6ca341aab1f946e2ce651e70d7afa9c9a5"
        ],
        [
            "Contradict H'3.",
            "VernacExtend",
            "1690deb3bfcd28d48572d7f699b77412ce81cef7"
        ],
        [
            "rewrite FcanonicUnique with (p := x) (q := y); auto with zarith.",
            "VernacExtend",
            "5325cb815d792facdb7bfa5cbf5c411c01f6d67d"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Theorem FnormalBoundAbs2 : forall p : float, Fnormal p -> (Zpos (vNum b) * Float 1%nat (Zpred (Fexp p)) <= Fabs p)%R.",
            "VernacStartTheoremProof",
            "ea3a22702d80d6d1a2db7e27d1e4615570e9fa2d"
        ],
        [
            "intros p H'; unfold FtoRradix, FtoR in |- *; simpl in |- *.",
            "VernacExtend",
            "f4a2ffd57a0f37048b5813226b31423dfedd51f1"
        ],
        [
            "replace (1 * powerRZ radix (Zpred (Fexp p)))%R with (powerRZ radix (Zpred (Fexp p))); [ idtac | ring ].",
            "VernacExtend",
            "7c7070d5d9befdd0874b7fc4b78de861926d66f2"
        ],
        [
            "pattern (Fexp p) at 2 in |- *; replace (Fexp p) with (Zsucc (Zpred (Fexp p))); [ rewrite powerRZ_Zs; auto with real zarith | unfold Zsucc, Zpred in |- *; ring ].",
            "VernacExtend",
            "306dd107f243eea1b9c8e0d5532610760a0c33fb"
        ],
        [
            "repeat rewrite <- Rmult_assoc.",
            "VernacExtend",
            "645aebe2c3685a4f868a05a2372130cedecea85e"
        ],
        [
            "apply Rmult_le_compat_r; auto with real arith.",
            "VernacExtend",
            "118f6d965446d8abadb72c8e021be24c227d51f0"
        ],
        [
            "rewrite <- Rmult_IZR; apply Rle_IZR.",
            "VernacExtend",
            "2e95a7e34e84426aeaa61bda0ff73a32c7e98e0a"
        ],
        [
            "rewrite <- (Zabs_eq radix); auto with zarith.",
            "VernacExtend",
            "66fcebcc97af9eb0fe5a4854c40bb3ee6afb1c7b"
        ],
        [
            "rewrite <- Zabs_Zmult; rewrite Zmult_comm; auto with float.",
            "VernacExtend",
            "b414f8c71fdd507745c929cf702c324cf1f8e083"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Theorem vNumbMoreThanOne : (1 < Zpos (vNum b))%Z.",
            "VernacStartTheoremProof",
            "06650462f4ec46d4bb4ffdb05da683e4ec6501ec"
        ],
        [
            "replace 1%Z with (Z_of_nat 1); [ idtac | simpl in |- *; auto ].",
            "VernacExtend",
            "b05913f1e9f310e69829144be758ee2a191492cc"
        ],
        [
            "rewrite <- (Zpower_nat_O radix); rewrite pGivesBound; auto with zarith.",
            "VernacExtend",
            "e3e53e213db6598e0c8294949447d411b91a9cbc"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Theorem PosNormMin : Zpos (vNum b) = (radix * nNormMin)%Z.",
            "VernacStartTheoremProof",
            "8af07d9c374feaaf993fd0eb624094f138ec9b46"
        ],
        [
            "pattern radix at 1 in |- *; rewrite <- (Zpower_nat_1 radix); unfold nNormMin in |- *.",
            "VernacExtend",
            "814c40dbc13872f7fb961429b7be525757817151"
        ],
        [
            "rewrite pGivesBound; rewrite <- Zpower_nat_is_exp.",
            "VernacExtend",
            "d86283e725b51b800af777e0ed38046ed13857e2"
        ],
        [
            "generalize precisionNotZero; case precision; auto with zarith.",
            "VernacExtend",
            "3230d82790f2fbc025689960dee47cea761e7e57"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Theorem FnormalPpred : forall x : Z, (- dExp b <= x)%Z -> Fnormal (Float (pPred (vNum b)) x).",
            "VernacStartTheoremProof",
            "ee38dff475e8bf691697f520c3f9af0e2e69b1c5"
        ],
        [
            "intros x H; (cut (0 <= pPred (vNum b))%Z; [ intros Z1 | unfold pPred in |- *; auto with zarith ]).",
            "VernacExtend",
            "8cfe4db7dec6e18a7f547ae1c7e6f107b5a66f75"
        ],
        [
            "repeat split; simpl in |- *; auto with zarith.",
            "VernacExtend",
            "3887b5c0ace93a706fbfe1f9aea736a5c30668c7"
        ],
        [
            "rewrite (Zabs_eq (pPred (vNum b))).",
            "VernacExtend",
            "b731c6ac9bd6576aab36203d727f17dc7f173e83"
        ],
        [
            "unfold pPred in |- *; auto with zarith.",
            "VernacExtend",
            "58d3e86f4a2a27c81c529b026349420b483b6031"
        ],
        [
            "unfold pPred in |- *; rewrite pGivesBound; auto with zarith.",
            "VernacExtend",
            "4413906761fe3f1717cb9f03e8b84557adf8b16f"
        ],
        [
            "rewrite Zabs_Zmult; repeat rewrite Zabs_eq; auto with zarith.",
            "VernacExtend",
            "6d503bdeb17263a8728ca246f94619b0da196786"
        ],
        [
            "apply Zle_trans with ((1 + 1) * pPred (vNum b))%Z; auto with zarith.",
            "VernacExtend",
            "4e86f8db2875cc7314dd0593add52a5fa6ccb937"
        ],
        [
            "replace ((1 + 1) * pPred (vNum b))%Z with (pPred (vNum b) + pPred (vNum b))%Z; auto with zarith.",
            "VernacExtend",
            "d787d595c995ff68285ee2b084e85afef71e935a"
        ],
        [
            "replace (Zpos (vNum b)) with (1 + Zpred (Zpos (vNum b)))%Z; unfold pPred in |- *; auto with zarith.",
            "VernacExtend",
            "99ad6ebe0ef5e305854d657f845643ec4bc8913f"
        ],
        [
            "apply Zplus_le_compat_r; apply Zle_Zpred.",
            "VernacExtend",
            "f2e24bb6c4a0241e4b85258c66d41f0b42af7df2"
        ],
        [
            "apply vNumbMoreThanOne.",
            "VernacExtend",
            "b132967ab8afc8b8da295d43b94f8db91ba3e890"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Theorem FcanonicPpred : forall x : Z, (- dExp b <= x)%Z -> Fcanonic (Float (pPred (vNum b)) x).",
            "VernacStartTheoremProof",
            "7f56d96d420e7eb8e521d2f0f7fd4a1c8af66723"
        ],
        [
            "intros x H; left; apply FnormalPpred; auto.",
            "VernacExtend",
            "e92e4b11e175e27e5e8a5d39597f3b21e033ca20"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Theorem FnormalNnormMin : forall x : Z, (- dExp b <= x)%Z -> Fnormal (Float nNormMin x).",
            "VernacStartTheoremProof",
            "d916526085c84da2de323726dc0d06f6077d808c"
        ],
        [
            "intros x H; (cut (0 < nNormMin)%Z; [ intros Z1 | apply nNormPos ]).",
            "VernacExtend",
            "9dfd7df816ae9a8ad04430891e84b265676fd1c2"
        ],
        [
            "repeat split; simpl in |- *; auto with zarith.",
            "VernacExtend",
            "3887b5c0ace93a706fbfe1f9aea736a5c30668c7"
        ],
        [
            "rewrite Zabs_eq; auto with zarith.",
            "VernacExtend",
            "e3b6647506c6d43441146989691d7c27f1722b7e"
        ],
        [
            "rewrite PosNormMin.",
            "VernacExtend",
            "ae7a6f6291f3752bac6962c1b321d4804fba4031"
        ],
        [
            "pattern nNormMin at 1 in |- *; replace nNormMin with (1 * nNormMin)%Z; auto with zarith.",
            "VernacExtend",
            "4a1c4adad82a645192fb272c06bc47802e6fd587"
        ],
        [
            "apply Zmult_gt_0_lt_compat_r; auto with zarith.",
            "VernacExtend",
            "591acc3e148a356d4d326ded6bdc45878b78dc06"
        ],
        [
            "rewrite PosNormMin; auto with zarith.",
            "VernacExtend",
            "96d38dd3536018c4420e24a3af51f3a97a0df149"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Theorem FcanonicNnormMin : forall x : Z, (- dExp b <= x)%Z -> Fcanonic (Float nNormMin x).",
            "VernacStartTheoremProof",
            "aa68bbe969b415f4102b034baadb69a83a0cbd39"
        ],
        [
            "intros x H; left; apply FnormalNnormMin; auto.",
            "VernacExtend",
            "d93c94acb3e616465d061962e94281e9179dea0d"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Theorem boundedNorMinGivesExp : forall (x : Z) (p : float), Fbounded b p -> (- dExp b <= x)%Z -> (Float nNormMin x <= p)%R -> (p <= Float (pPred (vNum b)) x)%R -> Fexp (Fnormalize p) = x.",
            "VernacStartTheoremProof",
            "9b6ecd8bb01a372be67d5d1c409162dcfe09231a"
        ],
        [
            "intros x p H' H'0 H'1 H'2.",
            "VernacExtend",
            "9164f6dac2854f6b06061aed3fa06ed29591791e"
        ],
        [
            "cut (0 <= p)%R; [ intros Rle1 | idtac ].",
            "VernacExtend",
            "010fdc50a592e85d4d4dd9205625a03cfaefe039"
        ],
        [
            "case (FcanonicLePos (Float nNormMin x) (Fnormalize p)); try rewrite FnormalizeCorrect; simpl in |- *; auto with float zarith.",
            "VernacExtend",
            "3b15bcbacd3a4b689f0ebf5fa04425644e24229f"
        ],
        [
            "apply FcanonicNnormMin; auto.",
            "VernacExtend",
            "5c303de86cf95faf9544d938aecb8a3b4f03f881"
        ],
        [
            "apply FnormalizeCanonic; auto.",
            "VernacExtend",
            "9a1fe361020914af4b8bf7ab09ee74e43ff90cec"
        ],
        [
            "apply (LeFnumZERO radix); simpl in |- *; auto.",
            "VernacExtend",
            "268d84e0c894e631e9721c86deb5ba254a512159"
        ],
        [
            "apply Zlt_le_weak; apply nNormPos.",
            "VernacExtend",
            "fddd46658e9ed01dee969b288ee026317cbf2249"
        ],
        [
            "intros H'3.",
            "VernacExtend",
            "2e512d3c52562ab0fb19b78be8662c12b7168c72"
        ],
        [
            "case (FcanonicLePos (Fnormalize p) (Float (pPred (vNum b)) x)); try rewrite FnormalizeCorrect; simpl in |- *; auto.",
            "VernacExtend",
            "3c937d646535f81f1c09d824c18d1b4825392ce1"
        ],
        [
            "apply FnormalizeCanonic; auto.",
            "VernacExtend",
            "9a1fe361020914af4b8bf7ab09ee74e43ff90cec"
        ],
        [
            "apply FcanonicPpred; auto.",
            "VernacExtend",
            "a1582f25180040a1778916d11bde3b8ec3282a15"
        ],
        [
            "intros H'4; Contradict H'4; auto with zarith.",
            "VernacExtend",
            "a1ac1d734d04e3a45ac3e11a00666fa44ebfa22b"
        ],
        [
            "intros (H'4, H'5); auto.",
            "VernacExtend",
            "9d7cf449823592413ef27cc09e5ba0adcdf29b57"
        ],
        [
            "apply Rle_trans with (2 := H'1).",
            "VernacExtend",
            "91f206be094174199ce71e0871046fd39fd6aaa5"
        ],
        [
            "apply (LeFnumZERO radix); simpl in |- *; auto with zarith.",
            "VernacExtend",
            "02967e51cd67c6bee99b6001d47883186214e930"
        ],
        [
            "apply Zlt_le_weak; apply nNormPos.",
            "VernacExtend",
            "fddd46658e9ed01dee969b288ee026317cbf2249"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "End Fnormalized_Def.",
            "VernacEndSegment",
            "52ed7c71189238d9c6af3ef19b7970622c92842a"
        ],
        [
            "Hint Resolve FnormalBounded FnormalPrecision: float.",
            "VernacHints",
            "be7dfe956e81d42f5dd5f27883a35516bb3b0cc4"
        ],
        [
            "Hint Resolve FnormalNotZero nNrMMimLevNum firstNormalPosNormal FsubnormFopp FsubnormalLtFirstNormalPos FnormalizeBounded FcanonicFopp FcanonicFabs FnormalizeCanonic: float.",
            "VernacHints",
            "6669167d040f2374f8649152fb3a3921761c6ed3"
        ],
        [
            "Hint Resolve nNrMMimLevNum: arith.",
            "VernacHints",
            "32c2f1a0abdba1e306be697be0c5a57ac624e462"
        ],
        [
            "Hint Resolve FsubnormalFbounded FsubnormalFexp FsubnormalDigit: float.",
            "VernacHints",
            "f1d3c84d35b6866d9d3131d90a77f032cbc7c818"
        ],
        [
            "Hint Resolve FcanonicBound: float.",
            "VernacHints",
            "ee3e1f8890275045c54c37b9f01262d4bbe8994c"
        ]
    ],
    "proofs": [
        {
            "name": "FnormalBounded",
            "line_nb": 10,
            "steps": [
                {
                    "command": [
                        "intros p H; case H; auto.",
                        "VernacExtend",
                        "beee3d3ce325a92b206bd904f833a8af2f4fe350"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "FnormalBound",
            "line_nb": 13,
            "steps": [
                {
                    "command": [
                        "intros p H; case H; auto.",
                        "VernacExtend",
                        "beee3d3ce325a92b206bd904f833a8af2f4fe350"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "FnormalNotZero",
            "line_nb": 17,
            "steps": [
                {
                    "command": [
                        "unfold is_Fzero in |- *; intros p H; red in |- *; intros H1.",
                        "VernacExtend",
                        "9ae8b35cccd78e596f97ce87070312e399cc6c05"
                    ]
                },
                {
                    "command": [
                        "case H; rewrite H1.",
                        "VernacExtend",
                        "d31a2cdb9685fa471e96e79382fb7b838fe9e0ff"
                    ]
                },
                {
                    "command": [
                        "replace (Zabs (radix * 0)) with 0%Z; auto with zarith.",
                        "VernacExtend",
                        "9f629ee68ae42222f07d16362e2f610787e979d6"
                    ]
                },
                {
                    "command": [
                        "rewrite Zmult_comm; simpl in |- *; auto.",
                        "VernacExtend",
                        "2f1750feec80f525545aa651f84bada9829c10ff"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "FnormalFop",
            "line_nb": 23,
            "steps": [
                {
                    "command": [
                        "intros p H; split; auto with float.",
                        "VernacExtend",
                        "43abc0f96ff101ee69f4ed271070398ab632f76d"
                    ]
                },
                {
                    "command": [
                        "replace (Zabs (radix * Fnum (Fopp p))) with (Zabs (radix * Fnum p)); auto with float.",
                        "VernacExtend",
                        "ba77a22fd3ac76853f1f16e65bc6130db53d249d"
                    ]
                },
                {
                    "command": [
                        "case p; simpl in |- *; auto with zarith.",
                        "VernacExtend",
                        "339f72357c21436c0ba53b5e85aa2ace4b8b78db"
                    ]
                },
                {
                    "command": [
                        "intros Fnum1 Fexp1; rewrite <- Zopp_mult_distr_r; apply sym_equal; apply Zabs_Zopp.",
                        "VernacExtend",
                        "ad50706b83856892949a855caa932982ad145ed9"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "FnormalFabs",
            "line_nb": 29,
            "steps": [
                {
                    "command": [
                        "intros p; case p; intros a e H; split; auto with float.",
                        "VernacExtend",
                        "ade28c211311af2c4e187f63052e90c1cf80eb83"
                    ]
                },
                {
                    "command": [
                        "simpl in |- *; case H; intros H1 H2; simpl in |- *; auto.",
                        "VernacExtend",
                        "2e3ac0e42ecd5aa1ed7425aa07eaf3d90c26ec50"
                    ]
                },
                {
                    "command": [
                        "rewrite <- (Zabs_eq radix); auto with zarith.",
                        "VernacExtend",
                        "66fcebcc97af9eb0fe5a4854c40bb3ee6afb1c7b"
                    ]
                },
                {
                    "command": [
                        "rewrite <- Zabs_Zmult.",
                        "VernacExtend",
                        "f7fc6414388fe397677ae7ff4791672389a0bb6d"
                    ]
                },
                {
                    "command": [
                        "rewrite (fun x => Zabs_eq (Zabs x)); auto with float zarith.",
                        "VernacExtend",
                        "5409a505897b572aee6ba72131237a3412741662"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "maxMax1",
            "line_nb": 37,
            "steps": [
                {
                    "command": [
                        "intros p z H H0; unfold FtoRradix in |- *.",
                        "VernacExtend",
                        "37b9507a62a31dfbba781d63d8306371eeac0e95"
                    ]
                },
                {
                    "command": [
                        "rewrite <- (FshiftCorrect _ radixMoreThanOne (Zabs_nat (z - Fexp p)) (Float (pPred (vNum b)) z)).",
                        "VernacExtend",
                        "a91b95155de14345d7dfa60d6b89a899171f8121"
                    ]
                },
                {
                    "command": [
                        "unfold FtoR, Fabs in |- *; simpl in |- *; auto with zarith.",
                        "VernacExtend",
                        "af6dd9753f1bd823814470931f72ea1d5e9a274d"
                    ]
                },
                {
                    "command": [
                        "rewrite Rmult_IZR; rewrite Zpower_nat_Z_powerRZ; auto with zarith.",
                        "VernacExtend",
                        "bd527e12cff757595a45a0529898c81ba36321ce"
                    ]
                },
                {
                    "command": [
                        "repeat rewrite inj_abs; auto with zarith.",
                        "VernacExtend",
                        "725bff9fd8fb46ed128e96cd34cab276b92ceefd"
                    ]
                },
                {
                    "command": [
                        "replace (z - (z - Fexp p))%Z with (Fexp p); [ idtac | ring ].",
                        "VernacExtend",
                        "0c5a5ed832ed6acd7e2bc87af7ea328d3db8db52"
                    ]
                },
                {
                    "command": [
                        "rewrite Rmult_assoc; rewrite <- powerRZ_add; auto with real zarith.",
                        "VernacExtend",
                        "19ddab8e6795561b7a0200abde2d905e689d6c3b"
                    ]
                },
                {
                    "command": [
                        "replace (z - Fexp p + Fexp p)%Z with z; [ idtac | ring ].",
                        "VernacExtend",
                        "d8e473227f90dbbf7a41bbf2729e5de0e165478d"
                    ]
                },
                {
                    "command": [
                        "apply Rle_trans with (pPred (vNum b) * powerRZ radix (Fexp p))%R.",
                        "VernacExtend",
                        "0fbaf6ffcbb8e4a2b8e198a060e4a6c3d20e2d6d"
                    ]
                },
                {
                    "command": [
                        "apply Rle_monotone_exp; auto with zarith; repeat rewrite Rmult_IZR; apply Rle_IZR; unfold pPred in |- *; apply Zle_Zpred; auto with float real zarith.",
                        "VernacExtend",
                        "065b7689685c4487371d9f6629c6fe462c425120"
                    ]
                },
                {
                    "command": [
                        "apply Rmult_le_compat_l; auto with real zarith.",
                        "VernacExtend",
                        "2159120b470d3288ccdd35583593b7da3195abd5"
                    ]
                },
                {
                    "command": [
                        "replace 0%R with (IZR 0); auto with real; apply Rle_IZR; unfold pPred in |- *; apply Zle_Zpred; auto with float zarith.",
                        "VernacExtend",
                        "f8d3b23d0c8e1f5c2eff97c82d54e2bbae1b8e72"
                    ]
                },
                {
                    "command": [
                        "apply Rle_powerRZ; auto with float real zarith.",
                        "VernacExtend",
                        "3b38bd1bcd35a98ff33c53f78ab27884d0078804"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "FnormalBoundAbs",
            "line_nb": 52,
            "steps": [
                {
                    "command": [
                        "intros p H'; unfold FtoRradix, FtoR in |- *; simpl in |- *.",
                        "VernacExtend",
                        "f4a2ffd57a0f37048b5813226b31423dfedd51f1"
                    ]
                },
                {
                    "command": [
                        "pattern (Fexp p) at 2 in |- *; replace (Fexp p) with (Zsucc (Zpred (Fexp p))); [ rewrite powerRZ_Zs; auto with real zarith | unfold Zsucc, Zpred in |- *; ring ].",
                        "VernacExtend",
                        "306dd107f243eea1b9c8e0d5532610760a0c33fb"
                    ]
                },
                {
                    "command": [
                        "repeat rewrite <- Rmult_assoc.",
                        "VernacExtend",
                        "645aebe2c3685a4f868a05a2372130cedecea85e"
                    ]
                },
                {
                    "command": [
                        "apply Rmult_lt_compat_r; auto with real arith.",
                        "VernacExtend",
                        "83ae992c0036ab40d3af8510c7d9b2df90522b46"
                    ]
                },
                {
                    "command": [
                        "rewrite <- Rmult_IZR; apply Rlt_IZR.",
                        "VernacExtend",
                        "9a5e80449efc53e3d79ff54da01cd61a3d698f9f"
                    ]
                },
                {
                    "command": [
                        "unfold pPred in |- *; cut (Zpos (vNum b) <= Zabs (Fnum p) * radix)%Z; auto with zarith.",
                        "VernacExtend",
                        "426f1944680fc3c115a2b9d075333861e4f24c87"
                    ]
                },
                {
                    "command": [
                        "rewrite <- (Zabs_eq radix); auto with float zarith; rewrite <- Zabs_Zmult; rewrite Zmult_comm; auto with float real zarith.",
                        "VernacExtend",
                        "9b698eb9bb29a76ce88e7aea80b7edb3b9dbbd15"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "FsubnormalFbounded",
            "line_nb": 62,
            "steps": [
                {
                    "command": [
                        "intros p H; case H; auto.",
                        "VernacExtend",
                        "beee3d3ce325a92b206bd904f833a8af2f4fe350"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "FsubnormalFexp",
            "line_nb": 65,
            "steps": [
                {
                    "command": [
                        "intros p H; case H; auto.",
                        "VernacExtend",
                        "beee3d3ce325a92b206bd904f833a8af2f4fe350"
                    ]
                },
                {
                    "command": [
                        "intros H1 H2; case H2; auto.",
                        "VernacExtend",
                        "64473c0bac90940aec179baa53933e91e736e033"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "FsubnormalBound",
            "line_nb": 69,
            "steps": [
                {
                    "command": [
                        "intros p H; case H; auto.",
                        "VernacExtend",
                        "beee3d3ce325a92b206bd904f833a8af2f4fe350"
                    ]
                },
                {
                    "command": [
                        "intros H1 H2; case H2; auto.",
                        "VernacExtend",
                        "64473c0bac90940aec179baa53933e91e736e033"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "FsubnormFopp",
            "line_nb": 74,
            "steps": [
                {
                    "command": [
                        "intros p H'; repeat split; simpl in |- *; auto with zarith float.",
                        "VernacExtend",
                        "fdc484c4a3d693828063e3481b09499d44923c15"
                    ]
                },
                {
                    "command": [
                        "rewrite Zabs_Zopp; auto with float.",
                        "VernacExtend",
                        "837a68c36da747e8e5749a5142adc3aeb66acd32"
                    ]
                },
                {
                    "command": [
                        "rewrite <- Zopp_mult_distr_r; rewrite Zabs_Zopp; auto with float.",
                        "VernacExtend",
                        "c77c9c23df98d97f0987b0c8a97ae56859365a11"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "FsubnormFabs",
            "line_nb": 79,
            "steps": [
                {
                    "command": [
                        "intros p; case p; intros a e H; split; auto with float.",
                        "VernacExtend",
                        "ade28c211311af2c4e187f63052e90c1cf80eb83"
                    ]
                },
                {
                    "command": [
                        "simpl in |- *; split; auto with float.",
                        "VernacExtend",
                        "9d33831af10628b36976799fada24e9acd28fc0c"
                    ]
                },
                {
                    "command": [
                        "case H; intros H1 (H2, H3); auto.",
                        "VernacExtend",
                        "5f8293dd4cc233f94674539d752fce79cf9d0ebe"
                    ]
                },
                {
                    "command": [
                        "rewrite <- (Zabs_eq radix); auto with zarith.",
                        "VernacExtend",
                        "66fcebcc97af9eb0fe5a4854c40bb3ee6afb1c7b"
                    ]
                },
                {
                    "command": [
                        "rewrite <- Zabs_Zmult.",
                        "VernacExtend",
                        "f7fc6414388fe397677ae7ff4791672389a0bb6d"
                    ]
                },
                {
                    "command": [
                        "rewrite (fun x => Zabs_eq (Zabs x)); auto with float zarith.",
                        "VernacExtend",
                        "5409a505897b572aee6ba72131237a3412741662"
                    ]
                },
                {
                    "command": [
                        "case H; intros H1 (H2, H3); auto.",
                        "VernacExtend",
                        "5f8293dd4cc233f94674539d752fce79cf9d0ebe"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "FsubnormalUnique",
            "line_nb": 88,
            "steps": [
                {
                    "command": [
                        "intros p q H' H'0 H'1.",
                        "VernacExtend",
                        "05c3e1b098970ef14e38b413a09ed550ca5b4d53"
                    ]
                },
                {
                    "command": [
                        "apply FtoREqInv2 with (radix := radix); auto.",
                        "VernacExtend",
                        "00394c495950a0066b7f63eaec99e92a49dd5ad6"
                    ]
                },
                {
                    "command": [
                        "generalize H' H'0; unfold Fsubnormal in |- *; auto with zarith.",
                        "VernacExtend",
                        "98a89f877f9c7c82fe01aa9e5ae36e1e1b771d37"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "FsubnormalLt",
            "line_nb": 93,
            "steps": [
                {
                    "command": [
                        "intros p q H' H'0 H'1.",
                        "VernacExtend",
                        "05c3e1b098970ef14e38b413a09ed550ca5b4d53"
                    ]
                },
                {
                    "command": [
                        "apply Rlt_Fexp_eq_Zlt with (radix := radix); auto with zarith.",
                        "VernacExtend",
                        "2012c168cda168a8a6d7df57e3070cd563cc67d0"
                    ]
                },
                {
                    "command": [
                        "apply trans_equal with (- dExp b)%Z.",
                        "VernacExtend",
                        "5bde389dc7ce45316692ba12a6091eaf3a162fe8"
                    ]
                },
                {
                    "command": [
                        "case H'; auto.",
                        "VernacExtend",
                        "ebc5b3ac68f03e20b8a194319f607aaad1bf60b4"
                    ]
                },
                {
                    "command": [
                        "intros H1 H2; case H2; auto.",
                        "VernacExtend",
                        "64473c0bac90940aec179baa53933e91e736e033"
                    ]
                },
                {
                    "command": [
                        "apply sym_equal; case H'0; auto.",
                        "VernacExtend",
                        "5075970d5f1e0643a5caa36a94e7218be99d835f"
                    ]
                },
                {
                    "command": [
                        "intros H1 H2; case H2; auto.",
                        "VernacExtend",
                        "64473c0bac90940aec179baa53933e91e736e033"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "LtFsubnormal",
            "line_nb": 102,
            "steps": [
                {
                    "command": [
                        "intros p q H' H'0 H'1.",
                        "VernacExtend",
                        "05c3e1b098970ef14e38b413a09ed550ca5b4d53"
                    ]
                },
                {
                    "command": [
                        "case (Rtotal_order p q); auto; intros Test; case Test; clear Test; intros Test; Contradict H'1.",
                        "VernacExtend",
                        "f70d69ac699a8339a35f41cf508b12684cd7149e"
                    ]
                },
                {
                    "command": [
                        "unfold FtoRradix in Test; rewrite sameExpEq with (2 := Test); auto.",
                        "VernacExtend",
                        "fe8920f0f42ab3d70a6a2fdd46186eb2dc2cff85"
                    ]
                },
                {
                    "command": [
                        "auto with zarith.",
                        "VernacExtend",
                        "23f42fd3236dcece4a40b3a666dce57fea69a9c0"
                    ]
                },
                {
                    "command": [
                        "apply trans_equal with (- dExp b)%Z.",
                        "VernacExtend",
                        "5bde389dc7ce45316692ba12a6091eaf3a162fe8"
                    ]
                },
                {
                    "command": [
                        "case H'; auto.",
                        "VernacExtend",
                        "ebc5b3ac68f03e20b8a194319f607aaad1bf60b4"
                    ]
                },
                {
                    "command": [
                        "intros H1 H2; case H2; auto.",
                        "VernacExtend",
                        "64473c0bac90940aec179baa53933e91e736e033"
                    ]
                },
                {
                    "command": [
                        "apply sym_equal; case H'0.",
                        "VernacExtend",
                        "3f59998d4f8854a721a76b64854df70c329e14c4"
                    ]
                },
                {
                    "command": [
                        "intros H1 H2; case H2; auto.",
                        "VernacExtend",
                        "64473c0bac90940aec179baa53933e91e736e033"
                    ]
                },
                {
                    "command": [
                        "apply Zle_not_lt.",
                        "VernacExtend",
                        "a635904a634172283c98f3792d1f8261c5710c4f"
                    ]
                },
                {
                    "command": [
                        "apply Zlt_le_weak.",
                        "VernacExtend",
                        "77c804797cd604de1af1fd78f914f426e7c6ce85"
                    ]
                },
                {
                    "command": [
                        "apply FsubnormalLt; auto.",
                        "VernacExtend",
                        "32b47806e7be9cc936922129f63a6130e4fe4770"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "FcanonicBound",
            "line_nb": 117,
            "steps": [
                {
                    "command": [
                        "intros p H; case H; auto with float.",
                        "VernacExtend",
                        "e6297a7baa612c3b13842f4c1cd7477392116134"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "pUCanonic_absolu",
            "line_nb": 121,
            "steps": [
                {
                    "command": [
                        "auto with float.",
                        "VernacExtend",
                        "d9d0d0fc0f3224fd637c11457ed78521c3984b30"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "FcanonicFopp",
            "line_nb": 124,
            "steps": [
                {
                    "command": [
                        "intros p H'; case H'; intros H'1.",
                        "VernacExtend",
                        "c5be1f46d0c0edcb28150c7ba6a17c90b5605873"
                    ]
                },
                {
                    "command": [
                        "left; apply FnormalFop; auto.",
                        "VernacExtend",
                        "d99a412eab7f9786a39d78ec295359add4c02767"
                    ]
                },
                {
                    "command": [
                        "right; apply FsubnormFopp; auto.",
                        "VernacExtend",
                        "15496b39e4db12c84366729d2d96eeac9464eaf7"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "FcanonicFabs",
            "line_nb": 129,
            "steps": [
                {
                    "command": [
                        "intros p H'; case H'; clear H'; auto with float.",
                        "VernacExtend",
                        "a8b894118ca9dab482777475a8d44fde4e5c15ca"
                    ]
                },
                {
                    "command": [
                        "intros H; left; auto with float.",
                        "VernacExtend",
                        "397545681d5f18a3e9894b882c8e25f4c548eb07"
                    ]
                },
                {
                    "command": [
                        "apply FnormalFabs; auto.",
                        "VernacExtend",
                        "5fd89e9a92fab68f190530620ede2025283e6d5a"
                    ]
                },
                {
                    "command": [
                        "intros H; right; auto with float.",
                        "VernacExtend",
                        "9b9e785aad6479e3c2d58728b1734f23d6e53333"
                    ]
                },
                {
                    "command": [
                        "apply FsubnormFabs; auto.",
                        "VernacExtend",
                        "11c697ab66211383129d429cadffc0fac905f394"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "NormalNotSubNormal",
            "line_nb": 136,
            "steps": [
                {
                    "command": [
                        "intros p; red in |- *; intros H; elim H; intros H0 H1; clear H.",
                        "VernacExtend",
                        "0c303e272afa7e7c54adcc3deb9d2012a49afb7b"
                    ]
                },
                {
                    "command": [
                        "absurd (Zabs (radix * Fnum p) < Zpos (vNum b))%Z; auto with float zarith.",
                        "VernacExtend",
                        "569a26a170674e7f26be30e7093daf286cc24979"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "MaxFloat",
            "line_nb": 140,
            "steps": [
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "replace (Rabs x) with (FtoR radix (Fabs x)).",
                        "VernacExtend",
                        "cc82b1a758c75fc9164ca4869d6a0127b9c46247"
                    ]
                },
                {
                    "command": [
                        "unfold FtoRradix in |- *.",
                        "VernacExtend",
                        "ca5b46f9af7312531a190b63534dffaa3cbf2633"
                    ]
                },
                {
                    "command": [
                        "apply maxMax with (b := b); auto with *.",
                        "VernacExtend",
                        "d4d31a0b6c85235f3c7262b63d60b42f1e3effdd"
                    ]
                },
                {
                    "command": [
                        "unfold FtoRradix in |- *.",
                        "VernacExtend",
                        "ca5b46f9af7312531a190b63534dffaa3cbf2633"
                    ]
                },
                {
                    "command": [
                        "apply Fabs_correct; auto with *.",
                        "VernacExtend",
                        "a4745083e8d7734b3241e8cc62295987e6ce3020"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "FboundNext",
            "line_nb": 151,
            "steps": [
                {
                    "command": [
                        "intros p H'.",
                        "VernacExtend",
                        "bb6abbd0a5bb134f5276d7928176425ceae09e54"
                    ]
                },
                {
                    "command": [
                        "case (Zle_lt_or_eq (Zsucc (Fnum p)) (Zpos (vNum b))); auto with float.",
                        "VernacExtend",
                        "a8623560796904651dec71cf8b45129cb7246f33"
                    ]
                },
                {
                    "command": [
                        "case (Zle_or_lt 0 (Fnum p)); intros H1.",
                        "VernacExtend",
                        "c3bde0c000f9ac97ea5d7deaf66c7dbb3ad325e1"
                    ]
                },
                {
                    "command": [
                        "rewrite <- (Zabs_eq (Fnum p)); auto with float zarith.",
                        "VernacExtend",
                        "44bb51f8e4c90a3db4d4358a79a1ffe8393879e1"
                    ]
                },
                {
                    "command": [
                        "apply Zle_trans with 0%Z; auto with zarith.",
                        "VernacExtend",
                        "7bc5435926f0aada5353ec65cce7fa187ea0bde2"
                    ]
                },
                {
                    "command": [
                        "intros H'0; exists (Float (Zsucc (Fnum p)) (Fexp p)); split; auto with float.",
                        "VernacExtend",
                        "60d45ab652c1a780a5181c5301335d5437df6c9b"
                    ]
                },
                {
                    "command": [
                        "repeat split; simpl in |- *; auto with float.",
                        "VernacExtend",
                        "3e093824de91ab2af8d090987eafb93df05226c2"
                    ]
                },
                {
                    "command": [
                        "case (Zle_or_lt 0 (Fnum p)); intros H1; auto with zarith.",
                        "VernacExtend",
                        "eece105a5803557330b7a62fccfe3bfcf469e58e"
                    ]
                },
                {
                    "command": [
                        "rewrite Zabs_eq; auto with zarith.",
                        "VernacExtend",
                        "e3b6647506c6d43441146989691d7c27f1722b7e"
                    ]
                },
                {
                    "command": [
                        "apply Zlt_trans with (Zabs (Fnum p)); auto with float zarith.",
                        "VernacExtend",
                        "a144eee6f22388244797976d1cea10cd86136679"
                    ]
                },
                {
                    "command": [
                        "repeat rewrite Zabs_eq_opp; auto with zarith.",
                        "VernacExtend",
                        "10a25b2896598a806019edb32340d86af1662493"
                    ]
                },
                {
                    "command": [
                        "intros H'0; exists (Float (Zpower_nat radix (pred precision)) (Zsucc (Fexp p))); split; auto.",
                        "VernacExtend",
                        "2c05771da0f0a6840d14e059cc9d23c0a14af88a"
                    ]
                },
                {
                    "command": [
                        "repeat split; simpl in |- *; auto with zarith arith float.",
                        "VernacExtend",
                        "6cc9e26e07246b79948ef1ec35514848d69bf212"
                    ]
                },
                {
                    "command": [
                        "rewrite pGivesBound.",
                        "VernacExtend",
                        "a0663579a8c1e026e4139f9de2213b856a6f5f6f"
                    ]
                },
                {
                    "command": [
                        "rewrite Zabs_eq; auto with zarith.",
                        "VernacExtend",
                        "e3b6647506c6d43441146989691d7c27f1722b7e"
                    ]
                },
                {
                    "command": [
                        "rewrite H'0; rewrite pGivesBound.",
                        "VernacExtend",
                        "20cbe0ad82c18f62e1aa676f7ee9921fa33e8302"
                    ]
                },
                {
                    "command": [
                        "pattern precision at 2 in |- *; replace precision with (1 + pred precision).",
                        "VernacExtend",
                        "233ca99a7562802cf63b14751aea01a931348495"
                    ]
                },
                {
                    "command": [
                        "rewrite Zpower_nat_is_exp.",
                        "VernacExtend",
                        "230c5aec41f86b77ed64d26b6f0b8c9d1503c4ab"
                    ]
                },
                {
                    "command": [
                        "rewrite Zpower_nat_1.",
                        "VernacExtend",
                        "2846c4a882fe56cb611d6ed0efd6e39493343d43"
                    ]
                },
                {
                    "command": [
                        "unfold FtoRradix, FtoR in |- *; simpl in |- *.",
                        "VernacExtend",
                        "85a3da1582165d92ceb7faef707de88822bccf1a"
                    ]
                },
                {
                    "command": [
                        "rewrite powerRZ_Zs; auto with real zarith.",
                        "VernacExtend",
                        "1931a3978b6974020abfa1402ab4426f76878eb8"
                    ]
                },
                {
                    "command": [
                        "rewrite Rmult_IZR; ring.",
                        "VernacExtend",
                        "073e54d706e2874a4ce10f4efdd7723717ac5438"
                    ]
                },
                {
                    "command": [
                        "generalize precisionNotZero; case precision; simpl in |- *; auto with arith.",
                        "VernacExtend",
                        "14b174deb3ad558d88cfc7712044f1e68087a0cf"
                    ]
                },
                {
                    "command": [
                        "intros H'1; case H'1; auto.",
                        "VernacExtend",
                        "c62d8d45ec005d5b574d43d4534021a38ccb51ae"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "digitPredVNumiSPrecision",
            "line_nb": 177,
            "steps": [
                {
                    "command": [
                        "apply digitInv; auto.",
                        "VernacExtend",
                        "754fb84a55920efb36657d7ef450cc5ecd243eec"
                    ]
                },
                {
                    "command": [
                        "rewrite pGivesBound.",
                        "VernacExtend",
                        "a0663579a8c1e026e4139f9de2213b856a6f5f6f"
                    ]
                },
                {
                    "command": [
                        "rewrite Zabs_eq; auto with zarith.",
                        "VernacExtend",
                        "e3b6647506c6d43441146989691d7c27f1722b7e"
                    ]
                },
                {
                    "command": [
                        "rewrite Zabs_eq; auto with zarith.",
                        "VernacExtend",
                        "e3b6647506c6d43441146989691d7c27f1722b7e"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "digitVNumiSPrecision",
            "line_nb": 183,
            "steps": [
                {
                    "command": [
                        "apply digitInv; auto.",
                        "VernacExtend",
                        "754fb84a55920efb36657d7ef450cc5ecd243eec"
                    ]
                },
                {
                    "command": [
                        "rewrite pGivesBound.",
                        "VernacExtend",
                        "a0663579a8c1e026e4139f9de2213b856a6f5f6f"
                    ]
                },
                {
                    "command": [
                        "rewrite Zabs_eq; auto with zarith.",
                        "VernacExtend",
                        "e3b6647506c6d43441146989691d7c27f1722b7e"
                    ]
                },
                {
                    "command": [
                        "rewrite Zabs_eq; auto with zarith.",
                        "VernacExtend",
                        "e3b6647506c6d43441146989691d7c27f1722b7e"
                    ]
                },
                {
                    "command": [
                        "rewrite pGivesBound; auto with zarith.",
                        "VernacExtend",
                        "8b172077e277513b23c08b205d58790b41b42704"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "vNumPrecision",
            "line_nb": 190,
            "steps": [
                {
                    "command": [
                        "intros n H'.",
                        "VernacExtend",
                        "c5e15d288e71c7c4067088ce1e3eb273ec98abc8"
                    ]
                },
                {
                    "command": [
                        "rewrite <- (Zabs_eq (Zpos (vNum b))); auto with zarith.",
                        "VernacExtend",
                        "fcf64559b4c7ad5e3765fd30484e70da9b7dd9b2"
                    ]
                },
                {
                    "command": [
                        "apply digit_anti_monotone_lt with (n := radix); auto.",
                        "VernacExtend",
                        "369fd4e2d74aef40bea8207226fa963b6c0ce604"
                    ]
                },
                {
                    "command": [
                        "rewrite digitVNumiSPrecision; auto with arith.",
                        "VernacExtend",
                        "f3406d0aee2d4b87d5947f3853cd2cb066ca6b44"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "pGivesDigit",
            "line_nb": 196,
            "steps": [
                {
                    "command": [
                        "intros p H; unfold Fdigit in |- *.",
                        "VernacExtend",
                        "506153d1eb8fed86533b25fa9470e3599266de2b"
                    ]
                },
                {
                    "command": [
                        "rewrite <- digitPredVNumiSPrecision.",
                        "VernacExtend",
                        "f1821583e3583092791145d0d8251e596de4a78a"
                    ]
                },
                {
                    "command": [
                        "apply digit_monotone; auto with zarith.",
                        "VernacExtend",
                        "6599b462324275ec7ca62450f3d5632e71dfa19e"
                    ]
                },
                {
                    "command": [
                        "rewrite (fun x => Zabs_eq (Zpred x)); auto with float zarith.",
                        "VernacExtend",
                        "079b63ddabab313a276d818bc911db4a00170afc"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "digitGivesBoundedNum",
            "line_nb": 202,
            "steps": [
                {
                    "command": [
                        "intros p H; apply vNumPrecision; auto.",
                        "VernacExtend",
                        "70a38174d4dfef0833cfcd5e86b53f6195c8768b"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "FboundedOne",
            "line_nb": 205,
            "steps": [
                {
                    "command": [
                        "intros z H'; repeat (split; simpl in |- *; auto with zarith).",
                        "VernacExtend",
                        "7a40bc071cfb8127a9c8387fd178f4d3e204e424"
                    ]
                },
                {
                    "command": [
                        "rewrite pGivesBound; auto.",
                        "VernacExtend",
                        "4b3408306312206446529e6ecd487e3cd02c6503"
                    ]
                },
                {
                    "command": [
                        "apply Zlt_le_trans with (Zpower_nat radix 1); auto with zarith.",
                        "VernacExtend",
                        "3b94d9b65a771e2a942d66ef82e21b6a77da530a"
                    ]
                },
                {
                    "command": [
                        "rewrite Zpower_nat_1; auto with zarith.",
                        "VernacExtend",
                        "e9320a7ea3adf68ff67766aff884f3fea30c1c11"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "FboundedMboundPos",
            "line_nb": 211,
            "steps": [
                {
                    "command": [
                        "intros z m H' H'0 H'1; case (Zle_lt_or_eq _ _ H'0); intros H'2.",
                        "VernacExtend",
                        "4a368f63a2874453e26ecd981108cdebe88e584a"
                    ]
                },
                {
                    "command": [
                        "exists (Float m z); split; auto with zarith.",
                        "VernacExtend",
                        "cda87f05a5b862c2715021ad1a447b84e6aaf886"
                    ]
                },
                {
                    "command": [
                        "repeat split; simpl in |- *; auto with zarith.",
                        "VernacExtend",
                        "3887b5c0ace93a706fbfe1f9aea736a5c30668c7"
                    ]
                },
                {
                    "command": [
                        "rewrite Zabs_eq; auto; rewrite pGivesBound; auto.",
                        "VernacExtend",
                        "c8a85b7c1e17bdb9440e3fd434f9394a1c392213"
                    ]
                },
                {
                    "command": [
                        "case (FboundNext (Float (Zpred (Zpos (vNum b))) z)); auto with float.",
                        "VernacExtend",
                        "2eaa126f852404561d4d42bd268ae60a01247ddb"
                    ]
                },
                {
                    "command": [
                        "intros f' (H1, H2); exists f'; split; auto.",
                        "VernacExtend",
                        "4fbd3aa1d61cc76a91a0be0d1d7095516e9c324f"
                    ]
                },
                {
                    "command": [
                        "rewrite H2; rewrite pGivesBound.",
                        "VernacExtend",
                        "5e0baefaba8f65ed39264dc74c7e705dcc4059d2"
                    ]
                },
                {
                    "command": [
                        "unfold FtoRradix, FtoR in |- *; simpl in |- *; auto.",
                        "VernacExtend",
                        "0a0ab92f652c540feedfb1f1261ea912fdc7adb7"
                    ]
                },
                {
                    "command": [
                        "rewrite <- Zsucc_pred; rewrite <- H'2; auto; ring.",
                        "VernacExtend",
                        "2319425465550cf349b9a95d1ad2478292dea64a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "FboundedMbound",
            "line_nb": 222,
            "steps": [
                {
                    "command": [
                        "intros z m H H0.",
                        "VernacExtend",
                        "51e4b57ccb3ffd286193e0b61996be92685b839b"
                    ]
                },
                {
                    "command": [
                        "case (Zle_or_lt 0 m); intros H1.",
                        "VernacExtend",
                        "ace3f5f3f30adbd0f80ab6c1640e0779e43a779a"
                    ]
                },
                {
                    "command": [
                        "case (FboundedMboundPos z (Zabs m)); auto; try rewrite Zabs_eq; auto.",
                        "VernacExtend",
                        "caf11ee7fe527075ed0384b14b083e52efaa5a3d"
                    ]
                },
                {
                    "command": [
                        "intros f (H2, H3); exists f; split; auto.",
                        "VernacExtend",
                        "ecdec748504964240b061142eb207a663d2a6a02"
                    ]
                },
                {
                    "command": [
                        "case (FboundedMboundPos z (Zabs m)); auto; try rewrite Zabs_eq_opp; auto with zarith.",
                        "VernacExtend",
                        "d8308482c13c157301778d9d80c041cc4b029601"
                    ]
                },
                {
                    "command": [
                        "intros f (H2, H3); exists (Fopp f); split; auto with float.",
                        "VernacExtend",
                        "646653e572bd2659a3de62d1e5d12e34dc43b9c4"
                    ]
                },
                {
                    "command": [
                        "rewrite (Fopp_correct radix); auto with arith; fold FtoRradix in |- *; rewrite H3.",
                        "VernacExtend",
                        "183e79d7fccf42cf77a3786619eee4b55512a0fa"
                    ]
                },
                {
                    "command": [
                        "rewrite Ropp_Ropp_IZR; ring.",
                        "VernacExtend",
                        "37a2fbe5c08e56f038b290aed05e884cb5b9d90a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "FnormalUnique",
            "line_nb": 250,
            "steps": [
                {
                    "command": [
                        "intros p q H' H'0 H'1.",
                        "VernacExtend",
                        "05c3e1b098970ef14e38b413a09ed550ca5b4d53"
                    ]
                },
                {
                    "command": [
                        "apply (FdigitEq radix); auto.",
                        "VernacExtend",
                        "d36d347bd6558884078889842772125af5770653"
                    ]
                },
                {
                    "command": [
                        "apply FnormalNotZero; auto.",
                        "VernacExtend",
                        "f86d53d915602035655da3d7a59ee7395ee22bd0"
                    ]
                },
                {
                    "command": [
                        "apply trans_equal with (y := precision); auto with float.",
                        "VernacExtend",
                        "20efa448764010a5c4ae61c67fa9cf24b7f56137"
                    ]
                },
                {
                    "command": [
                        "apply sym_equal; auto with float.",
                        "VernacExtend",
                        "3a0ae848442044cdb83bf770d81c666cfc52bb61"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "FnormalLtNeg",
            "line_nb": 292,
            "steps": [
                {
                    "command": [
                        "intros p q H' H'0 H'1 H'2.",
                        "VernacExtend",
                        "72bc33bd695361090defa76b144ed28b290b1f49"
                    ]
                },
                {
                    "command": [
                        "cut ((Fexp (Fopp q) < Fexp (Fopp p))%Z \\/ Fexp (Fopp q) = Fexp (Fopp p) /\\ (Fnum (Fopp q) < Fnum (Fopp p))%Z).",
                        "VernacExtend",
                        "f8b880bd89f64be207a1aa948cf3bce2177953ed"
                    ]
                },
                {
                    "command": [
                        "simpl in |- *.",
                        "VernacExtend",
                        "1b93169f4cf876d207c1fab22a2347202ab48d85"
                    ]
                },
                {
                    "command": [
                        "intros H'3; elim H'3; clear H'3; intros H'3; [ idtac | elim H'3; clear H'3; intros H'3 H'4 ]; auto; right; split; auto with zarith.",
                        "VernacExtend",
                        "9d6ce55c106383a7d0c2fbfe23fc8315938582f9"
                    ]
                },
                {
                    "command": [
                        "apply FnormalLtPos; try apply FnormalFop; auto; unfold FtoRradix in |- *; repeat rewrite Fopp_correct; replace 0%R with (-0)%R; auto with real.",
                        "VernacExtend",
                        "51a1c7d970e2d3162783bca3aa8cd2138746f5f6"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "nNormPos",
            "line_nb": 300,
            "steps": [
                {
                    "command": [
                        "unfold nNormMin in |- *; auto with zarith.",
                        "VernacExtend",
                        "13c94bc3a7bcdd7b9290d9f851cfb48eb65760ca"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "digitnNormMin",
            "line_nb": 303,
            "steps": [
                {
                    "command": [
                        "unfold nNormMin, Fdigit in |- *; simpl in |- *; apply digitInv; auto with zarith arith.",
                        "VernacExtend",
                        "a7c285587f83529152ab6749eb72b1cf1cdf22e2"
                    ]
                },
                {
                    "command": [
                        "rewrite Zabs_eq; auto with zarith.",
                        "VernacExtend",
                        "e3b6647506c6d43441146989691d7c27f1722b7e"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "nNrMMimLevNum",
            "line_nb": 307,
            "steps": [
                {
                    "command": [
                        "rewrite pGivesBound.",
                        "VernacExtend",
                        "a0663579a8c1e026e4139f9de2213b856a6f5f6f"
                    ]
                },
                {
                    "command": [
                        "unfold nNormMin in |- *; simpl in |- *; auto with zarith arith.",
                        "VernacExtend",
                        "a2ea85b6c762b644f3058e80bf37bc894393f21a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "firstNormalPosNormal",
            "line_nb": 313,
            "steps": [
                {
                    "command": [
                        "repeat split; unfold firstNormalPos in |- *; simpl in |- *; auto with zarith.",
                        "VernacExtend",
                        "8313c8a242085a11c8cfac68215e0224b15db93a"
                    ]
                },
                {
                    "command": [
                        "rewrite pGivesBound.",
                        "VernacExtend",
                        "a0663579a8c1e026e4139f9de2213b856a6f5f6f"
                    ]
                },
                {
                    "command": [
                        "rewrite Zabs_eq; auto with zarith.",
                        "VernacExtend",
                        "e3b6647506c6d43441146989691d7c27f1722b7e"
                    ]
                },
                {
                    "command": [
                        "unfold nNormMin in |- *; simpl in |- *; auto with zarith arith.",
                        "VernacExtend",
                        "a2ea85b6c762b644f3058e80bf37bc894393f21a"
                    ]
                },
                {
                    "command": [
                        "apply Zlt_le_weak; auto with zarith.",
                        "VernacExtend",
                        "e52b5fc9e4efbb3acee7e5921936e24987a2d234"
                    ]
                },
                {
                    "command": [
                        "apply nNormPos.",
                        "VernacExtend",
                        "5d17e7850f4c3423cf1c6bc503ff559294592548"
                    ]
                },
                {
                    "command": [
                        "rewrite pGivesBound.",
                        "VernacExtend",
                        "a0663579a8c1e026e4139f9de2213b856a6f5f6f"
                    ]
                },
                {
                    "command": [
                        "replace precision with (pred precision + 1).",
                        "VernacExtend",
                        "506d5ae2e090510ff286244c6ded5c669ae83629"
                    ]
                },
                {
                    "command": [
                        "rewrite Zpower_nat_is_exp; auto with zarith.",
                        "VernacExtend",
                        "e1aa9c40a009f4bbc12128519c4c0308520c9937"
                    ]
                },
                {
                    "command": [
                        "rewrite Zpower_nat_1; auto with zarith.",
                        "VernacExtend",
                        "e9320a7ea3adf68ff67766aff884f3fea30c1c11"
                    ]
                },
                {
                    "command": [
                        "rewrite (fun x => Zmult_comm x radix); unfold nNormMin in |- *; auto with zarith.",
                        "VernacExtend",
                        "4829e5735e186af1b66938e44f8d9b9a632551ea"
                    ]
                },
                {
                    "command": [
                        "unfold nNormMin in |- *; auto with zarith.",
                        "VernacExtend",
                        "13c94bc3a7bcdd7b9290d9f851cfb48eb65760ca"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "pNormal_absolu_min",
            "line_nb": 327,
            "steps": [
                {
                    "command": [
                        "intros p H; apply Zmult_le_reg_r with (p := radix); auto with zarith.",
                        "VernacExtend",
                        "b79e9bf194adbeb0a72a426b5c33428826374ee4"
                    ]
                },
                {
                    "command": [
                        "unfold nNormMin in |- *.",
                        "VernacExtend",
                        "c0047b55b25ea634d65f1589b8001612eb0d9f04"
                    ]
                },
                {
                    "command": [
                        "pattern radix at 2 in |- *; rewrite <- (Zpower_nat_1 radix).",
                        "VernacExtend",
                        "d118b93559bef2196f6348439edfc7a6f7ec3596"
                    ]
                },
                {
                    "command": [
                        "rewrite <- Zpower_nat_is_exp; auto with zarith.",
                        "VernacExtend",
                        "09773027588765ff2c59620a3e2edb6151eb2f72"
                    ]
                },
                {
                    "command": [
                        "replace (pred precision + 1) with precision.",
                        "VernacExtend",
                        "03efdb80b59372277056f09bcff12e546563e62d"
                    ]
                },
                {
                    "command": [
                        "rewrite <- pGivesBound; auto with float.",
                        "VernacExtend",
                        "aab0acd207adc0b61fe2d138022e47ac1c66af9b"
                    ]
                },
                {
                    "command": [
                        "rewrite <- (Zabs_eq radix); auto with zarith.",
                        "VernacExtend",
                        "66fcebcc97af9eb0fe5a4854c40bb3ee6afb1c7b"
                    ]
                },
                {
                    "command": [
                        "rewrite <- Zabs_Zmult; rewrite Zmult_comm; auto with float.",
                        "VernacExtend",
                        "b414f8c71fdd507745c929cf702c324cf1f8e083"
                    ]
                },
                {
                    "command": [
                        "generalize precisionNotZero; case precision; simpl in |- *; try (intros tmp; Contradict tmp; auto; fail); intros; rewrite plus_comm; simpl in |- *; auto.",
                        "VernacExtend",
                        "26434b66cf32e2f039f31a9b5f8eae76b366d2c1"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "maxMaxBis",
            "line_nb": 338,
            "steps": [
                {
                    "command": [
                        "intros p z H' H'0; apply Rlt_le_trans with (FtoR radix (Float (Zpos (vNum b)) (Zpred z))).",
                        "VernacExtend",
                        "5790e589fab0fe883a576dcf8f4d5f64ad22e516"
                    ]
                },
                {
                    "command": [
                        "unfold FtoRradix in |- *; apply maxMax; auto with zarith; unfold Zpred in |- *; auto with zarith.",
                        "VernacExtend",
                        "c11b95e0075b8ab0742905b7e04802fd9f71b114"
                    ]
                },
                {
                    "command": [
                        "unfold FtoRradix, FtoR, nNormMin in |- *; simpl in |- *.",
                        "VernacExtend",
                        "5f3f1f9b743a1e24d19af80d1a761c29a8224192"
                    ]
                },
                {
                    "command": [
                        "pattern z at 2 in |- *; replace z with (Zsucc (Zpred z)); [ rewrite powerRZ_Zs; auto with real zarith | unfold Zsucc, Zpred in |- *; ring ].",
                        "VernacExtend",
                        "0ad96c73e242c998c2c3fd4926a332e8261f3545"
                    ]
                },
                {
                    "command": [
                        "rewrite <- Rmult_assoc.",
                        "VernacExtend",
                        "34da3c50cde53c179a4908b1329a459071245c05"
                    ]
                },
                {
                    "command": [
                        "apply Rmult_le_compat_r; auto with real arith.",
                        "VernacExtend",
                        "118f6d965446d8abadb72c8e021be24c227d51f0"
                    ]
                },
                {
                    "command": [
                        "pattern radix at 2 in |- *; rewrite <- (Zpower_nat_1 radix).",
                        "VernacExtend",
                        "d118b93559bef2196f6348439edfc7a6f7ec3596"
                    ]
                },
                {
                    "command": [
                        "rewrite <- Rmult_IZR.",
                        "VernacExtend",
                        "77ff9e5d0697bdc5f92b38cf0c531b2d80b04bc3"
                    ]
                },
                {
                    "command": [
                        "rewrite <- Zpower_nat_is_exp.",
                        "VernacExtend",
                        "423fb7d633dcb59552e41198fb746fd733daae1e"
                    ]
                },
                {
                    "command": [
                        "replace (pred precision + 1) with precision.",
                        "VernacExtend",
                        "03efdb80b59372277056f09bcff12e546563e62d"
                    ]
                },
                {
                    "command": [
                        "replace (INR (nat_of_P (vNum b))) with (IZR (Zpos (vNum b))).",
                        "VernacExtend",
                        "2ea2b19e3d820517c0a75ea29d381fb862fc3e8d"
                    ]
                },
                {
                    "command": [
                        "rewrite pGivesBound; auto with real.",
                        "VernacExtend",
                        "71bb7ce4b53ff7751e7630fceded75eeb3e5cfa8"
                    ]
                },
                {
                    "command": [
                        "simpl; unfold IZR; rewrite <- INR_IPR; auto.",
                        "VernacExtend",
                        "0c06028d180fb5c58b28d8a27a8fed9b65a1d1c0"
                    ]
                },
                {
                    "command": [
                        "generalize precisionNotZero; case precision; simpl in |- *; auto with arith.",
                        "VernacExtend",
                        "14b174deb3ad558d88cfc7712044f1e68087a0cf"
                    ]
                },
                {
                    "command": [
                        "intros H'1; Contradict H'1; auto.",
                        "VernacExtend",
                        "8db85f3016bcb692223b807804acc9e52d044004"
                    ]
                },
                {
                    "command": [
                        "intros; rewrite plus_comm; simpl in |- *; auto.",
                        "VernacExtend",
                        "b5f6a30bb3074889e4f0881627e1dd66e2ba9e0c"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "FnormalLtFirstNormalPos",
            "line_nb": 356,
            "steps": [
                {
                    "command": [
                        "intros p H' H'0.",
                        "VernacExtend",
                        "652f91006d10c9030c57f29a3311eeb49eea5491"
                    ]
                },
                {
                    "command": [
                        "case (Rle_or_lt firstNormalPos p); intros Lt0; auto with real.",
                        "VernacExtend",
                        "9dc8faa98b61ac5340d3d037051aa56a213265a0"
                    ]
                },
                {
                    "command": [
                        "case (FnormalLtPos p firstNormalPos); auto.",
                        "VernacExtend",
                        "7e684ef8dc6b78c79eda2c58dff1ddfa4818ad28"
                    ]
                },
                {
                    "command": [
                        "apply firstNormalPosNormal.",
                        "VernacExtend",
                        "dee660a785c6994ec939e60a8870789297e5348b"
                    ]
                },
                {
                    "command": [
                        "intros H'1; Contradict H'1; unfold firstNormalPos in |- *; simpl in |- *.",
                        "VernacExtend",
                        "9fa1b9a34cfaa511b0c259a81f4d0839484ecb0a"
                    ]
                },
                {
                    "command": [
                        "apply Zle_not_lt; auto with float.",
                        "VernacExtend",
                        "701472c83a31c28c313e4f5a1f0e7ef49cf3db6f"
                    ]
                },
                {
                    "command": [
                        "intros H'1; elim H'1; intros H'2 H'3; Contradict H'3.",
                        "VernacExtend",
                        "834265e17bd2971532c212e0aa64a4f67159a81b"
                    ]
                },
                {
                    "command": [
                        "unfold firstNormalPos in |- *; simpl in |- *.",
                        "VernacExtend",
                        "3a0197fd4d345d0592084562a5c4472923c03e85"
                    ]
                },
                {
                    "command": [
                        "apply Zle_not_lt.",
                        "VernacExtend",
                        "a635904a634172283c98f3792d1f8261c5710c4f"
                    ]
                },
                {
                    "command": [
                        "rewrite <- (Zabs_eq (Fnum p)); auto with float zarith.",
                        "VernacExtend",
                        "44bb51f8e4c90a3db4d4358a79a1ffe8393879e1"
                    ]
                },
                {
                    "command": [
                        "apply pNormal_absolu_min; auto.",
                        "VernacExtend",
                        "b58e9d89eea95533ae3954786f1e48fd049da3e6"
                    ]
                },
                {
                    "command": [
                        "apply LeR0Fnum with (radix := radix); auto with arith.",
                        "VernacExtend",
                        "c00f8de016e57af38dcf3dbeaaac139310e23af8"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "FnormalLtFirstNormalNeg",
            "line_nb": 370,
            "steps": [
                {
                    "command": [
                        "intros p H' H'0.",
                        "VernacExtend",
                        "652f91006d10c9030c57f29a3311eeb49eea5491"
                    ]
                },
                {
                    "command": [
                        "rewrite <- (Ropp_involutive p); unfold FtoRradix in |- *; repeat rewrite Fopp_correct.",
                        "VernacExtend",
                        "a9fcf69566d2d9ab199dc51428e361751c81476b"
                    ]
                },
                {
                    "command": [
                        "apply Ropp_le_contravar; rewrite <- Fopp_correct.",
                        "VernacExtend",
                        "4bc9a55c8e49f4b31dcef3f46d3a816fc5ed2992"
                    ]
                },
                {
                    "command": [
                        "apply FnormalLtFirstNormalPos.",
                        "VernacExtend",
                        "8b2440088ead8e38d8b0306e8f54dd34711002cb"
                    ]
                },
                {
                    "command": [
                        "apply FnormalFop; auto.",
                        "VernacExtend",
                        "8835e5dafb624b17e746322f3ee8f7816bf106f5"
                    ]
                },
                {
                    "command": [
                        "replace 0%R with (-0)%R; unfold FtoRradix in |- *; try rewrite Fopp_correct; auto with real.",
                        "VernacExtend",
                        "7811b635c901eb33a57f504c8eadeb9bd09a59eb"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "FsubnormalDigit",
            "line_nb": 378,
            "steps": [
                {
                    "command": [
                        "intros p H; unfold Fdigit in |- *.",
                        "VernacExtend",
                        "506153d1eb8fed86533b25fa9470e3599266de2b"
                    ]
                },
                {
                    "command": [
                        "case (Z_eq_dec (Fnum p) 0); intros Z1.",
                        "VernacExtend",
                        "5a053a09d57cfe6a43f4aed0b3581b0f31e0fa1c"
                    ]
                },
                {
                    "command": [
                        "rewrite Z1; simpl in |- *; auto with arith.",
                        "VernacExtend",
                        "d34823aec3c6daf0b7e73ff436372542ab63e466"
                    ]
                },
                {
                    "command": [
                        "apply lt_S_n; apply le_lt_n_Sm.",
                        "VernacExtend",
                        "476c15d4fc321e872afa7b8d35a2b5470c414849"
                    ]
                },
                {
                    "command": [
                        "rewrite <- digitPredVNumiSPrecision.",
                        "VernacExtend",
                        "f1821583e3583092791145d0d8251e596de4a78a"
                    ]
                },
                {
                    "command": [
                        "replace (S (digit radix (Fnum p))) with (digit radix (Fnum p) + 1).",
                        "VernacExtend",
                        "0878100d9c8a5ab0b2d4e11591e1c09026ff924f"
                    ]
                },
                {
                    "command": [
                        "rewrite <- digitAdd; auto with zarith.",
                        "VernacExtend",
                        "4890376399403e4b5cc3f790585506d45c62a432"
                    ]
                },
                {
                    "command": [
                        "apply digit_monotone; auto with float.",
                        "VernacExtend",
                        "d425c169cb8252ead5dda09443d3ddee616d206f"
                    ]
                },
                {
                    "command": [
                        "rewrite (fun x => Zabs_eq (Zpred x)); auto with float zarith.",
                        "VernacExtend",
                        "079b63ddabab313a276d818bc911db4a00170afc"
                    ]
                },
                {
                    "command": [
                        "rewrite Zmult_comm; rewrite Zpower_nat_1; auto with float zarith.",
                        "VernacExtend",
                        "d483ac156a56086319c904a0077da2bb26c7d878"
                    ]
                },
                {
                    "command": [
                        "rewrite plus_comm; simpl in |- *; auto.",
                        "VernacExtend",
                        "a510e8b3ccb9a5207bf615eb71ff2e3ed8078042"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "pSubnormal_absolu_min",
            "line_nb": 392,
            "steps": [
                {
                    "command": [
                        "intros p H'; apply Zlt_mult_simpl_l with (c := radix); auto with zarith.",
                        "VernacExtend",
                        "a4b44060be7684952a779796e5b4381d816cb755"
                    ]
                },
                {
                    "command": [
                        "replace (radix * Zabs (Fnum p))%Z with (Zabs (radix * Fnum p)).",
                        "VernacExtend",
                        "ffdf724a7f92af2f3786bfdc6c4981928d308406"
                    ]
                },
                {
                    "command": [
                        "replace (radix * nNormMin)%Z with (Zpos (vNum b)); auto with float.",
                        "VernacExtend",
                        "5d7e69981f84b731c09adbda81b0da05f08c5fb6"
                    ]
                },
                {
                    "command": [
                        "rewrite pGivesBound.",
                        "VernacExtend",
                        "a0663579a8c1e026e4139f9de2213b856a6f5f6f"
                    ]
                },
                {
                    "command": [
                        "replace precision with (1 + pred precision).",
                        "VernacExtend",
                        "9a07f22d4cf558184ea7635eb0f7e338bdcfc399"
                    ]
                },
                {
                    "command": [
                        "rewrite Zpower_nat_is_exp; auto with zarith; rewrite Zpower_nat_1; auto.",
                        "VernacExtend",
                        "1d227db8374e27d2db233d5caa2ea4043b64eb1d"
                    ]
                },
                {
                    "command": [
                        "generalize precisionNotZero; case precision; simpl in |- *; auto.",
                        "VernacExtend",
                        "e18f7c8cc7de7eccbcc608c049f5ad53d8212571"
                    ]
                },
                {
                    "command": [
                        "intros H; Contradict H; auto.",
                        "VernacExtend",
                        "b8f102a35f01386ffc33a24a648e5b39abe8306a"
                    ]
                },
                {
                    "command": [
                        "rewrite Zabs_Zmult; rewrite (Zabs_eq radix); auto with zarith.",
                        "VernacExtend",
                        "bd9102e07975df0be269f68b59f449eea0021a86"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "FsubnormalnormalLtPos",
            "line_nb": 413,
            "steps": [
                {
                    "command": [
                        "intros p q H' H'0 H'1 H'2.",
                        "VernacExtend",
                        "72bc33bd695361090defa76b144ed28b290b1f49"
                    ]
                },
                {
                    "command": [
                        "apply Rlt_le_trans with (r2 := FtoRradix firstNormalPos).",
                        "VernacExtend",
                        "bce5b809e4a68854297e334b1df2e6333499a8b1"
                    ]
                },
                {
                    "command": [
                        "apply FsubnormalLtFirstNormalPos; auto.",
                        "VernacExtend",
                        "83b0423e813df80cbde64633c7afd50446d879e0"
                    ]
                },
                {
                    "command": [
                        "apply FnormalLtFirstNormalPos; auto.",
                        "VernacExtend",
                        "6d830bb7e3fe03bde201ffdabda477c0e4bfb058"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "FsubnormalnormalLtNeg",
            "line_nb": 419,
            "steps": [
                {
                    "command": [
                        "intros p q H' H'0 H'1 H'2.",
                        "VernacExtend",
                        "72bc33bd695361090defa76b144ed28b290b1f49"
                    ]
                },
                {
                    "command": [
                        "rewrite <- (Ropp_involutive p); rewrite <- (Ropp_involutive q).",
                        "VernacExtend",
                        "cb16e14f143d19239e901dd33ad03217092bf625"
                    ]
                },
                {
                    "command": [
                        "apply Ropp_gt_lt_contravar; red in |- *.",
                        "VernacExtend",
                        "cc71f51db1a6c86d03b8b84a16434c55aa16d439"
                    ]
                },
                {
                    "command": [
                        "unfold FtoRradix in |- *; repeat rewrite <- Fopp_correct.",
                        "VernacExtend",
                        "60bdf11d344a93c0e6ffb5b60ca4f1ae748399fa"
                    ]
                },
                {
                    "command": [
                        "apply FsubnormalnormalLtPos; auto.",
                        "VernacExtend",
                        "648020a658f2233a06f8fc9d4fb7c6a31b3fc768"
                    ]
                },
                {
                    "command": [
                        "apply FsubnormFopp; auto.",
                        "VernacExtend",
                        "b51b3b69b2dc165300d10bc0de82f0f42e439082"
                    ]
                },
                {
                    "command": [
                        "apply FnormalFop; auto.",
                        "VernacExtend",
                        "8835e5dafb624b17e746322f3ee8f7816bf106f5"
                    ]
                },
                {
                    "command": [
                        "unfold FtoRradix in |- *; rewrite Fopp_correct; replace 0%R with (-0)%R; auto with real.",
                        "VernacExtend",
                        "d18f833dbd29c5201239b1f60de27d66d1e6d839"
                    ]
                },
                {
                    "command": [
                        "unfold FtoRradix in |- *; rewrite Fopp_correct; replace 0%R with (-0)%R; auto with real.",
                        "VernacExtend",
                        "d18f833dbd29c5201239b1f60de27d66d1e6d839"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "FnormalizeCorrect",
            "line_nb": 431,
            "steps": [
                {
                    "command": [
                        "intros p; unfold Fnormalize in |- *.",
                        "VernacExtend",
                        "af737c6295b51236845c262eefe013de5a10afe5"
                    ]
                },
                {
                    "command": [
                        "case (Z_zerop (Fnum p)).",
                        "VernacExtend",
                        "f6e8ca693440c0ff765d63c33301e629b0706b38"
                    ]
                },
                {
                    "command": [
                        "case p; intros Fnum1 Fexp1 H'; unfold FtoRradix, FtoR in |- *; rewrite H'; simpl in |- *; auto with real.",
                        "VernacExtend",
                        "528b8bf396f5cbe7cb214de7b1a5a716d358bf80"
                    ]
                },
                {
                    "command": [
                        "apply trans_eq with 0%R; auto with real.",
                        "VernacExtend",
                        "0b0c5cd99ac1dc1440005ddfa1787ad022333180"
                    ]
                },
                {
                    "command": [
                        "intros H'; unfold FtoRradix in |- *; apply FshiftCorrect; auto.",
                        "VernacExtend",
                        "c92f619a072609f5409af2d6acfc74964bb56d63"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "Fnormalize_Fopp",
            "line_nb": 438,
            "steps": [
                {
                    "command": [
                        "intros p; case p; unfold Fnormalize in |- *; simpl in |- *.",
                        "VernacExtend",
                        "4c0614e742a9420dd6654d07d28665a4a0db382f"
                    ]
                },
                {
                    "command": [
                        "intros Fnum1 Fexp1; case (Z_zerop Fnum1); intros H'.",
                        "VernacExtend",
                        "1abc30b7ab407c0a17f1989d867df2ebdb7acd48"
                    ]
                },
                {
                    "command": [
                        "rewrite H'; simpl in |- *; auto.",
                        "VernacExtend",
                        "4802beb6bcd634905be0061678af4df0163e0ae0"
                    ]
                },
                {
                    "command": [
                        "case (Z_zerop (- Fnum1)); intros H'0; simpl in |- *; auto.",
                        "VernacExtend",
                        "206b568c7a7ff93415e590ed02f3e8404f302420"
                    ]
                },
                {
                    "command": [
                        "case H'; replace Fnum1 with (- - Fnum1)%Z; auto with zarith.",
                        "VernacExtend",
                        "264d5ea68334374aeb5b293817e5e98feeaef817"
                    ]
                },
                {
                    "command": [
                        "unfold Fopp, Fshift, Fdigit in |- *; simpl in |- *.",
                        "VernacExtend",
                        "2c07dea2d2d6f36d8da1f630d9ab9b7ac337e952"
                    ]
                },
                {
                    "command": [
                        "replace (digit radix (- Fnum1)) with (digit radix Fnum1).",
                        "VernacExtend",
                        "ebfbd97a222175e344715bb0e94600e97acbdb89"
                    ]
                },
                {
                    "command": [
                        "apply floatEq; simpl in |- *; auto with zarith.",
                        "VernacExtend",
                        "7cb0f0dca04ed4670fc25041923a7e43d1e8b18e"
                    ]
                },
                {
                    "command": [
                        "ring.",
                        "VernacExtend",
                        "baadd9fc4c175005af409bb466fcea9fab25b4e6"
                    ]
                },
                {
                    "command": [
                        "case Fnum1; simpl in |- *; auto.",
                        "VernacExtend",
                        "95951bdc3df325d3202baf58f2a10c62e4cec550"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "FnormalizeBounded",
            "line_nb": 450,
            "steps": [
                {
                    "command": [
                        "intros p H'; red in |- *; split.",
                        "VernacExtend",
                        "2e78714152b03e7c7edfb0a8ec5b517cb6f61dda"
                    ]
                },
                {
                    "command": [
                        "unfold Fnormalize in |- *; case (Z_zerop (Fnum p)); auto.",
                        "VernacExtend",
                        "37c780a241e360a3c7d50165e4d09ffbe28f9bfa"
                    ]
                },
                {
                    "command": [
                        "intros H'0; simpl in |- *; auto with zarith.",
                        "VernacExtend",
                        "eb28f5d595e2eeeaca4c77cc577ea8caf24f202e"
                    ]
                },
                {
                    "command": [
                        "intros H'0.",
                        "VernacExtend",
                        "e8ea833695b450eab455d302901072f04fd3096d"
                    ]
                },
                {
                    "command": [
                        "apply digitGivesBoundedNum; auto.",
                        "VernacExtend",
                        "ae19c53331c332e3219aa45175407c68aa1b2499"
                    ]
                },
                {
                    "command": [
                        "rewrite FshiftFdigit; auto.",
                        "VernacExtend",
                        "b1982d61367ccb9d616e57c301f0a349ee674cdc"
                    ]
                },
                {
                    "command": [
                        "apply le_trans with (m := Fdigit radix p + (precision - Fdigit radix p)); auto with arith.",
                        "VernacExtend",
                        "6f12985459c7971296ebe4fc0b60f6aad5582e8f"
                    ]
                },
                {
                    "command": [
                        "rewrite <- le_plus_minus; auto.",
                        "VernacExtend",
                        "fc4f2e87cbcf652674fcb17f749e642b73f98c3a"
                    ]
                },
                {
                    "command": [
                        "apply pGivesDigit; auto.",
                        "VernacExtend",
                        "1c39f2467670c0166a6c18cdf35c1718df16cb1e"
                    ]
                },
                {
                    "command": [
                        "unfold Fnormalize in |- *; case (Z_zerop (Fnum p)); auto.",
                        "VernacExtend",
                        "37c780a241e360a3c7d50165e4d09ffbe28f9bfa"
                    ]
                },
                {
                    "command": [
                        "simpl in |- *; auto with zarith.",
                        "VernacExtend",
                        "61d3cdc6299cf8abf87703c074ca4503f0f27a12"
                    ]
                },
                {
                    "command": [
                        "generalize H'; case p; unfold Fbounded, Fnormal, Fdigit in |- *; simpl in |- *.",
                        "VernacExtend",
                        "67088980dd12624d2c80ed28c232e961d064d9e9"
                    ]
                },
                {
                    "command": [
                        "intros Fnum1 Fexp1 H'0 H'1.",
                        "VernacExtend",
                        "52b6a28c5725ac57ebd8f388c273ffe84f6e1751"
                    ]
                },
                {
                    "command": [
                        "apply Zle_trans with (m := (Fexp1 - Zabs_nat (dExp b + Fexp1))%Z).",
                        "VernacExtend",
                        "da828dea34302097f70b8fa9f2b144c77066e9dc"
                    ]
                },
                {
                    "command": [
                        "rewrite inj_abs; auto with zarith.",
                        "VernacExtend",
                        "d832d70d6f4177fa3d020760f1ccab18c59abdc1"
                    ]
                },
                {
                    "command": [
                        "unfold Zminus in |- *; apply Zplus_le_compat_l; auto.",
                        "VernacExtend",
                        "e2b6d6daa588524967376cb32f41a2dbed06850e"
                    ]
                },
                {
                    "command": [
                        "apply Zle_Zopp; auto.",
                        "VernacExtend",
                        "6473061a1c9978f07e616efc9f2faa1ba76e9c28"
                    ]
                },
                {
                    "command": [
                        "apply inj_le; auto with arith.",
                        "VernacExtend",
                        "2b46e939b249039a6e0ba1af5b3252a5b30b9c71"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "FnormalizeCanonic",
            "line_nb": 470,
            "steps": [
                {
                    "command": [
                        "intros p H'.",
                        "VernacExtend",
                        "bb6abbd0a5bb134f5276d7928176425ceae09e54"
                    ]
                },
                {
                    "command": [
                        "generalize (FnormalizeBounded p H').",
                        "VernacExtend",
                        "535012385ecb654656c1faa125125737319b6455"
                    ]
                },
                {
                    "command": [
                        "unfold Fnormalize in |- *; case (Z_zerop (Fnum p)); auto.",
                        "VernacExtend",
                        "37c780a241e360a3c7d50165e4d09ffbe28f9bfa"
                    ]
                },
                {
                    "command": [
                        "intros H'0; right; repeat split; simpl in |- *; auto with zarith.",
                        "VernacExtend",
                        "c94822acf816634029aa619c5f73351dcb0fda4b"
                    ]
                },
                {
                    "command": [
                        "rewrite Zmult_comm; simpl in |- *; red in |- *; simpl in |- *; auto.",
                        "VernacExtend",
                        "eb8130612e73254008966466a282c91fa0567b98"
                    ]
                },
                {
                    "command": [
                        "intros H'1.",
                        "VernacExtend",
                        "27d12cfd315031f2731cee2bf5ecf81dd7f6b369"
                    ]
                },
                {
                    "command": [
                        "case (min_or (precision - Fdigit radix p) (Zabs_nat (dExp b + Fexp p))); intros Min; case Min; clear Min; intros MinR MinL.",
                        "VernacExtend",
                        "e717b52f7464f0c4b0dffcddbb6e1630290f8b55"
                    ]
                },
                {
                    "command": [
                        "intros H'2; left; split; auto.",
                        "VernacExtend",
                        "00134478f7ec30131f52fdd8d96d16c146aa18c7"
                    ]
                },
                {
                    "command": [
                        "rewrite MinR; unfold Fshift in |- *; simpl in |- *.",
                        "VernacExtend",
                        "2fdf1db12737e13b81d57ff058f21739668d428c"
                    ]
                },
                {
                    "command": [
                        "apply Zle_trans with (Zabs (radix * (Zpower_nat radix (pred (Fdigit radix p)) * Zpower_nat radix (precision - Fdigit radix p)))).",
                        "VernacExtend",
                        "85a871e8b8d24092545a8b21454de6c2ee4061df"
                    ]
                },
                {
                    "command": [
                        "pattern radix at 1 in |- *; rewrite <- (Zpower_nat_1 radix).",
                        "VernacExtend",
                        "f14a7d10a321512328b4f4b8a40b9642d9d4416c"
                    ]
                },
                {
                    "command": [
                        "repeat rewrite <- Zpower_nat_is_exp; auto with zarith.",
                        "VernacExtend",
                        "7f78a3a3b35edeb65a56b978916ac916c983b6e4"
                    ]
                },
                {
                    "command": [
                        "replace (1 + (pred (Fdigit radix p) + (precision - Fdigit radix p))) with precision; auto.",
                        "VernacExtend",
                        "79dc0174ba636ea3c33072fc7693fa5e1b5a64e0"
                    ]
                },
                {
                    "command": [
                        "rewrite pGivesBound; auto with real.",
                        "VernacExtend",
                        "71bb7ce4b53ff7751e7630fceded75eeb3e5cfa8"
                    ]
                },
                {
                    "command": [
                        "rewrite Zabs_eq; auto with zarith.",
                        "VernacExtend",
                        "e3b6647506c6d43441146989691d7c27f1722b7e"
                    ]
                },
                {
                    "command": [
                        "cut (Fdigit radix p <= precision); auto with float.",
                        "VernacExtend",
                        "e9cb13aba5474dad85ef4d11844b97658e6804c0"
                    ]
                },
                {
                    "command": [
                        "unfold Fdigit in |- *.",
                        "VernacExtend",
                        "2c1b7b2f3f520d25bcc18c2627ab51e602f9face"
                    ]
                },
                {
                    "command": [
                        "generalize (digitNotZero _ radixMoreThanOne _ H'1); case (digit radix (Fnum p)); simpl in |- *; auto.",
                        "VernacExtend",
                        "a4f0ac8645a95572e491d3c38eb98d1221cd9618"
                    ]
                },
                {
                    "command": [
                        "intros tmp; Contradict tmp; auto with arith.",
                        "VernacExtend",
                        "33f2290d8230916d25222ab1ffe276edcc8fd51b"
                    ]
                },
                {
                    "command": [
                        "intros n H H0; change (precision = S n + (precision - S n)) in |- *.",
                        "VernacExtend",
                        "9b1917739aa7d23cc20e9318d78181b428da1cf5"
                    ]
                },
                {
                    "command": [
                        "apply le_plus_minus; auto.",
                        "VernacExtend",
                        "7d49dfe9def5f28d67afefdb4d8de9c60fd78f7b"
                    ]
                },
                {
                    "command": [
                        "apply pGivesDigit; auto.",
                        "VernacExtend",
                        "1c39f2467670c0166a6c18cdf35c1718df16cb1e"
                    ]
                },
                {
                    "command": [
                        "repeat rewrite Zabs_Zmult.",
                        "VernacExtend",
                        "4b7da0b8275268c7f3ee6a3b7ea19434419af5d5"
                    ]
                },
                {
                    "command": [
                        "apply Zle_Zmult_comp_l.",
                        "VernacExtend",
                        "f1e1192aa0fdc0751e809a9191b2e3e0712da035"
                    ]
                },
                {
                    "command": [
                        "apply Zle_ZERO_Zabs.",
                        "VernacExtend",
                        "0efd15ac13c0ddfa277f0601112084fecf1121e7"
                    ]
                },
                {
                    "command": [
                        "apply Zle_Zmult_comp_r.",
                        "VernacExtend",
                        "dcbb6bf59a888ba62f04477a711698a33767b390"
                    ]
                },
                {
                    "command": [
                        "apply Zle_ZERO_Zabs.",
                        "VernacExtend",
                        "0efd15ac13c0ddfa277f0601112084fecf1121e7"
                    ]
                },
                {
                    "command": [
                        "rewrite (fun x => Zabs_eq (Zpower_nat radix x)); auto with zarith.",
                        "VernacExtend",
                        "7e071cac3a7e901b238c070ddda3bfcfa7cd1d07"
                    ]
                },
                {
                    "command": [
                        "unfold Fdigit in |- *; apply digitLess; auto.",
                        "VernacExtend",
                        "461eb37baeb2f677567fe73a986f6f7d5544a473"
                    ]
                },
                {
                    "command": [
                        "intros H'0; right; split; auto; split.",
                        "VernacExtend",
                        "5a6dd9b28c013030955be8163259c2a9d80ed4d0"
                    ]
                },
                {
                    "command": [
                        "rewrite MinR; clear MinR; auto.",
                        "VernacExtend",
                        "5a4039597dd4e0b8430a7b7914994af748c66c30"
                    ]
                },
                {
                    "command": [
                        "cut (- dExp b <= Fexp p)%Z; [ idtac | auto with float ].",
                        "VernacExtend",
                        "536cd1d147edad3721c26a43ae123453aa5a1448"
                    ]
                },
                {
                    "command": [
                        "case p; simpl in |- *.",
                        "VernacExtend",
                        "4b6ec10ea1e2a069d780a7ff8b2a24f25b841032"
                    ]
                },
                {
                    "command": [
                        "intros Fnum1 Fexp1 H'2; rewrite inj_abs; auto with zarith.",
                        "VernacExtend",
                        "675aa9bb3ef345572918a40fdaddbd462b619c22"
                    ]
                },
                {
                    "command": [
                        "rewrite MinR.",
                        "VernacExtend",
                        "808af0fc55763624e15c27964cb46ddba7d45307"
                    ]
                },
                {
                    "command": [
                        "rewrite <- (fun x => Zabs_eq (Zpos x)).",
                        "VernacExtend",
                        "3a4fcdd4ae721d9ab59320e928b6ad0d54defd73"
                    ]
                },
                {
                    "command": [
                        "unfold Fshift in |- *; simpl in |- *.",
                        "VernacExtend",
                        "bc2226e4b5a4ef5bbaea414d285c81f30a1eb932"
                    ]
                },
                {
                    "command": [
                        "apply Zlt_le_trans with (Zabs (radix * (Zpower_nat radix (Fdigit radix p) * Zpower_nat radix (Zabs_nat (dExp b + Fexp p))))).",
                        "VernacExtend",
                        "ca6caad8ca86771700829c6bed7fb481b01c116a"
                    ]
                },
                {
                    "command": [
                        "repeat rewrite Zabs_Zmult.",
                        "VernacExtend",
                        "4b7da0b8275268c7f3ee6a3b7ea19434419af5d5"
                    ]
                },
                {
                    "command": [
                        "apply Zmult_gt_0_lt_compat_l.",
                        "VernacExtend",
                        "b88b0195b1aae341f6f24d160309da9055aa932e"
                    ]
                },
                {
                    "command": [
                        "apply Zlt_gt; rewrite Zabs_eq; auto with zarith.",
                        "VernacExtend",
                        "021d5fe3aa05ac1519cf15dd524225f17257ca4b"
                    ]
                },
                {
                    "command": [
                        "apply Zmult_gt_0_lt_compat_r.",
                        "VernacExtend",
                        "e36de59427a630bdd03b43f743c37a134012ade6"
                    ]
                },
                {
                    "command": [
                        "apply Zlt_gt; rewrite Zabs_eq; auto with zarith.",
                        "VernacExtend",
                        "021d5fe3aa05ac1519cf15dd524225f17257ca4b"
                    ]
                },
                {
                    "command": [
                        "rewrite (fun x => Zabs_eq (Zpower_nat radix x)); auto with zarith.",
                        "VernacExtend",
                        "7e071cac3a7e901b238c070ddda3bfcfa7cd1d07"
                    ]
                },
                {
                    "command": [
                        "unfold Fdigit in |- *; apply digitMore; auto.",
                        "VernacExtend",
                        "2d3fe2efe0d7089de930f8801034dbb2866d931b"
                    ]
                },
                {
                    "command": [
                        "pattern radix at 1 in |- *; rewrite <- (Zpower_nat_1 radix).",
                        "VernacExtend",
                        "f14a7d10a321512328b4f4b8a40b9642d9d4416c"
                    ]
                },
                {
                    "command": [
                        "repeat rewrite <- Zpower_nat_is_exp; auto with zarith.",
                        "VernacExtend",
                        "7f78a3a3b35edeb65a56b978916ac916c983b6e4"
                    ]
                },
                {
                    "command": [
                        "apply Zle_trans with (Zabs (Zpower_nat radix precision)).",
                        "VernacExtend",
                        "89302aaa42d42dc48f08a70f665ff1e91209b4a9"
                    ]
                },
                {
                    "command": [
                        "repeat rewrite Zabs_eq; auto with zarith.",
                        "VernacExtend",
                        "ce6af9c9e2dbbf5e96aba4104d03a58482acdd03"
                    ]
                },
                {
                    "command": [
                        "rewrite pGivesBound.",
                        "VernacExtend",
                        "a0663579a8c1e026e4139f9de2213b856a6f5f6f"
                    ]
                },
                {
                    "command": [
                        "rewrite (fun x => Zabs_eq (Zpower_nat radix x)); auto with zarith.",
                        "VernacExtend",
                        "7e071cac3a7e901b238c070ddda3bfcfa7cd1d07"
                    ]
                },
                {
                    "command": [
                        "red in |- *; simpl in |- *; red in |- *; intros; discriminate.",
                        "VernacExtend",
                        "512de8373f18db00ac829b3d4ce633b262e1baeb"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "NormalAndSubNormalNotEq",
            "line_nb": 524,
            "steps": [
                {
                    "command": [
                        "intros p q H' H'0; red in |- *; intros H'1.",
                        "VernacExtend",
                        "417bb075884b20bde9eb4339b6f124e79565f55a"
                    ]
                },
                {
                    "command": [
                        "case (Rtotal_order 0 p); intros H'2.",
                        "VernacExtend",
                        "ba367627b3f3fe32bc8ff67925b0b5e8f7001e46"
                    ]
                },
                {
                    "command": [
                        "absurd (q < p)%R.",
                        "VernacExtend",
                        "029ecc44369441317277ec1bbd09db5fb7d2cbf3"
                    ]
                },
                {
                    "command": [
                        "rewrite <- H'1; auto with real.",
                        "VernacExtend",
                        "62e72e0f8f6c0fd16992b57737ee86889402658f"
                    ]
                },
                {
                    "command": [
                        "apply FsubnormalnormalLtPos; auto with real.",
                        "VernacExtend",
                        "c1fb4089c6097da5fcc003ed01de850e42d32f85"
                    ]
                },
                {
                    "command": [
                        "rewrite <- H'1; auto with real.",
                        "VernacExtend",
                        "62e72e0f8f6c0fd16992b57737ee86889402658f"
                    ]
                },
                {
                    "command": [
                        "absurd (p < q)%R.",
                        "VernacExtend",
                        "1c63eceeafc041f63dcf5c95e2eb83c9186b6baa"
                    ]
                },
                {
                    "command": [
                        "rewrite <- H'1; auto with real.",
                        "VernacExtend",
                        "62e72e0f8f6c0fd16992b57737ee86889402658f"
                    ]
                },
                {
                    "command": [
                        "apply FsubnormalnormalLtNeg; auto with real.",
                        "VernacExtend",
                        "841bafce000003eb1cceb639718ada9b207e7caf"
                    ]
                },
                {
                    "command": [
                        "rewrite <- H'1; auto with real.",
                        "VernacExtend",
                        "62e72e0f8f6c0fd16992b57737ee86889402658f"
                    ]
                },
                {
                    "command": [
                        "elim H'2; intros H'3; try rewrite <- H'3; auto with real.",
                        "VernacExtend",
                        "ef451473639a94678543dd01d80c26de94c3c6d1"
                    ]
                },
                {
                    "command": [
                        "elim H'2; intros H'3; try rewrite <- H'3; auto with real.",
                        "VernacExtend",
                        "ef451473639a94678543dd01d80c26de94c3c6d1"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "FcanonicUnique",
            "line_nb": 538,
            "steps": [
                {
                    "command": [
                        "intros p q H' H'0 H'1; case H'; case H'0; intros H'2 H'3.",
                        "VernacExtend",
                        "5d7cab1d0bab690b21dca63090a8bef8158f7885"
                    ]
                },
                {
                    "command": [
                        "apply FnormalUnique; auto.",
                        "VernacExtend",
                        "87c98260a951be352a4feb842e8fcf644fae23b3"
                    ]
                },
                {
                    "command": [
                        "Contradict H'1; apply NormalAndSubNormalNotEq; auto.",
                        "VernacExtend",
                        "92138eafaaad2b3263215c2e626aed85da7a2df3"
                    ]
                },
                {
                    "command": [
                        "absurd (q = p :>R); auto; apply NormalAndSubNormalNotEq; auto.",
                        "VernacExtend",
                        "c71e8cb3f7d7bd0ef4d8c493e8c592af707a1b8c"
                    ]
                },
                {
                    "command": [
                        "apply FsubnormalUnique; auto.",
                        "VernacExtend",
                        "378f288f48bd08d2d86422cc454652676e7fa15d"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "FcanonicLeastExp",
            "line_nb": 545,
            "steps": [
                {
                    "command": [
                        "intros x y H H0 H1.",
                        "VernacExtend",
                        "2b8b226895e77c4671d00b26c91a648cb5bf7e1e"
                    ]
                },
                {
                    "command": [
                        "cut (Fcanonic (Fnormalize x)); [ intros | apply FnormalizeCanonic; auto ].",
                        "VernacExtend",
                        "18676e53cafb303067a3ddd6b7ead0b959482826"
                    ]
                },
                {
                    "command": [
                        "replace y with (Fnormalize x); [ simpl in |- * | apply FcanonicUnique; auto with real ].",
                        "VernacExtend",
                        "17ca18a7598d9cddecb4e7681fb53e7b31556a07"
                    ]
                },
                {
                    "command": [
                        "unfold Fnormalize in |- *.",
                        "VernacExtend",
                        "a4da8b79800b4dc258df91fc27842922fedc9635"
                    ]
                },
                {
                    "command": [
                        "case (Z_zerop (Fnum x)); simpl in |- *; intros Z1; auto with float.",
                        "VernacExtend",
                        "9d56ab815b9badf24e8a3511360bf6f1035c3db9"
                    ]
                },
                {
                    "command": [
                        "apply Zplus_le_reg_l with (- Fexp x)%Z.",
                        "VernacExtend",
                        "547440626dd73101e323b4c4d82d9fd07dc85e45"
                    ]
                },
                {
                    "command": [
                        "replace (- Fexp x + Fexp x)%Z with (- (0))%Z; try ring.",
                        "VernacExtend",
                        "516b92fdd6380694dbabc99a4400f544e49b8f64"
                    ]
                },
                {
                    "command": [
                        "replace (- Fexp x + (Fexp x - min (precision - Fdigit radix x) (Zabs_nat (dExp b + Fexp x))))%Z with (- min (precision - Fdigit radix x) (Zabs_nat (dExp b + Fexp x)))%Z; try ring.",
                        "VernacExtend",
                        "fcdb28dfba756e337e65b3bf4eb58176d2862f40"
                    ]
                },
                {
                    "command": [
                        "apply Zle_Zopp; auto with arith zarith.",
                        "VernacExtend",
                        "58fbe3161e6e2cf8f17484fda945bb6156076b0a"
                    ]
                },
                {
                    "command": [
                        "rewrite <- H.",
                        "VernacExtend",
                        "95b84807b4afb2ef79b7cc04a1c91a4e3a502e47"
                    ]
                },
                {
                    "command": [
                        "apply FnormalizeCorrect.",
                        "VernacExtend",
                        "8324bccda0365905ffe25f01d1a9940694616ef0"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "FcanonicLtPos",
            "line_nb": 558,
            "steps": [
                {
                    "command": [
                        "intros p q H' H'0 H'1 H'2; case H'; case H'0.",
                        "VernacExtend",
                        "651df08173d070487a5faf8336c6eac76cf49237"
                    ]
                },
                {
                    "command": [
                        "intros H'3 H'4; apply FnormalLtPos; auto.",
                        "VernacExtend",
                        "2f512aa726a4c4ba176e13b89957662b19ea4665"
                    ]
                },
                {
                    "command": [
                        "intros H'3 H'4; absurd (p < q)%R; auto.",
                        "VernacExtend",
                        "f0a1e2d0f3b4dfb7a4990ed5f9b9a5bf161c7f65"
                    ]
                },
                {
                    "command": [
                        "apply Rlt_asym.",
                        "VernacExtend",
                        "d3605aa75ca4799993a9a1b64d6a2ac717520cb1"
                    ]
                },
                {
                    "command": [
                        "apply FsubnormalnormalLtPos; auto.",
                        "VernacExtend",
                        "648020a658f2233a06f8fc9d4fb7c6a31b3fc768"
                    ]
                },
                {
                    "command": [
                        "apply Rle_trans with (r2 := FtoRradix p); auto with real.",
                        "VernacExtend",
                        "d835fe7a174af70418d70161f883348277b36d95"
                    ]
                },
                {
                    "command": [
                        "intros H'3 H'4; case (Z_eq_dec (Fexp q) (- dExp b)); intros H'5.",
                        "VernacExtend",
                        "d8c3e16df7c8994bf995801cb1775db7500cf40f"
                    ]
                },
                {
                    "command": [
                        "right; split.",
                        "VernacExtend",
                        "7f40e6faa2e8d6f2ee2a39b745aa28054e5d87de"
                    ]
                },
                {
                    "command": [
                        "rewrite H'5; case H'4; intros H1 H2; case H2; auto.",
                        "VernacExtend",
                        "3dd5d35bfbff92f2fa9bbf8c00befc745f689e17"
                    ]
                },
                {
                    "command": [
                        "apply Rlt_Fexp_eq_Zlt with (radix := radix); auto with zarith.",
                        "VernacExtend",
                        "2012c168cda168a8a6d7df57e3070cd563cc67d0"
                    ]
                },
                {
                    "command": [
                        "rewrite H'5; case H'4; intros H1 H2; case H2; auto.",
                        "VernacExtend",
                        "3dd5d35bfbff92f2fa9bbf8c00befc745f689e17"
                    ]
                },
                {
                    "command": [
                        "left.",
                        "VernacExtend",
                        "06dad9fc5698018f3f1213205145fec906c612b1"
                    ]
                },
                {
                    "command": [
                        "replace (Fexp p) with (- dExp b)%Z; [ idtac | apply sym_equal; auto with float ].",
                        "VernacExtend",
                        "493d92ccbcd2bf8660ef4b03db7102ae4eae273a"
                    ]
                },
                {
                    "command": [
                        "case (Zle_lt_or_eq (- dExp b) (Fexp q)); auto with float zarith.",
                        "VernacExtend",
                        "4700ead5d211c2a92a424ab23ce4a748da56aadc"
                    ]
                },
                {
                    "command": [
                        "intros H'3 H'4; right; split.",
                        "VernacExtend",
                        "79a7778e86bd85bb76ca89a65cc581dec716a9eb"
                    ]
                },
                {
                    "command": [
                        "apply trans_equal with (- dExp b)%Z; auto with float.",
                        "VernacExtend",
                        "ebec6327a331e46988f8b187c1aee2acb73f43af"
                    ]
                },
                {
                    "command": [
                        "apply sym_equal; auto with float.",
                        "VernacExtend",
                        "3a0ae848442044cdb83bf770d81c666cfc52bb61"
                    ]
                },
                {
                    "command": [
                        "apply FsubnormalLt; auto.",
                        "VernacExtend",
                        "32b47806e7be9cc936922129f63a6130e4fe4770"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "FcanonicLePos",
            "line_nb": 578,
            "steps": [
                {
                    "command": [
                        "intros p q H' H'0 H'1 H'2.",
                        "VernacExtend",
                        "72bc33bd695361090defa76b144ed28b290b1f49"
                    ]
                },
                {
                    "command": [
                        "case H'2; intros H'3.",
                        "VernacExtend",
                        "7ada6407accd9453dd392c459a8eecff9d70b119"
                    ]
                },
                {
                    "command": [
                        "case FcanonicLtPos with (p := p) (q := q); auto with zarith arith.",
                        "VernacExtend",
                        "d607af17863089ae857c7a23d571c9324cb24be4"
                    ]
                },
                {
                    "command": [
                        "rewrite FcanonicUnique with (p := p) (q := q); auto with zarith arith.",
                        "VernacExtend",
                        "a70d040f3ca4e62638aab87b672a4aa22f3c2d24"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "Fcanonic_Rle_Zle",
            "line_nb": 584,
            "steps": [
                {
                    "command": [
                        "intros x y H H0 H1.",
                        "VernacExtend",
                        "2b8b226895e77c4671d00b26c91a648cb5bf7e1e"
                    ]
                },
                {
                    "command": [
                        "cut (forall z : float, Fexp z = Fexp (Fabs z) :>Z); [ intros E | intros; unfold Fabs in |- *; simpl in |- *; auto with zarith ].",
                        "VernacExtend",
                        "13bd515f73322b7d445f9d9e39e01a853d718ae8"
                    ]
                },
                {
                    "command": [
                        "rewrite (E x); rewrite (E y).",
                        "VernacExtend",
                        "a0637030dc3afdb1592217ebf99ff37e6d96a82f"
                    ]
                },
                {
                    "command": [
                        "cut (Fcanonic (Fabs x)); [ intros D | apply FcanonicFabs; auto ].",
                        "VernacExtend",
                        "468a955738a2f1740e70298cfd7fbd3dc6e4908d"
                    ]
                },
                {
                    "command": [
                        "cut (Fcanonic (Fabs y)); [ intros G | apply FcanonicFabs; auto ].",
                        "VernacExtend",
                        "8ff11e9bccbb29d9d5c6baad718fb0405a82c10b"
                    ]
                },
                {
                    "command": [
                        "case H1; intros Z2.",
                        "VernacExtend",
                        "7e58b8623f1ef9b238a5585758d8f9caf7a820e0"
                    ]
                },
                {
                    "command": [
                        "case (FcanonicLtPos (Fabs x) (Fabs y)); auto with zarith.",
                        "VernacExtend",
                        "d96323b679a5ea3d94ab022075f98c55fd06a179"
                    ]
                },
                {
                    "command": [
                        "rewrite (Fabs_correct radix); auto with real zarith.",
                        "VernacExtend",
                        "380138041f48d27aba8418f5e3c7c02d8d80765e"
                    ]
                },
                {
                    "command": [
                        "repeat rewrite (Fabs_correct radix); auto with real zarith.",
                        "VernacExtend",
                        "a1fb426f448fa94bb83e43438ff6ea533c35b9fe"
                    ]
                },
                {
                    "command": [
                        "rewrite (FcanonicUnique (Fabs x) (Fabs y)); auto with float zarith.",
                        "VernacExtend",
                        "bc45f6c723a48a09b150b16b2ff1f108080124a5"
                    ]
                },
                {
                    "command": [
                        "repeat rewrite (Fabs_correct radix); auto with real zarith.",
                        "VernacExtend",
                        "a1fb426f448fa94bb83e43438ff6ea533c35b9fe"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "FcanonicLtNeg",
            "line_nb": 597,
            "steps": [
                {
                    "command": [
                        "intros p q H' H'0 H'1 H'2.",
                        "VernacExtend",
                        "72bc33bd695361090defa76b144ed28b290b1f49"
                    ]
                },
                {
                    "command": [
                        "cut ((Fexp (Fopp q) < Fexp (Fopp p))%Z \\/ Fexp (Fopp q) = Fexp (Fopp p) /\\ (Fnum (Fopp q) < Fnum (Fopp p))%Z).",
                        "VernacExtend",
                        "f8b880bd89f64be207a1aa948cf3bce2177953ed"
                    ]
                },
                {
                    "command": [
                        "simpl in |- *.",
                        "VernacExtend",
                        "1b93169f4cf876d207c1fab22a2347202ab48d85"
                    ]
                },
                {
                    "command": [
                        "intros H'3; elim H'3; clear H'3; intros H'3; [ idtac | elim H'3; clear H'3; intros H'3 H'4 ]; auto; right; split; auto with zarith.",
                        "VernacExtend",
                        "9d6ce55c106383a7d0c2fbfe23fc8315938582f9"
                    ]
                },
                {
                    "command": [
                        "apply FcanonicLtPos; try apply FcanonicFopp; auto; unfold FtoRradix in |- *; repeat rewrite Fopp_correct; replace 0%R with (-0)%R; auto with real.",
                        "VernacExtend",
                        "24015f6eeea621ce72e238c9804564e45cf3c0e4"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "FcanonicFnormalizeEq",
            "line_nb": 604,
            "steps": [
                {
                    "command": [
                        "intros p H'.",
                        "VernacExtend",
                        "bb6abbd0a5bb134f5276d7928176425ceae09e54"
                    ]
                },
                {
                    "command": [
                        "apply FcanonicUnique; auto.",
                        "VernacExtend",
                        "81f72d70f2aaec842d806a1049d89d13b2022c25"
                    ]
                },
                {
                    "command": [
                        "apply FnormalizeCanonic; auto.",
                        "VernacExtend",
                        "9a1fe361020914af4b8bf7ab09ee74e43ff90cec"
                    ]
                },
                {
                    "command": [
                        "apply FcanonicBound with (1 := H'); auto.",
                        "VernacExtend",
                        "9bb2b2d585d05a3a6ba8047cc2f9f6397f2eb7c2"
                    ]
                },
                {
                    "command": [
                        "apply FnormalizeCorrect; auto.",
                        "VernacExtend",
                        "eb55ec64becb45831f31eca744980a2b286c1906"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "FcanonicPosFexpRlt",
            "line_nb": 611,
            "steps": [
                {
                    "command": [
                        "intros x y H' H'0 H'1 H'2 H'3.",
                        "VernacExtend",
                        "dc09decf5fb92b59663e01be9ed5457a33f54d5a"
                    ]
                },
                {
                    "command": [
                        "case (Rle_or_lt y x); auto.",
                        "VernacExtend",
                        "8cff204fc8fcfb52f35ec5692c634356fd671b03"
                    ]
                },
                {
                    "command": [
                        "intros H'4; case H'4; clear H'4; intros H'4.",
                        "VernacExtend",
                        "15b353ee44dd8a339396597ad074390c4fd8ce37"
                    ]
                },
                {
                    "command": [
                        "case FcanonicLtPos with (p := y) (q := x); auto.",
                        "VernacExtend",
                        "c748191dfc32dc517a039c32b3fe424a7d1fd808"
                    ]
                },
                {
                    "command": [
                        "intros H'5; Contradict H'3; auto with zarith.",
                        "VernacExtend",
                        "a83d5ec5f4f5a00aaa7499437e99d9c08bd42e73"
                    ]
                },
                {
                    "command": [
                        "intros H'5; elim H'5; intros H'6 H'7; clear H'5; Contradict H'3; rewrite H'6; auto with zarith.",
                        "VernacExtend",
                        "94af3e6ca341aab1f946e2ce651e70d7afa9c9a5"
                    ]
                },
                {
                    "command": [
                        "Contradict H'3.",
                        "VernacExtend",
                        "1690deb3bfcd28d48572d7f699b77412ce81cef7"
                    ]
                },
                {
                    "command": [
                        "rewrite FcanonicUnique with (p := x) (q := y); auto with zarith.",
                        "VernacExtend",
                        "5325cb815d792facdb7bfa5cbf5c411c01f6d67d"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "FcanonicNegFexpRlt",
            "line_nb": 621,
            "steps": [
                {
                    "command": [
                        "intros x y H' H'0 H'1 H'2 H'3.",
                        "VernacExtend",
                        "dc09decf5fb92b59663e01be9ed5457a33f54d5a"
                    ]
                },
                {
                    "command": [
                        "case (Rle_or_lt x y); auto.",
                        "VernacExtend",
                        "b18304435ac081dab3a38dfa85de7a954aa1f0d5"
                    ]
                },
                {
                    "command": [
                        "intros H'4; case H'4; clear H'4; intros H'4.",
                        "VernacExtend",
                        "15b353ee44dd8a339396597ad074390c4fd8ce37"
                    ]
                },
                {
                    "command": [
                        "case FcanonicLtNeg with (p := x) (q := y); auto.",
                        "VernacExtend",
                        "616b1874e2872a13eeb24cf12577683e9cc33709"
                    ]
                },
                {
                    "command": [
                        "intros H'5; Contradict H'3; auto with zarith.",
                        "VernacExtend",
                        "a83d5ec5f4f5a00aaa7499437e99d9c08bd42e73"
                    ]
                },
                {
                    "command": [
                        "intros H'5; elim H'5; intros H'6 H'7; clear H'5; Contradict H'3; rewrite H'6; auto with zarith.",
                        "VernacExtend",
                        "94af3e6ca341aab1f946e2ce651e70d7afa9c9a5"
                    ]
                },
                {
                    "command": [
                        "Contradict H'3.",
                        "VernacExtend",
                        "1690deb3bfcd28d48572d7f699b77412ce81cef7"
                    ]
                },
                {
                    "command": [
                        "rewrite FcanonicUnique with (p := x) (q := y); auto with zarith.",
                        "VernacExtend",
                        "5325cb815d792facdb7bfa5cbf5c411c01f6d67d"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "FnormalBoundAbs2",
            "line_nb": 631,
            "steps": [
                {
                    "command": [
                        "intros p H'; unfold FtoRradix, FtoR in |- *; simpl in |- *.",
                        "VernacExtend",
                        "f4a2ffd57a0f37048b5813226b31423dfedd51f1"
                    ]
                },
                {
                    "command": [
                        "replace (1 * powerRZ radix (Zpred (Fexp p)))%R with (powerRZ radix (Zpred (Fexp p))); [ idtac | ring ].",
                        "VernacExtend",
                        "7c7070d5d9befdd0874b7fc4b78de861926d66f2"
                    ]
                },
                {
                    "command": [
                        "pattern (Fexp p) at 2 in |- *; replace (Fexp p) with (Zsucc (Zpred (Fexp p))); [ rewrite powerRZ_Zs; auto with real zarith | unfold Zsucc, Zpred in |- *; ring ].",
                        "VernacExtend",
                        "306dd107f243eea1b9c8e0d5532610760a0c33fb"
                    ]
                },
                {
                    "command": [
                        "repeat rewrite <- Rmult_assoc.",
                        "VernacExtend",
                        "645aebe2c3685a4f868a05a2372130cedecea85e"
                    ]
                },
                {
                    "command": [
                        "apply Rmult_le_compat_r; auto with real arith.",
                        "VernacExtend",
                        "118f6d965446d8abadb72c8e021be24c227d51f0"
                    ]
                },
                {
                    "command": [
                        "rewrite <- Rmult_IZR; apply Rle_IZR.",
                        "VernacExtend",
                        "2e95a7e34e84426aeaa61bda0ff73a32c7e98e0a"
                    ]
                },
                {
                    "command": [
                        "rewrite <- (Zabs_eq radix); auto with zarith.",
                        "VernacExtend",
                        "66fcebcc97af9eb0fe5a4854c40bb3ee6afb1c7b"
                    ]
                },
                {
                    "command": [
                        "rewrite <- Zabs_Zmult; rewrite Zmult_comm; auto with float.",
                        "VernacExtend",
                        "b414f8c71fdd507745c929cf702c324cf1f8e083"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "vNumbMoreThanOne",
            "line_nb": 641,
            "steps": [
                {
                    "command": [
                        "replace 1%Z with (Z_of_nat 1); [ idtac | simpl in |- *; auto ].",
                        "VernacExtend",
                        "b05913f1e9f310e69829144be758ee2a191492cc"
                    ]
                },
                {
                    "command": [
                        "rewrite <- (Zpower_nat_O radix); rewrite pGivesBound; auto with zarith.",
                        "VernacExtend",
                        "e3e53e213db6598e0c8294949447d411b91a9cbc"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "PosNormMin",
            "line_nb": 645,
            "steps": [
                {
                    "command": [
                        "pattern radix at 1 in |- *; rewrite <- (Zpower_nat_1 radix); unfold nNormMin in |- *.",
                        "VernacExtend",
                        "814c40dbc13872f7fb961429b7be525757817151"
                    ]
                },
                {
                    "command": [
                        "rewrite pGivesBound; rewrite <- Zpower_nat_is_exp.",
                        "VernacExtend",
                        "d86283e725b51b800af777e0ed38046ed13857e2"
                    ]
                },
                {
                    "command": [
                        "generalize precisionNotZero; case precision; auto with zarith.",
                        "VernacExtend",
                        "3230d82790f2fbc025689960dee47cea761e7e57"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "FnormalPpred",
            "line_nb": 650,
            "steps": [
                {
                    "command": [
                        "intros x H; (cut (0 <= pPred (vNum b))%Z; [ intros Z1 | unfold pPred in |- *; auto with zarith ]).",
                        "VernacExtend",
                        "8cfe4db7dec6e18a7f547ae1c7e6f107b5a66f75"
                    ]
                },
                {
                    "command": [
                        "repeat split; simpl in |- *; auto with zarith.",
                        "VernacExtend",
                        "3887b5c0ace93a706fbfe1f9aea736a5c30668c7"
                    ]
                },
                {
                    "command": [
                        "rewrite (Zabs_eq (pPred (vNum b))).",
                        "VernacExtend",
                        "b731c6ac9bd6576aab36203d727f17dc7f173e83"
                    ]
                },
                {
                    "command": [
                        "unfold pPred in |- *; auto with zarith.",
                        "VernacExtend",
                        "58d3e86f4a2a27c81c529b026349420b483b6031"
                    ]
                },
                {
                    "command": [
                        "unfold pPred in |- *; rewrite pGivesBound; auto with zarith.",
                        "VernacExtend",
                        "4413906761fe3f1717cb9f03e8b84557adf8b16f"
                    ]
                },
                {
                    "command": [
                        "rewrite Zabs_Zmult; repeat rewrite Zabs_eq; auto with zarith.",
                        "VernacExtend",
                        "6d503bdeb17263a8728ca246f94619b0da196786"
                    ]
                },
                {
                    "command": [
                        "apply Zle_trans with ((1 + 1) * pPred (vNum b))%Z; auto with zarith.",
                        "VernacExtend",
                        "4e86f8db2875cc7314dd0593add52a5fa6ccb937"
                    ]
                },
                {
                    "command": [
                        "replace ((1 + 1) * pPred (vNum b))%Z with (pPred (vNum b) + pPred (vNum b))%Z; auto with zarith.",
                        "VernacExtend",
                        "d787d595c995ff68285ee2b084e85afef71e935a"
                    ]
                },
                {
                    "command": [
                        "replace (Zpos (vNum b)) with (1 + Zpred (Zpos (vNum b)))%Z; unfold pPred in |- *; auto with zarith.",
                        "VernacExtend",
                        "99ad6ebe0ef5e305854d657f845643ec4bc8913f"
                    ]
                },
                {
                    "command": [
                        "apply Zplus_le_compat_r; apply Zle_Zpred.",
                        "VernacExtend",
                        "f2e24bb6c4a0241e4b85258c66d41f0b42af7df2"
                    ]
                },
                {
                    "command": [
                        "apply vNumbMoreThanOne.",
                        "VernacExtend",
                        "b132967ab8afc8b8da295d43b94f8db91ba3e890"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "FcanonicPpred",
            "line_nb": 663,
            "steps": [
                {
                    "command": [
                        "intros x H; left; apply FnormalPpred; auto.",
                        "VernacExtend",
                        "e92e4b11e175e27e5e8a5d39597f3b21e033ca20"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "FnormalNnormMin",
            "line_nb": 666,
            "steps": [
                {
                    "command": [
                        "intros x H; (cut (0 < nNormMin)%Z; [ intros Z1 | apply nNormPos ]).",
                        "VernacExtend",
                        "9dfd7df816ae9a8ad04430891e84b265676fd1c2"
                    ]
                },
                {
                    "command": [
                        "repeat split; simpl in |- *; auto with zarith.",
                        "VernacExtend",
                        "3887b5c0ace93a706fbfe1f9aea736a5c30668c7"
                    ]
                },
                {
                    "command": [
                        "rewrite Zabs_eq; auto with zarith.",
                        "VernacExtend",
                        "e3b6647506c6d43441146989691d7c27f1722b7e"
                    ]
                },
                {
                    "command": [
                        "rewrite PosNormMin.",
                        "VernacExtend",
                        "ae7a6f6291f3752bac6962c1b321d4804fba4031"
                    ]
                },
                {
                    "command": [
                        "pattern nNormMin at 1 in |- *; replace nNormMin with (1 * nNormMin)%Z; auto with zarith.",
                        "VernacExtend",
                        "4a1c4adad82a645192fb272c06bc47802e6fd587"
                    ]
                },
                {
                    "command": [
                        "apply Zmult_gt_0_lt_compat_r; auto with zarith.",
                        "VernacExtend",
                        "591acc3e148a356d4d326ded6bdc45878b78dc06"
                    ]
                },
                {
                    "command": [
                        "rewrite PosNormMin; auto with zarith.",
                        "VernacExtend",
                        "96d38dd3536018c4420e24a3af51f3a97a0df149"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "FcanonicNnormMin",
            "line_nb": 675,
            "steps": [
                {
                    "command": [
                        "intros x H; left; apply FnormalNnormMin; auto.",
                        "VernacExtend",
                        "d93c94acb3e616465d061962e94281e9179dea0d"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "boundedNorMinGivesExp",
            "line_nb": 678,
            "steps": [
                {
                    "command": [
                        "intros x p H' H'0 H'1 H'2.",
                        "VernacExtend",
                        "9164f6dac2854f6b06061aed3fa06ed29591791e"
                    ]
                },
                {
                    "command": [
                        "cut (0 <= p)%R; [ intros Rle1 | idtac ].",
                        "VernacExtend",
                        "010fdc50a592e85d4d4dd9205625a03cfaefe039"
                    ]
                },
                {
                    "command": [
                        "case (FcanonicLePos (Float nNormMin x) (Fnormalize p)); try rewrite FnormalizeCorrect; simpl in |- *; auto with float zarith.",
                        "VernacExtend",
                        "3b15bcbacd3a4b689f0ebf5fa04425644e24229f"
                    ]
                },
                {
                    "command": [
                        "apply FcanonicNnormMin; auto.",
                        "VernacExtend",
                        "5c303de86cf95faf9544d938aecb8a3b4f03f881"
                    ]
                },
                {
                    "command": [
                        "apply FnormalizeCanonic; auto.",
                        "VernacExtend",
                        "9a1fe361020914af4b8bf7ab09ee74e43ff90cec"
                    ]
                },
                {
                    "command": [
                        "apply (LeFnumZERO radix); simpl in |- *; auto.",
                        "VernacExtend",
                        "268d84e0c894e631e9721c86deb5ba254a512159"
                    ]
                },
                {
                    "command": [
                        "apply Zlt_le_weak; apply nNormPos.",
                        "VernacExtend",
                        "fddd46658e9ed01dee969b288ee026317cbf2249"
                    ]
                },
                {
                    "command": [
                        "intros H'3.",
                        "VernacExtend",
                        "2e512d3c52562ab0fb19b78be8662c12b7168c72"
                    ]
                },
                {
                    "command": [
                        "case (FcanonicLePos (Fnormalize p) (Float (pPred (vNum b)) x)); try rewrite FnormalizeCorrect; simpl in |- *; auto.",
                        "VernacExtend",
                        "3c937d646535f81f1c09d824c18d1b4825392ce1"
                    ]
                },
                {
                    "command": [
                        "apply FnormalizeCanonic; auto.",
                        "VernacExtend",
                        "9a1fe361020914af4b8bf7ab09ee74e43ff90cec"
                    ]
                },
                {
                    "command": [
                        "apply FcanonicPpred; auto.",
                        "VernacExtend",
                        "a1582f25180040a1778916d11bde3b8ec3282a15"
                    ]
                },
                {
                    "command": [
                        "intros H'4; Contradict H'4; auto with zarith.",
                        "VernacExtend",
                        "a1ac1d734d04e3a45ac3e11a00666fa44ebfa22b"
                    ]
                },
                {
                    "command": [
                        "intros (H'4, H'5); auto.",
                        "VernacExtend",
                        "9d7cf449823592413ef27cc09e5ba0adcdf29b57"
                    ]
                },
                {
                    "command": [
                        "apply Rle_trans with (2 := H'1).",
                        "VernacExtend",
                        "91f206be094174199ce71e0871046fd39fd6aaa5"
                    ]
                },
                {
                    "command": [
                        "apply (LeFnumZERO radix); simpl in |- *; auto with zarith.",
                        "VernacExtend",
                        "02967e51cd67c6bee99b6001d47883186214e930"
                    ]
                },
                {
                    "command": [
                        "apply Zlt_le_weak; apply nNormPos.",
                        "VernacExtend",
                        "fddd46658e9ed01dee969b288ee026317cbf2249"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        }
    ]
}