{
    "filename": "Closest2Prop.v",
    "coq_project": "float",
    "vernac_cmds": [
        [
            "Require Export ClosestProp.",
            "VernacRequire",
            "8db9b3b5e170cac2a3031d489ceaf732362e27ae"
        ],
        [
            "Section F2.",
            "VernacBeginSection",
            "20403cbc2902414cd8c0b7f784732062cf168993"
        ],
        [
            "Variable b : Fbound.",
            "VernacAssumption",
            "17a11c003f49f819b8cb809f61b140702916486d"
        ],
        [
            "Variable precision : nat.",
            "VernacAssumption",
            "2235bc83b7ebf4cbe373b5fa3b4f3c643d454130"
        ],
        [
            "Let radix := 2%Z.",
            "VernacDefinition",
            "dd83a52a4909eab99cfa47455fb55794b0e87d99"
        ],
        [
            "Let FtoRradix := FtoR radix.",
            "VernacDefinition",
            "5aa29a9595c6e9e03b28c6d232299552ec761ad7"
        ],
        [
            "Local Coercion FtoRradix : float >-> R.",
            "VernacCoercion",
            "cec6b845059d434f72dda1a67638af64e1fb0628"
        ],
        [
            "Theorem TwoMoreThanOne : (1 < radix)%Z.",
            "VernacStartTheoremProof",
            "e78cf879d3518b235d8720b105c6b6a8ba0c4ae0"
        ],
        [
            "unfold radix in |- *; red in |- *; simpl in |- *; auto.",
            "VernacExtend",
            "1b4b9ca2caecbc40ffc3055f89146f2fce39970a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Hint Resolve TwoMoreThanOne.",
            "VernacHints",
            "e8e6d0ab3ccfa9a6e9a4fa9b0a3a493c8398f197"
        ],
        [
            "Hypothesis precisionNotZero : 1 < precision.",
            "VernacAssumption",
            "e79c11c811d69748a00a1e44be084cf1cb64788a"
        ],
        [
            "Hypothesis pGivesBound : Zpos (vNum b) = Zpower_nat radix precision.",
            "VernacAssumption",
            "d558f967d87d2a42d14158ac115b10c6f5358430"
        ],
        [
            "Theorem FevenNormMin : Even (nNormMin 2%nat precision).",
            "VernacStartTheoremProof",
            "1b15f5eefd5785378302027334dd1fd3961dd655"
        ],
        [
            "unfold nNormMin in |- *.",
            "VernacExtend",
            "c0047b55b25ea634d65f1589b8001612eb0d9f04"
        ],
        [
            "generalize precisionNotZero; case precision.",
            "VernacExtend",
            "31a41167fdb7caba2e8e59ede4d95e5467a431c5"
        ],
        [
            "intros H'2; Contradict H'2; auto with zarith.",
            "VernacExtend",
            "94defe69b97a2ba9c629c4ab6cedeaa04ade00f5"
        ],
        [
            "intros n; case n.",
            "VernacExtend",
            "b4ea99e9638b1f4853c8a1f258c5b4ff22cab052"
        ],
        [
            "intros H'2; Contradict H'2; auto with zarith.",
            "VernacExtend",
            "94defe69b97a2ba9c629c4ab6cedeaa04ade00f5"
        ],
        [
            "intros n0 H'2; replace (pred (S (S n0))) with (S n0).",
            "VernacExtend",
            "6741e27691737dc2411ed076539b00aa6ecdde9a"
        ],
        [
            "apply EvenExp; auto.",
            "VernacExtend",
            "ecb1bb9a501b02e768faacd23fdc0a994b29dc12"
        ],
        [
            "exists 1%Z; ring.",
            "VernacExtend",
            "05c068bfe40077ef1de941a56db11233297cf781"
        ],
        [
            "simpl in |- *; auto.",
            "VernacExtend",
            "9b631374b1d3067f703fd99c5dc6e1e5c8405957"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Theorem EvenFNSuccFNSuccMid : forall p : float, Fbounded b p -> FNeven b radix precision p -> Fminus radix (FNSucc b radix precision (FNSucc b radix precision p)) (FNSucc b radix precision p) = Fminus radix (FNSucc b radix precision p) p :>R.",
            "VernacStartTheoremProof",
            "a370e807982d6ee49c9fa6f944d81799804d00b2"
        ],
        [
            "intros p H' H'0.",
            "VernacExtend",
            "652f91006d10c9030c57f29a3311eeb49eea5491"
        ],
        [
            "unfold FtoRradix in |- *; apply FNSuccFNSuccMid; auto.",
            "VernacExtend",
            "97c57064ccf1ebc2975357271da99c629559bc1b"
        ],
        [
            "red in |- *; intros H'1; absurd (FNodd b radix precision (FNSucc b radix precision p)); auto.",
            "VernacExtend",
            "c1906ed67d0bcfdfb1a1fe226e5346ce50450afc"
        ],
        [
            "unfold FNodd in |- *.",
            "VernacExtend",
            "080cab71c928be72c4b176e39a38c02b651c00d2"
        ],
        [
            "rewrite FcanonicFnormalizeEq; auto with float arith.",
            "VernacExtend",
            "20fcd92016d1d222705359aed510c5669cd37da1"
        ],
        [
            "unfold Fodd in |- *.",
            "VernacExtend",
            "56324d8aa0bbc90d140e57ba0aa4affb19ab9ec6"
        ],
        [
            "rewrite H'1.",
            "VernacExtend",
            "fe682a51e1c672e4b72dba2c1d22ce70d69a1e22"
        ],
        [
            "apply EvenNOdd; auto with float arith.",
            "VernacExtend",
            "360706d95c776a2a99b8c9795abd13a8b8cb7412"
        ],
        [
            "apply FevenNormMin; auto with float arith.",
            "VernacExtend",
            "1c44d38b0524e9d0a266fc920a5684c109cae1e7"
        ],
        [
            "apply FNevenSuc; auto.",
            "VernacExtend",
            "260e8b652312b5296eb97a6ff2c395e62a28c37e"
        ],
        [
            "red in |- *; intros H'1; absurd (FNodd b radix precision (FNSucc b radix precision p)); auto with float arith.",
            "VernacExtend",
            "b6a914dc2bda52a27a236fbc8124f9dda9fcdd21"
        ],
        [
            "unfold FNodd in |- *.",
            "VernacExtend",
            "080cab71c928be72c4b176e39a38c02b651c00d2"
        ],
        [
            "rewrite FcanonicFnormalizeEq; auto with float arith.",
            "VernacExtend",
            "20fcd92016d1d222705359aed510c5669cd37da1"
        ],
        [
            "unfold Fodd in |- *.",
            "VernacExtend",
            "56324d8aa0bbc90d140e57ba0aa4affb19ab9ec6"
        ],
        [
            "rewrite H'1.",
            "VernacExtend",
            "fe682a51e1c672e4b72dba2c1d22ce70d69a1e22"
        ],
        [
            "apply EvenNOdd.",
            "VernacExtend",
            "829be8048e3ba34d73fd5461e0f86c8e206b60f6"
        ],
        [
            "apply EvenOpp; apply FevenNormMin.",
            "VernacExtend",
            "97048a8c7b7703d0258579d07ac154620edad42e"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Theorem AScal2 : forall p : float, Float (Fnum p) (Fexp p + 1%nat) = (radix * p)%R :>R.",
            "VernacStartTheoremProof",
            "b0f0f44a1b44966e2b587959328ae5ce6b8e351e"
        ],
        [
            "intros p.",
            "VernacExtend",
            "223e3cb70cff95972873720780e7195aeb57b9fc"
        ],
        [
            "unfold FtoRradix in |- *; rewrite FvalScale; auto.",
            "VernacExtend",
            "9e0ce178ac55e164f0ae00ced32123531c540a45"
        ],
        [
            "replace (powerRZ radix 1%nat) with (INR 2); [ idtac | simpl in |- *; unfold radix; ring ]; auto.",
            "VernacExtend",
            "c80ba202ddf1ce7242ca57e0b5ebe1c6999aeb13"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "End F2.",
            "VernacEndSegment",
            "4e37c554b1cadd951b4100249d239265a4350225"
        ],
        [
            "Hint Resolve FevenNormMin: float.",
            "VernacHints",
            "7113042696bda99adfe11b8c4dd7162d6288388f"
        ]
    ],
    "proofs": [
        {
            "name": "TwoMoreThanOne",
            "line_nb": 7,
            "steps": [
                {
                    "command": [
                        "unfold radix in |- *; red in |- *; simpl in |- *; auto.",
                        "VernacExtend",
                        "1b4b9ca2caecbc40ffc3055f89146f2fce39970a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "FevenNormMin",
            "line_nb": 13,
            "steps": [
                {
                    "command": [
                        "unfold nNormMin in |- *.",
                        "VernacExtend",
                        "c0047b55b25ea634d65f1589b8001612eb0d9f04"
                    ]
                },
                {
                    "command": [
                        "generalize precisionNotZero; case precision.",
                        "VernacExtend",
                        "31a41167fdb7caba2e8e59ede4d95e5467a431c5"
                    ]
                },
                {
                    "command": [
                        "intros H'2; Contradict H'2; auto with zarith.",
                        "VernacExtend",
                        "94defe69b97a2ba9c629c4ab6cedeaa04ade00f5"
                    ]
                },
                {
                    "command": [
                        "intros n; case n.",
                        "VernacExtend",
                        "b4ea99e9638b1f4853c8a1f258c5b4ff22cab052"
                    ]
                },
                {
                    "command": [
                        "intros H'2; Contradict H'2; auto with zarith.",
                        "VernacExtend",
                        "94defe69b97a2ba9c629c4ab6cedeaa04ade00f5"
                    ]
                },
                {
                    "command": [
                        "intros n0 H'2; replace (pred (S (S n0))) with (S n0).",
                        "VernacExtend",
                        "6741e27691737dc2411ed076539b00aa6ecdde9a"
                    ]
                },
                {
                    "command": [
                        "apply EvenExp; auto.",
                        "VernacExtend",
                        "ecb1bb9a501b02e768faacd23fdc0a994b29dc12"
                    ]
                },
                {
                    "command": [
                        "exists 1%Z; ring.",
                        "VernacExtend",
                        "05c068bfe40077ef1de941a56db11233297cf781"
                    ]
                },
                {
                    "command": [
                        "simpl in |- *; auto.",
                        "VernacExtend",
                        "9b631374b1d3067f703fd99c5dc6e1e5c8405957"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "EvenFNSuccFNSuccMid",
            "line_nb": 24,
            "steps": [
                {
                    "command": [
                        "intros p H' H'0.",
                        "VernacExtend",
                        "652f91006d10c9030c57f29a3311eeb49eea5491"
                    ]
                },
                {
                    "command": [
                        "unfold FtoRradix in |- *; apply FNSuccFNSuccMid; auto.",
                        "VernacExtend",
                        "97c57064ccf1ebc2975357271da99c629559bc1b"
                    ]
                },
                {
                    "command": [
                        "red in |- *; intros H'1; absurd (FNodd b radix precision (FNSucc b radix precision p)); auto.",
                        "VernacExtend",
                        "c1906ed67d0bcfdfb1a1fe226e5346ce50450afc"
                    ]
                },
                {
                    "command": [
                        "unfold FNodd in |- *.",
                        "VernacExtend",
                        "080cab71c928be72c4b176e39a38c02b651c00d2"
                    ]
                },
                {
                    "command": [
                        "rewrite FcanonicFnormalizeEq; auto with float arith.",
                        "VernacExtend",
                        "20fcd92016d1d222705359aed510c5669cd37da1"
                    ]
                },
                {
                    "command": [
                        "unfold Fodd in |- *.",
                        "VernacExtend",
                        "56324d8aa0bbc90d140e57ba0aa4affb19ab9ec6"
                    ]
                },
                {
                    "command": [
                        "rewrite H'1.",
                        "VernacExtend",
                        "fe682a51e1c672e4b72dba2c1d22ce70d69a1e22"
                    ]
                },
                {
                    "command": [
                        "apply EvenNOdd; auto with float arith.",
                        "VernacExtend",
                        "360706d95c776a2a99b8c9795abd13a8b8cb7412"
                    ]
                },
                {
                    "command": [
                        "apply FevenNormMin; auto with float arith.",
                        "VernacExtend",
                        "1c44d38b0524e9d0a266fc920a5684c109cae1e7"
                    ]
                },
                {
                    "command": [
                        "apply FNevenSuc; auto.",
                        "VernacExtend",
                        "260e8b652312b5296eb97a6ff2c395e62a28c37e"
                    ]
                },
                {
                    "command": [
                        "red in |- *; intros H'1; absurd (FNodd b radix precision (FNSucc b radix precision p)); auto with float arith.",
                        "VernacExtend",
                        "b6a914dc2bda52a27a236fbc8124f9dda9fcdd21"
                    ]
                },
                {
                    "command": [
                        "unfold FNodd in |- *.",
                        "VernacExtend",
                        "080cab71c928be72c4b176e39a38c02b651c00d2"
                    ]
                },
                {
                    "command": [
                        "rewrite FcanonicFnormalizeEq; auto with float arith.",
                        "VernacExtend",
                        "20fcd92016d1d222705359aed510c5669cd37da1"
                    ]
                },
                {
                    "command": [
                        "unfold Fodd in |- *.",
                        "VernacExtend",
                        "56324d8aa0bbc90d140e57ba0aa4affb19ab9ec6"
                    ]
                },
                {
                    "command": [
                        "rewrite H'1.",
                        "VernacExtend",
                        "fe682a51e1c672e4b72dba2c1d22ce70d69a1e22"
                    ]
                },
                {
                    "command": [
                        "apply EvenNOdd.",
                        "VernacExtend",
                        "829be8048e3ba34d73fd5461e0f86c8e206b60f6"
                    ]
                },
                {
                    "command": [
                        "apply EvenOpp; apply FevenNormMin.",
                        "VernacExtend",
                        "97048a8c7b7703d0258579d07ac154620edad42e"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "AScal2",
            "line_nb": 43,
            "steps": [
                {
                    "command": [
                        "intros p.",
                        "VernacExtend",
                        "223e3cb70cff95972873720780e7195aeb57b9fc"
                    ]
                },
                {
                    "command": [
                        "unfold FtoRradix in |- *; rewrite FvalScale; auto.",
                        "VernacExtend",
                        "9e0ce178ac55e164f0ae00ced32123531c540a45"
                    ]
                },
                {
                    "command": [
                        "replace (powerRZ radix 1%nat) with (INR 2); [ idtac | simpl in |- *; unfold radix; ring ]; auto.",
                        "VernacExtend",
                        "c80ba202ddf1ce7242ca57e0b5ebe1c6999aeb13"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        }
    ]
}