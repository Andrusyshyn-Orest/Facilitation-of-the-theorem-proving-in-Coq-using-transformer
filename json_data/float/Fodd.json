{
    "filename": "Fodd.v",
    "coq_project": "float",
    "vernac_cmds": [
        [
            "Require Export Fmin.",
            "VernacRequire",
            "7c6c723aa917565b73095925c3a128ad2ae13948"
        ],
        [
            "Section FOdd.",
            "VernacBeginSection",
            "94631d9ecbeaa59c3de067197aaae12ca502d0b5"
        ],
        [
            "Variable b : Fbound.",
            "VernacAssumption",
            "17a11c003f49f819b8cb809f61b140702916486d"
        ],
        [
            "Variable radix : Z.",
            "VernacAssumption",
            "2349b77d134e0c9bb013a8bdca0020ca16fc023b"
        ],
        [
            "Variable precision : nat.",
            "VernacAssumption",
            "2235bc83b7ebf4cbe373b5fa3b4f3c643d454130"
        ],
        [
            "Let FtoRradix := FtoR radix.",
            "VernacDefinition",
            "5aa29a9595c6e9e03b28c6d232299552ec761ad7"
        ],
        [
            "Local Coercion FtoRradix : float >-> R.",
            "VernacCoercion",
            "cec6b845059d434f72dda1a67638af64e1fb0628"
        ],
        [
            "Hypothesis radixMoreThanOne : (1 < radix)%Z.",
            "VernacAssumption",
            "f4d3774b2275f4c4c3af941091d4d99f9a2129aa"
        ],
        [
            "Let radixMoreThanZERO := Zlt_1_O _ (Zlt_le_weak _ _ radixMoreThanOne).",
            "VernacDefinition",
            "b73ccff345a4fc730c8134dcd05adb7f1928fae7"
        ],
        [
            "Hint Resolve radixMoreThanZERO: zarith.",
            "VernacHints",
            "5a4a320eb610749621ef38850390d7141dc0d330"
        ],
        [
            "Hypothesis precisionGreaterThanOne : 1 < precision.",
            "VernacAssumption",
            "9f627fb385d8fe283ac9563556925f37be8e5402"
        ],
        [
            "Hypothesis pGivesBound : Zpos (vNum b) = Zpower_nat radix precision.",
            "VernacAssumption",
            "d558f967d87d2a42d14158ac115b10c6f5358430"
        ],
        [
            "Definition Even (z : Z) : Prop := exists z1 : _, z = (2 * z1)%Z.",
            "VernacDefinition",
            "6b6b51f40f35429f58a7b0b0a579cdc8a1bf098b"
        ],
        [
            "Definition Odd (z : Z) : Prop := exists z1 : _, z = (2 * z1 + 1)%Z.",
            "VernacDefinition",
            "58a9f2b643bb7d59c22dfff76c8a18b11c4ef601"
        ],
        [
            "Theorem OddSEven : forall n : Z, Odd n -> Even (Zsucc n).",
            "VernacStartTheoremProof",
            "6135bb93d7cd1da80f37a872558805f6876455b2"
        ],
        [
            "intros n H'; case H'; intros m H'1; exists (Zsucc m).",
            "VernacExtend",
            "1c5fcee546f3c3e6a88c607ea2dae07a5f6b4877"
        ],
        [
            "rewrite H'1; unfold Zsucc in |- *; ring.",
            "VernacExtend",
            "7f824db41bae6f4a91ae9d62fd6d7a9b9ad7df7c"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Theorem EvenSOdd : forall n : Z, Even n -> Odd (Zsucc n).",
            "VernacStartTheoremProof",
            "142ddb28e58e0ca2c1e96244973ed8d7078a4fb2"
        ],
        [
            "intros n H'; case H'; intros m H'1; exists m.",
            "VernacExtend",
            "1e75ee53d848c9746af04145d1c9568430c4683a"
        ],
        [
            "rewrite H'1; unfold Zsucc in |- *; ring.",
            "VernacExtend",
            "7f824db41bae6f4a91ae9d62fd6d7a9b9ad7df7c"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Hint Resolve OddSEven EvenSOdd: zarith.",
            "VernacHints",
            "9adf461bba881ae491683d8477939fb8fe9dbac7"
        ],
        [
            "Theorem OddSEvenInv : forall n : Z, Odd (Zsucc n) -> Even n.",
            "VernacStartTheoremProof",
            "cd5ef73baf715d08fca2fe68528e1e9200aefe3d"
        ],
        [
            "intros n H'; case H'; intros m H'1; exists m.",
            "VernacExtend",
            "1e75ee53d848c9746af04145d1c9568430c4683a"
        ],
        [
            "apply Zsucc_inj; rewrite H'1; (unfold Zsucc in |- *; ring).",
            "VernacExtend",
            "52a94c52f315d8406076ac3b4c09243ecd382239"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Theorem EvenSOddInv : forall n : Z, Even (Zsucc n) -> Odd n.",
            "VernacStartTheoremProof",
            "a4ebf1b81fcf027296c6b7bc369830424f430ef7"
        ],
        [
            "intros n H'; case H'; intros m H'1; exists (Zpred m).",
            "VernacExtend",
            "d5f0cce71c7afcbedef7c7e47f49076364a3b43d"
        ],
        [
            "apply Zsucc_inj; rewrite H'1; (unfold Zsucc, Zpred in |- *; ring).",
            "VernacExtend",
            "209518427ac248c65e6414d8327c3cea39b90b5a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Theorem EvenO : Even 0.",
            "VernacStartTheoremProof",
            "4b36af5d59a0dd19d0b6a09e22691f4820063aa2"
        ],
        [
            "exists 0%Z; simpl in |- *; auto.",
            "VernacExtend",
            "be83ebd962a3ce62fa8e7bd9a3baa112d75bc26f"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Hint Resolve EvenO: zarith.",
            "VernacHints",
            "2218af916351d5ce01af79a9602bb13accc7e55f"
        ],
        [
            "Theorem Odd1 : Odd 1.",
            "VernacStartTheoremProof",
            "98876b5948c1f490decee84c5a0c18e67cc49dc5"
        ],
        [
            "exists 0%Z; simpl in |- *; auto.",
            "VernacExtend",
            "be83ebd962a3ce62fa8e7bd9a3baa112d75bc26f"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Hint Resolve Odd1: zarith.",
            "VernacHints",
            "1d3e7bc1c047ae49a37a995e05fa27d13cd5d552"
        ],
        [
            "Theorem OddOpp : forall z : Z, Odd z -> Odd (- z).",
            "VernacStartTheoremProof",
            "5344bdcd801927c4bf742334c1f9ddc87af48122"
        ],
        [
            "intros z H; case H; intros z1 H1; exists (- Zsucc z1)%Z; rewrite H1.",
            "VernacExtend",
            "0c31965d16e9101dea409fea04982d47617fc009"
        ],
        [
            "unfold Zsucc in |- *; ring.",
            "VernacExtend",
            "969b534f6ecb1c132a53aa0d310df91c06090b72"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Theorem EvenOpp : forall z : Z, Even z -> Even (- z).",
            "VernacStartTheoremProof",
            "c3be23d4f22f8d8b4978b7689e254bccd154c8dc"
        ],
        [
            "intros z H; case H; intros z1 H1; exists (- z1)%Z; rewrite H1; ring.",
            "VernacExtend",
            "d6b01ba16f2c43b79020e92ded56416ac6e25c4c"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Hint Resolve OddOpp EvenOpp: zarith.",
            "VernacHints",
            "4bb5b34d729670016c7ce22b225a66bb7757acd9"
        ],
        [
            "Theorem OddEvenDec : forall n : Z, {Odd n} + {Even n}.",
            "VernacStartTheoremProof",
            "2aacac78308f81df1087168e84c48eed35e675e6"
        ],
        [
            "intros z; case z; simpl in |- *; auto with zarith.",
            "VernacExtend",
            "6105546958faee2b3d0396125c1cb88d37b07c55"
        ],
        [
            "intros p; case p; simpl in |- *; auto with zarith.",
            "VernacExtend",
            "b2c62ba26e8de93edb5bed60bbb8cc3ddb49d976"
        ],
        [
            "intros p1; left; exists (Zpos p1); rewrite Zplus_comm; simpl in |- *; auto.",
            "VernacExtend",
            "63450afd9f2a27fa54de1efd2c3e136763940c93"
        ],
        [
            "intros p1; right; exists (Zpos p1); simpl in |- *; auto.",
            "VernacExtend",
            "d4dc5f0ab3ff5089b4d01293b3eb6f8799de5117"
        ],
        [
            "change (forall p : positive, {Odd (- Zpos p)} + {Even (- Zpos p)}) in |- *.",
            "VernacExtend",
            "ec6625d1010976cfb4f9a18da96f0156bd9cb432"
        ],
        [
            "intros p; case p; auto with zarith.",
            "VernacExtend",
            "c87489245fa0c2f9939daa87b6501630ffbc6b5a"
        ],
        [
            "intros p1; left; apply OddOpp; exists (Zpos p1); rewrite Zplus_comm; simpl in |- *; auto.",
            "VernacExtend",
            "084d260d90ace6cce0213fb9d3005c7ee4402b79"
        ],
        [
            "intros p1; right; apply EvenOpp; exists (Zpos p1); simpl in |- *; auto.",
            "VernacExtend",
            "90e9b081d536a03005c9473f560ee4d9195aedec"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Theorem OddNEven : forall n : Z, Odd n -> ~ Even n.",
            "VernacStartTheoremProof",
            "9f0e292c11732904650f058de0fb964242c41005"
        ],
        [
            "intros n H1; red in |- *; intros H2; case H1; case H2; intros z1 Hz1 z2 Hz2.",
            "VernacExtend",
            "21e797825c749d7fceb31d301cc79b1479614557"
        ],
        [
            "absurd (n = n); auto.",
            "VernacExtend",
            "1d6c4f09a1e139d14b029ffb6d2a34f92497d574"
        ],
        [
            "pattern n at 1 in |- *; rewrite Hz1; rewrite Hz2; repeat rewrite (fun x => Zplus_comm x 1).",
            "VernacExtend",
            "0842fefa5c4b243ca7be81b6710dbf505ed661b2"
        ],
        [
            "case z1; case z2; simpl in |- *; try (intros; red in |- *; intros; discriminate).",
            "VernacExtend",
            "a59bc597ff430d78d48dd9794c6eb81930a623ff"
        ],
        [
            "intros p p0; case p; simpl in |- *; try (intros; red in |- *; intros; discriminate).",
            "VernacExtend",
            "112daaff7410cd1353338a11a0cc762974a3e749"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Theorem EvenNOdd : forall n : Z, Even n -> ~ Odd n.",
            "VernacStartTheoremProof",
            "d280bb887bea22ab579a13990f136509d81ad04f"
        ],
        [
            "intros n H1; red in |- *; intros H2; case H1; case H2; intros z1 Hz1 z2 Hz2.",
            "VernacExtend",
            "21e797825c749d7fceb31d301cc79b1479614557"
        ],
        [
            "absurd (n = n); auto.",
            "VernacExtend",
            "1d6c4f09a1e139d14b029ffb6d2a34f92497d574"
        ],
        [
            "pattern n at 1 in |- *; rewrite Hz1; rewrite Hz2; repeat rewrite (fun x => Zplus_comm x 1).",
            "VernacExtend",
            "0842fefa5c4b243ca7be81b6710dbf505ed661b2"
        ],
        [
            "case z1; case z2; simpl in |- *; try (intros; red in |- *; intros; discriminate).",
            "VernacExtend",
            "a59bc597ff430d78d48dd9794c6eb81930a623ff"
        ],
        [
            "intros p p0; case p0; simpl in |- *; try (intros; red in |- *; intros; discriminate).",
            "VernacExtend",
            "89eefb5f3e1cbb3fa2e815d99c220e7da7db54c6"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Hint Resolve OddNEven EvenNOdd: zarith.",
            "VernacHints",
            "b469f6f6da9b895b19ba4f13861853fa0de19e91"
        ],
        [
            "Theorem EvenPlus1 : forall n m : Z, Even n -> Even m -> Even (n + m).",
            "VernacStartTheoremProof",
            "2fb62c98c4be978c37bcc5052c925ce301a46624"
        ],
        [
            "intros n m H H0; case H; case H0; intros z1 Hz1 z2 Hz2.",
            "VernacExtend",
            "6d6a747ec53103f8025ad232856396414f6ae504"
        ],
        [
            "exists (z2 + z1)%Z; try rewrite Hz1; try rewrite Hz2; ring.",
            "VernacExtend",
            "1ba6285922e306c086eaaf10514b50840eb70581"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Theorem EvenPlus2 : forall n m : Z, Odd n -> Odd m -> Even (n + m).",
            "VernacStartTheoremProof",
            "13cea4bae730a652c09d7cb76860f08334be2120"
        ],
        [
            "intros n m H H0; case H; case H0; intros z1 Hz1 z2 Hz2.",
            "VernacExtend",
            "6d6a747ec53103f8025ad232856396414f6ae504"
        ],
        [
            "exists (z2 + z1 + 1)%Z; try rewrite Hz1; try rewrite Hz2; ring.",
            "VernacExtend",
            "dd13b33b2e697a3a677abb8d7c955626c90cb2dc"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Theorem OddPlus1 : forall n m : Z, Odd n -> Even m -> Odd (n + m).",
            "VernacStartTheoremProof",
            "ea695b6afa8ae3a38a11d7bf957ddef7dc1964ae"
        ],
        [
            "intros n m H H0; case H; case H0; intros z1 Hz1 z2 Hz2.",
            "VernacExtend",
            "6d6a747ec53103f8025ad232856396414f6ae504"
        ],
        [
            "exists (z2 + z1)%Z; try rewrite Hz1; try rewrite Hz2; ring.",
            "VernacExtend",
            "1ba6285922e306c086eaaf10514b50840eb70581"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Theorem OddPlus2 : forall n m : Z, Even n -> Odd m -> Odd (n + m).",
            "VernacStartTheoremProof",
            "45b2d76dd8e833e623d5295455288e26f7ef1065"
        ],
        [
            "intros n m H H0; case H; case H0; intros z1 Hz1 z2 Hz2.",
            "VernacExtend",
            "6d6a747ec53103f8025ad232856396414f6ae504"
        ],
        [
            "exists (z2 + z1)%Z; try rewrite Hz1; try rewrite Hz2; ring.",
            "VernacExtend",
            "1ba6285922e306c086eaaf10514b50840eb70581"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Hint Resolve EvenPlus1 EvenPlus2 OddPlus1 OddPlus2: zarith.",
            "VernacHints",
            "527efd64a5f4901d0c9268a2d7ab876611becfe6"
        ],
        [
            "Theorem EvenPlusInv1 : forall n m : Z, Even (n + m) -> Even n -> Even m.",
            "VernacStartTheoremProof",
            "15210267436f2f8d066dca06c8b20d435f2c1868"
        ],
        [
            "intros n m H H0; replace m with (n + m + - n)%Z; auto with zarith.",
            "VernacExtend",
            "98a355e4e7da127b0d69217528b6dd519ea8fbc9"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Theorem EvenPlusInv2 : forall n m : Z, Even (n + m) -> Odd n -> Odd m.",
            "VernacStartTheoremProof",
            "f1badea9dc2ff126b6be61f19e4c36ec5fa5aaba"
        ],
        [
            "intros n m H H0; replace m with (n + m + - n)%Z; auto with zarith.",
            "VernacExtend",
            "98a355e4e7da127b0d69217528b6dd519ea8fbc9"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Theorem OddPlusInv1 : forall n m : Z, Odd (n + m) -> Odd m -> Even n.",
            "VernacStartTheoremProof",
            "a8c72706b3ade392d46503e9212c0a1ce3f63d3e"
        ],
        [
            "intros n m H H0; replace n with (n + m + - m)%Z; auto with zarith.",
            "VernacExtend",
            "fff7943bf3ddcf4d6783a6f089ff7c622b9e08bd"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Theorem OddPlusInv2 : forall n m : Z, Odd (n + m) -> Even m -> Odd n.",
            "VernacStartTheoremProof",
            "a334b8c753b75e40bbddbd9a7cbdac5bc75a4311"
        ],
        [
            "intros n m H H0; replace n with (n + m + - m)%Z; auto with zarith.",
            "VernacExtend",
            "fff7943bf3ddcf4d6783a6f089ff7c622b9e08bd"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Theorem EvenMult1 : forall n m : Z, Even n -> Even (n * m).",
            "VernacStartTheoremProof",
            "dabbcf04acae16556a737f91d8cbb458fc709b8a"
        ],
        [
            "intros n m H; case H; intros z1 Hz1; exists (z1 * m)%Z; rewrite Hz1; ring.",
            "VernacExtend",
            "7d88df3252e86d96f4ac3ff70db26e8f2e36504b"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Theorem EvenMult2 : forall n m : Z, Even m -> Even (n * m).",
            "VernacStartTheoremProof",
            "5ed6acc1f17f4f2367ab852b06592e06aada076e"
        ],
        [
            "intros n m H; case H; intros z1 Hz1; exists (z1 * n)%Z; rewrite Hz1; ring.",
            "VernacExtend",
            "9b0f4a239c0ce7b47efbdac909113c22669cf2bc"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Hint Resolve EvenMult1 EvenMult2: zarith.",
            "VernacHints",
            "d805f226139fb48ee2db90b80042f5c67a81a24d"
        ],
        [
            "Theorem OddMult : forall n m : Z, Odd n -> Odd m -> Odd (n * m).",
            "VernacStartTheoremProof",
            "a6b0d8f6059d3ddf7031afe6f5142480c066d0c5"
        ],
        [
            "intros n m H1 H2; case H1; case H2; intros z1 Hz1 z2 Hz2; exists (2 * z1 * z2 + z1 + z2)%Z; rewrite Hz1; rewrite Hz2; ring.",
            "VernacExtend",
            "359cd416918a476a2b0b4ee24cc87e2e0a1054bb"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Hint Resolve OddMult: zarith.",
            "VernacHints",
            "46934a88b1e319646d5a07dc93484bfde57c9fc7"
        ],
        [
            "Theorem EvenMultInv : forall n m : Z, Even (n * m) -> Odd n -> Even m.",
            "VernacStartTheoremProof",
            "bdddabc470ee81afeaf81598e5872cfab35eeed8"
        ],
        [
            "intros n m H H0; case (OddEvenDec m); auto; intros Z1.",
            "VernacExtend",
            "9cfb6fc10cbc1196cd60e07c80b33d760d2caddd"
        ],
        [
            "Contradict H; auto with zarith.",
            "VernacExtend",
            "a7763395aff9474ff53966c352957a2132d866e9"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Theorem OddMultInv : forall n m : Z, Odd (n * m) -> Odd n.",
            "VernacStartTheoremProof",
            "127f17b471aabcd8fb1634cb7dac797cfbd718b6"
        ],
        [
            "intros n m H; case (OddEvenDec n); auto; intros Z1.",
            "VernacExtend",
            "70fac7bad11d24b69ff569bf03749e7a44896cb5"
        ],
        [
            "Contradict H; auto with zarith.",
            "VernacExtend",
            "a7763395aff9474ff53966c352957a2132d866e9"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Theorem EvenExp : forall (n : Z) (m : nat), Even n -> Even (Zpower_nat n (S m)).",
            "VernacStartTheoremProof",
            "ea999784534a5c117aeb3352fedbda04b34cbaa6"
        ],
        [
            "intros n m; elim m.",
            "VernacExtend",
            "d43cf6576371f7c2881f4528b29efd0d97d5201c"
        ],
        [
            "rewrite Zpower_nat_1; simpl in |- *; auto with zarith.",
            "VernacExtend",
            "6f9941bacbeb4d50088b3f79ae9a4c5b728a7846"
        ],
        [
            "intros n0 H H0; replace (S (S n0)) with (1 + S n0); auto with arith.",
            "VernacExtend",
            "6a948493dfbf25a5afb791cd3a0996381559f18c"
        ],
        [
            "rewrite Zpower_nat_is_exp; rewrite Zpower_nat_1; simpl in |- *; auto with zarith.",
            "VernacExtend",
            "1ce21acfab58d1e06ba96fd6a22713fb279739ee"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Theorem OddExp : forall (n : Z) (m : nat), Odd n -> Odd (Zpower_nat n m).",
            "VernacStartTheoremProof",
            "e5021444e2378c3bbb2eb6092e86e0099d65e6dd"
        ],
        [
            "intros n m; elim m; simpl in |- *.",
            "VernacExtend",
            "6041e23fb872b3cb3e948eb5de1abb321547c687"
        ],
        [
            "auto with zarith.",
            "VernacExtend",
            "23f42fd3236dcece4a40b3a666dce57fea69a9c0"
        ],
        [
            "intros n0 H H0; replace (S n0) with (1 + n0); auto with arith.",
            "VernacExtend",
            "5a0218710967a45ed5598bfcfcab524dada989b7"
        ],
        [
            "auto with zarith.",
            "VernacExtend",
            "23f42fd3236dcece4a40b3a666dce57fea69a9c0"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Hint Resolve OddExp EvenExp: zarith.",
            "VernacHints",
            "a15681fd4dccd9b6fea0d5175d0f13723dc82825"
        ],
        [
            "Definition Feven (p : float) := Even (Fnum p).",
            "VernacDefinition",
            "5eaea845543a1a6ed1e6a159848f52e92a075af1"
        ],
        [
            "Definition Fodd (p : float) := Odd (Fnum p).",
            "VernacDefinition",
            "7c244e414ce6a404bdce230cab3150978222d863"
        ],
        [
            "Theorem FevenO : forall p : float, is_Fzero p -> Feven p.",
            "VernacStartTheoremProof",
            "23db775469a7112af1bd366dc4e42b22e5cee029"
        ],
        [
            "intros p H'; red in |- *; rewrite H'; simpl in |- *; auto with zarith.",
            "VernacExtend",
            "0e262c71e4b8316f796b00d75da2c5fc5415bf59"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Theorem FevenOrFodd : forall p : float, Feven p \\/ Fodd p.",
            "VernacStartTheoremProof",
            "eb6fcf4f4aa5ee3b35bc6609132dd94340a264f0"
        ],
        [
            "intros p; case (OddEvenDec (Fnum p)); auto.",
            "VernacExtend",
            "ac1ccb8f83207aac69d4c2f4bc11036d12d7816d"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Theorem FevenSucProp : forall p : float, (Fodd p -> Feven (FSucc b radix precision p)) /\\ (Feven p -> Fodd (FSucc b radix precision p)).",
            "VernacStartTheoremProof",
            "a866a088fc25d0af5150b4dff9ab8d30115cc2ac"
        ],
        [
            "intros p; unfold FSucc, Fodd, Feven in |- *.",
            "VernacExtend",
            "019885ef96bcc60d76342b498549ed9dd5c8222a"
        ],
        [
            "generalize (Z_eq_bool_correct (Fnum p) (pPred (vNum b))); case (Z_eq_bool (Fnum p) (pPred (vNum b))); intros H'1.",
            "VernacExtend",
            "6986b34a02203b0886d9c0c292bdf0ba91aa43f7"
        ],
        [
            "rewrite H'1; simpl in |- *; auto.",
            "VernacExtend",
            "3c3e7c5dca390297a39533777ae7c997c3d97758"
        ],
        [
            "unfold pPred in |- *; rewrite pGivesBound; unfold nNormMin in |- *.",
            "VernacExtend",
            "e384d70db99f60383ab3819119e20f71ccd9085a"
        ],
        [
            "case (OddEvenDec radix); auto with zarith.",
            "VernacExtend",
            "fce5ad72f668048a2a978cf740627e12e41eb4d3"
        ],
        [
            "intros H'; split; intros H'0; auto with zarith.",
            "VernacExtend",
            "796661ee5e948156261eb17b51ea351104a1867b"
        ],
        [
            "apply EvenMultInv with (n := radix); auto.",
            "VernacExtend",
            "6cfee9b1fc2a76b5ab3e1b73bc60c036ae136e2e"
        ],
        [
            "pattern radix at 1 in |- *; rewrite <- Zpower_nat_1; rewrite <- Zpower_nat_is_exp.",
            "VernacExtend",
            "535cc0233caa4c4aa2a70c668d7e0009e7aea989"
        ],
        [
            "replace (1 + pred precision) with precision; [ idtac | inversion precisionGreaterThanOne; auto ].",
            "VernacExtend",
            "e42e3f2f3adcbd1dcc0ceafafee8931cd52637bc"
        ],
        [
            "rewrite (Zsucc_pred (Zpower_nat radix precision)); auto with zarith.",
            "VernacExtend",
            "49f1d2008658184ec229041daf17bfb0f9698e37"
        ],
        [
            "intros H'; split; intros H'0; auto with zarith.",
            "VernacExtend",
            "796661ee5e948156261eb17b51ea351104a1867b"
        ],
        [
            "replace (pred precision) with (S (pred (pred precision))); auto with zarith.",
            "VernacExtend",
            "dc7145d8f55b453330d6134b4d683da5478141fd"
        ],
        [
            "Contradict H'0; apply OddNEven.",
            "VernacExtend",
            "6c03b5014f3bafe2bf854336ab1b85b8ed9ab89b"
        ],
        [
            "replace (Zpred (Zpower_nat radix precision)) with (Zpower_nat radix precision + - (1))%Z; [ idtac | unfold Zpred in |- *; simpl in |- *; auto ].",
            "VernacExtend",
            "909b45ecd5405bc60a01577131f0a4b7a583ef1e"
        ],
        [
            "replace precision with (S (pred precision)); [ auto with zarith | inversion precisionGreaterThanOne; auto ].",
            "VernacExtend",
            "38c50cd4628dde42ef0f8a49a74534a337c94f89"
        ],
        [
            "generalize (Z_eq_bool_correct (Fnum p) (- nNormMin radix precision)); case (Z_eq_bool (Fnum p) (- nNormMin radix precision)); intros H'2.",
            "VernacExtend",
            "22997bf8d86d9d1a56b927a9d1f1f93085ce9737"
        ],
        [
            "generalize (Z_eq_bool_correct (Fexp p) (- dExp b)); case (Z_eq_bool (Fexp p) (- dExp b)); intros H'3.",
            "VernacExtend",
            "e385c221fba26108d90c9922a9f10837e341becd"
        ],
        [
            "simpl in |- *; auto with zarith.",
            "VernacExtend",
            "61d3cdc6299cf8abf87703c074ca4503f0f27a12"
        ],
        [
            "simpl in |- *; auto with zarith.",
            "VernacExtend",
            "61d3cdc6299cf8abf87703c074ca4503f0f27a12"
        ],
        [
            "rewrite H'2; unfold pPred, nNormMin in |- *; rewrite pGivesBound.",
            "VernacExtend",
            "6ddb05b195c5a1f32dfe1862b53eccf972ea81f5"
        ],
        [
            "case (OddEvenDec radix); auto with zarith.",
            "VernacExtend",
            "fce5ad72f668048a2a978cf740627e12e41eb4d3"
        ],
        [
            "intros H'; split; intros H'0; auto with zarith.",
            "VernacExtend",
            "796661ee5e948156261eb17b51ea351104a1867b"
        ],
        [
            "apply EvenOpp; apply OddSEvenInv; rewrite <- Zsucc_pred; auto with zarith.",
            "VernacExtend",
            "6a3f5d9842299df1233cfcc980cd57084098dc7c"
        ],
        [
            "Contradict H'0; replace precision with (S (pred precision)); [ auto with zarith | inversion precisionGreaterThanOne; auto ].",
            "VernacExtend",
            "7eb2320933ab8f282d2b1aba414522db758d28f8"
        ],
        [
            "intros H'; split; intros H'0; auto with zarith.",
            "VernacExtend",
            "796661ee5e948156261eb17b51ea351104a1867b"
        ],
        [
            "Contradict H'0; replace (pred precision) with (S (pred (pred precision))); [ auto with zarith | auto with zarith ].",
            "VernacExtend",
            "e3bcb757b0799e85d724f7dd39c65324447a928e"
        ],
        [
            "replace precision with (S (pred precision)); [ auto with zarith | inversion precisionGreaterThanOne; auto ].",
            "VernacExtend",
            "38c50cd4628dde42ef0f8a49a74534a337c94f89"
        ],
        [
            "apply OddOpp; apply EvenSOddInv; rewrite <- Zsucc_pred; auto with zarith.",
            "VernacExtend",
            "6f5845ede9a1ed8971dad32c8d273b4112e4bdb6"
        ],
        [
            "simpl in |- *; auto with zarith.",
            "VernacExtend",
            "61d3cdc6299cf8abf87703c074ca4503f0f27a12"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Theorem FoddSuc : forall p : float, Fodd p -> Feven (FSucc b radix precision p).",
            "VernacStartTheoremProof",
            "2239ac48fd436f68a90f6c82c921d1a663c66932"
        ],
        [
            "intros p H'; case (FevenSucProp p); auto.",
            "VernacExtend",
            "b24a0c2dcb1524ff491e7367eeb130caa2f40940"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Theorem FevenSuc : forall p : float, Feven p -> Fodd (FSucc b radix precision p).",
            "VernacStartTheoremProof",
            "51f7729080975feb87fa35fe1fad991a143bb9a5"
        ],
        [
            "intros p H'; case (FevenSucProp p); auto.",
            "VernacExtend",
            "b24a0c2dcb1524ff491e7367eeb130caa2f40940"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Theorem FevenFop : forall p : float, Feven p -> Feven (Fopp p).",
            "VernacStartTheoremProof",
            "29ad65db49012a5dcc31afc05e9c8403229fa426"
        ],
        [
            "intros p; unfold Feven, Fopp in |- *; simpl in |- *; auto with zarith.",
            "VernacExtend",
            "0f88d80c74663707182e0cca25ee40285f548d64"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Theorem FoddFop : forall p : float, Fodd p -> Fodd (Fopp p).",
            "VernacStartTheoremProof",
            "7f47f335e8bff3734b09fd19b3205074f96f0190"
        ],
        [
            "intros p; unfold Fodd, Fopp in |- *; simpl in |- *; auto with zarith.",
            "VernacExtend",
            "b8ee103ae133d2882ba9a08d7e79b26cce2c103d"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Theorem FevenPred : forall p : float, Fodd p -> Feven (FPred b radix precision p).",
            "VernacStartTheoremProof",
            "55bfc02e53ff7d5f92adebb74b8c56ba0629aad1"
        ],
        [
            "intros p H'; rewrite FPredFopFSucc; auto with arith.",
            "VernacExtend",
            "4d56b2bd6774faf27f29cbadd552a50781f961da"
        ],
        [
            "apply FevenFop; auto.",
            "VernacExtend",
            "52277da31c0fb3ba69185845540b927f87f4afb8"
        ],
        [
            "apply FoddSuc; auto.",
            "VernacExtend",
            "6355d7cb08ff3f29ffb92b942a2859a68ab63e50"
        ],
        [
            "apply FoddFop; auto with arith.",
            "VernacExtend",
            "9977942c61a7c383d37597bb598705de8223e00b"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Theorem FoddPred : forall p : float, Feven p -> Fodd (FPred b radix precision p).",
            "VernacStartTheoremProof",
            "92423032ad71bc89de6fceed8ec0e5427aca39ff"
        ],
        [
            "intros p H'; rewrite FPredFopFSucc; auto with arith.",
            "VernacExtend",
            "4d56b2bd6774faf27f29cbadd552a50781f961da"
        ],
        [
            "apply FoddFop; auto.",
            "VernacExtend",
            "fdea584af8f5c680e5794dad34fbd968356d768e"
        ],
        [
            "apply FevenSuc; auto.",
            "VernacExtend",
            "ec938195f6fd69134ec03edc665290f39240876e"
        ],
        [
            "apply FevenFop; auto.",
            "VernacExtend",
            "52277da31c0fb3ba69185845540b927f87f4afb8"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Definition FNodd (p : float) := Fodd (Fnormalize radix b precision p).",
            "VernacDefinition",
            "6a3ae6b7292e6546aedaa2aaad681510416f7f46"
        ],
        [
            "Definition FNeven (p : float) := Feven (Fnormalize radix b precision p).",
            "VernacDefinition",
            "490e5036198d8dca1eb5c481bba19bae63475b6f"
        ],
        [
            "Theorem FNoddEq : forall f1 f2 : float, Fbounded b f1 -> Fbounded b f2 -> f1 = f2 :>R -> FNodd f1 -> FNodd f2.",
            "VernacStartTheoremProof",
            "a213fc9c23ddaa3c2ec259a65cdb733be76d81a7"
        ],
        [
            "intros f1 f2 H' H'0 H'1 H'2; red in |- *.",
            "VernacExtend",
            "3a2feeecc49af1f8ad4e3e779ebee229b45e3fb6"
        ],
        [
            "rewrite FcanonicUnique with (3 := pGivesBound) (p := Fnormalize radix b precision f2) (q := Fnormalize radix b precision f1); auto with float arith.",
            "VernacExtend",
            "2286459bbe9f2615286c620c9e9ec2a1b3453586"
        ],
        [
            "repeat rewrite FnormalizeCorrect; auto.",
            "VernacExtend",
            "1ef2ab074a009b9c68c82a1455e654578cbb61d1"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Theorem FNevenEq : forall f1 f2 : float, Fbounded b f1 -> Fbounded b f2 -> f1 = f2 :>R -> FNeven f1 -> FNeven f2.",
            "VernacStartTheoremProof",
            "1f9ae0980c12d6dd3833196a23bf847c5e3928d8"
        ],
        [
            "intros f1 f2 H' H'0 H'1 H'2; red in |- *.",
            "VernacExtend",
            "3a2feeecc49af1f8ad4e3e779ebee229b45e3fb6"
        ],
        [
            "rewrite FcanonicUnique with (3 := pGivesBound) (p := Fnormalize radix b precision f2) (q := Fnormalize radix b precision f1); auto with float arith.",
            "VernacExtend",
            "2286459bbe9f2615286c620c9e9ec2a1b3453586"
        ],
        [
            "repeat rewrite FnormalizeCorrect; auto.",
            "VernacExtend",
            "1ef2ab074a009b9c68c82a1455e654578cbb61d1"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Theorem FNevenFop : forall p : float, FNeven p -> FNeven (Fopp p).",
            "VernacStartTheoremProof",
            "55f658e4dfeabbb2f2b499e5990f17ab5e4f52ea"
        ],
        [
            "intros p; unfold FNeven in |- *.",
            "VernacExtend",
            "6c9642b0d248fe4b7dc6e588cd32367837360072"
        ],
        [
            "rewrite Fnormalize_Fopp; auto with arith.",
            "VernacExtend",
            "3c768918164ad5c0565b05c3981d3cccb00cddac"
        ],
        [
            "intros; apply FevenFop; auto.",
            "VernacExtend",
            "cee8cd43f43d6753dd1da62834e93d766fb7c81b"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Theorem FNoddFop : forall p : float, FNodd p -> FNodd (Fopp p).",
            "VernacStartTheoremProof",
            "13e605b818d44c81ce8431fc8619ce4169b09e69"
        ],
        [
            "intros p; unfold FNodd in |- *.",
            "VernacExtend",
            "9855098df44d728a56dacbe1abb58330ed088e9f"
        ],
        [
            "rewrite Fnormalize_Fopp; auto with arith.",
            "VernacExtend",
            "3c768918164ad5c0565b05c3981d3cccb00cddac"
        ],
        [
            "intros; apply FoddFop; auto.",
            "VernacExtend",
            "71b028bbbc91262503252dcea69ebf5df04d4dd5"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Theorem FNoddSuc : forall p : float, Fbounded b p -> FNodd p -> FNeven (FNSucc b radix precision p).",
            "VernacStartTheoremProof",
            "e747e05637288b723fa993aa0dd7566bcc720849"
        ],
        [
            "unfold FNodd, FNeven, FNSucc in |- *.",
            "VernacExtend",
            "ae7989464cd4252107efa4e1f654e97aa6505f45"
        ],
        [
            "intros p H' H'0.",
            "VernacExtend",
            "652f91006d10c9030c57f29a3311eeb49eea5491"
        ],
        [
            "rewrite FcanonicFnormalizeEq; auto with float arith.",
            "VernacExtend",
            "20fcd92016d1d222705359aed510c5669cd37da1"
        ],
        [
            "apply FoddSuc; auto with float arith.",
            "VernacExtend",
            "2e0c003e1fbaac91841a74e306776b172247028e"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Theorem FNevenSuc : forall p : float, Fbounded b p -> FNeven p -> FNodd (FNSucc b radix precision p).",
            "VernacStartTheoremProof",
            "39a377542e1009ac2757196cce1e75197c7708ec"
        ],
        [
            "unfold FNodd, FNeven, FNSucc in |- *.",
            "VernacExtend",
            "ae7989464cd4252107efa4e1f654e97aa6505f45"
        ],
        [
            "intros p H' H'0.",
            "VernacExtend",
            "652f91006d10c9030c57f29a3311eeb49eea5491"
        ],
        [
            "rewrite FcanonicFnormalizeEq; auto with float arith.",
            "VernacExtend",
            "20fcd92016d1d222705359aed510c5669cd37da1"
        ],
        [
            "apply FevenSuc; auto.",
            "VernacExtend",
            "ec938195f6fd69134ec03edc665290f39240876e"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Theorem FNevenPred : forall p : float, Fbounded b p -> FNodd p -> FNeven (FNPred b radix precision p).",
            "VernacStartTheoremProof",
            "69684bfa151cb8eae42f54d4b817b6d4061b46e3"
        ],
        [
            "unfold FNodd, FNeven, FNPred in |- *.",
            "VernacExtend",
            "902510fd48c556eba40e77abc960b61bade67308"
        ],
        [
            "intros p H' H'0.",
            "VernacExtend",
            "652f91006d10c9030c57f29a3311eeb49eea5491"
        ],
        [
            "rewrite FcanonicFnormalizeEq; auto with float arith.",
            "VernacExtend",
            "20fcd92016d1d222705359aed510c5669cd37da1"
        ],
        [
            "apply FevenPred; auto.",
            "VernacExtend",
            "f51fcb7b221e57eb53706e41eb51cd72040ed1e6"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Theorem FNoddPred : forall p : float, Fbounded b p -> FNeven p -> FNodd (FNPred b radix precision p).",
            "VernacStartTheoremProof",
            "b744516d521532440c79afd535eb617c692ab162"
        ],
        [
            "unfold FNodd, FNeven, FNPred in |- *.",
            "VernacExtend",
            "902510fd48c556eba40e77abc960b61bade67308"
        ],
        [
            "intros p H' H'0.",
            "VernacExtend",
            "652f91006d10c9030c57f29a3311eeb49eea5491"
        ],
        [
            "rewrite FcanonicFnormalizeEq; auto with float arith.",
            "VernacExtend",
            "20fcd92016d1d222705359aed510c5669cd37da1"
        ],
        [
            "apply FoddPred; auto.",
            "VernacExtend",
            "be406d3c70543bd11fa579c975132217a99dbf04"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Theorem FNevenOrFNodd : forall p : float, FNeven p \\/ FNodd p.",
            "VernacStartTheoremProof",
            "e75e315f14c7915e05450261f51da5db59dc6635"
        ],
        [
            "intros p; unfold FNeven, FNodd in |- *; apply FevenOrFodd.",
            "VernacExtend",
            "ae07ca2a6d93eae4850826f478916c1c900872bd"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Theorem FnOddNEven : forall n : float, FNodd n -> ~ FNeven n.",
            "VernacStartTheoremProof",
            "7954ad437eafec1bc3b439e9da5353bb9ff5281b"
        ],
        [
            "intros n H'; unfold FNeven, Feven in |- *; apply OddNEven; auto.",
            "VernacExtend",
            "6e03a994fe0cde22deea4673be0732379d6a6513"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Theorem FEvenD : forall p : float, Fbounded b p -> Feven p -> exists q : float, Fbounded b q /\\ p = (2%nat * q)%R :>R.",
            "VernacStartTheoremProof",
            "f079f7ea8a5bb6ee30e76c6f284f66e611bccbbf"
        ],
        [
            "intros p H H0; case H0.",
            "VernacExtend",
            "390f4dd69ad71e23b4c0c42a68bfd4823b21fb75"
        ],
        [
            "intros z Hz; exists (Float z (Fexp p)); split; auto.",
            "VernacExtend",
            "62391657d1efd66f83394b4ed306d935ef935118"
        ],
        [
            "repeat split; simpl in |- *; auto with float.",
            "VernacExtend",
            "3e093824de91ab2af8d090987eafb93df05226c2"
        ],
        [
            "apply Zle_lt_trans with (Zabs (Fnum p)); auto with float zarith.",
            "VernacExtend",
            "db1657492281dee74fd29cd77fb910a21cd804f6"
        ],
        [
            "rewrite Hz; rewrite Zabs_Zmult; replace (Zabs 2 * Zabs z)%Z with (Zabs z + Zabs z)%Z; auto with zarith arith.",
            "VernacExtend",
            "9b63690969192abeb42717430a1457ed22c48a1b"
        ],
        [
            "pattern (Zabs z) at 1 in |- *; replace (Zabs z) with (0 + Zabs z)%Z; auto with zarith.",
            "VernacExtend",
            "308abfdc5ca57f7ed8576ecf885739caf87c44ef"
        ],
        [
            "rewrite (Zabs_eq 2); auto with zarith.",
            "VernacExtend",
            "b224aaff96d1ab06fe5eb0447143d30d6fbe2238"
        ],
        [
            "unfold FtoRradix, FtoR in |- *; simpl in |- *.",
            "VernacExtend",
            "85a3da1582165d92ceb7faef707de88822bccf1a"
        ],
        [
            "rewrite Hz; rewrite Rmult_IZR; simpl in |- *; ring.",
            "VernacExtend",
            "db4348ca0639ff2984874459751df169274d2d15"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Theorem FNEvenD : forall p : float, Fbounded b p -> FNeven p -> exists q : float, Fbounded b q /\\ p = (2%nat * q)%R :>R.",
            "VernacStartTheoremProof",
            "24aed527960c9006b87adcba3212c6676decc16a"
        ],
        [
            "intros p H' H'0; case (FEvenD (Fnormalize radix b precision p)); auto with float zarith arith.",
            "VernacExtend",
            "8723da18ad75b9477b9761d3070af9cdd432139c"
        ],
        [
            "intros x H'1; elim H'1; intros H'2 H'3; clear H'1; exists x; split; auto.",
            "VernacExtend",
            "769a9c5382b97a2e6a54e3e20ec1c2e681dac2ab"
        ],
        [
            "apply sym_eq.",
            "VernacExtend",
            "f01eb728d9ceeac2915c66b52a7b50a0c452e949"
        ],
        [
            "rewrite <- H'3; auto.",
            "VernacExtend",
            "718735a00f38c2b1458039288d34f1182924e3fd"
        ],
        [
            "unfold FtoRradix in |- *; apply FnormalizeCorrect; auto.",
            "VernacExtend",
            "470ee4d615cb96e2c80e7ff477747cec6ab8c852"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "End FOdd.",
            "VernacEndSegment",
            "8eba8fd412807096b0bb74109bac0ea06d076035"
        ],
        [
            "Hint Resolve FevenO FoddSuc FevenSuc FevenFop FoddFop FevenPred FoddPred FNevenFop FNoddFop FNoddSuc FNevenSuc FNevenPred FNoddPred: float.",
            "VernacHints",
            "eef0fc10d1526ce7f9a93233b51d18b3c487bdb9"
        ]
    ],
    "proofs": [
        {
            "name": "OddSEven",
            "line_nb": 14,
            "steps": [
                {
                    "command": [
                        "intros n H'; case H'; intros m H'1; exists (Zsucc m).",
                        "VernacExtend",
                        "1c5fcee546f3c3e6a88c607ea2dae07a5f6b4877"
                    ]
                },
                {
                    "command": [
                        "rewrite H'1; unfold Zsucc in |- *; ring.",
                        "VernacExtend",
                        "7f824db41bae6f4a91ae9d62fd6d7a9b9ad7df7c"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "EvenSOdd",
            "line_nb": 18,
            "steps": [
                {
                    "command": [
                        "intros n H'; case H'; intros m H'1; exists m.",
                        "VernacExtend",
                        "1e75ee53d848c9746af04145d1c9568430c4683a"
                    ]
                },
                {
                    "command": [
                        "rewrite H'1; unfold Zsucc in |- *; ring.",
                        "VernacExtend",
                        "7f824db41bae6f4a91ae9d62fd6d7a9b9ad7df7c"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "OddSEvenInv",
            "line_nb": 23,
            "steps": [
                {
                    "command": [
                        "intros n H'; case H'; intros m H'1; exists m.",
                        "VernacExtend",
                        "1e75ee53d848c9746af04145d1c9568430c4683a"
                    ]
                },
                {
                    "command": [
                        "apply Zsucc_inj; rewrite H'1; (unfold Zsucc in |- *; ring).",
                        "VernacExtend",
                        "52a94c52f315d8406076ac3b4c09243ecd382239"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "EvenSOddInv",
            "line_nb": 27,
            "steps": [
                {
                    "command": [
                        "intros n H'; case H'; intros m H'1; exists (Zpred m).",
                        "VernacExtend",
                        "d5f0cce71c7afcbedef7c7e47f49076364a3b43d"
                    ]
                },
                {
                    "command": [
                        "apply Zsucc_inj; rewrite H'1; (unfold Zsucc, Zpred in |- *; ring).",
                        "VernacExtend",
                        "209518427ac248c65e6414d8327c3cea39b90b5a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "EvenO",
            "line_nb": 31,
            "steps": [
                {
                    "command": [
                        "exists 0%Z; simpl in |- *; auto.",
                        "VernacExtend",
                        "be83ebd962a3ce62fa8e7bd9a3baa112d75bc26f"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "Odd1",
            "line_nb": 35,
            "steps": [
                {
                    "command": [
                        "exists 0%Z; simpl in |- *; auto.",
                        "VernacExtend",
                        "be83ebd962a3ce62fa8e7bd9a3baa112d75bc26f"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "OddOpp",
            "line_nb": 39,
            "steps": [
                {
                    "command": [
                        "intros z H; case H; intros z1 H1; exists (- Zsucc z1)%Z; rewrite H1.",
                        "VernacExtend",
                        "0c31965d16e9101dea409fea04982d47617fc009"
                    ]
                },
                {
                    "command": [
                        "unfold Zsucc in |- *; ring.",
                        "VernacExtend",
                        "969b534f6ecb1c132a53aa0d310df91c06090b72"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "EvenOpp",
            "line_nb": 43,
            "steps": [
                {
                    "command": [
                        "intros z H; case H; intros z1 H1; exists (- z1)%Z; rewrite H1; ring.",
                        "VernacExtend",
                        "d6b01ba16f2c43b79020e92ded56416ac6e25c4c"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "OddEvenDec",
            "line_nb": 47,
            "steps": [
                {
                    "command": [
                        "intros z; case z; simpl in |- *; auto with zarith.",
                        "VernacExtend",
                        "6105546958faee2b3d0396125c1cb88d37b07c55"
                    ]
                },
                {
                    "command": [
                        "intros p; case p; simpl in |- *; auto with zarith.",
                        "VernacExtend",
                        "b2c62ba26e8de93edb5bed60bbb8cc3ddb49d976"
                    ]
                },
                {
                    "command": [
                        "intros p1; left; exists (Zpos p1); rewrite Zplus_comm; simpl in |- *; auto.",
                        "VernacExtend",
                        "63450afd9f2a27fa54de1efd2c3e136763940c93"
                    ]
                },
                {
                    "command": [
                        "intros p1; right; exists (Zpos p1); simpl in |- *; auto.",
                        "VernacExtend",
                        "d4dc5f0ab3ff5089b4d01293b3eb6f8799de5117"
                    ]
                },
                {
                    "command": [
                        "change (forall p : positive, {Odd (- Zpos p)} + {Even (- Zpos p)}) in |- *.",
                        "VernacExtend",
                        "ec6625d1010976cfb4f9a18da96f0156bd9cb432"
                    ]
                },
                {
                    "command": [
                        "intros p; case p; auto with zarith.",
                        "VernacExtend",
                        "c87489245fa0c2f9939daa87b6501630ffbc6b5a"
                    ]
                },
                {
                    "command": [
                        "intros p1; left; apply OddOpp; exists (Zpos p1); rewrite Zplus_comm; simpl in |- *; auto.",
                        "VernacExtend",
                        "084d260d90ace6cce0213fb9d3005c7ee4402b79"
                    ]
                },
                {
                    "command": [
                        "intros p1; right; apply EvenOpp; exists (Zpos p1); simpl in |- *; auto.",
                        "VernacExtend",
                        "90e9b081d536a03005c9473f560ee4d9195aedec"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "OddNEven",
            "line_nb": 57,
            "steps": [
                {
                    "command": [
                        "intros n H1; red in |- *; intros H2; case H1; case H2; intros z1 Hz1 z2 Hz2.",
                        "VernacExtend",
                        "21e797825c749d7fceb31d301cc79b1479614557"
                    ]
                },
                {
                    "command": [
                        "absurd (n = n); auto.",
                        "VernacExtend",
                        "1d6c4f09a1e139d14b029ffb6d2a34f92497d574"
                    ]
                },
                {
                    "command": [
                        "pattern n at 1 in |- *; rewrite Hz1; rewrite Hz2; repeat rewrite (fun x => Zplus_comm x 1).",
                        "VernacExtend",
                        "0842fefa5c4b243ca7be81b6710dbf505ed661b2"
                    ]
                },
                {
                    "command": [
                        "case z1; case z2; simpl in |- *; try (intros; red in |- *; intros; discriminate).",
                        "VernacExtend",
                        "a59bc597ff430d78d48dd9794c6eb81930a623ff"
                    ]
                },
                {
                    "command": [
                        "intros p p0; case p; simpl in |- *; try (intros; red in |- *; intros; discriminate).",
                        "VernacExtend",
                        "112daaff7410cd1353338a11a0cc762974a3e749"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "EvenNOdd",
            "line_nb": 64,
            "steps": [
                {
                    "command": [
                        "intros n H1; red in |- *; intros H2; case H1; case H2; intros z1 Hz1 z2 Hz2.",
                        "VernacExtend",
                        "21e797825c749d7fceb31d301cc79b1479614557"
                    ]
                },
                {
                    "command": [
                        "absurd (n = n); auto.",
                        "VernacExtend",
                        "1d6c4f09a1e139d14b029ffb6d2a34f92497d574"
                    ]
                },
                {
                    "command": [
                        "pattern n at 1 in |- *; rewrite Hz1; rewrite Hz2; repeat rewrite (fun x => Zplus_comm x 1).",
                        "VernacExtend",
                        "0842fefa5c4b243ca7be81b6710dbf505ed661b2"
                    ]
                },
                {
                    "command": [
                        "case z1; case z2; simpl in |- *; try (intros; red in |- *; intros; discriminate).",
                        "VernacExtend",
                        "a59bc597ff430d78d48dd9794c6eb81930a623ff"
                    ]
                },
                {
                    "command": [
                        "intros p p0; case p0; simpl in |- *; try (intros; red in |- *; intros; discriminate).",
                        "VernacExtend",
                        "89eefb5f3e1cbb3fa2e815d99c220e7da7db54c6"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "EvenPlus1",
            "line_nb": 72,
            "steps": [
                {
                    "command": [
                        "intros n m H H0; case H; case H0; intros z1 Hz1 z2 Hz2.",
                        "VernacExtend",
                        "6d6a747ec53103f8025ad232856396414f6ae504"
                    ]
                },
                {
                    "command": [
                        "exists (z2 + z1)%Z; try rewrite Hz1; try rewrite Hz2; ring.",
                        "VernacExtend",
                        "1ba6285922e306c086eaaf10514b50840eb70581"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "EvenPlus2",
            "line_nb": 76,
            "steps": [
                {
                    "command": [
                        "intros n m H H0; case H; case H0; intros z1 Hz1 z2 Hz2.",
                        "VernacExtend",
                        "6d6a747ec53103f8025ad232856396414f6ae504"
                    ]
                },
                {
                    "command": [
                        "exists (z2 + z1 + 1)%Z; try rewrite Hz1; try rewrite Hz2; ring.",
                        "VernacExtend",
                        "dd13b33b2e697a3a677abb8d7c955626c90cb2dc"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "OddPlus1",
            "line_nb": 80,
            "steps": [
                {
                    "command": [
                        "intros n m H H0; case H; case H0; intros z1 Hz1 z2 Hz2.",
                        "VernacExtend",
                        "6d6a747ec53103f8025ad232856396414f6ae504"
                    ]
                },
                {
                    "command": [
                        "exists (z2 + z1)%Z; try rewrite Hz1; try rewrite Hz2; ring.",
                        "VernacExtend",
                        "1ba6285922e306c086eaaf10514b50840eb70581"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "OddPlus2",
            "line_nb": 84,
            "steps": [
                {
                    "command": [
                        "intros n m H H0; case H; case H0; intros z1 Hz1 z2 Hz2.",
                        "VernacExtend",
                        "6d6a747ec53103f8025ad232856396414f6ae504"
                    ]
                },
                {
                    "command": [
                        "exists (z2 + z1)%Z; try rewrite Hz1; try rewrite Hz2; ring.",
                        "VernacExtend",
                        "1ba6285922e306c086eaaf10514b50840eb70581"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "EvenPlusInv1",
            "line_nb": 89,
            "steps": [
                {
                    "command": [
                        "intros n m H H0; replace m with (n + m + - n)%Z; auto with zarith.",
                        "VernacExtend",
                        "98a355e4e7da127b0d69217528b6dd519ea8fbc9"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "EvenPlusInv2",
            "line_nb": 92,
            "steps": [
                {
                    "command": [
                        "intros n m H H0; replace m with (n + m + - n)%Z; auto with zarith.",
                        "VernacExtend",
                        "98a355e4e7da127b0d69217528b6dd519ea8fbc9"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "OddPlusInv1",
            "line_nb": 95,
            "steps": [
                {
                    "command": [
                        "intros n m H H0; replace n with (n + m + - m)%Z; auto with zarith.",
                        "VernacExtend",
                        "fff7943bf3ddcf4d6783a6f089ff7c622b9e08bd"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "OddPlusInv2",
            "line_nb": 98,
            "steps": [
                {
                    "command": [
                        "intros n m H H0; replace n with (n + m + - m)%Z; auto with zarith.",
                        "VernacExtend",
                        "fff7943bf3ddcf4d6783a6f089ff7c622b9e08bd"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "EvenMult1",
            "line_nb": 101,
            "steps": [
                {
                    "command": [
                        "intros n m H; case H; intros z1 Hz1; exists (z1 * m)%Z; rewrite Hz1; ring.",
                        "VernacExtend",
                        "7d88df3252e86d96f4ac3ff70db26e8f2e36504b"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "EvenMult2",
            "line_nb": 104,
            "steps": [
                {
                    "command": [
                        "intros n m H; case H; intros z1 Hz1; exists (z1 * n)%Z; rewrite Hz1; ring.",
                        "VernacExtend",
                        "9b0f4a239c0ce7b47efbdac909113c22669cf2bc"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "OddMult",
            "line_nb": 108,
            "steps": [
                {
                    "command": [
                        "intros n m H1 H2; case H1; case H2; intros z1 Hz1 z2 Hz2; exists (2 * z1 * z2 + z1 + z2)%Z; rewrite Hz1; rewrite Hz2; ring.",
                        "VernacExtend",
                        "359cd416918a476a2b0b4ee24cc87e2e0a1054bb"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "EvenMultInv",
            "line_nb": 112,
            "steps": [
                {
                    "command": [
                        "intros n m H H0; case (OddEvenDec m); auto; intros Z1.",
                        "VernacExtend",
                        "9cfb6fc10cbc1196cd60e07c80b33d760d2caddd"
                    ]
                },
                {
                    "command": [
                        "Contradict H; auto with zarith.",
                        "VernacExtend",
                        "a7763395aff9474ff53966c352957a2132d866e9"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "OddMultInv",
            "line_nb": 116,
            "steps": [
                {
                    "command": [
                        "intros n m H; case (OddEvenDec n); auto; intros Z1.",
                        "VernacExtend",
                        "70fac7bad11d24b69ff569bf03749e7a44896cb5"
                    ]
                },
                {
                    "command": [
                        "Contradict H; auto with zarith.",
                        "VernacExtend",
                        "a7763395aff9474ff53966c352957a2132d866e9"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "EvenExp",
            "line_nb": 120,
            "steps": [
                {
                    "command": [
                        "intros n m; elim m.",
                        "VernacExtend",
                        "d43cf6576371f7c2881f4528b29efd0d97d5201c"
                    ]
                },
                {
                    "command": [
                        "rewrite Zpower_nat_1; simpl in |- *; auto with zarith.",
                        "VernacExtend",
                        "6f9941bacbeb4d50088b3f79ae9a4c5b728a7846"
                    ]
                },
                {
                    "command": [
                        "intros n0 H H0; replace (S (S n0)) with (1 + S n0); auto with arith.",
                        "VernacExtend",
                        "6a948493dfbf25a5afb791cd3a0996381559f18c"
                    ]
                },
                {
                    "command": [
                        "rewrite Zpower_nat_is_exp; rewrite Zpower_nat_1; simpl in |- *; auto with zarith.",
                        "VernacExtend",
                        "1ce21acfab58d1e06ba96fd6a22713fb279739ee"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "OddExp",
            "line_nb": 126,
            "steps": [
                {
                    "command": [
                        "intros n m; elim m; simpl in |- *.",
                        "VernacExtend",
                        "6041e23fb872b3cb3e948eb5de1abb321547c687"
                    ]
                },
                {
                    "command": [
                        "auto with zarith.",
                        "VernacExtend",
                        "23f42fd3236dcece4a40b3a666dce57fea69a9c0"
                    ]
                },
                {
                    "command": [
                        "intros n0 H H0; replace (S n0) with (1 + n0); auto with arith.",
                        "VernacExtend",
                        "5a0218710967a45ed5598bfcfcab524dada989b7"
                    ]
                },
                {
                    "command": [
                        "auto with zarith.",
                        "VernacExtend",
                        "23f42fd3236dcece4a40b3a666dce57fea69a9c0"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "FevenO",
            "line_nb": 135,
            "steps": [
                {
                    "command": [
                        "intros p H'; red in |- *; rewrite H'; simpl in |- *; auto with zarith.",
                        "VernacExtend",
                        "0e262c71e4b8316f796b00d75da2c5fc5415bf59"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "FevenOrFodd",
            "line_nb": 138,
            "steps": [
                {
                    "command": [
                        "intros p; case (OddEvenDec (Fnum p)); auto.",
                        "VernacExtend",
                        "ac1ccb8f83207aac69d4c2f4bc11036d12d7816d"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "FevenSucProp",
            "line_nb": 141,
            "steps": [
                {
                    "command": [
                        "intros p; unfold FSucc, Fodd, Feven in |- *.",
                        "VernacExtend",
                        "019885ef96bcc60d76342b498549ed9dd5c8222a"
                    ]
                },
                {
                    "command": [
                        "generalize (Z_eq_bool_correct (Fnum p) (pPred (vNum b))); case (Z_eq_bool (Fnum p) (pPred (vNum b))); intros H'1.",
                        "VernacExtend",
                        "6986b34a02203b0886d9c0c292bdf0ba91aa43f7"
                    ]
                },
                {
                    "command": [
                        "rewrite H'1; simpl in |- *; auto.",
                        "VernacExtend",
                        "3c3e7c5dca390297a39533777ae7c997c3d97758"
                    ]
                },
                {
                    "command": [
                        "unfold pPred in |- *; rewrite pGivesBound; unfold nNormMin in |- *.",
                        "VernacExtend",
                        "e384d70db99f60383ab3819119e20f71ccd9085a"
                    ]
                },
                {
                    "command": [
                        "case (OddEvenDec radix); auto with zarith.",
                        "VernacExtend",
                        "fce5ad72f668048a2a978cf740627e12e41eb4d3"
                    ]
                },
                {
                    "command": [
                        "intros H'; split; intros H'0; auto with zarith.",
                        "VernacExtend",
                        "796661ee5e948156261eb17b51ea351104a1867b"
                    ]
                },
                {
                    "command": [
                        "apply EvenMultInv with (n := radix); auto.",
                        "VernacExtend",
                        "6cfee9b1fc2a76b5ab3e1b73bc60c036ae136e2e"
                    ]
                },
                {
                    "command": [
                        "pattern radix at 1 in |- *; rewrite <- Zpower_nat_1; rewrite <- Zpower_nat_is_exp.",
                        "VernacExtend",
                        "535cc0233caa4c4aa2a70c668d7e0009e7aea989"
                    ]
                },
                {
                    "command": [
                        "replace (1 + pred precision) with precision; [ idtac | inversion precisionGreaterThanOne; auto ].",
                        "VernacExtend",
                        "e42e3f2f3adcbd1dcc0ceafafee8931cd52637bc"
                    ]
                },
                {
                    "command": [
                        "rewrite (Zsucc_pred (Zpower_nat radix precision)); auto with zarith.",
                        "VernacExtend",
                        "49f1d2008658184ec229041daf17bfb0f9698e37"
                    ]
                },
                {
                    "command": [
                        "intros H'; split; intros H'0; auto with zarith.",
                        "VernacExtend",
                        "796661ee5e948156261eb17b51ea351104a1867b"
                    ]
                },
                {
                    "command": [
                        "replace (pred precision) with (S (pred (pred precision))); auto with zarith.",
                        "VernacExtend",
                        "dc7145d8f55b453330d6134b4d683da5478141fd"
                    ]
                },
                {
                    "command": [
                        "Contradict H'0; apply OddNEven.",
                        "VernacExtend",
                        "6c03b5014f3bafe2bf854336ab1b85b8ed9ab89b"
                    ]
                },
                {
                    "command": [
                        "replace (Zpred (Zpower_nat radix precision)) with (Zpower_nat radix precision + - (1))%Z; [ idtac | unfold Zpred in |- *; simpl in |- *; auto ].",
                        "VernacExtend",
                        "909b45ecd5405bc60a01577131f0a4b7a583ef1e"
                    ]
                },
                {
                    "command": [
                        "replace precision with (S (pred precision)); [ auto with zarith | inversion precisionGreaterThanOne; auto ].",
                        "VernacExtend",
                        "38c50cd4628dde42ef0f8a49a74534a337c94f89"
                    ]
                },
                {
                    "command": [
                        "generalize (Z_eq_bool_correct (Fnum p) (- nNormMin radix precision)); case (Z_eq_bool (Fnum p) (- nNormMin radix precision)); intros H'2.",
                        "VernacExtend",
                        "22997bf8d86d9d1a56b927a9d1f1f93085ce9737"
                    ]
                },
                {
                    "command": [
                        "generalize (Z_eq_bool_correct (Fexp p) (- dExp b)); case (Z_eq_bool (Fexp p) (- dExp b)); intros H'3.",
                        "VernacExtend",
                        "e385c221fba26108d90c9922a9f10837e341becd"
                    ]
                },
                {
                    "command": [
                        "simpl in |- *; auto with zarith.",
                        "VernacExtend",
                        "61d3cdc6299cf8abf87703c074ca4503f0f27a12"
                    ]
                },
                {
                    "command": [
                        "simpl in |- *; auto with zarith.",
                        "VernacExtend",
                        "61d3cdc6299cf8abf87703c074ca4503f0f27a12"
                    ]
                },
                {
                    "command": [
                        "rewrite H'2; unfold pPred, nNormMin in |- *; rewrite pGivesBound.",
                        "VernacExtend",
                        "6ddb05b195c5a1f32dfe1862b53eccf972ea81f5"
                    ]
                },
                {
                    "command": [
                        "case (OddEvenDec radix); auto with zarith.",
                        "VernacExtend",
                        "fce5ad72f668048a2a978cf740627e12e41eb4d3"
                    ]
                },
                {
                    "command": [
                        "intros H'; split; intros H'0; auto with zarith.",
                        "VernacExtend",
                        "796661ee5e948156261eb17b51ea351104a1867b"
                    ]
                },
                {
                    "command": [
                        "apply EvenOpp; apply OddSEvenInv; rewrite <- Zsucc_pred; auto with zarith.",
                        "VernacExtend",
                        "6a3f5d9842299df1233cfcc980cd57084098dc7c"
                    ]
                },
                {
                    "command": [
                        "Contradict H'0; replace precision with (S (pred precision)); [ auto with zarith | inversion precisionGreaterThanOne; auto ].",
                        "VernacExtend",
                        "7eb2320933ab8f282d2b1aba414522db758d28f8"
                    ]
                },
                {
                    "command": [
                        "intros H'; split; intros H'0; auto with zarith.",
                        "VernacExtend",
                        "796661ee5e948156261eb17b51ea351104a1867b"
                    ]
                },
                {
                    "command": [
                        "Contradict H'0; replace (pred precision) with (S (pred (pred precision))); [ auto with zarith | auto with zarith ].",
                        "VernacExtend",
                        "e3bcb757b0799e85d724f7dd39c65324447a928e"
                    ]
                },
                {
                    "command": [
                        "replace precision with (S (pred precision)); [ auto with zarith | inversion precisionGreaterThanOne; auto ].",
                        "VernacExtend",
                        "38c50cd4628dde42ef0f8a49a74534a337c94f89"
                    ]
                },
                {
                    "command": [
                        "apply OddOpp; apply EvenSOddInv; rewrite <- Zsucc_pred; auto with zarith.",
                        "VernacExtend",
                        "6f5845ede9a1ed8971dad32c8d273b4112e4bdb6"
                    ]
                },
                {
                    "command": [
                        "simpl in |- *; auto with zarith.",
                        "VernacExtend",
                        "61d3cdc6299cf8abf87703c074ca4503f0f27a12"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "FoddSuc",
            "line_nb": 172,
            "steps": [
                {
                    "command": [
                        "intros p H'; case (FevenSucProp p); auto.",
                        "VernacExtend",
                        "b24a0c2dcb1524ff491e7367eeb130caa2f40940"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "FevenSuc",
            "line_nb": 175,
            "steps": [
                {
                    "command": [
                        "intros p H'; case (FevenSucProp p); auto.",
                        "VernacExtend",
                        "b24a0c2dcb1524ff491e7367eeb130caa2f40940"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "FevenFop",
            "line_nb": 178,
            "steps": [
                {
                    "command": [
                        "intros p; unfold Feven, Fopp in |- *; simpl in |- *; auto with zarith.",
                        "VernacExtend",
                        "0f88d80c74663707182e0cca25ee40285f548d64"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "FoddFop",
            "line_nb": 181,
            "steps": [
                {
                    "command": [
                        "intros p; unfold Fodd, Fopp in |- *; simpl in |- *; auto with zarith.",
                        "VernacExtend",
                        "b8ee103ae133d2882ba9a08d7e79b26cce2c103d"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "FevenPred",
            "line_nb": 184,
            "steps": [
                {
                    "command": [
                        "intros p H'; rewrite FPredFopFSucc; auto with arith.",
                        "VernacExtend",
                        "4d56b2bd6774faf27f29cbadd552a50781f961da"
                    ]
                },
                {
                    "command": [
                        "apply FevenFop; auto.",
                        "VernacExtend",
                        "52277da31c0fb3ba69185845540b927f87f4afb8"
                    ]
                },
                {
                    "command": [
                        "apply FoddSuc; auto.",
                        "VernacExtend",
                        "6355d7cb08ff3f29ffb92b942a2859a68ab63e50"
                    ]
                },
                {
                    "command": [
                        "apply FoddFop; auto with arith.",
                        "VernacExtend",
                        "9977942c61a7c383d37597bb598705de8223e00b"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "FoddPred",
            "line_nb": 190,
            "steps": [
                {
                    "command": [
                        "intros p H'; rewrite FPredFopFSucc; auto with arith.",
                        "VernacExtend",
                        "4d56b2bd6774faf27f29cbadd552a50781f961da"
                    ]
                },
                {
                    "command": [
                        "apply FoddFop; auto.",
                        "VernacExtend",
                        "fdea584af8f5c680e5794dad34fbd968356d768e"
                    ]
                },
                {
                    "command": [
                        "apply FevenSuc; auto.",
                        "VernacExtend",
                        "ec938195f6fd69134ec03edc665290f39240876e"
                    ]
                },
                {
                    "command": [
                        "apply FevenFop; auto.",
                        "VernacExtend",
                        "52277da31c0fb3ba69185845540b927f87f4afb8"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "FNoddEq",
            "line_nb": 198,
            "steps": [
                {
                    "command": [
                        "intros f1 f2 H' H'0 H'1 H'2; red in |- *.",
                        "VernacExtend",
                        "3a2feeecc49af1f8ad4e3e779ebee229b45e3fb6"
                    ]
                },
                {
                    "command": [
                        "rewrite FcanonicUnique with (3 := pGivesBound) (p := Fnormalize radix b precision f2) (q := Fnormalize radix b precision f1); auto with float arith.",
                        "VernacExtend",
                        "2286459bbe9f2615286c620c9e9ec2a1b3453586"
                    ]
                },
                {
                    "command": [
                        "repeat rewrite FnormalizeCorrect; auto.",
                        "VernacExtend",
                        "1ef2ab074a009b9c68c82a1455e654578cbb61d1"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "FNevenEq",
            "line_nb": 203,
            "steps": [
                {
                    "command": [
                        "intros f1 f2 H' H'0 H'1 H'2; red in |- *.",
                        "VernacExtend",
                        "3a2feeecc49af1f8ad4e3e779ebee229b45e3fb6"
                    ]
                },
                {
                    "command": [
                        "rewrite FcanonicUnique with (3 := pGivesBound) (p := Fnormalize radix b precision f2) (q := Fnormalize radix b precision f1); auto with float arith.",
                        "VernacExtend",
                        "2286459bbe9f2615286c620c9e9ec2a1b3453586"
                    ]
                },
                {
                    "command": [
                        "repeat rewrite FnormalizeCorrect; auto.",
                        "VernacExtend",
                        "1ef2ab074a009b9c68c82a1455e654578cbb61d1"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "FNevenFop",
            "line_nb": 208,
            "steps": [
                {
                    "command": [
                        "intros p; unfold FNeven in |- *.",
                        "VernacExtend",
                        "6c9642b0d248fe4b7dc6e588cd32367837360072"
                    ]
                },
                {
                    "command": [
                        "rewrite Fnormalize_Fopp; auto with arith.",
                        "VernacExtend",
                        "3c768918164ad5c0565b05c3981d3cccb00cddac"
                    ]
                },
                {
                    "command": [
                        "intros; apply FevenFop; auto.",
                        "VernacExtend",
                        "cee8cd43f43d6753dd1da62834e93d766fb7c81b"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "FNoddFop",
            "line_nb": 213,
            "steps": [
                {
                    "command": [
                        "intros p; unfold FNodd in |- *.",
                        "VernacExtend",
                        "9855098df44d728a56dacbe1abb58330ed088e9f"
                    ]
                },
                {
                    "command": [
                        "rewrite Fnormalize_Fopp; auto with arith.",
                        "VernacExtend",
                        "3c768918164ad5c0565b05c3981d3cccb00cddac"
                    ]
                },
                {
                    "command": [
                        "intros; apply FoddFop; auto.",
                        "VernacExtend",
                        "71b028bbbc91262503252dcea69ebf5df04d4dd5"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "FNoddSuc",
            "line_nb": 218,
            "steps": [
                {
                    "command": [
                        "unfold FNodd, FNeven, FNSucc in |- *.",
                        "VernacExtend",
                        "ae7989464cd4252107efa4e1f654e97aa6505f45"
                    ]
                },
                {
                    "command": [
                        "intros p H' H'0.",
                        "VernacExtend",
                        "652f91006d10c9030c57f29a3311eeb49eea5491"
                    ]
                },
                {
                    "command": [
                        "rewrite FcanonicFnormalizeEq; auto with float arith.",
                        "VernacExtend",
                        "20fcd92016d1d222705359aed510c5669cd37da1"
                    ]
                },
                {
                    "command": [
                        "apply FoddSuc; auto with float arith.",
                        "VernacExtend",
                        "2e0c003e1fbaac91841a74e306776b172247028e"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "FNevenSuc",
            "line_nb": 224,
            "steps": [
                {
                    "command": [
                        "unfold FNodd, FNeven, FNSucc in |- *.",
                        "VernacExtend",
                        "ae7989464cd4252107efa4e1f654e97aa6505f45"
                    ]
                },
                {
                    "command": [
                        "intros p H' H'0.",
                        "VernacExtend",
                        "652f91006d10c9030c57f29a3311eeb49eea5491"
                    ]
                },
                {
                    "command": [
                        "rewrite FcanonicFnormalizeEq; auto with float arith.",
                        "VernacExtend",
                        "20fcd92016d1d222705359aed510c5669cd37da1"
                    ]
                },
                {
                    "command": [
                        "apply FevenSuc; auto.",
                        "VernacExtend",
                        "ec938195f6fd69134ec03edc665290f39240876e"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "FNevenPred",
            "line_nb": 230,
            "steps": [
                {
                    "command": [
                        "unfold FNodd, FNeven, FNPred in |- *.",
                        "VernacExtend",
                        "902510fd48c556eba40e77abc960b61bade67308"
                    ]
                },
                {
                    "command": [
                        "intros p H' H'0.",
                        "VernacExtend",
                        "652f91006d10c9030c57f29a3311eeb49eea5491"
                    ]
                },
                {
                    "command": [
                        "rewrite FcanonicFnormalizeEq; auto with float arith.",
                        "VernacExtend",
                        "20fcd92016d1d222705359aed510c5669cd37da1"
                    ]
                },
                {
                    "command": [
                        "apply FevenPred; auto.",
                        "VernacExtend",
                        "f51fcb7b221e57eb53706e41eb51cd72040ed1e6"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "FNoddPred",
            "line_nb": 236,
            "steps": [
                {
                    "command": [
                        "unfold FNodd, FNeven, FNPred in |- *.",
                        "VernacExtend",
                        "902510fd48c556eba40e77abc960b61bade67308"
                    ]
                },
                {
                    "command": [
                        "intros p H' H'0.",
                        "VernacExtend",
                        "652f91006d10c9030c57f29a3311eeb49eea5491"
                    ]
                },
                {
                    "command": [
                        "rewrite FcanonicFnormalizeEq; auto with float arith.",
                        "VernacExtend",
                        "20fcd92016d1d222705359aed510c5669cd37da1"
                    ]
                },
                {
                    "command": [
                        "apply FoddPred; auto.",
                        "VernacExtend",
                        "be406d3c70543bd11fa579c975132217a99dbf04"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "FNevenOrFNodd",
            "line_nb": 242,
            "steps": [
                {
                    "command": [
                        "intros p; unfold FNeven, FNodd in |- *; apply FevenOrFodd.",
                        "VernacExtend",
                        "ae07ca2a6d93eae4850826f478916c1c900872bd"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "FnOddNEven",
            "line_nb": 245,
            "steps": [
                {
                    "command": [
                        "intros n H'; unfold FNeven, Feven in |- *; apply OddNEven; auto.",
                        "VernacExtend",
                        "6e03a994fe0cde22deea4673be0732379d6a6513"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "FEvenD",
            "line_nb": 248,
            "steps": [
                {
                    "command": [
                        "intros p H H0; case H0.",
                        "VernacExtend",
                        "390f4dd69ad71e23b4c0c42a68bfd4823b21fb75"
                    ]
                },
                {
                    "command": [
                        "intros z Hz; exists (Float z (Fexp p)); split; auto.",
                        "VernacExtend",
                        "62391657d1efd66f83394b4ed306d935ef935118"
                    ]
                },
                {
                    "command": [
                        "repeat split; simpl in |- *; auto with float.",
                        "VernacExtend",
                        "3e093824de91ab2af8d090987eafb93df05226c2"
                    ]
                },
                {
                    "command": [
                        "apply Zle_lt_trans with (Zabs (Fnum p)); auto with float zarith.",
                        "VernacExtend",
                        "db1657492281dee74fd29cd77fb910a21cd804f6"
                    ]
                },
                {
                    "command": [
                        "rewrite Hz; rewrite Zabs_Zmult; replace (Zabs 2 * Zabs z)%Z with (Zabs z + Zabs z)%Z; auto with zarith arith.",
                        "VernacExtend",
                        "9b63690969192abeb42717430a1457ed22c48a1b"
                    ]
                },
                {
                    "command": [
                        "pattern (Zabs z) at 1 in |- *; replace (Zabs z) with (0 + Zabs z)%Z; auto with zarith.",
                        "VernacExtend",
                        "308abfdc5ca57f7ed8576ecf885739caf87c44ef"
                    ]
                },
                {
                    "command": [
                        "rewrite (Zabs_eq 2); auto with zarith.",
                        "VernacExtend",
                        "b224aaff96d1ab06fe5eb0447143d30d6fbe2238"
                    ]
                },
                {
                    "command": [
                        "unfold FtoRradix, FtoR in |- *; simpl in |- *.",
                        "VernacExtend",
                        "85a3da1582165d92ceb7faef707de88822bccf1a"
                    ]
                },
                {
                    "command": [
                        "rewrite Hz; rewrite Rmult_IZR; simpl in |- *; ring.",
                        "VernacExtend",
                        "db4348ca0639ff2984874459751df169274d2d15"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "FNEvenD",
            "line_nb": 259,
            "steps": [
                {
                    "command": [
                        "intros p H' H'0; case (FEvenD (Fnormalize radix b precision p)); auto with float zarith arith.",
                        "VernacExtend",
                        "8723da18ad75b9477b9761d3070af9cdd432139c"
                    ]
                },
                {
                    "command": [
                        "intros x H'1; elim H'1; intros H'2 H'3; clear H'1; exists x; split; auto.",
                        "VernacExtend",
                        "769a9c5382b97a2e6a54e3e20ec1c2e681dac2ab"
                    ]
                },
                {
                    "command": [
                        "apply sym_eq.",
                        "VernacExtend",
                        "f01eb728d9ceeac2915c66b52a7b50a0c452e949"
                    ]
                },
                {
                    "command": [
                        "rewrite <- H'3; auto.",
                        "VernacExtend",
                        "718735a00f38c2b1458039288d34f1182924e3fd"
                    ]
                },
                {
                    "command": [
                        "unfold FtoRradix in |- *; apply FnormalizeCorrect; auto.",
                        "VernacExtend",
                        "470ee4d615cb96e2c80e7ff477747cec6ab8c852"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        }
    ]
}