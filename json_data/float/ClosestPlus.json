{
    "filename": "ClosestPlus.v",
    "coq_project": "float",
    "vernac_cmds": [
        [
            "Require Export FroundPlus.",
            "VernacRequire",
            "539ee6ed86e9f53923cdfd7e5686acb2bcd2d5fc"
        ],
        [
            "Require Export ClosestProp.",
            "VernacRequire",
            "8db9b3b5e170cac2a3031d489ceaf732362e27ae"
        ],
        [
            "Section ClosestP.",
            "VernacBeginSection",
            "f9c8152e84a4aa3e9f61c12988999f8085669f16"
        ],
        [
            "Variable b : Fbound.",
            "VernacAssumption",
            "17a11c003f49f819b8cb809f61b140702916486d"
        ],
        [
            "Variable radix : Z.",
            "VernacAssumption",
            "2349b77d134e0c9bb013a8bdca0020ca16fc023b"
        ],
        [
            "Variable precision : nat.",
            "VernacAssumption",
            "2235bc83b7ebf4cbe373b5fa3b4f3c643d454130"
        ],
        [
            "Let FtoRradix := FtoR radix.",
            "VernacDefinition",
            "5aa29a9595c6e9e03b28c6d232299552ec761ad7"
        ],
        [
            "Local Coercion FtoRradix : float >-> R.",
            "VernacCoercion",
            "cec6b845059d434f72dda1a67638af64e1fb0628"
        ],
        [
            "Hypothesis radixMoreThanOne : (1 < radix)%Z.",
            "VernacAssumption",
            "f4d3774b2275f4c4c3af941091d4d99f9a2129aa"
        ],
        [
            "Let radixMoreThanZERO := Zlt_1_O _ (Zlt_le_weak _ _ radixMoreThanOne).",
            "VernacDefinition",
            "b73ccff345a4fc730c8134dcd05adb7f1928fae7"
        ],
        [
            "Hint Resolve radixMoreThanZERO: zarith.",
            "VernacHints",
            "5a4a320eb610749621ef38850390d7141dc0d330"
        ],
        [
            "Hypothesis precisionGreaterThanOne : 1 < precision.",
            "VernacAssumption",
            "9f627fb385d8fe283ac9563556925f37be8e5402"
        ],
        [
            "Hypothesis pGivesBound : Zpos (vNum b) = Zpower_nat radix precision.",
            "VernacAssumption",
            "d558f967d87d2a42d14158ac115b10c6f5358430"
        ],
        [
            "Theorem errorBoundedPlusLe : forall p q pq : float, Fbounded b p -> Fbounded b q -> (Fexp p <= Fexp q)%Z -> Closest b radix (p + q) pq -> exists error : float, error = Rabs (p + q - pq) :>R /\\ Fbounded b error /\\ Fexp error = Zmin (Fexp p) (Fexp q).",
            "VernacStartTheoremProof",
            "18fa6433059597efc8fcfa8245d640b0c1030b99"
        ],
        [
            "intros p q pq H' H'0 H'1 H'2.",
            "VernacExtend",
            "8909ba2de4e52fb8d4a774c709173e613c273972"
        ],
        [
            "cut (ex (fun m : Z => pq = Float m (Fexp (Fplus radix p q)) :>R)).",
            "VernacExtend",
            "fd708b33001825de1bd6f891a4b8089748a7372b"
        ],
        [
            "2: unfold FtoRradix in |- *; apply RoundedModeRep with (b := b) (precision := precision) (P := Closest b radix); auto.",
            "VernacExtend",
            "af61139de216cb7ab53db3353622f5db5314f4e8"
        ],
        [
            "2: apply ClosestRoundedModeP with (precision := precision); auto.",
            "VernacExtend",
            "62e23def5bb2bfa5adccd2c929e9e979b2503071"
        ],
        [
            "2: rewrite (Fplus_correct radix); auto with arith.",
            "VernacExtend",
            "c9bc164224aa12474a6b2e01ff5fd4a8562111b6"
        ],
        [
            "intros H'3; elim H'3; intros m E; clear H'3.",
            "VernacExtend",
            "34628fe794cbc9bc93b7a375593df84eba2f2382"
        ],
        [
            "exists (Fabs (Fminus radix q (Fminus radix (Float m (Fexp (Fplus radix p q))) p))).",
            "VernacExtend",
            "4e84a649f87ccbd977a5445b07e5b4a20bfb3399"
        ],
        [
            "cut (forall A B : Prop, A -> (A -> B) -> A /\\ B); [ intros tmp; apply tmp; clear tmp | auto ].",
            "VernacExtend",
            "06cc481d44b023baf394c73d99c39ec92cef04dc"
        ],
        [
            "unfold FtoRradix in |- *; rewrite Fabs_correct; auto with arith.",
            "VernacExtend",
            "ec34fb1a5fa01c986834f8b0740ff0d1cc1585a8"
        ],
        [
            "cut (forall p q : R, p = q -> Rabs p = Rabs q); [ intros tmp; apply tmp; clear tmp | intros p' q' H; rewrite H; auto ].",
            "VernacExtend",
            "abc2c3573ac680a3554e4896ca91b6ffd0f63e56"
        ],
        [
            "unfold FtoRradix in |- *; repeat rewrite Fminus_correct; auto with arith.",
            "VernacExtend",
            "d5dfd2e0ae303bdded364d361a863624c76c0322"
        ],
        [
            "unfold FtoRradix in E; rewrite E; auto.",
            "VernacExtend",
            "8e9b4f3f68413b7c2ffec745c8f4d8fd676411bc"
        ],
        [
            "ring.",
            "VernacExtend",
            "baadd9fc4c175005af409bb466fcea9fab25b4e6"
        ],
        [
            "intros H'4.",
            "VernacExtend",
            "0fbd267321a720fb2cdbde6d88e221e72d79db75"
        ],
        [
            "cut (Rabs (pq - (p + q)) <= Rabs (q - (p + q)))%R.",
            "VernacExtend",
            "395790f6e9fa7f464154c20d5580b40b15a8b5c1"
        ],
        [
            "2: elim H'2; auto.",
            "VernacExtend",
            "6c3f93298429d416886fd11226b91dbe40c2e7b8"
        ],
        [
            "replace (q - (p + q))%R with (- FtoRradix p)%R.",
            "VernacExtend",
            "3e35e5419795d9eca9afe7c966f8e425327cfe74"
        ],
        [
            "2: ring.",
            "VernacExtend",
            "9b21521f19f7d04658b7219865777c687582f61a"
        ],
        [
            "rewrite Rabs_Ropp.",
            "VernacExtend",
            "4585414329a0ef757c809f4a4dee3b3a09307b5c"
        ],
        [
            "unfold FtoRradix in |- *; rewrite <- Fabs_correct; auto with arith.",
            "VernacExtend",
            "e16068cc847dde66567a7ab5c8a81839b1a832f1"
        ],
        [
            "rewrite <- Rabs_Ropp; rewrite Ropp_minus_distr.",
            "VernacExtend",
            "ae15646b269a4b868c4d30b04f59494470f6cdbe"
        ],
        [
            "unfold FtoRradix in H'4; rewrite <- H'4.",
            "VernacExtend",
            "7e6902bf14db930c77235f2759ed233459553d2b"
        ],
        [
            "simpl in |- *.",
            "VernacExtend",
            "1b93169f4cf876d207c1fab22a2347202ab48d85"
        ],
        [
            "rewrite Zmin_le1; auto.",
            "VernacExtend",
            "1b29e29904f7cb26e27a3c94319b71055c10b9cd"
        ],
        [
            "generalize H'1 H'; case p; case q; unfold Fabs, Fminus, Fopp, Fplus in |- *; simpl in |- *; clear H'1 H'.",
            "VernacExtend",
            "54034912647582e6b61823b1d62b71422261fd61"
        ],
        [
            "intros Fnum1 Fexp1 Fnum2 Fexp2 H'5 H'6.",
            "VernacExtend",
            "0d22810d823c8f1dc70b63dfdf7b9552045bef95"
        ],
        [
            "repeat rewrite Zmin_n_n; auto.",
            "VernacExtend",
            "241495f7ea243468c98470c2cae92a35b2aafc3d"
        ],
        [
            "repeat rewrite (Zmin_le2 _ _ H'5); auto with zarith.",
            "VernacExtend",
            "cb8806437ea60edb4d1b0e5b00027da62b7ee347"
        ],
        [
            "replace (Zabs_nat (Fexp2 - Fexp2)) with 0.",
            "VernacExtend",
            "65351e79cfa1fd2e08e962ea4ad42a7b71f2d5c4"
        ],
        [
            "rewrite Zpower_nat_O.",
            "VernacExtend",
            "55d3514e535c58746a3c94696a8c8338f97e4a8f"
        ],
        [
            "cut (forall z : Z, (z * 1%nat)%Z = z); [ intros tmp; repeat rewrite tmp; clear tmp | auto with zarith ].",
            "VernacExtend",
            "8b68f8e67a59e8e6479b40182a6e284b33219bb9"
        ],
        [
            "unfold FtoRradix, FtoR in |- *; simpl in |- *.",
            "VernacExtend",
            "85a3da1582165d92ceb7faef707de88822bccf1a"
        ],
        [
            "intros H'.",
            "VernacExtend",
            "d7903418c9c01fda86d2cc847b39424719d50154"
        ],
        [
            "repeat split; simpl in |- *.",
            "VernacExtend",
            "2c5f9b5755e89db19a357ee80f313b6bcfad6997"
        ],
        [
            "rewrite (fun x => Zabs_eq (Zabs x)); auto with zarith.",
            "VernacExtend",
            "5de3eaca5a9d8951a17b76449d4ad747382396b3"
        ],
        [
            "apply Zle_lt_trans with (Zabs Fnum2); auto.",
            "VernacExtend",
            "d1023229c133abfd5518961c95df5b1736cb76e8"
        ],
        [
            "apply le_IZR.",
            "VernacExtend",
            "b9b46c6b2f4d4157bed90857db2b9c3ba33486ad"
        ],
        [
            "apply (Rle_monotony_contra_exp radix) with (z := Fexp2); auto.",
            "VernacExtend",
            "88ae4b1869ae5b359f961c70a9a1778d528c1aa0"
        ],
        [
            "case H'6; auto.",
            "VernacExtend",
            "56eef74f6217715d3dc37c5d730bbe40590c90e2"
        ],
        [
            "case H'6; auto.",
            "VernacExtend",
            "56eef74f6217715d3dc37c5d730bbe40590c90e2"
        ],
        [
            "intros; simpl in |- *; ring.",
            "VernacExtend",
            "4dc4a1f2527ef2932c2885c889a176b6f199ded7"
        ],
        [
            "replace (Fexp2 - Fexp2)%Z with 0%Z; simpl in |- *; auto with zarith.",
            "VernacExtend",
            "1fc5ad03008fedde53f78fbc56d5e30b807c5fba"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Theorem errorBoundedPlusAbs : forall p q pq : float, Fbounded b p -> Fbounded b q -> Closest b radix (p + q) pq -> exists error : float, error = Rabs (p + q - pq) :>R /\\ Fbounded b error /\\ Fexp error = Zmin (Fexp p) (Fexp q).",
            "VernacStartTheoremProof",
            "5bbd957f60e2d366c9937c4ae8e30a4083266d02"
        ],
        [
            "intros p q pq H' H'0 H'1.",
            "VernacExtend",
            "36447ce0c4a9867618dea283e8074499e4ad7b2e"
        ],
        [
            "case (Zle_or_lt (Fexp p) (Fexp q)); intros H'2.",
            "VernacExtend",
            "d3b1e39e8e22060157e454b312673ca5de3e5d7a"
        ],
        [
            "apply errorBoundedPlusLe; auto.",
            "VernacExtend",
            "f1ab033b7a7670c01902299e6879243be0b9c2e4"
        ],
        [
            "replace (p + q)%R with (q + p)%R; [ idtac | ring ].",
            "VernacExtend",
            "e216ce4fdf701ad8a22b24445b9a4d2fc634cf1c"
        ],
        [
            "replace (Zmin (Fexp p) (Fexp q)) with (Zmin (Fexp q) (Fexp p)); [ idtac | apply Zmin_sym ].",
            "VernacExtend",
            "b319eceb367941f6fc2ca8439417c65f9c476eb6"
        ],
        [
            "apply errorBoundedPlusLe; auto.",
            "VernacExtend",
            "f1ab033b7a7670c01902299e6879243be0b9c2e4"
        ],
        [
            "auto with zarith.",
            "VernacExtend",
            "23f42fd3236dcece4a40b3a666dce57fea69a9c0"
        ],
        [
            "apply (ClosestCompatible b radix (p + q)%R (q + p)%R pq); auto.",
            "VernacExtend",
            "c5f8f739d78d26772adae1a280b7ec1caeda086c"
        ],
        [
            "ring.",
            "VernacExtend",
            "baadd9fc4c175005af409bb466fcea9fab25b4e6"
        ],
        [
            "case H'1; auto.",
            "VernacExtend",
            "a44f1b914e489dd19b841fdfab025ba14e3d8f86"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Theorem errorBoundedPlus : forall p q pq : float, (Fbounded b p) -> (Fbounded b q) -> (Closest b radix (p + q) pq) -> exists error : float, error = (p + q - pq)%R :>R /\\ (Fbounded b error) /\\ (Fexp error) = (Zmin (Fexp p) (Fexp q)).",
            "VernacStartTheoremProof",
            "ce5caf6fcdec6db763ae003222d2d85a482f5985"
        ],
        [
            "intros p q pq H' H'0 H'1.",
            "VernacExtend",
            "36447ce0c4a9867618dea283e8074499e4ad7b2e"
        ],
        [
            "case (errorBoundedPlusAbs p q pq); auto.",
            "VernacExtend",
            "14f45aed281ab5fb4526e2a97c7cea5dc57b0a93"
        ],
        [
            "intros x H'2; elim H'2; intros H'3 H'4; elim H'4; intros H'5 H'6; clear H'4 H'2.",
            "VernacExtend",
            "721ef3ee78f64989a2fb9b6f14c58ac85a2dccc8"
        ],
        [
            "generalize H'3; clear H'3.",
            "VernacExtend",
            "b17279efb82ca177021cdc036f341c968c9832c2"
        ],
        [
            "unfold Rabs in |- *; case (Rcase_abs (p + q - pq)).",
            "VernacExtend",
            "f92641dda1dcf1bf9a0f95735df63949ae67f735"
        ],
        [
            "intros H'2 H'3; exists (Fopp x); split; auto.",
            "VernacExtend",
            "baab3caeb730a4ad629b08d4b800f15d9de30e88"
        ],
        [
            "unfold FtoRradix in |- *; rewrite Fopp_correct; auto.",
            "VernacExtend",
            "cb2f7c06ddf935b881f8dc588261d2ace6d5cb81"
        ],
        [
            "unfold FtoRradix in H'3; rewrite H'3; ring.",
            "VernacExtend",
            "b8221b8fd2a5123d8ec4fed85a13846f7b749a90"
        ],
        [
            "split.",
            "VernacExtend",
            "55abc140132bd88981001ac656020469a8d503eb"
        ],
        [
            "apply oppBounded; auto.",
            "VernacExtend",
            "6e68d2122eeea082741ca4e279707ce0511c71ef"
        ],
        [
            "rewrite <- H'6; auto.",
            "VernacExtend",
            "1f7cef3e0988185351588717c6357ca782ed0879"
        ],
        [
            "intros H'2 H'3; exists x; split; auto.",
            "VernacExtend",
            "65b7df293034d86287dbafc65043dae5c540511e"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Theorem plusExact1 : forall p q r : float, Fbounded b p -> Fbounded b q -> Closest b radix (p + q) r -> (Fexp r <= Zmin (Fexp p) (Fexp q))%Z -> r = (p + q)%R :>R.",
            "VernacStartTheoremProof",
            "432af3fa07e3ce64bca384880ce17f1904acf4db"
        ],
        [
            "intros p q r H' H'0 H'1 H'2.",
            "VernacExtend",
            "83b3ef77da60d23370e4e44956d681f7820b20e2"
        ],
        [
            "cut (2%nat * Rabs (FtoR radix (Fplus radix p q) - FtoR radix r) <= Float 1%nat (Fexp r))%R; [ rewrite Fplus_correct; auto with zarith; intros Rl1 | idtac ].",
            "VernacExtend",
            "8cf07a5e59404b56c7de6d13f35610a58d91215e"
        ],
        [
            "case errorBoundedPlus with (p := p) (q := q) (pq := r); auto.",
            "VernacExtend",
            "1a144b415571b7a5cd67bd7bfbd0fc39f8f37136"
        ],
        [
            "intros x H'3; elim H'3; intros H'4 H'5; elim H'5; intros H'6 H'7; clear H'5 H'3.",
            "VernacExtend",
            "da8b77f1d6120ea4b4b7a6526a899639c78686ed"
        ],
        [
            "unfold FtoRradix in H'4; rewrite <- H'4 in Rl1.",
            "VernacExtend",
            "5631de6764b2dde3911e16d60593fd6d5c76c510"
        ],
        [
            "2: apply Rle_trans with (Fulp b radix precision r); auto.",
            "VernacExtend",
            "296f5a5bde246faaae9da283da3c69bfae966ae8"
        ],
        [
            "2: apply (ClosestUlp b radix precision); auto.",
            "VernacExtend",
            "4fce84201a7bb2c1e90b83d7adad0b111b883896"
        ],
        [
            "2: rewrite Fplus_correct; auto with zarith.",
            "VernacExtend",
            "1620fcf114a2969db193a9b6283121b415cb9021"
        ],
        [
            "2: unfold FtoRradix in |- *; apply FulpLe; auto.",
            "VernacExtend",
            "55f6c688d34078adaf3c03da77bf58788ca5ee9c"
        ],
        [
            "2: apply RoundedModeBounded with (radix := radix) (P := Closest b radix) (r := (p + q)%R); auto.",
            "VernacExtend",
            "ce259c19963eafc9ff93731a455c42156bfd1ae4"
        ],
        [
            "2: apply ClosestRoundedModeP with (precision := precision); auto.",
            "VernacExtend",
            "62e23def5bb2bfa5adccd2c929e9e979b2503071"
        ],
        [
            "cut (x = 0%R :>R); [ unfold FtoRradix in |- *; intros Eq1 | idtac ].",
            "VernacExtend",
            "4464127f19e6a8abff6aa4c2b31a8e49e71edcef"
        ],
        [
            "replace (FtoR radix r) with (FtoR radix r + 0)%R; [ idtac | ring ].",
            "VernacExtend",
            "a5cd93f533a4b817306f95a78d3d8929186da6f7"
        ],
        [
            "rewrite <- Eq1.",
            "VernacExtend",
            "a51963ea9953e0b8bb7f342c91aa7438ca422f43"
        ],
        [
            "rewrite H'4; ring.",
            "VernacExtend",
            "464c8345b177e388948e9b3bbaa42292fb16468d"
        ],
        [
            "apply (is_Fzero_rep1 radix).",
            "VernacExtend",
            "8f2233baa86fd3036891ace4ee9faefed99783da"
        ],
        [
            "case (Z_zerop (Fnum x)); simpl in |- *; auto.",
            "VernacExtend",
            "9a436b19c8595f6edab2a89e8782907834aa7053"
        ],
        [
            "intros H'3; Contradict Rl1.",
            "VernacExtend",
            "907503bd175f8723d4718ab82a815e9f093d59e8"
        ],
        [
            "apply Rgt_not_le.",
            "VernacExtend",
            "be8a1e7f9ca2303d5ddda077b45cc15db6c6b3ce"
        ],
        [
            "red in |- *; apply Rle_lt_trans with (Rabs (FtoR radix x)).",
            "VernacExtend",
            "ed4fa5008954e0ae05f81a5e6944037b8e1230b5"
        ],
        [
            "unfold FtoRradix, FtoR in |- *; simpl in |- *; auto.",
            "VernacExtend",
            "0a0ab92f652c540feedfb1f1261ea912fdc7adb7"
        ],
        [
            "rewrite Rabs_mult.",
            "VernacExtend",
            "0a976c5fce10a63ed58fa2e07dd76a462e6697c3"
        ],
        [
            "apply Rmult_le_compat; auto with real arith.",
            "VernacExtend",
            "9957fd3f288f703842d8cf655fb04d6c6fec0f1e"
        ],
        [
            "generalize H'3; case (Fnum x); simpl in |- *; auto with real zarith.",
            "VernacExtend",
            "64b7ccb273e8f26c95a78d1734118407b37468ad"
        ],
        [
            "intros H'5; case H'5; auto.",
            "VernacExtend",
            "a3a9ac879fabfbb311b9910f9e2a979d05919da9"
        ],
        [
            "intros p0 H'5; rewrite Rabs_right; auto with real.",
            "VernacExtend",
            "91b0d68b543d18f7aed0cea335a24abc522126f5"
        ],
        [
            "replace 1%R with (INR 1); unfold IZR; repeat rewrite <- INR_IPR; auto with real arith.",
            "VernacExtend",
            "9f3c793e0835c0bdc0e66f773313c62b67e4d2d6"
        ],
        [
            "intros p0 H'5; rewrite Faux.Rabsolu_left1; auto.",
            "VernacExtend",
            "4e866fd1f032dea95b8ad77556bcf91c6b4af5f8"
        ],
        [
            "unfold IZR; rewrite Ropp_involutive.",
            "VernacExtend",
            "5d28962ea654ad6b200e73e2f9871ec690b3f9ac"
        ],
        [
            "repeat rewrite <- INR_IPR; simpl; replace 1%R with (INR 1); auto with real arith.",
            "VernacExtend",
            "0373fcc600b46babeff39b245408e70e65721c9d"
        ],
        [
            "unfold IZR; repeat rewrite <- INR_IPR; replace 0%R with (- 0%nat)%R; auto with real.",
            "VernacExtend",
            "b9a7f101bd06e8f5b955741cce0f12b7423f12ea"
        ],
        [
            "rewrite Rabs_right; auto with real arith.",
            "VernacExtend",
            "55468d63d3bc15b47deba49176bd832a78cb8996"
        ],
        [
            "apply Rle_powerRZ; auto with real arith.",
            "VernacExtend",
            "10d31d6b3ddd148ede0e98ea31567f1d23f127ec"
        ],
        [
            "auto with zarith.",
            "VernacExtend",
            "23f42fd3236dcece4a40b3a666dce57fea69a9c0"
        ],
        [
            "apply Rle_ge; cut (1 < radix)%Z; auto with float real zarith.",
            "VernacExtend",
            "4134df324f51c67ce96b6e29990a583f5c040b3a"
        ],
        [
            "cut (forall r : R, (2%nat * r)%R = (r + r)%R); [ intros tmp; rewrite tmp; clear tmp | intros f; simpl in |- *; ring ].",
            "VernacExtend",
            "d87dfeeda6b00d62f8ece80b69568fc3b9575e6f"
        ],
        [
            "pattern (Rabs (FtoR radix x)) at 1 in |- *; replace (Rabs (FtoR radix x)) with (Rabs (FtoR radix x) + 0)%R; [ idtac | ring ].",
            "VernacExtend",
            "9382e2949506fadbe2970c17a307e6229212c6c9"
        ],
        [
            "apply Rplus_lt_compat_l; auto.",
            "VernacExtend",
            "4b6a14448b340686174c8e42c0bdfbd475022946"
        ],
        [
            "case (Rabs_pos (FtoR radix x)); auto.",
            "VernacExtend",
            "592b95474d758d88b31e79808256495574d34e1a"
        ],
        [
            "rewrite <- Fabs_correct; auto with arith.",
            "VernacExtend",
            "81110a17bd92a7478d1fdb359b8532d2fcc151d3"
        ],
        [
            "intros H'5; Contradict H'3.",
            "VernacExtend",
            "ab729fc629c2f8fd6c55d24345bdaa832fa9f526"
        ],
        [
            "cut (Fnum (Fabs x) = 0%Z).",
            "VernacExtend",
            "f48a154f48f4668867ef63c191564d62dbc26331"
        ],
        [
            "unfold Fabs in |- *; simpl in |- *; case (Fnum x); simpl in |- *; auto; intros; discriminate.",
            "VernacExtend",
            "5f9176e336cbc297b10b74f15d045b2a34770cea"
        ],
        [
            "change (is_Fzero (Fabs x)) in |- *.",
            "VernacExtend",
            "3b67f4bba1109b392c1071ed0c5eaa37aa0ccf54"
        ],
        [
            "apply (is_Fzero_rep2 radix); auto with arith.",
            "VernacExtend",
            "4514a2d0a09682617d35af7572d3b881e795af7b"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Theorem plusExact1bis : forall p q r : float, Fbounded b p -> Fbounded b q -> Closest b radix (p + q) r -> r <> (p + q)%R :>R -> (Zmin (Fexp p) (Fexp q) < Fexp r)%Z.",
            "VernacStartTheoremProof",
            "2e4834bb931dcfc9f9083954d526592936db0183"
        ],
        [
            "intros p0 q0 r0 H' H'0 H'1 H'2; case (Zle_or_lt (Fexp r0) (Zmin (Fexp p0) (Fexp q0))); auto.",
            "VernacExtend",
            "026b4b80307725a9556ec6dc8eb3b35edef06df7"
        ],
        [
            "intros H'3; Contradict H'2.",
            "VernacExtend",
            "6be5d11e3de99cb576767598c9ec09088ef0b0ad"
        ],
        [
            "apply plusExact1; auto.",
            "VernacExtend",
            "34007a63d1e676937352ec50e9d97a0bb8fdb974"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Theorem plusExact2Aux : forall p q r : float, (0 <= p)%R -> Fcanonic radix b p -> Fbounded b q -> Closest b radix (p + q) r -> (Fexp r < Zpred (Fexp p))%Z -> r = (p + q)%R :>R.",
            "VernacStartTheoremProof",
            "661f2222a9ee53b03fc7d159bef4f8b4c5af7a11"
        ],
        [
            "intros p q r H' H'0 H'1 H'2 H'3.",
            "VernacExtend",
            "bf7e9748d84120b596d3a9536c102c4e75c10900"
        ],
        [
            "apply plusExact1; auto.",
            "VernacExtend",
            "34007a63d1e676937352ec50e9d97a0bb8fdb974"
        ],
        [
            "apply FcanonicBound with (1 := H'0); auto.",
            "VernacExtend",
            "6cc847b933a0c4495ce3fac83322cf7987fd6177"
        ],
        [
            "case (Zle_or_lt (Fexp p) (Fexp q)); intros Zl1.",
            "VernacExtend",
            "ce6f2002f048190d74cbad52931efbe4954544ed"
        ],
        [
            "rewrite Zmin_le1; auto with zarith.",
            "VernacExtend",
            "0b0349f06a26f8988aaed6e8a928ec5b5b955ca6"
        ],
        [
            "apply Zle_trans with (Zpred (Fexp p)); auto with zarith.",
            "VernacExtend",
            "6b0007f0bc17e96a7b1397cdd17de1d379c23f69"
        ],
        [
            "unfold Zpred in |- *; auto with zarith.",
            "VernacExtend",
            "43771d5630a18be2e2a89e880f229253e9aa05e6"
        ],
        [
            "rewrite Zmin_le2; auto with zarith.",
            "VernacExtend",
            "6f4c81526e84063f15b475a1bbaa698cb007d6d3"
        ],
        [
            "case (Zlt_next _ _ Zl1); intros Zl2.",
            "VernacExtend",
            "355702e92228ac9bdb1fc94db7d660fe9026f080"
        ],
        [
            "rewrite Zl2 in H'3.",
            "VernacExtend",
            "b804f1774d8bcecd0837237cc070921f2c5d6c46"
        ],
        [
            "replace (Fexp q) with (Zpred (Zsucc (Fexp q))); auto with zarith; unfold Zpred, Zsucc in |- *; ring.",
            "VernacExtend",
            "91c740e0d3d1d027b009783e51b0d1a2205a7f5b"
        ],
        [
            "case H'0; clear H'0; intros H'0.",
            "VernacExtend",
            "a11cec05af0c2662269196e11e5283d8e11eb1dc"
        ],
        [
            "absurd (r < Float (nNormMin radix precision) (Zpred (Fexp p)))%R.",
            "VernacExtend",
            "44b092d8a5293f6ad74001ae51a4d651ee1583e3"
        ],
        [
            "apply Rle_not_lt; auto.",
            "VernacExtend",
            "a14016e8637e06ef942ae2a016f397912a0b9bcd"
        ],
        [
            "unfold FtoRradix in |- *; apply (ClosestMonotone b radix (Float (nNormMin radix precision) (Zpred (Fexp p))) ( p + q)%R); auto; auto.",
            "VernacExtend",
            "d5c7dd5cf941eb5358a7b614ca8bdb0a35eeb69c"
        ],
        [
            "cut (Float (nNormMin radix precision) (Fexp p) <= p)%R; [ intros Eq1 | idtac ].",
            "VernacExtend",
            "bb28deb13c631dbd6b16a45458f207076dc4a3c9"
        ],
        [
            "case (Rle_or_lt 0 q); intros Rl1.",
            "VernacExtend",
            "9d20353aef8aa6cb6d5bfbf1ee3a04be029fbe0f"
        ],
        [
            "apply Rlt_le_trans with (FtoRradix p).",
            "VernacExtend",
            "ed592b6fa82cc50563c235cdaafa5b1076d30d0a"
        ],
        [
            "apply Rlt_le_trans with (FtoRradix (Float (nNormMin radix precision) (Fexp p))); auto.",
            "VernacExtend",
            "99d7bac9bedc63325b3147f41c9cb0340ca9cf0c"
        ],
        [
            "unfold FtoRradix, FtoR in |- *; simpl in |- *; auto.",
            "VernacExtend",
            "0a0ab92f652c540feedfb1f1261ea912fdc7adb7"
        ],
        [
            "apply Rmult_lt_compat_l; auto with real arith.",
            "VernacExtend",
            "2c95e3f10177f062380352d768090c173015e1d6"
        ],
        [
            "replace 0%R with (IZR 0%nat); auto with real; auto with real float arith.",
            "VernacExtend",
            "9d983fd8b4ac7e0768af1d737fba49bbc145a390"
        ],
        [
            "apply Rlt_IZR; apply nNormPos; auto with zarith.",
            "VernacExtend",
            "0c294ffd499edf90d53fba8284a4553cb155a504"
        ],
        [
            "unfold Zpred in |- *; auto with real float zarith arith.",
            "VernacExtend",
            "5fd193e19f765913152eb3fbdb5b5a66902348dc"
        ],
        [
            "pattern (FtoRradix p) at 1 in |- *; replace (FtoRradix p) with (p + 0)%R; auto with real.",
            "VernacExtend",
            "909da4429bd2c5d1dca89828a745e699be52e85e"
        ],
        [
            "apply Rplus_lt_reg_l with (r := (- q)%R); auto.",
            "VernacExtend",
            "e6a35d90bd15b7c0de69d1e61914475829e2b2ff"
        ],
        [
            "replace (- q + (p + q))%R with (FtoRradix p); [ idtac | ring ].",
            "VernacExtend",
            "299389143bccde4da7235a951da5f324d8683388"
        ],
        [
            "apply Rlt_le_trans with (FtoRradix (Float (nNormMin radix precision) (Fexp p))); auto.",
            "VernacExtend",
            "99d7bac9bedc63325b3147f41c9cb0340ca9cf0c"
        ],
        [
            "apply Rlt_le_trans with (2%nat * Float (nNormMin radix precision) (Zpred (Fexp p)))%R; auto.",
            "VernacExtend",
            "b00309d2b2985e53db29d305a9c9025f253746ad"
        ],
        [
            "cut (forall r : R, (2%nat * r)%R = (r + r)%R); [ intros tmp; rewrite tmp; clear tmp | intros; simpl in |- *; ring ].",
            "VernacExtend",
            "3672dc510eea391c5afce9a7c4f1fbf4fe7def75"
        ],
        [
            "rewrite (Rplus_comm (- q)).",
            "VernacExtend",
            "4ef928a3240a5110d3697b2eabd4730f3b6dc174"
        ],
        [
            "apply Rplus_lt_compat_l.",
            "VernacExtend",
            "cfadddfd242496b5b9297d5ae6868b0dbc12aeee"
        ],
        [
            "rewrite <- Faux.Rabsolu_left1; auto.",
            "VernacExtend",
            "8416aba2232b7d472962a3dd1bb5c39ba063d252"
        ],
        [
            "rewrite <- (Fabs_correct radix); auto with arith.",
            "VernacExtend",
            "e2b37eb43dcf546cef8bf75933f938fca8ae2321"
        ],
        [
            "unfold FtoRradix in |- *; apply maxMaxBis with (b := b); auto with zarith.",
            "VernacExtend",
            "59287bb497113ef73e1fa2e2142d5d8d6880436d"
        ],
        [
            "apply Rlt_le; auto.",
            "VernacExtend",
            "4003e3e1c449ee89cad9e953d0a562db8235648c"
        ],
        [
            "apply Rle_trans with (radix * Float (nNormMin radix precision) (Zpred (Fexp p)))%R.",
            "VernacExtend",
            "46902f0d4baedab610cee4875be568188bd426eb"
        ],
        [
            "apply Rmult_le_compat_r; auto.",
            "VernacExtend",
            "2808e2b8cdd6614e449e94a44d2d337ed31d7518"
        ],
        [
            "apply (LeFnumZERO radix); simpl in |- *; auto with arith.",
            "VernacExtend",
            "cfd2e7346e8552e2fbdc7f5d3627bedeaa27dd5e"
        ],
        [
            "apply Zlt_le_weak; apply nNormPos; auto with zarith.",
            "VernacExtend",
            "7e45f40da8f9e0fc6b07e83d446c1a2e81669354"
        ],
        [
            "rewrite INR_IZR_INZ; apply Rle_IZR; simpl in |- *; cut (1 < radix)%Z; auto with real zarith.",
            "VernacExtend",
            "77244d250c55cd40778f62156c8b75935ae0d73a"
        ],
        [
            "pattern (Fexp p) at 2 in |- *; replace (Fexp p) with (Zsucc (Zpred (Fexp p))); [ idtac | unfold Zsucc, Zpred in |- *; ring ].",
            "VernacExtend",
            "00716257be9808430c9fba57b85c6f55ef5cd4ae"
        ],
        [
            "unfold FtoRradix, FtoR in |- *; simpl in |- *.",
            "VernacExtend",
            "85a3da1582165d92ceb7faef707de88822bccf1a"
        ],
        [
            "rewrite powerRZ_Zs; auto with real zarith.",
            "VernacExtend",
            "1931a3978b6974020abfa1402ab4426f76878eb8"
        ],
        [
            "repeat rewrite <- Rmult_assoc.",
            "VernacExtend",
            "645aebe2c3685a4f868a05a2372130cedecea85e"
        ],
        [
            "rewrite (Rmult_comm radix); auto with real.",
            "VernacExtend",
            "ffd7ea94258224251a01dcc1731a0ebcf10a3406"
        ],
        [
            "unfold FtoRradix, FtoR in |- *; simpl in |- *; auto.",
            "VernacExtend",
            "0a0ab92f652c540feedfb1f1261ea912fdc7adb7"
        ],
        [
            "apply Rmult_le_compat_r; auto with real zarith.",
            "VernacExtend",
            "ab12f06210771823661c627ab200f2c736704e67"
        ],
        [
            "apply Rle_IZR.",
            "VernacExtend",
            "ad729fcfd043a8f36fc70d2fedfa18c333458480"
        ],
        [
            "rewrite <- (Zabs_eq (Fnum p)); auto with zarith.",
            "VernacExtend",
            "456716aaa09f7333ab5643fb1bd28f003ffae891"
        ],
        [
            "apply pNormal_absolu_min with (b := b); auto with arith.",
            "VernacExtend",
            "b22f9b4ee60a1052cf2831fcc09748a1d7730c95"
        ],
        [
            "unfold FtoRradix, FtoR in |- *; simpl in |- *; auto.",
            "VernacExtend",
            "0a0ab92f652c540feedfb1f1261ea912fdc7adb7"
        ],
        [
            "apply (LeR0Fnum radix); auto with arith.",
            "VernacExtend",
            "7a1ebbb6278802cde975520ed0ddd631bf368500"
        ],
        [
            "apply (RoundedModeProjectorIdem b radix (Closest b radix)); auto.",
            "VernacExtend",
            "4609aa098ae73c2fafe5736a67c3a55183726b45"
        ],
        [
            "apply ClosestRoundedModeP with (precision := precision); auto.",
            "VernacExtend",
            "eb6d3ee24dd119beb307169797f1cdd709b3ec7c"
        ],
        [
            "repeat split; simpl in |- *.",
            "VernacExtend",
            "2c5f9b5755e89db19a357ee80f313b6bcfad6997"
        ],
        [
            "rewrite Zabs_eq; auto with zarith.",
            "VernacExtend",
            "e3b6647506c6d43441146989691d7c27f1722b7e"
        ],
        [
            "apply ZltNormMinVnum; auto with arith.",
            "VernacExtend",
            "a99cc616a02620b5350cfee2c0558d79df65e890"
        ],
        [
            "apply Zlt_le_weak; apply nNormPos; auto with zarith.",
            "VernacExtend",
            "7e45f40da8f9e0fc6b07e83d446c1a2e81669354"
        ],
        [
            "apply Zle_trans with (Fexp q); auto with float zarith.",
            "VernacExtend",
            "bb3be6f93121c54d0a78c704c9af9a616fde01e6"
        ],
        [
            "case (Rle_or_lt 0 r); intros Rl1.",
            "VernacExtend",
            "39716886c3ea09ae66335276eed28679b0c0f36e"
        ],
        [
            "rewrite <- (Rabs_right r); auto with real.",
            "VernacExtend",
            "e7ba66539a2d0c2441d237d8229517e755cc9514"
        ],
        [
            "rewrite <- (Fabs_correct radix); auto with arith.",
            "VernacExtend",
            "e2b37eb43dcf546cef8bf75933f938fca8ae2321"
        ],
        [
            "unfold FtoRradix in |- *; apply maxMaxBis with (b := b); auto with zarith.",
            "VernacExtend",
            "59287bb497113ef73e1fa2e2142d5d8d6880436d"
        ],
        [
            "apply RoundedModeBounded with (radix := radix) (P := Closest b radix) (r := (p + q)%R); auto.",
            "VernacExtend",
            "89af83cf84428d80f70994c6f9be6125b0cac6cc"
        ],
        [
            "apply ClosestRoundedModeP with (precision := precision); auto with real.",
            "VernacExtend",
            "9c3052a0738613699d2b46866c6f05a7dc0de27f"
        ],
        [
            "apply Rlt_le_trans with 0%R; auto.",
            "VernacExtend",
            "73f5142f8adeec1254804f8db2c1e6f4864e9191"
        ],
        [
            "apply (LeFnumZERO radix); simpl in |- *; auto with arith.",
            "VernacExtend",
            "cfd2e7346e8552e2fbdc7f5d3627bedeaa27dd5e"
        ],
        [
            "apply Zlt_le_weak; apply nNormPos; auto with zarith.",
            "VernacExtend",
            "7e45f40da8f9e0fc6b07e83d446c1a2e81669354"
        ],
        [
            "absurd (- dExp b <= Fexp q)%Z; auto with float.",
            "VernacExtend",
            "edb27ffaa5950cae18974c1f5ece93c36fc4465f"
        ],
        [
            "apply Zlt_not_le.",
            "VernacExtend",
            "f50dda740686f871b63754e02667d404d580866b"
        ],
        [
            "case H'0; intros Z1 (Z2, Z3); rewrite <- Z2; auto with zarith.",
            "VernacExtend",
            "ac25f47c79aaafb1b60b15b09d6ffc3043e2de4a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Theorem plusExact2 : forall p q r : float, Fcanonic radix b p -> Fbounded b q -> Closest b radix (p + q) r -> (Fexp r < Zpred (Fexp p))%Z -> r = (p + q)%R :>R.",
            "VernacStartTheoremProof",
            "6ca0959225f52cbd33b6d009435b230d35d76a54"
        ],
        [
            "intros p q r H' H'0 H'1 H'2.",
            "VernacExtend",
            "83b3ef77da60d23370e4e44956d681f7820b20e2"
        ],
        [
            "case (Rle_or_lt 0 p); intros Rl1.",
            "VernacExtend",
            "aa6be71cc2b374664054155571961cb178d1e8df"
        ],
        [
            "apply plusExact2Aux; auto.",
            "VernacExtend",
            "83b50a70b643cc337ed22051094a765150f94cf2"
        ],
        [
            "replace (p + q)%R with (- (Fopp p + Fopp q))%R.",
            "VernacExtend",
            "08e0dee5cee6f39062d3954875e60e835748311a"
        ],
        [
            "rewrite <- (plusExact2Aux (Fopp p) (Fopp q) (Fopp r)); auto.",
            "VernacExtend",
            "5dfd1f00afca7004455cbfa98980bb83cd6fdbf7"
        ],
        [
            "unfold FtoRradix in |- *; rewrite Fopp_correct; ring.",
            "VernacExtend",
            "c960a8836af4508c923196902c16a5e22b8dbf05"
        ],
        [
            "unfold FtoRradix in |- *; rewrite Fopp_correct.",
            "VernacExtend",
            "c3c7ad16a924a974f39fb2584a800e7199b0444e"
        ],
        [
            "apply Rlt_le; replace 0%R with (-0)%R; auto with real.",
            "VernacExtend",
            "df144ef15bce5f13fad3c177bfa657d23ebb9e62"
        ],
        [
            "apply FcanonicFopp; auto with arith.",
            "VernacExtend",
            "84cf530bcba3d7a91cf05db0a4f9e39e598a91fb"
        ],
        [
            "apply oppBounded; auto.",
            "VernacExtend",
            "6e68d2122eeea082741ca4e279707ce0511c71ef"
        ],
        [
            "replace (Fopp p + Fopp q)%R with (- (p + q))%R.",
            "VernacExtend",
            "706cb642e357f2031abbb1348afc0b990b7469d2"
        ],
        [
            "apply ClosestOpp; auto.",
            "VernacExtend",
            "fdb10086de8928309670334b477ceba716a1f016"
        ],
        [
            "unfold FtoRradix in |- *; repeat rewrite Fopp_correct; ring.",
            "VernacExtend",
            "216a11721b4b7d252728f115120bad934d8b89a9"
        ],
        [
            "unfold FtoRradix in |- *; repeat rewrite Fopp_correct; ring.",
            "VernacExtend",
            "216a11721b4b7d252728f115120bad934d8b89a9"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Theorem plusExactR0 : forall p q r : float, Fbounded b p -> Fbounded b q -> Closest b radix (p + q) r -> r = 0%R :>R -> r = (p + q)%R :>R.",
            "VernacStartTheoremProof",
            "78f9e400b38529e3d8fcf946b1ade0727606e33b"
        ],
        [
            "intros p q r H' H'0 H'1 H'2.",
            "VernacExtend",
            "83b3ef77da60d23370e4e44956d681f7820b20e2"
        ],
        [
            "cut (r = FtoRradix (Fzero (- dExp b)) :>R); [ intros Eq1; rewrite Eq1 | rewrite H'2; apply sym_eq; unfold FtoRradix in |- *; apply FzeroisZero ].",
            "VernacExtend",
            "beefa5aba823117103564564960ecd7b7cc9319e"
        ],
        [
            "apply plusExact1; auto.",
            "VernacExtend",
            "34007a63d1e676937352ec50e9d97a0bb8fdb974"
        ],
        [
            "apply (ClosestCompatible b radix (p + q)%R (p + q)%R r); auto.",
            "VernacExtend",
            "abad862705a75f7722576f3b5b1a22ddebef38f6"
        ],
        [
            "apply FboundedFzero; auto.",
            "VernacExtend",
            "8d0d3171dfdcd871c85f5387344c815eca8c2e6c"
        ],
        [
            "simpl in |- *; auto.",
            "VernacExtend",
            "9b631374b1d3067f703fd99c5dc6e1e5c8405957"
        ],
        [
            "unfold Zmin in |- *; case (Fexp p ?= Fexp q)%Z; auto with float.",
            "VernacExtend",
            "44c643f5fe91a06d9c00911d2ecb5c2d6363700e"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Theorem plusErrorBound1 : forall p q r : float, Fbounded b p -> Fbounded b q -> Closest b radix (p + q) r -> ~ is_Fzero r -> (Rabs (r - (p + q)) < Rabs r * / 2%nat * (radix * / pPred (vNum b)))%R.",
            "VernacStartTheoremProof",
            "96efb6a0d8701371509ee6ae04d0e24044043e60"
        ],
        [
            "intros p q r H' H'0 H'1 H'2.",
            "VernacExtend",
            "83b3ef77da60d23370e4e44956d681f7820b20e2"
        ],
        [
            "cut (Fcanonic radix b (Fnormalize radix b precision r)); [ intros tmp; Casec tmp; intros Fs | idtac ].",
            "VernacExtend",
            "9a22a060006b7113ecf04f985b3e4ea5cd34c6ed"
        ],
        [
            "3: apply FnormalizeCanonic; auto with arith.",
            "VernacExtend",
            "93c97d1e352d3f78cf06966e947252bd00077cca"
        ],
        [
            "3: apply RoundedModeBounded with (radix := radix) (P := Closest b radix) (r := (p + q)%R); auto.",
            "VernacExtend",
            "c0d2889d7fceda71b954c93d378c02da13918d84"
        ],
        [
            "3: apply ClosestRoundedModeP with (precision := precision); auto.",
            "VernacExtend",
            "9cc45999bfb93d3491b09a9beaafde358b047a45"
        ],
        [
            "2: rewrite <- (plusExact1 p q (Fnormalize radix b precision r)); auto.",
            "VernacExtend",
            "109928bbe449eba4e560644165fbd2052c8f8d48"
        ],
        [
            "2: unfold FtoRradix in |- *; rewrite FnormalizeCorrect; auto with arith.",
            "VernacExtend",
            "a580308b48934a6771ece3080c36f2eb98a9f9ce"
        ],
        [
            "2: replace (FtoR radix r - FtoR radix r)%R with 0%R; [ idtac | ring ].",
            "VernacExtend",
            "5fc2d69e0cafa1aba6e626ce68c2964e59c8e8ce"
        ],
        [
            "2: rewrite Rabs_R0.",
            "VernacExtend",
            "1bfd2bd66318b3deb80e7b15a423564f7919ff7f"
        ],
        [
            "2: replace 0%R with (0 * (radix * / pPred (vNum b)))%R; [ apply Rmult_lt_compat_r | ring ].",
            "VernacExtend",
            "a0092afe74adfcac144bddefeb44b535679a9871"
        ],
        [
            "2: replace 0%R with (0 * / pPred (vNum b))%R; [ apply Rmult_lt_compat_r | ring ].",
            "VernacExtend",
            "ba1a5f74a831c776738a179e49984c728432ab26"
        ],
        [
            "2: apply Rinv_0_lt_compat; replace 0%R with (IZR 0); auto with real zarith.",
            "VernacExtend",
            "90ac6e7b274a86c86e93cd9a2ff7a5589642c4a2"
        ],
        [
            "2: apply Rlt_IZR; unfold pPred in |- *; apply Zlt_succ_pred; simpl in |- *.",
            "VernacExtend",
            "340db8fe7d5ec28d0168a99530a7e87c5289e993"
        ],
        [
            "2: apply vNumbMoreThanOne with (radix := radix) (precision := precision); auto with real zarith.",
            "VernacExtend",
            "45adceafb1c33a24e0626a1948608d519602d9a8"
        ],
        [
            "2: cut (1 < radix)%Z; auto with real zarith.",
            "VernacExtend",
            "531bef82d2b90e5fdf8dc54dcdb45daf5bc339f9"
        ],
        [
            "2: replace 0%R with (0 * / 2%nat)%R; [ apply Rmult_lt_compat_r | ring ]; auto with real.",
            "VernacExtend",
            "de3b8e385ab7e4b6cf8ca3cd1823f86ea570610d"
        ],
        [
            "2: case (Rabs_pos (FtoR radix r)); auto.",
            "VernacExtend",
            "71fbcd8b1e1026bb81220ed6ffb07c0ff700bf0c"
        ],
        [
            "2: intros H'3; Contradict H'2.",
            "VernacExtend",
            "221c74cad4a4be8cc4b89eb201d444f38bb26d19"
        ],
        [
            "2: apply is_Fzero_rep2 with (radix := radix); auto with real arith.",
            "VernacExtend",
            "350dee939fd85140e375512f4505c7192a779d8d"
        ],
        [
            "2: generalize H'3; fold FtoRradix in |- *; unfold Rabs in |- *; case (Rcase_abs r); auto.",
            "VernacExtend",
            "66036a146aa2e3a8e5969673dd0ea1af73ac8ebc"
        ],
        [
            "2: intros r0 H'2; replace 0%R with (-0)%R; [ rewrite H'2 | idtac ]; ring.",
            "VernacExtend",
            "527dd8ddd1a111983afa1d63f349cc339f72d632"
        ],
        [
            "2: apply (ClosestCompatible b radix (p + q)%R (p + q)%R r); auto.",
            "VernacExtend",
            "74d022f0b77949e4ed51b4fd5dc7430a72a6212e"
        ],
        [
            "2: apply sym_eq; apply FnormalizeCorrect; auto.",
            "VernacExtend",
            "7e612388dba2488cd451e8563314073d98ddb2c8"
        ],
        [
            "2: apply FnormalizeBounded; auto with arith.",
            "VernacExtend",
            "47fb66c0faa77db3050db3af062d7f01984914c1"
        ],
        [
            "2: apply RoundedModeBounded with (radix := radix) (P := Closest b radix) (r := (p + q)%R); auto.",
            "VernacExtend",
            "ce259c19963eafc9ff93731a455c42156bfd1ae4"
        ],
        [
            "2: apply ClosestRoundedModeP with (precision := precision); auto.",
            "VernacExtend",
            "62e23def5bb2bfa5adccd2c929e9e979b2503071"
        ],
        [
            "2: replace (Fexp (Fnormalize radix b precision r)) with (- dExp b)%Z.",
            "VernacExtend",
            "92b030345f061925e69dba12ecb70a6c7b26242d"
        ],
        [
            "2: unfold Zmin in |- *; case (Fexp p ?= Fexp q)%Z; auto with float.",
            "VernacExtend",
            "2a077cf6b60bbecdb6158b64dcc2fd5e11c301bd"
        ],
        [
            "2: apply sym_equal; case Fs; intros H1 H2; case H2; auto.",
            "VernacExtend",
            "7b9bd49feb1333b00023e5cc9d8f1b6b9cc53058"
        ],
        [
            "apply Rle_lt_trans with (/ 2%nat * Fulp b radix precision r)%R.",
            "VernacExtend",
            "3a6221e3f9d7b32ac5dbcdd95e5c41a813a8e3b3"
        ],
        [
            "apply Rmult_le_reg_l with (r := INR 2); auto with real.",
            "VernacExtend",
            "d844aeae389b738df4405a2dd7bb4aed456229ac"
        ],
        [
            "rewrite <- Rmult_assoc; rewrite Rinv_r; auto with real; rewrite Rmult_1_l.",
            "VernacExtend",
            "c5775cfd8f2ee2036200aef14b0ec0b67fdc5802"
        ],
        [
            "unfold FtoRradix in |- *; rewrite <- Rabs_Ropp; rewrite Ropp_minus_distr; rewrite <- (Fplus_correct radix); auto with zarith.",
            "VernacExtend",
            "d702b3515f08a83088a225564f3493547ebca0ea"
        ],
        [
            "apply ClosestUlp; auto.",
            "VernacExtend",
            "a2cd86203367de47548eba9c063baef081498b1a"
        ],
        [
            "rewrite Fplus_correct; auto with arith.",
            "VernacExtend",
            "ce3b4ef3f92ccd59d42334ab7b57070017a384f8"
        ],
        [
            "replace (Rabs r * / 2%nat * (radix * / pPred (vNum b)))%R with (/ 2%nat * (Rabs r * (radix * / pPred (vNum b))))%R; [ apply Rmult_lt_compat_l; auto with real | ring ].",
            "VernacExtend",
            "4633c51094495c172ca3c54fd0817b46cd1ecd54"
        ],
        [
            "replace (Fulp b radix precision r) with (Float (pPred (vNum b)) (Zpred (Fexp (Fnormalize radix b precision r))) * (radix * / pPred (vNum b)))%R.",
            "VernacExtend",
            "54d463eaf6d80382e14966caef2f858bd1f1db09"
        ],
        [
            "apply Rmult_lt_compat_r.",
            "VernacExtend",
            "e041593c57ec6470673cc705c01d215d230e0676"
        ],
        [
            "replace 0%R with (radix * 0)%R; [ apply Rmult_lt_compat_l | ring ]; auto with real arith.",
            "VernacExtend",
            "9490246c52f60420a8a71423b428d17df4841b2c"
        ],
        [
            "apply Rinv_0_lt_compat; replace 0%R with (IZR 0%nat); auto with real arith; apply Rlt_IZR.",
            "VernacExtend",
            "f8d00b5014fa486267d367798da6bf562aeceeb2"
        ],
        [
            "unfold pPred in |- *; apply Zlt_succ_pred; apply (vNumbMoreThanOne radix) with (precision := precision); auto with zarith.",
            "VernacExtend",
            "3045c5c3efdd0f3c0de2a4c082ee97a962e4a553"
        ],
        [
            "unfold FtoRradix in |- *; rewrite <- (FnormalizeCorrect _ radixMoreThanOne b precision r).",
            "VernacExtend",
            "997c80e49fc61331267890e797be1823bdf42085"
        ],
        [
            "rewrite <- (Fabs_correct radix); auto with arith.",
            "VernacExtend",
            "e2b37eb43dcf546cef8bf75933f938fca8ae2321"
        ],
        [
            "apply FnormalBoundAbs; auto with zarith.",
            "VernacExtend",
            "c96232eb879dec51c10e939916e202ba5e3d379e"
        ],
        [
            "unfold Fulp, FtoRradix, FtoR in |- *; simpl in |- *.",
            "VernacExtend",
            "9befe3be2f9bb77dfad9eb989ace048cea1fdb20"
        ],
        [
            "apply trans_eq with (pPred (vNum b) * / pPred (vNum b) * (radix * powerRZ radix (Zpred (Fexp (Fnormalize radix b precision r)))))%R; [ ring | idtac ]; auto.",
            "VernacExtend",
            "81f0f5f0c6cf15db3e7e1684e14b6282cd44330b"
        ],
        [
            "rewrite Rinv_r; auto with real arith.",
            "VernacExtend",
            "a5cdd69b6f41591319bdf09a210071d079f7df71"
        ],
        [
            "rewrite <- powerRZ_Zs; auto with real.",
            "VernacExtend",
            "a94c6f038012e42ee76702d449161894c0e07889"
        ],
        [
            "cut (forall r : Z, Zsucc (Zpred r) = r); [ intros Er; rewrite Er | intros r'; unfold Zsucc, Zpred in |- * ]; ring.",
            "VernacExtend",
            "259a2fd161e875aa1facf6c1a2e997fe0a177bd0"
        ],
        [
            "apply Rlt_dichotomy_converse; right; red in |- *.",
            "VernacExtend",
            "5e6cb8110820439778b09c01c34537a9f0ba2a54"
        ],
        [
            "replace 0%R with (IZR 0); cut (1 < radix)%Z; auto with real zarith.",
            "VernacExtend",
            "220f80c7edd726acc88d9a65fa0bdc085085828c"
        ],
        [
            "apply Rlt_dichotomy_converse; right; red in |- *.",
            "VernacExtend",
            "5e6cb8110820439778b09c01c34537a9f0ba2a54"
        ],
        [
            "replace 0%R with (IZR 0); auto with real zarith.",
            "VernacExtend",
            "248f491b6d91fa4fa885cd5cf25e3f2775dde283"
        ],
        [
            "unfold pPred in |- *; apply Rlt_IZR; apply Zlt_succ_pred; simpl in |- *.",
            "VernacExtend",
            "9bf6897999d97b1a80a9fdd62c7aa3eb67e1add1"
        ],
        [
            "apply vNumbMoreThanOne with (radix := radix) (precision := precision); auto with real arith.",
            "VernacExtend",
            "01017bc5d3853cd34e574becf03eaaa2f0c45a5a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Theorem plusErrorBound1bis : forall p q r : float, Fbounded b p -> Fbounded b q -> Closest b radix (p + q) r -> ~ is_Fzero r -> (Rabs (r - (p + q)) <= Rabs r * / 2%nat * (radix * / Zpos (vNum b)))%R.",
            "VernacStartTheoremProof",
            "06cd1a4d0593cec35e8110e4193cfa993c0b491a"
        ],
        [
            "intros p q r H' H'0 H'1 H'2.",
            "VernacExtend",
            "83b3ef77da60d23370e4e44956d681f7820b20e2"
        ],
        [
            "cut (Fcanonic radix b (Fnormalize radix b precision r)); [ intros tmp; Casec tmp; intros Fs | idtac ].",
            "VernacExtend",
            "9a22a060006b7113ecf04f985b3e4ea5cd34c6ed"
        ],
        [
            "3: apply FnormalizeCanonic; auto with arith.",
            "VernacExtend",
            "93c97d1e352d3f78cf06966e947252bd00077cca"
        ],
        [
            "3: apply RoundedModeBounded with (radix := radix) (P := Closest b radix) (r := (p + q)%R); auto.",
            "VernacExtend",
            "c0d2889d7fceda71b954c93d378c02da13918d84"
        ],
        [
            "3: apply ClosestRoundedModeP with (precision := precision); auto.",
            "VernacExtend",
            "9cc45999bfb93d3491b09a9beaafde358b047a45"
        ],
        [
            "2: rewrite <- (plusExact1 p q (Fnormalize radix b precision r)); auto.",
            "VernacExtend",
            "109928bbe449eba4e560644165fbd2052c8f8d48"
        ],
        [
            "2: unfold FtoRradix in |- *; rewrite FnormalizeCorrect; auto.",
            "VernacExtend",
            "5b436a693e0b9a13798856f638db82ccb0114bd7"
        ],
        [
            "2: replace (FtoR radix r - FtoR radix r)%R with 0%R; [ idtac | ring ].",
            "VernacExtend",
            "5fc2d69e0cafa1aba6e626ce68c2964e59c8e8ce"
        ],
        [
            "2: rewrite Rabs_R0.",
            "VernacExtend",
            "1bfd2bd66318b3deb80e7b15a423564f7919ff7f"
        ],
        [
            "2: replace 0%R with (0 * (radix * / Zpos (vNum b)))%R; [ apply Rmult_le_compat_r | ring ]; auto with real zarith.",
            "VernacExtend",
            "b936df71faa9405b468e3f4b5060dd2223273dec"
        ],
        [
            "2: replace 0%R with (0 * / Zpos (vNum b))%R; [ apply Rmult_le_compat_r | ring ]; auto with real zarith.",
            "VernacExtend",
            "223a9297138ee9f69de2c91eacdca448b2c69672"
        ],
        [
            "2: replace 0%R with (0 * / 2%nat)%R; [ apply Rmult_le_compat_r | ring ]; auto with real zarith.",
            "VernacExtend",
            "bb439738a09f88d57c460192a5587a32dbffe7ec"
        ],
        [
            "2: apply (ClosestCompatible b radix (p + q)%R (p + q)%R r); auto.",
            "VernacExtend",
            "74d022f0b77949e4ed51b4fd5dc7430a72a6212e"
        ],
        [
            "2: apply sym_eq; apply FnormalizeCorrect; auto.",
            "VernacExtend",
            "7e612388dba2488cd451e8563314073d98ddb2c8"
        ],
        [
            "2: apply FnormalizeBounded; auto with arith.",
            "VernacExtend",
            "47fb66c0faa77db3050db3af062d7f01984914c1"
        ],
        [
            "2: apply RoundedModeBounded with (radix := radix) (P := Closest b radix) (r := (p + q)%R); auto.",
            "VernacExtend",
            "ce259c19963eafc9ff93731a455c42156bfd1ae4"
        ],
        [
            "2: apply ClosestRoundedModeP with (precision := precision); auto.",
            "VernacExtend",
            "62e23def5bb2bfa5adccd2c929e9e979b2503071"
        ],
        [
            "2: replace (Fexp (Fnormalize radix b precision r)) with (- dExp b)%Z.",
            "VernacExtend",
            "92b030345f061925e69dba12ecb70a6c7b26242d"
        ],
        [
            "2: unfold Zmin in |- *; case (Fexp p ?= Fexp q)%Z; intuition.",
            "VernacExtend",
            "345735b71f14288b4b55aec83883b34dab3f0b5b"
        ],
        [
            "2: case Fs; intros H1 (H2, H3); auto.",
            "VernacExtend",
            "1f5674f8c4837136ea942027ffe1e406bde82dc7"
        ],
        [
            "apply Rle_trans with (/ 2%nat * Fulp b radix precision r)%R.",
            "VernacExtend",
            "e376ef4f3063b88b09860d4b189ad8a8f2d4bd85"
        ],
        [
            "replace (Rabs (FtoRradix r - (FtoRradix p + FtoRradix q))) with (/ 2%nat * (2%nat * Rabs (FtoRradix r - (FtoRradix p + FtoRradix q))))%R; [ idtac | rewrite <- Rmult_assoc; rewrite Rinv_l; auto with real ].",
            "VernacExtend",
            "ab81d94c3576edeb39c302d9a70b06bd8a14687d"
        ],
        [
            "apply Rmult_le_compat_l; auto with real.",
            "VernacExtend",
            "bf324a586bfbe5f57a13931b6a23d59d989b4278"
        ],
        [
            "replace (FtoRradix r - (FtoRradix p + FtoRradix q))%R with (- (FtoRradix p + FtoRradix q - FtoRradix r))%R; [ rewrite Rabs_Ropp | ring ].",
            "VernacExtend",
            "ec31eb38a983725b4943e1c2ffed3a42bdd61f50"
        ],
        [
            "apply (ClosestUlp b radix); auto.",
            "VernacExtend",
            "4de7a50c58b19774106ce585037bf14e593786ff"
        ],
        [
            "replace (Rabs r * / 2%nat * (radix * / Zpos (vNum b)))%R with (/ 2%nat * (Rabs r * (radix * / Zpos (vNum b))))%R; [ apply Rmult_le_compat_l; auto with real | ring ].",
            "VernacExtend",
            "2152d91a0543095c844cd9fad759dbeeba8b3bf6"
        ],
        [
            "replace (Fulp b radix precision r) with (Zpos (vNum b) * FtoR radix (Float 1%nat (Zpred (Fexp (Fnormalize radix b precision r)))) * (radix * / Zpos (vNum b)))%R.",
            "VernacExtend",
            "80ca54ebacd63cfc8d8fd01c5be078dfbd1d18be"
        ],
        [
            "apply Rmult_le_compat_r.",
            "VernacExtend",
            "6c4c5a82dab802842919dd673f1978a3cb8cff73"
        ],
        [
            "replace 0%R with (radix * 0)%R; [ apply Rmult_le_compat_l | ring ]; apply Rlt_le; auto with real arith; rewrite INR_IZR_INZ; apply Rlt_IZR; simpl in |- *; apply Zlt_1_O; apply Zlt_le_weak; apply (vNumbMoreThanOne radix) with (precision := precision); auto with zarith.",
            "VernacExtend",
            "7893ae1458801a16547edbd8003e4ee286a0cc39"
        ],
        [
            "unfold FtoRradix in |- *; rewrite <- (FnormalizeCorrect _ radixMoreThanOne b precision r).",
            "VernacExtend",
            "997c80e49fc61331267890e797be1823bdf42085"
        ],
        [
            "rewrite <- (Fabs_correct radix); auto with arith.",
            "VernacExtend",
            "e2b37eb43dcf546cef8bf75933f938fca8ae2321"
        ],
        [
            "apply FnormalBoundAbs2 with precision; auto with arith.",
            "VernacExtend",
            "905c1e9682e2a294a96d90597a0d1212aee9809e"
        ],
        [
            "unfold Fulp, FtoRradix, FtoR in |- *; simpl in |- *.",
            "VernacExtend",
            "9befe3be2f9bb77dfad9eb989ace048cea1fdb20"
        ],
        [
            "apply trans_eq with (nat_of_P (vNum b) * / nat_of_P (vNum b) * (radix * powerRZ radix (Zpred (Fexp (Fnormalize radix b precision r)))))%R; [ unfold IZR at 1 5; repeat rewrite <- INR_IPR; ring | idtac].",
            "VernacExtend",
            "a34da8c666030dcca9d8fc9bf80aa9ae3e932960"
        ],
        [
            "rewrite Rinv_r; auto with real arith.",
            "VernacExtend",
            "a5cdd69b6f41591319bdf09a210071d079f7df71"
        ],
        [
            "rewrite <- powerRZ_Zs; auto with real zarith.",
            "VernacExtend",
            "e628c4e6a44f3e48a9ab7e84363f341511cc1036"
        ],
        [
            "rewrite <- Zsucc_pred; ring.",
            "VernacExtend",
            "4a1a06d7ba41792f5bb1bd14d6df6b0906f7810b"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Theorem plusErrorBound1withZero : forall p q r : float, Fbounded b p -> Fbounded b q -> Closest b radix (p + q) r -> (Rabs (r - (p + q)) <= Rabs r * / 2%nat * (radix * / pPred (vNum b)))%R.",
            "VernacStartTheoremProof",
            "c1fbced6d0f30dc9717654b57b613bb4d16203e9"
        ],
        [
            "intros p q r H H0 H1.",
            "VernacExtend",
            "e0d554c20a66eb783e75f7149a7019e56a8b0289"
        ],
        [
            "case (Req_dec r 0); intros Hr.",
            "VernacExtend",
            "7832c55da25d6ef427b53b2727074a950dbb162f"
        ],
        [
            "replace (Rabs (r - (p + q))) with (Rabs r * / 2%nat * 0)%R.",
            "VernacExtend",
            "2ca5ff70f3d1b13522cd177910f3f2b088a75732"
        ],
        [
            "apply Rmult_le_compat_l.",
            "VernacExtend",
            "509839294acd7016ba82d594bfdb05afe131eed3"
        ],
        [
            "replace 0%R with (Rabs r * 0)%R; [ apply Rmult_le_compat_l | ring ]; auto with real arith.",
            "VernacExtend",
            "a0992b8b86e693fb6389eebc596b8293a03bf655"
        ],
        [
            "replace 0%R with (radix * 0)%R; [ apply Rmult_le_compat_l | ring ]; auto with real arith.",
            "VernacExtend",
            "9dda9399919e112edb263dab7383d1f496ffcc89"
        ],
        [
            "apply Rlt_le; apply Rinv_0_lt_compat; auto with real arith.",
            "VernacExtend",
            "13a23d70fc2e377c85a5b9244e4fa4843dfd30ed"
        ],
        [
            "replace 0%R with (IZR 0%nat); auto with real zarith; apply Rlt_IZR.",
            "VernacExtend",
            "a578d349786f6adb4f62a9bd7ceea327cd738409"
        ],
        [
            "apply Zle_lt_trans with (nNormMin radix precision).",
            "VernacExtend",
            "f3095ead33cf705e5d3a2b23a1abdc47f0612f98"
        ],
        [
            "apply Zlt_le_weak; apply nNormPos; auto with real zarith.",
            "VernacExtend",
            "4b4de5650b5996b748fb11b97fdf1dd070973bfe"
        ],
        [
            "apply nNormMimLtvNum; auto with real zarith.",
            "VernacExtend",
            "e8b6c34cb6fa153233aefd62dd1c76f5a6801456"
        ],
        [
            "rewrite <- plusExactR0 with (3 := H1); auto with real zarith.",
            "VernacExtend",
            "786ae2a4e0f0b1eb9859232895019a64768e9730"
        ],
        [
            "rewrite Hr; repeat rewrite Rabs_R0 || (rewrite Rminus_diag_eq; auto); ring.",
            "VernacExtend",
            "792d7830da92a5a9667640a71792218a7584ba55"
        ],
        [
            "apply Rlt_le; apply plusErrorBound1; auto.",
            "VernacExtend",
            "3d42345c0d799524234b255d8643650325bfb72f"
        ],
        [
            "Contradict Hr; unfold FtoRradix in |- *; apply is_Fzero_rep1; auto.",
            "VernacExtend",
            "3415bf941a94c5e3da11ae01e558a1f1b620f52c"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Theorem pPredMoreThanOne : (0 < pPred (vNum b))%Z.",
            "VernacStartTheoremProof",
            "7b15fa672a91f46173a500b2288f15d78aa46c2e"
        ],
        [
            "unfold pPred in |- *; apply Zlt_succ_pred; simpl in |- *.",
            "VernacExtend",
            "7116e0555b780c05d1675150b01ef688a461eab7"
        ],
        [
            "apply (vNumbMoreThanOne radix) with (precision := precision); auto with zarith.",
            "VernacExtend",
            "c29f7cde7313a0159f5e6e723b15563e2dc77df2"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Theorem pPredMoreThanRadix : (radix < pPred (vNum b))%Z.",
            "VernacStartTheoremProof",
            "f854a7d3cd2d636f690015b74135b73afb47147c"
        ],
        [
            "apply Zle_lt_trans with (nNormMin radix precision).",
            "VernacExtend",
            "f3095ead33cf705e5d3a2b23a1abdc47f0612f98"
        ],
        [
            "pattern radix at 1 in |- *; rewrite <- (Zpower_nat_1 radix); unfold nNormMin in |- *; auto with zarith.",
            "VernacExtend",
            "b4e5c2942a7008c25d52177eeb717af23c0cb18c"
        ],
        [
            "apply nNormMimLtvNum; auto with zarith.",
            "VernacExtend",
            "f61ff0b6fa6f36ae537d2bfb56e8175407c9edec"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Theorem RoundBound : forall x y p : float, Fbounded b x -> Fbounded b y -> Fbounded b p -> Closest b radix (x + y) p -> (radix < 2%nat * pPred (vNum b))%Z -> (Rabs p <= Rabs (x + y) * (2%nat * pPred (vNum b) * / (2%nat * pPred (vNum b) - radix)))%R.",
            "VernacStartTheoremProof",
            "b40b976d4e670177505b0333bb1f05c2d1debe92"
        ],
        [
            "intros x y p H H0 H1 H2 H3.",
            "VernacExtend",
            "31885735a535026224a9930db4df7d7f90427852"
        ],
        [
            "cut (0 < 2%nat * pPred (vNum b))%Z; [ intros NZ1 | apply Zlt_trans with radix; auto with zarith ].",
            "VernacExtend",
            "d162b609256cf64103294297652493790f5c0661"
        ],
        [
            "cut (0 < 2%nat * pPred (vNum b))%R; [ intros NZ1' | rewrite INR_IZR_INZ; rewrite <- Rmult_IZR; auto with real zarith ].",
            "VernacExtend",
            "8c930183dccb7307f7674a6b33fae6937d8e6048"
        ],
        [
            "cut (radix < 2%nat * pPred (vNum b))%R; [ intros NZ2 | rewrite INR_IZR_INZ; rewrite <- Rmult_IZR; auto with real zarith ].",
            "VernacExtend",
            "89934082f6e07a0907343898e4635dc2ab15e6bb"
        ],
        [
            "replace (Rabs p) with (Rabs p * ((2%nat * pPred (vNum b) - radix) * / (2%nat * pPred (vNum b))) * (2%nat * pPred (vNum b) * / (2%nat * pPred (vNum b) - radix)))%R.",
            "VernacExtend",
            "a5681ca998e32e6796dd224dfc7684e5a0be79bf"
        ],
        [
            "2: replace (Rabs p * ((2%nat * pPred (vNum b) - radix) * / (2%nat * pPred (vNum b))) * (2%nat * pPred (vNum b) * / (2%nat * pPred (vNum b) - radix)))%R with (Rabs p * ((2%nat * pPred (vNum b) - radix) * / (2%nat * pPred (vNum b) - radix)) * (2%nat * pPred (vNum b) * / (2%nat * pPred (vNum b))))%R; [ idtac | ring ].",
            "VernacExtend",
            "853306817e7a28e6f11d1788a276369c190ddccf"
        ],
        [
            "2: repeat rewrite Rinv_r; auto with real zarith; try ring.",
            "VernacExtend",
            "28627929155074898cc3fbed5bc8c0f33c74425b"
        ],
        [
            "apply Rmult_le_compat_r.",
            "VernacExtend",
            "6c4c5a82dab802842919dd673f1978a3cb8cff73"
        ],
        [
            "replace 0%R with (2%nat * pPred (vNum b) * 0)%R; [ apply Rmult_le_compat_l | ring ]; auto with real zarith.",
            "VernacExtend",
            "33619be536173ac8a2aaa25e000f5ceb38789788"
        ],
        [
            "replace ((2%nat * pPred (vNum b) - radix) * / (2%nat * pPred (vNum b)))%R with (1 - radix * / (2%nat * pPred (vNum b)))%R.",
            "VernacExtend",
            "86bda7e9f0a492f1d58f3d4278d196682c7fb1cc"
        ],
        [
            "2: unfold Rminus in |- *; rewrite Rmult_plus_distr_r; rewrite Rinv_r; auto with real.",
            "VernacExtend",
            "5da3cf9c1895a36317edf9206d2870bfdd56d54f"
        ],
        [
            "replace (Rabs p * (1 - radix * / (2%nat * pPred (vNum b))))%R with (Rabs p - Rabs p * (radix * / (2%nat * pPred (vNum b))))%R; [ idtac | ring; ring ].",
            "VernacExtend",
            "c224f57848ab996e0f129ce05cd958dd8ccf7f51"
        ],
        [
            "apply Rplus_le_reg_l with (Rabs p * (radix * / (2%nat * pPred (vNum b))))%R.",
            "VernacExtend",
            "ab6d743087c3a329e977167eb152c392613e1abb"
        ],
        [
            "replace (Rabs (FtoRradix p) * (radix * / (2%nat * pPred (vNum b))) + (Rabs (FtoRradix p) - Rabs (FtoRradix p) * (radix * / (2%nat * pPred (vNum b)))))%R with (Rabs p); [ idtac | ring ].",
            "VernacExtend",
            "46806e0d67cd60ebb296d3bbea92eac905147301"
        ],
        [
            "apply Rle_trans with (Rabs (p - (x + y)) + Rabs (x + y))%R.",
            "VernacExtend",
            "c0a5f6cb0a20de2444bb2c9a98c403777c0dee0e"
        ],
        [
            "pattern (FtoRradix p) at 1 in |- *; replace (FtoRradix p) with (p - (x + y) + (x + y))%R; [ apply Rabs_triang | ring ].",
            "VernacExtend",
            "619e20595720e031d6145e9459c67a51523c140d"
        ],
        [
            "rewrite (Rplus_comm (Rabs (p - (x + y))) (Rabs (x + y))); rewrite (Rplus_comm (Rabs p * (radix * / (2%nat * pPred (vNum b)))) (Rabs (x + y))) ; apply Rplus_le_compat_l.",
            "VernacExtend",
            "1d136a1670cea894bc1ada24c0bca6c7601cbd49"
        ],
        [
            "replace (Rabs p * (radix * / (2%nat * pPred (vNum b))))%R with (Rabs p * / 2%nat * (radix * / pPred (vNum b)))%R; [ apply plusErrorBound1withZero | idtac ]; auto.",
            "VernacExtend",
            "cc4da3e0d15c0253569b7aec89a0c8f78b163836"
        ],
        [
            "rewrite (Rinv_mult_distr 2%nat (pPred (vNum b))); auto with real zarith.",
            "VernacExtend",
            "02590190693edd2549dcbb58b3ea5be26d5a1791"
        ],
        [
            "ring.",
            "VernacExtend",
            "baadd9fc4c175005af409bb466fcea9fab25b4e6"
        ],
        [
            "apply NEq_IZRO; auto with real zarith.",
            "VernacExtend",
            "5933220243976bb1abbdf727d4aca8de2546a3cc"
        ],
        [
            "generalize pPredMoreThanOne; auto with zarith.",
            "VernacExtend",
            "d14306a314db136b4409f872452249ea7795113b"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Theorem plusExactExp : forall p q pq : float, Fbounded b p -> Fbounded b q -> Closest b radix (p + q) pq -> ex (fun r : float => ex (fun s : float => Fbounded b r /\\ Fbounded b s /\\ s = pq :>R /\\ r = (p + q - s)%R :>R /\\ Fexp r = Zmin (Fexp p) (Fexp q) :>Z /\\ (Fexp r <= Fexp s)%Z /\\ (Fexp s <= Zsucc (Zmax (Fexp p) (Fexp q)))%Z)).",
            "VernacStartTheoremProof",
            "ebbef6d7932d0fd7805fcead84ec1a55cfe66220"
        ],
        [
            "intros p q pq H H0 H1.",
            "VernacExtend",
            "0e9313482fb6ebe8327ea08d850fabfb17b5c85c"
        ],
        [
            "case (plusExpBound b radix precision) with (P := Closest b radix) (5 := H1); auto with zarith.",
            "VernacExtend",
            "cc0ab0df19cc6a2413c860f0a17e87e24ef44fa9"
        ],
        [
            "apply (ClosestRoundedModeP b radix precision); auto with zarith.",
            "VernacExtend",
            "84a6269172cdf47704b2147007292004f6b97f96"
        ],
        [
            "intros r (H2, (H3, (H4, H5))); fold FtoRradix in H3.",
            "VernacExtend",
            "a22058348e92cde906519ebe4ee6460666dbcb00"
        ],
        [
            "case (Req_dec (p + q - pq) 0); intros Hr.",
            "VernacExtend",
            "5eee04f1907c1f88ee7056ffea3b2dc370bd2b60"
        ],
        [
            "cut (Fbounded b (Fzero (Zmin (Fexp p) (Fexp q)))); [ intros Fbs | idtac ].",
            "VernacExtend",
            "4eb4175a2148dfbb5d139c5e6ba0d228d816b9fd"
        ],
        [
            "exists (Fzero (Zmin (Fexp p) (Fexp q))); exists r; repeat (split; auto).",
            "VernacExtend",
            "4aa116844ffea7245e1cb55cd1bf09fb6cd00759"
        ],
        [
            "rewrite (FzeroisReallyZero radix); rewrite <- Hr; rewrite <- H3; auto.",
            "VernacExtend",
            "21f2cda92dce5b402b30004c36df3cf19d1cac4f"
        ],
        [
            "case (Zmin_or (Fexp p) (Fexp q)); intros Hz; rewrite Hz; apply FboundedZeroSameExp; auto.",
            "VernacExtend",
            "30494bfeaeabcf8ad3f1389a0872bb42f3869deb"
        ],
        [
            "case (errorBoundedPlus p q pq); auto.",
            "VernacExtend",
            "7464e84ae83a421768847f2fc11ea0248b3949a3"
        ],
        [
            "intros error (H6, (H7, H8)).",
            "VernacExtend",
            "02519eab55a0ded98e39fbe6c2464624d4ee13a0"
        ],
        [
            "exists error; exists r; repeat (split; auto).",
            "VernacExtend",
            "94e89883a1db67ad69a186d0304aaa00a95f41ef"
        ],
        [
            "rewrite H3; auto.",
            "VernacExtend",
            "81f0b52fdaf5f5da8eefafd4263db88cb26c67d0"
        ],
        [
            "rewrite H8; auto.",
            "VernacExtend",
            "f12c3889b03009c0e07f35afb32f3af7fbe3b6ce"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Theorem plusExactExpCanonic : forall c d p q : float, Fbounded b c -> Fbounded b d -> Fbounded b p -> Fbounded b q -> Closest b radix (c + d) p -> q = (c + d - p)%R :>R -> q <> 0%R :>R -> ex (fun r : float => ex (fun s : float => Fcanonic radix b s /\\ Fbounded b r /\\ s = p :>R /\\ r = (c + d - s)%R :>R /\\ Fexp r = Zmin (Fexp c) (Fexp d) :>Z /\\ (Fexp r < Fexp s)%Z /\\ (Fexp s <= Zsucc (Zmax (Fexp c) (Fexp d)))%Z)).",
            "VernacStartTheoremProof",
            "3857585d8719494aa1791f1bb9d525c52d2a48dd"
        ],
        [
            "intros c d p q H H0 H1 H2 H3 H4 H5.",
            "VernacExtend",
            "59876b3be8f6a84c4fdb2af89cdfc2886860746a"
        ],
        [
            "case (plusExactExp c d p); auto.",
            "VernacExtend",
            "cbcead44af13131515514e40b838351f31f579cb"
        ],
        [
            "intros r (s, (H6, (H7, (H8, (H9, (H10, (H11, H12))))))).",
            "VernacExtend",
            "3f37f764a9a47102b802c17f7204a444035a4031"
        ],
        [
            "exists r; exists (Fnormalize radix b precision s).",
            "VernacExtend",
            "cd9704ac9a1ffa9332160d48cc777807aeaa77fb"
        ],
        [
            "repeat (split; auto with float).",
            "VernacExtend",
            "a522a5b6be5cb6c1d6a271e0acc6e9e843ab8ef8"
        ],
        [
            "apply FnormalizeCanonic; auto with arith.",
            "VernacExtend",
            "38090fba049d672f91a024edd56166758e23d7ca"
        ],
        [
            "rewrite <- H8; apply (FnormalizeCorrect radix); auto with zarith.",
            "VernacExtend",
            "5130146819f77900bdf2365e7317a38994fa7360"
        ],
        [
            "rewrite (FnormalizeCorrect radix); auto with zarith.",
            "VernacExtend",
            "0716d31753bc24920b89870f4d834b03b3ac7b5c"
        ],
        [
            "apply ClosestErrorExpStrict with (radix := radix) (b := b) (precision := precision) (x := (c + d)%R); auto with float.",
            "VernacExtend",
            "fa3793da6e464d9892232c69109d2fd545b50651"
        ],
        [
            "apply FnormalizeBounded; auto with arith.",
            "VernacExtend",
            "ae781619123afbb565d7494393a4ac416a52494d"
        ],
        [
            "apply (ClosestCompatible b radix (c + d)%R (c + d)%R p); auto.",
            "VernacExtend",
            "6fd1fede2948a8a4a22f7ebf7372164a96d9658e"
        ],
        [
            "rewrite (FnormalizeCorrect radix); auto with zarith.",
            "VernacExtend",
            "0716d31753bc24920b89870f4d834b03b3ac7b5c"
        ],
        [
            "apply FnormalizeBounded; auto with arith.",
            "VernacExtend",
            "ae781619123afbb565d7494393a4ac416a52494d"
        ],
        [
            "rewrite (FnormalizeCorrect radix); auto with zarith.",
            "VernacExtend",
            "0716d31753bc24920b89870f4d834b03b3ac7b5c"
        ],
        [
            "fold FtoRradix in |- *; rewrite H9; rewrite H8; rewrite <- H4; auto.",
            "VernacExtend",
            "77e055dc5877c284dfc6017ee5d7b1a516efa3a9"
        ],
        [
            "apply Zle_trans with (Fexp s); auto.",
            "VernacExtend",
            "e92a6e6d03ef655bfea72ce4c449133a13cb3823"
        ],
        [
            "apply FcanonicLeastExp with radix b precision; auto with arith.",
            "VernacExtend",
            "7904d90ed0be63556cb1f42e3fc392554080a578"
        ],
        [
            "apply sym_eq; apply FnormalizeCorrect; auto with real.",
            "VernacExtend",
            "690f79e28bf751a71dc9369844f70d40808fd6db"
        ],
        [
            "apply FnormalizeCanonic; auto with arith.",
            "VernacExtend",
            "38090fba049d672f91a024edd56166758e23d7ca"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "End ClosestP.",
            "VernacEndSegment",
            "68d00a6764572e0be9d105094934ede1f4c55735"
        ]
    ],
    "proofs": [
        {
            "name": "errorBoundedPlusAbs",
            "line_nb": 57,
            "steps": [
                {
                    "command": [
                        "intros p q pq H' H'0 H'1.",
                        "VernacExtend",
                        "36447ce0c4a9867618dea283e8074499e4ad7b2e"
                    ]
                },
                {
                    "command": [
                        "case (Zle_or_lt (Fexp p) (Fexp q)); intros H'2.",
                        "VernacExtend",
                        "d3b1e39e8e22060157e454b312673ca5de3e5d7a"
                    ]
                },
                {
                    "command": [
                        "apply errorBoundedPlusLe; auto.",
                        "VernacExtend",
                        "f1ab033b7a7670c01902299e6879243be0b9c2e4"
                    ]
                },
                {
                    "command": [
                        "replace (p + q)%R with (q + p)%R; [ idtac | ring ].",
                        "VernacExtend",
                        "e216ce4fdf701ad8a22b24445b9a4d2fc634cf1c"
                    ]
                },
                {
                    "command": [
                        "replace (Zmin (Fexp p) (Fexp q)) with (Zmin (Fexp q) (Fexp p)); [ idtac | apply Zmin_sym ].",
                        "VernacExtend",
                        "b319eceb367941f6fc2ca8439417c65f9c476eb6"
                    ]
                },
                {
                    "command": [
                        "apply errorBoundedPlusLe; auto.",
                        "VernacExtend",
                        "f1ab033b7a7670c01902299e6879243be0b9c2e4"
                    ]
                },
                {
                    "command": [
                        "auto with zarith.",
                        "VernacExtend",
                        "23f42fd3236dcece4a40b3a666dce57fea69a9c0"
                    ]
                },
                {
                    "command": [
                        "apply (ClosestCompatible b radix (p + q)%R (q + p)%R pq); auto.",
                        "VernacExtend",
                        "c5f8f739d78d26772adae1a280b7ec1caeda086c"
                    ]
                },
                {
                    "command": [
                        "ring.",
                        "VernacExtend",
                        "baadd9fc4c175005af409bb466fcea9fab25b4e6"
                    ]
                },
                {
                    "command": [
                        "case H'1; auto.",
                        "VernacExtend",
                        "a44f1b914e489dd19b841fdfab025ba14e3d8f86"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "errorBoundedPlus",
            "line_nb": 69,
            "steps": [
                {
                    "command": [
                        "intros p q pq H' H'0 H'1.",
                        "VernacExtend",
                        "36447ce0c4a9867618dea283e8074499e4ad7b2e"
                    ]
                },
                {
                    "command": [
                        "case (errorBoundedPlusAbs p q pq); auto.",
                        "VernacExtend",
                        "14f45aed281ab5fb4526e2a97c7cea5dc57b0a93"
                    ]
                },
                {
                    "command": [
                        "intros x H'2; elim H'2; intros H'3 H'4; elim H'4; intros H'5 H'6; clear H'4 H'2.",
                        "VernacExtend",
                        "721ef3ee78f64989a2fb9b6f14c58ac85a2dccc8"
                    ]
                },
                {
                    "command": [
                        "generalize H'3; clear H'3.",
                        "VernacExtend",
                        "b17279efb82ca177021cdc036f341c968c9832c2"
                    ]
                },
                {
                    "command": [
                        "unfold Rabs in |- *; case (Rcase_abs (p + q - pq)).",
                        "VernacExtend",
                        "f92641dda1dcf1bf9a0f95735df63949ae67f735"
                    ]
                },
                {
                    "command": [
                        "intros H'2 H'3; exists (Fopp x); split; auto.",
                        "VernacExtend",
                        "baab3caeb730a4ad629b08d4b800f15d9de30e88"
                    ]
                },
                {
                    "command": [
                        "unfold FtoRradix in |- *; rewrite Fopp_correct; auto.",
                        "VernacExtend",
                        "cb2f7c06ddf935b881f8dc588261d2ace6d5cb81"
                    ]
                },
                {
                    "command": [
                        "unfold FtoRradix in H'3; rewrite H'3; ring.",
                        "VernacExtend",
                        "b8221b8fd2a5123d8ec4fed85a13846f7b749a90"
                    ]
                },
                {
                    "command": [
                        "split.",
                        "VernacExtend",
                        "55abc140132bd88981001ac656020469a8d503eb"
                    ]
                },
                {
                    "command": [
                        "apply oppBounded; auto.",
                        "VernacExtend",
                        "6e68d2122eeea082741ca4e279707ce0511c71ef"
                    ]
                },
                {
                    "command": [
                        "rewrite <- H'6; auto.",
                        "VernacExtend",
                        "1f7cef3e0988185351588717c6357ca782ed0879"
                    ]
                },
                {
                    "command": [
                        "intros H'2 H'3; exists x; split; auto.",
                        "VernacExtend",
                        "65b7df293034d86287dbafc65043dae5c540511e"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "plusExact1bis",
            "line_nb": 130,
            "steps": [
                {
                    "command": [
                        "intros p0 q0 r0 H' H'0 H'1 H'2; case (Zle_or_lt (Fexp r0) (Zmin (Fexp p0) (Fexp q0))); auto.",
                        "VernacExtend",
                        "026b4b80307725a9556ec6dc8eb3b35edef06df7"
                    ]
                },
                {
                    "command": [
                        "intros H'3; Contradict H'2.",
                        "VernacExtend",
                        "6be5d11e3de99cb576767598c9ec09088ef0b0ad"
                    ]
                },
                {
                    "command": [
                        "apply plusExact1; auto.",
                        "VernacExtend",
                        "34007a63d1e676937352ec50e9d97a0bb8fdb974"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "plusExact2Aux",
            "line_nb": 135,
            "steps": [
                {
                    "command": [
                        "intros p q r H' H'0 H'1 H'2 H'3.",
                        "VernacExtend",
                        "bf7e9748d84120b596d3a9536c102c4e75c10900"
                    ]
                },
                {
                    "command": [
                        "apply plusExact1; auto.",
                        "VernacExtend",
                        "34007a63d1e676937352ec50e9d97a0bb8fdb974"
                    ]
                },
                {
                    "command": [
                        "apply FcanonicBound with (1 := H'0); auto.",
                        "VernacExtend",
                        "6cc847b933a0c4495ce3fac83322cf7987fd6177"
                    ]
                },
                {
                    "command": [
                        "case (Zle_or_lt (Fexp p) (Fexp q)); intros Zl1.",
                        "VernacExtend",
                        "ce6f2002f048190d74cbad52931efbe4954544ed"
                    ]
                },
                {
                    "command": [
                        "rewrite Zmin_le1; auto with zarith.",
                        "VernacExtend",
                        "0b0349f06a26f8988aaed6e8a928ec5b5b955ca6"
                    ]
                },
                {
                    "command": [
                        "apply Zle_trans with (Zpred (Fexp p)); auto with zarith.",
                        "VernacExtend",
                        "6b0007f0bc17e96a7b1397cdd17de1d379c23f69"
                    ]
                },
                {
                    "command": [
                        "unfold Zpred in |- *; auto with zarith.",
                        "VernacExtend",
                        "43771d5630a18be2e2a89e880f229253e9aa05e6"
                    ]
                },
                {
                    "command": [
                        "rewrite Zmin_le2; auto with zarith.",
                        "VernacExtend",
                        "6f4c81526e84063f15b475a1bbaa698cb007d6d3"
                    ]
                },
                {
                    "command": [
                        "case (Zlt_next _ _ Zl1); intros Zl2.",
                        "VernacExtend",
                        "355702e92228ac9bdb1fc94db7d660fe9026f080"
                    ]
                },
                {
                    "command": [
                        "rewrite Zl2 in H'3.",
                        "VernacExtend",
                        "b804f1774d8bcecd0837237cc070921f2c5d6c46"
                    ]
                },
                {
                    "command": [
                        "replace (Fexp q) with (Zpred (Zsucc (Fexp q))); auto with zarith; unfold Zpred, Zsucc in |- *; ring.",
                        "VernacExtend",
                        "91c740e0d3d1d027b009783e51b0d1a2205a7f5b"
                    ]
                },
                {
                    "command": [
                        "case H'0; clear H'0; intros H'0.",
                        "VernacExtend",
                        "a11cec05af0c2662269196e11e5283d8e11eb1dc"
                    ]
                },
                {
                    "command": [
                        "absurd (r < Float (nNormMin radix precision) (Zpred (Fexp p)))%R.",
                        "VernacExtend",
                        "44b092d8a5293f6ad74001ae51a4d651ee1583e3"
                    ]
                },
                {
                    "command": [
                        "apply Rle_not_lt; auto.",
                        "VernacExtend",
                        "a14016e8637e06ef942ae2a016f397912a0b9bcd"
                    ]
                },
                {
                    "command": [
                        "unfold FtoRradix in |- *; apply (ClosestMonotone b radix (Float (nNormMin radix precision) (Zpred (Fexp p))) ( p + q)%R); auto; auto.",
                        "VernacExtend",
                        "d5c7dd5cf941eb5358a7b614ca8bdb0a35eeb69c"
                    ]
                },
                {
                    "command": [
                        "cut (Float (nNormMin radix precision) (Fexp p) <= p)%R; [ intros Eq1 | idtac ].",
                        "VernacExtend",
                        "bb28deb13c631dbd6b16a45458f207076dc4a3c9"
                    ]
                },
                {
                    "command": [
                        "case (Rle_or_lt 0 q); intros Rl1.",
                        "VernacExtend",
                        "9d20353aef8aa6cb6d5bfbf1ee3a04be029fbe0f"
                    ]
                },
                {
                    "command": [
                        "apply Rlt_le_trans with (FtoRradix p).",
                        "VernacExtend",
                        "ed592b6fa82cc50563c235cdaafa5b1076d30d0a"
                    ]
                },
                {
                    "command": [
                        "apply Rlt_le_trans with (FtoRradix (Float (nNormMin radix precision) (Fexp p))); auto.",
                        "VernacExtend",
                        "99d7bac9bedc63325b3147f41c9cb0340ca9cf0c"
                    ]
                },
                {
                    "command": [
                        "unfold FtoRradix, FtoR in |- *; simpl in |- *; auto.",
                        "VernacExtend",
                        "0a0ab92f652c540feedfb1f1261ea912fdc7adb7"
                    ]
                },
                {
                    "command": [
                        "apply Rmult_lt_compat_l; auto with real arith.",
                        "VernacExtend",
                        "2c95e3f10177f062380352d768090c173015e1d6"
                    ]
                },
                {
                    "command": [
                        "replace 0%R with (IZR 0%nat); auto with real; auto with real float arith.",
                        "VernacExtend",
                        "9d983fd8b4ac7e0768af1d737fba49bbc145a390"
                    ]
                },
                {
                    "command": [
                        "apply Rlt_IZR; apply nNormPos; auto with zarith.",
                        "VernacExtend",
                        "0c294ffd499edf90d53fba8284a4553cb155a504"
                    ]
                },
                {
                    "command": [
                        "unfold Zpred in |- *; auto with real float zarith arith.",
                        "VernacExtend",
                        "5fd193e19f765913152eb3fbdb5b5a66902348dc"
                    ]
                },
                {
                    "command": [
                        "pattern (FtoRradix p) at 1 in |- *; replace (FtoRradix p) with (p + 0)%R; auto with real.",
                        "VernacExtend",
                        "909da4429bd2c5d1dca89828a745e699be52e85e"
                    ]
                },
                {
                    "command": [
                        "apply Rplus_lt_reg_l with (r := (- q)%R); auto.",
                        "VernacExtend",
                        "e6a35d90bd15b7c0de69d1e61914475829e2b2ff"
                    ]
                },
                {
                    "command": [
                        "replace (- q + (p + q))%R with (FtoRradix p); [ idtac | ring ].",
                        "VernacExtend",
                        "299389143bccde4da7235a951da5f324d8683388"
                    ]
                },
                {
                    "command": [
                        "apply Rlt_le_trans with (FtoRradix (Float (nNormMin radix precision) (Fexp p))); auto.",
                        "VernacExtend",
                        "99d7bac9bedc63325b3147f41c9cb0340ca9cf0c"
                    ]
                },
                {
                    "command": [
                        "apply Rlt_le_trans with (2%nat * Float (nNormMin radix precision) (Zpred (Fexp p)))%R; auto.",
                        "VernacExtend",
                        "b00309d2b2985e53db29d305a9c9025f253746ad"
                    ]
                },
                {
                    "command": [
                        "cut (forall r : R, (2%nat * r)%R = (r + r)%R); [ intros tmp; rewrite tmp; clear tmp | intros; simpl in |- *; ring ].",
                        "VernacExtend",
                        "3672dc510eea391c5afce9a7c4f1fbf4fe7def75"
                    ]
                },
                {
                    "command": [
                        "rewrite (Rplus_comm (- q)).",
                        "VernacExtend",
                        "4ef928a3240a5110d3697b2eabd4730f3b6dc174"
                    ]
                },
                {
                    "command": [
                        "apply Rplus_lt_compat_l.",
                        "VernacExtend",
                        "cfadddfd242496b5b9297d5ae6868b0dbc12aeee"
                    ]
                },
                {
                    "command": [
                        "rewrite <- Faux.Rabsolu_left1; auto.",
                        "VernacExtend",
                        "8416aba2232b7d472962a3dd1bb5c39ba063d252"
                    ]
                },
                {
                    "command": [
                        "rewrite <- (Fabs_correct radix); auto with arith.",
                        "VernacExtend",
                        "e2b37eb43dcf546cef8bf75933f938fca8ae2321"
                    ]
                },
                {
                    "command": [
                        "unfold FtoRradix in |- *; apply maxMaxBis with (b := b); auto with zarith.",
                        "VernacExtend",
                        "59287bb497113ef73e1fa2e2142d5d8d6880436d"
                    ]
                },
                {
                    "command": [
                        "apply Rlt_le; auto.",
                        "VernacExtend",
                        "4003e3e1c449ee89cad9e953d0a562db8235648c"
                    ]
                },
                {
                    "command": [
                        "apply Rle_trans with (radix * Float (nNormMin radix precision) (Zpred (Fexp p)))%R.",
                        "VernacExtend",
                        "46902f0d4baedab610cee4875be568188bd426eb"
                    ]
                },
                {
                    "command": [
                        "apply Rmult_le_compat_r; auto.",
                        "VernacExtend",
                        "2808e2b8cdd6614e449e94a44d2d337ed31d7518"
                    ]
                },
                {
                    "command": [
                        "apply (LeFnumZERO radix); simpl in |- *; auto with arith.",
                        "VernacExtend",
                        "cfd2e7346e8552e2fbdc7f5d3627bedeaa27dd5e"
                    ]
                },
                {
                    "command": [
                        "apply Zlt_le_weak; apply nNormPos; auto with zarith.",
                        "VernacExtend",
                        "7e45f40da8f9e0fc6b07e83d446c1a2e81669354"
                    ]
                },
                {
                    "command": [
                        "rewrite INR_IZR_INZ; apply Rle_IZR; simpl in |- *; cut (1 < radix)%Z; auto with real zarith.",
                        "VernacExtend",
                        "77244d250c55cd40778f62156c8b75935ae0d73a"
                    ]
                },
                {
                    "command": [
                        "pattern (Fexp p) at 2 in |- *; replace (Fexp p) with (Zsucc (Zpred (Fexp p))); [ idtac | unfold Zsucc, Zpred in |- *; ring ].",
                        "VernacExtend",
                        "00716257be9808430c9fba57b85c6f55ef5cd4ae"
                    ]
                },
                {
                    "command": [
                        "unfold FtoRradix, FtoR in |- *; simpl in |- *.",
                        "VernacExtend",
                        "85a3da1582165d92ceb7faef707de88822bccf1a"
                    ]
                },
                {
                    "command": [
                        "rewrite powerRZ_Zs; auto with real zarith.",
                        "VernacExtend",
                        "1931a3978b6974020abfa1402ab4426f76878eb8"
                    ]
                },
                {
                    "command": [
                        "repeat rewrite <- Rmult_assoc.",
                        "VernacExtend",
                        "645aebe2c3685a4f868a05a2372130cedecea85e"
                    ]
                },
                {
                    "command": [
                        "rewrite (Rmult_comm radix); auto with real.",
                        "VernacExtend",
                        "ffd7ea94258224251a01dcc1731a0ebcf10a3406"
                    ]
                },
                {
                    "command": [
                        "unfold FtoRradix, FtoR in |- *; simpl in |- *; auto.",
                        "VernacExtend",
                        "0a0ab92f652c540feedfb1f1261ea912fdc7adb7"
                    ]
                },
                {
                    "command": [
                        "apply Rmult_le_compat_r; auto with real zarith.",
                        "VernacExtend",
                        "ab12f06210771823661c627ab200f2c736704e67"
                    ]
                },
                {
                    "command": [
                        "apply Rle_IZR.",
                        "VernacExtend",
                        "ad729fcfd043a8f36fc70d2fedfa18c333458480"
                    ]
                },
                {
                    "command": [
                        "rewrite <- (Zabs_eq (Fnum p)); auto with zarith.",
                        "VernacExtend",
                        "456716aaa09f7333ab5643fb1bd28f003ffae891"
                    ]
                },
                {
                    "command": [
                        "apply pNormal_absolu_min with (b := b); auto with arith.",
                        "VernacExtend",
                        "b22f9b4ee60a1052cf2831fcc09748a1d7730c95"
                    ]
                },
                {
                    "command": [
                        "unfold FtoRradix, FtoR in |- *; simpl in |- *; auto.",
                        "VernacExtend",
                        "0a0ab92f652c540feedfb1f1261ea912fdc7adb7"
                    ]
                },
                {
                    "command": [
                        "apply (LeR0Fnum radix); auto with arith.",
                        "VernacExtend",
                        "7a1ebbb6278802cde975520ed0ddd631bf368500"
                    ]
                },
                {
                    "command": [
                        "apply (RoundedModeProjectorIdem b radix (Closest b radix)); auto.",
                        "VernacExtend",
                        "4609aa098ae73c2fafe5736a67c3a55183726b45"
                    ]
                },
                {
                    "command": [
                        "apply ClosestRoundedModeP with (precision := precision); auto.",
                        "VernacExtend",
                        "eb6d3ee24dd119beb307169797f1cdd709b3ec7c"
                    ]
                },
                {
                    "command": [
                        "repeat split; simpl in |- *.",
                        "VernacExtend",
                        "2c5f9b5755e89db19a357ee80f313b6bcfad6997"
                    ]
                },
                {
                    "command": [
                        "rewrite Zabs_eq; auto with zarith.",
                        "VernacExtend",
                        "e3b6647506c6d43441146989691d7c27f1722b7e"
                    ]
                },
                {
                    "command": [
                        "apply ZltNormMinVnum; auto with arith.",
                        "VernacExtend",
                        "a99cc616a02620b5350cfee2c0558d79df65e890"
                    ]
                },
                {
                    "command": [
                        "apply Zlt_le_weak; apply nNormPos; auto with zarith.",
                        "VernacExtend",
                        "7e45f40da8f9e0fc6b07e83d446c1a2e81669354"
                    ]
                },
                {
                    "command": [
                        "apply Zle_trans with (Fexp q); auto with float zarith.",
                        "VernacExtend",
                        "bb3be6f93121c54d0a78c704c9af9a616fde01e6"
                    ]
                },
                {
                    "command": [
                        "case (Rle_or_lt 0 r); intros Rl1.",
                        "VernacExtend",
                        "39716886c3ea09ae66335276eed28679b0c0f36e"
                    ]
                },
                {
                    "command": [
                        "rewrite <- (Rabs_right r); auto with real.",
                        "VernacExtend",
                        "e7ba66539a2d0c2441d237d8229517e755cc9514"
                    ]
                },
                {
                    "command": [
                        "rewrite <- (Fabs_correct radix); auto with arith.",
                        "VernacExtend",
                        "e2b37eb43dcf546cef8bf75933f938fca8ae2321"
                    ]
                },
                {
                    "command": [
                        "unfold FtoRradix in |- *; apply maxMaxBis with (b := b); auto with zarith.",
                        "VernacExtend",
                        "59287bb497113ef73e1fa2e2142d5d8d6880436d"
                    ]
                },
                {
                    "command": [
                        "apply RoundedModeBounded with (radix := radix) (P := Closest b radix) (r := (p + q)%R); auto.",
                        "VernacExtend",
                        "89af83cf84428d80f70994c6f9be6125b0cac6cc"
                    ]
                },
                {
                    "command": [
                        "apply ClosestRoundedModeP with (precision := precision); auto with real.",
                        "VernacExtend",
                        "9c3052a0738613699d2b46866c6f05a7dc0de27f"
                    ]
                },
                {
                    "command": [
                        "apply Rlt_le_trans with 0%R; auto.",
                        "VernacExtend",
                        "73f5142f8adeec1254804f8db2c1e6f4864e9191"
                    ]
                },
                {
                    "command": [
                        "apply (LeFnumZERO radix); simpl in |- *; auto with arith.",
                        "VernacExtend",
                        "cfd2e7346e8552e2fbdc7f5d3627bedeaa27dd5e"
                    ]
                },
                {
                    "command": [
                        "apply Zlt_le_weak; apply nNormPos; auto with zarith.",
                        "VernacExtend",
                        "7e45f40da8f9e0fc6b07e83d446c1a2e81669354"
                    ]
                },
                {
                    "command": [
                        "absurd (- dExp b <= Fexp q)%Z; auto with float.",
                        "VernacExtend",
                        "edb27ffaa5950cae18974c1f5ece93c36fc4465f"
                    ]
                },
                {
                    "command": [
                        "apply Zlt_not_le.",
                        "VernacExtend",
                        "f50dda740686f871b63754e02667d404d580866b"
                    ]
                },
                {
                    "command": [
                        "case H'0; intros Z1 (Z2, Z3); rewrite <- Z2; auto with zarith.",
                        "VernacExtend",
                        "ac25f47c79aaafb1b60b15b09d6ffc3043e2de4a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "plusExact2",
            "line_nb": 209,
            "steps": [
                {
                    "command": [
                        "intros p q r H' H'0 H'1 H'2.",
                        "VernacExtend",
                        "83b3ef77da60d23370e4e44956d681f7820b20e2"
                    ]
                },
                {
                    "command": [
                        "case (Rle_or_lt 0 p); intros Rl1.",
                        "VernacExtend",
                        "aa6be71cc2b374664054155571961cb178d1e8df"
                    ]
                },
                {
                    "command": [
                        "apply plusExact2Aux; auto.",
                        "VernacExtend",
                        "83b50a70b643cc337ed22051094a765150f94cf2"
                    ]
                },
                {
                    "command": [
                        "replace (p + q)%R with (- (Fopp p + Fopp q))%R.",
                        "VernacExtend",
                        "08e0dee5cee6f39062d3954875e60e835748311a"
                    ]
                },
                {
                    "command": [
                        "rewrite <- (plusExact2Aux (Fopp p) (Fopp q) (Fopp r)); auto.",
                        "VernacExtend",
                        "5dfd1f00afca7004455cbfa98980bb83cd6fdbf7"
                    ]
                },
                {
                    "command": [
                        "unfold FtoRradix in |- *; rewrite Fopp_correct; ring.",
                        "VernacExtend",
                        "c960a8836af4508c923196902c16a5e22b8dbf05"
                    ]
                },
                {
                    "command": [
                        "unfold FtoRradix in |- *; rewrite Fopp_correct.",
                        "VernacExtend",
                        "c3c7ad16a924a974f39fb2584a800e7199b0444e"
                    ]
                },
                {
                    "command": [
                        "apply Rlt_le; replace 0%R with (-0)%R; auto with real.",
                        "VernacExtend",
                        "df144ef15bce5f13fad3c177bfa657d23ebb9e62"
                    ]
                },
                {
                    "command": [
                        "apply FcanonicFopp; auto with arith.",
                        "VernacExtend",
                        "84cf530bcba3d7a91cf05db0a4f9e39e598a91fb"
                    ]
                },
                {
                    "command": [
                        "apply oppBounded; auto.",
                        "VernacExtend",
                        "6e68d2122eeea082741ca4e279707ce0511c71ef"
                    ]
                },
                {
                    "command": [
                        "replace (Fopp p + Fopp q)%R with (- (p + q))%R.",
                        "VernacExtend",
                        "706cb642e357f2031abbb1348afc0b990b7469d2"
                    ]
                },
                {
                    "command": [
                        "apply ClosestOpp; auto.",
                        "VernacExtend",
                        "fdb10086de8928309670334b477ceba716a1f016"
                    ]
                },
                {
                    "command": [
                        "unfold FtoRradix in |- *; repeat rewrite Fopp_correct; ring.",
                        "VernacExtend",
                        "216a11721b4b7d252728f115120bad934d8b89a9"
                    ]
                },
                {
                    "command": [
                        "unfold FtoRradix in |- *; repeat rewrite Fopp_correct; ring.",
                        "VernacExtend",
                        "216a11721b4b7d252728f115120bad934d8b89a9"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "plusExactR0",
            "line_nb": 225,
            "steps": [
                {
                    "command": [
                        "intros p q r H' H'0 H'1 H'2.",
                        "VernacExtend",
                        "83b3ef77da60d23370e4e44956d681f7820b20e2"
                    ]
                },
                {
                    "command": [
                        "cut (r = FtoRradix (Fzero (- dExp b)) :>R); [ intros Eq1; rewrite Eq1 | rewrite H'2; apply sym_eq; unfold FtoRradix in |- *; apply FzeroisZero ].",
                        "VernacExtend",
                        "beefa5aba823117103564564960ecd7b7cc9319e"
                    ]
                },
                {
                    "command": [
                        "apply plusExact1; auto.",
                        "VernacExtend",
                        "34007a63d1e676937352ec50e9d97a0bb8fdb974"
                    ]
                },
                {
                    "command": [
                        "apply (ClosestCompatible b radix (p + q)%R (p + q)%R r); auto.",
                        "VernacExtend",
                        "abad862705a75f7722576f3b5b1a22ddebef38f6"
                    ]
                },
                {
                    "command": [
                        "apply FboundedFzero; auto.",
                        "VernacExtend",
                        "8d0d3171dfdcd871c85f5387344c815eca8c2e6c"
                    ]
                },
                {
                    "command": [
                        "simpl in |- *; auto.",
                        "VernacExtend",
                        "9b631374b1d3067f703fd99c5dc6e1e5c8405957"
                    ]
                },
                {
                    "command": [
                        "unfold Zmin in |- *; case (Fexp p ?= Fexp q)%Z; auto with float.",
                        "VernacExtend",
                        "44c643f5fe91a06d9c00911d2ecb5c2d6363700e"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "plusErrorBound1withZero",
            "line_nb": 330,
            "steps": [
                {
                    "command": [
                        "intros p q r H H0 H1.",
                        "VernacExtend",
                        "e0d554c20a66eb783e75f7149a7019e56a8b0289"
                    ]
                },
                {
                    "command": [
                        "case (Req_dec r 0); intros Hr.",
                        "VernacExtend",
                        "7832c55da25d6ef427b53b2727074a950dbb162f"
                    ]
                },
                {
                    "command": [
                        "replace (Rabs (r - (p + q))) with (Rabs r * / 2%nat * 0)%R.",
                        "VernacExtend",
                        "2ca5ff70f3d1b13522cd177910f3f2b088a75732"
                    ]
                },
                {
                    "command": [
                        "apply Rmult_le_compat_l.",
                        "VernacExtend",
                        "509839294acd7016ba82d594bfdb05afe131eed3"
                    ]
                },
                {
                    "command": [
                        "replace 0%R with (Rabs r * 0)%R; [ apply Rmult_le_compat_l | ring ]; auto with real arith.",
                        "VernacExtend",
                        "a0992b8b86e693fb6389eebc596b8293a03bf655"
                    ]
                },
                {
                    "command": [
                        "replace 0%R with (radix * 0)%R; [ apply Rmult_le_compat_l | ring ]; auto with real arith.",
                        "VernacExtend",
                        "9dda9399919e112edb263dab7383d1f496ffcc89"
                    ]
                },
                {
                    "command": [
                        "apply Rlt_le; apply Rinv_0_lt_compat; auto with real arith.",
                        "VernacExtend",
                        "13a23d70fc2e377c85a5b9244e4fa4843dfd30ed"
                    ]
                },
                {
                    "command": [
                        "replace 0%R with (IZR 0%nat); auto with real zarith; apply Rlt_IZR.",
                        "VernacExtend",
                        "a578d349786f6adb4f62a9bd7ceea327cd738409"
                    ]
                },
                {
                    "command": [
                        "apply Zle_lt_trans with (nNormMin radix precision).",
                        "VernacExtend",
                        "f3095ead33cf705e5d3a2b23a1abdc47f0612f98"
                    ]
                },
                {
                    "command": [
                        "apply Zlt_le_weak; apply nNormPos; auto with real zarith.",
                        "VernacExtend",
                        "4b4de5650b5996b748fb11b97fdf1dd070973bfe"
                    ]
                },
                {
                    "command": [
                        "apply nNormMimLtvNum; auto with real zarith.",
                        "VernacExtend",
                        "e8b6c34cb6fa153233aefd62dd1c76f5a6801456"
                    ]
                },
                {
                    "command": [
                        "rewrite <- plusExactR0 with (3 := H1); auto with real zarith.",
                        "VernacExtend",
                        "786ae2a4e0f0b1eb9859232895019a64768e9730"
                    ]
                },
                {
                    "command": [
                        "rewrite Hr; repeat rewrite Rabs_R0 || (rewrite Rminus_diag_eq; auto); ring.",
                        "VernacExtend",
                        "792d7830da92a5a9667640a71792218a7584ba55"
                    ]
                },
                {
                    "command": [
                        "apply Rlt_le; apply plusErrorBound1; auto.",
                        "VernacExtend",
                        "3d42345c0d799524234b255d8643650325bfb72f"
                    ]
                },
                {
                    "command": [
                        "Contradict Hr; unfold FtoRradix in |- *; apply is_Fzero_rep1; auto.",
                        "VernacExtend",
                        "3415bf941a94c5e3da11ae01e558a1f1b620f52c"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "pPredMoreThanOne",
            "line_nb": 347,
            "steps": [
                {
                    "command": [
                        "unfold pPred in |- *; apply Zlt_succ_pred; simpl in |- *.",
                        "VernacExtend",
                        "7116e0555b780c05d1675150b01ef688a461eab7"
                    ]
                },
                {
                    "command": [
                        "apply (vNumbMoreThanOne radix) with (precision := precision); auto with zarith.",
                        "VernacExtend",
                        "c29f7cde7313a0159f5e6e723b15563e2dc77df2"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "pPredMoreThanRadix",
            "line_nb": 351,
            "steps": [
                {
                    "command": [
                        "apply Zle_lt_trans with (nNormMin radix precision).",
                        "VernacExtend",
                        "f3095ead33cf705e5d3a2b23a1abdc47f0612f98"
                    ]
                },
                {
                    "command": [
                        "pattern radix at 1 in |- *; rewrite <- (Zpower_nat_1 radix); unfold nNormMin in |- *; auto with zarith.",
                        "VernacExtend",
                        "b4e5c2942a7008c25d52177eeb717af23c0cb18c"
                    ]
                },
                {
                    "command": [
                        "apply nNormMimLtvNum; auto with zarith.",
                        "VernacExtend",
                        "f61ff0b6fa6f36ae537d2bfb56e8175407c9edec"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "plusExactExp",
            "line_nb": 380,
            "steps": [
                {
                    "command": [
                        "intros p q pq H H0 H1.",
                        "VernacExtend",
                        "0e9313482fb6ebe8327ea08d850fabfb17b5c85c"
                    ]
                },
                {
                    "command": [
                        "case (plusExpBound b radix precision) with (P := Closest b radix) (5 := H1); auto with zarith.",
                        "VernacExtend",
                        "cc0ab0df19cc6a2413c860f0a17e87e24ef44fa9"
                    ]
                },
                {
                    "command": [
                        "apply (ClosestRoundedModeP b radix precision); auto with zarith.",
                        "VernacExtend",
                        "84a6269172cdf47704b2147007292004f6b97f96"
                    ]
                },
                {
                    "command": [
                        "intros r (H2, (H3, (H4, H5))); fold FtoRradix in H3.",
                        "VernacExtend",
                        "a22058348e92cde906519ebe4ee6460666dbcb00"
                    ]
                },
                {
                    "command": [
                        "case (Req_dec (p + q - pq) 0); intros Hr.",
                        "VernacExtend",
                        "5eee04f1907c1f88ee7056ffea3b2dc370bd2b60"
                    ]
                },
                {
                    "command": [
                        "cut (Fbounded b (Fzero (Zmin (Fexp p) (Fexp q)))); [ intros Fbs | idtac ].",
                        "VernacExtend",
                        "4eb4175a2148dfbb5d139c5e6ba0d228d816b9fd"
                    ]
                },
                {
                    "command": [
                        "exists (Fzero (Zmin (Fexp p) (Fexp q))); exists r; repeat (split; auto).",
                        "VernacExtend",
                        "4aa116844ffea7245e1cb55cd1bf09fb6cd00759"
                    ]
                },
                {
                    "command": [
                        "rewrite (FzeroisReallyZero radix); rewrite <- Hr; rewrite <- H3; auto.",
                        "VernacExtend",
                        "21f2cda92dce5b402b30004c36df3cf19d1cac4f"
                    ]
                },
                {
                    "command": [
                        "case (Zmin_or (Fexp p) (Fexp q)); intros Hz; rewrite Hz; apply FboundedZeroSameExp; auto.",
                        "VernacExtend",
                        "30494bfeaeabcf8ad3f1389a0872bb42f3869deb"
                    ]
                },
                {
                    "command": [
                        "case (errorBoundedPlus p q pq); auto.",
                        "VernacExtend",
                        "7464e84ae83a421768847f2fc11ea0248b3949a3"
                    ]
                },
                {
                    "command": [
                        "intros error (H6, (H7, H8)).",
                        "VernacExtend",
                        "02519eab55a0ded98e39fbe6c2464624d4ee13a0"
                    ]
                },
                {
                    "command": [
                        "exists error; exists r; repeat (split; auto).",
                        "VernacExtend",
                        "94e89883a1db67ad69a186d0304aaa00a95f41ef"
                    ]
                },
                {
                    "command": [
                        "rewrite H3; auto.",
                        "VernacExtend",
                        "81f0b52fdaf5f5da8eefafd4263db88cb26c67d0"
                    ]
                },
                {
                    "command": [
                        "rewrite H8; auto.",
                        "VernacExtend",
                        "f12c3889b03009c0e07f35afb32f3af7fbe3b6ce"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "plusExactExpCanonic",
            "line_nb": 396,
            "steps": [
                {
                    "command": [
                        "intros c d p q H H0 H1 H2 H3 H4 H5.",
                        "VernacExtend",
                        "59876b3be8f6a84c4fdb2af89cdfc2886860746a"
                    ]
                },
                {
                    "command": [
                        "case (plusExactExp c d p); auto.",
                        "VernacExtend",
                        "cbcead44af13131515514e40b838351f31f579cb"
                    ]
                },
                {
                    "command": [
                        "intros r (s, (H6, (H7, (H8, (H9, (H10, (H11, H12))))))).",
                        "VernacExtend",
                        "3f37f764a9a47102b802c17f7204a444035a4031"
                    ]
                },
                {
                    "command": [
                        "exists r; exists (Fnormalize radix b precision s).",
                        "VernacExtend",
                        "cd9704ac9a1ffa9332160d48cc777807aeaa77fb"
                    ]
                },
                {
                    "command": [
                        "repeat (split; auto with float).",
                        "VernacExtend",
                        "a522a5b6be5cb6c1d6a271e0acc6e9e843ab8ef8"
                    ]
                },
                {
                    "command": [
                        "apply FnormalizeCanonic; auto with arith.",
                        "VernacExtend",
                        "38090fba049d672f91a024edd56166758e23d7ca"
                    ]
                },
                {
                    "command": [
                        "rewrite <- H8; apply (FnormalizeCorrect radix); auto with zarith.",
                        "VernacExtend",
                        "5130146819f77900bdf2365e7317a38994fa7360"
                    ]
                },
                {
                    "command": [
                        "rewrite (FnormalizeCorrect radix); auto with zarith.",
                        "VernacExtend",
                        "0716d31753bc24920b89870f4d834b03b3ac7b5c"
                    ]
                },
                {
                    "command": [
                        "apply ClosestErrorExpStrict with (radix := radix) (b := b) (precision := precision) (x := (c + d)%R); auto with float.",
                        "VernacExtend",
                        "fa3793da6e464d9892232c69109d2fd545b50651"
                    ]
                },
                {
                    "command": [
                        "apply FnormalizeBounded; auto with arith.",
                        "VernacExtend",
                        "ae781619123afbb565d7494393a4ac416a52494d"
                    ]
                },
                {
                    "command": [
                        "apply (ClosestCompatible b radix (c + d)%R (c + d)%R p); auto.",
                        "VernacExtend",
                        "6fd1fede2948a8a4a22f7ebf7372164a96d9658e"
                    ]
                },
                {
                    "command": [
                        "rewrite (FnormalizeCorrect radix); auto with zarith.",
                        "VernacExtend",
                        "0716d31753bc24920b89870f4d834b03b3ac7b5c"
                    ]
                },
                {
                    "command": [
                        "apply FnormalizeBounded; auto with arith.",
                        "VernacExtend",
                        "ae781619123afbb565d7494393a4ac416a52494d"
                    ]
                },
                {
                    "command": [
                        "rewrite (FnormalizeCorrect radix); auto with zarith.",
                        "VernacExtend",
                        "0716d31753bc24920b89870f4d834b03b3ac7b5c"
                    ]
                },
                {
                    "command": [
                        "fold FtoRradix in |- *; rewrite H9; rewrite H8; rewrite <- H4; auto.",
                        "VernacExtend",
                        "77e055dc5877c284dfc6017ee5d7b1a516efa3a9"
                    ]
                },
                {
                    "command": [
                        "apply Zle_trans with (Fexp s); auto.",
                        "VernacExtend",
                        "e92a6e6d03ef655bfea72ce4c449133a13cb3823"
                    ]
                },
                {
                    "command": [
                        "apply FcanonicLeastExp with radix b precision; auto with arith.",
                        "VernacExtend",
                        "7904d90ed0be63556cb1f42e3fc392554080a578"
                    ]
                },
                {
                    "command": [
                        "apply sym_eq; apply FnormalizeCorrect; auto with real.",
                        "VernacExtend",
                        "690f79e28bf751a71dc9369844f70d40808fd6db"
                    ]
                },
                {
                    "command": [
                        "apply FnormalizeCanonic; auto with arith.",
                        "VernacExtend",
                        "38090fba049d672f91a024edd56166758e23d7ca"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        }
    ]
}