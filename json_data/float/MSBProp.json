{
    "filename": "MSBProp.v",
    "coq_project": "float",
    "vernac_cmds": [
        [
            "Require Export MSB.",
            "VernacRequire",
            "eb6e3bf897ed2ab3447efba57182876687c05ff0"
        ],
        [
            "Section MSBProp.",
            "VernacBeginSection",
            "384bb585215a6a1a608ec52f1dc81d25577834ae"
        ],
        [
            "Variable b : Fbound.",
            "VernacAssumption",
            "17a11c003f49f819b8cb809f61b140702916486d"
        ],
        [
            "Variable precision : nat.",
            "VernacAssumption",
            "2235bc83b7ebf4cbe373b5fa3b4f3c643d454130"
        ],
        [
            "Variable radix : Z.",
            "VernacAssumption",
            "2349b77d134e0c9bb013a8bdca0020ca16fc023b"
        ],
        [
            "Let FtoRradix := FtoR radix.",
            "VernacDefinition",
            "5aa29a9595c6e9e03b28c6d232299552ec761ad7"
        ],
        [
            "Coercion FtoRradix : float >-> R.",
            "VernacCoercion",
            "028c338fbad0cd7087bf0b6e1e412562a515c140"
        ],
        [
            "Hypothesis radixMoreThanOne : (1 < radix)%Z.",
            "VernacAssumption",
            "f4d3774b2275f4c4c3af941091d4d99f9a2129aa"
        ],
        [
            "Let radixMoreThanZERO : (0 < radix)%Z := Zlt_1_O _ (Zlt_le_weak _ _ radixMoreThanOne).",
            "VernacDefinition",
            "adf53af80c95a016a14c6ac83b835d5af59e87b8"
        ],
        [
            "Hint Resolve radixMoreThanZERO: zarith.",
            "VernacHints",
            "5a4a320eb610749621ef38850390d7141dc0d330"
        ],
        [
            "Hypothesis precisionGreaterThanOne : 1 < precision.",
            "VernacAssumption",
            "9f627fb385d8fe283ac9563556925f37be8e5402"
        ],
        [
            "Hypothesis pGivesBound : Zpos (vNum b) = Zpower_nat radix precision.",
            "VernacAssumption",
            "d558f967d87d2a42d14158ac115b10c6f5358430"
        ],
        [
            "Theorem boundOnePrecision : forall a : float, Fbounded b a -> (Rabs a < Float 1%nat (precision + Fexp a))%R.",
            "VernacStartTheoremProof",
            "f2733a903dec17ad5a1ddd44ae8fee0490a86ca2"
        ],
        [
            "intros a H.",
            "VernacExtend",
            "05f717e61df7036f33bd440c2184c00a6aaab4f4"
        ],
        [
            "replace (FtoRradix (Float 1%nat (precision + Fexp a))) with (FtoRradix (Fshift radix precision (Float 1%nat (precision + Fexp a)))); [ idtac | apply (FshiftCorrect radix); auto ].",
            "VernacExtend",
            "cc38c09fd4ad284fe18aa9bbd591b0130e75d1b3"
        ],
        [
            "unfold Fshift, FtoRradix, FtoR in |- *; simpl in |- *.",
            "VernacExtend",
            "4e7425fe7162a69637e1d15e85d29c8c79cbac1f"
        ],
        [
            "rewrite <- pGivesBound.",
            "VernacExtend",
            "9d44fbba663fc8fbef921c783013c4fdbd62c71c"
        ],
        [
            "replace (precision + Fexp a - precision)%Z with (Fexp a); [ idtac | ring ].",
            "VernacExtend",
            "83d482ac4ae7fd50b22da6c63f24c71ba8ce57d8"
        ],
        [
            "rewrite Rabs_mult; rewrite (fun x y => Rabs_pos_eq (powerRZ x y)); auto with real zarith.",
            "VernacExtend",
            "a2f13e8324b23ba915fcc4dd7dd5ceefdbe9d520"
        ],
        [
            "apply Rlt_monotony_exp; auto with float real zarith.",
            "VernacExtend",
            "23844a28ad4a691bef20db0f1a9b544123094088"
        ],
        [
            "rewrite Faux.Rabsolu_Zabs; auto with float real zarith.",
            "VernacExtend",
            "28475e0bb1f6662bb01400797f7667c4c96564e8"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Theorem boundNormalMult : forall x y : float, Fnormal radix b x -> Fbounded b y -> (Rabs y * Float 1%nat (Fexp x) < radix * (Rabs x * Float 1%nat (Fexp y)))%R.",
            "VernacStartTheoremProof",
            "b1002b1e83efe7dc3649f8a48d6b7ad40a66fa55"
        ],
        [
            "intros x y H H0.",
            "VernacExtend",
            "c195f8e332e49becae9c251c7f3764dc66d8b842"
        ],
        [
            "apply Rlt_le_trans with (Float (Zpos (vNum b)) (Fexp y) * Float 1%nat (Fexp x))%R.",
            "VernacExtend",
            "9c4d3ad0bdaae636bd10a175610c2e90fb98376c"
        ],
        [
            "apply Rmult_lt_compat_r.",
            "VernacExtend",
            "e041593c57ec6470673cc705c01d215d230e0676"
        ],
        [
            "unfold FtoRradix in |- *; unfold FtoR in |- *; simpl in |- *.",
            "VernacExtend",
            "8c0835d31a3f923ae6ce1e9ef3140f1250ad69a6"
        ],
        [
            "replace (1 * powerRZ radix (Fexp x))%R with (powerRZ radix (Fexp x)); [ idtac | ring ].",
            "VernacExtend",
            "f6537502454e28a8e70c61778f31434243d63f9f"
        ],
        [
            "apply powerRZ_lt; auto with real arith.",
            "VernacExtend",
            "18f200e01215d20891df67e3797385e5979e8d39"
        ],
        [
            "unfold FtoRradix in |- *; apply MaxFloat; auto.",
            "VernacExtend",
            "631b7ff675fe96122a1243d23a00474e50687927"
        ],
        [
            "replace (Float (Zpos (vNum b)) (Fexp y) * Float 1%nat (Fexp x))%R with (Zpos (vNum b) * Float 1%nat (Fexp x) * Float 1%nat (Fexp y))%R.",
            "VernacExtend",
            "62fa3fee5466148c58385c9837b90c4399456b84"
        ],
        [
            "replace (radix * (Rabs x * Float 1%nat (Fexp y)))%R with (radix * Rabs x * Float 1%nat (Fexp y))%R; [ idtac | ring ].",
            "VernacExtend",
            "3b014a8f96ce359036e4dae99c8d0f0045a9b5bb"
        ],
        [
            "apply Rmult_le_compat_r.",
            "VernacExtend",
            "6c4c5a82dab802842919dd673f1978a3cb8cff73"
        ],
        [
            "unfold FtoRradix in |- *; unfold FtoR in |- *; simpl in |- *.",
            "VernacExtend",
            "8c0835d31a3f923ae6ce1e9ef3140f1250ad69a6"
        ],
        [
            "replace (1 * powerRZ radix (Fexp y))%R with (powerRZ radix (Fexp y)); [ idtac | ring ].",
            "VernacExtend",
            "84b113d3e0242fa749b090fc296a37a49373a366"
        ],
        [
            "apply powerRZ_le; auto with real arith.",
            "VernacExtend",
            "ee0d0982f7bc5a1e7983b73be7143ee7ae41a2ee"
        ],
        [
            "replace (Zpos (vNum b) * Float 1%nat (Fexp x))%R with (FtoRradix (Float (Zpos (vNum b)) (Fexp x))).",
            "VernacExtend",
            "80e24d5ccf6b0888b0affb6988460eba4cf53b0c"
        ],
        [
            "rewrite <- (Fabs_correct radix); auto with real zarith.",
            "VernacExtend",
            "2ff290977b9ba80878887a2b2d4d83d4381557fa"
        ],
        [
            "unfold Fabs, FtoRradix, FtoR in |- *.",
            "VernacExtend",
            "2e0063e692a491b4ea1859f4f09c2873e2917c5d"
        ],
        [
            "rewrite <- Rmult_assoc.",
            "VernacExtend",
            "34da3c50cde53c179a4908b1329a459071245c05"
        ],
        [
            "apply Rle_monotone_exp; auto with real arith.",
            "VernacExtend",
            "581d5a8fc82f2b482fa62a96981509553834437a"
        ],
        [
            "rewrite <- Rmult_IZR; apply Rle_IZR; simpl in |- *.",
            "VernacExtend",
            "9234b65d3b389c590740c9e6d1c81b8f6b769dcc"
        ],
        [
            "rewrite <- (Zabs_eq radix); auto with zarith; rewrite <- Zabs_Zmult; auto with float.",
            "VernacExtend",
            "186140e6444e6146958195cb8e4fa54abd954ca5"
        ],
        [
            "case H; simpl in |- *; auto.",
            "VernacExtend",
            "bd1495e578c31fbd14a3a206fc41174f57213d71"
        ],
        [
            "unfold FtoRradix, FtoR in |- *; simpl in |- *; ring.",
            "VernacExtend",
            "5b3b96c09542c1778400f311cf15a289b4188c3b"
        ],
        [
            "unfold FtoRradix, FtoR in |- *; simpl in |- *; ring.",
            "VernacExtend",
            "5b3b96c09542c1778400f311cf15a289b4188c3b"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "End MSBProp.",
            "VernacEndSegment",
            "6adecd2ee50c6bff32a4e98a6c4051c6c5c0fac4"
        ]
    ],
    "proofs": [
        {
            "name": "boundOnePrecision",
            "line_nb": 12,
            "steps": [
                {
                    "command": [
                        "intros a H.",
                        "VernacExtend",
                        "05f717e61df7036f33bd440c2184c00a6aaab4f4"
                    ]
                },
                {
                    "command": [
                        "replace (FtoRradix (Float 1%nat (precision + Fexp a))) with (FtoRradix (Fshift radix precision (Float 1%nat (precision + Fexp a)))); [ idtac | apply (FshiftCorrect radix); auto ].",
                        "VernacExtend",
                        "cc38c09fd4ad284fe18aa9bbd591b0130e75d1b3"
                    ]
                },
                {
                    "command": [
                        "unfold Fshift, FtoRradix, FtoR in |- *; simpl in |- *.",
                        "VernacExtend",
                        "4e7425fe7162a69637e1d15e85d29c8c79cbac1f"
                    ]
                },
                {
                    "command": [
                        "rewrite <- pGivesBound.",
                        "VernacExtend",
                        "9d44fbba663fc8fbef921c783013c4fdbd62c71c"
                    ]
                },
                {
                    "command": [
                        "replace (precision + Fexp a - precision)%Z with (Fexp a); [ idtac | ring ].",
                        "VernacExtend",
                        "83d482ac4ae7fd50b22da6c63f24c71ba8ce57d8"
                    ]
                },
                {
                    "command": [
                        "rewrite Rabs_mult; rewrite (fun x y => Rabs_pos_eq (powerRZ x y)); auto with real zarith.",
                        "VernacExtend",
                        "a2f13e8324b23ba915fcc4dd7dd5ceefdbe9d520"
                    ]
                },
                {
                    "command": [
                        "apply Rlt_monotony_exp; auto with float real zarith.",
                        "VernacExtend",
                        "23844a28ad4a691bef20db0f1a9b544123094088"
                    ]
                },
                {
                    "command": [
                        "rewrite Faux.Rabsolu_Zabs; auto with float real zarith.",
                        "VernacExtend",
                        "28475e0bb1f6662bb01400797f7667c4c96564e8"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "boundNormalMult",
            "line_nb": 22,
            "steps": [
                {
                    "command": [
                        "intros x y H H0.",
                        "VernacExtend",
                        "c195f8e332e49becae9c251c7f3764dc66d8b842"
                    ]
                },
                {
                    "command": [
                        "apply Rlt_le_trans with (Float (Zpos (vNum b)) (Fexp y) * Float 1%nat (Fexp x))%R.",
                        "VernacExtend",
                        "9c4d3ad0bdaae636bd10a175610c2e90fb98376c"
                    ]
                },
                {
                    "command": [
                        "apply Rmult_lt_compat_r.",
                        "VernacExtend",
                        "e041593c57ec6470673cc705c01d215d230e0676"
                    ]
                },
                {
                    "command": [
                        "unfold FtoRradix in |- *; unfold FtoR in |- *; simpl in |- *.",
                        "VernacExtend",
                        "8c0835d31a3f923ae6ce1e9ef3140f1250ad69a6"
                    ]
                },
                {
                    "command": [
                        "replace (1 * powerRZ radix (Fexp x))%R with (powerRZ radix (Fexp x)); [ idtac | ring ].",
                        "VernacExtend",
                        "f6537502454e28a8e70c61778f31434243d63f9f"
                    ]
                },
                {
                    "command": [
                        "apply powerRZ_lt; auto with real arith.",
                        "VernacExtend",
                        "18f200e01215d20891df67e3797385e5979e8d39"
                    ]
                },
                {
                    "command": [
                        "unfold FtoRradix in |- *; apply MaxFloat; auto.",
                        "VernacExtend",
                        "631b7ff675fe96122a1243d23a00474e50687927"
                    ]
                },
                {
                    "command": [
                        "replace (Float (Zpos (vNum b)) (Fexp y) * Float 1%nat (Fexp x))%R with (Zpos (vNum b) * Float 1%nat (Fexp x) * Float 1%nat (Fexp y))%R.",
                        "VernacExtend",
                        "62fa3fee5466148c58385c9837b90c4399456b84"
                    ]
                },
                {
                    "command": [
                        "replace (radix * (Rabs x * Float 1%nat (Fexp y)))%R with (radix * Rabs x * Float 1%nat (Fexp y))%R; [ idtac | ring ].",
                        "VernacExtend",
                        "3b014a8f96ce359036e4dae99c8d0f0045a9b5bb"
                    ]
                },
                {
                    "command": [
                        "apply Rmult_le_compat_r.",
                        "VernacExtend",
                        "6c4c5a82dab802842919dd673f1978a3cb8cff73"
                    ]
                },
                {
                    "command": [
                        "unfold FtoRradix in |- *; unfold FtoR in |- *; simpl in |- *.",
                        "VernacExtend",
                        "8c0835d31a3f923ae6ce1e9ef3140f1250ad69a6"
                    ]
                },
                {
                    "command": [
                        "replace (1 * powerRZ radix (Fexp y))%R with (powerRZ radix (Fexp y)); [ idtac | ring ].",
                        "VernacExtend",
                        "84b113d3e0242fa749b090fc296a37a49373a366"
                    ]
                },
                {
                    "command": [
                        "apply powerRZ_le; auto with real arith.",
                        "VernacExtend",
                        "ee0d0982f7bc5a1e7983b73be7143ee7ae41a2ee"
                    ]
                },
                {
                    "command": [
                        "replace (Zpos (vNum b) * Float 1%nat (Fexp x))%R with (FtoRradix (Float (Zpos (vNum b)) (Fexp x))).",
                        "VernacExtend",
                        "80e24d5ccf6b0888b0affb6988460eba4cf53b0c"
                    ]
                },
                {
                    "command": [
                        "rewrite <- (Fabs_correct radix); auto with real zarith.",
                        "VernacExtend",
                        "2ff290977b9ba80878887a2b2d4d83d4381557fa"
                    ]
                },
                {
                    "command": [
                        "unfold Fabs, FtoRradix, FtoR in |- *.",
                        "VernacExtend",
                        "2e0063e692a491b4ea1859f4f09c2873e2917c5d"
                    ]
                },
                {
                    "command": [
                        "rewrite <- Rmult_assoc.",
                        "VernacExtend",
                        "34da3c50cde53c179a4908b1329a459071245c05"
                    ]
                },
                {
                    "command": [
                        "apply Rle_monotone_exp; auto with real arith.",
                        "VernacExtend",
                        "581d5a8fc82f2b482fa62a96981509553834437a"
                    ]
                },
                {
                    "command": [
                        "rewrite <- Rmult_IZR; apply Rle_IZR; simpl in |- *.",
                        "VernacExtend",
                        "9234b65d3b389c590740c9e6d1c81b8f6b769dcc"
                    ]
                },
                {
                    "command": [
                        "rewrite <- (Zabs_eq radix); auto with zarith; rewrite <- Zabs_Zmult; auto with float.",
                        "VernacExtend",
                        "186140e6444e6146958195cb8e4fa54abd954ca5"
                    ]
                },
                {
                    "command": [
                        "case H; simpl in |- *; auto.",
                        "VernacExtend",
                        "bd1495e578c31fbd14a3a206fc41174f57213d71"
                    ]
                },
                {
                    "command": [
                        "unfold FtoRradix, FtoR in |- *; simpl in |- *; ring.",
                        "VernacExtend",
                        "5b3b96c09542c1778400f311cf15a289b4188c3b"
                    ]
                },
                {
                    "command": [
                        "unfold FtoRradix, FtoR in |- *; simpl in |- *; ring.",
                        "VernacExtend",
                        "5b3b96c09542c1778400f311cf15a289b4188c3b"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        }
    ]
}