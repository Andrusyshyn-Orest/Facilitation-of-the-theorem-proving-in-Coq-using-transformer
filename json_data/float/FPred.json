{
    "filename": "FPred.v",
    "coq_project": "float",
    "vernac_cmds": [
        [
            "Require Export FSucc.",
            "VernacRequire",
            "5cf3c9147738de23298a53b77395fa44ffff4103"
        ],
        [
            "Section pred.",
            "VernacBeginSection",
            "bc4c658fa7af91c61df71a0677f8a0f48feb8224"
        ],
        [
            "Variable b : Fbound.",
            "VernacAssumption",
            "17a11c003f49f819b8cb809f61b140702916486d"
        ],
        [
            "Variable radix : Z.",
            "VernacAssumption",
            "2349b77d134e0c9bb013a8bdca0020ca16fc023b"
        ],
        [
            "Variable precision : nat.",
            "VernacAssumption",
            "2235bc83b7ebf4cbe373b5fa3b4f3c643d454130"
        ],
        [
            "Let FtoRradix := FtoR radix.",
            "VernacDefinition",
            "5aa29a9595c6e9e03b28c6d232299552ec761ad7"
        ],
        [
            "Local Coercion FtoRradix : float >-> R.",
            "VernacCoercion",
            "cec6b845059d434f72dda1a67638af64e1fb0628"
        ],
        [
            "Hypothesis radixMoreThanOne : (1 < radix)%Z.",
            "VernacAssumption",
            "f4d3774b2275f4c4c3af941091d4d99f9a2129aa"
        ],
        [
            "Hypothesis precisionNotZero : precision <> 0.",
            "VernacAssumption",
            "9ba21dacb7498679bf18b5f2c3b12c5f92dc3727"
        ],
        [
            "Hypothesis pGivesBound : Zpos (vNum b) = Zpower_nat radix precision.",
            "VernacAssumption",
            "d558f967d87d2a42d14158ac115b10c6f5358430"
        ],
        [
            "Definition FPred (x : float) := match Z_eq_bool (Fnum x) (- pPred (vNum b)) with | true => Float (- nNormMin radix precision) (Zsucc (Fexp x)) | false => match Z_eq_bool (Fnum x) (nNormMin radix precision) with | true => match Z_eq_bool (Fexp x) (- dExp b) with | true => Float (Zpred (Fnum x)) (Fexp x) | false => Float (pPred (vNum b)) (Zpred (Fexp x)) end | false => Float (Zpred (Fnum x)) (Fexp x) end end.",
            "VernacDefinition",
            "5b76aa6cc654212c7fe0d263650936dcf6ea60b3"
        ],
        [
            "Theorem FPredSimpl1 : forall x : float, Fnum x = (- pPred (vNum b))%Z -> FPred x = Float (- nNormMin radix precision) (Zsucc (Fexp x)).",
            "VernacStartTheoremProof",
            "c6b0c1c06b20521a8f848742a21349fd027584b8"
        ],
        [
            "intros x H'; unfold FPred in |- *.",
            "VernacExtend",
            "00a1b0539b82f7ac90dfaa90311d7f05cbd891fe"
        ],
        [
            "generalize (Z_eq_bool_correct (Fnum x) (- pPred (vNum b))); case (Z_eq_bool (Fnum x) (- pPred (vNum b))); auto.",
            "VernacExtend",
            "fc5a688eb3d620a60d6a2f95bee1dd891233575b"
        ],
        [
            "intros H'0; Contradict H'0; auto.",
            "VernacExtend",
            "309e0c652fca7ca41fc269e7e4c3bac2313ada79"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Theorem FPredSimpl2 : forall x : float, Fnum x = nNormMin radix precision -> Fexp x <> (- dExp b)%Z -> FPred x = Float (pPred (vNum b)) (Zpred (Fexp x)).",
            "VernacStartTheoremProof",
            "496d20e6c5ad825300dd12ebaf43defc287b0108"
        ],
        [
            "intros x H' H'0; unfold FPred in |- *.",
            "VernacExtend",
            "b5e1dafafe7c7a104dcb4a8ecf59cebb90ca18c4"
        ],
        [
            "generalize (Z_eq_bool_correct (Fnum x) (- pPred (vNum b))); case (Z_eq_bool (Fnum x) (- pPred (vNum b))); auto.",
            "VernacExtend",
            "fc5a688eb3d620a60d6a2f95bee1dd891233575b"
        ],
        [
            "intros H'1; absurd (0%nat < Fnum x)%Z; auto with zarith arith.",
            "VernacExtend",
            "20552eb11688da8b0fa10e81918eee5a55c5e736"
        ],
        [
            "apply Zle_not_lt; rewrite H'1; replace (Z_of_nat 0) with (- (0))%Z; [ apply Zle_Zopp | simpl in |- *; auto ].",
            "VernacExtend",
            "d0e6be42e61c7ec0cd90bae91e4aabdd3f42a088"
        ],
        [
            "unfold pPred in |- *; apply Zle_Zpred; red in |- *; simpl in |- *; auto.",
            "VernacExtend",
            "bfaf50f1edbc0bfb07f589ae8cc5d9e26056f0ec"
        ],
        [
            "rewrite H'.",
            "VernacExtend",
            "232d4714354910d49fdbf1140eac1d26da075d17"
        ],
        [
            "apply nNormPos; auto with zarith.",
            "VernacExtend",
            "8050df37637552c4f93f1659280a94a6c325f5f8"
        ],
        [
            "intros H'1; generalize (Z_eq_bool_correct (Fnum x) (nNormMin radix precision)); case (Z_eq_bool (Fnum x) (nNormMin radix precision)).",
            "VernacExtend",
            "8223de898a94683057f50a635dbfab39ef093c8e"
        ],
        [
            "intros H'2; generalize (Z_eq_bool_correct (Fexp x) (- dExp b)); case (Z_eq_bool (Fexp x) (- dExp b)); auto.",
            "VernacExtend",
            "1a95a833b963d3a109b5a145d8460c93b359f404"
        ],
        [
            "intros H'3; Contradict H'0; auto.",
            "VernacExtend",
            "6cce241fa4bfbc07b2ae179350c8cf2aa973116a"
        ],
        [
            "intros H'2; Contradict H'2; auto.",
            "VernacExtend",
            "1aa71754603bb31667514e8c1dbfa39a9f2ebb70"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Theorem FPredSimpl3 : FPred (Float (nNormMin radix precision) (- dExp b)) = Float (Zpred (nNormMin radix precision)) (- dExp b).",
            "VernacStartTheoremProof",
            "ecc385ebdb995316e5d425b366ec83fd0a9ff46c"
        ],
        [
            "unfold FPred in |- *; simpl in |- *.",
            "VernacExtend",
            "07430748cdd6a090458bcc43aa2abcb94f5ba953"
        ],
        [
            "generalize (Z_eq_bool_correct (nNormMin radix precision) (- pPred (vNum b))); case (Z_eq_bool (nNormMin radix precision) (- pPred (vNum b))); auto.",
            "VernacExtend",
            "188029d714ceaf71f03936f40b5d0c052ec43cd2"
        ],
        [
            "intros H'0; absurd (0 < pPred (vNum b))%Z; auto with zarith arith.",
            "VernacExtend",
            "32dad7e0f014ee21da90c1ba2396ded097ee55d8"
        ],
        [
            "rewrite <- (Zopp_involutive (pPred (vNum b))); rewrite <- H'0.",
            "VernacExtend",
            "8ec1a39df37c523f14af0d4b152c8e24bac64534"
        ],
        [
            "apply Zle_not_lt; replace 0%Z with (- (0))%Z; [ apply Zle_Zopp | simpl in |- *; auto ].",
            "VernacExtend",
            "1c34800a4dfdd13edcddebea9319b3eb7afe12e0"
        ],
        [
            "apply Zlt_le_weak; apply nNormPos; auto with float zarith.",
            "VernacExtend",
            "a5278bd9ff1bd188f4746b02b78a290a8b7a2453"
        ],
        [
            "unfold pPred in |- *; apply Zlt_succ_pred; simpl in |- *; auto with float zarith.",
            "VernacExtend",
            "0e454c9536eae4d5395380946f180576c870ed25"
        ],
        [
            "simpl in |- *; apply vNumbMoreThanOne with (3 := pGivesBound); auto.",
            "VernacExtend",
            "94949278407aa5585b728d75d9d3eadfce4584b4"
        ],
        [
            "intros H'; generalize (Z_eq_bool_correct (nNormMin radix precision) (nNormMin radix precision)); case (Z_eq_bool (nNormMin radix precision) (nNormMin radix precision)).",
            "VernacExtend",
            "2ea081499add59232faf634477e2089bbc6aa657"
        ],
        [
            "intros H'0; generalize (Z_eq_bool_correct (- dExp b) (- dExp b)); case (Z_eq_bool (- dExp b) (- dExp b)); auto.",
            "VernacExtend",
            "846a265bed88b4fbb4e8d22e51b081d720035268"
        ],
        [
            "intros H'1; Contradict H'1; auto.",
            "VernacExtend",
            "8db85f3016bcb692223b807804acc9e52d044004"
        ],
        [
            "intros H'1; Contradict H'1; auto.",
            "VernacExtend",
            "8db85f3016bcb692223b807804acc9e52d044004"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Theorem FPredSimpl4 : forall x : float, Fnum x <> (- pPred (vNum b))%Z -> Fnum x <> nNormMin radix precision -> FPred x = Float (Zpred (Fnum x)) (Fexp x).",
            "VernacStartTheoremProof",
            "5a7964df709efefd5cbc2190cdda8bd896dc7383"
        ],
        [
            "intros x H' H'0; unfold FPred in |- *.",
            "VernacExtend",
            "b5e1dafafe7c7a104dcb4a8ecf59cebb90ca18c4"
        ],
        [
            "generalize (Z_eq_bool_correct (Fnum x) (- pPred (vNum b))); case (Z_eq_bool (Fnum x) (- pPred (vNum b))); auto.",
            "VernacExtend",
            "fc5a688eb3d620a60d6a2f95bee1dd891233575b"
        ],
        [
            "intros H'1; Contradict H'; auto.",
            "VernacExtend",
            "df583a974a49b9d26ca786a8b3785e2dd7a4b3d0"
        ],
        [
            "intros H'1; generalize (Z_eq_bool_correct (Fnum x) (nNormMin radix precision)); case (Z_eq_bool (Fnum x) (nNormMin radix precision)); auto.",
            "VernacExtend",
            "eef390b6a90bb3f421fa2f51dbbf01abf8ae3def"
        ],
        [
            "intros H'2; Contradict H'0; auto.",
            "VernacExtend",
            "5852154b7666463c5197fef05024fa0f18f3fa8a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Theorem FPredFopFSucc : forall x : float, FPred x = Fopp (FSucc b radix precision (Fopp x)).",
            "VernacStartTheoremProof",
            "20ccbd429796e6364d68e0855e64fef42e715428"
        ],
        [
            "intros x.",
            "VernacExtend",
            "596d66edc70dae19981ed74f103fc0a865aec92c"
        ],
        [
            "generalize (Z_eq_bool_correct (Fnum x) (- pPred (vNum b))); case (Z_eq_bool (Fnum x) (- pPred (vNum b))); intros H'1.",
            "VernacExtend",
            "47ec68604887caa782dfd6c84cb8618cbd177fb9"
        ],
        [
            "rewrite FPredSimpl1; auto; rewrite FSuccSimpl1; auto.",
            "VernacExtend",
            "7bbba81dd78bf1b1c2bdd29721d59744fac00b30"
        ],
        [
            "unfold Fopp in |- *; simpl in |- *; rewrite H'1; auto with zarith.",
            "VernacExtend",
            "64b205231dede3a58cf62457fabf9519b175d62a"
        ],
        [
            "generalize (Z_eq_bool_correct (Fnum x) (nNormMin radix precision)); case (Z_eq_bool (Fnum x) (nNormMin radix precision)); intros H'2.",
            "VernacExtend",
            "fbcf47cc1c052273f025ab905c4448c56e1cf8a6"
        ],
        [
            "generalize (Z_eq_bool_correct (Fexp x) (- dExp b)); case (Z_eq_bool (Fexp x) (- dExp b)); intros H'3.",
            "VernacExtend",
            "176a14d832b1018f48b7cc690da05ba30d121e7c"
        ],
        [
            "replace x with (Float (Fnum x) (Fexp x)).",
            "VernacExtend",
            "a8877e005fb0e6fdbc20b1adc720e9c08a677ad7"
        ],
        [
            "rewrite H'2; rewrite H'3; rewrite FPredSimpl3; unfold Fopp in |- *; simpl in |- *; rewrite FSuccSimpl3; simpl in |- *; auto.",
            "VernacExtend",
            "a84068d6aa1d346195098367c5de6b3e6075f84f"
        ],
        [
            "rewrite <- Zopp_Zpred_Zs; rewrite Zopp_involutive; auto.",
            "VernacExtend",
            "c95ab0ba40b39a3d03d39179475e3f5acc1967f1"
        ],
        [
            "case x; simpl in |- *; auto.",
            "VernacExtend",
            "78d0bd53c1fe23bd9447c87ca89fb83e9e828572"
        ],
        [
            "rewrite FPredSimpl2; auto; rewrite FSuccSimpl2; unfold Fopp in |- *; simpl in |- *; try rewrite Zopp_involutive; auto.",
            "VernacExtend",
            "78a61e2dce581e4a2f3138383c9df5997d5aa076"
        ],
        [
            "rewrite H'2; auto.",
            "VernacExtend",
            "2c2cd2310e6d6c30ae4cdcfb896dfe62bf83deb1"
        ],
        [
            "rewrite FPredSimpl4; auto; rewrite FSuccSimpl4; auto.",
            "VernacExtend",
            "8bff6580168b6a6bc78785ecb0766f5317791c5b"
        ],
        [
            "unfold Fopp in |- *; simpl in |- *; rewrite <- Zopp_Zpred_Zs; rewrite Zopp_involutive; auto.",
            "VernacExtend",
            "4d95f50850222b24d2af4793b951819be071696a"
        ],
        [
            "unfold Fopp in |- *; simpl in |- *; Contradict H'1; rewrite <- H'1; rewrite Zopp_involutive; auto.",
            "VernacExtend",
            "44e0d72d87625d53771596307322879a7ac2f42b"
        ],
        [
            "unfold Fopp in |- *; simpl in |- *; Contradict H'2; auto with zarith.",
            "VernacExtend",
            "7db90887ee98095e1d8f439731ec91dddd558bb6"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Theorem FPredDiff1 : forall x : float, Fnum x <> nNormMin radix precision -> Fminus radix x (FPred x) = Float 1%nat (Fexp x) :>R.",
            "VernacStartTheoremProof",
            "9c5b570ae561ef1a65c48d447dbc77dc785d6b7d"
        ],
        [
            "intros x H'; rewrite (FPredFopFSucc x).",
            "VernacExtend",
            "54834e5c38f44fd94eef55f3cec4b89722814da2"
        ],
        [
            "pattern x at 1 in |- *; rewrite <- (Fopp_Fopp x).",
            "VernacExtend",
            "f2057a9235a125847d74a7abaa6d14bc4f35e522"
        ],
        [
            "rewrite <- Fopp_Fminus_dist.",
            "VernacExtend",
            "5cae82ee277428614ed1993002e21586b1c5aff0"
        ],
        [
            "rewrite Fopp_Fminus.",
            "VernacExtend",
            "dbf0252d4a6d9d5774b0171f6b7c19c3d59aced6"
        ],
        [
            "unfold FtoRradix in |- *; rewrite FSuccDiff1; auto.",
            "VernacExtend",
            "24f3d8a4965531653aa88dd3a4b1382cef5caaf2"
        ],
        [
            "replace (Fnum (Fopp x)) with (- Fnum x)%Z.",
            "VernacExtend",
            "b50eff7ec0065294cf36cad7d191e08320a79823"
        ],
        [
            "Contradict H'; rewrite <- (Zopp_involutive (Fnum x)); rewrite H'; auto with zarith.",
            "VernacExtend",
            "7b73e7ecacbdd21f95a67887440d191d999e1b4b"
        ],
        [
            "case x; simpl in |- *; auto.",
            "VernacExtend",
            "78d0bd53c1fe23bd9447c87ca89fb83e9e828572"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Theorem FPredDiff2 : forall x : float, Fnum x = nNormMin radix precision -> Fexp x = (- dExp b)%Z -> Fminus radix x (FPred x) = Float 1%nat (Fexp x) :>R.",
            "VernacStartTheoremProof",
            "ea4b5b31fdcd0c6e6a49578421aec0ece7e1c876"
        ],
        [
            "intros x H' H'0; rewrite (FPredFopFSucc x).",
            "VernacExtend",
            "38954fe567aa82926e0f02ae9f17dcbc2bcf4287"
        ],
        [
            "pattern x at 1 in |- *; rewrite <- (Fopp_Fopp x).",
            "VernacExtend",
            "f2057a9235a125847d74a7abaa6d14bc4f35e522"
        ],
        [
            "rewrite <- Fopp_Fminus_dist.",
            "VernacExtend",
            "5cae82ee277428614ed1993002e21586b1c5aff0"
        ],
        [
            "rewrite Fopp_Fminus.",
            "VernacExtend",
            "dbf0252d4a6d9d5774b0171f6b7c19c3d59aced6"
        ],
        [
            "unfold FtoRradix in |- *; rewrite FSuccDiff2; auto.",
            "VernacExtend",
            "6333a724696d1aa86b072998990879122c1a8a9f"
        ],
        [
            "rewrite <- H'; case x; auto.",
            "VernacExtend",
            "58132718419a27b052edd3f659ceabdca4f651f1"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Theorem FPredDiff3 : forall x : float, Fnum x = nNormMin radix precision -> Fexp x <> (- dExp b)%Z -> Fminus radix x (FPred x) = Float 1%nat (Zpred (Fexp x)) :>R.",
            "VernacStartTheoremProof",
            "99ee9f8ec04ee8ee9e6f9da9f42322ec484dee2e"
        ],
        [
            "intros x H' H'0; rewrite (FPredFopFSucc x).",
            "VernacExtend",
            "38954fe567aa82926e0f02ae9f17dcbc2bcf4287"
        ],
        [
            "pattern x at 1 in |- *; rewrite <- (Fopp_Fopp x).",
            "VernacExtend",
            "f2057a9235a125847d74a7abaa6d14bc4f35e522"
        ],
        [
            "rewrite <- Fopp_Fminus_dist.",
            "VernacExtend",
            "5cae82ee277428614ed1993002e21586b1c5aff0"
        ],
        [
            "rewrite Fopp_Fminus.",
            "VernacExtend",
            "dbf0252d4a6d9d5774b0171f6b7c19c3d59aced6"
        ],
        [
            "unfold FtoRradix in |- *; rewrite FSuccDiff3; auto.",
            "VernacExtend",
            "c16a3aa2189f1079b849d5ed2d82a600471ce679"
        ],
        [
            "rewrite <- H'; case x; auto.",
            "VernacExtend",
            "58132718419a27b052edd3f659ceabdca4f651f1"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Theorem FBoundedPred : forall f : float, Fbounded b f -> Fbounded b (FPred f).",
            "VernacStartTheoremProof",
            "14662696fefd8d14186b8eeaf984432aef660d07"
        ],
        [
            "intros f H'; rewrite (FPredFopFSucc f); auto with float.",
            "VernacExtend",
            "27dd67a8bd1073945068eef1c399602ee3be1dda"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Theorem FPredCanonic : forall a : float, Fcanonic radix b a -> Fcanonic radix b (FPred a).",
            "VernacStartTheoremProof",
            "3c5654a9b203a9eb9de9481e94371264eb73608f"
        ],
        [
            "intros a H'.",
            "VernacExtend",
            "2b7514d481b1c49fc3070e8c7c3f241c036a4bba"
        ],
        [
            "rewrite FPredFopFSucc; auto with float.",
            "VernacExtend",
            "760cf208079a1ea2ac64e6eca8e71873db513075"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Theorem FPredLt : forall a : float, (FPred a < a)%R.",
            "VernacStartTheoremProof",
            "72bb8b77a421754cb7956c7cf7c78e9d2a2322f8"
        ],
        [
            "intros a; rewrite FPredFopFSucc.",
            "VernacExtend",
            "3a1bdd35bafd47776d17666a8489ad8416f142a0"
        ],
        [
            "pattern a at 2 in |- *; rewrite <- (Fopp_Fopp a).",
            "VernacExtend",
            "7fbab4f4cfeebfe264b6503e0e6f2d6e19fb37c5"
        ],
        [
            "unfold FtoRradix in |- *; repeat rewrite Fopp_correct.",
            "VernacExtend",
            "3335b4703a3a97d3007be20d235819750bd0360e"
        ],
        [
            "apply Ropp_lt_contravar.",
            "VernacExtend",
            "d8e11ebac93d435105a924a8c0c7fe0b21db4797"
        ],
        [
            "rewrite <- Fopp_correct; auto with float.",
            "VernacExtend",
            "d14f49adc8fbefa2be73a76ab3c47e4904caf52b"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Theorem R0RltRlePred : forall x : float, (0 < x)%R -> (0 <= FPred x)%R.",
            "VernacStartTheoremProof",
            "748647fad21c060e68ba295c2bb391206aa7be7d"
        ],
        [
            "intros x H'; rewrite FPredFopFSucc.",
            "VernacExtend",
            "41d07b5ebf351fb4ae75b6ee5a6415e0be5e0ab9"
        ],
        [
            "unfold FtoRradix in |- *; repeat rewrite Fopp_correct.",
            "VernacExtend",
            "3335b4703a3a97d3007be20d235819750bd0360e"
        ],
        [
            "replace 0%R with (-0)%R; auto with real.",
            "VernacExtend",
            "ad9a3c816968bd85bd0ee7d9d06b032f07b0b811"
        ],
        [
            "apply Ropp_le_contravar.",
            "VernacExtend",
            "ac8d32b190d111aa8834547674121bcf3bb8a0ed"
        ],
        [
            "apply R0RltRleSucc; auto.",
            "VernacExtend",
            "f0aedbe041e5ce2eb6aaacb03d043e1b5f90f3ff"
        ],
        [
            "unfold FtoRradix in |- *; repeat rewrite Fopp_correct.",
            "VernacExtend",
            "3335b4703a3a97d3007be20d235819750bd0360e"
        ],
        [
            "replace 0%R with (-0)%R; auto with real.",
            "VernacExtend",
            "ad9a3c816968bd85bd0ee7d9d06b032f07b0b811"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Theorem FPredProp : forall x y : float, Fcanonic radix b x -> Fcanonic radix b y -> (x < y)%R -> (x <= FPred y)%R.",
            "VernacStartTheoremProof",
            "8c06900c4c80417ac36c3ed3f9ed40d5933d437b"
        ],
        [
            "intros x y H' H'0 H'1; rewrite FPredFopFSucc.",
            "VernacExtend",
            "c3bf56c0b162edcc468d8dda952a08de7c1b897a"
        ],
        [
            "rewrite <- (Fopp_Fopp x).",
            "VernacExtend",
            "66fddcb732997ea18cfcc565263792a3286ede3a"
        ],
        [
            "unfold FtoRradix in |- *; rewrite Fopp_correct with (x := Fopp x).",
            "VernacExtend",
            "03af07875ce792550b6f07fbef2765eecf3a4149"
        ],
        [
            "rewrite Fopp_correct with (x := FSucc b radix precision (Fopp y)); auto with float real.",
            "VernacExtend",
            "f3af45df951849317687074b9259ee45b2122fb5"
        ],
        [
            "apply Ropp_le_contravar.",
            "VernacExtend",
            "ac8d32b190d111aa8834547674121bcf3bb8a0ed"
        ],
        [
            "apply FSuccProp; auto with float.",
            "VernacExtend",
            "7fba76eb0490959e401bc293867e316d8c56b77e"
        ],
        [
            "repeat rewrite Fopp_correct; auto with real.",
            "VernacExtend",
            "ae38b0f3f7c5798b1ea96db9ee6fa58cecae29dd"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Theorem FPredZleEq : forall p q : float, (FPred p < q)%R -> (q <= p)%R -> (Fexp p <= Fexp q)%Z -> p = q :>R.",
            "VernacStartTheoremProof",
            "1d377ade80563eb560ee7f5e0b6fc884121e0343"
        ],
        [
            "intros p q H' H'0 H'1.",
            "VernacExtend",
            "05c3e1b098970ef14e38b413a09ed550ca5b4d53"
        ],
        [
            "rewrite <- (Ropp_involutive p); rewrite <- (Ropp_involutive q); apply Ropp_eq_compat.",
            "VernacExtend",
            "2ec0f794816db136594df6cd7d85151e7857b542"
        ],
        [
            "unfold FtoRradix in |- *; repeat rewrite <- Fopp_correct.",
            "VernacExtend",
            "60bdf11d344a93c0e6ffb5b60ca4f1ae748399fa"
        ],
        [
            "apply FSuccZleEq with (b := b) (precision := precision); auto.",
            "VernacExtend",
            "22136f33e652addccee65ef0d940e9bdfa416516"
        ],
        [
            "repeat rewrite Fopp_correct; auto with real.",
            "VernacExtend",
            "ae38b0f3f7c5798b1ea96db9ee6fa58cecae29dd"
        ],
        [
            "apply Ropp_lt_cancel.",
            "VernacExtend",
            "9b0daa4a36df0c9a309eebcfa294d3bffe6b52b2"
        ],
        [
            "repeat rewrite <- Fopp_correct; rewrite <- FPredFopFSucc; rewrite Fopp_Fopp; auto.",
            "VernacExtend",
            "6533674dc4f389b412d3fd22997675b2dc0a906a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Definition FNPred (x : float) := FPred (Fnormalize radix b precision x).",
            "VernacDefinition",
            "7bdf0177be66c8c7f82a0b4c33fe10592a10b711"
        ],
        [
            "Theorem FNPredFopFNSucc : forall x : float, FNPred x = Fopp (FNSucc b radix precision (Fopp x)).",
            "VernacStartTheoremProof",
            "c469f4c6957242c4bd17e08de83c3b97430b7d04"
        ],
        [
            "intros x; unfold FNPred, FNSucc in |- *; auto.",
            "VernacExtend",
            "2542dca942b0c14f87003e8f3068b9a4cde89042"
        ],
        [
            "rewrite Fnormalize_Fopp; auto.",
            "VernacExtend",
            "67ec5eff585bffe7ffdceda7324d2f5d6f488007"
        ],
        [
            "apply FPredFopFSucc; auto.",
            "VernacExtend",
            "de25b78c416ee9218cb7c20126343e6db1d16c68"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Theorem FNPredCanonic : forall a : float, Fbounded b a -> Fcanonic radix b (FNPred a).",
            "VernacStartTheoremProof",
            "d262240443c04e230c309c8fb1d2655c5b05b251"
        ],
        [
            "intros a H'; unfold FNPred in |- *.",
            "VernacExtend",
            "ee27625d7b80ae7ced1faf6b87cad120864bf107"
        ],
        [
            "apply FPredCanonic; auto with float.",
            "VernacExtend",
            "4b71801ac130a6b36a9fad9e8001d1364a0d89b7"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Theorem FNPredLt : forall a : float, (FNPred a < a)%R.",
            "VernacStartTheoremProof",
            "b7573321f67132fe5776906ada3db4c4c9ea3335"
        ],
        [
            "intros a; unfold FNPred in |- *.",
            "VernacExtend",
            "b2bfbf7f7f4be28ac2cf1ba9235e1f758f2a267e"
        ],
        [
            "unfold FtoRradix in |- *; rewrite <- (FnormalizeCorrect _ radixMoreThanOne b precision a).",
            "VernacExtend",
            "ce79997f4c990db5af329edf24a3e8f034519d81"
        ],
        [
            "apply FPredLt; auto.",
            "VernacExtend",
            "71738e9269caa53124d7cf63b7b9ff362a22892d"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Theorem FNPredProp : forall x y : float, Fbounded b x -> Fbounded b y -> (x < y)%R -> (x <= FNPred y)%R.",
            "VernacStartTheoremProof",
            "a276fec2f5eea8de430decfbf7bf4939fd117ccf"
        ],
        [
            "intros x y H' H'0 H'1; unfold FNPred in |- *.",
            "VernacExtend",
            "d248d4f0cf759de0b2cfaff1da7138c3faa8da3d"
        ],
        [
            "replace (FtoRradix x) with (FtoRradix (Fnormalize radix b precision x)).",
            "VernacExtend",
            "098fa1a3969d8a4a6154e60640e3f4eb06a26e75"
        ],
        [
            "apply FPredProp; auto with float.",
            "VernacExtend",
            "8df2f24a118a1a3c4bf89aa88b57bf8fee62c522"
        ],
        [
            "unfold FtoRradix in |- *; repeat rewrite FnormalizeCorrect; auto.",
            "VernacExtend",
            "6a3ad66886a4e76962cbb26347d7beef4330a14a"
        ],
        [
            "unfold FtoRradix in |- *; repeat rewrite FnormalizeCorrect; auto.",
            "VernacExtend",
            "6a3ad66886a4e76962cbb26347d7beef4330a14a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Theorem FPredSuc : forall x : float, Fcanonic radix b x -> FPred (FSucc b radix precision x) = x.",
            "VernacStartTheoremProof",
            "1ab7677f5d9f230cb399ca1bd389962db5fb9e34"
        ],
        [
            "intros x H; unfold FPred, FSucc in |- *.",
            "VernacExtend",
            "fab3fcea8158d538d79de243efaa31b0e88cab43"
        ],
        [
            "cut (Fbounded b x); [ intros Fb0 | apply FcanonicBound with (1 := H) ].",
            "VernacExtend",
            "30096f1882fa832d949234f6aef7ebd73b73c22d"
        ],
        [
            "generalize (Z_eq_bool_correct (Fnum x) (pPred (vNum b))); case (Z_eq_bool (Fnum x) (pPred (vNum b))); simpl in |- *.",
            "VernacExtend",
            "390da62120135a68f412d76934173377a3fc1677"
        ],
        [
            "generalize (Z_eq_bool_correct (nNormMin radix precision) (- pPred (vNum b))); case (Z_eq_bool (nNormMin radix precision) (- pPred (vNum b))); simpl in |- *.",
            "VernacExtend",
            "0ee0013b1128e6de6e07764cbc3960b345030451"
        ],
        [
            "intros H'; Contradict H'; apply sym_not_equal; apply Zlt_not_eq; auto.",
            "VernacExtend",
            "54879a09ec338931405c6607be095faf2462c806"
        ],
        [
            "apply Zlt_le_trans with (- 0%nat)%Z.",
            "VernacExtend",
            "5922597f407234422abf1e1d112f7e80c8a66cd5"
        ],
        [
            "apply Zlt_Zopp; unfold pPred in |- *; apply Zlt_succ_pred; simpl in |- *; apply vNumbMoreThanOne with (3 := pGivesBound); auto.",
            "VernacExtend",
            "bb41700adfa8d1f8b01acf4de859ddb5c6020108"
        ],
        [
            "simpl in |- *; apply Zlt_le_weak; apply nNormPos; auto.",
            "VernacExtend",
            "6dd195da80ec8886de5d948ed04c3c8527415604"
        ],
        [
            "generalize (Z_eq_bool_correct (nNormMin radix precision) (nNormMin radix precision)); case (Z_eq_bool (nNormMin radix precision) (nNormMin radix precision)); simpl in |- *.",
            "VernacExtend",
            "978b77dc911fb411e3fa5057126e7db0e2750129"
        ],
        [
            "generalize (Z_eq_bool_correct (Zsucc (Fexp x)) (- dExp b)); case (Z_eq_bool (Zsucc (Fexp x)) (- dExp b)); simpl in |- *.",
            "VernacExtend",
            "724059147592f4f8c478fe3ebee9530dd80de3b3"
        ],
        [
            "intros H' H'0 H'1 H'2; absurd (- dExp b <= Fexp x)%Z; auto with float.",
            "VernacExtend",
            "745f7e7580c8626b247726c66a77f06baa31187f"
        ],
        [
            "rewrite <- H'; auto with float zarith.",
            "VernacExtend",
            "e90ba912cc61e88b9e78dcf9847d0fd86db30c70"
        ],
        [
            "replace (Zpred (Zsucc (Fexp x))) with (Fexp x); [ idtac | unfold Zsucc, Zpred in |- *; ring ]; auto.",
            "VernacExtend",
            "c2b47c219db39a7e3d9c1274289a2e45df6cea8b"
        ],
        [
            "intros H' H'0 H'1 H'2; rewrite <- H'2; auto.",
            "VernacExtend",
            "ff5158caf14f132d828467d36d47c6f668271f0b"
        ],
        [
            "apply floatEq; auto.",
            "VernacExtend",
            "c847d668791777965ba33ea03f8c58569a27270b"
        ],
        [
            "intros H'; case H'; auto.",
            "VernacExtend",
            "ab91036e51f7c3008a0c371720a2ca0e0735ece9"
        ],
        [
            "generalize (Z_eq_bool_correct (Fnum x) (- nNormMin radix precision)); case (Z_eq_bool (Fnum x) (- nNormMin radix precision)); simpl in |- *.",
            "VernacExtend",
            "ade6f2eb67f62e019b53f73181754807ca4f3c3a"
        ],
        [
            "generalize (Z_eq_bool_correct (Fexp x) (- dExp b)); case (Z_eq_bool (Fexp x) (- dExp b)); simpl in |- *.",
            "VernacExtend",
            "26c146f64e4f7cefe7331f8ad5d01b9c84dc2b5b"
        ],
        [
            "generalize (Z_eq_bool_correct (Zsucc (Fnum x)) (- pPred (vNum b))); case (Z_eq_bool (Zsucc (Fnum x)) (- pPred (vNum b))); simpl in |- *.",
            "VernacExtend",
            "efca4f7f65aa7b8b2dc96efc64b33aad6bfc1509"
        ],
        [
            "intros H0 H1 H2; absurd (Zsucc (Fnum x) <= Fnum x)%Z; auto with zarith.",
            "VernacExtend",
            "a178250fdc8e240403f60fc52ffce69aa2430512"
        ],
        [
            "rewrite H0; rewrite H2; (apply Zle_Zopp; auto with float arith).",
            "VernacExtend",
            "f041e2111b77529ea4c8f82f4a441dbe5d69ca27"
        ],
        [
            "unfold pPred in |- *; apply Zle_Zpred; apply ZltNormMinVnum; auto with zarith.",
            "VernacExtend",
            "7998d0c66abfbf4375bcb26ccdf406e19705a645"
        ],
        [
            "generalize (Z_eq_bool_correct (Zsucc (Fnum x)) (nNormMin radix precision)); case (Z_eq_bool (Zsucc (Fnum x)) (nNormMin radix precision)); simpl in |- *.",
            "VernacExtend",
            "de73dd0c510a2ba47a0ea7fd3adff931810ac86f"
        ],
        [
            "intros H' H'0 H'1 H'2; Contradict H'2.",
            "VernacExtend",
            "34c43fe2262a6ba5c8d6bfb404fc4e272d56ac96"
        ],
        [
            "rewrite <- H'; auto with zarith.",
            "VernacExtend",
            "75ee92ed966965a688026ba5cf644554ada044f9"
        ],
        [
            "replace (Zpred (Zsucc (Fnum x))) with (Fnum x); [ idtac | unfold Zsucc, Zpred in |- *; ring ]; auto.",
            "VernacExtend",
            "7aef5fe91860e642b632ba97da23f9e603067762"
        ],
        [
            "intros H' H'0 H'1 H'2 H'3; apply floatEq; auto.",
            "VernacExtend",
            "3f232f5413268fba08d36f3d3bfce76b25ccb0b0"
        ],
        [
            "generalize (Z_eq_bool_correct (- pPred (vNum b)) (- pPred (vNum b))); case (Z_eq_bool (- pPred (vNum b)) (- pPred (vNum b))); auto.",
            "VernacExtend",
            "062c13d98de880c100174a0498fc8d1c49659f0a"
        ],
        [
            "intros H' H'0 H'1 H'2; rewrite <- H'1.",
            "VernacExtend",
            "55090ee54161eeb21e303d01d738fec94af357b7"
        ],
        [
            "replace (Zsucc (Zpred (Fexp x))) with (Fexp x); [ idtac | unfold Zsucc, Zpred in |- *; ring ]; auto.",
            "VernacExtend",
            "f7540fd9f9dc94d251fdb8f9441a621d15b47248"
        ],
        [
            "apply floatEq; auto.",
            "VernacExtend",
            "c847d668791777965ba33ea03f8c58569a27270b"
        ],
        [
            "intros H'; case H'; auto.",
            "VernacExtend",
            "ab91036e51f7c3008a0c371720a2ca0e0735ece9"
        ],
        [
            "generalize (Z_eq_bool_correct (Zsucc (Fnum x)) (- pPred (vNum b))); case (Z_eq_bool (Zsucc (Fnum x)) (- pPred (vNum b))); simpl in |- *.",
            "VernacExtend",
            "efca4f7f65aa7b8b2dc96efc64b33aad6bfc1509"
        ],
        [
            "intros H'; absurd (- pPred (vNum b) <= Fnum x)%Z; auto with float.",
            "VernacExtend",
            "d2cc6d40f3646d4129da5dbd6066b4104d648719"
        ],
        [
            "rewrite <- H'; auto with zarith.",
            "VernacExtend",
            "75ee92ed966965a688026ba5cf644554ada044f9"
        ],
        [
            "apply Zle_Zabs_inv1; auto with float.",
            "VernacExtend",
            "dc30d044e5ccc0d380ccb8773e9c23810205e57a"
        ],
        [
            "unfold pPred in |- *; apply Zle_Zpred; auto with float.",
            "VernacExtend",
            "d94d852165b44e2cc96506aa42859931541d7757"
        ],
        [
            "generalize (Z_eq_bool_correct (Zsucc (Fnum x)) (nNormMin radix precision)); case (Z_eq_bool (Zsucc (Fnum x)) (nNormMin radix precision)); simpl in |- *.",
            "VernacExtend",
            "de73dd0c510a2ba47a0ea7fd3adff931810ac86f"
        ],
        [
            "generalize (Z_eq_bool_correct (Fexp x) (- dExp b)); case (Z_eq_bool (Fexp x) (- dExp b)); simpl in |- *.",
            "VernacExtend",
            "26c146f64e4f7cefe7331f8ad5d01b9c84dc2b5b"
        ],
        [
            "intros H' H'0 H'1 H'2 H'3.",
            "VernacExtend",
            "60bab14e4e0aa69405847e00147078e5b10d7244"
        ],
        [
            "replace (Zpred (Zsucc (Fnum x))) with (Fnum x); [ idtac | unfold Zsucc, Zpred in |- *; ring ]; auto.",
            "VernacExtend",
            "7aef5fe91860e642b632ba97da23f9e603067762"
        ],
        [
            "apply floatEq; auto.",
            "VernacExtend",
            "c847d668791777965ba33ea03f8c58569a27270b"
        ],
        [
            "intros H' H'0 H'1 H'2 H'3; case H.",
            "VernacExtend",
            "9e41c7ef2bd4d969dd65d39e8b28a222a60f697d"
        ],
        [
            "intros H'4; absurd (nNormMin radix precision <= Zabs (Fnum x))%Z.",
            "VernacExtend",
            "3af9b9ab0ad70eb61a0e08d4c2dc36df4f767471"
        ],
        [
            "replace (Fnum x) with (Zpred (Zsucc (Fnum x))); [ idtac | unfold Zsucc, Zpred in |- *; ring ]; auto.",
            "VernacExtend",
            "00736c5b60c152dd8de234fd1a2205b3473b81f2"
        ],
        [
            "rewrite H'0.",
            "VernacExtend",
            "155943e97f3d58c39d0b7dc8dbaf42688f94c62f"
        ],
        [
            "apply Zlt_not_le; rewrite Zabs_eq; auto with zarith.",
            "VernacExtend",
            "76e4b141d3fef9b15a0282a5bce22e6847566246"
        ],
        [
            "apply Zle_Zpred; apply nNormPos; auto with float zarith.",
            "VernacExtend",
            "3a3c0be1acd81af99e9370470eb989251c1cc833"
        ],
        [
            "apply pNormal_absolu_min with (b := b); auto.",
            "VernacExtend",
            "e86cbd64a24d221a20706aeda84a85b2cef07d24"
        ],
        [
            "intros H'4; Contradict H'; apply FsubnormalFexp with (1 := H'4).",
            "VernacExtend",
            "a639c2473f6410b6306a5f991dffaf963b4baba5"
        ],
        [
            "intros H' H'0 H'1 H'2; apply floatEq; simpl in |- *; auto.",
            "VernacExtend",
            "b7701a9c2fa54d7e4e3e5d4d7295f1f84b2d9d1d"
        ],
        [
            "unfold Zpred, Zsucc in |- *; ring.",
            "VernacExtend",
            "e75ef11cd743684de675be9dde83c8f7287cdabe"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Theorem FSucPred : forall x : float, Fcanonic radix b x -> FSucc b radix precision (FPred x) = x.",
            "VernacStartTheoremProof",
            "f6a12ea26262e7d5e289219dac043a7606faf95c"
        ],
        [
            "intros x H; unfold FPred, FSucc in |- *.",
            "VernacExtend",
            "fab3fcea8158d538d79de243efaa31b0e88cab43"
        ],
        [
            "cut (Fbounded b x); [ intros Fb0 | apply FcanonicBound with (1 := H) ].",
            "VernacExtend",
            "30096f1882fa832d949234f6aef7ebd73b73c22d"
        ],
        [
            "generalize (Z_eq_bool_correct (Fnum x) (- pPred (vNum b))); case (Z_eq_bool (Fnum x) (- pPred (vNum b))); simpl in |- *.",
            "VernacExtend",
            "c129d6447a9063c1952d44d6edd5cef426575172"
        ],
        [
            "generalize (Z_eq_bool_correct (- nNormMin radix precision) (pPred (vNum b))); case (Z_eq_bool (- nNormMin radix precision) (pPred (vNum b))); simpl in |- *.",
            "VernacExtend",
            "ae376aad9e6c52b8c71dd1bdfc767868475fc50c"
        ],
        [
            "intros H'; Contradict H'; apply Zlt_not_eq; auto.",
            "VernacExtend",
            "5c5b66720d3ced20524048aaa058e18018c44965"
        ],
        [
            "rewrite <- (Zopp_involutive (pPred (vNum b))); apply Zlt_Zopp.",
            "VernacExtend",
            "9225b1d2a95159a1718b1ee2db10a7ca77558dba"
        ],
        [
            "apply Zlt_le_trans with (- 0%nat)%Z.",
            "VernacExtend",
            "5922597f407234422abf1e1d112f7e80c8a66cd5"
        ],
        [
            "apply Zlt_Zopp; unfold pPred in |- *; apply Zlt_succ_pred; simpl in |- *.",
            "VernacExtend",
            "e7a16647940e63fb1899f85dc3cb990c2c780ca5"
        ],
        [
            "apply (vNumbMoreThanOne radix) with (precision := precision); auto.",
            "VernacExtend",
            "ba0876dc833936e3710994bb4088bb90f95800b7"
        ],
        [
            "simpl in |- *; apply Zlt_le_weak; apply nNormPos; auto with zarith arith.",
            "VernacExtend",
            "4e5ebb20a9d0fd57b545f2ca08a9dc5b59c66360"
        ],
        [
            "generalize (Z_eq_bool_correct (- nNormMin radix precision) (- nNormMin radix precision)); case (Z_eq_bool (- nNormMin radix precision) (- nNormMin radix precision)); simpl in |- *.",
            "VernacExtend",
            "7ffadd5f62b0141e5a3c6af5bb26582f6b14db68"
        ],
        [
            "generalize (Z_eq_bool_correct (Zsucc (Fexp x)) (- dExp b)); case (Z_eq_bool (Zsucc (Fexp x)) (- dExp b)); simpl in |- *.",
            "VernacExtend",
            "724059147592f4f8c478fe3ebee9530dd80de3b3"
        ],
        [
            "intros H' H'0 H'1 H'2; absurd (- dExp b <= Fexp x)%Z; auto with float.",
            "VernacExtend",
            "745f7e7580c8626b247726c66a77f06baa31187f"
        ],
        [
            "rewrite <- H'; auto with zarith.",
            "VernacExtend",
            "75ee92ed966965a688026ba5cf644554ada044f9"
        ],
        [
            "intros H' H'0 H'1 H'2; rewrite <- H'2; apply floatEq; simpl in |- *; auto; unfold Zsucc, Zpred in |- *; ring.",
            "VernacExtend",
            "ed0895652f32e69d1d95af31051da9e2217a183a"
        ],
        [
            "intros H'; case H'; auto.",
            "VernacExtend",
            "ab91036e51f7c3008a0c371720a2ca0e0735ece9"
        ],
        [
            "generalize (Z_eq_bool_correct (Fnum x) (nNormMin radix precision)); case (Z_eq_bool (Fnum x) (nNormMin radix precision)); simpl in |- *.",
            "VernacExtend",
            "b9e0891a8aba9e140084263abbed384f656838fe"
        ],
        [
            "generalize (Z_eq_bool_correct (Fexp x) (- dExp b)); case (Z_eq_bool (Fexp x) (- dExp b)); simpl in |- *.",
            "VernacExtend",
            "26c146f64e4f7cefe7331f8ad5d01b9c84dc2b5b"
        ],
        [
            "generalize (Z_eq_bool_correct (Zpred (Fnum x)) (pPred (vNum b))); case (Z_eq_bool (Zpred (Fnum x)) (pPred (vNum b))); simpl in |- *.",
            "VernacExtend",
            "5114068a5ce57420859f2187e32d84488b7c8e20"
        ],
        [
            "intros H' H'0 H'1 H'2; absurd (nNormMin radix precision <= pPred (vNum b))%Z; auto with float.",
            "VernacExtend",
            "4d5348b530807898448a833bd4a9114c759f0e12"
        ],
        [
            "rewrite <- H'; rewrite H'1; auto with zarith.",
            "VernacExtend",
            "876843ddfa39c3a951083058cbdd6432ce53f1ab"
        ],
        [
            "rewrite <- H'1; auto with float.",
            "VernacExtend",
            "d77fbadb80b5a26d4fc3cb6ba20e59cb44702ab5"
        ],
        [
            "apply Zle_Zabs_inv2; auto with float zarith.",
            "VernacExtend",
            "3fb571cf48607aa363e12a07f462540503852199"
        ],
        [
            "unfold pPred in |- *; apply Zle_Zpred; auto with float.",
            "VernacExtend",
            "d94d852165b44e2cc96506aa42859931541d7757"
        ],
        [
            "generalize (Z_eq_bool_correct (Zpred (Fnum x)) (- nNormMin radix precision)); case (Z_eq_bool (Zpred (Fnum x)) (- nNormMin radix precision)); simpl in |- *.",
            "VernacExtend",
            "a331ba393277b47979fa6667cc9acd23fc267788"
        ],
        [
            "intros H' H'0 H'1 H'2 H'3; absurd (Zpred (nNormMin radix precision) = (- nNormMin radix precision)%Z); auto with zarith.",
            "VernacExtend",
            "ae65c9cba84ae8238641d04c56000e4fbb1391bb"
        ],
        [
            "intros H' H'0 H'1 H'2 H'3; apply floatEq; simpl in |- *; auto; unfold Zpred, Zsucc in |- *; ring.",
            "VernacExtend",
            "829bd31b2114278c2d57449e98b7e199e0ef6ce8"
        ],
        [
            "generalize (Z_eq_bool_correct (pPred (vNum b)) (pPred (vNum b))); case (Z_eq_bool (pPred (vNum b)) (pPred (vNum b))); auto.",
            "VernacExtend",
            "2cedc1d00342652ce9d366d4c1ee43ecee66d22e"
        ],
        [
            "intros H' H'0 H'1 H'2; rewrite <- H'1; apply floatEq; simpl in |- *; auto; unfold Zpred, Zsucc in |- *; ring.",
            "VernacExtend",
            "d8f22be3746b9e566f7be0ab1cce60402c25abc4"
        ],
        [
            "intros H'; case H'; auto.",
            "VernacExtend",
            "ab91036e51f7c3008a0c371720a2ca0e0735ece9"
        ],
        [
            "generalize (Z_eq_bool_correct (Zpred (Fnum x)) (pPred (vNum b))); case (Z_eq_bool (Zpred (Fnum x)) (pPred (vNum b))); simpl in |- *.",
            "VernacExtend",
            "5114068a5ce57420859f2187e32d84488b7c8e20"
        ],
        [
            "intros H'; absurd (Fnum x <= pPred (vNum b))%Z; auto with float.",
            "VernacExtend",
            "80a4b1b9ad025025329ba312298df6efdb6f355b"
        ],
        [
            "rewrite <- H'.",
            "VernacExtend",
            "6015ddb26a544f622429ee9ca3769cdf838b7d8a"
        ],
        [
            "apply Zlt_not_le; apply Zlt_pred; auto.",
            "VernacExtend",
            "c0b1b21ccaa7186ca2bdc8e910679bc297313d9b"
        ],
        [
            "apply Zle_Zabs_inv2; unfold pPred in |- *; apply Zle_Zpred; auto with float.",
            "VernacExtend",
            "f11c1c8014fb916dbee1c5160bf8d0f35e69b7ed"
        ],
        [
            "generalize (Z_eq_bool_correct (Zpred (Fnum x)) (- nNormMin radix precision)); case (Z_eq_bool (Zpred (Fnum x)) (- nNormMin radix precision)); simpl in |- *.",
            "VernacExtend",
            "a331ba393277b47979fa6667cc9acd23fc267788"
        ],
        [
            "generalize (Z_eq_bool_correct (Fexp x) (- dExp b)); case (Z_eq_bool (Fexp x) (- dExp b)); simpl in |- *.",
            "VernacExtend",
            "26c146f64e4f7cefe7331f8ad5d01b9c84dc2b5b"
        ],
        [
            "intros H' H'0 H'1 H'2 H'3; apply floatEq; simpl in |- *; auto; unfold Zsucc, Zpred in |- *; ring.",
            "VernacExtend",
            "bb0d4c0093b6531af31f091778bf52ea341fda07"
        ],
        [
            "intros H' H'0 H'1 H'2 H'3; case H; intros C0.",
            "VernacExtend",
            "8ecfbbf329c84f9a7b0aa7006e36c24143e66612"
        ],
        [
            "absurd (nNormMin radix precision <= Zabs (Fnum x))%Z; auto with float.",
            "VernacExtend",
            "fe2657a3e6b38a2d24424543fbb05c4a686667f0"
        ],
        [
            "replace (Fnum x) with (Zsucc (Zpred (Fnum x))); [ idtac | unfold Zsucc, Zpred in |- *; ring ].",
            "VernacExtend",
            "d98368ada8469f9d8e1e26804755e1ed003336a1"
        ],
        [
            "rewrite H'0.",
            "VernacExtend",
            "155943e97f3d58c39d0b7dc8dbaf42688f94c62f"
        ],
        [
            "rewrite <- Zopp_Zpred_Zs; rewrite Zabs_Zopp.",
            "VernacExtend",
            "28202882bc1982d8070481349c92367ad1a8b979"
        ],
        [
            "rewrite Zabs_eq; auto with zarith.",
            "VernacExtend",
            "e3b6647506c6d43441146989691d7c27f1722b7e"
        ],
        [
            "apply Zle_Zpred; simpl in |- *; apply nNormPos; auto with float zarith.",
            "VernacExtend",
            "bf9bbd540fa47cc3a44c1d48c8c3828c25c413b7"
        ],
        [
            "apply pNormal_absolu_min with (b := b); auto.",
            "VernacExtend",
            "e86cbd64a24d221a20706aeda84a85b2cef07d24"
        ],
        [
            "Contradict H'; apply FsubnormalFexp with (1 := C0).",
            "VernacExtend",
            "ee666d81638c9a97792c539213a7a07fd8394c5a"
        ],
        [
            "intros H' H'0 H'1 H'2; apply floatEq; simpl in |- *; auto.",
            "VernacExtend",
            "b7701a9c2fa54d7e4e3e5d4d7295f1f84b2d9d1d"
        ],
        [
            "unfold Zpred, Zsucc in |- *; ring.",
            "VernacExtend",
            "e75ef11cd743684de675be9dde83c8f7287cdabe"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Theorem FNPredSuc : forall x : float, Fbounded b x -> FNPred (FNSucc b radix precision x) = x :>R.",
            "VernacStartTheoremProof",
            "f837a1a5d2fe717a538f1ff77d8fb6fb9e9bee52"
        ],
        [
            "intros x H'; unfold FNPred in |- *; rewrite FcanonicFnormalizeEq; auto.",
            "VernacExtend",
            "1d90b0bb321164267e8449de86497fb92c06d065"
        ],
        [
            "unfold FNSucc in |- *; rewrite FPredSuc; auto.",
            "VernacExtend",
            "58a696103c843a10acb4c2852cc4d1d198fb1a1a"
        ],
        [
            "unfold FtoRradix in |- *; apply FnormalizeCorrect; auto.",
            "VernacExtend",
            "470ee4d615cb96e2c80e7ff477747cec6ab8c852"
        ],
        [
            "apply FnormalizeCanonic; auto.",
            "VernacExtend",
            "9a1fe361020914af4b8bf7ab09ee74e43ff90cec"
        ],
        [
            "apply FNSuccCanonic; auto.",
            "VernacExtend",
            "ebb67044c842161a67c189619d2a7761ffe66f7a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Theorem FNPredSucEq : forall x : float, Fcanonic radix b x -> FNPred (FNSucc b radix precision x) = x.",
            "VernacStartTheoremProof",
            "37e697e001febad4534345f97af0503366f5c68f"
        ],
        [
            "intros x H'.",
            "VernacExtend",
            "1864e43355295bd98e7920f89fb20cbad05f10d7"
        ],
        [
            "apply FcanonicUnique with (precision := precision) (5 := H'); auto.",
            "VernacExtend",
            "9e6fd384f5394da839ad467155c15b8489f652fe"
        ],
        [
            "apply FNPredCanonic; auto with float.",
            "VernacExtend",
            "84d05c957939862220e5ad512ebebf64105f54c5"
        ],
        [
            "apply FcanonicBound with (radix := radix); auto.",
            "VernacExtend",
            "7ff66c1c77430eeda2d6b2110bd18def44854cf6"
        ],
        [
            "apply FNSuccCanonic; auto.",
            "VernacExtend",
            "ebb67044c842161a67c189619d2a7761ffe66f7a"
        ],
        [
            "apply FcanonicBound with (radix := radix); auto.",
            "VernacExtend",
            "7ff66c1c77430eeda2d6b2110bd18def44854cf6"
        ],
        [
            "apply FNPredSuc; auto.",
            "VernacExtend",
            "787c89df880105c7fa3c4c3e04f246507b7cf49c"
        ],
        [
            "apply FcanonicBound with (radix := radix); auto.",
            "VernacExtend",
            "7ff66c1c77430eeda2d6b2110bd18def44854cf6"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Theorem FNSucPred : forall x : float, Fbounded b x -> FNSucc b radix precision (FNPred x) = x :>R.",
            "VernacStartTheoremProof",
            "7c9688b34644d71a0ed89fe51f6a5753f5a8310e"
        ],
        [
            "intros x H'; unfold FNSucc in |- *; rewrite FcanonicFnormalizeEq; auto.",
            "VernacExtend",
            "61ca6572c0149f05c7e001576e795ddd09029109"
        ],
        [
            "unfold FNPred in |- *; rewrite FSucPred; auto.",
            "VernacExtend",
            "d891df011b16144233d5b0e46d13678023640422"
        ],
        [
            "unfold FtoRradix in |- *; apply FnormalizeCorrect; auto.",
            "VernacExtend",
            "470ee4d615cb96e2c80e7ff477747cec6ab8c852"
        ],
        [
            "apply FnormalizeCanonic; auto.",
            "VernacExtend",
            "9a1fe361020914af4b8bf7ab09ee74e43ff90cec"
        ],
        [
            "apply FNPredCanonic; auto.",
            "VernacExtend",
            "eb39e1b8356f8dcc948bb575ce9379dd0484c5fd"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Theorem FNSucPredEq : forall x : float, Fcanonic radix b x -> FNSucc b radix precision (FNPred x) = x.",
            "VernacStartTheoremProof",
            "549c31a0495c94f8956f53db45543ac84612156a"
        ],
        [
            "intros x H'.",
            "VernacExtend",
            "1864e43355295bd98e7920f89fb20cbad05f10d7"
        ],
        [
            "apply FcanonicUnique with (5 := H') (precision := precision); auto.",
            "VernacExtend",
            "8c86f09321bcdbe0ff131b55470101a91b94cfb3"
        ],
        [
            "apply FNSuccCanonic; auto.",
            "VernacExtend",
            "ebb67044c842161a67c189619d2a7761ffe66f7a"
        ],
        [
            "apply FcanonicBound with (radix := radix); auto.",
            "VernacExtend",
            "7ff66c1c77430eeda2d6b2110bd18def44854cf6"
        ],
        [
            "apply FNPredCanonic; auto.",
            "VernacExtend",
            "eb39e1b8356f8dcc948bb575ce9379dd0484c5fd"
        ],
        [
            "apply FcanonicBound with (radix := radix); auto.",
            "VernacExtend",
            "7ff66c1c77430eeda2d6b2110bd18def44854cf6"
        ],
        [
            "apply FNSucPred; auto.",
            "VernacExtend",
            "b665faab29e0223b4c234f2b96bab329bfb9dc28"
        ],
        [
            "apply FcanonicBound with (radix := radix); auto.",
            "VernacExtend",
            "7ff66c1c77430eeda2d6b2110bd18def44854cf6"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "End pred.",
            "VernacEndSegment",
            "254d9c4ba4ddb61e610ad820ba0fe30957f15448"
        ],
        [
            "Hint Resolve FBoundedPred FPredCanonic FPredLt R0RltRleSucc FPredProp FNPredCanonic FNPredLt FNPredProp: float.",
            "VernacHints",
            "6a6cba50680a12abf07e54d897fa2b736d69b5ea"
        ]
    ],
    "proofs": [
        {
            "name": "FPredSimpl1",
            "line_nb": 11,
            "steps": [
                {
                    "command": [
                        "intros x H'; unfold FPred in |- *.",
                        "VernacExtend",
                        "00a1b0539b82f7ac90dfaa90311d7f05cbd891fe"
                    ]
                },
                {
                    "command": [
                        "generalize (Z_eq_bool_correct (Fnum x) (- pPred (vNum b))); case (Z_eq_bool (Fnum x) (- pPred (vNum b))); auto.",
                        "VernacExtend",
                        "fc5a688eb3d620a60d6a2f95bee1dd891233575b"
                    ]
                },
                {
                    "command": [
                        "intros H'0; Contradict H'0; auto.",
                        "VernacExtend",
                        "309e0c652fca7ca41fc269e7e4c3bac2313ada79"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "FPredSimpl2",
            "line_nb": 16,
            "steps": [
                {
                    "command": [
                        "intros x H' H'0; unfold FPred in |- *.",
                        "VernacExtend",
                        "b5e1dafafe7c7a104dcb4a8ecf59cebb90ca18c4"
                    ]
                },
                {
                    "command": [
                        "generalize (Z_eq_bool_correct (Fnum x) (- pPred (vNum b))); case (Z_eq_bool (Fnum x) (- pPred (vNum b))); auto.",
                        "VernacExtend",
                        "fc5a688eb3d620a60d6a2f95bee1dd891233575b"
                    ]
                },
                {
                    "command": [
                        "intros H'1; absurd (0%nat < Fnum x)%Z; auto with zarith arith.",
                        "VernacExtend",
                        "20552eb11688da8b0fa10e81918eee5a55c5e736"
                    ]
                },
                {
                    "command": [
                        "apply Zle_not_lt; rewrite H'1; replace (Z_of_nat 0) with (- (0))%Z; [ apply Zle_Zopp | simpl in |- *; auto ].",
                        "VernacExtend",
                        "d0e6be42e61c7ec0cd90bae91e4aabdd3f42a088"
                    ]
                },
                {
                    "command": [
                        "unfold pPred in |- *; apply Zle_Zpred; red in |- *; simpl in |- *; auto.",
                        "VernacExtend",
                        "bfaf50f1edbc0bfb07f589ae8cc5d9e26056f0ec"
                    ]
                },
                {
                    "command": [
                        "rewrite H'.",
                        "VernacExtend",
                        "232d4714354910d49fdbf1140eac1d26da075d17"
                    ]
                },
                {
                    "command": [
                        "apply nNormPos; auto with zarith.",
                        "VernacExtend",
                        "8050df37637552c4f93f1659280a94a6c325f5f8"
                    ]
                },
                {
                    "command": [
                        "intros H'1; generalize (Z_eq_bool_correct (Fnum x) (nNormMin radix precision)); case (Z_eq_bool (Fnum x) (nNormMin radix precision)).",
                        "VernacExtend",
                        "8223de898a94683057f50a635dbfab39ef093c8e"
                    ]
                },
                {
                    "command": [
                        "intros H'2; generalize (Z_eq_bool_correct (Fexp x) (- dExp b)); case (Z_eq_bool (Fexp x) (- dExp b)); auto.",
                        "VernacExtend",
                        "1a95a833b963d3a109b5a145d8460c93b359f404"
                    ]
                },
                {
                    "command": [
                        "intros H'3; Contradict H'0; auto.",
                        "VernacExtend",
                        "6cce241fa4bfbc07b2ae179350c8cf2aa973116a"
                    ]
                },
                {
                    "command": [
                        "intros H'2; Contradict H'2; auto.",
                        "VernacExtend",
                        "1aa71754603bb31667514e8c1dbfa39a9f2ebb70"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "FPredSimpl3",
            "line_nb": 29,
            "steps": [
                {
                    "command": [
                        "unfold FPred in |- *; simpl in |- *.",
                        "VernacExtend",
                        "07430748cdd6a090458bcc43aa2abcb94f5ba953"
                    ]
                },
                {
                    "command": [
                        "generalize (Z_eq_bool_correct (nNormMin radix precision) (- pPred (vNum b))); case (Z_eq_bool (nNormMin radix precision) (- pPred (vNum b))); auto.",
                        "VernacExtend",
                        "188029d714ceaf71f03936f40b5d0c052ec43cd2"
                    ]
                },
                {
                    "command": [
                        "intros H'0; absurd (0 < pPred (vNum b))%Z; auto with zarith arith.",
                        "VernacExtend",
                        "32dad7e0f014ee21da90c1ba2396ded097ee55d8"
                    ]
                },
                {
                    "command": [
                        "rewrite <- (Zopp_involutive (pPred (vNum b))); rewrite <- H'0.",
                        "VernacExtend",
                        "8ec1a39df37c523f14af0d4b152c8e24bac64534"
                    ]
                },
                {
                    "command": [
                        "apply Zle_not_lt; replace 0%Z with (- (0))%Z; [ apply Zle_Zopp | simpl in |- *; auto ].",
                        "VernacExtend",
                        "1c34800a4dfdd13edcddebea9319b3eb7afe12e0"
                    ]
                },
                {
                    "command": [
                        "apply Zlt_le_weak; apply nNormPos; auto with float zarith.",
                        "VernacExtend",
                        "a5278bd9ff1bd188f4746b02b78a290a8b7a2453"
                    ]
                },
                {
                    "command": [
                        "unfold pPred in |- *; apply Zlt_succ_pred; simpl in |- *; auto with float zarith.",
                        "VernacExtend",
                        "0e454c9536eae4d5395380946f180576c870ed25"
                    ]
                },
                {
                    "command": [
                        "simpl in |- *; apply vNumbMoreThanOne with (3 := pGivesBound); auto.",
                        "VernacExtend",
                        "94949278407aa5585b728d75d9d3eadfce4584b4"
                    ]
                },
                {
                    "command": [
                        "intros H'; generalize (Z_eq_bool_correct (nNormMin radix precision) (nNormMin radix precision)); case (Z_eq_bool (nNormMin radix precision) (nNormMin radix precision)).",
                        "VernacExtend",
                        "2ea081499add59232faf634477e2089bbc6aa657"
                    ]
                },
                {
                    "command": [
                        "intros H'0; generalize (Z_eq_bool_correct (- dExp b) (- dExp b)); case (Z_eq_bool (- dExp b) (- dExp b)); auto.",
                        "VernacExtend",
                        "846a265bed88b4fbb4e8d22e51b081d720035268"
                    ]
                },
                {
                    "command": [
                        "intros H'1; Contradict H'1; auto.",
                        "VernacExtend",
                        "8db85f3016bcb692223b807804acc9e52d044004"
                    ]
                },
                {
                    "command": [
                        "intros H'1; Contradict H'1; auto.",
                        "VernacExtend",
                        "8db85f3016bcb692223b807804acc9e52d044004"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "FPredSimpl4",
            "line_nb": 43,
            "steps": [
                {
                    "command": [
                        "intros x H' H'0; unfold FPred in |- *.",
                        "VernacExtend",
                        "b5e1dafafe7c7a104dcb4a8ecf59cebb90ca18c4"
                    ]
                },
                {
                    "command": [
                        "generalize (Z_eq_bool_correct (Fnum x) (- pPred (vNum b))); case (Z_eq_bool (Fnum x) (- pPred (vNum b))); auto.",
                        "VernacExtend",
                        "fc5a688eb3d620a60d6a2f95bee1dd891233575b"
                    ]
                },
                {
                    "command": [
                        "intros H'1; Contradict H'; auto.",
                        "VernacExtend",
                        "df583a974a49b9d26ca786a8b3785e2dd7a4b3d0"
                    ]
                },
                {
                    "command": [
                        "intros H'1; generalize (Z_eq_bool_correct (Fnum x) (nNormMin radix precision)); case (Z_eq_bool (Fnum x) (nNormMin radix precision)); auto.",
                        "VernacExtend",
                        "eef390b6a90bb3f421fa2f51dbbf01abf8ae3def"
                    ]
                },
                {
                    "command": [
                        "intros H'2; Contradict H'0; auto.",
                        "VernacExtend",
                        "5852154b7666463c5197fef05024fa0f18f3fa8a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "FPredFopFSucc",
            "line_nb": 50,
            "steps": [
                {
                    "command": [
                        "intros x.",
                        "VernacExtend",
                        "596d66edc70dae19981ed74f103fc0a865aec92c"
                    ]
                },
                {
                    "command": [
                        "generalize (Z_eq_bool_correct (Fnum x) (- pPred (vNum b))); case (Z_eq_bool (Fnum x) (- pPred (vNum b))); intros H'1.",
                        "VernacExtend",
                        "47ec68604887caa782dfd6c84cb8618cbd177fb9"
                    ]
                },
                {
                    "command": [
                        "rewrite FPredSimpl1; auto; rewrite FSuccSimpl1; auto.",
                        "VernacExtend",
                        "7bbba81dd78bf1b1c2bdd29721d59744fac00b30"
                    ]
                },
                {
                    "command": [
                        "unfold Fopp in |- *; simpl in |- *; rewrite H'1; auto with zarith.",
                        "VernacExtend",
                        "64b205231dede3a58cf62457fabf9519b175d62a"
                    ]
                },
                {
                    "command": [
                        "generalize (Z_eq_bool_correct (Fnum x) (nNormMin radix precision)); case (Z_eq_bool (Fnum x) (nNormMin radix precision)); intros H'2.",
                        "VernacExtend",
                        "fbcf47cc1c052273f025ab905c4448c56e1cf8a6"
                    ]
                },
                {
                    "command": [
                        "generalize (Z_eq_bool_correct (Fexp x) (- dExp b)); case (Z_eq_bool (Fexp x) (- dExp b)); intros H'3.",
                        "VernacExtend",
                        "176a14d832b1018f48b7cc690da05ba30d121e7c"
                    ]
                },
                {
                    "command": [
                        "replace x with (Float (Fnum x) (Fexp x)).",
                        "VernacExtend",
                        "a8877e005fb0e6fdbc20b1adc720e9c08a677ad7"
                    ]
                },
                {
                    "command": [
                        "rewrite H'2; rewrite H'3; rewrite FPredSimpl3; unfold Fopp in |- *; simpl in |- *; rewrite FSuccSimpl3; simpl in |- *; auto.",
                        "VernacExtend",
                        "a84068d6aa1d346195098367c5de6b3e6075f84f"
                    ]
                },
                {
                    "command": [
                        "rewrite <- Zopp_Zpred_Zs; rewrite Zopp_involutive; auto.",
                        "VernacExtend",
                        "c95ab0ba40b39a3d03d39179475e3f5acc1967f1"
                    ]
                },
                {
                    "command": [
                        "case x; simpl in |- *; auto.",
                        "VernacExtend",
                        "78d0bd53c1fe23bd9447c87ca89fb83e9e828572"
                    ]
                },
                {
                    "command": [
                        "rewrite FPredSimpl2; auto; rewrite FSuccSimpl2; unfold Fopp in |- *; simpl in |- *; try rewrite Zopp_involutive; auto.",
                        "VernacExtend",
                        "78a61e2dce581e4a2f3138383c9df5997d5aa076"
                    ]
                },
                {
                    "command": [
                        "rewrite H'2; auto.",
                        "VernacExtend",
                        "2c2cd2310e6d6c30ae4cdcfb896dfe62bf83deb1"
                    ]
                },
                {
                    "command": [
                        "rewrite FPredSimpl4; auto; rewrite FSuccSimpl4; auto.",
                        "VernacExtend",
                        "8bff6580168b6a6bc78785ecb0766f5317791c5b"
                    ]
                },
                {
                    "command": [
                        "unfold Fopp in |- *; simpl in |- *; rewrite <- Zopp_Zpred_Zs; rewrite Zopp_involutive; auto.",
                        "VernacExtend",
                        "4d95f50850222b24d2af4793b951819be071696a"
                    ]
                },
                {
                    "command": [
                        "unfold Fopp in |- *; simpl in |- *; Contradict H'1; rewrite <- H'1; rewrite Zopp_involutive; auto.",
                        "VernacExtend",
                        "44e0d72d87625d53771596307322879a7ac2f42b"
                    ]
                },
                {
                    "command": [
                        "unfold Fopp in |- *; simpl in |- *; Contradict H'2; auto with zarith.",
                        "VernacExtend",
                        "7db90887ee98095e1d8f439731ec91dddd558bb6"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "FPredDiff1",
            "line_nb": 68,
            "steps": [
                {
                    "command": [
                        "intros x H'; rewrite (FPredFopFSucc x).",
                        "VernacExtend",
                        "54834e5c38f44fd94eef55f3cec4b89722814da2"
                    ]
                },
                {
                    "command": [
                        "pattern x at 1 in |- *; rewrite <- (Fopp_Fopp x).",
                        "VernacExtend",
                        "f2057a9235a125847d74a7abaa6d14bc4f35e522"
                    ]
                },
                {
                    "command": [
                        "rewrite <- Fopp_Fminus_dist.",
                        "VernacExtend",
                        "5cae82ee277428614ed1993002e21586b1c5aff0"
                    ]
                },
                {
                    "command": [
                        "rewrite Fopp_Fminus.",
                        "VernacExtend",
                        "dbf0252d4a6d9d5774b0171f6b7c19c3d59aced6"
                    ]
                },
                {
                    "command": [
                        "unfold FtoRradix in |- *; rewrite FSuccDiff1; auto.",
                        "VernacExtend",
                        "24f3d8a4965531653aa88dd3a4b1382cef5caaf2"
                    ]
                },
                {
                    "command": [
                        "replace (Fnum (Fopp x)) with (- Fnum x)%Z.",
                        "VernacExtend",
                        "b50eff7ec0065294cf36cad7d191e08320a79823"
                    ]
                },
                {
                    "command": [
                        "Contradict H'; rewrite <- (Zopp_involutive (Fnum x)); rewrite H'; auto with zarith.",
                        "VernacExtend",
                        "7b73e7ecacbdd21f95a67887440d191d999e1b4b"
                    ]
                },
                {
                    "command": [
                        "case x; simpl in |- *; auto.",
                        "VernacExtend",
                        "78d0bd53c1fe23bd9447c87ca89fb83e9e828572"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "FPredDiff2",
            "line_nb": 78,
            "steps": [
                {
                    "command": [
                        "intros x H' H'0; rewrite (FPredFopFSucc x).",
                        "VernacExtend",
                        "38954fe567aa82926e0f02ae9f17dcbc2bcf4287"
                    ]
                },
                {
                    "command": [
                        "pattern x at 1 in |- *; rewrite <- (Fopp_Fopp x).",
                        "VernacExtend",
                        "f2057a9235a125847d74a7abaa6d14bc4f35e522"
                    ]
                },
                {
                    "command": [
                        "rewrite <- Fopp_Fminus_dist.",
                        "VernacExtend",
                        "5cae82ee277428614ed1993002e21586b1c5aff0"
                    ]
                },
                {
                    "command": [
                        "rewrite Fopp_Fminus.",
                        "VernacExtend",
                        "dbf0252d4a6d9d5774b0171f6b7c19c3d59aced6"
                    ]
                },
                {
                    "command": [
                        "unfold FtoRradix in |- *; rewrite FSuccDiff2; auto.",
                        "VernacExtend",
                        "6333a724696d1aa86b072998990879122c1a8a9f"
                    ]
                },
                {
                    "command": [
                        "rewrite <- H'; case x; auto.",
                        "VernacExtend",
                        "58132718419a27b052edd3f659ceabdca4f651f1"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "FPredDiff3",
            "line_nb": 86,
            "steps": [
                {
                    "command": [
                        "intros x H' H'0; rewrite (FPredFopFSucc x).",
                        "VernacExtend",
                        "38954fe567aa82926e0f02ae9f17dcbc2bcf4287"
                    ]
                },
                {
                    "command": [
                        "pattern x at 1 in |- *; rewrite <- (Fopp_Fopp x).",
                        "VernacExtend",
                        "f2057a9235a125847d74a7abaa6d14bc4f35e522"
                    ]
                },
                {
                    "command": [
                        "rewrite <- Fopp_Fminus_dist.",
                        "VernacExtend",
                        "5cae82ee277428614ed1993002e21586b1c5aff0"
                    ]
                },
                {
                    "command": [
                        "rewrite Fopp_Fminus.",
                        "VernacExtend",
                        "dbf0252d4a6d9d5774b0171f6b7c19c3d59aced6"
                    ]
                },
                {
                    "command": [
                        "unfold FtoRradix in |- *; rewrite FSuccDiff3; auto.",
                        "VernacExtend",
                        "c16a3aa2189f1079b849d5ed2d82a600471ce679"
                    ]
                },
                {
                    "command": [
                        "rewrite <- H'; case x; auto.",
                        "VernacExtend",
                        "58132718419a27b052edd3f659ceabdca4f651f1"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "FBoundedPred",
            "line_nb": 94,
            "steps": [
                {
                    "command": [
                        "intros f H'; rewrite (FPredFopFSucc f); auto with float.",
                        "VernacExtend",
                        "27dd67a8bd1073945068eef1c399602ee3be1dda"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "FPredCanonic",
            "line_nb": 97,
            "steps": [
                {
                    "command": [
                        "intros a H'.",
                        "VernacExtend",
                        "2b7514d481b1c49fc3070e8c7c3f241c036a4bba"
                    ]
                },
                {
                    "command": [
                        "rewrite FPredFopFSucc; auto with float.",
                        "VernacExtend",
                        "760cf208079a1ea2ac64e6eca8e71873db513075"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "FPredLt",
            "line_nb": 101,
            "steps": [
                {
                    "command": [
                        "intros a; rewrite FPredFopFSucc.",
                        "VernacExtend",
                        "3a1bdd35bafd47776d17666a8489ad8416f142a0"
                    ]
                },
                {
                    "command": [
                        "pattern a at 2 in |- *; rewrite <- (Fopp_Fopp a).",
                        "VernacExtend",
                        "7fbab4f4cfeebfe264b6503e0e6f2d6e19fb37c5"
                    ]
                },
                {
                    "command": [
                        "unfold FtoRradix in |- *; repeat rewrite Fopp_correct.",
                        "VernacExtend",
                        "3335b4703a3a97d3007be20d235819750bd0360e"
                    ]
                },
                {
                    "command": [
                        "apply Ropp_lt_contravar.",
                        "VernacExtend",
                        "d8e11ebac93d435105a924a8c0c7fe0b21db4797"
                    ]
                },
                {
                    "command": [
                        "rewrite <- Fopp_correct; auto with float.",
                        "VernacExtend",
                        "d14f49adc8fbefa2be73a76ab3c47e4904caf52b"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "R0RltRlePred",
            "line_nb": 108,
            "steps": [
                {
                    "command": [
                        "intros x H'; rewrite FPredFopFSucc.",
                        "VernacExtend",
                        "41d07b5ebf351fb4ae75b6ee5a6415e0be5e0ab9"
                    ]
                },
                {
                    "command": [
                        "unfold FtoRradix in |- *; repeat rewrite Fopp_correct.",
                        "VernacExtend",
                        "3335b4703a3a97d3007be20d235819750bd0360e"
                    ]
                },
                {
                    "command": [
                        "replace 0%R with (-0)%R; auto with real.",
                        "VernacExtend",
                        "ad9a3c816968bd85bd0ee7d9d06b032f07b0b811"
                    ]
                },
                {
                    "command": [
                        "apply Ropp_le_contravar.",
                        "VernacExtend",
                        "ac8d32b190d111aa8834547674121bcf3bb8a0ed"
                    ]
                },
                {
                    "command": [
                        "apply R0RltRleSucc; auto.",
                        "VernacExtend",
                        "f0aedbe041e5ce2eb6aaacb03d043e1b5f90f3ff"
                    ]
                },
                {
                    "command": [
                        "unfold FtoRradix in |- *; repeat rewrite Fopp_correct.",
                        "VernacExtend",
                        "3335b4703a3a97d3007be20d235819750bd0360e"
                    ]
                },
                {
                    "command": [
                        "replace 0%R with (-0)%R; auto with real.",
                        "VernacExtend",
                        "ad9a3c816968bd85bd0ee7d9d06b032f07b0b811"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "FPredProp",
            "line_nb": 117,
            "steps": [
                {
                    "command": [
                        "intros x y H' H'0 H'1; rewrite FPredFopFSucc.",
                        "VernacExtend",
                        "c3bf56c0b162edcc468d8dda952a08de7c1b897a"
                    ]
                },
                {
                    "command": [
                        "rewrite <- (Fopp_Fopp x).",
                        "VernacExtend",
                        "66fddcb732997ea18cfcc565263792a3286ede3a"
                    ]
                },
                {
                    "command": [
                        "unfold FtoRradix in |- *; rewrite Fopp_correct with (x := Fopp x).",
                        "VernacExtend",
                        "03af07875ce792550b6f07fbef2765eecf3a4149"
                    ]
                },
                {
                    "command": [
                        "rewrite Fopp_correct with (x := FSucc b radix precision (Fopp y)); auto with float real.",
                        "VernacExtend",
                        "f3af45df951849317687074b9259ee45b2122fb5"
                    ]
                },
                {
                    "command": [
                        "apply Ropp_le_contravar.",
                        "VernacExtend",
                        "ac8d32b190d111aa8834547674121bcf3bb8a0ed"
                    ]
                },
                {
                    "command": [
                        "apply FSuccProp; auto with float.",
                        "VernacExtend",
                        "7fba76eb0490959e401bc293867e316d8c56b77e"
                    ]
                },
                {
                    "command": [
                        "repeat rewrite Fopp_correct; auto with real.",
                        "VernacExtend",
                        "ae38b0f3f7c5798b1ea96db9ee6fa58cecae29dd"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "FPredZleEq",
            "line_nb": 126,
            "steps": [
                {
                    "command": [
                        "intros p q H' H'0 H'1.",
                        "VernacExtend",
                        "05c3e1b098970ef14e38b413a09ed550ca5b4d53"
                    ]
                },
                {
                    "command": [
                        "rewrite <- (Ropp_involutive p); rewrite <- (Ropp_involutive q); apply Ropp_eq_compat.",
                        "VernacExtend",
                        "2ec0f794816db136594df6cd7d85151e7857b542"
                    ]
                },
                {
                    "command": [
                        "unfold FtoRradix in |- *; repeat rewrite <- Fopp_correct.",
                        "VernacExtend",
                        "60bdf11d344a93c0e6ffb5b60ca4f1ae748399fa"
                    ]
                },
                {
                    "command": [
                        "apply FSuccZleEq with (b := b) (precision := precision); auto.",
                        "VernacExtend",
                        "22136f33e652addccee65ef0d940e9bdfa416516"
                    ]
                },
                {
                    "command": [
                        "repeat rewrite Fopp_correct; auto with real.",
                        "VernacExtend",
                        "ae38b0f3f7c5798b1ea96db9ee6fa58cecae29dd"
                    ]
                },
                {
                    "command": [
                        "apply Ropp_lt_cancel.",
                        "VernacExtend",
                        "9b0daa4a36df0c9a309eebcfa294d3bffe6b52b2"
                    ]
                },
                {
                    "command": [
                        "repeat rewrite <- Fopp_correct; rewrite <- FPredFopFSucc; rewrite Fopp_Fopp; auto.",
                        "VernacExtend",
                        "6533674dc4f389b412d3fd22997675b2dc0a906a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "FNPredFopFNSucc",
            "line_nb": 136,
            "steps": [
                {
                    "command": [
                        "intros x; unfold FNPred, FNSucc in |- *; auto.",
                        "VernacExtend",
                        "2542dca942b0c14f87003e8f3068b9a4cde89042"
                    ]
                },
                {
                    "command": [
                        "rewrite Fnormalize_Fopp; auto.",
                        "VernacExtend",
                        "67ec5eff585bffe7ffdceda7324d2f5d6f488007"
                    ]
                },
                {
                    "command": [
                        "apply FPredFopFSucc; auto.",
                        "VernacExtend",
                        "de25b78c416ee9218cb7c20126343e6db1d16c68"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "FNPredCanonic",
            "line_nb": 141,
            "steps": [
                {
                    "command": [
                        "intros a H'; unfold FNPred in |- *.",
                        "VernacExtend",
                        "ee27625d7b80ae7ced1faf6b87cad120864bf107"
                    ]
                },
                {
                    "command": [
                        "apply FPredCanonic; auto with float.",
                        "VernacExtend",
                        "4b71801ac130a6b36a9fad9e8001d1364a0d89b7"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "FNPredLt",
            "line_nb": 145,
            "steps": [
                {
                    "command": [
                        "intros a; unfold FNPred in |- *.",
                        "VernacExtend",
                        "b2bfbf7f7f4be28ac2cf1ba9235e1f758f2a267e"
                    ]
                },
                {
                    "command": [
                        "unfold FtoRradix in |- *; rewrite <- (FnormalizeCorrect _ radixMoreThanOne b precision a).",
                        "VernacExtend",
                        "ce79997f4c990db5af329edf24a3e8f034519d81"
                    ]
                },
                {
                    "command": [
                        "apply FPredLt; auto.",
                        "VernacExtend",
                        "71738e9269caa53124d7cf63b7b9ff362a22892d"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "FNPredProp",
            "line_nb": 150,
            "steps": [
                {
                    "command": [
                        "intros x y H' H'0 H'1; unfold FNPred in |- *.",
                        "VernacExtend",
                        "d248d4f0cf759de0b2cfaff1da7138c3faa8da3d"
                    ]
                },
                {
                    "command": [
                        "replace (FtoRradix x) with (FtoRradix (Fnormalize radix b precision x)).",
                        "VernacExtend",
                        "098fa1a3969d8a4a6154e60640e3f4eb06a26e75"
                    ]
                },
                {
                    "command": [
                        "apply FPredProp; auto with float.",
                        "VernacExtend",
                        "8df2f24a118a1a3c4bf89aa88b57bf8fee62c522"
                    ]
                },
                {
                    "command": [
                        "unfold FtoRradix in |- *; repeat rewrite FnormalizeCorrect; auto.",
                        "VernacExtend",
                        "6a3ad66886a4e76962cbb26347d7beef4330a14a"
                    ]
                },
                {
                    "command": [
                        "unfold FtoRradix in |- *; repeat rewrite FnormalizeCorrect; auto.",
                        "VernacExtend",
                        "6a3ad66886a4e76962cbb26347d7beef4330a14a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "FPredSuc",
            "line_nb": 157,
            "steps": [
                {
                    "command": [
                        "intros x H; unfold FPred, FSucc in |- *.",
                        "VernacExtend",
                        "fab3fcea8158d538d79de243efaa31b0e88cab43"
                    ]
                },
                {
                    "command": [
                        "cut (Fbounded b x); [ intros Fb0 | apply FcanonicBound with (1 := H) ].",
                        "VernacExtend",
                        "30096f1882fa832d949234f6aef7ebd73b73c22d"
                    ]
                },
                {
                    "command": [
                        "generalize (Z_eq_bool_correct (Fnum x) (pPred (vNum b))); case (Z_eq_bool (Fnum x) (pPred (vNum b))); simpl in |- *.",
                        "VernacExtend",
                        "390da62120135a68f412d76934173377a3fc1677"
                    ]
                },
                {
                    "command": [
                        "generalize (Z_eq_bool_correct (nNormMin radix precision) (- pPred (vNum b))); case (Z_eq_bool (nNormMin radix precision) (- pPred (vNum b))); simpl in |- *.",
                        "VernacExtend",
                        "0ee0013b1128e6de6e07764cbc3960b345030451"
                    ]
                },
                {
                    "command": [
                        "intros H'; Contradict H'; apply sym_not_equal; apply Zlt_not_eq; auto.",
                        "VernacExtend",
                        "54879a09ec338931405c6607be095faf2462c806"
                    ]
                },
                {
                    "command": [
                        "apply Zlt_le_trans with (- 0%nat)%Z.",
                        "VernacExtend",
                        "5922597f407234422abf1e1d112f7e80c8a66cd5"
                    ]
                },
                {
                    "command": [
                        "apply Zlt_Zopp; unfold pPred in |- *; apply Zlt_succ_pred; simpl in |- *; apply vNumbMoreThanOne with (3 := pGivesBound); auto.",
                        "VernacExtend",
                        "bb41700adfa8d1f8b01acf4de859ddb5c6020108"
                    ]
                },
                {
                    "command": [
                        "simpl in |- *; apply Zlt_le_weak; apply nNormPos; auto.",
                        "VernacExtend",
                        "6dd195da80ec8886de5d948ed04c3c8527415604"
                    ]
                },
                {
                    "command": [
                        "generalize (Z_eq_bool_correct (nNormMin radix precision) (nNormMin radix precision)); case (Z_eq_bool (nNormMin radix precision) (nNormMin radix precision)); simpl in |- *.",
                        "VernacExtend",
                        "978b77dc911fb411e3fa5057126e7db0e2750129"
                    ]
                },
                {
                    "command": [
                        "generalize (Z_eq_bool_correct (Zsucc (Fexp x)) (- dExp b)); case (Z_eq_bool (Zsucc (Fexp x)) (- dExp b)); simpl in |- *.",
                        "VernacExtend",
                        "724059147592f4f8c478fe3ebee9530dd80de3b3"
                    ]
                },
                {
                    "command": [
                        "intros H' H'0 H'1 H'2; absurd (- dExp b <= Fexp x)%Z; auto with float.",
                        "VernacExtend",
                        "745f7e7580c8626b247726c66a77f06baa31187f"
                    ]
                },
                {
                    "command": [
                        "rewrite <- H'; auto with float zarith.",
                        "VernacExtend",
                        "e90ba912cc61e88b9e78dcf9847d0fd86db30c70"
                    ]
                },
                {
                    "command": [
                        "replace (Zpred (Zsucc (Fexp x))) with (Fexp x); [ idtac | unfold Zsucc, Zpred in |- *; ring ]; auto.",
                        "VernacExtend",
                        "c2b47c219db39a7e3d9c1274289a2e45df6cea8b"
                    ]
                },
                {
                    "command": [
                        "intros H' H'0 H'1 H'2; rewrite <- H'2; auto.",
                        "VernacExtend",
                        "ff5158caf14f132d828467d36d47c6f668271f0b"
                    ]
                },
                {
                    "command": [
                        "apply floatEq; auto.",
                        "VernacExtend",
                        "c847d668791777965ba33ea03f8c58569a27270b"
                    ]
                },
                {
                    "command": [
                        "intros H'; case H'; auto.",
                        "VernacExtend",
                        "ab91036e51f7c3008a0c371720a2ca0e0735ece9"
                    ]
                },
                {
                    "command": [
                        "generalize (Z_eq_bool_correct (Fnum x) (- nNormMin radix precision)); case (Z_eq_bool (Fnum x) (- nNormMin radix precision)); simpl in |- *.",
                        "VernacExtend",
                        "ade6f2eb67f62e019b53f73181754807ca4f3c3a"
                    ]
                },
                {
                    "command": [
                        "generalize (Z_eq_bool_correct (Fexp x) (- dExp b)); case (Z_eq_bool (Fexp x) (- dExp b)); simpl in |- *.",
                        "VernacExtend",
                        "26c146f64e4f7cefe7331f8ad5d01b9c84dc2b5b"
                    ]
                },
                {
                    "command": [
                        "generalize (Z_eq_bool_correct (Zsucc (Fnum x)) (- pPred (vNum b))); case (Z_eq_bool (Zsucc (Fnum x)) (- pPred (vNum b))); simpl in |- *.",
                        "VernacExtend",
                        "efca4f7f65aa7b8b2dc96efc64b33aad6bfc1509"
                    ]
                },
                {
                    "command": [
                        "intros H0 H1 H2; absurd (Zsucc (Fnum x) <= Fnum x)%Z; auto with zarith.",
                        "VernacExtend",
                        "a178250fdc8e240403f60fc52ffce69aa2430512"
                    ]
                },
                {
                    "command": [
                        "rewrite H0; rewrite H2; (apply Zle_Zopp; auto with float arith).",
                        "VernacExtend",
                        "f041e2111b77529ea4c8f82f4a441dbe5d69ca27"
                    ]
                },
                {
                    "command": [
                        "unfold pPred in |- *; apply Zle_Zpred; apply ZltNormMinVnum; auto with zarith.",
                        "VernacExtend",
                        "7998d0c66abfbf4375bcb26ccdf406e19705a645"
                    ]
                },
                {
                    "command": [
                        "generalize (Z_eq_bool_correct (Zsucc (Fnum x)) (nNormMin radix precision)); case (Z_eq_bool (Zsucc (Fnum x)) (nNormMin radix precision)); simpl in |- *.",
                        "VernacExtend",
                        "de73dd0c510a2ba47a0ea7fd3adff931810ac86f"
                    ]
                },
                {
                    "command": [
                        "intros H' H'0 H'1 H'2; Contradict H'2.",
                        "VernacExtend",
                        "34c43fe2262a6ba5c8d6bfb404fc4e272d56ac96"
                    ]
                },
                {
                    "command": [
                        "rewrite <- H'; auto with zarith.",
                        "VernacExtend",
                        "75ee92ed966965a688026ba5cf644554ada044f9"
                    ]
                },
                {
                    "command": [
                        "replace (Zpred (Zsucc (Fnum x))) with (Fnum x); [ idtac | unfold Zsucc, Zpred in |- *; ring ]; auto.",
                        "VernacExtend",
                        "7aef5fe91860e642b632ba97da23f9e603067762"
                    ]
                },
                {
                    "command": [
                        "intros H' H'0 H'1 H'2 H'3; apply floatEq; auto.",
                        "VernacExtend",
                        "3f232f5413268fba08d36f3d3bfce76b25ccb0b0"
                    ]
                },
                {
                    "command": [
                        "generalize (Z_eq_bool_correct (- pPred (vNum b)) (- pPred (vNum b))); case (Z_eq_bool (- pPred (vNum b)) (- pPred (vNum b))); auto.",
                        "VernacExtend",
                        "062c13d98de880c100174a0498fc8d1c49659f0a"
                    ]
                },
                {
                    "command": [
                        "intros H' H'0 H'1 H'2; rewrite <- H'1.",
                        "VernacExtend",
                        "55090ee54161eeb21e303d01d738fec94af357b7"
                    ]
                },
                {
                    "command": [
                        "replace (Zsucc (Zpred (Fexp x))) with (Fexp x); [ idtac | unfold Zsucc, Zpred in |- *; ring ]; auto.",
                        "VernacExtend",
                        "f7540fd9f9dc94d251fdb8f9441a621d15b47248"
                    ]
                },
                {
                    "command": [
                        "apply floatEq; auto.",
                        "VernacExtend",
                        "c847d668791777965ba33ea03f8c58569a27270b"
                    ]
                },
                {
                    "command": [
                        "intros H'; case H'; auto.",
                        "VernacExtend",
                        "ab91036e51f7c3008a0c371720a2ca0e0735ece9"
                    ]
                },
                {
                    "command": [
                        "generalize (Z_eq_bool_correct (Zsucc (Fnum x)) (- pPred (vNum b))); case (Z_eq_bool (Zsucc (Fnum x)) (- pPred (vNum b))); simpl in |- *.",
                        "VernacExtend",
                        "efca4f7f65aa7b8b2dc96efc64b33aad6bfc1509"
                    ]
                },
                {
                    "command": [
                        "intros H'; absurd (- pPred (vNum b) <= Fnum x)%Z; auto with float.",
                        "VernacExtend",
                        "d2cc6d40f3646d4129da5dbd6066b4104d648719"
                    ]
                },
                {
                    "command": [
                        "rewrite <- H'; auto with zarith.",
                        "VernacExtend",
                        "75ee92ed966965a688026ba5cf644554ada044f9"
                    ]
                },
                {
                    "command": [
                        "apply Zle_Zabs_inv1; auto with float.",
                        "VernacExtend",
                        "dc30d044e5ccc0d380ccb8773e9c23810205e57a"
                    ]
                },
                {
                    "command": [
                        "unfold pPred in |- *; apply Zle_Zpred; auto with float.",
                        "VernacExtend",
                        "d94d852165b44e2cc96506aa42859931541d7757"
                    ]
                },
                {
                    "command": [
                        "generalize (Z_eq_bool_correct (Zsucc (Fnum x)) (nNormMin radix precision)); case (Z_eq_bool (Zsucc (Fnum x)) (nNormMin radix precision)); simpl in |- *.",
                        "VernacExtend",
                        "de73dd0c510a2ba47a0ea7fd3adff931810ac86f"
                    ]
                },
                {
                    "command": [
                        "generalize (Z_eq_bool_correct (Fexp x) (- dExp b)); case (Z_eq_bool (Fexp x) (- dExp b)); simpl in |- *.",
                        "VernacExtend",
                        "26c146f64e4f7cefe7331f8ad5d01b9c84dc2b5b"
                    ]
                },
                {
                    "command": [
                        "intros H' H'0 H'1 H'2 H'3.",
                        "VernacExtend",
                        "60bab14e4e0aa69405847e00147078e5b10d7244"
                    ]
                },
                {
                    "command": [
                        "replace (Zpred (Zsucc (Fnum x))) with (Fnum x); [ idtac | unfold Zsucc, Zpred in |- *; ring ]; auto.",
                        "VernacExtend",
                        "7aef5fe91860e642b632ba97da23f9e603067762"
                    ]
                },
                {
                    "command": [
                        "apply floatEq; auto.",
                        "VernacExtend",
                        "c847d668791777965ba33ea03f8c58569a27270b"
                    ]
                },
                {
                    "command": [
                        "intros H' H'0 H'1 H'2 H'3; case H.",
                        "VernacExtend",
                        "9e41c7ef2bd4d969dd65d39e8b28a222a60f697d"
                    ]
                },
                {
                    "command": [
                        "intros H'4; absurd (nNormMin radix precision <= Zabs (Fnum x))%Z.",
                        "VernacExtend",
                        "3af9b9ab0ad70eb61a0e08d4c2dc36df4f767471"
                    ]
                },
                {
                    "command": [
                        "replace (Fnum x) with (Zpred (Zsucc (Fnum x))); [ idtac | unfold Zsucc, Zpred in |- *; ring ]; auto.",
                        "VernacExtend",
                        "00736c5b60c152dd8de234fd1a2205b3473b81f2"
                    ]
                },
                {
                    "command": [
                        "rewrite H'0.",
                        "VernacExtend",
                        "155943e97f3d58c39d0b7dc8dbaf42688f94c62f"
                    ]
                },
                {
                    "command": [
                        "apply Zlt_not_le; rewrite Zabs_eq; auto with zarith.",
                        "VernacExtend",
                        "76e4b141d3fef9b15a0282a5bce22e6847566246"
                    ]
                },
                {
                    "command": [
                        "apply Zle_Zpred; apply nNormPos; auto with float zarith.",
                        "VernacExtend",
                        "3a3c0be1acd81af99e9370470eb989251c1cc833"
                    ]
                },
                {
                    "command": [
                        "apply pNormal_absolu_min with (b := b); auto.",
                        "VernacExtend",
                        "e86cbd64a24d221a20706aeda84a85b2cef07d24"
                    ]
                },
                {
                    "command": [
                        "intros H'4; Contradict H'; apply FsubnormalFexp with (1 := H'4).",
                        "VernacExtend",
                        "a639c2473f6410b6306a5f991dffaf963b4baba5"
                    ]
                },
                {
                    "command": [
                        "intros H' H'0 H'1 H'2; apply floatEq; simpl in |- *; auto.",
                        "VernacExtend",
                        "b7701a9c2fa54d7e4e3e5d4d7295f1f84b2d9d1d"
                    ]
                },
                {
                    "command": [
                        "unfold Zpred, Zsucc in |- *; ring.",
                        "VernacExtend",
                        "e75ef11cd743684de675be9dde83c8f7287cdabe"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "FSucPred",
            "line_nb": 211,
            "steps": [
                {
                    "command": [
                        "intros x H; unfold FPred, FSucc in |- *.",
                        "VernacExtend",
                        "fab3fcea8158d538d79de243efaa31b0e88cab43"
                    ]
                },
                {
                    "command": [
                        "cut (Fbounded b x); [ intros Fb0 | apply FcanonicBound with (1 := H) ].",
                        "VernacExtend",
                        "30096f1882fa832d949234f6aef7ebd73b73c22d"
                    ]
                },
                {
                    "command": [
                        "generalize (Z_eq_bool_correct (Fnum x) (- pPred (vNum b))); case (Z_eq_bool (Fnum x) (- pPred (vNum b))); simpl in |- *.",
                        "VernacExtend",
                        "c129d6447a9063c1952d44d6edd5cef426575172"
                    ]
                },
                {
                    "command": [
                        "generalize (Z_eq_bool_correct (- nNormMin radix precision) (pPred (vNum b))); case (Z_eq_bool (- nNormMin radix precision) (pPred (vNum b))); simpl in |- *.",
                        "VernacExtend",
                        "ae376aad9e6c52b8c71dd1bdfc767868475fc50c"
                    ]
                },
                {
                    "command": [
                        "intros H'; Contradict H'; apply Zlt_not_eq; auto.",
                        "VernacExtend",
                        "5c5b66720d3ced20524048aaa058e18018c44965"
                    ]
                },
                {
                    "command": [
                        "rewrite <- (Zopp_involutive (pPred (vNum b))); apply Zlt_Zopp.",
                        "VernacExtend",
                        "9225b1d2a95159a1718b1ee2db10a7ca77558dba"
                    ]
                },
                {
                    "command": [
                        "apply Zlt_le_trans with (- 0%nat)%Z.",
                        "VernacExtend",
                        "5922597f407234422abf1e1d112f7e80c8a66cd5"
                    ]
                },
                {
                    "command": [
                        "apply Zlt_Zopp; unfold pPred in |- *; apply Zlt_succ_pred; simpl in |- *.",
                        "VernacExtend",
                        "e7a16647940e63fb1899f85dc3cb990c2c780ca5"
                    ]
                },
                {
                    "command": [
                        "apply (vNumbMoreThanOne radix) with (precision := precision); auto.",
                        "VernacExtend",
                        "ba0876dc833936e3710994bb4088bb90f95800b7"
                    ]
                },
                {
                    "command": [
                        "simpl in |- *; apply Zlt_le_weak; apply nNormPos; auto with zarith arith.",
                        "VernacExtend",
                        "4e5ebb20a9d0fd57b545f2ca08a9dc5b59c66360"
                    ]
                },
                {
                    "command": [
                        "generalize (Z_eq_bool_correct (- nNormMin radix precision) (- nNormMin radix precision)); case (Z_eq_bool (- nNormMin radix precision) (- nNormMin radix precision)); simpl in |- *.",
                        "VernacExtend",
                        "7ffadd5f62b0141e5a3c6af5bb26582f6b14db68"
                    ]
                },
                {
                    "command": [
                        "generalize (Z_eq_bool_correct (Zsucc (Fexp x)) (- dExp b)); case (Z_eq_bool (Zsucc (Fexp x)) (- dExp b)); simpl in |- *.",
                        "VernacExtend",
                        "724059147592f4f8c478fe3ebee9530dd80de3b3"
                    ]
                },
                {
                    "command": [
                        "intros H' H'0 H'1 H'2; absurd (- dExp b <= Fexp x)%Z; auto with float.",
                        "VernacExtend",
                        "745f7e7580c8626b247726c66a77f06baa31187f"
                    ]
                },
                {
                    "command": [
                        "rewrite <- H'; auto with zarith.",
                        "VernacExtend",
                        "75ee92ed966965a688026ba5cf644554ada044f9"
                    ]
                },
                {
                    "command": [
                        "intros H' H'0 H'1 H'2; rewrite <- H'2; apply floatEq; simpl in |- *; auto; unfold Zsucc, Zpred in |- *; ring.",
                        "VernacExtend",
                        "ed0895652f32e69d1d95af31051da9e2217a183a"
                    ]
                },
                {
                    "command": [
                        "intros H'; case H'; auto.",
                        "VernacExtend",
                        "ab91036e51f7c3008a0c371720a2ca0e0735ece9"
                    ]
                },
                {
                    "command": [
                        "generalize (Z_eq_bool_correct (Fnum x) (nNormMin radix precision)); case (Z_eq_bool (Fnum x) (nNormMin radix precision)); simpl in |- *.",
                        "VernacExtend",
                        "b9e0891a8aba9e140084263abbed384f656838fe"
                    ]
                },
                {
                    "command": [
                        "generalize (Z_eq_bool_correct (Fexp x) (- dExp b)); case (Z_eq_bool (Fexp x) (- dExp b)); simpl in |- *.",
                        "VernacExtend",
                        "26c146f64e4f7cefe7331f8ad5d01b9c84dc2b5b"
                    ]
                },
                {
                    "command": [
                        "generalize (Z_eq_bool_correct (Zpred (Fnum x)) (pPred (vNum b))); case (Z_eq_bool (Zpred (Fnum x)) (pPred (vNum b))); simpl in |- *.",
                        "VernacExtend",
                        "5114068a5ce57420859f2187e32d84488b7c8e20"
                    ]
                },
                {
                    "command": [
                        "intros H' H'0 H'1 H'2; absurd (nNormMin radix precision <= pPred (vNum b))%Z; auto with float.",
                        "VernacExtend",
                        "4d5348b530807898448a833bd4a9114c759f0e12"
                    ]
                },
                {
                    "command": [
                        "rewrite <- H'; rewrite H'1; auto with zarith.",
                        "VernacExtend",
                        "876843ddfa39c3a951083058cbdd6432ce53f1ab"
                    ]
                },
                {
                    "command": [
                        "rewrite <- H'1; auto with float.",
                        "VernacExtend",
                        "d77fbadb80b5a26d4fc3cb6ba20e59cb44702ab5"
                    ]
                },
                {
                    "command": [
                        "apply Zle_Zabs_inv2; auto with float zarith.",
                        "VernacExtend",
                        "3fb571cf48607aa363e12a07f462540503852199"
                    ]
                },
                {
                    "command": [
                        "unfold pPred in |- *; apply Zle_Zpred; auto with float.",
                        "VernacExtend",
                        "d94d852165b44e2cc96506aa42859931541d7757"
                    ]
                },
                {
                    "command": [
                        "generalize (Z_eq_bool_correct (Zpred (Fnum x)) (- nNormMin radix precision)); case (Z_eq_bool (Zpred (Fnum x)) (- nNormMin radix precision)); simpl in |- *.",
                        "VernacExtend",
                        "a331ba393277b47979fa6667cc9acd23fc267788"
                    ]
                },
                {
                    "command": [
                        "intros H' H'0 H'1 H'2 H'3; absurd (Zpred (nNormMin radix precision) = (- nNormMin radix precision)%Z); auto with zarith.",
                        "VernacExtend",
                        "ae65c9cba84ae8238641d04c56000e4fbb1391bb"
                    ]
                },
                {
                    "command": [
                        "intros H' H'0 H'1 H'2 H'3; apply floatEq; simpl in |- *; auto; unfold Zpred, Zsucc in |- *; ring.",
                        "VernacExtend",
                        "829bd31b2114278c2d57449e98b7e199e0ef6ce8"
                    ]
                },
                {
                    "command": [
                        "generalize (Z_eq_bool_correct (pPred (vNum b)) (pPred (vNum b))); case (Z_eq_bool (pPred (vNum b)) (pPred (vNum b))); auto.",
                        "VernacExtend",
                        "2cedc1d00342652ce9d366d4c1ee43ecee66d22e"
                    ]
                },
                {
                    "command": [
                        "intros H' H'0 H'1 H'2; rewrite <- H'1; apply floatEq; simpl in |- *; auto; unfold Zpred, Zsucc in |- *; ring.",
                        "VernacExtend",
                        "d8f22be3746b9e566f7be0ab1cce60402c25abc4"
                    ]
                },
                {
                    "command": [
                        "intros H'; case H'; auto.",
                        "VernacExtend",
                        "ab91036e51f7c3008a0c371720a2ca0e0735ece9"
                    ]
                },
                {
                    "command": [
                        "generalize (Z_eq_bool_correct (Zpred (Fnum x)) (pPred (vNum b))); case (Z_eq_bool (Zpred (Fnum x)) (pPred (vNum b))); simpl in |- *.",
                        "VernacExtend",
                        "5114068a5ce57420859f2187e32d84488b7c8e20"
                    ]
                },
                {
                    "command": [
                        "intros H'; absurd (Fnum x <= pPred (vNum b))%Z; auto with float.",
                        "VernacExtend",
                        "80a4b1b9ad025025329ba312298df6efdb6f355b"
                    ]
                },
                {
                    "command": [
                        "rewrite <- H'.",
                        "VernacExtend",
                        "6015ddb26a544f622429ee9ca3769cdf838b7d8a"
                    ]
                },
                {
                    "command": [
                        "apply Zlt_not_le; apply Zlt_pred; auto.",
                        "VernacExtend",
                        "c0b1b21ccaa7186ca2bdc8e910679bc297313d9b"
                    ]
                },
                {
                    "command": [
                        "apply Zle_Zabs_inv2; unfold pPred in |- *; apply Zle_Zpred; auto with float.",
                        "VernacExtend",
                        "f11c1c8014fb916dbee1c5160bf8d0f35e69b7ed"
                    ]
                },
                {
                    "command": [
                        "generalize (Z_eq_bool_correct (Zpred (Fnum x)) (- nNormMin radix precision)); case (Z_eq_bool (Zpred (Fnum x)) (- nNormMin radix precision)); simpl in |- *.",
                        "VernacExtend",
                        "a331ba393277b47979fa6667cc9acd23fc267788"
                    ]
                },
                {
                    "command": [
                        "generalize (Z_eq_bool_correct (Fexp x) (- dExp b)); case (Z_eq_bool (Fexp x) (- dExp b)); simpl in |- *.",
                        "VernacExtend",
                        "26c146f64e4f7cefe7331f8ad5d01b9c84dc2b5b"
                    ]
                },
                {
                    "command": [
                        "intros H' H'0 H'1 H'2 H'3; apply floatEq; simpl in |- *; auto; unfold Zsucc, Zpred in |- *; ring.",
                        "VernacExtend",
                        "bb0d4c0093b6531af31f091778bf52ea341fda07"
                    ]
                },
                {
                    "command": [
                        "intros H' H'0 H'1 H'2 H'3; case H; intros C0.",
                        "VernacExtend",
                        "8ecfbbf329c84f9a7b0aa7006e36c24143e66612"
                    ]
                },
                {
                    "command": [
                        "absurd (nNormMin radix precision <= Zabs (Fnum x))%Z; auto with float.",
                        "VernacExtend",
                        "fe2657a3e6b38a2d24424543fbb05c4a686667f0"
                    ]
                },
                {
                    "command": [
                        "replace (Fnum x) with (Zsucc (Zpred (Fnum x))); [ idtac | unfold Zsucc, Zpred in |- *; ring ].",
                        "VernacExtend",
                        "d98368ada8469f9d8e1e26804755e1ed003336a1"
                    ]
                },
                {
                    "command": [
                        "rewrite H'0.",
                        "VernacExtend",
                        "155943e97f3d58c39d0b7dc8dbaf42688f94c62f"
                    ]
                },
                {
                    "command": [
                        "rewrite <- Zopp_Zpred_Zs; rewrite Zabs_Zopp.",
                        "VernacExtend",
                        "28202882bc1982d8070481349c92367ad1a8b979"
                    ]
                },
                {
                    "command": [
                        "rewrite Zabs_eq; auto with zarith.",
                        "VernacExtend",
                        "e3b6647506c6d43441146989691d7c27f1722b7e"
                    ]
                },
                {
                    "command": [
                        "apply Zle_Zpred; simpl in |- *; apply nNormPos; auto with float zarith.",
                        "VernacExtend",
                        "bf9bbd540fa47cc3a44c1d48c8c3828c25c413b7"
                    ]
                },
                {
                    "command": [
                        "apply pNormal_absolu_min with (b := b); auto.",
                        "VernacExtend",
                        "e86cbd64a24d221a20706aeda84a85b2cef07d24"
                    ]
                },
                {
                    "command": [
                        "Contradict H'; apply FsubnormalFexp with (1 := C0).",
                        "VernacExtend",
                        "ee666d81638c9a97792c539213a7a07fd8394c5a"
                    ]
                },
                {
                    "command": [
                        "intros H' H'0 H'1 H'2; apply floatEq; simpl in |- *; auto.",
                        "VernacExtend",
                        "b7701a9c2fa54d7e4e3e5d4d7295f1f84b2d9d1d"
                    ]
                },
                {
                    "command": [
                        "unfold Zpred, Zsucc in |- *; ring.",
                        "VernacExtend",
                        "e75ef11cd743684de675be9dde83c8f7287cdabe"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "FNPredSuc",
            "line_nb": 262,
            "steps": [
                {
                    "command": [
                        "intros x H'; unfold FNPred in |- *; rewrite FcanonicFnormalizeEq; auto.",
                        "VernacExtend",
                        "1d90b0bb321164267e8449de86497fb92c06d065"
                    ]
                },
                {
                    "command": [
                        "unfold FNSucc in |- *; rewrite FPredSuc; auto.",
                        "VernacExtend",
                        "58a696103c843a10acb4c2852cc4d1d198fb1a1a"
                    ]
                },
                {
                    "command": [
                        "unfold FtoRradix in |- *; apply FnormalizeCorrect; auto.",
                        "VernacExtend",
                        "470ee4d615cb96e2c80e7ff477747cec6ab8c852"
                    ]
                },
                {
                    "command": [
                        "apply FnormalizeCanonic; auto.",
                        "VernacExtend",
                        "9a1fe361020914af4b8bf7ab09ee74e43ff90cec"
                    ]
                },
                {
                    "command": [
                        "apply FNSuccCanonic; auto.",
                        "VernacExtend",
                        "ebb67044c842161a67c189619d2a7761ffe66f7a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "FNPredSucEq",
            "line_nb": 269,
            "steps": [
                {
                    "command": [
                        "intros x H'.",
                        "VernacExtend",
                        "1864e43355295bd98e7920f89fb20cbad05f10d7"
                    ]
                },
                {
                    "command": [
                        "apply FcanonicUnique with (precision := precision) (5 := H'); auto.",
                        "VernacExtend",
                        "9e6fd384f5394da839ad467155c15b8489f652fe"
                    ]
                },
                {
                    "command": [
                        "apply FNPredCanonic; auto with float.",
                        "VernacExtend",
                        "84d05c957939862220e5ad512ebebf64105f54c5"
                    ]
                },
                {
                    "command": [
                        "apply FcanonicBound with (radix := radix); auto.",
                        "VernacExtend",
                        "7ff66c1c77430eeda2d6b2110bd18def44854cf6"
                    ]
                },
                {
                    "command": [
                        "apply FNSuccCanonic; auto.",
                        "VernacExtend",
                        "ebb67044c842161a67c189619d2a7761ffe66f7a"
                    ]
                },
                {
                    "command": [
                        "apply FcanonicBound with (radix := radix); auto.",
                        "VernacExtend",
                        "7ff66c1c77430eeda2d6b2110bd18def44854cf6"
                    ]
                },
                {
                    "command": [
                        "apply FNPredSuc; auto.",
                        "VernacExtend",
                        "787c89df880105c7fa3c4c3e04f246507b7cf49c"
                    ]
                },
                {
                    "command": [
                        "apply FcanonicBound with (radix := radix); auto.",
                        "VernacExtend",
                        "7ff66c1c77430eeda2d6b2110bd18def44854cf6"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "FNSucPred",
            "line_nb": 279,
            "steps": [
                {
                    "command": [
                        "intros x H'; unfold FNSucc in |- *; rewrite FcanonicFnormalizeEq; auto.",
                        "VernacExtend",
                        "61ca6572c0149f05c7e001576e795ddd09029109"
                    ]
                },
                {
                    "command": [
                        "unfold FNPred in |- *; rewrite FSucPred; auto.",
                        "VernacExtend",
                        "d891df011b16144233d5b0e46d13678023640422"
                    ]
                },
                {
                    "command": [
                        "unfold FtoRradix in |- *; apply FnormalizeCorrect; auto.",
                        "VernacExtend",
                        "470ee4d615cb96e2c80e7ff477747cec6ab8c852"
                    ]
                },
                {
                    "command": [
                        "apply FnormalizeCanonic; auto.",
                        "VernacExtend",
                        "9a1fe361020914af4b8bf7ab09ee74e43ff90cec"
                    ]
                },
                {
                    "command": [
                        "apply FNPredCanonic; auto.",
                        "VernacExtend",
                        "eb39e1b8356f8dcc948bb575ce9379dd0484c5fd"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "FNSucPredEq",
            "line_nb": 286,
            "steps": [
                {
                    "command": [
                        "intros x H'.",
                        "VernacExtend",
                        "1864e43355295bd98e7920f89fb20cbad05f10d7"
                    ]
                },
                {
                    "command": [
                        "apply FcanonicUnique with (5 := H') (precision := precision); auto.",
                        "VernacExtend",
                        "8c86f09321bcdbe0ff131b55470101a91b94cfb3"
                    ]
                },
                {
                    "command": [
                        "apply FNSuccCanonic; auto.",
                        "VernacExtend",
                        "ebb67044c842161a67c189619d2a7761ffe66f7a"
                    ]
                },
                {
                    "command": [
                        "apply FcanonicBound with (radix := radix); auto.",
                        "VernacExtend",
                        "7ff66c1c77430eeda2d6b2110bd18def44854cf6"
                    ]
                },
                {
                    "command": [
                        "apply FNPredCanonic; auto.",
                        "VernacExtend",
                        "eb39e1b8356f8dcc948bb575ce9379dd0484c5fd"
                    ]
                },
                {
                    "command": [
                        "apply FcanonicBound with (radix := radix); auto.",
                        "VernacExtend",
                        "7ff66c1c77430eeda2d6b2110bd18def44854cf6"
                    ]
                },
                {
                    "command": [
                        "apply FNSucPred; auto.",
                        "VernacExtend",
                        "b665faab29e0223b4c234f2b96bab329bfb9dc28"
                    ]
                },
                {
                    "command": [
                        "apply FcanonicBound with (radix := radix); auto.",
                        "VernacExtend",
                        "7ff66c1c77430eeda2d6b2110bd18def44854cf6"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        }
    ]
}