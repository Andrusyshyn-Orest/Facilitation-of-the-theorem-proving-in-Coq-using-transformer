{
    "filename": "ClosestProp.v",
    "coq_project": "float",
    "vernac_cmds": [
        [
            "Require Export FroundProp.",
            "VernacRequire",
            "cb23e6736c1e6a10c079cd2b6d2e66062c4f8426"
        ],
        [
            "Require Export Closest.",
            "VernacRequire",
            "e55bbe37a571340162033ff5276d05da36695c8c"
        ],
        [
            "Section Fclosestp2.",
            "VernacBeginSection",
            "4a19bc8130bccea48b57ca6a8820d5ab09242ee7"
        ],
        [
            "Variable b : Fbound.",
            "VernacAssumption",
            "17a11c003f49f819b8cb809f61b140702916486d"
        ],
        [
            "Variable radix : Z.",
            "VernacAssumption",
            "2349b77d134e0c9bb013a8bdca0020ca16fc023b"
        ],
        [
            "Variable precision : nat.",
            "VernacAssumption",
            "2235bc83b7ebf4cbe373b5fa3b4f3c643d454130"
        ],
        [
            "Let FtoRradix := FtoR radix.",
            "VernacDefinition",
            "5aa29a9595c6e9e03b28c6d232299552ec761ad7"
        ],
        [
            "Coercion FtoRradix : float >-> R.",
            "VernacCoercion",
            "028c338fbad0cd7087bf0b6e1e412562a515c140"
        ],
        [
            "Hypothesis radixMoreThanOne : (1 < radix)%Z.",
            "VernacAssumption",
            "f4d3774b2275f4c4c3af941091d4d99f9a2129aa"
        ],
        [
            "Let radixMoreThanZERO := Zlt_1_O _ (Zlt_le_weak _ _ radixMoreThanOne).",
            "VernacDefinition",
            "b73ccff345a4fc730c8134dcd05adb7f1928fae7"
        ],
        [
            "Hint Resolve radixMoreThanZERO: zarith.",
            "VernacHints",
            "5a4a320eb610749621ef38850390d7141dc0d330"
        ],
        [
            "Hypothesis precisionGreaterThanOne : 1 < precision.",
            "VernacAssumption",
            "9f627fb385d8fe283ac9563556925f37be8e5402"
        ],
        [
            "Hypothesis pGivesBound : Zpos (vNum b) = Zpower_nat radix precision.",
            "VernacAssumption",
            "d558f967d87d2a42d14158ac115b10c6f5358430"
        ],
        [
            "Theorem ClosestOpp : forall (p : float) (r : R), Closest b radix r p -> Closest b radix (- r) (Fopp p).",
            "VernacStartTheoremProof",
            "7c4c821a1e30d2b1a20c96d571ca105521db1fc3"
        ],
        [
            "intros p r H'; split.",
            "VernacExtend",
            "596d6060adaa45f2c778a5b321b84be5016c58a7"
        ],
        [
            "apply oppBounded; auto.",
            "VernacExtend",
            "6e68d2122eeea082741ca4e279707ce0511c71ef"
        ],
        [
            "case H'; auto.",
            "VernacExtend",
            "ebc5b3ac68f03e20b8a194319f607aaad1bf60b4"
        ],
        [
            "intros f H'0.",
            "VernacExtend",
            "9a31aade9075f1f2b1421318060af2dc591e9a32"
        ],
        [
            "rewrite Fopp_correct.",
            "VernacExtend",
            "74c438eb6f71c02f5e643ea13652cd63a4c3eabb"
        ],
        [
            "replace (- FtoR radix p - - r)%R with (- (FtoR radix p - r))%R; [ idtac | ring ].",
            "VernacExtend",
            "86444705a664e8ef19fa59ff8b60b4a29b6feab3"
        ],
        [
            "replace (FtoR radix f - - r)%R with (- (- FtoR radix f - r))%R; [ idtac | ring ].",
            "VernacExtend",
            "70fcedcd4b7e9a23551deea48f199c0f2951d8fe"
        ],
        [
            "rewrite <- Fopp_correct.",
            "VernacExtend",
            "ad35e0162588fc7611e3b308cf689247fae7fe9f"
        ],
        [
            "repeat rewrite Rabs_Ropp.",
            "VernacExtend",
            "d9ca552ba972ed3f671e8d416c06e9d426f50757"
        ],
        [
            "case H'; auto with float.",
            "VernacExtend",
            "a3b51daee2f74fa3d604025dd26c73450a685610"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Theorem ClosestFabs : forall (p : float) (r : R), Closest b radix r p -> Closest b radix (Rabs r) (Fabs p).",
            "VernacStartTheoremProof",
            "74d90f79a2cc59f827934b7f94364c57c4223184"
        ],
        [
            "intros p r H'; case (Rle_or_lt 0 r); intros Rl0.",
            "VernacExtend",
            "e3c6c09736420c3e75d3f276bc862c924ce75633"
        ],
        [
            "rewrite Rabs_right; auto with real.",
            "VernacExtend",
            "e24d8a510a5d2d71a1265c4c7b5d2f745fcc98e0"
        ],
        [
            "replace (Fabs p) with p; auto.",
            "VernacExtend",
            "8c95c8bb4d4397be1eafbdb43df5edb12121cf51"
        ],
        [
            "unfold Fabs in |- *; apply floatEq; simpl in |- *; auto.",
            "VernacExtend",
            "bad3c8867624b705b01517f09e15999e90e1c1db"
        ],
        [
            "cut (0 <= Fnum p)%Z.",
            "VernacExtend",
            "2b700b39397bac59619065714135317e235bf22a"
        ],
        [
            "case (Fnum p); simpl in |- *; auto; intros p' H0; Contradict H0; apply Zlt_not_le; red in |- *; simpl in |- *; auto with zarith.",
            "VernacExtend",
            "c30796acfc0b107d6c0382a5532e0238619f8b0a"
        ],
        [
            "apply LeR0Fnum with (radix := radix); auto.",
            "VernacExtend",
            "975ec13d69ef1c6fc89972a56ed1594f2f2433a5"
        ],
        [
            "apply RleRoundedR0 with (b := b) (precision := precision) (P := Closest b radix) (r := r); auto.",
            "VernacExtend",
            "5bd4a74a4c3ce5d96074438493c2d096756a4078"
        ],
        [
            "apply ClosestRoundedModeP with (precision := precision); auto with real.",
            "VernacExtend",
            "9c3052a0738613699d2b46866c6f05a7dc0de27f"
        ],
        [
            "rewrite Faux.Rabsolu_left1; auto.",
            "VernacExtend",
            "cdfb2996338b3a1e58065e7b9fa29cb7224ffecf"
        ],
        [
            "replace (Fabs p) with (Fopp p).",
            "VernacExtend",
            "435b0f7f1a490fa26166eaf9bd0e532f9d57271f"
        ],
        [
            "apply ClosestOpp; auto.",
            "VernacExtend",
            "fdb10086de8928309670334b477ceba716a1f016"
        ],
        [
            "unfold Fabs in |- *; apply floatEq; simpl in |- *; auto.",
            "VernacExtend",
            "bad3c8867624b705b01517f09e15999e90e1c1db"
        ],
        [
            "cut (Fnum p <= 0)%Z.",
            "VernacExtend",
            "cd97c6956988cce57547261bcac079f34b411d9d"
        ],
        [
            "case (Fnum p); simpl in |- *; auto; intros p' H0; Contradict H0; apply Zlt_not_le; red in |- *; simpl in |- *; auto with zarith.",
            "VernacExtend",
            "c30796acfc0b107d6c0382a5532e0238619f8b0a"
        ],
        [
            "apply R0LeFnum with (radix := radix); auto.",
            "VernacExtend",
            "e71b25728630cdfc807f13ddc0aedbaffcc57235"
        ],
        [
            "apply RleRoundedLessR0 with (b := b) (precision := precision) (P := Closest b radix) (r := r); auto.",
            "VernacExtend",
            "45583f3f1a50b078287b6947a2c648134b321e9a"
        ],
        [
            "apply ClosestRoundedModeP with (precision := precision); auto.",
            "VernacExtend",
            "eb6d3ee24dd119beb307169797f1cdd709b3ec7c"
        ],
        [
            "apply Rlt_le; auto.",
            "VernacExtend",
            "4003e3e1c449ee89cad9e953d0a562db8235648c"
        ],
        [
            "apply Rlt_le; auto.",
            "VernacExtend",
            "4003e3e1c449ee89cad9e953d0a562db8235648c"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Theorem ClosestUlp : forall (p : R) (q : float), Closest b radix p q -> (2%nat * Rabs (p - q) <= Fulp b radix precision q)%R.",
            "VernacStartTheoremProof",
            "b9771c4a6851185f66f25c7cf0efad98faa0d031"
        ],
        [
            "intros p q H'.",
            "VernacExtend",
            "6d0165163a2a8e407c09482ce517f2835b5de359"
        ],
        [
            "case (Req_dec p q); intros Eqpq.",
            "VernacExtend",
            "2c95ed9a29cc05a4d0ed947cc92b96e0e0fe92e7"
        ],
        [
            "rewrite Eqpq.",
            "VernacExtend",
            "c121fbb70e3c2a6f35fabb498198146112efdeac"
        ],
        [
            "replace (Rabs (q - q)) with 0%R; [ rewrite Rmult_0_r | replace (q - q)%R with 0%R; try ring; rewrite Rabs_right; auto with real ].",
            "VernacExtend",
            "7fff2efd386f53424a9248ba442046ebd3e1ca98"
        ],
        [
            "unfold Fulp in |- *; apply Rlt_le; auto with real arith.",
            "VernacExtend",
            "58d25fa22018e332b7ae571ec453ce9aa78a6d11"
        ],
        [
            "replace (2%nat * Rabs (p - q))%R with (Rabs (p - q) + Rabs (p - q))%R; [ idtac | simpl in |- *; ring ].",
            "VernacExtend",
            "23a23490dceff4324c978d7904c54825180f0dda"
        ],
        [
            "case ClosestMinOrMax with (1 := H'); intros H'1.",
            "VernacExtend",
            "243a0f87736ea5a3672d317851bf371e0b3fa82e"
        ],
        [
            "apply Rle_trans with (Rabs (p - q) + Rabs (FNSucc b radix precision q - p))%R.",
            "VernacExtend",
            "21bc1fe793f33fa324e50ac54698293dbe442fe1"
        ],
        [
            "apply Rplus_le_compat_l.",
            "VernacExtend",
            "3af9ea371eb281cf0e58041faab020bb6798a832"
        ],
        [
            "rewrite <- (Rabs_Ropp (p - q)).",
            "VernacExtend",
            "e097a29cc86eccc570d66a5b692ddf59398e407f"
        ],
        [
            "rewrite Ropp_minus_distr.",
            "VernacExtend",
            "03410ea29af67bdcfa7393931606c01ed23d7394"
        ],
        [
            "elim H'; auto.",
            "VernacExtend",
            "a5e9e87d39a05d836dbbdf38dfd3ec2e253451e2"
        ],
        [
            "intros H'0 H'2; apply H'2; auto.",
            "VernacExtend",
            "97df896a7f3dd3548763433a2199eef216cc0db8"
        ],
        [
            "apply FcanonicBound with (radix := radix); auto with float arith.",
            "VernacExtend",
            "730ad8477bfdc69203d62137a8d91b55afb3211c"
        ],
        [
            "rewrite Rabs_right.",
            "VernacExtend",
            "9b60731d6b608338747f09fec19f24d12baad022"
        ],
        [
            "rewrite Rabs_right.",
            "VernacExtend",
            "9b60731d6b608338747f09fec19f24d12baad022"
        ],
        [
            "replace (p - q + (FNSucc b radix precision q - p))%R with (FNSucc b radix precision q - q)%R; [ idtac | ring ].",
            "VernacExtend",
            "89074bb4d6b3d3e39c1fdd15f566154f4e51a561"
        ],
        [
            "unfold FtoRradix in |- *; apply FulpSuc; auto.",
            "VernacExtend",
            "4da4c37b57bffdb44bf6b322290001e00dd76f8b"
        ],
        [
            "case H'1; auto.",
            "VernacExtend",
            "a44f1b914e489dd19b841fdfab025ba14e3d8f86"
        ],
        [
            "apply Rge_minus; apply Rle_ge; auto with real float.",
            "VernacExtend",
            "750f449cb149e9c982b9efaf2dce17653002fe03"
        ],
        [
            "case MinMax with (3 := pGivesBound) (r := p) (p := q); auto with arith.",
            "VernacExtend",
            "5d71563eaecaa60bc08d31a91f662861875c5b63"
        ],
        [
            "intros H'0 H'2; elim H'2; intros H'3 H'4; apply H'3; clear H'2; auto.",
            "VernacExtend",
            "f64c754f3a2d7d196a2c077828366cda24974692"
        ],
        [
            "apply Rge_minus; apply Rle_ge; auto with real float.",
            "VernacExtend",
            "750f449cb149e9c982b9efaf2dce17653002fe03"
        ],
        [
            "apply isMin_inv1 with (1 := H'1).",
            "VernacExtend",
            "7dd90cc4ffdbee3b601f586e2f88b98d9c0b4bd9"
        ],
        [
            "apply Rle_trans with (Rabs (p - q) + Rabs (p - FNPred b radix precision q))%R.",
            "VernacExtend",
            "7848df392f2145513a3d93b3187569644fb9abf9"
        ],
        [
            "apply Rplus_le_compat_l.",
            "VernacExtend",
            "3af9ea371eb281cf0e58041faab020bb6798a832"
        ],
        [
            "rewrite <- (Rabs_Ropp (p - q)); rewrite <- (Rabs_Ropp (p - FNPred b radix precision q)).",
            "VernacExtend",
            "a6ae93d54b32f250a668d3609d1076b564237e59"
        ],
        [
            "repeat rewrite Ropp_minus_distr.",
            "VernacExtend",
            "2ff4c1bf14ffec4a53f7c4e9a6818b2cd38e102b"
        ],
        [
            "elim H'; auto.",
            "VernacExtend",
            "a5e9e87d39a05d836dbbdf38dfd3ec2e253451e2"
        ],
        [
            "intros H'0 H'2; apply H'2; auto.",
            "VernacExtend",
            "97df896a7f3dd3548763433a2199eef216cc0db8"
        ],
        [
            "apply FcanonicBound with (radix := radix); auto with float arith.",
            "VernacExtend",
            "730ad8477bfdc69203d62137a8d91b55afb3211c"
        ],
        [
            "rewrite <- (Rabs_Ropp (p - q)); rewrite Ropp_minus_distr.",
            "VernacExtend",
            "0ecea1252fc2d956c9815c6ac992dc6d4000332a"
        ],
        [
            "rewrite Rabs_right.",
            "VernacExtend",
            "9b60731d6b608338747f09fec19f24d12baad022"
        ],
        [
            "rewrite Rabs_right.",
            "VernacExtend",
            "9b60731d6b608338747f09fec19f24d12baad022"
        ],
        [
            "replace (q - p + (p - FNPred b radix precision q))%R with (q - FNPred b radix precision q)%R; [ idtac | ring ].",
            "VernacExtend",
            "0473971b75161276778aa84b385c30525259f1d1"
        ],
        [
            "unfold FtoRradix in |- *; apply FulpPred; auto.",
            "VernacExtend",
            "3cc5076e9c1f8e349feae83bd0c24c85bebd8d65"
        ],
        [
            "case H'1; auto.",
            "VernacExtend",
            "a44f1b914e489dd19b841fdfab025ba14e3d8f86"
        ],
        [
            "apply Rge_minus; apply Rle_ge; auto with real float.",
            "VernacExtend",
            "750f449cb149e9c982b9efaf2dce17653002fe03"
        ],
        [
            "case MaxMin with (3 := pGivesBound) (r := p) (p := q); auto with arith.",
            "VernacExtend",
            "8037475022f3081d78fb4c7185fdbd5490ac4494"
        ],
        [
            "intros H'0 H'2; elim H'2; intros H'3 H'4; apply H'3; clear H'2; auto.",
            "VernacExtend",
            "f64c754f3a2d7d196a2c077828366cda24974692"
        ],
        [
            "apply Rge_minus; apply Rle_ge; auto with real float.",
            "VernacExtend",
            "750f449cb149e9c982b9efaf2dce17653002fe03"
        ],
        [
            "apply isMax_inv1 with (1 := H'1).",
            "VernacExtend",
            "75f9fe6e81eb03cd3ba773a15895de7faa9b306f"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Theorem ClosestExp : forall (p : R) (q : float), Closest b radix p q -> (2%nat * Rabs (p - q) <= powerRZ radix (Fexp q))%R.",
            "VernacStartTheoremProof",
            "120176fb07045de816a416c4b7b26af812089376"
        ],
        [
            "intros p q H'.",
            "VernacExtend",
            "6d0165163a2a8e407c09482ce517f2835b5de359"
        ],
        [
            "apply Rle_trans with (Fulp b radix precision q).",
            "VernacExtend",
            "f59be0e9bcc8a9ae23e45a12b57fb5faac428d1a"
        ],
        [
            "apply (ClosestUlp p q); auto.",
            "VernacExtend",
            "b9e8e11d2c697f5056d953840548b59e7a6bab26"
        ],
        [
            "replace (powerRZ radix (Fexp q)) with (FtoRradix (Float 1%nat (Fexp q))).",
            "VernacExtend",
            "99ea5fa0ceef175afce521c7f96ec95f05f271ef"
        ],
        [
            "apply (FulpLe b radix); auto.",
            "VernacExtend",
            "3f6310e5a7c728f7f2d83a4e18df89ef1d426e11"
        ],
        [
            "apply RoundedModeBounded with (radix := radix) (P := Closest b radix) (r := p); auto.",
            "VernacExtend",
            "f5406a5377bede95b15d510b1212bba8917d459d"
        ],
        [
            "apply ClosestRoundedModeP with (precision := precision); auto.",
            "VernacExtend",
            "eb6d3ee24dd119beb307169797f1cdd709b3ec7c"
        ],
        [
            "unfold FtoRradix, FtoR in |- *; simpl in |- *.",
            "VernacExtend",
            "85a3da1582165d92ceb7faef707de88822bccf1a"
        ],
        [
            "ring.",
            "VernacExtend",
            "baadd9fc4c175005af409bb466fcea9fab25b4e6"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Theorem ClosestErrorExpStrict : forall (p q : float) (x : R), Fbounded b p -> Fbounded b q -> Closest b radix x p -> q = (x - p)%R :>R -> q <> 0%R :>R -> (Fexp q < Fexp p)%Z.",
            "VernacStartTheoremProof",
            "bab25187968b35f2a5aaeedca764c0f3839f0483"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "case (Zle_or_lt (Fexp p) (Fexp q)); auto; intros Z1.",
            "VernacExtend",
            "2c5b1b46faf69113bfe857bd888ab38ec9d454e9"
        ],
        [
            "absurd (powerRZ radix (Fexp p) <= powerRZ radix (Fexp q))%R.",
            "VernacExtend",
            "523657f2880bce7992df134066627e242a8fe3be"
        ],
        [
            "2: apply Rle_powerRZ; auto with real arith.",
            "VernacExtend",
            "5c0e27655d27d8b9270971386670a8aad1239028"
        ],
        [
            "apply Rgt_not_le.",
            "VernacExtend",
            "be8a1e7f9ca2303d5ddda077b45cc15db6c6b3ce"
        ],
        [
            "red in |- *; apply Rlt_le_trans with (2%nat * powerRZ radix (Fexp q))%R.",
            "VernacExtend",
            "b9b9a80d38b89f3635747de980754f67562694ee"
        ],
        [
            "apply Rltdouble; auto with real arith.",
            "VernacExtend",
            "93946c6f83523c0b3c5018cb7760eadeb370d3c6"
        ],
        [
            "apply Rle_trans with (2%nat * Fabs q)%R.",
            "VernacExtend",
            "173e0edd89f0777cb59cfce9e3805027f786ff8f"
        ],
        [
            "apply Rmult_le_compat_l; auto with real arith.",
            "VernacExtend",
            "c67ac6a62458e649e844e549689a7d3f43885a2a"
        ],
        [
            "replace 0%R with (INR 0); auto with real arith.",
            "VernacExtend",
            "3caed965951659080cf394dcb353db3f9bd924fa"
        ],
        [
            "replace (powerRZ radix (Fexp q)) with (FtoRradix (Float 1%nat (Fexp q))); auto.",
            "VernacExtend",
            "9c60050ff3646f824b98c397f908fb37656b3916"
        ],
        [
            "apply (Fop.RleFexpFabs radix); auto with real zarith.",
            "VernacExtend",
            "e8e828e9e1f672da652db5bd1dafb7b497d351a0"
        ],
        [
            "unfold FtoRradix, FtoR in |- *; simpl in |- *; ring.",
            "VernacExtend",
            "5b3b96c09542c1778400f311cf15a289b4188c3b"
        ],
        [
            "rewrite (Fabs_correct radix); auto with arith.",
            "VernacExtend",
            "9e6738fcec21e9717af97d8662a74048dbd0628b"
        ],
        [
            "replace (FtoR radix q) with (x - p)%R; auto.",
            "VernacExtend",
            "7531e6418324ec1e7cf5c19bac07be2954170cb0"
        ],
        [
            "apply ClosestExp; auto.",
            "VernacExtend",
            "1cd3e544e0a53377a70d225a6b1ac87de41378ee"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Theorem ClosestIdem : forall p q : float, Fbounded b p -> Closest b radix p q -> p = q :>R.",
            "VernacStartTheoremProof",
            "039554eefb4085ff917fcebbd2b2fd79b623cb7e"
        ],
        [
            "intros p q H' H'0.",
            "VernacExtend",
            "7ea1365154d917a427c6781fa2515333f91063e3"
        ],
        [
            "case (Rabs_pos (q - p)); intros H1.",
            "VernacExtend",
            "48b995443e4b860ce631eb6a55f68f51b7587666"
        ],
        [
            "Contradict H1; apply Rle_not_lt.",
            "VernacExtend",
            "3b60334e887e1a42f4d98ab84be02277a7aa6432"
        ],
        [
            "replace 0%R with (Rabs (p - p)); [ case H'0; auto | idtac ].",
            "VernacExtend",
            "6b92d72845eafce79b01bab1b4fc9ef2d5a43569"
        ],
        [
            "replace (p - p)%R with 0%R; [ apply Rabs_R0; auto | ring ].",
            "VernacExtend",
            "0fd0ddd255a72a96699d923467dccef258e8d583"
        ],
        [
            "apply Rplus_eq_reg_l with (r := (- p)%R).",
            "VernacExtend",
            "fd072b539ebbc93e4fd0156508c27e56d2879dc9"
        ],
        [
            "apply trans_eq with 0%R; [ ring | idtac ].",
            "VernacExtend",
            "80d031673887141234f9f41b809cc4359da93265"
        ],
        [
            "apply trans_eq with (q - p)%R; [ idtac | ring ].",
            "VernacExtend",
            "6d6368bf9f623659443f002ccec37d9d2a9c074d"
        ],
        [
            "generalize H1; unfold Rabs in |- *; case (Rcase_abs (q - p)); auto.",
            "VernacExtend",
            "c5c943d79e1a1023180c6ac56c2e8571b5f7df31"
        ],
        [
            "intros r H0; replace 0%R with (-0)%R; [ rewrite H0 | idtac ]; ring.",
            "VernacExtend",
            "ede19e0ff2fc7ee8f524d3089b6510d2a35ea97b"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Theorem ClosestM1 : forall (r1 r2 : R) (min max p q : float), isMin b radix r1 min -> isMax b radix r1 max -> (min + max < 2%nat * r2)%R -> Closest b radix r1 p -> Closest b radix r2 q -> (p <= q)%R.",
            "VernacStartTheoremProof",
            "d2ee3d81b00e0f74dee4a60b78a949ea5e8c9013"
        ],
        [
            "intros r1 r2 min max p q H' H'0 H'1 H'2 H'3.",
            "VernacExtend",
            "1aacd05b4acc4e0324441c0d2336288743416264"
        ],
        [
            "case (Rle_or_lt r2 max); intros H'4.",
            "VernacExtend",
            "580350e55dabe3611effbead56885b34ae153b31"
        ],
        [
            "2: apply (ClosestMonotone b radix) with (p := r1) (q := r2); auto.",
            "VernacExtend",
            "f977ab986ff50f7c846c7e7e92d8dc2faf2ccd5d"
        ],
        [
            "2: apply Rle_lt_trans with (FtoRradix max); auto.",
            "VernacExtend",
            "dc6a79d8ca1025b7f573ad8d420c95f445cde650"
        ],
        [
            "2: apply isMax_inv1 with (1 := H'0).",
            "VernacExtend",
            "f852a6a61e3b8616e5b59b2ee280b62d2ece3a12"
        ],
        [
            "case H'4; clear H'4; intros H'4.",
            "VernacExtend",
            "11ce471d5ec43d72be46fa99a0360b652bc76cde"
        ],
        [
            "2: replace (FtoRradix q) with (FtoRradix max).",
            "VernacExtend",
            "b14787bc3ac88528e684b12ab6c637d78662a5d0"
        ],
        [
            "2: case ClosestMinOrMax with (1 := H'2); intros H'5.",
            "VernacExtend",
            "a16ea6a27dbcae58b6054e9958abbc9711deebf5"
        ],
        [
            "2: replace (FtoRradix p) with (FtoRradix min).",
            "VernacExtend",
            "48a21b40f4ee99eb91355a2ba847528ec3c02e67"
        ],
        [
            "2: apply Rle_trans with r1.",
            "VernacExtend",
            "3a2c8d6f4b9a3f661b204b520f5d659035e36d73"
        ],
        [
            "2: apply isMin_inv1 with (1 := H').",
            "VernacExtend",
            "e93241616faeb2d8350288ced3dc57f36e6f255b"
        ],
        [
            "2: apply isMax_inv1 with (1 := H'0).",
            "VernacExtend",
            "f852a6a61e3b8616e5b59b2ee280b62d2ece3a12"
        ],
        [
            "2: apply MinEq with (1 := H'); auto.",
            "VernacExtend",
            "b825a7729c440ade6606141a442a4554a209546e"
        ],
        [
            "2: replace (FtoRradix p) with (FtoRradix max); auto with real.",
            "VernacExtend",
            "9ee71b94966d15216e0cd110ef8efae3c03f88b4"
        ],
        [
            "2: apply MaxEq with (1 := H'0); auto.",
            "VernacExtend",
            "5b921b888a25436be0e67a1d93cb5df389145706"
        ],
        [
            "2: apply ClosestIdem; auto.",
            "VernacExtend",
            "9db3b903ef421fc04175a5f2e09e97e7ed2218d2"
        ],
        [
            "2: case H'0; auto.",
            "VernacExtend",
            "bb206c48c6731f87a91bbd7b551b0f8ad9590767"
        ],
        [
            "2: rewrite <- H'4; auto.",
            "VernacExtend",
            "bd030ff030e03e488166e62cfed9ed8015da1cfd"
        ],
        [
            "cut (min < r2)%R.",
            "VernacExtend",
            "c1d283ed16e592fcf59a693e68bfba101bd6a8c9"
        ],
        [
            "2: apply Rmult_lt_reg_l with (r := INR 2); auto with real.",
            "VernacExtend",
            "4e729035112134081040d5fe02b7541a77de8662"
        ],
        [
            "2: replace (2%nat * min)%R with (min + min)%R; [ idtac | simpl in |- *; ring ].",
            "VernacExtend",
            "e7449b60208985f3b3a64645589f4c6b57aed688"
        ],
        [
            "2: apply Rle_lt_trans with (2 := H'1).",
            "VernacExtend",
            "5234502c730fe1ccf9aa3a7205e32202ce2ba3a5"
        ],
        [
            "2: apply Rplus_le_compat_l; auto with real.",
            "VernacExtend",
            "4dc836bdb0fab31932b0c66d969098cefbfbb6af"
        ],
        [
            "2: apply Rle_trans with r1.",
            "VernacExtend",
            "3a2c8d6f4b9a3f661b204b520f5d659035e36d73"
        ],
        [
            "2: apply isMin_inv1 with (1 := H').",
            "VernacExtend",
            "e93241616faeb2d8350288ced3dc57f36e6f255b"
        ],
        [
            "2: apply isMax_inv1 with (1 := H'0).",
            "VernacExtend",
            "f852a6a61e3b8616e5b59b2ee280b62d2ece3a12"
        ],
        [
            "intros H'5.",
            "VernacExtend",
            "e34417c8b50a3d37cfcaca02216744ba3f221adc"
        ],
        [
            "replace (FtoRradix q) with (FtoRradix max).",
            "VernacExtend",
            "ca90ea053c8d2cc43e9bfcc8735d9c6dad8d36d7"
        ],
        [
            "case ClosestMinOrMax with (1 := H'2); intros H'6.",
            "VernacExtend",
            "e63a742f143a1c979d0a021d69795ec896d83a7d"
        ],
        [
            "replace (FtoRradix p) with (FtoRradix min).",
            "VernacExtend",
            "78af8bf923d47ec8edcb2ad689305c157ebe565f"
        ],
        [
            "apply Rle_trans with r1.",
            "VernacExtend",
            "10db063bcebe3ef67c3a2915675859b3b3c62fb5"
        ],
        [
            "apply isMin_inv1 with (1 := H').",
            "VernacExtend",
            "396899852b3b2abfbab274f97c885530ea32b48c"
        ],
        [
            "apply isMax_inv1 with (1 := H'0).",
            "VernacExtend",
            "e7479fb2257abb74eba9fed7d520dafda234d5a0"
        ],
        [
            "apply MinEq with (1 := H'); auto.",
            "VernacExtend",
            "bd88ad8b00711053cf79991011d6ee1d261bacb7"
        ],
        [
            "replace (FtoRradix p) with (FtoRradix max); auto with real.",
            "VernacExtend",
            "183170dd098194b84c5a592c1b58bcaf35ca705f"
        ],
        [
            "apply MaxEq with (1 := H'0); auto.",
            "VernacExtend",
            "686eb3549c4100907207285753d3e4a0d7c99ad9"
        ],
        [
            "apply sym_eq.",
            "VernacExtend",
            "f01eb728d9ceeac2915c66b52a7b50a0c452e949"
        ],
        [
            "apply (ClosestMaxEq b radix) with (r := r2) (min := min); auto.",
            "VernacExtend",
            "27cda3457d8acc01ace439e743c3fad750c0e2a2"
        ],
        [
            "apply isMinComp with (2 := H'0); auto.",
            "VernacExtend",
            "e2e35f57afaa115922e4320a96cbd9f34702c754"
        ],
        [
            "apply isMaxComp with (1 := H'); auto.",
            "VernacExtend",
            "fdcd10b1b9cd5a5ae9567e6b64d45c456753bdfc"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Theorem FmultRadixInv : forall (x z : float) (y : R), Fbounded b x -> Closest b radix y z -> (/ 2%nat * x < y)%R -> (/ 2%nat * x <= z)%R.",
            "VernacStartTheoremProof",
            "4208ec31a0ecb33980bd8498ceff7e535af32627"
        ],
        [
            "intros x z y H' H'0 H'1.",
            "VernacExtend",
            "aa5f4277410c26324e8211705210833d91fa75a2"
        ],
        [
            "case MinEx with (r := (/ 2%nat * x)%R) (3 := pGivesBound); auto with arith.",
            "VernacExtend",
            "b871d748c68f29a812ec3596d97c8da78fb2cb30"
        ],
        [
            "intros min isMin.",
            "VernacExtend",
            "b43807776d23ab1dba4b903036d6798165449f94"
        ],
        [
            "case MaxEx with (r := (/ 2%nat * x)%R) (3 := pGivesBound); auto with arith.",
            "VernacExtend",
            "ea842786710b03533614a12b7b2744997a934285"
        ],
        [
            "intros max isMax.",
            "VernacExtend",
            "4daf66a5be1f52ab547d023db61c0e6389f035ba"
        ],
        [
            "case (Rle_or_lt y max); intros Rl1.",
            "VernacExtend",
            "793284712e00edbebc0ba224b2cbcfafd672111a"
        ],
        [
            "case Rl1; clear Rl1; intros Rl1.",
            "VernacExtend",
            "dbedf48079ca266488334450ce80d732dd0fb5a8"
        ],
        [
            "replace (FtoRradix z) with (FtoRradix max).",
            "VernacExtend",
            "c303d96d46f8ee2428f8c03490b45b1ed2e3d4f3"
        ],
        [
            "apply isMax_inv1 with (1 := isMax).",
            "VernacExtend",
            "2286feec4700c1d639962c6fcbec69cce4a92795"
        ],
        [
            "apply sym_eq.",
            "VernacExtend",
            "f01eb728d9ceeac2915c66b52a7b50a0c452e949"
        ],
        [
            "unfold FtoRradix in |- *; apply ClosestMaxEq with (b := b) (r := y) (min := min); auto.",
            "VernacExtend",
            "8b7050f20ecc77796294d6e91cb3990c9afb8fa9"
        ],
        [
            "apply isMinComp with (r1 := (/ 2%nat * x)%R) (max := max); auto.",
            "VernacExtend",
            "7bedb728dfabb9bf15dfbd48e55c618a12367f78"
        ],
        [
            "apply Rle_lt_trans with (2 := H'1); auto.",
            "VernacExtend",
            "6bb3cf6e4b5f171eefb684d32ff3fd6b58d30654"
        ],
        [
            "apply isMin_inv1 with (1 := isMin).",
            "VernacExtend",
            "31518faecd6d0920153e737ce0dc5be70c0e7438"
        ],
        [
            "apply isMaxComp with (r1 := (/ 2%nat * x)%R) (min := min); auto.",
            "VernacExtend",
            "fd80a94a8a312c2eae48cd281c7c4cc32c15a011"
        ],
        [
            "apply Rle_lt_trans with (2 := H'1); auto.",
            "VernacExtend",
            "6bb3cf6e4b5f171eefb684d32ff3fd6b58d30654"
        ],
        [
            "apply isMin_inv1 with (1 := isMin).",
            "VernacExtend",
            "31518faecd6d0920153e737ce0dc5be70c0e7438"
        ],
        [
            "replace (FtoR radix min + FtoR radix max)%R with (FtoRradix x).",
            "VernacExtend",
            "1d8304dbc3cc6300af376dbb2e6eb1aa2edd3d35"
        ],
        [
            "apply Rmult_lt_reg_l with (r := (/ 2%nat)%R); auto with real.",
            "VernacExtend",
            "8bc034dfa0cf0586596ad4f7208b865e73eda04f"
        ],
        [
            "rewrite <- Rmult_assoc; rewrite Rinv_l; try rewrite Rmult_1_l; auto with real.",
            "VernacExtend",
            "adb95c9f20e298d06eef582e740fc1283af913a5"
        ],
        [
            "unfold FtoRradix in |- *; apply (div2IsBetween b radix precision); auto.",
            "VernacExtend",
            "73a59f7d421c5e989f136ba8a738f5807baee960"
        ],
        [
            "cut (Closest b radix max z); [ intros C0 | idtac ].",
            "VernacExtend",
            "b5583e54cf59fd5f3f90b8a928b023431b41db88"
        ],
        [
            "replace (FtoRradix z) with (FtoRradix max); auto.",
            "VernacExtend",
            "553268678246bc70c1c10c4e600676bca8ce0f12"
        ],
        [
            "rewrite <- Rl1; auto.",
            "VernacExtend",
            "d5b528668392c2fdef5caddddd2ad155402fa018"
        ],
        [
            "apply Rlt_le; auto.",
            "VernacExtend",
            "4003e3e1c449ee89cad9e953d0a562db8235648c"
        ],
        [
            "apply ClosestIdem; auto.",
            "VernacExtend",
            "21d0cf18072d91345204957cf19d966af206c6a0"
        ],
        [
            "case isMax; auto.",
            "VernacExtend",
            "102a8708ecc597f2433427ba8821127dd216c58b"
        ],
        [
            "apply (ClosestCompatible b radix y max z z); auto.",
            "VernacExtend",
            "e69ee13cf6db6610bc39e6e102606d11bf5d21ab"
        ],
        [
            "case H'0; auto.",
            "VernacExtend",
            "c95954a4912ccfdd6e4780b3eecd4f9a4fbca076"
        ],
        [
            "apply Rle_trans with (FtoRradix max); auto.",
            "VernacExtend",
            "c78a45796178fb8ea266bf8c168b0cef09403988"
        ],
        [
            "apply isMax_inv1 with (1 := isMax).",
            "VernacExtend",
            "2286feec4700c1d639962c6fcbec69cce4a92795"
        ],
        [
            "apply (ClosestMonotone b radix (FtoRradix max) y); auto.",
            "VernacExtend",
            "f91961a32e4be1b1e56419b3338b946a3b2cf6d4"
        ],
        [
            "apply (RoundedModeProjectorIdem b radix (Closest b radix)); auto.",
            "VernacExtend",
            "4609aa098ae73c2fafe5736a67c3a55183726b45"
        ],
        [
            "apply ClosestRoundedModeP with (precision := precision); auto.",
            "VernacExtend",
            "eb6d3ee24dd119beb307169797f1cdd709b3ec7c"
        ],
        [
            "case isMax; auto.",
            "VernacExtend",
            "102a8708ecc597f2433427ba8821127dd216c58b"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Theorem ClosestErrorBound : forall (p q : float) (x : R), Fbounded b p -> Closest b radix x p -> q = (x - p)%R :>R -> (Rabs q <= Float 1%nat (Fexp p) * / 2%nat)%R.",
            "VernacStartTheoremProof",
            "fa71b2594f013612db4289f86a16cebf1a4340b1"
        ],
        [
            "intros p q x H H0 H1.",
            "VernacExtend",
            "63d7084d5c88fcc0a36a1f177d2b6d777cf2931c"
        ],
        [
            "apply Rle_trans with (Fulp b radix precision p * / 2%nat)%R.",
            "VernacExtend",
            "d0bbf6a71ddec3f2e21298921a401619173a9869"
        ],
        [
            "rewrite H1.",
            "VernacExtend",
            "91099f93f9346d13e3fc00550ba094ceac5333db"
        ],
        [
            "replace (Rabs (x - p)) with (2%nat * Rabs (x - p) * / 2%nat)%R; [ idtac | field; auto with real ].",
            "VernacExtend",
            "bb8454c227073d64b7178620792f2f08df41f1a9"
        ],
        [
            "apply Rmult_le_compat_r; auto with real.",
            "VernacExtend",
            "9a2f394fe0f213cd7249f9885afa1d71755e43b4"
        ],
        [
            "apply ClosestUlp; auto.",
            "VernacExtend",
            "a2cd86203367de47548eba9c063baef081498b1a"
        ],
        [
            "apply Rmult_le_compat_r.",
            "VernacExtend",
            "6c4c5a82dab802842919dd673f1978a3cb8cff73"
        ],
        [
            "apply Rlt_le.",
            "VernacExtend",
            "cdc4280500779f23bae235b94c24a4b2ea2921fe"
        ],
        [
            "apply Rinv_0_lt_compat; auto with real.",
            "VernacExtend",
            "4026f9923d214cb32a5e3a9b4c28c36a57ee2e20"
        ],
        [
            "unfold FtoRradix in |- *; apply FulpLe; auto.",
            "VernacExtend",
            "620a5cfbbc5677fee020fd737468c4e0f0c2d79d"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Theorem ClosestErrorExp : forall (p q : float) (x : R), Fbounded b p -> Fbounded b q -> Closest b radix x p -> q = (x - p)%R :>R -> exists error : float, Fbounded b error /\\ error = q :>R /\\ (Fexp error <= Zmax (Fexp p - precision) (- dExp b))%Z.",
            "VernacStartTheoremProof",
            "b560a0600e54ba43c271736b2b974671d2176980"
        ],
        [
            "intros p q x H H0 H1 H2; exists (Fnormalize radix b precision q).",
            "VernacExtend",
            "9bbce30caa2ba73b1eea799cb684d0024f0ad760"
        ],
        [
            "cut (Fcanonic radix b (Fnormalize radix b precision q)); [ intros C1 | apply FnormalizeCanonic; auto with arith ].",
            "VernacExtend",
            "b1b0774af1f7901d16526f91155f424808a68941"
        ],
        [
            "split.",
            "VernacExtend",
            "55abc140132bd88981001ac656020469a8d503eb"
        ],
        [
            "apply FcanonicBound with (radix := radix); auto.",
            "VernacExtend",
            "7ff66c1c77430eeda2d6b2110bd18def44854cf6"
        ],
        [
            "split.",
            "VernacExtend",
            "55abc140132bd88981001ac656020469a8d503eb"
        ],
        [
            "apply (FnormalizeCorrect radix); auto.",
            "VernacExtend",
            "67e4f2aeb9125665bdf70fc0bbbf83f3e2aa5de0"
        ],
        [
            "case C1; intros C2.",
            "VernacExtend",
            "0048ce2e1488d66ce1ee4357df42af322c6916df"
        ],
        [
            "apply Zle_trans with (Fexp p - precision)%Z; auto with zarith.",
            "VernacExtend",
            "9b584cb18b5a6e75e550174b5b2ac1d8c0a5fa88"
        ],
        [
            "apply Zplus_le_reg_l with (Z_of_nat precision).",
            "VernacExtend",
            "93857189a7014e1d377e39d2c090ac159edb7e6d"
        ],
        [
            "replace (precision + (Fexp p - precision))%Z with (Fexp p); [ idtac | ring ].",
            "VernacExtend",
            "1f76f3c528f7c53052a90013f528e2be654ade94"
        ],
        [
            "replace (precision + Fexp (Fnormalize radix b precision q))%Z with (Zsucc (Zpred precision + Fexp (Fnormalize radix b precision q))); [ idtac | unfold Zpred, Zsucc in |- *; ring ].",
            "VernacExtend",
            "c8754bd143b490ad3f586f63618f5d7980e9a47a"
        ],
        [
            "apply Zlt_le_succ.",
            "VernacExtend",
            "070de595889f014f0a173659377506422eb25080"
        ],
        [
            "apply Zlt_powerRZ with (IZR radix); auto with real zarith.",
            "VernacExtend",
            "2f9dd0951d952b8a318cd1050c8a2e66d5c490b6"
        ],
        [
            "rewrite powerRZ_add; auto with real zarith.",
            "VernacExtend",
            "464b630a39cda032263051881ad80da2fc959c8e"
        ],
        [
            "apply Rle_lt_trans with (Zabs (Fnum (Fnormalize radix b precision q)) * powerRZ radix (Fexp (Fnormalize radix b precision q)))%R.",
            "VernacExtend",
            "d5334f3b9284b16b31f752e46d47ef08aa62338f"
        ],
        [
            "apply Rmult_le_compat_r; auto with real zarith.",
            "VernacExtend",
            "ab12f06210771823661c627ab200f2c736704e67"
        ],
        [
            "replace (Zpred precision) with (Z_of_nat (pred (digit radix (Fnum (Fnormalize radix b precision q))))).",
            "VernacExtend",
            "91aa79207c3a9f810457202e2ec9d9d2f3f356e6"
        ],
        [
            "rewrite <- Zpower_nat_Z_powerRZ.",
            "VernacExtend",
            "df78cf96dfceed621bb634ea03f6a5ba1d47b397"
        ],
        [
            "apply Rle_IZR; apply digitLess; auto with real zarith.",
            "VernacExtend",
            "c44f4a7d85c787cd530dd8d4d161998dffa2b641"
        ],
        [
            "change (~ is_Fzero (Fnormalize radix b precision q)) in |- *; apply (FnormalNotZero radix b); auto with float.",
            "VernacExtend",
            "b30f2ef22d6075262ea299c2a2d13f60dddc36f5"
        ],
        [
            "change (Z_of_nat (pred (Fdigit radix (Fnormalize radix b precision q))) = Zpred precision) in |- *.",
            "VernacExtend",
            "6398d75956c425b636ede74e0bd09e1f0d24ea1c"
        ],
        [
            "rewrite FnormalPrecision with (precision := precision) (4 := C2); auto with zarith arith.",
            "VernacExtend",
            "0e5f11b3b437986b22791aebcf24df4070d08bc7"
        ],
        [
            "apply inj_pred; auto with arith.",
            "VernacExtend",
            "e7c54e2486ebff96c96b69f77ee1d7656ba042df"
        ],
        [
            "change (Fabs (Fnormalize radix b precision q) < powerRZ radix (Fexp p))%R in |- *.",
            "VernacExtend",
            "51b566fe6ddd406f5bfc2ee025a70e21b534f495"
        ],
        [
            "rewrite (Fabs_correct radix); auto; rewrite (FnormalizeCorrect radix); auto.",
            "VernacExtend",
            "b394c5402f4b29305b36f1f3e9837d95e6e7fb87"
        ],
        [
            "apply Rle_lt_trans with (Float 1%nat (Fexp p) * / 2%nat)%R.",
            "VernacExtend",
            "7732430292895a93a4d656b213e7e0183611b95d"
        ],
        [
            "apply ClosestErrorBound with (x := x); auto.",
            "VernacExtend",
            "49ad7faac176e52311f59e248c68376641a947cc"
        ],
        [
            "unfold FtoRradix in |- *; unfold FtoR in |- *; simpl in |- *.",
            "VernacExtend",
            "8c0835d31a3f923ae6ce1e9ef3140f1250ad69a6"
        ],
        [
            "pattern (powerRZ radix (Fexp p)) at 2 in |- *; replace (powerRZ radix (Fexp p)) with (powerRZ radix (Fexp p) * 1)%R; [ idtac | ring ].",
            "VernacExtend",
            "319e101e0bc61266b9dd4a8771758ecb4d3327dc"
        ],
        [
            "replace (1 * powerRZ radix (Fexp p))%R with (powerRZ radix (Fexp p)); [ apply Rmult_lt_compat_l | ring ].",
            "VernacExtend",
            "7755d4369c629f490cf7bae3c33f2f69be1846cb"
        ],
        [
            "apply powerRZ_lt; auto with arith real.",
            "VernacExtend",
            "de27eb1a0fbb5aa6c805c5620ff96f45f71a8c19"
        ],
        [
            "pattern 1%R at 3 in |- *; replace 1%R with (/ 1)%R.",
            "VernacExtend",
            "0697c60b45edbec834f0d9380ddc9691926b03f7"
        ],
        [
            "apply Rinv_1_lt_contravar; auto with real.",
            "VernacExtend",
            "de37d24a2cd385c2c2c8be19aba68b9956fff3c2"
        ],
        [
            "replace 2%R with (INR 2); auto with real arith.",
            "VernacExtend",
            "38f8d54094e5ad3f80db7d51d819a92f798751da"
        ],
        [
            "apply Zle_trans with (- dExp b)%Z; auto with float zarith.",
            "VernacExtend",
            "1234c94bfdf1152a86184b1f4a64945abc75af64"
        ],
        [
            "case C2.",
            "VernacExtend",
            "d7c21e494bd9d3a1db5d3e565cf88b20b988f402"
        ],
        [
            "intros H3 (H4, H5); rewrite H4; auto with zarith.",
            "VernacExtend",
            "eec7f67501b2ba6bf396ac2a176f9000ccda6d25"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Theorem ClosestErrorBoundNormal_aux : forall (x : R) (p : float), Closest b radix x p -> Fnormal radix b (Fnormalize radix b precision p) -> (Rabs (x - p) <= Rabs p * (/ 2%nat * (radix * / Zpos (vNum b))))%R.",
            "VernacStartTheoremProof",
            "f270e5bd588a69708e9632bf55fe7b3af8d38046"
        ],
        [
            "intros x p H H'.",
            "VernacExtend",
            "0e696487dc0d6feb339395d92162f82deb5380c7"
        ],
        [
            "apply Rle_trans with (/ 2%nat * Fulp b radix precision p)%R.",
            "VernacExtend",
            "663ba83b8daa715988dc26d5ae4cd59810138120"
        ],
        [
            "replace (Rabs (x - FtoRradix p)) with (/ 2%nat * (2%nat * Rabs (x - FtoRradix p)))%R.",
            "VernacExtend",
            "3825a8d1d6e964c28dbd4ed699dbe2a53bea49f0"
        ],
        [
            "apply Rmult_le_compat_l; auto with real.",
            "VernacExtend",
            "bf324a586bfbe5f57a13931b6a23d59d989b4278"
        ],
        [
            "apply ClosestUlp; auto.",
            "VernacExtend",
            "a2cd86203367de47548eba9c063baef081498b1a"
        ],
        [
            "rewrite <- Rmult_assoc; rewrite Rinv_l; simpl in |- *; auto with real.",
            "VernacExtend",
            "fa3e32849d595a95835cc6afe22a223363f212d6"
        ],
        [
            "apply Rle_trans with (/ 2%nat * (Rabs p * (radix * / Zpos (vNum b))))%R; [ apply Rmult_le_compat_l | right; ring; ring ].",
            "VernacExtend",
            "daa47d509a796b5c4297e449206a0f26020f9876"
        ],
        [
            "apply Rlt_le; apply Rinv_0_lt_compat; auto with real arith.",
            "VernacExtend",
            "13a23d70fc2e377c85a5b9244e4fa4843dfd30ed"
        ],
        [
            "unfold Fulp in |- *.",
            "VernacExtend",
            "a4a9bf067f611831f5632b5d68f153505860f803"
        ],
        [
            "replace (Fexp (Fnormalize radix b precision p)) with (Fexp (Fnormalize radix b precision p) + precision + - precision)%Z; [ idtac | ring ].",
            "VernacExtend",
            "3586e659ec895d3f991a2440d5c22b910a6c9864"
        ],
        [
            "rewrite powerRZ_add; auto with real zarith.",
            "VernacExtend",
            "464b630a39cda032263051881ad80da2fc959c8e"
        ],
        [
            "apply Rle_trans with (Rabs p * radix * powerRZ radix (- precision))%R; [ apply Rmult_le_compat_r | right ]; auto with real zarith.",
            "VernacExtend",
            "46310d9f84fc46e1e20bafef3656e3ef855c1a0a"
        ],
        [
            "2: rewrite pGivesBound; simpl in |- *.",
            "VernacExtend",
            "8c435e5bdb7a21b21b36c61517a9c2dec919fd9f"
        ],
        [
            "2: rewrite powerRZ_Zopp; auto with real zarith; rewrite Zpower_nat_Z_powerRZ; auto with real zarith; ring.",
            "VernacExtend",
            "cbb55cd2e7203b6d39ae47c62a941f71a7d2a860"
        ],
        [
            "replace (FtoRradix p) with (FtoRradix (Fnormalize radix b precision p)); [ idtac | apply (FnormalizeCorrect radix) ]; auto.",
            "VernacExtend",
            "3fe4bd75974d48aaca9f3dfcb9d8f41dc5b4c3f4"
        ],
        [
            "rewrite <- (Fabs_correct radix); unfold FtoR in |- *; simpl in |- *; auto with arith.",
            "VernacExtend",
            "d2ff0f8093f0b7fe65f181a9cc140b8395279840"
        ],
        [
            "rewrite powerRZ_add; auto with real zarith.",
            "VernacExtend",
            "464b630a39cda032263051881ad80da2fc959c8e"
        ],
        [
            "replace (Zabs (Fnum (Fnormalize radix b precision p)) * powerRZ radix (Fexp (Fnormalize radix b precision p)) * radix)%R with (powerRZ radix (Fexp (Fnormalize radix b precision p)) * (Zabs (Fnum (Fnormalize radix b precision p)) * radix))%R; [ idtac | ring ].",
            "VernacExtend",
            "2605f7a82d203efba1752466b4298d3a66d5bf81"
        ],
        [
            "apply Rmult_le_compat_l; auto with arith real.",
            "VernacExtend",
            "81ccf5e0845073405e91eb3fd6a490609f4f1047"
        ],
        [
            "rewrite <- Zpower_nat_Z_powerRZ; auto with real zarith.",
            "VernacExtend",
            "da84cb5309b0e36832700507e8730fdd6f64c1ec"
        ],
        [
            "rewrite <- Rmult_IZR; apply Rle_IZR.",
            "VernacExtend",
            "2e95a7e34e84426aeaa61bda0ff73a32c7e98e0a"
        ],
        [
            "rewrite <- pGivesBound; pattern radix at 2 in |- *; rewrite <- (Zabs_eq radix); auto with zarith.",
            "VernacExtend",
            "3e117404f11252c0b8e764531161a1dcb5b07fcd"
        ],
        [
            "rewrite <- Zabs_Zmult.",
            "VernacExtend",
            "f7fc6414388fe397677ae7ff4791672389a0bb6d"
        ],
        [
            "rewrite Zmult_comm; elim H'; auto.",
            "VernacExtend",
            "1ad1f76053075069fa6355396a17a3b19fa893d4"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Theorem ClosestErrorBound2 : forall (x : R) (p : float), Closest b radix x p -> (Rabs (x - p) <= Rmax (Rabs p * (/ 2%nat * (radix * / Zpos (vNum b)))) (/ 2%nat * powerRZ radix (- dExp b)))%R.",
            "VernacStartTheoremProof",
            "c74b23ffddecf723df2953b8962232ed803c6c44"
        ],
        [
            "intros x p H.",
            "VernacExtend",
            "7a1f02f0f93904ff7122830930be3661a0c93cd6"
        ],
        [
            "cut (Fcanonic radix b (Fnormalize radix b precision p)); [ intros tmp; Casec tmp; intros Fs | idtac ].",
            "VernacExtend",
            "d8757ba22dba3fbda2a6888ce782dac82c7bfb14"
        ],
        [
            "3: apply FnormalizeCanonic; auto with arith.",
            "VernacExtend",
            "93c97d1e352d3f78cf06966e947252bd00077cca"
        ],
        [
            "3: apply RoundedModeBounded with (radix := radix) (P := Closest b radix) (r := x); auto.",
            "VernacExtend",
            "9891f1711960c3249cb762f27ff55c365389bf11"
        ],
        [
            "3: apply ClosestRoundedModeP with (precision := precision); auto.",
            "VernacExtend",
            "9cc45999bfb93d3491b09a9beaafde358b047a45"
        ],
        [
            "apply Rle_trans with (Rabs p * (/ 2%nat * (radix * / Zpos (vNum b))))%R; [ idtac | apply RmaxLess1 ].",
            "VernacExtend",
            "ba369adb8266d85b7f47487e8a5fa75769a8c414"
        ],
        [
            "apply ClosestErrorBoundNormal_aux; auto.",
            "VernacExtend",
            "2427efd428d42adb8579af7c1e540d35d8740bff"
        ],
        [
            "apply Rle_trans with (/ 2%nat * Fulp b radix precision p)%R.",
            "VernacExtend",
            "663ba83b8daa715988dc26d5ae4cd59810138120"
        ],
        [
            "replace (Rabs (x - FtoRradix p)) with (/ 2%nat * (2%nat * Rabs (x - FtoRradix p)))%R.",
            "VernacExtend",
            "3825a8d1d6e964c28dbd4ed699dbe2a53bea49f0"
        ],
        [
            "apply Rmult_le_compat_l; auto with real.",
            "VernacExtend",
            "bf324a586bfbe5f57a13931b6a23d59d989b4278"
        ],
        [
            "apply ClosestUlp; auto.",
            "VernacExtend",
            "a2cd86203367de47548eba9c063baef081498b1a"
        ],
        [
            "rewrite <- Rmult_assoc; rewrite Rinv_l; simpl in |- *; auto with real.",
            "VernacExtend",
            "fa3e32849d595a95835cc6afe22a223363f212d6"
        ],
        [
            "elim Fs; intros H1 H2; elim H2; intros; clear H2.",
            "VernacExtend",
            "206ae648a45b4d0ea464b09f339458951d147cc9"
        ],
        [
            "unfold Fulp in |- *; rewrite H0; apply RmaxLess2.",
            "VernacExtend",
            "aae766ac3d7c0d0e5b4678493f3c465880c6df70"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Theorem ClosestErrorBoundNormal : forall (x : R) (p : float), Closest b radix x p -> Fnormal radix b (Fnormalize radix b precision p) -> (Rabs (x - p) <= Rabs p * (/ 2%nat * powerRZ radix (Zsucc (- precision))))%R.",
            "VernacStartTheoremProof",
            "b7fe68d4e3c473ed274ccb5e258bc19f8ab4022a"
        ],
        [
            "intros x p H H1.",
            "VernacExtend",
            "500107e65129b5d42f051a2bf16757f204f12a93"
        ],
        [
            "apply Rle_trans with (Rabs (FtoRradix p) * (/ 2%nat * (radix * / Zpos (vNum b))))%R; [ apply ClosestErrorBoundNormal_aux; auto | right ].",
            "VernacExtend",
            "a03adc6137c9b215906832cbb60091f20d0efcb8"
        ],
        [
            "replace (powerRZ radix (Zsucc (- precision))) with (radix * / Zpos (vNum b))%R; auto with real.",
            "VernacExtend",
            "7d692b08df7eacf1e15f625f3f5606999fb9c863"
        ],
        [
            "rewrite pGivesBound; rewrite Zpower_nat_Z_powerRZ.",
            "VernacExtend",
            "78f317e2f786810623466c82c4e2a870d84e2eec"
        ],
        [
            "rewrite Rinv_powerRZ; auto with real zarith.",
            "VernacExtend",
            "965bb00872f7cc6b3eb3731ed09a0c1da3849a4f"
        ],
        [
            "rewrite powerRZ_Zs; auto with real zarith.",
            "VernacExtend",
            "1931a3978b6974020abfa1402ab4426f76878eb8"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Theorem ClosestPropHigham25 : forall (x : R) (p : float), Closest b radix x p -> exists delta : R, (exists nu : R, (x / (1 + delta) + nu)%R = FtoRradix p /\\ (Rabs delta <= / 2%nat * powerRZ radix (Zsucc (- precision)))%R /\\ (Rabs nu <= / 2%nat * powerRZ radix (- dExp b))%R /\\ (delta * nu)%R = 0%R /\\ (Fnormal radix b (Fnormalize radix b precision p) -> nu = 0%R) /\\ (Fsubnormal radix b (Fnormalize radix b precision p) -> delta = 0%R)).",
            "VernacStartTheoremProof",
            "f6c18d45fabddf48ff3ee9d020bdc17458798bdb"
        ],
        [
            "intros x p H.",
            "VernacExtend",
            "7a1f02f0f93904ff7122830930be3661a0c93cd6"
        ],
        [
            "cut (Fcanonic radix b (Fnormalize radix b precision p)); [ intros tmp; Casec tmp; intros Fs | idtac ].",
            "VernacExtend",
            "d8757ba22dba3fbda2a6888ce782dac82c7bfb14"
        ],
        [
            "3: apply FnormalizeCanonic; auto with arith.",
            "VernacExtend",
            "93c97d1e352d3f78cf06966e947252bd00077cca"
        ],
        [
            "3: apply RoundedModeBounded with (radix := radix) (P := Closest b radix) (r := x); auto.",
            "VernacExtend",
            "9891f1711960c3249cb762f27ff55c365389bf11"
        ],
        [
            "3: apply ClosestRoundedModeP with (precision := precision); auto.",
            "VernacExtend",
            "9cc45999bfb93d3491b09a9beaafde358b047a45"
        ],
        [
            "cut (~ is_Fzero (Fnormalize radix b precision p)); [ unfold is_Fzero in |- *; intros tmp | apply FnormalNotZero with radix b; auto ].",
            "VernacExtend",
            "8c76f93b64a6342a1a96ec9bc5b991fcc3d46f7f"
        ],
        [
            "cut (FtoRradix p <> 0%R); [ intros H1; clear tmp | unfold FtoRradix in |- * ].",
            "VernacExtend",
            "5e72e2c4a9311cba873d5c61325947b30d54cfc4"
        ],
        [
            "2: rewrite <- FnormalizeCorrect with radix b precision p; auto; unfold FtoR in |- *; simpl in |- *.",
            "VernacExtend",
            "7c2771147889ae5e86b0946f2fa67669596a4d3b"
        ],
        [
            "2: apply Rmult_integral_contrapositive; split; auto with real zarith.",
            "VernacExtend",
            "b3c76c90f9dd1ab7f5e78b260781e29868fc1f7d"
        ],
        [
            "exists ((x - p) / p)%R; exists 0%R.",
            "VernacExtend",
            "8df4b59b80fd59b7f1eaec7855529013a0462086"
        ],
        [
            "split; [ case (Req_dec x 0); intros H2 | idtac ].",
            "VernacExtend",
            "284efae8790a0f02493c0489f28f4175a33562aa"
        ],
        [
            "repeat rewrite H2; unfold Rdiv in |- *.",
            "VernacExtend",
            "6c46934805a70162c239911f1f4a3709e4e003e3"
        ],
        [
            "ring_simplify.",
            "VernacExtend",
            "31578f61427562191ce5389abf97dbf9985ea04c"
        ],
        [
            "rewrite <- FzeroisZero with radix b; unfold FtoRradix in |- *.",
            "VernacExtend",
            "9bb02120606fb1f1873f9c7f182aa0b698d85235"
        ],
        [
            "cut (ProjectorP b radix (Closest b radix)); [ unfold ProjectorP in |- *; intros H3 | apply RoundedProjector; auto with float ].",
            "VernacExtend",
            "4611b1f53328fc31cc8c7c6d820fe6205c8970c4"
        ],
        [
            "apply H3; auto with float zarith.",
            "VernacExtend",
            "c876a374e661694d98cfde0ba4babadffb257a3c"
        ],
        [
            "replace (FtoR radix (Fzero (- dExp b))) with x; auto with real.",
            "VernacExtend",
            "125241605b3834d7c1d711e959459446e5c6e150"
        ],
        [
            "rewrite H2; unfold Fzero, FtoR in |- *; simpl in |- *; ring.",
            "VernacExtend",
            "fc0a2c0e27c2c2955231ecf9eb362467fe1e75f3"
        ],
        [
            "apply ClosestRoundedModeP with precision; auto with zarith.",
            "VernacExtend",
            "fdcaa2217184fa315291605a70d3cab0f44790e9"
        ],
        [
            "apply sym_eq; apply trans_eq with (x / (1 + (x - p) / p))%R; [ idtac | ring ].",
            "VernacExtend",
            "d664c2b3dc956129ff64de57775f67f02ec54c83"
        ],
        [
            "replace (1 + (x - FtoRradix p) / FtoRradix p)%R with (x / p)%R; unfold Rdiv in |- *.",
            "VernacExtend",
            "374cd4b11823847274e434acc4a1787559630416"
        ],
        [
            "rewrite Rinv_mult_distr; auto with real; rewrite Rinv_involutive; auto; rewrite <- Rmult_assoc; rewrite Rinv_r; auto with real.",
            "VernacExtend",
            "92e7e5cc3c8d685beb8d016a17539f8ee6bb7d89"
        ],
        [
            "ring_simplify; rewrite Rinv_l; auto with real; ring.",
            "VernacExtend",
            "b1480e8347121e23e6d2b4b81aa8994248f945f6"
        ],
        [
            "split.",
            "VernacExtend",
            "55abc140132bd88981001ac656020469a8d503eb"
        ],
        [
            "apply Rmult_le_reg_l with (Rabs p); [ apply Rabs_pos_lt; auto | idtac ].",
            "VernacExtend",
            "3f12fb3babdf8f0bc47ddc1e01d5bf1886ee17d4"
        ],
        [
            "apply Rle_trans with (Rabs (x - FtoRradix p)); [ right | apply ClosestErrorBoundNormal; auto ].",
            "VernacExtend",
            "e323cf914f5d3d5f32124284f12a3357fcc0655a"
        ],
        [
            "unfold Rdiv in |- *; rewrite Rabs_mult; rewrite Rabs_Rinv; auto.",
            "VernacExtend",
            "02859b4f48b3efe8dd6dff0ade533baa6cba0043"
        ],
        [
            "rewrite Rmult_comm; rewrite Rmult_assoc; rewrite Rinv_l; auto with real.",
            "VernacExtend",
            "0fe80a444fa04b3e5f15940d55aeabfe57f8681f"
        ],
        [
            "apply Rabs_no_R0; exact H1.",
            "VernacExtend",
            "e5eb50f61798aac6da6290c576b9db2b8acf5791"
        ],
        [
            "split; [ rewrite Rabs_R0; apply Rmult_le_pos; auto with real zarith | idtac ].",
            "VernacExtend",
            "c8e727f22b1731653b9ea931627241db6c9865bb"
        ],
        [
            "split; [ ring | idtac ].",
            "VernacExtend",
            "b52f666a2e70a740e625aa6223877603bd0dd503"
        ],
        [
            "split; [ auto with real | intros H2 ].",
            "VernacExtend",
            "8b407d93b844406396f872f9d39b6de56321c9a0"
        ],
        [
            "absurd (Fnormal radix b (Fnormalize radix b precision p) /\\ Fsubnormal radix b (Fnormalize radix b precision p)).",
            "VernacExtend",
            "24a8cac4e7cb83b36ca7aad2c9a0271ad3a159e2"
        ],
        [
            "apply NormalNotSubNormal; auto.",
            "VernacExtend",
            "31fe8f609c92dd70d8ed6bfdd47135e382ff2516"
        ],
        [
            "split; auto.",
            "VernacExtend",
            "fcd44a714bd12fa54b1c7746996e44dbac16df06"
        ],
        [
            "exists 0%R; exists (p - x)%R.",
            "VernacExtend",
            "522cdd44d67d6eb016c56adb63470fd8150651ee"
        ],
        [
            "split; [ unfold Rdiv in |- *; ring_simplify (1 + 0)%R; rewrite Rinv_1; ring | idtac ].",
            "VernacExtend",
            "6d2d33a15bc7580d1e8c3f83240a82cb18f2d84e"
        ],
        [
            "split; [ rewrite Rabs_R0; apply Rmult_le_pos; auto with real zarith | idtac ].",
            "VernacExtend",
            "c8e727f22b1731653b9ea931627241db6c9865bb"
        ],
        [
            "split.",
            "VernacExtend",
            "55abc140132bd88981001ac656020469a8d503eb"
        ],
        [
            "apply Rle_trans with (/ 2%nat * Fulp b radix precision p)%R.",
            "VernacExtend",
            "663ba83b8daa715988dc26d5ae4cd59810138120"
        ],
        [
            "rewrite <- Rabs_Ropp; replace (- (FtoRradix p - x))%R with (x - FtoRradix p)%R; [ idtac | ring ].",
            "VernacExtend",
            "68fd8b783351de57548c77b5afa40eed88a1a660"
        ],
        [
            "replace (Rabs (x - FtoRradix p)) with (/ 2%nat * (2%nat * Rabs (x - FtoRradix p)))%R.",
            "VernacExtend",
            "3825a8d1d6e964c28dbd4ed699dbe2a53bea49f0"
        ],
        [
            "apply Rmult_le_compat_l; auto with real; apply ClosestUlp; auto.",
            "VernacExtend",
            "8a1d1c6aae877e4080f04e924d9068f5b0241539"
        ],
        [
            "rewrite <- Rmult_assoc; rewrite Rinv_l; simpl in |- *; auto with real.",
            "VernacExtend",
            "fa3e32849d595a95835cc6afe22a223363f212d6"
        ],
        [
            "elim Fs; intros H1 H2; elim H2; intros; clear H2.",
            "VernacExtend",
            "206ae648a45b4d0ea464b09f339458951d147cc9"
        ],
        [
            "unfold Fulp in |- *; rewrite H0; auto with real.",
            "VernacExtend",
            "4a5680917c7f0f832f6370e64d8861337090e81e"
        ],
        [
            "split; [ ring | idtac ].",
            "VernacExtend",
            "b52f666a2e70a740e625aa6223877603bd0dd503"
        ],
        [
            "split; [ intros H2 | auto with real ].",
            "VernacExtend",
            "a3eac71268302dfd681e933907b88c56ad85d39e"
        ],
        [
            "absurd (Fnormal radix b (Fnormalize radix b precision p) /\\ Fsubnormal radix b (Fnormalize radix b precision p)).",
            "VernacExtend",
            "24a8cac4e7cb83b36ca7aad2c9a0271ad3a159e2"
        ],
        [
            "apply NormalNotSubNormal; auto.",
            "VernacExtend",
            "31fe8f609c92dd70d8ed6bfdd47135e382ff2516"
        ],
        [
            "split; auto.",
            "VernacExtend",
            "fcd44a714bd12fa54b1c7746996e44dbac16df06"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Theorem FpredUlpPos : forall x : float, Fcanonic radix b x -> (0 < x)%R -> (FPred b radix precision x + Fulp b radix precision (FPred b radix precision x))%R = x.",
            "VernacStartTheoremProof",
            "f1322b9cda3784c01f9e1bd4de4c0fc3b69090f7"
        ],
        [
            "intros x Hx H.",
            "VernacExtend",
            "3010a4964b13a8a36a4887ebdb7abf6656f632bb"
        ],
        [
            "apply sym_eq; apply Rplus_eq_reg_l with (- FtoRradix (FPred b radix precision x))%R.",
            "VernacExtend",
            "0956c3045c46823c751036aa5f55eff1880373a1"
        ],
        [
            "apply trans_eq with (Fulp b radix precision (FPred b radix precision x)); [ idtac | ring ].",
            "VernacExtend",
            "44f5a8ad6ab8db62358e5eb28dc7c5544443f243"
        ],
        [
            "apply trans_eq with (FtoRradix x - FtoRradix (FPred b radix precision x))%R; [ ring | idtac ].",
            "VernacExtend",
            "ef3ed986d132745848bd57c7a1396570a53f18f1"
        ],
        [
            "unfold FtoRradix in |- *; rewrite <- Fminus_correct; auto with zarith; fold FtoRradix in |- *.",
            "VernacExtend",
            "0ef40f95bd7af517690ffd24a7e4bad35c07de9b"
        ],
        [
            "pattern x at 1 in |- *; replace x with (FSucc b radix precision (FPred b radix precision x)); [ idtac | apply FSucPred; auto with zarith arith ].",
            "VernacExtend",
            "1dd009750c3658c209db7981754661739034a6ba"
        ],
        [
            "unfold FtoRradix in |- *; apply FSuccUlpPos; auto with zarith arith.",
            "VernacExtend",
            "e2b89912e2d6283f1e98a82a7ce1d8a56725d705"
        ],
        [
            "apply FPredCanonic; auto with zarith arith.",
            "VernacExtend",
            "0946762f0f3f4820d2f82523073997bcc386418e"
        ],
        [
            "apply R0RltRlePred; auto with zarith arith real.",
            "VernacExtend",
            "12456d587bf0dc3ccc30dce23add73acbebb3866"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Theorem FulpFPredLe : forall f : float, Fbounded b f -> Fcanonic radix b f -> (Fulp b radix precision f <= radix * Fulp b radix precision (FPred b radix precision f))%R.",
            "VernacStartTheoremProof",
            "a1ff256ce8e45863f15a79d071d795ef6270aec8"
        ],
        [
            "intros f Hf1 Hf2; unfold Fulp in |- *.",
            "VernacExtend",
            "5ef20638f32983fdcf310e14e6e178011dd74278"
        ],
        [
            "replace (Fnormalize radix b precision f) with f; [ idtac | apply FcanonicUnique with (radix := radix) (b := b) (precision := precision); auto with float arith zarith ].",
            "VernacExtend",
            "130e64072c2a07e56490f8db7e76dba3464999a6"
        ],
        [
            "2: apply sym_eq; apply FnormalizeCorrect; auto with arith zarith.",
            "VernacExtend",
            "df00a1958bb8942b4675359c88cea2722e0bd9e9"
        ],
        [
            "replace (Fnormalize radix b precision (FPred b radix precision f)) with (FPred b radix precision f); [ idtac | apply FcanonicUnique with (radix := radix) (b := b) (precision := precision); auto with float arith zarith ].",
            "VernacExtend",
            "5f6c8790f54df50936ebf252200e6f0f840b1d14"
        ],
        [
            "2: apply sym_eq; apply FnormalizeCorrect; auto with arith zarith.",
            "VernacExtend",
            "df00a1958bb8942b4675359c88cea2722e0bd9e9"
        ],
        [
            "pattern (IZR radix) at 2 in |- *; replace (IZR radix) with (powerRZ radix 1); [ idtac | simpl in |- *; auto with arith zarith real ].",
            "VernacExtend",
            "bf5547d149216dd31f12fbc53b0ca26a8e2a933a"
        ],
        [
            "rewrite <- powerRZ_add; auto with zarith real.",
            "VernacExtend",
            "4e4547ea07c8c7e5d4b07e17a3a063e54ce72721"
        ],
        [
            "apply Rle_powerRZ; auto with zarith real.",
            "VernacExtend",
            "460ad36423e6525b6688f5c6a33892fe558df2a4"
        ],
        [
            "replace (1 + Fexp (FPred b radix precision f))%Z with (Zsucc (Fexp (FPred b radix precision f))); auto with zarith.",
            "VernacExtend",
            "21c7e9a9247eeeb404748241767dfa879a88487a"
        ],
        [
            "unfold FPred in |- *.",
            "VernacExtend",
            "10cda83ebea718be45b5b393849252f2a7e5f720"
        ],
        [
            "generalize (Z_eq_bool_correct (Fnum f) (- pPred (vNum b))); case (Z_eq_bool (Fnum f) (- pPred (vNum b))); intros H1; [ simpl in |- *; auto with zarith | idtac ].",
            "VernacExtend",
            "8a3f90ce5ca70d2032ec4fdfba962ff977164c4a"
        ],
        [
            "generalize (Z_eq_bool_correct (Fnum f) (nNormMin radix precision)); case (Z_eq_bool (Fnum f) (nNormMin radix precision)); intros H2; [ idtac | simpl in |- *; auto with zarith ].",
            "VernacExtend",
            "d0367d60cf6e7ab508b2bfe62b6986118911ba42"
        ],
        [
            "generalize (Z_eq_bool_correct (Fexp f) (- dExp b)); case (Z_eq_bool (Fexp f) (- dExp b)); intros H3; simpl in |- *; auto with zarith.",
            "VernacExtend",
            "61ab23af40c1775c89010e3b1805dec6f69c5be5"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Theorem ClosestErrorBoundNormal2_aux : forall (x : R) (p : float), Closest b radix x p -> Fnormal radix b p -> Fnormal radix b (Fnormalize radix b precision (FPred b radix precision p)) -> (0 < x)%R -> (x < p)%R -> (Rabs (x - p) <= Rabs x * (/ 2%nat * powerRZ radix (Zsucc (- precision))))%R.",
            "VernacStartTheoremProof",
            "37c4dc881c23419674a8d1bec1f5aec3cc4c9a43"
        ],
        [
            "intros x p H1 H2 H0 H3 H4.",
            "VernacExtend",
            "855cf3002639884410fc4890e4a49bad76a9a7e4"
        ],
        [
            "cut (Fcanonic radix b p); [ intros H5 | left; auto ].",
            "VernacExtend",
            "40e48e9abdf0032334f7eb1b7bfa6790d4005532"
        ],
        [
            "cut (Fbounded b p); [ intros H6 | elim H2; auto ].",
            "VernacExtend",
            "6d6a3d6ee339c6542337607c0a981d74a3543534"
        ],
        [
            "cut (0 < p)%R; [ intros H7 | apply Rlt_trans with x; auto ].",
            "VernacExtend",
            "1cf9b572dffd496a72099966f9ea8277eb2bdeb0"
        ],
        [
            "cut (FPred b radix precision p < x)%R; [ intros H' | idtac ].",
            "VernacExtend",
            "f8b251480b82674c0af386158d0f50c881a483ef"
        ],
        [
            "apply Rle_trans with (/ 2%nat * Fulp b radix precision (FPred b radix precision p))%R.",
            "VernacExtend",
            "3b4f4a57774458a44af5cc004358846d27b10efa"
        ],
        [
            "case (Rle_or_lt (Rabs (x - FtoRradix p)) (/ 2%nat * Fulp b radix precision (FPred b radix precision p))); auto; intros H8.",
            "VernacExtend",
            "4f8252b6aeaf27ebdb467945a71eaf70c88ea873"
        ],
        [
            "absurd (Rabs (p - x) <= Rabs (FPred b radix precision p - x))%R.",
            "VernacExtend",
            "6c789a8908acca545d54151e4678ec777cd2a1d7"
        ],
        [
            "2: generalize H1; unfold Closest in |- *; intros H9; elim H9; intros tmp H10.",
            "VernacExtend",
            "5fcffaffb98991b580998ff399511b2d153eacbb"
        ],
        [
            "2: clear tmp; apply H10; auto with float zarith arith.",
            "VernacExtend",
            "413ef3b32ca5e93c78d91778eed95002e1cf881d"
        ],
        [
            "apply Rlt_not_le; rewrite Rabs_left; auto with real.",
            "VernacExtend",
            "c1f7b8097f46cb0a33a4d0f80d01f95b4e46b251"
        ],
        [
            "apply Rle_lt_trans with (p - FPred b radix precision p + (x - p))%R; [ right; ring | idtac ].",
            "VernacExtend",
            "b7d00cf68168f35327c4683ce851e97635bc1f29"
        ],
        [
            "pattern (FtoRradix p) at 1 in |- *; rewrite <- FpredUlpPos with p; auto with real.",
            "VernacExtend",
            "37897f4594847407b6f08cda11d00e9c98b91660"
        ],
        [
            "apply Rle_lt_trans with (Fulp b radix precision (FPred b radix precision p) + (x - p))%R; [ right; ring | idtac ].",
            "VernacExtend",
            "b9477620647099cdfc98425b15ec077af67db64f"
        ],
        [
            "apply Rle_lt_trans with (Fulp b radix precision (FPred b radix precision p) + - (/ 2%nat * Fulp b radix precision (FPred b radix precision p)))%R; [ apply Rplus_le_compat_l | idtac ].",
            "VernacExtend",
            "2b8609572f1aa0d2adb21c3339367bba6437d8bc"
        ],
        [
            "apply Ropp_le_cancel; rewrite Ropp_involutive; rewrite <- Rabs_left; auto with real.",
            "VernacExtend",
            "c1e6fc221560627fda96f54616694c6fb2f4b14f"
        ],
        [
            "apply Rle_lt_trans with (/ 2%nat * Fulp b radix precision (FPred b radix precision p))%R.",
            "VernacExtend",
            "9bcf5e4484bbba543a95bf82e0b24b282968084a"
        ],
        [
            "right; apply trans_eq with ((1 + - / 2%nat) * Fulp b radix precision (FPred b radix precision p))%R; [ ring | idtac ].",
            "VernacExtend",
            "eaf8d566be251d9362b0855494a36f81a647fa48"
        ],
        [
            "replace (1 + - / 2%nat)%R with (/ 2%nat)%R; [ ring | simpl; field; auto with arith real; simpl in |- *; ring ].",
            "VernacExtend",
            "e772d7fa21987929da31418c6ba13788fb4513b0"
        ],
        [
            "rewrite <- Rabs_Ropp; replace (- (FtoRradix p - x))%R with (x - p)%R; auto; ring.",
            "VernacExtend",
            "a202a78fdf9185a686d118ca4b7ed7dd7dc8272e"
        ],
        [
            "apply Rle_trans with (/ 2%nat * (Rabs x * powerRZ radix (Zsucc (- precision))))%R; [ apply Rmult_le_compat_l; auto with real arith | right; ring ].",
            "VernacExtend",
            "227a7e86f2fbe6ad0499d70d16abd545e3b1caa3"
        ],
        [
            "apply Rle_trans with (Rabs (FPred b radix precision p) * powerRZ radix (Zsucc (- precision)))%R.",
            "VernacExtend",
            "420c7e646d9c5fdaa54a06ece9d5f1be6ecd96c0"
        ],
        [
            "unfold Fulp in |- *; replace (Fexp (Fnormalize radix b precision (FPred b radix precision p))) with (Fexp (Fnormalize radix b precision (FPred b radix precision p)) + precision + - precision)%Z; [ idtac | ring ].",
            "VernacExtend",
            "674ecaaffe7ababccb2f9a34afae916c40fa3591"
        ],
        [
            "rewrite powerRZ_add; auto with real zarith.",
            "VernacExtend",
            "464b630a39cda032263051881ad80da2fc959c8e"
        ],
        [
            "apply Rle_trans with (Rabs (FPred b radix precision p) * radix * powerRZ radix (- precision))%R; [ apply Rmult_le_compat_r | right ]; auto with real zarith.",
            "VernacExtend",
            "20e7c413f4430987a340bce0fe2111c4dd95083f"
        ],
        [
            "2: rewrite powerRZ_Zs; auto with real zarith; ring.",
            "VernacExtend",
            "63d43d6099aa077efb1f3d466ce63cc2f63b207b"
        ],
        [
            "replace (FtoRradix (FPred b radix precision p)) with (FtoRradix (Fnormalize radix b precision (FPred b radix precision p))); [ idtac | apply (FnormalizeCorrect radix) ]; auto.",
            "VernacExtend",
            "695da46550e4aa1d5f20f4acac0bfd4b434c00ea"
        ],
        [
            "rewrite <- (Fabs_correct radix); unfold FtoR in |- *; simpl in |- *; auto with arith.",
            "VernacExtend",
            "d2ff0f8093f0b7fe65f181a9cc140b8395279840"
        ],
        [
            "rewrite powerRZ_add; auto with real zarith.",
            "VernacExtend",
            "464b630a39cda032263051881ad80da2fc959c8e"
        ],
        [
            "apply Rle_trans with (powerRZ radix (Fexp (Fnormalize radix b precision (FPred b radix precision p))) * (Zabs (Fnum (Fnormalize radix b precision (FPred b radix precision p))) * radix))%R; [ idtac | right; ring ].",
            "VernacExtend",
            "a21eddb124a2293700b9264e2de375362d2e3b30"
        ],
        [
            "apply Rmult_le_compat_l; auto with arith real.",
            "VernacExtend",
            "81ccf5e0845073405e91eb3fd6a490609f4f1047"
        ],
        [
            "rewrite <- Zpower_nat_Z_powerRZ; auto with real zarith; rewrite <- Rmult_IZR.",
            "VernacExtend",
            "23c1fbbe03fc3e99118a0dd7a45d49fadb0fdc79"
        ],
        [
            "apply Rle_IZR; rewrite <- pGivesBound; pattern radix at 3 in |- *; rewrite <- (Zabs_eq radix); auto with zarith; rewrite <- Zabs_Zmult; rewrite Zmult_comm; elim H0; auto.",
            "VernacExtend",
            "267117977961337bd337c1c07f423e360f406d15"
        ],
        [
            "apply Rmult_le_compat_r; auto with real zarith.",
            "VernacExtend",
            "ab12f06210771823661c627ab200f2c736704e67"
        ],
        [
            "repeat rewrite Rabs_right; auto with real; apply Rle_ge; auto with real.",
            "VernacExtend",
            "5814876965d42547b80a8547a6099f875b840633"
        ],
        [
            "unfold FtoRradix in |- *; apply R0RltRlePred; auto with real arith.",
            "VernacExtend",
            "3547f1a5427012fd0698aa3887bf5f090971b43f"
        ],
        [
            "case (Rle_or_lt 0 (FtoRradix (FPred b radix precision p) - x)); intros H9.",
            "VernacExtend",
            "82dc2647a40e21f15f899f7546d980ed3f38d469"
        ],
        [
            "absurd (Rabs (p - x) <= Rabs (FPred b radix precision p - x))%R.",
            "VernacExtend",
            "6c789a8908acca545d54151e4678ec777cd2a1d7"
        ],
        [
            "apply Rlt_not_le; repeat rewrite Rabs_right; try apply Rle_ge; auto with real.",
            "VernacExtend",
            "395423857c6039480f0186281febed6be376b200"
        ],
        [
            "unfold Rminus in |- *; apply Rplus_lt_compat_r; auto with real float zarith.",
            "VernacExtend",
            "ab23fb2a658b17155d243ef44aa5b5fc0cc9e2c5"
        ],
        [
            "unfold FtoRradix in |- *; apply FPredLt; auto with real float zarith.",
            "VernacExtend",
            "826437571c7672706ef42e6b65e7ae2eb5bb2556"
        ],
        [
            "generalize H1; unfold Closest in |- *; intros H'; elim H'; intros tmp H10.",
            "VernacExtend",
            "a9d2804865041795a0a7e6dbea9d63fe97f5f37e"
        ],
        [
            "clear tmp; apply H10; auto with float zarith arith.",
            "VernacExtend",
            "42bdcddd541fd934ea09b6bdc20cbe05fd999c0b"
        ],
        [
            "apply Rplus_lt_reg_l with (- x)%R; auto with real.",
            "VernacExtend",
            "8a1fd687b640c6cf7cf9ed9fbdc5da1acd841841"
        ],
        [
            "ring_simplify (- x + x)%R; apply Rle_lt_trans with (2 := H9); right; ring.",
            "VernacExtend",
            "846c0a82490fa937f00b48fbb764e9513a2b8ab6"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "End Fclosestp2.",
            "VernacEndSegment",
            "4db7aa07c044959195a2d28ca35f78957abad157"
        ],
        [
            "Hint Resolve ClosestOpp ClosestFabs ClosestUlp: float.",
            "VernacHints",
            "f38f5307fabee5fdeb22e7cee00b99b99b11805f"
        ]
    ],
    "proofs": [
        {
            "name": "ClosestOpp",
            "line_nb": 13,
            "steps": [
                {
                    "command": [
                        "intros p r H'; split.",
                        "VernacExtend",
                        "596d6060adaa45f2c778a5b321b84be5016c58a7"
                    ]
                },
                {
                    "command": [
                        "apply oppBounded; auto.",
                        "VernacExtend",
                        "6e68d2122eeea082741ca4e279707ce0511c71ef"
                    ]
                },
                {
                    "command": [
                        "case H'; auto.",
                        "VernacExtend",
                        "ebc5b3ac68f03e20b8a194319f607aaad1bf60b4"
                    ]
                },
                {
                    "command": [
                        "intros f H'0.",
                        "VernacExtend",
                        "9a31aade9075f1f2b1421318060af2dc591e9a32"
                    ]
                },
                {
                    "command": [
                        "rewrite Fopp_correct.",
                        "VernacExtend",
                        "74c438eb6f71c02f5e643ea13652cd63a4c3eabb"
                    ]
                },
                {
                    "command": [
                        "replace (- FtoR radix p - - r)%R with (- (FtoR radix p - r))%R; [ idtac | ring ].",
                        "VernacExtend",
                        "86444705a664e8ef19fa59ff8b60b4a29b6feab3"
                    ]
                },
                {
                    "command": [
                        "replace (FtoR radix f - - r)%R with (- (- FtoR radix f - r))%R; [ idtac | ring ].",
                        "VernacExtend",
                        "70fcedcd4b7e9a23551deea48f199c0f2951d8fe"
                    ]
                },
                {
                    "command": [
                        "rewrite <- Fopp_correct.",
                        "VernacExtend",
                        "ad35e0162588fc7611e3b308cf689247fae7fe9f"
                    ]
                },
                {
                    "command": [
                        "repeat rewrite Rabs_Ropp.",
                        "VernacExtend",
                        "d9ca552ba972ed3f671e8d416c06e9d426f50757"
                    ]
                },
                {
                    "command": [
                        "case H'; auto with float.",
                        "VernacExtend",
                        "a3b51daee2f74fa3d604025dd26c73450a685610"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "ClosestFabs",
            "line_nb": 25,
            "steps": [
                {
                    "command": [
                        "intros p r H'; case (Rle_or_lt 0 r); intros Rl0.",
                        "VernacExtend",
                        "e3c6c09736420c3e75d3f276bc862c924ce75633"
                    ]
                },
                {
                    "command": [
                        "rewrite Rabs_right; auto with real.",
                        "VernacExtend",
                        "e24d8a510a5d2d71a1265c4c7b5d2f745fcc98e0"
                    ]
                },
                {
                    "command": [
                        "replace (Fabs p) with p; auto.",
                        "VernacExtend",
                        "8c95c8bb4d4397be1eafbdb43df5edb12121cf51"
                    ]
                },
                {
                    "command": [
                        "unfold Fabs in |- *; apply floatEq; simpl in |- *; auto.",
                        "VernacExtend",
                        "bad3c8867624b705b01517f09e15999e90e1c1db"
                    ]
                },
                {
                    "command": [
                        "cut (0 <= Fnum p)%Z.",
                        "VernacExtend",
                        "2b700b39397bac59619065714135317e235bf22a"
                    ]
                },
                {
                    "command": [
                        "case (Fnum p); simpl in |- *; auto; intros p' H0; Contradict H0; apply Zlt_not_le; red in |- *; simpl in |- *; auto with zarith.",
                        "VernacExtend",
                        "c30796acfc0b107d6c0382a5532e0238619f8b0a"
                    ]
                },
                {
                    "command": [
                        "apply LeR0Fnum with (radix := radix); auto.",
                        "VernacExtend",
                        "975ec13d69ef1c6fc89972a56ed1594f2f2433a5"
                    ]
                },
                {
                    "command": [
                        "apply RleRoundedR0 with (b := b) (precision := precision) (P := Closest b radix) (r := r); auto.",
                        "VernacExtend",
                        "5bd4a74a4c3ce5d96074438493c2d096756a4078"
                    ]
                },
                {
                    "command": [
                        "apply ClosestRoundedModeP with (precision := precision); auto with real.",
                        "VernacExtend",
                        "9c3052a0738613699d2b46866c6f05a7dc0de27f"
                    ]
                },
                {
                    "command": [
                        "rewrite Faux.Rabsolu_left1; auto.",
                        "VernacExtend",
                        "cdfb2996338b3a1e58065e7b9fa29cb7224ffecf"
                    ]
                },
                {
                    "command": [
                        "replace (Fabs p) with (Fopp p).",
                        "VernacExtend",
                        "435b0f7f1a490fa26166eaf9bd0e532f9d57271f"
                    ]
                },
                {
                    "command": [
                        "apply ClosestOpp; auto.",
                        "VernacExtend",
                        "fdb10086de8928309670334b477ceba716a1f016"
                    ]
                },
                {
                    "command": [
                        "unfold Fabs in |- *; apply floatEq; simpl in |- *; auto.",
                        "VernacExtend",
                        "bad3c8867624b705b01517f09e15999e90e1c1db"
                    ]
                },
                {
                    "command": [
                        "cut (Fnum p <= 0)%Z.",
                        "VernacExtend",
                        "cd97c6956988cce57547261bcac079f34b411d9d"
                    ]
                },
                {
                    "command": [
                        "case (Fnum p); simpl in |- *; auto; intros p' H0; Contradict H0; apply Zlt_not_le; red in |- *; simpl in |- *; auto with zarith.",
                        "VernacExtend",
                        "c30796acfc0b107d6c0382a5532e0238619f8b0a"
                    ]
                },
                {
                    "command": [
                        "apply R0LeFnum with (radix := radix); auto.",
                        "VernacExtend",
                        "e71b25728630cdfc807f13ddc0aedbaffcc57235"
                    ]
                },
                {
                    "command": [
                        "apply RleRoundedLessR0 with (b := b) (precision := precision) (P := Closest b radix) (r := r); auto.",
                        "VernacExtend",
                        "45583f3f1a50b078287b6947a2c648134b321e9a"
                    ]
                },
                {
                    "command": [
                        "apply ClosestRoundedModeP with (precision := precision); auto.",
                        "VernacExtend",
                        "eb6d3ee24dd119beb307169797f1cdd709b3ec7c"
                    ]
                },
                {
                    "command": [
                        "apply Rlt_le; auto.",
                        "VernacExtend",
                        "4003e3e1c449ee89cad9e953d0a562db8235648c"
                    ]
                },
                {
                    "command": [
                        "apply Rlt_le; auto.",
                        "VernacExtend",
                        "4003e3e1c449ee89cad9e953d0a562db8235648c"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "ClosestUlp",
            "line_nb": 47,
            "steps": [
                {
                    "command": [
                        "intros p q H'.",
                        "VernacExtend",
                        "6d0165163a2a8e407c09482ce517f2835b5de359"
                    ]
                },
                {
                    "command": [
                        "case (Req_dec p q); intros Eqpq.",
                        "VernacExtend",
                        "2c95ed9a29cc05a4d0ed947cc92b96e0e0fe92e7"
                    ]
                },
                {
                    "command": [
                        "rewrite Eqpq.",
                        "VernacExtend",
                        "c121fbb70e3c2a6f35fabb498198146112efdeac"
                    ]
                },
                {
                    "command": [
                        "replace (Rabs (q - q)) with 0%R; [ rewrite Rmult_0_r | replace (q - q)%R with 0%R; try ring; rewrite Rabs_right; auto with real ].",
                        "VernacExtend",
                        "7fff2efd386f53424a9248ba442046ebd3e1ca98"
                    ]
                },
                {
                    "command": [
                        "unfold Fulp in |- *; apply Rlt_le; auto with real arith.",
                        "VernacExtend",
                        "58d25fa22018e332b7ae571ec453ce9aa78a6d11"
                    ]
                },
                {
                    "command": [
                        "replace (2%nat * Rabs (p - q))%R with (Rabs (p - q) + Rabs (p - q))%R; [ idtac | simpl in |- *; ring ].",
                        "VernacExtend",
                        "23a23490dceff4324c978d7904c54825180f0dda"
                    ]
                },
                {
                    "command": [
                        "case ClosestMinOrMax with (1 := H'); intros H'1.",
                        "VernacExtend",
                        "243a0f87736ea5a3672d317851bf371e0b3fa82e"
                    ]
                },
                {
                    "command": [
                        "apply Rle_trans with (Rabs (p - q) + Rabs (FNSucc b radix precision q - p))%R.",
                        "VernacExtend",
                        "21bc1fe793f33fa324e50ac54698293dbe442fe1"
                    ]
                },
                {
                    "command": [
                        "apply Rplus_le_compat_l.",
                        "VernacExtend",
                        "3af9ea371eb281cf0e58041faab020bb6798a832"
                    ]
                },
                {
                    "command": [
                        "rewrite <- (Rabs_Ropp (p - q)).",
                        "VernacExtend",
                        "e097a29cc86eccc570d66a5b692ddf59398e407f"
                    ]
                },
                {
                    "command": [
                        "rewrite Ropp_minus_distr.",
                        "VernacExtend",
                        "03410ea29af67bdcfa7393931606c01ed23d7394"
                    ]
                },
                {
                    "command": [
                        "elim H'; auto.",
                        "VernacExtend",
                        "a5e9e87d39a05d836dbbdf38dfd3ec2e253451e2"
                    ]
                },
                {
                    "command": [
                        "intros H'0 H'2; apply H'2; auto.",
                        "VernacExtend",
                        "97df896a7f3dd3548763433a2199eef216cc0db8"
                    ]
                },
                {
                    "command": [
                        "apply FcanonicBound with (radix := radix); auto with float arith.",
                        "VernacExtend",
                        "730ad8477bfdc69203d62137a8d91b55afb3211c"
                    ]
                },
                {
                    "command": [
                        "rewrite Rabs_right.",
                        "VernacExtend",
                        "9b60731d6b608338747f09fec19f24d12baad022"
                    ]
                },
                {
                    "command": [
                        "rewrite Rabs_right.",
                        "VernacExtend",
                        "9b60731d6b608338747f09fec19f24d12baad022"
                    ]
                },
                {
                    "command": [
                        "replace (p - q + (FNSucc b radix precision q - p))%R with (FNSucc b radix precision q - q)%R; [ idtac | ring ].",
                        "VernacExtend",
                        "89074bb4d6b3d3e39c1fdd15f566154f4e51a561"
                    ]
                },
                {
                    "command": [
                        "unfold FtoRradix in |- *; apply FulpSuc; auto.",
                        "VernacExtend",
                        "4da4c37b57bffdb44bf6b322290001e00dd76f8b"
                    ]
                },
                {
                    "command": [
                        "case H'1; auto.",
                        "VernacExtend",
                        "a44f1b914e489dd19b841fdfab025ba14e3d8f86"
                    ]
                },
                {
                    "command": [
                        "apply Rge_minus; apply Rle_ge; auto with real float.",
                        "VernacExtend",
                        "750f449cb149e9c982b9efaf2dce17653002fe03"
                    ]
                },
                {
                    "command": [
                        "case MinMax with (3 := pGivesBound) (r := p) (p := q); auto with arith.",
                        "VernacExtend",
                        "5d71563eaecaa60bc08d31a91f662861875c5b63"
                    ]
                },
                {
                    "command": [
                        "intros H'0 H'2; elim H'2; intros H'3 H'4; apply H'3; clear H'2; auto.",
                        "VernacExtend",
                        "f64c754f3a2d7d196a2c077828366cda24974692"
                    ]
                },
                {
                    "command": [
                        "apply Rge_minus; apply Rle_ge; auto with real float.",
                        "VernacExtend",
                        "750f449cb149e9c982b9efaf2dce17653002fe03"
                    ]
                },
                {
                    "command": [
                        "apply isMin_inv1 with (1 := H'1).",
                        "VernacExtend",
                        "7dd90cc4ffdbee3b601f586e2f88b98d9c0b4bd9"
                    ]
                },
                {
                    "command": [
                        "apply Rle_trans with (Rabs (p - q) + Rabs (p - FNPred b radix precision q))%R.",
                        "VernacExtend",
                        "7848df392f2145513a3d93b3187569644fb9abf9"
                    ]
                },
                {
                    "command": [
                        "apply Rplus_le_compat_l.",
                        "VernacExtend",
                        "3af9ea371eb281cf0e58041faab020bb6798a832"
                    ]
                },
                {
                    "command": [
                        "rewrite <- (Rabs_Ropp (p - q)); rewrite <- (Rabs_Ropp (p - FNPred b radix precision q)).",
                        "VernacExtend",
                        "a6ae93d54b32f250a668d3609d1076b564237e59"
                    ]
                },
                {
                    "command": [
                        "repeat rewrite Ropp_minus_distr.",
                        "VernacExtend",
                        "2ff4c1bf14ffec4a53f7c4e9a6818b2cd38e102b"
                    ]
                },
                {
                    "command": [
                        "elim H'; auto.",
                        "VernacExtend",
                        "a5e9e87d39a05d836dbbdf38dfd3ec2e253451e2"
                    ]
                },
                {
                    "command": [
                        "intros H'0 H'2; apply H'2; auto.",
                        "VernacExtend",
                        "97df896a7f3dd3548763433a2199eef216cc0db8"
                    ]
                },
                {
                    "command": [
                        "apply FcanonicBound with (radix := radix); auto with float arith.",
                        "VernacExtend",
                        "730ad8477bfdc69203d62137a8d91b55afb3211c"
                    ]
                },
                {
                    "command": [
                        "rewrite <- (Rabs_Ropp (p - q)); rewrite Ropp_minus_distr.",
                        "VernacExtend",
                        "0ecea1252fc2d956c9815c6ac992dc6d4000332a"
                    ]
                },
                {
                    "command": [
                        "rewrite Rabs_right.",
                        "VernacExtend",
                        "9b60731d6b608338747f09fec19f24d12baad022"
                    ]
                },
                {
                    "command": [
                        "rewrite Rabs_right.",
                        "VernacExtend",
                        "9b60731d6b608338747f09fec19f24d12baad022"
                    ]
                },
                {
                    "command": [
                        "replace (q - p + (p - FNPred b radix precision q))%R with (q - FNPred b radix precision q)%R; [ idtac | ring ].",
                        "VernacExtend",
                        "0473971b75161276778aa84b385c30525259f1d1"
                    ]
                },
                {
                    "command": [
                        "unfold FtoRradix in |- *; apply FulpPred; auto.",
                        "VernacExtend",
                        "3cc5076e9c1f8e349feae83bd0c24c85bebd8d65"
                    ]
                },
                {
                    "command": [
                        "case H'1; auto.",
                        "VernacExtend",
                        "a44f1b914e489dd19b841fdfab025ba14e3d8f86"
                    ]
                },
                {
                    "command": [
                        "apply Rge_minus; apply Rle_ge; auto with real float.",
                        "VernacExtend",
                        "750f449cb149e9c982b9efaf2dce17653002fe03"
                    ]
                },
                {
                    "command": [
                        "case MaxMin with (3 := pGivesBound) (r := p) (p := q); auto with arith.",
                        "VernacExtend",
                        "8037475022f3081d78fb4c7185fdbd5490ac4494"
                    ]
                },
                {
                    "command": [
                        "intros H'0 H'2; elim H'2; intros H'3 H'4; apply H'3; clear H'2; auto.",
                        "VernacExtend",
                        "f64c754f3a2d7d196a2c077828366cda24974692"
                    ]
                },
                {
                    "command": [
                        "apply Rge_minus; apply Rle_ge; auto with real float.",
                        "VernacExtend",
                        "750f449cb149e9c982b9efaf2dce17653002fe03"
                    ]
                },
                {
                    "command": [
                        "apply isMax_inv1 with (1 := H'1).",
                        "VernacExtend",
                        "75f9fe6e81eb03cd3ba773a15895de7faa9b306f"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "ClosestExp",
            "line_nb": 91,
            "steps": [
                {
                    "command": [
                        "intros p q H'.",
                        "VernacExtend",
                        "6d0165163a2a8e407c09482ce517f2835b5de359"
                    ]
                },
                {
                    "command": [
                        "apply Rle_trans with (Fulp b radix precision q).",
                        "VernacExtend",
                        "f59be0e9bcc8a9ae23e45a12b57fb5faac428d1a"
                    ]
                },
                {
                    "command": [
                        "apply (ClosestUlp p q); auto.",
                        "VernacExtend",
                        "b9e8e11d2c697f5056d953840548b59e7a6bab26"
                    ]
                },
                {
                    "command": [
                        "replace (powerRZ radix (Fexp q)) with (FtoRradix (Float 1%nat (Fexp q))).",
                        "VernacExtend",
                        "99ea5fa0ceef175afce521c7f96ec95f05f271ef"
                    ]
                },
                {
                    "command": [
                        "apply (FulpLe b radix); auto.",
                        "VernacExtend",
                        "3f6310e5a7c728f7f2d83a4e18df89ef1d426e11"
                    ]
                },
                {
                    "command": [
                        "apply RoundedModeBounded with (radix := radix) (P := Closest b radix) (r := p); auto.",
                        "VernacExtend",
                        "f5406a5377bede95b15d510b1212bba8917d459d"
                    ]
                },
                {
                    "command": [
                        "apply ClosestRoundedModeP with (precision := precision); auto.",
                        "VernacExtend",
                        "eb6d3ee24dd119beb307169797f1cdd709b3ec7c"
                    ]
                },
                {
                    "command": [
                        "unfold FtoRradix, FtoR in |- *; simpl in |- *.",
                        "VernacExtend",
                        "85a3da1582165d92ceb7faef707de88822bccf1a"
                    ]
                },
                {
                    "command": [
                        "ring.",
                        "VernacExtend",
                        "baadd9fc4c175005af409bb466fcea9fab25b4e6"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "ClosestIdem",
            "line_nb": 120,
            "steps": [
                {
                    "command": [
                        "intros p q H' H'0.",
                        "VernacExtend",
                        "7ea1365154d917a427c6781fa2515333f91063e3"
                    ]
                },
                {
                    "command": [
                        "case (Rabs_pos (q - p)); intros H1.",
                        "VernacExtend",
                        "48b995443e4b860ce631eb6a55f68f51b7587666"
                    ]
                },
                {
                    "command": [
                        "Contradict H1; apply Rle_not_lt.",
                        "VernacExtend",
                        "3b60334e887e1a42f4d98ab84be02277a7aa6432"
                    ]
                },
                {
                    "command": [
                        "replace 0%R with (Rabs (p - p)); [ case H'0; auto | idtac ].",
                        "VernacExtend",
                        "6b92d72845eafce79b01bab1b4fc9ef2d5a43569"
                    ]
                },
                {
                    "command": [
                        "replace (p - p)%R with 0%R; [ apply Rabs_R0; auto | ring ].",
                        "VernacExtend",
                        "0fd0ddd255a72a96699d923467dccef258e8d583"
                    ]
                },
                {
                    "command": [
                        "apply Rplus_eq_reg_l with (r := (- p)%R).",
                        "VernacExtend",
                        "fd072b539ebbc93e4fd0156508c27e56d2879dc9"
                    ]
                },
                {
                    "command": [
                        "apply trans_eq with 0%R; [ ring | idtac ].",
                        "VernacExtend",
                        "80d031673887141234f9f41b809cc4359da93265"
                    ]
                },
                {
                    "command": [
                        "apply trans_eq with (q - p)%R; [ idtac | ring ].",
                        "VernacExtend",
                        "6d6368bf9f623659443f002ccec37d9d2a9c074d"
                    ]
                },
                {
                    "command": [
                        "generalize H1; unfold Rabs in |- *; case (Rcase_abs (q - p)); auto.",
                        "VernacExtend",
                        "c5c943d79e1a1023180c6ac56c2e8571b5f7df31"
                    ]
                },
                {
                    "command": [
                        "intros r H0; replace 0%R with (-0)%R; [ rewrite H0 | idtac ]; ring.",
                        "VernacExtend",
                        "ede19e0ff2fc7ee8f524d3089b6510d2a35ea97b"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "FmultRadixInv",
            "line_nb": 174,
            "steps": [
                {
                    "command": [
                        "intros x z y H' H'0 H'1.",
                        "VernacExtend",
                        "aa5f4277410c26324e8211705210833d91fa75a2"
                    ]
                },
                {
                    "command": [
                        "case MinEx with (r := (/ 2%nat * x)%R) (3 := pGivesBound); auto with arith.",
                        "VernacExtend",
                        "b871d748c68f29a812ec3596d97c8da78fb2cb30"
                    ]
                },
                {
                    "command": [
                        "intros min isMin.",
                        "VernacExtend",
                        "b43807776d23ab1dba4b903036d6798165449f94"
                    ]
                },
                {
                    "command": [
                        "case MaxEx with (r := (/ 2%nat * x)%R) (3 := pGivesBound); auto with arith.",
                        "VernacExtend",
                        "ea842786710b03533614a12b7b2744997a934285"
                    ]
                },
                {
                    "command": [
                        "intros max isMax.",
                        "VernacExtend",
                        "4daf66a5be1f52ab547d023db61c0e6389f035ba"
                    ]
                },
                {
                    "command": [
                        "case (Rle_or_lt y max); intros Rl1.",
                        "VernacExtend",
                        "793284712e00edbebc0ba224b2cbcfafd672111a"
                    ]
                },
                {
                    "command": [
                        "case Rl1; clear Rl1; intros Rl1.",
                        "VernacExtend",
                        "dbedf48079ca266488334450ce80d732dd0fb5a8"
                    ]
                },
                {
                    "command": [
                        "replace (FtoRradix z) with (FtoRradix max).",
                        "VernacExtend",
                        "c303d96d46f8ee2428f8c03490b45b1ed2e3d4f3"
                    ]
                },
                {
                    "command": [
                        "apply isMax_inv1 with (1 := isMax).",
                        "VernacExtend",
                        "2286feec4700c1d639962c6fcbec69cce4a92795"
                    ]
                },
                {
                    "command": [
                        "apply sym_eq.",
                        "VernacExtend",
                        "f01eb728d9ceeac2915c66b52a7b50a0c452e949"
                    ]
                },
                {
                    "command": [
                        "unfold FtoRradix in |- *; apply ClosestMaxEq with (b := b) (r := y) (min := min); auto.",
                        "VernacExtend",
                        "8b7050f20ecc77796294d6e91cb3990c9afb8fa9"
                    ]
                },
                {
                    "command": [
                        "apply isMinComp with (r1 := (/ 2%nat * x)%R) (max := max); auto.",
                        "VernacExtend",
                        "7bedb728dfabb9bf15dfbd48e55c618a12367f78"
                    ]
                },
                {
                    "command": [
                        "apply Rle_lt_trans with (2 := H'1); auto.",
                        "VernacExtend",
                        "6bb3cf6e4b5f171eefb684d32ff3fd6b58d30654"
                    ]
                },
                {
                    "command": [
                        "apply isMin_inv1 with (1 := isMin).",
                        "VernacExtend",
                        "31518faecd6d0920153e737ce0dc5be70c0e7438"
                    ]
                },
                {
                    "command": [
                        "apply isMaxComp with (r1 := (/ 2%nat * x)%R) (min := min); auto.",
                        "VernacExtend",
                        "fd80a94a8a312c2eae48cd281c7c4cc32c15a011"
                    ]
                },
                {
                    "command": [
                        "apply Rle_lt_trans with (2 := H'1); auto.",
                        "VernacExtend",
                        "6bb3cf6e4b5f171eefb684d32ff3fd6b58d30654"
                    ]
                },
                {
                    "command": [
                        "apply isMin_inv1 with (1 := isMin).",
                        "VernacExtend",
                        "31518faecd6d0920153e737ce0dc5be70c0e7438"
                    ]
                },
                {
                    "command": [
                        "replace (FtoR radix min + FtoR radix max)%R with (FtoRradix x).",
                        "VernacExtend",
                        "1d8304dbc3cc6300af376dbb2e6eb1aa2edd3d35"
                    ]
                },
                {
                    "command": [
                        "apply Rmult_lt_reg_l with (r := (/ 2%nat)%R); auto with real.",
                        "VernacExtend",
                        "8bc034dfa0cf0586596ad4f7208b865e73eda04f"
                    ]
                },
                {
                    "command": [
                        "rewrite <- Rmult_assoc; rewrite Rinv_l; try rewrite Rmult_1_l; auto with real.",
                        "VernacExtend",
                        "adb95c9f20e298d06eef582e740fc1283af913a5"
                    ]
                },
                {
                    "command": [
                        "unfold FtoRradix in |- *; apply (div2IsBetween b radix precision); auto.",
                        "VernacExtend",
                        "73a59f7d421c5e989f136ba8a738f5807baee960"
                    ]
                },
                {
                    "command": [
                        "cut (Closest b radix max z); [ intros C0 | idtac ].",
                        "VernacExtend",
                        "b5583e54cf59fd5f3f90b8a928b023431b41db88"
                    ]
                },
                {
                    "command": [
                        "replace (FtoRradix z) with (FtoRradix max); auto.",
                        "VernacExtend",
                        "553268678246bc70c1c10c4e600676bca8ce0f12"
                    ]
                },
                {
                    "command": [
                        "rewrite <- Rl1; auto.",
                        "VernacExtend",
                        "d5b528668392c2fdef5caddddd2ad155402fa018"
                    ]
                },
                {
                    "command": [
                        "apply Rlt_le; auto.",
                        "VernacExtend",
                        "4003e3e1c449ee89cad9e953d0a562db8235648c"
                    ]
                },
                {
                    "command": [
                        "apply ClosestIdem; auto.",
                        "VernacExtend",
                        "21d0cf18072d91345204957cf19d966af206c6a0"
                    ]
                },
                {
                    "command": [
                        "case isMax; auto.",
                        "VernacExtend",
                        "102a8708ecc597f2433427ba8821127dd216c58b"
                    ]
                },
                {
                    "command": [
                        "apply (ClosestCompatible b radix y max z z); auto.",
                        "VernacExtend",
                        "e69ee13cf6db6610bc39e6e102606d11bf5d21ab"
                    ]
                },
                {
                    "command": [
                        "case H'0; auto.",
                        "VernacExtend",
                        "c95954a4912ccfdd6e4780b3eecd4f9a4fbca076"
                    ]
                },
                {
                    "command": [
                        "apply Rle_trans with (FtoRradix max); auto.",
                        "VernacExtend",
                        "c78a45796178fb8ea266bf8c168b0cef09403988"
                    ]
                },
                {
                    "command": [
                        "apply isMax_inv1 with (1 := isMax).",
                        "VernacExtend",
                        "2286feec4700c1d639962c6fcbec69cce4a92795"
                    ]
                },
                {
                    "command": [
                        "apply (ClosestMonotone b radix (FtoRradix max) y); auto.",
                        "VernacExtend",
                        "f91961a32e4be1b1e56419b3338b946a3b2cf6d4"
                    ]
                },
                {
                    "command": [
                        "apply (RoundedModeProjectorIdem b radix (Closest b radix)); auto.",
                        "VernacExtend",
                        "4609aa098ae73c2fafe5736a67c3a55183726b45"
                    ]
                },
                {
                    "command": [
                        "apply ClosestRoundedModeP with (precision := precision); auto.",
                        "VernacExtend",
                        "eb6d3ee24dd119beb307169797f1cdd709b3ec7c"
                    ]
                },
                {
                    "command": [
                        "case isMax; auto.",
                        "VernacExtend",
                        "102a8708ecc597f2433427ba8821127dd216c58b"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "ClosestErrorBound",
            "line_nb": 211,
            "steps": [
                {
                    "command": [
                        "intros p q x H H0 H1.",
                        "VernacExtend",
                        "63d7084d5c88fcc0a36a1f177d2b6d777cf2931c"
                    ]
                },
                {
                    "command": [
                        "apply Rle_trans with (Fulp b radix precision p * / 2%nat)%R.",
                        "VernacExtend",
                        "d0bbf6a71ddec3f2e21298921a401619173a9869"
                    ]
                },
                {
                    "command": [
                        "rewrite H1.",
                        "VernacExtend",
                        "91099f93f9346d13e3fc00550ba094ceac5333db"
                    ]
                },
                {
                    "command": [
                        "replace (Rabs (x - p)) with (2%nat * Rabs (x - p) * / 2%nat)%R; [ idtac | field; auto with real ].",
                        "VernacExtend",
                        "bb8454c227073d64b7178620792f2f08df41f1a9"
                    ]
                },
                {
                    "command": [
                        "apply Rmult_le_compat_r; auto with real.",
                        "VernacExtend",
                        "9a2f394fe0f213cd7249f9885afa1d71755e43b4"
                    ]
                },
                {
                    "command": [
                        "apply ClosestUlp; auto.",
                        "VernacExtend",
                        "a2cd86203367de47548eba9c063baef081498b1a"
                    ]
                },
                {
                    "command": [
                        "apply Rmult_le_compat_r.",
                        "VernacExtend",
                        "6c4c5a82dab802842919dd673f1978a3cb8cff73"
                    ]
                },
                {
                    "command": [
                        "apply Rlt_le.",
                        "VernacExtend",
                        "cdc4280500779f23bae235b94c24a4b2ea2921fe"
                    ]
                },
                {
                    "command": [
                        "apply Rinv_0_lt_compat; auto with real.",
                        "VernacExtend",
                        "4026f9923d214cb32a5e3a9b4c28c36a57ee2e20"
                    ]
                },
                {
                    "command": [
                        "unfold FtoRradix in |- *; apply FulpLe; auto.",
                        "VernacExtend",
                        "620a5cfbbc5677fee020fd737468c4e0f0c2d79d"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "ClosestErrorExp",
            "line_nb": 223,
            "steps": [
                {
                    "command": [
                        "intros p q x H H0 H1 H2; exists (Fnormalize radix b precision q).",
                        "VernacExtend",
                        "9bbce30caa2ba73b1eea799cb684d0024f0ad760"
                    ]
                },
                {
                    "command": [
                        "cut (Fcanonic radix b (Fnormalize radix b precision q)); [ intros C1 | apply FnormalizeCanonic; auto with arith ].",
                        "VernacExtend",
                        "b1b0774af1f7901d16526f91155f424808a68941"
                    ]
                },
                {
                    "command": [
                        "split.",
                        "VernacExtend",
                        "55abc140132bd88981001ac656020469a8d503eb"
                    ]
                },
                {
                    "command": [
                        "apply FcanonicBound with (radix := radix); auto.",
                        "VernacExtend",
                        "7ff66c1c77430eeda2d6b2110bd18def44854cf6"
                    ]
                },
                {
                    "command": [
                        "split.",
                        "VernacExtend",
                        "55abc140132bd88981001ac656020469a8d503eb"
                    ]
                },
                {
                    "command": [
                        "apply (FnormalizeCorrect radix); auto.",
                        "VernacExtend",
                        "67e4f2aeb9125665bdf70fc0bbbf83f3e2aa5de0"
                    ]
                },
                {
                    "command": [
                        "case C1; intros C2.",
                        "VernacExtend",
                        "0048ce2e1488d66ce1ee4357df42af322c6916df"
                    ]
                },
                {
                    "command": [
                        "apply Zle_trans with (Fexp p - precision)%Z; auto with zarith.",
                        "VernacExtend",
                        "9b584cb18b5a6e75e550174b5b2ac1d8c0a5fa88"
                    ]
                },
                {
                    "command": [
                        "apply Zplus_le_reg_l with (Z_of_nat precision).",
                        "VernacExtend",
                        "93857189a7014e1d377e39d2c090ac159edb7e6d"
                    ]
                },
                {
                    "command": [
                        "replace (precision + (Fexp p - precision))%Z with (Fexp p); [ idtac | ring ].",
                        "VernacExtend",
                        "1f76f3c528f7c53052a90013f528e2be654ade94"
                    ]
                },
                {
                    "command": [
                        "replace (precision + Fexp (Fnormalize radix b precision q))%Z with (Zsucc (Zpred precision + Fexp (Fnormalize radix b precision q))); [ idtac | unfold Zpred, Zsucc in |- *; ring ].",
                        "VernacExtend",
                        "c8754bd143b490ad3f586f63618f5d7980e9a47a"
                    ]
                },
                {
                    "command": [
                        "apply Zlt_le_succ.",
                        "VernacExtend",
                        "070de595889f014f0a173659377506422eb25080"
                    ]
                },
                {
                    "command": [
                        "apply Zlt_powerRZ with (IZR radix); auto with real zarith.",
                        "VernacExtend",
                        "2f9dd0951d952b8a318cd1050c8a2e66d5c490b6"
                    ]
                },
                {
                    "command": [
                        "rewrite powerRZ_add; auto with real zarith.",
                        "VernacExtend",
                        "464b630a39cda032263051881ad80da2fc959c8e"
                    ]
                },
                {
                    "command": [
                        "apply Rle_lt_trans with (Zabs (Fnum (Fnormalize radix b precision q)) * powerRZ radix (Fexp (Fnormalize radix b precision q)))%R.",
                        "VernacExtend",
                        "d5334f3b9284b16b31f752e46d47ef08aa62338f"
                    ]
                },
                {
                    "command": [
                        "apply Rmult_le_compat_r; auto with real zarith.",
                        "VernacExtend",
                        "ab12f06210771823661c627ab200f2c736704e67"
                    ]
                },
                {
                    "command": [
                        "replace (Zpred precision) with (Z_of_nat (pred (digit radix (Fnum (Fnormalize radix b precision q))))).",
                        "VernacExtend",
                        "91aa79207c3a9f810457202e2ec9d9d2f3f356e6"
                    ]
                },
                {
                    "command": [
                        "rewrite <- Zpower_nat_Z_powerRZ.",
                        "VernacExtend",
                        "df78cf96dfceed621bb634ea03f6a5ba1d47b397"
                    ]
                },
                {
                    "command": [
                        "apply Rle_IZR; apply digitLess; auto with real zarith.",
                        "VernacExtend",
                        "c44f4a7d85c787cd530dd8d4d161998dffa2b641"
                    ]
                },
                {
                    "command": [
                        "change (~ is_Fzero (Fnormalize radix b precision q)) in |- *; apply (FnormalNotZero radix b); auto with float.",
                        "VernacExtend",
                        "b30f2ef22d6075262ea299c2a2d13f60dddc36f5"
                    ]
                },
                {
                    "command": [
                        "change (Z_of_nat (pred (Fdigit radix (Fnormalize radix b precision q))) = Zpred precision) in |- *.",
                        "VernacExtend",
                        "6398d75956c425b636ede74e0bd09e1f0d24ea1c"
                    ]
                },
                {
                    "command": [
                        "rewrite FnormalPrecision with (precision := precision) (4 := C2); auto with zarith arith.",
                        "VernacExtend",
                        "0e5f11b3b437986b22791aebcf24df4070d08bc7"
                    ]
                },
                {
                    "command": [
                        "apply inj_pred; auto with arith.",
                        "VernacExtend",
                        "e7c54e2486ebff96c96b69f77ee1d7656ba042df"
                    ]
                },
                {
                    "command": [
                        "change (Fabs (Fnormalize radix b precision q) < powerRZ radix (Fexp p))%R in |- *.",
                        "VernacExtend",
                        "51b566fe6ddd406f5bfc2ee025a70e21b534f495"
                    ]
                },
                {
                    "command": [
                        "rewrite (Fabs_correct radix); auto; rewrite (FnormalizeCorrect radix); auto.",
                        "VernacExtend",
                        "b394c5402f4b29305b36f1f3e9837d95e6e7fb87"
                    ]
                },
                {
                    "command": [
                        "apply Rle_lt_trans with (Float 1%nat (Fexp p) * / 2%nat)%R.",
                        "VernacExtend",
                        "7732430292895a93a4d656b213e7e0183611b95d"
                    ]
                },
                {
                    "command": [
                        "apply ClosestErrorBound with (x := x); auto.",
                        "VernacExtend",
                        "49ad7faac176e52311f59e248c68376641a947cc"
                    ]
                },
                {
                    "command": [
                        "unfold FtoRradix in |- *; unfold FtoR in |- *; simpl in |- *.",
                        "VernacExtend",
                        "8c0835d31a3f923ae6ce1e9ef3140f1250ad69a6"
                    ]
                },
                {
                    "command": [
                        "pattern (powerRZ radix (Fexp p)) at 2 in |- *; replace (powerRZ radix (Fexp p)) with (powerRZ radix (Fexp p) * 1)%R; [ idtac | ring ].",
                        "VernacExtend",
                        "319e101e0bc61266b9dd4a8771758ecb4d3327dc"
                    ]
                },
                {
                    "command": [
                        "replace (1 * powerRZ radix (Fexp p))%R with (powerRZ radix (Fexp p)); [ apply Rmult_lt_compat_l | ring ].",
                        "VernacExtend",
                        "7755d4369c629f490cf7bae3c33f2f69be1846cb"
                    ]
                },
                {
                    "command": [
                        "apply powerRZ_lt; auto with arith real.",
                        "VernacExtend",
                        "de27eb1a0fbb5aa6c805c5620ff96f45f71a8c19"
                    ]
                },
                {
                    "command": [
                        "pattern 1%R at 3 in |- *; replace 1%R with (/ 1)%R.",
                        "VernacExtend",
                        "0697c60b45edbec834f0d9380ddc9691926b03f7"
                    ]
                },
                {
                    "command": [
                        "apply Rinv_1_lt_contravar; auto with real.",
                        "VernacExtend",
                        "de37d24a2cd385c2c2c8be19aba68b9956fff3c2"
                    ]
                },
                {
                    "command": [
                        "replace 2%R with (INR 2); auto with real arith.",
                        "VernacExtend",
                        "38f8d54094e5ad3f80db7d51d819a92f798751da"
                    ]
                },
                {
                    "command": [
                        "apply Zle_trans with (- dExp b)%Z; auto with float zarith.",
                        "VernacExtend",
                        "1234c94bfdf1152a86184b1f4a64945abc75af64"
                    ]
                },
                {
                    "command": [
                        "case C2.",
                        "VernacExtend",
                        "d7c21e494bd9d3a1db5d3e565cf88b20b988f402"
                    ]
                },
                {
                    "command": [
                        "intros H3 (H4, H5); rewrite H4; auto with zarith.",
                        "VernacExtend",
                        "eec7f67501b2ba6bf396ac2a176f9000ccda6d25"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "ClosestErrorBoundNormal",
            "line_nb": 304,
            "steps": [
                {
                    "command": [
                        "intros x p H H1.",
                        "VernacExtend",
                        "500107e65129b5d42f051a2bf16757f204f12a93"
                    ]
                },
                {
                    "command": [
                        "apply Rle_trans with (Rabs (FtoRradix p) * (/ 2%nat * (radix * / Zpos (vNum b))))%R; [ apply ClosestErrorBoundNormal_aux; auto | right ].",
                        "VernacExtend",
                        "a03adc6137c9b215906832cbb60091f20d0efcb8"
                    ]
                },
                {
                    "command": [
                        "replace (powerRZ radix (Zsucc (- precision))) with (radix * / Zpos (vNum b))%R; auto with real.",
                        "VernacExtend",
                        "7d692b08df7eacf1e15f625f3f5606999fb9c863"
                    ]
                },
                {
                    "command": [
                        "rewrite pGivesBound; rewrite Zpower_nat_Z_powerRZ.",
                        "VernacExtend",
                        "78f317e2f786810623466c82c4e2a870d84e2eec"
                    ]
                },
                {
                    "command": [
                        "rewrite Rinv_powerRZ; auto with real zarith.",
                        "VernacExtend",
                        "965bb00872f7cc6b3eb3731ed09a0c1da3849a4f"
                    ]
                },
                {
                    "command": [
                        "rewrite powerRZ_Zs; auto with real zarith.",
                        "VernacExtend",
                        "1931a3978b6974020abfa1402ab4426f76878eb8"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "FpredUlpPos",
            "line_nb": 365,
            "steps": [
                {
                    "command": [
                        "intros x Hx H.",
                        "VernacExtend",
                        "3010a4964b13a8a36a4887ebdb7abf6656f632bb"
                    ]
                },
                {
                    "command": [
                        "apply sym_eq; apply Rplus_eq_reg_l with (- FtoRradix (FPred b radix precision x))%R.",
                        "VernacExtend",
                        "0956c3045c46823c751036aa5f55eff1880373a1"
                    ]
                },
                {
                    "command": [
                        "apply trans_eq with (Fulp b radix precision (FPred b radix precision x)); [ idtac | ring ].",
                        "VernacExtend",
                        "44f5a8ad6ab8db62358e5eb28dc7c5544443f243"
                    ]
                },
                {
                    "command": [
                        "apply trans_eq with (FtoRradix x - FtoRradix (FPred b radix precision x))%R; [ ring | idtac ].",
                        "VernacExtend",
                        "ef3ed986d132745848bd57c7a1396570a53f18f1"
                    ]
                },
                {
                    "command": [
                        "unfold FtoRradix in |- *; rewrite <- Fminus_correct; auto with zarith; fold FtoRradix in |- *.",
                        "VernacExtend",
                        "0ef40f95bd7af517690ffd24a7e4bad35c07de9b"
                    ]
                },
                {
                    "command": [
                        "pattern x at 1 in |- *; replace x with (FSucc b radix precision (FPred b radix precision x)); [ idtac | apply FSucPred; auto with zarith arith ].",
                        "VernacExtend",
                        "1dd009750c3658c209db7981754661739034a6ba"
                    ]
                },
                {
                    "command": [
                        "unfold FtoRradix in |- *; apply FSuccUlpPos; auto with zarith arith.",
                        "VernacExtend",
                        "e2b89912e2d6283f1e98a82a7ce1d8a56725d705"
                    ]
                },
                {
                    "command": [
                        "apply FPredCanonic; auto with zarith arith.",
                        "VernacExtend",
                        "0946762f0f3f4820d2f82523073997bcc386418e"
                    ]
                },
                {
                    "command": [
                        "apply R0RltRlePred; auto with zarith arith real.",
                        "VernacExtend",
                        "12456d587bf0dc3ccc30dce23add73acbebb3866"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        }
    ]
}