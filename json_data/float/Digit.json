{
    "filename": "Digit.v",
    "coq_project": "float",
    "vernac_cmds": [
        [
            "Require Export ZArithRing.",
            "VernacRequire",
            "59aabf99691e79701675e8bdab34f7af356a1cd6"
        ],
        [
            "Require Export Omega.",
            "VernacRequire",
            "0481b56b468f7aa7f5517bbdc71f6985bb9f8b59"
        ],
        [
            "Require Export Faux.",
            "VernacRequire",
            "459de2f16fc1a392de294bdd3abd5d443f6f1c0b"
        ],
        [
            "Section Pdigit.",
            "VernacBeginSection",
            "457f79e973f0117f1f00d91a5c90cbac7b6529df"
        ],
        [
            "Variable n : Z.",
            "VernacAssumption",
            "63bfc225d30d19f125927fd7510fe612af680f0d"
        ],
        [
            "Hypothesis nMoreThan1 : (1 < n)%Z.",
            "VernacAssumption",
            "0c6ba6fc45f40599cbbc6d12750ea6e395af904c"
        ],
        [
            "Let nMoreThanOne := Zlt_1_O _ (Zlt_le_weak _ _ nMoreThan1).",
            "VernacDefinition",
            "8a102ec9f479c71da745604c336e945d42e77a92"
        ],
        [
            "Hint Resolve nMoreThanOne: zarith.",
            "VernacHints",
            "40afbd17656dcf30ee3c47c285318f248ce441b5"
        ],
        [
            "Theorem Zpower_nat_less : forall q : nat, (0 < Zpower_nat n q)%Z.",
            "VernacStartTheoremProof",
            "aa0a7868b8d8bbf56cc84c67039a4ec383c73004"
        ],
        [
            "intros q; elim q; simpl in |- *; auto with zarith.",
            "VernacExtend",
            "5d253b136967c6ae3071dcb7a1d76bff41d369e0"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Hint Resolve Zpower_nat_less: zarith.",
            "VernacHints",
            "5a17b4513b3256123161ca75d01525e50e97eb12"
        ],
        [
            "Theorem Zpower_nat_monotone_S : forall p : nat, (Zpower_nat n p < Zpower_nat n (S p))%Z.",
            "VernacStartTheoremProof",
            "f78f8c18fbd7b5a9ae034b662acb7507bf3a167f"
        ],
        [
            "intros p; rewrite <- (Zmult_1_l (Zpower_nat n p)); replace (S p) with (1 + p); [ rewrite Zpower_nat_is_exp | auto with zarith ].",
            "VernacExtend",
            "da6caae97271f753bf7abe0b511793262db867eb"
        ],
        [
            "rewrite Zpower_nat_1; auto with zarith.",
            "VernacExtend",
            "e9320a7ea3adf68ff67766aff884f3fea30c1c11"
        ],
        [
            "apply Zmult_gt_0_lt_compat_r; auto with zarith.",
            "VernacExtend",
            "591acc3e148a356d4d326ded6bdc45878b78dc06"
        ],
        [
            "apply Zlt_gt; auto with zarith.",
            "VernacExtend",
            "e4740f81454b5bebf9859686e2a5cd74c0d86c71"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Theorem Zpower_nat_monotone_lt : forall p q : nat, p < q -> (Zpower_nat n p < Zpower_nat n q)%Z.",
            "VernacStartTheoremProof",
            "741d8529cd36164f598260ba9343afddf122562b"
        ],
        [
            "intros p q H'; elim H'; simpl in |- *; auto.",
            "VernacExtend",
            "70844bbd1e21cffaaf8251e92519283938951269"
        ],
        [
            "apply Zpower_nat_monotone_S.",
            "VernacExtend",
            "0bad07f6dcc0e6acc647ef172eaea8d40b8ca6de"
        ],
        [
            "intros m H H0; apply Zlt_trans with (1 := H0).",
            "VernacExtend",
            "e10db94b6a17d41a80189ce3d02feef99be6e405"
        ],
        [
            "apply Zpower_nat_monotone_S.",
            "VernacExtend",
            "0bad07f6dcc0e6acc647ef172eaea8d40b8ca6de"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Hint Resolve Zpower_nat_monotone_lt: zarith.",
            "VernacHints",
            "c0bf1251175fdccf39964ebe8e3ee01de0c6b4ae"
        ],
        [
            "Theorem Zpower_nat_anti_monotone_lt : forall p q : nat, (Zpower_nat n p < Zpower_nat n q)%Z -> p < q.",
            "VernacStartTheoremProof",
            "927219449f024bdb2fbd17e9a661b491e3bec360"
        ],
        [
            "intros p q H'.",
            "VernacExtend",
            "6d0165163a2a8e407c09482ce517f2835b5de359"
        ],
        [
            "case (le_or_lt q p); auto; (intros H'1; generalize H'; case H'1).",
            "VernacExtend",
            "78393b41a9d96e89c8c2b1f47dc2c586ee5ae5ca"
        ],
        [
            "intros H'0; Contradict H'0; auto with zarith.",
            "VernacExtend",
            "6494dcc7f61dbb4f38bb4bcc610f5180e8f713ed"
        ],
        [
            "intros m H'0 H'2; Contradict H'2; auto with zarith.",
            "VernacExtend",
            "b659a64f6d82680776c5b039cbfb9ee8062ce33e"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Theorem Zpower_nat_monotone_le : forall p q : nat, p <= q -> (Zpower_nat n p <= Zpower_nat n q)%Z.",
            "VernacStartTheoremProof",
            "177f2ddfc07b029f6cb79e16c2109f74bbaddc80"
        ],
        [
            "intros p q H'; case (le_lt_or_eq _ _ H'); auto with zarith.",
            "VernacExtend",
            "ca949c3ae7fec65dc21ada990654b1c5bef14420"
        ],
        [
            "intros H1; rewrite H1; auto with zarith.",
            "VernacExtend",
            "085acfae5fe4e3652e40f7f8e83128ec07acf7d9"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Theorem Zpower_nat_anti_monotone_le : forall p q : nat, (Zpower_nat n p <= Zpower_nat n q)%Z -> p <= q.",
            "VernacStartTheoremProof",
            "784ec2be4664268d2b24e60994ad449a9fc75dc7"
        ],
        [
            "intros p q H'; case (le_or_lt p q); intros H'0; auto with arith.",
            "VernacExtend",
            "1a9bf6b2969256fc31dcdb628a07dc9a152c3fc4"
        ],
        [
            "Contradict H'; auto with zarith.",
            "VernacExtend",
            "136e9f49598ca3339fe6c0c792596c4c09418a91"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Theorem Zpower_nat_anti_eq : forall p q : nat, Zpower_nat n p = Zpower_nat n q -> p = q.",
            "VernacStartTheoremProof",
            "f3088a1ae35ec60d6a4e6f4a3a56d65880c4fcb6"
        ],
        [
            "intros p q H'; apply le_antisym; apply Zpower_nat_anti_monotone_le; rewrite H'; auto with zarith.",
            "VernacExtend",
            "ae48cc819f15e155b751bcf55402935c85b4de7f"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Fixpoint digitAux (v r : Z) (q : positive) {struct q} : nat := match q with | xH => 0 | xI q' => match (n * r)%Z with | r' => match (r ?= v)%Z with | Datatypes.Gt => 0 | _ => S (digitAux v r' q') end end | xO q' => match (n * r)%Z with | r' => match (r ?= v)%Z with | Datatypes.Gt => 0 | _ => S (digitAux v r' q') end end end.",
            "VernacFixpoint",
            "a030b9e0f6e5e581b6b5fbde741a16a80ce28eb8"
        ],
        [
            "Definition digit (q : Z) := match q with | Z0 => 0 | Zpos q' => digitAux (Zabs q) 1 (xO q') | Zneg q' => digitAux (Zabs q) 1 (xO q') end.",
            "VernacDefinition",
            "a1bcd2fbe3165887a128647667cc2b0e34521866"
        ],
        [
            "Hint Unfold digit.",
            "VernacHints",
            "c6e44aa50765ed009430bd9aed21a80e531c8271"
        ],
        [
            "Theorem digitAux1 : forall p r, (Zpower_nat n (S p) * r)%Z = (Zpower_nat n p * (n * r))%Z.",
            "VernacStartTheoremProof",
            "84ea92227ad02588a3d00c8cfa54c0a7eb03e40b"
        ],
        [
            "intros p r; replace (S p) with (1 + p); [ rewrite Zpower_nat_is_exp | auto with arith ].",
            "VernacExtend",
            "e6ab93ac4037f33cea0c6d99aa13890d23a81ea2"
        ],
        [
            "rewrite Zpower_nat_1; ring.",
            "VernacExtend",
            "dd73d3c12da24a987d67ec535c2530a998925818"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Theorem Zcompare_correct : forall p q : Z, match (p ?= q)%Z with | Datatypes.Gt => (q < p)%Z | Datatypes.Lt => (p < q)%Z | Datatypes.Eq => p = q end.",
            "VernacStartTheoremProof",
            "abb6ee7fdc2f4cfef7c6682805ce54cc15bf02f6"
        ],
        [
            "intros p q; unfold Zlt in |- *; generalize (Zcompare_EGAL p q); (CaseEq (p ?= q)%Z; simpl in |- *; auto).",
            "VernacExtend",
            "237a65f33ae6b27252584ff95cb91a28aaf80ac1"
        ],
        [
            "intros H H0; case (Zcompare_Gt_Lt_antisym p q); auto.",
            "VernacExtend",
            "ee1bdeb562ef0684b6772258f36e9a28c66f8376"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Theorem digitAuxLess : forall (v r : Z) (q : positive), match digitAux v r q with | S r' => (Zpower_nat n r' * r <= v)%Z | O => True end.",
            "VernacStartTheoremProof",
            "f910354d5122a3b0d7e0a3b3b6357bee1c745ced"
        ],
        [
            "intros v r q; generalize r; elim q; clear r q; simpl in |- *; auto.",
            "VernacExtend",
            "aeac87c0cdd00b5a08bb26da3dea5efaaa4c2cce"
        ],
        [
            "intros q' Rec r; generalize (Zcompare_correct r v); case (r ?= v)%Z; auto.",
            "VernacExtend",
            "3577a4bf1cf040624d4c2b370de650af6c3c3033"
        ],
        [
            "intros H1; generalize (Rec (n * r)%Z); case (digitAux v (n * r) q').",
            "VernacExtend",
            "d677028be5e0e09a97fa1604807e18fc9a6f617e"
        ],
        [
            "intros; rewrite H1; rewrite Zpower_nat_O; auto with zarith.",
            "VernacExtend",
            "850a90b1e6a7d429c3e7418080b91ffb6054cb3e"
        ],
        [
            "intros r'; rewrite digitAux1; auto.",
            "VernacExtend",
            "e8c2bf3d0caa5557400ba1b7c3bbc52229730c80"
        ],
        [
            "intros H1; generalize (Rec (n * r)%Z); case (digitAux v (n * r) q').",
            "VernacExtend",
            "d677028be5e0e09a97fa1604807e18fc9a6f617e"
        ],
        [
            "intros; rewrite Zpower_nat_O; auto with zarith.",
            "VernacExtend",
            "25b6126bda462d4cc5cf9977bfd4eec4cfe7236f"
        ],
        [
            "apply Zle_trans with (m := r); auto with zarith.",
            "VernacExtend",
            "3b57e4ed31f0c3ba905b3f0253d750818860e43b"
        ],
        [
            "intros r'; rewrite digitAux1; auto.",
            "VernacExtend",
            "e8c2bf3d0caa5557400ba1b7c3bbc52229730c80"
        ],
        [
            "intros q' Rec r; generalize (Zcompare_correct r v); case (r ?= v)%Z; auto.",
            "VernacExtend",
            "3577a4bf1cf040624d4c2b370de650af6c3c3033"
        ],
        [
            "intros H1; generalize (Rec (n * r)%Z); case (digitAux v (n * r) q').",
            "VernacExtend",
            "d677028be5e0e09a97fa1604807e18fc9a6f617e"
        ],
        [
            "intros; rewrite H1; rewrite Zpower_nat_O; auto with zarith.",
            "VernacExtend",
            "850a90b1e6a7d429c3e7418080b91ffb6054cb3e"
        ],
        [
            "intros r'; rewrite digitAux1; auto.",
            "VernacExtend",
            "e8c2bf3d0caa5557400ba1b7c3bbc52229730c80"
        ],
        [
            "intros H1; generalize (Rec (n * r)%Z); case (digitAux v (n * r) q').",
            "VernacExtend",
            "d677028be5e0e09a97fa1604807e18fc9a6f617e"
        ],
        [
            "intros; rewrite Zpower_nat_O; auto with zarith.",
            "VernacExtend",
            "25b6126bda462d4cc5cf9977bfd4eec4cfe7236f"
        ],
        [
            "apply Zle_trans with (m := r); auto with zarith.",
            "VernacExtend",
            "3b57e4ed31f0c3ba905b3f0253d750818860e43b"
        ],
        [
            "intros r'; rewrite digitAux1; auto.",
            "VernacExtend",
            "e8c2bf3d0caa5557400ba1b7c3bbc52229730c80"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Theorem digitLess : forall q : Z, q <> 0%Z -> (Zpower_nat n (pred (digit q)) <= Zabs q)%Z.",
            "VernacStartTheoremProof",
            "462b0a468c237b132732ca03e8f70fd6a8207982"
        ],
        [
            "intros q; case q.",
            "VernacExtend",
            "d3483bd0a9f2417d4ebcdd77f477a91e6c7cf15b"
        ],
        [
            "intros H; Contradict H; auto with zarith.",
            "VernacExtend",
            "875c69965d1462aa9314a4b4fe5553a393f8e2b5"
        ],
        [
            "intros p H; unfold digit in |- *; generalize (digitAuxLess (Zabs (Zpos p)) 1 (xO p)); case (digitAux (Zabs (Zpos p)) 1 (xO p)); simpl in |- *; auto with zarith.",
            "VernacExtend",
            "ee572b74dbc915367a8d5203c99e4bcabee149c7"
        ],
        [
            "intros p H; unfold digit in |- *; generalize (digitAuxLess (Zabs (Zneg p)) 1 (xO p)); case (digitAux (Zabs (Zneg p)) 1 (xO p)); simpl in |- *; auto with zarith.",
            "VernacExtend",
            "b8524cb8b54f165d679e2a769a77f8567688d94a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Hint Resolve digitLess: zarith.",
            "VernacHints",
            "27ad3074c3a3c0181fee8e6bd53279bccfbc7b39"
        ],
        [
            "Hint Resolve Zmult_gt_0_lt_compat_r Zmult_gt_0_lt_compat_l: zarith.",
            "VernacHints",
            "9cb6395b4bbf9b434ad19a31fedb1537f1e1f13f"
        ],
        [
            "Fixpoint pos_length (p : positive) : nat := match p with | xH => 0 | xO p' => S (pos_length p') | xI p' => S (pos_length p') end.",
            "VernacFixpoint",
            "c2d916bc2104b246ae80c7badb78d0cf99de4c30"
        ],
        [
            "Theorem digitAuxMore : forall (v r : Z) (q : positive), (0 < r)%Z -> (v < Zpower_nat n (pos_length q) * r)%Z -> (v < Zpower_nat n (digitAux v r q) * r)%Z.",
            "VernacStartTheoremProof",
            "3d644a103bab5d6f84d96f7415144e16782f522e"
        ],
        [
            "intros v r q; generalize r; elim q; clear r q; simpl in |- *.",
            "VernacExtend",
            "69194122cf75b458cd7a380c7763c0e667ce28b4"
        ],
        [
            "intros p Rec r Hr; generalize (Zcompare_correct r v); case (r ?= v)%Z; auto.",
            "VernacExtend",
            "34aa2d34fe49288786f5ad486c1683acfb2b6ce6"
        ],
        [
            "intros H1 H2; rewrite <- H1.",
            "VernacExtend",
            "e0bef73fe8afa1455fcb9eb48bed0c60fa0d393e"
        ],
        [
            "apply Zle_lt_trans with (Zpower_nat n 0 * r)%Z; auto with zarith arith.",
            "VernacExtend",
            "cfb2015922db772249e626e2ec020c4089bd6850"
        ],
        [
            "rewrite Zpower_nat_O; rewrite Zmult_1_l; auto with zarith.",
            "VernacExtend",
            "b3b3956f92446ea984af534c4fa8c78450328bf1"
        ],
        [
            "intros H1 H2; rewrite digitAux1.",
            "VernacExtend",
            "07d55fae5122cf256586aba327a14550d133940d"
        ],
        [
            "apply Rec.",
            "VernacExtend",
            "42eaadfc190d4cae88c7b898227450ba56587e9b"
        ],
        [
            "apply Zlt_mult_ZERO; auto with zarith.",
            "VernacExtend",
            "3de008be339dd6ed48a5bb4955266076f8ea7675"
        ],
        [
            "rewrite <- digitAux1; auto.",
            "VernacExtend",
            "491e89f9c86a950fa9ab71557121b2ce84e61703"
        ],
        [
            "rewrite Zpower_nat_O; rewrite Zmult_1_l; auto with zarith.",
            "VernacExtend",
            "b3b3956f92446ea984af534c4fa8c78450328bf1"
        ],
        [
            "intros p Rec r Hr; generalize (Zcompare_correct r v); case (r ?= v)%Z; auto.",
            "VernacExtend",
            "34aa2d34fe49288786f5ad486c1683acfb2b6ce6"
        ],
        [
            "intros H1 H2; rewrite <- H1.",
            "VernacExtend",
            "e0bef73fe8afa1455fcb9eb48bed0c60fa0d393e"
        ],
        [
            "apply Zle_lt_trans with (Zpower_nat n 0 * r)%Z; auto with zarith arith.",
            "VernacExtend",
            "cfb2015922db772249e626e2ec020c4089bd6850"
        ],
        [
            "rewrite Zpower_nat_O; rewrite Zmult_1_l; auto with zarith.",
            "VernacExtend",
            "b3b3956f92446ea984af534c4fa8c78450328bf1"
        ],
        [
            "intros H1 H2; rewrite digitAux1.",
            "VernacExtend",
            "07d55fae5122cf256586aba327a14550d133940d"
        ],
        [
            "apply Rec.",
            "VernacExtend",
            "42eaadfc190d4cae88c7b898227450ba56587e9b"
        ],
        [
            "apply Zlt_mult_ZERO; auto with zarith.",
            "VernacExtend",
            "3de008be339dd6ed48a5bb4955266076f8ea7675"
        ],
        [
            "rewrite <- digitAux1; auto.",
            "VernacExtend",
            "491e89f9c86a950fa9ab71557121b2ce84e61703"
        ],
        [
            "rewrite Zpower_nat_O; rewrite Zmult_1_l; auto with zarith.",
            "VernacExtend",
            "b3b3956f92446ea984af534c4fa8c78450328bf1"
        ],
        [
            "auto.",
            "VernacExtend",
            "1f09da0addd069b3b65326f8c71967acc1e985af"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Theorem pos_length_pow : forall p : positive, (Zpos p < Zpower_nat n (S (pos_length p)))%Z.",
            "VernacStartTheoremProof",
            "26fc8d3f4330ba4e11c72a3be983190aa90ce732"
        ],
        [
            "intros p; elim p; simpl in |- *; auto.",
            "VernacExtend",
            "02a9974c9e43b8cd76774dcdd246d768e4b8c881"
        ],
        [
            "intros p0 H; rewrite Zpos_xI.",
            "VernacExtend",
            "1687d24a5564b54489a2a9f02853e950c0c020a3"
        ],
        [
            "apply Zlt_le_trans with (2 * (n * Zpower_nat n (pos_length p0)))%Z; auto with zarith.",
            "VernacExtend",
            "d8d63b10f8463b6fe826808d415b7828b5099ae6"
        ],
        [
            "intros p0 H; rewrite Zpos_xO.",
            "VernacExtend",
            "b20190d8a80d7c7311233b8c6d0df2126daacf0e"
        ],
        [
            "apply Zlt_le_trans with (2 * (n * Zpower_nat n (pos_length p0)))%Z; auto with zarith.",
            "VernacExtend",
            "d8d63b10f8463b6fe826808d415b7828b5099ae6"
        ],
        [
            "auto with zarith.",
            "VernacExtend",
            "23f42fd3236dcece4a40b3a666dce57fea69a9c0"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Theorem digitMore : forall q : Z, (Zabs q < Zpower_nat n (digit q))%Z.",
            "VernacStartTheoremProof",
            "97bb9b4501bc2541779676a858373fc66d6fc25c"
        ],
        [
            "intros q; case q.",
            "VernacExtend",
            "d3483bd0a9f2417d4ebcdd77f477a91e6c7cf15b"
        ],
        [
            "easy.",
            "VernacExtend",
            "ef1368621ae14ed4e378e6e1c58fbee46db9a962"
        ],
        [
            "intros q'; rewrite <- (Zmult_1_r (Zpower_nat n (digit (Zpos q')))).",
            "VernacExtend",
            "b728f75e7f68687bcc19d9f91c47ae2a7ac35dc6"
        ],
        [
            "unfold digit in |- *; apply digitAuxMore; auto with zarith.",
            "VernacExtend",
            "d2df0aada3740e32e1494c1444b10e7dd7822a67"
        ],
        [
            "rewrite Zmult_1_r.",
            "VernacExtend",
            "417376d82024400c741f6570f03b2437a77ee661"
        ],
        [
            "simpl in |- *; apply pos_length_pow.",
            "VernacExtend",
            "b35ce7715ae6e6f534a488e5f1fed127cba67789"
        ],
        [
            "intros q'; rewrite <- (Zmult_1_r (Zpower_nat n (digit (Zneg q')))).",
            "VernacExtend",
            "0560710d42138786dca20b27576c3ab44925de04"
        ],
        [
            "unfold digit in |- *; apply digitAuxMore; auto with zarith.",
            "VernacExtend",
            "d2df0aada3740e32e1494c1444b10e7dd7822a67"
        ],
        [
            "rewrite Zmult_1_r.",
            "VernacExtend",
            "417376d82024400c741f6570f03b2437a77ee661"
        ],
        [
            "simpl in |- *; apply pos_length_pow.",
            "VernacExtend",
            "b35ce7715ae6e6f534a488e5f1fed127cba67789"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Hint Resolve digitMore: zarith.",
            "VernacHints",
            "fdab91696e67af2f872da0a814235c7ad7820a33"
        ],
        [
            "Theorem digitInv : forall (q : Z) (r : nat), (Zpower_nat n (pred r) <= Zabs q)%Z -> (Zabs q < Zpower_nat n r)%Z -> digit q = r.",
            "VernacStartTheoremProof",
            "2b407d9f474d5e04b8e3d39ea1ecfd4a9cd15cbf"
        ],
        [
            "intros q r H' H'0; case (le_or_lt (digit q) r).",
            "VernacExtend",
            "e635b932fe4150ff0c2a677a9ef8b5875b64016c"
        ],
        [
            "intros H'1; case (le_lt_or_eq _ _ H'1); auto; intros H'2.",
            "VernacExtend",
            "1d9805e861c494130ef8bbd7edbd8890bc018278"
        ],
        [
            "absurd (Zabs q < Zpower_nat n (digit q))%Z; auto with zarith.",
            "VernacExtend",
            "003ef0ed377dc4654e38de2ee7580caf6a2daed5"
        ],
        [
            "apply Zle_not_lt; auto with zarith.",
            "VernacExtend",
            "13739daa2c3c9c8e9788299bf37d232755bbfff8"
        ],
        [
            "apply Zle_trans with (m := Zpower_nat n (pred r)); auto with zarith.",
            "VernacExtend",
            "65a91be38e72fb05bdfad02e55db1e93bd77c3a1"
        ],
        [
            "apply Zpower_nat_monotone_le.",
            "VernacExtend",
            "e15cdf56570742cbce1051907333ec9b19a04ef1"
        ],
        [
            "generalize H'2; case r; auto with arith.",
            "VernacExtend",
            "c9386769ac5de352a6bab40c722f09a29ad4d397"
        ],
        [
            "intros H'1.",
            "VernacExtend",
            "27d12cfd315031f2731cee2bf5ecf81dd7f6b369"
        ],
        [
            "absurd (Zpower_nat n (pred (digit q)) <= Zabs q)%Z; auto with zarith.",
            "VernacExtend",
            "f76426745621d5f56aa709390a46f06906e90bbb"
        ],
        [
            "apply Zlt_not_le; auto with zarith.",
            "VernacExtend",
            "66f5b527554e57c2045f16e1bdff1f1f75e29dd3"
        ],
        [
            "apply Zlt_le_trans with (m := Zpower_nat n r); auto.",
            "VernacExtend",
            "86cc803954e3f42ac814a2481356e487011db2c4"
        ],
        [
            "apply Zpower_nat_monotone_le.",
            "VernacExtend",
            "e15cdf56570742cbce1051907333ec9b19a04ef1"
        ],
        [
            "generalize H'1; case (digit q); auto with arith.",
            "VernacExtend",
            "03979a1c6162528200eee7c8a95fc1d38cf01b79"
        ],
        [
            "apply digitLess; auto with zarith.",
            "VernacExtend",
            "1855cad479b16488cd77feab31296bf1863c2476"
        ],
        [
            "generalize H'1; case q; unfold digit in |- *; intros tmp; intros; red in |- *; intros; try discriminate; Contradict tmp; auto with arith.",
            "VernacExtend",
            "bd25824a11e5b6542eafeb0b5312c5eaafaa2a20"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Theorem digitO : digit 0 = 0.",
            "VernacStartTheoremProof",
            "c7326e847f6a33d0412035b3989cfc4c2bfeed39"
        ],
        [
            "unfold digit in |- *; simpl in |- *; auto with arith.",
            "VernacExtend",
            "1bb7ce4d9c3275eb03046ca73489b73821247642"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Theorem digit1 : digit 1 = 1.",
            "VernacStartTheoremProof",
            "43da0bdbc86a8fcd13237e13c664a0384fcdcdb3"
        ],
        [
            "unfold digit in |- *; simpl in |- *; auto.",
            "VernacExtend",
            "e458e797a409e69d0a4bd6e0eb1d40223d362ccd"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Theorem digit_monotone : forall p q : Z, (Zabs p <= Zabs q)%Z -> digit p <= digit q.",
            "VernacStartTheoremProof",
            "d9b5fea5ad390ba42cf916a7343d3008616af1b8"
        ],
        [
            "intros p q H; case (le_or_lt (digit p) (digit q)); auto; intros H1; Contradict H.",
            "VernacExtend",
            "aa06e72b1aa2bfa37f63a77f1a48ac2c52225145"
        ],
        [
            "apply Zlt_not_le.",
            "VernacExtend",
            "f50dda740686f871b63754e02667d404d580866b"
        ],
        [
            "cut (p <> 0%Z); [ intros H2 | idtac ].",
            "VernacExtend",
            "1fce9e101d1dac62c64fe2bda8f5a50a4aaae624"
        ],
        [
            "apply Zlt_le_trans with (2 := digitLess p H2).",
            "VernacExtend",
            "760434edba9e4b6a16ee26fb1777c7cde619e8f5"
        ],
        [
            "cut (digit q <= pred (digit p)); [ intros H3 | idtac ].",
            "VernacExtend",
            "164866f8f94ef27959f8b24f878abd97eda33341"
        ],
        [
            "apply Zlt_le_trans with (2 := Zpower_nat_monotone_le _ _ H3); auto with zarith.",
            "VernacExtend",
            "2e32d473c4e5673f29b6cffba59cd777e8390376"
        ],
        [
            "generalize H1; case (digit p); simpl in |- *; auto with arith.",
            "VernacExtend",
            "28f3965badd7bdd97c1993ed29892f20aed5e35f"
        ],
        [
            "generalize H1; case p; simpl in |- *; intros tmp; intros; red in |- *; intros; try discriminate; Contradict tmp; auto with arith.",
            "VernacExtend",
            "7e75e52e1fcea57d68178b9ffa548f7daee9544e"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Hint Resolve digit_monotone: arith.",
            "VernacHints",
            "eb7e90fcb432dd45d67d87ddb52877c401da16f0"
        ],
        [
            "Theorem digitNotZero : forall q : Z, q <> 0%Z -> 0 < digit q.",
            "VernacStartTheoremProof",
            "780d39e5dc77f00a01b94a47f906701372e1a17e"
        ],
        [
            "intros q H'.",
            "VernacExtend",
            "d7c8d60a6a77283fec099c770b0006837bcbb4d8"
        ],
        [
            "apply lt_le_trans with (m := digit 1); auto with zarith.",
            "VernacExtend",
            "cf5c090bedbbc1020f7f5ea5c6469e11da81d669"
        ],
        [
            "apply digit_monotone.",
            "VernacExtend",
            "1883a904da1040d8f48a3259f45281b1c5686b0f"
        ],
        [
            "generalize H'; case q; simpl in |- *; auto with zarith; intros q'; case q'; simpl in |- *; auto with zarith arith; intros; red in |- *; simpl in |- *; red in |- *; intros; discriminate.",
            "VernacExtend",
            "f0d3e6a3640eedb393efc02f53f230dd0819e8f3"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Hint Resolve Zlt_gt: zarith.",
            "VernacHints",
            "2b57c116ca4db48accb07ce1a1ca4367a27a0780"
        ],
        [
            "Theorem digitAdd : forall (q : Z) (r : nat), q <> 0%Z -> digit (q * Zpower_nat n r) = digit q + r.",
            "VernacStartTheoremProof",
            "1757287cbb2e27d706ad271f1af271fd0ecd6f75"
        ],
        [
            "intros q r H0.",
            "VernacExtend",
            "2c9df3cdd196323f2cfbf73a119a53807dd777f8"
        ],
        [
            "apply digitInv.",
            "VernacExtend",
            "03388b79d7c61734e12f9ebd305c9131d041f218"
        ],
        [
            "replace (pred (digit q + r)) with (pred (digit q) + r).",
            "VernacExtend",
            "178a122b659e928ca1e02b40484dcf9482ef3ab7"
        ],
        [
            "rewrite Zpower_nat_is_exp; rewrite Zabs_Zmult; rewrite (fun x => Zabs_eq (Zpower_nat n x)); auto with zarith arith.",
            "VernacExtend",
            "f63056e1dea32eb41eaa79036e5de7caa1cb1afd"
        ],
        [
            "generalize (digitNotZero _ H0); case (digit q); auto with arith.",
            "VernacExtend",
            "61604f661d7e0e780e727eb1527262d3c4db126c"
        ],
        [
            "intros H'; Contradict H'; auto with arith.",
            "VernacExtend",
            "3c819b4057a2b4f7b4118257391a266cd44723e3"
        ],
        [
            "rewrite Zpower_nat_is_exp; rewrite Zabs_Zmult; rewrite (fun x => Zabs_eq (Zpower_nat n x)); auto with zarith arith.",
            "VernacExtend",
            "f63056e1dea32eb41eaa79036e5de7caa1cb1afd"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Theorem digit_minus1 : forall p : nat, digit (Zpower_nat n p - 1) = p.",
            "VernacStartTheoremProof",
            "268f6097ed5b31dc43d15ca4fdea474638d01b4f"
        ],
        [
            "intros p; case p; auto.",
            "VernacExtend",
            "d531352e84917c41fb6c9ac9ec32cf7a1544ecb9"
        ],
        [
            "intros n0; apply digitInv; auto.",
            "VernacExtend",
            "ad2e7681fe5ed5f36ef8629af0060cdcd4602e1d"
        ],
        [
            "rewrite Zabs_eq.",
            "VernacExtend",
            "916ebcf8583ff0d0a303169b1269b11f4dfe8128"
        ],
        [
            "cut (Zpower_nat n (pred (S n0)) < Zpower_nat n (S n0))%Z; auto with zarith.",
            "VernacExtend",
            "3740797dee0c6841f1728e134abdcc633d3dbce1"
        ],
        [
            "cut (0 < Zpower_nat n (S n0))%Z; auto with zarith.",
            "VernacExtend",
            "4b5118edf2e982295b19c4c211f32aab8f6cada7"
        ],
        [
            "rewrite Zabs_eq; auto with zarith.",
            "VernacExtend",
            "e3b6647506c6d43441146989691d7c27f1722b7e"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Theorem digit_bound : forall (x y z : Z) (n : nat), (Zabs x <= Zabs y)%Z -> (Zabs y <= Zabs z)%Z -> digit x = n -> digit z = n -> digit y = n.",
            "VernacStartTheoremProof",
            "b431f513a84fc586e2589664de1963ece91bd6d4"
        ],
        [
            "intros x y z n0 H' H'0 H'1 H'2; apply le_antisym.",
            "VernacExtend",
            "d384456bbc336aa1bddbcdb474a7f4e7ca410b15"
        ],
        [
            "rewrite <- H'2; auto with arith.",
            "VernacExtend",
            "ed9cbf0a44f7751623b385c0c216a3c52721c845"
        ],
        [
            "rewrite <- H'1; auto with arith.",
            "VernacExtend",
            "1e1f6e2d428748dbbf7355f300aef97502ba13c9"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Theorem digit_abs : forall p : Z, digit (Zabs p) = digit p.",
            "VernacStartTheoremProof",
            "193bdbc661b79fdb6072147fa4e9ae8ce8b10ca5"
        ],
        [
            "intros p; case p; simpl in |- *; auto.",
            "VernacExtend",
            "afee7a9ab62d247041c6e9d02f5397b50015aedd"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Theorem digit_anti_monotone_lt : (1 < n)%Z -> forall p q : Z, digit p < digit q -> (Zabs p < Zabs q)%Z.",
            "VernacStartTheoremProof",
            "8e987c9a51235a6bee50a1092f81d6446bac2771"
        ],
        [
            "intros H' p q H'0.",
            "VernacExtend",
            "58daa4931b1b89cca62a412d72afc2ac92d83c0d"
        ],
        [
            "case (Zle_or_lt (Zabs q) (Zabs p)); auto; intros H'1.",
            "VernacExtend",
            "d545898855a814891cbc89859e389b5ba8d7d2e9"
        ],
        [
            "Contradict H'0.",
            "VernacExtend",
            "0fd20730534a0b7ed5d43e3a37dfb114d920724b"
        ],
        [
            "case (Zle_lt_or_eq _ _ H'1); intros H'2.",
            "VernacExtend",
            "8b2d19d4f0991814bc2ec7abc60b4054078a6b74"
        ],
        [
            "apply le_not_lt; auto with arith.",
            "VernacExtend",
            "944ee47bfe3438ad4db296f94cc5cfe0c46786bf"
        ],
        [
            "rewrite <- (digit_abs p); rewrite <- (digit_abs q); rewrite H'2; auto with arith.",
            "VernacExtend",
            "059d436ef7744073c985b411fd3f01e9310deb59"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "End Pdigit.",
            "VernacEndSegment",
            "bc1b9d96850def9e343538c371b2d88e8812038d"
        ],
        [
            "Hint Resolve Zpower_nat_less: zarith.",
            "VernacHints",
            "5a17b4513b3256123161ca75d01525e50e97eb12"
        ],
        [
            "Hint Resolve Zpower_nat_monotone_lt: zarith.",
            "VernacHints",
            "c0bf1251175fdccf39964ebe8e3ee01de0c6b4ae"
        ],
        [
            "Hint Resolve Zpower_nat_monotone_le: zarith.",
            "VernacHints",
            "13356e48b20a8fcdc500708dee0e12726db0cf68"
        ],
        [
            "Hint Unfold digit.",
            "VernacHints",
            "c6e44aa50765ed009430bd9aed21a80e531c8271"
        ],
        [
            "Hint Resolve digitLess: zarith.",
            "VernacHints",
            "27ad3074c3a3c0181fee8e6bd53279bccfbc7b39"
        ],
        [
            "Hint Resolve digitMore: zarith.",
            "VernacHints",
            "fdab91696e67af2f872da0a814235c7ad7820a33"
        ],
        [
            "Hint Resolve digit_monotone: arith.",
            "VernacHints",
            "eb7e90fcb432dd45d67d87ddb52877c401da16f0"
        ]
    ],
    "proofs": [
        {
            "name": "Zpower_nat_less",
            "line_nb": 8,
            "steps": [
                {
                    "command": [
                        "intros q; elim q; simpl in |- *; auto with zarith.",
                        "VernacExtend",
                        "5d253b136967c6ae3071dcb7a1d76bff41d369e0"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "Zpower_nat_monotone_S",
            "line_nb": 12,
            "steps": [
                {
                    "command": [
                        "intros p; rewrite <- (Zmult_1_l (Zpower_nat n p)); replace (S p) with (1 + p); [ rewrite Zpower_nat_is_exp | auto with zarith ].",
                        "VernacExtend",
                        "da6caae97271f753bf7abe0b511793262db867eb"
                    ]
                },
                {
                    "command": [
                        "rewrite Zpower_nat_1; auto with zarith.",
                        "VernacExtend",
                        "e9320a7ea3adf68ff67766aff884f3fea30c1c11"
                    ]
                },
                {
                    "command": [
                        "apply Zmult_gt_0_lt_compat_r; auto with zarith.",
                        "VernacExtend",
                        "591acc3e148a356d4d326ded6bdc45878b78dc06"
                    ]
                },
                {
                    "command": [
                        "apply Zlt_gt; auto with zarith.",
                        "VernacExtend",
                        "e4740f81454b5bebf9859686e2a5cd74c0d86c71"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "Zpower_nat_monotone_lt",
            "line_nb": 18,
            "steps": [
                {
                    "command": [
                        "intros p q H'; elim H'; simpl in |- *; auto.",
                        "VernacExtend",
                        "70844bbd1e21cffaaf8251e92519283938951269"
                    ]
                },
                {
                    "command": [
                        "apply Zpower_nat_monotone_S.",
                        "VernacExtend",
                        "0bad07f6dcc0e6acc647ef172eaea8d40b8ca6de"
                    ]
                },
                {
                    "command": [
                        "intros m H H0; apply Zlt_trans with (1 := H0).",
                        "VernacExtend",
                        "e10db94b6a17d41a80189ce3d02feef99be6e405"
                    ]
                },
                {
                    "command": [
                        "apply Zpower_nat_monotone_S.",
                        "VernacExtend",
                        "0bad07f6dcc0e6acc647ef172eaea8d40b8ca6de"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "Zpower_nat_anti_monotone_lt",
            "line_nb": 25,
            "steps": [
                {
                    "command": [
                        "intros p q H'.",
                        "VernacExtend",
                        "6d0165163a2a8e407c09482ce517f2835b5de359"
                    ]
                },
                {
                    "command": [
                        "case (le_or_lt q p); auto; (intros H'1; generalize H'; case H'1).",
                        "VernacExtend",
                        "78393b41a9d96e89c8c2b1f47dc2c586ee5ae5ca"
                    ]
                },
                {
                    "command": [
                        "intros H'0; Contradict H'0; auto with zarith.",
                        "VernacExtend",
                        "6494dcc7f61dbb4f38bb4bcc610f5180e8f713ed"
                    ]
                },
                {
                    "command": [
                        "intros m H'0 H'2; Contradict H'2; auto with zarith.",
                        "VernacExtend",
                        "b659a64f6d82680776c5b039cbfb9ee8062ce33e"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "Zpower_nat_monotone_le",
            "line_nb": 31,
            "steps": [
                {
                    "command": [
                        "intros p q H'; case (le_lt_or_eq _ _ H'); auto with zarith.",
                        "VernacExtend",
                        "ca949c3ae7fec65dc21ada990654b1c5bef14420"
                    ]
                },
                {
                    "command": [
                        "intros H1; rewrite H1; auto with zarith.",
                        "VernacExtend",
                        "085acfae5fe4e3652e40f7f8e83128ec07acf7d9"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "Zpower_nat_anti_monotone_le",
            "line_nb": 35,
            "steps": [
                {
                    "command": [
                        "intros p q H'; case (le_or_lt p q); intros H'0; auto with arith.",
                        "VernacExtend",
                        "1a9bf6b2969256fc31dcdb628a07dc9a152c3fc4"
                    ]
                },
                {
                    "command": [
                        "Contradict H'; auto with zarith.",
                        "VernacExtend",
                        "136e9f49598ca3339fe6c0c792596c4c09418a91"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "Zpower_nat_anti_eq",
            "line_nb": 39,
            "steps": [
                {
                    "command": [
                        "intros p q H'; apply le_antisym; apply Zpower_nat_anti_monotone_le; rewrite H'; auto with zarith.",
                        "VernacExtend",
                        "ae48cc819f15e155b751bcf55402935c85b4de7f"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "digitAux1",
            "line_nb": 45,
            "steps": [
                {
                    "command": [
                        "intros p r; replace (S p) with (1 + p); [ rewrite Zpower_nat_is_exp | auto with arith ].",
                        "VernacExtend",
                        "e6ab93ac4037f33cea0c6d99aa13890d23a81ea2"
                    ]
                },
                {
                    "command": [
                        "rewrite Zpower_nat_1; ring.",
                        "VernacExtend",
                        "dd73d3c12da24a987d67ec535c2530a998925818"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "Zcompare_correct",
            "line_nb": 49,
            "steps": [
                {
                    "command": [
                        "intros p q; unfold Zlt in |- *; generalize (Zcompare_EGAL p q); (CaseEq (p ?= q)%Z; simpl in |- *; auto).",
                        "VernacExtend",
                        "237a65f33ae6b27252584ff95cb91a28aaf80ac1"
                    ]
                },
                {
                    "command": [
                        "intros H H0; case (Zcompare_Gt_Lt_antisym p q); auto.",
                        "VernacExtend",
                        "ee1bdeb562ef0684b6772258f36e9a28c66f8376"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "digitAuxLess",
            "line_nb": 53,
            "steps": [
                {
                    "command": [
                        "intros v r q; generalize r; elim q; clear r q; simpl in |- *; auto.",
                        "VernacExtend",
                        "aeac87c0cdd00b5a08bb26da3dea5efaaa4c2cce"
                    ]
                },
                {
                    "command": [
                        "intros q' Rec r; generalize (Zcompare_correct r v); case (r ?= v)%Z; auto.",
                        "VernacExtend",
                        "3577a4bf1cf040624d4c2b370de650af6c3c3033"
                    ]
                },
                {
                    "command": [
                        "intros H1; generalize (Rec (n * r)%Z); case (digitAux v (n * r) q').",
                        "VernacExtend",
                        "d677028be5e0e09a97fa1604807e18fc9a6f617e"
                    ]
                },
                {
                    "command": [
                        "intros; rewrite H1; rewrite Zpower_nat_O; auto with zarith.",
                        "VernacExtend",
                        "850a90b1e6a7d429c3e7418080b91ffb6054cb3e"
                    ]
                },
                {
                    "command": [
                        "intros r'; rewrite digitAux1; auto.",
                        "VernacExtend",
                        "e8c2bf3d0caa5557400ba1b7c3bbc52229730c80"
                    ]
                },
                {
                    "command": [
                        "intros H1; generalize (Rec (n * r)%Z); case (digitAux v (n * r) q').",
                        "VernacExtend",
                        "d677028be5e0e09a97fa1604807e18fc9a6f617e"
                    ]
                },
                {
                    "command": [
                        "intros; rewrite Zpower_nat_O; auto with zarith.",
                        "VernacExtend",
                        "25b6126bda462d4cc5cf9977bfd4eec4cfe7236f"
                    ]
                },
                {
                    "command": [
                        "apply Zle_trans with (m := r); auto with zarith.",
                        "VernacExtend",
                        "3b57e4ed31f0c3ba905b3f0253d750818860e43b"
                    ]
                },
                {
                    "command": [
                        "intros r'; rewrite digitAux1; auto.",
                        "VernacExtend",
                        "e8c2bf3d0caa5557400ba1b7c3bbc52229730c80"
                    ]
                },
                {
                    "command": [
                        "intros q' Rec r; generalize (Zcompare_correct r v); case (r ?= v)%Z; auto.",
                        "VernacExtend",
                        "3577a4bf1cf040624d4c2b370de650af6c3c3033"
                    ]
                },
                {
                    "command": [
                        "intros H1; generalize (Rec (n * r)%Z); case (digitAux v (n * r) q').",
                        "VernacExtend",
                        "d677028be5e0e09a97fa1604807e18fc9a6f617e"
                    ]
                },
                {
                    "command": [
                        "intros; rewrite H1; rewrite Zpower_nat_O; auto with zarith.",
                        "VernacExtend",
                        "850a90b1e6a7d429c3e7418080b91ffb6054cb3e"
                    ]
                },
                {
                    "command": [
                        "intros r'; rewrite digitAux1; auto.",
                        "VernacExtend",
                        "e8c2bf3d0caa5557400ba1b7c3bbc52229730c80"
                    ]
                },
                {
                    "command": [
                        "intros H1; generalize (Rec (n * r)%Z); case (digitAux v (n * r) q').",
                        "VernacExtend",
                        "d677028be5e0e09a97fa1604807e18fc9a6f617e"
                    ]
                },
                {
                    "command": [
                        "intros; rewrite Zpower_nat_O; auto with zarith.",
                        "VernacExtend",
                        "25b6126bda462d4cc5cf9977bfd4eec4cfe7236f"
                    ]
                },
                {
                    "command": [
                        "apply Zle_trans with (m := r); auto with zarith.",
                        "VernacExtend",
                        "3b57e4ed31f0c3ba905b3f0253d750818860e43b"
                    ]
                },
                {
                    "command": [
                        "intros r'; rewrite digitAux1; auto.",
                        "VernacExtend",
                        "e8c2bf3d0caa5557400ba1b7c3bbc52229730c80"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "digitLess",
            "line_nb": 72,
            "steps": [
                {
                    "command": [
                        "intros q; case q.",
                        "VernacExtend",
                        "d3483bd0a9f2417d4ebcdd77f477a91e6c7cf15b"
                    ]
                },
                {
                    "command": [
                        "intros H; Contradict H; auto with zarith.",
                        "VernacExtend",
                        "875c69965d1462aa9314a4b4fe5553a393f8e2b5"
                    ]
                },
                {
                    "command": [
                        "intros p H; unfold digit in |- *; generalize (digitAuxLess (Zabs (Zpos p)) 1 (xO p)); case (digitAux (Zabs (Zpos p)) 1 (xO p)); simpl in |- *; auto with zarith.",
                        "VernacExtend",
                        "ee572b74dbc915367a8d5203c99e4bcabee149c7"
                    ]
                },
                {
                    "command": [
                        "intros p H; unfold digit in |- *; generalize (digitAuxLess (Zabs (Zneg p)) 1 (xO p)); case (digitAux (Zabs (Zneg p)) 1 (xO p)); simpl in |- *; auto with zarith.",
                        "VernacExtend",
                        "b8524cb8b54f165d679e2a769a77f8567688d94a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "digitAuxMore",
            "line_nb": 81,
            "steps": [
                {
                    "command": [
                        "intros v r q; generalize r; elim q; clear r q; simpl in |- *.",
                        "VernacExtend",
                        "69194122cf75b458cd7a380c7763c0e667ce28b4"
                    ]
                },
                {
                    "command": [
                        "intros p Rec r Hr; generalize (Zcompare_correct r v); case (r ?= v)%Z; auto.",
                        "VernacExtend",
                        "34aa2d34fe49288786f5ad486c1683acfb2b6ce6"
                    ]
                },
                {
                    "command": [
                        "intros H1 H2; rewrite <- H1.",
                        "VernacExtend",
                        "e0bef73fe8afa1455fcb9eb48bed0c60fa0d393e"
                    ]
                },
                {
                    "command": [
                        "apply Zle_lt_trans with (Zpower_nat n 0 * r)%Z; auto with zarith arith.",
                        "VernacExtend",
                        "cfb2015922db772249e626e2ec020c4089bd6850"
                    ]
                },
                {
                    "command": [
                        "rewrite Zpower_nat_O; rewrite Zmult_1_l; auto with zarith.",
                        "VernacExtend",
                        "b3b3956f92446ea984af534c4fa8c78450328bf1"
                    ]
                },
                {
                    "command": [
                        "intros H1 H2; rewrite digitAux1.",
                        "VernacExtend",
                        "07d55fae5122cf256586aba327a14550d133940d"
                    ]
                },
                {
                    "command": [
                        "apply Rec.",
                        "VernacExtend",
                        "42eaadfc190d4cae88c7b898227450ba56587e9b"
                    ]
                },
                {
                    "command": [
                        "apply Zlt_mult_ZERO; auto with zarith.",
                        "VernacExtend",
                        "3de008be339dd6ed48a5bb4955266076f8ea7675"
                    ]
                },
                {
                    "command": [
                        "rewrite <- digitAux1; auto.",
                        "VernacExtend",
                        "491e89f9c86a950fa9ab71557121b2ce84e61703"
                    ]
                },
                {
                    "command": [
                        "rewrite Zpower_nat_O; rewrite Zmult_1_l; auto with zarith.",
                        "VernacExtend",
                        "b3b3956f92446ea984af534c4fa8c78450328bf1"
                    ]
                },
                {
                    "command": [
                        "intros p Rec r Hr; generalize (Zcompare_correct r v); case (r ?= v)%Z; auto.",
                        "VernacExtend",
                        "34aa2d34fe49288786f5ad486c1683acfb2b6ce6"
                    ]
                },
                {
                    "command": [
                        "intros H1 H2; rewrite <- H1.",
                        "VernacExtend",
                        "e0bef73fe8afa1455fcb9eb48bed0c60fa0d393e"
                    ]
                },
                {
                    "command": [
                        "apply Zle_lt_trans with (Zpower_nat n 0 * r)%Z; auto with zarith arith.",
                        "VernacExtend",
                        "cfb2015922db772249e626e2ec020c4089bd6850"
                    ]
                },
                {
                    "command": [
                        "rewrite Zpower_nat_O; rewrite Zmult_1_l; auto with zarith.",
                        "VernacExtend",
                        "b3b3956f92446ea984af534c4fa8c78450328bf1"
                    ]
                },
                {
                    "command": [
                        "intros H1 H2; rewrite digitAux1.",
                        "VernacExtend",
                        "07d55fae5122cf256586aba327a14550d133940d"
                    ]
                },
                {
                    "command": [
                        "apply Rec.",
                        "VernacExtend",
                        "42eaadfc190d4cae88c7b898227450ba56587e9b"
                    ]
                },
                {
                    "command": [
                        "apply Zlt_mult_ZERO; auto with zarith.",
                        "VernacExtend",
                        "3de008be339dd6ed48a5bb4955266076f8ea7675"
                    ]
                },
                {
                    "command": [
                        "rewrite <- digitAux1; auto.",
                        "VernacExtend",
                        "491e89f9c86a950fa9ab71557121b2ce84e61703"
                    ]
                },
                {
                    "command": [
                        "rewrite Zpower_nat_O; rewrite Zmult_1_l; auto with zarith.",
                        "VernacExtend",
                        "b3b3956f92446ea984af534c4fa8c78450328bf1"
                    ]
                },
                {
                    "command": [
                        "auto.",
                        "VernacExtend",
                        "1f09da0addd069b3b65326f8c71967acc1e985af"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "pos_length_pow",
            "line_nb": 103,
            "steps": [
                {
                    "command": [
                        "intros p; elim p; simpl in |- *; auto.",
                        "VernacExtend",
                        "02a9974c9e43b8cd76774dcdd246d768e4b8c881"
                    ]
                },
                {
                    "command": [
                        "intros p0 H; rewrite Zpos_xI.",
                        "VernacExtend",
                        "1687d24a5564b54489a2a9f02853e950c0c020a3"
                    ]
                },
                {
                    "command": [
                        "apply Zlt_le_trans with (2 * (n * Zpower_nat n (pos_length p0)))%Z; auto with zarith.",
                        "VernacExtend",
                        "d8d63b10f8463b6fe826808d415b7828b5099ae6"
                    ]
                },
                {
                    "command": [
                        "intros p0 H; rewrite Zpos_xO.",
                        "VernacExtend",
                        "b20190d8a80d7c7311233b8c6d0df2126daacf0e"
                    ]
                },
                {
                    "command": [
                        "apply Zlt_le_trans with (2 * (n * Zpower_nat n (pos_length p0)))%Z; auto with zarith.",
                        "VernacExtend",
                        "d8d63b10f8463b6fe826808d415b7828b5099ae6"
                    ]
                },
                {
                    "command": [
                        "auto with zarith.",
                        "VernacExtend",
                        "23f42fd3236dcece4a40b3a666dce57fea69a9c0"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "digitMore",
            "line_nb": 111,
            "steps": [
                {
                    "command": [
                        "intros q; case q.",
                        "VernacExtend",
                        "d3483bd0a9f2417d4ebcdd77f477a91e6c7cf15b"
                    ]
                },
                {
                    "command": [
                        "easy.",
                        "VernacExtend",
                        "ef1368621ae14ed4e378e6e1c58fbee46db9a962"
                    ]
                },
                {
                    "command": [
                        "intros q'; rewrite <- (Zmult_1_r (Zpower_nat n (digit (Zpos q')))).",
                        "VernacExtend",
                        "b728f75e7f68687bcc19d9f91c47ae2a7ac35dc6"
                    ]
                },
                {
                    "command": [
                        "unfold digit in |- *; apply digitAuxMore; auto with zarith.",
                        "VernacExtend",
                        "d2df0aada3740e32e1494c1444b10e7dd7822a67"
                    ]
                },
                {
                    "command": [
                        "rewrite Zmult_1_r.",
                        "VernacExtend",
                        "417376d82024400c741f6570f03b2437a77ee661"
                    ]
                },
                {
                    "command": [
                        "simpl in |- *; apply pos_length_pow.",
                        "VernacExtend",
                        "b35ce7715ae6e6f534a488e5f1fed127cba67789"
                    ]
                },
                {
                    "command": [
                        "intros q'; rewrite <- (Zmult_1_r (Zpower_nat n (digit (Zneg q')))).",
                        "VernacExtend",
                        "0560710d42138786dca20b27576c3ab44925de04"
                    ]
                },
                {
                    "command": [
                        "unfold digit in |- *; apply digitAuxMore; auto with zarith.",
                        "VernacExtend",
                        "d2df0aada3740e32e1494c1444b10e7dd7822a67"
                    ]
                },
                {
                    "command": [
                        "rewrite Zmult_1_r.",
                        "VernacExtend",
                        "417376d82024400c741f6570f03b2437a77ee661"
                    ]
                },
                {
                    "command": [
                        "simpl in |- *; apply pos_length_pow.",
                        "VernacExtend",
                        "b35ce7715ae6e6f534a488e5f1fed127cba67789"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "digitInv",
            "line_nb": 124,
            "steps": [
                {
                    "command": [
                        "intros q r H' H'0; case (le_or_lt (digit q) r).",
                        "VernacExtend",
                        "e635b932fe4150ff0c2a677a9ef8b5875b64016c"
                    ]
                },
                {
                    "command": [
                        "intros H'1; case (le_lt_or_eq _ _ H'1); auto; intros H'2.",
                        "VernacExtend",
                        "1d9805e861c494130ef8bbd7edbd8890bc018278"
                    ]
                },
                {
                    "command": [
                        "absurd (Zabs q < Zpower_nat n (digit q))%Z; auto with zarith.",
                        "VernacExtend",
                        "003ef0ed377dc4654e38de2ee7580caf6a2daed5"
                    ]
                },
                {
                    "command": [
                        "apply Zle_not_lt; auto with zarith.",
                        "VernacExtend",
                        "13739daa2c3c9c8e9788299bf37d232755bbfff8"
                    ]
                },
                {
                    "command": [
                        "apply Zle_trans with (m := Zpower_nat n (pred r)); auto with zarith.",
                        "VernacExtend",
                        "65a91be38e72fb05bdfad02e55db1e93bd77c3a1"
                    ]
                },
                {
                    "command": [
                        "apply Zpower_nat_monotone_le.",
                        "VernacExtend",
                        "e15cdf56570742cbce1051907333ec9b19a04ef1"
                    ]
                },
                {
                    "command": [
                        "generalize H'2; case r; auto with arith.",
                        "VernacExtend",
                        "c9386769ac5de352a6bab40c722f09a29ad4d397"
                    ]
                },
                {
                    "command": [
                        "intros H'1.",
                        "VernacExtend",
                        "27d12cfd315031f2731cee2bf5ecf81dd7f6b369"
                    ]
                },
                {
                    "command": [
                        "absurd (Zpower_nat n (pred (digit q)) <= Zabs q)%Z; auto with zarith.",
                        "VernacExtend",
                        "f76426745621d5f56aa709390a46f06906e90bbb"
                    ]
                },
                {
                    "command": [
                        "apply Zlt_not_le; auto with zarith.",
                        "VernacExtend",
                        "66f5b527554e57c2045f16e1bdff1f1f75e29dd3"
                    ]
                },
                {
                    "command": [
                        "apply Zlt_le_trans with (m := Zpower_nat n r); auto.",
                        "VernacExtend",
                        "86cc803954e3f42ac814a2481356e487011db2c4"
                    ]
                },
                {
                    "command": [
                        "apply Zpower_nat_monotone_le.",
                        "VernacExtend",
                        "e15cdf56570742cbce1051907333ec9b19a04ef1"
                    ]
                },
                {
                    "command": [
                        "generalize H'1; case (digit q); auto with arith.",
                        "VernacExtend",
                        "03979a1c6162528200eee7c8a95fc1d38cf01b79"
                    ]
                },
                {
                    "command": [
                        "apply digitLess; auto with zarith.",
                        "VernacExtend",
                        "1855cad479b16488cd77feab31296bf1863c2476"
                    ]
                },
                {
                    "command": [
                        "generalize H'1; case q; unfold digit in |- *; intros tmp; intros; red in |- *; intros; try discriminate; Contradict tmp; auto with arith.",
                        "VernacExtend",
                        "bd25824a11e5b6542eafeb0b5312c5eaafaa2a20"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "digitO",
            "line_nb": 141,
            "steps": [
                {
                    "command": [
                        "unfold digit in |- *; simpl in |- *; auto with arith.",
                        "VernacExtend",
                        "1bb7ce4d9c3275eb03046ca73489b73821247642"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "digit1",
            "line_nb": 144,
            "steps": [
                {
                    "command": [
                        "unfold digit in |- *; simpl in |- *; auto.",
                        "VernacExtend",
                        "e458e797a409e69d0a4bd6e0eb1d40223d362ccd"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "digit_monotone",
            "line_nb": 147,
            "steps": [
                {
                    "command": [
                        "intros p q H; case (le_or_lt (digit p) (digit q)); auto; intros H1; Contradict H.",
                        "VernacExtend",
                        "aa06e72b1aa2bfa37f63a77f1a48ac2c52225145"
                    ]
                },
                {
                    "command": [
                        "apply Zlt_not_le.",
                        "VernacExtend",
                        "f50dda740686f871b63754e02667d404d580866b"
                    ]
                },
                {
                    "command": [
                        "cut (p <> 0%Z); [ intros H2 | idtac ].",
                        "VernacExtend",
                        "1fce9e101d1dac62c64fe2bda8f5a50a4aaae624"
                    ]
                },
                {
                    "command": [
                        "apply Zlt_le_trans with (2 := digitLess p H2).",
                        "VernacExtend",
                        "760434edba9e4b6a16ee26fb1777c7cde619e8f5"
                    ]
                },
                {
                    "command": [
                        "cut (digit q <= pred (digit p)); [ intros H3 | idtac ].",
                        "VernacExtend",
                        "164866f8f94ef27959f8b24f878abd97eda33341"
                    ]
                },
                {
                    "command": [
                        "apply Zlt_le_trans with (2 := Zpower_nat_monotone_le _ _ H3); auto with zarith.",
                        "VernacExtend",
                        "2e32d473c4e5673f29b6cffba59cd777e8390376"
                    ]
                },
                {
                    "command": [
                        "generalize H1; case (digit p); simpl in |- *; auto with arith.",
                        "VernacExtend",
                        "28f3965badd7bdd97c1993ed29892f20aed5e35f"
                    ]
                },
                {
                    "command": [
                        "generalize H1; case p; simpl in |- *; intros tmp; intros; red in |- *; intros; try discriminate; Contradict tmp; auto with arith.",
                        "VernacExtend",
                        "7e75e52e1fcea57d68178b9ffa548f7daee9544e"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "digitNotZero",
            "line_nb": 158,
            "steps": [
                {
                    "command": [
                        "intros q H'.",
                        "VernacExtend",
                        "d7c8d60a6a77283fec099c770b0006837bcbb4d8"
                    ]
                },
                {
                    "command": [
                        "apply lt_le_trans with (m := digit 1); auto with zarith.",
                        "VernacExtend",
                        "cf5c090bedbbc1020f7f5ea5c6469e11da81d669"
                    ]
                },
                {
                    "command": [
                        "apply digit_monotone.",
                        "VernacExtend",
                        "1883a904da1040d8f48a3259f45281b1c5686b0f"
                    ]
                },
                {
                    "command": [
                        "generalize H'; case q; simpl in |- *; auto with zarith; intros q'; case q'; simpl in |- *; auto with zarith arith; intros; red in |- *; simpl in |- *; red in |- *; intros; discriminate.",
                        "VernacExtend",
                        "f0d3e6a3640eedb393efc02f53f230dd0819e8f3"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "digitAdd",
            "line_nb": 165,
            "steps": [
                {
                    "command": [
                        "intros q r H0.",
                        "VernacExtend",
                        "2c9df3cdd196323f2cfbf73a119a53807dd777f8"
                    ]
                },
                {
                    "command": [
                        "apply digitInv.",
                        "VernacExtend",
                        "03388b79d7c61734e12f9ebd305c9131d041f218"
                    ]
                },
                {
                    "command": [
                        "replace (pred (digit q + r)) with (pred (digit q) + r).",
                        "VernacExtend",
                        "178a122b659e928ca1e02b40484dcf9482ef3ab7"
                    ]
                },
                {
                    "command": [
                        "rewrite Zpower_nat_is_exp; rewrite Zabs_Zmult; rewrite (fun x => Zabs_eq (Zpower_nat n x)); auto with zarith arith.",
                        "VernacExtend",
                        "f63056e1dea32eb41eaa79036e5de7caa1cb1afd"
                    ]
                },
                {
                    "command": [
                        "generalize (digitNotZero _ H0); case (digit q); auto with arith.",
                        "VernacExtend",
                        "61604f661d7e0e780e727eb1527262d3c4db126c"
                    ]
                },
                {
                    "command": [
                        "intros H'; Contradict H'; auto with arith.",
                        "VernacExtend",
                        "3c819b4057a2b4f7b4118257391a266cd44723e3"
                    ]
                },
                {
                    "command": [
                        "rewrite Zpower_nat_is_exp; rewrite Zabs_Zmult; rewrite (fun x => Zabs_eq (Zpower_nat n x)); auto with zarith arith.",
                        "VernacExtend",
                        "f63056e1dea32eb41eaa79036e5de7caa1cb1afd"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "digit_minus1",
            "line_nb": 174,
            "steps": [
                {
                    "command": [
                        "intros p; case p; auto.",
                        "VernacExtend",
                        "d531352e84917c41fb6c9ac9ec32cf7a1544ecb9"
                    ]
                },
                {
                    "command": [
                        "intros n0; apply digitInv; auto.",
                        "VernacExtend",
                        "ad2e7681fe5ed5f36ef8629af0060cdcd4602e1d"
                    ]
                },
                {
                    "command": [
                        "rewrite Zabs_eq.",
                        "VernacExtend",
                        "916ebcf8583ff0d0a303169b1269b11f4dfe8128"
                    ]
                },
                {
                    "command": [
                        "cut (Zpower_nat n (pred (S n0)) < Zpower_nat n (S n0))%Z; auto with zarith.",
                        "VernacExtend",
                        "3740797dee0c6841f1728e134abdcc633d3dbce1"
                    ]
                },
                {
                    "command": [
                        "cut (0 < Zpower_nat n (S n0))%Z; auto with zarith.",
                        "VernacExtend",
                        "4b5118edf2e982295b19c4c211f32aab8f6cada7"
                    ]
                },
                {
                    "command": [
                        "rewrite Zabs_eq; auto with zarith.",
                        "VernacExtend",
                        "e3b6647506c6d43441146989691d7c27f1722b7e"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "digit_bound",
            "line_nb": 182,
            "steps": [
                {
                    "command": [
                        "intros x y z n0 H' H'0 H'1 H'2; apply le_antisym.",
                        "VernacExtend",
                        "d384456bbc336aa1bddbcdb474a7f4e7ca410b15"
                    ]
                },
                {
                    "command": [
                        "rewrite <- H'2; auto with arith.",
                        "VernacExtend",
                        "ed9cbf0a44f7751623b385c0c216a3c52721c845"
                    ]
                },
                {
                    "command": [
                        "rewrite <- H'1; auto with arith.",
                        "VernacExtend",
                        "1e1f6e2d428748dbbf7355f300aef97502ba13c9"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "digit_abs",
            "line_nb": 187,
            "steps": [
                {
                    "command": [
                        "intros p; case p; simpl in |- *; auto.",
                        "VernacExtend",
                        "afee7a9ab62d247041c6e9d02f5397b50015aedd"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "digit_anti_monotone_lt",
            "line_nb": 190,
            "steps": [
                {
                    "command": [
                        "intros H' p q H'0.",
                        "VernacExtend",
                        "58daa4931b1b89cca62a412d72afc2ac92d83c0d"
                    ]
                },
                {
                    "command": [
                        "case (Zle_or_lt (Zabs q) (Zabs p)); auto; intros H'1.",
                        "VernacExtend",
                        "d545898855a814891cbc89859e389b5ba8d7d2e9"
                    ]
                },
                {
                    "command": [
                        "Contradict H'0.",
                        "VernacExtend",
                        "0fd20730534a0b7ed5d43e3a37dfb114d920724b"
                    ]
                },
                {
                    "command": [
                        "case (Zle_lt_or_eq _ _ H'1); intros H'2.",
                        "VernacExtend",
                        "8b2d19d4f0991814bc2ec7abc60b4054078a6b74"
                    ]
                },
                {
                    "command": [
                        "apply le_not_lt; auto with arith.",
                        "VernacExtend",
                        "944ee47bfe3438ad4db296f94cc5cfe0c46786bf"
                    ]
                },
                {
                    "command": [
                        "rewrite <- (digit_abs p); rewrite <- (digit_abs q); rewrite H'2; auto with arith.",
                        "VernacExtend",
                        "059d436ef7744073c985b411fd3f01e9310deb59"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        }
    ]
}