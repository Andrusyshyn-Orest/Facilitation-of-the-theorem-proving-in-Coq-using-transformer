{
    "filename": "Float.v",
    "coq_project": "float",
    "vernac_cmds": [
        [
            "Require Export Omega.",
            "VernacRequire",
            "0481b56b468f7aa7f5517bbdc71f6985bb9f8b59"
        ],
        [
            "Require Export Compare.",
            "VernacRequire",
            "76a84a878634e79f5b857544ab8fe1b1d68a43d3"
        ],
        [
            "Require Export Rpow.",
            "VernacRequire",
            "bf7b7b860a9bec7ce100b1acc90f65de8aef93b1"
        ],
        [
            "Section definitions.",
            "VernacBeginSection",
            "fdfd379719da878c92b736fc79cf86ad05197e48"
        ],
        [
            "Variable radix : Z.",
            "VernacAssumption",
            "2349b77d134e0c9bb013a8bdca0020ca16fc023b"
        ],
        [
            "Hypothesis radixMoreThanOne : (1 < radix)%Z.",
            "VernacAssumption",
            "f4d3774b2275f4c4c3af941091d4d99f9a2129aa"
        ],
        [
            "Let radixMoreThanZERO := Zlt_1_O _ (Zlt_le_weak _ _ radixMoreThanOne).",
            "VernacDefinition",
            "b73ccff345a4fc730c8134dcd05adb7f1928fae7"
        ],
        [
            "Hint Resolve radixMoreThanZERO: zarith.",
            "VernacHints",
            "5a4a320eb610749621ef38850390d7141dc0d330"
        ],
        [
            "Record float : Set := Float {Fnum : Z; Fexp : Z}.",
            "VernacInductive",
            "1c08ac55408452cdeac57a75954b0584941cb090"
        ],
        [
            "Theorem floatEq : forall p q : float, Fnum p = Fnum q -> Fexp p = Fexp q -> p = q.",
            "VernacStartTheoremProof",
            "ae11971de5f7adafddd0aa2ccb644abfac25a84e"
        ],
        [
            "intros p q; case p; case q; simpl in |- *; intros; apply (f_equal2 (A1:=Z) (A2:=Z)); auto.",
            "VernacExtend",
            "6e4b2c5d5a13dd177a8eff69ceabf2642108e88f"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Theorem floatDec : forall x y : float, {x = y} + {x <> y}.",
            "VernacStartTheoremProof",
            "ef6f53a92cfde53695834d7044d82bd6720e9c85"
        ],
        [
            "intros x y; case x; case y; intros Fnum2 Fexp2 Fnum1 Fexp1.",
            "VernacExtend",
            "463b4bd64cc084436fed4e3ea5959d79574d5410"
        ],
        [
            "case (Z_eq_dec Fnum1 Fnum2); intros H1.",
            "VernacExtend",
            "7de907ce72a6234450051a497f092812beee5825"
        ],
        [
            "case (Z_eq_dec Fexp1 Fexp2); intros H2.",
            "VernacExtend",
            "0314ca299e654cce3569bdbff3a69c94f137d568"
        ],
        [
            "left; apply floatEq; auto.",
            "VernacExtend",
            "f5dfd4d26c769fa842925e8b5e10f521f2f7ac1e"
        ],
        [
            "right; red in |- *; intros H'; Contradict H2; inversion H'; auto.",
            "VernacExtend",
            "3b882fd6d8c9ba0d3ecba13a31b393eec3653a8a"
        ],
        [
            "right; red in |- *; intros H'; Contradict H1; inversion H'; auto.",
            "VernacExtend",
            "d2e0905bd0d64db3e08aaac4c106fda1282c8c51"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Definition Fzero (x : Z) := Float 0 x.",
            "VernacDefinition",
            "4dd7974b947d0d65988cca65c19fc874a668f746"
        ],
        [
            "Definition is_Fzero (x : float) := Fnum x = 0%Z.",
            "VernacDefinition",
            "d1c320aa790f77ee22b0190b0ca4778932c654b2"
        ],
        [
            "Theorem is_FzeroP : forall x : float, is_Fzero x \\/ ~ is_Fzero x.",
            "VernacStartTheoremProof",
            "1254876bd09dee03d6f1c27f2ae855ce0b1627bd"
        ],
        [
            "unfold is_Fzero in |- *; intro; CaseEq (Fnum x); intros; (right; discriminate) || (left; auto).",
            "VernacExtend",
            "c9d90747e2de296fbe1a09b7469d2d42e5dae929"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Coercion IZR : Z >-> R.",
            "VernacCoercion",
            "f0fd0d761ab0b723ffa8e97bb52e0e5298472acd"
        ],
        [
            "Coercion INR : nat >-> R.",
            "VernacCoercion",
            "47f5305e21ca2eb1350bc4e024b4c3b5a6598b38"
        ],
        [
            "Coercion Z_of_nat : nat >-> Z.",
            "VernacCoercion",
            "1d429a8ee6e662640bb0d5261adc1bdf03df9a6d"
        ],
        [
            "Definition FtoR (x : float) := (Fnum x * powerRZ (IZR radix) (Fexp x))%R.",
            "VernacDefinition",
            "c3b86f7323211bb0ca6e2e28777fd190a6669ea1"
        ],
        [
            "Local Coercion FtoR : float >-> R.",
            "VernacCoercion",
            "908d254c367883138cfe33b7ae753625754911f0"
        ],
        [
            "Theorem FzeroisReallyZero : forall z : Z, Fzero z = 0%R :>R.",
            "VernacStartTheoremProof",
            "a1c418c8a5ead2c50665c04a53aa50649ecc4a7d"
        ],
        [
            "intros z; unfold FtoR in |- *; simpl in |- *; auto with real.",
            "VernacExtend",
            "ba28a93063accf6c2c81091e816c533938ce0c23"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Theorem is_Fzero_rep1 : forall x : float, is_Fzero x -> x = 0%R :>R.",
            "VernacStartTheoremProof",
            "cbda5fa0562bbccf51f1ee54d2dc17eea021c622"
        ],
        [
            "intros x H; unfold FtoR in |- *.",
            "VernacExtend",
            "02827cd5d8ff92decb8b07e829fb6d3b1eacb25d"
        ],
        [
            "red in H; rewrite H; simpl in |- *; auto with real.",
            "VernacExtend",
            "6373405e979e83d947873d8c18d97f33a09a4347"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Theorem LtFnumZERO : forall x : float, (0 < Fnum x)%Z -> (0 < x)%R.",
            "VernacStartTheoremProof",
            "3f5eaff727dcea1dc0b21f76812f808708a7777c"
        ],
        [
            "intros x; case x; unfold FtoR in |- *; simpl in |- *.",
            "VernacExtend",
            "ddac377375515b2767ec5d755d6c1b718a30ced6"
        ],
        [
            "intros Fnum1 Fexp1 H'; replace 0%R with (Fnum1 * 0)%R; [ apply Rmult_lt_compat_l | ring ]; auto with real zarith.",
            "VernacExtend",
            "f65f80c17aede5e5725489514e95c8aa61281a26"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Theorem is_Fzero_rep2 : forall x : float, x = 0%R :>R -> is_Fzero x.",
            "VernacStartTheoremProof",
            "3b5149a969f98e404cbab473da5eb9b58f50e62f"
        ],
        [
            "intros x H'.",
            "VernacExtend",
            "1864e43355295bd98e7920f89fb20cbad05f10d7"
        ],
        [
            "case (Rmult_integral _ _ H'); simpl in |- *; auto.",
            "VernacExtend",
            "ec8c1190a5f6a1755aca312d4670d70d924485df"
        ],
        [
            "case x; simpl in |- *.",
            "VernacExtend",
            "ac556baa07e2d67f8221632e8bae17e399d81025"
        ],
        [
            "intros Fnum1 Fexp1 H'0; red in |- *; simpl in |- *; auto with real zarith.",
            "VernacExtend",
            "df1ec2ca039f8224492de8565d43d0e03dd572fd"
        ],
        [
            "apply eq_IZR_R0; auto.",
            "VernacExtend",
            "7d970fea41d0a4340161ddfeb57bda26fce47bdc"
        ],
        [
            "intros H'0; Contradict H'0; apply powerRZ_NOR; auto with real zarith.",
            "VernacExtend",
            "3f835e986daa7a61fc4495e4a505f0691ee29c60"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Theorem NisFzeroComp : forall x y : float, ~ is_Fzero x -> x = y :>R -> ~ is_Fzero y.",
            "VernacStartTheoremProof",
            "191d7c427521dc455749a85871f01b22b06fdc95"
        ],
        [
            "intros x y H' H'0; Contradict H'.",
            "VernacExtend",
            "7131a55919f94d5a116701dded017fca5458e412"
        ],
        [
            "apply is_Fzero_rep2; auto.",
            "VernacExtend",
            "bbf0dbe1b41bcd08e87d8edeb3563716035dee02"
        ],
        [
            "rewrite H'0.",
            "VernacExtend",
            "155943e97f3d58c39d0b7dc8dbaf42688f94c62f"
        ],
        [
            "apply is_Fzero_rep1; auto.",
            "VernacExtend",
            "5a1dd66bed2095933ba7b670a4c41a625c17102f"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Theorem Rlt_monotony_exp : forall (x y : R) (z : Z), (x < y)%R -> (x * powerRZ radix z < y * powerRZ radix z)%R.",
            "VernacStartTheoremProof",
            "31eeecebbc785d8dd5d7b8180d78881a0dc1fb75"
        ],
        [
            "intros x y z H'; apply Rmult_lt_compat_r; auto with real zarith.",
            "VernacExtend",
            "52eab2dc79d9f9972008611eb3356420f5b8c257"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Theorem Rle_monotone_exp : forall (x y : R) (z : Z), (x <= y)%R -> (x * powerRZ radix z <= y * powerRZ radix z)%R.",
            "VernacStartTheoremProof",
            "11c18185b3b484efe52cf5930938b40eb70947a3"
        ],
        [
            "intros x y z H'; apply Rmult_le_compat_r; auto with real zarith.",
            "VernacExtend",
            "3310233f9d4966af821ccf5396af98888fbef566"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Theorem Rlt_monotony_contra_exp : forall (x y : R) (z : Z), (x * powerRZ radix z < y * powerRZ radix z)%R -> (x < y)%R.",
            "VernacStartTheoremProof",
            "cbdbb08cb01967f695cd83425cfe1234337080a0"
        ],
        [
            "intros x y z H'; apply Rmult_lt_reg_l with (r := powerRZ radix z); auto with real zarith.",
            "VernacExtend",
            "1a92a0bd62c7320b3afad4eecbd82ecc4f2c7b3d"
        ],
        [
            "repeat rewrite (Rmult_comm (powerRZ radix z)); auto.",
            "VernacExtend",
            "06709ae6e3eafa2352c0666d418241843c0d6ca2"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Theorem Rle_monotony_contra_exp : forall (x y : R) (z : Z), (x * powerRZ radix z <= y * powerRZ radix z)%R -> (x <= y)%R.",
            "VernacStartTheoremProof",
            "b2f83a3748c5ab87cbcc17ad385267ec440e1eac"
        ],
        [
            "intros x y z H'; apply Rmult_le_reg_l with (r := powerRZ radix z); auto with real zarith.",
            "VernacExtend",
            "85bc8eb770ff161da6617300f5c96b042ff25d75"
        ],
        [
            "repeat rewrite (Rmult_comm (powerRZ radix z)); auto.",
            "VernacExtend",
            "06709ae6e3eafa2352c0666d418241843c0d6ca2"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Theorem FtoREqInv1 : forall p q : float, ~ is_Fzero p -> p = q :>R -> Fnum p = Fnum q -> p = q.",
            "VernacStartTheoremProof",
            "248435ca6f7499ec1d9cc5b54a02750c11566633"
        ],
        [
            "intros p q H' H'0 H'1.",
            "VernacExtend",
            "05c3e1b098970ef14e38b413a09ed550ca5b4d53"
        ],
        [
            "apply floatEq; auto.",
            "VernacExtend",
            "c847d668791777965ba33ea03f8c58569a27270b"
        ],
        [
            "unfold FtoR in H'0.",
            "VernacExtend",
            "00c0b54623f044148b7f630709ab916098477561"
        ],
        [
            "apply Rpow_eq_inv with (r := IZR radix); auto 6 with real zarith.",
            "VernacExtend",
            "4e98375691635dc76a168f1fdc79a24993fd60a9"
        ],
        [
            "apply Rlt_dichotomy_converse; right; red in |- *.",
            "VernacExtend",
            "5e6cb8110820439778b09c01c34537a9f0ba2a54"
        ],
        [
            "unfold Rabs in |- *; case (Rcase_abs radix).",
            "VernacExtend",
            "9cd72a2161e70edcc6464ef28cf6e9fd4450f1db"
        ],
        [
            "intros H'2; Contradict H'2; apply Rle_not_lt; apply Ropp_le_cancel; auto with real.",
            "VernacExtend",
            "8640f0d770f50c42bd6779c19a211e3a7e5634b7"
        ],
        [
            "intros H'2; replace 1%R with (IZR 1); auto with real zarith.",
            "VernacExtend",
            "0508ed8d27476e9a1cb6973aeaf1ef563002bf73"
        ],
        [
            "apply Rmult_eq_reg_l with (r := IZR (Fnum p)); auto with real.",
            "VernacExtend",
            "b5a5a9dabfcf7be5a062316bd35e803797e7f115"
        ],
        [
            "pattern (Fnum p) at 2 in |- *; rewrite H'1; auto.",
            "VernacExtend",
            "01501b59aea99d2853ac3cf152256ad562190b95"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Theorem FtoREqInv2 : forall p q : float, p = q :>R -> Fexp p = Fexp q -> p = q.",
            "VernacStartTheoremProof",
            "b88f38255ec7a7665b5f7aeb8a7668aff8d63c9f"
        ],
        [
            "intros p q H' H'0.",
            "VernacExtend",
            "7ea1365154d917a427c6781fa2515333f91063e3"
        ],
        [
            "apply floatEq; auto.",
            "VernacExtend",
            "c847d668791777965ba33ea03f8c58569a27270b"
        ],
        [
            "apply eq_IZR; auto.",
            "VernacExtend",
            "6ecaf93fc8c93b03fd382527d6c6c4338d10f14f"
        ],
        [
            "apply Rmult_eq_reg_l with (r := powerRZ radix (Fexp p)); auto with real zarith.",
            "VernacExtend",
            "2a03e9fc5f283a2b1b39262cc75288c22fa5ec15"
        ],
        [
            "repeat rewrite (Rmult_comm (powerRZ radix (Fexp p))); pattern (Fexp p) at 2 in |- *; rewrite H'0; auto with real zarith.",
            "VernacExtend",
            "5052b264571b3774a232e72f91b2006ce170f5cc"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Theorem Rlt_Float_Zlt : forall p q r : Z, (Float p r < Float q r)%R -> (p < q)%Z.",
            "VernacStartTheoremProof",
            "e17e21148cc91828239986ac0ea1d324b48d9c28"
        ],
        [
            "intros p q r H'.",
            "VernacExtend",
            "f8dc4bc5ae9a7c9eed7695be49af8a41471a7279"
        ],
        [
            "apply lt_IZR.",
            "VernacExtend",
            "165b941162ea1938aa71e78f57835b8df85de779"
        ],
        [
            "apply Rlt_monotony_contra_exp with (z := r); auto with real.",
            "VernacExtend",
            "6fbe33973e986b3ff69ef855a47f8fa95b4660d3"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Theorem Rle_Float_Zle : forall p q r : Z, (Float p r <= Float q r)%R -> (p <= q)%Z.",
            "VernacStartTheoremProof",
            "ca1fbf838a1ba96c207ced60cb72f3ead3f5852c"
        ],
        [
            "intros p q r H'.",
            "VernacExtend",
            "f8dc4bc5ae9a7c9eed7695be49af8a41471a7279"
        ],
        [
            "apply le_IZR.",
            "VernacExtend",
            "b9b46c6b2f4d4157bed90857db2b9c3ba33486ad"
        ],
        [
            "apply Rle_monotony_contra_exp with (z := r); auto with real.",
            "VernacExtend",
            "b8934d18c1c9f60f494a1c24891149771aed91c6"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Theorem oneExp_le : forall x y : Z, (x <= y)%Z -> (Float 1%nat x <= Float 1%nat y)%R.",
            "VernacStartTheoremProof",
            "84010d9aad54a3232bcb618896b7f8ca1d791b4a"
        ],
        [
            "intros x y H'; unfold FtoR in |- *; simpl in |- *.",
            "VernacExtend",
            "de955e5395ccddfda58aac4e38719340a6e016e6"
        ],
        [
            "repeat rewrite Rmult_1_l; auto with real zarith.",
            "VernacExtend",
            "6d184180a3af0be92dd057386a134f98f19fc64a"
        ],
        [
            "apply Rle_powerRZ; try replace 1%R with (IZR 1); auto with real zarith zarith.",
            "VernacExtend",
            "c70472f576fce1787e6d0cda60aa891948379066"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Theorem oneExp_lt : forall x y : Z, (x < y)%Z -> (Float 1%nat x < Float 1%nat y)%R.",
            "VernacStartTheoremProof",
            "2ca170fd1eb292303f3cc7f760c3d222b844e360"
        ],
        [
            "intros x y H'; unfold FtoR in |- *; simpl in |- *.",
            "VernacExtend",
            "de955e5395ccddfda58aac4e38719340a6e016e6"
        ],
        [
            "repeat rewrite Rmult_1_l; auto with real zarith.",
            "VernacExtend",
            "6d184180a3af0be92dd057386a134f98f19fc64a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Theorem oneExp_Zlt : forall x y : Z, (Float 1%nat x < Float 1%nat y)%R -> (x < y)%Z.",
            "VernacStartTheoremProof",
            "f7a9dcc5f56f34444516e5ea6e0bbad7fdc63105"
        ],
        [
            "intros x y H'; case (Zle_or_lt y x); auto; intros ZH; Contradict H'.",
            "VernacExtend",
            "c3a7992b0aa109b7a5b3ebf39ea8c2105aa6111a"
        ],
        [
            "apply Rle_not_lt; apply oneExp_le; auto.",
            "VernacExtend",
            "211a0f114f21fa0c152c1e6a34f7637224b2d8cc"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Theorem oneExp_Zle : forall x y : Z, (Float 1%nat x <= Float 1%nat y)%R -> (x <= y)%Z.",
            "VernacStartTheoremProof",
            "cfb6c161815b2fbd256e14e4d5f83df4768f7f15"
        ],
        [
            "intros x y H'; case (Zle_or_lt x y); auto; intros ZH; Contradict H'.",
            "VernacExtend",
            "7a88cfc2108723596192237ff072510f9933523f"
        ],
        [
            "apply Rgt_not_le; red in |- *; apply oneExp_lt; auto.",
            "VernacExtend",
            "66678f33a6a3d3d424602ba0d4ca511b5d4ac364"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Definition Fdigit (p : float) := digit radix (Fnum p).",
            "VernacDefinition",
            "2c64cb70233d829b046cf51fc6e46dab13853fb9"
        ],
        [
            "Definition Fshift (n : nat) (x : float) := Float (Fnum x * Zpower_nat radix n) (Fexp x - n).",
            "VernacDefinition",
            "e5752caf490392139b9258da5cbdb84c7ef83a71"
        ],
        [
            "Theorem sameExpEq : forall p q : float, p = q :>R -> Fexp p = Fexp q -> p = q.",
            "VernacStartTheoremProof",
            "caf0872cb40be0d3d3a6d197c811b48599a01428"
        ],
        [
            "intros p q; case p; case q; unfold FtoR in |- *; simpl in |- *.",
            "VernacExtend",
            "6ee3e28721adc508639601347fd505edfc23614a"
        ],
        [
            "intros Fnum1 Fexp1 Fnum2 Fexp2 H' H'0; rewrite H'0; rewrite H'0 in H'.",
            "VernacExtend",
            "8f4aa6d27fc8383b1ffde2b0f7e66c692077b976"
        ],
        [
            "cut (Fnum1 = Fnum2).",
            "VernacExtend",
            "11f1dd9ae5ef1449dad067e149b0500a10529d16"
        ],
        [
            "intros H'1; rewrite <- H'1; auto.",
            "VernacExtend",
            "b97e1ba3cdbffaea0a80d70b061a55d9e2f9fe66"
        ],
        [
            "apply eq_IZR; auto.",
            "VernacExtend",
            "6ecaf93fc8c93b03fd382527d6c6c4338d10f14f"
        ],
        [
            "apply Rmult_eq_reg_l with (r := powerRZ radix Fexp1); repeat rewrite (Rmult_comm (powerRZ radix Fexp1)); auto.",
            "VernacExtend",
            "21a4efd8ce7f347d7d771711bad82ad0ed2f78b7"
        ],
        [
            "apply Rlt_dichotomy_converse; right; auto with real.",
            "VernacExtend",
            "86242c495c92fb51cdb805e9aeefec5828065b40"
        ],
        [
            "red in |- *; auto with real.",
            "VernacExtend",
            "1ad5623426f993f83c5fa8ec3e52ed5a1cbfa08e"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Theorem FshiftFdigit : forall (n : nat) (x : float), ~ is_Fzero x -> Fdigit (Fshift n x) = Fdigit x + n.",
            "VernacStartTheoremProof",
            "b335618803156bb7f23cddaa8ec6adc341c2f4ea"
        ],
        [
            "intros n x; case x; unfold Fshift, Fdigit, is_Fzero in |- *; simpl in |- *.",
            "VernacExtend",
            "675cec0327145a0490a6d228c01bc8afe16b61f0"
        ],
        [
            "intros p1 p2 H; apply digitAdd; auto.",
            "VernacExtend",
            "27cbf852ecd1272edadbfeab48fbfc0e3c45e2d6"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Theorem FshiftCorrect : forall (n : nat) (x : float), Fshift n x = x :>R.",
            "VernacStartTheoremProof",
            "a7face858396e7e6b5ae08fc495ca8fd7bee8cab"
        ],
        [
            "intros n x; unfold FtoR in |- *; simpl in |- *.",
            "VernacExtend",
            "8bc8dea1a69019ec9d5569b3ce4d97df01b6b147"
        ],
        [
            "rewrite Rmult_IZR.",
            "VernacExtend",
            "b795c3b06d24e235dcd0b237a976408f905ddd8d"
        ],
        [
            "rewrite Zpower_nat_Z_powerRZ; auto.",
            "VernacExtend",
            "b4210b76ad7981cf39be014663caa71cdda08eab"
        ],
        [
            "repeat rewrite Rmult_assoc.",
            "VernacExtend",
            "9a62b3359051e53192153e7bfe542316dbd712a8"
        ],
        [
            "rewrite <- powerRZ_add; auto with real zarith.",
            "VernacExtend",
            "6287894e7857c98d78d94546c9dc60a4fd443706"
        ],
        [
            "rewrite Zplus_minus; auto.",
            "VernacExtend",
            "3780ae6a36bb19f58b230be5a2d438cffe63e01f"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Theorem FshiftCorrectInv : forall x y : float, x = y :>R -> (Fexp x <= Fexp y)%Z -> Fshift (Zabs_nat (Fexp y - Fexp x)) y = x.",
            "VernacStartTheoremProof",
            "02399040e800bcb688bc6d6bd9adda1cf795f515"
        ],
        [
            "intros x y H' H'0; try apply sameExpEq; auto.",
            "VernacExtend",
            "cdea8216a8f02ca397f72157332143f3c3bc55c2"
        ],
        [
            "apply trans_eq with (y := FtoR y); auto.",
            "VernacExtend",
            "3eee8616ff96e05f4249d2bfbb1ff94c244c518c"
        ],
        [
            "apply FshiftCorrect.",
            "VernacExtend",
            "671a207f96f83ff1d4924e43fe5d8b99b5368e55"
        ],
        [
            "generalize H' H'0; case x; case y; simpl in |- *; clear H' H'0 x y.",
            "VernacExtend",
            "61e1cd7d2962f75e4c8f6060ceb2ab4ac6a1b74f"
        ],
        [
            "intros Fnum1 Fexp1 Fnum2 Fexp2 H' H'0; rewrite inj_abs; auto with zarith.",
            "VernacExtend",
            "8ccecd50bc60155002e1e6751c6d4c274657aef2"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Theorem FshiftO : forall x : float, Fshift 0 x = x.",
            "VernacStartTheoremProof",
            "9b1b7e2eac3738f059bc0869743665e337956d48"
        ],
        [
            "intros x; unfold Fshift in |- *; apply floatEq; simpl in |- *.",
            "VernacExtend",
            "e82921c0660042a23e0c462449e9e0f5425baf83"
        ],
        [
            "replace (Zpower_nat radix 0) with 1%Z; auto with zarith.",
            "VernacExtend",
            "04424ab00abc7bc5f1b50abd17495d709398c8d5"
        ],
        [
            "simpl in |- *; auto with zarith.",
            "VernacExtend",
            "61d3cdc6299cf8abf87703c074ca4503f0f27a12"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Theorem FshiftCorrectSym : forall x y : float, x = y :>R -> exists n : nat, (exists m : nat, Fshift n x = Fshift m y).",
            "VernacStartTheoremProof",
            "be0a571971ae6d5f96df5537422f8a4a6fbe97d5"
        ],
        [
            "intros x y H'.",
            "VernacExtend",
            "88ac6800dbe81ee0042311fe3134d6c8111dc7cf"
        ],
        [
            "case (Z_le_gt_dec (Fexp x) (Fexp y)); intros H'1.",
            "VernacExtend",
            "569774e6107a5b08a22e3fb00e9113bdee965160"
        ],
        [
            "exists 0; exists (Zabs_nat (Fexp y - Fexp x)).",
            "VernacExtend",
            "093128e711767da7018d91a78c5008a3af51296a"
        ],
        [
            "rewrite FshiftO.",
            "VernacExtend",
            "664e395a3544acbe56fdca8edbec96960353c85e"
        ],
        [
            "apply sym_equal.",
            "VernacExtend",
            "c17550e3f7c4c9c406c00d64da9614cfdcfa6161"
        ],
        [
            "apply FshiftCorrectInv; auto.",
            "VernacExtend",
            "54f9c93b31312d7298334d01597b08843db60baf"
        ],
        [
            "exists (Zabs_nat (Fexp x - Fexp y)); exists 0.",
            "VernacExtend",
            "0b15fbf378d766ee6ae56f474cfa3f3c807ec8e7"
        ],
        [
            "rewrite FshiftO.",
            "VernacExtend",
            "664e395a3544acbe56fdca8edbec96960353c85e"
        ],
        [
            "apply FshiftCorrectInv; auto with zarith.",
            "VernacExtend",
            "26c7d8066fcc7726af93a3fc167aed4eb07e44d3"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Theorem FshiftAdd : forall (n m : nat) (p : float), Fshift (n + m) p = Fshift n (Fshift m p).",
            "VernacStartTheoremProof",
            "b3f006a5274367ffdac2bb5b06756e3945713b30"
        ],
        [
            "intros n m p; case p; unfold Fshift in |- *; simpl in |- *.",
            "VernacExtend",
            "a0867aa9fb2791a6e51893dd7747568fa6df572a"
        ],
        [
            "intros Fnum1 Fexp1; apply floatEq; simpl in |- *; auto with zarith.",
            "VernacExtend",
            "f18c7855ee3af87e371ad1122975f99e125691c1"
        ],
        [
            "rewrite Zpower_nat_is_exp; auto with zarith.",
            "VernacExtend",
            "e1aa9c40a009f4bbc12128519c4c0308520c9937"
        ],
        [
            "rewrite (Zmult_comm (Zpower_nat radix n)); auto with zarith.",
            "VernacExtend",
            "ac596e8b23f9e7d21b81f696fcb762e425eb656a"
        ],
        [
            "rewrite <- (Zminus_plus_simpl_r (Fexp1 - m) n m).",
            "VernacExtend",
            "751a816d6d9507d684ebdcbcab637ad14fbdb61f"
        ],
        [
            "replace (Fexp1 - m + m)%Z with Fexp1; auto with zarith.",
            "VernacExtend",
            "3a10623c520a5e06ed127f779c0fade940ea5632"
        ],
        [
            "replace (Z_of_nat (n + m)) with (n + m)%Z; auto with zarith arith.",
            "VernacExtend",
            "46b40c336dc489454cbd245764459fc0410b2441"
        ],
        [
            "rewrite <- inj_plus; auto.",
            "VernacExtend",
            "80949a8d24f473a839286add2774fe0a349d12b9"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Theorem ReqGivesEqwithSameExp : forall p q : float, exists r : float, (exists s : float, p = r :>R /\\ q = s :>R /\\ Fexp r = Fexp s).",
            "VernacStartTheoremProof",
            "82ab24c606bada96ee596e6721d50e1fe8d5562c"
        ],
        [
            "intros p q; exists (Fshift (Zabs_nat (Fexp p - Zmin (Fexp p) (Fexp q))) p); exists (Fshift (Zabs_nat (Fexp q - Zmin (Fexp p) (Fexp q))) q); repeat split; auto with real.",
            "VernacExtend",
            "670e7a15e3bc4a69e9f764af1ddea81d40a82610"
        ],
        [
            "rewrite FshiftCorrect; auto.",
            "VernacExtend",
            "a32fc58b728c0efc747f4947893df95ea3a250c0"
        ],
        [
            "rewrite FshiftCorrect; auto.",
            "VernacExtend",
            "a32fc58b728c0efc747f4947893df95ea3a250c0"
        ],
        [
            "simpl in |- *.",
            "VernacExtend",
            "1b93169f4cf876d207c1fab22a2347202ab48d85"
        ],
        [
            "replace (Z_of_nat (Zabs_nat (Fexp p - Zmin (Fexp p) (Fexp q)))) with (Fexp p - Zmin (Fexp p) (Fexp q))%Z.",
            "VernacExtend",
            "3d57e62d0df29210d9aaaa1aa7f36c70fcf7b754"
        ],
        [
            "replace (Z_of_nat (Zabs_nat (Fexp q - Zmin (Fexp p) (Fexp q)))) with (Fexp q - Zmin (Fexp p) (Fexp q))%Z.",
            "VernacExtend",
            "dc76ab63678313deabff9e221d743bef79cb42a7"
        ],
        [
            "case (Zmin_or (Fexp p) (Fexp q)); intros H'; rewrite H'; auto with zarith.",
            "VernacExtend",
            "51bf63a7df0451f9a58d30c4094abf95c2511bd6"
        ],
        [
            "rewrite inj_abs; auto.",
            "VernacExtend",
            "16d1a62dc5288156f6709cea7b377c677cf15691"
        ],
        [
            "apply Zplus_le_reg_l with (p := Zmin (Fexp p) (Fexp q)); auto with zarith.",
            "VernacExtend",
            "baad765a56dc3da5c2cf7a6b9512a4b6f6db72ac"
        ],
        [
            "generalize (Zle_min_r (Fexp p) (Fexp q)); auto with zarith.",
            "VernacExtend",
            "e2f37d23a5d153e21d1febc3769f4c75d141bef9"
        ],
        [
            "rewrite inj_abs; auto.",
            "VernacExtend",
            "16d1a62dc5288156f6709cea7b377c677cf15691"
        ],
        [
            "apply Zplus_le_reg_l with (p := Zmin (Fexp p) (Fexp q)); auto with zarith.",
            "VernacExtend",
            "baad765a56dc3da5c2cf7a6b9512a4b6f6db72ac"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Theorem FdigitEq : forall x y : float, ~ is_Fzero x -> x = y :>R -> Fdigit x = Fdigit y -> x = y.",
            "VernacStartTheoremProof",
            "e1860e3a9990f153e73220b27b975218e29f6208"
        ],
        [
            "intros x y H' H'0 H'1.",
            "VernacExtend",
            "4c16d2c4f41f6714262c2724ba554938a9d738cd"
        ],
        [
            "cut (~ is_Fzero y); [ intros NZy | idtac ].",
            "VernacExtend",
            "655ce44b1a2f4a90e93a8e7fabc0c08558ee2823"
        ],
        [
            "2: red in |- *; intros H'2; case H'.",
            "VernacExtend",
            "de690a93fc2d7d807c064d57fef016cfed90f886"
        ],
        [
            "2: apply is_Fzero_rep2; rewrite H'0; apply is_Fzero_rep1; auto.",
            "VernacExtend",
            "205ce7b5ec86b0ba5ea6c54a3ef4484e1c86a83a"
        ],
        [
            "case (Zle_or_lt (Fexp x) (Fexp y)); intros Eq1.",
            "VernacExtend",
            "2757f4bf66d952f745d1409d7cd83da7d21d5792"
        ],
        [
            "case (Zle_lt_or_eq _ _ Eq1); clear Eq1; intros Eq1.",
            "VernacExtend",
            "13dae07a1a4a889758cf9aac723f90e35fb0f1b8"
        ],
        [
            "absurd (Fdigit (Fshift (Zabs_nat (Fexp y - Fexp x)) y) = Fdigit y + Zabs_nat (Fexp y - Fexp x)).",
            "VernacExtend",
            "b004adbab215d3214ae316d61e3b1ec2adc74c04"
        ],
        [
            "rewrite FshiftCorrectInv; auto.",
            "VernacExtend",
            "087ab2a0b57c90b3d93a00f3078765919600c662"
        ],
        [
            "rewrite <- H'1.",
            "VernacExtend",
            "72f25f27aa9f4989786041bbf0f442a67cdb1785"
        ],
        [
            "red in |- *; intros H'2.",
            "VernacExtend",
            "29798b4cb13ef1e364d399e1c3d559bb1deae4ac"
        ],
        [
            "absurd (0%Z = (Fexp y - Fexp x)%Z); auto with zarith arith.",
            "VernacExtend",
            "0aaebad72fedaa6a22ff062f732d967bd74a91e4"
        ],
        [
            "rewrite <- (inj_abs (Fexp y - Fexp x)); auto with zarith.",
            "VernacExtend",
            "47c35aca7edb75fdeced01347afdd1b2ca5becbf"
        ],
        [
            "apply Zlt_le_weak; auto.",
            "VernacExtend",
            "60fd88d4b2f836d8e901a6d2ea5fb743b2c60d9d"
        ],
        [
            "apply FshiftFdigit; auto.",
            "VernacExtend",
            "7c639578f4fc5b2f84af1ff30727621006863c82"
        ],
        [
            "apply sameExpEq; auto.",
            "VernacExtend",
            "fe15555bbd410f413b0ed9727b0a07b74d32a5bd"
        ],
        [
            "absurd (Fdigit (Fshift (Zabs_nat (Fexp x - Fexp y)) x) = Fdigit x + Zabs_nat (Fexp x - Fexp y)).",
            "VernacExtend",
            "3ca936f468a93af5053f623797ba98140d9cd5cc"
        ],
        [
            "rewrite FshiftCorrectInv; auto.",
            "VernacExtend",
            "087ab2a0b57c90b3d93a00f3078765919600c662"
        ],
        [
            "rewrite <- H'1.",
            "VernacExtend",
            "72f25f27aa9f4989786041bbf0f442a67cdb1785"
        ],
        [
            "red in |- *; intros H'2.",
            "VernacExtend",
            "29798b4cb13ef1e364d399e1c3d559bb1deae4ac"
        ],
        [
            "absurd (0%Z = (Fexp x - Fexp y)%Z); auto with zarith arith.",
            "VernacExtend",
            "7638a3bd0bf44237649e22cc7f418adc8d57a872"
        ],
        [
            "rewrite <- (inj_abs (Fexp x - Fexp y)); auto with zarith.",
            "VernacExtend",
            "13b840488f50292073418a8971866c9abaff31fb"
        ],
        [
            "apply Zlt_le_weak; auto.",
            "VernacExtend",
            "60fd88d4b2f836d8e901a6d2ea5fb743b2c60d9d"
        ],
        [
            "apply FshiftFdigit; auto.",
            "VernacExtend",
            "7c639578f4fc5b2f84af1ff30727621006863c82"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "End definitions.",
            "VernacEndSegment",
            "5fb3137667be6315275ff521d58fdbace0980737"
        ],
        [
            "Hint Resolve Rlt_monotony_exp Rle_monotone_exp: real.",
            "VernacHints",
            "08b450bbb644a65804114aeb17c71e60d19914f3"
        ],
        [
            "Hint Resolve Zlt_not_eq Zlt_not_eq_rev: zarith.",
            "VernacHints",
            "57948fe468fa5deb7e6bc5bda10ed7f0e6613223"
        ]
    ],
    "proofs": [
        {
            "name": "floatEq",
            "line_nb": 9,
            "steps": [
                {
                    "command": [
                        "intros p q; case p; case q; simpl in |- *; intros; apply (f_equal2 (A1:=Z) (A2:=Z)); auto.",
                        "VernacExtend",
                        "6e4b2c5d5a13dd177a8eff69ceabf2642108e88f"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "floatDec",
            "line_nb": 12,
            "steps": [
                {
                    "command": [
                        "intros x y; case x; case y; intros Fnum2 Fexp2 Fnum1 Fexp1.",
                        "VernacExtend",
                        "463b4bd64cc084436fed4e3ea5959d79574d5410"
                    ]
                },
                {
                    "command": [
                        "case (Z_eq_dec Fnum1 Fnum2); intros H1.",
                        "VernacExtend",
                        "7de907ce72a6234450051a497f092812beee5825"
                    ]
                },
                {
                    "command": [
                        "case (Z_eq_dec Fexp1 Fexp2); intros H2.",
                        "VernacExtend",
                        "0314ca299e654cce3569bdbff3a69c94f137d568"
                    ]
                },
                {
                    "command": [
                        "left; apply floatEq; auto.",
                        "VernacExtend",
                        "f5dfd4d26c769fa842925e8b5e10f521f2f7ac1e"
                    ]
                },
                {
                    "command": [
                        "right; red in |- *; intros H'; Contradict H2; inversion H'; auto.",
                        "VernacExtend",
                        "3b882fd6d8c9ba0d3ecba13a31b393eec3653a8a"
                    ]
                },
                {
                    "command": [
                        "right; red in |- *; intros H'; Contradict H1; inversion H'; auto.",
                        "VernacExtend",
                        "d2e0905bd0d64db3e08aaac4c106fda1282c8c51"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "is_FzeroP",
            "line_nb": 22,
            "steps": [
                {
                    "command": [
                        "unfold is_Fzero in |- *; intro; CaseEq (Fnum x); intros; (right; discriminate) || (left; auto).",
                        "VernacExtend",
                        "c9d90747e2de296fbe1a09b7469d2d42e5dae929"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "FzeroisReallyZero",
            "line_nb": 30,
            "steps": [
                {
                    "command": [
                        "intros z; unfold FtoR in |- *; simpl in |- *; auto with real.",
                        "VernacExtend",
                        "ba28a93063accf6c2c81091e816c533938ce0c23"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "is_Fzero_rep1",
            "line_nb": 33,
            "steps": [
                {
                    "command": [
                        "intros x H; unfold FtoR in |- *.",
                        "VernacExtend",
                        "02827cd5d8ff92decb8b07e829fb6d3b1eacb25d"
                    ]
                },
                {
                    "command": [
                        "red in H; rewrite H; simpl in |- *; auto with real.",
                        "VernacExtend",
                        "6373405e979e83d947873d8c18d97f33a09a4347"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "LtFnumZERO",
            "line_nb": 37,
            "steps": [
                {
                    "command": [
                        "intros x; case x; unfold FtoR in |- *; simpl in |- *.",
                        "VernacExtend",
                        "ddac377375515b2767ec5d755d6c1b718a30ced6"
                    ]
                },
                {
                    "command": [
                        "intros Fnum1 Fexp1 H'; replace 0%R with (Fnum1 * 0)%R; [ apply Rmult_lt_compat_l | ring ]; auto with real zarith.",
                        "VernacExtend",
                        "f65f80c17aede5e5725489514e95c8aa61281a26"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "is_Fzero_rep2",
            "line_nb": 41,
            "steps": [
                {
                    "command": [
                        "intros x H'.",
                        "VernacExtend",
                        "1864e43355295bd98e7920f89fb20cbad05f10d7"
                    ]
                },
                {
                    "command": [
                        "case (Rmult_integral _ _ H'); simpl in |- *; auto.",
                        "VernacExtend",
                        "ec8c1190a5f6a1755aca312d4670d70d924485df"
                    ]
                },
                {
                    "command": [
                        "case x; simpl in |- *.",
                        "VernacExtend",
                        "ac556baa07e2d67f8221632e8bae17e399d81025"
                    ]
                },
                {
                    "command": [
                        "intros Fnum1 Fexp1 H'0; red in |- *; simpl in |- *; auto with real zarith.",
                        "VernacExtend",
                        "df1ec2ca039f8224492de8565d43d0e03dd572fd"
                    ]
                },
                {
                    "command": [
                        "apply eq_IZR_R0; auto.",
                        "VernacExtend",
                        "7d970fea41d0a4340161ddfeb57bda26fce47bdc"
                    ]
                },
                {
                    "command": [
                        "intros H'0; Contradict H'0; apply powerRZ_NOR; auto with real zarith.",
                        "VernacExtend",
                        "3f835e986daa7a61fc4495e4a505f0691ee29c60"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "NisFzeroComp",
            "line_nb": 49,
            "steps": [
                {
                    "command": [
                        "intros x y H' H'0; Contradict H'.",
                        "VernacExtend",
                        "7131a55919f94d5a116701dded017fca5458e412"
                    ]
                },
                {
                    "command": [
                        "apply is_Fzero_rep2; auto.",
                        "VernacExtend",
                        "bbf0dbe1b41bcd08e87d8edeb3563716035dee02"
                    ]
                },
                {
                    "command": [
                        "rewrite H'0.",
                        "VernacExtend",
                        "155943e97f3d58c39d0b7dc8dbaf42688f94c62f"
                    ]
                },
                {
                    "command": [
                        "apply is_Fzero_rep1; auto.",
                        "VernacExtend",
                        "5a1dd66bed2095933ba7b670a4c41a625c17102f"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "Rlt_monotony_exp",
            "line_nb": 55,
            "steps": [
                {
                    "command": [
                        "intros x y z H'; apply Rmult_lt_compat_r; auto with real zarith.",
                        "VernacExtend",
                        "52eab2dc79d9f9972008611eb3356420f5b8c257"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "Rle_monotone_exp",
            "line_nb": 58,
            "steps": [
                {
                    "command": [
                        "intros x y z H'; apply Rmult_le_compat_r; auto with real zarith.",
                        "VernacExtend",
                        "3310233f9d4966af821ccf5396af98888fbef566"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "Rlt_monotony_contra_exp",
            "line_nb": 61,
            "steps": [
                {
                    "command": [
                        "intros x y z H'; apply Rmult_lt_reg_l with (r := powerRZ radix z); auto with real zarith.",
                        "VernacExtend",
                        "1a92a0bd62c7320b3afad4eecbd82ecc4f2c7b3d"
                    ]
                },
                {
                    "command": [
                        "repeat rewrite (Rmult_comm (powerRZ radix z)); auto.",
                        "VernacExtend",
                        "06709ae6e3eafa2352c0666d418241843c0d6ca2"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "Rle_monotony_contra_exp",
            "line_nb": 65,
            "steps": [
                {
                    "command": [
                        "intros x y z H'; apply Rmult_le_reg_l with (r := powerRZ radix z); auto with real zarith.",
                        "VernacExtend",
                        "85bc8eb770ff161da6617300f5c96b042ff25d75"
                    ]
                },
                {
                    "command": [
                        "repeat rewrite (Rmult_comm (powerRZ radix z)); auto.",
                        "VernacExtend",
                        "06709ae6e3eafa2352c0666d418241843c0d6ca2"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "FtoREqInv1",
            "line_nb": 69,
            "steps": [
                {
                    "command": [
                        "intros p q H' H'0 H'1.",
                        "VernacExtend",
                        "05c3e1b098970ef14e38b413a09ed550ca5b4d53"
                    ]
                },
                {
                    "command": [
                        "apply floatEq; auto.",
                        "VernacExtend",
                        "c847d668791777965ba33ea03f8c58569a27270b"
                    ]
                },
                {
                    "command": [
                        "unfold FtoR in H'0.",
                        "VernacExtend",
                        "00c0b54623f044148b7f630709ab916098477561"
                    ]
                },
                {
                    "command": [
                        "apply Rpow_eq_inv with (r := IZR radix); auto 6 with real zarith.",
                        "VernacExtend",
                        "4e98375691635dc76a168f1fdc79a24993fd60a9"
                    ]
                },
                {
                    "command": [
                        "apply Rlt_dichotomy_converse; right; red in |- *.",
                        "VernacExtend",
                        "5e6cb8110820439778b09c01c34537a9f0ba2a54"
                    ]
                },
                {
                    "command": [
                        "unfold Rabs in |- *; case (Rcase_abs radix).",
                        "VernacExtend",
                        "9cd72a2161e70edcc6464ef28cf6e9fd4450f1db"
                    ]
                },
                {
                    "command": [
                        "intros H'2; Contradict H'2; apply Rle_not_lt; apply Ropp_le_cancel; auto with real.",
                        "VernacExtend",
                        "8640f0d770f50c42bd6779c19a211e3a7e5634b7"
                    ]
                },
                {
                    "command": [
                        "intros H'2; replace 1%R with (IZR 1); auto with real zarith.",
                        "VernacExtend",
                        "0508ed8d27476e9a1cb6973aeaf1ef563002bf73"
                    ]
                },
                {
                    "command": [
                        "apply Rmult_eq_reg_l with (r := IZR (Fnum p)); auto with real.",
                        "VernacExtend",
                        "b5a5a9dabfcf7be5a062316bd35e803797e7f115"
                    ]
                },
                {
                    "command": [
                        "pattern (Fnum p) at 2 in |- *; rewrite H'1; auto.",
                        "VernacExtend",
                        "01501b59aea99d2853ac3cf152256ad562190b95"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "FtoREqInv2",
            "line_nb": 81,
            "steps": [
                {
                    "command": [
                        "intros p q H' H'0.",
                        "VernacExtend",
                        "7ea1365154d917a427c6781fa2515333f91063e3"
                    ]
                },
                {
                    "command": [
                        "apply floatEq; auto.",
                        "VernacExtend",
                        "c847d668791777965ba33ea03f8c58569a27270b"
                    ]
                },
                {
                    "command": [
                        "apply eq_IZR; auto.",
                        "VernacExtend",
                        "6ecaf93fc8c93b03fd382527d6c6c4338d10f14f"
                    ]
                },
                {
                    "command": [
                        "apply Rmult_eq_reg_l with (r := powerRZ radix (Fexp p)); auto with real zarith.",
                        "VernacExtend",
                        "2a03e9fc5f283a2b1b39262cc75288c22fa5ec15"
                    ]
                },
                {
                    "command": [
                        "repeat rewrite (Rmult_comm (powerRZ radix (Fexp p))); pattern (Fexp p) at 2 in |- *; rewrite H'0; auto with real zarith.",
                        "VernacExtend",
                        "5052b264571b3774a232e72f91b2006ce170f5cc"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "Rlt_Float_Zlt",
            "line_nb": 88,
            "steps": [
                {
                    "command": [
                        "intros p q r H'.",
                        "VernacExtend",
                        "f8dc4bc5ae9a7c9eed7695be49af8a41471a7279"
                    ]
                },
                {
                    "command": [
                        "apply lt_IZR.",
                        "VernacExtend",
                        "165b941162ea1938aa71e78f57835b8df85de779"
                    ]
                },
                {
                    "command": [
                        "apply Rlt_monotony_contra_exp with (z := r); auto with real.",
                        "VernacExtend",
                        "6fbe33973e986b3ff69ef855a47f8fa95b4660d3"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "Rle_Float_Zle",
            "line_nb": 93,
            "steps": [
                {
                    "command": [
                        "intros p q r H'.",
                        "VernacExtend",
                        "f8dc4bc5ae9a7c9eed7695be49af8a41471a7279"
                    ]
                },
                {
                    "command": [
                        "apply le_IZR.",
                        "VernacExtend",
                        "b9b46c6b2f4d4157bed90857db2b9c3ba33486ad"
                    ]
                },
                {
                    "command": [
                        "apply Rle_monotony_contra_exp with (z := r); auto with real.",
                        "VernacExtend",
                        "b8934d18c1c9f60f494a1c24891149771aed91c6"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "oneExp_le",
            "line_nb": 98,
            "steps": [
                {
                    "command": [
                        "intros x y H'; unfold FtoR in |- *; simpl in |- *.",
                        "VernacExtend",
                        "de955e5395ccddfda58aac4e38719340a6e016e6"
                    ]
                },
                {
                    "command": [
                        "repeat rewrite Rmult_1_l; auto with real zarith.",
                        "VernacExtend",
                        "6d184180a3af0be92dd057386a134f98f19fc64a"
                    ]
                },
                {
                    "command": [
                        "apply Rle_powerRZ; try replace 1%R with (IZR 1); auto with real zarith zarith.",
                        "VernacExtend",
                        "c70472f576fce1787e6d0cda60aa891948379066"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "oneExp_lt",
            "line_nb": 103,
            "steps": [
                {
                    "command": [
                        "intros x y H'; unfold FtoR in |- *; simpl in |- *.",
                        "VernacExtend",
                        "de955e5395ccddfda58aac4e38719340a6e016e6"
                    ]
                },
                {
                    "command": [
                        "repeat rewrite Rmult_1_l; auto with real zarith.",
                        "VernacExtend",
                        "6d184180a3af0be92dd057386a134f98f19fc64a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "oneExp_Zlt",
            "line_nb": 107,
            "steps": [
                {
                    "command": [
                        "intros x y H'; case (Zle_or_lt y x); auto; intros ZH; Contradict H'.",
                        "VernacExtend",
                        "c3a7992b0aa109b7a5b3ebf39ea8c2105aa6111a"
                    ]
                },
                {
                    "command": [
                        "apply Rle_not_lt; apply oneExp_le; auto.",
                        "VernacExtend",
                        "211a0f114f21fa0c152c1e6a34f7637224b2d8cc"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "oneExp_Zle",
            "line_nb": 111,
            "steps": [
                {
                    "command": [
                        "intros x y H'; case (Zle_or_lt x y); auto; intros ZH; Contradict H'.",
                        "VernacExtend",
                        "7a88cfc2108723596192237ff072510f9933523f"
                    ]
                },
                {
                    "command": [
                        "apply Rgt_not_le; red in |- *; apply oneExp_lt; auto.",
                        "VernacExtend",
                        "66678f33a6a3d3d424602ba0d4ca511b5d4ac364"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "sameExpEq",
            "line_nb": 117,
            "steps": [
                {
                    "command": [
                        "intros p q; case p; case q; unfold FtoR in |- *; simpl in |- *.",
                        "VernacExtend",
                        "6ee3e28721adc508639601347fd505edfc23614a"
                    ]
                },
                {
                    "command": [
                        "intros Fnum1 Fexp1 Fnum2 Fexp2 H' H'0; rewrite H'0; rewrite H'0 in H'.",
                        "VernacExtend",
                        "8f4aa6d27fc8383b1ffde2b0f7e66c692077b976"
                    ]
                },
                {
                    "command": [
                        "cut (Fnum1 = Fnum2).",
                        "VernacExtend",
                        "11f1dd9ae5ef1449dad067e149b0500a10529d16"
                    ]
                },
                {
                    "command": [
                        "intros H'1; rewrite <- H'1; auto.",
                        "VernacExtend",
                        "b97e1ba3cdbffaea0a80d70b061a55d9e2f9fe66"
                    ]
                },
                {
                    "command": [
                        "apply eq_IZR; auto.",
                        "VernacExtend",
                        "6ecaf93fc8c93b03fd382527d6c6c4338d10f14f"
                    ]
                },
                {
                    "command": [
                        "apply Rmult_eq_reg_l with (r := powerRZ radix Fexp1); repeat rewrite (Rmult_comm (powerRZ radix Fexp1)); auto.",
                        "VernacExtend",
                        "21a4efd8ce7f347d7d771711bad82ad0ed2f78b7"
                    ]
                },
                {
                    "command": [
                        "apply Rlt_dichotomy_converse; right; auto with real.",
                        "VernacExtend",
                        "86242c495c92fb51cdb805e9aeefec5828065b40"
                    ]
                },
                {
                    "command": [
                        "red in |- *; auto with real.",
                        "VernacExtend",
                        "1ad5623426f993f83c5fa8ec3e52ed5a1cbfa08e"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "FshiftFdigit",
            "line_nb": 127,
            "steps": [
                {
                    "command": [
                        "intros n x; case x; unfold Fshift, Fdigit, is_Fzero in |- *; simpl in |- *.",
                        "VernacExtend",
                        "675cec0327145a0490a6d228c01bc8afe16b61f0"
                    ]
                },
                {
                    "command": [
                        "intros p1 p2 H; apply digitAdd; auto.",
                        "VernacExtend",
                        "27cbf852ecd1272edadbfeab48fbfc0e3c45e2d6"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "FshiftCorrectInv",
            "line_nb": 139,
            "steps": [
                {
                    "command": [
                        "intros x y H' H'0; try apply sameExpEq; auto.",
                        "VernacExtend",
                        "cdea8216a8f02ca397f72157332143f3c3bc55c2"
                    ]
                },
                {
                    "command": [
                        "apply trans_eq with (y := FtoR y); auto.",
                        "VernacExtend",
                        "3eee8616ff96e05f4249d2bfbb1ff94c244c518c"
                    ]
                },
                {
                    "command": [
                        "apply FshiftCorrect.",
                        "VernacExtend",
                        "671a207f96f83ff1d4924e43fe5d8b99b5368e55"
                    ]
                },
                {
                    "command": [
                        "generalize H' H'0; case x; case y; simpl in |- *; clear H' H'0 x y.",
                        "VernacExtend",
                        "61e1cd7d2962f75e4c8f6060ceb2ab4ac6a1b74f"
                    ]
                },
                {
                    "command": [
                        "intros Fnum1 Fexp1 Fnum2 Fexp2 H' H'0; rewrite inj_abs; auto with zarith.",
                        "VernacExtend",
                        "8ccecd50bc60155002e1e6751c6d4c274657aef2"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "FshiftO",
            "line_nb": 146,
            "steps": [
                {
                    "command": [
                        "intros x; unfold Fshift in |- *; apply floatEq; simpl in |- *.",
                        "VernacExtend",
                        "e82921c0660042a23e0c462449e9e0f5425baf83"
                    ]
                },
                {
                    "command": [
                        "replace (Zpower_nat radix 0) with 1%Z; auto with zarith.",
                        "VernacExtend",
                        "04424ab00abc7bc5f1b50abd17495d709398c8d5"
                    ]
                },
                {
                    "command": [
                        "simpl in |- *; auto with zarith.",
                        "VernacExtend",
                        "61d3cdc6299cf8abf87703c074ca4503f0f27a12"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "FshiftCorrectSym",
            "line_nb": 151,
            "steps": [
                {
                    "command": [
                        "intros x y H'.",
                        "VernacExtend",
                        "88ac6800dbe81ee0042311fe3134d6c8111dc7cf"
                    ]
                },
                {
                    "command": [
                        "case (Z_le_gt_dec (Fexp x) (Fexp y)); intros H'1.",
                        "VernacExtend",
                        "569774e6107a5b08a22e3fb00e9113bdee965160"
                    ]
                },
                {
                    "command": [
                        "exists 0; exists (Zabs_nat (Fexp y - Fexp x)).",
                        "VernacExtend",
                        "093128e711767da7018d91a78c5008a3af51296a"
                    ]
                },
                {
                    "command": [
                        "rewrite FshiftO.",
                        "VernacExtend",
                        "664e395a3544acbe56fdca8edbec96960353c85e"
                    ]
                },
                {
                    "command": [
                        "apply sym_equal.",
                        "VernacExtend",
                        "c17550e3f7c4c9c406c00d64da9614cfdcfa6161"
                    ]
                },
                {
                    "command": [
                        "apply FshiftCorrectInv; auto.",
                        "VernacExtend",
                        "54f9c93b31312d7298334d01597b08843db60baf"
                    ]
                },
                {
                    "command": [
                        "exists (Zabs_nat (Fexp x - Fexp y)); exists 0.",
                        "VernacExtend",
                        "0b15fbf378d766ee6ae56f474cfa3f3c807ec8e7"
                    ]
                },
                {
                    "command": [
                        "rewrite FshiftO.",
                        "VernacExtend",
                        "664e395a3544acbe56fdca8edbec96960353c85e"
                    ]
                },
                {
                    "command": [
                        "apply FshiftCorrectInv; auto with zarith.",
                        "VernacExtend",
                        "26c7d8066fcc7726af93a3fc167aed4eb07e44d3"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "FshiftAdd",
            "line_nb": 162,
            "steps": [
                {
                    "command": [
                        "intros n m p; case p; unfold Fshift in |- *; simpl in |- *.",
                        "VernacExtend",
                        "a0867aa9fb2791a6e51893dd7747568fa6df572a"
                    ]
                },
                {
                    "command": [
                        "intros Fnum1 Fexp1; apply floatEq; simpl in |- *; auto with zarith.",
                        "VernacExtend",
                        "f18c7855ee3af87e371ad1122975f99e125691c1"
                    ]
                },
                {
                    "command": [
                        "rewrite Zpower_nat_is_exp; auto with zarith.",
                        "VernacExtend",
                        "e1aa9c40a009f4bbc12128519c4c0308520c9937"
                    ]
                },
                {
                    "command": [
                        "rewrite (Zmult_comm (Zpower_nat radix n)); auto with zarith.",
                        "VernacExtend",
                        "ac596e8b23f9e7d21b81f696fcb762e425eb656a"
                    ]
                },
                {
                    "command": [
                        "rewrite <- (Zminus_plus_simpl_r (Fexp1 - m) n m).",
                        "VernacExtend",
                        "751a816d6d9507d684ebdcbcab637ad14fbdb61f"
                    ]
                },
                {
                    "command": [
                        "replace (Fexp1 - m + m)%Z with Fexp1; auto with zarith.",
                        "VernacExtend",
                        "3a10623c520a5e06ed127f779c0fade940ea5632"
                    ]
                },
                {
                    "command": [
                        "replace (Z_of_nat (n + m)) with (n + m)%Z; auto with zarith arith.",
                        "VernacExtend",
                        "46b40c336dc489454cbd245764459fc0410b2441"
                    ]
                },
                {
                    "command": [
                        "rewrite <- inj_plus; auto.",
                        "VernacExtend",
                        "80949a8d24f473a839286add2774fe0a349d12b9"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "ReqGivesEqwithSameExp",
            "line_nb": 172,
            "steps": [
                {
                    "command": [
                        "intros p q; exists (Fshift (Zabs_nat (Fexp p - Zmin (Fexp p) (Fexp q))) p); exists (Fshift (Zabs_nat (Fexp q - Zmin (Fexp p) (Fexp q))) q); repeat split; auto with real.",
                        "VernacExtend",
                        "670e7a15e3bc4a69e9f764af1ddea81d40a82610"
                    ]
                },
                {
                    "command": [
                        "rewrite FshiftCorrect; auto.",
                        "VernacExtend",
                        "a32fc58b728c0efc747f4947893df95ea3a250c0"
                    ]
                },
                {
                    "command": [
                        "rewrite FshiftCorrect; auto.",
                        "VernacExtend",
                        "a32fc58b728c0efc747f4947893df95ea3a250c0"
                    ]
                },
                {
                    "command": [
                        "simpl in |- *.",
                        "VernacExtend",
                        "1b93169f4cf876d207c1fab22a2347202ab48d85"
                    ]
                },
                {
                    "command": [
                        "replace (Z_of_nat (Zabs_nat (Fexp p - Zmin (Fexp p) (Fexp q)))) with (Fexp p - Zmin (Fexp p) (Fexp q))%Z.",
                        "VernacExtend",
                        "3d57e62d0df29210d9aaaa1aa7f36c70fcf7b754"
                    ]
                },
                {
                    "command": [
                        "replace (Z_of_nat (Zabs_nat (Fexp q - Zmin (Fexp p) (Fexp q)))) with (Fexp q - Zmin (Fexp p) (Fexp q))%Z.",
                        "VernacExtend",
                        "dc76ab63678313deabff9e221d743bef79cb42a7"
                    ]
                },
                {
                    "command": [
                        "case (Zmin_or (Fexp p) (Fexp q)); intros H'; rewrite H'; auto with zarith.",
                        "VernacExtend",
                        "51bf63a7df0451f9a58d30c4094abf95c2511bd6"
                    ]
                },
                {
                    "command": [
                        "rewrite inj_abs; auto.",
                        "VernacExtend",
                        "16d1a62dc5288156f6709cea7b377c677cf15691"
                    ]
                },
                {
                    "command": [
                        "apply Zplus_le_reg_l with (p := Zmin (Fexp p) (Fexp q)); auto with zarith.",
                        "VernacExtend",
                        "baad765a56dc3da5c2cf7a6b9512a4b6f6db72ac"
                    ]
                },
                {
                    "command": [
                        "generalize (Zle_min_r (Fexp p) (Fexp q)); auto with zarith.",
                        "VernacExtend",
                        "e2f37d23a5d153e21d1febc3769f4c75d141bef9"
                    ]
                },
                {
                    "command": [
                        "rewrite inj_abs; auto.",
                        "VernacExtend",
                        "16d1a62dc5288156f6709cea7b377c677cf15691"
                    ]
                },
                {
                    "command": [
                        "apply Zplus_le_reg_l with (p := Zmin (Fexp p) (Fexp q)); auto with zarith.",
                        "VernacExtend",
                        "baad765a56dc3da5c2cf7a6b9512a4b6f6db72ac"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        }
    ]
}