{
    "filename": "FSucc.v",
    "coq_project": "float",
    "vernac_cmds": [
        [
            "Require Export List.",
            "VernacRequire",
            "d626cb98fe764077098989d26509c9f7407e0464"
        ],
        [
            "Require Export Fnorm.",
            "VernacRequire",
            "ab8e69e3b98f6a8c0b6d6a4bae1c0bc183841546"
        ],
        [
            "Section suc.",
            "VernacBeginSection",
            "f68dd76166a33246c680c1f57fedbc62dc2fb1f0"
        ],
        [
            "Variable b : Fbound.",
            "VernacAssumption",
            "17a11c003f49f819b8cb809f61b140702916486d"
        ],
        [
            "Variable radix : Z.",
            "VernacAssumption",
            "2349b77d134e0c9bb013a8bdca0020ca16fc023b"
        ],
        [
            "Variable precision : nat.",
            "VernacAssumption",
            "2235bc83b7ebf4cbe373b5fa3b4f3c643d454130"
        ],
        [
            "Let FtoRradix := FtoR radix.",
            "VernacDefinition",
            "5aa29a9595c6e9e03b28c6d232299552ec761ad7"
        ],
        [
            "Local Coercion FtoRradix : float >-> R.",
            "VernacCoercion",
            "cec6b845059d434f72dda1a67638af64e1fb0628"
        ],
        [
            "Hypothesis radixMoreThanOne : (1 < radix)%Z.",
            "VernacAssumption",
            "f4d3774b2275f4c4c3af941091d4d99f9a2129aa"
        ],
        [
            "Let radixMoreThanZERO := Zlt_1_O _ (Zlt_le_weak _ _ radixMoreThanOne).",
            "VernacDefinition",
            "b73ccff345a4fc730c8134dcd05adb7f1928fae7"
        ],
        [
            "Hint Resolve radixMoreThanZERO: zarith.",
            "VernacHints",
            "5a4a320eb610749621ef38850390d7141dc0d330"
        ],
        [
            "Hypothesis precisionNotZero : precision <> 0.",
            "VernacAssumption",
            "9ba21dacb7498679bf18b5f2c3b12c5f92dc3727"
        ],
        [
            "Hypothesis pGivesBound : Zpos (vNum b) = Zpower_nat radix precision.",
            "VernacAssumption",
            "d558f967d87d2a42d14158ac115b10c6f5358430"
        ],
        [
            "Definition FSucc (x : float) := match Z_eq_bool (Fnum x) (pPred (vNum b)) with | true => Float (nNormMin radix precision) (Zsucc (Fexp x)) | false => match Z_eq_bool (Fnum x) (- nNormMin radix precision) with | true => match Z_eq_bool (Fexp x) (- dExp b) with | true => Float (Zsucc (Fnum x)) (Fexp x) | false => Float (- pPred (vNum b)) (Zpred (Fexp x)) end | false => Float (Zsucc (Fnum x)) (Fexp x) end end.",
            "VernacDefinition",
            "d7efd4e94ff52969595b7f233901d9158506834d"
        ],
        [
            "Theorem FSuccSimpl1 : forall x : float, Fnum x = pPred (vNum b) -> FSucc x = Float (nNormMin radix precision) (Zsucc (Fexp x)).",
            "VernacStartTheoremProof",
            "d8ad2a286aa6bd0db6ecf0594e2b3037a02c83df"
        ],
        [
            "intros x H'; unfold FSucc in |- *.",
            "VernacExtend",
            "ea9adb614f85ba183d360df5de8924555d701cb3"
        ],
        [
            "generalize (Z_eq_bool_correct (Fnum x) (pPred (vNum b))); case (Z_eq_bool (Fnum x) (pPred (vNum b))); auto.",
            "VernacExtend",
            "0e22c920407495ffc0108e5c5487d09e6823da7e"
        ],
        [
            "intros H'0; Contradict H'0; auto.",
            "VernacExtend",
            "309e0c652fca7ca41fc269e7e4c3bac2313ada79"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Theorem FSuccSimpl2 : forall x : float, Fnum x = (- nNormMin radix precision)%Z -> Fexp x <> (- dExp b)%Z -> FSucc x = Float (- pPred (vNum b)) (Zpred (Fexp x)).",
            "VernacStartTheoremProof",
            "92bd7185f4371bc3c35455b571546a81aeb7d6c2"
        ],
        [
            "intros x H' H'0; unfold FSucc in |- *.",
            "VernacExtend",
            "56d6d415b9d5f0ff648c157f05c6b83a1c89ca07"
        ],
        [
            "generalize (Z_eq_bool_correct (Fnum x) (pPred (vNum b))); case (Z_eq_bool (Fnum x) (pPred (vNum b))); auto.",
            "VernacExtend",
            "0e22c920407495ffc0108e5c5487d09e6823da7e"
        ],
        [
            "intros H'1; absurd (0%nat <= pPred (vNum b))%Z; auto with zarith arith.",
            "VernacExtend",
            "f7617687f77a8515c770e2e3b73d6b5c4a21a732"
        ],
        [
            "rewrite <- H'1; rewrite H'.",
            "VernacExtend",
            "8157238ed70ac73e0f0114e8592200a4a3ad636c"
        ],
        [
            "unfold nNormMin in |- *; simpl in |- *; auto with zarith.",
            "VernacExtend",
            "f1a2b1ca579da6e38101934f0863709239d71326"
        ],
        [
            "replace 0%Z with (- (0))%Z; auto with zarith.",
            "VernacExtend",
            "162b1bf05d51d636bead4defe908a2fbb9b84504"
        ],
        [
            "unfold pPred in |- *; apply Zle_Zpred; auto with zarith.",
            "VernacExtend",
            "4a67c01dc3b485eeff0c4d6012218b209c6aca4a"
        ],
        [
            "intros H'1; generalize (Z_eq_bool_correct (Fnum x) (- nNormMin radix precision)); case (Z_eq_bool (Fnum x) (- nNormMin radix precision)).",
            "VernacExtend",
            "88ff610fa9c1e27a7a9c7e7ff1ae0fcef40d0d0f"
        ],
        [
            "intros H'2; generalize (Z_eq_bool_correct (Fexp x) (- dExp b)); case (Z_eq_bool (Fexp x) (- dExp b)); auto.",
            "VernacExtend",
            "1a95a833b963d3a109b5a145d8460c93b359f404"
        ],
        [
            "intros H'3; Contradict H'0; auto.",
            "VernacExtend",
            "6cce241fa4bfbc07b2ae179350c8cf2aa973116a"
        ],
        [
            "intros H'2; Contradict H'2; auto.",
            "VernacExtend",
            "1aa71754603bb31667514e8c1dbfa39a9f2ebb70"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Theorem FSuccSimpl3 : FSucc (Float (- nNormMin radix precision) (- dExp b)) = Float (Zsucc (- nNormMin radix precision)) (- dExp b).",
            "VernacStartTheoremProof",
            "e499b1cc01d9154a3fe25d6a53ffe2ed3ca18514"
        ],
        [
            "unfold FSucc in |- *; simpl in |- *.",
            "VernacExtend",
            "ffb6e48333a31c8ac4ff339e9b2664df58a76fd2"
        ],
        [
            "generalize (Z_eq_bool_correct (- nNormMin radix precision) (pPred (vNum b))); case (Z_eq_bool (- nNormMin radix precision) (pPred (vNum b))); auto.",
            "VernacExtend",
            "321006d131690a47c10d6d72ff3a3f22491febb6"
        ],
        [
            "intros H'1; absurd (0%nat <= pPred (vNum b))%Z; auto with zarith arith.",
            "VernacExtend",
            "f7617687f77a8515c770e2e3b73d6b5c4a21a732"
        ],
        [
            "rewrite <- H'1.",
            "VernacExtend",
            "72f25f27aa9f4989786041bbf0f442a67cdb1785"
        ],
        [
            "unfold nNormMin in |- *; simpl in |- *; auto with zarith.",
            "VernacExtend",
            "f1a2b1ca579da6e38101934f0863709239d71326"
        ],
        [
            "replace 0%Z with (- (0))%Z; auto with zarith.",
            "VernacExtend",
            "162b1bf05d51d636bead4defe908a2fbb9b84504"
        ],
        [
            "unfold pPred in |- *; apply Zle_Zpred; auto with zarith.",
            "VernacExtend",
            "4a67c01dc3b485eeff0c4d6012218b209c6aca4a"
        ],
        [
            "intros H'; generalize (Z_eq_bool_correct (- nNormMin radix precision) (- nNormMin radix precision)); case (Z_eq_bool (- nNormMin radix precision) (- nNormMin radix precision)).",
            "VernacExtend",
            "0fecf728b3c6fb217a2819fc2523ca6653a71785"
        ],
        [
            "intros H'0; generalize (Z_eq_bool_correct (- dExp b) (- dExp b)); case (Z_eq_bool (- dExp b) (- dExp b)); auto.",
            "VernacExtend",
            "846a265bed88b4fbb4e8d22e51b081d720035268"
        ],
        [
            "intros H'1; Contradict H'1; auto.",
            "VernacExtend",
            "8db85f3016bcb692223b807804acc9e52d044004"
        ],
        [
            "intros H'1; Contradict H'1; auto.",
            "VernacExtend",
            "8db85f3016bcb692223b807804acc9e52d044004"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Theorem FSuccSimpl4 : forall x : float, Fnum x <> pPred (vNum b) -> Fnum x <> (- nNormMin radix precision)%Z -> FSucc x = Float (Zsucc (Fnum x)) (Fexp x).",
            "VernacStartTheoremProof",
            "2863bc65c2d34ace955a295001d1f6fe27dd0190"
        ],
        [
            "intros x H' H'0; unfold FSucc in |- *.",
            "VernacExtend",
            "56d6d415b9d5f0ff648c157f05c6b83a1c89ca07"
        ],
        [
            "generalize (Z_eq_bool_correct (Fnum x) (pPred (vNum b))); case (Z_eq_bool (Fnum x) (pPred (vNum b))); auto.",
            "VernacExtend",
            "0e22c920407495ffc0108e5c5487d09e6823da7e"
        ],
        [
            "intros H'1; Contradict H'; auto.",
            "VernacExtend",
            "df583a974a49b9d26ca786a8b3785e2dd7a4b3d0"
        ],
        [
            "intros H'1; generalize (Z_eq_bool_correct (Fnum x) (- nNormMin radix precision)); case (Z_eq_bool (Fnum x) (- nNormMin radix precision)); auto.",
            "VernacExtend",
            "bb8bb0ea2adc90dc7be4cebcc2a1833de01cc3db"
        ],
        [
            "intros H'2; Contradict H'0; auto.",
            "VernacExtend",
            "5852154b7666463c5197fef05024fa0f18f3fa8a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Theorem FSuccDiff1 : forall x : float, Fnum x <> (- nNormMin radix precision)%Z -> Fminus radix (FSucc x) x = Float 1%nat (Fexp x) :>R.",
            "VernacStartTheoremProof",
            "427aa68fc2c8ac1c7634977492abc3da913a6704"
        ],
        [
            "intros x H'.",
            "VernacExtend",
            "1864e43355295bd98e7920f89fb20cbad05f10d7"
        ],
        [
            "generalize (Z_eq_bool_correct (Fnum x) (pPred (vNum b))); case (Z_eq_bool (Fnum x) (pPred (vNum b))); intros H'1.",
            "VernacExtend",
            "3f7cdd71458cc916cf038e5c4f8ff31cc2e5d672"
        ],
        [
            "rewrite FSuccSimpl1; auto.",
            "VernacExtend",
            "44ac04106f049e90b568a0809ee9f7229a242d83"
        ],
        [
            "unfold FtoRradix, FtoR, Fminus, Fopp, Fplus in |- *; simpl in |- *; auto.",
            "VernacExtend",
            "e1a1952357025203d7f1e50dee207b1c7d0e8e76"
        ],
        [
            "repeat rewrite Zmin_le2; auto with zarith.",
            "VernacExtend",
            "9fbe76bd3c3099f6441a9073bdf3d2440738f0a8"
        ],
        [
            "rewrite <- Zminus_succ_l; repeat rewrite <- Zminus_diag_reverse.",
            "VernacExtend",
            "82faa327247ebd106c055e11f2be69f31aa51c76"
        ],
        [
            "rewrite absolu_Zs; auto with zarith; simpl in |- *.",
            "VernacExtend",
            "3ff6be78771f082196e6f31edf7d39a72c024ebc"
        ],
        [
            "rewrite H'1; unfold pPred in |- *; rewrite pGivesBound; unfold nNormMin in |- *.",
            "VernacExtend",
            "f586ed43cfc6cf8227d65d24060c8572d5ae7034"
        ],
        [
            "replace (Zpower_nat radix (pred precision) * (radix * 1))%Z with (Zpower_nat radix precision).",
            "VernacExtend",
            "c2a14c02506260b8c7b5e48abba24bff8dea229c"
        ],
        [
            "f_equal.",
            "VernacExtend",
            "dfce814d1efcef60f8330516ad88155a3a5ec317"
        ],
        [
            "unfold Zpred.",
            "VernacExtend",
            "da332047e598ac8935604b88f7d4c359e70c4c60"
        ],
        [
            "rewrite Z.opp_add_distr.",
            "VernacExtend",
            "a50b3a64716ba6ce04fc27a04864e3cc89e69412"
        ],
        [
            "rewrite Z.mul_1_r.",
            "VernacExtend",
            "80f92f5dcc09db388a2087f0ef3ff1d16ecdfdff"
        ],
        [
            "rewrite Z.add_assoc.",
            "VernacExtend",
            "29e409a5136d36d9bdb955a7c32d658d7720aea4"
        ],
        [
            "now rewrite Z.add_opp_diag_r.",
            "VernacExtend",
            "5059410b86c21ee45ef4dac6a0b26083b2a159ae"
        ],
        [
            "rewrite Z.mul_1_r.",
            "VernacExtend",
            "80f92f5dcc09db388a2087f0ef3ff1d16ecdfdff"
        ],
        [
            "pattern precision at 1 in |- *; replace precision with (pred precision + 1).",
            "VernacExtend",
            "b4112202e3be8002e7eec984e7280d349c32ce0b"
        ],
        [
            "rewrite Zpower_nat_is_exp; rewrite Zpower_nat_1; auto.",
            "VernacExtend",
            "7c8b45c9dabbf2675beabad0204d78a052418555"
        ],
        [
            "generalize precisionNotZero; case precision; simpl in |- *; auto with zarith arith.",
            "VernacExtend",
            "e60d343fc6ab059f90c6150dcd2529101d85853b"
        ],
        [
            "rewrite FSuccSimpl4; auto.",
            "VernacExtend",
            "2d47fc6c82e2413444df3c5559a82c7fc117184e"
        ],
        [
            "unfold FtoRradix, FtoR, Fminus, Fopp, Fplus in |- *; simpl in |- *; auto.",
            "VernacExtend",
            "e1a1952357025203d7f1e50dee207b1c7d0e8e76"
        ],
        [
            "repeat rewrite Zmin_n_n; repeat rewrite <- Zminus_diag_reverse; simpl in |- *.",
            "VernacExtend",
            "740626eb107e342804193702ff082a9e1f8996c4"
        ],
        [
            "repeat rewrite Zmult_1_r.",
            "VernacExtend",
            "b5d078029e55672d924f0594525d5aa4dc4c82b3"
        ],
        [
            "replace (Zsucc (Fnum x) + - Fnum x)%Z with (Z_of_nat 1).",
            "VernacExtend",
            "d0c9c1032b63512fbb287a66101125ad10193256"
        ],
        [
            "simpl in |- *; auto.",
            "VernacExtend",
            "9b631374b1d3067f703fd99c5dc6e1e5c8405957"
        ],
        [
            "simpl in |- *; unfold Zsucc in |- *; ring.",
            "VernacExtend",
            "38bb1269c206c0d5f6b9a684064d59bd02409783"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Theorem FSuccDiff2 : forall x : float, Fnum x = (- nNormMin radix precision)%Z -> Fexp x = (- dExp b)%Z -> Fminus radix (FSucc x) x = Float 1%nat (Fexp x) :>R.",
            "VernacStartTheoremProof",
            "0948fc2c17e3b6b86f6020036597430e467be3ae"
        ],
        [
            "intros x H' H'0; replace x with (Float (Fnum x) (Fexp x)).",
            "VernacExtend",
            "74198bf6cfea346d949d2be5af7970776cd428d5"
        ],
        [
            "rewrite H'; rewrite H'0; rewrite FSuccSimpl3; auto.",
            "VernacExtend",
            "75574e13126f3b5f9c064cc505c1cc0556b3f5dd"
        ],
        [
            "unfold FtoRradix, FtoR, Fminus, Fopp, Fplus in |- *; simpl in |- *; auto.",
            "VernacExtend",
            "e1a1952357025203d7f1e50dee207b1c7d0e8e76"
        ],
        [
            "repeat rewrite Zmin_n_n; repeat rewrite <- Zminus_diag_reverse; auto with zarith.",
            "VernacExtend",
            "0f0591054163e41e4d8483aa413d4066a4f4cac2"
        ],
        [
            "simpl in |- *; repeat rewrite Zmult_1_r.",
            "VernacExtend",
            "f8a832149782bcea9ddb18da3daf5119efff821b"
        ],
        [
            "rewrite Zplus_succ_l; rewrite Zplus_opp_r; simpl in |- *; auto.",
            "VernacExtend",
            "3f1113fd467d1a7766d2cc13ca5d3a2c171a8613"
        ],
        [
            "case x; simpl in |- *; auto.",
            "VernacExtend",
            "78d0bd53c1fe23bd9447c87ca89fb83e9e828572"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Theorem FSuccDiff3 : forall x : float, Fnum x = (- nNormMin radix precision)%Z -> Fexp x <> (- dExp b)%Z -> Fminus radix (FSucc x) x = Float 1%nat (Zpred (Fexp x)) :>R.",
            "VernacStartTheoremProof",
            "5d0cf1e84b42a546054080988e5f91999b822407"
        ],
        [
            "intros x H' H'1; rewrite FSuccSimpl2; auto.",
            "VernacExtend",
            "ccceb029a1e73e8a44614b206a3b27c40a1dfe22"
        ],
        [
            "unfold FtoRradix, FtoR, Fminus, Fopp, Fplus in |- *; simpl in |- *; auto.",
            "VernacExtend",
            "e1a1952357025203d7f1e50dee207b1c7d0e8e76"
        ],
        [
            "repeat rewrite Zmin_le1; auto with zarith.",
            "VernacExtend",
            "4b7e9cda2efa941e633b33c27cc0e8fd9e35b0e2"
        ],
        [
            "rewrite <- Zminus_diag_reverse; rewrite <- Zminus_n_predm; repeat rewrite <- Zminus_diag_reverse.",
            "VernacExtend",
            "ce919be285cb5f9684b62d542cb87d86147325cb"
        ],
        [
            "rewrite absolu_Zs; auto with zarith; simpl in |- *.",
            "VernacExtend",
            "3ff6be78771f082196e6f31edf7d39a72c024ebc"
        ],
        [
            "rewrite H'; unfold pPred in |- *; rewrite pGivesBound; unfold nNormMin in |- *.",
            "VernacExtend",
            "f21c30b7c5531d180c599298ae1d3f6231829738"
        ],
        [
            "rewrite Zopp_involutive; repeat rewrite Zmult_1_r.",
            "VernacExtend",
            "b5d26f72929718032e6add49be328b069422898e"
        ],
        [
            "replace (Zpower_nat radix (pred precision) * radix)%Z with (Zpower_nat radix precision).",
            "VernacExtend",
            "20f78cb2600bad14b84657f3e581249e2bcb8619"
        ],
        [
            "unfold Zpred in |- *; simpl in |- *; repeat rewrite plus_IZR || rewrite Ropp_Ropp_IZR.",
            "VernacExtend",
            "c2f283afb4ca73112bee4a953c052311b2507180"
        ],
        [
            "f_equal.",
            "VernacExtend",
            "dfce814d1efcef60f8330516ad88155a3a5ec317"
        ],
        [
            "simpl in |- *; ring.",
            "VernacExtend",
            "dbea56eab9f20d9ab08eaf0f2769e833b9098d51"
        ],
        [
            "pattern precision at 1 in |- *; replace precision with (pred precision + 1).",
            "VernacExtend",
            "b4112202e3be8002e7eec984e7280d349c32ce0b"
        ],
        [
            "rewrite Zpower_nat_is_exp; rewrite Zpower_nat_1; auto.",
            "VernacExtend",
            "7c8b45c9dabbf2675beabad0204d78a052418555"
        ],
        [
            "generalize precisionNotZero; case precision; simpl in |- *; auto with zarith arith.",
            "VernacExtend",
            "e60d343fc6ab059f90c6150dcd2529101d85853b"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Theorem ZltNormMinVnum : (nNormMin radix precision < Zpos (vNum b))%Z.",
            "VernacStartTheoremProof",
            "b594627a8a4ab6df4c1efd5f4b9b02898b05d557"
        ],
        [
            "unfold nNormMin in |- *; rewrite pGivesBound; auto with zarith.",
            "VernacExtend",
            "f30e5e3f8a1f8d9060589ee1d52ca1e98f67bc5c"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Hint Resolve ZltNormMinVnum: float.",
            "VernacHints",
            "a8394be2290e3c32d7bac46dd7cae8b770fdebc6"
        ],
        [
            "Theorem FSuccNormPos : forall a : float, (0 <= a)%R -> Fnormal radix b a -> Fnormal radix b (FSucc a).",
            "VernacStartTheoremProof",
            "eeb5d8e514b6ccdab098503f1397860643d02010"
        ],
        [
            "intros a H' H'0; unfold FSucc in |- *.",
            "VernacExtend",
            "e5d2ce518cf21909f0172cd9bc563b305271c592"
        ],
        [
            "cut (Fbounded b a); [ intros B0 | apply FnormalBounded with (1 := H'0); auto ].",
            "VernacExtend",
            "e98ac3f77bf5faa73b01dfb4290da7680fa5fe21"
        ],
        [
            "generalize (Z_eq_bool_correct (Fnum a) (pPred (vNum b))); case (Z_eq_bool (Fnum a) (pPred (vNum b))); auto.",
            "VernacExtend",
            "937d14f905edfb31305427cae335d4bcba0cf6cf"
        ],
        [
            "intros H'3; repeat split; simpl in |- *; auto.",
            "VernacExtend",
            "b5fe023730de0ab2d0572b853a3e813166648908"
        ],
        [
            "rewrite Zabs_eq; auto with float zarith.",
            "VernacExtend",
            "5afb6c5f6fd8186da5220fd2ffe28bc8b2689760"
        ],
        [
            "unfold nNormMin in |- *; auto with zarith.",
            "VernacExtend",
            "13c94bc3a7bcdd7b9290d9f851cfb48eb65760ca"
        ],
        [
            "apply Zle_trans with (m := Fexp a); auto with float zarith arith.",
            "VernacExtend",
            "011b3e8eefe803981d54341ed0516e9ec9b26334"
        ],
        [
            "rewrite pGivesBound; rewrite Zabs_eq; auto with zarith.",
            "VernacExtend",
            "9c9fa66ff18d863f4c3dddd190f9b5cfc2902f5c"
        ],
        [
            "pattern precision at 1 in |- *; replace precision with (1 + pred precision).",
            "VernacExtend",
            "a5b7e42b21bac0d4467607a21abc18be131f3f99"
        ],
        [
            "rewrite Zpower_nat_is_exp; rewrite Zpower_nat_1; unfold nNormMin in |- *; auto with zarith.",
            "VernacExtend",
            "8730fa251004d231c9661cc59f4e89b1762aa64c"
        ],
        [
            "generalize precisionNotZero; case precision; auto with zarith.",
            "VernacExtend",
            "3230d82790f2fbc025689960dee47cea761e7e57"
        ],
        [
            "apply Zle_mult_gen; simpl in |- *; auto with zarith.",
            "VernacExtend",
            "8057209c742fafff78c5d66f1af96c5352d2c968"
        ],
        [
            "apply Zle_trans with 1%Z; auto with zarith.",
            "VernacExtend",
            "afaf503507ef92d767efc4771c0c2ffb5b6ea35f"
        ],
        [
            "unfold nNormMin in |- *; auto with zarith.",
            "VernacExtend",
            "13c94bc3a7bcdd7b9290d9f851cfb48eb65760ca"
        ],
        [
            "intros H'3; generalize (Z_eq_bool_correct (Fnum a) (- nNormMin radix precision)); case (Z_eq_bool (Fnum a) (- nNormMin radix precision)).",
            "VernacExtend",
            "0ec8c4c60082dc3ac7eedd174d5e89d341a998af"
        ],
        [
            "intros H'4; absurd (0 <= Fnum a)%Z; auto.",
            "VernacExtend",
            "0dd1c660f0d118febe8542b30281e94ed0784068"
        ],
        [
            "2: apply LeR0Fnum with (radix := radix); auto with zarith.",
            "VernacExtend",
            "a30f85844cdf0271008bddb87bf57541070568cf"
        ],
        [
            "rewrite H'4; auto.",
            "VernacExtend",
            "4d1a9c913908d4131f22e0efbc1d2c6df5beb11a"
        ],
        [
            "apply Zlt_not_le.",
            "VernacExtend",
            "f50dda740686f871b63754e02667d404d580866b"
        ],
        [
            "replace 0%Z with (- 0%nat)%Z; unfold nNormMin in |- *; auto with zarith.",
            "VernacExtend",
            "ca65fc1bb7f8b98786ce178c5c89f2c25cebb39a"
        ],
        [
            "intros H'4; repeat split; simpl in |- *; auto with float zarith arith.",
            "VernacExtend",
            "3f6a6a52ab692ecc527fb46c18f299c187be16a9"
        ],
        [
            "apply Zle_lt_trans with (Zsucc (Zabs (Fnum a))); auto with float zarith.",
            "VernacExtend",
            "85a743eb80730e58ed0ada097dd63c1381681f89"
        ],
        [
            "case (Zlt_next (Zabs (Fnum a)) (Zpos (vNum b))); auto with float zarith arith.",
            "VernacExtend",
            "312c596423350bf7ee33dbef3e561c6012e2bc45"
        ],
        [
            "intros H1; Contradict H'3.",
            "VernacExtend",
            "0ec007df7153cea4e67bf77d4e6e0a9afe5fb935"
        ],
        [
            "unfold pPred in |- *; rewrite H1; rewrite Zabs_eq; auto with zarith.",
            "VernacExtend",
            "f20db5d31a5654d37ac5f5dee513397f29dcde0a"
        ],
        [
            "apply LeR0Fnum with (radix := radix); auto with zarith.",
            "VernacExtend",
            "7618493186a55fbcb98553549cd44aa866865932"
        ],
        [
            "apply Zle_trans with (Zabs (radix * Fnum a)); auto with float zarith.",
            "VernacExtend",
            "e52e729c676d1453ef3d886837c90dd9542f3053"
        ],
        [
            "case H'0; auto.",
            "VernacExtend",
            "c95954a4912ccfdd6e4780b3eecd4f9a4fbca076"
        ],
        [
            "repeat rewrite Zabs_Zmult.",
            "VernacExtend",
            "4b7da0b8275268c7f3ee6a3b7ea19434419af5d5"
        ],
        [
            "cut (0 <= Fnum a)%Z; [ intros Z1 | apply LeR0Fnum with (radix := radix) ]; auto.",
            "VernacExtend",
            "7cba078d71f4079c580cbf53f6b4d243552be6d0"
        ],
        [
            "rewrite (Zabs_eq (Fnum a)); auto.",
            "VernacExtend",
            "32337db5895c3d101b45413a69c3b64d50442738"
        ],
        [
            "rewrite (Zabs_eq (Zsucc (Fnum a))); auto with zarith.",
            "VernacExtend",
            "9ad8af9746d2d11d54c360895c3d6616de4b8ff3"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Theorem FSuccSubnormNotNearNormMin : forall a : float, Fsubnormal radix b a -> Fnum a <> Zpred (nNormMin radix precision) -> Fsubnormal radix b (FSucc a).",
            "VernacStartTheoremProof",
            "cf19900cdf4dbe2f4b2ada76381606e07f9f1e74"
        ],
        [
            "intros a H' H'0.",
            "VernacExtend",
            "98de3b2a989aaa54a4384d47c36d85838de74526"
        ],
        [
            "cut (Fbounded b a); [ intros B0 | apply FsubnormalFbounded with (1 := H'); auto ].",
            "VernacExtend",
            "febfcd1dda2fae322e2e719aee9be274788139d3"
        ],
        [
            "unfold FSucc in |- *.",
            "VernacExtend",
            "b711ae2eff6e87c6a46388f1beebc42db647cd8b"
        ],
        [
            "generalize (Z_eq_bool_correct (Fnum a) (pPred (vNum b))); case (Z_eq_bool (Fnum a) (pPred (vNum b))); auto.",
            "VernacExtend",
            "937d14f905edfb31305427cae335d4bcba0cf6cf"
        ],
        [
            "intros H'2; absurd (Fdigit radix a < precision); auto with float.",
            "VernacExtend",
            "e55249f05302536602946775da8f01318377a470"
        ],
        [
            "2: apply FsubnormalDigit with (b := b); auto.",
            "VernacExtend",
            "34007cb8615d3bce673f0605971464d0fc0006d1"
        ],
        [
            "unfold Fdigit in |- *; rewrite H'2.",
            "VernacExtend",
            "25e05357ee4879b806791cec134f1ebe2c42c94a"
        ],
        [
            "unfold pPred in |- *; rewrite (digitPredVNumiSPrecision radix) with (b := b) (precision := precision); auto with arith.",
            "VernacExtend",
            "bc853e1852d97c752247c4fb7cddf3270077106c"
        ],
        [
            "intros H'3; generalize (Z_eq_bool_correct (Fnum a) (- nNormMin radix precision)); case (Z_eq_bool (Fnum a) (- nNormMin radix precision)).",
            "VernacExtend",
            "0ec8c4c60082dc3ac7eedd174d5e89d341a998af"
        ],
        [
            "intros H'2; absurd (Fdigit radix a < precision); auto with float.",
            "VernacExtend",
            "e55249f05302536602946775da8f01318377a470"
        ],
        [
            "unfold Fdigit in |- *; rewrite H'2.",
            "VernacExtend",
            "25e05357ee4879b806791cec134f1ebe2c42c94a"
        ],
        [
            "replace (digit radix (- nNormMin radix precision)) with (digit radix (nNormMin radix precision)).",
            "VernacExtend",
            "bbedb1e06a9cd1626b930ee7b1943ecd2749e494"
        ],
        [
            "rewrite digitnNormMin; auto with arith.",
            "VernacExtend",
            "c1db72696b89175c5e4f17ec08efb06b973d4d86"
        ],
        [
            "case (nNormMin radix precision); simpl in |- *; auto.",
            "VernacExtend",
            "135b3fc3c55bd32212013aae2578f9b80b591e0c"
        ],
        [
            "apply FsubnormalDigit with (b := b); auto.",
            "VernacExtend",
            "a8e44f8a4da679673b7f75426693f98842da044e"
        ],
        [
            "intros H'4; repeat split; simpl in |- *; auto with float zarith arith.",
            "VernacExtend",
            "3f6a6a52ab692ecc527fb46c18f299c187be16a9"
        ],
        [
            "apply Zle_lt_trans with (m := Zsucc (Zabs (Fnum a))); auto with float zarith arith.",
            "VernacExtend",
            "707857d710a4cf04f494e5571446c93da02013e5"
        ],
        [
            "apply Zlt_le_trans with (m := Zsucc (nNormMin radix precision)); auto with float zarith arith.",
            "VernacExtend",
            "22608e21d42bb356e7fcf4b808f89e65d528ce01"
        ],
        [
            "apply Zsucc_lt_compat; apply pSubnormal_absolu_min with (3 := pGivesBound); auto with float zarith arith.",
            "VernacExtend",
            "463238a7fab401065b195c49dcb3ebe682fcd6e6"
        ],
        [
            "case H'; intros H1 (H2, H3); auto with float.",
            "VernacExtend",
            "9984ad798e93b8e9c0dc11d68bb814221e3dcdf6"
        ],
        [
            "rewrite Zabs_Zmult.",
            "VernacExtend",
            "f459c70d0601b9eab86bcf62dfb70a911d8ba871"
        ],
        [
            "rewrite (Zabs_eq radix); auto with zarith.",
            "VernacExtend",
            "b4d5b6de27398b44d2a44b3c5ca1aad144a5ef6f"
        ],
        [
            "apply Zlt_le_trans with (m := (radix * nNormMin radix precision)%Z); auto with float zarith arith.",
            "VernacExtend",
            "004fd438ceeb83fe4a65e56300f35b4ee34ab785"
        ],
        [
            "apply Zmult_gt_0_lt_compat_l; try apply Zlt_gt; auto with zarith.",
            "VernacExtend",
            "4bab03d282406737b52956bd6f796b5fc764bd2a"
        ],
        [
            "apply Zlt_Zabs_Zpred; auto with float zarith arith.",
            "VernacExtend",
            "e88dca4e1957f8db93a08e3a91e850293e87b404"
        ],
        [
            "apply pSubnormal_absolu_min with (3 := pGivesBound); auto.",
            "VernacExtend",
            "c43d628132750a1ad2f2c0ff614a06b8ab362804"
        ],
        [
            "pattern radix at 1 in |- *; rewrite <- (Zpower_nat_1 radix); unfold nNormMin in |- *; rewrite <- Zpower_nat_is_exp.",
            "VernacExtend",
            "6e2578bb152c9c40dab4db8f3f81a675ad0a1ebc"
        ],
        [
            "rewrite pGivesBound.",
            "VernacExtend",
            "a0663579a8c1e026e4139f9de2213b856a6f5f6f"
        ],
        [
            "generalize precisionNotZero; case precision; simpl in |- *; auto with zarith.",
            "VernacExtend",
            "5c40ee8140a5b1186ed592ab31b6f2ee5c2f65b5"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Theorem FSuccSubnormNearNormMin : forall a : float, Fsubnormal radix b a -> Fnum a = Zpred (nNormMin radix precision) -> Fnormal radix b (FSucc a).",
            "VernacStartTheoremProof",
            "66eb2f0f3e0ce819e2ca6a5b6ed1eec045274a6e"
        ],
        [
            "intros a H' H'0.",
            "VernacExtend",
            "98de3b2a989aaa54a4384d47c36d85838de74526"
        ],
        [
            "cut (Fbounded b a); [ intros Fb0 | apply FsubnormalFbounded with (1 := H') ].",
            "VernacExtend",
            "76075df7a53c6ecc60d0e0bf341a104eeebd9713"
        ],
        [
            "unfold FSucc in |- *.",
            "VernacExtend",
            "b711ae2eff6e87c6a46388f1beebc42db647cd8b"
        ],
        [
            "generalize (Z_eq_bool_correct (Fnum a) (pPred (vNum b))); case (Z_eq_bool (Fnum a) (pPred (vNum b))); auto.",
            "VernacExtend",
            "937d14f905edfb31305427cae335d4bcba0cf6cf"
        ],
        [
            "intros H'1; absurd (nNormMin radix precision < Zpos (vNum b))%Z; auto with float.",
            "VernacExtend",
            "fbefa71fab82ec53cfc224a7dbfe74d00944c556"
        ],
        [
            "apply Zle_not_lt.",
            "VernacExtend",
            "a635904a634172283c98f3792d1f8261c5710c4f"
        ],
        [
            "apply Zle_n_Zpred; unfold pPred in H'1; rewrite <- H'1; rewrite H'0; auto with zarith.",
            "VernacExtend",
            "29b7ee5bc5628356e936a86120987788c75583b7"
        ],
        [
            "intros H'3; generalize (Z_eq_bool_correct (Fnum a) (- nNormMin radix precision)); case (Z_eq_bool (Fnum a) (- nNormMin radix precision)).",
            "VernacExtend",
            "0ec8c4c60082dc3ac7eedd174d5e89d341a998af"
        ],
        [
            "intros H'1; absurd (- nNormMin radix precision < Zpred (nNormMin radix precision))%Z.",
            "VernacExtend",
            "afc0f99e1ca3a00a2eab1aa1a830328670cc60d4"
        ],
        [
            "rewrite <- H'1; rewrite <- H'0; auto with zarith.",
            "VernacExtend",
            "65a80544e856556ca7febfefe0e142f00fc93691"
        ],
        [
            "unfold nNormMin in |- *; apply Zlt_le_trans with (m := (- (0))%Z); auto with zarith.",
            "VernacExtend",
            "cea08633144d761e70ff015e03f434b4265c2cf5"
        ],
        [
            "intros H'4; repeat split; simpl in |- *; auto with float zarith arith.",
            "VernacExtend",
            "3f6a6a52ab692ecc527fb46c18f299c187be16a9"
        ],
        [
            "rewrite H'0.",
            "VernacExtend",
            "155943e97f3d58c39d0b7dc8dbaf42688f94c62f"
        ],
        [
            "rewrite <- Zsucc_pred.",
            "VernacExtend",
            "794ce07d219d821be1766675cfbd31b11cd408b8"
        ],
        [
            "rewrite Zabs_eq; auto with float zarith.",
            "VernacExtend",
            "5afb6c5f6fd8186da5220fd2ffe28bc8b2689760"
        ],
        [
            "unfold nNormMin in |- *; auto with zarith.",
            "VernacExtend",
            "13c94bc3a7bcdd7b9290d9f851cfb48eb65760ca"
        ],
        [
            "rewrite H'0.",
            "VernacExtend",
            "155943e97f3d58c39d0b7dc8dbaf42688f94c62f"
        ],
        [
            "rewrite <- Zsucc_pred.",
            "VernacExtend",
            "794ce07d219d821be1766675cfbd31b11cd408b8"
        ],
        [
            "pattern radix at 1 in |- *; rewrite <- (Zpower_nat_1 radix); unfold nNormMin in |- *; rewrite <- Zpower_nat_is_exp.",
            "VernacExtend",
            "6e2578bb152c9c40dab4db8f3f81a675ad0a1ebc"
        ],
        [
            "rewrite pGivesBound.",
            "VernacExtend",
            "a0663579a8c1e026e4139f9de2213b856a6f5f6f"
        ],
        [
            "generalize precisionNotZero; case precision; simpl in |- *; auto with zarith.",
            "VernacExtend",
            "5c40ee8140a5b1186ed592ab31b6f2ee5c2f65b5"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Theorem FBoundedSuc : forall f : float, Fbounded b f -> Fbounded b (FSucc f).",
            "VernacStartTheoremProof",
            "1e7959a38fea7e05bd9a500923dba7c867c0e5b8"
        ],
        [
            "intros f H'; unfold FSucc in |- *.",
            "VernacExtend",
            "0283619b16bbba9f195ad5522360dada409652bf"
        ],
        [
            "generalize (Z_eq_bool_correct (Fnum f) (pPred (vNum b))); case (Z_eq_bool (Fnum f) (pPred (vNum b))); intros H'1.",
            "VernacExtend",
            "40258829c26d6ff9370039c0827addb2b65b7dcd"
        ],
        [
            "repeat split; simpl in |- *; auto with zarith arith.",
            "VernacExtend",
            "96623a6157354cb059c459d0980c36d7276b307c"
        ],
        [
            "rewrite Zabs_eq; auto with float zarith.",
            "VernacExtend",
            "5afb6c5f6fd8186da5220fd2ffe28bc8b2689760"
        ],
        [
            "unfold nNormMin in |- *; auto with zarith.",
            "VernacExtend",
            "13c94bc3a7bcdd7b9290d9f851cfb48eb65760ca"
        ],
        [
            "apply Zle_trans with (Fexp f); auto with float zarith.",
            "VernacExtend",
            "f098764518e9e83baf11dacef87d9767f971f55f"
        ],
        [
            "generalize (Z_eq_bool_correct (Fnum f) (- nNormMin radix precision)); case (Z_eq_bool (Fnum f) (- nNormMin radix precision)); intros H'2.",
            "VernacExtend",
            "09cb2f2a5a088e83745cdf2208938ad83291bd5e"
        ],
        [
            "generalize (Z_eq_bool_correct (Fexp f) (- dExp b)); case (Z_eq_bool (Fexp f) (- dExp b)); intros H'3.",
            "VernacExtend",
            "e43c6a2d6a4fe2d8e458f4b76664b99fa613e000"
        ],
        [
            "repeat split; simpl in |- *; auto with float zarith arith.",
            "VernacExtend",
            "1fdc02fb9c99d8d6cc779a9df2778e0f848de651"
        ],
        [
            "apply Zlt_Zabs_Zpred; auto with float zarith arith.",
            "VernacExtend",
            "e88dca4e1957f8db93a08e3a91e850293e87b404"
        ],
        [
            "repeat split; simpl in |- *; auto with float zarith arith.",
            "VernacExtend",
            "1fdc02fb9c99d8d6cc779a9df2778e0f848de651"
        ],
        [
            "rewrite Zabs_Zopp.",
            "VernacExtend",
            "0b6e22e959fb2abddb6c6471984bd9b2c0a2b861"
        ],
        [
            "rewrite Zabs_eq; unfold pPred in |- *; auto with zarith.",
            "VernacExtend",
            "879233ca5351b2edc81f4b221a302c6636a51b1f"
        ],
        [
            "case (Zle_next (- dExp b) (Fexp f)); auto with float zarith arith.",
            "VernacExtend",
            "a1c3eacbc4daf6d7a39748857b156d4a4b69d376"
        ],
        [
            "repeat split; simpl in |- *; auto with float zarith arith.",
            "VernacExtend",
            "1fdc02fb9c99d8d6cc779a9df2778e0f848de651"
        ],
        [
            "apply Zlt_Zabs_Zpred; auto with float zarith arith.",
            "VernacExtend",
            "e88dca4e1957f8db93a08e3a91e850293e87b404"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Theorem FSuccSubnormal : forall a : float, Fsubnormal radix b a -> Fcanonic radix b (FSucc a).",
            "VernacStartTheoremProof",
            "09d1c1ba007369db18dc6b9168c4477810fc444c"
        ],
        [
            "intros a H'.",
            "VernacExtend",
            "2b7514d481b1c49fc3070e8c7c3f241c036a4bba"
        ],
        [
            "generalize (Z_eq_bool_correct (Fnum a) (Zpred (nNormMin radix precision))); case (Z_eq_bool (Fnum a) (Zpred (nNormMin radix precision))); intros H'1.",
            "VernacExtend",
            "2dbce05e314148e6b3dee2749a891c9820c63372"
        ],
        [
            "left; apply FSuccSubnormNearNormMin; auto.",
            "VernacExtend",
            "98dcb89af7b6b836f1e2f80bd0060e6c16ac338c"
        ],
        [
            "right; apply FSuccSubnormNotNearNormMin; auto.",
            "VernacExtend",
            "1f0312188a465f675135b508da0c34705e2e1164"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Theorem FSuccPosNotMax : forall a : float, (0 <= a)%R -> Fcanonic radix b a -> Fcanonic radix b (FSucc a).",
            "VernacStartTheoremProof",
            "f636d4f9c9442950ae1486acdaa284a955e1b62d"
        ],
        [
            "intros a H' H'0; case H'0; intros H'2.",
            "VernacExtend",
            "e8f050a16ec0d5963b63c8c26af1e46b4fe1ce27"
        ],
        [
            "left; apply FSuccNormPos; auto.",
            "VernacExtend",
            "70bf501d5f4fbdf8aadc23ed89444f2a5f336ee7"
        ],
        [
            "apply FSuccSubnormal; auto.",
            "VernacExtend",
            "a5137ede3e4803bae86c6ba877482d63bff5be65"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Theorem FSuccNormNegNotNormMin : forall a : float, (a <= 0)%R -> Fnormal radix b a -> a <> Float (- nNormMin radix precision) (- dExp b) -> Fnormal radix b (FSucc a).",
            "VernacStartTheoremProof",
            "a9da1c64b4366a6a65010a41bb6cdbd28bae8a81"
        ],
        [
            "intros a H' H'0 H'1; cut (Fbounded b a); [ intros Fb0 | apply FnormalBounded with (1 := H'0) ].",
            "VernacExtend",
            "de731876aae8d60a61a8fc2f0ea85213fc8cda21"
        ],
        [
            "cut (Fnum a <= 0)%Z; [ intros Z0 | apply R0LeFnum with (radix := radix) ]; auto with zarith.",
            "VernacExtend",
            "b2ade4bbdb3ad5d5d531e0489ddd6a94d17a81da"
        ],
        [
            "case (Zle_lt_or_eq _ _ Z0); intros Z1.",
            "VernacExtend",
            "6aff0cfdf770693f580ffade4138408be0f0d3bd"
        ],
        [
            "2: absurd (is_Fzero a); auto with float.",
            "VernacExtend",
            "64fb3b32c66dbe712b9453ca5ebf3d5212dc88b7"
        ],
        [
            "2: apply FnormalNotZero with (1 := H'0); auto.",
            "VernacExtend",
            "186bb0cbc947b562d72146d0380eae5ba071ff5e"
        ],
        [
            "unfold FSucc in |- *.",
            "VernacExtend",
            "b711ae2eff6e87c6a46388f1beebc42db647cd8b"
        ],
        [
            "generalize (Z_eq_bool_correct (Fnum a) (pPred (vNum b))); case (Z_eq_bool (Fnum a) (pPred (vNum b))); auto.",
            "VernacExtend",
            "937d14f905edfb31305427cae335d4bcba0cf6cf"
        ],
        [
            "intros H'2; absurd (0 < Fnum a)%Z; auto with zarith arith.",
            "VernacExtend",
            "faaa1168bf164371b5d8d6ff9dae360b3c15e3ec"
        ],
        [
            "rewrite H'2; unfold pPred in |- *; apply Zlt_succ_pred; simpl in |- *; apply (vNumbMoreThanOne radix) with (precision := precision); auto with zarith arith.",
            "VernacExtend",
            "d0d9adb91d72f55e960319ccd0ffb26105541e20"
        ],
        [
            "intros H'3; generalize (Z_eq_bool_correct (Fnum a) (- nNormMin radix precision)); case (Z_eq_bool (Fnum a) (- nNormMin radix precision)); auto.",
            "VernacExtend",
            "a7e66b25e8d7041cfc39f733164ec1fa64c0aad7"
        ],
        [
            "intros H'2; generalize (Z_eq_bool_correct (Fexp a) (- dExp b)); case (Z_eq_bool (Fexp a) (- dExp b)).",
            "VernacExtend",
            "8014b19990e5ed3c4b6f52c140c8ddeb2a417776"
        ],
        [
            "intros H'4; Contradict H'1; auto.",
            "VernacExtend",
            "286a500aff1711eec0b323273eee6a78d9923916"
        ],
        [
            "apply floatEq; auto.",
            "VernacExtend",
            "c847d668791777965ba33ea03f8c58569a27270b"
        ],
        [
            "intros H'4; repeat split; simpl in |- *; auto with zarith.",
            "VernacExtend",
            "bc3e50c85f6f7ea4d0379e20801bdce54709d057"
        ],
        [
            "rewrite Zabs_Zopp.",
            "VernacExtend",
            "0b6e22e959fb2abddb6c6471984bd9b2c0a2b861"
        ],
        [
            "unfold pPred in |- *; rewrite Zabs_eq; auto with zarith.",
            "VernacExtend",
            "889e4368602f8b110f30f33f4e9ece341b910ab3"
        ],
        [
            "case (Zle_next (- dExp b) (Fexp a)); auto with float zarith.",
            "VernacExtend",
            "876d6e341c026671d39e1839057596e43430a471"
        ],
        [
            "rewrite <- Zopp_mult_distr_r; rewrite Zabs_Zopp.",
            "VernacExtend",
            "2d371b0d191572f06c17b579b64c770f9dde5a8e"
        ],
        [
            "rewrite Zabs_Zmult.",
            "VernacExtend",
            "f459c70d0601b9eab86bcf62dfb70a911d8ba871"
        ],
        [
            "repeat rewrite Zabs_eq; auto with float zarith.",
            "VernacExtend",
            "f1ef643fe3a9b1394e3385675a94c028f9fa3903"
        ],
        [
            "pattern (Zpos (vNum b)) at 1 in |- *; rewrite (PosNormMin radix) with (precision := precision); auto with zarith.",
            "VernacExtend",
            "d7ada95142efa4776828106515b6d0aa4aaa7dba"
        ],
        [
            "apply Zle_Zmult_comp_l; auto with zarith.",
            "VernacExtend",
            "0a442d3268531835feca11bf21b34ab2eb26341b"
        ],
        [
            "unfold pPred in |- *; apply Zle_Zpred; auto with float zarith.",
            "VernacExtend",
            "4ca46621c6dfb7bc3ecc20cb1c686f5a81972651"
        ],
        [
            "unfold pPred in |- *; apply Zle_Zpred; auto with float zarith.",
            "VernacExtend",
            "4ca46621c6dfb7bc3ecc20cb1c686f5a81972651"
        ],
        [
            "intros H'2; repeat split; simpl in |- *; auto with float zarith arith.",
            "VernacExtend",
            "960af623f67bc57eb08a1f55e95ed2dc2a924fa8"
        ],
        [
            "apply Zlt_trans with (Zabs (Fnum a)); auto with float zarith.",
            "VernacExtend",
            "816090927651e34fa60fc85d5fc001a8a10fecb8"
        ],
        [
            "repeat rewrite Zabs_eq_opp; auto with float zarith.",
            "VernacExtend",
            "b32f4503ef5630bb56b59b1b7b4673d6709043ac"
        ],
        [
            "rewrite Zabs_Zmult.",
            "VernacExtend",
            "f459c70d0601b9eab86bcf62dfb70a911d8ba871"
        ],
        [
            "rewrite (Zabs_eq radix); [ idtac | apply Zle_trans with 1%Z; auto with zarith ].",
            "VernacExtend",
            "e34c82b9e0e318960944a7c826c986d68477350d"
        ],
        [
            "repeat rewrite Zabs_eq_opp; auto with float zarith.",
            "VernacExtend",
            "b32f4503ef5630bb56b59b1b7b4673d6709043ac"
        ],
        [
            "pattern (Zpos (vNum b)) at 1 in |- *; rewrite (PosNormMin radix) with (precision := precision); auto with zarith.",
            "VernacExtend",
            "d7ada95142efa4776828106515b6d0aa4aaa7dba"
        ],
        [
            "apply Zle_Zmult_comp_l; auto with zarith.",
            "VernacExtend",
            "0a442d3268531835feca11bf21b34ab2eb26341b"
        ],
        [
            "replace (- Zsucc (Fnum a))%Z with (Zpred (- Fnum a)).",
            "VernacExtend",
            "ded777f3dfe4ce55342dfb9e12a804caad9e2b0f"
        ],
        [
            "auto with float zarith.",
            "VernacExtend",
            "20771af1ba1209f06a55e7d644758bc288f04dc0"
        ],
        [
            "unfold pPred in |- *; apply Zle_Zpred.",
            "VernacExtend",
            "527a3d5a72d2218dfceed34bf662d551ff76ee38"
        ],
        [
            "case (Zle_lt_or_eq (nNormMin radix precision) (- Fnum a)); auto.",
            "VernacExtend",
            "451378d3e573fab65c02f543e081139c75de18cf"
        ],
        [
            "rewrite <- Zabs_eq_opp; auto with float zarith.",
            "VernacExtend",
            "62db7c3a70d5700ea190f68d37670ac0589a349f"
        ],
        [
            "apply pNormal_absolu_min with (b := b); auto.",
            "VernacExtend",
            "e86cbd64a24d221a20706aeda84a85b2cef07d24"
        ],
        [
            "intros H'4; Contradict H'2; rewrite H'4; ring.",
            "VernacExtend",
            "0d50536aeb29c94b46592f59400aabd752d3586f"
        ],
        [
            "apply Zpred_Zopp_Zs; auto.",
            "VernacExtend",
            "4f6aeba917caa6a8cc490c919bc87d45caa07a1b"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Theorem FSuccNormNegNormMin : Fsubnormal radix b (FSucc (Float (- nNormMin radix precision) (- dExp b))).",
            "VernacStartTheoremProof",
            "99781c972941e1a1f13f7a0bb8886f7795bf0bf1"
        ],
        [
            "unfold FSucc in |- *; simpl in |- *.",
            "VernacExtend",
            "ffb6e48333a31c8ac4ff339e9b2664df58a76fd2"
        ],
        [
            "generalize (Z_eq_bool_correct (- nNormMin radix precision) (pPred (vNum b))); case (Z_eq_bool (- nNormMin radix precision) (pPred (vNum b))); intros H'; auto.",
            "VernacExtend",
            "986d5d1d965f5d228b72f2788dddb216abe83faa"
        ],
        [
            "absurd (0%nat < pPred (vNum b))%Z; auto.",
            "VernacExtend",
            "7f06ee10b017863ccec2c5218002f4f347f968e6"
        ],
        [
            "rewrite <- H'; auto with float zarith.",
            "VernacExtend",
            "e90ba912cc61e88b9e78dcf9847d0fd86db30c70"
        ],
        [
            "replace (Z_of_nat 0) with (- (0))%Z; [ idtac | simpl in |- *; auto ].",
            "VernacExtend",
            "e0738bd5ceeb872c77582066f3c54ef5819071ed"
        ],
        [
            "apply Zle_not_lt; apply Zle_Zopp; auto with float zarith.",
            "VernacExtend",
            "f0bd096c72e2a6dc6106c5c6287f5587ca69f959"
        ],
        [
            "apply Zlt_le_weak; auto with float zarith.",
            "VernacExtend",
            "86e2df4bae8ff9e758eac071857a2ddbea5bc05b"
        ],
        [
            "apply nNormPos; auto with float zarith.",
            "VernacExtend",
            "f56b9bdf33aa4200f197a2e8b6b703007516faa6"
        ],
        [
            "unfold pPred in |- *; apply Zlt_succ_pred; simpl in |- *; auto with float zarith.",
            "VernacExtend",
            "0e454c9536eae4d5395380946f180576c870ed25"
        ],
        [
            "apply (vNumbMoreThanOne radix) with (precision := precision); auto with float zarith.",
            "VernacExtend",
            "ef201a4aeb9beba22ae55cc8d9b3467eed5bf06d"
        ],
        [
            "generalize (Z_eq_bool_correct (- nNormMin radix precision) (- nNormMin radix precision)); case (Z_eq_bool (- nNormMin radix precision) (- nNormMin radix precision)); intros H'0.",
            "VernacExtend",
            "214d54350ffffdac186d6ff7c4abd1758c084979"
        ],
        [
            "2: Contradict H'0; auto.",
            "VernacExtend",
            "8947f52cf1fad56904c1c08b7f2394dc5d1423f2"
        ],
        [
            "generalize (Z_eq_bool_correct (- dExp b) (- dExp b)); case (Z_eq_bool (- dExp b) (- dExp b)); intros H'1.",
            "VernacExtend",
            "809801a8409767fc57fc36d2337730e8c6c1e195"
        ],
        [
            "2: Contradict H'1; auto.",
            "VernacExtend",
            "c24344f4f5f068e722be081c5631f46ec53be07d"
        ],
        [
            "repeat split; simpl in |- *; auto with zarith.",
            "VernacExtend",
            "3887b5c0ace93a706fbfe1f9aea736a5c30668c7"
        ],
        [
            "apply Zle_lt_trans with (m := nNormMin radix precision); auto with float zarith.",
            "VernacExtend",
            "8d4f54b1bc1c6097675681780ecf23cd2c5e25b8"
        ],
        [
            "rewrite <- Zopp_Zpred_Zs; rewrite Zabs_Zopp; rewrite Zabs_eq; auto with float zarith.",
            "VernacExtend",
            "48d9fc567cd5dac3cd58281565d441d50dd4ce4c"
        ],
        [
            "apply Zle_Zpred; simpl in |- *; auto with float zarith.",
            "VernacExtend",
            "9283697a2a68170573c97054c0820f10740d8dad"
        ],
        [
            "apply nNormPos; auto with float zarith.",
            "VernacExtend",
            "f56b9bdf33aa4200f197a2e8b6b703007516faa6"
        ],
        [
            "rewrite Zabs_Zmult; rewrite (Zabs_eq radix); auto with zarith.",
            "VernacExtend",
            "bd9102e07975df0be269f68b59f449eea0021a86"
        ],
        [
            "rewrite (PosNormMin radix) with (precision := precision); auto with zarith.",
            "VernacExtend",
            "6c296fe1fc6f2888806453baef65a3b741b2f111"
        ],
        [
            "apply Zmult_gt_0_lt_compat_l; auto with float zarith.",
            "VernacExtend",
            "a11936c10a184ad1595ff8c8c3a983405115899e"
        ],
        [
            "rewrite <- Zopp_Zpred_Zs; rewrite Zabs_Zopp.",
            "VernacExtend",
            "28202882bc1982d8070481349c92367ad1a8b979"
        ],
        [
            "rewrite Zabs_eq; auto with zarith.",
            "VernacExtend",
            "e3b6647506c6d43441146989691d7c27f1722b7e"
        ],
        [
            "apply Zle_Zpred; simpl in |- *; auto with float zarith.",
            "VernacExtend",
            "9283697a2a68170573c97054c0820f10740d8dad"
        ],
        [
            "apply nNormPos; auto with float zarith.",
            "VernacExtend",
            "f56b9bdf33aa4200f197a2e8b6b703007516faa6"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Theorem FSuccNegCanonic : forall a : float, (a <= 0)%R -> Fcanonic radix b a -> Fcanonic radix b (FSucc a).",
            "VernacStartTheoremProof",
            "3579236ddaddc54f4747156c9069d2811f92b29f"
        ],
        [
            "intros a H' H'0; case H'0; intros H'1.",
            "VernacExtend",
            "09d30d4ff7a096c3ebad3e246aa6b57325bebbe6"
        ],
        [
            "case (floatDec a (Float (- nNormMin radix precision) (- dExp b))); intros H'2.",
            "VernacExtend",
            "0dac9f411611ddf752986cba238b6ba8c5367642"
        ],
        [
            "rewrite H'2; right; apply FSuccNormNegNormMin; auto.",
            "VernacExtend",
            "e320e354b6372e37e85cac7a205a3358aa7470c1"
        ],
        [
            "left; apply FSuccNormNegNotNormMin; auto.",
            "VernacExtend",
            "2846f8323e5e66368ee644f089e091fcdc34eca1"
        ],
        [
            "apply FSuccSubnormal; auto.",
            "VernacExtend",
            "a5137ede3e4803bae86c6ba877482d63bff5be65"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Theorem FSuccCanonic : forall a : float, Fcanonic radix b a -> Fcanonic radix b (FSucc a).",
            "VernacStartTheoremProof",
            "4e2d4899a737e6f1a9141ca8a7558a42abfd7c38"
        ],
        [
            "intros a H'.",
            "VernacExtend",
            "2b7514d481b1c49fc3070e8c7c3f241c036a4bba"
        ],
        [
            "case (Rle_or_lt 0 a); intros H'3.",
            "VernacExtend",
            "7863efca9d80d0973c9986c081189f38fb63ffbc"
        ],
        [
            "apply FSuccPosNotMax; auto.",
            "VernacExtend",
            "aa0c57d090e13af632db6e670f0614456c4afedf"
        ],
        [
            "apply FSuccNegCanonic; auto with real.",
            "VernacExtend",
            "9d3d738f53b4819f6e97a2c88b4a0f134c072fdd"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Theorem FSuccLt : forall a : float, (a < FSucc a)%R.",
            "VernacStartTheoremProof",
            "9b95c46d8b58a1d00908e9b480b2065d9a88a5d6"
        ],
        [
            "intros a; unfold FSucc in |- *.",
            "VernacExtend",
            "bce791a5532491c24668475b47a2401f9ebf6fc8"
        ],
        [
            "generalize (Z_eq_bool_correct (Fnum a) (pPred (vNum b))); case (Z_eq_bool (Fnum a) (pPred (vNum b))); auto.",
            "VernacExtend",
            "937d14f905edfb31305427cae335d4bcba0cf6cf"
        ],
        [
            "intros H'; unfold FtoRradix, FtoR in |- *; simpl in |- *; rewrite H'.",
            "VernacExtend",
            "3e9a9bb38353e5ca95f15c907b264d7f267badcb"
        ],
        [
            "unfold pPred in |- *; rewrite (PosNormMin radix) with (precision := precision); auto with zarith; unfold nNormMin in |- *.",
            "VernacExtend",
            "adcbeef5b04bbd97060da7fa61f8039349901962"
        ],
        [
            "rewrite powerRZ_Zs; auto with real zarith.",
            "VernacExtend",
            "1931a3978b6974020abfa1402ab4426f76878eb8"
        ],
        [
            "repeat rewrite <- Rmult_assoc.",
            "VernacExtend",
            "645aebe2c3685a4f868a05a2372130cedecea85e"
        ],
        [
            "apply Rlt_monotony_exp; auto with zarith.",
            "VernacExtend",
            "ef7730f5bfe1f44f887a3bbfc8cee53987475e69"
        ],
        [
            "rewrite Zmult_comm.",
            "VernacExtend",
            "2c1282bf165ec7c97fac66d6d60ae4f6ba65e66e"
        ],
        [
            "rewrite <- Rmult_IZR.",
            "VernacExtend",
            "77ff9e5d0697bdc5f92b38cf0c531b2d80b04bc3"
        ],
        [
            "apply Rlt_IZR; auto with zarith.",
            "VernacExtend",
            "03f0d8ad561f13fe59d5a8656bd3163bb800af89"
        ],
        [
            "intros H'; generalize (Z_eq_bool_correct (Fnum a) (- nNormMin radix precision)); case (Z_eq_bool (Fnum a) (- nNormMin radix precision)).",
            "VernacExtend",
            "c878ecf54d89745f4f974c9a0fedd1e0c9dbeacd"
        ],
        [
            "intros H'0; generalize (Z_eq_bool_correct (Fexp a) (- dExp b)); case (Z_eq_bool (Fexp a) (- dExp b)).",
            "VernacExtend",
            "ab4d0e60499f6c91f04d7f0252930e3fb3a1f443"
        ],
        [
            "intros H'1; unfold FtoRradix, FtoR in |- *; simpl in |- *.",
            "VernacExtend",
            "24eafdc131f19df7103d8013b7a115f9e97633ec"
        ],
        [
            "apply Rlt_monotony_exp; auto with real zarith.",
            "VernacExtend",
            "d5ce9ccf4e34ba2f988668036022627ea9a20053"
        ],
        [
            "intros H'1; unfold FtoRradix, FtoR in |- *; simpl in |- *; rewrite H'0.",
            "VernacExtend",
            "22c29707bf00142b0f523a9bacaa955ac0ab6ee6"
        ],
        [
            "pattern (Fexp a) at 1 in |- *; replace (Fexp a) with (Zsucc (Zpred (Fexp a))).",
            "VernacExtend",
            "e9ec0b66fbaf4f21f09d37a3774708340aa109e5"
        ],
        [
            "rewrite powerRZ_Zs; auto with real zarith.",
            "VernacExtend",
            "1931a3978b6974020abfa1402ab4426f76878eb8"
        ],
        [
            "repeat rewrite <- Rmult_assoc.",
            "VernacExtend",
            "645aebe2c3685a4f868a05a2372130cedecea85e"
        ],
        [
            "apply Rlt_monotony_exp; auto with real zarith.",
            "VernacExtend",
            "d5ce9ccf4e34ba2f988668036022627ea9a20053"
        ],
        [
            "rewrite <- Rmult_IZR.",
            "VernacExtend",
            "77ff9e5d0697bdc5f92b38cf0c531b2d80b04bc3"
        ],
        [
            "apply Rlt_IZR; auto with zarith.",
            "VernacExtend",
            "03f0d8ad561f13fe59d5a8656bd3163bb800af89"
        ],
        [
            "rewrite <- Zopp_mult_distr_l.",
            "VernacExtend",
            "793267bc17cdca79103d81fb3367e80db2d1a5d0"
        ],
        [
            "apply Zlt_Zopp.",
            "VernacExtend",
            "f65acc0ebbbce2497b36740bf163938c842157b4"
        ],
        [
            "rewrite Zmult_comm.",
            "VernacExtend",
            "2c1282bf165ec7c97fac66d6d60ae4f6ba65e66e"
        ],
        [
            "unfold pPred in |- *; rewrite (PosNormMin radix) with (precision := precision); auto with zarith.",
            "VernacExtend",
            "71b7c96190502824835e1d621c7799c4d10abfb9"
        ],
        [
            "apply sym_equal; apply Zsucc_pred.",
            "VernacExtend",
            "afd4f98ccb03b0f43b4b78cd2716496db5fd847c"
        ],
        [
            "intros H'1; unfold FtoRradix, FtoR in |- *; simpl in |- *; auto with real zarith.",
            "VernacExtend",
            "6acff90157dd8b85dbcc7d9d49146c406d014fa4"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Theorem FSuccPropPos : forall x y : float, (0 <= x)%R -> Fcanonic radix b x -> Fcanonic radix b y -> (x < y)%R -> (FSucc x <= y)%R.",
            "VernacStartTheoremProof",
            "830a2b1eb0686824be4df20d779db938ef99c626"
        ],
        [
            "intros x y H' H'0 H'1 H'2.",
            "VernacExtend",
            "f4c6938634f065cc68eff94850d69a723e938618"
        ],
        [
            "cut (Fbounded b x); [ intros Fb0 | apply FcanonicBound with (1 := H'0) ].",
            "VernacExtend",
            "77ed3eea35586ad9560b2983781e033f30da9a6a"
        ],
        [
            "cut (Fbounded b y); [ intros Fb1 | apply FcanonicBound with (1 := H'1) ].",
            "VernacExtend",
            "3d1e3c39ac4b453a45561a823648da26fac7f699"
        ],
        [
            "case FcanonicLtPos with (p := x) (q := y) (3 := pGivesBound); auto.",
            "VernacExtend",
            "cc49c6e261a16906ef2022481580be5a43352ca0"
        ],
        [
            "case (Z_eq_dec (Fnum x) (pPred (vNum b))); intros H'4.",
            "VernacExtend",
            "ecf018951c7081752c9d9bae467563a971037f63"
        ],
        [
            "rewrite FSuccSimpl1; auto.",
            "VernacExtend",
            "44ac04106f049e90b568a0809ee9f7229a242d83"
        ],
        [
            "intros H'5; case (Zlt_next _ _ H'5); intros H'6.",
            "VernacExtend",
            "322ff3740d24bfdbb1105c8d062d6058b8341b38"
        ],
        [
            "replace y with (Float (Fnum y) (Fexp y)).",
            "VernacExtend",
            "76d14f9c1e2e98816205b6443163a6734689956a"
        ],
        [
            "rewrite H'6.",
            "VernacExtend",
            "7a5e609e825f92618da18be03aa16ab06d13e048"
        ],
        [
            "generalize Fle_Zle; unfold Fle, FtoRradix in |- *; intros H'7; apply H'7; clear H'7; auto with arith.",
            "VernacExtend",
            "927591e130b6c55335fab9733d1a16adc6c4fbc8"
        ],
        [
            "rewrite <- (Zabs_eq (Fnum y)); auto with float zarith.",
            "VernacExtend",
            "c494e3ccba12e4518b0ee0d89668560e52eeee79"
        ],
        [
            "apply pNormal_absolu_min with (b := b); auto.",
            "VernacExtend",
            "e86cbd64a24d221a20706aeda84a85b2cef07d24"
        ],
        [
            "case H'1; auto with float.",
            "VernacExtend",
            "b7548d4efae62c7d4bba12edfb85f291218a9862"
        ],
        [
            "intros H'7; Contradict H'5; apply Zle_not_lt.",
            "VernacExtend",
            "2c39cb7e5e26f7620f5aa5d77bc132959f8fa35d"
        ],
        [
            "replace (Fexp y) with (- dExp b)%Z; auto with float.",
            "VernacExtend",
            "40c671176201c01d1ba860f18a1f30769c3b20a0"
        ],
        [
            "case H'7; intros H'8 (H'9, H'10); auto.",
            "VernacExtend",
            "db24bd9db296093857836234a3b43b5b61cde520"
        ],
        [
            "apply LeR0Fnum with (radix := radix); auto with zarith.",
            "VernacExtend",
            "7618493186a55fbcb98553549cd44aa866865932"
        ],
        [
            "apply Rle_trans with (r2 := FtoR radix x); auto with real.",
            "VernacExtend",
            "1b3ce4334f8df082971a490d8ba568ccc6cdfe42"
        ],
        [
            "case y; auto.",
            "VernacExtend",
            "84af06c37f8aaa8afdc8edb1aa386eabca2a5ee7"
        ],
        [
            "apply Rlt_le; auto.",
            "VernacExtend",
            "4003e3e1c449ee89cad9e953d0a562db8235648c"
        ],
        [
            "unfold FtoRradix in |- *; apply FcanonicPosFexpRlt with (3 := pGivesBound); auto.",
            "VernacExtend",
            "9bfb053c4214be33c4f6392f497c11b185bbf61e"
        ],
        [
            "apply LeFnumZERO with (radix := radix); auto with zarith.",
            "VernacExtend",
            "01b66b02c3cccbd627d71e22616916f70799f9a5"
        ],
        [
            "simpl in |- *; auto with zarith.",
            "VernacExtend",
            "61d3cdc6299cf8abf87703c074ca4503f0f27a12"
        ],
        [
            "apply Zlt_le_weak; apply nNormPos.",
            "VernacExtend",
            "fddd46658e9ed01dee969b288ee026317cbf2249"
        ],
        [
            "auto with zarith.",
            "VernacExtend",
            "23f42fd3236dcece4a40b3a666dce57fea69a9c0"
        ],
        [
            "apply Rle_trans with (r2 := FtoR radix x); auto with real.",
            "VernacExtend",
            "1b3ce4334f8df082971a490d8ba568ccc6cdfe42"
        ],
        [
            "rewrite <- FSuccSimpl1; auto.",
            "VernacExtend",
            "f7bff722818319e127285bc79bd5adbd964fdf25"
        ],
        [
            "apply FSuccCanonic; auto.",
            "VernacExtend",
            "6a18df3c3cef38b325b61a78e1886bb852c7efc6"
        ],
        [
            "intros H'5; apply Rlt_le.",
            "VernacExtend",
            "1e7857a08390797860ee3f47983b105a166121b4"
        ],
        [
            "unfold FtoRradix in |- *; apply FcanonicPosFexpRlt with (3 := pGivesBound); auto.",
            "VernacExtend",
            "9bfb053c4214be33c4f6392f497c11b185bbf61e"
        ],
        [
            "apply Rle_trans with (r2 := FtoR radix x); auto.",
            "VernacExtend",
            "484a2705196fb529f25b31233ca0f48d35efe7e3"
        ],
        [
            "apply Rlt_le; auto.",
            "VernacExtend",
            "4003e3e1c449ee89cad9e953d0a562db8235648c"
        ],
        [
            "apply FSuccLt; auto.",
            "VernacExtend",
            "bffe14293ac497aa5e23792addde1959650d5030"
        ],
        [
            "apply Rle_trans with (r2 := FtoR radix x); auto with real.",
            "VernacExtend",
            "1b3ce4334f8df082971a490d8ba568ccc6cdfe42"
        ],
        [
            "apply FSuccCanonic; auto.",
            "VernacExtend",
            "6a18df3c3cef38b325b61a78e1886bb852c7efc6"
        ],
        [
            "rewrite FSuccSimpl4; auto.",
            "VernacExtend",
            "2d47fc6c82e2413444df3c5559a82c7fc117184e"
        ],
        [
            "apply sym_not_equal; apply Zlt_not_eq.",
            "VernacExtend",
            "7b38bf851c75b1e2cdd7f7b0afb8d6236ccdc729"
        ],
        [
            "apply Zlt_le_trans with (m := 0%Z); auto with zarith.",
            "VernacExtend",
            "5fa1758eb257d15b0d2aa671faef931699ea9e64"
        ],
        [
            "replace 0%Z with (- 0%nat)%Z; auto with zarith.",
            "VernacExtend",
            "957a3dec4cb429f53c6d700221d8a11270469ef5"
        ],
        [
            "apply Zlt_Zopp.",
            "VernacExtend",
            "f65acc0ebbbce2497b36740bf163938c842157b4"
        ],
        [
            "apply nNormPos; auto.",
            "VernacExtend",
            "e5ed4720e90a1a7d04d329ae5b9376848209d6ad"
        ],
        [
            "apply LeR0Fnum with (radix := radix); auto with zarith.",
            "VernacExtend",
            "7618493186a55fbcb98553549cd44aa866865932"
        ],
        [
            "intros H'4; elim H'4; intros H'5 H'6; clear H'4.",
            "VernacExtend",
            "ae164df2110ce1a10977154c24e4a36a53bc489f"
        ],
        [
            "generalize (Z_eq_bool_correct (Fnum x) (Zpos (vNum b))); case (Z_eq_bool (Fnum x) (Zpos (vNum b))); intros H'4.",
            "VernacExtend",
            "4591ea6d807d66f71d82c914ff57b08c31b9d148"
        ],
        [
            "Contradict H'6; auto.",
            "VernacExtend",
            "d2efeff40f59def319adc3783cc52d06dfb83ce3"
        ],
        [
            "apply Zle_not_lt; apply Zlt_le_weak.",
            "VernacExtend",
            "cbffdec2e5c5ea55757377202b2c36e42b3fba1f"
        ],
        [
            "rewrite H'4; auto with float zarith.",
            "VernacExtend",
            "ea11d8d4268290cd27acd1cd711437866ba19b95"
        ],
        [
            "rewrite <- (Zabs_eq (Fnum y)); auto with float zarith.",
            "VernacExtend",
            "c494e3ccba12e4518b0ee0d89668560e52eeee79"
        ],
        [
            "apply LeR0Fnum with (radix := radix); auto with zarith.",
            "VernacExtend",
            "7618493186a55fbcb98553549cd44aa866865932"
        ],
        [
            "apply Rle_trans with (FtoRradix x); auto with real.",
            "VernacExtend",
            "5d29a8382345e2b1c0be8e43ca243058a60e24d0"
        ],
        [
            "case (Zlt_next _ _ H'6); intros H'7.",
            "VernacExtend",
            "b0fba7fbebf0368957e970feca40cb41d3e424cc"
        ],
        [
            "rewrite FSuccSimpl4; auto.",
            "VernacExtend",
            "2d47fc6c82e2413444df3c5559a82c7fc117184e"
        ],
        [
            "rewrite <- H'7; rewrite H'5; unfold FtoRradix, FtoR in |- *; simpl in |- *; auto with real.",
            "VernacExtend",
            "c2a61e409e0ef9cb180f27ae7c55603c4afca20e"
        ],
        [
            "apply Zlt_not_eq.",
            "VernacExtend",
            "e5f5ea956a3c3960b00bb158e170ed5b6dd61dc4"
        ],
        [
            "unfold pPred in |- *; apply Zlt_succ_pred; rewrite <- H'7; auto with float.",
            "VernacExtend",
            "bcb193623b73c880571e620ffd1e8eaaa39e82d8"
        ],
        [
            "rewrite <- (Zabs_eq (Fnum y)); auto with float zarith.",
            "VernacExtend",
            "c494e3ccba12e4518b0ee0d89668560e52eeee79"
        ],
        [
            "apply LeR0Fnum with (radix := radix); auto with zarith.",
            "VernacExtend",
            "7618493186a55fbcb98553549cd44aa866865932"
        ],
        [
            "apply Rle_trans with (FtoRradix x); auto with real.",
            "VernacExtend",
            "5d29a8382345e2b1c0be8e43ca243058a60e24d0"
        ],
        [
            "apply Zlt_not_eq_rev.",
            "VernacExtend",
            "2effcc5011dc2dc67f0cff3834821f55c0938ce1"
        ],
        [
            "apply Zlt_le_trans with (m := 0%Z); auto with zarith.",
            "VernacExtend",
            "5fa1758eb257d15b0d2aa671faef931699ea9e64"
        ],
        [
            "replace 0%Z with (- 0%nat)%Z; auto with zarith.",
            "VernacExtend",
            "957a3dec4cb429f53c6d700221d8a11270469ef5"
        ],
        [
            "apply Zlt_Zopp.",
            "VernacExtend",
            "f65acc0ebbbce2497b36740bf163938c842157b4"
        ],
        [
            "apply nNormPos; auto.",
            "VernacExtend",
            "e5ed4720e90a1a7d04d329ae5b9376848209d6ad"
        ],
        [
            "apply LeR0Fnum with (radix := radix); auto with zarith.",
            "VernacExtend",
            "7618493186a55fbcb98553549cd44aa866865932"
        ],
        [
            "rewrite FSuccSimpl4; auto.",
            "VernacExtend",
            "2d47fc6c82e2413444df3c5559a82c7fc117184e"
        ],
        [
            "replace y with (Float (Fnum y) (Fexp y)).",
            "VernacExtend",
            "76d14f9c1e2e98816205b6443163a6734689956a"
        ],
        [
            "rewrite H'5.",
            "VernacExtend",
            "408e27c747e37a9161b8d1de2e1be5ddec6d2694"
        ],
        [
            "unfold FtoRradix, FtoR in |- *; simpl in |- *; auto with real float.",
            "VernacExtend",
            "a64f0f289c1dc6f06b34342a475fcb502c559ea4"
        ],
        [
            "case y; simpl in |- *; auto.",
            "VernacExtend",
            "8ca4d5640acd88105f4dd8f78c893fa54bcc8f64"
        ],
        [
            "Contradict H'7; auto.",
            "VernacExtend",
            "12357ca29f32271152fcbd965cd9f477f6675800"
        ],
        [
            "apply Zle_not_lt; apply Zlt_le_weak.",
            "VernacExtend",
            "cbffdec2e5c5ea55757377202b2c36e42b3fba1f"
        ],
        [
            "rewrite H'7; auto with float zarith.",
            "VernacExtend",
            "bbe8efb9f3300d48e896969311c0594d48547f42"
        ],
        [
            "unfold pPred in |- *; rewrite <- Zsucc_pred.",
            "VernacExtend",
            "ef09c405ea7c17286c36fdb92fd6c0e91bde62ee"
        ],
        [
            "rewrite <- (Zabs_eq (Fnum y)); auto with float zarith.",
            "VernacExtend",
            "c494e3ccba12e4518b0ee0d89668560e52eeee79"
        ],
        [
            "apply LeR0Fnum with (radix := radix); auto with zarith.",
            "VernacExtend",
            "7618493186a55fbcb98553549cd44aa866865932"
        ],
        [
            "apply Rle_trans with (FtoRradix x); auto with real.",
            "VernacExtend",
            "5d29a8382345e2b1c0be8e43ca243058a60e24d0"
        ],
        [
            "apply Zlt_not_eq_rev.",
            "VernacExtend",
            "2effcc5011dc2dc67f0cff3834821f55c0938ce1"
        ],
        [
            "apply Zlt_le_trans with (m := 0%Z); auto with zarith.",
            "VernacExtend",
            "5fa1758eb257d15b0d2aa671faef931699ea9e64"
        ],
        [
            "replace 0%Z with (- 0%nat)%Z; auto with zarith.",
            "VernacExtend",
            "957a3dec4cb429f53c6d700221d8a11270469ef5"
        ],
        [
            "apply Zlt_Zopp.",
            "VernacExtend",
            "f65acc0ebbbce2497b36740bf163938c842157b4"
        ],
        [
            "apply nNormPos; auto.",
            "VernacExtend",
            "e5ed4720e90a1a7d04d329ae5b9376848209d6ad"
        ],
        [
            "apply LeR0Fnum with (radix := radix); auto with zarith.",
            "VernacExtend",
            "7618493186a55fbcb98553549cd44aa866865932"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Theorem R0RltRleSucc : forall x : float, (x < 0)%R -> (FSucc x <= 0)%R.",
            "VernacStartTheoremProof",
            "2955c9123aac26579d10e872bf654d031cc1da3c"
        ],
        [
            "intros a H'; unfold FSucc in |- *.",
            "VernacExtend",
            "737974d7cb55bd023cfaedfe3b78421d417a750c"
        ],
        [
            "generalize (Z_eq_bool_correct (Fnum a) (pPred (vNum b))); case (Z_eq_bool (Fnum a) (pPred (vNum b))); auto.",
            "VernacExtend",
            "937d14f905edfb31305427cae335d4bcba0cf6cf"
        ],
        [
            "intros H'0; absurd (Fnum a < 0)%Z; auto.",
            "VernacExtend",
            "ac731c050afc7320271797eb74957561ccbb3e32"
        ],
        [
            "rewrite H'0; auto with zarith arith.",
            "VernacExtend",
            "9050aebbe171a275752f823dcd2c9fc2d14b7946"
        ],
        [
            "apply Zle_not_lt; unfold pPred in |- *; apply Zle_Zpred; auto with float.",
            "VernacExtend",
            "3bdd10a1e8c83ea39b35420fe2f5709b7f1e9e40"
        ],
        [
            "apply Zlt_trans with 1%Z; auto with zarith; apply (vNumbMoreThanOne radix) with (precision := precision); auto with zarith.",
            "VernacExtend",
            "a92ec5f33d93039b97d8b89c3ef3b36d6a29aa27"
        ],
        [
            "apply R0LtFnum with (radix := radix); auto with zarith.",
            "VernacExtend",
            "376c19f116f46fe69a9223949a7f05cb483cb452"
        ],
        [
            "generalize (Z_eq_bool_correct (Fnum a) (- nNormMin radix precision)); case (Z_eq_bool (Fnum a) (- nNormMin radix precision)); intros H'1.",
            "VernacExtend",
            "611c5c39913ba724968b5698d7a9cc3f021aabb4"
        ],
        [
            "generalize (Z_eq_bool_correct (Fexp a) (- dExp b)); case (Z_eq_bool (Fexp a) (- dExp b)); intros H'2.",
            "VernacExtend",
            "86feaa2305d222fd8219390dd2c76516785bc9a9"
        ],
        [
            "intros H'0.",
            "VernacExtend",
            "e8ea833695b450eab455d302901072f04fd3096d"
        ],
        [
            "apply LeZEROFnum with (radix := radix); simpl in |- *; auto with zarith.",
            "VernacExtend",
            "09b3b8af184ee5d6747e2d487f72663a93c1ec8e"
        ],
        [
            "apply Zlt_le_succ.",
            "VernacExtend",
            "070de595889f014f0a173659377506422eb25080"
        ],
        [
            "apply R0LtFnum with (radix := radix); auto with zarith.",
            "VernacExtend",
            "376c19f116f46fe69a9223949a7f05cb483cb452"
        ],
        [
            "intros H'0.",
            "VernacExtend",
            "e8ea833695b450eab455d302901072f04fd3096d"
        ],
        [
            "apply LeZEROFnum with (radix := radix); simpl in |- *; auto with zarith.",
            "VernacExtend",
            "09b3b8af184ee5d6747e2d487f72663a93c1ec8e"
        ],
        [
            "replace 0%Z with (- (0))%Z; [ apply Zle_Zopp | simpl in |- *; auto ].",
            "VernacExtend",
            "fb6c3abf19f3051c96ea2aa6b8fd7eb78535951d"
        ],
        [
            "unfold pPred in |- *; apply Zle_Zpred; apply Zlt_trans with 1%Z; auto with zarith; apply (vNumbMoreThanOne radix) with (precision := precision); auto with zarith.",
            "VernacExtend",
            "74fde1246bb5c4a9482f744fcd348c87721d459c"
        ],
        [
            "intros H'0.",
            "VernacExtend",
            "e8ea833695b450eab455d302901072f04fd3096d"
        ],
        [
            "apply LeZEROFnum with (radix := radix); simpl in |- *; auto with zarith.",
            "VernacExtend",
            "09b3b8af184ee5d6747e2d487f72663a93c1ec8e"
        ],
        [
            "apply Zlt_le_succ.",
            "VernacExtend",
            "070de595889f014f0a173659377506422eb25080"
        ],
        [
            "apply R0LtFnum with (radix := radix); auto with zarith.",
            "VernacExtend",
            "376c19f116f46fe69a9223949a7f05cb483cb452"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Theorem FSuccPropNeg : forall x y : float, (x < 0)%R -> Fcanonic radix b x -> Fcanonic radix b y -> (x < y)%R -> (FSucc x <= y)%R.",
            "VernacStartTheoremProof",
            "15abe7ddbcec30299afc840f143d33f22decb65f"
        ],
        [
            "intros x y H' H'0 H'1 H'2.",
            "VernacExtend",
            "f4c6938634f065cc68eff94850d69a723e938618"
        ],
        [
            "cut (Fbounded b x); [ intros Fb0 | apply FcanonicBound with (1 := H'0) ].",
            "VernacExtend",
            "77ed3eea35586ad9560b2983781e033f30da9a6a"
        ],
        [
            "cut (Fbounded b y); [ intros Fb1 | apply FcanonicBound with (1 := H'1) ].",
            "VernacExtend",
            "3d1e3c39ac4b453a45561a823648da26fac7f699"
        ],
        [
            "case (Rle_or_lt 0 y); intros Rle0.",
            "VernacExtend",
            "810d86dbb6c6ef8d04e9815d04ba0191255cc641"
        ],
        [
            "apply Rle_trans with (r2 := 0%R); auto.",
            "VernacExtend",
            "053c2ecc554c61823c66d32f9cdf7e63a2a9a735"
        ],
        [
            "apply R0RltRleSucc; auto.",
            "VernacExtend",
            "f0aedbe041e5ce2eb6aaacb03d043e1b5f90f3ff"
        ],
        [
            "cut (Fnum x <> pPred (vNum b)); [ intros N0 | idtac ]; auto with zarith.",
            "VernacExtend",
            "77e4c9fffca50296ae5551e0d80210260bd1960e"
        ],
        [
            "generalize (Z_eq_bool_correct (Fnum x) (- nNormMin radix precision)); case (Z_eq_bool (Fnum x) (- nNormMin radix precision)); intros H'4.",
            "VernacExtend",
            "07010fad1b606a081b6fc387901f69860b11d7c6"
        ],
        [
            "generalize (Z_eq_bool_correct (Fexp x) (- dExp b)); case (Z_eq_bool (Fexp x) (- dExp b)); intros H'5.",
            "VernacExtend",
            "102fd854b6a569e1e20d5f2705c63fc79577403e"
        ],
        [
            "replace x with (Float (Fnum x) (Fexp x)).",
            "VernacExtend",
            "a8877e005fb0e6fdbc20b1adc720e9c08a677ad7"
        ],
        [
            "rewrite H'4; rewrite H'5; rewrite FSuccSimpl3; auto.",
            "VernacExtend",
            "9d8e99937775b8c36f817b27de22c22ba88ae9cb"
        ],
        [
            "case FcanonicLtNeg with (p := x) (q := y) (3 := pGivesBound); auto with real.",
            "VernacExtend",
            "12fea3996c25acee5f21ca80e86add2ea914c243"
        ],
        [
            "intros H'6; Contradict H'6; rewrite H'5; apply Zle_not_lt; auto with float.",
            "VernacExtend",
            "b8078149af24bc62f5fe88aeda36b59d04167dec"
        ],
        [
            "intros H'6; elim H'6; intros H'7 H'8; clear H'6; replace y with (Float (Fnum y) (Fexp y)).",
            "VernacExtend",
            "9fe027f369e3fbd80f11330d469cd16d7be54c49"
        ],
        [
            "rewrite <- H'7; rewrite H'5.",
            "VernacExtend",
            "e2a6003c02be53fd09d8e9aef88dd5f5a73277af"
        ],
        [
            "generalize Fle_Zle; unfold Fle, FtoRradix in |- *; intros H'9; apply H'9; clear H'9; auto with arith.",
            "VernacExtend",
            "0be0396b730e525f605759902cfbf21fb2d2dde5"
        ],
        [
            "rewrite <- H'4; auto with zarith.",
            "VernacExtend",
            "d6f6d27c21f067bc1f24b26a0c4bad513aef2d81"
        ],
        [
            "case y; auto.",
            "VernacExtend",
            "84af06c37f8aaa8afdc8edb1aa386eabca2a5ee7"
        ],
        [
            "case x; auto.",
            "VernacExtend",
            "f57363a6383428f88164bd82d8acc0208070625f"
        ],
        [
            "rewrite FSuccSimpl2; auto.",
            "VernacExtend",
            "07ca4a523210d74d7ffb5c3b1afae4eeec0e3f44"
        ],
        [
            "case FcanonicLtNeg with (p := x) (q := y) (3 := pGivesBound); auto with real.",
            "VernacExtend",
            "12fea3996c25acee5f21ca80e86add2ea914c243"
        ],
        [
            "intros H'6; replace y with (Float (Fnum y) (Fexp y)).",
            "VernacExtend",
            "6ebdb08d28283caaf306cf670f6550f8dc8fd8f1"
        ],
        [
            "case (Zlt_next _ _ H'6); intros H'7.",
            "VernacExtend",
            "b0fba7fbebf0368957e970feca40cb41d3e424cc"
        ],
        [
            "rewrite H'7.",
            "VernacExtend",
            "03c6aba9ff54b96ca970e9bd498865d563f34b83"
        ],
        [
            "rewrite <- Zpred_succ.",
            "VernacExtend",
            "57dea680ca1415cbebeb3f178fd56104bf5deab3"
        ],
        [
            "unfold FtoRradix, FtoR in |- *; simpl in |- *.",
            "VernacExtend",
            "85a3da1582165d92ceb7faef707de88822bccf1a"
        ],
        [
            "apply Rle_monotone_exp; auto with zarith.",
            "VernacExtend",
            "61034efec0f9874dde132ba1356712241ca5f33c"
        ],
        [
            "rewrite <- (Zopp_involutive (Fnum y)); apply Rle_IZR; apply Zle_Zopp.",
            "VernacExtend",
            "c21b2fc5a3fde34691a6172a92fb1c3a75157e53"
        ],
        [
            "unfold pPred in |- *; apply Zle_Zpred; rewrite <- Zabs_eq_opp; auto with float zarith.",
            "VernacExtend",
            "929ed77034621444d8d4664495dc57bfada527c9"
        ],
        [
            "apply Zlt_le_weak; apply R0LtFnum with (radix := radix); auto with zarith.",
            "VernacExtend",
            "f60b2bd5db023c7405dfba6df3852d1d94d29d1e"
        ],
        [
            "apply Rlt_le; auto with real.",
            "VernacExtend",
            "e1bf079018a05b732af3de134a13c80fa1b905a3"
        ],
        [
            "unfold FtoRradix in |- *; apply FcanonicNegFexpRlt with (3 := pGivesBound); auto.",
            "VernacExtend",
            "9185c2d580acdd0a20cccfbe23a470808a9838bc"
        ],
        [
            "apply Rlt_le; auto.",
            "VernacExtend",
            "4003e3e1c449ee89cad9e953d0a562db8235648c"
        ],
        [
            "rewrite <- FSuccSimpl2; auto.",
            "VernacExtend",
            "c5b8aafd48f398a2483876026c80432e3d6fd236"
        ],
        [
            "apply R0RltRleSucc; auto.",
            "VernacExtend",
            "f0aedbe041e5ce2eb6aaacb03d043e1b5f90f3ff"
        ],
        [
            "rewrite <- FSuccSimpl2; auto.",
            "VernacExtend",
            "c5b8aafd48f398a2483876026c80432e3d6fd236"
        ],
        [
            "apply FSuccCanonic; auto.",
            "VernacExtend",
            "6a18df3c3cef38b325b61a78e1886bb852c7efc6"
        ],
        [
            "simpl in |- *; auto.",
            "VernacExtend",
            "9b631374b1d3067f703fd99c5dc6e1e5c8405957"
        ],
        [
            "apply Zsucc_lt_reg; auto.",
            "VernacExtend",
            "a74e34ded40d03b747e80609986d4f171cd5d6e3"
        ],
        [
            "rewrite <- Zsucc_pred; auto with zarith.",
            "VernacExtend",
            "5cae25187bb59cf10857043e129e382ac4ebe3fc"
        ],
        [
            "case y; auto.",
            "VernacExtend",
            "84af06c37f8aaa8afdc8edb1aa386eabca2a5ee7"
        ],
        [
            "intros H'6; elim H'6; intros H'7 H'8; clear H'6; apply Rlt_le.",
            "VernacExtend",
            "4faf53b47a9b9fdb86d1d0a8c9e9f1a706e65490"
        ],
        [
            "Contradict H'8; rewrite H'4.",
            "VernacExtend",
            "a81e3450900d59db265f9bf140a4f1b893060048"
        ],
        [
            "apply Zle_not_lt.",
            "VernacExtend",
            "a635904a634172283c98f3792d1f8261c5710c4f"
        ],
        [
            "replace (Fnum y) with (- Zabs (Fnum y))%Z.",
            "VernacExtend",
            "807e9f2a4f5b2d3910a2d58266f48b993f96a721"
        ],
        [
            "apply Zle_Zopp.",
            "VernacExtend",
            "4116fffd3d82e798294ccbceb07ce04df95b160a"
        ],
        [
            "apply pNormal_absolu_min with (3 := pGivesBound); auto.",
            "VernacExtend",
            "550a97ca4cafd1444f332f8fcb8137175b8efaf6"
        ],
        [
            "case H'1; auto.",
            "VernacExtend",
            "a44f1b914e489dd19b841fdfab025ba14e3d8f86"
        ],
        [
            "intros H'6; Contradict H'5; rewrite H'7; auto with float.",
            "VernacExtend",
            "db3647d9747e520fcfae0a04aaca4b432071a4a4"
        ],
        [
            "apply FsubnormalFexp with (1 := H'6).",
            "VernacExtend",
            "fe3839b8dd0c449fba9e61e25c6f1c9a4e6accb9"
        ],
        [
            "rewrite Zabs_eq_opp.",
            "VernacExtend",
            "7b3bb90c008af9eaa2ac3245f8167e5a1cee077a"
        ],
        [
            "ring.",
            "VernacExtend",
            "baadd9fc4c175005af409bb466fcea9fab25b4e6"
        ],
        [
            "apply R0LeFnum with (radix := radix); auto with zarith.",
            "VernacExtend",
            "386809c0eda4bd6092f26d151a6b3376a55cda43"
        ],
        [
            "apply Rlt_le; auto.",
            "VernacExtend",
            "4003e3e1c449ee89cad9e953d0a562db8235648c"
        ],
        [
            "rewrite FSuccSimpl4; auto.",
            "VernacExtend",
            "2d47fc6c82e2413444df3c5559a82c7fc117184e"
        ],
        [
            "case FcanonicLtNeg with (p := x) (q := y) (3 := pGivesBound); auto.",
            "VernacExtend",
            "0099850b815a8af1d30370efdddc9991375fca8c"
        ],
        [
            "apply Rlt_le; auto with real.",
            "VernacExtend",
            "e1bf079018a05b732af3de134a13c80fa1b905a3"
        ],
        [
            "intros H'5; apply Rlt_le; auto.",
            "VernacExtend",
            "9dfb7d69d46f4d4b65c6dbb0080dc912fc77ff43"
        ],
        [
            "unfold FtoRradix in |- *; apply FcanonicNegFexpRlt with (3 := pGivesBound); auto.",
            "VernacExtend",
            "9185c2d580acdd0a20cccfbe23a470808a9838bc"
        ],
        [
            "apply Rlt_le; auto.",
            "VernacExtend",
            "4003e3e1c449ee89cad9e953d0a562db8235648c"
        ],
        [
            "rewrite <- FSuccSimpl4; auto.",
            "VernacExtend",
            "c4beb5a51c8ef4fd8e99b16d78ac38661db6c177"
        ],
        [
            "apply R0RltRleSucc; auto.",
            "VernacExtend",
            "f0aedbe041e5ce2eb6aaacb03d043e1b5f90f3ff"
        ],
        [
            "rewrite <- FSuccSimpl4; auto.",
            "VernacExtend",
            "c4beb5a51c8ef4fd8e99b16d78ac38661db6c177"
        ],
        [
            "apply FSuccCanonic; auto.",
            "VernacExtend",
            "6a18df3c3cef38b325b61a78e1886bb852c7efc6"
        ],
        [
            "intros H'5; elim H'5; intros H'6 H'7; clear H'5.",
            "VernacExtend",
            "de80fa61b960a237a06c21afde1d0a1c86c5fbea"
        ],
        [
            "replace y with (Float (Fnum y) (Fexp y)).",
            "VernacExtend",
            "76d14f9c1e2e98816205b6443163a6734689956a"
        ],
        [
            "rewrite H'6.",
            "VernacExtend",
            "7a5e609e825f92618da18be03aa16ab06d13e048"
        ],
        [
            "generalize Fle_Zle; unfold Fle, FtoRradix in |- *; intros H'8; apply H'8; clear H'8; auto with zarith arith.",
            "VernacExtend",
            "570d564065931ab5430d935e2d80ab24c4867286"
        ],
        [
            "case y; auto.",
            "VernacExtend",
            "84af06c37f8aaa8afdc8edb1aa386eabca2a5ee7"
        ],
        [
            "apply Zlt_not_eq.",
            "VernacExtend",
            "e5f5ea956a3c3960b00bb158e170ed5b6dd61dc4"
        ],
        [
            "apply Zlt_trans with 0%Z; auto with zarith.",
            "VernacExtend",
            "7a874dd70fd399b933593dbe4244c02704137262"
        ],
        [
            "apply R0LtFnum with (radix := radix); auto with zarith.",
            "VernacExtend",
            "376c19f116f46fe69a9223949a7f05cb483cb452"
        ],
        [
            "unfold pPred in |- *; apply Zlt_succ_pred.",
            "VernacExtend",
            "e75c48ef2825774936e2b1274fd64d8c51e627fd"
        ],
        [
            "replace (Zsucc 0) with (Z_of_nat 1); [ apply (vNumbMoreThanOne radix) with (precision := precision) | simpl in |- * ]; auto with zarith.",
            "VernacExtend",
            "628a88b0c50dee10a2ffa4788688a4c0ca2d1763"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Theorem FSuccProp : forall x y : float, Fcanonic radix b x -> Fcanonic radix b y -> (x < y)%R -> (FSucc x <= y)%R.",
            "VernacStartTheoremProof",
            "a4bfccacf1014bec84ffa18adc877aa9ccea311b"
        ],
        [
            "intros x y H' H'0 H'1; case (Rle_or_lt 0 x); intros H'2.",
            "VernacExtend",
            "851856379c3bec3079c9914399ef55401c3726c8"
        ],
        [
            "apply FSuccPropPos; auto.",
            "VernacExtend",
            "f5c2840082fdb086eb5e016a1c86be6bff2eb284"
        ],
        [
            "apply FSuccPropNeg; auto.",
            "VernacExtend",
            "a5f37464b32ebee66cd9fce6b2a6367b16758580"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Theorem FSuccZleEq : forall p q : float, (p <= q)%R -> (q < FSucc p)%R -> (Fexp p <= Fexp q)%Z -> p = q :>R.",
            "VernacStartTheoremProof",
            "f3ca97023c850cb0e856af5c7bdd14855c7bd2f1"
        ],
        [
            "intros p q H'.",
            "VernacExtend",
            "6d0165163a2a8e407c09482ce517f2835b5de359"
        ],
        [
            "generalize (Z_eq_bool_correct (Fnum p) (pPred (vNum b))); case (Z_eq_bool (Fnum p) (pPred (vNum b))); intros H'0.",
            "VernacExtend",
            "dbf9e8042129dce9df81274894a7736f53adb47d"
        ],
        [
            "rewrite FSuccSimpl1; simpl in |- *; auto with arith.",
            "VernacExtend",
            "3b06ad8f2e3d8b71b3130a4d843267a1d8612a39"
        ],
        [
            "intros H'1 H'2.",
            "VernacExtend",
            "7a23b9b623f1e0b29a054bf061a5d299d6d4f251"
        ],
        [
            "replace p with (Fshift radix (Zabs_nat (Fexp q - Fexp p)) q).",
            "VernacExtend",
            "8f63cca86695653c25e8b7e59e566a15a22acc0c"
        ],
        [
            "unfold FtoRradix in |- *; rewrite FshiftCorrect; auto with real.",
            "VernacExtend",
            "2191906f2acd1f5f5d36fa8f6fc5c5d7495cf783"
        ],
        [
            "cut (Fexp (Fshift radix (Zabs_nat (Fexp q - Fexp p)) q) = Fexp p); [ intros Eq0 | idtac ].",
            "VernacExtend",
            "9969f0ac9149afe75e48d239d9fbfb871bca5466"
        ],
        [
            "apply floatEq; auto.",
            "VernacExtend",
            "c847d668791777965ba33ea03f8c58569a27270b"
        ],
        [
            "apply sym_equal; apply Zeq_Zs; auto.",
            "VernacExtend",
            "544e17021308978edade2290da1b51e46f4f11f9"
        ],
        [
            "apply Rle_Fexp_eq_Zle with (radix := radix); auto with arith.",
            "VernacExtend",
            "9e010cb344e056de0a32c5c87a8ac13a89edb70c"
        ],
        [
            "rewrite FshiftCorrect; auto.",
            "VernacExtend",
            "a32fc58b728c0efc747f4947893df95ea3a250c0"
        ],
        [
            "replace (Zsucc (Fnum p)) with (Fnum (Fshift radix 1 (FSucc p))); auto.",
            "VernacExtend",
            "8a39a0346a49c25f75887f9cab96df3f30f919a8"
        ],
        [
            "apply Rlt_Fexp_eq_Zlt with (radix := radix); auto with arith.",
            "VernacExtend",
            "dc2533501e2fa226a679c90172ce0c4803cac522"
        ],
        [
            "repeat rewrite FshiftCorrect; auto.",
            "VernacExtend",
            "e02d2e61004981480c8d9e17c4cf3a012483a0d9"
        ],
        [
            "rewrite FSuccSimpl1; simpl in |- *; auto with arith.",
            "VernacExtend",
            "3b06ad8f2e3d8b71b3130a4d843267a1d8612a39"
        ],
        [
            "unfold Fshift in |- *; simpl in |- *.",
            "VernacExtend",
            "bc2226e4b5a4ef5bbaea414d285c81f30a1eb932"
        ],
        [
            "rewrite FSuccSimpl1; simpl in |- *; auto with arith.",
            "VernacExtend",
            "3b06ad8f2e3d8b71b3130a4d843267a1d8612a39"
        ],
        [
            "rewrite inj_abs; auto with zarith.",
            "VernacExtend",
            "d832d70d6f4177fa3d020760f1ccab18c59abdc1"
        ],
        [
            "unfold Fshift in |- *; simpl in |- *.",
            "VernacExtend",
            "bc2226e4b5a4ef5bbaea414d285c81f30a1eb932"
        ],
        [
            "rewrite FSuccSimpl1; simpl in |- *; auto with arith.",
            "VernacExtend",
            "3b06ad8f2e3d8b71b3130a4d843267a1d8612a39"
        ],
        [
            "rewrite Z.mul_1_r.",
            "VernacExtend",
            "80f92f5dcc09db388a2087f0ef3ff1d16ecdfdff"
        ],
        [
            "rewrite H'0.",
            "VernacExtend",
            "155943e97f3d58c39d0b7dc8dbaf42688f94c62f"
        ],
        [
            "unfold pPred in |- *; rewrite <- Zsucc_pred.",
            "VernacExtend",
            "ef09c405ea7c17286c36fdb92fd6c0e91bde62ee"
        ],
        [
            "rewrite (PosNormMin radix) with (precision := precision); auto with zarith; apply Zmult_comm.",
            "VernacExtend",
            "31a2aae12bcbbd27654ddc224566dc86bb15f370"
        ],
        [
            "unfold Fshift in |- *; simpl in |- *.",
            "VernacExtend",
            "bc2226e4b5a4ef5bbaea414d285c81f30a1eb932"
        ],
        [
            "rewrite inj_abs; auto with zarith.",
            "VernacExtend",
            "d832d70d6f4177fa3d020760f1ccab18c59abdc1"
        ],
        [
            "generalize (Z_eq_bool_correct (Fnum p) (- nNormMin radix precision)); case (Z_eq_bool (Fnum p) (- nNormMin radix precision)); intros H'1.",
            "VernacExtend",
            "731e9f50aa4e66694b90248c25a1e2931b1ac6d4"
        ],
        [
            "generalize (Z_eq_bool_correct (Fexp p) (- dExp b)); case (Z_eq_bool (Fexp p) (- dExp b)); intros H'2.",
            "VernacExtend",
            "9e1d5c4acec87d6378c96f74752af16727328b94"
        ],
        [
            "pattern p at 1 in |- *; replace p with (Float (Fnum p) (Fexp p)).",
            "VernacExtend",
            "ecfa8514f229344b3cf10921005d5f717fe70a2a"
        ],
        [
            "rewrite H'1; rewrite H'2.",
            "VernacExtend",
            "859aded9394f50360924ac6263024ea3a6abce79"
        ],
        [
            "rewrite FSuccSimpl3; auto with arith.",
            "VernacExtend",
            "932e171640adb276130b3badfbe45f5d7a1beed7"
        ],
        [
            "intros H'3 H'4.",
            "VernacExtend",
            "7e89429bccb17ca06ae3048eafa07dcbd915b5be"
        ],
        [
            "replace p with (Fshift radix (Zabs_nat (Fexp q - Fexp p)) q).",
            "VernacExtend",
            "8f63cca86695653c25e8b7e59e566a15a22acc0c"
        ],
        [
            "unfold FtoRradix in |- *; rewrite FshiftCorrect; auto with real.",
            "VernacExtend",
            "2191906f2acd1f5f5d36fa8f6fc5c5d7495cf783"
        ],
        [
            "cut (Fexp (Fshift radix (Zabs_nat (Fexp q - Fexp p)) q) = Fexp p); [ intros Eq0 | idtac ].",
            "VernacExtend",
            "9969f0ac9149afe75e48d239d9fbfb871bca5466"
        ],
        [
            "apply floatEq; auto.",
            "VernacExtend",
            "c847d668791777965ba33ea03f8c58569a27270b"
        ],
        [
            "apply sym_equal; apply Zeq_Zs; auto.",
            "VernacExtend",
            "544e17021308978edade2290da1b51e46f4f11f9"
        ],
        [
            "apply Rle_Fexp_eq_Zle with (radix := radix); auto with arith.",
            "VernacExtend",
            "9e010cb344e056de0a32c5c87a8ac13a89edb70c"
        ],
        [
            "rewrite FshiftCorrect; auto.",
            "VernacExtend",
            "a32fc58b728c0efc747f4947893df95ea3a250c0"
        ],
        [
            "replace (Zsucc (Fnum p)) with (Fnum (FSucc p)); auto.",
            "VernacExtend",
            "acb272b342167c09aaadfbbd67dafadfa4b17a74"
        ],
        [
            "pattern p at 2 in |- *; replace p with (Float (Fnum p) (Fexp p)).",
            "VernacExtend",
            "3410205309fe320e0609b78fa016d133ea7fba88"
        ],
        [
            "rewrite H'1; rewrite H'2.",
            "VernacExtend",
            "859aded9394f50360924ac6263024ea3a6abce79"
        ],
        [
            "rewrite FSuccSimpl3; auto with arith.",
            "VernacExtend",
            "932e171640adb276130b3badfbe45f5d7a1beed7"
        ],
        [
            "rewrite <- H'2.",
            "VernacExtend",
            "409add0b46217267974c0b7b31d42067fd38e324"
        ],
        [
            "apply Rlt_Fexp_eq_Zlt with (radix := radix); auto with arith.",
            "VernacExtend",
            "dc2533501e2fa226a679c90172ce0c4803cac522"
        ],
        [
            "rewrite FshiftCorrect; auto.",
            "VernacExtend",
            "a32fc58b728c0efc747f4947893df95ea3a250c0"
        ],
        [
            "rewrite H'2; auto.",
            "VernacExtend",
            "2c2cd2310e6d6c30ae4cdcfb896dfe62bf83deb1"
        ],
        [
            "case p; simpl in |- *; auto.",
            "VernacExtend",
            "462cf32570b2f74af162d0c2057c21dde8a661bf"
        ],
        [
            "pattern p at 1 in |- *; replace p with (Float (Fnum p) (Fexp p)).",
            "VernacExtend",
            "ecfa8514f229344b3cf10921005d5f717fe70a2a"
        ],
        [
            "rewrite H'1; rewrite H'2.",
            "VernacExtend",
            "859aded9394f50360924ac6263024ea3a6abce79"
        ],
        [
            "rewrite FSuccSimpl3; auto with arith.",
            "VernacExtend",
            "932e171640adb276130b3badfbe45f5d7a1beed7"
        ],
        [
            "case p; simpl in |- *; auto.",
            "VernacExtend",
            "462cf32570b2f74af162d0c2057c21dde8a661bf"
        ],
        [
            "unfold Fshift in |- *; simpl in |- *.",
            "VernacExtend",
            "bc2226e4b5a4ef5bbaea414d285c81f30a1eb932"
        ],
        [
            "rewrite inj_abs; auto with zarith.",
            "VernacExtend",
            "d832d70d6f4177fa3d020760f1ccab18c59abdc1"
        ],
        [
            "case p; simpl in |- *; auto.",
            "VernacExtend",
            "462cf32570b2f74af162d0c2057c21dde8a661bf"
        ],
        [
            "rewrite FSuccSimpl2; auto with arith.",
            "VernacExtend",
            "3d038bab3992cc340f1aa1a0350ab7bde3c222bc"
        ],
        [
            "intros H'3 H'4.",
            "VernacExtend",
            "7e89429bccb17ca06ae3048eafa07dcbd915b5be"
        ],
        [
            "unfold FtoRradix in |- *; rewrite <- FshiftCorrect with (n := 1) (x := p); auto.",
            "VernacExtend",
            "7e83128b90b142a8fa736401cc4098c124cfc483"
        ],
        [
            "replace (Fshift radix 1 p) with (Fshift radix (S (Zabs_nat (Fexp q - Fexp p))) q).",
            "VernacExtend",
            "d2e0ed87cf35158cb99469679c1ce45ad2c91d09"
        ],
        [
            "repeat rewrite FshiftCorrect; auto with real.",
            "VernacExtend",
            "29fa2d7a7eb918aabba2c0b44616f7ce297d2a67"
        ],
        [
            "cut (Fexp (Fshift radix (S (Zabs_nat (Fexp q - Fexp p))) q) = Fexp (Fshift radix 1 p)); [ intros Eq0 | idtac ].",
            "VernacExtend",
            "fd33ee8ed07bcb788c81b874de699b2cbfd60c6b"
        ],
        [
            "apply floatEq; auto.",
            "VernacExtend",
            "c847d668791777965ba33ea03f8c58569a27270b"
        ],
        [
            "apply sym_equal; apply Zeq_Zs; auto.",
            "VernacExtend",
            "544e17021308978edade2290da1b51e46f4f11f9"
        ],
        [
            "apply Rle_Fexp_eq_Zle with (radix := radix); auto with arith.",
            "VernacExtend",
            "9e010cb344e056de0a32c5c87a8ac13a89edb70c"
        ],
        [
            "repeat rewrite FshiftCorrect; auto.",
            "VernacExtend",
            "e02d2e61004981480c8d9e17c4cf3a012483a0d9"
        ],
        [
            "replace (Zsucc (Fnum (Fshift radix 1 p))) with (Fnum (FSucc p)); auto.",
            "VernacExtend",
            "640b2832253686e735052789dcefee1826af4ba4"
        ],
        [
            "apply Rlt_Fexp_eq_Zlt with (radix := radix); auto with arith.",
            "VernacExtend",
            "dc2533501e2fa226a679c90172ce0c4803cac522"
        ],
        [
            "repeat rewrite FshiftCorrect; auto.",
            "VernacExtend",
            "e02d2e61004981480c8d9e17c4cf3a012483a0d9"
        ],
        [
            "rewrite FSuccSimpl2; auto with arith.",
            "VernacExtend",
            "3d038bab3992cc340f1aa1a0350ab7bde3c222bc"
        ],
        [
            "rewrite FSuccSimpl2; auto with arith.",
            "VernacExtend",
            "3d038bab3992cc340f1aa1a0350ab7bde3c222bc"
        ],
        [
            "rewrite FSuccSimpl2; auto with arith.",
            "VernacExtend",
            "3d038bab3992cc340f1aa1a0350ab7bde3c222bc"
        ],
        [
            "unfold Fshift in |- *; simpl in |- *.",
            "VernacExtend",
            "bc2226e4b5a4ef5bbaea414d285c81f30a1eb932"
        ],
        [
            "rewrite Z.mul_1_r; auto.",
            "VernacExtend",
            "172397270c9b7d2bf54e376435887c50b2182efd"
        ],
        [
            "unfold pPred in |- *; rewrite (PosNormMin radix) with (precision := precision); auto with zarith; rewrite H'1.",
            "VernacExtend",
            "780b7d3b557d682fd3502bb62a539044d2a43228"
        ],
        [
            "rewrite Zopp_mult_distr_l_reverse.",
            "VernacExtend",
            "1f0b9be4fa18bab508e40ac78d2944a3a3bf0e3c"
        ],
        [
            "rewrite (Zmult_comm radix).",
            "VernacExtend",
            "28a9ef3ef5d0e9cc3814f2a015c6249affc35491"
        ],
        [
            "apply Zopp_Zpred_Zs.",
            "VernacExtend",
            "434c7b563695b2d72e95298441f6b4841720020e"
        ],
        [
            "unfold Fshift in |- *; simpl in |- *.",
            "VernacExtend",
            "bc2226e4b5a4ef5bbaea414d285c81f30a1eb932"
        ],
        [
            "replace (Zpos (P_of_succ_nat (Zabs_nat (Fexp q - Fexp p)))) with (Zsucc (Fexp q - Fexp p)).",
            "VernacExtend",
            "eeddbf6c88ab54e0f0b28c0164ce8246afc416cc"
        ],
        [
            "unfold Zsucc, Zpred in |- *; ring.",
            "VernacExtend",
            "4348ec6a48b11a36f64ea16ed86af1be9d059dde"
        ],
        [
            "rewrite <- (inj_abs (Fexp q - Fexp p)); auto with zarith.",
            "VernacExtend",
            "861f4e90d4cad8614ee1fa7efc7f10ec3da10062"
        ],
        [
            "rewrite <- inj_S; simpl in |- *; auto.",
            "VernacExtend",
            "dcc472ba0c8ccc5c15d946ede54aeb558a5f533d"
        ],
        [
            "rewrite inj_abs; auto with zarith.",
            "VernacExtend",
            "d832d70d6f4177fa3d020760f1ccab18c59abdc1"
        ],
        [
            "rewrite FSuccSimpl4; auto.",
            "VernacExtend",
            "2d47fc6c82e2413444df3c5559a82c7fc117184e"
        ],
        [
            "intros H'2 H'3.",
            "VernacExtend",
            "004d2e67d96853e9bd2659ad722ab0eed6430a06"
        ],
        [
            "replace p with (Fshift radix (Zabs_nat (Fexp q - Fexp p)) q).",
            "VernacExtend",
            "8f63cca86695653c25e8b7e59e566a15a22acc0c"
        ],
        [
            "unfold FtoRradix in |- *; rewrite FshiftCorrect; auto with real.",
            "VernacExtend",
            "2191906f2acd1f5f5d36fa8f6fc5c5d7495cf783"
        ],
        [
            "cut (Fexp (Fshift radix (Zabs_nat (Fexp q - Fexp p)) q) = Fexp p); [ intros Eq0 | idtac ].",
            "VernacExtend",
            "9969f0ac9149afe75e48d239d9fbfb871bca5466"
        ],
        [
            "apply floatEq; auto.",
            "VernacExtend",
            "c847d668791777965ba33ea03f8c58569a27270b"
        ],
        [
            "apply sym_equal; apply Zeq_Zs; auto.",
            "VernacExtend",
            "544e17021308978edade2290da1b51e46f4f11f9"
        ],
        [
            "apply Rle_Fexp_eq_Zle with (radix := radix); auto with arith.",
            "VernacExtend",
            "9e010cb344e056de0a32c5c87a8ac13a89edb70c"
        ],
        [
            "rewrite FshiftCorrect; auto.",
            "VernacExtend",
            "a32fc58b728c0efc747f4947893df95ea3a250c0"
        ],
        [
            "replace (Zsucc (Fnum p)) with (Fnum (FSucc p)); auto.",
            "VernacExtend",
            "acb272b342167c09aaadfbbd67dafadfa4b17a74"
        ],
        [
            "rewrite FSuccSimpl4; auto.",
            "VernacExtend",
            "2d47fc6c82e2413444df3c5559a82c7fc117184e"
        ],
        [
            "apply Rlt_Fexp_eq_Zlt with (radix := radix); auto with arith.",
            "VernacExtend",
            "dc2533501e2fa226a679c90172ce0c4803cac522"
        ],
        [
            "repeat rewrite FshiftCorrect; auto.",
            "VernacExtend",
            "e02d2e61004981480c8d9e17c4cf3a012483a0d9"
        ],
        [
            "rewrite FSuccSimpl4; auto.",
            "VernacExtend",
            "2d47fc6c82e2413444df3c5559a82c7fc117184e"
        ],
        [
            "unfold Fshift in |- *; simpl in |- *.",
            "VernacExtend",
            "bc2226e4b5a4ef5bbaea414d285c81f30a1eb932"
        ],
        [
            "rewrite inj_abs; auto with zarith.",
            "VernacExtend",
            "d832d70d6f4177fa3d020760f1ccab18c59abdc1"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Definition FNSucc x := FSucc (Fnormalize radix b precision x).",
            "VernacDefinition",
            "dd9758f2ea3ef481add779c3e04f005822e3f36a"
        ],
        [
            "Theorem FNSuccCanonic : forall a : float, Fbounded b a -> Fcanonic radix b (FNSucc a).",
            "VernacStartTheoremProof",
            "0a142ebe87a0e23cf4db321ff5a4cff9e706f079"
        ],
        [
            "intros a H'; unfold FNSucc in |- *.",
            "VernacExtend",
            "4f8cd16520dfe7190af0aa5a6639baac8aba68a8"
        ],
        [
            "apply FSuccCanonic; auto with float.",
            "VernacExtend",
            "f371894f20064533d937c3e45dc6de16e40ee2bd"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Theorem FNSuccLt : forall a : float, (a < FNSucc a)%R.",
            "VernacStartTheoremProof",
            "9a7af1031b57d09917e721df8d54281c765d759d"
        ],
        [
            "intros a; unfold FNSucc in |- *.",
            "VernacExtend",
            "984e341d3db849b0dcf54c77ef6be713165234f5"
        ],
        [
            "unfold FtoRradix in |- *; rewrite <- (FnormalizeCorrect _ radixMoreThanOne b precision a).",
            "VernacExtend",
            "ce79997f4c990db5af329edf24a3e8f034519d81"
        ],
        [
            "apply FSuccLt; auto.",
            "VernacExtend",
            "bffe14293ac497aa5e23792addde1959650d5030"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Theorem FNSuccProp : forall x y : float, Fbounded b x -> Fbounded b y -> (x < y)%R -> (FNSucc x <= y)%R.",
            "VernacStartTheoremProof",
            "83a020fe77a1ecd4c36d17dcec65134d41286522"
        ],
        [
            "intros x y H' H'0 H'1; unfold FNSucc in |- *.",
            "VernacExtend",
            "7f5970c8e86398ccdc40122d6c85adae80fca642"
        ],
        [
            "replace (FtoRradix y) with (FtoRradix (Fnormalize radix b precision y)).",
            "VernacExtend",
            "7ee22e9f96d884cf2e07cae1588a34248ed2080d"
        ],
        [
            "apply FSuccProp; auto with float.",
            "VernacExtend",
            "7fba76eb0490959e401bc293867e316d8c56b77e"
        ],
        [
            "unfold FtoRradix in |- *; repeat rewrite FnormalizeCorrect; auto.",
            "VernacExtend",
            "6a3ad66886a4e76962cbb26347d7beef4330a14a"
        ],
        [
            "unfold FtoRradix in |- *; repeat rewrite FnormalizeCorrect; auto.",
            "VernacExtend",
            "6a3ad66886a4e76962cbb26347d7beef4330a14a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Theorem FNSuccEq : forall p q : float, Fbounded b p -> Fbounded b q -> p = q :>R -> FNSucc p = FNSucc q.",
            "VernacStartTheoremProof",
            "cea0750226e01a312b3ef306ff7a11fdceb84584"
        ],
        [
            "intros p q H' H'0 H'1; unfold FNSucc in |- *.",
            "VernacExtend",
            "3223fbd1f4935f8fc661c32da783c6e42ca4fe0a"
        ],
        [
            "replace (Fnormalize radix b precision p) with (Fnormalize radix b precision q); auto.",
            "VernacExtend",
            "91ea9eb8a857f1216a70004d883db4fb5616a928"
        ],
        [
            "apply FcanonicUnique with (radix := radix) (b := b) (precision := precision); auto with float.",
            "VernacExtend",
            "9ce145d83abb357dd9229d5425ca381191e6dc92"
        ],
        [
            "repeat rewrite FnormalizeCorrect; auto.",
            "VernacExtend",
            "1ef2ab074a009b9c68c82a1455e654578cbb61d1"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "End suc.",
            "VernacEndSegment",
            "c2f039aeb0a9a6c58d7ffc9dd8e1d795691c5b12"
        ],
        [
            "Hint Resolve FSuccNormPos FBoundedSuc FSuccSubnormal FSuccNegCanonic FSuccCanonic FSuccLt FSuccPropPos R0RltRleSucc FSuccPropNeg FSuccProp FNSuccCanonic FNSuccLt: float.",
            "VernacHints",
            "9368d8428b4ec0ffc1f99aff2157a95834476ffc"
        ],
        [
            "Section suc1.",
            "VernacBeginSection",
            "c833a0825dc415c5c089ee468409affa9a34a156"
        ],
        [
            "Variable b : Fbound.",
            "VernacAssumption",
            "17a11c003f49f819b8cb809f61b140702916486d"
        ],
        [
            "Variable radix : Z.",
            "VernacAssumption",
            "2349b77d134e0c9bb013a8bdca0020ca16fc023b"
        ],
        [
            "Variable precision : nat.",
            "VernacAssumption",
            "2235bc83b7ebf4cbe373b5fa3b4f3c643d454130"
        ],
        [
            "Let FtoRradix := FtoR radix.",
            "VernacDefinition",
            "5aa29a9595c6e9e03b28c6d232299552ec761ad7"
        ],
        [
            "Local Coercion FtoRradix : float >-> R.",
            "VernacCoercion",
            "cec6b845059d434f72dda1a67638af64e1fb0628"
        ],
        [
            "Hypothesis radixMoreThanOne : (1 < radix)%Z.",
            "VernacAssumption",
            "f4d3774b2275f4c4c3af941091d4d99f9a2129aa"
        ],
        [
            "Hypothesis precisionNotZero : 1 < precision.",
            "VernacAssumption",
            "e79c11c811d69748a00a1e44be084cf1cb64788a"
        ],
        [
            "Hypothesis pGivesBound : Zpos (vNum b) = Zpower_nat radix precision.",
            "VernacAssumption",
            "d558f967d87d2a42d14158ac115b10c6f5358430"
        ],
        [
            "Theorem nNormMimLtvNum : (nNormMin radix precision < pPred (vNum b))%Z.",
            "VernacStartTheoremProof",
            "eca76d7a2740edac20aa9fa13f6ae2a69575b254"
        ],
        [
            "unfold pPred in |- *; rewrite PosNormMin with (radix := radix) (precision := precision); auto with zarith.",
            "VernacExtend",
            "0bf9d69379e05b8a31dd60c1e5b00aca61b07b6c"
        ],
        [
            "apply Zlt_le_trans with (Zpred (2 * nNormMin radix precision)).",
            "VernacExtend",
            "3fe9c03b254bed391a1a6e0fe39349a36eb370bb"
        ],
        [
            "replace (Zpred (2 * nNormMin radix precision)) with (Zpred (nNormMin radix precision) + nNormMin radix precision)%Z; [ idtac | unfold Zpred in |- *; ring ].",
            "VernacExtend",
            "c0c6fafb39a8faf80ce3787071562dbbb671325d"
        ],
        [
            "pattern (nNormMin radix precision) at 1 in |- *; replace (nNormMin radix precision) with (0 + nNormMin radix precision)%Z; [ idtac | ring ].",
            "VernacExtend",
            "23195fc5bf0bd7bf1b2710439259cf611feef8b6"
        ],
        [
            "apply Zplus_lt_compat_r; auto.",
            "VernacExtend",
            "c2c5a927bb886cba3cac595f7823bb1571e3c4cb"
        ],
        [
            "apply Zlt_succ_pred.",
            "VernacExtend",
            "364bc9d34e39c0df90deb0cd94436e0c67078bc6"
        ],
        [
            "replace (Zsucc 0) with (Z_of_nat 1); [ idtac | simpl in |- *; auto ].",
            "VernacExtend",
            "6de85aff5c5e1a01684af8a5a3596b4170cff559"
        ],
        [
            "rewrite <- (Zpower_nat_O radix); unfold nNormMin in |- *.",
            "VernacExtend",
            "4f97fcb7efec1de59daeccace28d145ca9190660"
        ],
        [
            "apply Zpower_nat_monotone_lt.",
            "VernacExtend",
            "75d7edb1fc8f3548661e70d8223fa08f388aba59"
        ],
        [
            "assumption.",
            "VernacExtend",
            "41f0308313ff87e6ab2782f90d6021ec4b55d932"
        ],
        [
            "now apply lt_pred.",
            "VernacExtend",
            "e830754deef3b712b537e48acc6ea51ed70b9c9c"
        ],
        [
            "apply Zle_Zpred_Zpred.",
            "VernacExtend",
            "a602e5d0c609e47e56aa9bb27a07b8bd8f3dc750"
        ],
        [
            "apply Zle_Zmult_comp_r; auto with zarith.",
            "VernacExtend",
            "6df3ad18f4910f873061ef6fd03b5647e45f11b6"
        ],
        [
            "apply Z.lt_le_incl; apply nNormPos; auto with zarith.",
            "VernacExtend",
            "b93adb6acc83edef7d112974ded7097875e12c87"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Theorem FSucFSucMid : forall p : float, Fnum (FSucc b radix precision p) <> nNormMin radix precision -> Fnum (FSucc b radix precision p) <> (- nNormMin radix precision)%Z -> Fminus radix (FSucc b radix precision (FSucc b radix precision p)) (FSucc b radix precision p) = Fminus radix (FSucc b radix precision p) p :>R.",
            "VernacStartTheoremProof",
            "7f54af6d6aa10b46be48031d71183b693ec5a440"
        ],
        [
            "intros p.",
            "VernacExtend",
            "223e3cb70cff95972873720780e7195aeb57b9fc"
        ],
        [
            "generalize (Z_eq_bool_correct (Fnum p) (- nNormMin radix precision)); case (Z_eq_bool (Fnum p) (- nNormMin radix precision)); intros H'1.",
            "VernacExtend",
            "731e9f50aa4e66694b90248c25a1e2931b1ac6d4"
        ],
        [
            "generalize (Z_eq_bool_correct (Fexp p) (- dExp b)); case (Z_eq_bool (Fexp p) (- dExp b)); intros H'2.",
            "VernacExtend",
            "9e1d5c4acec87d6378c96f74752af16727328b94"
        ],
        [
            "rewrite FSuccDiff2 with (2 := H'1); auto with arith.",
            "VernacExtend",
            "1dc628e7736833ca7f23e1e778d39b5e8051e0e6"
        ],
        [
            "replace p with (Float (Fnum p) (Fexp p)).",
            "VernacExtend",
            "b1a1495576d2d4bdee4e59af73d940f96cb8f29b"
        ],
        [
            "repeat (rewrite H'1; rewrite H'2).",
            "VernacExtend",
            "f14e7e0cc3af812bab7286695bca197bfabac38b"
        ],
        [
            "rewrite FSuccSimpl3; auto with arith.",
            "VernacExtend",
            "932e171640adb276130b3badfbe45f5d7a1beed7"
        ],
        [
            "rewrite FSuccDiff1 with (2 := pGivesBound); auto with arith.",
            "VernacExtend",
            "b1fedc3be1fb5a6ee1245a6b6a7e4c604cfa81f5"
        ],
        [
            "simpl in |- *; auto with zarith.",
            "VernacExtend",
            "61d3cdc6299cf8abf87703c074ca4503f0f27a12"
        ],
        [
            "apply floatEq; auto.",
            "VernacExtend",
            "c847d668791777965ba33ea03f8c58569a27270b"
        ],
        [
            "unfold FtoRradix in |- *; rewrite FSuccDiff3 with (x := p) (3 := pGivesBound); auto with arith.",
            "VernacExtend",
            "acdbad676aebadcd53e9f68fe97f3f793482f355"
        ],
        [
            "rewrite FSuccSimpl2; auto with arith.",
            "VernacExtend",
            "3d038bab3992cc340f1aa1a0350ab7bde3c222bc"
        ],
        [
            "rewrite FSuccDiff1; simpl in |- *; auto with arith.",
            "VernacExtend",
            "dfb39eb288107ddb01c77e8a62dc6b7057ed862b"
        ],
        [
            "apply Zlt_not_eq; auto.",
            "VernacExtend",
            "f0d8da9f3732d5275c5ffb65e9586dc7839ca172"
        ],
        [
            "apply Zlt_Zopp; auto.",
            "VernacExtend",
            "8fbeb9313d1ad507e37f0e89147f88a009dc7138"
        ],
        [
            "apply nNormMimLtvNum; auto.",
            "VernacExtend",
            "abe816f583300163b237784490e4a6ee409dd302"
        ],
        [
            "unfold FtoRradix in |- *; rewrite FSuccDiff1 with (x := p); simpl in |- *; auto with arith.",
            "VernacExtend",
            "6f4aaf37eb86c3e64d1d1e0f530b1d4373669d9d"
        ],
        [
            "generalize (Z_eq_bool_correct (Fnum p) (pPred (vNum b))); case (Z_eq_bool (Fnum p) (pPred (vNum b))); intros H'2.",
            "VernacExtend",
            "96a860fd5b223e07c6e2dea66b31c5a1d3b8f0ac"
        ],
        [
            "rewrite FSuccSimpl1; simpl in |- *; auto with arith.",
            "VernacExtend",
            "3b06ad8f2e3d8b71b3130a4d843267a1d8612a39"
        ],
        [
            "intros H'; case H'; auto.",
            "VernacExtend",
            "ab91036e51f7c3008a0c371720a2ca0e0735ece9"
        ],
        [
            "rewrite FSuccSimpl4; simpl in |- *; auto with arith.",
            "VernacExtend",
            "a20096989faaf982496d8aeed2c30d2ce18af12e"
        ],
        [
            "intros H' H'0.",
            "VernacExtend",
            "6376855f6f9f69f4159c0718a468e6033843b617"
        ],
        [
            "rewrite FSuccDiff1; simpl in |- *; auto with arith.",
            "VernacExtend",
            "dfb39eb288107ddb01c77e8a62dc6b7057ed862b"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Theorem FNSuccFNSuccMid : forall p : float, Fbounded b p -> Fnum (FNSucc b radix precision p) <> nNormMin radix precision -> Fnum (FNSucc b radix precision p) <> (- nNormMin radix precision)%Z -> Fminus radix (FNSucc b radix precision (FNSucc b radix precision p)) (FNSucc b radix precision p) = Fminus radix (FNSucc b radix precision p) p :>R.",
            "VernacStartTheoremProof",
            "b78776bc94c9a83bdf9f45efe6d04ed368741014"
        ],
        [
            "intros p Fb; unfold FNSucc in |- *.",
            "VernacExtend",
            "914af5cd0f039f32f9864f90b2cca7b5ed91b318"
        ],
        [
            "intros H' H'0.",
            "VernacExtend",
            "6376855f6f9f69f4159c0718a468e6033843b617"
        ],
        [
            "rewrite FcanonicFnormalizeEq with (p := FSucc b radix precision (Fnormalize radix b precision p)); auto with float arith.",
            "VernacExtend",
            "d46a8b2e620569a972932937952b5717d22b5039"
        ],
        [
            "rewrite FSucFSucMid; auto.",
            "VernacExtend",
            "1deb24af6f667c988978dbe17af2c0ebabae4456"
        ],
        [
            "unfold FtoRradix in |- *; repeat rewrite Fminus_correct; auto with float arith.",
            "VernacExtend",
            "f1b3bb6149640fcf3ccf9bc5cd4ee873027de9dd"
        ],
        [
            "rewrite FnormalizeCorrect; auto.",
            "VernacExtend",
            "6ee35e1e3f3de05c34741ed20c27ff8ffe5da5da"
        ],
        [
            "apply Zlt_trans with 1%Z; auto with zarith.",
            "VernacExtend",
            "31fe79dd229b0a596cccb8b23d752848c7e28aef"
        ],
        [
            "apply Zlt_trans with 1%Z; auto with zarith.",
            "VernacExtend",
            "31fe79dd229b0a596cccb8b23d752848c7e28aef"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "End suc1.",
            "VernacEndSegment",
            "747cdfe165d1efb0e9a7afc21cd2427f37597a6b"
        ],
        [
            "Hint Resolve nNormMimLtvNum: float.",
            "VernacHints",
            "09d5f64df186b4da3e9356879d4a63e8e7865c25"
        ]
    ],
    "proofs": [
        {
            "name": "FSuccSimpl1",
            "line_nb": 14,
            "steps": [
                {
                    "command": [
                        "intros x H'; unfold FSucc in |- *.",
                        "VernacExtend",
                        "ea9adb614f85ba183d360df5de8924555d701cb3"
                    ]
                },
                {
                    "command": [
                        "generalize (Z_eq_bool_correct (Fnum x) (pPred (vNum b))); case (Z_eq_bool (Fnum x) (pPred (vNum b))); auto.",
                        "VernacExtend",
                        "0e22c920407495ffc0108e5c5487d09e6823da7e"
                    ]
                },
                {
                    "command": [
                        "intros H'0; Contradict H'0; auto.",
                        "VernacExtend",
                        "309e0c652fca7ca41fc269e7e4c3bac2313ada79"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "FSuccSimpl2",
            "line_nb": 19,
            "steps": [
                {
                    "command": [
                        "intros x H' H'0; unfold FSucc in |- *.",
                        "VernacExtend",
                        "56d6d415b9d5f0ff648c157f05c6b83a1c89ca07"
                    ]
                },
                {
                    "command": [
                        "generalize (Z_eq_bool_correct (Fnum x) (pPred (vNum b))); case (Z_eq_bool (Fnum x) (pPred (vNum b))); auto.",
                        "VernacExtend",
                        "0e22c920407495ffc0108e5c5487d09e6823da7e"
                    ]
                },
                {
                    "command": [
                        "intros H'1; absurd (0%nat <= pPred (vNum b))%Z; auto with zarith arith.",
                        "VernacExtend",
                        "f7617687f77a8515c770e2e3b73d6b5c4a21a732"
                    ]
                },
                {
                    "command": [
                        "rewrite <- H'1; rewrite H'.",
                        "VernacExtend",
                        "8157238ed70ac73e0f0114e8592200a4a3ad636c"
                    ]
                },
                {
                    "command": [
                        "unfold nNormMin in |- *; simpl in |- *; auto with zarith.",
                        "VernacExtend",
                        "f1a2b1ca579da6e38101934f0863709239d71326"
                    ]
                },
                {
                    "command": [
                        "replace 0%Z with (- (0))%Z; auto with zarith.",
                        "VernacExtend",
                        "162b1bf05d51d636bead4defe908a2fbb9b84504"
                    ]
                },
                {
                    "command": [
                        "unfold pPred in |- *; apply Zle_Zpred; auto with zarith.",
                        "VernacExtend",
                        "4a67c01dc3b485eeff0c4d6012218b209c6aca4a"
                    ]
                },
                {
                    "command": [
                        "intros H'1; generalize (Z_eq_bool_correct (Fnum x) (- nNormMin radix precision)); case (Z_eq_bool (Fnum x) (- nNormMin radix precision)).",
                        "VernacExtend",
                        "88ff610fa9c1e27a7a9c7e7ff1ae0fcef40d0d0f"
                    ]
                },
                {
                    "command": [
                        "intros H'2; generalize (Z_eq_bool_correct (Fexp x) (- dExp b)); case (Z_eq_bool (Fexp x) (- dExp b)); auto.",
                        "VernacExtend",
                        "1a95a833b963d3a109b5a145d8460c93b359f404"
                    ]
                },
                {
                    "command": [
                        "intros H'3; Contradict H'0; auto.",
                        "VernacExtend",
                        "6cce241fa4bfbc07b2ae179350c8cf2aa973116a"
                    ]
                },
                {
                    "command": [
                        "intros H'2; Contradict H'2; auto.",
                        "VernacExtend",
                        "1aa71754603bb31667514e8c1dbfa39a9f2ebb70"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "FSuccSimpl3",
            "line_nb": 32,
            "steps": [
                {
                    "command": [
                        "unfold FSucc in |- *; simpl in |- *.",
                        "VernacExtend",
                        "ffb6e48333a31c8ac4ff339e9b2664df58a76fd2"
                    ]
                },
                {
                    "command": [
                        "generalize (Z_eq_bool_correct (- nNormMin radix precision) (pPred (vNum b))); case (Z_eq_bool (- nNormMin radix precision) (pPred (vNum b))); auto.",
                        "VernacExtend",
                        "321006d131690a47c10d6d72ff3a3f22491febb6"
                    ]
                },
                {
                    "command": [
                        "intros H'1; absurd (0%nat <= pPred (vNum b))%Z; auto with zarith arith.",
                        "VernacExtend",
                        "f7617687f77a8515c770e2e3b73d6b5c4a21a732"
                    ]
                },
                {
                    "command": [
                        "rewrite <- H'1.",
                        "VernacExtend",
                        "72f25f27aa9f4989786041bbf0f442a67cdb1785"
                    ]
                },
                {
                    "command": [
                        "unfold nNormMin in |- *; simpl in |- *; auto with zarith.",
                        "VernacExtend",
                        "f1a2b1ca579da6e38101934f0863709239d71326"
                    ]
                },
                {
                    "command": [
                        "replace 0%Z with (- (0))%Z; auto with zarith.",
                        "VernacExtend",
                        "162b1bf05d51d636bead4defe908a2fbb9b84504"
                    ]
                },
                {
                    "command": [
                        "unfold pPred in |- *; apply Zle_Zpred; auto with zarith.",
                        "VernacExtend",
                        "4a67c01dc3b485eeff0c4d6012218b209c6aca4a"
                    ]
                },
                {
                    "command": [
                        "intros H'; generalize (Z_eq_bool_correct (- nNormMin radix precision) (- nNormMin radix precision)); case (Z_eq_bool (- nNormMin radix precision) (- nNormMin radix precision)).",
                        "VernacExtend",
                        "0fecf728b3c6fb217a2819fc2523ca6653a71785"
                    ]
                },
                {
                    "command": [
                        "intros H'0; generalize (Z_eq_bool_correct (- dExp b) (- dExp b)); case (Z_eq_bool (- dExp b) (- dExp b)); auto.",
                        "VernacExtend",
                        "846a265bed88b4fbb4e8d22e51b081d720035268"
                    ]
                },
                {
                    "command": [
                        "intros H'1; Contradict H'1; auto.",
                        "VernacExtend",
                        "8db85f3016bcb692223b807804acc9e52d044004"
                    ]
                },
                {
                    "command": [
                        "intros H'1; Contradict H'1; auto.",
                        "VernacExtend",
                        "8db85f3016bcb692223b807804acc9e52d044004"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "FSuccSimpl4",
            "line_nb": 45,
            "steps": [
                {
                    "command": [
                        "intros x H' H'0; unfold FSucc in |- *.",
                        "VernacExtend",
                        "56d6d415b9d5f0ff648c157f05c6b83a1c89ca07"
                    ]
                },
                {
                    "command": [
                        "generalize (Z_eq_bool_correct (Fnum x) (pPred (vNum b))); case (Z_eq_bool (Fnum x) (pPred (vNum b))); auto.",
                        "VernacExtend",
                        "0e22c920407495ffc0108e5c5487d09e6823da7e"
                    ]
                },
                {
                    "command": [
                        "intros H'1; Contradict H'; auto.",
                        "VernacExtend",
                        "df583a974a49b9d26ca786a8b3785e2dd7a4b3d0"
                    ]
                },
                {
                    "command": [
                        "intros H'1; generalize (Z_eq_bool_correct (Fnum x) (- nNormMin radix precision)); case (Z_eq_bool (Fnum x) (- nNormMin radix precision)); auto.",
                        "VernacExtend",
                        "bb8bb0ea2adc90dc7be4cebcc2a1833de01cc3db"
                    ]
                },
                {
                    "command": [
                        "intros H'2; Contradict H'0; auto.",
                        "VernacExtend",
                        "5852154b7666463c5197fef05024fa0f18f3fa8a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "FSuccDiff1",
            "line_nb": 52,
            "steps": [
                {
                    "command": [
                        "intros x H'.",
                        "VernacExtend",
                        "1864e43355295bd98e7920f89fb20cbad05f10d7"
                    ]
                },
                {
                    "command": [
                        "generalize (Z_eq_bool_correct (Fnum x) (pPred (vNum b))); case (Z_eq_bool (Fnum x) (pPred (vNum b))); intros H'1.",
                        "VernacExtend",
                        "3f7cdd71458cc916cf038e5c4f8ff31cc2e5d672"
                    ]
                },
                {
                    "command": [
                        "rewrite FSuccSimpl1; auto.",
                        "VernacExtend",
                        "44ac04106f049e90b568a0809ee9f7229a242d83"
                    ]
                },
                {
                    "command": [
                        "unfold FtoRradix, FtoR, Fminus, Fopp, Fplus in |- *; simpl in |- *; auto.",
                        "VernacExtend",
                        "e1a1952357025203d7f1e50dee207b1c7d0e8e76"
                    ]
                },
                {
                    "command": [
                        "repeat rewrite Zmin_le2; auto with zarith.",
                        "VernacExtend",
                        "9fbe76bd3c3099f6441a9073bdf3d2440738f0a8"
                    ]
                },
                {
                    "command": [
                        "rewrite <- Zminus_succ_l; repeat rewrite <- Zminus_diag_reverse.",
                        "VernacExtend",
                        "82faa327247ebd106c055e11f2be69f31aa51c76"
                    ]
                },
                {
                    "command": [
                        "rewrite absolu_Zs; auto with zarith; simpl in |- *.",
                        "VernacExtend",
                        "3ff6be78771f082196e6f31edf7d39a72c024ebc"
                    ]
                },
                {
                    "command": [
                        "rewrite H'1; unfold pPred in |- *; rewrite pGivesBound; unfold nNormMin in |- *.",
                        "VernacExtend",
                        "f586ed43cfc6cf8227d65d24060c8572d5ae7034"
                    ]
                },
                {
                    "command": [
                        "replace (Zpower_nat radix (pred precision) * (radix * 1))%Z with (Zpower_nat radix precision).",
                        "VernacExtend",
                        "c2a14c02506260b8c7b5e48abba24bff8dea229c"
                    ]
                },
                {
                    "command": [
                        "f_equal.",
                        "VernacExtend",
                        "dfce814d1efcef60f8330516ad88155a3a5ec317"
                    ]
                },
                {
                    "command": [
                        "unfold Zpred.",
                        "VernacExtend",
                        "da332047e598ac8935604b88f7d4c359e70c4c60"
                    ]
                },
                {
                    "command": [
                        "rewrite Z.opp_add_distr.",
                        "VernacExtend",
                        "a50b3a64716ba6ce04fc27a04864e3cc89e69412"
                    ]
                },
                {
                    "command": [
                        "rewrite Z.mul_1_r.",
                        "VernacExtend",
                        "80f92f5dcc09db388a2087f0ef3ff1d16ecdfdff"
                    ]
                },
                {
                    "command": [
                        "rewrite Z.add_assoc.",
                        "VernacExtend",
                        "29e409a5136d36d9bdb955a7c32d658d7720aea4"
                    ]
                },
                {
                    "command": [
                        "now rewrite Z.add_opp_diag_r.",
                        "VernacExtend",
                        "5059410b86c21ee45ef4dac6a0b26083b2a159ae"
                    ]
                },
                {
                    "command": [
                        "rewrite Z.mul_1_r.",
                        "VernacExtend",
                        "80f92f5dcc09db388a2087f0ef3ff1d16ecdfdff"
                    ]
                },
                {
                    "command": [
                        "pattern precision at 1 in |- *; replace precision with (pred precision + 1).",
                        "VernacExtend",
                        "b4112202e3be8002e7eec984e7280d349c32ce0b"
                    ]
                },
                {
                    "command": [
                        "rewrite Zpower_nat_is_exp; rewrite Zpower_nat_1; auto.",
                        "VernacExtend",
                        "7c8b45c9dabbf2675beabad0204d78a052418555"
                    ]
                },
                {
                    "command": [
                        "generalize precisionNotZero; case precision; simpl in |- *; auto with zarith arith.",
                        "VernacExtend",
                        "e60d343fc6ab059f90c6150dcd2529101d85853b"
                    ]
                },
                {
                    "command": [
                        "rewrite FSuccSimpl4; auto.",
                        "VernacExtend",
                        "2d47fc6c82e2413444df3c5559a82c7fc117184e"
                    ]
                },
                {
                    "command": [
                        "unfold FtoRradix, FtoR, Fminus, Fopp, Fplus in |- *; simpl in |- *; auto.",
                        "VernacExtend",
                        "e1a1952357025203d7f1e50dee207b1c7d0e8e76"
                    ]
                },
                {
                    "command": [
                        "repeat rewrite Zmin_n_n; repeat rewrite <- Zminus_diag_reverse; simpl in |- *.",
                        "VernacExtend",
                        "740626eb107e342804193702ff082a9e1f8996c4"
                    ]
                },
                {
                    "command": [
                        "repeat rewrite Zmult_1_r.",
                        "VernacExtend",
                        "b5d078029e55672d924f0594525d5aa4dc4c82b3"
                    ]
                },
                {
                    "command": [
                        "replace (Zsucc (Fnum x) + - Fnum x)%Z with (Z_of_nat 1).",
                        "VernacExtend",
                        "d0c9c1032b63512fbb287a66101125ad10193256"
                    ]
                },
                {
                    "command": [
                        "simpl in |- *; auto.",
                        "VernacExtend",
                        "9b631374b1d3067f703fd99c5dc6e1e5c8405957"
                    ]
                },
                {
                    "command": [
                        "simpl in |- *; unfold Zsucc in |- *; ring.",
                        "VernacExtend",
                        "38bb1269c206c0d5f6b9a684064d59bd02409783"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "FSuccDiff2",
            "line_nb": 80,
            "steps": [
                {
                    "command": [
                        "intros x H' H'0; replace x with (Float (Fnum x) (Fexp x)).",
                        "VernacExtend",
                        "74198bf6cfea346d949d2be5af7970776cd428d5"
                    ]
                },
                {
                    "command": [
                        "rewrite H'; rewrite H'0; rewrite FSuccSimpl3; auto.",
                        "VernacExtend",
                        "75574e13126f3b5f9c064cc505c1cc0556b3f5dd"
                    ]
                },
                {
                    "command": [
                        "unfold FtoRradix, FtoR, Fminus, Fopp, Fplus in |- *; simpl in |- *; auto.",
                        "VernacExtend",
                        "e1a1952357025203d7f1e50dee207b1c7d0e8e76"
                    ]
                },
                {
                    "command": [
                        "repeat rewrite Zmin_n_n; repeat rewrite <- Zminus_diag_reverse; auto with zarith.",
                        "VernacExtend",
                        "0f0591054163e41e4d8483aa413d4066a4f4cac2"
                    ]
                },
                {
                    "command": [
                        "simpl in |- *; repeat rewrite Zmult_1_r.",
                        "VernacExtend",
                        "f8a832149782bcea9ddb18da3daf5119efff821b"
                    ]
                },
                {
                    "command": [
                        "rewrite Zplus_succ_l; rewrite Zplus_opp_r; simpl in |- *; auto.",
                        "VernacExtend",
                        "3f1113fd467d1a7766d2cc13ca5d3a2c171a8613"
                    ]
                },
                {
                    "command": [
                        "case x; simpl in |- *; auto.",
                        "VernacExtend",
                        "78d0bd53c1fe23bd9447c87ca89fb83e9e828572"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "FSuccDiff3",
            "line_nb": 89,
            "steps": [
                {
                    "command": [
                        "intros x H' H'1; rewrite FSuccSimpl2; auto.",
                        "VernacExtend",
                        "ccceb029a1e73e8a44614b206a3b27c40a1dfe22"
                    ]
                },
                {
                    "command": [
                        "unfold FtoRradix, FtoR, Fminus, Fopp, Fplus in |- *; simpl in |- *; auto.",
                        "VernacExtend",
                        "e1a1952357025203d7f1e50dee207b1c7d0e8e76"
                    ]
                },
                {
                    "command": [
                        "repeat rewrite Zmin_le1; auto with zarith.",
                        "VernacExtend",
                        "4b7e9cda2efa941e633b33c27cc0e8fd9e35b0e2"
                    ]
                },
                {
                    "command": [
                        "rewrite <- Zminus_diag_reverse; rewrite <- Zminus_n_predm; repeat rewrite <- Zminus_diag_reverse.",
                        "VernacExtend",
                        "ce919be285cb5f9684b62d542cb87d86147325cb"
                    ]
                },
                {
                    "command": [
                        "rewrite absolu_Zs; auto with zarith; simpl in |- *.",
                        "VernacExtend",
                        "3ff6be78771f082196e6f31edf7d39a72c024ebc"
                    ]
                },
                {
                    "command": [
                        "rewrite H'; unfold pPred in |- *; rewrite pGivesBound; unfold nNormMin in |- *.",
                        "VernacExtend",
                        "f21c30b7c5531d180c599298ae1d3f6231829738"
                    ]
                },
                {
                    "command": [
                        "rewrite Zopp_involutive; repeat rewrite Zmult_1_r.",
                        "VernacExtend",
                        "b5d26f72929718032e6add49be328b069422898e"
                    ]
                },
                {
                    "command": [
                        "replace (Zpower_nat radix (pred precision) * radix)%Z with (Zpower_nat radix precision).",
                        "VernacExtend",
                        "20f78cb2600bad14b84657f3e581249e2bcb8619"
                    ]
                },
                {
                    "command": [
                        "unfold Zpred in |- *; simpl in |- *; repeat rewrite plus_IZR || rewrite Ropp_Ropp_IZR.",
                        "VernacExtend",
                        "c2f283afb4ca73112bee4a953c052311b2507180"
                    ]
                },
                {
                    "command": [
                        "f_equal.",
                        "VernacExtend",
                        "dfce814d1efcef60f8330516ad88155a3a5ec317"
                    ]
                },
                {
                    "command": [
                        "simpl in |- *; ring.",
                        "VernacExtend",
                        "dbea56eab9f20d9ab08eaf0f2769e833b9098d51"
                    ]
                },
                {
                    "command": [
                        "pattern precision at 1 in |- *; replace precision with (pred precision + 1).",
                        "VernacExtend",
                        "b4112202e3be8002e7eec984e7280d349c32ce0b"
                    ]
                },
                {
                    "command": [
                        "rewrite Zpower_nat_is_exp; rewrite Zpower_nat_1; auto.",
                        "VernacExtend",
                        "7c8b45c9dabbf2675beabad0204d78a052418555"
                    ]
                },
                {
                    "command": [
                        "generalize precisionNotZero; case precision; simpl in |- *; auto with zarith arith.",
                        "VernacExtend",
                        "e60d343fc6ab059f90c6150dcd2529101d85853b"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "ZltNormMinVnum",
            "line_nb": 105,
            "steps": [
                {
                    "command": [
                        "unfold nNormMin in |- *; rewrite pGivesBound; auto with zarith.",
                        "VernacExtend",
                        "f30e5e3f8a1f8d9060589ee1d52ca1e98f67bc5c"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "FSuccSubnormNearNormMin",
            "line_nb": 174,
            "steps": [
                {
                    "command": [
                        "intros a H' H'0.",
                        "VernacExtend",
                        "98de3b2a989aaa54a4384d47c36d85838de74526"
                    ]
                },
                {
                    "command": [
                        "cut (Fbounded b a); [ intros Fb0 | apply FsubnormalFbounded with (1 := H') ].",
                        "VernacExtend",
                        "76075df7a53c6ecc60d0e0bf341a104eeebd9713"
                    ]
                },
                {
                    "command": [
                        "unfold FSucc in |- *.",
                        "VernacExtend",
                        "b711ae2eff6e87c6a46388f1beebc42db647cd8b"
                    ]
                },
                {
                    "command": [
                        "generalize (Z_eq_bool_correct (Fnum a) (pPred (vNum b))); case (Z_eq_bool (Fnum a) (pPred (vNum b))); auto.",
                        "VernacExtend",
                        "937d14f905edfb31305427cae335d4bcba0cf6cf"
                    ]
                },
                {
                    "command": [
                        "intros H'1; absurd (nNormMin radix precision < Zpos (vNum b))%Z; auto with float.",
                        "VernacExtend",
                        "fbefa71fab82ec53cfc224a7dbfe74d00944c556"
                    ]
                },
                {
                    "command": [
                        "apply Zle_not_lt.",
                        "VernacExtend",
                        "a635904a634172283c98f3792d1f8261c5710c4f"
                    ]
                },
                {
                    "command": [
                        "apply Zle_n_Zpred; unfold pPred in H'1; rewrite <- H'1; rewrite H'0; auto with zarith.",
                        "VernacExtend",
                        "29b7ee5bc5628356e936a86120987788c75583b7"
                    ]
                },
                {
                    "command": [
                        "intros H'3; generalize (Z_eq_bool_correct (Fnum a) (- nNormMin radix precision)); case (Z_eq_bool (Fnum a) (- nNormMin radix precision)).",
                        "VernacExtend",
                        "0ec8c4c60082dc3ac7eedd174d5e89d341a998af"
                    ]
                },
                {
                    "command": [
                        "intros H'1; absurd (- nNormMin radix precision < Zpred (nNormMin radix precision))%Z.",
                        "VernacExtend",
                        "afc0f99e1ca3a00a2eab1aa1a830328670cc60d4"
                    ]
                },
                {
                    "command": [
                        "rewrite <- H'1; rewrite <- H'0; auto with zarith.",
                        "VernacExtend",
                        "65a80544e856556ca7febfefe0e142f00fc93691"
                    ]
                },
                {
                    "command": [
                        "unfold nNormMin in |- *; apply Zlt_le_trans with (m := (- (0))%Z); auto with zarith.",
                        "VernacExtend",
                        "cea08633144d761e70ff015e03f434b4265c2cf5"
                    ]
                },
                {
                    "command": [
                        "intros H'4; repeat split; simpl in |- *; auto with float zarith arith.",
                        "VernacExtend",
                        "3f6a6a52ab692ecc527fb46c18f299c187be16a9"
                    ]
                },
                {
                    "command": [
                        "rewrite H'0.",
                        "VernacExtend",
                        "155943e97f3d58c39d0b7dc8dbaf42688f94c62f"
                    ]
                },
                {
                    "command": [
                        "rewrite <- Zsucc_pred.",
                        "VernacExtend",
                        "794ce07d219d821be1766675cfbd31b11cd408b8"
                    ]
                },
                {
                    "command": [
                        "rewrite Zabs_eq; auto with float zarith.",
                        "VernacExtend",
                        "5afb6c5f6fd8186da5220fd2ffe28bc8b2689760"
                    ]
                },
                {
                    "command": [
                        "unfold nNormMin in |- *; auto with zarith.",
                        "VernacExtend",
                        "13c94bc3a7bcdd7b9290d9f851cfb48eb65760ca"
                    ]
                },
                {
                    "command": [
                        "rewrite H'0.",
                        "VernacExtend",
                        "155943e97f3d58c39d0b7dc8dbaf42688f94c62f"
                    ]
                },
                {
                    "command": [
                        "rewrite <- Zsucc_pred.",
                        "VernacExtend",
                        "794ce07d219d821be1766675cfbd31b11cd408b8"
                    ]
                },
                {
                    "command": [
                        "pattern radix at 1 in |- *; rewrite <- (Zpower_nat_1 radix); unfold nNormMin in |- *; rewrite <- Zpower_nat_is_exp.",
                        "VernacExtend",
                        "6e2578bb152c9c40dab4db8f3f81a675ad0a1ebc"
                    ]
                },
                {
                    "command": [
                        "rewrite pGivesBound.",
                        "VernacExtend",
                        "a0663579a8c1e026e4139f9de2213b856a6f5f6f"
                    ]
                },
                {
                    "command": [
                        "generalize precisionNotZero; case precision; simpl in |- *; auto with zarith.",
                        "VernacExtend",
                        "5c40ee8140a5b1186ed592ab31b6f2ee5c2f65b5"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "FBoundedSuc",
            "line_nb": 197,
            "steps": [
                {
                    "command": [
                        "intros f H'; unfold FSucc in |- *.",
                        "VernacExtend",
                        "0283619b16bbba9f195ad5522360dada409652bf"
                    ]
                },
                {
                    "command": [
                        "generalize (Z_eq_bool_correct (Fnum f) (pPred (vNum b))); case (Z_eq_bool (Fnum f) (pPred (vNum b))); intros H'1.",
                        "VernacExtend",
                        "40258829c26d6ff9370039c0827addb2b65b7dcd"
                    ]
                },
                {
                    "command": [
                        "repeat split; simpl in |- *; auto with zarith arith.",
                        "VernacExtend",
                        "96623a6157354cb059c459d0980c36d7276b307c"
                    ]
                },
                {
                    "command": [
                        "rewrite Zabs_eq; auto with float zarith.",
                        "VernacExtend",
                        "5afb6c5f6fd8186da5220fd2ffe28bc8b2689760"
                    ]
                },
                {
                    "command": [
                        "unfold nNormMin in |- *; auto with zarith.",
                        "VernacExtend",
                        "13c94bc3a7bcdd7b9290d9f851cfb48eb65760ca"
                    ]
                },
                {
                    "command": [
                        "apply Zle_trans with (Fexp f); auto with float zarith.",
                        "VernacExtend",
                        "f098764518e9e83baf11dacef87d9767f971f55f"
                    ]
                },
                {
                    "command": [
                        "generalize (Z_eq_bool_correct (Fnum f) (- nNormMin radix precision)); case (Z_eq_bool (Fnum f) (- nNormMin radix precision)); intros H'2.",
                        "VernacExtend",
                        "09cb2f2a5a088e83745cdf2208938ad83291bd5e"
                    ]
                },
                {
                    "command": [
                        "generalize (Z_eq_bool_correct (Fexp f) (- dExp b)); case (Z_eq_bool (Fexp f) (- dExp b)); intros H'3.",
                        "VernacExtend",
                        "e43c6a2d6a4fe2d8e458f4b76664b99fa613e000"
                    ]
                },
                {
                    "command": [
                        "repeat split; simpl in |- *; auto with float zarith arith.",
                        "VernacExtend",
                        "1fdc02fb9c99d8d6cc779a9df2778e0f848de651"
                    ]
                },
                {
                    "command": [
                        "apply Zlt_Zabs_Zpred; auto with float zarith arith.",
                        "VernacExtend",
                        "e88dca4e1957f8db93a08e3a91e850293e87b404"
                    ]
                },
                {
                    "command": [
                        "repeat split; simpl in |- *; auto with float zarith arith.",
                        "VernacExtend",
                        "1fdc02fb9c99d8d6cc779a9df2778e0f848de651"
                    ]
                },
                {
                    "command": [
                        "rewrite Zabs_Zopp.",
                        "VernacExtend",
                        "0b6e22e959fb2abddb6c6471984bd9b2c0a2b861"
                    ]
                },
                {
                    "command": [
                        "rewrite Zabs_eq; unfold pPred in |- *; auto with zarith.",
                        "VernacExtend",
                        "879233ca5351b2edc81f4b221a302c6636a51b1f"
                    ]
                },
                {
                    "command": [
                        "case (Zle_next (- dExp b) (Fexp f)); auto with float zarith arith.",
                        "VernacExtend",
                        "a1c3eacbc4daf6d7a39748857b156d4a4b69d376"
                    ]
                },
                {
                    "command": [
                        "repeat split; simpl in |- *; auto with float zarith arith.",
                        "VernacExtend",
                        "1fdc02fb9c99d8d6cc779a9df2778e0f848de651"
                    ]
                },
                {
                    "command": [
                        "apply Zlt_Zabs_Zpred; auto with float zarith arith.",
                        "VernacExtend",
                        "e88dca4e1957f8db93a08e3a91e850293e87b404"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "FSuccSubnormal",
            "line_nb": 215,
            "steps": [
                {
                    "command": [
                        "intros a H'.",
                        "VernacExtend",
                        "2b7514d481b1c49fc3070e8c7c3f241c036a4bba"
                    ]
                },
                {
                    "command": [
                        "generalize (Z_eq_bool_correct (Fnum a) (Zpred (nNormMin radix precision))); case (Z_eq_bool (Fnum a) (Zpred (nNormMin radix precision))); intros H'1.",
                        "VernacExtend",
                        "2dbce05e314148e6b3dee2749a891c9820c63372"
                    ]
                },
                {
                    "command": [
                        "left; apply FSuccSubnormNearNormMin; auto.",
                        "VernacExtend",
                        "98dcb89af7b6b836f1e2f80bd0060e6c16ac338c"
                    ]
                },
                {
                    "command": [
                        "right; apply FSuccSubnormNotNearNormMin; auto.",
                        "VernacExtend",
                        "1f0312188a465f675135b508da0c34705e2e1164"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "FSuccPosNotMax",
            "line_nb": 221,
            "steps": [
                {
                    "command": [
                        "intros a H' H'0; case H'0; intros H'2.",
                        "VernacExtend",
                        "e8f050a16ec0d5963b63c8c26af1e46b4fe1ce27"
                    ]
                },
                {
                    "command": [
                        "left; apply FSuccNormPos; auto.",
                        "VernacExtend",
                        "70bf501d5f4fbdf8aadc23ed89444f2a5f336ee7"
                    ]
                },
                {
                    "command": [
                        "apply FSuccSubnormal; auto.",
                        "VernacExtend",
                        "a5137ede3e4803bae86c6ba877482d63bff5be65"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "FSuccNegCanonic",
            "line_nb": 296,
            "steps": [
                {
                    "command": [
                        "intros a H' H'0; case H'0; intros H'1.",
                        "VernacExtend",
                        "09d30d4ff7a096c3ebad3e246aa6b57325bebbe6"
                    ]
                },
                {
                    "command": [
                        "case (floatDec a (Float (- nNormMin radix precision) (- dExp b))); intros H'2.",
                        "VernacExtend",
                        "0dac9f411611ddf752986cba238b6ba8c5367642"
                    ]
                },
                {
                    "command": [
                        "rewrite H'2; right; apply FSuccNormNegNormMin; auto.",
                        "VernacExtend",
                        "e320e354b6372e37e85cac7a205a3358aa7470c1"
                    ]
                },
                {
                    "command": [
                        "left; apply FSuccNormNegNotNormMin; auto.",
                        "VernacExtend",
                        "2846f8323e5e66368ee644f089e091fcdc34eca1"
                    ]
                },
                {
                    "command": [
                        "apply FSuccSubnormal; auto.",
                        "VernacExtend",
                        "a5137ede3e4803bae86c6ba877482d63bff5be65"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "FSuccCanonic",
            "line_nb": 303,
            "steps": [
                {
                    "command": [
                        "intros a H'.",
                        "VernacExtend",
                        "2b7514d481b1c49fc3070e8c7c3f241c036a4bba"
                    ]
                },
                {
                    "command": [
                        "case (Rle_or_lt 0 a); intros H'3.",
                        "VernacExtend",
                        "7863efca9d80d0973c9986c081189f38fb63ffbc"
                    ]
                },
                {
                    "command": [
                        "apply FSuccPosNotMax; auto.",
                        "VernacExtend",
                        "aa0c57d090e13af632db6e670f0614456c4afedf"
                    ]
                },
                {
                    "command": [
                        "apply FSuccNegCanonic; auto with real.",
                        "VernacExtend",
                        "9d3d738f53b4819f6e97a2c88b4a0f134c072fdd"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "FSuccLt",
            "line_nb": 309,
            "steps": [
                {
                    "command": [
                        "intros a; unfold FSucc in |- *.",
                        "VernacExtend",
                        "bce791a5532491c24668475b47a2401f9ebf6fc8"
                    ]
                },
                {
                    "command": [
                        "generalize (Z_eq_bool_correct (Fnum a) (pPred (vNum b))); case (Z_eq_bool (Fnum a) (pPred (vNum b))); auto.",
                        "VernacExtend",
                        "937d14f905edfb31305427cae335d4bcba0cf6cf"
                    ]
                },
                {
                    "command": [
                        "intros H'; unfold FtoRradix, FtoR in |- *; simpl in |- *; rewrite H'.",
                        "VernacExtend",
                        "3e9a9bb38353e5ca95f15c907b264d7f267badcb"
                    ]
                },
                {
                    "command": [
                        "unfold pPred in |- *; rewrite (PosNormMin radix) with (precision := precision); auto with zarith; unfold nNormMin in |- *.",
                        "VernacExtend",
                        "adcbeef5b04bbd97060da7fa61f8039349901962"
                    ]
                },
                {
                    "command": [
                        "rewrite powerRZ_Zs; auto with real zarith.",
                        "VernacExtend",
                        "1931a3978b6974020abfa1402ab4426f76878eb8"
                    ]
                },
                {
                    "command": [
                        "repeat rewrite <- Rmult_assoc.",
                        "VernacExtend",
                        "645aebe2c3685a4f868a05a2372130cedecea85e"
                    ]
                },
                {
                    "command": [
                        "apply Rlt_monotony_exp; auto with zarith.",
                        "VernacExtend",
                        "ef7730f5bfe1f44f887a3bbfc8cee53987475e69"
                    ]
                },
                {
                    "command": [
                        "rewrite Zmult_comm.",
                        "VernacExtend",
                        "2c1282bf165ec7c97fac66d6d60ae4f6ba65e66e"
                    ]
                },
                {
                    "command": [
                        "rewrite <- Rmult_IZR.",
                        "VernacExtend",
                        "77ff9e5d0697bdc5f92b38cf0c531b2d80b04bc3"
                    ]
                },
                {
                    "command": [
                        "apply Rlt_IZR; auto with zarith.",
                        "VernacExtend",
                        "03f0d8ad561f13fe59d5a8656bd3163bb800af89"
                    ]
                },
                {
                    "command": [
                        "intros H'; generalize (Z_eq_bool_correct (Fnum a) (- nNormMin radix precision)); case (Z_eq_bool (Fnum a) (- nNormMin radix precision)).",
                        "VernacExtend",
                        "c878ecf54d89745f4f974c9a0fedd1e0c9dbeacd"
                    ]
                },
                {
                    "command": [
                        "intros H'0; generalize (Z_eq_bool_correct (Fexp a) (- dExp b)); case (Z_eq_bool (Fexp a) (- dExp b)).",
                        "VernacExtend",
                        "ab4d0e60499f6c91f04d7f0252930e3fb3a1f443"
                    ]
                },
                {
                    "command": [
                        "intros H'1; unfold FtoRradix, FtoR in |- *; simpl in |- *.",
                        "VernacExtend",
                        "24eafdc131f19df7103d8013b7a115f9e97633ec"
                    ]
                },
                {
                    "command": [
                        "apply Rlt_monotony_exp; auto with real zarith.",
                        "VernacExtend",
                        "d5ce9ccf4e34ba2f988668036022627ea9a20053"
                    ]
                },
                {
                    "command": [
                        "intros H'1; unfold FtoRradix, FtoR in |- *; simpl in |- *; rewrite H'0.",
                        "VernacExtend",
                        "22c29707bf00142b0f523a9bacaa955ac0ab6ee6"
                    ]
                },
                {
                    "command": [
                        "pattern (Fexp a) at 1 in |- *; replace (Fexp a) with (Zsucc (Zpred (Fexp a))).",
                        "VernacExtend",
                        "e9ec0b66fbaf4f21f09d37a3774708340aa109e5"
                    ]
                },
                {
                    "command": [
                        "rewrite powerRZ_Zs; auto with real zarith.",
                        "VernacExtend",
                        "1931a3978b6974020abfa1402ab4426f76878eb8"
                    ]
                },
                {
                    "command": [
                        "repeat rewrite <- Rmult_assoc.",
                        "VernacExtend",
                        "645aebe2c3685a4f868a05a2372130cedecea85e"
                    ]
                },
                {
                    "command": [
                        "apply Rlt_monotony_exp; auto with real zarith.",
                        "VernacExtend",
                        "d5ce9ccf4e34ba2f988668036022627ea9a20053"
                    ]
                },
                {
                    "command": [
                        "rewrite <- Rmult_IZR.",
                        "VernacExtend",
                        "77ff9e5d0697bdc5f92b38cf0c531b2d80b04bc3"
                    ]
                },
                {
                    "command": [
                        "apply Rlt_IZR; auto with zarith.",
                        "VernacExtend",
                        "03f0d8ad561f13fe59d5a8656bd3163bb800af89"
                    ]
                },
                {
                    "command": [
                        "rewrite <- Zopp_mult_distr_l.",
                        "VernacExtend",
                        "793267bc17cdca79103d81fb3367e80db2d1a5d0"
                    ]
                },
                {
                    "command": [
                        "apply Zlt_Zopp.",
                        "VernacExtend",
                        "f65acc0ebbbce2497b36740bf163938c842157b4"
                    ]
                },
                {
                    "command": [
                        "rewrite Zmult_comm.",
                        "VernacExtend",
                        "2c1282bf165ec7c97fac66d6d60ae4f6ba65e66e"
                    ]
                },
                {
                    "command": [
                        "unfold pPred in |- *; rewrite (PosNormMin radix) with (precision := precision); auto with zarith.",
                        "VernacExtend",
                        "71b7c96190502824835e1d621c7799c4d10abfb9"
                    ]
                },
                {
                    "command": [
                        "apply sym_equal; apply Zsucc_pred.",
                        "VernacExtend",
                        "afd4f98ccb03b0f43b4b78cd2716496db5fd847c"
                    ]
                },
                {
                    "command": [
                        "intros H'1; unfold FtoRradix, FtoR in |- *; simpl in |- *; auto with real zarith.",
                        "VernacExtend",
                        "6acff90157dd8b85dbcc7d9d49146c406d014fa4"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "FSuccPropPos",
            "line_nb": 338,
            "steps": [
                {
                    "command": [
                        "intros x y H' H'0 H'1 H'2.",
                        "VernacExtend",
                        "f4c6938634f065cc68eff94850d69a723e938618"
                    ]
                },
                {
                    "command": [
                        "cut (Fbounded b x); [ intros Fb0 | apply FcanonicBound with (1 := H'0) ].",
                        "VernacExtend",
                        "77ed3eea35586ad9560b2983781e033f30da9a6a"
                    ]
                },
                {
                    "command": [
                        "cut (Fbounded b y); [ intros Fb1 | apply FcanonicBound with (1 := H'1) ].",
                        "VernacExtend",
                        "3d1e3c39ac4b453a45561a823648da26fac7f699"
                    ]
                },
                {
                    "command": [
                        "case FcanonicLtPos with (p := x) (q := y) (3 := pGivesBound); auto.",
                        "VernacExtend",
                        "cc49c6e261a16906ef2022481580be5a43352ca0"
                    ]
                },
                {
                    "command": [
                        "case (Z_eq_dec (Fnum x) (pPred (vNum b))); intros H'4.",
                        "VernacExtend",
                        "ecf018951c7081752c9d9bae467563a971037f63"
                    ]
                },
                {
                    "command": [
                        "rewrite FSuccSimpl1; auto.",
                        "VernacExtend",
                        "44ac04106f049e90b568a0809ee9f7229a242d83"
                    ]
                },
                {
                    "command": [
                        "intros H'5; case (Zlt_next _ _ H'5); intros H'6.",
                        "VernacExtend",
                        "322ff3740d24bfdbb1105c8d062d6058b8341b38"
                    ]
                },
                {
                    "command": [
                        "replace y with (Float (Fnum y) (Fexp y)).",
                        "VernacExtend",
                        "76d14f9c1e2e98816205b6443163a6734689956a"
                    ]
                },
                {
                    "command": [
                        "rewrite H'6.",
                        "VernacExtend",
                        "7a5e609e825f92618da18be03aa16ab06d13e048"
                    ]
                },
                {
                    "command": [
                        "generalize Fle_Zle; unfold Fle, FtoRradix in |- *; intros H'7; apply H'7; clear H'7; auto with arith.",
                        "VernacExtend",
                        "927591e130b6c55335fab9733d1a16adc6c4fbc8"
                    ]
                },
                {
                    "command": [
                        "rewrite <- (Zabs_eq (Fnum y)); auto with float zarith.",
                        "VernacExtend",
                        "c494e3ccba12e4518b0ee0d89668560e52eeee79"
                    ]
                },
                {
                    "command": [
                        "apply pNormal_absolu_min with (b := b); auto.",
                        "VernacExtend",
                        "e86cbd64a24d221a20706aeda84a85b2cef07d24"
                    ]
                },
                {
                    "command": [
                        "case H'1; auto with float.",
                        "VernacExtend",
                        "b7548d4efae62c7d4bba12edfb85f291218a9862"
                    ]
                },
                {
                    "command": [
                        "intros H'7; Contradict H'5; apply Zle_not_lt.",
                        "VernacExtend",
                        "2c39cb7e5e26f7620f5aa5d77bc132959f8fa35d"
                    ]
                },
                {
                    "command": [
                        "replace (Fexp y) with (- dExp b)%Z; auto with float.",
                        "VernacExtend",
                        "40c671176201c01d1ba860f18a1f30769c3b20a0"
                    ]
                },
                {
                    "command": [
                        "case H'7; intros H'8 (H'9, H'10); auto.",
                        "VernacExtend",
                        "db24bd9db296093857836234a3b43b5b61cde520"
                    ]
                },
                {
                    "command": [
                        "apply LeR0Fnum with (radix := radix); auto with zarith.",
                        "VernacExtend",
                        "7618493186a55fbcb98553549cd44aa866865932"
                    ]
                },
                {
                    "command": [
                        "apply Rle_trans with (r2 := FtoR radix x); auto with real.",
                        "VernacExtend",
                        "1b3ce4334f8df082971a490d8ba568ccc6cdfe42"
                    ]
                },
                {
                    "command": [
                        "case y; auto.",
                        "VernacExtend",
                        "84af06c37f8aaa8afdc8edb1aa386eabca2a5ee7"
                    ]
                },
                {
                    "command": [
                        "apply Rlt_le; auto.",
                        "VernacExtend",
                        "4003e3e1c449ee89cad9e953d0a562db8235648c"
                    ]
                },
                {
                    "command": [
                        "unfold FtoRradix in |- *; apply FcanonicPosFexpRlt with (3 := pGivesBound); auto.",
                        "VernacExtend",
                        "9bfb053c4214be33c4f6392f497c11b185bbf61e"
                    ]
                },
                {
                    "command": [
                        "apply LeFnumZERO with (radix := radix); auto with zarith.",
                        "VernacExtend",
                        "01b66b02c3cccbd627d71e22616916f70799f9a5"
                    ]
                },
                {
                    "command": [
                        "simpl in |- *; auto with zarith.",
                        "VernacExtend",
                        "61d3cdc6299cf8abf87703c074ca4503f0f27a12"
                    ]
                },
                {
                    "command": [
                        "apply Zlt_le_weak; apply nNormPos.",
                        "VernacExtend",
                        "fddd46658e9ed01dee969b288ee026317cbf2249"
                    ]
                },
                {
                    "command": [
                        "auto with zarith.",
                        "VernacExtend",
                        "23f42fd3236dcece4a40b3a666dce57fea69a9c0"
                    ]
                },
                {
                    "command": [
                        "apply Rle_trans with (r2 := FtoR radix x); auto with real.",
                        "VernacExtend",
                        "1b3ce4334f8df082971a490d8ba568ccc6cdfe42"
                    ]
                },
                {
                    "command": [
                        "rewrite <- FSuccSimpl1; auto.",
                        "VernacExtend",
                        "f7bff722818319e127285bc79bd5adbd964fdf25"
                    ]
                },
                {
                    "command": [
                        "apply FSuccCanonic; auto.",
                        "VernacExtend",
                        "6a18df3c3cef38b325b61a78e1886bb852c7efc6"
                    ]
                },
                {
                    "command": [
                        "intros H'5; apply Rlt_le.",
                        "VernacExtend",
                        "1e7857a08390797860ee3f47983b105a166121b4"
                    ]
                },
                {
                    "command": [
                        "unfold FtoRradix in |- *; apply FcanonicPosFexpRlt with (3 := pGivesBound); auto.",
                        "VernacExtend",
                        "9bfb053c4214be33c4f6392f497c11b185bbf61e"
                    ]
                },
                {
                    "command": [
                        "apply Rle_trans with (r2 := FtoR radix x); auto.",
                        "VernacExtend",
                        "484a2705196fb529f25b31233ca0f48d35efe7e3"
                    ]
                },
                {
                    "command": [
                        "apply Rlt_le; auto.",
                        "VernacExtend",
                        "4003e3e1c449ee89cad9e953d0a562db8235648c"
                    ]
                },
                {
                    "command": [
                        "apply FSuccLt; auto.",
                        "VernacExtend",
                        "bffe14293ac497aa5e23792addde1959650d5030"
                    ]
                },
                {
                    "command": [
                        "apply Rle_trans with (r2 := FtoR radix x); auto with real.",
                        "VernacExtend",
                        "1b3ce4334f8df082971a490d8ba568ccc6cdfe42"
                    ]
                },
                {
                    "command": [
                        "apply FSuccCanonic; auto.",
                        "VernacExtend",
                        "6a18df3c3cef38b325b61a78e1886bb852c7efc6"
                    ]
                },
                {
                    "command": [
                        "rewrite FSuccSimpl4; auto.",
                        "VernacExtend",
                        "2d47fc6c82e2413444df3c5559a82c7fc117184e"
                    ]
                },
                {
                    "command": [
                        "apply sym_not_equal; apply Zlt_not_eq.",
                        "VernacExtend",
                        "7b38bf851c75b1e2cdd7f7b0afb8d6236ccdc729"
                    ]
                },
                {
                    "command": [
                        "apply Zlt_le_trans with (m := 0%Z); auto with zarith.",
                        "VernacExtend",
                        "5fa1758eb257d15b0d2aa671faef931699ea9e64"
                    ]
                },
                {
                    "command": [
                        "replace 0%Z with (- 0%nat)%Z; auto with zarith.",
                        "VernacExtend",
                        "957a3dec4cb429f53c6d700221d8a11270469ef5"
                    ]
                },
                {
                    "command": [
                        "apply Zlt_Zopp.",
                        "VernacExtend",
                        "f65acc0ebbbce2497b36740bf163938c842157b4"
                    ]
                },
                {
                    "command": [
                        "apply nNormPos; auto.",
                        "VernacExtend",
                        "e5ed4720e90a1a7d04d329ae5b9376848209d6ad"
                    ]
                },
                {
                    "command": [
                        "apply LeR0Fnum with (radix := radix); auto with zarith.",
                        "VernacExtend",
                        "7618493186a55fbcb98553549cd44aa866865932"
                    ]
                },
                {
                    "command": [
                        "intros H'4; elim H'4; intros H'5 H'6; clear H'4.",
                        "VernacExtend",
                        "ae164df2110ce1a10977154c24e4a36a53bc489f"
                    ]
                },
                {
                    "command": [
                        "generalize (Z_eq_bool_correct (Fnum x) (Zpos (vNum b))); case (Z_eq_bool (Fnum x) (Zpos (vNum b))); intros H'4.",
                        "VernacExtend",
                        "4591ea6d807d66f71d82c914ff57b08c31b9d148"
                    ]
                },
                {
                    "command": [
                        "Contradict H'6; auto.",
                        "VernacExtend",
                        "d2efeff40f59def319adc3783cc52d06dfb83ce3"
                    ]
                },
                {
                    "command": [
                        "apply Zle_not_lt; apply Zlt_le_weak.",
                        "VernacExtend",
                        "cbffdec2e5c5ea55757377202b2c36e42b3fba1f"
                    ]
                },
                {
                    "command": [
                        "rewrite H'4; auto with float zarith.",
                        "VernacExtend",
                        "ea11d8d4268290cd27acd1cd711437866ba19b95"
                    ]
                },
                {
                    "command": [
                        "rewrite <- (Zabs_eq (Fnum y)); auto with float zarith.",
                        "VernacExtend",
                        "c494e3ccba12e4518b0ee0d89668560e52eeee79"
                    ]
                },
                {
                    "command": [
                        "apply LeR0Fnum with (radix := radix); auto with zarith.",
                        "VernacExtend",
                        "7618493186a55fbcb98553549cd44aa866865932"
                    ]
                },
                {
                    "command": [
                        "apply Rle_trans with (FtoRradix x); auto with real.",
                        "VernacExtend",
                        "5d29a8382345e2b1c0be8e43ca243058a60e24d0"
                    ]
                },
                {
                    "command": [
                        "case (Zlt_next _ _ H'6); intros H'7.",
                        "VernacExtend",
                        "b0fba7fbebf0368957e970feca40cb41d3e424cc"
                    ]
                },
                {
                    "command": [
                        "rewrite FSuccSimpl4; auto.",
                        "VernacExtend",
                        "2d47fc6c82e2413444df3c5559a82c7fc117184e"
                    ]
                },
                {
                    "command": [
                        "rewrite <- H'7; rewrite H'5; unfold FtoRradix, FtoR in |- *; simpl in |- *; auto with real.",
                        "VernacExtend",
                        "c2a61e409e0ef9cb180f27ae7c55603c4afca20e"
                    ]
                },
                {
                    "command": [
                        "apply Zlt_not_eq.",
                        "VernacExtend",
                        "e5f5ea956a3c3960b00bb158e170ed5b6dd61dc4"
                    ]
                },
                {
                    "command": [
                        "unfold pPred in |- *; apply Zlt_succ_pred; rewrite <- H'7; auto with float.",
                        "VernacExtend",
                        "bcb193623b73c880571e620ffd1e8eaaa39e82d8"
                    ]
                },
                {
                    "command": [
                        "rewrite <- (Zabs_eq (Fnum y)); auto with float zarith.",
                        "VernacExtend",
                        "c494e3ccba12e4518b0ee0d89668560e52eeee79"
                    ]
                },
                {
                    "command": [
                        "apply LeR0Fnum with (radix := radix); auto with zarith.",
                        "VernacExtend",
                        "7618493186a55fbcb98553549cd44aa866865932"
                    ]
                },
                {
                    "command": [
                        "apply Rle_trans with (FtoRradix x); auto with real.",
                        "VernacExtend",
                        "5d29a8382345e2b1c0be8e43ca243058a60e24d0"
                    ]
                },
                {
                    "command": [
                        "apply Zlt_not_eq_rev.",
                        "VernacExtend",
                        "2effcc5011dc2dc67f0cff3834821f55c0938ce1"
                    ]
                },
                {
                    "command": [
                        "apply Zlt_le_trans with (m := 0%Z); auto with zarith.",
                        "VernacExtend",
                        "5fa1758eb257d15b0d2aa671faef931699ea9e64"
                    ]
                },
                {
                    "command": [
                        "replace 0%Z with (- 0%nat)%Z; auto with zarith.",
                        "VernacExtend",
                        "957a3dec4cb429f53c6d700221d8a11270469ef5"
                    ]
                },
                {
                    "command": [
                        "apply Zlt_Zopp.",
                        "VernacExtend",
                        "f65acc0ebbbce2497b36740bf163938c842157b4"
                    ]
                },
                {
                    "command": [
                        "apply nNormPos; auto.",
                        "VernacExtend",
                        "e5ed4720e90a1a7d04d329ae5b9376848209d6ad"
                    ]
                },
                {
                    "command": [
                        "apply LeR0Fnum with (radix := radix); auto with zarith.",
                        "VernacExtend",
                        "7618493186a55fbcb98553549cd44aa866865932"
                    ]
                },
                {
                    "command": [
                        "rewrite FSuccSimpl4; auto.",
                        "VernacExtend",
                        "2d47fc6c82e2413444df3c5559a82c7fc117184e"
                    ]
                },
                {
                    "command": [
                        "replace y with (Float (Fnum y) (Fexp y)).",
                        "VernacExtend",
                        "76d14f9c1e2e98816205b6443163a6734689956a"
                    ]
                },
                {
                    "command": [
                        "rewrite H'5.",
                        "VernacExtend",
                        "408e27c747e37a9161b8d1de2e1be5ddec6d2694"
                    ]
                },
                {
                    "command": [
                        "unfold FtoRradix, FtoR in |- *; simpl in |- *; auto with real float.",
                        "VernacExtend",
                        "a64f0f289c1dc6f06b34342a475fcb502c559ea4"
                    ]
                },
                {
                    "command": [
                        "case y; simpl in |- *; auto.",
                        "VernacExtend",
                        "8ca4d5640acd88105f4dd8f78c893fa54bcc8f64"
                    ]
                },
                {
                    "command": [
                        "Contradict H'7; auto.",
                        "VernacExtend",
                        "12357ca29f32271152fcbd965cd9f477f6675800"
                    ]
                },
                {
                    "command": [
                        "apply Zle_not_lt; apply Zlt_le_weak.",
                        "VernacExtend",
                        "cbffdec2e5c5ea55757377202b2c36e42b3fba1f"
                    ]
                },
                {
                    "command": [
                        "rewrite H'7; auto with float zarith.",
                        "VernacExtend",
                        "bbe8efb9f3300d48e896969311c0594d48547f42"
                    ]
                },
                {
                    "command": [
                        "unfold pPred in |- *; rewrite <- Zsucc_pred.",
                        "VernacExtend",
                        "ef09c405ea7c17286c36fdb92fd6c0e91bde62ee"
                    ]
                },
                {
                    "command": [
                        "rewrite <- (Zabs_eq (Fnum y)); auto with float zarith.",
                        "VernacExtend",
                        "c494e3ccba12e4518b0ee0d89668560e52eeee79"
                    ]
                },
                {
                    "command": [
                        "apply LeR0Fnum with (radix := radix); auto with zarith.",
                        "VernacExtend",
                        "7618493186a55fbcb98553549cd44aa866865932"
                    ]
                },
                {
                    "command": [
                        "apply Rle_trans with (FtoRradix x); auto with real.",
                        "VernacExtend",
                        "5d29a8382345e2b1c0be8e43ca243058a60e24d0"
                    ]
                },
                {
                    "command": [
                        "apply Zlt_not_eq_rev.",
                        "VernacExtend",
                        "2effcc5011dc2dc67f0cff3834821f55c0938ce1"
                    ]
                },
                {
                    "command": [
                        "apply Zlt_le_trans with (m := 0%Z); auto with zarith.",
                        "VernacExtend",
                        "5fa1758eb257d15b0d2aa671faef931699ea9e64"
                    ]
                },
                {
                    "command": [
                        "replace 0%Z with (- 0%nat)%Z; auto with zarith.",
                        "VernacExtend",
                        "957a3dec4cb429f53c6d700221d8a11270469ef5"
                    ]
                },
                {
                    "command": [
                        "apply Zlt_Zopp.",
                        "VernacExtend",
                        "f65acc0ebbbce2497b36740bf163938c842157b4"
                    ]
                },
                {
                    "command": [
                        "apply nNormPos; auto.",
                        "VernacExtend",
                        "e5ed4720e90a1a7d04d329ae5b9376848209d6ad"
                    ]
                },
                {
                    "command": [
                        "apply LeR0Fnum with (radix := radix); auto with zarith.",
                        "VernacExtend",
                        "7618493186a55fbcb98553549cd44aa866865932"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "R0RltRleSucc",
            "line_nb": 422,
            "steps": [
                {
                    "command": [
                        "intros a H'; unfold FSucc in |- *.",
                        "VernacExtend",
                        "737974d7cb55bd023cfaedfe3b78421d417a750c"
                    ]
                },
                {
                    "command": [
                        "generalize (Z_eq_bool_correct (Fnum a) (pPred (vNum b))); case (Z_eq_bool (Fnum a) (pPred (vNum b))); auto.",
                        "VernacExtend",
                        "937d14f905edfb31305427cae335d4bcba0cf6cf"
                    ]
                },
                {
                    "command": [
                        "intros H'0; absurd (Fnum a < 0)%Z; auto.",
                        "VernacExtend",
                        "ac731c050afc7320271797eb74957561ccbb3e32"
                    ]
                },
                {
                    "command": [
                        "rewrite H'0; auto with zarith arith.",
                        "VernacExtend",
                        "9050aebbe171a275752f823dcd2c9fc2d14b7946"
                    ]
                },
                {
                    "command": [
                        "apply Zle_not_lt; unfold pPred in |- *; apply Zle_Zpred; auto with float.",
                        "VernacExtend",
                        "3bdd10a1e8c83ea39b35420fe2f5709b7f1e9e40"
                    ]
                },
                {
                    "command": [
                        "apply Zlt_trans with 1%Z; auto with zarith; apply (vNumbMoreThanOne radix) with (precision := precision); auto with zarith.",
                        "VernacExtend",
                        "a92ec5f33d93039b97d8b89c3ef3b36d6a29aa27"
                    ]
                },
                {
                    "command": [
                        "apply R0LtFnum with (radix := radix); auto with zarith.",
                        "VernacExtend",
                        "376c19f116f46fe69a9223949a7f05cb483cb452"
                    ]
                },
                {
                    "command": [
                        "generalize (Z_eq_bool_correct (Fnum a) (- nNormMin radix precision)); case (Z_eq_bool (Fnum a) (- nNormMin radix precision)); intros H'1.",
                        "VernacExtend",
                        "611c5c39913ba724968b5698d7a9cc3f021aabb4"
                    ]
                },
                {
                    "command": [
                        "generalize (Z_eq_bool_correct (Fexp a) (- dExp b)); case (Z_eq_bool (Fexp a) (- dExp b)); intros H'2.",
                        "VernacExtend",
                        "86feaa2305d222fd8219390dd2c76516785bc9a9"
                    ]
                },
                {
                    "command": [
                        "intros H'0.",
                        "VernacExtend",
                        "e8ea833695b450eab455d302901072f04fd3096d"
                    ]
                },
                {
                    "command": [
                        "apply LeZEROFnum with (radix := radix); simpl in |- *; auto with zarith.",
                        "VernacExtend",
                        "09b3b8af184ee5d6747e2d487f72663a93c1ec8e"
                    ]
                },
                {
                    "command": [
                        "apply Zlt_le_succ.",
                        "VernacExtend",
                        "070de595889f014f0a173659377506422eb25080"
                    ]
                },
                {
                    "command": [
                        "apply R0LtFnum with (radix := radix); auto with zarith.",
                        "VernacExtend",
                        "376c19f116f46fe69a9223949a7f05cb483cb452"
                    ]
                },
                {
                    "command": [
                        "intros H'0.",
                        "VernacExtend",
                        "e8ea833695b450eab455d302901072f04fd3096d"
                    ]
                },
                {
                    "command": [
                        "apply LeZEROFnum with (radix := radix); simpl in |- *; auto with zarith.",
                        "VernacExtend",
                        "09b3b8af184ee5d6747e2d487f72663a93c1ec8e"
                    ]
                },
                {
                    "command": [
                        "replace 0%Z with (- (0))%Z; [ apply Zle_Zopp | simpl in |- *; auto ].",
                        "VernacExtend",
                        "fb6c3abf19f3051c96ea2aa6b8fd7eb78535951d"
                    ]
                },
                {
                    "command": [
                        "unfold pPred in |- *; apply Zle_Zpred; apply Zlt_trans with 1%Z; auto with zarith; apply (vNumbMoreThanOne radix) with (precision := precision); auto with zarith.",
                        "VernacExtend",
                        "74fde1246bb5c4a9482f744fcd348c87721d459c"
                    ]
                },
                {
                    "command": [
                        "intros H'0.",
                        "VernacExtend",
                        "e8ea833695b450eab455d302901072f04fd3096d"
                    ]
                },
                {
                    "command": [
                        "apply LeZEROFnum with (radix := radix); simpl in |- *; auto with zarith.",
                        "VernacExtend",
                        "09b3b8af184ee5d6747e2d487f72663a93c1ec8e"
                    ]
                },
                {
                    "command": [
                        "apply Zlt_le_succ.",
                        "VernacExtend",
                        "070de595889f014f0a173659377506422eb25080"
                    ]
                },
                {
                    "command": [
                        "apply R0LtFnum with (radix := radix); auto with zarith.",
                        "VernacExtend",
                        "376c19f116f46fe69a9223949a7f05cb483cb452"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "FSuccPropNeg",
            "line_nb": 445,
            "steps": [
                {
                    "command": [
                        "intros x y H' H'0 H'1 H'2.",
                        "VernacExtend",
                        "f4c6938634f065cc68eff94850d69a723e938618"
                    ]
                },
                {
                    "command": [
                        "cut (Fbounded b x); [ intros Fb0 | apply FcanonicBound with (1 := H'0) ].",
                        "VernacExtend",
                        "77ed3eea35586ad9560b2983781e033f30da9a6a"
                    ]
                },
                {
                    "command": [
                        "cut (Fbounded b y); [ intros Fb1 | apply FcanonicBound with (1 := H'1) ].",
                        "VernacExtend",
                        "3d1e3c39ac4b453a45561a823648da26fac7f699"
                    ]
                },
                {
                    "command": [
                        "case (Rle_or_lt 0 y); intros Rle0.",
                        "VernacExtend",
                        "810d86dbb6c6ef8d04e9815d04ba0191255cc641"
                    ]
                },
                {
                    "command": [
                        "apply Rle_trans with (r2 := 0%R); auto.",
                        "VernacExtend",
                        "053c2ecc554c61823c66d32f9cdf7e63a2a9a735"
                    ]
                },
                {
                    "command": [
                        "apply R0RltRleSucc; auto.",
                        "VernacExtend",
                        "f0aedbe041e5ce2eb6aaacb03d043e1b5f90f3ff"
                    ]
                },
                {
                    "command": [
                        "cut (Fnum x <> pPred (vNum b)); [ intros N0 | idtac ]; auto with zarith.",
                        "VernacExtend",
                        "77e4c9fffca50296ae5551e0d80210260bd1960e"
                    ]
                },
                {
                    "command": [
                        "generalize (Z_eq_bool_correct (Fnum x) (- nNormMin radix precision)); case (Z_eq_bool (Fnum x) (- nNormMin radix precision)); intros H'4.",
                        "VernacExtend",
                        "07010fad1b606a081b6fc387901f69860b11d7c6"
                    ]
                },
                {
                    "command": [
                        "generalize (Z_eq_bool_correct (Fexp x) (- dExp b)); case (Z_eq_bool (Fexp x) (- dExp b)); intros H'5.",
                        "VernacExtend",
                        "102fd854b6a569e1e20d5f2705c63fc79577403e"
                    ]
                },
                {
                    "command": [
                        "replace x with (Float (Fnum x) (Fexp x)).",
                        "VernacExtend",
                        "a8877e005fb0e6fdbc20b1adc720e9c08a677ad7"
                    ]
                },
                {
                    "command": [
                        "rewrite H'4; rewrite H'5; rewrite FSuccSimpl3; auto.",
                        "VernacExtend",
                        "9d8e99937775b8c36f817b27de22c22ba88ae9cb"
                    ]
                },
                {
                    "command": [
                        "case FcanonicLtNeg with (p := x) (q := y) (3 := pGivesBound); auto with real.",
                        "VernacExtend",
                        "12fea3996c25acee5f21ca80e86add2ea914c243"
                    ]
                },
                {
                    "command": [
                        "intros H'6; Contradict H'6; rewrite H'5; apply Zle_not_lt; auto with float.",
                        "VernacExtend",
                        "b8078149af24bc62f5fe88aeda36b59d04167dec"
                    ]
                },
                {
                    "command": [
                        "intros H'6; elim H'6; intros H'7 H'8; clear H'6; replace y with (Float (Fnum y) (Fexp y)).",
                        "VernacExtend",
                        "9fe027f369e3fbd80f11330d469cd16d7be54c49"
                    ]
                },
                {
                    "command": [
                        "rewrite <- H'7; rewrite H'5.",
                        "VernacExtend",
                        "e2a6003c02be53fd09d8e9aef88dd5f5a73277af"
                    ]
                },
                {
                    "command": [
                        "generalize Fle_Zle; unfold Fle, FtoRradix in |- *; intros H'9; apply H'9; clear H'9; auto with arith.",
                        "VernacExtend",
                        "0be0396b730e525f605759902cfbf21fb2d2dde5"
                    ]
                },
                {
                    "command": [
                        "rewrite <- H'4; auto with zarith.",
                        "VernacExtend",
                        "d6f6d27c21f067bc1f24b26a0c4bad513aef2d81"
                    ]
                },
                {
                    "command": [
                        "case y; auto.",
                        "VernacExtend",
                        "84af06c37f8aaa8afdc8edb1aa386eabca2a5ee7"
                    ]
                },
                {
                    "command": [
                        "case x; auto.",
                        "VernacExtend",
                        "f57363a6383428f88164bd82d8acc0208070625f"
                    ]
                },
                {
                    "command": [
                        "rewrite FSuccSimpl2; auto.",
                        "VernacExtend",
                        "07ca4a523210d74d7ffb5c3b1afae4eeec0e3f44"
                    ]
                },
                {
                    "command": [
                        "case FcanonicLtNeg with (p := x) (q := y) (3 := pGivesBound); auto with real.",
                        "VernacExtend",
                        "12fea3996c25acee5f21ca80e86add2ea914c243"
                    ]
                },
                {
                    "command": [
                        "intros H'6; replace y with (Float (Fnum y) (Fexp y)).",
                        "VernacExtend",
                        "6ebdb08d28283caaf306cf670f6550f8dc8fd8f1"
                    ]
                },
                {
                    "command": [
                        "case (Zlt_next _ _ H'6); intros H'7.",
                        "VernacExtend",
                        "b0fba7fbebf0368957e970feca40cb41d3e424cc"
                    ]
                },
                {
                    "command": [
                        "rewrite H'7.",
                        "VernacExtend",
                        "03c6aba9ff54b96ca970e9bd498865d563f34b83"
                    ]
                },
                {
                    "command": [
                        "rewrite <- Zpred_succ.",
                        "VernacExtend",
                        "57dea680ca1415cbebeb3f178fd56104bf5deab3"
                    ]
                },
                {
                    "command": [
                        "unfold FtoRradix, FtoR in |- *; simpl in |- *.",
                        "VernacExtend",
                        "85a3da1582165d92ceb7faef707de88822bccf1a"
                    ]
                },
                {
                    "command": [
                        "apply Rle_monotone_exp; auto with zarith.",
                        "VernacExtend",
                        "61034efec0f9874dde132ba1356712241ca5f33c"
                    ]
                },
                {
                    "command": [
                        "rewrite <- (Zopp_involutive (Fnum y)); apply Rle_IZR; apply Zle_Zopp.",
                        "VernacExtend",
                        "c21b2fc5a3fde34691a6172a92fb1c3a75157e53"
                    ]
                },
                {
                    "command": [
                        "unfold pPred in |- *; apply Zle_Zpred; rewrite <- Zabs_eq_opp; auto with float zarith.",
                        "VernacExtend",
                        "929ed77034621444d8d4664495dc57bfada527c9"
                    ]
                },
                {
                    "command": [
                        "apply Zlt_le_weak; apply R0LtFnum with (radix := radix); auto with zarith.",
                        "VernacExtend",
                        "f60b2bd5db023c7405dfba6df3852d1d94d29d1e"
                    ]
                },
                {
                    "command": [
                        "apply Rlt_le; auto with real.",
                        "VernacExtend",
                        "e1bf079018a05b732af3de134a13c80fa1b905a3"
                    ]
                },
                {
                    "command": [
                        "unfold FtoRradix in |- *; apply FcanonicNegFexpRlt with (3 := pGivesBound); auto.",
                        "VernacExtend",
                        "9185c2d580acdd0a20cccfbe23a470808a9838bc"
                    ]
                },
                {
                    "command": [
                        "apply Rlt_le; auto.",
                        "VernacExtend",
                        "4003e3e1c449ee89cad9e953d0a562db8235648c"
                    ]
                },
                {
                    "command": [
                        "rewrite <- FSuccSimpl2; auto.",
                        "VernacExtend",
                        "c5b8aafd48f398a2483876026c80432e3d6fd236"
                    ]
                },
                {
                    "command": [
                        "apply R0RltRleSucc; auto.",
                        "VernacExtend",
                        "f0aedbe041e5ce2eb6aaacb03d043e1b5f90f3ff"
                    ]
                },
                {
                    "command": [
                        "rewrite <- FSuccSimpl2; auto.",
                        "VernacExtend",
                        "c5b8aafd48f398a2483876026c80432e3d6fd236"
                    ]
                },
                {
                    "command": [
                        "apply FSuccCanonic; auto.",
                        "VernacExtend",
                        "6a18df3c3cef38b325b61a78e1886bb852c7efc6"
                    ]
                },
                {
                    "command": [
                        "simpl in |- *; auto.",
                        "VernacExtend",
                        "9b631374b1d3067f703fd99c5dc6e1e5c8405957"
                    ]
                },
                {
                    "command": [
                        "apply Zsucc_lt_reg; auto.",
                        "VernacExtend",
                        "a74e34ded40d03b747e80609986d4f171cd5d6e3"
                    ]
                },
                {
                    "command": [
                        "rewrite <- Zsucc_pred; auto with zarith.",
                        "VernacExtend",
                        "5cae25187bb59cf10857043e129e382ac4ebe3fc"
                    ]
                },
                {
                    "command": [
                        "case y; auto.",
                        "VernacExtend",
                        "84af06c37f8aaa8afdc8edb1aa386eabca2a5ee7"
                    ]
                },
                {
                    "command": [
                        "intros H'6; elim H'6; intros H'7 H'8; clear H'6; apply Rlt_le.",
                        "VernacExtend",
                        "4faf53b47a9b9fdb86d1d0a8c9e9f1a706e65490"
                    ]
                },
                {
                    "command": [
                        "Contradict H'8; rewrite H'4.",
                        "VernacExtend",
                        "a81e3450900d59db265f9bf140a4f1b893060048"
                    ]
                },
                {
                    "command": [
                        "apply Zle_not_lt.",
                        "VernacExtend",
                        "a635904a634172283c98f3792d1f8261c5710c4f"
                    ]
                },
                {
                    "command": [
                        "replace (Fnum y) with (- Zabs (Fnum y))%Z.",
                        "VernacExtend",
                        "807e9f2a4f5b2d3910a2d58266f48b993f96a721"
                    ]
                },
                {
                    "command": [
                        "apply Zle_Zopp.",
                        "VernacExtend",
                        "4116fffd3d82e798294ccbceb07ce04df95b160a"
                    ]
                },
                {
                    "command": [
                        "apply pNormal_absolu_min with (3 := pGivesBound); auto.",
                        "VernacExtend",
                        "550a97ca4cafd1444f332f8fcb8137175b8efaf6"
                    ]
                },
                {
                    "command": [
                        "case H'1; auto.",
                        "VernacExtend",
                        "a44f1b914e489dd19b841fdfab025ba14e3d8f86"
                    ]
                },
                {
                    "command": [
                        "intros H'6; Contradict H'5; rewrite H'7; auto with float.",
                        "VernacExtend",
                        "db3647d9747e520fcfae0a04aaca4b432071a4a4"
                    ]
                },
                {
                    "command": [
                        "apply FsubnormalFexp with (1 := H'6).",
                        "VernacExtend",
                        "fe3839b8dd0c449fba9e61e25c6f1c9a4e6accb9"
                    ]
                },
                {
                    "command": [
                        "rewrite Zabs_eq_opp.",
                        "VernacExtend",
                        "7b3bb90c008af9eaa2ac3245f8167e5a1cee077a"
                    ]
                },
                {
                    "command": [
                        "ring.",
                        "VernacExtend",
                        "baadd9fc4c175005af409bb466fcea9fab25b4e6"
                    ]
                },
                {
                    "command": [
                        "apply R0LeFnum with (radix := radix); auto with zarith.",
                        "VernacExtend",
                        "386809c0eda4bd6092f26d151a6b3376a55cda43"
                    ]
                },
                {
                    "command": [
                        "apply Rlt_le; auto.",
                        "VernacExtend",
                        "4003e3e1c449ee89cad9e953d0a562db8235648c"
                    ]
                },
                {
                    "command": [
                        "rewrite FSuccSimpl4; auto.",
                        "VernacExtend",
                        "2d47fc6c82e2413444df3c5559a82c7fc117184e"
                    ]
                },
                {
                    "command": [
                        "case FcanonicLtNeg with (p := x) (q := y) (3 := pGivesBound); auto.",
                        "VernacExtend",
                        "0099850b815a8af1d30370efdddc9991375fca8c"
                    ]
                },
                {
                    "command": [
                        "apply Rlt_le; auto with real.",
                        "VernacExtend",
                        "e1bf079018a05b732af3de134a13c80fa1b905a3"
                    ]
                },
                {
                    "command": [
                        "intros H'5; apply Rlt_le; auto.",
                        "VernacExtend",
                        "9dfb7d69d46f4d4b65c6dbb0080dc912fc77ff43"
                    ]
                },
                {
                    "command": [
                        "unfold FtoRradix in |- *; apply FcanonicNegFexpRlt with (3 := pGivesBound); auto.",
                        "VernacExtend",
                        "9185c2d580acdd0a20cccfbe23a470808a9838bc"
                    ]
                },
                {
                    "command": [
                        "apply Rlt_le; auto.",
                        "VernacExtend",
                        "4003e3e1c449ee89cad9e953d0a562db8235648c"
                    ]
                },
                {
                    "command": [
                        "rewrite <- FSuccSimpl4; auto.",
                        "VernacExtend",
                        "c4beb5a51c8ef4fd8e99b16d78ac38661db6c177"
                    ]
                },
                {
                    "command": [
                        "apply R0RltRleSucc; auto.",
                        "VernacExtend",
                        "f0aedbe041e5ce2eb6aaacb03d043e1b5f90f3ff"
                    ]
                },
                {
                    "command": [
                        "rewrite <- FSuccSimpl4; auto.",
                        "VernacExtend",
                        "c4beb5a51c8ef4fd8e99b16d78ac38661db6c177"
                    ]
                },
                {
                    "command": [
                        "apply FSuccCanonic; auto.",
                        "VernacExtend",
                        "6a18df3c3cef38b325b61a78e1886bb852c7efc6"
                    ]
                },
                {
                    "command": [
                        "intros H'5; elim H'5; intros H'6 H'7; clear H'5.",
                        "VernacExtend",
                        "de80fa61b960a237a06c21afde1d0a1c86c5fbea"
                    ]
                },
                {
                    "command": [
                        "replace y with (Float (Fnum y) (Fexp y)).",
                        "VernacExtend",
                        "76d14f9c1e2e98816205b6443163a6734689956a"
                    ]
                },
                {
                    "command": [
                        "rewrite H'6.",
                        "VernacExtend",
                        "7a5e609e825f92618da18be03aa16ab06d13e048"
                    ]
                },
                {
                    "command": [
                        "generalize Fle_Zle; unfold Fle, FtoRradix in |- *; intros H'8; apply H'8; clear H'8; auto with zarith arith.",
                        "VernacExtend",
                        "570d564065931ab5430d935e2d80ab24c4867286"
                    ]
                },
                {
                    "command": [
                        "case y; auto.",
                        "VernacExtend",
                        "84af06c37f8aaa8afdc8edb1aa386eabca2a5ee7"
                    ]
                },
                {
                    "command": [
                        "apply Zlt_not_eq.",
                        "VernacExtend",
                        "e5f5ea956a3c3960b00bb158e170ed5b6dd61dc4"
                    ]
                },
                {
                    "command": [
                        "apply Zlt_trans with 0%Z; auto with zarith.",
                        "VernacExtend",
                        "7a874dd70fd399b933593dbe4244c02704137262"
                    ]
                },
                {
                    "command": [
                        "apply R0LtFnum with (radix := radix); auto with zarith.",
                        "VernacExtend",
                        "376c19f116f46fe69a9223949a7f05cb483cb452"
                    ]
                },
                {
                    "command": [
                        "unfold pPred in |- *; apply Zlt_succ_pred.",
                        "VernacExtend",
                        "e75c48ef2825774936e2b1274fd64d8c51e627fd"
                    ]
                },
                {
                    "command": [
                        "replace (Zsucc 0) with (Z_of_nat 1); [ apply (vNumbMoreThanOne radix) with (precision := precision) | simpl in |- * ]; auto with zarith.",
                        "VernacExtend",
                        "628a88b0c50dee10a2ffa4788688a4c0ca2d1763"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "FSuccProp",
            "line_nb": 521,
            "steps": [
                {
                    "command": [
                        "intros x y H' H'0 H'1; case (Rle_or_lt 0 x); intros H'2.",
                        "VernacExtend",
                        "851856379c3bec3079c9914399ef55401c3726c8"
                    ]
                },
                {
                    "command": [
                        "apply FSuccPropPos; auto.",
                        "VernacExtend",
                        "f5c2840082fdb086eb5e016a1c86be6bff2eb284"
                    ]
                },
                {
                    "command": [
                        "apply FSuccPropNeg; auto.",
                        "VernacExtend",
                        "a5f37464b32ebee66cd9fce6b2a6367b16758580"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "FSuccZleEq",
            "line_nb": 526,
            "steps": [
                {
                    "command": [
                        "intros p q H'.",
                        "VernacExtend",
                        "6d0165163a2a8e407c09482ce517f2835b5de359"
                    ]
                },
                {
                    "command": [
                        "generalize (Z_eq_bool_correct (Fnum p) (pPred (vNum b))); case (Z_eq_bool (Fnum p) (pPred (vNum b))); intros H'0.",
                        "VernacExtend",
                        "dbf9e8042129dce9df81274894a7736f53adb47d"
                    ]
                },
                {
                    "command": [
                        "rewrite FSuccSimpl1; simpl in |- *; auto with arith.",
                        "VernacExtend",
                        "3b06ad8f2e3d8b71b3130a4d843267a1d8612a39"
                    ]
                },
                {
                    "command": [
                        "intros H'1 H'2.",
                        "VernacExtend",
                        "7a23b9b623f1e0b29a054bf061a5d299d6d4f251"
                    ]
                },
                {
                    "command": [
                        "replace p with (Fshift radix (Zabs_nat (Fexp q - Fexp p)) q).",
                        "VernacExtend",
                        "8f63cca86695653c25e8b7e59e566a15a22acc0c"
                    ]
                },
                {
                    "command": [
                        "unfold FtoRradix in |- *; rewrite FshiftCorrect; auto with real.",
                        "VernacExtend",
                        "2191906f2acd1f5f5d36fa8f6fc5c5d7495cf783"
                    ]
                },
                {
                    "command": [
                        "cut (Fexp (Fshift radix (Zabs_nat (Fexp q - Fexp p)) q) = Fexp p); [ intros Eq0 | idtac ].",
                        "VernacExtend",
                        "9969f0ac9149afe75e48d239d9fbfb871bca5466"
                    ]
                },
                {
                    "command": [
                        "apply floatEq; auto.",
                        "VernacExtend",
                        "c847d668791777965ba33ea03f8c58569a27270b"
                    ]
                },
                {
                    "command": [
                        "apply sym_equal; apply Zeq_Zs; auto.",
                        "VernacExtend",
                        "544e17021308978edade2290da1b51e46f4f11f9"
                    ]
                },
                {
                    "command": [
                        "apply Rle_Fexp_eq_Zle with (radix := radix); auto with arith.",
                        "VernacExtend",
                        "9e010cb344e056de0a32c5c87a8ac13a89edb70c"
                    ]
                },
                {
                    "command": [
                        "rewrite FshiftCorrect; auto.",
                        "VernacExtend",
                        "a32fc58b728c0efc747f4947893df95ea3a250c0"
                    ]
                },
                {
                    "command": [
                        "replace (Zsucc (Fnum p)) with (Fnum (Fshift radix 1 (FSucc p))); auto.",
                        "VernacExtend",
                        "8a39a0346a49c25f75887f9cab96df3f30f919a8"
                    ]
                },
                {
                    "command": [
                        "apply Rlt_Fexp_eq_Zlt with (radix := radix); auto with arith.",
                        "VernacExtend",
                        "dc2533501e2fa226a679c90172ce0c4803cac522"
                    ]
                },
                {
                    "command": [
                        "repeat rewrite FshiftCorrect; auto.",
                        "VernacExtend",
                        "e02d2e61004981480c8d9e17c4cf3a012483a0d9"
                    ]
                },
                {
                    "command": [
                        "rewrite FSuccSimpl1; simpl in |- *; auto with arith.",
                        "VernacExtend",
                        "3b06ad8f2e3d8b71b3130a4d843267a1d8612a39"
                    ]
                },
                {
                    "command": [
                        "unfold Fshift in |- *; simpl in |- *.",
                        "VernacExtend",
                        "bc2226e4b5a4ef5bbaea414d285c81f30a1eb932"
                    ]
                },
                {
                    "command": [
                        "rewrite FSuccSimpl1; simpl in |- *; auto with arith.",
                        "VernacExtend",
                        "3b06ad8f2e3d8b71b3130a4d843267a1d8612a39"
                    ]
                },
                {
                    "command": [
                        "rewrite inj_abs; auto with zarith.",
                        "VernacExtend",
                        "d832d70d6f4177fa3d020760f1ccab18c59abdc1"
                    ]
                },
                {
                    "command": [
                        "unfold Fshift in |- *; simpl in |- *.",
                        "VernacExtend",
                        "bc2226e4b5a4ef5bbaea414d285c81f30a1eb932"
                    ]
                },
                {
                    "command": [
                        "rewrite FSuccSimpl1; simpl in |- *; auto with arith.",
                        "VernacExtend",
                        "3b06ad8f2e3d8b71b3130a4d843267a1d8612a39"
                    ]
                },
                {
                    "command": [
                        "rewrite Z.mul_1_r.",
                        "VernacExtend",
                        "80f92f5dcc09db388a2087f0ef3ff1d16ecdfdff"
                    ]
                },
                {
                    "command": [
                        "rewrite H'0.",
                        "VernacExtend",
                        "155943e97f3d58c39d0b7dc8dbaf42688f94c62f"
                    ]
                },
                {
                    "command": [
                        "unfold pPred in |- *; rewrite <- Zsucc_pred.",
                        "VernacExtend",
                        "ef09c405ea7c17286c36fdb92fd6c0e91bde62ee"
                    ]
                },
                {
                    "command": [
                        "rewrite (PosNormMin radix) with (precision := precision); auto with zarith; apply Zmult_comm.",
                        "VernacExtend",
                        "31a2aae12bcbbd27654ddc224566dc86bb15f370"
                    ]
                },
                {
                    "command": [
                        "unfold Fshift in |- *; simpl in |- *.",
                        "VernacExtend",
                        "bc2226e4b5a4ef5bbaea414d285c81f30a1eb932"
                    ]
                },
                {
                    "command": [
                        "rewrite inj_abs; auto with zarith.",
                        "VernacExtend",
                        "d832d70d6f4177fa3d020760f1ccab18c59abdc1"
                    ]
                },
                {
                    "command": [
                        "generalize (Z_eq_bool_correct (Fnum p) (- nNormMin radix precision)); case (Z_eq_bool (Fnum p) (- nNormMin radix precision)); intros H'1.",
                        "VernacExtend",
                        "731e9f50aa4e66694b90248c25a1e2931b1ac6d4"
                    ]
                },
                {
                    "command": [
                        "generalize (Z_eq_bool_correct (Fexp p) (- dExp b)); case (Z_eq_bool (Fexp p) (- dExp b)); intros H'2.",
                        "VernacExtend",
                        "9e1d5c4acec87d6378c96f74752af16727328b94"
                    ]
                },
                {
                    "command": [
                        "pattern p at 1 in |- *; replace p with (Float (Fnum p) (Fexp p)).",
                        "VernacExtend",
                        "ecfa8514f229344b3cf10921005d5f717fe70a2a"
                    ]
                },
                {
                    "command": [
                        "rewrite H'1; rewrite H'2.",
                        "VernacExtend",
                        "859aded9394f50360924ac6263024ea3a6abce79"
                    ]
                },
                {
                    "command": [
                        "rewrite FSuccSimpl3; auto with arith.",
                        "VernacExtend",
                        "932e171640adb276130b3badfbe45f5d7a1beed7"
                    ]
                },
                {
                    "command": [
                        "intros H'3 H'4.",
                        "VernacExtend",
                        "7e89429bccb17ca06ae3048eafa07dcbd915b5be"
                    ]
                },
                {
                    "command": [
                        "replace p with (Fshift radix (Zabs_nat (Fexp q - Fexp p)) q).",
                        "VernacExtend",
                        "8f63cca86695653c25e8b7e59e566a15a22acc0c"
                    ]
                },
                {
                    "command": [
                        "unfold FtoRradix in |- *; rewrite FshiftCorrect; auto with real.",
                        "VernacExtend",
                        "2191906f2acd1f5f5d36fa8f6fc5c5d7495cf783"
                    ]
                },
                {
                    "command": [
                        "cut (Fexp (Fshift radix (Zabs_nat (Fexp q - Fexp p)) q) = Fexp p); [ intros Eq0 | idtac ].",
                        "VernacExtend",
                        "9969f0ac9149afe75e48d239d9fbfb871bca5466"
                    ]
                },
                {
                    "command": [
                        "apply floatEq; auto.",
                        "VernacExtend",
                        "c847d668791777965ba33ea03f8c58569a27270b"
                    ]
                },
                {
                    "command": [
                        "apply sym_equal; apply Zeq_Zs; auto.",
                        "VernacExtend",
                        "544e17021308978edade2290da1b51e46f4f11f9"
                    ]
                },
                {
                    "command": [
                        "apply Rle_Fexp_eq_Zle with (radix := radix); auto with arith.",
                        "VernacExtend",
                        "9e010cb344e056de0a32c5c87a8ac13a89edb70c"
                    ]
                },
                {
                    "command": [
                        "rewrite FshiftCorrect; auto.",
                        "VernacExtend",
                        "a32fc58b728c0efc747f4947893df95ea3a250c0"
                    ]
                },
                {
                    "command": [
                        "replace (Zsucc (Fnum p)) with (Fnum (FSucc p)); auto.",
                        "VernacExtend",
                        "acb272b342167c09aaadfbbd67dafadfa4b17a74"
                    ]
                },
                {
                    "command": [
                        "pattern p at 2 in |- *; replace p with (Float (Fnum p) (Fexp p)).",
                        "VernacExtend",
                        "3410205309fe320e0609b78fa016d133ea7fba88"
                    ]
                },
                {
                    "command": [
                        "rewrite H'1; rewrite H'2.",
                        "VernacExtend",
                        "859aded9394f50360924ac6263024ea3a6abce79"
                    ]
                },
                {
                    "command": [
                        "rewrite FSuccSimpl3; auto with arith.",
                        "VernacExtend",
                        "932e171640adb276130b3badfbe45f5d7a1beed7"
                    ]
                },
                {
                    "command": [
                        "rewrite <- H'2.",
                        "VernacExtend",
                        "409add0b46217267974c0b7b31d42067fd38e324"
                    ]
                },
                {
                    "command": [
                        "apply Rlt_Fexp_eq_Zlt with (radix := radix); auto with arith.",
                        "VernacExtend",
                        "dc2533501e2fa226a679c90172ce0c4803cac522"
                    ]
                },
                {
                    "command": [
                        "rewrite FshiftCorrect; auto.",
                        "VernacExtend",
                        "a32fc58b728c0efc747f4947893df95ea3a250c0"
                    ]
                },
                {
                    "command": [
                        "rewrite H'2; auto.",
                        "VernacExtend",
                        "2c2cd2310e6d6c30ae4cdcfb896dfe62bf83deb1"
                    ]
                },
                {
                    "command": [
                        "case p; simpl in |- *; auto.",
                        "VernacExtend",
                        "462cf32570b2f74af162d0c2057c21dde8a661bf"
                    ]
                },
                {
                    "command": [
                        "pattern p at 1 in |- *; replace p with (Float (Fnum p) (Fexp p)).",
                        "VernacExtend",
                        "ecfa8514f229344b3cf10921005d5f717fe70a2a"
                    ]
                },
                {
                    "command": [
                        "rewrite H'1; rewrite H'2.",
                        "VernacExtend",
                        "859aded9394f50360924ac6263024ea3a6abce79"
                    ]
                },
                {
                    "command": [
                        "rewrite FSuccSimpl3; auto with arith.",
                        "VernacExtend",
                        "932e171640adb276130b3badfbe45f5d7a1beed7"
                    ]
                },
                {
                    "command": [
                        "case p; simpl in |- *; auto.",
                        "VernacExtend",
                        "462cf32570b2f74af162d0c2057c21dde8a661bf"
                    ]
                },
                {
                    "command": [
                        "unfold Fshift in |- *; simpl in |- *.",
                        "VernacExtend",
                        "bc2226e4b5a4ef5bbaea414d285c81f30a1eb932"
                    ]
                },
                {
                    "command": [
                        "rewrite inj_abs; auto with zarith.",
                        "VernacExtend",
                        "d832d70d6f4177fa3d020760f1ccab18c59abdc1"
                    ]
                },
                {
                    "command": [
                        "case p; simpl in |- *; auto.",
                        "VernacExtend",
                        "462cf32570b2f74af162d0c2057c21dde8a661bf"
                    ]
                },
                {
                    "command": [
                        "rewrite FSuccSimpl2; auto with arith.",
                        "VernacExtend",
                        "3d038bab3992cc340f1aa1a0350ab7bde3c222bc"
                    ]
                },
                {
                    "command": [
                        "intros H'3 H'4.",
                        "VernacExtend",
                        "7e89429bccb17ca06ae3048eafa07dcbd915b5be"
                    ]
                },
                {
                    "command": [
                        "unfold FtoRradix in |- *; rewrite <- FshiftCorrect with (n := 1) (x := p); auto.",
                        "VernacExtend",
                        "7e83128b90b142a8fa736401cc4098c124cfc483"
                    ]
                },
                {
                    "command": [
                        "replace (Fshift radix 1 p) with (Fshift radix (S (Zabs_nat (Fexp q - Fexp p))) q).",
                        "VernacExtend",
                        "d2e0ed87cf35158cb99469679c1ce45ad2c91d09"
                    ]
                },
                {
                    "command": [
                        "repeat rewrite FshiftCorrect; auto with real.",
                        "VernacExtend",
                        "29fa2d7a7eb918aabba2c0b44616f7ce297d2a67"
                    ]
                },
                {
                    "command": [
                        "cut (Fexp (Fshift radix (S (Zabs_nat (Fexp q - Fexp p))) q) = Fexp (Fshift radix 1 p)); [ intros Eq0 | idtac ].",
                        "VernacExtend",
                        "fd33ee8ed07bcb788c81b874de699b2cbfd60c6b"
                    ]
                },
                {
                    "command": [
                        "apply floatEq; auto.",
                        "VernacExtend",
                        "c847d668791777965ba33ea03f8c58569a27270b"
                    ]
                },
                {
                    "command": [
                        "apply sym_equal; apply Zeq_Zs; auto.",
                        "VernacExtend",
                        "544e17021308978edade2290da1b51e46f4f11f9"
                    ]
                },
                {
                    "command": [
                        "apply Rle_Fexp_eq_Zle with (radix := radix); auto with arith.",
                        "VernacExtend",
                        "9e010cb344e056de0a32c5c87a8ac13a89edb70c"
                    ]
                },
                {
                    "command": [
                        "repeat rewrite FshiftCorrect; auto.",
                        "VernacExtend",
                        "e02d2e61004981480c8d9e17c4cf3a012483a0d9"
                    ]
                },
                {
                    "command": [
                        "replace (Zsucc (Fnum (Fshift radix 1 p))) with (Fnum (FSucc p)); auto.",
                        "VernacExtend",
                        "640b2832253686e735052789dcefee1826af4ba4"
                    ]
                },
                {
                    "command": [
                        "apply Rlt_Fexp_eq_Zlt with (radix := radix); auto with arith.",
                        "VernacExtend",
                        "dc2533501e2fa226a679c90172ce0c4803cac522"
                    ]
                },
                {
                    "command": [
                        "repeat rewrite FshiftCorrect; auto.",
                        "VernacExtend",
                        "e02d2e61004981480c8d9e17c4cf3a012483a0d9"
                    ]
                },
                {
                    "command": [
                        "rewrite FSuccSimpl2; auto with arith.",
                        "VernacExtend",
                        "3d038bab3992cc340f1aa1a0350ab7bde3c222bc"
                    ]
                },
                {
                    "command": [
                        "rewrite FSuccSimpl2; auto with arith.",
                        "VernacExtend",
                        "3d038bab3992cc340f1aa1a0350ab7bde3c222bc"
                    ]
                },
                {
                    "command": [
                        "rewrite FSuccSimpl2; auto with arith.",
                        "VernacExtend",
                        "3d038bab3992cc340f1aa1a0350ab7bde3c222bc"
                    ]
                },
                {
                    "command": [
                        "unfold Fshift in |- *; simpl in |- *.",
                        "VernacExtend",
                        "bc2226e4b5a4ef5bbaea414d285c81f30a1eb932"
                    ]
                },
                {
                    "command": [
                        "rewrite Z.mul_1_r; auto.",
                        "VernacExtend",
                        "172397270c9b7d2bf54e376435887c50b2182efd"
                    ]
                },
                {
                    "command": [
                        "unfold pPred in |- *; rewrite (PosNormMin radix) with (precision := precision); auto with zarith; rewrite H'1.",
                        "VernacExtend",
                        "780b7d3b557d682fd3502bb62a539044d2a43228"
                    ]
                },
                {
                    "command": [
                        "rewrite Zopp_mult_distr_l_reverse.",
                        "VernacExtend",
                        "1f0b9be4fa18bab508e40ac78d2944a3a3bf0e3c"
                    ]
                },
                {
                    "command": [
                        "rewrite (Zmult_comm radix).",
                        "VernacExtend",
                        "28a9ef3ef5d0e9cc3814f2a015c6249affc35491"
                    ]
                },
                {
                    "command": [
                        "apply Zopp_Zpred_Zs.",
                        "VernacExtend",
                        "434c7b563695b2d72e95298441f6b4841720020e"
                    ]
                },
                {
                    "command": [
                        "unfold Fshift in |- *; simpl in |- *.",
                        "VernacExtend",
                        "bc2226e4b5a4ef5bbaea414d285c81f30a1eb932"
                    ]
                },
                {
                    "command": [
                        "replace (Zpos (P_of_succ_nat (Zabs_nat (Fexp q - Fexp p)))) with (Zsucc (Fexp q - Fexp p)).",
                        "VernacExtend",
                        "eeddbf6c88ab54e0f0b28c0164ce8246afc416cc"
                    ]
                },
                {
                    "command": [
                        "unfold Zsucc, Zpred in |- *; ring.",
                        "VernacExtend",
                        "4348ec6a48b11a36f64ea16ed86af1be9d059dde"
                    ]
                },
                {
                    "command": [
                        "rewrite <- (inj_abs (Fexp q - Fexp p)); auto with zarith.",
                        "VernacExtend",
                        "861f4e90d4cad8614ee1fa7efc7f10ec3da10062"
                    ]
                },
                {
                    "command": [
                        "rewrite <- inj_S; simpl in |- *; auto.",
                        "VernacExtend",
                        "dcc472ba0c8ccc5c15d946ede54aeb558a5f533d"
                    ]
                },
                {
                    "command": [
                        "rewrite inj_abs; auto with zarith.",
                        "VernacExtend",
                        "d832d70d6f4177fa3d020760f1ccab18c59abdc1"
                    ]
                },
                {
                    "command": [
                        "rewrite FSuccSimpl4; auto.",
                        "VernacExtend",
                        "2d47fc6c82e2413444df3c5559a82c7fc117184e"
                    ]
                },
                {
                    "command": [
                        "intros H'2 H'3.",
                        "VernacExtend",
                        "004d2e67d96853e9bd2659ad722ab0eed6430a06"
                    ]
                },
                {
                    "command": [
                        "replace p with (Fshift radix (Zabs_nat (Fexp q - Fexp p)) q).",
                        "VernacExtend",
                        "8f63cca86695653c25e8b7e59e566a15a22acc0c"
                    ]
                },
                {
                    "command": [
                        "unfold FtoRradix in |- *; rewrite FshiftCorrect; auto with real.",
                        "VernacExtend",
                        "2191906f2acd1f5f5d36fa8f6fc5c5d7495cf783"
                    ]
                },
                {
                    "command": [
                        "cut (Fexp (Fshift radix (Zabs_nat (Fexp q - Fexp p)) q) = Fexp p); [ intros Eq0 | idtac ].",
                        "VernacExtend",
                        "9969f0ac9149afe75e48d239d9fbfb871bca5466"
                    ]
                },
                {
                    "command": [
                        "apply floatEq; auto.",
                        "VernacExtend",
                        "c847d668791777965ba33ea03f8c58569a27270b"
                    ]
                },
                {
                    "command": [
                        "apply sym_equal; apply Zeq_Zs; auto.",
                        "VernacExtend",
                        "544e17021308978edade2290da1b51e46f4f11f9"
                    ]
                },
                {
                    "command": [
                        "apply Rle_Fexp_eq_Zle with (radix := radix); auto with arith.",
                        "VernacExtend",
                        "9e010cb344e056de0a32c5c87a8ac13a89edb70c"
                    ]
                },
                {
                    "command": [
                        "rewrite FshiftCorrect; auto.",
                        "VernacExtend",
                        "a32fc58b728c0efc747f4947893df95ea3a250c0"
                    ]
                },
                {
                    "command": [
                        "replace (Zsucc (Fnum p)) with (Fnum (FSucc p)); auto.",
                        "VernacExtend",
                        "acb272b342167c09aaadfbbd67dafadfa4b17a74"
                    ]
                },
                {
                    "command": [
                        "rewrite FSuccSimpl4; auto.",
                        "VernacExtend",
                        "2d47fc6c82e2413444df3c5559a82c7fc117184e"
                    ]
                },
                {
                    "command": [
                        "apply Rlt_Fexp_eq_Zlt with (radix := radix); auto with arith.",
                        "VernacExtend",
                        "dc2533501e2fa226a679c90172ce0c4803cac522"
                    ]
                },
                {
                    "command": [
                        "repeat rewrite FshiftCorrect; auto.",
                        "VernacExtend",
                        "e02d2e61004981480c8d9e17c4cf3a012483a0d9"
                    ]
                },
                {
                    "command": [
                        "rewrite FSuccSimpl4; auto.",
                        "VernacExtend",
                        "2d47fc6c82e2413444df3c5559a82c7fc117184e"
                    ]
                },
                {
                    "command": [
                        "unfold Fshift in |- *; simpl in |- *.",
                        "VernacExtend",
                        "bc2226e4b5a4ef5bbaea414d285c81f30a1eb932"
                    ]
                },
                {
                    "command": [
                        "rewrite inj_abs; auto with zarith.",
                        "VernacExtend",
                        "d832d70d6f4177fa3d020760f1ccab18c59abdc1"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "FNSuccCanonic",
            "line_nb": 628,
            "steps": [
                {
                    "command": [
                        "intros a H'; unfold FNSucc in |- *.",
                        "VernacExtend",
                        "4f8cd16520dfe7190af0aa5a6639baac8aba68a8"
                    ]
                },
                {
                    "command": [
                        "apply FSuccCanonic; auto with float.",
                        "VernacExtend",
                        "f371894f20064533d937c3e45dc6de16e40ee2bd"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "FNSuccLt",
            "line_nb": 632,
            "steps": [
                {
                    "command": [
                        "intros a; unfold FNSucc in |- *.",
                        "VernacExtend",
                        "984e341d3db849b0dcf54c77ef6be713165234f5"
                    ]
                },
                {
                    "command": [
                        "unfold FtoRradix in |- *; rewrite <- (FnormalizeCorrect _ radixMoreThanOne b precision a).",
                        "VernacExtend",
                        "ce79997f4c990db5af329edf24a3e8f034519d81"
                    ]
                },
                {
                    "command": [
                        "apply FSuccLt; auto.",
                        "VernacExtend",
                        "bffe14293ac497aa5e23792addde1959650d5030"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "FNSuccProp",
            "line_nb": 637,
            "steps": [
                {
                    "command": [
                        "intros x y H' H'0 H'1; unfold FNSucc in |- *.",
                        "VernacExtend",
                        "7f5970c8e86398ccdc40122d6c85adae80fca642"
                    ]
                },
                {
                    "command": [
                        "replace (FtoRradix y) with (FtoRradix (Fnormalize radix b precision y)).",
                        "VernacExtend",
                        "7ee22e9f96d884cf2e07cae1588a34248ed2080d"
                    ]
                },
                {
                    "command": [
                        "apply FSuccProp; auto with float.",
                        "VernacExtend",
                        "7fba76eb0490959e401bc293867e316d8c56b77e"
                    ]
                },
                {
                    "command": [
                        "unfold FtoRradix in |- *; repeat rewrite FnormalizeCorrect; auto.",
                        "VernacExtend",
                        "6a3ad66886a4e76962cbb26347d7beef4330a14a"
                    ]
                },
                {
                    "command": [
                        "unfold FtoRradix in |- *; repeat rewrite FnormalizeCorrect; auto.",
                        "VernacExtend",
                        "6a3ad66886a4e76962cbb26347d7beef4330a14a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "FNSuccEq",
            "line_nb": 644,
            "steps": [
                {
                    "command": [
                        "intros p q H' H'0 H'1; unfold FNSucc in |- *.",
                        "VernacExtend",
                        "3223fbd1f4935f8fc661c32da783c6e42ca4fe0a"
                    ]
                },
                {
                    "command": [
                        "replace (Fnormalize radix b precision p) with (Fnormalize radix b precision q); auto.",
                        "VernacExtend",
                        "91ea9eb8a857f1216a70004d883db4fb5616a928"
                    ]
                },
                {
                    "command": [
                        "apply FcanonicUnique with (radix := radix) (b := b) (precision := precision); auto with float.",
                        "VernacExtend",
                        "9ce145d83abb357dd9229d5425ca381191e6dc92"
                    ]
                },
                {
                    "command": [
                        "repeat rewrite FnormalizeCorrect; auto.",
                        "VernacExtend",
                        "1ef2ab074a009b9c68c82a1455e654578cbb61d1"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "nNormMimLtvNum",
            "line_nb": 661,
            "steps": [
                {
                    "command": [
                        "unfold pPred in |- *; rewrite PosNormMin with (radix := radix) (precision := precision); auto with zarith.",
                        "VernacExtend",
                        "0bf9d69379e05b8a31dd60c1e5b00aca61b07b6c"
                    ]
                },
                {
                    "command": [
                        "apply Zlt_le_trans with (Zpred (2 * nNormMin radix precision)).",
                        "VernacExtend",
                        "3fe9c03b254bed391a1a6e0fe39349a36eb370bb"
                    ]
                },
                {
                    "command": [
                        "replace (Zpred (2 * nNormMin radix precision)) with (Zpred (nNormMin radix precision) + nNormMin radix precision)%Z; [ idtac | unfold Zpred in |- *; ring ].",
                        "VernacExtend",
                        "c0c6fafb39a8faf80ce3787071562dbbb671325d"
                    ]
                },
                {
                    "command": [
                        "pattern (nNormMin radix precision) at 1 in |- *; replace (nNormMin radix precision) with (0 + nNormMin radix precision)%Z; [ idtac | ring ].",
                        "VernacExtend",
                        "23195fc5bf0bd7bf1b2710439259cf611feef8b6"
                    ]
                },
                {
                    "command": [
                        "apply Zplus_lt_compat_r; auto.",
                        "VernacExtend",
                        "c2c5a927bb886cba3cac595f7823bb1571e3c4cb"
                    ]
                },
                {
                    "command": [
                        "apply Zlt_succ_pred.",
                        "VernacExtend",
                        "364bc9d34e39c0df90deb0cd94436e0c67078bc6"
                    ]
                },
                {
                    "command": [
                        "replace (Zsucc 0) with (Z_of_nat 1); [ idtac | simpl in |- *; auto ].",
                        "VernacExtend",
                        "6de85aff5c5e1a01684af8a5a3596b4170cff559"
                    ]
                },
                {
                    "command": [
                        "rewrite <- (Zpower_nat_O radix); unfold nNormMin in |- *.",
                        "VernacExtend",
                        "4f97fcb7efec1de59daeccace28d145ca9190660"
                    ]
                },
                {
                    "command": [
                        "apply Zpower_nat_monotone_lt.",
                        "VernacExtend",
                        "75d7edb1fc8f3548661e70d8223fa08f388aba59"
                    ]
                },
                {
                    "command": [
                        "assumption.",
                        "VernacExtend",
                        "41f0308313ff87e6ab2782f90d6021ec4b55d932"
                    ]
                },
                {
                    "command": [
                        "now apply lt_pred.",
                        "VernacExtend",
                        "e830754deef3b712b537e48acc6ea51ed70b9c9c"
                    ]
                },
                {
                    "command": [
                        "apply Zle_Zpred_Zpred.",
                        "VernacExtend",
                        "a602e5d0c609e47e56aa9bb27a07b8bd8f3dc750"
                    ]
                },
                {
                    "command": [
                        "apply Zle_Zmult_comp_r; auto with zarith.",
                        "VernacExtend",
                        "6df3ad18f4910f873061ef6fd03b5647e45f11b6"
                    ]
                },
                {
                    "command": [
                        "apply Z.lt_le_incl; apply nNormPos; auto with zarith.",
                        "VernacExtend",
                        "b93adb6acc83edef7d112974ded7097875e12c87"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "FSucFSucMid",
            "line_nb": 677,
            "steps": [
                {
                    "command": [
                        "intros p.",
                        "VernacExtend",
                        "223e3cb70cff95972873720780e7195aeb57b9fc"
                    ]
                },
                {
                    "command": [
                        "generalize (Z_eq_bool_correct (Fnum p) (- nNormMin radix precision)); case (Z_eq_bool (Fnum p) (- nNormMin radix precision)); intros H'1.",
                        "VernacExtend",
                        "731e9f50aa4e66694b90248c25a1e2931b1ac6d4"
                    ]
                },
                {
                    "command": [
                        "generalize (Z_eq_bool_correct (Fexp p) (- dExp b)); case (Z_eq_bool (Fexp p) (- dExp b)); intros H'2.",
                        "VernacExtend",
                        "9e1d5c4acec87d6378c96f74752af16727328b94"
                    ]
                },
                {
                    "command": [
                        "rewrite FSuccDiff2 with (2 := H'1); auto with arith.",
                        "VernacExtend",
                        "1dc628e7736833ca7f23e1e778d39b5e8051e0e6"
                    ]
                },
                {
                    "command": [
                        "replace p with (Float (Fnum p) (Fexp p)).",
                        "VernacExtend",
                        "b1a1495576d2d4bdee4e59af73d940f96cb8f29b"
                    ]
                },
                {
                    "command": [
                        "repeat (rewrite H'1; rewrite H'2).",
                        "VernacExtend",
                        "f14e7e0cc3af812bab7286695bca197bfabac38b"
                    ]
                },
                {
                    "command": [
                        "rewrite FSuccSimpl3; auto with arith.",
                        "VernacExtend",
                        "932e171640adb276130b3badfbe45f5d7a1beed7"
                    ]
                },
                {
                    "command": [
                        "rewrite FSuccDiff1 with (2 := pGivesBound); auto with arith.",
                        "VernacExtend",
                        "b1fedc3be1fb5a6ee1245a6b6a7e4c604cfa81f5"
                    ]
                },
                {
                    "command": [
                        "simpl in |- *; auto with zarith.",
                        "VernacExtend",
                        "61d3cdc6299cf8abf87703c074ca4503f0f27a12"
                    ]
                },
                {
                    "command": [
                        "apply floatEq; auto.",
                        "VernacExtend",
                        "c847d668791777965ba33ea03f8c58569a27270b"
                    ]
                },
                {
                    "command": [
                        "unfold FtoRradix in |- *; rewrite FSuccDiff3 with (x := p) (3 := pGivesBound); auto with arith.",
                        "VernacExtend",
                        "acdbad676aebadcd53e9f68fe97f3f793482f355"
                    ]
                },
                {
                    "command": [
                        "rewrite FSuccSimpl2; auto with arith.",
                        "VernacExtend",
                        "3d038bab3992cc340f1aa1a0350ab7bde3c222bc"
                    ]
                },
                {
                    "command": [
                        "rewrite FSuccDiff1; simpl in |- *; auto with arith.",
                        "VernacExtend",
                        "dfb39eb288107ddb01c77e8a62dc6b7057ed862b"
                    ]
                },
                {
                    "command": [
                        "apply Zlt_not_eq; auto.",
                        "VernacExtend",
                        "f0d8da9f3732d5275c5ffb65e9586dc7839ca172"
                    ]
                },
                {
                    "command": [
                        "apply Zlt_Zopp; auto.",
                        "VernacExtend",
                        "8fbeb9313d1ad507e37f0e89147f88a009dc7138"
                    ]
                },
                {
                    "command": [
                        "apply nNormMimLtvNum; auto.",
                        "VernacExtend",
                        "abe816f583300163b237784490e4a6ee409dd302"
                    ]
                },
                {
                    "command": [
                        "unfold FtoRradix in |- *; rewrite FSuccDiff1 with (x := p); simpl in |- *; auto with arith.",
                        "VernacExtend",
                        "6f4aaf37eb86c3e64d1d1e0f530b1d4373669d9d"
                    ]
                },
                {
                    "command": [
                        "generalize (Z_eq_bool_correct (Fnum p) (pPred (vNum b))); case (Z_eq_bool (Fnum p) (pPred (vNum b))); intros H'2.",
                        "VernacExtend",
                        "96a860fd5b223e07c6e2dea66b31c5a1d3b8f0ac"
                    ]
                },
                {
                    "command": [
                        "rewrite FSuccSimpl1; simpl in |- *; auto with arith.",
                        "VernacExtend",
                        "3b06ad8f2e3d8b71b3130a4d843267a1d8612a39"
                    ]
                },
                {
                    "command": [
                        "intros H'; case H'; auto.",
                        "VernacExtend",
                        "ab91036e51f7c3008a0c371720a2ca0e0735ece9"
                    ]
                },
                {
                    "command": [
                        "rewrite FSuccSimpl4; simpl in |- *; auto with arith.",
                        "VernacExtend",
                        "a20096989faaf982496d8aeed2c30d2ce18af12e"
                    ]
                },
                {
                    "command": [
                        "intros H' H'0.",
                        "VernacExtend",
                        "6376855f6f9f69f4159c0718a468e6033843b617"
                    ]
                },
                {
                    "command": [
                        "rewrite FSuccDiff1; simpl in |- *; auto with arith.",
                        "VernacExtend",
                        "dfb39eb288107ddb01c77e8a62dc6b7057ed862b"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "FNSuccFNSuccMid",
            "line_nb": 702,
            "steps": [
                {
                    "command": [
                        "intros p Fb; unfold FNSucc in |- *.",
                        "VernacExtend",
                        "914af5cd0f039f32f9864f90b2cca7b5ed91b318"
                    ]
                },
                {
                    "command": [
                        "intros H' H'0.",
                        "VernacExtend",
                        "6376855f6f9f69f4159c0718a468e6033843b617"
                    ]
                },
                {
                    "command": [
                        "rewrite FcanonicFnormalizeEq with (p := FSucc b radix precision (Fnormalize radix b precision p)); auto with float arith.",
                        "VernacExtend",
                        "d46a8b2e620569a972932937952b5717d22b5039"
                    ]
                },
                {
                    "command": [
                        "rewrite FSucFSucMid; auto.",
                        "VernacExtend",
                        "1deb24af6f667c988978dbe17af2c0ebabae4456"
                    ]
                },
                {
                    "command": [
                        "unfold FtoRradix in |- *; repeat rewrite Fminus_correct; auto with float arith.",
                        "VernacExtend",
                        "f1b3bb6149640fcf3ccf9bc5cd4ee873027de9dd"
                    ]
                },
                {
                    "command": [
                        "rewrite FnormalizeCorrect; auto.",
                        "VernacExtend",
                        "6ee35e1e3f3de05c34741ed20c27ff8ffe5da5da"
                    ]
                },
                {
                    "command": [
                        "apply Zlt_trans with 1%Z; auto with zarith.",
                        "VernacExtend",
                        "31fe79dd229b0a596cccb8b23d752848c7e28aef"
                    ]
                },
                {
                    "command": [
                        "apply Zlt_trans with 1%Z; auto with zarith.",
                        "VernacExtend",
                        "31fe79dd229b0a596cccb8b23d752848c7e28aef"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        }
    ]
}