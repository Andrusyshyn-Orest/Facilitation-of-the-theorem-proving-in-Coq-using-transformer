{
    "filename": "MSB.v",
    "coq_project": "float",
    "vernac_cmds": [
        [
            "Require Export Fprop.",
            "VernacRequire",
            "cc3385475689527f59feeff7cde507bf406d6bdc"
        ],
        [
            "Require Export Zdivides.",
            "VernacRequire",
            "a72fa83ed7a65007e4bbfba705bcbb745edb9bcb"
        ],
        [
            "Require Export Fnorm.",
            "VernacRequire",
            "ab8e69e3b98f6a8c0b6d6a4bae1c0bc183841546"
        ],
        [
            "Section mf.",
            "VernacBeginSection",
            "417769b9a152fe2aab85f4a15c501aed76e1bc92"
        ],
        [
            "Variable radix : Z.",
            "VernacAssumption",
            "2349b77d134e0c9bb013a8bdca0020ca16fc023b"
        ],
        [
            "Hypothesis radixMoreThanOne : (1 < radix)%Z.",
            "VernacAssumption",
            "f4d3774b2275f4c4c3af941091d4d99f9a2129aa"
        ],
        [
            "Let radixMoreThanZERO := Zlt_1_O _ (Zlt_le_weak _ _ radixMoreThanOne).",
            "VernacDefinition",
            "b73ccff345a4fc730c8134dcd05adb7f1928fae7"
        ],
        [
            "Hint Resolve radixMoreThanZERO: zarith.",
            "VernacHints",
            "5a4a320eb610749621ef38850390d7141dc0d330"
        ],
        [
            "Let FtoRradix := FtoR radix.",
            "VernacDefinition",
            "5aa29a9595c6e9e03b28c6d232299552ec761ad7"
        ],
        [
            "Local Coercion FtoRradix : float >-> R.",
            "VernacCoercion",
            "cec6b845059d434f72dda1a67638af64e1fb0628"
        ],
        [
            "Fixpoint maxDiv (v : Z) (p : nat) {struct p} : nat := match p with | O => 0 | S p' => match ZdividesP v (Zpower_nat radix p) with | left _ => p | right _ => maxDiv v p' end end.",
            "VernacFixpoint",
            "501bd4796ca79412d3a5ea2d327568b7a25e8f63"
        ],
        [
            "Theorem maxDivLess : forall (v : Z) (p : nat), maxDiv v p <= p.",
            "VernacStartTheoremProof",
            "4dc075c43e974beb842d04f60d3f66fd8ffafb17"
        ],
        [
            "intros v p; elim p; simpl in |- *; auto.",
            "VernacExtend",
            "ccb9687acbbb47b3e0a643cb31348579e34948a1"
        ],
        [
            "intros n H'; case (ZdividesP v (radix * Zpower_nat radix n)); auto.",
            "VernacExtend",
            "e4a04e4440507d49d7018f09a12d70710021826f"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Theorem maxDivLt : forall (v : Z) (p : nat), ~ Zdivides v (Zpower_nat radix p) -> maxDiv v p < p.",
            "VernacStartTheoremProof",
            "8a3bfcfdca16e162080b16a8995d870ee20ed78e"
        ],
        [
            "intros v p; case p; simpl in |- *; auto.",
            "VernacExtend",
            "99a13d29b4ded428b4c805ddadeed0d8e76816e3"
        ],
        [
            "intros H'; case H'.",
            "VernacExtend",
            "efae61a70db3a620f28bbd0472f7a9814adab1d0"
        ],
        [
            "apply Zdivides1.",
            "VernacExtend",
            "5a22472c3711ef244afa354d7e1057ce31ffa1c6"
        ],
        [
            "intros n H'; case (ZdividesP v (radix * Zpower_nat radix n)); auto.",
            "VernacExtend",
            "e4a04e4440507d49d7018f09a12d70710021826f"
        ],
        [
            "intros H'0; case H'; auto.",
            "VernacExtend",
            "dd06e899bd47753e1eaa7396df84e42b96b98cf9"
        ],
        [
            "intros H'0; generalize (maxDivLess v n); auto with arith.",
            "VernacExtend",
            "30229754f8817a499cd741696daff596e3248ad7"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Theorem maxDivCorrect : forall (v : Z) (p : nat), Zdivides v (Zpower_nat radix (maxDiv v p)).",
            "VernacStartTheoremProof",
            "61059b66e07279e104b4a98647915df193cf95c3"
        ],
        [
            "intros v p; elim p.",
            "VernacExtend",
            "b0b99a42ab8229708da6c7e2d96c7389b0cf4492"
        ],
        [
            "unfold maxDiv in |- *; rewrite Zpower_nat_O; auto.",
            "VernacExtend",
            "8e1cb35673d6dac24698fa58d199afb6a8c259b8"
        ],
        [
            "apply Zdivides1.",
            "VernacExtend",
            "5a22472c3711ef244afa354d7e1057ce31ffa1c6"
        ],
        [
            "simpl in |- *.",
            "VernacExtend",
            "1b93169f4cf876d207c1fab22a2347202ab48d85"
        ],
        [
            "intros n H'; case (ZdividesP v (radix * Zpower_nat radix n)); simpl in |- *; auto with zarith.",
            "VernacExtend",
            "a0c1126c52dd827f4fe9eeac6bce8676df47ebc4"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Theorem maxDivSimplAux : forall (v : Z) (p q : nat), p = maxDiv v (S (q + p)) -> p = maxDiv v (S p).",
            "VernacStartTheoremProof",
            "c6e2ae08e422bc1281c35a6ec50310adc1ecba9e"
        ],
        [
            "intros v p q; elim q.",
            "VernacExtend",
            "c38ced021a897fc853eaf4a75427b6b2954a077c"
        ],
        [
            "simpl in |- *; case (ZdividesP v (radix * Zpower_nat radix p)); auto.",
            "VernacExtend",
            "b078f34d85d2448bcdebe4a333fd285dab552040"
        ],
        [
            "intros n H' H'0.",
            "VernacExtend",
            "71facb0663b3e1d3aa8e5f87d9b18cab23691c15"
        ],
        [
            "apply H'; auto; clear H'.",
            "VernacExtend",
            "d7e488906b23958d3f055380b2c6ecafc0ca8628"
        ],
        [
            "simpl in H'0; generalize H'0; clear H'0.",
            "VernacExtend",
            "6f8c05735a7e7dffbaee46c019d1a501dbcad7f3"
        ],
        [
            "case (ZdividesP v (radix * (radix * Zpower_nat radix (n + p)))).",
            "VernacExtend",
            "709432e258f7882fc8992395c34c4d6cc8631121"
        ],
        [
            "2: simpl in |- *; auto.",
            "VernacExtend",
            "4e093beb492274de269b6adbd77d4a536c533a5e"
        ],
        [
            "intros H' H'0; Contradict H'0; auto with zarith.",
            "VernacExtend",
            "324507f9fdc91817b0637e621cec677d35c173bb"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Theorem maxDivSimpl : forall (v : Z) (p q : nat), p < q -> p = maxDiv v q -> p = maxDiv v (S p).",
            "VernacStartTheoremProof",
            "5dc67f32dbb19c533bdaad975cf8d122b9a657c2"
        ],
        [
            "intros v p q H' H'0.",
            "VernacExtend",
            "e08cd096ef4d0ef5f6ff3bc8062fbab2d295410c"
        ],
        [
            "apply maxDivSimplAux with (q := q - S p); auto.",
            "VernacExtend",
            "13ec7f2962793d5ec4d9e5edcd2d68e7d8624846"
        ],
        [
            "replace (S (q - S p + p)) with q; auto with zarith.",
            "VernacExtend",
            "edf15b16f716173d09ef6b0088ecdbe3d161ff23"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Theorem maxDivSimplInvAux : forall (v : Z) (p q : nat), p = maxDiv v (S p) -> p = maxDiv v (S (q + p)).",
            "VernacStartTheoremProof",
            "b73aabec71c57755198e592de3ea80f797461d5f"
        ],
        [
            "intros v p q H'; elim q.",
            "VernacExtend",
            "7a790a0319201b737668101ee9a298063760de60"
        ],
        [
            "simpl in |- *; auto.",
            "VernacExtend",
            "9b631374b1d3067f703fd99c5dc6e1e5c8405957"
        ],
        [
            "intros n; simpl in |- *.",
            "VernacExtend",
            "c9bc9576c30a76abb588820e7df3cc8f5fee8189"
        ],
        [
            "case (ZdividesP v (radix * Zpower_nat radix (n + p))); auto.",
            "VernacExtend",
            "95e79a5cd4420df65bd3019eadbf93d35795c5c9"
        ],
        [
            "case (ZdividesP v (radix * (radix * Zpower_nat radix (n + p)))); auto.",
            "VernacExtend",
            "4d1629f2f1ba072f6da8e964e4f984451242084a"
        ],
        [
            "intros H'0 H'1 H'2; Contradict H'2; auto with zarith.",
            "VernacExtend",
            "cbff9fa87ed9459230d69ca91a92c62562686c55"
        ],
        [
            "case (ZdividesP v (radix * (radix * Zpower_nat radix (n + p)))); auto.",
            "VernacExtend",
            "4d1629f2f1ba072f6da8e964e4f984451242084a"
        ],
        [
            "intros H'0 H'1 H'2; case H'1.",
            "VernacExtend",
            "bb057bf07b07c651093f186eb36b1db0df91cc21"
        ],
        [
            "case H'0; intros z1 Hz1; exists (radix * z1)%Z;rewrite Hz1.",
            "VernacExtend",
            "9496baf3eb8dc656ff02fddf98e4180426dcadb7"
        ],
        [
            "unfold Zpower_nat; simpl; ring.",
            "VernacExtend",
            "478c23d74e9e4d38dbb22a481abbe3c9211f720a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Theorem maxDivSimplInv : forall (v : Z) (p q : nat), p < q -> p = maxDiv v (S p) -> p = maxDiv v q.",
            "VernacStartTheoremProof",
            "86c4ab89e7cd0d1ca5ffb92445dbbd71848a1229"
        ],
        [
            "intros v p q H' H'0.",
            "VernacExtend",
            "e08cd096ef4d0ef5f6ff3bc8062fbab2d295410c"
        ],
        [
            "replace q with (S (q - S p + p)); auto with zarith.",
            "VernacExtend",
            "f7c65b332940ad0ff939d23683c7962c0c7d4313"
        ],
        [
            "apply maxDivSimplInvAux; auto.",
            "VernacExtend",
            "12b16a91e1b5b69c9ec2b527f6778ac47698b821"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Theorem maxDivUnique : forall (v : Z) (p : nat), p = maxDiv v (S p) -> Zdivides v (Zpower_nat radix p) /\\ ~ Zdivides v (Zpower_nat radix (S p)).",
            "VernacStartTheoremProof",
            "d854f32b165ec3e6662d7e1049ef4ab08e65c8e7"
        ],
        [
            "intros v p H'; split.",
            "VernacExtend",
            "47db12ad6c412c84d87462f3632e0897c90f9653"
        ],
        [
            "rewrite H'.",
            "VernacExtend",
            "232d4714354910d49fdbf1140eac1d26da075d17"
        ],
        [
            "apply maxDivCorrect; auto.",
            "VernacExtend",
            "a62b47737d89a3008afeb1a77a74c609df25f40c"
        ],
        [
            "red in |- *; intros H'0; generalize H'; clear H'.",
            "VernacExtend",
            "bc2040673b7cc31067a076bd06a151750484fb21"
        ],
        [
            "simpl in |- *.",
            "VernacExtend",
            "1b93169f4cf876d207c1fab22a2347202ab48d85"
        ],
        [
            "case (ZdividesP v (radix * Zpower_nat radix p)); simpl in |- *; auto.",
            "VernacExtend",
            "447834206d7745132c2b0a6a239452a186585239"
        ],
        [
            "intros H' H'1; Contradict H'1; auto with zarith.",
            "VernacExtend",
            "3c655a75fd314d189e2eaee88c7bef4c5a1c4db3"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Theorem maxDivUniqueDigit : forall v : Z, v <> 0 -> Zdivides v (Zpower_nat radix (maxDiv v (digit radix v))) /\\ ~ Zdivides v (Zpower_nat radix (S (maxDiv v (digit radix v)))).",
            "VernacStartTheoremProof",
            "1b4c922b80e13d095be60d86b42e87980d0f99d0"
        ],
        [
            "intros v H'.",
            "VernacExtend",
            "8d5fb2e8cfa471ca4aa854ec5be227720f408443"
        ],
        [
            "apply maxDivUnique; auto.",
            "VernacExtend",
            "f474b26c2b292b5673a3e70fe72103b56ef8de49"
        ],
        [
            "apply maxDivSimpl with (q := digit radix v); auto.",
            "VernacExtend",
            "4c3e425596708e8dd8be37b0c1088f7783138a94"
        ],
        [
            "apply maxDivLt; auto.",
            "VernacExtend",
            "4d13e1029945f047303b97cf52fd7548e1b551e0"
        ],
        [
            "apply NotDividesDigit; auto.",
            "VernacExtend",
            "3f04bf788eee0f9e6c12689f70a97b6a668771d2"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Theorem maxDivUniqueInverse : forall (v : Z) (p : nat), Zdivides v (Zpower_nat radix p) -> ~ Zdivides v (Zpower_nat radix (S p)) -> p = maxDiv v (S p).",
            "VernacStartTheoremProof",
            "21f413bda694dd53638cb25194e61143e19eed4d"
        ],
        [
            "intros v p H' H'0; simpl in |- *.",
            "VernacExtend",
            "0e9190cce6d781576bb905ba09ccc89c5ff332da"
        ],
        [
            "case (ZdividesP v (radix * Zpower_nat radix p)); auto.",
            "VernacExtend",
            "7703c549f5a8cd9232b8f9b508a1d3704eeef535"
        ],
        [
            "intros H'1; case H'0; simpl in |- *; auto.",
            "VernacExtend",
            "1ac513856aaf698065fe47e3bde7e4f513dabdbe"
        ],
        [
            "intros H'1.",
            "VernacExtend",
            "27d12cfd315031f2731cee2bf5ecf81dd7f6b369"
        ],
        [
            "generalize H'; case p; simpl in |- *; auto.",
            "VernacExtend",
            "0cf284e87c8f107e3c7e4d6cabf4ffe5d4408e9b"
        ],
        [
            "intros n H'2; case (ZdividesP v (radix * Zpower_nat radix n)); auto.",
            "VernacExtend",
            "e705bea2f6b0c91286f855c6ae3e977bf3524851"
        ],
        [
            "intros H'3; case H'3; auto.",
            "VernacExtend",
            "6e8423d135d48294478942551639798db3a67e96"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Theorem maxDivUniqueInverseDigit : forall (v : Z) (p : nat), v <> 0 -> Zdivides v (Zpower_nat radix p) -> ~ Zdivides v (Zpower_nat radix (S p)) -> p = maxDiv v (digit radix v).",
            "VernacStartTheoremProof",
            "7251bc635d3fa56bb09be972f47235416be3bf78"
        ],
        [
            "intros v p H' H'0 H'1.",
            "VernacExtend",
            "4b3dd11f36394dc24a7cf05af9f50a9aa2e4fa8a"
        ],
        [
            "apply maxDivSimplInv; auto.",
            "VernacExtend",
            "25e11421e22a641641aebb5f5649ab82c9e37861"
        ],
        [
            "2: apply maxDivUniqueInverse; auto.",
            "VernacExtend",
            "94980c88670d55310ae83e422fb449a632373fbd"
        ],
        [
            "apply Zpower_nat_anti_monotone_lt with (n := radix); auto.",
            "VernacExtend",
            "1b4150ee2fa229d4e8857dbe687f26dc4b10c77a"
        ],
        [
            "apply Zle_lt_trans with (m := Zabs v); auto.",
            "VernacExtend",
            "aa583fd5d00b32770fc0c0ddb389d97459978e16"
        ],
        [
            "rewrite <- (fun x => Zabs_eq (Zpower_nat radix x)); auto with zarith; apply ZDividesLe; auto.",
            "VernacExtend",
            "2e1790140887b5e1b2a28f03cc20e79a6bd7f431"
        ],
        [
            "apply digitMore; auto.",
            "VernacExtend",
            "9250e8d6d46458111bc910af79d02c7e921d34be"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Theorem maxDivPlus : forall (v : Z) (n : nat), v <> 0 -> maxDiv (v * Zpower_nat radix n) (digit radix v + n) = maxDiv v (digit radix v) + n.",
            "VernacStartTheoremProof",
            "14aebae1c5e52362d7937307ca6db9a60c072638"
        ],
        [
            "intros v n H.",
            "VernacExtend",
            "29a5ac4f179a3d6892d9af5c5cf3ceb70c1b0b28"
        ],
        [
            "replace (digit radix v + n) with (digit radix (v * Zpower_nat radix n)); auto.",
            "VernacExtend",
            "c2d9fc4f11227c136e524556a2cfa0aa4bd3a5d0"
        ],
        [
            "apply sym_equal.",
            "VernacExtend",
            "c17550e3f7c4c9c406c00d64da9614cfdcfa6161"
        ],
        [
            "apply maxDivUniqueInverseDigit; auto.",
            "VernacExtend",
            "31432b46b1a5f7c6b00affe44a26e525b9473c1f"
        ],
        [
            "red in |- *; intros Z1; case (Zmult_integral _ _ Z1); intros Z2.",
            "VernacExtend",
            "a81c6abf1067587ec61ce795583e818a5bbd1b58"
        ],
        [
            "case H; auto.",
            "VernacExtend",
            "0b39ac03ea00c6d2293da9883a569db11f432ebd"
        ],
        [
            "absurd (0 < Zpower_nat radix n)%Z; auto with zarith.",
            "VernacExtend",
            "27d7ba1d40c23508d22e5a34be417b9170b6d814"
        ],
        [
            "rewrite Zpower_nat_is_exp.",
            "VernacExtend",
            "230c5aec41f86b77ed64d26b6f0b8c9d1503c4ab"
        ],
        [
            "repeat rewrite (fun x : Z => Zmult_comm x (Zpower_nat radix n)).",
            "VernacExtend",
            "d52bb5c5b21028d8848a2956ad5369a9df84a7bd"
        ],
        [
            "apply ZdividesMult; auto.",
            "VernacExtend",
            "b282b1d32aba7b0b0e986dc6e47e71de1243dc16"
        ],
        [
            "case (maxDivUniqueDigit v); auto.",
            "VernacExtend",
            "53aed9d18103310ae68ca7a69d5842af4b78a64b"
        ],
        [
            "replace (S (maxDiv v (digit radix v) + n)) with (S (maxDiv v (digit radix v)) + n); auto.",
            "VernacExtend",
            "1f1e8ddc24b4c744bc28da1df28b41ede49c9cd2"
        ],
        [
            "rewrite Zpower_nat_is_exp.",
            "VernacExtend",
            "230c5aec41f86b77ed64d26b6f0b8c9d1503c4ab"
        ],
        [
            "repeat rewrite (fun x : Z => Zmult_comm x (Zpower_nat radix n)).",
            "VernacExtend",
            "d52bb5c5b21028d8848a2956ad5369a9df84a7bd"
        ],
        [
            "red in |- *; intros H'.",
            "VernacExtend",
            "f1f067c21ab428eb66f1e9d6fdfbbe25c6c0dec5"
        ],
        [
            "absurd (Zdivides v (Zpower_nat radix (S (maxDiv v (digit radix v))))).",
            "VernacExtend",
            "50d67b36368b6ac831cc549f199795b995fbc855"
        ],
        [
            "case (maxDivUniqueDigit v); auto.",
            "VernacExtend",
            "53aed9d18103310ae68ca7a69d5842af4b78a64b"
        ],
        [
            "apply ZdividesDiv with (p := Zpower_nat radix n); auto with zarith.",
            "VernacExtend",
            "076d83ddf0c038adac559fe948f99346bbf7bd8e"
        ],
        [
            "apply digitAdd; auto with zarith.",
            "VernacExtend",
            "d3d61f19331e79f7d6b5ccd7aa66af662e5c7448"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Definition LSB (x : float) := (Z_of_nat (maxDiv (Fnum x) (Fdigit radix x)) + Fexp x)%Z.",
            "VernacDefinition",
            "72f723e32755a4ce135941ac13a4e2e527c8f0c5"
        ],
        [
            "Theorem LSB_shift : forall (x : float) (n : nat), ~ is_Fzero x -> LSB x = LSB (Fshift radix n x).",
            "VernacStartTheoremProof",
            "34d48b40ae6f53ed85e23837d43a5bf48b643307"
        ],
        [
            "intros x n H'; unfold LSB, Fdigit in |- *; simpl in |- *.",
            "VernacExtend",
            "4d7bc7be2c017b3e6268ee43165d36f7479a72e7"
        ],
        [
            "rewrite digitAdd; auto with arith.",
            "VernacExtend",
            "c17195830a9f92183713edc5406a589037bb314c"
        ],
        [
            "rewrite maxDivPlus; auto.",
            "VernacExtend",
            "b6f73215633840344bae70dc16b85ce537783297"
        ],
        [
            "rewrite inj_plus; ring.",
            "VernacExtend",
            "6ca805ceda722fb2ad7f80430e098941a9cdc683"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Theorem LSB_comp : forall (x y : float) (n : nat), ~ is_Fzero x -> x = y :>R -> LSB x = LSB y.",
            "VernacStartTheoremProof",
            "05fae2f17446a34556d9939aee89ada61e8b711b"
        ],
        [
            "intros x y H' H'0 H'1.",
            "VernacExtend",
            "4c16d2c4f41f6714262c2724ba554938a9d738cd"
        ],
        [
            "case (FshiftCorrectSym radix) with (2 := H'1); auto.",
            "VernacExtend",
            "d840e087a4c401eebe34116b96e9b82979bcf3b2"
        ],
        [
            "intros m1 H'2; elim H'2; intros m2 E; clear H'2.",
            "VernacExtend",
            "fc5538e0f6ea7568c880ccec31e22d935c752f24"
        ],
        [
            "rewrite (LSB_shift x m1); auto.",
            "VernacExtend",
            "cfd6bc6c302b04baa55e5fdc7f32558763d022a3"
        ],
        [
            "rewrite E; auto.",
            "VernacExtend",
            "778a5942581efd020b739c3c70f5a25b2f502fe3"
        ],
        [
            "apply sym_equal; apply LSB_shift; auto.",
            "VernacExtend",
            "6a04a8939903e16fddab2e95a45ca66fb1545e97"
        ],
        [
            "apply (NisFzeroComp radix) with (x := x); auto.",
            "VernacExtend",
            "3e853275bf708703db6ee60a3eaa87ba3afd39f6"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Theorem maxDiv_opp : forall (v : Z) (p : nat), maxDiv v p = maxDiv (- v) p.",
            "VernacStartTheoremProof",
            "be22c33a77c5c431e96f22aee868bd3c5e0b123f"
        ],
        [
            "intros v p; elim p; simpl in |- *; auto.",
            "VernacExtend",
            "ccb9687acbbb47b3e0a643cb31348579e34948a1"
        ],
        [
            "intros n H; case (ZdividesP v (radix * Zpower_nat radix n)); case (ZdividesP (- v) (radix * Zpower_nat radix n)); auto.",
            "VernacExtend",
            "57e646bc83d4f221250777c86e9c819cc9eb32f7"
        ],
        [
            "intros Z1 Z2; case Z1.",
            "VernacExtend",
            "fa046bb0e0344446eac1e070496c77af6d87c421"
        ],
        [
            "case Z2; intros z1 Hz1; exists (- z1)%Z; rewrite Hz1; ring.",
            "VernacExtend",
            "404b603ca184a4260b4804217be3279c656daa49"
        ],
        [
            "intros Z1 Z2; case Z2.",
            "VernacExtend",
            "7efbb6e1534d2494e12f11b182b56713de486732"
        ],
        [
            "case Z1; intros z1 Hz1; exists (- z1)%Z.",
            "VernacExtend",
            "4825737946a80676199c65c50e21cfcffba25ea3"
        ],
        [
            "rewrite <- (Zopp_involutive v); rewrite Hz1; ring.",
            "VernacExtend",
            "405ff3a61c7e09c5c2bc0905c9ae51aea1e00d48"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Theorem LSB_opp : forall x : float, LSB x = LSB (Fopp x).",
            "VernacStartTheoremProof",
            "ba3e714aaa90f4db9f600ce980b01ae53622b5b6"
        ],
        [
            "intros x; unfold LSB in |- *; simpl in |- *.",
            "VernacExtend",
            "fdcb8d259dc7d9919bad053563c3f290070083e5"
        ],
        [
            "rewrite Fdigit_opp; auto.",
            "VernacExtend",
            "09f8ff5a423c08afee19ae5f5355b46f38cd6da8"
        ],
        [
            "rewrite maxDiv_opp; auto.",
            "VernacExtend",
            "8c0fc470a56001a56738369299b68bcf61d032cd"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Theorem maxDiv_abs : forall (v : Z) (p : nat), maxDiv v p = maxDiv (Zabs v) p.",
            "VernacStartTheoremProof",
            "a1905cbc9885a26cd69e2f00ee2f881fbba027b3"
        ],
        [
            "intros v p; elim p; simpl in |- *; auto.",
            "VernacExtend",
            "ccb9687acbbb47b3e0a643cb31348579e34948a1"
        ],
        [
            "intros n H; case (ZdividesP v (radix * Zpower_nat radix n)); case (ZdividesP (Zabs v) (radix * Zpower_nat radix n)); auto.",
            "VernacExtend",
            "a5aa86e4e5a6720c87d05e7ab1905ee5921f69fd"
        ],
        [
            "intros Z1 Z2; case Z1.",
            "VernacExtend",
            "fa046bb0e0344446eac1e070496c77af6d87c421"
        ],
        [
            "case Z2; intros z1 Hz1; exists (Zabs z1); rewrite Hz1.",
            "VernacExtend",
            "15054f07ba9b51df4bc379a04e6a2398afe824b6"
        ],
        [
            "rewrite Zabs_Zmult; f_equal.",
            "VernacExtend",
            "df4979fffcf0d95a5857ee205d402cc4d3431326"
        ],
        [
            "apply Zabs_eq.",
            "VernacExtend",
            "49010e3d49d17807661610454bf633de5de373d9"
        ],
        [
            "auto with zarith.",
            "VernacExtend",
            "23f42fd3236dcece4a40b3a666dce57fea69a9c0"
        ],
        [
            "intros Z1 Z2; case Z2.",
            "VernacExtend",
            "7efbb6e1534d2494e12f11b182b56713de486732"
        ],
        [
            "case Z1; intros z1 Hz1.",
            "VernacExtend",
            "dffebb700567d84d3b84fd36bbf4d305d8d786ed"
        ],
        [
            "case (Zle_or_lt v 0); intros Z4.",
            "VernacExtend",
            "69c718b54b7ca25fed02d8514c884b42ad44b68e"
        ],
        [
            "exists (- z1)%Z; rewrite <- (Zopp_involutive v); rewrite <- (Zabs_eq_opp v); auto; rewrite Hz1; ring.",
            "VernacExtend",
            "6a05a64e7df182639694310b0384f03c985dcd26"
        ],
        [
            "exists z1; rewrite <- (Zabs_eq v); auto with zarith; rewrite Hz1; ring.",
            "VernacExtend",
            "a4a0ab54306ccfff5403066e10282dc9d47c4a4f"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Theorem LSB_abs : forall x : float, LSB x = LSB (Fabs x).",
            "VernacStartTheoremProof",
            "01dedd567c0864e4dc69a72527bc0657e4df6a9e"
        ],
        [
            "intros x; unfold LSB in |- *; simpl in |- *.",
            "VernacExtend",
            "fdcb8d259dc7d9919bad053563c3f290070083e5"
        ],
        [
            "rewrite Fdigit_abs; auto.",
            "VernacExtend",
            "2150cd993627afc5a487bb94e1f18014d3444da3"
        ],
        [
            "rewrite maxDiv_abs; auto.",
            "VernacExtend",
            "9ead07d70ed6a551c9b37fea7f8dfafb7e40bc17"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Definition MSB (x : float) := Zpred (Z_of_nat (Fdigit radix x) + Fexp x).",
            "VernacDefinition",
            "f25b5026cf4d1aaaa407d7148072406c4c953b36"
        ],
        [
            "Theorem MSB_shift : forall (x : float) (n : nat), ~ is_Fzero x -> MSB x = MSB (Fshift radix n x).",
            "VernacStartTheoremProof",
            "39e34ec70ed34ee5dc36cd645d51e1f3714ce55a"
        ],
        [
            "intros; unfold MSB, Fshift, Fdigit in |- *; simpl in |- *.",
            "VernacExtend",
            "9022826cee3885234ad38ba3944ed7ce7adcc839"
        ],
        [
            "rewrite digitAdd; auto with zarith.",
            "VernacExtend",
            "20ee7928ba564aa252254ba3c01d5cd155dbd2de"
        ],
        [
            "rewrite inj_plus; unfold Zpred in |- *; ring.",
            "VernacExtend",
            "592f5e58fd96a1e19690ad1f4306a4275f338134"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Theorem MSB_comp : forall (x y : float) (n : nat), ~ is_Fzero x -> x = y :>R -> MSB x = MSB y.",
            "VernacStartTheoremProof",
            "877c76545ea8835d529177f47dc64194106c4bb2"
        ],
        [
            "intros x y H' H'0 H'1.",
            "VernacExtend",
            "4c16d2c4f41f6714262c2724ba554938a9d738cd"
        ],
        [
            "case (FshiftCorrectSym radix) with (2 := H'1); auto.",
            "VernacExtend",
            "d840e087a4c401eebe34116b96e9b82979bcf3b2"
        ],
        [
            "intros m1 H'2; elim H'2; intros m2 E; clear H'2.",
            "VernacExtend",
            "fc5538e0f6ea7568c880ccec31e22d935c752f24"
        ],
        [
            "rewrite (MSB_shift x m1); auto.",
            "VernacExtend",
            "3e33ee4354d9099fe17f86b4b66660c7bf5ef98d"
        ],
        [
            "rewrite E; auto.",
            "VernacExtend",
            "778a5942581efd020b739c3c70f5a25b2f502fe3"
        ],
        [
            "apply sym_equal; apply MSB_shift; auto.",
            "VernacExtend",
            "f15e8d1f6d42c605dbbe8f412ddb796c64c67ea6"
        ],
        [
            "apply (NisFzeroComp radix) with (x := x); auto.",
            "VernacExtend",
            "3e853275bf708703db6ee60a3eaa87ba3afd39f6"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Theorem MSB_opp : forall x : float, MSB x = MSB (Fopp x).",
            "VernacStartTheoremProof",
            "bb226634dc72c3f6e719ac5db37615f180063c13"
        ],
        [
            "intros x; unfold MSB in |- *; simpl in |- *.",
            "VernacExtend",
            "ab13f57065cf54b1dd4e8a53d30519381e043cd8"
        ],
        [
            "rewrite Fdigit_opp; auto.",
            "VernacExtend",
            "09f8ff5a423c08afee19ae5f5355b46f38cd6da8"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Theorem MSB_abs : forall x : float, MSB x = MSB (Fabs x).",
            "VernacStartTheoremProof",
            "00033b077f108a5838c2029640d55f3fc8f68c1a"
        ],
        [
            "intros x; unfold MSB in |- *; simpl in |- *.",
            "VernacExtend",
            "ab13f57065cf54b1dd4e8a53d30519381e043cd8"
        ],
        [
            "rewrite Fdigit_abs; auto.",
            "VernacExtend",
            "2150cd993627afc5a487bb94e1f18014d3444da3"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Theorem LSB_le_MSB : forall x : float, ~ is_Fzero x -> (LSB x <= MSB x)%Z.",
            "VernacStartTheoremProof",
            "770f2e93bfea6126c85d009a01dd1b68431f0b85"
        ],
        [
            "intros x H'; unfold LSB, MSB in |- *.",
            "VernacExtend",
            "3418cee62f8c8f48b51d1c5df30950266abd5650"
        ],
        [
            "apply Zle_Zpred.",
            "VernacExtend",
            "3453838680a22e4103d5d05a950ddef62d28d601"
        ],
        [
            "cut (maxDiv (Fnum x) (Fdigit radix x) < Fdigit radix x); auto with zarith.",
            "VernacExtend",
            "a5761a629923177f50a259c7f7629a44e6851b63"
        ],
        [
            "apply maxDivLt; auto.",
            "VernacExtend",
            "4d13e1029945f047303b97cf52fd7548e1b551e0"
        ],
        [
            "unfold Fdigit in |- *; apply NotDividesDigit; auto.",
            "VernacExtend",
            "b18676e1764eed3751768293d5fb38c90459898e"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Theorem Fexp_le_LSB : forall x : float, (Fexp x <= LSB x)%Z.",
            "VernacStartTheoremProof",
            "8c07f12231b0975d789f6b5bc9f39d2ae47c1ced"
        ],
        [
            "intros x; unfold LSB in |- *.",
            "VernacExtend",
            "677ec71eae846abbd89724ee29911d6787c1b99d"
        ],
        [
            "auto with zarith.",
            "VernacExtend",
            "23f42fd3236dcece4a40b3a666dce57fea69a9c0"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Theorem Ulp_Le_LSigB : forall x : float, (Float 1%nat (Fexp x) <= Float 1%nat (LSB x))%R.",
            "VernacStartTheoremProof",
            "6ab34453851345fc9d06425d30d8efd197f6c6cc"
        ],
        [
            "intros x; apply (oneExp_le radix); auto.",
            "VernacExtend",
            "021195c46ba88582971e8dfdbdfd8608f3a7531a"
        ],
        [
            "apply Fexp_le_LSB; auto.",
            "VernacExtend",
            "e2ef0d6a640e91f3d0a5c1a0c330f2f52eb1d7f2"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Theorem Fexp_le_MSB : forall x : float, ~ is_Fzero x -> (Fexp x <= MSB x)%Z.",
            "VernacStartTheoremProof",
            "9ef93ea4d51c127d190b02c6ee5a22eeb34ce33f"
        ],
        [
            "intros x H'; unfold MSB in |- *.",
            "VernacExtend",
            "a91cc1606f041688d7f9a45bfa4d057dff2bd719"
        ],
        [
            "cut (Fdigit radix x <> 0%Z :>Z); unfold Zpred in |- *; auto with zarith.",
            "VernacExtend",
            "36cb64e3dd8bc12344d0b43dca725e83c5c1c590"
        ],
        [
            "unfold Fdigit in |- *.",
            "VernacExtend",
            "2c1b7b2f3f520d25bcc18c2627ab51e602f9face"
        ],
        [
            "red in |- *; intros H'0; absurd (digit radix (Fnum x) = 0); auto with zarith.",
            "VernacExtend",
            "dfe200f7f82beea0934254f818fe868d2399cd06"
        ],
        [
            "apply not_eq_sym; apply lt_O_neq; apply digitNotZero; auto.",
            "VernacExtend",
            "db392e4793db7cff49739542a63dbe4ec4a25dd5"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Theorem MSB_le_abs : forall x : float, ~ is_Fzero x -> (Float 1%nat (MSB x) <= Fabs x)%R.",
            "VernacStartTheoremProof",
            "1964fee58cdffa1495a40fcc075af7861921a50e"
        ],
        [
            "intros x H'; unfold MSB, FtoRradix, FtoR in |- *; simpl in |- *.",
            "VernacExtend",
            "6845b1040e7c5f390abf9deff2833280e7756f1a"
        ],
        [
            "replace (Zpred (Fdigit radix x + Fexp x)) with (Zpred (Fdigit radix x) + Fexp x)%Z; [ idtac | unfold Zpred in |- *; ring ].",
            "VernacExtend",
            "20252e54ff373aea14a30d256a29373b24013520"
        ],
        [
            "rewrite powerRZ_add; auto with real zarith.",
            "VernacExtend",
            "464b630a39cda032263051881ad80da2fc959c8e"
        ],
        [
            "rewrite Rmult_1_l.",
            "VernacExtend",
            "1ba58092cf1ca2fa8155dfa9c64894290b0f39df"
        ],
        [
            "repeat rewrite (fun r : R => Rmult_comm r (powerRZ radix (Fexp x))).",
            "VernacExtend",
            "2bc250b9a313f46d84f8a51e4e3bc19da0a109f4"
        ],
        [
            "apply Rmult_le_compat_l; auto with real zarith.",
            "VernacExtend",
            "2159120b470d3288ccdd35583593b7da3195abd5"
        ],
        [
            "rewrite <- inj_pred; auto with real zarith.",
            "VernacExtend",
            "b621bc7f9b333b98e68bac9f3894899024c08aa1"
        ],
        [
            "rewrite <- Zpower_nat_Z_powerRZ; auto.",
            "VernacExtend",
            "6f1e9f39530a3b1184dd744614c05cf5560d6b5e"
        ],
        [
            "apply Rle_IZR; auto.",
            "VernacExtend",
            "76a3e0cc7927a5e9ae31a5ab1551aeefb9a77673"
        ],
        [
            "unfold Fdigit in |- *; auto with arith.",
            "VernacExtend",
            "0fc04b9e1e4a4b1f8d28531fc875d417c8c51ccf"
        ],
        [
            "apply digitLess; auto.",
            "VernacExtend",
            "6515bd6e2f4af01716bf2a6bf58e55ca8a836d29"
        ],
        [
            "unfold Fdigit in |- *.",
            "VernacExtend",
            "2c1b7b2f3f520d25bcc18c2627ab51e602f9face"
        ],
        [
            "apply not_eq_sym; apply lt_O_neq; apply digitNotZero; auto.",
            "VernacExtend",
            "db392e4793db7cff49739542a63dbe4ec4a25dd5"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Theorem abs_lt_MSB : forall x : float, (Fabs x < Float 1%nat (Zsucc (MSB x)))%R.",
            "VernacStartTheoremProof",
            "cc3bdf400d18eb2ddaf6db5817606af6252fe012"
        ],
        [
            "intros x.",
            "VernacExtend",
            "596d66edc70dae19981ed74f103fc0a865aec92c"
        ],
        [
            "rewrite (MSB_abs x).",
            "VernacExtend",
            "eb1687dc8d835256145a0bda2ed400260fbb6ee9"
        ],
        [
            "unfold MSB, FtoRradix, FtoR in |- *.",
            "VernacExtend",
            "3115edb89689ce501837f3e87a1d5a0ac9c4fa0e"
        ],
        [
            "rewrite <- Zsucc_pred; simpl in |- *.",
            "VernacExtend",
            "ec7147e1423a3a7fac4a19221ce19c992720b74c"
        ],
        [
            "rewrite powerRZ_add; auto with real zarith.",
            "VernacExtend",
            "464b630a39cda032263051881ad80da2fc959c8e"
        ],
        [
            "rewrite Rmult_1_l.",
            "VernacExtend",
            "1ba58092cf1ca2fa8155dfa9c64894290b0f39df"
        ],
        [
            "repeat rewrite (fun r : R => Rmult_comm r (powerRZ radix (Fexp x))).",
            "VernacExtend",
            "2bc250b9a313f46d84f8a51e4e3bc19da0a109f4"
        ],
        [
            "apply Rmult_lt_compat_l; auto with real zarith.",
            "VernacExtend",
            "69b09e9e45c47fab1e5c88967427c2a6bc6497ee"
        ],
        [
            "rewrite <- Zpower_nat_Z_powerRZ; auto with arith.",
            "VernacExtend",
            "0fd0ed50c3b52cc8ab620dfe94160155fb018cfc"
        ],
        [
            "apply Rlt_IZR.",
            "VernacExtend",
            "e467d4c1a59850f4e46f0361acb2bf3fda9af65b"
        ],
        [
            "unfold Fdigit in |- *; auto with arith.",
            "VernacExtend",
            "0fc04b9e1e4a4b1f8d28531fc875d417c8c51ccf"
        ],
        [
            "unfold Fabs in |- *; simpl in |- *.",
            "VernacExtend",
            "a283da421ab64a5985f9f7fdd0b699ab34bf9138"
        ],
        [
            "pattern (Zabs (Fnum x)) at 1 in |- *; rewrite <- (Zabs_eq (Zabs (Fnum x))); auto with zarith.",
            "VernacExtend",
            "e85702fef891d11cc8885724aaa645c0019ba552"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Theorem LSB_le_abs : forall x : float, ~ is_Fzero x -> (Float 1%nat (LSB x) <= Fabs x)%R.",
            "VernacStartTheoremProof",
            "0d9f3b3e3c0c3bd2d9fde6476112f875b03a25bf"
        ],
        [
            "intros x H'; apply Rle_trans with (FtoRradix (Float 1%nat (MSB x))).",
            "VernacExtend",
            "ad5d64b48acd2d3523838b51fee7a3ebe075719d"
        ],
        [
            "apply (oneExp_le radix); auto.",
            "VernacExtend",
            "436b6baf1dca89e7291abe01d04b96b2cb8870a7"
        ],
        [
            "apply LSB_le_MSB; auto.",
            "VernacExtend",
            "634e0120648392769414e990ed72764075bce4cb"
        ],
        [
            "apply MSB_le_abs; auto.",
            "VernacExtend",
            "99255ec49e5117c32f631c4b22ab1e346d507922"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Theorem MSB_monotoneAux : forall x y : float, (Fabs x <= Fabs y)%R -> Fexp x = Fexp y -> (MSB x <= MSB y)%Z.",
            "VernacStartTheoremProof",
            "d89cf991dadf35b5af68d407f6d1315816f3ebb9"
        ],
        [
            "intros x y H' H'0; unfold MSB in |- *.",
            "VernacExtend",
            "ce9ce3c80696417d435b138b80978f8f951a3996"
        ],
        [
            "rewrite <- H'0.",
            "VernacExtend",
            "e572fe7ef5a3adc5a4a0c6892b873d01c53ef2f5"
        ],
        [
            "cut (Fdigit radix x <= Fdigit radix y)%Z; [ unfold Zpred in |- *; auto with zarith | idtac ].",
            "VernacExtend",
            "86829b6ef8066b9d31cb3f9f852f31a797f55d56"
        ],
        [
            "unfold Fdigit in |- *; apply inj_le.",
            "VernacExtend",
            "9426e63a2c408b6024758a6eddbf04454e5ef09b"
        ],
        [
            "apply digit_monotone; auto.",
            "VernacExtend",
            "4bf4beb860eab1058003fc52920acf262e4e4f70"
        ],
        [
            "apply le_IZR.",
            "VernacExtend",
            "b9b46c6b2f4d4157bed90857db2b9c3ba33486ad"
        ],
        [
            "apply Rmult_le_reg_l with (r := powerRZ radix (Fexp x)); auto with real zarith.",
            "VernacExtend",
            "6179a3ab02304cf04759ec4e081f18fd0c5dc58f"
        ],
        [
            "repeat rewrite (Rmult_comm (powerRZ radix (Fexp x))); auto.",
            "VernacExtend",
            "3c698a325e3b70aa96dfe068f816b3aaee5f095f"
        ],
        [
            "pattern (Fexp x) at 2 in |- *; rewrite H'0; auto.",
            "VernacExtend",
            "edbdf90925b73016de4d4a80383293b8d35249a1"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Theorem MSB_monotone : forall x y : float, ~ is_Fzero x -> ~ is_Fzero y -> (Fabs x <= Fabs y)%R -> (MSB x <= MSB y)%Z.",
            "VernacStartTheoremProof",
            "ba71e447afd98f7127382da42824c93b09f837cf"
        ],
        [
            "intros x y H' H'0 H'1; rewrite (MSB_abs x); rewrite (MSB_abs y).",
            "VernacExtend",
            "537613477da2f454ac4e8f9eb69c67070592da80"
        ],
        [
            "case (Zle_or_lt (Fexp (Fabs x)) (Fexp (Fabs y))); simpl in |- *; intros Zle1.",
            "VernacExtend",
            "e2e01a5cdeea1df3ce13b9b277425715b16cae76"
        ],
        [
            "rewrite MSB_shift with (x := Fabs y) (n := Zabs_nat (Fexp (Fabs y) - Fexp (Fabs x))).",
            "VernacExtend",
            "610af5a7182e76a09821c32773cc80cdb4e237bc"
        ],
        [
            "apply MSB_monotoneAux; auto.",
            "VernacExtend",
            "5c4548305948de5ee362583d392f5a96e8eeb708"
        ],
        [
            "unfold FtoRradix in |- *; repeat rewrite Fabs_correct; auto with real arith.",
            "VernacExtend",
            "f797315a6ffd7dcf308a3575a1703d93bb450013"
        ],
        [
            "rewrite FshiftCorrect; auto with real arith.",
            "VernacExtend",
            "ba9944eaef197f63c7c3e3602fecd113b44fbdf3"
        ],
        [
            "repeat rewrite Fabs_correct; auto with real arith.",
            "VernacExtend",
            "168832fe5444e0c100ad0d3f455b3fcc9fd9ed24"
        ],
        [
            "repeat rewrite Rabs_Rabsolu; repeat rewrite <- Fabs_correct; auto with real arith.",
            "VernacExtend",
            "caad712765155aa8b60ca86440c199b2778ceb41"
        ],
        [
            "unfold Fshift in |- *; simpl in |- *.",
            "VernacExtend",
            "bc2226e4b5a4ef5bbaea414d285c81f30a1eb932"
        ],
        [
            "rewrite inj_abs; [ ring | auto with zarith ].",
            "VernacExtend",
            "9f20cfc6bc457c5ef916dbfeb4e191caa172b0d0"
        ],
        [
            "apply Fabs_Fzero; auto.",
            "VernacExtend",
            "6d9516ada811bc69b1ea082e8584a1cb03f4f4db"
        ],
        [
            "rewrite MSB_shift with (x := Fabs x) (n := Zabs_nat (Fexp (Fabs x) - Fexp (Fabs y))).",
            "VernacExtend",
            "01aecc5779bec67494e21a80c06b48ac91017acf"
        ],
        [
            "apply MSB_monotoneAux; auto.",
            "VernacExtend",
            "5c4548305948de5ee362583d392f5a96e8eeb708"
        ],
        [
            "unfold FtoRradix in |- *; repeat rewrite Fabs_correct; auto with real arith.",
            "VernacExtend",
            "f797315a6ffd7dcf308a3575a1703d93bb450013"
        ],
        [
            "rewrite FshiftCorrect; auto with real arith.",
            "VernacExtend",
            "ba9944eaef197f63c7c3e3602fecd113b44fbdf3"
        ],
        [
            "repeat rewrite Fabs_correct; auto with real arith.",
            "VernacExtend",
            "168832fe5444e0c100ad0d3f455b3fcc9fd9ed24"
        ],
        [
            "repeat rewrite Rabs_Rabsolu; repeat rewrite <- Fabs_correct; auto with real arith.",
            "VernacExtend",
            "caad712765155aa8b60ca86440c199b2778ceb41"
        ],
        [
            "unfold Fshift in |- *; simpl in |- *.",
            "VernacExtend",
            "bc2226e4b5a4ef5bbaea414d285c81f30a1eb932"
        ],
        [
            "rewrite inj_abs; [ ring | auto with zarith ].",
            "VernacExtend",
            "9f20cfc6bc457c5ef916dbfeb4e191caa172b0d0"
        ],
        [
            "apply Fabs_Fzero; auto.",
            "VernacExtend",
            "6d9516ada811bc69b1ea082e8584a1cb03f4f4db"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Theorem MSB_le_multAux : forall x y : float, ~ is_Fzero x -> ~ is_Fzero y -> (MSB x + MSB y <= MSB (Fmult x y))%Z.",
            "VernacStartTheoremProof",
            "06ec53350c40884f2d55e2f9b3c561fda9c8eb69"
        ],
        [
            "intros x y H' H'0; unfold MSB, Fmult, Fdigit in |- *; simpl in |- *.",
            "VernacExtend",
            "3822bdca30c52ccb5998335b502cc60c6be2f73f"
        ],
        [
            "replace (Zpred (digit radix (Fnum x) + Fexp x) + Zpred (digit radix (Fnum y) + Fexp y))%Z with (Zpred (digit radix (Fnum x) + Zpred (digit radix (Fnum y)) + (Fexp x + Fexp y))); [ idtac | unfold Zpred in |- *; ring ].",
            "VernacExtend",
            "0e2e16b679c2e17ec890121ba24be4c3853adc84"
        ],
        [
            "cut (digit radix (Fnum x) + Zpred (digit radix (Fnum y)) <= digit radix (Fnum x * Fnum y))%Z; [ unfold Zpred in |- *; auto with zarith | idtac ].",
            "VernacExtend",
            "4c7482faba3be1d2ab24a2bd647e45941971bee1"
        ],
        [
            "rewrite <- inj_pred; auto with float zarith; try rewrite <- inj_plus.",
            "VernacExtend",
            "78d2b4c546941e78583fb8828168142d4015771d"
        ],
        [
            "apply inj_le.",
            "VernacExtend",
            "ec9911979155489cc693701fb9837c3c6f77e46e"
        ],
        [
            "rewrite <- digitAdd; auto with zarith.",
            "VernacExtend",
            "4890376399403e4b5cc3f790585506d45c62a432"
        ],
        [
            "apply digit_monotone; auto with zarith.",
            "VernacExtend",
            "6599b462324275ec7ca62450f3d5632e71dfa19e"
        ],
        [
            "repeat rewrite Zabs_Zmult.",
            "VernacExtend",
            "4b7da0b8275268c7f3ee6a3b7ea19434419af5d5"
        ],
        [
            "apply Zle_Zmult_comp_l; auto with zarith.",
            "VernacExtend",
            "0a442d3268531835feca11bf21b34ab2eb26341b"
        ],
        [
            "rewrite (fun x => Zabs_eq (Zpower_nat radix x)); auto with zarith.",
            "VernacExtend",
            "7e071cac3a7e901b238c070ddda3bfcfa7cd1d07"
        ],
        [
            "apply not_eq_sym; apply lt_O_neq; apply digitNotZero; auto.",
            "VernacExtend",
            "db392e4793db7cff49739542a63dbe4ec4a25dd5"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Theorem MSB_le_mult : forall x y : float, ~ is_Fzero x -> ~ is_Fzero y -> (Fmult (Float 1%nat (MSB x)) (Float 1%nat (MSB y)) <= Float 1%nat (MSB (Fmult x y)))%R.",
            "VernacStartTheoremProof",
            "bd7866fe0b4f940805b60ec51d390313964b97e5"
        ],
        [
            "intros x y H' H'0.",
            "VernacExtend",
            "bbba823d81241c63a29479e1a1d6ea98ba519935"
        ],
        [
            "rewrite <- oneZplus.",
            "VernacExtend",
            "a0c5f586d58a0d271d8dcf7083014a8abe1de34f"
        ],
        [
            "apply (oneExp_le radix); auto.",
            "VernacExtend",
            "436b6baf1dca89e7291abe01d04b96b2cb8870a7"
        ],
        [
            "apply MSB_le_multAux; auto.",
            "VernacExtend",
            "cc932da81f9e99b6f29ce56d30be9fe2a50925c4"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Theorem mult_le_MSBAux : forall x y : float, ~ is_Fzero x -> ~ is_Fzero y -> (MSB (Fmult x y) <= Zsucc (MSB x + MSB y))%Z.",
            "VernacStartTheoremProof",
            "d524d2bb1532d0ced62b4cb17409a8057e0f13ba"
        ],
        [
            "intros x y H' H'0; unfold MSB, Fmult, Fdigit in |- *; simpl in |- *.",
            "VernacExtend",
            "3822bdca30c52ccb5998335b502cc60c6be2f73f"
        ],
        [
            "replace (Zsucc (Zpred (digit radix (Fnum x) + Fexp x) + Zpred (digit radix (Fnum y) + Fexp y))) with (Zpred (digit radix (Fnum x) + digit radix (Fnum y) + (Fexp x + Fexp y))); [ idtac | unfold Zpred, Zsucc in |- *; ring ].",
            "VernacExtend",
            "397179f7d2dd04682dce1cde537e1d03e3ac6065"
        ],
        [
            "cut (digit radix (Fnum x * Fnum y) <= digit radix (Fnum x) + digit radix (Fnum y))%Z; [ unfold Zpred in |- *; auto with zarith | idtac ].",
            "VernacExtend",
            "cc6c5ee64566d1d661464604e23560d67b4a0bd5"
        ],
        [
            "rewrite <- inj_plus.",
            "VernacExtend",
            "38264963460e784421807bb3298490bcd7d458f9"
        ],
        [
            "apply inj_le; auto.",
            "VernacExtend",
            "b08710801eed5cea461057559e1ea242f739628a"
        ],
        [
            "rewrite <- digitAdd; auto with arith.",
            "VernacExtend",
            "ef19f6266a4c7931fefb968336c99e3b88851bbf"
        ],
        [
            "apply digit_monotone; auto with arith.",
            "VernacExtend",
            "6d6c10c624c6f47880bad693205751c64f537ef8"
        ],
        [
            "repeat rewrite Zabs_Zmult.",
            "VernacExtend",
            "4b7da0b8275268c7f3ee6a3b7ea19434419af5d5"
        ],
        [
            "apply Zle_Zmult_comp_l; auto with zarith.",
            "VernacExtend",
            "0a442d3268531835feca11bf21b34ab2eb26341b"
        ],
        [
            "rewrite (fun x => Zabs_eq (Zpower_nat radix x)); auto with zarith.",
            "VernacExtend",
            "7e071cac3a7e901b238c070ddda3bfcfa7cd1d07"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Theorem mult_le_MSB : forall x y : float, ~ is_Fzero x -> ~ is_Fzero y -> (Float 1%nat (MSB (Fmult x y)) <= radix * Fmult (Float 1%nat (MSB x)) (Float 1%nat (MSB y)))%R.",
            "VernacStartTheoremProof",
            "87b38e2120f6fc83790f96830e053e65f092af8e"
        ],
        [
            "intros x y H' H'0; rewrite <- oneZplus.",
            "VernacExtend",
            "1704e6e8818e820e0791906170a82a4324a7b51c"
        ],
        [
            "replace (radix * Float 1%nat (MSB x + MSB y))%R with (FtoRradix (Float 1%nat (Zsucc (MSB x + MSB y)))).",
            "VernacExtend",
            "72c569d1d447e8dbfbe1283af9364000f0d2fee3"
        ],
        [
            "apply (oneExp_le radix); auto.",
            "VernacExtend",
            "436b6baf1dca89e7291abe01d04b96b2cb8870a7"
        ],
        [
            "apply mult_le_MSBAux; auto.",
            "VernacExtend",
            "a0d4386373951c4f2d1b744e73c1ad64188131ec"
        ],
        [
            "unfold FtoRradix, FtoR in |- *; simpl in |- *.",
            "VernacExtend",
            "85a3da1582165d92ceb7faef707de88822bccf1a"
        ],
        [
            "rewrite powerRZ_Zs; auto with real zarith; ring.",
            "VernacExtend",
            "055e37c209e2a0ca9dc7ef6b05e8ffefe2fb31ed"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Theorem MSB_mix : forall x y : float, ~ is_Fzero x -> ~ is_Fzero y -> (Fabs x * Float 1%nat (MSB y) < radix * (Fabs y * Float 1%nat (MSB x)))%R.",
            "VernacStartTheoremProof",
            "6f3824b4d6a58f0d2b19103a91c116a82753c129"
        ],
        [
            "intros x y H' H'0; rewrite (MSB_abs x); rewrite (MSB_abs y).",
            "VernacExtend",
            "888269e827b427e8f92b33483d88eec2bd75b475"
        ],
        [
            "apply Rle_lt_trans with (Fabs x * Fabs y)%R; auto with real.",
            "VernacExtend",
            "709ac6b747f3f1451498e1825e25f822a96d3801"
        ],
        [
            "apply Rmult_le_compat_l; auto with real.",
            "VernacExtend",
            "bf324a586bfbe5f57a13931b6a23d59d989b4278"
        ],
        [
            "unfold FtoRradix in |- *; rewrite Fabs_correct; auto with real arith.",
            "VernacExtend",
            "cca55fce1beeb39bc97095dc0bacd17dcc856dbe"
        ],
        [
            "rewrite <- MSB_abs; apply MSB_le_abs; auto.",
            "VernacExtend",
            "f1b6e7f9d96319299fd18a786fe12fb6b70f572b"
        ],
        [
            "rewrite (Rmult_comm (Fabs x)).",
            "VernacExtend",
            "f0eec95eabe394b835b209d3526c670718bb6714"
        ],
        [
            "replace (radix * (Fabs y * Float 1%nat (MSB (Fabs x))))%R with (Fabs y * (radix * Float 1%nat (MSB (Fabs x))))%R; [ idtac | ring ].",
            "VernacExtend",
            "c73fcb00135e72429ce802414c42f1687423c16d"
        ],
        [
            "apply Rmult_lt_compat_l; auto with real.",
            "VernacExtend",
            "3e7233511306c2ec2fb512cc9cfd2a7990f1f973"
        ],
        [
            "unfold FtoRradix, FtoR in |- *; simpl in |- *; auto with real arith.",
            "VernacExtend",
            "6d831f78faee4cc79bdbd9655c2655e43311e16f"
        ],
        [
            "rewrite Rmult_comm; replace 0%R with (powerRZ radix (Fexp y) * 0)%R; [ idtac | ring ].",
            "VernacExtend",
            "feabaaf8e7cef1f46377599c13d5a802eb350f06"
        ],
        [
            "apply Rmult_lt_compat_l; auto with real arith.",
            "VernacExtend",
            "2c95e3f10177f062380352d768090c173015e1d6"
        ],
        [
            "rewrite Zabs_absolu.",
            "VernacExtend",
            "aee34af9b92188e13050a86635be4fe3ff11c605"
        ],
        [
            "replace 0%R with (INR 0); [ idtac | simpl in |- *; auto ]; rewrite <- INR_IZR_INZ; apply INR_lt_nm.",
            "VernacExtend",
            "83eaaf2f221db95141eaed24cfc441d7667fd078"
        ],
        [
            "apply absolu_lt_nz; auto.",
            "VernacExtend",
            "b8588295bc2e784df434269b22381bfcd7b2d589"
        ],
        [
            "replace (radix * Float 1%nat (MSB (Fabs x)))%R with (FtoRradix (Float 1%nat (Zsucc (MSB (Fabs x))))).",
            "VernacExtend",
            "44c9fdcd8bd834ee1b931cc6d237257e68f74c6c"
        ],
        [
            "rewrite <- MSB_abs; apply abs_lt_MSB; auto.",
            "VernacExtend",
            "45df2ae542c7d8c538fe585151919d806660e1ae"
        ],
        [
            "unfold FtoRradix, FtoR in |- *; simpl in |- *.",
            "VernacExtend",
            "85a3da1582165d92ceb7faef707de88822bccf1a"
        ],
        [
            "rewrite powerRZ_Zs; auto with real zarith; ring.",
            "VernacExtend",
            "055e37c209e2a0ca9dc7ef6b05e8ffefe2fb31ed"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Theorem LSB_rep : forall x y : float, ~ is_Fzero y -> (LSB x <= LSB y)%Z -> exists z : Z, y = Float z (Fexp x) :>R.",
            "VernacStartTheoremProof",
            "d3de04da1beb790b111924d368806fc972efd660"
        ],
        [
            "intros x y H' H'0.",
            "VernacExtend",
            "bbba823d81241c63a29479e1a1d6ea98ba519935"
        ],
        [
            "case (Zle_or_lt (Fexp x) (Fexp y)); intros Zl1.",
            "VernacExtend",
            "4f08ab0b716484879465b5975b8f18bb9878808e"
        ],
        [
            "exists (Fnum y * Zpower_nat radix (Zabs_nat (Fexp y - Fexp x)))%Z.",
            "VernacExtend",
            "bbfdee641fe723d47b29719bdd1fcdd9ed9b51ee"
        ],
        [
            "pattern (Fexp x) at 2 in |- *; replace (Fexp x) with (Fexp y - Zabs_nat (Fexp y - Fexp x))%Z.",
            "VernacExtend",
            "8a419328c51d054409dc36251c465867fe6c0f7d"
        ],
        [
            "unfold FtoRradix in |- *; rewrite <- (FshiftCorrect radix) with (n := Zabs_nat (Fexp y - Fexp x)) (x := y); auto.",
            "VernacExtend",
            "6deb8ee6186626f31efcf30de39405d8bce88e52"
        ],
        [
            "rewrite inj_abs; try ring; auto with zarith.",
            "VernacExtend",
            "cdc62d34d5bcd76809c63f42c36aa7a53362a973"
        ],
        [
            "exists (Zquotient (Fnum y) (Zpower_nat radix (Zabs_nat (Fexp x - Fexp y)))).",
            "VernacExtend",
            "0b7a342b6ffcc4495dcd48e98af12a74da9b96f4"
        ],
        [
            "unfold FtoRradix in |- *; rewrite <- (FshiftCorrect radix) with (n := Zabs_nat (Fexp x - Fexp y)) (x := Float (Zquotient (Fnum y) (Zpower_nat radix (Zabs_nat (Fexp x - Fexp y)))) (Fexp x)); auto.",
            "VernacExtend",
            "caa69bdd89b2069ec91134e7f82b81721dc1539e"
        ],
        [
            "unfold Fshift in |- *; simpl in |- *.",
            "VernacExtend",
            "bc2226e4b5a4ef5bbaea414d285c81f30a1eb932"
        ],
        [
            "cut (0 <= Fexp x - Fexp y)%Z; [ intros Le1; repeat rewrite inj_abs | auto with zarith ]; auto.",
            "VernacExtend",
            "8b4a061672fbfb314658b19a98c27559b4a07fbe"
        ],
        [
            "unfold FtoR in |- *; simpl in |- *; auto.",
            "VernacExtend",
            "31aae83e26f2a4cd8ff80efd1d15ab2e7bcfd319"
        ],
        [
            "replace (Fexp x - (Fexp x - Fexp y))%Z with (Fexp y); [ idtac | ring ].",
            "VernacExtend",
            "a588b792276059ef6fdfb6a7e233716106f3aa5d"
        ],
        [
            "replace (Zquotient (Fnum y) (Zpower_nat radix (Zabs_nat (Fexp x - Fexp y))) * Zpower_nat radix (Zabs_nat (Fexp x - Fexp y)))%Z with ( Fnum y); auto.",
            "VernacExtend",
            "42c3a294567f178ce99643d928e285b2a22ea238"
        ],
        [
            "apply ZdividesZquotient; auto with zarith.",
            "VernacExtend",
            "89b12bba5c9ae388b339b50051799b29fbef401d"
        ],
        [
            "apply ZdividesTrans with (m := Zpower_nat radix (maxDiv (Fnum y) (Fdigit radix y))).",
            "VernacExtend",
            "5b952a0346904ad83be775c729bc332548d56d6d"
        ],
        [
            "apply maxDivCorrect.",
            "VernacExtend",
            "2687683fd58bcf63aa7248fb0dac70e056d933ab"
        ],
        [
            "apply ZdividesLessPow; auto.",
            "VernacExtend",
            "0ead436832653362fd366b99382277b2fe32e952"
        ],
        [
            "apply ZleLe.",
            "VernacExtend",
            "7846641b1931d643234276488bfb4481d91e9778"
        ],
        [
            "rewrite inj_abs; auto with zarith.",
            "VernacExtend",
            "d832d70d6f4177fa3d020760f1ccab18c59abdc1"
        ],
        [
            "apply Zplus_le_reg_l with (p := Fexp y).",
            "VernacExtend",
            "f0c03a5f8524d3d7f18c1c2e48cb09eda28d2591"
        ],
        [
            "apply Zle_trans with (LSB x).",
            "VernacExtend",
            "69006ddec3eaa21e3edf956db94b4d95822e6af5"
        ],
        [
            "replace (Fexp y + (Fexp x - Fexp y))%Z with (Fexp x); [ idtac | ring ].",
            "VernacExtend",
            "5b1e1cf1c4705109f362dd2a27041199843a1c40"
        ],
        [
            "apply Fexp_le_LSB.",
            "VernacExtend",
            "b989a59d82179838da63f998b54c97076e3ee8fc"
        ],
        [
            "rewrite Zplus_comm; auto.",
            "VernacExtend",
            "b2f0e16af728ec0074b407c287c890992b7b16ea"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Theorem LSB_rep_min : forall p : float, exists z : Z, p = Float z (LSB p) :>R.",
            "VernacStartTheoremProof",
            "44573ac59210d4f6957ef2fb536dff7476ec4402"
        ],
        [
            "intros p; exists (Zquotient (Fnum p) (Zpower_nat radix (Zabs_nat (LSB p - Fexp p)))).",
            "VernacExtend",
            "dc5cf13163720201764c6d779a330aab2097d866"
        ],
        [
            "unfold FtoRradix, FtoR, LSB in |- *; simpl in |- *.",
            "VernacExtend",
            "fcef7ece95332c4df08c4e1e61917b8b41bd9f37"
        ],
        [
            "rewrite powerRZ_add; auto with real zarith.",
            "VernacExtend",
            "464b630a39cda032263051881ad80da2fc959c8e"
        ],
        [
            "rewrite <- Rmult_assoc.",
            "VernacExtend",
            "34da3c50cde53c179a4908b1329a459071245c05"
        ],
        [
            "replace (maxDiv (Fnum p) (Fdigit radix p) + Fexp p - Fexp p)%Z with (Z_of_nat (maxDiv (Fnum p) (Fdigit radix p))); auto.",
            "VernacExtend",
            "6a994af919b683e494d0c3ea971bb794685829f0"
        ],
        [
            "rewrite absolu_INR.",
            "VernacExtend",
            "5604994e6eaecaf09b0ebf28e787d62e33997efc"
        ],
        [
            "rewrite <- Zpower_nat_Z_powerRZ; auto with zarith.",
            "VernacExtend",
            "e4b7b4406768bdb883cc6cef0ff1fe3e9efd51bd"
        ],
        [
            "rewrite <- Rmult_IZR.",
            "VernacExtend",
            "77ff9e5d0697bdc5f92b38cf0c531b2d80b04bc3"
        ],
        [
            "rewrite <- ZdividesZquotient; auto with zarith.",
            "VernacExtend",
            "cfc76b69f417fb02ed864bf3cf32b0e875770beb"
        ],
        [
            "apply maxDivCorrect.",
            "VernacExtend",
            "2687683fd58bcf63aa7248fb0dac70e056d933ab"
        ],
        [
            "ring.",
            "VernacExtend",
            "baadd9fc4c175005af409bb466fcea9fab25b4e6"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "End mf.",
            "VernacEndSegment",
            "370c233b50a99165270173da3a344b245bb55b3d"
        ]
    ],
    "proofs": [
        {
            "name": "maxDivLess",
            "line_nb": 11,
            "steps": [
                {
                    "command": [
                        "intros v p; elim p; simpl in |- *; auto.",
                        "VernacExtend",
                        "ccb9687acbbb47b3e0a643cb31348579e34948a1"
                    ]
                },
                {
                    "command": [
                        "intros n H'; case (ZdividesP v (radix * Zpower_nat radix n)); auto.",
                        "VernacExtend",
                        "e4a04e4440507d49d7018f09a12d70710021826f"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "maxDivLt",
            "line_nb": 15,
            "steps": [
                {
                    "command": [
                        "intros v p; case p; simpl in |- *; auto.",
                        "VernacExtend",
                        "99a13d29b4ded428b4c805ddadeed0d8e76816e3"
                    ]
                },
                {
                    "command": [
                        "intros H'; case H'.",
                        "VernacExtend",
                        "efae61a70db3a620f28bbd0472f7a9814adab1d0"
                    ]
                },
                {
                    "command": [
                        "apply Zdivides1.",
                        "VernacExtend",
                        "5a22472c3711ef244afa354d7e1057ce31ffa1c6"
                    ]
                },
                {
                    "command": [
                        "intros n H'; case (ZdividesP v (radix * Zpower_nat radix n)); auto.",
                        "VernacExtend",
                        "e4a04e4440507d49d7018f09a12d70710021826f"
                    ]
                },
                {
                    "command": [
                        "intros H'0; case H'; auto.",
                        "VernacExtend",
                        "dd06e899bd47753e1eaa7396df84e42b96b98cf9"
                    ]
                },
                {
                    "command": [
                        "intros H'0; generalize (maxDivLess v n); auto with arith.",
                        "VernacExtend",
                        "30229754f8817a499cd741696daff596e3248ad7"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "maxDivCorrect",
            "line_nb": 23,
            "steps": [
                {
                    "command": [
                        "intros v p; elim p.",
                        "VernacExtend",
                        "b0b99a42ab8229708da6c7e2d96c7389b0cf4492"
                    ]
                },
                {
                    "command": [
                        "unfold maxDiv in |- *; rewrite Zpower_nat_O; auto.",
                        "VernacExtend",
                        "8e1cb35673d6dac24698fa58d199afb6a8c259b8"
                    ]
                },
                {
                    "command": [
                        "apply Zdivides1.",
                        "VernacExtend",
                        "5a22472c3711ef244afa354d7e1057ce31ffa1c6"
                    ]
                },
                {
                    "command": [
                        "simpl in |- *.",
                        "VernacExtend",
                        "1b93169f4cf876d207c1fab22a2347202ab48d85"
                    ]
                },
                {
                    "command": [
                        "intros n H'; case (ZdividesP v (radix * Zpower_nat radix n)); simpl in |- *; auto with zarith.",
                        "VernacExtend",
                        "a0c1126c52dd827f4fe9eeac6bce8676df47ebc4"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "maxDivSimpl",
            "line_nb": 40,
            "steps": [
                {
                    "command": [
                        "intros v p q H' H'0.",
                        "VernacExtend",
                        "e08cd096ef4d0ef5f6ff3bc8062fbab2d295410c"
                    ]
                },
                {
                    "command": [
                        "apply maxDivSimplAux with (q := q - S p); auto.",
                        "VernacExtend",
                        "13ec7f2962793d5ec4d9e5edcd2d68e7d8624846"
                    ]
                },
                {
                    "command": [
                        "replace (S (q - S p + p)) with q; auto with zarith.",
                        "VernacExtend",
                        "edf15b16f716173d09ef6b0088ecdbe3d161ff23"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "maxDivSimplInvAux",
            "line_nb": 45,
            "steps": [
                {
                    "command": [
                        "intros v p q H'; elim q.",
                        "VernacExtend",
                        "7a790a0319201b737668101ee9a298063760de60"
                    ]
                },
                {
                    "command": [
                        "simpl in |- *; auto.",
                        "VernacExtend",
                        "9b631374b1d3067f703fd99c5dc6e1e5c8405957"
                    ]
                },
                {
                    "command": [
                        "intros n; simpl in |- *.",
                        "VernacExtend",
                        "c9bc9576c30a76abb588820e7df3cc8f5fee8189"
                    ]
                },
                {
                    "command": [
                        "case (ZdividesP v (radix * Zpower_nat radix (n + p))); auto.",
                        "VernacExtend",
                        "95e79a5cd4420df65bd3019eadbf93d35795c5c9"
                    ]
                },
                {
                    "command": [
                        "case (ZdividesP v (radix * (radix * Zpower_nat radix (n + p)))); auto.",
                        "VernacExtend",
                        "4d1629f2f1ba072f6da8e964e4f984451242084a"
                    ]
                },
                {
                    "command": [
                        "intros H'0 H'1 H'2; Contradict H'2; auto with zarith.",
                        "VernacExtend",
                        "cbff9fa87ed9459230d69ca91a92c62562686c55"
                    ]
                },
                {
                    "command": [
                        "case (ZdividesP v (radix * (radix * Zpower_nat radix (n + p)))); auto.",
                        "VernacExtend",
                        "4d1629f2f1ba072f6da8e964e4f984451242084a"
                    ]
                },
                {
                    "command": [
                        "intros H'0 H'1 H'2; case H'1.",
                        "VernacExtend",
                        "bb057bf07b07c651093f186eb36b1db0df91cc21"
                    ]
                },
                {
                    "command": [
                        "case H'0; intros z1 Hz1; exists (radix * z1)%Z;rewrite Hz1.",
                        "VernacExtend",
                        "9496baf3eb8dc656ff02fddf98e4180426dcadb7"
                    ]
                },
                {
                    "command": [
                        "unfold Zpower_nat; simpl; ring.",
                        "VernacExtend",
                        "478c23d74e9e4d38dbb22a481abbe3c9211f720a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "maxDivSimplInv",
            "line_nb": 57,
            "steps": [
                {
                    "command": [
                        "intros v p q H' H'0.",
                        "VernacExtend",
                        "e08cd096ef4d0ef5f6ff3bc8062fbab2d295410c"
                    ]
                },
                {
                    "command": [
                        "replace q with (S (q - S p + p)); auto with zarith.",
                        "VernacExtend",
                        "f7c65b332940ad0ff939d23683c7962c0c7d4313"
                    ]
                },
                {
                    "command": [
                        "apply maxDivSimplInvAux; auto.",
                        "VernacExtend",
                        "12b16a91e1b5b69c9ec2b527f6778ac47698b821"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "maxDivUnique",
            "line_nb": 62,
            "steps": [
                {
                    "command": [
                        "intros v p H'; split.",
                        "VernacExtend",
                        "47db12ad6c412c84d87462f3632e0897c90f9653"
                    ]
                },
                {
                    "command": [
                        "rewrite H'.",
                        "VernacExtend",
                        "232d4714354910d49fdbf1140eac1d26da075d17"
                    ]
                },
                {
                    "command": [
                        "apply maxDivCorrect; auto.",
                        "VernacExtend",
                        "a62b47737d89a3008afeb1a77a74c609df25f40c"
                    ]
                },
                {
                    "command": [
                        "red in |- *; intros H'0; generalize H'; clear H'.",
                        "VernacExtend",
                        "bc2040673b7cc31067a076bd06a151750484fb21"
                    ]
                },
                {
                    "command": [
                        "simpl in |- *.",
                        "VernacExtend",
                        "1b93169f4cf876d207c1fab22a2347202ab48d85"
                    ]
                },
                {
                    "command": [
                        "case (ZdividesP v (radix * Zpower_nat radix p)); simpl in |- *; auto.",
                        "VernacExtend",
                        "447834206d7745132c2b0a6a239452a186585239"
                    ]
                },
                {
                    "command": [
                        "intros H' H'1; Contradict H'1; auto with zarith.",
                        "VernacExtend",
                        "3c655a75fd314d189e2eaee88c7bef4c5a1c4db3"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "maxDivUniqueDigit",
            "line_nb": 71,
            "steps": [
                {
                    "command": [
                        "intros v H'.",
                        "VernacExtend",
                        "8d5fb2e8cfa471ca4aa854ec5be227720f408443"
                    ]
                },
                {
                    "command": [
                        "apply maxDivUnique; auto.",
                        "VernacExtend",
                        "f474b26c2b292b5673a3e70fe72103b56ef8de49"
                    ]
                },
                {
                    "command": [
                        "apply maxDivSimpl with (q := digit radix v); auto.",
                        "VernacExtend",
                        "4c3e425596708e8dd8be37b0c1088f7783138a94"
                    ]
                },
                {
                    "command": [
                        "apply maxDivLt; auto.",
                        "VernacExtend",
                        "4d13e1029945f047303b97cf52fd7548e1b551e0"
                    ]
                },
                {
                    "command": [
                        "apply NotDividesDigit; auto.",
                        "VernacExtend",
                        "3f04bf788eee0f9e6c12689f70a97b6a668771d2"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "maxDivUniqueInverse",
            "line_nb": 78,
            "steps": [
                {
                    "command": [
                        "intros v p H' H'0; simpl in |- *.",
                        "VernacExtend",
                        "0e9190cce6d781576bb905ba09ccc89c5ff332da"
                    ]
                },
                {
                    "command": [
                        "case (ZdividesP v (radix * Zpower_nat radix p)); auto.",
                        "VernacExtend",
                        "7703c549f5a8cd9232b8f9b508a1d3704eeef535"
                    ]
                },
                {
                    "command": [
                        "intros H'1; case H'0; simpl in |- *; auto.",
                        "VernacExtend",
                        "1ac513856aaf698065fe47e3bde7e4f513dabdbe"
                    ]
                },
                {
                    "command": [
                        "intros H'1.",
                        "VernacExtend",
                        "27d12cfd315031f2731cee2bf5ecf81dd7f6b369"
                    ]
                },
                {
                    "command": [
                        "generalize H'; case p; simpl in |- *; auto.",
                        "VernacExtend",
                        "0cf284e87c8f107e3c7e4d6cabf4ffe5d4408e9b"
                    ]
                },
                {
                    "command": [
                        "intros n H'2; case (ZdividesP v (radix * Zpower_nat radix n)); auto.",
                        "VernacExtend",
                        "e705bea2f6b0c91286f855c6ae3e977bf3524851"
                    ]
                },
                {
                    "command": [
                        "intros H'3; case H'3; auto.",
                        "VernacExtend",
                        "6e8423d135d48294478942551639798db3a67e96"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "maxDivPlus",
            "line_nb": 96,
            "steps": [
                {
                    "command": [
                        "intros v n H.",
                        "VernacExtend",
                        "29a5ac4f179a3d6892d9af5c5cf3ceb70c1b0b28"
                    ]
                },
                {
                    "command": [
                        "replace (digit radix v + n) with (digit radix (v * Zpower_nat radix n)); auto.",
                        "VernacExtend",
                        "c2d9fc4f11227c136e524556a2cfa0aa4bd3a5d0"
                    ]
                },
                {
                    "command": [
                        "apply sym_equal.",
                        "VernacExtend",
                        "c17550e3f7c4c9c406c00d64da9614cfdcfa6161"
                    ]
                },
                {
                    "command": [
                        "apply maxDivUniqueInverseDigit; auto.",
                        "VernacExtend",
                        "31432b46b1a5f7c6b00affe44a26e525b9473c1f"
                    ]
                },
                {
                    "command": [
                        "red in |- *; intros Z1; case (Zmult_integral _ _ Z1); intros Z2.",
                        "VernacExtend",
                        "a81c6abf1067587ec61ce795583e818a5bbd1b58"
                    ]
                },
                {
                    "command": [
                        "case H; auto.",
                        "VernacExtend",
                        "0b39ac03ea00c6d2293da9883a569db11f432ebd"
                    ]
                },
                {
                    "command": [
                        "absurd (0 < Zpower_nat radix n)%Z; auto with zarith.",
                        "VernacExtend",
                        "27d7ba1d40c23508d22e5a34be417b9170b6d814"
                    ]
                },
                {
                    "command": [
                        "rewrite Zpower_nat_is_exp.",
                        "VernacExtend",
                        "230c5aec41f86b77ed64d26b6f0b8c9d1503c4ab"
                    ]
                },
                {
                    "command": [
                        "repeat rewrite (fun x : Z => Zmult_comm x (Zpower_nat radix n)).",
                        "VernacExtend",
                        "d52bb5c5b21028d8848a2956ad5369a9df84a7bd"
                    ]
                },
                {
                    "command": [
                        "apply ZdividesMult; auto.",
                        "VernacExtend",
                        "b282b1d32aba7b0b0e986dc6e47e71de1243dc16"
                    ]
                },
                {
                    "command": [
                        "case (maxDivUniqueDigit v); auto.",
                        "VernacExtend",
                        "53aed9d18103310ae68ca7a69d5842af4b78a64b"
                    ]
                },
                {
                    "command": [
                        "replace (S (maxDiv v (digit radix v) + n)) with (S (maxDiv v (digit radix v)) + n); auto.",
                        "VernacExtend",
                        "1f1e8ddc24b4c744bc28da1df28b41ede49c9cd2"
                    ]
                },
                {
                    "command": [
                        "rewrite Zpower_nat_is_exp.",
                        "VernacExtend",
                        "230c5aec41f86b77ed64d26b6f0b8c9d1503c4ab"
                    ]
                },
                {
                    "command": [
                        "repeat rewrite (fun x : Z => Zmult_comm x (Zpower_nat radix n)).",
                        "VernacExtend",
                        "d52bb5c5b21028d8848a2956ad5369a9df84a7bd"
                    ]
                },
                {
                    "command": [
                        "red in |- *; intros H'.",
                        "VernacExtend",
                        "f1f067c21ab428eb66f1e9d6fdfbbe25c6c0dec5"
                    ]
                },
                {
                    "command": [
                        "absurd (Zdivides v (Zpower_nat radix (S (maxDiv v (digit radix v))))).",
                        "VernacExtend",
                        "50d67b36368b6ac831cc549f199795b995fbc855"
                    ]
                },
                {
                    "command": [
                        "case (maxDivUniqueDigit v); auto.",
                        "VernacExtend",
                        "53aed9d18103310ae68ca7a69d5842af4b78a64b"
                    ]
                },
                {
                    "command": [
                        "apply ZdividesDiv with (p := Zpower_nat radix n); auto with zarith.",
                        "VernacExtend",
                        "076d83ddf0c038adac559fe948f99346bbf7bd8e"
                    ]
                },
                {
                    "command": [
                        "apply digitAdd; auto with zarith.",
                        "VernacExtend",
                        "d3d61f19331e79f7d6b5ccd7aa66af662e5c7448"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "LSB_shift",
            "line_nb": 118,
            "steps": [
                {
                    "command": [
                        "intros x n H'; unfold LSB, Fdigit in |- *; simpl in |- *.",
                        "VernacExtend",
                        "4d7bc7be2c017b3e6268ee43165d36f7479a72e7"
                    ]
                },
                {
                    "command": [
                        "rewrite digitAdd; auto with arith.",
                        "VernacExtend",
                        "c17195830a9f92183713edc5406a589037bb314c"
                    ]
                },
                {
                    "command": [
                        "rewrite maxDivPlus; auto.",
                        "VernacExtend",
                        "b6f73215633840344bae70dc16b85ce537783297"
                    ]
                },
                {
                    "command": [
                        "rewrite inj_plus; ring.",
                        "VernacExtend",
                        "6ca805ceda722fb2ad7f80430e098941a9cdc683"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "LSB_comp",
            "line_nb": 124,
            "steps": [
                {
                    "command": [
                        "intros x y H' H'0 H'1.",
                        "VernacExtend",
                        "4c16d2c4f41f6714262c2724ba554938a9d738cd"
                    ]
                },
                {
                    "command": [
                        "case (FshiftCorrectSym radix) with (2 := H'1); auto.",
                        "VernacExtend",
                        "d840e087a4c401eebe34116b96e9b82979bcf3b2"
                    ]
                },
                {
                    "command": [
                        "intros m1 H'2; elim H'2; intros m2 E; clear H'2.",
                        "VernacExtend",
                        "fc5538e0f6ea7568c880ccec31e22d935c752f24"
                    ]
                },
                {
                    "command": [
                        "rewrite (LSB_shift x m1); auto.",
                        "VernacExtend",
                        "cfd6bc6c302b04baa55e5fdc7f32558763d022a3"
                    ]
                },
                {
                    "command": [
                        "rewrite E; auto.",
                        "VernacExtend",
                        "778a5942581efd020b739c3c70f5a25b2f502fe3"
                    ]
                },
                {
                    "command": [
                        "apply sym_equal; apply LSB_shift; auto.",
                        "VernacExtend",
                        "6a04a8939903e16fddab2e95a45ca66fb1545e97"
                    ]
                },
                {
                    "command": [
                        "apply (NisFzeroComp radix) with (x := x); auto.",
                        "VernacExtend",
                        "3e853275bf708703db6ee60a3eaa87ba3afd39f6"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "maxDiv_opp",
            "line_nb": 133,
            "steps": [
                {
                    "command": [
                        "intros v p; elim p; simpl in |- *; auto.",
                        "VernacExtend",
                        "ccb9687acbbb47b3e0a643cb31348579e34948a1"
                    ]
                },
                {
                    "command": [
                        "intros n H; case (ZdividesP v (radix * Zpower_nat radix n)); case (ZdividesP (- v) (radix * Zpower_nat radix n)); auto.",
                        "VernacExtend",
                        "57e646bc83d4f221250777c86e9c819cc9eb32f7"
                    ]
                },
                {
                    "command": [
                        "intros Z1 Z2; case Z1.",
                        "VernacExtend",
                        "fa046bb0e0344446eac1e070496c77af6d87c421"
                    ]
                },
                {
                    "command": [
                        "case Z2; intros z1 Hz1; exists (- z1)%Z; rewrite Hz1; ring.",
                        "VernacExtend",
                        "404b603ca184a4260b4804217be3279c656daa49"
                    ]
                },
                {
                    "command": [
                        "intros Z1 Z2; case Z2.",
                        "VernacExtend",
                        "7efbb6e1534d2494e12f11b182b56713de486732"
                    ]
                },
                {
                    "command": [
                        "case Z1; intros z1 Hz1; exists (- z1)%Z.",
                        "VernacExtend",
                        "4825737946a80676199c65c50e21cfcffba25ea3"
                    ]
                },
                {
                    "command": [
                        "rewrite <- (Zopp_involutive v); rewrite Hz1; ring.",
                        "VernacExtend",
                        "405ff3a61c7e09c5c2bc0905c9ae51aea1e00d48"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "LSB_opp",
            "line_nb": 142,
            "steps": [
                {
                    "command": [
                        "intros x; unfold LSB in |- *; simpl in |- *.",
                        "VernacExtend",
                        "fdcb8d259dc7d9919bad053563c3f290070083e5"
                    ]
                },
                {
                    "command": [
                        "rewrite Fdigit_opp; auto.",
                        "VernacExtend",
                        "09f8ff5a423c08afee19ae5f5355b46f38cd6da8"
                    ]
                },
                {
                    "command": [
                        "rewrite maxDiv_opp; auto.",
                        "VernacExtend",
                        "8c0fc470a56001a56738369299b68bcf61d032cd"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "maxDiv_abs",
            "line_nb": 147,
            "steps": [
                {
                    "command": [
                        "intros v p; elim p; simpl in |- *; auto.",
                        "VernacExtend",
                        "ccb9687acbbb47b3e0a643cb31348579e34948a1"
                    ]
                },
                {
                    "command": [
                        "intros n H; case (ZdividesP v (radix * Zpower_nat radix n)); case (ZdividesP (Zabs v) (radix * Zpower_nat radix n)); auto.",
                        "VernacExtend",
                        "a5aa86e4e5a6720c87d05e7ab1905ee5921f69fd"
                    ]
                },
                {
                    "command": [
                        "intros Z1 Z2; case Z1.",
                        "VernacExtend",
                        "fa046bb0e0344446eac1e070496c77af6d87c421"
                    ]
                },
                {
                    "command": [
                        "case Z2; intros z1 Hz1; exists (Zabs z1); rewrite Hz1.",
                        "VernacExtend",
                        "15054f07ba9b51df4bc379a04e6a2398afe824b6"
                    ]
                },
                {
                    "command": [
                        "rewrite Zabs_Zmult; f_equal.",
                        "VernacExtend",
                        "df4979fffcf0d95a5857ee205d402cc4d3431326"
                    ]
                },
                {
                    "command": [
                        "apply Zabs_eq.",
                        "VernacExtend",
                        "49010e3d49d17807661610454bf633de5de373d9"
                    ]
                },
                {
                    "command": [
                        "auto with zarith.",
                        "VernacExtend",
                        "23f42fd3236dcece4a40b3a666dce57fea69a9c0"
                    ]
                },
                {
                    "command": [
                        "intros Z1 Z2; case Z2.",
                        "VernacExtend",
                        "7efbb6e1534d2494e12f11b182b56713de486732"
                    ]
                },
                {
                    "command": [
                        "case Z1; intros z1 Hz1.",
                        "VernacExtend",
                        "dffebb700567d84d3b84fd36bbf4d305d8d786ed"
                    ]
                },
                {
                    "command": [
                        "case (Zle_or_lt v 0); intros Z4.",
                        "VernacExtend",
                        "69c718b54b7ca25fed02d8514c884b42ad44b68e"
                    ]
                },
                {
                    "command": [
                        "exists (- z1)%Z; rewrite <- (Zopp_involutive v); rewrite <- (Zabs_eq_opp v); auto; rewrite Hz1; ring.",
                        "VernacExtend",
                        "6a05a64e7df182639694310b0384f03c985dcd26"
                    ]
                },
                {
                    "command": [
                        "exists z1; rewrite <- (Zabs_eq v); auto with zarith; rewrite Hz1; ring.",
                        "VernacExtend",
                        "a4a0ab54306ccfff5403066e10282dc9d47c4a4f"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "LSB_abs",
            "line_nb": 161,
            "steps": [
                {
                    "command": [
                        "intros x; unfold LSB in |- *; simpl in |- *.",
                        "VernacExtend",
                        "fdcb8d259dc7d9919bad053563c3f290070083e5"
                    ]
                },
                {
                    "command": [
                        "rewrite Fdigit_abs; auto.",
                        "VernacExtend",
                        "2150cd993627afc5a487bb94e1f18014d3444da3"
                    ]
                },
                {
                    "command": [
                        "rewrite maxDiv_abs; auto.",
                        "VernacExtend",
                        "9ead07d70ed6a551c9b37fea7f8dfafb7e40bc17"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "MSB_shift",
            "line_nb": 167,
            "steps": [
                {
                    "command": [
                        "intros; unfold MSB, Fshift, Fdigit in |- *; simpl in |- *.",
                        "VernacExtend",
                        "9022826cee3885234ad38ba3944ed7ce7adcc839"
                    ]
                },
                {
                    "command": [
                        "rewrite digitAdd; auto with zarith.",
                        "VernacExtend",
                        "20ee7928ba564aa252254ba3c01d5cd155dbd2de"
                    ]
                },
                {
                    "command": [
                        "rewrite inj_plus; unfold Zpred in |- *; ring.",
                        "VernacExtend",
                        "592f5e58fd96a1e19690ad1f4306a4275f338134"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "MSB_comp",
            "line_nb": 172,
            "steps": [
                {
                    "command": [
                        "intros x y H' H'0 H'1.",
                        "VernacExtend",
                        "4c16d2c4f41f6714262c2724ba554938a9d738cd"
                    ]
                },
                {
                    "command": [
                        "case (FshiftCorrectSym radix) with (2 := H'1); auto.",
                        "VernacExtend",
                        "d840e087a4c401eebe34116b96e9b82979bcf3b2"
                    ]
                },
                {
                    "command": [
                        "intros m1 H'2; elim H'2; intros m2 E; clear H'2.",
                        "VernacExtend",
                        "fc5538e0f6ea7568c880ccec31e22d935c752f24"
                    ]
                },
                {
                    "command": [
                        "rewrite (MSB_shift x m1); auto.",
                        "VernacExtend",
                        "3e33ee4354d9099fe17f86b4b66660c7bf5ef98d"
                    ]
                },
                {
                    "command": [
                        "rewrite E; auto.",
                        "VernacExtend",
                        "778a5942581efd020b739c3c70f5a25b2f502fe3"
                    ]
                },
                {
                    "command": [
                        "apply sym_equal; apply MSB_shift; auto.",
                        "VernacExtend",
                        "f15e8d1f6d42c605dbbe8f412ddb796c64c67ea6"
                    ]
                },
                {
                    "command": [
                        "apply (NisFzeroComp radix) with (x := x); auto.",
                        "VernacExtend",
                        "3e853275bf708703db6ee60a3eaa87ba3afd39f6"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "MSB_opp",
            "line_nb": 181,
            "steps": [
                {
                    "command": [
                        "intros x; unfold MSB in |- *; simpl in |- *.",
                        "VernacExtend",
                        "ab13f57065cf54b1dd4e8a53d30519381e043cd8"
                    ]
                },
                {
                    "command": [
                        "rewrite Fdigit_opp; auto.",
                        "VernacExtend",
                        "09f8ff5a423c08afee19ae5f5355b46f38cd6da8"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "MSB_abs",
            "line_nb": 185,
            "steps": [
                {
                    "command": [
                        "intros x; unfold MSB in |- *; simpl in |- *.",
                        "VernacExtend",
                        "ab13f57065cf54b1dd4e8a53d30519381e043cd8"
                    ]
                },
                {
                    "command": [
                        "rewrite Fdigit_abs; auto.",
                        "VernacExtend",
                        "2150cd993627afc5a487bb94e1f18014d3444da3"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "LSB_le_MSB",
            "line_nb": 189,
            "steps": [
                {
                    "command": [
                        "intros x H'; unfold LSB, MSB in |- *.",
                        "VernacExtend",
                        "3418cee62f8c8f48b51d1c5df30950266abd5650"
                    ]
                },
                {
                    "command": [
                        "apply Zle_Zpred.",
                        "VernacExtend",
                        "3453838680a22e4103d5d05a950ddef62d28d601"
                    ]
                },
                {
                    "command": [
                        "cut (maxDiv (Fnum x) (Fdigit radix x) < Fdigit radix x); auto with zarith.",
                        "VernacExtend",
                        "a5761a629923177f50a259c7f7629a44e6851b63"
                    ]
                },
                {
                    "command": [
                        "apply maxDivLt; auto.",
                        "VernacExtend",
                        "4d13e1029945f047303b97cf52fd7548e1b551e0"
                    ]
                },
                {
                    "command": [
                        "unfold Fdigit in |- *; apply NotDividesDigit; auto.",
                        "VernacExtend",
                        "b18676e1764eed3751768293d5fb38c90459898e"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "Fexp_le_LSB",
            "line_nb": 196,
            "steps": [
                {
                    "command": [
                        "intros x; unfold LSB in |- *.",
                        "VernacExtend",
                        "677ec71eae846abbd89724ee29911d6787c1b99d"
                    ]
                },
                {
                    "command": [
                        "auto with zarith.",
                        "VernacExtend",
                        "23f42fd3236dcece4a40b3a666dce57fea69a9c0"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "Ulp_Le_LSigB",
            "line_nb": 200,
            "steps": [
                {
                    "command": [
                        "intros x; apply (oneExp_le radix); auto.",
                        "VernacExtend",
                        "021195c46ba88582971e8dfdbdfd8608f3a7531a"
                    ]
                },
                {
                    "command": [
                        "apply Fexp_le_LSB; auto.",
                        "VernacExtend",
                        "e2ef0d6a640e91f3d0a5c1a0c330f2f52eb1d7f2"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "Fexp_le_MSB",
            "line_nb": 204,
            "steps": [
                {
                    "command": [
                        "intros x H'; unfold MSB in |- *.",
                        "VernacExtend",
                        "a91cc1606f041688d7f9a45bfa4d057dff2bd719"
                    ]
                },
                {
                    "command": [
                        "cut (Fdigit radix x <> 0%Z :>Z); unfold Zpred in |- *; auto with zarith.",
                        "VernacExtend",
                        "36cb64e3dd8bc12344d0b43dca725e83c5c1c590"
                    ]
                },
                {
                    "command": [
                        "unfold Fdigit in |- *.",
                        "VernacExtend",
                        "2c1b7b2f3f520d25bcc18c2627ab51e602f9face"
                    ]
                },
                {
                    "command": [
                        "red in |- *; intros H'0; absurd (digit radix (Fnum x) = 0); auto with zarith.",
                        "VernacExtend",
                        "dfe200f7f82beea0934254f818fe868d2399cd06"
                    ]
                },
                {
                    "command": [
                        "apply not_eq_sym; apply lt_O_neq; apply digitNotZero; auto.",
                        "VernacExtend",
                        "db392e4793db7cff49739542a63dbe4ec4a25dd5"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "MSB_le_abs",
            "line_nb": 211,
            "steps": [
                {
                    "command": [
                        "intros x H'; unfold MSB, FtoRradix, FtoR in |- *; simpl in |- *.",
                        "VernacExtend",
                        "6845b1040e7c5f390abf9deff2833280e7756f1a"
                    ]
                },
                {
                    "command": [
                        "replace (Zpred (Fdigit radix x + Fexp x)) with (Zpred (Fdigit radix x) + Fexp x)%Z; [ idtac | unfold Zpred in |- *; ring ].",
                        "VernacExtend",
                        "20252e54ff373aea14a30d256a29373b24013520"
                    ]
                },
                {
                    "command": [
                        "rewrite powerRZ_add; auto with real zarith.",
                        "VernacExtend",
                        "464b630a39cda032263051881ad80da2fc959c8e"
                    ]
                },
                {
                    "command": [
                        "rewrite Rmult_1_l.",
                        "VernacExtend",
                        "1ba58092cf1ca2fa8155dfa9c64894290b0f39df"
                    ]
                },
                {
                    "command": [
                        "repeat rewrite (fun r : R => Rmult_comm r (powerRZ radix (Fexp x))).",
                        "VernacExtend",
                        "2bc250b9a313f46d84f8a51e4e3bc19da0a109f4"
                    ]
                },
                {
                    "command": [
                        "apply Rmult_le_compat_l; auto with real zarith.",
                        "VernacExtend",
                        "2159120b470d3288ccdd35583593b7da3195abd5"
                    ]
                },
                {
                    "command": [
                        "rewrite <- inj_pred; auto with real zarith.",
                        "VernacExtend",
                        "b621bc7f9b333b98e68bac9f3894899024c08aa1"
                    ]
                },
                {
                    "command": [
                        "rewrite <- Zpower_nat_Z_powerRZ; auto.",
                        "VernacExtend",
                        "6f1e9f39530a3b1184dd744614c05cf5560d6b5e"
                    ]
                },
                {
                    "command": [
                        "apply Rle_IZR; auto.",
                        "VernacExtend",
                        "76a3e0cc7927a5e9ae31a5ab1551aeefb9a77673"
                    ]
                },
                {
                    "command": [
                        "unfold Fdigit in |- *; auto with arith.",
                        "VernacExtend",
                        "0fc04b9e1e4a4b1f8d28531fc875d417c8c51ccf"
                    ]
                },
                {
                    "command": [
                        "apply digitLess; auto.",
                        "VernacExtend",
                        "6515bd6e2f4af01716bf2a6bf58e55ca8a836d29"
                    ]
                },
                {
                    "command": [
                        "unfold Fdigit in |- *.",
                        "VernacExtend",
                        "2c1b7b2f3f520d25bcc18c2627ab51e602f9face"
                    ]
                },
                {
                    "command": [
                        "apply not_eq_sym; apply lt_O_neq; apply digitNotZero; auto.",
                        "VernacExtend",
                        "db392e4793db7cff49739542a63dbe4ec4a25dd5"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "abs_lt_MSB",
            "line_nb": 226,
            "steps": [
                {
                    "command": [
                        "intros x.",
                        "VernacExtend",
                        "596d66edc70dae19981ed74f103fc0a865aec92c"
                    ]
                },
                {
                    "command": [
                        "rewrite (MSB_abs x).",
                        "VernacExtend",
                        "eb1687dc8d835256145a0bda2ed400260fbb6ee9"
                    ]
                },
                {
                    "command": [
                        "unfold MSB, FtoRradix, FtoR in |- *.",
                        "VernacExtend",
                        "3115edb89689ce501837f3e87a1d5a0ac9c4fa0e"
                    ]
                },
                {
                    "command": [
                        "rewrite <- Zsucc_pred; simpl in |- *.",
                        "VernacExtend",
                        "ec7147e1423a3a7fac4a19221ce19c992720b74c"
                    ]
                },
                {
                    "command": [
                        "rewrite powerRZ_add; auto with real zarith.",
                        "VernacExtend",
                        "464b630a39cda032263051881ad80da2fc959c8e"
                    ]
                },
                {
                    "command": [
                        "rewrite Rmult_1_l.",
                        "VernacExtend",
                        "1ba58092cf1ca2fa8155dfa9c64894290b0f39df"
                    ]
                },
                {
                    "command": [
                        "repeat rewrite (fun r : R => Rmult_comm r (powerRZ radix (Fexp x))).",
                        "VernacExtend",
                        "2bc250b9a313f46d84f8a51e4e3bc19da0a109f4"
                    ]
                },
                {
                    "command": [
                        "apply Rmult_lt_compat_l; auto with real zarith.",
                        "VernacExtend",
                        "69b09e9e45c47fab1e5c88967427c2a6bc6497ee"
                    ]
                },
                {
                    "command": [
                        "rewrite <- Zpower_nat_Z_powerRZ; auto with arith.",
                        "VernacExtend",
                        "0fd0ed50c3b52cc8ab620dfe94160155fb018cfc"
                    ]
                },
                {
                    "command": [
                        "apply Rlt_IZR.",
                        "VernacExtend",
                        "e467d4c1a59850f4e46f0361acb2bf3fda9af65b"
                    ]
                },
                {
                    "command": [
                        "unfold Fdigit in |- *; auto with arith.",
                        "VernacExtend",
                        "0fc04b9e1e4a4b1f8d28531fc875d417c8c51ccf"
                    ]
                },
                {
                    "command": [
                        "unfold Fabs in |- *; simpl in |- *.",
                        "VernacExtend",
                        "a283da421ab64a5985f9f7fdd0b699ab34bf9138"
                    ]
                },
                {
                    "command": [
                        "pattern (Zabs (Fnum x)) at 1 in |- *; rewrite <- (Zabs_eq (Zabs (Fnum x))); auto with zarith.",
                        "VernacExtend",
                        "e85702fef891d11cc8885724aaa645c0019ba552"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "LSB_le_abs",
            "line_nb": 241,
            "steps": [
                {
                    "command": [
                        "intros x H'; apply Rle_trans with (FtoRradix (Float 1%nat (MSB x))).",
                        "VernacExtend",
                        "ad5d64b48acd2d3523838b51fee7a3ebe075719d"
                    ]
                },
                {
                    "command": [
                        "apply (oneExp_le radix); auto.",
                        "VernacExtend",
                        "436b6baf1dca89e7291abe01d04b96b2cb8870a7"
                    ]
                },
                {
                    "command": [
                        "apply LSB_le_MSB; auto.",
                        "VernacExtend",
                        "634e0120648392769414e990ed72764075bce4cb"
                    ]
                },
                {
                    "command": [
                        "apply MSB_le_abs; auto.",
                        "VernacExtend",
                        "99255ec49e5117c32f631c4b22ab1e346d507922"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "MSB_monotoneAux",
            "line_nb": 247,
            "steps": [
                {
                    "command": [
                        "intros x y H' H'0; unfold MSB in |- *.",
                        "VernacExtend",
                        "ce9ce3c80696417d435b138b80978f8f951a3996"
                    ]
                },
                {
                    "command": [
                        "rewrite <- H'0.",
                        "VernacExtend",
                        "e572fe7ef5a3adc5a4a0c6892b873d01c53ef2f5"
                    ]
                },
                {
                    "command": [
                        "cut (Fdigit radix x <= Fdigit radix y)%Z; [ unfold Zpred in |- *; auto with zarith | idtac ].",
                        "VernacExtend",
                        "86829b6ef8066b9d31cb3f9f852f31a797f55d56"
                    ]
                },
                {
                    "command": [
                        "unfold Fdigit in |- *; apply inj_le.",
                        "VernacExtend",
                        "9426e63a2c408b6024758a6eddbf04454e5ef09b"
                    ]
                },
                {
                    "command": [
                        "apply digit_monotone; auto.",
                        "VernacExtend",
                        "4bf4beb860eab1058003fc52920acf262e4e4f70"
                    ]
                },
                {
                    "command": [
                        "apply le_IZR.",
                        "VernacExtend",
                        "b9b46c6b2f4d4157bed90857db2b9c3ba33486ad"
                    ]
                },
                {
                    "command": [
                        "apply Rmult_le_reg_l with (r := powerRZ radix (Fexp x)); auto with real zarith.",
                        "VernacExtend",
                        "6179a3ab02304cf04759ec4e081f18fd0c5dc58f"
                    ]
                },
                {
                    "command": [
                        "repeat rewrite (Rmult_comm (powerRZ radix (Fexp x))); auto.",
                        "VernacExtend",
                        "3c698a325e3b70aa96dfe068f816b3aaee5f095f"
                    ]
                },
                {
                    "command": [
                        "pattern (Fexp x) at 2 in |- *; rewrite H'0; auto.",
                        "VernacExtend",
                        "edbdf90925b73016de4d4a80383293b8d35249a1"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "MSB_monotone",
            "line_nb": 258,
            "steps": [
                {
                    "command": [
                        "intros x y H' H'0 H'1; rewrite (MSB_abs x); rewrite (MSB_abs y).",
                        "VernacExtend",
                        "537613477da2f454ac4e8f9eb69c67070592da80"
                    ]
                },
                {
                    "command": [
                        "case (Zle_or_lt (Fexp (Fabs x)) (Fexp (Fabs y))); simpl in |- *; intros Zle1.",
                        "VernacExtend",
                        "e2e01a5cdeea1df3ce13b9b277425715b16cae76"
                    ]
                },
                {
                    "command": [
                        "rewrite MSB_shift with (x := Fabs y) (n := Zabs_nat (Fexp (Fabs y) - Fexp (Fabs x))).",
                        "VernacExtend",
                        "610af5a7182e76a09821c32773cc80cdb4e237bc"
                    ]
                },
                {
                    "command": [
                        "apply MSB_monotoneAux; auto.",
                        "VernacExtend",
                        "5c4548305948de5ee362583d392f5a96e8eeb708"
                    ]
                },
                {
                    "command": [
                        "unfold FtoRradix in |- *; repeat rewrite Fabs_correct; auto with real arith.",
                        "VernacExtend",
                        "f797315a6ffd7dcf308a3575a1703d93bb450013"
                    ]
                },
                {
                    "command": [
                        "rewrite FshiftCorrect; auto with real arith.",
                        "VernacExtend",
                        "ba9944eaef197f63c7c3e3602fecd113b44fbdf3"
                    ]
                },
                {
                    "command": [
                        "repeat rewrite Fabs_correct; auto with real arith.",
                        "VernacExtend",
                        "168832fe5444e0c100ad0d3f455b3fcc9fd9ed24"
                    ]
                },
                {
                    "command": [
                        "repeat rewrite Rabs_Rabsolu; repeat rewrite <- Fabs_correct; auto with real arith.",
                        "VernacExtend",
                        "caad712765155aa8b60ca86440c199b2778ceb41"
                    ]
                },
                {
                    "command": [
                        "unfold Fshift in |- *; simpl in |- *.",
                        "VernacExtend",
                        "bc2226e4b5a4ef5bbaea414d285c81f30a1eb932"
                    ]
                },
                {
                    "command": [
                        "rewrite inj_abs; [ ring | auto with zarith ].",
                        "VernacExtend",
                        "9f20cfc6bc457c5ef916dbfeb4e191caa172b0d0"
                    ]
                },
                {
                    "command": [
                        "apply Fabs_Fzero; auto.",
                        "VernacExtend",
                        "6d9516ada811bc69b1ea082e8584a1cb03f4f4db"
                    ]
                },
                {
                    "command": [
                        "rewrite MSB_shift with (x := Fabs x) (n := Zabs_nat (Fexp (Fabs x) - Fexp (Fabs y))).",
                        "VernacExtend",
                        "01aecc5779bec67494e21a80c06b48ac91017acf"
                    ]
                },
                {
                    "command": [
                        "apply MSB_monotoneAux; auto.",
                        "VernacExtend",
                        "5c4548305948de5ee362583d392f5a96e8eeb708"
                    ]
                },
                {
                    "command": [
                        "unfold FtoRradix in |- *; repeat rewrite Fabs_correct; auto with real arith.",
                        "VernacExtend",
                        "f797315a6ffd7dcf308a3575a1703d93bb450013"
                    ]
                },
                {
                    "command": [
                        "rewrite FshiftCorrect; auto with real arith.",
                        "VernacExtend",
                        "ba9944eaef197f63c7c3e3602fecd113b44fbdf3"
                    ]
                },
                {
                    "command": [
                        "repeat rewrite Fabs_correct; auto with real arith.",
                        "VernacExtend",
                        "168832fe5444e0c100ad0d3f455b3fcc9fd9ed24"
                    ]
                },
                {
                    "command": [
                        "repeat rewrite Rabs_Rabsolu; repeat rewrite <- Fabs_correct; auto with real arith.",
                        "VernacExtend",
                        "caad712765155aa8b60ca86440c199b2778ceb41"
                    ]
                },
                {
                    "command": [
                        "unfold Fshift in |- *; simpl in |- *.",
                        "VernacExtend",
                        "bc2226e4b5a4ef5bbaea414d285c81f30a1eb932"
                    ]
                },
                {
                    "command": [
                        "rewrite inj_abs; [ ring | auto with zarith ].",
                        "VernacExtend",
                        "9f20cfc6bc457c5ef916dbfeb4e191caa172b0d0"
                    ]
                },
                {
                    "command": [
                        "apply Fabs_Fzero; auto.",
                        "VernacExtend",
                        "6d9516ada811bc69b1ea082e8584a1cb03f4f4db"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "MSB_le_multAux",
            "line_nb": 280,
            "steps": [
                {
                    "command": [
                        "intros x y H' H'0; unfold MSB, Fmult, Fdigit in |- *; simpl in |- *.",
                        "VernacExtend",
                        "3822bdca30c52ccb5998335b502cc60c6be2f73f"
                    ]
                },
                {
                    "command": [
                        "replace (Zpred (digit radix (Fnum x) + Fexp x) + Zpred (digit radix (Fnum y) + Fexp y))%Z with (Zpred (digit radix (Fnum x) + Zpred (digit radix (Fnum y)) + (Fexp x + Fexp y))); [ idtac | unfold Zpred in |- *; ring ].",
                        "VernacExtend",
                        "0e2e16b679c2e17ec890121ba24be4c3853adc84"
                    ]
                },
                {
                    "command": [
                        "cut (digit radix (Fnum x) + Zpred (digit radix (Fnum y)) <= digit radix (Fnum x * Fnum y))%Z; [ unfold Zpred in |- *; auto with zarith | idtac ].",
                        "VernacExtend",
                        "4c7482faba3be1d2ab24a2bd647e45941971bee1"
                    ]
                },
                {
                    "command": [
                        "rewrite <- inj_pred; auto with float zarith; try rewrite <- inj_plus.",
                        "VernacExtend",
                        "78d2b4c546941e78583fb8828168142d4015771d"
                    ]
                },
                {
                    "command": [
                        "apply inj_le.",
                        "VernacExtend",
                        "ec9911979155489cc693701fb9837c3c6f77e46e"
                    ]
                },
                {
                    "command": [
                        "rewrite <- digitAdd; auto with zarith.",
                        "VernacExtend",
                        "4890376399403e4b5cc3f790585506d45c62a432"
                    ]
                },
                {
                    "command": [
                        "apply digit_monotone; auto with zarith.",
                        "VernacExtend",
                        "6599b462324275ec7ca62450f3d5632e71dfa19e"
                    ]
                },
                {
                    "command": [
                        "repeat rewrite Zabs_Zmult.",
                        "VernacExtend",
                        "4b7da0b8275268c7f3ee6a3b7ea19434419af5d5"
                    ]
                },
                {
                    "command": [
                        "apply Zle_Zmult_comp_l; auto with zarith.",
                        "VernacExtend",
                        "0a442d3268531835feca11bf21b34ab2eb26341b"
                    ]
                },
                {
                    "command": [
                        "rewrite (fun x => Zabs_eq (Zpower_nat radix x)); auto with zarith.",
                        "VernacExtend",
                        "7e071cac3a7e901b238c070ddda3bfcfa7cd1d07"
                    ]
                },
                {
                    "command": [
                        "apply not_eq_sym; apply lt_O_neq; apply digitNotZero; auto.",
                        "VernacExtend",
                        "db392e4793db7cff49739542a63dbe4ec4a25dd5"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "MSB_le_mult",
            "line_nb": 293,
            "steps": [
                {
                    "command": [
                        "intros x y H' H'0.",
                        "VernacExtend",
                        "bbba823d81241c63a29479e1a1d6ea98ba519935"
                    ]
                },
                {
                    "command": [
                        "rewrite <- oneZplus.",
                        "VernacExtend",
                        "a0c5f586d58a0d271d8dcf7083014a8abe1de34f"
                    ]
                },
                {
                    "command": [
                        "apply (oneExp_le radix); auto.",
                        "VernacExtend",
                        "436b6baf1dca89e7291abe01d04b96b2cb8870a7"
                    ]
                },
                {
                    "command": [
                        "apply MSB_le_multAux; auto.",
                        "VernacExtend",
                        "cc932da81f9e99b6f29ce56d30be9fe2a50925c4"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "mult_le_MSBAux",
            "line_nb": 299,
            "steps": [
                {
                    "command": [
                        "intros x y H' H'0; unfold MSB, Fmult, Fdigit in |- *; simpl in |- *.",
                        "VernacExtend",
                        "3822bdca30c52ccb5998335b502cc60c6be2f73f"
                    ]
                },
                {
                    "command": [
                        "replace (Zsucc (Zpred (digit radix (Fnum x) + Fexp x) + Zpred (digit radix (Fnum y) + Fexp y))) with (Zpred (digit radix (Fnum x) + digit radix (Fnum y) + (Fexp x + Fexp y))); [ idtac | unfold Zpred, Zsucc in |- *; ring ].",
                        "VernacExtend",
                        "397179f7d2dd04682dce1cde537e1d03e3ac6065"
                    ]
                },
                {
                    "command": [
                        "cut (digit radix (Fnum x * Fnum y) <= digit radix (Fnum x) + digit radix (Fnum y))%Z; [ unfold Zpred in |- *; auto with zarith | idtac ].",
                        "VernacExtend",
                        "cc6c5ee64566d1d661464604e23560d67b4a0bd5"
                    ]
                },
                {
                    "command": [
                        "rewrite <- inj_plus.",
                        "VernacExtend",
                        "38264963460e784421807bb3298490bcd7d458f9"
                    ]
                },
                {
                    "command": [
                        "apply inj_le; auto.",
                        "VernacExtend",
                        "b08710801eed5cea461057559e1ea242f739628a"
                    ]
                },
                {
                    "command": [
                        "rewrite <- digitAdd; auto with arith.",
                        "VernacExtend",
                        "ef19f6266a4c7931fefb968336c99e3b88851bbf"
                    ]
                },
                {
                    "command": [
                        "apply digit_monotone; auto with arith.",
                        "VernacExtend",
                        "6d6c10c624c6f47880bad693205751c64f537ef8"
                    ]
                },
                {
                    "command": [
                        "repeat rewrite Zabs_Zmult.",
                        "VernacExtend",
                        "4b7da0b8275268c7f3ee6a3b7ea19434419af5d5"
                    ]
                },
                {
                    "command": [
                        "apply Zle_Zmult_comp_l; auto with zarith.",
                        "VernacExtend",
                        "0a442d3268531835feca11bf21b34ab2eb26341b"
                    ]
                },
                {
                    "command": [
                        "rewrite (fun x => Zabs_eq (Zpower_nat radix x)); auto with zarith.",
                        "VernacExtend",
                        "7e071cac3a7e901b238c070ddda3bfcfa7cd1d07"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "mult_le_MSB",
            "line_nb": 311,
            "steps": [
                {
                    "command": [
                        "intros x y H' H'0; rewrite <- oneZplus.",
                        "VernacExtend",
                        "1704e6e8818e820e0791906170a82a4324a7b51c"
                    ]
                },
                {
                    "command": [
                        "replace (radix * Float 1%nat (MSB x + MSB y))%R with (FtoRradix (Float 1%nat (Zsucc (MSB x + MSB y)))).",
                        "VernacExtend",
                        "72c569d1d447e8dbfbe1283af9364000f0d2fee3"
                    ]
                },
                {
                    "command": [
                        "apply (oneExp_le radix); auto.",
                        "VernacExtend",
                        "436b6baf1dca89e7291abe01d04b96b2cb8870a7"
                    ]
                },
                {
                    "command": [
                        "apply mult_le_MSBAux; auto.",
                        "VernacExtend",
                        "a0d4386373951c4f2d1b744e73c1ad64188131ec"
                    ]
                },
                {
                    "command": [
                        "unfold FtoRradix, FtoR in |- *; simpl in |- *.",
                        "VernacExtend",
                        "85a3da1582165d92ceb7faef707de88822bccf1a"
                    ]
                },
                {
                    "command": [
                        "rewrite powerRZ_Zs; auto with real zarith; ring.",
                        "VernacExtend",
                        "055e37c209e2a0ca9dc7ef6b05e8ffefe2fb31ed"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "MSB_mix",
            "line_nb": 319,
            "steps": [
                {
                    "command": [
                        "intros x y H' H'0; rewrite (MSB_abs x); rewrite (MSB_abs y).",
                        "VernacExtend",
                        "888269e827b427e8f92b33483d88eec2bd75b475"
                    ]
                },
                {
                    "command": [
                        "apply Rle_lt_trans with (Fabs x * Fabs y)%R; auto with real.",
                        "VernacExtend",
                        "709ac6b747f3f1451498e1825e25f822a96d3801"
                    ]
                },
                {
                    "command": [
                        "apply Rmult_le_compat_l; auto with real.",
                        "VernacExtend",
                        "bf324a586bfbe5f57a13931b6a23d59d989b4278"
                    ]
                },
                {
                    "command": [
                        "unfold FtoRradix in |- *; rewrite Fabs_correct; auto with real arith.",
                        "VernacExtend",
                        "cca55fce1beeb39bc97095dc0bacd17dcc856dbe"
                    ]
                },
                {
                    "command": [
                        "rewrite <- MSB_abs; apply MSB_le_abs; auto.",
                        "VernacExtend",
                        "f1b6e7f9d96319299fd18a786fe12fb6b70f572b"
                    ]
                },
                {
                    "command": [
                        "rewrite (Rmult_comm (Fabs x)).",
                        "VernacExtend",
                        "f0eec95eabe394b835b209d3526c670718bb6714"
                    ]
                },
                {
                    "command": [
                        "replace (radix * (Fabs y * Float 1%nat (MSB (Fabs x))))%R with (Fabs y * (radix * Float 1%nat (MSB (Fabs x))))%R; [ idtac | ring ].",
                        "VernacExtend",
                        "c73fcb00135e72429ce802414c42f1687423c16d"
                    ]
                },
                {
                    "command": [
                        "apply Rmult_lt_compat_l; auto with real.",
                        "VernacExtend",
                        "3e7233511306c2ec2fb512cc9cfd2a7990f1f973"
                    ]
                },
                {
                    "command": [
                        "unfold FtoRradix, FtoR in |- *; simpl in |- *; auto with real arith.",
                        "VernacExtend",
                        "6d831f78faee4cc79bdbd9655c2655e43311e16f"
                    ]
                },
                {
                    "command": [
                        "rewrite Rmult_comm; replace 0%R with (powerRZ radix (Fexp y) * 0)%R; [ idtac | ring ].",
                        "VernacExtend",
                        "feabaaf8e7cef1f46377599c13d5a802eb350f06"
                    ]
                },
                {
                    "command": [
                        "apply Rmult_lt_compat_l; auto with real arith.",
                        "VernacExtend",
                        "2c95e3f10177f062380352d768090c173015e1d6"
                    ]
                },
                {
                    "command": [
                        "rewrite Zabs_absolu.",
                        "VernacExtend",
                        "aee34af9b92188e13050a86635be4fe3ff11c605"
                    ]
                },
                {
                    "command": [
                        "replace 0%R with (INR 0); [ idtac | simpl in |- *; auto ]; rewrite <- INR_IZR_INZ; apply INR_lt_nm.",
                        "VernacExtend",
                        "83eaaf2f221db95141eaed24cfc441d7667fd078"
                    ]
                },
                {
                    "command": [
                        "apply absolu_lt_nz; auto.",
                        "VernacExtend",
                        "b8588295bc2e784df434269b22381bfcd7b2d589"
                    ]
                },
                {
                    "command": [
                        "replace (radix * Float 1%nat (MSB (Fabs x)))%R with (FtoRradix (Float 1%nat (Zsucc (MSB (Fabs x))))).",
                        "VernacExtend",
                        "44c9fdcd8bd834ee1b931cc6d237257e68f74c6c"
                    ]
                },
                {
                    "command": [
                        "rewrite <- MSB_abs; apply abs_lt_MSB; auto.",
                        "VernacExtend",
                        "45df2ae542c7d8c538fe585151919d806660e1ae"
                    ]
                },
                {
                    "command": [
                        "unfold FtoRradix, FtoR in |- *; simpl in |- *.",
                        "VernacExtend",
                        "85a3da1582165d92ceb7faef707de88822bccf1a"
                    ]
                },
                {
                    "command": [
                        "rewrite powerRZ_Zs; auto with real zarith; ring.",
                        "VernacExtend",
                        "055e37c209e2a0ca9dc7ef6b05e8ffefe2fb31ed"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "LSB_rep",
            "line_nb": 339,
            "steps": [
                {
                    "command": [
                        "intros x y H' H'0.",
                        "VernacExtend",
                        "bbba823d81241c63a29479e1a1d6ea98ba519935"
                    ]
                },
                {
                    "command": [
                        "case (Zle_or_lt (Fexp x) (Fexp y)); intros Zl1.",
                        "VernacExtend",
                        "4f08ab0b716484879465b5975b8f18bb9878808e"
                    ]
                },
                {
                    "command": [
                        "exists (Fnum y * Zpower_nat radix (Zabs_nat (Fexp y - Fexp x)))%Z.",
                        "VernacExtend",
                        "bbfdee641fe723d47b29719bdd1fcdd9ed9b51ee"
                    ]
                },
                {
                    "command": [
                        "pattern (Fexp x) at 2 in |- *; replace (Fexp x) with (Fexp y - Zabs_nat (Fexp y - Fexp x))%Z.",
                        "VernacExtend",
                        "8a419328c51d054409dc36251c465867fe6c0f7d"
                    ]
                },
                {
                    "command": [
                        "unfold FtoRradix in |- *; rewrite <- (FshiftCorrect radix) with (n := Zabs_nat (Fexp y - Fexp x)) (x := y); auto.",
                        "VernacExtend",
                        "6deb8ee6186626f31efcf30de39405d8bce88e52"
                    ]
                },
                {
                    "command": [
                        "rewrite inj_abs; try ring; auto with zarith.",
                        "VernacExtend",
                        "cdc62d34d5bcd76809c63f42c36aa7a53362a973"
                    ]
                },
                {
                    "command": [
                        "exists (Zquotient (Fnum y) (Zpower_nat radix (Zabs_nat (Fexp x - Fexp y)))).",
                        "VernacExtend",
                        "0b7a342b6ffcc4495dcd48e98af12a74da9b96f4"
                    ]
                },
                {
                    "command": [
                        "unfold FtoRradix in |- *; rewrite <- (FshiftCorrect radix) with (n := Zabs_nat (Fexp x - Fexp y)) (x := Float (Zquotient (Fnum y) (Zpower_nat radix (Zabs_nat (Fexp x - Fexp y)))) (Fexp x)); auto.",
                        "VernacExtend",
                        "caa69bdd89b2069ec91134e7f82b81721dc1539e"
                    ]
                },
                {
                    "command": [
                        "unfold Fshift in |- *; simpl in |- *.",
                        "VernacExtend",
                        "bc2226e4b5a4ef5bbaea414d285c81f30a1eb932"
                    ]
                },
                {
                    "command": [
                        "cut (0 <= Fexp x - Fexp y)%Z; [ intros Le1; repeat rewrite inj_abs | auto with zarith ]; auto.",
                        "VernacExtend",
                        "8b4a061672fbfb314658b19a98c27559b4a07fbe"
                    ]
                },
                {
                    "command": [
                        "unfold FtoR in |- *; simpl in |- *; auto.",
                        "VernacExtend",
                        "31aae83e26f2a4cd8ff80efd1d15ab2e7bcfd319"
                    ]
                },
                {
                    "command": [
                        "replace (Fexp x - (Fexp x - Fexp y))%Z with (Fexp y); [ idtac | ring ].",
                        "VernacExtend",
                        "a588b792276059ef6fdfb6a7e233716106f3aa5d"
                    ]
                },
                {
                    "command": [
                        "replace (Zquotient (Fnum y) (Zpower_nat radix (Zabs_nat (Fexp x - Fexp y))) * Zpower_nat radix (Zabs_nat (Fexp x - Fexp y)))%Z with ( Fnum y); auto.",
                        "VernacExtend",
                        "42c3a294567f178ce99643d928e285b2a22ea238"
                    ]
                },
                {
                    "command": [
                        "apply ZdividesZquotient; auto with zarith.",
                        "VernacExtend",
                        "89b12bba5c9ae388b339b50051799b29fbef401d"
                    ]
                },
                {
                    "command": [
                        "apply ZdividesTrans with (m := Zpower_nat radix (maxDiv (Fnum y) (Fdigit radix y))).",
                        "VernacExtend",
                        "5b952a0346904ad83be775c729bc332548d56d6d"
                    ]
                },
                {
                    "command": [
                        "apply maxDivCorrect.",
                        "VernacExtend",
                        "2687683fd58bcf63aa7248fb0dac70e056d933ab"
                    ]
                },
                {
                    "command": [
                        "apply ZdividesLessPow; auto.",
                        "VernacExtend",
                        "0ead436832653362fd366b99382277b2fe32e952"
                    ]
                },
                {
                    "command": [
                        "apply ZleLe.",
                        "VernacExtend",
                        "7846641b1931d643234276488bfb4481d91e9778"
                    ]
                },
                {
                    "command": [
                        "rewrite inj_abs; auto with zarith.",
                        "VernacExtend",
                        "d832d70d6f4177fa3d020760f1ccab18c59abdc1"
                    ]
                },
                {
                    "command": [
                        "apply Zplus_le_reg_l with (p := Fexp y).",
                        "VernacExtend",
                        "f0c03a5f8524d3d7f18c1c2e48cb09eda28d2591"
                    ]
                },
                {
                    "command": [
                        "apply Zle_trans with (LSB x).",
                        "VernacExtend",
                        "69006ddec3eaa21e3edf956db94b4d95822e6af5"
                    ]
                },
                {
                    "command": [
                        "replace (Fexp y + (Fexp x - Fexp y))%Z with (Fexp x); [ idtac | ring ].",
                        "VernacExtend",
                        "5b1e1cf1c4705109f362dd2a27041199843a1c40"
                    ]
                },
                {
                    "command": [
                        "apply Fexp_le_LSB.",
                        "VernacExtend",
                        "b989a59d82179838da63f998b54c97076e3ee8fc"
                    ]
                },
                {
                    "command": [
                        "rewrite Zplus_comm; auto.",
                        "VernacExtend",
                        "b2f0e16af728ec0074b407c287c890992b7b16ea"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "LSB_rep_min",
            "line_nb": 365,
            "steps": [
                {
                    "command": [
                        "intros p; exists (Zquotient (Fnum p) (Zpower_nat radix (Zabs_nat (LSB p - Fexp p)))).",
                        "VernacExtend",
                        "dc5cf13163720201764c6d779a330aab2097d866"
                    ]
                },
                {
                    "command": [
                        "unfold FtoRradix, FtoR, LSB in |- *; simpl in |- *.",
                        "VernacExtend",
                        "fcef7ece95332c4df08c4e1e61917b8b41bd9f37"
                    ]
                },
                {
                    "command": [
                        "rewrite powerRZ_add; auto with real zarith.",
                        "VernacExtend",
                        "464b630a39cda032263051881ad80da2fc959c8e"
                    ]
                },
                {
                    "command": [
                        "rewrite <- Rmult_assoc.",
                        "VernacExtend",
                        "34da3c50cde53c179a4908b1329a459071245c05"
                    ]
                },
                {
                    "command": [
                        "replace (maxDiv (Fnum p) (Fdigit radix p) + Fexp p - Fexp p)%Z with (Z_of_nat (maxDiv (Fnum p) (Fdigit radix p))); auto.",
                        "VernacExtend",
                        "6a994af919b683e494d0c3ea971bb794685829f0"
                    ]
                },
                {
                    "command": [
                        "rewrite absolu_INR.",
                        "VernacExtend",
                        "5604994e6eaecaf09b0ebf28e787d62e33997efc"
                    ]
                },
                {
                    "command": [
                        "rewrite <- Zpower_nat_Z_powerRZ; auto with zarith.",
                        "VernacExtend",
                        "e4b7b4406768bdb883cc6cef0ff1fe3e9efd51bd"
                    ]
                },
                {
                    "command": [
                        "rewrite <- Rmult_IZR.",
                        "VernacExtend",
                        "77ff9e5d0697bdc5f92b38cf0c531b2d80b04bc3"
                    ]
                },
                {
                    "command": [
                        "rewrite <- ZdividesZquotient; auto with zarith.",
                        "VernacExtend",
                        "cfc76b69f417fb02ed864bf3cf32b0e875770beb"
                    ]
                },
                {
                    "command": [
                        "apply maxDivCorrect.",
                        "VernacExtend",
                        "2687683fd58bcf63aa7248fb0dac70e056d933ab"
                    ]
                },
                {
                    "command": [
                        "ring.",
                        "VernacExtend",
                        "baadd9fc4c175005af409bb466fcea9fab25b4e6"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        }
    ]
}