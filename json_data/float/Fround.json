{
    "filename": "Fround.v",
    "coq_project": "float",
    "vernac_cmds": [
        [
            "Require Export Fprop.",
            "VernacRequire",
            "cc3385475689527f59feeff7cde507bf406d6bdc"
        ],
        [
            "Require Export Fodd.",
            "VernacRequire",
            "b123808ff3fdaddd5739490f82d4653b94eae8f6"
        ],
        [
            "Section FRound.",
            "VernacBeginSection",
            "ab5b45d0aac669677e9da463602102df62c58d96"
        ],
        [
            "Variable b : Fbound.",
            "VernacAssumption",
            "17a11c003f49f819b8cb809f61b140702916486d"
        ],
        [
            "Variable radix : Z.",
            "VernacAssumption",
            "2349b77d134e0c9bb013a8bdca0020ca16fc023b"
        ],
        [
            "Variable precision : nat.",
            "VernacAssumption",
            "2235bc83b7ebf4cbe373b5fa3b4f3c643d454130"
        ],
        [
            "Let FtoRradix := FtoR radix.",
            "VernacDefinition",
            "5aa29a9595c6e9e03b28c6d232299552ec761ad7"
        ],
        [
            "Local Coercion FtoRradix : float >-> R.",
            "VernacCoercion",
            "cec6b845059d434f72dda1a67638af64e1fb0628"
        ],
        [
            "Hypothesis radixMoreThanOne : (1 < radix)%Z.",
            "VernacAssumption",
            "f4d3774b2275f4c4c3af941091d4d99f9a2129aa"
        ],
        [
            "Hypothesis precisionGreaterThanOne : 1 < precision.",
            "VernacAssumption",
            "9f627fb385d8fe283ac9563556925f37be8e5402"
        ],
        [
            "Hypothesis pGivesBound : Zpos (vNum b) = Zpower_nat radix precision.",
            "VernacAssumption",
            "d558f967d87d2a42d14158ac115b10c6f5358430"
        ],
        [
            "Definition TotalP (P : R -> float -> Prop) := forall r : R, exists p : float, P r p.",
            "VernacDefinition",
            "617370bdb18d2f62572b519512300519d42ea95d"
        ],
        [
            "Definition UniqueP (P : R -> float -> Prop) := forall (r : R) (p q : float), P r p -> P r q -> p = q :>R.",
            "VernacDefinition",
            "8bc6d67bcabfddae03a9e48e4b85b2bf3f20a97c"
        ],
        [
            "Definition CompatibleP (P : R -> float -> Prop) := forall (r1 r2 : R) (p q : float), P r1 p -> r1 = r2 -> p = q :>R -> Fbounded b q -> P r2 q.",
            "VernacDefinition",
            "e76cd500617cfe0f158285cc8af0f3ed11a619a4"
        ],
        [
            "Definition MinOrMaxP (P : R -> float -> Prop) := forall (r : R) (p : float), P r p -> isMin b radix r p \\/ isMax b radix r p.",
            "VernacDefinition",
            "b3759bd1c1d6eab14ba50a8613fece17068a09a8"
        ],
        [
            "Definition RoundedModeP (P : R -> float -> Prop) := TotalP P /\\ CompatibleP P /\\ MinOrMaxP P /\\ MonotoneP radix P.",
            "VernacDefinition",
            "b615f366527a45e532f7a1dc9f6a83fb75d260fc"
        ],
        [
            "Theorem RoundedModeP_inv1 : forall P, RoundedModeP P -> TotalP P.",
            "VernacStartTheoremProof",
            "fdce94c81aba5c95963f6012267494f70124f087"
        ],
        [
            "intros P H; case H; auto.",
            "VernacExtend",
            "f61b0bfb94788cbcf5ba626263e9762294c2e23f"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Theorem RoundedModeP_inv2 : forall P, RoundedModeP P -> CompatibleP P.",
            "VernacStartTheoremProof",
            "41bda5ab0f26e6762bbc77f00ad5b6846846142d"
        ],
        [
            "intros P H; Casec H; intros H H1; Casec H1; auto.",
            "VernacExtend",
            "9cc724062da7d627c7779966cdf03dfffb8b2ee0"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Theorem RoundedModeP_inv3 : forall P, RoundedModeP P -> MinOrMaxP P.",
            "VernacStartTheoremProof",
            "e9cd69fbba0f7cf0fd4f83c7ddf0dd7480f9c352"
        ],
        [
            "intros P H; Casec H; intros H H1; Casec H1; intros H1 H2; Casec H2; auto.",
            "VernacExtend",
            "391ebfcd59559954605bbfa6a12851e917a44db2"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Theorem RoundedModeP_inv4 : forall P, RoundedModeP P -> MonotoneP radix P.",
            "VernacStartTheoremProof",
            "1ad53daad7199596cfd5b89fa0da98393782843d"
        ],
        [
            "intros P H; Casec H; intros H H1; Casec H1; intros H1 H2; Casec H2; auto.",
            "VernacExtend",
            "391ebfcd59559954605bbfa6a12851e917a44db2"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Hint Resolve RoundedModeP_inv1 RoundedModeP_inv2 RoundedModeP_inv3 RoundedModeP_inv4: inv.",
            "VernacHints",
            "d33f11d056f00574038a67071c4492827026d9d5"
        ],
        [
            "Theorem RoundedProjector : forall P, RoundedModeP P -> ProjectorP b radix P.",
            "VernacStartTheoremProof",
            "27273eceee10ce7c2d8432911dddba1c818d7ac0"
        ],
        [
            "intros P H'; red in |- *; simpl in |- *.",
            "VernacExtend",
            "eb3937c24ad6f57f78df8b4c378e63eb998d48c2"
        ],
        [
            "intros p q H'0 H'1.",
            "VernacExtend",
            "8ed21c6698c7463e4ad42751d6b98707e0698a0a"
        ],
        [
            "red in H'.",
            "VernacExtend",
            "b3f39ff59e03e63f7335587cdc4b70d75813b637"
        ],
        [
            "elim H'; intros H'2 H'3; elim H'3; intros H'4 H'5; elim H'5; intros H'6 H'7; case (H'6 p q); clear H'5 H'3 H'; auto.",
            "VernacExtend",
            "2549363f99767bca3ccdc536dbbb14b37251748d"
        ],
        [
            "intros H'; apply (ProjectMin b radix p); auto.",
            "VernacExtend",
            "7e7b94b22f199ffbe2887e9799bd026d355513ce"
        ],
        [
            "intros H'; apply (ProjectMax b radix p); auto.",
            "VernacExtend",
            "5aba08893980688054f1595ff1b4cf0407fddd7d"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Theorem MinCompatible : CompatibleP (isMin b radix).",
            "VernacStartTheoremProof",
            "3439de9db5c48685b9ab442324564c466f512813"
        ],
        [
            "red in |- *.",
            "VernacExtend",
            "95a3fb9e13ce19fdc8e335912fb83e57a9512b14"
        ],
        [
            "intros r1 r2 p q H' H'0 H'1 H'2; split; auto.",
            "VernacExtend",
            "4ab3135ad7e9c17e9a0197aabe93c979a54c451e"
        ],
        [
            "rewrite <- H'0; unfold FtoRradix in H'1; rewrite <- H'1; case H'; auto.",
            "VernacExtend",
            "cb330bbb44015ec18842e16ece4a34ef75a2b651"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Theorem MinRoundedModeP : RoundedModeP (isMin b radix).",
            "VernacStartTheoremProof",
            "2b54604a6dcbef30bef647523f3ecea7b70db50a"
        ],
        [
            "split; try red in |- *.",
            "VernacExtend",
            "6f7585842bc893a45441962eea0be50c6b8d3847"
        ],
        [
            "intros r; apply MinEx with (precision := precision); auto with arith.",
            "VernacExtend",
            "4f3b19eddc3a67e968e10b871611dca7e1e1c3bf"
        ],
        [
            "split; try exact MinCompatible.",
            "VernacExtend",
            "6c58ae9069a663f58a684434bd1213ef7c9cb7e0"
        ],
        [
            "split; try apply MonotoneMin; red in |- *; auto.",
            "VernacExtend",
            "e61573cb356e9a80e771484d0bbb3e5893c8884a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Theorem MaxCompatible : CompatibleP (isMax b radix).",
            "VernacStartTheoremProof",
            "a00477d4a2ef8c533821591640b763259eeb0297"
        ],
        [
            "red in |- *.",
            "VernacExtend",
            "95a3fb9e13ce19fdc8e335912fb83e57a9512b14"
        ],
        [
            "intros r1 r2 p q H' H'0 H'1 H'2; split; auto.",
            "VernacExtend",
            "4ab3135ad7e9c17e9a0197aabe93c979a54c451e"
        ],
        [
            "rewrite <- H'0; unfold FtoRradix in H'1; rewrite <- H'1; case H'; auto.",
            "VernacExtend",
            "cb330bbb44015ec18842e16ece4a34ef75a2b651"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Theorem MaxRoundedModeP : RoundedModeP (isMax b radix).",
            "VernacStartTheoremProof",
            "7d3033260aebd27063dd8375f8d47306c751ab52"
        ],
        [
            "split; try red in |- *.",
            "VernacExtend",
            "6f7585842bc893a45441962eea0be50c6b8d3847"
        ],
        [
            "intros r; apply MaxEx with (precision := precision); auto with arith.",
            "VernacExtend",
            "017d502003ad4d7f02ad7f5669d58c936691fc2d"
        ],
        [
            "split; try exact MaxCompatible.",
            "VernacExtend",
            "d00ca1ba91f823d0bbea1e56b7a60f0bfb0ed20e"
        ],
        [
            "split; try apply MonotoneMax; red in |- *; auto.",
            "VernacExtend",
            "9136a7db0a2f906a7bb1cdfb16ace1417037e975"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Definition ToZeroP (r : R) (p : float) := (0 <= r)%R /\\ isMin b radix r p \\/ (r <= 0)%R /\\ isMax b radix r p.",
            "VernacDefinition",
            "30a44ade0653759f5ec1179eb3d0613bebceb30c"
        ],
        [
            "Theorem ToZeroTotal : TotalP ToZeroP.",
            "VernacStartTheoremProof",
            "c8c3d1202ae911bf657c1161d4e1e17ed84c3d66"
        ],
        [
            "red in |- *; intros r; case (Rle_or_lt r 0); intros H1.",
            "VernacExtend",
            "e68f7f475334811e95f8f0e96b4308d46bd4f27c"
        ],
        [
            "case MaxEx with (r := r) (3 := pGivesBound); auto with arith.",
            "VernacExtend",
            "27862fc82f45c97e0edb1d980fa496cbd4fd8bf8"
        ],
        [
            "intros x H'; exists x; red in |- *; auto.",
            "VernacExtend",
            "f7f817412e6994cdc5d85a961524d321f1ecc125"
        ],
        [
            "case MinEx with (r := r) (3 := pGivesBound); auto with arith.",
            "VernacExtend",
            "5d02dfc661eab9ef5e1ca2dfdc362a697bcecc04"
        ],
        [
            "intros x H'; exists x; red in |- *; left; split; auto.",
            "VernacExtend",
            "371247fbf1d5bc04352b2f20520e4128bbcc586a"
        ],
        [
            "apply Rlt_le; auto.",
            "VernacExtend",
            "4003e3e1c449ee89cad9e953d0a562db8235648c"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Theorem ToZeroCompatible : CompatibleP ToZeroP.",
            "VernacStartTheoremProof",
            "8c971502f7e38ba4325283347407a3a7a502fcd8"
        ],
        [
            "red in |- *.",
            "VernacExtend",
            "95a3fb9e13ce19fdc8e335912fb83e57a9512b14"
        ],
        [
            "intros r1 r2 p q H'; case H'.",
            "VernacExtend",
            "4b7e61c0c7b95c57f12bf570d5b9ba798b949abf"
        ],
        [
            "intros H'0 H'1 H'2; left; split; try apply MinCompatible with (p := p) (r1 := r1); try rewrite <- H'1; auto; case H'0; auto.",
            "VernacExtend",
            "513c64ca630073a7562e55602b06f772fc02a6fe"
        ],
        [
            "intros H'0 H'1 H'2; right; split; try apply MaxCompatible with (p := p) (r1 := r1); try rewrite <- H'1; auto; case H'0; auto.",
            "VernacExtend",
            "5b54055199b36711d281115881330be789155450"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Theorem ToZeroMinOrMax : MinOrMaxP ToZeroP.",
            "VernacStartTheoremProof",
            "49d95aa0d5e83a22f8cd4529fd5dde2395d07ff7"
        ],
        [
            "red in |- *.",
            "VernacExtend",
            "95a3fb9e13ce19fdc8e335912fb83e57a9512b14"
        ],
        [
            "intros r p H'; case H'; clear H'; intros H'; case H'; auto.",
            "VernacExtend",
            "a8fe2bb1c3c71c4d4a82154b47788fa82c9ec2ef"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Theorem ToZeroMonotone : MonotoneP radix ToZeroP.",
            "VernacStartTheoremProof",
            "418add449caefe604aa938fa6942cd058786d495"
        ],
        [
            "red in |- *.",
            "VernacExtend",
            "95a3fb9e13ce19fdc8e335912fb83e57a9512b14"
        ],
        [
            "cut (FtoR radix (Fzero (- dExp b)) = 0%R); [ intros Eq0 | unfold FtoR in |- *; simpl in |- * ]; auto with real.",
            "VernacExtend",
            "026fba538c440818165836785c38c819ed711707"
        ],
        [
            "simpl in |- *; intros p q p' q' H' H'0; case H'0; clear H'0.",
            "VernacExtend",
            "108248b0ead5dc24caeb5e60d40593855ae95372"
        ],
        [
            "intros H'0; elim H'0; intros H'1 H'2; clear H'0; intros H'0.",
            "VernacExtend",
            "eb1ca905cffa077bf0235738bf300dedd0fcd04e"
        ],
        [
            "case H'0; intros H'3; elim H'3; clear H'3; auto.",
            "VernacExtend",
            "58994a0a8fe505c2faa6f98bd6d81810e7ca3b87"
        ],
        [
            "intros H'3 H'4.",
            "VernacExtend",
            "7e89429bccb17ca06ae3048eafa07dcbd915b5be"
        ],
        [
            "apply (MonotoneMin b radix) with (p := p) (q := q); auto.",
            "VernacExtend",
            "2f9cfdd1e0437e739883f438009ce425c23fd9f4"
        ],
        [
            "intros H'3 H'4.",
            "VernacExtend",
            "7e89429bccb17ca06ae3048eafa07dcbd915b5be"
        ],
        [
            "apply Rle_trans with p; [ apply isMin_inv1 with (1 := H'2); auto | idtac ].",
            "VernacExtend",
            "490562bf46c04dcae436e23124e0b11495c0e86e"
        ],
        [
            "apply Rle_trans with q; [ idtac | apply isMax_inv1 with (1 := H'4) ]; auto.",
            "VernacExtend",
            "77c2747ac9073fd8cddb999a6783b21e66ffc130"
        ],
        [
            "apply Rlt_le; auto.",
            "VernacExtend",
            "4003e3e1c449ee89cad9e953d0a562db8235648c"
        ],
        [
            "intros H'0; elim H'0; intros H'1 H'2; clear H'0.",
            "VernacExtend",
            "32b9a1573cb307b1bde0b86498bfa558c313695f"
        ],
        [
            "intros H'0; case H'0; clear H'0; intros H'0; case H'0; intros H'3 H'4; clear H'0.",
            "VernacExtend",
            "a48cb46b58a84defb12850996cee2502ba7f6a22"
        ],
        [
            "apply Rle_trans with (FtoRradix (Fzero (- dExp b))); auto.",
            "VernacExtend",
            "ce05b0c508a8e0c4ec2880bbba07cb04586bb98e"
        ],
        [
            "elim H'2.",
            "VernacExtend",
            "843f6536389a5469f205c5fa0bb1d28140dd9955"
        ],
        [
            "intros H'0 H'5; elim H'5; intros H'6 H'7; apply H'7; clear H'5; auto.",
            "VernacExtend",
            "f95758c66c946ce9ae8d560ffd10c7e800355a63"
        ],
        [
            "repeat split; simpl in |- *; auto with zarith.",
            "VernacExtend",
            "3887b5c0ace93a706fbfe1f9aea736a5c30668c7"
        ],
        [
            "rewrite Eq0; auto.",
            "VernacExtend",
            "ccdd5552ef6de90246fd1494e32bdcc565e3917f"
        ],
        [
            "elim H'4.",
            "VernacExtend",
            "6b9f1f9423d39545e0007ba27d262903c68547c3"
        ],
        [
            "intros H'0 H'5; elim H'5; intros H'6 H'7; apply H'7; clear H'5; auto.",
            "VernacExtend",
            "f95758c66c946ce9ae8d560ffd10c7e800355a63"
        ],
        [
            "repeat split; simpl in |- *; auto with zarith.",
            "VernacExtend",
            "3887b5c0ace93a706fbfe1f9aea736a5c30668c7"
        ],
        [
            "rewrite Eq0; auto.",
            "VernacExtend",
            "ccdd5552ef6de90246fd1494e32bdcc565e3917f"
        ],
        [
            "apply (MonotoneMax b radix) with (p := p) (q := q); auto.",
            "VernacExtend",
            "5da164f769a1ecde6e043bb75d97d7674b483efa"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Theorem ToZeroRoundedModeP : RoundedModeP ToZeroP.",
            "VernacStartTheoremProof",
            "d30e0f088f32dc94675720e80c8d16a1a791470f"
        ],
        [
            "repeat split.",
            "VernacExtend",
            "7968f2448e3e51b1de42f5c433248f4a827b4da2"
        ],
        [
            "try exact ToZeroTotal.",
            "VernacExtend",
            "9abb4d09c1c85085d104e339709b31da84294b79"
        ],
        [
            "try exact ToZeroCompatible.",
            "VernacExtend",
            "26735b8360250af7d97471e6015687e584a72742"
        ],
        [
            "try exact ToZeroMinOrMax.",
            "VernacExtend",
            "34745985acdf531c0cecde17e54368f052871744"
        ],
        [
            "try exact ToZeroMonotone.",
            "VernacExtend",
            "c2092009945deb172c4299f8eddac17ce79363cb"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Definition ToInfinityP (r : R) (p : float) := (r <= 0)%R /\\ isMin b radix r p \\/ (0 <= r)%R /\\ isMax b radix r p.",
            "VernacDefinition",
            "35e599d0fea980b8e093790c900f232aa2e9dbf2"
        ],
        [
            "Theorem ToInfinityTotal : TotalP ToInfinityP.",
            "VernacStartTheoremProof",
            "5f965f1263df49c904cdd82c19fb1bb0d342dd30"
        ],
        [
            "red in |- *; intros r; case (Rle_or_lt r 0); intros H1.",
            "VernacExtend",
            "e68f7f475334811e95f8f0e96b4308d46bd4f27c"
        ],
        [
            "case MinEx with (r := r) (3 := pGivesBound); auto with arith.",
            "VernacExtend",
            "5d02dfc661eab9ef5e1ca2dfdc362a697bcecc04"
        ],
        [
            "intros x H'; exists x; red in |- *; auto.",
            "VernacExtend",
            "f7f817412e6994cdc5d85a961524d321f1ecc125"
        ],
        [
            "case MaxEx with (r := r) (3 := pGivesBound); auto with arith.",
            "VernacExtend",
            "27862fc82f45c97e0edb1d980fa496cbd4fd8bf8"
        ],
        [
            "intros x H'; exists x; red in |- *; right; split; auto.",
            "VernacExtend",
            "5a4d0aefb9398cabaeb52dfc758bec73ba2a90ac"
        ],
        [
            "apply Rlt_le; auto.",
            "VernacExtend",
            "4003e3e1c449ee89cad9e953d0a562db8235648c"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Theorem ToInfinityCompatible : CompatibleP ToInfinityP.",
            "VernacStartTheoremProof",
            "9070997e1e168dccbe540198ce2713b062341167"
        ],
        [
            "red in |- *.",
            "VernacExtend",
            "95a3fb9e13ce19fdc8e335912fb83e57a9512b14"
        ],
        [
            "intros r1 r2 p q H'; case H'.",
            "VernacExtend",
            "4b7e61c0c7b95c57f12bf570d5b9ba798b949abf"
        ],
        [
            "intros H'0 H'1 H'2; left; split; try apply MinCompatible with (p := p) (r1 := r1); try rewrite <- H'1; case H'0; auto.",
            "VernacExtend",
            "2ffba19e455d5d1dd54bb66a0686262fc8222b76"
        ],
        [
            "intros H'0 H'1 H'2; right; split; try apply MaxCompatible with (p := p) (r1 := r1); try rewrite <- H'1; case H'0; auto.",
            "VernacExtend",
            "0d432ec87af8c1629f121eb1ced77f2a3a9eaf54"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Theorem ToInfinityMinOrMax : MinOrMaxP ToInfinityP.",
            "VernacStartTheoremProof",
            "6d5804672e4818ce75804daee9404f0d9508baa3"
        ],
        [
            "red in |- *.",
            "VernacExtend",
            "95a3fb9e13ce19fdc8e335912fb83e57a9512b14"
        ],
        [
            "intros r p H'; case H'; clear H'; intros H'; case H'; auto.",
            "VernacExtend",
            "a8fe2bb1c3c71c4d4a82154b47788fa82c9ec2ef"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Theorem ToInfinityMonotone : MonotoneP radix ToInfinityP.",
            "VernacStartTheoremProof",
            "03ac5d0ac84e465836f50ebe1af45f5534a611ad"
        ],
        [
            "red in |- *; simpl in |- *.",
            "VernacExtend",
            "713f75622b4bcaa4944fbc549f338fab2a7169b4"
        ],
        [
            "cut (FtoR radix (Fzero (- dExp b)) = 0%R); [ intros Eq0 | unfold FtoR in |- *; simpl in |- * ]; auto with real.",
            "VernacExtend",
            "026fba538c440818165836785c38c819ed711707"
        ],
        [
            "intros p q p' q' H' H'0; case H'0; clear H'0.",
            "VernacExtend",
            "f8e88ee5ce3f70f1e5549e773e6346a709ee56f7"
        ],
        [
            "intros H'0; elim H'0; intros H'1 H'2; clear H'0; intros H'0.",
            "VernacExtend",
            "eb1ca905cffa077bf0235738bf300dedd0fcd04e"
        ],
        [
            "case H'0; intros H'3; elim H'3; clear H'3; auto.",
            "VernacExtend",
            "58994a0a8fe505c2faa6f98bd6d81810e7ca3b87"
        ],
        [
            "intros H'3 H'4.",
            "VernacExtend",
            "7e89429bccb17ca06ae3048eafa07dcbd915b5be"
        ],
        [
            "apply (MonotoneMin b radix) with (p := p) (q := q); auto.",
            "VernacExtend",
            "2f9cfdd1e0437e739883f438009ce425c23fd9f4"
        ],
        [
            "intros H'3 H'4.",
            "VernacExtend",
            "7e89429bccb17ca06ae3048eafa07dcbd915b5be"
        ],
        [
            "apply Rle_trans with p; [ apply isMin_inv1 with (1 := H'2); auto | idtac ].",
            "VernacExtend",
            "490562bf46c04dcae436e23124e0b11495c0e86e"
        ],
        [
            "apply Rle_trans with q; [ auto | apply isMax_inv1 with (1 := H'4) ]; auto.",
            "VernacExtend",
            "3ae0a345a07a6773920c59f7b61acf7d3ece93b4"
        ],
        [
            "apply Rlt_le; auto.",
            "VernacExtend",
            "4003e3e1c449ee89cad9e953d0a562db8235648c"
        ],
        [
            "intros H'0; elim H'0; intros H'1 H'2; clear H'0.",
            "VernacExtend",
            "32b9a1573cb307b1bde0b86498bfa558c313695f"
        ],
        [
            "intros H'0; case H'0; clear H'0; intros H'0; case H'0; intros H'3 H'4; clear H'0.",
            "VernacExtend",
            "a48cb46b58a84defb12850996cee2502ba7f6a22"
        ],
        [
            "2: apply (MonotoneMax b radix) with (p := p) (q := q); auto.",
            "VernacExtend",
            "1d3db02b7df221e7c4a00af0d414cddb0097a0a3"
        ],
        [
            "apply Rle_trans with (FtoRradix (Fzero (- dExp b))); auto.",
            "VernacExtend",
            "ce05b0c508a8e0c4ec2880bbba07cb04586bb98e"
        ],
        [
            "elim H'2.",
            "VernacExtend",
            "843f6536389a5469f205c5fa0bb1d28140dd9955"
        ],
        [
            "intros H'0 H'5; elim H'5; intros H'6 H'7; apply H'7; clear H'5; auto.",
            "VernacExtend",
            "f95758c66c946ce9ae8d560ffd10c7e800355a63"
        ],
        [
            "repeat split; simpl in |- *; auto with zarith.",
            "VernacExtend",
            "3887b5c0ace93a706fbfe1f9aea736a5c30668c7"
        ],
        [
            "apply Rle_trans with q; auto.",
            "VernacExtend",
            "006f2e8d634e24fb5bd736ea5548e0e9046485f8"
        ],
        [
            "apply Rlt_le; auto.",
            "VernacExtend",
            "4003e3e1c449ee89cad9e953d0a562db8235648c"
        ],
        [
            "rewrite Eq0; auto.",
            "VernacExtend",
            "ccdd5552ef6de90246fd1494e32bdcc565e3917f"
        ],
        [
            "elim H'4.",
            "VernacExtend",
            "6b9f1f9423d39545e0007ba27d262903c68547c3"
        ],
        [
            "intros H'0 H'5; elim H'5; intros H'6 H'7; apply H'7; clear H'5; auto.",
            "VernacExtend",
            "f95758c66c946ce9ae8d560ffd10c7e800355a63"
        ],
        [
            "repeat split; simpl in |- *; auto with zarith.",
            "VernacExtend",
            "3887b5c0ace93a706fbfe1f9aea736a5c30668c7"
        ],
        [
            "apply Rle_trans with p; auto.",
            "VernacExtend",
            "338aaf54f5c09fb229605527d7fafbeaece370ea"
        ],
        [
            "rewrite Eq0; auto.",
            "VernacExtend",
            "ccdd5552ef6de90246fd1494e32bdcc565e3917f"
        ],
        [
            "apply Rlt_le; auto.",
            "VernacExtend",
            "4003e3e1c449ee89cad9e953d0a562db8235648c"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Theorem ToInfinityRoundedModeP : RoundedModeP ToInfinityP.",
            "VernacStartTheoremProof",
            "c1d23ee12ead2e2ffaf6f937c45a8af0d7c4ab8d"
        ],
        [
            "repeat split.",
            "VernacExtend",
            "7968f2448e3e51b1de42f5c433248f4a827b4da2"
        ],
        [
            "try exact ToInfinityTotal.",
            "VernacExtend",
            "225cee8db1df9d966372f7ad6f91f0f78309f0d4"
        ],
        [
            "try exact ToInfinityCompatible.",
            "VernacExtend",
            "5ba91ba360fa81aa3749d88b0ecd82182b560efc"
        ],
        [
            "try exact ToInfinityMinOrMax.",
            "VernacExtend",
            "3e229f696274262502033b7a58b41c5deb3bb4bf"
        ],
        [
            "try exact ToInfinityMonotone.",
            "VernacExtend",
            "d9a695a1215ded9db851be8f8e07faf77d2b00ff"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Theorem MinUniqueP : UniqueP (isMin b radix).",
            "VernacStartTheoremProof",
            "d27042da19ddaf05528afc7ac3a9617c77691065"
        ],
        [
            "red in |- *.",
            "VernacExtend",
            "95a3fb9e13ce19fdc8e335912fb83e57a9512b14"
        ],
        [
            "intros r p q H' H'0.",
            "VernacExtend",
            "3d96de46becba4bee1ccd2381681247033d89019"
        ],
        [
            "unfold FtoRradix in |- *; apply MinEq with (1 := H'); auto.",
            "VernacExtend",
            "78850125fa3960e9e483b1552fb5a02056bb4e53"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Theorem MaxUniqueP : UniqueP (isMax b radix).",
            "VernacStartTheoremProof",
            "c5499cef68c583035f98971c81f3bb633cef54be"
        ],
        [
            "red in |- *.",
            "VernacExtend",
            "95a3fb9e13ce19fdc8e335912fb83e57a9512b14"
        ],
        [
            "intros r p q H' H'0.",
            "VernacExtend",
            "3d96de46becba4bee1ccd2381681247033d89019"
        ],
        [
            "unfold FtoRradix in |- *; apply MaxEq with (1 := H'); auto.",
            "VernacExtend",
            "7d0372906919e0df13f3f5bc7fe2eb3b7d23a458"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Theorem ToZeroUniqueP : UniqueP ToZeroP.",
            "VernacStartTheoremProof",
            "87f93631a84cf138f8af13062e0468d27db70de5"
        ],
        [
            "red in |- *.",
            "VernacExtend",
            "95a3fb9e13ce19fdc8e335912fb83e57a9512b14"
        ],
        [
            "intros r p q H' H'0.",
            "VernacExtend",
            "3d96de46becba4bee1ccd2381681247033d89019"
        ],
        [
            "inversion H'; inversion H'0; elim H0; elim H; clear H0 H; intros H'1 H'2 H'3 H'4.",
            "VernacExtend",
            "c15c48df683173c4060ee3efe8ecf73220df5ccb"
        ],
        [
            "apply (MinUniqueP r); auto.",
            "VernacExtend",
            "76727f82254253df156bf18f160999614638c054"
        ],
        [
            "cut (r = Fzero (- dExp b) :>R); [ intros Eq0 | apply Rle_antisym; unfold FtoRradix, Fzero, FtoR in |- *; simpl in |- * ]; try rewrite Rmult_0_l; auto with real.",
            "VernacExtend",
            "e5f3de34b5cc7b0bfee58a8cd30be06aad6beba0"
        ],
        [
            "apply trans_eq with (FtoRradix (Fzero (- dExp b))).",
            "VernacExtend",
            "e3ddf64985648840e3f0830d8e1022e0b70fc306"
        ],
        [
            "apply sym_eq; unfold FtoRradix in |- *; apply (RoundedProjector _ ToZeroRoundedModeP); auto with float.",
            "VernacExtend",
            "f4588010e416f1531927aba3cdac63c4b5289efe"
        ],
        [
            "unfold FtoRradix in Eq0; rewrite <- Eq0; auto.",
            "VernacExtend",
            "51f0248dc4cccd5ffecea9640b31160d1e86720b"
        ],
        [
            "unfold FtoRradix in |- *; apply (RoundedProjector _ ToZeroRoundedModeP); auto with float.",
            "VernacExtend",
            "a841045152461acc2abfde197c3510b4dd3fb2d2"
        ],
        [
            "unfold FtoRradix in Eq0; rewrite <- Eq0; auto.",
            "VernacExtend",
            "51f0248dc4cccd5ffecea9640b31160d1e86720b"
        ],
        [
            "cut (r = Fzero (- dExp b) :>R); [ intros Eq0 | apply Rle_antisym; unfold FtoRradix, Fzero, FtoR in |- *; simpl in |- * ]; try rewrite Rmult_0_l; auto with real.",
            "VernacExtend",
            "e5f3de34b5cc7b0bfee58a8cd30be06aad6beba0"
        ],
        [
            "apply trans_eq with (FtoRradix (Fzero (- dExp b))).",
            "VernacExtend",
            "e3ddf64985648840e3f0830d8e1022e0b70fc306"
        ],
        [
            "apply sym_eq; unfold FtoRradix in |- *; apply (RoundedProjector _ ToZeroRoundedModeP); auto with float.",
            "VernacExtend",
            "f4588010e416f1531927aba3cdac63c4b5289efe"
        ],
        [
            "unfold FtoRradix in Eq0; rewrite <- Eq0; auto.",
            "VernacExtend",
            "51f0248dc4cccd5ffecea9640b31160d1e86720b"
        ],
        [
            "unfold FtoRradix in |- *; apply (RoundedProjector _ ToZeroRoundedModeP); auto with float.",
            "VernacExtend",
            "a841045152461acc2abfde197c3510b4dd3fb2d2"
        ],
        [
            "unfold FtoRradix in Eq0; rewrite <- Eq0; auto.",
            "VernacExtend",
            "51f0248dc4cccd5ffecea9640b31160d1e86720b"
        ],
        [
            "apply (MaxUniqueP r); auto.",
            "VernacExtend",
            "af7903184d6603d2c9e2a946b949600c5cab16d5"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Theorem ToInfinityUniqueP : UniqueP ToInfinityP.",
            "VernacStartTheoremProof",
            "2942b073541df64f971d4a68f8f98316778b3ff8"
        ],
        [
            "red in |- *.",
            "VernacExtend",
            "95a3fb9e13ce19fdc8e335912fb83e57a9512b14"
        ],
        [
            "intros r p q H' H'0.",
            "VernacExtend",
            "3d96de46becba4bee1ccd2381681247033d89019"
        ],
        [
            "inversion H'; inversion H'0; elim H0; elim H; clear H0 H; intros H'1 H'2 H'3 H'4.",
            "VernacExtend",
            "c15c48df683173c4060ee3efe8ecf73220df5ccb"
        ],
        [
            "apply (MinUniqueP r); auto.",
            "VernacExtend",
            "76727f82254253df156bf18f160999614638c054"
        ],
        [
            "cut (r = Fzero (- dExp b) :>R); [ intros Eq0 | apply Rle_antisym; unfold FtoRradix, Fzero, FtoR in |- *; simpl in |- * ]; try rewrite Rmult_0_l; auto with real.",
            "VernacExtend",
            "e5f3de34b5cc7b0bfee58a8cd30be06aad6beba0"
        ],
        [
            "apply trans_eq with (FtoRradix (Fzero (- dExp b))).",
            "VernacExtend",
            "e3ddf64985648840e3f0830d8e1022e0b70fc306"
        ],
        [
            "apply sym_eq; unfold FtoRradix in |- *; apply (RoundedProjector _ ToInfinityRoundedModeP); auto.",
            "VernacExtend",
            "dedd9a5d5332a9d7e9633966f14fce5892120596"
        ],
        [
            "apply FboundedFzero; auto.",
            "VernacExtend",
            "8d0d3171dfdcd871c85f5387344c815eca8c2e6c"
        ],
        [
            "unfold FtoRradix in Eq0; rewrite <- Eq0; auto.",
            "VernacExtend",
            "51f0248dc4cccd5ffecea9640b31160d1e86720b"
        ],
        [
            "unfold FtoRradix in |- *; apply (RoundedProjector _ ToInfinityRoundedModeP); auto.",
            "VernacExtend",
            "fb4ec17ef4fae94e267ad542ad1fc7b756a6205a"
        ],
        [
            "apply FboundedFzero; auto.",
            "VernacExtend",
            "8d0d3171dfdcd871c85f5387344c815eca8c2e6c"
        ],
        [
            "unfold FtoRradix in Eq0; rewrite <- Eq0; auto.",
            "VernacExtend",
            "51f0248dc4cccd5ffecea9640b31160d1e86720b"
        ],
        [
            "cut (r = Fzero (- dExp b) :>R); [ intros Eq0 | apply Rle_antisym; unfold FtoRradix, Fzero, FtoR in |- *; simpl in |- * ]; try rewrite Rmult_0_l; auto with float.",
            "VernacExtend",
            "ba28a90dd9ce03f72181e665e0cac602546de52f"
        ],
        [
            "apply trans_eq with (FtoRradix (Fzero (- dExp b))).",
            "VernacExtend",
            "e3ddf64985648840e3f0830d8e1022e0b70fc306"
        ],
        [
            "apply sym_eq; unfold FtoRradix in |- *; apply (RoundedProjector _ ToInfinityRoundedModeP); auto.",
            "VernacExtend",
            "dedd9a5d5332a9d7e9633966f14fce5892120596"
        ],
        [
            "apply FboundedFzero; auto.",
            "VernacExtend",
            "8d0d3171dfdcd871c85f5387344c815eca8c2e6c"
        ],
        [
            "unfold FtoRradix in Eq0; rewrite <- Eq0; auto.",
            "VernacExtend",
            "51f0248dc4cccd5ffecea9640b31160d1e86720b"
        ],
        [
            "unfold FtoRradix in |- *; apply (RoundedProjector _ ToInfinityRoundedModeP); auto.",
            "VernacExtend",
            "fb4ec17ef4fae94e267ad542ad1fc7b756a6205a"
        ],
        [
            "apply FboundedFzero; auto.",
            "VernacExtend",
            "8d0d3171dfdcd871c85f5387344c815eca8c2e6c"
        ],
        [
            "unfold FtoRradix in Eq0; rewrite <- Eq0; auto.",
            "VernacExtend",
            "51f0248dc4cccd5ffecea9640b31160d1e86720b"
        ],
        [
            "apply (MaxUniqueP r); auto.",
            "VernacExtend",
            "af7903184d6603d2c9e2a946b949600c5cab16d5"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Theorem MinOrMaxRep : forall P, MinOrMaxP P -> forall p q : float, P p q -> exists m : Z, q = Float m (Fexp p) :>R.",
            "VernacStartTheoremProof",
            "44ac9a9e55d75c19c00895f49fb935dd76f1b806"
        ],
        [
            "intros P H' p q H'0; case (H' p q); auto; intros H'1.",
            "VernacExtend",
            "28ff531486a34d586ddf2db4ebfcf862df7629f3"
        ],
        [
            "apply FminRep with (3 := pGivesBound); auto with arith.",
            "VernacExtend",
            "a33f0585a9d6d6e97538698cdd3e495f817cd4aa"
        ],
        [
            "apply FmaxRep with (3 := pGivesBound); auto with arith.",
            "VernacExtend",
            "599335d435996899c526121e10b61d9adf8bb856"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Theorem RoundedModeRep : forall P, RoundedModeP P -> forall p q : float, P p q -> exists m : Z, q = Float m (Fexp p) :>R.",
            "VernacStartTheoremProof",
            "765de18728ec89b842a14fa49b52a69a5659adb9"
        ],
        [
            "intros P H' p q H'0.",
            "VernacExtend",
            "13fa0cadd43479f697743cb37392bdfa68be5f73"
        ],
        [
            "apply MinOrMaxRep with (P := P); auto with inv.",
            "VernacExtend",
            "0da0b1df2f732448fbc4d0154346b722af4bf3d7"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Definition SymmetricP (P : R -> float -> Prop) := forall (r : R) (p : float), P r p -> P (- r)%R (Fopp p).",
            "VernacDefinition",
            "70afcd70b3bf733c2b24922c98802f4c4c0e38ef"
        ],
        [
            "Theorem ToZeroSymmetric : SymmetricP ToZeroP.",
            "VernacStartTheoremProof",
            "360d9c5ce5a36680a09e349a10b985ef0e8a050a"
        ],
        [
            "red in |- *; intros r p H'; case H'; clear H'; intros H'; case H'; intros H'1 H'2.",
            "VernacExtend",
            "64eb857d67a325ad80bfe569d46d3bb21d81aa63"
        ],
        [
            "right; split; auto.",
            "VernacExtend",
            "1cc5054ad1405940e563f1d7ddce468251301130"
        ],
        [
            "replace 0%R with (-0)%R; auto with real.",
            "VernacExtend",
            "ad9a3c816968bd85bd0ee7d9d06b032f07b0b811"
        ],
        [
            "apply MinOppMax; auto.",
            "VernacExtend",
            "0fec64c792ef999fa521035703cda12deccec153"
        ],
        [
            "left; split; auto.",
            "VernacExtend",
            "839f21d27eb3d8616b1c18bc30b38cff7c9f8eb4"
        ],
        [
            "replace 0%R with (-0)%R; auto with real.",
            "VernacExtend",
            "ad9a3c816968bd85bd0ee7d9d06b032f07b0b811"
        ],
        [
            "apply MaxOppMin; auto.",
            "VernacExtend",
            "ca43e124679cf947c4770757f3a04dffa5d11ca7"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Theorem ToInfinitySymmetric : SymmetricP ToInfinityP.",
            "VernacStartTheoremProof",
            "69f5331054d60fa9791a5c4293bc9f57b5368645"
        ],
        [
            "red in |- *; intros r p H'; case H'; clear H'; intros H'; case H'; intros H'1 H'2.",
            "VernacExtend",
            "64eb857d67a325ad80bfe569d46d3bb21d81aa63"
        ],
        [
            "right; split; auto.",
            "VernacExtend",
            "1cc5054ad1405940e563f1d7ddce468251301130"
        ],
        [
            "replace 0%R with (-0)%R; auto with real.",
            "VernacExtend",
            "ad9a3c816968bd85bd0ee7d9d06b032f07b0b811"
        ],
        [
            "apply MinOppMax; auto.",
            "VernacExtend",
            "0fec64c792ef999fa521035703cda12deccec153"
        ],
        [
            "left; split; auto.",
            "VernacExtend",
            "839f21d27eb3d8616b1c18bc30b38cff7c9f8eb4"
        ],
        [
            "replace 0%R with (-0)%R; auto with real.",
            "VernacExtend",
            "ad9a3c816968bd85bd0ee7d9d06b032f07b0b811"
        ],
        [
            "apply MaxOppMin; auto.",
            "VernacExtend",
            "ca43e124679cf947c4770757f3a04dffa5d11ca7"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Theorem ScalableRoundedModeP : forall P (f s t : float), RoundedModeP P -> Fbounded b f -> P (radix * f)%R s -> P (s / radix)%R t -> f = t :>R.",
            "VernacStartTheoremProof",
            "07e4344473f9651667f749a5f1b8d22c5d7a263d"
        ],
        [
            "intros P f s t HP Ff H1 H2.",
            "VernacExtend",
            "372313c5a39a77a8e1b6317841c568b9e30f256e"
        ],
        [
            "cut (ProjectorP b radix P); [ unfold ProjectorP in |- *; intros HP2 | apply RoundedProjector; auto ].",
            "VernacExtend",
            "20639fc382cf4c57e741311e92b4f944769deac9"
        ],
        [
            "cut (FtoR radix (Float (Fnum f) (Zsucc (Fexp f))) = (radix * FtoR radix f)%R); [ intros V | idtac].",
            "VernacExtend",
            "1299bb6b8b09abeefc286324743c95e83ed6fe25"
        ],
        [
            "2: unfold FtoR, Zsucc in |- *; simpl in |- *; ring_simplify.",
            "VernacExtend",
            "f58ffa7f65cdb6acd4d73ffb8423948f53fc8ac3"
        ],
        [
            "2: rewrite powerRZ_add; [ simpl in |- *; ring | auto with zarith real ].",
            "VernacExtend",
            "655bc3396702689b60eaa345b5d096166564627b"
        ],
        [
            "unfold FtoRradix in |- *; apply HP2; auto.",
            "VernacExtend",
            "9abe882c174b335839fe0154b58e0671b76224bb"
        ],
        [
            "replace (FtoR radix f) with (FtoR radix s / radix)%R; auto.",
            "VernacExtend",
            "5c38f283d72d592ca502c5f18113386e10dece7e"
        ],
        [
            "replace (FtoR radix s) with (radix * FtoR radix f)%R; [ unfold Rdiv in |- * | rewrite <- V ].",
            "VernacExtend",
            "a21c79ebcaedc96b775b82b479a01af7a8657974"
        ],
        [
            "rewrite Rmult_comm; rewrite <- Rmult_assoc; rewrite Rinv_l; auto with real zarith.",
            "VernacExtend",
            "39e9b1e6359e6a42030ae321bc3212abf0dd58bb"
        ],
        [
            "apply HP2; auto with float.",
            "VernacExtend",
            "69fff8dd549563d4f1dde73d75572c9f3dd74c42"
        ],
        [
            "repeat (split; simpl in |- *; auto with zarith float).",
            "VernacExtend",
            "28acd098701f18c25423a49216c4989a4cb1b3a0"
        ],
        [
            "rewrite V; auto.",
            "VernacExtend",
            "cdbf39212179c2d69106e0d4ab294d0cc7e0e438"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Theorem RoundLessThanIsMax : forall P, RoundedModeP P -> forall (p m : float) (x : R), P x p -> isMax b radix x m -> (p <= m)%R.",
            "VernacStartTheoremProof",
            "b66c243f88d69add966382d0ed158b9d2a9aab04"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "elim H; intros.",
            "VernacExtend",
            "79e1c8a1444242deed6d2876e3fe7bb2cf051f26"
        ],
        [
            "elim H3; intros H' H'0; clear H3.",
            "VernacExtend",
            "8c5fc960c74899824fbd48c3bec6a7d3d491d602"
        ],
        [
            "elim H'0; intros; clear H'0.",
            "VernacExtend",
            "037b4eb5472e123c0e699e43f69e3ec048a6a82c"
        ],
        [
            "case (H3 x p); auto.",
            "VernacExtend",
            "1d884c029ebf2e1092490683acf3a1ccd06d2a3c"
        ],
        [
            "intros; apply Rle_trans with x; auto.",
            "VernacExtend",
            "8af537e4b9eec26f1911c08af56f27bc7caaa910"
        ],
        [
            "elim H5; intros; elim H7; intros; auto with real.",
            "VernacExtend",
            "e924e51388511410c11a30dfa19323ff892a2102"
        ],
        [
            "elim H1; intros; elim H7; intros; auto with real.",
            "VernacExtend",
            "0ce5401d9186a7118f22ee0f2b6eb74853393475"
        ],
        [
            "intros; replace (FtoRradix p) with (FtoRradix m); auto with real.",
            "VernacExtend",
            "c00d74eb147f3a1dfb278dbdb6245abd2a1dca8d"
        ],
        [
            "unfold FtoRradix in |- *; apply MaxEq with b x; auto.",
            "VernacExtend",
            "5d0a38c1c5e695c179e943a1f4537ffcee2d8950"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "End FRound.",
            "VernacEndSegment",
            "e24bb86e8828a48df022f2c96368117e3bad9355"
        ],
        [
            "Hint Resolve RoundedProjector MinCompatible MinRoundedModeP MaxCompatible MaxRoundedModeP ToZeroTotal ToZeroCompatible ToZeroMinOrMax ToZeroMonotone ToZeroRoundedModeP ToInfinityTotal ToInfinityCompatible ToInfinityMinOrMax ToInfinityMonotone ToInfinityRoundedModeP MinUniqueP MaxUniqueP ToZeroUniqueP ToInfinityUniqueP FnOddNEven ToZeroSymmetric ToInfinitySymmetric: float.",
            "VernacHints",
            "3eccab08f3e2901e0317e91546c7db6432bae4f7"
        ],
        [
            "Hint Resolve RoundedModeP_inv1 RoundedModeP_inv2 RoundedModeP_inv3 RoundedModeP_inv4: inv.",
            "VernacHints",
            "d33f11d056f00574038a67071c4492827026d9d5"
        ]
    ],
    "proofs": [
        {
            "name": "RoundedModeP_inv1",
            "line_nb": 16,
            "steps": [
                {
                    "command": [
                        "intros P H; case H; auto.",
                        "VernacExtend",
                        "f61b0bfb94788cbcf5ba626263e9762294c2e23f"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "RoundedModeP_inv2",
            "line_nb": 19,
            "steps": [
                {
                    "command": [
                        "intros P H; Casec H; intros H H1; Casec H1; auto.",
                        "VernacExtend",
                        "9cc724062da7d627c7779966cdf03dfffb8b2ee0"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "RoundedModeP_inv3",
            "line_nb": 22,
            "steps": [
                {
                    "command": [
                        "intros P H; Casec H; intros H H1; Casec H1; intros H1 H2; Casec H2; auto.",
                        "VernacExtend",
                        "391ebfcd59559954605bbfa6a12851e917a44db2"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "RoundedModeP_inv4",
            "line_nb": 25,
            "steps": [
                {
                    "command": [
                        "intros P H; Casec H; intros H H1; Casec H1; intros H1 H2; Casec H2; auto.",
                        "VernacExtend",
                        "391ebfcd59559954605bbfa6a12851e917a44db2"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "MinCompatible",
            "line_nb": 37,
            "steps": [
                {
                    "command": [
                        "red in |- *.",
                        "VernacExtend",
                        "95a3fb9e13ce19fdc8e335912fb83e57a9512b14"
                    ]
                },
                {
                    "command": [
                        "intros r1 r2 p q H' H'0 H'1 H'2; split; auto.",
                        "VernacExtend",
                        "4ab3135ad7e9c17e9a0197aabe93c979a54c451e"
                    ]
                },
                {
                    "command": [
                        "rewrite <- H'0; unfold FtoRradix in H'1; rewrite <- H'1; case H'; auto.",
                        "VernacExtend",
                        "cb330bbb44015ec18842e16ece4a34ef75a2b651"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "MinRoundedModeP",
            "line_nb": 42,
            "steps": [
                {
                    "command": [
                        "split; try red in |- *.",
                        "VernacExtend",
                        "6f7585842bc893a45441962eea0be50c6b8d3847"
                    ]
                },
                {
                    "command": [
                        "intros r; apply MinEx with (precision := precision); auto with arith.",
                        "VernacExtend",
                        "4f3b19eddc3a67e968e10b871611dca7e1e1c3bf"
                    ]
                },
                {
                    "command": [
                        "split; try exact MinCompatible.",
                        "VernacExtend",
                        "6c58ae9069a663f58a684434bd1213ef7c9cb7e0"
                    ]
                },
                {
                    "command": [
                        "split; try apply MonotoneMin; red in |- *; auto.",
                        "VernacExtend",
                        "e61573cb356e9a80e771484d0bbb3e5893c8884a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "MaxCompatible",
            "line_nb": 48,
            "steps": [
                {
                    "command": [
                        "red in |- *.",
                        "VernacExtend",
                        "95a3fb9e13ce19fdc8e335912fb83e57a9512b14"
                    ]
                },
                {
                    "command": [
                        "intros r1 r2 p q H' H'0 H'1 H'2; split; auto.",
                        "VernacExtend",
                        "4ab3135ad7e9c17e9a0197aabe93c979a54c451e"
                    ]
                },
                {
                    "command": [
                        "rewrite <- H'0; unfold FtoRradix in H'1; rewrite <- H'1; case H'; auto.",
                        "VernacExtend",
                        "cb330bbb44015ec18842e16ece4a34ef75a2b651"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "MaxRoundedModeP",
            "line_nb": 53,
            "steps": [
                {
                    "command": [
                        "split; try red in |- *.",
                        "VernacExtend",
                        "6f7585842bc893a45441962eea0be50c6b8d3847"
                    ]
                },
                {
                    "command": [
                        "intros r; apply MaxEx with (precision := precision); auto with arith.",
                        "VernacExtend",
                        "017d502003ad4d7f02ad7f5669d58c936691fc2d"
                    ]
                },
                {
                    "command": [
                        "split; try exact MaxCompatible.",
                        "VernacExtend",
                        "d00ca1ba91f823d0bbea1e56b7a60f0bfb0ed20e"
                    ]
                },
                {
                    "command": [
                        "split; try apply MonotoneMax; red in |- *; auto.",
                        "VernacExtend",
                        "9136a7db0a2f906a7bb1cdfb16ace1417037e975"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "ToZeroTotal",
            "line_nb": 60,
            "steps": [
                {
                    "command": [
                        "red in |- *; intros r; case (Rle_or_lt r 0); intros H1.",
                        "VernacExtend",
                        "e68f7f475334811e95f8f0e96b4308d46bd4f27c"
                    ]
                },
                {
                    "command": [
                        "case MaxEx with (r := r) (3 := pGivesBound); auto with arith.",
                        "VernacExtend",
                        "27862fc82f45c97e0edb1d980fa496cbd4fd8bf8"
                    ]
                },
                {
                    "command": [
                        "intros x H'; exists x; red in |- *; auto.",
                        "VernacExtend",
                        "f7f817412e6994cdc5d85a961524d321f1ecc125"
                    ]
                },
                {
                    "command": [
                        "case MinEx with (r := r) (3 := pGivesBound); auto with arith.",
                        "VernacExtend",
                        "5d02dfc661eab9ef5e1ca2dfdc362a697bcecc04"
                    ]
                },
                {
                    "command": [
                        "intros x H'; exists x; red in |- *; left; split; auto.",
                        "VernacExtend",
                        "371247fbf1d5bc04352b2f20520e4128bbcc586a"
                    ]
                },
                {
                    "command": [
                        "apply Rlt_le; auto.",
                        "VernacExtend",
                        "4003e3e1c449ee89cad9e953d0a562db8235648c"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "ToZeroCompatible",
            "line_nb": 68,
            "steps": [
                {
                    "command": [
                        "red in |- *.",
                        "VernacExtend",
                        "95a3fb9e13ce19fdc8e335912fb83e57a9512b14"
                    ]
                },
                {
                    "command": [
                        "intros r1 r2 p q H'; case H'.",
                        "VernacExtend",
                        "4b7e61c0c7b95c57f12bf570d5b9ba798b949abf"
                    ]
                },
                {
                    "command": [
                        "intros H'0 H'1 H'2; left; split; try apply MinCompatible with (p := p) (r1 := r1); try rewrite <- H'1; auto; case H'0; auto.",
                        "VernacExtend",
                        "513c64ca630073a7562e55602b06f772fc02a6fe"
                    ]
                },
                {
                    "command": [
                        "intros H'0 H'1 H'2; right; split; try apply MaxCompatible with (p := p) (r1 := r1); try rewrite <- H'1; auto; case H'0; auto.",
                        "VernacExtend",
                        "5b54055199b36711d281115881330be789155450"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "ToZeroMinOrMax",
            "line_nb": 74,
            "steps": [
                {
                    "command": [
                        "red in |- *.",
                        "VernacExtend",
                        "95a3fb9e13ce19fdc8e335912fb83e57a9512b14"
                    ]
                },
                {
                    "command": [
                        "intros r p H'; case H'; clear H'; intros H'; case H'; auto.",
                        "VernacExtend",
                        "a8fe2bb1c3c71c4d4a82154b47788fa82c9ec2ef"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "ToZeroMonotone",
            "line_nb": 78,
            "steps": [
                {
                    "command": [
                        "red in |- *.",
                        "VernacExtend",
                        "95a3fb9e13ce19fdc8e335912fb83e57a9512b14"
                    ]
                },
                {
                    "command": [
                        "cut (FtoR radix (Fzero (- dExp b)) = 0%R); [ intros Eq0 | unfold FtoR in |- *; simpl in |- * ]; auto with real.",
                        "VernacExtend",
                        "026fba538c440818165836785c38c819ed711707"
                    ]
                },
                {
                    "command": [
                        "simpl in |- *; intros p q p' q' H' H'0; case H'0; clear H'0.",
                        "VernacExtend",
                        "108248b0ead5dc24caeb5e60d40593855ae95372"
                    ]
                },
                {
                    "command": [
                        "intros H'0; elim H'0; intros H'1 H'2; clear H'0; intros H'0.",
                        "VernacExtend",
                        "eb1ca905cffa077bf0235738bf300dedd0fcd04e"
                    ]
                },
                {
                    "command": [
                        "case H'0; intros H'3; elim H'3; clear H'3; auto.",
                        "VernacExtend",
                        "58994a0a8fe505c2faa6f98bd6d81810e7ca3b87"
                    ]
                },
                {
                    "command": [
                        "intros H'3 H'4.",
                        "VernacExtend",
                        "7e89429bccb17ca06ae3048eafa07dcbd915b5be"
                    ]
                },
                {
                    "command": [
                        "apply (MonotoneMin b radix) with (p := p) (q := q); auto.",
                        "VernacExtend",
                        "2f9cfdd1e0437e739883f438009ce425c23fd9f4"
                    ]
                },
                {
                    "command": [
                        "intros H'3 H'4.",
                        "VernacExtend",
                        "7e89429bccb17ca06ae3048eafa07dcbd915b5be"
                    ]
                },
                {
                    "command": [
                        "apply Rle_trans with p; [ apply isMin_inv1 with (1 := H'2); auto | idtac ].",
                        "VernacExtend",
                        "490562bf46c04dcae436e23124e0b11495c0e86e"
                    ]
                },
                {
                    "command": [
                        "apply Rle_trans with q; [ idtac | apply isMax_inv1 with (1 := H'4) ]; auto.",
                        "VernacExtend",
                        "77c2747ac9073fd8cddb999a6783b21e66ffc130"
                    ]
                },
                {
                    "command": [
                        "apply Rlt_le; auto.",
                        "VernacExtend",
                        "4003e3e1c449ee89cad9e953d0a562db8235648c"
                    ]
                },
                {
                    "command": [
                        "intros H'0; elim H'0; intros H'1 H'2; clear H'0.",
                        "VernacExtend",
                        "32b9a1573cb307b1bde0b86498bfa558c313695f"
                    ]
                },
                {
                    "command": [
                        "intros H'0; case H'0; clear H'0; intros H'0; case H'0; intros H'3 H'4; clear H'0.",
                        "VernacExtend",
                        "a48cb46b58a84defb12850996cee2502ba7f6a22"
                    ]
                },
                {
                    "command": [
                        "apply Rle_trans with (FtoRradix (Fzero (- dExp b))); auto.",
                        "VernacExtend",
                        "ce05b0c508a8e0c4ec2880bbba07cb04586bb98e"
                    ]
                },
                {
                    "command": [
                        "elim H'2.",
                        "VernacExtend",
                        "843f6536389a5469f205c5fa0bb1d28140dd9955"
                    ]
                },
                {
                    "command": [
                        "intros H'0 H'5; elim H'5; intros H'6 H'7; apply H'7; clear H'5; auto.",
                        "VernacExtend",
                        "f95758c66c946ce9ae8d560ffd10c7e800355a63"
                    ]
                },
                {
                    "command": [
                        "repeat split; simpl in |- *; auto with zarith.",
                        "VernacExtend",
                        "3887b5c0ace93a706fbfe1f9aea736a5c30668c7"
                    ]
                },
                {
                    "command": [
                        "rewrite Eq0; auto.",
                        "VernacExtend",
                        "ccdd5552ef6de90246fd1494e32bdcc565e3917f"
                    ]
                },
                {
                    "command": [
                        "elim H'4.",
                        "VernacExtend",
                        "6b9f1f9423d39545e0007ba27d262903c68547c3"
                    ]
                },
                {
                    "command": [
                        "intros H'0 H'5; elim H'5; intros H'6 H'7; apply H'7; clear H'5; auto.",
                        "VernacExtend",
                        "f95758c66c946ce9ae8d560ffd10c7e800355a63"
                    ]
                },
                {
                    "command": [
                        "repeat split; simpl in |- *; auto with zarith.",
                        "VernacExtend",
                        "3887b5c0ace93a706fbfe1f9aea736a5c30668c7"
                    ]
                },
                {
                    "command": [
                        "rewrite Eq0; auto.",
                        "VernacExtend",
                        "ccdd5552ef6de90246fd1494e32bdcc565e3917f"
                    ]
                },
                {
                    "command": [
                        "apply (MonotoneMax b radix) with (p := p) (q := q); auto.",
                        "VernacExtend",
                        "5da164f769a1ecde6e043bb75d97d7674b483efa"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "ToZeroRoundedModeP",
            "line_nb": 103,
            "steps": [
                {
                    "command": [
                        "repeat split.",
                        "VernacExtend",
                        "7968f2448e3e51b1de42f5c433248f4a827b4da2"
                    ]
                },
                {
                    "command": [
                        "try exact ToZeroTotal.",
                        "VernacExtend",
                        "9abb4d09c1c85085d104e339709b31da84294b79"
                    ]
                },
                {
                    "command": [
                        "try exact ToZeroCompatible.",
                        "VernacExtend",
                        "26735b8360250af7d97471e6015687e584a72742"
                    ]
                },
                {
                    "command": [
                        "try exact ToZeroMinOrMax.",
                        "VernacExtend",
                        "34745985acdf531c0cecde17e54368f052871744"
                    ]
                },
                {
                    "command": [
                        "try exact ToZeroMonotone.",
                        "VernacExtend",
                        "c2092009945deb172c4299f8eddac17ce79363cb"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "ToInfinityTotal",
            "line_nb": 111,
            "steps": [
                {
                    "command": [
                        "red in |- *; intros r; case (Rle_or_lt r 0); intros H1.",
                        "VernacExtend",
                        "e68f7f475334811e95f8f0e96b4308d46bd4f27c"
                    ]
                },
                {
                    "command": [
                        "case MinEx with (r := r) (3 := pGivesBound); auto with arith.",
                        "VernacExtend",
                        "5d02dfc661eab9ef5e1ca2dfdc362a697bcecc04"
                    ]
                },
                {
                    "command": [
                        "intros x H'; exists x; red in |- *; auto.",
                        "VernacExtend",
                        "f7f817412e6994cdc5d85a961524d321f1ecc125"
                    ]
                },
                {
                    "command": [
                        "case MaxEx with (r := r) (3 := pGivesBound); auto with arith.",
                        "VernacExtend",
                        "27862fc82f45c97e0edb1d980fa496cbd4fd8bf8"
                    ]
                },
                {
                    "command": [
                        "intros x H'; exists x; red in |- *; right; split; auto.",
                        "VernacExtend",
                        "5a4d0aefb9398cabaeb52dfc758bec73ba2a90ac"
                    ]
                },
                {
                    "command": [
                        "apply Rlt_le; auto.",
                        "VernacExtend",
                        "4003e3e1c449ee89cad9e953d0a562db8235648c"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "ToInfinityCompatible",
            "line_nb": 119,
            "steps": [
                {
                    "command": [
                        "red in |- *.",
                        "VernacExtend",
                        "95a3fb9e13ce19fdc8e335912fb83e57a9512b14"
                    ]
                },
                {
                    "command": [
                        "intros r1 r2 p q H'; case H'.",
                        "VernacExtend",
                        "4b7e61c0c7b95c57f12bf570d5b9ba798b949abf"
                    ]
                },
                {
                    "command": [
                        "intros H'0 H'1 H'2; left; split; try apply MinCompatible with (p := p) (r1 := r1); try rewrite <- H'1; case H'0; auto.",
                        "VernacExtend",
                        "2ffba19e455d5d1dd54bb66a0686262fc8222b76"
                    ]
                },
                {
                    "command": [
                        "intros H'0 H'1 H'2; right; split; try apply MaxCompatible with (p := p) (r1 := r1); try rewrite <- H'1; case H'0; auto.",
                        "VernacExtend",
                        "0d432ec87af8c1629f121eb1ced77f2a3a9eaf54"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "ToInfinityMinOrMax",
            "line_nb": 125,
            "steps": [
                {
                    "command": [
                        "red in |- *.",
                        "VernacExtend",
                        "95a3fb9e13ce19fdc8e335912fb83e57a9512b14"
                    ]
                },
                {
                    "command": [
                        "intros r p H'; case H'; clear H'; intros H'; case H'; auto.",
                        "VernacExtend",
                        "a8fe2bb1c3c71c4d4a82154b47788fa82c9ec2ef"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "ToInfinityRoundedModeP",
            "line_nb": 158,
            "steps": [
                {
                    "command": [
                        "repeat split.",
                        "VernacExtend",
                        "7968f2448e3e51b1de42f5c433248f4a827b4da2"
                    ]
                },
                {
                    "command": [
                        "try exact ToInfinityTotal.",
                        "VernacExtend",
                        "225cee8db1df9d966372f7ad6f91f0f78309f0d4"
                    ]
                },
                {
                    "command": [
                        "try exact ToInfinityCompatible.",
                        "VernacExtend",
                        "5ba91ba360fa81aa3749d88b0ecd82182b560efc"
                    ]
                },
                {
                    "command": [
                        "try exact ToInfinityMinOrMax.",
                        "VernacExtend",
                        "3e229f696274262502033b7a58b41c5deb3bb4bf"
                    ]
                },
                {
                    "command": [
                        "try exact ToInfinityMonotone.",
                        "VernacExtend",
                        "d9a695a1215ded9db851be8f8e07faf77d2b00ff"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "MinUniqueP",
            "line_nb": 165,
            "steps": [
                {
                    "command": [
                        "red in |- *.",
                        "VernacExtend",
                        "95a3fb9e13ce19fdc8e335912fb83e57a9512b14"
                    ]
                },
                {
                    "command": [
                        "intros r p q H' H'0.",
                        "VernacExtend",
                        "3d96de46becba4bee1ccd2381681247033d89019"
                    ]
                },
                {
                    "command": [
                        "unfold FtoRradix in |- *; apply MinEq with (1 := H'); auto.",
                        "VernacExtend",
                        "78850125fa3960e9e483b1552fb5a02056bb4e53"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "MaxUniqueP",
            "line_nb": 170,
            "steps": [
                {
                    "command": [
                        "red in |- *.",
                        "VernacExtend",
                        "95a3fb9e13ce19fdc8e335912fb83e57a9512b14"
                    ]
                },
                {
                    "command": [
                        "intros r p q H' H'0.",
                        "VernacExtend",
                        "3d96de46becba4bee1ccd2381681247033d89019"
                    ]
                },
                {
                    "command": [
                        "unfold FtoRradix in |- *; apply MaxEq with (1 := H'); auto.",
                        "VernacExtend",
                        "7d0372906919e0df13f3f5bc7fe2eb3b7d23a458"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "ToZeroUniqueP",
            "line_nb": 175,
            "steps": [
                {
                    "command": [
                        "red in |- *.",
                        "VernacExtend",
                        "95a3fb9e13ce19fdc8e335912fb83e57a9512b14"
                    ]
                },
                {
                    "command": [
                        "intros r p q H' H'0.",
                        "VernacExtend",
                        "3d96de46becba4bee1ccd2381681247033d89019"
                    ]
                },
                {
                    "command": [
                        "inversion H'; inversion H'0; elim H0; elim H; clear H0 H; intros H'1 H'2 H'3 H'4.",
                        "VernacExtend",
                        "c15c48df683173c4060ee3efe8ecf73220df5ccb"
                    ]
                },
                {
                    "command": [
                        "apply (MinUniqueP r); auto.",
                        "VernacExtend",
                        "76727f82254253df156bf18f160999614638c054"
                    ]
                },
                {
                    "command": [
                        "cut (r = Fzero (- dExp b) :>R); [ intros Eq0 | apply Rle_antisym; unfold FtoRradix, Fzero, FtoR in |- *; simpl in |- * ]; try rewrite Rmult_0_l; auto with real.",
                        "VernacExtend",
                        "e5f3de34b5cc7b0bfee58a8cd30be06aad6beba0"
                    ]
                },
                {
                    "command": [
                        "apply trans_eq with (FtoRradix (Fzero (- dExp b))).",
                        "VernacExtend",
                        "e3ddf64985648840e3f0830d8e1022e0b70fc306"
                    ]
                },
                {
                    "command": [
                        "apply sym_eq; unfold FtoRradix in |- *; apply (RoundedProjector _ ToZeroRoundedModeP); auto with float.",
                        "VernacExtend",
                        "f4588010e416f1531927aba3cdac63c4b5289efe"
                    ]
                },
                {
                    "command": [
                        "unfold FtoRradix in Eq0; rewrite <- Eq0; auto.",
                        "VernacExtend",
                        "51f0248dc4cccd5ffecea9640b31160d1e86720b"
                    ]
                },
                {
                    "command": [
                        "unfold FtoRradix in |- *; apply (RoundedProjector _ ToZeroRoundedModeP); auto with float.",
                        "VernacExtend",
                        "a841045152461acc2abfde197c3510b4dd3fb2d2"
                    ]
                },
                {
                    "command": [
                        "unfold FtoRradix in Eq0; rewrite <- Eq0; auto.",
                        "VernacExtend",
                        "51f0248dc4cccd5ffecea9640b31160d1e86720b"
                    ]
                },
                {
                    "command": [
                        "cut (r = Fzero (- dExp b) :>R); [ intros Eq0 | apply Rle_antisym; unfold FtoRradix, Fzero, FtoR in |- *; simpl in |- * ]; try rewrite Rmult_0_l; auto with real.",
                        "VernacExtend",
                        "e5f3de34b5cc7b0bfee58a8cd30be06aad6beba0"
                    ]
                },
                {
                    "command": [
                        "apply trans_eq with (FtoRradix (Fzero (- dExp b))).",
                        "VernacExtend",
                        "e3ddf64985648840e3f0830d8e1022e0b70fc306"
                    ]
                },
                {
                    "command": [
                        "apply sym_eq; unfold FtoRradix in |- *; apply (RoundedProjector _ ToZeroRoundedModeP); auto with float.",
                        "VernacExtend",
                        "f4588010e416f1531927aba3cdac63c4b5289efe"
                    ]
                },
                {
                    "command": [
                        "unfold FtoRradix in Eq0; rewrite <- Eq0; auto.",
                        "VernacExtend",
                        "51f0248dc4cccd5ffecea9640b31160d1e86720b"
                    ]
                },
                {
                    "command": [
                        "unfold FtoRradix in |- *; apply (RoundedProjector _ ToZeroRoundedModeP); auto with float.",
                        "VernacExtend",
                        "a841045152461acc2abfde197c3510b4dd3fb2d2"
                    ]
                },
                {
                    "command": [
                        "unfold FtoRradix in Eq0; rewrite <- Eq0; auto.",
                        "VernacExtend",
                        "51f0248dc4cccd5ffecea9640b31160d1e86720b"
                    ]
                },
                {
                    "command": [
                        "apply (MaxUniqueP r); auto.",
                        "VernacExtend",
                        "af7903184d6603d2c9e2a946b949600c5cab16d5"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "ToInfinityUniqueP",
            "line_nb": 194,
            "steps": [
                {
                    "command": [
                        "red in |- *.",
                        "VernacExtend",
                        "95a3fb9e13ce19fdc8e335912fb83e57a9512b14"
                    ]
                },
                {
                    "command": [
                        "intros r p q H' H'0.",
                        "VernacExtend",
                        "3d96de46becba4bee1ccd2381681247033d89019"
                    ]
                },
                {
                    "command": [
                        "inversion H'; inversion H'0; elim H0; elim H; clear H0 H; intros H'1 H'2 H'3 H'4.",
                        "VernacExtend",
                        "c15c48df683173c4060ee3efe8ecf73220df5ccb"
                    ]
                },
                {
                    "command": [
                        "apply (MinUniqueP r); auto.",
                        "VernacExtend",
                        "76727f82254253df156bf18f160999614638c054"
                    ]
                },
                {
                    "command": [
                        "cut (r = Fzero (- dExp b) :>R); [ intros Eq0 | apply Rle_antisym; unfold FtoRradix, Fzero, FtoR in |- *; simpl in |- * ]; try rewrite Rmult_0_l; auto with real.",
                        "VernacExtend",
                        "e5f3de34b5cc7b0bfee58a8cd30be06aad6beba0"
                    ]
                },
                {
                    "command": [
                        "apply trans_eq with (FtoRradix (Fzero (- dExp b))).",
                        "VernacExtend",
                        "e3ddf64985648840e3f0830d8e1022e0b70fc306"
                    ]
                },
                {
                    "command": [
                        "apply sym_eq; unfold FtoRradix in |- *; apply (RoundedProjector _ ToInfinityRoundedModeP); auto.",
                        "VernacExtend",
                        "dedd9a5d5332a9d7e9633966f14fce5892120596"
                    ]
                },
                {
                    "command": [
                        "apply FboundedFzero; auto.",
                        "VernacExtend",
                        "8d0d3171dfdcd871c85f5387344c815eca8c2e6c"
                    ]
                },
                {
                    "command": [
                        "unfold FtoRradix in Eq0; rewrite <- Eq0; auto.",
                        "VernacExtend",
                        "51f0248dc4cccd5ffecea9640b31160d1e86720b"
                    ]
                },
                {
                    "command": [
                        "unfold FtoRradix in |- *; apply (RoundedProjector _ ToInfinityRoundedModeP); auto.",
                        "VernacExtend",
                        "fb4ec17ef4fae94e267ad542ad1fc7b756a6205a"
                    ]
                },
                {
                    "command": [
                        "apply FboundedFzero; auto.",
                        "VernacExtend",
                        "8d0d3171dfdcd871c85f5387344c815eca8c2e6c"
                    ]
                },
                {
                    "command": [
                        "unfold FtoRradix in Eq0; rewrite <- Eq0; auto.",
                        "VernacExtend",
                        "51f0248dc4cccd5ffecea9640b31160d1e86720b"
                    ]
                },
                {
                    "command": [
                        "cut (r = Fzero (- dExp b) :>R); [ intros Eq0 | apply Rle_antisym; unfold FtoRradix, Fzero, FtoR in |- *; simpl in |- * ]; try rewrite Rmult_0_l; auto with float.",
                        "VernacExtend",
                        "ba28a90dd9ce03f72181e665e0cac602546de52f"
                    ]
                },
                {
                    "command": [
                        "apply trans_eq with (FtoRradix (Fzero (- dExp b))).",
                        "VernacExtend",
                        "e3ddf64985648840e3f0830d8e1022e0b70fc306"
                    ]
                },
                {
                    "command": [
                        "apply sym_eq; unfold FtoRradix in |- *; apply (RoundedProjector _ ToInfinityRoundedModeP); auto.",
                        "VernacExtend",
                        "dedd9a5d5332a9d7e9633966f14fce5892120596"
                    ]
                },
                {
                    "command": [
                        "apply FboundedFzero; auto.",
                        "VernacExtend",
                        "8d0d3171dfdcd871c85f5387344c815eca8c2e6c"
                    ]
                },
                {
                    "command": [
                        "unfold FtoRradix in Eq0; rewrite <- Eq0; auto.",
                        "VernacExtend",
                        "51f0248dc4cccd5ffecea9640b31160d1e86720b"
                    ]
                },
                {
                    "command": [
                        "unfold FtoRradix in |- *; apply (RoundedProjector _ ToInfinityRoundedModeP); auto.",
                        "VernacExtend",
                        "fb4ec17ef4fae94e267ad542ad1fc7b756a6205a"
                    ]
                },
                {
                    "command": [
                        "apply FboundedFzero; auto.",
                        "VernacExtend",
                        "8d0d3171dfdcd871c85f5387344c815eca8c2e6c"
                    ]
                },
                {
                    "command": [
                        "unfold FtoRradix in Eq0; rewrite <- Eq0; auto.",
                        "VernacExtend",
                        "51f0248dc4cccd5ffecea9640b31160d1e86720b"
                    ]
                },
                {
                    "command": [
                        "apply (MaxUniqueP r); auto.",
                        "VernacExtend",
                        "af7903184d6603d2c9e2a946b949600c5cab16d5"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "MinOrMaxRep",
            "line_nb": 217,
            "steps": [
                {
                    "command": [
                        "intros P H' p q H'0; case (H' p q); auto; intros H'1.",
                        "VernacExtend",
                        "28ff531486a34d586ddf2db4ebfcf862df7629f3"
                    ]
                },
                {
                    "command": [
                        "apply FminRep with (3 := pGivesBound); auto with arith.",
                        "VernacExtend",
                        "a33f0585a9d6d6e97538698cdd3e495f817cd4aa"
                    ]
                },
                {
                    "command": [
                        "apply FmaxRep with (3 := pGivesBound); auto with arith.",
                        "VernacExtend",
                        "599335d435996899c526121e10b61d9adf8bb856"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "RoundedModeRep",
            "line_nb": 222,
            "steps": [
                {
                    "command": [
                        "intros P H' p q H'0.",
                        "VernacExtend",
                        "13fa0cadd43479f697743cb37392bdfa68be5f73"
                    ]
                },
                {
                    "command": [
                        "apply MinOrMaxRep with (P := P); auto with inv.",
                        "VernacExtend",
                        "0da0b1df2f732448fbc4d0154346b722af4bf3d7"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "ToZeroSymmetric",
            "line_nb": 227,
            "steps": [
                {
                    "command": [
                        "red in |- *; intros r p H'; case H'; clear H'; intros H'; case H'; intros H'1 H'2.",
                        "VernacExtend",
                        "64eb857d67a325ad80bfe569d46d3bb21d81aa63"
                    ]
                },
                {
                    "command": [
                        "right; split; auto.",
                        "VernacExtend",
                        "1cc5054ad1405940e563f1d7ddce468251301130"
                    ]
                },
                {
                    "command": [
                        "replace 0%R with (-0)%R; auto with real.",
                        "VernacExtend",
                        "ad9a3c816968bd85bd0ee7d9d06b032f07b0b811"
                    ]
                },
                {
                    "command": [
                        "apply MinOppMax; auto.",
                        "VernacExtend",
                        "0fec64c792ef999fa521035703cda12deccec153"
                    ]
                },
                {
                    "command": [
                        "left; split; auto.",
                        "VernacExtend",
                        "839f21d27eb3d8616b1c18bc30b38cff7c9f8eb4"
                    ]
                },
                {
                    "command": [
                        "replace 0%R with (-0)%R; auto with real.",
                        "VernacExtend",
                        "ad9a3c816968bd85bd0ee7d9d06b032f07b0b811"
                    ]
                },
                {
                    "command": [
                        "apply MaxOppMin; auto.",
                        "VernacExtend",
                        "ca43e124679cf947c4770757f3a04dffa5d11ca7"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "ToInfinitySymmetric",
            "line_nb": 236,
            "steps": [
                {
                    "command": [
                        "red in |- *; intros r p H'; case H'; clear H'; intros H'; case H'; intros H'1 H'2.",
                        "VernacExtend",
                        "64eb857d67a325ad80bfe569d46d3bb21d81aa63"
                    ]
                },
                {
                    "command": [
                        "right; split; auto.",
                        "VernacExtend",
                        "1cc5054ad1405940e563f1d7ddce468251301130"
                    ]
                },
                {
                    "command": [
                        "replace 0%R with (-0)%R; auto with real.",
                        "VernacExtend",
                        "ad9a3c816968bd85bd0ee7d9d06b032f07b0b811"
                    ]
                },
                {
                    "command": [
                        "apply MinOppMax; auto.",
                        "VernacExtend",
                        "0fec64c792ef999fa521035703cda12deccec153"
                    ]
                },
                {
                    "command": [
                        "left; split; auto.",
                        "VernacExtend",
                        "839f21d27eb3d8616b1c18bc30b38cff7c9f8eb4"
                    ]
                },
                {
                    "command": [
                        "replace 0%R with (-0)%R; auto with real.",
                        "VernacExtend",
                        "ad9a3c816968bd85bd0ee7d9d06b032f07b0b811"
                    ]
                },
                {
                    "command": [
                        "apply MaxOppMin; auto.",
                        "VernacExtend",
                        "ca43e124679cf947c4770757f3a04dffa5d11ca7"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "RoundLessThanIsMax",
            "line_nb": 259,
            "steps": [
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "elim H; intros.",
                        "VernacExtend",
                        "79e1c8a1444242deed6d2876e3fe7bb2cf051f26"
                    ]
                },
                {
                    "command": [
                        "elim H3; intros H' H'0; clear H3.",
                        "VernacExtend",
                        "8c5fc960c74899824fbd48c3bec6a7d3d491d602"
                    ]
                },
                {
                    "command": [
                        "elim H'0; intros; clear H'0.",
                        "VernacExtend",
                        "037b4eb5472e123c0e699e43f69e3ec048a6a82c"
                    ]
                },
                {
                    "command": [
                        "case (H3 x p); auto.",
                        "VernacExtend",
                        "1d884c029ebf2e1092490683acf3a1ccd06d2a3c"
                    ]
                },
                {
                    "command": [
                        "intros; apply Rle_trans with x; auto.",
                        "VernacExtend",
                        "8af537e4b9eec26f1911c08af56f27bc7caaa910"
                    ]
                },
                {
                    "command": [
                        "elim H5; intros; elim H7; intros; auto with real.",
                        "VernacExtend",
                        "e924e51388511410c11a30dfa19323ff892a2102"
                    ]
                },
                {
                    "command": [
                        "elim H1; intros; elim H7; intros; auto with real.",
                        "VernacExtend",
                        "0ce5401d9186a7118f22ee0f2b6eb74853393475"
                    ]
                },
                {
                    "command": [
                        "intros; replace (FtoRradix p) with (FtoRradix m); auto with real.",
                        "VernacExtend",
                        "c00d74eb147f3a1dfb278dbdb6245abd2a1dca8d"
                    ]
                },
                {
                    "command": [
                        "unfold FtoRradix in |- *; apply MaxEq with b x; auto.",
                        "VernacExtend",
                        "5d0a38c1c5e695c179e943a1f4537ffcee2d8950"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        }
    ]
}