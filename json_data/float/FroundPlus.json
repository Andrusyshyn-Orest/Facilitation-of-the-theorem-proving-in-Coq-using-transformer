{
    "filename": "FroundPlus.v",
    "coq_project": "float",
    "vernac_cmds": [
        [
            "Require Export Finduct.",
            "VernacRequire",
            "4c91cb7b938f5e7b8d6e6d13ce7cb9f47d3aac68"
        ],
        [
            "Require Export FroundProp.",
            "VernacRequire",
            "cb23e6736c1e6a10c079cd2b6d2e66062c4f8426"
        ],
        [
            "Section FRoundP.",
            "VernacBeginSection",
            "03d9e3e0fff802aff28fdb045d5ce94913cbb42e"
        ],
        [
            "Variable b : Fbound.",
            "VernacAssumption",
            "17a11c003f49f819b8cb809f61b140702916486d"
        ],
        [
            "Variable radix : Z.",
            "VernacAssumption",
            "2349b77d134e0c9bb013a8bdca0020ca16fc023b"
        ],
        [
            "Variable precision : nat.",
            "VernacAssumption",
            "2235bc83b7ebf4cbe373b5fa3b4f3c643d454130"
        ],
        [
            "Let FtoRradix := FtoR radix.",
            "VernacDefinition",
            "5aa29a9595c6e9e03b28c6d232299552ec761ad7"
        ],
        [
            "Coercion FtoRradix : float >-> R.",
            "VernacCoercion",
            "028c338fbad0cd7087bf0b6e1e412562a515c140"
        ],
        [
            "Hypothesis radixMoreThanOne : (1 < radix)%Z.",
            "VernacAssumption",
            "f4d3774b2275f4c4c3af941091d4d99f9a2129aa"
        ],
        [
            "Let radixMoreThanZERO := Zlt_1_O _ (Zlt_le_weak _ _ radixMoreThanOne).",
            "VernacDefinition",
            "b73ccff345a4fc730c8134dcd05adb7f1928fae7"
        ],
        [
            "Hint Resolve radixMoreThanZERO: zarith.",
            "VernacHints",
            "5a4a320eb610749621ef38850390d7141dc0d330"
        ],
        [
            "Hypothesis precisionGreaterThanOne : 1 < precision.",
            "VernacAssumption",
            "9f627fb385d8fe283ac9563556925f37be8e5402"
        ],
        [
            "Hypothesis pGivesBound : Zpos (vNum b) = Zpower_nat radix precision.",
            "VernacAssumption",
            "d558f967d87d2a42d14158ac115b10c6f5358430"
        ],
        [
            "Theorem plusExpMin : forall P, RoundedModeP b radix P -> forall p q pq : float, P (p + q)%R pq -> exists s : float, Fbounded b s /\\ s = pq :>R /\\ (Zmin (Fexp p) (Fexp q) <= Fexp s)%Z.",
            "VernacStartTheoremProof",
            "ba3ce48ebedad07c26dda8a61859b94f006f0184"
        ],
        [
            "intros P H' p q pq H'0.",
            "VernacExtend",
            "69c90d3f381beb533d8720210e5eb470215883fc"
        ],
        [
            "case (RoundedModeRep b radix precision) with (p := Fplus radix p q) (q := pq) (P := P); auto with float arith.",
            "VernacExtend",
            "c3410b4a283866dee8f9310fc4e4a70d47658980"
        ],
        [
            "rewrite Fplus_correct; auto with float arith.",
            "VernacExtend",
            "f9e303dfe207a56a769a6ae82c9b434c558a28ad"
        ],
        [
            "simpl in |- *; intros x H'1.",
            "VernacExtend",
            "45c52281d62221d6f6b7271a356a4d129b156ba2"
        ],
        [
            "case (eqExpLess _ radixMoreThanOne b) with (p := pq) (q := Float x (Fexp (Fplus radix p q))); auto.",
            "VernacExtend",
            "b168f9ea5a7b9c4ebc6eb09f1239b57cfb52ad22"
        ],
        [
            "apply (RoundedModeBounded b radix) with (P := P) (r := (p + q)%R); auto.",
            "VernacExtend",
            "c5020e48ec5aa71b00c05efd6d65f4271d317bba"
        ],
        [
            "simpl in |- *; intros x0 H'2; elim H'2; intros H'3 H'4; elim H'4; intros H'5 H'6; clear H'4 H'2.",
            "VernacExtend",
            "5a1b146986b3c7959199dd59148dd3a8e29510d2"
        ],
        [
            "exists x0; split; [ idtac | split ]; auto.",
            "VernacExtend",
            "b83eae55d733a50b008c7ceeb2e58a6fe45ff027"
        ],
        [
            "unfold FtoRradix in |- *; rewrite H'5; auto.",
            "VernacExtend",
            "9144210a6274975e9e2b7e434cfa7f2fc754e7ba"
        ],
        [
            "apply le_IZR; auto.",
            "VernacExtend",
            "5ddae610de44a290611008bca1b760849106ddb9"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Theorem plusExpUpperBound : forall P, RoundedModeP b radix P -> forall p q pq : float, P (p + q)%R pq -> Fbounded b p -> Fbounded b q -> exists r : float, Fbounded b r /\\ r = pq :>R /\\ (Fexp r <= Zsucc (Zmax (Fexp p) (Fexp q)))%Z.",
            "VernacStartTheoremProof",
            "a7ddedaffe995ea4c59241fe3596b4602f49b0bb"
        ],
        [
            "intros P H' p q pq H'0 H'1 H'2.",
            "VernacExtend",
            "d2f053f2d8716a0239cbe3ace54738c6beca164a"
        ],
        [
            "replace (Zsucc (Zmax (Fexp p) (Fexp q))) with (Fexp (Float (pPred (vNum b)) (Zsucc (Zmax (Fexp p) (Fexp q))))); [ idtac | simpl in |- *; auto ].",
            "VernacExtend",
            "32f00d37c7cddb360a785a2726dcfa6eac506c78"
        ],
        [
            "unfold FtoRradix in |- *; apply eqExpMax; auto.",
            "VernacExtend",
            "f44c675836e858d2e652687c7ef9b745fca35566"
        ],
        [
            "apply RoundedModeBounded with (radix := radix) (P := P) (r := (p + q)%R); auto with float arith.",
            "VernacExtend",
            "36952a57cd8b030a2faef6217c1916f7f5f46956"
        ],
        [
            "unfold pPred in |- *; apply maxFbounded; auto.",
            "VernacExtend",
            "46c0eb87b7cd7e05e3d590672f1946b47665bf68"
        ],
        [
            "apply Zle_trans with (Fexp p); auto with float.",
            "VernacExtend",
            "79a02826801bf77197e35a9747ac92d4a85dbc80"
        ],
        [
            "apply Zle_trans with (Zsucc (Fexp p)); auto with float zarith.",
            "VernacExtend",
            "4c28d308c5efa0f8d2833ca451eadd1c133844fe"
        ],
        [
            "replace (FtoR radix (Float (pPred (vNum b)) (Zsucc (Zmax (Fexp p) (Fexp q))))) with (radix * Float (pPred (vNum b)) (Zmax (Fexp p) (Fexp q)))%R.",
            "VernacExtend",
            "16f6468b17f1388966b5d6fb80306a062f24177d"
        ],
        [
            "rewrite Fabs_correct; auto with zarith.",
            "VernacExtend",
            "cbf371ebf2236198f1663453e3d81b5052108e31"
        ],
        [
            "unfold FtoRradix in |- *; apply RoundedModeMultAbs with (b := b) (precision := precision) (P := P) (r := (p + q)%R); auto.",
            "VernacExtend",
            "d51df291b5c8be43e023d165553d10c6b8815227"
        ],
        [
            "unfold pPred in |- *; apply maxFbounded; auto.",
            "VernacExtend",
            "46c0eb87b7cd7e05e3d590672f1946b47665bf68"
        ],
        [
            "apply Zle_trans with (Fexp p); auto with float zarith.",
            "VernacExtend",
            "369bfc959621c8f272757e9789bf0ce203499f11"
        ],
        [
            "apply Rle_trans with (Rabs p + Rabs q)%R.",
            "VernacExtend",
            "459125425e6fc7cbc61c18fb8c48c89be3625a0b"
        ],
        [
            "apply Rabs_triang; auto.",
            "VernacExtend",
            "ea4b4d745d2e7beae9a924aed81b3db25bbaef73"
        ],
        [
            "apply Rle_trans with (2%nat * FtoR radix (Float (pPred (vNum b)) (Zmax (Fexp p) (Fexp q))))%R; auto.",
            "VernacExtend",
            "f1b8ef6e9e8634c918891be54b37fac211e5a324"
        ],
        [
            "cut (forall r : R, (2%nat * r)%R = (r + r)%R); [ intros tmp; rewrite tmp; clear tmp | intros; simpl in |- *; ring ].",
            "VernacExtend",
            "3672dc510eea391c5afce9a7c4f1fbf4fe7def75"
        ],
        [
            "apply Rplus_le_compat; auto.",
            "VernacExtend",
            "33d9e2397c333c707e5ea519b98684bac52692e0"
        ],
        [
            "rewrite <- (Fabs_correct radix); auto with arith; apply maxMax1; auto; apply ZmaxLe1.",
            "VernacExtend",
            "faa82866c88897c1c3a684ddd8ec0dffb9260754"
        ],
        [
            "rewrite <- (Fabs_correct radix); auto with arith; apply maxMax1; auto; apply ZmaxLe2.",
            "VernacExtend",
            "c9d4aac99ccccf49894326430a092b386daa9ac6"
        ],
        [
            "apply Rmult_le_compat; auto with real arith.",
            "VernacExtend",
            "9957fd3f288f703842d8cf655fb04d6c6fec0f1e"
        ],
        [
            "replace 0%R with (INR 0); auto with real arith.",
            "VernacExtend",
            "3caed965951659080cf394dcb353db3f9bd924fa"
        ],
        [
            "apply LeFnumZERO; simpl in |- *; auto; replace 0%Z with (Z_of_nat 0); auto with zarith.",
            "VernacExtend",
            "d596afaecfa1b44f487178294e5ab4da67452e89"
        ],
        [
            "unfold pPred in |- *; apply Zle_Zpred; auto with zarith.",
            "VernacExtend",
            "4a67c01dc3b485eeff0c4d6012218b209c6aca4a"
        ],
        [
            "rewrite INR_IZR_INZ; apply Rle_IZR; simpl in |- *; auto with zarith.",
            "VernacExtend",
            "8347e74e2fde21b20b6e5db492aad8a6654650ab"
        ],
        [
            "cut (1 < radix)%Z; auto with zarith;intros.",
            "VernacExtend",
            "812e4eb978a2d19276eda68f20d0884c4750f666"
        ],
        [
            "unfold FtoRradix, FtoR in |- *; simpl in |- *.",
            "VernacExtend",
            "85a3da1582165d92ceb7faef707de88822bccf1a"
        ],
        [
            "rewrite powerRZ_Zs; auto with real zarith; ring.",
            "VernacExtend",
            "055e37c209e2a0ca9dc7ef6b05e8ffefe2fb31ed"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Theorem plusExpBound : forall P, RoundedModeP b radix P -> forall p q pq : float, P (p + q)%R pq -> Fbounded b p -> Fbounded b q -> exists r : float, Fbounded b r /\\ r = pq :>R /\\ (Zmin (Fexp p) (Fexp q) <= Fexp r)%Z /\\ (Fexp r <= Zsucc (Zmax (Fexp p) (Fexp q)))%Z.",
            "VernacStartTheoremProof",
            "58bde6dad24fa5e20aa4a1562b65ee1df861c777"
        ],
        [
            "intros P H' p q pq H'0 H'1 H'2.",
            "VernacExtend",
            "d2f053f2d8716a0239cbe3ace54738c6beca164a"
        ],
        [
            "case (plusExpMin P H' _ _ _ H'0).",
            "VernacExtend",
            "7c7ca9e69baac995f8b77788f972e37bdbb61b2f"
        ],
        [
            "intros r' H'3; elim H'3; intros H'4 H'5; elim H'5; intros H'6 H'7; clear H'5 H'3.",
            "VernacExtend",
            "03fe7205b71f5301a0b14c13d31386952d4eb0cc"
        ],
        [
            "case (Zle_or_lt (Fexp r') (Zsucc (Zmax (Fexp p) (Fexp q)))); intros Zl1.",
            "VernacExtend",
            "49f66e497295b6e853e605419545a9e175261d76"
        ],
        [
            "exists r'; repeat (split; auto).",
            "VernacExtend",
            "e63b72f86481536398794c9e47c9097bbf4ce352"
        ],
        [
            "case (plusExpUpperBound P H' _ _ _ H'0); auto.",
            "VernacExtend",
            "c0a4338c56594b216b5912ec92d7d389d133f2d8"
        ],
        [
            "intros r'' H'3; elim H'3; intros H'5 H'8; elim H'8; intros H'9 H'10; clear H'8 H'3.",
            "VernacExtend",
            "76bd2d9ce5bf3065063c122557259ee9525bc9c9"
        ],
        [
            "exists (Fshift radix (Zabs_nat (Fexp r' - Zsucc (Zmax (Fexp p) (Fexp q)))) r'); split.",
            "VernacExtend",
            "8f440ee1220a6430f2c4f43e818eb0f3aceefd66"
        ],
        [
            "apply FboundedShiftLess with (n := Zabs_nat (Fexp r' - Fexp r'')); auto.",
            "VernacExtend",
            "08ed5a766df8acb76a52afab52b8144297ad46f1"
        ],
        [
            "apply ZleLe; auto.",
            "VernacExtend",
            "f4c825eb3ddb6d6bc341c0a358dbbbba0b7faa62"
        ],
        [
            "repeat rewrite <- Zabs_absolu.",
            "VernacExtend",
            "6cd43d307c91afa54e4d514ca866972516db1541"
        ],
        [
            "repeat rewrite Zabs_eq; auto with zarith.",
            "VernacExtend",
            "ce6af9c9e2dbbf5e96aba4104d03a58482acdd03"
        ],
        [
            "rewrite FshiftCorrectInv; auto.",
            "VernacExtend",
            "087ab2a0b57c90b3d93a00f3078765919600c662"
        ],
        [
            "apply trans_eq with (FtoRradix pq); auto.",
            "VernacExtend",
            "69afe208258f1e258e33072aa3a20a9e7f940d6f"
        ],
        [
            "apply Zle_trans with (1 := H'10); auto with zarith.",
            "VernacExtend",
            "2b3371720e8d7a7e78f14b2b9d9e762c33b9c2da"
        ],
        [
            "split.",
            "VernacExtend",
            "55abc140132bd88981001ac656020469a8d503eb"
        ],
        [
            "unfold FtoRradix in |- *; rewrite FshiftCorrect; auto.",
            "VernacExtend",
            "5abbc7cb08d11ed8fd912e6cc82302a9cbf61541"
        ],
        [
            "split.",
            "VernacExtend",
            "55abc140132bd88981001ac656020469a8d503eb"
        ],
        [
            "simpl in |- *.",
            "VernacExtend",
            "1b93169f4cf876d207c1fab22a2347202ab48d85"
        ],
        [
            "repeat rewrite inj_abs; auto with zarith arith.",
            "VernacExtend",
            "0b7366921773e0daf8bd374f9f5fb67bf8851bc2"
        ],
        [
            "apply Zle_trans with (Zmax (Fexp p) (Fexp q)); auto with zarith.",
            "VernacExtend",
            "a5acb5590680ab0b4d91d812f686a83ac7d4fecb"
        ],
        [
            "apply Zmin_Zmax; auto.",
            "VernacExtend",
            "610be32e1c8b5d8b6ceb6d9d60dfa8bc5e956d0a"
        ],
        [
            "simpl in |- *.",
            "VernacExtend",
            "1b93169f4cf876d207c1fab22a2347202ab48d85"
        ],
        [
            "repeat rewrite inj_abs; auto with zarith arith.",
            "VernacExtend",
            "0b7366921773e0daf8bd374f9f5fb67bf8851bc2"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Theorem minusRoundRep : forall P, RoundedModeP b radix P -> forall p q qmp qmmp : float, (0 <= p)%R -> (p <= q)%R -> P (q - p)%R qmp -> Fbounded b p -> Fbounded b q -> exists r : float, Fbounded b r /\\ r = (q - qmp)%R :>R.",
            "VernacStartTheoremProof",
            "9c55d101173be0c0fd5f9d453a387583f2088969"
        ],
        [
            "intros P H' p q qmp H'0 H'1 H'2 H'3 H'4 H'5.",
            "VernacExtend",
            "6cdbf3831fec880df5c5077919f572d29b7181a7"
        ],
        [
            "case (Rle_or_lt (/ 2%nat * q) p); intros Rle1.",
            "VernacExtend",
            "fa8d032e43576a623ada1c16588d35e310c0addc"
        ],
        [
            "exists p; split; auto.",
            "VernacExtend",
            "6ae7bae83c56f9ed5d8d914b9d9b7ad61f104667"
        ],
        [
            "replace (FtoRradix qmp) with (FtoRradix (Fminus radix q p)).",
            "VernacExtend",
            "5ffbc80bee5dc275895dfd99109e6d471c8c160d"
        ],
        [
            "rewrite (Fminus_correct radix); auto with arith; unfold FtoRradix in |- *; ring.",
            "VernacExtend",
            "949d0cda5a71e9aa6c136461a7337ed44274d56c"
        ],
        [
            "apply (RoundedModeProjectorIdemEq b radix precision) with (P := P); auto.",
            "VernacExtend",
            "0e9ff50dd26e59be3d449efaa0c2c590eb63afbb"
        ],
        [
            "rewrite <- Fopp_Fminus.",
            "VernacExtend",
            "1c443a8ba74c86b8fdff1e33c3cdb7af22126cbe"
        ],
        [
            "apply oppBounded; auto.",
            "VernacExtend",
            "6e68d2122eeea082741ca4e279707ce0511c71ef"
        ],
        [
            "apply Sterbenz; auto.",
            "VernacExtend",
            "2d564057c2daa6631c6b156cb718aa4284b2d9cb"
        ],
        [
            "apply Rle_trans with (FtoRradix q); auto with real.",
            "VernacExtend",
            "76111ffb289edf310cd67cfb96ac2da0bc8b7e29"
        ],
        [
            "apply Rledouble; auto.",
            "VernacExtend",
            "91a11e7bfb03a12894eb0db96cc7013309392099"
        ],
        [
            "apply Rle_trans with (FtoRradix p); auto with real.",
            "VernacExtend",
            "ded04c47e3969a4c8841c0473154115a1d9432cd"
        ],
        [
            "cut (CompatibleP b radix P); [ intros Cp | apply RoundedModeP_inv2 with (1 := H'); auto ].",
            "VernacExtend",
            "2ca124a567e390b257fb21e0b477d3edc60232f2"
        ],
        [
            "apply (Cp (q - p)%R (Fminus radix q p) qmp); auto.",
            "VernacExtend",
            "19b7485cc177c36796831e9c6ddb99a894d58141"
        ],
        [
            "rewrite (Fminus_correct radix); auto with arith.",
            "VernacExtend",
            "6bc18318ecade68693c942f9aff67950b1934763"
        ],
        [
            "apply RoundedModeBounded with (radix := radix) (P := P) (r := (q - p)%R); auto; auto.",
            "VernacExtend",
            "a22504394e1cb0c5be1534807e81c3944d178348"
        ],
        [
            "exists (Fminus radix q qmp); split.",
            "VernacExtend",
            "bcb7536ec3f3c567f590d943ca9ddae1c43f3c47"
        ],
        [
            "rewrite <- Fopp_Fminus.",
            "VernacExtend",
            "1c443a8ba74c86b8fdff1e33c3cdb7af22126cbe"
        ],
        [
            "apply oppBounded; auto.",
            "VernacExtend",
            "6e68d2122eeea082741ca4e279707ce0511c71ef"
        ],
        [
            "apply Sterbenz; auto.",
            "VernacExtend",
            "2d564057c2daa6631c6b156cb718aa4284b2d9cb"
        ],
        [
            "apply RoundedModeBounded with (radix := radix) (P := P) (r := (q - p)%R); auto; auto.",
            "VernacExtend",
            "a22504394e1cb0c5be1534807e81c3944d178348"
        ],
        [
            "case MaxEx with (r := (/ 2%nat * FtoR radix q)%R) (3 := pGivesBound); auto with arith.",
            "VernacExtend",
            "3345382084954022dbe3ac031facf76d442a0b2a"
        ],
        [
            "intros max H'6.",
            "VernacExtend",
            "36de58bab4cb96ac2f93aa724a92f7e6e5876872"
        ],
        [
            "apply Rle_trans with (FtoRradix max); [ apply isMax_inv1 with (1 := H'6); auto | idtac ].",
            "VernacExtend",
            "8be11f36d8fc52039df612a0590e3ca133f7ecdb"
        ],
        [
            "apply (RleBoundRoundl b radix precision) with (P := P) (r := (q - p)%R); auto; fold FtoRradix in |- *.",
            "VernacExtend",
            "c5875514db9d81ac14275a0bdfd9b1e76467018d"
        ],
        [
            "case H'6; auto.",
            "VernacExtend",
            "56eef74f6217715d3dc37c5d730bbe40590c90e2"
        ],
        [
            "case MinEx with (r := (/ 2%nat * FtoR radix q)%R) (3 := pGivesBound); auto with arith.",
            "VernacExtend",
            "0b0481a059e525d4525f49d6126edc1d0143e055"
        ],
        [
            "intros min H'7.",
            "VernacExtend",
            "ebd74b9c223409f1462ed6f903348891d9e975d5"
        ],
        [
            "replace (FtoRradix max) with (q - min)%R.",
            "VernacExtend",
            "a38ba09e30b6b944bcc18ffed75bda10dd12bb9b"
        ],
        [
            "apply Rplus_le_reg_l with (r := (- q)%R).",
            "VernacExtend",
            "a4d336b0f4a7f48e2463cffe78fb7ef5187789d8"
        ],
        [
            "cut (forall p q : R, (- p + (p - q))%R = (- q)%R); [ intros tmp; repeat rewrite tmp; clear tmp | intros; ring ].",
            "VernacExtend",
            "894cae5a1fdaca55d1f3e003b3438da1b9eca597"
        ],
        [
            "apply Ropp_le_contravar.",
            "VernacExtend",
            "ac8d32b190d111aa8834547674121bcf3bb8a0ed"
        ],
        [
            "case H'7.",
            "VernacExtend",
            "78659f6ffafa579a63c426b0cecb14b8a4baebc2"
        ],
        [
            "intros H'8 H'9; elim H'9; intros H'10 H'11; apply H'11; clear H'9; auto.",
            "VernacExtend",
            "609494d3032c106214d000bc67ffbc2721ef3301"
        ],
        [
            "apply Rlt_le; auto.",
            "VernacExtend",
            "4003e3e1c449ee89cad9e953d0a562db8235648c"
        ],
        [
            "unfold FtoRradix in |- *; rewrite (div2IsBetween b radix precision) with (5 := H'7) (6 := H'6); auto.",
            "VernacExtend",
            "b0edf7f6618f966793cfef7aa2a3db9739c04dc8"
        ],
        [
            "ring.",
            "VernacExtend",
            "baadd9fc4c175005af409bb466fcea9fab25b4e6"
        ],
        [
            "apply Rle_trans with (FtoRradix q); auto with real.",
            "VernacExtend",
            "76111ffb289edf310cd67cfb96ac2da0bc8b7e29"
        ],
        [
            "apply (RleBoundRoundr b radix precision) with (P := P) (r := (q - p)%R); auto; fold FtoRradix in |- *.",
            "VernacExtend",
            "bb3b58c6b038294aa85e6b86e266b60517a2a49a"
        ],
        [
            "apply Rplus_le_reg_l with (r := (- q)%R).",
            "VernacExtend",
            "a4d336b0f4a7f48e2463cffe78fb7ef5187789d8"
        ],
        [
            "cut (forall p q : R, (- p + (p - q))%R = (- q)%R); [ intros tmp; repeat rewrite tmp; clear tmp | intros; ring ].",
            "VernacExtend",
            "894cae5a1fdaca55d1f3e003b3438da1b9eca597"
        ],
        [
            "replace (- q + q)%R with (-0)%R; [ auto with real | ring ].",
            "VernacExtend",
            "ed033561e9f61ebb6a3d28cafc9279ed00fe87cc"
        ],
        [
            "apply Rle_trans with (FtoRradix q); auto with real.",
            "VernacExtend",
            "76111ffb289edf310cd67cfb96ac2da0bc8b7e29"
        ],
        [
            "apply Rledouble; auto.",
            "VernacExtend",
            "91a11e7bfb03a12894eb0db96cc7013309392099"
        ],
        [
            "apply Rle_trans with (FtoRradix p); auto with real.",
            "VernacExtend",
            "ded04c47e3969a4c8841c0473154115a1d9432cd"
        ],
        [
            "apply (Fminus_correct radix); auto with arith.",
            "VernacExtend",
            "6b68083f77c57a8c33a8e19593e4910b9df2d305"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Theorem radixRangeBoundExp : forall p q : float, Fcanonic radix b p -> Fcanonic radix b q -> (0 <= p)%R -> (p < q)%R -> (q < radix * p)%R -> Fexp p = Fexp q \\/ Zsucc (Fexp p) = Fexp q.",
            "VernacStartTheoremProof",
            "4e506a89f3021b4377269eaf5348f8162bdc629f"
        ],
        [
            "intros p q H' H'0 H'1 H'2 H'3.",
            "VernacExtend",
            "de3538de472f2c35a6a60d0251e982a15935dc42"
        ],
        [
            "case (FcanonicLtPos _ radixMoreThanOne b precision) with (p := p) (q := q); auto with arith.",
            "VernacExtend",
            "6716ffafaed202fb04a6d6b10af025ee144e4023"
        ],
        [
            "2: intros H'4; elim H'4; intros H'5 H'6; clear H'4; auto.",
            "VernacExtend",
            "ff50898178439fad2a52aa260766ea8693bcab59"
        ],
        [
            "intros H'4; right.",
            "VernacExtend",
            "e40180a21ea150d589b23f78dafb497f8a403d82"
        ],
        [
            "Casec H'; intros H'.",
            "VernacExtend",
            "8c490b993e548cdf09eebf3a2848b2dc9640fa99"
        ],
        [
            "case (FcanonicLtPos _ radixMoreThanOne b precision) with (p := q) (q := Float (Fnum p) (Zsucc (Fexp p))); auto with arith.",
            "VernacExtend",
            "0e373a5551b0dbb0a837c6a8e70e166b050cbc2a"
        ],
        [
            "left.",
            "VernacExtend",
            "06dad9fc5698018f3f1213205145fec906c612b1"
        ],
        [
            "case H'; intros H1 H2.",
            "VernacExtend",
            "eb7e7c1e696cea506ec1f21eaccd3cedd0a8c94d"
        ],
        [
            "repeat split; simpl in |- *; auto with float.",
            "VernacExtend",
            "3e093824de91ab2af8d090987eafb93df05226c2"
        ],
        [
            "apply Zle_trans with (Fexp p); auto with float zarith.",
            "VernacExtend",
            "369bfc959621c8f272757e9789bf0ce203499f11"
        ],
        [
            "apply Rle_trans with (FtoRradix p); auto; apply Rlt_le; auto.",
            "VernacExtend",
            "76999b1bded477179e46e7bde9f4818482761a04"
        ],
        [
            "unfold FtoR in |- *; simpl in |- *.",
            "VernacExtend",
            "b122ca13d8a9bd3595bc1e75c78d344f671d3504"
        ],
        [
            "rewrite powerRZ_Zs; auto with real zarith; auto.",
            "VernacExtend",
            "25c9e2b424fee0b385e014b000740e6205f7618a"
        ],
        [
            "rewrite <- Rmult_assoc; rewrite (fun (x : R) (y : Z) => Rmult_comm x y); rewrite Rmult_assoc; auto.",
            "VernacExtend",
            "cbe0500302391a8d9a73417014f3cd53684d1f6b"
        ],
        [
            "simpl in |- *; intros; apply Zle_antisym; auto with zarith.",
            "VernacExtend",
            "03694993ad54fed62bd9ad2c692b7f00c55b54e0"
        ],
        [
            "simpl in |- *; auto.",
            "VernacExtend",
            "9b631374b1d3067f703fd99c5dc6e1e5c8405957"
        ],
        [
            "intros H'5; elim H'5; intros H'6 H'7; auto.",
            "VernacExtend",
            "2f0f3dbaada459a562b2e38cee0ffe2a93ff096b"
        ],
        [
            "case (FcanonicLtPos _ radixMoreThanOne b precision) with (p := q) (q := Float (nNormMin radix precision) (Zsucc (Fexp p))); auto with arith.",
            "VernacExtend",
            "1421f284572021b29df15f7ffce90f93400c2370"
        ],
        [
            "left; repeat split; simpl in |- *.",
            "VernacExtend",
            "6149ad99c2543d178c213f30aef009ba6b181d0e"
        ],
        [
            "rewrite Zabs_eq; auto with float zarith.",
            "VernacExtend",
            "5afb6c5f6fd8186da5220fd2ffe28bc8b2689760"
        ],
        [
            "apply ZltNormMinVnum; auto with zarith.",
            "VernacExtend",
            "3a9f0c09f8f41f94f7cdb38a8391de1fb30ea12d"
        ],
        [
            "apply Zlt_le_weak; auto with zarith.",
            "VernacExtend",
            "e52b5fc9e4efbb3acee7e5921936e24987a2d234"
        ],
        [
            "apply nNormPos; auto with zarith.",
            "VernacExtend",
            "8050df37637552c4f93f1659280a94a6c325f5f8"
        ],
        [
            "case H'; auto with zarith float.",
            "VernacExtend",
            "4880f017937a1d1204fbe2543ff6a7c51260eda6"
        ],
        [
            "rewrite (PosNormMin radix b precision); auto with zarith.",
            "VernacExtend",
            "e46af78a36da5a68a045c49aba261c163bdfdd56"
        ],
        [
            "apply Rle_trans with (1 := H'1); auto with real.",
            "VernacExtend",
            "0d72f40d6751e6946b9f599caaf4b19c962bb874"
        ],
        [
            "apply Rlt_trans with (1 := H'3).",
            "VernacExtend",
            "7cff7c9c9257f2e1313c6fdc7d8b013de210c224"
        ],
        [
            "unfold FtoR in |- *; simpl in |- *.",
            "VernacExtend",
            "b122ca13d8a9bd3595bc1e75c78d344f671d3504"
        ],
        [
            "rewrite powerRZ_Zs; auto with real arith; auto.",
            "VernacExtend",
            "4d4527ad237a525a4c0979b59ac2cc2691386d46"
        ],
        [
            "rewrite <- Rmult_assoc; rewrite (fun (x : R) (y : Z) => Rmult_comm x y); rewrite Rmult_assoc; auto.",
            "VernacExtend",
            "cbe0500302391a8d9a73417014f3cd53684d1f6b"
        ],
        [
            "apply Rmult_lt_compat_l; auto with real arith.",
            "VernacExtend",
            "2c95e3f10177f062380352d768090c173015e1d6"
        ],
        [
            "replace (Fexp p) with (- dExp b)%Z.",
            "VernacExtend",
            "5089f945bce68ffac4e4f755b5f08e9cdc3921ba"
        ],
        [
            "change (p < firstNormalPos radix b precision)%R in |- *.",
            "VernacExtend",
            "5ad8ee475d35bd5cdbed9d5bcd1b19810ae043a5"
        ],
        [
            "apply (FsubnormalLtFirstNormalPos radix); auto with arith.",
            "VernacExtend",
            "b69dcf82eda27d69c1ce6b4a697260700cbbf6de"
        ],
        [
            "case H'; intros Z1 (Z2, Z3); auto.",
            "VernacExtend",
            "31232afcfb7f0a4a2342d4ae180019c7974daa6a"
        ],
        [
            "auto with real zarith.",
            "VernacExtend",
            "adb253df2d9560ab81f40ee78f067764177c29bf"
        ],
        [
            "simpl in |- *; auto.",
            "VernacExtend",
            "9b631374b1d3067f703fd99c5dc6e1e5c8405957"
        ],
        [
            "intros H; apply Zle_antisym; auto with zarith.",
            "VernacExtend",
            "d10e221f5269b03912eadae072fc4bbb94810aa8"
        ],
        [
            "intros H'5; elim H'5; intros H'6 H'7; rewrite H'6; clear H'5; auto.",
            "VernacExtend",
            "460fd9cc14932b3f24cec7724b0719ab51b07703"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Theorem ExactMinusIntervalAux : forall P, RoundedModeP b radix P -> forall p q : float, (0 < p)%R -> (2%nat * p < q)%R -> Fcanonic radix b p -> Fcanonic radix b q -> (exists r : float, Fbounded b r /\\ r = (q - p)%R :>R) -> forall r : float, Fcanonic radix b r -> (2%nat * p < r)%R -> (r <= q)%R -> exists r' : float, Fbounded b r' /\\ r' = (r - p)%R :>R.",
            "VernacStartTheoremProof",
            "68637aaf7f65064872329c2fba8993177846c9f7"
        ],
        [
            "intros P H' p q H'0 H'1 H'2 H'3 H'4 r H'5 H'6 H'7.",
            "VernacExtend",
            "cb742f59c8ee7741726dd232603a10021aa733e4"
        ],
        [
            "cut (0 <= p)%R; [ intros Rle0 | apply Rlt_le; auto ].",
            "VernacExtend",
            "c0e26919124b1ef9e8191d1b49cf5b049339c461"
        ],
        [
            "cut (0 <= r)%R; [ intros Rle1 | apply Rle_trans with (2%nat * p)%R; auto ].",
            "VernacExtend",
            "f29c2c08ae30006c3f413fd01ac7b0c3a99beeb3"
        ],
        [
            "2: apply Rle_trans with (FtoRradix p); auto with float arith.",
            "VernacExtend",
            "760e67bc1f8c6a92aaaa4e6bf44ddd4678de3f41"
        ],
        [
            "2: apply Rledouble; auto.",
            "VernacExtend",
            "91e3db9d44a9b9130ad2d36756cdf1d0a7c2c160"
        ],
        [
            "2: apply Rlt_le; auto.",
            "VernacExtend",
            "de02fbaf2294e5291e5a61f35eda44b500d4875c"
        ],
        [
            "generalize H'6; clear H'6; pattern r in |- *; apply (FinductNeg b radix precision) with (p := q); auto with arith.",
            "VernacExtend",
            "79b947a11d6548eb008dad8785d6a629baf2fca2"
        ],
        [
            "apply Rle_trans with (FtoRradix r); auto.",
            "VernacExtend",
            "acb151fd283147fa980966a48ab8997b635dab2e"
        ],
        [
            "intros q0 H'6 H'8 H'9 H'10 H'11.",
            "VernacExtend",
            "eb61cb3a6bd2c9a4f98c0e880d6a19f24731c162"
        ],
        [
            "elim H'10; [ intros r' E; elim E; intros H'13 H'14; clear E H'10 | clear H'10 ]; auto.",
            "VernacExtend",
            "cb4b27ba557ac388528962f5ae473a570a50be43"
        ],
        [
            "2: apply Rlt_trans with (1 := H'11); auto; apply (FPredLt b radix precision); auto with arith.",
            "VernacExtend",
            "59d599cb03f5ee5414b39416594d21dbdb3c68b2"
        ],
        [
            "cut (0 <= Fnormalize radix b precision r')%R; [ intros Rle2 | idtac ].",
            "VernacExtend",
            "c10f9493c0a08410ad608887931fd66f15a4a8f5"
        ],
        [
            "2: rewrite (FnormalizeCorrect radix); auto with arith.",
            "VernacExtend",
            "8d5516754bee8fc0c79a9109fc78b0b75f2057fb"
        ],
        [
            "2: unfold FtoRradix in H'14; rewrite H'14.",
            "VernacExtend",
            "ec4dd39b2294536f1491364c1eab34454d37e907"
        ],
        [
            "2: apply Rplus_le_reg_l with (r := FtoR radix p).",
            "VernacExtend",
            "d7c00efc990fd257eb2bf7b430e44c85cd0ad30e"
        ],
        [
            "2: replace (FtoR radix p + 0)%R with (FtoR radix p); [ idtac | ring ].",
            "VernacExtend",
            "9eb274186b0723db5e9318364a6002fae0b6d871"
        ],
        [
            "2: replace (FtoR radix p + (FtoR radix q0 - FtoR radix p))%R with (FtoR radix q0); [ idtac | ring ].",
            "VernacExtend",
            "271fafa6bca54428217c68651a1600cfb952fc8f"
        ],
        [
            "2: apply Rle_trans with (2%nat * p)%R; auto.",
            "VernacExtend",
            "4c7c41ff13425a534fba860a94e23383f1f164b2"
        ],
        [
            "2: apply Rledouble; auto with real arith.",
            "VernacExtend",
            "ca80a8ea20e0bece36cd988680efe929a8584295"
        ],
        [
            "2: apply Rlt_le; apply Rlt_trans with (1 := H'11); auto with float.",
            "VernacExtend",
            "b8f73d1369ce41c603ab4ff096cef0c595a50551"
        ],
        [
            "2: apply (FPredLt b radix precision); auto with arith.",
            "VernacExtend",
            "24193a01357029e41fd0fdcfbcabb1d47b84916b"
        ],
        [
            "cut (Fnormalize radix b precision r' < q0)%R; [ intros Rle3 | idtac ].",
            "VernacExtend",
            "b962cd2ac7f10d3af9f468bc9b01b1b18d76d16a"
        ],
        [
            "2: rewrite (FnormalizeCorrect radix); auto with arith.",
            "VernacExtend",
            "8d5516754bee8fc0c79a9109fc78b0b75f2057fb"
        ],
        [
            "2: unfold FtoRradix in H'14; rewrite H'14.",
            "VernacExtend",
            "ec4dd39b2294536f1491364c1eab34454d37e907"
        ],
        [
            "2: apply Rplus_lt_reg_l with (r := (- q0)%R).",
            "VernacExtend",
            "fc4cd1b59daa96516573eac50261ccccea0555ad"
        ],
        [
            "2: replace (- q0 + (FtoR radix q0 - FtoR radix p))%R with (- p)%R; [ idtac | unfold FtoRradix in |- *; ring; ring ].",
            "VernacExtend",
            "4eb29098c743aefab03cf799ee26e8b1b57bf488"
        ],
        [
            "2: replace (- q0 + q0)%R with (-0)%R; [ auto with real | ring ].",
            "VernacExtend",
            "8ac96be92be45a0a56645f6a8a51e0cbcca1fe3d"
        ],
        [
            "case radixRangeBoundExp with (p := Fnormalize radix b precision r') (q := q0); auto with float arith; fold FtoRradix in |- *.",
            "VernacExtend",
            "ac1f1e159a2e08e180b625931f14d1f083d46fd7"
        ],
        [
            "rewrite (FnormalizeCorrect radix); auto with arith.",
            "VernacExtend",
            "5c6bcfd46867a79fca90d9d4aa1e108896d1e804"
        ],
        [
            "apply Rlt_le_trans with (2%nat * r')%R; auto.",
            "VernacExtend",
            "d68f9d503df92a3089e2617bdcc83dbd6535f4e7"
        ],
        [
            "rewrite H'14.",
            "VernacExtend",
            "9ff050b355bc906a11f60899b1061e024393526f"
        ],
        [
            "rewrite Rmult_minus_distr_l.",
            "VernacExtend",
            "7222a49d2309983cf6476a1131eec66c4836f9f6"
        ],
        [
            "pattern (FtoRradix q0) at 1 in |- *; (replace (FtoRradix q0) with (2%nat * q0 - q0)%R; [ idtac | simpl in |- *; ring ]).",
            "VernacExtend",
            "1b6a6a34073ab8b47128d5df8a63dc1430eb13c2"
        ],
        [
            "unfold Rminus in |- *; apply Rplus_lt_compat_l; apply Ropp_lt_contravar.",
            "VernacExtend",
            "40b123b4d1c7a9bbc490a7db467795d9284ceb0a"
        ],
        [
            "apply Rlt_trans with (1 := H'11).",
            "VernacExtend",
            "d0d5cfb84482a6fe90a54187497df4a3bd1bb652"
        ],
        [
            "apply (FPredLt b radix precision); auto with arith.",
            "VernacExtend",
            "b41cc8a5bdc3c73ef7fa44c126e160fc17fb0089"
        ],
        [
            "apply Rmult_le_compat_r; auto with real arith.",
            "VernacExtend",
            "118f6d965446d8abadb72c8e021be24c227d51f0"
        ],
        [
            "unfold FtoRradix in Rle2; rewrite (FnormalizeCorrect radix) in Rle2; auto with arith.",
            "VernacExtend",
            "a766d8e3e321e66541ac9f48a8e89518cf5780fc"
        ],
        [
            "rewrite INR_IZR_INZ; cut (2 <= radix)%Z; auto with real zarith.",
            "VernacExtend",
            "e980a8508190ed2b6535bc332e3aa4f925138711"
        ],
        [
            "cut (1 < radix)%Z; auto with zarith.",
            "VernacExtend",
            "f5620c12aa3cca27eebd3501ffcb171490a37345"
        ],
        [
            "intros H'10.",
            "VernacExtend",
            "8b8e03a153a8fac68680466419f8f0574b7f5c87"
        ],
        [
            "case (FcanonicLtPos _ radixMoreThanOne b precision) with (p := Fnormalize radix b precision r') (q := q0); auto with arith.",
            "VernacExtend",
            "70a3000199897892411847dbcee767c94abe38ed"
        ],
        [
            "apply FnormalizeCanonic; auto with arith.",
            "VernacExtend",
            "38090fba049d672f91a024edd56166758e23d7ca"
        ],
        [
            "intros; Contradict H'10; auto with zarith.",
            "VernacExtend",
            "d6918e5ad2d3af8e4684831a022407fb7c8ec780"
        ],
        [
            "intros H'12; elim H'12; intros H'15 H'16; clear H'12.",
            "VernacExtend",
            "4417a021f828f5e17f63179fccc4ba23ac637337"
        ],
        [
            "exists (Float (Zpred (Fnum (Fnormalize radix b precision r'))) (Fexp (Fnormalize radix b precision r'))).",
            "VernacExtend",
            "d439a156f0378f731034f9b093113eb8ad7a0dbc"
        ],
        [
            "split.",
            "VernacExtend",
            "55abc140132bd88981001ac656020469a8d503eb"
        ],
        [
            "cut (Fbounded b (Fnormalize radix b precision r')); [ intros Fb0 | idtac ].",
            "VernacExtend",
            "5ac3ecf8b88754ba082ea29838e146803b9f0f87"
        ],
        [
            "repeat split; simpl in |- *; auto with float.",
            "VernacExtend",
            "3e093824de91ab2af8d090987eafb93df05226c2"
        ],
        [
            "case Rle2; intros Z1.",
            "VernacExtend",
            "e4402fdfc9131432e1c44bb6ada8c30b3efcf2f3"
        ],
        [
            "apply Zle_lt_trans with (Zabs (Fnum (Fnormalize radix b precision r'))); auto with float zarith.",
            "VernacExtend",
            "ab8ec217a99eb4f8149a46b9b12240d48399510a"
        ],
        [
            "repeat rewrite Zabs_eq; auto with zarith.",
            "VernacExtend",
            "ce6af9c9e2dbbf5e96aba4104d03a58482acdd03"
        ],
        [
            "apply (LeR0Fnum radix); auto with zarith.",
            "VernacExtend",
            "8465818dffe3721630eb7b27711706329c8528eb"
        ],
        [
            "apply Zle_Zpred; apply (LtR0Fnum radix); auto with zarith.",
            "VernacExtend",
            "978b9a4bba080bcbe8546be2ed95ab8fd9b50da6"
        ],
        [
            "replace (Fnum (Fnormalize radix b precision r')) with 0%Z; simpl in |- *; auto with zarith.",
            "VernacExtend",
            "9d153ba5fb3d4adfe62081f404de946e3db83cde"
        ],
        [
            "apply (vNumbMoreThanOne radix) with (precision := precision); auto with zarith.",
            "VernacExtend",
            "c29f7cde7313a0159f5e6e723b15563e2dc77df2"
        ],
        [
            "apply sym_equal; change (is_Fzero (Fnormalize radix b precision r')) in |- *; apply (is_Fzero_rep2 radix); auto with zarith.",
            "VernacExtend",
            "29d171849006fd8e68262b888de6b666e188e0fd"
        ],
        [
            "apply FcanonicBound with (radix := radix); auto.",
            "VernacExtend",
            "7ff66c1c77430eeda2d6b2110bd18def44854cf6"
        ],
        [
            "apply FnormalizeCanonic; auto with arith.",
            "VernacExtend",
            "38090fba049d672f91a024edd56166758e23d7ca"
        ],
        [
            "replace (Float (Zpred (Fnum (Fnormalize radix b precision r'))) (Fexp (Fnormalize radix b precision r'))) with (Fminus radix (Fnormalize radix b precision r') (Fminus radix q0 (FPred b radix precision q0))).",
            "VernacExtend",
            "813e936a1ff2869c065d8577b52267b2c8981eb5"
        ],
        [
            "repeat rewrite (Fopp_correct radix); repeat rewrite (Fminus_correct radix); auto with arith.",
            "VernacExtend",
            "12c570e93b312efddd4bf9c9ef035a6155e8f440"
        ],
        [
            "rewrite (FnormalizeCorrect radix); auto with arith.",
            "VernacExtend",
            "5c6bcfd46867a79fca90d9d4aa1e108896d1e804"
        ],
        [
            "unfold FtoRradix in H'14; rewrite H'14.",
            "VernacExtend",
            "4e975571b0239b9ef24fc5ed47c5f3117336d7fc"
        ],
        [
            "unfold FtoRradix in |- *; ring; ring.",
            "VernacExtend",
            "47b9dee74a6d0b0a6a84f1179954937f4be47b0c"
        ],
        [
            "replace (FPred b radix precision q0) with (Float (Zpred (Fnum q0)) (Fexp q0)); auto.",
            "VernacExtend",
            "3accbfcc8f3da3f8eb33c6d840895f526692d022"
        ],
        [
            "unfold Fminus, Fopp, Fplus in |- *; simpl in |- *.",
            "VernacExtend",
            "bc4c0b8e938e9fdf86bab40c368d368338e5f719"
        ],
        [
            "repeat rewrite Zmin_n_n; repeat rewrite <- Zminus_diag_reverse; simpl in |- *; auto.",
            "VernacExtend",
            "a43491d9205af7e9729eb756b5e97f352701dde9"
        ],
        [
            "rewrite H.",
            "VernacExtend",
            "6192df8b89486a3ba89a78e26e0d70cae2dc94c2"
        ],
        [
            "repeat rewrite Zmin_n_n; repeat rewrite <- Zminus_diag_reverse; simpl in |- *; auto.",
            "VernacExtend",
            "a43491d9205af7e9729eb756b5e97f352701dde9"
        ],
        [
            "repeat rewrite Zmult_1_r.",
            "VernacExtend",
            "b5d078029e55672d924f0594525d5aa4dc4c82b3"
        ],
        [
            "apply floatEq; simpl in |- *; auto; unfold Zpred in |- *; ring.",
            "VernacExtend",
            "030c0572bac25cf3650a93952049ea5d3ffc1368"
        ],
        [
            "case (Z_eq_dec (Fnum q0) (nNormMin radix precision)); intros Zeq2.",
            "VernacExtend",
            "62f41b2bf05973afc1e0a8e00476e7fd249069fe"
        ],
        [
            "case (Z_eq_dec (Fexp q0) (- dExp b)); intros Zeq1.",
            "VernacExtend",
            "6b98125ac4e346ed8d4b8c504470f3ceba3351a7"
        ],
        [
            "rewrite Zeq1; rewrite Zeq2; rewrite <- (FPredSimpl3 b radix); auto with arith; rewrite <- Zeq1; rewrite <- Zeq2; auto.",
            "VernacExtend",
            "b13bc514a5130d75bc02942f8f2913e4513f81d8"
        ],
        [
            "Contradict H'16.",
            "VernacExtend",
            "8547f71f29e43f5877ca2cb079ad40f1db75d477"
        ],
        [
            "apply Zle_not_lt.",
            "VernacExtend",
            "a635904a634172283c98f3792d1f8261c5710c4f"
        ],
        [
            "rewrite Zeq2.",
            "VernacExtend",
            "3c097f2191fb9b9c41c2d44d4707fc1a4713d908"
        ],
        [
            "rewrite <- (Zabs_eq (Fnum (Fnormalize radix b precision r'))); auto with zarith.",
            "VernacExtend",
            "cf6143f22f4368fc72863e4361bf7054dfaf13db"
        ],
        [
            "apply pNormal_absolu_min with (b := b); auto with arith.",
            "VernacExtend",
            "b22f9b4ee60a1052cf2831fcc09748a1d7730c95"
        ],
        [
            "cut (Fcanonic radix b (Fnormalize radix b precision r')); [ intros Ca1; case Ca1; auto | auto with float arith ].",
            "VernacExtend",
            "d69519a2a5394107100fd21cfdf68602769a3069"
        ],
        [
            "intros H'12; case Zeq1; rewrite <- H.",
            "VernacExtend",
            "e89963fbf4a5ad6c57dfa27434aedd743807fc34"
        ],
        [
            "case H'12; auto.",
            "VernacExtend",
            "a6ba4dd1f412438f43abc6a1ed5510879bbc9231"
        ],
        [
            "intros Hbis H0; case H0; auto.",
            "VernacExtend",
            "7566f72f37fdb7dfd75fcfb59b5bf4be86a08c54"
        ],
        [
            "apply (LeR0Fnum radix); auto.",
            "VernacExtend",
            "8495e6ad2e5a68d8e7fe5d9a8401af435ce04ea2"
        ],
        [
            "rewrite FPredSimpl4; auto.",
            "VernacExtend",
            "08e10b23f4e22e63a5db6cedd490d6bbeb7caa8a"
        ],
        [
            "Contradict H'16; rewrite H'16.",
            "VernacExtend",
            "40663694c2a59fb811d6d5801eb592308f6e8a13"
        ],
        [
            "apply Zle_not_lt.",
            "VernacExtend",
            "a635904a634172283c98f3792d1f8261c5710c4f"
        ],
        [
            "unfold pPred in |- *; rewrite Zopp_Zpred_Zs; apply Zlt_le_succ.",
            "VernacExtend",
            "57caeb0736e0a49c1d4a3ce4e077562f493ffc49"
        ],
        [
            "apply Zlt_Zabs_inv1.",
            "VernacExtend",
            "678391bcdbea64808f325ce9ba1db644fad18553"
        ],
        [
            "cut (Fbounded b (Fnormalize radix b precision r')); [ auto with float | idtac ].",
            "VernacExtend",
            "1688beeeb7025a990c1b2fa4df8fef25e49a4d8b"
        ],
        [
            "apply (FcanonicBound radix b); auto with float arith.",
            "VernacExtend",
            "56da0d6287869d9e56da23e4491d0745de57378f"
        ],
        [
            "intros H'10.",
            "VernacExtend",
            "8b8e03a153a8fac68680466419f8f0574b7f5c87"
        ],
        [
            "case (Z_eq_dec (Fnum q0) (nNormMin radix precision)); intros Zeq2.",
            "VernacExtend",
            "62f41b2bf05973afc1e0a8e00476e7fd249069fe"
        ],
        [
            "exists (Float (Zpred (Fnum (Fnormalize radix b precision r'))) (Fexp (Fnormalize radix b precision r'))).",
            "VernacExtend",
            "d439a156f0378f731034f9b093113eb8ad7a0dbc"
        ],
        [
            "cut (Fbounded b (Fnormalize radix b precision r')); [ intros Fb1 | idtac ].",
            "VernacExtend",
            "b372d452e5d77944289794e7b3ef1522166b9bcb"
        ],
        [
            "repeat split; simpl in |- *; auto with float.",
            "VernacExtend",
            "3e093824de91ab2af8d090987eafb93df05226c2"
        ],
        [
            "case Rle2; intros Z1.",
            "VernacExtend",
            "e4402fdfc9131432e1c44bb6ada8c30b3efcf2f3"
        ],
        [
            "apply Zlt_trans with (Zabs (Fnum (Fnormalize radix b precision r'))).",
            "VernacExtend",
            "2341e050d2d8b77ce1d1d01c7e6e733541d7bca8"
        ],
        [
            "repeat rewrite Zabs_eq; auto with zarith.",
            "VernacExtend",
            "ce6af9c9e2dbbf5e96aba4104d03a58482acdd03"
        ],
        [
            "apply (LeR0Fnum radix); auto.",
            "VernacExtend",
            "8495e6ad2e5a68d8e7fe5d9a8401af435ce04ea2"
        ],
        [
            "apply Zle_Zpred; apply (LtR0Fnum radix); auto.",
            "VernacExtend",
            "ce7753972b0bd18c1a23ebf374d27fd5d661323b"
        ],
        [
            "case Fb1; auto.",
            "VernacExtend",
            "82e639eb3da4e6da32e6ebb41567ca00bfb0a4d0"
        ],
        [
            "replace (Fnum (Fnormalize radix b precision r')) with 0%Z.",
            "VernacExtend",
            "beb879a725a3ee6d8b651267aa5d55103d121ac6"
        ],
        [
            "simpl in |- *; apply (vNumbMoreThanOne radix) with (precision := precision); auto with zarith.",
            "VernacExtend",
            "2df2ebd2628e66570368d7c18842c497cfb6ef1a"
        ],
        [
            "apply sym_equal; change (is_Fzero (Fnormalize radix b precision r')) in |- *; apply (is_Fzero_rep2 radix); auto with zarith.",
            "VernacExtend",
            "29d171849006fd8e68262b888de6b666e188e0fd"
        ],
        [
            "rewrite FPredSimpl2; auto with zarith.",
            "VernacExtend",
            "e9617ca7ac3b4b8f53fe57f8daaf3824ed81c522"
        ],
        [
            "rewrite <- H'10.",
            "VernacExtend",
            "424208be23735394e6d2f5ef006a729a4eb00e90"
        ],
        [
            "cut (forall z : Z, Zpred (Zsucc z) = z); [ intros tmp; rewrite tmp; clear tmp | intros; unfold Zsucc, Zpred in |- *; ring ].",
            "VernacExtend",
            "27801365f9dd4536b7bfd241cc7f8a1a2af14c85"
        ],
        [
            "unfold FtoRradix, FtoR in |- *; simpl in |- *.",
            "VernacExtend",
            "85a3da1582165d92ceb7faef707de88822bccf1a"
        ],
        [
            "cut (forall x : Z, Zpred x = (x - 1%nat)%Z); [ intros tmp; rewrite tmp; clear tmp | intros; unfold Zpred in |- *; simpl in |- *; ring ].",
            "VernacExtend",
            "282472d8dd0737acfbebdafe11e2bf4d19e1928c"
        ],
        [
            "unfold FtoRradix, FtoR in |- *; simpl in |- *.",
            "VernacExtend",
            "85a3da1582165d92ceb7faef707de88822bccf1a"
        ],
        [
            "rewrite <- Z_R_minus; auto.",
            "VernacExtend",
            "0c16c377ab202b54644f299f34c8ac39a2f06589"
        ],
        [
            "rewrite (fun x y => Rmult_comm (x - y)); rewrite Rmult_minus_distr_l; repeat rewrite (fun x y => Rmult_comm (powerRZ x y)).",
            "VernacExtend",
            "6c9603dd7681469b34027e891e3b6d8a3dcde71e"
        ],
        [
            "replace (Fnum (Fnormalize radix b precision r') * powerRZ radix (Fexp (Fnormalize radix b precision r')))%R with (FtoRradix (Fnormalize radix b precision r')).",
            "VernacExtend",
            "749f64ed3d48c7f4537c2d0329b68aacc8787c89"
        ],
        [
            "rewrite (FnormalizeCorrect radix); auto.",
            "VernacExtend",
            "33b81174380640e564ed2b624b1a7df4a68da480"
        ],
        [
            "unfold FtoRradix in H'14; rewrite H'14.",
            "VernacExtend",
            "4e975571b0239b9ef24fc5ed47c5f3117336d7fc"
        ],
        [
            "unfold FtoR in |- *; simpl in |- *.",
            "VernacExtend",
            "b122ca13d8a9bd3595bc1e75c78d344f671d3504"
        ],
        [
            "pattern (Fexp q0) at 1 in |- *; rewrite <- H'10.",
            "VernacExtend",
            "323fd8fee302f90c40591b14c6ee9b1440de499e"
        ],
        [
            "rewrite Zeq2; rewrite powerRZ_Zs; auto with real zarith.",
            "VernacExtend",
            "7afe81cb6c84fd2700c18856be48b2a99e78af53"
        ],
        [
            "rewrite <- Rmult_assoc.",
            "VernacExtend",
            "34da3c50cde53c179a4908b1329a459071245c05"
        ],
        [
            "replace (nNormMin radix precision * radix)%R with (powerRZ radix precision).",
            "VernacExtend",
            "220fa2e1fb676a32c08866a0cf4e2c40602cb418"
        ],
        [
            "unfold pPred, nNormMin, Zpred in |- *; rewrite pGivesBound.",
            "VernacExtend",
            "d6a4ee92cb2653eef6067120b070a28151556d62"
        ],
        [
            "rewrite plus_IZR; repeat rewrite Zpower_nat_Z_powerRZ; simpl in |- *; try ring.",
            "VernacExtend",
            "3a56b91d040327159659df4edefe30ced341a752"
        ],
        [
            "rewrite <- Zpower_nat_Z_powerRZ; auto with zarith; rewrite <- Rmult_IZR; rewrite Zmult_comm; rewrite <- (PosNormMin radix b precision); auto with real zarith.",
            "VernacExtend",
            "6113f56124f880ab338baf871c128ecda0772aa6"
        ],
        [
            "auto.",
            "VernacExtend",
            "1f09da0addd069b3b65326f8c71967acc1e985af"
        ],
        [
            "red in |- *; intros H'12; absurd (- dExp b <= Fexp (Fnormalize radix b precision r'))%Z; auto with float.",
            "VernacExtend",
            "6de3fa80ac84f6edae4974777e99c50a25c0d291"
        ],
        [
            "apply Zlt_not_le.",
            "VernacExtend",
            "f50dda740686f871b63754e02667d404d580866b"
        ],
        [
            "rewrite <- H'12; rewrite <- H'10; unfold Zsucc in |- *; auto with float zarith.",
            "VernacExtend",
            "1f46b65941653ee012ca8638064f7979753ea3e8"
        ],
        [
            "apply (FcanonicBound radix b); auto with arith.",
            "VernacExtend",
            "41f57ce1f9da50475fda73f3c0b7e6dd5aea7c75"
        ],
        [
            "apply FnormalizeCanonic; auto with arith.",
            "VernacExtend",
            "38090fba049d672f91a024edd56166758e23d7ca"
        ],
        [
            "exists (Float (Fnum (Fnormalize radix b precision r') - radix) (Fexp (Fnormalize radix b precision r'))).",
            "VernacExtend",
            "7e2bce681820ad6c5e52089222a7d773559f508c"
        ],
        [
            "cut (Fbounded b (Fnormalize radix b precision r')); [ intros Fb1 | idtac ].",
            "VernacExtend",
            "b372d452e5d77944289794e7b3ef1522166b9bcb"
        ],
        [
            "repeat split; simpl in |- *; auto with float.",
            "VernacExtend",
            "3e093824de91ab2af8d090987eafb93df05226c2"
        ],
        [
            "case (Zle_or_lt (Fnum (Fnormalize radix b precision r')) radix); intros Z1.",
            "VernacExtend",
            "13f1065591d54e6b5df6226880e90aa79d6d0310"
        ],
        [
            "apply Zle_lt_trans with radix.",
            "VernacExtend",
            "36b95c9cccf0676ad7b133f7f2038aa5e741441d"
        ],
        [
            "rewrite Zabs_eq_opp; auto with zarith.",
            "VernacExtend",
            "d1888583c84e1af1a1f84bd672b00f29ddb60bc5"
        ],
        [
            "cut (0 <= Fnum (Fnormalize radix b precision r'))%Z; auto with zarith.",
            "VernacExtend",
            "bbb8776594b61b2e568bab4e174958bea59e126c"
        ],
        [
            "apply (LeR0Fnum radix); auto.",
            "VernacExtend",
            "8495e6ad2e5a68d8e7fe5d9a8401af435ce04ea2"
        ],
        [
            "rewrite <- (Zpower_nat_1 radix); rewrite pGivesBound; auto with zarith.",
            "VernacExtend",
            "670c9ab1864b0670a6980f6677a45675967ae62a"
        ],
        [
            "apply Zle_lt_trans with (Zabs (Fnum (Fnormalize radix b precision r'))).",
            "VernacExtend",
            "3588496e204c2f086511ee556d51ef6fa73b973e"
        ],
        [
            "repeat rewrite Zabs_eq; auto with zarith.",
            "VernacExtend",
            "ce6af9c9e2dbbf5e96aba4104d03a58482acdd03"
        ],
        [
            "case Fb1; auto.",
            "VernacExtend",
            "82e639eb3da4e6da32e6ebb41567ca00bfb0a4d0"
        ],
        [
            "rewrite FPredSimpl4; auto with arith.",
            "VernacExtend",
            "ef013b2145bbb9f62e95929ed6b72c282adf5a39"
        ],
        [
            "rewrite <- H'10.",
            "VernacExtend",
            "424208be23735394e6d2f5ef006a729a4eb00e90"
        ],
        [
            "unfold FtoRradix, FtoR in |- *; simpl in |- *.",
            "VernacExtend",
            "85a3da1582165d92ceb7faef707de88822bccf1a"
        ],
        [
            "cut (forall x : Z, Zpred x = (x - 1%nat)%Z); [ intros tmp; rewrite tmp; clear tmp | intros; unfold Zpred in |- *; simpl in |- *; ring ].",
            "VernacExtend",
            "282472d8dd0737acfbebdafe11e2bf4d19e1928c"
        ],
        [
            "repeat rewrite <- Z_R_minus; auto.",
            "VernacExtend",
            "411ebd88015b58352fe6d5280349a14458734a72"
        ],
        [
            "repeat rewrite (fun x y => Rmult_comm (x - y)); repeat rewrite Rmult_minus_distr_l; repeat rewrite (fun x y => Rmult_comm (powerRZ x y)).",
            "VernacExtend",
            "f57a84519e83b4da65ea58acd5e6066f08a9c56c"
        ],
        [
            "replace (Fnum (Fnormalize radix b precision r') * powerRZ radix (Fexp (Fnormalize radix b precision r')))%R with (FtoRradix (Fnormalize radix b precision r')).",
            "VernacExtend",
            "749f64ed3d48c7f4537c2d0329b68aacc8787c89"
        ],
        [
            "rewrite (FnormalizeCorrect radix); auto.",
            "VernacExtend",
            "33b81174380640e564ed2b624b1a7df4a68da480"
        ],
        [
            "unfold FtoRradix in H'14; rewrite H'14.",
            "VernacExtend",
            "4e975571b0239b9ef24fc5ed47c5f3117336d7fc"
        ],
        [
            "unfold FtoR in |- *; simpl in |- *.",
            "VernacExtend",
            "b122ca13d8a9bd3595bc1e75c78d344f671d3504"
        ],
        [
            "rewrite <- H'10.",
            "VernacExtend",
            "424208be23735394e6d2f5ef006a729a4eb00e90"
        ],
        [
            "repeat rewrite powerRZ_Zs; auto with real arith.",
            "VernacExtend",
            "41cdbc89810f591661855f92280c149e0e74524c"
        ],
        [
            "ring.",
            "VernacExtend",
            "baadd9fc4c175005af409bb466fcea9fab25b4e6"
        ],
        [
            "auto with real zarith.",
            "VernacExtend",
            "adb253df2d9560ab81f40ee78f067764177c29bf"
        ],
        [
            "unfold FtoR in |- *; simpl in |- *; auto.",
            "VernacExtend",
            "31aae83e26f2a4cd8ff80efd1d15ab2e7bcfd319"
        ],
        [
            "red in |- *; intros H'12; absurd (0 <= Fnum q0)%Z; auto.",
            "VernacExtend",
            "0d71b362f398a3f1d414813f1e166c38b28a10f2"
        ],
        [
            "apply Zlt_not_le.",
            "VernacExtend",
            "f50dda740686f871b63754e02667d404d580866b"
        ],
        [
            "rewrite H'12.",
            "VernacExtend",
            "abb367939436c3fc988de9640349610cb96041af"
        ],
        [
            "replace 0%Z with (- 0%nat)%Z; [ apply Zlt_Zopp | simpl in |- *; auto ].",
            "VernacExtend",
            "44b61f066dae1284acf742ff2d1662f7440871df"
        ],
        [
            "unfold pPred in |- *; apply Zlt_succ_pred; simpl in |- *; auto with zarith.",
            "VernacExtend",
            "cbb95b22764628c30fe4da2450023516245cff6e"
        ],
        [
            "apply (vNumbMoreThanOne radix) with (precision := precision); auto with zarith.",
            "VernacExtend",
            "c29f7cde7313a0159f5e6e723b15563e2dc77df2"
        ],
        [
            "apply (LeR0Fnum radix); auto.",
            "VernacExtend",
            "8495e6ad2e5a68d8e7fe5d9a8401af435ce04ea2"
        ],
        [
            "apply Rlt_le; auto.",
            "VernacExtend",
            "4003e3e1c449ee89cad9e953d0a562db8235648c"
        ],
        [
            "apply (FcanonicBound radix b); auto with arith.",
            "VernacExtend",
            "41f57ce1f9da50475fda73f3c0b7e6dd5aea7c75"
        ],
        [
            "apply FnormalizeCanonic; auto with arith.",
            "VernacExtend",
            "38090fba049d672f91a024edd56166758e23d7ca"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Theorem ExactMinusIntervalAux1 : forall P, RoundedModeP b radix P -> forall p q : float, (0 <= p)%R -> (p <= q)%R -> Fcanonic radix b p -> Fcanonic radix b q -> (exists r : float, Fbounded b r /\\ r = (q - p)%R :>R) -> forall r : float, Fcanonic radix b r -> (p <= r)%R -> (r <= q)%R -> exists r' : float, Fbounded b r' /\\ r' = (r - p)%R :>R.",
            "VernacStartTheoremProof",
            "8eb82ed2ada2a612f72e1e7b1c3783e71ffb768a"
        ],
        [
            "intros P H' p q H'0 H'1 H'2 H'3 H'4 r H'5 H'6 H'7.",
            "VernacExtend",
            "cb742f59c8ee7741726dd232603a10021aa733e4"
        ],
        [
            "Casec H'0; intros H'0.",
            "VernacExtend",
            "74e0ea338c1cad6c0c229dac6fae92782a18d546"
        ],
        [
            "case (Rle_or_lt q (2%nat * p)); intros Rl1.",
            "VernacExtend",
            "ad79f04fcf63223c3a4a0d2d26714df1ca5452e1"
        ],
        [
            "exists (Fminus radix r p); split; auto.",
            "VernacExtend",
            "bdcdde3c1d0989038546ef6f680954453ee2d010"
        ],
        [
            "rewrite <- Fopp_Fminus.",
            "VernacExtend",
            "1c443a8ba74c86b8fdff1e33c3cdb7af22126cbe"
        ],
        [
            "apply oppBounded.",
            "VernacExtend",
            "8f23dc41641fadcf301cdaba37e5d605a321c6fd"
        ],
        [
            "apply Sterbenz; auto.",
            "VernacExtend",
            "2d564057c2daa6631c6b156cb718aa4284b2d9cb"
        ],
        [
            "apply (FcanonicBound radix b); auto with arith.",
            "VernacExtend",
            "41f57ce1f9da50475fda73f3c0b7e6dd5aea7c75"
        ],
        [
            "apply (FcanonicBound radix b); auto with arith.",
            "VernacExtend",
            "41f57ce1f9da50475fda73f3c0b7e6dd5aea7c75"
        ],
        [
            "apply Rmult_le_reg_l with (r := INR 2); auto with real.",
            "VernacExtend",
            "d844aeae389b738df4405a2dd7bb4aed456229ac"
        ],
        [
            "rewrite <- Rmult_assoc; rewrite Rinv_r; auto with real arith; rewrite Rmult_1_l; auto.",
            "VernacExtend",
            "4b9951cc81fc8cb89d518c793bd43c5b0297f6b2"
        ],
        [
            "apply Rle_trans with (1 := H'7); auto.",
            "VernacExtend",
            "a3a8bb414a52edaaae67b67c69dec3632a31b08d"
        ],
        [
            "apply Rle_trans with (1 := H'6); auto.",
            "VernacExtend",
            "abff54407bf5f623909f33dff1e7e432f34514ff"
        ],
        [
            "apply Rledouble; auto.",
            "VernacExtend",
            "91a11e7bfb03a12894eb0db96cc7013309392099"
        ],
        [
            "apply Rle_trans with (2 := H'6); apply Rlt_le; auto.",
            "VernacExtend",
            "c9b67b5943e92cc988aacb8b6dea0c7411369f8f"
        ],
        [
            "rewrite (Fminus_correct radix); auto with arith.",
            "VernacExtend",
            "6bc18318ecade68693c942f9aff67950b1934763"
        ],
        [
            "case (Rle_or_lt r (2%nat * p)); intros Rl2.",
            "VernacExtend",
            "1fc76eaeacff45a9f95805ce6d858d5648ed0c02"
        ],
        [
            "exists (Fminus radix r p); split; auto.",
            "VernacExtend",
            "bdcdde3c1d0989038546ef6f680954453ee2d010"
        ],
        [
            "rewrite <- Fopp_Fminus.",
            "VernacExtend",
            "1c443a8ba74c86b8fdff1e33c3cdb7af22126cbe"
        ],
        [
            "apply oppBounded.",
            "VernacExtend",
            "8f23dc41641fadcf301cdaba37e5d605a321c6fd"
        ],
        [
            "apply Sterbenz; auto.",
            "VernacExtend",
            "2d564057c2daa6631c6b156cb718aa4284b2d9cb"
        ],
        [
            "apply (FcanonicBound radix b); auto with arith.",
            "VernacExtend",
            "41f57ce1f9da50475fda73f3c0b7e6dd5aea7c75"
        ],
        [
            "apply (FcanonicBound radix b); auto with arith.",
            "VernacExtend",
            "41f57ce1f9da50475fda73f3c0b7e6dd5aea7c75"
        ],
        [
            "apply Rmult_le_reg_l with (r := INR 2); auto with real.",
            "VernacExtend",
            "d844aeae389b738df4405a2dd7bb4aed456229ac"
        ],
        [
            "rewrite <- Rmult_assoc; rewrite Rinv_r; auto with real arith; rewrite Rmult_1_l; auto.",
            "VernacExtend",
            "4b9951cc81fc8cb89d518c793bd43c5b0297f6b2"
        ],
        [
            "apply Rle_trans with (1 := H'6); auto.",
            "VernacExtend",
            "abff54407bf5f623909f33dff1e7e432f34514ff"
        ],
        [
            "apply Rledouble; auto.",
            "VernacExtend",
            "91a11e7bfb03a12894eb0db96cc7013309392099"
        ],
        [
            "apply Rle_trans with (2 := H'6); apply Rlt_le; auto.",
            "VernacExtend",
            "c9b67b5943e92cc988aacb8b6dea0c7411369f8f"
        ],
        [
            "rewrite (Fminus_correct radix); auto with arith.",
            "VernacExtend",
            "6bc18318ecade68693c942f9aff67950b1934763"
        ],
        [
            "apply ExactMinusIntervalAux with (P := P) (q := q); auto.",
            "VernacExtend",
            "d4b6863e46d248f7b801f0e7a4a897a08f1667d9"
        ],
        [
            "exists r; split; auto.",
            "VernacExtend",
            "ed2d902bb2a3e758e16400c7149685d0b8e0cc57"
        ],
        [
            "apply (FcanonicBound radix b); auto with arith.",
            "VernacExtend",
            "41f57ce1f9da50475fda73f3c0b7e6dd5aea7c75"
        ],
        [
            "rewrite <- H'0; ring.",
            "VernacExtend",
            "aaa6f1a2aee1dd10fdff89b368bad856624ad502"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Theorem ExactMinusInterval : forall P, RoundedModeP b radix P -> forall p q : float, (0 <= p)%R -> (p <= q)%R -> Fbounded b p -> Fbounded b q -> (exists r : float, Fbounded b r /\\ r = (q - p)%R :>R) -> forall r : float, Fbounded b r -> (p <= r)%R -> (r <= q)%R -> exists r' : float, Fbounded b r' /\\ r' = (r - p)%R :>R.",
            "VernacStartTheoremProof",
            "2355c6cce87dff27d6a8b8db3bee282184bc7089"
        ],
        [
            "intros P H' p q H'0 H'1 H'2 H'3 H'4 r H'5 H'6 H'7.",
            "VernacExtend",
            "cb742f59c8ee7741726dd232603a10021aa733e4"
        ],
        [
            "replace (FtoRradix r) with (FtoRradix (Fnormalize radix b precision r)); [ idtac | apply (FnormalizeCorrect radix) ]; auto.",
            "VernacExtend",
            "51c7fc8737e175c05234453bb338cdcc1304853a"
        ],
        [
            "replace (FtoRradix p) with (FtoRradix (Fnormalize radix b precision p)); [ idtac | apply (FnormalizeCorrect radix) ]; auto.",
            "VernacExtend",
            "3fe4bd75974d48aaca9f3dfcb9d8f41dc5b4c3f4"
        ],
        [
            "apply ExactMinusIntervalAux1 with (P := P) (q := Fnormalize radix b precision q); auto; try repeat rewrite (FnormalizeCorrect radix); auto; apply FnormalizeCanonic; auto with arith.",
            "VernacExtend",
            "977bad3a9936240425dead031d79005b33deb76a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Theorem MSBroundLSB : forall P : R -> float -> Prop, RoundedModeP b radix P -> forall f1 f2 : float, P f1 f2 -> ~ is_Fzero (Fminus radix f1 f2) -> (MSB radix (Fminus radix f1 f2) < LSB radix f2)%Z.",
            "VernacStartTheoremProof",
            "2455398f5a1e1db6060a9c4fe1316c371ad9d50d"
        ],
        [
            "intros P H' f1 f2 H'0 HZ.",
            "VernacExtend",
            "504138988a4c3b58bd4dab3bf70aa6a6a6f6fd68"
        ],
        [
            "apply (oneExp_Zlt radix); auto.",
            "VernacExtend",
            "a28e3efe88f322e038314c97f072c968733c3c1e"
        ],
        [
            "apply Rlt_le_trans with (Fulp b radix precision f2).",
            "VernacExtend",
            "e35b606b28cdb0c25c3dfa681acaca97e48552dd"
        ],
        [
            "apply Rle_lt_trans with (FtoRradix (Fabs (Fminus radix f1 f2))).",
            "VernacExtend",
            "1fd772690e0af9f1294562ad9fd08b8c8cda6fb8"
        ],
        [
            "unfold FtoRradix in |- *; apply MSB_le_abs; auto.",
            "VernacExtend",
            "293ca157cf35d51b62c19cd2e312b6ef5a98349e"
        ],
        [
            "unfold FtoRradix in |- *; rewrite Fabs_correct; auto with arith; rewrite Fminus_correct; auto with arith.",
            "VernacExtend",
            "e08ae3dadd7dc9a885b828737672c6f6821883a7"
        ],
        [
            "apply RoundedModeUlp with (4 := H'); auto.",
            "VernacExtend",
            "4b487aeec2d6daa38342ff4556abc966c6ff46c6"
        ],
        [
            "apply FUlp_Le_LSigB; auto.",
            "VernacExtend",
            "997cc42173577e05c2066897eeb6dfcd310e9927"
        ],
        [
            "apply RoundedModeBounded with (1 := H') (2 := H'0); auto.",
            "VernacExtend",
            "eb96fc5ae3859af69ff4306c1ac85b80d390650a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Theorem LSBMinus : forall p q : float, ~ is_Fzero (Fminus radix p q) -> (Zmin (LSB radix p) (LSB radix q) <= LSB radix (Fminus radix p q))%Z.",
            "VernacStartTheoremProof",
            "65d9bcee5be9b6af2e32ec7384c77613af4c0e2a"
        ],
        [
            "intros p q H'1.",
            "VernacExtend",
            "02eccb06c6c7e25b447c6d427f3ab9bb1403ab97"
        ],
        [
            "elim (LSB_rep_min radix) with (p := p); auto; intros z E.",
            "VernacExtend",
            "db471b8eec395ee69cc993064c7074b658d1d460"
        ],
        [
            "elim (LSB_rep_min radix) with (p := q); auto; intros z0 E0.",
            "VernacExtend",
            "d53d0220fb2247d5caabe7dc470da7ced1a6017d"
        ],
        [
            "replace (LSB radix (Fminus radix p q)) with (LSB radix (Fminus radix (Float z (LSB radix p)) (Float z0 (LSB radix q)))).",
            "VernacExtend",
            "aeea5655fdd456a6575266ba372601def249e7ac"
        ],
        [
            "replace (Zmin (LSB radix p) (LSB radix q)) with (Fexp (Fminus radix (Float z (LSB radix p)) (Float z0 (LSB radix q)))); [ idtac | simpl in |- *; auto ].",
            "VernacExtend",
            "2890d51a5c85fb85751fc6c4c83f05c71697742a"
        ],
        [
            "apply Fexp_le_LSB; auto.",
            "VernacExtend",
            "e2ef0d6a640e91f3d0a5c1a0c330f2f52eb1d7f2"
        ],
        [
            "apply sym_equal; apply LSB_comp; auto.",
            "VernacExtend",
            "23b181e47c1a4abea4678a7cca2dd472f175cd1e"
        ],
        [
            "repeat rewrite Fminus_correct; auto with arith.",
            "VernacExtend",
            "6664c13ac1883660e5fec5b23d35951fac0f8676"
        ],
        [
            "unfold FtoRradix in E; unfold FtoRradix in E0; rewrite E; rewrite E0; auto.",
            "VernacExtend",
            "d4964e637c560add8674c0de273b8c991924f6a7"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Theorem LSBPlus : forall p q : float, ~ is_Fzero (Fplus radix p q) -> (Zmin (LSB radix p) (LSB radix q) <= LSB radix (Fplus radix p q))%Z.",
            "VernacStartTheoremProof",
            "4e366eddcea619a6dc8951f05994503464382cb0"
        ],
        [
            "intros p q H'.",
            "VernacExtend",
            "6d0165163a2a8e407c09482ce517f2835b5de359"
        ],
        [
            "elim (LSB_rep_min _ radixMoreThanOne p); intros z E.",
            "VernacExtend",
            "859789f4e1a3096404f81b9116c8f6248aaf61d8"
        ],
        [
            "elim (LSB_rep_min _ radixMoreThanOne q); intros z0 E0.",
            "VernacExtend",
            "365550c9c3b2ce5bf268aba3039b999ca03ceaf0"
        ],
        [
            "replace (LSB radix (Fplus radix p q)) with (LSB radix (Fplus radix (Float z (LSB radix p)) (Float z0 (LSB radix q)))).",
            "VernacExtend",
            "31233ef7008f5b1c95826709f84861969416d808"
        ],
        [
            "replace (Zmin (LSB radix p) (LSB radix q)) with (Fexp (Fplus radix (Float z (LSB radix p)) (Float z0 (LSB radix q)))); [ idtac | simpl in |- *; auto ].",
            "VernacExtend",
            "2731510b599f1d3b239b78186bd6742f2bc7323a"
        ],
        [
            "apply Fexp_le_LSB; auto.",
            "VernacExtend",
            "e2ef0d6a640e91f3d0a5c1a0c330f2f52eb1d7f2"
        ],
        [
            "apply sym_equal; apply LSB_comp; auto.",
            "VernacExtend",
            "23b181e47c1a4abea4678a7cca2dd472f175cd1e"
        ],
        [
            "repeat rewrite Fplus_correct; auto with arith.",
            "VernacExtend",
            "8ac6f19b2e5291cae72c7fd6ca32fc7eb43b80ae"
        ],
        [
            "unfold FtoRradix in E; unfold FtoRradix in E0; rewrite E; rewrite E0; auto.",
            "VernacExtend",
            "d4964e637c560add8674c0de273b8c991924f6a7"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "End FRoundP.",
            "VernacEndSegment",
            "520cac324389b919df39c8e053eb70486a239da0"
        ]
    ],
    "proofs": [
        {
            "name": "plusExpMin",
            "line_nb": 13,
            "steps": [
                {
                    "command": [
                        "intros P H' p q pq H'0.",
                        "VernacExtend",
                        "69c90d3f381beb533d8720210e5eb470215883fc"
                    ]
                },
                {
                    "command": [
                        "case (RoundedModeRep b radix precision) with (p := Fplus radix p q) (q := pq) (P := P); auto with float arith.",
                        "VernacExtend",
                        "c3410b4a283866dee8f9310fc4e4a70d47658980"
                    ]
                },
                {
                    "command": [
                        "rewrite Fplus_correct; auto with float arith.",
                        "VernacExtend",
                        "f9e303dfe207a56a769a6ae82c9b434c558a28ad"
                    ]
                },
                {
                    "command": [
                        "simpl in |- *; intros x H'1.",
                        "VernacExtend",
                        "45c52281d62221d6f6b7271a356a4d129b156ba2"
                    ]
                },
                {
                    "command": [
                        "case (eqExpLess _ radixMoreThanOne b) with (p := pq) (q := Float x (Fexp (Fplus radix p q))); auto.",
                        "VernacExtend",
                        "b168f9ea5a7b9c4ebc6eb09f1239b57cfb52ad22"
                    ]
                },
                {
                    "command": [
                        "apply (RoundedModeBounded b radix) with (P := P) (r := (p + q)%R); auto.",
                        "VernacExtend",
                        "c5020e48ec5aa71b00c05efd6d65f4271d317bba"
                    ]
                },
                {
                    "command": [
                        "simpl in |- *; intros x0 H'2; elim H'2; intros H'3 H'4; elim H'4; intros H'5 H'6; clear H'4 H'2.",
                        "VernacExtend",
                        "5a1b146986b3c7959199dd59148dd3a8e29510d2"
                    ]
                },
                {
                    "command": [
                        "exists x0; split; [ idtac | split ]; auto.",
                        "VernacExtend",
                        "b83eae55d733a50b008c7ceeb2e58a6fe45ff027"
                    ]
                },
                {
                    "command": [
                        "unfold FtoRradix in |- *; rewrite H'5; auto.",
                        "VernacExtend",
                        "9144210a6274975e9e2b7e434cfa7f2fc754e7ba"
                    ]
                },
                {
                    "command": [
                        "apply le_IZR; auto.",
                        "VernacExtend",
                        "5ddae610de44a290611008bca1b760849106ddb9"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "plusExpUpperBound",
            "line_nb": 25,
            "steps": [
                {
                    "command": [
                        "intros P H' p q pq H'0 H'1 H'2.",
                        "VernacExtend",
                        "d2f053f2d8716a0239cbe3ace54738c6beca164a"
                    ]
                },
                {
                    "command": [
                        "replace (Zsucc (Zmax (Fexp p) (Fexp q))) with (Fexp (Float (pPred (vNum b)) (Zsucc (Zmax (Fexp p) (Fexp q))))); [ idtac | simpl in |- *; auto ].",
                        "VernacExtend",
                        "32f00d37c7cddb360a785a2726dcfa6eac506c78"
                    ]
                },
                {
                    "command": [
                        "unfold FtoRradix in |- *; apply eqExpMax; auto.",
                        "VernacExtend",
                        "f44c675836e858d2e652687c7ef9b745fca35566"
                    ]
                },
                {
                    "command": [
                        "apply RoundedModeBounded with (radix := radix) (P := P) (r := (p + q)%R); auto with float arith.",
                        "VernacExtend",
                        "36952a57cd8b030a2faef6217c1916f7f5f46956"
                    ]
                },
                {
                    "command": [
                        "unfold pPred in |- *; apply maxFbounded; auto.",
                        "VernacExtend",
                        "46c0eb87b7cd7e05e3d590672f1946b47665bf68"
                    ]
                },
                {
                    "command": [
                        "apply Zle_trans with (Fexp p); auto with float.",
                        "VernacExtend",
                        "79a02826801bf77197e35a9747ac92d4a85dbc80"
                    ]
                },
                {
                    "command": [
                        "apply Zle_trans with (Zsucc (Fexp p)); auto with float zarith.",
                        "VernacExtend",
                        "4c28d308c5efa0f8d2833ca451eadd1c133844fe"
                    ]
                },
                {
                    "command": [
                        "replace (FtoR radix (Float (pPred (vNum b)) (Zsucc (Zmax (Fexp p) (Fexp q))))) with (radix * Float (pPred (vNum b)) (Zmax (Fexp p) (Fexp q)))%R.",
                        "VernacExtend",
                        "16f6468b17f1388966b5d6fb80306a062f24177d"
                    ]
                },
                {
                    "command": [
                        "rewrite Fabs_correct; auto with zarith.",
                        "VernacExtend",
                        "cbf371ebf2236198f1663453e3d81b5052108e31"
                    ]
                },
                {
                    "command": [
                        "unfold FtoRradix in |- *; apply RoundedModeMultAbs with (b := b) (precision := precision) (P := P) (r := (p + q)%R); auto.",
                        "VernacExtend",
                        "d51df291b5c8be43e023d165553d10c6b8815227"
                    ]
                },
                {
                    "command": [
                        "unfold pPred in |- *; apply maxFbounded; auto.",
                        "VernacExtend",
                        "46c0eb87b7cd7e05e3d590672f1946b47665bf68"
                    ]
                },
                {
                    "command": [
                        "apply Zle_trans with (Fexp p); auto with float zarith.",
                        "VernacExtend",
                        "369bfc959621c8f272757e9789bf0ce203499f11"
                    ]
                },
                {
                    "command": [
                        "apply Rle_trans with (Rabs p + Rabs q)%R.",
                        "VernacExtend",
                        "459125425e6fc7cbc61c18fb8c48c89be3625a0b"
                    ]
                },
                {
                    "command": [
                        "apply Rabs_triang; auto.",
                        "VernacExtend",
                        "ea4b4d745d2e7beae9a924aed81b3db25bbaef73"
                    ]
                },
                {
                    "command": [
                        "apply Rle_trans with (2%nat * FtoR radix (Float (pPred (vNum b)) (Zmax (Fexp p) (Fexp q))))%R; auto.",
                        "VernacExtend",
                        "f1b8ef6e9e8634c918891be54b37fac211e5a324"
                    ]
                },
                {
                    "command": [
                        "cut (forall r : R, (2%nat * r)%R = (r + r)%R); [ intros tmp; rewrite tmp; clear tmp | intros; simpl in |- *; ring ].",
                        "VernacExtend",
                        "3672dc510eea391c5afce9a7c4f1fbf4fe7def75"
                    ]
                },
                {
                    "command": [
                        "apply Rplus_le_compat; auto.",
                        "VernacExtend",
                        "33d9e2397c333c707e5ea519b98684bac52692e0"
                    ]
                },
                {
                    "command": [
                        "rewrite <- (Fabs_correct radix); auto with arith; apply maxMax1; auto; apply ZmaxLe1.",
                        "VernacExtend",
                        "faa82866c88897c1c3a684ddd8ec0dffb9260754"
                    ]
                },
                {
                    "command": [
                        "rewrite <- (Fabs_correct radix); auto with arith; apply maxMax1; auto; apply ZmaxLe2.",
                        "VernacExtend",
                        "c9d4aac99ccccf49894326430a092b386daa9ac6"
                    ]
                },
                {
                    "command": [
                        "apply Rmult_le_compat; auto with real arith.",
                        "VernacExtend",
                        "9957fd3f288f703842d8cf655fb04d6c6fec0f1e"
                    ]
                },
                {
                    "command": [
                        "replace 0%R with (INR 0); auto with real arith.",
                        "VernacExtend",
                        "3caed965951659080cf394dcb353db3f9bd924fa"
                    ]
                },
                {
                    "command": [
                        "apply LeFnumZERO; simpl in |- *; auto; replace 0%Z with (Z_of_nat 0); auto with zarith.",
                        "VernacExtend",
                        "d596afaecfa1b44f487178294e5ab4da67452e89"
                    ]
                },
                {
                    "command": [
                        "unfold pPred in |- *; apply Zle_Zpred; auto with zarith.",
                        "VernacExtend",
                        "4a67c01dc3b485eeff0c4d6012218b209c6aca4a"
                    ]
                },
                {
                    "command": [
                        "rewrite INR_IZR_INZ; apply Rle_IZR; simpl in |- *; auto with zarith.",
                        "VernacExtend",
                        "8347e74e2fde21b20b6e5db492aad8a6654650ab"
                    ]
                },
                {
                    "command": [
                        "cut (1 < radix)%Z; auto with zarith;intros.",
                        "VernacExtend",
                        "812e4eb978a2d19276eda68f20d0884c4750f666"
                    ]
                },
                {
                    "command": [
                        "unfold FtoRradix, FtoR in |- *; simpl in |- *.",
                        "VernacExtend",
                        "85a3da1582165d92ceb7faef707de88822bccf1a"
                    ]
                },
                {
                    "command": [
                        "rewrite powerRZ_Zs; auto with real zarith; ring.",
                        "VernacExtend",
                        "055e37c209e2a0ca9dc7ef6b05e8ffefe2fb31ed"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "plusExpBound",
            "line_nb": 54,
            "steps": [
                {
                    "command": [
                        "intros P H' p q pq H'0 H'1 H'2.",
                        "VernacExtend",
                        "d2f053f2d8716a0239cbe3ace54738c6beca164a"
                    ]
                },
                {
                    "command": [
                        "case (plusExpMin P H' _ _ _ H'0).",
                        "VernacExtend",
                        "7c7ca9e69baac995f8b77788f972e37bdbb61b2f"
                    ]
                },
                {
                    "command": [
                        "intros r' H'3; elim H'3; intros H'4 H'5; elim H'5; intros H'6 H'7; clear H'5 H'3.",
                        "VernacExtend",
                        "03fe7205b71f5301a0b14c13d31386952d4eb0cc"
                    ]
                },
                {
                    "command": [
                        "case (Zle_or_lt (Fexp r') (Zsucc (Zmax (Fexp p) (Fexp q)))); intros Zl1.",
                        "VernacExtend",
                        "49f66e497295b6e853e605419545a9e175261d76"
                    ]
                },
                {
                    "command": [
                        "exists r'; repeat (split; auto).",
                        "VernacExtend",
                        "e63b72f86481536398794c9e47c9097bbf4ce352"
                    ]
                },
                {
                    "command": [
                        "case (plusExpUpperBound P H' _ _ _ H'0); auto.",
                        "VernacExtend",
                        "c0a4338c56594b216b5912ec92d7d389d133f2d8"
                    ]
                },
                {
                    "command": [
                        "intros r'' H'3; elim H'3; intros H'5 H'8; elim H'8; intros H'9 H'10; clear H'8 H'3.",
                        "VernacExtend",
                        "76bd2d9ce5bf3065063c122557259ee9525bc9c9"
                    ]
                },
                {
                    "command": [
                        "exists (Fshift radix (Zabs_nat (Fexp r' - Zsucc (Zmax (Fexp p) (Fexp q)))) r'); split.",
                        "VernacExtend",
                        "8f440ee1220a6430f2c4f43e818eb0f3aceefd66"
                    ]
                },
                {
                    "command": [
                        "apply FboundedShiftLess with (n := Zabs_nat (Fexp r' - Fexp r'')); auto.",
                        "VernacExtend",
                        "08ed5a766df8acb76a52afab52b8144297ad46f1"
                    ]
                },
                {
                    "command": [
                        "apply ZleLe; auto.",
                        "VernacExtend",
                        "f4c825eb3ddb6d6bc341c0a358dbbbba0b7faa62"
                    ]
                },
                {
                    "command": [
                        "repeat rewrite <- Zabs_absolu.",
                        "VernacExtend",
                        "6cd43d307c91afa54e4d514ca866972516db1541"
                    ]
                },
                {
                    "command": [
                        "repeat rewrite Zabs_eq; auto with zarith.",
                        "VernacExtend",
                        "ce6af9c9e2dbbf5e96aba4104d03a58482acdd03"
                    ]
                },
                {
                    "command": [
                        "rewrite FshiftCorrectInv; auto.",
                        "VernacExtend",
                        "087ab2a0b57c90b3d93a00f3078765919600c662"
                    ]
                },
                {
                    "command": [
                        "apply trans_eq with (FtoRradix pq); auto.",
                        "VernacExtend",
                        "69afe208258f1e258e33072aa3a20a9e7f940d6f"
                    ]
                },
                {
                    "command": [
                        "apply Zle_trans with (1 := H'10); auto with zarith.",
                        "VernacExtend",
                        "2b3371720e8d7a7e78f14b2b9d9e762c33b9c2da"
                    ]
                },
                {
                    "command": [
                        "split.",
                        "VernacExtend",
                        "55abc140132bd88981001ac656020469a8d503eb"
                    ]
                },
                {
                    "command": [
                        "unfold FtoRradix in |- *; rewrite FshiftCorrect; auto.",
                        "VernacExtend",
                        "5abbc7cb08d11ed8fd912e6cc82302a9cbf61541"
                    ]
                },
                {
                    "command": [
                        "split.",
                        "VernacExtend",
                        "55abc140132bd88981001ac656020469a8d503eb"
                    ]
                },
                {
                    "command": [
                        "simpl in |- *.",
                        "VernacExtend",
                        "1b93169f4cf876d207c1fab22a2347202ab48d85"
                    ]
                },
                {
                    "command": [
                        "repeat rewrite inj_abs; auto with zarith arith.",
                        "VernacExtend",
                        "0b7366921773e0daf8bd374f9f5fb67bf8851bc2"
                    ]
                },
                {
                    "command": [
                        "apply Zle_trans with (Zmax (Fexp p) (Fexp q)); auto with zarith.",
                        "VernacExtend",
                        "a5acb5590680ab0b4d91d812f686a83ac7d4fecb"
                    ]
                },
                {
                    "command": [
                        "apply Zmin_Zmax; auto.",
                        "VernacExtend",
                        "610be32e1c8b5d8b6ceb6d9d60dfa8bc5e956d0a"
                    ]
                },
                {
                    "command": [
                        "simpl in |- *.",
                        "VernacExtend",
                        "1b93169f4cf876d207c1fab22a2347202ab48d85"
                    ]
                },
                {
                    "command": [
                        "repeat rewrite inj_abs; auto with zarith arith.",
                        "VernacExtend",
                        "0b7366921773e0daf8bd374f9f5fb67bf8851bc2"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "minusRoundRep",
            "line_nb": 80,
            "steps": [
                {
                    "command": [
                        "intros P H' p q qmp H'0 H'1 H'2 H'3 H'4 H'5.",
                        "VernacExtend",
                        "6cdbf3831fec880df5c5077919f572d29b7181a7"
                    ]
                },
                {
                    "command": [
                        "case (Rle_or_lt (/ 2%nat * q) p); intros Rle1.",
                        "VernacExtend",
                        "fa8d032e43576a623ada1c16588d35e310c0addc"
                    ]
                },
                {
                    "command": [
                        "exists p; split; auto.",
                        "VernacExtend",
                        "6ae7bae83c56f9ed5d8d914b9d9b7ad61f104667"
                    ]
                },
                {
                    "command": [
                        "replace (FtoRradix qmp) with (FtoRradix (Fminus radix q p)).",
                        "VernacExtend",
                        "5ffbc80bee5dc275895dfd99109e6d471c8c160d"
                    ]
                },
                {
                    "command": [
                        "rewrite (Fminus_correct radix); auto with arith; unfold FtoRradix in |- *; ring.",
                        "VernacExtend",
                        "949d0cda5a71e9aa6c136461a7337ed44274d56c"
                    ]
                },
                {
                    "command": [
                        "apply (RoundedModeProjectorIdemEq b radix precision) with (P := P); auto.",
                        "VernacExtend",
                        "0e9ff50dd26e59be3d449efaa0c2c590eb63afbb"
                    ]
                },
                {
                    "command": [
                        "rewrite <- Fopp_Fminus.",
                        "VernacExtend",
                        "1c443a8ba74c86b8fdff1e33c3cdb7af22126cbe"
                    ]
                },
                {
                    "command": [
                        "apply oppBounded; auto.",
                        "VernacExtend",
                        "6e68d2122eeea082741ca4e279707ce0511c71ef"
                    ]
                },
                {
                    "command": [
                        "apply Sterbenz; auto.",
                        "VernacExtend",
                        "2d564057c2daa6631c6b156cb718aa4284b2d9cb"
                    ]
                },
                {
                    "command": [
                        "apply Rle_trans with (FtoRradix q); auto with real.",
                        "VernacExtend",
                        "76111ffb289edf310cd67cfb96ac2da0bc8b7e29"
                    ]
                },
                {
                    "command": [
                        "apply Rledouble; auto.",
                        "VernacExtend",
                        "91a11e7bfb03a12894eb0db96cc7013309392099"
                    ]
                },
                {
                    "command": [
                        "apply Rle_trans with (FtoRradix p); auto with real.",
                        "VernacExtend",
                        "ded04c47e3969a4c8841c0473154115a1d9432cd"
                    ]
                },
                {
                    "command": [
                        "cut (CompatibleP b radix P); [ intros Cp | apply RoundedModeP_inv2 with (1 := H'); auto ].",
                        "VernacExtend",
                        "2ca124a567e390b257fb21e0b477d3edc60232f2"
                    ]
                },
                {
                    "command": [
                        "apply (Cp (q - p)%R (Fminus radix q p) qmp); auto.",
                        "VernacExtend",
                        "19b7485cc177c36796831e9c6ddb99a894d58141"
                    ]
                },
                {
                    "command": [
                        "rewrite (Fminus_correct radix); auto with arith.",
                        "VernacExtend",
                        "6bc18318ecade68693c942f9aff67950b1934763"
                    ]
                },
                {
                    "command": [
                        "apply RoundedModeBounded with (radix := radix) (P := P) (r := (q - p)%R); auto; auto.",
                        "VernacExtend",
                        "a22504394e1cb0c5be1534807e81c3944d178348"
                    ]
                },
                {
                    "command": [
                        "exists (Fminus radix q qmp); split.",
                        "VernacExtend",
                        "bcb7536ec3f3c567f590d943ca9ddae1c43f3c47"
                    ]
                },
                {
                    "command": [
                        "rewrite <- Fopp_Fminus.",
                        "VernacExtend",
                        "1c443a8ba74c86b8fdff1e33c3cdb7af22126cbe"
                    ]
                },
                {
                    "command": [
                        "apply oppBounded; auto.",
                        "VernacExtend",
                        "6e68d2122eeea082741ca4e279707ce0511c71ef"
                    ]
                },
                {
                    "command": [
                        "apply Sterbenz; auto.",
                        "VernacExtend",
                        "2d564057c2daa6631c6b156cb718aa4284b2d9cb"
                    ]
                },
                {
                    "command": [
                        "apply RoundedModeBounded with (radix := radix) (P := P) (r := (q - p)%R); auto; auto.",
                        "VernacExtend",
                        "a22504394e1cb0c5be1534807e81c3944d178348"
                    ]
                },
                {
                    "command": [
                        "case MaxEx with (r := (/ 2%nat * FtoR radix q)%R) (3 := pGivesBound); auto with arith.",
                        "VernacExtend",
                        "3345382084954022dbe3ac031facf76d442a0b2a"
                    ]
                },
                {
                    "command": [
                        "intros max H'6.",
                        "VernacExtend",
                        "36de58bab4cb96ac2f93aa724a92f7e6e5876872"
                    ]
                },
                {
                    "command": [
                        "apply Rle_trans with (FtoRradix max); [ apply isMax_inv1 with (1 := H'6); auto | idtac ].",
                        "VernacExtend",
                        "8be11f36d8fc52039df612a0590e3ca133f7ecdb"
                    ]
                },
                {
                    "command": [
                        "apply (RleBoundRoundl b radix precision) with (P := P) (r := (q - p)%R); auto; fold FtoRradix in |- *.",
                        "VernacExtend",
                        "c5875514db9d81ac14275a0bdfd9b1e76467018d"
                    ]
                },
                {
                    "command": [
                        "case H'6; auto.",
                        "VernacExtend",
                        "56eef74f6217715d3dc37c5d730bbe40590c90e2"
                    ]
                },
                {
                    "command": [
                        "case MinEx with (r := (/ 2%nat * FtoR radix q)%R) (3 := pGivesBound); auto with arith.",
                        "VernacExtend",
                        "0b0481a059e525d4525f49d6126edc1d0143e055"
                    ]
                },
                {
                    "command": [
                        "intros min H'7.",
                        "VernacExtend",
                        "ebd74b9c223409f1462ed6f903348891d9e975d5"
                    ]
                },
                {
                    "command": [
                        "replace (FtoRradix max) with (q - min)%R.",
                        "VernacExtend",
                        "a38ba09e30b6b944bcc18ffed75bda10dd12bb9b"
                    ]
                },
                {
                    "command": [
                        "apply Rplus_le_reg_l with (r := (- q)%R).",
                        "VernacExtend",
                        "a4d336b0f4a7f48e2463cffe78fb7ef5187789d8"
                    ]
                },
                {
                    "command": [
                        "cut (forall p q : R, (- p + (p - q))%R = (- q)%R); [ intros tmp; repeat rewrite tmp; clear tmp | intros; ring ].",
                        "VernacExtend",
                        "894cae5a1fdaca55d1f3e003b3438da1b9eca597"
                    ]
                },
                {
                    "command": [
                        "apply Ropp_le_contravar.",
                        "VernacExtend",
                        "ac8d32b190d111aa8834547674121bcf3bb8a0ed"
                    ]
                },
                {
                    "command": [
                        "case H'7.",
                        "VernacExtend",
                        "78659f6ffafa579a63c426b0cecb14b8a4baebc2"
                    ]
                },
                {
                    "command": [
                        "intros H'8 H'9; elim H'9; intros H'10 H'11; apply H'11; clear H'9; auto.",
                        "VernacExtend",
                        "609494d3032c106214d000bc67ffbc2721ef3301"
                    ]
                },
                {
                    "command": [
                        "apply Rlt_le; auto.",
                        "VernacExtend",
                        "4003e3e1c449ee89cad9e953d0a562db8235648c"
                    ]
                },
                {
                    "command": [
                        "unfold FtoRradix in |- *; rewrite (div2IsBetween b radix precision) with (5 := H'7) (6 := H'6); auto.",
                        "VernacExtend",
                        "b0edf7f6618f966793cfef7aa2a3db9739c04dc8"
                    ]
                },
                {
                    "command": [
                        "ring.",
                        "VernacExtend",
                        "baadd9fc4c175005af409bb466fcea9fab25b4e6"
                    ]
                },
                {
                    "command": [
                        "apply Rle_trans with (FtoRradix q); auto with real.",
                        "VernacExtend",
                        "76111ffb289edf310cd67cfb96ac2da0bc8b7e29"
                    ]
                },
                {
                    "command": [
                        "apply (RleBoundRoundr b radix precision) with (P := P) (r := (q - p)%R); auto; fold FtoRradix in |- *.",
                        "VernacExtend",
                        "bb3b58c6b038294aa85e6b86e266b60517a2a49a"
                    ]
                },
                {
                    "command": [
                        "apply Rplus_le_reg_l with (r := (- q)%R).",
                        "VernacExtend",
                        "a4d336b0f4a7f48e2463cffe78fb7ef5187789d8"
                    ]
                },
                {
                    "command": [
                        "cut (forall p q : R, (- p + (p - q))%R = (- q)%R); [ intros tmp; repeat rewrite tmp; clear tmp | intros; ring ].",
                        "VernacExtend",
                        "894cae5a1fdaca55d1f3e003b3438da1b9eca597"
                    ]
                },
                {
                    "command": [
                        "replace (- q + q)%R with (-0)%R; [ auto with real | ring ].",
                        "VernacExtend",
                        "ed033561e9f61ebb6a3d28cafc9279ed00fe87cc"
                    ]
                },
                {
                    "command": [
                        "apply Rle_trans with (FtoRradix q); auto with real.",
                        "VernacExtend",
                        "76111ffb289edf310cd67cfb96ac2da0bc8b7e29"
                    ]
                },
                {
                    "command": [
                        "apply Rledouble; auto.",
                        "VernacExtend",
                        "91a11e7bfb03a12894eb0db96cc7013309392099"
                    ]
                },
                {
                    "command": [
                        "apply Rle_trans with (FtoRradix p); auto with real.",
                        "VernacExtend",
                        "ded04c47e3969a4c8841c0473154115a1d9432cd"
                    ]
                },
                {
                    "command": [
                        "apply (Fminus_correct radix); auto with arith.",
                        "VernacExtend",
                        "6b68083f77c57a8c33a8e19593e4910b9df2d305"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "ExactMinusInterval",
            "line_nb": 373,
            "steps": [
                {
                    "command": [
                        "intros P H' p q H'0 H'1 H'2 H'3 H'4 r H'5 H'6 H'7.",
                        "VernacExtend",
                        "cb742f59c8ee7741726dd232603a10021aa733e4"
                    ]
                },
                {
                    "command": [
                        "replace (FtoRradix r) with (FtoRradix (Fnormalize radix b precision r)); [ idtac | apply (FnormalizeCorrect radix) ]; auto.",
                        "VernacExtend",
                        "51c7fc8737e175c05234453bb338cdcc1304853a"
                    ]
                },
                {
                    "command": [
                        "replace (FtoRradix p) with (FtoRradix (Fnormalize radix b precision p)); [ idtac | apply (FnormalizeCorrect radix) ]; auto.",
                        "VernacExtend",
                        "3fe4bd75974d48aaca9f3dfcb9d8f41dc5b4c3f4"
                    ]
                },
                {
                    "command": [
                        "apply ExactMinusIntervalAux1 with (P := P) (q := Fnormalize radix b precision q); auto; try repeat rewrite (FnormalizeCorrect radix); auto; apply FnormalizeCanonic; auto with arith.",
                        "VernacExtend",
                        "977bad3a9936240425dead031d79005b33deb76a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "MSBroundLSB",
            "line_nb": 379,
            "steps": [
                {
                    "command": [
                        "intros P H' f1 f2 H'0 HZ.",
                        "VernacExtend",
                        "504138988a4c3b58bd4dab3bf70aa6a6a6f6fd68"
                    ]
                },
                {
                    "command": [
                        "apply (oneExp_Zlt radix); auto.",
                        "VernacExtend",
                        "a28e3efe88f322e038314c97f072c968733c3c1e"
                    ]
                },
                {
                    "command": [
                        "apply Rlt_le_trans with (Fulp b radix precision f2).",
                        "VernacExtend",
                        "e35b606b28cdb0c25c3dfa681acaca97e48552dd"
                    ]
                },
                {
                    "command": [
                        "apply Rle_lt_trans with (FtoRradix (Fabs (Fminus radix f1 f2))).",
                        "VernacExtend",
                        "1fd772690e0af9f1294562ad9fd08b8c8cda6fb8"
                    ]
                },
                {
                    "command": [
                        "unfold FtoRradix in |- *; apply MSB_le_abs; auto.",
                        "VernacExtend",
                        "293ca157cf35d51b62c19cd2e312b6ef5a98349e"
                    ]
                },
                {
                    "command": [
                        "unfold FtoRradix in |- *; rewrite Fabs_correct; auto with arith; rewrite Fminus_correct; auto with arith.",
                        "VernacExtend",
                        "e08ae3dadd7dc9a885b828737672c6f6821883a7"
                    ]
                },
                {
                    "command": [
                        "apply RoundedModeUlp with (4 := H'); auto.",
                        "VernacExtend",
                        "4b487aeec2d6daa38342ff4556abc966c6ff46c6"
                    ]
                },
                {
                    "command": [
                        "apply FUlp_Le_LSigB; auto.",
                        "VernacExtend",
                        "997cc42173577e05c2066897eeb6dfcd310e9927"
                    ]
                },
                {
                    "command": [
                        "apply RoundedModeBounded with (1 := H') (2 := H'0); auto.",
                        "VernacExtend",
                        "eb96fc5ae3859af69ff4306c1ac85b80d390650a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "LSBMinus",
            "line_nb": 390,
            "steps": [
                {
                    "command": [
                        "intros p q H'1.",
                        "VernacExtend",
                        "02eccb06c6c7e25b447c6d427f3ab9bb1403ab97"
                    ]
                },
                {
                    "command": [
                        "elim (LSB_rep_min radix) with (p := p); auto; intros z E.",
                        "VernacExtend",
                        "db471b8eec395ee69cc993064c7074b658d1d460"
                    ]
                },
                {
                    "command": [
                        "elim (LSB_rep_min radix) with (p := q); auto; intros z0 E0.",
                        "VernacExtend",
                        "d53d0220fb2247d5caabe7dc470da7ced1a6017d"
                    ]
                },
                {
                    "command": [
                        "replace (LSB radix (Fminus radix p q)) with (LSB radix (Fminus radix (Float z (LSB radix p)) (Float z0 (LSB radix q)))).",
                        "VernacExtend",
                        "aeea5655fdd456a6575266ba372601def249e7ac"
                    ]
                },
                {
                    "command": [
                        "replace (Zmin (LSB radix p) (LSB radix q)) with (Fexp (Fminus radix (Float z (LSB radix p)) (Float z0 (LSB radix q)))); [ idtac | simpl in |- *; auto ].",
                        "VernacExtend",
                        "2890d51a5c85fb85751fc6c4c83f05c71697742a"
                    ]
                },
                {
                    "command": [
                        "apply Fexp_le_LSB; auto.",
                        "VernacExtend",
                        "e2ef0d6a640e91f3d0a5c1a0c330f2f52eb1d7f2"
                    ]
                },
                {
                    "command": [
                        "apply sym_equal; apply LSB_comp; auto.",
                        "VernacExtend",
                        "23b181e47c1a4abea4678a7cca2dd472f175cd1e"
                    ]
                },
                {
                    "command": [
                        "repeat rewrite Fminus_correct; auto with arith.",
                        "VernacExtend",
                        "6664c13ac1883660e5fec5b23d35951fac0f8676"
                    ]
                },
                {
                    "command": [
                        "unfold FtoRradix in E; unfold FtoRradix in E0; rewrite E; rewrite E0; auto.",
                        "VernacExtend",
                        "d4964e637c560add8674c0de273b8c991924f6a7"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "LSBPlus",
            "line_nb": 401,
            "steps": [
                {
                    "command": [
                        "intros p q H'.",
                        "VernacExtend",
                        "6d0165163a2a8e407c09482ce517f2835b5de359"
                    ]
                },
                {
                    "command": [
                        "elim (LSB_rep_min _ radixMoreThanOne p); intros z E.",
                        "VernacExtend",
                        "859789f4e1a3096404f81b9116c8f6248aaf61d8"
                    ]
                },
                {
                    "command": [
                        "elim (LSB_rep_min _ radixMoreThanOne q); intros z0 E0.",
                        "VernacExtend",
                        "365550c9c3b2ce5bf268aba3039b999ca03ceaf0"
                    ]
                },
                {
                    "command": [
                        "replace (LSB radix (Fplus radix p q)) with (LSB radix (Fplus radix (Float z (LSB radix p)) (Float z0 (LSB radix q)))).",
                        "VernacExtend",
                        "31233ef7008f5b1c95826709f84861969416d808"
                    ]
                },
                {
                    "command": [
                        "replace (Zmin (LSB radix p) (LSB radix q)) with (Fexp (Fplus radix (Float z (LSB radix p)) (Float z0 (LSB radix q)))); [ idtac | simpl in |- *; auto ].",
                        "VernacExtend",
                        "2731510b599f1d3b239b78186bd6742f2bc7323a"
                    ]
                },
                {
                    "command": [
                        "apply Fexp_le_LSB; auto.",
                        "VernacExtend",
                        "e2ef0d6a640e91f3d0a5c1a0c330f2f52eb1d7f2"
                    ]
                },
                {
                    "command": [
                        "apply sym_equal; apply LSB_comp; auto.",
                        "VernacExtend",
                        "23b181e47c1a4abea4678a7cca2dd472f175cd1e"
                    ]
                },
                {
                    "command": [
                        "repeat rewrite Fplus_correct; auto with arith.",
                        "VernacExtend",
                        "8ac6f19b2e5291cae72c7fd6ca32fc7eb43b80ae"
                    ]
                },
                {
                    "command": [
                        "unfold FtoRradix in E; unfold FtoRradix in E0; rewrite E; rewrite E0; auto.",
                        "VernacExtend",
                        "d4964e637c560add8674c0de273b8c991924f6a7"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        }
    ]
}