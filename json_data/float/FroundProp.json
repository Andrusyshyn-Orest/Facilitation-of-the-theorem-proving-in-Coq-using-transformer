{
    "filename": "FroundProp.v",
    "coq_project": "float",
    "vernac_cmds": [
        [
            "Require Export Fround.",
            "VernacRequire",
            "b11fdd0941a4f1a52e57155f36d7dffcfe10891d"
        ],
        [
            "Require Export MSB.",
            "VernacRequire",
            "eb6e3bf897ed2ab3447efba57182876687c05ff0"
        ],
        [
            "Section FRoundP.",
            "VernacBeginSection",
            "03d9e3e0fff802aff28fdb045d5ce94913cbb42e"
        ],
        [
            "Variable b : Fbound.",
            "VernacAssumption",
            "17a11c003f49f819b8cb809f61b140702916486d"
        ],
        [
            "Variable radix : Z.",
            "VernacAssumption",
            "2349b77d134e0c9bb013a8bdca0020ca16fc023b"
        ],
        [
            "Variable precision : nat.",
            "VernacAssumption",
            "2235bc83b7ebf4cbe373b5fa3b4f3c643d454130"
        ],
        [
            "Let FtoRradix := FtoR radix.",
            "VernacDefinition",
            "5aa29a9595c6e9e03b28c6d232299552ec761ad7"
        ],
        [
            "Coercion FtoRradix : float >-> R.",
            "VernacCoercion",
            "028c338fbad0cd7087bf0b6e1e412562a515c140"
        ],
        [
            "Hypothesis radixMoreThanOne : (1 < radix)%Z.",
            "VernacAssumption",
            "f4d3774b2275f4c4c3af941091d4d99f9a2129aa"
        ],
        [
            "Let radixMoreThanZERO := Zlt_1_O _ (Zlt_le_weak _ _ radixMoreThanOne).",
            "VernacDefinition",
            "b73ccff345a4fc730c8134dcd05adb7f1928fae7"
        ],
        [
            "Hint Resolve radixMoreThanZERO: zarith.",
            "VernacHints",
            "5a4a320eb610749621ef38850390d7141dc0d330"
        ],
        [
            "Hypothesis precisionGreaterThanOne : 1 < precision.",
            "VernacAssumption",
            "9f627fb385d8fe283ac9563556925f37be8e5402"
        ],
        [
            "Hypothesis pGivesBound : Zpos (vNum b) = Zpower_nat radix precision.",
            "VernacAssumption",
            "d558f967d87d2a42d14158ac115b10c6f5358430"
        ],
        [
            "Definition Fulp (p : float) := powerRZ radix (Fexp (Fnormalize radix b precision p)).",
            "VernacDefinition",
            "bd115086d05c8cd00ecd378dab4bf5d72c978ac0"
        ],
        [
            "Theorem FulpComp : forall p q : float, Fbounded b p -> Fbounded b q -> p = q :>R -> Fulp p = Fulp q.",
            "VernacStartTheoremProof",
            "8f507c7622b1eaaced75e2428bb0653cf613f0ff"
        ],
        [
            "intros p q H' H'0 H'1; unfold Fulp in |- *.",
            "VernacExtend",
            "23b6f38a150227c335d354639b645e39c47aeb96"
        ],
        [
            "rewrite FcanonicUnique with (p := Fnormalize radix b precision p) (q := Fnormalize radix b precision q) (3 := pGivesBound); auto with float arith.",
            "VernacExtend",
            "d1c503d36fa559fa9b2e11686de3921217e12e85"
        ],
        [
            "apply trans_eq with (FtoR radix p).",
            "VernacExtend",
            "69c16d0599c9d462269b500cd0894114d8f87050"
        ],
        [
            "apply FnormalizeCorrect; auto.",
            "VernacExtend",
            "eb55ec64becb45831f31eca744980a2b286c1906"
        ],
        [
            "apply trans_eq with (FtoR radix q); auto.",
            "VernacExtend",
            "e5ee2cc145d76f07ace7bb60473b0de95170906c"
        ],
        [
            "apply sym_eq; apply FnormalizeCorrect; auto.",
            "VernacExtend",
            "1ce4b3eb95883f2cb55c358368109d3695e7f9f4"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Theorem FulpLe : forall p : float, Fbounded b p -> (Fulp p <= Float 1 (Fexp p))%R.",
            "VernacStartTheoremProof",
            "391c064f21ef7d31eedf1879a2f8c6a1baa12eaf"
        ],
        [
            "intros p H'; unfold Fulp, FtoRradix, FtoR, Fnormalize in |- *; simpl in |- *; rewrite Rmult_1_l.",
            "VernacExtend",
            "37918e2e2088298f5741642b7510eff034e9f7aa"
        ],
        [
            "case (Z_zerop (Fnum p)); simpl in |- *; auto.",
            "VernacExtend",
            "9078a305e03ac0e4454515cb9d6684a094dccf7c"
        ],
        [
            "intros H'0; apply (Rle_powerRZ radix (- dExp b) (Fexp p)); auto with float real zarith.",
            "VernacExtend",
            "f6de06235c9421823c5ce9f35fedc91deaa70985"
        ],
        [
            "intros H'0; apply Rle_powerRZ; auto with real zarith arith.",
            "VernacExtend",
            "1c0f359afc4e017a9fb219fcf4d6fb2f5f0b6b8d"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Theorem Fulp_zero : forall x : float, is_Fzero x -> Fulp x = powerRZ radix (- dExp b).",
            "VernacStartTheoremProof",
            "063a3c5ca9edc4c45be7ed10569ea8b1a39bea19"
        ],
        [
            "intros x; unfold is_Fzero, Fulp, Fnormalize in |- *; case (Z_zerop (Fnum x)); simpl in |- *; auto.",
            "VernacExtend",
            "24c825d7429027de7217ed10e30676da55059086"
        ],
        [
            "intros H' H'0; Contradict H'; auto.",
            "VernacExtend",
            "ced1f30ac7662d579680cc1271c0292161ad4d45"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Theorem FulpLe2 : forall p : float, Fbounded b p -> Fnormal radix b (Fnormalize radix b precision p) -> (Fulp p <= Rabs p * powerRZ radix (Zsucc (- precision)))%R.",
            "VernacStartTheoremProof",
            "e606a23051f61b124de5e2d085473957803dd1a1"
        ],
        [
            "intros p H1 H2; unfold Fulp in |- *.",
            "VernacExtend",
            "4917265dc28bdb166211e47ec15f854f94cd6148"
        ],
        [
            "replace (FtoRradix p) with (FtoRradix (Fnormalize radix b precision p)); [ idtac | unfold FtoRradix in |- *; apply FnormalizeCorrect; auto ].",
            "VernacExtend",
            "2d85c166321e2517e7a5b261d91e33df30dfc137"
        ],
        [
            "apply Rmult_le_reg_l with (powerRZ radix (Zpred precision)).",
            "VernacExtend",
            "ddc626a5287a76ef20598988b935fd0834f36d33"
        ],
        [
            "apply powerRZ_lt; auto with real arith.",
            "VernacExtend",
            "18f200e01215d20891df67e3797385e5979e8d39"
        ],
        [
            "replace (powerRZ radix (Zpred precision) * (Rabs (Fnormalize radix b precision p) * powerRZ radix (Zsucc (- precision))))%R with (Rabs (Fnormalize radix b precision p)).",
            "VernacExtend",
            "dc17dc226034232d50f3b85e0e4a1c7712c33da6"
        ],
        [
            "unfold FtoRradix in |- *; rewrite <- Fabs_correct; auto with arith real.",
            "VernacExtend",
            "93a145a7fce84e964942e0fc3b2b9b460c4a8092"
        ],
        [
            "unfold Fabs, FtoR in |- *; simpl in |- *.",
            "VernacExtend",
            "144320c03473e2678ca854c53ab954ffdb3c2e17"
        ],
        [
            "apply Rmult_le_compat_r; [ apply powerRZ_le | rewrite <- inj_pred ]; auto with real arith zarith.",
            "VernacExtend",
            "edf1b2027f350263b146d2978429f2cf5a591006"
        ],
        [
            "rewrite <- Zpower_nat_Z_powerRZ.",
            "VernacExtend",
            "df78cf96dfceed621bb634ea03f6a5ba1d47b397"
        ],
        [
            "replace (Zpower_nat radix (pred precision)) with (nNormMin radix precision); auto; apply Rle_IZR.",
            "VernacExtend",
            "e7773e7b3526376c18ada89e5c18e79412902449"
        ],
        [
            "apply pNormal_absolu_min with b; auto with arith zarith real.",
            "VernacExtend",
            "aabbef4ae10a45b9a9650f1a1bb21134916a0f5c"
        ],
        [
            "apply trans_eq with (Rabs (Fnormalize radix b precision p) * (powerRZ radix (Zpred precision) * powerRZ radix (Zsucc (- precision))))%R; [ idtac | ring ].",
            "VernacExtend",
            "a1b5df1bd2a8246070b7747234fae1f3bb6c6c60"
        ],
        [
            "rewrite <- powerRZ_add; auto with zarith real.",
            "VernacExtend",
            "4e4547ea07c8c7e5d4b07e17a3a063e54ce72721"
        ],
        [
            "replace (Zpred precision + Zsucc (- precision))%Z with 0%Z; [ simpl in |- *; ring | unfold Zsucc, Zpred in |- *; ring ]; auto with real zarith.",
            "VernacExtend",
            "0187c7bb9e868c7507147226d1a4bd82f348787e"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Theorem FulpGe : forall p : float, Fbounded b p -> (Rabs p <= (powerRZ radix precision - 1) * Fulp p)%R.",
            "VernacStartTheoremProof",
            "e3335ac6dedc80ddb4b036f8a4f19b286c90803a"
        ],
        [
            "intros p H.",
            "VernacExtend",
            "f37bbd1f6625e9877de18bdb554a5e6e38d0a116"
        ],
        [
            "replace (FtoRradix p) with (FtoRradix (Fnormalize radix b precision p)); [ idtac | unfold FtoRradix in |- *; apply FnormalizeCorrect; auto ].",
            "VernacExtend",
            "2d85c166321e2517e7a5b261d91e33df30dfc137"
        ],
        [
            "unfold FtoRradix in |- *; rewrite <- Fabs_correct; auto with arith real.",
            "VernacExtend",
            "93a145a7fce84e964942e0fc3b2b9b460c4a8092"
        ],
        [
            "unfold FtoR in |- *; simpl in |- *; unfold Fulp in |- *.",
            "VernacExtend",
            "02ec2713df875bc37110fb501d7f2be5e31337ca"
        ],
        [
            "apply Rmult_le_compat_r; [ apply powerRZ_le | idtac ]; auto with real arith zarith.",
            "VernacExtend",
            "d1a8920f601fc0298ce16f6f741cbc08eb6b0465"
        ],
        [
            "apply Rle_trans with (IZR (Zpred (Zpos (vNum b)))); [ apply Rle_IZR; auto with float zarith | idtac ].",
            "VernacExtend",
            "7a1b27a01f62f935815c5ccd1c56bffb44af6775"
        ],
        [
            "unfold Zpred in |- *; right; rewrite pGivesBound; replace 1%R with (IZR 1); auto with real.",
            "VernacExtend",
            "693e649940ca61836a00b191ac851aa804007eba"
        ],
        [
            "rewrite <- Zpower_nat_Z_powerRZ; rewrite Z_R_minus;auto.",
            "VernacExtend",
            "9db2f98262badac96f1c84507a17fa8aa1d568e9"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Theorem LeFulpPos : forall x y : float, Fbounded b x -> Fbounded b y -> (0 <= x)%R -> (x <= y)%R -> (Fulp x <= Fulp y)%R.",
            "VernacStartTheoremProof",
            "db8b726fe9bd346ea9c5263302585d24c458d36c"
        ],
        [
            "intros x y Hx Hy H1 H2; unfold Fulp in |- *.",
            "VernacExtend",
            "c7b86644c523eb447a2ea5fdeaaa6959a80d4d35"
        ],
        [
            "apply Rle_powerRZ; auto with real zarith.",
            "VernacExtend",
            "69b1d0569e30b7fcea272fe0fa04484701d6a993"
        ],
        [
            "apply Fcanonic_Rle_Zle with radix b precision; auto with zarith arith.",
            "VernacExtend",
            "b62bb7b5afba7ef6e3f2b76d3bcd74e13b2aa502"
        ],
        [
            "apply FnormalizeCanonic; auto with zarith arith.",
            "VernacExtend",
            "307b88151947d348b48777a3204b58a1d2267c1b"
        ],
        [
            "apply FnormalizeCanonic; auto with zarith arith.",
            "VernacExtend",
            "307b88151947d348b48777a3204b58a1d2267c1b"
        ],
        [
            "repeat rewrite FnormalizeCorrect; auto with zarith arith real.",
            "VernacExtend",
            "c9fd23e13b66b3690aad89284378cd63cd83c560"
        ],
        [
            "repeat rewrite Rabs_right; auto with zarith arith real.",
            "VernacExtend",
            "2a6fdbec4b40df47636071ede71dd72c54e2c68c"
        ],
        [
            "apply Rge_trans with (FtoRradix x); auto with real.",
            "VernacExtend",
            "eb3ceda661c61a4a5ccdbe2a0057fbdee3848cbd"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Theorem FulpSucCan : forall p : float, Fcanonic radix b p -> (FSucc b radix precision p - p <= Fulp p)%R.",
            "VernacStartTheoremProof",
            "432bfd1c024e3088259dd8944f2715c704836598"
        ],
        [
            "intros p H'.",
            "VernacExtend",
            "bb6abbd0a5bb134f5276d7928176425ceae09e54"
        ],
        [
            "replace (Fulp p) with (powerRZ radix (Fexp p)).",
            "VernacExtend",
            "4c2692a2623b17efab77aa2e1ec7715d6ba82da6"
        ],
        [
            "2: unfold Fulp in |- *; replace (Fnormalize radix b precision p) with p; auto; apply sym_equal; apply FcanonicUnique with (3 := pGivesBound); auto with arith; apply FnormalizeCanonic || apply FnormalizeCorrect; auto with float zarith.",
            "VernacExtend",
            "eeebddc99cb7cbcd5d6a016a8b4f7c4d344f1d60"
        ],
        [
            "2: apply FcanonicBound with (1 := H'); auto with float zarith.",
            "VernacExtend",
            "8fd3fb95e29e7f2bc83175430ee348c096ff4685"
        ],
        [
            "unfold FtoRradix in |- *; rewrite <- Fminus_correct; auto with zarith.",
            "VernacExtend",
            "e15ddd185b1525ec267f5c187de96ec50a4ea432"
        ],
        [
            "case (Z_eq_dec (Fnum p) (- nNormMin radix precision)); intros H1'.",
            "VernacExtend",
            "10e0ee7143e775dce9d29e3b472773af4e4bd0fc"
        ],
        [
            "case (Z_eq_dec (Fexp p) (- dExp b)); intros H2'.",
            "VernacExtend",
            "9d87026c520de098fd26a8d3241a0e34f006d2ff"
        ],
        [
            "rewrite FSuccDiff2; auto with arith.",
            "VernacExtend",
            "604eae4c9fa1a75f3c4ca2e86b75cca50b0add82"
        ],
        [
            "unfold FtoR in |- *; simpl in |- *; rewrite Rmult_1_l; auto with real.",
            "VernacExtend",
            "59a23665582bd7484204d434a6ef318331eb7961"
        ],
        [
            "rewrite FSuccDiff3; auto with arith.",
            "VernacExtend",
            "04b825c4719a5d321c65435a27ba421141045dfc"
        ],
        [
            "unfold FtoR in |- *; simpl in |- *; rewrite Rmult_1_l.",
            "VernacExtend",
            "46eb0b53793153646e38437408b98830fae65546"
        ],
        [
            "apply Rlt_le; apply Rlt_powerRZ; auto with real zarith.",
            "VernacExtend",
            "f062120bdc42bea96e692e5e9ab045a68e1822be"
        ],
        [
            "unfold Zpred in |- *; auto with zarith.",
            "VernacExtend",
            "43771d5630a18be2e2a89e880f229253e9aa05e6"
        ],
        [
            "rewrite FSuccDiff1; auto with arith.",
            "VernacExtend",
            "1045f276f098d4a51a34a2c67adec6ce17c0b6ae"
        ],
        [
            "unfold FtoR in |- *; simpl in |- *; rewrite Rmult_1_l; auto with real.",
            "VernacExtend",
            "59a23665582bd7484204d434a6ef318331eb7961"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Theorem FulpSuc : forall p : float, Fbounded b p -> (FNSucc b radix precision p - p <= Fulp p)%R.",
            "VernacStartTheoremProof",
            "e29bf6a89c0b4e2098160fba8de32ed9f51a0894"
        ],
        [
            "intros p H'.",
            "VernacExtend",
            "bb6abbd0a5bb134f5276d7928176425ceae09e54"
        ],
        [
            "replace (Fulp p) with (Fulp (Fnormalize radix b precision p)).",
            "VernacExtend",
            "f11f7933e48757ce89d362a407c4630a720c1fd9"
        ],
        [
            "replace (FtoRradix p) with (FtoRradix (Fnormalize radix b precision p)).",
            "VernacExtend",
            "52870dcb4055c5500ec15faece0846aab43e186e"
        ],
        [
            "unfold FNSucc in |- *; apply FulpSucCan; auto with float arith.",
            "VernacExtend",
            "c68359d9640994b16c6961b6c0662d6d9ddda948"
        ],
        [
            "unfold FtoRradix in |- *; apply FnormalizeCorrect; auto.",
            "VernacExtend",
            "470ee4d615cb96e2c80e7ff477747cec6ab8c852"
        ],
        [
            "apply FulpComp; auto with float arith.",
            "VernacExtend",
            "b175e4e2f90a1cef3fcf0c75300409f661af1a32"
        ],
        [
            "unfold FtoRradix in |- *; apply FnormalizeCorrect; auto.",
            "VernacExtend",
            "470ee4d615cb96e2c80e7ff477747cec6ab8c852"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Theorem FulpPredCan : forall p : float, Fcanonic radix b p -> (p - FPred b radix precision p <= Fulp p)%R.",
            "VernacStartTheoremProof",
            "aada1be3b0521c78d50358d5966e04cc29f237cd"
        ],
        [
            "intros p H'.",
            "VernacExtend",
            "bb6abbd0a5bb134f5276d7928176425ceae09e54"
        ],
        [
            "replace (Fulp p) with (powerRZ radix (Fexp p)).",
            "VernacExtend",
            "4c2692a2623b17efab77aa2e1ec7715d6ba82da6"
        ],
        [
            "2: unfold Fulp in |- *; replace (Fnormalize radix b precision p) with p; auto; apply sym_equal; apply FcanonicUnique with (3 := pGivesBound); auto with arith; apply FnormalizeCanonic || apply FnormalizeCorrect; auto with arith.",
            "VernacExtend",
            "770fd44fc80568b63e76652f0e9456f8e9119e60"
        ],
        [
            "unfold FtoRradix in |- *; rewrite <- Fminus_correct; auto with arith.",
            "VernacExtend",
            "2081f892a181c8f46f2024eed2612ace075e5ebf"
        ],
        [
            "case (Z_eq_dec (Fnum p) (nNormMin radix precision)); intros H1'.",
            "VernacExtend",
            "1c7bc9d84745965116f8b4b7adca1c056949a7b5"
        ],
        [
            "case (Z_eq_dec (Fexp p) (- dExp b)); intros H2'.",
            "VernacExtend",
            "9d87026c520de098fd26a8d3241a0e34f006d2ff"
        ],
        [
            "rewrite FPredDiff2; auto with arith.",
            "VernacExtend",
            "321f9e808773a77c870e4c93bc5751cdaf6502e4"
        ],
        [
            "unfold FtoR in |- *; simpl in |- *; rewrite Rmult_1_l; auto with real.",
            "VernacExtend",
            "59a23665582bd7484204d434a6ef318331eb7961"
        ],
        [
            "rewrite FPredDiff3; auto with arith.",
            "VernacExtend",
            "b4cdeae4b24f70c4528aaa51a5546931ed11761c"
        ],
        [
            "unfold FtoR in |- *; simpl in |- *; rewrite Rmult_1_l; auto with real.",
            "VernacExtend",
            "59a23665582bd7484204d434a6ef318331eb7961"
        ],
        [
            "apply Rlt_le; apply Rlt_powerRZ; auto with real zarith.",
            "VernacExtend",
            "f062120bdc42bea96e692e5e9ab045a68e1822be"
        ],
        [
            "replace 1%R with (INR 1); auto with real arith.",
            "VernacExtend",
            "0d525adb81e33c7ce8c7ad44dc3bf22ecce07477"
        ],
        [
            "unfold Zpred in |- *; auto with zarith.",
            "VernacExtend",
            "43771d5630a18be2e2a89e880f229253e9aa05e6"
        ],
        [
            "rewrite FPredDiff1; auto with arith.",
            "VernacExtend",
            "ac66d9a4e286147d8478a7f641ab6eba6ace9ff6"
        ],
        [
            "unfold FtoR in |- *; simpl in |- *; rewrite Rmult_1_l; auto with real.",
            "VernacExtend",
            "59a23665582bd7484204d434a6ef318331eb7961"
        ],
        [
            "apply FcanonicBound with (1 := H').",
            "VernacExtend",
            "0f3699fdac2f486cb0daa33323a35fb0d264b7df"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Theorem FulpPred : forall p : float, Fbounded b p -> (p - FNPred b radix precision p <= Fulp p)%R.",
            "VernacStartTheoremProof",
            "5c8a640dfc5016f2b5aa07a20a336b47b8a88265"
        ],
        [
            "intros p H'.",
            "VernacExtend",
            "bb6abbd0a5bb134f5276d7928176425ceae09e54"
        ],
        [
            "replace (Fulp p) with (Fulp (Fnormalize radix b precision p)).",
            "VernacExtend",
            "f11f7933e48757ce89d362a407c4630a720c1fd9"
        ],
        [
            "replace (FtoRradix p) with (FtoRradix (Fnormalize radix b precision p)).",
            "VernacExtend",
            "52870dcb4055c5500ec15faece0846aab43e186e"
        ],
        [
            "unfold FNPred in |- *; apply FulpPredCan; auto with float arith.",
            "VernacExtend",
            "60b3bff348728341bd9277c2875e5d1b8dfc631f"
        ],
        [
            "unfold FtoRradix in |- *; apply FnormalizeCorrect; auto.",
            "VernacExtend",
            "470ee4d615cb96e2c80e7ff477747cec6ab8c852"
        ],
        [
            "apply FulpComp; auto with float arith.",
            "VernacExtend",
            "b175e4e2f90a1cef3fcf0c75300409f661af1a32"
        ],
        [
            "unfold FtoRradix in |- *; apply FnormalizeCorrect; auto.",
            "VernacExtend",
            "470ee4d615cb96e2c80e7ff477747cec6ab8c852"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Theorem FSuccDiffPos : forall x : float, (0 <= x)%R -> Fminus radix (FSucc b radix precision x) x = Float 1%nat (Fexp x) :>R.",
            "VernacStartTheoremProof",
            "2408efd8657d8a61c73b2bd5e8497ce0e5a1d8b4"
        ],
        [
            "intros x H.",
            "VernacExtend",
            "a0cd74b85812810ce5a78a540bad98f664bd4842"
        ],
        [
            "unfold FtoRradix in |- *; apply FSuccDiff1; auto with arith.",
            "VernacExtend",
            "8124656820e554852c98361aeae4be166cfc8b65"
        ],
        [
            "Contradict H; unfold FtoRradix, FtoR in |- *; simpl in |- *; rewrite H.",
            "VernacExtend",
            "069c4c4539f3b3e889b6cec36194cadb94fb7226"
        ],
        [
            "apply Rlt_not_le.",
            "VernacExtend",
            "970672dbfa76c5b1a5bbbe80816db4b871608528"
        ],
        [
            "replace 0%R with (0 * powerRZ radix (Fexp x))%R; [ idtac | ring ].",
            "VernacExtend",
            "b9702a7afdefeeec55704a461c48b90dc5c85dbd"
        ],
        [
            "apply Rlt_monotony_exp; auto with real arith.",
            "VernacExtend",
            "94284d21b3d9bb47fd0a48a8fea3a8d929a57a47"
        ],
        [
            "generalize (nNormPos _ radixMoreThanOne precision); replace 0%R with (IZR (- 0%nat)); auto with real zarith arith.",
            "VernacExtend",
            "f217d3ca5a384148bbedc10be4152120642e51cd"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Theorem FulpFPredGePos : forall f : float, Fbounded b f -> Fcanonic radix b f -> (0 < f)%R -> (Fulp (FPred b radix precision f) <= Fulp f)%R.",
            "VernacStartTheoremProof",
            "d0fb2f579e5618f1c91f865ecf53fd4c465b90f5"
        ],
        [
            "intros f Hf1 Hf2 H.",
            "VernacExtend",
            "6384dd351a95233dfa04ef7148493b42f5adca9a"
        ],
        [
            "apply LeFulpPos; auto with zarith float; unfold FtoRradix in |- *.",
            "VernacExtend",
            "afeaad0ef0ec341160a953347b0717ef572a730a"
        ],
        [
            "apply R0RltRlePred; auto with arith.",
            "VernacExtend",
            "25e4381280d0fe4ec61e7d8531ae54469bf9647b"
        ],
        [
            "apply Rlt_le; apply FPredLt; auto with arith.",
            "VernacExtend",
            "8dde9e088a543077a78340be69ed0cdcfe15425d"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Theorem CanonicFulp : forall p : float, Fcanonic radix b p -> Fulp p = Float 1%nat (Fexp p).",
            "VernacStartTheoremProof",
            "554dbecf0a77266ac0c07fc615a4275a91a07057"
        ],
        [
            "intros p H; unfold Fulp in |- *.",
            "VernacExtend",
            "2c9bef5f794f19b18dab8036317138767f044b8f"
        ],
        [
            "rewrite FcanonicFnormalizeEq; auto with arith.",
            "VernacExtend",
            "212eb7a9fbca97c39196d39b49d821543c23dba6"
        ],
        [
            "unfold FtoRradix, FtoR in |- *; simpl in |- *; ring.",
            "VernacExtend",
            "5b3b96c09542c1778400f311cf15a289b4188c3b"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Theorem FSuccUlpPos : forall x : float, Fcanonic radix b x -> (0 <= x)%R -> Fminus radix (FSucc b radix precision x) x = Fulp x :>R.",
            "VernacStartTheoremProof",
            "7dfcc2c7f64f5fbc1a58ee93333099901c6b80dc"
        ],
        [
            "intros x H H0; rewrite CanonicFulp; auto.",
            "VernacExtend",
            "e0f29cb26712b56f8b0751da246f8aa626e19b4b"
        ],
        [
            "apply FSuccDiffPos; auto.",
            "VernacExtend",
            "7c1ffc90238d7a97afdce236b7c481deb9431ed9"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Theorem FNSuccUlpPos : forall x : float, Fcanonic radix b x -> (0 <= x)%R -> Fminus radix (FNSucc b radix precision x) x = Fulp x :>R.",
            "VernacStartTheoremProof",
            "2ee45484c1ce887f8f086b8848089ee8fce6a051"
        ],
        [
            "intros x H H0.",
            "VernacExtend",
            "b2fd7c5b00ad98f57bcf80765c472d3c23a848de"
        ],
        [
            "unfold FNSucc in |- *.",
            "VernacExtend",
            "613476f75fd896bb1a2ca8d254b020a40c8e2268"
        ],
        [
            "rewrite FcanonicFnormalizeEq; auto with arith.",
            "VernacExtend",
            "212eb7a9fbca97c39196d39b49d821543c23dba6"
        ],
        [
            "apply FSuccUlpPos; auto.",
            "VernacExtend",
            "14e0a351541d4738de58c18ec846f80fea9ed1f0"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Theorem FulpFabs : forall f : float, Fulp f = Fulp (Fabs f) :>R.",
            "VernacStartTheoremProof",
            "123efb0f2a55936c44b72027712676862f1701e6"
        ],
        [
            "intros f; unfold Fulp in |- *; case (Rle_or_lt 0 f); intros H'.",
            "VernacExtend",
            "6891a9e70758b53938d3e6b12325aff2ea15094e"
        ],
        [
            "replace (Fabs f) with f; auto; unfold Fabs in |- *; apply floatEq; simpl in |- *; auto with zarith real.",
            "VernacExtend",
            "a4b0d4fc40a32eb1ced7870a2d7f40acb50d99f9"
        ],
        [
            "apply sym_eq; apply Zabs_eq; apply LeR0Fnum with radix; auto with zarith real.",
            "VernacExtend",
            "1b22145e0b77f6d48d093ff55a3eb9f7f5c8e2f6"
        ],
        [
            "replace (Fabs f) with (Fopp f); [ rewrite Fnormalize_Fopp | apply floatEq; simpl in |- * ]; auto with arith.",
            "VernacExtend",
            "7a87251474338099004c701ec26427dd7068ba0d"
        ],
        [
            "apply sym_eq; apply Zabs_eq_opp; apply R0LeFnum with radix; auto with zarith real.",
            "VernacExtend",
            "040a861f0acb1134f9ad2eafe7459323fb553f7f"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Theorem RoundedModeUlp : forall P, RoundedModeP b radix P -> forall (p : R) (q : float), P p q -> (Rabs (p - q) < Fulp q)%R.",
            "VernacStartTheoremProof",
            "c9af0b8d5aca3a02f8d8730e0bd4e6f5200b3a99"
        ],
        [
            "intros P H' p q H'0.",
            "VernacExtend",
            "13fa0cadd43479f697743cb37392bdfa68be5f73"
        ],
        [
            "case (Req_dec p q); intros Eq1.",
            "VernacExtend",
            "3c2e01a8436d308367c405c8ddeab68a95f74023"
        ],
        [
            "rewrite <- Eq1.",
            "VernacExtend",
            "a51963ea9953e0b8bb7f342c91aa7438ca422f43"
        ],
        [
            "replace (p - p)%R with 0%R; [ idtac | ring ].",
            "VernacExtend",
            "c38b419c06748d9c4b7e7c2597e4620086684231"
        ],
        [
            "rewrite Rabs_R0; auto.",
            "VernacExtend",
            "a77aa975c9327a7270612847ff72f6749bb6f889"
        ],
        [
            "unfold Fulp, FtoRradix, FtoR in |- *; simpl in |- *; auto with real arith.",
            "VernacExtend",
            "d966378b8ea746e4880feb031ba6bc1e6fd20573"
        ],
        [
            "case H'.",
            "VernacExtend",
            "59f58feee27b0b33473890c47947a750059972d7"
        ],
        [
            "intros H'1 H'2; elim H'2; intros H'3 H'4; elim H'4; intros H'5 H'6; case H'5 with (1 := H'0); clear H'5 H'4 H'2; intros H'5.",
            "VernacExtend",
            "d389127b8ec60db0f08bf39639d6f1a7643e3475"
        ],
        [
            "rewrite Rabs_right; auto.",
            "VernacExtend",
            "b1779d7d605b07cf96f8be33fdef3339b6652757"
        ],
        [
            "cut (Fbounded b q); [ intros B0 | case H'5; auto ].",
            "VernacExtend",
            "6565a1b39ad47e282136d6c4c235daba88f27f46"
        ],
        [
            "apply Rlt_le_trans with (2 := FulpSuc q B0).",
            "VernacExtend",
            "267460ae3dbb834711242305c9a0001c77fdd458"
        ],
        [
            "apply Rplus_lt_reg_l with (r := FtoR radix q).",
            "VernacExtend",
            "cd60a5512ef4170bc80c81ac9f2cef4774c1daa9"
        ],
        [
            "repeat rewrite Rplus_minus; auto.",
            "VernacExtend",
            "273289689f354fd3bae728939735161cb3e9ac91"
        ],
        [
            "case (Rle_or_lt (FNSucc b radix precision q) p); auto.",
            "VernacExtend",
            "b0183f0991da2950a5ca179ce750d91403a01c4b"
        ],
        [
            "intros H'2; absurd (FNSucc b radix precision q <= q)%R; auto.",
            "VernacExtend",
            "e7bf5d2cacee9c21dc4c310a7e1638c095896afc"
        ],
        [
            "apply Rgt_not_le; red in |- *; unfold FtoRradix in |- *; auto with real float arith.",
            "VernacExtend",
            "b5ef1d31c3d12057bdc212b5504bf2677b44101a"
        ],
        [
            "case H'5; auto.",
            "VernacExtend",
            "89e9ba1810a4cb4a8c5f90689d52e172f43767f6"
        ],
        [
            "intros H'4 H'7; elim H'7; intros H'8 H'9; apply H'9; clear H'7; auto.",
            "VernacExtend",
            "75fbbaa24fedea8af30dea3e305ad0592b50ba46"
        ],
        [
            "apply (FcanonicBound radix b); auto with float arith.",
            "VernacExtend",
            "56da0d6287869d9e56da23e4491d0745de57378f"
        ],
        [
            "apply Rle_ge; apply Rplus_le_reg_l with (r := FtoR radix q).",
            "VernacExtend",
            "ada027ce8dbcbaa68bca23a93fb28b572d6c24ca"
        ],
        [
            "repeat rewrite Rplus_minus; auto.",
            "VernacExtend",
            "273289689f354fd3bae728939735161cb3e9ac91"
        ],
        [
            "rewrite Rplus_0_r; apply isMin_inv1 with (1 := H'5); auto.",
            "VernacExtend",
            "8e5be452a6f3c204118e42aa3c5d08bda4640e46"
        ],
        [
            "rewrite Faux.Rabsolu_left1; auto.",
            "VernacExtend",
            "cdfb2996338b3a1e58065e7b9fa29cb7224ffecf"
        ],
        [
            "rewrite Ropp_minus_distr; auto.",
            "VernacExtend",
            "812e31f27c1ba41869a97e619c2d58f6a5ef01f6"
        ],
        [
            "cut (Fbounded b q); [ intros B0 | case H'5; auto ].",
            "VernacExtend",
            "6565a1b39ad47e282136d6c4c235daba88f27f46"
        ],
        [
            "apply Rlt_le_trans with (2 := FulpPred q B0).",
            "VernacExtend",
            "7fac5773cf10a8a0bf9931f403fdb5f99d6b1921"
        ],
        [
            "apply Ropp_lt_cancel; repeat rewrite Rminus_0_l.",
            "VernacExtend",
            "b1ddcea5e213c173632fb5cf20bd174a00036e9f"
        ],
        [
            "apply Rplus_lt_reg_l with (r := FtoR radix q).",
            "VernacExtend",
            "cd60a5512ef4170bc80c81ac9f2cef4774c1daa9"
        ],
        [
            "repeat rewrite Rplus_minus; auto.",
            "VernacExtend",
            "273289689f354fd3bae728939735161cb3e9ac91"
        ],
        [
            "case (Rle_or_lt p (FNPred b radix precision q)); auto.",
            "VernacExtend",
            "d9683bd56c93d8e6edab30a76355296b94ee0ce7"
        ],
        [
            "intros H'2; absurd (q <= FNPred b radix precision q)%R; auto.",
            "VernacExtend",
            "45a0f9be6822d558d58033c3fb88a4fa8893b665"
        ],
        [
            "apply Rgt_not_le; red in |- *; unfold FtoRradix in |- *; auto with real float arith.",
            "VernacExtend",
            "b5ef1d31c3d12057bdc212b5504bf2677b44101a"
        ],
        [
            "case H'5; auto.",
            "VernacExtend",
            "89e9ba1810a4cb4a8c5f90689d52e172f43767f6"
        ],
        [
            "intros H'4 H'7; elim H'7; intros H'8 H'9; apply H'9; clear H'7; auto.",
            "VernacExtend",
            "75fbbaa24fedea8af30dea3e305ad0592b50ba46"
        ],
        [
            "apply (FcanonicBound radix b); auto with float arith.",
            "VernacExtend",
            "56da0d6287869d9e56da23e4491d0745de57378f"
        ],
        [
            "intros H1; apply Rplus_lt_compat_l; auto with real; apply Ropp_lt_contravar; unfold Rminus in |- *; auto with real.",
            "VernacExtend",
            "b50a66bbc54a56f12571a10af5e35805c9a91fff"
        ],
        [
            "apply Rplus_le_reg_l with (r := FtoR radix q).",
            "VernacExtend",
            "202a2ed6dd1ded75fdeee55272a1b312fa735a89"
        ],
        [
            "repeat rewrite Rplus_minus; auto.",
            "VernacExtend",
            "273289689f354fd3bae728939735161cb3e9ac91"
        ],
        [
            "rewrite Rplus_0_r; apply isMax_inv1 with (1 := H'5).",
            "VernacExtend",
            "3575792f812b9e7a42aafd2e3250efc6b3949d85"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Theorem RoundedModeErrorExpStrict : forall P, RoundedModeP b radix P -> forall (p q : float) (x : R), Fbounded b p -> Fbounded b q -> P x p -> q = (x - p)%R :>R -> q <> 0%R :>R -> (Fexp q < Fexp p)%Z.",
            "VernacStartTheoremProof",
            "9ea8072cb1f82341d3fdb93b732870005fe61916"
        ],
        [
            "intros P H p q x H0 H1 H2 H3 H4.",
            "VernacExtend",
            "0496c6b7f08d158831d1e6c728ca96eee247b1bf"
        ],
        [
            "apply Zlt_powerRZ with (e := IZR radix); auto with real zarith.",
            "VernacExtend",
            "5b59ba3c77b97f42f3ffcd8d410e62cf5bf7de38"
        ],
        [
            "apply Rle_lt_trans with (FtoRradix (Fabs q)).",
            "VernacExtend",
            "8b9f97e87af420551ef9e4ceb8e876fa6d33433c"
        ],
        [
            "replace (powerRZ radix (Fexp q)) with (FtoRradix (Float 1%nat (Fexp q))); unfold FtoRradix in |- *; [ apply Fop.RleFexpFabs; auto with arith | unfold FtoR in |- *; simpl in |- *; ring ].",
            "VernacExtend",
            "6b0963cf1811d482e6205f6b51fee502daf2b47d"
        ],
        [
            "rewrite (Fabs_correct radix); auto with zarith.",
            "VernacExtend",
            "514703ea863a52786a0bf19f73afc100841e48a9"
        ],
        [
            "fold FtoRradix in |- *; rewrite H3.",
            "VernacExtend",
            "ed72c181bd6075afbb9975d3ca74cabbd994711d"
        ],
        [
            "apply Rlt_le_trans with (Fulp p); [ apply RoundedModeUlp with P; auto | unfold Fulp in |- * ].",
            "VernacExtend",
            "6427d56ee264c976855ba687ff963029ee744eaf"
        ],
        [
            "apply Rle_powerRZ; auto with real zarith.",
            "VernacExtend",
            "69b1d0569e30b7fcea272fe0fa04484701d6a993"
        ],
        [
            "apply FcanonicLeastExp with radix b precision; auto with real arith.",
            "VernacExtend",
            "2551aa4336ddf06ee2ed511910d4706afdbed423"
        ],
        [
            "apply sym_eq; apply FnormalizeCorrect; auto.",
            "VernacExtend",
            "1ce4b3eb95883f2cb55c358368109d3695e7f9f4"
        ],
        [
            "apply FnormalizeCanonic; auto with zarith.",
            "VernacExtend",
            "304000ae6835708ce25a32e9eaba074c009d46a4"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Theorem RoundedModeProjectorIdem : forall P (p : float), RoundedModeP b radix P -> Fbounded b p -> P p p.",
            "VernacStartTheoremProof",
            "2e11047dc577beb471d6897134290752ac6d5c5a"
        ],
        [
            "intros P p H' H.",
            "VernacExtend",
            "7f7469af10721ce3b86a6e486d56683bc6943c4b"
        ],
        [
            "elim H'; intros H'0 H'1; elim H'1; intros H'2 H'3; elim H'3; intros H'4 H'5; clear H'3 H'1.",
            "VernacExtend",
            "239b62ee2d7ab3bb607569631d5edf7dd43a4365"
        ],
        [
            "case (H'0 p).",
            "VernacExtend",
            "504dd22b325cd54c7d35806c39586b9cad6ea187"
        ],
        [
            "intros x H'6.",
            "VernacExtend",
            "24ea3333f266879be987d9c6e546b1db8a5c4cfc"
        ],
        [
            "apply (H'2 p p x); auto.",
            "VernacExtend",
            "d6fee37ed4206f4aa198aee7c24fa03d5d8f8211"
        ],
        [
            "apply sym_eq; apply (RoundedProjector _ _ P H'); auto.",
            "VernacExtend",
            "723a5616d5e4c312b6bde07c5bbd807194da7745"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Theorem RoundedModeBounded : forall P (r : R) (q : float), RoundedModeP b radix P -> P r q -> Fbounded b q.",
            "VernacStartTheoremProof",
            "6c488f5c4bbc520b431cb8833fe38e702bed0ed1"
        ],
        [
            "intros P r q H' H'0.",
            "VernacExtend",
            "26b5fca768fa6bfbe5c95bdb226d3464299974bd"
        ],
        [
            "case H'.",
            "VernacExtend",
            "59f58feee27b0b33473890c47947a750059972d7"
        ],
        [
            "intros H'1 H'2; elim H'2; intros H'3 H'4; elim H'4; intros H'5 H'6; case H'5 with (1 := H'0); clear H'4 H'2; intros H; case H; auto.",
            "VernacExtend",
            "236cfe309ef25741e1400d515610a30599981cdc"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Theorem RoundedModeProjectorIdemEq : forall (P : R -> float -> Prop) (p q : float), RoundedModeP b radix P -> Fbounded b p -> P (FtoR radix p) q -> p = q :>R.",
            "VernacStartTheoremProof",
            "55469e624856844afea8974b9f3d972772c236b1"
        ],
        [
            "intros P p q H' H'0 H'1.",
            "VernacExtend",
            "8350e9b1b3f93b094d36a3734f43bb679041b505"
        ],
        [
            "cut (MinOrMaxP b radix P); [ intros Mn; case (Mn p q); auto; intros Mn1 | auto with inv ].",
            "VernacExtend",
            "2bb3157bd0449f818510be5c6448adb9816fb3fb"
        ],
        [
            "apply sym_eq; apply MinEq with (1 := Mn1); auto.",
            "VernacExtend",
            "ca5be1531069d15e082f031f25b0b89bae17932f"
        ],
        [
            "apply (RoundedModeProjectorIdem (isMin b radix)); auto.",
            "VernacExtend",
            "0edc29085f3d31bf22294a533fc2f6227c914ad0"
        ],
        [
            "apply MinRoundedModeP with (precision := precision); auto.",
            "VernacExtend",
            "9c713ab984e57490a2425136b2f02c1e3b6ef6ba"
        ],
        [
            "apply sym_eq; apply MaxEq with (1 := Mn1); auto.",
            "VernacExtend",
            "44e67e71726e152525f7c66966268c176f07c623"
        ],
        [
            "apply (RoundedModeProjectorIdem (isMax b radix)); auto.",
            "VernacExtend",
            "b19c3fe14ba0060fc60c57b36c941971383b6bdb"
        ],
        [
            "apply MaxRoundedModeP with (precision := precision); auto.",
            "VernacExtend",
            "57af07bc0167c3ae09328ee23083b26450f616a8"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Theorem RoundedModeMult : forall P, RoundedModeP b radix P -> forall (r : R) (q q' : float), P r q -> Fbounded b q' -> (r <= radix * q')%R -> (q <= radix * q')%R.",
            "VernacStartTheoremProof",
            "89ec5ee44a5a44b92839d22b393d81386fdd8df7"
        ],
        [
            "intros P H' r q q' H'0 H'1.",
            "VernacExtend",
            "e5ef6c05cbffd52b8a207df08f7dde0ba3df97bb"
        ],
        [
            "replace (radix * q')%R with (FtoRradix (Float (Fnum q') (Fexp q' + 1%nat))).",
            "VernacExtend",
            "56fe63bbfb005107f96ca2fc2d214f25fd080684"
        ],
        [
            "intros H'2; case H'2.",
            "VernacExtend",
            "c8f8de840635a3862d3b19db53df301ccd7a77f0"
        ],
        [
            "intros H'3; case H'; intros H'4 H'5; elim H'5; intros H'6 H'7; elim H'7; intros H'8 H'9; apply H'9 with (1 := H'3); clear H'7 H'5; auto.",
            "VernacExtend",
            "078b67e5647a4577d6281dd1f8c66ec266813705"
        ],
        [
            "apply RoundedModeProjectorIdem; auto.",
            "VernacExtend",
            "f1ffe11ba55f73a16400349195deb28b205e724b"
        ],
        [
            "apply FBoundedScale; auto.",
            "VernacExtend",
            "88137acc333cc6889ee92b12279699a163b5756c"
        ],
        [
            "intros H'3.",
            "VernacExtend",
            "2e512d3c52562ab0fb19b78be8662c12b7168c72"
        ],
        [
            "replace (FtoRradix q) with (FtoRradix (Float (Fnum q') (Fexp q' + 1%nat))); auto with real.",
            "VernacExtend",
            "40344b0255e1bc33b014a615a0d24d825734a19d"
        ],
        [
            "apply (RoundedProjector _ _ P H'); auto.",
            "VernacExtend",
            "d9f18303147b89d6255ff7bef3914e0f0f7c1f8c"
        ],
        [
            "apply FBoundedScale; auto.",
            "VernacExtend",
            "88137acc333cc6889ee92b12279699a163b5756c"
        ],
        [
            "case H'.",
            "VernacExtend",
            "59f58feee27b0b33473890c47947a750059972d7"
        ],
        [
            "intros H'4 H'5; elim H'5; intros H'6 H'7; clear H'5.",
            "VernacExtend",
            "2a5fd77671551db7f70f88b1f0a8218b2bdc1e39"
        ],
        [
            "apply (H'6 r (Float (Fnum q') (Fexp q' + 1%nat)) q); auto.",
            "VernacExtend",
            "7452932176f2fdc47a82b69a07b7b51770758d05"
        ],
        [
            "apply RoundedModeBounded with (P := P) (r := r); auto.",
            "VernacExtend",
            "fdf71d1d1c50548b71cff0572744e94aec5ff713"
        ],
        [
            "rewrite (FvalScale _ radixMoreThanOne b).",
            "VernacExtend",
            "0db6de4371be81437fbb2210bed2f70b9a1d6f4c"
        ],
        [
            "rewrite powerRZ_1; auto.",
            "VernacExtend",
            "867bec53224d4d0b9decf7e33f61bcdcb9eea8f5"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Theorem RoundedModeMultLess : forall P, RoundedModeP b radix P -> forall (r : R) (q q' : float), P r q -> Fbounded b q' -> (radix * q' <= r)%R -> (radix * q' <= q)%R.",
            "VernacStartTheoremProof",
            "d8a266db0d80067a10b4b8caa49520edc4318613"
        ],
        [
            "intros P H' r q q' H'0 H'1.",
            "VernacExtend",
            "e5ef6c05cbffd52b8a207df08f7dde0ba3df97bb"
        ],
        [
            "replace (radix * q')%R with (FtoRradix (Float (Fnum q') (Fexp q' + 1%nat))).",
            "VernacExtend",
            "56fe63bbfb005107f96ca2fc2d214f25fd080684"
        ],
        [
            "intros H'2; case H'2.",
            "VernacExtend",
            "c8f8de840635a3862d3b19db53df301ccd7a77f0"
        ],
        [
            "intros H'3; case H'; intros H'4 H'5; elim H'5; intros H'6 H'7; elim H'7; intros H'8 H'9; apply H'9 with (1 := H'3); clear H'7 H'5; auto.",
            "VernacExtend",
            "078b67e5647a4577d6281dd1f8c66ec266813705"
        ],
        [
            "apply RoundedModeProjectorIdem; auto.",
            "VernacExtend",
            "f1ffe11ba55f73a16400349195deb28b205e724b"
        ],
        [
            "apply FBoundedScale; auto.",
            "VernacExtend",
            "88137acc333cc6889ee92b12279699a163b5756c"
        ],
        [
            "intros H'3.",
            "VernacExtend",
            "2e512d3c52562ab0fb19b78be8662c12b7168c72"
        ],
        [
            "replace (FtoRradix q) with (FtoRradix (Float (Fnum q') (Fexp q' + 1%nat))); auto with real.",
            "VernacExtend",
            "40344b0255e1bc33b014a615a0d24d825734a19d"
        ],
        [
            "apply (RoundedProjector _ _ P H'); auto.",
            "VernacExtend",
            "d9f18303147b89d6255ff7bef3914e0f0f7c1f8c"
        ],
        [
            "apply FBoundedScale; auto.",
            "VernacExtend",
            "88137acc333cc6889ee92b12279699a163b5756c"
        ],
        [
            "unfold FtoRradix in H'3; rewrite H'3; auto.",
            "VernacExtend",
            "cd02bd904d61a3eaeb86b7eaf7c6e40a2ccd267a"
        ],
        [
            "case H'.",
            "VernacExtend",
            "59f58feee27b0b33473890c47947a750059972d7"
        ],
        [
            "intros H'4 H'5; elim H'5; intros H'6 H'7; clear H'5.",
            "VernacExtend",
            "2a5fd77671551db7f70f88b1f0a8218b2bdc1e39"
        ],
        [
            "unfold FtoRradix in |- *; rewrite FvalScale; auto.",
            "VernacExtend",
            "9e0ce178ac55e164f0ae00ced32123531c540a45"
        ],
        [
            "rewrite powerRZ_1; auto.",
            "VernacExtend",
            "867bec53224d4d0b9decf7e33f61bcdcb9eea8f5"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Theorem RleMinR0 : forall (r : R) (min : float), (0 <= r)%R -> isMin b radix r min -> (0 <= min)%R.",
            "VernacStartTheoremProof",
            "8fea0b90b755d5e64517eb7bbf094024ee4b16c7"
        ],
        [
            "intros r min H' H'0.",
            "VernacExtend",
            "18ade96bc81d1195ae37eba08868bf461cbf849d"
        ],
        [
            "rewrite <- (FzeroisZero radix b).",
            "VernacExtend",
            "6120a5fdd5dc0fe24262b2396a3d5f373340115f"
        ],
        [
            "case H'; intros H'1.",
            "VernacExtend",
            "97b56f5c27c2811ce6acf0996a62c51a4608adef"
        ],
        [
            "apply (MonotoneMin b radix) with (p := FtoRradix (Fzero (- dExp b))) (q := r); auto.",
            "VernacExtend",
            "d2cd16f0ac5e8a1e7a08f6e0024ac22c2f3766c3"
        ],
        [
            "unfold FtoRradix in |- *; rewrite (FzeroisZero radix b); auto.",
            "VernacExtend",
            "256dc0a1d7dc67fbe874338fda6c1de395aa76b9"
        ],
        [
            "apply (RoundedModeProjectorIdem (isMin b radix)); auto.",
            "VernacExtend",
            "0edc29085f3d31bf22294a533fc2f6227c914ad0"
        ],
        [
            "apply MinRoundedModeP with (precision := precision); auto with float.",
            "VernacExtend",
            "e030a7a9b86bac504766e58e5ae7859cd2a93917"
        ],
        [
            "apply FboundedFzero; auto.",
            "VernacExtend",
            "8d0d3171dfdcd871c85f5387344c815eca8c2e6c"
        ],
        [
            "replace (FtoR radix (Fzero (- dExp b))) with (FtoRradix min); auto with real.",
            "VernacExtend",
            "4d19a7415da48f00a41a571bb0899c524efdf56a"
        ],
        [
            "apply sym_eq; apply (ProjectMin b radix).",
            "VernacExtend",
            "4bb41ae88a41209263b2867d53b36ff88553a3a1"
        ],
        [
            "apply FboundedFzero; auto.",
            "VernacExtend",
            "8d0d3171dfdcd871c85f5387344c815eca8c2e6c"
        ],
        [
            "rewrite <- H'1 in H'0; rewrite <- (FzeroisZero radix b) in H'0; auto.",
            "VernacExtend",
            "f5d521094e24c67b56c3377b40a689ac912e2891"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Theorem RleRoundedR0 : forall (P : R -> float -> Prop) (p : float) (r : R), RoundedModeP b radix P -> P r p -> (0 <= r)%R -> (0 <= p)%R.",
            "VernacStartTheoremProof",
            "171b180c70ffbb60d7e37f0da09aa0d6523d1b01"
        ],
        [
            "intros P p r H' H'0 H'1.",
            "VernacExtend",
            "1e88af9e79ac1309240e9db62c48e7e5871a2023"
        ],
        [
            "case H'.",
            "VernacExtend",
            "59f58feee27b0b33473890c47947a750059972d7"
        ],
        [
            "intros H'2 H'3; Elimc H'3; intros H'3 H'4; Elimc H'4; intros H'4 H'5; case (H'4 r p); auto; intros H'6.",
            "VernacExtend",
            "ad3fa6d4ad043bd1e0e2e22dfb8f296d26e201d6"
        ],
        [
            "apply RleMinR0 with (r := r); auto.",
            "VernacExtend",
            "f9e2a268c5e5c502e4cf91b652ab0b32dfc6e863"
        ],
        [
            "apply Rle_trans with r; auto; apply isMax_inv1 with (1 := H'6).",
            "VernacExtend",
            "cb910d47c91385ea7856895628729886ad87a0e0"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Theorem RleMaxR0 : forall (r : R) (max : float), (r <= 0)%R -> isMax b radix r max -> (max <= 0)%R.",
            "VernacStartTheoremProof",
            "d3b11874890960a3085857336e2597ade0c9451b"
        ],
        [
            "intros r max H' H'0.",
            "VernacExtend",
            "d7403a0413998e9b024109acfbf2947baacd5672"
        ],
        [
            "rewrite <- (FzeroisZero radix b).",
            "VernacExtend",
            "6120a5fdd5dc0fe24262b2396a3d5f373340115f"
        ],
        [
            "case H'; intros H'1.",
            "VernacExtend",
            "97b56f5c27c2811ce6acf0996a62c51a4608adef"
        ],
        [
            "apply (MonotoneMax b radix) with (q := FtoRradix (Fzero (- dExp b))) (p := r); auto.",
            "VernacExtend",
            "360f705d96f1dccb84da3695a36b3ba202b57d22"
        ],
        [
            "unfold FtoRradix in |- *; rewrite FzeroisZero; auto.",
            "VernacExtend",
            "44f6a48d90bcef2904bb88b103c74ff44052f74a"
        ],
        [
            "apply (RoundedModeProjectorIdem (isMax b radix)); auto.",
            "VernacExtend",
            "b19c3fe14ba0060fc60c57b36c941971383b6bdb"
        ],
        [
            "apply MaxRoundedModeP with (precision := precision); auto.",
            "VernacExtend",
            "57af07bc0167c3ae09328ee23083b26450f616a8"
        ],
        [
            "apply FboundedFzero; auto.",
            "VernacExtend",
            "8d0d3171dfdcd871c85f5387344c815eca8c2e6c"
        ],
        [
            "replace (FtoR radix (Fzero (- dExp b))) with (FtoRradix max); auto with real.",
            "VernacExtend",
            "d8cd949a55ce5dc60fe0f74daa2a4bc07dee912e"
        ],
        [
            "apply sym_eq; apply (ProjectMax b radix).",
            "VernacExtend",
            "5c40d7994f9fbd457b3f69ffe5956ef92cfe5998"
        ],
        [
            "apply FboundedFzero; auto.",
            "VernacExtend",
            "8d0d3171dfdcd871c85f5387344c815eca8c2e6c"
        ],
        [
            "rewrite H'1 in H'0; rewrite <- (FzeroisZero radix b) in H'0; auto.",
            "VernacExtend",
            "f32575e2f073760605f3ab692a957c68683acc54"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Theorem RleRoundedLessR0 : forall (P : R -> float -> Prop) (p : float) (r : R), RoundedModeP b radix P -> P r p -> (r <= 0)%R -> (p <= 0)%R.",
            "VernacStartTheoremProof",
            "0e19842f5a9739acbf47da20bdad02460a27983b"
        ],
        [
            "intros P p r H' H'0 H'1.",
            "VernacExtend",
            "1e88af9e79ac1309240e9db62c48e7e5871a2023"
        ],
        [
            "case H'.",
            "VernacExtend",
            "59f58feee27b0b33473890c47947a750059972d7"
        ],
        [
            "intros H'2 H'3; Elimc H'3; intros H'3 H'4; Elimc H'4; intros H'4 H'5; case (H'4 r p); auto; intros H'6.",
            "VernacExtend",
            "ad3fa6d4ad043bd1e0e2e22dfb8f296d26e201d6"
        ],
        [
            "apply Rle_trans with r; auto; apply isMin_inv1 with (1 := H'6).",
            "VernacExtend",
            "4dfe117c6006df80ebd97df75104aa3d6c0626fc"
        ],
        [
            "apply RleMaxR0 with (r := r); auto.",
            "VernacExtend",
            "2535a839893a20ad104de3ef366cb99175cad26f"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Theorem PminPos : forall p min : float, (0 <= p)%R -> Fbounded b p -> isMin b radix (/ 2%nat * p) min -> exists c : float, Fbounded b c /\\ c = (p - min)%R :>R.",
            "VernacStartTheoremProof",
            "302ab519cd09c3f5bd8e2b46c6f3704f17bd1699"
        ],
        [
            "intros p min H' H'0 H'1.",
            "VernacExtend",
            "f7611d813b7fc155bab563fa246ced4d192b5f65"
        ],
        [
            "cut (min <= / 2%nat * p)%R; [ intros Rl1; Casec Rl1; intros Rl1 | apply isMin_inv1 with (1 := H'1); auto ].",
            "VernacExtend",
            "c915653eec193e1a4591cf39c828fa2e3901894f"
        ],
        [
            "case (eqExpMax _ radixMoreThanOne b min p); auto.",
            "VernacExtend",
            "ca5c34b9a1f518675633fb49a2467d7bb22c5ba2"
        ],
        [
            "case H'1; auto.",
            "VernacExtend",
            "a44f1b914e489dd19b841fdfab025ba14e3d8f86"
        ],
        [
            "rewrite Fabs_correct; auto with arith.",
            "VernacExtend",
            "ec8e84a02c40373ce20ef61cb775aa12999bc762"
        ],
        [
            "rewrite Rabs_right; auto.",
            "VernacExtend",
            "b1779d7d605b07cf96f8be33fdef3339b6652757"
        ],
        [
            "apply Rle_trans with (/ 2%nat * p)%R; auto.",
            "VernacExtend",
            "2546d8dca6b10358dd68cfb51e88c392c2085418"
        ],
        [
            "apply Rlt_le; auto.",
            "VernacExtend",
            "4003e3e1c449ee89cad9e953d0a562db8235648c"
        ],
        [
            "apply Rmult_le_reg_l with (r := INR 2); auto with real.",
            "VernacExtend",
            "d844aeae389b738df4405a2dd7bb4aed456229ac"
        ],
        [
            "rewrite <- Rmult_assoc; rewrite Rinv_r; auto with real; rewrite Rmult_ne_r; auto with real.",
            "VernacExtend",
            "8e7e465df3bd232b3203728cf304f7a5bad70a4e"
        ],
        [
            "apply Rle_ge; apply RleMinR0 with (r := (/ 2%nat * p)%R); auto.",
            "VernacExtend",
            "51105b2db08485ac41dcaf13300ddf2ed4349b14"
        ],
        [
            "apply Rmult_le_reg_l with (r := INR 2); auto with real.",
            "VernacExtend",
            "d844aeae389b738df4405a2dd7bb4aed456229ac"
        ],
        [
            "rewrite <- Rmult_assoc; rewrite Rinv_r; auto with real; rewrite Rmult_1_l; rewrite Rmult_0_r; auto with real.",
            "VernacExtend",
            "390e360380ecb15b19665b89a766189b6dca8783"
        ],
        [
            "intros min' H'2; elim H'2; intros H'3 H'4; elim H'4; intros H'5 H'6; clear H'4 H'2.",
            "VernacExtend",
            "f07535d88cc6c49669a551568b8b66b431e02b1e"
        ],
        [
            "case (FboundNext _ radixMoreThanOne b precision) with (p := min'); auto with arith; fold FtoRradix in |- *.",
            "VernacExtend",
            "c341d8dbcdfebe452059922b54fb8e1a358a264e"
        ],
        [
            "intros Smin H'2; elim H'2; intros H'4 H'7; clear H'2.",
            "VernacExtend",
            "2c854c9fb591f41c90250ad8da290d5d94e83e23"
        ],
        [
            "exists Smin; split; auto.",
            "VernacExtend",
            "4ffe643310f5a2dbecfd28199926f9222bc2e888"
        ],
        [
            "rewrite H'7; auto.",
            "VernacExtend",
            "66fce77f8c179e59e047f9511f89b1cbe3fe56ec"
        ],
        [
            "unfold FtoRradix in |- *.",
            "VernacExtend",
            "ca5b46f9af7312531a190b63534dffaa3cbf2633"
        ],
        [
            "rewrite <- H'5; auto.",
            "VernacExtend",
            "f8b62f99b3718e60bd969c76931397a10bee1bff"
        ],
        [
            "replace (Float (Zsucc (Fnum min')) (Fexp min')) with (Float (Fnum (Fshift radix (Zabs_nat (Fexp p - Fexp min')) p) - Fnum min') (Fexp min')); auto.",
            "VernacExtend",
            "9db23260369e1e24f065d365314d3681895e22bf"
        ],
        [
            "unfold FtoRradix, FtoR in |- *; simpl in |- *.",
            "VernacExtend",
            "85a3da1582165d92ceb7faef707de88822bccf1a"
        ],
        [
            "rewrite <- Z_R_minus.",
            "VernacExtend",
            "f7f6d8d1cb517a19b80ecb78fa526746803e6aed"
        ],
        [
            "rewrite (fun x y z : R => Rmult_comm (x - y) z); rewrite Rmult_minus_distr_l; repeat rewrite (fun x : Z => Rmult_comm (powerRZ radix x)).",
            "VernacExtend",
            "c4528d771c0ff182337a51854e2818e0d117df26"
        ],
        [
            "rewrite Rmult_IZR.",
            "VernacExtend",
            "b795c3b06d24e235dcd0b237a976408f905ddd8d"
        ],
        [
            "rewrite Zpower_nat_powerRZ_absolu; auto with zarith.",
            "VernacExtend",
            "e1e964236539449012576359035712812e08756e"
        ],
        [
            "rewrite Rmult_assoc.",
            "VernacExtend",
            "323caa1eefcb937c18a66a7144c1e29b2c1a3e40"
        ],
        [
            "rewrite <- (powerRZ_add radix); auto with real zarith.",
            "VernacExtend",
            "3cba8dd16e2dbe1ff898b3b0c9e83ccce95945f4"
        ],
        [
            "replace (Fexp p - Fexp min' + Fexp min')%Z with (Fexp p); [ auto | ring ].",
            "VernacExtend",
            "a9144f9c37a4ec5f5ab4adddae77cd8bbe4f96cf"
        ],
        [
            "apply floatEq; auto; simpl in |- *.",
            "VernacExtend",
            "58f628b852cc7405a62c690cca27cde8535c5557"
        ],
        [
            "apply Zle_antisym.",
            "VernacExtend",
            "d5fb169d90b6dbda1fca926c28e78732e286a418"
        ],
        [
            "apply Zlt_succ_le.",
            "VernacExtend",
            "c303523f868e2dd2771675d2de37d7328c4e957b"
        ],
        [
            "apply Zplus_lt_reg_l with (p := Fnum min'); auto.",
            "VernacExtend",
            "f1545b67cd31d83b7c9e06dde883e24970f8b4b3"
        ],
        [
            "cut (forall x y : Z, (x + (y - x))%Z = y); [ intros tmp; rewrite tmp; clear tmp | intros; ring ].",
            "VernacExtend",
            "eb7b7e44360e22e6f6cc365ce844b73be8053624"
        ],
        [
            "replace (Fnum min' + Zsucc (Zsucc (Fnum min')))%Z with (2%nat * Zsucc (Fnum min'))%Z.",
            "VernacExtend",
            "8c182168878890e056ccd84aa518459c9180e636"
        ],
        [
            "apply (Rlt_Float_Zlt radix) with (r := Fexp min'); auto; fold FtoRradix in |- *.",
            "VernacExtend",
            "71a10da6149932ab6187f897e7bcfe5822121445"
        ],
        [
            "replace (FtoRradix (Float (2%nat * Zsucc (Fnum min')) (Fexp min'))) with (2%nat * Float (Zsucc (Fnum min')) (Fexp min'))%R.",
            "VernacExtend",
            "d32e49933364590d13e57d787b9c1fe337527abf"
        ],
        [
            "rewrite <- H'7.",
            "VernacExtend",
            "3ada3afda3aab2a1783d4fd8d31b1b6af8a847bf"
        ],
        [
            "replace (Float (Fnum p * Zpower_nat radix (Zabs_nat (Fexp p - Fexp min'))) (Fexp min')) with (Fshift radix (Zabs_nat (Fexp p - Fexp min')) p).",
            "VernacExtend",
            "2896f1a2b1f68ba8008f83d3441ee53adebe3664"
        ],
        [
            "unfold FtoRradix in |- *; rewrite FshiftCorrect; auto.",
            "VernacExtend",
            "5abbc7cb08d11ed8fd912e6cc82302a9cbf61541"
        ],
        [
            "apply Rmult_lt_reg_l with (r := (/ 2%nat)%R); auto with real.",
            "VernacExtend",
            "8bc034dfa0cf0586596ad4f7208b865e73eda04f"
        ],
        [
            "rewrite <- Rmult_assoc; rewrite Rinv_l; auto with real; rewrite Rmult_1_l; auto with real.",
            "VernacExtend",
            "d35ca5901edc71ed18310778d2a4feec34ad5e94"
        ],
        [
            "case (Rle_or_lt Smin (/ 2%nat * FtoR radix p)); auto.",
            "VernacExtend",
            "fde5a530927b3289adee899b406f43f9c7e97a2a"
        ],
        [
            "intros H'2; absurd (min < Smin)%R.",
            "VernacExtend",
            "40199cc9e2e71a1cc68978681a993dc00b3ef6a4"
        ],
        [
            "apply Rle_not_lt.",
            "VernacExtend",
            "1f0f6b47a7d49626d97b2585f7610e291096035d"
        ],
        [
            "case H'1; auto.",
            "VernacExtend",
            "a44f1b914e489dd19b841fdfab025ba14e3d8f86"
        ],
        [
            "intros H'8 H'9; elim H'9; intros H'10 H'11; apply H'11; clear H'9; auto.",
            "VernacExtend",
            "609494d3032c106214d000bc67ffbc2721ef3301"
        ],
        [
            "rewrite H'7; unfold FtoRradix in |- *; rewrite <- H'5; auto.",
            "VernacExtend",
            "87199accaa7a50d5801a25053809e1652e0c35f2"
        ],
        [
            "unfold FtoR in |- *; simpl in |- *; apply Rlt_monotony_exp; auto with real zarith.",
            "VernacExtend",
            "b039a1e6e048858bb6388ed1a32a9335db92e6c9"
        ],
        [
            "unfold Fshift in |- *; simpl in |- *.",
            "VernacExtend",
            "bc2226e4b5a4ef5bbaea414d285c81f30a1eb932"
        ],
        [
            "replace (Fexp p - Zabs_nat (Fexp p - Fexp min'))%Z with (Fexp min'); auto.",
            "VernacExtend",
            "f076e091746c53ee9990798f098e21e038375c3f"
        ],
        [
            "rewrite inj_abs; auto.",
            "VernacExtend",
            "16d1a62dc5288156f6709cea7b377c677cf15691"
        ],
        [
            "ring.",
            "VernacExtend",
            "baadd9fc4c175005af409bb466fcea9fab25b4e6"
        ],
        [
            "auto with zarith.",
            "VernacExtend",
            "23f42fd3236dcece4a40b3a666dce57fea69a9c0"
        ],
        [
            "replace (FtoRradix (Float (2%nat * Zsucc (Fnum min')) (Fexp min'))) with ((2%nat * Zsucc (Fnum min'))%Z * powerRZ radix (Fexp min'))%R.",
            "VernacExtend",
            "52b1cda75fe38093c50717d4d7f1ea0d078ca16c"
        ],
        [
            "rewrite Rmult_IZR; auto.",
            "VernacExtend",
            "44aee418e2ca54b49dbc7a73f12b6ebf687258ce"
        ],
        [
            "unfold FtoRradix, FtoR in |- *; simpl in |- *; ring.",
            "VernacExtend",
            "5b3b96c09542c1778400f311cf15a289b4188c3b"
        ],
        [
            "simpl in |- *; auto.",
            "VernacExtend",
            "9b631374b1d3067f703fd99c5dc6e1e5c8405957"
        ],
        [
            "replace (Z_of_nat 2) with (Zsucc (Zsucc 0)).",
            "VernacExtend",
            "7ff6d063b754fd53e3dc757809cbea3639d5c777"
        ],
        [
            "repeat rewrite <- Zmult_succ_l_reverse; unfold Zsucc in |- *; ring.",
            "VernacExtend",
            "e858aca549d9a4566714c89c8f83253b41a1c589"
        ],
        [
            "simpl in |- *; auto.",
            "VernacExtend",
            "9b631374b1d3067f703fd99c5dc6e1e5c8405957"
        ],
        [
            "apply Zlt_le_succ; auto.",
            "VernacExtend",
            "32f1bd7a8ae1c1f4de25ea760ffde87d46d63eb9"
        ],
        [
            "apply Zplus_lt_reg_l with (p := Fnum min'); auto.",
            "VernacExtend",
            "f1545b67cd31d83b7c9e06dde883e24970f8b4b3"
        ],
        [
            "cut (forall x y : Z, (x + (y - x))%Z = y); [ intros tmp; rewrite tmp; clear tmp | intros; ring ].",
            "VernacExtend",
            "eb7b7e44360e22e6f6cc365ce844b73be8053624"
        ],
        [
            "replace (Fnum min' + Fnum min')%Z with (2%nat * Fnum min')%Z.",
            "VernacExtend",
            "aa48f2f38116623b6f03d8302617b1a1c5b33a71"
        ],
        [
            "apply (Rlt_Float_Zlt radix) with (r := Fexp min'); auto; fold FtoRradix in |- *.",
            "VernacExtend",
            "71a10da6149932ab6187f897e7bcfe5822121445"
        ],
        [
            "replace (FtoRradix (Float (2%nat * Fnum min') (Fexp min'))) with (2%nat * Float (Fnum min') (Fexp min'))%R.",
            "VernacExtend",
            "551a6596437be242995b488f989e11adaa02c783"
        ],
        [
            "replace (Float (Fnum p * Zpower_nat radix (Zabs_nat (Fexp p - Fexp min'))) (Fexp min')) with (Fshift radix (Zabs_nat (Fexp p - Fexp min')) p).",
            "VernacExtend",
            "2896f1a2b1f68ba8008f83d3441ee53adebe3664"
        ],
        [
            "unfold FtoRradix in |- *; rewrite FshiftCorrect; auto.",
            "VernacExtend",
            "5abbc7cb08d11ed8fd912e6cc82302a9cbf61541"
        ],
        [
            "apply Rmult_lt_reg_l with (r := (/ 2%nat)%R); auto with real.",
            "VernacExtend",
            "8bc034dfa0cf0586596ad4f7208b865e73eda04f"
        ],
        [
            "rewrite <- Rmult_assoc; rewrite Rinv_l; auto with real; rewrite Rmult_1_l; auto with real.",
            "VernacExtend",
            "d35ca5901edc71ed18310778d2a4feec34ad5e94"
        ],
        [
            "replace (FtoR radix (Float (Fnum min') (Fexp min'))) with (FtoR radix min); auto.",
            "VernacExtend",
            "5dce62a9a78a3b9ebde90e7f150522f0c1979fd4"
        ],
        [
            "unfold Fshift in |- *; simpl in |- *.",
            "VernacExtend",
            "bc2226e4b5a4ef5bbaea414d285c81f30a1eb932"
        ],
        [
            "replace (Fexp p - Zabs_nat (Fexp p - Fexp min'))%Z with (Fexp min'); auto.",
            "VernacExtend",
            "f076e091746c53ee9990798f098e21e038375c3f"
        ],
        [
            "rewrite inj_abs; auto.",
            "VernacExtend",
            "16d1a62dc5288156f6709cea7b377c677cf15691"
        ],
        [
            "ring.",
            "VernacExtend",
            "baadd9fc4c175005af409bb466fcea9fab25b4e6"
        ],
        [
            "auto with zarith.",
            "VernacExtend",
            "23f42fd3236dcece4a40b3a666dce57fea69a9c0"
        ],
        [
            "replace (FtoRradix (Float (2%nat * Fnum min') (Fexp min'))) with ((2%nat * Fnum min')%Z * powerRZ radix (Fexp min'))%R.",
            "VernacExtend",
            "3b891762774795f26e951b16b59eb579f178fc02"
        ],
        [
            "rewrite Rmult_IZR; auto.",
            "VernacExtend",
            "44aee418e2ca54b49dbc7a73f12b6ebf687258ce"
        ],
        [
            "unfold FtoRradix, FtoR in |- *; simpl in |- *; ring.",
            "VernacExtend",
            "5b3b96c09542c1778400f311cf15a289b4188c3b"
        ],
        [
            "simpl in |- *; auto.",
            "VernacExtend",
            "9b631374b1d3067f703fd99c5dc6e1e5c8405957"
        ],
        [
            "replace (Z_of_nat 2) with (Zsucc (Zsucc 0)).",
            "VernacExtend",
            "7ff6d063b754fd53e3dc757809cbea3639d5c777"
        ],
        [
            "repeat rewrite <- Zmult_succ_l_reverse; unfold Zsucc in |- *; ring.",
            "VernacExtend",
            "e858aca549d9a4566714c89c8f83253b41a1c589"
        ],
        [
            "simpl in |- *; auto.",
            "VernacExtend",
            "9b631374b1d3067f703fd99c5dc6e1e5c8405957"
        ],
        [
            "exists min; split; auto.",
            "VernacExtend",
            "225be802774f7a00fcc6ca9b6cf0eb9ed30c17cf"
        ],
        [
            "case H'1; auto.",
            "VernacExtend",
            "a44f1b914e489dd19b841fdfab025ba14e3d8f86"
        ],
        [
            "rewrite Rl1.",
            "VernacExtend",
            "e2931bf293db4aa9ddf5c7c00efb2456ed10430c"
        ],
        [
            "pattern (FtoRradix p) at 2 in |- *; replace (FtoRradix p) with (2%nat * (/ 2%nat * p))%R.",
            "VernacExtend",
            "94dadc6d02f7dd2b033c996c58b88e4f37eb16e4"
        ],
        [
            "simpl in |- *; ring.",
            "VernacExtend",
            "dbea56eab9f20d9ab08eaf0f2769e833b9098d51"
        ],
        [
            "rewrite <- Rmult_assoc; rewrite Rinv_r; auto with real; rewrite Rmult_ne_r; auto with real.",
            "VernacExtend",
            "8e7e465df3bd232b3203728cf304f7a5bad70a4e"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Theorem div2IsBetweenPos : forall p min max : float, (0 <= p)%R -> Fbounded b p -> isMin b radix (/ 2%nat * p) min -> isMax b radix (/ 2%nat * p) max -> p = (min + max)%R :>R.",
            "VernacStartTheoremProof",
            "0cf77ce96c307b29487fb9290ef56510ddf9f56d"
        ],
        [
            "intros p min max P H' H'0 H'1; apply Rle_antisym.",
            "VernacExtend",
            "1d02f5d4f3770a0a59dca351d5cd54463e461e36"
        ],
        [
            "apply Rplus_le_reg_l with (r := (- max)%R).",
            "VernacExtend",
            "b9de06a9a3496af5086a26312a312e599ba8c4de"
        ],
        [
            "replace (- max + p)%R with (p - max)%R; [ idtac | ring ].",
            "VernacExtend",
            "86212707ffbeff0bcc8187eb9f9988052cf81f9d"
        ],
        [
            "replace (- max + (min + max))%R with (FtoRradix min); [ idtac | ring ].",
            "VernacExtend",
            "91abb082c3232e09daaa689ee02dfec405eba042"
        ],
        [
            "rewrite <- (Fminus_correct radix); auto with arith.",
            "VernacExtend",
            "89427f822f7b85cd534f9ca10f7068d9964af3d1"
        ],
        [
            "case H'0.",
            "VernacExtend",
            "0b7a0c96a71e8cd9464b13f3d81301c6b0f41fd5"
        ],
        [
            "intros H'2 H'3; elim H'3; intros H'4 H'5; apply H'5; clear H'3; auto.",
            "VernacExtend",
            "0586621591cc793ea349a2794b2d49708fc985bf"
        ],
        [
            "apply Sterbenz; auto.",
            "VernacExtend",
            "2d564057c2daa6631c6b156cb718aa4284b2d9cb"
        ],
        [
            "case H'1; auto.",
            "VernacExtend",
            "a44f1b914e489dd19b841fdfab025ba14e3d8f86"
        ],
        [
            "apply Rle_trans with (FtoRradix max); auto.",
            "VernacExtend",
            "c78a45796178fb8ea266bf8c168b0cef09403988"
        ],
        [
            "apply Rmult_le_reg_l with (r := INR 2); auto with real.",
            "VernacExtend",
            "d844aeae389b738df4405a2dd7bb4aed456229ac"
        ],
        [
            "rewrite <- Rmult_assoc; rewrite Rinv_r; auto with real; rewrite Rmult_1_l; auto with real.",
            "VernacExtend",
            "ca966ebf613a22b28e59541265e8e26503358e5e"
        ],
        [
            "apply Rledouble; auto.",
            "VernacExtend",
            "91a11e7bfb03a12894eb0db96cc7013309392099"
        ],
        [
            "apply Rle_trans with (FtoRradix min); auto.",
            "VernacExtend",
            "481c4c1e628da8c4873f83fe61cb0d24f6cc41a5"
        ],
        [
            "apply RleMinR0 with (r := (/ 2%nat * p)%R); auto.",
            "VernacExtend",
            "ee91e45659800d18531118448743c6227b13dbfe"
        ],
        [
            "apply Rmult_le_reg_l with (r := INR 2); auto with real.",
            "VernacExtend",
            "d844aeae389b738df4405a2dd7bb4aed456229ac"
        ],
        [
            "rewrite <- Rmult_assoc; rewrite Rinv_r; auto with real; rewrite Rmult_1_l; rewrite Rmult_0_r; auto with real.",
            "VernacExtend",
            "390e360380ecb15b19665b89a766189b6dca8783"
        ],
        [
            "apply Rle_trans with (/ 2%nat * p)%R; auto; apply isMax_inv1 with (1 := H'1).",
            "VernacExtend",
            "b2c2054bdc9d59f561e78c896f87c2048c69eb62"
        ],
        [
            "case H'1.",
            "VernacExtend",
            "05df29261f69b368ca50958324064932a6d0f70a"
        ],
        [
            "intros H'3 H'6; elim H'6; intros H'7 H'8; apply H'8; clear H'6; auto.",
            "VernacExtend",
            "f6251afc0705d0bba5c0c7c1de8caa1a2ec47893"
        ],
        [
            "apply Rmult_le_reg_l with (r := INR 2); auto with real.",
            "VernacExtend",
            "d844aeae389b738df4405a2dd7bb4aed456229ac"
        ],
        [
            "rewrite <- Rmult_assoc; rewrite Rinv_r; auto with real; rewrite Rmult_1_l; auto with real.",
            "VernacExtend",
            "ca966ebf613a22b28e59541265e8e26503358e5e"
        ],
        [
            "apply Rmult_le_reg_l with (r := (/ 2%nat)%R); auto with real.",
            "VernacExtend",
            "abbbac4956c03b71c9aea2a4613d2652ecbfe282"
        ],
        [
            "rewrite <- Rmult_assoc; rewrite Rinv_l; auto with real; rewrite Rmult_1_l; auto with real.",
            "VernacExtend",
            "d35ca5901edc71ed18310778d2a4feec34ad5e94"
        ],
        [
            "apply isMax_inv1 with (1 := H'1).",
            "VernacExtend",
            "75f9fe6e81eb03cd3ba773a15895de7faa9b306f"
        ],
        [
            "rewrite Fminus_correct; auto with arith.",
            "VernacExtend",
            "888afdc9efcb9ed4124067da93aae83e5d9e5735"
        ],
        [
            "apply Rplus_le_reg_l with (r := FtoR radix max).",
            "VernacExtend",
            "d13a2b14ee78243be88d19639427bc9c996923ad"
        ],
        [
            "replace (FtoR radix max + (FtoR radix p - FtoR radix max))%R with (FtoR radix p); [ idtac | ring ].",
            "VernacExtend",
            "3f262801b3fa3b7a05b6c0fcd56a16dac46b9457"
        ],
        [
            "apply Rplus_le_reg_l with (r := (- (/ 2%nat * p))%R).",
            "VernacExtend",
            "7c4c71edc5acab8e5e24f32be7dbd4185ab0dca8"
        ],
        [
            "replace (- (/ 2%nat * p) + FtoR radix p)%R with (/ 2%nat * p)%R.",
            "VernacExtend",
            "2f59e98a5dcb4800a853d5d1d7bb57e5490ed72c"
        ],
        [
            "replace (- (/ 2%nat * p) + (FtoR radix max + / 2%nat * p))%R with (FtoR radix max); [ apply isMax_inv1 with (1 := H'1) | ring ].",
            "VernacExtend",
            "8b4832699b2448b5ef78a353ae723298ca73b210"
        ],
        [
            "replace (FtoR radix p) with (2%nat * (/ 2%nat * p))%R.",
            "VernacExtend",
            "8c7cd9c4f936cbd1bd8f62af3828e9c2477c78e2"
        ],
        [
            "simpl in |- *; ring.",
            "VernacExtend",
            "dbea56eab9f20d9ab08eaf0f2769e833b9098d51"
        ],
        [
            "rewrite <- Rmult_assoc; rewrite Rinv_r; auto with real.",
            "VernacExtend",
            "73b376abc8ad398fd4821a9df706554fe65a0769"
        ],
        [
            "apply Rplus_le_reg_l with (r := (- min)%R).",
            "VernacExtend",
            "ce59600835cf3e32360ceb0b483ba6cb366f9e4e"
        ],
        [
            "replace (- min + p)%R with (p - min)%R; [ idtac | ring ].",
            "VernacExtend",
            "c01c759f1240de8f88d94bb2f5d7f655b36dda84"
        ],
        [
            "replace (- min + (min + max))%R with (FtoRradix max); [ idtac | ring ].",
            "VernacExtend",
            "715328ff9f64ad88f3a6dd94d28e4a0ca136cbd4"
        ],
        [
            "case (PminPos p min); auto.",
            "VernacExtend",
            "4700f17a85e756c1b738355819dfae7c2e77a27c"
        ],
        [
            "intros x H'2; elim H'2; intros H'3 H'4; elim H'4; clear H'2.",
            "VernacExtend",
            "622d65e3d27bf1e7d5f546f1c189e20dc146a47c"
        ],
        [
            "case H'1.",
            "VernacExtend",
            "05df29261f69b368ca50958324064932a6d0f70a"
        ],
        [
            "intros H'2 H'5; elim H'5; intros H'6 H'7; apply H'7; clear H'5; auto.",
            "VernacExtend",
            "a7356a5d39411c5a1e8873bba59f35792ea7d7f8"
        ],
        [
            "unfold FtoRradix in H'4; rewrite H'4; auto.",
            "VernacExtend",
            "0f445e7dcf21ffafb1273976d6be135ceff5711f"
        ],
        [
            "fold FtoRradix in |- *; apply Rplus_le_reg_l with (r := FtoRradix min).",
            "VernacExtend",
            "13a36cc1f12f4a259474a09f4134f5f62171e38f"
        ],
        [
            "replace (min + (p - min))%R with (FtoRradix p); [ idtac | ring ].",
            "VernacExtend",
            "dc2c5555894c84cc7f561090add1a89a15e8ed4a"
        ],
        [
            "apply Rplus_le_reg_l with (r := (- (/ 2%nat * p))%R).",
            "VernacExtend",
            "7c4c71edc5acab8e5e24f32be7dbd4185ab0dca8"
        ],
        [
            "replace (- (/ 2%nat * p) + p)%R with (/ 2%nat * p)%R.",
            "VernacExtend",
            "ec9f61345c23671a78b65fbdcf2f1da273916857"
        ],
        [
            "replace (- (/ 2%nat * p) + (min + / 2%nat * p))%R with (FtoRradix min); [ apply isMin_inv1 with (1 := H'0) | ring ].",
            "VernacExtend",
            "8230f12796c8e9cfd6a78d10b666165d9babfd7a"
        ],
        [
            "pattern (FtoRradix p) at 3 in |- *; replace (FtoRradix p) with (2%nat * (/ 2%nat * p))%R.",
            "VernacExtend",
            "3c280cae54fde72f228d3b00fcc3417faa1b5dc9"
        ],
        [
            "simpl in |- *; ring.",
            "VernacExtend",
            "dbea56eab9f20d9ab08eaf0f2769e833b9098d51"
        ],
        [
            "rewrite <- Rmult_assoc; rewrite Rinv_r; auto with real.",
            "VernacExtend",
            "73b376abc8ad398fd4821a9df706554fe65a0769"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Theorem div2IsBetween : forall p min max : float, Fbounded b p -> isMin b radix (/ 2%nat * p) min -> isMax b radix (/ 2%nat * p) max -> p = (min + max)%R :>R.",
            "VernacStartTheoremProof",
            "bdc7af2c42c26ea3d509ceded2ef2561a9e1881c"
        ],
        [
            "intros p min max H' H'0 H'1; case (Rle_or_lt 0 p); intros H'2.",
            "VernacExtend",
            "64df6a8020fab990142329cc56d0695987909566"
        ],
        [
            "apply div2IsBetweenPos; auto.",
            "VernacExtend",
            "b827fb5baa1900a637d25316e1c651e8774cc9cd"
        ],
        [
            "cut (forall x y : R, (- x)%R = (- y)%R -> x = y); [ intros H'3; apply H'3; clear H'3 | idtac ].",
            "VernacExtend",
            "f1878939c826f52f12efa7bb0c7cf853d5ef7ff4"
        ],
        [
            "replace (- (min + max))%R with (- max + - min)%R; [ idtac | ring ].",
            "VernacExtend",
            "3590f43c2484eb7f18ce0c0ffd276c69e2c4bcc4"
        ],
        [
            "repeat rewrite <- (Fopp_correct radix); auto with float.",
            "VernacExtend",
            "fed798d37d294411a9375bef1054ad9d7ee8671f"
        ],
        [
            "apply div2IsBetweenPos; auto with float.",
            "VernacExtend",
            "4b49588d601aedbb56f458e3be7df9a536c7203f"
        ],
        [
            "rewrite (Fopp_correct radix); auto.",
            "VernacExtend",
            "03e6f5942331ba790a679453e264f3137fcc3b56"
        ],
        [
            "replace 0%R with (-0)%R; try apply Rlt_le; auto with real.",
            "VernacExtend",
            "603dbd924aed3a754a32f65a15988ee194f049b6"
        ],
        [
            "replace (/ 2%nat * Fopp p)%R with (- (/ 2%nat * p))%R; auto with float.",
            "VernacExtend",
            "f8853f532686c7785907bbcd636b83e04a10a84c"
        ],
        [
            "rewrite (Fopp_correct radix); auto; fold FtoRradix; ring.",
            "VernacExtend",
            "f0ede6ae5d79ef84155ecf5d45818a85a3f6fa1d"
        ],
        [
            "replace (/ 2%nat * Fopp p)%R with (- (/ 2%nat * p))%R; auto with float.",
            "VernacExtend",
            "f8853f532686c7785907bbcd636b83e04a10a84c"
        ],
        [
            "rewrite (Fopp_correct radix); auto; fold FtoRradix;ring.",
            "VernacExtend",
            "f0ede6ae5d79ef84155ecf5d45818a85a3f6fa1d"
        ],
        [
            "intros x y H'3; rewrite <- (Ropp_involutive x); rewrite <- (Ropp_involutive y); rewrite H'3; auto.",
            "VernacExtend",
            "0ef3da26ef07584a141d6c5b5ad3ec12595c058c"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Theorem RoundedModeMultAbs : forall P, RoundedModeP b radix P -> forall (r : R) (q q' : float), P r q -> Fbounded b q' -> (Rabs r <= radix * q')%R -> (Rabs q <= radix * q')%R.",
            "VernacStartTheoremProof",
            "e17788ade81f7578e9a280521fd950b39b621915"
        ],
        [
            "intros P H' r q q' H'0 H'1 H'2.",
            "VernacExtend",
            "492971cc62b495bd2e03c579d1f879c4da640e15"
        ],
        [
            "case (Rle_or_lt 0 r); intros Rl0.",
            "VernacExtend",
            "76a59b551780307a64f0c3d8f163da37693e5254"
        ],
        [
            "rewrite Rabs_right; auto.",
            "VernacExtend",
            "b1779d7d605b07cf96f8be33fdef3339b6652757"
        ],
        [
            "apply RoundedModeMult with (P := P) (r := r); auto.",
            "VernacExtend",
            "b086f8f436059e0d0be62a13f47b898736725e6e"
        ],
        [
            "rewrite <- (Rabs_right r); auto with real.",
            "VernacExtend",
            "e7ba66539a2d0c2441d237d8229517e755cc9514"
        ],
        [
            "apply Rle_ge; apply RleRoundedR0 with (P := P) (r := r); auto.",
            "VernacExtend",
            "29dab4795d3bd149d20a487394f7c7f36c56cb5a"
        ],
        [
            "rewrite Faux.Rabsolu_left1; auto.",
            "VernacExtend",
            "cdfb2996338b3a1e58065e7b9fa29cb7224ffecf"
        ],
        [
            "replace (radix * q')%R with (- (radix * - q'))%R; [ apply Ropp_le_contravar | ring ].",
            "VernacExtend",
            "5f807127c53547b386e781404987994137a8cc3c"
        ],
        [
            "rewrite <- (Fopp_correct radix).",
            "VernacExtend",
            "371079b87088c94d825e5ae96e6c7d5d0ba832c0"
        ],
        [
            "apply RoundedModeMultLess with (P := P) (r := r); auto.",
            "VernacExtend",
            "297461687446d11a031337461a7ce79f4a53b5ef"
        ],
        [
            "apply oppBounded; auto.",
            "VernacExtend",
            "6e68d2122eeea082741ca4e279707ce0511c71ef"
        ],
        [
            "unfold FtoRradix in |- *; rewrite Fopp_correct.",
            "VernacExtend",
            "c3c7ad16a924a974f39fb2584a800e7199b0444e"
        ],
        [
            "rewrite <- (Ropp_involutive r).",
            "VernacExtend",
            "cbc81d890888d09f9d795cc7d43b35a4a68248ee"
        ],
        [
            "replace (radix * - FtoR radix q')%R with (- (radix * q'))%R; [ apply Ropp_le_contravar | fold FtoRradix;ring ]; auto.",
            "VernacExtend",
            "5b3367ab5f16d7a6dacbd48f96f8a3512be26dda"
        ],
        [
            "rewrite <- (Faux.Rabsolu_left1 r); auto.",
            "VernacExtend",
            "ee4e09d7e885ccb485e5e2773df637def8fc7136"
        ],
        [
            "apply Rlt_le; auto.",
            "VernacExtend",
            "4003e3e1c449ee89cad9e953d0a562db8235648c"
        ],
        [
            "apply RleRoundedLessR0 with (P := P) (r := r); auto.",
            "VernacExtend",
            "30978dd5c67d0d70306bedc8ada49c7fb1933c4d"
        ],
        [
            "apply Rlt_le; auto.",
            "VernacExtend",
            "4003e3e1c449ee89cad9e953d0a562db8235648c"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Theorem isMinComp : forall (r1 r2 : R) (min max : float), isMin b radix r1 min -> isMax b radix r1 max -> (min < r2)%R -> (r2 < max)%R -> isMin b radix r2 min.",
            "VernacStartTheoremProof",
            "e160af48ba89d917fa5e33e6a6d6d1a9400342cb"
        ],
        [
            "intros r1 r2 min max H' H'0 H'1 H'2; split.",
            "VernacExtend",
            "55d8b32d6f687ff4efb3e2f5bebe298330c517d3"
        ],
        [
            "case H'; auto.",
            "VernacExtend",
            "ebc5b3ac68f03e20b8a194319f607aaad1bf60b4"
        ],
        [
            "split.",
            "VernacExtend",
            "55abc140132bd88981001ac656020469a8d503eb"
        ],
        [
            "apply Rlt_le; auto.",
            "VernacExtend",
            "4003e3e1c449ee89cad9e953d0a562db8235648c"
        ],
        [
            "intros f H'3 H'4.",
            "VernacExtend",
            "89d3e6d109fd6702f8706bf77c9b9228dfee3e62"
        ],
        [
            "case H'; auto.",
            "VernacExtend",
            "ebc5b3ac68f03e20b8a194319f607aaad1bf60b4"
        ],
        [
            "intros H'5 H'6; elim H'6; intros H'7 H'8; apply H'8; clear H'6; auto.",
            "VernacExtend",
            "936ee44fe9e60d1d0c8396680cf2723afabfac55"
        ],
        [
            "case (Rle_or_lt (FtoR radix f) r1); auto; intros C1.",
            "VernacExtend",
            "fc1a4eebf9d712b9ceb2b333d2bbd1374ae591fc"
        ],
        [
            "absurd (FtoR radix f < max)%R.",
            "VernacExtend",
            "ae76d4f1b9dc909e9ee5e6455666fc144c3a7951"
        ],
        [
            "apply Rle_not_lt.",
            "VernacExtend",
            "1f0f6b47a7d49626d97b2585f7610e291096035d"
        ],
        [
            "case H'0.",
            "VernacExtend",
            "0b7a0c96a71e8cd9464b13f3d81301c6b0f41fd5"
        ],
        [
            "intros H'6 H'9; elim H'9; intros H'10 H'11; apply H'11; clear H'9; auto.",
            "VernacExtend",
            "a2cbf6679aaf191f48ab27438796ab9cf4afe271"
        ],
        [
            "apply Rlt_le; auto.",
            "VernacExtend",
            "4003e3e1c449ee89cad9e953d0a562db8235648c"
        ],
        [
            "apply Rle_lt_trans with (2 := H'2); auto.",
            "VernacExtend",
            "42a0bc1653b909e193984be70b8eed2d9c4d9021"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Theorem isMaxComp : forall (r1 r2 : R) (min max : float), isMin b radix r1 min -> isMax b radix r1 max -> (min < r2)%R -> (r2 < max)%R -> isMax b radix r2 max.",
            "VernacStartTheoremProof",
            "6ffdf04e8f6197d31c1e7c41262628ab3e30f012"
        ],
        [
            "intros r1 r2 min max H' H'0 H'1 H'2; split.",
            "VernacExtend",
            "55d8b32d6f687ff4efb3e2f5bebe298330c517d3"
        ],
        [
            "case H'0; auto.",
            "VernacExtend",
            "c95954a4912ccfdd6e4780b3eecd4f9a4fbca076"
        ],
        [
            "split.",
            "VernacExtend",
            "55abc140132bd88981001ac656020469a8d503eb"
        ],
        [
            "apply Rlt_le; auto.",
            "VernacExtend",
            "4003e3e1c449ee89cad9e953d0a562db8235648c"
        ],
        [
            "intros f H'3 H'4.",
            "VernacExtend",
            "89d3e6d109fd6702f8706bf77c9b9228dfee3e62"
        ],
        [
            "case H'0; auto.",
            "VernacExtend",
            "c95954a4912ccfdd6e4780b3eecd4f9a4fbca076"
        ],
        [
            "intros H'5 H'6; elim H'6; intros H'7 H'8; apply H'8; clear H'6; auto.",
            "VernacExtend",
            "936ee44fe9e60d1d0c8396680cf2723afabfac55"
        ],
        [
            "case (Rle_or_lt r1 (FtoR radix f)); auto; intros C1.",
            "VernacExtend",
            "8030f9ee13b7c221db55a1944ea96a06ef836d8d"
        ],
        [
            "absurd (min < FtoR radix f)%R.",
            "VernacExtend",
            "e85478d267fbc65b9d336da5023bc05fa6535dfb"
        ],
        [
            "apply Rle_not_lt.",
            "VernacExtend",
            "1f0f6b47a7d49626d97b2585f7610e291096035d"
        ],
        [
            "case H'.",
            "VernacExtend",
            "59f58feee27b0b33473890c47947a750059972d7"
        ],
        [
            "intros H'6 H'9; elim H'9; intros H'10 H'11; apply H'11; clear H'9; auto.",
            "VernacExtend",
            "a2cbf6679aaf191f48ab27438796ab9cf4afe271"
        ],
        [
            "apply Rlt_le; auto.",
            "VernacExtend",
            "4003e3e1c449ee89cad9e953d0a562db8235648c"
        ],
        [
            "apply Rlt_le_trans with (1 := H'1); auto.",
            "VernacExtend",
            "761a9937a9e336d727f3ba4395a7e9930796f6c8"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Theorem roundedModeLessMult : forall (P : R -> float -> Prop) (p : float) (r : R), RoundedModeP b radix P -> P r p -> (Float 1%nat (- dExp b) <= r)%R -> (p <= radix * r)%R.",
            "VernacStartTheoremProof",
            "aa22bdc3328fd5eb5b2a59bdb4e85fb759f560d2"
        ],
        [
            "intros P p r H' H'0 H'1.",
            "VernacExtend",
            "1e88af9e79ac1309240e9db62c48e7e5871a2023"
        ],
        [
            "cut (0 < Float 1%nat (- dExp b))%R; [ intros Rl0 | unfold FtoRradix, FtoR in |- *; simpl in |- *; rewrite Rmult_1_l; auto with real arith ].",
            "VernacExtend",
            "cf92eb2e039ae4540f60270af9eba4ef5db14a88"
        ],
        [
            "cut (0 < r)%R; [ intros Rl1 | apply Rlt_le_trans with (1 := Rl0) ]; auto.",
            "VernacExtend",
            "106d503351fd25e6964643a951f2ea5d3be80ba3"
        ],
        [
            "cut (0 <= r)%R; [ intros Rl2 | apply Rlt_le; auto ].",
            "VernacExtend",
            "6165cc86004b6a78487886c75a51d9670dca022b"
        ],
        [
            "case H'.",
            "VernacExtend",
            "59f58feee27b0b33473890c47947a750059972d7"
        ],
        [
            "intros H'2 H'3; Elimc H'3; intros H'3 H'4; Elimc H'4; intros H'4 H'5; case (H'4 r p); auto; intros H'6.",
            "VernacExtend",
            "ad3fa6d4ad043bd1e0e2e22dfb8f296d26e201d6"
        ],
        [
            "apply Rle_trans with r; auto with real.",
            "VernacExtend",
            "b9d69bb8a32d2fa4dcfedbb4f9e240535d8d36e6"
        ],
        [
            "apply isMin_inv1 with (1 := H'6).",
            "VernacExtend",
            "f19fff8e295b0d7b5620082e400b919648b3d417"
        ],
        [
            "rewrite Rmult_comm; pattern r at 1 in |- *; replace r with (r * 1%nat)%R; [ apply Rmult_le_compat_l | simpl; ring ]; auto with real arith.",
            "VernacExtend",
            "6be5423c0f0870a0e4e89bc7ffd4bde593435512"
        ],
        [
            "case (MinEx b radix precision) with (r := r); auto with arith; intros min Hmin.",
            "VernacExtend",
            "0c2fbd26b366f8feefedbf876fde853a4106254a"
        ],
        [
            "cut (Fbounded b (Float (Fnum min) (Zsucc (Fexp min)))); [ intros F2 | idtac ].",
            "VernacExtend",
            "499e49daf1d25fa70d205e8cdfc1604839690345"
        ],
        [
            "cut (FtoRradix (Float (Fnum min) (Zsucc (Fexp min))) = (radix * min)%R :>R); [ intros F2Eq | idtac ].",
            "VernacExtend",
            "02ac824871bd9ea29dc8b526a5a7097727500b4e"
        ],
        [
            "apply Rle_trans with (FtoRradix (Float (Fnum min) (Zsucc (Fexp min)))).",
            "VernacExtend",
            "a82c188cf77df08e5d0e48075c53de68e255e91d"
        ],
        [
            "case H'6.",
            "VernacExtend",
            "ef600d2c694f3e88509e30b301a58446bace9eab"
        ],
        [
            "intros H'7 H'8; elim H'8; intros H'9 H'10; apply H'10; clear H'8; auto.",
            "VernacExtend",
            "0ecd6593bb1a824fb3db5e1231f28620bfadbe24"
        ],
        [
            "case (Rle_or_lt r (Float (Fnum min) (Zsucc (Fexp min)))); auto; intros Rlt0.",
            "VernacExtend",
            "bd483908ba5e2969e7f90264a475b3abf4508f12"
        ],
        [
            "absurd (Float (Fnum min) (Zsucc (Fexp min)) <= min)%R.",
            "VernacExtend",
            "710eac1b8ab43383e49ed7ef9f8d2ec95471c3ef"
        ],
        [
            "apply Rgt_not_le.",
            "VernacExtend",
            "be8a1e7f9ca2303d5ddda077b45cc15db6c6b3ce"
        ],
        [
            "rewrite F2Eq; auto with real.",
            "VernacExtend",
            "51e276912063ace409aeaf689e1feed56a273f2d"
        ],
        [
            "rewrite Rmult_comm.",
            "VernacExtend",
            "fd520335d31c715c2f686e2bdc0b380c493b04c0"
        ],
        [
            "pattern (FtoRradix min) at 2 in |- *; replace (FtoRradix min) with (min * 1%nat)%R; auto with real.",
            "VernacExtend",
            "659b36b3182801ce09b13bf8ee4c537cff19d5eb"
        ],
        [
            "red in |- *; apply Rmult_lt_compat_l; auto with real arith.",
            "VernacExtend",
            "3de6cd13aa68da2aa4deb214917d2ebde0360b81"
        ],
        [
            "case (RleMinR0 r min); auto.",
            "VernacExtend",
            "14ee8f09f7ebe2a7665fc14d94db4a6606f2d20b"
        ],
        [
            "intros H'8; case H'1.",
            "VernacExtend",
            "3ba6ca2a343a6bd78cfb1218ef147582d9a54a56"
        ],
        [
            "intros H'11; absurd (Float 1%nat (- dExp b) <= min)%R.",
            "VernacExtend",
            "5d95543e9a17c3f48b6e73d0bd439e9198d74088"
        ],
        [
            "apply Rgt_not_le; auto.",
            "VernacExtend",
            "61286dd899aac2ebf8c8abffef84bd9d6a76b5ed"
        ],
        [
            "rewrite <- H'8; auto.",
            "VernacExtend",
            "04b29ebc13e42900d3632a908de79773f2b0f74b"
        ],
        [
            "apply (MonotoneMin b radix) with (p := FtoRradix (Float 1%nat (- dExp b))) (q := r); auto.",
            "VernacExtend",
            "b6da53f1021006973d94ef9b5e55dba1a7f868bd"
        ],
        [
            "apply (RoundedModeProjectorIdem (isMin b radix)); auto.",
            "VernacExtend",
            "0edc29085f3d31bf22294a533fc2f6227c914ad0"
        ],
        [
            "apply MinRoundedModeP with (precision := precision); auto.",
            "VernacExtend",
            "9c713ab984e57490a2425136b2f02c1e3b6ef6ba"
        ],
        [
            "repeat split.",
            "VernacExtend",
            "7968f2448e3e51b1de42f5c433248f4a827b4da2"
        ],
        [
            "simpl in |- *; auto with zarith.",
            "VernacExtend",
            "61d3cdc6299cf8abf87703c074ca4503f0f27a12"
        ],
        [
            "apply (vNumbMoreThanOne radix) with (precision := precision); auto with zarith.",
            "VernacExtend",
            "c29f7cde7313a0159f5e6e723b15563e2dc77df2"
        ],
        [
            "simpl in |- *; auto with zarith.",
            "VernacExtend",
            "61d3cdc6299cf8abf87703c074ca4503f0f27a12"
        ],
        [
            "intros H'11; absurd (min = Float 1%nat (- dExp b) :>R).",
            "VernacExtend",
            "26fed52fa74f10ca4492f122e92aac0c72a4b921"
        ],
        [
            "rewrite <- H'8.",
            "VernacExtend",
            "7451294d3b577094784c0c9e508a760676000f26"
        ],
        [
            "apply Rlt_dichotomy_converse; left; auto.",
            "VernacExtend",
            "de7283b8cfce3ef2e0ae4e3dbc67a172e97647d4"
        ],
        [
            "apply (MinUniqueP b radix r); auto.",
            "VernacExtend",
            "95d995256e91da41a7aced68c4d219299c106fec"
        ],
        [
            "rewrite <- H'11.",
            "VernacExtend",
            "d424c482c9836749304e1bf74488bd7731e2d289"
        ],
        [
            "apply (RoundedModeProjectorIdem (isMin b radix)); auto.",
            "VernacExtend",
            "0edc29085f3d31bf22294a533fc2f6227c914ad0"
        ],
        [
            "apply MinRoundedModeP with (precision := precision); auto.",
            "VernacExtend",
            "9c713ab984e57490a2425136b2f02c1e3b6ef6ba"
        ],
        [
            "repeat split.",
            "VernacExtend",
            "7968f2448e3e51b1de42f5c433248f4a827b4da2"
        ],
        [
            "simpl in |- *; auto with zarith.",
            "VernacExtend",
            "61d3cdc6299cf8abf87703c074ca4503f0f27a12"
        ],
        [
            "apply (vNumbMoreThanOne radix) with (precision := precision); auto with zarith.",
            "VernacExtend",
            "c29f7cde7313a0159f5e6e723b15563e2dc77df2"
        ],
        [
            "simpl in |- *; auto with zarith.",
            "VernacExtend",
            "61d3cdc6299cf8abf87703c074ca4503f0f27a12"
        ],
        [
            "case Hmin.",
            "VernacExtend",
            "86c8512e01aa1d7df63b5091b527667c724250f7"
        ],
        [
            "intros H'8 H'11; elim H'11; intros H'12 H'13; apply H'13; clear H'11; auto.",
            "VernacExtend",
            "724b0a62e697f33602a84430d5fd1ad2b45ca597"
        ],
        [
            "apply Rlt_le; auto.",
            "VernacExtend",
            "4003e3e1c449ee89cad9e953d0a562db8235648c"
        ],
        [
            "rewrite F2Eq.",
            "VernacExtend",
            "3e7ecdcb44f43e48099b9fb022689609d9058b09"
        ],
        [
            "apply Rmult_le_compat_l; auto with real arith.",
            "VernacExtend",
            "c67ac6a62458e649e844e549689a7d3f43885a2a"
        ],
        [
            "replace 0%R with (INR 0); auto with real arith.",
            "VernacExtend",
            "3caed965951659080cf394dcb353db3f9bd924fa"
        ],
        [
            "apply isMin_inv1 with (1 := Hmin).",
            "VernacExtend",
            "38c103b5e86e13bdc28791ffb7f48806a346f849"
        ],
        [
            "unfold FtoRradix, FtoR in |- *; simpl in |- *.",
            "VernacExtend",
            "85a3da1582165d92ceb7faef707de88822bccf1a"
        ],
        [
            "rewrite powerRZ_Zs; auto with real zarith; ring.",
            "VernacExtend",
            "055e37c209e2a0ca9dc7ef6b05e8ffefe2fb31ed"
        ],
        [
            "cut (Fbounded b min); [ unfold Fbounded in |- *; intros Fb0 | case Hmin; auto ].",
            "VernacExtend",
            "da2b14d1d3279aa4667fe160568357bf66dc0153"
        ],
        [
            "elim Fb0; intros H H0; auto.",
            "VernacExtend",
            "ccf6ecd3055630b937a32a717a4532defa9e9c3c"
        ],
        [
            "repeat (split; simpl in |- *); auto.",
            "VernacExtend",
            "6c7cc0141a9157a1a9e39ad508bdd952f5c1f54c"
        ],
        [
            "apply Zle_trans with (Fexp min); auto with zarith.",
            "VernacExtend",
            "8b358ae3d8cef70bd96f7738199ce36592a00495"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Theorem roundedModeMoreMult : forall (P : R -> float -> Prop) (p : float) (r : R), RoundedModeP b radix P -> P r p -> (r <= Float (- 1%nat) (- dExp b))%R -> (radix * r <= p)%R.",
            "VernacStartTheoremProof",
            "a06a046e47977ad40913058a47fbfafdcf0633ac"
        ],
        [
            "intros P p r H' H'0 H'1.",
            "VernacExtend",
            "1e88af9e79ac1309240e9db62c48e7e5871a2023"
        ],
        [
            "cut (Float (- 1%nat) (- dExp b) < 0)%R; [ intros Rl0 | unfold FtoRradix, FtoR in |- *; simpl in |- *; unfold IZR at 1; rewrite Ropp_mult_distr_l_reverse; rewrite Rmult_1_l; auto with real arith ].",
            "VernacExtend",
            "b53420b3a1a0e298f6da96f94894bf4d2f560d3e"
        ],
        [
            "2: replace 0%R with (-0)%R; auto with real arith; ring.",
            "VernacExtend",
            "bcd717c6419d5fd6cb9a5020bfc479cb0d5236e2"
        ],
        [
            "cut (r < 0)%R; [ intros Rl1 | apply Rle_lt_trans with (2 := Rl0) ]; auto.",
            "VernacExtend",
            "0a4d02b11e1c324ef30bc529afb7ce7b2e3882a4"
        ],
        [
            "cut (r <= 0)%R; [ intros Rl2 | apply Rlt_le; auto ].",
            "VernacExtend",
            "1b1593c369c14928402e92889917166b30fbf6a5"
        ],
        [
            "case H'.",
            "VernacExtend",
            "59f58feee27b0b33473890c47947a750059972d7"
        ],
        [
            "intros H'2 H'3; Elimc H'3; intros H'3 H'4; Elimc H'4; intros H'4 H'5; case (H'4 r p); auto; intros H'6.",
            "VernacExtend",
            "ad3fa6d4ad043bd1e0e2e22dfb8f296d26e201d6"
        ],
        [
            "case (MaxEx b radix precision) with (r := r); auto with arith; intros max Hmax.",
            "VernacExtend",
            "864d029a1ed76acb0d56d74d387c18f29f47f0b7"
        ],
        [
            "cut (Fbounded b (Float (Fnum max) (Zsucc (Fexp max)))); [ intros F2 | idtac ].",
            "VernacExtend",
            "6c3aa7370b386ca7949e23bf2493ad235182feda"
        ],
        [
            "cut (FtoRradix (Float (Fnum max) (Zsucc (Fexp max))) = (radix * max)%R :>R); [ intros F2Eq | idtac ].",
            "VernacExtend",
            "217010fb0cf1ebe75e4fa96de4292af405e8f007"
        ],
        [
            "apply Rle_trans with (FtoRradix (Float (Fnum max) (Zsucc (Fexp max)))).",
            "VernacExtend",
            "a9287e2ca51340b3400517cdc0ed4b63faa92ad4"
        ],
        [
            "rewrite F2Eq; auto with real.",
            "VernacExtend",
            "51e276912063ace409aeaf689e1feed56a273f2d"
        ],
        [
            "apply Rmult_le_compat_l; auto with real arith.",
            "VernacExtend",
            "c67ac6a62458e649e844e549689a7d3f43885a2a"
        ],
        [
            "replace 0%R with (INR 0); auto with real arith.",
            "VernacExtend",
            "3caed965951659080cf394dcb353db3f9bd924fa"
        ],
        [
            "apply isMax_inv1 with (1 := Hmax); auto.",
            "VernacExtend",
            "1fbb3a7a7dd58e14f2d3ec04b711b7d494fed186"
        ],
        [
            "case H'6.",
            "VernacExtend",
            "ef600d2c694f3e88509e30b301a58446bace9eab"
        ],
        [
            "intros H'7 H'8; elim H'8; intros H'9 H'10; apply H'10; clear H'8; auto.",
            "VernacExtend",
            "0ecd6593bb1a824fb3db5e1231f28620bfadbe24"
        ],
        [
            "case (Rle_or_lt (Float (Fnum max) (Zsucc (Fexp max))) r); auto; intros Rlt0.",
            "VernacExtend",
            "884e0dba46250340d42b5de3316f02a546b84651"
        ],
        [
            "absurd (max <= Float (Fnum max) (Zsucc (Fexp max)))%R.",
            "VernacExtend",
            "70fe0908ffe5caa2d5efb43dd9e1be42d33b6787"
        ],
        [
            "apply Rgt_not_le.",
            "VernacExtend",
            "be8a1e7f9ca2303d5ddda077b45cc15db6c6b3ce"
        ],
        [
            "rewrite F2Eq.",
            "VernacExtend",
            "3e7ecdcb44f43e48099b9fb022689609d9058b09"
        ],
        [
            "replace (radix * max)%R with (- (- max * radix))%R; [ idtac | ring ].",
            "VernacExtend",
            "efc2e771032e6995efe205a1a9bfa6123024e862"
        ],
        [
            "pattern (FtoRradix max) at 1 in |- *; replace (FtoRradix max) with (- (- max * 1%nat))%R; [ idtac | simpl in |- *; ring ].",
            "VernacExtend",
            "940972a7837c5c8e6fe0ba0e029d2d76c22fd228"
        ],
        [
            "apply Ropp_lt_gt_contravar; apply Rmult_lt_compat_l; auto with real.",
            "VernacExtend",
            "af7a9f4a491ca7aa7500a67a4cf0fddbd8de7ed2"
        ],
        [
            "replace 0%R with (-0)%R; [ apply Ropp_lt_contravar | ring ].",
            "VernacExtend",
            "dec2ad0dc71aa63fe8e18e889022ad377737f451"
        ],
        [
            "case (RleMaxR0 r max); auto.",
            "VernacExtend",
            "edb076972af0cf50f22fdb65aa62e3725a616e0d"
        ],
        [
            "intros H'8; case H'1.",
            "VernacExtend",
            "3ba6ca2a343a6bd78cfb1218ef147582d9a54a56"
        ],
        [
            "intros H'11; absurd (max <= Float (- 1%nat) (- dExp b))%R.",
            "VernacExtend",
            "acc99df9f6752a984f945fa914fe0cb0d65a545d"
        ],
        [
            "apply Rgt_not_le; auto.",
            "VernacExtend",
            "61286dd899aac2ebf8c8abffef84bd9d6a76b5ed"
        ],
        [
            "rewrite H'8; auto.",
            "VernacExtend",
            "037d4f56ea2a27320687f250ad6e737f5ccfd838"
        ],
        [
            "apply (MonotoneMax b radix) with (q := FtoRradix (Float (- 1%nat) (- dExp b))) (p := r); auto.",
            "VernacExtend",
            "7b79ed1d579e4a0e70b91a99f7b8a6d6d7a1ed9d"
        ],
        [
            "apply (RoundedModeProjectorIdem (isMax b radix)); auto.",
            "VernacExtend",
            "b19c3fe14ba0060fc60c57b36c941971383b6bdb"
        ],
        [
            "apply MaxRoundedModeP with (precision := precision); auto.",
            "VernacExtend",
            "57af07bc0167c3ae09328ee23083b26450f616a8"
        ],
        [
            "repeat split.",
            "VernacExtend",
            "7968f2448e3e51b1de42f5c433248f4a827b4da2"
        ],
        [
            "simpl in |- *; auto with zarith.",
            "VernacExtend",
            "61d3cdc6299cf8abf87703c074ca4503f0f27a12"
        ],
        [
            "apply (vNumbMoreThanOne radix) with (precision := precision); auto with zarith.",
            "VernacExtend",
            "c29f7cde7313a0159f5e6e723b15563e2dc77df2"
        ],
        [
            "simpl in |- *; auto with zarith.",
            "VernacExtend",
            "61d3cdc6299cf8abf87703c074ca4503f0f27a12"
        ],
        [
            "intros H'11; absurd (Float (- 1%nat) (- dExp b) = max :>R).",
            "VernacExtend",
            "af953abc59f785628d55f76ff5f57860e61f6226"
        ],
        [
            "rewrite H'8; auto.",
            "VernacExtend",
            "037d4f56ea2a27320687f250ad6e737f5ccfd838"
        ],
        [
            "apply Rlt_dichotomy_converse; left; auto.",
            "VernacExtend",
            "de7283b8cfce3ef2e0ae4e3dbc67a172e97647d4"
        ],
        [
            "apply (MaxUniqueP b radix r); auto.",
            "VernacExtend",
            "e7f9fe59643536edf68ff447c98287708dda6c53"
        ],
        [
            "rewrite H'11.",
            "VernacExtend",
            "30d0321952b284fdb1daa199eda11b81f800891a"
        ],
        [
            "apply (RoundedModeProjectorIdem (isMax b radix)); auto.",
            "VernacExtend",
            "b19c3fe14ba0060fc60c57b36c941971383b6bdb"
        ],
        [
            "apply MaxRoundedModeP with (precision := precision); auto.",
            "VernacExtend",
            "57af07bc0167c3ae09328ee23083b26450f616a8"
        ],
        [
            "repeat split.",
            "VernacExtend",
            "7968f2448e3e51b1de42f5c433248f4a827b4da2"
        ],
        [
            "simpl in |- *; auto with zarith.",
            "VernacExtend",
            "61d3cdc6299cf8abf87703c074ca4503f0f27a12"
        ],
        [
            "apply (vNumbMoreThanOne radix) with (precision := precision); auto with zarith.",
            "VernacExtend",
            "c29f7cde7313a0159f5e6e723b15563e2dc77df2"
        ],
        [
            "simpl in |- *; auto with zarith.",
            "VernacExtend",
            "61d3cdc6299cf8abf87703c074ca4503f0f27a12"
        ],
        [
            "case Hmax.",
            "VernacExtend",
            "4a6a553126228446516adb4027318a1ffe91e2cc"
        ],
        [
            "intros H'8 H'11; elim H'11; intros H'12 H'13; apply H'13; clear H'11; auto.",
            "VernacExtend",
            "724b0a62e697f33602a84430d5fd1ad2b45ca597"
        ],
        [
            "apply Rlt_le; auto.",
            "VernacExtend",
            "4003e3e1c449ee89cad9e953d0a562db8235648c"
        ],
        [
            "unfold FtoRradix, FtoR in |- *; simpl in |- *.",
            "VernacExtend",
            "85a3da1582165d92ceb7faef707de88822bccf1a"
        ],
        [
            "rewrite powerRZ_Zs; auto with real zarith; ring.",
            "VernacExtend",
            "055e37c209e2a0ca9dc7ef6b05e8ffefe2fb31ed"
        ],
        [
            "cut (Fbounded b max); [ unfold Fbounded in |- *; intros Fb0 | case Hmax; auto ].",
            "VernacExtend",
            "f3ab30520f429154054074c1fda621dc2e1dcae8"
        ],
        [
            "elim Fb0; intros H H0; repeat (split; simpl in |- *); auto.",
            "VernacExtend",
            "70540c6d9932d2bba2047b1832007b100d0bab4b"
        ],
        [
            "apply Zle_trans with (Fexp max); auto with zarith.",
            "VernacExtend",
            "f6e70a7414dc5ad2c38894c23093b2204fc3c7f8"
        ],
        [
            "apply Rle_trans with r; auto with real.",
            "VernacExtend",
            "b9d69bb8a32d2fa4dcfedbb4f9e240535d8d36e6"
        ],
        [
            "pattern r at 2 in |- *; replace r with (- (- r * 1%nat))%R; [ idtac | simpl; ring ].",
            "VernacExtend",
            "88fa3186b2a505091e3547e7096b2c7e81c6b1c0"
        ],
        [
            "replace (radix * r)%R with (- (- r * radix))%R; [ idtac | ring ].",
            "VernacExtend",
            "5f195db9a90edabce28e0ef7190bbc16486d7e1b"
        ],
        [
            "apply Ropp_le_contravar; apply Rmult_le_compat_l; auto with real arith.",
            "VernacExtend",
            "1e0691b167583c9dc00d5dd3ce0218f2669fbe10"
        ],
        [
            "replace 0%R with (-0)%R; auto with real arith.",
            "VernacExtend",
            "80daef98736e277216eab11d0d496b3565dc49c6"
        ],
        [
            "apply isMax_inv1 with (1 := H'6).",
            "VernacExtend",
            "841154c2fc23e1e5f1b7deb64e469163073cb585"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Theorem roundedModeAbsMult : forall (P : R -> float -> Prop) (p : float) (r : R), RoundedModeP b radix P -> P r p -> (Float 1%nat (- dExp b) <= Rabs r)%R -> (Rabs p <= radix * Rabs r)%R.",
            "VernacStartTheoremProof",
            "4a2f3d648060ef166417b54678139e8d533d50e0"
        ],
        [
            "intros P p r H' H'0 H'1; case (Rle_or_lt 0 r); intros H'2.",
            "VernacExtend",
            "98317544fdfa58b05a7581a40a72ea96076992b8"
        ],
        [
            "repeat rewrite Rabs_right; auto with real.",
            "VernacExtend",
            "acbc524ee08d51df0747101f806570b23d1c2cd0"
        ],
        [
            "apply roundedModeLessMult with (P := P); auto.",
            "VernacExtend",
            "f2bc2c847445d54a0bf784fbda288340d517bc26"
        ],
        [
            "rewrite <- (Rabs_right r); auto with real.",
            "VernacExtend",
            "e7ba66539a2d0c2441d237d8229517e755cc9514"
        ],
        [
            "apply Rle_ge; apply (RleRoundedR0 P) with (r := r); auto.",
            "VernacExtend",
            "c8843f36d824e6aa9ff1c254ff3adc68a434e911"
        ],
        [
            "repeat rewrite Faux.Rabsolu_left1; auto.",
            "VernacExtend",
            "e11c24e8ffe43271673891ae0aeb17a8a197300c"
        ],
        [
            "replace (radix * - r)%R with (- (radix * r))%R; [ apply Ropp_le_contravar | ring ].",
            "VernacExtend",
            "38981268505bbc715a3638f31ed002f8d15ef6a4"
        ],
        [
            "apply roundedModeMoreMult with (P := P); auto.",
            "VernacExtend",
            "eb210483af0d0631a74048cd9ba885fd2ef217f0"
        ],
        [
            "rewrite <- (Ropp_involutive r); rewrite <- (Faux.Rabsolu_left1 r); auto.",
            "VernacExtend",
            "7291ac0d15a7125bca15cef2bcc972a51e17198d"
        ],
        [
            "replace (Float (- 1%nat) (- dExp b)) with (Fopp (Float 1%nat (- dExp b))).",
            "VernacExtend",
            "50a08e22bd4344ad255a411992f6616fbb4723ba"
        ],
        [
            "unfold FtoRradix in |- *; rewrite Fopp_correct; auto with real.",
            "VernacExtend",
            "5806d51ffb537355f3b97b7dbadcb1cad937b8ce"
        ],
        [
            "simpl in |- *; auto.",
            "VernacExtend",
            "9b631374b1d3067f703fd99c5dc6e1e5c8405957"
        ],
        [
            "apply Rlt_le; auto.",
            "VernacExtend",
            "4003e3e1c449ee89cad9e953d0a562db8235648c"
        ],
        [
            "apply Rlt_le; auto.",
            "VernacExtend",
            "4003e3e1c449ee89cad9e953d0a562db8235648c"
        ],
        [
            "apply (RleRoundedLessR0 P) with (r := r); auto.",
            "VernacExtend",
            "56855c1f2da97f39d6ce408637674e91d86b0a8b"
        ],
        [
            "apply Rlt_le; auto.",
            "VernacExtend",
            "4003e3e1c449ee89cad9e953d0a562db8235648c"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Theorem RleBoundRoundl : forall P, RoundedModeP b radix P -> forall (p q : float) (r : R), Fbounded b p -> (p <= r)%R -> P r q -> (p <= q)%R.",
            "VernacStartTheoremProof",
            "9049fb669c5c0652007359b1b7846c6d30b06159"
        ],
        [
            "intros P H' p q r H'0 H'1 H'2; case H'1; intros H'3.",
            "VernacExtend",
            "18895e8417fd9968209aea6976a88f9d0a5a96a8"
        ],
        [
            "cut (MonotoneP radix P); [ intros Mn | apply RoundedModeP_inv4 with (1 := H'); auto ].",
            "VernacExtend",
            "b8b6ba48c8465dac1cd258350b711138b0e41871"
        ],
        [
            "apply (Mn p r); auto.",
            "VernacExtend",
            "2376655a87b6feadf636724446b2d151a6817352"
        ],
        [
            "apply RoundedModeProjectorIdem with (P := P); auto.",
            "VernacExtend",
            "241e11a5ff7aa615bae1fbffdb3d9d7e25413c92"
        ],
        [
            "rewrite RoundedModeProjectorIdemEq with (P := P) (p := p) (q := q); auto with real.",
            "VernacExtend",
            "9ae787c48532da3150e831b62142a548ffc3b217"
        ],
        [
            "cut (CompatibleP b radix P); [ intros Cp | apply RoundedModeP_inv2 with (1 := H'); auto ].",
            "VernacExtend",
            "2ca124a567e390b257fb21e0b477d3edc60232f2"
        ],
        [
            "apply (Cp r p q); auto.",
            "VernacExtend",
            "8b5580b6892d1b3fbacefd150f9c991203226421"
        ],
        [
            "apply RoundedModeBounded with (P := P) (r := r); auto.",
            "VernacExtend",
            "fdf71d1d1c50548b71cff0572744e94aec5ff713"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Theorem RleBoundRoundr : forall P, RoundedModeP b radix P -> forall (p q : float) (r : R), Fbounded b p -> (r <= p)%R -> P r q -> (q <= p)%R.",
            "VernacStartTheoremProof",
            "e89fd427e0ad05cab00b915b1508f49e11311408"
        ],
        [
            "intros P H' p q r H'0 H'1 H'2; case H'1; intros H'3.",
            "VernacExtend",
            "18895e8417fd9968209aea6976a88f9d0a5a96a8"
        ],
        [
            "cut (MonotoneP radix P); [ intros Mn | apply RoundedModeP_inv4 with (1 := H'); auto ].",
            "VernacExtend",
            "b8b6ba48c8465dac1cd258350b711138b0e41871"
        ],
        [
            "apply (Mn r p); auto.",
            "VernacExtend",
            "b05f60fc9ae0e741c459dbf5c3d6c18ad1715a5e"
        ],
        [
            "apply RoundedModeProjectorIdem with (P := P); auto.",
            "VernacExtend",
            "241e11a5ff7aa615bae1fbffdb3d9d7e25413c92"
        ],
        [
            "rewrite RoundedModeProjectorIdemEq with (P := P) (p := p) (q := q); auto with real.",
            "VernacExtend",
            "9ae787c48532da3150e831b62142a548ffc3b217"
        ],
        [
            "cut (CompatibleP b radix P); [ intros Cp | apply RoundedModeP_inv2 with (1 := H'); auto ].",
            "VernacExtend",
            "2ca124a567e390b257fb21e0b477d3edc60232f2"
        ],
        [
            "apply (Cp r p q); auto.",
            "VernacExtend",
            "8b5580b6892d1b3fbacefd150f9c991203226421"
        ],
        [
            "apply RoundedModeBounded with (P := P) (r := r); auto.",
            "VernacExtend",
            "fdf71d1d1c50548b71cff0572744e94aec5ff713"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Theorem RoundAbsMonotoner : forall (P : R -> float -> Prop) (p : R) (q r : float), RoundedModeP b radix P -> Fbounded b r -> P p q -> (Rabs p <= r)%R -> (Rabs q <= r)%R.",
            "VernacStartTheoremProof",
            "f98559c1c6a1bf982494a2250ced44a0fa13274b"
        ],
        [
            "intros P p q r H' H'0 H'1 H'2.",
            "VernacExtend",
            "58dcf3d57b399327d41d57937cfd42c549570ac4"
        ],
        [
            "case (Rle_or_lt 0 p); intros Rl1.",
            "VernacExtend",
            "aa6be71cc2b374664054155571961cb178d1e8df"
        ],
        [
            "rewrite Rabs_right; auto with real.",
            "VernacExtend",
            "e24d8a510a5d2d71a1265c4c7b5d2f745fcc98e0"
        ],
        [
            "apply RleBoundRoundr with (P := P) (r := p); auto with real.",
            "VernacExtend",
            "79535e96c3a61fc68c82b062741a30201713dba0"
        ],
        [
            "rewrite <- (Rabs_right p); auto with real.",
            "VernacExtend",
            "8d290fcfc86394237ea623ee2084cb3f0e510411"
        ],
        [
            "apply Rle_ge; apply RleRoundedR0 with (P := P) (r := p); auto.",
            "VernacExtend",
            "12d880bf349bdc0fefecdd48b00ac735df187bb7"
        ],
        [
            "rewrite Faux.Rabsolu_left1; auto.",
            "VernacExtend",
            "cdfb2996338b3a1e58065e7b9fa29cb7224ffecf"
        ],
        [
            "rewrite <- (Ropp_involutive r); apply Ropp_le_contravar.",
            "VernacExtend",
            "28f21ffb85703baa31aff905bd0c7973166858a4"
        ],
        [
            "rewrite <- (Fopp_correct radix); auto.",
            "VernacExtend",
            "3858c7e2e159c83156880ea034645e996a4b0b20"
        ],
        [
            "apply RleBoundRoundl with (P := P) (r := p); auto with float.",
            "VernacExtend",
            "8d2ba50722706aee81433d43c2f8296af47b3d27"
        ],
        [
            "rewrite (Fopp_correct radix); rewrite <- (Ropp_involutive p); rewrite <- (Faux.Rabsolu_left1 p); auto with real; apply Rlt_le; auto.",
            "VernacExtend",
            "b23f30313bf596812192046bbedd4f23530f60a3"
        ],
        [
            "apply RleRoundedLessR0 with (P := P) (r := p); auto; apply Rlt_le; auto.",
            "VernacExtend",
            "ba16d1adf990797c1eb641dda7d82f72aa812141"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Theorem RoundAbsMonotonel : forall (P : R -> float -> Prop) (p : R) (q r : float), RoundedModeP b radix P -> Fbounded b r -> P p q -> (r <= Rabs p)%R -> (r <= Rabs q)%R.",
            "VernacStartTheoremProof",
            "aca218b873077e4a5d42ee67ae818cdca369b0db"
        ],
        [
            "intros P p q r H' H'0 H'1 H'2.",
            "VernacExtend",
            "58dcf3d57b399327d41d57937cfd42c549570ac4"
        ],
        [
            "case (Rle_or_lt 0 p); intros Rl1.",
            "VernacExtend",
            "aa6be71cc2b374664054155571961cb178d1e8df"
        ],
        [
            "rewrite Rabs_right; auto.",
            "VernacExtend",
            "b1779d7d605b07cf96f8be33fdef3339b6652757"
        ],
        [
            "apply RleBoundRoundl with (P := P) (r := p); auto.",
            "VernacExtend",
            "9ab43849ce771bcb5bbabe41290c0facb07f6490"
        ],
        [
            "rewrite <- (Rabs_right p); auto with real.",
            "VernacExtend",
            "8d290fcfc86394237ea623ee2084cb3f0e510411"
        ],
        [
            "apply Rle_ge; apply RleRoundedR0 with (P := P) (r := p); auto.",
            "VernacExtend",
            "12d880bf349bdc0fefecdd48b00ac735df187bb7"
        ],
        [
            "rewrite Faux.Rabsolu_left1; auto.",
            "VernacExtend",
            "cdfb2996338b3a1e58065e7b9fa29cb7224ffecf"
        ],
        [
            "rewrite <- (Ropp_involutive r); apply Ropp_le_contravar.",
            "VernacExtend",
            "28f21ffb85703baa31aff905bd0c7973166858a4"
        ],
        [
            "rewrite <- (Fopp_correct radix); auto.",
            "VernacExtend",
            "3858c7e2e159c83156880ea034645e996a4b0b20"
        ],
        [
            "apply RleBoundRoundr with (P := P) (r := p); auto with float.",
            "VernacExtend",
            "7048730245b0c3638c71d7ff6b9bcc61b49a324e"
        ],
        [
            "rewrite (Fopp_correct radix); rewrite <- (Ropp_involutive p); rewrite <- (Faux.Rabsolu_left1 p); auto with real; apply Rlt_le; auto.",
            "VernacExtend",
            "b23f30313bf596812192046bbedd4f23530f60a3"
        ],
        [
            "apply RleRoundedLessR0 with (P := P) (r := p); auto; apply Rlt_le; auto.",
            "VernacExtend",
            "ba16d1adf990797c1eb641dda7d82f72aa812141"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Theorem ZroundZ : forall (P : R -> float -> Prop) (z : Z) (p : float), RoundedModeP b radix P -> P z p -> exists z' : Z, p = z' :>R.",
            "VernacStartTheoremProof",
            "83ce69e83cb11e811636da25a68c3402737bbf64"
        ],
        [
            "intros P z p HP H'.",
            "VernacExtend",
            "b6911e94608d192d0f9c3687d69422ddc7ba6ebb"
        ],
        [
            "case (RoundedModeRep b radix precision) with (P := P) (p := Float z 0%nat) (q := p); auto.",
            "VernacExtend",
            "3023885083a0f6b6bcce06e1df7ec2259ebce4b1"
        ],
        [
            "cut (CompatibleP b radix P); [ intros Cp | apply RoundedModeP_inv2 with (1 := HP); auto ]; auto.",
            "VernacExtend",
            "8e56aec26509be9d9887263cd1c894a152b38f26"
        ],
        [
            "apply Cp with (1 := H'); auto.",
            "VernacExtend",
            "78374738641ce7257314f736c03e0b13b951d841"
        ],
        [
            "unfold FtoRradix, FtoR in |- *; simpl in |- *.",
            "VernacExtend",
            "85a3da1582165d92ceb7faef707de88822bccf1a"
        ],
        [
            "rewrite Rmult_1_r; auto.",
            "VernacExtend",
            "432903b9a980a8758eb8677bf00676318aaf1bd6"
        ],
        [
            "apply RoundedModeBounded with (P := P) (r := IZR z); auto.",
            "VernacExtend",
            "ab088158b7f8eabc5f3a9e8d8765f4100910cc1a"
        ],
        [
            "intros x H'0; exists x; auto.",
            "VernacExtend",
            "9f32462b006a00fbc25a1f682485792cbdd90b8c"
        ],
        [
            "unfold FtoRradix in |- *; rewrite H'0.",
            "VernacExtend",
            "9e37e82b49b17e79047f39a3d3690598d0af288a"
        ],
        [
            "unfold FtoRradix, FtoR in |- *; simpl in |- *.",
            "VernacExtend",
            "85a3da1582165d92ceb7faef707de88822bccf1a"
        ],
        [
            "rewrite Rmult_1_r; auto.",
            "VernacExtend",
            "432903b9a980a8758eb8677bf00676318aaf1bd6"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Theorem NroundN : forall (P : R -> float -> Prop) (n : nat) (p : float), RoundedModeP b radix P -> P n p -> exists n' : nat, p = n' :>R.",
            "VernacStartTheoremProof",
            "7c384d550e10fb035f43f1b51d1c9aa62a36a559"
        ],
        [
            "intros P n p HP H'.",
            "VernacExtend",
            "40c8895e7db86449aac2eb36264a7b1b0f046198"
        ],
        [
            "case (ZroundZ P (Z_of_nat n) p); auto.",
            "VernacExtend",
            "ed6d3d629cd90028b60898944d633fa97a68e116"
        ],
        [
            "repeat rewrite <- INR_IZR_INZ; auto.",
            "VernacExtend",
            "796171ba11a1df232b99b028373459706b0f5773"
        ],
        [
            "intros x H'0; exists (Zabs_nat x).",
            "VernacExtend",
            "d4acbc3a1ce27f24ac7be2a954312788f35d8a03"
        ],
        [
            "rewrite <- (inj_abs x) in H'0.",
            "VernacExtend",
            "3e57a3c5275c8fddc839c901af747543e028a2e5"
        ],
        [
            "rewrite H'0.",
            "VernacExtend",
            "155943e97f3d58c39d0b7dc8dbaf42688f94c62f"
        ],
        [
            "repeat rewrite <- INR_IZR_INZ; auto.",
            "VernacExtend",
            "796171ba11a1df232b99b028373459706b0f5773"
        ],
        [
            "apply le_IZR; simpl in |- *.",
            "VernacExtend",
            "e8000fd9b20cf028b62e70df9f80d23171ae7836"
        ],
        [
            "rewrite <- H'0; auto.",
            "VernacExtend",
            "fc433a0a33372284ece38ef844926b71924e0a7b"
        ],
        [
            "apply RleRoundedR0 with (P := P) (r := INR n); auto.",
            "VernacExtend",
            "42cbc1c434650f6f40f38eebb5dfca78d53acd79"
        ],
        [
            "replace 0%R with (INR 0); auto with real arith.",
            "VernacExtend",
            "3caed965951659080cf394dcb353db3f9bd924fa"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Theorem FUlp_Le_LSigB : forall x : float, Fbounded b x -> (Fulp x <= Float 1%nat (LSB radix x))%R.",
            "VernacStartTheoremProof",
            "0af8ddd21983cec94159dcc642e62c58fad0837c"
        ],
        [
            "intros x H; unfold is_Fzero, Fulp, Fnormalize in |- *; case (Z_zerop (Fnum x)); intros ZH.",
            "VernacExtend",
            "35a048adc799f667bd65d9e60110d13cd4475010"
        ],
        [
            "unfold FtoRradix, FtoR in |- *; simpl in |- *.",
            "VernacExtend",
            "85a3da1582165d92ceb7faef707de88822bccf1a"
        ],
        [
            "rewrite Rmult_1_l.",
            "VernacExtend",
            "1ba58092cf1ca2fa8155dfa9c64894290b0f39df"
        ],
        [
            "apply Rle_powerRZ.",
            "VernacExtend",
            "5f813f119bf9102461055caa0352e823b9b2a3a7"
        ],
        [
            "replace 1%R with (INR 1); auto with real arith.",
            "VernacExtend",
            "0d525adb81e33c7ce8c7ad44dc3bf22ecce07477"
        ],
        [
            "apply Zle_trans with (Fexp x); auto.",
            "VernacExtend",
            "c4650e6c2a9e60eb5f18c2831754e0781858c8cf"
        ],
        [
            "case H; auto.",
            "VernacExtend",
            "0b39ac03ea00c6d2293da9883a569db11f432ebd"
        ],
        [
            "apply Fexp_le_LSB; auto.",
            "VernacExtend",
            "e2ef0d6a640e91f3d0a5c1a0c330f2f52eb1d7f2"
        ],
        [
            "rewrite LSB_shift with (n := min (precision - Fdigit radix x) (Zabs_nat (dExp b + Fexp x))); auto.",
            "VernacExtend",
            "8e7f7c381c3b4556f09b8cdf1f455e02164372c2"
        ],
        [
            "unfold FtoRradix, FtoR in |- *; simpl in |- *.",
            "VernacExtend",
            "85a3da1582165d92ceb7faef707de88822bccf1a"
        ],
        [
            "rewrite Rmult_1_l.",
            "VernacExtend",
            "1ba58092cf1ca2fa8155dfa9c64894290b0f39df"
        ],
        [
            "apply Rle_powerRZ; auto with arith.",
            "VernacExtend",
            "1dac2fbc2846236ed84e703abafc8007a7a40bec"
        ],
        [
            "replace 1%R with (INR 1); auto with real arith.",
            "VernacExtend",
            "0d525adb81e33c7ce8c7ad44dc3bf22ecce07477"
        ],
        [
            "exact (Fexp_le_LSB radix (Fshift radix (min (precision - Fdigit radix x) (Zabs_nat (dExp b + Fexp x))) x)).",
            "VernacExtend",
            "e9a5b9ffa1aae62f488cc1768f75c390a708753d"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Theorem MSBisMin : forall f1 f2 : float, (0 <= f1)%R -> isMin b radix f1 f2 -> ~ is_Fzero f1 -> ~ is_Fzero f2 -> MSB radix f1 = MSB radix f2.",
            "VernacStartTheoremProof",
            "732786fefb520298ecfe0cce787cd56144a40643"
        ],
        [
            "intros f1 f2 H' H'0 H'1 H'2.",
            "VernacExtend",
            "192159e92999734e3ca9035ff4dfe55268f1caf1"
        ],
        [
            "apply Zle_antisym.",
            "VernacExtend",
            "d5fb169d90b6dbda1fca926c28e78732e286a418"
        ],
        [
            "2: apply MSB_monotone; auto.",
            "VernacExtend",
            "88376f3fd83b45287dee5a3bdc66363130599f90"
        ],
        [
            "2: repeat rewrite Fabs_correct1; auto with arith.",
            "VernacExtend",
            "03ff98ae62c3f842c666db19d322cbb7928184c2"
        ],
        [
            "2: apply isMin_inv1 with (1 := H'0).",
            "VernacExtend",
            "078bbda44eadb6b28c24609df835fb800d61f97c"
        ],
        [
            "2: apply RleRoundedR0 with (P := isMin b radix) (r := FtoRradix f1); auto.",
            "VernacExtend",
            "690945784d3534bc957d389ea3a5d447d7ef1edc"
        ],
        [
            "2: apply MinRoundedModeP with (precision := precision); auto.",
            "VernacExtend",
            "eeb2baabc32e3e6f042b3179f479b78b4e189589"
        ],
        [
            "case (Zle_or_lt (MSB radix f1) (MSB radix f2)); auto.",
            "VernacExtend",
            "37b501dd2cf85ef6444ccdfe1351ac9f7e0ddf95"
        ],
        [
            "intros H'3; absurd (Float 1%nat (Zsucc (MSB radix f2)) <= f2)%R.",
            "VernacExtend",
            "d94f32191e85d84807080f8493d91417e445ca4a"
        ],
        [
            "apply Rgt_not_le.",
            "VernacExtend",
            "be8a1e7f9ca2303d5ddda077b45cc15db6c6b3ce"
        ],
        [
            "red in |- *; unfold FtoRradix in |- *; rewrite <- Fabs_correct1; auto with float arith.",
            "VernacExtend",
            "2ccce4ed8ac431195f7088fdb195e3f09d38cbc9"
        ],
        [
            "apply abs_lt_MSB; auto.",
            "VernacExtend",
            "ad5dea47cb3d6e55677afde2c512d3128c62d301"
        ],
        [
            "apply RleRoundedR0 with (P := isMin b radix) (r := FtoRradix f1); auto with float.",
            "VernacExtend",
            "9ba39dd9d6e1f68a47e360da666afeffe39cf11b"
        ],
        [
            "apply MinRoundedModeP with (precision := precision); auto.",
            "VernacExtend",
            "9c713ab984e57490a2425136b2f02c1e3b6ef6ba"
        ],
        [
            "case H'0.",
            "VernacExtend",
            "0b7a0c96a71e8cd9464b13f3d81301c6b0f41fd5"
        ],
        [
            "intros H'4 H'5; elim H'5; intros H'6 H'7; apply H'7; clear H'5; auto.",
            "VernacExtend",
            "b89f5dcf86312de3b227edd67651da43357902b5"
        ],
        [
            "apply (FboundedOne _ radixMoreThanOne b precision); auto with arith.",
            "VernacExtend",
            "1f052d894ce1460a5659dcfbb99849ba8837cb1b"
        ],
        [
            "apply Zle_trans with (Fexp f2).",
            "VernacExtend",
            "c78c8d580186d8e2ed90b2bb6b97e5853f9345d1"
        ],
        [
            "case H'4; auto.",
            "VernacExtend",
            "2c012230b4479c3ceef20d28ff227694c215b18f"
        ],
        [
            "apply Zle_trans with (MSB radix f2); auto with zarith.",
            "VernacExtend",
            "6ce07da841437d2fb83d576a5f7eca571fc4e0b6"
        ],
        [
            "apply Fexp_le_MSB; auto.",
            "VernacExtend",
            "58104f909359956c4fc39090c1cb4e683f769a77"
        ],
        [
            "apply Rle_trans with (FtoR radix (Float 1%nat (MSB radix f1))); auto.",
            "VernacExtend",
            "478a5c9fa14ce663818acce8da1d9251fee752cc"
        ],
        [
            "apply oneExp_le; auto with zarith.",
            "VernacExtend",
            "191975b4461f00c41a652344045fc2af7f5b5bad"
        ],
        [
            "unfold FtoRradix in |- *; rewrite <- Fabs_correct1 with (x := f1); auto with float arith.",
            "VernacExtend",
            "9b7d850061f1ad7281d137ee0401ea3ccc5c62e5"
        ],
        [
            "apply MSB_le_abs; auto.",
            "VernacExtend",
            "99255ec49e5117c32f631c4b22ab1e346d507922"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Theorem MSBtoZero : forall f1 f2 : float, ToZeroP b radix f1 f2 -> ~ is_Fzero f1 -> ~ is_Fzero f2 -> MSB radix f1 = MSB radix f2.",
            "VernacStartTheoremProof",
            "593d075fa90a1fd0a1982e98646af20d922823cc"
        ],
        [
            "intros f1 f2 H' H'0 H'1; Casec H'; intros tmp; Elimc tmp; intros H1 H2.",
            "VernacExtend",
            "b75387ca8bec77107afeb2c311407b6a17e4435e"
        ],
        [
            "apply MSBisMin; auto.",
            "VernacExtend",
            "256d59eccaa2f50158c629596168d3151b7e76a7"
        ],
        [
            "rewrite (MSB_opp radix f1).",
            "VernacExtend",
            "469537774dcf28353e8759a5971e5b236d30d5a2"
        ],
        [
            "rewrite (MSB_opp radix f2).",
            "VernacExtend",
            "3143ad10cf5c76eba67aa98935ca6213b1d051df"
        ],
        [
            "apply MSBisMin; auto with float.",
            "VernacExtend",
            "d7fe701d7daf7ab54ace4832995e42998d9034cb"
        ],
        [
            "unfold FtoRradix in |- *; rewrite Fopp_correct.",
            "VernacExtend",
            "c3c7ad16a924a974f39fb2584a800e7199b0444e"
        ],
        [
            "replace 0%R with (-0)%R; auto with real.",
            "VernacExtend",
            "ad9a3c816968bd85bd0ee7d9d06b032f07b0b811"
        ],
        [
            "unfold FtoRradix in |- *; rewrite Fopp_correct; auto with float.",
            "VernacExtend",
            "cddbb20c10a1ca9fa0efc67e0aa29b47d2f3396a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Theorem MSBBoundNotZero : forall P : R -> float -> Prop, RoundedModeP b radix P -> forall f1 f2 : float, P f1 f2 -> f1 <> 0%R :>R -> (- dExp b <= MSB radix f1)%Z -> f2 <> 0%R :>R.",
            "VernacStartTheoremProof",
            "22dcdea72cf8c7d3aae33341a40b1d443720445f"
        ],
        [
            "intros P H' f1 f2 H'0 H'1 H'2.",
            "VernacExtend",
            "a63198b05047f36e234bb1779db5f01ea6757746"
        ],
        [
            "case (Rle_or_lt 0 f1); intros Rl1.",
            "VernacExtend",
            "406e8ffe07f9ec861827a02c415fa1db2f824103"
        ],
        [
            "apply Rlt_dichotomy_converse; right; red in |- *.",
            "VernacExtend",
            "5e6cb8110820439778b09c01c34537a9f0ba2a54"
        ],
        [
            "apply Rlt_le_trans with (r2 := FtoRradix (Float 1%nat (MSB radix f1))); auto.",
            "VernacExtend",
            "94bfb873334d47a6420b674f854a0cf6d299d6e1"
        ],
        [
            "unfold FtoRradix, FtoR in |- *; simpl in |- *; rewrite Rmult_1_l; auto with real arith.",
            "VernacExtend",
            "4983d0cfb57646f5779f79eeff08be8a4d46bf70"
        ],
        [
            "cut (Float 1%nat (MSB radix f1) <= Fabs f1)%R; unfold FtoRradix in |- *; [ rewrite Fabs_correct; auto with arith; rewrite Rabs_right; auto with real; intros Rl2; Casec Rl2; intros Rl2 | apply MSB_le_abs ]; auto.",
            "VernacExtend",
            "6a4cbee7c295339ccef857fd96e9e3c1823552cd"
        ],
        [
            "cut (MonotoneP radix P); [ intros Mn | apply RoundedModeP_inv4 with (1 := H'); auto ].",
            "VernacExtend",
            "b8b6ba48c8465dac1cd258350b711138b0e41871"
        ],
        [
            "apply (Mn (Float 1%nat (MSB radix f1)) f1); auto.",
            "VernacExtend",
            "894dc0117f589a6958f400df20fc3ee795f3f46b"
        ],
        [
            "apply RoundedModeProjectorIdem; auto.",
            "VernacExtend",
            "f1ffe11ba55f73a16400349195deb28b205e724b"
        ],
        [
            "apply (FboundedOne radix) with (precision := precision); auto with real zarith arith.",
            "VernacExtend",
            "3336bc1c37f8bb2a729b7e637e840bab2af53798"
        ],
        [
            "replace (FtoR radix f2) with (FtoR radix (Float 1%nat (MSB radix f1))); auto with float real.",
            "VernacExtend",
            "8700009a1bcf91afd8d657e4ee93806eac55ca76"
        ],
        [
            "apply RoundedModeProjectorIdemEq with (P := P); auto.",
            "VernacExtend",
            "73f983ca5254eaf4186e1585d25a8d4a2be98632"
        ],
        [
            "apply (FboundedOne radix) with (precision := precision); auto with real zarith arith.",
            "VernacExtend",
            "3336bc1c37f8bb2a729b7e637e840bab2af53798"
        ],
        [
            "cut (CompatibleP b radix P); [ intros Cp | apply RoundedModeP_inv2 with (1 := H'); auto ].",
            "VernacExtend",
            "2ca124a567e390b257fb21e0b477d3edc60232f2"
        ],
        [
            "apply (Cp f1) with (p := f2); auto.",
            "VernacExtend",
            "e350c19c18f9ca89b75b125a7352f17f0f15df77"
        ],
        [
            "apply RoundedModeBounded with (P := P) (r := FtoRradix f1); auto.",
            "VernacExtend",
            "995b09ad176c7301bf24d6f3b3f0f48acf525652"
        ],
        [
            "Contradict H'1; unfold FtoRradix in |- *; apply is_Fzero_rep1; auto.",
            "VernacExtend",
            "a7ee05a6efd11fb9a8e1e32bdd1f736764472853"
        ],
        [
            "apply Rlt_dichotomy_converse; left.",
            "VernacExtend",
            "8be10ff4f710df6fc2d16ffa31bf4c3b6a53d9f5"
        ],
        [
            "apply Rle_lt_trans with (r2 := FtoRradix (Float (- 1%nat) (MSB radix f1))); auto.",
            "VernacExtend",
            "dd3122e1c2bdcfabbca9b1082ea93c6e0a89906a"
        ],
        [
            "cut (MonotoneP radix P); [ intros Mn | apply RoundedModeP_inv4 with (1 := H'); auto ].",
            "VernacExtend",
            "b8b6ba48c8465dac1cd258350b711138b0e41871"
        ],
        [
            "cut (f1 <= Float (- 1%nat) (MSB radix f1))%R; [ intros Rle1; Casec Rle1; intros Rle1 | idtac ].",
            "VernacExtend",
            "fab858d629ff89c40f47a856e97c60fd66b6cd86"
        ],
        [
            "apply (Mn f1 (Float (- 1%nat) (MSB radix f1))); auto.",
            "VernacExtend",
            "5079de47e32518fd8a31968987babc6b03ac7cdc"
        ],
        [
            "apply RoundedModeProjectorIdem; auto.",
            "VernacExtend",
            "f1ffe11ba55f73a16400349195deb28b205e724b"
        ],
        [
            "apply oppBoundedInv; unfold Fopp in |- *; simpl in |- *.",
            "VernacExtend",
            "f2db45e49eeea24f3fe8a78f15489808e77b020d"
        ],
        [
            "apply (FboundedOne radix) with (precision := precision); auto with real zarith arith.",
            "VernacExtend",
            "3336bc1c37f8bb2a729b7e637e840bab2af53798"
        ],
        [
            "replace (FtoRradix f2) with (FtoRradix (Float (- 1%nat) (MSB radix f1))); auto with real.",
            "VernacExtend",
            "a0a47c3c51f6ef02fd31b8350fcad595ff17e6e8"
        ],
        [
            "apply RoundedModeProjectorIdemEq with (P := P); auto.",
            "VernacExtend",
            "73f983ca5254eaf4186e1585d25a8d4a2be98632"
        ],
        [
            "apply oppBoundedInv; unfold Fopp in |- *; simpl in |- *.",
            "VernacExtend",
            "f2db45e49eeea24f3fe8a78f15489808e77b020d"
        ],
        [
            "apply (FboundedOne _ radixMoreThanOne b precision); auto with real zarith arith.",
            "VernacExtend",
            "0e217afad152f4ace3bb4e806e1808618c391c48"
        ],
        [
            "cut (CompatibleP b radix P); [ intros Cp | apply RoundedModeP_inv2 with (1 := H'); auto ].",
            "VernacExtend",
            "2ca124a567e390b257fb21e0b477d3edc60232f2"
        ],
        [
            "apply (Cp f1) with (p := f2); auto.",
            "VernacExtend",
            "e350c19c18f9ca89b75b125a7352f17f0f15df77"
        ],
        [
            "apply RoundedModeBounded with (P := P) (r := FtoRradix f1); auto.",
            "VernacExtend",
            "995b09ad176c7301bf24d6f3b3f0f48acf525652"
        ],
        [
            "replace (FtoRradix f1) with (- FtoRradix (Fabs f1))%R.",
            "VernacExtend",
            "6b6fc54dbe6b255b1140f118360e418311774f68"
        ],
        [
            "replace (Float (- 1%nat) (MSB radix f1)) with (Fopp (Float 1%nat (MSB radix f1))).",
            "VernacExtend",
            "255f6ccf7c17fbeefe4d00b924e14212849eee6f"
        ],
        [
            "unfold FtoRradix in |- *; rewrite Fopp_correct; auto.",
            "VernacExtend",
            "cb2f7c06ddf935b881f8dc588261d2ace6d5cb81"
        ],
        [
            "apply Ropp_le_contravar; apply MSB_le_abs; auto.",
            "VernacExtend",
            "f7f5f9c5970220af44651b6b4a6446c4f558269e"
        ],
        [
            "Contradict H'1; unfold FtoRradix in |- *; apply is_Fzero_rep1; auto.",
            "VernacExtend",
            "a7ee05a6efd11fb9a8e1e32bdd1f736764472853"
        ],
        [
            "unfold Fopp in |- *; simpl in |- *; auto.",
            "VernacExtend",
            "b64d5835546167049849e985ceeb8ba8af385a1b"
        ],
        [
            "unfold FtoRradix in |- *; rewrite Fabs_correct; auto with arith; rewrite Faux.Rabsolu_left1; try apply Rlt_le; auto; ring.",
            "VernacExtend",
            "ba96fd76834a6e04ad4b552ca6436594d1a88f5c"
        ],
        [
            "replace (Float (- 1%nat) (MSB radix f1)) with (Fopp (Float 1%nat (MSB radix f1))); [ idtac | unfold Fopp in |- *; simpl in |- *; auto ].",
            "VernacExtend",
            "306d41e71488d2a388da3d63f7585dc2181eb7f0"
        ],
        [
            "replace 0%R with (-0)%R; [ idtac | ring ].",
            "VernacExtend",
            "f60f35ac97dc318a23d69b703000d3c8a2bbf76e"
        ],
        [
            "unfold FtoRradix in |- *; repeat rewrite Fopp_correct; apply Ropp_lt_contravar.",
            "VernacExtend",
            "4881ba3ff159053b9b3ec0297e0c907996fa1d53"
        ],
        [
            "unfold FtoR in |- *; simpl in |- *; rewrite Rmult_1_l; auto with real arith.",
            "VernacExtend",
            "22015c483afadba8bbfbbdd51c4154ffe3195ffd"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Theorem RoundMSBmax : forall (P : R -> float -> Prop) (p q : float), RoundedModeP b radix P -> P p q -> p <> 0%R :>R -> (- dExp b <= MSB radix p)%Z -> (MSB radix q <= Zsucc (MSB radix p))%Z.",
            "VernacStartTheoremProof",
            "ba1940201e1a0adcaaa4426bf942894a29e36316"
        ],
        [
            "intros P p q H' H'0 H'1 H'2.",
            "VernacExtend",
            "7c10b36cc71bad9ce419a316287013d3cf2377d0"
        ],
        [
            "apply (oneExp_Zle radix); auto.",
            "VernacExtend",
            "f01ba89e5314509764f61e8738b745c4d6c7deee"
        ],
        [
            "apply Rle_trans with (FtoRradix (Fabs q)).",
            "VernacExtend",
            "1b43f13267c4789f66cf39c33354de622d8269f6"
        ],
        [
            "unfold FtoRradix in |- *; apply MSB_le_abs; auto.",
            "VernacExtend",
            "293ca157cf35d51b62c19cd2e312b6ef5a98349e"
        ],
        [
            "red in |- *; intros H'3; absurd (q = 0%R :>R).",
            "VernacExtend",
            "b4330e4b7ad0b47e13da1face3ed91b010ead03c"
        ],
        [
            "apply MSBBoundNotZero with (P := P) (f1 := p); auto.",
            "VernacExtend",
            "6861350c1d67db024b2e2acf1f17399dbd9e0e61"
        ],
        [
            "apply (is_Fzero_rep1 radix); auto.",
            "VernacExtend",
            "5529dad4f7fe297103a97c108d0b60c333caa2ec"
        ],
        [
            "unfold FtoRradix in |- *; rewrite Fabs_correct; auto with arith; fold FtoRradix in |- *.",
            "VernacExtend",
            "4c8f14efffbac37997f71031cea99494b6addf20"
        ],
        [
            "apply RoundAbsMonotoner with (P := P) (p := FtoRradix p); auto.",
            "VernacExtend",
            "8fdcf8b894083ae279d221f0c9882728213a3d19"
        ],
        [
            "apply (FboundedOne _ radixMoreThanOne b precision); auto with zarith.",
            "VernacExtend",
            "2d4bca6b894bd5be5dfb36ccefe73ce85ea75493"
        ],
        [
            "unfold FtoRradix in |- *; rewrite <- (Fabs_correct radix); auto with arith.",
            "VernacExtend",
            "551e7f0fd7e4368e0a6802055b72bb1b985c804a"
        ],
        [
            "apply Rlt_le; apply abs_lt_MSB; auto.",
            "VernacExtend",
            "e1f9079644733d49a54dbd6fb468b0003d748a04"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Theorem RoundMSBmin : forall (P : R -> float -> Prop) (p q : float), RoundedModeP b radix P -> P p q -> p <> 0%R :>R -> (- dExp b <= MSB radix p)%Z -> (MSB radix p <= MSB radix q)%Z.",
            "VernacStartTheoremProof",
            "51de1e0d330b23ef32ac84b340d2f268ae495971"
        ],
        [
            "intros P p q H' H'0 H'1 H'2.",
            "VernacExtend",
            "7c10b36cc71bad9ce419a316287013d3cf2377d0"
        ],
        [
            "replace (MSB radix p) with (MSB radix (Float 1%nat (MSB radix p))).",
            "VernacExtend",
            "85f0d7b8939f2219161af6d711ced60ae9b1ae69"
        ],
        [
            "apply MSB_monotone; auto.",
            "VernacExtend",
            "e888f45b04a2c62072fe47fd193cdbd5920f7389"
        ],
        [
            "unfold is_Fzero in |- *; simpl in |- *; red in |- *; intros; discriminate.",
            "VernacExtend",
            "a14c836385ab5d7a576018d3f011bc77d1333845"
        ],
        [
            "red in |- *; intros H'3; absurd (q = 0%R :>R).",
            "VernacExtend",
            "b4330e4b7ad0b47e13da1face3ed91b010ead03c"
        ],
        [
            "apply MSBBoundNotZero with (P := P) (f1 := p); auto.",
            "VernacExtend",
            "6861350c1d67db024b2e2acf1f17399dbd9e0e61"
        ],
        [
            "unfold FtoRradix in |- *; apply is_Fzero_rep1; auto.",
            "VernacExtend",
            "1a3b75bbbe0ad7f873e630d1d8c4690170e8d400"
        ],
        [
            "replace (Fabs (Float 1%nat (MSB radix p))) with (Float 1%nat (MSB radix p)); [ idtac | unfold Fabs in |- *; simpl in |- *; auto ].",
            "VernacExtend",
            "16d4a22e72e6f990ccea301f406f7a3d1e78b019"
        ],
        [
            "rewrite Fabs_correct; auto with arith; fold FtoRradix in |- *.",
            "VernacExtend",
            "fdfd6819193b54e15a8cbc6906d576cb7ee35066"
        ],
        [
            "apply RoundAbsMonotonel with (P := P) (p := FtoRradix p); auto.",
            "VernacExtend",
            "1c452070c27fd11819c26cbd4f09736243f9c698"
        ],
        [
            "apply (FboundedOne _ radixMoreThanOne b precision); auto with zarith.",
            "VernacExtend",
            "2d4bca6b894bd5be5dfb36ccefe73ce85ea75493"
        ],
        [
            "unfold FtoRradix in |- *; rewrite <- (Fabs_correct radix); auto with arith; apply MSB_le_abs; auto.",
            "VernacExtend",
            "1a2acb418567c37796b4316e211ae2baa747c2ab"
        ],
        [
            "Contradict H'1; unfold FtoRradix in |- *; apply is_Fzero_rep1; auto.",
            "VernacExtend",
            "a7ee05a6efd11fb9a8e1e32bdd1f736764472853"
        ],
        [
            "unfold MSB, Fdigit in |- *; simpl in |- *.",
            "VernacExtend",
            "39b328fbf3d460a65fd81e503266e6228f004328"
        ],
        [
            "case (Zpred (digit radix (Fnum p) + Fexp p)); simpl in |- *; auto with zarith.",
            "VernacExtend",
            "2375890edd253ebac89617497896d96193117537"
        ],
        [
            "intros p0; case p0; simpl in |- *; auto.",
            "VernacExtend",
            "0cf426815ddb3204206fb3ac727d3b2b5d0b6eed"
        ],
        [
            "intros p1; elim p1; simpl in |- *; auto.",
            "VernacExtend",
            "a808402a1f1b6ffb9a4ede84db2de9b1ad4190d6"
        ],
        [
            "intros p2 H; injection H; intros H1; rewrite <- H1; auto.",
            "VernacExtend",
            "ff0d65b226b2fa55f0f7985698e08670b736d97a"
        ],
        [
            "intros p0; case p0; simpl in |- *; auto.",
            "VernacExtend",
            "0cf426815ddb3204206fb3ac727d3b2b5d0b6eed"
        ],
        [
            "intros p1; case p1; simpl in |- *; auto.",
            "VernacExtend",
            "712f6fe63e649bb4fd5e25b1f5b3d1d031020ad3"
        ],
        [
            "intros p2; elim p2; simpl in |- *; auto.",
            "VernacExtend",
            "ee30635c512d55f748a342ff7380267f1890bf77"
        ],
        [
            "intros p3 H; injection H; intros H1; rewrite H1; auto.",
            "VernacExtend",
            "b4286cc9b76eb1ed0f0f62f197aea1008378b44e"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Theorem RoundLSBMax : forall (P : R -> float -> Prop) (p q : float), RoundedModeP b radix P -> P p q -> ~ is_Fzero q -> (LSB radix p <= LSB radix q)%Z.",
            "VernacStartTheoremProof",
            "3c349069e7a5b2d31b207afe23a294ec88f56416"
        ],
        [
            "intros P p q H' H'0 H'2.",
            "VernacExtend",
            "0c5ebce7bfeddee9355067e7d88107447fd30ae2"
        ],
        [
            "elim (LSB_rep_min radix) with (p := p); auto; intros z E.",
            "VernacExtend",
            "db471b8eec395ee69cc993064c7074b658d1d460"
        ],
        [
            "case (RoundedModeRep b radix precision) with (P := P) (p := Float z (LSB radix p)) (q := q); auto.",
            "VernacExtend",
            "f89664c236541753b03e8af84c7cc8aca111f19e"
        ],
        [
            "cut (CompatibleP b radix P); [ intros Cp | apply RoundedModeP_inv2 with (1 := H'); auto ].",
            "VernacExtend",
            "2ca124a567e390b257fb21e0b477d3edc60232f2"
        ],
        [
            "apply (Cp p (Float z (LSB radix p)) q); auto.",
            "VernacExtend",
            "1ab88fd59332f0bacdf9785fbe2e81ba22e59a9a"
        ],
        [
            "apply RoundedModeBounded with (P := P) (r := FtoRradix p); auto.",
            "VernacExtend",
            "3e81c58cf0a87593d6e16577630eccb61b13bfe9"
        ],
        [
            "intros x H'3.",
            "VernacExtend",
            "f3ffaa5f709eebecf7648cac0be00a6722784285"
        ],
        [
            "replace (LSB radix p) with (Fexp (Float x (LSB radix p))); [ idtac | simpl in |- *; auto ].",
            "VernacExtend",
            "9a873b626c58226c4db6481f7122cca41186122d"
        ],
        [
            "replace (LSB radix q) with (LSB radix (Float x (LSB radix p))).",
            "VernacExtend",
            "5569f1dc51c47be5c2c2c7f070d27ebe685b9d29"
        ],
        [
            "apply Fexp_le_LSB.",
            "VernacExtend",
            "b989a59d82179838da63f998b54c97076e3ee8fc"
        ],
        [
            "apply LSB_comp; auto.",
            "VernacExtend",
            "904ddcdb8fa7e132ffcb7a677120119b54f0d357"
        ],
        [
            "apply NisFzeroComp with (radix := radix) (x := q); auto.",
            "VernacExtend",
            "cd81e75cb1d6ee7342ec6d539475cddd05a3654f"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Theorem InBinade : forall (P : R -> float -> Prop) (p q r : float) (e : Z), RoundedModeP b radix P -> Fbounded b p -> Fbounded b q -> P (p + q)%R r -> (- dExp b <= e)%Z -> (Float (Zpower_nat radix (pred precision)) e <= p)%R -> (p <= Float (pPred (vNum b)) e)%R -> (0%nat < q)%R -> (q < powerRZ radix e)%R -> r = p :>R \\/ r = (p + powerRZ radix e)%R :>R.",
            "VernacStartTheoremProof",
            "e60b28b33d78e46291471d36c9e71e1e3b90d01f"
        ],
        [
            "intros P p q r e Rp H' H'0 H'1 H'2 H'3 H'4 H'5 H'6.",
            "VernacExtend",
            "eab163ae56b097524868e9fb666e5622633b35d3"
        ],
        [
            "cut (p < p + q)%R; [ intros Rlt1 | idtac ].",
            "VernacExtend",
            "1b3ea75d1daf570a45a5e47ff137f20e16e56f37"
        ],
        [
            "cut (p + q < FNSucc b radix precision p)%R; [ intros Rlt2 | idtac ].",
            "VernacExtend",
            "e02a58a21a2a67af599bd41a26f8179e08b61aff"
        ],
        [
            "cut (isMin b radix (p + q) p); [ intros Min1 | idtac ].",
            "VernacExtend",
            "256ef4022f04e43046cc9fc5b325f852359e4c43"
        ],
        [
            "cut (isMax b radix (p + q) (FNSucc b radix precision p)); [ intros Max1 | idtac ].",
            "VernacExtend",
            "60db6ac8f5219dee6d46ecf97123414352ff742e"
        ],
        [
            "cut (MinOrMaxP b radix P); [ intros MinOrMax | apply RoundedModeP_inv3 with (1 := Rp); auto ].",
            "VernacExtend",
            "8690876097718c354eae9389e2bd8888f60f5338"
        ],
        [
            "case (MinOrMax (p + q)%R r); auto; intros H1.",
            "VernacExtend",
            "3308c84af4509f601bdec89f4d4146b032608dbb"
        ],
        [
            "left.",
            "VernacExtend",
            "06dad9fc5698018f3f1213205145fec906c612b1"
        ],
        [
            "apply (MinUniqueP b radix (p + q)%R); auto.",
            "VernacExtend",
            "c5ee46eefecb0c17043d4666ee4339e1d533d9b4"
        ],
        [
            "right.",
            "VernacExtend",
            "27e417a3497755767e1a1d6ba87753ecddaee6b7"
        ],
        [
            "cut ((p + powerRZ radix e)%R = FNSucc b radix precision p); [ intros Eq1; rewrite Eq1 | idtac ].",
            "VernacExtend",
            "9a2ba2ee7b7216088c535fe852afe5b26a991f71"
        ],
        [
            "apply (MaxUniqueP b radix (p + q)%R); auto.",
            "VernacExtend",
            "2a7cb92a0b5b7999687578e8a15726db8feabed5"
        ],
        [
            "replace (FtoRradix (FNSucc b radix precision p)) with (Fnormalize radix b precision p + (FNSucc b radix precision p - Fnormalize radix b precision p))%R; [ idtac | ring ].",
            "VernacExtend",
            "1610844cc5d15d7c666e8122b5eddc9639ee2ffa"
        ],
        [
            "unfold FNSucc in |- *; rewrite <- (Fminus_correct radix); auto with arith; rewrite (FSuccDiff1 b radix precision); auto with arith.",
            "VernacExtend",
            "133a818d2ad05da7bf731f0a4ae4492ca2d7483e"
        ],
        [
            "rewrite (boundedNorMinGivesExp radix) with (x := e); auto with zarith.",
            "VernacExtend",
            "8cabcf3e7591c939c86e811c2f833b5d5de76a54"
        ],
        [
            "rewrite (FnormalizeCorrect radix); auto; unfold FtoRradix, FtoR in |- *; simpl in |- *; ring.",
            "VernacExtend",
            "d21ad8c7b9defdeba70e1d3d06e045ea9b957ba0"
        ],
        [
            "apply sym_not_equal; apply Zlt_not_eq.",
            "VernacExtend",
            "7b38bf851c75b1e2cdd7f7b0afb8d6236ccdc729"
        ],
        [
            "apply Zle_lt_trans with 0%Z; auto with zarith.",
            "VernacExtend",
            "9627704dbf47c3cd9cc05e1faa3db45759fc18e5"
        ],
        [
            "replace 0%Z with (- (0))%Z; auto with zarith; apply Zle_Zopp; apply Zlt_le_weak; apply nNormPos; auto with zarith.",
            "VernacExtend",
            "c0f026a0432bf623824546e66761311d63b229ed"
        ],
        [
            "apply (LtR0Fnum radix); auto.",
            "VernacExtend",
            "f2aa05f3433f9e2deac0adbac1c511d1f2b83f37"
        ],
        [
            "rewrite FnormalizeCorrect; fold FtoRradix in |- *; auto.",
            "VernacExtend",
            "0fe26dee4cbf03d67600715701477b7ffb201e77"
        ],
        [
            "apply Rlt_le_trans with (2 := H'3).",
            "VernacExtend",
            "14a8bb82f5bd8e9d2eff1285a0178abfd7327d3e"
        ],
        [
            "apply (LtFnumZERO radix); simpl in |- *; (replace 0%Z with (Z_of_nat 0); auto with zarith arith).",
            "VernacExtend",
            "8d58e306e25d2baa599b4d9fe8175dc3384e301c"
        ],
        [
            "apply MinMax; auto with arith.",
            "VernacExtend",
            "d46275408a904beb31a823f653bce79ac8edf3f7"
        ],
        [
            "Contradict Rlt1.",
            "VernacExtend",
            "7646223f294f1a6ddb616f3aa2b07180b7c46e29"
        ],
        [
            "rewrite Rlt1; auto with real.",
            "VernacExtend",
            "b1603301782310554f2dcdc622b96f289ba5b618"
        ],
        [
            "apply MinBinade with (precision := precision); auto with arith.",
            "VernacExtend",
            "5566c720cffab5992f01efd3bf34b8ad4537051b"
        ],
        [
            "apply Rlt_le; auto.",
            "VernacExtend",
            "4003e3e1c449ee89cad9e953d0a562db8235648c"
        ],
        [
            "replace (FtoRradix (FNSucc b radix precision p)) with (Fnormalize radix b precision p + (FNSucc b radix precision p - Fnormalize radix b precision p))%R; [ idtac | ring ].",
            "VernacExtend",
            "1610844cc5d15d7c666e8122b5eddc9639ee2ffa"
        ],
        [
            "unfold FNSucc in |- *; rewrite <- (Fminus_correct radix); auto with arith; rewrite (FSuccDiff1 b radix precision); auto with arith.",
            "VernacExtend",
            "133a818d2ad05da7bf731f0a4ae4492ca2d7483e"
        ],
        [
            "rewrite (boundedNorMinGivesExp radix) with (x := e); auto with zarith.",
            "VernacExtend",
            "8cabcf3e7591c939c86e811c2f833b5d5de76a54"
        ],
        [
            "rewrite (FnormalizeCorrect radix); auto; fold FtoRradix in |- *.",
            "VernacExtend",
            "89ef536b687a91a2e21ace8a0b5a2ada295415d4"
        ],
        [
            "replace (FtoRradix (Float 1%nat e)) with (powerRZ radix e); auto with real.",
            "VernacExtend",
            "cddd49df0abec9cb299fa90f61aaccab5c92a42e"
        ],
        [
            "unfold FtoRradix, FtoR in |- *; simpl in |- *; ring.",
            "VernacExtend",
            "5b3b96c09542c1778400f311cf15a289b4188c3b"
        ],
        [
            "apply sym_not_equal; apply Zlt_not_eq.",
            "VernacExtend",
            "7b38bf851c75b1e2cdd7f7b0afb8d6236ccdc729"
        ],
        [
            "apply Zle_lt_trans with 0%Z; auto with zarith.",
            "VernacExtend",
            "9627704dbf47c3cd9cc05e1faa3db45759fc18e5"
        ],
        [
            "replace 0%Z with (- (0))%Z; auto with zarith; apply Zle_Zopp; apply Zlt_le_weak; apply nNormPos; auto with zarith.",
            "VernacExtend",
            "c0f026a0432bf623824546e66761311d63b229ed"
        ],
        [
            "apply (LtR0Fnum radix); auto.",
            "VernacExtend",
            "f2aa05f3433f9e2deac0adbac1c511d1f2b83f37"
        ],
        [
            "rewrite FnormalizeCorrect; fold FtoRradix in |- *; auto.",
            "VernacExtend",
            "0fe26dee4cbf03d67600715701477b7ffb201e77"
        ],
        [
            "apply Rlt_le_trans with (2 := H'3).",
            "VernacExtend",
            "14a8bb82f5bd8e9d2eff1285a0178abfd7327d3e"
        ],
        [
            "apply (LtFnumZERO radix); simpl in |- *; (replace 0%Z with (Z_of_nat 0); auto with zarith arith).",
            "VernacExtend",
            "8d58e306e25d2baa599b4d9fe8175dc3384e301c"
        ],
        [
            "pattern (FtoRradix p) at 1 in |- *; replace (FtoRradix p) with (p + 0)%R; [ idtac | ring ].",
            "VernacExtend",
            "a86178578e0a7e10195b5acb848d00aa7349be64"
        ],
        [
            "apply Rplus_lt_compat_l; auto.",
            "VernacExtend",
            "4b6a14448b340686174c8e42c0bdfbd475022946"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "End FRoundP.",
            "VernacEndSegment",
            "520cac324389b919df39c8e053eb70486a239da0"
        ],
        [
            "Hint Resolve FulpSucCan FulpSuc FulpPredCan FulpPred: float.",
            "VernacHints",
            "12d9eeb275a1e8d5745a9878b685c1762016d1b8"
        ]
    ],
    "proofs": [
        {
            "name": "FulpComp",
            "line_nb": 14,
            "steps": [
                {
                    "command": [
                        "intros p q H' H'0 H'1; unfold Fulp in |- *.",
                        "VernacExtend",
                        "23b6f38a150227c335d354639b645e39c47aeb96"
                    ]
                },
                {
                    "command": [
                        "rewrite FcanonicUnique with (p := Fnormalize radix b precision p) (q := Fnormalize radix b precision q) (3 := pGivesBound); auto with float arith.",
                        "VernacExtend",
                        "d1c503d36fa559fa9b2e11686de3921217e12e85"
                    ]
                },
                {
                    "command": [
                        "apply trans_eq with (FtoR radix p).",
                        "VernacExtend",
                        "69c16d0599c9d462269b500cd0894114d8f87050"
                    ]
                },
                {
                    "command": [
                        "apply FnormalizeCorrect; auto.",
                        "VernacExtend",
                        "eb55ec64becb45831f31eca744980a2b286c1906"
                    ]
                },
                {
                    "command": [
                        "apply trans_eq with (FtoR radix q); auto.",
                        "VernacExtend",
                        "e5ee2cc145d76f07ace7bb60473b0de95170906c"
                    ]
                },
                {
                    "command": [
                        "apply sym_eq; apply FnormalizeCorrect; auto.",
                        "VernacExtend",
                        "1ce4b3eb95883f2cb55c358368109d3695e7f9f4"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "FulpLe",
            "line_nb": 22,
            "steps": [
                {
                    "command": [
                        "intros p H'; unfold Fulp, FtoRradix, FtoR, Fnormalize in |- *; simpl in |- *; rewrite Rmult_1_l.",
                        "VernacExtend",
                        "37918e2e2088298f5741642b7510eff034e9f7aa"
                    ]
                },
                {
                    "command": [
                        "case (Z_zerop (Fnum p)); simpl in |- *; auto.",
                        "VernacExtend",
                        "9078a305e03ac0e4454515cb9d6684a094dccf7c"
                    ]
                },
                {
                    "command": [
                        "intros H'0; apply (Rle_powerRZ radix (- dExp b) (Fexp p)); auto with float real zarith.",
                        "VernacExtend",
                        "f6de06235c9421823c5ce9f35fedc91deaa70985"
                    ]
                },
                {
                    "command": [
                        "intros H'0; apply Rle_powerRZ; auto with real zarith arith.",
                        "VernacExtend",
                        "1c0f359afc4e017a9fb219fcf4d6fb2f5f0b6b8d"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "Fulp_zero",
            "line_nb": 28,
            "steps": [
                {
                    "command": [
                        "intros x; unfold is_Fzero, Fulp, Fnormalize in |- *; case (Z_zerop (Fnum x)); simpl in |- *; auto.",
                        "VernacExtend",
                        "24c825d7429027de7217ed10e30676da55059086"
                    ]
                },
                {
                    "command": [
                        "intros H' H'0; Contradict H'; auto.",
                        "VernacExtend",
                        "ced1f30ac7662d579680cc1271c0292161ad4d45"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "FulpLe2",
            "line_nb": 32,
            "steps": [
                {
                    "command": [
                        "intros p H1 H2; unfold Fulp in |- *.",
                        "VernacExtend",
                        "4917265dc28bdb166211e47ec15f854f94cd6148"
                    ]
                },
                {
                    "command": [
                        "replace (FtoRradix p) with (FtoRradix (Fnormalize radix b precision p)); [ idtac | unfold FtoRradix in |- *; apply FnormalizeCorrect; auto ].",
                        "VernacExtend",
                        "2d85c166321e2517e7a5b261d91e33df30dfc137"
                    ]
                },
                {
                    "command": [
                        "apply Rmult_le_reg_l with (powerRZ radix (Zpred precision)).",
                        "VernacExtend",
                        "ddc626a5287a76ef20598988b935fd0834f36d33"
                    ]
                },
                {
                    "command": [
                        "apply powerRZ_lt; auto with real arith.",
                        "VernacExtend",
                        "18f200e01215d20891df67e3797385e5979e8d39"
                    ]
                },
                {
                    "command": [
                        "replace (powerRZ radix (Zpred precision) * (Rabs (Fnormalize radix b precision p) * powerRZ radix (Zsucc (- precision))))%R with (Rabs (Fnormalize radix b precision p)).",
                        "VernacExtend",
                        "dc17dc226034232d50f3b85e0e4a1c7712c33da6"
                    ]
                },
                {
                    "command": [
                        "unfold FtoRradix in |- *; rewrite <- Fabs_correct; auto with arith real.",
                        "VernacExtend",
                        "93a145a7fce84e964942e0fc3b2b9b460c4a8092"
                    ]
                },
                {
                    "command": [
                        "unfold Fabs, FtoR in |- *; simpl in |- *.",
                        "VernacExtend",
                        "144320c03473e2678ca854c53ab954ffdb3c2e17"
                    ]
                },
                {
                    "command": [
                        "apply Rmult_le_compat_r; [ apply powerRZ_le | rewrite <- inj_pred ]; auto with real arith zarith.",
                        "VernacExtend",
                        "edf1b2027f350263b146d2978429f2cf5a591006"
                    ]
                },
                {
                    "command": [
                        "rewrite <- Zpower_nat_Z_powerRZ.",
                        "VernacExtend",
                        "df78cf96dfceed621bb634ea03f6a5ba1d47b397"
                    ]
                },
                {
                    "command": [
                        "replace (Zpower_nat radix (pred precision)) with (nNormMin radix precision); auto; apply Rle_IZR.",
                        "VernacExtend",
                        "e7773e7b3526376c18ada89e5c18e79412902449"
                    ]
                },
                {
                    "command": [
                        "apply pNormal_absolu_min with b; auto with arith zarith real.",
                        "VernacExtend",
                        "aabbef4ae10a45b9a9650f1a1bb21134916a0f5c"
                    ]
                },
                {
                    "command": [
                        "apply trans_eq with (Rabs (Fnormalize radix b precision p) * (powerRZ radix (Zpred precision) * powerRZ radix (Zsucc (- precision))))%R; [ idtac | ring ].",
                        "VernacExtend",
                        "a1b5df1bd2a8246070b7747234fae1f3bb6c6c60"
                    ]
                },
                {
                    "command": [
                        "rewrite <- powerRZ_add; auto with zarith real.",
                        "VernacExtend",
                        "4e4547ea07c8c7e5d4b07e17a3a063e54ce72721"
                    ]
                },
                {
                    "command": [
                        "replace (Zpred precision + Zsucc (- precision))%Z with 0%Z; [ simpl in |- *; ring | unfold Zsucc, Zpred in |- *; ring ]; auto with real zarith.",
                        "VernacExtend",
                        "0187c7bb9e868c7507147226d1a4bd82f348787e"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "FulpGe",
            "line_nb": 48,
            "steps": [
                {
                    "command": [
                        "intros p H.",
                        "VernacExtend",
                        "f37bbd1f6625e9877de18bdb554a5e6e38d0a116"
                    ]
                },
                {
                    "command": [
                        "replace (FtoRradix p) with (FtoRradix (Fnormalize radix b precision p)); [ idtac | unfold FtoRradix in |- *; apply FnormalizeCorrect; auto ].",
                        "VernacExtend",
                        "2d85c166321e2517e7a5b261d91e33df30dfc137"
                    ]
                },
                {
                    "command": [
                        "unfold FtoRradix in |- *; rewrite <- Fabs_correct; auto with arith real.",
                        "VernacExtend",
                        "93a145a7fce84e964942e0fc3b2b9b460c4a8092"
                    ]
                },
                {
                    "command": [
                        "unfold FtoR in |- *; simpl in |- *; unfold Fulp in |- *.",
                        "VernacExtend",
                        "02ec2713df875bc37110fb501d7f2be5e31337ca"
                    ]
                },
                {
                    "command": [
                        "apply Rmult_le_compat_r; [ apply powerRZ_le | idtac ]; auto with real arith zarith.",
                        "VernacExtend",
                        "d1a8920f601fc0298ce16f6f741cbc08eb6b0465"
                    ]
                },
                {
                    "command": [
                        "apply Rle_trans with (IZR (Zpred (Zpos (vNum b)))); [ apply Rle_IZR; auto with float zarith | idtac ].",
                        "VernacExtend",
                        "7a1b27a01f62f935815c5ccd1c56bffb44af6775"
                    ]
                },
                {
                    "command": [
                        "unfold Zpred in |- *; right; rewrite pGivesBound; replace 1%R with (IZR 1); auto with real.",
                        "VernacExtend",
                        "693e649940ca61836a00b191ac851aa804007eba"
                    ]
                },
                {
                    "command": [
                        "rewrite <- Zpower_nat_Z_powerRZ; rewrite Z_R_minus;auto.",
                        "VernacExtend",
                        "9db2f98262badac96f1c84507a17fa8aa1d568e9"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "LeFulpPos",
            "line_nb": 58,
            "steps": [
                {
                    "command": [
                        "intros x y Hx Hy H1 H2; unfold Fulp in |- *.",
                        "VernacExtend",
                        "c7b86644c523eb447a2ea5fdeaaa6959a80d4d35"
                    ]
                },
                {
                    "command": [
                        "apply Rle_powerRZ; auto with real zarith.",
                        "VernacExtend",
                        "69b1d0569e30b7fcea272fe0fa04484701d6a993"
                    ]
                },
                {
                    "command": [
                        "apply Fcanonic_Rle_Zle with radix b precision; auto with zarith arith.",
                        "VernacExtend",
                        "b62bb7b5afba7ef6e3f2b76d3bcd74e13b2aa502"
                    ]
                },
                {
                    "command": [
                        "apply FnormalizeCanonic; auto with zarith arith.",
                        "VernacExtend",
                        "307b88151947d348b48777a3204b58a1d2267c1b"
                    ]
                },
                {
                    "command": [
                        "apply FnormalizeCanonic; auto with zarith arith.",
                        "VernacExtend",
                        "307b88151947d348b48777a3204b58a1d2267c1b"
                    ]
                },
                {
                    "command": [
                        "repeat rewrite FnormalizeCorrect; auto with zarith arith real.",
                        "VernacExtend",
                        "c9fd23e13b66b3690aad89284378cd63cd83c560"
                    ]
                },
                {
                    "command": [
                        "repeat rewrite Rabs_right; auto with zarith arith real.",
                        "VernacExtend",
                        "2a6fdbec4b40df47636071ede71dd72c54e2c68c"
                    ]
                },
                {
                    "command": [
                        "apply Rge_trans with (FtoRradix x); auto with real.",
                        "VernacExtend",
                        "eb3ceda661c61a4a5ccdbe2a0057fbdee3848cbd"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "FulpSuc",
            "line_nb": 85,
            "steps": [
                {
                    "command": [
                        "intros p H'.",
                        "VernacExtend",
                        "bb6abbd0a5bb134f5276d7928176425ceae09e54"
                    ]
                },
                {
                    "command": [
                        "replace (Fulp p) with (Fulp (Fnormalize radix b precision p)).",
                        "VernacExtend",
                        "f11f7933e48757ce89d362a407c4630a720c1fd9"
                    ]
                },
                {
                    "command": [
                        "replace (FtoRradix p) with (FtoRradix (Fnormalize radix b precision p)).",
                        "VernacExtend",
                        "52870dcb4055c5500ec15faece0846aab43e186e"
                    ]
                },
                {
                    "command": [
                        "unfold FNSucc in |- *; apply FulpSucCan; auto with float arith.",
                        "VernacExtend",
                        "c68359d9640994b16c6961b6c0662d6d9ddda948"
                    ]
                },
                {
                    "command": [
                        "unfold FtoRradix in |- *; apply FnormalizeCorrect; auto.",
                        "VernacExtend",
                        "470ee4d615cb96e2c80e7ff477747cec6ab8c852"
                    ]
                },
                {
                    "command": [
                        "apply FulpComp; auto with float arith.",
                        "VernacExtend",
                        "b175e4e2f90a1cef3fcf0c75300409f661af1a32"
                    ]
                },
                {
                    "command": [
                        "unfold FtoRradix in |- *; apply FnormalizeCorrect; auto.",
                        "VernacExtend",
                        "470ee4d615cb96e2c80e7ff477747cec6ab8c852"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "FulpPred",
            "line_nb": 112,
            "steps": [
                {
                    "command": [
                        "intros p H'.",
                        "VernacExtend",
                        "bb6abbd0a5bb134f5276d7928176425ceae09e54"
                    ]
                },
                {
                    "command": [
                        "replace (Fulp p) with (Fulp (Fnormalize radix b precision p)).",
                        "VernacExtend",
                        "f11f7933e48757ce89d362a407c4630a720c1fd9"
                    ]
                },
                {
                    "command": [
                        "replace (FtoRradix p) with (FtoRradix (Fnormalize radix b precision p)).",
                        "VernacExtend",
                        "52870dcb4055c5500ec15faece0846aab43e186e"
                    ]
                },
                {
                    "command": [
                        "unfold FNPred in |- *; apply FulpPredCan; auto with float arith.",
                        "VernacExtend",
                        "60b3bff348728341bd9277c2875e5d1b8dfc631f"
                    ]
                },
                {
                    "command": [
                        "unfold FtoRradix in |- *; apply FnormalizeCorrect; auto.",
                        "VernacExtend",
                        "470ee4d615cb96e2c80e7ff477747cec6ab8c852"
                    ]
                },
                {
                    "command": [
                        "apply FulpComp; auto with float arith.",
                        "VernacExtend",
                        "b175e4e2f90a1cef3fcf0c75300409f661af1a32"
                    ]
                },
                {
                    "command": [
                        "unfold FtoRradix in |- *; apply FnormalizeCorrect; auto.",
                        "VernacExtend",
                        "470ee4d615cb96e2c80e7ff477747cec6ab8c852"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "FSuccDiffPos",
            "line_nb": 121,
            "steps": [
                {
                    "command": [
                        "intros x H.",
                        "VernacExtend",
                        "a0cd74b85812810ce5a78a540bad98f664bd4842"
                    ]
                },
                {
                    "command": [
                        "unfold FtoRradix in |- *; apply FSuccDiff1; auto with arith.",
                        "VernacExtend",
                        "8124656820e554852c98361aeae4be166cfc8b65"
                    ]
                },
                {
                    "command": [
                        "Contradict H; unfold FtoRradix, FtoR in |- *; simpl in |- *; rewrite H.",
                        "VernacExtend",
                        "069c4c4539f3b3e889b6cec36194cadb94fb7226"
                    ]
                },
                {
                    "command": [
                        "apply Rlt_not_le.",
                        "VernacExtend",
                        "970672dbfa76c5b1a5bbbe80816db4b871608528"
                    ]
                },
                {
                    "command": [
                        "replace 0%R with (0 * powerRZ radix (Fexp x))%R; [ idtac | ring ].",
                        "VernacExtend",
                        "b9702a7afdefeeec55704a461c48b90dc5c85dbd"
                    ]
                },
                {
                    "command": [
                        "apply Rlt_monotony_exp; auto with real arith.",
                        "VernacExtend",
                        "94284d21b3d9bb47fd0a48a8fea3a8d929a57a47"
                    ]
                },
                {
                    "command": [
                        "generalize (nNormPos _ radixMoreThanOne precision); replace 0%R with (IZR (- 0%nat)); auto with real zarith arith.",
                        "VernacExtend",
                        "f217d3ca5a384148bbedc10be4152120642e51cd"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "FulpFPredGePos",
            "line_nb": 130,
            "steps": [
                {
                    "command": [
                        "intros f Hf1 Hf2 H.",
                        "VernacExtend",
                        "6384dd351a95233dfa04ef7148493b42f5adca9a"
                    ]
                },
                {
                    "command": [
                        "apply LeFulpPos; auto with zarith float; unfold FtoRradix in |- *.",
                        "VernacExtend",
                        "afeaad0ef0ec341160a953347b0717ef572a730a"
                    ]
                },
                {
                    "command": [
                        "apply R0RltRlePred; auto with arith.",
                        "VernacExtend",
                        "25e4381280d0fe4ec61e7d8531ae54469bf9647b"
                    ]
                },
                {
                    "command": [
                        "apply Rlt_le; apply FPredLt; auto with arith.",
                        "VernacExtend",
                        "8dde9e088a543077a78340be69ed0cdcfe15425d"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "FSuccUlpPos",
            "line_nb": 141,
            "steps": [
                {
                    "command": [
                        "intros x H H0; rewrite CanonicFulp; auto.",
                        "VernacExtend",
                        "e0f29cb26712b56f8b0751da246f8aa626e19b4b"
                    ]
                },
                {
                    "command": [
                        "apply FSuccDiffPos; auto.",
                        "VernacExtend",
                        "7c1ffc90238d7a97afdce236b7c481deb9431ed9"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "FNSuccUlpPos",
            "line_nb": 145,
            "steps": [
                {
                    "command": [
                        "intros x H H0.",
                        "VernacExtend",
                        "b2fd7c5b00ad98f57bcf80765c472d3c23a848de"
                    ]
                },
                {
                    "command": [
                        "unfold FNSucc in |- *.",
                        "VernacExtend",
                        "613476f75fd896bb1a2ca8d254b020a40c8e2268"
                    ]
                },
                {
                    "command": [
                        "rewrite FcanonicFnormalizeEq; auto with arith.",
                        "VernacExtend",
                        "212eb7a9fbca97c39196d39b49d821543c23dba6"
                    ]
                },
                {
                    "command": [
                        "apply FSuccUlpPos; auto.",
                        "VernacExtend",
                        "14e0a351541d4738de58c18ec846f80fea9ed1f0"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "FulpFabs",
            "line_nb": 151,
            "steps": [
                {
                    "command": [
                        "intros f; unfold Fulp in |- *; case (Rle_or_lt 0 f); intros H'.",
                        "VernacExtend",
                        "6891a9e70758b53938d3e6b12325aff2ea15094e"
                    ]
                },
                {
                    "command": [
                        "replace (Fabs f) with f; auto; unfold Fabs in |- *; apply floatEq; simpl in |- *; auto with zarith real.",
                        "VernacExtend",
                        "a4b0d4fc40a32eb1ced7870a2d7f40acb50d99f9"
                    ]
                },
                {
                    "command": [
                        "apply sym_eq; apply Zabs_eq; apply LeR0Fnum with radix; auto with zarith real.",
                        "VernacExtend",
                        "1b22145e0b77f6d48d093ff55a3eb9f7f5c8e2f6"
                    ]
                },
                {
                    "command": [
                        "replace (Fabs f) with (Fopp f); [ rewrite Fnormalize_Fopp | apply floatEq; simpl in |- * ]; auto with arith.",
                        "VernacExtend",
                        "7a87251474338099004c701ec26427dd7068ba0d"
                    ]
                },
                {
                    "command": [
                        "apply sym_eq; apply Zabs_eq_opp; apply R0LeFnum with radix; auto with zarith real.",
                        "VernacExtend",
                        "040a861f0acb1134f9ad2eafe7459323fb553f7f"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "RoundedModeUlp",
            "line_nb": 158,
            "steps": [
                {
                    "command": [
                        "intros P H' p q H'0.",
                        "VernacExtend",
                        "13fa0cadd43479f697743cb37392bdfa68be5f73"
                    ]
                },
                {
                    "command": [
                        "case (Req_dec p q); intros Eq1.",
                        "VernacExtend",
                        "3c2e01a8436d308367c405c8ddeab68a95f74023"
                    ]
                },
                {
                    "command": [
                        "rewrite <- Eq1.",
                        "VernacExtend",
                        "a51963ea9953e0b8bb7f342c91aa7438ca422f43"
                    ]
                },
                {
                    "command": [
                        "replace (p - p)%R with 0%R; [ idtac | ring ].",
                        "VernacExtend",
                        "c38b419c06748d9c4b7e7c2597e4620086684231"
                    ]
                },
                {
                    "command": [
                        "rewrite Rabs_R0; auto.",
                        "VernacExtend",
                        "a77aa975c9327a7270612847ff72f6749bb6f889"
                    ]
                },
                {
                    "command": [
                        "unfold Fulp, FtoRradix, FtoR in |- *; simpl in |- *; auto with real arith.",
                        "VernacExtend",
                        "d966378b8ea746e4880feb031ba6bc1e6fd20573"
                    ]
                },
                {
                    "command": [
                        "case H'.",
                        "VernacExtend",
                        "59f58feee27b0b33473890c47947a750059972d7"
                    ]
                },
                {
                    "command": [
                        "intros H'1 H'2; elim H'2; intros H'3 H'4; elim H'4; intros H'5 H'6; case H'5 with (1 := H'0); clear H'5 H'4 H'2; intros H'5.",
                        "VernacExtend",
                        "d389127b8ec60db0f08bf39639d6f1a7643e3475"
                    ]
                },
                {
                    "command": [
                        "rewrite Rabs_right; auto.",
                        "VernacExtend",
                        "b1779d7d605b07cf96f8be33fdef3339b6652757"
                    ]
                },
                {
                    "command": [
                        "cut (Fbounded b q); [ intros B0 | case H'5; auto ].",
                        "VernacExtend",
                        "6565a1b39ad47e282136d6c4c235daba88f27f46"
                    ]
                },
                {
                    "command": [
                        "apply Rlt_le_trans with (2 := FulpSuc q B0).",
                        "VernacExtend",
                        "267460ae3dbb834711242305c9a0001c77fdd458"
                    ]
                },
                {
                    "command": [
                        "apply Rplus_lt_reg_l with (r := FtoR radix q).",
                        "VernacExtend",
                        "cd60a5512ef4170bc80c81ac9f2cef4774c1daa9"
                    ]
                },
                {
                    "command": [
                        "repeat rewrite Rplus_minus; auto.",
                        "VernacExtend",
                        "273289689f354fd3bae728939735161cb3e9ac91"
                    ]
                },
                {
                    "command": [
                        "case (Rle_or_lt (FNSucc b radix precision q) p); auto.",
                        "VernacExtend",
                        "b0183f0991da2950a5ca179ce750d91403a01c4b"
                    ]
                },
                {
                    "command": [
                        "intros H'2; absurd (FNSucc b radix precision q <= q)%R; auto.",
                        "VernacExtend",
                        "e7bf5d2cacee9c21dc4c310a7e1638c095896afc"
                    ]
                },
                {
                    "command": [
                        "apply Rgt_not_le; red in |- *; unfold FtoRradix in |- *; auto with real float arith.",
                        "VernacExtend",
                        "b5ef1d31c3d12057bdc212b5504bf2677b44101a"
                    ]
                },
                {
                    "command": [
                        "case H'5; auto.",
                        "VernacExtend",
                        "89e9ba1810a4cb4a8c5f90689d52e172f43767f6"
                    ]
                },
                {
                    "command": [
                        "intros H'4 H'7; elim H'7; intros H'8 H'9; apply H'9; clear H'7; auto.",
                        "VernacExtend",
                        "75fbbaa24fedea8af30dea3e305ad0592b50ba46"
                    ]
                },
                {
                    "command": [
                        "apply (FcanonicBound radix b); auto with float arith.",
                        "VernacExtend",
                        "56da0d6287869d9e56da23e4491d0745de57378f"
                    ]
                },
                {
                    "command": [
                        "apply Rle_ge; apply Rplus_le_reg_l with (r := FtoR radix q).",
                        "VernacExtend",
                        "ada027ce8dbcbaa68bca23a93fb28b572d6c24ca"
                    ]
                },
                {
                    "command": [
                        "repeat rewrite Rplus_minus; auto.",
                        "VernacExtend",
                        "273289689f354fd3bae728939735161cb3e9ac91"
                    ]
                },
                {
                    "command": [
                        "rewrite Rplus_0_r; apply isMin_inv1 with (1 := H'5); auto.",
                        "VernacExtend",
                        "8e5be452a6f3c204118e42aa3c5d08bda4640e46"
                    ]
                },
                {
                    "command": [
                        "rewrite Faux.Rabsolu_left1; auto.",
                        "VernacExtend",
                        "cdfb2996338b3a1e58065e7b9fa29cb7224ffecf"
                    ]
                },
                {
                    "command": [
                        "rewrite Ropp_minus_distr; auto.",
                        "VernacExtend",
                        "812e31f27c1ba41869a97e619c2d58f6a5ef01f6"
                    ]
                },
                {
                    "command": [
                        "cut (Fbounded b q); [ intros B0 | case H'5; auto ].",
                        "VernacExtend",
                        "6565a1b39ad47e282136d6c4c235daba88f27f46"
                    ]
                },
                {
                    "command": [
                        "apply Rlt_le_trans with (2 := FulpPred q B0).",
                        "VernacExtend",
                        "7fac5773cf10a8a0bf9931f403fdb5f99d6b1921"
                    ]
                },
                {
                    "command": [
                        "apply Ropp_lt_cancel; repeat rewrite Rminus_0_l.",
                        "VernacExtend",
                        "b1ddcea5e213c173632fb5cf20bd174a00036e9f"
                    ]
                },
                {
                    "command": [
                        "apply Rplus_lt_reg_l with (r := FtoR radix q).",
                        "VernacExtend",
                        "cd60a5512ef4170bc80c81ac9f2cef4774c1daa9"
                    ]
                },
                {
                    "command": [
                        "repeat rewrite Rplus_minus; auto.",
                        "VernacExtend",
                        "273289689f354fd3bae728939735161cb3e9ac91"
                    ]
                },
                {
                    "command": [
                        "case (Rle_or_lt p (FNPred b radix precision q)); auto.",
                        "VernacExtend",
                        "d9683bd56c93d8e6edab30a76355296b94ee0ce7"
                    ]
                },
                {
                    "command": [
                        "intros H'2; absurd (q <= FNPred b radix precision q)%R; auto.",
                        "VernacExtend",
                        "45a0f9be6822d558d58033c3fb88a4fa8893b665"
                    ]
                },
                {
                    "command": [
                        "apply Rgt_not_le; red in |- *; unfold FtoRradix in |- *; auto with real float arith.",
                        "VernacExtend",
                        "b5ef1d31c3d12057bdc212b5504bf2677b44101a"
                    ]
                },
                {
                    "command": [
                        "case H'5; auto.",
                        "VernacExtend",
                        "89e9ba1810a4cb4a8c5f90689d52e172f43767f6"
                    ]
                },
                {
                    "command": [
                        "intros H'4 H'7; elim H'7; intros H'8 H'9; apply H'9; clear H'7; auto.",
                        "VernacExtend",
                        "75fbbaa24fedea8af30dea3e305ad0592b50ba46"
                    ]
                },
                {
                    "command": [
                        "apply (FcanonicBound radix b); auto with float arith.",
                        "VernacExtend",
                        "56da0d6287869d9e56da23e4491d0745de57378f"
                    ]
                },
                {
                    "command": [
                        "intros H1; apply Rplus_lt_compat_l; auto with real; apply Ropp_lt_contravar; unfold Rminus in |- *; auto with real.",
                        "VernacExtend",
                        "b50a66bbc54a56f12571a10af5e35805c9a91fff"
                    ]
                },
                {
                    "command": [
                        "apply Rplus_le_reg_l with (r := FtoR radix q).",
                        "VernacExtend",
                        "202a2ed6dd1ded75fdeee55272a1b312fa735a89"
                    ]
                },
                {
                    "command": [
                        "repeat rewrite Rplus_minus; auto.",
                        "VernacExtend",
                        "273289689f354fd3bae728939735161cb3e9ac91"
                    ]
                },
                {
                    "command": [
                        "rewrite Rplus_0_r; apply isMax_inv1 with (1 := H'5).",
                        "VernacExtend",
                        "3575792f812b9e7a42aafd2e3250efc6b3949d85"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "RoundedModeErrorExpStrict",
            "line_nb": 199,
            "steps": [
                {
                    "command": [
                        "intros P H p q x H0 H1 H2 H3 H4.",
                        "VernacExtend",
                        "0496c6b7f08d158831d1e6c728ca96eee247b1bf"
                    ]
                },
                {
                    "command": [
                        "apply Zlt_powerRZ with (e := IZR radix); auto with real zarith.",
                        "VernacExtend",
                        "5b59ba3c77b97f42f3ffcd8d410e62cf5bf7de38"
                    ]
                },
                {
                    "command": [
                        "apply Rle_lt_trans with (FtoRradix (Fabs q)).",
                        "VernacExtend",
                        "8b9f97e87af420551ef9e4ceb8e876fa6d33433c"
                    ]
                },
                {
                    "command": [
                        "replace (powerRZ radix (Fexp q)) with (FtoRradix (Float 1%nat (Fexp q))); unfold FtoRradix in |- *; [ apply Fop.RleFexpFabs; auto with arith | unfold FtoR in |- *; simpl in |- *; ring ].",
                        "VernacExtend",
                        "6b0963cf1811d482e6205f6b51fee502daf2b47d"
                    ]
                },
                {
                    "command": [
                        "rewrite (Fabs_correct radix); auto with zarith.",
                        "VernacExtend",
                        "514703ea863a52786a0bf19f73afc100841e48a9"
                    ]
                },
                {
                    "command": [
                        "fold FtoRradix in |- *; rewrite H3.",
                        "VernacExtend",
                        "ed72c181bd6075afbb9975d3ca74cabbd994711d"
                    ]
                },
                {
                    "command": [
                        "apply Rlt_le_trans with (Fulp p); [ apply RoundedModeUlp with P; auto | unfold Fulp in |- * ].",
                        "VernacExtend",
                        "6427d56ee264c976855ba687ff963029ee744eaf"
                    ]
                },
                {
                    "command": [
                        "apply Rle_powerRZ; auto with real zarith.",
                        "VernacExtend",
                        "69b1d0569e30b7fcea272fe0fa04484701d6a993"
                    ]
                },
                {
                    "command": [
                        "apply FcanonicLeastExp with radix b precision; auto with real arith.",
                        "VernacExtend",
                        "2551aa4336ddf06ee2ed511910d4706afdbed423"
                    ]
                },
                {
                    "command": [
                        "apply sym_eq; apply FnormalizeCorrect; auto.",
                        "VernacExtend",
                        "1ce4b3eb95883f2cb55c358368109d3695e7f9f4"
                    ]
                },
                {
                    "command": [
                        "apply FnormalizeCanonic; auto with zarith.",
                        "VernacExtend",
                        "304000ae6835708ce25a32e9eaba074c009d46a4"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "RoundedModeProjectorIdem",
            "line_nb": 212,
            "steps": [
                {
                    "command": [
                        "intros P p H' H.",
                        "VernacExtend",
                        "7f7469af10721ce3b86a6e486d56683bc6943c4b"
                    ]
                },
                {
                    "command": [
                        "elim H'; intros H'0 H'1; elim H'1; intros H'2 H'3; elim H'3; intros H'4 H'5; clear H'3 H'1.",
                        "VernacExtend",
                        "239b62ee2d7ab3bb607569631d5edf7dd43a4365"
                    ]
                },
                {
                    "command": [
                        "case (H'0 p).",
                        "VernacExtend",
                        "504dd22b325cd54c7d35806c39586b9cad6ea187"
                    ]
                },
                {
                    "command": [
                        "intros x H'6.",
                        "VernacExtend",
                        "24ea3333f266879be987d9c6e546b1db8a5c4cfc"
                    ]
                },
                {
                    "command": [
                        "apply (H'2 p p x); auto.",
                        "VernacExtend",
                        "d6fee37ed4206f4aa198aee7c24fa03d5d8f8211"
                    ]
                },
                {
                    "command": [
                        "apply sym_eq; apply (RoundedProjector _ _ P H'); auto.",
                        "VernacExtend",
                        "723a5616d5e4c312b6bde07c5bbd807194da7745"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "RoundedModeBounded",
            "line_nb": 220,
            "steps": [
                {
                    "command": [
                        "intros P r q H' H'0.",
                        "VernacExtend",
                        "26b5fca768fa6bfbe5c95bdb226d3464299974bd"
                    ]
                },
                {
                    "command": [
                        "case H'.",
                        "VernacExtend",
                        "59f58feee27b0b33473890c47947a750059972d7"
                    ]
                },
                {
                    "command": [
                        "intros H'1 H'2; elim H'2; intros H'3 H'4; elim H'4; intros H'5 H'6; case H'5 with (1 := H'0); clear H'4 H'2; intros H; case H; auto.",
                        "VernacExtend",
                        "236cfe309ef25741e1400d515610a30599981cdc"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "RoundedModeProjectorIdemEq",
            "line_nb": 225,
            "steps": [
                {
                    "command": [
                        "intros P p q H' H'0 H'1.",
                        "VernacExtend",
                        "8350e9b1b3f93b094d36a3734f43bb679041b505"
                    ]
                },
                {
                    "command": [
                        "cut (MinOrMaxP b radix P); [ intros Mn; case (Mn p q); auto; intros Mn1 | auto with inv ].",
                        "VernacExtend",
                        "2bb3157bd0449f818510be5c6448adb9816fb3fb"
                    ]
                },
                {
                    "command": [
                        "apply sym_eq; apply MinEq with (1 := Mn1); auto.",
                        "VernacExtend",
                        "ca5be1531069d15e082f031f25b0b89bae17932f"
                    ]
                },
                {
                    "command": [
                        "apply (RoundedModeProjectorIdem (isMin b radix)); auto.",
                        "VernacExtend",
                        "0edc29085f3d31bf22294a533fc2f6227c914ad0"
                    ]
                },
                {
                    "command": [
                        "apply MinRoundedModeP with (precision := precision); auto.",
                        "VernacExtend",
                        "9c713ab984e57490a2425136b2f02c1e3b6ef6ba"
                    ]
                },
                {
                    "command": [
                        "apply sym_eq; apply MaxEq with (1 := Mn1); auto.",
                        "VernacExtend",
                        "44e67e71726e152525f7c66966268c176f07c623"
                    ]
                },
                {
                    "command": [
                        "apply (RoundedModeProjectorIdem (isMax b radix)); auto.",
                        "VernacExtend",
                        "b19c3fe14ba0060fc60c57b36c941971383b6bdb"
                    ]
                },
                {
                    "command": [
                        "apply MaxRoundedModeP with (precision := precision); auto.",
                        "VernacExtend",
                        "57af07bc0167c3ae09328ee23083b26450f616a8"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "RoundedModeMult",
            "line_nb": 235,
            "steps": [
                {
                    "command": [
                        "intros P H' r q q' H'0 H'1.",
                        "VernacExtend",
                        "e5ef6c05cbffd52b8a207df08f7dde0ba3df97bb"
                    ]
                },
                {
                    "command": [
                        "replace (radix * q')%R with (FtoRradix (Float (Fnum q') (Fexp q' + 1%nat))).",
                        "VernacExtend",
                        "56fe63bbfb005107f96ca2fc2d214f25fd080684"
                    ]
                },
                {
                    "command": [
                        "intros H'2; case H'2.",
                        "VernacExtend",
                        "c8f8de840635a3862d3b19db53df301ccd7a77f0"
                    ]
                },
                {
                    "command": [
                        "intros H'3; case H'; intros H'4 H'5; elim H'5; intros H'6 H'7; elim H'7; intros H'8 H'9; apply H'9 with (1 := H'3); clear H'7 H'5; auto.",
                        "VernacExtend",
                        "078b67e5647a4577d6281dd1f8c66ec266813705"
                    ]
                },
                {
                    "command": [
                        "apply RoundedModeProjectorIdem; auto.",
                        "VernacExtend",
                        "f1ffe11ba55f73a16400349195deb28b205e724b"
                    ]
                },
                {
                    "command": [
                        "apply FBoundedScale; auto.",
                        "VernacExtend",
                        "88137acc333cc6889ee92b12279699a163b5756c"
                    ]
                },
                {
                    "command": [
                        "intros H'3.",
                        "VernacExtend",
                        "2e512d3c52562ab0fb19b78be8662c12b7168c72"
                    ]
                },
                {
                    "command": [
                        "replace (FtoRradix q) with (FtoRradix (Float (Fnum q') (Fexp q' + 1%nat))); auto with real.",
                        "VernacExtend",
                        "40344b0255e1bc33b014a615a0d24d825734a19d"
                    ]
                },
                {
                    "command": [
                        "apply (RoundedProjector _ _ P H'); auto.",
                        "VernacExtend",
                        "d9f18303147b89d6255ff7bef3914e0f0f7c1f8c"
                    ]
                },
                {
                    "command": [
                        "apply FBoundedScale; auto.",
                        "VernacExtend",
                        "88137acc333cc6889ee92b12279699a163b5756c"
                    ]
                },
                {
                    "command": [
                        "case H'.",
                        "VernacExtend",
                        "59f58feee27b0b33473890c47947a750059972d7"
                    ]
                },
                {
                    "command": [
                        "intros H'4 H'5; elim H'5; intros H'6 H'7; clear H'5.",
                        "VernacExtend",
                        "2a5fd77671551db7f70f88b1f0a8218b2bdc1e39"
                    ]
                },
                {
                    "command": [
                        "apply (H'6 r (Float (Fnum q') (Fexp q' + 1%nat)) q); auto.",
                        "VernacExtend",
                        "7452932176f2fdc47a82b69a07b7b51770758d05"
                    ]
                },
                {
                    "command": [
                        "apply RoundedModeBounded with (P := P) (r := r); auto.",
                        "VernacExtend",
                        "fdf71d1d1c50548b71cff0572744e94aec5ff713"
                    ]
                },
                {
                    "command": [
                        "rewrite (FvalScale _ radixMoreThanOne b).",
                        "VernacExtend",
                        "0db6de4371be81437fbb2210bed2f70b9a1d6f4c"
                    ]
                },
                {
                    "command": [
                        "rewrite powerRZ_1; auto.",
                        "VernacExtend",
                        "867bec53224d4d0b9decf7e33f61bcdcb9eea8f5"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "RoundedModeMultLess",
            "line_nb": 253,
            "steps": [
                {
                    "command": [
                        "intros P H' r q q' H'0 H'1.",
                        "VernacExtend",
                        "e5ef6c05cbffd52b8a207df08f7dde0ba3df97bb"
                    ]
                },
                {
                    "command": [
                        "replace (radix * q')%R with (FtoRradix (Float (Fnum q') (Fexp q' + 1%nat))).",
                        "VernacExtend",
                        "56fe63bbfb005107f96ca2fc2d214f25fd080684"
                    ]
                },
                {
                    "command": [
                        "intros H'2; case H'2.",
                        "VernacExtend",
                        "c8f8de840635a3862d3b19db53df301ccd7a77f0"
                    ]
                },
                {
                    "command": [
                        "intros H'3; case H'; intros H'4 H'5; elim H'5; intros H'6 H'7; elim H'7; intros H'8 H'9; apply H'9 with (1 := H'3); clear H'7 H'5; auto.",
                        "VernacExtend",
                        "078b67e5647a4577d6281dd1f8c66ec266813705"
                    ]
                },
                {
                    "command": [
                        "apply RoundedModeProjectorIdem; auto.",
                        "VernacExtend",
                        "f1ffe11ba55f73a16400349195deb28b205e724b"
                    ]
                },
                {
                    "command": [
                        "apply FBoundedScale; auto.",
                        "VernacExtend",
                        "88137acc333cc6889ee92b12279699a163b5756c"
                    ]
                },
                {
                    "command": [
                        "intros H'3.",
                        "VernacExtend",
                        "2e512d3c52562ab0fb19b78be8662c12b7168c72"
                    ]
                },
                {
                    "command": [
                        "replace (FtoRradix q) with (FtoRradix (Float (Fnum q') (Fexp q' + 1%nat))); auto with real.",
                        "VernacExtend",
                        "40344b0255e1bc33b014a615a0d24d825734a19d"
                    ]
                },
                {
                    "command": [
                        "apply (RoundedProjector _ _ P H'); auto.",
                        "VernacExtend",
                        "d9f18303147b89d6255ff7bef3914e0f0f7c1f8c"
                    ]
                },
                {
                    "command": [
                        "apply FBoundedScale; auto.",
                        "VernacExtend",
                        "88137acc333cc6889ee92b12279699a163b5756c"
                    ]
                },
                {
                    "command": [
                        "unfold FtoRradix in H'3; rewrite H'3; auto.",
                        "VernacExtend",
                        "cd02bd904d61a3eaeb86b7eaf7c6e40a2ccd267a"
                    ]
                },
                {
                    "command": [
                        "case H'.",
                        "VernacExtend",
                        "59f58feee27b0b33473890c47947a750059972d7"
                    ]
                },
                {
                    "command": [
                        "intros H'4 H'5; elim H'5; intros H'6 H'7; clear H'5.",
                        "VernacExtend",
                        "2a5fd77671551db7f70f88b1f0a8218b2bdc1e39"
                    ]
                },
                {
                    "command": [
                        "unfold FtoRradix in |- *; rewrite FvalScale; auto.",
                        "VernacExtend",
                        "9e0ce178ac55e164f0ae00ced32123531c540a45"
                    ]
                },
                {
                    "command": [
                        "rewrite powerRZ_1; auto.",
                        "VernacExtend",
                        "867bec53224d4d0b9decf7e33f61bcdcb9eea8f5"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "RleMinR0",
            "line_nb": 270,
            "steps": [
                {
                    "command": [
                        "intros r min H' H'0.",
                        "VernacExtend",
                        "18ade96bc81d1195ae37eba08868bf461cbf849d"
                    ]
                },
                {
                    "command": [
                        "rewrite <- (FzeroisZero radix b).",
                        "VernacExtend",
                        "6120a5fdd5dc0fe24262b2396a3d5f373340115f"
                    ]
                },
                {
                    "command": [
                        "case H'; intros H'1.",
                        "VernacExtend",
                        "97b56f5c27c2811ce6acf0996a62c51a4608adef"
                    ]
                },
                {
                    "command": [
                        "apply (MonotoneMin b radix) with (p := FtoRradix (Fzero (- dExp b))) (q := r); auto.",
                        "VernacExtend",
                        "d2cd16f0ac5e8a1e7a08f6e0024ac22c2f3766c3"
                    ]
                },
                {
                    "command": [
                        "unfold FtoRradix in |- *; rewrite (FzeroisZero radix b); auto.",
                        "VernacExtend",
                        "256dc0a1d7dc67fbe874338fda6c1de395aa76b9"
                    ]
                },
                {
                    "command": [
                        "apply (RoundedModeProjectorIdem (isMin b radix)); auto.",
                        "VernacExtend",
                        "0edc29085f3d31bf22294a533fc2f6227c914ad0"
                    ]
                },
                {
                    "command": [
                        "apply MinRoundedModeP with (precision := precision); auto with float.",
                        "VernacExtend",
                        "e030a7a9b86bac504766e58e5ae7859cd2a93917"
                    ]
                },
                {
                    "command": [
                        "apply FboundedFzero; auto.",
                        "VernacExtend",
                        "8d0d3171dfdcd871c85f5387344c815eca8c2e6c"
                    ]
                },
                {
                    "command": [
                        "replace (FtoR radix (Fzero (- dExp b))) with (FtoRradix min); auto with real.",
                        "VernacExtend",
                        "4d19a7415da48f00a41a571bb0899c524efdf56a"
                    ]
                },
                {
                    "command": [
                        "apply sym_eq; apply (ProjectMin b radix).",
                        "VernacExtend",
                        "4bb41ae88a41209263b2867d53b36ff88553a3a1"
                    ]
                },
                {
                    "command": [
                        "apply FboundedFzero; auto.",
                        "VernacExtend",
                        "8d0d3171dfdcd871c85f5387344c815eca8c2e6c"
                    ]
                },
                {
                    "command": [
                        "rewrite <- H'1 in H'0; rewrite <- (FzeroisZero radix b) in H'0; auto.",
                        "VernacExtend",
                        "f5d521094e24c67b56c3377b40a689ac912e2891"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "RleRoundedR0",
            "line_nb": 284,
            "steps": [
                {
                    "command": [
                        "intros P p r H' H'0 H'1.",
                        "VernacExtend",
                        "1e88af9e79ac1309240e9db62c48e7e5871a2023"
                    ]
                },
                {
                    "command": [
                        "case H'.",
                        "VernacExtend",
                        "59f58feee27b0b33473890c47947a750059972d7"
                    ]
                },
                {
                    "command": [
                        "intros H'2 H'3; Elimc H'3; intros H'3 H'4; Elimc H'4; intros H'4 H'5; case (H'4 r p); auto; intros H'6.",
                        "VernacExtend",
                        "ad3fa6d4ad043bd1e0e2e22dfb8f296d26e201d6"
                    ]
                },
                {
                    "command": [
                        "apply RleMinR0 with (r := r); auto.",
                        "VernacExtend",
                        "f9e2a268c5e5c502e4cf91b652ab0b32dfc6e863"
                    ]
                },
                {
                    "command": [
                        "apply Rle_trans with r; auto; apply isMax_inv1 with (1 := H'6).",
                        "VernacExtend",
                        "cb910d47c91385ea7856895628729886ad87a0e0"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "RleMaxR0",
            "line_nb": 291,
            "steps": [
                {
                    "command": [
                        "intros r max H' H'0.",
                        "VernacExtend",
                        "d7403a0413998e9b024109acfbf2947baacd5672"
                    ]
                },
                {
                    "command": [
                        "rewrite <- (FzeroisZero radix b).",
                        "VernacExtend",
                        "6120a5fdd5dc0fe24262b2396a3d5f373340115f"
                    ]
                },
                {
                    "command": [
                        "case H'; intros H'1.",
                        "VernacExtend",
                        "97b56f5c27c2811ce6acf0996a62c51a4608adef"
                    ]
                },
                {
                    "command": [
                        "apply (MonotoneMax b radix) with (q := FtoRradix (Fzero (- dExp b))) (p := r); auto.",
                        "VernacExtend",
                        "360f705d96f1dccb84da3695a36b3ba202b57d22"
                    ]
                },
                {
                    "command": [
                        "unfold FtoRradix in |- *; rewrite FzeroisZero; auto.",
                        "VernacExtend",
                        "44f6a48d90bcef2904bb88b103c74ff44052f74a"
                    ]
                },
                {
                    "command": [
                        "apply (RoundedModeProjectorIdem (isMax b radix)); auto.",
                        "VernacExtend",
                        "b19c3fe14ba0060fc60c57b36c941971383b6bdb"
                    ]
                },
                {
                    "command": [
                        "apply MaxRoundedModeP with (precision := precision); auto.",
                        "VernacExtend",
                        "57af07bc0167c3ae09328ee23083b26450f616a8"
                    ]
                },
                {
                    "command": [
                        "apply FboundedFzero; auto.",
                        "VernacExtend",
                        "8d0d3171dfdcd871c85f5387344c815eca8c2e6c"
                    ]
                },
                {
                    "command": [
                        "replace (FtoR radix (Fzero (- dExp b))) with (FtoRradix max); auto with real.",
                        "VernacExtend",
                        "d8cd949a55ce5dc60fe0f74daa2a4bc07dee912e"
                    ]
                },
                {
                    "command": [
                        "apply sym_eq; apply (ProjectMax b radix).",
                        "VernacExtend",
                        "5c40d7994f9fbd457b3f69ffe5956ef92cfe5998"
                    ]
                },
                {
                    "command": [
                        "apply FboundedFzero; auto.",
                        "VernacExtend",
                        "8d0d3171dfdcd871c85f5387344c815eca8c2e6c"
                    ]
                },
                {
                    "command": [
                        "rewrite H'1 in H'0; rewrite <- (FzeroisZero radix b) in H'0; auto.",
                        "VernacExtend",
                        "f32575e2f073760605f3ab692a957c68683acc54"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "RleRoundedLessR0",
            "line_nb": 305,
            "steps": [
                {
                    "command": [
                        "intros P p r H' H'0 H'1.",
                        "VernacExtend",
                        "1e88af9e79ac1309240e9db62c48e7e5871a2023"
                    ]
                },
                {
                    "command": [
                        "case H'.",
                        "VernacExtend",
                        "59f58feee27b0b33473890c47947a750059972d7"
                    ]
                },
                {
                    "command": [
                        "intros H'2 H'3; Elimc H'3; intros H'3 H'4; Elimc H'4; intros H'4 H'5; case (H'4 r p); auto; intros H'6.",
                        "VernacExtend",
                        "ad3fa6d4ad043bd1e0e2e22dfb8f296d26e201d6"
                    ]
                },
                {
                    "command": [
                        "apply Rle_trans with r; auto; apply isMin_inv1 with (1 := H'6).",
                        "VernacExtend",
                        "4dfe117c6006df80ebd97df75104aa3d6c0626fc"
                    ]
                },
                {
                    "command": [
                        "apply RleMaxR0 with (r := r); auto.",
                        "VernacExtend",
                        "2535a839893a20ad104de3ef366cb99175cad26f"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "PminPos",
            "line_nb": 312,
            "steps": [
                {
                    "command": [
                        "intros p min H' H'0 H'1.",
                        "VernacExtend",
                        "f7611d813b7fc155bab563fa246ced4d192b5f65"
                    ]
                },
                {
                    "command": [
                        "cut (min <= / 2%nat * p)%R; [ intros Rl1; Casec Rl1; intros Rl1 | apply isMin_inv1 with (1 := H'1); auto ].",
                        "VernacExtend",
                        "c915653eec193e1a4591cf39c828fa2e3901894f"
                    ]
                },
                {
                    "command": [
                        "case (eqExpMax _ radixMoreThanOne b min p); auto.",
                        "VernacExtend",
                        "ca5c34b9a1f518675633fb49a2467d7bb22c5ba2"
                    ]
                },
                {
                    "command": [
                        "case H'1; auto.",
                        "VernacExtend",
                        "a44f1b914e489dd19b841fdfab025ba14e3d8f86"
                    ]
                },
                {
                    "command": [
                        "rewrite Fabs_correct; auto with arith.",
                        "VernacExtend",
                        "ec8e84a02c40373ce20ef61cb775aa12999bc762"
                    ]
                },
                {
                    "command": [
                        "rewrite Rabs_right; auto.",
                        "VernacExtend",
                        "b1779d7d605b07cf96f8be33fdef3339b6652757"
                    ]
                },
                {
                    "command": [
                        "apply Rle_trans with (/ 2%nat * p)%R; auto.",
                        "VernacExtend",
                        "2546d8dca6b10358dd68cfb51e88c392c2085418"
                    ]
                },
                {
                    "command": [
                        "apply Rlt_le; auto.",
                        "VernacExtend",
                        "4003e3e1c449ee89cad9e953d0a562db8235648c"
                    ]
                },
                {
                    "command": [
                        "apply Rmult_le_reg_l with (r := INR 2); auto with real.",
                        "VernacExtend",
                        "d844aeae389b738df4405a2dd7bb4aed456229ac"
                    ]
                },
                {
                    "command": [
                        "rewrite <- Rmult_assoc; rewrite Rinv_r; auto with real; rewrite Rmult_ne_r; auto with real.",
                        "VernacExtend",
                        "8e7e465df3bd232b3203728cf304f7a5bad70a4e"
                    ]
                },
                {
                    "command": [
                        "apply Rle_ge; apply RleMinR0 with (r := (/ 2%nat * p)%R); auto.",
                        "VernacExtend",
                        "51105b2db08485ac41dcaf13300ddf2ed4349b14"
                    ]
                },
                {
                    "command": [
                        "apply Rmult_le_reg_l with (r := INR 2); auto with real.",
                        "VernacExtend",
                        "d844aeae389b738df4405a2dd7bb4aed456229ac"
                    ]
                },
                {
                    "command": [
                        "rewrite <- Rmult_assoc; rewrite Rinv_r; auto with real; rewrite Rmult_1_l; rewrite Rmult_0_r; auto with real.",
                        "VernacExtend",
                        "390e360380ecb15b19665b89a766189b6dca8783"
                    ]
                },
                {
                    "command": [
                        "intros min' H'2; elim H'2; intros H'3 H'4; elim H'4; intros H'5 H'6; clear H'4 H'2.",
                        "VernacExtend",
                        "f07535d88cc6c49669a551568b8b66b431e02b1e"
                    ]
                },
                {
                    "command": [
                        "case (FboundNext _ radixMoreThanOne b precision) with (p := min'); auto with arith; fold FtoRradix in |- *.",
                        "VernacExtend",
                        "c341d8dbcdfebe452059922b54fb8e1a358a264e"
                    ]
                },
                {
                    "command": [
                        "intros Smin H'2; elim H'2; intros H'4 H'7; clear H'2.",
                        "VernacExtend",
                        "2c854c9fb591f41c90250ad8da290d5d94e83e23"
                    ]
                },
                {
                    "command": [
                        "exists Smin; split; auto.",
                        "VernacExtend",
                        "4ffe643310f5a2dbecfd28199926f9222bc2e888"
                    ]
                },
                {
                    "command": [
                        "rewrite H'7; auto.",
                        "VernacExtend",
                        "66fce77f8c179e59e047f9511f89b1cbe3fe56ec"
                    ]
                },
                {
                    "command": [
                        "unfold FtoRradix in |- *.",
                        "VernacExtend",
                        "ca5b46f9af7312531a190b63534dffaa3cbf2633"
                    ]
                },
                {
                    "command": [
                        "rewrite <- H'5; auto.",
                        "VernacExtend",
                        "f8b62f99b3718e60bd969c76931397a10bee1bff"
                    ]
                },
                {
                    "command": [
                        "replace (Float (Zsucc (Fnum min')) (Fexp min')) with (Float (Fnum (Fshift radix (Zabs_nat (Fexp p - Fexp min')) p) - Fnum min') (Fexp min')); auto.",
                        "VernacExtend",
                        "9db23260369e1e24f065d365314d3681895e22bf"
                    ]
                },
                {
                    "command": [
                        "unfold FtoRradix, FtoR in |- *; simpl in |- *.",
                        "VernacExtend",
                        "85a3da1582165d92ceb7faef707de88822bccf1a"
                    ]
                },
                {
                    "command": [
                        "rewrite <- Z_R_minus.",
                        "VernacExtend",
                        "f7f6d8d1cb517a19b80ecb78fa526746803e6aed"
                    ]
                },
                {
                    "command": [
                        "rewrite (fun x y z : R => Rmult_comm (x - y) z); rewrite Rmult_minus_distr_l; repeat rewrite (fun x : Z => Rmult_comm (powerRZ radix x)).",
                        "VernacExtend",
                        "c4528d771c0ff182337a51854e2818e0d117df26"
                    ]
                },
                {
                    "command": [
                        "rewrite Rmult_IZR.",
                        "VernacExtend",
                        "b795c3b06d24e235dcd0b237a976408f905ddd8d"
                    ]
                },
                {
                    "command": [
                        "rewrite Zpower_nat_powerRZ_absolu; auto with zarith.",
                        "VernacExtend",
                        "e1e964236539449012576359035712812e08756e"
                    ]
                },
                {
                    "command": [
                        "rewrite Rmult_assoc.",
                        "VernacExtend",
                        "323caa1eefcb937c18a66a7144c1e29b2c1a3e40"
                    ]
                },
                {
                    "command": [
                        "rewrite <- (powerRZ_add radix); auto with real zarith.",
                        "VernacExtend",
                        "3cba8dd16e2dbe1ff898b3b0c9e83ccce95945f4"
                    ]
                },
                {
                    "command": [
                        "replace (Fexp p - Fexp min' + Fexp min')%Z with (Fexp p); [ auto | ring ].",
                        "VernacExtend",
                        "a9144f9c37a4ec5f5ab4adddae77cd8bbe4f96cf"
                    ]
                },
                {
                    "command": [
                        "apply floatEq; auto; simpl in |- *.",
                        "VernacExtend",
                        "58f628b852cc7405a62c690cca27cde8535c5557"
                    ]
                },
                {
                    "command": [
                        "apply Zle_antisym.",
                        "VernacExtend",
                        "d5fb169d90b6dbda1fca926c28e78732e286a418"
                    ]
                },
                {
                    "command": [
                        "apply Zlt_succ_le.",
                        "VernacExtend",
                        "c303523f868e2dd2771675d2de37d7328c4e957b"
                    ]
                },
                {
                    "command": [
                        "apply Zplus_lt_reg_l with (p := Fnum min'); auto.",
                        "VernacExtend",
                        "f1545b67cd31d83b7c9e06dde883e24970f8b4b3"
                    ]
                },
                {
                    "command": [
                        "cut (forall x y : Z, (x + (y - x))%Z = y); [ intros tmp; rewrite tmp; clear tmp | intros; ring ].",
                        "VernacExtend",
                        "eb7b7e44360e22e6f6cc365ce844b73be8053624"
                    ]
                },
                {
                    "command": [
                        "replace (Fnum min' + Zsucc (Zsucc (Fnum min')))%Z with (2%nat * Zsucc (Fnum min'))%Z.",
                        "VernacExtend",
                        "8c182168878890e056ccd84aa518459c9180e636"
                    ]
                },
                {
                    "command": [
                        "apply (Rlt_Float_Zlt radix) with (r := Fexp min'); auto; fold FtoRradix in |- *.",
                        "VernacExtend",
                        "71a10da6149932ab6187f897e7bcfe5822121445"
                    ]
                },
                {
                    "command": [
                        "replace (FtoRradix (Float (2%nat * Zsucc (Fnum min')) (Fexp min'))) with (2%nat * Float (Zsucc (Fnum min')) (Fexp min'))%R.",
                        "VernacExtend",
                        "d32e49933364590d13e57d787b9c1fe337527abf"
                    ]
                },
                {
                    "command": [
                        "rewrite <- H'7.",
                        "VernacExtend",
                        "3ada3afda3aab2a1783d4fd8d31b1b6af8a847bf"
                    ]
                },
                {
                    "command": [
                        "replace (Float (Fnum p * Zpower_nat radix (Zabs_nat (Fexp p - Fexp min'))) (Fexp min')) with (Fshift radix (Zabs_nat (Fexp p - Fexp min')) p).",
                        "VernacExtend",
                        "2896f1a2b1f68ba8008f83d3441ee53adebe3664"
                    ]
                },
                {
                    "command": [
                        "unfold FtoRradix in |- *; rewrite FshiftCorrect; auto.",
                        "VernacExtend",
                        "5abbc7cb08d11ed8fd912e6cc82302a9cbf61541"
                    ]
                },
                {
                    "command": [
                        "apply Rmult_lt_reg_l with (r := (/ 2%nat)%R); auto with real.",
                        "VernacExtend",
                        "8bc034dfa0cf0586596ad4f7208b865e73eda04f"
                    ]
                },
                {
                    "command": [
                        "rewrite <- Rmult_assoc; rewrite Rinv_l; auto with real; rewrite Rmult_1_l; auto with real.",
                        "VernacExtend",
                        "d35ca5901edc71ed18310778d2a4feec34ad5e94"
                    ]
                },
                {
                    "command": [
                        "case (Rle_or_lt Smin (/ 2%nat * FtoR radix p)); auto.",
                        "VernacExtend",
                        "fde5a530927b3289adee899b406f43f9c7e97a2a"
                    ]
                },
                {
                    "command": [
                        "intros H'2; absurd (min < Smin)%R.",
                        "VernacExtend",
                        "40199cc9e2e71a1cc68978681a993dc00b3ef6a4"
                    ]
                },
                {
                    "command": [
                        "apply Rle_not_lt.",
                        "VernacExtend",
                        "1f0f6b47a7d49626d97b2585f7610e291096035d"
                    ]
                },
                {
                    "command": [
                        "case H'1; auto.",
                        "VernacExtend",
                        "a44f1b914e489dd19b841fdfab025ba14e3d8f86"
                    ]
                },
                {
                    "command": [
                        "intros H'8 H'9; elim H'9; intros H'10 H'11; apply H'11; clear H'9; auto.",
                        "VernacExtend",
                        "609494d3032c106214d000bc67ffbc2721ef3301"
                    ]
                },
                {
                    "command": [
                        "rewrite H'7; unfold FtoRradix in |- *; rewrite <- H'5; auto.",
                        "VernacExtend",
                        "87199accaa7a50d5801a25053809e1652e0c35f2"
                    ]
                },
                {
                    "command": [
                        "unfold FtoR in |- *; simpl in |- *; apply Rlt_monotony_exp; auto with real zarith.",
                        "VernacExtend",
                        "b039a1e6e048858bb6388ed1a32a9335db92e6c9"
                    ]
                },
                {
                    "command": [
                        "unfold Fshift in |- *; simpl in |- *.",
                        "VernacExtend",
                        "bc2226e4b5a4ef5bbaea414d285c81f30a1eb932"
                    ]
                },
                {
                    "command": [
                        "replace (Fexp p - Zabs_nat (Fexp p - Fexp min'))%Z with (Fexp min'); auto.",
                        "VernacExtend",
                        "f076e091746c53ee9990798f098e21e038375c3f"
                    ]
                },
                {
                    "command": [
                        "rewrite inj_abs; auto.",
                        "VernacExtend",
                        "16d1a62dc5288156f6709cea7b377c677cf15691"
                    ]
                },
                {
                    "command": [
                        "ring.",
                        "VernacExtend",
                        "baadd9fc4c175005af409bb466fcea9fab25b4e6"
                    ]
                },
                {
                    "command": [
                        "auto with zarith.",
                        "VernacExtend",
                        "23f42fd3236dcece4a40b3a666dce57fea69a9c0"
                    ]
                },
                {
                    "command": [
                        "replace (FtoRradix (Float (2%nat * Zsucc (Fnum min')) (Fexp min'))) with ((2%nat * Zsucc (Fnum min'))%Z * powerRZ radix (Fexp min'))%R.",
                        "VernacExtend",
                        "52b1cda75fe38093c50717d4d7f1ea0d078ca16c"
                    ]
                },
                {
                    "command": [
                        "rewrite Rmult_IZR; auto.",
                        "VernacExtend",
                        "44aee418e2ca54b49dbc7a73f12b6ebf687258ce"
                    ]
                },
                {
                    "command": [
                        "unfold FtoRradix, FtoR in |- *; simpl in |- *; ring.",
                        "VernacExtend",
                        "5b3b96c09542c1778400f311cf15a289b4188c3b"
                    ]
                },
                {
                    "command": [
                        "simpl in |- *; auto.",
                        "VernacExtend",
                        "9b631374b1d3067f703fd99c5dc6e1e5c8405957"
                    ]
                },
                {
                    "command": [
                        "replace (Z_of_nat 2) with (Zsucc (Zsucc 0)).",
                        "VernacExtend",
                        "7ff6d063b754fd53e3dc757809cbea3639d5c777"
                    ]
                },
                {
                    "command": [
                        "repeat rewrite <- Zmult_succ_l_reverse; unfold Zsucc in |- *; ring.",
                        "VernacExtend",
                        "e858aca549d9a4566714c89c8f83253b41a1c589"
                    ]
                },
                {
                    "command": [
                        "simpl in |- *; auto.",
                        "VernacExtend",
                        "9b631374b1d3067f703fd99c5dc6e1e5c8405957"
                    ]
                },
                {
                    "command": [
                        "apply Zlt_le_succ; auto.",
                        "VernacExtend",
                        "32f1bd7a8ae1c1f4de25ea760ffde87d46d63eb9"
                    ]
                },
                {
                    "command": [
                        "apply Zplus_lt_reg_l with (p := Fnum min'); auto.",
                        "VernacExtend",
                        "f1545b67cd31d83b7c9e06dde883e24970f8b4b3"
                    ]
                },
                {
                    "command": [
                        "cut (forall x y : Z, (x + (y - x))%Z = y); [ intros tmp; rewrite tmp; clear tmp | intros; ring ].",
                        "VernacExtend",
                        "eb7b7e44360e22e6f6cc365ce844b73be8053624"
                    ]
                },
                {
                    "command": [
                        "replace (Fnum min' + Fnum min')%Z with (2%nat * Fnum min')%Z.",
                        "VernacExtend",
                        "aa48f2f38116623b6f03d8302617b1a1c5b33a71"
                    ]
                },
                {
                    "command": [
                        "apply (Rlt_Float_Zlt radix) with (r := Fexp min'); auto; fold FtoRradix in |- *.",
                        "VernacExtend",
                        "71a10da6149932ab6187f897e7bcfe5822121445"
                    ]
                },
                {
                    "command": [
                        "replace (FtoRradix (Float (2%nat * Fnum min') (Fexp min'))) with (2%nat * Float (Fnum min') (Fexp min'))%R.",
                        "VernacExtend",
                        "551a6596437be242995b488f989e11adaa02c783"
                    ]
                },
                {
                    "command": [
                        "replace (Float (Fnum p * Zpower_nat radix (Zabs_nat (Fexp p - Fexp min'))) (Fexp min')) with (Fshift radix (Zabs_nat (Fexp p - Fexp min')) p).",
                        "VernacExtend",
                        "2896f1a2b1f68ba8008f83d3441ee53adebe3664"
                    ]
                },
                {
                    "command": [
                        "unfold FtoRradix in |- *; rewrite FshiftCorrect; auto.",
                        "VernacExtend",
                        "5abbc7cb08d11ed8fd912e6cc82302a9cbf61541"
                    ]
                },
                {
                    "command": [
                        "apply Rmult_lt_reg_l with (r := (/ 2%nat)%R); auto with real.",
                        "VernacExtend",
                        "8bc034dfa0cf0586596ad4f7208b865e73eda04f"
                    ]
                },
                {
                    "command": [
                        "rewrite <- Rmult_assoc; rewrite Rinv_l; auto with real; rewrite Rmult_1_l; auto with real.",
                        "VernacExtend",
                        "d35ca5901edc71ed18310778d2a4feec34ad5e94"
                    ]
                },
                {
                    "command": [
                        "replace (FtoR radix (Float (Fnum min') (Fexp min'))) with (FtoR radix min); auto.",
                        "VernacExtend",
                        "5dce62a9a78a3b9ebde90e7f150522f0c1979fd4"
                    ]
                },
                {
                    "command": [
                        "unfold Fshift in |- *; simpl in |- *.",
                        "VernacExtend",
                        "bc2226e4b5a4ef5bbaea414d285c81f30a1eb932"
                    ]
                },
                {
                    "command": [
                        "replace (Fexp p - Zabs_nat (Fexp p - Fexp min'))%Z with (Fexp min'); auto.",
                        "VernacExtend",
                        "f076e091746c53ee9990798f098e21e038375c3f"
                    ]
                },
                {
                    "command": [
                        "rewrite inj_abs; auto.",
                        "VernacExtend",
                        "16d1a62dc5288156f6709cea7b377c677cf15691"
                    ]
                },
                {
                    "command": [
                        "ring.",
                        "VernacExtend",
                        "baadd9fc4c175005af409bb466fcea9fab25b4e6"
                    ]
                },
                {
                    "command": [
                        "auto with zarith.",
                        "VernacExtend",
                        "23f42fd3236dcece4a40b3a666dce57fea69a9c0"
                    ]
                },
                {
                    "command": [
                        "replace (FtoRradix (Float (2%nat * Fnum min') (Fexp min'))) with ((2%nat * Fnum min')%Z * powerRZ radix (Fexp min'))%R.",
                        "VernacExtend",
                        "3b891762774795f26e951b16b59eb579f178fc02"
                    ]
                },
                {
                    "command": [
                        "rewrite Rmult_IZR; auto.",
                        "VernacExtend",
                        "44aee418e2ca54b49dbc7a73f12b6ebf687258ce"
                    ]
                },
                {
                    "command": [
                        "unfold FtoRradix, FtoR in |- *; simpl in |- *; ring.",
                        "VernacExtend",
                        "5b3b96c09542c1778400f311cf15a289b4188c3b"
                    ]
                },
                {
                    "command": [
                        "simpl in |- *; auto.",
                        "VernacExtend",
                        "9b631374b1d3067f703fd99c5dc6e1e5c8405957"
                    ]
                },
                {
                    "command": [
                        "replace (Z_of_nat 2) with (Zsucc (Zsucc 0)).",
                        "VernacExtend",
                        "7ff6d063b754fd53e3dc757809cbea3639d5c777"
                    ]
                },
                {
                    "command": [
                        "repeat rewrite <- Zmult_succ_l_reverse; unfold Zsucc in |- *; ring.",
                        "VernacExtend",
                        "e858aca549d9a4566714c89c8f83253b41a1c589"
                    ]
                },
                {
                    "command": [
                        "simpl in |- *; auto.",
                        "VernacExtend",
                        "9b631374b1d3067f703fd99c5dc6e1e5c8405957"
                    ]
                },
                {
                    "command": [
                        "exists min; split; auto.",
                        "VernacExtend",
                        "225be802774f7a00fcc6ca9b6cf0eb9ed30c17cf"
                    ]
                },
                {
                    "command": [
                        "case H'1; auto.",
                        "VernacExtend",
                        "a44f1b914e489dd19b841fdfab025ba14e3d8f86"
                    ]
                },
                {
                    "command": [
                        "rewrite Rl1.",
                        "VernacExtend",
                        "e2931bf293db4aa9ddf5c7c00efb2456ed10430c"
                    ]
                },
                {
                    "command": [
                        "pattern (FtoRradix p) at 2 in |- *; replace (FtoRradix p) with (2%nat * (/ 2%nat * p))%R.",
                        "VernacExtend",
                        "94dadc6d02f7dd2b033c996c58b88e4f37eb16e4"
                    ]
                },
                {
                    "command": [
                        "simpl in |- *; ring.",
                        "VernacExtend",
                        "dbea56eab9f20d9ab08eaf0f2769e833b9098d51"
                    ]
                },
                {
                    "command": [
                        "rewrite <- Rmult_assoc; rewrite Rinv_r; auto with real; rewrite Rmult_ne_r; auto with real.",
                        "VernacExtend",
                        "8e7e465df3bd232b3203728cf304f7a5bad70a4e"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "div2IsBetweenPos",
            "line_nb": 404,
            "steps": [
                {
                    "command": [
                        "intros p min max P H' H'0 H'1; apply Rle_antisym.",
                        "VernacExtend",
                        "1d02f5d4f3770a0a59dca351d5cd54463e461e36"
                    ]
                },
                {
                    "command": [
                        "apply Rplus_le_reg_l with (r := (- max)%R).",
                        "VernacExtend",
                        "b9de06a9a3496af5086a26312a312e599ba8c4de"
                    ]
                },
                {
                    "command": [
                        "replace (- max + p)%R with (p - max)%R; [ idtac | ring ].",
                        "VernacExtend",
                        "86212707ffbeff0bcc8187eb9f9988052cf81f9d"
                    ]
                },
                {
                    "command": [
                        "replace (- max + (min + max))%R with (FtoRradix min); [ idtac | ring ].",
                        "VernacExtend",
                        "91abb082c3232e09daaa689ee02dfec405eba042"
                    ]
                },
                {
                    "command": [
                        "rewrite <- (Fminus_correct radix); auto with arith.",
                        "VernacExtend",
                        "89427f822f7b85cd534f9ca10f7068d9964af3d1"
                    ]
                },
                {
                    "command": [
                        "case H'0.",
                        "VernacExtend",
                        "0b7a0c96a71e8cd9464b13f3d81301c6b0f41fd5"
                    ]
                },
                {
                    "command": [
                        "intros H'2 H'3; elim H'3; intros H'4 H'5; apply H'5; clear H'3; auto.",
                        "VernacExtend",
                        "0586621591cc793ea349a2794b2d49708fc985bf"
                    ]
                },
                {
                    "command": [
                        "apply Sterbenz; auto.",
                        "VernacExtend",
                        "2d564057c2daa6631c6b156cb718aa4284b2d9cb"
                    ]
                },
                {
                    "command": [
                        "case H'1; auto.",
                        "VernacExtend",
                        "a44f1b914e489dd19b841fdfab025ba14e3d8f86"
                    ]
                },
                {
                    "command": [
                        "apply Rle_trans with (FtoRradix max); auto.",
                        "VernacExtend",
                        "c78a45796178fb8ea266bf8c168b0cef09403988"
                    ]
                },
                {
                    "command": [
                        "apply Rmult_le_reg_l with (r := INR 2); auto with real.",
                        "VernacExtend",
                        "d844aeae389b738df4405a2dd7bb4aed456229ac"
                    ]
                },
                {
                    "command": [
                        "rewrite <- Rmult_assoc; rewrite Rinv_r; auto with real; rewrite Rmult_1_l; auto with real.",
                        "VernacExtend",
                        "ca966ebf613a22b28e59541265e8e26503358e5e"
                    ]
                },
                {
                    "command": [
                        "apply Rledouble; auto.",
                        "VernacExtend",
                        "91a11e7bfb03a12894eb0db96cc7013309392099"
                    ]
                },
                {
                    "command": [
                        "apply Rle_trans with (FtoRradix min); auto.",
                        "VernacExtend",
                        "481c4c1e628da8c4873f83fe61cb0d24f6cc41a5"
                    ]
                },
                {
                    "command": [
                        "apply RleMinR0 with (r := (/ 2%nat * p)%R); auto.",
                        "VernacExtend",
                        "ee91e45659800d18531118448743c6227b13dbfe"
                    ]
                },
                {
                    "command": [
                        "apply Rmult_le_reg_l with (r := INR 2); auto with real.",
                        "VernacExtend",
                        "d844aeae389b738df4405a2dd7bb4aed456229ac"
                    ]
                },
                {
                    "command": [
                        "rewrite <- Rmult_assoc; rewrite Rinv_r; auto with real; rewrite Rmult_1_l; rewrite Rmult_0_r; auto with real.",
                        "VernacExtend",
                        "390e360380ecb15b19665b89a766189b6dca8783"
                    ]
                },
                {
                    "command": [
                        "apply Rle_trans with (/ 2%nat * p)%R; auto; apply isMax_inv1 with (1 := H'1).",
                        "VernacExtend",
                        "b2c2054bdc9d59f561e78c896f87c2048c69eb62"
                    ]
                },
                {
                    "command": [
                        "case H'1.",
                        "VernacExtend",
                        "05df29261f69b368ca50958324064932a6d0f70a"
                    ]
                },
                {
                    "command": [
                        "intros H'3 H'6; elim H'6; intros H'7 H'8; apply H'8; clear H'6; auto.",
                        "VernacExtend",
                        "f6251afc0705d0bba5c0c7c1de8caa1a2ec47893"
                    ]
                },
                {
                    "command": [
                        "apply Rmult_le_reg_l with (r := INR 2); auto with real.",
                        "VernacExtend",
                        "d844aeae389b738df4405a2dd7bb4aed456229ac"
                    ]
                },
                {
                    "command": [
                        "rewrite <- Rmult_assoc; rewrite Rinv_r; auto with real; rewrite Rmult_1_l; auto with real.",
                        "VernacExtend",
                        "ca966ebf613a22b28e59541265e8e26503358e5e"
                    ]
                },
                {
                    "command": [
                        "apply Rmult_le_reg_l with (r := (/ 2%nat)%R); auto with real.",
                        "VernacExtend",
                        "abbbac4956c03b71c9aea2a4613d2652ecbfe282"
                    ]
                },
                {
                    "command": [
                        "rewrite <- Rmult_assoc; rewrite Rinv_l; auto with real; rewrite Rmult_1_l; auto with real.",
                        "VernacExtend",
                        "d35ca5901edc71ed18310778d2a4feec34ad5e94"
                    ]
                },
                {
                    "command": [
                        "apply isMax_inv1 with (1 := H'1).",
                        "VernacExtend",
                        "75f9fe6e81eb03cd3ba773a15895de7faa9b306f"
                    ]
                },
                {
                    "command": [
                        "rewrite Fminus_correct; auto with arith.",
                        "VernacExtend",
                        "888afdc9efcb9ed4124067da93aae83e5d9e5735"
                    ]
                },
                {
                    "command": [
                        "apply Rplus_le_reg_l with (r := FtoR radix max).",
                        "VernacExtend",
                        "d13a2b14ee78243be88d19639427bc9c996923ad"
                    ]
                },
                {
                    "command": [
                        "replace (FtoR radix max + (FtoR radix p - FtoR radix max))%R with (FtoR radix p); [ idtac | ring ].",
                        "VernacExtend",
                        "3f262801b3fa3b7a05b6c0fcd56a16dac46b9457"
                    ]
                },
                {
                    "command": [
                        "apply Rplus_le_reg_l with (r := (- (/ 2%nat * p))%R).",
                        "VernacExtend",
                        "7c4c71edc5acab8e5e24f32be7dbd4185ab0dca8"
                    ]
                },
                {
                    "command": [
                        "replace (- (/ 2%nat * p) + FtoR radix p)%R with (/ 2%nat * p)%R.",
                        "VernacExtend",
                        "2f59e98a5dcb4800a853d5d1d7bb57e5490ed72c"
                    ]
                },
                {
                    "command": [
                        "replace (- (/ 2%nat * p) + (FtoR radix max + / 2%nat * p))%R with (FtoR radix max); [ apply isMax_inv1 with (1 := H'1) | ring ].",
                        "VernacExtend",
                        "8b4832699b2448b5ef78a353ae723298ca73b210"
                    ]
                },
                {
                    "command": [
                        "replace (FtoR radix p) with (2%nat * (/ 2%nat * p))%R.",
                        "VernacExtend",
                        "8c7cd9c4f936cbd1bd8f62af3828e9c2477c78e2"
                    ]
                },
                {
                    "command": [
                        "simpl in |- *; ring.",
                        "VernacExtend",
                        "dbea56eab9f20d9ab08eaf0f2769e833b9098d51"
                    ]
                },
                {
                    "command": [
                        "rewrite <- Rmult_assoc; rewrite Rinv_r; auto with real.",
                        "VernacExtend",
                        "73b376abc8ad398fd4821a9df706554fe65a0769"
                    ]
                },
                {
                    "command": [
                        "apply Rplus_le_reg_l with (r := (- min)%R).",
                        "VernacExtend",
                        "ce59600835cf3e32360ceb0b483ba6cb366f9e4e"
                    ]
                },
                {
                    "command": [
                        "replace (- min + p)%R with (p - min)%R; [ idtac | ring ].",
                        "VernacExtend",
                        "c01c759f1240de8f88d94bb2f5d7f655b36dda84"
                    ]
                },
                {
                    "command": [
                        "replace (- min + (min + max))%R with (FtoRradix max); [ idtac | ring ].",
                        "VernacExtend",
                        "715328ff9f64ad88f3a6dd94d28e4a0ca136cbd4"
                    ]
                },
                {
                    "command": [
                        "case (PminPos p min); auto.",
                        "VernacExtend",
                        "4700f17a85e756c1b738355819dfae7c2e77a27c"
                    ]
                },
                {
                    "command": [
                        "intros x H'2; elim H'2; intros H'3 H'4; elim H'4; clear H'2.",
                        "VernacExtend",
                        "622d65e3d27bf1e7d5f546f1c189e20dc146a47c"
                    ]
                },
                {
                    "command": [
                        "case H'1.",
                        "VernacExtend",
                        "05df29261f69b368ca50958324064932a6d0f70a"
                    ]
                },
                {
                    "command": [
                        "intros H'2 H'5; elim H'5; intros H'6 H'7; apply H'7; clear H'5; auto.",
                        "VernacExtend",
                        "a7356a5d39411c5a1e8873bba59f35792ea7d7f8"
                    ]
                },
                {
                    "command": [
                        "unfold FtoRradix in H'4; rewrite H'4; auto.",
                        "VernacExtend",
                        "0f445e7dcf21ffafb1273976d6be135ceff5711f"
                    ]
                },
                {
                    "command": [
                        "fold FtoRradix in |- *; apply Rplus_le_reg_l with (r := FtoRradix min).",
                        "VernacExtend",
                        "13a36cc1f12f4a259474a09f4134f5f62171e38f"
                    ]
                },
                {
                    "command": [
                        "replace (min + (p - min))%R with (FtoRradix p); [ idtac | ring ].",
                        "VernacExtend",
                        "dc2c5555894c84cc7f561090add1a89a15e8ed4a"
                    ]
                },
                {
                    "command": [
                        "apply Rplus_le_reg_l with (r := (- (/ 2%nat * p))%R).",
                        "VernacExtend",
                        "7c4c71edc5acab8e5e24f32be7dbd4185ab0dca8"
                    ]
                },
                {
                    "command": [
                        "replace (- (/ 2%nat * p) + p)%R with (/ 2%nat * p)%R.",
                        "VernacExtend",
                        "ec9f61345c23671a78b65fbdcf2f1da273916857"
                    ]
                },
                {
                    "command": [
                        "replace (- (/ 2%nat * p) + (min + / 2%nat * p))%R with (FtoRradix min); [ apply isMin_inv1 with (1 := H'0) | ring ].",
                        "VernacExtend",
                        "8230f12796c8e9cfd6a78d10b666165d9babfd7a"
                    ]
                },
                {
                    "command": [
                        "pattern (FtoRradix p) at 3 in |- *; replace (FtoRradix p) with (2%nat * (/ 2%nat * p))%R.",
                        "VernacExtend",
                        "3c280cae54fde72f228d3b00fcc3417faa1b5dc9"
                    ]
                },
                {
                    "command": [
                        "simpl in |- *; ring.",
                        "VernacExtend",
                        "dbea56eab9f20d9ab08eaf0f2769e833b9098d51"
                    ]
                },
                {
                    "command": [
                        "rewrite <- Rmult_assoc; rewrite Rinv_r; auto with real.",
                        "VernacExtend",
                        "73b376abc8ad398fd4821a9df706554fe65a0769"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "div2IsBetween",
            "line_nb": 456,
            "steps": [
                {
                    "command": [
                        "intros p min max H' H'0 H'1; case (Rle_or_lt 0 p); intros H'2.",
                        "VernacExtend",
                        "64df6a8020fab990142329cc56d0695987909566"
                    ]
                },
                {
                    "command": [
                        "apply div2IsBetweenPos; auto.",
                        "VernacExtend",
                        "b827fb5baa1900a637d25316e1c651e8774cc9cd"
                    ]
                },
                {
                    "command": [
                        "cut (forall x y : R, (- x)%R = (- y)%R -> x = y); [ intros H'3; apply H'3; clear H'3 | idtac ].",
                        "VernacExtend",
                        "f1878939c826f52f12efa7bb0c7cf853d5ef7ff4"
                    ]
                },
                {
                    "command": [
                        "replace (- (min + max))%R with (- max + - min)%R; [ idtac | ring ].",
                        "VernacExtend",
                        "3590f43c2484eb7f18ce0c0ffd276c69e2c4bcc4"
                    ]
                },
                {
                    "command": [
                        "repeat rewrite <- (Fopp_correct radix); auto with float.",
                        "VernacExtend",
                        "fed798d37d294411a9375bef1054ad9d7ee8671f"
                    ]
                },
                {
                    "command": [
                        "apply div2IsBetweenPos; auto with float.",
                        "VernacExtend",
                        "4b49588d601aedbb56f458e3be7df9a536c7203f"
                    ]
                },
                {
                    "command": [
                        "rewrite (Fopp_correct radix); auto.",
                        "VernacExtend",
                        "03e6f5942331ba790a679453e264f3137fcc3b56"
                    ]
                },
                {
                    "command": [
                        "replace 0%R with (-0)%R; try apply Rlt_le; auto with real.",
                        "VernacExtend",
                        "603dbd924aed3a754a32f65a15988ee194f049b6"
                    ]
                },
                {
                    "command": [
                        "replace (/ 2%nat * Fopp p)%R with (- (/ 2%nat * p))%R; auto with float.",
                        "VernacExtend",
                        "f8853f532686c7785907bbcd636b83e04a10a84c"
                    ]
                },
                {
                    "command": [
                        "rewrite (Fopp_correct radix); auto; fold FtoRradix; ring.",
                        "VernacExtend",
                        "f0ede6ae5d79ef84155ecf5d45818a85a3f6fa1d"
                    ]
                },
                {
                    "command": [
                        "replace (/ 2%nat * Fopp p)%R with (- (/ 2%nat * p))%R; auto with float.",
                        "VernacExtend",
                        "f8853f532686c7785907bbcd636b83e04a10a84c"
                    ]
                },
                {
                    "command": [
                        "rewrite (Fopp_correct radix); auto; fold FtoRradix;ring.",
                        "VernacExtend",
                        "f0ede6ae5d79ef84155ecf5d45818a85a3f6fa1d"
                    ]
                },
                {
                    "command": [
                        "intros x y H'3; rewrite <- (Ropp_involutive x); rewrite <- (Ropp_involutive y); rewrite H'3; auto.",
                        "VernacExtend",
                        "0ef3da26ef07584a141d6c5b5ad3ec12595c058c"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "RoundedModeMultAbs",
            "line_nb": 471,
            "steps": [
                {
                    "command": [
                        "intros P H' r q q' H'0 H'1 H'2.",
                        "VernacExtend",
                        "492971cc62b495bd2e03c579d1f879c4da640e15"
                    ]
                },
                {
                    "command": [
                        "case (Rle_or_lt 0 r); intros Rl0.",
                        "VernacExtend",
                        "76a59b551780307a64f0c3d8f163da37693e5254"
                    ]
                },
                {
                    "command": [
                        "rewrite Rabs_right; auto.",
                        "VernacExtend",
                        "b1779d7d605b07cf96f8be33fdef3339b6652757"
                    ]
                },
                {
                    "command": [
                        "apply RoundedModeMult with (P := P) (r := r); auto.",
                        "VernacExtend",
                        "b086f8f436059e0d0be62a13f47b898736725e6e"
                    ]
                },
                {
                    "command": [
                        "rewrite <- (Rabs_right r); auto with real.",
                        "VernacExtend",
                        "e7ba66539a2d0c2441d237d8229517e755cc9514"
                    ]
                },
                {
                    "command": [
                        "apply Rle_ge; apply RleRoundedR0 with (P := P) (r := r); auto.",
                        "VernacExtend",
                        "29dab4795d3bd149d20a487394f7c7f36c56cb5a"
                    ]
                },
                {
                    "command": [
                        "rewrite Faux.Rabsolu_left1; auto.",
                        "VernacExtend",
                        "cdfb2996338b3a1e58065e7b9fa29cb7224ffecf"
                    ]
                },
                {
                    "command": [
                        "replace (radix * q')%R with (- (radix * - q'))%R; [ apply Ropp_le_contravar | ring ].",
                        "VernacExtend",
                        "5f807127c53547b386e781404987994137a8cc3c"
                    ]
                },
                {
                    "command": [
                        "rewrite <- (Fopp_correct radix).",
                        "VernacExtend",
                        "371079b87088c94d825e5ae96e6c7d5d0ba832c0"
                    ]
                },
                {
                    "command": [
                        "apply RoundedModeMultLess with (P := P) (r := r); auto.",
                        "VernacExtend",
                        "297461687446d11a031337461a7ce79f4a53b5ef"
                    ]
                },
                {
                    "command": [
                        "apply oppBounded; auto.",
                        "VernacExtend",
                        "6e68d2122eeea082741ca4e279707ce0511c71ef"
                    ]
                },
                {
                    "command": [
                        "unfold FtoRradix in |- *; rewrite Fopp_correct.",
                        "VernacExtend",
                        "c3c7ad16a924a974f39fb2584a800e7199b0444e"
                    ]
                },
                {
                    "command": [
                        "rewrite <- (Ropp_involutive r).",
                        "VernacExtend",
                        "cbc81d890888d09f9d795cc7d43b35a4a68248ee"
                    ]
                },
                {
                    "command": [
                        "replace (radix * - FtoR radix q')%R with (- (radix * q'))%R; [ apply Ropp_le_contravar | fold FtoRradix;ring ]; auto.",
                        "VernacExtend",
                        "5b3367ab5f16d7a6dacbd48f96f8a3512be26dda"
                    ]
                },
                {
                    "command": [
                        "rewrite <- (Faux.Rabsolu_left1 r); auto.",
                        "VernacExtend",
                        "ee4e09d7e885ccb485e5e2773df637def8fc7136"
                    ]
                },
                {
                    "command": [
                        "apply Rlt_le; auto.",
                        "VernacExtend",
                        "4003e3e1c449ee89cad9e953d0a562db8235648c"
                    ]
                },
                {
                    "command": [
                        "apply RleRoundedLessR0 with (P := P) (r := r); auto.",
                        "VernacExtend",
                        "30978dd5c67d0d70306bedc8ada49c7fb1933c4d"
                    ]
                },
                {
                    "command": [
                        "apply Rlt_le; auto.",
                        "VernacExtend",
                        "4003e3e1c449ee89cad9e953d0a562db8235648c"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "isMinComp",
            "line_nb": 491,
            "steps": [
                {
                    "command": [
                        "intros r1 r2 min max H' H'0 H'1 H'2; split.",
                        "VernacExtend",
                        "55d8b32d6f687ff4efb3e2f5bebe298330c517d3"
                    ]
                },
                {
                    "command": [
                        "case H'; auto.",
                        "VernacExtend",
                        "ebc5b3ac68f03e20b8a194319f607aaad1bf60b4"
                    ]
                },
                {
                    "command": [
                        "split.",
                        "VernacExtend",
                        "55abc140132bd88981001ac656020469a8d503eb"
                    ]
                },
                {
                    "command": [
                        "apply Rlt_le; auto.",
                        "VernacExtend",
                        "4003e3e1c449ee89cad9e953d0a562db8235648c"
                    ]
                },
                {
                    "command": [
                        "intros f H'3 H'4.",
                        "VernacExtend",
                        "89d3e6d109fd6702f8706bf77c9b9228dfee3e62"
                    ]
                },
                {
                    "command": [
                        "case H'; auto.",
                        "VernacExtend",
                        "ebc5b3ac68f03e20b8a194319f607aaad1bf60b4"
                    ]
                },
                {
                    "command": [
                        "intros H'5 H'6; elim H'6; intros H'7 H'8; apply H'8; clear H'6; auto.",
                        "VernacExtend",
                        "936ee44fe9e60d1d0c8396680cf2723afabfac55"
                    ]
                },
                {
                    "command": [
                        "case (Rle_or_lt (FtoR radix f) r1); auto; intros C1.",
                        "VernacExtend",
                        "fc1a4eebf9d712b9ceb2b333d2bbd1374ae591fc"
                    ]
                },
                {
                    "command": [
                        "absurd (FtoR radix f < max)%R.",
                        "VernacExtend",
                        "ae76d4f1b9dc909e9ee5e6455666fc144c3a7951"
                    ]
                },
                {
                    "command": [
                        "apply Rle_not_lt.",
                        "VernacExtend",
                        "1f0f6b47a7d49626d97b2585f7610e291096035d"
                    ]
                },
                {
                    "command": [
                        "case H'0.",
                        "VernacExtend",
                        "0b7a0c96a71e8cd9464b13f3d81301c6b0f41fd5"
                    ]
                },
                {
                    "command": [
                        "intros H'6 H'9; elim H'9; intros H'10 H'11; apply H'11; clear H'9; auto.",
                        "VernacExtend",
                        "a2cbf6679aaf191f48ab27438796ab9cf4afe271"
                    ]
                },
                {
                    "command": [
                        "apply Rlt_le; auto.",
                        "VernacExtend",
                        "4003e3e1c449ee89cad9e953d0a562db8235648c"
                    ]
                },
                {
                    "command": [
                        "apply Rle_lt_trans with (2 := H'2); auto.",
                        "VernacExtend",
                        "42a0bc1653b909e193984be70b8eed2d9c4d9021"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "isMaxComp",
            "line_nb": 507,
            "steps": [
                {
                    "command": [
                        "intros r1 r2 min max H' H'0 H'1 H'2; split.",
                        "VernacExtend",
                        "55d8b32d6f687ff4efb3e2f5bebe298330c517d3"
                    ]
                },
                {
                    "command": [
                        "case H'0; auto.",
                        "VernacExtend",
                        "c95954a4912ccfdd6e4780b3eecd4f9a4fbca076"
                    ]
                },
                {
                    "command": [
                        "split.",
                        "VernacExtend",
                        "55abc140132bd88981001ac656020469a8d503eb"
                    ]
                },
                {
                    "command": [
                        "apply Rlt_le; auto.",
                        "VernacExtend",
                        "4003e3e1c449ee89cad9e953d0a562db8235648c"
                    ]
                },
                {
                    "command": [
                        "intros f H'3 H'4.",
                        "VernacExtend",
                        "89d3e6d109fd6702f8706bf77c9b9228dfee3e62"
                    ]
                },
                {
                    "command": [
                        "case H'0; auto.",
                        "VernacExtend",
                        "c95954a4912ccfdd6e4780b3eecd4f9a4fbca076"
                    ]
                },
                {
                    "command": [
                        "intros H'5 H'6; elim H'6; intros H'7 H'8; apply H'8; clear H'6; auto.",
                        "VernacExtend",
                        "936ee44fe9e60d1d0c8396680cf2723afabfac55"
                    ]
                },
                {
                    "command": [
                        "case (Rle_or_lt r1 (FtoR radix f)); auto; intros C1.",
                        "VernacExtend",
                        "8030f9ee13b7c221db55a1944ea96a06ef836d8d"
                    ]
                },
                {
                    "command": [
                        "absurd (min < FtoR radix f)%R.",
                        "VernacExtend",
                        "e85478d267fbc65b9d336da5023bc05fa6535dfb"
                    ]
                },
                {
                    "command": [
                        "apply Rle_not_lt.",
                        "VernacExtend",
                        "1f0f6b47a7d49626d97b2585f7610e291096035d"
                    ]
                },
                {
                    "command": [
                        "case H'.",
                        "VernacExtend",
                        "59f58feee27b0b33473890c47947a750059972d7"
                    ]
                },
                {
                    "command": [
                        "intros H'6 H'9; elim H'9; intros H'10 H'11; apply H'11; clear H'9; auto.",
                        "VernacExtend",
                        "a2cbf6679aaf191f48ab27438796ab9cf4afe271"
                    ]
                },
                {
                    "command": [
                        "apply Rlt_le; auto.",
                        "VernacExtend",
                        "4003e3e1c449ee89cad9e953d0a562db8235648c"
                    ]
                },
                {
                    "command": [
                        "apply Rlt_le_trans with (1 := H'1); auto.",
                        "VernacExtend",
                        "761a9937a9e336d727f3ba4395a7e9930796f6c8"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "roundedModeLessMult",
            "line_nb": 523,
            "steps": [
                {
                    "command": [
                        "intros P p r H' H'0 H'1.",
                        "VernacExtend",
                        "1e88af9e79ac1309240e9db62c48e7e5871a2023"
                    ]
                },
                {
                    "command": [
                        "cut (0 < Float 1%nat (- dExp b))%R; [ intros Rl0 | unfold FtoRradix, FtoR in |- *; simpl in |- *; rewrite Rmult_1_l; auto with real arith ].",
                        "VernacExtend",
                        "cf92eb2e039ae4540f60270af9eba4ef5db14a88"
                    ]
                },
                {
                    "command": [
                        "cut (0 < r)%R; [ intros Rl1 | apply Rlt_le_trans with (1 := Rl0) ]; auto.",
                        "VernacExtend",
                        "106d503351fd25e6964643a951f2ea5d3be80ba3"
                    ]
                },
                {
                    "command": [
                        "cut (0 <= r)%R; [ intros Rl2 | apply Rlt_le; auto ].",
                        "VernacExtend",
                        "6165cc86004b6a78487886c75a51d9670dca022b"
                    ]
                },
                {
                    "command": [
                        "case H'.",
                        "VernacExtend",
                        "59f58feee27b0b33473890c47947a750059972d7"
                    ]
                },
                {
                    "command": [
                        "intros H'2 H'3; Elimc H'3; intros H'3 H'4; Elimc H'4; intros H'4 H'5; case (H'4 r p); auto; intros H'6.",
                        "VernacExtend",
                        "ad3fa6d4ad043bd1e0e2e22dfb8f296d26e201d6"
                    ]
                },
                {
                    "command": [
                        "apply Rle_trans with r; auto with real.",
                        "VernacExtend",
                        "b9d69bb8a32d2fa4dcfedbb4f9e240535d8d36e6"
                    ]
                },
                {
                    "command": [
                        "apply isMin_inv1 with (1 := H'6).",
                        "VernacExtend",
                        "f19fff8e295b0d7b5620082e400b919648b3d417"
                    ]
                },
                {
                    "command": [
                        "rewrite Rmult_comm; pattern r at 1 in |- *; replace r with (r * 1%nat)%R; [ apply Rmult_le_compat_l | simpl; ring ]; auto with real arith.",
                        "VernacExtend",
                        "6be5423c0f0870a0e4e89bc7ffd4bde593435512"
                    ]
                },
                {
                    "command": [
                        "case (MinEx b radix precision) with (r := r); auto with arith; intros min Hmin.",
                        "VernacExtend",
                        "0c2fbd26b366f8feefedbf876fde853a4106254a"
                    ]
                },
                {
                    "command": [
                        "cut (Fbounded b (Float (Fnum min) (Zsucc (Fexp min)))); [ intros F2 | idtac ].",
                        "VernacExtend",
                        "499e49daf1d25fa70d205e8cdfc1604839690345"
                    ]
                },
                {
                    "command": [
                        "cut (FtoRradix (Float (Fnum min) (Zsucc (Fexp min))) = (radix * min)%R :>R); [ intros F2Eq | idtac ].",
                        "VernacExtend",
                        "02ac824871bd9ea29dc8b526a5a7097727500b4e"
                    ]
                },
                {
                    "command": [
                        "apply Rle_trans with (FtoRradix (Float (Fnum min) (Zsucc (Fexp min)))).",
                        "VernacExtend",
                        "a82c188cf77df08e5d0e48075c53de68e255e91d"
                    ]
                },
                {
                    "command": [
                        "case H'6.",
                        "VernacExtend",
                        "ef600d2c694f3e88509e30b301a58446bace9eab"
                    ]
                },
                {
                    "command": [
                        "intros H'7 H'8; elim H'8; intros H'9 H'10; apply H'10; clear H'8; auto.",
                        "VernacExtend",
                        "0ecd6593bb1a824fb3db5e1231f28620bfadbe24"
                    ]
                },
                {
                    "command": [
                        "case (Rle_or_lt r (Float (Fnum min) (Zsucc (Fexp min)))); auto; intros Rlt0.",
                        "VernacExtend",
                        "bd483908ba5e2969e7f90264a475b3abf4508f12"
                    ]
                },
                {
                    "command": [
                        "absurd (Float (Fnum min) (Zsucc (Fexp min)) <= min)%R.",
                        "VernacExtend",
                        "710eac1b8ab43383e49ed7ef9f8d2ec95471c3ef"
                    ]
                },
                {
                    "command": [
                        "apply Rgt_not_le.",
                        "VernacExtend",
                        "be8a1e7f9ca2303d5ddda077b45cc15db6c6b3ce"
                    ]
                },
                {
                    "command": [
                        "rewrite F2Eq; auto with real.",
                        "VernacExtend",
                        "51e276912063ace409aeaf689e1feed56a273f2d"
                    ]
                },
                {
                    "command": [
                        "rewrite Rmult_comm.",
                        "VernacExtend",
                        "fd520335d31c715c2f686e2bdc0b380c493b04c0"
                    ]
                },
                {
                    "command": [
                        "pattern (FtoRradix min) at 2 in |- *; replace (FtoRradix min) with (min * 1%nat)%R; auto with real.",
                        "VernacExtend",
                        "659b36b3182801ce09b13bf8ee4c537cff19d5eb"
                    ]
                },
                {
                    "command": [
                        "red in |- *; apply Rmult_lt_compat_l; auto with real arith.",
                        "VernacExtend",
                        "3de6cd13aa68da2aa4deb214917d2ebde0360b81"
                    ]
                },
                {
                    "command": [
                        "case (RleMinR0 r min); auto.",
                        "VernacExtend",
                        "14ee8f09f7ebe2a7665fc14d94db4a6606f2d20b"
                    ]
                },
                {
                    "command": [
                        "intros H'8; case H'1.",
                        "VernacExtend",
                        "3ba6ca2a343a6bd78cfb1218ef147582d9a54a56"
                    ]
                },
                {
                    "command": [
                        "intros H'11; absurd (Float 1%nat (- dExp b) <= min)%R.",
                        "VernacExtend",
                        "5d95543e9a17c3f48b6e73d0bd439e9198d74088"
                    ]
                },
                {
                    "command": [
                        "apply Rgt_not_le; auto.",
                        "VernacExtend",
                        "61286dd899aac2ebf8c8abffef84bd9d6a76b5ed"
                    ]
                },
                {
                    "command": [
                        "rewrite <- H'8; auto.",
                        "VernacExtend",
                        "04b29ebc13e42900d3632a908de79773f2b0f74b"
                    ]
                },
                {
                    "command": [
                        "apply (MonotoneMin b radix) with (p := FtoRradix (Float 1%nat (- dExp b))) (q := r); auto.",
                        "VernacExtend",
                        "b6da53f1021006973d94ef9b5e55dba1a7f868bd"
                    ]
                },
                {
                    "command": [
                        "apply (RoundedModeProjectorIdem (isMin b radix)); auto.",
                        "VernacExtend",
                        "0edc29085f3d31bf22294a533fc2f6227c914ad0"
                    ]
                },
                {
                    "command": [
                        "apply MinRoundedModeP with (precision := precision); auto.",
                        "VernacExtend",
                        "9c713ab984e57490a2425136b2f02c1e3b6ef6ba"
                    ]
                },
                {
                    "command": [
                        "repeat split.",
                        "VernacExtend",
                        "7968f2448e3e51b1de42f5c433248f4a827b4da2"
                    ]
                },
                {
                    "command": [
                        "simpl in |- *; auto with zarith.",
                        "VernacExtend",
                        "61d3cdc6299cf8abf87703c074ca4503f0f27a12"
                    ]
                },
                {
                    "command": [
                        "apply (vNumbMoreThanOne radix) with (precision := precision); auto with zarith.",
                        "VernacExtend",
                        "c29f7cde7313a0159f5e6e723b15563e2dc77df2"
                    ]
                },
                {
                    "command": [
                        "simpl in |- *; auto with zarith.",
                        "VernacExtend",
                        "61d3cdc6299cf8abf87703c074ca4503f0f27a12"
                    ]
                },
                {
                    "command": [
                        "intros H'11; absurd (min = Float 1%nat (- dExp b) :>R).",
                        "VernacExtend",
                        "26fed52fa74f10ca4492f122e92aac0c72a4b921"
                    ]
                },
                {
                    "command": [
                        "rewrite <- H'8.",
                        "VernacExtend",
                        "7451294d3b577094784c0c9e508a760676000f26"
                    ]
                },
                {
                    "command": [
                        "apply Rlt_dichotomy_converse; left; auto.",
                        "VernacExtend",
                        "de7283b8cfce3ef2e0ae4e3dbc67a172e97647d4"
                    ]
                },
                {
                    "command": [
                        "apply (MinUniqueP b radix r); auto.",
                        "VernacExtend",
                        "95d995256e91da41a7aced68c4d219299c106fec"
                    ]
                },
                {
                    "command": [
                        "rewrite <- H'11.",
                        "VernacExtend",
                        "d424c482c9836749304e1bf74488bd7731e2d289"
                    ]
                },
                {
                    "command": [
                        "apply (RoundedModeProjectorIdem (isMin b radix)); auto.",
                        "VernacExtend",
                        "0edc29085f3d31bf22294a533fc2f6227c914ad0"
                    ]
                },
                {
                    "command": [
                        "apply MinRoundedModeP with (precision := precision); auto.",
                        "VernacExtend",
                        "9c713ab984e57490a2425136b2f02c1e3b6ef6ba"
                    ]
                },
                {
                    "command": [
                        "repeat split.",
                        "VernacExtend",
                        "7968f2448e3e51b1de42f5c433248f4a827b4da2"
                    ]
                },
                {
                    "command": [
                        "simpl in |- *; auto with zarith.",
                        "VernacExtend",
                        "61d3cdc6299cf8abf87703c074ca4503f0f27a12"
                    ]
                },
                {
                    "command": [
                        "apply (vNumbMoreThanOne radix) with (precision := precision); auto with zarith.",
                        "VernacExtend",
                        "c29f7cde7313a0159f5e6e723b15563e2dc77df2"
                    ]
                },
                {
                    "command": [
                        "simpl in |- *; auto with zarith.",
                        "VernacExtend",
                        "61d3cdc6299cf8abf87703c074ca4503f0f27a12"
                    ]
                },
                {
                    "command": [
                        "case Hmin.",
                        "VernacExtend",
                        "86c8512e01aa1d7df63b5091b527667c724250f7"
                    ]
                },
                {
                    "command": [
                        "intros H'8 H'11; elim H'11; intros H'12 H'13; apply H'13; clear H'11; auto.",
                        "VernacExtend",
                        "724b0a62e697f33602a84430d5fd1ad2b45ca597"
                    ]
                },
                {
                    "command": [
                        "apply Rlt_le; auto.",
                        "VernacExtend",
                        "4003e3e1c449ee89cad9e953d0a562db8235648c"
                    ]
                },
                {
                    "command": [
                        "rewrite F2Eq.",
                        "VernacExtend",
                        "3e7ecdcb44f43e48099b9fb022689609d9058b09"
                    ]
                },
                {
                    "command": [
                        "apply Rmult_le_compat_l; auto with real arith.",
                        "VernacExtend",
                        "c67ac6a62458e649e844e549689a7d3f43885a2a"
                    ]
                },
                {
                    "command": [
                        "replace 0%R with (INR 0); auto with real arith.",
                        "VernacExtend",
                        "3caed965951659080cf394dcb353db3f9bd924fa"
                    ]
                },
                {
                    "command": [
                        "apply isMin_inv1 with (1 := Hmin).",
                        "VernacExtend",
                        "38c103b5e86e13bdc28791ffb7f48806a346f849"
                    ]
                },
                {
                    "command": [
                        "unfold FtoRradix, FtoR in |- *; simpl in |- *.",
                        "VernacExtend",
                        "85a3da1582165d92ceb7faef707de88822bccf1a"
                    ]
                },
                {
                    "command": [
                        "rewrite powerRZ_Zs; auto with real zarith; ring.",
                        "VernacExtend",
                        "055e37c209e2a0ca9dc7ef6b05e8ffefe2fb31ed"
                    ]
                },
                {
                    "command": [
                        "cut (Fbounded b min); [ unfold Fbounded in |- *; intros Fb0 | case Hmin; auto ].",
                        "VernacExtend",
                        "da2b14d1d3279aa4667fe160568357bf66dc0153"
                    ]
                },
                {
                    "command": [
                        "elim Fb0; intros H H0; auto.",
                        "VernacExtend",
                        "ccf6ecd3055630b937a32a717a4532defa9e9c3c"
                    ]
                },
                {
                    "command": [
                        "repeat (split; simpl in |- *); auto.",
                        "VernacExtend",
                        "6c7cc0141a9157a1a9e39ad508bdd952f5c1f54c"
                    ]
                },
                {
                    "command": [
                        "apply Zle_trans with (Fexp min); auto with zarith.",
                        "VernacExtend",
                        "8b358ae3d8cef70bd96f7738199ce36592a00495"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "roundedModeAbsMult",
            "line_nb": 647,
            "steps": [
                {
                    "command": [
                        "intros P p r H' H'0 H'1; case (Rle_or_lt 0 r); intros H'2.",
                        "VernacExtend",
                        "98317544fdfa58b05a7581a40a72ea96076992b8"
                    ]
                },
                {
                    "command": [
                        "repeat rewrite Rabs_right; auto with real.",
                        "VernacExtend",
                        "acbc524ee08d51df0747101f806570b23d1c2cd0"
                    ]
                },
                {
                    "command": [
                        "apply roundedModeLessMult with (P := P); auto.",
                        "VernacExtend",
                        "f2bc2c847445d54a0bf784fbda288340d517bc26"
                    ]
                },
                {
                    "command": [
                        "rewrite <- (Rabs_right r); auto with real.",
                        "VernacExtend",
                        "e7ba66539a2d0c2441d237d8229517e755cc9514"
                    ]
                },
                {
                    "command": [
                        "apply Rle_ge; apply (RleRoundedR0 P) with (r := r); auto.",
                        "VernacExtend",
                        "c8843f36d824e6aa9ff1c254ff3adc68a434e911"
                    ]
                },
                {
                    "command": [
                        "repeat rewrite Faux.Rabsolu_left1; auto.",
                        "VernacExtend",
                        "e11c24e8ffe43271673891ae0aeb17a8a197300c"
                    ]
                },
                {
                    "command": [
                        "replace (radix * - r)%R with (- (radix * r))%R; [ apply Ropp_le_contravar | ring ].",
                        "VernacExtend",
                        "38981268505bbc715a3638f31ed002f8d15ef6a4"
                    ]
                },
                {
                    "command": [
                        "apply roundedModeMoreMult with (P := P); auto.",
                        "VernacExtend",
                        "eb210483af0d0631a74048cd9ba885fd2ef217f0"
                    ]
                },
                {
                    "command": [
                        "rewrite <- (Ropp_involutive r); rewrite <- (Faux.Rabsolu_left1 r); auto.",
                        "VernacExtend",
                        "7291ac0d15a7125bca15cef2bcc972a51e17198d"
                    ]
                },
                {
                    "command": [
                        "replace (Float (- 1%nat) (- dExp b)) with (Fopp (Float 1%nat (- dExp b))).",
                        "VernacExtend",
                        "50a08e22bd4344ad255a411992f6616fbb4723ba"
                    ]
                },
                {
                    "command": [
                        "unfold FtoRradix in |- *; rewrite Fopp_correct; auto with real.",
                        "VernacExtend",
                        "5806d51ffb537355f3b97b7dbadcb1cad937b8ce"
                    ]
                },
                {
                    "command": [
                        "simpl in |- *; auto.",
                        "VernacExtend",
                        "9b631374b1d3067f703fd99c5dc6e1e5c8405957"
                    ]
                },
                {
                    "command": [
                        "apply Rlt_le; auto.",
                        "VernacExtend",
                        "4003e3e1c449ee89cad9e953d0a562db8235648c"
                    ]
                },
                {
                    "command": [
                        "apply Rlt_le; auto.",
                        "VernacExtend",
                        "4003e3e1c449ee89cad9e953d0a562db8235648c"
                    ]
                },
                {
                    "command": [
                        "apply (RleRoundedLessR0 P) with (r := r); auto.",
                        "VernacExtend",
                        "56855c1f2da97f39d6ce408637674e91d86b0a8b"
                    ]
                },
                {
                    "command": [
                        "apply Rlt_le; auto.",
                        "VernacExtend",
                        "4003e3e1c449ee89cad9e953d0a562db8235648c"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "RleBoundRoundr",
            "line_nb": 675,
            "steps": [
                {
                    "command": [
                        "intros P H' p q r H'0 H'1 H'2; case H'1; intros H'3.",
                        "VernacExtend",
                        "18895e8417fd9968209aea6976a88f9d0a5a96a8"
                    ]
                },
                {
                    "command": [
                        "cut (MonotoneP radix P); [ intros Mn | apply RoundedModeP_inv4 with (1 := H'); auto ].",
                        "VernacExtend",
                        "b8b6ba48c8465dac1cd258350b711138b0e41871"
                    ]
                },
                {
                    "command": [
                        "apply (Mn r p); auto.",
                        "VernacExtend",
                        "b05f60fc9ae0e741c459dbf5c3d6c18ad1715a5e"
                    ]
                },
                {
                    "command": [
                        "apply RoundedModeProjectorIdem with (P := P); auto.",
                        "VernacExtend",
                        "241e11a5ff7aa615bae1fbffdb3d9d7e25413c92"
                    ]
                },
                {
                    "command": [
                        "rewrite RoundedModeProjectorIdemEq with (P := P) (p := p) (q := q); auto with real.",
                        "VernacExtend",
                        "9ae787c48532da3150e831b62142a548ffc3b217"
                    ]
                },
                {
                    "command": [
                        "cut (CompatibleP b radix P); [ intros Cp | apply RoundedModeP_inv2 with (1 := H'); auto ].",
                        "VernacExtend",
                        "2ca124a567e390b257fb21e0b477d3edc60232f2"
                    ]
                },
                {
                    "command": [
                        "apply (Cp r p q); auto.",
                        "VernacExtend",
                        "8b5580b6892d1b3fbacefd150f9c991203226421"
                    ]
                },
                {
                    "command": [
                        "apply RoundedModeBounded with (P := P) (r := r); auto.",
                        "VernacExtend",
                        "fdf71d1d1c50548b71cff0572744e94aec5ff713"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "RoundAbsMonotoner",
            "line_nb": 685,
            "steps": [
                {
                    "command": [
                        "intros P p q r H' H'0 H'1 H'2.",
                        "VernacExtend",
                        "58dcf3d57b399327d41d57937cfd42c549570ac4"
                    ]
                },
                {
                    "command": [
                        "case (Rle_or_lt 0 p); intros Rl1.",
                        "VernacExtend",
                        "aa6be71cc2b374664054155571961cb178d1e8df"
                    ]
                },
                {
                    "command": [
                        "rewrite Rabs_right; auto with real.",
                        "VernacExtend",
                        "e24d8a510a5d2d71a1265c4c7b5d2f745fcc98e0"
                    ]
                },
                {
                    "command": [
                        "apply RleBoundRoundr with (P := P) (r := p); auto with real.",
                        "VernacExtend",
                        "79535e96c3a61fc68c82b062741a30201713dba0"
                    ]
                },
                {
                    "command": [
                        "rewrite <- (Rabs_right p); auto with real.",
                        "VernacExtend",
                        "8d290fcfc86394237ea623ee2084cb3f0e510411"
                    ]
                },
                {
                    "command": [
                        "apply Rle_ge; apply RleRoundedR0 with (P := P) (r := p); auto.",
                        "VernacExtend",
                        "12d880bf349bdc0fefecdd48b00ac735df187bb7"
                    ]
                },
                {
                    "command": [
                        "rewrite Faux.Rabsolu_left1; auto.",
                        "VernacExtend",
                        "cdfb2996338b3a1e58065e7b9fa29cb7224ffecf"
                    ]
                },
                {
                    "command": [
                        "rewrite <- (Ropp_involutive r); apply Ropp_le_contravar.",
                        "VernacExtend",
                        "28f21ffb85703baa31aff905bd0c7973166858a4"
                    ]
                },
                {
                    "command": [
                        "rewrite <- (Fopp_correct radix); auto.",
                        "VernacExtend",
                        "3858c7e2e159c83156880ea034645e996a4b0b20"
                    ]
                },
                {
                    "command": [
                        "apply RleBoundRoundl with (P := P) (r := p); auto with float.",
                        "VernacExtend",
                        "8d2ba50722706aee81433d43c2f8296af47b3d27"
                    ]
                },
                {
                    "command": [
                        "rewrite (Fopp_correct radix); rewrite <- (Ropp_involutive p); rewrite <- (Faux.Rabsolu_left1 p); auto with real; apply Rlt_le; auto.",
                        "VernacExtend",
                        "b23f30313bf596812192046bbedd4f23530f60a3"
                    ]
                },
                {
                    "command": [
                        "apply RleRoundedLessR0 with (P := P) (r := p); auto; apply Rlt_le; auto.",
                        "VernacExtend",
                        "ba16d1adf990797c1eb641dda7d82f72aa812141"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "RoundAbsMonotonel",
            "line_nb": 699,
            "steps": [
                {
                    "command": [
                        "intros P p q r H' H'0 H'1 H'2.",
                        "VernacExtend",
                        "58dcf3d57b399327d41d57937cfd42c549570ac4"
                    ]
                },
                {
                    "command": [
                        "case (Rle_or_lt 0 p); intros Rl1.",
                        "VernacExtend",
                        "aa6be71cc2b374664054155571961cb178d1e8df"
                    ]
                },
                {
                    "command": [
                        "rewrite Rabs_right; auto.",
                        "VernacExtend",
                        "b1779d7d605b07cf96f8be33fdef3339b6652757"
                    ]
                },
                {
                    "command": [
                        "apply RleBoundRoundl with (P := P) (r := p); auto.",
                        "VernacExtend",
                        "9ab43849ce771bcb5bbabe41290c0facb07f6490"
                    ]
                },
                {
                    "command": [
                        "rewrite <- (Rabs_right p); auto with real.",
                        "VernacExtend",
                        "8d290fcfc86394237ea623ee2084cb3f0e510411"
                    ]
                },
                {
                    "command": [
                        "apply Rle_ge; apply RleRoundedR0 with (P := P) (r := p); auto.",
                        "VernacExtend",
                        "12d880bf349bdc0fefecdd48b00ac735df187bb7"
                    ]
                },
                {
                    "command": [
                        "rewrite Faux.Rabsolu_left1; auto.",
                        "VernacExtend",
                        "cdfb2996338b3a1e58065e7b9fa29cb7224ffecf"
                    ]
                },
                {
                    "command": [
                        "rewrite <- (Ropp_involutive r); apply Ropp_le_contravar.",
                        "VernacExtend",
                        "28f21ffb85703baa31aff905bd0c7973166858a4"
                    ]
                },
                {
                    "command": [
                        "rewrite <- (Fopp_correct radix); auto.",
                        "VernacExtend",
                        "3858c7e2e159c83156880ea034645e996a4b0b20"
                    ]
                },
                {
                    "command": [
                        "apply RleBoundRoundr with (P := P) (r := p); auto with float.",
                        "VernacExtend",
                        "7048730245b0c3638c71d7ff6b9bcc61b49a324e"
                    ]
                },
                {
                    "command": [
                        "rewrite (Fopp_correct radix); rewrite <- (Ropp_involutive p); rewrite <- (Faux.Rabsolu_left1 p); auto with real; apply Rlt_le; auto.",
                        "VernacExtend",
                        "b23f30313bf596812192046bbedd4f23530f60a3"
                    ]
                },
                {
                    "command": [
                        "apply RleRoundedLessR0 with (P := P) (r := p); auto; apply Rlt_le; auto.",
                        "VernacExtend",
                        "ba16d1adf990797c1eb641dda7d82f72aa812141"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "ZroundZ",
            "line_nb": 713,
            "steps": [
                {
                    "command": [
                        "intros P z p HP H'.",
                        "VernacExtend",
                        "b6911e94608d192d0f9c3687d69422ddc7ba6ebb"
                    ]
                },
                {
                    "command": [
                        "case (RoundedModeRep b radix precision) with (P := P) (p := Float z 0%nat) (q := p); auto.",
                        "VernacExtend",
                        "3023885083a0f6b6bcce06e1df7ec2259ebce4b1"
                    ]
                },
                {
                    "command": [
                        "cut (CompatibleP b radix P); [ intros Cp | apply RoundedModeP_inv2 with (1 := HP); auto ]; auto.",
                        "VernacExtend",
                        "8e56aec26509be9d9887263cd1c894a152b38f26"
                    ]
                },
                {
                    "command": [
                        "apply Cp with (1 := H'); auto.",
                        "VernacExtend",
                        "78374738641ce7257314f736c03e0b13b951d841"
                    ]
                },
                {
                    "command": [
                        "unfold FtoRradix, FtoR in |- *; simpl in |- *.",
                        "VernacExtend",
                        "85a3da1582165d92ceb7faef707de88822bccf1a"
                    ]
                },
                {
                    "command": [
                        "rewrite Rmult_1_r; auto.",
                        "VernacExtend",
                        "432903b9a980a8758eb8677bf00676318aaf1bd6"
                    ]
                },
                {
                    "command": [
                        "apply RoundedModeBounded with (P := P) (r := IZR z); auto.",
                        "VernacExtend",
                        "ab088158b7f8eabc5f3a9e8d8765f4100910cc1a"
                    ]
                },
                {
                    "command": [
                        "intros x H'0; exists x; auto.",
                        "VernacExtend",
                        "9f32462b006a00fbc25a1f682485792cbdd90b8c"
                    ]
                },
                {
                    "command": [
                        "unfold FtoRradix in |- *; rewrite H'0.",
                        "VernacExtend",
                        "9e37e82b49b17e79047f39a3d3690598d0af288a"
                    ]
                },
                {
                    "command": [
                        "unfold FtoRradix, FtoR in |- *; simpl in |- *.",
                        "VernacExtend",
                        "85a3da1582165d92ceb7faef707de88822bccf1a"
                    ]
                },
                {
                    "command": [
                        "rewrite Rmult_1_r; auto.",
                        "VernacExtend",
                        "432903b9a980a8758eb8677bf00676318aaf1bd6"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "NroundN",
            "line_nb": 726,
            "steps": [
                {
                    "command": [
                        "intros P n p HP H'.",
                        "VernacExtend",
                        "40c8895e7db86449aac2eb36264a7b1b0f046198"
                    ]
                },
                {
                    "command": [
                        "case (ZroundZ P (Z_of_nat n) p); auto.",
                        "VernacExtend",
                        "ed6d3d629cd90028b60898944d633fa97a68e116"
                    ]
                },
                {
                    "command": [
                        "repeat rewrite <- INR_IZR_INZ; auto.",
                        "VernacExtend",
                        "796171ba11a1df232b99b028373459706b0f5773"
                    ]
                },
                {
                    "command": [
                        "intros x H'0; exists (Zabs_nat x).",
                        "VernacExtend",
                        "d4acbc3a1ce27f24ac7be2a954312788f35d8a03"
                    ]
                },
                {
                    "command": [
                        "rewrite <- (inj_abs x) in H'0.",
                        "VernacExtend",
                        "3e57a3c5275c8fddc839c901af747543e028a2e5"
                    ]
                },
                {
                    "command": [
                        "rewrite H'0.",
                        "VernacExtend",
                        "155943e97f3d58c39d0b7dc8dbaf42688f94c62f"
                    ]
                },
                {
                    "command": [
                        "repeat rewrite <- INR_IZR_INZ; auto.",
                        "VernacExtend",
                        "796171ba11a1df232b99b028373459706b0f5773"
                    ]
                },
                {
                    "command": [
                        "apply le_IZR; simpl in |- *.",
                        "VernacExtend",
                        "e8000fd9b20cf028b62e70df9f80d23171ae7836"
                    ]
                },
                {
                    "command": [
                        "rewrite <- H'0; auto.",
                        "VernacExtend",
                        "fc433a0a33372284ece38ef844926b71924e0a7b"
                    ]
                },
                {
                    "command": [
                        "apply RleRoundedR0 with (P := P) (r := INR n); auto.",
                        "VernacExtend",
                        "42cbc1c434650f6f40f38eebb5dfca78d53acd79"
                    ]
                },
                {
                    "command": [
                        "replace 0%R with (INR 0); auto with real arith.",
                        "VernacExtend",
                        "3caed965951659080cf394dcb353db3f9bd924fa"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "FUlp_Le_LSigB",
            "line_nb": 739,
            "steps": [
                {
                    "command": [
                        "intros x H; unfold is_Fzero, Fulp, Fnormalize in |- *; case (Z_zerop (Fnum x)); intros ZH.",
                        "VernacExtend",
                        "35a048adc799f667bd65d9e60110d13cd4475010"
                    ]
                },
                {
                    "command": [
                        "unfold FtoRradix, FtoR in |- *; simpl in |- *.",
                        "VernacExtend",
                        "85a3da1582165d92ceb7faef707de88822bccf1a"
                    ]
                },
                {
                    "command": [
                        "rewrite Rmult_1_l.",
                        "VernacExtend",
                        "1ba58092cf1ca2fa8155dfa9c64894290b0f39df"
                    ]
                },
                {
                    "command": [
                        "apply Rle_powerRZ.",
                        "VernacExtend",
                        "5f813f119bf9102461055caa0352e823b9b2a3a7"
                    ]
                },
                {
                    "command": [
                        "replace 1%R with (INR 1); auto with real arith.",
                        "VernacExtend",
                        "0d525adb81e33c7ce8c7ad44dc3bf22ecce07477"
                    ]
                },
                {
                    "command": [
                        "apply Zle_trans with (Fexp x); auto.",
                        "VernacExtend",
                        "c4650e6c2a9e60eb5f18c2831754e0781858c8cf"
                    ]
                },
                {
                    "command": [
                        "case H; auto.",
                        "VernacExtend",
                        "0b39ac03ea00c6d2293da9883a569db11f432ebd"
                    ]
                },
                {
                    "command": [
                        "apply Fexp_le_LSB; auto.",
                        "VernacExtend",
                        "e2ef0d6a640e91f3d0a5c1a0c330f2f52eb1d7f2"
                    ]
                },
                {
                    "command": [
                        "rewrite LSB_shift with (n := min (precision - Fdigit radix x) (Zabs_nat (dExp b + Fexp x))); auto.",
                        "VernacExtend",
                        "8e7f7c381c3b4556f09b8cdf1f455e02164372c2"
                    ]
                },
                {
                    "command": [
                        "unfold FtoRradix, FtoR in |- *; simpl in |- *.",
                        "VernacExtend",
                        "85a3da1582165d92ceb7faef707de88822bccf1a"
                    ]
                },
                {
                    "command": [
                        "rewrite Rmult_1_l.",
                        "VernacExtend",
                        "1ba58092cf1ca2fa8155dfa9c64894290b0f39df"
                    ]
                },
                {
                    "command": [
                        "apply Rle_powerRZ; auto with arith.",
                        "VernacExtend",
                        "1dac2fbc2846236ed84e703abafc8007a7a40bec"
                    ]
                },
                {
                    "command": [
                        "replace 1%R with (INR 1); auto with real arith.",
                        "VernacExtend",
                        "0d525adb81e33c7ce8c7ad44dc3bf22ecce07477"
                    ]
                },
                {
                    "command": [
                        "exact (Fexp_le_LSB radix (Fshift radix (min (precision - Fdigit radix x) (Zabs_nat (dExp b + Fexp x))) x)).",
                        "VernacExtend",
                        "e9a5b9ffa1aae62f488cc1768f75c390a708753d"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "MSBtoZero",
            "line_nb": 782,
            "steps": [
                {
                    "command": [
                        "intros f1 f2 H' H'0 H'1; Casec H'; intros tmp; Elimc tmp; intros H1 H2.",
                        "VernacExtend",
                        "b75387ca8bec77107afeb2c311407b6a17e4435e"
                    ]
                },
                {
                    "command": [
                        "apply MSBisMin; auto.",
                        "VernacExtend",
                        "256d59eccaa2f50158c629596168d3151b7e76a7"
                    ]
                },
                {
                    "command": [
                        "rewrite (MSB_opp radix f1).",
                        "VernacExtend",
                        "469537774dcf28353e8759a5971e5b236d30d5a2"
                    ]
                },
                {
                    "command": [
                        "rewrite (MSB_opp radix f2).",
                        "VernacExtend",
                        "3143ad10cf5c76eba67aa98935ca6213b1d051df"
                    ]
                },
                {
                    "command": [
                        "apply MSBisMin; auto with float.",
                        "VernacExtend",
                        "d7fe701d7daf7ab54ace4832995e42998d9034cb"
                    ]
                },
                {
                    "command": [
                        "unfold FtoRradix in |- *; rewrite Fopp_correct.",
                        "VernacExtend",
                        "c3c7ad16a924a974f39fb2584a800e7199b0444e"
                    ]
                },
                {
                    "command": [
                        "replace 0%R with (-0)%R; auto with real.",
                        "VernacExtend",
                        "ad9a3c816968bd85bd0ee7d9d06b032f07b0b811"
                    ]
                },
                {
                    "command": [
                        "unfold FtoRradix in |- *; rewrite Fopp_correct; auto with float.",
                        "VernacExtend",
                        "cddbb20c10a1ca9fa0efc67e0aa29b47d2f3396a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "MSBBoundNotZero",
            "line_nb": 792,
            "steps": [
                {
                    "command": [
                        "intros P H' f1 f2 H'0 H'1 H'2.",
                        "VernacExtend",
                        "a63198b05047f36e234bb1779db5f01ea6757746"
                    ]
                },
                {
                    "command": [
                        "case (Rle_or_lt 0 f1); intros Rl1.",
                        "VernacExtend",
                        "406e8ffe07f9ec861827a02c415fa1db2f824103"
                    ]
                },
                {
                    "command": [
                        "apply Rlt_dichotomy_converse; right; red in |- *.",
                        "VernacExtend",
                        "5e6cb8110820439778b09c01c34537a9f0ba2a54"
                    ]
                },
                {
                    "command": [
                        "apply Rlt_le_trans with (r2 := FtoRradix (Float 1%nat (MSB radix f1))); auto.",
                        "VernacExtend",
                        "94bfb873334d47a6420b674f854a0cf6d299d6e1"
                    ]
                },
                {
                    "command": [
                        "unfold FtoRradix, FtoR in |- *; simpl in |- *; rewrite Rmult_1_l; auto with real arith.",
                        "VernacExtend",
                        "4983d0cfb57646f5779f79eeff08be8a4d46bf70"
                    ]
                },
                {
                    "command": [
                        "cut (Float 1%nat (MSB radix f1) <= Fabs f1)%R; unfold FtoRradix in |- *; [ rewrite Fabs_correct; auto with arith; rewrite Rabs_right; auto with real; intros Rl2; Casec Rl2; intros Rl2 | apply MSB_le_abs ]; auto.",
                        "VernacExtend",
                        "6a4cbee7c295339ccef857fd96e9e3c1823552cd"
                    ]
                },
                {
                    "command": [
                        "cut (MonotoneP radix P); [ intros Mn | apply RoundedModeP_inv4 with (1 := H'); auto ].",
                        "VernacExtend",
                        "b8b6ba48c8465dac1cd258350b711138b0e41871"
                    ]
                },
                {
                    "command": [
                        "apply (Mn (Float 1%nat (MSB radix f1)) f1); auto.",
                        "VernacExtend",
                        "894dc0117f589a6958f400df20fc3ee795f3f46b"
                    ]
                },
                {
                    "command": [
                        "apply RoundedModeProjectorIdem; auto.",
                        "VernacExtend",
                        "f1ffe11ba55f73a16400349195deb28b205e724b"
                    ]
                },
                {
                    "command": [
                        "apply (FboundedOne radix) with (precision := precision); auto with real zarith arith.",
                        "VernacExtend",
                        "3336bc1c37f8bb2a729b7e637e840bab2af53798"
                    ]
                },
                {
                    "command": [
                        "replace (FtoR radix f2) with (FtoR radix (Float 1%nat (MSB radix f1))); auto with float real.",
                        "VernacExtend",
                        "8700009a1bcf91afd8d657e4ee93806eac55ca76"
                    ]
                },
                {
                    "command": [
                        "apply RoundedModeProjectorIdemEq with (P := P); auto.",
                        "VernacExtend",
                        "73f983ca5254eaf4186e1585d25a8d4a2be98632"
                    ]
                },
                {
                    "command": [
                        "apply (FboundedOne radix) with (precision := precision); auto with real zarith arith.",
                        "VernacExtend",
                        "3336bc1c37f8bb2a729b7e637e840bab2af53798"
                    ]
                },
                {
                    "command": [
                        "cut (CompatibleP b radix P); [ intros Cp | apply RoundedModeP_inv2 with (1 := H'); auto ].",
                        "VernacExtend",
                        "2ca124a567e390b257fb21e0b477d3edc60232f2"
                    ]
                },
                {
                    "command": [
                        "apply (Cp f1) with (p := f2); auto.",
                        "VernacExtend",
                        "e350c19c18f9ca89b75b125a7352f17f0f15df77"
                    ]
                },
                {
                    "command": [
                        "apply RoundedModeBounded with (P := P) (r := FtoRradix f1); auto.",
                        "VernacExtend",
                        "995b09ad176c7301bf24d6f3b3f0f48acf525652"
                    ]
                },
                {
                    "command": [
                        "Contradict H'1; unfold FtoRradix in |- *; apply is_Fzero_rep1; auto.",
                        "VernacExtend",
                        "a7ee05a6efd11fb9a8e1e32bdd1f736764472853"
                    ]
                },
                {
                    "command": [
                        "apply Rlt_dichotomy_converse; left.",
                        "VernacExtend",
                        "8be10ff4f710df6fc2d16ffa31bf4c3b6a53d9f5"
                    ]
                },
                {
                    "command": [
                        "apply Rle_lt_trans with (r2 := FtoRradix (Float (- 1%nat) (MSB radix f1))); auto.",
                        "VernacExtend",
                        "dd3122e1c2bdcfabbca9b1082ea93c6e0a89906a"
                    ]
                },
                {
                    "command": [
                        "cut (MonotoneP radix P); [ intros Mn | apply RoundedModeP_inv4 with (1 := H'); auto ].",
                        "VernacExtend",
                        "b8b6ba48c8465dac1cd258350b711138b0e41871"
                    ]
                },
                {
                    "command": [
                        "cut (f1 <= Float (- 1%nat) (MSB radix f1))%R; [ intros Rle1; Casec Rle1; intros Rle1 | idtac ].",
                        "VernacExtend",
                        "fab858d629ff89c40f47a856e97c60fd66b6cd86"
                    ]
                },
                {
                    "command": [
                        "apply (Mn f1 (Float (- 1%nat) (MSB radix f1))); auto.",
                        "VernacExtend",
                        "5079de47e32518fd8a31968987babc6b03ac7cdc"
                    ]
                },
                {
                    "command": [
                        "apply RoundedModeProjectorIdem; auto.",
                        "VernacExtend",
                        "f1ffe11ba55f73a16400349195deb28b205e724b"
                    ]
                },
                {
                    "command": [
                        "apply oppBoundedInv; unfold Fopp in |- *; simpl in |- *.",
                        "VernacExtend",
                        "f2db45e49eeea24f3fe8a78f15489808e77b020d"
                    ]
                },
                {
                    "command": [
                        "apply (FboundedOne radix) with (precision := precision); auto with real zarith arith.",
                        "VernacExtend",
                        "3336bc1c37f8bb2a729b7e637e840bab2af53798"
                    ]
                },
                {
                    "command": [
                        "replace (FtoRradix f2) with (FtoRradix (Float (- 1%nat) (MSB radix f1))); auto with real.",
                        "VernacExtend",
                        "a0a47c3c51f6ef02fd31b8350fcad595ff17e6e8"
                    ]
                },
                {
                    "command": [
                        "apply RoundedModeProjectorIdemEq with (P := P); auto.",
                        "VernacExtend",
                        "73f983ca5254eaf4186e1585d25a8d4a2be98632"
                    ]
                },
                {
                    "command": [
                        "apply oppBoundedInv; unfold Fopp in |- *; simpl in |- *.",
                        "VernacExtend",
                        "f2db45e49eeea24f3fe8a78f15489808e77b020d"
                    ]
                },
                {
                    "command": [
                        "apply (FboundedOne _ radixMoreThanOne b precision); auto with real zarith arith.",
                        "VernacExtend",
                        "0e217afad152f4ace3bb4e806e1808618c391c48"
                    ]
                },
                {
                    "command": [
                        "cut (CompatibleP b radix P); [ intros Cp | apply RoundedModeP_inv2 with (1 := H'); auto ].",
                        "VernacExtend",
                        "2ca124a567e390b257fb21e0b477d3edc60232f2"
                    ]
                },
                {
                    "command": [
                        "apply (Cp f1) with (p := f2); auto.",
                        "VernacExtend",
                        "e350c19c18f9ca89b75b125a7352f17f0f15df77"
                    ]
                },
                {
                    "command": [
                        "apply RoundedModeBounded with (P := P) (r := FtoRradix f1); auto.",
                        "VernacExtend",
                        "995b09ad176c7301bf24d6f3b3f0f48acf525652"
                    ]
                },
                {
                    "command": [
                        "replace (FtoRradix f1) with (- FtoRradix (Fabs f1))%R.",
                        "VernacExtend",
                        "6b6fc54dbe6b255b1140f118360e418311774f68"
                    ]
                },
                {
                    "command": [
                        "replace (Float (- 1%nat) (MSB radix f1)) with (Fopp (Float 1%nat (MSB radix f1))).",
                        "VernacExtend",
                        "255f6ccf7c17fbeefe4d00b924e14212849eee6f"
                    ]
                },
                {
                    "command": [
                        "unfold FtoRradix in |- *; rewrite Fopp_correct; auto.",
                        "VernacExtend",
                        "cb2f7c06ddf935b881f8dc588261d2ace6d5cb81"
                    ]
                },
                {
                    "command": [
                        "apply Ropp_le_contravar; apply MSB_le_abs; auto.",
                        "VernacExtend",
                        "f7f5f9c5970220af44651b6b4a6446c4f558269e"
                    ]
                },
                {
                    "command": [
                        "Contradict H'1; unfold FtoRradix in |- *; apply is_Fzero_rep1; auto.",
                        "VernacExtend",
                        "a7ee05a6efd11fb9a8e1e32bdd1f736764472853"
                    ]
                },
                {
                    "command": [
                        "unfold Fopp in |- *; simpl in |- *; auto.",
                        "VernacExtend",
                        "b64d5835546167049849e985ceeb8ba8af385a1b"
                    ]
                },
                {
                    "command": [
                        "unfold FtoRradix in |- *; rewrite Fabs_correct; auto with arith; rewrite Faux.Rabsolu_left1; try apply Rlt_le; auto; ring.",
                        "VernacExtend",
                        "ba96fd76834a6e04ad4b552ca6436594d1a88f5c"
                    ]
                },
                {
                    "command": [
                        "replace (Float (- 1%nat) (MSB radix f1)) with (Fopp (Float 1%nat (MSB radix f1))); [ idtac | unfold Fopp in |- *; simpl in |- *; auto ].",
                        "VernacExtend",
                        "306d41e71488d2a388da3d63f7585dc2181eb7f0"
                    ]
                },
                {
                    "command": [
                        "replace 0%R with (-0)%R; [ idtac | ring ].",
                        "VernacExtend",
                        "f60f35ac97dc318a23d69b703000d3c8a2bbf76e"
                    ]
                },
                {
                    "command": [
                        "unfold FtoRradix in |- *; repeat rewrite Fopp_correct; apply Ropp_lt_contravar.",
                        "VernacExtend",
                        "4881ba3ff159053b9b3ec0297e0c907996fa1d53"
                    ]
                },
                {
                    "command": [
                        "unfold FtoR in |- *; simpl in |- *; rewrite Rmult_1_l; auto with real arith.",
                        "VernacExtend",
                        "22015c483afadba8bbfbbdd51c4154ffe3195ffd"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "RoundMSBmax",
            "line_nb": 837,
            "steps": [
                {
                    "command": [
                        "intros P p q H' H'0 H'1 H'2.",
                        "VernacExtend",
                        "7c10b36cc71bad9ce419a316287013d3cf2377d0"
                    ]
                },
                {
                    "command": [
                        "apply (oneExp_Zle radix); auto.",
                        "VernacExtend",
                        "f01ba89e5314509764f61e8738b745c4d6c7deee"
                    ]
                },
                {
                    "command": [
                        "apply Rle_trans with (FtoRradix (Fabs q)).",
                        "VernacExtend",
                        "1b43f13267c4789f66cf39c33354de622d8269f6"
                    ]
                },
                {
                    "command": [
                        "unfold FtoRradix in |- *; apply MSB_le_abs; auto.",
                        "VernacExtend",
                        "293ca157cf35d51b62c19cd2e312b6ef5a98349e"
                    ]
                },
                {
                    "command": [
                        "red in |- *; intros H'3; absurd (q = 0%R :>R).",
                        "VernacExtend",
                        "b4330e4b7ad0b47e13da1face3ed91b010ead03c"
                    ]
                },
                {
                    "command": [
                        "apply MSBBoundNotZero with (P := P) (f1 := p); auto.",
                        "VernacExtend",
                        "6861350c1d67db024b2e2acf1f17399dbd9e0e61"
                    ]
                },
                {
                    "command": [
                        "apply (is_Fzero_rep1 radix); auto.",
                        "VernacExtend",
                        "5529dad4f7fe297103a97c108d0b60c333caa2ec"
                    ]
                },
                {
                    "command": [
                        "unfold FtoRradix in |- *; rewrite Fabs_correct; auto with arith; fold FtoRradix in |- *.",
                        "VernacExtend",
                        "4c8f14efffbac37997f71031cea99494b6addf20"
                    ]
                },
                {
                    "command": [
                        "apply RoundAbsMonotoner with (P := P) (p := FtoRradix p); auto.",
                        "VernacExtend",
                        "8fdcf8b894083ae279d221f0c9882728213a3d19"
                    ]
                },
                {
                    "command": [
                        "apply (FboundedOne _ radixMoreThanOne b precision); auto with zarith.",
                        "VernacExtend",
                        "2d4bca6b894bd5be5dfb36ccefe73ce85ea75493"
                    ]
                },
                {
                    "command": [
                        "unfold FtoRradix in |- *; rewrite <- (Fabs_correct radix); auto with arith.",
                        "VernacExtend",
                        "551e7f0fd7e4368e0a6802055b72bb1b985c804a"
                    ]
                },
                {
                    "command": [
                        "apply Rlt_le; apply abs_lt_MSB; auto.",
                        "VernacExtend",
                        "e1f9079644733d49a54dbd6fb468b0003d748a04"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "RoundMSBmin",
            "line_nb": 851,
            "steps": [
                {
                    "command": [
                        "intros P p q H' H'0 H'1 H'2.",
                        "VernacExtend",
                        "7c10b36cc71bad9ce419a316287013d3cf2377d0"
                    ]
                },
                {
                    "command": [
                        "replace (MSB radix p) with (MSB radix (Float 1%nat (MSB radix p))).",
                        "VernacExtend",
                        "85f0d7b8939f2219161af6d711ced60ae9b1ae69"
                    ]
                },
                {
                    "command": [
                        "apply MSB_monotone; auto.",
                        "VernacExtend",
                        "e888f45b04a2c62072fe47fd193cdbd5920f7389"
                    ]
                },
                {
                    "command": [
                        "unfold is_Fzero in |- *; simpl in |- *; red in |- *; intros; discriminate.",
                        "VernacExtend",
                        "a14c836385ab5d7a576018d3f011bc77d1333845"
                    ]
                },
                {
                    "command": [
                        "red in |- *; intros H'3; absurd (q = 0%R :>R).",
                        "VernacExtend",
                        "b4330e4b7ad0b47e13da1face3ed91b010ead03c"
                    ]
                },
                {
                    "command": [
                        "apply MSBBoundNotZero with (P := P) (f1 := p); auto.",
                        "VernacExtend",
                        "6861350c1d67db024b2e2acf1f17399dbd9e0e61"
                    ]
                },
                {
                    "command": [
                        "unfold FtoRradix in |- *; apply is_Fzero_rep1; auto.",
                        "VernacExtend",
                        "1a3b75bbbe0ad7f873e630d1d8c4690170e8d400"
                    ]
                },
                {
                    "command": [
                        "replace (Fabs (Float 1%nat (MSB radix p))) with (Float 1%nat (MSB radix p)); [ idtac | unfold Fabs in |- *; simpl in |- *; auto ].",
                        "VernacExtend",
                        "16d4a22e72e6f990ccea301f406f7a3d1e78b019"
                    ]
                },
                {
                    "command": [
                        "rewrite Fabs_correct; auto with arith; fold FtoRradix in |- *.",
                        "VernacExtend",
                        "fdfd6819193b54e15a8cbc6906d576cb7ee35066"
                    ]
                },
                {
                    "command": [
                        "apply RoundAbsMonotonel with (P := P) (p := FtoRradix p); auto.",
                        "VernacExtend",
                        "1c452070c27fd11819c26cbd4f09736243f9c698"
                    ]
                },
                {
                    "command": [
                        "apply (FboundedOne _ radixMoreThanOne b precision); auto with zarith.",
                        "VernacExtend",
                        "2d4bca6b894bd5be5dfb36ccefe73ce85ea75493"
                    ]
                },
                {
                    "command": [
                        "unfold FtoRradix in |- *; rewrite <- (Fabs_correct radix); auto with arith; apply MSB_le_abs; auto.",
                        "VernacExtend",
                        "1a2acb418567c37796b4316e211ae2baa747c2ab"
                    ]
                },
                {
                    "command": [
                        "Contradict H'1; unfold FtoRradix in |- *; apply is_Fzero_rep1; auto.",
                        "VernacExtend",
                        "a7ee05a6efd11fb9a8e1e32bdd1f736764472853"
                    ]
                },
                {
                    "command": [
                        "unfold MSB, Fdigit in |- *; simpl in |- *.",
                        "VernacExtend",
                        "39b328fbf3d460a65fd81e503266e6228f004328"
                    ]
                },
                {
                    "command": [
                        "case (Zpred (digit radix (Fnum p) + Fexp p)); simpl in |- *; auto with zarith.",
                        "VernacExtend",
                        "2375890edd253ebac89617497896d96193117537"
                    ]
                },
                {
                    "command": [
                        "intros p0; case p0; simpl in |- *; auto.",
                        "VernacExtend",
                        "0cf426815ddb3204206fb3ac727d3b2b5d0b6eed"
                    ]
                },
                {
                    "command": [
                        "intros p1; elim p1; simpl in |- *; auto.",
                        "VernacExtend",
                        "a808402a1f1b6ffb9a4ede84db2de9b1ad4190d6"
                    ]
                },
                {
                    "command": [
                        "intros p2 H; injection H; intros H1; rewrite <- H1; auto.",
                        "VernacExtend",
                        "ff0d65b226b2fa55f0f7985698e08670b736d97a"
                    ]
                },
                {
                    "command": [
                        "intros p0; case p0; simpl in |- *; auto.",
                        "VernacExtend",
                        "0cf426815ddb3204206fb3ac727d3b2b5d0b6eed"
                    ]
                },
                {
                    "command": [
                        "intros p1; case p1; simpl in |- *; auto.",
                        "VernacExtend",
                        "712f6fe63e649bb4fd5e25b1f5b3d1d031020ad3"
                    ]
                },
                {
                    "command": [
                        "intros p2; elim p2; simpl in |- *; auto.",
                        "VernacExtend",
                        "ee30635c512d55f748a342ff7380267f1890bf77"
                    ]
                },
                {
                    "command": [
                        "intros p3 H; injection H; intros H1; rewrite H1; auto.",
                        "VernacExtend",
                        "b4286cc9b76eb1ed0f0f62f197aea1008378b44e"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "RoundLSBMax",
            "line_nb": 875,
            "steps": [
                {
                    "command": [
                        "intros P p q H' H'0 H'2.",
                        "VernacExtend",
                        "0c5ebce7bfeddee9355067e7d88107447fd30ae2"
                    ]
                },
                {
                    "command": [
                        "elim (LSB_rep_min radix) with (p := p); auto; intros z E.",
                        "VernacExtend",
                        "db471b8eec395ee69cc993064c7074b658d1d460"
                    ]
                },
                {
                    "command": [
                        "case (RoundedModeRep b radix precision) with (P := P) (p := Float z (LSB radix p)) (q := q); auto.",
                        "VernacExtend",
                        "f89664c236541753b03e8af84c7cc8aca111f19e"
                    ]
                },
                {
                    "command": [
                        "cut (CompatibleP b radix P); [ intros Cp | apply RoundedModeP_inv2 with (1 := H'); auto ].",
                        "VernacExtend",
                        "2ca124a567e390b257fb21e0b477d3edc60232f2"
                    ]
                },
                {
                    "command": [
                        "apply (Cp p (Float z (LSB radix p)) q); auto.",
                        "VernacExtend",
                        "1ab88fd59332f0bacdf9785fbe2e81ba22e59a9a"
                    ]
                },
                {
                    "command": [
                        "apply RoundedModeBounded with (P := P) (r := FtoRradix p); auto.",
                        "VernacExtend",
                        "3e81c58cf0a87593d6e16577630eccb61b13bfe9"
                    ]
                },
                {
                    "command": [
                        "intros x H'3.",
                        "VernacExtend",
                        "f3ffaa5f709eebecf7648cac0be00a6722784285"
                    ]
                },
                {
                    "command": [
                        "replace (LSB radix p) with (Fexp (Float x (LSB radix p))); [ idtac | simpl in |- *; auto ].",
                        "VernacExtend",
                        "9a873b626c58226c4db6481f7122cca41186122d"
                    ]
                },
                {
                    "command": [
                        "replace (LSB radix q) with (LSB radix (Float x (LSB radix p))).",
                        "VernacExtend",
                        "5569f1dc51c47be5c2c2c7f070d27ebe685b9d29"
                    ]
                },
                {
                    "command": [
                        "apply Fexp_le_LSB.",
                        "VernacExtend",
                        "b989a59d82179838da63f998b54c97076e3ee8fc"
                    ]
                },
                {
                    "command": [
                        "apply LSB_comp; auto.",
                        "VernacExtend",
                        "904ddcdb8fa7e132ffcb7a677120119b54f0d357"
                    ]
                },
                {
                    "command": [
                        "apply NisFzeroComp with (radix := radix) (x := q); auto.",
                        "VernacExtend",
                        "cd81e75cb1d6ee7342ec6d539475cddd05a3654f"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "InBinade",
            "line_nb": 889,
            "steps": [
                {
                    "command": [
                        "intros P p q r e Rp H' H'0 H'1 H'2 H'3 H'4 H'5 H'6.",
                        "VernacExtend",
                        "eab163ae56b097524868e9fb666e5622633b35d3"
                    ]
                },
                {
                    "command": [
                        "cut (p < p + q)%R; [ intros Rlt1 | idtac ].",
                        "VernacExtend",
                        "1b3ea75d1daf570a45a5e47ff137f20e16e56f37"
                    ]
                },
                {
                    "command": [
                        "cut (p + q < FNSucc b radix precision p)%R; [ intros Rlt2 | idtac ].",
                        "VernacExtend",
                        "e02a58a21a2a67af599bd41a26f8179e08b61aff"
                    ]
                },
                {
                    "command": [
                        "cut (isMin b radix (p + q) p); [ intros Min1 | idtac ].",
                        "VernacExtend",
                        "256ef4022f04e43046cc9fc5b325f852359e4c43"
                    ]
                },
                {
                    "command": [
                        "cut (isMax b radix (p + q) (FNSucc b radix precision p)); [ intros Max1 | idtac ].",
                        "VernacExtend",
                        "60db6ac8f5219dee6d46ecf97123414352ff742e"
                    ]
                },
                {
                    "command": [
                        "cut (MinOrMaxP b radix P); [ intros MinOrMax | apply RoundedModeP_inv3 with (1 := Rp); auto ].",
                        "VernacExtend",
                        "8690876097718c354eae9389e2bd8888f60f5338"
                    ]
                },
                {
                    "command": [
                        "case (MinOrMax (p + q)%R r); auto; intros H1.",
                        "VernacExtend",
                        "3308c84af4509f601bdec89f4d4146b032608dbb"
                    ]
                },
                {
                    "command": [
                        "left.",
                        "VernacExtend",
                        "06dad9fc5698018f3f1213205145fec906c612b1"
                    ]
                },
                {
                    "command": [
                        "apply (MinUniqueP b radix (p + q)%R); auto.",
                        "VernacExtend",
                        "c5ee46eefecb0c17043d4666ee4339e1d533d9b4"
                    ]
                },
                {
                    "command": [
                        "right.",
                        "VernacExtend",
                        "27e417a3497755767e1a1d6ba87753ecddaee6b7"
                    ]
                },
                {
                    "command": [
                        "cut ((p + powerRZ radix e)%R = FNSucc b radix precision p); [ intros Eq1; rewrite Eq1 | idtac ].",
                        "VernacExtend",
                        "9a2ba2ee7b7216088c535fe852afe5b26a991f71"
                    ]
                },
                {
                    "command": [
                        "apply (MaxUniqueP b radix (p + q)%R); auto.",
                        "VernacExtend",
                        "2a7cb92a0b5b7999687578e8a15726db8feabed5"
                    ]
                },
                {
                    "command": [
                        "replace (FtoRradix (FNSucc b radix precision p)) with (Fnormalize radix b precision p + (FNSucc b radix precision p - Fnormalize radix b precision p))%R; [ idtac | ring ].",
                        "VernacExtend",
                        "1610844cc5d15d7c666e8122b5eddc9639ee2ffa"
                    ]
                },
                {
                    "command": [
                        "unfold FNSucc in |- *; rewrite <- (Fminus_correct radix); auto with arith; rewrite (FSuccDiff1 b radix precision); auto with arith.",
                        "VernacExtend",
                        "133a818d2ad05da7bf731f0a4ae4492ca2d7483e"
                    ]
                },
                {
                    "command": [
                        "rewrite (boundedNorMinGivesExp radix) with (x := e); auto with zarith.",
                        "VernacExtend",
                        "8cabcf3e7591c939c86e811c2f833b5d5de76a54"
                    ]
                },
                {
                    "command": [
                        "rewrite (FnormalizeCorrect radix); auto; unfold FtoRradix, FtoR in |- *; simpl in |- *; ring.",
                        "VernacExtend",
                        "d21ad8c7b9defdeba70e1d3d06e045ea9b957ba0"
                    ]
                },
                {
                    "command": [
                        "apply sym_not_equal; apply Zlt_not_eq.",
                        "VernacExtend",
                        "7b38bf851c75b1e2cdd7f7b0afb8d6236ccdc729"
                    ]
                },
                {
                    "command": [
                        "apply Zle_lt_trans with 0%Z; auto with zarith.",
                        "VernacExtend",
                        "9627704dbf47c3cd9cc05e1faa3db45759fc18e5"
                    ]
                },
                {
                    "command": [
                        "replace 0%Z with (- (0))%Z; auto with zarith; apply Zle_Zopp; apply Zlt_le_weak; apply nNormPos; auto with zarith.",
                        "VernacExtend",
                        "c0f026a0432bf623824546e66761311d63b229ed"
                    ]
                },
                {
                    "command": [
                        "apply (LtR0Fnum radix); auto.",
                        "VernacExtend",
                        "f2aa05f3433f9e2deac0adbac1c511d1f2b83f37"
                    ]
                },
                {
                    "command": [
                        "rewrite FnormalizeCorrect; fold FtoRradix in |- *; auto.",
                        "VernacExtend",
                        "0fe26dee4cbf03d67600715701477b7ffb201e77"
                    ]
                },
                {
                    "command": [
                        "apply Rlt_le_trans with (2 := H'3).",
                        "VernacExtend",
                        "14a8bb82f5bd8e9d2eff1285a0178abfd7327d3e"
                    ]
                },
                {
                    "command": [
                        "apply (LtFnumZERO radix); simpl in |- *; (replace 0%Z with (Z_of_nat 0); auto with zarith arith).",
                        "VernacExtend",
                        "8d58e306e25d2baa599b4d9fe8175dc3384e301c"
                    ]
                },
                {
                    "command": [
                        "apply MinMax; auto with arith.",
                        "VernacExtend",
                        "d46275408a904beb31a823f653bce79ac8edf3f7"
                    ]
                },
                {
                    "command": [
                        "Contradict Rlt1.",
                        "VernacExtend",
                        "7646223f294f1a6ddb616f3aa2b07180b7c46e29"
                    ]
                },
                {
                    "command": [
                        "rewrite Rlt1; auto with real.",
                        "VernacExtend",
                        "b1603301782310554f2dcdc622b96f289ba5b618"
                    ]
                },
                {
                    "command": [
                        "apply MinBinade with (precision := precision); auto with arith.",
                        "VernacExtend",
                        "5566c720cffab5992f01efd3bf34b8ad4537051b"
                    ]
                },
                {
                    "command": [
                        "apply Rlt_le; auto.",
                        "VernacExtend",
                        "4003e3e1c449ee89cad9e953d0a562db8235648c"
                    ]
                },
                {
                    "command": [
                        "replace (FtoRradix (FNSucc b radix precision p)) with (Fnormalize radix b precision p + (FNSucc b radix precision p - Fnormalize radix b precision p))%R; [ idtac | ring ].",
                        "VernacExtend",
                        "1610844cc5d15d7c666e8122b5eddc9639ee2ffa"
                    ]
                },
                {
                    "command": [
                        "unfold FNSucc in |- *; rewrite <- (Fminus_correct radix); auto with arith; rewrite (FSuccDiff1 b radix precision); auto with arith.",
                        "VernacExtend",
                        "133a818d2ad05da7bf731f0a4ae4492ca2d7483e"
                    ]
                },
                {
                    "command": [
                        "rewrite (boundedNorMinGivesExp radix) with (x := e); auto with zarith.",
                        "VernacExtend",
                        "8cabcf3e7591c939c86e811c2f833b5d5de76a54"
                    ]
                },
                {
                    "command": [
                        "rewrite (FnormalizeCorrect radix); auto; fold FtoRradix in |- *.",
                        "VernacExtend",
                        "89ef536b687a91a2e21ace8a0b5a2ada295415d4"
                    ]
                },
                {
                    "command": [
                        "replace (FtoRradix (Float 1%nat e)) with (powerRZ radix e); auto with real.",
                        "VernacExtend",
                        "cddd49df0abec9cb299fa90f61aaccab5c92a42e"
                    ]
                },
                {
                    "command": [
                        "unfold FtoRradix, FtoR in |- *; simpl in |- *; ring.",
                        "VernacExtend",
                        "5b3b96c09542c1778400f311cf15a289b4188c3b"
                    ]
                },
                {
                    "command": [
                        "apply sym_not_equal; apply Zlt_not_eq.",
                        "VernacExtend",
                        "7b38bf851c75b1e2cdd7f7b0afb8d6236ccdc729"
                    ]
                },
                {
                    "command": [
                        "apply Zle_lt_trans with 0%Z; auto with zarith.",
                        "VernacExtend",
                        "9627704dbf47c3cd9cc05e1faa3db45759fc18e5"
                    ]
                },
                {
                    "command": [
                        "replace 0%Z with (- (0))%Z; auto with zarith; apply Zle_Zopp; apply Zlt_le_weak; apply nNormPos; auto with zarith.",
                        "VernacExtend",
                        "c0f026a0432bf623824546e66761311d63b229ed"
                    ]
                },
                {
                    "command": [
                        "apply (LtR0Fnum radix); auto.",
                        "VernacExtend",
                        "f2aa05f3433f9e2deac0adbac1c511d1f2b83f37"
                    ]
                },
                {
                    "command": [
                        "rewrite FnormalizeCorrect; fold FtoRradix in |- *; auto.",
                        "VernacExtend",
                        "0fe26dee4cbf03d67600715701477b7ffb201e77"
                    ]
                },
                {
                    "command": [
                        "apply Rlt_le_trans with (2 := H'3).",
                        "VernacExtend",
                        "14a8bb82f5bd8e9d2eff1285a0178abfd7327d3e"
                    ]
                },
                {
                    "command": [
                        "apply (LtFnumZERO radix); simpl in |- *; (replace 0%Z with (Z_of_nat 0); auto with zarith arith).",
                        "VernacExtend",
                        "8d58e306e25d2baa599b4d9fe8175dc3384e301c"
                    ]
                },
                {
                    "command": [
                        "pattern (FtoRradix p) at 1 in |- *; replace (FtoRradix p) with (p + 0)%R; [ idtac | ring ].",
                        "VernacExtend",
                        "a86178578e0a7e10195b5acb848d00aa7349be64"
                    ]
                },
                {
                    "command": [
                        "apply Rplus_lt_compat_l; auto.",
                        "VernacExtend",
                        "4b6a14448b340686174c8e42c0bdfbd475022946"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        }
    ]
}