{
    "filename": "betapar.v",
    "coq_project": "subst",
    "vernac_cmds": [
        [
            "Require Import TS.",
            "VernacRequire",
            "0efc95946ebf06e75e8af0e13defbd75c6222fbe"
        ],
        [
            "Require Import sur_les_relations.",
            "VernacRequire",
            "fbe5aa22e7f824fda8b3207a53ca5f6d1b43c1ca"
        ],
        [
            "Inductive e_beta_par : forall b : wsort, TS b -> TS b -> Prop := | var_bpar : forall n : nat, e_beta_par wt (var n) (var n) | id_bpar : e_beta_par ws id id | shift_bpar : e_beta_par ws shift shift | app_bpar : forall M N M' N' : terms, e_beta_par wt M M' -> e_beta_par wt N N' -> e_beta_par wt (app M N) (app M' N') | lambda_bpar : forall M M' : terms, e_beta_par wt M M' -> e_beta_par wt (lambda M) (lambda M') | env_bpar : forall (M M' : terms) (s s' : sub_explicits), e_beta_par wt M M' -> e_beta_par ws s s' -> e_beta_par wt (env M s) (env M' s') | beta_bpar : forall M N M' N' : terms, e_beta_par wt M M' -> e_beta_par wt N N' -> e_beta_par wt (app (lambda M) N) (env M' (cons N' id)) | cons_bpar : forall (M M' : terms) (s s' : sub_explicits), e_beta_par wt M M' -> e_beta_par ws s s' -> e_beta_par ws (cons M s) (cons M' s') | lift_bpar : forall s s' : sub_explicits, e_beta_par ws s s' -> e_beta_par ws (lift s) (lift s') | comp_bpar : forall s s' t t' : sub_explicits, e_beta_par ws s s' -> e_beta_par ws t t' -> e_beta_par ws (comp s t) (comp s' t') | metaX_bpar : forall n : nat, e_beta_par wt (meta_X n) (meta_X n) | metax_bpar : forall n : nat, e_beta_par ws (meta_x n) (meta_x n).",
            "VernacInductive",
            "f2ffc76ea80a7c139646e186fcacb995b9f2648d"
        ],
        [
            "Hint Resolve var_bpar id_bpar shift_bpar app_bpar lambda_bpar env_bpar beta_bpar cons_bpar lift_bpar comp_bpar metaX_bpar metax_bpar.",
            "VernacHints",
            "db8cead774ec825b63d937488f4c9bbb9d97fec7"
        ],
        [
            "Notation beta_par := (e_beta_par _) (only parsing).",
            "VernacSyntacticDefinition",
            "09728ea1c8bc46784d47af0b56c6c7f426e08490"
        ],
        [
            "Goal forall (b : wsort) (M : TS b), e_beta_par _ M M.",
            "VernacDefinition",
            "ae5bd3f23101329911bd1a61a1e1cfc4ae6e8bae"
        ],
        [
            "simple induction M; auto.",
            "VernacExtend",
            "b94a297a51653c54326558718a390fc5ede6e3a9"
        ],
        [
            "Save refl_betapar.",
            "VernacEndProof",
            "5b7d1cd3f2d23be39d45660dbf166d848d1f731d"
        ],
        [
            "Hint Resolve refl_betapar.",
            "VernacHints",
            "4f9ef11bfaa45ee9b038e8e0059d79066304987b"
        ],
        [
            "Definition e_betapar_inv (b : wsort) (M N : TS b) := match M in (TS b) return Prop with | var n => match N in (TS b) return Prop with | var m => n = m | app N1 N2 => False | lambda N1 => False | env N1 N2 => False | id => False | shift => False | cons N1 N2 => False | comp N1 N2 => False | lift N1 => False | meta_X n => False | meta_x n => False end | app M1 M2 => match N in (TS b) return Prop with | var n => False | app N1 N2 => e_beta_par _ M1 N1 /\\ e_beta_par _ M2 N2 | lambda N1 => False | env N1 N2 => exists M3 : terms, (exists N3 : terms, M1 = lambda M3 /\\ e_beta_par _ M3 N1 /\\ N2 = cons N3 id /\\ e_beta_par _ M2 N3) | id => False | shift => False | cons N1 N2 => False | comp N1 N2 => False | lift N1 => False | meta_X n => False | meta_x n => False end | lambda M1 => match N in (TS b) return Prop with | var n => False | app N1 N2 => False | lambda N1 => e_beta_par _ M1 N1 | env N1 N2 => False | id => False | shift => False | cons N1 N2 => False | comp N1 N2 => False | lift N1 => False | meta_X n => False | meta_x n => False end | env M1 M2 => match N in (TS b) return Prop with | var n => False | app N1 N2 => False | lambda N1 => False | env N1 N2 => e_beta_par _ M1 N1 /\\ e_beta_par _ M2 N2 | id => False | shift => False | cons N1 N2 => False | comp N1 N2 => False | lift N1 => False | meta_X n => False | meta_x n => False end | id => match N in (TS b) return Prop with | var n => False | app N1 N2 => False | lambda N1 => False | env N1 N2 => False | id => True | shift => False | cons N1 N2 => False | comp N1 N2 => False | lift N1 => False | meta_X n => False | meta_x n => False end | shift => match N in (TS b) return Prop with | var n => False | app N1 N2 => False | lambda N1 => False | env N1 N2 => False | id => False | shift => True | cons N1 N2 => False | comp N1 N2 => False | lift N1 => False | meta_X n => False | meta_x n => False end | cons M1 M2 => match N in (TS b) return Prop with | var n => False | app N1 N2 => False | lambda N1 => False | env N1 N2 => False | id => False | shift => False | cons N1 N2 => e_beta_par _ M1 N1 /\\ e_beta_par _ M2 N2 | comp N1 N2 => False | lift N1 => False | meta_X n => False | meta_x n => False end | comp M1 M2 => match N in (TS b) return Prop with | var n => False | app N1 N2 => False | lambda N1 => False | env N1 N2 => False | id => False | shift => False | cons N1 N2 => False | comp N1 N2 => e_beta_par _ M1 N1 /\\ e_beta_par _ M2 N2 | lift N1 => False | meta_X n => False | meta_x n => False end | lift M1 => match N in (TS b) return Prop with | var n => False | app N1 N2 => False | lambda N1 => False | env N1 N2 => False | id => False | shift => False | cons N1 N2 => False | comp N1 N2 => False | lift N1 => e_beta_par _ M1 N1 | meta_X n => False | meta_x n => False end | meta_X n => match N in (TS b) return Prop with | var n => False | app N1 N2 => False | lambda N1 => False | env N1 N2 => False | id => False | shift => False | cons N1 N2 => False | comp N1 N2 => False | lift N1 => False | meta_X m => n = m | meta_x m => False end | meta_x n => match N in (TS b) return Prop with | var n => False | app N1 N2 => False | lambda N1 => False | env N1 N2 => False | id => False | shift => False | cons N1 N2 => False | comp N1 N2 => False | lift N1 => False | meta_X m => False | meta_x m => n = m end end.",
            "VernacDefinition",
            "cb3d59914d203cf3d3681ae85fdb5ca441a653f1"
        ],
        [
            "Notation betapar_inv := (e_betapar_inv _) (only parsing).",
            "VernacSyntacticDefinition",
            "5a566452d57ce992ce9811c6c39aee9f927ef896"
        ],
        [
            "Goal forall (b : wsort) (M N : TS b), e_beta_par _ M N -> e_betapar_inv _ M N.",
            "VernacDefinition",
            "4d73ccc2fad0247a50ba006372a01418d43e939b"
        ],
        [
            "simple induction 1; intros; simpl in |- *; auto.",
            "VernacExtend",
            "6a1e21f49fb615ef138736df76d82cb495a025b5"
        ],
        [
            "exists M0; exists N'; auto.",
            "VernacExtend",
            "635398dfaad4b56fb49b28732929927d71e5dc7d"
        ],
        [
            "Save lemma1_inv_betapar.",
            "VernacEndProof",
            "fbdc570c52cd9991e2f218dfe92516150e0361dc"
        ],
        [
            "Hint Resolve lemma1_inv_betapar.",
            "VernacHints",
            "e0ea95a40836d9e0ea20bb846061e7638de7920f"
        ],
        [
            "Goal forall (P : terms -> Prop) (n : nat), P (var n) -> forall M : terms, e_beta_par _ (var n) M -> P M.",
            "VernacDefinition",
            "e707bf5b510d705a998810c2215575470aa26578"
        ],
        [
            "intros P n H M H0; cut (e_betapar_inv _ (var n) M).",
            "VernacExtend",
            "0ec2ec62b953ee47f018b225ce04d7fa58827f76"
        ],
        [
            "2: auto.",
            "VernacExtend",
            "39c1ddb0360c4672841c6c9a8ce0db8d5b584563"
        ],
        [
            "pattern M in |- *; apply terms_ind.",
            "VernacExtend",
            "e46f87093c095139900b6443f30f4288c038b440"
        ],
        [
            "simple induction 1; assumption.",
            "VernacExtend",
            "88f164baf3ecfa0e98efe8230374d1c72e5e0000"
        ],
        [
            "simple induction 3.",
            "VernacExtend",
            "557e6c9122d883e86bf1370310067f1e7196019c"
        ],
        [
            "simple induction 2.",
            "VernacExtend",
            "6f1257380e20b5e439ffc2b050497a21a71a826c"
        ],
        [
            "simple induction 2.",
            "VernacExtend",
            "6f1257380e20b5e439ffc2b050497a21a71a826c"
        ],
        [
            "simple induction 1.",
            "VernacExtend",
            "b1f838dd75029717483785a8785c7867663c75bc"
        ],
        [
            "Save case_bvar.",
            "VernacEndProof",
            "8c2faaae75ddbf1cd3ea58ec5fdfff07ad173cde"
        ],
        [
            "Goal forall (P : terms -> Prop) (a b : terms), (forall a' b' : terms, e_beta_par _ a a' -> e_beta_par _ b b' -> P (app a' b')) -> (forall a1 a1' b' : terms, a = lambda a1 -> e_beta_par _ a1 a1' -> e_beta_par _ b b' -> P (env a1' (cons b' id))) -> forall M : terms, e_beta_par _ (app a b) M -> P M.",
            "VernacDefinition",
            "9d6a516334582761aa27feb92c6dbf6d4384b0b1"
        ],
        [
            "intros P a b H H0 M H1; cut (e_betapar_inv _ (app a b) M).",
            "VernacExtend",
            "eb1e2b15220d5c3304cc7b60fb00179fb41741c3"
        ],
        [
            "2: auto.",
            "VernacExtend",
            "39c1ddb0360c4672841c6c9a8ce0db8d5b584563"
        ],
        [
            "pattern M in |- *; apply terms_ind.",
            "VernacExtend",
            "e46f87093c095139900b6443f30f4288c038b440"
        ],
        [
            "simple induction 1.",
            "VernacExtend",
            "b1f838dd75029717483785a8785c7867663c75bc"
        ],
        [
            "unfold e_betapar_inv at 3 in |- *; intros a' b' H2 H3 H4.",
            "VernacExtend",
            "40835b5485b3a3e052ea94bf4e4c432d7fae1359"
        ],
        [
            "elim H4; intros H5 H6.",
            "VernacExtend",
            "919e2fafb02965eed139c7dd37195f59b15ea335"
        ],
        [
            "apply H; assumption.",
            "VernacExtend",
            "7904d623a02884c927ef4e8b66c90cb12eee7c7a"
        ],
        [
            "simple induction 2.",
            "VernacExtend",
            "6f1257380e20b5e439ffc2b050497a21a71a826c"
        ],
        [
            "unfold e_betapar_inv at 2 in |- *; intros a1' H2 s H3.",
            "VernacExtend",
            "0d0a9015046f001aa7eb984a182ced43178c7d7c"
        ],
        [
            "elim H3; intros a1 H4; elim H4; intros b' H5.",
            "VernacExtend",
            "cf9a5ed797475800113a39f9c3b1b8424dd06539"
        ],
        [
            "elim H5; intros H6 H7; elim H7; intros H8 H9; elim H9; intros H10 H11.",
            "VernacExtend",
            "69a212c7276314eaf4b236ce9b09822353d4066c"
        ],
        [
            "try rewrite H6; try rewrite H10; apply (H0 a1); assumption.",
            "VernacExtend",
            "fe7fe7bbd5647979ff70d9104ae8de2b06576905"
        ],
        [
            "simple induction 1.",
            "VernacExtend",
            "b1f838dd75029717483785a8785c7867663c75bc"
        ],
        [
            "Save case_bapp.",
            "VernacEndProof",
            "d415e4d4911d9dc2463f8e231d71e215ad7b22f1"
        ],
        [
            "Goal forall (P : terms -> Prop) (a : terms), (forall a' : terms, e_beta_par _ a a' -> P (lambda a')) -> forall M : terms, e_beta_par _ (lambda a) M -> P M.",
            "VernacDefinition",
            "9986b9975ecaf3a0e241d8960f0ac51a995c4582"
        ],
        [
            "intros P a H M H0; cut (e_betapar_inv _ (lambda a) M).",
            "VernacExtend",
            "6d7b75185fc773d9c431788e379374f335d25350"
        ],
        [
            "2: auto.",
            "VernacExtend",
            "39c1ddb0360c4672841c6c9a8ce0db8d5b584563"
        ],
        [
            "pattern M in |- *; apply terms_ind.",
            "VernacExtend",
            "e46f87093c095139900b6443f30f4288c038b440"
        ],
        [
            "simple induction 1.",
            "VernacExtend",
            "b1f838dd75029717483785a8785c7867663c75bc"
        ],
        [
            "simple induction 3.",
            "VernacExtend",
            "557e6c9122d883e86bf1370310067f1e7196019c"
        ],
        [
            "unfold e_betapar_inv at 2 in |- *; intros a' H1 H2.",
            "VernacExtend",
            "21ab041caa8f846803b38b16030a6bf81282c535"
        ],
        [
            "apply H; assumption.",
            "VernacExtend",
            "7904d623a02884c927ef4e8b66c90cb12eee7c7a"
        ],
        [
            "simple induction 2.",
            "VernacExtend",
            "6f1257380e20b5e439ffc2b050497a21a71a826c"
        ],
        [
            "simple induction 1.",
            "VernacExtend",
            "b1f838dd75029717483785a8785c7867663c75bc"
        ],
        [
            "Save case_blambda.",
            "VernacEndProof",
            "c67c402417829627047974ecbd6a17631d6993d3"
        ],
        [
            "Goal forall (P : terms -> Prop) (a : terms) (s : sub_explicits), (forall (a' : terms) (s' : sub_explicits), e_beta_par _ a a' -> e_beta_par _ s s' -> P (env a' s')) -> forall M : terms, e_beta_par _ (env a s) M -> P M.",
            "VernacDefinition",
            "9023c72b849fe91834c5fc20e76c6eb2ca1938b1"
        ],
        [
            "intros P a s H M H0; cut (e_betapar_inv _ (env a s) M).",
            "VernacExtend",
            "a3b50ddfb775ebfcbe12c65d6f515ace3fbddab7"
        ],
        [
            "2: auto.",
            "VernacExtend",
            "39c1ddb0360c4672841c6c9a8ce0db8d5b584563"
        ],
        [
            "pattern M in |- *; apply terms_ind.",
            "VernacExtend",
            "e46f87093c095139900b6443f30f4288c038b440"
        ],
        [
            "simple induction 1.",
            "VernacExtend",
            "b1f838dd75029717483785a8785c7867663c75bc"
        ],
        [
            "simple induction 3.",
            "VernacExtend",
            "557e6c9122d883e86bf1370310067f1e7196019c"
        ],
        [
            "simple induction 2.",
            "VernacExtend",
            "6f1257380e20b5e439ffc2b050497a21a71a826c"
        ],
        [
            "unfold e_betapar_inv at 2 in |- *; intros a' H1 s' H2.",
            "VernacExtend",
            "186c7c8a132e96b6dc041effc9cf16d451ae743d"
        ],
        [
            "elim H2; intros; apply H; assumption.",
            "VernacExtend",
            "557079cbd8406da63cdefa91d9f60c6cd81b8dae"
        ],
        [
            "simple induction 1.",
            "VernacExtend",
            "b1f838dd75029717483785a8785c7867663c75bc"
        ],
        [
            "Save case_benv.",
            "VernacEndProof",
            "81d531b28a5cff29e88d457ecfff1a481fc08d80"
        ],
        [
            "Goal forall P : sub_explicits -> Prop, P id -> forall M : sub_explicits, e_beta_par _ id M -> P M.",
            "VernacDefinition",
            "a6120a88b7f80cdb19b8478a1ac225ca6badc107"
        ],
        [
            "intros P H M H0; cut (e_betapar_inv _ id M).",
            "VernacExtend",
            "ce1e5fdf3bdd338d108f94e390edc61bbfa3ca64"
        ],
        [
            "2: auto.",
            "VernacExtend",
            "39c1ddb0360c4672841c6c9a8ce0db8d5b584563"
        ],
        [
            "pattern M in |- *; apply sub_explicits_ind.",
            "VernacExtend",
            "2bb72eb631243de6b1d000da720c8f2f10c53e82"
        ],
        [
            "intro; assumption.",
            "VernacExtend",
            "551ec2015f4dd20223b70c4f4cd79f05302e6cf6"
        ],
        [
            "simple induction 1.",
            "VernacExtend",
            "b1f838dd75029717483785a8785c7867663c75bc"
        ],
        [
            "simple induction 2.",
            "VernacExtend",
            "6f1257380e20b5e439ffc2b050497a21a71a826c"
        ],
        [
            "simple induction 3.",
            "VernacExtend",
            "557e6c9122d883e86bf1370310067f1e7196019c"
        ],
        [
            "simple induction 2.",
            "VernacExtend",
            "6f1257380e20b5e439ffc2b050497a21a71a826c"
        ],
        [
            "simple induction 1.",
            "VernacExtend",
            "b1f838dd75029717483785a8785c7867663c75bc"
        ],
        [
            "Save case_bid.",
            "VernacEndProof",
            "163582a65bbde42510c8bf17fed1e1b4336db365"
        ],
        [
            "Goal forall P : sub_explicits -> Prop, P shift -> forall M : sub_explicits, e_beta_par _ shift M -> P M.",
            "VernacDefinition",
            "fb353368ad257c9cf7ba3ab4d8ba7addce8f144f"
        ],
        [
            "intros P H M H0; cut (e_betapar_inv _ shift M).",
            "VernacExtend",
            "633cd45e1af58ef040500dd88b1f5b819f97ae46"
        ],
        [
            "2: auto.",
            "VernacExtend",
            "39c1ddb0360c4672841c6c9a8ce0db8d5b584563"
        ],
        [
            "pattern M in |- *; apply sub_explicits_ind.",
            "VernacExtend",
            "2bb72eb631243de6b1d000da720c8f2f10c53e82"
        ],
        [
            "simple induction 1.",
            "VernacExtend",
            "b1f838dd75029717483785a8785c7867663c75bc"
        ],
        [
            "intro; assumption.",
            "VernacExtend",
            "551ec2015f4dd20223b70c4f4cd79f05302e6cf6"
        ],
        [
            "simple induction 2.",
            "VernacExtend",
            "6f1257380e20b5e439ffc2b050497a21a71a826c"
        ],
        [
            "simple induction 3.",
            "VernacExtend",
            "557e6c9122d883e86bf1370310067f1e7196019c"
        ],
        [
            "simple induction 2.",
            "VernacExtend",
            "6f1257380e20b5e439ffc2b050497a21a71a826c"
        ],
        [
            "simple induction 1.",
            "VernacExtend",
            "b1f838dd75029717483785a8785c7867663c75bc"
        ],
        [
            "Save case_bshift.",
            "VernacEndProof",
            "d360f5dcdcb3d5ca79d37a476c4f3bb366683082"
        ],
        [
            "Goal forall (P : sub_explicits -> Prop) (a : terms) (s : sub_explicits), (forall (a' : terms) (s' : sub_explicits), e_beta_par _ a a' -> e_beta_par _ s s' -> P (cons a' s')) -> forall M : sub_explicits, e_beta_par _ (cons a s) M -> P M.",
            "VernacDefinition",
            "bd3e30a729d672639137dfe20408065b88feaa1b"
        ],
        [
            "intros P a s H M H0; cut (e_betapar_inv _ (cons a s) M).",
            "VernacExtend",
            "f9c85a6579d942162bcbeb3a37b1a02d906c70dd"
        ],
        [
            "2: auto.",
            "VernacExtend",
            "39c1ddb0360c4672841c6c9a8ce0db8d5b584563"
        ],
        [
            "pattern M in |- *; apply sub_explicits_ind.",
            "VernacExtend",
            "2bb72eb631243de6b1d000da720c8f2f10c53e82"
        ],
        [
            "simple induction 1.",
            "VernacExtend",
            "b1f838dd75029717483785a8785c7867663c75bc"
        ],
        [
            "simple induction 1.",
            "VernacExtend",
            "b1f838dd75029717483785a8785c7867663c75bc"
        ],
        [
            "unfold e_betapar_inv at 2 in |- *; intros s' H1 a' H2.",
            "VernacExtend",
            "fe96c0fa7d9a7a3984905afc08699513fb72c685"
        ],
        [
            "elim H2; intros.",
            "VernacExtend",
            "1fdc85439644114ac67a1ade25e79a4d8c3588d6"
        ],
        [
            "apply H; assumption.",
            "VernacExtend",
            "7904d623a02884c927ef4e8b66c90cb12eee7c7a"
        ],
        [
            "simple induction 3.",
            "VernacExtend",
            "557e6c9122d883e86bf1370310067f1e7196019c"
        ],
        [
            "simple induction 2.",
            "VernacExtend",
            "6f1257380e20b5e439ffc2b050497a21a71a826c"
        ],
        [
            "simple induction 1.",
            "VernacExtend",
            "b1f838dd75029717483785a8785c7867663c75bc"
        ],
        [
            "Save case_bcons.",
            "VernacEndProof",
            "0979383b18ac7cd16ee4cedf6d97bec59a94288d"
        ],
        [
            "Goal forall (P : sub_explicits -> Prop) (s t : sub_explicits), (forall s' t' : sub_explicits, e_beta_par _ s s' -> e_beta_par _ t t' -> P (comp s' t')) -> forall M : sub_explicits, e_beta_par _ (comp s t) M -> P M.",
            "VernacDefinition",
            "914640f26d915e2de6633371c2931f24fa1a0892"
        ],
        [
            "intros P s t H M H0; cut (e_betapar_inv _ (comp s t) M).",
            "VernacExtend",
            "814aa0fbd28a9a55116ae8d24024b91f6c6eb8ca"
        ],
        [
            "2: auto.",
            "VernacExtend",
            "39c1ddb0360c4672841c6c9a8ce0db8d5b584563"
        ],
        [
            "pattern M in |- *; apply sub_explicits_ind.",
            "VernacExtend",
            "2bb72eb631243de6b1d000da720c8f2f10c53e82"
        ],
        [
            "simple induction 1.",
            "VernacExtend",
            "b1f838dd75029717483785a8785c7867663c75bc"
        ],
        [
            "simple induction 1.",
            "VernacExtend",
            "b1f838dd75029717483785a8785c7867663c75bc"
        ],
        [
            "simple induction 2.",
            "VernacExtend",
            "6f1257380e20b5e439ffc2b050497a21a71a826c"
        ],
        [
            "unfold e_betapar_inv at 3 in |- *.",
            "VernacExtend",
            "83604b3b90c753642aa5cdf619ebacbd7348dddb"
        ],
        [
            "intros s' t' H1 H2 H3; elim H3; intros; apply H; assumption.",
            "VernacExtend",
            "449b4f5ecb95e1ea4d7ac91124618c382f84a537"
        ],
        [
            "simple induction 2.",
            "VernacExtend",
            "6f1257380e20b5e439ffc2b050497a21a71a826c"
        ],
        [
            "simple induction 1.",
            "VernacExtend",
            "b1f838dd75029717483785a8785c7867663c75bc"
        ],
        [
            "Save case_bcomp.",
            "VernacEndProof",
            "36ef16072c0e626ae0c66c597644ecf831968e70"
        ],
        [
            "Goal forall (P : sub_explicits -> Prop) (s : sub_explicits), (forall s' : sub_explicits, e_beta_par _ s s' -> P (lift s')) -> forall M : sub_explicits, e_beta_par _ (lift s) M -> P M.",
            "VernacDefinition",
            "4cae79b13bb566e7f4f6218f8b63acf81a568b53"
        ],
        [
            "intros P s H M H0; cut (e_betapar_inv _ (lift s) M).",
            "VernacExtend",
            "8d18d0da18a995877955d35ec14cb575479d8fc2"
        ],
        [
            "2: auto.",
            "VernacExtend",
            "39c1ddb0360c4672841c6c9a8ce0db8d5b584563"
        ],
        [
            "pattern M in |- *; apply sub_explicits_ind.",
            "VernacExtend",
            "2bb72eb631243de6b1d000da720c8f2f10c53e82"
        ],
        [
            "simple induction 1.",
            "VernacExtend",
            "b1f838dd75029717483785a8785c7867663c75bc"
        ],
        [
            "simple induction 1.",
            "VernacExtend",
            "b1f838dd75029717483785a8785c7867663c75bc"
        ],
        [
            "simple induction 2.",
            "VernacExtend",
            "6f1257380e20b5e439ffc2b050497a21a71a826c"
        ],
        [
            "simple induction 3.",
            "VernacExtend",
            "557e6c9122d883e86bf1370310067f1e7196019c"
        ],
        [
            "unfold e_betapar_inv at 2 in |- *.",
            "VernacExtend",
            "439a384f136eba4df1a5faba0abd74059710fcd6"
        ],
        [
            "intros s' H1 H2; apply H; assumption.",
            "VernacExtend",
            "7edf3f7644c946d6b67e15418a54b28122d23cbd"
        ],
        [
            "simple induction 1.",
            "VernacExtend",
            "b1f838dd75029717483785a8785c7867663c75bc"
        ],
        [
            "Save case_blift.",
            "VernacEndProof",
            "e8f8215303b93f515561c4c8fdb2007d367515ff"
        ],
        [
            "Goal forall (P : terms -> Prop) (n : nat), P (meta_X n) -> forall M : terms, e_beta_par _ (meta_X n) M -> P M.",
            "VernacDefinition",
            "d933d8f2b2e7b06c1068ddc8894363fa034ec3f3"
        ],
        [
            "intros P n H M H0; cut (e_betapar_inv _ (meta_X n) M).",
            "VernacExtend",
            "31186818bfec9c8a6197db21cd75198021b49edd"
        ],
        [
            "2: auto.",
            "VernacExtend",
            "39c1ddb0360c4672841c6c9a8ce0db8d5b584563"
        ],
        [
            "pattern M in |- *; apply terms_ind.",
            "VernacExtend",
            "e46f87093c095139900b6443f30f4288c038b440"
        ],
        [
            "simple induction 1.",
            "VernacExtend",
            "b1f838dd75029717483785a8785c7867663c75bc"
        ],
        [
            "simple induction 3.",
            "VernacExtend",
            "557e6c9122d883e86bf1370310067f1e7196019c"
        ],
        [
            "simple induction 2.",
            "VernacExtend",
            "6f1257380e20b5e439ffc2b050497a21a71a826c"
        ],
        [
            "simple induction 2.",
            "VernacExtend",
            "6f1257380e20b5e439ffc2b050497a21a71a826c"
        ],
        [
            "simple induction 1; assumption.",
            "VernacExtend",
            "88f164baf3ecfa0e98efe8230374d1c72e5e0000"
        ],
        [
            "Save case_bmetaX.",
            "VernacEndProof",
            "06d14a23bca2c1cc838cf82622c0c9b6e158c5dd"
        ],
        [
            "Goal forall (P : sub_explicits -> Prop) (n : nat), P (meta_x n) -> forall M : sub_explicits, e_beta_par _ (meta_x n) M -> P M.",
            "VernacDefinition",
            "570e03470ba54f180937ce8f60dd7c3aa8859a52"
        ],
        [
            "intros P n H M H0; cut (e_betapar_inv _ (meta_x n) M).",
            "VernacExtend",
            "b534a04f90e58c18579332b2adbd3a4b4c0d28a4"
        ],
        [
            "2: auto.",
            "VernacExtend",
            "39c1ddb0360c4672841c6c9a8ce0db8d5b584563"
        ],
        [
            "pattern M in |- *; apply sub_explicits_ind.",
            "VernacExtend",
            "2bb72eb631243de6b1d000da720c8f2f10c53e82"
        ],
        [
            "simple induction 1.",
            "VernacExtend",
            "b1f838dd75029717483785a8785c7867663c75bc"
        ],
        [
            "simple induction 1.",
            "VernacExtend",
            "b1f838dd75029717483785a8785c7867663c75bc"
        ],
        [
            "simple induction 2.",
            "VernacExtend",
            "6f1257380e20b5e439ffc2b050497a21a71a826c"
        ],
        [
            "simple induction 3.",
            "VernacExtend",
            "557e6c9122d883e86bf1370310067f1e7196019c"
        ],
        [
            "simple induction 2.",
            "VernacExtend",
            "6f1257380e20b5e439ffc2b050497a21a71a826c"
        ],
        [
            "simple induction 1; assumption.",
            "VernacExtend",
            "88f164baf3ecfa0e98efe8230374d1c72e5e0000"
        ],
        [
            "Save case_bmetax.",
            "VernacEndProof",
            "6f8ee3fa7ca19995ebb0152edb2afc53ba7ae010"
        ]
    ],
    "proofs": [
        {
            "name": "refl_betapar",
            "line_nb": 5,
            "steps": [
                {
                    "command": [
                        "simple induction M; auto.",
                        "VernacExtend",
                        "b94a297a51653c54326558718a390fc5ede6e3a9"
                    ]
                },
                {
                    "command": [
                        "Save refl_betapar.",
                        "VernacEndProof",
                        "5b7d1cd3f2d23be39d45660dbf166d848d1f731d"
                    ]
                }
            ]
        },
        {
            "name": "lemma1_inv_betapar",
            "line_nb": 11,
            "steps": [
                {
                    "command": [
                        "simple induction 1; intros; simpl in |- *; auto.",
                        "VernacExtend",
                        "6a1e21f49fb615ef138736df76d82cb495a025b5"
                    ]
                },
                {
                    "command": [
                        "exists M0; exists N'; auto.",
                        "VernacExtend",
                        "635398dfaad4b56fb49b28732929927d71e5dc7d"
                    ]
                },
                {
                    "command": [
                        "Save lemma1_inv_betapar.",
                        "VernacEndProof",
                        "fbdc570c52cd9991e2f218dfe92516150e0361dc"
                    ]
                }
            ]
        }
    ]
}