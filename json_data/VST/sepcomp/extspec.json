{
    "filename": "sepcomp/extspec.v",
    "coq_project": "VST",
    "vernac_cmds": [
        [
            "Require Import Coq.Lists.ListSet.",
            "VernacRequire",
            "59976481f2047fafb2a4076dc2716df194135537"
        ],
        [
            "Require Import compcert.common.AST.",
            "VernacRequire",
            "736cc8fb6e99f68efba7c58bdf7b2370507d5002"
        ],
        [
            "Require Import compcert.common.Values.",
            "VernacRequire",
            "775d93857ac31b6b7ea7c564f3005cd032b058e4"
        ],
        [
            "Require Import compcert.common.Memory.",
            "VernacRequire",
            "1bcc8a48806b43e63931d2d9d9db00d32c04ecd3"
        ],
        [
            "Require Import compcert.common.Globalenvs.",
            "VernacRequire",
            "19e3823b22beaaafca00973760a7b196c05f250f"
        ],
        [
            "Require Import compcert.lib.Maps.",
            "VernacRequire",
            "26c63953d85f7ad9c2666fdc8a1e61132cc296ac"
        ],
        [
            "Definition PTree_injective {A} (t: PTree.t A) : Prop := forall id1 id2 b, t ! id1 = Some b -> t ! id2 = Some b -> id1 = id2.",
            "VernacDefinition",
            "8373f8181d9601390d32d4e64f4b8de6abdafd30"
        ],
        [
            "Definition injective_PTree A := sig (@PTree_injective A).",
            "VernacDefinition",
            "a990f43531ebf526f331ad2c9a34f5a1850ac752"
        ],
        [
            "Structure external_specification (M E Z : Type) := { ext_spec_type : E -> Type ; ext_spec_pre: forall e: E, ext_spec_type e -> injective_PTree block -> list typ -> list val -> Z -> M -> Prop ; ext_spec_post: forall e: E, ext_spec_type e -> injective_PTree block -> option typ -> option val -> Z -> M -> Prop ; ext_spec_exit: option val -> Z -> M -> Prop }.",
            "VernacInductive",
            "44377ebbe051991a7ac31c5611fc87ea6e45a769"
        ],
        [
            "Arguments ext_spec_type {M E Z} _ _.",
            "VernacArguments",
            "46de9cec70ddec7346c200a1d93f551304d7e1cd"
        ],
        [
            "Arguments ext_spec_pre {M E Z} _ _ _ _ _ _ _ _.",
            "VernacArguments",
            "92a7e1924abb08f7d13e86d8aadc096a069fbfb1"
        ],
        [
            "Arguments ext_spec_post {M E Z} _ _ _ _ _ _ _ _.",
            "VernacArguments",
            "f00e7202e23854c4655d5b3c096477392cb5950a"
        ],
        [
            "Arguments ext_spec_exit {M E Z} _ _ _ _.",
            "VernacArguments",
            "d7abd2106f6d765ee22187c62bc551ba7de9997b"
        ],
        [
            "Definition ext_spec := external_specification mem external_function.",
            "VernacDefinition",
            "a6cd9e39f768efd1d64876e19eaa0961f8e3a6cc"
        ],
        [
            "Lemma extfunct_eqdec (ef1 ef2 : external_function) : {ef1=ef2} + {~ef1=ef2}.",
            "VernacStartTheoremProof",
            "3d67cf3143a6b4192b3ac1e993cea547db2ed009"
        ],
        [
            "repeat decide equality; try apply Integers.Int.eq_dec.",
            "VernacExtend",
            "4d629eb2595b58f6bdbbfe6130f0174ca2123d20"
        ],
        [
            "Defined.",
            "VernacEndProof",
            "88c0be54a50df4bb90276c075406fe442428eb9c"
        ],
        [
            "Set Implicit Arguments.",
            "VernacSetOption",
            "9e84ff8896f028601d8aded48c1d4aebe60aa584"
        ],
        [
            "Definition ef_ext_spec (M Z : Type) := external_specification M AST.external_function Z.",
            "VernacDefinition",
            "7fd18e161100541fcb19e7677d18b51dbffddb80"
        ],
        [
            "Definition spec_of (M Z : Type) (ef : AST.external_function) (spec : ef_ext_spec M Z) := (ext_spec_pre spec ef, ext_spec_post spec ef).",
            "VernacDefinition",
            "e8e1b97b6856b8188267285aaaa2aea0ff919a58"
        ],
        [
            "Definition oval_inject j (v tv : option val) := match v, tv with | None, None => True | Some v', Some tv' => Val.inject j v' tv' | _, _ => False end.",
            "VernacDefinition",
            "86af106e84dd4bdc180422d09c0c7170a1b7e685"
        ],
        [
            "Module ExtSpecProperties.",
            "VernacDefineModule",
            "a7c43a4f087fe784473aed5c10bcdef8c7f36ca3"
        ],
        [
            "Definition det (M E Z : Type) (spec : external_specification M E Z) := forall ef (x x' : ext_spec_type spec ef) ge tys z vals m oty' ov' z' m' oty'' ov'' z'' m'', ext_spec_pre spec ef x ge tys vals z m -> ext_spec_post spec ef x ge oty' ov' z' m' -> ext_spec_pre spec ef x' ge tys vals z m -> ext_spec_post spec ef x' ge oty'' ov'' z'' m'' -> oty'=oty'' /\\ ov'=ov'' /\\ z'=z'' /\\ m'=m''.",
            "VernacDefinition",
            "ce797a66ca3ebda770c80ef521a16cc1a455daa5"
        ],
        [
            "Record closed (Z : Type) (spec : ext_spec Z) := { P_closed : forall ef (x : ext_spec_type spec ef) ge j tys vals z m tvals tm, ext_spec_pre spec ef x ge tys vals z m -> Val.inject_list j vals tvals -> Mem.inject j m tm -> ext_spec_pre spec ef x ge tys tvals z tm ; Q_closed : forall ef (x : ext_spec_type spec ef) ge j oty ov z m otv tm, ext_spec_post spec ef x ge oty ov z m -> oval_inject j ov otv -> Mem.inject j m tm -> ext_spec_post spec ef x ge oty otv z tm ; exit_closed : forall j ov z m otv tm, ext_spec_exit spec ov z m -> oval_inject j ov otv -> Mem.inject j m tm -> ext_spec_exit spec otv z tm }.",
            "VernacInductive",
            "ad138768ce186e632cea17ed59b1cd4d35907d85"
        ],
        [
            "End ExtSpecProperties.",
            "VernacEndSegment",
            "d980a65516a3bdcd9581283d717c262ad494db54"
        ]
    ],
    "proofs": [
        {
            "name": "extfunct_eqdec",
            "line_nb": 14,
            "steps": [
                {
                    "command": [
                        "repeat decide equality; try apply Integers.Int.eq_dec.",
                        "VernacExtend",
                        "4d629eb2595b58f6bdbbfe6130f0174ca2123d20"
                    ]
                },
                {
                    "command": [
                        "Defined.",
                        "VernacEndProof",
                        "88c0be54a50df4bb90276c075406fe442428eb9c"
                    ]
                }
            ]
        }
    ]
}