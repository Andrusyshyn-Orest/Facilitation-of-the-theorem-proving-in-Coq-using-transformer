{
    "filename": "compcert/flocq/Calc/Fcalc_round.v",
    "coq_project": "VST",
    "vernac_cmds": [
        [
            "Require Import Fcore.",
            "VernacRequire",
            "0726413a0cd1e00c4c23af78515a8bb580c73ed5"
        ],
        [
            "Require Import Fcore_digits.",
            "VernacRequire",
            "88b786a7297c6d41db609842668795560290d722"
        ],
        [
            "Require Import Fcalc_bracket.",
            "VernacRequire",
            "f52ed1ddf769329f4ac4906755d738d2cc697d47"
        ],
        [
            "Require Import Fcalc_digits.",
            "VernacRequire",
            "a66e84f2c3d2b977b9a7db893ee83741416125a1"
        ],
        [
            "Section Fcalc_round.",
            "VernacBeginSection",
            "f37840f395e8f32f5b28c60752362dfb10275146"
        ],
        [
            "Variable beta : radix.",
            "VernacAssumption",
            "5414570a6751198892ee4a13f107deb4c633e62b"
        ],
        [
            "Notation bpow e := (bpow beta e).",
            "VernacSyntacticDefinition",
            "c796e278ffd17ea9674b52f8e94413782272a594"
        ],
        [
            "Section Fcalc_round_fexp.",
            "VernacBeginSection",
            "1bfa6c46aa4169b0206eeb0bc645bfbac5559048"
        ],
        [
            "Variable fexp : Z -> Z.",
            "VernacAssumption",
            "c9cf8938d8929b51922f4ec187aafa959003e732"
        ],
        [
            "Context { valid_exp : Valid_exp fexp }.",
            "VernacContext",
            "ee7e72f13eb494c423b2621bcb97f515165b66dc"
        ],
        [
            "Notation format := (generic_format beta fexp).",
            "VernacSyntacticDefinition",
            "8b86a2eae51a580a8d20d872218c8ad0ed495025"
        ],
        [
            "Theorem inbetween_float_round : forall rnd choice, ( forall x m l, inbetween_int m x l -> rnd x = choice m l ) -> forall x m l, let e := canonic_exp beta fexp x in inbetween_float beta m e x l -> round beta fexp rnd x = F2R (Float beta (choice m l) e).",
            "VernacStartTheoremProof",
            "f542cca61db56d281185452c818dff3fcdca6a58"
        ],
        [
            "intros rnd choice Hc x m l e Hl.",
            "VernacExtend",
            "4b21e99cf8d405ed76f3979d2fd70b8683c84754"
        ],
        [
            "unfold round, F2R.",
            "VernacExtend",
            "f7df1e666cb069edfb380cdf26ce3a214adbfa27"
        ],
        [
            "simpl.",
            "VernacExtend",
            "1b93169f4cf876d207c1fab22a2347202ab48d85"
        ],
        [
            "apply (f_equal (fun m => (Z2R m * bpow e)%R)).",
            "VernacExtend",
            "6c06884cf0ce2f5c947ae823afca86529ad322d0"
        ],
        [
            "apply Hc.",
            "VernacExtend",
            "b900f3304ba75d1bc8becba9c3e19edfabbb7700"
        ],
        [
            "apply inbetween_mult_reg with (bpow e).",
            "VernacExtend",
            "16da3d7c7a12b50867bd217980f49bbb9ae3aa2d"
        ],
        [
            "apply bpow_gt_0.",
            "VernacExtend",
            "51431cbce9a44d56b4b1857315ff3c6ca3c98e7f"
        ],
        [
            "now rewrite scaled_mantissa_mult_bpow.",
            "VernacExtend",
            "fab99b6471eeaf42de834b44e57b617fc8d6582a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Definition cond_incr (b : bool) m := if b then (m + 1)%Z else m.",
            "VernacDefinition",
            "1a599dce4f872d20223249d4245579ee8ec50cef"
        ],
        [
            "Theorem inbetween_float_round_sign : forall rnd choice, ( forall x m l, inbetween_int m (Rabs x) l -> rnd x = cond_Zopp (Rlt_bool x 0) (choice (Rlt_bool x 0) m l) ) -> forall x m l, let e := canonic_exp beta fexp x in inbetween_float beta m e (Rabs x) l -> round beta fexp rnd x = F2R (Float beta (cond_Zopp (Rlt_bool x 0) (choice (Rlt_bool x 0) m l)) e).",
            "VernacStartTheoremProof",
            "3c455d9d205c64b618a6827bd870940c9aa5c317"
        ],
        [
            "intros rnd choice Hc x m l e Hx.",
            "VernacExtend",
            "602ac6e3f916e434c32e8d2d98396b0ade953f9f"
        ],
        [
            "apply (f_equal (fun m => (Z2R m * bpow e)%R)).",
            "VernacExtend",
            "6c06884cf0ce2f5c947ae823afca86529ad322d0"
        ],
        [
            "simpl.",
            "VernacExtend",
            "1b93169f4cf876d207c1fab22a2347202ab48d85"
        ],
        [
            "replace (Rlt_bool x 0) with (Rlt_bool (scaled_mantissa beta fexp x) 0).",
            "VernacExtend",
            "398bb38b73cd7b65e1ff2d929000b1d1313e8c5a"
        ],
        [
            "apply Hc.",
            "VernacExtend",
            "b900f3304ba75d1bc8becba9c3e19edfabbb7700"
        ],
        [
            "apply inbetween_mult_reg with (bpow e).",
            "VernacExtend",
            "16da3d7c7a12b50867bd217980f49bbb9ae3aa2d"
        ],
        [
            "apply bpow_gt_0.",
            "VernacExtend",
            "51431cbce9a44d56b4b1857315ff3c6ca3c98e7f"
        ],
        [
            "rewrite <- (Rabs_right (bpow e)) at 3.",
            "VernacExtend",
            "203fa2690e0caa939ff44ea254794ba70db4962c"
        ],
        [
            "rewrite <- Rabs_mult.",
            "VernacExtend",
            "ffb7829eab0f0e304148d87efd020e97968f73cc"
        ],
        [
            "now rewrite scaled_mantissa_mult_bpow.",
            "VernacExtend",
            "fab99b6471eeaf42de834b44e57b617fc8d6582a"
        ],
        [
            "apply Rle_ge.",
            "VernacExtend",
            "a688ebddf90443508c57e22ba16f7fa0da42ef9a"
        ],
        [
            "apply bpow_ge_0.",
            "VernacExtend",
            "21ebde0be0a631dfd60f8ca27e963cec55b52605"
        ],
        [
            "destruct (Rlt_bool_spec x 0) as [Zx|Zx] ; simpl.",
            "VernacExtend",
            "896fdd1698f7280edbb4865f9ab125d4cd44a1a7"
        ],
        [
            "apply Rlt_bool_true.",
            "VernacExtend",
            "2dd8acd5318209d40288e95b2cc6a1cd92d8d107"
        ],
        [
            "rewrite <- (Rmult_0_l (bpow (-e))).",
            "VernacExtend",
            "1b2c307738549f64cb09091dd7bf8a09b681016c"
        ],
        [
            "apply Rmult_lt_compat_r with (2 := Zx).",
            "VernacExtend",
            "30129d7b1d8d6879bfab44dd3e91cc939f45ddae"
        ],
        [
            "apply bpow_gt_0.",
            "VernacExtend",
            "51431cbce9a44d56b4b1857315ff3c6ca3c98e7f"
        ],
        [
            "apply Rlt_bool_false.",
            "VernacExtend",
            "115f3bf88cb7153f51757af6b09533b60d89f56b"
        ],
        [
            "apply Rmult_le_pos with (1 := Zx).",
            "VernacExtend",
            "cc39bffb6efed3b8f994b90322ab25f796dc3f6a"
        ],
        [
            "apply bpow_ge_0.",
            "VernacExtend",
            "21ebde0be0a631dfd60f8ca27e963cec55b52605"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Theorem inbetween_int_DN : forall x m l, inbetween_int m x l -> Zfloor x = m.",
            "VernacStartTheoremProof",
            "cd7edc8a1f0bd82b406b8272da08bc0ed946a9f7"
        ],
        [
            "intros x m l Hl.",
            "VernacExtend",
            "acc9d2a80c4c7a3e60af564667e1347459334b45"
        ],
        [
            "refine (Zfloor_imp m _ _).",
            "VernacExtend",
            "3b876de430e6902ad46c3f0d09ad0fc04b79caa3"
        ],
        [
            "apply inbetween_bounds with (2 := Hl).",
            "VernacExtend",
            "82fc28882302a948feb0ec46f3e35bf7462efb1a"
        ],
        [
            "apply Z2R_lt.",
            "VernacExtend",
            "20648688afbdacefe3b6070755cbe6f263ce5093"
        ],
        [
            "apply Zlt_succ.",
            "VernacExtend",
            "f4cf5b932d8c774be510b7802fbeea627fe15261"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Theorem inbetween_float_DN : forall x m l, let e := canonic_exp beta fexp x in inbetween_float beta m e x l -> round beta fexp Zfloor x = F2R (Float beta m e).",
            "VernacStartTheoremProof",
            "69be6394eaf1d25bcc965b2a11decb62a4455484"
        ],
        [
            "apply inbetween_float_round with (choice := fun m l => m).",
            "VernacExtend",
            "91110cd591bb0bfcd929acea6b48aeb694efd8c0"
        ],
        [
            "exact inbetween_int_DN.",
            "VernacExtend",
            "41d1fc7da170ff5e1b2fcfead643e7a045ca7ff2"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Definition round_sign_DN s l := match l with | loc_Exact => false | _ => s end.",
            "VernacDefinition",
            "058a53e9d90c6742012ced17585b989b4d489bd9"
        ],
        [
            "Theorem inbetween_int_DN_sign : forall x m l, inbetween_int m (Rabs x) l -> Zfloor x = cond_Zopp (Rlt_bool x 0) (cond_incr (round_sign_DN (Rlt_bool x 0) l) m).",
            "VernacStartTheoremProof",
            "6000dc1837459a1b3bf130a8d751245af1416107"
        ],
        [
            "intros x m l Hl.",
            "VernacExtend",
            "acc9d2a80c4c7a3e60af564667e1347459334b45"
        ],
        [
            "unfold Rabs in Hl.",
            "VernacExtend",
            "a5e4e3c6e70bad993425f04d449c442b26d50959"
        ],
        [
            "destruct (Rcase_abs x) as [Zx|Zx] .",
            "VernacExtend",
            "5ee70dbdc1e53b3475698b5c6e31430998680730"
        ],
        [
            "rewrite Rlt_bool_true with (1 := Zx).",
            "VernacExtend",
            "c4e4559887746f632f9b9b95acae07de69dd848e"
        ],
        [
            "inversion_clear Hl ; simpl.",
            "VernacExtend",
            "63566390752ef9b7986f4b8ea68a54246e14d02d"
        ],
        [
            "rewrite <- (Ropp_involutive x).",
            "VernacExtend",
            "1908e4ee868b5f81dd7393a2a516c6e4756cc5e4"
        ],
        [
            "rewrite H, <- Z2R_opp.",
            "VernacExtend",
            "362c9abc359140f6949d9b15756339895d9bc0de"
        ],
        [
            "apply Zfloor_Z2R.",
            "VernacExtend",
            "58df2bc8985dad2ec76c534580062785230749a3"
        ],
        [
            "apply Zfloor_imp.",
            "VernacExtend",
            "9278ce7c32c530a2f8be72314e979fc619d4a028"
        ],
        [
            "split.",
            "VernacExtend",
            "55abc140132bd88981001ac656020469a8d503eb"
        ],
        [
            "apply Rlt_le.",
            "VernacExtend",
            "cdc4280500779f23bae235b94c24a4b2ea2921fe"
        ],
        [
            "rewrite Z2R_opp.",
            "VernacExtend",
            "f3d51769485a2c167744d3d3fd4fffa672e5e611"
        ],
        [
            "apply Ropp_lt_cancel.",
            "VernacExtend",
            "9b0daa4a36df0c9a309eebcfa294d3bffe6b52b2"
        ],
        [
            "now rewrite Ropp_involutive.",
            "VernacExtend",
            "42ddda074db05b6b1d1874b4fe3a510ba0168ea0"
        ],
        [
            "ring_simplify (- (m + 1) + 1)%Z.",
            "VernacExtend",
            "dc92fb3773c9c3f5bf15f233373c610c5ea4db0a"
        ],
        [
            "rewrite Z2R_opp.",
            "VernacExtend",
            "f3d51769485a2c167744d3d3fd4fffa672e5e611"
        ],
        [
            "apply Ropp_lt_cancel.",
            "VernacExtend",
            "9b0daa4a36df0c9a309eebcfa294d3bffe6b52b2"
        ],
        [
            "now rewrite Ropp_involutive.",
            "VernacExtend",
            "42ddda074db05b6b1d1874b4fe3a510ba0168ea0"
        ],
        [
            "rewrite Rlt_bool_false.",
            "VernacExtend",
            "4727213e40ddfbec66b0f056e1c646ac9eb48972"
        ],
        [
            "inversion_clear Hl ; simpl.",
            "VernacExtend",
            "63566390752ef9b7986f4b8ea68a54246e14d02d"
        ],
        [
            "rewrite H.",
            "VernacExtend",
            "6192df8b89486a3ba89a78e26e0d70cae2dc94c2"
        ],
        [
            "apply Zfloor_Z2R.",
            "VernacExtend",
            "58df2bc8985dad2ec76c534580062785230749a3"
        ],
        [
            "apply Zfloor_imp.",
            "VernacExtend",
            "9278ce7c32c530a2f8be72314e979fc619d4a028"
        ],
        [
            "split.",
            "VernacExtend",
            "55abc140132bd88981001ac656020469a8d503eb"
        ],
        [
            "now apply Rlt_le.",
            "VernacExtend",
            "3fa67bbd472123a7abc1f777aecc643fb3862e46"
        ],
        [
            "apply H.",
            "VernacExtend",
            "4b47b71ad0f800d57cbdc591d68949e07decb540"
        ],
        [
            "now apply Rge_le.",
            "VernacExtend",
            "a9d375e1f97c153d1fcc15fabbf40ef83aa1533a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Theorem inbetween_float_DN_sign : forall x m l, let e := canonic_exp beta fexp x in inbetween_float beta m e (Rabs x) l -> round beta fexp Zfloor x = F2R (Float beta (cond_Zopp (Rlt_bool x 0) (cond_incr (round_sign_DN (Rlt_bool x 0) l) m)) e).",
            "VernacStartTheoremProof",
            "b57985ec167a091e46e5418ffba4aeaf3950606f"
        ],
        [
            "apply inbetween_float_round_sign with (choice := fun s m l => cond_incr (round_sign_DN s l) m).",
            "VernacExtend",
            "2e2ad40f0c29a96aa7e3f519b6020680854480aa"
        ],
        [
            "exact inbetween_int_DN_sign.",
            "VernacExtend",
            "2ca5d31426e90ded6bfe15f3c4912c6b18401fc3"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Definition round_UP l := match l with | loc_Exact => false | _ => true end.",
            "VernacDefinition",
            "857b278330368e1ccc837807e7514eee7724e04a"
        ],
        [
            "Theorem inbetween_int_UP : forall x m l, inbetween_int m x l -> Zceil x = cond_incr (round_UP l) m.",
            "VernacStartTheoremProof",
            "5831eccda4ff0900825da1a38d33af686a61a1df"
        ],
        [
            "intros x m l Hl.",
            "VernacExtend",
            "acc9d2a80c4c7a3e60af564667e1347459334b45"
        ],
        [
            "assert (Hl': l = loc_Exact \\/ (l <> loc_Exact /\\ round_UP l = true)).",
            "VernacExtend",
            "3f8da4b6cc8102caec41de9591af4cee5611ba76"
        ],
        [
            "case l ; try (now left) ; now right ; split.",
            "VernacExtend",
            "eabc2af66479725584a6716b5d8e6aa60f1c91c2"
        ],
        [
            "destruct Hl' as [Hl'|(Hl1, Hl2)].",
            "VernacExtend",
            "654f2870c70e30174410f436379dbdba26651d5d"
        ],
        [
            "rewrite Hl'.",
            "VernacExtend",
            "b5bce282838e922883979e6e66c0f0c98ebfd5c3"
        ],
        [
            "destruct Hl ; try easy.",
            "VernacExtend",
            "7ae9de7ca90851ebddbd945d167702157ccc6354"
        ],
        [
            "rewrite H.",
            "VernacExtend",
            "6192df8b89486a3ba89a78e26e0d70cae2dc94c2"
        ],
        [
            "exact (Zceil_Z2R _).",
            "VernacExtend",
            "5bf112d38fc03325999ea5f0134b5afe7062ce64"
        ],
        [
            "rewrite Hl2.",
            "VernacExtend",
            "0d96d2041101f35d95f18d72a2a3450630d59d8a"
        ],
        [
            "simpl.",
            "VernacExtend",
            "1b93169f4cf876d207c1fab22a2347202ab48d85"
        ],
        [
            "apply Zceil_imp.",
            "VernacExtend",
            "c9c91122777c8963f3fcab430c53aa15ef0b2dba"
        ],
        [
            "ring_simplify (m + 1 - 1)%Z.",
            "VernacExtend",
            "47444d71b31222daedf2990c9d072665f0f0163a"
        ],
        [
            "refine (let H := _ in conj (proj1 H) (Rlt_le _ _ (proj2 H))).",
            "VernacExtend",
            "d531ed838df6c170cbec0087a62398ced5d12ec7"
        ],
        [
            "apply inbetween_bounds_not_Eq with (2 := Hl1) (1 := Hl).",
            "VernacExtend",
            "0de1151d9bfc351aff70719dd97cc7477465e86c"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Theorem inbetween_float_UP : forall x m l, let e := canonic_exp beta fexp x in inbetween_float beta m e x l -> round beta fexp Zceil x = F2R (Float beta (cond_incr (round_UP l) m) e).",
            "VernacStartTheoremProof",
            "7c64169be3bdcb5ae1471a29b0b4d3a506924614"
        ],
        [
            "apply inbetween_float_round with (choice := fun m l => cond_incr (round_UP l) m).",
            "VernacExtend",
            "e65552deb4f5d297bef8f11bb689e5e23bbfc030"
        ],
        [
            "exact inbetween_int_UP.",
            "VernacExtend",
            "6a68375ee1128aca22e986cbb3ff67da1fe260b8"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Definition round_sign_UP s l := match l with | loc_Exact => false | _ => negb s end.",
            "VernacDefinition",
            "fb6ae614f669458db1c9c885a91f4d102411ede7"
        ],
        [
            "Theorem inbetween_int_UP_sign : forall x m l, inbetween_int m (Rabs x) l -> Zceil x = cond_Zopp (Rlt_bool x 0) (cond_incr (round_sign_UP (Rlt_bool x 0) l) m).",
            "VernacStartTheoremProof",
            "5eee4808b7d45107fb24165062324db1d576d0f0"
        ],
        [
            "intros x m l Hl.",
            "VernacExtend",
            "acc9d2a80c4c7a3e60af564667e1347459334b45"
        ],
        [
            "unfold Rabs in Hl.",
            "VernacExtend",
            "a5e4e3c6e70bad993425f04d449c442b26d50959"
        ],
        [
            "destruct (Rcase_abs x) as [Zx|Zx] .",
            "VernacExtend",
            "5ee70dbdc1e53b3475698b5c6e31430998680730"
        ],
        [
            "rewrite Rlt_bool_true with (1 := Zx).",
            "VernacExtend",
            "c4e4559887746f632f9b9b95acae07de69dd848e"
        ],
        [
            "simpl.",
            "VernacExtend",
            "1b93169f4cf876d207c1fab22a2347202ab48d85"
        ],
        [
            "unfold Zceil.",
            "VernacExtend",
            "f8d0a58a84f92c1de4ab8daa30b020e932099600"
        ],
        [
            "apply f_equal.",
            "VernacExtend",
            "ba856cbef3c8e84dcef77c91c8515b497874875b"
        ],
        [
            "inversion_clear Hl ; simpl.",
            "VernacExtend",
            "63566390752ef9b7986f4b8ea68a54246e14d02d"
        ],
        [
            "rewrite H.",
            "VernacExtend",
            "6192df8b89486a3ba89a78e26e0d70cae2dc94c2"
        ],
        [
            "apply Zfloor_Z2R.",
            "VernacExtend",
            "58df2bc8985dad2ec76c534580062785230749a3"
        ],
        [
            "apply Zfloor_imp.",
            "VernacExtend",
            "9278ce7c32c530a2f8be72314e979fc619d4a028"
        ],
        [
            "split.",
            "VernacExtend",
            "55abc140132bd88981001ac656020469a8d503eb"
        ],
        [
            "now apply Rlt_le.",
            "VernacExtend",
            "3fa67bbd472123a7abc1f777aecc643fb3862e46"
        ],
        [
            "apply H.",
            "VernacExtend",
            "4b47b71ad0f800d57cbdc591d68949e07decb540"
        ],
        [
            "rewrite Rlt_bool_false.",
            "VernacExtend",
            "4727213e40ddfbec66b0f056e1c646ac9eb48972"
        ],
        [
            "simpl.",
            "VernacExtend",
            "1b93169f4cf876d207c1fab22a2347202ab48d85"
        ],
        [
            "inversion_clear Hl ; simpl.",
            "VernacExtend",
            "63566390752ef9b7986f4b8ea68a54246e14d02d"
        ],
        [
            "rewrite H.",
            "VernacExtend",
            "6192df8b89486a3ba89a78e26e0d70cae2dc94c2"
        ],
        [
            "apply Zceil_Z2R.",
            "VernacExtend",
            "c8141d4497dc8abfa72f7f0897c24c389f131f72"
        ],
        [
            "apply Zceil_imp.",
            "VernacExtend",
            "c9c91122777c8963f3fcab430c53aa15ef0b2dba"
        ],
        [
            "split.",
            "VernacExtend",
            "55abc140132bd88981001ac656020469a8d503eb"
        ],
        [
            "change (m + 1 - 1)%Z with (Zpred (Zsucc m)).",
            "VernacExtend",
            "edc289110dd66569a26e18cee07ca6e7d6ff0add"
        ],
        [
            "now rewrite <- Zpred_succ.",
            "VernacExtend",
            "8900533feefe93c2bf38da3e526c06f6edc5255a"
        ],
        [
            "now apply Rlt_le.",
            "VernacExtend",
            "3fa67bbd472123a7abc1f777aecc643fb3862e46"
        ],
        [
            "now apply Rge_le.",
            "VernacExtend",
            "a9d375e1f97c153d1fcc15fabbf40ef83aa1533a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Theorem inbetween_float_UP_sign : forall x m l, let e := canonic_exp beta fexp x in inbetween_float beta m e (Rabs x) l -> round beta fexp Zceil x = F2R (Float beta (cond_Zopp (Rlt_bool x 0) (cond_incr (round_sign_UP (Rlt_bool x 0) l) m)) e).",
            "VernacStartTheoremProof",
            "dd89b4eecb6277d5bd84e3b45d557e447a6503a7"
        ],
        [
            "apply inbetween_float_round_sign with (choice := fun s m l => cond_incr (round_sign_UP s l) m).",
            "VernacExtend",
            "aa1ca4c3f9ca9a909c69409d85cddaae9e39a2b9"
        ],
        [
            "exact inbetween_int_UP_sign.",
            "VernacExtend",
            "a460c5b2dddd11dc95931d350552f9a81d94bb40"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Definition round_ZR (s : bool) l := match l with | loc_Exact => false | _ => s end.",
            "VernacDefinition",
            "901a35eed5b3796c402f7a8d5287cdbbb7068f2c"
        ],
        [
            "Theorem inbetween_int_ZR : forall x m l, inbetween_int m x l -> Ztrunc x = cond_incr (round_ZR (Zlt_bool m 0) l) m.",
            "VernacStartTheoremProof",
            "2dcb9872262ed841101cf9c5b2ee8f597a2d8fd3"
        ],
        [
            "Proof with auto with typeclass_instances.",
            "VernacProof",
            "c16343efcd37779057959eb30e1ff5afec0a83eb"
        ],
        [
            "intros x m l Hl.",
            "VernacExtend",
            "acc9d2a80c4c7a3e60af564667e1347459334b45"
        ],
        [
            "inversion_clear Hl as [Hx|l' Hx Hl'].",
            "VernacExtend",
            "937242798b8fa9f45ff22684666c8578d5a6e596"
        ],
        [
            "rewrite Hx.",
            "VernacExtend",
            "086fbf2e7628a02e1fc1ade44d17fcceedd5ab1d"
        ],
        [
            "rewrite Zrnd_Z2R...",
            "VernacExtend",
            "d84a1628ed60811688a4119eaa10a7f1e4ebf847"
        ],
        [
            "unfold Ztrunc.",
            "VernacExtend",
            "70f2f727e6735746b4eaaea98f3e25177304bf89"
        ],
        [
            "assert (Hm: Zfloor x = m).",
            "VernacExtend",
            "cae4be744f1fbef0fd4649c2145c085dede9c408"
        ],
        [
            "apply Zfloor_imp.",
            "VernacExtend",
            "9278ce7c32c530a2f8be72314e979fc619d4a028"
        ],
        [
            "exact (conj (Rlt_le _ _ (proj1 Hx)) (proj2 Hx)).",
            "VernacExtend",
            "c1a34b6248ad66bb717e64a486d4fbcf1d17c758"
        ],
        [
            "rewrite Zceil_floor_neq.",
            "VernacExtend",
            "b4fc727910b2a0e4293920fe2596a742e2d62876"
        ],
        [
            "rewrite Hm.",
            "VernacExtend",
            "a83613f2496ce8bb382bfee229040b06b8d1ef3c"
        ],
        [
            "unfold cond_incr.",
            "VernacExtend",
            "9524001e1f05f12b2fdbbe6de4ddf500a51081c2"
        ],
        [
            "simpl.",
            "VernacExtend",
            "1b93169f4cf876d207c1fab22a2347202ab48d85"
        ],
        [
            "case Rlt_bool_spec ; intros Hx' ; case Zlt_bool_spec ; intros Hm' ; try apply refl_equal.",
            "VernacExtend",
            "c91771dca778f6a366776ff9af3c68069e551af5"
        ],
        [
            "elim Rlt_not_le with (1 := Hx').",
            "VernacExtend",
            "4377157c8cc41c96db51c8e769dff8db89a63f68"
        ],
        [
            "apply Rlt_le.",
            "VernacExtend",
            "cdc4280500779f23bae235b94c24a4b2ea2921fe"
        ],
        [
            "apply Rle_lt_trans with (2 := proj1 Hx).",
            "VernacExtend",
            "d80120e8022753d2b32dffabe8710b2e96c2a457"
        ],
        [
            "now apply (Z2R_le 0).",
            "VernacExtend",
            "aa28bcaea924c1a180939691f95280ec6dbe9001"
        ],
        [
            "elim Rle_not_lt with (1 := Hx').",
            "VernacExtend",
            "c95b71ca1578274df9a032b2f85ba9e7103e3e40"
        ],
        [
            "apply Rlt_le_trans with (1 := proj2 Hx).",
            "VernacExtend",
            "e7ca6c9a098514e50bc26584178aaf1bac3efdda"
        ],
        [
            "apply (Z2R_le _ 0).",
            "VernacExtend",
            "7f42c31e2e31af7de8d69cdccae1864a5d4cf9d9"
        ],
        [
            "now apply Zlt_le_succ.",
            "VernacExtend",
            "0ddb068a7da0e5ecd8002018d5306507f8b07087"
        ],
        [
            "rewrite Hm.",
            "VernacExtend",
            "a83613f2496ce8bb382bfee229040b06b8d1ef3c"
        ],
        [
            "now apply Rlt_not_eq.",
            "VernacExtend",
            "7c469637fc05542bf9c3c4fab85774b12e6b8f93"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Theorem inbetween_float_ZR : forall x m l, let e := canonic_exp beta fexp x in inbetween_float beta m e x l -> round beta fexp Ztrunc x = F2R (Float beta (cond_incr (round_ZR (Zlt_bool m 0) l) m) e).",
            "VernacStartTheoremProof",
            "21f49f540ca1397db4d04f54b0dc7e6363c8ab27"
        ],
        [
            "apply inbetween_float_round with (choice := fun m l => cond_incr (round_ZR (Zlt_bool m 0) l) m).",
            "VernacExtend",
            "8f552ad584316e213b22ceff5b8e89b549e22d36"
        ],
        [
            "exact inbetween_int_ZR.",
            "VernacExtend",
            "825086ef28710e56957f5705eb73392461d2ab85"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Theorem inbetween_int_ZR_sign : forall x m l, inbetween_int m (Rabs x) l -> Ztrunc x = cond_Zopp (Rlt_bool x 0) m.",
            "VernacStartTheoremProof",
            "64222a06823c323f6fd3ab280046cbd81d33c067"
        ],
        [
            "intros x m l Hl.",
            "VernacExtend",
            "acc9d2a80c4c7a3e60af564667e1347459334b45"
        ],
        [
            "simpl.",
            "VernacExtend",
            "1b93169f4cf876d207c1fab22a2347202ab48d85"
        ],
        [
            "unfold Ztrunc.",
            "VernacExtend",
            "70f2f727e6735746b4eaaea98f3e25177304bf89"
        ],
        [
            "destruct (Rlt_le_dec x 0) as [Zx|Zx].",
            "VernacExtend",
            "0e19443197c1374589dda6f989e264314932fde1"
        ],
        [
            "rewrite Rlt_bool_true with (1 := Zx).",
            "VernacExtend",
            "c4e4559887746f632f9b9b95acae07de69dd848e"
        ],
        [
            "simpl.",
            "VernacExtend",
            "1b93169f4cf876d207c1fab22a2347202ab48d85"
        ],
        [
            "unfold Zceil.",
            "VernacExtend",
            "f8d0a58a84f92c1de4ab8daa30b020e932099600"
        ],
        [
            "apply f_equal.",
            "VernacExtend",
            "ba856cbef3c8e84dcef77c91c8515b497874875b"
        ],
        [
            "apply Zfloor_imp.",
            "VernacExtend",
            "9278ce7c32c530a2f8be72314e979fc619d4a028"
        ],
        [
            "rewrite <- Rabs_left with (1 := Zx).",
            "VernacExtend",
            "8f3d35c91b38285e1e5f6080f5d38db8c4f25143"
        ],
        [
            "apply inbetween_bounds with (2 := Hl).",
            "VernacExtend",
            "82fc28882302a948feb0ec46f3e35bf7462efb1a"
        ],
        [
            "apply Z2R_lt.",
            "VernacExtend",
            "20648688afbdacefe3b6070755cbe6f263ce5093"
        ],
        [
            "apply Zlt_succ.",
            "VernacExtend",
            "f4cf5b932d8c774be510b7802fbeea627fe15261"
        ],
        [
            "rewrite Rlt_bool_false with (1 := Zx).",
            "VernacExtend",
            "41847988514aefac8262779ccf05127358148ad7"
        ],
        [
            "simpl.",
            "VernacExtend",
            "1b93169f4cf876d207c1fab22a2347202ab48d85"
        ],
        [
            "apply Zfloor_imp.",
            "VernacExtend",
            "9278ce7c32c530a2f8be72314e979fc619d4a028"
        ],
        [
            "rewrite <- Rabs_pos_eq with (1 := Zx).",
            "VernacExtend",
            "907c360c70c10fe0d84a7cb596890f4202077a34"
        ],
        [
            "apply inbetween_bounds with (2 := Hl).",
            "VernacExtend",
            "82fc28882302a948feb0ec46f3e35bf7462efb1a"
        ],
        [
            "apply Z2R_lt.",
            "VernacExtend",
            "20648688afbdacefe3b6070755cbe6f263ce5093"
        ],
        [
            "apply Zlt_succ.",
            "VernacExtend",
            "f4cf5b932d8c774be510b7802fbeea627fe15261"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Theorem inbetween_float_ZR_sign : forall x m l, let e := canonic_exp beta fexp x in inbetween_float beta m e (Rabs x) l -> round beta fexp Ztrunc x = F2R (Float beta (cond_Zopp (Rlt_bool x 0) m) e).",
            "VernacStartTheoremProof",
            "b4603da3d0f8abda81e785ae032ffd37b7edec64"
        ],
        [
            "apply inbetween_float_round_sign with (choice := fun s m l => m).",
            "VernacExtend",
            "cc1c4990b10253f0a754b1f5893bcfb0b461d339"
        ],
        [
            "exact inbetween_int_ZR_sign.",
            "VernacExtend",
            "f5027bcf5f75a568aec57d38beb1d96d43ac8837"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Definition round_N (p : bool) l := match l with | loc_Exact => false | loc_Inexact Lt => false | loc_Inexact Eq => p | loc_Inexact Gt => true end.",
            "VernacDefinition",
            "550c69434d0351872761c0fc9f84d2cc103649e2"
        ],
        [
            "Theorem inbetween_int_N : forall choice x m l, inbetween_int m x l -> Znearest choice x = cond_incr (round_N (choice m) l) m.",
            "VernacStartTheoremProof",
            "fab8a121b3c0d034a3afd5f0f11d38ade97e0bd2"
        ],
        [
            "Proof with auto with typeclass_instances.",
            "VernacProof",
            "c16343efcd37779057959eb30e1ff5afec0a83eb"
        ],
        [
            "intros choice x m l Hl.",
            "VernacExtend",
            "ee5ee1971c7b596e0528e358d4b593ada1634b53"
        ],
        [
            "inversion_clear Hl as [Hx|l' Hx Hl'].",
            "VernacExtend",
            "937242798b8fa9f45ff22684666c8578d5a6e596"
        ],
        [
            "rewrite Hx.",
            "VernacExtend",
            "086fbf2e7628a02e1fc1ade44d17fcceedd5ab1d"
        ],
        [
            "rewrite Zrnd_Z2R...",
            "VernacExtend",
            "d84a1628ed60811688a4119eaa10a7f1e4ebf847"
        ],
        [
            "unfold Znearest.",
            "VernacExtend",
            "c6481393d02b9e0a0e8669a35ef29881ad118b89"
        ],
        [
            "assert (Hm: Zfloor x = m).",
            "VernacExtend",
            "cae4be744f1fbef0fd4649c2145c085dede9c408"
        ],
        [
            "apply Zfloor_imp.",
            "VernacExtend",
            "9278ce7c32c530a2f8be72314e979fc619d4a028"
        ],
        [
            "exact (conj (Rlt_le _ _ (proj1 Hx)) (proj2 Hx)).",
            "VernacExtend",
            "c1a34b6248ad66bb717e64a486d4fbcf1d17c758"
        ],
        [
            "rewrite Zceil_floor_neq.",
            "VernacExtend",
            "b4fc727910b2a0e4293920fe2596a742e2d62876"
        ],
        [
            "rewrite Hm.",
            "VernacExtend",
            "a83613f2496ce8bb382bfee229040b06b8d1ef3c"
        ],
        [
            "replace (Rcompare (x - Z2R m) (/2)) with l'.",
            "VernacExtend",
            "aa54d6f1cdc6cce78a27be2ce1c48b98fe2113b8"
        ],
        [
            "now case l'.",
            "VernacExtend",
            "e7ccec75b06d244647debccd410c25f8915c28fb"
        ],
        [
            "rewrite <- Hl'.",
            "VernacExtend",
            "7f72dffbfd5d813f3915ce8642a33e4f09996665"
        ],
        [
            "rewrite Z2R_plus.",
            "VernacExtend",
            "acce6601b0322c726f9b248c200708805f7120a8"
        ],
        [
            "rewrite <- (Rcompare_plus_r (- Z2R m) x).",
            "VernacExtend",
            "f0f37e9f35849ea5de4eddca38d6027a888e00c1"
        ],
        [
            "apply f_equal.",
            "VernacExtend",
            "ba856cbef3c8e84dcef77c91c8515b497874875b"
        ],
        [
            "simpl (Z2R 1).",
            "VernacExtend",
            "da699c01ce6a5052fe3a71699803952eb5b5542a"
        ],
        [
            "field.",
            "VernacExtend",
            "93f44750d651d466b74a0cc63f88acb56273d533"
        ],
        [
            "rewrite Hm.",
            "VernacExtend",
            "a83613f2496ce8bb382bfee229040b06b8d1ef3c"
        ],
        [
            "now apply Rlt_not_eq.",
            "VernacExtend",
            "7c469637fc05542bf9c3c4fab85774b12e6b8f93"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Theorem inbetween_int_N_sign : forall choice x m l, inbetween_int m (Rabs x) l -> Znearest choice x = cond_Zopp (Rlt_bool x 0) (cond_incr (round_N (if Rlt_bool x 0 then negb (choice (-(m + 1))%Z) else choice m) l) m).",
            "VernacStartTheoremProof",
            "e4055228437904fb7a12464142d2e978f594c523"
        ],
        [
            "Proof with auto with typeclass_instances.",
            "VernacProof",
            "c16343efcd37779057959eb30e1ff5afec0a83eb"
        ],
        [
            "intros choice x m l Hl.",
            "VernacExtend",
            "ee5ee1971c7b596e0528e358d4b593ada1634b53"
        ],
        [
            "simpl.",
            "VernacExtend",
            "1b93169f4cf876d207c1fab22a2347202ab48d85"
        ],
        [
            "unfold Rabs in Hl.",
            "VernacExtend",
            "a5e4e3c6e70bad993425f04d449c442b26d50959"
        ],
        [
            "destruct (Rcase_abs x) as [Zx|Zx].",
            "VernacExtend",
            "5ee70dbdc1e53b3475698b5c6e31430998680730"
        ],
        [
            "rewrite Rlt_bool_true with (1 := Zx).",
            "VernacExtend",
            "c4e4559887746f632f9b9b95acae07de69dd848e"
        ],
        [
            "simpl.",
            "VernacExtend",
            "1b93169f4cf876d207c1fab22a2347202ab48d85"
        ],
        [
            "rewrite <- (Ropp_involutive x).",
            "VernacExtend",
            "1908e4ee868b5f81dd7393a2a516c6e4756cc5e4"
        ],
        [
            "rewrite Znearest_opp.",
            "VernacExtend",
            "350c75d1f4325109ea758b936da66b03e76bbc75"
        ],
        [
            "apply f_equal.",
            "VernacExtend",
            "ba856cbef3c8e84dcef77c91c8515b497874875b"
        ],
        [
            "inversion_clear Hl as [Hx|l' Hx Hl'].",
            "VernacExtend",
            "937242798b8fa9f45ff22684666c8578d5a6e596"
        ],
        [
            "rewrite Hx.",
            "VernacExtend",
            "086fbf2e7628a02e1fc1ade44d17fcceedd5ab1d"
        ],
        [
            "apply Zrnd_Z2R...",
            "VernacExtend",
            "4c895971a56db2db6fd51fa6ac286f8d61311097"
        ],
        [
            "assert (Hm: Zfloor (-x) = m).",
            "VernacExtend",
            "9383cff8ea2c9cefdd1b49a157d166106c4767b9"
        ],
        [
            "apply Zfloor_imp.",
            "VernacExtend",
            "9278ce7c32c530a2f8be72314e979fc619d4a028"
        ],
        [
            "exact (conj (Rlt_le _ _ (proj1 Hx)) (proj2 Hx)).",
            "VernacExtend",
            "c1a34b6248ad66bb717e64a486d4fbcf1d17c758"
        ],
        [
            "unfold Znearest.",
            "VernacExtend",
            "c6481393d02b9e0a0e8669a35ef29881ad118b89"
        ],
        [
            "rewrite Zceil_floor_neq.",
            "VernacExtend",
            "b4fc727910b2a0e4293920fe2596a742e2d62876"
        ],
        [
            "rewrite Hm.",
            "VernacExtend",
            "a83613f2496ce8bb382bfee229040b06b8d1ef3c"
        ],
        [
            "replace (Rcompare (- x - Z2R m) (/2)) with l'.",
            "VernacExtend",
            "02a29ac81040630b2a79ba15ce10579668af37d4"
        ],
        [
            "now case l'.",
            "VernacExtend",
            "e7ccec75b06d244647debccd410c25f8915c28fb"
        ],
        [
            "rewrite <- Hl'.",
            "VernacExtend",
            "7f72dffbfd5d813f3915ce8642a33e4f09996665"
        ],
        [
            "rewrite Z2R_plus.",
            "VernacExtend",
            "acce6601b0322c726f9b248c200708805f7120a8"
        ],
        [
            "rewrite <- (Rcompare_plus_r (- Z2R m) (-x)).",
            "VernacExtend",
            "8932aed0f68ae09bd50341caf66a7303a81bad3d"
        ],
        [
            "apply f_equal.",
            "VernacExtend",
            "ba856cbef3c8e84dcef77c91c8515b497874875b"
        ],
        [
            "simpl (Z2R 1).",
            "VernacExtend",
            "da699c01ce6a5052fe3a71699803952eb5b5542a"
        ],
        [
            "field.",
            "VernacExtend",
            "93f44750d651d466b74a0cc63f88acb56273d533"
        ],
        [
            "rewrite Hm.",
            "VernacExtend",
            "a83613f2496ce8bb382bfee229040b06b8d1ef3c"
        ],
        [
            "now apply Rlt_not_eq.",
            "VernacExtend",
            "7c469637fc05542bf9c3c4fab85774b12e6b8f93"
        ],
        [
            "generalize (Rge_le _ _ Zx).",
            "VernacExtend",
            "89af13a9a82827503d80f11bf8e2a6964e7f64b1"
        ],
        [
            "clear Zx.",
            "VernacExtend",
            "18684a393a77fd6175e574585033b33f66cf87ba"
        ],
        [
            "intros Zx.",
            "VernacExtend",
            "4e1b3580e03cb42fe9c1a384ada7876f9def89ed"
        ],
        [
            "rewrite Rlt_bool_false with (1 := Zx).",
            "VernacExtend",
            "41847988514aefac8262779ccf05127358148ad7"
        ],
        [
            "simpl.",
            "VernacExtend",
            "1b93169f4cf876d207c1fab22a2347202ab48d85"
        ],
        [
            "inversion_clear Hl as [Hx|l' Hx Hl'].",
            "VernacExtend",
            "937242798b8fa9f45ff22684666c8578d5a6e596"
        ],
        [
            "rewrite Hx.",
            "VernacExtend",
            "086fbf2e7628a02e1fc1ade44d17fcceedd5ab1d"
        ],
        [
            "apply Zrnd_Z2R...",
            "VernacExtend",
            "4c895971a56db2db6fd51fa6ac286f8d61311097"
        ],
        [
            "assert (Hm: Zfloor x = m).",
            "VernacExtend",
            "cae4be744f1fbef0fd4649c2145c085dede9c408"
        ],
        [
            "apply Zfloor_imp.",
            "VernacExtend",
            "9278ce7c32c530a2f8be72314e979fc619d4a028"
        ],
        [
            "exact (conj (Rlt_le _ _ (proj1 Hx)) (proj2 Hx)).",
            "VernacExtend",
            "c1a34b6248ad66bb717e64a486d4fbcf1d17c758"
        ],
        [
            "unfold Znearest.",
            "VernacExtend",
            "c6481393d02b9e0a0e8669a35ef29881ad118b89"
        ],
        [
            "rewrite Zceil_floor_neq.",
            "VernacExtend",
            "b4fc727910b2a0e4293920fe2596a742e2d62876"
        ],
        [
            "rewrite Hm.",
            "VernacExtend",
            "a83613f2496ce8bb382bfee229040b06b8d1ef3c"
        ],
        [
            "replace (Rcompare (x - Z2R m) (/2)) with l'.",
            "VernacExtend",
            "aa54d6f1cdc6cce78a27be2ce1c48b98fe2113b8"
        ],
        [
            "now case l'.",
            "VernacExtend",
            "e7ccec75b06d244647debccd410c25f8915c28fb"
        ],
        [
            "rewrite <- Hl'.",
            "VernacExtend",
            "7f72dffbfd5d813f3915ce8642a33e4f09996665"
        ],
        [
            "rewrite Z2R_plus.",
            "VernacExtend",
            "acce6601b0322c726f9b248c200708805f7120a8"
        ],
        [
            "rewrite <- (Rcompare_plus_r (- Z2R m) x).",
            "VernacExtend",
            "f0f37e9f35849ea5de4eddca38d6027a888e00c1"
        ],
        [
            "apply f_equal.",
            "VernacExtend",
            "ba856cbef3c8e84dcef77c91c8515b497874875b"
        ],
        [
            "simpl (Z2R 1).",
            "VernacExtend",
            "da699c01ce6a5052fe3a71699803952eb5b5542a"
        ],
        [
            "field.",
            "VernacExtend",
            "93f44750d651d466b74a0cc63f88acb56273d533"
        ],
        [
            "rewrite Hm.",
            "VernacExtend",
            "a83613f2496ce8bb382bfee229040b06b8d1ef3c"
        ],
        [
            "now apply Rlt_not_eq.",
            "VernacExtend",
            "7c469637fc05542bf9c3c4fab85774b12e6b8f93"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Theorem inbetween_int_NE : forall x m l, inbetween_int m x l -> ZnearestE x = cond_incr (round_N (negb (Zeven m)) l) m.",
            "VernacStartTheoremProof",
            "ce079cd82192ecc2a948636eb411625b8ebffd29"
        ],
        [
            "intros x m l Hl.",
            "VernacExtend",
            "acc9d2a80c4c7a3e60af564667e1347459334b45"
        ],
        [
            "now apply inbetween_int_N with (choice := fun x => negb (Zeven x)).",
            "VernacExtend",
            "e54545a4506574254d1e4e0ba66a7863c24251ef"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Theorem inbetween_float_NE : forall x m l, let e := canonic_exp beta fexp x in inbetween_float beta m e x l -> round beta fexp ZnearestE x = F2R (Float beta (cond_incr (round_N (negb (Zeven m)) l) m) e).",
            "VernacStartTheoremProof",
            "8247f4d73844c895c605d224f209e46c9396c452"
        ],
        [
            "apply inbetween_float_round with (choice := fun m l => cond_incr (round_N (negb (Zeven m)) l) m).",
            "VernacExtend",
            "20da11129147321a49e193cad1dcfbfa9736a06e"
        ],
        [
            "exact inbetween_int_NE.",
            "VernacExtend",
            "d59583318b9300a0cec0f3de153320742d5442f2"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Theorem inbetween_int_NE_sign : forall x m l, inbetween_int m (Rabs x) l -> ZnearestE x = cond_Zopp (Rlt_bool x 0) (cond_incr (round_N (negb (Zeven m)) l) m).",
            "VernacStartTheoremProof",
            "66bd56aa88f057c3cb28937b3bc937b4ced931c1"
        ],
        [
            "intros x m l Hl.",
            "VernacExtend",
            "acc9d2a80c4c7a3e60af564667e1347459334b45"
        ],
        [
            "erewrite inbetween_int_N_sign with (choice := fun x => negb (Zeven x)).",
            "VernacExtend",
            "ded120824615b0a9b4fb2bed1e463394462264cf"
        ],
        [
            "2: eexact Hl.",
            "VernacExtend",
            "94222cf34b8a88b964ff4e0655cff15fcc6e532e"
        ],
        [
            "apply f_equal.",
            "VernacExtend",
            "ba856cbef3c8e84dcef77c91c8515b497874875b"
        ],
        [
            "case Rlt_bool.",
            "VernacExtend",
            "da208ea1a14afd75e8ab60d99e3d2460ef18e0dc"
        ],
        [
            "rewrite Zeven_opp, Zeven_plus.",
            "VernacExtend",
            "e550e211dc271fb1635b683e2ccfd798c67be2e2"
        ],
        [
            "now case (Zeven m).",
            "VernacExtend",
            "dd0cc44cde61f4c374a82b286761ad9488b5d402"
        ],
        [
            "apply refl_equal.",
            "VernacExtend",
            "37304a26ede0d38318cdc32c46bfa45cfbc5e7db"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Theorem inbetween_float_NE_sign : forall x m l, let e := canonic_exp beta fexp x in inbetween_float beta m e (Rabs x) l -> round beta fexp ZnearestE x = F2R (Float beta (cond_Zopp (Rlt_bool x 0) (cond_incr (round_N (negb (Zeven m)) l) m)) e).",
            "VernacStartTheoremProof",
            "15ce19d8490bd68640f390d900c9e3aa39380a2b"
        ],
        [
            "apply inbetween_float_round_sign with (choice := fun s m l => cond_incr (round_N (negb (Zeven m)) l) m).",
            "VernacExtend",
            "f794a959e75a1d6d9993e39f11409dfbecce1fc2"
        ],
        [
            "exact inbetween_int_NE_sign.",
            "VernacExtend",
            "720e46ead57ee8c64b37e173c24236c313ccb968"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Theorem inbetween_int_NA : forall x m l, inbetween_int m x l -> ZnearestA x = cond_incr (round_N (Zle_bool 0 m) l) m.",
            "VernacStartTheoremProof",
            "f6edf7d20e591032aae6c0e9a27b4e01f694b3b5"
        ],
        [
            "intros x m l Hl.",
            "VernacExtend",
            "acc9d2a80c4c7a3e60af564667e1347459334b45"
        ],
        [
            "now apply inbetween_int_N with (choice := fun x => Zle_bool 0 x).",
            "VernacExtend",
            "262a57abefd05ee9015262853ab632bbcd87fac7"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Theorem inbetween_float_NA : forall x m l, let e := canonic_exp beta fexp x in inbetween_float beta m e x l -> round beta fexp ZnearestA x = F2R (Float beta (cond_incr (round_N (Zle_bool 0 m) l) m) e).",
            "VernacStartTheoremProof",
            "69745c9ad4d61c5264bd26c8e0815900ead1fc0c"
        ],
        [
            "apply inbetween_float_round with (choice := fun m l => cond_incr (round_N (Zle_bool 0 m) l) m).",
            "VernacExtend",
            "37d46c5977a2fd7fe7853926428667c92dffc7bf"
        ],
        [
            "exact inbetween_int_NA.",
            "VernacExtend",
            "3866a61a7097aa54a40d5e189ce6db7423b01749"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Theorem inbetween_int_NA_sign : forall x m l, inbetween_int m (Rabs x) l -> ZnearestA x = cond_Zopp (Rlt_bool x 0) (cond_incr (round_N true l) m).",
            "VernacStartTheoremProof",
            "e58d2e2114cc4356a227ec89b428b51d6cf8779f"
        ],
        [
            "intros x m l Hl.",
            "VernacExtend",
            "acc9d2a80c4c7a3e60af564667e1347459334b45"
        ],
        [
            "erewrite inbetween_int_N_sign with (choice := Zle_bool 0).",
            "VernacExtend",
            "dce10f5b5dcabedb4a0d6cb52613c4f964a147e2"
        ],
        [
            "2: eexact Hl.",
            "VernacExtend",
            "94222cf34b8a88b964ff4e0655cff15fcc6e532e"
        ],
        [
            "apply f_equal.",
            "VernacExtend",
            "ba856cbef3c8e84dcef77c91c8515b497874875b"
        ],
        [
            "assert (Hm: (0 <= m)%Z).",
            "VernacExtend",
            "e51cc1de48c918a98fe2199c1601f1e469e6c716"
        ],
        [
            "apply Zlt_succ_le.",
            "VernacExtend",
            "c303523f868e2dd2771675d2de37d7328c4e957b"
        ],
        [
            "apply lt_Z2R.",
            "VernacExtend",
            "c0e615fac753553d0eac3dc2ae4d76c109cb9e3e"
        ],
        [
            "apply Rle_lt_trans with (Rabs x).",
            "VernacExtend",
            "09b1010e522634f61af2161fdd1eab140e4a0acb"
        ],
        [
            "apply Rabs_pos.",
            "VernacExtend",
            "8e57e214403458a4dc8dafc960971b86cf3b856d"
        ],
        [
            "refine (proj2 (inbetween_bounds _ _ _ _ _ Hl)).",
            "VernacExtend",
            "0e8758445762a36f69750beb34b3596bf075b88f"
        ],
        [
            "apply Z2R_lt.",
            "VernacExtend",
            "20648688afbdacefe3b6070755cbe6f263ce5093"
        ],
        [
            "apply Zlt_succ.",
            "VernacExtend",
            "f4cf5b932d8c774be510b7802fbeea627fe15261"
        ],
        [
            "rewrite Zle_bool_true with (1 := Hm).",
            "VernacExtend",
            "a03557d1cb1268315d05fc2d1b2508680891ef21"
        ],
        [
            "rewrite Zle_bool_false.",
            "VernacExtend",
            "958139bcc90f42020f9b6fc3f99c032f5ffc6e97"
        ],
        [
            "now case Rlt_bool.",
            "VernacExtend",
            "6c86c1bb2eaac9892ba138eaac0d711d210a8429"
        ],
        [
            "omega.",
            "VernacExtend",
            "32c6c865d255452c7e10c77111456d1981cede39"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Definition truncate_aux t k := let '(m, e, l) := t in let p := Zpower beta k in (Zdiv m p, (e + k)%Z, new_location p (Zmod m p) l).",
            "VernacDefinition",
            "acdc18937612309efdb86988040ea134f10dad72"
        ],
        [
            "Theorem truncate_aux_comp : forall t k1 k2, (0 < k1)%Z -> (0 < k2)%Z -> truncate_aux t (k1 + k2) = truncate_aux (truncate_aux t k1) k2.",
            "VernacStartTheoremProof",
            "af10d5aac6a8b995504367f54c5d052e1d5a8697"
        ],
        [
            "intros ((m,e),l) k1 k2 Hk1 Hk2.",
            "VernacExtend",
            "c0fd85692140ecd276846d782ad0683ee3a40e80"
        ],
        [
            "unfold truncate_aux.",
            "VernacExtend",
            "55639e3b751e2ddb97aa3376d85eeb981ac54786"
        ],
        [
            "destruct (inbetween_float_ex beta m e l) as (x,Hx).",
            "VernacExtend",
            "c64914c70ec46cef3c2b54f4da51c3a6d50150a7"
        ],
        [
            "assert (B1 := inbetween_float_new_location _ _ _ _ _ _ Hk1 Hx).",
            "VernacExtend",
            "8c731fddfcfdaa620fc4818ed4abd8fac9489713"
        ],
        [
            "assert (Hk3: (0 < k1 + k2)%Z).",
            "VernacExtend",
            "db50a8a6a0543ec1402aa99b20db48e683de2d69"
        ],
        [
            "change Z0 with (0 + 0)%Z.",
            "VernacExtend",
            "714e860659556d4c74b027a23d765568262bbe3d"
        ],
        [
            "now apply Zplus_lt_compat.",
            "VernacExtend",
            "a187084a363f7ee15c099544429511949fa26673"
        ],
        [
            "assert (B3 := inbetween_float_new_location _ _ _ _ _ _ Hk3 Hx).",
            "VernacExtend",
            "3174b6ce75453e294af7bc4a3e1d01b8844cd99d"
        ],
        [
            "assert (B2 := inbetween_float_new_location _ _ _ _ _ _ Hk2 B1).",
            "VernacExtend",
            "b25f1bb9ce88e6356f63ded70d793158620cee70"
        ],
        [
            "rewrite Zplus_assoc in B3.",
            "VernacExtend",
            "5ca093a22b6596c2673abefd049b667ae816dce4"
        ],
        [
            "destruct (inbetween_float_unique _ _ _ _ _ _ _ B2 B3).",
            "VernacExtend",
            "30bbed1bc54e54418fc3acbe72543cafdc449519"
        ],
        [
            "now rewrite H, H0, Zplus_assoc.",
            "VernacExtend",
            "f482aaa2b741bfc3e5dba296fe4cc1e03bc6fdf1"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Definition truncate t := let '(m, e, l) := t in let k := (fexp (Zdigits beta m + e) - e)%Z in if Zlt_bool 0 k then truncate_aux t k else t.",
            "VernacDefinition",
            "fabf54fa1f6709125f1f9b0ae223d1a159842aec"
        ],
        [
            "Theorem truncate_0 : forall e l, let '(m', e', l') := truncate (0, e, l)%Z in m' = Z0.",
            "VernacStartTheoremProof",
            "1afa5ae3bd64925c0adfdf56e5bacc107fe7822c"
        ],
        [
            "intros e l.",
            "VernacExtend",
            "ca22d5828a114e3919415f54ddb167cbdd916fc1"
        ],
        [
            "unfold truncate.",
            "VernacExtend",
            "e239555bc9fc631f0b28093ba90c3ba6a6565581"
        ],
        [
            "case Zlt_bool.",
            "VernacExtend",
            "78164fbad2d19950938826c1852753d600318c13"
        ],
        [
            "simpl.",
            "VernacExtend",
            "1b93169f4cf876d207c1fab22a2347202ab48d85"
        ],
        [
            "apply Zdiv_0_l.",
            "VernacExtend",
            "3efecd8b766a425267f55d144845d4556c882659"
        ],
        [
            "apply refl_equal.",
            "VernacExtend",
            "37304a26ede0d38318cdc32c46bfa45cfbc5e7db"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Theorem generic_format_truncate : forall m e l, (0 <= m)%Z -> let '(m', e', l') := truncate (m, e, l) in format (F2R (Float beta m' e')).",
            "VernacStartTheoremProof",
            "ab328761fe91099e6f4223643e3ef106e8003a32"
        ],
        [
            "intros m e l Hm.",
            "VernacExtend",
            "e882fd3fcce1a140df7e1dc74c7d1d56b0479bb5"
        ],
        [
            "unfold truncate.",
            "VernacExtend",
            "e239555bc9fc631f0b28093ba90c3ba6a6565581"
        ],
        [
            "set (k := (fexp (Zdigits beta m + e) - e)%Z).",
            "VernacExtend",
            "4d391e4c716a4a0ec7ccae6c5289c1f6a48e64c4"
        ],
        [
            "case Zlt_bool_spec ; intros Hk.",
            "VernacExtend",
            "4ae30f19ba29d0d3cfc9fb0ec1a1c50069571a20"
        ],
        [
            "unfold truncate_aux.",
            "VernacExtend",
            "55639e3b751e2ddb97aa3376d85eeb981ac54786"
        ],
        [
            "apply generic_format_F2R.",
            "VernacExtend",
            "3bbdbef5cecd8cd7887cb9d4ed37843b2dc31e75"
        ],
        [
            "intros Hd.",
            "VernacExtend",
            "837784d92d66976ddf3817e677843ebc2a58d8dc"
        ],
        [
            "unfold canonic_exp.",
            "VernacExtend",
            "993fc99c30cdbd2e74bd71e0fd5e49f000dffb04"
        ],
        [
            "rewrite ln_beta_F2R_Zdigits with (1 := Hd).",
            "VernacExtend",
            "8a2599c649f1f05ee59c3a2e46b5edcf5a65de08"
        ],
        [
            "rewrite Zdigits_div_Zpower with (1 := Hm).",
            "VernacExtend",
            "6937e08309581b2d2df85e8a83d2ed63bc5b560a"
        ],
        [
            "replace (Zdigits beta m - k + (e + k))%Z with (Zdigits beta m + e)%Z by ring.",
            "VernacExtend",
            "91e9582b9042696d89c8b73535b3dccd39dfb34d"
        ],
        [
            "unfold k.",
            "VernacExtend",
            "428aa83d31b248761e7a89000334fa4888cade6d"
        ],
        [
            "ring_simplify.",
            "VernacExtend",
            "31578f61427562191ce5389abf97dbf9985ea04c"
        ],
        [
            "apply Zle_refl.",
            "VernacExtend",
            "68a57d6389c7dd3f2c16b824eb0734986d9ff207"
        ],
        [
            "split.",
            "VernacExtend",
            "55abc140132bd88981001ac656020469a8d503eb"
        ],
        [
            "now apply Zlt_le_weak.",
            "VernacExtend",
            "8df137fb70ba9a1f8f0605f13095da8524766c66"
        ],
        [
            "apply Znot_gt_le.",
            "VernacExtend",
            "6a456f2f3e4f8c27d98bc6ea2a92afbf3ad279d0"
        ],
        [
            "contradict Hd.",
            "VernacExtend",
            "3ec54ce5c01f2b3de6af2ff2f8e8906d33ea8673"
        ],
        [
            "apply Zdiv_small.",
            "VernacExtend",
            "3122ba3e001b8237927b3d5e6f1ed3eaf8b08d19"
        ],
        [
            "apply conj with (1 := Hm).",
            "VernacExtend",
            "653c31d779d3eecdd6a9158cede7ae6369301b8f"
        ],
        [
            "rewrite <- Zabs_eq with (1 := Hm).",
            "VernacExtend",
            "253285c51ce5663b6ffd48a38c301564d68aad4b"
        ],
        [
            "apply Zpower_gt_Zdigits.",
            "VernacExtend",
            "c10aef725b92cbc2bd7f01b2187418edfd8e992b"
        ],
        [
            "apply Zlt_le_weak.",
            "VernacExtend",
            "77c804797cd604de1af1fd78f914f426e7c6ce85"
        ],
        [
            "now apply Zgt_lt.",
            "VernacExtend",
            "722f47ffbb35b026b8fc7f83a8cebac7b5b01f0f"
        ],
        [
            "destruct (Zle_lt_or_eq _ _ Hm) as [Hm'|Hm'].",
            "VernacExtend",
            "67d080877acd5269c84d682b8e07348d51ff65a8"
        ],
        [
            "apply generic_format_F2R.",
            "VernacExtend",
            "3bbdbef5cecd8cd7887cb9d4ed37843b2dc31e75"
        ],
        [
            "unfold canonic_exp.",
            "VernacExtend",
            "993fc99c30cdbd2e74bd71e0fd5e49f000dffb04"
        ],
        [
            "rewrite ln_beta_F2R_Zdigits.",
            "VernacExtend",
            "0e6182cc64c2ad4bc57501af40a53f1a50e13f85"
        ],
        [
            "2: now apply Zgt_not_eq.",
            "VernacExtend",
            "db915b9714cab5d664f43e92ce165ff18e125390"
        ],
        [
            "unfold k in Hk.",
            "VernacExtend",
            "c721960b772f7c86ed5f89da3ed30840dd1c4666"
        ],
        [
            "clear -Hk.",
            "VernacExtend",
            "7dbda6c6e41212f51deb695833d9b6969e2ccaad"
        ],
        [
            "omega.",
            "VernacExtend",
            "32c6c865d255452c7e10c77111456d1981cede39"
        ],
        [
            "rewrite <- Hm', F2R_0.",
            "VernacExtend",
            "f0b9172df87ede32f2bb4134970236d4c958dfd9"
        ],
        [
            "apply generic_format_0.",
            "VernacExtend",
            "dc3c4afb013f89f69b2f0e71216d8926d296b3bd"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Theorem truncate_correct_format : forall m e, m <> Z0 -> let x := F2R (Float beta m e) in generic_format beta fexp x -> (e <= fexp (Zdigits beta m + e))%Z -> let '(m', e', l') := truncate (m, e, loc_Exact) in x = F2R (Float beta m' e') /\\ e' = canonic_exp beta fexp x.",
            "VernacStartTheoremProof",
            "71fafc9efdd2bbb19314a603f018983c116b7d06"
        ],
        [
            "intros m e Hm x Fx He.",
            "VernacExtend",
            "1cfadbf26327179f82495783b6faa0237ac579ee"
        ],
        [
            "assert (Hc: canonic_exp beta fexp x = fexp (Zdigits beta m + e)).",
            "VernacExtend",
            "b00e23e9436a503f85ca44108dc48145cf5e556e"
        ],
        [
            "unfold canonic_exp, x.",
            "VernacExtend",
            "4d4c4a2d08a8bf7d534f8f3576a77a0774e90b54"
        ],
        [
            "now rewrite ln_beta_F2R_Zdigits.",
            "VernacExtend",
            "7c7ba95da24bb8c8163aad3ef09e24ebe767093a"
        ],
        [
            "unfold truncate.",
            "VernacExtend",
            "e239555bc9fc631f0b28093ba90c3ba6a6565581"
        ],
        [
            "rewrite <- Hc.",
            "VernacExtend",
            "60792a8d0080e76b9fdf601abc0d001fc72f25f6"
        ],
        [
            "set (k := (canonic_exp beta fexp x - e)%Z).",
            "VernacExtend",
            "18264c5919dfcc58ac230457a93b4261d49eb741"
        ],
        [
            "case Zlt_bool_spec ; intros Hk.",
            "VernacExtend",
            "4ae30f19ba29d0d3cfc9fb0ec1a1c50069571a20"
        ],
        [
            "unfold truncate_aux.",
            "VernacExtend",
            "55639e3b751e2ddb97aa3376d85eeb981ac54786"
        ],
        [
            "rewrite Fx at 1.",
            "VernacExtend",
            "738624b0bfd07d130321120641f5880678c337b4"
        ],
        [
            "assert (H: (e + k)%Z = canonic_exp beta fexp x).",
            "VernacExtend",
            "0d0d866014f75f347b21d3fd1913439e5d9a1806"
        ],
        [
            "unfold k.",
            "VernacExtend",
            "428aa83d31b248761e7a89000334fa4888cade6d"
        ],
        [
            "ring.",
            "VernacExtend",
            "baadd9fc4c175005af409bb466fcea9fab25b4e6"
        ],
        [
            "refine (conj _ H).",
            "VernacExtend",
            "5e14d8aba9bc0c8f8426322d76d270652ed62943"
        ],
        [
            "rewrite <- H.",
            "VernacExtend",
            "95b84807b4afb2ef79b7cc04a1c91a4e3a502e47"
        ],
        [
            "apply F2R_eq_compat.",
            "VernacExtend",
            "bc1e4623b2196fb23776bd02c10b33de36f7515b"
        ],
        [
            "replace (scaled_mantissa beta fexp x) with (Z2R (Zfloor (scaled_mantissa beta fexp x))).",
            "VernacExtend",
            "275524c6d577bf73f0fcc4fbf4dc64aed4e60108"
        ],
        [
            "rewrite Ztrunc_Z2R.",
            "VernacExtend",
            "5d88ff3ba444a5e6845eb9bf9b6605e2ebc143e5"
        ],
        [
            "unfold scaled_mantissa.",
            "VernacExtend",
            "dfa9f34cb89bdf420880d9412ca7126938d16f0a"
        ],
        [
            "rewrite <- H.",
            "VernacExtend",
            "95b84807b4afb2ef79b7cc04a1c91a4e3a502e47"
        ],
        [
            "unfold x, F2R.",
            "VernacExtend",
            "2cf716c9eeadc093c56c060b176a984284284432"
        ],
        [
            "simpl.",
            "VernacExtend",
            "1b93169f4cf876d207c1fab22a2347202ab48d85"
        ],
        [
            "rewrite Rmult_assoc, <- bpow_plus.",
            "VernacExtend",
            "e64efbe326a420591ccd203c3aa334b6ee79c4aa"
        ],
        [
            "ring_simplify (e + - (e + k))%Z.",
            "VernacExtend",
            "4f44f6a16f4956ff643ba84f50e1c45864ec46d9"
        ],
        [
            "clear -Hm Hk.",
            "VernacExtend",
            "eecc77d74702db78f2824c85cbcb44f9d83a8751"
        ],
        [
            "destruct k as [|k|k] ; try easy.",
            "VernacExtend",
            "7675d4452635428ce497cfa1102598d4afa6ad21"
        ],
        [
            "simpl.",
            "VernacExtend",
            "1b93169f4cf876d207c1fab22a2347202ab48d85"
        ],
        [
            "apply Zfloor_div.",
            "VernacExtend",
            "2211ba557e395d0540b64fdefc231bc4c46fa6c3"
        ],
        [
            "intros H.",
            "VernacExtend",
            "5cfae87a34fa7b59a257c9640f1b674f6e6d780b"
        ],
        [
            "generalize (Zpower_pos_gt_0 beta k) (Zle_bool_imp_le _ _ (radix_prop beta)).",
            "VernacExtend",
            "b8623a403a53c6c5715ecb60de15828c6c0d3a7a"
        ],
        [
            "omega.",
            "VernacExtend",
            "32c6c865d255452c7e10c77111456d1981cede39"
        ],
        [
            "rewrite scaled_mantissa_generic with (1 := Fx).",
            "VernacExtend",
            "1a384b6b295f8a07d7dc5008c74782331d8ce959"
        ],
        [
            "now rewrite Zfloor_Z2R.",
            "VernacExtend",
            "e981e996fe9158b8fa6227b185fa2650fb5b8890"
        ],
        [
            "split.",
            "VernacExtend",
            "55abc140132bd88981001ac656020469a8d503eb"
        ],
        [
            "apply refl_equal.",
            "VernacExtend",
            "37304a26ede0d38318cdc32c46bfa45cfbc5e7db"
        ],
        [
            "unfold k in Hk.",
            "VernacExtend",
            "c721960b772f7c86ed5f89da3ed30840dd1c4666"
        ],
        [
            "omega.",
            "VernacExtend",
            "32c6c865d255452c7e10c77111456d1981cede39"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Theorem truncate_correct_partial : forall x m e l, (0 < x)%R -> inbetween_float beta m e x l -> (e <= fexp (Zdigits beta m + e))%Z -> let '(m', e', l') := truncate (m, e, l) in inbetween_float beta m' e' x l' /\\ e' = canonic_exp beta fexp x.",
            "VernacStartTheoremProof",
            "384281919d68f29eb661062887ed3cb53b957925"
        ],
        [
            "intros x m e l Hx H1 H2.",
            "VernacExtend",
            "7db1e91b5143d341d4c6c4bbe25960383a95db27"
        ],
        [
            "unfold truncate.",
            "VernacExtend",
            "e239555bc9fc631f0b28093ba90c3ba6a6565581"
        ],
        [
            "set (k := (fexp (Zdigits beta m + e) - e)%Z).",
            "VernacExtend",
            "4d391e4c716a4a0ec7ccae6c5289c1f6a48e64c4"
        ],
        [
            "set (p := Zpower beta k).",
            "VernacExtend",
            "281fdb2af06a798846d99d5aeccc657c9ba680fc"
        ],
        [
            "assert (Hx': (F2R (Float beta m e) <= x < F2R (Float beta (m + 1) e))%R).",
            "VernacExtend",
            "2b52309102057265f0f4550851ee3456dd65aad1"
        ],
        [
            "apply inbetween_float_bounds with (1 := H1).",
            "VernacExtend",
            "a6cb370b0138bc9e66920d2760fbf24ea3521b76"
        ],
        [
            "assert (Hm: (0 <= m)%Z).",
            "VernacExtend",
            "e51cc1de48c918a98fe2199c1601f1e469e6c716"
        ],
        [
            "cut (0 < m + 1)%Z.",
            "VernacExtend",
            "c8663972d803dea2f8ed8d7f225402c39aaa3ff8"
        ],
        [
            "omega.",
            "VernacExtend",
            "32c6c865d255452c7e10c77111456d1981cede39"
        ],
        [
            "apply F2R_lt_reg with beta e.",
            "VernacExtend",
            "49f0695b971c33c97bf9f457f3da29da74af7596"
        ],
        [
            "rewrite F2R_0.",
            "VernacExtend",
            "2b1ed44aa307676d6672cc7c6a6e12102bae31de"
        ],
        [
            "apply Rlt_trans with (1 := Hx).",
            "VernacExtend",
            "f2004241a6c827a00bb43613e5c0e6413fbaf426"
        ],
        [
            "apply Hx'.",
            "VernacExtend",
            "b86ae5b23af511ab5298308aa6904e92e151bdab"
        ],
        [
            "assert (He: (e + k = canonic_exp beta fexp x)%Z).",
            "VernacExtend",
            "9866f9858cd4167e8833f03bf9cee0a82f679c89"
        ],
        [
            "unfold canonic_exp.",
            "VernacExtend",
            "993fc99c30cdbd2e74bd71e0fd5e49f000dffb04"
        ],
        [
            "destruct (Zle_lt_or_eq _ _ Hm) as [Hm'|Hm'].",
            "VernacExtend",
            "67d080877acd5269c84d682b8e07348d51ff65a8"
        ],
        [
            "rewrite ln_beta_F2R_bounds with (1 := Hm') (2 := Hx').",
            "VernacExtend",
            "5862d5cc9b8afe4a5f2882984533e81cf5b43997"
        ],
        [
            "assert (H: m <> Z0).",
            "VernacExtend",
            "157e80e1bbc3e1bbfc9b7e01c51a7fd6b7c86d5a"
        ],
        [
            "apply sym_not_eq.",
            "VernacExtend",
            "bedc81deba6c162bdb471891133e8c271a82892c"
        ],
        [
            "now apply Zlt_not_eq.",
            "VernacExtend",
            "176d2d8d3eb97f65ca84b2ddd47c3e0ca7de52f9"
        ],
        [
            "rewrite ln_beta_F2R with (1 := H).",
            "VernacExtend",
            "471c161d929a6c6aac8b16a3a4670babeacfa53d"
        ],
        [
            "rewrite <- Zdigits_ln_beta with (1 := H).",
            "VernacExtend",
            "85beb31e04309647bff9f0d6d488bb5e85a0db54"
        ],
        [
            "unfold k.",
            "VernacExtend",
            "428aa83d31b248761e7a89000334fa4888cade6d"
        ],
        [
            "ring.",
            "VernacExtend",
            "baadd9fc4c175005af409bb466fcea9fab25b4e6"
        ],
        [
            "rewrite <- Hm' in H2.",
            "VernacExtend",
            "281d7099bb40e7b26e9764025ad74f707631ac23"
        ],
        [
            "destruct (ln_beta beta x) as (ex, Hex).",
            "VernacExtend",
            "21921c4b6ef8de5f8e2c767fee1f9565dd6a946e"
        ],
        [
            "simpl.",
            "VernacExtend",
            "1b93169f4cf876d207c1fab22a2347202ab48d85"
        ],
        [
            "specialize (Hex (Rgt_not_eq _ _ Hx)).",
            "VernacExtend",
            "32abedc89c1bc6c4ce8ffe91ee839810ce8bee32"
        ],
        [
            "unfold k.",
            "VernacExtend",
            "428aa83d31b248761e7a89000334fa4888cade6d"
        ],
        [
            "ring_simplify.",
            "VernacExtend",
            "31578f61427562191ce5389abf97dbf9985ea04c"
        ],
        [
            "rewrite <- Hm'.",
            "VernacExtend",
            "56157fb6cf55ff1eff02e4380c0be206172bb201"
        ],
        [
            "simpl.",
            "VernacExtend",
            "1b93169f4cf876d207c1fab22a2347202ab48d85"
        ],
        [
            "apply sym_eq.",
            "VernacExtend",
            "f01eb728d9ceeac2915c66b52a7b50a0c452e949"
        ],
        [
            "apply valid_exp.",
            "VernacExtend",
            "9335fa4770b756f93530fd54152de0507ba39d3b"
        ],
        [
            "exact H2.",
            "VernacExtend",
            "6cf1ccd4f667f962fca87ce20ad22b06c15c53ad"
        ],
        [
            "apply Zle_trans with e.",
            "VernacExtend",
            "2f1733b61341deff3c4000176b2b8387bec8f8b3"
        ],
        [
            "eapply bpow_lt_bpow.",
            "VernacExtend",
            "38e25ff5e24b355e387cafcecb6e23fd69b72b61"
        ],
        [
            "apply Rle_lt_trans with (1 := proj1 Hex).",
            "VernacExtend",
            "ff6512817e99a650e6ce243254a7ceefde9ff8e2"
        ],
        [
            "rewrite Rabs_pos_eq.",
            "VernacExtend",
            "489e84e15a0f0c3833f18764e3ff39e15bc66da3"
        ],
        [
            "rewrite <- F2R_bpow.",
            "VernacExtend",
            "29562ae2f86921a1e7081119c136279f93ff5e77"
        ],
        [
            "rewrite <- Hm' in Hx'.",
            "VernacExtend",
            "137fe6453d5ed99f3bf3379da9c8049c3a33bbe4"
        ],
        [
            "apply Hx'.",
            "VernacExtend",
            "b86ae5b23af511ab5298308aa6904e92e151bdab"
        ],
        [
            "now apply Rlt_le.",
            "VernacExtend",
            "3fa67bbd472123a7abc1f777aecc643fb3862e46"
        ],
        [
            "exact H2.",
            "VernacExtend",
            "6cf1ccd4f667f962fca87ce20ad22b06c15c53ad"
        ],
        [
            "generalize (Zlt_cases 0 k).",
            "VernacExtend",
            "b1e1cbd2e3d7dd9672f0d44614ca25b6aaa325ea"
        ],
        [
            "case (Zlt_bool 0 k) ; intros Hk ; unfold k in Hk.",
            "VernacExtend",
            "38fc7e5096e53d1b259beea6805d68bd38ec2647"
        ],
        [
            "split.",
            "VernacExtend",
            "55abc140132bd88981001ac656020469a8d503eb"
        ],
        [
            "now apply inbetween_float_new_location.",
            "VernacExtend",
            "eebd2c5a0f51a0d1dba3fbc02eb3e925713f67ce"
        ],
        [
            "exact He.",
            "VernacExtend",
            "260274bed6d14ff75176341810d1f3523c96201d"
        ],
        [
            "split.",
            "VernacExtend",
            "55abc140132bd88981001ac656020469a8d503eb"
        ],
        [
            "exact H1.",
            "VernacExtend",
            "c03ab82d1e411e1dcd211c59917a4946e039be00"
        ],
        [
            "rewrite <- He.",
            "VernacExtend",
            "8e2008ac06c9fe1960840a93496608daeae8098d"
        ],
        [
            "unfold k.",
            "VernacExtend",
            "428aa83d31b248761e7a89000334fa4888cade6d"
        ],
        [
            "omega.",
            "VernacExtend",
            "32c6c865d255452c7e10c77111456d1981cede39"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Theorem truncate_correct : forall x m e l, (0 <= x)%R -> inbetween_float beta m e x l -> (e <= fexp (Zdigits beta m + e))%Z \\/ l = loc_Exact -> let '(m', e', l') := truncate (m, e, l) in inbetween_float beta m' e' x l' /\\ (e' = canonic_exp beta fexp x \\/ (l' = loc_Exact /\\ format x)).",
            "VernacStartTheoremProof",
            "d98e03d4755f9f84e526bdae711605d93e1e5a54"
        ],
        [
            "intros x m e l [Hx|Hx] H1 H2.",
            "VernacExtend",
            "27ea1f634f0283a499070edbf862fb959a4187f7"
        ],
        [
            "destruct (Zle_or_lt e (fexp (Zdigits beta m + e))) as [H3|H3].",
            "VernacExtend",
            "89591919782ccff2d51bd16a6b1d63013413bfa1"
        ],
        [
            "generalize (truncate_correct_partial x m e l Hx H1 H3).",
            "VernacExtend",
            "6f6c22e9b3567f36b2c59619372545f839288a7c"
        ],
        [
            "destruct (truncate (m, e, l)) as ((m', e'), l').",
            "VernacExtend",
            "639009194a48ef2c700796db0bc06cf47f882cf4"
        ],
        [
            "intros (H4, H5).",
            "VernacExtend",
            "e1c62dd9276244370d57f7981e28594375d48e36"
        ],
        [
            "split.",
            "VernacExtend",
            "55abc140132bd88981001ac656020469a8d503eb"
        ],
        [
            "exact H4.",
            "VernacExtend",
            "861b0a8cbc78b24a3c2c92390110f650f7a9aa8d"
        ],
        [
            "now left.",
            "VernacExtend",
            "2bd81021638064dbaa3d520cec398253376a1f37"
        ],
        [
            "destruct H2 as [H2|H2].",
            "VernacExtend",
            "6f1e78397f882b8d61d2633fdaef03e5fd2de71f"
        ],
        [
            "elim (Zlt_irrefl e).",
            "VernacExtend",
            "a19d87f961dc261a258aee1004f1a004de71f74c"
        ],
        [
            "now apply Zle_lt_trans with (1 := H2).",
            "VernacExtend",
            "ed5d940e70c90082e1f52aa31ea3c95698c7d5dd"
        ],
        [
            "rewrite H2 in H1 |- *.",
            "VernacExtend",
            "ec7e276a87bedb0144b5c7cb93ed6a7bfa23a5d1"
        ],
        [
            "unfold truncate.",
            "VernacExtend",
            "e239555bc9fc631f0b28093ba90c3ba6a6565581"
        ],
        [
            "generalize (Zlt_cases 0 (fexp (Zdigits beta m + e) - e)).",
            "VernacExtend",
            "a7c3d84b08c3ec90e9bc50f1e418e46b261d7c60"
        ],
        [
            "case Zlt_bool.",
            "VernacExtend",
            "78164fbad2d19950938826c1852753d600318c13"
        ],
        [
            "intros H.",
            "VernacExtend",
            "5cfae87a34fa7b59a257c9640f1b674f6e6d780b"
        ],
        [
            "apply False_ind.",
            "VernacExtend",
            "953e151f97c8c6479faad3bcd88fb0b89b03443a"
        ],
        [
            "omega.",
            "VernacExtend",
            "32c6c865d255452c7e10c77111456d1981cede39"
        ],
        [
            "intros _.",
            "VernacExtend",
            "eb0e518a4896777a9a76b3ab973eaf7b4f1b52db"
        ],
        [
            "split.",
            "VernacExtend",
            "55abc140132bd88981001ac656020469a8d503eb"
        ],
        [
            "exact H1.",
            "VernacExtend",
            "c03ab82d1e411e1dcd211c59917a4946e039be00"
        ],
        [
            "right.",
            "VernacExtend",
            "27e417a3497755767e1a1d6ba87753ecddaee6b7"
        ],
        [
            "split.",
            "VernacExtend",
            "55abc140132bd88981001ac656020469a8d503eb"
        ],
        [
            "apply refl_equal.",
            "VernacExtend",
            "37304a26ede0d38318cdc32c46bfa45cfbc5e7db"
        ],
        [
            "inversion_clear H1.",
            "VernacExtend",
            "1443921cbef97c67d0bd87bf517b302257ed5b28"
        ],
        [
            "rewrite H.",
            "VernacExtend",
            "6192df8b89486a3ba89a78e26e0d70cae2dc94c2"
        ],
        [
            "apply generic_format_F2R.",
            "VernacExtend",
            "3bbdbef5cecd8cd7887cb9d4ed37843b2dc31e75"
        ],
        [
            "intros Zm.",
            "VernacExtend",
            "de867e56bf99f92faf78681bae4d0f8460556ad1"
        ],
        [
            "unfold canonic_exp.",
            "VernacExtend",
            "993fc99c30cdbd2e74bd71e0fd5e49f000dffb04"
        ],
        [
            "rewrite ln_beta_F2R_Zdigits with (1 := Zm).",
            "VernacExtend",
            "72262fad50dc3acff153e7dec6a4cb1f570efc32"
        ],
        [
            "now apply Zlt_le_weak.",
            "VernacExtend",
            "8df137fb70ba9a1f8f0605f13095da8524766c66"
        ],
        [
            "assert (Hm: m = Z0).",
            "VernacExtend",
            "38887695c2b6e9301b5798061063c0f38e8da122"
        ],
        [
            "cut (m <= 0 < m + 1)%Z.",
            "VernacExtend",
            "bd14abcc4e0c65b952cae689192c9528cdb01465"
        ],
        [
            "omega.",
            "VernacExtend",
            "32c6c865d255452c7e10c77111456d1981cede39"
        ],
        [
            "assert (Hx': (F2R (Float beta m e) <= x < F2R (Float beta (m + 1) e))%R).",
            "VernacExtend",
            "2b52309102057265f0f4550851ee3456dd65aad1"
        ],
        [
            "apply inbetween_float_bounds with (1 := H1).",
            "VernacExtend",
            "a6cb370b0138bc9e66920d2760fbf24ea3521b76"
        ],
        [
            "rewrite <- Hx in Hx'.",
            "VernacExtend",
            "75bda2446cf17e58803b2a64739538a0f4a8e607"
        ],
        [
            "split.",
            "VernacExtend",
            "55abc140132bd88981001ac656020469a8d503eb"
        ],
        [
            "apply F2R_le_0_reg with (1 := proj1 Hx').",
            "VernacExtend",
            "5c298eab05c51ed453c7a12ff9f6a7e514dedc45"
        ],
        [
            "apply F2R_gt_0_reg with (1 := proj2 Hx').",
            "VernacExtend",
            "7c97f814154c5ac11c38ae8cd540dd3862b4b0e7"
        ],
        [
            "rewrite Hm, <- Hx in H1 |- *.",
            "VernacExtend",
            "96aed416d40273fb33773185143a5ca84b985c85"
        ],
        [
            "clear -H1.",
            "VernacExtend",
            "a97560cbbe2cd31ef128e29a3cf251870622f56a"
        ],
        [
            "case H1.",
            "VernacExtend",
            "a1cc2c5b7545de9abe2fa54c801395a452f26f10"
        ],
        [
            "intros _.",
            "VernacExtend",
            "eb0e518a4896777a9a76b3ab973eaf7b4f1b52db"
        ],
        [
            "assert (exists e', truncate (Z0, e, loc_Exact) = (Z0, e', loc_Exact)).",
            "VernacExtend",
            "69ece580fc15df462468edf0a79b9dfe31cbff16"
        ],
        [
            "unfold truncate, truncate_aux.",
            "VernacExtend",
            "ec59d2a59c7e2cb413b5b698759c5c4ece8701fa"
        ],
        [
            "case Zlt_bool.",
            "VernacExtend",
            "78164fbad2d19950938826c1852753d600318c13"
        ],
        [
            "rewrite Zdiv_0_l, Zmod_0_l.",
            "VernacExtend",
            "b4b14a8d528009690e9f547c9f802c0d6368b9a0"
        ],
        [
            "eexists.",
            "VernacExtend",
            "bab8b1d1a3889cd604eb78d9fc8d0c299d5c3fd6"
        ],
        [
            "apply f_equal.",
            "VernacExtend",
            "ba856cbef3c8e84dcef77c91c8515b497874875b"
        ],
        [
            "unfold new_location.",
            "VernacExtend",
            "821e36c6b6e409ca19554197ab141033e831bb92"
        ],
        [
            "now case Zeven.",
            "VernacExtend",
            "6b366d495e56821e3354703b4d57ae6cb2c6ce3b"
        ],
        [
            "now eexists.",
            "VernacExtend",
            "fe67cd0e76f6da3c09ce5edddbb8c5252b73f0e5"
        ],
        [
            "destruct H as (e', H).",
            "VernacExtend",
            "a20d1217d9f2602ba62c79a12f7dce176806f42f"
        ],
        [
            "rewrite H.",
            "VernacExtend",
            "6192df8b89486a3ba89a78e26e0d70cae2dc94c2"
        ],
        [
            "split.",
            "VernacExtend",
            "55abc140132bd88981001ac656020469a8d503eb"
        ],
        [
            "constructor.",
            "VernacExtend",
            "3c77e6be855b5086df5e918bf2a0537e1010479a"
        ],
        [
            "apply sym_eq.",
            "VernacExtend",
            "f01eb728d9ceeac2915c66b52a7b50a0c452e949"
        ],
        [
            "apply F2R_0.",
            "VernacExtend",
            "196be1ac823d0297c8d480b5085663e7d015d281"
        ],
        [
            "right.",
            "VernacExtend",
            "27e417a3497755767e1a1d6ba87753ecddaee6b7"
        ],
        [
            "repeat split.",
            "VernacExtend",
            "7968f2448e3e51b1de42f5c433248f4a827b4da2"
        ],
        [
            "apply generic_format_0.",
            "VernacExtend",
            "dc3c4afb013f89f69b2f0e71216d8926d296b3bd"
        ],
        [
            "intros l' (H, _) _.",
            "VernacExtend",
            "89e80eb139dcc0f4cd6ba5869f2527f785793165"
        ],
        [
            "rewrite F2R_0 in H.",
            "VernacExtend",
            "093a1c050fa04f4a45ff04cb99d44a463462bbf8"
        ],
        [
            "elim Rlt_irrefl with (1 := H).",
            "VernacExtend",
            "85386f5de61deecc8e8755be7852e574a1c21c5f"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Section round_dir.",
            "VernacBeginSection",
            "811013f11cc67e5530d9ddb112872034584ec7f8"
        ],
        [
            "Variable rnd : R -> Z.",
            "VernacAssumption",
            "5bdfd3c40d2aa8ce2b985c638278827c00ad436e"
        ],
        [
            "Context { valid_rnd : Valid_rnd rnd }.",
            "VernacContext",
            "49759e314a3bb9ba66adea1eb824227c77e97e4c"
        ],
        [
            "Variable choice : Z -> location -> Z.",
            "VernacAssumption",
            "9d76780803f054af01a8189f0c5a6cc7c261dbc4"
        ],
        [
            "Hypothesis inbetween_int_valid : forall x m l, inbetween_int m x l -> rnd x = choice m l.",
            "VernacAssumption",
            "ce583ffca87537e282f73378f63ab9f792536c96"
        ],
        [
            "Theorem round_any_correct : forall x m e l, inbetween_float beta m e x l -> (e = canonic_exp beta fexp x \\/ (l = loc_Exact /\\ format x)) -> round beta fexp rnd x = F2R (Float beta (choice m l) e).",
            "VernacStartTheoremProof",
            "f1d2b5225ed840f44e5489d94410a636d3a44b82"
        ],
        [
            "Proof with auto with typeclass_instances.",
            "VernacProof",
            "c16343efcd37779057959eb30e1ff5afec0a83eb"
        ],
        [
            "intros x m e l Hin [He|(Hl,Hf)].",
            "VernacExtend",
            "30d548d396563e18f2bd06b236fb8f52a74a62d0"
        ],
        [
            "rewrite He in Hin |- *.",
            "VernacExtend",
            "9808a6d051ac0b03a1db39ebf60040835a0c9da6"
        ],
        [
            "apply inbetween_float_round with (2 := Hin).",
            "VernacExtend",
            "7c51ed2a8448dd4e35b8fbb948c5b02257ea630d"
        ],
        [
            "exact inbetween_int_valid.",
            "VernacExtend",
            "356fa2cdcc057a2e0eaf8b16c51f4e3aa9dc60b9"
        ],
        [
            "rewrite Hl in Hin.",
            "VernacExtend",
            "fd6b8ccfec86e6dee254b7eca288bd81b8943b40"
        ],
        [
            "inversion_clear Hin.",
            "VernacExtend",
            "1f4a44b64e3aa3ca19bc7ee531c4059d58b04d5b"
        ],
        [
            "rewrite Hl.",
            "VernacExtend",
            "bcb5a79f143a574cb4193cb68e496aca9c8a7cc3"
        ],
        [
            "replace (choice m loc_Exact) with m.",
            "VernacExtend",
            "a22777fd767ea449b2aec4167c709ea3f512c6f1"
        ],
        [
            "rewrite <- H.",
            "VernacExtend",
            "95b84807b4afb2ef79b7cc04a1c91a4e3a502e47"
        ],
        [
            "apply round_generic...",
            "VernacExtend",
            "44537c9bd6bbe98a69c9d38bb5bf2943db0475ff"
        ],
        [
            "rewrite <- (Zrnd_Z2R rnd m) at 1.",
            "VernacExtend",
            "31cd3e39608a6f813c5e6ede7e6ce4930bb86178"
        ],
        [
            "apply inbetween_int_valid.",
            "VernacExtend",
            "f955da7ac1722c99ffb9db9ec1b73e1d48c08aec"
        ],
        [
            "now constructor.",
            "VernacExtend",
            "e001978ec065ef0fd63cb804e72fb73890e93711"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Theorem round_trunc_any_correct : forall x m e l, (0 <= x)%R -> inbetween_float beta m e x l -> (e <= fexp (Zdigits beta m + e))%Z \\/ l = loc_Exact -> round beta fexp rnd x = let '(m', e', l') := truncate (m, e, l) in F2R (Float beta (choice m' l') e').",
            "VernacStartTheoremProof",
            "25756be91fdcdaf04fec906e82417d5512610107"
        ],
        [
            "intros x m e l Hx Hl He.",
            "VernacExtend",
            "f5f36abe2a3a3d7d2183ab0f890d18039b4d515e"
        ],
        [
            "generalize (truncate_correct x m e l Hx Hl He).",
            "VernacExtend",
            "575c7cfe8142b9f639a1beee5b56df42f822f1b9"
        ],
        [
            "destruct (truncate (m, e, l)) as ((m', e'), l').",
            "VernacExtend",
            "639009194a48ef2c700796db0bc06cf47f882cf4"
        ],
        [
            "intros (H1, H2).",
            "VernacExtend",
            "cbe4fae06561c7d97a3cceb65a0c2d56dc027b9e"
        ],
        [
            "now apply round_any_correct.",
            "VernacExtend",
            "487e1d18fb14ad4080c2c81054b76ff8fe32280e"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "End round_dir.",
            "VernacEndSegment",
            "234563db65bd8add105edf53b76973708435f91b"
        ],
        [
            "Section round_dir_sign.",
            "VernacBeginSection",
            "5287cbfac35519114195fdadad7814220897d60b"
        ],
        [
            "Variable rnd : R -> Z.",
            "VernacAssumption",
            "5bdfd3c40d2aa8ce2b985c638278827c00ad436e"
        ],
        [
            "Context { valid_rnd : Valid_rnd rnd }.",
            "VernacContext",
            "49759e314a3bb9ba66adea1eb824227c77e97e4c"
        ],
        [
            "Variable choice : bool -> Z -> location -> Z.",
            "VernacAssumption",
            "e115ad2d8e4f4bea7a8ee2d892f86ed05ef35620"
        ],
        [
            "Hypothesis inbetween_int_valid : forall x m l, inbetween_int m (Rabs x) l -> rnd x = cond_Zopp (Rlt_bool x 0) (choice (Rlt_bool x 0) m l).",
            "VernacAssumption",
            "098f7ee933b90d36098bc8536e2297e64cade733"
        ],
        [
            "Theorem round_sign_any_correct : forall x m e l, inbetween_float beta m e (Rabs x) l -> (e = canonic_exp beta fexp x \\/ (l = loc_Exact /\\ format x)) -> round beta fexp rnd x = F2R (Float beta (cond_Zopp (Rlt_bool x 0) (choice (Rlt_bool x 0) m l)) e).",
            "VernacStartTheoremProof",
            "e6d330b8e0dc2ecc8f141f4b49abfb66914beda0"
        ],
        [
            "Proof with auto with typeclass_instances.",
            "VernacProof",
            "c16343efcd37779057959eb30e1ff5afec0a83eb"
        ],
        [
            "intros x m e l Hin [He|(Hl,Hf)].",
            "VernacExtend",
            "30d548d396563e18f2bd06b236fb8f52a74a62d0"
        ],
        [
            "rewrite He in Hin |- *.",
            "VernacExtend",
            "9808a6d051ac0b03a1db39ebf60040835a0c9da6"
        ],
        [
            "apply inbetween_float_round_sign with (2 := Hin).",
            "VernacExtend",
            "fb00a505588eac49f50d921dd53df1594a2a6f4f"
        ],
        [
            "exact inbetween_int_valid.",
            "VernacExtend",
            "356fa2cdcc057a2e0eaf8b16c51f4e3aa9dc60b9"
        ],
        [
            "rewrite Hl in Hin.",
            "VernacExtend",
            "fd6b8ccfec86e6dee254b7eca288bd81b8943b40"
        ],
        [
            "inversion_clear Hin.",
            "VernacExtend",
            "1f4a44b64e3aa3ca19bc7ee531c4059d58b04d5b"
        ],
        [
            "rewrite Hl.",
            "VernacExtend",
            "bcb5a79f143a574cb4193cb68e496aca9c8a7cc3"
        ],
        [
            "replace (choice (Rlt_bool x 0) m loc_Exact) with m.",
            "VernacExtend",
            "42ac5208a72eac07cfaf700529288e0e491e1c30"
        ],
        [
            "unfold Rabs in H.",
            "VernacExtend",
            "4412519e8e61187bf26ab028718bac5ef23219d8"
        ],
        [
            "destruct (Rcase_abs x) as [Zx|Zx].",
            "VernacExtend",
            "5ee70dbdc1e53b3475698b5c6e31430998680730"
        ],
        [
            "rewrite Rlt_bool_true with (1 := Zx).",
            "VernacExtend",
            "c4e4559887746f632f9b9b95acae07de69dd848e"
        ],
        [
            "simpl.",
            "VernacExtend",
            "1b93169f4cf876d207c1fab22a2347202ab48d85"
        ],
        [
            "rewrite F2R_Zopp.",
            "VernacExtend",
            "14dc9704af59104fbc8331cc5f22daa96d394349"
        ],
        [
            "rewrite <- H, Ropp_involutive.",
            "VernacExtend",
            "5e0eccb18d88f125254f665e72c0015c3ce8ca8c"
        ],
        [
            "apply round_generic...",
            "VernacExtend",
            "44537c9bd6bbe98a69c9d38bb5bf2943db0475ff"
        ],
        [
            "rewrite Rlt_bool_false.",
            "VernacExtend",
            "4727213e40ddfbec66b0f056e1c646ac9eb48972"
        ],
        [
            "simpl.",
            "VernacExtend",
            "1b93169f4cf876d207c1fab22a2347202ab48d85"
        ],
        [
            "rewrite <- H.",
            "VernacExtend",
            "95b84807b4afb2ef79b7cc04a1c91a4e3a502e47"
        ],
        [
            "now apply round_generic.",
            "VernacExtend",
            "ed87bc4e0b2e711c9830fd986107bd67d78aaa57"
        ],
        [
            "now apply Rge_le.",
            "VernacExtend",
            "a9d375e1f97c153d1fcc15fabbf40ef83aa1533a"
        ],
        [
            "destruct (Rlt_bool_spec x 0) as [Zx|Zx].",
            "VernacExtend",
            "52a259ec3159a17816713d475c66fc9abfa0398f"
        ],
        [
            "apply Zopp_inj.",
            "VernacExtend",
            "5d9ae9e6d3aeadce3fa1b5e07f4510b9682bac23"
        ],
        [
            "change (- m = cond_Zopp true (choice true m loc_Exact))%Z.",
            "VernacExtend",
            "1a7de2399abc072e37de417b62f06d56802ea9d0"
        ],
        [
            "rewrite <- (Zrnd_Z2R rnd (-m)) at 1.",
            "VernacExtend",
            "bd5666ac78dd5167cba1ee187d766ceb8037d19d"
        ],
        [
            "assert (Z2R (-m) < 0)%R.",
            "VernacExtend",
            "ae89e7a74186648f61bbcc375a00ee4f18fadb19"
        ],
        [
            "rewrite Z2R_opp.",
            "VernacExtend",
            "f3d51769485a2c167744d3d3fd4fffa672e5e611"
        ],
        [
            "apply Ropp_lt_gt_0_contravar.",
            "VernacExtend",
            "401e9b21a248c965d5f4a327dee5aac60efa98c2"
        ],
        [
            "apply (Z2R_lt 0).",
            "VernacExtend",
            "5d86f7673f53b2461aeeacbee1ca5bf7e694182e"
        ],
        [
            "apply F2R_gt_0_reg with beta e.",
            "VernacExtend",
            "b4f819fb122ca46e1e15e3b008a39fc48dbcfc05"
        ],
        [
            "rewrite <- H.",
            "VernacExtend",
            "95b84807b4afb2ef79b7cc04a1c91a4e3a502e47"
        ],
        [
            "apply Rabs_pos_lt.",
            "VernacExtend",
            "e7789cb0a3c08fb3fbbda456620a8022b26229ce"
        ],
        [
            "now apply Rlt_not_eq.",
            "VernacExtend",
            "7c469637fc05542bf9c3c4fab85774b12e6b8f93"
        ],
        [
            "rewrite <- Rlt_bool_true with (1 := H0).",
            "VernacExtend",
            "d85855e2fde14d094d9a6ba31afbbe77d8597161"
        ],
        [
            "apply inbetween_int_valid.",
            "VernacExtend",
            "f955da7ac1722c99ffb9db9ec1b73e1d48c08aec"
        ],
        [
            "constructor.",
            "VernacExtend",
            "3c77e6be855b5086df5e918bf2a0537e1010479a"
        ],
        [
            "rewrite Rabs_left with (1 := H0).",
            "VernacExtend",
            "3951ed5fc29095ebcbd30bb6246e1c68c82f146d"
        ],
        [
            "rewrite Z2R_opp.",
            "VernacExtend",
            "f3d51769485a2c167744d3d3fd4fffa672e5e611"
        ],
        [
            "apply Ropp_involutive.",
            "VernacExtend",
            "5693ee789e165349a2c109e8f1a16d4ccb445cfd"
        ],
        [
            "change (m = cond_Zopp false (choice false m loc_Exact))%Z.",
            "VernacExtend",
            "8c5c36d3dd24e9dd0683897a19cd89611f54b66f"
        ],
        [
            "rewrite <- (Zrnd_Z2R rnd m) at 1.",
            "VernacExtend",
            "31cd3e39608a6f813c5e6ede7e6ce4930bb86178"
        ],
        [
            "assert (0 <= Z2R m)%R.",
            "VernacExtend",
            "503ba483d4403fd5c1a71ed60e1a904747ae09b8"
        ],
        [
            "apply (Z2R_le 0).",
            "VernacExtend",
            "792cf72fd89e326cb413fb5d3012c5ce541d5b09"
        ],
        [
            "apply F2R_ge_0_reg with beta e.",
            "VernacExtend",
            "65d79356342fd009711a7ef49c9ef84d6359f60c"
        ],
        [
            "rewrite <- H.",
            "VernacExtend",
            "95b84807b4afb2ef79b7cc04a1c91a4e3a502e47"
        ],
        [
            "apply Rabs_pos.",
            "VernacExtend",
            "8e57e214403458a4dc8dafc960971b86cf3b856d"
        ],
        [
            "rewrite <- Rlt_bool_false with (1 := H0).",
            "VernacExtend",
            "5cccfa45e88de1f69ef2f3a2dfdbf2281593c90e"
        ],
        [
            "apply inbetween_int_valid.",
            "VernacExtend",
            "f955da7ac1722c99ffb9db9ec1b73e1d48c08aec"
        ],
        [
            "constructor.",
            "VernacExtend",
            "3c77e6be855b5086df5e918bf2a0537e1010479a"
        ],
        [
            "now apply Rabs_pos_eq.",
            "VernacExtend",
            "75396bee7c94a0ff0662d73d206e806e73cbff2e"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Theorem round_trunc_sign_any_correct : forall x m e l, inbetween_float beta m e (Rabs x) l -> (e <= fexp (Zdigits beta m + e))%Z \\/ l = loc_Exact -> round beta fexp rnd x = let '(m', e', l') := truncate (m, e, l) in F2R (Float beta (cond_Zopp (Rlt_bool x 0) (choice (Rlt_bool x 0) m' l')) e').",
            "VernacStartTheoremProof",
            "650547d84dc93b3f4c005cbebb617af952e03d40"
        ],
        [
            "intros x m e l Hl He.",
            "VernacExtend",
            "2ac188e8b0e3c2f9de0e134a807a28db216ff8b2"
        ],
        [
            "generalize (truncate_correct (Rabs x) m e l (Rabs_pos _) Hl He).",
            "VernacExtend",
            "79bf49d41a3c5ffd61f01bf24fadc81113f4af6c"
        ],
        [
            "destruct (truncate (m, e, l)) as ((m', e'), l').",
            "VernacExtend",
            "639009194a48ef2c700796db0bc06cf47f882cf4"
        ],
        [
            "intros (H1, H2).",
            "VernacExtend",
            "cbe4fae06561c7d97a3cceb65a0c2d56dc027b9e"
        ],
        [
            "apply round_sign_any_correct.",
            "VernacExtend",
            "7e59b8465d7e050b75961b67ef26a6fe79b47a80"
        ],
        [
            "exact H1.",
            "VernacExtend",
            "c03ab82d1e411e1dcd211c59917a4946e039be00"
        ],
        [
            "destruct H2 as [H2|(H2,H3)].",
            "VernacExtend",
            "422176475320954383e7b0338b3fec6a8db1da50"
        ],
        [
            "left.",
            "VernacExtend",
            "06dad9fc5698018f3f1213205145fec906c612b1"
        ],
        [
            "now rewrite <- canonic_exp_abs.",
            "VernacExtend",
            "074bd78d08da722df16dc3c2ebaf541d1230551d"
        ],
        [
            "right.",
            "VernacExtend",
            "27e417a3497755767e1a1d6ba87753ecddaee6b7"
        ],
        [
            "split.",
            "VernacExtend",
            "55abc140132bd88981001ac656020469a8d503eb"
        ],
        [
            "exact H2.",
            "VernacExtend",
            "6cf1ccd4f667f962fca87ce20ad22b06c15c53ad"
        ],
        [
            "unfold Rabs in H3.",
            "VernacExtend",
            "068f8841d1a14dd4b29239e4105aa59ebcea9b23"
        ],
        [
            "destruct (Rcase_abs x) in H3.",
            "VernacExtend",
            "6a571c58aa9bdc9ac25db2e69866342075ed5937"
        ],
        [
            "rewrite <- Ropp_involutive.",
            "VernacExtend",
            "4ee9a59bfaf834def46b370d487ed40fd11fa074"
        ],
        [
            "now apply generic_format_opp.",
            "VernacExtend",
            "9854a3077e0909e22e2b3e762d2cc1450d4abf80"
        ],
        [
            "exact H3.",
            "VernacExtend",
            "8a748b9864755088f1affa06f3aea57ca19b1ab0"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "End round_dir_sign.",
            "VernacEndSegment",
            "2af060a894156c0de47760bd398e46647166ac2b"
        ],
        [
            "Definition round_DN_correct := round_any_correct _ (fun m _ => m) inbetween_int_DN.",
            "VernacDefinition",
            "1bce2f1a522e33f2b6440600758c06f441f53188"
        ],
        [
            "Definition round_trunc_DN_correct := round_trunc_any_correct _ (fun m _ => m) inbetween_int_DN.",
            "VernacDefinition",
            "b0e83e9de2e26743b77b5b68df64f9caab69d748"
        ],
        [
            "Definition round_sign_DN_correct := round_sign_any_correct _ (fun s m l => cond_incr (round_sign_DN s l) m) inbetween_int_DN_sign.",
            "VernacDefinition",
            "65b18121ad9a8a22ca322d1eaafb26160c2bb101"
        ],
        [
            "Definition round_trunc_sign_DN_correct := round_trunc_sign_any_correct _ (fun s m l => cond_incr (round_sign_DN s l) m) inbetween_int_DN_sign.",
            "VernacDefinition",
            "9402fd8af15e552d6b9adfa4b7c5737193323aaf"
        ],
        [
            "Definition round_UP_correct := round_any_correct _ (fun m l => cond_incr (round_UP l) m) inbetween_int_UP.",
            "VernacDefinition",
            "f59a064f2475afff3c892b3ea8ffec634973a663"
        ],
        [
            "Definition round_trunc_UP_correct := round_trunc_any_correct _ (fun m l => cond_incr (round_UP l) m) inbetween_int_UP.",
            "VernacDefinition",
            "0d3423dd66c17bbafe6b9c64daad8c7c29c3c261"
        ],
        [
            "Definition round_sign_UP_correct := round_sign_any_correct _ (fun s m l => cond_incr (round_sign_UP s l) m) inbetween_int_UP_sign.",
            "VernacDefinition",
            "6f3bba9ddfd56a9b6ce7d5f953e35c856c5478c9"
        ],
        [
            "Definition round_trunc_sign_UP_correct := round_trunc_sign_any_correct _ (fun s m l => cond_incr (round_sign_UP s l) m) inbetween_int_UP_sign.",
            "VernacDefinition",
            "ec77f4e79ef1bb39d8bd840b11c409a23b3e2324"
        ],
        [
            "Definition round_ZR_correct := round_any_correct _ (fun m l => cond_incr (round_ZR (Zlt_bool m 0) l) m) inbetween_int_ZR.",
            "VernacDefinition",
            "714e41d10117646f0c86a02531b60b7651baa940"
        ],
        [
            "Definition round_trunc_ZR_correct := round_trunc_any_correct _ (fun m l => cond_incr (round_ZR (Zlt_bool m 0) l) m) inbetween_int_ZR.",
            "VernacDefinition",
            "9949c555ec6cd5ccbae7fc2cbe8aad014400e6fc"
        ],
        [
            "Definition round_sign_ZR_correct := round_sign_any_correct _ (fun s m l => m) inbetween_int_ZR_sign.",
            "VernacDefinition",
            "5734518d2681d6dad9d90494e957c5e813c3bb29"
        ],
        [
            "Definition round_trunc_sign_ZR_correct := round_trunc_sign_any_correct _ (fun s m l => m) inbetween_int_ZR_sign.",
            "VernacDefinition",
            "78b8ac7fe18d65b108a059eb2fedc40de8be992d"
        ],
        [
            "Definition round_NE_correct := round_any_correct _ (fun m l => cond_incr (round_N (negb (Zeven m)) l) m) inbetween_int_NE.",
            "VernacDefinition",
            "290238c728559d30cd15d057666c458e4d23132a"
        ],
        [
            "Definition round_trunc_NE_correct := round_trunc_any_correct _ (fun m l => cond_incr (round_N (negb (Zeven m)) l) m) inbetween_int_NE.",
            "VernacDefinition",
            "a7d80ba903eb0b56feef783888b1df22ebccda4c"
        ],
        [
            "Definition round_sign_NE_correct := round_sign_any_correct _ (fun s m l => cond_incr (round_N (negb (Zeven m)) l) m) inbetween_int_NE_sign.",
            "VernacDefinition",
            "50689813a658f44bbdb6960f8e0483435e492c45"
        ],
        [
            "Definition round_trunc_sign_NE_correct := round_trunc_sign_any_correct _ (fun s m l => cond_incr (round_N (negb (Zeven m)) l) m) inbetween_int_NE_sign.",
            "VernacDefinition",
            "5e5fc3830af55bfa68631a665cfc49f43906bc8f"
        ],
        [
            "Definition round_NA_correct := round_any_correct _ (fun m l => cond_incr (round_N (Zle_bool 0 m) l) m) inbetween_int_NA.",
            "VernacDefinition",
            "31f88f9a405a78bdf3074f0db4c36a5043feee4e"
        ],
        [
            "Definition round_trunc_NA_correct := round_trunc_any_correct _ (fun m l => cond_incr (round_N (Zle_bool 0 m) l) m) inbetween_int_NA.",
            "VernacDefinition",
            "53046eba6cfabcf4b571cb201e6f2fa9ec41e82f"
        ],
        [
            "Definition round_sign_NA_correct := round_sign_any_correct _ (fun s m l => cond_incr (round_N true l) m) inbetween_int_NA_sign.",
            "VernacDefinition",
            "0de502677e40c42bcfbea7957d375576bd78bdb3"
        ],
        [
            "Definition round_trunc_sign_NA_correct := round_trunc_sign_any_correct _ (fun s m l => cond_incr (round_N true l) m) inbetween_int_NA_sign.",
            "VernacDefinition",
            "06d8cd3ed35a649a82471fedc1ab72413c130f48"
        ],
        [
            "End Fcalc_round_fexp.",
            "VernacEndSegment",
            "5c93749a00e74b121075073eee39afa916ebc853"
        ],
        [
            "Variable emin : Z.",
            "VernacAssumption",
            "93d29e2f683bb8419c3a0c82669b08e4df6d9c2c"
        ],
        [
            "Definition truncate_FIX t := let '(m, e, l) := t in let k := (emin - e)%Z in if Zlt_bool 0 k then let p := Zpower beta k in (Zdiv m p, (e + k)%Z, new_location p (Zmod m p) l) else t.",
            "VernacDefinition",
            "1b076e1a0a7c501bcce7e173bb76bcd55f357535"
        ],
        [
            "Theorem truncate_FIX_correct : forall x m e l, inbetween_float beta m e x l -> (e <= emin)%Z \\/ l = loc_Exact -> let '(m', e', l') := truncate_FIX (m, e, l) in inbetween_float beta m' e' x l' /\\ (e' = canonic_exp beta (FIX_exp emin) x \\/ (l' = loc_Exact /\\ generic_format beta (FIX_exp emin) x)).",
            "VernacStartTheoremProof",
            "72c98e49c27a1911e65623f8af2344033f04947f"
        ],
        [
            "intros x m e l H1 H2.",
            "VernacExtend",
            "0822c70a73395d72ea3874f4be8d8f046e2fee12"
        ],
        [
            "unfold truncate_FIX.",
            "VernacExtend",
            "7a51229109a63c402346e18dafeff3843c852f7c"
        ],
        [
            "set (k := (emin - e)%Z).",
            "VernacExtend",
            "390041bdfa1acf8f5931a4345e7efbccdd76b626"
        ],
        [
            "set (p := Zpower beta k).",
            "VernacExtend",
            "281fdb2af06a798846d99d5aeccc657c9ba680fc"
        ],
        [
            "unfold canonic_exp, FIX_exp.",
            "VernacExtend",
            "d161de1c2c52acb85c4f44e7a26f6f80266b9966"
        ],
        [
            "generalize (Zlt_cases 0 k).",
            "VernacExtend",
            "b1e1cbd2e3d7dd9672f0d44614ca25b6aaa325ea"
        ],
        [
            "case (Zlt_bool 0 k) ; intros Hk.",
            "VernacExtend",
            "c1ca29e1832d4ed86ad1c59a899c97b0752a5a07"
        ],
        [
            "split.",
            "VernacExtend",
            "55abc140132bd88981001ac656020469a8d503eb"
        ],
        [
            "now apply inbetween_float_new_location.",
            "VernacExtend",
            "eebd2c5a0f51a0d1dba3fbc02eb3e925713f67ce"
        ],
        [
            "clear H2.",
            "VernacExtend",
            "d86cdda4c02f9faf6d4c6694d967beddb27ce36a"
        ],
        [
            "left.",
            "VernacExtend",
            "06dad9fc5698018f3f1213205145fec906c612b1"
        ],
        [
            "unfold k.",
            "VernacExtend",
            "428aa83d31b248761e7a89000334fa4888cade6d"
        ],
        [
            "ring.",
            "VernacExtend",
            "baadd9fc4c175005af409bb466fcea9fab25b4e6"
        ],
        [
            "split.",
            "VernacExtend",
            "55abc140132bd88981001ac656020469a8d503eb"
        ],
        [
            "exact H1.",
            "VernacExtend",
            "c03ab82d1e411e1dcd211c59917a4946e039be00"
        ],
        [
            "unfold k in Hk.",
            "VernacExtend",
            "c721960b772f7c86ed5f89da3ed30840dd1c4666"
        ],
        [
            "destruct H2 as [H2|H2].",
            "VernacExtend",
            "6f1e78397f882b8d61d2633fdaef03e5fd2de71f"
        ],
        [
            "left.",
            "VernacExtend",
            "06dad9fc5698018f3f1213205145fec906c612b1"
        ],
        [
            "omega.",
            "VernacExtend",
            "32c6c865d255452c7e10c77111456d1981cede39"
        ],
        [
            "right.",
            "VernacExtend",
            "27e417a3497755767e1a1d6ba87753ecddaee6b7"
        ],
        [
            "split.",
            "VernacExtend",
            "55abc140132bd88981001ac656020469a8d503eb"
        ],
        [
            "exact H2.",
            "VernacExtend",
            "6cf1ccd4f667f962fca87ce20ad22b06c15c53ad"
        ],
        [
            "rewrite H2 in H1.",
            "VernacExtend",
            "dcb7a323484c05dcc42cd7ac9b61b0b20729d4c5"
        ],
        [
            "inversion_clear H1.",
            "VernacExtend",
            "1443921cbef97c67d0bd87bf517b302257ed5b28"
        ],
        [
            "rewrite H.",
            "VernacExtend",
            "6192df8b89486a3ba89a78e26e0d70cae2dc94c2"
        ],
        [
            "apply generic_format_F2R.",
            "VernacExtend",
            "3bbdbef5cecd8cd7887cb9d4ed37843b2dc31e75"
        ],
        [
            "unfold canonic_exp.",
            "VernacExtend",
            "993fc99c30cdbd2e74bd71e0fd5e49f000dffb04"
        ],
        [
            "omega.",
            "VernacExtend",
            "32c6c865d255452c7e10c77111456d1981cede39"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "End Fcalc_round.",
            "VernacEndSegment",
            "2706b9892ce651bc4b833744d1397758686d6852"
        ]
    ],
    "proofs": [
        {
            "name": "inbetween_float_round",
            "line_nb": 11,
            "steps": [
                {
                    "command": [
                        "intros rnd choice Hc x m l e Hl.",
                        "VernacExtend",
                        "4b21e99cf8d405ed76f3979d2fd70b8683c84754"
                    ]
                },
                {
                    "command": [
                        "unfold round, F2R.",
                        "VernacExtend",
                        "f7df1e666cb069edfb380cdf26ce3a214adbfa27"
                    ]
                },
                {
                    "command": [
                        "simpl.",
                        "VernacExtend",
                        "1b93169f4cf876d207c1fab22a2347202ab48d85"
                    ]
                },
                {
                    "command": [
                        "apply (f_equal (fun m => (Z2R m * bpow e)%R)).",
                        "VernacExtend",
                        "6c06884cf0ce2f5c947ae823afca86529ad322d0"
                    ]
                },
                {
                    "command": [
                        "apply Hc.",
                        "VernacExtend",
                        "b900f3304ba75d1bc8becba9c3e19edfabbb7700"
                    ]
                },
                {
                    "command": [
                        "apply inbetween_mult_reg with (bpow e).",
                        "VernacExtend",
                        "16da3d7c7a12b50867bd217980f49bbb9ae3aa2d"
                    ]
                },
                {
                    "command": [
                        "apply bpow_gt_0.",
                        "VernacExtend",
                        "51431cbce9a44d56b4b1857315ff3c6ca3c98e7f"
                    ]
                },
                {
                    "command": [
                        "now rewrite scaled_mantissa_mult_bpow.",
                        "VernacExtend",
                        "fab99b6471eeaf42de834b44e57b617fc8d6582a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "inbetween_float_round_sign",
            "line_nb": 22,
            "steps": [
                {
                    "command": [
                        "intros rnd choice Hc x m l e Hx.",
                        "VernacExtend",
                        "602ac6e3f916e434c32e8d2d98396b0ade953f9f"
                    ]
                },
                {
                    "command": [
                        "apply (f_equal (fun m => (Z2R m * bpow e)%R)).",
                        "VernacExtend",
                        "6c06884cf0ce2f5c947ae823afca86529ad322d0"
                    ]
                },
                {
                    "command": [
                        "simpl.",
                        "VernacExtend",
                        "1b93169f4cf876d207c1fab22a2347202ab48d85"
                    ]
                },
                {
                    "command": [
                        "replace (Rlt_bool x 0) with (Rlt_bool (scaled_mantissa beta fexp x) 0).",
                        "VernacExtend",
                        "398bb38b73cd7b65e1ff2d929000b1d1313e8c5a"
                    ]
                },
                {
                    "command": [
                        "apply Hc.",
                        "VernacExtend",
                        "b900f3304ba75d1bc8becba9c3e19edfabbb7700"
                    ]
                },
                {
                    "command": [
                        "apply inbetween_mult_reg with (bpow e).",
                        "VernacExtend",
                        "16da3d7c7a12b50867bd217980f49bbb9ae3aa2d"
                    ]
                },
                {
                    "command": [
                        "apply bpow_gt_0.",
                        "VernacExtend",
                        "51431cbce9a44d56b4b1857315ff3c6ca3c98e7f"
                    ]
                },
                {
                    "command": [
                        "rewrite <- (Rabs_right (bpow e)) at 3.",
                        "VernacExtend",
                        "203fa2690e0caa939ff44ea254794ba70db4962c"
                    ]
                },
                {
                    "command": [
                        "rewrite <- Rabs_mult.",
                        "VernacExtend",
                        "ffb7829eab0f0e304148d87efd020e97968f73cc"
                    ]
                },
                {
                    "command": [
                        "now rewrite scaled_mantissa_mult_bpow.",
                        "VernacExtend",
                        "fab99b6471eeaf42de834b44e57b617fc8d6582a"
                    ]
                },
                {
                    "command": [
                        "apply Rle_ge.",
                        "VernacExtend",
                        "a688ebddf90443508c57e22ba16f7fa0da42ef9a"
                    ]
                },
                {
                    "command": [
                        "apply bpow_ge_0.",
                        "VernacExtend",
                        "21ebde0be0a631dfd60f8ca27e963cec55b52605"
                    ]
                },
                {
                    "command": [
                        "destruct (Rlt_bool_spec x 0) as [Zx|Zx] ; simpl.",
                        "VernacExtend",
                        "896fdd1698f7280edbb4865f9ab125d4cd44a1a7"
                    ]
                },
                {
                    "command": [
                        "apply Rlt_bool_true.",
                        "VernacExtend",
                        "2dd8acd5318209d40288e95b2cc6a1cd92d8d107"
                    ]
                },
                {
                    "command": [
                        "rewrite <- (Rmult_0_l (bpow (-e))).",
                        "VernacExtend",
                        "1b2c307738549f64cb09091dd7bf8a09b681016c"
                    ]
                },
                {
                    "command": [
                        "apply Rmult_lt_compat_r with (2 := Zx).",
                        "VernacExtend",
                        "30129d7b1d8d6879bfab44dd3e91cc939f45ddae"
                    ]
                },
                {
                    "command": [
                        "apply bpow_gt_0.",
                        "VernacExtend",
                        "51431cbce9a44d56b4b1857315ff3c6ca3c98e7f"
                    ]
                },
                {
                    "command": [
                        "apply Rlt_bool_false.",
                        "VernacExtend",
                        "115f3bf88cb7153f51757af6b09533b60d89f56b"
                    ]
                },
                {
                    "command": [
                        "apply Rmult_le_pos with (1 := Zx).",
                        "VernacExtend",
                        "cc39bffb6efed3b8f994b90322ab25f796dc3f6a"
                    ]
                },
                {
                    "command": [
                        "apply bpow_ge_0.",
                        "VernacExtend",
                        "21ebde0be0a631dfd60f8ca27e963cec55b52605"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "inbetween_int_DN",
            "line_nb": 44,
            "steps": [
                {
                    "command": [
                        "intros x m l Hl.",
                        "VernacExtend",
                        "acc9d2a80c4c7a3e60af564667e1347459334b45"
                    ]
                },
                {
                    "command": [
                        "refine (Zfloor_imp m _ _).",
                        "VernacExtend",
                        "3b876de430e6902ad46c3f0d09ad0fc04b79caa3"
                    ]
                },
                {
                    "command": [
                        "apply inbetween_bounds with (2 := Hl).",
                        "VernacExtend",
                        "82fc28882302a948feb0ec46f3e35bf7462efb1a"
                    ]
                },
                {
                    "command": [
                        "apply Z2R_lt.",
                        "VernacExtend",
                        "20648688afbdacefe3b6070755cbe6f263ce5093"
                    ]
                },
                {
                    "command": [
                        "apply Zlt_succ.",
                        "VernacExtend",
                        "f4cf5b932d8c774be510b7802fbeea627fe15261"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "inbetween_float_DN",
            "line_nb": 51,
            "steps": [
                {
                    "command": [
                        "apply inbetween_float_round with (choice := fun m l => m).",
                        "VernacExtend",
                        "91110cd591bb0bfcd929acea6b48aeb694efd8c0"
                    ]
                },
                {
                    "command": [
                        "exact inbetween_int_DN.",
                        "VernacExtend",
                        "41d1fc7da170ff5e1b2fcfead643e7a045ca7ff2"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "inbetween_int_DN_sign",
            "line_nb": 56,
            "steps": [
                {
                    "command": [
                        "intros x m l Hl.",
                        "VernacExtend",
                        "acc9d2a80c4c7a3e60af564667e1347459334b45"
                    ]
                },
                {
                    "command": [
                        "unfold Rabs in Hl.",
                        "VernacExtend",
                        "a5e4e3c6e70bad993425f04d449c442b26d50959"
                    ]
                },
                {
                    "command": [
                        "destruct (Rcase_abs x) as [Zx|Zx] .",
                        "VernacExtend",
                        "5ee70dbdc1e53b3475698b5c6e31430998680730"
                    ]
                },
                {
                    "command": [
                        "rewrite Rlt_bool_true with (1 := Zx).",
                        "VernacExtend",
                        "c4e4559887746f632f9b9b95acae07de69dd848e"
                    ]
                },
                {
                    "command": [
                        "inversion_clear Hl ; simpl.",
                        "VernacExtend",
                        "63566390752ef9b7986f4b8ea68a54246e14d02d"
                    ]
                },
                {
                    "command": [
                        "rewrite <- (Ropp_involutive x).",
                        "VernacExtend",
                        "1908e4ee868b5f81dd7393a2a516c6e4756cc5e4"
                    ]
                },
                {
                    "command": [
                        "rewrite H, <- Z2R_opp.",
                        "VernacExtend",
                        "362c9abc359140f6949d9b15756339895d9bc0de"
                    ]
                },
                {
                    "command": [
                        "apply Zfloor_Z2R.",
                        "VernacExtend",
                        "58df2bc8985dad2ec76c534580062785230749a3"
                    ]
                },
                {
                    "command": [
                        "apply Zfloor_imp.",
                        "VernacExtend",
                        "9278ce7c32c530a2f8be72314e979fc619d4a028"
                    ]
                },
                {
                    "command": [
                        "split.",
                        "VernacExtend",
                        "55abc140132bd88981001ac656020469a8d503eb"
                    ]
                },
                {
                    "command": [
                        "apply Rlt_le.",
                        "VernacExtend",
                        "cdc4280500779f23bae235b94c24a4b2ea2921fe"
                    ]
                },
                {
                    "command": [
                        "rewrite Z2R_opp.",
                        "VernacExtend",
                        "f3d51769485a2c167744d3d3fd4fffa672e5e611"
                    ]
                },
                {
                    "command": [
                        "apply Ropp_lt_cancel.",
                        "VernacExtend",
                        "9b0daa4a36df0c9a309eebcfa294d3bffe6b52b2"
                    ]
                },
                {
                    "command": [
                        "now rewrite Ropp_involutive.",
                        "VernacExtend",
                        "42ddda074db05b6b1d1874b4fe3a510ba0168ea0"
                    ]
                },
                {
                    "command": [
                        "ring_simplify (- (m + 1) + 1)%Z.",
                        "VernacExtend",
                        "dc92fb3773c9c3f5bf15f233373c610c5ea4db0a"
                    ]
                },
                {
                    "command": [
                        "rewrite Z2R_opp.",
                        "VernacExtend",
                        "f3d51769485a2c167744d3d3fd4fffa672e5e611"
                    ]
                },
                {
                    "command": [
                        "apply Ropp_lt_cancel.",
                        "VernacExtend",
                        "9b0daa4a36df0c9a309eebcfa294d3bffe6b52b2"
                    ]
                },
                {
                    "command": [
                        "now rewrite Ropp_involutive.",
                        "VernacExtend",
                        "42ddda074db05b6b1d1874b4fe3a510ba0168ea0"
                    ]
                },
                {
                    "command": [
                        "rewrite Rlt_bool_false.",
                        "VernacExtend",
                        "4727213e40ddfbec66b0f056e1c646ac9eb48972"
                    ]
                },
                {
                    "command": [
                        "inversion_clear Hl ; simpl.",
                        "VernacExtend",
                        "63566390752ef9b7986f4b8ea68a54246e14d02d"
                    ]
                },
                {
                    "command": [
                        "rewrite H.",
                        "VernacExtend",
                        "6192df8b89486a3ba89a78e26e0d70cae2dc94c2"
                    ]
                },
                {
                    "command": [
                        "apply Zfloor_Z2R.",
                        "VernacExtend",
                        "58df2bc8985dad2ec76c534580062785230749a3"
                    ]
                },
                {
                    "command": [
                        "apply Zfloor_imp.",
                        "VernacExtend",
                        "9278ce7c32c530a2f8be72314e979fc619d4a028"
                    ]
                },
                {
                    "command": [
                        "split.",
                        "VernacExtend",
                        "55abc140132bd88981001ac656020469a8d503eb"
                    ]
                },
                {
                    "command": [
                        "now apply Rlt_le.",
                        "VernacExtend",
                        "3fa67bbd472123a7abc1f777aecc643fb3862e46"
                    ]
                },
                {
                    "command": [
                        "apply H.",
                        "VernacExtend",
                        "4b47b71ad0f800d57cbdc591d68949e07decb540"
                    ]
                },
                {
                    "command": [
                        "now apply Rge_le.",
                        "VernacExtend",
                        "a9d375e1f97c153d1fcc15fabbf40ef83aa1533a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "inbetween_float_DN_sign",
            "line_nb": 85,
            "steps": [
                {
                    "command": [
                        "apply inbetween_float_round_sign with (choice := fun s m l => cond_incr (round_sign_DN s l) m).",
                        "VernacExtend",
                        "2e2ad40f0c29a96aa7e3f519b6020680854480aa"
                    ]
                },
                {
                    "command": [
                        "exact inbetween_int_DN_sign.",
                        "VernacExtend",
                        "2ca5d31426e90ded6bfe15f3c4912c6b18401fc3"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "inbetween_int_UP",
            "line_nb": 90,
            "steps": [
                {
                    "command": [
                        "intros x m l Hl.",
                        "VernacExtend",
                        "acc9d2a80c4c7a3e60af564667e1347459334b45"
                    ]
                },
                {
                    "command": [
                        "assert (Hl': l = loc_Exact \\/ (l <> loc_Exact /\\ round_UP l = true)).",
                        "VernacExtend",
                        "3f8da4b6cc8102caec41de9591af4cee5611ba76"
                    ]
                },
                {
                    "command": [
                        "case l ; try (now left) ; now right ; split.",
                        "VernacExtend",
                        "eabc2af66479725584a6716b5d8e6aa60f1c91c2"
                    ]
                },
                {
                    "command": [
                        "destruct Hl' as [Hl'|(Hl1, Hl2)].",
                        "VernacExtend",
                        "654f2870c70e30174410f436379dbdba26651d5d"
                    ]
                },
                {
                    "command": [
                        "rewrite Hl'.",
                        "VernacExtend",
                        "b5bce282838e922883979e6e66c0f0c98ebfd5c3"
                    ]
                },
                {
                    "command": [
                        "destruct Hl ; try easy.",
                        "VernacExtend",
                        "7ae9de7ca90851ebddbd945d167702157ccc6354"
                    ]
                },
                {
                    "command": [
                        "rewrite H.",
                        "VernacExtend",
                        "6192df8b89486a3ba89a78e26e0d70cae2dc94c2"
                    ]
                },
                {
                    "command": [
                        "exact (Zceil_Z2R _).",
                        "VernacExtend",
                        "5bf112d38fc03325999ea5f0134b5afe7062ce64"
                    ]
                },
                {
                    "command": [
                        "rewrite Hl2.",
                        "VernacExtend",
                        "0d96d2041101f35d95f18d72a2a3450630d59d8a"
                    ]
                },
                {
                    "command": [
                        "simpl.",
                        "VernacExtend",
                        "1b93169f4cf876d207c1fab22a2347202ab48d85"
                    ]
                },
                {
                    "command": [
                        "apply Zceil_imp.",
                        "VernacExtend",
                        "c9c91122777c8963f3fcab430c53aa15ef0b2dba"
                    ]
                },
                {
                    "command": [
                        "ring_simplify (m + 1 - 1)%Z.",
                        "VernacExtend",
                        "47444d71b31222daedf2990c9d072665f0f0163a"
                    ]
                },
                {
                    "command": [
                        "refine (let H := _ in conj (proj1 H) (Rlt_le _ _ (proj2 H))).",
                        "VernacExtend",
                        "d531ed838df6c170cbec0087a62398ced5d12ec7"
                    ]
                },
                {
                    "command": [
                        "apply inbetween_bounds_not_Eq with (2 := Hl1) (1 := Hl).",
                        "VernacExtend",
                        "0de1151d9bfc351aff70719dd97cc7477465e86c"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "inbetween_float_UP",
            "line_nb": 106,
            "steps": [
                {
                    "command": [
                        "apply inbetween_float_round with (choice := fun m l => cond_incr (round_UP l) m).",
                        "VernacExtend",
                        "e65552deb4f5d297bef8f11bb689e5e23bbfc030"
                    ]
                },
                {
                    "command": [
                        "exact inbetween_int_UP.",
                        "VernacExtend",
                        "6a68375ee1128aca22e986cbb3ff67da1fe260b8"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "inbetween_int_UP_sign",
            "line_nb": 111,
            "steps": [
                {
                    "command": [
                        "intros x m l Hl.",
                        "VernacExtend",
                        "acc9d2a80c4c7a3e60af564667e1347459334b45"
                    ]
                },
                {
                    "command": [
                        "unfold Rabs in Hl.",
                        "VernacExtend",
                        "a5e4e3c6e70bad993425f04d449c442b26d50959"
                    ]
                },
                {
                    "command": [
                        "destruct (Rcase_abs x) as [Zx|Zx] .",
                        "VernacExtend",
                        "5ee70dbdc1e53b3475698b5c6e31430998680730"
                    ]
                },
                {
                    "command": [
                        "rewrite Rlt_bool_true with (1 := Zx).",
                        "VernacExtend",
                        "c4e4559887746f632f9b9b95acae07de69dd848e"
                    ]
                },
                {
                    "command": [
                        "simpl.",
                        "VernacExtend",
                        "1b93169f4cf876d207c1fab22a2347202ab48d85"
                    ]
                },
                {
                    "command": [
                        "unfold Zceil.",
                        "VernacExtend",
                        "f8d0a58a84f92c1de4ab8daa30b020e932099600"
                    ]
                },
                {
                    "command": [
                        "apply f_equal.",
                        "VernacExtend",
                        "ba856cbef3c8e84dcef77c91c8515b497874875b"
                    ]
                },
                {
                    "command": [
                        "inversion_clear Hl ; simpl.",
                        "VernacExtend",
                        "63566390752ef9b7986f4b8ea68a54246e14d02d"
                    ]
                },
                {
                    "command": [
                        "rewrite H.",
                        "VernacExtend",
                        "6192df8b89486a3ba89a78e26e0d70cae2dc94c2"
                    ]
                },
                {
                    "command": [
                        "apply Zfloor_Z2R.",
                        "VernacExtend",
                        "58df2bc8985dad2ec76c534580062785230749a3"
                    ]
                },
                {
                    "command": [
                        "apply Zfloor_imp.",
                        "VernacExtend",
                        "9278ce7c32c530a2f8be72314e979fc619d4a028"
                    ]
                },
                {
                    "command": [
                        "split.",
                        "VernacExtend",
                        "55abc140132bd88981001ac656020469a8d503eb"
                    ]
                },
                {
                    "command": [
                        "now apply Rlt_le.",
                        "VernacExtend",
                        "3fa67bbd472123a7abc1f777aecc643fb3862e46"
                    ]
                },
                {
                    "command": [
                        "apply H.",
                        "VernacExtend",
                        "4b47b71ad0f800d57cbdc591d68949e07decb540"
                    ]
                },
                {
                    "command": [
                        "rewrite Rlt_bool_false.",
                        "VernacExtend",
                        "4727213e40ddfbec66b0f056e1c646ac9eb48972"
                    ]
                },
                {
                    "command": [
                        "simpl.",
                        "VernacExtend",
                        "1b93169f4cf876d207c1fab22a2347202ab48d85"
                    ]
                },
                {
                    "command": [
                        "inversion_clear Hl ; simpl.",
                        "VernacExtend",
                        "63566390752ef9b7986f4b8ea68a54246e14d02d"
                    ]
                },
                {
                    "command": [
                        "rewrite H.",
                        "VernacExtend",
                        "6192df8b89486a3ba89a78e26e0d70cae2dc94c2"
                    ]
                },
                {
                    "command": [
                        "apply Zceil_Z2R.",
                        "VernacExtend",
                        "c8141d4497dc8abfa72f7f0897c24c389f131f72"
                    ]
                },
                {
                    "command": [
                        "apply Zceil_imp.",
                        "VernacExtend",
                        "c9c91122777c8963f3fcab430c53aa15ef0b2dba"
                    ]
                },
                {
                    "command": [
                        "split.",
                        "VernacExtend",
                        "55abc140132bd88981001ac656020469a8d503eb"
                    ]
                },
                {
                    "command": [
                        "change (m + 1 - 1)%Z with (Zpred (Zsucc m)).",
                        "VernacExtend",
                        "edc289110dd66569a26e18cee07ca6e7d6ff0add"
                    ]
                },
                {
                    "command": [
                        "now rewrite <- Zpred_succ.",
                        "VernacExtend",
                        "8900533feefe93c2bf38da3e526c06f6edc5255a"
                    ]
                },
                {
                    "command": [
                        "now apply Rlt_le.",
                        "VernacExtend",
                        "3fa67bbd472123a7abc1f777aecc643fb3862e46"
                    ]
                },
                {
                    "command": [
                        "now apply Rge_le.",
                        "VernacExtend",
                        "a9d375e1f97c153d1fcc15fabbf40ef83aa1533a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "inbetween_float_UP_sign",
            "line_nb": 138,
            "steps": [
                {
                    "command": [
                        "apply inbetween_float_round_sign with (choice := fun s m l => cond_incr (round_sign_UP s l) m).",
                        "VernacExtend",
                        "aa1ca4c3f9ca9a909c69409d85cddaae9e39a2b9"
                    ]
                },
                {
                    "command": [
                        "exact inbetween_int_UP_sign.",
                        "VernacExtend",
                        "a460c5b2dddd11dc95931d350552f9a81d94bb40"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "inbetween_float_ZR",
            "line_nb": 169,
            "steps": [
                {
                    "command": [
                        "apply inbetween_float_round with (choice := fun m l => cond_incr (round_ZR (Zlt_bool m 0) l) m).",
                        "VernacExtend",
                        "8f552ad584316e213b22ceff5b8e89b549e22d36"
                    ]
                },
                {
                    "command": [
                        "exact inbetween_int_ZR.",
                        "VernacExtend",
                        "825086ef28710e56957f5705eb73392461d2ab85"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "inbetween_int_ZR_sign",
            "line_nb": 173,
            "steps": [
                {
                    "command": [
                        "intros x m l Hl.",
                        "VernacExtend",
                        "acc9d2a80c4c7a3e60af564667e1347459334b45"
                    ]
                },
                {
                    "command": [
                        "simpl.",
                        "VernacExtend",
                        "1b93169f4cf876d207c1fab22a2347202ab48d85"
                    ]
                },
                {
                    "command": [
                        "unfold Ztrunc.",
                        "VernacExtend",
                        "70f2f727e6735746b4eaaea98f3e25177304bf89"
                    ]
                },
                {
                    "command": [
                        "destruct (Rlt_le_dec x 0) as [Zx|Zx].",
                        "VernacExtend",
                        "0e19443197c1374589dda6f989e264314932fde1"
                    ]
                },
                {
                    "command": [
                        "rewrite Rlt_bool_true with (1 := Zx).",
                        "VernacExtend",
                        "c4e4559887746f632f9b9b95acae07de69dd848e"
                    ]
                },
                {
                    "command": [
                        "simpl.",
                        "VernacExtend",
                        "1b93169f4cf876d207c1fab22a2347202ab48d85"
                    ]
                },
                {
                    "command": [
                        "unfold Zceil.",
                        "VernacExtend",
                        "f8d0a58a84f92c1de4ab8daa30b020e932099600"
                    ]
                },
                {
                    "command": [
                        "apply f_equal.",
                        "VernacExtend",
                        "ba856cbef3c8e84dcef77c91c8515b497874875b"
                    ]
                },
                {
                    "command": [
                        "apply Zfloor_imp.",
                        "VernacExtend",
                        "9278ce7c32c530a2f8be72314e979fc619d4a028"
                    ]
                },
                {
                    "command": [
                        "rewrite <- Rabs_left with (1 := Zx).",
                        "VernacExtend",
                        "8f3d35c91b38285e1e5f6080f5d38db8c4f25143"
                    ]
                },
                {
                    "command": [
                        "apply inbetween_bounds with (2 := Hl).",
                        "VernacExtend",
                        "82fc28882302a948feb0ec46f3e35bf7462efb1a"
                    ]
                },
                {
                    "command": [
                        "apply Z2R_lt.",
                        "VernacExtend",
                        "20648688afbdacefe3b6070755cbe6f263ce5093"
                    ]
                },
                {
                    "command": [
                        "apply Zlt_succ.",
                        "VernacExtend",
                        "f4cf5b932d8c774be510b7802fbeea627fe15261"
                    ]
                },
                {
                    "command": [
                        "rewrite Rlt_bool_false with (1 := Zx).",
                        "VernacExtend",
                        "41847988514aefac8262779ccf05127358148ad7"
                    ]
                },
                {
                    "command": [
                        "simpl.",
                        "VernacExtend",
                        "1b93169f4cf876d207c1fab22a2347202ab48d85"
                    ]
                },
                {
                    "command": [
                        "apply Zfloor_imp.",
                        "VernacExtend",
                        "9278ce7c32c530a2f8be72314e979fc619d4a028"
                    ]
                },
                {
                    "command": [
                        "rewrite <- Rabs_pos_eq with (1 := Zx).",
                        "VernacExtend",
                        "907c360c70c10fe0d84a7cb596890f4202077a34"
                    ]
                },
                {
                    "command": [
                        "apply inbetween_bounds with (2 := Hl).",
                        "VernacExtend",
                        "82fc28882302a948feb0ec46f3e35bf7462efb1a"
                    ]
                },
                {
                    "command": [
                        "apply Z2R_lt.",
                        "VernacExtend",
                        "20648688afbdacefe3b6070755cbe6f263ce5093"
                    ]
                },
                {
                    "command": [
                        "apply Zlt_succ.",
                        "VernacExtend",
                        "f4cf5b932d8c774be510b7802fbeea627fe15261"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "inbetween_float_ZR_sign",
            "line_nb": 195,
            "steps": [
                {
                    "command": [
                        "apply inbetween_float_round_sign with (choice := fun s m l => m).",
                        "VernacExtend",
                        "cc1c4990b10253f0a754b1f5893bcfb0b461d339"
                    ]
                },
                {
                    "command": [
                        "exact inbetween_int_ZR_sign.",
                        "VernacExtend",
                        "f5027bcf5f75a568aec57d38beb1d96d43ac8837"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "inbetween_int_NE",
            "line_nb": 278,
            "steps": [
                {
                    "command": [
                        "intros x m l Hl.",
                        "VernacExtend",
                        "acc9d2a80c4c7a3e60af564667e1347459334b45"
                    ]
                },
                {
                    "command": [
                        "now apply inbetween_int_N with (choice := fun x => negb (Zeven x)).",
                        "VernacExtend",
                        "e54545a4506574254d1e4e0ba66a7863c24251ef"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "inbetween_float_NE",
            "line_nb": 282,
            "steps": [
                {
                    "command": [
                        "apply inbetween_float_round with (choice := fun m l => cond_incr (round_N (negb (Zeven m)) l) m).",
                        "VernacExtend",
                        "20da11129147321a49e193cad1dcfbfa9736a06e"
                    ]
                },
                {
                    "command": [
                        "exact inbetween_int_NE.",
                        "VernacExtend",
                        "d59583318b9300a0cec0f3de153320742d5442f2"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "inbetween_float_NE_sign",
            "line_nb": 296,
            "steps": [
                {
                    "command": [
                        "apply inbetween_float_round_sign with (choice := fun s m l => cond_incr (round_N (negb (Zeven m)) l) m).",
                        "VernacExtend",
                        "f794a959e75a1d6d9993e39f11409dfbecce1fc2"
                    ]
                },
                {
                    "command": [
                        "exact inbetween_int_NE_sign.",
                        "VernacExtend",
                        "720e46ead57ee8c64b37e173c24236c313ccb968"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "inbetween_int_NA",
            "line_nb": 300,
            "steps": [
                {
                    "command": [
                        "intros x m l Hl.",
                        "VernacExtend",
                        "acc9d2a80c4c7a3e60af564667e1347459334b45"
                    ]
                },
                {
                    "command": [
                        "now apply inbetween_int_N with (choice := fun x => Zle_bool 0 x).",
                        "VernacExtend",
                        "262a57abefd05ee9015262853ab632bbcd87fac7"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "inbetween_float_NA",
            "line_nb": 304,
            "steps": [
                {
                    "command": [
                        "apply inbetween_float_round with (choice := fun m l => cond_incr (round_N (Zle_bool 0 m) l) m).",
                        "VernacExtend",
                        "37d46c5977a2fd7fe7853926428667c92dffc7bf"
                    ]
                },
                {
                    "command": [
                        "exact inbetween_int_NA.",
                        "VernacExtend",
                        "3866a61a7097aa54a40d5e189ce6db7423b01749"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "truncate_aux_comp",
            "line_nb": 327,
            "steps": [
                {
                    "command": [
                        "intros ((m,e),l) k1 k2 Hk1 Hk2.",
                        "VernacExtend",
                        "c0fd85692140ecd276846d782ad0683ee3a40e80"
                    ]
                },
                {
                    "command": [
                        "unfold truncate_aux.",
                        "VernacExtend",
                        "55639e3b751e2ddb97aa3376d85eeb981ac54786"
                    ]
                },
                {
                    "command": [
                        "destruct (inbetween_float_ex beta m e l) as (x,Hx).",
                        "VernacExtend",
                        "c64914c70ec46cef3c2b54f4da51c3a6d50150a7"
                    ]
                },
                {
                    "command": [
                        "assert (B1 := inbetween_float_new_location _ _ _ _ _ _ Hk1 Hx).",
                        "VernacExtend",
                        "8c731fddfcfdaa620fc4818ed4abd8fac9489713"
                    ]
                },
                {
                    "command": [
                        "assert (Hk3: (0 < k1 + k2)%Z).",
                        "VernacExtend",
                        "db50a8a6a0543ec1402aa99b20db48e683de2d69"
                    ]
                },
                {
                    "command": [
                        "change Z0 with (0 + 0)%Z.",
                        "VernacExtend",
                        "714e860659556d4c74b027a23d765568262bbe3d"
                    ]
                },
                {
                    "command": [
                        "now apply Zplus_lt_compat.",
                        "VernacExtend",
                        "a187084a363f7ee15c099544429511949fa26673"
                    ]
                },
                {
                    "command": [
                        "assert (B3 := inbetween_float_new_location _ _ _ _ _ _ Hk3 Hx).",
                        "VernacExtend",
                        "3174b6ce75453e294af7bc4a3e1d01b8844cd99d"
                    ]
                },
                {
                    "command": [
                        "assert (B2 := inbetween_float_new_location _ _ _ _ _ _ Hk2 B1).",
                        "VernacExtend",
                        "b25f1bb9ce88e6356f63ded70d793158620cee70"
                    ]
                },
                {
                    "command": [
                        "rewrite Zplus_assoc in B3.",
                        "VernacExtend",
                        "5ca093a22b6596c2673abefd049b667ae816dce4"
                    ]
                },
                {
                    "command": [
                        "destruct (inbetween_float_unique _ _ _ _ _ _ _ B2 B3).",
                        "VernacExtend",
                        "30bbed1bc54e54418fc3acbe72543cafdc449519"
                    ]
                },
                {
                    "command": [
                        "now rewrite H, H0, Zplus_assoc.",
                        "VernacExtend",
                        "f482aaa2b741bfc3e5dba296fe4cc1e03bc6fdf1"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "truncate_0",
            "line_nb": 342,
            "steps": [
                {
                    "command": [
                        "intros e l.",
                        "VernacExtend",
                        "ca22d5828a114e3919415f54ddb167cbdd916fc1"
                    ]
                },
                {
                    "command": [
                        "unfold truncate.",
                        "VernacExtend",
                        "e239555bc9fc631f0b28093ba90c3ba6a6565581"
                    ]
                },
                {
                    "command": [
                        "case Zlt_bool.",
                        "VernacExtend",
                        "78164fbad2d19950938826c1852753d600318c13"
                    ]
                },
                {
                    "command": [
                        "simpl.",
                        "VernacExtend",
                        "1b93169f4cf876d207c1fab22a2347202ab48d85"
                    ]
                },
                {
                    "command": [
                        "apply Zdiv_0_l.",
                        "VernacExtend",
                        "3efecd8b766a425267f55d144845d4556c882659"
                    ]
                },
                {
                    "command": [
                        "apply refl_equal.",
                        "VernacExtend",
                        "37304a26ede0d38318cdc32c46bfa45cfbc5e7db"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "truncate_correct_format",
            "line_nb": 386,
            "steps": [
                {
                    "command": [
                        "intros m e Hm x Fx He.",
                        "VernacExtend",
                        "1cfadbf26327179f82495783b6faa0237ac579ee"
                    ]
                },
                {
                    "command": [
                        "assert (Hc: canonic_exp beta fexp x = fexp (Zdigits beta m + e)).",
                        "VernacExtend",
                        "b00e23e9436a503f85ca44108dc48145cf5e556e"
                    ]
                },
                {
                    "command": [
                        "unfold canonic_exp, x.",
                        "VernacExtend",
                        "4d4c4a2d08a8bf7d534f8f3576a77a0774e90b54"
                    ]
                },
                {
                    "command": [
                        "now rewrite ln_beta_F2R_Zdigits.",
                        "VernacExtend",
                        "7c7ba95da24bb8c8163aad3ef09e24ebe767093a"
                    ]
                },
                {
                    "command": [
                        "unfold truncate.",
                        "VernacExtend",
                        "e239555bc9fc631f0b28093ba90c3ba6a6565581"
                    ]
                },
                {
                    "command": [
                        "rewrite <- Hc.",
                        "VernacExtend",
                        "60792a8d0080e76b9fdf601abc0d001fc72f25f6"
                    ]
                },
                {
                    "command": [
                        "set (k := (canonic_exp beta fexp x - e)%Z).",
                        "VernacExtend",
                        "18264c5919dfcc58ac230457a93b4261d49eb741"
                    ]
                },
                {
                    "command": [
                        "case Zlt_bool_spec ; intros Hk.",
                        "VernacExtend",
                        "4ae30f19ba29d0d3cfc9fb0ec1a1c50069571a20"
                    ]
                },
                {
                    "command": [
                        "unfold truncate_aux.",
                        "VernacExtend",
                        "55639e3b751e2ddb97aa3376d85eeb981ac54786"
                    ]
                },
                {
                    "command": [
                        "rewrite Fx at 1.",
                        "VernacExtend",
                        "738624b0bfd07d130321120641f5880678c337b4"
                    ]
                },
                {
                    "command": [
                        "assert (H: (e + k)%Z = canonic_exp beta fexp x).",
                        "VernacExtend",
                        "0d0d866014f75f347b21d3fd1913439e5d9a1806"
                    ]
                },
                {
                    "command": [
                        "unfold k.",
                        "VernacExtend",
                        "428aa83d31b248761e7a89000334fa4888cade6d"
                    ]
                },
                {
                    "command": [
                        "ring.",
                        "VernacExtend",
                        "baadd9fc4c175005af409bb466fcea9fab25b4e6"
                    ]
                },
                {
                    "command": [
                        "refine (conj _ H).",
                        "VernacExtend",
                        "5e14d8aba9bc0c8f8426322d76d270652ed62943"
                    ]
                },
                {
                    "command": [
                        "rewrite <- H.",
                        "VernacExtend",
                        "95b84807b4afb2ef79b7cc04a1c91a4e3a502e47"
                    ]
                },
                {
                    "command": [
                        "apply F2R_eq_compat.",
                        "VernacExtend",
                        "bc1e4623b2196fb23776bd02c10b33de36f7515b"
                    ]
                },
                {
                    "command": [
                        "replace (scaled_mantissa beta fexp x) with (Z2R (Zfloor (scaled_mantissa beta fexp x))).",
                        "VernacExtend",
                        "275524c6d577bf73f0fcc4fbf4dc64aed4e60108"
                    ]
                },
                {
                    "command": [
                        "rewrite Ztrunc_Z2R.",
                        "VernacExtend",
                        "5d88ff3ba444a5e6845eb9bf9b6605e2ebc143e5"
                    ]
                },
                {
                    "command": [
                        "unfold scaled_mantissa.",
                        "VernacExtend",
                        "dfa9f34cb89bdf420880d9412ca7126938d16f0a"
                    ]
                },
                {
                    "command": [
                        "rewrite <- H.",
                        "VernacExtend",
                        "95b84807b4afb2ef79b7cc04a1c91a4e3a502e47"
                    ]
                },
                {
                    "command": [
                        "unfold x, F2R.",
                        "VernacExtend",
                        "2cf716c9eeadc093c56c060b176a984284284432"
                    ]
                },
                {
                    "command": [
                        "simpl.",
                        "VernacExtend",
                        "1b93169f4cf876d207c1fab22a2347202ab48d85"
                    ]
                },
                {
                    "command": [
                        "rewrite Rmult_assoc, <- bpow_plus.",
                        "VernacExtend",
                        "e64efbe326a420591ccd203c3aa334b6ee79c4aa"
                    ]
                },
                {
                    "command": [
                        "ring_simplify (e + - (e + k))%Z.",
                        "VernacExtend",
                        "4f44f6a16f4956ff643ba84f50e1c45864ec46d9"
                    ]
                },
                {
                    "command": [
                        "clear -Hm Hk.",
                        "VernacExtend",
                        "eecc77d74702db78f2824c85cbcb44f9d83a8751"
                    ]
                },
                {
                    "command": [
                        "destruct k as [|k|k] ; try easy.",
                        "VernacExtend",
                        "7675d4452635428ce497cfa1102598d4afa6ad21"
                    ]
                },
                {
                    "command": [
                        "simpl.",
                        "VernacExtend",
                        "1b93169f4cf876d207c1fab22a2347202ab48d85"
                    ]
                },
                {
                    "command": [
                        "apply Zfloor_div.",
                        "VernacExtend",
                        "2211ba557e395d0540b64fdefc231bc4c46fa6c3"
                    ]
                },
                {
                    "command": [
                        "intros H.",
                        "VernacExtend",
                        "5cfae87a34fa7b59a257c9640f1b674f6e6d780b"
                    ]
                },
                {
                    "command": [
                        "generalize (Zpower_pos_gt_0 beta k) (Zle_bool_imp_le _ _ (radix_prop beta)).",
                        "VernacExtend",
                        "b8623a403a53c6c5715ecb60de15828c6c0d3a7a"
                    ]
                },
                {
                    "command": [
                        "omega.",
                        "VernacExtend",
                        "32c6c865d255452c7e10c77111456d1981cede39"
                    ]
                },
                {
                    "command": [
                        "rewrite scaled_mantissa_generic with (1 := Fx).",
                        "VernacExtend",
                        "1a384b6b295f8a07d7dc5008c74782331d8ce959"
                    ]
                },
                {
                    "command": [
                        "now rewrite Zfloor_Z2R.",
                        "VernacExtend",
                        "e981e996fe9158b8fa6227b185fa2650fb5b8890"
                    ]
                },
                {
                    "command": [
                        "split.",
                        "VernacExtend",
                        "55abc140132bd88981001ac656020469a8d503eb"
                    ]
                },
                {
                    "command": [
                        "apply refl_equal.",
                        "VernacExtend",
                        "37304a26ede0d38318cdc32c46bfa45cfbc5e7db"
                    ]
                },
                {
                    "command": [
                        "unfold k in Hk.",
                        "VernacExtend",
                        "c721960b772f7c86ed5f89da3ed30840dd1c4666"
                    ]
                },
                {
                    "command": [
                        "omega.",
                        "VernacExtend",
                        "32c6c865d255452c7e10c77111456d1981cede39"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "round_trunc_any_correct",
            "line_nb": 569,
            "steps": [
                {
                    "command": [
                        "intros x m e l Hx Hl He.",
                        "VernacExtend",
                        "f5f36abe2a3a3d7d2183ab0f890d18039b4d515e"
                    ]
                },
                {
                    "command": [
                        "generalize (truncate_correct x m e l Hx Hl He).",
                        "VernacExtend",
                        "575c7cfe8142b9f639a1beee5b56df42f822f1b9"
                    ]
                },
                {
                    "command": [
                        "destruct (truncate (m, e, l)) as ((m', e'), l').",
                        "VernacExtend",
                        "639009194a48ef2c700796db0bc06cf47f882cf4"
                    ]
                },
                {
                    "command": [
                        "intros (H1, H2).",
                        "VernacExtend",
                        "cbe4fae06561c7d97a3cceb65a0c2d56dc027b9e"
                    ]
                },
                {
                    "command": [
                        "now apply round_any_correct.",
                        "VernacExtend",
                        "487e1d18fb14ad4080c2c81054b76ff8fe32280e"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "round_trunc_sign_any_correct",
            "line_nb": 634,
            "steps": [
                {
                    "command": [
                        "intros x m e l Hl He.",
                        "VernacExtend",
                        "2ac188e8b0e3c2f9de0e134a807a28db216ff8b2"
                    ]
                },
                {
                    "command": [
                        "generalize (truncate_correct (Rabs x) m e l (Rabs_pos _) Hl He).",
                        "VernacExtend",
                        "79bf49d41a3c5ffd61f01bf24fadc81113f4af6c"
                    ]
                },
                {
                    "command": [
                        "destruct (truncate (m, e, l)) as ((m', e'), l').",
                        "VernacExtend",
                        "639009194a48ef2c700796db0bc06cf47f882cf4"
                    ]
                },
                {
                    "command": [
                        "intros (H1, H2).",
                        "VernacExtend",
                        "cbe4fae06561c7d97a3cceb65a0c2d56dc027b9e"
                    ]
                },
                {
                    "command": [
                        "apply round_sign_any_correct.",
                        "VernacExtend",
                        "7e59b8465d7e050b75961b67ef26a6fe79b47a80"
                    ]
                },
                {
                    "command": [
                        "exact H1.",
                        "VernacExtend",
                        "c03ab82d1e411e1dcd211c59917a4946e039be00"
                    ]
                },
                {
                    "command": [
                        "destruct H2 as [H2|(H2,H3)].",
                        "VernacExtend",
                        "422176475320954383e7b0338b3fec6a8db1da50"
                    ]
                },
                {
                    "command": [
                        "left.",
                        "VernacExtend",
                        "06dad9fc5698018f3f1213205145fec906c612b1"
                    ]
                },
                {
                    "command": [
                        "now rewrite <- canonic_exp_abs.",
                        "VernacExtend",
                        "074bd78d08da722df16dc3c2ebaf541d1230551d"
                    ]
                },
                {
                    "command": [
                        "right.",
                        "VernacExtend",
                        "27e417a3497755767e1a1d6ba87753ecddaee6b7"
                    ]
                },
                {
                    "command": [
                        "split.",
                        "VernacExtend",
                        "55abc140132bd88981001ac656020469a8d503eb"
                    ]
                },
                {
                    "command": [
                        "exact H2.",
                        "VernacExtend",
                        "6cf1ccd4f667f962fca87ce20ad22b06c15c53ad"
                    ]
                },
                {
                    "command": [
                        "unfold Rabs in H3.",
                        "VernacExtend",
                        "068f8841d1a14dd4b29239e4105aa59ebcea9b23"
                    ]
                },
                {
                    "command": [
                        "destruct (Rcase_abs x) in H3.",
                        "VernacExtend",
                        "6a571c58aa9bdc9ac25db2e69866342075ed5937"
                    ]
                },
                {
                    "command": [
                        "rewrite <- Ropp_involutive.",
                        "VernacExtend",
                        "4ee9a59bfaf834def46b370d487ed40fd11fa074"
                    ]
                },
                {
                    "command": [
                        "now apply generic_format_opp.",
                        "VernacExtend",
                        "9854a3077e0909e22e2b3e762d2cc1450d4abf80"
                    ]
                },
                {
                    "command": [
                        "exact H3.",
                        "VernacExtend",
                        "8a748b9864755088f1affa06f3aea57ca19b1ab0"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "truncate_FIX_correct",
            "line_nb": 677,
            "steps": [
                {
                    "command": [
                        "intros x m e l H1 H2.",
                        "VernacExtend",
                        "0822c70a73395d72ea3874f4be8d8f046e2fee12"
                    ]
                },
                {
                    "command": [
                        "unfold truncate_FIX.",
                        "VernacExtend",
                        "7a51229109a63c402346e18dafeff3843c852f7c"
                    ]
                },
                {
                    "command": [
                        "set (k := (emin - e)%Z).",
                        "VernacExtend",
                        "390041bdfa1acf8f5931a4345e7efbccdd76b626"
                    ]
                },
                {
                    "command": [
                        "set (p := Zpower beta k).",
                        "VernacExtend",
                        "281fdb2af06a798846d99d5aeccc657c9ba680fc"
                    ]
                },
                {
                    "command": [
                        "unfold canonic_exp, FIX_exp.",
                        "VernacExtend",
                        "d161de1c2c52acb85c4f44e7a26f6f80266b9966"
                    ]
                },
                {
                    "command": [
                        "generalize (Zlt_cases 0 k).",
                        "VernacExtend",
                        "b1e1cbd2e3d7dd9672f0d44614ca25b6aaa325ea"
                    ]
                },
                {
                    "command": [
                        "case (Zlt_bool 0 k) ; intros Hk.",
                        "VernacExtend",
                        "c1ca29e1832d4ed86ad1c59a899c97b0752a5a07"
                    ]
                },
                {
                    "command": [
                        "split.",
                        "VernacExtend",
                        "55abc140132bd88981001ac656020469a8d503eb"
                    ]
                },
                {
                    "command": [
                        "now apply inbetween_float_new_location.",
                        "VernacExtend",
                        "eebd2c5a0f51a0d1dba3fbc02eb3e925713f67ce"
                    ]
                },
                {
                    "command": [
                        "clear H2.",
                        "VernacExtend",
                        "d86cdda4c02f9faf6d4c6694d967beddb27ce36a"
                    ]
                },
                {
                    "command": [
                        "left.",
                        "VernacExtend",
                        "06dad9fc5698018f3f1213205145fec906c612b1"
                    ]
                },
                {
                    "command": [
                        "unfold k.",
                        "VernacExtend",
                        "428aa83d31b248761e7a89000334fa4888cade6d"
                    ]
                },
                {
                    "command": [
                        "ring.",
                        "VernacExtend",
                        "baadd9fc4c175005af409bb466fcea9fab25b4e6"
                    ]
                },
                {
                    "command": [
                        "split.",
                        "VernacExtend",
                        "55abc140132bd88981001ac656020469a8d503eb"
                    ]
                },
                {
                    "command": [
                        "exact H1.",
                        "VernacExtend",
                        "c03ab82d1e411e1dcd211c59917a4946e039be00"
                    ]
                },
                {
                    "command": [
                        "unfold k in Hk.",
                        "VernacExtend",
                        "c721960b772f7c86ed5f89da3ed30840dd1c4666"
                    ]
                },
                {
                    "command": [
                        "destruct H2 as [H2|H2].",
                        "VernacExtend",
                        "6f1e78397f882b8d61d2633fdaef03e5fd2de71f"
                    ]
                },
                {
                    "command": [
                        "left.",
                        "VernacExtend",
                        "06dad9fc5698018f3f1213205145fec906c612b1"
                    ]
                },
                {
                    "command": [
                        "omega.",
                        "VernacExtend",
                        "32c6c865d255452c7e10c77111456d1981cede39"
                    ]
                },
                {
                    "command": [
                        "right.",
                        "VernacExtend",
                        "27e417a3497755767e1a1d6ba87753ecddaee6b7"
                    ]
                },
                {
                    "command": [
                        "split.",
                        "VernacExtend",
                        "55abc140132bd88981001ac656020469a8d503eb"
                    ]
                },
                {
                    "command": [
                        "exact H2.",
                        "VernacExtend",
                        "6cf1ccd4f667f962fca87ce20ad22b06c15c53ad"
                    ]
                },
                {
                    "command": [
                        "rewrite H2 in H1.",
                        "VernacExtend",
                        "dcb7a323484c05dcc42cd7ac9b61b0b20729d4c5"
                    ]
                },
                {
                    "command": [
                        "inversion_clear H1.",
                        "VernacExtend",
                        "1443921cbef97c67d0bd87bf517b302257ed5b28"
                    ]
                },
                {
                    "command": [
                        "rewrite H.",
                        "VernacExtend",
                        "6192df8b89486a3ba89a78e26e0d70cae2dc94c2"
                    ]
                },
                {
                    "command": [
                        "apply generic_format_F2R.",
                        "VernacExtend",
                        "3bbdbef5cecd8cd7887cb9d4ed37843b2dc31e75"
                    ]
                },
                {
                    "command": [
                        "unfold canonic_exp.",
                        "VernacExtend",
                        "993fc99c30cdbd2e74bd71e0fd5e49f000dffb04"
                    ]
                },
                {
                    "command": [
                        "omega.",
                        "VernacExtend",
                        "32c6c865d255452c7e10c77111456d1981cede39"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        }
    ]
}