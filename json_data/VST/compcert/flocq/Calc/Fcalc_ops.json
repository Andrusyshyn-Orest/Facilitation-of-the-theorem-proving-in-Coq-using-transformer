{
    "filename": "compcert/flocq/Calc/Fcalc_ops.v",
    "coq_project": "VST",
    "vernac_cmds": [
        [
            "Require Import Fcore_Raux.",
            "VernacRequire",
            "6a49ff899e4733a5492282770f91634f4e2bce84"
        ],
        [
            "Require Import Fcore_defs.",
            "VernacRequire",
            "a5831df34cd1384c0e8566554919e69e523ebc02"
        ],
        [
            "Require Import Fcore_float_prop.",
            "VernacRequire",
            "cb1b82d62c5b9c01c03fb8d695d9166849c8babe"
        ],
        [
            "Section Float_ops.",
            "VernacBeginSection",
            "10a13393c57abcc8d5db43ee819f7619187669e5"
        ],
        [
            "Variable beta : radix.",
            "VernacAssumption",
            "5414570a6751198892ee4a13f107deb4c633e62b"
        ],
        [
            "Notation bpow e := (bpow beta e).",
            "VernacSyntacticDefinition",
            "c796e278ffd17ea9674b52f8e94413782272a594"
        ],
        [
            "Arguments Float {beta} Fnum Fexp.",
            "VernacArguments",
            "df99e7d58c9ad4a37bf800323fa8d1e45fafcd8a"
        ],
        [
            "Definition Falign (f1 f2 : float beta) := let '(Float m1 e1) := f1 in let '(Float m2 e2) := f2 in if Zle_bool e1 e2 then (m1, (m2 * Zpower beta (e2 - e1))%Z, e1) else ((m1 * Zpower beta (e1 - e2))%Z, m2, e2).",
            "VernacDefinition",
            "d4ce405a8e55a4f490f0feb2d5cefc0547a94dd5"
        ],
        [
            "Theorem Falign_spec : forall f1 f2 : float beta, let '(m1, m2, e) := Falign f1 f2 in F2R f1 = @F2R beta (Float m1 e) /\\ F2R f2 = @F2R beta (Float m2 e).",
            "VernacStartTheoremProof",
            "6beab48c5e23497a516249db857491da098baf11"
        ],
        [
            "unfold Falign.",
            "VernacExtend",
            "cd74fe00aeb9bc1b47b62747fd8d4f95e94564a4"
        ],
        [
            "intros (m1, e1) (m2, e2).",
            "VernacExtend",
            "0ebf19b3cdf90ba1cd3e5ced109926fe8715b988"
        ],
        [
            "generalize (Zle_cases e1 e2).",
            "VernacExtend",
            "3e95bc35a6630211dd7b7ed47950332e4dc69468"
        ],
        [
            "case (Zle_bool e1 e2) ; intros He ; split ; trivial.",
            "VernacExtend",
            "65408c93c0d15b747a995b2a8524cc5b9340dac9"
        ],
        [
            "now rewrite <- F2R_change_exp.",
            "VernacExtend",
            "65df242b376e1c151de1084d919f3c965428552f"
        ],
        [
            "rewrite <- F2R_change_exp.",
            "VernacExtend",
            "6c4b506b9fbb8dfebb2c7ba7314667cd8348c177"
        ],
        [
            "apply refl_equal.",
            "VernacExtend",
            "37304a26ede0d38318cdc32c46bfa45cfbc5e7db"
        ],
        [
            "omega.",
            "VernacExtend",
            "32c6c865d255452c7e10c77111456d1981cede39"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Theorem Falign_spec_exp: forall f1 f2 : float beta, snd (Falign f1 f2) = Zmin (Fexp f1) (Fexp f2).",
            "VernacStartTheoremProof",
            "b07e44391f93bdaac03a6b23491e90fd83c1c0a3"
        ],
        [
            "intros (m1,e1) (m2,e2).",
            "VernacExtend",
            "0ebf19b3cdf90ba1cd3e5ced109926fe8715b988"
        ],
        [
            "unfold Falign; simpl.",
            "VernacExtend",
            "e078ef5006674daa0d533863499aa97ec51c13df"
        ],
        [
            "generalize (Zle_cases e1 e2);case (Zle_bool e1 e2); intros He.",
            "VernacExtend",
            "26f204aa615a36ff3d34de6636d46ab4bad9a473"
        ],
        [
            "case (Zmin_spec e1 e2); intros (H1,H2); easy.",
            "VernacExtend",
            "ad23baa417e2f697d26b160e4c8d3a27cbb9007e"
        ],
        [
            "case (Zmin_spec e1 e2); intros (H1,H2); easy.",
            "VernacExtend",
            "ad23baa417e2f697d26b160e4c8d3a27cbb9007e"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Definition Fopp (f1 : float beta) : float beta := let '(Float m1 e1) := f1 in Float (-m1)%Z e1.",
            "VernacDefinition",
            "c56367eb36f13293fa076be87baa3c6507d64aeb"
        ],
        [
            "Theorem F2R_opp : forall f1 : float beta, (F2R (Fopp f1) = -F2R f1)%R.",
            "VernacStartTheoremProof",
            "fdb2d13bfc61e16eed709c934b5751e2395a5426"
        ],
        [
            "intros (m1,e1).",
            "VernacExtend",
            "4e99c26604ffb7813950c9b0835a50837e4483c3"
        ],
        [
            "apply F2R_Zopp.",
            "VernacExtend",
            "05f51edf1e5f6f3fae826b3dea7066ced4866243"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Definition Fabs (f1 : float beta) : float beta := let '(Float m1 e1) := f1 in Float (Zabs m1)%Z e1.",
            "VernacDefinition",
            "56540eac2d21e1cb9961b1816ee4aa2d81263a1b"
        ],
        [
            "Theorem F2R_abs : forall f1 : float beta, (F2R (Fabs f1) = Rabs (F2R f1))%R.",
            "VernacStartTheoremProof",
            "4e77495ffacea9015e5e787dea7d1daa38a9148a"
        ],
        [
            "intros (m1,e1).",
            "VernacExtend",
            "4e99c26604ffb7813950c9b0835a50837e4483c3"
        ],
        [
            "apply F2R_Zabs.",
            "VernacExtend",
            "642bdf78298ac9a0c4ff9e41dfb2e40ac8e4d1ea"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Definition Fplus (f1 f2 : float beta) : float beta := let '(m1, m2 ,e) := Falign f1 f2 in Float (m1 + m2) e.",
            "VernacDefinition",
            "c319dde4604e4573e19fceba3a866402761845be"
        ],
        [
            "Theorem F2R_plus : forall f1 f2 : float beta, F2R (Fplus f1 f2) = (F2R f1 + F2R f2)%R.",
            "VernacStartTheoremProof",
            "86cbcba115a6c467b5cd00eb4b30ad229bee1fc2"
        ],
        [
            "intros f1 f2.",
            "VernacExtend",
            "c348679453bca95a996556bd66b55b58f918ed4f"
        ],
        [
            "unfold Fplus.",
            "VernacExtend",
            "c54a67894d0ce35c9c1961a2d7d8aa03f0ec71b5"
        ],
        [
            "generalize (Falign_spec f1 f2).",
            "VernacExtend",
            "a45987419c19eeb0b8978b6cee8b44b6b8e128b1"
        ],
        [
            "destruct (Falign f1 f2) as ((m1, m2), e).",
            "VernacExtend",
            "66b9c01d3488bf7fa0e655d455d1b251dc3a494c"
        ],
        [
            "intros (H1, H2).",
            "VernacExtend",
            "cbe4fae06561c7d97a3cceb65a0c2d56dc027b9e"
        ],
        [
            "rewrite H1, H2.",
            "VernacExtend",
            "0ce0ee884f848b2a2759f8abce9a0e685be27984"
        ],
        [
            "unfold F2R.",
            "VernacExtend",
            "01074792470ba071b62f8438b8d9b8c922ca2998"
        ],
        [
            "simpl.",
            "VernacExtend",
            "1b93169f4cf876d207c1fab22a2347202ab48d85"
        ],
        [
            "rewrite Z2R_plus.",
            "VernacExtend",
            "acce6601b0322c726f9b248c200708805f7120a8"
        ],
        [
            "apply Rmult_plus_distr_r.",
            "VernacExtend",
            "8c98c57567f4d25a67548755db4192ed5127ca43"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Theorem Fplus_same_exp : forall m1 m2 e, Fplus (Float m1 e) (Float m2 e) = Float (m1 + m2) e.",
            "VernacStartTheoremProof",
            "81fdb5892e415601b31294e8b22d6d2a9a0ae44e"
        ],
        [
            "intros m1 m2 e.",
            "VernacExtend",
            "36684b94ed8a64b5b208a304a08917f069dc6c21"
        ],
        [
            "unfold Fplus.",
            "VernacExtend",
            "c54a67894d0ce35c9c1961a2d7d8aa03f0ec71b5"
        ],
        [
            "simpl.",
            "VernacExtend",
            "1b93169f4cf876d207c1fab22a2347202ab48d85"
        ],
        [
            "now rewrite Zle_bool_refl, Zminus_diag, Zmult_1_r.",
            "VernacExtend",
            "f2a21c2351696e652419068bb4d31279b6b26063"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Theorem Fexp_Fplus : forall f1 f2 : float beta, Fexp (Fplus f1 f2) = Zmin (Fexp f1) (Fexp f2).",
            "VernacStartTheoremProof",
            "f663dce05e5a7b55abc3b50d2867f89081ff56cf"
        ],
        [
            "intros f1 f2.",
            "VernacExtend",
            "c348679453bca95a996556bd66b55b58f918ed4f"
        ],
        [
            "unfold Fplus.",
            "VernacExtend",
            "c54a67894d0ce35c9c1961a2d7d8aa03f0ec71b5"
        ],
        [
            "rewrite <- Falign_spec_exp.",
            "VernacExtend",
            "18717054dc01223a0a119188a67c4a154aafc636"
        ],
        [
            "now destruct (Falign f1 f2) as ((p,q),e).",
            "VernacExtend",
            "6936555c9cb78d2273d39106774ffcc76dc3bd19"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Definition Fminus (f1 f2 : float beta) := Fplus f1 (Fopp f2).",
            "VernacDefinition",
            "f62ee988e04530069b00571d803abb83907c3fdc"
        ],
        [
            "Theorem F2R_minus : forall f1 f2 : float beta, F2R (Fminus f1 f2) = (F2R f1 - F2R f2)%R.",
            "VernacStartTheoremProof",
            "a3271b3e07bda01d65c47c6c50bfd91a689a8697"
        ],
        [
            "intros f1 f2; unfold Fminus.",
            "VernacExtend",
            "c8fa34f4655fb9f65ead04cbedc351f953ff5f53"
        ],
        [
            "rewrite F2R_plus, F2R_opp.",
            "VernacExtend",
            "b200ed636411bbf97617b5104e369b313dd92641"
        ],
        [
            "ring.",
            "VernacExtend",
            "baadd9fc4c175005af409bb466fcea9fab25b4e6"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Theorem Fminus_same_exp : forall m1 m2 e, Fminus (Float m1 e) (Float m2 e) = Float (m1 - m2) e.",
            "VernacStartTheoremProof",
            "67b9330613fca9284184f41802e5db634ec6978f"
        ],
        [
            "intros m1 m2 e.",
            "VernacExtend",
            "36684b94ed8a64b5b208a304a08917f069dc6c21"
        ],
        [
            "unfold Fminus.",
            "VernacExtend",
            "430037c2bf30ea94a184787af5064700c8341f93"
        ],
        [
            "apply Fplus_same_exp.",
            "VernacExtend",
            "22d171daad41beddd29cc96ceda6eb14169a91b3"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Definition Fmult (f1 f2 : float beta) : float beta := let '(Float m1 e1) := f1 in let '(Float m2 e2) := f2 in Float (m1 * m2) (e1 + e2).",
            "VernacDefinition",
            "119c2d4604934e810ec0ee7544ac5921935fb38f"
        ],
        [
            "Theorem F2R_mult : forall f1 f2 : float beta, F2R (Fmult f1 f2) = (F2R f1 * F2R f2)%R.",
            "VernacStartTheoremProof",
            "181e861db69e5d981f2c0b75b8b3e155d72e5737"
        ],
        [
            "intros (m1, e1) (m2, e2).",
            "VernacExtend",
            "0ebf19b3cdf90ba1cd3e5ced109926fe8715b988"
        ],
        [
            "unfold Fmult, F2R.",
            "VernacExtend",
            "44b66b470bb778b77092ee2047da3dc915c32fc8"
        ],
        [
            "simpl.",
            "VernacExtend",
            "1b93169f4cf876d207c1fab22a2347202ab48d85"
        ],
        [
            "rewrite Z2R_mult, bpow_plus.",
            "VernacExtend",
            "d49112c43232b80573a5bd74efce2f64f46016fb"
        ],
        [
            "ring.",
            "VernacExtend",
            "baadd9fc4c175005af409bb466fcea9fab25b4e6"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "End Float_ops.",
            "VernacEndSegment",
            "e0747a82c97645b8856792873064dc5f01e6ea7b"
        ]
    ],
    "proofs": [
        {
            "name": "Falign_spec",
            "line_nb": 8,
            "steps": [
                {
                    "command": [
                        "unfold Falign.",
                        "VernacExtend",
                        "cd74fe00aeb9bc1b47b62747fd8d4f95e94564a4"
                    ]
                },
                {
                    "command": [
                        "intros (m1, e1) (m2, e2).",
                        "VernacExtend",
                        "0ebf19b3cdf90ba1cd3e5ced109926fe8715b988"
                    ]
                },
                {
                    "command": [
                        "generalize (Zle_cases e1 e2).",
                        "VernacExtend",
                        "3e95bc35a6630211dd7b7ed47950332e4dc69468"
                    ]
                },
                {
                    "command": [
                        "case (Zle_bool e1 e2) ; intros He ; split ; trivial.",
                        "VernacExtend",
                        "65408c93c0d15b747a995b2a8524cc5b9340dac9"
                    ]
                },
                {
                    "command": [
                        "now rewrite <- F2R_change_exp.",
                        "VernacExtend",
                        "65df242b376e1c151de1084d919f3c965428552f"
                    ]
                },
                {
                    "command": [
                        "rewrite <- F2R_change_exp.",
                        "VernacExtend",
                        "6c4b506b9fbb8dfebb2c7ba7314667cd8348c177"
                    ]
                },
                {
                    "command": [
                        "apply refl_equal.",
                        "VernacExtend",
                        "37304a26ede0d38318cdc32c46bfa45cfbc5e7db"
                    ]
                },
                {
                    "command": [
                        "omega.",
                        "VernacExtend",
                        "32c6c865d255452c7e10c77111456d1981cede39"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "Falign_spec_exp",
            "line_nb": 18,
            "steps": [
                {
                    "command": [
                        "intros (m1,e1) (m2,e2).",
                        "VernacExtend",
                        "0ebf19b3cdf90ba1cd3e5ced109926fe8715b988"
                    ]
                },
                {
                    "command": [
                        "unfold Falign; simpl.",
                        "VernacExtend",
                        "e078ef5006674daa0d533863499aa97ec51c13df"
                    ]
                },
                {
                    "command": [
                        "generalize (Zle_cases e1 e2);case (Zle_bool e1 e2); intros He.",
                        "VernacExtend",
                        "26f204aa615a36ff3d34de6636d46ab4bad9a473"
                    ]
                },
                {
                    "command": [
                        "case (Zmin_spec e1 e2); intros (H1,H2); easy.",
                        "VernacExtend",
                        "ad23baa417e2f697d26b160e4c8d3a27cbb9007e"
                    ]
                },
                {
                    "command": [
                        "case (Zmin_spec e1 e2); intros (H1,H2); easy.",
                        "VernacExtend",
                        "ad23baa417e2f697d26b160e4c8d3a27cbb9007e"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "F2R_opp",
            "line_nb": 26,
            "steps": [
                {
                    "command": [
                        "intros (m1,e1).",
                        "VernacExtend",
                        "4e99c26604ffb7813950c9b0835a50837e4483c3"
                    ]
                },
                {
                    "command": [
                        "apply F2R_Zopp.",
                        "VernacExtend",
                        "05f51edf1e5f6f3fae826b3dea7066ced4866243"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "F2R_abs",
            "line_nb": 31,
            "steps": [
                {
                    "command": [
                        "intros (m1,e1).",
                        "VernacExtend",
                        "4e99c26604ffb7813950c9b0835a50837e4483c3"
                    ]
                },
                {
                    "command": [
                        "apply F2R_Zabs.",
                        "VernacExtend",
                        "642bdf78298ac9a0c4ff9e41dfb2e40ac8e4d1ea"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "F2R_plus",
            "line_nb": 36,
            "steps": [
                {
                    "command": [
                        "intros f1 f2.",
                        "VernacExtend",
                        "c348679453bca95a996556bd66b55b58f918ed4f"
                    ]
                },
                {
                    "command": [
                        "unfold Fplus.",
                        "VernacExtend",
                        "c54a67894d0ce35c9c1961a2d7d8aa03f0ec71b5"
                    ]
                },
                {
                    "command": [
                        "generalize (Falign_spec f1 f2).",
                        "VernacExtend",
                        "a45987419c19eeb0b8978b6cee8b44b6b8e128b1"
                    ]
                },
                {
                    "command": [
                        "destruct (Falign f1 f2) as ((m1, m2), e).",
                        "VernacExtend",
                        "66b9c01d3488bf7fa0e655d455d1b251dc3a494c"
                    ]
                },
                {
                    "command": [
                        "intros (H1, H2).",
                        "VernacExtend",
                        "cbe4fae06561c7d97a3cceb65a0c2d56dc027b9e"
                    ]
                },
                {
                    "command": [
                        "rewrite H1, H2.",
                        "VernacExtend",
                        "0ce0ee884f848b2a2759f8abce9a0e685be27984"
                    ]
                },
                {
                    "command": [
                        "unfold F2R.",
                        "VernacExtend",
                        "01074792470ba071b62f8438b8d9b8c922ca2998"
                    ]
                },
                {
                    "command": [
                        "simpl.",
                        "VernacExtend",
                        "1b93169f4cf876d207c1fab22a2347202ab48d85"
                    ]
                },
                {
                    "command": [
                        "rewrite Z2R_plus.",
                        "VernacExtend",
                        "acce6601b0322c726f9b248c200708805f7120a8"
                    ]
                },
                {
                    "command": [
                        "apply Rmult_plus_distr_r.",
                        "VernacExtend",
                        "8c98c57567f4d25a67548755db4192ed5127ca43"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "Fplus_same_exp",
            "line_nb": 48,
            "steps": [
                {
                    "command": [
                        "intros m1 m2 e.",
                        "VernacExtend",
                        "36684b94ed8a64b5b208a304a08917f069dc6c21"
                    ]
                },
                {
                    "command": [
                        "unfold Fplus.",
                        "VernacExtend",
                        "c54a67894d0ce35c9c1961a2d7d8aa03f0ec71b5"
                    ]
                },
                {
                    "command": [
                        "simpl.",
                        "VernacExtend",
                        "1b93169f4cf876d207c1fab22a2347202ab48d85"
                    ]
                },
                {
                    "command": [
                        "now rewrite Zle_bool_refl, Zminus_diag, Zmult_1_r.",
                        "VernacExtend",
                        "f2a21c2351696e652419068bb4d31279b6b26063"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "Fexp_Fplus",
            "line_nb": 54,
            "steps": [
                {
                    "command": [
                        "intros f1 f2.",
                        "VernacExtend",
                        "c348679453bca95a996556bd66b55b58f918ed4f"
                    ]
                },
                {
                    "command": [
                        "unfold Fplus.",
                        "VernacExtend",
                        "c54a67894d0ce35c9c1961a2d7d8aa03f0ec71b5"
                    ]
                },
                {
                    "command": [
                        "rewrite <- Falign_spec_exp.",
                        "VernacExtend",
                        "18717054dc01223a0a119188a67c4a154aafc636"
                    ]
                },
                {
                    "command": [
                        "now destruct (Falign f1 f2) as ((p,q),e).",
                        "VernacExtend",
                        "6936555c9cb78d2273d39106774ffcc76dc3bd19"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "F2R_minus",
            "line_nb": 61,
            "steps": [
                {
                    "command": [
                        "intros f1 f2; unfold Fminus.",
                        "VernacExtend",
                        "c8fa34f4655fb9f65ead04cbedc351f953ff5f53"
                    ]
                },
                {
                    "command": [
                        "rewrite F2R_plus, F2R_opp.",
                        "VernacExtend",
                        "b200ed636411bbf97617b5104e369b313dd92641"
                    ]
                },
                {
                    "command": [
                        "ring.",
                        "VernacExtend",
                        "baadd9fc4c175005af409bb466fcea9fab25b4e6"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "Fminus_same_exp",
            "line_nb": 66,
            "steps": [
                {
                    "command": [
                        "intros m1 m2 e.",
                        "VernacExtend",
                        "36684b94ed8a64b5b208a304a08917f069dc6c21"
                    ]
                },
                {
                    "command": [
                        "unfold Fminus.",
                        "VernacExtend",
                        "430037c2bf30ea94a184787af5064700c8341f93"
                    ]
                },
                {
                    "command": [
                        "apply Fplus_same_exp.",
                        "VernacExtend",
                        "22d171daad41beddd29cc96ceda6eb14169a91b3"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "F2R_mult",
            "line_nb": 72,
            "steps": [
                {
                    "command": [
                        "intros (m1, e1) (m2, e2).",
                        "VernacExtend",
                        "0ebf19b3cdf90ba1cd3e5ced109926fe8715b988"
                    ]
                },
                {
                    "command": [
                        "unfold Fmult, F2R.",
                        "VernacExtend",
                        "44b66b470bb778b77092ee2047da3dc915c32fc8"
                    ]
                },
                {
                    "command": [
                        "simpl.",
                        "VernacExtend",
                        "1b93169f4cf876d207c1fab22a2347202ab48d85"
                    ]
                },
                {
                    "command": [
                        "rewrite Z2R_mult, bpow_plus.",
                        "VernacExtend",
                        "d49112c43232b80573a5bd74efce2f64f46016fb"
                    ]
                },
                {
                    "command": [
                        "ring.",
                        "VernacExtend",
                        "baadd9fc4c175005af409bb466fcea9fab25b4e6"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        }
    ]
}