{
    "filename": "compcert/flocq/Appli/Fappli_IEEE.v",
    "coq_project": "VST",
    "vernac_cmds": [
        [
            "Require Import Fcore.",
            "VernacRequire",
            "0726413a0cd1e00c4c23af78515a8bb580c73ed5"
        ],
        [
            "Require Import Fcore_digits.",
            "VernacRequire",
            "88b786a7297c6d41db609842668795560290d722"
        ],
        [
            "Require Import Fcalc_digits.",
            "VernacRequire",
            "a66e84f2c3d2b977b9a7db893ee83741416125a1"
        ],
        [
            "Require Import Fcalc_round.",
            "VernacRequire",
            "04b9bf46f2d67c43cc7ec0ae5baa890b2a88a7a5"
        ],
        [
            "Require Import Fcalc_bracket.",
            "VernacRequire",
            "f52ed1ddf769329f4ac4906755d738d2cc697d47"
        ],
        [
            "Require Import Fcalc_ops.",
            "VernacRequire",
            "3d12d40a8c239f3c3d26da4f928dea2f7d34d6d3"
        ],
        [
            "Require Import Fcalc_div.",
            "VernacRequire",
            "4f904343300193036f435c20e98ba355d162526a"
        ],
        [
            "Require Import Fcalc_sqrt.",
            "VernacRequire",
            "8816d40c45e7d1263a754fe5fb6ae59c8dd274ed"
        ],
        [
            "Require Import Fprop_relative.",
            "VernacRequire",
            "f7bcd7888ec6c5b32bc4d40b59ad0864f5edebc8"
        ],
        [
            "Section AnyRadix.",
            "VernacBeginSection",
            "f03dc7b9e4867bfd86c3cdc99da51228b4752bbb"
        ],
        [
            "Inductive full_float := | F754_zero : bool -> full_float | F754_infinity : bool -> full_float | F754_nan : bool -> positive -> full_float | F754_finite : bool -> positive -> Z -> full_float.",
            "VernacInductive",
            "dbf9b1278f8ab3de8edd9969a79fd7d3830b8376"
        ],
        [
            "Definition FF2R beta x := match x with | F754_finite s m e => F2R (Float beta (cond_Zopp s (Zpos m)) e) | _ => 0%R end.",
            "VernacDefinition",
            "5134ec2b1e9e41f741b77a693ed58c403ac1d618"
        ],
        [
            "End AnyRadix.",
            "VernacEndSegment",
            "8727ea2fdaab4a848c48ceaa1053825fda705073"
        ],
        [
            "Section Binary.",
            "VernacBeginSection",
            "8908223fcd57007ccd5be8ab84562ce4be8ccef9"
        ],
        [
            "Arguments exist {A P} x _.",
            "VernacArguments",
            "ebd9ae73b3936865c3623eb37aa7b7ad133c0e33"
        ],
        [
            "Variable prec emax : Z.",
            "VernacAssumption",
            "d7cd1fd12e167712951485f6fab2f6df859c3ad1"
        ],
        [
            "Context (prec_gt_0_ : Prec_gt_0 prec).",
            "VernacContext",
            "18e2535874c8b91e287902e8960573741b05597c"
        ],
        [
            "Hypothesis Hmax : (prec < emax)%Z.",
            "VernacAssumption",
            "6ba8210eb31875ff90983c94eb9ba0d11392732a"
        ],
        [
            "Let emin := (3 - emax - prec)%Z.",
            "VernacDefinition",
            "059e2b6736b3e50cba1129030be68500b64207b3"
        ],
        [
            "Let fexp := FLT_exp emin prec.",
            "VernacDefinition",
            "09433ab9ed269cd09ea2fa3b4526981330fae611"
        ],
        [
            "Instance fexp_correct : Valid_exp fexp := FLT_exp_valid emin prec.",
            "VernacInstance",
            "d1c189e57366fccd80487addaf13962d1c19c17e"
        ],
        [
            "Instance fexp_monotone : Monotone_exp fexp := FLT_exp_monotone emin prec.",
            "VernacInstance",
            "62c0301050f2cd18ae0fb0e1c9c17bd5cd718997"
        ],
        [
            "Definition canonic_mantissa m e := Zeq_bool (fexp (Zpos (digits2_pos m) + e)) e.",
            "VernacDefinition",
            "b4eb08338c011c7857a8120ec580e9a284c67c01"
        ],
        [
            "Definition bounded m e := andb (canonic_mantissa m e) (Zle_bool e (emax - prec)).",
            "VernacDefinition",
            "07c81ad54e56bcc5c1b68c9cc81a17ec6faef029"
        ],
        [
            "Definition valid_binary x := match x with | F754_finite _ m e => bounded m e | F754_nan _ pl => (Zpos (digits2_pos pl) <? prec)%Z | _ => true end.",
            "VernacDefinition",
            "dfda63e651ea5ad413131dcde648115eb23f7456"
        ],
        [
            "Definition nan_pl := {pl | (Zpos (digits2_pos pl) <? prec)%Z = true}.",
            "VernacDefinition",
            "9816333b372ec137a72aea5f57105fc627d2241b"
        ],
        [
            "Inductive binary_float := | B754_zero : bool -> binary_float | B754_infinity : bool -> binary_float | B754_nan : bool -> nan_pl -> binary_float | B754_finite : bool -> forall (m : positive) (e : Z), bounded m e = true -> binary_float.",
            "VernacInductive",
            "c3717cd179aff9c745432b41a03acb825976525e"
        ],
        [
            "Definition FF2B x := match x as x return valid_binary x = true -> binary_float with | F754_finite s m e => B754_finite s m e | F754_infinity s => fun _ => B754_infinity s | F754_zero s => fun _ => B754_zero s | F754_nan b pl => fun H => B754_nan b (exist pl H) end.",
            "VernacDefinition",
            "abfd5eeba7418a01981e38545d94e12a7f8af594"
        ],
        [
            "Definition B2FF x := match x with | B754_finite s m e _ => F754_finite s m e | B754_infinity s => F754_infinity s | B754_zero s => F754_zero s | B754_nan b (exist pl _) => F754_nan b pl end.",
            "VernacDefinition",
            "162bc5d0ca133cf395c7f0fb7dbd1d1904daa5c5"
        ],
        [
            "Definition B2R f := match f with | B754_finite s m e _ => F2R (Float radix2 (cond_Zopp s (Zpos m)) e) | _ => 0%R end.",
            "VernacDefinition",
            "b66c102e489be3be4f7192e4d6b440c0b3c13d8f"
        ],
        [
            "Theorem FF2R_B2FF : forall x, FF2R radix2 (B2FF x) = B2R x.",
            "VernacStartTheoremProof",
            "bf9d6d6670f4e0a1a85e516d80ba91c9220a0694"
        ],
        [
            "now intros [sx|sx|sx [plx Hplx]|sx mx ex Hx].",
            "VernacExtend",
            "69f75f0c275bdcf4b5234bf6629b1ace8a1ee628"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Theorem B2FF_FF2B : forall x Hx, B2FF (FF2B x Hx) = x.",
            "VernacStartTheoremProof",
            "57cd6b9d67354a4913cf8beefad2cbd7b3947339"
        ],
        [
            "now intros [sx|sx|sx plx|sx mx ex] Hx.",
            "VernacExtend",
            "067d014100d8de768af185d9e0e3bd79205945aa"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Theorem valid_binary_B2FF : forall x, valid_binary (B2FF x) = true.",
            "VernacStartTheoremProof",
            "7ee9a175196e0f225271c197c75b4134f8ecab3f"
        ],
        [
            "now intros [sx|sx|sx [plx Hplx]|sx mx ex Hx].",
            "VernacExtend",
            "69f75f0c275bdcf4b5234bf6629b1ace8a1ee628"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Theorem FF2B_B2FF : forall x H, FF2B (B2FF x) H = x.",
            "VernacStartTheoremProof",
            "694f7288d7055edcc4227640cca905afc4739c48"
        ],
        [
            "intros [sx|sx|sx [plx Hplx]|sx mx ex Hx] H ; try easy.",
            "VernacExtend",
            "b3169156bb8b6c4537593f2ef746d4df630a3fb1"
        ],
        [
            "simpl.",
            "VernacExtend",
            "1b93169f4cf876d207c1fab22a2347202ab48d85"
        ],
        [
            "apply f_equal, f_equal, eqbool_irrelevance.",
            "VernacExtend",
            "5e8d2f3a7d8081a2d33f32876ea37cc9eae1bfa4"
        ],
        [
            "apply f_equal, eqbool_irrelevance.",
            "VernacExtend",
            "88712e4a7cc34c494518cf3dc8b4bd8ab0a9b3e5"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Theorem FF2B_B2FF_valid : forall x, FF2B (B2FF x) (valid_binary_B2FF x) = x.",
            "VernacStartTheoremProof",
            "f8b5f794c9a9829127d1401dc73a5b64005909f4"
        ],
        [
            "intros x.",
            "VernacExtend",
            "596d66edc70dae19981ed74f103fc0a865aec92c"
        ],
        [
            "apply FF2B_B2FF.",
            "VernacExtend",
            "1b4345cfcbf8760f3b1f0793df0c8ee0b6ba21d7"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Theorem B2R_FF2B : forall x Hx, B2R (FF2B x Hx) = FF2R radix2 x.",
            "VernacStartTheoremProof",
            "defabe0dd20b8552e81165824a9d488f4d8bcb56"
        ],
        [
            "now intros [sx|sx|sx plx|sx mx ex] Hx.",
            "VernacExtend",
            "067d014100d8de768af185d9e0e3bd79205945aa"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Theorem match_FF2B : forall {T} fz fi fn ff x Hx, match FF2B x Hx return T with | B754_zero sx => fz sx | B754_infinity sx => fi sx | B754_nan b (exist p _) => fn b p | B754_finite sx mx ex _ => ff sx mx ex end = match x with | F754_zero sx => fz sx | F754_infinity sx => fi sx | F754_nan b p => fn b p | F754_finite sx mx ex => ff sx mx ex end.",
            "VernacStartTheoremProof",
            "4b89ef0c229417864bf318c77cb5db02f5150425"
        ],
        [
            "now intros T fz fi fn ff [sx|sx|sx plx|sx mx ex] Hx.",
            "VernacExtend",
            "c62853f71ed70d14bdfdc2023a7e74ceb196ad51"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Theorem canonic_canonic_mantissa : forall (sx : bool) mx ex, canonic_mantissa mx ex = true -> canonic radix2 fexp (Float radix2 (cond_Zopp sx (Zpos mx)) ex).",
            "VernacStartTheoremProof",
            "8dd3608c6ff21341851d7a64478c8ce665a34e1d"
        ],
        [
            "intros sx mx ex H.",
            "VernacExtend",
            "0f9f87ed027d9c56f70d06336b035a27e7db906c"
        ],
        [
            "assert (Hx := Zeq_bool_eq _ _ H).",
            "VernacExtend",
            "ae8e86842101c041c5f57a93dba42aafddae2e76"
        ],
        [
            "clear H.",
            "VernacExtend",
            "f2c5826643b985ca1b67f3433f38ccbe2735e582"
        ],
        [
            "apply sym_eq.",
            "VernacExtend",
            "f01eb728d9ceeac2915c66b52a7b50a0c452e949"
        ],
        [
            "simpl.",
            "VernacExtend",
            "1b93169f4cf876d207c1fab22a2347202ab48d85"
        ],
        [
            "pattern ex at 2 ; rewrite <- Hx.",
            "VernacExtend",
            "ef21d450729099c4e825be0935ed37adae907754"
        ],
        [
            "apply (f_equal fexp).",
            "VernacExtend",
            "f40028f9502b41bafc803163c189f61ef324b731"
        ],
        [
            "rewrite ln_beta_F2R_Zdigits.",
            "VernacExtend",
            "0e6182cc64c2ad4bc57501af40a53f1a50e13f85"
        ],
        [
            "rewrite <- Zdigits_abs.",
            "VernacExtend",
            "fa7b4b2455476e9da32abeb4a2399aeaa1bf74b9"
        ],
        [
            "rewrite Zpos_digits2_pos.",
            "VernacExtend",
            "2b538c3fe7142af5b05ea277f48ca7eaf108af74"
        ],
        [
            "now case sx.",
            "VernacExtend",
            "82d311e3e5eb1345ffa9abe0d08918457fb81beb"
        ],
        [
            "now case sx.",
            "VernacExtend",
            "82d311e3e5eb1345ffa9abe0d08918457fb81beb"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Theorem generic_format_B2R : forall x, generic_format radix2 fexp (B2R x).",
            "VernacStartTheoremProof",
            "d95b3c731506413ab7ab2f67e5ba9f6fea5129cd"
        ],
        [
            "intros [sx|sx|sx plx|sx mx ex Hx] ; try apply generic_format_0.",
            "VernacExtend",
            "b22ec08727ce2ecc45831d9703af74f12117e933"
        ],
        [
            "simpl.",
            "VernacExtend",
            "1b93169f4cf876d207c1fab22a2347202ab48d85"
        ],
        [
            "apply generic_format_canonic.",
            "VernacExtend",
            "80d076e0f344075d8eaaa3549bbe62413bee3ba2"
        ],
        [
            "apply canonic_canonic_mantissa.",
            "VernacExtend",
            "e71d83b1961bdc9255faa69fbb1351759cae44c7"
        ],
        [
            "now destruct (andb_prop _ _ Hx) as (H, _).",
            "VernacExtend",
            "78b0fd0fe153e53ccf88b8800a8f65093513d499"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Theorem FLT_format_B2R : forall x, FLT_format radix2 emin prec (B2R x).",
            "VernacStartTheoremProof",
            "6e5e8f63512e074dba73fafea1fe044f170d1e37"
        ],
        [
            "Proof with auto with typeclass_instances.",
            "VernacProof",
            "c16343efcd37779057959eb30e1ff5afec0a83eb"
        ],
        [
            "intros x.",
            "VernacExtend",
            "596d66edc70dae19981ed74f103fc0a865aec92c"
        ],
        [
            "apply FLT_format_generic...",
            "VernacExtend",
            "baaafc745190d44d7ff843cfa148fef58b5a6f34"
        ],
        [
            "apply generic_format_B2R.",
            "VernacExtend",
            "17746e2c3cda8dfb94931be74eb7b5e284b2058f"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Theorem B2FF_inj : forall x y : binary_float, B2FF x = B2FF y -> x = y.",
            "VernacStartTheoremProof",
            "6c25e0fcd99e2dc2484d0bda259e9dd3ac36dc29"
        ],
        [
            "intros [sx|sx|sx [plx Hplx]|sx mx ex Hx] [sy|sy|sy [ply Hply]|sy my ey Hy] ; try easy.",
            "VernacExtend",
            "6e34256eadeff779568c1c12700d8fb09c8051d1"
        ],
        [
            "intros H.",
            "VernacExtend",
            "5cfae87a34fa7b59a257c9640f1b674f6e6d780b"
        ],
        [
            "now inversion H.",
            "VernacExtend",
            "d72febf07866235ab850e0be52d03df112cb9e8c"
        ],
        [
            "intros H.",
            "VernacExtend",
            "5cfae87a34fa7b59a257c9640f1b674f6e6d780b"
        ],
        [
            "now inversion H.",
            "VernacExtend",
            "d72febf07866235ab850e0be52d03df112cb9e8c"
        ],
        [
            "intros H.",
            "VernacExtend",
            "5cfae87a34fa7b59a257c9640f1b674f6e6d780b"
        ],
        [
            "inversion H.",
            "VernacExtend",
            "ee20838bdd77512b43142d655a3924bf07bffebb"
        ],
        [
            "clear H.",
            "VernacExtend",
            "f2c5826643b985ca1b67f3433f38ccbe2735e582"
        ],
        [
            "revert Hplx.",
            "VernacExtend",
            "0f11f419b23a5db93b9f158a018397998a5a615e"
        ],
        [
            "rewrite H2.",
            "VernacExtend",
            "c34b98a4ea7c987830199fe378bb7a145a0d652e"
        ],
        [
            "intros Hx.",
            "VernacExtend",
            "9276b72df3a882c9b4b954c90d9e870c80a906fc"
        ],
        [
            "apply f_equal, f_equal, eqbool_irrelevance.",
            "VernacExtend",
            "5e8d2f3a7d8081a2d33f32876ea37cc9eae1bfa4"
        ],
        [
            "intros H.",
            "VernacExtend",
            "5cfae87a34fa7b59a257c9640f1b674f6e6d780b"
        ],
        [
            "inversion H.",
            "VernacExtend",
            "ee20838bdd77512b43142d655a3924bf07bffebb"
        ],
        [
            "clear H.",
            "VernacExtend",
            "f2c5826643b985ca1b67f3433f38ccbe2735e582"
        ],
        [
            "revert Hx.",
            "VernacExtend",
            "6f33b03350f7d5550754ef79fc319be630ae9ecd"
        ],
        [
            "rewrite H2, H3.",
            "VernacExtend",
            "bd045133fa028ed96950f3be8d169110b98b6951"
        ],
        [
            "intros Hx.",
            "VernacExtend",
            "9276b72df3a882c9b4b954c90d9e870c80a906fc"
        ],
        [
            "apply f_equal, eqbool_irrelevance.",
            "VernacExtend",
            "88712e4a7cc34c494518cf3dc8b4bd8ab0a9b3e5"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Definition is_finite_strict f := match f with | B754_finite _ _ _ _ => true | _ => false end.",
            "VernacDefinition",
            "3ff181eab03e059caccb9550ed9221d0529f0be0"
        ],
        [
            "Theorem B2R_inj: forall x y : binary_float, is_finite_strict x = true -> is_finite_strict y = true -> B2R x = B2R y -> x = y.",
            "VernacStartTheoremProof",
            "abd6a4789341162e26c206913e68589191173857"
        ],
        [
            "intros [sx|sx| |sx mx ex Hx] [sy|sy| |sy my ey Hy] ; try easy.",
            "VernacExtend",
            "660c09bab558cffa8ed8bf929d949d4d354ddfc8"
        ],
        [
            "simpl.",
            "VernacExtend",
            "1b93169f4cf876d207c1fab22a2347202ab48d85"
        ],
        [
            "intros _ _ Heq.",
            "VernacExtend",
            "006714e58fbd439b4215cc55c200f575e0b31271"
        ],
        [
            "assert (Hs: sx = sy).",
            "VernacExtend",
            "9661d9d5cc44f7f6611f78620bee282060c01ab5"
        ],
        [
            "revert Heq.",
            "VernacExtend",
            "3b56967d502b742a4c3cd7b369c434dc21fed539"
        ],
        [
            "clear.",
            "VernacExtend",
            "086ee0db0bdefcfa1ec15bb5cd44d451de64c569"
        ],
        [
            "case sx ; case sy ; try easy ; intros Heq ; apply False_ind ; revert Heq.",
            "VernacExtend",
            "4ebe3791c7606ddcfd2ea542b2fbd899e369aab5"
        ],
        [
            "apply Rlt_not_eq.",
            "VernacExtend",
            "4d888fdf05ab3816c2e650b03b478096db638cf5"
        ],
        [
            "apply Rlt_trans with R0.",
            "VernacExtend",
            "b3368a8c294b6b2354245a3ffce628f4ce865443"
        ],
        [
            "now apply F2R_lt_0_compat.",
            "VernacExtend",
            "49795aa14bce980bd770acc759456462f1e2dbb2"
        ],
        [
            "now apply F2R_gt_0_compat.",
            "VernacExtend",
            "2b5a1cb2582ac2d074766e6b65adcf42b088a406"
        ],
        [
            "apply Rgt_not_eq.",
            "VernacExtend",
            "8860a9193cfdaf1f0316f8df1f2c0781738e5ef7"
        ],
        [
            "apply Rgt_trans with R0.",
            "VernacExtend",
            "010c0753f95e189ac2720704a3af2cce3efc7091"
        ],
        [
            "now apply F2R_gt_0_compat.",
            "VernacExtend",
            "2b5a1cb2582ac2d074766e6b65adcf42b088a406"
        ],
        [
            "now apply F2R_lt_0_compat.",
            "VernacExtend",
            "49795aa14bce980bd770acc759456462f1e2dbb2"
        ],
        [
            "assert (mx = my /\\ ex = ey).",
            "VernacExtend",
            "b2ff1d445c5abe2517647ae169a77cacb7952cc4"
        ],
        [
            "refine (_ (canonic_unicity _ fexp _ _ _ _ Heq)).",
            "VernacExtend",
            "c20dcbf1087ed40db843044ae8161817d69482f9"
        ],
        [
            "rewrite Hs.",
            "VernacExtend",
            "ddea6993e3e1146e762703b9c4c45fb5767a9a44"
        ],
        [
            "now case sy ; intro H ; injection H ; split.",
            "VernacExtend",
            "9c67324310357a2db892415482b48fb6af6aa91f"
        ],
        [
            "apply canonic_canonic_mantissa.",
            "VernacExtend",
            "e71d83b1961bdc9255faa69fbb1351759cae44c7"
        ],
        [
            "exact (proj1 (andb_prop _ _ Hx)).",
            "VernacExtend",
            "60c71648b23b6e101277e97671ca911d4d36c877"
        ],
        [
            "apply canonic_canonic_mantissa.",
            "VernacExtend",
            "e71d83b1961bdc9255faa69fbb1351759cae44c7"
        ],
        [
            "exact (proj1 (andb_prop _ _ Hy)).",
            "VernacExtend",
            "7d5b26dc073aeaaf71cc6a16b65a985eda69619f"
        ],
        [
            "revert Hx.",
            "VernacExtend",
            "6f33b03350f7d5550754ef79fc319be630ae9ecd"
        ],
        [
            "rewrite Hs, (proj1 H), (proj2 H).",
            "VernacExtend",
            "ff39e7587b6cee0e008ef75e05abfe2410744b8b"
        ],
        [
            "intros Hx.",
            "VernacExtend",
            "9276b72df3a882c9b4b954c90d9e870c80a906fc"
        ],
        [
            "apply f_equal.",
            "VernacExtend",
            "ba856cbef3c8e84dcef77c91c8515b497874875b"
        ],
        [
            "apply eqbool_irrelevance.",
            "VernacExtend",
            "6f790ea987c8c669e4c029faf51343c78c120fa3"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Definition Bsign x := match x with | B754_nan s _ => s | B754_zero s => s | B754_infinity s => s | B754_finite s _ _ _ => s end.",
            "VernacDefinition",
            "e4364b5b4bca9891946bfe908ec9f5b84e30b0db"
        ],
        [
            "Definition sign_FF x := match x with | F754_nan s _ => s | F754_zero s => s | F754_infinity s => s | F754_finite s _ _ => s end.",
            "VernacDefinition",
            "b6f9a953ef271e011bb2d5f78197625c9411c93e"
        ],
        [
            "Theorem Bsign_FF2B : forall x H, Bsign (FF2B x H) = sign_FF x.",
            "VernacStartTheoremProof",
            "7d55780354c562ef0c4cc5d249d853d17a7037f3"
        ],
        [
            "now intros [sx|sx|sx plx|sx mx ex] H.",
            "VernacExtend",
            "bf60868319f7dc99b06f50fd344d1be9f818ff4e"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Definition is_finite f := match f with | B754_finite _ _ _ _ => true | B754_zero _ => true | _ => false end.",
            "VernacDefinition",
            "fc34915758952add7e1893ffb7d8be798f3caae7"
        ],
        [
            "Definition is_finite_FF f := match f with | F754_finite _ _ _ => true | F754_zero _ => true | _ => false end.",
            "VernacDefinition",
            "0a68e5ca8e1284d9c553cbb9be0ba9e69a00d35b"
        ],
        [
            "Theorem is_finite_FF2B : forall x Hx, is_finite (FF2B x Hx) = is_finite_FF x.",
            "VernacStartTheoremProof",
            "4e1a4a14e237177fafa0bcf5080c0d4191083864"
        ],
        [
            "now intros [| | |].",
            "VernacExtend",
            "71bcb017101d628725b152755a699746dbe7eb6d"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Theorem is_finite_FF_B2FF : forall x, is_finite_FF (B2FF x) = is_finite x.",
            "VernacStartTheoremProof",
            "f3072b6e8d3549a3a54caf03536e8232c51de1f0"
        ],
        [
            "now intros [| |? []|].",
            "VernacExtend",
            "9e033368a6f922e7d5b3e7d01045ae4db8704996"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Theorem B2R_Bsign_inj: forall x y : binary_float, is_finite x = true -> is_finite y = true -> B2R x = B2R y -> Bsign x = Bsign y -> x = y.",
            "VernacStartTheoremProof",
            "3b84ee9890dfbbf8fb54c8a5e2843cfba5c4738e"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "destruct x, y; try (apply B2R_inj; now eauto).",
            "VernacExtend",
            "523dd48f280a73e5b72d8c473774a4de05c75eb0"
        ],
        [
            "-",
            "VernacBullet",
            "581cab4bf49fa4b495e569bbda96fc8d28fddcc0"
        ],
        [
            "simpl in H2.",
            "VernacExtend",
            "b1e247c43b6623097ab13813b4de664287dd4249"
        ],
        [
            "congruence.",
            "VernacExtend",
            "d8c818f6cffeaee6a722a71acc77f2d6e5199eb9"
        ],
        [
            "-",
            "VernacBullet",
            "581cab4bf49fa4b495e569bbda96fc8d28fddcc0"
        ],
        [
            "symmetry in H1.",
            "VernacExtend",
            "f7b1eec3579cf9c7bc576c77a03265fe014ab9a1"
        ],
        [
            "apply Rmult_integral in H1.",
            "VernacExtend",
            "d8e4ce3738e93bb163f4a1211254b22c7ebcd1e0"
        ],
        [
            "destruct H1.",
            "VernacExtend",
            "e752c2122f55c888e09082f784a6da990b01fbe7"
        ],
        [
            "apply (eq_Z2R _ 0) in H1.",
            "VernacExtend",
            "ea62932cfa630b7d6100516dcc5dd0b1fb92ef07"
        ],
        [
            "destruct b0; discriminate H1.",
            "VernacExtend",
            "e0e53dd177b760ae7feb056a225ec9c0eeaf080a"
        ],
        [
            "simpl in H1.",
            "VernacExtend",
            "8e8db7ad05fc7a69fb83eaedd7fb1e86ee74784d"
        ],
        [
            "pose proof (bpow_gt_0 radix2 e).",
            "VernacExtend",
            "939206e0da1c6bacd5181b4e8496ecec4d3437af"
        ],
        [
            "rewrite H1 in H3.",
            "VernacExtend",
            "1a5bd25c47245138a7a03e032524fd4066f525ce"
        ],
        [
            "apply Rlt_irrefl in H3.",
            "VernacExtend",
            "9f69316837f9565eb674fc91608dc65cef4a1ec9"
        ],
        [
            "destruct H3.",
            "VernacExtend",
            "1c0230aafd4a4c88f93d392a681d452fd6dea35e"
        ],
        [
            "-",
            "VernacBullet",
            "581cab4bf49fa4b495e569bbda96fc8d28fddcc0"
        ],
        [
            "apply Rmult_integral in H1.",
            "VernacExtend",
            "d8e4ce3738e93bb163f4a1211254b22c7ebcd1e0"
        ],
        [
            "destruct H1.",
            "VernacExtend",
            "e752c2122f55c888e09082f784a6da990b01fbe7"
        ],
        [
            "apply (eq_Z2R _ 0) in H1.",
            "VernacExtend",
            "ea62932cfa630b7d6100516dcc5dd0b1fb92ef07"
        ],
        [
            "destruct b; discriminate H1.",
            "VernacExtend",
            "63fd1f97c89e67e34374604c417ef8ec1dde22e8"
        ],
        [
            "simpl in H1.",
            "VernacExtend",
            "8e8db7ad05fc7a69fb83eaedd7fb1e86ee74784d"
        ],
        [
            "pose proof (bpow_gt_0 radix2 e).",
            "VernacExtend",
            "939206e0da1c6bacd5181b4e8496ecec4d3437af"
        ],
        [
            "rewrite H1 in H3.",
            "VernacExtend",
            "1a5bd25c47245138a7a03e032524fd4066f525ce"
        ],
        [
            "apply Rlt_irrefl in H3.",
            "VernacExtend",
            "9f69316837f9565eb674fc91608dc65cef4a1ec9"
        ],
        [
            "destruct H3.",
            "VernacExtend",
            "1c0230aafd4a4c88f93d392a681d452fd6dea35e"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Definition is_nan f := match f with | B754_nan _ _ => true | _ => false end.",
            "VernacDefinition",
            "88dfadb0d7592c1a6e4d7edf8e4bb7ddcef6e132"
        ],
        [
            "Definition is_nan_FF f := match f with | F754_nan _ _ => true | _ => false end.",
            "VernacDefinition",
            "9ddc72326811ab3a201365728041e67771a6a5a8"
        ],
        [
            "Theorem is_nan_FF2B : forall x Hx, is_nan (FF2B x Hx) = is_nan_FF x.",
            "VernacStartTheoremProof",
            "b2b1e47c6b37eeea4661a360b8128ca17ba88ef4"
        ],
        [
            "now intros [| | |].",
            "VernacExtend",
            "71bcb017101d628725b152755a699746dbe7eb6d"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Theorem is_nan_FF_B2FF : forall x, is_nan_FF (B2FF x) = is_nan x.",
            "VernacStartTheoremProof",
            "6c6e2393f636d2eeff0ce2e20606ea8d0eee12d4"
        ],
        [
            "now intros [| |? []|].",
            "VernacExtend",
            "9e033368a6f922e7d5b3e7d01045ae4db8704996"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Definition Bopp opp_nan x := match x with | B754_nan sx plx => let '(sres, plres) := opp_nan sx plx in B754_nan sres plres | B754_infinity sx => B754_infinity (negb sx) | B754_finite sx mx ex Hx => B754_finite (negb sx) mx ex Hx | B754_zero sx => B754_zero (negb sx) end.",
            "VernacDefinition",
            "698625958431925e69f0602c3664a0d6732172d7"
        ],
        [
            "Theorem Bopp_involutive : forall opp_nan x, is_nan x = false -> Bopp opp_nan (Bopp opp_nan x) = x.",
            "VernacStartTheoremProof",
            "42143314e8bbf6354aaeff56394a9313fee1bff1"
        ],
        [
            "now intros opp_nan [sx|sx|sx plx|sx mx ex Hx] ; simpl ; try rewrite Bool.negb_involutive.",
            "VernacExtend",
            "7fd9535a18f4046eb3ccd047d90fa09d99836ac5"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Theorem B2R_Bopp : forall opp_nan x, B2R (Bopp opp_nan x) = (- B2R x)%R.",
            "VernacStartTheoremProof",
            "2ed1143b70e7b1dc8313b5db6c0c6c346b252274"
        ],
        [
            "intros opp_nan [sx|sx|sx plx|sx mx ex Hx]; apply sym_eq ; try apply Ropp_0.",
            "VernacExtend",
            "37f03349fe325f08c20fa93bec8e8a3c01d7740d"
        ],
        [
            "simpl.",
            "VernacExtend",
            "1b93169f4cf876d207c1fab22a2347202ab48d85"
        ],
        [
            "destruct opp_nan.",
            "VernacExtend",
            "fba3f7a1bf744fa377bac136dc8f9f61b551b8ea"
        ],
        [
            "apply Ropp_0.",
            "VernacExtend",
            "47cff39407a1cebe5fba9237cee9d56885ff4336"
        ],
        [
            "simpl.",
            "VernacExtend",
            "1b93169f4cf876d207c1fab22a2347202ab48d85"
        ],
        [
            "rewrite <- F2R_opp.",
            "VernacExtend",
            "c79f36956df0a657acacbc3517318f048ab6de55"
        ],
        [
            "now case sx.",
            "VernacExtend",
            "82d311e3e5eb1345ffa9abe0d08918457fb81beb"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Theorem is_finite_Bopp : forall opp_nan x, is_finite (Bopp opp_nan x) = is_finite x.",
            "VernacStartTheoremProof",
            "b7a20327d26425281eaadc7e0d3a37ac392b200b"
        ],
        [
            "intros opp_nan [| |s pl|] ; try easy.",
            "VernacExtend",
            "2cae4059944cc71bb9add4e0dbd537ddabb6ff90"
        ],
        [
            "simpl.",
            "VernacExtend",
            "1b93169f4cf876d207c1fab22a2347202ab48d85"
        ],
        [
            "now case opp_nan.",
            "VernacExtend",
            "274f20ca039be2d277115488995691e0ecb81e8e"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Definition Babs abs_nan (x : binary_float) : binary_float := match x with | B754_nan sx plx => let '(sres, plres) := abs_nan sx plx in B754_nan sres plres | B754_infinity sx => B754_infinity false | B754_finite sx mx ex Hx => B754_finite false mx ex Hx | B754_zero sx => B754_zero false end.",
            "VernacDefinition",
            "d98e6f34f75b1ef63ace6d415e8bae8d83ae0d08"
        ],
        [
            "Theorem B2R_Babs : forall abs_nan x, B2R (Babs abs_nan x) = Rabs (B2R x).",
            "VernacStartTheoremProof",
            "8f67cbf8e8a0470ac59ee7caef461cf16d49cb42"
        ],
        [
            "intros abs_nan [sx|sx|sx plx|sx mx ex Hx]; apply sym_eq ; try apply Rabs_R0.",
            "VernacExtend",
            "747c127298baf2a17c4e31c29ba6589ddef171f5"
        ],
        [
            "simpl.",
            "VernacExtend",
            "1b93169f4cf876d207c1fab22a2347202ab48d85"
        ],
        [
            "destruct abs_nan.",
            "VernacExtend",
            "577f64975c88c25538befc89d6af45128491cb72"
        ],
        [
            "simpl.",
            "VernacExtend",
            "1b93169f4cf876d207c1fab22a2347202ab48d85"
        ],
        [
            "apply Rabs_R0.",
            "VernacExtend",
            "6609b4ab82fe57e983c51e226262c9d533442a79"
        ],
        [
            "simpl.",
            "VernacExtend",
            "1b93169f4cf876d207c1fab22a2347202ab48d85"
        ],
        [
            "rewrite <- F2R_abs.",
            "VernacExtend",
            "f45286a0077c940636f0e44760db3e0ff2184dd3"
        ],
        [
            "now destruct sx.",
            "VernacExtend",
            "d3f05ba117037a2da8bbc686cb11dbdf34aa0a0f"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Theorem is_finite_Babs : forall abs_nan x, is_finite (Babs abs_nan x) = is_finite x.",
            "VernacStartTheoremProof",
            "05e66fff4062a5cc47cefd1b619e3cfb16551ef0"
        ],
        [
            "intros abs_nan [| |s pl|] ; try easy.",
            "VernacExtend",
            "677248c2cf5d17a6583e9a1b361ce3b866353bc3"
        ],
        [
            "simpl.",
            "VernacExtend",
            "1b93169f4cf876d207c1fab22a2347202ab48d85"
        ],
        [
            "now case abs_nan.",
            "VernacExtend",
            "ec581d28709c26221ad35cae60c7145458779543"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Theorem Bsign_Babs : forall abs_nan x, is_nan x = false -> Bsign (Babs abs_nan x) = false.",
            "VernacStartTheoremProof",
            "80efa0f486cf2c600ecc70f1c568faadd0a78d6b"
        ],
        [
            "now intros abs_nan [| | |].",
            "VernacExtend",
            "42c5c4c2e4388996b63fe6fddda87f303b8d0814"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Theorem Babs_idempotent : forall abs_nan (x: binary_float), is_nan x = false -> Babs abs_nan (Babs abs_nan x) = Babs abs_nan x.",
            "VernacStartTheoremProof",
            "24eda9102249e19924384d6b87642c265066444c"
        ],
        [
            "now intros abs_nan [sx|sx|sx plx|sx mx ex Hx].",
            "VernacExtend",
            "a1d56f3324a7a9d45175a78a99cba3a6adf33677"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Theorem Babs_Bopp : forall abs_nan opp_nan x, is_nan x = false -> Babs abs_nan (Bopp opp_nan x) = Babs abs_nan x.",
            "VernacStartTheoremProof",
            "0826b6dd6beadc09a2c91afc89deee0a0a36c85f"
        ],
        [
            "now intros abs_nan opp_nan [| | |].",
            "VernacExtend",
            "8ea0c91f8e5d5d12141781a398eeb8365ff5f4e7"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Definition Bcompare (f1 f2 : binary_float) : option comparison := match f1, f2 with | B754_nan _ _,_ | _,B754_nan _ _ => None | B754_infinity true, B754_infinity true | B754_infinity false, B754_infinity false => Some Eq | B754_infinity true, _ => Some Lt | B754_infinity false, _ => Some Gt | _, B754_infinity true => Some Gt | _, B754_infinity false => Some Lt | B754_finite true _ _ _, B754_zero _ => Some Lt | B754_finite false _ _ _, B754_zero _ => Some Gt | B754_zero _, B754_finite true _ _ _ => Some Gt | B754_zero _, B754_finite false _ _ _ => Some Lt | B754_zero _, B754_zero _ => Some Eq | B754_finite s1 m1 e1 _, B754_finite s2 m2 e2 _ => match s1, s2 with | true, false => Some Lt | false, true => Some Gt | false, false => match Zcompare e1 e2 with | Lt => Some Lt | Gt => Some Gt | Eq => Some (Pcompare m1 m2 Eq) end | true, true => match Zcompare e1 e2 with | Lt => Some Gt | Gt => Some Lt | Eq => Some (CompOpp (Pcompare m1 m2 Eq)) end end end.",
            "VernacDefinition",
            "c5796907d11d88b72443dfb256b2e2fdbca5df79"
        ],
        [
            "Theorem Bcompare_correct : forall f1 f2, is_finite f1 = true -> is_finite f2 = true -> Bcompare f1 f2 = Some (Rcompare (B2R f1) (B2R f2)).",
            "VernacStartTheoremProof",
            "d02647383c4dddc6bed34e4584123e90a7fecaf8"
        ],
        [
            "Ltac apply_Rcompare := match goal with | [ |- Some Lt = Some (Rcompare _ _) ] => f_equal; symmetry; apply Rcompare_Lt | [ |- Some Eq = Some (Rcompare _ _) ] => f_equal; symmetry; apply Rcompare_Eq | [ |- Some Gt = Some (Rcompare _ _) ] => f_equal; symmetry; apply Rcompare_Gt end.",
            "VernacExtend",
            "1af8f71472ac8cf9162f35804df4457719c20a67"
        ],
        [
            "unfold Bcompare; intros.",
            "VernacExtend",
            "aa013d78c10700b726c787d81a848cfab33406ce"
        ],
        [
            "destruct f1, f2 ; try easy.",
            "VernacExtend",
            "bcaf2667926e42814abe02b99abff999c0f101ef"
        ],
        [
            "now rewrite Rcompare_Eq.",
            "VernacExtend",
            "748b4211c14883f452b0a50c01d3a09ed3c14aaf"
        ],
        [
            "destruct b0 ; apply_Rcompare.",
            "VernacExtend",
            "bf1d77d7bfd11fc95707618ccf95e734f0980471"
        ],
        [
            "now apply F2R_lt_0_compat.",
            "VernacExtend",
            "49795aa14bce980bd770acc759456462f1e2dbb2"
        ],
        [
            "now apply F2R_gt_0_compat.",
            "VernacExtend",
            "2b5a1cb2582ac2d074766e6b65adcf42b088a406"
        ],
        [
            "destruct b ; apply_Rcompare.",
            "VernacExtend",
            "3f7a638999602ddea1917532af831b5e2bd52830"
        ],
        [
            "now apply F2R_lt_0_compat.",
            "VernacExtend",
            "49795aa14bce980bd770acc759456462f1e2dbb2"
        ],
        [
            "now apply F2R_gt_0_compat.",
            "VernacExtend",
            "2b5a1cb2582ac2d074766e6b65adcf42b088a406"
        ],
        [
            "simpl.",
            "VernacExtend",
            "1b93169f4cf876d207c1fab22a2347202ab48d85"
        ],
        [
            "clear H H0.",
            "VernacExtend",
            "a743351ff441835fe992d483bf3a5b58c3fccd77"
        ],
        [
            "apply andb_prop in e0; destruct e0; apply (canonic_canonic_mantissa false) in H.",
            "VernacExtend",
            "bf645ba542f7f9dc398a566f1160509542947c72"
        ],
        [
            "apply andb_prop in e2; destruct e2; apply (canonic_canonic_mantissa false) in H1.",
            "VernacExtend",
            "9b7754df75ea7ec5dd7dc68d4a940a3dbe4002bc"
        ],
        [
            "pose proof (Zcompare_spec e e1); unfold canonic, Fexp in H1, H.",
            "VernacExtend",
            "6cbf3aec45ee39ba364ed33e3b7af17537c4fec5"
        ],
        [
            "assert (forall m1 m2 e1 e2, let x := (Z2R (Zpos m1) * bpow radix2 e1)%R in let y := (Z2R (Zpos m2) * bpow radix2 e2)%R in (canonic_exp radix2 fexp x < canonic_exp radix2 fexp y)%Z -> (x < y)%R).",
            "VernacExtend",
            "2f8f18086a07452b46f9c6f04f74148c4d23e2d2"
        ],
        [
            "{",
            "VernacSubproof",
            "184cabd02aa0a33f23f10474ea95789b1f149361"
        ],
        [
            "intros; apply Rnot_le_lt; intro; apply (ln_beta_le radix2) in H5.",
            "VernacExtend",
            "295d205546aa501b9d139d9a7537676ed45c5f0f"
        ],
        [
            "apply Zlt_not_le with (1 := H4).",
            "VernacExtend",
            "6e7d744689c64e291d63cddd669d315ea1ea306a"
        ],
        [
            "now apply fexp_monotone.",
            "VernacExtend",
            "68ac7464cdd67cc087827a8646fe96bd43105304"
        ],
        [
            "now apply (F2R_gt_0_compat _ (Float radix2 (Zpos m2) e2)).",
            "VernacExtend",
            "87aba0845f8fd6a40a5566a65fcbf5dd94d31cc1"
        ],
        [
            "}",
            "VernacEndSubproof",
            "85f27874ef16421341373f4b062b6d1605043af9"
        ],
        [
            "assert (forall m1 m2 e1 e2, (Z2R (- Zpos m1) * bpow radix2 e1 < Z2R (Zpos m2) * bpow radix2 e2)%R).",
            "VernacExtend",
            "d1559190b77379f0ef021df5281c0f591aad57d7"
        ],
        [
            "{",
            "VernacSubproof",
            "184cabd02aa0a33f23f10474ea95789b1f149361"
        ],
        [
            "intros; apply (Rlt_trans _ 0%R).",
            "VernacExtend",
            "b381b8e40bfa4302df3b475a61216746ac347b3e"
        ],
        [
            "now apply (F2R_lt_0_compat _ (Float radix2 (Zneg m1) e0)).",
            "VernacExtend",
            "d3c3775c93bab433b97e6360991dbda58137ac44"
        ],
        [
            "now apply (F2R_gt_0_compat _ (Float radix2 (Zpos m2) e2)).",
            "VernacExtend",
            "87aba0845f8fd6a40a5566a65fcbf5dd94d31cc1"
        ],
        [
            "}",
            "VernacEndSubproof",
            "85f27874ef16421341373f4b062b6d1605043af9"
        ],
        [
            "unfold F2R, Fnum, Fexp.",
            "VernacExtend",
            "3040f6de59c589c20916bdba7847334efbee7c3f"
        ],
        [
            "destruct b, b0; try (now apply_Rcompare; apply H5); inversion H3; try (apply_Rcompare; apply H4; rewrite H, H1 in H7; assumption); try (apply_Rcompare; do 2 rewrite Z2R_opp, Ropp_mult_distr_l_reverse; apply Ropp_lt_contravar; apply H4; rewrite H, H1 in H7; assumption); rewrite H7, Rcompare_mult_r, Rcompare_Z2R by (apply bpow_gt_0); reflexivity.",
            "VernacExtend",
            "b764a1b94598460327e570685166d675ee1b7914"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Theorem Bcompare_swap : forall x y, Bcompare y x = match Bcompare x y with Some c => Some (CompOpp c) | None => None end.",
            "VernacStartTheoremProof",
            "63edbe2ef6b2f0e1a0f0bb13575776db841889cd"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "destruct x as [ ? | [] | ? ? | [] mx ex Bx ]; destruct y as [ ? | [] | ? ? | [] my ey By ]; simpl; try easy.",
            "VernacExtend",
            "1d746a5edd8f0bb5cd3d2afafdf51b8be506c165"
        ],
        [
            "-",
            "VernacBullet",
            "581cab4bf49fa4b495e569bbda96fc8d28fddcc0"
        ],
        [
            "rewrite <- (Zcompare_antisym ex ey).",
            "VernacExtend",
            "36fde77c17e1b14c20741a2515568987fe1dbd4f"
        ],
        [
            "destruct (ex ?= ey)%Z; try easy.",
            "VernacExtend",
            "ff135b372adac0267f751e02671d6790ebaba366"
        ],
        [
            "now rewrite (Pcompare_antisym mx my).",
            "VernacExtend",
            "afe1ddcc31fc773e849dcdd56d663b9c44624b08"
        ],
        [
            "-",
            "VernacBullet",
            "581cab4bf49fa4b495e569bbda96fc8d28fddcc0"
        ],
        [
            "rewrite <- (Zcompare_antisym ex ey).",
            "VernacExtend",
            "36fde77c17e1b14c20741a2515568987fe1dbd4f"
        ],
        [
            "destruct (ex ?= ey)%Z; try easy.",
            "VernacExtend",
            "ff135b372adac0267f751e02671d6790ebaba366"
        ],
        [
            "now rewrite Pcompare_antisym.",
            "VernacExtend",
            "bf1d6f0da66508759a92eae28cd1188962b4ad11"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Theorem bounded_lt_emax : forall mx ex, bounded mx ex = true -> (F2R (Float radix2 (Zpos mx) ex) < bpow radix2 emax)%R.",
            "VernacStartTheoremProof",
            "b79385fde0ef2a25faf385c50a43b35347464cd1"
        ],
        [
            "intros mx ex Hx.",
            "VernacExtend",
            "fa4c43168072d0c2d7997a411c4bbe70c75c43ce"
        ],
        [
            "destruct (andb_prop _ _ Hx) as (H1,H2).",
            "VernacExtend",
            "3483285fda7c99d0d64422478b0a45727180885b"
        ],
        [
            "generalize (Zeq_bool_eq _ _ H1).",
            "VernacExtend",
            "7244ac59e41eb2b85ec96b3f392d6e81aba65d33"
        ],
        [
            "clear H1.",
            "VernacExtend",
            "c05bbc655b5fdcbbabbab72bd73c28fb300d5502"
        ],
        [
            "intro H1.",
            "VernacExtend",
            "d2fcc9516b33dbca4f189b9ddbee105efc1235d1"
        ],
        [
            "generalize (Zle_bool_imp_le _ _ H2).",
            "VernacExtend",
            "175b0dabb56bc0279b26ee25582be0bae8070944"
        ],
        [
            "clear H2.",
            "VernacExtend",
            "d86cdda4c02f9faf6d4c6694d967beddb27ce36a"
        ],
        [
            "intro H2.",
            "VernacExtend",
            "dec8eeff0df79bb9fb9b43f21bb02b0e6c67c603"
        ],
        [
            "generalize (ln_beta_F2R_Zdigits radix2 (Zpos mx) ex).",
            "VernacExtend",
            "dd9f70d1f80149533362dd4c5bc366e6da59933d"
        ],
        [
            "destruct (ln_beta radix2 (F2R (Float radix2 (Zpos mx) ex))) as (e',Ex).",
            "VernacExtend",
            "ef0ccb09e024ce0abf3103d9265378ebc76a5069"
        ],
        [
            "unfold ln_beta_val.",
            "VernacExtend",
            "b034fc8e934678f9602d7e8daaaeb056a7d38ec2"
        ],
        [
            "intros H.",
            "VernacExtend",
            "5cfae87a34fa7b59a257c9640f1b674f6e6d780b"
        ],
        [
            "apply Rlt_le_trans with (bpow radix2 e').",
            "VernacExtend",
            "e297b6f22ff83fd341285556aa1d1fa0fa7014d3"
        ],
        [
            "change (Zpos mx) with (Zabs (Zpos mx)).",
            "VernacExtend",
            "992fdf2143df6b424a24976b11b270ce9c5f4bbb"
        ],
        [
            "rewrite F2R_Zabs.",
            "VernacExtend",
            "66f910e5a29dea24936afff0b12cbc4a00a79405"
        ],
        [
            "apply Ex.",
            "VernacExtend",
            "731a0b1d525e39ed5cef08f414754edbca20bc6e"
        ],
        [
            "apply Rgt_not_eq.",
            "VernacExtend",
            "8860a9193cfdaf1f0316f8df1f2c0781738e5ef7"
        ],
        [
            "now apply F2R_gt_0_compat.",
            "VernacExtend",
            "2b5a1cb2582ac2d074766e6b65adcf42b088a406"
        ],
        [
            "apply bpow_le.",
            "VernacExtend",
            "9264f19c0062a0a711efc832825406a995342e90"
        ],
        [
            "rewrite H.",
            "VernacExtend",
            "6192df8b89486a3ba89a78e26e0d70cae2dc94c2"
        ],
        [
            "2: discriminate.",
            "VernacExtend",
            "cc7f3ed5b34fc879b6555e1623990b6ccce02136"
        ],
        [
            "revert H1.",
            "VernacExtend",
            "f960614533a2a55b448cbf376832532eaf449c34"
        ],
        [
            "clear -H2.",
            "VernacExtend",
            "df3dc56b8cb8ec54f9503844cf7d5b731417589e"
        ],
        [
            "rewrite Zpos_digits2_pos.",
            "VernacExtend",
            "2b538c3fe7142af5b05ea277f48ca7eaf108af74"
        ],
        [
            "unfold fexp, FLT_exp.",
            "VernacExtend",
            "d790a7e5d03d5c9606c08f62c52b1a3604ada64e"
        ],
        [
            "generalize (Zdigits radix2 (Zpos mx)).",
            "VernacExtend",
            "38ab2b7125587e006c013bef62d5ff7d60143016"
        ],
        [
            "clearbody emin.",
            "VernacExtend",
            "41dddc68aecf16a89339402e6479c1362cd290d3"
        ],
        [
            "intros ; zify ; omega.",
            "VernacExtend",
            "2f260b1afd7f17514ee3510df6d10fbf75ea73e7"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Theorem abs_B2R_lt_emax : forall x, (Rabs (B2R x) < bpow radix2 emax)%R.",
            "VernacStartTheoremProof",
            "599b440b64eaadd1b7509d09c76c0bb4a5ff9ffa"
        ],
        [
            "intros [sx|sx|sx plx|sx mx ex Hx] ; simpl ; try ( rewrite Rabs_R0 ; apply bpow_gt_0 ).",
            "VernacExtend",
            "8737e3a12212191fd456c468680f0d4e36d8b834"
        ],
        [
            "rewrite <- F2R_Zabs, abs_cond_Zopp.",
            "VernacExtend",
            "b94ba1d500b331c8ad439fb5282f1460bc7b1e90"
        ],
        [
            "now apply bounded_lt_emax.",
            "VernacExtend",
            "a84b4b45c2d6d4db987de330c7a7cc300348fb3f"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Theorem bounded_canonic_lt_emax : forall mx ex, canonic radix2 fexp (Float radix2 (Zpos mx) ex) -> (F2R (Float radix2 (Zpos mx) ex) < bpow radix2 emax)%R -> bounded mx ex = true.",
            "VernacStartTheoremProof",
            "37cf34cb6a7ec7ffa976b629c2923f9d77b0d396"
        ],
        [
            "intros mx ex Cx Bx.",
            "VernacExtend",
            "ef86260d2369d1c5b441999d6ec005e300ffe149"
        ],
        [
            "apply andb_true_intro.",
            "VernacExtend",
            "568074f8ecdece0f16c49f5bea6e2c18016f95d3"
        ],
        [
            "split.",
            "VernacExtend",
            "55abc140132bd88981001ac656020469a8d503eb"
        ],
        [
            "unfold canonic_mantissa.",
            "VernacExtend",
            "23daaf4ea7968c6d7811bd9970e089939445136a"
        ],
        [
            "unfold canonic, Fexp in Cx.",
            "VernacExtend",
            "bc1dc9cd7413d856b9a044d2d74b0a5be7274a1e"
        ],
        [
            "rewrite Cx at 2.",
            "VernacExtend",
            "8da1ee29939d3dda27f807bfb988da56fd39940b"
        ],
        [
            "rewrite Zpos_digits2_pos.",
            "VernacExtend",
            "2b538c3fe7142af5b05ea277f48ca7eaf108af74"
        ],
        [
            "unfold canonic_exp.",
            "VernacExtend",
            "993fc99c30cdbd2e74bd71e0fd5e49f000dffb04"
        ],
        [
            "rewrite ln_beta_F2R_Zdigits.",
            "VernacExtend",
            "0e6182cc64c2ad4bc57501af40a53f1a50e13f85"
        ],
        [
            "2: discriminate.",
            "VernacExtend",
            "cc7f3ed5b34fc879b6555e1623990b6ccce02136"
        ],
        [
            "now apply -> Zeq_is_eq_bool.",
            "VernacExtend",
            "9548525de0eabd601ba69f4ca536fff6512c270b"
        ],
        [
            "apply Zle_bool_true.",
            "VernacExtend",
            "cedbf2127af00d6482f0cd9a5f9b705e3d351b24"
        ],
        [
            "unfold canonic, Fexp in Cx.",
            "VernacExtend",
            "bc1dc9cd7413d856b9a044d2d74b0a5be7274a1e"
        ],
        [
            "rewrite Cx.",
            "VernacExtend",
            "cf69dd6d93e320edef49389e1b11ce3c31dc5b74"
        ],
        [
            "unfold canonic_exp, fexp, FLT_exp.",
            "VernacExtend",
            "5f942a981b7dab340db3f4ae067d38e670cbd5e5"
        ],
        [
            "destruct (ln_beta radix2 (F2R (Float radix2 (Zpos mx) ex))) as (e',Ex).",
            "VernacExtend",
            "ef0ccb09e024ce0abf3103d9265378ebc76a5069"
        ],
        [
            "simpl.",
            "VernacExtend",
            "1b93169f4cf876d207c1fab22a2347202ab48d85"
        ],
        [
            "apply Zmax_lub.",
            "VernacExtend",
            "396ed70d46a5f06cb690cbad94525d641684bf9c"
        ],
        [
            "cut (e' - 1 < emax)%Z.",
            "VernacExtend",
            "659a14853080e0e37e01ceb9177bcf67fd0b6561"
        ],
        [
            "clear ; omega.",
            "VernacExtend",
            "eec4b40e7fab9dab9db362824141f438dba9b179"
        ],
        [
            "apply lt_bpow with radix2.",
            "VernacExtend",
            "fc7e246baa652ac458cb36b2e5f29d601c9aa699"
        ],
        [
            "apply Rle_lt_trans with (2 := Bx).",
            "VernacExtend",
            "755f1a55c5a0c3533bb4dff1c28080395936c462"
        ],
        [
            "change (Zpos mx) with (Zabs (Zpos mx)).",
            "VernacExtend",
            "992fdf2143df6b424a24976b11b270ce9c5f4bbb"
        ],
        [
            "rewrite F2R_Zabs.",
            "VernacExtend",
            "66f910e5a29dea24936afff0b12cbc4a00a79405"
        ],
        [
            "apply Ex.",
            "VernacExtend",
            "731a0b1d525e39ed5cef08f414754edbca20bc6e"
        ],
        [
            "apply Rgt_not_eq.",
            "VernacExtend",
            "8860a9193cfdaf1f0316f8df1f2c0781738e5ef7"
        ],
        [
            "now apply F2R_gt_0_compat.",
            "VernacExtend",
            "2b5a1cb2582ac2d074766e6b65adcf42b088a406"
        ],
        [
            "unfold emin.",
            "VernacExtend",
            "3fff444b9eede7682b5d216fb49ade0df5718e8c"
        ],
        [
            "generalize (prec_gt_0 prec).",
            "VernacExtend",
            "f827b434a598a8eb871cd50fd31ccf4bfded79d5"
        ],
        [
            "clear -Hmax ; omega.",
            "VernacExtend",
            "3984299dde31268ac85ebbe94e4ce6dd7dbd4c8e"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Record shr_record := { shr_m : Z ; shr_r : bool ; shr_s : bool }.",
            "VernacInductive",
            "ad7b488a1296b20c9f9904051f69114460fee2cd"
        ],
        [
            "Definition shr_1 mrs := let '(Build_shr_record m r s) := mrs in let s := orb r s in match m with | Z0 => Build_shr_record Z0 false s | Zpos xH => Build_shr_record Z0 true s | Zpos (xO p) => Build_shr_record (Zpos p) false s | Zpos (xI p) => Build_shr_record (Zpos p) true s | Zneg xH => Build_shr_record Z0 true s | Zneg (xO p) => Build_shr_record (Zneg p) false s | Zneg (xI p) => Build_shr_record (Zneg p) true s end.",
            "VernacDefinition",
            "63b39be3a8a0ebdd2db13c5bffac3b35a4c3a8b0"
        ],
        [
            "Definition loc_of_shr_record mrs := match mrs with | Build_shr_record _ false false => loc_Exact | Build_shr_record _ false true => loc_Inexact Lt | Build_shr_record _ true false => loc_Inexact Eq | Build_shr_record _ true true => loc_Inexact Gt end.",
            "VernacDefinition",
            "8786b965d8fac2b3102b1454730864123b24128a"
        ],
        [
            "Definition shr_record_of_loc m l := match l with | loc_Exact => Build_shr_record m false false | loc_Inexact Lt => Build_shr_record m false true | loc_Inexact Eq => Build_shr_record m true false | loc_Inexact Gt => Build_shr_record m true true end.",
            "VernacDefinition",
            "8aedfbc46ad85712215139cee2fde8fc6fc0522b"
        ],
        [
            "Theorem shr_m_shr_record_of_loc : forall m l, shr_m (shr_record_of_loc m l) = m.",
            "VernacStartTheoremProof",
            "e4d6720caa3bcdc989250284c46d28107bfb942b"
        ],
        [
            "now intros m [|[| |]].",
            "VernacExtend",
            "dbbf0d9aca6952be85088e26845fc3bd8a6ab4ea"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Theorem loc_of_shr_record_of_loc : forall m l, loc_of_shr_record (shr_record_of_loc m l) = l.",
            "VernacStartTheoremProof",
            "7a2c91c7976f4acd8be574c8b15e3f679c94d771"
        ],
        [
            "now intros m [|[| |]].",
            "VernacExtend",
            "dbbf0d9aca6952be85088e26845fc3bd8a6ab4ea"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Definition shr mrs e n := match n with | Zpos p => (iter_pos shr_1 p mrs, (e + n)%Z) | _ => (mrs, e) end.",
            "VernacDefinition",
            "a4823c13533f7a2f756839bad57b4f018eec4f6a"
        ],
        [
            "Lemma inbetween_shr_1 : forall x mrs e, (0 <= shr_m mrs)%Z -> inbetween_float radix2 (shr_m mrs) e x (loc_of_shr_record mrs) -> inbetween_float radix2 (shr_m (shr_1 mrs)) (e + 1) x (loc_of_shr_record (shr_1 mrs)).",
            "VernacStartTheoremProof",
            "f2c94f896d5ac53ad1b9d4fbe1d56259a05f0051"
        ],
        [
            "intros x mrs e Hm Hl.",
            "VernacExtend",
            "9737776d2b44339f89049e62b058001e04aaa538"
        ],
        [
            "refine (_ (new_location_even_correct (F2R (Float radix2 (shr_m (shr_1 mrs)) (e + 1))) (bpow radix2 e) 2 _ _ _ x (if shr_r (shr_1 mrs) then 1 else 0) (loc_of_shr_record mrs) _ _)) ; try easy.",
            "VernacExtend",
            "2f8ef837545ad5969a84c2aa3b8e4e67b8d0a1c1"
        ],
        [
            "2: apply bpow_gt_0.",
            "VernacExtend",
            "51da9de954089ef32122f575597528986b4f7987"
        ],
        [
            "2: now case (shr_r (shr_1 mrs)) ; split.",
            "VernacExtend",
            "522e0d22f1587d718765d01948114e2c0ddbd0e9"
        ],
        [
            "change (Z2R 2) with (bpow radix2 1).",
            "VernacExtend",
            "ff6caec719b342ed076f00f6b0270326c2526858"
        ],
        [
            "rewrite <- bpow_plus.",
            "VernacExtend",
            "9ebeb3f5611fe78274a1e2e0131c7f7ed66e1cfc"
        ],
        [
            "rewrite (Zplus_comm 1), <- (F2R_bpow radix2 (e + 1)).",
            "VernacExtend",
            "5c4435aa961591fa78199925d6754ce787bb963b"
        ],
        [
            "unfold inbetween_float, F2R.",
            "VernacExtend",
            "7a950aac8673a372615ba8e4310d929f5a834113"
        ],
        [
            "simpl.",
            "VernacExtend",
            "1b93169f4cf876d207c1fab22a2347202ab48d85"
        ],
        [
            "rewrite Z2R_plus, Rmult_plus_distr_r.",
            "VernacExtend",
            "db46553146acbf0f6837d68a69e6c4cae7575298"
        ],
        [
            "replace (new_location_even 2 (if shr_r (shr_1 mrs) then 1%Z else 0%Z) (loc_of_shr_record mrs)) with (loc_of_shr_record (shr_1 mrs)).",
            "VernacExtend",
            "8573ee2b7cb79e7b2940a6f1c1a1264c66c8ab7e"
        ],
        [
            "easy.",
            "VernacExtend",
            "ef1368621ae14ed4e378e6e1c58fbee46db9a962"
        ],
        [
            "clear -Hm.",
            "VernacExtend",
            "6d7757f1711f181dfaaa5e0a03527dc5ff4b3ef2"
        ],
        [
            "destruct mrs as (m, r, s).",
            "VernacExtend",
            "22a9a65d9a24e9c7adcfbd2f00cdcb40e707c330"
        ],
        [
            "now destruct m as [|[m|m|]|m] ; try (now elim Hm) ; destruct r as [|] ; destruct s as [|].",
            "VernacExtend",
            "c9501fad0a9ce49fd0eecc9f7a988b3e88bdf06c"
        ],
        [
            "rewrite (F2R_change_exp radix2 e).",
            "VernacExtend",
            "6873221a3589ad060062528d035b4845d88531af"
        ],
        [
            "2: apply Zle_succ.",
            "VernacExtend",
            "d236b02cedc084aead25b19f816e02bcf3d43653"
        ],
        [
            "unfold F2R.",
            "VernacExtend",
            "01074792470ba071b62f8438b8d9b8c922ca2998"
        ],
        [
            "simpl.",
            "VernacExtend",
            "1b93169f4cf876d207c1fab22a2347202ab48d85"
        ],
        [
            "rewrite <- 2!Rmult_plus_distr_r, <- 2!Z2R_plus.",
            "VernacExtend",
            "98b306dd68d1ad33c46bebf9b729dcd82d4395ce"
        ],
        [
            "rewrite Zplus_assoc.",
            "VernacExtend",
            "0e5fe194ecdfc9efe27c2867b803f58d698b13d8"
        ],
        [
            "replace (shr_m (shr_1 mrs) * 2 ^ (e + 1 - e) + (if shr_r (shr_1 mrs) then 1%Z else 0%Z))%Z with (shr_m mrs).",
            "VernacExtend",
            "ce244acfaf19546b3151d29734eb1f2327a1915d"
        ],
        [
            "exact Hl.",
            "VernacExtend",
            "726a6911ca781f5fae08f27dbd5c9838368eca79"
        ],
        [
            "ring_simplify (e + 1 - e)%Z.",
            "VernacExtend",
            "37e20b81db29bc410bd62a018ff321cd9667c53e"
        ],
        [
            "change (2^1)%Z with 2%Z.",
            "VernacExtend",
            "bd65bf0b833f55709eb3cf320086592b79cd6d7f"
        ],
        [
            "rewrite Zmult_comm.",
            "VernacExtend",
            "2c1282bf165ec7c97fac66d6d60ae4f6ba65e66e"
        ],
        [
            "clear -Hm.",
            "VernacExtend",
            "6d7757f1711f181dfaaa5e0a03527dc5ff4b3ef2"
        ],
        [
            "destruct mrs as (m, r, s).",
            "VernacExtend",
            "22a9a65d9a24e9c7adcfbd2f00cdcb40e707c330"
        ],
        [
            "now destruct m as [|[m|m|]|m] ; try (now elim Hm) ; destruct r as [|] ; destruct s as [|].",
            "VernacExtend",
            "c9501fad0a9ce49fd0eecc9f7a988b3e88bdf06c"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Theorem inbetween_shr : forall x m e l n, (0 <= m)%Z -> inbetween_float radix2 m e x l -> let '(mrs, e') := shr (shr_record_of_loc m l) e n in inbetween_float radix2 (shr_m mrs) e' x (loc_of_shr_record mrs).",
            "VernacStartTheoremProof",
            "b75a7b591bf44e6cdfed309f6a2cd2bb41ceaa38"
        ],
        [
            "intros x m e l n Hm Hl.",
            "VernacExtend",
            "c3b1ada97bb0f64a11d37bba6c86b6f4a1838bfd"
        ],
        [
            "destruct n as [|n|n].",
            "VernacExtend",
            "a9e9765d82901f37b313f4718036aa49039475fc"
        ],
        [
            "now destruct l as [|[| |]].",
            "VernacExtend",
            "ced4e80ef0dd59ee453a79a006fe29303dd26bed"
        ],
        [
            "2: now destruct l as [|[| |]].",
            "VernacExtend",
            "fb2eef7fae017c7ddd42607ba125b575fb538fcd"
        ],
        [
            "unfold shr.",
            "VernacExtend",
            "b0785b9ec45cd18cb02fe6ea9a4f119054b99009"
        ],
        [
            "rewrite iter_pos_nat.",
            "VernacExtend",
            "d973a7c4286e9cc73b36b750614c06694cd47981"
        ],
        [
            "rewrite Zpos_eq_Z_of_nat_o_nat_of_P.",
            "VernacExtend",
            "fcd2cac1c936b65742c5af3307259383cd66d194"
        ],
        [
            "induction (nat_of_P n).",
            "VernacExtend",
            "859e54b06d3b0b8f94d842f1700ff90b3db3662f"
        ],
        [
            "simpl.",
            "VernacExtend",
            "1b93169f4cf876d207c1fab22a2347202ab48d85"
        ],
        [
            "rewrite Zplus_0_r.",
            "VernacExtend",
            "40685e5e9aecf0ea026e1a665e83d962ad02d467"
        ],
        [
            "now destruct l as [|[| |]].",
            "VernacExtend",
            "ced4e80ef0dd59ee453a79a006fe29303dd26bed"
        ],
        [
            "rewrite iter_nat_S.",
            "VernacExtend",
            "5873abc1bd6dd5f8c7f33bb0f68eaa449945b573"
        ],
        [
            "rewrite inj_S.",
            "VernacExtend",
            "d9f39a95338187eacc0449352f36ed1a3018cf13"
        ],
        [
            "unfold Zsucc.",
            "VernacExtend",
            "ce48edcc40a7bf1b5f94e63a500e0f3155ce1e54"
        ],
        [
            "rewrite Zplus_assoc.",
            "VernacExtend",
            "0e5fe194ecdfc9efe27c2867b803f58d698b13d8"
        ],
        [
            "revert IHn0.",
            "VernacExtend",
            "a0859e658ea7f5cb1185c33cbe732f25cdeb540e"
        ],
        [
            "apply inbetween_shr_1.",
            "VernacExtend",
            "5258a87176c22edfe1bb2a85363b88ce5230d5ea"
        ],
        [
            "clear -Hm.",
            "VernacExtend",
            "6d7757f1711f181dfaaa5e0a03527dc5ff4b3ef2"
        ],
        [
            "induction n0.",
            "VernacExtend",
            "68655e776196c40e2d506edc563548ecabf16016"
        ],
        [
            "now destruct l as [|[| |]].",
            "VernacExtend",
            "ced4e80ef0dd59ee453a79a006fe29303dd26bed"
        ],
        [
            "rewrite iter_nat_S.",
            "VernacExtend",
            "5873abc1bd6dd5f8c7f33bb0f68eaa449945b573"
        ],
        [
            "revert IHn0.",
            "VernacExtend",
            "a0859e658ea7f5cb1185c33cbe732f25cdeb540e"
        ],
        [
            "generalize (iter_nat shr_1 n0 (shr_record_of_loc m l)).",
            "VernacExtend",
            "bd2dcd83fbe19717367500c67a6dad25d47e29b7"
        ],
        [
            "clear.",
            "VernacExtend",
            "086ee0db0bdefcfa1ec15bb5cd44d451de64c569"
        ],
        [
            "intros (m, r, s) Hm.",
            "VernacExtend",
            "70c480c4fd757b0c09b492cebef2ff282617d79c"
        ],
        [
            "now destruct m as [|[m|m|]|m] ; try (now elim Hm) ; destruct r as [|] ; destruct s as [|].",
            "VernacExtend",
            "c9501fad0a9ce49fd0eecc9f7a988b3e88bdf06c"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Definition shr_fexp m e l := shr (shr_record_of_loc m l) e (fexp (Zdigits2 m + e) - e).",
            "VernacDefinition",
            "a927a8ae1ff28c65033a211c9e77c3078b4d7a15"
        ],
        [
            "Theorem shr_truncate : forall m e l, (0 <= m)%Z -> shr_fexp m e l = let '(m', e', l') := truncate radix2 fexp (m, e, l) in (shr_record_of_loc m' l', e').",
            "VernacStartTheoremProof",
            "6d3ffa23201d4bcac8fb74ed4ab0fb5a7366890a"
        ],
        [
            "intros m e l Hm.",
            "VernacExtend",
            "e882fd3fcce1a140df7e1dc74c7d1d56b0479bb5"
        ],
        [
            "case_eq (truncate radix2 fexp (m, e, l)).",
            "VernacExtend",
            "bce3a1bb48eff32a9d0396ceb215efd1aacd767c"
        ],
        [
            "intros (m', e') l'.",
            "VernacExtend",
            "e410a847a4384ca040d09891e763439e7c684153"
        ],
        [
            "unfold shr_fexp.",
            "VernacExtend",
            "7d0457256a4df52b2c199b6e618ee769c3ab0c76"
        ],
        [
            "rewrite Zdigits2_Zdigits.",
            "VernacExtend",
            "cdc5ff4ecf5733c57943c25d2f2779d738cd80c0"
        ],
        [
            "case_eq (fexp (Zdigits radix2 m + e) - e)%Z.",
            "VernacExtend",
            "1ac70e857bba8d60da7e13cc48f2c3c7696d4622"
        ],
        [
            "intros He.",
            "VernacExtend",
            "dfbedaae88fb1ac0f1e0aadf409bd4a7b0ced9da"
        ],
        [
            "unfold truncate.",
            "VernacExtend",
            "e239555bc9fc631f0b28093ba90c3ba6a6565581"
        ],
        [
            "rewrite He.",
            "VernacExtend",
            "e06e93d8f27f68152d89e54323f4b64df15bc106"
        ],
        [
            "simpl.",
            "VernacExtend",
            "1b93169f4cf876d207c1fab22a2347202ab48d85"
        ],
        [
            "intros H.",
            "VernacExtend",
            "5cfae87a34fa7b59a257c9640f1b674f6e6d780b"
        ],
        [
            "now inversion H.",
            "VernacExtend",
            "d72febf07866235ab850e0be52d03df112cb9e8c"
        ],
        [
            "intros p Hp.",
            "VernacExtend",
            "cf737bd4e185c03175335af1ca6ae52da34cba56"
        ],
        [
            "assert (He: (e <= fexp (Zdigits radix2 m + e))%Z).",
            "VernacExtend",
            "90bfe20fe3756c441c7ba728335e61d3fcb806f7"
        ],
        [
            "clear -Hp ; zify ; omega.",
            "VernacExtend",
            "b7806091fe32287d569ccbcb00ff4c7f0b3b5c5c"
        ],
        [
            "destruct (inbetween_float_ex radix2 m e l) as (x, Hx).",
            "VernacExtend",
            "060724ab2a2a0988ea32394fea906128308b346c"
        ],
        [
            "generalize (inbetween_shr x m e l (fexp (Zdigits radix2 m + e) - e) Hm Hx).",
            "VernacExtend",
            "c48d5aea372c9fcb26a7cfb6092bf98ba8b9b234"
        ],
        [
            "assert (Hx0 : (0 <= x)%R).",
            "VernacExtend",
            "e28033a2ea4ad580bad518aeecd64f43c23641d6"
        ],
        [
            "apply Rle_trans with (F2R (Float radix2 m e)).",
            "VernacExtend",
            "20ff6ff9ae58d03b77b325848d87b1c43f76ce09"
        ],
        [
            "now apply F2R_ge_0_compat.",
            "VernacExtend",
            "dee4b37db2af7e0397e3ec7ceb7cf7ff288ba7be"
        ],
        [
            "exact (proj1 (inbetween_float_bounds _ _ _ _ _ Hx)).",
            "VernacExtend",
            "28307d7a40b9545067ae0d10af7dc4c0d28a1851"
        ],
        [
            "case_eq (shr (shr_record_of_loc m l) e (fexp (Zdigits radix2 m + e) - e)).",
            "VernacExtend",
            "e575f012fd23a308754990dcc4bfc86c4158af5b"
        ],
        [
            "intros mrs e'' H3 H4 H1.",
            "VernacExtend",
            "80937f008f6fa21bd65a4514da4d678fc0a12997"
        ],
        [
            "generalize (truncate_correct radix2 _ x m e l Hx0 Hx (or_introl _ He)).",
            "VernacExtend",
            "ad4c9ca9fd4d770dc5f4687649191c87b48b9a28"
        ],
        [
            "rewrite H1.",
            "VernacExtend",
            "91099f93f9346d13e3fc00550ba094ceac5333db"
        ],
        [
            "intros (H2,_).",
            "VernacExtend",
            "65d8efc0376022b08d0131a2d35ff6001d05160c"
        ],
        [
            "rewrite <- Hp, H3.",
            "VernacExtend",
            "938fe4bf4970d06b6bff0d908c93dff06e1a1b1d"
        ],
        [
            "assert (e'' = e').",
            "VernacExtend",
            "e0096f12c1346ee21ab9518a407d2eae4522f733"
        ],
        [
            "change (snd (mrs, e'') = snd (fst (m',e',l'))).",
            "VernacExtend",
            "aa4b621f301c3fb77dd2bf50254f85e8211f2c1e"
        ],
        [
            "rewrite <- H1, <- H3.",
            "VernacExtend",
            "09846490757bd2da18c98ae635bb11608482572e"
        ],
        [
            "unfold truncate.",
            "VernacExtend",
            "e239555bc9fc631f0b28093ba90c3ba6a6565581"
        ],
        [
            "now rewrite Hp.",
            "VernacExtend",
            "cea3c3db7439399bbc773d617b362a71c6f621b3"
        ],
        [
            "rewrite H in H4 |- *.",
            "VernacExtend",
            "6f16c9161d8ac7a1c6438a2d12a280a5a0aa6655"
        ],
        [
            "apply (f_equal (fun v => (v, _))).",
            "VernacExtend",
            "0c18f044190326592c8c0cf060dc3ad06b33cb66"
        ],
        [
            "destruct (inbetween_float_unique _ _ _ _ _ _ _ H2 H4) as (H5, H6).",
            "VernacExtend",
            "5798735b535ac70f37b558040312646ce539e879"
        ],
        [
            "rewrite H5, H6.",
            "VernacExtend",
            "8acc441cbd6d630136681ad119f9545219e118f1"
        ],
        [
            "case mrs.",
            "VernacExtend",
            "24fa0c23e059d6452919c47f28510c3b46077c32"
        ],
        [
            "now intros m0 [|] [|].",
            "VernacExtend",
            "cf9ae52801f1536a79f2643b08ceadebb4fb7dbd"
        ],
        [
            "intros p Hp.",
            "VernacExtend",
            "cf737bd4e185c03175335af1ca6ae52da34cba56"
        ],
        [
            "unfold truncate.",
            "VernacExtend",
            "e239555bc9fc631f0b28093ba90c3ba6a6565581"
        ],
        [
            "rewrite Hp.",
            "VernacExtend",
            "b511f9e4ffd06db3fba6cc16f472f9ed92990ffa"
        ],
        [
            "simpl.",
            "VernacExtend",
            "1b93169f4cf876d207c1fab22a2347202ab48d85"
        ],
        [
            "intros H.",
            "VernacExtend",
            "5cfae87a34fa7b59a257c9640f1b674f6e6d780b"
        ],
        [
            "now inversion H.",
            "VernacExtend",
            "d72febf07866235ab850e0be52d03df112cb9e8c"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Inductive mode := mode_NE | mode_ZR | mode_DN | mode_UP | mode_NA.",
            "VernacInductive",
            "d5f9ef721b3bfac0cbf0e3c8e87b49248732b88d"
        ],
        [
            "Definition round_mode m := match m with | mode_NE => ZnearestE | mode_ZR => Ztrunc | mode_DN => Zfloor | mode_UP => Zceil | mode_NA => ZnearestA end.",
            "VernacDefinition",
            "2d00c85aa392cb2881ed9e28d87a750149d9b2ea"
        ],
        [
            "Definition choice_mode m sx mx lx := match m with | mode_NE => cond_incr (round_N (negb (Zeven mx)) lx) mx | mode_ZR => mx | mode_DN => cond_incr (round_sign_DN sx lx) mx | mode_UP => cond_incr (round_sign_UP sx lx) mx | mode_NA => cond_incr (round_N true lx) mx end.",
            "VernacDefinition",
            "bb0b7c2b2a1681caf2187324d9045ec2e13b3564"
        ],
        [
            "Global Instance valid_rnd_round_mode : forall m, Valid_rnd (round_mode m).",
            "VernacInstance",
            "c8fab6bf2e3c5690bb4ca436a2dd6fa8ffe1b85a"
        ],
        [
            "destruct m ; unfold round_mode ; auto with typeclass_instances.",
            "VernacExtend",
            "c91a23d7c18f2a963be977a7dd2bee7825a91010"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Definition overflow_to_inf m s := match m with | mode_NE => true | mode_NA => true | mode_ZR => false | mode_UP => negb s | mode_DN => s end.",
            "VernacDefinition",
            "ccab3a7ec008cd3b919fede8ac793087e1d8cb97"
        ],
        [
            "Definition binary_overflow m s := if overflow_to_inf m s then F754_infinity s else F754_finite s (match (Zpower 2 prec - 1)%Z with Zpos p => p | _ => xH end) (emax - prec).",
            "VernacDefinition",
            "c02bcd36da37fe805f3ee8f28b1844f03ac90fbb"
        ],
        [
            "Definition binary_round_aux mode sx mx ex lx := let '(mrs', e') := shr_fexp (Zpos mx) ex lx in let '(mrs'', e'') := shr_fexp (choice_mode mode sx (shr_m mrs') (loc_of_shr_record mrs')) e' loc_Exact in match shr_m mrs'' with | Z0 => F754_zero sx | Zpos m => if Zle_bool e'' (emax - prec) then F754_finite sx m e'' else binary_overflow mode sx | _ => F754_nan false xH end.",
            "VernacDefinition",
            "f64e48ec3061c4242de64de70ab4e756269f2953"
        ],
        [
            "Theorem binary_round_aux_correct : forall mode x mx ex lx, inbetween_float radix2 (Zpos mx) ex (Rabs x) lx -> (ex <= fexp (Zdigits radix2 (Zpos mx) + ex))%Z -> let z := binary_round_aux mode (Rlt_bool x 0) mx ex lx in valid_binary z = true /\\ if Rlt_bool (Rabs (round radix2 fexp (round_mode mode) x)) (bpow radix2 emax) then FF2R radix2 z = round radix2 fexp (round_mode mode) x /\\ is_finite_FF z = true /\\ sign_FF z = Rlt_bool x 0 else z = binary_overflow mode (Rlt_bool x 0).",
            "VernacStartTheoremProof",
            "c97cae2d3103c61d1ba4e7c9c6a42c3a277f7819"
        ],
        [
            "Proof with auto with typeclass_instances.",
            "VernacProof",
            "c16343efcd37779057959eb30e1ff5afec0a83eb"
        ],
        [
            "intros m x mx ex lx Bx Ex z.",
            "VernacExtend",
            "e6285e522128ad892a137a141f9dc58e6d38676a"
        ],
        [
            "unfold binary_round_aux in z.",
            "VernacExtend",
            "b6be2332d6fb43bfde92ea7d56e762c6a98412ef"
        ],
        [
            "revert z.",
            "VernacExtend",
            "90129574fd69f95f588801e85e5e45255bbb78a7"
        ],
        [
            "rewrite shr_truncate.",
            "VernacExtend",
            "27176ca40b9420e6ff9da2edc65ea5a1972a6a64"
        ],
        [
            "2: easy.",
            "VernacExtend",
            "707bf251d0258d6666b71f85452288ed45fcbbb5"
        ],
        [
            "refine (_ (round_trunc_sign_any_correct _ _ (round_mode m) (choice_mode m) _ x (Zpos mx) ex lx Bx (or_introl _ Ex))).",
            "VernacExtend",
            "c34f2a8afd561cb595325b7d7d9ae87b7ae05d5b"
        ],
        [
            "refine (_ (truncate_correct_partial _ _ _ _ _ _ _ Bx Ex)).",
            "VernacExtend",
            "aeff4ba86d89a6b922f6176db9f8156218b2d30f"
        ],
        [
            "destruct (truncate radix2 fexp (Zpos mx, ex, lx)) as ((m1, e1), l1).",
            "VernacExtend",
            "38fa9bcd1f05bce1b4865e4a831a7a0cd6feab29"
        ],
        [
            "rewrite loc_of_shr_record_of_loc, shr_m_shr_record_of_loc.",
            "VernacExtend",
            "c35075caf78dabc7141b07b646be852eb6408a87"
        ],
        [
            "set (m1' := choice_mode m (Rlt_bool x 0) m1 l1).",
            "VernacExtend",
            "9c3d632d0cc4b532891c23c037aa6f064c4c03ef"
        ],
        [
            "intros (H1a,H1b) H1c.",
            "VernacExtend",
            "64d7939bccf6967c4e2ea34a3f5373d998336fc7"
        ],
        [
            "rewrite H1c.",
            "VernacExtend",
            "f9099329171a72e7018b7dc51447f02d853ac742"
        ],
        [
            "assert (Hm: (m1 <= m1')%Z).",
            "VernacExtend",
            "50c0a130b318223ab9b041e9ba12075051033fad"
        ],
        [
            "unfold m1', choice_mode, cond_incr.",
            "VernacExtend",
            "111d3665ff266b4187053e78ca77b433ba488093"
        ],
        [
            "case m ; try apply Zle_refl ; match goal with |- (m1 <= if ?b then _ else _)%Z => case b ; [ apply Zle_succ | apply Zle_refl ] end.",
            "VernacExtend",
            "954f02ee988e95eaa4a3cb58ea976eb321c1ab7d"
        ],
        [
            "assert (Hr: Rabs (round radix2 fexp (round_mode m) x) = F2R (Float radix2 m1' e1)).",
            "VernacExtend",
            "f9368b1f578c5f13e2ff876bf102fa3b38eafb0f"
        ],
        [
            "rewrite <- (Zabs_eq m1').",
            "VernacExtend",
            "a49468fa197d676d51603de85aaa545263580876"
        ],
        [
            "replace (Zabs m1') with (Zabs (cond_Zopp (Rlt_bool x 0) m1')).",
            "VernacExtend",
            "9cb72dc090dc42e0676206cee3bf023424349f11"
        ],
        [
            "rewrite F2R_Zabs.",
            "VernacExtend",
            "66f910e5a29dea24936afff0b12cbc4a00a79405"
        ],
        [
            "now apply f_equal.",
            "VernacExtend",
            "2be51066ac0713afbd2686f67010448cf5cd7ac9"
        ],
        [
            "apply abs_cond_Zopp.",
            "VernacExtend",
            "414de57fc817be7ab985566cac62c8b4c9af8b02"
        ],
        [
            "apply Zle_trans with (2 := Hm).",
            "VernacExtend",
            "bd7bce4d8552cd8680c335070d0477f2fab90b99"
        ],
        [
            "apply Zlt_succ_le.",
            "VernacExtend",
            "c303523f868e2dd2771675d2de37d7328c4e957b"
        ],
        [
            "apply F2R_gt_0_reg with radix2 e1.",
            "VernacExtend",
            "a8e804925f39eaaf0849cb922b4e27ddb428269b"
        ],
        [
            "apply Rle_lt_trans with (1 := Rabs_pos x).",
            "VernacExtend",
            "f6439b432c98edbd23aac90ebb0cc6d98d26fd21"
        ],
        [
            "exact (proj2 (inbetween_float_bounds _ _ _ _ _ H1a)).",
            "VernacExtend",
            "35cdf3faf2a9a0dc9d4158ade33a999c08d6b0e8"
        ],
        [
            "assert (Br: inbetween_float radix2 m1' e1 (Rabs (round radix2 fexp (round_mode m) x)) loc_Exact).",
            "VernacExtend",
            "fbcfceef5b280d6490f417e69399c73bf0a1c1be"
        ],
        [
            "now apply inbetween_Exact.",
            "VernacExtend",
            "b168ca3b22d3ad56d3ff0818cd5f728f59cf49ae"
        ],
        [
            "destruct m1' as [|m1'|m1'].",
            "VernacExtend",
            "fd6ed6d582d1e7ea7345a1364996ad75fbea32a5"
        ],
        [
            "rewrite shr_truncate.",
            "VernacExtend",
            "27176ca40b9420e6ff9da2edc65ea5a1972a6a64"
        ],
        [
            "2: apply Zle_refl.",
            "VernacExtend",
            "349583cd567e2cfea57a890bc03bbb69a00599da"
        ],
        [
            "generalize (truncate_0 radix2 fexp e1 loc_Exact).",
            "VernacExtend",
            "ca2b0f3891efad7f2eda8b3a0085eafa67de1813"
        ],
        [
            "destruct (truncate radix2 fexp (Z0, e1, loc_Exact)) as ((m2, e2), l2).",
            "VernacExtend",
            "1d6e126a1f815cda9e3568fba8fd3564b4ada3b2"
        ],
        [
            "rewrite shr_m_shr_record_of_loc.",
            "VernacExtend",
            "b1171949c3217a5696a1c6e827857294f4f0b9ed"
        ],
        [
            "intros Hm2.",
            "VernacExtend",
            "205b414add47d232840a4f3d37a8771c7574a927"
        ],
        [
            "rewrite Hm2.",
            "VernacExtend",
            "f92e5bf69dab079aa355ff4209903ccd06ff0571"
        ],
        [
            "repeat split.",
            "VernacExtend",
            "7968f2448e3e51b1de42f5c433248f4a827b4da2"
        ],
        [
            "rewrite Rlt_bool_true.",
            "VernacExtend",
            "31cd82492c96b4dc35f8c36f967bc8802a2bc6ba"
        ],
        [
            "repeat split.",
            "VernacExtend",
            "7968f2448e3e51b1de42f5c433248f4a827b4da2"
        ],
        [
            "apply sym_eq.",
            "VernacExtend",
            "f01eb728d9ceeac2915c66b52a7b50a0c452e949"
        ],
        [
            "case Rlt_bool ; apply F2R_0.",
            "VernacExtend",
            "5196a1f6eaba36506e8922a3d245b691ac2d00c1"
        ],
        [
            "rewrite <- F2R_Zabs, abs_cond_Zopp, F2R_0.",
            "VernacExtend",
            "fd45469d70191ee457edce3df744d74c617c70d0"
        ],
        [
            "apply bpow_gt_0.",
            "VernacExtend",
            "51431cbce9a44d56b4b1857315ff3c6ca3c98e7f"
        ],
        [
            "assert (He: (e1 <= fexp (Zdigits radix2 (Zpos m1') + e1))%Z).",
            "VernacExtend",
            "b363a1fd55c998231b435b3847b225a83dd215ef"
        ],
        [
            "rewrite <- ln_beta_F2R_Zdigits, <- Hr, ln_beta_abs.",
            "VernacExtend",
            "bc852d3f2e4ee717f29e0d9dab3391ef43c8cc22"
        ],
        [
            "2: discriminate.",
            "VernacExtend",
            "cc7f3ed5b34fc879b6555e1623990b6ccce02136"
        ],
        [
            "rewrite H1b.",
            "VernacExtend",
            "d816313834c58097c207159b72fcfccc7e79a438"
        ],
        [
            "rewrite canonic_exp_abs.",
            "VernacExtend",
            "7f07af68b3be03eb10c9c1245d80b26e09c99fdd"
        ],
        [
            "fold (canonic_exp radix2 fexp (round radix2 fexp (round_mode m) x)).",
            "VernacExtend",
            "01d63184238886caf7d53abba93bce69aa4d90f7"
        ],
        [
            "apply canonic_exp_round_ge...",
            "VernacExtend",
            "e3f2d5491b284b8f723c865b38d78ee85a40060b"
        ],
        [
            "rewrite H1c.",
            "VernacExtend",
            "f9099329171a72e7018b7dc51447f02d853ac742"
        ],
        [
            "case (Rlt_bool x 0).",
            "VernacExtend",
            "1291c72cabb2a24b306395b6c551b6693d877b53"
        ],
        [
            "apply Rlt_not_eq.",
            "VernacExtend",
            "4d888fdf05ab3816c2e650b03b478096db638cf5"
        ],
        [
            "now apply F2R_lt_0_compat.",
            "VernacExtend",
            "49795aa14bce980bd770acc759456462f1e2dbb2"
        ],
        [
            "apply Rgt_not_eq.",
            "VernacExtend",
            "8860a9193cfdaf1f0316f8df1f2c0781738e5ef7"
        ],
        [
            "now apply F2R_gt_0_compat.",
            "VernacExtend",
            "2b5a1cb2582ac2d074766e6b65adcf42b088a406"
        ],
        [
            "refine (_ (truncate_correct_partial _ _ _ _ _ _ _ Br He)).",
            "VernacExtend",
            "67b27f66a4af8e93baab59f3e438f2caeee55939"
        ],
        [
            "2: now rewrite Hr ; apply F2R_gt_0_compat.",
            "VernacExtend",
            "e54a4bf6ff8533296df3c339dd2e5dfad4434025"
        ],
        [
            "refine (_ (truncate_correct_format radix2 fexp (Zpos m1') e1 _ _ He)).",
            "VernacExtend",
            "e553f281d5e86e416b81edf0c29b362cd26232d5"
        ],
        [
            "2: discriminate.",
            "VernacExtend",
            "cc7f3ed5b34fc879b6555e1623990b6ccce02136"
        ],
        [
            "rewrite shr_truncate.",
            "VernacExtend",
            "27176ca40b9420e6ff9da2edc65ea5a1972a6a64"
        ],
        [
            "2: easy.",
            "VernacExtend",
            "707bf251d0258d6666b71f85452288ed45fcbbb5"
        ],
        [
            "destruct (truncate radix2 fexp (Zpos m1', e1, loc_Exact)) as ((m2, e2), l2).",
            "VernacExtend",
            "fd50446be47c6327cdd3919ab671503eca312cb5"
        ],
        [
            "rewrite shr_m_shr_record_of_loc.",
            "VernacExtend",
            "b1171949c3217a5696a1c6e827857294f4f0b9ed"
        ],
        [
            "intros (H3,H4) (H2,_).",
            "VernacExtend",
            "0a2200516dca7457b5bf9e5cd720f66387795dad"
        ],
        [
            "destruct m2 as [|m2|m2].",
            "VernacExtend",
            "65bbc2348abd697803ee7f0466bdcf65bf26cd88"
        ],
        [
            "elim Rgt_not_eq with (2 := H3).",
            "VernacExtend",
            "442efdcb888f83410bed2fd2b2441c177d9a3f79"
        ],
        [
            "rewrite F2R_0.",
            "VernacExtend",
            "2b1ed44aa307676d6672cc7c6a6e12102bae31de"
        ],
        [
            "now apply F2R_gt_0_compat.",
            "VernacExtend",
            "2b5a1cb2582ac2d074766e6b65adcf42b088a406"
        ],
        [
            "rewrite F2R_cond_Zopp, H3, abs_cond_Ropp, <- F2R_abs.",
            "VernacExtend",
            "a03d79be8b7ad6f7a45a0f15b76a4d39e185b900"
        ],
        [
            "simpl Zabs.",
            "VernacExtend",
            "4f288dbc1a0b07cc890bbbcc39d9e6bcb0695c82"
        ],
        [
            "case_eq (Zle_bool e2 (emax - prec)) ; intros He2.",
            "VernacExtend",
            "b22927593f3ca8eefa8480327c49b6242bd3509c"
        ],
        [
            "assert (bounded m2 e2 = true).",
            "VernacExtend",
            "b61984d428f7dc2d50cbac53e8f16257efbbfaf4"
        ],
        [
            "apply andb_true_intro.",
            "VernacExtend",
            "568074f8ecdece0f16c49f5bea6e2c18016f95d3"
        ],
        [
            "split.",
            "VernacExtend",
            "55abc140132bd88981001ac656020469a8d503eb"
        ],
        [
            "unfold canonic_mantissa.",
            "VernacExtend",
            "23daaf4ea7968c6d7811bd9970e089939445136a"
        ],
        [
            "apply Zeq_bool_true.",
            "VernacExtend",
            "dbaf9f1785b3f71bd8761fabfd1a59198d232647"
        ],
        [
            "rewrite Zpos_digits2_pos.",
            "VernacExtend",
            "2b538c3fe7142af5b05ea277f48ca7eaf108af74"
        ],
        [
            "rewrite <- ln_beta_F2R_Zdigits.",
            "VernacExtend",
            "4797b1d935cd05bee502ea3c2bc4ae0c8802c085"
        ],
        [
            "apply sym_eq.",
            "VernacExtend",
            "f01eb728d9ceeac2915c66b52a7b50a0c452e949"
        ],
        [
            "now rewrite H3 in H4.",
            "VernacExtend",
            "584d0e406514198b9a875cd9badf4d2f9bf5e51b"
        ],
        [
            "discriminate.",
            "VernacExtend",
            "66ca81b65e1a53372a2515fdfdd2a6b0677cb9c8"
        ],
        [
            "exact He2.",
            "VernacExtend",
            "0df241a0e3f1be0c2eec87e16481378dd898a7e2"
        ],
        [
            "apply (conj H).",
            "VernacExtend",
            "fb2bbe1d6f9c59d6d269218e8fd0fc9d914c36ed"
        ],
        [
            "rewrite Rlt_bool_true.",
            "VernacExtend",
            "31cd82492c96b4dc35f8c36f967bc8802a2bc6ba"
        ],
        [
            "repeat split.",
            "VernacExtend",
            "7968f2448e3e51b1de42f5c433248f4a827b4da2"
        ],
        [
            "apply F2R_cond_Zopp.",
            "VernacExtend",
            "c07c00ceed97017ba6b9799277ae3fe02d9cad95"
        ],
        [
            "now apply bounded_lt_emax.",
            "VernacExtend",
            "a84b4b45c2d6d4db987de330c7a7cc300348fb3f"
        ],
        [
            "rewrite (Rlt_bool_false _ (bpow radix2 emax)).",
            "VernacExtend",
            "613639c0bae837c211147115916046cff7c55f01"
        ],
        [
            "refine (conj _ (refl_equal _)).",
            "VernacExtend",
            "b577566d35f8d221e8053e899cc7c0979be985ca"
        ],
        [
            "unfold binary_overflow.",
            "VernacExtend",
            "3b0680b6933d149f6513963a5a2d614dcdaa5eca"
        ],
        [
            "case overflow_to_inf.",
            "VernacExtend",
            "e42c214dff35c396de98e5120d847e89b572a868"
        ],
        [
            "apply refl_equal.",
            "VernacExtend",
            "37304a26ede0d38318cdc32c46bfa45cfbc5e7db"
        ],
        [
            "unfold valid_binary, bounded.",
            "VernacExtend",
            "d8e9ae7e2c0cbbc537ef4dc3c7cc6a698f04cc7a"
        ],
        [
            "rewrite Zle_bool_refl.",
            "VernacExtend",
            "bad502d3b0b4b00b1a3021ebc93012c65fba5b7f"
        ],
        [
            "rewrite Bool.andb_true_r.",
            "VernacExtend",
            "aed5810803eda1f69551630744e0d59b2fd887cc"
        ],
        [
            "apply Zeq_bool_true.",
            "VernacExtend",
            "dbaf9f1785b3f71bd8761fabfd1a59198d232647"
        ],
        [
            "rewrite Zpos_digits2_pos.",
            "VernacExtend",
            "2b538c3fe7142af5b05ea277f48ca7eaf108af74"
        ],
        [
            "replace (Zdigits radix2 (Zpos (match (Zpower 2 prec - 1)%Z with Zpos p => p | _ => xH end))) with prec.",
            "VernacExtend",
            "7244a561e33afd3e579f6ff0867f7e2924826655"
        ],
        [
            "unfold fexp, FLT_exp, emin.",
            "VernacExtend",
            "38dab048745efa1b6482dbc0850386a0599fa2c8"
        ],
        [
            "generalize (prec_gt_0 prec).",
            "VernacExtend",
            "f827b434a598a8eb871cd50fd31ccf4bfded79d5"
        ],
        [
            "clear -Hmax ; zify ; omega.",
            "VernacExtend",
            "7e89e8bd0ec5170aabee4e2fe4d1da9313fe0d33"
        ],
        [
            "change 2%Z with (radix_val radix2).",
            "VernacExtend",
            "15e91e944ed01ba7350e023be33458cb95f8b644"
        ],
        [
            "case_eq (Zpower radix2 prec - 1)%Z.",
            "VernacExtend",
            "d6f76e897370b1cfb73e2349bf25b98f8c377c4d"
        ],
        [
            "simpl Zdigits.",
            "VernacExtend",
            "b7bdaefe718ece13177b714707ae61426b9b487f"
        ],
        [
            "generalize (Zpower_gt_1 radix2 prec (prec_gt_0 prec)).",
            "VernacExtend",
            "645f65e8027e681b25fb732ee1f4f2662ec3d514"
        ],
        [
            "clear ; omega.",
            "VernacExtend",
            "eec4b40e7fab9dab9db362824141f438dba9b179"
        ],
        [
            "intros p Hp.",
            "VernacExtend",
            "cf737bd4e185c03175335af1ca6ae52da34cba56"
        ],
        [
            "apply Zle_antisym.",
            "VernacExtend",
            "d5fb169d90b6dbda1fca926c28e78732e286a418"
        ],
        [
            "cut (prec - 1 < Zdigits radix2 (Zpos p))%Z.",
            "VernacExtend",
            "0a2cf570604fa2297c3d8c89aad284e7ea7dc4ba"
        ],
        [
            "clear ; omega.",
            "VernacExtend",
            "eec4b40e7fab9dab9db362824141f438dba9b179"
        ],
        [
            "apply Zdigits_gt_Zpower.",
            "VernacExtend",
            "edc354964773231dd785da6d24a0a09530dd8e3a"
        ],
        [
            "simpl Zabs.",
            "VernacExtend",
            "4f288dbc1a0b07cc890bbbcc39d9e6bcb0695c82"
        ],
        [
            "rewrite <- Hp.",
            "VernacExtend",
            "93824f871271acc8455545520cbf267bf973e012"
        ],
        [
            "cut (Zpower radix2 (prec - 1) < Zpower radix2 prec)%Z.",
            "VernacExtend",
            "68103c419e08e98ba32151cb934efa0379ac14c1"
        ],
        [
            "clear ; omega.",
            "VernacExtend",
            "eec4b40e7fab9dab9db362824141f438dba9b179"
        ],
        [
            "apply lt_Z2R.",
            "VernacExtend",
            "c0e615fac753553d0eac3dc2ae4d76c109cb9e3e"
        ],
        [
            "rewrite 2!Z2R_Zpower.",
            "VernacExtend",
            "6f988e2bfcc798513b16998241257713e161f152"
        ],
        [
            "2: now apply Zlt_le_weak.",
            "VernacExtend",
            "32df481aae0af3dc5265287195974b751026895e"
        ],
        [
            "apply bpow_lt.",
            "VernacExtend",
            "45b51ee535829682305d615af418ef00162d772b"
        ],
        [
            "apply Zlt_pred.",
            "VernacExtend",
            "a6620668f75369f03de9f89c4a525f458f335ee4"
        ],
        [
            "now apply Zlt_0_le_0_pred.",
            "VernacExtend",
            "4d3b60b67ade4e5961e4a4f08f076e01662f2bda"
        ],
        [
            "apply Zdigits_le_Zpower.",
            "VernacExtend",
            "7e080210014507665a0b74cd19adb7f65c0a54a3"
        ],
        [
            "simpl Zabs.",
            "VernacExtend",
            "4f288dbc1a0b07cc890bbbcc39d9e6bcb0695c82"
        ],
        [
            "rewrite <- Hp.",
            "VernacExtend",
            "93824f871271acc8455545520cbf267bf973e012"
        ],
        [
            "apply Zlt_pred.",
            "VernacExtend",
            "a6620668f75369f03de9f89c4a525f458f335ee4"
        ],
        [
            "intros p Hp.",
            "VernacExtend",
            "cf737bd4e185c03175335af1ca6ae52da34cba56"
        ],
        [
            "generalize (Zpower_gt_1 radix2 _ (prec_gt_0 prec)).",
            "VernacExtend",
            "f958e357696de2ae5c27d13423e86ee6d85fe342"
        ],
        [
            "clear -Hp ; zify ; omega.",
            "VernacExtend",
            "b7806091fe32287d569ccbcb00ff4c7f0b3b5c5c"
        ],
        [
            "apply Rnot_lt_le.",
            "VernacExtend",
            "3c60597e841405b7d257d92c4717e01515b21555"
        ],
        [
            "intros Hx.",
            "VernacExtend",
            "9276b72df3a882c9b4b954c90d9e870c80a906fc"
        ],
        [
            "generalize (refl_equal (bounded m2 e2)).",
            "VernacExtend",
            "b7f7fda617adac06db14185b7972730dea94e5fd"
        ],
        [
            "unfold bounded at 2.",
            "VernacExtend",
            "4d10ba0e1378bd28957481af28c8ece757de38b6"
        ],
        [
            "rewrite He2.",
            "VernacExtend",
            "d0e71e14da05251409311fc56bb5791a3b350249"
        ],
        [
            "rewrite Bool.andb_false_r.",
            "VernacExtend",
            "6585e8369aa49309bbdf9bfdff37e7a05270dfa2"
        ],
        [
            "rewrite bounded_canonic_lt_emax with (2 := Hx).",
            "VernacExtend",
            "2e94eb3763a9448370b1b8c38d4e1eab2b2f840d"
        ],
        [
            "discriminate.",
            "VernacExtend",
            "66ca81b65e1a53372a2515fdfdd2a6b0677cb9c8"
        ],
        [
            "unfold canonic.",
            "VernacExtend",
            "6a198835d9b378599c1fa5419c9760cfac4e66cc"
        ],
        [
            "now rewrite <- H3.",
            "VernacExtend",
            "7085df4465a38d46d30d2531d0986c387b9522a9"
        ],
        [
            "elim Rgt_not_eq with (2 := H3).",
            "VernacExtend",
            "442efdcb888f83410bed2fd2b2441c177d9a3f79"
        ],
        [
            "apply Rlt_trans with R0.",
            "VernacExtend",
            "b3368a8c294b6b2354245a3ffce628f4ce865443"
        ],
        [
            "now apply F2R_lt_0_compat.",
            "VernacExtend",
            "49795aa14bce980bd770acc759456462f1e2dbb2"
        ],
        [
            "now apply F2R_gt_0_compat.",
            "VernacExtend",
            "2b5a1cb2582ac2d074766e6b65adcf42b088a406"
        ],
        [
            "rewrite <- Hr.",
            "VernacExtend",
            "2f6bc99e9b1c75ed1711fcaabf67f634d72e5a37"
        ],
        [
            "apply generic_format_abs...",
            "VernacExtend",
            "a39453a406032a148cb82220c0e8277ddebf58d3"
        ],
        [
            "apply generic_format_round...",
            "VernacExtend",
            "55b5df3e9c740005b41509d39a039e0b1a6f5f87"
        ],
        [
            "elim Rgt_not_eq with (2 := Hr).",
            "VernacExtend",
            "f27eb86d6c944752bdf5361dbbca36fe242cc412"
        ],
        [
            "apply Rlt_le_trans with R0.",
            "VernacExtend",
            "eb3d62f2790b9f57f412481853828cd6ec38ee36"
        ],
        [
            "now apply F2R_lt_0_compat.",
            "VernacExtend",
            "49795aa14bce980bd770acc759456462f1e2dbb2"
        ],
        [
            "apply Rabs_pos.",
            "VernacExtend",
            "8e57e214403458a4dc8dafc960971b86cf3b856d"
        ],
        [
            "apply Rlt_le_trans with (2 := proj1 (inbetween_float_bounds _ _ _ _ _ Bx)).",
            "VernacExtend",
            "b539a9a62c7857b69f706515c5585e94a1126b6f"
        ],
        [
            "now apply F2R_gt_0_compat.",
            "VernacExtend",
            "2b5a1cb2582ac2d074766e6b65adcf42b088a406"
        ],
        [
            "clear.",
            "VernacExtend",
            "086ee0db0bdefcfa1ec15bb5cd44d451de64c569"
        ],
        [
            "case m.",
            "VernacExtend",
            "aa6976536c42fe07071b38c2e9f312198eed1a80"
        ],
        [
            "exact inbetween_int_NE_sign.",
            "VernacExtend",
            "720e46ead57ee8c64b37e173c24236c313ccb968"
        ],
        [
            "exact inbetween_int_ZR_sign.",
            "VernacExtend",
            "f5027bcf5f75a568aec57d38beb1d96d43ac8837"
        ],
        [
            "exact inbetween_int_DN_sign.",
            "VernacExtend",
            "2ca5d31426e90ded6bfe15f3c4912c6b18401fc3"
        ],
        [
            "exact inbetween_int_UP_sign.",
            "VernacExtend",
            "a460c5b2dddd11dc95931d350552f9a81d94bb40"
        ],
        [
            "exact inbetween_int_NA_sign.",
            "VernacExtend",
            "9ea82991dd8f4ad84e96d67f23dc8a0a31b33f07"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma Bmult_correct_aux : forall m sx mx ex (Hx : bounded mx ex = true) sy my ey (Hy : bounded my ey = true), let x := F2R (Float radix2 (cond_Zopp sx (Zpos mx)) ex) in let y := F2R (Float radix2 (cond_Zopp sy (Zpos my)) ey) in let z := binary_round_aux m (xorb sx sy) (mx * my) (ex + ey) loc_Exact in valid_binary z = true /\\ if Rlt_bool (Rabs (round radix2 fexp (round_mode m) (x * y))) (bpow radix2 emax) then FF2R radix2 z = round radix2 fexp (round_mode m) (x * y) /\\ is_finite_FF z = true /\\ sign_FF z = xorb sx sy else z = binary_overflow m (xorb sx sy).",
            "VernacStartTheoremProof",
            "7357f49df1b6b6da819a4e82b6c1782547cd9a71"
        ],
        [
            "intros m sx mx ex Hx sy my ey Hy x y.",
            "VernacExtend",
            "909e2159719865efaf9860a49921a2cdd78d0241"
        ],
        [
            "unfold x, y.",
            "VernacExtend",
            "45f51fa8f6438c45ab36e0d5050b8849156225ec"
        ],
        [
            "rewrite <- F2R_mult.",
            "VernacExtend",
            "d8c54479282bdf8337bd590cf21dc0de5aa5bb54"
        ],
        [
            "simpl.",
            "VernacExtend",
            "1b93169f4cf876d207c1fab22a2347202ab48d85"
        ],
        [
            "replace (xorb sx sy) with (Rlt_bool (F2R (Float radix2 (cond_Zopp sx (Zpos mx) * cond_Zopp sy (Zpos my)) (ex + ey))) 0).",
            "VernacExtend",
            "b5e5f9ec7d5804e6cc55ef60f4a45bee60902f1c"
        ],
        [
            "apply binary_round_aux_correct.",
            "VernacExtend",
            "2a61e909da3e1e7a4b72fd0308dcaf909c511adf"
        ],
        [
            "constructor.",
            "VernacExtend",
            "3c77e6be855b5086df5e918bf2a0537e1010479a"
        ],
        [
            "rewrite <- F2R_abs.",
            "VernacExtend",
            "f45286a0077c940636f0e44760db3e0ff2184dd3"
        ],
        [
            "apply F2R_eq_compat.",
            "VernacExtend",
            "bc1e4623b2196fb23776bd02c10b33de36f7515b"
        ],
        [
            "rewrite Zabs_Zmult.",
            "VernacExtend",
            "f459c70d0601b9eab86bcf62dfb70a911d8ba871"
        ],
        [
            "now rewrite 2!abs_cond_Zopp.",
            "VernacExtend",
            "a3bdfa15c7e8b900d131bf717bfc3b6991f7d45d"
        ],
        [
            "change (Zpos (mx * my)) with (Zpos mx * Zpos my)%Z.",
            "VernacExtend",
            "5762eeb8e450bd6d506680acc0c96ad5c026da63"
        ],
        [
            "assert (forall m e, bounded m e = true -> fexp (Zdigits radix2 (Zpos m) + e) = e)%Z.",
            "VernacExtend",
            "720eb18e750454a3bf0f4bf93d2443fc73558ba6"
        ],
        [
            "clear.",
            "VernacExtend",
            "086ee0db0bdefcfa1ec15bb5cd44d451de64c569"
        ],
        [
            "intros m e Hb.",
            "VernacExtend",
            "42150c7e68709bd94861dcaaa22d35c136fe9244"
        ],
        [
            "destruct (andb_prop _ _ Hb) as (H,_).",
            "VernacExtend",
            "4c611b52ad7cea56f421674bb4f4e519c12e5dcf"
        ],
        [
            "apply Zeq_bool_eq.",
            "VernacExtend",
            "b9ce828b4f152ddd33cc296275dad63e72f4aa8f"
        ],
        [
            "now rewrite <- Zpos_digits2_pos.",
            "VernacExtend",
            "8ac8ef686bddd576360f6866f4f64f1c71f0ef66"
        ],
        [
            "generalize (H _ _ Hx) (H _ _ Hy).",
            "VernacExtend",
            "18bd06c3cf6ecb4dba65b0d6db92e5f02fc05cdf"
        ],
        [
            "clear x y sx sy Hx Hy H.",
            "VernacExtend",
            "ad1e774a6f9c07be6a63d2eef28d7238a04c1718"
        ],
        [
            "unfold fexp, FLT_exp.",
            "VernacExtend",
            "d790a7e5d03d5c9606c08f62c52b1a3604ada64e"
        ],
        [
            "refine (_ (Zdigits_mult_ge radix2 (Zpos mx) (Zpos my) _ _)) ; try discriminate.",
            "VernacExtend",
            "d8ac3435fea3e150547ac5c22e496f202546c94c"
        ],
        [
            "refine (_ (Zdigits_gt_0 radix2 (Zpos mx) _) (Zdigits_gt_0 radix2 (Zpos my) _)) ; try discriminate.",
            "VernacExtend",
            "11e54dd2f2e989b24e09b902cfcbe683f1ecc9f1"
        ],
        [
            "generalize (Zdigits radix2 (Zpos mx)) (Zdigits radix2 (Zpos my)) (Zdigits radix2 (Zpos mx * Zpos my)).",
            "VernacExtend",
            "400374d54471ae09a9d1952d6ba879f948cce29e"
        ],
        [
            "clear -Hmax.",
            "VernacExtend",
            "8c1aa5f5c4a1379df52d3406150ec3959a158d3e"
        ],
        [
            "unfold emin.",
            "VernacExtend",
            "3fff444b9eede7682b5d216fb49ade0df5718e8c"
        ],
        [
            "intros dx dy dxy Hx Hy Hxy.",
            "VernacExtend",
            "9eba190166559e16092685db255ee018e9a72eb1"
        ],
        [
            "zify ; intros ; subst.",
            "VernacExtend",
            "de7e43b353c728739c29399c39b557991eac3eb2"
        ],
        [
            "omega.",
            "VernacExtend",
            "32c6c865d255452c7e10c77111456d1981cede39"
        ],
        [
            "case sx ; case sy.",
            "VernacExtend",
            "d081f5d2e04526b5556849e151d1758c46eb8b50"
        ],
        [
            "apply Rlt_bool_false.",
            "VernacExtend",
            "115f3bf88cb7153f51757af6b09533b60d89f56b"
        ],
        [
            "now apply F2R_ge_0_compat.",
            "VernacExtend",
            "dee4b37db2af7e0397e3ec7ceb7cf7ff288ba7be"
        ],
        [
            "apply Rlt_bool_true.",
            "VernacExtend",
            "2dd8acd5318209d40288e95b2cc6a1cd92d8d107"
        ],
        [
            "now apply F2R_lt_0_compat.",
            "VernacExtend",
            "49795aa14bce980bd770acc759456462f1e2dbb2"
        ],
        [
            "apply Rlt_bool_true.",
            "VernacExtend",
            "2dd8acd5318209d40288e95b2cc6a1cd92d8d107"
        ],
        [
            "now apply F2R_lt_0_compat.",
            "VernacExtend",
            "49795aa14bce980bd770acc759456462f1e2dbb2"
        ],
        [
            "apply Rlt_bool_false.",
            "VernacExtend",
            "115f3bf88cb7153f51757af6b09533b60d89f56b"
        ],
        [
            "now apply F2R_ge_0_compat.",
            "VernacExtend",
            "dee4b37db2af7e0397e3ec7ceb7cf7ff288ba7be"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Definition Bmult mult_nan m x y := let f pl := B754_nan (fst pl) (snd pl) in match x, y with | B754_nan _ _, _ | _, B754_nan _ _ => f (mult_nan x y) | B754_infinity sx, B754_infinity sy => B754_infinity (xorb sx sy) | B754_infinity sx, B754_finite sy _ _ _ => B754_infinity (xorb sx sy) | B754_finite sx _ _ _, B754_infinity sy => B754_infinity (xorb sx sy) | B754_infinity _, B754_zero _ => f (mult_nan x y) | B754_zero _, B754_infinity _ => f (mult_nan x y) | B754_finite sx _ _ _, B754_zero sy => B754_zero (xorb sx sy) | B754_zero sx, B754_finite sy _ _ _ => B754_zero (xorb sx sy) | B754_zero sx, B754_zero sy => B754_zero (xorb sx sy) | B754_finite sx mx ex Hx, B754_finite sy my ey Hy => FF2B _ (proj1 (Bmult_correct_aux m sx mx ex Hx sy my ey Hy)) end.",
            "VernacDefinition",
            "84b966bcd2e934b9d67a235af6a22d322d7e62f1"
        ],
        [
            "Theorem Bmult_correct : forall mult_nan m x y, if Rlt_bool (Rabs (round radix2 fexp (round_mode m) (B2R x * B2R y))) (bpow radix2 emax) then B2R (Bmult mult_nan m x y) = round radix2 fexp (round_mode m) (B2R x * B2R y) /\\ is_finite (Bmult mult_nan m x y) = andb (is_finite x) (is_finite y) /\\ (is_nan (Bmult mult_nan m x y) = false -> Bsign (Bmult mult_nan m x y) = xorb (Bsign x) (Bsign y)) else B2FF (Bmult mult_nan m x y) = binary_overflow m (xorb (Bsign x) (Bsign y)).",
            "VernacStartTheoremProof",
            "e7e842511d2cc88b0371195d8dca05e74d98286a"
        ],
        [
            "intros mult_nan m [sx|sx|sx plx|sx mx ex Hx] [sy|sy|sy ply|sy my ey Hy] ; try ( rewrite ?Rmult_0_r, ?Rmult_0_l, round_0, Rabs_R0, Rlt_bool_true ; [ now repeat constructor | apply bpow_gt_0 | now auto with typeclass_instances ] ).",
            "VernacExtend",
            "2337c3ea84a790bdedf6555d72a9fef7b92e9ea4"
        ],
        [
            "simpl.",
            "VernacExtend",
            "1b93169f4cf876d207c1fab22a2347202ab48d85"
        ],
        [
            "case Bmult_correct_aux.",
            "VernacExtend",
            "1f5a419ef6ff30c508fc5bbd25d36f4d5cdd1915"
        ],
        [
            "intros H1.",
            "VernacExtend",
            "ba8e6c21eb83603690828b8ea37ea25a6f2962f3"
        ],
        [
            "case Rlt_bool.",
            "VernacExtend",
            "da208ea1a14afd75e8ab60d99e3d2460ef18e0dc"
        ],
        [
            "intros (H2, (H3, H4)).",
            "VernacExtend",
            "89bd6077fe74b2237b5a34c73e56fe1f7d3600a5"
        ],
        [
            "split.",
            "VernacExtend",
            "55abc140132bd88981001ac656020469a8d503eb"
        ],
        [
            "now rewrite B2R_FF2B.",
            "VernacExtend",
            "364a0e8b8e6f13efaa19a009ab431dc2474ea6f2"
        ],
        [
            "split.",
            "VernacExtend",
            "55abc140132bd88981001ac656020469a8d503eb"
        ],
        [
            "now rewrite is_finite_FF2B.",
            "VernacExtend",
            "705875eebcbc072e4ea86daec6e02904c532c7d2"
        ],
        [
            "rewrite Bsign_FF2B.",
            "VernacExtend",
            "76a51b8aae4f12f644ab280018318f288b7848d3"
        ],
        [
            "auto.",
            "VernacExtend",
            "1f09da0addd069b3b65326f8c71967acc1e985af"
        ],
        [
            "intros H2.",
            "VernacExtend",
            "1cdce4ec62ec85608d1a6cc1fb7ae184c894a041"
        ],
        [
            "now rewrite B2FF_FF2B.",
            "VernacExtend",
            "ec37d971040d8fa4dd8551e47d1f57dc0a3334be"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Definition Bmult_FF mult_nan m x y := let f pl := F754_nan (fst pl) (snd pl) in match x, y with | F754_nan _ _, _ | _, F754_nan _ _ => f (mult_nan x y) | F754_infinity sx, F754_infinity sy => F754_infinity (xorb sx sy) | F754_infinity sx, F754_finite sy _ _ => F754_infinity (xorb sx sy) | F754_finite sx _ _, F754_infinity sy => F754_infinity (xorb sx sy) | F754_infinity _, F754_zero _ => f (mult_nan x y) | F754_zero _, F754_infinity _ => f (mult_nan x y) | F754_finite sx _ _, F754_zero sy => F754_zero (xorb sx sy) | F754_zero sx, F754_finite sy _ _ => F754_zero (xorb sx sy) | F754_zero sx, F754_zero sy => F754_zero (xorb sx sy) | F754_finite sx mx ex, F754_finite sy my ey => binary_round_aux m (xorb sx sy) (mx * my) (ex + ey) loc_Exact end.",
            "VernacDefinition",
            "294e5b6ffbde5af3a67dedccb89d6d5d0eb60ee5"
        ],
        [
            "Theorem B2FF_Bmult : forall mult_nan mult_nan_ff, forall m x y, mult_nan_ff (B2FF x) (B2FF y) = (let '(sr, exist plr _) := mult_nan x y in (sr, plr)) -> B2FF (Bmult mult_nan m x y) = Bmult_FF mult_nan_ff m (B2FF x) (B2FF y).",
            "VernacStartTheoremProof",
            "cfebad08534dfe8627aa9175f4b665c7b8900ef3"
        ],
        [
            "intros mult_nan mult_nan_ff m x y Hmult_nan.",
            "VernacExtend",
            "4cd540832719909e3f5530705000c16088faf44f"
        ],
        [
            "unfold Bmult_FF.",
            "VernacExtend",
            "eb3e78455594d1e1801a93cce203f027b94d422b"
        ],
        [
            "rewrite Hmult_nan.",
            "VernacExtend",
            "211b2d0bd8d4ca9edc4efb1f5d883ec344c63d44"
        ],
        [
            "destruct x as [sx|sx|sx [plx Hplx]|sx mx ex Hx], y as [sy|sy|sy [ply Hply]|sy my ey Hy] ; simpl; try match goal with |- context [mult_nan ?x ?y] => destruct (mult_nan x y) as [? []] end; try easy.",
            "VernacExtend",
            "eaf915f05daaf4a74c5506c23857b919d1a0604c"
        ],
        [
            "apply B2FF_FF2B.",
            "VernacExtend",
            "9657ea1a131c64759b7abe5b00a18e2278ef2d6f"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Definition shl_align mx ex ex' := match (ex' - ex)%Z with | Zneg d => (shift_pos d mx, ex') | _ => (mx, ex) end.",
            "VernacDefinition",
            "c6ce7b92e2c6437d46004f85d2448cb5c068b150"
        ],
        [
            "Theorem shl_align_correct : forall mx ex ex', let (mx', ex'') := shl_align mx ex ex' in F2R (Float radix2 (Zpos mx) ex) = F2R (Float radix2 (Zpos mx') ex'') /\\ (ex'' <= ex')%Z.",
            "VernacStartTheoremProof",
            "a76e9e8df0912b87f3d62dd91f1b0b0802d613fa"
        ],
        [
            "intros mx ex ex'.",
            "VernacExtend",
            "50af3c0abb765709d66af8631b6ae800c3974c56"
        ],
        [
            "unfold shl_align.",
            "VernacExtend",
            "db41c234aa8acfd3f325d9429876613ebd80e102"
        ],
        [
            "case_eq (ex' - ex)%Z.",
            "VernacExtend",
            "69fd26a2002d7e8307223e8e42c108e0273dff74"
        ],
        [
            "intros H.",
            "VernacExtend",
            "5cfae87a34fa7b59a257c9640f1b674f6e6d780b"
        ],
        [
            "repeat split.",
            "VernacExtend",
            "7968f2448e3e51b1de42f5c433248f4a827b4da2"
        ],
        [
            "rewrite Zminus_eq with (1 := H).",
            "VernacExtend",
            "2f9abd00a479d43a35f396804f4ec0c663a73275"
        ],
        [
            "apply Zle_refl.",
            "VernacExtend",
            "68a57d6389c7dd3f2c16b824eb0734986d9ff207"
        ],
        [
            "intros d Hd.",
            "VernacExtend",
            "dc50086a30e68651e72109a4d511291d21355345"
        ],
        [
            "repeat split.",
            "VernacExtend",
            "7968f2448e3e51b1de42f5c433248f4a827b4da2"
        ],
        [
            "replace ex' with (ex' - ex + ex)%Z by ring.",
            "VernacExtend",
            "9fa5cee587dc62b7430ff4a3633ff1650d133c3b"
        ],
        [
            "rewrite Hd.",
            "VernacExtend",
            "88abaeb91ac1303911ff95b63d0fe35e7b02a734"
        ],
        [
            "pattern ex at 1 ; rewrite <- Zplus_0_l.",
            "VernacExtend",
            "44fc366fdc10e5b3035822eb4984ae674ce345c3"
        ],
        [
            "now apply Zplus_le_compat_r.",
            "VernacExtend",
            "ab7407d0f86a2fbcfaaa5af581a74cf42255d7b8"
        ],
        [
            "intros d Hd.",
            "VernacExtend",
            "dc50086a30e68651e72109a4d511291d21355345"
        ],
        [
            "rewrite shift_pos_correct, Zmult_comm.",
            "VernacExtend",
            "89a020373274be756e58d457889015037322e601"
        ],
        [
            "change (Zpower_pos 2 d) with (Zpower radix2 (Zpos d)).",
            "VernacExtend",
            "4cdcb94071017158d2f214d8488c9f8e33d671ca"
        ],
        [
            "change (Zpos d) with (Zopp (Zneg d)).",
            "VernacExtend",
            "3ef5d7697e02a7e711e88a18971aed468f2972e7"
        ],
        [
            "rewrite <- Hd.",
            "VernacExtend",
            "36a0441d89364a3a72a0d7fb93c9e78171a826a8"
        ],
        [
            "split.",
            "VernacExtend",
            "55abc140132bd88981001ac656020469a8d503eb"
        ],
        [
            "replace (- (ex' - ex))%Z with (ex - ex')%Z by ring.",
            "VernacExtend",
            "18f89d98f35a8d2d7793de387febe971e79df925"
        ],
        [
            "apply F2R_change_exp.",
            "VernacExtend",
            "fc7404b0e2f947b608940c418d6ab6d49ccf8f7a"
        ],
        [
            "apply Zle_0_minus_le.",
            "VernacExtend",
            "6d2afc8bb25eee8a29efb37b8f8514f2462b6910"
        ],
        [
            "replace (ex - ex')%Z with (- (ex' - ex))%Z by ring.",
            "VernacExtend",
            "5b9795ae5122ce2930267380999a8796c116b3b3"
        ],
        [
            "now rewrite Hd.",
            "VernacExtend",
            "30bb74f0a3f9df989552ffff896a2bef491b8435"
        ],
        [
            "apply Zle_refl.",
            "VernacExtend",
            "68a57d6389c7dd3f2c16b824eb0734986d9ff207"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Theorem snd_shl_align : forall mx ex ex', (ex' <= ex)%Z -> snd (shl_align mx ex ex') = ex'.",
            "VernacStartTheoremProof",
            "bc6d257c3e2358e0972268bf6cba7c6eb10cde5b"
        ],
        [
            "intros mx ex ex' He.",
            "VernacExtend",
            "277df5c5925a9524ae63f0f592a1041f335ece6d"
        ],
        [
            "unfold shl_align.",
            "VernacExtend",
            "db41c234aa8acfd3f325d9429876613ebd80e102"
        ],
        [
            "case_eq (ex' - ex)%Z ; simpl.",
            "VernacExtend",
            "e1b13193e25c648af23ce2177d868ef1ae6fe387"
        ],
        [
            "intros H.",
            "VernacExtend",
            "5cfae87a34fa7b59a257c9640f1b674f6e6d780b"
        ],
        [
            "now rewrite Zminus_eq with (1 := H).",
            "VernacExtend",
            "bd5a0c955a1f8a3c103ee1a9b0ddd258de6b1452"
        ],
        [
            "intros p.",
            "VernacExtend",
            "223e3cb70cff95972873720780e7195aeb57b9fc"
        ],
        [
            "clear -He ; zify ; omega.",
            "VernacExtend",
            "c63fb5cd0db42e9b37e719b5dc218f5b47156da3"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "apply refl_equal.",
            "VernacExtend",
            "37304a26ede0d38318cdc32c46bfa45cfbc5e7db"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Definition shl_align_fexp mx ex := shl_align mx ex (fexp (Zpos (digits2_pos mx) + ex)).",
            "VernacDefinition",
            "8c2a7f50254b95555cc06f19cebc6c4d572b3b90"
        ],
        [
            "Theorem shl_align_fexp_correct : forall mx ex, let (mx', ex') := shl_align_fexp mx ex in F2R (Float radix2 (Zpos mx) ex) = F2R (Float radix2 (Zpos mx') ex') /\\ (ex' <= fexp (Zdigits radix2 (Zpos mx') + ex'))%Z.",
            "VernacStartTheoremProof",
            "a7916abaa7324f95570ff0a906eb401345ee01e6"
        ],
        [
            "intros mx ex.",
            "VernacExtend",
            "74922d23758cc580e3275197e39f0326b902f092"
        ],
        [
            "unfold shl_align_fexp.",
            "VernacExtend",
            "2c3c2b978a14792c08093a6ce3c64f89b8e4b7c6"
        ],
        [
            "generalize (shl_align_correct mx ex (fexp (Zpos (digits2_pos mx) + ex))).",
            "VernacExtend",
            "29e74658808938643a6dc269a9c40572b954fd2a"
        ],
        [
            "rewrite Zpos_digits2_pos.",
            "VernacExtend",
            "2b538c3fe7142af5b05ea277f48ca7eaf108af74"
        ],
        [
            "case shl_align.",
            "VernacExtend",
            "a97a011cd393d9f113436cf5ed5d07ff287aa42e"
        ],
        [
            "intros mx' ex' (H1, H2).",
            "VernacExtend",
            "9acac505fffb292be989f1cd3ade88a2dfdaba80"
        ],
        [
            "split.",
            "VernacExtend",
            "55abc140132bd88981001ac656020469a8d503eb"
        ],
        [
            "exact H1.",
            "VernacExtend",
            "c03ab82d1e411e1dcd211c59917a4946e039be00"
        ],
        [
            "rewrite <- ln_beta_F2R_Zdigits.",
            "VernacExtend",
            "4797b1d935cd05bee502ea3c2bc4ae0c8802c085"
        ],
        [
            "2: easy.",
            "VernacExtend",
            "707bf251d0258d6666b71f85452288ed45fcbbb5"
        ],
        [
            "rewrite <- H1.",
            "VernacExtend",
            "b8b417d956609d1854d18921f25bc0ffae73a74e"
        ],
        [
            "now rewrite ln_beta_F2R_Zdigits.",
            "VernacExtend",
            "7c7ba95da24bb8c8163aad3ef09e24ebe767093a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Definition binary_round m sx mx ex := let '(mz, ez) := shl_align_fexp mx ex in binary_round_aux m sx mz ez loc_Exact.",
            "VernacDefinition",
            "c9f9a86ddcfbc84994b32899a0bd45208d2df340"
        ],
        [
            "Theorem binary_round_correct : forall m sx mx ex, let z := binary_round m sx mx ex in valid_binary z = true /\\ let x := F2R (Float radix2 (cond_Zopp sx (Zpos mx)) ex) in if Rlt_bool (Rabs (round radix2 fexp (round_mode m) x)) (bpow radix2 emax) then FF2R radix2 z = round radix2 fexp (round_mode m) x /\\ is_finite_FF z = true /\\ sign_FF z = sx else z = binary_overflow m sx.",
            "VernacStartTheoremProof",
            "30314135493595acfe8b722ddb74d5435113893f"
        ],
        [
            "intros m sx mx ex.",
            "VernacExtend",
            "c0549b59989ae440174a213edd9e29a3d8c89dc5"
        ],
        [
            "unfold binary_round.",
            "VernacExtend",
            "60a451dab1f62712d9af1b280f8ad76e5eb24c86"
        ],
        [
            "generalize (shl_align_fexp_correct mx ex).",
            "VernacExtend",
            "1de716ca6fe225a437c753391b7974c9960f8ad3"
        ],
        [
            "destruct (shl_align_fexp mx ex) as (mz, ez).",
            "VernacExtend",
            "a3cde73c79772531ebc82d8f04a705b5ca1665bb"
        ],
        [
            "intros (H1, H2).",
            "VernacExtend",
            "cbe4fae06561c7d97a3cceb65a0c2d56dc027b9e"
        ],
        [
            "set (x := F2R (Float radix2 (cond_Zopp sx (Zpos mx)) ex)).",
            "VernacExtend",
            "c89ab324aa7ac2977ddabc94c9620881e55709f1"
        ],
        [
            "replace sx with (Rlt_bool x 0).",
            "VernacExtend",
            "6835a65cbe27f52dda648d18d6f720361fdc750f"
        ],
        [
            "apply binary_round_aux_correct.",
            "VernacExtend",
            "2a61e909da3e1e7a4b72fd0308dcaf909c511adf"
        ],
        [
            "constructor.",
            "VernacExtend",
            "3c77e6be855b5086df5e918bf2a0537e1010479a"
        ],
        [
            "unfold x.",
            "VernacExtend",
            "8e116a60402c848e1f7fd0414643cdb94ae22a92"
        ],
        [
            "now rewrite <- F2R_Zabs, abs_cond_Zopp.",
            "VernacExtend",
            "1b01fee755f485594365253c46cca97be8994b37"
        ],
        [
            "exact H2.",
            "VernacExtend",
            "6cf1ccd4f667f962fca87ce20ad22b06c15c53ad"
        ],
        [
            "unfold x.",
            "VernacExtend",
            "8e116a60402c848e1f7fd0414643cdb94ae22a92"
        ],
        [
            "case sx.",
            "VernacExtend",
            "170e50034984a3c45fbc1692315f4c57e6a7660e"
        ],
        [
            "apply Rlt_bool_true.",
            "VernacExtend",
            "2dd8acd5318209d40288e95b2cc6a1cd92d8d107"
        ],
        [
            "now apply F2R_lt_0_compat.",
            "VernacExtend",
            "49795aa14bce980bd770acc759456462f1e2dbb2"
        ],
        [
            "apply Rlt_bool_false.",
            "VernacExtend",
            "115f3bf88cb7153f51757af6b09533b60d89f56b"
        ],
        [
            "now apply F2R_ge_0_compat.",
            "VernacExtend",
            "dee4b37db2af7e0397e3ec7ceb7cf7ff288ba7be"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Definition binary_normalize mode m e szero := match m with | Z0 => B754_zero szero | Zpos m => FF2B _ (proj1 (binary_round_correct mode false m e)) | Zneg m => FF2B _ (proj1 (binary_round_correct mode true m e)) end.",
            "VernacDefinition",
            "c07b53ea2d8508fd8e3ab3d4a13e0f7c077e564b"
        ],
        [
            "Theorem binary_normalize_correct : forall m mx ex szero, if Rlt_bool (Rabs (round radix2 fexp (round_mode m) (F2R (Float radix2 mx ex)))) (bpow radix2 emax) then B2R (binary_normalize m mx ex szero) = round radix2 fexp (round_mode m) (F2R (Float radix2 mx ex)) /\\ is_finite (binary_normalize m mx ex szero) = true /\\ Bsign (binary_normalize m mx ex szero) = match Rcompare (F2R (Float radix2 mx ex)) 0 with | Eq => szero | Lt => true | Gt => false end else B2FF (binary_normalize m mx ex szero) = binary_overflow m (Rlt_bool (F2R (Float radix2 mx ex)) 0).",
            "VernacStartTheoremProof",
            "75b2d29bd6fa6c7c3dc6cc2d39658d42077cc50d"
        ],
        [
            "Proof with auto with typeclass_instances.",
            "VernacProof",
            "c16343efcd37779057959eb30e1ff5afec0a83eb"
        ],
        [
            "intros m mx ez szero.",
            "VernacExtend",
            "4e7574711d1e3c7a30cc3eb624e31d18d667bf33"
        ],
        [
            "destruct mx as [|mz|mz] ; simpl.",
            "VernacExtend",
            "8d3a4d90ea8c919d397f5565dd11d8d8360c0fc3"
        ],
        [
            "rewrite F2R_0, round_0, Rabs_R0, Rlt_bool_true...",
            "VernacExtend",
            "1b262f3ab4c862c9995e92898472819cb8984aeb"
        ],
        [
            "split...",
            "VernacExtend",
            "baadab085aba401319b7eae3380d34307a7b74d2"
        ],
        [
            "split...",
            "VernacExtend",
            "baadab085aba401319b7eae3380d34307a7b74d2"
        ],
        [
            "rewrite Rcompare_Eq...",
            "VernacExtend",
            "31ba2e4bd758a09573b96dbd4937c2234cd2c09a"
        ],
        [
            "apply bpow_gt_0.",
            "VernacExtend",
            "51431cbce9a44d56b4b1857315ff3c6ca3c98e7f"
        ],
        [
            "generalize (binary_round_correct m false mz ez).",
            "VernacExtend",
            "ae18d0f14d4295b1db6ae9fca55a31b514ca8b5b"
        ],
        [
            "simpl.",
            "VernacExtend",
            "1b93169f4cf876d207c1fab22a2347202ab48d85"
        ],
        [
            "case Rlt_bool_spec.",
            "VernacExtend",
            "34a5734790264c820e9f5a43f0e8af9f8a4e3946"
        ],
        [
            "intros _ (Vz, (Rz, (Rz', Rz''))).",
            "VernacExtend",
            "4ba63172f888c8bc0fd947d36035d702e8f2fd29"
        ],
        [
            "split.",
            "VernacExtend",
            "55abc140132bd88981001ac656020469a8d503eb"
        ],
        [
            "now rewrite B2R_FF2B.",
            "VernacExtend",
            "364a0e8b8e6f13efaa19a009ab431dc2474ea6f2"
        ],
        [
            "split.",
            "VernacExtend",
            "55abc140132bd88981001ac656020469a8d503eb"
        ],
        [
            "now rewrite is_finite_FF2B.",
            "VernacExtend",
            "705875eebcbc072e4ea86daec6e02904c532c7d2"
        ],
        [
            "rewrite Bsign_FF2B, Rz''.",
            "VernacExtend",
            "042922727d827edec40556dddaffca234861c894"
        ],
        [
            "rewrite Rcompare_Gt...",
            "VernacExtend",
            "623b3f1721195440ee3f633ba3c3aec55b98b709"
        ],
        [
            "apply F2R_gt_0_compat.",
            "VernacExtend",
            "d0292eafc6940cb31b6d7ab8595f82dcefd46a6e"
        ],
        [
            "simpl.",
            "VernacExtend",
            "1b93169f4cf876d207c1fab22a2347202ab48d85"
        ],
        [
            "zify; omega.",
            "VernacExtend",
            "5fb0df05710c307ca01829a575fcf81498a16c8a"
        ],
        [
            "intros Hz' (Vz, Rz).",
            "VernacExtend",
            "f41bdd6a21384edf5706a7315f789199047982ee"
        ],
        [
            "rewrite B2FF_FF2B, Rz.",
            "VernacExtend",
            "e43694fef31082243b4dd2b243d7f8ded05d6ba7"
        ],
        [
            "apply f_equal.",
            "VernacExtend",
            "ba856cbef3c8e84dcef77c91c8515b497874875b"
        ],
        [
            "apply sym_eq.",
            "VernacExtend",
            "f01eb728d9ceeac2915c66b52a7b50a0c452e949"
        ],
        [
            "apply Rlt_bool_false.",
            "VernacExtend",
            "115f3bf88cb7153f51757af6b09533b60d89f56b"
        ],
        [
            "now apply F2R_ge_0_compat.",
            "VernacExtend",
            "dee4b37db2af7e0397e3ec7ceb7cf7ff288ba7be"
        ],
        [
            "generalize (binary_round_correct m true mz ez).",
            "VernacExtend",
            "71bb6e766f81f849cac6e59a8b94d641ed0c6475"
        ],
        [
            "simpl.",
            "VernacExtend",
            "1b93169f4cf876d207c1fab22a2347202ab48d85"
        ],
        [
            "case Rlt_bool_spec.",
            "VernacExtend",
            "34a5734790264c820e9f5a43f0e8af9f8a4e3946"
        ],
        [
            "intros _ (Vz, (Rz, (Rz', Rz''))).",
            "VernacExtend",
            "4ba63172f888c8bc0fd947d36035d702e8f2fd29"
        ],
        [
            "split.",
            "VernacExtend",
            "55abc140132bd88981001ac656020469a8d503eb"
        ],
        [
            "now rewrite B2R_FF2B.",
            "VernacExtend",
            "364a0e8b8e6f13efaa19a009ab431dc2474ea6f2"
        ],
        [
            "split.",
            "VernacExtend",
            "55abc140132bd88981001ac656020469a8d503eb"
        ],
        [
            "now rewrite is_finite_FF2B.",
            "VernacExtend",
            "705875eebcbc072e4ea86daec6e02904c532c7d2"
        ],
        [
            "rewrite Bsign_FF2B, Rz''.",
            "VernacExtend",
            "042922727d827edec40556dddaffca234861c894"
        ],
        [
            "rewrite Rcompare_Lt...",
            "VernacExtend",
            "015421e5091e88bb0dba1ab18f8ee463fe930f32"
        ],
        [
            "apply F2R_lt_0_compat.",
            "VernacExtend",
            "02c29d2c58d3045145b3025cc8495a632d8bc4b0"
        ],
        [
            "simpl.",
            "VernacExtend",
            "1b93169f4cf876d207c1fab22a2347202ab48d85"
        ],
        [
            "zify; omega.",
            "VernacExtend",
            "5fb0df05710c307ca01829a575fcf81498a16c8a"
        ],
        [
            "intros Hz' (Vz, Rz).",
            "VernacExtend",
            "f41bdd6a21384edf5706a7315f789199047982ee"
        ],
        [
            "rewrite B2FF_FF2B, Rz.",
            "VernacExtend",
            "e43694fef31082243b4dd2b243d7f8ded05d6ba7"
        ],
        [
            "apply f_equal.",
            "VernacExtend",
            "ba856cbef3c8e84dcef77c91c8515b497874875b"
        ],
        [
            "apply sym_eq.",
            "VernacExtend",
            "f01eb728d9ceeac2915c66b52a7b50a0c452e949"
        ],
        [
            "apply Rlt_bool_true.",
            "VernacExtend",
            "2dd8acd5318209d40288e95b2cc6a1cd92d8d107"
        ],
        [
            "now apply F2R_lt_0_compat.",
            "VernacExtend",
            "49795aa14bce980bd770acc759456462f1e2dbb2"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Definition Bplus plus_nan m x y := let f pl := B754_nan (fst pl) (snd pl) in match x, y with | B754_nan _ _, _ | _, B754_nan _ _ => f (plus_nan x y) | B754_infinity sx, B754_infinity sy => if Bool.eqb sx sy then x else f (plus_nan x y) | B754_infinity _, _ => x | _, B754_infinity _ => y | B754_zero sx, B754_zero sy => if Bool.eqb sx sy then x else match m with mode_DN => B754_zero true | _ => B754_zero false end | B754_zero _, _ => y | _, B754_zero _ => x | B754_finite sx mx ex Hx, B754_finite sy my ey Hy => let ez := Zmin ex ey in binary_normalize m (Zplus (cond_Zopp sx (Zpos (fst (shl_align mx ex ez)))) (cond_Zopp sy (Zpos (fst (shl_align my ey ez))))) ez (match m with mode_DN => true | _ => false end) end.",
            "VernacDefinition",
            "5c615cca6b5ee712173c5551c9a6ae587b4356d2"
        ],
        [
            "Theorem Bplus_correct : forall plus_nan m x y, is_finite x = true -> is_finite y = true -> if Rlt_bool (Rabs (round radix2 fexp (round_mode m) (B2R x + B2R y))) (bpow radix2 emax) then B2R (Bplus plus_nan m x y) = round radix2 fexp (round_mode m) (B2R x + B2R y) /\\ is_finite (Bplus plus_nan m x y) = true /\\ Bsign (Bplus plus_nan m x y) = match Rcompare (B2R x + B2R y) 0 with | Eq => match m with mode_DN => orb (Bsign x) (Bsign y) | _ => andb (Bsign x) (Bsign y) end | Lt => true | Gt => false end else (B2FF (Bplus plus_nan m x y) = binary_overflow m (Bsign x) /\\ Bsign x = Bsign y).",
            "VernacStartTheoremProof",
            "cfcedb18a4bbfab7b64ed7b0abc2a28c85c4ff70"
        ],
        [
            "Proof with auto with typeclass_instances.",
            "VernacProof",
            "c16343efcd37779057959eb30e1ff5afec0a83eb"
        ],
        [
            "intros plus_nan m [sx|sx| |sx mx ex Hx] [sy|sy| |sy my ey Hy] Fx Fy ; try easy.",
            "VernacExtend",
            "c2e08b99f7bd14c280694aba35934f9f6874d04c"
        ],
        [
            "rewrite Rplus_0_r, round_0, Rabs_R0, Rlt_bool_true...",
            "VernacExtend",
            "0ec66e70e3f958dbf06ef7f102ae2c4815725046"
        ],
        [
            "simpl.",
            "VernacExtend",
            "1b93169f4cf876d207c1fab22a2347202ab48d85"
        ],
        [
            "rewrite Rcompare_Eq by auto.",
            "VernacExtend",
            "7da14f7518dec39676f446f852f5a70f514603cd"
        ],
        [
            "destruct sx, sy; try easy; now case m.",
            "VernacExtend",
            "6ba802957af8dbc64c1a4d63c875b26b0a264444"
        ],
        [
            "apply bpow_gt_0.",
            "VernacExtend",
            "51431cbce9a44d56b4b1857315ff3c6ca3c98e7f"
        ],
        [
            "rewrite Rplus_0_l, round_generic, Rlt_bool_true...",
            "VernacExtend",
            "4fd54ad34a8724c91c36a08e98fe581066ff98fc"
        ],
        [
            "split...",
            "VernacExtend",
            "baadab085aba401319b7eae3380d34307a7b74d2"
        ],
        [
            "split...",
            "VernacExtend",
            "baadab085aba401319b7eae3380d34307a7b74d2"
        ],
        [
            "simpl.",
            "VernacExtend",
            "1b93169f4cf876d207c1fab22a2347202ab48d85"
        ],
        [
            "unfold F2R.",
            "VernacExtend",
            "01074792470ba071b62f8438b8d9b8c922ca2998"
        ],
        [
            "erewrite <- Rmult_0_l, Rcompare_mult_r.",
            "VernacExtend",
            "462c7c422edc3799deeba504441a8dacc0c9056a"
        ],
        [
            "rewrite Rcompare_Z2R with (y:=0%Z).",
            "VernacExtend",
            "7badb778662232d4e942e5007b766e1a2e2d73ed"
        ],
        [
            "destruct sy...",
            "VernacExtend",
            "a102cdb6029ac549ef5322217e3248f5077efa4c"
        ],
        [
            "apply bpow_gt_0.",
            "VernacExtend",
            "51431cbce9a44d56b4b1857315ff3c6ca3c98e7f"
        ],
        [
            "apply abs_B2R_lt_emax.",
            "VernacExtend",
            "d25def41bdd95a0e235746e32461f6a314186225"
        ],
        [
            "apply generic_format_B2R.",
            "VernacExtend",
            "17746e2c3cda8dfb94931be74eb7b5e284b2058f"
        ],
        [
            "rewrite Rplus_0_r, round_generic, Rlt_bool_true...",
            "VernacExtend",
            "501f29260243784ee0f2f6ac0c9dcb7f310d1ecf"
        ],
        [
            "split...",
            "VernacExtend",
            "baadab085aba401319b7eae3380d34307a7b74d2"
        ],
        [
            "split...",
            "VernacExtend",
            "baadab085aba401319b7eae3380d34307a7b74d2"
        ],
        [
            "simpl.",
            "VernacExtend",
            "1b93169f4cf876d207c1fab22a2347202ab48d85"
        ],
        [
            "unfold F2R.",
            "VernacExtend",
            "01074792470ba071b62f8438b8d9b8c922ca2998"
        ],
        [
            "erewrite <- Rmult_0_l, Rcompare_mult_r.",
            "VernacExtend",
            "462c7c422edc3799deeba504441a8dacc0c9056a"
        ],
        [
            "rewrite Rcompare_Z2R with (y:=0%Z).",
            "VernacExtend",
            "7badb778662232d4e942e5007b766e1a2e2d73ed"
        ],
        [
            "destruct sx...",
            "VernacExtend",
            "af2198c3509116356523ccd7bdb7fea935c5644e"
        ],
        [
            "apply bpow_gt_0.",
            "VernacExtend",
            "51431cbce9a44d56b4b1857315ff3c6ca3c98e7f"
        ],
        [
            "apply abs_B2R_lt_emax.",
            "VernacExtend",
            "d25def41bdd95a0e235746e32461f6a314186225"
        ],
        [
            "apply generic_format_B2R.",
            "VernacExtend",
            "17746e2c3cda8dfb94931be74eb7b5e284b2058f"
        ],
        [
            "clear Fx Fy.",
            "VernacExtend",
            "ab6f6307f45d9a43a1dc068a40c7c0e28d9a2635"
        ],
        [
            "simpl.",
            "VernacExtend",
            "1b93169f4cf876d207c1fab22a2347202ab48d85"
        ],
        [
            "set (szero := match m with mode_DN => true | _ => false end).",
            "VernacExtend",
            "65e6e7fb3a3aae1860db1ebcd290cf15e5111965"
        ],
        [
            "set (ez := Zmin ex ey).",
            "VernacExtend",
            "a80a0abfdba9196d9aa0b0daf3a384ab04245010"
        ],
        [
            "set (mz := (cond_Zopp sx (Zpos (fst (shl_align mx ex ez))) + cond_Zopp sy (Zpos (fst (shl_align my ey ez))))%Z).",
            "VernacExtend",
            "7646078f1ac00e6ab6d8cde8a69a5079489ddcf6"
        ],
        [
            "assert (Hp: (F2R (Float radix2 (cond_Zopp sx (Zpos mx)) ex) + F2R (Float radix2 (cond_Zopp sy (Zpos my)) ey))%R = F2R (Float radix2 mz ez)).",
            "VernacExtend",
            "3dd68f04c274bba6061f07cfc4c2d5e6f9123a6a"
        ],
        [
            "rewrite 2!F2R_cond_Zopp.",
            "VernacExtend",
            "66f1516f378354fdcea72a44ccc451cad0d79e78"
        ],
        [
            "generalize (shl_align_correct mx ex ez).",
            "VernacExtend",
            "dbfbe381052fb1dd8efb405c034162e764b45d32"
        ],
        [
            "generalize (shl_align_correct my ey ez).",
            "VernacExtend",
            "1ca58a1526122c3738c7008b54bf9e786277ce02"
        ],
        [
            "generalize (snd_shl_align mx ex ez (Zle_min_l ex ey)).",
            "VernacExtend",
            "1e58fc871cf0b160e114bf78a5445e7ab6ac9f85"
        ],
        [
            "generalize (snd_shl_align my ey ez (Zle_min_r ex ey)).",
            "VernacExtend",
            "8caf5f39f1b6de1cdeea5c1cc875a5dcfc94f825"
        ],
        [
            "destruct (shl_align mx ex ez) as (mx', ex').",
            "VernacExtend",
            "91ce30d855fb9436f34e275f6d6061d0c06939b0"
        ],
        [
            "destruct (shl_align my ey ez) as (my', ey').",
            "VernacExtend",
            "73cc89ad3cacf4c2a3c3b5e7bfb0d36160d6b4a8"
        ],
        [
            "simpl.",
            "VernacExtend",
            "1b93169f4cf876d207c1fab22a2347202ab48d85"
        ],
        [
            "intros H1 H2.",
            "VernacExtend",
            "1a279bc44908e178ace5c31cb5040905c4829477"
        ],
        [
            "rewrite H1, H2.",
            "VernacExtend",
            "0ce0ee884f848b2a2759f8abce9a0e685be27984"
        ],
        [
            "clear H1 H2.",
            "VernacExtend",
            "11b745af7c87ecf3d332fcb85ae4f59023a9f120"
        ],
        [
            "intros (H1, _) (H2, _).",
            "VernacExtend",
            "57ba7351c6afea3fd83f8cdc58ea57c7de7bfa68"
        ],
        [
            "rewrite H1, H2.",
            "VernacExtend",
            "0ce0ee884f848b2a2759f8abce9a0e685be27984"
        ],
        [
            "clear H1 H2.",
            "VernacExtend",
            "11b745af7c87ecf3d332fcb85ae4f59023a9f120"
        ],
        [
            "rewrite <- 2!F2R_cond_Zopp.",
            "VernacExtend",
            "7dcac17bfddd81cceff79b7a8a5c2678fb5cb15a"
        ],
        [
            "unfold F2R.",
            "VernacExtend",
            "01074792470ba071b62f8438b8d9b8c922ca2998"
        ],
        [
            "simpl.",
            "VernacExtend",
            "1b93169f4cf876d207c1fab22a2347202ab48d85"
        ],
        [
            "now rewrite <- Rmult_plus_distr_r, <- Z2R_plus.",
            "VernacExtend",
            "f15f5e9da708f08ed779fba22863a5c3fc9956d6"
        ],
        [
            "rewrite Hp.",
            "VernacExtend",
            "b511f9e4ffd06db3fba6cc16f472f9ed92990ffa"
        ],
        [
            "assert (Sz: (bpow radix2 emax <= Rabs (round radix2 fexp (round_mode m) (F2R (Float radix2 mz ez))))%R -> sx = Rlt_bool (F2R (Float radix2 mz ez)) 0 /\\ sx = sy).",
            "VernacExtend",
            "1369bf5ce37f620dee48048336c661c71f7dfe8d"
        ],
        [
            "rewrite <- Hp.",
            "VernacExtend",
            "93824f871271acc8455545520cbf267bf973e012"
        ],
        [
            "intros Bz.",
            "VernacExtend",
            "f345fe906c01c7653069eeccc0df683d97a8731e"
        ],
        [
            "destruct (Bool.bool_dec sx sy) as [Hs|Hs].",
            "VernacExtend",
            "477bb64c16b45489dc886c46d33d3c8ece7315a9"
        ],
        [
            "refine (conj _ Hs).",
            "VernacExtend",
            "839afc5412c9957ad2b8d9da412f9dc899058c6f"
        ],
        [
            "rewrite Hs.",
            "VernacExtend",
            "ddea6993e3e1146e762703b9c4c45fb5767a9a44"
        ],
        [
            "apply sym_eq.",
            "VernacExtend",
            "f01eb728d9ceeac2915c66b52a7b50a0c452e949"
        ],
        [
            "case sy.",
            "VernacExtend",
            "cdd75ff212c25e14509a77df1371f71be1f6ea2e"
        ],
        [
            "apply Rlt_bool_true.",
            "VernacExtend",
            "2dd8acd5318209d40288e95b2cc6a1cd92d8d107"
        ],
        [
            "rewrite <- (Rplus_0_r 0).",
            "VernacExtend",
            "280b96ff3019d41f882f1594db29ce933e4977c3"
        ],
        [
            "apply Rplus_lt_compat.",
            "VernacExtend",
            "f7bc5a60a4f35352751a55736bc694ac6ced98ea"
        ],
        [
            "now apply F2R_lt_0_compat.",
            "VernacExtend",
            "49795aa14bce980bd770acc759456462f1e2dbb2"
        ],
        [
            "now apply F2R_lt_0_compat.",
            "VernacExtend",
            "49795aa14bce980bd770acc759456462f1e2dbb2"
        ],
        [
            "apply Rlt_bool_false.",
            "VernacExtend",
            "115f3bf88cb7153f51757af6b09533b60d89f56b"
        ],
        [
            "rewrite <- (Rplus_0_r 0).",
            "VernacExtend",
            "280b96ff3019d41f882f1594db29ce933e4977c3"
        ],
        [
            "apply Rplus_le_compat.",
            "VernacExtend",
            "7a69898b466991bee51047e3a2fc51c3b80fbd93"
        ],
        [
            "now apply F2R_ge_0_compat.",
            "VernacExtend",
            "dee4b37db2af7e0397e3ec7ceb7cf7ff288ba7be"
        ],
        [
            "now apply F2R_ge_0_compat.",
            "VernacExtend",
            "dee4b37db2af7e0397e3ec7ceb7cf7ff288ba7be"
        ],
        [
            "elim Rle_not_lt with (1 := Bz).",
            "VernacExtend",
            "e6d87ade763531af8ace5ca26f44576b0279b8c2"
        ],
        [
            "generalize (bounded_lt_emax _ _ Hx) (bounded_lt_emax _ _ Hy) (andb_prop _ _ Hx) (andb_prop _ _ Hy).",
            "VernacExtend",
            "30d785a906fdc784b5c53283df88c998d17b9aff"
        ],
        [
            "intros Bx By (Hx',_) (Hy',_).",
            "VernacExtend",
            "33bfefacefd562f5dea8f50ca2fc3cc428ff9af6"
        ],
        [
            "generalize (canonic_canonic_mantissa sx _ _ Hx') (canonic_canonic_mantissa sy _ _ Hy').",
            "VernacExtend",
            "5452c851df7dd2ebbec9fd3d920b2927eba3e2e7"
        ],
        [
            "clear -Bx By Hs prec_gt_0_.",
            "VernacExtend",
            "ad003ecf0611b12410793d4af473942b8f972568"
        ],
        [
            "intros Cx Cy.",
            "VernacExtend",
            "126593cbccc78b7d6ae7c68ff55c72f602320f35"
        ],
        [
            "destruct sx.",
            "VernacExtend",
            "8bcd4b1633626fbcb14ad4a56cbed84347596486"
        ],
        [
            "destruct sy.",
            "VernacExtend",
            "7e683dd5d3f076a43a8ac37b29d32d5d4124bc63"
        ],
        [
            "now elim Hs.",
            "VernacExtend",
            "284af067b6667a29786078a78dbeaddcbff79231"
        ],
        [
            "clear Hs.",
            "VernacExtend",
            "ddacf258bff03d86925bf490364e63ca1aad420d"
        ],
        [
            "apply Rabs_lt.",
            "VernacExtend",
            "bfcb50e7c60a3a6e7882767e577bd1a45e5bab34"
        ],
        [
            "split.",
            "VernacExtend",
            "55abc140132bd88981001ac656020469a8d503eb"
        ],
        [
            "apply Rlt_le_trans with (F2R (Float radix2 (cond_Zopp true (Zpos mx)) ex)).",
            "VernacExtend",
            "86a6cb3e883f1d286407e8e4a3bb0c30799e4773"
        ],
        [
            "rewrite F2R_Zopp.",
            "VernacExtend",
            "14dc9704af59104fbc8331cc5f22daa96d394349"
        ],
        [
            "now apply Ropp_lt_contravar.",
            "VernacExtend",
            "e78eb591f35b3721103af7436ff32e5846f47e1a"
        ],
        [
            "apply round_ge_generic...",
            "VernacExtend",
            "b942d5b4477c026dd26bf182ff70653039654af9"
        ],
        [
            "now apply generic_format_canonic.",
            "VernacExtend",
            "2745b0c69f3210ec0ffb8a97e6d75354bcc29534"
        ],
        [
            "pattern (F2R (Float radix2 (cond_Zopp true (Zpos mx)) ex)) at 1 ; rewrite <- Rplus_0_r.",
            "VernacExtend",
            "59d1f711e1bdadf751c4dbcd069858b4f5324a52"
        ],
        [
            "apply Rplus_le_compat_l.",
            "VernacExtend",
            "3af9ea371eb281cf0e58041faab020bb6798a832"
        ],
        [
            "now apply F2R_ge_0_compat.",
            "VernacExtend",
            "dee4b37db2af7e0397e3ec7ceb7cf7ff288ba7be"
        ],
        [
            "apply Rle_lt_trans with (2 := By).",
            "VernacExtend",
            "004eb2ce13a9aaf9bf9f738aedbc82603828870d"
        ],
        [
            "apply round_le_generic...",
            "VernacExtend",
            "7f2a01600a932d09b4d49ff42273647f7ead7071"
        ],
        [
            "now apply generic_format_canonic.",
            "VernacExtend",
            "2745b0c69f3210ec0ffb8a97e6d75354bcc29534"
        ],
        [
            "rewrite <- (Rplus_0_l (F2R (Float radix2 (Zpos my) ey))).",
            "VernacExtend",
            "07a89f4d757a336cd83fabd31a40cd3bab8abe14"
        ],
        [
            "apply Rplus_le_compat_r.",
            "VernacExtend",
            "5ca7acb5e67c7d7a5b6143fd11bc1e75c3e361e4"
        ],
        [
            "now apply F2R_le_0_compat.",
            "VernacExtend",
            "3d716bdf6fec341d030b5670c2b37cfef377c08f"
        ],
        [
            "destruct sy.",
            "VernacExtend",
            "7e683dd5d3f076a43a8ac37b29d32d5d4124bc63"
        ],
        [
            "2: now elim Hs.",
            "VernacExtend",
            "a37796d3957e5b914832fc3a219a4110c905f719"
        ],
        [
            "clear Hs.",
            "VernacExtend",
            "ddacf258bff03d86925bf490364e63ca1aad420d"
        ],
        [
            "apply Rabs_lt.",
            "VernacExtend",
            "bfcb50e7c60a3a6e7882767e577bd1a45e5bab34"
        ],
        [
            "split.",
            "VernacExtend",
            "55abc140132bd88981001ac656020469a8d503eb"
        ],
        [
            "apply Rlt_le_trans with (F2R (Float radix2 (cond_Zopp true (Zpos my)) ey)).",
            "VernacExtend",
            "d17cb8a6acc2eb1d04b8792ab4b2f077d71a8d7b"
        ],
        [
            "rewrite F2R_Zopp.",
            "VernacExtend",
            "14dc9704af59104fbc8331cc5f22daa96d394349"
        ],
        [
            "now apply Ropp_lt_contravar.",
            "VernacExtend",
            "e78eb591f35b3721103af7436ff32e5846f47e1a"
        ],
        [
            "apply round_ge_generic...",
            "VernacExtend",
            "b942d5b4477c026dd26bf182ff70653039654af9"
        ],
        [
            "now apply generic_format_canonic.",
            "VernacExtend",
            "2745b0c69f3210ec0ffb8a97e6d75354bcc29534"
        ],
        [
            "pattern (F2R (Float radix2 (cond_Zopp true (Zpos my)) ey)) at 1 ; rewrite <- Rplus_0_l.",
            "VernacExtend",
            "87b5dc86a10e0b8ae48a9eaaacc5396df2cae62a"
        ],
        [
            "apply Rplus_le_compat_r.",
            "VernacExtend",
            "5ca7acb5e67c7d7a5b6143fd11bc1e75c3e361e4"
        ],
        [
            "now apply F2R_ge_0_compat.",
            "VernacExtend",
            "dee4b37db2af7e0397e3ec7ceb7cf7ff288ba7be"
        ],
        [
            "apply Rle_lt_trans with (2 := Bx).",
            "VernacExtend",
            "755f1a55c5a0c3533bb4dff1c28080395936c462"
        ],
        [
            "apply round_le_generic...",
            "VernacExtend",
            "7f2a01600a932d09b4d49ff42273647f7ead7071"
        ],
        [
            "now apply generic_format_canonic.",
            "VernacExtend",
            "2745b0c69f3210ec0ffb8a97e6d75354bcc29534"
        ],
        [
            "rewrite <- (Rplus_0_r (F2R (Float radix2 (Zpos mx) ex))).",
            "VernacExtend",
            "b8e2e9865add4e739e2555801d58176d64b9086a"
        ],
        [
            "apply Rplus_le_compat_l.",
            "VernacExtend",
            "3af9ea371eb281cf0e58041faab020bb6798a832"
        ],
        [
            "now apply F2R_le_0_compat.",
            "VernacExtend",
            "3d716bdf6fec341d030b5670c2b37cfef377c08f"
        ],
        [
            "generalize (binary_normalize_correct m mz ez szero).",
            "VernacExtend",
            "6225960b7b4e46f481011674d40044e009e0623d"
        ],
        [
            "case Rlt_bool_spec.",
            "VernacExtend",
            "34a5734790264c820e9f5a43f0e8af9f8a4e3946"
        ],
        [
            "split; try easy.",
            "VernacExtend",
            "6a71419e22bf1e10ff817d0469549bc079471092"
        ],
        [
            "split; try easy.",
            "VernacExtend",
            "6a71419e22bf1e10ff817d0469549bc079471092"
        ],
        [
            "destruct (Rcompare_spec (F2R (beta:=radix2) {| Fnum := mz; Fexp := ez |}) 0); try easy.",
            "VernacExtend",
            "95f78cb508a9f1d0cf6dd1938742de3133249d93"
        ],
        [
            "rewrite H1 in Hp.",
            "VernacExtend",
            "4d10625e2a81eef146791d60b5b49588ee24f32e"
        ],
        [
            "apply Rplus_opp_r_uniq in Hp.",
            "VernacExtend",
            "9a128c40ec8cc48f5078d8ce08416a42bf523e82"
        ],
        [
            "rewrite <- F2R_Zopp in Hp.",
            "VernacExtend",
            "ce3abfb0f8de71e009bc4c1d5abb69e177ef4a00"
        ],
        [
            "eapply canonic_unicity in Hp.",
            "VernacExtend",
            "820aabb051de8b4d0d7f2cd70aced2df8bb610d9"
        ],
        [
            "inversion Hp.",
            "VernacExtend",
            "6af2f8346223ce3ae21c77528047f4c1b47aa595"
        ],
        [
            "destruct sy, sx, m; try discriminate H3; easy.",
            "VernacExtend",
            "6eca8fdd7f344b0fada951a2d5713769fb4a7334"
        ],
        [
            "apply canonic_canonic_mantissa.",
            "VernacExtend",
            "e71d83b1961bdc9255faa69fbb1351759cae44c7"
        ],
        [
            "apply Bool.andb_true_iff in Hy.",
            "VernacExtend",
            "61f870c17962c38b87d298acdcf0c05496b4c171"
        ],
        [
            "easy.",
            "VernacExtend",
            "ef1368621ae14ed4e378e6e1c58fbee46db9a962"
        ],
        [
            "replace (-cond_Zopp sx (Z.pos mx))%Z with (cond_Zopp (negb sx) (Z.pos mx)) by (destruct sx; auto).",
            "VernacExtend",
            "202a8e42d61e892cde1083ab2c52ce55e55edf93"
        ],
        [
            "apply canonic_canonic_mantissa.",
            "VernacExtend",
            "e71d83b1961bdc9255faa69fbb1351759cae44c7"
        ],
        [
            "apply Bool.andb_true_iff in Hx.",
            "VernacExtend",
            "f907878acd82ba242e8326fcf9d618d9055cd065"
        ],
        [
            "easy.",
            "VernacExtend",
            "ef1368621ae14ed4e378e6e1c58fbee46db9a962"
        ],
        [
            "intros Hz' Vz.",
            "VernacExtend",
            "f4d1c43cdac4b6dd5146e5f12cd73bd0f76cdd13"
        ],
        [
            "specialize (Sz Hz').",
            "VernacExtend",
            "a556d8124f21a2bae2881674d70792d92353e2f4"
        ],
        [
            "split.",
            "VernacExtend",
            "55abc140132bd88981001ac656020469a8d503eb"
        ],
        [
            "rewrite Vz.",
            "VernacExtend",
            "5bc63175b7a5e7fa38a956077bd69ce37cb991b9"
        ],
        [
            "now apply f_equal.",
            "VernacExtend",
            "2be51066ac0713afbd2686f67010448cf5cd7ac9"
        ],
        [
            "apply Sz.",
            "VernacExtend",
            "0c743ecfdccbd4d14674a70bc2b65634f4677427"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Definition Bminus minus_nan m x y := Bplus minus_nan m x (Bopp pair y).",
            "VernacDefinition",
            "5e363b0d9bbf626213994d2b11dceb8827f5ff87"
        ],
        [
            "Theorem Bminus_correct : forall minus_nan m x y, is_finite x = true -> is_finite y = true -> if Rlt_bool (Rabs (round radix2 fexp (round_mode m) (B2R x - B2R y))) (bpow radix2 emax) then B2R (Bminus minus_nan m x y) = round radix2 fexp (round_mode m) (B2R x - B2R y) /\\ is_finite (Bminus minus_nan m x y) = true /\\ Bsign (Bminus minus_nan m x y) = match Rcompare (B2R x - B2R y) 0 with | Eq => match m with mode_DN => orb (Bsign x) (negb (Bsign y)) | _ => andb (Bsign x) (negb (Bsign y)) end | Lt => true | Gt => false end else (B2FF (Bminus minus_nan m x y) = binary_overflow m (Bsign x) /\\ Bsign x = negb (Bsign y)).",
            "VernacStartTheoremProof",
            "ee70e93ef17ede6cca06932a38d52b5f138219ab"
        ],
        [
            "Proof with auto with typeclass_instances.",
            "VernacProof",
            "c16343efcd37779057959eb30e1ff5afec0a83eb"
        ],
        [
            "intros m minus_nan x y Fx Fy.",
            "VernacExtend",
            "1c8f8c197aa0a9f9a9d42ed57e230eaf7783d647"
        ],
        [
            "replace (negb (Bsign y)) with (Bsign (Bopp pair y)).",
            "VernacExtend",
            "ee9f6e60e1f8c27e4e15c0b4f1692561f120951d"
        ],
        [
            "unfold Rminus.",
            "VernacExtend",
            "be913ef3bb9103a3081d46d811769f83edb6f7a5"
        ],
        [
            "erewrite <- B2R_Bopp.",
            "VernacExtend",
            "c9260726d7074a2bc401334bfc5a3e72697c107b"
        ],
        [
            "apply Bplus_correct.",
            "VernacExtend",
            "097454523299b493db927b808725e9271754796c"
        ],
        [
            "exact Fx.",
            "VernacExtend",
            "5353e8a86b832ca0ad25fbd7e1d75cb15ba4b437"
        ],
        [
            "rewrite is_finite_Bopp.",
            "VernacExtend",
            "4376d5a4d2f359b9338eb907158ca89d1308bace"
        ],
        [
            "auto.",
            "VernacExtend",
            "1f09da0addd069b3b65326f8c71967acc1e985af"
        ],
        [
            "now destruct y as [ | | | ].",
            "VernacExtend",
            "c67c6fc36cf2b32ed8d9b7bb53bff4b2f99e8579"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Definition Fdiv_core_binary m1 e1 m2 e2 := let d1 := Zdigits2 m1 in let d2 := Zdigits2 m2 in let e := (e1 - e2)%Z in let (m, e') := match (d2 + prec - d1)%Z with | Zpos p => (Z.shiftl m1 (Zpos p), e + Zneg p)%Z | _ => (m1, e) end in let '(q, r) := Zfast_div_eucl m m2 in (q, e', new_location m2 r loc_Exact).",
            "VernacDefinition",
            "d0ad19cd83735ddeed69f60c177172e7f7ffc183"
        ],
        [
            "Lemma Bdiv_correct_aux : forall m sx mx ex sy my ey, let x := F2R (Float radix2 (cond_Zopp sx (Zpos mx)) ex) in let y := F2R (Float radix2 (cond_Zopp sy (Zpos my)) ey) in let z := let '(mz, ez, lz) := Fdiv_core_binary (Zpos mx) ex (Zpos my) ey in match mz with | Zpos mz => binary_round_aux m (xorb sx sy) mz ez lz | _ => F754_nan false xH end in valid_binary z = true /\\ if Rlt_bool (Rabs (round radix2 fexp (round_mode m) (x / y))) (bpow radix2 emax) then FF2R radix2 z = round radix2 fexp (round_mode m) (x / y) /\\ is_finite_FF z = true /\\ sign_FF z = xorb sx sy else z = binary_overflow m (xorb sx sy).",
            "VernacStartTheoremProof",
            "4972b6fbda78fb91b378dbe61adf156f958c4133"
        ],
        [
            "intros m sx mx ex sy my ey.",
            "VernacExtend",
            "667a77324564bfae6f2596e7c979a67fb484ecd5"
        ],
        [
            "replace (Fdiv_core_binary (Zpos mx) ex (Zpos my) ey) with (Fdiv_core radix2 prec (Zpos mx) ex (Zpos my) ey).",
            "VernacExtend",
            "1218caadab80d6b154623d4f03380fcc033ef9ea"
        ],
        [
            "refine (_ (Fdiv_core_correct radix2 prec (Zpos mx) ex (Zpos my) ey _ _ _)) ; try easy.",
            "VernacExtend",
            "ac060862bfab740fb92de8750801e37abddffce4"
        ],
        [
            "destruct (Fdiv_core radix2 prec (Zpos mx) ex (Zpos my) ey) as ((mz, ez), lz).",
            "VernacExtend",
            "b174fc6ca00b1f2da418b69ded892a7e2fe81f6a"
        ],
        [
            "intros (Pz, Bz).",
            "VernacExtend",
            "8f271cfded492bd2f6917023809e32eb382b7e03"
        ],
        [
            "simpl.",
            "VernacExtend",
            "1b93169f4cf876d207c1fab22a2347202ab48d85"
        ],
        [
            "replace (xorb sx sy) with (Rlt_bool (F2R (Float radix2 (cond_Zopp sx (Zpos mx)) ex) * / F2R (Float radix2 (cond_Zopp sy (Zpos my)) ey)) 0).",
            "VernacExtend",
            "601f7c19a3d32398c87a905421173831fe7864d0"
        ],
        [
            "unfold Rdiv.",
            "VernacExtend",
            "d9820df68a5475147f48d29acf89824b27f71597"
        ],
        [
            "destruct mz as [|mz|mz].",
            "VernacExtend",
            "a829e1a88f7cd376a133dde2aa95756233778278"
        ],
        [
            "elim (Zlt_irrefl prec).",
            "VernacExtend",
            "9742dfbeea5776081b0493fceb542f55c9b380a8"
        ],
        [
            "now apply Zle_lt_trans with Z0.",
            "VernacExtend",
            "bda6f1b5344ac7ed2474a634220c4a4241259b1b"
        ],
        [
            "apply binary_round_aux_correct.",
            "VernacExtend",
            "2a61e909da3e1e7a4b72fd0308dcaf909c511adf"
        ],
        [
            "rewrite Rabs_mult, Rabs_Rinv.",
            "VernacExtend",
            "9ce3c48d8dfafe27b3b8ffea0be55a030540d6b4"
        ],
        [
            "now rewrite <- 2!F2R_Zabs, 2!abs_cond_Zopp.",
            "VernacExtend",
            "32fc4b93895aa534d0505a9730a0994d090925a5"
        ],
        [
            "case sy.",
            "VernacExtend",
            "cdd75ff212c25e14509a77df1371f71be1f6ea2e"
        ],
        [
            "apply Rlt_not_eq.",
            "VernacExtend",
            "4d888fdf05ab3816c2e650b03b478096db638cf5"
        ],
        [
            "now apply F2R_lt_0_compat.",
            "VernacExtend",
            "49795aa14bce980bd770acc759456462f1e2dbb2"
        ],
        [
            "apply Rgt_not_eq.",
            "VernacExtend",
            "8860a9193cfdaf1f0316f8df1f2c0781738e5ef7"
        ],
        [
            "now apply F2R_gt_0_compat.",
            "VernacExtend",
            "2b5a1cb2582ac2d074766e6b65adcf42b088a406"
        ],
        [
            "revert Pz.",
            "VernacExtend",
            "0052f06260f891129fc837be32e5154a4229e139"
        ],
        [
            "generalize (Zdigits radix2 (Zpos mz)).",
            "VernacExtend",
            "c4339cc1758d9341490cde366bd6aa3f7b2dc22a"
        ],
        [
            "unfold fexp, FLT_exp.",
            "VernacExtend",
            "d790a7e5d03d5c9606c08f62c52b1a3604ada64e"
        ],
        [
            "clear.",
            "VernacExtend",
            "086ee0db0bdefcfa1ec15bb5cd44d451de64c569"
        ],
        [
            "intros ; zify ; subst.",
            "VernacExtend",
            "7230a5582b85d5a270abdd7962e491125771f8ed"
        ],
        [
            "omega.",
            "VernacExtend",
            "32c6c865d255452c7e10c77111456d1981cede39"
        ],
        [
            "elim Rlt_not_le with (1 := proj2 (inbetween_float_bounds _ _ _ _ _ Bz)).",
            "VernacExtend",
            "acc1437fea9cdbb867066be971b9fa1a5f51e83a"
        ],
        [
            "apply Rle_trans with R0.",
            "VernacExtend",
            "56da4b3d5f74d38a747892d3b4157e854e84554d"
        ],
        [
            "apply F2R_le_0_compat.",
            "VernacExtend",
            "c7889603f8eec7f68976f04dd9e33c82750d814c"
        ],
        [
            "now case mz.",
            "VernacExtend",
            "e80a159f84bb4b4ab4b9e22a9ea318566d6af23b"
        ],
        [
            "apply Rmult_le_pos.",
            "VernacExtend",
            "e03207c3cef85471384dc0906485b056bc83a80a"
        ],
        [
            "now apply F2R_ge_0_compat.",
            "VernacExtend",
            "dee4b37db2af7e0397e3ec7ceb7cf7ff288ba7be"
        ],
        [
            "apply Rlt_le.",
            "VernacExtend",
            "cdc4280500779f23bae235b94c24a4b2ea2921fe"
        ],
        [
            "apply Rinv_0_lt_compat.",
            "VernacExtend",
            "d7abdc8c3031a09ca2712c9563d7ecf89b4d477e"
        ],
        [
            "now apply F2R_gt_0_compat.",
            "VernacExtend",
            "2b5a1cb2582ac2d074766e6b65adcf42b088a406"
        ],
        [
            "case sy ; simpl.",
            "VernacExtend",
            "ee70c38398b30d963559c1901a2c1c558073bc52"
        ],
        [
            "change (Zneg my) with (Zopp (Zpos my)).",
            "VernacExtend",
            "afe4ac983d13c2f2593cfd40a121a845769f80a6"
        ],
        [
            "rewrite F2R_Zopp.",
            "VernacExtend",
            "14dc9704af59104fbc8331cc5f22daa96d394349"
        ],
        [
            "rewrite <- Ropp_inv_permute.",
            "VernacExtend",
            "85f530bfe968b6a9d6a9139b5c5c7f74c68047b7"
        ],
        [
            "rewrite Ropp_mult_distr_r_reverse.",
            "VernacExtend",
            "c1bb2248d34f6a68a5e2998139429f084e155207"
        ],
        [
            "case sx ; simpl.",
            "VernacExtend",
            "d9090bd7ef0e81de0deac504c45383c4a27c8e05"
        ],
        [
            "apply Rlt_bool_false.",
            "VernacExtend",
            "115f3bf88cb7153f51757af6b09533b60d89f56b"
        ],
        [
            "rewrite <- Ropp_mult_distr_l_reverse.",
            "VernacExtend",
            "e7c61948f76e0a8897e51bfab935c33e66508906"
        ],
        [
            "apply Rmult_le_pos.",
            "VernacExtend",
            "e03207c3cef85471384dc0906485b056bc83a80a"
        ],
        [
            "rewrite <- F2R_opp.",
            "VernacExtend",
            "c79f36956df0a657acacbc3517318f048ab6de55"
        ],
        [
            "now apply F2R_ge_0_compat.",
            "VernacExtend",
            "dee4b37db2af7e0397e3ec7ceb7cf7ff288ba7be"
        ],
        [
            "apply Rlt_le.",
            "VernacExtend",
            "cdc4280500779f23bae235b94c24a4b2ea2921fe"
        ],
        [
            "apply Rinv_0_lt_compat.",
            "VernacExtend",
            "d7abdc8c3031a09ca2712c9563d7ecf89b4d477e"
        ],
        [
            "now apply F2R_gt_0_compat.",
            "VernacExtend",
            "2b5a1cb2582ac2d074766e6b65adcf42b088a406"
        ],
        [
            "apply Rlt_bool_true.",
            "VernacExtend",
            "2dd8acd5318209d40288e95b2cc6a1cd92d8d107"
        ],
        [
            "rewrite <- Ropp_0.",
            "VernacExtend",
            "9b57276282263b89d6671472ad672c5763b57b55"
        ],
        [
            "apply Ropp_lt_contravar.",
            "VernacExtend",
            "d8e11ebac93d435105a924a8c0c7fe0b21db4797"
        ],
        [
            "apply Rmult_lt_0_compat.",
            "VernacExtend",
            "c57ce258f04cdf6d200ca0efb8bd86c726436bf7"
        ],
        [
            "now apply F2R_gt_0_compat.",
            "VernacExtend",
            "2b5a1cb2582ac2d074766e6b65adcf42b088a406"
        ],
        [
            "apply Rinv_0_lt_compat.",
            "VernacExtend",
            "d7abdc8c3031a09ca2712c9563d7ecf89b4d477e"
        ],
        [
            "now apply F2R_gt_0_compat.",
            "VernacExtend",
            "2b5a1cb2582ac2d074766e6b65adcf42b088a406"
        ],
        [
            "apply Rgt_not_eq.",
            "VernacExtend",
            "8860a9193cfdaf1f0316f8df1f2c0781738e5ef7"
        ],
        [
            "now apply F2R_gt_0_compat.",
            "VernacExtend",
            "2b5a1cb2582ac2d074766e6b65adcf42b088a406"
        ],
        [
            "case sx.",
            "VernacExtend",
            "170e50034984a3c45fbc1692315f4c57e6a7660e"
        ],
        [
            "apply Rlt_bool_true.",
            "VernacExtend",
            "2dd8acd5318209d40288e95b2cc6a1cd92d8d107"
        ],
        [
            "rewrite F2R_Zopp.",
            "VernacExtend",
            "14dc9704af59104fbc8331cc5f22daa96d394349"
        ],
        [
            "rewrite Ropp_mult_distr_l_reverse.",
            "VernacExtend",
            "1d14afaf59b9fd90d930059e8d15a46d6c95c450"
        ],
        [
            "rewrite <- Ropp_0.",
            "VernacExtend",
            "9b57276282263b89d6671472ad672c5763b57b55"
        ],
        [
            "apply Ropp_lt_contravar.",
            "VernacExtend",
            "d8e11ebac93d435105a924a8c0c7fe0b21db4797"
        ],
        [
            "apply Rmult_lt_0_compat.",
            "VernacExtend",
            "c57ce258f04cdf6d200ca0efb8bd86c726436bf7"
        ],
        [
            "now apply F2R_gt_0_compat.",
            "VernacExtend",
            "2b5a1cb2582ac2d074766e6b65adcf42b088a406"
        ],
        [
            "apply Rinv_0_lt_compat.",
            "VernacExtend",
            "d7abdc8c3031a09ca2712c9563d7ecf89b4d477e"
        ],
        [
            "now apply F2R_gt_0_compat.",
            "VernacExtend",
            "2b5a1cb2582ac2d074766e6b65adcf42b088a406"
        ],
        [
            "apply Rlt_bool_false.",
            "VernacExtend",
            "115f3bf88cb7153f51757af6b09533b60d89f56b"
        ],
        [
            "apply Rmult_le_pos.",
            "VernacExtend",
            "e03207c3cef85471384dc0906485b056bc83a80a"
        ],
        [
            "now apply F2R_ge_0_compat.",
            "VernacExtend",
            "dee4b37db2af7e0397e3ec7ceb7cf7ff288ba7be"
        ],
        [
            "apply Rlt_le.",
            "VernacExtend",
            "cdc4280500779f23bae235b94c24a4b2ea2921fe"
        ],
        [
            "apply Rinv_0_lt_compat.",
            "VernacExtend",
            "d7abdc8c3031a09ca2712c9563d7ecf89b4d477e"
        ],
        [
            "now apply F2R_gt_0_compat.",
            "VernacExtend",
            "2b5a1cb2582ac2d074766e6b65adcf42b088a406"
        ],
        [
            "unfold Fdiv_core_binary, Fdiv_core.",
            "VernacExtend",
            "a9071ee2094fac12f4b44ed409a746e97812a291"
        ],
        [
            "rewrite 2!Zdigits2_Zdigits.",
            "VernacExtend",
            "ceff6ed40208b3b4b9f4a80697712cf147b4f4f4"
        ],
        [
            "change 2%Z with (radix_val radix2).",
            "VernacExtend",
            "15e91e944ed01ba7350e023be33458cb95f8b644"
        ],
        [
            "destruct (Zdigits radix2 (Z.pos my) + prec - Zdigits radix2 (Z.pos mx))%Z as [|p|p].",
            "VernacExtend",
            "35181f84a8c32982dff954280bebec84df89be4e"
        ],
        [
            "now rewrite Zfast_div_eucl_correct.",
            "VernacExtend",
            "e5fd34788d6bfff7976c3adab674efb3f826d668"
        ],
        [
            "rewrite Z.shiftl_mul_pow2 by easy.",
            "VernacExtend",
            "289cc211607b5737f7a49ef7f79b739cb08023d1"
        ],
        [
            "now rewrite Zfast_div_eucl_correct.",
            "VernacExtend",
            "e5fd34788d6bfff7976c3adab674efb3f826d668"
        ],
        [
            "now rewrite Zfast_div_eucl_correct.",
            "VernacExtend",
            "e5fd34788d6bfff7976c3adab674efb3f826d668"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Definition Bdiv div_nan m x y := let f pl := B754_nan (fst pl) (snd pl) in match x, y with | B754_nan _ _, _ | _, B754_nan _ _ => f (div_nan x y) | B754_infinity sx, B754_infinity sy => f (div_nan x y) | B754_infinity sx, B754_finite sy _ _ _ => B754_infinity (xorb sx sy) | B754_finite sx _ _ _, B754_infinity sy => B754_zero (xorb sx sy) | B754_infinity sx, B754_zero sy => B754_infinity (xorb sx sy) | B754_zero sx, B754_infinity sy => B754_zero (xorb sx sy) | B754_finite sx _ _ _, B754_zero sy => B754_infinity (xorb sx sy) | B754_zero sx, B754_finite sy _ _ _ => B754_zero (xorb sx sy) | B754_zero sx, B754_zero sy => f (div_nan x y) | B754_finite sx mx ex _, B754_finite sy my ey _ => FF2B _ (proj1 (Bdiv_correct_aux m sx mx ex sy my ey)) end.",
            "VernacDefinition",
            "0d4d181e932f4dc8309cc9f00118ee1c612d9dcb"
        ],
        [
            "Theorem Bdiv_correct : forall div_nan m x y, B2R y <> 0%R -> if Rlt_bool (Rabs (round radix2 fexp (round_mode m) (B2R x / B2R y))) (bpow radix2 emax) then B2R (Bdiv div_nan m x y) = round radix2 fexp (round_mode m) (B2R x / B2R y) /\\ is_finite (Bdiv div_nan m x y) = is_finite x /\\ (is_nan (Bdiv div_nan m x y) = false -> Bsign (Bdiv div_nan m x y) = xorb (Bsign x) (Bsign y)) else B2FF (Bdiv div_nan m x y) = binary_overflow m (xorb (Bsign x) (Bsign y)).",
            "VernacStartTheoremProof",
            "f39d270eaddb0d6c38e5637903c8988e5e4ff3b1"
        ],
        [
            "intros div_nan m x [sy|sy|sy ply|sy my ey Hy] Zy ; try now elim Zy.",
            "VernacExtend",
            "aa8fb0b6d6cf69be0fe52c219b8b0d41d359d2df"
        ],
        [
            "revert x.",
            "VernacExtend",
            "df8e7a3327c3fe54cc92fed148460363bea0ac80"
        ],
        [
            "unfold Rdiv.",
            "VernacExtend",
            "d9820df68a5475147f48d29acf89824b27f71597"
        ],
        [
            "intros [sx|sx|sx plx|sx mx ex Hx] ; try ( rewrite Rmult_0_l, round_0, Rabs_R0, Rlt_bool_true ; [ now repeat constructor | apply bpow_gt_0 | auto with typeclass_instances ] ).",
            "VernacExtend",
            "6f6345fe7523060910f07584d15ebb117add296b"
        ],
        [
            "simpl.",
            "VernacExtend",
            "1b93169f4cf876d207c1fab22a2347202ab48d85"
        ],
        [
            "case Bdiv_correct_aux.",
            "VernacExtend",
            "6495cd69cc4f8532cd0e04bc61bfdcf8cdac5b5f"
        ],
        [
            "intros H1.",
            "VernacExtend",
            "ba8e6c21eb83603690828b8ea37ea25a6f2962f3"
        ],
        [
            "unfold Rdiv.",
            "VernacExtend",
            "d9820df68a5475147f48d29acf89824b27f71597"
        ],
        [
            "case Rlt_bool.",
            "VernacExtend",
            "da208ea1a14afd75e8ab60d99e3d2460ef18e0dc"
        ],
        [
            "intros (H2, (H3, H4)).",
            "VernacExtend",
            "89bd6077fe74b2237b5a34c73e56fe1f7d3600a5"
        ],
        [
            "split.",
            "VernacExtend",
            "55abc140132bd88981001ac656020469a8d503eb"
        ],
        [
            "now rewrite B2R_FF2B.",
            "VernacExtend",
            "364a0e8b8e6f13efaa19a009ab431dc2474ea6f2"
        ],
        [
            "split.",
            "VernacExtend",
            "55abc140132bd88981001ac656020469a8d503eb"
        ],
        [
            "now rewrite is_finite_FF2B.",
            "VernacExtend",
            "705875eebcbc072e4ea86daec6e02904c532c7d2"
        ],
        [
            "rewrite Bsign_FF2B.",
            "VernacExtend",
            "76a51b8aae4f12f644ab280018318f288b7848d3"
        ],
        [
            "congruence.",
            "VernacExtend",
            "d8c818f6cffeaee6a722a71acc77f2d6e5199eb9"
        ],
        [
            "intros H2.",
            "VernacExtend",
            "1cdce4ec62ec85608d1a6cc1fb7ae184c894a041"
        ],
        [
            "now rewrite B2FF_FF2B.",
            "VernacExtend",
            "ec37d971040d8fa4dd8551e47d1f57dc0a3334be"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Definition Fsqrt_core_binary m e := let d := Zdigits2 m in let s := Zmax (2 * prec - d) 0 in let e' := (e - s)%Z in let (s', e'') := if Zeven e' then (s, e') else (s + 1, e' - 1)%Z in let m' := match s' with | Zpos p => Z.shiftl m (Zpos p) | _ => m end in let (q, r) := Z.sqrtrem m' in let l := if Zeq_bool r 0 then loc_Exact else loc_Inexact (if Zle_bool r q then Lt else Gt) in (q, Zdiv2 e'', l).",
            "VernacDefinition",
            "dbfa05c723f3b8d4f630e990acfbd2638a0481c3"
        ],
        [
            "Lemma Bsqrt_correct_aux : forall m mx ex (Hx : bounded mx ex = true), let x := F2R (Float radix2 (Zpos mx) ex) in let z := let '(mz, ez, lz) := Fsqrt_core_binary (Zpos mx) ex in match mz with | Zpos mz => binary_round_aux m false mz ez lz | _ => F754_nan false xH end in valid_binary z = true /\\ FF2R radix2 z = round radix2 fexp (round_mode m) (sqrt x) /\\ is_finite_FF z = true /\\ sign_FF z = false.",
            "VernacStartTheoremProof",
            "bce6251aa4deaea8e4facc9af55896c69762af01"
        ],
        [
            "Proof with auto with typeclass_instances.",
            "VernacProof",
            "c16343efcd37779057959eb30e1ff5afec0a83eb"
        ],
        [
            "intros m mx ex Hx.",
            "VernacExtend",
            "62c7a7f4b232af9e1585a64208959c4634d9d71f"
        ],
        [
            "replace (Fsqrt_core_binary (Zpos mx) ex) with (Fsqrt_core radix2 prec (Zpos mx) ex).",
            "VernacExtend",
            "dda08958dfacd59bb0de4c3ff5629331d080ff7a"
        ],
        [
            "simpl.",
            "VernacExtend",
            "1b93169f4cf876d207c1fab22a2347202ab48d85"
        ],
        [
            "refine (_ (Fsqrt_core_correct radix2 prec (Zpos mx) ex _)) ; try easy.",
            "VernacExtend",
            "536a00e1f6ae568d5b79e6721127240b1633a4c3"
        ],
        [
            "destruct (Fsqrt_core radix2 prec (Zpos mx) ex) as ((mz, ez), lz).",
            "VernacExtend",
            "12f43fea9757af7795e0271b8e928c790759958f"
        ],
        [
            "intros (Pz, Bz).",
            "VernacExtend",
            "8f271cfded492bd2f6917023809e32eb382b7e03"
        ],
        [
            "destruct mz as [|mz|mz].",
            "VernacExtend",
            "a829e1a88f7cd376a133dde2aa95756233778278"
        ],
        [
            "elim (Zlt_irrefl prec).",
            "VernacExtend",
            "9742dfbeea5776081b0493fceb542f55c9b380a8"
        ],
        [
            "now apply Zle_lt_trans with Z0.",
            "VernacExtend",
            "bda6f1b5344ac7ed2474a634220c4a4241259b1b"
        ],
        [
            "refine (_ (binary_round_aux_correct m (sqrt (F2R (Float radix2 (Zpos mx) ex))) mz ez lz _ _)).",
            "VernacExtend",
            "840f95c614db787f6ca1d676a108a4a909ffdaea"
        ],
        [
            "rewrite Rlt_bool_false.",
            "VernacExtend",
            "4727213e40ddfbec66b0f056e1c646ac9eb48972"
        ],
        [
            "2: apply sqrt_ge_0.",
            "VernacExtend",
            "2f9bcd8adb9bef6454763124aee75fbf1f07cae8"
        ],
        [
            "rewrite Rlt_bool_true.",
            "VernacExtend",
            "31cd82492c96b4dc35f8c36f967bc8802a2bc6ba"
        ],
        [
            "easy.",
            "VernacExtend",
            "ef1368621ae14ed4e378e6e1c58fbee46db9a962"
        ],
        [
            "rewrite Rabs_pos_eq.",
            "VernacExtend",
            "489e84e15a0f0c3833f18764e3ff39e15bc66da3"
        ],
        [
            "refine (_ (relative_error_FLT_ex radix2 emin prec (prec_gt_0 prec) (round_mode m) (sqrt (F2R (Float radix2 (Zpos mx) ex))) _)).",
            "VernacExtend",
            "afe111974d5992ba9f6f702fd913d5641e1abd83"
        ],
        [
            "fold fexp.",
            "VernacExtend",
            "e9f391a0c2e1b071ddb032b3338a36259e46f252"
        ],
        [
            "intros (eps, (Heps, Hr)).",
            "VernacExtend",
            "bf6a23c26ab82ddace0c639803d5a450bd6ed489"
        ],
        [
            "rewrite Hr.",
            "VernacExtend",
            "f125d3fd5b288de6b75a9762d9060512a4dedad7"
        ],
        [
            "assert (Heps': (Rabs eps < 1)%R).",
            "VernacExtend",
            "68930a9692814bf71b9bed00551baf0a91da2135"
        ],
        [
            "apply Rlt_le_trans with (1 := Heps).",
            "VernacExtend",
            "015dda57332110a532f2c5d1aeb7ad0274402751"
        ],
        [
            "fold (bpow radix2 0).",
            "VernacExtend",
            "b066c5b47eaaa0844dedd332e239fc680af7aee7"
        ],
        [
            "apply bpow_le.",
            "VernacExtend",
            "9264f19c0062a0a711efc832825406a995342e90"
        ],
        [
            "generalize (prec_gt_0 prec).",
            "VernacExtend",
            "f827b434a598a8eb871cd50fd31ccf4bfded79d5"
        ],
        [
            "clear ; omega.",
            "VernacExtend",
            "eec4b40e7fab9dab9db362824141f438dba9b179"
        ],
        [
            "apply Rsqr_incrst_0.",
            "VernacExtend",
            "876a7652031a8835044d8a1b8f4b26d3137a7d56"
        ],
        [
            "3: apply bpow_ge_0.",
            "VernacExtend",
            "7044b4488237094c12e2664d6899564543d2d872"
        ],
        [
            "rewrite Rsqr_mult.",
            "VernacExtend",
            "1727b5334e3066319c9e7526e6013ab697934fe7"
        ],
        [
            "rewrite Rsqr_sqrt.",
            "VernacExtend",
            "8a11038a5332283dbae528e285a68e3def534ef0"
        ],
        [
            "2: now apply F2R_ge_0_compat.",
            "VernacExtend",
            "734b56a3854f8a33dffe5cae8f6a346d77402c06"
        ],
        [
            "unfold Rsqr.",
            "VernacExtend",
            "ee8c595e99ab49bf64a7e1aaaa8933ba6a0b0354"
        ],
        [
            "apply Rmult_ge_0_gt_0_lt_compat.",
            "VernacExtend",
            "e65f855ed459b5d681e964b5278eae5b57d6cbc7"
        ],
        [
            "apply Rle_ge.",
            "VernacExtend",
            "a688ebddf90443508c57e22ba16f7fa0da42ef9a"
        ],
        [
            "apply Rle_0_sqr.",
            "VernacExtend",
            "dab150eb3bf9ea450741d52bf434375cb024aaf1"
        ],
        [
            "apply bpow_gt_0.",
            "VernacExtend",
            "51431cbce9a44d56b4b1857315ff3c6ca3c98e7f"
        ],
        [
            "now apply bounded_lt_emax.",
            "VernacExtend",
            "a84b4b45c2d6d4db987de330c7a7cc300348fb3f"
        ],
        [
            "apply Rlt_le_trans with 4%R.",
            "VernacExtend",
            "62119f4512cadea2179ec60411d6ce9f7ba41ff4"
        ],
        [
            "apply Rsqr_incrst_1.",
            "VernacExtend",
            "c2b3ea2fdf4d9de2b7929470a8071cf68df932c0"
        ],
        [
            "apply Rplus_lt_compat_l.",
            "VernacExtend",
            "cfadddfd242496b5b9297d5ae6868b0dbc12aeee"
        ],
        [
            "apply (Rabs_lt_inv _ _ Heps').",
            "VernacExtend",
            "514326bda30ee695c11522d691ce92d593320bb5"
        ],
        [
            "rewrite <- (Rplus_opp_r 1).",
            "VernacExtend",
            "f0b363d9a1f38337b74a0528b50fda8e4b11e99d"
        ],
        [
            "apply Rplus_le_compat_l.",
            "VernacExtend",
            "3af9ea371eb281cf0e58041faab020bb6798a832"
        ],
        [
            "apply Rlt_le.",
            "VernacExtend",
            "cdc4280500779f23bae235b94c24a4b2ea2921fe"
        ],
        [
            "apply (Rabs_lt_inv _ _ Heps').",
            "VernacExtend",
            "514326bda30ee695c11522d691ce92d593320bb5"
        ],
        [
            "now apply (Z2R_le 0 2).",
            "VernacExtend",
            "35a3a784aef07d35612481f4ee268a80560de14b"
        ],
        [
            "change 4%R with (bpow radix2 2).",
            "VernacExtend",
            "4ca7b99ebd90ea97c2a69505343cfe490b81b6ec"
        ],
        [
            "apply bpow_le.",
            "VernacExtend",
            "9264f19c0062a0a711efc832825406a995342e90"
        ],
        [
            "generalize (prec_gt_0 prec).",
            "VernacExtend",
            "f827b434a598a8eb871cd50fd31ccf4bfded79d5"
        ],
        [
            "clear -Hmax ; omega.",
            "VernacExtend",
            "3984299dde31268ac85ebbe94e4ce6dd7dbd4c8e"
        ],
        [
            "apply Rmult_le_pos.",
            "VernacExtend",
            "e03207c3cef85471384dc0906485b056bc83a80a"
        ],
        [
            "apply sqrt_ge_0.",
            "VernacExtend",
            "d82f50f5e63ae5762cd595af5b53afaee531c34f"
        ],
        [
            "rewrite <- (Rplus_opp_r 1).",
            "VernacExtend",
            "f0b363d9a1f38337b74a0528b50fda8e4b11e99d"
        ],
        [
            "apply Rplus_le_compat_l.",
            "VernacExtend",
            "3af9ea371eb281cf0e58041faab020bb6798a832"
        ],
        [
            "apply Rlt_le.",
            "VernacExtend",
            "cdc4280500779f23bae235b94c24a4b2ea2921fe"
        ],
        [
            "apply (Rabs_lt_inv _ _ Heps').",
            "VernacExtend",
            "514326bda30ee695c11522d691ce92d593320bb5"
        ],
        [
            "rewrite Rabs_pos_eq.",
            "VernacExtend",
            "489e84e15a0f0c3833f18764e3ff39e15bc66da3"
        ],
        [
            "2: apply sqrt_ge_0.",
            "VernacExtend",
            "2f9bcd8adb9bef6454763124aee75fbf1f07cae8"
        ],
        [
            "apply Rsqr_incr_0.",
            "VernacExtend",
            "fc52d69ec92a05266d7ef9c55d704e8ea9362c07"
        ],
        [
            "2: apply bpow_ge_0.",
            "VernacExtend",
            "8cca2c2766d3b161d408096312c09533476d797c"
        ],
        [
            "2: apply sqrt_ge_0.",
            "VernacExtend",
            "2f9bcd8adb9bef6454763124aee75fbf1f07cae8"
        ],
        [
            "rewrite Rsqr_sqrt.",
            "VernacExtend",
            "8a11038a5332283dbae528e285a68e3def534ef0"
        ],
        [
            "2: now apply F2R_ge_0_compat.",
            "VernacExtend",
            "734b56a3854f8a33dffe5cae8f6a346d77402c06"
        ],
        [
            "apply Rle_trans with (bpow radix2 emin).",
            "VernacExtend",
            "9c5701afe62bd12f9f6982d3c7e12a80a155f1b4"
        ],
        [
            "unfold Rsqr.",
            "VernacExtend",
            "ee8c595e99ab49bf64a7e1aaaa8933ba6a0b0354"
        ],
        [
            "rewrite <- bpow_plus.",
            "VernacExtend",
            "9ebeb3f5611fe78274a1e2e0131c7f7ed66e1cfc"
        ],
        [
            "apply bpow_le.",
            "VernacExtend",
            "9264f19c0062a0a711efc832825406a995342e90"
        ],
        [
            "unfold emin.",
            "VernacExtend",
            "3fff444b9eede7682b5d216fb49ade0df5718e8c"
        ],
        [
            "clear -Hmax ; omega.",
            "VernacExtend",
            "3984299dde31268ac85ebbe94e4ce6dd7dbd4c8e"
        ],
        [
            "apply generic_format_ge_bpow with fexp.",
            "VernacExtend",
            "fd9bcb61df237edaccfffcfe26b8bdff5aaf4f37"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "apply Zle_max_r.",
            "VernacExtend",
            "0b9837a5cbbd686132a86542bd0f995c6eace10f"
        ],
        [
            "now apply F2R_gt_0_compat.",
            "VernacExtend",
            "2b5a1cb2582ac2d074766e6b65adcf42b088a406"
        ],
        [
            "apply generic_format_canonic.",
            "VernacExtend",
            "80d076e0f344075d8eaaa3549bbe62413bee3ba2"
        ],
        [
            "apply (canonic_canonic_mantissa false).",
            "VernacExtend",
            "c49323989858b7f9e086506c6d1af043e595ced8"
        ],
        [
            "apply (andb_prop _ _ Hx).",
            "VernacExtend",
            "c4a7df8a8b474352f78f00f2a04bf588e8d275fe"
        ],
        [
            "apply round_ge_generic...",
            "VernacExtend",
            "b942d5b4477c026dd26bf182ff70653039654af9"
        ],
        [
            "apply generic_format_0.",
            "VernacExtend",
            "dc3c4afb013f89f69b2f0e71216d8926d296b3bd"
        ],
        [
            "apply sqrt_ge_0.",
            "VernacExtend",
            "d82f50f5e63ae5762cd595af5b53afaee531c34f"
        ],
        [
            "rewrite Rabs_pos_eq.",
            "VernacExtend",
            "489e84e15a0f0c3833f18764e3ff39e15bc66da3"
        ],
        [
            "exact Bz.",
            "VernacExtend",
            "e0c9f2fa9a5f3572afd02f47d41bf9b66fc731d1"
        ],
        [
            "apply sqrt_ge_0.",
            "VernacExtend",
            "d82f50f5e63ae5762cd595af5b53afaee531c34f"
        ],
        [
            "revert Pz.",
            "VernacExtend",
            "0052f06260f891129fc837be32e5154a4229e139"
        ],
        [
            "generalize (Zdigits radix2 (Zpos mz)).",
            "VernacExtend",
            "c4339cc1758d9341490cde366bd6aa3f7b2dc22a"
        ],
        [
            "unfold fexp, FLT_exp.",
            "VernacExtend",
            "d790a7e5d03d5c9606c08f62c52b1a3604ada64e"
        ],
        [
            "clear.",
            "VernacExtend",
            "086ee0db0bdefcfa1ec15bb5cd44d451de64c569"
        ],
        [
            "intros ; zify ; subst.",
            "VernacExtend",
            "7230a5582b85d5a270abdd7962e491125771f8ed"
        ],
        [
            "omega.",
            "VernacExtend",
            "32c6c865d255452c7e10c77111456d1981cede39"
        ],
        [
            "elim Rlt_not_le with (1 := proj2 (inbetween_float_bounds _ _ _ _ _ Bz)).",
            "VernacExtend",
            "acc1437fea9cdbb867066be971b9fa1a5f51e83a"
        ],
        [
            "apply Rle_trans with R0.",
            "VernacExtend",
            "56da4b3d5f74d38a747892d3b4157e854e84554d"
        ],
        [
            "apply F2R_le_0_compat.",
            "VernacExtend",
            "c7889603f8eec7f68976f04dd9e33c82750d814c"
        ],
        [
            "now case mz.",
            "VernacExtend",
            "e80a159f84bb4b4ab4b9e22a9ea318566d6af23b"
        ],
        [
            "apply sqrt_ge_0.",
            "VernacExtend",
            "d82f50f5e63ae5762cd595af5b53afaee531c34f"
        ],
        [
            "unfold Fsqrt_core, Fsqrt_core_binary.",
            "VernacExtend",
            "cff198ae5641a9aaf676ef23402c1f4f988a5139"
        ],
        [
            "rewrite Zdigits2_Zdigits.",
            "VernacExtend",
            "cdc5ff4ecf5733c57943c25d2f2779d738cd80c0"
        ],
        [
            "destruct (if Zeven _ then _ else _) as [[|s'|s'] e''] ; try easy.",
            "VernacExtend",
            "3847cc511bff85b57e0ee683390344f89566e004"
        ],
        [
            "now rewrite Z.shiftl_mul_pow2.",
            "VernacExtend",
            "bf6702f8e85dafcdd1d544bdf89eccacba878b33"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Definition Bsqrt sqrt_nan m x := let f pl := B754_nan (fst pl) (snd pl) in match x with | B754_nan sx plx => f (sqrt_nan x) | B754_infinity false => x | B754_infinity true => f (sqrt_nan x) | B754_finite true _ _ _ => f (sqrt_nan x) | B754_zero _ => x | B754_finite sx mx ex Hx => FF2B _ (proj1 (Bsqrt_correct_aux m mx ex Hx)) end.",
            "VernacDefinition",
            "daf25b76557d2185a9ad4a4a0bcbae4b82374285"
        ],
        [
            "Theorem Bsqrt_correct : forall sqrt_nan m x, B2R (Bsqrt sqrt_nan m x) = round radix2 fexp (round_mode m) (sqrt (B2R x)) /\\ is_finite (Bsqrt sqrt_nan m x) = match x with B754_zero _ => true | B754_finite false _ _ _ => true | _ => false end /\\ (is_nan (Bsqrt sqrt_nan m x) = false -> Bsign (Bsqrt sqrt_nan m x) = Bsign x).",
            "VernacStartTheoremProof",
            "4e2812b616506156444a331af578919689117b7d"
        ],
        [
            "intros sqrt_nan m [sx|[|]| |sx mx ex Hx] ; try ( now simpl ; rewrite sqrt_0, round_0 ; intuition auto with typeclass_instances ).",
            "VernacExtend",
            "0530ee64fa265d01466b1512a3c6566692ba403b"
        ],
        [
            "simpl.",
            "VernacExtend",
            "1b93169f4cf876d207c1fab22a2347202ab48d85"
        ],
        [
            "case Bsqrt_correct_aux.",
            "VernacExtend",
            "0f14e9cf208def53d479c721bb88928588e392bb"
        ],
        [
            "intros H1 (H2, (H3, H4)).",
            "VernacExtend",
            "5ba6a0e658273fb1a537d3b4afba577728186852"
        ],
        [
            "case sx.",
            "VernacExtend",
            "170e50034984a3c45fbc1692315f4c57e6a7660e"
        ],
        [
            "refine (conj _ (conj (refl_equal false) _)).",
            "VernacExtend",
            "83a0d7a51c103868e9ba046d5e5373cce597321f"
        ],
        [
            "apply sym_eq.",
            "VernacExtend",
            "f01eb728d9ceeac2915c66b52a7b50a0c452e949"
        ],
        [
            "unfold sqrt.",
            "VernacExtend",
            "71ef64092f0003bcdade22760b25585d0190003b"
        ],
        [
            "case Rcase_abs.",
            "VernacExtend",
            "ccf1c2af042cc12c43fb480ccf9e835fcd0d1049"
        ],
        [
            "intros _.",
            "VernacExtend",
            "eb0e518a4896777a9a76b3ab973eaf7b4f1b52db"
        ],
        [
            "apply round_0.",
            "VernacExtend",
            "cfd5293949ec60a4849d9de4d1566f8e8f709a5d"
        ],
        [
            "auto with typeclass_instances.",
            "VernacExtend",
            "673e27e9d909eb73b87d5da012fc02debf6cfc76"
        ],
        [
            "intros H.",
            "VernacExtend",
            "5cfae87a34fa7b59a257c9640f1b674f6e6d780b"
        ],
        [
            "elim Rge_not_lt with (1 := H).",
            "VernacExtend",
            "10a2d26cb8482cade91d8ca00edf13d2965d668d"
        ],
        [
            "now apply F2R_lt_0_compat.",
            "VernacExtend",
            "49795aa14bce980bd770acc759456462f1e2dbb2"
        ],
        [
            "easy.",
            "VernacExtend",
            "ef1368621ae14ed4e378e6e1c58fbee46db9a962"
        ],
        [
            "split.",
            "VernacExtend",
            "55abc140132bd88981001ac656020469a8d503eb"
        ],
        [
            "now rewrite B2R_FF2B.",
            "VernacExtend",
            "364a0e8b8e6f13efaa19a009ab431dc2474ea6f2"
        ],
        [
            "split.",
            "VernacExtend",
            "55abc140132bd88981001ac656020469a8d503eb"
        ],
        [
            "now rewrite is_finite_FF2B.",
            "VernacExtend",
            "705875eebcbc072e4ea86daec6e02904c532c7d2"
        ],
        [
            "intro.",
            "VernacExtend",
            "3999be354c758ba0d1866e0fcc78a7288779a224"
        ],
        [
            "rewrite Bsign_FF2B.",
            "VernacExtend",
            "76a51b8aae4f12f644ab280018318f288b7848d3"
        ],
        [
            "auto.",
            "VernacExtend",
            "1f09da0addd069b3b65326f8c71967acc1e985af"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "End Binary.",
            "VernacEndSegment",
            "ad4494d99314ec118c96d237505ebf72e4b52437"
        ]
    ],
    "proofs": [
        {
            "name": "FF2R_B2FF",
            "line_nb": 30,
            "steps": [
                {
                    "command": [
                        "now intros [sx|sx|sx [plx Hplx]|sx mx ex Hx].",
                        "VernacExtend",
                        "69f75f0c275bdcf4b5234bf6629b1ace8a1ee628"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "B2FF_FF2B",
            "line_nb": 33,
            "steps": [
                {
                    "command": [
                        "now intros [sx|sx|sx plx|sx mx ex] Hx.",
                        "VernacExtend",
                        "067d014100d8de768af185d9e0e3bd79205945aa"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "valid_binary_B2FF",
            "line_nb": 36,
            "steps": [
                {
                    "command": [
                        "now intros [sx|sx|sx [plx Hplx]|sx mx ex Hx].",
                        "VernacExtend",
                        "69f75f0c275bdcf4b5234bf6629b1ace8a1ee628"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "FF2B_B2FF",
            "line_nb": 39,
            "steps": [
                {
                    "command": [
                        "intros [sx|sx|sx [plx Hplx]|sx mx ex Hx] H ; try easy.",
                        "VernacExtend",
                        "b3169156bb8b6c4537593f2ef746d4df630a3fb1"
                    ]
                },
                {
                    "command": [
                        "simpl.",
                        "VernacExtend",
                        "1b93169f4cf876d207c1fab22a2347202ab48d85"
                    ]
                },
                {
                    "command": [
                        "apply f_equal, f_equal, eqbool_irrelevance.",
                        "VernacExtend",
                        "5e8d2f3a7d8081a2d33f32876ea37cc9eae1bfa4"
                    ]
                },
                {
                    "command": [
                        "apply f_equal, eqbool_irrelevance.",
                        "VernacExtend",
                        "88712e4a7cc34c494518cf3dc8b4bd8ab0a9b3e5"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "FF2B_B2FF_valid",
            "line_nb": 45,
            "steps": [
                {
                    "command": [
                        "intros x.",
                        "VernacExtend",
                        "596d66edc70dae19981ed74f103fc0a865aec92c"
                    ]
                },
                {
                    "command": [
                        "apply FF2B_B2FF.",
                        "VernacExtend",
                        "1b4345cfcbf8760f3b1f0793df0c8ee0b6ba21d7"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "B2R_FF2B",
            "line_nb": 49,
            "steps": [
                {
                    "command": [
                        "now intros [sx|sx|sx plx|sx mx ex] Hx.",
                        "VernacExtend",
                        "067d014100d8de768af185d9e0e3bd79205945aa"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "match_FF2B",
            "line_nb": 52,
            "steps": [
                {
                    "command": [
                        "now intros T fz fi fn ff [sx|sx|sx plx|sx mx ex] Hx.",
                        "VernacExtend",
                        "c62853f71ed70d14bdfdc2023a7e74ceb196ad51"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "canonic_canonic_mantissa",
            "line_nb": 55,
            "steps": [
                {
                    "command": [
                        "intros sx mx ex H.",
                        "VernacExtend",
                        "0f9f87ed027d9c56f70d06336b035a27e7db906c"
                    ]
                },
                {
                    "command": [
                        "assert (Hx := Zeq_bool_eq _ _ H).",
                        "VernacExtend",
                        "ae8e86842101c041c5f57a93dba42aafddae2e76"
                    ]
                },
                {
                    "command": [
                        "clear H.",
                        "VernacExtend",
                        "f2c5826643b985ca1b67f3433f38ccbe2735e582"
                    ]
                },
                {
                    "command": [
                        "apply sym_eq.",
                        "VernacExtend",
                        "f01eb728d9ceeac2915c66b52a7b50a0c452e949"
                    ]
                },
                {
                    "command": [
                        "simpl.",
                        "VernacExtend",
                        "1b93169f4cf876d207c1fab22a2347202ab48d85"
                    ]
                },
                {
                    "command": [
                        "pattern ex at 2 ; rewrite <- Hx.",
                        "VernacExtend",
                        "ef21d450729099c4e825be0935ed37adae907754"
                    ]
                },
                {
                    "command": [
                        "apply (f_equal fexp).",
                        "VernacExtend",
                        "f40028f9502b41bafc803163c189f61ef324b731"
                    ]
                },
                {
                    "command": [
                        "rewrite ln_beta_F2R_Zdigits.",
                        "VernacExtend",
                        "0e6182cc64c2ad4bc57501af40a53f1a50e13f85"
                    ]
                },
                {
                    "command": [
                        "rewrite <- Zdigits_abs.",
                        "VernacExtend",
                        "fa7b4b2455476e9da32abeb4a2399aeaa1bf74b9"
                    ]
                },
                {
                    "command": [
                        "rewrite Zpos_digits2_pos.",
                        "VernacExtend",
                        "2b538c3fe7142af5b05ea277f48ca7eaf108af74"
                    ]
                },
                {
                    "command": [
                        "now case sx.",
                        "VernacExtend",
                        "82d311e3e5eb1345ffa9abe0d08918457fb81beb"
                    ]
                },
                {
                    "command": [
                        "now case sx.",
                        "VernacExtend",
                        "82d311e3e5eb1345ffa9abe0d08918457fb81beb"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "generic_format_B2R",
            "line_nb": 69,
            "steps": [
                {
                    "command": [
                        "intros [sx|sx|sx plx|sx mx ex Hx] ; try apply generic_format_0.",
                        "VernacExtend",
                        "b22ec08727ce2ecc45831d9703af74f12117e933"
                    ]
                },
                {
                    "command": [
                        "simpl.",
                        "VernacExtend",
                        "1b93169f4cf876d207c1fab22a2347202ab48d85"
                    ]
                },
                {
                    "command": [
                        "apply generic_format_canonic.",
                        "VernacExtend",
                        "80d076e0f344075d8eaaa3549bbe62413bee3ba2"
                    ]
                },
                {
                    "command": [
                        "apply canonic_canonic_mantissa.",
                        "VernacExtend",
                        "e71d83b1961bdc9255faa69fbb1351759cae44c7"
                    ]
                },
                {
                    "command": [
                        "now destruct (andb_prop _ _ Hx) as (H, _).",
                        "VernacExtend",
                        "78b0fd0fe153e53ccf88b8800a8f65093513d499"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "B2FF_inj",
            "line_nb": 82,
            "steps": [
                {
                    "command": [
                        "intros [sx|sx|sx [plx Hplx]|sx mx ex Hx] [sy|sy|sy [ply Hply]|sy my ey Hy] ; try easy.",
                        "VernacExtend",
                        "6e34256eadeff779568c1c12700d8fb09c8051d1"
                    ]
                },
                {
                    "command": [
                        "intros H.",
                        "VernacExtend",
                        "5cfae87a34fa7b59a257c9640f1b674f6e6d780b"
                    ]
                },
                {
                    "command": [
                        "now inversion H.",
                        "VernacExtend",
                        "d72febf07866235ab850e0be52d03df112cb9e8c"
                    ]
                },
                {
                    "command": [
                        "intros H.",
                        "VernacExtend",
                        "5cfae87a34fa7b59a257c9640f1b674f6e6d780b"
                    ]
                },
                {
                    "command": [
                        "now inversion H.",
                        "VernacExtend",
                        "d72febf07866235ab850e0be52d03df112cb9e8c"
                    ]
                },
                {
                    "command": [
                        "intros H.",
                        "VernacExtend",
                        "5cfae87a34fa7b59a257c9640f1b674f6e6d780b"
                    ]
                },
                {
                    "command": [
                        "inversion H.",
                        "VernacExtend",
                        "ee20838bdd77512b43142d655a3924bf07bffebb"
                    ]
                },
                {
                    "command": [
                        "clear H.",
                        "VernacExtend",
                        "f2c5826643b985ca1b67f3433f38ccbe2735e582"
                    ]
                },
                {
                    "command": [
                        "revert Hplx.",
                        "VernacExtend",
                        "0f11f419b23a5db93b9f158a018397998a5a615e"
                    ]
                },
                {
                    "command": [
                        "rewrite H2.",
                        "VernacExtend",
                        "c34b98a4ea7c987830199fe378bb7a145a0d652e"
                    ]
                },
                {
                    "command": [
                        "intros Hx.",
                        "VernacExtend",
                        "9276b72df3a882c9b4b954c90d9e870c80a906fc"
                    ]
                },
                {
                    "command": [
                        "apply f_equal, f_equal, eqbool_irrelevance.",
                        "VernacExtend",
                        "5e8d2f3a7d8081a2d33f32876ea37cc9eae1bfa4"
                    ]
                },
                {
                    "command": [
                        "intros H.",
                        "VernacExtend",
                        "5cfae87a34fa7b59a257c9640f1b674f6e6d780b"
                    ]
                },
                {
                    "command": [
                        "inversion H.",
                        "VernacExtend",
                        "ee20838bdd77512b43142d655a3924bf07bffebb"
                    ]
                },
                {
                    "command": [
                        "clear H.",
                        "VernacExtend",
                        "f2c5826643b985ca1b67f3433f38ccbe2735e582"
                    ]
                },
                {
                    "command": [
                        "revert Hx.",
                        "VernacExtend",
                        "6f33b03350f7d5550754ef79fc319be630ae9ecd"
                    ]
                },
                {
                    "command": [
                        "rewrite H2, H3.",
                        "VernacExtend",
                        "bd045133fa028ed96950f3be8d169110b98b6951"
                    ]
                },
                {
                    "command": [
                        "intros Hx.",
                        "VernacExtend",
                        "9276b72df3a882c9b4b954c90d9e870c80a906fc"
                    ]
                },
                {
                    "command": [
                        "apply f_equal, eqbool_irrelevance.",
                        "VernacExtend",
                        "88712e4a7cc34c494518cf3dc8b4bd8ab0a9b3e5"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "B2R_inj",
            "line_nb": 104,
            "steps": [
                {
                    "command": [
                        "intros [sx|sx| |sx mx ex Hx] [sy|sy| |sy my ey Hy] ; try easy.",
                        "VernacExtend",
                        "660c09bab558cffa8ed8bf929d949d4d354ddfc8"
                    ]
                },
                {
                    "command": [
                        "simpl.",
                        "VernacExtend",
                        "1b93169f4cf876d207c1fab22a2347202ab48d85"
                    ]
                },
                {
                    "command": [
                        "intros _ _ Heq.",
                        "VernacExtend",
                        "006714e58fbd439b4215cc55c200f575e0b31271"
                    ]
                },
                {
                    "command": [
                        "assert (Hs: sx = sy).",
                        "VernacExtend",
                        "9661d9d5cc44f7f6611f78620bee282060c01ab5"
                    ]
                },
                {
                    "command": [
                        "revert Heq.",
                        "VernacExtend",
                        "3b56967d502b742a4c3cd7b369c434dc21fed539"
                    ]
                },
                {
                    "command": [
                        "clear.",
                        "VernacExtend",
                        "086ee0db0bdefcfa1ec15bb5cd44d451de64c569"
                    ]
                },
                {
                    "command": [
                        "case sx ; case sy ; try easy ; intros Heq ; apply False_ind ; revert Heq.",
                        "VernacExtend",
                        "4ebe3791c7606ddcfd2ea542b2fbd899e369aab5"
                    ]
                },
                {
                    "command": [
                        "apply Rlt_not_eq.",
                        "VernacExtend",
                        "4d888fdf05ab3816c2e650b03b478096db638cf5"
                    ]
                },
                {
                    "command": [
                        "apply Rlt_trans with R0.",
                        "VernacExtend",
                        "b3368a8c294b6b2354245a3ffce628f4ce865443"
                    ]
                },
                {
                    "command": [
                        "now apply F2R_lt_0_compat.",
                        "VernacExtend",
                        "49795aa14bce980bd770acc759456462f1e2dbb2"
                    ]
                },
                {
                    "command": [
                        "now apply F2R_gt_0_compat.",
                        "VernacExtend",
                        "2b5a1cb2582ac2d074766e6b65adcf42b088a406"
                    ]
                },
                {
                    "command": [
                        "apply Rgt_not_eq.",
                        "VernacExtend",
                        "8860a9193cfdaf1f0316f8df1f2c0781738e5ef7"
                    ]
                },
                {
                    "command": [
                        "apply Rgt_trans with R0.",
                        "VernacExtend",
                        "010c0753f95e189ac2720704a3af2cce3efc7091"
                    ]
                },
                {
                    "command": [
                        "now apply F2R_gt_0_compat.",
                        "VernacExtend",
                        "2b5a1cb2582ac2d074766e6b65adcf42b088a406"
                    ]
                },
                {
                    "command": [
                        "now apply F2R_lt_0_compat.",
                        "VernacExtend",
                        "49795aa14bce980bd770acc759456462f1e2dbb2"
                    ]
                },
                {
                    "command": [
                        "assert (mx = my /\\ ex = ey).",
                        "VernacExtend",
                        "b2ff1d445c5abe2517647ae169a77cacb7952cc4"
                    ]
                },
                {
                    "command": [
                        "refine (_ (canonic_unicity _ fexp _ _ _ _ Heq)).",
                        "VernacExtend",
                        "c20dcbf1087ed40db843044ae8161817d69482f9"
                    ]
                },
                {
                    "command": [
                        "rewrite Hs.",
                        "VernacExtend",
                        "ddea6993e3e1146e762703b9c4c45fb5767a9a44"
                    ]
                },
                {
                    "command": [
                        "now case sy ; intro H ; injection H ; split.",
                        "VernacExtend",
                        "9c67324310357a2db892415482b48fb6af6aa91f"
                    ]
                },
                {
                    "command": [
                        "apply canonic_canonic_mantissa.",
                        "VernacExtend",
                        "e71d83b1961bdc9255faa69fbb1351759cae44c7"
                    ]
                },
                {
                    "command": [
                        "exact (proj1 (andb_prop _ _ Hx)).",
                        "VernacExtend",
                        "60c71648b23b6e101277e97671ca911d4d36c877"
                    ]
                },
                {
                    "command": [
                        "apply canonic_canonic_mantissa.",
                        "VernacExtend",
                        "e71d83b1961bdc9255faa69fbb1351759cae44c7"
                    ]
                },
                {
                    "command": [
                        "exact (proj1 (andb_prop _ _ Hy)).",
                        "VernacExtend",
                        "7d5b26dc073aeaaf71cc6a16b65a985eda69619f"
                    ]
                },
                {
                    "command": [
                        "revert Hx.",
                        "VernacExtend",
                        "6f33b03350f7d5550754ef79fc319be630ae9ecd"
                    ]
                },
                {
                    "command": [
                        "rewrite Hs, (proj1 H), (proj2 H).",
                        "VernacExtend",
                        "ff39e7587b6cee0e008ef75e05abfe2410744b8b"
                    ]
                },
                {
                    "command": [
                        "intros Hx.",
                        "VernacExtend",
                        "9276b72df3a882c9b4b954c90d9e870c80a906fc"
                    ]
                },
                {
                    "command": [
                        "apply f_equal.",
                        "VernacExtend",
                        "ba856cbef3c8e84dcef77c91c8515b497874875b"
                    ]
                },
                {
                    "command": [
                        "apply eqbool_irrelevance.",
                        "VernacExtend",
                        "6f790ea987c8c669e4c029faf51343c78c120fa3"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "Bsign_FF2B",
            "line_nb": 136,
            "steps": [
                {
                    "command": [
                        "now intros [sx|sx|sx plx|sx mx ex] H.",
                        "VernacExtend",
                        "bf60868319f7dc99b06f50fd344d1be9f818ff4e"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "is_finite_FF2B",
            "line_nb": 141,
            "steps": [
                {
                    "command": [
                        "now intros [| | |].",
                        "VernacExtend",
                        "71bcb017101d628725b152755a699746dbe7eb6d"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "is_finite_FF_B2FF",
            "line_nb": 144,
            "steps": [
                {
                    "command": [
                        "now intros [| |? []|].",
                        "VernacExtend",
                        "9e033368a6f922e7d5b3e7d01045ae4db8704996"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "B2R_Bsign_inj",
            "line_nb": 147,
            "steps": [
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "destruct x, y; try (apply B2R_inj; now eauto).",
                        "VernacExtend",
                        "523dd48f280a73e5b72d8c473774a4de05c75eb0"
                    ]
                },
                {
                    "command": [
                        "-",
                        "VernacBullet",
                        "581cab4bf49fa4b495e569bbda96fc8d28fddcc0"
                    ]
                },
                {
                    "command": [
                        "simpl in H2.",
                        "VernacExtend",
                        "b1e247c43b6623097ab13813b4de664287dd4249"
                    ]
                },
                {
                    "command": [
                        "congruence.",
                        "VernacExtend",
                        "d8c818f6cffeaee6a722a71acc77f2d6e5199eb9"
                    ]
                },
                {
                    "command": [
                        "-",
                        "VernacBullet",
                        "581cab4bf49fa4b495e569bbda96fc8d28fddcc0"
                    ]
                },
                {
                    "command": [
                        "symmetry in H1.",
                        "VernacExtend",
                        "f7b1eec3579cf9c7bc576c77a03265fe014ab9a1"
                    ]
                },
                {
                    "command": [
                        "apply Rmult_integral in H1.",
                        "VernacExtend",
                        "d8e4ce3738e93bb163f4a1211254b22c7ebcd1e0"
                    ]
                },
                {
                    "command": [
                        "destruct H1.",
                        "VernacExtend",
                        "e752c2122f55c888e09082f784a6da990b01fbe7"
                    ]
                },
                {
                    "command": [
                        "apply (eq_Z2R _ 0) in H1.",
                        "VernacExtend",
                        "ea62932cfa630b7d6100516dcc5dd0b1fb92ef07"
                    ]
                },
                {
                    "command": [
                        "destruct b0; discriminate H1.",
                        "VernacExtend",
                        "e0e53dd177b760ae7feb056a225ec9c0eeaf080a"
                    ]
                },
                {
                    "command": [
                        "simpl in H1.",
                        "VernacExtend",
                        "8e8db7ad05fc7a69fb83eaedd7fb1e86ee74784d"
                    ]
                },
                {
                    "command": [
                        "pose proof (bpow_gt_0 radix2 e).",
                        "VernacExtend",
                        "939206e0da1c6bacd5181b4e8496ecec4d3437af"
                    ]
                },
                {
                    "command": [
                        "rewrite H1 in H3.",
                        "VernacExtend",
                        "1a5bd25c47245138a7a03e032524fd4066f525ce"
                    ]
                },
                {
                    "command": [
                        "apply Rlt_irrefl in H3.",
                        "VernacExtend",
                        "9f69316837f9565eb674fc91608dc65cef4a1ec9"
                    ]
                },
                {
                    "command": [
                        "destruct H3.",
                        "VernacExtend",
                        "1c0230aafd4a4c88f93d392a681d452fd6dea35e"
                    ]
                },
                {
                    "command": [
                        "-",
                        "VernacBullet",
                        "581cab4bf49fa4b495e569bbda96fc8d28fddcc0"
                    ]
                },
                {
                    "command": [
                        "apply Rmult_integral in H1.",
                        "VernacExtend",
                        "d8e4ce3738e93bb163f4a1211254b22c7ebcd1e0"
                    ]
                },
                {
                    "command": [
                        "destruct H1.",
                        "VernacExtend",
                        "e752c2122f55c888e09082f784a6da990b01fbe7"
                    ]
                },
                {
                    "command": [
                        "apply (eq_Z2R _ 0) in H1.",
                        "VernacExtend",
                        "ea62932cfa630b7d6100516dcc5dd0b1fb92ef07"
                    ]
                },
                {
                    "command": [
                        "destruct b; discriminate H1.",
                        "VernacExtend",
                        "63fd1f97c89e67e34374604c417ef8ec1dde22e8"
                    ]
                },
                {
                    "command": [
                        "simpl in H1.",
                        "VernacExtend",
                        "8e8db7ad05fc7a69fb83eaedd7fb1e86ee74784d"
                    ]
                },
                {
                    "command": [
                        "pose proof (bpow_gt_0 radix2 e).",
                        "VernacExtend",
                        "939206e0da1c6bacd5181b4e8496ecec4d3437af"
                    ]
                },
                {
                    "command": [
                        "rewrite H1 in H3.",
                        "VernacExtend",
                        "1a5bd25c47245138a7a03e032524fd4066f525ce"
                    ]
                },
                {
                    "command": [
                        "apply Rlt_irrefl in H3.",
                        "VernacExtend",
                        "9f69316837f9565eb674fc91608dc65cef4a1ec9"
                    ]
                },
                {
                    "command": [
                        "destruct H3.",
                        "VernacExtend",
                        "1c0230aafd4a4c88f93d392a681d452fd6dea35e"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "is_nan_FF2B",
            "line_nb": 177,
            "steps": [
                {
                    "command": [
                        "now intros [| | |].",
                        "VernacExtend",
                        "71bcb017101d628725b152755a699746dbe7eb6d"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "is_nan_FF_B2FF",
            "line_nb": 180,
            "steps": [
                {
                    "command": [
                        "now intros [| |? []|].",
                        "VernacExtend",
                        "9e033368a6f922e7d5b3e7d01045ae4db8704996"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "Bopp_involutive",
            "line_nb": 184,
            "steps": [
                {
                    "command": [
                        "now intros opp_nan [sx|sx|sx plx|sx mx ex Hx] ; simpl ; try rewrite Bool.negb_involutive.",
                        "VernacExtend",
                        "7fd9535a18f4046eb3ccd047d90fa09d99836ac5"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "B2R_Bopp",
            "line_nb": 187,
            "steps": [
                {
                    "command": [
                        "intros opp_nan [sx|sx|sx plx|sx mx ex Hx]; apply sym_eq ; try apply Ropp_0.",
                        "VernacExtend",
                        "37f03349fe325f08c20fa93bec8e8a3c01d7740d"
                    ]
                },
                {
                    "command": [
                        "simpl.",
                        "VernacExtend",
                        "1b93169f4cf876d207c1fab22a2347202ab48d85"
                    ]
                },
                {
                    "command": [
                        "destruct opp_nan.",
                        "VernacExtend",
                        "fba3f7a1bf744fa377bac136dc8f9f61b551b8ea"
                    ]
                },
                {
                    "command": [
                        "apply Ropp_0.",
                        "VernacExtend",
                        "47cff39407a1cebe5fba9237cee9d56885ff4336"
                    ]
                },
                {
                    "command": [
                        "simpl.",
                        "VernacExtend",
                        "1b93169f4cf876d207c1fab22a2347202ab48d85"
                    ]
                },
                {
                    "command": [
                        "rewrite <- F2R_opp.",
                        "VernacExtend",
                        "c79f36956df0a657acacbc3517318f048ab6de55"
                    ]
                },
                {
                    "command": [
                        "now case sx.",
                        "VernacExtend",
                        "82d311e3e5eb1345ffa9abe0d08918457fb81beb"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "is_finite_Bopp",
            "line_nb": 196,
            "steps": [
                {
                    "command": [
                        "intros opp_nan [| |s pl|] ; try easy.",
                        "VernacExtend",
                        "2cae4059944cc71bb9add4e0dbd537ddabb6ff90"
                    ]
                },
                {
                    "command": [
                        "simpl.",
                        "VernacExtend",
                        "1b93169f4cf876d207c1fab22a2347202ab48d85"
                    ]
                },
                {
                    "command": [
                        "now case opp_nan.",
                        "VernacExtend",
                        "274f20ca039be2d277115488995691e0ecb81e8e"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "B2R_Babs",
            "line_nb": 202,
            "steps": [
                {
                    "command": [
                        "intros abs_nan [sx|sx|sx plx|sx mx ex Hx]; apply sym_eq ; try apply Rabs_R0.",
                        "VernacExtend",
                        "747c127298baf2a17c4e31c29ba6589ddef171f5"
                    ]
                },
                {
                    "command": [
                        "simpl.",
                        "VernacExtend",
                        "1b93169f4cf876d207c1fab22a2347202ab48d85"
                    ]
                },
                {
                    "command": [
                        "destruct abs_nan.",
                        "VernacExtend",
                        "577f64975c88c25538befc89d6af45128491cb72"
                    ]
                },
                {
                    "command": [
                        "simpl.",
                        "VernacExtend",
                        "1b93169f4cf876d207c1fab22a2347202ab48d85"
                    ]
                },
                {
                    "command": [
                        "apply Rabs_R0.",
                        "VernacExtend",
                        "6609b4ab82fe57e983c51e226262c9d533442a79"
                    ]
                },
                {
                    "command": [
                        "simpl.",
                        "VernacExtend",
                        "1b93169f4cf876d207c1fab22a2347202ab48d85"
                    ]
                },
                {
                    "command": [
                        "rewrite <- F2R_abs.",
                        "VernacExtend",
                        "f45286a0077c940636f0e44760db3e0ff2184dd3"
                    ]
                },
                {
                    "command": [
                        "now destruct sx.",
                        "VernacExtend",
                        "d3f05ba117037a2da8bbc686cb11dbdf34aa0a0f"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "is_finite_Babs",
            "line_nb": 212,
            "steps": [
                {
                    "command": [
                        "intros abs_nan [| |s pl|] ; try easy.",
                        "VernacExtend",
                        "677248c2cf5d17a6583e9a1b361ce3b866353bc3"
                    ]
                },
                {
                    "command": [
                        "simpl.",
                        "VernacExtend",
                        "1b93169f4cf876d207c1fab22a2347202ab48d85"
                    ]
                },
                {
                    "command": [
                        "now case abs_nan.",
                        "VernacExtend",
                        "ec581d28709c26221ad35cae60c7145458779543"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "Bsign_Babs",
            "line_nb": 217,
            "steps": [
                {
                    "command": [
                        "now intros abs_nan [| | |].",
                        "VernacExtend",
                        "42c5c4c2e4388996b63fe6fddda87f303b8d0814"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "Babs_idempotent",
            "line_nb": 220,
            "steps": [
                {
                    "command": [
                        "now intros abs_nan [sx|sx|sx plx|sx mx ex Hx].",
                        "VernacExtend",
                        "a1d56f3324a7a9d45175a78a99cba3a6adf33677"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "Babs_Bopp",
            "line_nb": 223,
            "steps": [
                {
                    "command": [
                        "now intros abs_nan opp_nan [| | |].",
                        "VernacExtend",
                        "8ea0c91f8e5d5d12141781a398eeb8365ff5f4e7"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "Bcompare_correct",
            "line_nb": 227,
            "steps": [
                {
                    "command": [
                        "Ltac apply_Rcompare := match goal with | [ |- Some Lt = Some (Rcompare _ _) ] => f_equal; symmetry; apply Rcompare_Lt | [ |- Some Eq = Some (Rcompare _ _) ] => f_equal; symmetry; apply Rcompare_Eq | [ |- Some Gt = Some (Rcompare _ _) ] => f_equal; symmetry; apply Rcompare_Gt end.",
                        "VernacExtend",
                        "1af8f71472ac8cf9162f35804df4457719c20a67"
                    ]
                },
                {
                    "command": [
                        "unfold Bcompare; intros.",
                        "VernacExtend",
                        "aa013d78c10700b726c787d81a848cfab33406ce"
                    ]
                },
                {
                    "command": [
                        "destruct f1, f2 ; try easy.",
                        "VernacExtend",
                        "bcaf2667926e42814abe02b99abff999c0f101ef"
                    ]
                },
                {
                    "command": [
                        "now rewrite Rcompare_Eq.",
                        "VernacExtend",
                        "748b4211c14883f452b0a50c01d3a09ed3c14aaf"
                    ]
                },
                {
                    "command": [
                        "destruct b0 ; apply_Rcompare.",
                        "VernacExtend",
                        "bf1d77d7bfd11fc95707618ccf95e734f0980471"
                    ]
                },
                {
                    "command": [
                        "now apply F2R_lt_0_compat.",
                        "VernacExtend",
                        "49795aa14bce980bd770acc759456462f1e2dbb2"
                    ]
                },
                {
                    "command": [
                        "now apply F2R_gt_0_compat.",
                        "VernacExtend",
                        "2b5a1cb2582ac2d074766e6b65adcf42b088a406"
                    ]
                },
                {
                    "command": [
                        "destruct b ; apply_Rcompare.",
                        "VernacExtend",
                        "3f7a638999602ddea1917532af831b5e2bd52830"
                    ]
                },
                {
                    "command": [
                        "now apply F2R_lt_0_compat.",
                        "VernacExtend",
                        "49795aa14bce980bd770acc759456462f1e2dbb2"
                    ]
                },
                {
                    "command": [
                        "now apply F2R_gt_0_compat.",
                        "VernacExtend",
                        "2b5a1cb2582ac2d074766e6b65adcf42b088a406"
                    ]
                },
                {
                    "command": [
                        "simpl.",
                        "VernacExtend",
                        "1b93169f4cf876d207c1fab22a2347202ab48d85"
                    ]
                },
                {
                    "command": [
                        "clear H H0.",
                        "VernacExtend",
                        "a743351ff441835fe992d483bf3a5b58c3fccd77"
                    ]
                },
                {
                    "command": [
                        "apply andb_prop in e0; destruct e0; apply (canonic_canonic_mantissa false) in H.",
                        "VernacExtend",
                        "bf645ba542f7f9dc398a566f1160509542947c72"
                    ]
                },
                {
                    "command": [
                        "apply andb_prop in e2; destruct e2; apply (canonic_canonic_mantissa false) in H1.",
                        "VernacExtend",
                        "9b7754df75ea7ec5dd7dc68d4a940a3dbe4002bc"
                    ]
                },
                {
                    "command": [
                        "pose proof (Zcompare_spec e e1); unfold canonic, Fexp in H1, H.",
                        "VernacExtend",
                        "6cbf3aec45ee39ba364ed33e3b7af17537c4fec5"
                    ]
                },
                {
                    "command": [
                        "assert (forall m1 m2 e1 e2, let x := (Z2R (Zpos m1) * bpow radix2 e1)%R in let y := (Z2R (Zpos m2) * bpow radix2 e2)%R in (canonic_exp radix2 fexp x < canonic_exp radix2 fexp y)%Z -> (x < y)%R).",
                        "VernacExtend",
                        "2f8f18086a07452b46f9c6f04f74148c4d23e2d2"
                    ]
                },
                {
                    "command": [
                        "{",
                        "VernacSubproof",
                        "184cabd02aa0a33f23f10474ea95789b1f149361"
                    ]
                },
                {
                    "command": [
                        "intros; apply Rnot_le_lt; intro; apply (ln_beta_le radix2) in H5.",
                        "VernacExtend",
                        "295d205546aa501b9d139d9a7537676ed45c5f0f"
                    ]
                },
                {
                    "command": [
                        "apply Zlt_not_le with (1 := H4).",
                        "VernacExtend",
                        "6e7d744689c64e291d63cddd669d315ea1ea306a"
                    ]
                },
                {
                    "command": [
                        "now apply fexp_monotone.",
                        "VernacExtend",
                        "68ac7464cdd67cc087827a8646fe96bd43105304"
                    ]
                },
                {
                    "command": [
                        "now apply (F2R_gt_0_compat _ (Float radix2 (Zpos m2) e2)).",
                        "VernacExtend",
                        "87aba0845f8fd6a40a5566a65fcbf5dd94d31cc1"
                    ]
                },
                {
                    "command": [
                        "}",
                        "VernacEndSubproof",
                        "85f27874ef16421341373f4b062b6d1605043af9"
                    ]
                },
                {
                    "command": [
                        "assert (forall m1 m2 e1 e2, (Z2R (- Zpos m1) * bpow radix2 e1 < Z2R (Zpos m2) * bpow radix2 e2)%R).",
                        "VernacExtend",
                        "d1559190b77379f0ef021df5281c0f591aad57d7"
                    ]
                },
                {
                    "command": [
                        "{",
                        "VernacSubproof",
                        "184cabd02aa0a33f23f10474ea95789b1f149361"
                    ]
                },
                {
                    "command": [
                        "intros; apply (Rlt_trans _ 0%R).",
                        "VernacExtend",
                        "b381b8e40bfa4302df3b475a61216746ac347b3e"
                    ]
                },
                {
                    "command": [
                        "now apply (F2R_lt_0_compat _ (Float radix2 (Zneg m1) e0)).",
                        "VernacExtend",
                        "d3c3775c93bab433b97e6360991dbda58137ac44"
                    ]
                },
                {
                    "command": [
                        "now apply (F2R_gt_0_compat _ (Float radix2 (Zpos m2) e2)).",
                        "VernacExtend",
                        "87aba0845f8fd6a40a5566a65fcbf5dd94d31cc1"
                    ]
                },
                {
                    "command": [
                        "}",
                        "VernacEndSubproof",
                        "85f27874ef16421341373f4b062b6d1605043af9"
                    ]
                },
                {
                    "command": [
                        "unfold F2R, Fnum, Fexp.",
                        "VernacExtend",
                        "3040f6de59c589c20916bdba7847334efbee7c3f"
                    ]
                },
                {
                    "command": [
                        "destruct b, b0; try (now apply_Rcompare; apply H5); inversion H3; try (apply_Rcompare; apply H4; rewrite H, H1 in H7; assumption); try (apply_Rcompare; do 2 rewrite Z2R_opp, Ropp_mult_distr_l_reverse; apply Ropp_lt_contravar; apply H4; rewrite H, H1 in H7; assumption); rewrite H7, Rcompare_mult_r, Rcompare_Z2R by (apply bpow_gt_0); reflexivity.",
                        "VernacExtend",
                        "b764a1b94598460327e570685166d675ee1b7914"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "Bcompare_swap",
            "line_nb": 259,
            "steps": [
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "destruct x as [ ? | [] | ? ? | [] mx ex Bx ]; destruct y as [ ? | [] | ? ? | [] my ey By ]; simpl; try easy.",
                        "VernacExtend",
                        "1d746a5edd8f0bb5cd3d2afafdf51b8be506c165"
                    ]
                },
                {
                    "command": [
                        "-",
                        "VernacBullet",
                        "581cab4bf49fa4b495e569bbda96fc8d28fddcc0"
                    ]
                },
                {
                    "command": [
                        "rewrite <- (Zcompare_antisym ex ey).",
                        "VernacExtend",
                        "36fde77c17e1b14c20741a2515568987fe1dbd4f"
                    ]
                },
                {
                    "command": [
                        "destruct (ex ?= ey)%Z; try easy.",
                        "VernacExtend",
                        "ff135b372adac0267f751e02671d6790ebaba366"
                    ]
                },
                {
                    "command": [
                        "now rewrite (Pcompare_antisym mx my).",
                        "VernacExtend",
                        "afe1ddcc31fc773e849dcdd56d663b9c44624b08"
                    ]
                },
                {
                    "command": [
                        "-",
                        "VernacBullet",
                        "581cab4bf49fa4b495e569bbda96fc8d28fddcc0"
                    ]
                },
                {
                    "command": [
                        "rewrite <- (Zcompare_antisym ex ey).",
                        "VernacExtend",
                        "36fde77c17e1b14c20741a2515568987fe1dbd4f"
                    ]
                },
                {
                    "command": [
                        "destruct (ex ?= ey)%Z; try easy.",
                        "VernacExtend",
                        "ff135b372adac0267f751e02671d6790ebaba366"
                    ]
                },
                {
                    "command": [
                        "now rewrite Pcompare_antisym.",
                        "VernacExtend",
                        "bf1d6f0da66508759a92eae28cd1188962b4ad11"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "abs_B2R_lt_emax",
            "line_nb": 301,
            "steps": [
                {
                    "command": [
                        "intros [sx|sx|sx plx|sx mx ex Hx] ; simpl ; try ( rewrite Rabs_R0 ; apply bpow_gt_0 ).",
                        "VernacExtend",
                        "8737e3a12212191fd456c468680f0d4e36d8b834"
                    ]
                },
                {
                    "command": [
                        "rewrite <- F2R_Zabs, abs_cond_Zopp.",
                        "VernacExtend",
                        "b94ba1d500b331c8ad439fb5282f1460bc7b1e90"
                    ]
                },
                {
                    "command": [
                        "now apply bounded_lt_emax.",
                        "VernacExtend",
                        "a84b4b45c2d6d4db987de330c7a7cc300348fb3f"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "shr_m_shr_record_of_loc",
            "line_nb": 342,
            "steps": [
                {
                    "command": [
                        "now intros m [|[| |]].",
                        "VernacExtend",
                        "dbbf0d9aca6952be85088e26845fc3bd8a6ab4ea"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "loc_of_shr_record_of_loc",
            "line_nb": 345,
            "steps": [
                {
                    "command": [
                        "now intros m [|[| |]].",
                        "VernacExtend",
                        "dbbf0d9aca6952be85088e26845fc3bd8a6ab4ea"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "shr_truncate",
            "line_nb": 409,
            "steps": [
                {
                    "command": [
                        "intros m e l Hm.",
                        "VernacExtend",
                        "e882fd3fcce1a140df7e1dc74c7d1d56b0479bb5"
                    ]
                },
                {
                    "command": [
                        "case_eq (truncate radix2 fexp (m, e, l)).",
                        "VernacExtend",
                        "bce3a1bb48eff32a9d0396ceb215efd1aacd767c"
                    ]
                },
                {
                    "command": [
                        "intros (m', e') l'.",
                        "VernacExtend",
                        "e410a847a4384ca040d09891e763439e7c684153"
                    ]
                },
                {
                    "command": [
                        "unfold shr_fexp.",
                        "VernacExtend",
                        "7d0457256a4df52b2c199b6e618ee769c3ab0c76"
                    ]
                },
                {
                    "command": [
                        "rewrite Zdigits2_Zdigits.",
                        "VernacExtend",
                        "cdc5ff4ecf5733c57943c25d2f2779d738cd80c0"
                    ]
                },
                {
                    "command": [
                        "case_eq (fexp (Zdigits radix2 m + e) - e)%Z.",
                        "VernacExtend",
                        "1ac70e857bba8d60da7e13cc48f2c3c7696d4622"
                    ]
                },
                {
                    "command": [
                        "intros He.",
                        "VernacExtend",
                        "dfbedaae88fb1ac0f1e0aadf409bd4a7b0ced9da"
                    ]
                },
                {
                    "command": [
                        "unfold truncate.",
                        "VernacExtend",
                        "e239555bc9fc631f0b28093ba90c3ba6a6565581"
                    ]
                },
                {
                    "command": [
                        "rewrite He.",
                        "VernacExtend",
                        "e06e93d8f27f68152d89e54323f4b64df15bc106"
                    ]
                },
                {
                    "command": [
                        "simpl.",
                        "VernacExtend",
                        "1b93169f4cf876d207c1fab22a2347202ab48d85"
                    ]
                },
                {
                    "command": [
                        "intros H.",
                        "VernacExtend",
                        "5cfae87a34fa7b59a257c9640f1b674f6e6d780b"
                    ]
                },
                {
                    "command": [
                        "now inversion H.",
                        "VernacExtend",
                        "d72febf07866235ab850e0be52d03df112cb9e8c"
                    ]
                },
                {
                    "command": [
                        "intros p Hp.",
                        "VernacExtend",
                        "cf737bd4e185c03175335af1ca6ae52da34cba56"
                    ]
                },
                {
                    "command": [
                        "assert (He: (e <= fexp (Zdigits radix2 m + e))%Z).",
                        "VernacExtend",
                        "90bfe20fe3756c441c7ba728335e61d3fcb806f7"
                    ]
                },
                {
                    "command": [
                        "clear -Hp ; zify ; omega.",
                        "VernacExtend",
                        "b7806091fe32287d569ccbcb00ff4c7f0b3b5c5c"
                    ]
                },
                {
                    "command": [
                        "destruct (inbetween_float_ex radix2 m e l) as (x, Hx).",
                        "VernacExtend",
                        "060724ab2a2a0988ea32394fea906128308b346c"
                    ]
                },
                {
                    "command": [
                        "generalize (inbetween_shr x m e l (fexp (Zdigits radix2 m + e) - e) Hm Hx).",
                        "VernacExtend",
                        "c48d5aea372c9fcb26a7cfb6092bf98ba8b9b234"
                    ]
                },
                {
                    "command": [
                        "assert (Hx0 : (0 <= x)%R).",
                        "VernacExtend",
                        "e28033a2ea4ad580bad518aeecd64f43c23641d6"
                    ]
                },
                {
                    "command": [
                        "apply Rle_trans with (F2R (Float radix2 m e)).",
                        "VernacExtend",
                        "20ff6ff9ae58d03b77b325848d87b1c43f76ce09"
                    ]
                },
                {
                    "command": [
                        "now apply F2R_ge_0_compat.",
                        "VernacExtend",
                        "dee4b37db2af7e0397e3ec7ceb7cf7ff288ba7be"
                    ]
                },
                {
                    "command": [
                        "exact (proj1 (inbetween_float_bounds _ _ _ _ _ Hx)).",
                        "VernacExtend",
                        "28307d7a40b9545067ae0d10af7dc4c0d28a1851"
                    ]
                },
                {
                    "command": [
                        "case_eq (shr (shr_record_of_loc m l) e (fexp (Zdigits radix2 m + e) - e)).",
                        "VernacExtend",
                        "e575f012fd23a308754990dcc4bfc86c4158af5b"
                    ]
                },
                {
                    "command": [
                        "intros mrs e'' H3 H4 H1.",
                        "VernacExtend",
                        "80937f008f6fa21bd65a4514da4d678fc0a12997"
                    ]
                },
                {
                    "command": [
                        "generalize (truncate_correct radix2 _ x m e l Hx0 Hx (or_introl _ He)).",
                        "VernacExtend",
                        "ad4c9ca9fd4d770dc5f4687649191c87b48b9a28"
                    ]
                },
                {
                    "command": [
                        "rewrite H1.",
                        "VernacExtend",
                        "91099f93f9346d13e3fc00550ba094ceac5333db"
                    ]
                },
                {
                    "command": [
                        "intros (H2,_).",
                        "VernacExtend",
                        "65d8efc0376022b08d0131a2d35ff6001d05160c"
                    ]
                },
                {
                    "command": [
                        "rewrite <- Hp, H3.",
                        "VernacExtend",
                        "938fe4bf4970d06b6bff0d908c93dff06e1a1b1d"
                    ]
                },
                {
                    "command": [
                        "assert (e'' = e').",
                        "VernacExtend",
                        "e0096f12c1346ee21ab9518a407d2eae4522f733"
                    ]
                },
                {
                    "command": [
                        "change (snd (mrs, e'') = snd (fst (m',e',l'))).",
                        "VernacExtend",
                        "aa4b621f301c3fb77dd2bf50254f85e8211f2c1e"
                    ]
                },
                {
                    "command": [
                        "rewrite <- H1, <- H3.",
                        "VernacExtend",
                        "09846490757bd2da18c98ae635bb11608482572e"
                    ]
                },
                {
                    "command": [
                        "unfold truncate.",
                        "VernacExtend",
                        "e239555bc9fc631f0b28093ba90c3ba6a6565581"
                    ]
                },
                {
                    "command": [
                        "now rewrite Hp.",
                        "VernacExtend",
                        "cea3c3db7439399bbc773d617b362a71c6f621b3"
                    ]
                },
                {
                    "command": [
                        "rewrite H in H4 |- *.",
                        "VernacExtend",
                        "6f16c9161d8ac7a1c6438a2d12a280a5a0aa6655"
                    ]
                },
                {
                    "command": [
                        "apply (f_equal (fun v => (v, _))).",
                        "VernacExtend",
                        "0c18f044190326592c8c0cf060dc3ad06b33cb66"
                    ]
                },
                {
                    "command": [
                        "destruct (inbetween_float_unique _ _ _ _ _ _ _ H2 H4) as (H5, H6).",
                        "VernacExtend",
                        "5798735b535ac70f37b558040312646ce539e879"
                    ]
                },
                {
                    "command": [
                        "rewrite H5, H6.",
                        "VernacExtend",
                        "8acc441cbd6d630136681ad119f9545219e118f1"
                    ]
                },
                {
                    "command": [
                        "case mrs.",
                        "VernacExtend",
                        "24fa0c23e059d6452919c47f28510c3b46077c32"
                    ]
                },
                {
                    "command": [
                        "now intros m0 [|] [|].",
                        "VernacExtend",
                        "cf9ae52801f1536a79f2643b08ceadebb4fb7dbd"
                    ]
                },
                {
                    "command": [
                        "intros p Hp.",
                        "VernacExtend",
                        "cf737bd4e185c03175335af1ca6ae52da34cba56"
                    ]
                },
                {
                    "command": [
                        "unfold truncate.",
                        "VernacExtend",
                        "e239555bc9fc631f0b28093ba90c3ba6a6565581"
                    ]
                },
                {
                    "command": [
                        "rewrite Hp.",
                        "VernacExtend",
                        "b511f9e4ffd06db3fba6cc16f472f9ed92990ffa"
                    ]
                },
                {
                    "command": [
                        "simpl.",
                        "VernacExtend",
                        "1b93169f4cf876d207c1fab22a2347202ab48d85"
                    ]
                },
                {
                    "command": [
                        "intros H.",
                        "VernacExtend",
                        "5cfae87a34fa7b59a257c9640f1b674f6e6d780b"
                    ]
                },
                {
                    "command": [
                        "now inversion H.",
                        "VernacExtend",
                        "d72febf07866235ab850e0be52d03df112cb9e8c"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "valid_rnd_round_mode",
            "line_nb": 458,
            "steps": [
                {
                    "command": [
                        "destruct m ; unfold round_mode ; auto with typeclass_instances.",
                        "VernacExtend",
                        "c91a23d7c18f2a963be977a7dd2bee7825a91010"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "Bmult_correct_aux",
            "line_nb": 626,
            "steps": [
                {
                    "command": [
                        "intros m sx mx ex Hx sy my ey Hy x y.",
                        "VernacExtend",
                        "909e2159719865efaf9860a49921a2cdd78d0241"
                    ]
                },
                {
                    "command": [
                        "unfold x, y.",
                        "VernacExtend",
                        "45f51fa8f6438c45ab36e0d5050b8849156225ec"
                    ]
                },
                {
                    "command": [
                        "rewrite <- F2R_mult.",
                        "VernacExtend",
                        "d8c54479282bdf8337bd590cf21dc0de5aa5bb54"
                    ]
                },
                {
                    "command": [
                        "simpl.",
                        "VernacExtend",
                        "1b93169f4cf876d207c1fab22a2347202ab48d85"
                    ]
                },
                {
                    "command": [
                        "replace (xorb sx sy) with (Rlt_bool (F2R (Float radix2 (cond_Zopp sx (Zpos mx) * cond_Zopp sy (Zpos my)) (ex + ey))) 0).",
                        "VernacExtend",
                        "b5e5f9ec7d5804e6cc55ef60f4a45bee60902f1c"
                    ]
                },
                {
                    "command": [
                        "apply binary_round_aux_correct.",
                        "VernacExtend",
                        "2a61e909da3e1e7a4b72fd0308dcaf909c511adf"
                    ]
                },
                {
                    "command": [
                        "constructor.",
                        "VernacExtend",
                        "3c77e6be855b5086df5e918bf2a0537e1010479a"
                    ]
                },
                {
                    "command": [
                        "rewrite <- F2R_abs.",
                        "VernacExtend",
                        "f45286a0077c940636f0e44760db3e0ff2184dd3"
                    ]
                },
                {
                    "command": [
                        "apply F2R_eq_compat.",
                        "VernacExtend",
                        "bc1e4623b2196fb23776bd02c10b33de36f7515b"
                    ]
                },
                {
                    "command": [
                        "rewrite Zabs_Zmult.",
                        "VernacExtend",
                        "f459c70d0601b9eab86bcf62dfb70a911d8ba871"
                    ]
                },
                {
                    "command": [
                        "now rewrite 2!abs_cond_Zopp.",
                        "VernacExtend",
                        "a3bdfa15c7e8b900d131bf717bfc3b6991f7d45d"
                    ]
                },
                {
                    "command": [
                        "change (Zpos (mx * my)) with (Zpos mx * Zpos my)%Z.",
                        "VernacExtend",
                        "5762eeb8e450bd6d506680acc0c96ad5c026da63"
                    ]
                },
                {
                    "command": [
                        "assert (forall m e, bounded m e = true -> fexp (Zdigits radix2 (Zpos m) + e) = e)%Z.",
                        "VernacExtend",
                        "720eb18e750454a3bf0f4bf93d2443fc73558ba6"
                    ]
                },
                {
                    "command": [
                        "clear.",
                        "VernacExtend",
                        "086ee0db0bdefcfa1ec15bb5cd44d451de64c569"
                    ]
                },
                {
                    "command": [
                        "intros m e Hb.",
                        "VernacExtend",
                        "42150c7e68709bd94861dcaaa22d35c136fe9244"
                    ]
                },
                {
                    "command": [
                        "destruct (andb_prop _ _ Hb) as (H,_).",
                        "VernacExtend",
                        "4c611b52ad7cea56f421674bb4f4e519c12e5dcf"
                    ]
                },
                {
                    "command": [
                        "apply Zeq_bool_eq.",
                        "VernacExtend",
                        "b9ce828b4f152ddd33cc296275dad63e72f4aa8f"
                    ]
                },
                {
                    "command": [
                        "now rewrite <- Zpos_digits2_pos.",
                        "VernacExtend",
                        "8ac8ef686bddd576360f6866f4f64f1c71f0ef66"
                    ]
                },
                {
                    "command": [
                        "generalize (H _ _ Hx) (H _ _ Hy).",
                        "VernacExtend",
                        "18bd06c3cf6ecb4dba65b0d6db92e5f02fc05cdf"
                    ]
                },
                {
                    "command": [
                        "clear x y sx sy Hx Hy H.",
                        "VernacExtend",
                        "ad1e774a6f9c07be6a63d2eef28d7238a04c1718"
                    ]
                },
                {
                    "command": [
                        "unfold fexp, FLT_exp.",
                        "VernacExtend",
                        "d790a7e5d03d5c9606c08f62c52b1a3604ada64e"
                    ]
                },
                {
                    "command": [
                        "refine (_ (Zdigits_mult_ge radix2 (Zpos mx) (Zpos my) _ _)) ; try discriminate.",
                        "VernacExtend",
                        "d8ac3435fea3e150547ac5c22e496f202546c94c"
                    ]
                },
                {
                    "command": [
                        "refine (_ (Zdigits_gt_0 radix2 (Zpos mx) _) (Zdigits_gt_0 radix2 (Zpos my) _)) ; try discriminate.",
                        "VernacExtend",
                        "11e54dd2f2e989b24e09b902cfcbe683f1ecc9f1"
                    ]
                },
                {
                    "command": [
                        "generalize (Zdigits radix2 (Zpos mx)) (Zdigits radix2 (Zpos my)) (Zdigits radix2 (Zpos mx * Zpos my)).",
                        "VernacExtend",
                        "400374d54471ae09a9d1952d6ba879f948cce29e"
                    ]
                },
                {
                    "command": [
                        "clear -Hmax.",
                        "VernacExtend",
                        "8c1aa5f5c4a1379df52d3406150ec3959a158d3e"
                    ]
                },
                {
                    "command": [
                        "unfold emin.",
                        "VernacExtend",
                        "3fff444b9eede7682b5d216fb49ade0df5718e8c"
                    ]
                },
                {
                    "command": [
                        "intros dx dy dxy Hx Hy Hxy.",
                        "VernacExtend",
                        "9eba190166559e16092685db255ee018e9a72eb1"
                    ]
                },
                {
                    "command": [
                        "zify ; intros ; subst.",
                        "VernacExtend",
                        "de7e43b353c728739c29399c39b557991eac3eb2"
                    ]
                },
                {
                    "command": [
                        "omega.",
                        "VernacExtend",
                        "32c6c865d255452c7e10c77111456d1981cede39"
                    ]
                },
                {
                    "command": [
                        "case sx ; case sy.",
                        "VernacExtend",
                        "d081f5d2e04526b5556849e151d1758c46eb8b50"
                    ]
                },
                {
                    "command": [
                        "apply Rlt_bool_false.",
                        "VernacExtend",
                        "115f3bf88cb7153f51757af6b09533b60d89f56b"
                    ]
                },
                {
                    "command": [
                        "now apply F2R_ge_0_compat.",
                        "VernacExtend",
                        "dee4b37db2af7e0397e3ec7ceb7cf7ff288ba7be"
                    ]
                },
                {
                    "command": [
                        "apply Rlt_bool_true.",
                        "VernacExtend",
                        "2dd8acd5318209d40288e95b2cc6a1cd92d8d107"
                    ]
                },
                {
                    "command": [
                        "now apply F2R_lt_0_compat.",
                        "VernacExtend",
                        "49795aa14bce980bd770acc759456462f1e2dbb2"
                    ]
                },
                {
                    "command": [
                        "apply Rlt_bool_true.",
                        "VernacExtend",
                        "2dd8acd5318209d40288e95b2cc6a1cd92d8d107"
                    ]
                },
                {
                    "command": [
                        "now apply F2R_lt_0_compat.",
                        "VernacExtend",
                        "49795aa14bce980bd770acc759456462f1e2dbb2"
                    ]
                },
                {
                    "command": [
                        "apply Rlt_bool_false.",
                        "VernacExtend",
                        "115f3bf88cb7153f51757af6b09533b60d89f56b"
                    ]
                },
                {
                    "command": [
                        "now apply F2R_ge_0_compat.",
                        "VernacExtend",
                        "dee4b37db2af7e0397e3ec7ceb7cf7ff288ba7be"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "Bmult_correct",
            "line_nb": 667,
            "steps": [
                {
                    "command": [
                        "intros mult_nan m [sx|sx|sx plx|sx mx ex Hx] [sy|sy|sy ply|sy my ey Hy] ; try ( rewrite ?Rmult_0_r, ?Rmult_0_l, round_0, Rabs_R0, Rlt_bool_true ; [ now repeat constructor | apply bpow_gt_0 | now auto with typeclass_instances ] ).",
                        "VernacExtend",
                        "2337c3ea84a790bdedf6555d72a9fef7b92e9ea4"
                    ]
                },
                {
                    "command": [
                        "simpl.",
                        "VernacExtend",
                        "1b93169f4cf876d207c1fab22a2347202ab48d85"
                    ]
                },
                {
                    "command": [
                        "case Bmult_correct_aux.",
                        "VernacExtend",
                        "1f5a419ef6ff30c508fc5bbd25d36f4d5cdd1915"
                    ]
                },
                {
                    "command": [
                        "intros H1.",
                        "VernacExtend",
                        "ba8e6c21eb83603690828b8ea37ea25a6f2962f3"
                    ]
                },
                {
                    "command": [
                        "case Rlt_bool.",
                        "VernacExtend",
                        "da208ea1a14afd75e8ab60d99e3d2460ef18e0dc"
                    ]
                },
                {
                    "command": [
                        "intros (H2, (H3, H4)).",
                        "VernacExtend",
                        "89bd6077fe74b2237b5a34c73e56fe1f7d3600a5"
                    ]
                },
                {
                    "command": [
                        "split.",
                        "VernacExtend",
                        "55abc140132bd88981001ac656020469a8d503eb"
                    ]
                },
                {
                    "command": [
                        "now rewrite B2R_FF2B.",
                        "VernacExtend",
                        "364a0e8b8e6f13efaa19a009ab431dc2474ea6f2"
                    ]
                },
                {
                    "command": [
                        "split.",
                        "VernacExtend",
                        "55abc140132bd88981001ac656020469a8d503eb"
                    ]
                },
                {
                    "command": [
                        "now rewrite is_finite_FF2B.",
                        "VernacExtend",
                        "705875eebcbc072e4ea86daec6e02904c532c7d2"
                    ]
                },
                {
                    "command": [
                        "rewrite Bsign_FF2B.",
                        "VernacExtend",
                        "76a51b8aae4f12f644ab280018318f288b7848d3"
                    ]
                },
                {
                    "command": [
                        "auto.",
                        "VernacExtend",
                        "1f09da0addd069b3b65326f8c71967acc1e985af"
                    ]
                },
                {
                    "command": [
                        "intros H2.",
                        "VernacExtend",
                        "1cdce4ec62ec85608d1a6cc1fb7ae184c894a041"
                    ]
                },
                {
                    "command": [
                        "now rewrite B2FF_FF2B.",
                        "VernacExtend",
                        "ec37d971040d8fa4dd8551e47d1f57dc0a3334be"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "B2FF_Bmult",
            "line_nb": 684,
            "steps": [
                {
                    "command": [
                        "intros mult_nan mult_nan_ff m x y Hmult_nan.",
                        "VernacExtend",
                        "4cd540832719909e3f5530705000c16088faf44f"
                    ]
                },
                {
                    "command": [
                        "unfold Bmult_FF.",
                        "VernacExtend",
                        "eb3e78455594d1e1801a93cce203f027b94d422b"
                    ]
                },
                {
                    "command": [
                        "rewrite Hmult_nan.",
                        "VernacExtend",
                        "211b2d0bd8d4ca9edc4efb1f5d883ec344c63d44"
                    ]
                },
                {
                    "command": [
                        "destruct x as [sx|sx|sx [plx Hplx]|sx mx ex Hx], y as [sy|sy|sy [ply Hply]|sy my ey Hy] ; simpl; try match goal with |- context [mult_nan ?x ?y] => destruct (mult_nan x y) as [? []] end; try easy.",
                        "VernacExtend",
                        "eaf915f05daaf4a74c5506c23857b919d1a0604c"
                    ]
                },
                {
                    "command": [
                        "apply B2FF_FF2B.",
                        "VernacExtend",
                        "9657ea1a131c64759b7abe5b00a18e2278ef2d6f"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "shl_align_correct",
            "line_nb": 692,
            "steps": [
                {
                    "command": [
                        "intros mx ex ex'.",
                        "VernacExtend",
                        "50af3c0abb765709d66af8631b6ae800c3974c56"
                    ]
                },
                {
                    "command": [
                        "unfold shl_align.",
                        "VernacExtend",
                        "db41c234aa8acfd3f325d9429876613ebd80e102"
                    ]
                },
                {
                    "command": [
                        "case_eq (ex' - ex)%Z.",
                        "VernacExtend",
                        "69fd26a2002d7e8307223e8e42c108e0273dff74"
                    ]
                },
                {
                    "command": [
                        "intros H.",
                        "VernacExtend",
                        "5cfae87a34fa7b59a257c9640f1b674f6e6d780b"
                    ]
                },
                {
                    "command": [
                        "repeat split.",
                        "VernacExtend",
                        "7968f2448e3e51b1de42f5c433248f4a827b4da2"
                    ]
                },
                {
                    "command": [
                        "rewrite Zminus_eq with (1 := H).",
                        "VernacExtend",
                        "2f9abd00a479d43a35f396804f4ec0c663a73275"
                    ]
                },
                {
                    "command": [
                        "apply Zle_refl.",
                        "VernacExtend",
                        "68a57d6389c7dd3f2c16b824eb0734986d9ff207"
                    ]
                },
                {
                    "command": [
                        "intros d Hd.",
                        "VernacExtend",
                        "dc50086a30e68651e72109a4d511291d21355345"
                    ]
                },
                {
                    "command": [
                        "repeat split.",
                        "VernacExtend",
                        "7968f2448e3e51b1de42f5c433248f4a827b4da2"
                    ]
                },
                {
                    "command": [
                        "replace ex' with (ex' - ex + ex)%Z by ring.",
                        "VernacExtend",
                        "9fa5cee587dc62b7430ff4a3633ff1650d133c3b"
                    ]
                },
                {
                    "command": [
                        "rewrite Hd.",
                        "VernacExtend",
                        "88abaeb91ac1303911ff95b63d0fe35e7b02a734"
                    ]
                },
                {
                    "command": [
                        "pattern ex at 1 ; rewrite <- Zplus_0_l.",
                        "VernacExtend",
                        "44fc366fdc10e5b3035822eb4984ae674ce345c3"
                    ]
                },
                {
                    "command": [
                        "now apply Zplus_le_compat_r.",
                        "VernacExtend",
                        "ab7407d0f86a2fbcfaaa5af581a74cf42255d7b8"
                    ]
                },
                {
                    "command": [
                        "intros d Hd.",
                        "VernacExtend",
                        "dc50086a30e68651e72109a4d511291d21355345"
                    ]
                },
                {
                    "command": [
                        "rewrite shift_pos_correct, Zmult_comm.",
                        "VernacExtend",
                        "89a020373274be756e58d457889015037322e601"
                    ]
                },
                {
                    "command": [
                        "change (Zpower_pos 2 d) with (Zpower radix2 (Zpos d)).",
                        "VernacExtend",
                        "4cdcb94071017158d2f214d8488c9f8e33d671ca"
                    ]
                },
                {
                    "command": [
                        "change (Zpos d) with (Zopp (Zneg d)).",
                        "VernacExtend",
                        "3ef5d7697e02a7e711e88a18971aed468f2972e7"
                    ]
                },
                {
                    "command": [
                        "rewrite <- Hd.",
                        "VernacExtend",
                        "36a0441d89364a3a72a0d7fb93c9e78171a826a8"
                    ]
                },
                {
                    "command": [
                        "split.",
                        "VernacExtend",
                        "55abc140132bd88981001ac656020469a8d503eb"
                    ]
                },
                {
                    "command": [
                        "replace (- (ex' - ex))%Z with (ex - ex')%Z by ring.",
                        "VernacExtend",
                        "18f89d98f35a8d2d7793de387febe971e79df925"
                    ]
                },
                {
                    "command": [
                        "apply F2R_change_exp.",
                        "VernacExtend",
                        "fc7404b0e2f947b608940c418d6ab6d49ccf8f7a"
                    ]
                },
                {
                    "command": [
                        "apply Zle_0_minus_le.",
                        "VernacExtend",
                        "6d2afc8bb25eee8a29efb37b8f8514f2462b6910"
                    ]
                },
                {
                    "command": [
                        "replace (ex - ex')%Z with (- (ex' - ex))%Z by ring.",
                        "VernacExtend",
                        "5b9795ae5122ce2930267380999a8796c116b3b3"
                    ]
                },
                {
                    "command": [
                        "now rewrite Hd.",
                        "VernacExtend",
                        "30bb74f0a3f9df989552ffff896a2bef491b8435"
                    ]
                },
                {
                    "command": [
                        "apply Zle_refl.",
                        "VernacExtend",
                        "68a57d6389c7dd3f2c16b824eb0734986d9ff207"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "snd_shl_align",
            "line_nb": 719,
            "steps": [
                {
                    "command": [
                        "intros mx ex ex' He.",
                        "VernacExtend",
                        "277df5c5925a9524ae63f0f592a1041f335ece6d"
                    ]
                },
                {
                    "command": [
                        "unfold shl_align.",
                        "VernacExtend",
                        "db41c234aa8acfd3f325d9429876613ebd80e102"
                    ]
                },
                {
                    "command": [
                        "case_eq (ex' - ex)%Z ; simpl.",
                        "VernacExtend",
                        "e1b13193e25c648af23ce2177d868ef1ae6fe387"
                    ]
                },
                {
                    "command": [
                        "intros H.",
                        "VernacExtend",
                        "5cfae87a34fa7b59a257c9640f1b674f6e6d780b"
                    ]
                },
                {
                    "command": [
                        "now rewrite Zminus_eq with (1 := H).",
                        "VernacExtend",
                        "bd5a0c955a1f8a3c103ee1a9b0ddd258de6b1452"
                    ]
                },
                {
                    "command": [
                        "intros p.",
                        "VernacExtend",
                        "223e3cb70cff95972873720780e7195aeb57b9fc"
                    ]
                },
                {
                    "command": [
                        "clear -He ; zify ; omega.",
                        "VernacExtend",
                        "c63fb5cd0db42e9b37e719b5dc218f5b47156da3"
                    ]
                },
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "apply refl_equal.",
                        "VernacExtend",
                        "37304a26ede0d38318cdc32c46bfa45cfbc5e7db"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "binary_round_correct",
            "line_nb": 746,
            "steps": [
                {
                    "command": [
                        "intros m sx mx ex.",
                        "VernacExtend",
                        "c0549b59989ae440174a213edd9e29a3d8c89dc5"
                    ]
                },
                {
                    "command": [
                        "unfold binary_round.",
                        "VernacExtend",
                        "60a451dab1f62712d9af1b280f8ad76e5eb24c86"
                    ]
                },
                {
                    "command": [
                        "generalize (shl_align_fexp_correct mx ex).",
                        "VernacExtend",
                        "1de716ca6fe225a437c753391b7974c9960f8ad3"
                    ]
                },
                {
                    "command": [
                        "destruct (shl_align_fexp mx ex) as (mz, ez).",
                        "VernacExtend",
                        "a3cde73c79772531ebc82d8f04a705b5ca1665bb"
                    ]
                },
                {
                    "command": [
                        "intros (H1, H2).",
                        "VernacExtend",
                        "cbe4fae06561c7d97a3cceb65a0c2d56dc027b9e"
                    ]
                },
                {
                    "command": [
                        "set (x := F2R (Float radix2 (cond_Zopp sx (Zpos mx)) ex)).",
                        "VernacExtend",
                        "c89ab324aa7ac2977ddabc94c9620881e55709f1"
                    ]
                },
                {
                    "command": [
                        "replace sx with (Rlt_bool x 0).",
                        "VernacExtend",
                        "6835a65cbe27f52dda648d18d6f720361fdc750f"
                    ]
                },
                {
                    "command": [
                        "apply binary_round_aux_correct.",
                        "VernacExtend",
                        "2a61e909da3e1e7a4b72fd0308dcaf909c511adf"
                    ]
                },
                {
                    "command": [
                        "constructor.",
                        "VernacExtend",
                        "3c77e6be855b5086df5e918bf2a0537e1010479a"
                    ]
                },
                {
                    "command": [
                        "unfold x.",
                        "VernacExtend",
                        "8e116a60402c848e1f7fd0414643cdb94ae22a92"
                    ]
                },
                {
                    "command": [
                        "now rewrite <- F2R_Zabs, abs_cond_Zopp.",
                        "VernacExtend",
                        "1b01fee755f485594365253c46cca97be8994b37"
                    ]
                },
                {
                    "command": [
                        "exact H2.",
                        "VernacExtend",
                        "6cf1ccd4f667f962fca87ce20ad22b06c15c53ad"
                    ]
                },
                {
                    "command": [
                        "unfold x.",
                        "VernacExtend",
                        "8e116a60402c848e1f7fd0414643cdb94ae22a92"
                    ]
                },
                {
                    "command": [
                        "case sx.",
                        "VernacExtend",
                        "170e50034984a3c45fbc1692315f4c57e6a7660e"
                    ]
                },
                {
                    "command": [
                        "apply Rlt_bool_true.",
                        "VernacExtend",
                        "2dd8acd5318209d40288e95b2cc6a1cd92d8d107"
                    ]
                },
                {
                    "command": [
                        "now apply F2R_lt_0_compat.",
                        "VernacExtend",
                        "49795aa14bce980bd770acc759456462f1e2dbb2"
                    ]
                },
                {
                    "command": [
                        "apply Rlt_bool_false.",
                        "VernacExtend",
                        "115f3bf88cb7153f51757af6b09533b60d89f56b"
                    ]
                },
                {
                    "command": [
                        "now apply F2R_ge_0_compat.",
                        "VernacExtend",
                        "dee4b37db2af7e0397e3ec7ceb7cf7ff288ba7be"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "Bdiv_correct_aux",
            "line_nb": 973,
            "steps": [
                {
                    "command": [
                        "intros m sx mx ex sy my ey.",
                        "VernacExtend",
                        "667a77324564bfae6f2596e7c979a67fb484ecd5"
                    ]
                },
                {
                    "command": [
                        "replace (Fdiv_core_binary (Zpos mx) ex (Zpos my) ey) with (Fdiv_core radix2 prec (Zpos mx) ex (Zpos my) ey).",
                        "VernacExtend",
                        "1218caadab80d6b154623d4f03380fcc033ef9ea"
                    ]
                },
                {
                    "command": [
                        "refine (_ (Fdiv_core_correct radix2 prec (Zpos mx) ex (Zpos my) ey _ _ _)) ; try easy.",
                        "VernacExtend",
                        "ac060862bfab740fb92de8750801e37abddffce4"
                    ]
                },
                {
                    "command": [
                        "destruct (Fdiv_core radix2 prec (Zpos mx) ex (Zpos my) ey) as ((mz, ez), lz).",
                        "VernacExtend",
                        "b174fc6ca00b1f2da418b69ded892a7e2fe81f6a"
                    ]
                },
                {
                    "command": [
                        "intros (Pz, Bz).",
                        "VernacExtend",
                        "8f271cfded492bd2f6917023809e32eb382b7e03"
                    ]
                },
                {
                    "command": [
                        "simpl.",
                        "VernacExtend",
                        "1b93169f4cf876d207c1fab22a2347202ab48d85"
                    ]
                },
                {
                    "command": [
                        "replace (xorb sx sy) with (Rlt_bool (F2R (Float radix2 (cond_Zopp sx (Zpos mx)) ex) * / F2R (Float radix2 (cond_Zopp sy (Zpos my)) ey)) 0).",
                        "VernacExtend",
                        "601f7c19a3d32398c87a905421173831fe7864d0"
                    ]
                },
                {
                    "command": [
                        "unfold Rdiv.",
                        "VernacExtend",
                        "d9820df68a5475147f48d29acf89824b27f71597"
                    ]
                },
                {
                    "command": [
                        "destruct mz as [|mz|mz].",
                        "VernacExtend",
                        "a829e1a88f7cd376a133dde2aa95756233778278"
                    ]
                },
                {
                    "command": [
                        "elim (Zlt_irrefl prec).",
                        "VernacExtend",
                        "9742dfbeea5776081b0493fceb542f55c9b380a8"
                    ]
                },
                {
                    "command": [
                        "now apply Zle_lt_trans with Z0.",
                        "VernacExtend",
                        "bda6f1b5344ac7ed2474a634220c4a4241259b1b"
                    ]
                },
                {
                    "command": [
                        "apply binary_round_aux_correct.",
                        "VernacExtend",
                        "2a61e909da3e1e7a4b72fd0308dcaf909c511adf"
                    ]
                },
                {
                    "command": [
                        "rewrite Rabs_mult, Rabs_Rinv.",
                        "VernacExtend",
                        "9ce3c48d8dfafe27b3b8ffea0be55a030540d6b4"
                    ]
                },
                {
                    "command": [
                        "now rewrite <- 2!F2R_Zabs, 2!abs_cond_Zopp.",
                        "VernacExtend",
                        "32fc4b93895aa534d0505a9730a0994d090925a5"
                    ]
                },
                {
                    "command": [
                        "case sy.",
                        "VernacExtend",
                        "cdd75ff212c25e14509a77df1371f71be1f6ea2e"
                    ]
                },
                {
                    "command": [
                        "apply Rlt_not_eq.",
                        "VernacExtend",
                        "4d888fdf05ab3816c2e650b03b478096db638cf5"
                    ]
                },
                {
                    "command": [
                        "now apply F2R_lt_0_compat.",
                        "VernacExtend",
                        "49795aa14bce980bd770acc759456462f1e2dbb2"
                    ]
                },
                {
                    "command": [
                        "apply Rgt_not_eq.",
                        "VernacExtend",
                        "8860a9193cfdaf1f0316f8df1f2c0781738e5ef7"
                    ]
                },
                {
                    "command": [
                        "now apply F2R_gt_0_compat.",
                        "VernacExtend",
                        "2b5a1cb2582ac2d074766e6b65adcf42b088a406"
                    ]
                },
                {
                    "command": [
                        "revert Pz.",
                        "VernacExtend",
                        "0052f06260f891129fc837be32e5154a4229e139"
                    ]
                },
                {
                    "command": [
                        "generalize (Zdigits radix2 (Zpos mz)).",
                        "VernacExtend",
                        "c4339cc1758d9341490cde366bd6aa3f7b2dc22a"
                    ]
                },
                {
                    "command": [
                        "unfold fexp, FLT_exp.",
                        "VernacExtend",
                        "d790a7e5d03d5c9606c08f62c52b1a3604ada64e"
                    ]
                },
                {
                    "command": [
                        "clear.",
                        "VernacExtend",
                        "086ee0db0bdefcfa1ec15bb5cd44d451de64c569"
                    ]
                },
                {
                    "command": [
                        "intros ; zify ; subst.",
                        "VernacExtend",
                        "7230a5582b85d5a270abdd7962e491125771f8ed"
                    ]
                },
                {
                    "command": [
                        "omega.",
                        "VernacExtend",
                        "32c6c865d255452c7e10c77111456d1981cede39"
                    ]
                },
                {
                    "command": [
                        "elim Rlt_not_le with (1 := proj2 (inbetween_float_bounds _ _ _ _ _ Bz)).",
                        "VernacExtend",
                        "acc1437fea9cdbb867066be971b9fa1a5f51e83a"
                    ]
                },
                {
                    "command": [
                        "apply Rle_trans with R0.",
                        "VernacExtend",
                        "56da4b3d5f74d38a747892d3b4157e854e84554d"
                    ]
                },
                {
                    "command": [
                        "apply F2R_le_0_compat.",
                        "VernacExtend",
                        "c7889603f8eec7f68976f04dd9e33c82750d814c"
                    ]
                },
                {
                    "command": [
                        "now case mz.",
                        "VernacExtend",
                        "e80a159f84bb4b4ab4b9e22a9ea318566d6af23b"
                    ]
                },
                {
                    "command": [
                        "apply Rmult_le_pos.",
                        "VernacExtend",
                        "e03207c3cef85471384dc0906485b056bc83a80a"
                    ]
                },
                {
                    "command": [
                        "now apply F2R_ge_0_compat.",
                        "VernacExtend",
                        "dee4b37db2af7e0397e3ec7ceb7cf7ff288ba7be"
                    ]
                },
                {
                    "command": [
                        "apply Rlt_le.",
                        "VernacExtend",
                        "cdc4280500779f23bae235b94c24a4b2ea2921fe"
                    ]
                },
                {
                    "command": [
                        "apply Rinv_0_lt_compat.",
                        "VernacExtend",
                        "d7abdc8c3031a09ca2712c9563d7ecf89b4d477e"
                    ]
                },
                {
                    "command": [
                        "now apply F2R_gt_0_compat.",
                        "VernacExtend",
                        "2b5a1cb2582ac2d074766e6b65adcf42b088a406"
                    ]
                },
                {
                    "command": [
                        "case sy ; simpl.",
                        "VernacExtend",
                        "ee70c38398b30d963559c1901a2c1c558073bc52"
                    ]
                },
                {
                    "command": [
                        "change (Zneg my) with (Zopp (Zpos my)).",
                        "VernacExtend",
                        "afe4ac983d13c2f2593cfd40a121a845769f80a6"
                    ]
                },
                {
                    "command": [
                        "rewrite F2R_Zopp.",
                        "VernacExtend",
                        "14dc9704af59104fbc8331cc5f22daa96d394349"
                    ]
                },
                {
                    "command": [
                        "rewrite <- Ropp_inv_permute.",
                        "VernacExtend",
                        "85f530bfe968b6a9d6a9139b5c5c7f74c68047b7"
                    ]
                },
                {
                    "command": [
                        "rewrite Ropp_mult_distr_r_reverse.",
                        "VernacExtend",
                        "c1bb2248d34f6a68a5e2998139429f084e155207"
                    ]
                },
                {
                    "command": [
                        "case sx ; simpl.",
                        "VernacExtend",
                        "d9090bd7ef0e81de0deac504c45383c4a27c8e05"
                    ]
                },
                {
                    "command": [
                        "apply Rlt_bool_false.",
                        "VernacExtend",
                        "115f3bf88cb7153f51757af6b09533b60d89f56b"
                    ]
                },
                {
                    "command": [
                        "rewrite <- Ropp_mult_distr_l_reverse.",
                        "VernacExtend",
                        "e7c61948f76e0a8897e51bfab935c33e66508906"
                    ]
                },
                {
                    "command": [
                        "apply Rmult_le_pos.",
                        "VernacExtend",
                        "e03207c3cef85471384dc0906485b056bc83a80a"
                    ]
                },
                {
                    "command": [
                        "rewrite <- F2R_opp.",
                        "VernacExtend",
                        "c79f36956df0a657acacbc3517318f048ab6de55"
                    ]
                },
                {
                    "command": [
                        "now apply F2R_ge_0_compat.",
                        "VernacExtend",
                        "dee4b37db2af7e0397e3ec7ceb7cf7ff288ba7be"
                    ]
                },
                {
                    "command": [
                        "apply Rlt_le.",
                        "VernacExtend",
                        "cdc4280500779f23bae235b94c24a4b2ea2921fe"
                    ]
                },
                {
                    "command": [
                        "apply Rinv_0_lt_compat.",
                        "VernacExtend",
                        "d7abdc8c3031a09ca2712c9563d7ecf89b4d477e"
                    ]
                },
                {
                    "command": [
                        "now apply F2R_gt_0_compat.",
                        "VernacExtend",
                        "2b5a1cb2582ac2d074766e6b65adcf42b088a406"
                    ]
                },
                {
                    "command": [
                        "apply Rlt_bool_true.",
                        "VernacExtend",
                        "2dd8acd5318209d40288e95b2cc6a1cd92d8d107"
                    ]
                },
                {
                    "command": [
                        "rewrite <- Ropp_0.",
                        "VernacExtend",
                        "9b57276282263b89d6671472ad672c5763b57b55"
                    ]
                },
                {
                    "command": [
                        "apply Ropp_lt_contravar.",
                        "VernacExtend",
                        "d8e11ebac93d435105a924a8c0c7fe0b21db4797"
                    ]
                },
                {
                    "command": [
                        "apply Rmult_lt_0_compat.",
                        "VernacExtend",
                        "c57ce258f04cdf6d200ca0efb8bd86c726436bf7"
                    ]
                },
                {
                    "command": [
                        "now apply F2R_gt_0_compat.",
                        "VernacExtend",
                        "2b5a1cb2582ac2d074766e6b65adcf42b088a406"
                    ]
                },
                {
                    "command": [
                        "apply Rinv_0_lt_compat.",
                        "VernacExtend",
                        "d7abdc8c3031a09ca2712c9563d7ecf89b4d477e"
                    ]
                },
                {
                    "command": [
                        "now apply F2R_gt_0_compat.",
                        "VernacExtend",
                        "2b5a1cb2582ac2d074766e6b65adcf42b088a406"
                    ]
                },
                {
                    "command": [
                        "apply Rgt_not_eq.",
                        "VernacExtend",
                        "8860a9193cfdaf1f0316f8df1f2c0781738e5ef7"
                    ]
                },
                {
                    "command": [
                        "now apply F2R_gt_0_compat.",
                        "VernacExtend",
                        "2b5a1cb2582ac2d074766e6b65adcf42b088a406"
                    ]
                },
                {
                    "command": [
                        "case sx.",
                        "VernacExtend",
                        "170e50034984a3c45fbc1692315f4c57e6a7660e"
                    ]
                },
                {
                    "command": [
                        "apply Rlt_bool_true.",
                        "VernacExtend",
                        "2dd8acd5318209d40288e95b2cc6a1cd92d8d107"
                    ]
                },
                {
                    "command": [
                        "rewrite F2R_Zopp.",
                        "VernacExtend",
                        "14dc9704af59104fbc8331cc5f22daa96d394349"
                    ]
                },
                {
                    "command": [
                        "rewrite Ropp_mult_distr_l_reverse.",
                        "VernacExtend",
                        "1d14afaf59b9fd90d930059e8d15a46d6c95c450"
                    ]
                },
                {
                    "command": [
                        "rewrite <- Ropp_0.",
                        "VernacExtend",
                        "9b57276282263b89d6671472ad672c5763b57b55"
                    ]
                },
                {
                    "command": [
                        "apply Ropp_lt_contravar.",
                        "VernacExtend",
                        "d8e11ebac93d435105a924a8c0c7fe0b21db4797"
                    ]
                },
                {
                    "command": [
                        "apply Rmult_lt_0_compat.",
                        "VernacExtend",
                        "c57ce258f04cdf6d200ca0efb8bd86c726436bf7"
                    ]
                },
                {
                    "command": [
                        "now apply F2R_gt_0_compat.",
                        "VernacExtend",
                        "2b5a1cb2582ac2d074766e6b65adcf42b088a406"
                    ]
                },
                {
                    "command": [
                        "apply Rinv_0_lt_compat.",
                        "VernacExtend",
                        "d7abdc8c3031a09ca2712c9563d7ecf89b4d477e"
                    ]
                },
                {
                    "command": [
                        "now apply F2R_gt_0_compat.",
                        "VernacExtend",
                        "2b5a1cb2582ac2d074766e6b65adcf42b088a406"
                    ]
                },
                {
                    "command": [
                        "apply Rlt_bool_false.",
                        "VernacExtend",
                        "115f3bf88cb7153f51757af6b09533b60d89f56b"
                    ]
                },
                {
                    "command": [
                        "apply Rmult_le_pos.",
                        "VernacExtend",
                        "e03207c3cef85471384dc0906485b056bc83a80a"
                    ]
                },
                {
                    "command": [
                        "now apply F2R_ge_0_compat.",
                        "VernacExtend",
                        "dee4b37db2af7e0397e3ec7ceb7cf7ff288ba7be"
                    ]
                },
                {
                    "command": [
                        "apply Rlt_le.",
                        "VernacExtend",
                        "cdc4280500779f23bae235b94c24a4b2ea2921fe"
                    ]
                },
                {
                    "command": [
                        "apply Rinv_0_lt_compat.",
                        "VernacExtend",
                        "d7abdc8c3031a09ca2712c9563d7ecf89b4d477e"
                    ]
                },
                {
                    "command": [
                        "now apply F2R_gt_0_compat.",
                        "VernacExtend",
                        "2b5a1cb2582ac2d074766e6b65adcf42b088a406"
                    ]
                },
                {
                    "command": [
                        "unfold Fdiv_core_binary, Fdiv_core.",
                        "VernacExtend",
                        "a9071ee2094fac12f4b44ed409a746e97812a291"
                    ]
                },
                {
                    "command": [
                        "rewrite 2!Zdigits2_Zdigits.",
                        "VernacExtend",
                        "ceff6ed40208b3b4b9f4a80697712cf147b4f4f4"
                    ]
                },
                {
                    "command": [
                        "change 2%Z with (radix_val radix2).",
                        "VernacExtend",
                        "15e91e944ed01ba7350e023be33458cb95f8b644"
                    ]
                },
                {
                    "command": [
                        "destruct (Zdigits radix2 (Z.pos my) + prec - Zdigits radix2 (Z.pos mx))%Z as [|p|p].",
                        "VernacExtend",
                        "35181f84a8c32982dff954280bebec84df89be4e"
                    ]
                },
                {
                    "command": [
                        "now rewrite Zfast_div_eucl_correct.",
                        "VernacExtend",
                        "e5fd34788d6bfff7976c3adab674efb3f826d668"
                    ]
                },
                {
                    "command": [
                        "rewrite Z.shiftl_mul_pow2 by easy.",
                        "VernacExtend",
                        "289cc211607b5737f7a49ef7f79b739cb08023d1"
                    ]
                },
                {
                    "command": [
                        "now rewrite Zfast_div_eucl_correct.",
                        "VernacExtend",
                        "e5fd34788d6bfff7976c3adab674efb3f826d668"
                    ]
                },
                {
                    "command": [
                        "now rewrite Zfast_div_eucl_correct.",
                        "VernacExtend",
                        "e5fd34788d6bfff7976c3adab674efb3f826d668"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "Bdiv_correct",
            "line_nb": 1057,
            "steps": [
                {
                    "command": [
                        "intros div_nan m x [sy|sy|sy ply|sy my ey Hy] Zy ; try now elim Zy.",
                        "VernacExtend",
                        "aa8fb0b6d6cf69be0fe52c219b8b0d41d359d2df"
                    ]
                },
                {
                    "command": [
                        "revert x.",
                        "VernacExtend",
                        "df8e7a3327c3fe54cc92fed148460363bea0ac80"
                    ]
                },
                {
                    "command": [
                        "unfold Rdiv.",
                        "VernacExtend",
                        "d9820df68a5475147f48d29acf89824b27f71597"
                    ]
                },
                {
                    "command": [
                        "intros [sx|sx|sx plx|sx mx ex Hx] ; try ( rewrite Rmult_0_l, round_0, Rabs_R0, Rlt_bool_true ; [ now repeat constructor | apply bpow_gt_0 | auto with typeclass_instances ] ).",
                        "VernacExtend",
                        "6f6345fe7523060910f07584d15ebb117add296b"
                    ]
                },
                {
                    "command": [
                        "simpl.",
                        "VernacExtend",
                        "1b93169f4cf876d207c1fab22a2347202ab48d85"
                    ]
                },
                {
                    "command": [
                        "case Bdiv_correct_aux.",
                        "VernacExtend",
                        "6495cd69cc4f8532cd0e04bc61bfdcf8cdac5b5f"
                    ]
                },
                {
                    "command": [
                        "intros H1.",
                        "VernacExtend",
                        "ba8e6c21eb83603690828b8ea37ea25a6f2962f3"
                    ]
                },
                {
                    "command": [
                        "unfold Rdiv.",
                        "VernacExtend",
                        "d9820df68a5475147f48d29acf89824b27f71597"
                    ]
                },
                {
                    "command": [
                        "case Rlt_bool.",
                        "VernacExtend",
                        "da208ea1a14afd75e8ab60d99e3d2460ef18e0dc"
                    ]
                },
                {
                    "command": [
                        "intros (H2, (H3, H4)).",
                        "VernacExtend",
                        "89bd6077fe74b2237b5a34c73e56fe1f7d3600a5"
                    ]
                },
                {
                    "command": [
                        "split.",
                        "VernacExtend",
                        "55abc140132bd88981001ac656020469a8d503eb"
                    ]
                },
                {
                    "command": [
                        "now rewrite B2R_FF2B.",
                        "VernacExtend",
                        "364a0e8b8e6f13efaa19a009ab431dc2474ea6f2"
                    ]
                },
                {
                    "command": [
                        "split.",
                        "VernacExtend",
                        "55abc140132bd88981001ac656020469a8d503eb"
                    ]
                },
                {
                    "command": [
                        "now rewrite is_finite_FF2B.",
                        "VernacExtend",
                        "705875eebcbc072e4ea86daec6e02904c532c7d2"
                    ]
                },
                {
                    "command": [
                        "rewrite Bsign_FF2B.",
                        "VernacExtend",
                        "76a51b8aae4f12f644ab280018318f288b7848d3"
                    ]
                },
                {
                    "command": [
                        "congruence.",
                        "VernacExtend",
                        "d8c818f6cffeaee6a722a71acc77f2d6e5199eb9"
                    ]
                },
                {
                    "command": [
                        "intros H2.",
                        "VernacExtend",
                        "1cdce4ec62ec85608d1a6cc1fb7ae184c894a041"
                    ]
                },
                {
                    "command": [
                        "now rewrite B2FF_FF2B.",
                        "VernacExtend",
                        "ec37d971040d8fa4dd8551e47d1f57dc0a3334be"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "Bsqrt_correct",
            "line_nb": 1178,
            "steps": [
                {
                    "command": [
                        "intros sqrt_nan m [sx|[|]| |sx mx ex Hx] ; try ( now simpl ; rewrite sqrt_0, round_0 ; intuition auto with typeclass_instances ).",
                        "VernacExtend",
                        "0530ee64fa265d01466b1512a3c6566692ba403b"
                    ]
                },
                {
                    "command": [
                        "simpl.",
                        "VernacExtend",
                        "1b93169f4cf876d207c1fab22a2347202ab48d85"
                    ]
                },
                {
                    "command": [
                        "case Bsqrt_correct_aux.",
                        "VernacExtend",
                        "0f14e9cf208def53d479c721bb88928588e392bb"
                    ]
                },
                {
                    "command": [
                        "intros H1 (H2, (H3, H4)).",
                        "VernacExtend",
                        "5ba6a0e658273fb1a537d3b4afba577728186852"
                    ]
                },
                {
                    "command": [
                        "case sx.",
                        "VernacExtend",
                        "170e50034984a3c45fbc1692315f4c57e6a7660e"
                    ]
                },
                {
                    "command": [
                        "refine (conj _ (conj (refl_equal false) _)).",
                        "VernacExtend",
                        "83a0d7a51c103868e9ba046d5e5373cce597321f"
                    ]
                },
                {
                    "command": [
                        "apply sym_eq.",
                        "VernacExtend",
                        "f01eb728d9ceeac2915c66b52a7b50a0c452e949"
                    ]
                },
                {
                    "command": [
                        "unfold sqrt.",
                        "VernacExtend",
                        "71ef64092f0003bcdade22760b25585d0190003b"
                    ]
                },
                {
                    "command": [
                        "case Rcase_abs.",
                        "VernacExtend",
                        "ccf1c2af042cc12c43fb480ccf9e835fcd0d1049"
                    ]
                },
                {
                    "command": [
                        "intros _.",
                        "VernacExtend",
                        "eb0e518a4896777a9a76b3ab973eaf7b4f1b52db"
                    ]
                },
                {
                    "command": [
                        "apply round_0.",
                        "VernacExtend",
                        "cfd5293949ec60a4849d9de4d1566f8e8f709a5d"
                    ]
                },
                {
                    "command": [
                        "auto with typeclass_instances.",
                        "VernacExtend",
                        "673e27e9d909eb73b87d5da012fc02debf6cfc76"
                    ]
                },
                {
                    "command": [
                        "intros H.",
                        "VernacExtend",
                        "5cfae87a34fa7b59a257c9640f1b674f6e6d780b"
                    ]
                },
                {
                    "command": [
                        "elim Rge_not_lt with (1 := H).",
                        "VernacExtend",
                        "10a2d26cb8482cade91d8ca00edf13d2965d668d"
                    ]
                },
                {
                    "command": [
                        "now apply F2R_lt_0_compat.",
                        "VernacExtend",
                        "49795aa14bce980bd770acc759456462f1e2dbb2"
                    ]
                },
                {
                    "command": [
                        "easy.",
                        "VernacExtend",
                        "ef1368621ae14ed4e378e6e1c58fbee46db9a962"
                    ]
                },
                {
                    "command": [
                        "split.",
                        "VernacExtend",
                        "55abc140132bd88981001ac656020469a8d503eb"
                    ]
                },
                {
                    "command": [
                        "now rewrite B2R_FF2B.",
                        "VernacExtend",
                        "364a0e8b8e6f13efaa19a009ab431dc2474ea6f2"
                    ]
                },
                {
                    "command": [
                        "split.",
                        "VernacExtend",
                        "55abc140132bd88981001ac656020469a8d503eb"
                    ]
                },
                {
                    "command": [
                        "now rewrite is_finite_FF2B.",
                        "VernacExtend",
                        "705875eebcbc072e4ea86daec6e02904c532c7d2"
                    ]
                },
                {
                    "command": [
                        "intro.",
                        "VernacExtend",
                        "3999be354c758ba0d1866e0fcc78a7288779a224"
                    ]
                },
                {
                    "command": [
                        "rewrite Bsign_FF2B.",
                        "VernacExtend",
                        "76a51b8aae4f12f644ab280018318f288b7848d3"
                    ]
                },
                {
                    "command": [
                        "auto.",
                        "VernacExtend",
                        "1f09da0addd069b3b65326f8c71967acc1e985af"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        }
    ]
}