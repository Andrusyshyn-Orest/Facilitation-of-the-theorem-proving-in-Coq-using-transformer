{
    "filename": "veric/Clight_new.v",
    "coq_project": "VST",
    "vernac_cmds": [
        [
            "Require Import VST.sepcomp.semantics.",
            "VernacRequire",
            "a2be15457f8bb984f06f0e1c749919cf8e319def"
        ],
        [
            "Require Import VST.veric.Clight_base.",
            "VernacRequire",
            "03391ebcbe352738cbe4d19626ab439bfac7c2e7"
        ],
        [
            "Require Import VST.veric.Clight_lemmas.",
            "VernacRequire",
            "02532b9c71acd440dec2f77aca2af2a0760847e8"
        ],
        [
            "Require compcert.common.Globalenvs.",
            "VernacRequire",
            "c9a2222a20164d8da0edccbdfe381b2e29e92d7e"
        ],
        [
            "Inductive cont': Type := | Kseq: statement -> cont' | Kloop1: statement -> statement -> cont' | Kloop2: statement -> statement -> cont' | Kswitch: cont' | Kcall: forall (l: option ident), function -> env -> temp_env -> cont'.",
            "VernacInductive",
            "3599cff7873652fe0517bcc335514a79467dda34"
        ],
        [
            "Definition cont := list cont'.",
            "VernacDefinition",
            "fc78543a8bfc4da4b97dd26849e3d820c172ebee"
        ],
        [
            "Fixpoint call_cont (k: cont) : cont := match k with | Kseq s :: k => call_cont k | Kloop1 _ _ :: k => call_cont k | Kloop2 _ _ :: k => call_cont k | Kswitch :: k => call_cont k | _ => k end.",
            "VernacFixpoint",
            "d9660aa62895de22e78947649619a74fec9b0a15"
        ],
        [
            "Fixpoint current_function (k: cont) : option function := match k with | Kseq s :: k => current_function k | Kloop1 _ _ :: k => current_function k | Kloop2 _ _:: k =>current_function k | Kswitch :: k => current_function k | Kcall _ f _ _ :: _ => Some f | _ => None end.",
            "VernacFixpoint",
            "fbe68480f65bb9614cbd835a5da912bb52def965"
        ],
        [
            "Fixpoint continue_cont (k: cont) : cont := match k with | Kseq s :: k' => continue_cont k' | Kloop1 s1 s2 :: k' => Kseq s2 :: Kloop2 s1 s2 :: k' | Kswitch :: k' => continue_cont k' | _ => nil end.",
            "VernacFixpoint",
            "8544f8e88d2e56038bca12d6ac3455961c87f1b1"
        ],
        [
            "Lemma call_cont_nonnil: forall k f, current_function k = Some f -> call_cont k <> nil.",
            "VernacStartTheoremProof",
            "f37be28cfcad1af50871ccdaa626a231db3eceb1"
        ],
        [
            "intros k.",
            "VernacExtend",
            "494800a8d2673abb596b8be5a6bf555ab7d2a2fb"
        ],
        [
            "induction k; simpl; intros.",
            "VernacExtend",
            "bc9c319dc273ce1d99fb2dbb93133c6b8381bda7"
        ],
        [
            "inv H.",
            "VernacExtend",
            "711efba707a6a75ce2cd6ff4b80f031c0d63ab98"
        ],
        [
            "destruct a; eauto.",
            "VernacExtend",
            "00f083951347a10010e279bb27981b630eaafae9"
        ],
        [
            "discriminate.",
            "VernacExtend",
            "66ca81b65e1a53372a2515fdfdd2a6b0677cb9c8"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Fixpoint precontinue_cont (k: cont) : cont := match k with | Kseq s :: k' => precontinue_cont k' | Kloop1 _ _ :: _ => k | Kswitch :: k' => precontinue_cont k' | _ => nil end.",
            "VernacFixpoint",
            "c57d9d10024952987ca632208f48a8025f70600f"
        ],
        [
            "Fixpoint break_cont (k: cont) : cont := match k with | Kseq s :: k' => break_cont k' | Kloop1 _ _ :: k' => k' | Kloop2 _ _ :: k' => k' | Kswitch :: k' => k' | _ => nil end.",
            "VernacFixpoint",
            "73b32b877d4abc4d07b9edbef62ae00342c33990"
        ],
        [
            "Inductive corestate := | State: forall (ve: env) (te: temp_env) (k: cont), corestate | ExtCall: forall (ef: external_function) (args: list val) (lid: option ident) (ve: env) (te: temp_env) (k: cont), corestate.",
            "VernacInductive",
            "409b432d82fa1b6a3b8d768bbbd190ccd4118887"
        ],
        [
            "Fixpoint strip_skip (k: cont) : cont := match k with Kseq Sskip :: k' => strip_skip k' | _ => k end.",
            "VernacFixpoint",
            "ba4af101688b21cf238e2be406c0d80aae4cb36e"
        ],
        [
            "Definition cl_at_external (c: corestate) : option (external_function * list val) := match c with | State _ _ k => None | ExtCall ef args lid ve te k => Some (ef, args) end.",
            "VernacDefinition",
            "369288e9cc78096fed79e31b9883440c3719251a"
        ],
        [
            "Definition cl_after_external (vret: option val) (c: corestate) : option corestate := match vret, c with | Some v, ExtCall ef args (Some id) ve te k => Some (State ve (PTree.set id v te) k) | None, ExtCall ef args (Some id) ve te k => Some (State ve (PTree.set id Vundef te) k) | Some v, ExtCall ef args None ve te k => Some (State ve te k) | None, ExtCall ef args None ve te k => Some (State ve te k) | _, _ => None end.",
            "VernacDefinition",
            "e8de0a694e726d7453c0bf94a379cecc0af8a9a2"
        ],
        [
            "Fixpoint find_label (lbl: label) (s: statement) (k: cont) {struct s}: option cont := match s with | Ssequence s1 s2 => match find_label lbl s1 (Kseq s2 :: k) with | Some sk => Some sk | None => find_label lbl s2 k end | Sifthenelse a s1 s2 => match find_label lbl s1 k with | Some sk => Some sk | None => find_label lbl s2 k end | Sloop s1 a3 => match find_label lbl s1 (Kseq Scontinue :: Kloop1 s1 a3 :: k) with | Some sk => Some sk | None => find_label lbl a3 (Kloop2 s1 a3 :: k) end | Sswitch e sl => find_label_ls lbl sl (Kswitch :: k) | Slabel lbl' s' => if ident_eq lbl lbl' then Some(Kseq s' :: k) else find_label lbl s' k | _ => None end with find_label_ls (lbl: label) (sl: labeled_statements) (k: cont) {struct sl}: option cont := match sl with | LSnil => None | LScons _ s sl' => match find_label lbl s (Kseq (seq_of_labeled_statement sl') :: k) with | Some sk => Some sk | None => find_label_ls lbl sl' k end end.",
            "VernacFixpoint",
            "ac3968091b846926b48a243e604dae32319d268b"
        ],
        [
            "Inductive cl_step (ge: Clight.genv): forall (q: corestate) (m: mem) (q': corestate) (m': mem), Prop := | step_assign: forall ve te k m a1 a2 loc ofs v2 v m', type_is_volatile (typeof a1) = false -> Clight.eval_lvalue ge ve te m a1 loc ofs -> Clight.eval_expr ge ve te m a2 v2 -> Cop.sem_cast v2 (typeof a2) (typeof a1) m = Some v -> Clight.assign_loc ge (typeof a1) m loc ofs v m' -> cl_step ge (State ve te (Kseq (Sassign a1 a2):: k)) m (State ve te k) m' | step_set: forall ve te k m id a v, Clight.eval_expr ge ve te m a v -> cl_step ge (State ve te (Kseq (Sset id a) :: k)) m (State ve (PTree.set id v te) k) m | step_call_internal: forall ve te k m optid a al tyargs tyres cc vf vargs f m1 ve' le', Cop.classify_fun (typeof a) = Cop.fun_case_f tyargs tyres cc -> Clight.eval_expr ge ve te m a vf -> Clight.eval_exprlist ge ve te m al tyargs vargs -> Genv.find_funct ge vf = Some (Internal f) -> type_of_function f = Tfunction tyargs tyres cc -> list_norepet (var_names f.(fn_params) ++ var_names f.(fn_temps)) -> forall (NRV: list_norepet (var_names f.(fn_vars))), Clight.alloc_variables ge empty_env m (f.(fn_vars)) ve' m1 -> bind_parameter_temps f.(fn_params) vargs (create_undef_temps f.(fn_temps)) = Some le' -> cl_step ge (State ve te (Kseq (Scall optid a al) :: k)) m (State ve' le' (Kseq f.(fn_body) :: Kseq (Sreturn None) :: Kcall optid f ve te :: k)) m1 | step_call_external: forall ve te k m optid a al tyargs tyres cc vf vargs ef, Cop.classify_fun (typeof a) = Cop.fun_case_f tyargs tyres cc -> Clight.eval_expr ge ve te m a vf -> Clight.eval_exprlist ge ve te m al tyargs vargs -> Genv.find_funct ge vf = Some (External ef tyargs tyres cc) -> cl_step ge (State ve te (Kseq (Scall optid a al) :: k)) m (ExtCall ef vargs optid ve te k) m | step_seq: forall ve te k m s1 s2 st' m', cl_step ge (State ve te (Kseq s1 :: Kseq s2 :: k)) m st' m' -> cl_step ge (State ve te (Kseq (Ssequence s1 s2) :: k)) m st' m' | step_skip: forall ve te k m st' m', cl_step ge (State ve te k) m st' m' -> cl_step ge (State ve te (Kseq Sskip :: k)) m st' m' | step_continue: forall ve te k m st' m', cl_step ge (State ve te (continue_cont k)) m st' m' -> cl_step ge (State ve te (Kseq Scontinue :: k)) m st' m' | step_break: forall ve te k m st' m', cl_step ge (State ve te (break_cont k)) m st' m' -> cl_step ge (State ve te (Kseq Sbreak :: k)) m st' m' | step_ifthenelse: forall ve te k m a s1 s2 v1 b, Clight.eval_expr ge ve te m a v1 -> Cop.bool_val v1 (typeof a) m = Some b -> cl_step ge (State ve te (Kseq (Sifthenelse a s1 s2) :: k)) m (State ve te (Kseq (if b then s1 else s2) :: k)) m | step_for: forall ve te k m s1 s2, cl_step ge (State ve te (Kseq (Sloop s1 s2) :: k)) m (State ve te (Kseq s1 :: Kseq Scontinue :: Kloop1 s1 s2 :: k)) m | step_loop2: forall ve te k m a3 s, cl_step ge (State ve te (Kloop2 s a3 :: k)) m (State ve te (Kseq s :: Kseq Scontinue :: Kloop1 s a3 :: k)) m | step_return: forall f ve te optexp optid k m v' m' ve' te' te'' k', call_cont k = Kcall optid f ve' te' :: k' -> Mem.free_list m (Clight.blocks_of_env ge ve) = Some m' -> match optexp with None => v' = Vundef | Some a => exists v, Clight.eval_expr ge ve te m a v /\\ Cop.sem_cast v (typeof a) f.(fn_return) m = Some v' end -> match optid with None => True /\\ te''=te' | Some id => True /\\ te'' = PTree.set id v' te' end -> cl_step ge (State ve te (Kseq (Sreturn optexp) :: k)) m (State ve' te'' k') m' | step_switch: forall ve te k m a sl v n, Clight.eval_expr ge ve te m a v -> Cop.sem_switch_arg v (typeof a) = Some n -> cl_step ge (State ve te (Kseq (Sswitch a sl) :: k)) m (State ve te (Kseq (seq_of_labeled_statement (select_switch n sl)) :: Kswitch :: k)) m | step_label: forall ve te k m lbl s st' m', cl_step ge (State ve te (Kseq s :: k)) m st' m' -> cl_step ge (State ve te (Kseq (Slabel lbl s) :: k)) m st' m' | step_goto: forall f ve te k m lbl k' (CUR: current_function k = Some f), find_label lbl f.(fn_body) (Kseq (Sreturn None) :: (call_cont k)) = Some k' -> cl_step ge (State ve te (Kseq (Sgoto lbl) :: k)) m (State ve te k') m.",
            "VernacInductive",
            "3709bd65cb64b2a44e6fdc56b7d51dda841e4c3a"
        ],
        [
            "Definition vret2v (vret: list val) : val := match vret with v::nil => v | _ => Vundef end.",
            "VernacDefinition",
            "83f7a04baaca1340dbdb970af663ad2608356aa1"
        ],
        [
            "Definition cl_halted (c: corestate) : option val := None.",
            "VernacDefinition",
            "7fa8865730067abdac535a229781a8c0821fc755"
        ],
        [
            "Definition empty_function : function := mkfunction Tvoid cc_default nil nil nil Sskip.",
            "VernacDefinition",
            "beac42c7bfcc728b26aad46e3afb89efd3fdb51d"
        ],
        [
            "Fixpoint temp_bindings (i: positive) (vl: list val) := match vl with | nil => PTree.empty val | v::vl' => PTree.set i v (temp_bindings (i+1)%positive vl') end.",
            "VernacFixpoint",
            "2733fbc54c152a2a4ec6f21634f1081fb04b21e3"
        ],
        [
            "Definition Tint32s := Tint I32 Signed noattr.",
            "VernacDefinition",
            "4148ae98eb81dc84fda123c4cea2a5adac246e93"
        ],
        [
            "Definition true_expr : Clight.expr := Clight.Econst_int Int.one Tint32s.",
            "VernacDefinition",
            "5855519715e1f9def3553179e24094608bdc195f"
        ],
        [
            "Fixpoint typed_params (i: positive) (n: nat) : list (ident * type) := match n with | O => nil | S n' => (i, Tint32s) :: typed_params (i+1)%positive n' end.",
            "VernacFixpoint",
            "6e1a2fda1410ba5cf4081d61b2be7b86f61eff4d"
        ],
        [
            "Fixpoint params_of_types (i: positive) (l : list type) : list (ident * type) := match l with | nil => nil | t :: l => (i, t) :: params_of_types (i+1)%positive l end.",
            "VernacFixpoint",
            "56697cb2e73579bd9f4e90b7fdc56cf99faefcc5"
        ],
        [
            "Fixpoint typelist2list (tl: typelist) : list type := match tl with | Tcons t r => t::typelist2list r | Tnil => nil end.",
            "VernacFixpoint",
            "5efb349833692998662b08af889606ed8f577cd6"
        ],
        [
            "Definition params_of_fundef (f: fundef) : list type := match f with | Internal {| fn_params := fn_params |} => map snd fn_params | External _ t _ _ => typelist2list t end.",
            "VernacDefinition",
            "66735d11093d97ff5e2caa99c9037aa0e634c9f1"
        ],
        [
            "Inductive val_casted_list: list val -> typelist -> Prop := | vcl_nil: val_casted_list nil Tnil | vcl_cons: forall v1 vl ty1 tyl, val_casted v1 ty1 -> val_casted_list vl tyl -> val_casted_list (v1 :: vl) (Tcons ty1 tyl).",
            "VernacInductive",
            "47750afbf5bb60fee037944a9e415d280c88ff4a"
        ],
        [
            "Definition cl_initial_core (ge: genv) (v: val) (args: list val) (q: corestate) : Prop := match v with Vptr b i => if Ptrofs.eq_dec i Ptrofs.zero then match Genv.find_funct_ptr ge b with Some f => match type_of_fundef f with Tfunction targs _ c => c = cc_default /\\ val_casted_list args targs /\\ Val.has_type_list args (Ctypes.typlist_of_typelist targs) /\\ q = State empty_env (temp_bindings 1%positive (v::args)) (Kseq (Scall None (Etempvar 1%positive (type_of_fundef f)) (map (fun x => Etempvar (fst x) (snd x)) (params_of_types 2%positive (params_of_fundef f)))) :: Kseq (Sloop Sskip Sskip) :: nil) | _ => False end | _ => False end else False | _ => False end.",
            "VernacDefinition",
            "cd380484d11607aef1bd728055a7e0eede59ff8b"
        ],
        [
            "Lemma cl_corestep_not_at_external: forall ge m q m' q', cl_step ge q m q' m' -> cl_at_external q = None.",
            "VernacStartTheoremProof",
            "d87d2ea3d1c8434b5ee2e2cf53f857d0423c42ee"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "destruct q; simpl; auto.",
            "VernacExtend",
            "21c44c4dd8f18761d1046459f78227a63ec659f1"
        ],
        [
            "inv H.",
            "VernacExtend",
            "711efba707a6a75ce2cd6ff4b80f031c0d63ab98"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma cl_corestep_not_halted : forall ge m q m' q', cl_step ge q m q' m' -> cl_halted q = None.",
            "VernacStartTheoremProof",
            "31819c4d3ac3b2534376721622998ced7dd94f4f"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "simpl; auto.",
            "VernacExtend",
            "9b631374b1d3067f703fd99c5dc6e1e5c8405957"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma cl_after_at_external_excl : forall retv q q', cl_after_external retv q = Some q' -> cl_at_external q' = None.",
            "VernacStartTheoremProof",
            "673b4e9e2e958b0d5076f435d3cbe35c1743cff1"
        ],
        [
            "intros until q'; intros H.",
            "VernacExtend",
            "6b8782b38a71e2255ad7871b2409c41ee0869faa"
        ],
        [
            "unfold cl_after_external in H.",
            "VernacExtend",
            "641cb81b08c1af0c2d44dc71bff004832d7d8df2"
        ],
        [
            "destruct retv; destruct q; try congruence.",
            "VernacExtend",
            "568e2614aff31d7d43b60a49e3c8e4e294e11a05"
        ],
        [
            "destruct lid; try congruence; inv H; auto.",
            "VernacExtend",
            "7605d591d40cea9de35faaf172ee43070d392126"
        ],
        [
            "destruct lid; try congruence; inv H; auto.",
            "VernacExtend",
            "7605d591d40cea9de35faaf172ee43070d392126"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Definition arg_well_formed args m0:= Val.inject_list (Mem.flat_inj (Mem.nextblock m0)) args args.",
            "VernacDefinition",
            "e2cf7ede7d6106f42dc955a71dbb6451fa2ef76e"
        ],
        [
            "Program Definition cl_core_sem (ge: genv): @CoreSemantics corestate mem := @Build_CoreSemantics _ _ (fun _ m c m' v args => cl_initial_core ge v args c /\\ arg_well_formed args m /\\ m' = m) (fun c _ => cl_at_external c) (fun ret c _ => cl_after_external ret c) (fun c _ => False ) (cl_step ge) _ (cl_corestep_not_at_external ge).",
            "VernacDefinition",
            "8620398413d098c7e0b40350ecad3caf7ac8f14c"
        ],
        [
            "Lemma cl_corestep_fun: forall ge m q m1 q1 m2 q2, cl_step ge q m q1 m1 -> cl_step ge q m q2 m2 -> (q1,m1)=(q2,m2).",
            "VernacStartTheoremProof",
            "fb2f58744893ce9ba5656fbd442fdb2610618a1a"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "rename H0 into STEP; revert q2 m2 STEP; induction H; intros; inv STEP; simpl; auto; repeat fun_tac; auto.",
            "VernacExtend",
            "75fb8b2ab16e58db974a50d8758fe8646e6820b4"
        ],
        [
            "inversion2 H H13.",
            "VernacExtend",
            "81205e52947d3b597394e1b97879cf9c107046cb"
        ],
        [
            "repeat fun_tac; auto.",
            "VernacExtend",
            "aa7fb367e23650fcb82abe9ddea4da0d3d76e588"
        ],
        [
            "destruct optexp.",
            "VernacExtend",
            "78db45158c9358bba3b02340052e75aba8da94ef"
        ],
        [
            "destruct H1 as [v [? ?]].",
            "VernacExtend",
            "859780f42507d578361d402569424fe0f038eef8"
        ],
        [
            "destruct H12 as [v2 [? ?]].",
            "VernacExtend",
            "28112168083dd289915c579accfb6de136bb029a"
        ],
        [
            "repeat fun_tac.",
            "VernacExtend",
            "aa666071b8578959e4982ee54b4a228b7ae97cf2"
        ],
        [
            "inversion2 H H7.",
            "VernacExtend",
            "46eefd8eb935182958858b23a580c394be9727c7"
        ],
        [
            "inversion2 H3 H5.",
            "VernacExtend",
            "e0697b78e72a36979d1db753bb95b6c6aadcd65d"
        ],
        [
            "destruct optid.",
            "VernacExtend",
            "6308178f4fd659bcf0fa445dfcd171289f4f8809"
        ],
        [
            "destruct H2,H13.",
            "VernacExtend",
            "84e2151ecb9c0095945f94742c1c592831efdcf3"
        ],
        [
            "subst.",
            "VernacExtend",
            "ccc9cb848804101be22a0bb6c324861981c5c7f1"
        ],
        [
            "auto.",
            "VernacExtend",
            "1f09da0addd069b3b65326f8c71967acc1e985af"
        ],
        [
            "destruct H13,H2; subst; auto.",
            "VernacExtend",
            "70abcf4f7fcde255fe18a505b6080e0537b46bf8"
        ],
        [
            "inversion2 H H7.",
            "VernacExtend",
            "46eefd8eb935182958858b23a580c394be9727c7"
        ],
        [
            "destruct optid.",
            "VernacExtend",
            "6308178f4fd659bcf0fa445dfcd171289f4f8809"
        ],
        [
            "destruct H2,H13; congruence.",
            "VernacExtend",
            "2bdae2b3bca21c0d97bc73df0856974bd0f0178c"
        ],
        [
            "destruct H2,H13.",
            "VernacExtend",
            "84e2151ecb9c0095945f94742c1c592831efdcf3"
        ],
        [
            "subst.",
            "VernacExtend",
            "ccc9cb848804101be22a0bb6c324861981c5c7f1"
        ],
        [
            "auto.",
            "VernacExtend",
            "1f09da0addd069b3b65326f8c71967acc1e985af"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ]
    ],
    "proofs": [
        {
            "name": "call_cont_nonnil",
            "line_nb": 9,
            "steps": [
                {
                    "command": [
                        "intros k.",
                        "VernacExtend",
                        "494800a8d2673abb596b8be5a6bf555ab7d2a2fb"
                    ]
                },
                {
                    "command": [
                        "induction k; simpl; intros.",
                        "VernacExtend",
                        "bc9c319dc273ce1d99fb2dbb93133c6b8381bda7"
                    ]
                },
                {
                    "command": [
                        "inv H.",
                        "VernacExtend",
                        "711efba707a6a75ce2cd6ff4b80f031c0d63ab98"
                    ]
                },
                {
                    "command": [
                        "destruct a; eauto.",
                        "VernacExtend",
                        "00f083951347a10010e279bb27981b630eaafae9"
                    ]
                },
                {
                    "command": [
                        "discriminate.",
                        "VernacExtend",
                        "66ca81b65e1a53372a2515fdfdd2a6b0677cb9c8"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "cl_corestep_not_at_external",
            "line_nb": 36,
            "steps": [
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "destruct q; simpl; auto.",
                        "VernacExtend",
                        "21c44c4dd8f18761d1046459f78227a63ec659f1"
                    ]
                },
                {
                    "command": [
                        "inv H.",
                        "VernacExtend",
                        "711efba707a6a75ce2cd6ff4b80f031c0d63ab98"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "cl_corestep_not_halted",
            "line_nb": 41,
            "steps": [
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "simpl; auto.",
                        "VernacExtend",
                        "9b631374b1d3067f703fd99c5dc6e1e5c8405957"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "cl_after_at_external_excl",
            "line_nb": 45,
            "steps": [
                {
                    "command": [
                        "intros until q'; intros H.",
                        "VernacExtend",
                        "6b8782b38a71e2255ad7871b2409c41ee0869faa"
                    ]
                },
                {
                    "command": [
                        "unfold cl_after_external in H.",
                        "VernacExtend",
                        "641cb81b08c1af0c2d44dc71bff004832d7d8df2"
                    ]
                },
                {
                    "command": [
                        "destruct retv; destruct q; try congruence.",
                        "VernacExtend",
                        "568e2614aff31d7d43b60a49e3c8e4e294e11a05"
                    ]
                },
                {
                    "command": [
                        "destruct lid; try congruence; inv H; auto.",
                        "VernacExtend",
                        "7605d591d40cea9de35faaf172ee43070d392126"
                    ]
                },
                {
                    "command": [
                        "destruct lid; try congruence; inv H; auto.",
                        "VernacExtend",
                        "7605d591d40cea9de35faaf172ee43070d392126"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "cl_corestep_fun",
            "line_nb": 54,
            "steps": [
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "rename H0 into STEP; revert q2 m2 STEP; induction H; intros; inv STEP; simpl; auto; repeat fun_tac; auto.",
                        "VernacExtend",
                        "75fb8b2ab16e58db974a50d8758fe8646e6820b4"
                    ]
                },
                {
                    "command": [
                        "inversion2 H H13.",
                        "VernacExtend",
                        "81205e52947d3b597394e1b97879cf9c107046cb"
                    ]
                },
                {
                    "command": [
                        "repeat fun_tac; auto.",
                        "VernacExtend",
                        "aa7fb367e23650fcb82abe9ddea4da0d3d76e588"
                    ]
                },
                {
                    "command": [
                        "destruct optexp.",
                        "VernacExtend",
                        "78db45158c9358bba3b02340052e75aba8da94ef"
                    ]
                },
                {
                    "command": [
                        "destruct H1 as [v [? ?]].",
                        "VernacExtend",
                        "859780f42507d578361d402569424fe0f038eef8"
                    ]
                },
                {
                    "command": [
                        "destruct H12 as [v2 [? ?]].",
                        "VernacExtend",
                        "28112168083dd289915c579accfb6de136bb029a"
                    ]
                },
                {
                    "command": [
                        "repeat fun_tac.",
                        "VernacExtend",
                        "aa666071b8578959e4982ee54b4a228b7ae97cf2"
                    ]
                },
                {
                    "command": [
                        "inversion2 H H7.",
                        "VernacExtend",
                        "46eefd8eb935182958858b23a580c394be9727c7"
                    ]
                },
                {
                    "command": [
                        "inversion2 H3 H5.",
                        "VernacExtend",
                        "e0697b78e72a36979d1db753bb95b6c6aadcd65d"
                    ]
                },
                {
                    "command": [
                        "destruct optid.",
                        "VernacExtend",
                        "6308178f4fd659bcf0fa445dfcd171289f4f8809"
                    ]
                },
                {
                    "command": [
                        "destruct H2,H13.",
                        "VernacExtend",
                        "84e2151ecb9c0095945f94742c1c592831efdcf3"
                    ]
                },
                {
                    "command": [
                        "subst.",
                        "VernacExtend",
                        "ccc9cb848804101be22a0bb6c324861981c5c7f1"
                    ]
                },
                {
                    "command": [
                        "auto.",
                        "VernacExtend",
                        "1f09da0addd069b3b65326f8c71967acc1e985af"
                    ]
                },
                {
                    "command": [
                        "destruct H13,H2; subst; auto.",
                        "VernacExtend",
                        "70abcf4f7fcde255fe18a505b6080e0537b46bf8"
                    ]
                },
                {
                    "command": [
                        "inversion2 H H7.",
                        "VernacExtend",
                        "46eefd8eb935182958858b23a580c394be9727c7"
                    ]
                },
                {
                    "command": [
                        "destruct optid.",
                        "VernacExtend",
                        "6308178f4fd659bcf0fa445dfcd171289f4f8809"
                    ]
                },
                {
                    "command": [
                        "destruct H2,H13; congruence.",
                        "VernacExtend",
                        "2bdae2b3bca21c0d97bc73df0856974bd0f0178c"
                    ]
                },
                {
                    "command": [
                        "destruct H2,H13.",
                        "VernacExtend",
                        "84e2151ecb9c0095945f94742c1c592831efdcf3"
                    ]
                },
                {
                    "command": [
                        "subst.",
                        "VernacExtend",
                        "ccc9cb848804101be22a0bb6c324861981c5c7f1"
                    ]
                },
                {
                    "command": [
                        "auto.",
                        "VernacExtend",
                        "1f09da0addd069b3b65326f8c71967acc1e985af"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        }
    ]
}